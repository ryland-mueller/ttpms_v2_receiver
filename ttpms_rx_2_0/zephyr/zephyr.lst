
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	00 be 00 20 6d 5f 01 00 eb 99 02 00 25 5f 01 00     ... m_......%_..
  10:	25 5f 01 00 25 5f 01 00 25 5f 01 00 00 00 00 00     %_..%_..%_......
	...
  2c:	3d 4e 01 00 25 5f 01 00 00 00 00 00 e5 4d 01 00     =N..%_.......M..
  3c:	25 5f 01 00                                         %_..

00000040 <_irq_vector_table>:
  40:	15 4f 01 00 c7 ea 02 00 15 4f 01 00 15 4f 01 00     .O.......O...O..
  50:	15 4f 01 00 15 4f 01 00 15 4f 01 00 15 4f 01 00     .O...O...O...O..
  60:	8f ea 02 00 15 4f 01 00 15 4f 01 00 ad ea 02 00     .....O...O......
  70:	15 4f 01 00 15 4f 01 00 15 4f 01 00 15 4f 01 00     .O...O...O...O..
  80:	15 4f 01 00 15 4f 01 00 15 4f 01 00 15 4f 01 00     .O...O...O...O..
  90:	15 4f 01 00 15 4f 01 00 15 4f 01 00 15 4f 01 00     .O...O...O...O..
  a0:	15 4f 01 00 15 4f 01 00 15 4f 01 00 15 4f 01 00     .O...O...O...O..
  b0:	15 4f 01 00 15 4f 01 00 15 4f 01 00 15 4f 01 00     .O...O...O...O..
  c0:	15 4f 01 00 15 4f 01 00 15 4f 01 00 15 4f 01 00     .O...O...O...O..
  d0:	15 4f 01 00 15 4f 01 00 15 4f 01 00 15 4f 01 00     .O...O...O...O..
  e0:	15 4f 01 00 15 4f 01 00 15 4f 01 00 15 4f 01 00     .O...O...O...O..
  f0:	15 4f 01 00 15 4f 01 00 15 4f 01 00 15 4f 01 00     .O...O...O...O..

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295
     110:	f04f 30ff 	movne.w	r0, #4294967295
     114:	f000 b80c 	b.w	130 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f00c faea 	bl	c6f8 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__aeabi_idiv0>:
     130:	4770      	bx	lr
     132:	bf00      	nop

00000134 <ocrypto_bigint_add256>:
     134:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     138:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     13c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     140:	185b      	adds	r3, r3, r1
     142:	eb54 040c 	adcs.w	r4, r4, ip
     146:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     14a:	414d      	adcs	r5, r1
     14c:	eb56 060c 	adcs.w	r6, r6, ip
     150:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     154:	414f      	adcs	r7, r1
     156:	eb58 080c 	adcs.w	r8, r8, ip
     15a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     15e:	eb59 0901 	adcs.w	r9, r9, r1
     162:	eb5a 0a0c 	adcs.w	sl, sl, ip
     166:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     16a:	4180      	sbcs	r0, r0
     16c:	3001      	adds	r0, #1
     16e:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     172:	4770      	bx	lr

00000174 <ocrypto_bigint_sub256>:
     174:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     178:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     17c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     180:	1a5b      	subs	r3, r3, r1
     182:	eb74 040c 	sbcs.w	r4, r4, ip
     186:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     18a:	418d      	sbcs	r5, r1
     18c:	eb76 060c 	sbcs.w	r6, r6, ip
     190:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     194:	418f      	sbcs	r7, r1
     196:	eb78 080c 	sbcs.w	r8, r8, ip
     19a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     19e:	eb79 0901 	sbcs.w	r9, r9, r1
     1a2:	eb7a 0a0c 	sbcs.w	sl, sl, ip
     1a6:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     1aa:	4180      	sbcs	r0, r0
     1ac:	4240      	negs	r0, r0
     1ae:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     1b2:	4770      	bx	lr

000001b4 <ocrypto_bigint_cadd256>:
     1b4:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     1b8:	4252      	negs	r2, r2
     1ba:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     1be:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     1c2:	4017      	ands	r7, r2
     1c4:	19db      	adds	r3, r3, r7
     1c6:	ea18 0802 	ands.w	r8, r8, r2
     1ca:	eb54 0408 	adcs.w	r4, r4, r8
     1ce:	ea19 0902 	ands.w	r9, r9, r2
     1d2:	eb55 0509 	adcs.w	r5, r5, r9
     1d6:	ea1a 0a02 	ands.w	sl, sl, r2
     1da:	eb56 060a 	adcs.w	r6, r6, sl
     1de:	c078      	stmia	r0!, {r3, r4, r5, r6}
     1e0:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     1e4:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     1e8:	4017      	ands	r7, r2
     1ea:	417b      	adcs	r3, r7
     1ec:	ea18 0802 	ands.w	r8, r8, r2
     1f0:	eb54 0408 	adcs.w	r4, r4, r8
     1f4:	ea19 0902 	ands.w	r9, r9, r2
     1f8:	eb55 0509 	adcs.w	r5, r5, r9
     1fc:	ea1a 0a02 	ands.w	sl, sl, r2
     200:	eb56 060a 	adcs.w	r6, r6, sl
     204:	c078      	stmia	r0!, {r3, r4, r5, r6}
     206:	4180      	sbcs	r0, r0
     208:	3001      	adds	r0, #1
     20a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     20e:	4770      	bx	lr

00000210 <ocrypto_bigint_csub256>:
     210:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     214:	4252      	negs	r2, r2
     216:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     21a:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     21e:	4017      	ands	r7, r2
     220:	1bdb      	subs	r3, r3, r7
     222:	ea18 0802 	ands.w	r8, r8, r2
     226:	eb74 0408 	sbcs.w	r4, r4, r8
     22a:	ea19 0902 	ands.w	r9, r9, r2
     22e:	eb75 0509 	sbcs.w	r5, r5, r9
     232:	ea1a 0a02 	ands.w	sl, sl, r2
     236:	eb76 060a 	sbcs.w	r6, r6, sl
     23a:	c078      	stmia	r0!, {r3, r4, r5, r6}
     23c:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     240:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     244:	4017      	ands	r7, r2
     246:	41bb      	sbcs	r3, r7
     248:	ea18 0802 	ands.w	r8, r8, r2
     24c:	eb74 0408 	sbcs.w	r4, r4, r8
     250:	ea19 0902 	ands.w	r9, r9, r2
     254:	eb75 0509 	sbcs.w	r5, r5, r9
     258:	ea1a 0a02 	ands.w	sl, sl, r2
     25c:	eb76 060a 	sbcs.w	r6, r6, sl
     260:	c078      	stmia	r0!, {r3, r4, r5, r6}
     262:	4180      	sbcs	r0, r0
     264:	4240      	negs	r0, r0
     266:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     26a:	4770      	bx	lr

0000026c <ocrypto_bigint_cswap256>:
     26c:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
     270:	4252      	negs	r2, r2
     272:	f04f 0804 	mov.w	r8, #4

00000276 <cswap256_loop>:
     276:	e890 0030 	ldmia.w	r0, {r4, r5}
     27a:	e891 00c0 	ldmia.w	r1, {r6, r7}
     27e:	1ba3      	subs	r3, r4, r6
     280:	4013      	ands	r3, r2
     282:	1ae4      	subs	r4, r4, r3
     284:	18f6      	adds	r6, r6, r3
     286:	1beb      	subs	r3, r5, r7
     288:	4013      	ands	r3, r2
     28a:	1aed      	subs	r5, r5, r3
     28c:	18ff      	adds	r7, r7, r3
     28e:	c030      	stmia	r0!, {r4, r5}
     290:	c1c0      	stmia	r1!, {r6, r7}
     292:	f1b8 0801 	subs.w	r8, r8, #1
     296:	d1ee      	bne.n	276 <cswap256_loop>
     298:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
     29c:	4770      	bx	lr
     29e:	bf00      	nop

000002a0 <ocrypto_mul256_noframe>:
     2a0:	b500      	push	{lr}
     2a2:	e892 07dc 	ldmia.w	r2, {r2, r3, r4, r6, r7, r8, r9, sl}
     2a6:	e92d 07dc 	stmdb	sp!, {r2, r3, r4, r6, r7, r8, r9, sl}
     2aa:	e8b1 5780 	ldmia.w	r1!, {r7, r8, r9, sl, ip, lr}
     2ae:	b402      	push	{r1}
     2b0:	fba7 5102 	umull	r5, r1, r7, r2
     2b4:	950a      	str	r5, [sp, #40]	; 0x28
     2b6:	fba8 0b02 	umull	r0, fp, r8, r2
     2ba:	fbe7 1063 	umaal	r1, r0, r7, r3
     2be:	fbe9 b062 	umaal	fp, r0, r9, r2
     2c2:	910b      	str	r1, [sp, #44]	; 0x2c
     2c4:	fba8 5103 	umull	r5, r1, r8, r3
     2c8:	fbea 0162 	umaal	r0, r1, sl, r2
     2cc:	fbe7 b564 	umaal	fp, r5, r7, r4
     2d0:	fbe7 0566 	umaal	r0, r5, r7, r6
     2d4:	fbe8 1566 	umaal	r1, r5, r8, r6
     2d8:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
     2dc:	fba9 b603 	umull	fp, r6, r9, r3
     2e0:	fbea 1663 	umaal	r1, r6, sl, r3
     2e4:	fbec 5663 	umaal	r5, r6, ip, r3
     2e8:	fbe8 0b64 	umaal	r0, fp, r8, r4
     2ec:	fbe9 1b64 	umaal	r1, fp, r9, r4
     2f0:	fbea 5b64 	umaal	r5, fp, sl, r4
     2f4:	fbec 6b64 	umaal	r6, fp, ip, r4
     2f8:	900d      	str	r0, [sp, #52]	; 0x34
     2fa:	fbac 3002 	umull	r3, r0, ip, r2
     2fe:	9c05      	ldr	r4, [sp, #20]
     300:	fbee 5062 	umaal	r5, r0, lr, r2
     304:	fbe9 6064 	umaal	r6, r0, r9, r4
     308:	fbea b064 	umaal	fp, r0, sl, r4
     30c:	fbe7 3164 	umaal	r3, r1, r7, r4
     310:	fbe8 5164 	umaal	r5, r1, r8, r4
     314:	9c06      	ldr	r4, [sp, #24]
     316:	fbe8 6164 	umaal	r6, r1, r8, r4
     31a:	fbe9 b164 	umaal	fp, r1, r9, r4
     31e:	fbea 0164 	umaal	r0, r1, sl, r4
     322:	930e      	str	r3, [sp, #56]	; 0x38
     324:	fba7 3204 	umull	r3, r2, r7, r4
     328:	9c07      	ldr	r4, [sp, #28]
     32a:	fbe7 6264 	umaal	r6, r2, r7, r4
     32e:	fbe8 b264 	umaal	fp, r2, r8, r4
     332:	fbe9 0264 	umaal	r0, r2, r9, r4
     336:	fbea 1264 	umaal	r1, r2, sl, r4
     33a:	9c04      	ldr	r4, [sp, #16]
     33c:	fbe9 5364 	umaal	r5, r3, r9, r4
     340:	fbea 6364 	umaal	r6, r3, sl, r4
     344:	9c08      	ldr	r4, [sp, #32]
     346:	fbe7 b364 	umaal	fp, r3, r7, r4
     34a:	fbe8 0364 	umaal	r0, r3, r8, r4
     34e:	fbe9 1364 	umaal	r1, r3, r9, r4
     352:	fbea 2364 	umaal	r2, r3, sl, r4
     356:	950f      	str	r5, [sp, #60]	; 0x3c
     358:	f85d 9b04 	ldr.w	r9, [sp], #4
     35c:	e899 0600 	ldmia.w	r9, {r9, sl}
     360:	f8dd 8000 	ldr.w	r8, [sp]
     364:	fba9 5408 	umull	r5, r4, r9, r8
     368:	fbea b468 	umaal	fp, r4, sl, r8
     36c:	f8dd 8010 	ldr.w	r8, [sp, #16]
     370:	fbec 0468 	umaal	r0, r4, ip, r8
     374:	fbee 1468 	umaal	r1, r4, lr, r8
     378:	fbe9 2468 	umaal	r2, r4, r9, r8
     37c:	fbea 3468 	umaal	r3, r4, sl, r8
     380:	f8dd 8004 	ldr.w	r8, [sp, #4]
     384:	fbee 6568 	umaal	r6, r5, lr, r8
     388:	fbe9 b568 	umaal	fp, r5, r9, r8
     38c:	fbea 0568 	umaal	r0, r5, sl, r8
     390:	f8dd 8014 	ldr.w	r8, [sp, #20]
     394:	fbec 1568 	umaal	r1, r5, ip, r8
     398:	fbee 2568 	umaal	r2, r5, lr, r8
     39c:	fbe9 3568 	umaal	r3, r5, r9, r8
     3a0:	fbea 4568 	umaal	r4, r5, sl, r8
     3a4:	960f      	str	r6, [sp, #60]	; 0x3c
     3a6:	f8dd 8008 	ldr.w	r8, [sp, #8]
     3aa:	fbae 7608 	umull	r7, r6, lr, r8
     3ae:	fbe9 0668 	umaal	r0, r6, r9, r8
     3b2:	fbea 1668 	umaal	r1, r6, sl, r8
     3b6:	f8dd 8018 	ldr.w	r8, [sp, #24]
     3ba:	fbec 2668 	umaal	r2, r6, ip, r8
     3be:	fbee 3668 	umaal	r3, r6, lr, r8
     3c2:	fbe9 4668 	umaal	r4, r6, r9, r8
     3c6:	fbea 5668 	umaal	r5, r6, sl, r8
     3ca:	f8dd 800c 	ldr.w	r8, [sp, #12]
     3ce:	fbec b768 	umaal	fp, r7, ip, r8
     3d2:	fbee 0768 	umaal	r0, r7, lr, r8
     3d6:	fbe9 1768 	umaal	r1, r7, r9, r8
     3da:	fbea 2768 	umaal	r2, r7, sl, r8
     3de:	f8dd 801c 	ldr.w	r8, [sp, #28]
     3e2:	fbec 3768 	umaal	r3, r7, ip, r8
     3e6:	fbee 4768 	umaal	r4, r7, lr, r8
     3ea:	fbe9 5768 	umaal	r5, r7, r9, r8
     3ee:	fbea 6768 	umaal	r6, r7, sl, r8
     3f2:	b008      	add	sp, #32
     3f4:	bd00      	pop	{pc}
     3f6:	bf00      	nop

000003f8 <ocrypto_bigint_mul256>:
     3f8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     3fc:	b087      	sub	sp, #28
     3fe:	f7ff ff4f 	bl	2a0 <ocrypto_mul256_noframe>
     402:	f8dd 801c 	ldr.w	r8, [sp, #28]
     406:	f108 0820 	add.w	r8, r8, #32
     40a:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     40e:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
     410:	e887 087f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5, r6, fp}
     414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000418 <ocrypto_sqr256_noframe>:
     418:	b500      	push	{lr}
     41a:	e891 5798 	ldmia.w	r1, {r3, r4, r7, r8, r9, sl, ip, lr}
     41e:	fba3 5203 	umull	r5, r2, r3, r3
     422:	9501      	str	r5, [sp, #4]
     424:	fba3 0104 	umull	r0, r1, r3, r4
     428:	fbe3 2064 	umaal	r2, r0, r3, r4
     42c:	fbe3 1067 	umaal	r1, r0, r3, r7
     430:	9202      	str	r2, [sp, #8]
     432:	fba3 5207 	umull	r5, r2, r3, r7
     436:	fbe3 0268 	umaal	r0, r2, r3, r8
     43a:	fbe4 1564 	umaal	r1, r5, r4, r4
     43e:	fbe3 0568 	umaal	r0, r5, r3, r8
     442:	fbe3 2569 	umaal	r2, r5, r3, r9
     446:	9103      	str	r1, [sp, #12]
     448:	fba4 b607 	umull	fp, r6, r4, r7
     44c:	fbe3 2669 	umaal	r2, r6, r3, r9
     450:	fbe3 566a 	umaal	r5, r6, r3, sl
     454:	fbe4 0b67 	umaal	r0, fp, r4, r7
     458:	fbe4 2b68 	umaal	r2, fp, r4, r8
     45c:	fbe3 5b6a 	umaal	r5, fp, r3, sl
     460:	fbe3 6b6c 	umaal	r6, fp, r3, ip
     464:	9004      	str	r0, [sp, #16]
     466:	fba4 1008 	umull	r1, r0, r4, r8
     46a:	fbe4 5069 	umaal	r5, r0, r4, r9
     46e:	fbe3 606c 	umaal	r6, r0, r3, ip
     472:	fbe3 b06e 	umaal	fp, r0, r3, lr
     476:	fbe7 2167 	umaal	r2, r1, r7, r7
     47a:	fbe4 5169 	umaal	r5, r1, r4, r9
     47e:	fbe4 616a 	umaal	r6, r1, r4, sl
     482:	fbe3 b16e 	umaal	fp, r1, r3, lr
     486:	fbe4 016e 	umaal	r0, r1, r4, lr
     48a:	9205      	str	r2, [sp, #20]
     48c:	fba7 3208 	umull	r3, r2, r7, r8
     490:	fbe4 626a 	umaal	r6, r2, r4, sl
     494:	fbe4 b26c 	umaal	fp, r2, r4, ip
     498:	fbe4 026e 	umaal	r0, r2, r4, lr
     49c:	fbe7 126e 	umaal	r1, r2, r7, lr
     4a0:	fbe7 5368 	umaal	r5, r3, r7, r8
     4a4:	fbe7 6369 	umaal	r6, r3, r7, r9
     4a8:	fbe4 b36c 	umaal	fp, r3, r4, ip
     4ac:	fbe7 036c 	umaal	r0, r3, r7, ip
     4b0:	fbe7 136e 	umaal	r1, r3, r7, lr
     4b4:	fbe8 236e 	umaal	r2, r3, r8, lr
     4b8:	9506      	str	r5, [sp, #24]
     4ba:	fba7 5409 	umull	r5, r4, r7, r9
     4be:	fbe7 b46a 	umaal	fp, r4, r7, sl
     4c2:	fbe7 046c 	umaal	r0, r4, r7, ip
     4c6:	fbe8 146c 	umaal	r1, r4, r8, ip
     4ca:	fbe8 246e 	umaal	r2, r4, r8, lr
     4ce:	fbe9 346e 	umaal	r3, r4, r9, lr
     4d2:	fbe8 6568 	umaal	r6, r5, r8, r8
     4d6:	fbe7 b56a 	umaal	fp, r5, r7, sl
     4da:	fbe8 056a 	umaal	r0, r5, r8, sl
     4de:	fbe8 156c 	umaal	r1, r5, r8, ip
     4e2:	fbe9 256c 	umaal	r2, r5, r9, ip
     4e6:	fbe9 356e 	umaal	r3, r5, r9, lr
     4ea:	fbea 456e 	umaal	r4, r5, sl, lr
     4ee:	9607      	str	r6, [sp, #28]
     4f0:	fba8 7609 	umull	r7, r6, r8, r9
     4f4:	fbe8 066a 	umaal	r0, r6, r8, sl
     4f8:	fbe9 166a 	umaal	r1, r6, r9, sl
     4fc:	fbe9 266c 	umaal	r2, r6, r9, ip
     500:	fbea 366c 	umaal	r3, r6, sl, ip
     504:	fbea 466e 	umaal	r4, r6, sl, lr
     508:	fbec 566e 	umaal	r5, r6, ip, lr
     50c:	fbe8 b769 	umaal	fp, r7, r8, r9
     510:	fbe9 0769 	umaal	r0, r7, r9, r9
     514:	fbe9 176a 	umaal	r1, r7, r9, sl
     518:	fbea 276a 	umaal	r2, r7, sl, sl
     51c:	fbea 376c 	umaal	r3, r7, sl, ip
     520:	fbec 476c 	umaal	r4, r7, ip, ip
     524:	fbec 576e 	umaal	r5, r7, ip, lr
     528:	fbee 676e 	umaal	r6, r7, lr, lr
     52c:	bd00      	pop	{pc}
     52e:	bf00      	nop

00000530 <ocrypto_bigint_sqr256>:
     530:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     534:	b087      	sub	sp, #28
     536:	f7ff ff6f 	bl	418 <ocrypto_sqr256_noframe>
     53a:	f8dd 801c 	ldr.w	r8, [sp, #28]
     53e:	f108 0820 	add.w	r8, r8, #32
     542:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     546:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
     548:	e887 087f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5, r6, fp}
     54c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000550 <ocrypto_constant_time_equal>:
     550:	b430      	push	{r4, r5}
     552:	f04f 0300 	mov.w	r3, #0

00000556 <constant_time_equal_loop>:
     556:	f810 4b01 	ldrb.w	r4, [r0], #1
     55a:	f811 5b01 	ldrb.w	r5, [r1], #1
     55e:	3a01      	subs	r2, #1
     560:	ea84 0405 	eor.w	r4, r4, r5
     564:	ea43 0304 	orr.w	r3, r3, r4
     568:	d1f5      	bne.n	556 <constant_time_equal_loop>
     56a:	f1a3 0301 	sub.w	r3, r3, #1
     56e:	ea4f 70d3 	mov.w	r0, r3, lsr #31
     572:	bc30      	pop	{r4, r5}
     574:	4770      	bx	lr
     576:	bf00      	nop

00000578 <ocrypto_constant_time_is_zero>:
     578:	f04f 0300 	mov.w	r3, #0

0000057c <constant_time_is_zero_loop>:
     57c:	f810 2b01 	ldrb.w	r2, [r0], #1
     580:	3901      	subs	r1, #1
     582:	ea43 0302 	orr.w	r3, r3, r2
     586:	d1f9      	bne.n	57c <constant_time_is_zero_loop>
     588:	f1a3 0301 	sub.w	r3, r3, #1
     58c:	ea4f 70d3 	mov.w	r0, r3, lsr #31
     590:	4770      	bx	lr
     592:	bf00      	nop

00000594 <ocrypto_constant_time_xor>:
     594:	b430      	push	{r4, r5}

00000596 <constant_time_xor_loop>:
     596:	f811 4b01 	ldrb.w	r4, [r1], #1
     59a:	f812 5b01 	ldrb.w	r5, [r2], #1
     59e:	406c      	eors	r4, r5
     5a0:	f800 4b01 	strb.w	r4, [r0], #1
     5a4:	3b01      	subs	r3, #1
     5a6:	d1f6      	bne.n	596 <constant_time_xor_loop>
     5a8:	bc30      	pop	{r4, r5}
     5aa:	4770      	bx	lr

000005ac <ocrypto_mod_p256_add>:
     5ac:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     5b0:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     5b4:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     5b8:	185b      	adds	r3, r3, r1
     5ba:	eb54 040c 	adcs.w	r4, r4, ip
     5be:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     5c2:	414d      	adcs	r5, r1
     5c4:	eb56 060c 	adcs.w	r6, r6, ip
     5c8:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     5cc:	414f      	adcs	r7, r1
     5ce:	eb58 080c 	adcs.w	r8, r8, ip
     5d2:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     5d6:	eb59 0901 	adcs.w	r9, r9, r1
     5da:	eb5a 0a0c 	adcs.w	sl, sl, ip
     5de:	4189      	sbcs	r1, r1
     5e0:	f1b3 33ff 	subs.w	r3, r3, #4294967295
     5e4:	f174 34ff 	sbcs.w	r4, r4, #4294967295
     5e8:	f175 35ff 	sbcs.w	r5, r5, #4294967295
     5ec:	f176 0600 	sbcs.w	r6, r6, #0
     5f0:	f177 0700 	sbcs.w	r7, r7, #0
     5f4:	f178 0800 	sbcs.w	r8, r8, #0
     5f8:	f179 0901 	sbcs.w	r9, r9, #1
     5fc:	f17a 3aff 	sbcs.w	sl, sl, #4294967295
     600:	f151 0100 	adcs.w	r1, r1, #0
     604:	185b      	adds	r3, r3, r1
     606:	414c      	adcs	r4, r1
     608:	414d      	adcs	r5, r1
     60a:	f156 0600 	adcs.w	r6, r6, #0
     60e:	f157 0700 	adcs.w	r7, r7, #0
     612:	f158 0800 	adcs.w	r8, r8, #0
     616:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
     61a:	eb5a 0a01 	adcs.w	sl, sl, r1
     61e:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     622:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     626:	4770      	bx	lr

00000628 <ocrypto_mod_p256_sub>:
     628:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     62c:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     630:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     634:	1a5b      	subs	r3, r3, r1
     636:	eb74 040c 	sbcs.w	r4, r4, ip
     63a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     63e:	418d      	sbcs	r5, r1
     640:	eb76 060c 	sbcs.w	r6, r6, ip
     644:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     648:	418f      	sbcs	r7, r1
     64a:	eb78 080c 	sbcs.w	r8, r8, ip
     64e:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     652:	eb79 0901 	sbcs.w	r9, r9, r1
     656:	eb7a 0a0c 	sbcs.w	sl, sl, ip
     65a:	4189      	sbcs	r1, r1
     65c:	185b      	adds	r3, r3, r1
     65e:	414c      	adcs	r4, r1
     660:	414d      	adcs	r5, r1
     662:	f156 0600 	adcs.w	r6, r6, #0
     666:	f157 0700 	adcs.w	r7, r7, #0
     66a:	f158 0800 	adcs.w	r8, r8, #0
     66e:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
     672:	eb5a 0a01 	adcs.w	sl, sl, r1
     676:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     67a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     67e:	4770      	bx	lr

00000680 <mul_reduce>:
     680:	eb18 0804 	adds.w	r8, r8, r4
     684:	eb59 0905 	adcs.w	r9, r9, r5
     688:	eb5a 0a06 	adcs.w	sl, sl, r6
     68c:	eb5b 0b07 	adcs.w	fp, fp, r7
     690:	f05f 0c00 	movs.w	ip, #0
     694:	f14c 0c00 	adc.w	ip, ip, #0
     698:	eb18 0805 	adds.w	r8, r8, r5
     69c:	eb59 0906 	adcs.w	r9, r9, r6
     6a0:	eb5a 0a07 	adcs.w	sl, sl, r7
     6a4:	eb5b 0b07 	adcs.w	fp, fp, r7
     6a8:	eb50 000c 	adcs.w	r0, r0, ip
     6ac:	f05f 0c00 	movs.w	ip, #0
     6b0:	eb51 010c 	adcs.w	r1, r1, ip
     6b4:	eb52 020c 	adcs.w	r2, r2, ip
     6b8:	4163      	adcs	r3, r4
     6ba:	f14c 0c00 	adc.w	ip, ip, #0
     6be:	ebb8 0807 	subs.w	r8, r8, r7
     6c2:	f179 0900 	sbcs.w	r9, r9, #0
     6c6:	f17a 0a00 	sbcs.w	sl, sl, #0
     6ca:	eb7b 0b04 	sbcs.w	fp, fp, r4
     6ce:	41a8      	sbcs	r0, r5
     6d0:	41b1      	sbcs	r1, r6
     6d2:	41a2      	sbcs	r2, r4
     6d4:	41b3      	sbcs	r3, r6
     6d6:	f16c 0c00 	sbc.w	ip, ip, #0
     6da:	ebbb 0b05 	subs.w	fp, fp, r5
     6de:	41b0      	sbcs	r0, r6
     6e0:	41b9      	sbcs	r1, r7
     6e2:	41aa      	sbcs	r2, r5
     6e4:	41bb      	sbcs	r3, r7
     6e6:	f16c 0c00 	sbc.w	ip, ip, #0
     6ea:	ea6f 74ec 	mvn.w	r4, ip, asr #31
     6ee:	ebb8 0804 	subs.w	r8, r8, r4
     6f2:	eb79 0904 	sbcs.w	r9, r9, r4
     6f6:	eb7a 0a04 	sbcs.w	sl, sl, r4
     6fa:	f17b 0b00 	sbcs.w	fp, fp, #0
     6fe:	f170 0000 	sbcs.w	r0, r0, #0
     702:	f171 0100 	sbcs.w	r1, r1, #0
     706:	eb72 72d4 	sbcs.w	r2, r2, r4, lsr #31
     70a:	41a3      	sbcs	r3, r4
     70c:	f16c 0c00 	sbc.w	ip, ip, #0
     710:	eb18 78ec 	adds.w	r8, r8, ip, asr #31
     714:	eb59 79ec 	adcs.w	r9, r9, ip, asr #31
     718:	eb5a 7aec 	adcs.w	sl, sl, ip, asr #31
     71c:	f15b 0b00 	adcs.w	fp, fp, #0
     720:	f150 0400 	adcs.w	r4, r0, #0
     724:	f151 0500 	adcs.w	r5, r1, #0
     728:	eb52 76dc 	adcs.w	r6, r2, ip, lsr #31
     72c:	eb53 77ec 	adcs.w	r7, r3, ip, asr #31
     730:	f14c 0c00 	adc.w	ip, ip, #0
     734:	eb18 70ec 	adds.w	r0, r8, ip, asr #31
     738:	eb59 71ec 	adcs.w	r1, r9, ip, asr #31
     73c:	eb5a 72ec 	adcs.w	r2, sl, ip, asr #31
     740:	f15b 0300 	adcs.w	r3, fp, #0
     744:	f154 0400 	adcs.w	r4, r4, #0
     748:	f155 0500 	adcs.w	r5, r5, #0
     74c:	eb56 76dc 	adcs.w	r6, r6, ip, lsr #31
     750:	eb57 77ec 	adcs.w	r7, r7, ip, asr #31
     754:	4770      	bx	lr
     756:	bf00      	nop

00000758 <ocrypto_mod_p256_mul>:
     758:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     75c:	b087      	sub	sp, #28
     75e:	f7ff fd9f 	bl	2a0 <ocrypto_mul256_noframe>
     762:	f8dd 8010 	ldr.w	r8, [sp, #16]
     766:	f8dd 9014 	ldr.w	r9, [sp, #20]
     76a:	f8dd a018 	ldr.w	sl, [sp, #24]
     76e:	f7ff ff87 	bl	680 <mul_reduce>
     772:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
     776:	f7ff ff83 	bl	680 <mul_reduce>
     77a:	b003      	add	sp, #12
     77c:	f85d 8b04 	ldr.w	r8, [sp], #4
     780:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000788 <ocrypto_mod_p256_sqr>:
     788:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     78c:	b087      	sub	sp, #28
     78e:	f7ff fe43 	bl	418 <ocrypto_sqr256_noframe>
     792:	f8dd 8010 	ldr.w	r8, [sp, #16]
     796:	f8dd 9014 	ldr.w	r9, [sp, #20]
     79a:	f8dd a018 	ldr.w	sl, [sp, #24]
     79e:	f7ff ff6f 	bl	680 <mul_reduce>
     7a2:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
     7a6:	f7ff ff6b 	bl	680 <mul_reduce>
     7aa:	b003      	add	sp, #12
     7ac:	f85d 8b04 	ldr.w	r8, [sp], #4
     7b0:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     7b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     7b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
     7ba:	4c14      	ldr	r4, [pc, #80]	; (80c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xc>)
     7bc:	7a20      	ldrb	r0, [r4, #8]
     7be:	f88d 0001 	strb.w	r0, [sp, #1]
     7c2:	79e0      	ldrb	r0, [r4, #7]
     7c4:	f88d 0000 	strb.w	r0, [sp]
     7c8:	79a0      	ldrb	r0, [r4, #6]
     7ca:	f8ad 0004 	strh.w	r0, [sp, #4]
     7ce:	7960      	ldrb	r0, [r4, #5]
     7d0:	f8ad 0002 	strh.w	r0, [sp, #2]
     7d4:	4668      	mov	r0, sp
     7d6:	f006 fcaf 	bl	7138 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
     7da:	b108      	cbz	r0, 7e0 <ocrypto_mod_p256_sqr+0x58>
     7dc:	21a7      	movs	r1, #167	; 0xa7
     7de:	e010      	b.n	802 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2>
     7e0:	68e0      	ldr	r0, [r4, #12]
     7e2:	9002      	str	r0, [sp, #8]
     7e4:	a802      	add	r0, sp, #8
     7e6:	f006 fcbd 	bl	7164 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
     7ea:	b108      	cbz	r0, 7f0 <ocrypto_mod_p256_sqr+0x68>
     7ec:	21ab      	movs	r1, #171	; 0xab
     7ee:	e008      	b.n	802 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2>
     7f0:	4807      	ldr	r0, [pc, #28]	; (810 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x10>)
     7f2:	6800      	ldr	r0, [r0, #0]
     7f4:	9003      	str	r0, [sp, #12]
     7f6:	a803      	add	r0, sp, #12
     7f8:	f00f f916 	bl	fa28 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
     7fc:	2800      	cmp	r0, #0
     7fe:	d003      	beq.n	808 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x8>
     800:	21af      	movs	r1, #175	; 0xaf
     802:	2003      	movs	r0, #3
     804:	f000 f92e 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     808:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
     80a:	0000      	.short	0x0000
     80c:	20000db0 	.word	0x20000db0
     810:	00000b50 	.word	0x00000b50
     814:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     818:	460d      	mov	r5, r1
     81a:	4681      	mov	r9, r0
     81c:	f04f 0100 	mov.w	r1, #0
     820:	f100 0003 	add.w	r0, r0, #3
     824:	9100      	str	r1, [sp, #0]
     826:	f020 0003 	bic.w	r0, r0, #3
     82a:	7829      	ldrb	r1, [r5, #0]
     82c:	0014      	movs	r4, r2
     82e:	4606      	mov	r6, r0
     830:	f88d 1001 	strb.w	r1, [sp, #1]
     834:	d000      	beq.n	838 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x38>
     836:	2000      	movs	r0, #0
     838:	4669      	mov	r1, sp
     83a:	f000 faf3 	bl	e24 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
     83e:	eb06 0a00 	add.w	sl, r6, r0
     842:	7828      	ldrb	r0, [r5, #0]
     844:	7869      	ldrb	r1, [r5, #1]
     846:	2700      	movs	r7, #0
     848:	4408      	add	r0, r1
     84a:	f000 08ff 	and.w	r8, r0, #255	; 0xff
     84e:	463e      	mov	r6, r7
     850:	e008      	b.n	864 <__z_interrupt_stack_SIZEOF+0x24>
     852:	7a2b      	ldrb	r3, [r5, #8]
     854:	79ea      	ldrb	r2, [r5, #7]
     856:	79a9      	ldrb	r1, [r5, #6]
     858:	7968      	ldrb	r0, [r5, #5]
     85a:	f00c ffa0 	bl	d79e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
     85e:	1c76      	adds	r6, r6, #1
     860:	4407      	add	r7, r0
     862:	b2f6      	uxtb	r6, r6
     864:	4546      	cmp	r6, r8
     866:	d3f4      	bcc.n	852 <__z_interrupt_stack_SIZEOF+0x12>
     868:	f10a 0003 	add.w	r0, sl, #3
     86c:	f020 0003 	bic.w	r0, r0, #3
     870:	4606      	mov	r6, r0
     872:	b104      	cbz	r4, 876 <__z_interrupt_stack_SIZEOF+0x36>
     874:	2000      	movs	r0, #0
     876:	463a      	mov	r2, r7
     878:	4641      	mov	r1, r8
     87a:	f000 fc79 	bl	1170 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
     87e:	490b      	ldr	r1, [pc, #44]	; (8ac <__z_interrupt_stack_SIZEOF+0x6c>)
     880:	4430      	add	r0, r6
     882:	78c9      	ldrb	r1, [r1, #3]
     884:	b159      	cbz	r1, 89e <__z_interrupt_stack_SIZEOF+0x5e>
     886:	7c29      	ldrb	r1, [r5, #16]
     888:	b149      	cbz	r1, 89e <__z_interrupt_stack_SIZEOF+0x5e>
     88a:	2225      	movs	r2, #37	; 0x25
     88c:	1cc0      	adds	r0, r0, #3
     88e:	f020 0003 	bic.w	r0, r0, #3
     892:	4605      	mov	r5, r0
     894:	b104      	cbz	r4, 898 <__z_interrupt_stack_SIZEOF+0x58>
     896:	2000      	movs	r0, #0
     898:	f000 fcea 	bl	1270 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>
     89c:	4428      	add	r0, r5
     89e:	1dc0      	adds	r0, r0, #7
     8a0:	f020 0007 	bic.w	r0, r0, #7
     8a4:	eba0 0009 	sub.w	r0, r0, r9
     8a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     8ac:	20000028 	.word	0x20000028

000008b0 <sdc_build_revision_get>:
     8b0:	b510      	push	{r4, lr}
     8b2:	b128      	cbz	r0, 8c0 <sdc_build_revision_get+0x10>
     8b4:	2214      	movs	r2, #20
     8b6:	4904      	ldr	r1, [pc, #16]	; (8c8 <sdc_build_revision_get+0x18>)
     8b8:	f00f fed9 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     8bc:	2000      	movs	r0, #0
     8be:	bd10      	pop	{r4, pc}
     8c0:	f06f 0015 	mvn.w	r0, #21
     8c4:	bd10      	pop	{r4, pc}
     8c6:	0000      	.short	0x0000
     8c8:	00000b74 	.word	0x00000b74

000008cc <sdc_cfg_set>:
     8cc:	b570      	push	{r4, r5, r6, lr}
     8ce:	f06f 032c 	mvn.w	r3, #44	; 0x2c
     8d2:	b988      	cbnz	r0, 8f8 <sdc_cfg_set+0x2c>
     8d4:	4c1f      	ldr	r4, [pc, #124]	; (954 <sdc_cfg_set+0x88>)
     8d6:	7860      	ldrb	r0, [r4, #1]
     8d8:	b108      	cbz	r0, 8de <sdc_cfg_set+0x12>
     8da:	1198      	asrs	r0, r3, #6
     8dc:	bd70      	pop	{r4, r5, r6, pc}
     8de:	b301      	cbz	r1, 922 <sdc_cfg_set+0x56>
     8e0:	f06f 0515 	mvn.w	r5, #21
     8e4:	b31a      	cbz	r2, 92e <sdc_cfg_set+0x62>
     8e6:	481c      	ldr	r0, [pc, #112]	; (958 <sdc_cfg_set+0x8c>)
     8e8:	2901      	cmp	r1, #1
     8ea:	d007      	beq.n	8fc <sdc_cfg_set+0x30>
     8ec:	2903      	cmp	r1, #3
     8ee:	d008      	beq.n	902 <sdc_cfg_set+0x36>
     8f0:	2904      	cmp	r1, #4
     8f2:	d014      	beq.n	91e <sdc_cfg_set+0x52>
     8f4:	2906      	cmp	r1, #6
     8f6:	d015      	beq.n	924 <sdc_cfg_set+0x58>
     8f8:	4618      	mov	r0, r3
     8fa:	bd70      	pop	{r4, r5, r6, pc}
     8fc:	7811      	ldrb	r1, [r2, #0]
     8fe:	7001      	strb	r1, [r0, #0]
     900:	e019      	b.n	936 <sdc_cfg_set+0x6a>
     902:	7891      	ldrb	r1, [r2, #2]
     904:	b199      	cbz	r1, 92e <sdc_cfg_set+0x62>
     906:	78d1      	ldrb	r1, [r2, #3]
     908:	b189      	cbz	r1, 92e <sdc_cfg_set+0x62>
     90a:	7811      	ldrb	r1, [r2, #0]
     90c:	291b      	cmp	r1, #27
     90e:	d30e      	bcc.n	92e <sdc_cfg_set+0x62>
     910:	7851      	ldrb	r1, [r2, #1]
     912:	291b      	cmp	r1, #27
     914:	d30b      	bcc.n	92e <sdc_cfg_set+0x62>
     916:	6811      	ldr	r1, [r2, #0]
     918:	f8c0 1005 	str.w	r1, [r0, #5]
     91c:	e00b      	b.n	936 <sdc_cfg_set+0x6a>
     91e:	6811      	ldr	r1, [r2, #0]
     920:	60c1      	str	r1, [r0, #12]
     922:	e008      	b.n	936 <sdc_cfg_set+0x6a>
     924:	78e1      	ldrb	r1, [r4, #3]
     926:	b121      	cbz	r1, 932 <sdc_cfg_set+0x66>
     928:	7811      	ldrb	r1, [r2, #0]
     92a:	2902      	cmp	r1, #2
     92c:	d201      	bcs.n	932 <sdc_cfg_set+0x66>
     92e:	4628      	mov	r0, r5
     930:	bd70      	pop	{r4, r5, r6, pc}
     932:	7811      	ldrb	r1, [r2, #0]
     934:	7401      	strb	r1, [r0, #16]
     936:	2201      	movs	r2, #1
     938:	4907      	ldr	r1, [pc, #28]	; (958 <sdc_cfg_set+0x8c>)
     93a:	2000      	movs	r0, #0
     93c:	f7ff ff6a 	bl	814 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x14>
     940:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
     944:	db02      	blt.n	94c <sdc_cfg_set+0x80>
     946:	f06f 000b 	mvn.w	r0, #11
     94a:	bd70      	pop	{r4, r5, r6, pc}
     94c:	2101      	movs	r1, #1
     94e:	70a1      	strb	r1, [r4, #2]
     950:	bd70      	pop	{r4, r5, r6, pc}
     952:	0000      	.short	0x0000
     954:	20000028 	.word	0x20000028
     958:	20000db0 	.word	0x20000db0

0000095c <sdc_disable>:
     95c:	b510      	push	{r4, lr}
     95e:	4c07      	ldr	r4, [pc, #28]	; (97c <sdc_disable+0x20>)
     960:	7860      	ldrb	r0, [r4, #1]
     962:	b120      	cbz	r0, 96e <sdc_disable+0x12>
     964:	f006 fef8 	bl	7758 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
     968:	7820      	ldrb	r0, [r4, #0]
     96a:	f00b fde5 	bl	c538 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
     96e:	f000 fccb 	bl	1308 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>
     972:	f000 fda3 	bl	14bc <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>
     976:	2000      	movs	r0, #0
     978:	7060      	strb	r0, [r4, #1]
     97a:	bd10      	pop	{r4, pc}
     97c:	20000028 	.word	0x20000028

00000980 <sdc_enable>:
     980:	b570      	push	{r4, r5, r6, lr}
     982:	460c      	mov	r4, r1
     984:	0005      	movs	r5, r0
     986:	d002      	beq.n	98e <sdc_enable+0xe>
     988:	b10c      	cbz	r4, 98e <sdc_enable+0xe>
     98a:	0760      	lsls	r0, r4, #29
     98c:	d002      	beq.n	994 <sdc_enable+0x14>
     98e:	f06f 0015 	mvn.w	r0, #21
     992:	bd70      	pop	{r4, r5, r6, pc}
     994:	f000 f914 	bl	bc0 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
     998:	b1a8      	cbz	r0, 9c6 <sdc_enable+0x46>
     99a:	4628      	mov	r0, r5
     99c:	f00b fd92 	bl	c4c4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
     9a0:	4d0a      	ldr	r5, [pc, #40]	; (9cc <sdc_enable+0x4c>)
     9a2:	2200      	movs	r2, #0
     9a4:	490a      	ldr	r1, [pc, #40]	; (9d0 <sdc_enable+0x50>)
     9a6:	7028      	strb	r0, [r5, #0]
     9a8:	4620      	mov	r0, r4
     9aa:	f7ff ff33 	bl	814 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x14>
     9ae:	f00f fc2e 	bl	1020e <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
     9b2:	2100      	movs	r1, #0
     9b4:	7828      	ldrb	r0, [r5, #0]
     9b6:	f006 feb7 	bl	7728 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
     9ba:	f7ff fefd 	bl	7b8 <ocrypto_mod_p256_sqr+0x30>
     9be:	2001      	movs	r0, #1
     9c0:	7068      	strb	r0, [r5, #1]
     9c2:	2000      	movs	r0, #0
     9c4:	bd70      	pop	{r4, r5, r6, pc}
     9c6:	f04f 30ff 	mov.w	r0, #4294967295
     9ca:	bd70      	pop	{r4, r5, r6, pc}
     9cc:	20000028 	.word	0x20000028
     9d0:	20000db0 	.word	0x20000db0

000009d4 <sdc_init>:
     9d4:	b530      	push	{r4, r5, lr}
     9d6:	b089      	sub	sp, #36	; 0x24
     9d8:	0005      	movs	r5, r0
     9da:	d00c      	beq.n	9f6 <__data_size+0x1a>
     9dc:	f00b fd18 	bl	c410 <mpsl_is_initialized>
     9e0:	f04f 34ff 	mov.w	r4, #4294967295
     9e4:	b120      	cbz	r0, 9f0 <__data_size+0x14>
     9e6:	f00b fbc9 	bl	c17c <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
     9ea:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
     9ee:	d905      	bls.n	9fc <__data_size+0x20>
     9f0:	4620      	mov	r0, r4
     9f2:	b009      	add	sp, #36	; 0x24
     9f4:	bd30      	pop	{r4, r5, pc}
     9f6:	f06f 0015 	mvn.w	r0, #21
     9fa:	e7fa      	b.n	9f2 <__data_size+0x16>
     9fc:	4c14      	ldr	r4, [pc, #80]	; (a50 <__data_size+0x74>)
     9fe:	4815      	ldr	r0, [pc, #84]	; (a54 <__data_size+0x78>)
     a00:	6065      	str	r5, [r4, #4]
     a02:	f000 f9f9 	bl	df8 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
     a06:	2000      	movs	r0, #0
     a08:	7060      	strb	r0, [r4, #1]
     a0a:	70a0      	strb	r0, [r4, #2]
     a0c:	70e0      	strb	r0, [r4, #3]
     a0e:	4601      	mov	r1, r0
     a10:	2220      	movs	r2, #32
     a12:	4668      	mov	r0, sp
     a14:	f00f fea5 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     a18:	2220      	movs	r2, #32
     a1a:	490f      	ldr	r1, [pc, #60]	; (a58 <__data_size+0x7c>)
     a1c:	4668      	mov	r0, sp
     a1e:	f00f fe26 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     a22:	2220      	movs	r2, #32
     a24:	4669      	mov	r1, sp
     a26:	480d      	ldr	r0, [pc, #52]	; (a5c <__data_size+0x80>)
     a28:	f00f fe21 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     a2c:	f3ef 8410 	mrs	r4, PRIMASK
     a30:	b672      	cpsid	i
     a32:	f000 fc77 	bl	1324 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
     a36:	480a      	ldr	r0, [pc, #40]	; (a60 <__data_size+0x84>)
     a38:	f000 fd4c 	bl	14d4 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
     a3c:	b118      	cbz	r0, a46 <__data_size+0x6a>
     a3e:	21c5      	movs	r1, #197	; 0xc5
     a40:	2003      	movs	r0, #3
     a42:	f000 f80f 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     a46:	b904      	cbnz	r4, a4a <__data_size+0x6e>
     a48:	b662      	cpsie	i
     a4a:	2000      	movs	r0, #0
     a4c:	e7d1      	b.n	9f2 <__data_size+0x16>
     a4e:	0000      	.short	0x0000
     a50:	20000028 	.word	0x20000028
     a54:	000007b9 	.word	0x000007b9
     a58:	00000b54 	.word	0x00000b54
     a5c:	20000db0 	.word	0x20000db0
     a60:	00000bed 	.word	0x00000bed

00000a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
     a64:	b50e      	push	{r1, r2, r3, lr}
     a66:	b672      	cpsid	i
     a68:	4a15      	ldr	r2, [pc, #84]	; (ac0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
     a6a:	6855      	ldr	r5, [r2, #4]
     a6c:	b1dd      	cbz	r5, aa6 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x42>
     a6e:	2200      	movs	r2, #0
     a70:	4603      	mov	r3, r0
     a72:	466e      	mov	r6, sp
     a74:	240a      	movs	r4, #10
     a76:	e003      	b.n	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
     a78:	fbb0 f0f4 	udiv	r0, r0, r4
     a7c:	1c52      	adds	r2, r2, #1
     a7e:	b2d2      	uxtb	r2, r2
     a80:	2800      	cmp	r0, #0
     a82:	d1f9      	bne.n	a78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
     a84:	54b0      	strb	r0, [r6, r2]
     a86:	e00a      	b.n	a9e <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x3a>
     a88:	b2d8      	uxtb	r0, r3
     a8a:	fbb0 f7f4 	udiv	r7, r0, r4
     a8e:	fbb3 f3f4 	udiv	r3, r3, r4
     a92:	fb04 0017 	mls	r0, r4, r7, r0
     a96:	1e52      	subs	r2, r2, #1
     a98:	b2d2      	uxtb	r2, r2
     a9a:	3030      	adds	r0, #48	; 0x30
     a9c:	54b0      	strb	r0, [r6, r2]
     a9e:	2a00      	cmp	r2, #0
     aa0:	d1f2      	bne.n	a88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
     aa2:	4630      	mov	r0, r6
     aa4:	47a8      	blx	r5
     aa6:	f3bf 8f4f 	dsb	sy
     aaa:	4806      	ldr	r0, [pc, #24]	; (ac4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
     aac:	6801      	ldr	r1, [r0, #0]
     aae:	4a06      	ldr	r2, [pc, #24]	; (ac8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
     ab0:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
     ab4:	4311      	orrs	r1, r2
     ab6:	6001      	str	r1, [r0, #0]
     ab8:	f3bf 8f4f 	dsb	sy
     abc:	bf00      	nop
     abe:	e7fd      	b.n	abc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x58>
     ac0:	20000028 	.word	0x20000028
     ac4:	e000ed0c 	.word	0xe000ed0c
     ac8:	05fa0004 	.word	0x05fa0004

00000acc <sdc_support_central>:
     acc:	b510      	push	{r4, lr}
     ace:	4c07      	ldr	r4, [pc, #28]	; (aec <sdc_support_central+0x20>)
     ad0:	78a0      	ldrb	r0, [r4, #2]
     ad2:	7861      	ldrb	r1, [r4, #1]
     ad4:	4308      	orrs	r0, r1
     ad6:	d002      	beq.n	ade <sdc_support_central+0x12>
     ad8:	f04f 30ff 	mov.w	r0, #4294967295
     adc:	bd10      	pop	{r4, pc}
     ade:	f006 fe4b 	bl	7778 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI>
     ae2:	2001      	movs	r0, #1
     ae4:	70e0      	strb	r0, [r4, #3]
     ae6:	2000      	movs	r0, #0
     ae8:	bd10      	pop	{r4, pc}
     aea:	0000      	.short	0x0000
     aec:	20000028 	.word	0x20000028

00000af0 <sdc_support_dle_central>:
     af0:	4806      	ldr	r0, [pc, #24]	; (b0c <sdc_support_dle_central+0x1c>)
     af2:	b510      	push	{r4, lr}
     af4:	7881      	ldrb	r1, [r0, #2]
     af6:	7840      	ldrb	r0, [r0, #1]
     af8:	4301      	orrs	r1, r0
     afa:	d002      	beq.n	b02 <sdc_support_dle_central+0x12>
     afc:	f04f 30ff 	mov.w	r0, #4294967295
     b00:	bd10      	pop	{r4, pc}
     b02:	f006 fbbb 	bl	727c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ>
     b06:	2000      	movs	r0, #0
     b08:	bd10      	pop	{r4, pc}
     b0a:	0000      	.short	0x0000
     b0c:	20000028 	.word	0x20000028

00000b10 <sdc_support_le_2m_phy>:
     b10:	4806      	ldr	r0, [pc, #24]	; (b2c <sdc_support_le_2m_phy+0x1c>)
     b12:	b510      	push	{r4, lr}
     b14:	7881      	ldrb	r1, [r0, #2]
     b16:	7840      	ldrb	r0, [r0, #1]
     b18:	4301      	orrs	r1, r0
     b1a:	d002      	beq.n	b22 <sdc_support_le_2m_phy+0x12>
     b1c:	f04f 30ff 	mov.w	r0, #4294967295
     b20:	bd10      	pop	{r4, pc}
     b22:	f00f f865 	bl	fbf0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
     b26:	2000      	movs	r0, #0
     b28:	bd10      	pop	{r4, pc}
     b2a:	0000      	.short	0x0000
     b2c:	20000028 	.word	0x20000028

00000b30 <sdc_support_phy_update_central>:
     b30:	4806      	ldr	r0, [pc, #24]	; (b4c <sdc_support_phy_update_central+0x1c>)
     b32:	b510      	push	{r4, lr}
     b34:	7881      	ldrb	r1, [r0, #2]
     b36:	7840      	ldrb	r0, [r0, #1]
     b38:	4301      	orrs	r1, r0
     b3a:	d002      	beq.n	b42 <sdc_support_phy_update_central+0x12>
     b3c:	f04f 30ff 	mov.w	r0, #4294967295
     b40:	bd10      	pop	{r4, pc}
     b42:	f00f f879 	bl	fc38 <sym_7ZWRNRN6OJ5G7BJWG232R5QOQBW4NK4HJWYOG5A>
     b46:	2000      	movs	r0, #0
     b48:	bd10      	pop	{r4, pc}
     b4a:	0000      	.short	0x0000
     b4c:	20000028 	.word	0x20000028
     b50:	00000001 	.word	0x00000001
     b54:	00000001 	.word	0x00000001
     b58:	031b1b00 	.word	0x031b1b00
     b5c:	00000002 	.word	0x00000002
     b60:	00001d4c 	.word	0x00001d4c
     b64:	00000003 	.word	0x00000003
	...
     b74:	2f2d0cd8 	.word	0x2f2d0cd8
     b78:	5ce2ae36 	.word	0x5ce2ae36
     b7c:	4c802680 	.word	0x4c802680
     b80:	53164d3f 	.word	0x53164d3f
     b84:	73c79650 	.word	0x73c79650

00000b88 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
     b88:	4a05      	ldr	r2, [pc, #20]	; (ba0 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
     b8a:	b510      	push	{r4, lr}
     b8c:	6852      	ldr	r2, [r2, #4]
     b8e:	b112      	cbz	r2, b96 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
     b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     b94:	4710      	bx	r2
     b96:	2192      	movs	r1, #146	; 0x92
     b98:	2004      	movs	r0, #4
     b9a:	f7ff ff63 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     b9e:	0000      	.short	0x0000
     ba0:	20000dd0 	.word	0x20000dd0

00000ba4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
     ba4:	4a05      	ldr	r2, [pc, #20]	; (bbc <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
     ba6:	b510      	push	{r4, lr}
     ba8:	6892      	ldr	r2, [r2, #8]
     baa:	b112      	cbz	r2, bb2 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
     bac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     bb0:	4710      	bx	r2
     bb2:	2198      	movs	r1, #152	; 0x98
     bb4:	2004      	movs	r0, #4
     bb6:	f7ff ff55 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     bba:	0000      	.short	0x0000
     bbc:	20000dd0 	.word	0x20000dd0

00000bc0 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
     bc0:	4805      	ldr	r0, [pc, #20]	; (bd8 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
     bc2:	6801      	ldr	r1, [r0, #0]
     bc4:	b129      	cbz	r1, bd2 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
     bc6:	6841      	ldr	r1, [r0, #4]
     bc8:	b119      	cbz	r1, bd2 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
     bca:	6880      	ldr	r0, [r0, #8]
     bcc:	b108      	cbz	r0, bd2 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
     bce:	2001      	movs	r0, #1
     bd0:	4770      	bx	lr
     bd2:	2000      	movs	r0, #0
     bd4:	4770      	bx	lr
     bd6:	0000      	.short	0x0000
     bd8:	20000dd0 	.word	0x20000dd0

00000bdc <sdc_rand_source_register>:
     bdc:	4902      	ldr	r1, [pc, #8]	; (be8 <sdc_rand_source_register+0xc>)
     bde:	c80d      	ldmia	r0, {r0, r2, r3}
     be0:	e881 000d 	stmia.w	r1, {r0, r2, r3}
     be4:	2000      	movs	r0, #0
     be6:	4770      	bx	lr
     be8:	20000dd0 	.word	0x20000dd0

00000bec <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
     bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     bee:	4c12      	ldr	r4, [pc, #72]	; (c38 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
     bf0:	2600      	movs	r6, #0
     bf2:	6825      	ldr	r5, [r4, #0]
     bf4:	e011      	b.n	c1a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
     bf6:	9800      	ldr	r0, [sp, #0]
     bf8:	2802      	cmp	r0, #2
     bfa:	d002      	beq.n	c02 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
     bfc:	2803      	cmp	r0, #3
     bfe:	d10c      	bne.n	c1a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
     c00:	e006      	b.n	c10 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
     c02:	6820      	ldr	r0, [r4, #0]
     c04:	b110      	cbz	r0, c0c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
     c06:	2000      	movs	r0, #0
     c08:	6026      	str	r6, [r4, #0]
     c0a:	e005      	b.n	c18 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
     c0c:	2128      	movs	r1, #40	; 0x28
     c0e:	e00c      	b.n	c2a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
     c10:	6820      	ldr	r0, [r4, #0]
     c12:	b168      	cbz	r0, c30 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
     c14:	2001      	movs	r0, #1
     c16:	6026      	str	r6, [r4, #0]
     c18:	47a8      	blx	r5
     c1a:	4668      	mov	r0, sp
     c1c:	f000 fc20 	bl	1460 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
     c20:	2800      	cmp	r0, #0
     c22:	d0e8      	beq.n	bf6 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
     c24:	2805      	cmp	r0, #5
     c26:	d005      	beq.n	c34 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
     c28:	2135      	movs	r1, #53	; 0x35
     c2a:	2004      	movs	r0, #4
     c2c:	f7ff ff1a 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     c30:	212d      	movs	r1, #45	; 0x2d
     c32:	e7fa      	b.n	c2a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
     c34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     c36:	0000      	.short	0x0000
     c38:	20000030 	.word	0x20000030

00000c3c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>:
     c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     c40:	4605      	mov	r5, r0
     c42:	4922      	ldr	r1, [pc, #136]	; (ccc <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x90>)
     c44:	1d00      	adds	r0, r0, #4
     c46:	f501 7784 	add.w	r7, r1, #264	; 0x108
     c4a:	2600      	movs	r6, #0
     c4c:	6008      	str	r0, [r1, #0]
     c4e:	7838      	ldrb	r0, [r7, #0]
     c50:	b150      	cbz	r0, c68 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x2c>
     c52:	78ba      	ldrb	r2, [r7, #2]
     c54:	463c      	mov	r4, r7
     c56:	1c79      	adds	r1, r7, #1
     c58:	4628      	mov	r0, r5
     c5a:	1c92      	adds	r2, r2, #2
     c5c:	f00f fd07 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     c60:	7026      	strb	r6, [r4, #0]
     c62:	2004      	movs	r0, #4
     c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     c68:	4818      	ldr	r0, [pc, #96]	; (ccc <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x90>)
     c6a:	f001 fe53 	bl	2914 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
     c6e:	4604      	mov	r4, r0
     c70:	2802      	cmp	r0, #2
     c72:	d004      	beq.n	c7e <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x42>
     c74:	2c04      	cmp	r4, #4
     c76:	d007      	beq.n	c88 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x4c>
     c78:	2c08      	cmp	r4, #8
     c7a:	d020      	beq.n	cbe <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x82>
     c7c:	e023      	b.n	cc6 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x8a>
     c7e:	4913      	ldr	r1, [pc, #76]	; (ccc <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x90>)
     c80:	4628      	mov	r0, r5
     c82:	f00b feac 	bl	c9de <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
     c86:	e01e      	b.n	cc6 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x8a>
     c88:	4910      	ldr	r1, [pc, #64]	; (ccc <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x90>)
     c8a:	4628      	mov	r0, r5
     c8c:	f00b ff0c 	bl	caa8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
     c90:	2800      	cmp	r0, #0
     c92:	d0dc      	beq.n	c4e <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x12>
     c94:	f895 8000 	ldrb.w	r8, [r5]
     c98:	f895 9002 	ldrb.w	r9, [r5, #2]
     c9c:	4640      	mov	r0, r8
     c9e:	f000 f845 	bl	d2c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
     ca2:	2800      	cmp	r0, #0
     ca4:	d0d3      	beq.n	c4e <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x12>
     ca6:	f1b8 0f3e 	cmp.w	r8, #62	; 0x3e
     caa:	d10c      	bne.n	cc6 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x8a>
     cac:	4648      	mov	r0, r9
     cae:	f1b9 0f12 	cmp.w	r9, #18
     cb2:	d0cc      	beq.n	c4e <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x12>
     cb4:	f000 f84c 	bl	d50 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
     cb8:	2800      	cmp	r0, #0
     cba:	d0c8      	beq.n	c4e <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x12>
     cbc:	e003      	b.n	cc6 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x8a>
     cbe:	4903      	ldr	r1, [pc, #12]	; (ccc <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x90>)
     cc0:	4628      	mov	r0, r5
     cc2:	f00b feba 	bl	ca3a <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY>
     cc6:	4620      	mov	r0, r4
     cc8:	e7cc      	b.n	c64 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x28>
     cca:	0000      	.short	0x0000
     ccc:	20000ddc 	.word	0x20000ddc
     cd0:	b570      	push	{r4, r5, r6, lr}
     cd2:	780a      	ldrb	r2, [r1, #0]
     cd4:	7082      	strb	r2, [r0, #2]
     cd6:	b33a      	cbz	r2, d28 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xec>
     cd8:	2a01      	cmp	r2, #1
     cda:	d825      	bhi.n	d28 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xec>
     cdc:	2313      	movs	r3, #19
     cde:	7003      	strb	r3, [r0, #0]
     ce0:	2300      	movs	r3, #0
     ce2:	e00a      	b.n	cfa <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xbe>
     ce4:	eb01 0443 	add.w	r4, r1, r3, lsl #1
     ce8:	eb00 0543 	add.w	r5, r0, r3, lsl #1
     cec:	78a6      	ldrb	r6, [r4, #2]
     cee:	70ee      	strb	r6, [r5, #3]
     cf0:	8864      	ldrh	r4, [r4, #2]
     cf2:	0a24      	lsrs	r4, r4, #8
     cf4:	1c5b      	adds	r3, r3, #1
     cf6:	712c      	strb	r4, [r5, #4]
     cf8:	b2db      	uxtb	r3, r3
     cfa:	4293      	cmp	r3, r2
     cfc:	d3f2      	bcc.n	ce4 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa8>
     cfe:	2300      	movs	r3, #0
     d00:	e00b      	b.n	d1a <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xde>
     d02:	bf00      	nop
     d04:	eb01 0543 	add.w	r5, r1, r3, lsl #1
     d08:	eb00 0443 	add.w	r4, r0, r3, lsl #1
     d0c:	792e      	ldrb	r6, [r5, #4]
     d0e:	7166      	strb	r6, [r4, #5]
     d10:	88ad      	ldrh	r5, [r5, #4]
     d12:	0a2d      	lsrs	r5, r5, #8
     d14:	1c5b      	adds	r3, r3, #1
     d16:	71a5      	strb	r5, [r4, #6]
     d18:	b2db      	uxtb	r3, r3
     d1a:	4293      	cmp	r3, r2
     d1c:	d3f2      	bcc.n	d04 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xc8>
     d1e:	2101      	movs	r1, #1
     d20:	eb01 0082 	add.w	r0, r1, r2, lsl #2
     d24:	b2c0      	uxtb	r0, r0
     d26:	bd70      	pop	{r4, r5, r6, pc}
     d28:	2000      	movs	r0, #0
     d2a:	bd70      	pop	{r4, r5, r6, pc}

00000d2c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
     d2c:	2840      	cmp	r0, #64	; 0x40
     d2e:	d203      	bcs.n	d38 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0xc>
     d30:	1e40      	subs	r0, r0, #1
     d32:	b2c1      	uxtb	r1, r0
     d34:	4805      	ldr	r0, [pc, #20]	; (d4c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
     d36:	e005      	b.n	d44 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x18>
     d38:	28ff      	cmp	r0, #255	; 0xff
     d3a:	d005      	beq.n	d48 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1c>
     d3c:	3840      	subs	r0, #64	; 0x40
     d3e:	b2c1      	uxtb	r1, r0
     d40:	4802      	ldr	r0, [pc, #8]	; (d4c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
     d42:	3008      	adds	r0, #8
     d44:	f00c b926 	b.w	cf94 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0xba>
     d48:	2001      	movs	r0, #1
     d4a:	4770      	bx	lr
     d4c:	2000003c 	.word	0x2000003c

00000d50 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
     d50:	1e40      	subs	r0, r0, #1
     d52:	b2c1      	uxtb	r1, r0
     d54:	4801      	ldr	r0, [pc, #4]	; (d5c <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0xc>)
     d56:	f00c b91d 	b.w	cf94 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0xba>
     d5a:	0000      	.short	0x0000
     d5c:	2000004c 	.word	0x2000004c

00000d60 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
     d60:	b510      	push	{r4, lr}
     d62:	4a07      	ldr	r2, [pc, #28]	; (d80 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0x20>)
     d64:	6801      	ldr	r1, [r0, #0]
     d66:	4b06      	ldr	r3, [pc, #24]	; (d80 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0x20>)
     d68:	6191      	str	r1, [r2, #24]
     d6a:	6840      	ldr	r0, [r0, #4]
     d6c:	61d0      	str	r0, [r2, #28]
     d6e:	681c      	ldr	r4, [r3, #0]
     d70:	3218      	adds	r2, #24
     d72:	43a1      	bics	r1, r4
     d74:	6011      	str	r1, [r2, #0]
     d76:	6859      	ldr	r1, [r3, #4]
     d78:	4388      	bics	r0, r1
     d7a:	6050      	str	r0, [r2, #4]
     d7c:	bd10      	pop	{r4, pc}
     d7e:	0000      	.short	0x0000
     d80:	20000034 	.word	0x20000034

00000d84 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
     d84:	4a06      	ldr	r2, [pc, #24]	; (da0 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x1c>)
     d86:	6801      	ldr	r1, [r0, #0]
     d88:	6091      	str	r1, [r2, #8]
     d8a:	6840      	ldr	r0, [r0, #4]
     d8c:	60d0      	str	r0, [r2, #12]
     d8e:	3208      	adds	r2, #8
     d90:	f441 218c 	orr.w	r1, r1, #286720	; 0x46000
     d94:	6011      	str	r1, [r2, #0]
     d96:	4903      	ldr	r1, [pc, #12]	; (da4 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x20>)
     d98:	4308      	orrs	r0, r1
     d9a:	6050      	str	r0, [r2, #4]
     d9c:	4770      	bx	lr
     d9e:	0000      	.short	0x0000
     da0:	20000034 	.word	0x20000034
     da4:	024007f8 	.word	0x024007f8

00000da8 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
     da8:	4902      	ldr	r1, [pc, #8]	; (db4 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0xc>)
     daa:	6802      	ldr	r2, [r0, #0]
     dac:	610a      	str	r2, [r1, #16]
     dae:	6840      	ldr	r0, [r0, #4]
     db0:	6148      	str	r0, [r1, #20]
     db2:	4770      	bx	lr
     db4:	20000034 	.word	0x20000034

00000db8 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
     db8:	4807      	ldr	r0, [pc, #28]	; (dd8 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x20>)
     dba:	f04f 31ff 	mov.w	r1, #4294967295
     dbe:	2200      	movs	r2, #0
     dc0:	6001      	str	r1, [r0, #0]
     dc2:	0cc9      	lsrs	r1, r1, #19
     dc4:	6041      	str	r1, [r0, #4]
     dc6:	f100 0108 	add.w	r1, r0, #8
     dca:	201f      	movs	r0, #31
     dcc:	600a      	str	r2, [r1, #0]
     dce:	604a      	str	r2, [r1, #4]
     dd0:	3108      	adds	r1, #8
     dd2:	e9c1 0200 	strd	r0, r2, [r1]
     dd6:	4770      	bx	lr
     dd8:	2000003c 	.word	0x2000003c

00000ddc <sdc_hci_cmd_cb_reset>:
     ddc:	b510      	push	{r4, lr}
     dde:	f7ff ffeb 	bl	db8 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
     de2:	f00e fe7e 	bl	fae2 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
     de6:	4604      	mov	r4, r0
     de8:	4802      	ldr	r0, [pc, #8]	; (df4 <sdc_hci_cmd_cb_reset+0x18>)
     dea:	6800      	ldr	r0, [r0, #0]
     dec:	b100      	cbz	r0, df0 <sdc_hci_cmd_cb_reset+0x14>
     dee:	4780      	blx	r0
     df0:	4620      	mov	r0, r4
     df2:	bd10      	pop	{r4, pc}
     df4:	20000054 	.word	0x20000054

00000df8 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
     df8:	4901      	ldr	r1, [pc, #4]	; (e00 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
     dfa:	6008      	str	r0, [r1, #0]
     dfc:	4770      	bx	lr
     dfe:	0000      	.short	0x0000
     e00:	20000054 	.word	0x20000054

00000e04 <sdc_hci_cmd_vs_zephyr_read_version_info>:
     e04:	2102      	movs	r1, #2
     e06:	8001      	strh	r1, [r0, #0]
     e08:	8041      	strh	r1, [r0, #2]
     e0a:	2100      	movs	r1, #0
     e0c:	7101      	strb	r1, [r0, #4]
     e0e:	21d8      	movs	r1, #216	; 0xd8
     e10:	7141      	strb	r1, [r0, #5]
     e12:	f642 510c 	movw	r1, #11532	; 0x2d0c
     e16:	80c1      	strh	r1, [r0, #6]
     e18:	4901      	ldr	r1, [pc, #4]	; (e20 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
     e1a:	6081      	str	r1, [r0, #8]
     e1c:	2000      	movs	r0, #0
     e1e:	4770      	bx	lr
     e20:	e2ae362f 	.word	0xe2ae362f

00000e24 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
     e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     e26:	4605      	mov	r5, r0
     e28:	7808      	ldrb	r0, [r1, #0]
     e2a:	784a      	ldrb	r2, [r1, #1]
     e2c:	4290      	cmp	r0, r2
     e2e:	d902      	bls.n	e36 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x12>
     e30:	f240 11b1 	movw	r1, #433	; 0x1b1
     e34:	e007      	b.n	e46 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x22>
     e36:	9500      	str	r5, [sp, #0]
     e38:	b145      	cbz	r5, e4c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x28>
     e3a:	2600      	movs	r6, #0
     e3c:	784c      	ldrb	r4, [r1, #1]
     e3e:	07a8      	lsls	r0, r5, #30
     e40:	d006      	beq.n	e50 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2c>
     e42:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
     e46:	2017      	movs	r0, #23
     e48:	f7ff fe0c 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     e4c:	2601      	movs	r6, #1
     e4e:	e7f5      	b.n	e3c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x18>
     e50:	4f12      	ldr	r7, [pc, #72]	; (e9c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x78>)
     e52:	4631      	mov	r1, r6
     e54:	4668      	mov	r0, sp
     e56:	703c      	strb	r4, [r7, #0]
     e58:	f000 f8ca 	bl	ff0 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x50>
     e5c:	2000      	movs	r0, #0
     e5e:	4603      	mov	r3, r0
     e60:	9900      	ldr	r1, [sp, #0]
     e62:	1cc9      	adds	r1, r1, #3
     e64:	f021 0103 	bic.w	r1, r1, #3
     e68:	9100      	str	r1, [sp, #0]
     e6a:	b96e      	cbnz	r6, e88 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x64>
     e6c:	eb07 0280 	add.w	r2, r7, r0, lsl #2
     e70:	6091      	str	r1, [r2, #8]
     e72:	2100      	movs	r1, #0
     e74:	e006      	b.n	e84 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x60>
     e76:	bf00      	nop
     e78:	f8d2 c008 	ldr.w	ip, [r2, #8]
     e7c:	f84c 3021 	str.w	r3, [ip, r1, lsl #2]
     e80:	1c49      	adds	r1, r1, #1
     e82:	b2c9      	uxtb	r1, r1
     e84:	42a1      	cmp	r1, r4
     e86:	d3f7      	bcc.n	e78 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x54>
     e88:	9900      	ldr	r1, [sp, #0]
     e8a:	1c40      	adds	r0, r0, #1
     e8c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
     e90:	9100      	str	r1, [sp, #0]
     e92:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
     e96:	d0e3      	beq.n	e60 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x3c>
     e98:	1b48      	subs	r0, r1, r5
     e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     e9c:	20000fe8 	.word	0x20000fe8

00000ea0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
     ea0:	b570      	push	{r4, r5, r6, lr}
     ea2:	4604      	mov	r4, r0
     ea4:	7985      	ldrb	r5, [r0, #6]
     ea6:	f000 f8df 	bl	1068 <CONFIG_FPROTECT_BLOCK_SIZE+0x68>
     eaa:	4a0c      	ldr	r2, [pc, #48]	; (edc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3c>)
     eac:	79e1      	ldrb	r1, [r4, #7]
     eae:	eb02 0285 	add.w	r2, r2, r5, lsl #2
     eb2:	e00e      	b.n	ed2 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x32>
     eb4:	6893      	ldr	r3, [r2, #8]
     eb6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
     eba:	b143      	cbz	r3, ece <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x2e>
     ebc:	1c48      	adds	r0, r1, #1
     ebe:	71e0      	strb	r0, [r4, #7]
     ec0:	80a1      	strh	r1, [r4, #4]
     ec2:	6890      	ldr	r0, [r2, #8]
     ec4:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
     ec8:	6020      	str	r0, [r4, #0]
     eca:	2000      	movs	r0, #0
     ecc:	bd70      	pop	{r4, r5, r6, pc}
     ece:	1c49      	adds	r1, r1, #1
     ed0:	b2c9      	uxtb	r1, r1
     ed2:	4281      	cmp	r1, r0
     ed4:	d3ee      	bcc.n	eb4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x14>
     ed6:	71e1      	strb	r1, [r4, #7]
     ed8:	2005      	movs	r0, #5
     eda:	bd70      	pop	{r4, r5, r6, pc}
     edc:	20000fe8 	.word	0x20000fe8

00000ee0 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
     ee0:	b4f0      	push	{r4, r5, r6, r7}
     ee2:	b941      	cbnz	r1, ef6 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x16>
     ee4:	4a10      	ldr	r2, [pc, #64]	; (f28 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x48>)
     ee6:	2500      	movs	r5, #0
     ee8:	462b      	mov	r3, r5
     eea:	f64f 74ff 	movw	r4, #65535	; 0xffff
     eee:	eb02 0681 	add.w	r6, r2, r1, lsl #2
     ef2:	5c57      	ldrb	r7, [r2, r1]
     ef4:	e00d      	b.n	f12 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x32>
     ef6:	bcf0      	pop	{r4, r5, r6, r7}
     ef8:	2000      	movs	r0, #0
     efa:	4770      	bx	lr
     efc:	195a      	adds	r2, r3, r5
     efe:	f8d6 c008 	ldr.w	ip, [r6, #8]
     f02:	b292      	uxth	r2, r2
     f04:	f85c c022 	ldr.w	ip, [ip, r2, lsl #2]
     f08:	f1bc 0f00 	cmp.w	ip, #0
     f0c:	d004      	beq.n	f18 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x38>
     f0e:	1c5b      	adds	r3, r3, #1
     f10:	b29b      	uxth	r3, r3
     f12:	429f      	cmp	r7, r3
     f14:	d8f2      	bhi.n	efc <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x1c>
     f16:	4622      	mov	r2, r4
     f18:	8002      	strh	r2, [r0, #0]
     f1a:	4610      	mov	r0, r2
     f1c:	42a2      	cmp	r2, r4
     f1e:	d0ea      	beq.n	ef6 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x16>
     f20:	bcf0      	pop	{r4, r5, r6, r7}
     f22:	f000 b82d 	b.w	f80 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x54>
     f26:	0000      	.short	0x0000
     f28:	20000fe8 	.word	0x20000fe8

00000f2c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
     f2c:	b570      	push	{r4, r5, r6, lr}
     f2e:	4606      	mov	r6, r0
     f30:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
     f34:	f243 0502 	movw	r5, #12290	; 0x3002
     f38:	38ff      	subs	r0, #255	; 0xff
     f3a:	d01a      	beq.n	f72 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x46>
     f3c:	b109      	cbz	r1, f42 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x16>
     f3e:	2007      	movs	r0, #7
     f40:	bd70      	pop	{r4, r5, r6, pc}
     f42:	4630      	mov	r0, r6
     f44:	f000 f844 	bl	fd0 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x30>
     f48:	0004      	movs	r4, r0
     f4a:	d012      	beq.n	f72 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x46>
     f4c:	480a      	ldr	r0, [pc, #40]	; (f78 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x4c>)
     f4e:	4621      	mov	r1, r4
     f50:	6802      	ldr	r2, [r0, #0]
     f52:	4630      	mov	r0, r6
     f54:	4790      	blx	r2
     f56:	4d09      	ldr	r5, [pc, #36]	; (f7c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x50>)
     f58:	2000      	movs	r0, #0
     f5a:	68a9      	ldr	r1, [r5, #8]
     f5c:	f841 0026 	str.w	r0, [r1, r6, lsl #2]
     f60:	f000 f878 	bl	1054 <CONFIG_FPROTECT_BLOCK_SIZE+0x54>
     f64:	4602      	mov	r2, r0
     f66:	4621      	mov	r1, r4
     f68:	6868      	ldr	r0, [r5, #4]
     f6a:	f00c fbdf 	bl	d72c <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
     f6e:	2000      	movs	r0, #0
     f70:	bd70      	pop	{r4, r5, r6, pc}
     f72:	4628      	mov	r0, r5
     f74:	bd70      	pop	{r4, r5, r6, pc}
     f76:	0000      	.short	0x0000
     f78:	00001078 	.word	0x00001078
     f7c:	20000fe8 	.word	0x20000fe8
     f80:	b570      	push	{r4, r5, r6, lr}
     f82:	460e      	mov	r6, r1
     f84:	4605      	mov	r5, r0
     f86:	f00c fc00 	bl	d78a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x12>
     f8a:	b158      	cbz	r0, fa4 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x4>
     f8c:	480f      	ldr	r0, [pc, #60]	; (fcc <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x2c>)
     f8e:	eb00 0486 	add.w	r4, r0, r6, lsl #2
     f92:	68a0      	ldr	r0, [r4, #8]
     f94:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
     f98:	b138      	cbz	r0, faa <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0xa>
     f9a:	f44f 71c5 	mov.w	r1, #394	; 0x18a
     f9e:	2017      	movs	r0, #23
     fa0:	f7ff fd60 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     fa4:	f240 1189 	movw	r1, #393	; 0x189
     fa8:	e7f9      	b.n	f9e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x72>
     faa:	6860      	ldr	r0, [r4, #4]
     fac:	2800      	cmp	r0, #0
     fae:	d00b      	beq.n	fc8 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x28>
     fb0:	4630      	mov	r0, r6
     fb2:	f000 f84f 	bl	1054 <CONFIG_FPROTECT_BLOCK_SIZE+0x54>
     fb6:	4601      	mov	r1, r0
     fb8:	6860      	ldr	r0, [r4, #4]
     fba:	f00c fb5f 	bl	d67c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
     fbe:	2800      	cmp	r0, #0
     fc0:	d002      	beq.n	fc8 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x28>
     fc2:	68a1      	ldr	r1, [r4, #8]
     fc4:	f841 0025 	str.w	r0, [r1, r5, lsl #2]
     fc8:	bd70      	pop	{r4, r5, r6, pc}
     fca:	0000      	.short	0x0000
     fcc:	20000fe8 	.word	0x20000fe8
     fd0:	b570      	push	{r4, r5, r6, lr}
     fd2:	460c      	mov	r4, r1
     fd4:	4605      	mov	r5, r0
     fd6:	f00c fbd8 	bl	d78a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x12>
     fda:	2800      	cmp	r0, #0
     fdc:	d005      	beq.n	fea <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x4a>
     fde:	4803      	ldr	r0, [pc, #12]	; (fec <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x4c>)
     fe0:	eb00 0084 	add.w	r0, r0, r4, lsl #2
     fe4:	6880      	ldr	r0, [r0, #8]
     fe6:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
     fea:	bd70      	pop	{r4, r5, r6, pc}
     fec:	20000fe8 	.word	0x20000fe8
     ff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     ff4:	4e16      	ldr	r6, [pc, #88]	; (1050 <CONFIG_FPROTECT_BLOCK_SIZE+0x50>)
     ff6:	4688      	mov	r8, r1
     ff8:	4605      	mov	r5, r0
     ffa:	2400      	movs	r4, #0
     ffc:	6828      	ldr	r0, [r5, #0]
     ffe:	1cc0      	adds	r0, r0, #3
    1000:	f020 0003 	bic.w	r0, r0, #3
    1004:	6028      	str	r0, [r5, #0]
    1006:	4620      	mov	r0, r4
    1008:	f000 f824 	bl	1054 <CONFIG_FPROTECT_BLOCK_SIZE+0x54>
    100c:	5d31      	ldrb	r1, [r6, r4]
    100e:	4348      	muls	r0, r1
    1010:	f1b8 0f00 	cmp.w	r8, #0
    1014:	d001      	beq.n	101a <CONFIG_FPROTECT_BLOCK_SIZE+0x1a>
    1016:	2200      	movs	r2, #0
    1018:	e000      	b.n	101c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>
    101a:	682a      	ldr	r2, [r5, #0]
    101c:	4601      	mov	r1, r0
    101e:	9200      	str	r2, [sp, #0]
    1020:	b132      	cbz	r2, 1030 <CONFIG_FPROTECT_BLOCK_SIZE+0x30>
    1022:	2700      	movs	r7, #0
    1024:	ea4f 000d 	mov.w	r0, sp
    1028:	f00c fb59 	bl	d6de <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    102c:	b11f      	cbz	r7, 1036 <CONFIG_FPROTECT_BLOCK_SIZE+0x36>
    102e:	e006      	b.n	103e <CONFIG_FPROTECT_BLOCK_SIZE+0x3e>
    1030:	2701      	movs	r7, #1
    1032:	2000      	movs	r0, #0
    1034:	e7f8      	b.n	1028 <CONFIG_FPROTECT_BLOCK_SIZE+0x28>
    1036:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    103a:	9a00      	ldr	r2, [sp, #0]
    103c:	604a      	str	r2, [r1, #4]
    103e:	6829      	ldr	r1, [r5, #0]
    1040:	1c64      	adds	r4, r4, #1
    1042:	4408      	add	r0, r1
    1044:	6028      	str	r0, [r5, #0]
    1046:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    104a:	d0d7      	beq.n	ffc <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x5c>
    104c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1050:	20000fe8 	.word	0x20000fe8
    1054:	4903      	ldr	r1, [pc, #12]	; (1064 <CONFIG_FPROTECT_BLOCK_SIZE+0x64>)
    1056:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    105a:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    105e:	1cc0      	adds	r0, r0, #3
    1060:	4008      	ands	r0, r1
    1062:	4770      	bx	lr
    1064:	00001074 	.word	0x00001074
    1068:	4801      	ldr	r0, [pc, #4]	; (1070 <CONFIG_FPROTECT_BLOCK_SIZE+0x70>)
    106a:	7800      	ldrb	r0, [r0, #0]
    106c:	4770      	bx	lr
    106e:	0000      	.short	0x0000
    1070:	20000fe8 	.word	0x20000fe8
    1074:	000002a8 	.word	0x000002a8
    1078:	0000edf5 	.word	0x0000edf5

0000107c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    107c:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1080:	4c24      	ldr	r4, [pc, #144]	; (1114 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x98>)
    1082:	4606      	mov	r6, r0
    1084:	b081      	sub	sp, #4
    1086:	6820      	ldr	r0, [r4, #0]
    1088:	469a      	mov	sl, r3
    108a:	4693      	mov	fp, r2
    108c:	b158      	cbz	r0, 10a6 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    108e:	7a01      	ldrb	r1, [r0, #8]
    1090:	42b1      	cmp	r1, r6
    1092:	d903      	bls.n	109c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    1094:	6840      	ldr	r0, [r0, #4]
    1096:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    109a:	b140      	cbz	r0, 10ae <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    109c:	f243 0002 	movw	r0, #12290	; 0x3002
    10a0:	b005      	add	sp, #20
    10a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    10a6:	21a5      	movs	r1, #165	; 0xa5
    10a8:	2018      	movs	r0, #24
    10aa:	f7ff fcdb 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    10ae:	4619      	mov	r1, r3
    10b0:	9802      	ldr	r0, [sp, #8]
    10b2:	f00c fb8d 	bl	d7d0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    10b6:	4680      	mov	r8, r0
    10b8:	4658      	mov	r0, fp
    10ba:	990e      	ldr	r1, [sp, #56]	; 0x38
    10bc:	f00c fb7e 	bl	d7bc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    10c0:	4605      	mov	r5, r0
    10c2:	eb08 0005 	add.w	r0, r8, r5
    10c6:	1d00      	adds	r0, r0, #4
    10c8:	b287      	uxth	r7, r0
    10ca:	6820      	ldr	r0, [r4, #0]
    10cc:	46a1      	mov	r9, r4
    10ce:	4639      	mov	r1, r7
    10d0:	6800      	ldr	r0, [r0, #0]
    10d2:	f00c fad3 	bl	d67c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    10d6:	0004      	movs	r4, r0
    10d8:	d01a      	beq.n	1110 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x94>
    10da:	8067      	strh	r7, [r4, #2]
    10dc:	8025      	strh	r5, [r4, #0]
    10de:	4629      	mov	r1, r5
    10e0:	1d20      	adds	r0, r4, #4
    10e2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    10e4:	4607      	mov	r7, r0
    10e6:	465a      	mov	r2, fp
    10e8:	2309      	movs	r3, #9
    10ea:	9500      	str	r5, [sp, #0]
    10ec:	f00c fa40 	bl	d570 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    10f0:	8820      	ldrh	r0, [r4, #0]
    10f2:	4641      	mov	r1, r8
    10f4:	4438      	add	r0, r7
    10f6:	230a      	movs	r3, #10
    10f8:	9a02      	ldr	r2, [sp, #8]
    10fa:	f8cd a000 	str.w	sl, [sp]
    10fe:	f00c fa37 	bl	d570 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    1102:	f8d9 0000 	ldr.w	r0, [r9]
    1106:	6840      	ldr	r0, [r0, #4]
    1108:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
    110c:	2000      	movs	r0, #0
    110e:	e7c7      	b.n	10a0 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    1110:	2004      	movs	r0, #4
    1112:	e7c5      	b.n	10a0 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    1114:	20000058 	.word	0x20000058

00001118 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    1118:	b570      	push	{r4, r5, r6, lr}
    111a:	4c14      	ldr	r4, [pc, #80]	; (116c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    111c:	6823      	ldr	r3, [r4, #0]
    111e:	b18b      	cbz	r3, 1144 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    1120:	7a19      	ldrb	r1, [r3, #8]
    1122:	4281      	cmp	r1, r0
    1124:	d912      	bls.n	114c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    1126:	685a      	ldr	r2, [r3, #4]
    1128:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    112c:	b171      	cbz	r1, 114c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    112e:	2500      	movs	r5, #0
    1130:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    1134:	884a      	ldrh	r2, [r1, #2]
    1136:	6818      	ldr	r0, [r3, #0]
    1138:	f00c faf8 	bl	d72c <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    113c:	6821      	ldr	r1, [r4, #0]
    113e:	2000      	movs	r0, #0
    1140:	7a0a      	ldrb	r2, [r1, #8]
    1142:	e00c      	b.n	115e <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    1144:	21c6      	movs	r1, #198	; 0xc6
    1146:	2018      	movs	r0, #24
    1148:	f7ff fc8c 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    114c:	f243 0002 	movw	r0, #12290	; 0x3002
    1150:	bd70      	pop	{r4, r5, r6, pc}
    1152:	684b      	ldr	r3, [r1, #4]
    1154:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    1158:	b933      	cbnz	r3, 1168 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    115a:	1c40      	adds	r0, r0, #1
    115c:	b2c0      	uxtb	r0, r0
    115e:	4282      	cmp	r2, r0
    1160:	d8f7      	bhi.n	1152 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    1162:	6808      	ldr	r0, [r1, #0]
    1164:	f00c fad7 	bl	d716 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    1168:	2000      	movs	r0, #0
    116a:	bd70      	pop	{r4, r5, r6, pc}
    116c:	20000058 	.word	0x20000058

00001170 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    1170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1174:	460d      	mov	r5, r1
    1176:	0004      	movs	r4, r0
    1178:	4690      	mov	r8, r2
    117a:	f04f 0600 	mov.w	r6, #0
    117e:	d006      	beq.n	118e <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x1e>
    1180:	2700      	movs	r7, #0
    1182:	07a0      	lsls	r0, r4, #30
    1184:	d005      	beq.n	1192 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x22>
    1186:	2186      	movs	r1, #134	; 0x86
    1188:	2018      	movs	r0, #24
    118a:	f7ff fc6b 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    118e:	2701      	movs	r7, #1
    1190:	e7f7      	b.n	1182 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    1192:	b1cd      	cbz	r5, 11c8 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
    1194:	4611      	mov	r1, r2
    1196:	2000      	movs	r0, #0
    1198:	f00c faa1 	bl	d6de <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    119c:	300c      	adds	r0, #12
    119e:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    11a2:	b98f      	cbnz	r7, 11c8 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
    11a4:	4f0a      	ldr	r7, [pc, #40]	; (11d0 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x60>)
    11a6:	f104 000c 	add.w	r0, r4, #12
    11aa:	00aa      	lsls	r2, r5, #2
    11ac:	603c      	str	r4, [r7, #0]
    11ae:	7225      	strb	r5, [r4, #8]
    11b0:	6060      	str	r0, [r4, #4]
    11b2:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    11b6:	6020      	str	r0, [r4, #0]
    11b8:	2100      	movs	r1, #0
    11ba:	6860      	ldr	r0, [r4, #4]
    11bc:	f00f fad1 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    11c0:	4641      	mov	r1, r8
    11c2:	6838      	ldr	r0, [r7, #0]
    11c4:	f00c fa8b 	bl	d6de <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    11c8:	4630      	mov	r0, r6
    11ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    11ce:	0000      	.short	0x0000
    11d0:	20000058 	.word	0x20000058

000011d4 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    11d4:	b570      	push	{r4, r5, r6, lr}
    11d6:	4d08      	ldr	r5, [pc, #32]	; (11f8 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    11d8:	6828      	ldr	r0, [r5, #0]
    11da:	2800      	cmp	r0, #0
    11dc:	d00a      	beq.n	11f4 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    11de:	2400      	movs	r4, #0
    11e0:	e004      	b.n	11ec <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    11e2:	4620      	mov	r0, r4
    11e4:	f7ff ff98 	bl	1118 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    11e8:	1c64      	adds	r4, r4, #1
    11ea:	b2e4      	uxtb	r4, r4
    11ec:	6828      	ldr	r0, [r5, #0]
    11ee:	7a00      	ldrb	r0, [r0, #8]
    11f0:	42a0      	cmp	r0, r4
    11f2:	d8f6      	bhi.n	11e2 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    11f4:	bd70      	pop	{r4, r5, r6, pc}
    11f6:	0000      	.short	0x0000
    11f8:	20000058 	.word	0x20000058

000011fc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    11fc:	4909      	ldr	r1, [pc, #36]	; (1224 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    11fe:	b510      	push	{r4, lr}
    1200:	4602      	mov	r2, r0
    1202:	6809      	ldr	r1, [r1, #0]
    1204:	2000      	movs	r0, #0
    1206:	b149      	cbz	r1, 121c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    1208:	7a0b      	ldrb	r3, [r1, #8]
    120a:	4293      	cmp	r3, r2
    120c:	d905      	bls.n	121a <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    120e:	6849      	ldr	r1, [r1, #4]
    1210:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    1214:	2900      	cmp	r1, #0
    1216:	d000      	beq.n	121a <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    1218:	1d08      	adds	r0, r1, #4
    121a:	bd10      	pop	{r4, pc}
    121c:	21ec      	movs	r1, #236	; 0xec
    121e:	2018      	movs	r0, #24
    1220:	f7ff fc20 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1224:	20000058 	.word	0x20000058

00001228 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    1228:	490a      	ldr	r1, [pc, #40]	; (1254 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    122a:	b510      	push	{r4, lr}
    122c:	4602      	mov	r2, r0
    122e:	6809      	ldr	r1, [r1, #0]
    1230:	2000      	movs	r0, #0
    1232:	b159      	cbz	r1, 124c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    1234:	7a0b      	ldrb	r3, [r1, #8]
    1236:	4293      	cmp	r3, r2
    1238:	d907      	bls.n	124a <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    123a:	6849      	ldr	r1, [r1, #4]
    123c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    1240:	2900      	cmp	r1, #0
    1242:	d002      	beq.n	124a <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    1244:	f831 0b04 	ldrh.w	r0, [r1], #4
    1248:	4408      	add	r0, r1
    124a:	bd10      	pop	{r4, pc}
    124c:	21fa      	movs	r1, #250	; 0xfa
    124e:	2018      	movs	r0, #24
    1250:	f7ff fc08 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1254:	20000058 	.word	0x20000058

00001258 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>:
    1258:	4801      	ldr	r0, [pc, #4]	; (1260 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA+0x8>)
    125a:	7840      	ldrb	r0, [r0, #1]
    125c:	4770      	bx	lr
    125e:	0000      	.short	0x0000
    1260:	2000005c 	.word	0x2000005c

00001264 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>:
    1264:	4801      	ldr	r0, [pc, #4]	; (126c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q+0x8>)
    1266:	6840      	ldr	r0, [r0, #4]
    1268:	4770      	bx	lr
    126a:	0000      	.short	0x0000
    126c:	2000005c 	.word	0x2000005c

00001270 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>:
    1270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1274:	460c      	mov	r4, r1
    1276:	4607      	mov	r7, r0
    1278:	4616      	mov	r6, r2
    127a:	2125      	movs	r1, #37	; 0x25
    127c:	4610      	mov	r0, r2
    127e:	460d      	mov	r5, r1
    1280:	4622      	mov	r2, r4
    1282:	f00c f9ba 	bl	d5fa <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    1286:	4680      	mov	r8, r0
    1288:	b157      	cbz	r7, 12a0 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA+0x30>
    128a:	4638      	mov	r0, r7
    128c:	4641      	mov	r1, r8
    128e:	4632      	mov	r2, r6
    1290:	462b      	mov	r3, r5
    1292:	9400      	str	r4, [sp, #0]
    1294:	f00c f96c 	bl	d570 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    1298:	4803      	ldr	r0, [pc, #12]	; (12a8 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA+0x38>)
    129a:	6047      	str	r7, [r0, #4]
    129c:	7004      	strb	r4, [r0, #0]
    129e:	7046      	strb	r6, [r0, #1]
    12a0:	4640      	mov	r0, r8
    12a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    12a6:	0000      	.short	0x0000
    12a8:	2000005c 	.word	0x2000005c

000012ac <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ>:
    12ac:	4802      	ldr	r0, [pc, #8]	; (12b8 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xc>)
    12ae:	7842      	ldrb	r2, [r0, #1]
    12b0:	7801      	ldrb	r1, [r0, #0]
    12b2:	6840      	ldr	r0, [r0, #4]
    12b4:	f7ff bfdc 	b.w	1270 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>
    12b8:	2000005c 	.word	0x2000005c
    12bc:	b530      	push	{r4, r5, lr}
    12be:	490d      	ldr	r1, [pc, #52]	; (12f4 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x48>)
    12c0:	2001      	movs	r0, #1
    12c2:	6048      	str	r0, [r1, #4]
    12c4:	1e82      	subs	r2, r0, #2
    12c6:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    12ca:	490b      	ldr	r1, [pc, #44]	; (12f8 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x4c>)
    12cc:	6088      	str	r0, [r1, #8]
    12ce:	2300      	movs	r3, #0
    12d0:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
    12d4:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    12d8:	4c08      	ldr	r4, [pc, #32]	; (12fc <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x50>)
    12da:	6023      	str	r3, [r4, #0]
    12dc:	1d25      	adds	r5, r4, #4
    12de:	6028      	str	r0, [r5, #0]
    12e0:	6088      	str	r0, [r1, #8]
    12e2:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    12e6:	6023      	str	r3, [r4, #0]
    12e8:	6028      	str	r0, [r5, #0]
    12ea:	4906      	ldr	r1, [pc, #24]	; (1304 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x58>)
    12ec:	4804      	ldr	r0, [pc, #16]	; (1300 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x54>)
    12ee:	6008      	str	r0, [r1, #0]
    12f0:	bd30      	pop	{r4, r5, pc}
    12f2:	0000      	.short	0x0000
    12f4:	4000e000 	.word	0x4000e000
    12f8:	4000f000 	.word	0x4000f000
    12fc:	4000f500 	.word	0x4000f500
    1300:	3ff60000 	.word	0x3ff60000
    1304:	4001f508 	.word	0x4001f508

00001308 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>:
    1308:	b510      	push	{r4, lr}
    130a:	f7ff ffd7 	bl	12bc <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x10>
    130e:	f00c fa87 	bl	d820 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x82>
    1312:	4903      	ldr	r1, [pc, #12]	; (1320 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x18>)
    1314:	4801      	ldr	r0, [pc, #4]	; (131c <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x14>)
    1316:	6008      	str	r0, [r1, #0]
    1318:	bd10      	pop	{r4, pc}
    131a:	0000      	.short	0x0000
    131c:	3ff60000 	.word	0x3ff60000
    1320:	4001f508 	.word	0x4001f508

00001324 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    1324:	b510      	push	{r4, lr}
    1326:	f7ff ffc9 	bl	12bc <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x10>
    132a:	f00c fa79 	bl	d820 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x82>
    132e:	f000 f887 	bl	1440 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    1332:	4905      	ldr	r1, [pc, #20]	; (1348 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x24>)
    1334:	4803      	ldr	r0, [pc, #12]	; (1344 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x20>)
    1336:	6008      	str	r0, [r1, #0]
    1338:	f000 f8b8 	bl	14ac <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    133c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1340:	f000 b8dc 	b.w	14fc <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    1344:	3ff60000 	.word	0x3ff60000
    1348:	4001f508 	.word	0x4001f508
    134c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1350:	4682      	mov	sl, r0
    1352:	4838      	ldr	r0, [pc, #224]	; (1434 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0xac>)
    1354:	f00f f897 	bl	10486 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    1358:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 1434 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0xac>
    135c:	b128      	cbz	r0, 136a <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x46>
    135e:	2601      	movs	r6, #1
    1360:	f10b 0001 	add.w	r0, fp, #1
    1364:	21ff      	movs	r1, #255	; 0xff
    1366:	7001      	strb	r1, [r0, #0]
    1368:	e000      	b.n	136c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x48>
    136a:	2600      	movs	r6, #0
    136c:	f44f 7580 	mov.w	r5, #256	; 0x100
    1370:	4c31      	ldr	r4, [pc, #196]	; (1438 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0xb0>)
    1372:	f04f 0800 	mov.w	r8, #0
    1376:	1d2f      	adds	r7, r5, #4
    1378:	2101      	movs	r1, #1
    137a:	6061      	str	r1, [r4, #4]
    137c:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    1380:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    1384:	f8c4 a504 	str.w	sl, [r4, #1284]	; 0x504
    1388:	6021      	str	r1, [r4, #0]
    138a:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 143c <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0xb4>
    138e:	e01c      	b.n	13ca <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x42>
    1390:	f8d9 0000 	ldr.w	r0, [r9]
    1394:	06c0      	lsls	r0, r0, #27
    1396:	d518      	bpl.n	13ca <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x42>
    1398:	200e      	movs	r0, #14
    139a:	f00c fa50 	bl	d83e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xa0>
    139e:	f3ef 8010 	mrs	r0, PRIMASK
    13a2:	9000      	str	r0, [sp, #0]
    13a4:	b672      	cpsid	i
    13a6:	2103      	movs	r1, #3
    13a8:	4620      	mov	r0, r4
    13aa:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
    13ae:	4629      	mov	r1, r5
    13b0:	f00c fa52 	bl	d858 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xba>
    13b4:	b930      	cbnz	r0, 13c4 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x3c>
    13b6:	4639      	mov	r1, r7
    13b8:	4620      	mov	r0, r4
    13ba:	f00c fa4d 	bl	d858 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xba>
    13be:	b908      	cbnz	r0, 13c4 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x3c>
    13c0:	f00f f8f8 	bl	105b4 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    13c4:	9800      	ldr	r0, [sp, #0]
    13c6:	b900      	cbnz	r0, 13ca <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x42>
    13c8:	b662      	cpsie	i
    13ca:	4629      	mov	r1, r5
    13cc:	4620      	mov	r0, r4
    13ce:	f00c fa43 	bl	d858 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xba>
    13d2:	b928      	cbnz	r0, 13e0 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x58>
    13d4:	4639      	mov	r1, r7
    13d6:	4620      	mov	r0, r4
    13d8:	f00c fa3e 	bl	d858 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xba>
    13dc:	2800      	cmp	r0, #0
    13de:	d0d7      	beq.n	1390 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x8>
    13e0:	4639      	mov	r1, r7
    13e2:	4620      	mov	r0, r4
    13e4:	f00c fa38 	bl	d858 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xba>
    13e8:	2800      	cmp	r0, #0
    13ea:	d1c5      	bne.n	1378 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x54>
    13ec:	bb06      	cbnz	r6, 1430 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0xa8>
    13ee:	f89b 1001 	ldrb.w	r1, [fp, #1]
    13f2:	f88d 1000 	strb.w	r1, [sp]
    13f6:	9900      	ldr	r1, [sp, #0]
    13f8:	9100      	str	r1, [sp, #0]
    13fa:	f89d 1000 	ldrb.w	r1, [sp]
    13fe:	b109      	cbz	r1, 1404 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x7c>
    1400:	2501      	movs	r5, #1
    1402:	e000      	b.n	1406 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x7e>
    1404:	2500      	movs	r5, #0
    1406:	f10b 0001 	add.w	r0, fp, #1
    140a:	f880 8000 	strb.w	r8, [r0]
    140e:	2003      	movs	r0, #3
    1410:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    1414:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    1418:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    141c:	200e      	movs	r0, #14
    141e:	f00c fa0e 	bl	d83e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xa0>
    1422:	4804      	ldr	r0, [pc, #16]	; (1434 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0xac>)
    1424:	f00f f846 	bl	104b4 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    1428:	b115      	cbz	r5, 1430 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0xa8>
    142a:	2011      	movs	r0, #17
    142c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1430:	2000      	movs	r0, #0
    1432:	e7fb      	b.n	142c <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0xa4>
    1434:	20000340 	.word	0x20000340
    1438:	4000e000 	.word	0x4000e000
    143c:	e000ed10 	.word	0xe000ed10

00001440 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    1440:	b510      	push	{r4, lr}
    1442:	4806      	ldr	r0, [pc, #24]	; (145c <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    1444:	f00f f832 	bl	104ac <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    1448:	b118      	cbz	r0, 1452 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x12>
    144a:	2127      	movs	r1, #39	; 0x27
    144c:	201d      	movs	r0, #29
    144e:	f7ff fb09 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1452:	4802      	ldr	r0, [pc, #8]	; (145c <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    1454:	2100      	movs	r1, #0
    1456:	7041      	strb	r1, [r0, #1]
    1458:	bd10      	pop	{r4, pc}
    145a:	0000      	.short	0x0000
    145c:	20000340 	.word	0x20000340

00001460 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    1460:	b570      	push	{r4, r5, r6, lr}
    1462:	4911      	ldr	r1, [pc, #68]	; (14a8 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    1464:	680a      	ldr	r2, [r1, #0]
    1466:	b1ea      	cbz	r2, 14a4 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    1468:	2300      	movs	r3, #0
    146a:	461d      	mov	r5, r3
    146c:	2401      	movs	r4, #1
    146e:	684a      	ldr	r2, [r1, #4]
    1470:	1c52      	adds	r2, r2, #1
    1472:	604a      	str	r2, [r1, #4]
    1474:	2a0c      	cmp	r2, #12
    1476:	d300      	bcc.n	147a <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    1478:	604d      	str	r5, [r1, #4]
    147a:	790e      	ldrb	r6, [r1, #4]
    147c:	fa04 f206 	lsl.w	r2, r4, r6
    1480:	680e      	ldr	r6, [r1, #0]
    1482:	4216      	tst	r6, r2
    1484:	d00b      	beq.n	149e <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    1486:	f3ef 8310 	mrs	r3, PRIMASK
    148a:	b672      	cpsid	i
    148c:	680c      	ldr	r4, [r1, #0]
    148e:	4394      	bics	r4, r2
    1490:	600c      	str	r4, [r1, #0]
    1492:	b903      	cbnz	r3, 1496 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    1494:	b662      	cpsie	i
    1496:	6849      	ldr	r1, [r1, #4]
    1498:	6001      	str	r1, [r0, #0]
    149a:	2000      	movs	r0, #0
    149c:	bd70      	pop	{r4, r5, r6, pc}
    149e:	1c5b      	adds	r3, r3, #1
    14a0:	2b0c      	cmp	r3, #12
    14a2:	d3e4      	bcc.n	146e <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    14a4:	2005      	movs	r0, #5
    14a6:	bd70      	pop	{r4, r5, r6, pc}
    14a8:	20000064 	.word	0x20000064

000014ac <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    14ac:	4802      	ldr	r0, [pc, #8]	; (14b8 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    14ae:	2100      	movs	r1, #0
    14b0:	6001      	str	r1, [r0, #0]
    14b2:	6041      	str	r1, [r0, #4]
    14b4:	4770      	bx	lr
    14b6:	0000      	.short	0x0000
    14b8:	20000064 	.word	0x20000064

000014bc <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>:
    14bc:	b510      	push	{r4, lr}
    14be:	4c04      	ldr	r4, [pc, #16]	; (14d0 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x14>)
    14c0:	7820      	ldrb	r0, [r4, #0]
    14c2:	28ff      	cmp	r0, #255	; 0xff
    14c4:	d003      	beq.n	14ce <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x12>
    14c6:	f00b f837 	bl	c538 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
    14ca:	20ff      	movs	r0, #255	; 0xff
    14cc:	7020      	strb	r0, [r4, #0]
    14ce:	bd10      	pop	{r4, pc}
    14d0:	20000000 	.word	0x20000000

000014d4 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    14d4:	b510      	push	{r4, lr}
    14d6:	4c08      	ldr	r4, [pc, #32]	; (14f8 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    14d8:	7861      	ldrb	r1, [r4, #1]
    14da:	b109      	cbz	r1, 14e0 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    14dc:	200f      	movs	r0, #15
    14de:	bd10      	pop	{r4, pc}
    14e0:	f00a fff0 	bl	c4c4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    14e4:	7020      	strb	r0, [r4, #0]
    14e6:	28ff      	cmp	r0, #255	; 0xff
    14e8:	d001      	beq.n	14ee <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    14ea:	2000      	movs	r0, #0
    14ec:	bd10      	pop	{r4, pc}
    14ee:	2173      	movs	r1, #115	; 0x73
    14f0:	201f      	movs	r0, #31
    14f2:	f7ff fab7 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    14f6:	0000      	.short	0x0000
    14f8:	20000000 	.word	0x20000000

000014fc <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    14fc:	4901      	ldr	r1, [pc, #4]	; (1504 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    14fe:	2000      	movs	r0, #0
    1500:	7048      	strb	r0, [r1, #1]
    1502:	4770      	bx	lr
    1504:	20000000 	.word	0x20000000

00001508 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    1508:	4806      	ldr	r0, [pc, #24]	; (1524 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    150a:	4a07      	ldr	r2, [pc, #28]	; (1528 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    150c:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    150e:	8852      	ldrh	r2, [r2, #2]
    1510:	4291      	cmp	r1, r2
    1512:	d104      	bne.n	151e <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    1514:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    1518:	b108      	cbz	r0, 151e <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    151a:	2000      	movs	r0, #0
    151c:	4770      	bx	lr
    151e:	2001      	movs	r0, #1
    1520:	4770      	bx	lr
    1522:	0000      	.short	0x0000
    1524:	200014fc 	.word	0x200014fc
    1528:	2000032c 	.word	0x2000032c

0000152c <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    152c:	4901      	ldr	r1, [pc, #4]	; (1534 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    152e:	8048      	strh	r0, [r1, #2]
    1530:	4770      	bx	lr
    1532:	0000      	.short	0x0000
    1534:	2000032c 	.word	0x2000032c

00001538 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    1538:	4808      	ldr	r0, [pc, #32]	; (155c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    153a:	4a09      	ldr	r2, [pc, #36]	; (1560 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    153c:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    153e:	8852      	ldrh	r2, [r2, #2]
    1540:	4291      	cmp	r1, r2
    1542:	d109      	bne.n	1558 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    1544:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1548:	8481      	strh	r1, [r0, #36]	; 0x24
    154a:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    154e:	b119      	cbz	r1, 1558 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    1550:	2100      	movs	r1, #0
    1552:	7001      	strb	r1, [r0, #0]
    1554:	2001      	movs	r0, #1
    1556:	4770      	bx	lr
    1558:	2000      	movs	r0, #0
    155a:	4770      	bx	lr
    155c:	200014fc 	.word	0x200014fc
    1560:	2000032c 	.word	0x2000032c

00001564 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    1564:	4807      	ldr	r0, [pc, #28]	; (1584 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    1566:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    156a:	2901      	cmp	r1, #1
    156c:	d007      	beq.n	157e <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x1a>
    156e:	2101      	movs	r1, #1
    1570:	7001      	strb	r1, [r0, #0]
    1572:	4805      	ldr	r0, [pc, #20]	; (1588 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    1574:	4903      	ldr	r1, [pc, #12]	; (1584 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    1576:	8800      	ldrh	r0, [r0, #0]
    1578:	8488      	strh	r0, [r1, #36]	; 0x24
    157a:	2001      	movs	r0, #1
    157c:	4770      	bx	lr
    157e:	2000      	movs	r0, #0
    1580:	4770      	bx	lr
    1582:	0000      	.short	0x0000
    1584:	200014fc 	.word	0x200014fc
    1588:	2000032c 	.word	0x2000032c

0000158c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    158c:	4906      	ldr	r1, [pc, #24]	; (15a8 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1c>)
    158e:	4b07      	ldr	r3, [pc, #28]	; (15ac <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    1590:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    1592:	885b      	ldrh	r3, [r3, #2]
    1594:	429a      	cmp	r2, r3
    1596:	d105      	bne.n	15a4 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    1598:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    159c:	b112      	cbz	r2, 15a4 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    159e:	6001      	str	r1, [r0, #0]
    15a0:	2001      	movs	r0, #1
    15a2:	4770      	bx	lr
    15a4:	2000      	movs	r0, #0
    15a6:	4770      	bx	lr
    15a8:	200014fc 	.word	0x200014fc
    15ac:	2000032c 	.word	0x2000032c

000015b0 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    15b0:	4909      	ldr	r1, [pc, #36]	; (15d8 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    15b2:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    15b4:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    15b8:	3bff      	subs	r3, #255	; 0xff
    15ba:	d002      	beq.n	15c2 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x12>
    15bc:	2100      	movs	r1, #0
    15be:	6001      	str	r1, [r0, #0]
    15c0:	e007      	b.n	15d2 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    15c2:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    15c6:	4904      	ldr	r1, [pc, #16]	; (15d8 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    15c8:	2a01      	cmp	r2, #1
    15ca:	d002      	beq.n	15d2 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    15cc:	6001      	str	r1, [r0, #0]
    15ce:	2001      	movs	r0, #1
    15d0:	4770      	bx	lr
    15d2:	2000      	movs	r0, #0
    15d4:	4770      	bx	lr
    15d6:	0000      	.short	0x0000
    15d8:	200014fc 	.word	0x200014fc

000015dc <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    15dc:	4901      	ldr	r1, [pc, #4]	; (15e4 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    15de:	8008      	strh	r0, [r1, #0]
    15e0:	4770      	bx	lr
    15e2:	0000      	.short	0x0000
    15e4:	2000032c 	.word	0x2000032c

000015e8 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    15e8:	4905      	ldr	r1, [pc, #20]	; (1600 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    15ea:	2000      	movs	r0, #0
    15ec:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    15f0:	f64f 70ff 	movw	r0, #65535	; 0xffff
    15f4:	8488      	strh	r0, [r1, #36]	; 0x24
    15f6:	4903      	ldr	r1, [pc, #12]	; (1604 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    15f8:	8008      	strh	r0, [r1, #0]
    15fa:	8048      	strh	r0, [r1, #2]
    15fc:	4770      	bx	lr
    15fe:	0000      	.short	0x0000
    1600:	200014fc 	.word	0x200014fc
    1604:	2000032c 	.word	0x2000032c
    1608:	4905      	ldr	r1, [pc, #20]	; (1620 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x38>)
    160a:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    160c:	4282      	cmp	r2, r0
    160e:	d105      	bne.n	161c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x34>
    1610:	2000      	movs	r0, #0
    1612:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    1616:	f64f 70ff 	movw	r0, #65535	; 0xffff
    161a:	8488      	strh	r0, [r1, #36]	; 0x24
    161c:	4770      	bx	lr
    161e:	0000      	.short	0x0000
    1620:	200014fc 	.word	0x200014fc

00001624 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    1624:	4a0a      	ldr	r2, [pc, #40]	; (1650 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    1626:	b110      	cbz	r0, 162e <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    1628:	2801      	cmp	r0, #1
    162a:	d007      	beq.n	163c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    162c:	e00e      	b.n	164c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    162e:	7850      	ldrb	r0, [r2, #1]
    1630:	b160      	cbz	r0, 164c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    1632:	f8d2 0002 	ldr.w	r0, [r2, #2]
    1636:	6008      	str	r0, [r1, #0]
    1638:	88d0      	ldrh	r0, [r2, #6]
    163a:	e004      	b.n	1646 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    163c:	7810      	ldrb	r0, [r2, #0]
    163e:	b128      	cbz	r0, 164c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    1640:	6890      	ldr	r0, [r2, #8]
    1642:	6008      	str	r0, [r1, #0]
    1644:	8990      	ldrh	r0, [r2, #12]
    1646:	8088      	strh	r0, [r1, #4]
    1648:	2001      	movs	r0, #1
    164a:	4770      	bx	lr
    164c:	2000      	movs	r0, #0
    164e:	4770      	bx	lr
    1650:	20000342 	.word	0x20000342

00001654 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    1654:	4a08      	ldr	r2, [pc, #32]	; (1678 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    1656:	2301      	movs	r3, #1
    1658:	b138      	cbz	r0, 166a <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    165a:	2801      	cmp	r0, #1
    165c:	d104      	bne.n	1668 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    165e:	7013      	strb	r3, [r2, #0]
    1660:	6808      	ldr	r0, [r1, #0]
    1662:	6090      	str	r0, [r2, #8]
    1664:	8888      	ldrh	r0, [r1, #4]
    1666:	8190      	strh	r0, [r2, #12]
    1668:	4770      	bx	lr
    166a:	7053      	strb	r3, [r2, #1]
    166c:	6808      	ldr	r0, [r1, #0]
    166e:	f8c2 0002 	str.w	r0, [r2, #2]
    1672:	8888      	ldrh	r0, [r1, #4]
    1674:	80d0      	strh	r0, [r2, #6]
    1676:	4770      	bx	lr
    1678:	20000342 	.word	0x20000342

0000167c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    167c:	4906      	ldr	r1, [pc, #24]	; (1698 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    167e:	b110      	cbz	r0, 1686 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    1680:	2801      	cmp	r0, #1
    1682:	d002      	beq.n	168a <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    1684:	e005      	b.n	1692 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    1686:	7848      	ldrb	r0, [r1, #1]
    1688:	e000      	b.n	168c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    168a:	7808      	ldrb	r0, [r1, #0]
    168c:	b108      	cbz	r0, 1692 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    168e:	2001      	movs	r0, #1
    1690:	4770      	bx	lr
    1692:	2000      	movs	r0, #0
    1694:	4770      	bx	lr
    1696:	0000      	.short	0x0000
    1698:	20000342 	.word	0x20000342

0000169c <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
    169c:	4901      	ldr	r1, [pc, #4]	; (16a4 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
    169e:	7708      	strb	r0, [r1, #28]
    16a0:	4770      	bx	lr
    16a2:	0000      	.short	0x0000
    16a4:	20000c82 	.word	0x20000c82

000016a8 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>:
    16a8:	b570      	push	{r4, r5, r6, lr}
    16aa:	460c      	mov	r4, r1
    16ac:	4605      	mov	r5, r0
    16ae:	f000 f92b 	bl	1908 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    16b2:	b118      	cbz	r0, 16bc <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x14>
    16b4:	21d0      	movs	r1, #208	; 0xd0
    16b6:	2027      	movs	r0, #39	; 0x27
    16b8:	f7ff f9d4 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    16bc:	4803      	ldr	r0, [pc, #12]	; (16cc <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x24>)
    16be:	2101      	movs	r1, #1
    16c0:	f00c fcfa 	bl	e0b8 <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    16c4:	4802      	ldr	r0, [pc, #8]	; (16d0 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x28>)
    16c6:	e9c0 540b 	strd	r5, r4, [r0, #44]	; 0x2c
    16ca:	bd70      	pop	{r4, r5, r6, pc}
    16cc:	20000c60 	.word	0x20000c60
    16d0:	2000006c 	.word	0x2000006c

000016d4 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>:
    16d4:	4901      	ldr	r1, [pc, #4]	; (16dc <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA+0x8>)
    16d6:	2001      	movs	r0, #1
    16d8:	7148      	strb	r0, [r1, #5]
    16da:	4770      	bx	lr
    16dc:	2000006c 	.word	0x2000006c

000016e0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>:
    16e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    16e4:	4e65      	ldr	r6, [pc, #404]	; (187c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x19c>)
    16e6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    16e8:	7835      	ldrb	r5, [r6, #0]
    16ea:	bbed      	cbnz	r5, 1768 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    16ec:	b3e2      	cbz	r2, 1768 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    16ee:	b3db      	cbz	r3, 1768 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    16f0:	b3d4      	cbz	r4, 1768 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    16f2:	f106 0514 	add.w	r5, r6, #20
    16f6:	e9c6 010f 	strd	r0, r1, [r6, #60]	; 0x3c
    16fa:	e885 001c 	stmia.w	r5, {r2, r3, r4}
    16fe:	2700      	movs	r7, #0
    1700:	7177      	strb	r7, [r6, #5]
    1702:	7137      	strb	r7, [r6, #4]
    1704:	70b7      	strb	r7, [r6, #2]
    1706:	7077      	strb	r7, [r6, #1]
    1708:	70f7      	strb	r7, [r6, #3]
    170a:	81b7      	strh	r7, [r6, #12]
    170c:	81f7      	strh	r7, [r6, #14]
    170e:	f000 f959 	bl	19c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa0>
    1712:	4605      	mov	r5, r0
    1714:	f000 f950 	bl	19b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x94>
    1718:	4604      	mov	r4, r0
    171a:	f006 fc4d 	bl	7fb8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    171e:	f006 f9ed 	bl	7afc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    1722:	f994 006e 	ldrsb.w	r0, [r4, #110]	; 0x6e
    1726:	f006 fccb 	bl	80c0 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    172a:	69e0      	ldr	r0, [r4, #28]
    172c:	f006 fdae 	bl	828c <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    1730:	6960      	ldr	r0, [r4, #20]
    1732:	f006 fda1 	bl	8278 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    1736:	f895 0033 	ldrb.w	r0, [r5, #51]	; 0x33
    173a:	f006 fdd7 	bl	82ec <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    173e:	f04f 0b01 	mov.w	fp, #1
    1742:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    1746:	2000      	movs	r0, #0
    1748:	f006 fb3c 	bl	7dc4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    174c:	2800      	cmp	r0, #0
    174e:	d07d      	beq.n	184c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x16c>
    1750:	484b      	ldr	r0, [pc, #300]	; (1880 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a0>)
    1752:	f006 fb9b 	bl	7e8c <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    1756:	8820      	ldrh	r0, [r4, #0]
    1758:	f7ff fd66 	bl	1228 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    175c:	6370      	str	r0, [r6, #52]	; 0x34
    175e:	8820      	ldrh	r0, [r4, #0]
    1760:	f7ff fd4c 	bl	11fc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    1764:	63b0      	str	r0, [r6, #56]	; 0x38
    1766:	e000      	b.n	176a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x8a>
    1768:	e009      	b.n	177e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x9e>
    176a:	f894 0077 	ldrb.w	r0, [r4, #119]	; 0x77
    176e:	f88d 0000 	strb.w	r0, [sp]
    1772:	9800      	ldr	r0, [sp, #0]
    1774:	9000      	str	r0, [sp, #0]
    1776:	f89d 0000 	ldrb.w	r0, [sp]
    177a:	b9a8      	cbnz	r0, 17a8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xc8>
    177c:	e002      	b.n	1784 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xa4>
    177e:	f240 1145 	movw	r1, #325	; 0x145
    1782:	e077      	b.n	1874 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x194>
    1784:	6f20      	ldr	r0, [r4, #112]	; 0x70
    1786:	b178      	cbz	r0, 17a8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xc8>
    1788:	f8b5 004a 	ldrh.w	r0, [r5, #74]	; 0x4a
    178c:	8aa9      	ldrh	r1, [r5, #20]
    178e:	4288      	cmp	r0, r1
    1790:	d10a      	bne.n	17a8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xc8>
    1792:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
    1796:	2201      	movs	r2, #1
    1798:	4408      	add	r0, r1
    179a:	f8a5 004a 	strh.w	r0, [r5, #74]	; 0x4a
    179e:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
    17a2:	6f21      	ldr	r1, [r4, #112]	; 0x70
    17a4:	f009 fcd6 	bl	b154 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    17a8:	f105 0288 	add.w	r2, r5, #136	; 0x88
    17ac:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 1884 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a4>
    17b0:	e892 110c 	ldmia.w	r2, {r2, r3, r8, ip}
    17b4:	e889 110c 	stmia.w	r9, {r2, r3, r8, ip}
    17b8:	f8d5 2098 	ldr.w	r2, [r5, #152]	; 0x98
    17bc:	f8c9 2019 	str.w	r2, [r9, #25]
    17c0:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
    17c4:	f8c9 101d 	str.w	r1, [r9, #29]
    17c8:	f000 f930 	bl	1a2c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x108>
    17cc:	8f22      	ldrh	r2, [r4, #56]	; 0x38
    17ce:	4601      	mov	r1, r0
    17d0:	46ba      	mov	sl, r7
    17d2:	4610      	mov	r0, r2
    17d4:	f00c fa13 	bl	dbfe <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    17d8:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
    17da:	4281      	cmp	r1, r0
    17dc:	d200      	bcs.n	17e0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x100>
    17de:	4608      	mov	r0, r1
    17e0:	71b0      	strb	r0, [r6, #6]
    17e2:	46b0      	mov	r8, r6
    17e4:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    17e8:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
    17ea:	f895 7023 	ldrb.w	r7, [r5, #35]	; 0x23
    17ee:	8fa6      	ldrh	r6, [r4, #60]	; 0x3c
    17f0:	2908      	cmp	r1, #8
    17f2:	d100      	bne.n	17f6 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x116>
    17f4:	2104      	movs	r1, #4
    17f6:	f00c fa02 	bl	dbfe <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    17fa:	b90f      	cbnz	r7, 1800 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x120>
    17fc:	1d00      	adds	r0, r0, #4
    17fe:	b280      	uxth	r0, r0
    1800:	4286      	cmp	r6, r0
    1802:	d200      	bcs.n	1806 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x126>
    1804:	4630      	mov	r0, r6
    1806:	f888 0007 	strb.w	r0, [r8, #7]
    180a:	f888 0008 	strb.w	r0, [r8, #8]
    180e:	f895 0022 	ldrb.w	r0, [r5, #34]	; 0x22
    1812:	b188      	cbz	r0, 1838 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x158>
    1814:	f889 b018 	strb.w	fp, [r9, #24]
    1818:	e9d5 121e 	ldrd	r1, r2, [r5, #120]	; 0x78
    181c:	e9c9 1204 	strd	r1, r2, [r9, #16]
    1820:	4656      	mov	r6, sl
    1822:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    1826:	f00c f8c7 	bl	d9b8 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    182a:	4603      	mov	r3, r0
    182c:	22fb      	movs	r2, #251	; 0xfb
    182e:	4915      	ldr	r1, [pc, #84]	; (1884 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a4>)
    1830:	4630      	mov	r0, r6
    1832:	9600      	str	r6, [sp, #0]
    1834:	f006 f8ce 	bl	79d4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    1838:	2001      	movs	r0, #1
    183a:	f000 fb71 	bl	1f20 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1d4>
    183e:	4812      	ldr	r0, [pc, #72]	; (1888 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a8>)
    1840:	6800      	ldr	r0, [r0, #0]
    1842:	2803      	cmp	r0, #3
    1844:	d014      	beq.n	1870 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x190>
    1846:	280b      	cmp	r0, #11
    1848:	d012      	beq.n	1870 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x190>
    184a:	e000      	b.n	184e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x16e>
    184c:	e00e      	b.n	186c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x18c>
    184e:	480d      	ldr	r0, [pc, #52]	; (1884 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a4>)
    1850:	220e      	movs	r2, #14
    1852:	2100      	movs	r1, #0
    1854:	304a      	adds	r0, #74	; 0x4a
    1856:	f00e ff84 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    185a:	480a      	ldr	r0, [pc, #40]	; (1884 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a4>)
    185c:	8aa9      	ldrh	r1, [r5, #20]
    185e:	304a      	adds	r0, #74	; 0x4a
    1860:	8041      	strh	r1, [r0, #2]
    1862:	8821      	ldrh	r1, [r4, #0]
    1864:	8001      	strh	r1, [r0, #0]
    1866:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
    186a:	7101      	strb	r1, [r0, #4]
    186c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1870:	f240 2102 	movw	r1, #514	; 0x202
    1874:	2027      	movs	r0, #39	; 0x27
    1876:	f7ff f8f5 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    187a:	0000      	.short	0x0000
    187c:	2000006c 	.word	0x2000006c
    1880:	000020a8 	.word	0x000020a8
    1884:	20000c38 	.word	0x20000c38
    1888:	40001550 	.word	0x40001550

0000188c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>:
    188c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    1890:	4688      	mov	r8, r1
    1892:	4607      	mov	r7, r0
    1894:	f000 f896 	bl	19c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa0>
    1898:	4c1a      	ldr	r4, [pc, #104]	; (1904 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x78>)
    189a:	4605      	mov	r5, r0
    189c:	07b8      	lsls	r0, r7, #30
    189e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    18a0:	784e      	ldrb	r6, [r1, #1]
    18a2:	d516      	bpl.n	18d2 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x46>
    18a4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    18a6:	b330      	cbz	r0, 18f6 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x6a>
    18a8:	8962      	ldrh	r2, [r4, #10]
    18aa:	1cd2      	adds	r2, r2, #3
    18ac:	f00e fedf 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    18b0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    18b2:	6260      	str	r0, [r4, #36]	; 0x24
    18b4:	4669      	mov	r1, sp
    18b6:	aa01      	add	r2, sp, #4
    18b8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    18ba:	f00b fdd6 	bl	d46a <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    18be:	9800      	ldr	r0, [sp, #0]
    18c0:	f00b fd70 	bl	d3a4 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    18c4:	f8c8 0000 	str.w	r0, [r8]
    18c8:	4631      	mov	r1, r6
    18ca:	2201      	movs	r2, #1
    18cc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    18ce:	f00b fd20 	bl	d312 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    18d2:	07f8      	lsls	r0, r7, #31
    18d4:	d00d      	beq.n	18f2 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x66>
    18d6:	e9d5 0120 	ldrd	r0, r1, [r5, #128]	; 0x80
    18da:	3518      	adds	r5, #24
    18dc:	1c40      	adds	r0, r0, #1
    18de:	f141 0100 	adc.w	r1, r1, #0
    18e2:	e9c5 011a 	strd	r0, r1, [r5, #104]	; 0x68
    18e6:	f815 0918 	ldrb.w	r0, [r5], #-24
    18ea:	2801      	cmp	r0, #1
    18ec:	d008      	beq.n	1900 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x74>
    18ee:	2001      	movs	r0, #1
    18f0:	7628      	strb	r0, [r5, #24]
    18f2:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    18f6:	f240 4166 	movw	r1, #1126	; 0x466
    18fa:	2027      	movs	r0, #39	; 0x27
    18fc:	f7ff f8b2 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1900:	2000      	movs	r0, #0
    1902:	e7f5      	b.n	18f0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x64>
    1904:	2000006c 	.word	0x2000006c

00001908 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>:
    1908:	4804      	ldr	r0, [pc, #16]	; (191c <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x14>)
    190a:	7800      	ldrb	r0, [r0, #0]
    190c:	b108      	cbz	r0, 1912 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0xa>
    190e:	200c      	movs	r0, #12
    1910:	4770      	bx	lr
    1912:	4903      	ldr	r1, [pc, #12]	; (1920 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x18>)
    1914:	2000      	movs	r0, #0
    1916:	7708      	strb	r0, [r1, #28]
    1918:	4770      	bx	lr
    191a:	0000      	.short	0x0000
    191c:	2000006c 	.word	0x2000006c
    1920:	20000c82 	.word	0x20000c82

00001924 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>:
    1924:	4812      	ldr	r0, [pc, #72]	; (1970 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4c>)
    1926:	b508      	push	{r3, lr}
    1928:	7801      	ldrb	r1, [r0, #0]
    192a:	b139      	cbz	r1, 193c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x18>
    192c:	7800      	ldrb	r0, [r0, #0]
    192e:	2801      	cmp	r0, #1
    1930:	d006      	beq.n	1940 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c>
    1932:	f240 211a 	movw	r1, #538	; 0x21a
    1936:	2027      	movs	r0, #39	; 0x27
    1938:	f7ff f894 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    193c:	f000 f9ca 	bl	1cd4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b0>
    1940:	f000 f83a 	bl	19b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x94>
    1944:	f890 1077 	ldrb.w	r1, [r0, #119]	; 0x77
    1948:	f88d 1000 	strb.w	r1, [sp]
    194c:	9900      	ldr	r1, [sp, #0]
    194e:	9100      	str	r1, [sp, #0]
    1950:	f89d 1000 	ldrb.w	r1, [sp]
    1954:	2900      	cmp	r1, #0
    1956:	d10a      	bne.n	196e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a>
    1958:	6f01      	ldr	r1, [r0, #112]	; 0x70
    195a:	2900      	cmp	r1, #0
    195c:	d007      	beq.n	196e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a>
    195e:	f890 0076 	ldrb.w	r0, [r0, #118]	; 0x76
    1962:	2200      	movs	r2, #0
    1964:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    1968:	4611      	mov	r1, r2
    196a:	f009 bbf3 	b.w	b154 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    196e:	bd08      	pop	{r3, pc}
    1970:	2000006c 	.word	0x2000006c
    1974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1976:	2600      	movs	r6, #0
    1978:	4605      	mov	r5, r0
    197a:	704e      	strb	r6, [r1, #1]
    197c:	2022      	movs	r0, #34	; 0x22
    197e:	4f09      	ldr	r7, [pc, #36]	; (19a4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x80>)
    1980:	460c      	mov	r4, r1
    1982:	7008      	strb	r0, [r1, #0]
    1984:	722e      	strb	r6, [r5, #8]
    1986:	220e      	movs	r2, #14
    1988:	4639      	mov	r1, r7
    198a:	1d20      	adds	r0, r4, #4
    198c:	f00e fe6f 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1990:	7a28      	ldrb	r0, [r5, #8]
    1992:	f88d 0000 	strb.w	r0, [sp]
    1996:	9800      	ldr	r0, [sp, #0]
    1998:	9000      	str	r0, [sp, #0]
    199a:	f89d 0000 	ldrb.w	r0, [sp]
    199e:	2800      	cmp	r0, #0
    19a0:	d1f0      	bne.n	1984 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    19a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    19a4:	20000c90 	.word	0x20000c90
    19a8:	4a02      	ldr	r2, [pc, #8]	; (19b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x90>)
    19aa:	8993      	ldrh	r3, [r2, #12]
    19ac:	4303      	orrs	r3, r0
    19ae:	8193      	strh	r3, [r2, #12]
    19b0:	6952      	ldr	r2, [r2, #20]
    19b2:	4710      	bx	r2
    19b4:	2000006c 	.word	0x2000006c
    19b8:	4801      	ldr	r0, [pc, #4]	; (19c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x9c>)
    19ba:	6840      	ldr	r0, [r0, #4]
    19bc:	4770      	bx	lr
    19be:	0000      	.short	0x0000
    19c0:	200000a8 	.word	0x200000a8
    19c4:	4801      	ldr	r0, [pc, #4]	; (19cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa8>)
    19c6:	6840      	ldr	r0, [r0, #4]
    19c8:	3088      	adds	r0, #136	; 0x88
    19ca:	4770      	bx	lr
    19cc:	200000a8 	.word	0x200000a8
    19d0:	4a01      	ldr	r2, [pc, #4]	; (19d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb4>)
    19d2:	2100      	movs	r1, #0
    19d4:	6952      	ldr	r2, [r2, #20]
    19d6:	4710      	bx	r2
    19d8:	2000006c 	.word	0x2000006c
    19dc:	b570      	push	{r4, r5, r6, lr}
    19de:	4605      	mov	r5, r0
    19e0:	2901      	cmp	r1, #1
    19e2:	d81c      	bhi.n	1a1e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfa>
    19e4:	4c10      	ldr	r4, [pc, #64]	; (1a28 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x104>)
    19e6:	69a1      	ldr	r1, [r4, #24]
    19e8:	4788      	blx	r1
    19ea:	b1c0      	cbz	r0, 1a1e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfa>
    19ec:	7920      	ldrb	r0, [r4, #4]
    19ee:	b9b0      	cbnz	r0, 1a1e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfa>
    19f0:	2d01      	cmp	r5, #1
    19f2:	d116      	bne.n	1a22 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfe>
    19f4:	f104 0010 	add.w	r0, r4, #16
    19f8:	7800      	ldrb	r0, [r0, #0]
    19fa:	06c1      	lsls	r1, r0, #27
    19fc:	d405      	bmi.n	1a0a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe6>
    19fe:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    1a00:	7809      	ldrb	r1, [r1, #0]
    1a02:	06c9      	lsls	r1, r1, #27
    1a04:	d401      	bmi.n	1a0a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe6>
    1a06:	2101      	movs	r1, #1
    1a08:	e000      	b.n	1a0c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe8>
    1a0a:	2100      	movs	r1, #0
    1a0c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1a0e:	b91a      	cbnz	r2, 1a18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf4>
    1a10:	8962      	ldrh	r2, [r4, #10]
    1a12:	b10a      	cbz	r2, 1a18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf4>
    1a14:	06c0      	lsls	r0, r0, #27
    1a16:	d502      	bpl.n	1a1e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfa>
    1a18:	89a0      	ldrh	r0, [r4, #12]
    1a1a:	4301      	orrs	r1, r0
    1a1c:	d001      	beq.n	1a22 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfe>
    1a1e:	2001      	movs	r0, #1
    1a20:	bd70      	pop	{r4, r5, r6, pc}
    1a22:	2000      	movs	r0, #0
    1a24:	bd70      	pop	{r4, r5, r6, pc}
    1a26:	0000      	.short	0x0000
    1a28:	2000006c 	.word	0x2000006c
    1a2c:	b510      	push	{r4, lr}
    1a2e:	f7ff ffc3 	bl	19b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x94>
    1a32:	4604      	mov	r4, r0
    1a34:	f7ff ffc6 	bl	19c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa0>
    1a38:	4601      	mov	r1, r0
    1a3a:	7f40      	ldrb	r0, [r0, #29]
    1a3c:	4a0b      	ldr	r2, [pc, #44]	; (1a6c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x148>)
    1a3e:	2825      	cmp	r0, #37	; 0x25
    1a40:	d00a      	beq.n	1a58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x134>
    1a42:	2826      	cmp	r0, #38	; 0x26
    1a44:	d008      	beq.n	1a58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x134>
    1a46:	7f89      	ldrb	r1, [r1, #30]
    1a48:	2925      	cmp	r1, #37	; 0x25
    1a4a:	d005      	beq.n	1a58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x134>
    1a4c:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    1a50:	2804      	cmp	r0, #4
    1a52:	d100      	bne.n	1a56 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x132>
    1a54:	2008      	movs	r0, #8
    1a56:	bd10      	pop	{r4, pc}
    1a58:	6850      	ldr	r0, [r2, #4]
    1a5a:	f890 1262 	ldrb.w	r1, [r0, #610]	; 0x262
    1a5e:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    1a62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1a66:	f00b bfb5 	b.w	d9d4 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x20>
    1a6a:	0000      	.short	0x0000
    1a6c:	200000a8 	.word	0x200000a8
    1a70:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    1a74:	468b      	mov	fp, r1
    1a76:	4681      	mov	r9, r0
    1a78:	f7ff ffa4 	bl	19c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa0>
    1a7c:	2700      	movs	r7, #0
    1a7e:	4c64      	ldr	r4, [pc, #400]	; (1c10 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ec>)
    1a80:	4606      	mov	r6, r0
    1a82:	f88d 7008 	strb.w	r7, [sp, #8]
    1a86:	9703      	str	r7, [sp, #12]
    1a88:	9701      	str	r7, [sp, #4]
    1a8a:	7820      	ldrb	r0, [r4, #0]
    1a8c:	463d      	mov	r5, r7
    1a8e:	2802      	cmp	r0, #2
    1a90:	d004      	beq.n	1a9c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x178>
    1a92:	f240 41ea 	movw	r1, #1258	; 0x4ea
    1a96:	2027      	movs	r0, #39	; 0x27
    1a98:	f7fe ffe4 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1a9c:	7ba0      	ldrb	r0, [r4, #14]
    1a9e:	0640      	lsls	r0, r0, #25
    1aa0:	d406      	bmi.n	1ab0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x18c>
    1aa2:	2040      	movs	r0, #64	; 0x40
    1aa4:	f7ff ff94 	bl	19d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xac>
    1aa8:	89e0      	ldrh	r0, [r4, #14]
    1aaa:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    1aae:	81e0      	strh	r0, [r4, #14]
    1ab0:	f896 0023 	ldrb.w	r0, [r6, #35]	; 0x23
    1ab4:	f04f 0801 	mov.w	r8, #1
    1ab8:	f1b9 0f00 	cmp.w	r9, #0
    1abc:	d03a      	beq.n	1b34 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x210>
    1abe:	b180      	cbz	r0, 1ae2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1be>
    1ac0:	f006 f856 	bl	7b70 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    1ac4:	f006 f830 	bl	7b28 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    1ac8:	b958      	cbnz	r0, 1ae2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1be>
    1aca:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1acc:	7841      	ldrb	r1, [r0, #1]
    1ace:	b141      	cbz	r1, 1ae2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1be>
    1ad0:	7800      	ldrb	r0, [r0, #0]
    1ad2:	7e31      	ldrb	r1, [r6, #24]
    1ad4:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    1ad8:	4288      	cmp	r0, r1
    1ada:	d102      	bne.n	1ae2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1be>
    1adc:	f884 8001 	strb.w	r8, [r4, #1]
    1ae0:	e092      	b.n	1c08 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2e4>
    1ae2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1ae4:	7841      	ldrb	r1, [r0, #1]
    1ae6:	8161      	strh	r1, [r4, #10]
    1ae8:	b121      	cbz	r1, 1af4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1d0>
    1aea:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    1aec:	f00b fd93 	bl	d616 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    1af0:	62a0      	str	r0, [r4, #40]	; 0x28
    1af2:	e000      	b.n	1af6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1d2>
    1af4:	62a5      	str	r5, [r4, #40]	; 0x28
    1af6:	89e0      	ldrh	r0, [r4, #14]
    1af8:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    1afc:	81e0      	strh	r0, [r4, #14]
    1afe:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1b00:	7df1      	ldrb	r1, [r6, #23]
    1b02:	7800      	ldrb	r0, [r0, #0]
    1b04:	f3c0 0080 	ubfx	r0, r0, #2, #1
    1b08:	4288      	cmp	r0, r1
    1b0a:	d007      	beq.n	1b1c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1f8>
    1b0c:	a803      	add	r0, sp, #12
    1b0e:	f000 f985 	bl	1e1c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xd0>
    1b12:	89e0      	ldrh	r0, [r4, #14]
    1b14:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    1b18:	81e0      	strh	r0, [r4, #14]
    1b1a:	e000      	b.n	1b1e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1fa>
    1b1c:	2701      	movs	r7, #1
    1b1e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1b20:	7e31      	ldrb	r1, [r6, #24]
    1b22:	7800      	ldrb	r0, [r0, #0]
    1b24:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    1b28:	4288      	cmp	r0, r1
    1b2a:	d10d      	bne.n	1b48 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x224>
    1b2c:	a802      	add	r0, sp, #8
    1b2e:	f000 f92b 	bl	1d88 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3c>
    1b32:	e009      	b.n	1b48 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x224>
    1b34:	b108      	cbz	r0, 1b3a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x216>
    1b36:	f006 f815 	bl	7b64 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    1b3a:	78a0      	ldrb	r0, [r4, #2]
    1b3c:	1c40      	adds	r0, r0, #1
    1b3e:	70a0      	strb	r0, [r4, #2]
    1b40:	89e0      	ldrh	r0, [r4, #14]
    1b42:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    1b46:	81e0      	strh	r0, [r4, #14]
    1b48:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 1c10 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ec>
    1b4c:	f896 0022 	ldrb.w	r0, [r6, #34]	; 0x22
    1b50:	f10a 0a3c 	add.w	sl, sl, #60	; 0x3c
    1b54:	b198      	cbz	r0, 1b7e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x25a>
    1b56:	f7ff ff2f 	bl	19b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x94>
    1b5a:	492e      	ldr	r1, [pc, #184]	; (1c14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f0>)
    1b5c:	f881 8018 	strb.w	r8, [r1, #24]
    1b60:	e9d6 231e 	ldrd	r2, r3, [r6, #120]	; 0x78
    1b64:	e9c1 2304 	strd	r2, r3, [r1, #16]
    1b68:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    1b6c:	f00b ff24 	bl	d9b8 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    1b70:	4603      	mov	r3, r0
    1b72:	22fb      	movs	r2, #251	; 0xfb
    1b74:	4927      	ldr	r1, [pc, #156]	; (1c14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f0>)
    1b76:	4628      	mov	r0, r5
    1b78:	9500      	str	r5, [sp, #0]
    1b7a:	f005 ff2b 	bl	79d4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    1b7e:	f04f 0800 	mov.w	r8, #0
    1b82:	f1bb 0f00 	cmp.w	fp, #0
    1b86:	d104      	bne.n	1b92 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x26e>
    1b88:	78a1      	ldrb	r1, [r4, #2]
    1b8a:	2001      	movs	r0, #1
    1b8c:	f7ff ff26 	bl	19dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb8>
    1b90:	b120      	cbz	r0, 1b9c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x278>
    1b92:	f006 fb5d 	bl	8250 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>
    1b96:	f04f 0801 	mov.w	r8, #1
    1b9a:	e002      	b.n	1ba2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x27e>
    1b9c:	2000      	movs	r0, #0
    1b9e:	f000 f9bf 	bl	1f20 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1d4>
    1ba2:	f89d 0008 	ldrb.w	r0, [sp, #8]
    1ba6:	b118      	cbz	r0, 1bb0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x28c>
    1ba8:	a901      	add	r1, sp, #4
    1baa:	2002      	movs	r0, #2
    1bac:	f7ff fe6e 	bl	188c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    1bb0:	4818      	ldr	r0, [pc, #96]	; (1c14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f0>)
    1bb2:	304a      	adds	r0, #74	; 0x4a
    1bb4:	b117      	cbz	r7, 1bbc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x298>
    1bb6:	8942      	ldrh	r2, [r0, #10]
    1bb8:	1c52      	adds	r2, r2, #1
    1bba:	8142      	strh	r2, [r0, #10]
    1bbc:	f1b9 0f00 	cmp.w	r9, #0
    1bc0:	d008      	beq.n	1bd4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b0>
    1bc2:	88c1      	ldrh	r1, [r0, #6]
    1bc4:	1c49      	adds	r1, r1, #1
    1bc6:	80c1      	strh	r1, [r0, #6]
    1bc8:	4811      	ldr	r0, [pc, #68]	; (1c10 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ec>)
    1bca:	70a5      	strb	r5, [r4, #2]
    1bcc:	303c      	adds	r0, #60	; 0x3c
    1bce:	f001 fa1d 	bl	300c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA>
    1bd2:	e002      	b.n	1bda <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b6>
    1bd4:	8901      	ldrh	r1, [r0, #8]
    1bd6:	1c49      	adds	r1, r1, #1
    1bd8:	8101      	strh	r1, [r0, #8]
    1bda:	9803      	ldr	r0, [sp, #12]
    1bdc:	b140      	cbz	r0, 1bf0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2cc>
    1bde:	f00b fbe1 	bl	d3a4 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    1be2:	f8da 1004 	ldr.w	r1, [sl, #4]
    1be6:	1c40      	adds	r0, r0, #1
    1be8:	7205      	strb	r5, [r0, #8]
    1bea:	220e      	movs	r2, #14
    1bec:	f00c fa97 	bl	e11e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    1bf0:	9801      	ldr	r0, [sp, #4]
    1bf2:	b130      	cbz	r0, 1c02 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2de>
    1bf4:	f8da 1004 	ldr.w	r1, [sl, #4]
    1bf8:	7205      	strb	r5, [r0, #8]
    1bfa:	222a      	movs	r2, #42	; 0x2a
    1bfc:	9801      	ldr	r0, [sp, #4]
    1bfe:	f00c fa8e 	bl	e11e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    1c02:	f1b8 0f00 	cmp.w	r8, #0
    1c06:	d001      	beq.n	1c0c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2e8>
    1c08:	f000 f864 	bl	1cd4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b0>
    1c0c:	e8bd 9fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1c10:	2000006c 	.word	0x2000006c
    1c14:	20000c38 	.word	0x20000c38
    1c18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1c1c:	4688      	mov	r8, r1
    1c1e:	4681      	mov	r9, r0
    1c20:	f7ff fed0 	bl	19c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa0>
    1c24:	4d29      	ldr	r5, [pc, #164]	; (1ccc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a8>)
    1c26:	4604      	mov	r4, r0
    1c28:	7828      	ldrb	r0, [r5, #0]
    1c2a:	2801      	cmp	r0, #1
    1c2c:	d004      	beq.n	1c38 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x314>
    1c2e:	f240 4175 	movw	r1, #1141	; 0x475
    1c32:	2027      	movs	r0, #39	; 0x27
    1c34:	f7fe ff16 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1c38:	7c20      	ldrb	r0, [r4, #16]
    1c3a:	2600      	movs	r6, #0
    1c3c:	2701      	movs	r7, #1
    1c3e:	b120      	cbz	r0, 1c4a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x326>
    1c40:	7426      	strb	r6, [r4, #16]
    1c42:	2100      	movs	r1, #0
    1c44:	2004      	movs	r0, #4
    1c46:	f7ff feaf 	bl	19a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>
    1c4a:	6a29      	ldr	r1, [r5, #32]
    1c4c:	7808      	ldrb	r0, [r1, #0]
    1c4e:	43c0      	mvns	r0, r0
    1c50:	0780      	lsls	r0, r0, #30
    1c52:	d109      	bne.n	1c68 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x344>
    1c54:	7da0      	ldrb	r0, [r4, #22]
    1c56:	bb88      	cbnz	r0, 1cbc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x398>
    1c58:	2002      	movs	r0, #2
    1c5a:	f7ff fea5 	bl	19a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>
    1c5e:	6a28      	ldr	r0, [r5, #32]
    1c60:	7800      	ldrb	r0, [r0, #0]
    1c62:	43c0      	mvns	r0, r0
    1c64:	0780      	lsls	r0, r0, #30
    1c66:	d029      	beq.n	1cbc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x398>
    1c68:	6a28      	ldr	r0, [r5, #32]
    1c6a:	7840      	ldrb	r0, [r0, #1]
    1c6c:	b110      	cbz	r0, 1c74 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x350>
    1c6e:	2002      	movs	r0, #2
    1c70:	75a0      	strb	r0, [r4, #22]
    1c72:	e000      	b.n	1c76 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x352>
    1c74:	75a7      	strb	r7, [r4, #22]
    1c76:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
    1c7a:	b198      	cbz	r0, 1ca4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x380>
    1c7c:	f7ff fe9c 	bl	19b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x94>
    1c80:	4913      	ldr	r1, [pc, #76]	; (1cd0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3ac>)
    1c82:	7a2d      	ldrb	r5, [r5, #8]
    1c84:	760e      	strb	r6, [r1, #24]
    1c86:	e9d4 2320 	ldrd	r2, r3, [r4, #128]	; 0x80
    1c8a:	e9c1 2304 	strd	r2, r3, [r1, #16]
    1c8e:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    1c92:	f00b fe91 	bl	d9b8 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    1c96:	4603      	mov	r3, r0
    1c98:	462a      	mov	r2, r5
    1c9a:	490d      	ldr	r1, [pc, #52]	; (1cd0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3ac>)
    1c9c:	4638      	mov	r0, r7
    1c9e:	9600      	str	r6, [sp, #0]
    1ca0:	f005 fe98 	bl	79d4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    1ca4:	ea38 0009 	bics.w	r0, r8, r9
    1ca8:	d004      	beq.n	1cb4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x390>
    1caa:	2100      	movs	r1, #0
    1cac:	4608      	mov	r0, r1
    1cae:	f7ff fe95 	bl	19dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb8>
    1cb2:	b128      	cbz	r0, 1cc0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x39c>
    1cb4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1cb8:	f000 b80c 	b.w	1cd4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b0>
    1cbc:	2003      	movs	r0, #3
    1cbe:	e7d7      	b.n	1c70 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34c>
    1cc0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1cc4:	2000      	movs	r0, #0
    1cc6:	f000 b8ef 	b.w	1ea8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x15c>
    1cca:	0000      	.short	0x0000
    1ccc:	2000006c 	.word	0x2000006c
    1cd0:	20000c38 	.word	0x20000c38
    1cd4:	b510      	push	{r4, lr}
    1cd6:	f005 ffeb 	bl	7cb0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    1cda:	f005 ff0f 	bl	7afc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    1cde:	4c0d      	ldr	r4, [pc, #52]	; (1d14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f0>)
    1ce0:	89e0      	ldrh	r0, [r4, #14]
    1ce2:	f7ff fe75 	bl	19d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xac>
    1ce6:	480c      	ldr	r0, [pc, #48]	; (1d18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f4>)
    1ce8:	7f00      	ldrb	r0, [r0, #28]
    1cea:	b158      	cbz	r0, 1d04 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3e0>
    1cec:	490a      	ldr	r1, [pc, #40]	; (1d18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f4>)
    1cee:	220e      	movs	r2, #14
    1cf0:	f101 000e 	add.w	r0, r1, #14
    1cf4:	f00e fcbb 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1cf8:	4807      	ldr	r0, [pc, #28]	; (1d18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f4>)
    1cfa:	2224      	movs	r2, #36	; 0x24
    1cfc:	4907      	ldr	r1, [pc, #28]	; (1d1c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f8>)
    1cfe:	301d      	adds	r0, #29
    1d00:	f00c fa21 	bl	e146 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    1d04:	69e2      	ldr	r2, [r4, #28]
    1d06:	7921      	ldrb	r1, [r4, #4]
    1d08:	7860      	ldrb	r0, [r4, #1]
    1d0a:	4790      	blx	r2
    1d0c:	2000      	movs	r0, #0
    1d0e:	7020      	strb	r0, [r4, #0]
    1d10:	bd10      	pop	{r4, pc}
    1d12:	0000      	.short	0x0000
    1d14:	2000006c 	.word	0x2000006c
    1d18:	20000c82 	.word	0x20000c82
    1d1c:	00001975 	.word	0x00001975
    1d20:	4808      	ldr	r0, [pc, #32]	; (1d44 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x420>)
    1d22:	b510      	push	{r4, lr}
    1d24:	7800      	ldrb	r0, [r0, #0]
    1d26:	2802      	cmp	r0, #2
    1d28:	d004      	beq.n	1d34 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x410>
    1d2a:	f240 214d 	movw	r1, #589	; 0x24d
    1d2e:	2027      	movs	r0, #39	; 0x27
    1d30:	f7fe fe98 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1d34:	4904      	ldr	r1, [pc, #16]	; (1d48 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x424>)
    1d36:	2001      	movs	r0, #1
    1d38:	7308      	strb	r0, [r1, #12]
    1d3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1d3e:	f7ff bfc9 	b.w	1cd4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b0>
    1d42:	0000      	.short	0x0000
    1d44:	2000006c 	.word	0x2000006c
    1d48:	20000c82 	.word	0x20000c82
    1d4c:	b430      	push	{r4, r5}
    1d4e:	4604      	mov	r4, r0
    1d50:	480c      	ldr	r0, [pc, #48]	; (1d84 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x38>)
    1d52:	7a00      	ldrb	r0, [r0, #8]
    1d54:	b10b      	cbz	r3, 1d5a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xe>
    1d56:	1d00      	adds	r0, r0, #4
    1d58:	b2c0      	uxtb	r0, r0
    1d5a:	b93a      	cbnz	r2, 1d6c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x20>
    1d5c:	28ff      	cmp	r0, #255	; 0xff
    1d5e:	d105      	bne.n	1d6c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x20>
    1d60:	f894 206b 	ldrb.w	r2, [r4, #107]	; 0x6b
    1d64:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
    1d68:	429a      	cmp	r2, r3
    1d6a:	d009      	beq.n	1d80 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x34>
    1d6c:	b121      	cbz	r1, 1d78 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2c>
    1d6e:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    1d72:	bc30      	pop	{r4, r5}
    1d74:	f006 ba90 	b.w	8298 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    1d78:	20ff      	movs	r0, #255	; 0xff
    1d7a:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    1d7e:	e7f8      	b.n	1d72 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x26>
    1d80:	bc30      	pop	{r4, r5}
    1d82:	4770      	bx	lr
    1d84:	2000006c 	.word	0x2000006c
    1d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1d8c:	4607      	mov	r7, r0
    1d8e:	f7ff fe19 	bl	19c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa0>
    1d92:	4c21      	ldr	r4, [pc, #132]	; (1e18 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xcc>)
    1d94:	4605      	mov	r5, r0
    1d96:	2601      	movs	r6, #1
    1d98:	6a61      	ldr	r1, [r4, #36]	; 0x24
    1d9a:	7808      	ldrb	r0, [r1, #0]
    1d9c:	f000 0003 	and.w	r0, r0, #3
    1da0:	2801      	cmp	r0, #1
    1da2:	d00c      	beq.n	1dbe <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x72>
    1da4:	2802      	cmp	r0, #2
    1da6:	d00a      	beq.n	1dbe <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x72>
    1da8:	2803      	cmp	r0, #3
    1daa:	d11b      	bne.n	1de4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x98>
    1dac:	742e      	strb	r6, [r5, #16]
    1dae:	89e0      	ldrh	r0, [r4, #14]
    1db0:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    1db4:	81e0      	strh	r0, [r4, #14]
    1db6:	2001      	movs	r0, #1
    1db8:	f7ff fdf6 	bl	19a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>
    1dbc:	e012      	b.n	1de4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x98>
    1dbe:	7848      	ldrb	r0, [r1, #1]
    1dc0:	b180      	cbz	r0, 1de4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x98>
    1dc2:	89e1      	ldrh	r1, [r4, #14]
    1dc4:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    1dc8:	81e1      	strh	r1, [r4, #14]
    1dca:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    1dcc:	2900      	cmp	r1, #0
    1dce:	d018      	beq.n	1e02 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xb6>
    1dd0:	28fb      	cmp	r0, #251	; 0xfb
    1dd2:	d818      	bhi.n	1e06 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xba>
    1dd4:	7960      	ldrb	r0, [r4, #5]
    1dd6:	b120      	cbz	r0, 1de2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x96>
    1dd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    1ddc:	2020      	movs	r0, #32
    1dde:	f7ff bdf7 	b.w	19d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xac>
    1de2:	703e      	strb	r6, [r7, #0]
    1de4:	7e28      	ldrb	r0, [r5, #24]
    1de6:	2801      	cmp	r0, #1
    1de8:	d012      	beq.n	1e10 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xc4>
    1dea:	762e      	strb	r6, [r5, #24]
    1dec:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1dee:	7840      	ldrb	r0, [r0, #1]
    1df0:	2800      	cmp	r0, #0
    1df2:	d006      	beq.n	1e02 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xb6>
    1df4:	e9f5 0120 	ldrd	r0, r1, [r5, #128]!	; 0x80
    1df8:	1c40      	adds	r0, r0, #1
    1dfa:	f141 0100 	adc.w	r1, r1, #0
    1dfe:	e9c5 0100 	strd	r0, r1, [r5]
    1e02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1e06:	7920      	ldrb	r0, [r4, #4]
    1e08:	f040 0010 	orr.w	r0, r0, #16
    1e0c:	7120      	strb	r0, [r4, #4]
    1e0e:	e7f8      	b.n	1e02 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xb6>
    1e10:	2000      	movs	r0, #0
    1e12:	7628      	strb	r0, [r5, #24]
    1e14:	e7ea      	b.n	1dec <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xa0>
    1e16:	0000      	.short	0x0000
    1e18:	2000006c 	.word	0x2000006c
    1e1c:	b570      	push	{r4, r5, r6, lr}
    1e1e:	4605      	mov	r5, r0
    1e20:	f7ff fdd0 	bl	19c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa0>
    1e24:	4604      	mov	r4, r0
    1e26:	7d80      	ldrb	r0, [r0, #22]
    1e28:	2800      	cmp	r0, #0
    1e2a:	d026      	beq.n	1e7a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x12e>
    1e2c:	2802      	cmp	r0, #2
    1e2e:	d10c      	bne.n	1e4a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xfe>
    1e30:	4817      	ldr	r0, [pc, #92]	; (1e90 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x144>)
    1e32:	4629      	mov	r1, r5
    1e34:	6b40      	ldr	r0, [r0, #52]	; 0x34
    1e36:	f00b fa44 	bl	d2c2 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    1e3a:	b1f8      	cbz	r0, 1e7c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x130>
    1e3c:	e9d4 011e 	ldrd	r0, r1, [r4, #120]	; 0x78
    1e40:	1c40      	adds	r0, r0, #1
    1e42:	f141 0100 	adc.w	r1, r1, #0
    1e46:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    1e4a:	2500      	movs	r5, #0
    1e4c:	75a5      	strb	r5, [r4, #22]
    1e4e:	7c60      	ldrb	r0, [r4, #17]
    1e50:	2601      	movs	r6, #1
    1e52:	b170      	cbz	r0, 1e72 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x126>
    1e54:	7465      	strb	r5, [r4, #17]
    1e56:	f7ff fb6f 	bl	1538 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    1e5a:	b190      	cbz	r0, 1e82 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x136>
    1e5c:	2100      	movs	r1, #0
    1e5e:	2008      	movs	r0, #8
    1e60:	f7ff fda2 	bl	19a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>
    1e64:	e9d4 011e 	ldrd	r0, r1, [r4, #120]	; 0x78
    1e68:	1c40      	adds	r0, r0, #1
    1e6a:	f141 0100 	adc.w	r1, r1, #0
    1e6e:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    1e72:	7de0      	ldrb	r0, [r4, #23]
    1e74:	2801      	cmp	r0, #1
    1e76:	d009      	beq.n	1e8c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x140>
    1e78:	75e6      	strb	r6, [r4, #23]
    1e7a:	bd70      	pop	{r4, r5, r6, pc}
    1e7c:	f240 31e3 	movw	r1, #995	; 0x3e3
    1e80:	e001      	b.n	1e86 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x13a>
    1e82:	f240 31fa 	movw	r1, #1018	; 0x3fa
    1e86:	2027      	movs	r0, #39	; 0x27
    1e88:	f7fe fdec 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1e8c:	75e5      	strb	r5, [r4, #23]
    1e8e:	bd70      	pop	{r4, r5, r6, pc}
    1e90:	2000006c 	.word	0x2000006c
    1e94:	4803      	ldr	r0, [pc, #12]	; (1ea4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x158>)
    1e96:	7800      	ldrb	r0, [r0, #0]
    1e98:	2800      	cmp	r0, #0
    1e9a:	d001      	beq.n	1ea0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x154>
    1e9c:	f7ff bf1a 	b.w	1cd4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b0>
    1ea0:	4770      	bx	lr
    1ea2:	0000      	.short	0x0000
    1ea4:	2000006c 	.word	0x2000006c
    1ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1eac:	4607      	mov	r7, r0
    1eae:	f7ff fd83 	bl	19b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x94>
    1eb2:	4680      	mov	r8, r0
    1eb4:	f7ff fd86 	bl	19c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa0>
    1eb8:	4c17      	ldr	r4, [pc, #92]	; (1f18 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1cc>)
    1eba:	4605      	mov	r5, r0
    1ebc:	463a      	mov	r2, r7
    1ebe:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    1ec0:	6260      	str	r0, [r4, #36]	; 0x24
    1ec2:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    1ec6:	2101      	movs	r1, #1
    1ec8:	4640      	mov	r0, r8
    1eca:	f7ff ff3f 	bl	1d4c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT>
    1ece:	f895 0023 	ldrb.w	r0, [r5, #35]	; 0x23
    1ed2:	2600      	movs	r6, #0
    1ed4:	b168      	cbz	r0, 1ef2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1a6>
    1ed6:	6b20      	ldr	r0, [r4, #48]	; 0x30
    1ed8:	f006 f914 	bl	8104 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    1edc:	480f      	ldr	r0, [pc, #60]	; (1f1c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1d0>)
    1ede:	7606      	strb	r6, [r0, #24]
    1ee0:	e9d5 1220 	ldrd	r1, r2, [r5, #128]	; 0x80
    1ee4:	e9c0 1204 	strd	r1, r2, [r0, #16]
    1ee8:	6b21      	ldr	r1, [r4, #48]	; 0x30
    1eea:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1eec:	f005 fdc4 	bl	7a78 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    1ef0:	e004      	b.n	1efc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1b0>
    1ef2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1ef4:	f006 f906 	bl	8104 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    1ef8:	f005 fe00 	bl	7afc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    1efc:	b917      	cbnz	r7, 1f04 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1b8>
    1efe:	4630      	mov	r0, r6
    1f00:	f005 ffcc 	bl	7e9c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    1f04:	2100      	movs	r1, #0
    1f06:	f898 206a 	ldrb.w	r2, [r8, #106]	; 0x6a
    1f0a:	4608      	mov	r0, r1
    1f0c:	f006 f982 	bl	8214 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    1f10:	2002      	movs	r0, #2
    1f12:	7020      	strb	r0, [r4, #0]
    1f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1f18:	2000006c 	.word	0x2000006c
    1f1c:	20000c38 	.word	0x20000c38
    1f20:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    1f24:	4604      	mov	r4, r0
    1f26:	f7ff fd4d 	bl	19c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa0>
    1f2a:	4605      	mov	r5, r0
    1f2c:	f7ff fd44 	bl	19b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x94>
    1f30:	f04f 0800 	mov.w	r8, #0
    1f34:	f88d 8000 	strb.w	r8, [sp]
    1f38:	4606      	mov	r6, r0
    1f3a:	f8df 9164 	ldr.w	r9, [pc, #356]	; 20a0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x354>
    1f3e:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    1f42:	4622      	mov	r2, r4
    1f44:	4641      	mov	r1, r8
    1f46:	f7ff ff01 	bl	1d4c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT>
    1f4a:	7da8      	ldrb	r0, [r5, #22]
    1f4c:	2701      	movs	r7, #1
    1f4e:	f1a9 0420 	sub.w	r4, r9, #32
    1f52:	b140      	cbz	r0, 1f66 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x21a>
    1f54:	2801      	cmp	r0, #1
    1f56:	d01f      	beq.n	1f98 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x24c>
    1f58:	2802      	cmp	r0, #2
    1f5a:	d030      	beq.n	1fbe <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x272>
    1f5c:	2803      	cmp	r0, #3
    1f5e:	d03c      	beq.n	1fda <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x28e>
    1f60:	f240 21ff 	movw	r1, #767	; 0x2ff
    1f64:	e058      	b.n	2018 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2cc>
    1f66:	79a0      	ldrb	r0, [r4, #6]
    1f68:	2150      	movs	r1, #80	; 0x50
    1f6a:	f8ad 0004 	strh.w	r0, [sp, #4]
    1f6e:	5388      	strh	r0, [r1, r6]
    1f70:	4648      	mov	r0, r9
    1f72:	f7ff fb0b 	bl	158c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    1f76:	b128      	cbz	r0, 1f84 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x238>
    1f78:	2080      	movs	r0, #128	; 0x80
    1f7a:	6a21      	ldr	r1, [r4, #32]
    1f7c:	f7ff fd14 	bl	19a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>
    1f80:	746f      	strb	r7, [r5, #17]
    1f82:	e02e      	b.n	1fe2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x296>
    1f84:	466a      	mov	r2, sp
    1f86:	a901      	add	r1, sp, #4
    1f88:	6b60      	ldr	r0, [r4, #52]	; 0x34
    1f8a:	f00b fd2d 	bl	d9e8 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    1f8e:	6220      	str	r0, [r4, #32]
    1f90:	b110      	cbz	r0, 1f98 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x24c>
    1f92:	f895 105d 	ldrb.w	r1, [r5, #93]	; 0x5d
    1f96:	b111      	cbz	r1, 1f9e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x252>
    1f98:	4842      	ldr	r0, [pc, #264]	; (20a4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x358>)
    1f9a:	6220      	str	r0, [r4, #32]
    1f9c:	e021      	b.n	1fe2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x296>
    1f9e:	f89d 1000 	ldrb.w	r1, [sp]
    1fa2:	b931      	cbnz	r1, 1fb2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x266>
    1fa4:	f8a0 8000 	strh.w	r8, [r0]
    1fa8:	f880 8002 	strb.w	r8, [r0, #2]
    1fac:	2101      	movs	r1, #1
    1fae:	f00c f883 	bl	e0b8 <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    1fb2:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    1fb6:	6a20      	ldr	r0, [r4, #32]
    1fb8:	f00c f818 	bl	dfec <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI>
    1fbc:	e011      	b.n	1fe2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x296>
    1fbe:	f8b6 0050 	ldrh.w	r0, [r6, #80]	; 0x50
    1fc2:	f8ad 0004 	strh.w	r0, [sp, #4]
    1fc6:	466a      	mov	r2, sp
    1fc8:	a901      	add	r1, sp, #4
    1fca:	6b60      	ldr	r0, [r4, #52]	; 0x34
    1fcc:	f00b fd0c 	bl	d9e8 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    1fd0:	6220      	str	r0, [r4, #32]
    1fd2:	b930      	cbnz	r0, 1fe2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x296>
    1fd4:	f240 21e9 	movw	r1, #745	; 0x2e9
    1fd8:	e01e      	b.n	2018 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2cc>
    1fda:	4648      	mov	r0, r9
    1fdc:	f7ff fad6 	bl	158c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    1fe0:	b1c0      	cbz	r0, 2014 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2c8>
    1fe2:	6a20      	ldr	r0, [r4, #32]
    1fe4:	2308      	movs	r3, #8
    1fe6:	7801      	ldrb	r1, [r0, #0]
    1fe8:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
    1fec:	7001      	strb	r1, [r0, #0]
    1fee:	7dea      	ldrb	r2, [r5, #23]
    1ff0:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
    1ff4:	4311      	orrs	r1, r2
    1ff6:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
    1ffa:	7001      	strb	r1, [r0, #0]
    1ffc:	7e2a      	ldrb	r2, [r5, #24]
    1ffe:	2304      	movs	r3, #4
    2000:	ea03 0282 	and.w	r2, r3, r2, lsl #2
    2004:	4311      	orrs	r1, r2
    2006:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    200a:	7001      	strb	r1, [r0, #0]
    200c:	43c9      	mvns	r1, r1
    200e:	0789      	lsls	r1, r1, #30
    2010:	d005      	beq.n	201e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2d2>
    2012:	e007      	b.n	2024 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2d8>
    2014:	f240 21f2 	movw	r1, #754	; 0x2f2
    2018:	2027      	movs	r0, #39	; 0x27
    201a:	f7fe fd23 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    201e:	78c0      	ldrb	r0, [r0, #3]
    2020:	2802      	cmp	r0, #2
    2022:	d00f      	beq.n	2044 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2f8>
    2024:	6b60      	ldr	r0, [r4, #52]	; 0x34
    2026:	f00b fa63 	bl	d4f0 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    202a:	b108      	cbz	r0, 2030 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2e4>
    202c:	2101      	movs	r1, #1
    202e:	e00a      	b.n	2046 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2fa>
    2030:	6a20      	ldr	r0, [r4, #32]
    2032:	7800      	ldrb	r0, [r0, #0]
    2034:	43c0      	mvns	r0, r0
    2036:	0780      	lsls	r0, r0, #30
    2038:	d004      	beq.n	2044 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2f8>
    203a:	f7ff fa65 	bl	1508 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    203e:	f080 0101 	eor.w	r1, r0, #1
    2042:	e000      	b.n	2046 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2fa>
    2044:	2100      	movs	r1, #0
    2046:	6a20      	ldr	r0, [r4, #32]
    2048:	7802      	ldrb	r2, [r0, #0]
    204a:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    204e:	7001      	strb	r1, [r0, #0]
    2050:	f895 1022 	ldrb.w	r1, [r5, #34]	; 0x22
    2054:	b181      	cbz	r1, 2078 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x32c>
    2056:	7841      	ldrb	r1, [r0, #1]
    2058:	b171      	cbz	r1, 2078 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x32c>
    205a:	6b20      	ldr	r0, [r4, #48]	; 0x30
    205c:	f006 f852 	bl	8104 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    2060:	4810      	ldr	r0, [pc, #64]	; (20a4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x358>)
    2062:	3828      	subs	r0, #40	; 0x28
    2064:	7607      	strb	r7, [r0, #24]
    2066:	e9d5 121e 	ldrd	r1, r2, [r5, #120]	; 0x78
    206a:	e9c0 1204 	strd	r1, r2, [r0, #16]
    206e:	6a21      	ldr	r1, [r4, #32]
    2070:	6b20      	ldr	r0, [r4, #48]	; 0x30
    2072:	f005 fd01 	bl	7a78 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    2076:	e003      	b.n	2080 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x334>
    2078:	f006 f844 	bl	8104 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    207c:	f005 fd3e 	bl	7afc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    2080:	f896 206b 	ldrb.w	r2, [r6, #107]	; 0x6b
    2084:	2101      	movs	r1, #1
    2086:	2000      	movs	r0, #0
    2088:	f006 f8c4 	bl	8214 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    208c:	70e7      	strb	r7, [r4, #3]
    208e:	6a20      	ldr	r0, [r4, #32]
    2090:	8801      	ldrh	r1, [r0, #0]
    2092:	8221      	strh	r1, [r4, #16]
    2094:	7880      	ldrb	r0, [r0, #2]
    2096:	74a0      	strb	r0, [r4, #18]
    2098:	7027      	strb	r7, [r4, #0]
    209a:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    209e:	0000      	.short	0x0000
    20a0:	2000008c 	.word	0x2000008c
    20a4:	20000c60 	.word	0x20000c60
    20a8:	00001d21 	.word	0x00001d21
    20ac:	00001a71 	.word	0x00001a71
    20b0:	00001c19 	.word	0x00001c19
    20b4:	00001e95 	.word	0x00001e95

000020b8 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    20b8:	4800      	ldr	r0, [pc, #0]	; (20bc <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    20ba:	4770      	bx	lr
    20bc:	200016f5 	.word	0x200016f5

000020c0 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ>:
    20c0:	b570      	push	{r4, r5, r6, lr}
    20c2:	2600      	movs	r6, #0
    20c4:	4635      	mov	r5, r6
    20c6:	4c0f      	ldr	r4, [pc, #60]	; (2104 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x44>)
    20c8:	e018      	b.n	20fc <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x3c>
    20ca:	1960      	adds	r0, r4, r5
    20cc:	f890 213b 	ldrb.w	r2, [r0, #315]	; 0x13b
    20d0:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    20d4:	2a01      	cmp	r2, #1
    20d6:	d002      	beq.n	20de <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x1e>
    20d8:	f890 014b 	ldrb.w	r0, [r0, #331]	; 0x14b
    20dc:	b160      	cbz	r0, 20f8 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x38>
    20de:	480a      	ldr	r0, [pc, #40]	; (2108 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x48>)
    20e0:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    20e4:	1c73      	adds	r3, r6, #1
    20e6:	5585      	strb	r5, [r0, r6]
    20e8:	f891 2153 	ldrb.w	r2, [r1, #339]	; 0x153
    20ec:	4630      	mov	r0, r6
    20ee:	b2de      	uxtb	r6, r3
    20f0:	f501 71aa 	add.w	r1, r1, #340	; 0x154
    20f4:	f006 f9b4 	bl	8460 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    20f8:	1c6d      	adds	r5, r5, #1
    20fa:	b2ed      	uxtb	r5, r5
    20fc:	78a0      	ldrb	r0, [r4, #2]
    20fe:	42a8      	cmp	r0, r5
    2100:	d8e3      	bhi.n	20ca <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0xa>
    2102:	bd70      	pop	{r4, r5, r6, pc}
    2104:	20001522 	.word	0x20001522
    2108:	20000334 	.word	0x20000334

0000210c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    210c:	4904      	ldr	r1, [pc, #16]	; (2120 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    210e:	788a      	ldrb	r2, [r1, #2]
    2110:	4282      	cmp	r2, r0
    2112:	d903      	bls.n	211c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    2114:	4408      	add	r0, r1
    2116:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    211a:	4770      	bx	lr
    211c:	2000      	movs	r0, #0
    211e:	4770      	bx	lr
    2120:	20001522 	.word	0x20001522

00002124 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    2124:	4904      	ldr	r1, [pc, #16]	; (2138 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    2126:	788a      	ldrb	r2, [r1, #2]
    2128:	4282      	cmp	r2, r0
    212a:	d903      	bls.n	2134 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    212c:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    2130:	3083      	adds	r0, #131	; 0x83
    2132:	4770      	bx	lr
    2134:	2000      	movs	r0, #0
    2136:	4770      	bx	lr
    2138:	20001522 	.word	0x20001522

0000213c <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    213c:	4a05      	ldr	r2, [pc, #20]	; (2154 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    213e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2142:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    2146:	6802      	ldr	r2, [r0, #0]
    2148:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
    214c:	8880      	ldrh	r0, [r0, #4]
    214e:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
    2152:	4770      	bx	lr
    2154:	20001522 	.word	0x20001522

00002158 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>:
    2158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    215c:	4607      	mov	r7, r0
    215e:	2400      	movs	r4, #0
    2160:	4d10      	ldr	r5, [pc, #64]	; (21a4 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x4c>)
    2162:	e019      	b.n	2198 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x40>
    2164:	4620      	mov	r0, r4
    2166:	f7ff ffdd 	bl	2124 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    216a:	0003      	movs	r3, r0
    216c:	d012      	beq.n	2194 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x3c>
    216e:	1928      	adds	r0, r5, r4
    2170:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    2174:	b970      	cbnz	r0, 2194 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x3c>
    2176:	eb04 0044 	add.w	r0, r4, r4, lsl #1
    217a:	eb05 0640 	add.w	r6, r5, r0, lsl #1
    217e:	f206 160b 	addw	r6, r6, #267	; 0x10b
    2182:	463a      	mov	r2, r7
    2184:	4631      	mov	r1, r6
    2186:	4618      	mov	r0, r3
    2188:	f00b fbb1 	bl	d8ee <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    218c:	4630      	mov	r0, r6
    218e:	4621      	mov	r1, r4
    2190:	f7ff ffd4 	bl	213c <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    2194:	1c64      	adds	r4, r4, #1
    2196:	b2e4      	uxtb	r4, r4
    2198:	78a8      	ldrb	r0, [r5, #2]
    219a:	42a0      	cmp	r0, r4
    219c:	d8e2      	bhi.n	2164 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0xc>
    219e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    21a2:	0000      	.short	0x0000
    21a4:	20001522 	.word	0x20001522

000021a8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    21a8:	4904      	ldr	r1, [pc, #16]	; (21bc <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    21aa:	788a      	ldrb	r2, [r1, #2]
    21ac:	4282      	cmp	r2, r0
    21ae:	d903      	bls.n	21b8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    21b0:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    21b4:	1cc0      	adds	r0, r0, #3
    21b6:	4770      	bx	lr
    21b8:	2000      	movs	r0, #0
    21ba:	4770      	bx	lr
    21bc:	20001522 	.word	0x20001522

000021c0 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA>:
    21c0:	4908      	ldr	r1, [pc, #32]	; (21e4 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x24>)
    21c2:	788a      	ldrb	r2, [r1, #2]
    21c4:	4282      	cmp	r2, r0
    21c6:	d903      	bls.n	21d0 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x10>
    21c8:	180a      	adds	r2, r1, r0
    21ca:	f892 2143 	ldrb.w	r2, [r2, #323]	; 0x143
    21ce:	b10a      	cbz	r2, 21d4 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x14>
    21d0:	2000      	movs	r0, #0
    21d2:	4770      	bx	lr
    21d4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    21d8:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    21dc:	f200 100b 	addw	r0, r0, #267	; 0x10b
    21e0:	4770      	bx	lr
    21e2:	0000      	.short	0x0000
    21e4:	20001522 	.word	0x20001522

000021e8 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    21e8:	b510      	push	{r4, lr}
    21ea:	f240 12d3 	movw	r2, #467	; 0x1d3
    21ee:	2100      	movs	r1, #0
    21f0:	4808      	ldr	r0, [pc, #32]	; (2214 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
    21f2:	f00e fab6 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    21f6:	2208      	movs	r2, #8
    21f8:	21ff      	movs	r1, #255	; 0xff
    21fa:	4807      	ldr	r0, [pc, #28]	; (2218 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    21fc:	f00e fab1 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    2200:	4805      	ldr	r0, [pc, #20]	; (2218 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    2202:	2100      	movs	r1, #0
    2204:	1f00      	subs	r0, r0, #4
    2206:	7001      	strb	r1, [r0, #0]
    2208:	7041      	strb	r1, [r0, #1]
    220a:	f44f 7161 	mov.w	r1, #900	; 0x384
    220e:	8041      	strh	r1, [r0, #2]
    2210:	bd10      	pop	{r4, pc}
    2212:	0000      	.short	0x0000
    2214:	20001522 	.word	0x20001522
    2218:	20000334 	.word	0x20000334

0000221c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    221c:	4b0b      	ldr	r3, [pc, #44]	; (224c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    221e:	b510      	push	{r4, lr}
    2220:	789c      	ldrb	r4, [r3, #2]
    2222:	4284      	cmp	r4, r0
    2224:	d90f      	bls.n	2246 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2a>
    2226:	4418      	add	r0, r3
    2228:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    222c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    2230:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
    2234:	700b      	strb	r3, [r1, #0]
    2236:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    223a:	6011      	str	r1, [r2, #0]
    223c:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
    2240:	8090      	strh	r0, [r2, #4]
    2242:	2001      	movs	r0, #1
    2244:	bd10      	pop	{r4, pc}
    2246:	2000      	movs	r0, #0
    2248:	bd10      	pop	{r4, pc}
    224a:	0000      	.short	0x0000
    224c:	20001522 	.word	0x20001522

00002250 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
    2250:	4907      	ldr	r1, [pc, #28]	; (2270 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
    2252:	788a      	ldrb	r2, [r1, #2]
    2254:	4282      	cmp	r2, r0
    2256:	d909      	bls.n	226c <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x1c>
    2258:	4408      	add	r0, r1
    225a:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    225e:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    2262:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    2266:	f000 0001 	and.w	r0, r0, #1
    226a:	4770      	bx	lr
    226c:	2000      	movs	r0, #0
    226e:	4770      	bx	lr
    2270:	20001522 	.word	0x20001522

00002274 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    2274:	4801      	ldr	r0, [pc, #4]	; (227c <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    2276:	8840      	ldrh	r0, [r0, #2]
    2278:	4770      	bx	lr
    227a:	0000      	.short	0x0000
    227c:	20000330 	.word	0x20000330

00002280 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A>:
    2280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2284:	4614      	mov	r4, r2
    2286:	2501      	movs	r5, #1
    2288:	2200      	movs	r2, #0
    228a:	461f      	mov	r7, r3
    228c:	462e      	mov	r6, r5
    228e:	7022      	strb	r2, [r4, #0]
    2290:	f000 f8f6 	bl	2480 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    2294:	2810      	cmp	r0, #16
    2296:	d024      	beq.n	22e2 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x62>
    2298:	f8df 8054 	ldr.w	r8, [pc, #84]	; 22f0 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x70>
    229c:	eb08 01c0 	add.w	r1, r8, r0, lsl #3
    22a0:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    22a4:	f001 0101 	and.w	r1, r1, #1
    22a8:	7021      	strb	r1, [r4, #0]
    22aa:	f000 f8b9 	bl	2420 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    22ae:	4604      	mov	r4, r0
    22b0:	2810      	cmp	r0, #16
    22b2:	d016      	beq.n	22e2 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x62>
    22b4:	b107      	cbz	r7, 22b8 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x38>
    22b6:	703c      	strb	r4, [r7, #0]
    22b8:	4620      	mov	r0, r4
    22ba:	f7ff ff75 	bl	21a8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    22be:	b180      	cbz	r0, 22e2 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x62>
    22c0:	f898 1002 	ldrb.w	r1, [r8, #2]
    22c4:	4640      	mov	r0, r8
    22c6:	42a1      	cmp	r1, r4
    22c8:	d903      	bls.n	22d2 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x52>
    22ca:	1901      	adds	r1, r0, r4
    22cc:	f891 614b 	ldrb.w	r6, [r1, #331]	; 0x14b
    22d0:	e000      	b.n	22d4 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x54>
    22d2:	2600      	movs	r6, #0
    22d4:	eb08 0004 	add.w	r0, r8, r4
    22d8:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    22dc:	2801      	cmp	r0, #1
    22de:	d004      	beq.n	22ea <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x6a>
    22e0:	2500      	movs	r5, #0
    22e2:	ea45 0006 	orr.w	r0, r5, r6
    22e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    22ea:	2501      	movs	r5, #1
    22ec:	e7f9      	b.n	22e2 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x62>
    22ee:	0000      	.short	0x0000
    22f0:	20001522 	.word	0x20001522

000022f4 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
    22f4:	b570      	push	{r4, r5, r6, lr}
    22f6:	460d      	mov	r5, r1
    22f8:	4606      	mov	r6, r0
    22fa:	f000 f8c1 	bl	2480 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    22fe:	4c10      	ldr	r4, [pc, #64]	; (2340 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x4c>)
    2300:	2810      	cmp	r0, #16
    2302:	d007      	beq.n	2314 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    2304:	eb04 01c0 	add.w	r1, r4, r0, lsl #3
    2308:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    230c:	07c9      	lsls	r1, r1, #31
    230e:	d001      	beq.n	2314 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    2310:	2001      	movs	r0, #1
    2312:	bd70      	pop	{r4, r5, r6, pc}
    2314:	7861      	ldrb	r1, [r4, #1]
    2316:	2908      	cmp	r1, #8
    2318:	d210      	bcs.n	233c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x48>
    231a:	2810      	cmp	r0, #16
    231c:	d008      	beq.n	2330 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3c>
    231e:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    2322:	2101      	movs	r1, #1
    2324:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
    2328:	7860      	ldrb	r0, [r4, #1]
    232a:	1c40      	adds	r0, r0, #1
    232c:	7060      	strb	r0, [r4, #1]
    232e:	e7ef      	b.n	2310 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x1c>
    2330:	2201      	movs	r2, #1
    2332:	4629      	mov	r1, r5
    2334:	4630      	mov	r0, r6
    2336:	f000 f887 	bl	2448 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    233a:	e7f5      	b.n	2328 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x34>
    233c:	2000      	movs	r0, #0
    233e:	bd70      	pop	{r4, r5, r6, pc}
    2340:	20001522 	.word	0x20001522

00002344 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
    2344:	b570      	push	{r4, r5, r6, lr}
    2346:	4d0b      	ldr	r5, [pc, #44]	; (2374 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x30>)
    2348:	7828      	ldrb	r0, [r5, #0]
    234a:	1e40      	subs	r0, r0, #1
    234c:	b244      	sxtb	r4, r0
    234e:	e00a      	b.n	2366 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x22>
    2350:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    2354:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    2358:	07c0      	lsls	r0, r0, #31
    235a:	d002      	beq.n	2362 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x1e>
    235c:	b2e0      	uxtb	r0, r4
    235e:	f000 f8ed 	bl	253c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1c0>
    2362:	1e64      	subs	r4, r4, #1
    2364:	b264      	sxtb	r4, r4
    2366:	2c00      	cmp	r4, #0
    2368:	daf2      	bge.n	2350 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xc>
    236a:	4903      	ldr	r1, [pc, #12]	; (2378 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x34>)
    236c:	2000      	movs	r0, #0
    236e:	7048      	strb	r0, [r1, #1]
    2370:	bd70      	pop	{r4, r5, r6, pc}
    2372:	0000      	.short	0x0000
    2374:	20001522 	.word	0x20001522
    2378:	20000330 	.word	0x20000330

0000237c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
    237c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2380:	2400      	movs	r4, #0
    2382:	4625      	mov	r5, r4
    2384:	4e18      	ldr	r6, [pc, #96]	; (23e8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x6c>)
    2386:	e029      	b.n	23dc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x60>
    2388:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
    238c:	f897 015a 	ldrb.w	r0, [r7, #346]	; 0x15a
    2390:	07c0      	lsls	r0, r0, #31
    2392:	d021      	beq.n	23d8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    2394:	4628      	mov	r0, r5
    2396:	f000 f843 	bl	2420 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    239a:	4603      	mov	r3, r0
    239c:	f7ff ff04 	bl	21a8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    23a0:	4601      	mov	r1, r0
    23a2:	2000      	movs	r0, #0
    23a4:	2b10      	cmp	r3, #16
    23a6:	d009      	beq.n	23bc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    23a8:	18f2      	adds	r2, r6, r3
    23aa:	f892 c13b 	ldrb.w	ip, [r2, #315]	; 0x13b
    23ae:	f1bc 0f01 	cmp.w	ip, #1
    23b2:	d002      	beq.n	23ba <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x3e>
    23b4:	f892 214b 	ldrb.w	r2, [r2, #331]	; 0x14b
    23b8:	b102      	cbz	r2, 23bc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    23ba:	2001      	movs	r0, #1
    23bc:	1e40      	subs	r0, r0, #1
    23be:	4201      	tst	r1, r0
    23c0:	d10a      	bne.n	23d8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    23c2:	480a      	ldr	r0, [pc, #40]	; (23ec <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>)
    23c4:	f507 71aa 	add.w	r1, r7, #340	; 0x154
    23c8:	5503      	strb	r3, [r0, r4]
    23ca:	4620      	mov	r0, r4
    23cc:	1c64      	adds	r4, r4, #1
    23ce:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
    23d2:	b2e4      	uxtb	r4, r4
    23d4:	f006 f844 	bl	8460 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    23d8:	1c6d      	adds	r5, r5, #1
    23da:	b2ed      	uxtb	r5, r5
    23dc:	7830      	ldrb	r0, [r6, #0]
    23de:	42a8      	cmp	r0, r5
    23e0:	d8d2      	bhi.n	2388 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc>
    23e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    23e6:	0000      	.short	0x0000
    23e8:	20001522 	.word	0x20001522
    23ec:	20000334 	.word	0x20000334
    23f0:	4602      	mov	r2, r0
    23f2:	4809      	ldr	r0, [pc, #36]	; (2418 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9c>)
    23f4:	b510      	push	{r4, lr}
    23f6:	7800      	ldrb	r0, [r0, #0]
    23f8:	460b      	mov	r3, r1
    23fa:	b158      	cbz	r0, 2414 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    23fc:	4807      	ldr	r0, [pc, #28]	; (241c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    23fe:	7881      	ldrb	r1, [r0, #2]
    2400:	b141      	cbz	r1, 2414 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    2402:	b10b      	cbz	r3, 2408 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    2404:	1cc0      	adds	r0, r0, #3
    2406:	e001      	b.n	240c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x90>
    2408:	4804      	ldr	r0, [pc, #16]	; (241c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    240a:	3083      	adds	r0, #131	; 0x83
    240c:	f005 fa3c 	bl	7888 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    2410:	2001      	movs	r0, #1
    2412:	bd10      	pop	{r4, pc}
    2414:	2000      	movs	r0, #0
    2416:	bd10      	pop	{r4, pc}
    2418:	20000330 	.word	0x20000330
    241c:	20001522 	.word	0x20001522
    2420:	4908      	ldr	r1, [pc, #32]	; (2444 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc8>)
    2422:	b510      	push	{r4, lr}
    2424:	4603      	mov	r3, r0
    2426:	2000      	movs	r0, #0
    2428:	788a      	ldrb	r2, [r1, #2]
    242a:	e006      	b.n	243a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xbe>
    242c:	180c      	adds	r4, r1, r0
    242e:	f894 4103 	ldrb.w	r4, [r4, #259]	; 0x103
    2432:	429c      	cmp	r4, r3
    2434:	d004      	beq.n	2440 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc4>
    2436:	1c40      	adds	r0, r0, #1
    2438:	b2c0      	uxtb	r0, r0
    243a:	4282      	cmp	r2, r0
    243c:	d8f6      	bhi.n	242c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xb0>
    243e:	2010      	movs	r0, #16
    2440:	bd10      	pop	{r4, pc}
    2442:	0000      	.short	0x0000
    2444:	20001522 	.word	0x20001522
    2448:	b570      	push	{r4, r5, r6, lr}
    244a:	4b0c      	ldr	r3, [pc, #48]	; (247c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x100>)
    244c:	4604      	mov	r4, r0
    244e:	7818      	ldrb	r0, [r3, #0]
    2450:	1c45      	adds	r5, r0, #1
    2452:	701d      	strb	r5, [r3, #0]
    2454:	2810      	cmp	r0, #16
    2456:	d303      	bcc.n	2460 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe4>
    2458:	2146      	movs	r1, #70	; 0x46
    245a:	2028      	movs	r0, #40	; 0x28
    245c:	f7fe fb02 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2460:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    2464:	680d      	ldr	r5, [r1, #0]
    2466:	f8c3 5154 	str.w	r5, [r3, #340]	; 0x154
    246a:	8889      	ldrh	r1, [r1, #4]
    246c:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
    2470:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
    2474:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    2478:	bd70      	pop	{r4, r5, r6, pc}
    247a:	0000      	.short	0x0000
    247c:	20001522 	.word	0x20001522
    2480:	b5f0      	push	{r4, r5, r6, r7, lr}
    2482:	4c1a      	ldr	r4, [pc, #104]	; (24ec <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x170>)
    2484:	4603      	mov	r3, r0
    2486:	2000      	movs	r0, #0
    2488:	7825      	ldrb	r5, [r4, #0]
    248a:	e02a      	b.n	24e2 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x166>
    248c:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    2490:	780f      	ldrb	r7, [r1, #0]
    2492:	f892 c154 	ldrb.w	ip, [r2, #340]	; 0x154
    2496:	f892 6153 	ldrb.w	r6, [r2, #339]	; 0x153
    249a:	ea87 070c 	eor.w	r7, r7, ip
    249e:	405e      	eors	r6, r3
    24a0:	443e      	add	r6, r7
    24a2:	784f      	ldrb	r7, [r1, #1]
    24a4:	f892 c155 	ldrb.w	ip, [r2, #341]	; 0x155
    24a8:	ea87 070c 	eor.w	r7, r7, ip
    24ac:	443e      	add	r6, r7
    24ae:	788f      	ldrb	r7, [r1, #2]
    24b0:	f892 c156 	ldrb.w	ip, [r2, #342]	; 0x156
    24b4:	ea87 070c 	eor.w	r7, r7, ip
    24b8:	443e      	add	r6, r7
    24ba:	78cf      	ldrb	r7, [r1, #3]
    24bc:	f892 c157 	ldrb.w	ip, [r2, #343]	; 0x157
    24c0:	ea87 070c 	eor.w	r7, r7, ip
    24c4:	443e      	add	r6, r7
    24c6:	790f      	ldrb	r7, [r1, #4]
    24c8:	f892 c158 	ldrb.w	ip, [r2, #344]	; 0x158
    24cc:	f892 2159 	ldrb.w	r2, [r2, #345]	; 0x159
    24d0:	ea87 070c 	eor.w	r7, r7, ip
    24d4:	443e      	add	r6, r7
    24d6:	794f      	ldrb	r7, [r1, #5]
    24d8:	4057      	eors	r7, r2
    24da:	42f7      	cmn	r7, r6
    24dc:	d004      	beq.n	24e8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x16c>
    24de:	1c40      	adds	r0, r0, #1
    24e0:	b2c0      	uxtb	r0, r0
    24e2:	4285      	cmp	r5, r0
    24e4:	d8d2      	bhi.n	248c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x110>
    24e6:	2010      	movs	r0, #16
    24e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    24ea:	0000      	.short	0x0000
    24ec:	20001522 	.word	0x20001522
    24f0:	b570      	push	{r4, r5, r6, lr}
    24f2:	4605      	mov	r5, r0
    24f4:	f7ff ff94 	bl	2420 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    24f8:	2810      	cmp	r0, #16
    24fa:	d11c      	bne.n	2536 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
    24fc:	4c0e      	ldr	r4, [pc, #56]	; (2538 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1bc>)
    24fe:	7820      	ldrb	r0, [r4, #0]
    2500:	1e40      	subs	r0, r0, #1
    2502:	b2c0      	uxtb	r0, r0
    2504:	7020      	strb	r0, [r4, #0]
    2506:	42a8      	cmp	r0, r5
    2508:	d015      	beq.n	2536 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
    250a:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    250e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    2512:	f502 7080 	add.w	r0, r2, #256	; 0x100
    2516:	f8d2 2153 	ldr.w	r2, [r2, #339]	; 0x153
    251a:	f8c1 2153 	str.w	r2, [r1, #339]	; 0x153
    251e:	f8d0 0057 	ldr.w	r0, [r0, #87]	; 0x57
    2522:	f8c1 0157 	str.w	r0, [r1, #343]	; 0x157
    2526:	7820      	ldrb	r0, [r4, #0]
    2528:	f7ff ff7a 	bl	2420 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    252c:	2810      	cmp	r0, #16
    252e:	d002      	beq.n	2536 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
    2530:	4420      	add	r0, r4
    2532:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
    2536:	bd70      	pop	{r4, r5, r6, pc}
    2538:	20001522 	.word	0x20001522
    253c:	4905      	ldr	r1, [pc, #20]	; (2554 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1d8>)
    253e:	784a      	ldrb	r2, [r1, #1]
    2540:	1e52      	subs	r2, r2, #1
    2542:	704a      	strb	r2, [r1, #1]
    2544:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    2548:	2200      	movs	r2, #0
    254a:	f881 215a 	strb.w	r2, [r1, #346]	; 0x15a
    254e:	f7ff bfcf 	b.w	24f0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x174>
    2552:	0000      	.short	0x0000
    2554:	20001522 	.word	0x20001522

00002558 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>:
    2558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    255c:	4604      	mov	r4, r0
    255e:	f100 0788 	add.w	r7, r0, #136	; 0x88
    2562:	b171      	cbz	r1, 2582 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x2a>
    2564:	f104 06ae 	add.w	r6, r4, #174	; 0xae
    2568:	1e75      	subs	r5, r6, #1
    256a:	2901      	cmp	r1, #1
    256c:	d016      	beq.n	259c <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x44>
    256e:	2902      	cmp	r1, #2
    2570:	d025      	beq.n	25be <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x66>
    2572:	2903      	cmp	r1, #3
    2574:	d110      	bne.n	2598 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x40>
    2576:	4631      	mov	r1, r6
    2578:	4628      	mov	r0, r5
    257a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    257e:	f00b bc8e 	b.w	de9e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    2582:	f44f 722a 	mov.w	r2, #680	; 0x2a8
    2586:	2100      	movs	r1, #0
    2588:	f00e f8eb 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    258c:	4638      	mov	r0, r7
    258e:	f000 f84d 	bl	262c <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0xd4>
    2592:	2020      	movs	r0, #32
    2594:	f884 0249 	strb.w	r0, [r4, #585]	; 0x249
    2598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    259c:	6921      	ldr	r1, [r4, #16]
    259e:	480d      	ldr	r0, [pc, #52]	; (25d4 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x7c>)
    25a0:	460a      	mov	r2, r1
    25a2:	4408      	add	r0, r1
    25a4:	fbb0 f0f1 	udiv	r0, r0, r1
    25a8:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
    25ac:	f640 30b8 	movw	r0, #3000	; 0xbb8
    25b0:	f8a4 00d0 	strh.w	r0, [r4, #208]	; 0xd0
    25b4:	8b63      	ldrh	r3, [r4, #26]
    25b6:	4638      	mov	r0, r7
    25b8:	f000 f80e 	bl	25d8 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x80>
    25bc:	e7db      	b.n	2576 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x1e>
    25be:	6901      	ldr	r1, [r0, #16]
    25c0:	f8b4 3276 	ldrh.w	r3, [r4, #630]	; 0x276
    25c4:	f8d4 2270 	ldr.w	r2, [r4, #624]	; 0x270
    25c8:	4638      	mov	r0, r7
    25ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    25ce:	f000 b803 	b.w	25d8 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x80>
    25d2:	0000      	.short	0x0000
    25d4:	01c9c37f 	.word	0x01c9c37f
    25d8:	b510      	push	{r4, lr}
    25da:	2400      	movs	r4, #0
    25dc:	f8a0 404e 	strh.w	r4, [r0, #78]	; 0x4e
    25e0:	f830 4f52 	ldrh.w	r4, [r0, #82]!
    25e4:	434c      	muls	r4, r1
    25e6:	fbb4 f4f2 	udiv	r4, r4, r2
    25ea:	f820 4912 	strh.w	r4, [r0], #-18
    25ee:	f240 2471 	movw	r4, #625	; 0x271
    25f2:	4363      	muls	r3, r4
    25f4:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    25f8:	1e5b      	subs	r3, r3, #1
    25fa:	fbb3 f3f2 	udiv	r3, r3, r2
    25fe:	8203      	strh	r3, [r0, #16]
    2600:	4b09      	ldr	r3, [pc, #36]	; (2628 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0xd0>)
    2602:	fbb3 f3f2 	udiv	r3, r3, r2
    2606:	1c5b      	adds	r3, r3, #1
    2608:	82c3      	strh	r3, [r0, #22]
    260a:	8903      	ldrh	r3, [r0, #8]
    260c:	4363      	muls	r3, r4
    260e:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    2612:	1e5b      	subs	r3, r3, #1
    2614:	fbb3 f3f2 	udiv	r3, r3, r2
    2618:	6043      	str	r3, [r0, #4]
    261a:	6803      	ldr	r3, [r0, #0]
    261c:	434b      	muls	r3, r1
    261e:	fbb3 f1f2 	udiv	r1, r3, r2
    2622:	6001      	str	r1, [r0, #0]
    2624:	bd10      	pop	{r4, pc}
    2626:	0000      	.short	0x0000
    2628:	02625a00 	.word	0x02625a00
    262c:	2101      	movs	r1, #1
    262e:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    2632:	490b      	ldr	r1, [pc, #44]	; (2660 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x108>)
    2634:	f8c0 106e 	str.w	r1, [r0, #110]	; 0x6e
    2638:	2107      	movs	r1, #7
    263a:	f8c0 1072 	str.w	r1, [r0, #114]	; 0x72
    263e:	f100 016e 	add.w	r1, r0, #110	; 0x6e
    2642:	780a      	ldrb	r2, [r1, #0]
    2644:	f022 0204 	bic.w	r2, r2, #4
    2648:	700a      	strb	r2, [r1, #0]
    264a:	21fe      	movs	r1, #254	; 0xfe
    264c:	f880 10a6 	strb.w	r1, [r0, #166]	; 0xa6
    2650:	217f      	movs	r1, #127	; 0x7f
    2652:	7641      	strb	r1, [r0, #25]
    2654:	4903      	ldr	r1, [pc, #12]	; (2664 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x10c>)
    2656:	6081      	str	r1, [r0, #8]
    2658:	2100      	movs	r1, #0
    265a:	e9c0 1100 	strd	r1, r1, [r0]
    265e:	4770      	bx	lr
    2660:	3404492f 	.word	0x3404492f
    2664:	fffce000 	.word	0xfffce000

00002668 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>:
    2668:	4902      	ldr	r1, [pc, #8]	; (2674 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ+0xc>)
    266a:	f991 1000 	ldrsb.w	r1, [r1]
    266e:	f00b bbc7 	b.w	de00 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A+0x28>
    2672:	0000      	.short	0x0000
    2674:	20000350 	.word	0x20000350

00002678 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>:
    2678:	b508      	push	{r3, lr}
    267a:	207f      	movs	r0, #127	; 0x7f
    267c:	f88d 0000 	strb.w	r0, [sp]
    2680:	4668      	mov	r0, sp
    2682:	f005 fded 	bl	8260 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    2686:	b140      	cbz	r0, 269a <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x22>
    2688:	4805      	ldr	r0, [pc, #20]	; (26a0 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x28>)
    268a:	7840      	ldrb	r0, [r0, #1]
    268c:	4240      	negs	r0, r0
    268e:	b241      	sxtb	r1, r0
    2690:	f99d 0000 	ldrsb.w	r0, [sp]
    2694:	f00b fbb4 	bl	de00 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A+0x28>
    2698:	bd08      	pop	{r3, pc}
    269a:	f99d 0000 	ldrsb.w	r0, [sp]
    269e:	bd08      	pop	{r3, pc}
    26a0:	20000350 	.word	0x20000350

000026a4 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ>:
    26a4:	4909      	ldr	r1, [pc, #36]	; (26cc <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x28>)
    26a6:	b508      	push	{r3, lr}
    26a8:	7809      	ldrb	r1, [r1, #0]
    26aa:	f88d 1000 	strb.w	r1, [sp]
    26ae:	9900      	ldr	r1, [sp, #0]
    26b0:	9100      	str	r1, [sp, #0]
    26b2:	f89d 1000 	ldrb.w	r1, [sp]
    26b6:	b109      	cbz	r1, 26bc <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x18>
    26b8:	2000      	movs	r0, #0
    26ba:	bd08      	pop	{r3, pc}
    26bc:	4903      	ldr	r1, [pc, #12]	; (26cc <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x28>)
    26be:	f8d1 2001 	ldr.w	r2, [r1, #1]
    26c2:	6002      	str	r2, [r0, #0]
    26c4:	7949      	ldrb	r1, [r1, #5]
    26c6:	7101      	strb	r1, [r0, #4]
    26c8:	2001      	movs	r0, #1
    26ca:	bd08      	pop	{r3, pc}
    26cc:	20000352 	.word	0x20000352

000026d0 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ>:
    26d0:	4905      	ldr	r1, [pc, #20]	; (26e8 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x18>)
    26d2:	22ff      	movs	r2, #255	; 0xff
    26d4:	700a      	strb	r2, [r1, #0]
    26d6:	460a      	mov	r2, r1
    26d8:	6803      	ldr	r3, [r0, #0]
    26da:	f8c2 3001 	str.w	r3, [r2, #1]
    26de:	7900      	ldrb	r0, [r0, #4]
    26e0:	7150      	strb	r0, [r2, #5]
    26e2:	2000      	movs	r0, #0
    26e4:	7008      	strb	r0, [r1, #0]
    26e6:	4770      	bx	lr
    26e8:	20000352 	.word	0x20000352
    26ec:	b570      	push	{r4, r5, r6, lr}
    26ee:	f890 2032 	ldrb.w	r2, [r0, #50]	; 0x32
    26f2:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    26f6:	2401      	movs	r4, #1
    26f8:	fb03 2101 	mla	r1, r3, r1, r2
    26fc:	2225      	movs	r2, #37	; 0x25
    26fe:	fbb1 f3f2 	udiv	r3, r1, r2
    2702:	fb02 1113 	mls	r1, r2, r3, r1
    2706:	eb00 02d1 	add.w	r2, r0, r1, lsr #3
    270a:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
    270e:	f001 0307 	and.w	r3, r1, #7
    2712:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
    2716:	fa04 f303 	lsl.w	r3, r4, r3
    271a:	421a      	tst	r2, r3
    271c:	d004      	beq.n	2728 <CONFIG_SD_DATA_TIMEOUT+0x18>
    271e:	bf00      	nop
    2720:	f880 1033 	strb.w	r1, [r0, #51]	; 0x33
    2724:	2000      	movs	r0, #0
    2726:	bd70      	pop	{r4, r5, r6, pc}
    2728:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
    272c:	fbb1 f3f2 	udiv	r3, r1, r2
    2730:	fb02 1113 	mls	r1, r2, r3, r1
    2734:	1c49      	adds	r1, r1, #1
    2736:	b2c9      	uxtb	r1, r1
    2738:	2300      	movs	r3, #0
    273a:	18c5      	adds	r5, r0, r3
    273c:	f895 202b 	ldrb.w	r2, [r5, #43]	; 0x2b
    2740:	428a      	cmp	r2, r1
    2742:	d312      	bcc.n	276a <CONFIG_SD_DATA_TIMEOUT+0x5a>
    2744:	f895 5026 	ldrb.w	r5, [r5, #38]	; 0x26
    2748:	2200      	movs	r2, #0
    274a:	bf00      	nop
    274c:	fa04 f602 	lsl.w	r6, r4, r2
    2750:	4235      	tst	r5, r6
    2752:	d001      	beq.n	2758 <CONFIG_SD_DATA_TIMEOUT+0x48>
    2754:	1e49      	subs	r1, r1, #1
    2756:	b2c9      	uxtb	r1, r1
    2758:	b121      	cbz	r1, 2764 <CONFIG_SD_DATA_TIMEOUT+0x54>
    275a:	1c52      	adds	r2, r2, #1
    275c:	b2d2      	uxtb	r2, r2
    275e:	2a08      	cmp	r2, #8
    2760:	d3f4      	bcc.n	274c <CONFIG_SD_DATA_TIMEOUT+0x3c>
    2762:	e004      	b.n	276e <CONFIG_SD_DATA_TIMEOUT+0x5e>
    2764:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    2768:	e7da      	b.n	2720 <CONFIG_SD_DATA_TIMEOUT+0x10>
    276a:	1a89      	subs	r1, r1, r2
    276c:	b2c9      	uxtb	r1, r1
    276e:	1c5b      	adds	r3, r3, #1
    2770:	b2db      	uxtb	r3, r3
    2772:	2b05      	cmp	r3, #5
    2774:	d3e1      	bcc.n	273a <CONFIG_SD_DATA_TIMEOUT+0x2a>
    2776:	201f      	movs	r0, #31
    2778:	bd70      	pop	{r4, r5, r6, pc}
    277a:	0000      	movs	r0, r0
    277c:	b570      	push	{r4, r5, r6, lr}
    277e:	1c49      	adds	r1, r1, #1
    2780:	2300      	movs	r3, #0
    2782:	b2c9      	uxtb	r1, r1
    2784:	2401      	movs	r4, #1
    2786:	18c5      	adds	r5, r0, r3
    2788:	79aa      	ldrb	r2, [r5, #6]
    278a:	428a      	cmp	r2, r1
    278c:	d312      	bcc.n	27b4 <CONFIG_SD_DATA_TIMEOUT+0xa4>
    278e:	f895 5001 	ldrb.w	r5, [r5, #1]
    2792:	2200      	movs	r2, #0
    2794:	fa04 f602 	lsl.w	r6, r4, r2
    2798:	4235      	tst	r5, r6
    279a:	d001      	beq.n	27a0 <CONFIG_SD_DATA_TIMEOUT+0x90>
    279c:	1e49      	subs	r1, r1, #1
    279e:	b2c9      	uxtb	r1, r1
    27a0:	b121      	cbz	r1, 27ac <CONFIG_SD_DATA_TIMEOUT+0x9c>
    27a2:	1c52      	adds	r2, r2, #1
    27a4:	b2d2      	uxtb	r2, r2
    27a6:	2a08      	cmp	r2, #8
    27a8:	d3f4      	bcc.n	2794 <CONFIG_SD_DATA_TIMEOUT+0x84>
    27aa:	e005      	b.n	27b8 <CONFIG_SD_DATA_TIMEOUT+0xa8>
    27ac:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
    27b0:	b2c0      	uxtb	r0, r0
    27b2:	bd70      	pop	{r4, r5, r6, pc}
    27b4:	1a89      	subs	r1, r1, r2
    27b6:	b2c9      	uxtb	r1, r1
    27b8:	1c5b      	adds	r3, r3, #1
    27ba:	b2db      	uxtb	r3, r3
    27bc:	2b05      	cmp	r3, #5
    27be:	d3e2      	bcc.n	2786 <CONFIG_SD_DATA_TIMEOUT+0x76>
    27c0:	219d      	movs	r1, #157	; 0x9d
    27c2:	2046      	movs	r0, #70	; 0x46
    27c4:	f7fe f94e 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

000027c8 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA>:
    27c8:	7841      	ldrb	r1, [r0, #1]
    27ca:	b141      	cbz	r1, 27de <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x16>
    27cc:	78c0      	ldrb	r0, [r0, #3]
    27ce:	282b      	cmp	r0, #43	; 0x2b
    27d0:	d203      	bcs.n	27da <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x12>
    27d2:	4a04      	ldr	r2, [pc, #16]	; (27e4 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x1c>)
    27d4:	5c10      	ldrb	r0, [r2, r0]
    27d6:	4288      	cmp	r0, r1
    27d8:	d101      	bne.n	27de <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x16>
    27da:	2001      	movs	r0, #1
    27dc:	4770      	bx	lr
    27de:	2000      	movs	r0, #0
    27e0:	4770      	bx	lr
    27e2:	0000      	.short	0x0000
    27e4:	000108ac 	.word	0x000108ac

000027e8 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ>:
    27e8:	b510      	push	{r4, lr}
    27ea:	2201      	movs	r2, #1
    27ec:	70c1      	strb	r1, [r0, #3]
    27ee:	292b      	cmp	r1, #43	; 0x2b
    27f0:	d202      	bcs.n	27f8 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x10>
    27f2:	4a06      	ldr	r2, [pc, #24]	; (280c <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x24>)
    27f4:	5c52      	ldrb	r2, [r2, r1]
    27f6:	e006      	b.n	2806 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x1e>
    27f8:	29ff      	cmp	r1, #255	; 0xff
    27fa:	d004      	beq.n	2806 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x1e>
    27fc:	f240 4175 	movw	r1, #1141	; 0x475
    2800:	202a      	movs	r0, #42	; 0x2a
    2802:	f7fe f92f 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2806:	7042      	strb	r2, [r0, #1]
    2808:	bd10      	pop	{r4, pc}
    280a:	0000      	.short	0x0000
    280c:	000108ac 	.word	0x000108ac

00002810 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>:
    2810:	4904      	ldr	r1, [pc, #16]	; (2824 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0x14>)
    2812:	7c89      	ldrb	r1, [r1, #18]
    2814:	0749      	lsls	r1, r1, #29
    2816:	d400      	bmi.n	281a <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0xa>
    2818:	b108      	cbz	r0, 281e <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0xe>
    281a:	2000      	movs	r0, #0
    281c:	4770      	bx	lr
    281e:	2001      	movs	r0, #1
    2820:	4770      	bx	lr
    2822:	0000      	.short	0x0000
    2824:	20000ff4 	.word	0x20000ff4

00002828 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>:
    2828:	4803      	ldr	r0, [pc, #12]	; (2838 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0x10>)
    282a:	7c80      	ldrb	r0, [r0, #18]
    282c:	0780      	lsls	r0, r0, #30
    282e:	d401      	bmi.n	2834 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0xc>
    2830:	2001      	movs	r0, #1
    2832:	4770      	bx	lr
    2834:	2000      	movs	r0, #0
    2836:	4770      	bx	lr
    2838:	20000ff4 	.word	0x20000ff4

0000283c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>:
    283c:	4803      	ldr	r0, [pc, #12]	; (284c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x10>)
    283e:	7c80      	ldrb	r0, [r0, #18]
    2840:	07c0      	lsls	r0, r0, #31
    2842:	d001      	beq.n	2848 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xc>
    2844:	2000      	movs	r0, #0
    2846:	4770      	bx	lr
    2848:	2001      	movs	r0, #1
    284a:	4770      	bx	lr
    284c:	20000ff4 	.word	0x20000ff4
    2850:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    2854:	4688      	mov	r8, r1
    2856:	4699      	mov	r9, r3
    2858:	4615      	mov	r5, r2
    285a:	4604      	mov	r4, r0
    285c:	a901      	add	r1, sp, #4
    285e:	f00b f924 	bl	daaa <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    2862:	bbb0      	cbnz	r0, 28d2 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x96>
    2864:	9e02      	ldr	r6, [sp, #8]
    2866:	2001      	movs	r0, #1
    2868:	3688      	adds	r6, #136	; 0x88
    286a:	b17d      	cbz	r5, 288c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x50>
    286c:	4620      	mov	r0, r4
    286e:	f7fe fcdb 	bl	1228 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    2872:	0004      	movs	r4, r0
    2874:	d00d      	beq.n	2892 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x56>
    2876:	4629      	mov	r1, r5
    2878:	f00a fe0c 	bl	d494 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    287c:	b118      	cbz	r0, 2886 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x4a>
    287e:	4918      	ldr	r1, [pc, #96]	; (28e0 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa4>)
    2880:	8849      	ldrh	r1, [r1, #2]
    2882:	42a9      	cmp	r1, r5
    2884:	d207      	bcs.n	2896 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x5a>
    2886:	2000      	movs	r0, #0
    2888:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    288c:	f886 0024 	strb.w	r0, [r6, #36]	; 0x24
    2890:	e01f      	b.n	28d2 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x96>
    2892:	2167      	movs	r1, #103	; 0x67
    2894:	e020      	b.n	28d8 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x9c>
    2896:	4601      	mov	r1, r0
    2898:	466a      	mov	r2, sp
    289a:	4620      	mov	r0, r4
    289c:	f00a fdf3 	bl	d486 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    28a0:	9800      	ldr	r0, [sp, #0]
    28a2:	2700      	movs	r7, #0
    28a4:	8007      	strh	r7, [r0, #0]
    28a6:	7087      	strb	r7, [r0, #2]
    28a8:	f896 1024 	ldrb.w	r1, [r6, #36]	; 0x24
    28ac:	b109      	cbz	r1, 28b2 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x76>
    28ae:	f04f 0802 	mov.w	r8, #2
    28b2:	4641      	mov	r1, r8
    28b4:	f00b fc00 	bl	e0b8 <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    28b8:	9800      	ldr	r0, [sp, #0]
    28ba:	462a      	mov	r2, r5
    28bc:	4649      	mov	r1, r9
    28be:	1cc0      	adds	r0, r0, #3
    28c0:	f00d fed5 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    28c4:	4620      	mov	r0, r4
    28c6:	4629      	mov	r1, r5
    28c8:	f00a fd9b 	bl	d402 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    28cc:	b118      	cbz	r0, 28d6 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x9a>
    28ce:	f886 7024 	strb.w	r7, [r6, #36]	; 0x24
    28d2:	2001      	movs	r0, #1
    28d4:	e7d8      	b.n	2888 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x4c>
    28d6:	217c      	movs	r1, #124	; 0x7c
    28d8:	202b      	movs	r0, #43	; 0x2b
    28da:	f7fe f8c3 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    28de:	0000      	.short	0x0000
    28e0:	20000ff4 	.word	0x20000ff4

000028e4 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>:
    28e4:	4809      	ldr	r0, [pc, #36]	; (290c <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x28>)
    28e6:	b082      	sub	sp, #8
    28e8:	7a00      	ldrb	r0, [r0, #8]
    28ea:	f88d 0000 	strb.w	r0, [sp]
    28ee:	9800      	ldr	r0, [sp, #0]
    28f0:	9000      	str	r0, [sp, #0]
    28f2:	f89d 0000 	ldrb.w	r0, [sp]
    28f6:	2800      	cmp	r0, #0
    28f8:	d105      	bne.n	2906 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x22>
    28fa:	2202      	movs	r2, #2
    28fc:	4904      	ldr	r1, [pc, #16]	; (2910 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x2c>)
    28fe:	4803      	ldr	r0, [pc, #12]	; (290c <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x28>)
    2900:	b002      	add	sp, #8
    2902:	f00b bc0c 	b.w	e11e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    2906:	b002      	add	sp, #8
    2908:	4770      	bx	lr
    290a:	0000      	.short	0x0000
    290c:	2000100c 	.word	0x2000100c
    2910:	0000e165 	.word	0x0000e165

00002914 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    2914:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2918:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 2ad8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1c4>
    291c:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 2adc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1c8>
    2920:	4683      	mov	fp, r0
    2922:	f04f 0901 	mov.w	r9, #1
    2926:	2600      	movs	r6, #0
    2928:	f8d8 0004 	ldr.w	r0, [r8, #4]
    292c:	7a00      	ldrb	r0, [r0, #8]
    292e:	f88d 0000 	strb.w	r0, [sp]
    2932:	9800      	ldr	r0, [sp, #0]
    2934:	9000      	str	r0, [sp, #0]
    2936:	f89d 1000 	ldrb.w	r1, [sp]
    293a:	292a      	cmp	r1, #42	; 0x2a
    293c:	d106      	bne.n	294c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x38>
    293e:	f89a 1013 	ldrb.w	r1, [sl, #19]
    2942:	b119      	cbz	r1, 294c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x38>
    2944:	f8ba 0014 	ldrh.w	r0, [sl, #20]
    2948:	2800      	cmp	r0, #0
    294a:	d06f      	beq.n	2a2c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x118>
    294c:	2700      	movs	r7, #0
    294e:	f88d 6000 	strb.w	r6, [sp]
    2952:	4668      	mov	r0, sp
    2954:	f000 f924 	bl	2ba0 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xb0>
    2958:	f89d 1000 	ldrb.w	r1, [sp]
    295c:	2900      	cmp	r1, #0
    295e:	d1f8      	bne.n	2952 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3e>
    2960:	2800      	cmp	r0, #0
    2962:	d063      	beq.n	2a2c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x118>
    2964:	4604      	mov	r4, r0
    2966:	7a00      	ldrb	r0, [r0, #8]
    2968:	f88d 0000 	strb.w	r0, [sp]
    296c:	9800      	ldr	r0, [sp, #0]
    296e:	9000      	str	r0, [sp, #0]
    2970:	f89d 5000 	ldrb.w	r5, [sp]
    2974:	1ea8      	subs	r0, r5, #2
    2976:	2830      	cmp	r0, #48	; 0x30
    2978:	d27b      	bcs.n	2a72 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15e>
    297a:	e8df f000 	tbb	[pc, r0]
    297e:	3b18      	.short	0x3b18
    2980:	97359727 	.word	0x97359727
    2984:	7b977b3b 	.word	0x7b977b3b
    2988:	7b417b7b 	.word	0x7b417b7b
    298c:	97359797 	.word	0x97359797
    2990:	35977b7b 	.word	0x35977b7b
    2994:	7b979797 	.word	0x7b979797
    2998:	7b97975a 	.word	0x7b97975a
    299c:	8f7b7b97 	.word	0x8f7b7b97
    29a0:	2197977b 	.word	0x2197977b
    29a4:	97816963 	.word	0x97816963
    29a8:	97979797 	.word	0x97979797
    29ac:	6397      	.short	0x6397
    29ae:	6862      	ldr	r2, [r4, #4]
    29b0:	b912      	cbnz	r2, 29b8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>
    29b2:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
    29b6:	e076      	b.n	2aa6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    29b8:	4659      	mov	r1, fp
    29ba:	4620      	mov	r0, r4
    29bc:	4790      	blx	r2
    29be:	e050      	b.n	2a62 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x14e>
    29c0:	6862      	ldr	r2, [r4, #4]
    29c2:	2a00      	cmp	r2, #0
    29c4:	d1f8      	bne.n	29b8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>
    29c6:	f240 11ad 	movw	r1, #429	; 0x1ad
    29ca:	e06c      	b.n	2aa6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    29cc:	f001 ff70 	bl	48b0 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
    29d0:	b128      	cbz	r0, 29de <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xca>
    29d2:	6862      	ldr	r2, [r4, #4]
    29d4:	b12a      	cbz	r2, 29e2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xce>
    29d6:	4659      	mov	r1, fp
    29d8:	4620      	mov	r0, r4
    29da:	4790      	blx	r2
    29dc:	e07a      	b.n	2ad4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1c0>
    29de:	2701      	movs	r7, #1
    29e0:	e03f      	b.n	2a62 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x14e>
    29e2:	f240 2133 	movw	r1, #563	; 0x233
    29e6:	e05e      	b.n	2aa6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    29e8:	6862      	ldr	r2, [r4, #4]
    29ea:	2a00      	cmp	r2, #0
    29ec:	d1e4      	bne.n	29b8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>
    29ee:	f240 213f 	movw	r1, #575	; 0x23f
    29f2:	e058      	b.n	2aa6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    29f4:	6862      	ldr	r2, [r4, #4]
    29f6:	2a00      	cmp	r2, #0
    29f8:	d1de      	bne.n	29b8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>
    29fa:	f240 214b 	movw	r1, #587	; 0x24b
    29fe:	e052      	b.n	2aa6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    2a00:	6860      	ldr	r0, [r4, #4]
    2a02:	465d      	mov	r5, fp
    2a04:	b180      	cbz	r0, 2a28 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x114>
    2a06:	8804      	ldrh	r4, [r0, #0]
    2a08:	4620      	mov	r0, r4
    2a0a:	f7fe fc0d 	bl	1228 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    2a0e:	b170      	cbz	r0, 2a2e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11a>
    2a10:	706e      	strb	r6, [r5, #1]
    2a12:	220f      	movs	r2, #15
    2a14:	702a      	strb	r2, [r5, #0]
    2a16:	80ec      	strh	r4, [r5, #6]
    2a18:	f8a5 9008 	strh.w	r9, [r5, #8]
    2a1c:	4631      	mov	r1, r6
    2a1e:	f885 9004 	strb.w	r9, [r5, #4]
    2a22:	f00a fdce 	bl	d5c2 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    2a26:	e055      	b.n	2ad4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1c0>
    2a28:	21ce      	movs	r1, #206	; 0xce
    2a2a:	e03c      	b.n	2aa6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    2a2c:	e031      	b.n	2a92 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x17e>
    2a2e:	21ae      	movs	r1, #174	; 0xae
    2a30:	e039      	b.n	2aa6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    2a32:	6862      	ldr	r2, [r4, #4]
    2a34:	b11a      	cbz	r2, 2a3e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x12a>
    2a36:	4659      	mov	r1, fp
    2a38:	4620      	mov	r0, r4
    2a3a:	4790      	blx	r2
    2a3c:	e7cf      	b.n	29de <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xca>
    2a3e:	f240 2163 	movw	r1, #611	; 0x263
    2a42:	e030      	b.n	2aa6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    2a44:	6862      	ldr	r2, [r4, #4]
    2a46:	2a00      	cmp	r2, #0
    2a48:	d1b6      	bne.n	29b8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>
    2a4a:	f240 216f 	movw	r1, #623	; 0x26f
    2a4e:	e02a      	b.n	2aa6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    2a50:	f88b 6001 	strb.w	r6, [fp, #1]
    2a54:	211a      	movs	r1, #26
    2a56:	f88b 1000 	strb.w	r1, [fp]
    2a5a:	f8d4 1009 	ldr.w	r1, [r4, #9]
    2a5e:	f8cb 1004 	str.w	r1, [fp, #4]
    2a62:	7226      	strb	r6, [r4, #8]
    2a64:	2d21      	cmp	r5, #33	; 0x21
    2a66:	d024      	beq.n	2ab2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    2a68:	2d14      	cmp	r5, #20
    2a6a:	d025      	beq.n	2ab8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1a4>
    2a6c:	2d22      	cmp	r5, #34	; 0x22
    2a6e:	d02a      	beq.n	2ac6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1b2>
    2a70:	e02e      	b.n	2ad0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1bc>
    2a72:	e01b      	b.n	2aac <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x198>
    2a74:	6862      	ldr	r2, [r4, #4]
    2a76:	2a00      	cmp	r2, #0
    2a78:	d19e      	bne.n	29b8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>
    2a7a:	f240 2196 	movw	r1, #662	; 0x296
    2a7e:	e012      	b.n	2aa6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    2a80:	4817      	ldr	r0, [pc, #92]	; (2ae0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1cc>)
    2a82:	6802      	ldr	r2, [r0, #0]
    2a84:	b122      	cbz	r2, 2a90 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x17c>
    2a86:	6860      	ldr	r0, [r4, #4]
    2a88:	b128      	cbz	r0, 2a96 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x182>
    2a8a:	8800      	ldrh	r0, [r0, #0]
    2a8c:	4659      	mov	r1, fp
    2a8e:	4790      	blx	r2
    2a90:	2002      	movs	r0, #2
    2a92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2a96:	f240 219f 	movw	r1, #671	; 0x29f
    2a9a:	e004      	b.n	2aa6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    2a9c:	6862      	ldr	r2, [r4, #4]
    2a9e:	2a00      	cmp	r2, #0
    2aa0:	d18a      	bne.n	29b8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>
    2aa2:	f44f 712b 	mov.w	r1, #684	; 0x2ac
    2aa6:	2010      	movs	r0, #16
    2aa8:	f7fd ffdc 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2aac:	f240 21bd 	movw	r1, #701	; 0x2bd
    2ab0:	e7f9      	b.n	2aa6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    2ab2:	f7ff feb9 	bl	2828 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>
    2ab6:	e008      	b.n	2aca <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1b6>
    2ab8:	f89b 000e 	ldrb.w	r0, [fp, #14]
    2abc:	f000 0001 	and.w	r0, r0, #1
    2ac0:	f7ff fea6 	bl	2810 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>
    2ac4:	e001      	b.n	2aca <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1b6>
    2ac6:	f7ff feb9 	bl	283c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>
    2aca:	2800      	cmp	r0, #0
    2acc:	f47f af2c 	bne.w	2928 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x14>
    2ad0:	2f00      	cmp	r7, #0
    2ad2:	d1fb      	bne.n	2acc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1b8>
    2ad4:	2004      	movs	r0, #4
    2ad6:	e7dc      	b.n	2a92 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x17e>
    2ad8:	20001020 	.word	0x20001020
    2adc:	20000ff4 	.word	0x20000ff4
    2ae0:	200000b0 	.word	0x200000b0

00002ae4 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    2ae4:	4901      	ldr	r1, [pc, #4]	; (2aec <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    2ae6:	7008      	strb	r0, [r1, #0]
    2ae8:	f000 b8b0 	b.w	2c4c <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x15c>
    2aec:	20000358 	.word	0x20000358

00002af0 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY>:
    2af0:	4902      	ldr	r1, [pc, #8]	; (2afc <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xc>)
    2af2:	4801      	ldr	r0, [pc, #4]	; (2af8 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x8>)
    2af4:	6008      	str	r0, [r1, #0]
    2af6:	4770      	bx	lr
    2af8:	00002b01 	.word	0x00002b01
    2afc:	200000b0 	.word	0x200000b0
    2b00:	b538      	push	{r3, r4, r5, lr}
    2b02:	000d      	movs	r5, r1
    2b04:	d014      	beq.n	2b30 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x40>
    2b06:	80a8      	strh	r0, [r5, #4]
    2b08:	2100      	movs	r1, #0
    2b0a:	7269      	strb	r1, [r5, #9]
    2b0c:	f7fe fb76 	bl	11fc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    2b10:	4604      	mov	r4, r0
    2b12:	f00a fc9a 	bl	d44a <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    2b16:	b168      	cbz	r0, 2b34 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x44>
    2b18:	4601      	mov	r1, r0
    2b1a:	466a      	mov	r2, sp
    2b1c:	4620      	mov	r0, r4
    2b1e:	f00a fcb2 	bl	d486 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    2b22:	80e8      	strh	r0, [r5, #6]
    2b24:	b148      	cbz	r0, 2b3a <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x4a>
    2b26:	28fb      	cmp	r0, #251	; 0xfb
    2b28:	d90a      	bls.n	2b40 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x50>
    2b2a:	f44f 7186 	mov.w	r1, #268	; 0x10c
    2b2e:	e032      	b.n	2b96 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xa6>
    2b30:	21fc      	movs	r1, #252	; 0xfc
    2b32:	e030      	b.n	2b96 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xa6>
    2b34:	f240 1105 	movw	r1, #261	; 0x105
    2b38:	e02d      	b.n	2b96 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xa6>
    2b3a:	f44f 7185 	mov.w	r1, #266	; 0x10a
    2b3e:	e02a      	b.n	2b96 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xa6>
    2b40:	9800      	ldr	r0, [sp, #0]
    2b42:	f00b fa77 	bl	e034 <sym_VV6G4PHP6ULWM4Y2LJJIOETDZSUFDXGJCHBQNZI>
    2b46:	2801      	cmp	r0, #1
    2b48:	d004      	beq.n	2b54 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x64>
    2b4a:	2802      	cmp	r0, #2
    2b4c:	d002      	beq.n	2b54 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x64>
    2b4e:	f44f 718e 	mov.w	r1, #284	; 0x11c
    2b52:	e020      	b.n	2b96 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xa6>
    2b54:	7228      	strb	r0, [r5, #8]
    2b56:	6828      	ldr	r0, [r5, #0]
    2b58:	b1a8      	cbz	r0, 2b86 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x96>
    2b5a:	9900      	ldr	r1, [sp, #0]
    2b5c:	88ea      	ldrh	r2, [r5, #6]
    2b5e:	1cc9      	adds	r1, r1, #3
    2b60:	f00d fd85 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2b64:	4620      	mov	r0, r4
    2b66:	f00a fc38 	bl	d3da <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    2b6a:	b178      	cbz	r0, 2b8c <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x9c>
    2b6c:	4620      	mov	r0, r4
    2b6e:	2100      	movs	r1, #0
    2b70:	f00a fd27 	bl	d5c2 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    2b74:	b168      	cbz	r0, 2b92 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xa2>
    2b76:	4809      	ldr	r0, [pc, #36]	; (2b9c <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xac>)
    2b78:	7cc1      	ldrb	r1, [r0, #19]
    2b7a:	2900      	cmp	r1, #0
    2b7c:	d002      	beq.n	2b84 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x94>
    2b7e:	8a81      	ldrh	r1, [r0, #20]
    2b80:	1e49      	subs	r1, r1, #1
    2b82:	8281      	strh	r1, [r0, #20]
    2b84:	bd38      	pop	{r3, r4, r5, pc}
    2b86:	f240 1123 	movw	r1, #291	; 0x123
    2b8a:	e004      	b.n	2b96 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xa6>
    2b8c:	f44f 7194 	mov.w	r1, #296	; 0x128
    2b90:	e001      	b.n	2b96 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xa6>
    2b92:	f240 112d 	movw	r1, #301	; 0x12d
    2b96:	2010      	movs	r0, #16
    2b98:	f7fd ff64 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2b9c:	20000ff4 	.word	0x20000ff4
    2ba0:	b538      	push	{r3, r4, r5, lr}
    2ba2:	4602      	mov	r2, r0
    2ba4:	4b11      	ldr	r3, [pc, #68]	; (2bec <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xfc>)
    2ba6:	2000      	movs	r0, #0
    2ba8:	7010      	strb	r0, [r2, #0]
    2baa:	6858      	ldr	r0, [r3, #4]
    2bac:	7a01      	ldrb	r1, [r0, #8]
    2bae:	f88d 1000 	strb.w	r1, [sp]
    2bb2:	9900      	ldr	r1, [sp, #0]
    2bb4:	9100      	str	r1, [sp, #0]
    2bb6:	f89d 5000 	ldrb.w	r5, [sp]
    2bba:	2401      	movs	r4, #1
    2bbc:	2d01      	cmp	r5, #1
    2bbe:	d006      	beq.n	2bce <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xde>
    2bc0:	f3ef 8110 	mrs	r1, PRIMASK
    2bc4:	b672      	cpsid	i
    2bc6:	6805      	ldr	r5, [r0, #0]
    2bc8:	605d      	str	r5, [r3, #4]
    2bca:	b111      	cbz	r1, 2bd2 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xe2>
    2bcc:	e002      	b.n	2bd4 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xe4>
    2bce:	2000      	movs	r0, #0
    2bd0:	bd38      	pop	{r3, r4, r5, pc}
    2bd2:	b662      	cpsie	i
    2bd4:	7a01      	ldrb	r1, [r0, #8]
    2bd6:	f88d 1000 	strb.w	r1, [sp]
    2bda:	9900      	ldr	r1, [sp, #0]
    2bdc:	9100      	str	r1, [sp, #0]
    2bde:	f89d 3000 	ldrb.w	r3, [sp]
    2be2:	2b00      	cmp	r3, #0
    2be4:	d1f4      	bne.n	2bd0 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xe0>
    2be6:	7014      	strb	r4, [r2, #0]
    2be8:	bd38      	pop	{r3, r4, r5, pc}
    2bea:	0000      	.short	0x0000
    2bec:	20001020 	.word	0x20001020
    2bf0:	b538      	push	{r3, r4, r5, lr}
    2bf2:	b1d0      	cbz	r0, 2c2a <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x13a>
    2bf4:	6041      	str	r1, [r0, #4]
    2bf6:	f100 0108 	add.w	r1, r0, #8
    2bfa:	700a      	strb	r2, [r1, #0]
    2bfc:	f3ef 8310 	mrs	r3, PRIMASK
    2c00:	b672      	cpsid	i
    2c02:	4c10      	ldr	r4, [pc, #64]	; (2c44 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x154>)
    2c04:	6004      	str	r4, [r0, #0]
    2c06:	1f21      	subs	r1, r4, #4
    2c08:	684a      	ldr	r2, [r1, #4]
    2c0a:	b14a      	cbz	r2, 2c20 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x130>
    2c0c:	7a12      	ldrb	r2, [r2, #8]
    2c0e:	f88d 2000 	strb.w	r2, [sp]
    2c12:	9a00      	ldr	r2, [sp, #0]
    2c14:	9200      	str	r2, [sp, #0]
    2c16:	f89d 5000 	ldrb.w	r5, [sp]
    2c1a:	2d01      	cmp	r5, #1
    2c1c:	d100      	bne.n	2c20 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x130>
    2c1e:	600c      	str	r4, [r1, #0]
    2c20:	680a      	ldr	r2, [r1, #0]
    2c22:	6010      	str	r0, [r2, #0]
    2c24:	6008      	str	r0, [r1, #0]
    2c26:	b12b      	cbz	r3, 2c34 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x144>
    2c28:	e005      	b.n	2c36 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x146>
    2c2a:	f240 21e2 	movw	r1, #738	; 0x2e2
    2c2e:	2010      	movs	r0, #16
    2c30:	f7fd ff18 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2c34:	b662      	cpsie	i
    2c36:	4804      	ldr	r0, [pc, #16]	; (2c48 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x158>)
    2c38:	7800      	ldrb	r0, [r0, #0]
    2c3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    2c3e:	f009 bc5f 	b.w	c500 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2c42:	0000      	.short	0x0000
    2c44:	20001024 	.word	0x20001024
    2c48:	20000358 	.word	0x20000358
    2c4c:	4808      	ldr	r0, [pc, #32]	; (2c70 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x180>)
    2c4e:	b510      	push	{r4, lr}
    2c50:	2100      	movs	r1, #0
    2c52:	6141      	str	r1, [r0, #20]
    2c54:	6181      	str	r1, [r0, #24]
    2c56:	61c1      	str	r1, [r0, #28]
    2c58:	6201      	str	r1, [r0, #32]
    2c5a:	2212      	movs	r2, #18
    2c5c:	f00d fd81 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    2c60:	4803      	ldr	r0, [pc, #12]	; (2c70 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x180>)
    2c62:	3014      	adds	r0, #20
    2c64:	2101      	movs	r1, #1
    2c66:	7301      	strb	r1, [r0, #12]
    2c68:	1d01      	adds	r1, r0, #4
    2c6a:	6041      	str	r1, [r0, #4]
    2c6c:	6001      	str	r1, [r0, #0]
    2c6e:	bd10      	pop	{r4, pc}
    2c70:	2000100c 	.word	0x2000100c

00002c74 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
    2c74:	b4f0      	push	{r4, r5, r6, r7}
    2c76:	8150      	strh	r0, [r2, #10]
    2c78:	890c      	ldrh	r4, [r1, #8]
    2c7a:	4613      	mov	r3, r2
    2c7c:	8194      	strh	r4, [r2, #12]
    2c7e:	898a      	ldrh	r2, [r1, #12]
    2c80:	81da      	strh	r2, [r3, #14]
    2c82:	8948      	ldrh	r0, [r1, #10]
    2c84:	8218      	strh	r0, [r3, #16]
    2c86:	89cd      	ldrh	r5, [r1, #14]
    2c88:	825d      	strh	r5, [r3, #18]
    2c8a:	8dce      	ldrh	r6, [r1, #46]	; 0x2e
    2c8c:	42ae      	cmp	r6, r5
    2c8e:	d108      	bne.n	2ca2 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2e>
    2c90:	8d4d      	ldrh	r5, [r1, #42]	; 0x2a
    2c92:	4285      	cmp	r5, r0
    2c94:	d105      	bne.n	2ca2 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2e>
    2c96:	8e0d      	ldrh	r5, [r1, #48]	; 0x30
    2c98:	4295      	cmp	r5, r2
    2c9a:	d102      	bne.n	2ca2 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2e>
    2c9c:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
    2c9e:	42a2      	cmp	r2, r4
    2ca0:	d001      	beq.n	2ca6 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
    2ca2:	2201      	movs	r2, #1
    2ca4:	e000      	b.n	2ca8 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x34>
    2ca6:	2200      	movs	r2, #0
    2ca8:	751a      	strb	r2, [r3, #20]
    2caa:	8548      	strh	r0, [r1, #42]	; 0x2a
    2cac:	8a58      	ldrh	r0, [r3, #18]
    2cae:	85c8      	strh	r0, [r1, #46]	; 0x2e
    2cb0:	8998      	ldrh	r0, [r3, #12]
    2cb2:	8588      	strh	r0, [r1, #44]	; 0x2c
    2cb4:	89d8      	ldrh	r0, [r3, #14]
    2cb6:	8608      	strh	r0, [r1, #48]	; 0x30
    2cb8:	bcf0      	pop	{r4, r5, r6, r7}
    2cba:	2214      	movs	r2, #20
    2cbc:	4901      	ldr	r1, [pc, #4]	; (2cc4 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x50>)
    2cbe:	4618      	mov	r0, r3
    2cc0:	f00b ba41 	b.w	e146 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    2cc4:	0000e323 	.word	0x0000e323

00002cc8 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
    2cc8:	8150      	strh	r0, [r2, #10]
    2cca:	8a88      	ldrh	r0, [r1, #20]
    2ccc:	8190      	strh	r0, [r2, #12]
    2cce:	8ac8      	ldrh	r0, [r1, #22]
    2cd0:	81d0      	strh	r0, [r2, #14]
    2cd2:	8b08      	ldrh	r0, [r1, #24]
    2cd4:	8210      	strh	r0, [r2, #16]
    2cd6:	8b48      	ldrh	r0, [r1, #26]
    2cd8:	4613      	mov	r3, r2
    2cda:	8250      	strh	r0, [r2, #18]
    2cdc:	2221      	movs	r2, #33	; 0x21
    2cde:	4902      	ldr	r1, [pc, #8]	; (2ce8 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x20>)
    2ce0:	4618      	mov	r0, r3
    2ce2:	f00b ba1c 	b.w	e11e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    2ce6:	0000      	.short	0x0000
    2ce8:	0000e359 	.word	0x0000e359

00002cec <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>:
    2cec:	b5f0      	push	{r4, r5, r6, r7, lr}
    2cee:	f06f 021f 	mvn.w	r2, #31
    2cf2:	0c01      	lsrs	r1, r0, #16
    2cf4:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    2cf8:	251f      	movs	r5, #31
    2cfa:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    2cfe:	3854      	subs	r0, #84	; 0x54
    2d00:	d00d      	beq.n	2d1e <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    2d02:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    2d06:	3855      	subs	r0, #85	; 0x55
    2d08:	d009      	beq.n	2d1e <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    2d0a:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    2d0e:	38aa      	subs	r0, #170	; 0xaa
    2d10:	d005      	beq.n	2d1e <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    2d12:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    2d16:	38aa      	subs	r0, #170	; 0xaa
    2d18:	d001      	beq.n	2d1e <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    2d1a:	2001      	movs	r0, #1
    2d1c:	e000      	b.n	2d20 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x34>
    2d1e:	2000      	movs	r0, #0
    2d20:	2200      	movs	r2, #0
    2d22:	4613      	mov	r3, r2
    2d24:	ea4f 0402 	mov.w	r4, r2
    2d28:	ea82 0701 	eor.w	r7, r2, r1
    2d2c:	43ff      	mvns	r7, r7
    2d2e:	431f      	orrs	r7, r3
    2d30:	1c7f      	adds	r7, r7, #1
    2d32:	d00f      	beq.n	2d54 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x68>
    2d34:	f006 0701 	and.w	r7, r6, #1
    2d38:	0852      	lsrs	r2, r2, #1
    2d3a:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    2d3e:	f005 0701 	and.w	r7, r5, #1
    2d42:	085b      	lsrs	r3, r3, #1
    2d44:	0876      	lsrs	r6, r6, #1
    2d46:	086d      	lsrs	r5, r5, #1
    2d48:	1c64      	adds	r4, r4, #1
    2d4a:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    2d4e:	2c16      	cmp	r4, #22
    2d50:	d3ea      	bcc.n	2d28 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x3c>
    2d52:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2d54:	2000      	movs	r0, #0
    2d56:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002d58 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA>:
    2d58:	b510      	push	{r4, lr}
    2d5a:	4604      	mov	r4, r0
    2d5c:	f00b fb8c 	bl	e478 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x58>
    2d60:	b308      	cbz	r0, 2da6 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x4e>
    2d62:	43e0      	mvns	r0, r4
    2d64:	f00b fb88 	bl	e478 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x58>
    2d68:	b1e8      	cbz	r0, 2da6 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x4e>
    2d6a:	16a0      	asrs	r0, r4, #26
    2d6c:	ea80 0060 	eor.w	r0, r0, r0, asr #1
    2d70:	1e41      	subs	r1, r0, #1
    2d72:	4208      	tst	r0, r1
    2d74:	d017      	beq.n	2da6 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x4e>
    2d76:	4620      	mov	r0, r4
    2d78:	f00b fbcd 	bl	e516 <sym_KX4ODCDF63RBCM4RLVD2FMITN5XCORTH2S6ZQ5A>
    2d7c:	2818      	cmp	r0, #24
    2d7e:	d812      	bhi.n	2da6 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x4e>
    2d80:	b2a0      	uxth	r0, r4
    2d82:	ebb0 4f14 	cmp.w	r0, r4, lsr #16
    2d86:	d107      	bne.n	2d98 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x40>
    2d88:	f04f 11ff 	mov.w	r1, #16711935	; 0xff00ff
    2d8c:	ea01 2114 	and.w	r1, r1, r4, lsr #8
    2d90:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
    2d94:	4281      	cmp	r1, r0
    2d96:	d006      	beq.n	2da6 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x4e>
    2d98:	4804      	ldr	r0, [pc, #16]	; (2dac <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x54>)
    2d9a:	4044      	eors	r4, r0
    2d9c:	1e60      	subs	r0, r4, #1
    2d9e:	4204      	tst	r4, r0
    2da0:	d001      	beq.n	2da6 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x4e>
    2da2:	2001      	movs	r0, #1
    2da4:	bd10      	pop	{r4, pc}
    2da6:	2000      	movs	r0, #0
    2da8:	bd10      	pop	{r4, pc}
    2daa:	0000      	.short	0x0000
    2dac:	8e89bed6 	.word	0x8e89bed6

00002db0 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>:
    2db0:	b510      	push	{r4, lr}
    2db2:	4804      	ldr	r0, [pc, #16]	; (2dc4 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    2db4:	f00b fb71 	bl	e49a <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x7a>
    2db8:	4802      	ldr	r0, [pc, #8]	; (2dc4 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    2dba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2dbe:	3008      	adds	r0, #8
    2dc0:	f00b bb6b 	b.w	e49a <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x7a>
    2dc4:	200000b4 	.word	0x200000b4

00002dc8 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>:
    2dc8:	4801      	ldr	r0, [pc, #4]	; (2dd0 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x8>)
    2dca:	f000 b803 	b.w	2dd4 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0xc>
    2dce:	0000      	.short	0x0000
    2dd0:	200000bc 	.word	0x200000bc
    2dd4:	b510      	push	{r4, lr}
    2dd6:	e9d0 2100 	ldrd	r2, r1, [r0]
    2dda:	4b09      	ldr	r3, [pc, #36]	; (2e00 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x38>)
    2ddc:	4c09      	ldr	r4, [pc, #36]	; (2e04 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x3c>)
    2dde:	4353      	muls	r3, r2
    2de0:	4354      	muls	r4, r2
    2de2:	4051      	eors	r1, r2
    2de4:	ea81 12b2 	eor.w	r2, r1, r2, ror #6
    2de8:	ea82 2241 	eor.w	r2, r2, r1, lsl #9
    2dec:	ea4f 41f1 	mov.w	r1, r1, ror #19
    2df0:	e9c0 2100 	strd	r2, r1, [r0]
    2df4:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
    2df8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2dfc:	4618      	mov	r0, r3
    2dfe:	bd10      	pop	{r4, pc}
    2e00:	c6ef3760 	.word	0xc6ef3760
    2e04:	9e3779bb 	.word	0x9e3779bb

00002e08 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ>:
    2e08:	b570      	push	{r4, r5, r6, lr}
    2e0a:	6845      	ldr	r5, [r0, #4]
    2e0c:	1d0c      	adds	r4, r1, #4
    2e0e:	2300      	movs	r3, #0
    2e10:	f895 20a6 	ldrb.w	r2, [r5, #166]	; 0xa6
    2e14:	3588      	adds	r5, #136	; 0x88
    2e16:	2601      	movs	r6, #1
    2e18:	4619      	mov	r1, r3
    2e1a:	4628      	mov	r0, r5
    2e1c:	f00a fe6e 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    2e20:	b190      	cbz	r0, 2e48 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ+0x40>
    2e22:	6820      	ldr	r0, [r4, #0]
    2e24:	4a09      	ldr	r2, [pc, #36]	; (2e4c <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ+0x44>)
    2e26:	7921      	ldrb	r1, [r4, #4]
    2e28:	4010      	ands	r0, r2
    2e2a:	f8c5 006e 	str.w	r0, [r5, #110]	; 0x6e
    2e2e:	f001 0107 	and.w	r1, r1, #7
    2e32:	f8c5 1072 	str.w	r1, [r5, #114]	; 0x72
    2e36:	2000      	movs	r0, #0
    2e38:	f8a5 005a 	strh.w	r0, [r5, #90]	; 0x5a
    2e3c:	f885 605c 	strb.w	r6, [r5, #92]	; 0x5c
    2e40:	2004      	movs	r0, #4
    2e42:	77a8      	strb	r0, [r5, #30]
    2e44:	2000      	movs	r0, #0
    2e46:	bd70      	pop	{r4, r5, r6, pc}
    2e48:	2001      	movs	r0, #1
    2e4a:	bd70      	pop	{r4, r5, r6, pc}
    2e4c:	3704492f 	.word	0x3704492f

00002e50 <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY>:
    2e50:	b510      	push	{r4, lr}
    2e52:	1d04      	adds	r4, r0, #4
    2e54:	f004 fce0 	bl	7818 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    2e58:	4a03      	ldr	r2, [pc, #12]	; (2e68 <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY+0x18>)
    2e5a:	f001 0107 	and.w	r1, r1, #7
    2e5e:	4010      	ands	r0, r2
    2e60:	6020      	str	r0, [r4, #0]
    2e62:	6061      	str	r1, [r4, #4]
    2e64:	bd10      	pop	{r4, pc}
    2e66:	0000      	.short	0x0000
    2e68:	3704492f 	.word	0x3704492f

00002e6c <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI>:
    2e6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2e70:	4605      	mov	r5, r0
    2e72:	7803      	ldrb	r3, [r0, #0]
    2e74:	6840      	ldr	r0, [r0, #4]
    2e76:	1d0f      	adds	r7, r1, #4
    2e78:	f100 0688 	add.w	r6, r0, #136	; 0x88
    2e7c:	f500 74a9 	add.w	r4, r0, #338	; 0x152
    2e80:	4680      	mov	r8, r0
    2e82:	7f72      	ldrb	r2, [r6, #29]
    2e84:	2107      	movs	r1, #7
    2e86:	4630      	mov	r0, r6
    2e88:	f00a fe38 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    2e8c:	b1d0      	cbz	r0, 2ec4 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x58>
    2e8e:	6838      	ldr	r0, [r7, #0]
    2e90:	4a17      	ldr	r2, [pc, #92]	; (2ef0 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x84>)
    2e92:	7939      	ldrb	r1, [r7, #4]
    2e94:	4010      	ands	r0, r2
    2e96:	f8c6 006e 	str.w	r0, [r6, #110]	; 0x6e
    2e9a:	f001 0107 	and.w	r1, r1, #7
    2e9e:	f8c6 1072 	str.w	r1, [r6, #114]	; 0x72
    2ea2:	2000      	movs	r0, #0
    2ea4:	f886 0058 	strb.w	r0, [r6, #88]	; 0x58
    2ea8:	7770      	strb	r0, [r6, #29]
    2eaa:	6869      	ldr	r1, [r5, #4]
    2eac:	f881 014b 	strb.w	r0, [r1, #331]	; 0x14b
    2eb0:	f894 1068 	ldrb.w	r1, [r4, #104]	; 0x68
    2eb4:	f88d 1000 	strb.w	r1, [sp]
    2eb8:	9900      	ldr	r1, [sp, #0]
    2eba:	9100      	str	r1, [sp, #0]
    2ebc:	f89d 1000 	ldrb.w	r1, [sp]
    2ec0:	b999      	cbnz	r1, 2eea <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x7e>
    2ec2:	e002      	b.n	2eca <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x5e>
    2ec4:	2001      	movs	r0, #1
    2ec6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2eca:	f8b8 1000 	ldrh.w	r1, [r8]
    2ece:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
    2ed2:	f884 0069 	strb.w	r0, [r4, #105]	; 0x69
    2ed6:	6839      	ldr	r1, [r7, #0]
    2ed8:	66e1      	str	r1, [r4, #108]	; 0x6c
    2eda:	6879      	ldr	r1, [r7, #4]
    2edc:	6721      	str	r1, [r4, #112]	; 0x70
    2ede:	2208      	movs	r2, #8
    2ee0:	4904      	ldr	r1, [pc, #16]	; (2ef4 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x88>)
    2ee2:	f104 0060 	add.w	r0, r4, #96	; 0x60
    2ee6:	f00b f91a 	bl	e11e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    2eea:	2000      	movs	r0, #0
    2eec:	e7eb      	b.n	2ec6 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x5a>
    2eee:	0000      	.short	0x0000
    2ef0:	3704492f 	.word	0x3704492f
    2ef4:	0000e621 	.word	0x0000e621

00002ef8 <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ>:
    2ef8:	b570      	push	{r4, r5, r6, lr}
    2efa:	1d0d      	adds	r5, r1, #4
    2efc:	6844      	ldr	r4, [r0, #4]
    2efe:	f004 fc8b 	bl	7818 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    2f02:	4a06      	ldr	r2, [pc, #24]	; (2f1c <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ+0x24>)
    2f04:	4010      	ands	r0, r2
    2f06:	f001 0207 	and.w	r2, r1, #7
    2f0a:	f894 10f6 	ldrb.w	r1, [r4, #246]	; 0xf6
    2f0e:	4001      	ands	r1, r0
    2f10:	f361 0007 	bfi	r0, r1, #0, #8
    2f14:	6028      	str	r0, [r5, #0]
    2f16:	606a      	str	r2, [r5, #4]
    2f18:	bd70      	pop	{r4, r5, r6, pc}
    2f1a:	0000      	.short	0x0000
    2f1c:	3704492f 	.word	0x3704492f

00002f20 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY>:
    2f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2f24:	6844      	ldr	r4, [r0, #4]
    2f26:	460d      	mov	r5, r1
    2f28:	7803      	ldrb	r3, [r0, #0]
    2f2a:	f894 20a5 	ldrb.w	r2, [r4, #165]	; 0xa5
    2f2e:	3488      	adds	r4, #136	; 0x88
    2f30:	2701      	movs	r7, #1
    2f32:	2108      	movs	r1, #8
    2f34:	4620      	mov	r0, r4
    2f36:	f00a fde1 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    2f3a:	b930      	cbnz	r0, 2f4a <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x2a>
    2f3c:	2300      	movs	r3, #0
    2f3e:	7fa2      	ldrb	r2, [r4, #30]
    2f40:	4619      	mov	r1, r3
    2f42:	4620      	mov	r0, r4
    2f44:	f00a fdda 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    2f48:	b320      	cbz	r0, 2f94 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x74>
    2f4a:	f894 005f 	ldrb.w	r0, [r4, #95]	; 0x5f
    2f4e:	f04f 0600 	mov.w	r6, #0
    2f52:	0780      	lsls	r0, r0, #30
    2f54:	d419      	bmi.n	2f8a <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x6a>
    2f56:	4628      	mov	r0, r5
    2f58:	f00b f8c8 	bl	e0ec <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI>
    2f5c:	f884 0069 	strb.w	r0, [r4, #105]	; 0x69
    2f60:	f835 0f05 	ldrh.w	r0, [r5, #5]!
    2f64:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
    2f68:	8868      	ldrh	r0, [r5, #2]
    2f6a:	f8a4 006c 	strh.w	r0, [r4, #108]	; 0x6c
    2f6e:	f894 005f 	ldrb.w	r0, [r4, #95]	; 0x5f
    2f72:	f040 0002 	orr.w	r0, r0, #2
    2f76:	f884 005f 	strb.w	r0, [r4, #95]	; 0x5f
    2f7a:	07c0      	lsls	r0, r0, #31
    2f7c:	d00d      	beq.n	2f9a <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x7a>
    2f7e:	2203      	movs	r2, #3
    2f80:	4912      	ldr	r1, [pc, #72]	; (2fcc <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0xac>)
    2f82:	f104 0060 	add.w	r0, r4, #96	; 0x60
    2f86:	f00b f8de 	bl	e146 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    2f8a:	f894 005f 	ldrb.w	r0, [r4, #95]	; 0x5f
    2f8e:	07c0      	lsls	r0, r0, #31
    2f90:	d003      	beq.n	2f9a <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x7a>
    2f92:	e00e      	b.n	2fb2 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x92>
    2f94:	2001      	movs	r0, #1
    2f96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2f9a:	2300      	movs	r3, #0
    2f9c:	7fa2      	ldrb	r2, [r4, #30]
    2f9e:	4619      	mov	r1, r3
    2fa0:	4620      	mov	r0, r4
    2fa2:	f00a fdab 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    2fa6:	b140      	cbz	r0, 2fba <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x9a>
    2fa8:	77a7      	strb	r7, [r4, #30]
    2faa:	f884 705c 	strb.w	r7, [r4, #92]	; 0x5c
    2fae:	f8a4 605a 	strh.w	r6, [r4, #90]	; 0x5a
    2fb2:	7f60      	ldrb	r0, [r4, #29]
    2fb4:	2801      	cmp	r0, #1
    2fb6:	d004      	beq.n	2fc2 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0xa2>
    2fb8:	e006      	b.n	2fc8 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0xa8>
    2fba:	2148      	movs	r1, #72	; 0x48
    2fbc:	2040      	movs	r0, #64	; 0x40
    2fbe:	f7fd fd51 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2fc2:	7766      	strb	r6, [r4, #29]
    2fc4:	f884 6058 	strb.w	r6, [r4, #88]	; 0x58
    2fc8:	2000      	movs	r0, #0
    2fca:	e7e4      	b.n	2f96 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x76>
    2fcc:	0000e64f 	.word	0x0000e64f

00002fd0 <sym_DEQHYPJXYJ4WT7NTOYVXPSGPFEINKR4XQZSCDJY>:
    2fd0:	4907      	ldr	r1, [pc, #28]	; (2ff0 <sym_DEQHYPJXYJ4WT7NTOYVXPSGPFEINKR4XQZSCDJY+0x20>)
    2fd2:	f500 6000 	add.w	r0, r0, #2048	; 0x800
    2fd6:	1300      	asrs	r0, r0, #12
    2fd8:	7809      	ldrb	r1, [r1, #0]
    2fda:	b240      	sxtb	r0, r0
    2fdc:	4249      	negs	r1, r1
    2fde:	b249      	sxtb	r1, r1
    2fe0:	4408      	add	r0, r1
    2fe2:	f300 0007 	ssat	r0, #8, r0
    2fe6:	2800      	cmp	r0, #0
    2fe8:	dc00      	bgt.n	2fec <sym_DEQHYPJXYJ4WT7NTOYVXPSGPFEINKR4XQZSCDJY+0x1c>
    2fea:	2000      	movs	r0, #0
    2fec:	b2c0      	uxtb	r0, r0
    2fee:	4770      	bx	lr
    2ff0:	200000c4 	.word	0x200000c4

00002ff4 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ>:
    2ff4:	4a04      	ldr	r2, [pc, #16]	; (3008 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ+0x14>)
    2ff6:	6892      	ldr	r2, [r2, #8]
    2ff8:	f5c2 5380 	rsb	r3, r2, #4096	; 0x1000
    2ffc:	434b      	muls	r3, r1
    2ffe:	4342      	muls	r2, r0
    3000:	eb03 3022 	add.w	r0, r3, r2, asr #12
    3004:	4770      	bx	lr
    3006:	0000      	.short	0x0000
    3008:	200000c4 	.word	0x200000c4

0000300c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA>:
    300c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    300e:	6844      	ldr	r4, [r0, #4]
    3010:	4606      	mov	r6, r0
    3012:	f104 0588 	add.w	r5, r4, #136	; 0x88
    3016:	f000 f87f 	bl	3118 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x10c>
    301a:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
    301e:	2901      	cmp	r1, #1
    3020:	d11a      	bne.n	3058 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x4c>
    3022:	2800      	cmp	r0, #0
    3024:	d018      	beq.n	3058 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x4c>
    3026:	6870      	ldr	r0, [r6, #4]
    3028:	f890 115a 	ldrb.w	r1, [r0, #346]	; 0x15a
    302c:	f88d 1000 	strb.w	r1, [sp]
    3030:	9900      	ldr	r1, [sp, #0]
    3032:	9100      	str	r1, [sp, #0]
    3034:	f89d 1000 	ldrb.w	r1, [sp]
    3038:	f500 70a9 	add.w	r0, r0, #338	; 0x152
    303c:	2900      	cmp	r1, #0
    303e:	d10b      	bne.n	3058 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x4c>
    3040:	8821      	ldrh	r1, [r4, #0]
    3042:	8141      	strh	r1, [r0, #10]
    3044:	7e69      	ldrb	r1, [r5, #25]
    3046:	7301      	strb	r1, [r0, #12]
    3048:	7ea9      	ldrb	r1, [r5, #26]
    304a:	7341      	strb	r1, [r0, #13]
    304c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    3050:	221f      	movs	r2, #31
    3052:	4902      	ldr	r1, [pc, #8]	; (305c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x50>)
    3054:	f00b b863 	b.w	e11e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    3058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    305a:	0000      	.short	0x0000
    305c:	0000e6e7 	.word	0x0000e6e7
    3060:	f500 6100 	add.w	r1, r0, #2048	; 0x800
    3064:	4a0d      	ldr	r2, [pc, #52]	; (309c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x90>)
    3066:	b510      	push	{r4, lr}
    3068:	f500 6000 	add.w	r0, r0, #2048	; 0x800
    306c:	1309      	asrs	r1, r1, #12
    306e:	1300      	asrs	r0, r0, #12
    3070:	b24b      	sxtb	r3, r1
    3072:	f992 4000 	ldrsb.w	r4, [r2]
    3076:	4240      	negs	r0, r0
    3078:	2100      	movs	r1, #0
    307a:	b240      	sxtb	r0, r0
    307c:	42a3      	cmp	r3, r4
    307e:	da02      	bge.n	3086 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x7a>
    3080:	f992 1002 	ldrsb.w	r1, [r2, #2]
    3084:	e005      	b.n	3092 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x86>
    3086:	f992 4001 	ldrsb.w	r4, [r2, #1]
    308a:	42a3      	cmp	r3, r4
    308c:	dd04      	ble.n	3098 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x8c>
    308e:	f992 1003 	ldrsb.w	r1, [r2, #3]
    3092:	4408      	add	r0, r1
    3094:	f300 0107 	ssat	r1, #8, r0
    3098:	4608      	mov	r0, r1
    309a:	bd10      	pop	{r4, pc}
    309c:	200000c4 	.word	0x200000c4
    30a0:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    30a4:	2200      	movs	r2, #0
    30a6:	704a      	strb	r2, [r1, #1]
    30a8:	f5a0 75fe 	sub.w	r5, r0, #508	; 0x1fc
    30ac:	700a      	strb	r2, [r1, #0]
    30ae:	f5a0 74ba 	sub.w	r4, r0, #372	; 0x174
    30b2:	f895 006b 	ldrb.w	r0, [r5, #107]	; 0x6b
    30b6:	f00c f928 	bl	f30a <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y>
    30ba:	4606      	mov	r6, r0
    30bc:	68a0      	ldr	r0, [r4, #8]
    30be:	f7ff ffcf 	bl	3060 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x54>
    30c2:	0007      	movs	r7, r0
    30c4:	d021      	beq.n	310a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xfe>
    30c6:	4620      	mov	r0, r4
    30c8:	f00b fb15 	bl	e6f6 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x66>
    30cc:	2800      	cmp	r0, #0
    30ce:	d01c      	beq.n	310a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xfe>
    30d0:	8828      	ldrh	r0, [r5, #0]
    30d2:	4669      	mov	r1, sp
    30d4:	f00a fce9 	bl	daaa <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    30d8:	b118      	cbz	r0, 30e2 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xd6>
    30da:	2189      	movs	r1, #137	; 0x89
    30dc:	207a      	movs	r0, #122	; 0x7a
    30de:	f7fd fcc1 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    30e2:	1c76      	adds	r6, r6, #1
    30e4:	b2f1      	uxtb	r1, r6
    30e6:	2302      	movs	r3, #2
    30e8:	463a      	mov	r2, r7
    30ea:	4668      	mov	r0, sp
    30ec:	f00c f92c 	bl	f348 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I>
    30f0:	2800      	cmp	r0, #0
    30f2:	d10a      	bne.n	310a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xfe>
    30f4:	4806      	ldr	r0, [pc, #24]	; (3110 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x104>)
    30f6:	4907      	ldr	r1, [pc, #28]	; (3114 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x108>)
    30f8:	7900      	ldrb	r0, [r0, #4]
    30fa:	fba0 6501 	umull	r6, r5, r0, r1
    30fe:	f008 f847 	bl	b190 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    3102:	1980      	adds	r0, r0, r6
    3104:	4169      	adcs	r1, r5
    3106:	e9c4 0100 	strd	r0, r1, [r4]
    310a:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    310e:	0000      	.short	0x0000
    3110:	200000c4 	.word	0x200000c4
    3114:	000f4240 	.word	0x000f4240
    3118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    311c:	4607      	mov	r7, r0
    311e:	f7ff faab 	bl	2678 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
    3122:	687c      	ldr	r4, [r7, #4]
    3124:	4605      	mov	r5, r0
    3126:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1
    312a:	3488      	adds	r4, #136	; 0x88
    312c:	287f      	cmp	r0, #127	; 0x7f
    312e:	d03c      	beq.n	31aa <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x19e>
    3130:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    3134:	687e      	ldr	r6, [r7, #4]
    3136:	76a0      	strb	r0, [r4, #26]
    3138:	4629      	mov	r1, r5
    313a:	68a0      	ldr	r0, [r4, #8]
    313c:	f7ff ff5a 	bl	2ff4 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ>
    3140:	60a0      	str	r0, [r4, #8]
    3142:	481b      	ldr	r0, [pc, #108]	; (31b0 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x1a4>)
    3144:	7940      	ldrb	r0, [r0, #5]
    3146:	b190      	cbz	r0, 316e <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x162>
    3148:	6878      	ldr	r0, [r7, #4]
    314a:	f100 0888 	add.w	r8, r0, #136	; 0x88
    314e:	f8d0 0090 	ldr.w	r0, [r0, #144]	; 0x90
    3152:	f7ff ff85 	bl	3060 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x54>
    3156:	b150      	cbz	r0, 316e <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x162>
    3158:	4640      	mov	r0, r8
    315a:	f00b facc 	bl	e6f6 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x66>
    315e:	b130      	cbz	r0, 316e <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x162>
    3160:	6878      	ldr	r0, [r7, #4]
    3162:	2231      	movs	r2, #49	; 0x31
    3164:	4913      	ldr	r1, [pc, #76]	; (31b4 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x1a8>)
    3166:	f500 70fe 	add.w	r0, r0, #508	; 0x1fc
    316a:	f00a ffec 	bl	e146 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    316e:	f994 001b 	ldrsb.w	r0, [r4, #27]
    3172:	2100      	movs	r1, #0
    3174:	1a28      	subs	r0, r5, r0
    3176:	d500      	bpl.n	317a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x16e>
    3178:	4240      	negs	r0, r0
    317a:	f896 2029 	ldrb.w	r2, [r6, #41]	; 0x29
    317e:	4282      	cmp	r2, r0
    3180:	dc10      	bgt.n	31a4 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x198>
    3182:	2aff      	cmp	r2, #255	; 0xff
    3184:	d00e      	beq.n	31a4 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x198>
    3186:	7f20      	ldrb	r0, [r4, #28]
    3188:	1c40      	adds	r0, r0, #1
    318a:	b2c0      	uxtb	r0, r0
    318c:	7720      	strb	r0, [r4, #28]
    318e:	f896 202a 	ldrb.w	r2, [r6, #42]	; 0x2a
    3192:	4290      	cmp	r0, r2
    3194:	d802      	bhi.n	319c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x190>
    3196:	7ee0      	ldrb	r0, [r4, #27]
    3198:	287f      	cmp	r0, #127	; 0x7f
    319a:	d103      	bne.n	31a4 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x198>
    319c:	2000      	movs	r0, #0
    319e:	76e5      	strb	r5, [r4, #27]
    31a0:	7720      	strb	r0, [r4, #28]
    31a2:	2101      	movs	r1, #1
    31a4:	4608      	mov	r0, r1
    31a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    31aa:	2000      	movs	r0, #0
    31ac:	e7fb      	b.n	31a6 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x19a>
    31ae:	0000      	.short	0x0000
    31b0:	200000c4 	.word	0x200000c4
    31b4:	000030a1 	.word	0x000030a1

000031b8 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>:
    31b8:	4801      	ldr	r0, [pc, #4]	; (31c0 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY+0x8>)
    31ba:	6840      	ldr	r0, [r0, #4]
    31bc:	30a0      	adds	r0, #160	; 0xa0
    31be:	4770      	bx	lr
    31c0:	200000d0 	.word	0x200000d0

000031c4 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>:
    31c4:	b510      	push	{r4, lr}
    31c6:	4c21      	ldr	r4, [pc, #132]	; (324c <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x88>)
    31c8:	6860      	ldr	r0, [r4, #4]
    31ca:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
    31ce:	f00b fabb 	bl	e748 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xb8>
    31d2:	6861      	ldr	r1, [r4, #4]
    31d4:	f881 0049 	strb.w	r0, [r1, #73]	; 0x49
    31d8:	314a      	adds	r1, #74	; 0x4a
    31da:	f7fe fa23 	bl	1624 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    31de:	6860      	ldr	r0, [r4, #4]
    31e0:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
    31e4:	f00b fab7 	bl	e756 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xc6>
    31e8:	6861      	ldr	r1, [r4, #4]
    31ea:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    31ee:	f891 0049 	ldrb.w	r0, [r1, #73]	; 0x49
    31f2:	314a      	adds	r1, #74	; 0x4a
    31f4:	f00b fa94 	bl	e720 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x90>
    31f8:	b930      	cbnz	r0, 3208 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x44>
    31fa:	6861      	ldr	r1, [r4, #4]
    31fc:	f891 0049 	ldrb.w	r0, [r1, #73]	; 0x49
    3200:	314a      	adds	r1, #74	; 0x4a
    3202:	f00b fa96 	bl	e732 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xa2>
    3206:	b108      	cbz	r0, 320c <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x48>
    3208:	2101      	movs	r1, #1
    320a:	e000      	b.n	320e <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x4a>
    320c:	2100      	movs	r1, #0
    320e:	6860      	ldr	r0, [r4, #4]
    3210:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
    3214:	b919      	cbnz	r1, 321e <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x5a>
    3216:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    321a:	2800      	cmp	r0, #0
    321c:	d014      	beq.n	3248 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x84>
    321e:	f7ff f829 	bl	2274 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    3222:	490b      	ldr	r1, [pc, #44]	; (3250 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x8c>)
    3224:	fba0 2301 	umull	r2, r3, r0, r1
    3228:	6860      	ldr	r0, [r4, #4]
    322a:	3090      	adds	r0, #144	; 0x90
    322c:	f00b fae5 	bl	e7fa <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x90>
    3230:	6860      	ldr	r0, [r4, #4]
    3232:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    3236:	b110      	cbz	r0, 323e <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x7a>
    3238:	2000      	movs	r0, #0
    323a:	f7fe ff8d 	bl	2158 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>
    323e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3242:	2000      	movs	r0, #0
    3244:	f000 be38 	b.w	3eb8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8e0>
    3248:	bd10      	pop	{r4, pc}
    324a:	0000      	.short	0x0000
    324c:	200000d0 	.word	0x200000d0
    3250:	000f4240 	.word	0x000f4240

00003254 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>:
    3254:	4a04      	ldr	r2, [pc, #16]	; (3268 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY+0x14>)
    3256:	2803      	cmp	r0, #3
    3258:	6852      	ldr	r2, [r2, #4]
    325a:	d100      	bne.n	325e <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY+0xa>
    325c:	6551      	str	r1, [r2, #84]	; 0x54
    325e:	f882 0058 	strb.w	r0, [r2, #88]	; 0x58
    3262:	2000      	movs	r0, #0
    3264:	4770      	bx	lr
    3266:	0000      	.short	0x0000
    3268:	200000d0 	.word	0x200000d0

0000326c <sym_TNTVRUTCX6QDICT5SCWQINK5TBPSWJENFWCYQCI>:
    326c:	4806      	ldr	r0, [pc, #24]	; (3288 <sym_TNTVRUTCX6QDICT5SCWQINK5TBPSWJENFWCYQCI+0x1c>)
    326e:	b508      	push	{r3, lr}
    3270:	6840      	ldr	r0, [r0, #4]
    3272:	7a00      	ldrb	r0, [r0, #8]
    3274:	f88d 0000 	strb.w	r0, [sp]
    3278:	9800      	ldr	r0, [sp, #0]
    327a:	9000      	str	r0, [sp, #0]
    327c:	f89d 0000 	ldrb.w	r0, [sp]
    3280:	2800      	cmp	r0, #0
    3282:	d000      	beq.n	3286 <sym_TNTVRUTCX6QDICT5SCWQINK5TBPSWJENFWCYQCI+0x1a>
    3284:	2001      	movs	r0, #1
    3286:	bd08      	pop	{r3, pc}
    3288:	200000d0 	.word	0x200000d0

0000328c <sym_VK3LYWW654ZNWB44W7VFNFGOUDPRKIGF72NOIJQ>:
    328c:	4902      	ldr	r1, [pc, #8]	; (3298 <sym_VK3LYWW654ZNWB44W7VFNFGOUDPRKIGF72NOIJQ+0xc>)
    328e:	6849      	ldr	r1, [r1, #4]
    3290:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    3294:	2000      	movs	r0, #0
    3296:	4770      	bx	lr
    3298:	200000d0 	.word	0x200000d0

0000329c <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI>:
    329c:	480a      	ldr	r0, [pc, #40]	; (32c8 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x2c>)
    329e:	6841      	ldr	r1, [r0, #4]
    32a0:	6e88      	ldr	r0, [r1, #104]	; 0x68
    32a2:	b170      	cbz	r0, 32c2 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x26>
    32a4:	f101 006d 	add.w	r0, r1, #109	; 0x6d
    32a8:	22ff      	movs	r2, #255	; 0xff
    32aa:	7002      	strb	r2, [r0, #0]
    32ac:	2200      	movs	r2, #0
    32ae:	668a      	str	r2, [r1, #104]	; 0x68
    32b0:	7002      	strb	r2, [r0, #0]
    32b2:	f891 106c 	ldrb.w	r1, [r1, #108]	; 0x6c
    32b6:	2001      	movs	r0, #1
    32b8:	4088      	lsls	r0, r1
    32ba:	4904      	ldr	r1, [pc, #16]	; (32cc <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x30>)
    32bc:	6008      	str	r0, [r1, #0]
    32be:	2000      	movs	r0, #0
    32c0:	4770      	bx	lr
    32c2:	200c      	movs	r0, #12
    32c4:	4770      	bx	lr
    32c6:	0000      	.short	0x0000
    32c8:	200000d0 	.word	0x200000d0
    32cc:	4001f508 	.word	0x4001f508

000032d0 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY>:
    32d0:	4602      	mov	r2, r0
    32d2:	480c      	ldr	r0, [pc, #48]	; (3304 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x34>)
    32d4:	b510      	push	{r4, lr}
    32d6:	6082      	str	r2, [r0, #8]
    32d8:	68c0      	ldr	r0, [r0, #12]
    32da:	460c      	mov	r4, r1
    32dc:	b168      	cbz	r0, 32fa <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x2a>
    32de:	f000 ffe5 	bl	42ac <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2ac>
    32e2:	f00b fb70 	bl	e9c6 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY>
    32e6:	4620      	mov	r0, r4
    32e8:	f000 f8c0 	bl	346c <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>
    32ec:	2800      	cmp	r0, #0
    32ee:	d007      	beq.n	3300 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x30>
    32f0:	f640 119d 	movw	r1, #2461	; 0x99d
    32f4:	2032      	movs	r0, #50	; 0x32
    32f6:	f7fd fbb5 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    32fa:	f640 1197 	movw	r1, #2455	; 0x997
    32fe:	e7f9      	b.n	32f4 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x24>
    3300:	bd10      	pop	{r4, pc}
    3302:	0000      	.short	0x0000
    3304:	200000d0 	.word	0x200000d0

00003308 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI>:
    3308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    330c:	4c0f      	ldr	r4, [pc, #60]	; (334c <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x44>)
    330e:	4605      	mov	r5, r0
    3310:	4616      	mov	r6, r2
    3312:	6860      	ldr	r0, [r4, #4]
    3314:	460f      	mov	r7, r1
    3316:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
    331a:	f00b fa1c 	bl	e756 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xc6>
    331e:	b158      	cbz	r0, 3338 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x30>
    3320:	b955      	cbnz	r5, 3338 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x30>
    3322:	4638      	mov	r0, r7
    3324:	f00b fa10 	bl	e748 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xb8>
    3328:	4631      	mov	r1, r6
    332a:	f00a fb6c 	bl	da06 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    332e:	2808      	cmp	r0, #8
    3330:	d002      	beq.n	3338 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x30>
    3332:	2001      	movs	r0, #1
    3334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3338:	6860      	ldr	r0, [r4, #4]
    333a:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
    333e:	f00b fa03 	bl	e748 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xb8>
    3342:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3346:	f7fe b999 	b.w	167c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    334a:	0000      	.short	0x0000
    334c:	200000d0 	.word	0x200000d0

00003350 <sym_MSYMIWR3PI6HXHUAZX2P7HGFCTCK3HSW5N3BC2A>:
    3350:	b510      	push	{r4, lr}
    3352:	4c0a      	ldr	r4, [pc, #40]	; (337c <sym_MSYMIWR3PI6HXHUAZX2P7HGFCTCK3HSW5N3BC2A+0x2c>)
    3354:	6860      	ldr	r0, [r4, #4]
    3356:	6d41      	ldr	r1, [r0, #84]	; 0x54
    3358:	b159      	cbz	r1, 3372 <sym_MSYMIWR3PI6HXHUAZX2P7HGFCTCK3HSW5N3BC2A+0x22>
    335a:	2202      	movs	r2, #2
    335c:	7242      	strb	r2, [r0, #9]
    335e:	8809      	ldrh	r1, [r1, #0]
    3360:	8141      	strh	r1, [r0, #10]
    3362:	2212      	movs	r2, #18
    3364:	4906      	ldr	r1, [pc, #24]	; (3380 <sym_MSYMIWR3PI6HXHUAZX2P7HGFCTCK3HSW5N3BC2A+0x30>)
    3366:	f00a feda 	bl	e11e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    336a:	6861      	ldr	r1, [r4, #4]
    336c:	2000      	movs	r0, #0
    336e:	6548      	str	r0, [r1, #84]	; 0x54
    3370:	bd10      	pop	{r4, pc}
    3372:	f240 4122 	movw	r1, #1058	; 0x422
    3376:	2032      	movs	r0, #50	; 0x32
    3378:	f7fd fb74 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    337c:	200000d0 	.word	0x200000d0
    3380:	000036b5 	.word	0x000036b5

00003384 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY>:
    3384:	b570      	push	{r4, r5, r6, lr}
    3386:	4c13      	ldr	r4, [pc, #76]	; (33d4 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x50>)
    3388:	4615      	mov	r5, r2
    338a:	460e      	mov	r6, r1
    338c:	2800      	cmp	r0, #0
    338e:	d016      	beq.n	33be <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x3a>
    3390:	f04f 0200 	mov.w	r2, #0
    3394:	6861      	ldr	r1, [r4, #4]
    3396:	f801 2f51 	strb.w	r2, [r1, #81]!
    339a:	7248      	strb	r0, [r1, #9]
    339c:	f04f 0008 	mov.w	r0, #8
    33a0:	f881 002a 	strb.w	r0, [r1, #42]	; 0x2a
    33a4:	d114      	bne.n	33d0 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x4c>
    33a6:	4630      	mov	r0, r6
    33a8:	f00b f9ce 	bl	e748 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xb8>
    33ac:	4629      	mov	r1, r5
    33ae:	f00a fb2a 	bl	da06 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    33b2:	6861      	ldr	r1, [r4, #4]
    33b4:	2808      	cmp	r0, #8
    33b6:	f881 007b 	strb.w	r0, [r1, #123]	; 0x7b
    33ba:	d003      	beq.n	33c4 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x40>
    33bc:	e008      	b.n	33d0 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x4c>
    33be:	f04f 0201 	mov.w	r2, #1
    33c2:	e7e7      	b.n	3394 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x10>
    33c4:	4630      	mov	r0, r6
    33c6:	f00b f9c6 	bl	e756 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xc6>
    33ca:	b108      	cbz	r0, 33d0 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x4c>
    33cc:	2012      	movs	r0, #18
    33ce:	bd70      	pop	{r4, r5, r6, pc}
    33d0:	2000      	movs	r0, #0
    33d2:	bd70      	pop	{r4, r5, r6, pc}
    33d4:	200000d0 	.word	0x200000d0

000033d8 <sym_IRV7IF6I52F3HYHZNFCDRHHNP7EOMECHNPGJUGI>:
    33d8:	b510      	push	{r4, lr}
    33da:	b1b1      	cbz	r1, 340a <sym_IRV7IF6I52F3HYHZNFCDRHHNP7EOMECHNPGJUGI+0x32>
    33dc:	4a0d      	ldr	r2, [pc, #52]	; (3414 <sym_IRV7IF6I52F3HYHZNFCDRHHNP7EOMECHNPGJUGI+0x3c>)
    33de:	6852      	ldr	r2, [r2, #4]
    33e0:	f882 005f 	strb.w	r0, [r2, #95]	; 0x5f
    33e4:	6808      	ldr	r0, [r1, #0]
    33e6:	6610      	str	r0, [r2, #96]	; 0x60
    33e8:	8888      	ldrh	r0, [r1, #4]
    33ea:	f8a2 0064 	strh.w	r0, [r2, #100]	; 0x64
    33ee:	f892 0049 	ldrb.w	r0, [r2, #73]	; 0x49
    33f2:	f852 1f54 	ldr.w	r1, [r2, #84]!
    33f6:	7248      	strb	r0, [r1, #9]
    33f8:	f852 0908 	ldr.w	r0, [r2], #-8
    33fc:	f852 1c02 	ldr.w	r1, [r2, #-2]
    3400:	f8c0 100a 	str.w	r1, [r0, #10]
    3404:	8851      	ldrh	r1, [r2, #2]
    3406:	81c1      	strh	r1, [r0, #14]
    3408:	bd10      	pop	{r4, pc}
    340a:	f640 31a7 	movw	r1, #2983	; 0xba7
    340e:	2032      	movs	r0, #50	; 0x32
    3410:	f7fd fb28 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3414:	200000d0 	.word	0x200000d0

00003418 <sym_K7SQKMVWESLZUZE22L4CEOMCL4JSVJET4SYEPLI>:
    3418:	4902      	ldr	r1, [pc, #8]	; (3424 <sym_K7SQKMVWESLZUZE22L4CEOMCL4JSVJET4SYEPLI+0xc>)
    341a:	4801      	ldr	r0, [pc, #4]	; (3420 <sym_K7SQKMVWESLZUZE22L4CEOMCL4JSVJET4SYEPLI+0x8>)
    341c:	60c8      	str	r0, [r1, #12]
    341e:	4770      	bx	lr
    3420:	000044e8 	.word	0x000044e8
    3424:	200000d0 	.word	0x200000d0

00003428 <sym_WYXBJE6NWBKILRWDCM2MMYJSSQVAUS4Y4CIL3JA>:
    3428:	4902      	ldr	r1, [pc, #8]	; (3434 <sym_WYXBJE6NWBKILRWDCM2MMYJSSQVAUS4Y4CIL3JA+0xc>)
    342a:	6849      	ldr	r1, [r1, #4]
    342c:	f881 0048 	strb.w	r0, [r1, #72]	; 0x48
    3430:	4770      	bx	lr
    3432:	0000      	.short	0x0000
    3434:	200000d0 	.word	0x200000d0

00003438 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY>:
    3438:	b570      	push	{r4, r5, r6, lr}
    343a:	4605      	mov	r5, r0
    343c:	f7fd ff0c 	bl	1258 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    3440:	4604      	mov	r4, r0
    3442:	f7fd ff0f 	bl	1264 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    3446:	4621      	mov	r1, r4
    3448:	f00b f9d5 	bl	e7f6 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x8c>
    344c:	0001      	movs	r1, r0
    344e:	d006      	beq.n	345e <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY+0x26>
    3450:	4805      	ldr	r0, [pc, #20]	; (3468 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY+0x30>)
    3452:	68c0      	ldr	r0, [r0, #12]
    3454:	6802      	ldr	r2, [r0, #0]
    3456:	4628      	mov	r0, r5
    3458:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    345c:	4710      	bx	r2
    345e:	f640 21ab 	movw	r1, #2731	; 0xaab
    3462:	2032      	movs	r0, #50	; 0x32
    3464:	f7fd fafe 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3468:	200000d0 	.word	0x200000d0

0000346c <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>:
    346c:	b570      	push	{r4, r5, r6, lr}
    346e:	4d19      	ldr	r5, [pc, #100]	; (34d4 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x68>)
    3470:	4604      	mov	r4, r0
    3472:	6868      	ldr	r0, [r5, #4]
    3474:	f890 1070 	ldrb.w	r1, [r0, #112]	; 0x70
    3478:	2901      	cmp	r1, #1
    347a:	d004      	beq.n	3486 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x1a>
    347c:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    3480:	b108      	cbz	r0, 3486 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x1a>
    3482:	200c      	movs	r0, #12
    3484:	bd70      	pop	{r4, r5, r6, pc}
    3486:	f7fd ff11 	bl	12ac <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ>
    348a:	f00b fa9c 	bl	e9c6 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY>
    348e:	f000 f8c1 	bl	3614 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    3492:	2246      	movs	r2, #70	; 0x46
    3494:	2100      	movs	r1, #0
    3496:	6868      	ldr	r0, [r5, #4]
    3498:	f00d f963 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    349c:	6869      	ldr	r1, [r5, #4]
    349e:	2200      	movs	r2, #0
    34a0:	2001      	movs	r0, #1
    34a2:	f881 205d 	strb.w	r2, [r1, #93]	; 0x5d
    34a6:	f881 0051 	strb.w	r0, [r1, #81]	; 0x51
    34aa:	f881 2058 	strb.w	r2, [r1, #88]	; 0x58
    34ae:	f881 207a 	strb.w	r2, [r1, #122]	; 0x7a
    34b2:	f881 405e 	strb.w	r4, [r1, #94]	; 0x5e
    34b6:	f881 2098 	strb.w	r2, [r1, #152]	; 0x98
    34ba:	2007      	movs	r0, #7
    34bc:	f881 0050 	strb.w	r0, [r1, #80]	; 0x50
    34c0:	f101 006d 	add.w	r0, r1, #109	; 0x6d
    34c4:	23ff      	movs	r3, #255	; 0xff
    34c6:	7003      	strb	r3, [r0, #0]
    34c8:	f881 206c 	strb.w	r2, [r1, #108]	; 0x6c
    34cc:	668a      	str	r2, [r1, #104]	; 0x68
    34ce:	7002      	strb	r2, [r0, #0]
    34d0:	2000      	movs	r0, #0
    34d2:	bd70      	pop	{r4, r5, r6, pc}
    34d4:	200000d0 	.word	0x200000d0

000034d8 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ>:
    34d8:	4805      	ldr	r0, [pc, #20]	; (34f0 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ+0x18>)
    34da:	b510      	push	{r4, lr}
    34dc:	6840      	ldr	r0, [r0, #4]
    34de:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
    34e2:	f00b f931 	bl	e748 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xb8>
    34e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    34ea:	f7fe b8c7 	b.w	167c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    34ee:	0000      	.short	0x0000
    34f0:	200000d0 	.word	0x200000d0

000034f4 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q>:
    34f4:	b140      	cbz	r0, 3508 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x14>
    34f6:	2802      	cmp	r0, #2
    34f8:	d006      	beq.n	3508 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x14>
    34fa:	2200      	movs	r2, #0
    34fc:	4903      	ldr	r1, [pc, #12]	; (350c <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x18>)
    34fe:	6849      	ldr	r1, [r1, #4]
    3500:	f801 2f51 	strb.w	r2, [r1, #81]!
    3504:	7208      	strb	r0, [r1, #8]
    3506:	4770      	bx	lr
    3508:	2201      	movs	r2, #1
    350a:	e7f7      	b.n	34fc <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x8>
    350c:	200000d0 	.word	0x200000d0

00003510 <sym_2QCSOYKJNF32ZBJORU6CJN7O5NDB7M3GD4LTM7A>:
    3510:	4902      	ldr	r1, [pc, #8]	; (351c <sym_2QCSOYKJNF32ZBJORU6CJN7O5NDB7M3GD4LTM7A+0xc>)
    3512:	6849      	ldr	r1, [r1, #4]
    3514:	f881 0050 	strb.w	r0, [r1, #80]	; 0x50
    3518:	4770      	bx	lr
    351a:	0000      	.short	0x0000
    351c:	200000d0 	.word	0x200000d0

00003520 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY>:
    3520:	b510      	push	{r4, lr}
    3522:	4603      	mov	r3, r0
    3524:	7800      	ldrb	r0, [r0, #0]
    3526:	07c0      	lsls	r0, r0, #31
    3528:	d005      	beq.n	3536 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x16>
    352a:	7858      	ldrb	r0, [r3, #1]
    352c:	2100      	movs	r1, #0
    352e:	f7ff fe91 	bl	3254 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>
    3532:	2800      	cmp	r0, #0
    3534:	d10c      	bne.n	3550 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x30>
    3536:	4c07      	ldr	r4, [pc, #28]	; (3554 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x34>)
    3538:	7898      	ldrb	r0, [r3, #2]
    353a:	6861      	ldr	r1, [r4, #4]
    353c:	f881 0048 	strb.w	r0, [r1, #72]	; 0x48
    3540:	78d8      	ldrb	r0, [r3, #3]
    3542:	f7ff ffd7 	bl	34f4 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q>
    3546:	6861      	ldr	r1, [r4, #4]
    3548:	7918      	ldrb	r0, [r3, #4]
    354a:	f881 0050 	strb.w	r0, [r1, #80]	; 0x50
    354e:	2000      	movs	r0, #0
    3550:	bd10      	pop	{r4, pc}
    3552:	0000      	.short	0x0000
    3554:	200000d0 	.word	0x200000d0

00003558 <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY>:
    3558:	4801      	ldr	r0, [pc, #4]	; (3560 <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY+0x8>)
    355a:	68c0      	ldr	r0, [r0, #12]
    355c:	6840      	ldr	r0, [r0, #4]
    355e:	4700      	bx	r0
    3560:	200000d0 	.word	0x200000d0

00003564 <sym_FLBXO3C2TGTXVEYELOG5B33ZBUVUNXUU6YZL7TY>:
    3564:	4807      	ldr	r0, [pc, #28]	; (3584 <sym_FLBXO3C2TGTXVEYELOG5B33ZBUVUNXUU6YZL7TY+0x20>)
    3566:	b508      	push	{r3, lr}
    3568:	6840      	ldr	r0, [r0, #4]
    356a:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    356e:	f88d 0000 	strb.w	r0, [sp]
    3572:	9800      	ldr	r0, [sp, #0]
    3574:	9000      	str	r0, [sp, #0]
    3576:	f89d 0000 	ldrb.w	r0, [sp]
    357a:	2800      	cmp	r0, #0
    357c:	d000      	beq.n	3580 <sym_FLBXO3C2TGTXVEYELOG5B33ZBUVUNXUU6YZL7TY+0x1c>
    357e:	2001      	movs	r0, #1
    3580:	bd08      	pop	{r3, pc}
    3582:	0000      	.short	0x0000
    3584:	200000d0 	.word	0x200000d0

00003588 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y>:
    3588:	b510      	push	{r4, lr}
    358a:	f000 f951 	bl	3830 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x258>
    358e:	4b0c      	ldr	r3, [pc, #48]	; (35c0 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x38>)
    3590:	b140      	cbz	r0, 35a4 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x1c>
    3592:	6858      	ldr	r0, [r3, #4]
    3594:	2101      	movs	r1, #1
    3596:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
    359a:	6d41      	ldr	r1, [r0, #84]	; 0x54
    359c:	8809      	ldrh	r1, [r1, #0]
    359e:	f8a0 1044 	strh.w	r1, [r0, #68]	; 0x44
    35a2:	e004      	b.n	35ae <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x26>
    35a4:	6859      	ldr	r1, [r3, #4]
    35a6:	2000      	movs	r0, #0
    35a8:	f801 0f42 	strb.w	r0, [r1, #66]!
    35ac:	8048      	strh	r0, [r1, #2]
    35ae:	6858      	ldr	r0, [r3, #4]
    35b0:	2217      	movs	r2, #23
    35b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    35b6:	4903      	ldr	r1, [pc, #12]	; (35c4 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x3c>)
    35b8:	3038      	adds	r0, #56	; 0x38
    35ba:	f00a bdb0 	b.w	e11e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    35be:	0000      	.short	0x0000
    35c0:	200000d0 	.word	0x200000d0
    35c4:	00004245 	.word	0x00004245

000035c8 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>:
    35c8:	4802      	ldr	r0, [pc, #8]	; (35d4 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q+0xc>)
    35ca:	6840      	ldr	r0, [r0, #4]
    35cc:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    35d0:	4770      	bx	lr
    35d2:	0000      	.short	0x0000
    35d4:	200000d0 	.word	0x200000d0

000035d8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>:
    35d8:	b510      	push	{r4, lr}
    35da:	f000 f929 	bl	3830 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x258>
    35de:	490c      	ldr	r1, [pc, #48]	; (3610 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x38>)
    35e0:	b128      	cbz	r0, 35ee <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x16>
    35e2:	6848      	ldr	r0, [r1, #4]
    35e4:	f890 005a 	ldrb.w	r0, [r0, #90]	; 0x5a
    35e8:	2801      	cmp	r0, #1
    35ea:	d00e      	beq.n	360a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x32>
    35ec:	e00c      	b.n	3608 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x30>
    35ee:	6849      	ldr	r1, [r1, #4]
    35f0:	f891 0058 	ldrb.w	r0, [r1, #88]	; 0x58
    35f4:	2801      	cmp	r0, #1
    35f6:	d001      	beq.n	35fc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x24>
    35f8:	2802      	cmp	r0, #2
    35fa:	d105      	bne.n	3608 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x30>
    35fc:	f891 0059 	ldrb.w	r0, [r1, #89]	; 0x59
    3600:	2801      	cmp	r0, #1
    3602:	d003      	beq.n	360c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x34>
    3604:	2803      	cmp	r0, #3
    3606:	d001      	beq.n	360c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x34>
    3608:	2000      	movs	r0, #0
    360a:	bd10      	pop	{r4, pc}
    360c:	2001      	movs	r0, #1
    360e:	bd10      	pop	{r4, pc}
    3610:	200000d0 	.word	0x200000d0
    3614:	b510      	push	{r4, lr}
    3616:	4c07      	ldr	r4, [pc, #28]	; (3634 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5c>)
    3618:	6860      	ldr	r0, [r4, #4]
    361a:	f890 007c 	ldrb.w	r0, [r0, #124]	; 0x7c
    361e:	2800      	cmp	r0, #0
    3620:	d007      	beq.n	3632 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5a>
    3622:	f004 fb23 	bl	7c6c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    3626:	f004 f947 	bl	78b8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    362a:	6861      	ldr	r1, [r4, #4]
    362c:	2000      	movs	r0, #0
    362e:	f881 007c 	strb.w	r0, [r1, #124]	; 0x7c
    3632:	bd10      	pop	{r4, pc}
    3634:	200000d0 	.word	0x200000d0
    3638:	b518      	push	{r3, r4, lr}
    363a:	2300      	movs	r3, #0
    363c:	704b      	strb	r3, [r1, #1]
    363e:	2207      	movs	r2, #7
    3640:	700a      	strb	r2, [r1, #0]
    3642:	4a07      	ldr	r2, [pc, #28]	; (3660 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x88>)
    3644:	6852      	ldr	r2, [r2, #4]
    3646:	7203      	strb	r3, [r0, #8]
    3648:	6b54      	ldr	r4, [r2, #52]	; 0x34
    364a:	604c      	str	r4, [r1, #4]
    364c:	7a04      	ldrb	r4, [r0, #8]
    364e:	f88d 4000 	strb.w	r4, [sp]
    3652:	9c00      	ldr	r4, [sp, #0]
    3654:	9400      	str	r4, [sp, #0]
    3656:	f89d 4000 	ldrb.w	r4, [sp]
    365a:	2c00      	cmp	r4, #0
    365c:	d1f3      	bne.n	3646 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6e>
    365e:	bd18      	pop	{r3, r4, pc}
    3660:	200000d0 	.word	0x200000d0
    3664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3668:	4d10      	ldr	r5, [pc, #64]	; (36ac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xd4>)
    366a:	4606      	mov	r6, r0
    366c:	460f      	mov	r7, r1
    366e:	6868      	ldr	r0, [r5, #4]
    3670:	490f      	ldr	r1, [pc, #60]	; (36b0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xd8>)
    3672:	f890 007a 	ldrb.w	r0, [r0, #122]	; 0x7a
    3676:	5c0c      	ldrb	r4, [r1, r0]
    3678:	4620      	mov	r0, r4
    367a:	f004 fe37 	bl	82ec <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    367e:	6868      	ldr	r0, [r5, #4]
    3680:	2101      	movs	r1, #1
    3682:	f880 4088 	strb.w	r4, [r0, #136]	; 0x88
    3686:	2025      	movs	r0, #37	; 0x25
    3688:	f004 fe06 	bl	8298 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    368c:	4638      	mov	r0, r7
    368e:	f004 fd39 	bl	8104 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    3692:	f04f 0101 	mov.w	r1, #1
    3696:	4608      	mov	r0, r1
    3698:	b126      	cbz	r6, 36a4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xcc>
    369a:	f004 fb93 	bl	7dc4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    369e:	b918      	cbnz	r0, 36a8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xd0>
    36a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    36a4:	f004 fb54 	bl	7d50 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    36a8:	2001      	movs	r0, #1
    36aa:	e7f9      	b.n	36a0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc8>
    36ac:	200000d0 	.word	0x200000d0
    36b0:	000108d7 	.word	0x000108d7
    36b4:	b570      	push	{r4, r5, r6, lr}
    36b6:	4e1a      	ldr	r6, [pc, #104]	; (3720 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x148>)
    36b8:	460c      	mov	r4, r1
    36ba:	6870      	ldr	r0, [r6, #4]
    36bc:	7a41      	ldrb	r1, [r0, #9]
    36be:	b191      	cbz	r1, 36e6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x10e>
    36c0:	8940      	ldrh	r0, [r0, #10]
    36c2:	2100      	movs	r1, #0
    36c4:	f00a f858 	bl	d778 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    36c8:	0005      	movs	r5, r0
    36ca:	d025      	beq.n	3718 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x140>
    36cc:	8828      	ldrh	r0, [r5, #0]
    36ce:	f00a f8da 	bl	d886 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    36d2:	8828      	ldrh	r0, [r5, #0]
    36d4:	2100      	movs	r1, #0
    36d6:	f7fd fc29 	bl	f2c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    36da:	b188      	cbz	r0, 3700 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x128>
    36dc:	f240 31f2 	movw	r1, #1010	; 0x3f2
    36e0:	2032      	movs	r0, #50	; 0x32
    36e2:	f7fd f9bf 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    36e6:	6d41      	ldr	r1, [r0, #84]	; 0x54
    36e8:	f8d0 200e 	ldr.w	r2, [r0, #14]
    36ec:	f841 2f03 	str.w	r2, [r1, #3]!
    36f0:	8a42      	ldrh	r2, [r0, #18]
    36f2:	808a      	strh	r2, [r1, #4]
    36f4:	7b40      	ldrb	r0, [r0, #13]
    36f6:	f00b f827 	bl	e748 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xb8>
    36fa:	6871      	ldr	r1, [r6, #4]
    36fc:	6d49      	ldr	r1, [r1, #84]	; 0x54
    36fe:	7088      	strb	r0, [r1, #2]
    3700:	2500      	movs	r5, #0
    3702:	7065      	strb	r5, [r4, #1]
    3704:	2015      	movs	r0, #21
    3706:	7020      	strb	r0, [r4, #0]
    3708:	6871      	ldr	r1, [r6, #4]
    370a:	2221      	movs	r2, #33	; 0x21
    370c:	1d20      	adds	r0, r4, #4
    370e:	3109      	adds	r1, #9
    3710:	f00c ffad 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3714:	71e5      	strb	r5, [r4, #7]
    3716:	bd70      	pop	{r4, r5, r6, pc}
    3718:	f240 31ee 	movw	r1, #1006	; 0x3ee
    371c:	e7e0      	b.n	36e0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x108>
    371e:	0000      	.short	0x0000
    3720:	200000d0 	.word	0x200000d0
    3724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3726:	2600      	movs	r6, #0
    3728:	460f      	mov	r7, r1
    372a:	4605      	mov	r5, r0
    372c:	f88d 6000 	strb.w	r6, [sp]
    3730:	466b      	mov	r3, sp
    3732:	f000 f895 	bl	3860 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x288>
    3736:	0001      	movs	r1, r0
    3738:	4810      	ldr	r0, [pc, #64]	; (377c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1a4>)
    373a:	d003      	beq.n	3744 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x16c>
    373c:	6840      	ldr	r0, [r0, #4]
    373e:	f880 6081 	strb.w	r6, [r0, #129]	; 0x81
    3742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3744:	6840      	ldr	r0, [r0, #4]
    3746:	f89d 1000 	ldrb.w	r1, [sp]
    374a:	2f07      	cmp	r7, #7
    374c:	f890 4051 	ldrb.w	r4, [r0, #81]	; 0x51
    3750:	d301      	bcc.n	3756 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x17e>
    3752:	4634      	mov	r4, r6
    3754:	e002      	b.n	375c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x184>
    3756:	0022      	movs	r2, r4
    3758:	d100      	bne.n	375c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x184>
    375a:	460c      	mov	r4, r1
    375c:	f880 4081 	strb.w	r4, [r0, #129]	; 0x81
    3760:	6869      	ldr	r1, [r5, #4]
    3762:	2900      	cmp	r1, #0
    3764:	d0ed      	beq.n	3742 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x16a>
    3766:	7c69      	ldrb	r1, [r5, #17]
    3768:	f880 1089 	strb.w	r1, [r0, #137]	; 0x89
    376c:	6869      	ldr	r1, [r5, #4]
    376e:	680a      	ldr	r2, [r1, #0]
    3770:	f840 2f82 	str.w	r2, [r0, #130]!
    3774:	8889      	ldrh	r1, [r1, #4]
    3776:	8081      	strh	r1, [r0, #4]
    3778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    377a:	0000      	.short	0x0000
    377c:	200000d0 	.word	0x200000d0
    3780:	b510      	push	{r4, lr}
    3782:	4915      	ldr	r1, [pc, #84]	; (37d8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x200>)
    3784:	6842      	ldr	r2, [r0, #4]
    3786:	6849      	ldr	r1, [r1, #4]
    3788:	7813      	ldrb	r3, [r2, #0]
    378a:	f891 4082 	ldrb.w	r4, [r1, #130]	; 0x82
    378e:	42a3      	cmp	r3, r4
    3790:	d11f      	bne.n	37d2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1fa>
    3792:	7853      	ldrb	r3, [r2, #1]
    3794:	f891 4083 	ldrb.w	r4, [r1, #131]	; 0x83
    3798:	42a3      	cmp	r3, r4
    379a:	d11a      	bne.n	37d2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1fa>
    379c:	7893      	ldrb	r3, [r2, #2]
    379e:	f891 4084 	ldrb.w	r4, [r1, #132]	; 0x84
    37a2:	42a3      	cmp	r3, r4
    37a4:	d115      	bne.n	37d2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1fa>
    37a6:	78d3      	ldrb	r3, [r2, #3]
    37a8:	f891 4085 	ldrb.w	r4, [r1, #133]	; 0x85
    37ac:	42a3      	cmp	r3, r4
    37ae:	d110      	bne.n	37d2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1fa>
    37b0:	7913      	ldrb	r3, [r2, #4]
    37b2:	f891 4086 	ldrb.w	r4, [r1, #134]	; 0x86
    37b6:	42a3      	cmp	r3, r4
    37b8:	d10b      	bne.n	37d2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1fa>
    37ba:	7952      	ldrb	r2, [r2, #5]
    37bc:	f891 3087 	ldrb.w	r3, [r1, #135]	; 0x87
    37c0:	429a      	cmp	r2, r3
    37c2:	d106      	bne.n	37d2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1fa>
    37c4:	7c40      	ldrb	r0, [r0, #17]
    37c6:	f891 1089 	ldrb.w	r1, [r1, #137]	; 0x89
    37ca:	4288      	cmp	r0, r1
    37cc:	d101      	bne.n	37d2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1fa>
    37ce:	2001      	movs	r0, #1
    37d0:	bd10      	pop	{r4, pc}
    37d2:	2000      	movs	r0, #0
    37d4:	bd10      	pop	{r4, pc}
    37d6:	0000      	.short	0x0000
    37d8:	200000d0 	.word	0x200000d0
    37dc:	b510      	push	{r4, lr}
    37de:	7801      	ldrb	r1, [r0, #0]
    37e0:	b08c      	sub	sp, #48	; 0x30
    37e2:	f001 040f 	and.w	r4, r1, #15
    37e6:	4622      	mov	r2, r4
    37e8:	a901      	add	r1, sp, #4
    37ea:	f000 ff0b 	bl	4604 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    37ee:	f004 fa5f 	bl	7cb0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    37f2:	f000 fba1 	bl	3f38 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x960>
    37f6:	2c04      	cmp	r4, #4
    37f8:	d114      	bne.n	3824 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x24c>
    37fa:	a801      	add	r0, sp, #4
    37fc:	f7ff ffc0 	bl	3780 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1a8>
    3800:	b180      	cbz	r0, 3824 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x24c>
    3802:	a80b      	add	r0, sp, #44	; 0x2c
    3804:	f000 fba0 	bl	3f48 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x970>
    3808:	f99d 002c 	ldrsb.w	r0, [sp, #44]	; 0x2c
    380c:	9000      	str	r0, [sp, #0]
    380e:	4807      	ldr	r0, [pc, #28]	; (382c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x254>)
    3810:	6840      	ldr	r0, [r0, #4]
    3812:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
    3816:	f890 2098 	ldrb.w	r2, [r0, #152]	; 0x98
    381a:	f890 1079 	ldrb.w	r1, [r0, #121]	; 0x79
    381e:	a801      	add	r0, sp, #4
    3820:	f00b f886 	bl	e930 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI>
    3824:	b00c      	add	sp, #48	; 0x30
    3826:	2005      	movs	r0, #5
    3828:	bd10      	pop	{r4, pc}
    382a:	0000      	.short	0x0000
    382c:	200000d0 	.word	0x200000d0
    3830:	4804      	ldr	r0, [pc, #16]	; (3844 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x26c>)
    3832:	6840      	ldr	r0, [r0, #4]
    3834:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    3838:	2803      	cmp	r0, #3
    383a:	d001      	beq.n	3840 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x268>
    383c:	2000      	movs	r0, #0
    383e:	4770      	bx	lr
    3840:	2001      	movs	r0, #1
    3842:	4770      	bx	lr
    3844:	200000d0 	.word	0x200000d0
    3848:	7c82      	ldrb	r2, [r0, #18]
    384a:	6883      	ldr	r3, [r0, #8]
    384c:	4803      	ldr	r0, [pc, #12]	; (385c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x284>)
    384e:	6841      	ldr	r1, [r0, #4]
    3850:	f891 0049 	ldrb.w	r0, [r1, #73]	; 0x49
    3854:	314a      	adds	r1, #74	; 0x4a
    3856:	f00a b81a 	b.w	d88e <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    385a:	0000      	.short	0x0000
    385c:	200000d0 	.word	0x200000d0
    3860:	b570      	push	{r4, r5, r6, lr}
    3862:	6841      	ldr	r1, [r0, #4]
    3864:	461e      	mov	r6, r3
    3866:	4604      	mov	r4, r0
    3868:	b1c1      	cbz	r1, 389c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2c4>
    386a:	7c60      	ldrb	r0, [r4, #17]
    386c:	f00a ff61 	bl	e732 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xa2>
    3870:	4d10      	ldr	r5, [pc, #64]	; (38b4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2dc>)
    3872:	6869      	ldr	r1, [r5, #4]
    3874:	f891 107c 	ldrb.w	r1, [r1, #124]	; 0x7c
    3878:	b141      	cbz	r1, 388c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2b4>
    387a:	b138      	cbz	r0, 388c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2b4>
    387c:	f00a f8b9 	bl	d9f2 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    3880:	6869      	ldr	r1, [r5, #4]
    3882:	f801 0f78 	strb.w	r0, [r1, #120]!
    3886:	7048      	strb	r0, [r1, #1]
    3888:	2001      	movs	r0, #1
    388a:	71c8      	strb	r0, [r1, #7]
    388c:	686b      	ldr	r3, [r5, #4]
    388e:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
    3892:	28ff      	cmp	r0, #255	; 0xff
    3894:	d004      	beq.n	38a0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2c8>
    3896:	f7fe fcdb 	bl	2250 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    389a:	7030      	strb	r0, [r6, #0]
    389c:	2000      	movs	r0, #0
    389e:	bd70      	pop	{r4, r5, r6, pc}
    38a0:	7c60      	ldrb	r0, [r4, #17]
    38a2:	4632      	mov	r2, r6
    38a4:	3378      	adds	r3, #120	; 0x78
    38a6:	6861      	ldr	r1, [r4, #4]
    38a8:	f7fe fcea 	bl	2280 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A>
    38ac:	f080 0001 	eor.w	r0, r0, #1
    38b0:	bd70      	pop	{r4, r5, r6, pc}
    38b2:	0000      	.short	0x0000
    38b4:	200000d0 	.word	0x200000d0
    38b8:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    38bc:	4c40      	ldr	r4, [pc, #256]	; (39c0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3e8>)
    38be:	2500      	movs	r5, #0
    38c0:	466f      	mov	r7, sp
    38c2:	6860      	ldr	r0, [r4, #4]
    38c4:	7245      	strb	r5, [r0, #9]
    38c6:	6d41      	ldr	r1, [r0, #84]	; 0x54
    38c8:	880a      	ldrh	r2, [r1, #0]
    38ca:	8142      	strh	r2, [r0, #10]
    38cc:	6908      	ldr	r0, [r1, #16]
    38ce:	f00a f8fc 	bl	daca <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    38d2:	6861      	ldr	r1, [r4, #4]
    38d4:	f821 0f20 	strh.w	r0, [r1, #32]!
    38d8:	6b48      	ldr	r0, [r1, #52]	; 0x34
    38da:	8b02      	ldrh	r2, [r0, #24]
    38dc:	804a      	strh	r2, [r1, #2]
    38de:	8b40      	ldrh	r0, [r0, #26]
    38e0:	8088      	strh	r0, [r1, #4]
    38e2:	718d      	strb	r5, [r1, #6]
    38e4:	20ff      	movs	r0, #255	; 0xff
    38e6:	71c8      	strb	r0, [r1, #7]
    38e8:	f64f 70ff 	movw	r0, #65535	; 0xffff
    38ec:	8108      	strh	r0, [r1, #8]
    38ee:	4669      	mov	r1, sp
    38f0:	68a0      	ldr	r0, [r4, #8]
    38f2:	f00a fb24 	bl	df3e <sym_SKY6LLKHYM3MTKIUASL3OKO4LAKLVGGKKAJ3I2Y>
    38f6:	68a0      	ldr	r0, [r4, #8]
    38f8:	7800      	ldrb	r0, [r0, #0]
    38fa:	f3c0 1680 	ubfx	r6, r0, #6, #1
    38fe:	6860      	ldr	r0, [r4, #4]
    3900:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    3904:	b120      	cbz	r0, 3910 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x338>
    3906:	4639      	mov	r1, r7
    3908:	4630      	mov	r0, r6
    390a:	f00a ff12 	bl	e732 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xa2>
    390e:	b940      	cbnz	r0, 3922 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x34a>
    3910:	6860      	ldr	r0, [r4, #4]
    3912:	f890 005d 	ldrb.w	r0, [r0, #93]	; 0x5d
    3916:	b158      	cbz	r0, 3930 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x358>
    3918:	4639      	mov	r1, r7
    391a:	4630      	mov	r0, r6
    391c:	f00a ff00 	bl	e720 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x90>
    3920:	b130      	cbz	r0, 3930 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x358>
    3922:	6860      	ldr	r0, [r4, #4]
    3924:	9900      	ldr	r1, [sp, #0]
    3926:	6141      	str	r1, [r0, #20]
    3928:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    392c:	8301      	strh	r1, [r0, #24]
    392e:	e002      	b.n	3936 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x35e>
    3930:	6860      	ldr	r0, [r4, #4]
    3932:	6145      	str	r5, [r0, #20]
    3934:	8305      	strh	r5, [r0, #24]
    3936:	6861      	ldr	r1, [r4, #4]
    3938:	f891 0079 	ldrb.w	r0, [r1, #121]	; 0x79
    393c:	28ff      	cmp	r0, #255	; 0xff
    393e:	d017      	beq.n	3970 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x398>
    3940:	f101 020e 	add.w	r2, r1, #14
    3944:	310d      	adds	r1, #13
    3946:	f7fe fc69 	bl	221c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    394a:	b160      	cbz	r0, 3966 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x38e>
    394c:	6860      	ldr	r0, [r4, #4]
    394e:	7b41      	ldrb	r1, [r0, #13]
    3950:	f041 0102 	orr.w	r1, r1, #2
    3954:	7341      	strb	r1, [r0, #13]
    3956:	f8d0 1082 	ldr.w	r1, [r0, #130]	; 0x82
    395a:	f8c0 101a 	str.w	r1, [r0, #26]
    395e:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
    3962:	83c1      	strh	r1, [r0, #30]
    3964:	e010      	b.n	3988 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3b0>
    3966:	f241 5197 	movw	r1, #5527	; 0x1597
    396a:	2032      	movs	r0, #50	; 0x32
    396c:	f7fd f87a 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3970:	f891 0089 	ldrb.w	r0, [r1, #137]	; 0x89
    3974:	7348      	strb	r0, [r1, #13]
    3976:	f8d1 0082 	ldr.w	r0, [r1, #130]	; 0x82
    397a:	f841 0f0e 	str.w	r0, [r1, #14]!
    397e:	f8b1 0078 	ldrh.w	r0, [r1, #120]	; 0x78
    3982:	8088      	strh	r0, [r1, #4]
    3984:	60cd      	str	r5, [r1, #12]
    3986:	820d      	strh	r5, [r1, #16]
    3988:	6860      	ldr	r0, [r4, #4]
    398a:	6d42      	ldr	r2, [r0, #84]	; 0x54
    398c:	f890 105e 	ldrb.w	r1, [r0, #94]	; 0x5e
    3990:	f882 106e 	strb.w	r1, [r2, #110]	; 0x6e
    3994:	2212      	movs	r2, #18
    3996:	490b      	ldr	r1, [pc, #44]	; (39c4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3ec>)
    3998:	f00a fbc1 	bl	e11e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    399c:	6860      	ldr	r0, [r4, #4]
    399e:	6d41      	ldr	r1, [r0, #84]	; 0x54
    39a0:	302a      	adds	r0, #42	; 0x2a
    39a2:	880a      	ldrh	r2, [r1, #0]
    39a4:	4908      	ldr	r1, [pc, #32]	; (39c8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3f0>)
    39a6:	868a      	strh	r2, [r1, #52]	; 0x34
    39a8:	6d4a      	ldr	r2, [r1, #84]	; 0x54
    39aa:	f892 20ad 	ldrb.w	r2, [r2, #173]	; 0xad
    39ae:	f881 2036 	strb.w	r2, [r1, #54]	; 0x36
    39b2:	2206      	movs	r2, #6
    39b4:	4905      	ldr	r1, [pc, #20]	; (39cc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3f4>)
    39b6:	f00a fbc6 	bl	e146 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    39ba:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    39be:	0000      	.short	0x0000
    39c0:	200000d0 	.word	0x200000d0
    39c4:	000036b5 	.word	0x000036b5
    39c8:	20000ca8 	.word	0x20000ca8
    39cc:	00003639 	.word	0x00003639
    39d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    39d4:	4c4c      	ldr	r4, [pc, #304]	; (3b08 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x530>)
    39d6:	4606      	mov	r6, r0
    39d8:	2100      	movs	r1, #0
    39da:	e9d4 5001 	ldrd	r5, r0, [r4, #4]
    39de:	3570      	adds	r5, #112	; 0x70
    39e0:	8001      	strh	r1, [r0, #0]
    39e2:	2e03      	cmp	r6, #3
    39e4:	d002      	beq.n	39ec <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x414>
    39e6:	2e05      	cmp	r6, #5
    39e8:	d004      	beq.n	39f4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x41c>
    39ea:	e051      	b.n	3a90 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4b8>
    39ec:	2103      	movs	r1, #3
    39ee:	f00a fabd 	bl	df6c <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    39f2:	e04d      	b.n	3a90 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4b8>
    39f4:	2105      	movs	r1, #5
    39f6:	f00a fab9 	bl	df6c <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    39fa:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
    39fe:	6d41      	ldr	r1, [r0, #84]	; 0x54
    3a00:	6949      	ldr	r1, [r1, #20]
    3a02:	f8c7 100f 	str.w	r1, [r7, #15]
    3a06:	6d41      	ldr	r1, [r0, #84]	; 0x54
    3a08:	69c9      	ldr	r1, [r1, #28]
    3a0a:	74f9      	strb	r1, [r7, #19]
    3a0c:	0a0a      	lsrs	r2, r1, #8
    3a0e:	753a      	strb	r2, [r7, #20]
    3a10:	0c09      	lsrs	r1, r1, #16
    3a12:	7579      	strb	r1, [r7, #21]
    3a14:	6d40      	ldr	r0, [r0, #84]	; 0x54
    3a16:	6901      	ldr	r1, [r0, #16]
    3a18:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    3a1a:	f00a f9dd 	bl	ddd8 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>
    3a1e:	75b8      	strb	r0, [r7, #22]
    3a20:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
    3a24:	6d40      	ldr	r0, [r0, #84]	; 0x54
    3a26:	6901      	ldr	r1, [r0, #16]
    3a28:	6a00      	ldr	r0, [r0, #32]
    3a2a:	f00a f9be 	bl	ddaa <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>
    3a2e:	75f8      	strb	r0, [r7, #23]
    3a30:	0a00      	lsrs	r0, r0, #8
    3a32:	7638      	strb	r0, [r7, #24]
    3a34:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
    3a38:	6d40      	ldr	r0, [r0, #84]	; 0x54
    3a3a:	6900      	ldr	r0, [r0, #16]
    3a3c:	f00a f845 	bl	daca <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    3a40:	7678      	strb	r0, [r7, #25]
    3a42:	0a00      	lsrs	r0, r0, #8
    3a44:	76b8      	strb	r0, [r7, #26]
    3a46:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
    3a4a:	6d41      	ldr	r1, [r0, #84]	; 0x54
    3a4c:	8b09      	ldrh	r1, [r1, #24]
    3a4e:	f807 1f1b 	strb.w	r1, [r7, #27]!
    3a52:	0a09      	lsrs	r1, r1, #8
    3a54:	7079      	strb	r1, [r7, #1]
    3a56:	6d41      	ldr	r1, [r0, #84]	; 0x54
    3a58:	8b49      	ldrh	r1, [r1, #26]
    3a5a:	70b9      	strb	r1, [r7, #2]
    3a5c:	0a09      	lsrs	r1, r1, #8
    3a5e:	70f9      	strb	r1, [r7, #3]
    3a60:	6d41      	ldr	r1, [r0, #84]	; 0x54
    3a62:	f851 2fae 	ldr.w	r2, [r1, #174]!
    3a66:	607a      	str	r2, [r7, #4]
    3a68:	7909      	ldrb	r1, [r1, #4]
    3a6a:	7239      	strb	r1, [r7, #8]
    3a6c:	6d40      	ldr	r0, [r0, #84]	; 0x54
    3a6e:	f890 10b9 	ldrb.w	r1, [r0, #185]	; 0xb9
    3a72:	7a78      	ldrb	r0, [r7, #9]
    3a74:	f001 011f 	and.w	r1, r1, #31
    3a78:	f000 00e0 	and.w	r0, r0, #224	; 0xe0
    3a7c:	4308      	orrs	r0, r1
    3a7e:	7278      	strb	r0, [r7, #9]
    3a80:	f003 fefa 	bl	7878 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY>
    3a84:	7a79      	ldrb	r1, [r7, #9]
    3a86:	f001 011f 	and.w	r1, r1, #31
    3a8a:	ea41 1140 	orr.w	r1, r1, r0, lsl #5
    3a8e:	7279      	strb	r1, [r7, #9]
    3a90:	f105 0112 	add.w	r1, r5, #18
    3a94:	68a0      	ldr	r0, [r4, #8]
    3a96:	f00a fa84 	bl	dfa2 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    3a9a:	7e69      	ldrb	r1, [r5, #25]
    3a9c:	68a0      	ldr	r0, [r4, #8]
    3a9e:	f00a fa86 	bl	dfae <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
    3aa2:	6860      	ldr	r0, [r4, #4]
    3aa4:	f100 054a 	add.w	r5, r0, #74	; 0x4a
    3aa8:	f890 7049 	ldrb.w	r7, [r0, #73]	; 0x49
    3aac:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    3ab0:	b188      	cbz	r0, 3ad6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4fe>
    3ab2:	f7ff febd 	bl	3830 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x258>
    3ab6:	b130      	cbz	r0, 3ac6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4ee>
    3ab8:	6860      	ldr	r0, [r4, #4]
    3aba:	f890 1051 	ldrb.w	r1, [r0, #81]	; 0x51
    3abe:	b111      	cbz	r1, 3ac6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4ee>
    3ac0:	f890 007b 	ldrb.w	r0, [r0, #123]	; 0x7b
    3ac4:	e002      	b.n	3acc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4f4>
    3ac6:	6860      	ldr	r0, [r4, #4]
    3ac8:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
    3acc:	f7fe fb78 	bl	21c0 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA>
    3ad0:	b108      	cbz	r0, 3ad6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4fe>
    3ad2:	2701      	movs	r7, #1
    3ad4:	4605      	mov	r5, r0
    3ad6:	4629      	mov	r1, r5
    3ad8:	68a0      	ldr	r0, [r4, #8]
    3ada:	f00a fa6f 	bl	dfbc <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>
    3ade:	4639      	mov	r1, r7
    3ae0:	68a0      	ldr	r0, [r4, #8]
    3ae2:	f00a fa71 	bl	dfc8 <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>
    3ae6:	68a0      	ldr	r0, [r4, #8]
    3ae8:	f004 fb0c 	bl	8104 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    3aec:	2e05      	cmp	r6, #5
    3aee:	d108      	bne.n	3b02 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x52a>
    3af0:	6860      	ldr	r0, [r4, #4]
    3af2:	682a      	ldr	r2, [r5, #0]
    3af4:	6d41      	ldr	r1, [r0, #84]	; 0x54
    3af6:	f8c1 200a 	str.w	r2, [r1, #10]
    3afa:	88aa      	ldrh	r2, [r5, #4]
    3afc:	81ca      	strh	r2, [r1, #14]
    3afe:	6d40      	ldr	r0, [r0, #84]	; 0x54
    3b00:	7247      	strb	r7, [r0, #9]
    3b02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3b06:	0000      	.short	0x0000
    3b08:	200000d0 	.word	0x200000d0
    3b0c:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    3b10:	4f65      	ldr	r7, [pc, #404]	; (3ca8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6d0>)
    3b12:	4604      	mov	r4, r0
    3b14:	6878      	ldr	r0, [r7, #4]
    3b16:	f890 8081 	ldrb.w	r8, [r0, #129]	; 0x81
    3b1a:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    3b1e:	b180      	cbz	r0, 3b42 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x56a>
    3b20:	2600      	movs	r6, #0
    3b22:	2500      	movs	r5, #0
    3b24:	7ca0      	ldrb	r0, [r4, #18]
    3b26:	68a1      	ldr	r1, [r4, #8]
    3b28:	f00a fe03 	bl	e732 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xa2>
    3b2c:	4682      	mov	sl, r0
    3b2e:	f7ff fe7f 	bl	3830 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x258>
    3b32:	b140      	cbz	r0, 3b46 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x56e>
    3b34:	6878      	ldr	r0, [r7, #4]
    3b36:	f890 1051 	ldrb.w	r1, [r0, #81]	; 0x51
    3b3a:	b121      	cbz	r1, 3b46 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x56e>
    3b3c:	f890 007b 	ldrb.w	r0, [r0, #123]	; 0x7b
    3b40:	e004      	b.n	3b4c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x574>
    3b42:	2601      	movs	r6, #1
    3b44:	e7ed      	b.n	3b22 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x54a>
    3b46:	6878      	ldr	r0, [r7, #4]
    3b48:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
    3b4c:	4683      	mov	fp, r0
    3b4e:	f7fe fae9 	bl	2124 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    3b52:	ea5f 0900 	movs.w	r9, r0
    3b56:	d00c      	beq.n	3b72 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x59a>
    3b58:	4658      	mov	r0, fp
    3b5a:	f7fe fad7 	bl	210c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    3b5e:	b100      	cbz	r0, 3b62 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x58a>
    3b60:	2601      	movs	r6, #1
    3b62:	f1ba 0f00 	cmp.w	sl, #0
    3b66:	d004      	beq.n	3b72 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x59a>
    3b68:	4648      	mov	r0, r9
    3b6a:	68a1      	ldr	r1, [r4, #8]
    3b6c:	f009 fef4 	bl	d958 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ>
    3b70:	4605      	mov	r5, r0
    3b72:	6878      	ldr	r0, [r7, #4]
    3b74:	46b9      	mov	r9, r7
    3b76:	f890 7049 	ldrb.w	r7, [r0, #73]	; 0x49
    3b7a:	b10d      	cbz	r5, 3b80 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5a8>
    3b7c:	f047 0702 	orr.w	r7, r7, #2
    3b80:	f7ff fe56 	bl	3830 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x258>
    3b84:	b3a0      	cbz	r0, 3bf0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x618>
    3b86:	6860      	ldr	r0, [r4, #4]
    3b88:	f8d9 1004 	ldr.w	r1, [r9, #4]
    3b8c:	7802      	ldrb	r2, [r0, #0]
    3b8e:	f891 3060 	ldrb.w	r3, [r1, #96]	; 0x60
    3b92:	429a      	cmp	r2, r3
    3b94:	d11f      	bne.n	3bd6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5fe>
    3b96:	7842      	ldrb	r2, [r0, #1]
    3b98:	f891 3061 	ldrb.w	r3, [r1, #97]	; 0x61
    3b9c:	429a      	cmp	r2, r3
    3b9e:	d11a      	bne.n	3bd6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5fe>
    3ba0:	7882      	ldrb	r2, [r0, #2]
    3ba2:	f891 3062 	ldrb.w	r3, [r1, #98]	; 0x62
    3ba6:	429a      	cmp	r2, r3
    3ba8:	d115      	bne.n	3bd6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5fe>
    3baa:	78c2      	ldrb	r2, [r0, #3]
    3bac:	f891 3063 	ldrb.w	r3, [r1, #99]	; 0x63
    3bb0:	429a      	cmp	r2, r3
    3bb2:	d110      	bne.n	3bd6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5fe>
    3bb4:	7902      	ldrb	r2, [r0, #4]
    3bb6:	f891 3064 	ldrb.w	r3, [r1, #100]	; 0x64
    3bba:	429a      	cmp	r2, r3
    3bbc:	d10b      	bne.n	3bd6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5fe>
    3bbe:	7940      	ldrb	r0, [r0, #5]
    3bc0:	f891 2065 	ldrb.w	r2, [r1, #101]	; 0x65
    3bc4:	4290      	cmp	r0, r2
    3bc6:	d106      	bne.n	3bd6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5fe>
    3bc8:	7c60      	ldrb	r0, [r4, #17]
    3bca:	f891 105f 	ldrb.w	r1, [r1, #95]	; 0x5f
    3bce:	4288      	cmp	r0, r1
    3bd0:	d101      	bne.n	3bd6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5fe>
    3bd2:	2001      	movs	r0, #1
    3bd4:	e000      	b.n	3bd8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x600>
    3bd6:	2000      	movs	r0, #0
    3bd8:	4f34      	ldr	r7, [pc, #208]	; (3cac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6d4>)
    3bda:	4682      	mov	sl, r0
    3bdc:	f897 0078 	ldrb.w	r0, [r7, #120]	; 0x78
    3be0:	2808      	cmp	r0, #8
    3be2:	d006      	beq.n	3bf2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x61a>
    3be4:	f897 107b 	ldrb.w	r1, [r7, #123]	; 0x7b
    3be8:	4288      	cmp	r0, r1
    3bea:	d102      	bne.n	3bf2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x61a>
    3bec:	2001      	movs	r0, #1
    3bee:	e001      	b.n	3bf4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x61c>
    3bf0:	e021      	b.n	3c36 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x65e>
    3bf2:	2000      	movs	r0, #0
    3bf4:	4681      	mov	r9, r0
    3bf6:	b925      	cbnz	r5, 3c02 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x62a>
    3bf8:	b12e      	cbz	r6, 3c06 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x62e>
    3bfa:	4620      	mov	r0, r4
    3bfc:	f7ff fe24 	bl	3848 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x270>
    3c00:	b108      	cbz	r0, 3c06 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x62e>
    3c02:	2001      	movs	r0, #1
    3c04:	e000      	b.n	3c08 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x630>
    3c06:	2000      	movs	r0, #0
    3c08:	f1b8 0f00 	cmp.w	r8, #0
    3c0c:	d009      	beq.n	3c22 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x64a>
    3c0e:	f897 105a 	ldrb.w	r1, [r7, #90]	; 0x5a
    3c12:	2901      	cmp	r1, #1
    3c14:	d003      	beq.n	3c1e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x646>
    3c16:	b921      	cbnz	r1, 3c22 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x64a>
    3c18:	ea5a 0109 	orrs.w	r1, sl, r9
    3c1c:	d001      	beq.n	3c22 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x64a>
    3c1e:	2101      	movs	r1, #1
    3c20:	e000      	b.n	3c24 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x64c>
    3c22:	2100      	movs	r1, #0
    3c24:	4208      	tst	r0, r1
    3c26:	d003      	beq.n	3c30 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x658>
    3c28:	200c      	movs	r0, #12
    3c2a:	b004      	add	sp, #16
    3c2c:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    3c30:	f004 f83e 	bl	7cb0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    3c34:	e036      	b.n	3ca4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6cc>
    3c36:	f004 f83b 	bl	7cb0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    3c3a:	f1b8 0f00 	cmp.w	r8, #0
    3c3e:	d031      	beq.n	3ca4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6cc>
    3c40:	4620      	mov	r0, r4
    3c42:	f7ff fe01 	bl	3848 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x270>
    3c46:	b900      	cbnz	r0, 3c4a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x672>
    3c48:	b175      	cbz	r5, 3c68 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x690>
    3c4a:	a803      	add	r0, sp, #12
    3c4c:	f000 f97c 	bl	3f48 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x970>
    3c50:	f8d9 2004 	ldr.w	r2, [r9, #4]
    3c54:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    3c58:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    3c5c:	f892 1088 	ldrb.w	r1, [r2, #136]	; 0x88
    3c60:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    3c64:	463b      	mov	r3, r7
    3c66:	e018      	b.n	3c9a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6c2>
    3c68:	f8d9 0004 	ldr.w	r0, [r9, #4]
    3c6c:	464d      	mov	r5, r9
    3c6e:	f890 0059 	ldrb.w	r0, [r0, #89]	; 0x59
    3c72:	2803      	cmp	r0, #3
    3c74:	d001      	beq.n	3c7a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6a2>
    3c76:	2802      	cmp	r0, #2
    3c78:	d114      	bne.n	3ca4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6cc>
    3c7a:	f1ba 0f00 	cmp.w	sl, #0
    3c7e:	d011      	beq.n	3ca4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6cc>
    3c80:	a803      	add	r0, sp, #12
    3c82:	f000 f961 	bl	3f48 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x970>
    3c86:	686a      	ldr	r2, [r5, #4]
    3c88:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    3c8c:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    3c90:	f892 1088 	ldrb.w	r1, [r2, #136]	; 0x88
    3c94:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    3c98:	23fe      	movs	r3, #254	; 0xfe
    3c9a:	2101      	movs	r1, #1
    3c9c:	4620      	mov	r0, r4
    3c9e:	324a      	adds	r2, #74	; 0x4a
    3ca0:	f00a fdce 	bl	e840 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    3ca4:	2005      	movs	r0, #5
    3ca6:	e7c0      	b.n	3c2a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x652>
    3ca8:	200000d0 	.word	0x200000d0
    3cac:	20000ca8 	.word	0x20000ca8
    3cb0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    3cb2:	4c3f      	ldr	r4, [pc, #252]	; (3db0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7d8>)
    3cb4:	4605      	mov	r5, r0
    3cb6:	6860      	ldr	r0, [r4, #4]
    3cb8:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    3cbc:	2900      	cmp	r1, #0
    3cbe:	d06c      	beq.n	3d9a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7c2>
    3cc0:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    3cc4:	2802      	cmp	r0, #2
    3cc6:	d02c      	beq.n	3d22 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x74a>
    3cc8:	2801      	cmp	r0, #1
    3cca:	d043      	beq.n	3d54 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x77c>
    3ccc:	f7ff fdb0 	bl	3830 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x258>
    3cd0:	2800      	cmp	r0, #0
    3cd2:	d067      	beq.n	3da4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7cc>
    3cd4:	686a      	ldr	r2, [r5, #4]
    3cd6:	6861      	ldr	r1, [r4, #4]
    3cd8:	7810      	ldrb	r0, [r2, #0]
    3cda:	f891 3060 	ldrb.w	r3, [r1, #96]	; 0x60
    3cde:	4298      	cmp	r0, r3
    3ce0:	d14c      	bne.n	3d7c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7a4>
    3ce2:	7850      	ldrb	r0, [r2, #1]
    3ce4:	f891 3061 	ldrb.w	r3, [r1, #97]	; 0x61
    3ce8:	4298      	cmp	r0, r3
    3cea:	d147      	bne.n	3d7c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7a4>
    3cec:	7890      	ldrb	r0, [r2, #2]
    3cee:	f891 3062 	ldrb.w	r3, [r1, #98]	; 0x62
    3cf2:	4298      	cmp	r0, r3
    3cf4:	d142      	bne.n	3d7c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7a4>
    3cf6:	78d0      	ldrb	r0, [r2, #3]
    3cf8:	f891 3063 	ldrb.w	r3, [r1, #99]	; 0x63
    3cfc:	4298      	cmp	r0, r3
    3cfe:	d13d      	bne.n	3d7c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7a4>
    3d00:	7910      	ldrb	r0, [r2, #4]
    3d02:	f891 3064 	ldrb.w	r3, [r1, #100]	; 0x64
    3d06:	4298      	cmp	r0, r3
    3d08:	d138      	bne.n	3d7c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7a4>
    3d0a:	7950      	ldrb	r0, [r2, #5]
    3d0c:	f891 2065 	ldrb.w	r2, [r1, #101]	; 0x65
    3d10:	4290      	cmp	r0, r2
    3d12:	d133      	bne.n	3d7c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7a4>
    3d14:	7c68      	ldrb	r0, [r5, #17]
    3d16:	f891 205f 	ldrb.w	r2, [r1, #95]	; 0x5f
    3d1a:	4290      	cmp	r0, r2
    3d1c:	d12e      	bne.n	3d7c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7a4>
    3d1e:	2001      	movs	r0, #1
    3d20:	e02d      	b.n	3d7e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7a6>
    3d22:	a803      	add	r0, sp, #12
    3d24:	f000 f910 	bl	3f48 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x970>
    3d28:	6862      	ldr	r2, [r4, #4]
    3d2a:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    3d2e:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    3d32:	f892 1088 	ldrb.w	r1, [r2, #136]	; 0x88
    3d36:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    3d3a:	23ff      	movs	r3, #255	; 0xff
    3d3c:	2100      	movs	r1, #0
    3d3e:	4628      	mov	r0, r5
    3d40:	324a      	adds	r2, #74	; 0x4a
    3d42:	f00a fd7d 	bl	e840 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    3d46:	6861      	ldr	r1, [r4, #4]
    3d48:	2001      	movs	r0, #1
    3d4a:	f881 0098 	strb.w	r0, [r1, #152]	; 0x98
    3d4e:	200b      	movs	r0, #11
    3d50:	b004      	add	sp, #16
    3d52:	bd70      	pop	{r4, r5, r6, pc}
    3d54:	a803      	add	r0, sp, #12
    3d56:	f000 f8f7 	bl	3f48 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x970>
    3d5a:	6862      	ldr	r2, [r4, #4]
    3d5c:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    3d60:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    3d64:	f892 1088 	ldrb.w	r1, [r2, #136]	; 0x88
    3d68:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    3d6c:	23ff      	movs	r3, #255	; 0xff
    3d6e:	2100      	movs	r1, #0
    3d70:	4628      	mov	r0, r5
    3d72:	324a      	adds	r2, #74	; 0x4a
    3d74:	f00a fd64 	bl	e840 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    3d78:	2005      	movs	r0, #5
    3d7a:	e7e9      	b.n	3d50 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x778>
    3d7c:	2000      	movs	r0, #0
    3d7e:	f891 105a 	ldrb.w	r1, [r1, #90]	; 0x5a
    3d82:	2901      	cmp	r1, #1
    3d84:	d00c      	beq.n	3da0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7c8>
    3d86:	b958      	cbnz	r0, 3da0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7c8>
    3d88:	490a      	ldr	r1, [pc, #40]	; (3db4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7dc>)
    3d8a:	f891 007b 	ldrb.w	r0, [r1, #123]	; 0x7b
    3d8e:	2808      	cmp	r0, #8
    3d90:	d003      	beq.n	3d9a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7c2>
    3d92:	f891 1078 	ldrb.w	r1, [r1, #120]	; 0x78
    3d96:	4281      	cmp	r1, r0
    3d98:	d002      	beq.n	3da0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7c8>
    3d9a:	f003 ff89 	bl	7cb0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    3d9e:	e7eb      	b.n	3d78 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7a0>
    3da0:	200c      	movs	r0, #12
    3da2:	e7d5      	b.n	3d50 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x778>
    3da4:	f640 61df 	movw	r1, #3807	; 0xedf
    3da8:	2032      	movs	r0, #50	; 0x32
    3daa:	f7fc fe5b 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3dae:	0000      	.short	0x0000
    3db0:	200000d0 	.word	0x200000d0
    3db4:	20000ca8 	.word	0x20000ca8
    3db8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    3dba:	4c1e      	ldr	r4, [pc, #120]	; (3e34 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x85c>)
    3dbc:	4605      	mov	r5, r0
    3dbe:	6860      	ldr	r0, [r4, #4]
    3dc0:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    3dc4:	b129      	cbz	r1, 3dd2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7fa>
    3dc6:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    3dca:	2802      	cmp	r0, #2
    3dcc:	d004      	beq.n	3dd8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x800>
    3dce:	2801      	cmp	r0, #1
    3dd0:	d01b      	beq.n	3e0a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x832>
    3dd2:	f003 ff6d 	bl	7cb0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    3dd6:	e02a      	b.n	3e2e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x856>
    3dd8:	a803      	add	r0, sp, #12
    3dda:	f000 f8b5 	bl	3f48 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x970>
    3dde:	6862      	ldr	r2, [r4, #4]
    3de0:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    3de4:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    3de8:	f892 1088 	ldrb.w	r1, [r2, #136]	; 0x88
    3dec:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    3df0:	23ff      	movs	r3, #255	; 0xff
    3df2:	2106      	movs	r1, #6
    3df4:	4628      	mov	r0, r5
    3df6:	324a      	adds	r2, #74	; 0x4a
    3df8:	f00a fd22 	bl	e840 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    3dfc:	6862      	ldr	r2, [r4, #4]
    3dfe:	200b      	movs	r0, #11
    3e00:	2100      	movs	r1, #0
    3e02:	f882 1098 	strb.w	r1, [r2, #152]	; 0x98
    3e06:	b004      	add	sp, #16
    3e08:	bd70      	pop	{r4, r5, r6, pc}
    3e0a:	a803      	add	r0, sp, #12
    3e0c:	f000 f89c 	bl	3f48 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x970>
    3e10:	6862      	ldr	r2, [r4, #4]
    3e12:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    3e16:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    3e1a:	f892 1088 	ldrb.w	r1, [r2, #136]	; 0x88
    3e1e:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    3e22:	23ff      	movs	r3, #255	; 0xff
    3e24:	2106      	movs	r1, #6
    3e26:	4628      	mov	r0, r5
    3e28:	324a      	adds	r2, #74	; 0x4a
    3e2a:	f00a fd09 	bl	e840 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    3e2e:	2005      	movs	r0, #5
    3e30:	e7e9      	b.n	3e06 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x82e>
    3e32:	0000      	.short	0x0000
    3e34:	200000d0 	.word	0x200000d0
    3e38:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    3e3a:	b389      	cbz	r1, 3ea0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8c8>
    3e3c:	2901      	cmp	r1, #1
    3e3e:	d034      	beq.n	3eaa <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8d2>
    3e40:	2505      	movs	r5, #5
    3e42:	2902      	cmp	r1, #2
    3e44:	d004      	beq.n	3e50 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x878>
    3e46:	2906      	cmp	r1, #6
    3e48:	d025      	beq.n	3e96 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8be>
    3e4a:	f003 ff31 	bl	7cb0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    3e4e:	e01f      	b.n	3e90 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8b8>
    3e50:	4606      	mov	r6, r0
    3e52:	f003 ff2d 	bl	7cb0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    3e56:	4c17      	ldr	r4, [pc, #92]	; (3eb4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8dc>)
    3e58:	6860      	ldr	r0, [r4, #4]
    3e5a:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    3e5e:	b1b9      	cbz	r1, 3e90 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8b8>
    3e60:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    3e64:	2801      	cmp	r0, #1
    3e66:	d001      	beq.n	3e6c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x894>
    3e68:	2802      	cmp	r0, #2
    3e6a:	d111      	bne.n	3e90 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8b8>
    3e6c:	a803      	add	r0, sp, #12
    3e6e:	f000 f86b 	bl	3f48 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x970>
    3e72:	6862      	ldr	r2, [r4, #4]
    3e74:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    3e78:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    3e7c:	f892 1088 	ldrb.w	r1, [r2, #136]	; 0x88
    3e80:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    3e84:	23ff      	movs	r3, #255	; 0xff
    3e86:	2102      	movs	r1, #2
    3e88:	4630      	mov	r0, r6
    3e8a:	324a      	adds	r2, #74	; 0x4a
    3e8c:	f00a fcd8 	bl	e840 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    3e90:	b004      	add	sp, #16
    3e92:	4628      	mov	r0, r5
    3e94:	bd70      	pop	{r4, r5, r6, pc}
    3e96:	b004      	add	sp, #16
    3e98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3e9c:	f7ff bf8c 	b.w	3db8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7e0>
    3ea0:	b004      	add	sp, #16
    3ea2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3ea6:	f7ff bf03 	b.w	3cb0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6d8>
    3eaa:	b004      	add	sp, #16
    3eac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3eb0:	f7ff be2c 	b.w	3b0c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x534>
    3eb4:	200000d0 	.word	0x200000d0
    3eb8:	b570      	push	{r4, r5, r6, lr}
    3eba:	4c11      	ldr	r4, [pc, #68]	; (3f00 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x928>)
    3ebc:	4605      	mov	r5, r0
    3ebe:	6861      	ldr	r1, [r4, #4]
    3ec0:	f891 005d 	ldrb.w	r0, [r1, #93]	; 0x5d
    3ec4:	2800      	cmp	r0, #0
    3ec6:	d019      	beq.n	3efc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x924>
    3ec8:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
    3ecc:	2800      	cmp	r0, #0
    3ece:	d015      	beq.n	3efc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x924>
    3ed0:	f891 0049 	ldrb.w	r0, [r1, #73]	; 0x49
    3ed4:	314a      	adds	r1, #74	; 0x4a
    3ed6:	f00a fc2c 	bl	e732 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xa2>
    3eda:	b140      	cbz	r0, 3eee <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x916>
    3edc:	f7fe f8ec 	bl	20b8 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    3ee0:	6861      	ldr	r1, [r4, #4]
    3ee2:	462a      	mov	r2, r5
    3ee4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3ee8:	314a      	adds	r1, #74	; 0x4a
    3eea:	f009 bd00 	b.w	d8ee <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    3eee:	6860      	ldr	r0, [r4, #4]
    3ef0:	4629      	mov	r1, r5
    3ef2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3ef6:	304a      	adds	r0, #74	; 0x4a
    3ef8:	f009 bce8 	b.w	d8cc <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    3efc:	bd70      	pop	{r4, r5, r6, pc}
    3efe:	0000      	.short	0x0000
    3f00:	200000d0 	.word	0x200000d0
    3f04:	4602      	mov	r2, r0
    3f06:	480b      	ldr	r0, [pc, #44]	; (3f34 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x95c>)
    3f08:	b082      	sub	sp, #8
    3f0a:	6840      	ldr	r0, [r0, #4]
    3f0c:	f890 106d 	ldrb.w	r1, [r0, #109]	; 0x6d
    3f10:	f88d 1000 	strb.w	r1, [sp]
    3f14:	9900      	ldr	r1, [sp, #0]
    3f16:	9100      	str	r1, [sp, #0]
    3f18:	f89d 1000 	ldrb.w	r1, [sp]
    3f1c:	2900      	cmp	r1, #0
    3f1e:	d107      	bne.n	3f30 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x958>
    3f20:	6e81      	ldr	r1, [r0, #104]	; 0x68
    3f22:	2900      	cmp	r1, #0
    3f24:	d004      	beq.n	3f30 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x958>
    3f26:	f890 006c 	ldrb.w	r0, [r0, #108]	; 0x6c
    3f2a:	b002      	add	sp, #8
    3f2c:	f007 b912 	b.w	b154 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    3f30:	b002      	add	sp, #8
    3f32:	4770      	bx	lr
    3f34:	200000d0 	.word	0x200000d0
    3f38:	b510      	push	{r4, lr}
    3f3a:	f7fe fb9d 	bl	2678 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
    3f3e:	4901      	ldr	r1, [pc, #4]	; (3f44 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x96c>)
    3f40:	7008      	strb	r0, [r1, #0]
    3f42:	bd10      	pop	{r4, pc}
    3f44:	200000d0 	.word	0x200000d0
    3f48:	4a07      	ldr	r2, [pc, #28]	; (3f68 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x990>)
    3f4a:	b510      	push	{r4, lr}
    3f4c:	f992 1000 	ldrsb.w	r1, [r2]
    3f50:	297f      	cmp	r1, #127	; 0x7f
    3f52:	d003      	beq.n	3f5c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x984>
    3f54:	7001      	strb	r1, [r0, #0]
    3f56:	207f      	movs	r0, #127	; 0x7f
    3f58:	7010      	strb	r0, [r2, #0]
    3f5a:	bd10      	pop	{r4, pc}
    3f5c:	f44f 6189 	mov.w	r1, #1096	; 0x448
    3f60:	2032      	movs	r0, #50	; 0x32
    3f62:	f7fc fd7f 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3f66:	0000      	.short	0x0000
    3f68:	200000d0 	.word	0x200000d0
    3f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3f70:	4607      	mov	r7, r0
    3f72:	f7fd f971 	bl	1258 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    3f76:	4604      	mov	r4, r0
    3f78:	f7fd f974 	bl	1264 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    3f7c:	4621      	mov	r1, r4
    3f7e:	f00a fc3a 	bl	e7f6 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x8c>
    3f82:	0005      	movs	r5, r0
    3f84:	d012      	beq.n	3fac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9d4>
    3f86:	4c2d      	ldr	r4, [pc, #180]	; (403c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3c>)
    3f88:	6860      	ldr	r0, [r4, #4]
    3f8a:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    3f8e:	2801      	cmp	r0, #1
    3f90:	d004      	beq.n	3f9c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9c4>
    3f92:	2802      	cmp	r0, #2
    3f94:	d002      	beq.n	3f9c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9c4>
    3f96:	f7ff fc4b 	bl	3830 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x258>
    3f9a:	b150      	cbz	r0, 3fb2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9da>
    3f9c:	f06f 0613 	mvn.w	r6, #19
    3fa0:	b33f      	cbz	r7, 3ff2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa1a>
    3fa2:	4628      	mov	r0, r5
    3fa4:	f009 ffb3 	bl	df0e <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ>
    3fa8:	b950      	cbnz	r0, 3fc0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9e8>
    3faa:	e005      	b.n	3fb8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9e0>
    3fac:	f241 5142 	movw	r1, #5442	; 0x1542
    3fb0:	e03a      	b.n	4028 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x28>
    3fb2:	f241 5148 	movw	r1, #5448	; 0x1548
    3fb6:	e037      	b.n	4028 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x28>
    3fb8:	4628      	mov	r0, r5
    3fba:	f009 ffca 	bl	df52 <sym_GSWR3VMQYTBBLEEXNPYAGKUY5XX24O5ABWIFKUI>
    3fbe:	b1c0      	cbz	r0, 3ff2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa1a>
    3fc0:	6861      	ldr	r1, [r4, #4]
    3fc2:	4628      	mov	r0, r5
    3fc4:	f891 2070 	ldrb.w	r2, [r1, #112]	; 0x70
    3fc8:	2a05      	cmp	r2, #5
    3fca:	d202      	bcs.n	3fd2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9fa>
    3fcc:	f241 41cc 	movw	r1, #5324	; 0x14cc
    3fd0:	e02a      	b.n	4028 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x28>
    3fd2:	f891 2070 	ldrb.w	r2, [r1, #112]	; 0x70
    3fd6:	2a0b      	cmp	r2, #11
    3fd8:	d302      	bcc.n	3fe0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa08>
    3fda:	f241 41cd 	movw	r1, #5325	; 0x14cd
    3fde:	e023      	b.n	4028 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x28>
    3fe0:	68e2      	ldr	r2, [r4, #12]
    3fe2:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
    3fe6:	6952      	ldr	r2, [r2, #20]
    3fe8:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    3fec:	5851      	ldr	r1, [r2, r1]
    3fee:	4788      	blx	r1
    3ff0:	e016      	b.n	4020 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x20>
    3ff2:	6860      	ldr	r0, [r4, #4]
    3ff4:	f890 1070 	ldrb.w	r1, [r0, #112]	; 0x70
    3ff8:	2905      	cmp	r1, #5
    3ffa:	d202      	bcs.n	4002 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2>
    3ffc:	f241 5138 	movw	r1, #5432	; 0x1538
    4000:	e012      	b.n	4028 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x28>
    4002:	f890 1070 	ldrb.w	r1, [r0, #112]	; 0x70
    4006:	290b      	cmp	r1, #11
    4008:	d302      	bcc.n	4010 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x10>
    400a:	f241 5139 	movw	r1, #5433	; 0x1539
    400e:	e00b      	b.n	4028 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x28>
    4010:	68e1      	ldr	r1, [r4, #12]
    4012:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    4016:	6989      	ldr	r1, [r1, #24]
    4018:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    401c:	5808      	ldr	r0, [r1, r0]
    401e:	4780      	blx	r0
    4020:	280f      	cmp	r0, #15
    4022:	d304      	bcc.n	402e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2e>
    4024:	f241 515d 	movw	r1, #5469	; 0x155d
    4028:	2032      	movs	r0, #50	; 0x32
    402a:	f7fc fd1b 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    402e:	68e1      	ldr	r1, [r4, #12]
    4030:	6909      	ldr	r1, [r1, #16]
    4032:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    4036:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    403a:	4700      	bx	r0
    403c:	200000d0 	.word	0x200000d0
    4040:	b510      	push	{r4, lr}
    4042:	b118      	cbz	r0, 404c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4c>
    4044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4048:	f000 b922 	b.w	4290 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x290>
    404c:	2900      	cmp	r1, #0
    404e:	d01d      	beq.n	408c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8c>
    4050:	480f      	ldr	r0, [pc, #60]	; (4090 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x90>)
    4052:	6841      	ldr	r1, [r0, #4]
    4054:	f891 2070 	ldrb.w	r2, [r1, #112]	; 0x70
    4058:	2a0b      	cmp	r2, #11
    405a:	d202      	bcs.n	4062 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x62>
    405c:	f241 6118 	movw	r1, #5656	; 0x1618
    4060:	e005      	b.n	406e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x6e>
    4062:	f891 2070 	ldrb.w	r2, [r1, #112]	; 0x70
    4066:	2a0f      	cmp	r2, #15
    4068:	d304      	bcc.n	4074 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x74>
    406a:	f241 6119 	movw	r1, #5657	; 0x1619
    406e:	2032      	movs	r0, #50	; 0x32
    4070:	f7fc fcf8 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4074:	68c0      	ldr	r0, [r0, #12]
    4076:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
    407a:	6880      	ldr	r0, [r0, #8]
    407c:	f06f 022b 	mvn.w	r2, #43	; 0x2b
    4080:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    4084:	5840      	ldr	r0, [r0, r1]
    4086:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    408a:	4700      	bx	r0
    408c:	bd10      	pop	{r4, pc}
    408e:	0000      	.short	0x0000
    4090:	200000d0 	.word	0x200000d0
    4094:	b510      	push	{r4, lr}
    4096:	f7ff fabd 	bl	3614 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    409a:	f000 f907 	bl	42ac <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2ac>
    409e:	4805      	ldr	r0, [pc, #20]	; (40b4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xb4>)
    40a0:	6881      	ldr	r1, [r0, #8]
    40a2:	2000      	movs	r0, #0
    40a4:	f7ff fc08 	bl	38b8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2e0>
    40a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    40ac:	2002      	movs	r0, #2
    40ae:	f000 bae1 	b.w	4674 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA>
    40b2:	0000      	.short	0x0000
    40b4:	200000d0 	.word	0x200000d0
    40b8:	b510      	push	{r4, lr}
    40ba:	f7fd f8cd 	bl	1258 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    40be:	4604      	mov	r4, r0
    40c0:	f7fd f8d0 	bl	1264 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    40c4:	4621      	mov	r1, r4
    40c6:	f00a fb96 	bl	e7f6 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x8c>
    40ca:	b150      	cbz	r0, 40e2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xe2>
    40cc:	f004 f81a 	bl	8104 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    40d0:	2000      	movs	r0, #0
    40d2:	f003 fee3 	bl	7e9c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    40d6:	4905      	ldr	r1, [pc, #20]	; (40ec <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xec>)
    40d8:	2006      	movs	r0, #6
    40da:	6849      	ldr	r1, [r1, #4]
    40dc:	f881 0070 	strb.w	r0, [r1, #112]	; 0x70
    40e0:	bd10      	pop	{r4, pc}
    40e2:	f240 612b 	movw	r1, #1579	; 0x62b
    40e6:	2032      	movs	r0, #50	; 0x32
    40e8:	f7fc fcbc 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    40ec:	200000d0 	.word	0x200000d0
    40f0:	490f      	ldr	r1, [pc, #60]	; (4130 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x130>)
    40f2:	b510      	push	{r4, lr}
    40f4:	6848      	ldr	r0, [r1, #4]
    40f6:	f890 2070 	ldrb.w	r2, [r0, #112]	; 0x70
    40fa:	2a06      	cmp	r2, #6
    40fc:	d202      	bcs.n	4104 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x104>
    40fe:	f241 6146 	movw	r1, #5702	; 0x1646
    4102:	e005      	b.n	4110 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x110>
    4104:	f890 2070 	ldrb.w	r2, [r0, #112]	; 0x70
    4108:	2a0b      	cmp	r2, #11
    410a:	d304      	bcc.n	4116 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x116>
    410c:	f241 6147 	movw	r1, #5703	; 0x1647
    4110:	2032      	movs	r0, #50	; 0x32
    4112:	f7fc fca7 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4116:	68c9      	ldr	r1, [r1, #12]
    4118:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    411c:	68c9      	ldr	r1, [r1, #12]
    411e:	f06f 0213 	mvn.w	r2, #19
    4122:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    4126:	5808      	ldr	r0, [r1, r0]
    4128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    412c:	4700      	bx	r0
    412e:	0000      	.short	0x0000
    4130:	200000d0 	.word	0x200000d0
    4134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4138:	4c31      	ldr	r4, [pc, #196]	; (4200 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x200>)
    413a:	4605      	mov	r5, r0
    413c:	460e      	mov	r6, r1
    413e:	6860      	ldr	r0, [r4, #4]
    4140:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    4144:	b120      	cbz	r0, 4150 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x150>
    4146:	2801      	cmp	r0, #1
    4148:	d002      	beq.n	4150 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x150>
    414a:	200c      	movs	r0, #12
    414c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4150:	f003 ff32 	bl	7fb8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    4154:	f003 fd8a 	bl	7c6c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    4158:	f003 fbae 	bl	78b8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    415c:	f004 f9b0 	bl	84c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>
    4160:	4828      	ldr	r0, [pc, #160]	; (4204 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x204>)
    4162:	f003 fe93 	bl	7e8c <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    4166:	4828      	ldr	r0, [pc, #160]	; (4208 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x208>)
    4168:	f004 f890 	bl	828c <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    416c:	4827      	ldr	r0, [pc, #156]	; (420c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x20c>)
    416e:	f004 f883 	bl	8278 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    4172:	4630      	mov	r0, r6
    4174:	f003 ffc6 	bl	8104 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    4178:	7968      	ldrb	r0, [r5, #5]
    417a:	b110      	cbz	r0, 4182 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x182>
    417c:	2001      	movs	r0, #1
    417e:	f7ff fec1 	bl	3f04 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x92c>
    4182:	7928      	ldrb	r0, [r5, #4]
    4184:	2803      	cmp	r0, #3
    4186:	d001      	beq.n	418c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x18c>
    4188:	b118      	cbz	r0, 4192 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x192>
    418a:	e018      	b.n	41be <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1be>
    418c:	f640 2141 	movw	r1, #2625	; 0xa41
    4190:	e033      	b.n	41fa <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1fa>
    4192:	6861      	ldr	r1, [r4, #4]
    4194:	2000      	movs	r0, #0
    4196:	2503      	movs	r5, #3
    4198:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
    419c:	f891 207a 	ldrb.w	r2, [r1, #122]	; 0x7a
    41a0:	1c52      	adds	r2, r2, #1
    41a2:	fbb2 f7f5 	udiv	r7, r2, r5
    41a6:	fb05 2217 	mls	r2, r5, r7, r2
    41aa:	f881 207a 	strb.w	r2, [r1, #122]	; 0x7a
    41ae:	fa23 f202 	lsr.w	r2, r3, r2
    41b2:	07d2      	lsls	r2, r2, #31
    41b4:	d103      	bne.n	41be <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1be>
    41b6:	1c40      	adds	r0, r0, #1
    41b8:	b2c0      	uxtb	r0, r0
    41ba:	2803      	cmp	r0, #3
    41bc:	d3ee      	bcc.n	419c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x19c>
    41be:	6860      	ldr	r0, [r4, #4]
    41c0:	f990 005e 	ldrsb.w	r0, [r0, #94]	; 0x5e
    41c4:	f003 ff7c 	bl	80c0 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    41c8:	4631      	mov	r1, r6
    41ca:	2001      	movs	r0, #1
    41cc:	f7ff fa4a 	bl	3664 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8c>
    41d0:	2800      	cmp	r0, #0
    41d2:	d0bb      	beq.n	414c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x14c>
    41d4:	f000 f922 	bl	441c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x41c>
    41d8:	6860      	ldr	r0, [r4, #4]
    41da:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
    41de:	b138      	cbz	r0, 41f0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1f0>
    41e0:	f7fd ff6e 	bl	20c0 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ>
    41e4:	480a      	ldr	r0, [pc, #40]	; (4210 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x210>)
    41e6:	6800      	ldr	r0, [r0, #0]
    41e8:	2803      	cmp	r0, #3
    41ea:	d004      	beq.n	41f6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1f6>
    41ec:	2000      	movs	r0, #0
    41ee:	e7ad      	b.n	414c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x14c>
    41f0:	f7fe f8c4 	bl	237c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    41f4:	e7f6      	b.n	41e4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1e4>
    41f6:	f640 2153 	movw	r1, #2643	; 0xa53
    41fa:	2032      	movs	r0, #50	; 0x32
    41fc:	f7fc fc32 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4200:	200000d0 	.word	0x200000d0
    4204:	00004504 	.word	0x00004504
    4208:	00555555 	.word	0x00555555
    420c:	8e89bed6 	.word	0x8e89bed6
    4210:	40001550 	.word	0x40001550
    4214:	b510      	push	{r4, lr}
    4216:	2000      	movs	r0, #0
    4218:	f7ff fe74 	bl	3f04 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x92c>
    421c:	4808      	ldr	r0, [pc, #32]	; (4240 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x240>)
    421e:	6840      	ldr	r0, [r0, #4]
    4220:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    4224:	b128      	cbz	r0, 4232 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x232>
    4226:	2801      	cmp	r0, #1
    4228:	d003      	beq.n	4232 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x232>
    422a:	2802      	cmp	r0, #2
    422c:	d004      	beq.n	4238 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x238>
    422e:	200c      	movs	r0, #12
    4230:	bd10      	pop	{r4, pc}
    4232:	f000 f82d 	bl	4290 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x290>
    4236:	e001      	b.n	423c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x23c>
    4238:	f000 f840 	bl	42bc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2bc>
    423c:	2000      	movs	r0, #0
    423e:	bd10      	pop	{r4, pc}
    4240:	200000d0 	.word	0x200000d0
    4244:	b510      	push	{r4, lr}
    4246:	2000      	movs	r0, #0
    4248:	7048      	strb	r0, [r1, #1]
    424a:	2019      	movs	r0, #25
    424c:	7008      	strb	r0, [r1, #0]
    424e:	480f      	ldr	r0, [pc, #60]	; (428c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x28c>)
    4250:	6840      	ldr	r0, [r0, #4]
    4252:	f8d0 0042 	ldr.w	r0, [r0, #66]	; 0x42
    4256:	6048      	str	r0, [r1, #4]
    4258:	7908      	ldrb	r0, [r1, #4]
    425a:	2801      	cmp	r0, #1
    425c:	d114      	bne.n	4288 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x288>
    425e:	88cc      	ldrh	r4, [r1, #6]
    4260:	2100      	movs	r1, #0
    4262:	4620      	mov	r0, r4
    4264:	f009 fa88 	bl	d778 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    4268:	2800      	cmp	r0, #0
    426a:	d00d      	beq.n	4288 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x288>
    426c:	4620      	mov	r0, r4
    426e:	f009 fb0a 	bl	d886 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    4272:	2100      	movs	r1, #0
    4274:	4620      	mov	r0, r4
    4276:	f7fc fe59 	bl	f2c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    427a:	2800      	cmp	r0, #0
    427c:	d004      	beq.n	4288 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x288>
    427e:	f44f 6182 	mov.w	r1, #1040	; 0x410
    4282:	2032      	movs	r0, #50	; 0x32
    4284:	f7fc fbee 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4288:	bd10      	pop	{r4, pc}
    428a:	0000      	.short	0x0000
    428c:	200000d0 	.word	0x200000d0
    4290:	b510      	push	{r4, lr}
    4292:	f7ff f9bf 	bl	3614 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    4296:	4904      	ldr	r1, [pc, #16]	; (42a8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2a8>)
    4298:	2001      	movs	r0, #1
    429a:	6849      	ldr	r1, [r1, #4]
    429c:	f881 0070 	strb.w	r0, [r1, #112]	; 0x70
    42a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    42a4:	f000 bb0a 	b.w	48bc <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ>
    42a8:	200000d0 	.word	0x200000d0
    42ac:	4902      	ldr	r1, [pc, #8]	; (42b8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2b8>)
    42ae:	2000      	movs	r0, #0
    42b0:	6849      	ldr	r1, [r1, #4]
    42b2:	f881 0070 	strb.w	r0, [r1, #112]	; 0x70
    42b6:	4770      	bx	lr
    42b8:	200000d0 	.word	0x200000d0
    42bc:	b570      	push	{r4, r5, r6, lr}
    42be:	f7fc ffcb 	bl	1258 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    42c2:	4604      	mov	r4, r0
    42c4:	f7fc ffce 	bl	1264 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    42c8:	4621      	mov	r1, r4
    42ca:	f00a fa94 	bl	e7f6 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x8c>
    42ce:	0004      	movs	r4, r0
    42d0:	d020      	beq.n	4314 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x314>
    42d2:	f00a fa9d 	bl	e810 <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>
    42d6:	2000      	movs	r0, #0
    42d8:	f000 f9fa 	bl	46d0 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    42dc:	b1f8      	cbz	r0, 431e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x31e>
    42de:	4d20      	ldr	r5, [pc, #128]	; (4360 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x360>)
    42e0:	6868      	ldr	r0, [r5, #4]
    42e2:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    42e6:	2802      	cmp	r0, #2
    42e8:	d003      	beq.n	42f2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2f2>
    42ea:	4621      	mov	r1, r4
    42ec:	2000      	movs	r0, #0
    42ee:	f7ff f9b9 	bl	3664 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8c>
    42f2:	1ce0      	adds	r0, r4, #3
    42f4:	f009 fb7a 	bl	d9ec <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    42f8:	6869      	ldr	r1, [r5, #4]
    42fa:	f881 007c 	strb.w	r0, [r1, #124]	; 0x7c
    42fe:	b128      	cbz	r0, 430c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x30c>
    4300:	2440      	movs	r4, #64	; 0x40
    4302:	f003 faf9 	bl	78f8 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    4306:	4620      	mov	r0, r4
    4308:	f003 fcbe 	bl	7c88 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    430c:	f7ff fa90 	bl	3830 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x258>
    4310:	b970      	cbnz	r0, 4330 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x330>
    4312:	e008      	b.n	4326 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x326>
    4314:	f240 5119 	movw	r1, #1305	; 0x519
    4318:	2032      	movs	r0, #50	; 0x32
    431a:	f7fc fba3 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    431e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4322:	f7ff bfb5 	b.w	4290 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x290>
    4326:	6868      	ldr	r0, [r5, #4]
    4328:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    432c:	2802      	cmp	r0, #2
    432e:	d104      	bne.n	433a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x33a>
    4330:	2100      	movs	r1, #0
    4332:	2201      	movs	r2, #1
    4334:	4608      	mov	r0, r1
    4336:	f003 ff6d 	bl	8214 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    433a:	6868      	ldr	r0, [r5, #4]
    433c:	21ff      	movs	r1, #255	; 0xff
    433e:	f880 1078 	strb.w	r1, [r0, #120]	; 0x78
    4342:	f880 1079 	strb.w	r1, [r0, #121]	; 0x79
    4346:	2100      	movs	r1, #0
    4348:	f880 1080 	strb.w	r1, [r0, #128]	; 0x80
    434c:	f880 107f 	strb.w	r1, [r0, #127]	; 0x7f
    4350:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
    4354:	f880 1098 	strb.w	r1, [r0, #152]	; 0x98
    4358:	2105      	movs	r1, #5
    435a:	f880 1070 	strb.w	r1, [r0, #112]	; 0x70
    435e:	bd70      	pop	{r4, r5, r6, pc}
    4360:	200000d0 	.word	0x200000d0
    4364:	b570      	push	{r4, r5, r6, lr}
    4366:	f7fc ff77 	bl	1258 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    436a:	4604      	mov	r4, r0
    436c:	f7fc ff7a 	bl	1264 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    4370:	4621      	mov	r1, r4
    4372:	f00a fa40 	bl	e7f6 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x8c>
    4376:	0005      	movs	r5, r0
    4378:	d028      	beq.n	43cc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3cc>
    437a:	4e19      	ldr	r6, [pc, #100]	; (43e0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3e0>)
    437c:	2004      	movs	r0, #4
    437e:	6874      	ldr	r4, [r6, #4]
    4380:	3470      	adds	r4, #112	; 0x70
    4382:	f000 f9a5 	bl	46d0 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    4386:	b330      	cbz	r0, 43d6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3d6>
    4388:	200c      	movs	r0, #12
    438a:	7020      	strb	r0, [r4, #0]
    438c:	2000      	movs	r0, #0
    438e:	f000 f971 	bl	4674 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA>
    4392:	7828      	ldrb	r0, [r5, #0]
    4394:	6871      	ldr	r1, [r6, #4]
    4396:	f3c0 1040 	ubfx	r0, r0, #5, #1
    439a:	f881 008a 	strb.w	r0, [r1, #138]	; 0x8a
    439e:	2005      	movs	r0, #5
    43a0:	f7ff fb16 	bl	39d0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3f8>
    43a4:	4a0f      	ldr	r2, [pc, #60]	; (43e4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3e4>)
    43a6:	68b1      	ldr	r1, [r6, #8]
    43a8:	2520      	movs	r5, #32
    43aa:	6d50      	ldr	r0, [r2, #84]	; 0x54
    43ac:	f890 30ad 	ldrb.w	r3, [r0, #173]	; 0xad
    43b0:	7808      	ldrb	r0, [r1, #0]
    43b2:	ea05 1343 	and.w	r3, r5, r3, lsl #5
    43b6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
    43ba:	4318      	orrs	r0, r3
    43bc:	7008      	strb	r0, [r1, #0]
    43be:	6d50      	ldr	r0, [r2, #84]	; 0x54
    43c0:	7ea2      	ldrb	r2, [r4, #26]
    43c2:	f810 1fad 	ldrb.w	r1, [r0, #173]!
    43c6:	4011      	ands	r1, r2
    43c8:	7001      	strb	r1, [r0, #0]
    43ca:	bd70      	pop	{r4, r5, r6, pc}
    43cc:	f240 619a 	movw	r1, #1690	; 0x69a
    43d0:	2032      	movs	r0, #50	; 0x32
    43d2:	f7fc fb47 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    43d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    43da:	f7ff bf59 	b.w	4290 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x290>
    43de:	0000      	.short	0x0000
    43e0:	200000d0 	.word	0x200000d0
    43e4:	20000ca8 	.word	0x20000ca8
    43e8:	b510      	push	{r4, lr}
    43ea:	2003      	movs	r0, #3
    43ec:	f000 f970 	bl	46d0 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    43f0:	b168      	cbz	r0, 440e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x40e>
    43f2:	2003      	movs	r0, #3
    43f4:	f7ff faec 	bl	39d0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3f8>
    43f8:	2201      	movs	r2, #1
    43fa:	4611      	mov	r1, r2
    43fc:	2000      	movs	r0, #0
    43fe:	f003 ff09 	bl	8214 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    4402:	4905      	ldr	r1, [pc, #20]	; (4418 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x418>)
    4404:	200b      	movs	r0, #11
    4406:	6849      	ldr	r1, [r1, #4]
    4408:	f881 0070 	strb.w	r0, [r1, #112]	; 0x70
    440c:	bd10      	pop	{r4, pc}
    440e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4412:	f7ff bf3d 	b.w	4290 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x290>
    4416:	0000      	.short	0x0000
    4418:	200000d0 	.word	0x200000d0
    441c:	b570      	push	{r4, r5, r6, lr}
    441e:	4d19      	ldr	r5, [pc, #100]	; (4484 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x484>)
    4420:	2000      	movs	r0, #0
    4422:	686c      	ldr	r4, [r5, #4]
    4424:	f884 0098 	strb.w	r0, [r4, #152]	; 0x98
    4428:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
    442c:	b910      	cbnz	r0, 4434 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x434>
    442e:	f894 007d 	ldrb.w	r0, [r4, #125]	; 0x7d
    4432:	b308      	cbz	r0, 4478 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x478>
    4434:	e9f4 1024 	ldrd	r1, r0, [r4, #144]!	; 0x90
    4438:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    443c:	4050      	eors	r0, r2
    443e:	ea70 0101 	orns	r1, r0, r1
    4442:	d019      	beq.n	4478 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x478>
    4444:	f006 fea4 	bl	b190 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    4448:	e9d4 2300 	ldrd	r2, r3, [r4]
    444c:	1a80      	subs	r0, r0, r2
    444e:	4199      	sbcs	r1, r3
    4450:	d312      	bcc.n	4478 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x478>
    4452:	f7fd ff0f 	bl	2274 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    4456:	490c      	ldr	r1, [pc, #48]	; (4488 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x488>)
    4458:	fba0 2301 	umull	r2, r3, r0, r1
    445c:	6868      	ldr	r0, [r5, #4]
    445e:	3090      	adds	r0, #144	; 0x90
    4460:	f00a f9cb 	bl	e7fa <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x90>
    4464:	6868      	ldr	r0, [r5, #4]
    4466:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    446a:	b110      	cbz	r0, 4472 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x472>
    446c:	2001      	movs	r0, #1
    446e:	f7fd fe73 	bl	2158 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>
    4472:	2001      	movs	r0, #1
    4474:	f7ff fd20 	bl	3eb8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8e0>
    4478:	6869      	ldr	r1, [r5, #4]
    447a:	2002      	movs	r0, #2
    447c:	f881 0070 	strb.w	r0, [r1, #112]	; 0x70
    4480:	bd70      	pop	{r4, r5, r6, pc}
    4482:	0000      	.short	0x0000
    4484:	200000d0 	.word	0x200000d0
    4488:	000f4240 	.word	0x000f4240
    448c:	000042ad 	.word	0x000042ad
    4490:	00004291 	.word	0x00004291
    4494:	0000e7d7 	.word	0x0000e7d7
    4498:	0000e7d7 	.word	0x0000e7d7
    449c:	0000e7d7 	.word	0x0000e7d7
    44a0:	000042bd 	.word	0x000042bd
    44a4:	0000e7d7 	.word	0x0000e7d7
    44a8:	0000e7d7 	.word	0x0000e7d7
    44ac:	0000e7d7 	.word	0x0000e7d7
    44b0:	0000e7d7 	.word	0x0000e7d7
    44b4:	0000e7d7 	.word	0x0000e7d7
    44b8:	000043e9 	.word	0x000043e9
    44bc:	00004365 	.word	0x00004365
    44c0:	0000e7d7 	.word	0x0000e7d7
    44c4:	0000e7d7 	.word	0x0000e7d7
    44c8:	000040b9 	.word	0x000040b9
    44cc:	00004095 	.word	0x00004095
    44d0:	00000000 	.word	0x00000000
    44d4:	0000e7e1 	.word	0x0000e7e1
    44d8:	0000e77f 	.word	0x0000e77f
    44dc:	0000e791 	.word	0x0000e791
    44e0:	0000e79f 	.word	0x0000e79f
    44e4:	000037dd 	.word	0x000037dd
    44e8:	00004135 	.word	0x00004135
    44ec:	00004215 	.word	0x00004215
    44f0:	000044c8 	.word	0x000044c8
    44f4:	000044d0 	.word	0x000044d0
    44f8:	0000448c 	.word	0x0000448c
    44fc:	000044e0 	.word	0x000044e0
    4500:	000044d8 	.word	0x000044d8
    4504:	000040f1 	.word	0x000040f1
    4508:	00003f6d 	.word	0x00003f6d
    450c:	00004041 	.word	0x00004041
    4510:	0000e7f3 	.word	0x0000e7f3
    4514:	b570      	push	{r4, r5, r6, lr}
    4516:	4604      	mov	r4, r0
    4518:	7800      	ldrb	r0, [r0, #0]
    451a:	2805      	cmp	r0, #5
    451c:	d001      	beq.n	4522 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x522>
    451e:	2148      	movs	r1, #72	; 0x48
    4520:	e058      	b.n	45d4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5d4>
    4522:	7ba0      	ldrb	r0, [r4, #14]
    4524:	06c0      	lsls	r0, r0, #27
    4526:	d401      	bmi.n	452c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x52c>
    4528:	2149      	movs	r1, #73	; 0x49
    452a:	e053      	b.n	45d4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5d4>
    452c:	221c      	movs	r2, #28
    452e:	1d21      	adds	r1, r4, #4
    4530:	482f      	ldr	r0, [pc, #188]	; (45f0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5f0>)
    4532:	f00c f89c 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4536:	482e      	ldr	r0, [pc, #184]	; (45f0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5f0>)
    4538:	7b22      	ldrb	r2, [r4, #12]
    453a:	f104 0120 	add.w	r1, r4, #32
    453e:	301c      	adds	r0, #28
    4540:	f00c f895 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4544:	482a      	ldr	r0, [pc, #168]	; (45f0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5f0>)
    4546:	f04f 0201 	mov.w	r2, #1
    454a:	7a81      	ldrb	r1, [r0, #10]
    454c:	0749      	lsls	r1, r1, #29
    454e:	d502      	bpl.n	4556 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x556>
    4550:	7cc1      	ldrb	r1, [r0, #19]
    4552:	29fe      	cmp	r1, #254	; 0xfe
    4554:	d00c      	beq.n	4570 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x570>
    4556:	2304      	movs	r3, #4
    4558:	7023      	strb	r3, [r4, #0]
    455a:	6801      	ldr	r1, [r0, #0]
    455c:	6061      	str	r1, [r4, #4]
    455e:	6841      	ldr	r1, [r0, #4]
    4560:	60a1      	str	r1, [r4, #8]
    4562:	8901      	ldrh	r1, [r0, #8]
    4564:	81a1      	strh	r1, [r4, #12]
    4566:	7a81      	ldrb	r1, [r0, #10]
    4568:	070d      	lsls	r5, r1, #28
    456a:	d519      	bpl.n	45a0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5a0>
    456c:	73a3      	strb	r3, [r4, #14]
    456e:	e02d      	b.n	45cc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5cc>
    4570:	2113      	movs	r1, #19
    4572:	7021      	strb	r1, [r4, #0]
    4574:	7801      	ldrb	r1, [r0, #0]
    4576:	7121      	strb	r1, [r4, #4]
    4578:	7162      	strb	r2, [r4, #5]
    457a:	7841      	ldrb	r1, [r0, #1]
    457c:	71a1      	strb	r1, [r4, #6]
    457e:	f8d0 1002 	ldr.w	r1, [r0, #2]
    4582:	f8c4 1007 	str.w	r1, [r4, #7]
    4586:	88c1      	ldrh	r1, [r0, #6]
    4588:	f8a4 100b 	strh.w	r1, [r4, #11]
    458c:	21fe      	movs	r1, #254	; 0xfe
    458e:	7361      	strb	r1, [r4, #13]
    4590:	6941      	ldr	r1, [r0, #20]
    4592:	f8c4 100e 	str.w	r1, [r4, #14]
    4596:	8b01      	ldrh	r1, [r0, #24]
    4598:	8261      	strh	r1, [r4, #18]
    459a:	7a40      	ldrb	r0, [r0, #9]
    459c:	7520      	strb	r0, [r4, #20]
    459e:	bd70      	pop	{r4, r5, r6, pc}
    45a0:	07cb      	lsls	r3, r1, #31
    45a2:	d003      	beq.n	45ac <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5ac>
    45a4:	078b      	lsls	r3, r1, #30
    45a6:	d501      	bpl.n	45ac <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5ac>
    45a8:	2100      	movs	r1, #0
    45aa:	e00e      	b.n	45ca <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5ca>
    45ac:	074b      	lsls	r3, r1, #29
    45ae:	d501      	bpl.n	45b4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5b4>
    45b0:	73a2      	strb	r2, [r4, #14]
    45b2:	e00b      	b.n	45cc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5cc>
    45b4:	07ca      	lsls	r2, r1, #31
    45b6:	d110      	bne.n	45da <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5da>
    45b8:	078a      	lsls	r2, r1, #30
    45ba:	d501      	bpl.n	45c0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5c0>
    45bc:	2102      	movs	r1, #2
    45be:	e004      	b.n	45ca <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5ca>
    45c0:	07ca      	lsls	r2, r1, #31
    45c2:	d10a      	bne.n	45da <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5da>
    45c4:	0789      	lsls	r1, r1, #30
    45c6:	d408      	bmi.n	45da <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5da>
    45c8:	2103      	movs	r1, #3
    45ca:	73a1      	strb	r1, [r4, #14]
    45cc:	7a02      	ldrb	r2, [r0, #8]
    45ce:	2a1f      	cmp	r2, #31
    45d0:	d905      	bls.n	45de <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5de>
    45d2:	218d      	movs	r1, #141	; 0x8d
    45d4:	2033      	movs	r0, #51	; 0x33
    45d6:	f7fc fa45 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    45da:	218a      	movs	r1, #138	; 0x8a
    45dc:	e7fa      	b.n	45d4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5d4>
    45de:	f104 000f 	add.w	r0, r4, #15
    45e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    45e6:	4902      	ldr	r1, [pc, #8]	; (45f0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5f0>)
    45e8:	311c      	adds	r1, #28
    45ea:	f00c b840 	b.w	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    45ee:	0000      	.short	0x0000
    45f0:	20001705 	.word	0x20001705
    45f4:	2100      	movs	r1, #0
    45f6:	7201      	strb	r1, [r0, #8]
    45f8:	2204      	movs	r2, #4
    45fa:	4901      	ldr	r1, [pc, #4]	; (4600 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x600>)
    45fc:	f009 bd8f 	b.w	e11e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    4600:	0000e9cb 	.word	0x0000e9cb

00004604 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>:
    4604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4608:	4616      	mov	r6, r2
    460a:	460c      	mov	r4, r1
    460c:	4605      	mov	r5, r0
    460e:	f009 fc9c 	bl	df4a <sym_GTN2QTPVJUP6VPTTNNKS6RR7APIHG3FG2T7SNQY>
    4612:	7460      	strb	r0, [r4, #17]
    4614:	4628      	mov	r0, r5
    4616:	f009 fc8f 	bl	df38 <sym_2RWLERIIOLMYS4LVQVNNIFLEQSG65A5Q5F2FPLA>
    461a:	74a0      	strb	r0, [r4, #18]
    461c:	1cea      	adds	r2, r5, #3
    461e:	4b14      	ldr	r3, [pc, #80]	; (4670 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x6c>)
    4620:	1d90      	adds	r0, r2, #6
    4622:	2100      	movs	r1, #0
    4624:	2e07      	cmp	r6, #7
    4626:	d21f      	bcs.n	4668 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x64>
    4628:	e8df f006 	tbb	[pc, r6]
    462c:	1e110b04 	.word	0x1e110b04
    4630:	00041e13 	.word	0x00041e13
    4634:	781b      	ldrb	r3, [r3, #0]
    4636:	e00d      	b.n	4654 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x50>
    4638:	60e0      	str	r0, [r4, #12]
    463a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    463e:	60e1      	str	r1, [r4, #12]
    4640:	e7fb      	b.n	463a <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x36>
    4642:	785b      	ldrb	r3, [r3, #1]
    4644:	7063      	strb	r3, [r4, #1]
    4646:	e9c4 2001 	strd	r2, r0, [r4, #4]
    464a:	7421      	strb	r1, [r4, #16]
    464c:	e7f7      	b.n	463e <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x3a>
    464e:	789b      	ldrb	r3, [r3, #2]
    4650:	e000      	b.n	4654 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x50>
    4652:	78db      	ldrb	r3, [r3, #3]
    4654:	7063      	strb	r3, [r4, #1]
    4656:	e9c4 2101 	strd	r2, r1, [r4, #4]
    465a:	786a      	ldrb	r2, [r5, #1]
    465c:	1f92      	subs	r2, r2, #6
    465e:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    4662:	7422      	strb	r2, [r4, #16]
    4664:	d0eb      	beq.n	463e <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x3a>
    4666:	e7e7      	b.n	4638 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x34>
    4668:	7061      	strb	r1, [r4, #1]
    466a:	6061      	str	r1, [r4, #4]
    466c:	60a1      	str	r1, [r4, #8]
    466e:	e7ec      	b.n	464a <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x46>
    4670:	000108da 	.word	0x000108da

00004674 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA>:
    4674:	b570      	push	{r4, r5, r6, lr}
    4676:	b140      	cbz	r0, 468a <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA+0x16>
    4678:	2801      	cmp	r0, #1
    467a:	d006      	beq.n	468a <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA+0x16>
    467c:	2802      	cmp	r0, #2
    467e:	d00a      	beq.n	4696 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA+0x22>
    4680:	2803      	cmp	r0, #3
    4682:	d006      	beq.n	4692 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA+0x1e>
    4684:	f640 01c8 	movw	r1, #2248	; 0x8c8
    4688:	e015      	b.n	46b6 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA+0x42>
    468a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    468e:	f000 b97d 	b.w	498c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x38>
    4692:	2001      	movs	r0, #1
    4694:	e000      	b.n	4698 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA+0x24>
    4696:	2000      	movs	r0, #0
    4698:	4c0c      	ldr	r4, [pc, #48]	; (46cc <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA+0x58>)
    469a:	2101      	movs	r1, #1
    469c:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
    46a0:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    46a4:	6a20      	ldr	r0, [r4, #32]
    46a6:	2500      	movs	r5, #0
    46a8:	f880 5248 	strb.w	r5, [r0, #584]	; 0x248
    46ac:	7821      	ldrb	r1, [r4, #0]
    46ae:	2905      	cmp	r1, #5
    46b0:	d004      	beq.n	46bc <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA+0x48>
    46b2:	f640 0149 	movw	r1, #2121	; 0x849
    46b6:	2021      	movs	r0, #33	; 0x21
    46b8:	f7fc f9d4 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    46bc:	f000 fd9a 	bl	51f4 <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I>
    46c0:	6225      	str	r5, [r4, #32]
    46c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    46c6:	f000 b9c5 	b.w	4a54 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x100>
    46ca:	0000      	.short	0x0000
    46cc:	20000d50 	.word	0x20000d50

000046d0 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>:
    46d0:	b570      	push	{r4, r5, r6, lr}
    46d2:	4605      	mov	r5, r0
    46d4:	f006 fd5c 	bl	b190 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    46d8:	4c16      	ldr	r4, [pc, #88]	; (4734 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x64>)
    46da:	6921      	ldr	r1, [r4, #16]
    46dc:	1a46      	subs	r6, r0, r1
    46de:	b155      	cbz	r5, 46f6 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x26>
    46e0:	2d03      	cmp	r5, #3
    46e2:	d00d      	beq.n	4700 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x30>
    46e4:	2d04      	cmp	r5, #4
    46e6:	d00e      	beq.n	4706 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x36>
    46e8:	2d06      	cmp	r5, #6
    46ea:	d01d      	beq.n	4728 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x58>
    46ec:	f240 31d6 	movw	r1, #982	; 0x3d6
    46f0:	2021      	movs	r0, #33	; 0x21
    46f2:	f7fc f9b7 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    46f6:	2001      	movs	r0, #1
    46f8:	f00a fa05 	bl	eb06 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x16>
    46fc:	3098      	adds	r0, #152	; 0x98
    46fe:	e004      	b.n	470a <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x3a>
    4700:	f44f 7057 	mov.w	r0, #860	; 0x35c
    4704:	e001      	b.n	470a <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x3a>
    4706:	f44f 70fc 	mov.w	r0, #504	; 0x1f8
    470a:	6b21      	ldr	r1, [r4, #48]	; 0x30
    470c:	1835      	adds	r5, r6, r0
    470e:	39f4      	subs	r1, #244	; 0xf4
    4710:	428d      	cmp	r5, r1
    4712:	d307      	bcc.n	4724 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x54>
    4714:	2600      	movs	r6, #0
    4716:	f000 fac9 	bl	4cac <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x358>
    471a:	b140      	cbz	r0, 472e <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5e>
    471c:	6b20      	ldr	r0, [r4, #48]	; 0x30
    471e:	38f4      	subs	r0, #244	; 0xf4
    4720:	4285      	cmp	r5, r0
    4722:	d203      	bcs.n	472c <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5c>
    4724:	2601      	movs	r6, #1
    4726:	e002      	b.n	472e <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5e>
    4728:	2001      	movs	r0, #1
    472a:	bd70      	pop	{r4, r5, r6, pc}
    472c:	2600      	movs	r6, #0
    472e:	4630      	mov	r0, r6
    4730:	bd70      	pop	{r4, r5, r6, pc}
    4732:	0000      	.short	0x0000
    4734:	20000d50 	.word	0x20000d50

00004738 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI>:
    4738:	b5f0      	push	{r4, r5, r6, r7, lr}
    473a:	4c1e      	ldr	r4, [pc, #120]	; (47b4 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x7c>)
    473c:	4607      	mov	r7, r0
    473e:	b087      	sub	sp, #28
    4740:	7820      	ldrb	r0, [r4, #0]
    4742:	460e      	mov	r6, r1
    4744:	b110      	cbz	r0, 474c <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x14>
    4746:	200c      	movs	r0, #12
    4748:	b007      	add	sp, #28
    474a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    474c:	f7fe fd34 	bl	31b8 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    4750:	4605      	mov	r5, r0
    4752:	6227      	str	r7, [r4, #32]
    4754:	f897 0248 	ldrb.w	r0, [r7, #584]	; 0x248
    4758:	b110      	cbz	r0, 4760 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x28>
    475a:	f44f 713f 	mov.w	r1, #764	; 0x2fc
    475e:	e025      	b.n	47ac <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x74>
    4760:	2005      	movs	r0, #5
    4762:	7020      	strb	r0, [r4, #0]
    4764:	2000      	movs	r0, #0
    4766:	7060      	strb	r0, [r4, #1]
    4768:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
    476c:	f000 fae4 	bl	4d38 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3e4>
    4770:	64a0      	str	r0, [r4, #72]	; 0x48
    4772:	2100      	movs	r1, #0
    4774:	4810      	ldr	r0, [pc, #64]	; (47b8 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x80>)
    4776:	f006 fadd 	bl	ad34 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    477a:	7028      	strb	r0, [r5, #0]
    477c:	2820      	cmp	r0, #32
    477e:	d00d      	beq.n	479c <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x64>
    4780:	4633      	mov	r3, r6
    4782:	2200      	movs	r2, #0
    4784:	2101      	movs	r1, #1
    4786:	4668      	mov	r0, sp
    4788:	f000 fb30 	bl	4dec <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x498>
    478c:	b148      	cbz	r0, 47a2 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x6a>
    478e:	7828      	ldrb	r0, [r5, #0]
    4790:	4669      	mov	r1, sp
    4792:	f00a f9e3 	bl	eb5c <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x6c>
    4796:	b138      	cbz	r0, 47a8 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x70>
    4798:	2000      	movs	r0, #0
    479a:	e7d5      	b.n	4748 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x10>
    479c:	f240 310a 	movw	r1, #778	; 0x30a
    47a0:	e004      	b.n	47ac <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x74>
    47a2:	f240 310d 	movw	r1, #781	; 0x30d
    47a6:	e001      	b.n	47ac <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x74>
    47a8:	f240 310e 	movw	r1, #782	; 0x30e
    47ac:	2021      	movs	r0, #33	; 0x21
    47ae:	f7fc f959 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    47b2:	0000      	.short	0x0000
    47b4:	20000d50 	.word	0x20000d50
    47b8:	00004a75 	.word	0x00004a75

000047bc <sym_GM7QU7LP6UH4DZPOIR7WHUEKZSOPEOATHYRRTQI>:
    47bc:	4902      	ldr	r1, [pc, #8]	; (47c8 <sym_GM7QU7LP6UH4DZPOIR7WHUEKZSOPEOATHYRRTQI+0xc>)
    47be:	6a09      	ldr	r1, [r1, #32]
    47c0:	6001      	str	r1, [r0, #0]
    47c2:	f000 b83d 	b.w	4840 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>
    47c6:	0000      	.short	0x0000
    47c8:	20000d50 	.word	0x20000d50

000047cc <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA>:
    47cc:	b570      	push	{r4, r5, r6, lr}
    47ce:	b086      	sub	sp, #24
    47d0:	4606      	mov	r6, r0
    47d2:	b111      	cbz	r1, 47da <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0xe>
    47d4:	2011      	movs	r0, #17
    47d6:	b006      	add	sp, #24
    47d8:	bd70      	pop	{r4, r5, r6, pc}
    47da:	4c17      	ldr	r4, [pc, #92]	; (4838 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x6c>)
    47dc:	7820      	ldrb	r0, [r4, #0]
    47de:	b108      	cbz	r0, 47e4 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x18>
    47e0:	200c      	movs	r0, #12
    47e2:	e7f8      	b.n	47d6 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0xa>
    47e4:	f7fe fce8 	bl	31b8 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    47e8:	4605      	mov	r5, r0
    47ea:	2000      	movs	r0, #0
    47ec:	7060      	strb	r0, [r4, #1]
    47ee:	2004      	movs	r0, #4
    47f0:	7020      	strb	r0, [r4, #0]
    47f2:	f000 faa1 	bl	4d38 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3e4>
    47f6:	64a0      	str	r0, [r4, #72]	; 0x48
    47f8:	2100      	movs	r1, #0
    47fa:	4810      	ldr	r0, [pc, #64]	; (483c <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x70>)
    47fc:	f006 fa9a 	bl	ad34 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    4800:	7028      	strb	r0, [r5, #0]
    4802:	2820      	cmp	r0, #32
    4804:	d00d      	beq.n	4822 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x56>
    4806:	4633      	mov	r3, r6
    4808:	2200      	movs	r2, #0
    480a:	2101      	movs	r1, #1
    480c:	4668      	mov	r0, sp
    480e:	f000 faed 	bl	4dec <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x498>
    4812:	b148      	cbz	r0, 4828 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x5c>
    4814:	7828      	ldrb	r0, [r5, #0]
    4816:	4669      	mov	r1, sp
    4818:	f00a f9a0 	bl	eb5c <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x6c>
    481c:	b138      	cbz	r0, 482e <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x62>
    481e:	2000      	movs	r0, #0
    4820:	e7d9      	b.n	47d6 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0xa>
    4822:	f240 3162 	movw	r1, #866	; 0x362
    4826:	e004      	b.n	4832 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x66>
    4828:	f44f 7159 	mov.w	r1, #868	; 0x364
    482c:	e001      	b.n	4832 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x66>
    482e:	f240 3165 	movw	r1, #869	; 0x365
    4832:	2021      	movs	r0, #33	; 0x21
    4834:	f7fc f916 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4838:	20000d50 	.word	0x20000d50
    483c:	00004a75 	.word	0x00004a75

00004840 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>:
    4840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4844:	2700      	movs	r7, #0
    4846:	f7fe fcb7 	bl	31b8 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    484a:	4c18      	ldr	r4, [pc, #96]	; (48ac <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x6c>)
    484c:	4605      	mov	r5, r0
    484e:	7820      	ldrb	r0, [r4, #0]
    4850:	2804      	cmp	r0, #4
    4852:	d005      	beq.n	4860 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x20>
    4854:	7820      	ldrb	r0, [r4, #0]
    4856:	2805      	cmp	r0, #5
    4858:	d002      	beq.n	4860 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x20>
    485a:	200c      	movs	r0, #12
    485c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4860:	2001      	movs	r0, #1
    4862:	7060      	strb	r0, [r4, #1]
    4864:	7b20      	ldrb	r0, [r4, #12]
    4866:	b160      	cbz	r0, 4882 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x42>
    4868:	f3ef 8610 	mrs	r6, PRIMASK
    486c:	b672      	cpsid	i
    486e:	7b20      	ldrb	r0, [r4, #12]
    4870:	b128      	cbz	r0, 487e <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x3e>
    4872:	7b60      	ldrb	r0, [r4, #13]
    4874:	b118      	cbz	r0, 487e <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x3e>
    4876:	f009 ff78 	bl	e76a <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>
    487a:	f000 f8eb 	bl	4a54 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x100>
    487e:	b126      	cbz	r6, 488a <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x4a>
    4880:	e004      	b.n	488c <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x4c>
    4882:	7828      	ldrb	r0, [r5, #0]
    4884:	f005 ffea 	bl	a85c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    4888:	e000      	b.n	488c <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x4c>
    488a:	b662      	cpsie	i
    488c:	7828      	ldrb	r0, [r5, #0]
    488e:	f006 f939 	bl	ab04 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    4892:	f000 fc03 	bl	509c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x748>
    4896:	2000      	movs	r0, #0
    4898:	7060      	strb	r0, [r4, #1]
    489a:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    489e:	b100      	cbz	r0, 48a2 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x62>
    48a0:	270c      	movs	r7, #12
    48a2:	f000 fc27 	bl	50f4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7a0>
    48a6:	4638      	mov	r0, r7
    48a8:	e7d8      	b.n	485c <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x1c>
    48aa:	0000      	.short	0x0000
    48ac:	20000d50 	.word	0x20000d50

000048b0 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>:
    48b0:	4801      	ldr	r0, [pc, #4]	; (48b8 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ+0x8>)
    48b2:	7800      	ldrb	r0, [r0, #0]
    48b4:	4770      	bx	lr
    48b6:	0000      	.short	0x0000
    48b8:	20000d50 	.word	0x20000d50

000048bc <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ>:
    48bc:	b510      	push	{r4, lr}
    48be:	4c10      	ldr	r4, [pc, #64]	; (4900 <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ+0x44>)
    48c0:	b086      	sub	sp, #24
    48c2:	7b20      	ldrb	r0, [r4, #12]
    48c4:	b1b0      	cbz	r0, 48f4 <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ+0x38>
    48c6:	7860      	ldrb	r0, [r4, #1]
    48c8:	b9a0      	cbnz	r0, 48f4 <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ+0x38>
    48ca:	2300      	movs	r3, #0
    48cc:	461a      	mov	r2, r3
    48ce:	4619      	mov	r1, r3
    48d0:	4668      	mov	r0, sp
    48d2:	f000 fa8b 	bl	4dec <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x498>
    48d6:	b158      	cbz	r0, 48f0 <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ+0x34>
    48d8:	f7fe fc6e 	bl	31b8 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    48dc:	7800      	ldrb	r0, [r0, #0]
    48de:	4669      	mov	r1, sp
    48e0:	f00a f93c 	bl	eb5c <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x6c>
    48e4:	b930      	cbnz	r0, 48f4 <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ+0x38>
    48e6:	f240 71ae 	movw	r1, #1966	; 0x7ae
    48ea:	2021      	movs	r0, #33	; 0x21
    48ec:	f7fc f8ba 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    48f0:	2001      	movs	r0, #1
    48f2:	70a0      	strb	r0, [r4, #2]
    48f4:	b006      	add	sp, #24
    48f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    48fa:	f000 b8ab 	b.w	4a54 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x100>
    48fe:	0000      	.short	0x0000
    4900:	20000d50 	.word	0x20000d50

00004904 <sym_ONCJZGDCVZ7ETEDMUY5VMUUWXXIFFJBUOZSJQ3Q>:
    4904:	b508      	push	{r3, lr}
    4906:	2260      	movs	r2, #96	; 0x60
    4908:	2100      	movs	r1, #0
    490a:	480c      	ldr	r0, [pc, #48]	; (493c <sym_ONCJZGDCVZ7ETEDMUY5VMUUWXXIFFJBUOZSJQ3Q+0x38>)
    490c:	f00b ff29 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    4910:	f7fe fc52 	bl	31b8 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    4914:	2120      	movs	r1, #32
    4916:	7001      	strb	r1, [r0, #0]
    4918:	f000 f812 	bl	4940 <sym_CEIRMF45E42FC47RKIFGTU36Z7XGQCJUDSF57LQ>
    491c:	b120      	cbz	r0, 4928 <sym_ONCJZGDCVZ7ETEDMUY5VMUUWXXIFFJBUOZSJQ3Q+0x24>
    491e:	f240 2135 	movw	r1, #565	; 0x235
    4922:	2021      	movs	r0, #33	; 0x21
    4924:	f7fc f89e 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4928:	f242 7010 	movw	r0, #10000	; 0x2710
    492c:	9000      	str	r0, [sp, #0]
    492e:	2201      	movs	r2, #1
    4930:	4669      	mov	r1, sp
    4932:	1080      	asrs	r0, r0, #2
    4934:	f000 f940 	bl	4bb8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x264>
    4938:	bd08      	pop	{r3, pc}
    493a:	0000      	.short	0x0000
    493c:	20000d50 	.word	0x20000d50

00004940 <sym_CEIRMF45E42FC47RKIFGTU36Z7XGQCJUDSF57LQ>:
    4940:	4803      	ldr	r0, [pc, #12]	; (4950 <sym_CEIRMF45E42FC47RKIFGTU36Z7XGQCJUDSF57LQ+0x10>)
    4942:	b510      	push	{r4, lr}
    4944:	7800      	ldrb	r0, [r0, #0]
    4946:	b108      	cbz	r0, 494c <sym_CEIRMF45E42FC47RKIFGTU36Z7XGQCJUDSF57LQ+0xc>
    4948:	f7ff ff7a 	bl	4840 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>
    494c:	2000      	movs	r0, #0
    494e:	bd10      	pop	{r4, pc}
    4950:	20000d50 	.word	0x20000d50

00004954 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ>:
    4954:	490c      	ldr	r1, [pc, #48]	; (4988 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x34>)
    4956:	b508      	push	{r3, lr}
    4958:	7809      	ldrb	r1, [r1, #0]
    495a:	b121      	cbz	r1, 4966 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x12>
    495c:	f44f 7147 	mov.w	r1, #796	; 0x31c
    4960:	2021      	movs	r0, #33	; 0x21
    4962:	f7fc f87f 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4966:	2300      	movs	r3, #0
    4968:	9300      	str	r3, [sp, #0]
    496a:	7801      	ldrb	r1, [r0, #0]
    496c:	461a      	mov	r2, r3
    496e:	07c9      	lsls	r1, r1, #31
    4970:	d003      	beq.n	497a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x26>
    4972:	e9d0 3001 	ldrd	r3, r0, [r0, #4]
    4976:	2201      	movs	r2, #1
    4978:	9000      	str	r0, [sp, #0]
    497a:	4669      	mov	r1, sp
    497c:	4618      	mov	r0, r3
    497e:	f000 f91b 	bl	4bb8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x264>
    4982:	2000      	movs	r0, #0
    4984:	bd08      	pop	{r3, pc}
    4986:	0000      	.short	0x0000
    4988:	20000d50 	.word	0x20000d50
    498c:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    4990:	4c2e      	ldr	r4, [pc, #184]	; (4a4c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xf8>)
    4992:	4680      	mov	r8, r0
    4994:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
    4998:	461e      	mov	r6, r3
    499a:	f003 fad3 	bl	7f44 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    499e:	4607      	mov	r7, r0
    49a0:	6a20      	ldr	r0, [r4, #32]
    49a2:	2101      	movs	r1, #1
    49a4:	f880 106a 	strb.w	r1, [r0, #106]	; 0x6a
    49a8:	f880 106b 	strb.w	r1, [r0, #107]	; 0x6b
    49ac:	3062      	adds	r0, #98	; 0x62
    49ae:	21ff      	movs	r1, #255	; 0xff
    49b0:	7281      	strb	r1, [r0, #10]
    49b2:	6a20      	ldr	r0, [r4, #32]
    49b4:	f04f 0900 	mov.w	r9, #0
    49b8:	4649      	mov	r1, r9
    49ba:	302c      	adds	r0, #44	; 0x2c
    49bc:	f009 fc5e 	bl	e27c <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    49c0:	462a      	mov	r2, r5
    49c2:	4633      	mov	r3, r6
    49c4:	2101      	movs	r1, #1
    49c6:	4640      	mov	r0, r8
    49c8:	9700      	str	r7, [sp, #0]
    49ca:	f00a f8ae 	bl	eb2a <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x3a>
    49ce:	6a27      	ldr	r7, [r4, #32]
    49d0:	4606      	mov	r6, r0
    49d2:	460d      	mov	r5, r1
    49d4:	f8d7 8010 	ldr.w	r8, [r7, #16]
    49d8:	f002 fa5a 	bl	6e90 <sym_KN3K6STNQWQWR2LORBLVX4RFT5RXJO5L5JNKV4I>
    49dc:	f104 0140 	add.w	r1, r4, #64	; 0x40
    49e0:	4288      	cmp	r0, r1
    49e2:	d00b      	beq.n	49fc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa8>
    49e4:	e9cd 6500 	strd	r6, r5, [sp]
    49e8:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
    49ec:	4642      	mov	r2, r8
    49ee:	f00a fc18 	bl	f222 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>
    49f2:	4540      	cmp	r0, r8
    49f4:	d903      	bls.n	49fe <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xaa>
    49f6:	f240 410c 	movw	r1, #1036	; 0x40c
    49fa:	e01d      	b.n	4a38 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xe4>
    49fc:	2000      	movs	r0, #0
    49fe:	4914      	ldr	r1, [pc, #80]	; (4a50 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xfc>)
    4a00:	4607      	mov	r7, r0
    4a02:	6809      	ldr	r1, [r1, #0]
    4a04:	4288      	cmp	r0, r1
    4a06:	6a20      	ldr	r0, [r4, #32]
    4a08:	6901      	ldr	r1, [r0, #16]
    4a0a:	d202      	bcs.n	4a12 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xbe>
    4a0c:	440f      	add	r7, r1
    4a0e:	6201      	str	r1, [r0, #32]
    4a10:	e004      	b.n	4a1c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xc8>
    4a12:	4638      	mov	r0, r7
    4a14:	f009 f9cf 	bl	ddb6 <sym_MCZ5ZKWAPWEBLVDHDY2XS3XBNNW7L43ADSWQSTI>
    4a18:	6a21      	ldr	r1, [r4, #32]
    4a1a:	6208      	str	r0, [r1, #32]
    4a1c:	6a20      	ldr	r0, [r4, #32]
    4a1e:	6901      	ldr	r1, [r0, #16]
    4a20:	2005      	movs	r0, #5
    4a22:	f009 f9d0 	bl	ddc6 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    4a26:	6a21      	ldr	r1, [r4, #32]
    4a28:	8488      	strh	r0, [r1, #36]	; 0x24
    4a2a:	6a21      	ldr	r1, [r4, #32]
    4a2c:	6a0a      	ldr	r2, [r1, #32]
    4a2e:	1aba      	subs	r2, r7, r2
    4a30:	4290      	cmp	r0, r2
    4a32:	d804      	bhi.n	4a3e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xea>
    4a34:	f640 0137 	movw	r1, #2103	; 0x837
    4a38:	2021      	movs	r0, #33	; 0x21
    4a3a:	f7fc f813 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4a3e:	19f2      	adds	r2, r6, r7
    4a40:	eb45 0509 	adc.w	r5, r5, r9
    4a44:	e9c1 258a 	strd	r2, r5, [r1, #552]	; 0x228
    4a48:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    4a4c:	20000d50 	.word	0x20000d50
    4a50:	200000e0 	.word	0x200000e0
    4a54:	b510      	push	{r4, lr}
    4a56:	4c06      	ldr	r4, [pc, #24]	; (4a70 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x11c>)
    4a58:	7b20      	ldrb	r0, [r4, #12]
    4a5a:	2800      	cmp	r0, #0
    4a5c:	d006      	beq.n	4a6c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x118>
    4a5e:	f003 fa77 	bl	7f50 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    4a62:	f006 f98f 	bl	ad84 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    4a66:	2000      	movs	r0, #0
    4a68:	7320      	strb	r0, [r4, #12]
    4a6a:	7360      	strb	r0, [r4, #13]
    4a6c:	bd10      	pop	{r4, pc}
    4a6e:	0000      	.short	0x0000
    4a70:	20000d50 	.word	0x20000d50
    4a74:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a76:	b087      	sub	sp, #28
    4a78:	460d      	mov	r5, r1
    4a7a:	f7fe fb9d 	bl	31b8 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    4a7e:	2701      	movs	r7, #1
    4a80:	4c3f      	ldr	r4, [pc, #252]	; (4b80 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x22c>)
    4a82:	2d09      	cmp	r5, #9
    4a84:	d278      	bcs.n	4b78 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x224>
    4a86:	e8df f005 	tbb	[pc, r5]
    4a8a:	3905      	.short	0x3905
    4a8c:	774a4f4f 	.word	0x774a4f4f
    4a90:	00726d64 	.word	0x00726d64
    4a94:	7327      	strb	r7, [r4, #12]
    4a96:	7861      	ldrb	r1, [r4, #1]
    4a98:	2900      	cmp	r1, #0
    4a9a:	d12d      	bne.n	4af8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1a4>
    4a9c:	7800      	ldrb	r0, [r0, #0]
    4a9e:	f005 fabb 	bl	a018 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>
    4aa2:	4605      	mov	r5, r0
    4aa4:	460e      	mov	r6, r1
    4aa6:	e9c4 0104 	strd	r0, r1, [r4, #16]
    4aaa:	f000 fb3f 	bl	512c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7d8>
    4aae:	b118      	cbz	r0, 4ab8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x164>
    4ab0:	2000      	movs	r0, #0
    4ab2:	f88d 0004 	strb.w	r0, [sp, #4]
    4ab6:	e001      	b.n	4abc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x168>
    4ab8:	f88d 7004 	strb.w	r7, [sp, #4]
    4abc:	f000 f950 	bl	4d60 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x40c>
    4ac0:	4633      	mov	r3, r6
    4ac2:	462a      	mov	r2, r5
    4ac4:	f00a f84c 	bl	eb60 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x70>
    4ac8:	6861      	ldr	r1, [r4, #4]
    4aca:	fbb0 f2f1 	udiv	r2, r0, r1
    4ace:	fb01 0012 	mls	r0, r1, r2, r0
    4ad2:	b150      	cbz	r0, 4aea <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x196>
    4ad4:	f05f 0000 	movs.w	r0, #0
    4ad8:	f88d 0005 	strb.w	r0, [sp, #5]
    4adc:	4668      	mov	r0, sp
    4ade:	f7fe fcab 	bl	3438 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY>
    4ae2:	b120      	cbz	r0, 4aee <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x19a>
    4ae4:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
    4ae8:	e043      	b.n	4b72 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x21e>
    4aea:	2001      	movs	r0, #1
    4aec:	e7f4      	b.n	4ad8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x184>
    4aee:	6b20      	ldr	r0, [r4, #48]	; 0x30
    4af0:	38e3      	subs	r0, #227	; 0xe3
    4af2:	63a0      	str	r0, [r4, #56]	; 0x38
    4af4:	f006 fa60 	bl	afb8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    4af8:	b007      	add	sp, #28
    4afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4afc:	7860      	ldrb	r0, [r4, #1]
    4afe:	b130      	cbz	r0, 4b0e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1ba>
    4b00:	f009 fe33 	bl	e76a <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>
    4b04:	b007      	add	sp, #28
    4b06:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    4b0a:	f7ff bfa3 	b.w	4a54 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x100>
    4b0e:	7367      	strb	r7, [r4, #13]
    4b10:	f7fe fd22 	bl	3558 <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY>
    4b14:	2800      	cmp	r0, #0
    4b16:	d0ef      	beq.n	4af8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1a4>
    4b18:	f240 11e1 	movw	r1, #481	; 0x1e1
    4b1c:	e029      	b.n	4b72 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x21e>
    4b1e:	b007      	add	sp, #28
    4b20:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    4b24:	f003 bbe8 	b.w	82f8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    4b28:	7805      	ldrb	r5, [r0, #0]
    4b2a:	2300      	movs	r3, #0
    4b2c:	2201      	movs	r2, #1
    4b2e:	4619      	mov	r1, r3
    4b30:	4668      	mov	r0, sp
    4b32:	f000 f95b 	bl	4dec <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x498>
    4b36:	b140      	cbz	r0, 4b4a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1f6>
    4b38:	4669      	mov	r1, sp
    4b3a:	4628      	mov	r0, r5
    4b3c:	f00a f80e 	bl	eb5c <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x6c>
    4b40:	2800      	cmp	r0, #0
    4b42:	d1d9      	bne.n	4af8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1a4>
    4b44:	f240 71c9 	movw	r1, #1993	; 0x7c9
    4b48:	e013      	b.n	4b72 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x21e>
    4b4a:	70a7      	strb	r7, [r4, #2]
    4b4c:	f000 f81a 	bl	4b84 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x230>
    4b50:	e7d2      	b.n	4af8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1a4>
    4b52:	f000 f8ab 	bl	4cac <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x358>
    4b56:	2800      	cmp	r0, #0
    4b58:	d1ce      	bne.n	4af8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1a4>
    4b5a:	b007      	add	sp, #28
    4b5c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    4b60:	f009 be01 	b.w	e766 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A>
    4b64:	b007      	add	sp, #28
    4b66:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    4b6a:	f000 b80b 	b.w	4b84 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x230>
    4b6e:	f240 2113 	movw	r1, #531	; 0x213
    4b72:	2021      	movs	r0, #33	; 0x21
    4b74:	f7fb ff76 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4b78:	f240 2117 	movw	r1, #535	; 0x217
    4b7c:	e7f9      	b.n	4b72 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x21e>
    4b7e:	0000      	.short	0x0000
    4b80:	20000d50 	.word	0x20000d50
    4b84:	b510      	push	{r4, lr}
    4b86:	4c0b      	ldr	r4, [pc, #44]	; (4bb4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x260>)
    4b88:	7820      	ldrb	r0, [r4, #0]
    4b8a:	b138      	cbz	r0, 4b9c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x248>
    4b8c:	f000 fa86 	bl	509c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x748>
    4b90:	78a0      	ldrb	r0, [r4, #2]
    4b92:	b150      	cbz	r0, 4baa <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x256>
    4b94:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    4b98:	b128      	cbz	r0, 4ba6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x252>
    4b9a:	e006      	b.n	4baa <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x256>
    4b9c:	f240 117b 	movw	r1, #379	; 0x17b
    4ba0:	2021      	movs	r0, #33	; 0x21
    4ba2:	f7fb ff5f 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4ba6:	f7fe fcef 	bl	3588 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y>
    4baa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4bae:	f000 baa1 	b.w	50f4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7a0>
    4bb2:	0000      	.short	0x0000
    4bb4:	20000d50 	.word	0x20000d50
    4bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4bbc:	4d11      	ldr	r5, [pc, #68]	; (4c04 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2b0>)
    4bbe:	4616      	mov	r6, r2
    4bc0:	460f      	mov	r7, r1
    4bc2:	2400      	movs	r4, #0
    4bc4:	6068      	str	r0, [r5, #4]
    4bc6:	f009 ff93 	bl	eaf0 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY>
    4bca:	f8df c03c 	ldr.w	ip, [pc, #60]	; 4c08 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2b4>
    4bce:	2100      	movs	r1, #0
    4bd0:	f81c 2001 	ldrb.w	r2, [ip, r1]
    4bd4:	4232      	tst	r2, r6
    4bd6:	d007      	beq.n	4be8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x294>
    4bd8:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    4bdc:	eb05 0284 	add.w	r2, r5, r4, lsl #2
    4be0:	1a1b      	subs	r3, r3, r0
    4be2:	1c64      	adds	r4, r4, #1
    4be4:	b2e4      	uxtb	r4, r4
    4be6:	6093      	str	r3, [r2, #8]
    4be8:	1c49      	adds	r1, r1, #1
    4bea:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    4bee:	d0ef      	beq.n	4bd0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x27c>
    4bf0:	f016 0f0e 	tst.w	r6, #14
    4bf4:	d004      	beq.n	4c00 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2ac>
    4bf6:	f240 7103 	movw	r1, #1795	; 0x703
    4bfa:	2021      	movs	r0, #33	; 0x21
    4bfc:	f7fb ff32 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4c04:	20000d50 	.word	0x20000d50
    4c08:	000108de 	.word	0x000108de
    4c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4c10:	b086      	sub	sp, #24
    4c12:	4692      	mov	sl, r2
    4c14:	4607      	mov	r7, r0
    4c16:	4689      	mov	r9, r1
    4c18:	f000 fa94 	bl	5144 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7f0>
    4c1c:	4d22      	ldr	r5, [pc, #136]	; (4ca8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x354>)
    4c1e:	f04f 0800 	mov.w	r8, #0
    4c22:	686a      	ldr	r2, [r5, #4]
    4c24:	1886      	adds	r6, r0, r2
    4c26:	eb41 0108 	adc.w	r1, r1, r8
    4c2a:	460c      	mov	r4, r1
    4c2c:	460b      	mov	r3, r1
    4c2e:	4632      	mov	r2, r6
    4c30:	4638      	mov	r0, r7
    4c32:	4649      	mov	r1, r9
    4c34:	f009 ff94 	bl	eb60 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x70>
    4c38:	4607      	mov	r7, r0
    4c3a:	f009 ff88 	bl	eb4e <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x5e>
    4c3e:	4287      	cmp	r7, r0
    4c40:	da13      	bge.n	4c6a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x316>
    4c42:	e9d5 0106 	ldrd	r0, r1, [r5, #24]
    4c46:	f000 fa7d 	bl	5144 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7f0>
    4c4a:	4632      	mov	r2, r6
    4c4c:	4623      	mov	r3, r4
    4c4e:	f009 ff87 	bl	eb60 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x70>
    4c52:	6869      	ldr	r1, [r5, #4]
    4c54:	fbb0 f1f1 	udiv	r1, r0, r1
    4c58:	f8ca 1000 	str.w	r1, [sl]
    4c5c:	6868      	ldr	r0, [r5, #4]
    4c5e:	1980      	adds	r0, r0, r6
    4c60:	eb48 0104 	adc.w	r1, r8, r4
    4c64:	b006      	add	sp, #24
    4c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4c6a:	f88d 8000 	strb.w	r8, [sp]
    4c6e:	6b68      	ldr	r0, [r5, #52]	; 0x34
    4c70:	9001      	str	r0, [sp, #4]
    4c72:	f009 ff26 	bl	eac2 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>
    4c76:	f8ad 0008 	strh.w	r0, [sp, #8]
    4c7a:	2001      	movs	r0, #1
    4c7c:	f88d 000b 	strb.w	r0, [sp, #11]
    4c80:	e9d5 0106 	ldrd	r0, r1, [r5, #24]
    4c84:	f000 fa5e 	bl	5144 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7f0>
    4c88:	e9cd 0104 	strd	r0, r1, [sp, #16]
    4c8c:	f000 f9ec 	bl	5068 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x714>
    4c90:	f88d 000a 	strb.w	r0, [sp, #10]
    4c94:	4668      	mov	r0, sp
    4c96:	6869      	ldr	r1, [r5, #4]
    4c98:	f009 f83c 	bl	dd14 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    4c9c:	f8ca 0000 	str.w	r0, [sl]
    4ca0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    4ca4:	e7de      	b.n	4c64 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x310>
    4ca6:	0000      	.short	0x0000
    4ca8:	20000d50 	.word	0x20000d50
    4cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4cb0:	f006 fa6e 	bl	b190 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    4cb4:	4c1f      	ldr	r4, [pc, #124]	; (4d34 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3e0>)
    4cb6:	4606      	mov	r6, r0
    4cb8:	460d      	mov	r5, r1
    4cba:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    4cbe:	f000 f9d3 	bl	5068 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x714>
    4cc2:	4607      	mov	r7, r0
    4cc4:	f005 f94c 	bl	9f60 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>
    4cc8:	4602      	mov	r2, r0
    4cca:	2865      	cmp	r0, #101	; 0x65
    4ccc:	d323      	bcc.n	4d16 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3c2>
    4cce:	1c50      	adds	r0, r2, #1
    4cd0:	d024      	beq.n	4d1c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3c8>
    4cd2:	6b21      	ldr	r1, [r4, #48]	; 0x30
    4cd4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4cd6:	1888      	adds	r0, r1, r2
    4cd8:	4283      	cmp	r3, r0
    4cda:	d800      	bhi.n	4cde <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x38a>
    4cdc:	1a5a      	subs	r2, r3, r1
    4cde:	f06f 0039 	mvn.w	r0, #57	; 0x39
    4ce2:	1830      	adds	r0, r6, r0
    4ce4:	f145 31ff 	adc.w	r1, r5, #4294967295
    4ce8:	f000 fa42 	bl	5170 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x81c>
    4cec:	6b21      	ldr	r1, [r4, #48]	; 0x30
    4cee:	4408      	add	r0, r1
    4cf0:	6b21      	ldr	r1, [r4, #48]	; 0x30
    4cf2:	1a45      	subs	r5, r0, r1
    4cf4:	f241 3088 	movw	r0, #5000	; 0x1388
    4cf8:	4285      	cmp	r5, r0
    4cfa:	d900      	bls.n	4cfe <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3aa>
    4cfc:	4605      	mov	r5, r0
    4cfe:	f006 fa47 	bl	b190 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    4d02:	1b80      	subs	r0, r0, r6
    4d04:	f100 009d 	add.w	r0, r0, #157	; 0x9d
    4d08:	4285      	cmp	r5, r0
    4d0a:	d304      	bcc.n	4d16 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3c2>
    4d0c:	4639      	mov	r1, r7
    4d0e:	4628      	mov	r0, r5
    4d10:	f005 f848 	bl	9da4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    4d14:	b120      	cbz	r0, 4d20 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3cc>
    4d16:	2000      	movs	r0, #0
    4d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4d1c:	6b60      	ldr	r0, [r4, #52]	; 0x34
    4d1e:	e7e7      	b.n	4cf0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x39c>
    4d20:	6b20      	ldr	r0, [r4, #48]	; 0x30
    4d22:	4428      	add	r0, r5
    4d24:	6320      	str	r0, [r4, #48]	; 0x30
    4d26:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    4d28:	4428      	add	r0, r5
    4d2a:	63a0      	str	r0, [r4, #56]	; 0x38
    4d2c:	f006 f944 	bl	afb8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    4d30:	2001      	movs	r0, #1
    4d32:	e7f1      	b.n	4d18 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3c4>
    4d34:	20000d50 	.word	0x20000d50
    4d38:	b510      	push	{r4, lr}
    4d3a:	2400      	movs	r4, #0
    4d3c:	f009 fed8 	bl	eaf0 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY>
    4d40:	4a06      	ldr	r2, [pc, #24]	; (4d5c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x408>)
    4d42:	2100      	movs	r1, #0
    4d44:	eb02 0381 	add.w	r3, r2, r1, lsl #2
    4d48:	4404      	add	r4, r0
    4d4a:	689b      	ldr	r3, [r3, #8]
    4d4c:	1c49      	adds	r1, r1, #1
    4d4e:	441c      	add	r4, r3
    4d50:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    4d54:	d0f6      	beq.n	4d44 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3f0>
    4d56:	4620      	mov	r0, r4
    4d58:	bd10      	pop	{r4, pc}
    4d5a:	0000      	.short	0x0000
    4d5c:	20000d50 	.word	0x20000d50
    4d60:	4901      	ldr	r1, [pc, #4]	; (4d68 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x414>)
    4d62:	e9d1 0110 	ldrd	r0, r1, [r1, #64]	; 0x40
    4d66:	4770      	bx	lr
    4d68:	20000d50 	.word	0x20000d50
    4d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4d70:	4606      	mov	r6, r0
    4d72:	481d      	ldr	r0, [pc, #116]	; (4de8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x494>)
    4d74:	4688      	mov	r8, r1
    4d76:	4615      	mov	r5, r2
    4d78:	e9d0 100a 	ldrd	r1, r0, [r0, #40]	; 0x28
    4d7c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    4d80:	2701      	movs	r7, #1
    4d82:	4050      	eors	r0, r2
    4d84:	b086      	sub	sp, #24
    4d86:	ea70 0101 	orns	r1, r0, r1
    4d8a:	d021      	beq.n	4dd0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x47c>
    4d8c:	2400      	movs	r4, #0
    4d8e:	f88d 4000 	strb.w	r4, [sp]
    4d92:	9501      	str	r5, [sp, #4]
    4d94:	f009 fe95 	bl	eac2 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>
    4d98:	f8ad 0008 	strh.w	r0, [sp, #8]
    4d9c:	f88d 700b 	strb.w	r7, [sp, #11]
    4da0:	f009 fed5 	bl	eb4e <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x5e>
    4da4:	1982      	adds	r2, r0, r6
    4da6:	eb44 0008 	adc.w	r0, r4, r8
    4daa:	e9cd 2004 	strd	r2, r0, [sp, #16]
    4dae:	2002      	movs	r0, #2
    4db0:	f88d 000a 	strb.w	r0, [sp, #10]
    4db4:	4668      	mov	r0, sp
    4db6:	f005 fc21 	bl	a5fc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    4dba:	b168      	cbz	r0, 4dd8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x484>
    4dbc:	e9dd 1004 	ldrd	r1, r0, [sp, #16]
    4dc0:	194a      	adds	r2, r1, r5
    4dc2:	4909      	ldr	r1, [pc, #36]	; (4de8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x494>)
    4dc4:	4160      	adcs	r0, r4
    4dc6:	e9d1 310a 	ldrd	r3, r1, [r1, #40]	; 0x28
    4dca:	1a9a      	subs	r2, r3, r2
    4dcc:	4181      	sbcs	r1, r0
    4dce:	d408      	bmi.n	4de2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x48e>
    4dd0:	2001      	movs	r0, #1
    4dd2:	b006      	add	sp, #24
    4dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4dd8:	f240 5135 	movw	r1, #1333	; 0x535
    4ddc:	2021      	movs	r0, #33	; 0x21
    4dde:	f7fb fe41 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4de2:	2000      	movs	r0, #0
    4de4:	e7f5      	b.n	4dd2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x47e>
    4de6:	0000      	.short	0x0000
    4de8:	20000d50 	.word	0x20000d50
    4dec:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4df0:	b087      	sub	sp, #28
    4df2:	4614      	mov	r4, r2
    4df4:	4606      	mov	r6, r0
    4df6:	f006 f9cb 	bl	b190 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    4dfa:	4d99      	ldr	r5, [pc, #612]	; (5060 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    4dfc:	4680      	mov	r8, r0
    4dfe:	4689      	mov	r9, r1
    4e00:	68a8      	ldr	r0, [r5, #8]
    4e02:	f04f 0a00 	mov.w	sl, #0
    4e06:	9002      	str	r0, [sp, #8]
    4e08:	f7ff ff96 	bl	4d38 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3e4>
    4e0c:	6869      	ldr	r1, [r5, #4]
    4e0e:	4288      	cmp	r0, r1
    4e10:	d101      	bne.n	4e16 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x4c2>
    4e12:	2001      	movs	r0, #1
    4e14:	e000      	b.n	4e18 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x4c4>
    4e16:	2000      	movs	r0, #0
    4e18:	9004      	str	r0, [sp, #16]
    4e1a:	4020      	ands	r0, r4
    4e1c:	9003      	str	r0, [sp, #12]
    4e1e:	9808      	ldr	r0, [sp, #32]
    4e20:	2800      	cmp	r0, #0
    4e22:	d07f      	beq.n	4f24 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5d0>
    4e24:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
    4e28:	eb18 0b02 	adds.w	fp, r8, r2
    4e2c:	f149 0400 	adc.w	r4, r9, #0
    4e30:	f002 f834 	bl	6e9c <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ>
    4e34:	9000      	str	r0, [sp, #0]
    4e36:	488a      	ldr	r0, [pc, #552]	; (5060 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    4e38:	7800      	ldrb	r0, [r0, #0]
    4e3a:	4f89      	ldr	r7, [pc, #548]	; (5060 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    4e3c:	3740      	adds	r7, #64	; 0x40
    4e3e:	2805      	cmp	r0, #5
    4e40:	d135      	bne.n	4eae <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x55a>
    4e42:	4887      	ldr	r0, [pc, #540]	; (5060 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    4e44:	6a00      	ldr	r0, [r0, #32]
    4e46:	f8d0 0230 	ldr.w	r0, [r0, #560]	; 0x230
    4e4a:	f002 f807 	bl	6e5c <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI>
    4e4e:	9900      	ldr	r1, [sp, #0]
    4e50:	4605      	mov	r5, r0
    4e52:	4288      	cmp	r0, r1
    4e54:	d009      	beq.n	4e6a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x516>
    4e56:	4882      	ldr	r0, [pc, #520]	; (5060 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    4e58:	4629      	mov	r1, r5
    4e5a:	6a00      	ldr	r0, [r0, #32]
    4e5c:	f500 700a 	add.w	r0, r0, #552	; 0x228
    4e60:	f001 ffc0 	bl	6de4 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>
    4e64:	2000      	movs	r0, #0
    4e66:	61b8      	str	r0, [r7, #24]
    4e68:	e00c      	b.n	4e84 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x530>
    4e6a:	497d      	ldr	r1, [pc, #500]	; (5060 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    4e6c:	6a08      	ldr	r0, [r1, #32]
    4e6e:	f500 700a 	add.w	r0, r0, #552	; 0x228
    4e72:	61b8      	str	r0, [r7, #24]
    4e74:	6a08      	ldr	r0, [r1, #32]
    4e76:	6c8a      	ldr	r2, [r1, #72]	; 0x48
    4e78:	f8d0 0230 	ldr.w	r0, [r0, #560]	; 0x230
    4e7c:	4282      	cmp	r2, r0
    4e7e:	d300      	bcc.n	4e82 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x52e>
    4e80:	4610      	mov	r0, r2
    4e82:	6488      	str	r0, [r1, #72]	; 0x48
    4e84:	4876      	ldr	r0, [pc, #472]	; (5060 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    4e86:	6a00      	ldr	r0, [r0, #32]
    4e88:	b158      	cbz	r0, 4ea2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x54e>
    4e8a:	b16d      	cbz	r5, 4ea8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x554>
    4e8c:	e9d5 1301 	ldrd	r1, r3, [r5, #4]
    4e90:	f8d5 c000 	ldr.w	ip, [r5]
    4e94:	eb1c 0303 	adds.w	r3, ip, r3
    4e98:	eb41 010a 	adc.w	r1, r1, sl
    4e9c:	e9c0 318a 	strd	r3, r1, [r0, #552]	; 0x228
    4ea0:	e005      	b.n	4eae <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x55a>
    4ea2:	f240 7185 	movw	r1, #1925	; 0x785
    4ea6:	e01a      	b.n	4ede <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x58a>
    4ea8:	2100      	movs	r1, #0
    4eaa:	e9c0 118a 	strd	r1, r1, [r0, #552]	; 0x228
    4eae:	4638      	mov	r0, r7
    4eb0:	9900      	ldr	r1, [sp, #0]
    4eb2:	f001 ff97 	bl	6de4 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>
    4eb6:	486a      	ldr	r0, [pc, #424]	; (5060 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    4eb8:	9a00      	ldr	r2, [sp, #0]
    4eba:	6845      	ldr	r5, [r0, #4]
    4ebc:	b192      	cbz	r2, 4ee4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x590>
    4ebe:	e9d2 1301 	ldrd	r1, r3, [r2, #4]
    4ec2:	6817      	ldr	r7, [r2, #0]
    4ec4:	e9cd b400 	strd	fp, r4, [sp]
    4ec8:	18f8      	adds	r0, r7, r3
    4eca:	eb41 010a 	adc.w	r1, r1, sl
    4ece:	462a      	mov	r2, r5
    4ed0:	f00a f9a7 	bl	f222 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>
    4ed4:	4601      	mov	r1, r0
    4ed6:	42a8      	cmp	r0, r5
    4ed8:	d905      	bls.n	4ee6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x592>
    4eda:	f240 31f9 	movw	r1, #1017	; 0x3f9
    4ede:	2021      	movs	r0, #33	; 0x21
    4ee0:	f7fb fdc0 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4ee4:	2100      	movs	r1, #0
    4ee6:	eb1b 0501 	adds.w	r5, fp, r1
    4eea:	495d      	ldr	r1, [pc, #372]	; (5060 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    4eec:	4650      	mov	r0, sl
    4eee:	4144      	adcs	r4, r0
    4ef0:	684a      	ldr	r2, [r1, #4]
    4ef2:	1aab      	subs	r3, r5, r2
    4ef4:	eb64 020a 	sbc.w	r2, r4, sl
    4ef8:	e9c1 3210 	strd	r3, r2, [r1, #64]	; 0x40
    4efc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4efe:	3128      	adds	r1, #40	; 0x28
    4f00:	b152      	cbz	r2, 4f18 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5c4>
    4f02:	f242 7310 	movw	r3, #10000	; 0x2710
    4f06:	435a      	muls	r2, r3
    4f08:	18aa      	adds	r2, r5, r2
    4f0a:	eb44 000a 	adc.w	r0, r4, sl
    4f0e:	e9c1 2000 	strd	r2, r0, [r1]
    4f12:	2001      	movs	r0, #1
    4f14:	e051      	b.n	4fba <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x666>
    4f16:	e005      	b.n	4f24 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5d0>
    4f18:	f04f 30ff 	mov.w	r0, #4294967295
    4f1c:	0842      	lsrs	r2, r0, #1
    4f1e:	e9c1 0200 	strd	r0, r2, [r1]
    4f22:	e7f6      	b.n	4f12 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5be>
    4f24:	9803      	ldr	r0, [sp, #12]
    4f26:	b1d8      	cbz	r0, 4f60 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x60c>
    4f28:	2001      	movs	r0, #1
    4f2a:	f009 fdec 	bl	eb06 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x16>
    4f2e:	4604      	mov	r4, r0
    4f30:	2001      	movs	r0, #1
    4f32:	f003 f8f7 	bl	8124 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    4f36:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    4f3a:	4401      	add	r1, r0
    4f3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    4f40:	fbb1 f0f0 	udiv	r0, r1, r0
    4f44:	1822      	adds	r2, r4, r0
    4f46:	4640      	mov	r0, r8
    4f48:	4649      	mov	r1, r9
    4f4a:	32f4      	adds	r2, #244	; 0xf4
    4f4c:	f7ff ff0e 	bl	4d6c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x418>
    4f50:	b908      	cbnz	r0, 4f56 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x602>
    4f52:	2000      	movs	r0, #0
    4f54:	9002      	str	r0, [sp, #8]
    4f56:	4645      	mov	r5, r8
    4f58:	464c      	mov	r4, r9
    4f5a:	f8cd a014 	str.w	sl, [sp, #20]
    4f5e:	e02d      	b.n	4fbc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x668>
    4f60:	b13c      	cbz	r4, 4f72 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x61e>
    4f62:	aa05      	add	r2, sp, #20
    4f64:	4640      	mov	r0, r8
    4f66:	4649      	mov	r1, r9
    4f68:	f7ff fe50 	bl	4c0c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2b8>
    4f6c:	4605      	mov	r5, r0
    4f6e:	460c      	mov	r4, r1
    4f70:	e024      	b.n	4fbc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x668>
    4f72:	4640      	mov	r0, r8
    4f74:	4649      	mov	r1, r9
    4f76:	f000 f8e5 	bl	5144 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7f0>
    4f7a:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 5060 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>
    4f7e:	4602      	mov	r2, r0
    4f80:	4608      	mov	r0, r1
    4f82:	f8db 1008 	ldr.w	r1, [fp, #8]
    4f86:	9102      	str	r1, [sp, #8]
    4f88:	f8db 3004 	ldr.w	r3, [fp, #4]
    4f8c:	4657      	mov	r7, sl
    4f8e:	189d      	adds	r5, r3, r2
    4f90:	eb4a 0400 	adc.w	r4, sl, r0
    4f94:	e9db 0104 	ldrd	r0, r1, [fp, #16]
    4f98:	f000 f8c8 	bl	512c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7d8>
    4f9c:	f8db 1004 	ldr.w	r1, [fp, #4]
    4fa0:	4348      	muls	r0, r1
    4fa2:	9000      	str	r0, [sp, #0]
    4fa4:	f7ff fedc 	bl	4d60 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x40c>
    4fa8:	9a00      	ldr	r2, [sp, #0]
    4faa:	1880      	adds	r0, r0, r2
    4fac:	4179      	adcs	r1, r7
    4fae:	e9cb 0110 	strd	r0, r1, [fp, #64]	; 0x40
    4fb2:	4621      	mov	r1, r4
    4fb4:	4628      	mov	r0, r5
    4fb6:	f000 f8b9 	bl	512c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7d8>
    4fba:	9005      	str	r0, [sp, #20]
    4fbc:	2001      	movs	r0, #1
    4fbe:	f009 fda2 	bl	eb06 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x16>
    4fc2:	4607      	mov	r7, r0
    4fc4:	2001      	movs	r0, #1
    4fc6:	f003 f8ad 	bl	8124 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    4fca:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    4fce:	4401      	add	r1, r0
    4fd0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    4fd4:	fbb1 f0f0 	udiv	r0, r1, r0
    4fd8:	4407      	add	r7, r0
    4fda:	4628      	mov	r0, r5
    4fdc:	4621      	mov	r1, r4
    4fde:	37f4      	adds	r7, #244	; 0xf4
    4fe0:	9a02      	ldr	r2, [sp, #8]
    4fe2:	f000 f8c5 	bl	5170 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x81c>
    4fe6:	491e      	ldr	r1, [pc, #120]	; (5060 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    4fe8:	eb01 028a 	add.w	r2, r1, sl, lsl #2
    4fec:	6892      	ldr	r2, [r2, #8]
    4fee:	4282      	cmp	r2, r0
    4ff0:	d800      	bhi.n	4ff4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6a0>
    4ff2:	4610      	mov	r0, r2
    4ff4:	6348      	str	r0, [r1, #52]	; 0x34
    4ff6:	9a08      	ldr	r2, [sp, #32]
    4ff8:	b10a      	cbz	r2, 4ffe <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6aa>
    4ffa:	e9c1 5404 	strd	r5, r4, [r1, #16]
    4ffe:	e9c1 5406 	strd	r5, r4, [r1, #24]
    5002:	468b      	mov	fp, r1
    5004:	9904      	ldr	r1, [sp, #16]
    5006:	b111      	cbz	r1, 500e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6ba>
    5008:	f8cb 7030 	str.w	r7, [fp, #48]	; 0x30
    500c:	e001      	b.n	5012 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6be>
    500e:	f8cb 0030 	str.w	r0, [fp, #48]	; 0x30
    5012:	2001      	movs	r0, #1
    5014:	72f0      	strb	r0, [r6, #11]
    5016:	f009 fd54 	bl	eac2 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>
    501a:	8130      	strh	r0, [r6, #8]
    501c:	4628      	mov	r0, r5
    501e:	4621      	mov	r1, r4
    5020:	f000 f822 	bl	5068 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x714>
    5024:	72b0      	strb	r0, [r6, #10]
    5026:	f8db 0030 	ldr.w	r0, [fp, #48]	; 0x30
    502a:	6070      	str	r0, [r6, #4]
    502c:	9803      	ldr	r0, [sp, #12]
    502e:	b148      	cbz	r0, 5044 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6f0>
    5030:	2001      	movs	r0, #1
    5032:	7030      	strb	r0, [r6, #0]
    5034:	4a0b      	ldr	r2, [pc, #44]	; (5064 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x710>)
    5036:	4640      	mov	r0, r8
    5038:	4649      	mov	r1, r9
    503a:	f000 f899 	bl	5170 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x81c>
    503e:	1bc0      	subs	r0, r0, r7
    5040:	6130      	str	r0, [r6, #16]
    5042:	e003      	b.n	504c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6f8>
    5044:	f886 a000 	strb.w	sl, [r6]
    5048:	e9c6 5404 	strd	r5, r4, [r6, #16]
    504c:	f8db 0034 	ldr.w	r0, [fp, #52]	; 0x34
    5050:	42b8      	cmp	r0, r7
    5052:	d303      	bcc.n	505c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x708>
    5054:	2001      	movs	r0, #1
    5056:	b00b      	add	sp, #44	; 0x2c
    5058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    505c:	2000      	movs	r0, #0
    505e:	e7fa      	b.n	5056 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x702>
    5060:	20000d50 	.word	0x20000d50
    5064:	0f424000 	.word	0x0f424000
    5068:	b570      	push	{r4, r5, r6, lr}
    506a:	4604      	mov	r4, r0
    506c:	480a      	ldr	r0, [pc, #40]	; (5098 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x744>)
    506e:	460d      	mov	r5, r1
    5070:	7801      	ldrb	r1, [r0, #0]
    5072:	2904      	cmp	r1, #4
    5074:	d10d      	bne.n	5092 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x73e>
    5076:	6840      	ldr	r0, [r0, #4]
    5078:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    507c:	0046      	lsls	r6, r0, #1
    507e:	f7ff fe6f 	bl	4d60 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x40c>
    5082:	4622      	mov	r2, r4
    5084:	462b      	mov	r3, r5
    5086:	f009 fd6b 	bl	eb60 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x70>
    508a:	42b0      	cmp	r0, r6
    508c:	d201      	bcs.n	5092 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x73e>
    508e:	2002      	movs	r0, #2
    5090:	bd70      	pop	{r4, r5, r6, pc}
    5092:	2001      	movs	r0, #1
    5094:	bd70      	pop	{r4, r5, r6, pc}
    5096:	0000      	.short	0x0000
    5098:	20000d50 	.word	0x20000d50
    509c:	b570      	push	{r4, r5, r6, lr}
    509e:	4d14      	ldr	r5, [pc, #80]	; (50f0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x79c>)
    50a0:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    50a4:	f105 0440 	add.w	r4, r5, #64	; 0x40
    50a8:	2800      	cmp	r0, #0
    50aa:	7828      	ldrb	r0, [r5, #0]
    50ac:	d00f      	beq.n	50ce <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x77a>
    50ae:	2805      	cmp	r0, #5
    50b0:	d004      	beq.n	50bc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x768>
    50b2:	f240 2157 	movw	r1, #599	; 0x257
    50b6:	2021      	movs	r0, #33	; 0x21
    50b8:	f7fb fcd4 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    50bc:	4620      	mov	r0, r4
    50be:	f009 fd1d 	bl	eafc <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0xc>
    50c2:	b178      	cbz	r0, 50e4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x790>
    50c4:	4620      	mov	r0, r4
    50c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    50ca:	f001 be69 	b.w	6da0 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ>
    50ce:	2805      	cmp	r0, #5
    50d0:	d108      	bne.n	50e4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x790>
    50d2:	4620      	mov	r0, r4
    50d4:	f009 fd12 	bl	eafc <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0xc>
    50d8:	b920      	cbnz	r0, 50e4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x790>
    50da:	6a28      	ldr	r0, [r5, #32]
    50dc:	f500 700a 	add.w	r0, r0, #552	; 0x228
    50e0:	f001 fea0 	bl	6e24 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    50e4:	4620      	mov	r0, r4
    50e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    50ea:	f001 be9b 	b.w	6e24 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    50ee:	0000      	.short	0x0000
    50f0:	20000d50 	.word	0x20000d50
    50f4:	b510      	push	{r4, lr}
    50f6:	f7fe f8d1 	bl	329c <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI>
    50fa:	490b      	ldr	r1, [pc, #44]	; (5128 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7d4>)
    50fc:	2000      	movs	r0, #0
    50fe:	7088      	strb	r0, [r1, #2]
    5100:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
    5104:	6208      	str	r0, [r1, #32]
    5106:	7008      	strb	r0, [r1, #0]
    5108:	f7fe f856 	bl	31b8 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    510c:	4604      	mov	r4, r0
    510e:	7800      	ldrb	r0, [r0, #0]
    5110:	f005 fcd6 	bl	aac0 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    5114:	b110      	cbz	r0, 511c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7c8>
    5116:	2020      	movs	r0, #32
    5118:	7020      	strb	r0, [r4, #0]
    511a:	bd10      	pop	{r4, pc}
    511c:	f240 3192 	movw	r1, #914	; 0x392
    5120:	2021      	movs	r0, #33	; 0x21
    5122:	f7fb fc9f 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5126:	0000      	.short	0x0000
    5128:	20000d50 	.word	0x20000d50
    512c:	b510      	push	{r4, lr}
    512e:	4604      	mov	r4, r0
    5130:	f7ff fe16 	bl	4d60 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x40c>
    5134:	4902      	ldr	r1, [pc, #8]	; (5140 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7ec>)
    5136:	1a20      	subs	r0, r4, r0
    5138:	6849      	ldr	r1, [r1, #4]
    513a:	fbb0 f0f1 	udiv	r0, r0, r1
    513e:	bd10      	pop	{r4, pc}
    5140:	20000d50 	.word	0x20000d50
    5144:	b570      	push	{r4, r5, r6, lr}
    5146:	4604      	mov	r4, r0
    5148:	460d      	mov	r5, r1
    514a:	f7ff fe09 	bl	4d60 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x40c>
    514e:	4622      	mov	r2, r4
    5150:	462b      	mov	r3, r5
    5152:	f009 fd05 	bl	eb60 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x70>
    5156:	4905      	ldr	r1, [pc, #20]	; (516c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x818>)
    5158:	684c      	ldr	r4, [r1, #4]
    515a:	fbb0 f0f4 	udiv	r0, r0, r4
    515e:	4344      	muls	r4, r0
    5160:	f7ff fdfe 	bl	4d60 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x40c>
    5164:	1900      	adds	r0, r0, r4
    5166:	f141 0100 	adc.w	r1, r1, #0
    516a:	bd70      	pop	{r4, r5, r6, pc}
    516c:	20000d50 	.word	0x20000d50
    5170:	4b0a      	ldr	r3, [pc, #40]	; (519c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x848>)
    5172:	b510      	push	{r4, lr}
    5174:	e9d3 430a 	ldrd	r4, r3, [r3, #40]	; 0x28
    5178:	1a20      	subs	r0, r4, r0
    517a:	eb63 0301 	sbc.w	r3, r3, r1
    517e:	2400      	movs	r4, #0
    5180:	4621      	mov	r1, r4
    5182:	1a24      	subs	r4, r4, r0
    5184:	4199      	sbcs	r1, r3
    5186:	da06      	bge.n	5196 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x842>
    5188:	2100      	movs	r1, #0
    518a:	1a14      	subs	r4, r2, r0
    518c:	eb71 0403 	sbcs.w	r4, r1, r3
    5190:	da00      	bge.n	5194 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x840>
    5192:	4610      	mov	r0, r2
    5194:	bd10      	pop	{r4, pc}
    5196:	2000      	movs	r0, #0
    5198:	bd10      	pop	{r4, pc}
    519a:	0000      	.short	0x0000
    519c:	20000d50 	.word	0x20000d50

000051a0 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI>:
    51a0:	b570      	push	{r4, r5, r6, lr}
    51a2:	f002 fecf 	bl	7f44 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    51a6:	4c0d      	ldr	r4, [pc, #52]	; (51dc <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x3c>)
    51a8:	4606      	mov	r6, r0
    51aa:	4602      	mov	r2, r0
    51ac:	e9d4 5101 	ldrd	r5, r1, [r4, #4]
    51b0:	4628      	mov	r0, r5
    51b2:	f008 fc90 	bl	dad6 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>
    51b6:	6060      	str	r0, [r4, #4]
    51b8:	42a8      	cmp	r0, r5
    51ba:	d005      	beq.n	51c8 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x28>
    51bc:	68e1      	ldr	r1, [r4, #12]
    51be:	1b40      	subs	r0, r0, r5
    51c0:	4408      	add	r0, r1
    51c2:	60e0      	str	r0, [r4, #12]
    51c4:	f005 fef8 	bl	afb8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    51c8:	6860      	ldr	r0, [r4, #4]
    51ca:	42b0      	cmp	r0, r6
    51cc:	d301      	bcc.n	51d2 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x32>
    51ce:	7820      	ldrb	r0, [r4, #0]
    51d0:	b108      	cbz	r0, 51d6 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x36>
    51d2:	2000      	movs	r0, #0
    51d4:	bd70      	pop	{r4, r5, r6, pc}
    51d6:	2001      	movs	r0, #1
    51d8:	bd70      	pop	{r4, r5, r6, pc}
    51da:	0000      	.short	0x0000
    51dc:	20001030 	.word	0x20001030

000051e0 <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI>:
    51e0:	4903      	ldr	r1, [pc, #12]	; (51f0 <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI+0x10>)
    51e2:	2000      	movs	r0, #0
    51e4:	6008      	str	r0, [r1, #0]
    51e6:	6048      	str	r0, [r1, #4]
    51e8:	6088      	str	r0, [r1, #8]
    51ea:	60c8      	str	r0, [r1, #12]
    51ec:	f000 b856 	b.w	529c <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x30>
    51f0:	20001030 	.word	0x20001030

000051f4 <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I>:
    51f4:	b510      	push	{r4, lr}
    51f6:	b086      	sub	sp, #24
    51f8:	0004      	movs	r4, r0
    51fa:	d005      	beq.n	5208 <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x14>
    51fc:	f894 0248 	ldrb.w	r0, [r4, #584]	; 0x248
    5200:	b128      	cbz	r0, 520e <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x1a>
    5202:	f240 1177 	movw	r1, #375	; 0x177
    5206:	e025      	b.n	5254 <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x60>
    5208:	f44f 71bb 	mov.w	r1, #374	; 0x176
    520c:	e022      	b.n	5254 <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x60>
    520e:	f894 0249 	ldrb.w	r0, [r4, #585]	; 0x249
    5212:	2820      	cmp	r0, #32
    5214:	d002      	beq.n	521c <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x28>
    5216:	f240 1179 	movw	r1, #377	; 0x179
    521a:	e01b      	b.n	5254 <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x60>
    521c:	4621      	mov	r1, r4
    521e:	480f      	ldr	r0, [pc, #60]	; (525c <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x68>)
    5220:	f005 fd88 	bl	ad34 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    5224:	f884 0249 	strb.w	r0, [r4, #585]	; 0x249
    5228:	2820      	cmp	r0, #32
    522a:	d00e      	beq.n	524a <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x56>
    522c:	2300      	movs	r3, #0
    522e:	2201      	movs	r2, #1
    5230:	4621      	mov	r1, r4
    5232:	4668      	mov	r0, sp
    5234:	f009 fce8 	bl	ec08 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x2e>
    5238:	f894 0249 	ldrb.w	r0, [r4, #585]	; 0x249
    523c:	4669      	mov	r1, sp
    523e:	f009 fdca 	bl	edd6 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x1fc>
    5242:	b128      	cbz	r0, 5250 <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x5c>
    5244:	b006      	add	sp, #24
    5246:	2000      	movs	r0, #0
    5248:	bd10      	pop	{r4, pc}
    524a:	f44f 71be 	mov.w	r1, #380	; 0x17c
    524e:	e001      	b.n	5254 <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x60>
    5250:	f240 117f 	movw	r1, #383	; 0x17f
    5254:	2035      	movs	r0, #53	; 0x35
    5256:	f7fb fc05 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    525a:	0000      	.short	0x0000
    525c:	0000535d 	.word	0x0000535d

00005260 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI>:
    5260:	4901      	ldr	r1, [pc, #4]	; (5268 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0x8>)
    5262:	7048      	strb	r0, [r1, #1]
    5264:	4770      	bx	lr
    5266:	0000      	.short	0x0000
    5268:	20001030 	.word	0x20001030

0000526c <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI>:
    526c:	b570      	push	{r4, r5, r6, lr}
    526e:	4605      	mov	r5, r0
    5270:	4809      	ldr	r0, [pc, #36]	; (5298 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x2c>)
    5272:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    5276:	fbb0 f4f1 	udiv	r4, r0, r1
    527a:	f009 fc39 	bl	eaf0 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY>
    527e:	1901      	adds	r1, r0, r4
    5280:	4628      	mov	r0, r5
    5282:	f501 719d 	add.w	r1, r1, #314	; 0x13a
    5286:	f009 f812 	bl	e2ae <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    528a:	f640 0148 	movw	r1, #2120	; 0x848
    528e:	4288      	cmp	r0, r1
    5290:	d300      	bcc.n	5294 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x28>
    5292:	4608      	mov	r0, r1
    5294:	b280      	uxth	r0, r0
    5296:	bd70      	pop	{r4, r5, r6, pc}
    5298:	000122f9 	.word	0x000122f9
    529c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    52a0:	4d15      	ldr	r5, [pc, #84]	; (52f8 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x8c>)
    52a2:	2001      	movs	r0, #1
    52a4:	7028      	strb	r0, [r5, #0]
    52a6:	2400      	movs	r4, #0
    52a8:	f64f 76ff 	movw	r6, #65535	; 0xffff
    52ac:	e00b      	b.n	52c6 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x5a>
    52ae:	2100      	movs	r1, #0
    52b0:	f008 fa62 	bl	d778 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    52b4:	0007      	movs	r7, r0
    52b6:	d009      	beq.n	52cc <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x60>
    52b8:	f897 0249 	ldrb.w	r0, [r7, #585]	; 0x249
    52bc:	f005 fc22 	bl	ab04 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    52c0:	4638      	mov	r0, r7
    52c2:	f009 fd59 	bl	ed78 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x19e>
    52c6:	9400      	str	r4, [sp, #0]
    52c8:	9401      	str	r4, [sp, #4]
    52ca:	e00d      	b.n	52e8 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x7c>
    52cc:	f240 1199 	movw	r1, #409	; 0x199
    52d0:	2035      	movs	r0, #53	; 0x35
    52d2:	f7fb fbc7 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    52d6:	9800      	ldr	r0, [sp, #0]
    52d8:	b130      	cbz	r0, 52e8 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x7c>
    52da:	f890 1248 	ldrb.w	r1, [r0, #584]	; 0x248
    52de:	b119      	cbz	r1, 52e8 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x7c>
    52e0:	8800      	ldrh	r0, [r0, #0]
    52e2:	42b0      	cmp	r0, r6
    52e4:	d1e3      	bne.n	52ae <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x42>
    52e6:	e004      	b.n	52f2 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x86>
    52e8:	4668      	mov	r0, sp
    52ea:	f7fb fdd9 	bl	ea0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    52ee:	2800      	cmp	r0, #0
    52f0:	d0f1      	beq.n	52d6 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x6a>
    52f2:	702c      	strb	r4, [r5, #0]
    52f4:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    52f8:	20001030 	.word	0x20001030
    52fc:	b510      	push	{r4, lr}
    52fe:	4604      	mov	r4, r0
    5300:	2901      	cmp	r1, #1
    5302:	d102      	bne.n	530a <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x9e>
    5304:	480a      	ldr	r0, [pc, #40]	; (5330 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0xc4>)
    5306:	7800      	ldrb	r0, [r0, #0]
    5308:	b140      	cbz	r0, 531c <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0xb0>
    530a:	2004      	movs	r0, #4
    530c:	f884 0248 	strb.w	r0, [r4, #584]	; 0x248
    5310:	f002 fe1e 	bl	7f50 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    5314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5318:	f005 bd34 	b.w	ad84 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    531c:	2200      	movs	r2, #0
    531e:	2101      	movs	r1, #1
    5320:	4620      	mov	r0, r4
    5322:	f009 fd41 	bl	eda8 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x1ce>
    5326:	f834 0f9c 	ldrh.w	r0, [r4, #156]!
    532a:	1c40      	adds	r0, r0, #1
    532c:	8020      	strh	r0, [r4, #0]
    532e:	e7ef      	b.n	5310 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0xa4>
    5330:	20001030 	.word	0x20001030
    5334:	b510      	push	{r4, lr}
    5336:	4604      	mov	r4, r0
    5338:	4608      	mov	r0, r1
    533a:	f002 fef3 	bl	8124 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    533e:	4906      	ldr	r1, [pc, #24]	; (5358 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0xec>)
    5340:	f200 709d 	addw	r0, r0, #1949	; 0x79d
    5344:	f831 1014 	ldrh.w	r1, [r1, r4, lsl #1]
    5348:	4408      	add	r0, r1
    534a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    534e:	fbb0 f0f1 	udiv	r0, r0, r1
    5352:	f500 709d 	add.w	r0, r0, #314	; 0x13a
    5356:	bd10      	pop	{r4, pc}
    5358:	0000edda 	.word	0x0000edda
    535c:	b570      	push	{r4, r5, r6, lr}
    535e:	0004      	movs	r4, r0
    5360:	d008      	beq.n	5374 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x108>
    5362:	2909      	cmp	r1, #9
    5364:	d25f      	bcs.n	5426 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x1ba>
    5366:	e8df f001 	tbb	[pc, r1]
    536a:	3807      	.short	0x3807
    536c:	5e3c4040 	.word	0x5e3c4040
    5370:	00594e47 	.word	0x00594e47
    5374:	21b7      	movs	r1, #183	; 0xb7
    5376:	e053      	b.n	5420 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x1b4>
    5378:	f894 0248 	ldrb.w	r0, [r4, #584]	; 0x248
    537c:	b358      	cbz	r0, 53d6 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x16a>
    537e:	4620      	mov	r0, r4
    5380:	f000 f928 	bl	55d4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA>
    5384:	f009 fbb4 	bl	eaf0 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY>
    5388:	f200 103b 	addw	r0, r0, #315	; 0x13b
    538c:	b285      	uxth	r5, r0
    538e:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    5392:	2128      	movs	r1, #40	; 0x28
    5394:	f009 fc24 	bl	ebe0 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x6>
    5398:	182e      	adds	r6, r5, r0
    539a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    539c:	6920      	ldr	r0, [r4, #16]
    539e:	4288      	cmp	r0, r1
    53a0:	d200      	bcs.n	53a4 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x138>
    53a2:	4601      	mov	r1, r0
    53a4:	4632      	mov	r2, r6
    53a6:	4620      	mov	r0, r4
    53a8:	f008 fef1 	bl	e18e <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    53ac:	4d1f      	ldr	r5, [pc, #124]	; (542c <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x1c0>)
    53ae:	6068      	str	r0, [r5, #4]
    53b0:	7869      	ldrb	r1, [r5, #1]
    53b2:	b121      	cbz	r1, 53be <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x152>
    53b4:	4632      	mov	r2, r6
    53b6:	4620      	mov	r0, r4
    53b8:	6921      	ldr	r1, [r4, #16]
    53ba:	f008 fee8 	bl	e18e <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    53be:	60a8      	str	r0, [r5, #8]
    53c0:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    53c4:	f008 ff44 	bl	e250 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    53c8:	f5a0 7095 	sub.w	r0, r0, #298	; 0x12a
    53cc:	60e8      	str	r0, [r5, #12]
    53ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    53d2:	f005 bdf1 	b.w	afb8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    53d6:	21bf      	movs	r1, #191	; 0xbf
    53d8:	e022      	b.n	5420 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x1b4>
    53da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    53de:	f009 bd0d 	b.w	edfc <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ>
    53e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    53e6:	f002 bf87 	b.w	82f8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    53ea:	4620      	mov	r0, r4
    53ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    53f0:	2201      	movs	r2, #1
    53f2:	2100      	movs	r1, #0
    53f4:	f009 bcd8 	b.w	eda8 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x1ce>
    53f8:	2001      	movs	r0, #1
    53fa:	f004 fcc3 	bl	9d84 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
    53fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5402:	f008 bad7 	b.w	d9b4 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>
    5406:	f894 0248 	ldrb.w	r0, [r4, #584]	; 0x248
    540a:	2804      	cmp	r0, #4
    540c:	d001      	beq.n	5412 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x1a6>
    540e:	21fe      	movs	r1, #254	; 0xfe
    5410:	e006      	b.n	5420 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x1b4>
    5412:	4620      	mov	r0, r4
    5414:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5418:	f009 bcae 	b.w	ed78 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x19e>
    541c:	f44f 7183 	mov.w	r1, #262	; 0x106
    5420:	2035      	movs	r0, #53	; 0x35
    5422:	f7fb fb1f 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5426:	f44f 7185 	mov.w	r1, #266	; 0x10a
    542a:	e7f9      	b.n	5420 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x1b4>
    542c:	20001030 	.word	0x20001030

00005430 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ>:
    5430:	4806      	ldr	r0, [pc, #24]	; (544c <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x1c>)
    5432:	4905      	ldr	r1, [pc, #20]	; (5448 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x18>)
    5434:	6501      	str	r1, [r0, #80]	; 0x50
    5436:	4906      	ldr	r1, [pc, #24]	; (5450 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x20>)
    5438:	6541      	str	r1, [r0, #84]	; 0x54
    543a:	4807      	ldr	r0, [pc, #28]	; (5458 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x28>)
    543c:	4905      	ldr	r1, [pc, #20]	; (5454 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x24>)
    543e:	6501      	str	r1, [r0, #80]	; 0x50
    5440:	4906      	ldr	r1, [pc, #24]	; (545c <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x2c>)
    5442:	6541      	str	r1, [r0, #84]	; 0x54
    5444:	4770      	bx	lr
    5446:	0000      	.short	0x0000
    5448:	000065f9 	.word	0x000065f9
    544c:	200000f8 	.word	0x200000f8
    5450:	000066d1 	.word	0x000066d1
    5454:	0000efcf 	.word	0x0000efcf
    5458:	200001a4 	.word	0x200001a4
    545c:	0000eff9 	.word	0x0000eff9

00005460 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA>:
    5460:	b570      	push	{r4, r5, r6, lr}
    5462:	4605      	mov	r5, r0
    5464:	f8b0 00d6 	ldrh.w	r0, [r0, #214]	; 0xd6
    5468:	f895 10a9 	ldrb.w	r1, [r5, #169]	; 0xa9
    546c:	b1c9      	cbz	r1, 54a2 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x42>
    546e:	f8b5 10d8 	ldrh.w	r1, [r5, #216]	; 0xd8
    5472:	1a0c      	subs	r4, r1, r0
    5474:	f1b4 0404 	subs.w	r4, r4, #4
    5478:	f895 00d4 	ldrb.w	r0, [r5, #212]	; 0xd4
    547c:	b140      	cbz	r0, 5490 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x30>
    547e:	f895 20a5 	ldrb.w	r2, [r5, #165]	; 0xa5
    5482:	2300      	movs	r3, #0
    5484:	2109      	movs	r1, #9
    5486:	f105 0088 	add.w	r0, r5, #136	; 0x88
    548a:	f008 fb37 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    548e:	b160      	cbz	r0, 54aa <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x4a>
    5490:	4628      	mov	r0, r5
    5492:	f009 feb7 	bl	f204 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x408>
    5496:	b138      	cbz	r0, 54a8 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x48>
    5498:	e9d5 1032 	ldrd	r1, r0, [r5, #200]	; 0xc8
    549c:	1a40      	subs	r0, r0, r1
    549e:	1f00      	subs	r0, r0, #4
    54a0:	e003      	b.n	54aa <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x4a>
    54a2:	f1c0 0402 	rsb	r4, r0, #2
    54a6:	e7e7      	b.n	5478 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x18>
    54a8:	4620      	mov	r0, r4
    54aa:	42a0      	cmp	r0, r4
    54ac:	da00      	bge.n	54b0 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x50>
    54ae:	4604      	mov	r4, r0
    54b0:	2c00      	cmp	r4, #0
    54b2:	dc01      	bgt.n	54b8 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x58>
    54b4:	2000      	movs	r0, #0
    54b6:	bd70      	pop	{r4, r5, r6, pc}
    54b8:	b2a0      	uxth	r0, r4
    54ba:	bd70      	pop	{r4, r5, r6, pc}

000054bc <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY>:
    54bc:	481d      	ldr	r0, [pc, #116]	; (5534 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x78>)
    54be:	491c      	ldr	r1, [pc, #112]	; (5530 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x74>)
    54c0:	6081      	str	r1, [r0, #8]
    54c2:	491d      	ldr	r1, [pc, #116]	; (5538 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x7c>)
    54c4:	61c1      	str	r1, [r0, #28]
    54c6:	491d      	ldr	r1, [pc, #116]	; (553c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x80>)
    54c8:	62c1      	str	r1, [r0, #44]	; 0x2c
    54ca:	491d      	ldr	r1, [pc, #116]	; (5540 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x84>)
    54cc:	6101      	str	r1, [r0, #16]
    54ce:	491d      	ldr	r1, [pc, #116]	; (5544 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x88>)
    54d0:	6141      	str	r1, [r0, #20]
    54d2:	491d      	ldr	r1, [pc, #116]	; (5548 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x8c>)
    54d4:	6441      	str	r1, [r0, #68]	; 0x44
    54d6:	491d      	ldr	r1, [pc, #116]	; (554c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x90>)
    54d8:	6181      	str	r1, [r0, #24]
    54da:	491d      	ldr	r1, [pc, #116]	; (5550 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x94>)
    54dc:	6301      	str	r1, [r0, #48]	; 0x30
    54de:	491d      	ldr	r1, [pc, #116]	; (5554 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x98>)
    54e0:	6241      	str	r1, [r0, #36]	; 0x24
    54e2:	491d      	ldr	r1, [pc, #116]	; (5558 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x9c>)
    54e4:	64c1      	str	r1, [r0, #76]	; 0x4c
    54e6:	491d      	ldr	r1, [pc, #116]	; (555c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xa0>)
    54e8:	6481      	str	r1, [r0, #72]	; 0x48
    54ea:	491d      	ldr	r1, [pc, #116]	; (5560 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xa4>)
    54ec:	6341      	str	r1, [r0, #52]	; 0x34
    54ee:	491d      	ldr	r1, [pc, #116]	; (5564 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xa8>)
    54f0:	6381      	str	r1, [r0, #56]	; 0x38
    54f2:	481e      	ldr	r0, [pc, #120]	; (556c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xb0>)
    54f4:	491c      	ldr	r1, [pc, #112]	; (5568 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xac>)
    54f6:	6081      	str	r1, [r0, #8]
    54f8:	491d      	ldr	r1, [pc, #116]	; (5570 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xb4>)
    54fa:	61c1      	str	r1, [r0, #28]
    54fc:	491d      	ldr	r1, [pc, #116]	; (5574 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xb8>)
    54fe:	6201      	str	r1, [r0, #32]
    5500:	491d      	ldr	r1, [pc, #116]	; (5578 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xbc>)
    5502:	6041      	str	r1, [r0, #4]
    5504:	491d      	ldr	r1, [pc, #116]	; (557c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xc0>)
    5506:	6001      	str	r1, [r0, #0]
    5508:	491d      	ldr	r1, [pc, #116]	; (5580 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xc4>)
    550a:	6281      	str	r1, [r0, #40]	; 0x28
    550c:	491d      	ldr	r1, [pc, #116]	; (5584 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xc8>)
    550e:	62c1      	str	r1, [r0, #44]	; 0x2c
    5510:	491d      	ldr	r1, [pc, #116]	; (5588 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xcc>)
    5512:	60c1      	str	r1, [r0, #12]
    5514:	491d      	ldr	r1, [pc, #116]	; (558c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xd0>)
    5516:	6181      	str	r1, [r0, #24]
    5518:	491d      	ldr	r1, [pc, #116]	; (5590 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xd4>)
    551a:	6301      	str	r1, [r0, #48]	; 0x30
    551c:	491d      	ldr	r1, [pc, #116]	; (5594 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xd8>)
    551e:	6481      	str	r1, [r0, #72]	; 0x48
    5520:	491d      	ldr	r1, [pc, #116]	; (5598 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xdc>)
    5522:	64c1      	str	r1, [r0, #76]	; 0x4c
    5524:	491d      	ldr	r1, [pc, #116]	; (559c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xe0>)
    5526:	6441      	str	r1, [r0, #68]	; 0x44
    5528:	491d      	ldr	r1, [pc, #116]	; (55a0 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xe4>)
    552a:	6241      	str	r1, [r0, #36]	; 0x24
    552c:	4770      	bx	lr
    552e:	0000      	.short	0x0000
    5530:	00006a01 	.word	0x00006a01
    5534:	200000f8 	.word	0x200000f8
    5538:	00006a45 	.word	0x00006a45
    553c:	0000eedd 	.word	0x0000eedd
    5540:	00006539 	.word	0x00006539
    5544:	0000eefd 	.word	0x0000eefd
    5548:	00006905 	.word	0x00006905
    554c:	00006985 	.word	0x00006985
    5550:	00006a8d 	.word	0x00006a8d
    5554:	00006575 	.word	0x00006575
    5558:	0000eeaf 	.word	0x0000eeaf
    555c:	0000ee79 	.word	0x0000ee79
    5560:	00006939 	.word	0x00006939
    5564:	00006751 	.word	0x00006751
    5568:	0000f197 	.word	0x0000f197
    556c:	200001a4 	.word	0x200001a4
    5570:	0000f1c7 	.word	0x0000f1c7
    5574:	0000efcb 	.word	0x0000efcb
    5578:	0000ef3d 	.word	0x0000ef3d
    557c:	0000ef67 	.word	0x0000ef67
    5580:	0000f05b 	.word	0x0000f05b
    5584:	0000f08d 	.word	0x0000f08d
    5588:	0000ef91 	.word	0x0000ef91
    558c:	0000f179 	.word	0x0000f179
    5590:	0000f201 	.word	0x0000f201
    5594:	0000f027 	.word	0x0000f027
    5598:	0000f051 	.word	0x0000f051
    559c:	0000f157 	.word	0x0000f157
    55a0:	0000f023 	.word	0x0000f023

000055a4 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY>:
    55a4:	4806      	ldr	r0, [pc, #24]	; (55c0 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x1c>)
    55a6:	4905      	ldr	r1, [pc, #20]	; (55bc <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x18>)
    55a8:	6581      	str	r1, [r0, #88]	; 0x58
    55aa:	4906      	ldr	r1, [pc, #24]	; (55c4 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x20>)
    55ac:	65c1      	str	r1, [r0, #92]	; 0x5c
    55ae:	4807      	ldr	r0, [pc, #28]	; (55cc <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x28>)
    55b0:	4905      	ldr	r1, [pc, #20]	; (55c8 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x24>)
    55b2:	6581      	str	r1, [r0, #88]	; 0x58
    55b4:	4906      	ldr	r1, [pc, #24]	; (55d0 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x2c>)
    55b6:	6601      	str	r1, [r0, #96]	; 0x60
    55b8:	4770      	bx	lr
    55ba:	0000      	.short	0x0000
    55bc:	0000675d 	.word	0x0000675d
    55c0:	200000f8 	.word	0x200000f8
    55c4:	00006895 	.word	0x00006895
    55c8:	0000f0b3 	.word	0x0000f0b3
    55cc:	200001a4 	.word	0x200001a4
    55d0:	0000f0dd 	.word	0x0000f0dd

000055d4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA>:
    55d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    55d6:	4d39      	ldr	r5, [pc, #228]	; (56bc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe8>)
    55d8:	2600      	movs	r6, #0
    55da:	f1a5 070c 	sub.w	r7, r5, #12
    55de:	702e      	strb	r6, [r5, #0]
    55e0:	6068      	str	r0, [r5, #4]
    55e2:	807e      	strh	r6, [r7, #2]
    55e4:	707e      	strb	r6, [r7, #1]
    55e6:	4604      	mov	r4, r0
    55e8:	703e      	strb	r6, [r7, #0]
    55ea:	8800      	ldrh	r0, [r0, #0]
    55ec:	f7fb fff6 	bl	15dc <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    55f0:	6868      	ldr	r0, [r5, #4]
    55f2:	8800      	ldrh	r0, [r0, #0]
    55f4:	f7fb ff9a 	bl	152c <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    55f8:	f8b4 024a 	ldrh.w	r0, [r4, #586]	; 0x24a
    55fc:	1c40      	adds	r0, r0, #1
    55fe:	b282      	uxth	r2, r0
    5600:	6868      	ldr	r0, [r5, #4]
    5602:	f100 0388 	add.w	r3, r0, #136	; 0x88
    5606:	4601      	mov	r1, r0
    5608:	4618      	mov	r0, r3
    560a:	f008 fc26 	bl	de5a <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>
    560e:	b120      	cbz	r0, 561a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x46>
    5610:	f240 11c1 	movw	r1, #449	; 0x1c1
    5614:	2036      	movs	r0, #54	; 0x36
    5616:	f7fb fa25 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    561a:	f8a4 624a 	strh.w	r6, [r4, #586]	; 0x24a
    561e:	f894 00a6 	ldrb.w	r0, [r4, #166]	; 0xa6
    5622:	2825      	cmp	r0, #37	; 0x25
    5624:	d10a      	bne.n	563c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x68>
    5626:	f8b4 009c 	ldrh.w	r0, [r4, #156]	; 0x9c
    562a:	f8b4 1260 	ldrh.w	r1, [r4, #608]	; 0x260
    562e:	1a40      	subs	r0, r0, r1
    5630:	b200      	sxth	r0, r0
    5632:	2800      	cmp	r0, #0
    5634:	db02      	blt.n	563c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x68>
    5636:	f884 60a6 	strb.w	r6, [r4, #166]	; 0xa6
    563a:	e011      	b.n	5660 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8c>
    563c:	f894 00a5 	ldrb.w	r0, [r4, #165]	; 0xa5
    5640:	2825      	cmp	r0, #37	; 0x25
    5642:	d003      	beq.n	564c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x78>
    5644:	2826      	cmp	r0, #38	; 0x26
    5646:	d001      	beq.n	564c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x78>
    5648:	2827      	cmp	r0, #39	; 0x27
    564a:	d10c      	bne.n	5666 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x92>
    564c:	f8b4 009c 	ldrh.w	r0, [r4, #156]	; 0x9c
    5650:	f8b4 1260 	ldrh.w	r1, [r4, #608]	; 0x260
    5654:	1a40      	subs	r0, r0, r1
    5656:	b200      	sxth	r0, r0
    5658:	2800      	cmp	r0, #0
    565a:	db04      	blt.n	5666 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x92>
    565c:	f884 60a5 	strb.w	r6, [r4, #165]	; 0xa5
    5660:	f000 febe 	bl	63e0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd14>
    5664:	b318      	cbz	r0, 56ae <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xda>
    5666:	f000 fd43 	bl	60f0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa24>
    566a:	2800      	cmp	r0, #0
    566c:	d125      	bne.n	56ba <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe6>
    566e:	6868      	ldr	r0, [r5, #4]
    5670:	3088      	adds	r0, #136	; 0x88
    5672:	f009 fbd1 	bl	ee18 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    5676:	b120      	cbz	r0, 5682 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xae>
    5678:	6868      	ldr	r0, [r5, #4]
    567a:	f890 012e 	ldrb.w	r0, [r0, #302]	; 0x12e
    567e:	f000 fbdd 	bl	5e3c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x770>
    5682:	480f      	ldr	r0, [pc, #60]	; (56c0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xec>)
    5684:	9000      	str	r0, [sp, #0]
    5686:	e9d7 0103 	ldrd	r0, r1, [r7, #12]
    568a:	4b0e      	ldr	r3, [pc, #56]	; (56c4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf0>)
    568c:	4a0e      	ldr	r2, [pc, #56]	; (56c8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf4>)
    568e:	f7fc f827 	bl	16e0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>
    5692:	6868      	ldr	r0, [r5, #4]
    5694:	2300      	movs	r3, #0
    5696:	2105      	movs	r1, #5
    5698:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    569c:	3088      	adds	r0, #136	; 0x88
    569e:	f008 fa2d 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    56a2:	2800      	cmp	r0, #0
    56a4:	d009      	beq.n	56ba <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe6>
    56a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    56aa:	f7fc b813 	b.w	16d4 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>
    56ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    56b2:	2100      	movs	r1, #0
    56b4:	4608      	mov	r0, r1
    56b6:	f000 bcc3 	b.w	6040 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x974>
    56ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    56bc:	200000f0 	.word	0x200000f0
    56c0:	00006041 	.word	0x00006041
    56c4:	000058a9 	.word	0x000058a9
    56c8:	00006359 	.word	0x00006359

000056cc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI>:
    56cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    56ce:	460d      	mov	r5, r1
    56d0:	4604      	mov	r4, r0
    56d2:	2600      	movs	r6, #0
    56d4:	e051      	b.n	577a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xae>
    56d6:	bf00      	nop
    56d8:	f8b4 024a 	ldrh.w	r0, [r4, #586]	; 0x24a
    56dc:	1c40      	adds	r0, r0, #1
    56de:	f8a4 024a 	strh.w	r0, [r4, #586]	; 0x24a
    56e2:	f8b4 00d6 	ldrh.w	r0, [r4, #214]	; 0xd6
    56e6:	1c40      	adds	r0, r0, #1
    56e8:	f8a4 00d6 	strh.w	r0, [r4, #214]	; 0xd6
    56ec:	4620      	mov	r0, r4
    56ee:	f009 fd89 	bl	f204 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x408>
    56f2:	b198      	cbz	r0, 571c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x50>
    56f4:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
    56f8:	1c40      	adds	r0, r0, #1
    56fa:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
    56fe:	4620      	mov	r0, r4
    5700:	f009 fbab 	bl	ee5a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5e>
    5704:	e9d4 0132 	ldrd	r0, r1, [r4, #200]	; 0xc8
    5708:	4288      	cmp	r0, r1
    570a:	d307      	bcc.n	571c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x50>
    570c:	220f      	movs	r2, #15
    570e:	491d      	ldr	r1, [pc, #116]	; (5784 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb8>)
    5710:	f504 70b0 	add.w	r0, r4, #352	; 0x160
    5714:	f8c4 60c8 	str.w	r6, [r4, #200]	; 0xc8
    5718:	f008 fd15 	bl	e146 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    571c:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
    5720:	b120      	cbz	r0, 572c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x60>
    5722:	f8b4 00dc 	ldrh.w	r0, [r4, #220]	; 0xdc
    5726:	1c40      	adds	r0, r0, #1
    5728:	f8a4 00dc 	strh.w	r0, [r4, #220]	; 0xdc
    572c:	f894 00e4 	ldrb.w	r0, [r4, #228]	; 0xe4
    5730:	b120      	cbz	r0, 573c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x70>
    5732:	f8b4 00e2 	ldrh.w	r0, [r4, #226]	; 0xe2
    5736:	1c40      	adds	r0, r0, #1
    5738:	f8a4 00e2 	strh.w	r0, [r4, #226]	; 0xe2
    573c:	f894 0138 	ldrb.w	r0, [r4, #312]	; 0x138
    5740:	f88d 0000 	strb.w	r0, [sp]
    5744:	9800      	ldr	r0, [sp, #0]
    5746:	9000      	str	r0, [sp, #0]
    5748:	f89d 0000 	ldrb.w	r0, [sp]
    574c:	b940      	cbnz	r0, 5760 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x94>
    574e:	f894 20a7 	ldrb.w	r2, [r4, #167]	; 0xa7
    5752:	2300      	movs	r3, #0
    5754:	2101      	movs	r1, #1
    5756:	f104 0088 	add.w	r0, r4, #136	; 0x88
    575a:	f008 f9cf 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    575e:	b120      	cbz	r0, 576a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9e>
    5760:	f8b4 00da 	ldrh.w	r0, [r4, #218]	; 0xda
    5764:	1c40      	adds	r0, r0, #1
    5766:	f8a4 00da 	strh.w	r0, [r4, #218]	; 0xda
    576a:	4620      	mov	r0, r4
    576c:	f000 fa30 	bl	5bd0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x504>
    5770:	f8b4 009c 	ldrh.w	r0, [r4, #156]	; 0x9c
    5774:	1c40      	adds	r0, r0, #1
    5776:	f8a4 009c 	strh.w	r0, [r4, #156]	; 0x9c
    577a:	1e6d      	subs	r5, r5, #1
    577c:	b2ad      	uxth	r5, r5
    577e:	d2ab      	bcs.n	56d8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc>
    5780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5782:	0000      	.short	0x0000
    5784:	0000e63d 	.word	0x0000e63d
    5788:	4411      	add	r1, r2
    578a:	78c2      	ldrb	r2, [r0, #3]
    578c:	480c      	ldr	r0, [pc, #48]	; (57c0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf4>)
    578e:	1d89      	adds	r1, r1, #6
    5790:	b289      	uxth	r1, r1
    5792:	6840      	ldr	r0, [r0, #4]
    5794:	2a01      	cmp	r2, #1
    5796:	d006      	beq.n	57a6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xda>
    5798:	b142      	cbz	r2, 57ac <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe0>
    579a:	2a18      	cmp	r2, #24
    579c:	d105      	bne.n	57aa <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde>
    579e:	f890 2262 	ldrb.w	r2, [r0, #610]	; 0x262
    57a2:	b132      	cbz	r2, 57b2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe6>
    57a4:	e009      	b.n	57ba <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xee>
    57a6:	f8a0 125e 	strh.w	r1, [r0, #606]	; 0x25e
    57aa:	4770      	bx	lr
    57ac:	f8a0 1266 	strh.w	r1, [r0, #614]	; 0x266
    57b0:	4770      	bx	lr
    57b2:	f890 2263 	ldrb.w	r2, [r0, #611]	; 0x263
    57b6:	b902      	cbnz	r2, 57ba <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xee>
    57b8:	2100      	movs	r1, #0
    57ba:	f8a0 1260 	strh.w	r1, [r0, #608]	; 0x260
    57be:	4770      	bx	lr
    57c0:	200000f0 	.word	0x200000f0
    57c4:	490b      	ldr	r1, [pc, #44]	; (57f4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x128>)
    57c6:	78c2      	ldrb	r2, [r0, #3]
    57c8:	6849      	ldr	r1, [r1, #4]
    57ca:	2a01      	cmp	r2, #1
    57cc:	d006      	beq.n	57dc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x110>
    57ce:	b15a      	cbz	r2, 57e8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11c>
    57d0:	2a18      	cmp	r2, #24
    57d2:	d108      	bne.n	57e6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11a>
    57d4:	f8b1 1260 	ldrh.w	r1, [r1, #608]	; 0x260
    57d8:	f008 bc54 	b.w	e084 <sym_AYZTYWE6SD5T6ZDLITENLNSRAVS5VKE23BWONUA>
    57dc:	f8b1 125e 	ldrh.w	r1, [r1, #606]	; 0x25e
    57e0:	7241      	strb	r1, [r0, #9]
    57e2:	0a09      	lsrs	r1, r1, #8
    57e4:	7281      	strb	r1, [r0, #10]
    57e6:	4770      	bx	lr
    57e8:	f8b1 1266 	ldrh.w	r1, [r1, #614]	; 0x266
    57ec:	7341      	strb	r1, [r0, #13]
    57ee:	0a09      	lsrs	r1, r1, #8
    57f0:	7381      	strb	r1, [r0, #14]
    57f2:	4770      	bx	lr
    57f4:	200000f0 	.word	0x200000f0
    57f8:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    57fa:	4c2a      	ldr	r4, [pc, #168]	; (58a4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1d8>)
    57fc:	2300      	movs	r3, #0
    57fe:	4619      	mov	r1, r3
    5800:	6860      	ldr	r0, [r4, #4]
    5802:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    5806:	3088      	adds	r0, #136	; 0x88
    5808:	f008 f978 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    580c:	2800      	cmp	r0, #0
    580e:	d048      	beq.n	58a2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1d6>
    5810:	6860      	ldr	r0, [r4, #4]
    5812:	f890 125c 	ldrb.w	r1, [r0, #604]	; 0x25c
    5816:	f88d 1000 	strb.w	r1, [sp]
    581a:	9900      	ldr	r1, [sp, #0]
    581c:	9100      	str	r1, [sp, #0]
    581e:	f89d 1000 	ldrb.w	r1, [sp]
    5822:	2500      	movs	r5, #0
    5824:	2900      	cmp	r1, #0
    5826:	d03c      	beq.n	58a2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1d6>
    5828:	f890 00a6 	ldrb.w	r0, [r0, #166]	; 0xa6
    582c:	f008 f9c9 	bl	dbc2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    5830:	2800      	cmp	r0, #0
    5832:	d136      	bne.n	58a2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1d6>
    5834:	6860      	ldr	r0, [r4, #4]
    5836:	f8b0 009c 	ldrh.w	r0, [r0, #156]	; 0x9c
    583a:	280a      	cmp	r0, #10
    583c:	d931      	bls.n	58a2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1d6>
    583e:	4668      	mov	r0, sp
    5840:	f7fc ff30 	bl	26a4 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ>
    5844:	2800      	cmp	r0, #0
    5846:	d02c      	beq.n	58a2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1d6>
    5848:	6861      	ldr	r1, [r4, #4]
    584a:	2205      	movs	r2, #5
    584c:	4668      	mov	r0, sp
    584e:	31ae      	adds	r1, #174	; 0xae
    5850:	f00a fefb 	bl	1064a <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    5854:	b310      	cbz	r0, 589c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1d0>
    5856:	6860      	ldr	r0, [r4, #4]
    5858:	f8d0 1258 	ldr.w	r1, [r0, #600]	; 0x258
    585c:	7808      	ldrb	r0, [r1, #0]
    585e:	b158      	cbz	r0, 5878 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1ac>
    5860:	2205      	movs	r2, #5
    5862:	4668      	mov	r0, sp
    5864:	1c49      	adds	r1, r1, #1
    5866:	f00a fef0 	bl	1064a <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    586a:	2800      	cmp	r0, #0
    586c:	d119      	bne.n	58a2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1d6>
    586e:	6860      	ldr	r0, [r4, #4]
    5870:	f8d0 0258 	ldr.w	r0, [r0, #600]	; 0x258
    5874:	7800      	ldrb	r0, [r0, #0]
    5876:	b940      	cbnz	r0, 588a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1be>
    5878:	6860      	ldr	r0, [r4, #4]
    587a:	9900      	ldr	r1, [sp, #0]
    587c:	f8d0 0258 	ldr.w	r0, [r0, #600]	; 0x258
    5880:	f8c0 1001 	str.w	r1, [r0, #1]
    5884:	f89d 1004 	ldrb.w	r1, [sp, #4]
    5888:	7141      	strb	r1, [r0, #5]
    588a:	6860      	ldr	r0, [r4, #4]
    588c:	f8d0 0258 	ldr.w	r0, [r0, #600]	; 0x258
    5890:	7801      	ldrb	r1, [r0, #0]
    5892:	1c49      	adds	r1, r1, #1
    5894:	7001      	strb	r1, [r0, #0]
    5896:	2001      	movs	r0, #1
    5898:	f000 fe0c 	bl	64b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    589c:	6860      	ldr	r0, [r4, #4]
    589e:	f880 525c 	strb.w	r5, [r0, #604]	; 0x25c
    58a2:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    58a4:	200000f0 	.word	0x200000f0
    58a8:	4a0c      	ldr	r2, [pc, #48]	; (58dc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x210>)
    58aa:	7851      	ldrb	r1, [r2, #1]
    58ac:	b9a1      	cbnz	r1, 58d8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x20c>
    58ae:	f102 010c 	add.w	r1, r2, #12
    58b2:	2801      	cmp	r0, #1
    58b4:	6849      	ldr	r1, [r1, #4]
    58b6:	d008      	beq.n	58ca <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1fe>
    58b8:	7890      	ldrb	r0, [r2, #2]
    58ba:	0740      	lsls	r0, r0, #29
    58bc:	d503      	bpl.n	58c6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1fa>
    58be:	f891 00a7 	ldrb.w	r0, [r1, #167]	; 0xa7
    58c2:	2806      	cmp	r0, #6
    58c4:	d008      	beq.n	58d8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x20c>
    58c6:	2001      	movs	r0, #1
    58c8:	4770      	bx	lr
    58ca:	f8b1 0050 	ldrh.w	r0, [r1, #80]	; 0x50
    58ce:	8e89      	ldrh	r1, [r1, #52]	; 0x34
    58d0:	4288      	cmp	r0, r1
    58d2:	d801      	bhi.n	58d8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x20c>
    58d4:	f7ff bc64 	b.w	51a0 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI>
    58d8:	2000      	movs	r0, #0
    58da:	4770      	bx	lr
    58dc:	200000e4 	.word	0x200000e4
    58e0:	b538      	push	{r3, r4, r5, lr}
    58e2:	4c93      	ldr	r4, [pc, #588]	; (5b30 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x464>)
    58e4:	6860      	ldr	r0, [r4, #4]
    58e6:	3088      	adds	r0, #136	; 0x88
    58e8:	f009 fa96 	bl	ee18 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    58ec:	2800      	cmp	r0, #0
    58ee:	d164      	bne.n	59ba <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2ee>
    58f0:	6860      	ldr	r0, [r4, #4]
    58f2:	2300      	movs	r3, #0
    58f4:	2101      	movs	r1, #1
    58f6:	f890 20a7 	ldrb.w	r2, [r0, #167]	; 0xa7
    58fa:	3088      	adds	r0, #136	; 0x88
    58fc:	f008 f8fe 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5900:	2800      	cmp	r0, #0
    5902:	d15a      	bne.n	59ba <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2ee>
    5904:	6860      	ldr	r0, [r4, #4]
    5906:	f890 1138 	ldrb.w	r1, [r0, #312]	; 0x138
    590a:	f88d 1000 	strb.w	r1, [sp]
    590e:	9900      	ldr	r1, [sp, #0]
    5910:	9100      	str	r1, [sp, #0]
    5912:	f89d 1000 	ldrb.w	r1, [sp]
    5916:	b109      	cbz	r1, 591c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x250>
    5918:	2002      	movs	r0, #2
    591a:	e03c      	b.n	5996 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2ca>
    591c:	2500      	movs	r5, #0
    591e:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    5922:	462b      	mov	r3, r5
    5924:	4629      	mov	r1, r5
    5926:	3088      	adds	r0, #136	; 0x88
    5928:	f008 f8e8 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    592c:	b128      	cbz	r0, 593a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x26e>
    592e:	6860      	ldr	r0, [r4, #4]
    5930:	f890 00d4 	ldrb.w	r0, [r0, #212]	; 0xd4
    5934:	b108      	cbz	r0, 593a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x26e>
    5936:	2012      	movs	r0, #18
    5938:	e02d      	b.n	5996 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2ca>
    593a:	6860      	ldr	r0, [r4, #4]
    593c:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    5940:	2a19      	cmp	r2, #25
    5942:	d027      	beq.n	5994 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2c8>
    5944:	dc06      	bgt.n	5954 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x288>
    5946:	2a03      	cmp	r2, #3
    5948:	d029      	beq.n	599e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2d2>
    594a:	2a12      	cmp	r2, #18
    594c:	d01e      	beq.n	598c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2c0>
    594e:	2a13      	cmp	r2, #19
    5950:	d104      	bne.n	595c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x290>
    5952:	e019      	b.n	5988 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2bc>
    5954:	2a24      	cmp	r2, #36	; 0x24
    5956:	d02a      	beq.n	59ae <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2e2>
    5958:	2a2f      	cmp	r2, #47	; 0x2f
    595a:	d02f      	beq.n	59bc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2f0>
    595c:	2300      	movs	r3, #0
    595e:	2104      	movs	r1, #4
    5960:	3088      	adds	r0, #136	; 0x88
    5962:	f008 f8cb 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5966:	2800      	cmp	r0, #0
    5968:	d127      	bne.n	59ba <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2ee>
    596a:	6860      	ldr	r0, [r4, #4]
    596c:	f890 10a6 	ldrb.w	r1, [r0, #166]	; 0xa6
    5970:	291e      	cmp	r1, #30
    5972:	d048      	beq.n	5a06 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x33a>
    5974:	dc29      	bgt.n	59ca <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2fe>
    5976:	2901      	cmp	r1, #1
    5978:	d036      	beq.n	59e8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x31c>
    597a:	2902      	cmp	r1, #2
    597c:	d041      	beq.n	5a02 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x336>
    597e:	2903      	cmp	r1, #3
    5980:	d02c      	beq.n	59dc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x310>
    5982:	2904      	cmp	r1, #4
    5984:	d13c      	bne.n	5a00 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x334>
    5986:	e0b7      	b.n	5af8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x42c>
    5988:	200b      	movs	r0, #11
    598a:	e004      	b.n	5996 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2ca>
    598c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5990:	f000 bca2 	b.w	62d8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc0c>
    5994:	2006      	movs	r0, #6
    5996:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    599a:	f000 bd8b 	b.w	64b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    599e:	f890 1129 	ldrb.w	r1, [r0, #297]	; 0x129
    59a2:	f880 1130 	strb.w	r1, [r0, #304]	; 0x130
    59a6:	2007      	movs	r0, #7
    59a8:	f000 fd84 	bl	64b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    59ac:	e009      	b.n	59c2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2f6>
    59ae:	2018      	movs	r0, #24
    59b0:	f000 fd80 	bl	64b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    59b4:	6860      	ldr	r0, [r4, #4]
    59b6:	f8a0 50dc 	strh.w	r5, [r0, #220]	; 0xdc
    59ba:	bd38      	pop	{r3, r4, r5, pc}
    59bc:	2001      	movs	r0, #1
    59be:	f000 fd81 	bl	64c4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xdf8>
    59c2:	6860      	ldr	r0, [r4, #4]
    59c4:	f880 50a5 	strb.w	r5, [r0, #165]	; 0xa5
    59c8:	bd38      	pop	{r3, r4, r5, pc}
    59ca:	291f      	cmp	r1, #31
    59cc:	d01b      	beq.n	5a06 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x33a>
    59ce:	2922      	cmp	r1, #34	; 0x22
    59d0:	d061      	beq.n	5a96 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3ca>
    59d2:	2928      	cmp	r1, #40	; 0x28
    59d4:	d071      	beq.n	5aba <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3ee>
    59d6:	292f      	cmp	r1, #47	; 0x2f
    59d8:	d17d      	bne.n	5ad6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x40a>
    59da:	e089      	b.n	5af0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x424>
    59dc:	f890 1128 	ldrb.w	r1, [r0, #296]	; 0x128
    59e0:	f880 1130 	strb.w	r1, [r0, #304]	; 0x130
    59e4:	2007      	movs	r0, #7
    59e6:	e08a      	b.n	5afe <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x432>
    59e8:	200c      	movs	r0, #12
    59ea:	f000 fd63 	bl	64b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    59ee:	6860      	ldr	r0, [r4, #4]
    59f0:	f820 5fe2 	strh.w	r5, [r0, #226]!
    59f4:	7941      	ldrb	r1, [r0, #5]
    59f6:	f041 0101 	orr.w	r1, r1, #1
    59fa:	7141      	strb	r1, [r0, #5]
    59fc:	f800 5c3c 	strb.w	r5, [r0, #-60]
    5a00:	e069      	b.n	5ad6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x40a>
    5a02:	2013      	movs	r0, #19
    5a04:	e039      	b.n	5a7a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3ae>
    5a06:	f890 213b 	ldrb.w	r2, [r0, #315]	; 0x13b
    5a0a:	f88d 2000 	strb.w	r2, [sp]
    5a0e:	9a00      	ldr	r2, [sp, #0]
    5a10:	9200      	str	r2, [sp, #0]
    5a12:	f89d 2000 	ldrb.w	r2, [sp]
    5a16:	bbba      	cbnz	r2, 5a88 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3bc>
    5a18:	f890 213a 	ldrb.w	r2, [r0, #314]	; 0x13a
    5a1c:	f88d 2000 	strb.w	r2, [sp]
    5a20:	9a00      	ldr	r2, [sp, #0]
    5a22:	9200      	str	r2, [sp, #0]
    5a24:	f89d 2000 	ldrb.w	r2, [sp]
    5a28:	b37a      	cbz	r2, 5a8a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3be>
    5a2a:	2925      	cmp	r1, #37	; 0x25
    5a2c:	d031      	beq.n	5a92 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3c6>
    5a2e:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    5a32:	2925      	cmp	r1, #37	; 0x25
    5a34:	d02d      	beq.n	5a92 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3c6>
    5a36:	2926      	cmp	r1, #38	; 0x26
    5a38:	d02b      	beq.n	5a92 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3c6>
    5a3a:	2300      	movs	r3, #0
    5a3c:	f200 2262 	addw	r2, r0, #610	; 0x262
    5a40:	f500 719d 	add.w	r1, r0, #314	; 0x13a
    5a44:	f008 fb95 	bl	e172 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    5a48:	6860      	ldr	r0, [r4, #4]
    5a4a:	211f      	movs	r1, #31
    5a4c:	f880 10a6 	strb.w	r1, [r0, #166]	; 0xa6
    5a50:	f880 513a 	strb.w	r5, [r0, #314]	; 0x13a
    5a54:	6860      	ldr	r0, [r4, #4]
    5a56:	f008 fba7 	bl	e1a8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    5a5a:	2104      	movs	r1, #4
    5a5c:	6860      	ldr	r0, [r4, #4]
    5a5e:	f009 f881 	bl	eb64 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    5a62:	f000 f867 	bl	5b34 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x468>
    5a66:	6861      	ldr	r1, [r4, #4]
    5a68:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    5a6c:	8bc2      	ldrh	r2, [r0, #30]
    5a6e:	f8a1 2130 	strh.w	r2, [r1, #304]	; 0x130
    5a72:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    5a74:	f8a1 0132 	strh.w	r0, [r1, #306]	; 0x132
    5a78:	2015      	movs	r0, #21
    5a7a:	f000 fd1b 	bl	64b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    5a7e:	6860      	ldr	r0, [r4, #4]
    5a80:	f8a0 50e2 	strh.w	r5, [r0, #226]	; 0xe2
    5a84:	f880 50a6 	strb.w	r5, [r0, #166]	; 0xa6
    5a88:	e025      	b.n	5ad6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x40a>
    5a8a:	e7ff      	b.n	5a8c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3c0>
    5a8c:	291f      	cmp	r1, #31
    5a8e:	d0e1      	beq.n	5a54 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x388>
    5a90:	e021      	b.n	5ad6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x40a>
    5a92:	2301      	movs	r3, #1
    5a94:	e7d2      	b.n	5a3c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x370>
    5a96:	f890 1144 	ldrb.w	r1, [r0, #324]	; 0x144
    5a9a:	2901      	cmp	r1, #1
    5a9c:	d108      	bne.n	5ab0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3e4>
    5a9e:	f890 1145 	ldrb.w	r1, [r0, #325]	; 0x145
    5aa2:	f88d 1000 	strb.w	r1, [sp]
    5aa6:	9900      	ldr	r1, [sp, #0]
    5aa8:	9100      	str	r1, [sp, #0]
    5aaa:	f89d 1000 	ldrb.w	r1, [sp]
    5aae:	b129      	cbz	r1, 5abc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3f0>
    5ab0:	f890 1144 	ldrb.w	r1, [r0, #324]	; 0x144
    5ab4:	2902      	cmp	r1, #2
    5ab6:	d006      	beq.n	5ac6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3fa>
    5ab8:	e00d      	b.n	5ad6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x40a>
    5aba:	e01f      	b.n	5afc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x430>
    5abc:	f8d0 1062 	ldr.w	r1, [r0, #98]	; 0x62
    5ac0:	f8d0 0146 	ldr.w	r0, [r0, #326]	; 0x146
    5ac4:	e002      	b.n	5acc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x400>
    5ac6:	f850 1f62 	ldr.w	r1, [r0, #98]!
    5aca:	6840      	ldr	r0, [r0, #4]
    5acc:	f000 fd04 	bl	64d8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe0c>
    5ad0:	2018      	movs	r0, #24
    5ad2:	f000 fcef 	bl	64b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    5ad6:	6860      	ldr	r0, [r4, #4]
    5ad8:	3088      	adds	r0, #136	; 0x88
    5ada:	f009 f99d 	bl	ee18 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    5ade:	2800      	cmp	r0, #0
    5ae0:	f47f af72 	bne.w	59c8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2fc>
    5ae4:	6860      	ldr	r0, [r4, #4]
    5ae6:	3088      	adds	r0, #136	; 0x88
    5ae8:	f009 f996 	bl	ee18 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    5aec:	b158      	cbz	r0, 5b06 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x43a>
    5aee:	e015      	b.n	5b1c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x450>
    5af0:	2000      	movs	r0, #0
    5af2:	f000 fce7 	bl	64c4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xdf8>
    5af6:	e004      	b.n	5b02 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x436>
    5af8:	2009      	movs	r0, #9
    5afa:	e000      	b.n	5afe <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x432>
    5afc:	2024      	movs	r0, #36	; 0x24
    5afe:	f000 fcd9 	bl	64b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    5b02:	6860      	ldr	r0, [r4, #4]
    5b04:	e7be      	b.n	5a84 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3b8>
    5b06:	6860      	ldr	r0, [r4, #4]
    5b08:	2300      	movs	r3, #0
    5b0a:	4619      	mov	r1, r3
    5b0c:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    5b10:	3088      	adds	r0, #136	; 0x88
    5b12:	f007 fff3 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5b16:	b108      	cbz	r0, 5b1c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x450>
    5b18:	f000 fb14 	bl	6144 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa78>
    5b1c:	6860      	ldr	r0, [r4, #4]
    5b1e:	3088      	adds	r0, #136	; 0x88
    5b20:	f009 f97a 	bl	ee18 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    5b24:	2800      	cmp	r0, #0
    5b26:	d1db      	bne.n	5ae0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x414>
    5b28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5b2c:	f7ff be64 	b.w	57f8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12c>
    5b30:	200000f0 	.word	0x200000f0
    5b34:	4808      	ldr	r0, [pc, #32]	; (5b58 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x48c>)
    5b36:	6843      	ldr	r3, [r0, #4]
    5b38:	f893 0060 	ldrb.w	r0, [r3, #96]	; 0x60
    5b3c:	2801      	cmp	r0, #1
    5b3e:	d006      	beq.n	5b4e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x482>
    5b40:	f503 72b5 	add.w	r2, r3, #362	; 0x16a
    5b44:	f103 012c 	add.w	r1, r3, #44	; 0x2c
    5b48:	8818      	ldrh	r0, [r3, #0]
    5b4a:	f7fd b893 	b.w	2c74 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    5b4e:	2002      	movs	r0, #2
    5b50:	f883 0060 	strb.w	r0, [r3, #96]	; 0x60
    5b54:	4770      	bx	lr
    5b56:	0000      	.short	0x0000
    5b58:	200000f0 	.word	0x200000f0
    5b5c:	b538      	push	{r3, r4, r5, lr}
    5b5e:	4d1a      	ldr	r5, [pc, #104]	; (5bc8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4fc>)
    5b60:	686b      	ldr	r3, [r5, #4]
    5b62:	f893 10a5 	ldrb.w	r1, [r3, #165]	; 0xa5
    5b66:	2917      	cmp	r1, #23
    5b68:	d001      	beq.n	5b6e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4a2>
    5b6a:	2914      	cmp	r1, #20
    5b6c:	d102      	bne.n	5b74 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4a8>
    5b6e:	f893 10e6 	ldrb.w	r1, [r3, #230]	; 0xe6
    5b72:	b109      	cbz	r1, 5b78 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4ac>
    5b74:	2002      	movs	r0, #2
    5b76:	bd38      	pop	{r3, r4, r5, pc}
    5b78:	2400      	movs	r4, #0
    5b7a:	f883 40e5 	strb.w	r4, [r3, #229]	; 0xe5
    5b7e:	f883 40e0 	strb.w	r4, [r3, #224]	; 0xe0
    5b82:	f893 121a 	ldrb.w	r1, [r3, #538]	; 0x21a
    5b86:	f88d 1000 	strb.w	r1, [sp]
    5b8a:	9900      	ldr	r1, [sp, #0]
    5b8c:	9100      	str	r1, [sp, #0]
    5b8e:	f89d 1000 	ldrb.w	r1, [sp]
    5b92:	b121      	cbz	r1, 5b9e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4d2>
    5b94:	f240 31df 	movw	r1, #991	; 0x3df
    5b98:	2036      	movs	r0, #54	; 0x36
    5b9a:	f7fa ff63 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5b9e:	8819      	ldrh	r1, [r3, #0]
    5ba0:	f8a3 121e 	strh.w	r1, [r3, #542]	; 0x21e
    5ba4:	f883 021c 	strb.w	r0, [r3, #540]	; 0x21c
    5ba8:	f883 4220 	strb.w	r4, [r3, #544]	; 0x220
    5bac:	f883 4278 	strb.w	r4, [r3, #632]	; 0x278
    5bb0:	f203 2012 	addw	r0, r3, #530	; 0x212
    5bb4:	220c      	movs	r2, #12
    5bb6:	4905      	ldr	r1, [pc, #20]	; (5bcc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x500>)
    5bb8:	f008 fab1 	bl	e11e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    5bbc:	6868      	ldr	r0, [r5, #4]
    5bbe:	f880 40a5 	strb.w	r4, [r0, #165]	; 0xa5
    5bc2:	2000      	movs	r0, #0
    5bc4:	bd38      	pop	{r3, r4, r5, pc}
    5bc6:	0000      	.short	0x0000
    5bc8:	200000f0 	.word	0x200000f0
    5bcc:	0000e5a1 	.word	0x0000e5a1
    5bd0:	b570      	push	{r4, r5, r6, lr}
    5bd2:	4604      	mov	r4, r0
    5bd4:	f890 00a5 	ldrb.w	r0, [r0, #165]	; 0xa5
    5bd8:	2500      	movs	r5, #0
    5bda:	280b      	cmp	r0, #11
    5bdc:	d001      	beq.n	5be2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x516>
    5bde:	280c      	cmp	r0, #12
    5be0:	d108      	bne.n	5bf4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x528>
    5be2:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
    5be6:	f8b4 225e 	ldrh.w	r2, [r4, #606]	; 0x25e
    5bea:	1a89      	subs	r1, r1, r2
    5bec:	1c49      	adds	r1, r1, #1
    5bee:	0409      	lsls	r1, r1, #16
    5bf0:	0c09      	lsrs	r1, r1, #16
    5bf2:	d032      	beq.n	5c5a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x58e>
    5bf4:	280d      	cmp	r0, #13
    5bf6:	d001      	beq.n	5bfc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x530>
    5bf8:	280e      	cmp	r0, #14
    5bfa:	d12d      	bne.n	5c58 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x58c>
    5bfc:	f8b4 009c 	ldrh.w	r0, [r4, #156]	; 0x9c
    5c00:	f8b4 1266 	ldrh.w	r1, [r4, #614]	; 0x266
    5c04:	1a40      	subs	r0, r0, r1
    5c06:	1c40      	adds	r0, r0, #1
    5c08:	0400      	lsls	r0, r0, #16
    5c0a:	0c00      	lsrs	r0, r0, #16
    5c0c:	d124      	bne.n	5c58 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x58c>
    5c0e:	8820      	ldrh	r0, [r4, #0]
    5c10:	f8a4 01d2 	strh.w	r0, [r4, #466]	; 0x1d2
    5c14:	f8d4 0270 	ldr.w	r0, [r4, #624]	; 0x270
    5c18:	f007 ff57 	bl	daca <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    5c1c:	f8a4 01d4 	strh.w	r0, [r4, #468]	; 0x1d4
    5c20:	f8b4 0274 	ldrh.w	r0, [r4, #628]	; 0x274
    5c24:	f8a4 01d6 	strh.w	r0, [r4, #470]	; 0x1d6
    5c28:	f8b4 0276 	ldrh.w	r0, [r4, #630]	; 0x276
    5c2c:	f8a4 01d8 	strh.w	r0, [r4, #472]	; 0x1d8
    5c30:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
    5c34:	2209      	movs	r2, #9
    5c36:	4919      	ldr	r1, [pc, #100]	; (5c9c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x5d0>)
    5c38:	f504 70e3 	add.w	r0, r4, #454	; 0x1c6
    5c3c:	f008 fa83 	bl	e146 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    5c40:	f884 5264 	strb.w	r5, [r4, #612]	; 0x264
    5c44:	2102      	movs	r1, #2
    5c46:	4620      	mov	r0, r4
    5c48:	f7fc fc86 	bl	2558 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    5c4c:	2103      	movs	r1, #3
    5c4e:	4620      	mov	r0, r4
    5c50:	f008 ff88 	bl	eb64 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    5c54:	f884 50a5 	strb.w	r5, [r4, #165]	; 0xa5
    5c58:	bd70      	pop	{r4, r5, r6, pc}
    5c5a:	f8d4 0258 	ldr.w	r0, [r4, #600]	; 0x258
    5c5e:	f8d0 1001 	ldr.w	r1, [r0, #1]
    5c62:	f8c4 10ae 	str.w	r1, [r4, #174]	; 0xae
    5c66:	7940      	ldrb	r0, [r0, #5]
    5c68:	f884 00b2 	strb.w	r0, [r4, #178]	; 0xb2
    5c6c:	2103      	movs	r1, #3
    5c6e:	4620      	mov	r0, r4
    5c70:	f7fc fc72 	bl	2558 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    5c74:	f8d4 0258 	ldr.w	r0, [r4, #600]	; 0x258
    5c78:	7800      	ldrb	r0, [r0, #0]
    5c7a:	b148      	cbz	r0, 5c90 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x5c4>
    5c7c:	2101      	movs	r1, #1
    5c7e:	20fe      	movs	r0, #254	; 0xfe
    5c80:	f001 f858 	bl	6d34 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1668>
    5c84:	f884 50a5 	strb.w	r5, [r4, #165]	; 0xa5
    5c88:	20ff      	movs	r0, #255	; 0xff
    5c8a:	f884 00fe 	strb.w	r0, [r4, #254]	; 0xfe
    5c8e:	bd70      	pop	{r4, r5, r6, pc}
    5c90:	f240 2152 	movw	r1, #594	; 0x252
    5c94:	2036      	movs	r0, #54	; 0x36
    5c96:	f7fa fee5 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5c9a:	0000      	.short	0x0000
    5c9c:	0000e563 	.word	0x0000e563
    5ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5ca2:	4d28      	ldr	r5, [pc, #160]	; (5d44 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x678>)
    5ca4:	f04f 0600 	mov.w	r6, #0
    5ca8:	f105 040c 	add.w	r4, r5, #12
    5cac:	8869      	ldrh	r1, [r5, #2]
    5cae:	0748      	lsls	r0, r1, #29
    5cb0:	d510      	bpl.n	5cd4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x608>
    5cb2:	6860      	ldr	r0, [r4, #4]
    5cb4:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    5cb8:	2a03      	cmp	r2, #3
    5cba:	d004      	beq.n	5cc6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x5fa>
    5cbc:	f890 20a7 	ldrb.w	r2, [r0, #167]	; 0xa7
    5cc0:	2a06      	cmp	r2, #6
    5cc2:	d107      	bne.n	5cd4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x608>
    5cc4:	e002      	b.n	5ccc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x600>
    5cc6:	f240 7109 	movw	r1, #1801	; 0x709
    5cca:	e025      	b.n	5d18 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x64c>
    5ccc:	2201      	movs	r2, #1
    5cce:	702a      	strb	r2, [r5, #0]
    5cd0:	f880 60a7 	strb.w	r6, [r0, #167]	; 0xa7
    5cd4:	0788      	lsls	r0, r1, #30
    5cd6:	d50a      	bpl.n	5cee <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x622>
    5cd8:	6868      	ldr	r0, [r5, #4]
    5cda:	78c0      	ldrb	r0, [r0, #3]
    5cdc:	282b      	cmp	r0, #43	; 0x2b
    5cde:	d219      	bcs.n	5d14 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x648>
    5ce0:	4919      	ldr	r1, [pc, #100]	; (5d48 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x67c>)
    5ce2:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    5ce6:	b1a9      	cbz	r1, 5d14 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x648>
    5ce8:	4816      	ldr	r0, [pc, #88]	; (5d44 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x678>)
    5cea:	300c      	adds	r0, #12
    5cec:	4788      	blx	r1
    5cee:	f000 f86d 	bl	5dcc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x700>
    5cf2:	f000 f82b 	bl	5d4c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x680>
    5cf6:	4607      	mov	r7, r0
    5cf8:	7868      	ldrb	r0, [r5, #1]
    5cfa:	0700      	lsls	r0, r0, #28
    5cfc:	d51c      	bpl.n	5d38 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x66c>
    5cfe:	6860      	ldr	r0, [r4, #4]
    5d00:	2300      	movs	r3, #0
    5d02:	2105      	movs	r1, #5
    5d04:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    5d08:	3088      	adds	r0, #136	; 0x88
    5d0a:	f007 fef7 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5d0e:	b130      	cbz	r0, 5d1e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x652>
    5d10:	2708      	movs	r7, #8
    5d12:	e011      	b.n	5d38 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x66c>
    5d14:	f640 0149 	movw	r1, #2121	; 0x849
    5d18:	2036      	movs	r0, #54	; 0x36
    5d1a:	f7fa fea3 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5d1e:	4669      	mov	r1, sp
    5d20:	2003      	movs	r0, #3
    5d22:	9600      	str	r6, [sp, #0]
    5d24:	f7fb fdb2 	bl	188c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    5d28:	9800      	ldr	r0, [sp, #0]
    5d2a:	b128      	cbz	r0, 5d38 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x66c>
    5d2c:	7206      	strb	r6, [r0, #8]
    5d2e:	222a      	movs	r2, #42	; 0x2a
    5d30:	6861      	ldr	r1, [r4, #4]
    5d32:	9800      	ldr	r0, [sp, #0]
    5d34:	f008 f9f3 	bl	e11e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    5d38:	6860      	ldr	r0, [r4, #4]
    5d3a:	f7ff ff49 	bl	5bd0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x504>
    5d3e:	4638      	mov	r0, r7
    5d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5d42:	0000      	.short	0x0000
    5d44:	200000e4 	.word	0x200000e4
    5d48:	200001a4 	.word	0x200001a4
    5d4c:	b570      	push	{r4, r5, r6, lr}
    5d4e:	4c1d      	ldr	r4, [pc, #116]	; (5dc4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6f8>)
    5d50:	2000      	movs	r0, #0
    5d52:	78a1      	ldrb	r1, [r4, #2]
    5d54:	07c9      	lsls	r1, r1, #31
    5d56:	d01d      	beq.n	5d94 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6c8>
    5d58:	68a0      	ldr	r0, [r4, #8]
    5d5a:	2300      	movs	r3, #0
    5d5c:	2105      	movs	r1, #5
    5d5e:	78c5      	ldrb	r5, [r0, #3]
    5d60:	f104 000c 	add.w	r0, r4, #12
    5d64:	6840      	ldr	r0, [r0, #4]
    5d66:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    5d6a:	3088      	adds	r0, #136	; 0x88
    5d6c:	f007 fec6 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5d70:	b188      	cbz	r0, 5d96 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ca>
    5d72:	2d06      	cmp	r5, #6
    5d74:	d00f      	beq.n	5d96 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ca>
    5d76:	dc06      	bgt.n	5d86 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ba>
    5d78:	2d02      	cmp	r5, #2
    5d7a:	d00c      	beq.n	5d96 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ca>
    5d7c:	2d04      	cmp	r5, #4
    5d7e:	d00a      	beq.n	5d96 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ca>
    5d80:	2d05      	cmp	r5, #5
    5d82:	d106      	bne.n	5d92 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6c6>
    5d84:	e007      	b.n	5d96 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ca>
    5d86:	2d0b      	cmp	r5, #11
    5d88:	d005      	beq.n	5d96 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ca>
    5d8a:	2d0d      	cmp	r5, #13
    5d8c:	d003      	beq.n	5d96 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ca>
    5d8e:	2d11      	cmp	r5, #17
    5d90:	d001      	beq.n	5d96 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ca>
    5d92:	2008      	movs	r0, #8
    5d94:	bd70      	pop	{r4, r5, r6, pc}
    5d96:	68a0      	ldr	r0, [r4, #8]
    5d98:	f7fc fd16 	bl	27c8 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA>
    5d9c:	b160      	cbz	r0, 5db8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ec>
    5d9e:	68a0      	ldr	r0, [r4, #8]
    5da0:	78c0      	ldrb	r0, [r0, #3]
    5da2:	282b      	cmp	r0, #43	; 0x2b
    5da4:	d208      	bcs.n	5db8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ec>
    5da6:	4908      	ldr	r1, [pc, #32]	; (5dc8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6fc>)
    5da8:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    5dac:	b121      	cbz	r1, 5db8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ec>
    5dae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5db2:	4804      	ldr	r0, [pc, #16]	; (5dc4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6f8>)
    5db4:	300c      	adds	r0, #12
    5db6:	4708      	bx	r1
    5db8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5dbc:	2000      	movs	r0, #0
    5dbe:	f000 bbdf 	b.w	6580 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xeb4>
    5dc2:	0000      	.short	0x0000
    5dc4:	200000e4 	.word	0x200000e4
    5dc8:	200000f8 	.word	0x200000f8
    5dcc:	b570      	push	{r4, r5, r6, lr}
    5dce:	4d1a      	ldr	r5, [pc, #104]	; (5e38 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x76c>)
    5dd0:	78a8      	ldrb	r0, [r5, #2]
    5dd2:	0700      	lsls	r0, r0, #28
    5dd4:	d52e      	bpl.n	5e34 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x768>
    5dd6:	f105 040c 	add.w	r4, r5, #12
    5dda:	2100      	movs	r1, #0
    5ddc:	6860      	ldr	r0, [r4, #4]
    5dde:	f890 012e 	ldrb.w	r0, [r0, #302]	; 0x12e
    5de2:	f000 ffa7 	bl	6d34 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1668>
    5de6:	6860      	ldr	r0, [r4, #4]
    5de8:	3088      	adds	r0, #136	; 0x88
    5dea:	f009 f815 	bl	ee18 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    5dee:	b160      	cbz	r0, 5e0a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x73e>
    5df0:	6860      	ldr	r0, [r4, #4]
    5df2:	21fe      	movs	r1, #254	; 0xfe
    5df4:	f880 112e 	strb.w	r1, [r0, #302]	; 0x12e
    5df8:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    5dfc:	290b      	cmp	r1, #11
    5dfe:	d009      	beq.n	5e14 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x748>
    5e00:	290d      	cmp	r1, #13
    5e02:	d009      	beq.n	5e18 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x74c>
    5e04:	2925      	cmp	r1, #37	; 0x25
    5e06:	d10c      	bne.n	5e22 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x756>
    5e08:	e008      	b.n	5e1c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x750>
    5e0a:	f640 0155 	movw	r1, #2133	; 0x855
    5e0e:	2036      	movs	r0, #54	; 0x36
    5e10:	f7fa fe28 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5e14:	210c      	movs	r1, #12
    5e16:	e002      	b.n	5e1e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x752>
    5e18:	210e      	movs	r1, #14
    5e1a:	e000      	b.n	5e1e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x752>
    5e1c:	2126      	movs	r1, #38	; 0x26
    5e1e:	f880 10a5 	strb.w	r1, [r0, #165]	; 0xa5
    5e22:	f890 10a7 	ldrb.w	r1, [r0, #167]	; 0xa7
    5e26:	2907      	cmp	r1, #7
    5e28:	d104      	bne.n	5e34 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x768>
    5e2a:	2102      	movs	r1, #2
    5e2c:	7029      	strb	r1, [r5, #0]
    5e2e:	2100      	movs	r1, #0
    5e30:	f880 10a7 	strb.w	r1, [r0, #167]	; 0xa7
    5e34:	bd70      	pop	{r4, r5, r6, pc}
    5e36:	0000      	.short	0x0000
    5e38:	200000e4 	.word	0x200000e4
    5e3c:	b538      	push	{r3, r4, r5, lr}
    5e3e:	4605      	mov	r5, r0
    5e40:	4668      	mov	r0, sp
    5e42:	f7fb fbb5 	bl	15b0 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    5e46:	b348      	cbz	r0, 5e9c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x7d0>
    5e48:	2222      	movs	r2, #34	; 0x22
    5e4a:	2100      	movs	r1, #0
    5e4c:	9800      	ldr	r0, [sp, #0]
    5e4e:	f00a fc88 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5e52:	2103      	movs	r1, #3
    5e54:	9800      	ldr	r0, [sp, #0]
    5e56:	f008 f92f 	bl	e0b8 <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    5e5a:	9800      	ldr	r0, [sp, #0]
    5e5c:	7801      	ldrb	r1, [r0, #0]
    5e5e:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    5e62:	7001      	strb	r1, [r0, #0]
    5e64:	4629      	mov	r1, r5
    5e66:	f7fc fcbf 	bl	27e8 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ>
    5e6a:	2100      	movs	r1, #0
    5e6c:	4c73      	ldr	r4, [pc, #460]	; (603c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x970>)
    5e6e:	2d26      	cmp	r5, #38	; 0x26
    5e70:	d277      	bcs.n	5f62 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x896>
    5e72:	e8df f005 	tbb	[pc, r5]
    5e76:	222a      	.short	0x222a
    5e78:	dbdb5216 	.word	0xdbdb5216
    5e7c:	7b771cd4 	.word	0x7b771cd4
    5e80:	db6bd4d4 	.word	0xdb6bd4d4
    5e84:	bcdbdbdb 	.word	0xbcdbdbdb
    5e88:	8080d4d4 	.word	0x8080d4d4
    5e8c:	dba3db99 	.word	0xdba3db99
    5e90:	dbdbdbdb 	.word	0xdbdbdbdb
    5e94:	dbdbdbdb 	.word	0xdbdbdbdb
    5e98:	b6b6b6db 	.word	0xb6b6b6db
    5e9c:	f640 217b 	movw	r1, #2683	; 0xa7b
    5ea0:	e0c9      	b.n	6036 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x96a>
    5ea2:	6860      	ldr	r0, [r4, #4]
    5ea4:	9900      	ldr	r1, [sp, #0]
    5ea6:	f890 0139 	ldrb.w	r0, [r0, #313]	; 0x139
    5eaa:	7108      	strb	r0, [r1, #4]
    5eac:	e0b7      	b.n	601e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    5eae:	6861      	ldr	r1, [r4, #4]
    5eb0:	9800      	ldr	r0, [sp, #0]
    5eb2:	f891 1130 	ldrb.w	r1, [r1, #304]	; 0x130
    5eb6:	7101      	strb	r1, [r0, #4]
    5eb8:	e0b1      	b.n	601e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    5eba:	6860      	ldr	r0, [r4, #4]
    5ebc:	f8d0 1258 	ldr.w	r1, [r0, #600]	; 0x258
    5ec0:	9800      	ldr	r0, [sp, #0]
    5ec2:	1c49      	adds	r1, r1, #1
    5ec4:	f008 f889 	bl	dfda <sym_UODFQA44OAUGQWVRPEK2IIKSCIFD37IIPLUYFSI>
    5ec8:	e0a9      	b.n	601e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    5eca:	6860      	ldr	r0, [r4, #4]
    5ecc:	9d00      	ldr	r5, [sp, #0]
    5ece:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
    5ed2:	f8b0 0268 	ldrh.w	r0, [r0, #616]	; 0x268
    5ed6:	f007 ff7f 	bl	ddd8 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>
    5eda:	7128      	strb	r0, [r5, #4]
    5edc:	6860      	ldr	r0, [r4, #4]
    5ede:	9d00      	ldr	r5, [sp, #0]
    5ee0:	f500 701b 	add.w	r0, r0, #620	; 0x26c
    5ee4:	c803      	ldmia	r0, {r0, r1}
    5ee6:	f007 ff60 	bl	ddaa <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>
    5eea:	7168      	strb	r0, [r5, #5]
    5eec:	0a00      	lsrs	r0, r0, #8
    5eee:	71a8      	strb	r0, [r5, #6]
    5ef0:	6860      	ldr	r0, [r4, #4]
    5ef2:	9d00      	ldr	r5, [sp, #0]
    5ef4:	f8d0 0270 	ldr.w	r0, [r0, #624]	; 0x270
    5ef8:	f007 fde7 	bl	daca <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    5efc:	71e8      	strb	r0, [r5, #7]
    5efe:	0a00      	lsrs	r0, r0, #8
    5f00:	7228      	strb	r0, [r5, #8]
    5f02:	6862      	ldr	r2, [r4, #4]
    5f04:	9800      	ldr	r0, [sp, #0]
    5f06:	f8b2 1274 	ldrh.w	r1, [r2, #628]	; 0x274
    5f0a:	7241      	strb	r1, [r0, #9]
    5f0c:	0a09      	lsrs	r1, r1, #8
    5f0e:	7281      	strb	r1, [r0, #10]
    5f10:	f8b2 1276 	ldrh.w	r1, [r2, #630]	; 0x276
    5f14:	f008 f866 	bl	dfe4 <sym_ZZDNF2NNUMTRE4Y6NUTK3CJU3EQI64HKYHSTDAI>
    5f18:	e081      	b.n	601e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    5f1a:	6861      	ldr	r1, [r4, #4]
    5f1c:	9800      	ldr	r0, [sp, #0]
    5f1e:	f201 2179 	addw	r1, r1, #633	; 0x279
    5f22:	f008 f874 	bl	e00e <sym_NSDJKDRKPUUB5EAI3OMDTFOWZBLYJSPI3VQSNXQ>
    5f26:	6861      	ldr	r1, [r4, #4]
    5f28:	9800      	ldr	r0, [sp, #0]
    5f2a:	f201 2181 	addw	r1, r1, #641	; 0x281
    5f2e:	f008 f867 	bl	e000 <sym_ZLXXGUFNBKYTUHSDKKKU4A6O7RMXODI4OQA6IUY>
    5f32:	6861      	ldr	r1, [r4, #4]
    5f34:	9800      	ldr	r0, [sp, #0]
    5f36:	f201 2193 	addw	r1, r1, #659	; 0x293
    5f3a:	f008 f86d 	bl	e018 <sym_LPOR4PC6XUIXDNEKJLY3JL3BKNV2UZG2OR7FAKQ>
    5f3e:	6861      	ldr	r1, [r4, #4]
    5f40:	9800      	ldr	r0, [sp, #0]
    5f42:	f501 7190 	add.w	r1, r1, #288	; 0x120
    5f46:	f008 f85e 	bl	e006 <sym_3LF2RG2XP7QRT5FAEZFOPL4L5RIBP3MCQ5PY7XY>
    5f4a:	e068      	b.n	601e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    5f4c:	9800      	ldr	r0, [sp, #0]
    5f4e:	220c      	movs	r2, #12
    5f50:	7102      	strb	r2, [r0, #4]
    5f52:	2259      	movs	r2, #89	; 0x59
    5f54:	7142      	strb	r2, [r0, #5]
    5f56:	7181      	strb	r1, [r0, #6]
    5f58:	214b      	movs	r1, #75	; 0x4b
    5f5a:	71c1      	strb	r1, [r0, #7]
    5f5c:	2112      	movs	r1, #18
    5f5e:	7201      	strb	r1, [r0, #8]
    5f60:	e05d      	b.n	601e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    5f62:	e063      	b.n	602c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x960>
    5f64:	9800      	ldr	r0, [sp, #0]
    5f66:	f7fc ff73 	bl	2e50 <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY>
    5f6a:	e058      	b.n	601e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    5f6c:	4833      	ldr	r0, [pc, #204]	; (603c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x970>)
    5f6e:	9900      	ldr	r1, [sp, #0]
    5f70:	f7fc ffc2 	bl	2ef8 <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ>
    5f74:	e053      	b.n	601e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    5f76:	6860      	ldr	r0, [r4, #4]
    5f78:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
    5f7c:	9800      	ldr	r0, [sp, #0]
    5f7e:	f008 f8ab 	bl	e0d8 <sym_5NOMYYLIL22YATRZCGPQVOYH6BFSDNIEMEEMIZA>
    5f82:	6860      	ldr	r0, [r4, #4]
    5f84:	f8b0 1130 	ldrh.w	r1, [r0, #304]	; 0x130
    5f88:	9800      	ldr	r0, [sp, #0]
    5f8a:	f008 f8a9 	bl	e0e0 <sym_BD2MQHSWE7QNCT7DV5JGZCA5J2QIL2T6RGRVJ3Y>
    5f8e:	6860      	ldr	r0, [r4, #4]
    5f90:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
    5f94:	9800      	ldr	r0, [sp, #0]
    5f96:	f008 f897 	bl	e0c8 <sym_XW2AJRDPRGLPOQ7S6SBIDHJSPT737QJRC7LOWOI>
    5f9a:	6860      	ldr	r0, [r4, #4]
    5f9c:	f8b0 1132 	ldrh.w	r1, [r0, #306]	; 0x132
    5fa0:	9800      	ldr	r0, [sp, #0]
    5fa2:	f008 f895 	bl	e0d0 <sym_LKCMUIZAJSOHIZE54V37DJ4ULJ25HGEY7F7ST5I>
    5fa6:	e03a      	b.n	601e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    5fa8:	6861      	ldr	r1, [r4, #4]
    5faa:	9800      	ldr	r0, [sp, #0]
    5fac:	f891 1146 	ldrb.w	r1, [r1, #326]	; 0x146
    5fb0:	7101      	strb	r1, [r0, #4]
    5fb2:	6861      	ldr	r1, [r4, #4]
    5fb4:	f891 1147 	ldrb.w	r1, [r1, #327]	; 0x147
    5fb8:	7141      	strb	r1, [r0, #5]
    5fba:	e030      	b.n	601e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    5fbc:	6860      	ldr	r0, [r4, #4]
    5fbe:	f890 0263 	ldrb.w	r0, [r0, #611]	; 0x263
    5fc2:	f007 fe50 	bl	dc66 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ>
    5fc6:	4601      	mov	r1, r0
    5fc8:	9800      	ldr	r0, [sp, #0]
    5fca:	f008 f861 	bl	e090 <sym_SG4OPFPHWHCVU6FHRG2ZQ5GV7RHUGBHEKN6N55A>
    5fce:	6860      	ldr	r0, [r4, #4]
    5fd0:	f890 0262 	ldrb.w	r0, [r0, #610]	; 0x262
    5fd4:	f007 fe47 	bl	dc66 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ>
    5fd8:	4601      	mov	r1, r0
    5fda:	9800      	ldr	r0, [sp, #0]
    5fdc:	f008 f856 	bl	e08c <sym_SAWOREXGWRJNX5IOUMHBRACZ6DWRXOAHPPFX4TA>
    5fe0:	e01d      	b.n	601e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    5fe2:	4a16      	ldr	r2, [pc, #88]	; (603c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x970>)
    5fe4:	4628      	mov	r0, r5
    5fe6:	9900      	ldr	r1, [sp, #0]
    5fe8:	f009 f947 	bl	f27a <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ>
    5fec:	e017      	b.n	601e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    5fee:	6860      	ldr	r0, [r4, #4]
    5ff0:	f890 1130 	ldrb.w	r1, [r0, #304]	; 0x130
    5ff4:	b141      	cbz	r1, 6008 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x93c>
    5ff6:	f890 112d 	ldrb.w	r1, [r0, #301]	; 0x12d
    5ffa:	9800      	ldr	r0, [sp, #0]
    5ffc:	f008 f856 	bl	e0ac <sym_YMBI57OSTLFK65WQKT7WKM26EFMSOHLSMFNNR4I>
    6000:	6860      	ldr	r0, [r4, #4]
    6002:	f890 112c 	ldrb.w	r1, [r0, #300]	; 0x12c
    6006:	e007      	b.n	6018 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x94c>
    6008:	f890 112b 	ldrb.w	r1, [r0, #299]	; 0x12b
    600c:	9800      	ldr	r0, [sp, #0]
    600e:	f008 f84d 	bl	e0ac <sym_YMBI57OSTLFK65WQKT7WKM26EFMSOHLSMFNNR4I>
    6012:	6860      	ldr	r0, [r4, #4]
    6014:	f890 112a 	ldrb.w	r1, [r0, #298]	; 0x12a
    6018:	9800      	ldr	r0, [sp, #0]
    601a:	f008 f84b 	bl	e0b4 <sym_HAHVMCZ4V2U4G5KM2JOTYBKS4GFM72EJZRT7M3A>
    601e:	f7fb faa1 	bl	1564 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    6022:	b130      	cbz	r0, 6032 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x966>
    6024:	9800      	ldr	r0, [sp, #0]
    6026:	f7ff fbcd 	bl	57c4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf8>
    602a:	bd38      	pop	{r3, r4, r5, pc}
    602c:	f640 314e 	movw	r1, #2894	; 0xb4e
    6030:	e001      	b.n	6036 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x96a>
    6032:	f640 3154 	movw	r1, #2900	; 0xb54
    6036:	2036      	movs	r0, #54	; 0x36
    6038:	f7fa fd14 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    603c:	200000f0 	.word	0x200000f0
    6040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6044:	4e28      	ldr	r6, [pc, #160]	; (60e8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa1c>)
    6046:	4680      	mov	r8, r0
    6048:	460d      	mov	r5, r1
    604a:	8870      	ldrh	r0, [r6, #2]
    604c:	f106 040c 	add.w	r4, r6, #12
    6050:	05c1      	lsls	r1, r0, #23
    6052:	6860      	ldr	r0, [r4, #4]
    6054:	f04f 0700 	mov.w	r7, #0
    6058:	d502      	bpl.n	6060 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x994>
    605a:	f8a0 70d6 	strh.w	r7, [r0, #214]	; 0xd6
    605e:	e004      	b.n	606a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x99e>
    6060:	f8b0 10d6 	ldrh.w	r1, [r0, #214]	; 0xd6
    6064:	1c49      	adds	r1, r1, #1
    6066:	f8a0 10d6 	strh.w	r1, [r0, #214]	; 0xd6
    606a:	f009 f8cb 	bl	f204 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x408>
    606e:	b1f0      	cbz	r0, 60ae <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9e2>
    6070:	8870      	ldrh	r0, [r6, #2]
    6072:	0500      	lsls	r0, r0, #20
    6074:	d506      	bpl.n	6084 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9b8>
    6076:	6860      	ldr	r0, [r4, #4]
    6078:	f890 10ab 	ldrb.w	r1, [r0, #171]	; 0xab
    607c:	b111      	cbz	r1, 6084 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9b8>
    607e:	f8c0 70c8 	str.w	r7, [r0, #200]	; 0xc8
    6082:	e014      	b.n	60ae <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9e2>
    6084:	6860      	ldr	r0, [r4, #4]
    6086:	f8d0 10c8 	ldr.w	r1, [r0, #200]	; 0xc8
    608a:	1c49      	adds	r1, r1, #1
    608c:	f8c0 10c8 	str.w	r1, [r0, #200]	; 0xc8
    6090:	f008 fee3 	bl	ee5a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5e>
    6094:	6860      	ldr	r0, [r4, #4]
    6096:	e9d0 1232 	ldrd	r1, r2, [r0, #200]	; 0xc8
    609a:	4291      	cmp	r1, r2
    609c:	d307      	bcc.n	60ae <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9e2>
    609e:	f8c0 70c8 	str.w	r7, [r0, #200]	; 0xc8
    60a2:	220f      	movs	r2, #15
    60a4:	4911      	ldr	r1, [pc, #68]	; (60ec <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa20>)
    60a6:	f500 70b0 	add.w	r0, r0, #352	; 0x160
    60aa:	f008 f84c 	bl	e146 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    60ae:	8870      	ldrh	r0, [r6, #2]
    60b0:	f410 7f40 	tst.w	r0, #768	; 0x300
    60b4:	d008      	beq.n	60c8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9fc>
    60b6:	6860      	ldr	r0, [r4, #4]
    60b8:	f890 10a9 	ldrb.w	r1, [r0, #169]	; 0xa9
    60bc:	b921      	cbnz	r1, 60c8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9fc>
    60be:	2101      	movs	r1, #1
    60c0:	f880 10a9 	strb.w	r1, [r0, #169]	; 0xa9
    60c4:	f008 fd4e 	bl	eb64 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    60c8:	ea58 0005 	orrs.w	r0, r8, r5
    60cc:	d104      	bne.n	60d8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa0c>
    60ce:	f7ff fde7 	bl	5ca0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x5d4>
    60d2:	4605      	mov	r5, r0
    60d4:	f7ff fc04 	bl	58e0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x214>
    60d8:	4629      	mov	r1, r5
    60da:	4640      	mov	r0, r8
    60dc:	f000 fd36 	bl	6b4c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1480>
    60e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    60e4:	f7fb ba28 	b.w	1538 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    60e8:	200000e4 	.word	0x200000e4
    60ec:	0000e63d 	.word	0x0000e63d
    60f0:	4813      	ldr	r0, [pc, #76]	; (6140 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa74>)
    60f2:	6840      	ldr	r0, [r0, #4]
    60f4:	f890 10e0 	ldrb.w	r1, [r0, #224]	; 0xe0
    60f8:	b129      	cbz	r1, 6106 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa3a>
    60fa:	f8b0 10dc 	ldrh.w	r1, [r0, #220]	; 0xdc
    60fe:	f8b0 20de 	ldrh.w	r2, [r0, #222]	; 0xde
    6102:	4291      	cmp	r1, r2
    6104:	d215      	bcs.n	6132 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa66>
    6106:	f890 10e4 	ldrb.w	r1, [r0, #228]	; 0xe4
    610a:	b129      	cbz	r1, 6118 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa4c>
    610c:	f8b0 10e2 	ldrh.w	r1, [r0, #226]	; 0xe2
    6110:	f8b0 20de 	ldrh.w	r2, [r0, #222]	; 0xde
    6114:	4291      	cmp	r1, r2
    6116:	d20c      	bcs.n	6132 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa66>
    6118:	f8b0 20da 	ldrh.w	r2, [r0, #218]	; 0xda
    611c:	f8b0 10d8 	ldrh.w	r1, [r0, #216]	; 0xd8
    6120:	428a      	cmp	r2, r1
    6122:	d206      	bcs.n	6132 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa66>
    6124:	f890 20a9 	ldrb.w	r2, [r0, #169]	; 0xa9
    6128:	f8b0 00d6 	ldrh.w	r0, [r0, #214]	; 0xd6
    612c:	b11a      	cbz	r2, 6136 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa6a>
    612e:	4288      	cmp	r0, r1
    6130:	d303      	bcc.n	613a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa6e>
    6132:	2001      	movs	r0, #1
    6134:	4770      	bx	lr
    6136:	2806      	cmp	r0, #6
    6138:	d2fb      	bcs.n	6132 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa66>
    613a:	2000      	movs	r0, #0
    613c:	4770      	bx	lr
    613e:	0000      	.short	0x0000
    6140:	200000f0 	.word	0x200000f0
    6144:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    6146:	4c63      	ldr	r4, [pc, #396]	; (62d4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc08>)
    6148:	6860      	ldr	r0, [r4, #4]
    614a:	f890 1264 	ldrb.w	r1, [r0, #612]	; 0x264
    614e:	f88d 1000 	strb.w	r1, [sp]
    6152:	9900      	ldr	r1, [sp, #0]
    6154:	9100      	str	r1, [sp, #0]
    6156:	f89d 1000 	ldrb.w	r1, [sp]
    615a:	2500      	movs	r5, #0
    615c:	b129      	cbz	r1, 616a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa9e>
    615e:	f890 00a6 	ldrb.w	r0, [r0, #166]	; 0xa6
    6162:	f007 fd2e 	bl	dbc2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    6166:	2800      	cmp	r0, #0
    6168:	d07d      	beq.n	6266 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb9a>
    616a:	6860      	ldr	r0, [r4, #4]
    616c:	f890 1278 	ldrb.w	r1, [r0, #632]	; 0x278
    6170:	b181      	cbz	r1, 6194 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xac8>
    6172:	f890 10aa 	ldrb.w	r1, [r0, #170]	; 0xaa
    6176:	b149      	cbz	r1, 618c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xac0>
    6178:	f890 00ab 	ldrb.w	r0, [r0, #171]	; 0xab
    617c:	b108      	cbz	r0, 6182 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xab6>
    617e:	200a      	movs	r0, #10
    6180:	e071      	b.n	6266 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb9a>
    6182:	f640 01dc 	movw	r1, #2268	; 0x8dc
    6186:	2036      	movs	r0, #54	; 0x36
    6188:	f7fa fc6c 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    618c:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    6190:	f000 b8a2 	b.w	62d8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc0c>
    6194:	f890 114b 	ldrb.w	r1, [r0, #331]	; 0x14b
    6198:	b109      	cbz	r1, 619e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xad2>
    619a:	2008      	movs	r0, #8
    619c:	e063      	b.n	6266 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb9a>
    619e:	f890 114a 	ldrb.w	r1, [r0, #330]	; 0x14a
    61a2:	b179      	cbz	r1, 61c4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xaf8>
    61a4:	f890 00e7 	ldrb.w	r0, [r0, #231]	; 0xe7
    61a8:	0780      	lsls	r0, r0, #30
    61aa:	d10a      	bne.n	61c2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xaf6>
    61ac:	200c      	movs	r0, #12
    61ae:	f000 f981 	bl	64b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    61b2:	6860      	ldr	r0, [r4, #4]
    61b4:	f810 1fe7 	ldrb.w	r1, [r0, #231]!
    61b8:	f041 0101 	orr.w	r1, r1, #1
    61bc:	7001      	strb	r1, [r0, #0]
    61be:	f880 5063 	strb.w	r5, [r0, #99]	; 0x63
    61c2:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    61c4:	f890 113a 	ldrb.w	r1, [r0, #314]	; 0x13a
    61c8:	f88d 1004 	strb.w	r1, [sp, #4]
    61cc:	9901      	ldr	r1, [sp, #4]
    61ce:	9101      	str	r1, [sp, #4]
    61d0:	f89d 1004 	ldrb.w	r1, [sp, #4]
    61d4:	b141      	cbz	r1, 61e8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb1c>
    61d6:	f890 113b 	ldrb.w	r1, [r0, #315]	; 0x13b
    61da:	f88d 1000 	strb.w	r1, [sp]
    61de:	9900      	ldr	r1, [sp, #0]
    61e0:	9100      	str	r1, [sp, #0]
    61e2:	f89d 1000 	ldrb.w	r1, [sp]
    61e6:	b121      	cbz	r1, 61f2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb26>
    61e8:	f890 1144 	ldrb.w	r1, [r0, #324]	; 0x144
    61ec:	2901      	cmp	r1, #1
    61ee:	d021      	beq.n	6234 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb68>
    61f0:	e02e      	b.n	6250 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb84>
    61f2:	f890 10a6 	ldrb.w	r1, [r0, #166]	; 0xa6
    61f6:	2925      	cmp	r1, #37	; 0x25
    61f8:	d01a      	beq.n	6230 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb64>
    61fa:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    61fe:	2925      	cmp	r1, #37	; 0x25
    6200:	d016      	beq.n	6230 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb64>
    6202:	2926      	cmp	r1, #38	; 0x26
    6204:	d014      	beq.n	6230 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb64>
    6206:	2300      	movs	r3, #0
    6208:	f200 2262 	addw	r2, r0, #610	; 0x262
    620c:	f500 719d 	add.w	r1, r0, #314	; 0x13a
    6210:	f007 ffaf 	bl	e172 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    6214:	6860      	ldr	r0, [r4, #4]
    6216:	f880 513a 	strb.w	r5, [r0, #314]	; 0x13a
    621a:	6861      	ldr	r1, [r4, #4]
    621c:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    6220:	8bc2      	ldrh	r2, [r0, #30]
    6222:	f8a1 2130 	strh.w	r2, [r1, #304]	; 0x130
    6226:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    6228:	f8a1 0132 	strh.w	r0, [r1, #306]	; 0x132
    622c:	2014      	movs	r0, #20
    622e:	e01a      	b.n	6266 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb9a>
    6230:	2301      	movs	r3, #1
    6232:	e7e9      	b.n	6208 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb3c>
    6234:	f890 1145 	ldrb.w	r1, [r0, #325]	; 0x145
    6238:	f88d 1000 	strb.w	r1, [sp]
    623c:	9900      	ldr	r1, [sp, #0]
    623e:	9100      	str	r1, [sp, #0]
    6240:	f89d 1000 	ldrb.w	r1, [sp]
    6244:	b921      	cbnz	r1, 6250 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb84>
    6246:	f890 00a6 	ldrb.w	r0, [r0, #166]	; 0xa6
    624a:	f007 fcba 	bl	dbc2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    624e:	b170      	cbz	r0, 626e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xba2>
    6250:	6860      	ldr	r0, [r4, #4]
    6252:	f890 1151 	ldrb.w	r1, [r0, #337]	; 0x151
    6256:	f88d 1000 	strb.w	r1, [sp]
    625a:	9900      	ldr	r1, [sp, #0]
    625c:	9100      	str	r1, [sp, #0]
    625e:	f89d 1000 	ldrb.w	r1, [sp]
    6262:	b329      	cbz	r1, 62b0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xbe4>
    6264:	2023      	movs	r0, #35	; 0x23
    6266:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    626a:	f000 b923 	b.w	64b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    626e:	6860      	ldr	r0, [r4, #4]
    6270:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    6274:	f008 fdd8 	bl	ee28 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    6278:	4605      	mov	r5, r0
    627a:	6860      	ldr	r0, [r4, #4]
    627c:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    6280:	f008 fdd2 	bl	ee28 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    6284:	4606      	mov	r6, r0
    6286:	6860      	ldr	r0, [r4, #4]
    6288:	f890 1146 	ldrb.w	r1, [r0, #326]	; 0x146
    628c:	4628      	mov	r0, r5
    628e:	f008 fdd6 	bl	ee3e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x42>
    6292:	b158      	cbz	r0, 62ac <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xbe0>
    6294:	6860      	ldr	r0, [r4, #4]
    6296:	f890 1147 	ldrb.w	r1, [r0, #327]	; 0x147
    629a:	4630      	mov	r0, r6
    629c:	f008 fdcf 	bl	ee3e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x42>
    62a0:	b120      	cbz	r0, 62ac <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xbe0>
    62a2:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    62a6:	2000      	movs	r0, #0
    62a8:	f000 b8de 	b.w	6468 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd9c>
    62ac:	2016      	movs	r0, #22
    62ae:	e7da      	b.n	6266 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb9a>
    62b0:	f890 014e 	ldrb.w	r0, [r0, #334]	; 0x14e
    62b4:	f88d 0000 	strb.w	r0, [sp]
    62b8:	9800      	ldr	r0, [sp, #0]
    62ba:	9000      	str	r0, [sp, #0]
    62bc:	f89d 0000 	ldrb.w	r0, [sp]
    62c0:	2800      	cmp	r0, #0
    62c2:	f43f af7e 	beq.w	61c2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xaf6>
    62c6:	2025      	movs	r0, #37	; 0x25
    62c8:	f000 f8f4 	bl	64b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    62cc:	6860      	ldr	r0, [r4, #4]
    62ce:	f880 514e 	strb.w	r5, [r0, #334]	; 0x14e
    62d2:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    62d4:	200000f0 	.word	0x200000f0
    62d8:	b510      	push	{r4, lr}
    62da:	4c1e      	ldr	r4, [pc, #120]	; (6354 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc88>)
    62dc:	6862      	ldr	r2, [r4, #4]
    62de:	f892 0134 	ldrb.w	r0, [r2, #308]	; 0x134
    62e2:	2808      	cmp	r0, #8
    62e4:	d20d      	bcs.n	6302 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc36>
    62e6:	f1c0 0108 	rsb	r1, r0, #8
    62ea:	f200 2093 	addw	r0, r0, #659	; 0x293
    62ee:	b2c9      	uxtb	r1, r1
    62f0:	4410      	add	r0, r2
    62f2:	f7fa fc49 	bl	b88 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    62f6:	6861      	ldr	r1, [r4, #4]
    62f8:	f891 2134 	ldrb.w	r2, [r1, #308]	; 0x134
    62fc:	4410      	add	r0, r2
    62fe:	f881 0134 	strb.w	r0, [r1, #308]	; 0x134
    6302:	6862      	ldr	r2, [r4, #4]
    6304:	f892 0134 	ldrb.w	r0, [r2, #308]	; 0x134
    6308:	3808      	subs	r0, #8
    630a:	2804      	cmp	r0, #4
    630c:	d20d      	bcs.n	632a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc5e>
    630e:	f1c0 0104 	rsb	r1, r0, #4
    6312:	f500 7090 	add.w	r0, r0, #288	; 0x120
    6316:	b2c9      	uxtb	r1, r1
    6318:	4410      	add	r0, r2
    631a:	f7fa fc35 	bl	b88 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    631e:	6861      	ldr	r1, [r4, #4]
    6320:	f891 2134 	ldrb.w	r2, [r1, #308]	; 0x134
    6324:	4410      	add	r0, r2
    6326:	f881 0134 	strb.w	r0, [r1, #308]	; 0x134
    632a:	6860      	ldr	r0, [r4, #4]
    632c:	f890 1134 	ldrb.w	r1, [r0, #308]	; 0x134
    6330:	290c      	cmp	r1, #12
    6332:	d30e      	bcc.n	6352 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc86>
    6334:	d005      	beq.n	6342 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc76>
    6336:	f640 31c5 	movw	r1, #3013	; 0xbc5
    633a:	f04f 0036 	mov.w	r0, #54	; 0x36
    633e:	f7fa fb91 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6342:	2100      	movs	r1, #0
    6344:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
    6348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    634c:	2003      	movs	r0, #3
    634e:	f000 b8b1 	b.w	64b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    6352:	bd10      	pop	{r4, pc}
    6354:	200000f0 	.word	0x200000f0
    6358:	b570      	push	{r4, r5, r6, lr}
    635a:	4b20      	ldr	r3, [pc, #128]	; (63dc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd10>)
    635c:	4602      	mov	r2, r0
    635e:	460c      	mov	r4, r1
    6360:	8858      	ldrh	r0, [r3, #2]
    6362:	4310      	orrs	r0, r2
    6364:	8058      	strh	r0, [r3, #2]
    6366:	f103 000c 	add.w	r0, r3, #12
    636a:	0791      	lsls	r1, r2, #30
    636c:	6840      	ldr	r0, [r0, #4]
    636e:	ea4f 71c2 	mov.w	r1, r2, lsl #31
    6372:	d507      	bpl.n	6384 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcb8>
    6374:	b121      	cbz	r1, 6380 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcb4>
    6376:	f640 41cc 	movw	r1, #3276	; 0xccc
    637a:	2036      	movs	r0, #54	; 0x36
    637c:	f7fa fb72 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6380:	605c      	str	r4, [r3, #4]
    6382:	e003      	b.n	638c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcc0>
    6384:	b101      	cbz	r1, 6388 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcbc>
    6386:	609c      	str	r4, [r3, #8]
    6388:	0791      	lsls	r1, r2, #30
    638a:	d515      	bpl.n	63b8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcec>
    638c:	78e1      	ldrb	r1, [r4, #3]
    638e:	2906      	cmp	r1, #6
    6390:	d002      	beq.n	6398 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xccc>
    6392:	290b      	cmp	r1, #11
    6394:	d110      	bne.n	63b8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcec>
    6396:	e008      	b.n	63aa <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcde>
    6398:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    639c:	2919      	cmp	r1, #25
    639e:	d10b      	bne.n	63b8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcec>
    63a0:	2100      	movs	r1, #0
    63a2:	e9c0 1142 	strd	r1, r1, [r0, #264]	; 0x108
    63a6:	2101      	movs	r1, #1
    63a8:	e004      	b.n	63b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xce8>
    63aa:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    63ae:	2913      	cmp	r1, #19
    63b0:	d102      	bne.n	63b8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcec>
    63b2:	2100      	movs	r1, #0
    63b4:	f880 10ab 	strb.w	r1, [r0, #171]	; 0xab
    63b8:	0691      	lsls	r1, r2, #26
    63ba:	d501      	bpl.n	63c0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcf4>
    63bc:	2108      	movs	r1, #8
    63be:	7059      	strb	r1, [r3, #1]
    63c0:	0611      	lsls	r1, r2, #24
    63c2:	d50a      	bpl.n	63da <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd0e>
    63c4:	8b02      	ldrh	r2, [r0, #24]
    63c6:	f8b0 109c 	ldrh.w	r1, [r0, #156]	; 0x9c
    63ca:	4620      	mov	r0, r4
    63cc:	f7ff f9dc 	bl	5788 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xbc>
    63d0:	4620      	mov	r0, r4
    63d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    63d6:	f7ff b9f5 	b.w	57c4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf8>
    63da:	bd70      	pop	{r4, r5, r6, pc}
    63dc:	200000e4 	.word	0x200000e4
    63e0:	b570      	push	{r4, r5, r6, lr}
    63e2:	4c20      	ldr	r4, [pc, #128]	; (6464 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd98>)
    63e4:	2501      	movs	r5, #1
    63e6:	6862      	ldr	r2, [r4, #4]
    63e8:	f892 1262 	ldrb.w	r1, [r2, #610]	; 0x262
    63ec:	b909      	cbnz	r1, 63f2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd26>
    63ee:	f892 106a 	ldrb.w	r1, [r2, #106]	; 0x6a
    63f2:	f892 0263 	ldrb.w	r0, [r2, #611]	; 0x263
    63f6:	b908      	cbnz	r0, 63fc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd30>
    63f8:	f892 006b 	ldrb.w	r0, [r2, #107]	; 0x6b
    63fc:	f102 0362 	add.w	r3, r2, #98	; 0x62
    6400:	7219      	strb	r1, [r3, #8]
    6402:	7258      	strb	r0, [r3, #9]
    6404:	20ff      	movs	r0, #255	; 0xff
    6406:	7298      	strb	r0, [r3, #10]
    6408:	4610      	mov	r0, r2
    640a:	f008 fffa 	bl	f402 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY>
    640e:	2000      	movs	r0, #0
    6410:	f000 f82a 	bl	6468 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd9c>
    6414:	6860      	ldr	r0, [r4, #4]
    6416:	302c      	adds	r0, #44	; 0x2c
    6418:	f007 ff1a 	bl	e250 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    641c:	4606      	mov	r6, r0
    641e:	6860      	ldr	r0, [r4, #4]
    6420:	f007 fec2 	bl	e1a8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    6424:	b130      	cbz	r0, 6434 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd68>
    6426:	6861      	ldr	r1, [r4, #4]
    6428:	f501 72b5 	add.w	r2, r1, #362	; 0x16a
    642c:	f831 0b2c 	ldrh.w	r0, [r1], #44
    6430:	f7fc fc20 	bl	2c74 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    6434:	2104      	movs	r1, #4
    6436:	6860      	ldr	r0, [r4, #4]
    6438:	f008 fb94 	bl	eb64 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    643c:	6860      	ldr	r0, [r4, #4]
    643e:	302c      	adds	r0, #44	; 0x2c
    6440:	f007 ff06 	bl	e250 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    6444:	4604      	mov	r4, r0
    6446:	42a6      	cmp	r6, r4
    6448:	d20a      	bcs.n	6460 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd94>
    644a:	f003 fdd5 	bl	9ff8 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>
    644e:	4601      	mov	r1, r0
    6450:	1ba0      	subs	r0, r4, r6
    6452:	2865      	cmp	r0, #101	; 0x65
    6454:	d200      	bcs.n	6458 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd8c>
    6456:	2065      	movs	r0, #101	; 0x65
    6458:	f003 fca4 	bl	9da4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    645c:	b100      	cbz	r0, 6460 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd94>
    645e:	2500      	movs	r5, #0
    6460:	4628      	mov	r0, r5
    6462:	bd70      	pop	{r4, r5, r6, pc}
    6464:	200000f0 	.word	0x200000f0
    6468:	b510      	push	{r4, lr}
    646a:	4c10      	ldr	r4, [pc, #64]	; (64ac <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde0>)
    646c:	6861      	ldr	r1, [r4, #4]
    646e:	880a      	ldrh	r2, [r1, #0]
    6470:	f8a1 21ae 	strh.w	r2, [r1, #430]	; 0x1ae
    6474:	f881 01ac 	strb.w	r0, [r1, #428]	; 0x1ac
    6478:	f891 006a 	ldrb.w	r0, [r1, #106]	; 0x6a
    647c:	f008 fcd4 	bl	ee28 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    6480:	6861      	ldr	r1, [r4, #4]
    6482:	f881 01b0 	strb.w	r0, [r1, #432]	; 0x1b0
    6486:	f891 006b 	ldrb.w	r0, [r1, #107]	; 0x6b
    648a:	f008 fccd 	bl	ee28 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    648e:	6863      	ldr	r3, [r4, #4]
    6490:	2215      	movs	r2, #21
    6492:	4907      	ldr	r1, [pc, #28]	; (64b0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde4>)
    6494:	f883 01b1 	strb.w	r0, [r3, #433]	; 0x1b1
    6498:	f503 70d1 	add.w	r0, r3, #418	; 0x1a2
    649c:	f007 fe53 	bl	e146 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    64a0:	6861      	ldr	r1, [r4, #4]
    64a2:	2000      	movs	r0, #0
    64a4:	f881 0144 	strb.w	r0, [r1, #324]	; 0x144
    64a8:	bd10      	pop	{r4, pc}
    64aa:	0000      	.short	0x0000
    64ac:	200000f0 	.word	0x200000f0
    64b0:	00010189 	.word	0x00010189
    64b4:	4902      	ldr	r1, [pc, #8]	; (64c0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xdf4>)
    64b6:	6849      	ldr	r1, [r1, #4]
    64b8:	f881 012e 	strb.w	r0, [r1, #302]	; 0x12e
    64bc:	f000 bb10 	b.w	6ae0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1414>
    64c0:	200000f0 	.word	0x200000f0
    64c4:	4903      	ldr	r1, [pc, #12]	; (64d4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe08>)
    64c6:	6849      	ldr	r1, [r1, #4]
    64c8:	f881 0130 	strb.w	r0, [r1, #304]	; 0x130
    64cc:	2011      	movs	r0, #17
    64ce:	f7ff bff1 	b.w	64b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    64d2:	0000      	.short	0x0000
    64d4:	200000f0 	.word	0x200000f0
    64d8:	b538      	push	{r3, r4, r5, lr}
    64da:	4c11      	ldr	r4, [pc, #68]	; (6520 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe54>)
    64dc:	6862      	ldr	r2, [r4, #4]
    64de:	f8b2 206a 	ldrh.w	r2, [r2, #106]	; 0x6a
    64e2:	f8ad 2000 	strh.w	r2, [sp]
    64e6:	f007 fbe5 	bl	dcb4 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ>
    64ea:	f89d 3000 	ldrb.w	r3, [sp]
    64ee:	b2c2      	uxtb	r2, r0
    64f0:	2100      	movs	r1, #0
    64f2:	4293      	cmp	r3, r2
    64f4:	d003      	beq.n	64fe <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe32>
    64f6:	6863      	ldr	r3, [r4, #4]
    64f8:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
    64fc:	e002      	b.n	6504 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe38>
    64fe:	6862      	ldr	r2, [r4, #4]
    6500:	f882 1262 	strb.w	r1, [r2, #610]	; 0x262
    6504:	f89d 2001 	ldrb.w	r2, [sp, #1]
    6508:	f3c0 2007 	ubfx	r0, r0, #8, #8
    650c:	4282      	cmp	r2, r0
    650e:	d003      	beq.n	6518 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe4c>
    6510:	6861      	ldr	r1, [r4, #4]
    6512:	f881 0263 	strb.w	r0, [r1, #611]	; 0x263
    6516:	bd38      	pop	{r3, r4, r5, pc}
    6518:	6860      	ldr	r0, [r4, #4]
    651a:	f880 1263 	strb.w	r1, [r0, #611]	; 0x263
    651e:	bd38      	pop	{r3, r4, r5, pc}
    6520:	200000f0 	.word	0x200000f0
    6524:	4a03      	ldr	r2, [pc, #12]	; (6534 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe68>)
    6526:	6852      	ldr	r2, [r2, #4]
    6528:	f882 012a 	strb.w	r0, [r2, #298]	; 0x12a
    652c:	f882 112b 	strb.w	r1, [r2, #299]	; 0x12b
    6530:	4770      	bx	lr
    6532:	0000      	.short	0x0000
    6534:	200000f0 	.word	0x200000f0
    6538:	b570      	push	{r4, r5, r6, lr}
    653a:	6841      	ldr	r1, [r0, #4]
    653c:	4604      	mov	r4, r0
    653e:	f891 00a5 	ldrb.w	r0, [r1, #165]	; 0xa5
    6542:	2814      	cmp	r0, #20
    6544:	d001      	beq.n	654a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe7e>
    6546:	2002      	movs	r0, #2
    6548:	bd70      	pop	{r4, r5, r6, pc}
    654a:	4d09      	ldr	r5, [pc, #36]	; (6570 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xea4>)
    654c:	f201 219b 	addw	r1, r1, #667	; 0x29b
    6550:	68a8      	ldr	r0, [r5, #8]
    6552:	f007 fd6a 	bl	e02a <sym_G3E5J3DBBC3WRZ26KQDVAZEPSZL4FITDNFKJBAY>
    6556:	6861      	ldr	r1, [r4, #4]
    6558:	68a8      	ldr	r0, [r5, #8]
    655a:	f501 7192 	add.w	r1, r1, #292	; 0x124
    655e:	f007 fd61 	bl	e024 <sym_RHFWG2VAMMSM6HNQIXGIQMU7QUNXB2XIV4NQREY>
    6562:	6861      	ldr	r1, [r4, #4]
    6564:	2017      	movs	r0, #23
    6566:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    656a:	2000      	movs	r0, #0
    656c:	bd70      	pop	{r4, r5, r6, pc}
    656e:	0000      	.short	0x0000
    6570:	200000e4 	.word	0x200000e4
    6574:	4901      	ldr	r1, [pc, #4]	; (657c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xeb0>)
    6576:	6889      	ldr	r1, [r1, #8]
    6578:	f7fc bc78 	b.w	2e6c <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI>
    657c:	200000e4 	.word	0x200000e4
    6580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6584:	4e1b      	ldr	r6, [pc, #108]	; (65f4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf28>)
    6586:	2500      	movs	r5, #0
    6588:	f106 010c 	add.w	r1, r6, #12
    658c:	2703      	movs	r7, #3
    658e:	f8d1 c004 	ldr.w	ip, [r1, #4]
    6592:	2401      	movs	r4, #1
    6594:	b1a0      	cbz	r0, 65c0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xef4>
    6596:	68b0      	ldr	r0, [r6, #8]
    6598:	78c0      	ldrb	r0, [r0, #3]
    659a:	f88c 0129 	strb.w	r0, [ip, #297]	; 0x129
    659e:	fa04 f000 	lsl.w	r0, r4, r0
    65a2:	f3c0 50c0 	ubfx	r0, r0, #23, #1
    65a6:	b130      	cbz	r0, 65b6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xeea>
    65a8:	f88c 70a5 	strb.w	r7, [ip, #165]	; 0xa5
    65ac:	f8ac 50dc 	strh.w	r5, [ip, #220]	; 0xdc
    65b0:	f88c 40e0 	strb.w	r4, [ip, #224]	; 0xe0
    65b4:	e019      	b.n	65ea <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf1e>
    65b6:	f240 6195 	movw	r1, #1685	; 0x695
    65ba:	2036      	movs	r0, #54	; 0x36
    65bc:	f7fa fa52 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    65c0:	4688      	mov	r8, r1
    65c2:	2300      	movs	r3, #0
    65c4:	f89c 20a6 	ldrb.w	r2, [ip, #166]	; 0xa6
    65c8:	f10c 0088 	add.w	r0, ip, #136	; 0x88
    65cc:	4619      	mov	r1, r3
    65ce:	f007 fa95 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    65d2:	b168      	cbz	r0, 65f0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf24>
    65d4:	68b0      	ldr	r0, [r6, #8]
    65d6:	78c1      	ldrb	r1, [r0, #3]
    65d8:	f8d8 0004 	ldr.w	r0, [r8, #4]
    65dc:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    65e0:	f800 7fa6 	strb.w	r7, [r0, #166]!
    65e4:	8785      	strh	r5, [r0, #60]	; 0x3c
    65e6:	f880 403e 	strb.w	r4, [r0, #62]	; 0x3e
    65ea:	2000      	movs	r0, #0
    65ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    65f0:	2001      	movs	r0, #1
    65f2:	e7fb      	b.n	65ec <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf20>
    65f4:	200000e4 	.word	0x200000e4
    65f8:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    65fc:	4604      	mov	r4, r0
    65fe:	6840      	ldr	r0, [r0, #4]
    6600:	2300      	movs	r3, #0
    6602:	4619      	mov	r1, r3
    6604:	f890 20a6 	ldrb.w	r2, [r0, #166]	; 0xa6
    6608:	3088      	adds	r0, #136	; 0x88
    660a:	f007 fa77 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    660e:	b310      	cbz	r0, 6656 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf8a>
    6610:	4d2e      	ldr	r5, [pc, #184]	; (66cc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1000>)
    6612:	68a8      	ldr	r0, [r5, #8]
    6614:	f007 fd1a 	bl	e04c <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>
    6618:	b300      	cbz	r0, 665c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf90>
    661a:	68a8      	ldr	r0, [r5, #8]
    661c:	f007 fd10 	bl	e040 <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>
    6620:	4607      	mov	r7, r0
    6622:	68a8      	ldr	r0, [r5, #8]
    6624:	f007 fd10 	bl	e048 <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>
    6628:	4680      	mov	r8, r0
    662a:	68a8      	ldr	r0, [r5, #8]
    662c:	f007 fd06 	bl	e03c <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>
    6630:	4606      	mov	r6, r0
    6632:	68a8      	ldr	r0, [r5, #8]
    6634:	f007 fd06 	bl	e044 <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>
    6638:	4601      	mov	r1, r0
    663a:	9700      	str	r7, [sp, #0]
    663c:	6860      	ldr	r0, [r4, #4]
    663e:	4643      	mov	r3, r8
    6640:	4632      	mov	r2, r6
    6642:	302c      	adds	r0, #44	; 0x2c
    6644:	f007 fe3e 	bl	e2c4 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    6648:	6860      	ldr	r0, [r4, #4]
    664a:	2501      	movs	r5, #1
    664c:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    6650:	291d      	cmp	r1, #29
    6652:	d008      	beq.n	6666 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf9a>
    6654:	e009      	b.n	666a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf9e>
    6656:	2001      	movs	r0, #1
    6658:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    665c:	e8bd 41fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    6660:	2000      	movs	r0, #0
    6662:	f7ff bf8d 	b.w	6580 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xeb4>
    6666:	f880 5060 	strb.w	r5, [r0, #96]	; 0x60
    666a:	6860      	ldr	r0, [r4, #4]
    666c:	2600      	movs	r6, #0
    666e:	f890 1060 	ldrb.w	r1, [r0, #96]	; 0x60
    6672:	2901      	cmp	r1, #1
    6674:	d011      	beq.n	669a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xfce>
    6676:	f890 113b 	ldrb.w	r1, [r0, #315]	; 0x13b
    667a:	f88d 1004 	strb.w	r1, [sp, #4]
    667e:	9901      	ldr	r1, [sp, #4]
    6680:	9101      	str	r1, [sp, #4]
    6682:	f89d 1004 	ldrb.w	r1, [sp, #4]
    6686:	b941      	cbnz	r1, 669a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xfce>
    6688:	f890 113a 	ldrb.w	r1, [r0, #314]	; 0x13a
    668c:	f88d 1000 	strb.w	r1, [sp]
    6690:	9900      	ldr	r1, [sp, #0]
    6692:	9100      	str	r1, [sp, #0]
    6694:	f89d 1000 	ldrb.w	r1, [sp]
    6698:	b151      	cbz	r1, 66b0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xfe4>
    669a:	211f      	movs	r1, #31
    669c:	f880 10a6 	strb.w	r1, [r0, #166]	; 0xa6
    66a0:	6860      	ldr	r0, [r4, #4]
    66a2:	f8a0 60e2 	strh.w	r6, [r0, #226]	; 0xe2
    66a6:	6860      	ldr	r0, [r4, #4]
    66a8:	f880 50e4 	strb.w	r5, [r0, #228]	; 0xe4
    66ac:	2000      	movs	r0, #0
    66ae:	e7d3      	b.n	6658 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf8c>
    66b0:	211e      	movs	r1, #30
    66b2:	f880 10a6 	strb.w	r1, [r0, #166]	; 0xa6
    66b6:	4805      	ldr	r0, [pc, #20]	; (66cc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1000>)
    66b8:	300c      	adds	r0, #12
    66ba:	6843      	ldr	r3, [r0, #4]
    66bc:	f103 012c 	add.w	r1, r3, #44	; 0x2c
    66c0:	8818      	ldrh	r0, [r3, #0]
    66c2:	f503 72c0 	add.w	r2, r3, #384	; 0x180
    66c6:	f7fc faff 	bl	2cc8 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    66ca:	e7e9      	b.n	66a0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xfd4>
    66cc:	200000e4 	.word	0x200000e4
    66d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    66d4:	4604      	mov	r4, r0
    66d6:	6840      	ldr	r0, [r0, #4]
    66d8:	2300      	movs	r3, #0
    66da:	210a      	movs	r1, #10
    66dc:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    66e0:	3088      	adds	r0, #136	; 0x88
    66e2:	f007 fa0b 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    66e6:	b370      	cbz	r0, 6746 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x107a>
    66e8:	4d18      	ldr	r5, [pc, #96]	; (674c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1080>)
    66ea:	68a8      	ldr	r0, [r5, #8]
    66ec:	f007 fcae 	bl	e04c <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>
    66f0:	b1e8      	cbz	r0, 672e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1062>
    66f2:	68a8      	ldr	r0, [r5, #8]
    66f4:	f007 fca4 	bl	e040 <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>
    66f8:	4607      	mov	r7, r0
    66fa:	68a8      	ldr	r0, [r5, #8]
    66fc:	f007 fca4 	bl	e048 <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>
    6700:	4680      	mov	r8, r0
    6702:	68a8      	ldr	r0, [r5, #8]
    6704:	f007 fc9a 	bl	e03c <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>
    6708:	4606      	mov	r6, r0
    670a:	68a8      	ldr	r0, [r5, #8]
    670c:	f007 fc9a 	bl	e044 <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>
    6710:	4601      	mov	r1, r0
    6712:	9700      	str	r7, [sp, #0]
    6714:	6860      	ldr	r0, [r4, #4]
    6716:	4643      	mov	r3, r8
    6718:	4632      	mov	r2, r6
    671a:	302c      	adds	r0, #44	; 0x2c
    671c:	f007 fdd2 	bl	e2c4 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    6720:	6860      	ldr	r0, [r4, #4]
    6722:	f007 fd41 	bl	e1a8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    6726:	2104      	movs	r1, #4
    6728:	6860      	ldr	r0, [r4, #4]
    672a:	f008 fa1b 	bl	eb64 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    672e:	6861      	ldr	r1, [r4, #4]
    6730:	2000      	movs	r0, #0
    6732:	f881 00e0 	strb.w	r0, [r1, #224]	; 0xe0
    6736:	6861      	ldr	r1, [r4, #4]
    6738:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    673c:	f7ff f9fa 	bl	5b34 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x468>
    6740:	2000      	movs	r0, #0
    6742:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6746:	e7ff      	b.n	6748 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x107c>
    6748:	2001      	movs	r0, #1
    674a:	e7fa      	b.n	6742 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1076>
    674c:	200000e4 	.word	0x200000e4
    6750:	4901      	ldr	r1, [pc, #4]	; (6758 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x108c>)
    6752:	6889      	ldr	r1, [r1, #8]
    6754:	f7fc bb58 	b.w	2e08 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ>
    6758:	200000e4 	.word	0x200000e4
    675c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6760:	4604      	mov	r4, r0
    6762:	6840      	ldr	r0, [r0, #4]
    6764:	f04f 0800 	mov.w	r8, #0
    6768:	b086      	sub	sp, #24
    676a:	f890 20a6 	ldrb.w	r2, [r0, #166]	; 0xa6
    676e:	4643      	mov	r3, r8
    6770:	4641      	mov	r1, r8
    6772:	3088      	adds	r0, #136	; 0x88
    6774:	f007 f9c2 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6778:	b190      	cbz	r0, 67a0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10d4>
    677a:	6860      	ldr	r0, [r4, #4]
    677c:	f890 00a5 	ldrb.w	r0, [r0, #165]	; 0xa5
    6780:	2824      	cmp	r0, #36	; 0x24
    6782:	d011      	beq.n	67a8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10dc>
    6784:	2825      	cmp	r0, #37	; 0x25
    6786:	d00f      	beq.n	67a8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10dc>
    6788:	2826      	cmp	r0, #38	; 0x26
    678a:	d00d      	beq.n	67a8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10dc>
    678c:	4668      	mov	r0, sp
    678e:	f7fa fefd 	bl	158c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    6792:	b158      	cbz	r0, 67ac <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10e0>
    6794:	9800      	ldr	r0, [sp, #0]
    6796:	a903      	add	r1, sp, #12
    6798:	78c0      	ldrb	r0, [r0, #3]
    679a:	f88d 000c 	strb.w	r0, [sp, #12]
    679e:	e006      	b.n	67ae <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10e2>
    67a0:	2001      	movs	r0, #1
    67a2:	b006      	add	sp, #24
    67a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    67a8:	2020      	movs	r0, #32
    67aa:	e7fa      	b.n	67a2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10d6>
    67ac:	2100      	movs	r1, #0
    67ae:	6860      	ldr	r0, [r4, #4]
    67b0:	ab02      	add	r3, sp, #8
    67b2:	2216      	movs	r2, #22
    67b4:	f890 00a5 	ldrb.w	r0, [r0, #165]	; 0xa5
    67b8:	f007 fa5b 	bl	dc72 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI>
    67bc:	2501      	movs	r5, #1
    67be:	2600      	movs	r6, #0
    67c0:	b180      	cbz	r0, 67e4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1118>
    67c2:	2116      	movs	r1, #22
    67c4:	f89d 0008 	ldrb.w	r0, [sp, #8]
    67c8:	f7ff feac 	bl	6524 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe58>
    67cc:	6861      	ldr	r1, [r4, #4]
    67ce:	202f      	movs	r0, #47	; 0x2f
    67d0:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    67d4:	6860      	ldr	r0, [r4, #4]
    67d6:	f880 50e4 	strb.w	r5, [r0, #228]	; 0xe4
    67da:	6860      	ldr	r0, [r4, #4]
    67dc:	f8a0 60e2 	strh.w	r6, [r0, #226]	; 0xe2
    67e0:	2000      	movs	r0, #0
    67e2:	e7de      	b.n	67a2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10d6>
    67e4:	4f29      	ldr	r7, [pc, #164]	; (688c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11c0>)
    67e6:	68b8      	ldr	r0, [r7, #8]
    67e8:	f007 fc42 	bl	e070 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y>
    67ec:	b1b8      	cbz	r0, 681e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1152>
    67ee:	68b8      	ldr	r0, [r7, #8]
    67f0:	6862      	ldr	r2, [r4, #4]
    67f2:	7901      	ldrb	r1, [r0, #4]
    67f4:	f001 0107 	and.w	r1, r1, #7
    67f8:	f882 1062 	strb.w	r1, [r2, #98]	; 0x62
    67fc:	7940      	ldrb	r0, [r0, #5]
    67fe:	f000 0107 	and.w	r1, r0, #7
    6802:	6860      	ldr	r0, [r4, #4]
    6804:	f880 1063 	strb.w	r1, [r0, #99]	; 0x63
    6808:	6860      	ldr	r0, [r4, #4]
    680a:	f890 2145 	ldrb.w	r2, [r0, #325]	; 0x145
    680e:	f88d 200c 	strb.w	r2, [sp, #12]
    6812:	9a03      	ldr	r2, [sp, #12]
    6814:	9203      	str	r2, [sp, #12]
    6816:	f89d 200c 	ldrb.w	r2, [sp, #12]
    681a:	bb5a      	cbnz	r2, 6874 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11a8>
    681c:	e004      	b.n	6828 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x115c>
    681e:	2000      	movs	r0, #0
    6820:	f7ff feae 	bl	6580 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xeb4>
    6824:	4680      	mov	r8, r0
    6826:	e02f      	b.n	6888 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11bc>
    6828:	f890 2144 	ldrb.w	r2, [r0, #324]	; 0x144
    682c:	2a01      	cmp	r2, #1
    682e:	d021      	beq.n	6874 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11a8>
    6830:	f100 026a 	add.w	r2, r0, #106	; 0x6a
    6834:	f890 3062 	ldrb.w	r3, [r0, #98]	; 0x62
    6838:	7857      	ldrb	r7, [r2, #1]
    683a:	429f      	cmp	r7, r3
    683c:	d106      	bne.n	684c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1180>
    683e:	7812      	ldrb	r2, [r2, #0]
    6840:	428a      	cmp	r2, r1
    6842:	d103      	bne.n	684c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1180>
    6844:	2102      	movs	r1, #2
    6846:	f880 1144 	strb.w	r1, [r0, #324]	; 0x144
    684a:	e013      	b.n	6874 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11a8>
    684c:	480f      	ldr	r0, [pc, #60]	; (688c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11c0>)
    684e:	300c      	adds	r0, #12
    6850:	6841      	ldr	r1, [r0, #4]
    6852:	f501 70cf 	add.w	r0, r1, #414	; 0x19e
    6856:	880a      	ldrh	r2, [r1, #0]
    6858:	f820 2b02 	strh.w	r2, [r0], #2
    685c:	f891 2062 	ldrb.w	r2, [r1, #98]	; 0x62
    6860:	f800 2b01 	strb.w	r2, [r0], #1
    6864:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    6868:	f800 190d 	strb.w	r1, [r0], #-13
    686c:	2222      	movs	r2, #34	; 0x22
    686e:	4908      	ldr	r1, [pc, #32]	; (6890 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11c4>)
    6870:	f007 fc55 	bl	e11e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    6874:	6861      	ldr	r1, [r4, #4]
    6876:	2022      	movs	r0, #34	; 0x22
    6878:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    687c:	6860      	ldr	r0, [r4, #4]
    687e:	f880 50e4 	strb.w	r5, [r0, #228]	; 0xe4
    6882:	6860      	ldr	r0, [r4, #4]
    6884:	f8a0 60e2 	strh.w	r6, [r0, #226]	; 0xe2
    6888:	4640      	mov	r0, r8
    688a:	e78a      	b.n	67a2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10d6>
    688c:	200000e4 	.word	0x200000e4
    6890:	000101b3 	.word	0x000101b3
    6894:	b570      	push	{r4, r5, r6, lr}
    6896:	4604      	mov	r4, r0
    6898:	6840      	ldr	r0, [r0, #4]
    689a:	f890 00a5 	ldrb.w	r0, [r0, #165]	; 0xa5
    689e:	2820      	cmp	r0, #32
    68a0:	d001      	beq.n	68a6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11da>
    68a2:	2001      	movs	r0, #1
    68a4:	bd70      	pop	{r4, r5, r6, pc}
    68a6:	4e16      	ldr	r6, [pc, #88]	; (6900 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1234>)
    68a8:	68b0      	ldr	r0, [r6, #8]
    68aa:	f007 fbf3 	bl	e094 <sym_V2EAB4QFEU4UUAXJWVWPATMDA5XIHPNUG5SNJCQ>
    68ae:	b1f0      	cbz	r0, 68ee <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1222>
    68b0:	68b0      	ldr	r0, [r6, #8]
    68b2:	6862      	ldr	r2, [r4, #4]
    68b4:	7901      	ldrb	r1, [r0, #4]
    68b6:	7940      	ldrb	r0, [r0, #5]
    68b8:	f001 0107 	and.w	r1, r1, #7
    68bc:	f361 0507 	bfi	r5, r1, #0, #8
    68c0:	4629      	mov	r1, r5
    68c2:	f000 0007 	and.w	r0, r0, #7
    68c6:	f360 210f 	bfi	r1, r0, #8, #8
    68ca:	2001      	movs	r0, #1
    68cc:	f882 00e0 	strb.w	r0, [r2, #224]	; 0xe0
    68d0:	6862      	ldr	r2, [r4, #4]
    68d2:	2000      	movs	r0, #0
    68d4:	f8a2 00dc 	strh.w	r0, [r2, #220]	; 0xdc
    68d8:	6862      	ldr	r2, [r4, #4]
    68da:	2024      	movs	r0, #36	; 0x24
    68dc:	f882 00a5 	strb.w	r0, [r2, #165]	; 0xa5
    68e0:	6860      	ldr	r0, [r4, #4]
    68e2:	f8d0 0146 	ldr.w	r0, [r0, #326]	; 0x146
    68e6:	f7ff fdf7 	bl	64d8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe0c>
    68ea:	2000      	movs	r0, #0
    68ec:	bd70      	pop	{r4, r5, r6, pc}
    68ee:	2001      	movs	r0, #1
    68f0:	f7ff fe46 	bl	6580 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xeb4>
    68f4:	4604      	mov	r4, r0
    68f6:	201e      	movs	r0, #30
    68f8:	f7ff fdb6 	bl	6468 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd9c>
    68fc:	4620      	mov	r0, r4
    68fe:	bd70      	pop	{r4, r5, r6, pc}
    6900:	200000e4 	.word	0x200000e4
    6904:	b570      	push	{r4, r5, r6, lr}
    6906:	4604      	mov	r4, r0
    6908:	6840      	ldr	r0, [r0, #4]
    690a:	4d0a      	ldr	r5, [pc, #40]	; (6934 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1268>)
    690c:	f810 1ff6 	ldrb.w	r1, [r0, #246]!
    6910:	f041 0104 	orr.w	r1, r1, #4
    6914:	7001      	strb	r1, [r0, #0]
    6916:	68a8      	ldr	r0, [r5, #8]
    6918:	f007 fbc6 	bl	e0a8 <sym_65MVSHFHYY3W6LGERKUEYJPJ7ENCODZZSM2L7CQ>
    691c:	4606      	mov	r6, r0
    691e:	68a8      	ldr	r0, [r5, #8]
    6920:	f007 fbc6 	bl	e0b0 <sym_MR2HDMT6FMX7P5HJAUSXDTOYNLKDM5AILMXKYDY>
    6924:	4601      	mov	r1, r0
    6926:	4622      	mov	r2, r4
    6928:	4630      	mov	r0, r6
    692a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    692e:	f000 b8b3 	b.w	6a98 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13cc>
    6932:	0000      	.short	0x0000
    6934:	200000e4 	.word	0x200000e4
    6938:	4a11      	ldr	r2, [pc, #68]	; (6980 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12b4>)
    693a:	4911      	ldr	r1, [pc, #68]	; (6980 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12b4>)
    693c:	320c      	adds	r2, #12
    693e:	6852      	ldr	r2, [r2, #4]
    6940:	6889      	ldr	r1, [r1, #8]
    6942:	f892 30a5 	ldrb.w	r3, [r2, #165]	; 0xa5
    6946:	7909      	ldrb	r1, [r1, #4]
    6948:	f1a3 0210 	sub.w	r2, r3, #16
    694c:	2a0c      	cmp	r2, #12
    694e:	d801      	bhi.n	6954 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1288>
    6950:	2303      	movs	r3, #3
    6952:	e008      	b.n	6966 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x129a>
    6954:	2b28      	cmp	r3, #40	; 0x28
    6956:	d00a      	beq.n	696e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12a2>
    6958:	2b1d      	cmp	r3, #29
    695a:	d00a      	beq.n	6972 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12a6>
    695c:	2b05      	cmp	r3, #5
    695e:	d00a      	beq.n	6976 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12aa>
    6960:	2b20      	cmp	r3, #32
    6962:	d00a      	beq.n	697a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12ae>
    6964:	23fe      	movs	r3, #254	; 0xfe
    6966:	4602      	mov	r2, r0
    6968:	4618      	mov	r0, r3
    696a:	f000 b895 	b.w	6a98 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13cc>
    696e:	2323      	movs	r3, #35	; 0x23
    6970:	e7f9      	b.n	6966 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x129a>
    6972:	2314      	movs	r3, #20
    6974:	e7f7      	b.n	6966 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x129a>
    6976:	2312      	movs	r3, #18
    6978:	e7f5      	b.n	6966 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x129a>
    697a:	2316      	movs	r3, #22
    697c:	e7f3      	b.n	6966 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x129a>
    697e:	0000      	.short	0x0000
    6980:	200000e4 	.word	0x200000e4
    6984:	b570      	push	{r4, r5, r6, lr}
    6986:	4604      	mov	r4, r0
    6988:	6840      	ldr	r0, [r0, #4]
    698a:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    698e:	291b      	cmp	r1, #27
    6990:	d001      	beq.n	6996 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12ca>
    6992:	2002      	movs	r0, #2
    6994:	bd70      	pop	{r4, r5, r6, pc}
    6996:	2500      	movs	r5, #0
    6998:	f880 50e5 	strb.w	r5, [r0, #229]	; 0xe5
    699c:	6860      	ldr	r0, [r4, #4]
    699e:	f880 50e0 	strb.w	r5, [r0, #224]	; 0xe0
    69a2:	6860      	ldr	r0, [r4, #4]
    69a4:	f880 5278 	strb.w	r5, [r0, #632]	; 0x278
    69a8:	6860      	ldr	r0, [r4, #4]
    69aa:	f890 10e6 	ldrb.w	r1, [r0, #230]	; 0xe6
    69ae:	b161      	cbz	r1, 69ca <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12fe>
    69b0:	f880 50e6 	strb.w	r5, [r0, #230]	; 0xe6
    69b4:	6860      	ldr	r0, [r4, #4]
    69b6:	220d      	movs	r2, #13
    69b8:	8801      	ldrh	r1, [r0, #0]
    69ba:	f8a0 121e 	strh.w	r1, [r0, #542]	; 0x21e
    69be:	6860      	ldr	r0, [r4, #4]
    69c0:	490d      	ldr	r1, [pc, #52]	; (69f8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x132c>)
    69c2:	f880 521c 	strb.w	r5, [r0, #540]	; 0x21c
    69c6:	6860      	ldr	r0, [r4, #4]
    69c8:	e00c      	b.n	69e4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1318>
    69ca:	8801      	ldrh	r1, [r0, #0]
    69cc:	f8a0 121e 	strh.w	r1, [r0, #542]	; 0x21e
    69d0:	6860      	ldr	r0, [r4, #4]
    69d2:	f880 521c 	strb.w	r5, [r0, #540]	; 0x21c
    69d6:	6861      	ldr	r1, [r4, #4]
    69d8:	2001      	movs	r0, #1
    69da:	220c      	movs	r2, #12
    69dc:	f881 0220 	strb.w	r0, [r1, #544]	; 0x220
    69e0:	4906      	ldr	r1, [pc, #24]	; (69fc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1330>)
    69e2:	6860      	ldr	r0, [r4, #4]
    69e4:	f200 2012 	addw	r0, r0, #530	; 0x212
    69e8:	f007 fb99 	bl	e11e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    69ec:	6860      	ldr	r0, [r4, #4]
    69ee:	f880 50a5 	strb.w	r5, [r0, #165]	; 0xa5
    69f2:	2000      	movs	r0, #0
    69f4:	bd70      	pop	{r4, r5, r6, pc}
    69f6:	0000      	.short	0x0000
    69f8:	0000e5bf 	.word	0x0000e5bf
    69fc:	0000e5a1 	.word	0x0000e5a1
    6a00:	b510      	push	{r4, lr}
    6a02:	4604      	mov	r4, r0
    6a04:	6840      	ldr	r0, [r0, #4]
    6a06:	2300      	movs	r3, #0
    6a08:	2101      	movs	r1, #1
    6a0a:	f890 20a7 	ldrb.w	r2, [r0, #167]	; 0xa7
    6a0e:	3088      	adds	r0, #136	; 0x88
    6a10:	f007 f874 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6a14:	b108      	cbz	r0, 6a1a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x134e>
    6a16:	2000      	movs	r0, #0
    6a18:	bd10      	pop	{r4, pc}
    6a1a:	4809      	ldr	r0, [pc, #36]	; (6a40 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1374>)
    6a1c:	6880      	ldr	r0, [r0, #8]
    6a1e:	f007 fb63 	bl	e0e8 <sym_AFBV6ZWWJ5TP5BBQPAY4D2XGGYVLQVI65FY6JPY>
    6a22:	6861      	ldr	r1, [r4, #4]
    6a24:	f881 00a8 	strb.w	r0, [r1, #168]	; 0xa8
    6a28:	6861      	ldr	r1, [r4, #4]
    6a2a:	2006      	movs	r0, #6
    6a2c:	f881 00a7 	strb.w	r0, [r1, #167]	; 0xa7
    6a30:	6861      	ldr	r1, [r4, #4]
    6a32:	2000      	movs	r0, #0
    6a34:	f881 00e4 	strb.w	r0, [r1, #228]	; 0xe4
    6a38:	6861      	ldr	r1, [r4, #4]
    6a3a:	f881 00e0 	strb.w	r0, [r1, #224]	; 0xe0
    6a3e:	e7ea      	b.n	6a16 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x134a>
    6a40:	200000e4 	.word	0x200000e4
    6a44:	4602      	mov	r2, r0
    6a46:	480f      	ldr	r0, [pc, #60]	; (6a84 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13b8>)
    6a48:	b510      	push	{r4, lr}
    6a4a:	6880      	ldr	r0, [r0, #8]
    6a4c:	6851      	ldr	r1, [r2, #4]
    6a4e:	2400      	movs	r4, #0
    6a50:	7900      	ldrb	r0, [r0, #4]
    6a52:	f891 10a5 	ldrb.w	r1, [r1, #165]	; 0xa5
    6a56:	2812      	cmp	r0, #18
    6a58:	d006      	beq.n	6a68 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x139c>
    6a5a:	2814      	cmp	r0, #20
    6a5c:	d004      	beq.n	6a68 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x139c>
    6a5e:	2816      	cmp	r0, #22
    6a60:	d002      	beq.n	6a68 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x139c>
    6a62:	2823      	cmp	r0, #35	; 0x23
    6a64:	d10c      	bne.n	6a80 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13b4>
    6a66:	e004      	b.n	6a72 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13a6>
    6a68:	2101      	movs	r1, #1
    6a6a:	f000 f91d 	bl	6ca8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x15dc>
    6a6e:	4604      	mov	r4, r0
    6a70:	e006      	b.n	6a80 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13b4>
    6a72:	2928      	cmp	r1, #40	; 0x28
    6a74:	d104      	bne.n	6a80 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13b4>
    6a76:	4804      	ldr	r0, [pc, #16]	; (6a88 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13bc>)
    6a78:	6801      	ldr	r1, [r0, #0]
    6a7a:	b109      	cbz	r1, 6a80 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13b4>
    6a7c:	4610      	mov	r0, r2
    6a7e:	4788      	blx	r1
    6a80:	4620      	mov	r0, r4
    6a82:	bd10      	pop	{r4, pc}
    6a84:	200000e4 	.word	0x200000e4
    6a88:	20000254 	.word	0x20000254
    6a8c:	4901      	ldr	r1, [pc, #4]	; (6a94 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13c8>)
    6a8e:	6889      	ldr	r1, [r1, #8]
    6a90:	f7fc ba46 	b.w	2f20 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY>
    6a94:	200000e4 	.word	0x200000e4
    6a98:	4603      	mov	r3, r0
    6a9a:	2000      	movs	r0, #0
    6a9c:	2b23      	cmp	r3, #35	; 0x23
    6a9e:	d017      	beq.n	6ad0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1404>
    6aa0:	dc0b      	bgt.n	6aba <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13ee>
    6aa2:	2b03      	cmp	r3, #3
    6aa4:	d011      	beq.n	6aca <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13fe>
    6aa6:	2b12      	cmp	r3, #18
    6aa8:	d003      	beq.n	6ab2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13e6>
    6aaa:	2b14      	cmp	r3, #20
    6aac:	d001      	beq.n	6ab2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13e6>
    6aae:	2b16      	cmp	r3, #22
    6ab0:	d10a      	bne.n	6ac8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13fc>
    6ab2:	2100      	movs	r1, #0
    6ab4:	4618      	mov	r0, r3
    6ab6:	f000 b8f7 	b.w	6ca8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x15dc>
    6aba:	2b24      	cmp	r3, #36	; 0x24
    6abc:	d008      	beq.n	6ad0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1404>
    6abe:	2b25      	cmp	r3, #37	; 0x25
    6ac0:	d006      	beq.n	6ad0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1404>
    6ac2:	2bfe      	cmp	r3, #254	; 0xfe
    6ac4:	d100      	bne.n	6ac8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13fc>
    6ac6:	2002      	movs	r0, #2
    6ac8:	4770      	bx	lr
    6aca:	4608      	mov	r0, r1
    6acc:	f7ff b846 	b.w	5b5c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x490>
    6ad0:	4a02      	ldr	r2, [pc, #8]	; (6adc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1410>)
    6ad2:	6812      	ldr	r2, [r2, #0]
    6ad4:	2a00      	cmp	r2, #0
    6ad6:	d0f7      	beq.n	6ac8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13fc>
    6ad8:	4618      	mov	r0, r3
    6ada:	4710      	bx	r2
    6adc:	20000250 	.word	0x20000250
    6ae0:	280c      	cmp	r0, #12
    6ae2:	d01a      	beq.n	6b1a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x144e>
    6ae4:	2813      	cmp	r0, #19
    6ae6:	d018      	beq.n	6b1a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x144e>
    6ae8:	2818      	cmp	r0, #24
    6aea:	d016      	beq.n	6b1a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x144e>
    6aec:	4910      	ldr	r1, [pc, #64]	; (6b30 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1464>)
    6aee:	2200      	movs	r2, #0
    6af0:	2811      	cmp	r0, #17
    6af2:	6849      	ldr	r1, [r1, #4]
    6af4:	d012      	beq.n	6b1c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1450>
    6af6:	2807      	cmp	r0, #7
    6af8:	d00f      	beq.n	6b1a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x144e>
    6afa:	2809      	cmp	r0, #9
    6afc:	d00d      	beq.n	6b1a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x144e>
    6afe:	2815      	cmp	r0, #21
    6b00:	d012      	beq.n	6b28 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x145c>
    6b02:	2824      	cmp	r0, #36	; 0x24
    6b04:	d009      	beq.n	6b1a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x144e>
    6b06:	2801      	cmp	r0, #1
    6b08:	d007      	beq.n	6b1a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x144e>
    6b0a:	2800      	cmp	r0, #0
    6b0c:	d005      	beq.n	6b1a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x144e>
    6b0e:	2802      	cmp	r0, #2
    6b10:	d003      	beq.n	6b1a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x144e>
    6b12:	f821 2fdc 	strh.w	r2, [r1, #220]!
    6b16:	2001      	movs	r0, #1
    6b18:	7108      	strb	r0, [r1, #4]
    6b1a:	4770      	bx	lr
    6b1c:	f891 0130 	ldrb.w	r0, [r1, #304]	; 0x130
    6b20:	b110      	cbz	r0, 6b28 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x145c>
    6b22:	f8a1 20dc 	strh.w	r2, [r1, #220]	; 0xdc
    6b26:	4770      	bx	lr
    6b28:	f8a1 20e2 	strh.w	r2, [r1, #226]	; 0xe2
    6b2c:	4770      	bx	lr
    6b2e:	0000      	.short	0x0000
    6b30:	200000f0 	.word	0x200000f0
    6b34:	4904      	ldr	r1, [pc, #16]	; (6b48 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x147c>)
    6b36:	2000      	movs	r0, #0
    6b38:	6849      	ldr	r1, [r1, #4]
    6b3a:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    6b3e:	f8a1 00dc 	strh.w	r0, [r1, #220]	; 0xdc
    6b42:	f881 00e0 	strb.w	r0, [r1, #224]	; 0xe0
    6b46:	4770      	bx	lr
    6b48:	200000f0 	.word	0x200000f0
    6b4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6b50:	4d53      	ldr	r5, [pc, #332]	; (6ca0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x15d4>)
    6b52:	4680      	mov	r8, r0
    6b54:	460f      	mov	r7, r1
    6b56:	6868      	ldr	r0, [r5, #4]
    6b58:	f100 0488 	add.w	r4, r0, #136	; 0x88
    6b5c:	f890 0138 	ldrb.w	r0, [r0, #312]	; 0x138
    6b60:	f88d 0000 	strb.w	r0, [sp]
    6b64:	9800      	ldr	r0, [sp, #0]
    6b66:	9000      	str	r0, [sp, #0]
    6b68:	f89d 0000 	ldrb.w	r0, [sp]
    6b6c:	2600      	movs	r6, #0
    6b6e:	b930      	cbnz	r0, 6b7e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x14b2>
    6b70:	7fe2      	ldrb	r2, [r4, #31]
    6b72:	2300      	movs	r3, #0
    6b74:	2101      	movs	r1, #1
    6b76:	4620      	mov	r0, r4
    6b78:	f006 ffc0 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6b7c:	b120      	cbz	r0, 6b88 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x14bc>
    6b7e:	f8b4 0052 	ldrh.w	r0, [r4, #82]	; 0x52
    6b82:	1c40      	adds	r0, r0, #1
    6b84:	f8a4 0052 	strh.w	r0, [r4, #82]	; 0x52
    6b88:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
    6b8c:	b121      	cbz	r1, 6b98 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x14cc>
    6b8e:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
    6b92:	1c40      	adds	r0, r0, #1
    6b94:	f8a4 0054 	strh.w	r0, [r4, #84]	; 0x54
    6b98:	f994 005c 	ldrsb.w	r0, [r4, #92]	; 0x5c
    6b9c:	b120      	cbz	r0, 6ba8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x14dc>
    6b9e:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
    6ba2:	1c52      	adds	r2, r2, #1
    6ba4:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
    6ba8:	f1b8 0f00 	cmp.w	r8, #0
    6bac:	d114      	bne.n	6bd8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x150c>
    6bae:	4a3c      	ldr	r2, [pc, #240]	; (6ca0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x15d4>)
    6bb0:	3a0c      	subs	r2, #12
    6bb2:	7812      	ldrb	r2, [r2, #0]
    6bb4:	2a02      	cmp	r2, #2
    6bb6:	d006      	beq.n	6bc6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x14fa>
    6bb8:	2a01      	cmp	r2, #1
    6bba:	d006      	beq.n	6bca <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x14fe>
    6bbc:	b1df      	cbz	r7, 6bf6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x152a>
    6bbe:	06f8      	lsls	r0, r7, #27
    6bc0:	d508      	bpl.n	6bd4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1508>
    6bc2:	201e      	movs	r0, #30
    6bc4:	e043      	b.n	6c4e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1582>
    6bc6:	2016      	movs	r0, #22
    6bc8:	e041      	b.n	6c4e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1582>
    6bca:	6868      	ldr	r0, [r5, #4]
    6bcc:	f890 00a8 	ldrb.w	r0, [r0, #168]	; 0xa8
    6bd0:	bba0      	cbnz	r0, 6c3c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1570>
    6bd2:	e05e      	b.n	6c92 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x15c6>
    6bd4:	0738      	lsls	r0, r7, #28
    6bd6:	d501      	bpl.n	6bdc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1510>
    6bd8:	203d      	movs	r0, #61	; 0x3d
    6bda:	e038      	b.n	6c4e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1582>
    6bdc:	07b8      	lsls	r0, r7, #30
    6bde:	d001      	beq.n	6be4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1518>
    6be0:	202a      	movs	r0, #42	; 0x2a
    6be2:	e034      	b.n	6c4e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1582>
    6be4:	06b8      	lsls	r0, r7, #26
    6be6:	d404      	bmi.n	6bf2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1526>
    6be8:	f640 515f 	movw	r1, #3423	; 0xd5f
    6bec:	2036      	movs	r0, #54	; 0x36
    6bee:	f7f9 ff39 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6bf2:	2023      	movs	r0, #35	; 0x23
    6bf4:	e02b      	b.n	6c4e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1582>
    6bf6:	b129      	cbz	r1, 6c04 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1538>
    6bf8:	f8b4 1054 	ldrh.w	r1, [r4, #84]	; 0x54
    6bfc:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
    6c00:	4291      	cmp	r1, r2
    6c02:	d81a      	bhi.n	6c3a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x156e>
    6c04:	b128      	cbz	r0, 6c12 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1546>
    6c06:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
    6c0a:	f8b4 1056 	ldrh.w	r1, [r4, #86]	; 0x56
    6c0e:	4288      	cmp	r0, r1
    6c10:	d813      	bhi.n	6c3a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x156e>
    6c12:	f8b4 1052 	ldrh.w	r1, [r4, #82]	; 0x52
    6c16:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
    6c1a:	4281      	cmp	r1, r0
    6c1c:	d309      	bcc.n	6c32 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1566>
    6c1e:	686a      	ldr	r2, [r5, #4]
    6c20:	f892 2138 	ldrb.w	r2, [r2, #312]	; 0x138
    6c24:	f88d 2000 	strb.w	r2, [sp]
    6c28:	9a00      	ldr	r2, [sp, #0]
    6c2a:	9200      	str	r2, [sp, #0]
    6c2c:	f89d 2000 	ldrb.w	r2, [sp]
    6c30:	b91a      	cbnz	r2, 6c3a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x156e>
    6c32:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
    6c36:	4291      	cmp	r1, r2
    6c38:	d301      	bcc.n	6c3e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1572>
    6c3a:	2022      	movs	r0, #34	; 0x22
    6c3c:	e007      	b.n	6c4e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1582>
    6c3e:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
    6c42:	b301      	cbz	r1, 6c86 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x15ba>
    6c44:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
    6c48:	4281      	cmp	r1, r0
    6c4a:	d322      	bcc.n	6c92 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x15c6>
    6c4c:	2008      	movs	r0, #8
    6c4e:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    6c52:	220b      	movs	r2, #11
    6c54:	4913      	ldr	r1, [pc, #76]	; (6ca4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x15d8>)
    6c56:	f104 0034 	add.w	r0, r4, #52	; 0x34
    6c5a:	f007 fa60 	bl	e11e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    6c5e:	7766      	strb	r6, [r4, #29]
    6c60:	77a6      	strb	r6, [r4, #30]
    6c62:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
    6c66:	2102      	movs	r1, #2
    6c68:	6868      	ldr	r0, [r5, #4]
    6c6a:	f007 ff7b 	bl	eb64 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    6c6e:	6868      	ldr	r0, [r5, #4]
    6c70:	f890 112e 	ldrb.w	r1, [r0, #302]	; 0x12e
    6c74:	2901      	cmp	r1, #1
    6c76:	d104      	bne.n	6c82 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x15b6>
    6c78:	f8d0 0258 	ldr.w	r0, [r0, #600]	; 0x258
    6c7c:	7801      	ldrb	r1, [r0, #0]
    6c7e:	1e49      	subs	r1, r1, #1
    6c80:	7001      	strb	r1, [r0, #0]
    6c82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6c86:	f8b4 004e 	ldrh.w	r0, [r4, #78]	; 0x4e
    6c8a:	2806      	cmp	r0, #6
    6c8c:	d301      	bcc.n	6c92 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x15c6>
    6c8e:	203e      	movs	r0, #62	; 0x3e
    6c90:	e7dd      	b.n	6c4e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1582>
    6c92:	6868      	ldr	r0, [r5, #4]
    6c94:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6c98:	2100      	movs	r1, #0
    6c9a:	f007 bf63 	b.w	eb64 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    6c9e:	0000      	.short	0x0000
    6ca0:	200000f0 	.word	0x200000f0
    6ca4:	0000e51f 	.word	0x0000e51f
    6ca8:	b570      	push	{r4, r5, r6, lr}
    6caa:	460e      	mov	r6, r1
    6cac:	4601      	mov	r1, r0
    6cae:	6850      	ldr	r0, [r2, #4]
    6cb0:	4614      	mov	r4, r2
    6cb2:	2500      	movs	r5, #0
    6cb4:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    6cb8:	481d      	ldr	r0, [pc, #116]	; (6d30 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1664>)
    6cba:	6840      	ldr	r0, [r0, #4]
    6cbc:	3088      	adds	r0, #136	; 0x88
    6cbe:	2912      	cmp	r1, #18
    6cc0:	d008      	beq.n	6cd4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1608>
    6cc2:	2914      	cmp	r1, #20
    6cc4:	d010      	beq.n	6ce8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x161c>
    6cc6:	2916      	cmp	r1, #22
    6cc8:	d01e      	beq.n	6d08 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x163c>
    6cca:	f240 613e 	movw	r1, #1598	; 0x63e
    6cce:	2036      	movs	r0, #54	; 0x36
    6cd0:	f7f9 fec8 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6cd4:	2109      	movs	r1, #9
    6cd6:	2300      	movs	r3, #0
    6cd8:	f006 ff10 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6cdc:	b330      	cbz	r0, 6d2c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1660>
    6cde:	4620      	mov	r0, r4
    6ce0:	f008 f8e5 	bl	eeae <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xb2>
    6ce4:	4605      	mov	r5, r0
    6ce6:	e021      	b.n	6d2c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1660>
    6ce8:	210a      	movs	r1, #10
    6cea:	2300      	movs	r3, #0
    6cec:	f006 ff06 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6cf0:	b1e0      	cbz	r0, 6d2c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1660>
    6cf2:	f7ff ff1f 	bl	6b34 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1468>
    6cf6:	b126      	cbz	r6, 6d02 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1636>
    6cf8:	6860      	ldr	r0, [r4, #4]
    6cfa:	2105      	movs	r1, #5
    6cfc:	30f6      	adds	r0, #246	; 0xf6
    6cfe:	f008 f86f 	bl	ede0 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x206>
    6d02:	f7fe ff17 	bl	5b34 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x468>
    6d06:	e011      	b.n	6d2c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1660>
    6d08:	2a20      	cmp	r2, #32
    6d0a:	d10f      	bne.n	6d2c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1660>
    6d0c:	f7ff ff12 	bl	6b34 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1468>
    6d10:	b14e      	cbz	r6, 6d26 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x165a>
    6d12:	6860      	ldr	r0, [r4, #4]
    6d14:	2108      	movs	r1, #8
    6d16:	30f6      	adds	r0, #246	; 0xf6
    6d18:	f008 f862 	bl	ede0 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x206>
    6d1c:	6860      	ldr	r0, [r4, #4]
    6d1e:	210b      	movs	r1, #11
    6d20:	30f6      	adds	r0, #246	; 0xf6
    6d22:	f008 f85d 	bl	ede0 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x206>
    6d26:	201a      	movs	r0, #26
    6d28:	f7ff fb9e 	bl	6468 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd9c>
    6d2c:	4628      	mov	r0, r5
    6d2e:	bd70      	pop	{r4, r5, r6, pc}
    6d30:	200000f0 	.word	0x200000f0
    6d34:	4a19      	ldr	r2, [pc, #100]	; (6d9c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x16d0>)
    6d36:	2901      	cmp	r1, #1
    6d38:	6852      	ldr	r2, [r2, #4]
    6d3a:	d010      	beq.n	6d5e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1692>
    6d3c:	2100      	movs	r1, #0
    6d3e:	b1c8      	cbz	r0, 6d74 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x16a8>
    6d40:	2801      	cmp	r0, #1
    6d42:	d022      	beq.n	6d8a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x16be>
    6d44:	2803      	cmp	r0, #3
    6d46:	d109      	bne.n	6d5c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1690>
    6d48:	f892 00a5 	ldrb.w	r0, [r2, #165]	; 0xa5
    6d4c:	2814      	cmp	r0, #20
    6d4e:	d005      	beq.n	6d5c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1690>
    6d50:	2817      	cmp	r0, #23
    6d52:	d003      	beq.n	6d5c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1690>
    6d54:	2819      	cmp	r0, #25
    6d56:	d001      	beq.n	6d5c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1690>
    6d58:	f882 1278 	strb.w	r1, [r2, #632]	; 0x278
    6d5c:	4770      	bx	lr
    6d5e:	f892 012e 	ldrb.w	r0, [r2, #302]	; 0x12e
    6d62:	2801      	cmp	r0, #1
    6d64:	d0fa      	beq.n	6d5c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1690>
    6d66:	bf00      	nop
    6d68:	f8d2 0258 	ldr.w	r0, [r2, #600]	; 0x258
    6d6c:	7801      	ldrb	r1, [r0, #0]
    6d6e:	1e49      	subs	r1, r1, #1
    6d70:	7001      	strb	r1, [r0, #0]
    6d72:	4770      	bx	lr
    6d74:	f8b2 009c 	ldrh.w	r0, [r2, #156]	; 0x9c
    6d78:	f8b2 3266 	ldrh.w	r3, [r2, #614]	; 0x266
    6d7c:	1ac0      	subs	r0, r0, r3
    6d7e:	b200      	sxth	r0, r0
    6d80:	2800      	cmp	r0, #0
    6d82:	dbf6      	blt.n	6d72 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x16a6>
    6d84:	f882 1264 	strb.w	r1, [r2, #612]	; 0x264
    6d88:	4770      	bx	lr
    6d8a:	f8b2 009c 	ldrh.w	r0, [r2, #156]	; 0x9c
    6d8e:	f8b2 125e 	ldrh.w	r1, [r2, #606]	; 0x25e
    6d92:	1a40      	subs	r0, r0, r1
    6d94:	b200      	sxth	r0, r0
    6d96:	2800      	cmp	r0, #0
    6d98:	dae6      	bge.n	6d68 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x169c>
    6d9a:	4770      	bx	lr
    6d9c:	200000f0 	.word	0x200000f0

00006da0 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ>:
    6da0:	b510      	push	{r4, lr}
    6da2:	6981      	ldr	r1, [r0, #24]
    6da4:	b119      	cbz	r1, 6dae <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0xe>
    6da6:	6882      	ldr	r2, [r0, #8]
    6da8:	688b      	ldr	r3, [r1, #8]
    6daa:	429a      	cmp	r2, r3
    6dac:	d203      	bcs.n	6db6 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x16>
    6dae:	21c0      	movs	r1, #192	; 0xc0
    6db0:	2037      	movs	r0, #55	; 0x37
    6db2:	f7f9 fe57 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6db6:	6942      	ldr	r2, [r0, #20]
    6db8:	614a      	str	r2, [r1, #20]
    6dba:	6903      	ldr	r3, [r0, #16]
    6dbc:	610b      	str	r3, [r1, #16]
    6dbe:	b10a      	cbz	r2, 6dc4 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x24>
    6dc0:	6111      	str	r1, [r2, #16]
    6dc2:	e001      	b.n	6dc8 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x28>
    6dc4:	4a06      	ldr	r2, [pc, #24]	; (6de0 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x40>)
    6dc6:	6011      	str	r1, [r2, #0]
    6dc8:	690a      	ldr	r2, [r1, #16]
    6dca:	b132      	cbz	r2, 6dda <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x3a>
    6dcc:	6151      	str	r1, [r2, #20]
    6dce:	e9d0 2002 	ldrd	r2, r0, [r0, #8]
    6dd2:	4410      	add	r0, r2
    6dd4:	688a      	ldr	r2, [r1, #8]
    6dd6:	1a80      	subs	r0, r0, r2
    6dd8:	e000      	b.n	6ddc <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x3c>
    6dda:	2000      	movs	r0, #0
    6ddc:	60c8      	str	r0, [r1, #12]
    6dde:	bd10      	pop	{r4, pc}
    6de0:	20000258 	.word	0x20000258

00006de4 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>:
    6de4:	b510      	push	{r4, lr}
    6de6:	2200      	movs	r2, #0
    6de8:	6141      	str	r1, [r0, #20]
    6dea:	b189      	cbz	r1, 6e10 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x2c>
    6dec:	690b      	ldr	r3, [r1, #16]
    6dee:	6108      	str	r0, [r1, #16]
    6df0:	6103      	str	r3, [r0, #16]
    6df2:	b103      	cbz	r3, 6df6 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x12>
    6df4:	6158      	str	r0, [r3, #20]
    6df6:	6941      	ldr	r1, [r0, #20]
    6df8:	60c2      	str	r2, [r0, #12]
    6dfa:	2900      	cmp	r1, #0
    6dfc:	d00f      	beq.n	6e1e <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x3a>
    6dfe:	68cb      	ldr	r3, [r1, #12]
    6e00:	b163      	cbz	r3, 6e1c <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x38>
    6e02:	6884      	ldr	r4, [r0, #8]
    6e04:	42a3      	cmp	r3, r4
    6e06:	d207      	bcs.n	6e18 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x34>
    6e08:	212b      	movs	r1, #43	; 0x2b
    6e0a:	2037      	movs	r0, #55	; 0x37
    6e0c:	f7f9 fe2a 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6e10:	4903      	ldr	r1, [pc, #12]	; (6e20 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x3c>)
    6e12:	6102      	str	r2, [r0, #16]
    6e14:	6008      	str	r0, [r1, #0]
    6e16:	e7ee      	b.n	6df6 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x12>
    6e18:	1b1b      	subs	r3, r3, r4
    6e1a:	60c3      	str	r3, [r0, #12]
    6e1c:	60ca      	str	r2, [r1, #12]
    6e1e:	bd10      	pop	{r4, pc}
    6e20:	20000258 	.word	0x20000258

00006e24 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>:
    6e24:	6941      	ldr	r1, [r0, #20]
    6e26:	b149      	cbz	r1, 6e3c <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x18>
    6e28:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    6e2c:	441a      	add	r2, r3
    6e2e:	68cb      	ldr	r3, [r1, #12]
    6e30:	441a      	add	r2, r3
    6e32:	60ca      	str	r2, [r1, #12]
    6e34:	e9d0 1204 	ldrd	r1, r2, [r0, #16]
    6e38:	6111      	str	r1, [r2, #16]
    6e3a:	e002      	b.n	6e42 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x1e>
    6e3c:	4a06      	ldr	r2, [pc, #24]	; (6e58 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x34>)
    6e3e:	6901      	ldr	r1, [r0, #16]
    6e40:	6011      	str	r1, [r2, #0]
    6e42:	e9d0 1004 	ldrd	r1, r0, [r0, #16]
    6e46:	b109      	cbz	r1, 6e4c <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x28>
    6e48:	6148      	str	r0, [r1, #20]
    6e4a:	4770      	bx	lr
    6e4c:	2800      	cmp	r0, #0
    6e4e:	d0fc      	beq.n	6e4a <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x26>
    6e50:	2100      	movs	r1, #0
    6e52:	60c1      	str	r1, [r0, #12]
    6e54:	4770      	bx	lr
    6e56:	0000      	.short	0x0000
    6e58:	20000258 	.word	0x20000258

00006e5c <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI>:
    6e5c:	b510      	push	{r4, lr}
    6e5e:	4604      	mov	r4, r0
    6e60:	490a      	ldr	r1, [pc, #40]	; (6e8c <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x30>)
    6e62:	2000      	movs	r0, #0
    6e64:	4602      	mov	r2, r0
    6e66:	6809      	ldr	r1, [r1, #0]
    6e68:	1e43      	subs	r3, r0, #1
    6e6a:	e008      	b.n	6e7e <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x22>
    6e6c:	68ca      	ldr	r2, [r1, #12]
    6e6e:	42a2      	cmp	r2, r4
    6e70:	d303      	bcc.n	6e7a <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x1e>
    6e72:	429a      	cmp	r2, r3
    6e74:	d201      	bcs.n	6e7a <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x1e>
    6e76:	4613      	mov	r3, r2
    6e78:	4608      	mov	r0, r1
    6e7a:	460a      	mov	r2, r1
    6e7c:	6909      	ldr	r1, [r1, #16]
    6e7e:	2900      	cmp	r1, #0
    6e80:	d1f4      	bne.n	6e6c <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x10>
    6e82:	2800      	cmp	r0, #0
    6e84:	d100      	bne.n	6e88 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x2c>
    6e86:	4610      	mov	r0, r2
    6e88:	bd10      	pop	{r4, pc}
    6e8a:	0000      	.short	0x0000
    6e8c:	20000258 	.word	0x20000258

00006e90 <sym_KN3K6STNQWQWR2LORBLVX4RFT5RXJO5L5JNKV4I>:
    6e90:	4801      	ldr	r0, [pc, #4]	; (6e98 <sym_KN3K6STNQWQWR2LORBLVX4RFT5RXJO5L5JNKV4I+0x8>)
    6e92:	6800      	ldr	r0, [r0, #0]
    6e94:	4770      	bx	lr
    6e96:	0000      	.short	0x0000
    6e98:	20000258 	.word	0x20000258

00006e9c <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ>:
    6e9c:	4804      	ldr	r0, [pc, #16]	; (6eb0 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0x14>)
    6e9e:	6801      	ldr	r1, [r0, #0]
    6ea0:	2000      	movs	r0, #0
    6ea2:	e001      	b.n	6ea8 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0xc>
    6ea4:	4608      	mov	r0, r1
    6ea6:	6909      	ldr	r1, [r1, #16]
    6ea8:	2900      	cmp	r1, #0
    6eaa:	d1fb      	bne.n	6ea4 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0x8>
    6eac:	4770      	bx	lr
    6eae:	0000      	.short	0x0000
    6eb0:	20000258 	.word	0x20000258

00006eb4 <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA>:
    6eb4:	4801      	ldr	r0, [pc, #4]	; (6ebc <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA+0x8>)
    6eb6:	2100      	movs	r1, #0
    6eb8:	6001      	str	r1, [r0, #0]
    6eba:	4770      	bx	lr
    6ebc:	20000258 	.word	0x20000258

00006ec0 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ>:
    6ec0:	4903      	ldr	r1, [pc, #12]	; (6ed0 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ+0x10>)
    6ec2:	2000      	movs	r0, #0
    6ec4:	6809      	ldr	r1, [r1, #0]
    6ec6:	2900      	cmp	r1, #0
    6ec8:	d000      	beq.n	6ecc <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ+0xc>
    6eca:	200c      	movs	r0, #12
    6ecc:	4770      	bx	lr
    6ece:	0000      	.short	0x0000
    6ed0:	20000258 	.word	0x20000258

00006ed4 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI>:
    6ed4:	b570      	push	{r4, r5, r6, lr}
    6ed6:	6844      	ldr	r4, [r0, #4]
    6ed8:	220d      	movs	r2, #13
    6eda:	f504 759c 	add.w	r5, r4, #312	; 0x138
    6ede:	2100      	movs	r1, #0
    6ee0:	f104 0078 	add.w	r0, r4, #120	; 0x78
    6ee4:	f009 fc3d 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6ee8:	f44f 70a7 	mov.w	r0, #334	; 0x14e
    6eec:	2100      	movs	r1, #0
    6eee:	f8a4 114c 	strh.w	r1, [r4, #332]	; 0x14c
    6ef2:	5501      	strb	r1, [r0, r4]
    6ef4:	f8a5 1017 	strh.w	r1, [r5, #23]
    6ef8:	7669      	strb	r1, [r5, #25]
    6efa:	4608      	mov	r0, r1
    6efc:	f05f 017f 	movs.w	r1, #127	; 0x7f
    6f00:	eb04 0240 	add.w	r2, r4, r0, lsl #1
    6f04:	1c40      	adds	r0, r0, #1
    6f06:	b2c0      	uxtb	r0, r0
    6f08:	f882 107d 	strb.w	r1, [r2, #125]	; 0x7d
    6f0c:	2802      	cmp	r0, #2
    6f0e:	d3f7      	bcc.n	6f00 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI+0x2c>
    6f10:	f994 106e 	ldrsb.w	r1, [r4, #110]	; 0x6e
    6f14:	4620      	mov	r0, r4
    6f16:	f008 fa4e 	bl	f3b6 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>
    6f1a:	2000      	movs	r0, #0
    6f1c:	21ff      	movs	r1, #255	; 0xff
    6f1e:	1822      	adds	r2, r4, r0
    6f20:	1c40      	adds	r0, r0, #1
    6f22:	b2c0      	uxtb	r0, r0
    6f24:	f882 1080 	strb.w	r1, [r2, #128]	; 0x80
    6f28:	2802      	cmp	r0, #2
    6f2a:	d3f8      	bcc.n	6f1e <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI+0x4a>
    6f2c:	bd70      	pop	{r4, r5, r6, pc}
	...

00006f30 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA>:
    6f30:	b500      	push	{lr}
    6f32:	7941      	ldrb	r1, [r0, #5]
    6f34:	b095      	sub	sp, #84	; 0x54
    6f36:	b141      	cbz	r1, 6f4a <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    6f38:	2901      	cmp	r1, #1
    6f3a:	d006      	beq.n	6f4a <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    6f3c:	2902      	cmp	r1, #2
    6f3e:	d004      	beq.n	6f4a <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    6f40:	2903      	cmp	r1, #3
    6f42:	d002      	beq.n	6f4a <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    6f44:	2012      	movs	r0, #18
    6f46:	b015      	add	sp, #84	; 0x54
    6f48:	bd00      	pop	{pc}
    6f4a:	7901      	ldrb	r1, [r0, #4]
    6f4c:	f88d 1000 	strb.w	r1, [sp]
    6f50:	7b01      	ldrb	r1, [r0, #12]
    6f52:	f88d 1001 	strb.w	r1, [sp, #1]
    6f56:	7942      	ldrb	r2, [r0, #5]
    6f58:	2100      	movs	r1, #0
    6f5a:	2301      	movs	r3, #1
    6f5c:	b3f2      	cbz	r2, 6fdc <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xac>
    6f5e:	2a02      	cmp	r2, #2
    6f60:	d03d      	beq.n	6fde <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xae>
    6f62:	f88d 3002 	strb.w	r3, [sp, #2]
    6f66:	bf00      	nop
    6f68:	f8d0 2006 	ldr.w	r2, [r0, #6]
    6f6c:	f8cd 2003 	str.w	r2, [sp, #3]
    6f70:	8942      	ldrh	r2, [r0, #10]
    6f72:	f8ad 2007 	strh.w	r2, [sp, #7]
    6f76:	f88d 3009 	strb.w	r3, [sp, #9]
    6f7a:	f830 2b01 	ldrh.w	r2, [r0], #1
    6f7e:	f240 2371 	movw	r3, #625	; 0x271
    6f82:	435a      	muls	r2, r3
    6f84:	9203      	str	r2, [sp, #12]
    6f86:	f8b0 2001 	ldrh.w	r2, [r0, #1]
    6f8a:	435a      	muls	r2, r3
    6f8c:	9206      	str	r2, [sp, #24]
    6f8e:	8982      	ldrh	r2, [r0, #12]
    6f90:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
    6f94:	89c2      	ldrh	r2, [r0, #14]
    6f96:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
    6f9a:	8a02      	ldrh	r2, [r0, #16]
    6f9c:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
    6fa0:	8a42      	ldrh	r2, [r0, #18]
    6fa2:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
    6fa6:	8a82      	ldrh	r2, [r0, #20]
    6fa8:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
    6fac:	8ac0      	ldrh	r0, [r0, #22]
    6fae:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
    6fb2:	2007      	movs	r0, #7
    6fb4:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
    6fb8:	f88d 1048 	strb.w	r1, [sp, #72]	; 0x48
    6fbc:	f8ad 104a 	strh.w	r1, [sp, #74]	; 0x4a
    6fc0:	f88d 104d 	strb.w	r1, [sp, #77]	; 0x4d
    6fc4:	9806      	ldr	r0, [sp, #24]
    6fc6:	f000 fa0d 	bl	73e4 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x168>
    6fca:	b158      	cbz	r0, 6fe4 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xb4>
    6fcc:	9803      	ldr	r0, [sp, #12]
    6fce:	f000 f9fd 	bl	73cc <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x150>
    6fd2:	b138      	cbz	r0, 6fe4 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xb4>
    6fd4:	4668      	mov	r0, sp
    6fd6:	f008 fc5b 	bl	f890 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A>
    6fda:	e7b4      	b.n	6f46 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x16>
    6fdc:	e7ff      	b.n	6fde <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xae>
    6fde:	f88d 1002 	strb.w	r1, [sp, #2]
    6fe2:	e7c1      	b.n	6f68 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x38>
    6fe4:	2030      	movs	r0, #48	; 0x30
    6fe6:	e7ae      	b.n	6f46 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x16>

00006fe8 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    6fe8:	4903      	ldr	r1, [pc, #12]	; (6ff8 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    6fea:	884a      	ldrh	r2, [r1, #2]
    6fec:	8002      	strh	r2, [r0, #0]
    6fee:	7809      	ldrb	r1, [r1, #0]
    6ff0:	7081      	strb	r1, [r0, #2]
    6ff2:	2000      	movs	r0, #0
    6ff4:	4770      	bx	lr
    6ff6:	0000      	.short	0x0000
    6ff8:	20000ff4 	.word	0x20000ff4

00006ffc <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
    6ffc:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    6ffe:	460c      	mov	r4, r1
    7000:	4605      	mov	r5, r0
    7002:	8800      	ldrh	r0, [r0, #0]
    7004:	4669      	mov	r1, sp
    7006:	f006 fd50 	bl	daaa <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    700a:	2200      	movs	r2, #0
    700c:	b128      	cbz	r0, 701a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a>
    700e:	f8c4 2002 	str.w	r2, [r4, #2]
    7012:	71a2      	strb	r2, [r4, #6]
    7014:	8022      	strh	r2, [r4, #0]
    7016:	2002      	movs	r0, #2
    7018:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    701a:	9901      	ldr	r1, [sp, #4]
    701c:	f111 0188 	adds.w	r1, r1, #136	; 0x88
    7020:	f881 2076 	strb.w	r2, [r1, #118]	; 0x76
    7024:	f8d1 0026 	ldr.w	r0, [r1, #38]	; 0x26
    7028:	f8c4 0002 	str.w	r0, [r4, #2]
    702c:	f891 002a 	ldrb.w	r0, [r1, #42]	; 0x2a
    7030:	71a0      	strb	r0, [r4, #6]
    7032:	8828      	ldrh	r0, [r5, #0]
    7034:	8020      	strh	r0, [r4, #0]
    7036:	f891 0076 	ldrb.w	r0, [r1, #118]	; 0x76
    703a:	f88d 0008 	strb.w	r0, [sp, #8]
    703e:	9802      	ldr	r0, [sp, #8]
    7040:	9002      	str	r0, [sp, #8]
    7042:	f89d 0008 	ldrb.w	r0, [sp, #8]
    7046:	2800      	cmp	r0, #0
    7048:	d1ea      	bne.n	7020 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x20>
    704a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000704c <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
    704c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    704e:	460d      	mov	r5, r1
    7050:	4606      	mov	r6, r0
    7052:	8800      	ldrh	r0, [r0, #0]
    7054:	4669      	mov	r1, sp
    7056:	f006 fd28 	bl	daaa <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    705a:	2800      	cmp	r0, #0
    705c:	d11a      	bne.n	7094 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x48>
    705e:	f8dd 4004 	ldr.w	r4, [sp, #4]
    7062:	2700      	movs	r7, #0
    7064:	f884 706c 	strb.w	r7, [r4, #108]	; 0x6c
    7068:	f814 0f6a 	ldrb.w	r0, [r4, #106]!
    706c:	f008 fe08 	bl	fc80 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x44>
    7070:	70a8      	strb	r0, [r5, #2]
    7072:	7860      	ldrb	r0, [r4, #1]
    7074:	f008 fe04 	bl	fc80 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x44>
    7078:	70e8      	strb	r0, [r5, #3]
    707a:	78a0      	ldrb	r0, [r4, #2]
    707c:	f88d 0008 	strb.w	r0, [sp, #8]
    7080:	9802      	ldr	r0, [sp, #8]
    7082:	9002      	str	r0, [sp, #8]
    7084:	f89d 0008 	ldrb.w	r0, [sp, #8]
    7088:	3c6a      	subs	r4, #106	; 0x6a
    708a:	2800      	cmp	r0, #0
    708c:	d1ea      	bne.n	7064 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x18>
    708e:	8830      	ldrh	r0, [r6, #0]
    7090:	8028      	strh	r0, [r5, #0]
    7092:	2000      	movs	r0, #0
    7094:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00007098 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
    7098:	4903      	ldr	r1, [pc, #12]	; (70a8 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x10>)
    709a:	888a      	ldrh	r2, [r1, #4]
    709c:	8002      	strh	r2, [r0, #0]
    709e:	88c9      	ldrh	r1, [r1, #6]
    70a0:	8041      	strh	r1, [r0, #2]
    70a2:	2000      	movs	r0, #0
    70a4:	4770      	bx	lr
    70a6:	0000      	.short	0x0000
    70a8:	2000026a 	.word	0x2000026a

000070ac <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
    70ac:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    70ae:	2400      	movs	r4, #0
    70b0:	a902      	add	r1, sp, #8
    70b2:	f88d 4004 	strb.w	r4, [sp, #4]
    70b6:	f88d 4008 	strb.w	r4, [sp, #8]
    70ba:	9100      	str	r1, [sp, #0]
    70bc:	7882      	ldrb	r2, [r0, #2]
    70be:	7841      	ldrb	r1, [r0, #1]
    70c0:	7800      	ldrb	r0, [r0, #0]
    70c2:	ab01      	add	r3, sp, #4
    70c4:	f008 ffdb 	bl	1007e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x442>
    70c8:	2800      	cmp	r0, #0
    70ca:	d112      	bne.n	70f2 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x46>
    70cc:	f89d 0004 	ldrb.w	r0, [sp, #4]
    70d0:	f008 fded 	bl	fcae <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x72>
    70d4:	b170      	cbz	r0, 70f4 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x48>
    70d6:	f89d 0008 	ldrb.w	r0, [sp, #8]
    70da:	f008 fde8 	bl	fcae <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x72>
    70de:	b148      	cbz	r0, 70f4 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x48>
    70e0:	4805      	ldr	r0, [pc, #20]	; (70f8 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x4c>)
    70e2:	f89d 1004 	ldrb.w	r1, [sp, #4]
    70e6:	7381      	strb	r1, [r0, #14]
    70e8:	f89d 1008 	ldrb.w	r1, [sp, #8]
    70ec:	73c1      	strb	r1, [r0, #15]
    70ee:	8204      	strh	r4, [r0, #16]
    70f0:	2000      	movs	r0, #0
    70f2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    70f4:	2011      	movs	r0, #17
    70f6:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    70f8:	20000ff4 	.word	0x20000ff4

000070fc <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI>:
    70fc:	b51c      	push	{r2, r3, r4, lr}
    70fe:	4604      	mov	r4, r0
    7100:	f006 fcbd 	bl	da7e <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY>
    7104:	b148      	cbz	r0, 711a <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x1e>
    7106:	4620      	mov	r0, r4
    7108:	f7fb fae2 	bl	26d0 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ>
    710c:	4909      	ldr	r1, [pc, #36]	; (7134 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x38>)
    710e:	24ff      	movs	r4, #255	; 0xff
    7110:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
    7114:	e9cd 0100 	strd	r0, r1, [sp]
    7118:	e004      	b.n	7124 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x28>
    711a:	2012      	movs	r0, #18
    711c:	bd1c      	pop	{r2, r3, r4, pc}
    711e:	9800      	ldr	r0, [sp, #0]
    7120:	f880 425c 	strb.w	r4, [r0, #604]	; 0x25c
    7124:	4668      	mov	r0, sp
    7126:	f7f9 febb 	bl	ea0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    712a:	2800      	cmp	r0, #0
    712c:	d0f7      	beq.n	711e <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x22>
    712e:	2000      	movs	r0, #0
    7130:	bd1c      	pop	{r2, r3, r4, pc}
    7132:	0000      	.short	0x0000
    7134:	00007718 	.word	0x00007718

00007138 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    7138:	7801      	ldrb	r1, [r0, #0]
    713a:	b171      	cbz	r1, 715a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    713c:	7841      	ldrb	r1, [r0, #1]
    713e:	b161      	cbz	r1, 715a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    7140:	8841      	ldrh	r1, [r0, #2]
    7142:	291b      	cmp	r1, #27
    7144:	d309      	bcc.n	715a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    7146:	8881      	ldrh	r1, [r0, #4]
    7148:	291b      	cmp	r1, #27
    714a:	d306      	bcc.n	715a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    714c:	4904      	ldr	r1, [pc, #16]	; (7160 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    714e:	6802      	ldr	r2, [r0, #0]
    7150:	600a      	str	r2, [r1, #0]
    7152:	8880      	ldrh	r0, [r0, #4]
    7154:	8088      	strh	r0, [r1, #4]
    7156:	2000      	movs	r0, #0
    7158:	4770      	bx	lr
    715a:	2012      	movs	r0, #18
    715c:	4770      	bx	lr
    715e:	0000      	.short	0x0000
    7160:	20000ff4 	.word	0x20000ff4

00007164 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    7164:	6800      	ldr	r0, [r0, #0]
    7166:	f240 41e2 	movw	r1, #1250	; 0x4e2
    716a:	4288      	cmp	r0, r1
    716c:	d303      	bcc.n	7176 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    716e:	4903      	ldr	r1, [pc, #12]	; (717c <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    7170:	6088      	str	r0, [r1, #8]
    7172:	2000      	movs	r0, #0
    7174:	4770      	bx	lr
    7176:	2012      	movs	r0, #18
    7178:	4770      	bx	lr
    717a:	0000      	.short	0x0000
    717c:	20000ff4 	.word	0x20000ff4

00007180 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA>:
    7180:	b510      	push	{r4, lr}
    7182:	b086      	sub	sp, #24
    7184:	4604      	mov	r4, r0
    7186:	f008 fe6d 	bl	fe64 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x228>
    718a:	2800      	cmp	r0, #0
    718c:	d103      	bne.n	7196 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    718e:	f008 ff63 	bl	10058 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x41c>
    7192:	b110      	cbz	r0, 719a <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x1a>
    7194:	200c      	movs	r0, #12
    7196:	b006      	add	sp, #24
    7198:	bd10      	pop	{r4, pc}
    719a:	2102      	movs	r1, #2
    719c:	f104 0010 	add.w	r0, r4, #16
    71a0:	f000 f92c 	bl	73fc <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x180>
    71a4:	78a0      	ldrb	r0, [r4, #2]
    71a6:	f88d 0008 	strb.w	r0, [sp, #8]
    71aa:	78a0      	ldrb	r0, [r4, #2]
    71ac:	f88d 0000 	strb.w	r0, [sp]
    71b0:	7860      	ldrb	r0, [r4, #1]
    71b2:	f88d 0003 	strb.w	r0, [sp, #3]
    71b6:	7820      	ldrb	r0, [r4, #0]
    71b8:	f88d 0002 	strb.w	r0, [sp, #2]
    71bc:	7e20      	ldrb	r0, [r4, #24]
    71be:	f88d 0004 	strb.w	r0, [sp, #4]
    71c2:	78a0      	ldrb	r0, [r4, #2]
    71c4:	07c0      	lsls	r0, r0, #31
    71c6:	d00b      	beq.n	71e0 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x60>
    71c8:	78e0      	ldrb	r0, [r4, #3]
    71ca:	2801      	cmp	r0, #1
    71cc:	d011      	beq.n	71f2 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x72>
    71ce:	b190      	cbz	r0, 71f6 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x76>
    71d0:	f05f 0000 	movs.w	r0, #0
    71d4:	f88d 0001 	strb.w	r0, [sp, #1]
    71d8:	68a0      	ldr	r0, [r4, #8]
    71da:	9003      	str	r0, [sp, #12]
    71dc:	6920      	ldr	r0, [r4, #16]
    71de:	9004      	str	r0, [sp, #16]
    71e0:	a802      	add	r0, sp, #8
    71e2:	f7fd fbb7 	bl	4954 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ>
    71e6:	2800      	cmp	r0, #0
    71e8:	d1d5      	bne.n	7196 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    71ea:	4668      	mov	r0, sp
    71ec:	f7fc f998 	bl	3520 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY>
    71f0:	e7d1      	b.n	7196 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    71f2:	2002      	movs	r0, #2
    71f4:	e7ee      	b.n	71d4 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x54>
    71f6:	2001      	movs	r0, #1
    71f8:	e7ec      	b.n	71d4 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x54>
	...

000071fc <sym_UY577SX5HIKP7SN7G6RHWTFDXAXFXXF32S4VJUA>:
    71fc:	4801      	ldr	r0, [pc, #4]	; (7204 <sym_UY577SX5HIKP7SN7G6RHWTFDXAXFXXF32S4VJUA+0x8>)
    71fe:	f990 0000 	ldrsb.w	r0, [r0]
    7202:	4770      	bx	lr
    7204:	2000025c 	.word	0x2000025c

00007208 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    7208:	4a03      	ldr	r2, [pc, #12]	; (7218 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    720a:	e9d2 1200 	ldrd	r1, r2, [r2]
    720e:	6001      	str	r1, [r0, #0]
    7210:	6042      	str	r2, [r0, #4]
    7212:	2000      	movs	r0, #0
    7214:	4770      	bx	lr
    7216:	0000      	.short	0x0000
    7218:	00007718 	.word	0x00007718

0000721c <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
    721c:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    721e:	8800      	ldrh	r0, [r0, #0]
    7220:	4669      	mov	r1, sp
    7222:	f006 fc42 	bl	daaa <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    7226:	b968      	cbnz	r0, 7244 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x28>
    7228:	2401      	movs	r4, #1
    722a:	9801      	ldr	r0, [sp, #4]
    722c:	f008 fefe 	bl	1002c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3f0>
    7230:	b140      	cbz	r0, 7244 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x28>
    7232:	9801      	ldr	r0, [sp, #4]
    7234:	4601      	mov	r1, r0
    7236:	f890 214a 	ldrb.w	r2, [r0, #330]	; 0x14a
    723a:	3088      	adds	r0, #136	; 0x88
    723c:	f501 71a5 	add.w	r1, r1, #330	; 0x14a
    7240:	b95a      	cbnz	r2, 725a <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x3e>
    7242:	e001      	b.n	7248 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2c>
    7244:	2002      	movs	r0, #2
    7246:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    7248:	f890 2068 	ldrb.w	r2, [r0, #104]	; 0x68
    724c:	f88d 2008 	strb.w	r2, [sp, #8]
    7250:	9a02      	ldr	r2, [sp, #8]
    7252:	9202      	str	r2, [sp, #8]
    7254:	f89d 2008 	ldrb.w	r2, [sp, #8]
    7258:	b10a      	cbz	r2, 725e <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x42>
    725a:	203a      	movs	r0, #58	; 0x3a
    725c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    725e:	f890 205f 	ldrb.w	r2, [r0, #95]	; 0x5f
    7262:	0792      	lsls	r2, r2, #30
    7264:	d006      	beq.n	7274 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x58>
    7266:	2203      	movs	r2, #3
    7268:	4903      	ldr	r1, [pc, #12]	; (7278 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x5c>)
    726a:	3060      	adds	r0, #96	; 0x60
    726c:	f006 ff6b 	bl	e146 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    7270:	2000      	movs	r0, #0
    7272:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    7274:	700c      	strb	r4, [r1, #0]
    7276:	e7fb      	b.n	7270 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x54>
    7278:	0000e64f 	.word	0x0000e64f

0000727c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ>:
    727c:	b510      	push	{r4, lr}
    727e:	2005      	movs	r0, #5
    7280:	f000 fabe 	bl	7800 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    7284:	f7fe f8d4 	bl	5430 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ>
    7288:	4902      	ldr	r1, [pc, #8]	; (7294 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x18>)
    728a:	4801      	ldr	r0, [pc, #4]	; (7290 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x14>)
    728c:	6048      	str	r0, [r1, #4]
    728e:	bd10      	pop	{r4, pc}
    7290:	00007299 	.word	0x00007299
    7294:	2000025c 	.word	0x2000025c
    7298:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    729c:	4613      	mov	r3, r2
    729e:	4a33      	ldr	r2, [pc, #204]	; (736c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xf0>)
    72a0:	460f      	mov	r7, r1
    72a2:	f8b0 1054 	ldrh.w	r1, [r0, #84]	; 0x54
    72a6:	8814      	ldrh	r4, [r2, #0]
    72a8:	f8b0 6052 	ldrh.w	r6, [r0, #82]	; 0x52
    72ac:	428c      	cmp	r4, r1
    72ae:	d200      	bcs.n	72b2 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x36>
    72b0:	4621      	mov	r1, r4
    72b2:	4688      	mov	r8, r1
    72b4:	8891      	ldrh	r1, [r2, #4]
    72b6:	42b1      	cmp	r1, r6
    72b8:	d200      	bcs.n	72bc <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x40>
    72ba:	460e      	mov	r6, r1
    72bc:	8851      	ldrh	r1, [r2, #2]
    72be:	f640 0448 	movw	r4, #2120	; 0x848
    72c2:	42a1      	cmp	r1, r4
    72c4:	d300      	bcc.n	72c8 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x4c>
    72c6:	4621      	mov	r1, r4
    72c8:	88d5      	ldrh	r5, [r2, #6]
    72ca:	42a5      	cmp	r5, r4
    72cc:	d300      	bcc.n	72d0 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x54>
    72ce:	4625      	mov	r5, r4
    72d0:	42a1      	cmp	r1, r4
    72d2:	d200      	bcs.n	72d6 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x5a>
    72d4:	460c      	mov	r4, r1
    72d6:	f44f 72a4 	mov.w	r2, #328	; 0x148
    72da:	2e1b      	cmp	r6, #27
    72dc:	d001      	beq.n	72e2 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x66>
    72de:	4295      	cmp	r5, r2
    72e0:	d104      	bne.n	72ec <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x70>
    72e2:	f1b8 0f1b 	cmp.w	r8, #27
    72e6:	d03e      	beq.n	7366 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xea>
    72e8:	4294      	cmp	r4, r2
    72ea:	d03c      	beq.n	7366 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xea>
    72ec:	466a      	mov	r2, sp
    72ee:	4619      	mov	r1, r3
    72f0:	f008 fe43 	bl	ff7a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x33e>
    72f4:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    72f8:	4641      	mov	r1, r8
    72fa:	4540      	cmp	r0, r8
    72fc:	d900      	bls.n	7300 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x84>
    72fe:	4608      	mov	r0, r1
    7300:	80f8      	strh	r0, [r7, #6]
    7302:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    7306:	42a1      	cmp	r1, r4
    7308:	d800      	bhi.n	730c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x90>
    730a:	460c      	mov	r4, r1
    730c:	813c      	strh	r4, [r7, #8]
    730e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    7312:	42b1      	cmp	r1, r6
    7314:	d800      	bhi.n	7318 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x9c>
    7316:	460e      	mov	r6, r1
    7318:	807e      	strh	r6, [r7, #2]
    731a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    731e:	42a9      	cmp	r1, r5
    7320:	d800      	bhi.n	7324 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xa8>
    7322:	460d      	mov	r5, r1
    7324:	80bd      	strh	r5, [r7, #4]
    7326:	21ff      	movs	r1, #255	; 0xff
    7328:	7039      	strb	r1, [r7, #0]
    732a:	381b      	subs	r0, #27
    732c:	28e0      	cmp	r0, #224	; 0xe0
    732e:	d902      	bls.n	7336 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xba>
    7330:	f640 516e 	movw	r1, #3438	; 0xd6e
    7334:	e014      	b.n	7360 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xe4>
    7336:	3e1b      	subs	r6, #27
    7338:	2ee0      	cmp	r6, #224	; 0xe0
    733a:	d902      	bls.n	7342 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xc6>
    733c:	f44f 6157 	mov.w	r1, #3440	; 0xd70
    7340:	e00e      	b.n	7360 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xe4>
    7342:	f44f 60e0 	mov.w	r0, #1792	; 0x700
    7346:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
    734a:	4284      	cmp	r4, r0
    734c:	d902      	bls.n	7354 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xd8>
    734e:	f640 5172 	movw	r1, #3442	; 0xd72
    7352:	e005      	b.n	7360 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xe4>
    7354:	f5a5 75a4 	sub.w	r5, r5, #328	; 0x148
    7358:	4285      	cmp	r5, r0
    735a:	d904      	bls.n	7366 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xea>
    735c:	f640 5174 	movw	r1, #3444	; 0xd74
    7360:	2039      	movs	r0, #57	; 0x39
    7362:	f7f9 fb7f 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7366:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    736a:	0000      	.short	0x0000
    736c:	2000026a 	.word	0x2000026a
    7370:	b510      	push	{r4, lr}
    7372:	480e      	ldr	r0, [pc, #56]	; (73ac <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x130>)
    7374:	2100      	movs	r1, #0
    7376:	4b0e      	ldr	r3, [pc, #56]	; (73b0 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x134>)
    7378:	74c1      	strb	r1, [r0, #19]
    737a:	8281      	strh	r1, [r0, #20]
    737c:	221b      	movs	r2, #27
    737e:	801a      	strh	r2, [r3, #0]
    7380:	f44f 74a4 	mov.w	r4, #328	; 0x148
    7384:	805c      	strh	r4, [r3, #2]
    7386:	809a      	strh	r2, [r3, #4]
    7388:	80dc      	strh	r4, [r3, #6]
    738a:	7381      	strb	r1, [r0, #14]
    738c:	73c1      	strb	r1, [r0, #15]
    738e:	2303      	movs	r3, #3
    7390:	7003      	strb	r3, [r0, #0]
    7392:	2302      	movs	r3, #2
    7394:	7043      	strb	r3, [r0, #1]
    7396:	8042      	strh	r2, [r0, #2]
    7398:	8082      	strh	r2, [r0, #4]
    739a:	f640 62a6 	movw	r2, #3750	; 0xea6
    739e:	6082      	str	r2, [r0, #8]
    73a0:	7481      	strb	r1, [r0, #18]
    73a2:	7301      	strb	r1, [r0, #12]
    73a4:	4802      	ldr	r0, [pc, #8]	; (73b0 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x134>)
    73a6:	1f80      	subs	r0, r0, #6
    73a8:	7001      	strb	r1, [r0, #0]
    73aa:	bd10      	pop	{r4, pc}
    73ac:	20000ff4 	.word	0x20000ff4
    73b0:	2000026a 	.word	0x2000026a
    73b4:	4904      	ldr	r1, [pc, #16]	; (73c8 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x14c>)
    73b6:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    73ba:	4288      	cmp	r0, r1
    73bc:	d301      	bcc.n	73c2 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x146>
    73be:	2000      	movs	r0, #0
    73c0:	4770      	bx	lr
    73c2:	2001      	movs	r0, #1
    73c4:	4770      	bx	lr
    73c6:	0000      	.short	0x0000
    73c8:	0270f3cc 	.word	0x0270f3cc
    73cc:	4904      	ldr	r1, [pc, #16]	; (73e0 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x164>)
    73ce:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    73d2:	4288      	cmp	r0, r1
    73d4:	d301      	bcc.n	73da <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x15e>
    73d6:	2000      	movs	r0, #0
    73d8:	4770      	bx	lr
    73da:	2001      	movs	r0, #1
    73dc:	4770      	bx	lr
    73de:	0000      	.short	0x0000
    73e0:	009c363d 	.word	0x009c363d
    73e4:	4904      	ldr	r1, [pc, #16]	; (73f8 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x17c>)
    73e6:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    73ea:	4288      	cmp	r0, r1
    73ec:	d301      	bcc.n	73f2 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x176>
    73ee:	2000      	movs	r0, #0
    73f0:	4770      	bx	lr
    73f2:	2001      	movs	r0, #1
    73f4:	4770      	bx	lr
    73f6:	0000      	.short	0x0000
    73f8:	009c363d 	.word	0x009c363d
    73fc:	b530      	push	{r4, r5, lr}
    73fe:	2200      	movs	r2, #0
    7400:	4d07      	ldr	r5, [pc, #28]	; (7420 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x1a4>)
    7402:	e009      	b.n	7418 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x19c>
    7404:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
    7408:	462b      	mov	r3, r5
    740a:	429c      	cmp	r4, r3
    740c:	d800      	bhi.n	7410 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x194>
    740e:	4623      	mov	r3, r4
    7410:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
    7414:	1c52      	adds	r2, r2, #1
    7416:	b2d2      	uxtb	r2, r2
    7418:	428a      	cmp	r2, r1
    741a:	d3f3      	bcc.n	7404 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x188>
    741c:	bd30      	pop	{r4, r5, pc}
    741e:	0000      	.short	0x0000
    7420:	00f42400 	.word	0x00f42400
    7424:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7428:	4604      	mov	r4, r0
    742a:	a05c      	add	r0, pc, #368	; (adr r0, 759c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x320>)
    742c:	4688      	mov	r8, r1
    742e:	e9d0 7600 	ldrd	r7, r6, [r0]
    7432:	b087      	sub	sp, #28
    7434:	4699      	mov	r9, r3
    7436:	4615      	mov	r5, r2
    7438:	2100      	movs	r1, #0
    743a:	4620      	mov	r0, r4
    743c:	f7fb f88c 	bl	2558 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    7440:	f8a4 8000 	strh.w	r8, [r4]
    7444:	4857      	ldr	r0, [pc, #348]	; (75a4 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x328>)
    7446:	f8c4 0258 	str.w	r0, [r4, #600]	; 0x258
    744a:	f000 f9e5 	bl	7818 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    744e:	0940      	lsrs	r0, r0, #5
    7450:	ea40 60c1 	orr.w	r0, r0, r1, lsl #27
    7454:	07c1      	lsls	r1, r0, #31
    7456:	f8df 8150 	ldr.w	r8, [pc, #336]	; 75a8 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x32c>
    745a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    745e:	d006      	beq.n	746e <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x1f2>
    7460:	f8b8 2002 	ldrh.w	r2, [r8, #2]
    7464:	f8b8 1004 	ldrh.w	r1, [r8, #4]
    7468:	84c2      	strh	r2, [r0, #38]	; 0x26
    746a:	8501      	strh	r1, [r0, #40]	; 0x28
    746c:	e002      	b.n	7474 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x1f8>
    746e:	211b      	movs	r1, #27
    7470:	84c1      	strh	r1, [r0, #38]	; 0x26
    7472:	8501      	strh	r1, [r0, #40]	; 0x28
    7474:	f000 f9d0 	bl	7818 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    7478:	0788      	lsls	r0, r1, #30
    747a:	d506      	bpl.n	748a <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x20e>
    747c:	2000      	movs	r0, #0
    747e:	f88d 0000 	strb.w	r0, [sp]
    7482:	4668      	mov	r0, sp
    7484:	9401      	str	r4, [sp, #4]
    7486:	f7ff fd25 	bl	6ed4 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI>
    748a:	f898 1001 	ldrb.w	r1, [r8, #1]
    748e:	9100      	str	r1, [sp, #0]
    7490:	f898 3000 	ldrb.w	r3, [r8]
    7494:	f8b8 2004 	ldrh.w	r2, [r8, #4]
    7498:	f8b8 1002 	ldrh.w	r1, [r8, #2]
    749c:	8820      	ldrh	r0, [r4, #0]
    749e:	f7f9 fded 	bl	107c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    74a2:	b120      	cbz	r0, 74ae <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x232>
    74a4:	f640 7106 	movw	r1, #3846	; 0xf06
    74a8:	2039      	movs	r0, #57	; 0x39
    74aa:	f7f9 fadb 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    74ae:	f006 ffb7 	bl	e420 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q>
    74b2:	6160      	str	r0, [r4, #20]
    74b4:	f1b9 0f00 	cmp.w	r9, #0
    74b8:	d004      	beq.n	74c4 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x248>
    74ba:	f7fb fc85 	bl	2dc8 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    74be:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    74c2:	61e0      	str	r0, [r4, #28]
    74c4:	f895 004d 	ldrb.w	r0, [r5, #77]	; 0x4d
    74c8:	eb05 0040 	add.w	r0, r5, r0, lsl #1
    74cc:	8d40      	ldrh	r0, [r0, #42]	; 0x2a
    74ce:	f006 faf8 	bl	dac2 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    74d2:	6120      	str	r0, [r4, #16]
    74d4:	f895 004d 	ldrb.w	r0, [r5, #77]	; 0x4d
    74d8:	eb05 0040 	add.w	r0, r5, r0, lsl #1
    74dc:	8e00      	ldrh	r0, [r0, #48]	; 0x30
    74de:	8320      	strh	r0, [r4, #24]
    74e0:	f895 004d 	ldrb.w	r0, [r5, #77]	; 0x4d
    74e4:	eb05 0040 	add.w	r0, r5, r0, lsl #1
    74e8:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    74ea:	8360      	strh	r0, [r4, #26]
    74ec:	7a68      	ldrb	r0, [r5, #9]
    74ee:	f008 fbbd 	bl	fc6c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x30>
    74f2:	f8d8 1008 	ldr.w	r1, [r8, #8]
    74f6:	4645      	mov	r5, r8
    74f8:	4620      	mov	r0, r4
    74fa:	62e1      	str	r1, [r4, #44]	; 0x2c
    74fc:	f007 fb6d 	bl	ebda <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY>
    7500:	f8c4 70ae 	str.w	r7, [r4, #174]	; 0xae
    7504:	f884 60b2 	strb.w	r6, [r4, #178]	; 0xb2
    7508:	20ff      	movs	r0, #255	; 0xff
    750a:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    750e:	4825      	ldr	r0, [pc, #148]	; (75a4 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x328>)
    7510:	3808      	subs	r0, #8
    7512:	6843      	ldr	r3, [r0, #4]
    7514:	b123      	cbz	r3, 7520 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x2a4>
    7516:	2201      	movs	r2, #1
    7518:	f504 719d 	add.w	r1, r4, #314	; 0x13a
    751c:	4620      	mov	r0, r4
    751e:	4798      	blx	r3
    7520:	8821      	ldrh	r1, [r4, #0]
    7522:	f8ad 1004 	strh.w	r1, [sp, #4]
    7526:	7ba9      	ldrb	r1, [r5, #14]
    7528:	f88d 1006 	strb.w	r1, [sp, #6]
    752c:	7be9      	ldrb	r1, [r5, #15]
    752e:	f88d 1007 	strb.w	r1, [sp, #7]
    7532:	8a29      	ldrh	r1, [r5, #16]
    7534:	f8ad 1008 	strh.w	r1, [sp, #8]
    7538:	a904      	add	r1, sp, #16
    753a:	9100      	str	r1, [sp, #0]
    753c:	2000      	movs	r0, #0
    753e:	ab03      	add	r3, sp, #12
    7540:	aa01      	add	r2, sp, #4
    7542:	4621      	mov	r1, r4
    7544:	f008 fd4f 	bl	ffe6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3aa>
    7548:	0005      	movs	r5, r0
    754a:	d10f      	bne.n	756c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x2f0>
    754c:	f89d 000c 	ldrb.w	r0, [sp, #12]
    7550:	f88d 0014 	strb.w	r0, [sp, #20]
    7554:	f89d 0010 	ldrb.w	r0, [sp, #16]
    7558:	f88d 0015 	strb.w	r0, [sp, #21]
    755c:	f8bd 0008 	ldrh.w	r0, [sp, #8]
    7560:	f8ad 0016 	strh.w	r0, [sp, #22]
    7564:	a905      	add	r1, sp, #20
    7566:	4620      	mov	r0, r4
    7568:	f006 fb79 	bl	dc5e <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    756c:	f7fb fc2c 	bl	2dc8 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    7570:	210c      	movs	r1, #12
    7572:	fbb0 f2f1 	udiv	r2, r0, r1
    7576:	fb01 0012 	mls	r0, r1, r2, r0
    757a:	1d40      	adds	r0, r0, #5
    757c:	b2c0      	uxtb	r0, r0
    757e:	f884 00b9 	strb.w	r0, [r4, #185]	; 0xb9
    7582:	2809      	cmp	r0, #9
    7584:	d202      	bcs.n	758c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x310>
    7586:	3008      	adds	r0, #8
    7588:	f884 00b9 	strb.w	r0, [r4, #185]	; 0xb9
    758c:	2101      	movs	r1, #1
    758e:	4620      	mov	r0, r4
    7590:	f7fa ffe2 	bl	2558 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    7594:	b007      	add	sp, #28
    7596:	4628      	mov	r0, r5
    7598:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    759c:	ffffffff 	.word	0xffffffff
    75a0:	0000001f 	.word	0x0000001f
    75a4:	20000264 	.word	0x20000264
    75a8:	20000ff4 	.word	0x20000ff4
    75ac:	4a09      	ldr	r2, [pc, #36]	; (75d4 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x358>)
    75ae:	4290      	cmp	r0, r2
    75b0:	d80b      	bhi.n	75ca <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x34e>
    75b2:	2901      	cmp	r1, #1
    75b4:	d002      	beq.n	75bc <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x340>
    75b6:	2904      	cmp	r1, #4
    75b8:	d003      	beq.n	75c2 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x346>
    75ba:	e008      	b.n	75ce <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x352>
    75bc:	f240 7153 	movw	r1, #1875	; 0x753
    75c0:	e001      	b.n	75c6 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x34a>
    75c2:	f640 11c4 	movw	r1, #2500	; 0x9c4
    75c6:	4288      	cmp	r0, r1
    75c8:	d201      	bcs.n	75ce <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x352>
    75ca:	2000      	movs	r0, #0
    75cc:	4770      	bx	lr
    75ce:	2001      	movs	r0, #1
    75d0:	4770      	bx	lr
    75d2:	0000      	.short	0x0000
    75d4:	0270fd8f 	.word	0x0270fd8f
    75d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    75dc:	b088      	sub	sp, #32
    75de:	4604      	mov	r4, r0
    75e0:	8800      	ldrh	r0, [r0, #0]
    75e2:	a906      	add	r1, sp, #24
    75e4:	f006 fa61 	bl	daaa <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    75e8:	2800      	cmp	r0, #0
    75ea:	d147      	bne.n	767c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x400>
    75ec:	9807      	ldr	r0, [sp, #28]
    75ee:	f890 1188 	ldrb.w	r1, [r0, #392]	; 0x188
    75f2:	f88d 1008 	strb.w	r1, [sp, #8]
    75f6:	9902      	ldr	r1, [sp, #8]
    75f8:	9102      	str	r1, [sp, #8]
    75fa:	f89d 1008 	ldrb.w	r1, [sp, #8]
    75fe:	3088      	adds	r0, #136	; 0x88
    7600:	b101      	cbz	r1, 7604 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x388>
    7602:	2101      	movs	r1, #1
    7604:	f88d 100c 	strb.w	r1, [sp, #12]
    7608:	7f81      	ldrb	r1, [r0, #30]
    760a:	f04f 0801 	mov.w	r8, #1
    760e:	291e      	cmp	r1, #30
    7610:	d102      	bne.n	7618 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x39c>
    7612:	f89d 100c 	ldrb.w	r1, [sp, #12]
    7616:	b149      	cbz	r1, 762c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x3b0>
    7618:	f05f 0100 	movs.w	r1, #0
    761c:	f88d 1004 	strb.w	r1, [sp, #4]
    7620:	2105      	movs	r1, #5
    7622:	306e      	adds	r0, #110	; 0x6e
    7624:	f007 ff37 	bl	f496 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x94>
    7628:	b110      	cbz	r0, 7630 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x3b4>
    762a:	e004      	b.n	7636 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x3ba>
    762c:	2101      	movs	r1, #1
    762e:	e7f5      	b.n	761c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x3a0>
    7630:	f89d 0004 	ldrb.w	r0, [sp, #4]
    7634:	b308      	cbz	r0, 767a <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x3fe>
    7636:	8921      	ldrh	r1, [r4, #8]
    7638:	88e0      	ldrh	r0, [r4, #6]
    763a:	f008 fb4d 	bl	fcd8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9c>
    763e:	2800      	cmp	r0, #0
    7640:	d11c      	bne.n	767c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x400>
    7642:	88a1      	ldrh	r1, [r4, #4]
    7644:	8860      	ldrh	r0, [r4, #2]
    7646:	f008 fb47 	bl	fcd8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9c>
    764a:	2800      	cmp	r0, #0
    764c:	d116      	bne.n	767c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x400>
    764e:	8921      	ldrh	r1, [r4, #8]
    7650:	88e0      	ldrh	r0, [r4, #6]
    7652:	f008 fb37 	bl	fcc4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x88>
    7656:	2800      	cmp	r0, #0
    7658:	d110      	bne.n	767c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x400>
    765a:	88a1      	ldrh	r1, [r4, #4]
    765c:	8860      	ldrh	r0, [r4, #2]
    765e:	f008 fb31 	bl	fcc4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x88>
    7662:	0006      	movs	r6, r0
    7664:	d10a      	bne.n	767c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x400>
    7666:	9807      	ldr	r0, [sp, #28]
    7668:	f500 759d 	add.w	r5, r0, #314	; 0x13a
    766c:	27ff      	movs	r7, #255	; 0xff
    766e:	706f      	strb	r7, [r5, #1]
    7670:	f89d 100c 	ldrb.w	r1, [sp, #12]
    7674:	b129      	cbz	r1, 7682 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x406>
    7676:	263a      	movs	r6, #58	; 0x3a
    7678:	e02e      	b.n	76d8 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x45c>
    767a:	201a      	movs	r0, #26
    767c:	b008      	add	sp, #32
    767e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7682:	4641      	mov	r1, r8
    7684:	aa03      	add	r2, sp, #12
    7686:	f008 fc78 	bl	ff7a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x33e>
    768a:	8861      	ldrh	r1, [r4, #2]
    768c:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    7690:	4281      	cmp	r1, r0
    7692:	d200      	bcs.n	7696 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x41a>
    7694:	4608      	mov	r0, r1
    7696:	80e8      	strh	r0, [r5, #6]
    7698:	88a1      	ldrh	r1, [r4, #4]
    769a:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    769e:	4281      	cmp	r1, r0
    76a0:	d200      	bcs.n	76a4 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x428>
    76a2:	4608      	mov	r0, r1
    76a4:	8128      	strh	r0, [r5, #8]
    76a6:	88e2      	ldrh	r2, [r4, #6]
    76a8:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    76ac:	428a      	cmp	r2, r1
    76ae:	d200      	bcs.n	76b2 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x436>
    76b0:	4611      	mov	r1, r2
    76b2:	8069      	strh	r1, [r5, #2]
    76b4:	8922      	ldrh	r2, [r4, #8]
    76b6:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    76ba:	428a      	cmp	r2, r1
    76bc:	d200      	bcs.n	76c0 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x444>
    76be:	4611      	mov	r1, r2
    76c0:	f640 0248 	movw	r2, #2120	; 0x848
    76c4:	80a9      	strh	r1, [r5, #4]
    76c6:	4291      	cmp	r1, r2
    76c8:	d300      	bcc.n	76cc <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x450>
    76ca:	4611      	mov	r1, r2
    76cc:	80a9      	strh	r1, [r5, #4]
    76ce:	4290      	cmp	r0, r2
    76d0:	d200      	bcs.n	76d4 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x458>
    76d2:	4602      	mov	r2, r0
    76d4:	812a      	strh	r2, [r5, #8]
    76d6:	702f      	strb	r7, [r5, #0]
    76d8:	2000      	movs	r0, #0
    76da:	7068      	strb	r0, [r5, #1]
    76dc:	4630      	mov	r0, r6
    76de:	e7cd      	b.n	767c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x400>
    76e0:	b510      	push	{r4, lr}
    76e2:	4604      	mov	r4, r0
    76e4:	88c1      	ldrh	r1, [r0, #6]
    76e6:	8880      	ldrh	r0, [r0, #4]
    76e8:	f008 faf6 	bl	fcd8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9c>
    76ec:	2800      	cmp	r0, #0
    76ee:	d10f      	bne.n	7710 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x494>
    76f0:	8861      	ldrh	r1, [r4, #2]
    76f2:	8820      	ldrh	r0, [r4, #0]
    76f4:	f008 faf0 	bl	fcd8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9c>
    76f8:	2800      	cmp	r0, #0
    76fa:	d109      	bne.n	7710 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x494>
    76fc:	4805      	ldr	r0, [pc, #20]	; (7714 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x498>)
    76fe:	88a1      	ldrh	r1, [r4, #4]
    7700:	8081      	strh	r1, [r0, #4]
    7702:	8821      	ldrh	r1, [r4, #0]
    7704:	8001      	strh	r1, [r0, #0]
    7706:	88e1      	ldrh	r1, [r4, #6]
    7708:	80c1      	strh	r1, [r0, #6]
    770a:	8861      	ldrh	r1, [r4, #2]
    770c:	8041      	strh	r1, [r0, #2]
    770e:	2000      	movs	r0, #0
    7710:	bd10      	pop	{r4, pc}
    7712:	0000      	.short	0x0000
    7714:	2000026a 	.word	0x2000026a
    7718:	0c124b0c 	.word	0x0c124b0c
    771c:	124b0059 	.word	0x124b0059
	...

00007728 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    7728:	b570      	push	{r4, r5, r6, lr}
    772a:	460d      	mov	r5, r1
    772c:	f7fb f9da 	bl	2ae4 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    7730:	4c05      	ldr	r4, [pc, #20]	; (7748 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x20>)
    7732:	6065      	str	r5, [r4, #4]
    7734:	68a0      	ldr	r0, [r4, #8]
    7736:	f008 fcd1 	bl	100dc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4a0>
    773a:	f008 f9f7 	bl	fb2c <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    773e:	f7fb fb37 	bl	2db0 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    7742:	2001      	movs	r0, #1
    7744:	7020      	strb	r0, [r4, #0]
    7746:	bd70      	pop	{r4, r5, r6, pc}
    7748:	20000274 	.word	0x20000274

0000774c <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ>:
    774c:	4801      	ldr	r0, [pc, #4]	; (7754 <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ+0x8>)
    774e:	7800      	ldrb	r0, [r0, #0]
    7750:	4770      	bx	lr
    7752:	0000      	.short	0x0000
    7754:	20000274 	.word	0x20000274

00007758 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    7758:	b510      	push	{r4, lr}
    775a:	4c06      	ldr	r4, [pc, #24]	; (7774 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x1c>)
    775c:	68e0      	ldr	r0, [r4, #12]
    775e:	f008 fcbd 	bl	100dc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4a0>
    7762:	6920      	ldr	r0, [r4, #16]
    7764:	f008 fcba 	bl	100dc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4a0>
    7768:	f008 fa68 	bl	fc3c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    776c:	2000      	movs	r0, #0
    776e:	7020      	strb	r0, [r4, #0]
    7770:	bd10      	pop	{r4, pc}
    7772:	0000      	.short	0x0000
    7774:	20000274 	.word	0x20000274

00007778 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI>:
    7778:	b510      	push	{r4, lr}
    777a:	4908      	ldr	r1, [pc, #32]	; (779c <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x24>)
    777c:	4808      	ldr	r0, [pc, #32]	; (77a0 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x28>)
    777e:	f008 fca0 	bl	100c2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x486>
    7782:	4807      	ldr	r0, [pc, #28]	; (77a0 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x28>)
    7784:	4907      	ldr	r1, [pc, #28]	; (77a4 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x2c>)
    7786:	1d00      	adds	r0, r0, #4
    7788:	f008 fc9b 	bl	100c2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x486>
    778c:	4804      	ldr	r0, [pc, #16]	; (77a0 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x28>)
    778e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7792:	4905      	ldr	r1, [pc, #20]	; (77a8 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x30>)
    7794:	3008      	adds	r0, #8
    7796:	f008 bc94 	b.w	100c2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x486>
    779a:	0000      	.short	0x0000
    779c:	20000290 	.word	0x20000290
    77a0:	2000027c 	.word	0x2000027c
    77a4:	20000298 	.word	0x20000298
    77a8:	20000288 	.word	0x20000288
    77ac:	b510      	push	{r4, lr}
    77ae:	f7fb fe33 	bl	3418 <sym_K7SQKMVWESLZUZE22L4CEOMCL4JSVJET4SYEPLI>
    77b2:	f000 f813 	bl	77dc <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x64>
    77b6:	f006 f868 	bl	d88a <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
    77ba:	4907      	ldr	r1, [pc, #28]	; (77d8 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x60>)
    77bc:	f5a1 7081 	sub.w	r0, r1, #258	; 0x102
    77c0:	f7f9 ff72 	bl	16a8 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>
    77c4:	2000      	movs	r0, #0
    77c6:	f005 ffbe 	bl	d746 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    77ca:	f7fd fe77 	bl	54bc <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY>
    77ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    77d2:	f7fb b98d 	b.w	2af0 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY>
    77d6:	0000      	.short	0x0000
    77d8:	20001842 	.word	0x20001842
    77dc:	b510      	push	{r4, lr}
    77de:	f7ff fb69 	bl	6eb4 <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA>
    77e2:	f7fd f88f 	bl	4904 <sym_ONCJZGDCVZ7ETEDMUY5VMUUWXXIFFJBUOZSJQ3Q>
    77e6:	f7fd fcfb 	bl	51e0 <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI>
    77ea:	f7ff fd07 	bl	71fc <sym_UY577SX5HIKP7SN7G6RHWTFDXAXFXXF32S4VJUA>
    77ee:	4601      	mov	r1, r0
    77f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    77f4:	4801      	ldr	r0, [pc, #4]	; (77fc <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x84>)
    77f6:	f7fb bd6b 	b.w	32d0 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY>
    77fa:	0000      	.short	0x0000
    77fc:	20001740 	.word	0x20001740

00007800 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    7800:	4a04      	ldr	r2, [pc, #16]	; (7814 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x14>)
    7802:	08c1      	lsrs	r1, r0, #3
    7804:	f000 0307 	and.w	r3, r0, #7
    7808:	2001      	movs	r0, #1
    780a:	4098      	lsls	r0, r3
    780c:	5c53      	ldrb	r3, [r2, r1]
    780e:	4303      	orrs	r3, r0
    7810:	5453      	strb	r3, [r2, r1]
    7812:	4770      	bx	lr
    7814:	20000020 	.word	0x20000020

00007818 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    7818:	4901      	ldr	r1, [pc, #4]	; (7820 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    781a:	e9d1 0100 	ldrd	r0, r1, [r1]
    781e:	4770      	bx	lr
    7820:	20000020 	.word	0x20000020

00007824 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    7824:	4806      	ldr	r0, [pc, #24]	; (7840 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x1c>)
    7826:	8801      	ldrh	r1, [r0, #0]
    7828:	7900      	ldrb	r0, [r0, #4]
    782a:	0602      	lsls	r2, r0, #24
    782c:	ea42 2011 	orr.w	r0, r2, r1, lsr #8
    7830:	f000 0001 	and.w	r0, r0, #1
    7834:	1800      	adds	r0, r0, r0
    7836:	b2c0      	uxtb	r0, r0
    7838:	f040 0001 	orr.w	r0, r0, #1
    783c:	4770      	bx	lr
    783e:	0000      	.short	0x0000
    7840:	20000020 	.word	0x20000020

00007844 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
    7844:	b510      	push	{r4, lr}
    7846:	f004 fc99 	bl	c17c <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    784a:	2200      	movs	r2, #0
    784c:	4b08      	ldr	r3, [pc, #32]	; (7870 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
    784e:	4611      	mov	r1, r2
    7850:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    7854:	4284      	cmp	r4, r0
    7856:	d303      	bcc.n	7860 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
    7858:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    785c:	7882      	ldrb	r2, [r0, #2]
    785e:	e003      	b.n	7868 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
    7860:	1c49      	adds	r1, r1, #1
    7862:	b2c9      	uxtb	r1, r1
    7864:	290c      	cmp	r1, #12
    7866:	d3f3      	bcc.n	7850 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
    7868:	4802      	ldr	r0, [pc, #8]	; (7874 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
    786a:	7002      	strb	r2, [r0, #0]
    786c:	bd10      	pop	{r4, pc}
    786e:	0000      	.short	0x0000
    7870:	00010158 	.word	0x00010158
    7874:	20000359 	.word	0x20000359

00007878 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY>:
    7878:	4802      	ldr	r0, [pc, #8]	; (7884 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY+0xc>)
    787a:	7800      	ldrb	r0, [r0, #0]
    787c:	f000 0007 	and.w	r0, r0, #7
    7880:	4770      	bx	lr
    7882:	0000      	.short	0x0000
    7884:	20000359 	.word	0x20000359

00007888 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    7888:	b570      	push	{r4, r5, r6, lr}
    788a:	4605      	mov	r5, r0
    788c:	4616      	mov	r6, r2
    788e:	460c      	mov	r4, r1
    7890:	2002      	movs	r0, #2
    7892:	f000 f9b7 	bl	7c04 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    7896:	4906      	ldr	r1, [pc, #24]	; (78b0 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    7898:	2001      	movs	r0, #1
    789a:	1ef6      	subs	r6, r6, #3
    789c:	7008      	strb	r0, [r1, #0]
    789e:	4805      	ldr	r0, [pc, #20]	; (78b4 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    78a0:	6006      	str	r6, [r0, #0]
    78a2:	4804      	ldr	r0, [pc, #16]	; (78b4 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    78a4:	3808      	subs	r0, #8
    78a6:	6005      	str	r5, [r0, #0]
    78a8:	1f00      	subs	r0, r0, #4
    78aa:	6004      	str	r4, [r0, #0]
    78ac:	bd70      	pop	{r4, r5, r6, pc}
    78ae:	0000      	.short	0x0000
    78b0:	2000035a 	.word	0x2000035a
    78b4:	4000f510 	.word	0x4000f510

000078b8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    78b8:	b510      	push	{r4, lr}
    78ba:	4c0c      	ldr	r4, [pc, #48]	; (78ec <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    78bc:	7820      	ldrb	r0, [r4, #0]
    78be:	b180      	cbz	r0, 78e2 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    78c0:	490b      	ldr	r1, [pc, #44]	; (78f0 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    78c2:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    78c6:	6008      	str	r0, [r1, #0]
    78c8:	f000 f86a 	bl	79a0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    78cc:	2100      	movs	r1, #0
    78ce:	b120      	cbz	r0, 78da <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    78d0:	2001      	movs	r0, #1
    78d2:	7060      	strb	r0, [r4, #1]
    78d4:	4807      	ldr	r0, [pc, #28]	; (78f4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    78d6:	6800      	ldr	r0, [r0, #0]
    78d8:	e001      	b.n	78de <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    78da:	7061      	strb	r1, [r4, #1]
    78dc:	2010      	movs	r0, #16
    78de:	70a0      	strb	r0, [r4, #2]
    78e0:	7021      	strb	r1, [r4, #0]
    78e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    78e6:	2000      	movs	r0, #0
    78e8:	f000 b98c 	b.w	7c04 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    78ec:	2000035a 	.word	0x2000035a
    78f0:	4001f508 	.word	0x4001f508
    78f4:	4000f400 	.word	0x4000f400

000078f8 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    78f8:	b510      	push	{r4, lr}
    78fa:	2002      	movs	r0, #2
    78fc:	f000 f982 	bl	7c04 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    7900:	4904      	ldr	r1, [pc, #16]	; (7914 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    7902:	2001      	movs	r0, #1
    7904:	7008      	strb	r0, [r1, #0]
    7906:	f000 f859 	bl	79bc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    790a:	4903      	ldr	r1, [pc, #12]	; (7918 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    790c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    7910:	6008      	str	r0, [r1, #0]
    7912:	bd10      	pop	{r4, pc}
    7914:	2000035a 	.word	0x2000035a
    7918:	4001f504 	.word	0x4001f504

0000791c <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    791c:	4803      	ldr	r0, [pc, #12]	; (792c <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    791e:	2100      	movs	r1, #0
    7920:	7001      	strb	r1, [r0, #0]
    7922:	7041      	strb	r1, [r0, #1]
    7924:	2110      	movs	r1, #16
    7926:	7081      	strb	r1, [r0, #2]
    7928:	4770      	bx	lr
    792a:	0000      	.short	0x0000
    792c:	2000035a 	.word	0x2000035a

00007930 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    7930:	4807      	ldr	r0, [pc, #28]	; (7950 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    7932:	b510      	push	{r4, lr}
    7934:	7801      	ldrb	r1, [r0, #0]
    7936:	b141      	cbz	r1, 794a <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    7938:	f000 f832 	bl	79a0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    793c:	b118      	cbz	r0, 7946 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    793e:	4805      	ldr	r0, [pc, #20]	; (7954 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    7940:	6800      	ldr	r0, [r0, #0]
    7942:	b2c0      	uxtb	r0, r0
    7944:	bd10      	pop	{r4, pc}
    7946:	2010      	movs	r0, #16
    7948:	bd10      	pop	{r4, pc}
    794a:	7880      	ldrb	r0, [r0, #2]
    794c:	bd10      	pop	{r4, pc}
    794e:	0000      	.short	0x0000
    7950:	2000035a 	.word	0x2000035a
    7954:	4000f400 	.word	0x4000f400

00007958 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    7958:	4808      	ldr	r0, [pc, #32]	; (797c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    795a:	b510      	push	{r4, lr}
    795c:	7801      	ldrb	r1, [r0, #0]
    795e:	b159      	cbz	r1, 7978 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    7960:	4807      	ldr	r0, [pc, #28]	; (7980 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    7962:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    7966:	b128      	cbz	r0, 7974 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    7968:	f000 f80c 	bl	7984 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    796c:	2800      	cmp	r0, #0
    796e:	d000      	beq.n	7972 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    7970:	2001      	movs	r0, #1
    7972:	bd10      	pop	{r4, pc}
    7974:	2002      	movs	r0, #2
    7976:	bd10      	pop	{r4, pc}
    7978:	7840      	ldrb	r0, [r0, #1]
    797a:	bd10      	pop	{r4, pc}
    797c:	2000035a 	.word	0x2000035a
    7980:	4000f000 	.word	0x4000f000
    7984:	4805      	ldr	r0, [pc, #20]	; (799c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    7986:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    798a:	b111      	cbz	r1, 7992 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    798c:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    7990:	b108      	cbz	r0, 7996 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    7992:	2000      	movs	r0, #0
    7994:	4770      	bx	lr
    7996:	2001      	movs	r0, #1
    7998:	4770      	bx	lr
    799a:	0000      	.short	0x0000
    799c:	4000f000 	.word	0x4000f000
    79a0:	4805      	ldr	r0, [pc, #20]	; (79b8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    79a2:	b510      	push	{r4, lr}
    79a4:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    79a8:	b120      	cbz	r0, 79b4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    79aa:	f7ff ffeb 	bl	7984 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    79ae:	b108      	cbz	r0, 79b4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    79b0:	2001      	movs	r0, #1
    79b2:	bd10      	pop	{r4, pc}
    79b4:	2000      	movs	r0, #0
    79b6:	bd10      	pop	{r4, pc}
    79b8:	4000f000 	.word	0x4000f000
    79bc:	4804      	ldr	r0, [pc, #16]	; (79d0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    79be:	2100      	movs	r1, #0
    79c0:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    79c4:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    79c8:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    79cc:	4770      	bx	lr
    79ce:	0000      	.short	0x0000
    79d0:	4000f000 	.word	0x4000f000

000079d4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>:
    79d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    79d8:	4604      	mov	r4, r0
    79da:	461e      	mov	r6, r3
    79dc:	4690      	mov	r8, r2
    79de:	460f      	mov	r7, r1
    79e0:	2001      	movs	r0, #1
    79e2:	f000 f90f 	bl	7c04 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    79e6:	4d1e      	ldr	r5, [pc, #120]	; (7a60 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x8c>)
    79e8:	481e      	ldr	r0, [pc, #120]	; (7a64 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x90>)
    79ea:	f004 0103 	and.w	r1, r4, #3
    79ee:	712e      	strb	r6, [r5, #4]
    79f0:	6800      	ldr	r0, [r0, #0]
    79f2:	0432      	lsls	r2, r6, #16
    79f4:	f361 0007 	bfi	r0, r1, #0, #8
    79f8:	f366 200f 	bfi	r0, r6, #8, #8
    79fc:	0c00      	lsrs	r0, r0, #16
    79fe:	4e1a      	ldr	r6, [pc, #104]	; (7a68 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
    7a00:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
    7a04:	4308      	orrs	r0, r1
    7a06:	f8c6 0504 	str.w	r0, [r6, #1284]	; 0x504
    7a0a:	4818      	ldr	r0, [pc, #96]	; (7a6c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
    7a0c:	6007      	str	r7, [r0, #0]
    7a0e:	f008 fd91 	bl	10534 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    7a12:	b938      	cbnz	r0, 7a24 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x50>
    7a14:	4815      	ldr	r0, [pc, #84]	; (7a6c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
    7a16:	3010      	adds	r0, #16
    7a18:	6801      	ldr	r1, [r0, #0]
    7a1a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    7a1e:	ea41 0108 	orr.w	r1, r1, r8
    7a22:	6001      	str	r1, [r0, #0]
    7a24:	f000 f8e4 	bl	7bf0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
    7a28:	b10c      	cbz	r4, 7a2e <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x5a>
    7a2a:	2c04      	cmp	r4, #4
    7a2c:	d107      	bne.n	7a3e <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x6a>
    7a2e:	4811      	ldr	r0, [pc, #68]	; (7a74 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0xa0>)
    7a30:	490d      	ldr	r1, [pc, #52]	; (7a68 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
    7a32:	4a0f      	ldr	r2, [pc, #60]	; (7a70 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x9c>)
    7a34:	1d09      	adds	r1, r1, #4
    7a36:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
    7a3a:	f8c0 1514 	str.w	r1, [r0, #1300]	; 0x514
    7a3e:	2001      	movs	r0, #1
    7a40:	7068      	strb	r0, [r5, #1]
    7a42:	70ec      	strb	r4, [r5, #3]
    7a44:	b11c      	cbz	r4, 7a4e <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    7a46:	2c01      	cmp	r4, #1
    7a48:	d001      	beq.n	7a4e <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    7a4a:	2c02      	cmp	r4, #2
    7a4c:	d106      	bne.n	7a5c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x88>
    7a4e:	7028      	strb	r0, [r5, #0]
    7a50:	2100      	movs	r1, #0
    7a52:	f8c6 1100 	str.w	r1, [r6, #256]	; 0x100
    7a56:	f8c6 1200 	str.w	r1, [r6, #512]	; 0x200
    7a5a:	6030      	str	r0, [r6, #0]
    7a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7a60:	2000035d 	.word	0x2000035d
    7a64:	00007c00 	.word	0x00007c00
    7a68:	4000f000 	.word	0x4000f000
    7a6c:	4000f508 	.word	0x4000f508
    7a70:	4000f100 	.word	0x4000f100
    7a74:	4001f088 	.word	0x4001f088

00007a78 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>:
    7a78:	b570      	push	{r4, r5, r6, lr}
    7a7a:	4a1c      	ldr	r2, [pc, #112]	; (7aec <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x74>)
    7a7c:	7853      	ldrb	r3, [r2, #1]
    7a7e:	b1a3      	cbz	r3, 7aaa <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x32>
    7a80:	4b1b      	ldr	r3, [pc, #108]	; (7af0 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x78>)
    7a82:	6019      	str	r1, [r3, #0]
    7a84:	1d19      	adds	r1, r3, #4
    7a86:	6008      	str	r0, [r1, #0]
    7a88:	2501      	movs	r5, #1
    7a8a:	7095      	strb	r5, [r2, #2]
    7a8c:	4610      	mov	r0, r2
    7a8e:	78d6      	ldrb	r6, [r2, #3]
    7a90:	4b18      	ldr	r3, [pc, #96]	; (7af4 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
    7a92:	7800      	ldrb	r0, [r0, #0]
    7a94:	4c18      	ldr	r4, [pc, #96]	; (7af8 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x80>)
    7a96:	2100      	movs	r1, #0
    7a98:	b156      	cbz	r6, 7ab0 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x38>
    7a9a:	2e04      	cmp	r6, #4
    7a9c:	d01b      	beq.n	7ad6 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5e>
    7a9e:	b308      	cbz	r0, 7ae4 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6c>
    7aa0:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    7aa4:	0668      	lsls	r0, r5, #25
    7aa6:	6018      	str	r0, [r3, #0]
    7aa8:	bd70      	pop	{r4, r5, r6, pc}
    7aaa:	f240 11bd 	movw	r1, #445	; 0x1bd
    7aae:	e01a      	b.n	7ae6 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
    7ab0:	b178      	cbz	r0, 7ad2 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5a>
    7ab2:	4620      	mov	r0, r4
    7ab4:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    7ab8:	f44f 3600 	mov.w	r6, #131072	; 0x20000
    7abc:	601e      	str	r6, [r3, #0]
    7abe:	1271      	asrs	r1, r6, #9
    7ac0:	f008 fbc2 	bl	10248 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    7ac4:	2800      	cmp	r0, #0
    7ac6:	d0ef      	beq.n	7aa8 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x30>
    7ac8:	6065      	str	r5, [r4, #4]
    7aca:	480a      	ldr	r0, [pc, #40]	; (7af4 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
    7acc:	1d00      	adds	r0, r0, #4
    7ace:	6006      	str	r6, [r0, #0]
    7ad0:	bd70      	pop	{r4, r5, r6, pc}
    7ad2:	21b3      	movs	r1, #179	; 0xb3
    7ad4:	e007      	b.n	7ae6 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
    7ad6:	7015      	strb	r5, [r2, #0]
    7ad8:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    7adc:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
    7ae0:	6025      	str	r5, [r4, #0]
    7ae2:	bd70      	pop	{r4, r5, r6, pc}
    7ae4:	21c6      	movs	r1, #198	; 0xc6
    7ae6:	203c      	movs	r0, #60	; 0x3c
    7ae8:	f7f8 ffbc 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7aec:	2000035d 	.word	0x2000035d
    7af0:	4000f50c 	.word	0x4000f50c
    7af4:	4001f504 	.word	0x4001f504
    7af8:	4000f000 	.word	0x4000f000

00007afc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    7afc:	b570      	push	{r4, r5, r6, lr}
    7afe:	4d05      	ldr	r5, [pc, #20]	; (7b14 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x18>)
    7b00:	2400      	movs	r4, #0
    7b02:	7828      	ldrb	r0, [r5, #0]
    7b04:	b110      	cbz	r0, 7b0c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x10>
    7b06:	f000 f873 	bl	7bf0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
    7b0a:	702c      	strb	r4, [r5, #0]
    7b0c:	706c      	strb	r4, [r5, #1]
    7b0e:	70ac      	strb	r4, [r5, #2]
    7b10:	bd70      	pop	{r4, r5, r6, pc}
    7b12:	0000      	.short	0x0000
    7b14:	2000035d 	.word	0x2000035d

00007b18 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    7b18:	4802      	ldr	r0, [pc, #8]	; (7b24 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0xc>)
    7b1a:	2100      	movs	r1, #0
    7b1c:	7001      	strb	r1, [r0, #0]
    7b1e:	7041      	strb	r1, [r0, #1]
    7b20:	7081      	strb	r1, [r0, #2]
    7b22:	4770      	bx	lr
    7b24:	2000035d 	.word	0x2000035d

00007b28 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    7b28:	480b      	ldr	r0, [pc, #44]	; (7b58 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x30>)
    7b2a:	b510      	push	{r4, lr}
    7b2c:	7800      	ldrb	r0, [r0, #0]
    7b2e:	b158      	cbz	r0, 7b48 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>
    7b30:	f44f 7182 	mov.w	r1, #260	; 0x104
    7b34:	4809      	ldr	r0, [pc, #36]	; (7b5c <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x34>)
    7b36:	f008 fb87 	bl	10248 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    7b3a:	b140      	cbz	r0, 7b4e <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x26>
    7b3c:	4808      	ldr	r0, [pc, #32]	; (7b60 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x38>)
    7b3e:	6800      	ldr	r0, [r0, #0]
    7b40:	2800      	cmp	r0, #0
    7b42:	d000      	beq.n	7b46 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1e>
    7b44:	2001      	movs	r0, #1
    7b46:	bd10      	pop	{r4, pc}
    7b48:	f240 2123 	movw	r1, #547	; 0x223
    7b4c:	e001      	b.n	7b52 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x2a>
    7b4e:	f44f 7109 	mov.w	r1, #548	; 0x224
    7b52:	203c      	movs	r0, #60	; 0x3c
    7b54:	f7f8 ff86 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7b58:	2000035d 	.word	0x2000035d
    7b5c:	4000f000 	.word	0x4000f000
    7b60:	4000f400 	.word	0x4000f400

00007b64 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    7b64:	4801      	ldr	r0, [pc, #4]	; (7b6c <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    7b66:	2101      	movs	r1, #1
    7b68:	6081      	str	r1, [r0, #8]
    7b6a:	4770      	bx	lr
    7b6c:	4000f000 	.word	0x4000f000

00007b70 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    7b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7b74:	481b      	ldr	r0, [pc, #108]	; (7be4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x74>)
    7b76:	7800      	ldrb	r0, [r0, #0]
    7b78:	b1d8      	cbz	r0, 7bb2 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x42>
    7b7a:	f8df 806c 	ldr.w	r8, [pc, #108]	; 7be8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    7b7e:	f44f 7682 	mov.w	r6, #260	; 0x104
    7b82:	4631      	mov	r1, r6
    7b84:	4640      	mov	r0, r8
    7b86:	f008 fb5f 	bl	10248 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    7b8a:	2800      	cmp	r0, #0
    7b8c:	d128      	bne.n	7be0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>
    7b8e:	2002      	movs	r0, #2
    7b90:	f8c8 0304 	str.w	r0, [r8, #772]	; 0x304
    7b94:	4c15      	ldr	r4, [pc, #84]	; (7bec <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x7c>)
    7b96:	6820      	ldr	r0, [r4, #0]
    7b98:	43c0      	mvns	r0, r0
    7b9a:	f340 1500 	sbfx	r5, r0, #4, #1
    7b9e:	6820      	ldr	r0, [r4, #0]
    7ba0:	f040 0010 	orr.w	r0, r0, #16
    7ba4:	6020      	str	r0, [r4, #0]
    7ba6:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    7baa:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    7bae:	1c6d      	adds	r5, r5, #1
    7bb0:	e008      	b.n	7bc4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x54>
    7bb2:	f240 212f 	movw	r1, #559	; 0x22f
    7bb6:	203c      	movs	r0, #60	; 0x3c
    7bb8:	f7f8 ff54 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7bbc:	f8c9 7280 	str.w	r7, [r9, #640]	; 0x280
    7bc0:	f008 fcf8 	bl	105b4 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    7bc4:	4631      	mov	r1, r6
    7bc6:	4640      	mov	r0, r8
    7bc8:	f008 fb3e 	bl	10248 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    7bcc:	2800      	cmp	r0, #0
    7bce:	d0f5      	beq.n	7bbc <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x4c>
    7bd0:	b91d      	cbnz	r5, 7bda <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6a>
    7bd2:	6820      	ldr	r0, [r4, #0]
    7bd4:	f020 0010 	bic.w	r0, r0, #16
    7bd8:	6020      	str	r0, [r4, #0]
    7bda:	2002      	movs	r0, #2
    7bdc:	f8c8 0308 	str.w	r0, [r8, #776]	; 0x308
    7be0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7be4:	2000035d 	.word	0x2000035d
    7be8:	4000f000 	.word	0x4000f000
    7bec:	e000ed10 	.word	0xe000ed10
    7bf0:	4902      	ldr	r1, [pc, #8]	; (7bfc <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x8c>)
    7bf2:	4801      	ldr	r0, [pc, #4]	; (7bf8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x88>)
    7bf4:	6008      	str	r0, [r1, #0]
    7bf6:	4770      	bx	lr
    7bf8:	02020000 	.word	0x02020000
    7bfc:	4001f508 	.word	0x4001f508
    7c00:	00010000 	.word	0x00010000

00007c04 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    7c04:	b510      	push	{r4, lr}
    7c06:	4604      	mov	r4, r0
    7c08:	f000 f820 	bl	7c4c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
    7c0c:	2c00      	cmp	r4, #0
    7c0e:	d00e      	beq.n	7c2e <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2a>
    7c10:	4a0b      	ldr	r2, [pc, #44]	; (7c40 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    7c12:	480b      	ldr	r0, [pc, #44]	; (7c40 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    7c14:	490b      	ldr	r1, [pc, #44]	; (7c44 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    7c16:	3214      	adds	r2, #20
    7c18:	2c01      	cmp	r4, #1
    7c1a:	d005      	beq.n	7c28 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x24>
    7c1c:	2c02      	cmp	r4, #2
    7c1e:	d007      	beq.n	7c30 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2c>
    7c20:	2182      	movs	r1, #130	; 0x82
    7c22:	203d      	movs	r0, #61	; 0x3d
    7c24:	f7f8 ff1e 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7c28:	2302      	movs	r3, #2
    7c2a:	6003      	str	r3, [r0, #0]
    7c2c:	6011      	str	r1, [r2, #0]
    7c2e:	bd10      	pop	{r4, pc}
    7c30:	2303      	movs	r3, #3
    7c32:	6003      	str	r3, [r0, #0]
    7c34:	6011      	str	r1, [r2, #0]
    7c36:	4904      	ldr	r1, [pc, #16]	; (7c48 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    7c38:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    7c3c:	6008      	str	r0, [r1, #0]
    7c3e:	bd10      	pop	{r4, pc}
    7c40:	4000f500 	.word	0x4000f500
    7c44:	20001944 	.word	0x20001944
    7c48:	4001f504 	.word	0x4001f504
    7c4c:	4805      	ldr	r0, [pc, #20]	; (7c64 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    7c4e:	b510      	push	{r4, lr}
    7c50:	2100      	movs	r1, #0
    7c52:	6001      	str	r1, [r0, #0]
    7c54:	6001      	str	r1, [r0, #0]
    7c56:	f7ff ff51 	bl	7afc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    7c5a:	4903      	ldr	r1, [pc, #12]	; (7c68 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    7c5c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    7c60:	6008      	str	r0, [r1, #0]
    7c62:	bd10      	pop	{r4, pc}
    7c64:	4000f500 	.word	0x4000f500
    7c68:	4001f508 	.word	0x4001f508

00007c6c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    7c6c:	4805      	ldr	r0, [pc, #20]	; (7c84 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    7c6e:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    7c72:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    7c76:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    7c7a:	2100      	movs	r1, #0
    7c7c:	f8c0 1560 	str.w	r1, [r0, #1376]	; 0x560
    7c80:	4770      	bx	lr
    7c82:	0000      	.short	0x0000
    7c84:	40001000 	.word	0x40001000

00007c88 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    7c88:	4904      	ldr	r1, [pc, #16]	; (7c9c <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    7c8a:	f8c1 0560 	str.w	r0, [r1, #1376]	; 0x560
    7c8e:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
    7c92:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    7c96:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    7c9a:	4770      	bx	lr
    7c9c:	40001000 	.word	0x40001000

00007ca0 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>:
    7ca0:	4902      	ldr	r1, [pc, #8]	; (7cac <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I+0xc>)
    7ca2:	5c08      	ldrb	r0, [r1, r0]
    7ca4:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    7ca8:	4770      	bx	lr
    7caa:	0000      	.short	0x0000
    7cac:	00008972 	.word	0x00008972

00007cb0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    7cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7cb2:	4c24      	ldr	r4, [pc, #144]	; (7d44 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x94>)
    7cb4:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    7cb8:	f010 0f10 	tst.w	r0, #16
    7cbc:	d001      	beq.n	7cc2 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x12>
    7cbe:	2701      	movs	r7, #1
    7cc0:	e000      	b.n	7cc4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x14>
    7cc2:	2700      	movs	r7, #0
    7cc4:	2010      	movs	r0, #16
    7cc6:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    7cca:	2002      	movs	r0, #2
    7ccc:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    7cd0:	481d      	ldr	r0, [pc, #116]	; (7d48 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x98>)
    7cd2:	2500      	movs	r5, #0
    7cd4:	491d      	ldr	r1, [pc, #116]	; (7d4c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9c>)
    7cd6:	f880 502c 	strb.w	r5, [r0, #44]	; 0x2c
    7cda:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
    7cde:	6008      	str	r0, [r1, #0]
    7ce0:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
    7ce4:	f44f 7688 	mov.w	r6, #272	; 0x110
    7ce8:	f010 0fff 	tst.w	r0, #255	; 0xff
    7cec:	d019      	beq.n	7d22 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x72>
    7cee:	20ff      	movs	r0, #255	; 0xff
    7cf0:	f88d 0000 	strb.w	r0, [sp]
    7cf4:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    7cf8:	2001      	movs	r0, #1
    7cfa:	6120      	str	r0, [r4, #16]
    7cfc:	e005      	b.n	7d0a <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x5a>
    7cfe:	bf00      	nop
    7d00:	f89d 0000 	ldrb.w	r0, [sp]
    7d04:	1e40      	subs	r0, r0, #1
    7d06:	f88d 0000 	strb.w	r0, [sp]
    7d0a:	f89d 0000 	ldrb.w	r0, [sp]
    7d0e:	b128      	cbz	r0, 7d1c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6c>
    7d10:	4631      	mov	r1, r6
    7d12:	4620      	mov	r0, r4
    7d14:	f008 fac7 	bl	102a6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    7d18:	2800      	cmp	r0, #0
    7d1a:	d0f1      	beq.n	7d00 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x50>
    7d1c:	f89d 0000 	ldrb.w	r0, [sp]
    7d20:	b158      	cbz	r0, 7d3a <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x8a>
    7d22:	f000 fc15 	bl	8550 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x90>
    7d26:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    7d2a:	f000 fda3 	bl	8874 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b4>
    7d2e:	2f00      	cmp	r7, #0
    7d30:	d002      	beq.n	7d38 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x88>
    7d32:	2010      	movs	r0, #16
    7d34:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    7d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7d3a:	f640 01aa 	movw	r1, #2218	; 0x8aa
    7d3e:	203e      	movs	r0, #62	; 0x3e
    7d40:	f7f8 fe90 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7d44:	40001000 	.word	0x40001000
    7d48:	20001050 	.word	0x20001050
    7d4c:	4001f508 	.word	0x4001f508

00007d50 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    7d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7d54:	4d18      	ldr	r5, [pc, #96]	; (7db8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x68>)
    7d56:	4607      	mov	r7, r0
    7d58:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    7d5c:	07c2      	lsls	r2, r0, #31
    7d5e:	d00f      	beq.n	7d80 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x30>
    7d60:	4c16      	ldr	r4, [pc, #88]	; (7dbc <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x6c>)
    7d62:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
    7d66:	f042 0201 	orr.w	r2, r2, #1
    7d6a:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
    7d6e:	f040 0002 	orr.w	r0, r0, #2
    7d72:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
    7d76:	2601      	movs	r6, #1
    7d78:	b13f      	cbz	r7, 7d8a <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x3a>
    7d7a:	2f01      	cmp	r7, #1
    7d7c:	d00b      	beq.n	7d96 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x46>
    7d7e:	e010      	b.n	7da2 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    7d80:	f240 7185 	movw	r1, #1925	; 0x785
    7d84:	203e      	movs	r0, #62	; 0x3e
    7d86:	f7f8 fe6d 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7d8a:	4608      	mov	r0, r1
    7d8c:	f000 fdcc 	bl	8928 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x468>
    7d90:	726e      	strb	r6, [r5, #9]
    7d92:	6026      	str	r6, [r4, #0]
    7d94:	e005      	b.n	7da2 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    7d96:	4608      	mov	r0, r1
    7d98:	f000 fdac 	bl	88f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x434>
    7d9c:	2002      	movs	r0, #2
    7d9e:	7268      	strb	r0, [r5, #9]
    7da0:	6066      	str	r6, [r4, #4]
    7da2:	4807      	ldr	r0, [pc, #28]	; (7dc0 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    7da4:	64c6      	str	r6, [r0, #76]	; 0x4c
    7da6:	4806      	ldr	r0, [pc, #24]	; (7dc0 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    7da8:	300c      	adds	r0, #12
    7daa:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    7dae:	4638      	mov	r0, r7
    7db0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7db4:	f000 bd30 	b.w	8818 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x358>
    7db8:	20001050 	.word	0x20001050
    7dbc:	40001000 	.word	0x40001000
    7dc0:	40008000 	.word	0x40008000

00007dc4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    7dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7dc8:	4c2c      	ldr	r4, [pc, #176]	; (7e7c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb8>)
    7dca:	0006      	movs	r6, r0
    7dcc:	4d2c      	ldr	r5, [pc, #176]	; (7e80 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xbc>)
    7dce:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    7dd2:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 7e84 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc0>
    7dd6:	f040 0002 	orr.w	r0, r0, #2
    7dda:	4689      	mov	r9, r1
    7ddc:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    7de0:	f04f 0700 	mov.w	r7, #0
    7de4:	d002      	beq.n	7dec <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x28>
    7de6:	2e01      	cmp	r6, #1
    7de8:	d020      	beq.n	7e2c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x68>
    7dea:	e036      	b.n	7e5a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    7dec:	4608      	mov	r0, r1
    7dee:	f000 fd9b 	bl	8928 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x468>
    7df2:	2001      	movs	r0, #1
    7df4:	7260      	strb	r0, [r4, #9]
    7df6:	79e0      	ldrb	r0, [r4, #7]
    7df8:	2801      	cmp	r0, #1
    7dfa:	d105      	bne.n	7e08 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x44>
    7dfc:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    7e00:	f040 0008 	orr.w	r0, r0, #8
    7e04:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    7e08:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    7e0a:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    7e0e:	62a0      	str	r0, [r4, #40]	; 0x28
    7e10:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    7e14:	f8c8 0000 	str.w	r0, [r8]
    7e18:	491b      	ldr	r1, [pc, #108]	; (7e88 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc4>)
    7e1a:	f831 0019 	ldrh.w	r0, [r1, r9, lsl #1]
    7e1e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    7e22:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
    7e26:	fbb0 f7f1 	udiv	r7, r0, r1
    7e2a:	e016      	b.n	7e5a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    7e2c:	4608      	mov	r0, r1
    7e2e:	f000 fd61 	bl	88f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x434>
    7e32:	2002      	movs	r0, #2
    7e34:	7260      	strb	r0, [r4, #9]
    7e36:	79e0      	ldrb	r0, [r4, #7]
    7e38:	2801      	cmp	r0, #1
    7e3a:	d105      	bne.n	7e48 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    7e3c:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    7e40:	f040 0004 	orr.w	r0, r0, #4
    7e44:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    7e48:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    7e4a:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    7e4e:	62a0      	str	r0, [r4, #40]	; 0x28
    7e50:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    7e54:	f8c8 0000 	str.w	r0, [r8]
    7e58:	2729      	movs	r7, #41	; 0x29
    7e5a:	f000 fbe5 	bl	8628 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x168>
    7e5e:	f008 fa6a 	bl	10336 <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>
    7e62:	b120      	cbz	r0, 7e6e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xaa>
    7e64:	f7ff ff24 	bl	7cb0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7e68:	2000      	movs	r0, #0
    7e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7e6e:	2100      	movs	r1, #0
    7e70:	4630      	mov	r0, r6
    7e72:	f000 fcd1 	bl	8818 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x358>
    7e76:	4638      	mov	r0, r7
    7e78:	e7f7      	b.n	7e6a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xa6>
    7e7a:	0000      	.short	0x0000
    7e7c:	20001050 	.word	0x20001050
    7e80:	40001000 	.word	0x40001000
    7e84:	4001f504 	.word	0x4001f504
    7e88:	0000896c 	.word	0x0000896c

00007e8c <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    7e8c:	b510      	push	{r4, lr}
    7e8e:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    7e90:	4901      	ldr	r1, [pc, #4]	; (7e98 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    7e92:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    7e96:	bd10      	pop	{r4, pc}
    7e98:	20001040 	.word	0x20001040

00007e9c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    7e9c:	b570      	push	{r4, r5, r6, lr}
    7e9e:	4c0f      	ldr	r4, [pc, #60]	; (7edc <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x40>)
    7ea0:	4603      	mov	r3, r0
    7ea2:	2002      	movs	r0, #2
    7ea4:	7320      	strb	r0, [r4, #12]
    7ea6:	f894 5021 	ldrb.w	r5, [r4, #33]	; 0x21
    7eaa:	2096      	movs	r0, #150	; 0x96
    7eac:	f894 1020 	ldrb.w	r1, [r4, #32]
    7eb0:	7d22      	ldrb	r2, [r4, #20]
    7eb2:	2d01      	cmp	r5, #1
    7eb4:	d00e      	beq.n	7ed4 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x38>
    7eb6:	f000 fd95 	bl	89e4 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    7eba:	6120      	str	r0, [r4, #16]
    7ebc:	4808      	ldr	r0, [pc, #32]	; (7ee0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    7ebe:	2100      	movs	r1, #0
    7ec0:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    7ec4:	6921      	ldr	r1, [r4, #16]
    7ec6:	69e0      	ldr	r0, [r4, #28]
    7ec8:	4408      	add	r0, r1
    7eca:	4905      	ldr	r1, [pc, #20]	; (7ee0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    7ecc:	1d09      	adds	r1, r1, #4
    7ece:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    7ed2:	bd70      	pop	{r4, r5, r6, pc}
    7ed4:	f000 fda4 	bl	8a20 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    7ed8:	e7ef      	b.n	7eba <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x1e>
    7eda:	0000      	.short	0x0000
    7edc:	20001050 	.word	0x20001050
    7ee0:	40008000 	.word	0x40008000

00007ee4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    7ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7ee8:	2238      	movs	r2, #56	; 0x38
    7eea:	2100      	movs	r1, #0
    7eec:	4813      	ldr	r0, [pc, #76]	; (7f3c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    7eee:	f008 fc38 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7ef2:	f000 fcbf 	bl	8874 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b4>
    7ef6:	f008 faf2 	bl	104de <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    7efa:	4d11      	ldr	r5, [pc, #68]	; (7f40 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    7efc:	4e10      	ldr	r6, [pc, #64]	; (7f40 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    7efe:	2400      	movs	r4, #0
    7f00:	4f0f      	ldr	r7, [pc, #60]	; (7f40 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    7f02:	3508      	adds	r5, #8
    7f04:	3610      	adds	r6, #16
    7f06:	b928      	cbnz	r0, 7f14 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    7f08:	f008 fb00 	bl	1050c <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    7f0c:	b910      	cbnz	r0, 7f14 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    7f0e:	f008 fb07 	bl	10520 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    7f12:	b108      	cbz	r0, 7f18 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    7f14:	2224      	movs	r2, #36	; 0x24
    7f16:	e006      	b.n	7f26 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    7f18:	f008 fb42 	bl	105a0 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    7f1c:	b910      	cbnz	r0, 7f24 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    7f1e:	f008 fb35 	bl	1058c <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    7f22:	b140      	cbz	r0, 7f36 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    7f24:	2240      	movs	r2, #64	; 0x40
    7f26:	21ff      	movs	r1, #255	; 0xff
    7f28:	4638      	mov	r0, r7
    7f2a:	f008 fc1a 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7f2e:	602c      	str	r4, [r5, #0]
    7f30:	6034      	str	r4, [r6, #0]
    7f32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7f36:	2238      	movs	r2, #56	; 0x38
    7f38:	e7f5      	b.n	7f26 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    7f3a:	0000      	.short	0x0000
    7f3c:	20001050 	.word	0x20001050
    7f40:	40000e00 	.word	0x40000e00

00007f44 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>:
    7f44:	4801      	ldr	r0, [pc, #4]	; (7f4c <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x8>)
    7f46:	69c0      	ldr	r0, [r0, #28]
    7f48:	4770      	bx	lr
    7f4a:	0000      	.short	0x0000
    7f4c:	20001050 	.word	0x20001050

00007f50 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    7f50:	b510      	push	{r4, lr}
    7f52:	f000 fc43 	bl	87dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x31c>
    7f56:	f7ff feab 	bl	7cb0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7f5a:	f004 fb8d 	bl	c678 <mpsl_fem_disable>
    7f5e:	b130      	cbz	r0, 7f6e <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    7f60:	1c40      	adds	r0, r0, #1
    7f62:	d004      	beq.n	7f6e <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    7f64:	f240 516d 	movw	r1, #1389	; 0x56d
    7f68:	203e      	movs	r0, #62	; 0x3e
    7f6a:	f7f8 fd7b 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7f6e:	480f      	ldr	r0, [pc, #60]	; (7fac <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x5c>)
    7f70:	4a0f      	ldr	r2, [pc, #60]	; (7fb0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x60>)
    7f72:	6a81      	ldr	r1, [r0, #40]	; 0x28
    7f74:	f041 6144 	orr.w	r1, r1, #205520896	; 0xc400000
    7f78:	6011      	str	r1, [r2, #0]
    7f7a:	2400      	movs	r4, #0
    7f7c:	6284      	str	r4, [r0, #40]	; 0x28
    7f7e:	7304      	strb	r4, [r0, #12]
    7f80:	61c4      	str	r4, [r0, #28]
    7f82:	6184      	str	r4, [r0, #24]
    7f84:	f000 fc2a 	bl	87dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x31c>
    7f88:	480a      	ldr	r0, [pc, #40]	; (7fb4 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x64>)
    7f8a:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    7f8e:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    7f92:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    7f96:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    7f9a:	2001      	movs	r0, #1
    7f9c:	f008 f972 	bl	10284 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    7fa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7fa4:	2001      	movs	r0, #1
    7fa6:	f008 b960 	b.w	1026a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    7faa:	0000      	.short	0x0000
    7fac:	20001050 	.word	0x20001050
    7fb0:	4001f508 	.word	0x4001f508
    7fb4:	40008000 	.word	0x40008000

00007fb8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    7fb8:	b570      	push	{r4, r5, r6, lr}
    7fba:	2001      	movs	r0, #1
    7fbc:	f008 f962 	bl	10284 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    7fc0:	4c37      	ldr	r4, [pc, #220]	; (80a0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa0>)
    7fc2:	2000      	movs	r0, #0
    7fc4:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    7fc8:	2001      	movs	r0, #1
    7fca:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    7fce:	f008 fabd 	bl	1054c <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    7fd2:	4d34      	ldr	r5, [pc, #208]	; (80a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa4>)
    7fd4:	b118      	cbz	r0, 7fde <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x26>
    7fd6:	6828      	ldr	r0, [r5, #0]
    7fd8:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    7fdc:	6028      	str	r0, [r5, #0]
    7fde:	f008 faa9 	bl	10534 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    7fe2:	b128      	cbz	r0, 7ff0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x38>
    7fe4:	6828      	ldr	r0, [r5, #0]
    7fe6:	4930      	ldr	r1, [pc, #192]	; (80a8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa8>)
    7fe8:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    7fec:	4308      	orrs	r0, r1
    7fee:	6028      	str	r0, [r5, #0]
    7ff0:	f008 fabc 	bl	1056c <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    7ff4:	b138      	cbz	r0, 8006 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6>
    7ff6:	482b      	ldr	r0, [pc, #172]	; (80a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa4>)
    7ff8:	1d00      	adds	r0, r0, #4
    7ffa:	6801      	ldr	r1, [r0, #0]
    7ffc:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    8000:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    8004:	6001      	str	r1, [r0, #0]
    8006:	4927      	ldr	r1, [pc, #156]	; (80a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa4>)
    8008:	4828      	ldr	r0, [pc, #160]	; (80ac <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xac>)
    800a:	313c      	adds	r1, #60	; 0x3c
    800c:	6008      	str	r0, [r1, #0]
    800e:	f004 fb6d 	bl	c6ec <mpsl_fem_device_config_254_apply_get>
    8012:	b140      	cbz	r0, 8026 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x26>
    8014:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    8018:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    801c:	1c41      	adds	r1, r0, #1
    801e:	d002      	beq.n	8026 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x26>
    8020:	4920      	ldr	r1, [pc, #128]	; (80a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa4>)
    8022:	3110      	adds	r1, #16
    8024:	6008      	str	r0, [r1, #0]
    8026:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    802a:	6e00      	ldr	r0, [r0, #96]	; 0x60
    802c:	1c41      	adds	r1, r0, #1
    802e:	d004      	beq.n	803a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3a>
    8030:	491f      	ldr	r1, [pc, #124]	; (80b0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb0>)
    8032:	680a      	ldr	r2, [r1, #0]
    8034:	f360 4217 	bfi	r2, r0, #16, #8
    8038:	600a      	str	r2, [r1, #0]
    803a:	f240 1103 	movw	r1, #259	; 0x103
    803e:	f240 605b 	movw	r0, #1627	; 0x65b
    8042:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    8046:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    804a:	2001      	movs	r0, #1
    804c:	f8c4 0530 	str.w	r0, [r4, #1328]	; 0x530
    8050:	f000 f842 	bl	80d8 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    8054:	f240 2001 	movw	r0, #513	; 0x201
    8058:	f8c4 0650 	str.w	r0, [r4, #1616]	; 0x650
    805c:	2002      	movs	r0, #2
    805e:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    8062:	4914      	ldr	r1, [pc, #80]	; (80b4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb4>)
    8064:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    8068:	6008      	str	r0, [r1, #0]
    806a:	4913      	ldr	r1, [pc, #76]	; (80b8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb8>)
    806c:	2000      	movs	r0, #0
    806e:	4d13      	ldr	r5, [pc, #76]	; (80bc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbc>)
    8070:	8608      	strh	r0, [r1, #48]	; 0x30
    8072:	3110      	adds	r1, #16
    8074:	61c8      	str	r0, [r1, #28]
    8076:	f881 002c 	strb.w	r0, [r1, #44]	; 0x2c
    807a:	7028      	strb	r0, [r5, #0]
    807c:	2001      	movs	r0, #1
    807e:	f008 f8f4 	bl	1026a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    8082:	2010      	movs	r0, #16
    8084:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    8088:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    808c:	2002      	movs	r0, #2
    808e:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    8092:	6868      	ldr	r0, [r5, #4]
    8094:	2800      	cmp	r0, #0
    8096:	d002      	beq.n	809e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9e>
    8098:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    809c:	4700      	bx	r0
    809e:	bd70      	pop	{r4, r5, r6, pc}
    80a0:	40001000 	.word	0x40001000
    80a4:	4000173c 	.word	0x4000173c
    80a8:	80000096 	.word	0x80000096
    80ac:	8900002c 	.word	0x8900002c
    80b0:	4000158c 	.word	0x4000158c
    80b4:	4001f504 	.word	0x4001f504
    80b8:	20001040 	.word	0x20001040
    80bc:	200002a0 	.word	0x200002a0

000080c0 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    80c0:	4901      	ldr	r1, [pc, #4]	; (80c8 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    80c2:	7548      	strb	r0, [r1, #21]
    80c4:	4770      	bx	lr
    80c6:	0000      	.short	0x0000
    80c8:	20001050 	.word	0x20001050

000080cc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    80cc:	4901      	ldr	r1, [pc, #4]	; (80d4 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x8>)
    80ce:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    80d2:	4770      	bx	lr
    80d4:	000089c0 	.word	0x000089c0

000080d8 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>:
    80d8:	4908      	ldr	r1, [pc, #32]	; (80fc <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x24>)
    80da:	b510      	push	{r4, lr}
    80dc:	7508      	strb	r0, [r1, #20]
    80de:	4908      	ldr	r1, [pc, #32]	; (8100 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x28>)
    80e0:	2801      	cmp	r0, #1
    80e2:	d006      	beq.n	80f2 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1a>
    80e4:	2802      	cmp	r0, #2
    80e6:	d006      	beq.n	80f6 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1e>
    80e8:	f640 5186 	movw	r1, #3462	; 0xd86
    80ec:	203e      	movs	r0, #62	; 0x3e
    80ee:	f7f8 fcb9 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    80f2:	2003      	movs	r0, #3
    80f4:	e000      	b.n	80f8 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x20>
    80f6:	2004      	movs	r0, #4
    80f8:	6008      	str	r0, [r1, #0]
    80fa:	bd10      	pop	{r4, pc}
    80fc:	20001050 	.word	0x20001050
    8100:	40001510 	.word	0x40001510

00008104 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    8104:	4905      	ldr	r1, [pc, #20]	; (811c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    8106:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
    810a:	4805      	ldr	r0, [pc, #20]	; (8120 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x1c>)
    810c:	f810 1f2c 	ldrb.w	r1, [r0, #44]!
    8110:	f041 0101 	orr.w	r1, r1, #1
    8114:	7001      	strb	r1, [r0, #0]
    8116:	f000 ba4d 	b.w	85b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    811a:	0000      	.short	0x0000
    811c:	40001000 	.word	0x40001000
    8120:	20001050 	.word	0x20001050

00008124 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    8124:	4901      	ldr	r1, [pc, #4]	; (812c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x8>)
    8126:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    812a:	4770      	bx	lr
    812c:	000089cc 	.word	0x000089cc

00008130 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    8130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8134:	4e30      	ldr	r6, [pc, #192]	; (81f8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>)
    8136:	4c31      	ldr	r4, [pc, #196]	; (81fc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xcc>)
    8138:	4688      	mov	r8, r1
    813a:	0007      	movs	r7, r0
    813c:	4615      	mov	r5, r2
    813e:	f04f 0901 	mov.w	r9, #1
    8142:	d006      	beq.n	8152 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x22>
    8144:	2f01      	cmp	r7, #1
    8146:	d012      	beq.n	816e <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x3e>
    8148:	f640 012d 	movw	r1, #2093	; 0x82d
    814c:	203e      	movs	r0, #62	; 0x3e
    814e:	f7f8 fc89 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8152:	4610      	mov	r0, r2
    8154:	f000 fbe8 	bl	8928 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x468>
    8158:	4829      	ldr	r0, [pc, #164]	; (8200 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd0>)
    815a:	f884 9009 	strb.w	r9, [r4, #9]
    815e:	f830 1015 	ldrh.w	r1, [r0, r5, lsl #1]
    8162:	4640      	mov	r0, r8
    8164:	f000 fb8e 	bl	8884 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c4>
    8168:	4605      	mov	r5, r0
    816a:	4630      	mov	r0, r6
    816c:	e00c      	b.n	8188 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x58>
    816e:	4610      	mov	r0, r2
    8170:	f000 fbc0 	bl	88f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x434>
    8174:	2002      	movs	r0, #2
    8176:	7260      	strb	r0, [r4, #9]
    8178:	f649 71ba 	movw	r1, #40890	; 0x9fba
    817c:	4640      	mov	r0, r8
    817e:	f000 fb81 	bl	8884 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c4>
    8182:	4605      	mov	r5, r0
    8184:	481c      	ldr	r0, [pc, #112]	; (81f8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>)
    8186:	1d00      	adds	r0, r0, #4
    8188:	f000 fb3a 	bl	8800 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x340>
    818c:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8204 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd4>
    8190:	f8c8 5540 	str.w	r5, [r8, #1344]	; 0x540
    8194:	f8df a074 	ldr.w	sl, [pc, #116]	; 820c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xdc>
    8198:	481b      	ldr	r0, [pc, #108]	; (8208 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd8>)
    819a:	f8ca 0510 	str.w	r0, [sl, #1296]	; 0x510
    819e:	2010      	movs	r0, #16
    81a0:	f8c6 0304 	str.w	r0, [r6, #772]	; 0x304
    81a4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    81a6:	f44f 2600 	mov.w	r6, #524288	; 0x80000
    81aa:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    81ae:	62a0      	str	r0, [r4, #40]	; 0x28
    81b0:	4817      	ldr	r0, [pc, #92]	; (8210 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    81b2:	6006      	str	r6, [r0, #0]
    81b4:	f000 fa38 	bl	8628 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x168>
    81b8:	4641      	mov	r1, r8
    81ba:	f8c8 904c 	str.w	r9, [r8, #76]	; 0x4c
    81be:	4811      	ldr	r0, [pc, #68]	; (8204 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd4>)
    81c0:	300c      	adds	r0, #12
    81c2:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    81c6:	42a8      	cmp	r0, r5
    81c8:	d310      	bcc.n	81ec <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xbc>
    81ca:	2000      	movs	r0, #0
    81cc:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    81d0:	f8ca 0514 	str.w	r0, [sl, #1300]	; 0x514
    81d4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    81d6:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
    81da:	62a0      	str	r0, [r4, #40]	; 0x28
    81dc:	480c      	ldr	r0, [pc, #48]	; (8210 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    81de:	1d00      	adds	r0, r0, #4
    81e0:	6006      	str	r6, [r0, #0]
    81e2:	f7ff fd65 	bl	7cb0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    81e6:	2000      	movs	r0, #0
    81e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    81ec:	4629      	mov	r1, r5
    81ee:	4638      	mov	r0, r7
    81f0:	f000 fb12 	bl	8818 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x358>
    81f4:	2001      	movs	r0, #1
    81f6:	e7f7      	b.n	81e8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb8>
    81f8:	40001000 	.word	0x40001000
    81fc:	20001050 	.word	0x20001050
    8200:	0000896c 	.word	0x0000896c
    8204:	40008000 	.word	0x40008000
    8208:	40008140 	.word	0x40008140
    820c:	4001f098 	.word	0x4001f098
    8210:	4001f504 	.word	0x4001f504

00008214 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    8214:	4b0d      	ldr	r3, [pc, #52]	; (824c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>)
    8216:	b510      	push	{r4, lr}
    8218:	71d8      	strb	r0, [r3, #7]
    821a:	729a      	strb	r2, [r3, #10]
    821c:	b151      	cbz	r1, 8234 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x20>
    821e:	2002      	movs	r0, #2
    8220:	7218      	strb	r0, [r3, #8]
    8222:	2801      	cmp	r0, #1
    8224:	d008      	beq.n	8238 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    8226:	2802      	cmp	r0, #2
    8228:	d00f      	beq.n	824a <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    822a:	f640 2163 	movw	r1, #2659	; 0xa63
    822e:	203e      	movs	r0, #62	; 0x3e
    8230:	f7f8 fc18 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8234:	2001      	movs	r0, #1
    8236:	e7f3      	b.n	8220 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc>
    8238:	7a58      	ldrb	r0, [r3, #9]
    823a:	2802      	cmp	r0, #2
    823c:	d105      	bne.n	824a <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    823e:	f000 f97d 	bl	853c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x7c>
    8242:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8246:	f000 bab1 	b.w	87ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ec>
    824a:	bd10      	pop	{r4, pc}
    824c:	20001050 	.word	0x20001050

00008250 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>:
    8250:	4902      	ldr	r1, [pc, #8]	; (825c <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ+0xc>)
    8252:	2000      	movs	r0, #0
    8254:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    8258:	4770      	bx	lr
    825a:	0000      	.short	0x0000
    825c:	40008000 	.word	0x40008000

00008260 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    8260:	4904      	ldr	r1, [pc, #16]	; (8274 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x14>)
    8262:	f8d1 1548 	ldr.w	r1, [r1, #1352]	; 0x548
    8266:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    826a:	4249      	negs	r1, r1
    826c:	7001      	strb	r1, [r0, #0]
    826e:	2001      	movs	r0, #1
    8270:	4770      	bx	lr
    8272:	0000      	.short	0x0000
    8274:	40001000 	.word	0x40001000

00008278 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    8278:	4903      	ldr	r1, [pc, #12]	; (8288 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    827a:	0e02      	lsrs	r2, r0, #24
    827c:	f8c1 2524 	str.w	r2, [r1, #1316]	; 0x524
    8280:	0200      	lsls	r0, r0, #8
    8282:	f8c1 051c 	str.w	r0, [r1, #1308]	; 0x51c
    8286:	4770      	bx	lr
    8288:	40001000 	.word	0x40001000

0000828c <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    828c:	4901      	ldr	r1, [pc, #4]	; (8294 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0x8>)
    828e:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    8292:	4770      	bx	lr
    8294:	40001000 	.word	0x40001000

00008298 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>:
    8298:	b510      	push	{r4, lr}
    829a:	2200      	movs	r2, #0
    829c:	2901      	cmp	r1, #1
    829e:	d006      	beq.n	82ae <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x16>
    82a0:	2902      	cmp	r1, #2
    82a2:	d002      	beq.n	82aa <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x12>
    82a4:	f240 21d9 	movw	r1, #729	; 0x2d9
    82a8:	e014      	b.n	82d4 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x3c>
    82aa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    82ae:	490b      	ldr	r1, [pc, #44]	; (82dc <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x44>)
    82b0:	430a      	orrs	r2, r1
    82b2:	490b      	ldr	r1, [pc, #44]	; (82e0 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    82b4:	600a      	str	r2, [r1, #0]
    82b6:	490b      	ldr	r1, [pc, #44]	; (82e4 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x4c>)
    82b8:	4308      	orrs	r0, r1
    82ba:	4909      	ldr	r1, [pc, #36]	; (82e0 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    82bc:	1d09      	adds	r1, r1, #4
    82be:	6008      	str	r0, [r1, #0]
    82c0:	4809      	ldr	r0, [pc, #36]	; (82e8 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x50>)
    82c2:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    82c6:	b2c0      	uxtb	r0, r0
    82c8:	2803      	cmp	r0, #3
    82ca:	d001      	beq.n	82d0 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x38>
    82cc:	280b      	cmp	r0, #11
    82ce:	d104      	bne.n	82da <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x42>
    82d0:	f240 21f1 	movw	r1, #753	; 0x2f1
    82d4:	203e      	movs	r0, #62	; 0x3e
    82d6:	f7f8 fbc5 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    82da:	bd10      	pop	{r4, pc}
    82dc:	00100108 	.word	0x00100108
    82e0:	40001514 	.word	0x40001514
    82e4:	02030000 	.word	0x02030000
    82e8:	40001000 	.word	0x40001000

000082ec <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    82ec:	4901      	ldr	r1, [pc, #4]	; (82f4 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    82ee:	7588      	strb	r0, [r1, #22]
    82f0:	4770      	bx	lr
    82f2:	0000      	.short	0x0000
    82f4:	20001050 	.word	0x20001050

000082f8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    82f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    82fc:	4853      	ldr	r0, [pc, #332]	; (844c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    82fe:	f04f 0a01 	mov.w	sl, #1
    8302:	f8c0 a04c 	str.w	sl, [r0, #76]	; 0x4c
    8306:	4851      	ldr	r0, [pc, #324]	; (844c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    8308:	300c      	adds	r0, #12
    830a:	f8d0 7540 	ldr.w	r7, [r0, #1344]	; 0x540
    830e:	f008 f810 	bl	10332 <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>
    8312:	4c4f      	ldr	r4, [pc, #316]	; (8450 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    8314:	e9c4 070c 	strd	r0, r7, [r4, #48]	; 0x30
    8318:	f000 f91a 	bl	8550 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x90>
    831c:	494d      	ldr	r1, [pc, #308]	; (8454 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>)
    831e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    8320:	6008      	str	r0, [r1, #0]
    8322:	f8df 8134 	ldr.w	r8, [pc, #308]	; 8458 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>
    8326:	2000      	movs	r0, #0
    8328:	62a0      	str	r0, [r4, #40]	; 0x28
    832a:	f8d8 2200 	ldr.w	r2, [r8, #512]	; 0x200
    832e:	f240 131d 	movw	r3, #285	; 0x11d
    8332:	439a      	bics	r2, r3
    8334:	f8c8 2200 	str.w	r2, [r8, #512]	; 0x200
    8338:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    833c:	f000 f988 	bl	8650 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x190>
    8340:	4605      	mov	r5, r0
    8342:	4842      	ldr	r0, [pc, #264]	; (844c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    8344:	3008      	adds	r0, #8
    8346:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    834a:	4e40      	ldr	r6, [pc, #256]	; (844c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    834c:	61e0      	str	r0, [r4, #28]
    834e:	1d36      	adds	r6, r6, #4
    8350:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    8354:	61a0      	str	r0, [r4, #24]
    8356:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    835a:	7d21      	ldrb	r1, [r4, #20]
    835c:	f884 1020 	strb.w	r1, [r4, #32]
    8360:	7a61      	ldrb	r1, [r4, #9]
    8362:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    8366:	46a1      	mov	r9, r4
    8368:	2400      	movs	r4, #0
    836a:	4639      	mov	r1, r7
    836c:	4628      	mov	r0, r5
    836e:	f000 f9e3 	bl	8738 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x278>
    8372:	b910      	cbnz	r0, 837a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x82>
    8374:	f8c8 a010 	str.w	sl, [r8, #16]
    8378:	2401      	movs	r4, #1
    837a:	4f35      	ldr	r7, [pc, #212]	; (8450 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    837c:	07e8      	lsls	r0, r5, #31
    837e:	f1a7 0710 	sub.w	r7, r7, #16
    8382:	d002      	beq.n	838a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x92>
    8384:	6838      	ldr	r0, [r7, #0]
    8386:	4780      	blx	r0
    8388:	e034      	b.n	83f4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xfc>
    838a:	07a8      	lsls	r0, r5, #30
    838c:	d529      	bpl.n	83e2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xea>
    838e:	0768      	lsls	r0, r5, #29
    8390:	d421      	bmi.n	83d6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    8392:	f008 f8eb 	bl	1056c <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    8396:	b9f0      	cbnz	r0, 83d6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    8398:	f008 f8d8 	bl	1054c <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    839c:	b9d8      	cbnz	r0, 83d6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    839e:	482f      	ldr	r0, [pc, #188]	; (845c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x164>)
    83a0:	6800      	ldr	r0, [r0, #0]
    83a2:	f3c0 5242 	ubfx	r2, r0, #21, #3
    83a6:	f3c0 6100 	ubfx	r1, r0, #24, #1
    83aa:	f000 0c0f 	and.w	ip, r0, #15
    83ae:	f3c0 1303 	ubfx	r3, r0, #4, #4
    83b2:	f3c0 2803 	ubfx	r8, r0, #8, #4
    83b6:	b171      	cbz	r1, 83d6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    83b8:	f1bc 0f00 	cmp.w	ip, #0
    83bc:	d003      	beq.n	83c6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xce>
    83be:	b113      	cbz	r3, 83c6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xce>
    83c0:	f1b8 0f00 	cmp.w	r8, #0
    83c4:	d107      	bne.n	83d6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    83c6:	f3c0 4004 	ubfx	r0, r0, #16, #5
    83ca:	2801      	cmp	r0, #1
    83cc:	d103      	bne.n	83d6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    83ce:	2a03      	cmp	r2, #3
    83d0:	d201      	bcs.n	83d6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    83d2:	f045 0504 	orr.w	r5, r5, #4
    83d6:	f345 0080 	sbfx	r0, r5, #2, #1
    83da:	4621      	mov	r1, r4
    83dc:	1c40      	adds	r0, r0, #1
    83de:	687a      	ldr	r2, [r7, #4]
    83e0:	e007      	b.n	83f2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xfa>
    83e2:	f015 0f28 	tst.w	r5, #40	; 0x28
    83e6:	d005      	beq.n	83f4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xfc>
    83e8:	f345 1140 	sbfx	r1, r5, #5, #1
    83ec:	68ba      	ldr	r2, [r7, #8]
    83ee:	4620      	mov	r0, r4
    83f0:	1c49      	adds	r1, r1, #1
    83f2:	4790      	blx	r2
    83f4:	06e8      	lsls	r0, r5, #27
    83f6:	d501      	bpl.n	83fc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x104>
    83f8:	68f8      	ldr	r0, [r7, #12]
    83fa:	4780      	blx	r0
    83fc:	f899 1009 	ldrb.w	r1, [r9, #9]
    8400:	4648      	mov	r0, r9
    8402:	2902      	cmp	r1, #2
    8404:	d120      	bne.n	8448 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>
    8406:	7b01      	ldrb	r1, [r0, #12]
    8408:	2900      	cmp	r1, #0
    840a:	d01d      	beq.n	8448 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>
    840c:	2902      	cmp	r1, #2
    840e:	d004      	beq.n	841a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x122>
    8410:	2901      	cmp	r1, #1
    8412:	d009      	beq.n	8428 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x130>
    8414:	f640 4166 	movw	r1, #3174	; 0xc66
    8418:	e00d      	b.n	8436 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13e>
    841a:	69c1      	ldr	r1, [r0, #28]
    841c:	f8d9 0010 	ldr.w	r0, [r9, #16]
    8420:	4408      	add	r0, r1
    8422:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
    8426:	e00b      	b.n	8440 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x148>
    8428:	6901      	ldr	r1, [r0, #16]
    842a:	f8d9 001c 	ldr.w	r0, [r9, #28]
    842e:	4281      	cmp	r1, r0
    8430:	d804      	bhi.n	843c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x144>
    8432:	f640 4167 	movw	r1, #3175	; 0xc67
    8436:	203e      	movs	r0, #62	; 0x3e
    8438:	f7f8 fb14 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    843c:	f8c6 1540 	str.w	r1, [r6, #1344]	; 0x540
    8440:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8444:	f000 b9bc 	b.w	87c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x300>
    8448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    844c:	40008000 	.word	0x40008000
    8450:	20001050 	.word	0x20001050
    8454:	4001f508 	.word	0x4001f508
    8458:	40001000 	.word	0x40001000
    845c:	40001450 	.word	0x40001450

00008460 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
    8460:	b570      	push	{r4, r5, r6, lr}
    8462:	4b16      	ldr	r3, [pc, #88]	; (84bc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x5c>)
    8464:	888c      	ldrh	r4, [r1, #4]
    8466:	eb03 0580 	add.w	r5, r3, r0, lsl #2
    846a:	f8c5 4620 	str.w	r4, [r5, #1568]	; 0x620
    846e:	780c      	ldrb	r4, [r1, #0]
    8470:	f8d1 1001 	ldr.w	r1, [r1, #1]
    8474:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    8478:	f8c5 1600 	str.w	r1, [r5, #1536]	; 0x600
    847c:	f8d3 1640 	ldr.w	r1, [r3, #1600]	; 0x640
    8480:	2401      	movs	r4, #1
    8482:	4084      	lsls	r4, r0
    8484:	b2c9      	uxtb	r1, r1
    8486:	b2e5      	uxtb	r5, r4
    8488:	4329      	orrs	r1, r5
    848a:	b132      	cbz	r2, 849a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a>
    848c:	2a01      	cmp	r2, #1
    848e:	d00a      	beq.n	84a6 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x46>
    8490:	f240 51d4 	movw	r1, #1492	; 0x5d4
    8494:	203e      	movs	r0, #62	; 0x3e
    8496:	f7f8 fae5 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    849a:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    849e:	f3c0 2007 	ubfx	r0, r0, #8, #8
    84a2:	43a0      	bics	r0, r4
    84a4:	e004      	b.n	84b0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x50>
    84a6:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    84aa:	f3c0 2007 	ubfx	r0, r0, #8, #8
    84ae:	4328      	orrs	r0, r5
    84b0:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    84b4:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
    84b8:	bd70      	pop	{r4, r5, r6, pc}
    84ba:	0000      	.short	0x0000
    84bc:	40001000 	.word	0x40001000

000084c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>:
    84c0:	4901      	ldr	r1, [pc, #4]	; (84c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8>)
    84c2:	2001      	movs	r0, #1
    84c4:	7008      	strb	r0, [r1, #0]
    84c6:	4770      	bx	lr
    84c8:	200002a0 	.word	0x200002a0
    84cc:	480b      	ldr	r0, [pc, #44]	; (84fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c>)
    84ce:	7d81      	ldrb	r1, [r0, #22]
    84d0:	480b      	ldr	r0, [pc, #44]	; (8500 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x40>)
    84d2:	5c40      	ldrb	r0, [r0, r1]
    84d4:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    84d8:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
    84dc:	d204      	bcs.n	84e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x28>
    84de:	f6a0 1038 	subw	r0, r0, #2360	; 0x938
    84e2:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    84e6:	e001      	b.n	84ec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c>
    84e8:	f5a0 6016 	sub.w	r0, r0, #2400	; 0x960
    84ec:	4a05      	ldr	r2, [pc, #20]	; (8504 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>)
    84ee:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    84f2:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    84f6:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
    84fa:	4770      	bx	lr
    84fc:	20001050 	.word	0x20001050
    8500:	00008972 	.word	0x00008972
    8504:	40001000 	.word	0x40001000
    8508:	b508      	push	{r3, lr}
    850a:	490b      	ldr	r1, [pc, #44]	; (8538 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x78>)
    850c:	466b      	mov	r3, sp
    850e:	f991 2015 	ldrsb.w	r2, [r1, #21]
    8512:	7d89      	ldrb	r1, [r1, #22]
    8514:	f000 fad0 	bl	8ab8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>
    8518:	f99d 0000 	ldrsb.w	r0, [sp]
    851c:	f000 faa0 	bl	8a60 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    8520:	f10d 0001 	add.w	r0, sp, #1
    8524:	f004 f8cc 	bl	c6c0 <mpsl_fem_pa_gain_set>
    8528:	2800      	cmp	r0, #0
    852a:	d004      	beq.n	8536 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x76>
    852c:	f240 6115 	movw	r1, #1557	; 0x615
    8530:	203e      	movs	r0, #62	; 0x3e
    8532:	f7f8 fa97 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8536:	bd08      	pop	{r3, pc}
    8538:	20001050 	.word	0x20001050
    853c:	4803      	ldr	r0, [pc, #12]	; (854c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8c>)
    853e:	7a01      	ldrb	r1, [r0, #8]
    8540:	2901      	cmp	r1, #1
    8542:	d102      	bne.n	854a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8a>
    8544:	7a80      	ldrb	r0, [r0, #10]
    8546:	f7ff bfdf 	b.w	8508 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x48>
    854a:	4770      	bx	lr
    854c:	20001050 	.word	0x20001050
    8550:	480d      	ldr	r0, [pc, #52]	; (8588 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc8>)
    8552:	b510      	push	{r4, lr}
    8554:	7a40      	ldrb	r0, [r0, #9]
    8556:	2801      	cmp	r0, #1
    8558:	d00c      	beq.n	8574 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb4>
    855a:	2802      	cmp	r0, #2
    855c:	d113      	bne.n	8586 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    855e:	f004 f891 	bl	c684 <mpsl_fem_lna_configuration_clear>
    8562:	2800      	cmp	r0, #0
    8564:	d00f      	beq.n	8586 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    8566:	1c40      	adds	r0, r0, #1
    8568:	d00d      	beq.n	8586 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    856a:	f640 01c1 	movw	r1, #2241	; 0x8c1
    856e:	203e      	movs	r0, #62	; 0x3e
    8570:	f7f8 fa78 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8574:	f004 f898 	bl	c6a8 <mpsl_fem_pa_configuration_clear>
    8578:	2800      	cmp	r0, #0
    857a:	d004      	beq.n	8586 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    857c:	1c40      	adds	r0, r0, #1
    857e:	d002      	beq.n	8586 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    8580:	f640 01bb 	movw	r1, #2235	; 0x8bb
    8584:	e7f3      	b.n	856e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xae>
    8586:	bd10      	pop	{r4, pc}
    8588:	20001050 	.word	0x20001050
    858c:	4808      	ldr	r0, [pc, #32]	; (85b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf0>)
    858e:	2100      	movs	r1, #0
    8590:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    8594:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    8598:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    859c:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    85a0:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    85a4:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    85a8:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    85ac:	4770      	bx	lr
    85ae:	0000      	.short	0x0000
    85b0:	40001000 	.word	0x40001000
    85b4:	4818      	ldr	r0, [pc, #96]	; (8618 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x158>)
    85b6:	b510      	push	{r4, lr}
    85b8:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    85bc:	07c1      	lsls	r1, r0, #31
    85be:	d029      	beq.n	8614 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    85c0:	0781      	lsls	r1, r0, #30
    85c2:	d514      	bpl.n	85ee <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x12e>
    85c4:	4815      	ldr	r0, [pc, #84]	; (861c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x15c>)
    85c6:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    85ca:	f041 0101 	orr.w	r1, r1, #1
    85ce:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    85d2:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    85d6:	b2c0      	uxtb	r0, r0
    85d8:	280b      	cmp	r0, #11
    85da:	d005      	beq.n	85e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    85dc:	280a      	cmp	r0, #10
    85de:	d003      	beq.n	85e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    85e0:	2803      	cmp	r0, #3
    85e2:	d001      	beq.n	85e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    85e4:	2802      	cmp	r0, #2
    85e6:	d115      	bne.n	8614 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    85e8:	f240 613e 	movw	r1, #1598	; 0x63e
    85ec:	e00f      	b.n	860e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x14e>
    85ee:	0740      	lsls	r0, r0, #29
    85f0:	d510      	bpl.n	8614 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    85f2:	480a      	ldr	r0, [pc, #40]	; (861c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x15c>)
    85f4:	490a      	ldr	r1, [pc, #40]	; (8620 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x160>)
    85f6:	3008      	adds	r0, #8
    85f8:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    85fc:	f44f 71a0 	mov.w	r1, #320	; 0x140
    8600:	4808      	ldr	r0, [pc, #32]	; (8624 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x164>)
    8602:	f007 fe55 	bl	102b0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    8606:	2800      	cmp	r0, #0
    8608:	d004      	beq.n	8614 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    860a:	f240 6146 	movw	r1, #1606	; 0x646
    860e:	203e      	movs	r0, #62	; 0x3e
    8610:	f7f8 fa28 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8614:	bd10      	pop	{r4, pc}
    8616:	0000      	.short	0x0000
    8618:	20001050 	.word	0x20001050
    861c:	40001000 	.word	0x40001000
    8620:	4001f098 	.word	0x4001f098
    8624:	40008000 	.word	0x40008000
    8628:	4808      	ldr	r0, [pc, #32]	; (864c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x18c>)
    862a:	4601      	mov	r1, r0
    862c:	79c2      	ldrb	r2, [r0, #7]
    862e:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
    8632:	b112      	cbz	r2, 863a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17a>
    8634:	2a01      	cmp	r2, #1
    8636:	d003      	beq.n	8640 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x180>
    8638:	e006      	b.n	8648 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x188>
    863a:	f041 0102 	orr.w	r1, r1, #2
    863e:	e001      	b.n	8644 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x184>
    8640:	f041 0104 	orr.w	r1, r1, #4
    8644:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
    8648:	f7ff bfb4 	b.w	85b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    864c:	20001050 	.word	0x20001050
    8650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8654:	4d34      	ldr	r5, [pc, #208]	; (8728 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x268>)
    8656:	2400      	movs	r4, #0
    8658:	7b28      	ldrb	r0, [r5, #12]
    865a:	b138      	cbz	r0, 866c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ac>
    865c:	f44f 71a2 	mov.w	r1, #324	; 0x144
    8660:	4832      	ldr	r0, [pc, #200]	; (872c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26c>)
    8662:	f007 fe25 	bl	102b0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    8666:	b108      	cbz	r0, 866c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ac>
    8668:	2601      	movs	r6, #1
    866a:	e000      	b.n	866e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ae>
    866c:	2600      	movs	r6, #0
    866e:	7a68      	ldrb	r0, [r5, #9]
    8670:	4f2f      	ldr	r7, [pc, #188]	; (8730 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x270>)
    8672:	f44f 7186 	mov.w	r1, #268	; 0x10c
    8676:	2801      	cmp	r0, #1
    8678:	d002      	beq.n	8680 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1c0>
    867a:	2802      	cmp	r0, #2
    867c:	d006      	beq.n	868c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1cc>
    867e:	e016      	b.n	86ae <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    8680:	4638      	mov	r0, r7
    8682:	f007 fe10 	bl	102a6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    8686:	b190      	cbz	r0, 86ae <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    8688:	2408      	movs	r4, #8
    868a:	e010      	b.n	86ae <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    868c:	4638      	mov	r0, r7
    868e:	f007 fe0a 	bl	102a6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    8692:	b100      	cbz	r0, 8696 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1d6>
    8694:	2402      	movs	r4, #2
    8696:	f8d7 0400 	ldr.w	r0, [r7, #1024]	; 0x400
    869a:	43c0      	mvns	r0, r0
    869c:	f340 0000 	sbfx	r0, r0, #0, #1
    86a0:	1c40      	adds	r0, r0, #1
    86a2:	d101      	bne.n	86a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e8>
    86a4:	f044 0404 	orr.w	r4, r4, #4
    86a8:	b10e      	cbz	r6, 86ae <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    86aa:	f044 0401 	orr.w	r4, r4, #1
    86ae:	f014 0f0b 	tst.w	r4, #11
    86b2:	d107      	bne.n	86c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>
    86b4:	f44f 7188 	mov.w	r1, #272	; 0x110
    86b8:	4638      	mov	r0, r7
    86ba:	f007 fdf4 	bl	102a6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    86be:	b108      	cbz	r0, 86c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>
    86c0:	f044 0410 	orr.w	r4, r4, #16
    86c4:	481b      	ldr	r0, [pc, #108]	; (8734 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x274>)
    86c6:	7800      	ldrb	r0, [r0, #0]
    86c8:	b1f8      	cbz	r0, 870a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x24a>
    86ca:	f8d7 0640 	ldr.w	r0, [r7, #1600]	; 0x640
    86ce:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
    86d2:	d007      	beq.n	86e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    86d4:	f44f 718a 	mov.w	r1, #276	; 0x114
    86d8:	4638      	mov	r0, r7
    86da:	f007 fde4 	bl	102a6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    86de:	b108      	cbz	r0, 86e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    86e0:	2001      	movs	r0, #1
    86e2:	e000      	b.n	86e6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x226>
    86e4:	2000      	movs	r0, #0
    86e6:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
    86ea:	b13e      	cbz	r6, 86fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23c>
    86ec:	f44f 718c 	mov.w	r1, #280	; 0x118
    86f0:	4638      	mov	r0, r7
    86f2:	f007 fdd8 	bl	102a6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    86f6:	b108      	cbz	r0, 86fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23c>
    86f8:	2001      	movs	r0, #1
    86fa:	e000      	b.n	86fe <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23e>
    86fc:	2000      	movs	r0, #0
    86fe:	f885 0023 	strb.w	r0, [r5, #35]	; 0x23
    8702:	f8d7 0410 	ldr.w	r0, [r7, #1040]	; 0x410
    8706:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
    870a:	f7ff ff3f 	bl	858c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xcc>
    870e:	06e0      	lsls	r0, r4, #27
    8710:	d506      	bpl.n	8720 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    8712:	0720      	lsls	r0, r4, #28
    8714:	d404      	bmi.n	8720 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    8716:	7a68      	ldrb	r0, [r5, #9]
    8718:	2801      	cmp	r0, #1
    871a:	d101      	bne.n	8720 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    871c:	f044 0420 	orr.w	r4, r4, #32
    8720:	4620      	mov	r0, r4
    8722:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8726:	0000      	.short	0x0000
    8728:	20001050 	.word	0x20001050
    872c:	40008000 	.word	0x40008000
    8730:	40001000 	.word	0x40001000
    8734:	200002a0 	.word	0x200002a0
    8738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    873c:	4c1a      	ldr	r4, [pc, #104]	; (87a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2e8>)
    873e:	460d      	mov	r5, r1
    8740:	7a21      	ldrb	r1, [r4, #8]
    8742:	b129      	cbz	r1, 8750 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x290>
    8744:	f010 0f11 	tst.w	r0, #17
    8748:	d007      	beq.n	875a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x29a>
    874a:	f7ff fab1 	bl	7cb0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    874e:	e024      	b.n	879a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2da>
    8750:	f000 f890 	bl	8874 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b4>
    8754:	2000      	movs	r0, #0
    8756:	7320      	strb	r0, [r4, #12]
    8758:	e01f      	b.n	879a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2da>
    875a:	2901      	cmp	r1, #1
    875c:	d001      	beq.n	8762 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a2>
    875e:	2601      	movs	r6, #1
    8760:	e000      	b.n	8764 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a4>
    8762:	2600      	movs	r6, #0
    8764:	79e0      	ldrb	r0, [r4, #7]
    8766:	2801      	cmp	r0, #1
    8768:	d00e      	beq.n	8788 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c8>
    876a:	2700      	movs	r7, #0
    876c:	f000 f882 	bl	8874 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b4>
    8770:	2196      	movs	r1, #150	; 0x96
    8772:	4630      	mov	r0, r6
    8774:	f000 f894 	bl	88a0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3e0>
    8778:	4601      	mov	r1, r0
    877a:	b14f      	cbz	r7, 8790 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d0>
    877c:	353b      	adds	r5, #59	; 0x3b
    877e:	428d      	cmp	r5, r1
    8780:	d904      	bls.n	878c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2cc>
    8782:	2000      	movs	r0, #0
    8784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8788:	2701      	movs	r7, #1
    878a:	e7ef      	b.n	876c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ac>
    878c:	2001      	movs	r0, #1
    878e:	71e0      	strb	r0, [r4, #7]
    8790:	7aa2      	ldrb	r2, [r4, #10]
    8792:	4630      	mov	r0, r6
    8794:	f7ff fccc 	bl	8130 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    8798:	b108      	cbz	r0, 879e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2de>
    879a:	2001      	movs	r0, #1
    879c:	e7f2      	b.n	8784 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c4>
    879e:	f640 21c4 	movw	r1, #2756	; 0xac4
    87a2:	203e      	movs	r0, #62	; 0x3e
    87a4:	f7f8 f95e 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    87a8:	20001050 	.word	0x20001050
    87ac:	4803      	ldr	r0, [pc, #12]	; (87bc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2fc>)
    87ae:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    87b2:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    87b6:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    87ba:	4770      	bx	lr
    87bc:	40001000 	.word	0x40001000
    87c0:	4804      	ldr	r0, [pc, #16]	; (87d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x314>)
    87c2:	6a81      	ldr	r1, [r0, #40]	; 0x28
    87c4:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    87c8:	6281      	str	r1, [r0, #40]	; 0x28
    87ca:	4903      	ldr	r1, [pc, #12]	; (87d8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x318>)
    87cc:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    87d0:	6008      	str	r0, [r1, #0]
    87d2:	4770      	bx	lr
    87d4:	20001050 	.word	0x20001050
    87d8:	4001f504 	.word	0x4001f504
    87dc:	4a07      	ldr	r2, [pc, #28]	; (87fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x33c>)
    87de:	2000      	movs	r0, #0
    87e0:	3208      	adds	r2, #8
    87e2:	4906      	ldr	r1, [pc, #24]	; (87fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x33c>)
    87e4:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    87e8:	1d0a      	adds	r2, r1, #4
    87ea:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    87ee:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    87f2:	4902      	ldr	r1, [pc, #8]	; (87fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x33c>)
    87f4:	310c      	adds	r1, #12
    87f6:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    87fa:	4770      	bx	lr
    87fc:	40008000 	.word	0x40008000
    8800:	4903      	ldr	r1, [pc, #12]	; (8810 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x350>)
    8802:	79c9      	ldrb	r1, [r1, #7]
    8804:	2900      	cmp	r1, #0
    8806:	d102      	bne.n	880e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34e>
    8808:	4902      	ldr	r1, [pc, #8]	; (8814 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x354>)
    880a:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    880e:	4770      	bx	lr
    8810:	20001050 	.word	0x20001050
    8814:	4001f098 	.word	0x4001f098
    8818:	b510      	push	{r4, lr}
    881a:	4a14      	ldr	r2, [pc, #80]	; (886c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ac>)
    881c:	b120      	cbz	r0, 8828 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x368>
    881e:	2801      	cmp	r0, #1
    8820:	d011      	beq.n	8846 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x386>
    8822:	f240 7169 	movw	r1, #1897	; 0x769
    8826:	e01c      	b.n	8862 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a2>
    8828:	f101 0028 	add.w	r0, r1, #40	; 0x28
    882c:	e9c2 1002 	strd	r1, r0, [r2, #8]
    8830:	490f      	ldr	r1, [pc, #60]	; (8870 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b0>)
    8832:	480e      	ldr	r0, [pc, #56]	; (886c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ac>)
    8834:	f003 ff3e 	bl	c6b4 <mpsl_fem_pa_configuration_set>
    8838:	2800      	cmp	r0, #0
    883a:	d015      	beq.n	8868 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    883c:	1c40      	adds	r0, r0, #1
    883e:	d013      	beq.n	8868 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    8840:	f44f 61eb 	mov.w	r1, #1880	; 0x758
    8844:	e00d      	b.n	8862 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a2>
    8846:	f101 0029 	add.w	r0, r1, #41	; 0x29
    884a:	e9c2 1002 	strd	r1, r0, [r2, #8]
    884e:	4908      	ldr	r1, [pc, #32]	; (8870 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b0>)
    8850:	4806      	ldr	r0, [pc, #24]	; (886c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ac>)
    8852:	f003 ff1d 	bl	c690 <mpsl_fem_lna_configuration_set>
    8856:	2800      	cmp	r0, #0
    8858:	d006      	beq.n	8868 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    885a:	1c40      	adds	r0, r0, #1
    885c:	d004      	beq.n	8868 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    885e:	f240 7165 	movw	r1, #1893	; 0x765
    8862:	203e      	movs	r0, #62	; 0x3e
    8864:	f7f8 f8fe 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8868:	bd10      	pop	{r4, pc}
    886a:	0000      	.short	0x0000
    886c:	200002a8 	.word	0x200002a8
    8870:	0000899c 	.word	0x0000899c
    8874:	4802      	ldr	r0, [pc, #8]	; (8880 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c0>)
    8876:	2100      	movs	r1, #0
    8878:	71c1      	strb	r1, [r0, #7]
    887a:	7201      	strb	r1, [r0, #8]
    887c:	7241      	strb	r1, [r0, #9]
    887e:	4770      	bx	lr
    8880:	20001050 	.word	0x20001050
    8884:	4a05      	ldr	r2, [pc, #20]	; (889c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3dc>)
    8886:	79d2      	ldrb	r2, [r2, #7]
    8888:	2a01      	cmp	r2, #1
    888a:	d006      	beq.n	889a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3da>
    888c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8890:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    8894:	fbb1 f1f2 	udiv	r1, r1, r2
    8898:	1a40      	subs	r0, r0, r1
    889a:	4770      	bx	lr
    889c:	20001050 	.word	0x20001050
    88a0:	b570      	push	{r4, r5, r6, lr}
    88a2:	4c13      	ldr	r4, [pc, #76]	; (88f0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x430>)
    88a4:	4603      	mov	r3, r0
    88a6:	460d      	mov	r5, r1
    88a8:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    88ac:	2000      	movs	r0, #0
    88ae:	b15a      	cbz	r2, 88c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
    88b0:	4621      	mov	r1, r4
    88b2:	f891 1020 	ldrb.w	r1, [r1, #32]
    88b6:	b163      	cbz	r3, 88d2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x412>
    88b8:	2b01      	cmp	r3, #1
    88ba:	d111      	bne.n	88e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x420>
    88bc:	2a01      	cmp	r2, #1
    88be:	4628      	mov	r0, r5
    88c0:	d012      	beq.n	88e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x428>
    88c2:	f007 fcfa 	bl	102ba <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    88c6:	e009      	b.n	88dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x41c>
    88c8:	f640 016e 	movw	r1, #2158	; 0x86e
    88cc:	203e      	movs	r0, #62	; 0x3e
    88ce:	f7f8 f8c9 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    88d2:	2a01      	cmp	r2, #1
    88d4:	4628      	mov	r0, r5
    88d6:	d004      	beq.n	88e2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x422>
    88d8:	f007 fcfd 	bl	102d6 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    88dc:	69e1      	ldr	r1, [r4, #28]
    88de:	4408      	add	r0, r1
    88e0:	bd70      	pop	{r4, r5, r6, pc}
    88e2:	f000 f8d1 	bl	8a88 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    88e6:	e7f9      	b.n	88dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x41c>
    88e8:	f000 f8c0 	bl	8a6c <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    88ec:	e7f6      	b.n	88dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x41c>
    88ee:	0000      	.short	0x0000
    88f0:	20001050 	.word	0x20001050
    88f4:	b510      	push	{r4, lr}
    88f6:	f7ff fbef 	bl	80d8 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    88fa:	f7ff fde7 	bl	84cc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    88fe:	f7ff fe1d 	bl	853c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x7c>
    8902:	f7ff ff53 	bl	87ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ec>
    8906:	f007 fe31 	bl	1056c <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    890a:	2800      	cmp	r0, #0
    890c:	d108      	bne.n	8920 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x460>
    890e:	f007 fe1d 	bl	1054c <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    8912:	2800      	cmp	r0, #0
    8914:	d104      	bne.n	8920 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x460>
    8916:	4803      	ldr	r0, [pc, #12]	; (8924 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x464>)
    8918:	6801      	ldr	r1, [r0, #0]
    891a:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    891e:	6001      	str	r1, [r0, #0]
    8920:	bd10      	pop	{r4, pc}
    8922:	0000      	.short	0x0000
    8924:	40001568 	.word	0x40001568
    8928:	b510      	push	{r4, lr}
    892a:	4604      	mov	r4, r0
    892c:	f7ff fbd4 	bl	80d8 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    8930:	f7ff fdcc 	bl	84cc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    8934:	4620      	mov	r0, r4
    8936:	f7ff fde7 	bl	8508 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x48>
    893a:	f007 fe17 	bl	1056c <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    893e:	2800      	cmp	r0, #0
    8940:	d00d      	beq.n	895e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x49e>
    8942:	4a09      	ldr	r2, [pc, #36]	; (8968 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4a8>)
    8944:	6811      	ldr	r1, [r2, #0]
    8946:	0650      	lsls	r0, r2, #25
    8948:	2c02      	cmp	r4, #2
    894a:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    894e:	d007      	beq.n	8960 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4a0>
    8950:	f3c0 2006 	ubfx	r0, r0, #8, #7
    8954:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    8958:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    895c:	6010      	str	r0, [r2, #0]
    895e:	bd10      	pop	{r4, pc}
    8960:	f3c0 6006 	ubfx	r0, r0, #24, #7
    8964:	e7f6      	b.n	8954 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x494>
    8966:	0000      	.short	0x0000
    8968:	40001588 	.word	0x40001588
    896c:	a62c0000 	.word	0xa62c0000
    8970:	0604a1e0 	.word	0x0604a1e0
    8974:	0e0c0a08 	.word	0x0e0c0a08
    8978:	16141210 	.word	0x16141210
    897c:	201e1c18 	.word	0x201e1c18
    8980:	28262422 	.word	0x28262422
    8984:	302e2c2a 	.word	0x302e2c2a
    8988:	38363432 	.word	0x38363432
    898c:	403e3c3a 	.word	0x403e3c3a
    8990:	48464442 	.word	0x48464442
    8994:	024e4c4a 	.word	0x024e4c4a
    8998:	0000501a 	.word	0x0000501a
    899c:	00000001 	.word	0x00000001
    89a0:	40001110 	.word	0x40001110
	...
    89b8:	00001e14 	.word	0x00001e14
    89bc:	00001130 	.word	0x00001130
    89c0:	00000000 	.word	0x00000000
    89c4:	00000028 	.word	0x00000028
    89c8:	00000018 	.word	0x00000018
    89cc:	00000000 	.word	0x00000000
    89d0:	00001e14 	.word	0x00001e14
    89d4:	00001130 	.word	0x00001130
    89d8:	00000000 	.word	0x00000000
    89dc:	00001770 	.word	0x00001770
    89e0:	00000fa0 	.word	0x00000fa0

000089e4 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
    89e4:	b570      	push	{r4, r5, r6, lr}
    89e6:	4605      	mov	r5, r0
    89e8:	4614      	mov	r4, r2
    89ea:	4608      	mov	r0, r1
    89ec:	f7ff fb9a 	bl	8124 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    89f0:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    89f4:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
    89f8:	ebc0 01c1 	rsb	r1, r0, r1, lsl #3
    89fc:	4807      	ldr	r0, [pc, #28]	; (8a1c <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA+0x38>)
    89fe:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    8a02:	4408      	add	r0, r1
    8a04:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    8a08:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
    8a0c:	fbb0 f5f1 	udiv	r5, r0, r1
    8a10:	4620      	mov	r0, r4
    8a12:	f7ff fb5b 	bl	80cc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8a16:	4428      	add	r0, r5
    8a18:	1d40      	adds	r0, r0, #5
    8a1a:	bd70      	pop	{r4, r5, r6, pc}
    8a1c:	00008aac 	.word	0x00008aac

00008a20 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
    8a20:	b570      	push	{r4, r5, r6, lr}
    8a22:	4d0e      	ldr	r5, [pc, #56]	; (8a5c <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    8a24:	461c      	mov	r4, r3
    8a26:	3d08      	subs	r5, #8
    8a28:	4b0c      	ldr	r3, [pc, #48]	; (8a5c <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    8a2a:	f835 1011 	ldrh.w	r1, [r5, r1, lsl #1]
    8a2e:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    8a32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8a36:	ebc5 10c0 	rsb	r0, r5, r0, lsl #7
    8a3a:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    8a3e:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    8a42:	4418      	add	r0, r3
    8a44:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    8a48:	fbb0 f5f1 	udiv	r5, r0, r1
    8a4c:	4610      	mov	r0, r2
    8a4e:	f7ff fb3d 	bl	80cc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8a52:	4428      	add	r0, r5
    8a54:	4420      	add	r0, r4
    8a56:	1d40      	adds	r0, r0, #5
    8a58:	bd70      	pop	{r4, r5, r6, pc}
    8a5a:	0000      	.short	0x0000
    8a5c:	00008aac 	.word	0x00008aac

00008a60 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    8a60:	4901      	ldr	r1, [pc, #4]	; (8a68 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    8a62:	b2c0      	uxtb	r0, r0
    8a64:	6008      	str	r0, [r1, #0]
    8a66:	4770      	bx	lr
    8a68:	4000150c 	.word	0x4000150c

00008a6c <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
    8a6c:	4a05      	ldr	r2, [pc, #20]	; (8a84 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x18>)
    8a6e:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    8a72:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8a76:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    8a7a:	fbb1 f1f2 	udiv	r1, r1, r2
    8a7e:	4408      	add	r0, r1
    8a80:	1e80      	subs	r0, r0, #2
    8a82:	4770      	bx	lr
    8a84:	00008aa4 	.word	0x00008aa4

00008a88 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
    8a88:	4a05      	ldr	r2, [pc, #20]	; (8aa0 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>)
    8a8a:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    8a8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8a92:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
    8a96:	fbb1 f1f2 	udiv	r1, r1, r2
    8a9a:	4408      	add	r0, r1
    8a9c:	4770      	bx	lr
    8a9e:	0000      	.short	0x0000
    8aa0:	00008aa4 	.word	0x00008aa4
    8aa4:	05dc0000 	.word	0x05dc0000
    8aa8:	000003e8 	.word	0x000003e8
    8aac:	00000000 	.word	0x00000000
    8ab0:	00001e14 	.word	0x00001e14
    8ab4:	00001130 	.word	0x00001130

00008ab8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>:
    8ab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8abc:	461e      	mov	r6, r3
    8abe:	4617      	mov	r7, r2
    8ac0:	460c      	mov	r4, r1
    8ac2:	4605      	mov	r5, r0
    8ac4:	f000 f856 	bl	8b74 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>
    8ac8:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8b70 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xb8>
    8acc:	4680      	mov	r8, r0
    8ace:	f899 0000 	ldrb.w	r0, [r9]
    8ad2:	42a8      	cmp	r0, r5
    8ad4:	d110      	bne.n	8af8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    8ad6:	f899 1001 	ldrb.w	r1, [r9, #1]
    8ada:	4648      	mov	r0, r9
    8adc:	42a1      	cmp	r1, r4
    8ade:	d10b      	bne.n	8af8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    8ae0:	f990 1002 	ldrsb.w	r1, [r0, #2]
    8ae4:	42b9      	cmp	r1, r7
    8ae6:	d107      	bne.n	8af8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    8ae8:	78c2      	ldrb	r2, [r0, #3]
    8aea:	4542      	cmp	r2, r8
    8aec:	d104      	bne.n	8af8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    8aee:	8881      	ldrh	r1, [r0, #4]
    8af0:	8031      	strh	r1, [r6, #0]
    8af2:	7980      	ldrb	r0, [r0, #6]
    8af4:	70b0      	strb	r0, [r6, #2]
    8af6:	e037      	b.n	8b68 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xb0>
    8af8:	463a      	mov	r2, r7
    8afa:	4621      	mov	r1, r4
    8afc:	2d01      	cmp	r5, #1
    8afe:	d009      	beq.n	8b14 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x5c>
    8b00:	2d02      	cmp	r5, #2
    8b02:	d009      	beq.n	8b18 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x60>
    8b04:	2d04      	cmp	r5, #4
    8b06:	d009      	beq.n	8b1c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x64>
    8b08:	2d08      	cmp	r5, #8
    8b0a:	d009      	beq.n	8b20 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x68>
    8b0c:	f240 4162 	movw	r1, #1122	; 0x462
    8b10:	2006      	movs	r0, #6
    8b12:	e00c      	b.n	8b2e <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x76>
    8b14:	2000      	movs	r0, #0
    8b16:	e004      	b.n	8b22 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    8b18:	2001      	movs	r0, #1
    8b1a:	e002      	b.n	8b22 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    8b1c:	2003      	movs	r0, #3
    8b1e:	e000      	b.n	8b22 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    8b20:	2002      	movs	r0, #2
    8b22:	466b      	mov	r3, sp
    8b24:	f000 f89e 	bl	8c64 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>
    8b28:	b118      	cbz	r0, 8b32 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x7a>
    8b2a:	213d      	movs	r1, #61	; 0x3d
    8b2c:	2075      	movs	r0, #117	; 0x75
    8b2e:	f7f7 ff99 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8b32:	4620      	mov	r0, r4
    8b34:	f7ff f8b4 	bl	7ca0 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>
    8b38:	4602      	mov	r2, r0
    8b3a:	2300      	movs	r3, #0
    8b3c:	4631      	mov	r1, r6
    8b3e:	f99d 0000 	ldrsb.w	r0, [sp]
    8b42:	f003 fdc9 	bl	c6d8 <mpsl_fem_tx_power_split>
    8b46:	4601      	mov	r1, r0
    8b48:	f889 1007 	strb.w	r1, [r9, #7]
    8b4c:	8831      	ldrh	r1, [r6, #0]
    8b4e:	f8a9 1004 	strh.w	r1, [r9, #4]
    8b52:	78b1      	ldrb	r1, [r6, #2]
    8b54:	f889 1006 	strb.w	r1, [r9, #6]
    8b58:	f889 5000 	strb.w	r5, [r9]
    8b5c:	f889 4001 	strb.w	r4, [r9, #1]
    8b60:	f889 7002 	strb.w	r7, [r9, #2]
    8b64:	f889 8003 	strb.w	r8, [r9, #3]
    8b68:	f999 0007 	ldrsb.w	r0, [r9, #7]
    8b6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8b70:	20000362 	.word	0x20000362

00008b74 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>:
    8b74:	4801      	ldr	r0, [pc, #4]	; (8b7c <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA+0x8>)
    8b76:	7800      	ldrb	r0, [r0, #0]
    8b78:	4770      	bx	lr
    8b7a:	0000      	.short	0x0000
    8b7c:	200002c0 	.word	0x200002c0

00008b80 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>:
    8b80:	b570      	push	{r4, r5, r6, lr}
    8b82:	4c17      	ldr	r4, [pc, #92]	; (8be0 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x60>)
    8b84:	7860      	ldrb	r0, [r4, #1]
    8b86:	2800      	cmp	r0, #0
    8b88:	d123      	bne.n	8bd2 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x52>
    8b8a:	2001      	movs	r0, #1
    8b8c:	7060      	strb	r0, [r4, #1]
    8b8e:	f007 fcc7 	bl	10520 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    8b92:	f06f 0527 	mvn.w	r5, #39	; 0x27
    8b96:	b928      	cbnz	r0, 8ba4 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
    8b98:	f007 fcf8 	bl	1058c <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    8b9c:	b910      	cbnz	r0, 8ba4 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
    8b9e:	f007 fcff 	bl	105a0 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    8ba2:	b120      	cbz	r0, 8bae <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x2e>
    8ba4:	480f      	ldr	r0, [pc, #60]	; (8be4 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x64>)
    8ba6:	6060      	str	r0, [r4, #4]
    8ba8:	70a5      	strb	r5, [r4, #2]
    8baa:	2008      	movs	r0, #8
    8bac:	e010      	b.n	8bd0 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x50>
    8bae:	f007 fc8c 	bl	104ca <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    8bb2:	b940      	cbnz	r0, 8bc6 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    8bb4:	f007 fc93 	bl	104de <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    8bb8:	b928      	cbnz	r0, 8bc6 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    8bba:	f007 fca7 	bl	1050c <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    8bbe:	b910      	cbnz	r0, 8bc6 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    8bc0:	f007 fcb8 	bl	10534 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    8bc4:	b130      	cbz	r0, 8bd4 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x54>
    8bc6:	4807      	ldr	r0, [pc, #28]	; (8be4 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x64>)
    8bc8:	3031      	adds	r0, #49	; 0x31
    8bca:	6060      	str	r0, [r4, #4]
    8bcc:	70a5      	strb	r5, [r4, #2]
    8bce:	2004      	movs	r0, #4
    8bd0:	70e0      	strb	r0, [r4, #3]
    8bd2:	bd70      	pop	{r4, r5, r6, pc}
    8bd4:	f240 113f 	movw	r1, #319	; 0x13f
    8bd8:	2074      	movs	r0, #116	; 0x74
    8bda:	f003 fbbd 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8bde:	0000      	.short	0x0000
    8be0:	200002c0 	.word	0x200002c0
    8be4:	000108ed 	.word	0x000108ed

00008be8 <mpsl_tx_power_radio_supported_power_adjust>:
    8be8:	4a06      	ldr	r2, [pc, #24]	; (8c04 <mpsl_tx_power_radio_supported_power_adjust+0x1c>)
    8bea:	b500      	push	{lr}
    8bec:	f992 2003 	ldrsb.w	r2, [r2, #3]
    8bf0:	4290      	cmp	r0, r2
    8bf2:	db01      	blt.n	8bf8 <mpsl_tx_power_radio_supported_power_adjust+0x10>
    8bf4:	4610      	mov	r0, r2
    8bf6:	bd00      	pop	{pc}
    8bf8:	f000 f808 	bl	8c0c <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ>
    8bfc:	4902      	ldr	r1, [pc, #8]	; (8c08 <mpsl_tx_power_radio_supported_power_adjust+0x20>)
    8bfe:	5608      	ldrsb	r0, [r1, r0]
    8c00:	bd00      	pop	{pc}
    8c02:	0000      	.short	0x0000
    8c04:	200002c0 	.word	0x200002c0
    8c08:	000108df 	.word	0x000108df

00008c0c <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ>:
    8c0c:	4602      	mov	r2, r0
    8c0e:	4813      	ldr	r0, [pc, #76]	; (8c5c <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x50>)
    8c10:	b510      	push	{r4, lr}
    8c12:	f990 3003 	ldrsb.w	r3, [r0, #3]
    8c16:	429a      	cmp	r2, r3
    8c18:	db01      	blt.n	8c1e <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x12>
    8c1a:	200d      	movs	r0, #13
    8c1c:	bd10      	pop	{r4, pc}
    8c1e:	f990 3002 	ldrsb.w	r3, [r0, #2]
    8c22:	429a      	cmp	r2, r3
    8c24:	dc01      	bgt.n	8c2a <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1e>
    8c26:	2000      	movs	r0, #0
    8c28:	bd10      	pop	{r4, pc}
    8c2a:	b101      	cbz	r1, 8c2e <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x22>
    8c2c:	2101      	movs	r1, #1
    8c2e:	1ad4      	subs	r4, r2, r3
    8c30:	6843      	ldr	r3, [r0, #4]
    8c32:	5d18      	ldrb	r0, [r3, r4]
    8c34:	4c0a      	ldr	r4, [pc, #40]	; (8c60 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x54>)
    8c36:	5624      	ldrsb	r4, [r4, r0]
    8c38:	4294      	cmp	r4, r2
    8c3a:	d0f5      	beq.n	8c28 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    8c3c:	4c08      	ldr	r4, [pc, #32]	; (8c60 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x54>)
    8c3e:	4408      	add	r0, r1
    8c40:	343f      	adds	r4, #63	; 0x3f
    8c42:	b2c0      	uxtb	r0, r0
    8c44:	b2d2      	uxtb	r2, r2
    8c46:	42a3      	cmp	r3, r4
    8c48:	d1ee      	bne.n	8c28 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    8c4a:	2900      	cmp	r1, #0
    8c4c:	d0ec      	beq.n	8c28 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    8c4e:	2a01      	cmp	r2, #1
    8c50:	d001      	beq.n	8c56 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x4a>
    8c52:	2a02      	cmp	r2, #2
    8c54:	d1e8      	bne.n	8c28 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    8c56:	1c40      	adds	r0, r0, #1
    8c58:	b2c0      	uxtb	r0, r0
    8c5a:	bd10      	pop	{r4, pc}
    8c5c:	200002c0 	.word	0x200002c0
    8c60:	000108df 	.word	0x000108df

00008c64 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>:
    8c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8c68:	461c      	mov	r4, r3
    8c6a:	4690      	mov	r8, r2
    8c6c:	460d      	mov	r5, r1
    8c6e:	4606      	mov	r6, r0
    8c70:	f06f 0715 	mvn.w	r7, #21
    8c74:	2804      	cmp	r0, #4
    8c76:	d804      	bhi.n	8c82 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
    8c78:	b11c      	cbz	r4, 8c82 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
    8c7a:	f007 fb37 	bl	102ec <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x16>
    8c7e:	42a8      	cmp	r0, r5
    8c80:	d802      	bhi.n	8c88 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x24>
    8c82:	4638      	mov	r0, r7
    8c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8c88:	4805      	ldr	r0, [pc, #20]	; (8ca0 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x3c>)
    8c8a:	4642      	mov	r2, r8
    8c8c:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    8c90:	b118      	cbz	r0, 8c9a <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
    8c92:	5740      	ldrsb	r0, [r0, r5]
    8c94:	4282      	cmp	r2, r0
    8c96:	dd00      	ble.n	8c9a <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
    8c98:	4602      	mov	r2, r0
    8c9a:	7022      	strb	r2, [r4, #0]
    8c9c:	2000      	movs	r0, #0
    8c9e:	e7f1      	b.n	8c84 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x20>
    8ca0:	20001088 	.word	0x20001088

00008ca4 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
    8ca4:	4801      	ldr	r0, [pc, #4]	; (8cac <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
    8ca6:	7800      	ldrb	r0, [r0, #0]
    8ca8:	4770      	bx	lr
    8caa:	0000      	.short	0x0000
    8cac:	200002c8 	.word	0x200002c8

00008cb0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
    8cb0:	4905      	ldr	r1, [pc, #20]	; (8cc8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
    8cb2:	780a      	ldrb	r2, [r1, #0]
    8cb4:	4290      	cmp	r0, r2
    8cb6:	d301      	bcc.n	8cbc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
    8cb8:	2000      	movs	r0, #0
    8cba:	4770      	bx	lr
    8cbc:	6849      	ldr	r1, [r1, #4]
    8cbe:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    8cc2:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    8cc6:	4770      	bx	lr
    8cc8:	200002c8 	.word	0x200002c8

00008ccc <MPSL_IRQ_RADIO_Handler>:
    8ccc:	490e      	ldr	r1, [pc, #56]	; (8d08 <MPSL_IRQ_RADIO_Handler+0x3c>)
    8cce:	b510      	push	{r4, lr}
    8cd0:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
    8cd4:	2820      	cmp	r0, #32
    8cd6:	d012      	beq.n	8cfe <MPSL_IRQ_RADIO_Handler+0x32>
    8cd8:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
    8cdc:	f5a1 6280 	sub.w	r2, r1, #1024	; 0x400
    8ce0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    8ce4:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    8ce8:	f891 1032 	ldrb.w	r1, [r1, #50]	; 0x32
    8cec:	6840      	ldr	r0, [r0, #4]
    8cee:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    8cf2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    8cf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8cfa:	2104      	movs	r1, #4
    8cfc:	4710      	bx	r2
    8cfe:	f640 01bc 	movw	r1, #2236	; 0x8bc
    8d02:	2070      	movs	r0, #112	; 0x70
    8d04:	f003 fb28 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8d08:	2000149c 	.word	0x2000149c
    8d0c:	b570      	push	{r4, r5, r6, lr}
    8d0e:	4605      	mov	r5, r0
    8d10:	2a20      	cmp	r2, #32
    8d12:	d028      	beq.n	8d66 <MPSL_IRQ_RADIO_Handler+0x9a>
    8d14:	4819      	ldr	r0, [pc, #100]	; (8d7c <MPSL_IRQ_RADIO_Handler+0xb0>)
    8d16:	4c1a      	ldr	r4, [pc, #104]	; (8d80 <MPSL_IRQ_RADIO_Handler+0xb4>)
    8d18:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
    8d1c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    8d20:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
    8d24:	4423      	add	r3, r4
    8d26:	2920      	cmp	r1, #32
    8d28:	d022      	beq.n	8d70 <MPSL_IRQ_RADIO_Handler+0xa4>
    8d2a:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
    8d2e:	7840      	ldrb	r0, [r0, #1]
    8d30:	784c      	ldrb	r4, [r1, #1]
    8d32:	7048      	strb	r0, [r1, #1]
    8d34:	4620      	mov	r0, r4
    8d36:	4601      	mov	r1, r0
    8d38:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
    8d3c:	4291      	cmp	r1, r2
    8d3e:	7005      	strb	r5, [r0, #0]
    8d40:	7840      	ldrb	r0, [r0, #1]
    8d42:	d1f8      	bne.n	8d36 <MPSL_IRQ_RADIO_Handler+0x6a>
    8d44:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
    8d48:	2a20      	cmp	r2, #32
    8d4a:	bf1a      	itte	ne
    8d4c:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
    8d50:	7054      	strbne	r4, [r2, #1]
    8d52:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
    8d56:	2220      	movs	r2, #32
    8d58:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
    8d5c:	f88c 2001 	strb.w	r2, [ip, #1]
    8d60:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
    8d64:	bd70      	pop	{r4, r5, r6, pc}
    8d66:	f44f 7126 	mov.w	r1, #664	; 0x298
    8d6a:	2070      	movs	r0, #112	; 0x70
    8d6c:	f003 faf4 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8d70:	f893 4020 	ldrb.w	r4, [r3, #32]
    8d74:	7840      	ldrb	r0, [r0, #1]
    8d76:	f883 0020 	strb.w	r0, [r3, #32]
    8d7a:	e7db      	b.n	8d34 <MPSL_IRQ_RADIO_Handler+0x68>
    8d7c:	2000141c 	.word	0x2000141c
    8d80:	2000149c 	.word	0x2000149c
    8d84:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8d88:	b08d      	sub	sp, #52	; 0x34
    8d8a:	4615      	mov	r5, r2
    8d8c:	460c      	mov	r4, r1
    8d8e:	f002 fa11 	bl	b1b4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    8d92:	4428      	add	r0, r5
    8d94:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    8d98:	9008      	str	r0, [sp, #32]
    8d9a:	6821      	ldr	r1, [r4, #0]
    8d9c:	1a08      	subs	r0, r1, r0
    8d9e:	0200      	lsls	r0, r0, #8
    8da0:	17c1      	asrs	r1, r0, #31
    8da2:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    8da6:	1200      	asrs	r0, r0, #8
    8da8:	2800      	cmp	r0, #0
    8daa:	f300 80f0 	bgt.w	8f8e <MPSL_IRQ_RADIO_Handler+0x2c2>
    8dae:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    8db2:	48cd      	ldr	r0, [pc, #820]	; (90e8 <MPSL_IRQ_RADIO_Handler+0x41c>)
    8db4:	eb08 0148 	add.w	r1, r8, r8, lsl #1
    8db8:	4408      	add	r0, r1
    8dba:	9009      	str	r0, [sp, #36]	; 0x24
    8dbc:	f890 5020 	ldrb.w	r5, [r0, #32]
    8dc0:	2020      	movs	r0, #32
    8dc2:	4eca      	ldr	r6, [pc, #808]	; (90ec <MPSL_IRQ_RADIO_Handler+0x420>)
    8dc4:	f10d 0a18 	add.w	sl, sp, #24
    8dc8:	f10d 091c 	add.w	r9, sp, #28
    8dcc:	f88d 0018 	strb.w	r0, [sp, #24]
    8dd0:	2d20      	cmp	r5, #32
    8dd2:	bf1c      	itt	ne
    8dd4:	48c6      	ldrne	r0, [pc, #792]	; (90f0 <MPSL_IRQ_RADIO_Handler+0x424>)
    8dd6:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
    8dda:	d038      	beq.n	8e4e <MPSL_IRQ_RADIO_Handler+0x182>
    8ddc:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    8de0:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    8de4:	f100 0108 	add.w	r1, r0, #8
    8de8:	68c0      	ldr	r0, [r0, #12]
    8dea:	6827      	ldr	r7, [r4, #0]
    8dec:	1a38      	subs	r0, r7, r0
    8dee:	0200      	lsls	r0, r0, #8
    8df0:	17c2      	asrs	r2, r0, #31
    8df2:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    8df6:	1200      	asrs	r0, r0, #8
    8df8:	d429      	bmi.n	8e4e <MPSL_IRQ_RADIO_Handler+0x182>
    8dfa:	89e0      	ldrh	r0, [r4, #14]
    8dfc:	b300      	cbz	r0, 8e40 <MPSL_IRQ_RADIO_Handler+0x174>
    8dfe:	89c8      	ldrh	r0, [r1, #14]
    8e00:	b9f0      	cbnz	r0, 8e40 <MPSL_IRQ_RADIO_Handler+0x174>
    8e02:	6808      	ldr	r0, [r1, #0]
    8e04:	9003      	str	r0, [sp, #12]
    8e06:	f003 f907 	bl	c018 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    8e0a:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    8e0e:	bf08      	it	eq
    8e10:	200d      	moveq	r0, #13
    8e12:	d00b      	beq.n	8e2c <MPSL_IRQ_RADIO_Handler+0x160>
    8e14:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    8e18:	3856      	subs	r0, #86	; 0x56
    8e1a:	bf08      	it	eq
    8e1c:	201c      	moveq	r0, #28
    8e1e:	d005      	beq.n	8e2c <MPSL_IRQ_RADIO_Handler+0x160>
    8e20:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    8e24:	389f      	subs	r0, #159	; 0x9f
    8e26:	bf14      	ite	ne
    8e28:	2000      	movne	r0, #0
    8e2a:	2032      	moveq	r0, #50	; 0x32
    8e2c:	1c41      	adds	r1, r0, #1
    8e2e:	9803      	ldr	r0, [sp, #12]
    8e30:	1a38      	subs	r0, r7, r0
    8e32:	0200      	lsls	r0, r0, #8
    8e34:	17c2      	asrs	r2, r0, #31
    8e36:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    8e3a:	1200      	asrs	r0, r0, #8
    8e3c:	4288      	cmp	r0, r1
    8e3e:	db06      	blt.n	8e4e <MPSL_IRQ_RADIO_Handler+0x182>
    8e40:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    8e44:	f88a 5000 	strb.w	r5, [sl]
    8e48:	7845      	ldrb	r5, [r0, #1]
    8e4a:	2d20      	cmp	r5, #32
    8e4c:	d1c6      	bne.n	8ddc <MPSL_IRQ_RADIO_Handler+0x110>
    8e4e:	f89a 0000 	ldrb.w	r0, [sl]
    8e52:	f889 0000 	strb.w	r0, [r9]
    8e56:	2d20      	cmp	r5, #32
    8e58:	bf1c      	itt	ne
    8e5a:	48a5      	ldrne	r0, [pc, #660]	; (90f0 <MPSL_IRQ_RADIO_Handler+0x424>)
    8e5c:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
    8e60:	f000 813e 	beq.w	90e0 <MPSL_IRQ_RADIO_Handler+0x414>
    8e64:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    8e68:	eb06 0780 	add.w	r7, r6, r0, lsl #2
    8e6c:	6861      	ldr	r1, [r4, #4]
    8e6e:	f8d7 8008 	ldr.w	r8, [r7, #8]
    8e72:	f107 0008 	add.w	r0, r7, #8
    8e76:	eba8 0101 	sub.w	r1, r8, r1
    8e7a:	0209      	lsls	r1, r1, #8
    8e7c:	17ca      	asrs	r2, r1, #31
    8e7e:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    8e82:	1209      	asrs	r1, r1, #8
    8e84:	d427      	bmi.n	8ed6 <MPSL_IRQ_RADIO_Handler+0x20a>
    8e86:	89c0      	ldrh	r0, [r0, #14]
    8e88:	2800      	cmp	r0, #0
    8e8a:	f000 8129 	beq.w	90e0 <MPSL_IRQ_RADIO_Handler+0x414>
    8e8e:	89e0      	ldrh	r0, [r4, #14]
    8e90:	2800      	cmp	r0, #0
    8e92:	f040 8125 	bne.w	90e0 <MPSL_IRQ_RADIO_Handler+0x414>
    8e96:	f8d4 a000 	ldr.w	sl, [r4]
    8e9a:	f003 f8bd 	bl	c018 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    8e9e:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    8ea2:	bf08      	it	eq
    8ea4:	200d      	moveq	r0, #13
    8ea6:	d00b      	beq.n	8ec0 <MPSL_IRQ_RADIO_Handler+0x1f4>
    8ea8:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    8eac:	3856      	subs	r0, #86	; 0x56
    8eae:	bf08      	it	eq
    8eb0:	201c      	moveq	r0, #28
    8eb2:	d005      	beq.n	8ec0 <MPSL_IRQ_RADIO_Handler+0x1f4>
    8eb4:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    8eb8:	389f      	subs	r0, #159	; 0x9f
    8eba:	bf14      	ite	ne
    8ebc:	2000      	movne	r0, #0
    8ebe:	2032      	moveq	r0, #50	; 0x32
    8ec0:	1c41      	adds	r1, r0, #1
    8ec2:	eba8 000a 	sub.w	r0, r8, sl
    8ec6:	0200      	lsls	r0, r0, #8
    8ec8:	17c2      	asrs	r2, r0, #31
    8eca:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    8ece:	1200      	asrs	r0, r0, #8
    8ed0:	4288      	cmp	r0, r1
    8ed2:	f280 8105 	bge.w	90e0 <MPSL_IRQ_RADIO_Handler+0x414>
    8ed6:	f889 5000 	strb.w	r5, [r9]
    8eda:	7e38      	ldrb	r0, [r7, #24]
    8edc:	7c21      	ldrb	r1, [r4, #16]
    8ede:	4288      	cmp	r0, r1
    8ee0:	d906      	bls.n	8ef0 <MPSL_IRQ_RADIO_Handler+0x224>
    8ee2:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    8ee6:	7845      	ldrb	r5, [r0, #1]
    8ee8:	2d20      	cmp	r5, #32
    8eea:	d1bb      	bne.n	8e64 <MPSL_IRQ_RADIO_Handler+0x198>
    8eec:	f000 b8f8 	b.w	90e0 <MPSL_IRQ_RADIO_Handler+0x414>
    8ef0:	f89d 001c 	ldrb.w	r0, [sp, #28]
    8ef4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    8ef8:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    8efc:	8ac1      	ldrh	r1, [r0, #22]
    8efe:	68c5      	ldr	r5, [r0, #12]
    8f00:	bbe1      	cbnz	r1, 8f7c <MPSL_IRQ_RADIO_Handler+0x2b0>
    8f02:	89e1      	ldrh	r1, [r4, #14]
    8f04:	b3d1      	cbz	r1, 8f7c <MPSL_IRQ_RADIO_Handler+0x2b0>
    8f06:	6887      	ldr	r7, [r0, #8]
    8f08:	f003 f886 	bl	c018 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    8f0c:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    8f10:	bf08      	it	eq
    8f12:	200d      	moveq	r0, #13
    8f14:	d00b      	beq.n	8f2e <MPSL_IRQ_RADIO_Handler+0x262>
    8f16:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    8f1a:	3856      	subs	r0, #86	; 0x56
    8f1c:	bf08      	it	eq
    8f1e:	201c      	moveq	r0, #28
    8f20:	d005      	beq.n	8f2e <MPSL_IRQ_RADIO_Handler+0x262>
    8f22:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    8f26:	389f      	subs	r0, #159	; 0x9f
    8f28:	bf14      	ite	ne
    8f2a:	2000      	movne	r0, #0
    8f2c:	2032      	moveq	r0, #50	; 0x32
    8f2e:	1c41      	adds	r1, r0, #1
    8f30:	1be8      	subs	r0, r5, r7
    8f32:	0200      	lsls	r0, r0, #8
    8f34:	17c2      	asrs	r2, r0, #31
    8f36:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    8f3a:	1200      	asrs	r0, r0, #8
    8f3c:	4288      	cmp	r0, r1
    8f3e:	da1d      	bge.n	8f7c <MPSL_IRQ_RADIO_Handler+0x2b0>
    8f40:	f003 f86a 	bl	c018 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    8f44:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    8f48:	bf08      	it	eq
    8f4a:	200d      	moveq	r0, #13
    8f4c:	d00b      	beq.n	8f66 <MPSL_IRQ_RADIO_Handler+0x29a>
    8f4e:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    8f52:	3856      	subs	r0, #86	; 0x56
    8f54:	bf08      	it	eq
    8f56:	201c      	moveq	r0, #28
    8f58:	d005      	beq.n	8f66 <MPSL_IRQ_RADIO_Handler+0x29a>
    8f5a:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    8f5e:	389f      	subs	r0, #159	; 0x9f
    8f60:	bf14      	ite	ne
    8f62:	2000      	movne	r0, #0
    8f64:	2032      	moveq	r0, #50	; 0x32
    8f66:	f89d 101c 	ldrb.w	r1, [sp, #28]
    8f6a:	1c40      	adds	r0, r0, #1
    8f6c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    8f70:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    8f74:	6889      	ldr	r1, [r1, #8]
    8f76:	4408      	add	r0, r1
    8f78:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
    8f7c:	9808      	ldr	r0, [sp, #32]
    8f7e:	1a28      	subs	r0, r5, r0
    8f80:	0200      	lsls	r0, r0, #8
    8f82:	17c1      	asrs	r1, r0, #31
    8f84:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    8f88:	1200      	asrs	r0, r0, #8
    8f8a:	2800      	cmp	r0, #0
    8f8c:	dd03      	ble.n	8f96 <MPSL_IRQ_RADIO_Handler+0x2ca>
    8f8e:	b011      	add	sp, #68	; 0x44
    8f90:	2000      	movs	r0, #0
    8f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8f96:	6820      	ldr	r0, [r4, #0]
    8f98:	42a8      	cmp	r0, r5
    8f9a:	d902      	bls.n	8fa2 <MPSL_IRQ_RADIO_Handler+0x2d6>
    8f9c:	68a1      	ldr	r1, [r4, #8]
    8f9e:	1c49      	adds	r1, r1, #1
    8fa0:	60a1      	str	r1, [r4, #8]
    8fa2:	6861      	ldr	r1, [r4, #4]
    8fa4:	f10d 0a18 	add.w	sl, sp, #24
    8fa8:	1a08      	subs	r0, r1, r0
    8faa:	4428      	add	r0, r5
    8fac:	f025 417f 	bic.w	r1, r5, #4278190080	; 0xff000000
    8fb0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    8fb4:	e9c4 1000 	strd	r1, r0, [r4]
    8fb8:	9810      	ldr	r0, [sp, #64]	; 0x40
    8fba:	900b      	str	r0, [sp, #44]	; 0x2c
    8fbc:	9809      	ldr	r0, [sp, #36]	; 0x24
    8fbe:	f10d 081c 	add.w	r8, sp, #28
    8fc2:	f890 5020 	ldrb.w	r5, [r0, #32]
    8fc6:	2020      	movs	r0, #32
    8fc8:	f88d 0018 	strb.w	r0, [sp, #24]
    8fcc:	2d20      	cmp	r5, #32
    8fce:	d03c      	beq.n	904a <MPSL_IRQ_RADIO_Handler+0x37e>
    8fd0:	4947      	ldr	r1, [pc, #284]	; (90f0 <MPSL_IRQ_RADIO_Handler+0x424>)
    8fd2:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8fd4:	eb01 1b80 	add.w	fp, r1, r0, lsl #6
    8fd8:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    8fdc:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    8fe0:	f100 0108 	add.w	r1, r0, #8
    8fe4:	68c0      	ldr	r0, [r0, #12]
    8fe6:	6827      	ldr	r7, [r4, #0]
    8fe8:	1a38      	subs	r0, r7, r0
    8fea:	0200      	lsls	r0, r0, #8
    8fec:	17c2      	asrs	r2, r0, #31
    8fee:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    8ff2:	1200      	asrs	r0, r0, #8
    8ff4:	d429      	bmi.n	904a <MPSL_IRQ_RADIO_Handler+0x37e>
    8ff6:	89e0      	ldrh	r0, [r4, #14]
    8ff8:	b300      	cbz	r0, 903c <MPSL_IRQ_RADIO_Handler+0x370>
    8ffa:	89c8      	ldrh	r0, [r1, #14]
    8ffc:	b9f0      	cbnz	r0, 903c <MPSL_IRQ_RADIO_Handler+0x370>
    8ffe:	f8d1 9000 	ldr.w	r9, [r1]
    9002:	f003 f809 	bl	c018 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9006:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    900a:	bf08      	it	eq
    900c:	200d      	moveq	r0, #13
    900e:	d00b      	beq.n	9028 <MPSL_IRQ_RADIO_Handler+0x35c>
    9010:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9014:	3856      	subs	r0, #86	; 0x56
    9016:	bf08      	it	eq
    9018:	201c      	moveq	r0, #28
    901a:	d005      	beq.n	9028 <MPSL_IRQ_RADIO_Handler+0x35c>
    901c:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9020:	389f      	subs	r0, #159	; 0x9f
    9022:	bf14      	ite	ne
    9024:	2000      	movne	r0, #0
    9026:	2032      	moveq	r0, #50	; 0x32
    9028:	1c41      	adds	r1, r0, #1
    902a:	eba7 0009 	sub.w	r0, r7, r9
    902e:	0200      	lsls	r0, r0, #8
    9030:	17c2      	asrs	r2, r0, #31
    9032:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    9036:	1200      	asrs	r0, r0, #8
    9038:	4288      	cmp	r0, r1
    903a:	db06      	blt.n	904a <MPSL_IRQ_RADIO_Handler+0x37e>
    903c:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    9040:	f88a 5000 	strb.w	r5, [sl]
    9044:	7845      	ldrb	r5, [r0, #1]
    9046:	2d20      	cmp	r5, #32
    9048:	d1c6      	bne.n	8fd8 <MPSL_IRQ_RADIO_Handler+0x30c>
    904a:	f89a 0000 	ldrb.w	r0, [sl]
    904e:	f888 0000 	strb.w	r0, [r8]
    9052:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9054:	2d20      	cmp	r5, #32
    9056:	bf1c      	itt	ne
    9058:	4925      	ldrne	r1, [pc, #148]	; (90f0 <MPSL_IRQ_RADIO_Handler+0x424>)
    905a:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    905e:	d03f      	beq.n	90e0 <MPSL_IRQ_RADIO_Handler+0x414>
    9060:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    9064:	eb06 0780 	add.w	r7, r6, r0, lsl #2
    9068:	6860      	ldr	r0, [r4, #4]
    906a:	f8d7 9008 	ldr.w	r9, [r7, #8]
    906e:	f107 0108 	add.w	r1, r7, #8
    9072:	eba9 0000 	sub.w	r0, r9, r0
    9076:	0200      	lsls	r0, r0, #8
    9078:	17c2      	asrs	r2, r0, #31
    907a:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    907e:	1200      	asrs	r0, r0, #8
    9080:	d422      	bmi.n	90c8 <MPSL_IRQ_RADIO_Handler+0x3fc>
    9082:	89c8      	ldrh	r0, [r1, #14]
    9084:	b360      	cbz	r0, 90e0 <MPSL_IRQ_RADIO_Handler+0x414>
    9086:	89e0      	ldrh	r0, [r4, #14]
    9088:	bb50      	cbnz	r0, 90e0 <MPSL_IRQ_RADIO_Handler+0x414>
    908a:	f8d4 a000 	ldr.w	sl, [r4]
    908e:	f002 ffc3 	bl	c018 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9092:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9096:	bf08      	it	eq
    9098:	200d      	moveq	r0, #13
    909a:	d00b      	beq.n	90b4 <MPSL_IRQ_RADIO_Handler+0x3e8>
    909c:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    90a0:	3856      	subs	r0, #86	; 0x56
    90a2:	bf08      	it	eq
    90a4:	201c      	moveq	r0, #28
    90a6:	d005      	beq.n	90b4 <MPSL_IRQ_RADIO_Handler+0x3e8>
    90a8:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    90ac:	389f      	subs	r0, #159	; 0x9f
    90ae:	bf14      	ite	ne
    90b0:	2000      	movne	r0, #0
    90b2:	2032      	moveq	r0, #50	; 0x32
    90b4:	1c41      	adds	r1, r0, #1
    90b6:	eba9 000a 	sub.w	r0, r9, sl
    90ba:	0200      	lsls	r0, r0, #8
    90bc:	17c2      	asrs	r2, r0, #31
    90be:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    90c2:	1200      	asrs	r0, r0, #8
    90c4:	4288      	cmp	r0, r1
    90c6:	da0b      	bge.n	90e0 <MPSL_IRQ_RADIO_Handler+0x414>
    90c8:	f888 5000 	strb.w	r5, [r8]
    90cc:	7e38      	ldrb	r0, [r7, #24]
    90ce:	7c21      	ldrb	r1, [r4, #16]
    90d0:	4288      	cmp	r0, r1
    90d2:	f67f af0d 	bls.w	8ef0 <MPSL_IRQ_RADIO_Handler+0x224>
    90d6:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    90da:	7845      	ldrb	r5, [r0, #1]
    90dc:	2d20      	cmp	r5, #32
    90de:	d1bf      	bne.n	9060 <MPSL_IRQ_RADIO_Handler+0x394>
    90e0:	b011      	add	sp, #68	; 0x44
    90e2:	2001      	movs	r0, #1
    90e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    90e8:	2000149c 	.word	0x2000149c
    90ec:	2000109c 	.word	0x2000109c
    90f0:	2000141c 	.word	0x2000141c
    90f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    90f8:	460f      	mov	r7, r1
    90fa:	4606      	mov	r6, r0
    90fc:	eb01 0047 	add.w	r0, r1, r7, lsl #1
    9100:	494b      	ldr	r1, [pc, #300]	; (9230 <MPSL_IRQ_RADIO_Handler+0x564>)
    9102:	4699      	mov	r9, r3
    9104:	4408      	add	r0, r1
    9106:	4692      	mov	sl, r2
    9108:	f890 4020 	ldrb.w	r4, [r0, #32]
    910c:	2020      	movs	r0, #32
    910e:	7010      	strb	r0, [r2, #0]
    9110:	f5a1 6880 	sub.w	r8, r1, #1024	; 0x400
    9114:	2c20      	cmp	r4, #32
    9116:	bf1c      	itt	ne
    9118:	4846      	ldrne	r0, [pc, #280]	; (9234 <MPSL_IRQ_RADIO_Handler+0x568>)
    911a:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
    911e:	d038      	beq.n	9192 <MPSL_IRQ_RADIO_Handler+0x4c6>
    9120:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    9124:	eb08 0080 	add.w	r0, r8, r0, lsl #2
    9128:	f100 0108 	add.w	r1, r0, #8
    912c:	68c0      	ldr	r0, [r0, #12]
    912e:	6835      	ldr	r5, [r6, #0]
    9130:	1a28      	subs	r0, r5, r0
    9132:	0200      	lsls	r0, r0, #8
    9134:	17c2      	asrs	r2, r0, #31
    9136:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    913a:	1200      	asrs	r0, r0, #8
    913c:	d429      	bmi.n	9192 <MPSL_IRQ_RADIO_Handler+0x4c6>
    913e:	89f0      	ldrh	r0, [r6, #14]
    9140:	b300      	cbz	r0, 9184 <MPSL_IRQ_RADIO_Handler+0x4b8>
    9142:	89c8      	ldrh	r0, [r1, #14]
    9144:	b9f0      	cbnz	r0, 9184 <MPSL_IRQ_RADIO_Handler+0x4b8>
    9146:	6808      	ldr	r0, [r1, #0]
    9148:	9000      	str	r0, [sp, #0]
    914a:	f002 ff65 	bl	c018 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    914e:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9152:	bf08      	it	eq
    9154:	200d      	moveq	r0, #13
    9156:	d00b      	beq.n	9170 <MPSL_IRQ_RADIO_Handler+0x4a4>
    9158:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    915c:	3856      	subs	r0, #86	; 0x56
    915e:	bf08      	it	eq
    9160:	201c      	moveq	r0, #28
    9162:	d005      	beq.n	9170 <MPSL_IRQ_RADIO_Handler+0x4a4>
    9164:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9168:	389f      	subs	r0, #159	; 0x9f
    916a:	bf14      	ite	ne
    916c:	2000      	movne	r0, #0
    916e:	2032      	moveq	r0, #50	; 0x32
    9170:	1c41      	adds	r1, r0, #1
    9172:	9800      	ldr	r0, [sp, #0]
    9174:	1a28      	subs	r0, r5, r0
    9176:	0200      	lsls	r0, r0, #8
    9178:	17c2      	asrs	r2, r0, #31
    917a:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    917e:	1200      	asrs	r0, r0, #8
    9180:	4288      	cmp	r0, r1
    9182:	db06      	blt.n	9192 <MPSL_IRQ_RADIO_Handler+0x4c6>
    9184:	eb0b 0044 	add.w	r0, fp, r4, lsl #1
    9188:	f88a 4000 	strb.w	r4, [sl]
    918c:	7844      	ldrb	r4, [r0, #1]
    918e:	2c20      	cmp	r4, #32
    9190:	d1c6      	bne.n	9120 <MPSL_IRQ_RADIO_Handler+0x454>
    9192:	f89a 0000 	ldrb.w	r0, [sl]
    9196:	f889 0000 	strb.w	r0, [r9]
    919a:	2c20      	cmp	r4, #32
    919c:	bf1c      	itt	ne
    919e:	4825      	ldrne	r0, [pc, #148]	; (9234 <MPSL_IRQ_RADIO_Handler+0x568>)
    91a0:	eb00 1a87 	addne.w	sl, r0, r7, lsl #6
    91a4:	d040      	beq.n	9228 <MPSL_IRQ_RADIO_Handler+0x55c>
    91a6:	bf00      	nop
    91a8:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    91ac:	eb08 0780 	add.w	r7, r8, r0, lsl #2
    91b0:	6870      	ldr	r0, [r6, #4]
    91b2:	68bd      	ldr	r5, [r7, #8]
    91b4:	f107 0108 	add.w	r1, r7, #8
    91b8:	1a28      	subs	r0, r5, r0
    91ba:	0200      	lsls	r0, r0, #8
    91bc:	17c2      	asrs	r2, r0, #31
    91be:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    91c2:	1200      	asrs	r0, r0, #8
    91c4:	d422      	bmi.n	920c <MPSL_IRQ_RADIO_Handler+0x540>
    91c6:	89c8      	ldrh	r0, [r1, #14]
    91c8:	b370      	cbz	r0, 9228 <MPSL_IRQ_RADIO_Handler+0x55c>
    91ca:	89f0      	ldrh	r0, [r6, #14]
    91cc:	bb60      	cbnz	r0, 9228 <MPSL_IRQ_RADIO_Handler+0x55c>
    91ce:	f8d6 b000 	ldr.w	fp, [r6]
    91d2:	f002 ff21 	bl	c018 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    91d6:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    91da:	bf08      	it	eq
    91dc:	200d      	moveq	r0, #13
    91de:	d00b      	beq.n	91f8 <MPSL_IRQ_RADIO_Handler+0x52c>
    91e0:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    91e4:	3856      	subs	r0, #86	; 0x56
    91e6:	bf08      	it	eq
    91e8:	201c      	moveq	r0, #28
    91ea:	d005      	beq.n	91f8 <MPSL_IRQ_RADIO_Handler+0x52c>
    91ec:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    91f0:	389f      	subs	r0, #159	; 0x9f
    91f2:	bf14      	ite	ne
    91f4:	2000      	movne	r0, #0
    91f6:	2032      	moveq	r0, #50	; 0x32
    91f8:	1c41      	adds	r1, r0, #1
    91fa:	eba5 000b 	sub.w	r0, r5, fp
    91fe:	0200      	lsls	r0, r0, #8
    9200:	17c2      	asrs	r2, r0, #31
    9202:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    9206:	1200      	asrs	r0, r0, #8
    9208:	4288      	cmp	r0, r1
    920a:	da0d      	bge.n	9228 <MPSL_IRQ_RADIO_Handler+0x55c>
    920c:	f889 4000 	strb.w	r4, [r9]
    9210:	7e38      	ldrb	r0, [r7, #24]
    9212:	7c31      	ldrb	r1, [r6, #16]
    9214:	4288      	cmp	r0, r1
    9216:	d802      	bhi.n	921e <MPSL_IRQ_RADIO_Handler+0x552>
    9218:	2000      	movs	r0, #0
    921a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    921e:	eb0a 0044 	add.w	r0, sl, r4, lsl #1
    9222:	7844      	ldrb	r4, [r0, #1]
    9224:	2c20      	cmp	r4, #32
    9226:	d1bf      	bne.n	91a8 <MPSL_IRQ_RADIO_Handler+0x4dc>
    9228:	2001      	movs	r0, #1
    922a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    922e:	0000      	.short	0x0000
    9230:	2000149c 	.word	0x2000149c
    9234:	2000141c 	.word	0x2000141c
    9238:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    923c:	b098      	sub	sp, #96	; 0x60
    923e:	4615      	mov	r5, r2
    9240:	f002 fa7a 	bl	b738 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
    9244:	4604      	mov	r4, r0
    9246:	f002 fd0f 	bl	bc68 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    924a:	4606      	mov	r6, r0
    924c:	9819      	ldr	r0, [sp, #100]	; 0x64
    924e:	2801      	cmp	r0, #1
    9250:	bf18      	it	ne
    9252:	2802      	cmpne	r0, #2
    9254:	d005      	beq.n	9262 <MPSL_IRQ_RADIO_Handler+0x596>
    9256:	f640 1192 	movw	r1, #2450	; 0x992
    925a:	f04f 0070 	mov.w	r0, #112	; 0x70
    925e:	f003 f87b 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9262:	49fa      	ldr	r1, [pc, #1000]	; (964c <MPSL_IRQ_RADIO_Handler+0x980>)
    9264:	2001      	movs	r0, #1
    9266:	6008      	str	r0, [r1, #0]
    9268:	49f9      	ldr	r1, [pc, #996]	; (9650 <MPSL_IRQ_RADIO_Handler+0x984>)
    926a:	6889      	ldr	r1, [r1, #8]
    926c:	6008      	str	r0, [r1, #0]
    926e:	2000      	movs	r0, #0
    9270:	f88d 0046 	strb.w	r0, [sp, #70]	; 0x46
    9274:	900a      	str	r0, [sp, #40]	; 0x28
    9276:	1e40      	subs	r0, r0, #1
    9278:	900b      	str	r0, [sp, #44]	; 0x2c
    927a:	49f6      	ldr	r1, [pc, #984]	; (9654 <MPSL_IRQ_RADIO_Handler+0x988>)
    927c:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    9280:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    9284:	e9d1 0302 	ldrd	r0, r3, [r1, #8]
    9288:	e9d1 c204 	ldrd	ip, r2, [r1, #16]
    928c:	e9cd 030c 	strd	r0, r3, [sp, #48]	; 0x30
    9290:	e9cd c20e 	strd	ip, r2, [sp, #56]	; 0x38
    9294:	6989      	ldr	r1, [r1, #24]
    9296:	9110      	str	r1, [sp, #64]	; 0x40
    9298:	f007 f856 	bl	10348 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    929c:	4602      	mov	r2, r0
    929e:	f8bd 803e 	ldrh.w	r8, [sp, #62]	; 0x3e
    92a2:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    92a6:	4bec      	ldr	r3, [pc, #944]	; (9658 <MPSL_IRQ_RADIO_Handler+0x98c>)
    92a8:	4440      	add	r0, r8
    92aa:	1c41      	adds	r1, r0, #1
    92ac:	1850      	adds	r0, r2, r1
    92ae:	429a      	cmp	r2, r3
    92b0:	d854      	bhi.n	935c <MPSL_IRQ_RADIO_Handler+0x690>
    92b2:	4dea      	ldr	r5, [pc, #936]	; (965c <MPSL_IRQ_RADIO_Handler+0x990>)
    92b4:	42a9      	cmp	r1, r5
    92b6:	dc58      	bgt.n	936a <MPSL_IRQ_RADIO_Handler+0x69e>
    92b8:	426a      	negs	r2, r5
    92ba:	4291      	cmp	r1, r2
    92bc:	db5d      	blt.n	937a <MPSL_IRQ_RADIO_Handler+0x6ae>
    92be:	1c59      	adds	r1, r3, #1
    92c0:	4281      	cmp	r1, r0
    92c2:	bfdc      	itt	le
    92c4:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    92c8:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    92cc:	dd05      	ble.n	92da <MPSL_IRQ_RADIO_Handler+0x60e>
    92ce:	2800      	cmp	r0, #0
    92d0:	bfbc      	itt	lt
    92d2:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    92d6:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    92da:	9014      	str	r0, [sp, #80]	; 0x50
    92dc:	48e0      	ldr	r0, [pc, #896]	; (9660 <MPSL_IRQ_RADIO_Handler+0x994>)
    92de:	f1b8 0f00 	cmp.w	r8, #0
    92e2:	8b80      	ldrh	r0, [r0, #28]
    92e4:	f8ad 0044 	strh.w	r0, [sp, #68]	; 0x44
    92e8:	bf14      	ite	ne
    92ea:	f04f 0a01 	movne.w	sl, #1
    92ee:	f04f 0a00 	moveq.w	sl, #0
    92f2:	f002 ffb9 	bl	c268 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    92f6:	9016      	str	r0, [sp, #88]	; 0x58
    92f8:	f1ba 0f00 	cmp.w	sl, #0
    92fc:	d008      	beq.n	9310 <MPSL_IRQ_RADIO_Handler+0x644>
    92fe:	48d8      	ldr	r0, [pc, #864]	; (9660 <MPSL_IRQ_RADIO_Handler+0x994>)
    9300:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    9302:	f1b0 3fff 	cmp.w	r0, #4294967295
    9306:	bf02      	ittt	eq
    9308:	9816      	ldreq	r0, [sp, #88]	; 0x58
    930a:	2800      	cmpeq	r0, #0
    930c:	2701      	moveq	r7, #1
    930e:	d001      	beq.n	9314 <MPSL_IRQ_RADIO_Handler+0x648>
    9310:	f04f 0700 	mov.w	r7, #0
    9314:	f002 fe80 	bl	c018 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9318:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    931c:	bf08      	it	eq
    931e:	200d      	moveq	r0, #13
    9320:	d00b      	beq.n	933a <MPSL_IRQ_RADIO_Handler+0x66e>
    9322:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9326:	3856      	subs	r0, #86	; 0x56
    9328:	bf08      	it	eq
    932a:	201c      	moveq	r0, #28
    932c:	d005      	beq.n	933a <MPSL_IRQ_RADIO_Handler+0x66e>
    932e:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9332:	389f      	subs	r0, #159	; 0x9f
    9334:	bf14      	ite	ne
    9336:	2000      	movne	r0, #0
    9338:	2032      	moveq	r0, #50	; 0x32
    933a:	f04f 0900 	mov.w	r9, #0
    933e:	46cb      	mov	fp, r9
    9340:	9013      	str	r0, [sp, #76]	; 0x4c
    9342:	4546      	cmp	r6, r8
    9344:	d936      	bls.n	93b4 <MPSL_IRQ_RADIO_Handler+0x6e8>
    9346:	9b14      	ldr	r3, [sp, #80]	; 0x50
    9348:	f8df 930c 	ldr.w	r9, [pc, #780]	; 9658 <MPSL_IRQ_RADIO_Handler+0x98c>
    934c:	ea6f 0c06 	mvn.w	ip, r6
    9350:	4669      	mov	r1, sp
    9352:	aa17      	add	r2, sp, #92	; 0x5c
    9354:	eb03 000c 	add.w	r0, r3, ip
    9358:	454b      	cmp	r3, r9
    935a:	d904      	bls.n	9366 <MPSL_IRQ_RADIO_Handler+0x69a>
    935c:	f240 519e 	movw	r1, #1438	; 0x59e
    9360:	2070      	movs	r0, #112	; 0x70
    9362:	f002 fff9 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9366:	45ac      	cmp	ip, r5
    9368:	dd04      	ble.n	9374 <MPSL_IRQ_RADIO_Handler+0x6a8>
    936a:	f240 519f 	movw	r1, #1439	; 0x59f
    936e:	2070      	movs	r0, #112	; 0x70
    9370:	f002 fff2 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9374:	4bbb      	ldr	r3, [pc, #748]	; (9664 <MPSL_IRQ_RADIO_Handler+0x998>)
    9376:	459c      	cmp	ip, r3
    9378:	da04      	bge.n	9384 <MPSL_IRQ_RADIO_Handler+0x6b8>
    937a:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
    937e:	2070      	movs	r0, #112	; 0x70
    9380:	f002 ffea 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9384:	4bb8      	ldr	r3, [pc, #736]	; (9668 <MPSL_IRQ_RADIO_Handler+0x99c>)
    9386:	4283      	cmp	r3, r0
    9388:	bfdc      	itt	le
    938a:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    938e:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    9392:	dd05      	ble.n	93a0 <MPSL_IRQ_RADIO_Handler+0x6d4>
    9394:	2800      	cmp	r0, #0
    9396:	bfbc      	itt	lt
    9398:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    939c:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    93a0:	f001 ff24 	bl	b1ec <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    93a4:	9800      	ldr	r0, [sp, #0]
    93a6:	990c      	ldr	r1, [sp, #48]	; 0x30
    93a8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    93ac:	9000      	str	r0, [sp, #0]
    93ae:	1a08      	subs	r0, r1, r0
    93b0:	f020 497f 	bic.w	r9, r0, #4278190080	; 0xff000000
    93b4:	2f00      	cmp	r7, #0
    93b6:	bf18      	it	ne
    93b8:	f8dd b04c 	ldrne.w	fp, [sp, #76]	; 0x4c
    93bc:	d105      	bne.n	93ca <MPSL_IRQ_RADIO_Handler+0x6fe>
    93be:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    93c2:	2800      	cmp	r0, #0
    93c4:	bf18      	it	ne
    93c6:	f04f 0b02 	movne.w	fp, #2
    93ca:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    93ce:	d008      	beq.n	93e2 <MPSL_IRQ_RADIO_Handler+0x716>
    93d0:	980c      	ldr	r0, [sp, #48]	; 0x30
    93d2:	1b00      	subs	r0, r0, r4
    93d4:	0200      	lsls	r0, r0, #8
    93d6:	17c1      	asrs	r1, r0, #31
    93d8:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    93dc:	1200      	asrs	r0, r0, #8
    93de:	2801      	cmp	r0, #1
    93e0:	da02      	bge.n	93e8 <MPSL_IRQ_RADIO_Handler+0x71c>
    93e2:	2003      	movs	r0, #3
    93e4:	9d18      	ldr	r5, [sp, #96]	; 0x60
    93e6:	e00d      	b.n	9404 <MPSL_IRQ_RADIO_Handler+0x738>
    93e8:	b157      	cbz	r7, 9400 <MPSL_IRQ_RADIO_Handler+0x734>
    93ea:	489d      	ldr	r0, [pc, #628]	; (9660 <MPSL_IRQ_RADIO_Handler+0x994>)
    93ec:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    93f0:	b130      	cbz	r0, 9400 <MPSL_IRQ_RADIO_Handler+0x734>
    93f2:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    93f6:	f110 0b00 	adds.w	fp, r0, #0
    93fa:	bf18      	it	ne
    93fc:	f04f 0b02 	movne.w	fp, #2
    9400:	4625      	mov	r5, r4
    9402:	2000      	movs	r0, #0
    9404:	4483      	add	fp, r0
    9406:	980c      	ldr	r0, [sp, #48]	; 0x30
    9408:	eba0 0009 	sub.w	r0, r0, r9
    940c:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    9410:	1e48      	subs	r0, r1, #1
    9412:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9416:	1b42      	subs	r2, r0, r5
    9418:	0212      	lsls	r2, r2, #8
    941a:	17d3      	asrs	r3, r2, #31
    941c:	eb02 6213 	add.w	r2, r2, r3, lsr #24
    9420:	1212      	asrs	r2, r2, #8
    9422:	455a      	cmp	r2, fp
    9424:	db04      	blt.n	9430 <MPSL_IRQ_RADIO_Handler+0x764>
    9426:	f1b9 0f00 	cmp.w	r9, #0
    942a:	bf18      	it	ne
    942c:	910c      	strne	r1, [sp, #48]	; 0x30
    942e:	e02d      	b.n	948c <MPSL_IRQ_RADIO_Handler+0x7c0>
    9430:	f1b9 0f00 	cmp.w	r9, #0
    9434:	d005      	beq.n	9442 <MPSL_IRQ_RADIO_Handler+0x776>
    9436:	f89d 0045 	ldrb.w	r0, [sp, #69]	; 0x45
    943a:	b920      	cbnz	r0, 9446 <MPSL_IRQ_RADIO_Handler+0x77a>
    943c:	f002 fc0a 	bl	bc54 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    9440:	b108      	cbz	r0, 9446 <MPSL_IRQ_RADIO_Handler+0x77a>
    9442:	b9af      	cbnz	r7, 9470 <MPSL_IRQ_RADIO_Handler+0x7a4>
    9444:	e00c      	b.n	9460 <MPSL_IRQ_RADIO_Handler+0x794>
    9446:	b92f      	cbnz	r7, 9454 <MPSL_IRQ_RADIO_Handler+0x788>
    9448:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    944c:	2800      	cmp	r0, #0
    944e:	bf18      	it	ne
    9450:	f1ab 0b02 	subne.w	fp, fp, #2
    9454:	f04f 0900 	mov.w	r9, #0
    9458:	f88d 9044 	strb.w	r9, [sp, #68]	; 0x44
    945c:	464e      	mov	r6, r9
    945e:	e007      	b.n	9470 <MPSL_IRQ_RADIO_Handler+0x7a4>
    9460:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    9464:	b120      	cbz	r0, 9470 <MPSL_IRQ_RADIO_Handler+0x7a4>
    9466:	2000      	movs	r0, #0
    9468:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
    946c:	f1ab 0b02 	sub.w	fp, fp, #2
    9470:	980c      	ldr	r0, [sp, #48]	; 0x30
    9472:	eba0 0109 	sub.w	r1, r0, r9
    9476:	1e48      	subs	r0, r1, #1
    9478:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    947c:	1b42      	subs	r2, r0, r5
    947e:	0212      	lsls	r2, r2, #8
    9480:	17d3      	asrs	r3, r2, #31
    9482:	eb02 6213 	add.w	r2, r2, r3, lsr #24
    9486:	1212      	asrs	r2, r2, #8
    9488:	455a      	cmp	r2, fp
    948a:	db7d      	blt.n	9588 <MPSL_IRQ_RADIO_Handler+0x8bc>
    948c:	4a74      	ldr	r2, [pc, #464]	; (9660 <MPSL_IRQ_RADIO_Handler+0x994>)
    948e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    9490:	1a89      	subs	r1, r1, r2
    9492:	0209      	lsls	r1, r1, #8
    9494:	17cb      	asrs	r3, r1, #31
    9496:	eb01 6113 	add.w	r1, r1, r3, lsr #24
    949a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    949c:	1209      	asrs	r1, r1, #8
    949e:	b93b      	cbnz	r3, 94b0 <MPSL_IRQ_RADIO_Handler+0x7e4>
    94a0:	f1b2 3fff 	cmp.w	r2, #4294967295
    94a4:	bf1c      	itt	ne
    94a6:	9a13      	ldrne	r2, [sp, #76]	; 0x4c
    94a8:	4291      	cmpne	r1, r2
    94aa:	bfb8      	it	lt
    94ac:	2100      	movlt	r1, #0
    94ae:	db00      	blt.n	94b2 <MPSL_IRQ_RADIO_Handler+0x7e6>
    94b0:	2101      	movs	r1, #1
    94b2:	ea3a 0101 	bics.w	r1, sl, r1
    94b6:	d167      	bne.n	9588 <MPSL_IRQ_RADIO_Handler+0x8bc>
    94b8:	9919      	ldr	r1, [sp, #100]	; 0x64
    94ba:	4605      	mov	r5, r0
    94bc:	f04f 0900 	mov.w	r9, #0
    94c0:	9105      	str	r1, [sp, #20]
    94c2:	f001 fffd 	bl	b4c0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    94c6:	1a28      	subs	r0, r5, r0
    94c8:	0200      	lsls	r0, r0, #8
    94ca:	17c1      	asrs	r1, r0, #31
    94cc:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    94d0:	ea4f 2b20 	mov.w	fp, r0, asr #8
    94d4:	f002 fda0 	bl	c018 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    94d8:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    94dc:	bf08      	it	eq
    94de:	200d      	moveq	r0, #13
    94e0:	d00b      	beq.n	94fa <MPSL_IRQ_RADIO_Handler+0x82e>
    94e2:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    94e6:	3856      	subs	r0, #86	; 0x56
    94e8:	bf08      	it	eq
    94ea:	201c      	moveq	r0, #28
    94ec:	d005      	beq.n	94fa <MPSL_IRQ_RADIO_Handler+0x82e>
    94ee:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    94f2:	389f      	subs	r0, #159	; 0x9f
    94f4:	bf14      	ite	ne
    94f6:	2000      	movne	r0, #0
    94f8:	2032      	moveq	r0, #50	; 0x32
    94fa:	300b      	adds	r0, #11
    94fc:	4558      	cmp	r0, fp
    94fe:	dd1f      	ble.n	9540 <MPSL_IRQ_RADIO_Handler+0x874>
    9500:	9805      	ldr	r0, [sp, #20]
    9502:	2801      	cmp	r0, #1
    9504:	d001      	beq.n	950a <MPSL_IRQ_RADIO_Handler+0x83e>
    9506:	b147      	cbz	r7, 951a <MPSL_IRQ_RADIO_Handler+0x84e>
    9508:	e012      	b.n	9530 <MPSL_IRQ_RADIO_Handler+0x864>
    950a:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    950e:	d11c      	bne.n	954a <MPSL_IRQ_RADIO_Handler+0x87e>
    9510:	f640 1113 	movw	r1, #2323	; 0x913
    9514:	2070      	movs	r0, #112	; 0x70
    9516:	f002 ff1f 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    951a:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    951e:	d007      	beq.n	9530 <MPSL_IRQ_RADIO_Handler+0x864>
    9520:	1b60      	subs	r0, r4, r5
    9522:	0200      	lsls	r0, r0, #8
    9524:	17c1      	asrs	r1, r0, #31
    9526:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    952a:	1200      	asrs	r0, r0, #8
    952c:	2804      	cmp	r0, #4
    952e:	dd04      	ble.n	953a <MPSL_IRQ_RADIO_Handler+0x86e>
    9530:	462c      	mov	r4, r5
    9532:	4620      	mov	r0, r4
    9534:	f001 ffea 	bl	b50c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    9538:	e007      	b.n	954a <MPSL_IRQ_RADIO_Handler+0x87e>
    953a:	2800      	cmp	r0, #0
    953c:	dc63      	bgt.n	9606 <MPSL_IRQ_RADIO_Handler+0x93a>
    953e:	e004      	b.n	954a <MPSL_IRQ_RADIO_Handler+0x87e>
    9540:	462c      	mov	r4, r5
    9542:	4620      	mov	r0, r4
    9544:	f001 ffe2 	bl	b50c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    9548:	46d1      	mov	r9, sl
    954a:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    954e:	d055      	beq.n	95fc <MPSL_IRQ_RADIO_Handler+0x930>
    9550:	980c      	ldr	r0, [sp, #48]	; 0x30
    9552:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    9554:	1b00      	subs	r0, r0, r4
    9556:	1b12      	subs	r2, r2, r4
    9558:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    955c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    9560:	2801      	cmp	r0, #1
    9562:	d350      	bcc.n	9606 <MPSL_IRQ_RADIO_Handler+0x93a>
    9564:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    9568:	bf98      	it	ls
    956a:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    956e:	d84a      	bhi.n	9606 <MPSL_IRQ_RADIO_Handler+0x93a>
    9570:	4620      	mov	r0, r4
    9572:	f006 fee9 	bl	10348 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    9576:	9914      	ldr	r1, [sp, #80]	; 0x50
    9578:	4a38      	ldr	r2, [pc, #224]	; (965c <MPSL_IRQ_RADIO_Handler+0x990>)
    957a:	1a0d      	subs	r5, r1, r0
    957c:	f04f 0b00 	mov.w	fp, #0
    9580:	1aaa      	subs	r2, r5, r2
    9582:	f17b 0200 	sbcs.w	r2, fp, #0
    9586:	e000      	b.n	958a <MPSL_IRQ_RADIO_Handler+0x8be>
    9588:	e03d      	b.n	9606 <MPSL_IRQ_RADIO_Handler+0x93a>
    958a:	d316      	bcc.n	95ba <MPSL_IRQ_RADIO_Handler+0x8ee>
    958c:	4a33      	ldr	r2, [pc, #204]	; (965c <MPSL_IRQ_RADIO_Handler+0x990>)
    958e:	1a43      	subs	r3, r0, r1
    9590:	1a9a      	subs	r2, r3, r2
    9592:	f17b 0200 	sbcs.w	r2, fp, #0
    9596:	d310      	bcc.n	95ba <MPSL_IRQ_RADIO_Handler+0x8ee>
    9598:	4a2f      	ldr	r2, [pc, #188]	; (9658 <MPSL_IRQ_RADIO_Handler+0x98c>)
    959a:	42aa      	cmp	r2, r5
    959c:	bf3e      	ittt	cc
    959e:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
    95a2:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    95a6:	1845      	addcc	r5, r0, r1
    95a8:	d307      	bcc.n	95ba <MPSL_IRQ_RADIO_Handler+0x8ee>
    95aa:	429a      	cmp	r2, r3
    95ac:	d22f      	bcs.n	960e <MPSL_IRQ_RADIO_Handler+0x942>
    95ae:	f5c1 2190 	rsb	r1, r1, #294912	; 0x48000
    95b2:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
    95b6:	4408      	add	r0, r1
    95b8:	4245      	negs	r5, r0
    95ba:	4f29      	ldr	r7, [pc, #164]	; (9660 <MPSL_IRQ_RADIO_Handler+0x994>)
    95bc:	7fb8      	ldrb	r0, [r7, #30]
    95be:	b358      	cbz	r0, 9618 <MPSL_IRQ_RADIO_Handler+0x94c>
    95c0:	9819      	ldr	r0, [sp, #100]	; 0x64
    95c2:	2801      	cmp	r0, #1
    95c4:	d005      	beq.n	95d2 <MPSL_IRQ_RADIO_Handler+0x906>
    95c6:	2002      	movs	r0, #2
    95c8:	f002 f9f0 	bl	b9ac <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    95cc:	2001      	movs	r0, #1
    95ce:	f002 f9ed 	bl	b9ac <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    95d2:	45b0      	cmp	r8, r6
    95d4:	d22c      	bcs.n	9630 <MPSL_IRQ_RADIO_Handler+0x964>
    95d6:	eba5 0106 	sub.w	r1, r5, r6
    95da:	f04f 0002 	mov.w	r0, #2
    95de:	f002 f92f 	bl	b840 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    95e2:	b390      	cbz	r0, 964a <MPSL_IRQ_RADIO_Handler+0x97e>
    95e4:	f1b8 0f00 	cmp.w	r8, #0
    95e8:	bf1c      	itt	ne
    95ea:	eba5 0108 	subne.w	r1, r5, r8
    95ee:	2001      	movne	r0, #1
    95f0:	d044      	beq.n	967c <MPSL_IRQ_RADIO_Handler+0x9b0>
    95f2:	bf00      	nop
    95f4:	f002 f924 	bl	b840 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    95f8:	b338      	cbz	r0, 964a <MPSL_IRQ_RADIO_Handler+0x97e>
    95fa:	e03f      	b.n	967c <MPSL_IRQ_RADIO_Handler+0x9b0>
    95fc:	f640 2131 	movw	r1, #2609	; 0xa31
    9600:	2070      	movs	r0, #112	; 0x70
    9602:	f002 fea9 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9606:	b01b      	add	sp, #108	; 0x6c
    9608:	2000      	movs	r0, #0
    960a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    960e:	f640 3105 	movw	r1, #2821	; 0xb05
    9612:	2070      	movs	r0, #112	; 0x70
    9614:	f002 fea0 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9618:	45b0      	cmp	r8, r6
    961a:	bf34      	ite	cc
    961c:	4630      	movcc	r0, r6
    961e:	4640      	movcs	r0, r8
    9620:	301e      	adds	r0, #30
    9622:	42a8      	cmp	r0, r5
    9624:	dbcc      	blt.n	95c0 <MPSL_IRQ_RADIO_Handler+0x8f4>
    9626:	f640 2145 	movw	r1, #2629	; 0xa45
    962a:	2070      	movs	r0, #112	; 0x70
    962c:	f002 fe94 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9630:	d91c      	bls.n	966c <MPSL_IRQ_RADIO_Handler+0x9a0>
    9632:	eba5 0108 	sub.w	r1, r5, r8
    9636:	2001      	movs	r0, #1
    9638:	f002 f902 	bl	b840 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    963c:	b128      	cbz	r0, 964a <MPSL_IRQ_RADIO_Handler+0x97e>
    963e:	2e00      	cmp	r6, #0
    9640:	bf1c      	itt	ne
    9642:	1ba9      	subne	r1, r5, r6
    9644:	2002      	movne	r0, #2
    9646:	d019      	beq.n	967c <MPSL_IRQ_RADIO_Handler+0x9b0>
    9648:	e7d4      	b.n	95f4 <MPSL_IRQ_RADIO_Handler+0x928>
    964a:	e042      	b.n	96d2 <MPSL_IRQ_RADIO_Handler+0xa06>
    964c:	40000508 	.word	0x40000508
    9650:	200002d0 	.word	0x200002d0
    9654:	2000109c 	.word	0x2000109c
    9658:	1e847fff 	.word	0x1e847fff
    965c:	0f424000 	.word	0x0f424000
    9660:	2000149c 	.word	0x2000149c
    9664:	f0bdc000 	.word	0xf0bdc000
    9668:	1e848000 	.word	0x1e848000
    966c:	ea56 0008 	orrs.w	r0, r6, r8
    9670:	d004      	beq.n	967c <MPSL_IRQ_RADIO_Handler+0x9b0>
    9672:	f640 1176 	movw	r1, #2422	; 0x976
    9676:	2070      	movs	r0, #112	; 0x70
    9678:	f002 fe6e 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    967c:	4629      	mov	r1, r5
    967e:	2000      	movs	r0, #0
    9680:	f002 f8de 	bl	b840 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    9684:	b328      	cbz	r0, 96d2 <MPSL_IRQ_RADIO_Handler+0xa06>
    9686:	2601      	movs	r6, #1
    9688:	f1ba 0f00 	cmp.w	sl, #0
    968c:	bf04      	itt	eq
    968e:	f897 0030 	ldrbeq.w	r0, [r7, #48]	; 0x30
    9692:	2800      	cmpeq	r0, #0
    9694:	d002      	beq.n	969c <MPSL_IRQ_RADIO_Handler+0x9d0>
    9696:	f1b9 0f00 	cmp.w	r9, #0
    969a:	d024      	beq.n	96e6 <MPSL_IRQ_RADIO_Handler+0xa1a>
    969c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    969e:	f1b0 3fff 	cmp.w	r0, #4294967295
    96a2:	d004      	beq.n	96ae <MPSL_IRQ_RADIO_Handler+0x9e2>
    96a4:	f002 fcbe 	bl	c024 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    96a8:	f04f 30ff 	mov.w	r0, #4294967295
    96ac:	62f8      	str	r0, [r7, #44]	; 0x2c
    96ae:	f1b9 0f00 	cmp.w	r9, #0
    96b2:	d01c      	beq.n	96ee <MPSL_IRQ_RADIO_Handler+0xa22>
    96b4:	9813      	ldr	r0, [sp, #76]	; 0x4c
    96b6:	1a20      	subs	r0, r4, r0
    96b8:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    96bc:	2005      	movs	r0, #5
    96be:	f002 f8bf 	bl	b840 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    96c2:	b360      	cbz	r0, 971e <MPSL_IRQ_RADIO_Handler+0xa52>
    96c4:	f897 0030 	ldrb.w	r0, [r7, #48]	; 0x30
    96c8:	2800      	cmp	r0, #0
    96ca:	bf08      	it	eq
    96cc:	f887 6030 	strbeq.w	r6, [r7, #48]	; 0x30
    96d0:	e015      	b.n	96fe <MPSL_IRQ_RADIO_Handler+0xa32>
    96d2:	2002      	movs	r0, #2
    96d4:	f002 f96a 	bl	b9ac <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    96d8:	2001      	movs	r0, #1
    96da:	f002 f967 	bl	b9ac <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    96de:	b01b      	add	sp, #108	; 0x6c
    96e0:	2000      	movs	r0, #0
    96e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    96e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    96e8:	f1b0 3fff 	cmp.w	r0, #4294967295
    96ec:	d012      	beq.n	9714 <MPSL_IRQ_RADIO_Handler+0xa48>
    96ee:	f897 0030 	ldrb.w	r0, [r7, #48]	; 0x30
    96f2:	b120      	cbz	r0, 96fe <MPSL_IRQ_RADIO_Handler+0xa32>
    96f4:	2005      	movs	r0, #5
    96f6:	f002 f959 	bl	b9ac <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    96fa:	f887 b030 	strb.w	fp, [r7, #48]	; 0x30
    96fe:	eba5 0008 	sub.w	r0, r5, r8
    9702:	f1a0 0119 	sub.w	r1, r0, #25
    9706:	2900      	cmp	r1, #0
    9708:	dc0e      	bgt.n	9728 <MPSL_IRQ_RADIO_Handler+0xa5c>
    970a:	f640 216e 	movw	r1, #2670	; 0xa6e
    970e:	2070      	movs	r0, #112	; 0x70
    9710:	f002 fe22 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9714:	f002 fca2 	bl	c05c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    9718:	f001 fed2 	bl	b4c0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    971c:	e7c6      	b.n	96ac <MPSL_IRQ_RADIO_Handler+0x9e0>
    971e:	f44f 713e 	mov.w	r1, #760	; 0x2f8
    9722:	2070      	movs	r0, #112	; 0x70
    9724:	f002 fe18 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9728:	2003      	movs	r0, #3
    972a:	f002 f889 	bl	b840 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    972e:	b1c0      	cbz	r0, 9762 <MPSL_IRQ_RADIO_Handler+0xa96>
    9730:	480e      	ldr	r0, [pc, #56]	; (976c <MPSL_IRQ_RADIO_Handler+0xaa0>)
    9732:	6880      	ldr	r0, [r0, #8]
    9734:	f8c0 b000 	str.w	fp, [r0]
    9738:	480d      	ldr	r0, [pc, #52]	; (9770 <MPSL_IRQ_RADIO_Handler+0xaa4>)
    973a:	f8c0 b000 	str.w	fp, [r0]
    973e:	ac0a      	add	r4, sp, #40	; 0x28
    9740:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    9744:	6038      	str	r0, [r7, #0]
    9746:	6079      	str	r1, [r7, #4]
    9748:	60ba      	str	r2, [r7, #8]
    974a:	60fb      	str	r3, [r7, #12]
    974c:	ac0e      	add	r4, sp, #56	; 0x38
    974e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    9752:	6138      	str	r0, [r7, #16]
    9754:	6179      	str	r1, [r7, #20]
    9756:	61ba      	str	r2, [r7, #24]
    9758:	61fb      	str	r3, [r7, #28]
    975a:	b01b      	add	sp, #108	; 0x6c
    975c:	2001      	movs	r0, #1
    975e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9762:	f640 2176 	movw	r1, #2678	; 0xa76
    9766:	2070      	movs	r0, #112	; 0x70
    9768:	f002 fdf6 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    976c:	200002d0 	.word	0x200002d0
    9770:	40000508 	.word	0x40000508
    9774:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9778:	4614      	mov	r4, r2
    977a:	460d      	mov	r5, r1
    977c:	f04f 0a00 	mov.w	sl, #0
    9780:	890a      	ldrh	r2, [r1, #8]
    9782:	4651      	mov	r1, sl
    9784:	f362 411f 	bfi	r1, r2, #16, #16
    9788:	7aaa      	ldrb	r2, [r5, #10]
    978a:	46d1      	mov	r9, sl
    978c:	f362 0907 	bfi	r9, r2, #0, #8
    9790:	7aea      	ldrb	r2, [r5, #11]
    9792:	4606      	mov	r6, r0
    9794:	f362 290f 	bfi	r9, r2, #8, #8
    9798:	782a      	ldrb	r2, [r5, #0]
    979a:	b083      	sub	sp, #12
    979c:	6840      	ldr	r0, [r0, #4]
    979e:	f8c4 a000 	str.w	sl, [r4]
    97a2:	f362 4917 	bfi	r9, r2, #16, #8
    97a6:	f8c4 a004 	str.w	sl, [r4, #4]
    97aa:	f8c4 9010 	str.w	r9, [r4, #16]
    97ae:	e9c4 0102 	strd	r0, r1, [r4, #8]
    97b2:	4f9d      	ldr	r7, [pc, #628]	; (9a28 <MPSL_IRQ_RADIO_Handler+0xd5c>)
    97b4:	6870      	ldr	r0, [r6, #4]
    97b6:	fba0 8907 	umull	r8, r9, r0, r7
    97ba:	6830      	ldr	r0, [r6, #0]
    97bc:	f006 fdc4 	bl	10348 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    97c0:	eb10 0108 	adds.w	r1, r0, r8
    97c4:	eb4a 0209 	adc.w	r2, sl, r9
    97c8:	7828      	ldrb	r0, [r5, #0]
    97ca:	ea4f 0967 	mov.w	r9, r7, asr #1
    97ce:	f1c9 0b00 	rsb	fp, r9, #0
    97d2:	b170      	cbz	r0, 97f2 <MPSL_IRQ_RADIO_Handler+0xb26>
    97d4:	89e0      	ldrh	r0, [r4, #14]
    97d6:	f894 8011 	ldrb.w	r8, [r4, #17]
    97da:	43c0      	mvns	r0, r0
    97dc:	f8d5 a004 	ldr.w	sl, [r5, #4]
    97e0:	f104 020c 	add.w	r2, r4, #12
    97e4:	4548      	cmp	r0, r9
    97e6:	dd7c      	ble.n	98e2 <MPSL_IRQ_RADIO_Handler+0xc16>
    97e8:	f240 519f 	movw	r1, #1439	; 0x59f
    97ec:	2070      	movs	r0, #112	; 0x70
    97ee:	f002 fdb3 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    97f2:	f8df c238 	ldr.w	ip, [pc, #568]	; 9a2c <MPSL_IRQ_RADIO_Handler+0xd60>
    97f6:	e9d5 0304 	ldrd	r0, r3, [r5, #16]
    97fa:	eb11 0a0c 	adds.w	sl, r1, ip
    97fe:	f142 0c00 	adc.w	ip, r2, #0
    9802:	ebb0 0a0a 	subs.w	sl, r0, sl
    9806:	eb73 0c0c 	sbcs.w	ip, r3, ip
    980a:	d272      	bcs.n	98f2 <MPSL_IRQ_RADIO_Handler+0xc26>
    980c:	1a41      	subs	r1, r0, r1
    980e:	eb73 0102 	sbcs.w	r1, r3, r2
    9812:	d36e      	bcc.n	98f2 <MPSL_IRQ_RADIO_Handler+0xc26>
    9814:	ebb0 0608 	subs.w	r6, r0, r8
    9818:	42b7      	cmp	r7, r6
    981a:	d82b      	bhi.n	9874 <MPSL_IRQ_RADIO_Handler+0xba8>
    981c:	89e0      	ldrh	r0, [r4, #14]
    981e:	f1a6 58f4 	sub.w	r8, r6, #511705088	; 0x1e800000
    9822:	f5a8 2890 	sub.w	r8, r8, #294912	; 0x48000
    9826:	43c1      	mvns	r1, r0
    9828:	4a81      	ldr	r2, [pc, #516]	; (9a30 <MPSL_IRQ_RADIO_Handler+0xd64>)
    982a:	eb08 0001 	add.w	r0, r8, r1
    982e:	4542      	cmp	r2, r8
    9830:	d32b      	bcc.n	988a <MPSL_IRQ_RADIO_Handler+0xbbe>
    9832:	4549      	cmp	r1, r9
    9834:	dcd8      	bgt.n	97e8 <MPSL_IRQ_RADIO_Handler+0xb1c>
    9836:	4559      	cmp	r1, fp
    9838:	db66      	blt.n	9908 <MPSL_IRQ_RADIO_Handler+0xc3c>
    983a:	4287      	cmp	r7, r0
    983c:	bfdc      	itt	le
    983e:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    9842:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    9846:	dd05      	ble.n	9854 <MPSL_IRQ_RADIO_Handler+0xb88>
    9848:	2800      	cmp	r0, #0
    984a:	bfbc      	itt	lt
    984c:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    9850:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    9854:	466a      	mov	r2, sp
    9856:	a901      	add	r1, sp, #4
    9858:	f001 fcc8 	bl	b1ec <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    985c:	89e0      	ldrh	r0, [r4, #14]
    985e:	f89d 1000 	ldrb.w	r1, [sp]
    9862:	1a30      	subs	r0, r6, r0
    9864:	1a40      	subs	r0, r0, r1
    9866:	1e40      	subs	r0, r0, #1
    9868:	42b8      	cmp	r0, r7
    986a:	d302      	bcc.n	9872 <MPSL_IRQ_RADIO_Handler+0xba6>
    986c:	68a0      	ldr	r0, [r4, #8]
    986e:	1c40      	adds	r0, r0, #1
    9870:	60a0      	str	r0, [r4, #8]
    9872:	4646      	mov	r6, r8
    9874:	89e0      	ldrh	r0, [r4, #14]
    9876:	4b6e      	ldr	r3, [pc, #440]	; (9a30 <MPSL_IRQ_RADIO_Handler+0xd64>)
    9878:	43c1      	mvns	r1, r0
    987a:	686d      	ldr	r5, [r5, #4]
    987c:	f894 8011 	ldrb.w	r8, [r4, #17]
    9880:	1870      	adds	r0, r6, r1
    9882:	f104 020c 	add.w	r2, r4, #12
    9886:	429e      	cmp	r6, r3
    9888:	d904      	bls.n	9894 <MPSL_IRQ_RADIO_Handler+0xbc8>
    988a:	f240 519e 	movw	r1, #1438	; 0x59e
    988e:	2070      	movs	r0, #112	; 0x70
    9890:	f002 fd62 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9894:	4549      	cmp	r1, r9
    9896:	dca7      	bgt.n	97e8 <MPSL_IRQ_RADIO_Handler+0xb1c>
    9898:	4559      	cmp	r1, fp
    989a:	db35      	blt.n	9908 <MPSL_IRQ_RADIO_Handler+0xc3c>
    989c:	4287      	cmp	r7, r0
    989e:	bfdc      	itt	le
    98a0:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    98a4:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    98a8:	dd05      	ble.n	98b6 <MPSL_IRQ_RADIO_Handler+0xbea>
    98aa:	2800      	cmp	r0, #0
    98ac:	bfbc      	itt	lt
    98ae:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    98b2:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    98b6:	4621      	mov	r1, r4
    98b8:	f001 fc98 	bl	b1ec <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    98bc:	6820      	ldr	r0, [r4, #0]
    98be:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    98c2:	1970      	adds	r0, r6, r5
    98c4:	1c40      	adds	r0, r0, #1
    98c6:	6021      	str	r1, [r4, #0]
    98c8:	f1b8 0f00 	cmp.w	r8, #0
    98cc:	bf08      	it	eq
    98ce:	307a      	addeq	r0, #122	; 0x7a
    98d0:	d004      	beq.n	98dc <MPSL_IRQ_RADIO_Handler+0xc10>
    98d2:	f1b8 0f01 	cmp.w	r8, #1
    98d6:	bf08      	it	eq
    98d8:	3048      	addeq	r0, #72	; 0x48
    98da:	d13a      	bne.n	9952 <MPSL_IRQ_RADIO_Handler+0xc86>
    98dc:	f001 fc6a 	bl	b1b4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    98e0:	e001      	b.n	98e6 <MPSL_IRQ_RADIO_Handler+0xc1a>
    98e2:	e00e      	b.n	9902 <MPSL_IRQ_RADIO_Handler+0xc36>
    98e4:	e005      	b.n	98f2 <MPSL_IRQ_RADIO_Handler+0xc26>
    98e6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    98ea:	6060      	str	r0, [r4, #4]
    98ec:	b007      	add	sp, #28
    98ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    98f2:	6830      	ldr	r0, [r6, #0]
    98f4:	1e40      	subs	r0, r0, #1
    98f6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    98fa:	6020      	str	r0, [r4, #0]
    98fc:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
    9900:	e7f3      	b.n	98ea <MPSL_IRQ_RADIO_Handler+0xc1e>
    9902:	4601      	mov	r1, r0
    9904:	4558      	cmp	r0, fp
    9906:	da04      	bge.n	9912 <MPSL_IRQ_RADIO_Handler+0xc46>
    9908:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
    990c:	2070      	movs	r0, #112	; 0x70
    990e:	f002 fd23 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9912:	4287      	cmp	r7, r0
    9914:	bfdc      	itt	le
    9916:	f1a1 50f4 	suble.w	r0, r1, #511705088	; 0x1e800000
    991a:	f5a0 2090 	suble.w	r0, r0, #294912	; 0x48000
    991e:	dd05      	ble.n	992c <MPSL_IRQ_RADIO_Handler+0xc60>
    9920:	2800      	cmp	r0, #0
    9922:	bfbc      	itt	lt
    9924:	f101 50f4 	addlt.w	r0, r1, #511705088	; 0x1e800000
    9928:	f500 2090 	addlt.w	r0, r0, #294912	; 0x48000
    992c:	4621      	mov	r1, r4
    992e:	f001 fc5d 	bl	b1ec <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    9932:	6820      	ldr	r0, [r4, #0]
    9934:	f1b8 0f00 	cmp.w	r8, #0
    9938:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    993c:	f10a 0001 	add.w	r0, sl, #1
    9940:	6021      	str	r1, [r4, #0]
    9942:	bf08      	it	eq
    9944:	307a      	addeq	r0, #122	; 0x7a
    9946:	d009      	beq.n	995c <MPSL_IRQ_RADIO_Handler+0xc90>
    9948:	f1b8 0f01 	cmp.w	r8, #1
    994c:	bf08      	it	eq
    994e:	3048      	addeq	r0, #72	; 0x48
    9950:	d004      	beq.n	995c <MPSL_IRQ_RADIO_Handler+0xc90>
    9952:	f240 6139 	movw	r1, #1593	; 0x639
    9956:	2070      	movs	r0, #112	; 0x70
    9958:	f002 fcfe 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    995c:	f001 fc2a 	bl	b1b4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    9960:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    9964:	6061      	str	r1, [r4, #4]
    9966:	f8b4 900e 	ldrh.w	r9, [r4, #14]
    996a:	aa01      	add	r2, sp, #4
    996c:	4669      	mov	r1, sp
    996e:	4648      	mov	r0, r9
    9970:	6837      	ldr	r7, [r6, #0]
    9972:	f001 fc3b 	bl	b1ec <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    9976:	f002 f977 	bl	bc68 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    997a:	f001 fc1b 	bl	b1b4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    997e:	4680      	mov	r8, r0
    9980:	482c      	ldr	r0, [pc, #176]	; (9a34 <MPSL_IRQ_RADIO_Handler+0xd68>)
    9982:	f890 1032 	ldrb.w	r1, [r0, #50]	; 0x32
    9986:	2920      	cmp	r1, #32
    9988:	d02a      	beq.n	99e0 <MPSL_IRQ_RADIO_Handler+0xd14>
    998a:	68c0      	ldr	r0, [r0, #12]
    998c:	1d40      	adds	r0, r0, #5
    998e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9992:	bf00      	nop
    9994:	e9d4 2100 	ldrd	r2, r1, [r4]
    9998:	1a89      	subs	r1, r1, r2
    999a:	4401      	add	r1, r0
    999c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    99a0:	e9c4 0100 	strd	r0, r1, [r4]
    99a4:	6831      	ldr	r1, [r6, #0]
    99a6:	4281      	cmp	r1, r0
    99a8:	d902      	bls.n	99b0 <MPSL_IRQ_RADIO_Handler+0xce4>
    99aa:	68a0      	ldr	r0, [r4, #8]
    99ac:	1c40      	adds	r0, r0, #1
    99ae:	60a0      	str	r0, [r4, #8]
    99b0:	6832      	ldr	r2, [r6, #0]
    99b2:	6928      	ldr	r0, [r5, #16]
    99b4:	4621      	mov	r1, r4
    99b6:	9b06      	ldr	r3, [sp, #24]
    99b8:	f7ff f9e4 	bl	8d84 <MPSL_IRQ_RADIO_Handler+0xb8>
    99bc:	2800      	cmp	r0, #0
    99be:	bf1c      	itt	ne
    99c0:	b007      	addne	sp, #28
    99c2:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    99c6:	e9d4 1000 	ldrd	r1, r0, [r4]
    99ca:	1a40      	subs	r0, r0, r1
    99cc:	6831      	ldr	r1, [r6, #0]
    99ce:	6021      	str	r1, [r4, #0]
    99d0:	6831      	ldr	r1, [r6, #0]
    99d2:	4408      	add	r0, r1
    99d4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    99d8:	6060      	str	r0, [r4, #4]
    99da:	b007      	add	sp, #28
    99dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    99e0:	3709      	adds	r7, #9
    99e2:	f1b9 0f00 	cmp.w	r9, #0
    99e6:	d016      	beq.n	9a16 <MPSL_IRQ_RADIO_Handler+0xd4a>
    99e8:	f002 fc3e 	bl	c268 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    99ec:	b998      	cbnz	r0, 9a16 <MPSL_IRQ_RADIO_Handler+0xd4a>
    99ee:	f002 fb13 	bl	c018 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    99f2:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    99f6:	bf08      	it	eq
    99f8:	200d      	moveq	r0, #13
    99fa:	d00b      	beq.n	9a14 <MPSL_IRQ_RADIO_Handler+0xd48>
    99fc:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9a00:	3856      	subs	r0, #86	; 0x56
    9a02:	bf08      	it	eq
    9a04:	201c      	moveq	r0, #28
    9a06:	d005      	beq.n	9a14 <MPSL_IRQ_RADIO_Handler+0xd48>
    9a08:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9a0c:	389f      	subs	r0, #159	; 0x9f
    9a0e:	bf14      	ite	ne
    9a10:	2000      	movne	r0, #0
    9a12:	2032      	moveq	r0, #50	; 0x32
    9a14:	4407      	add	r7, r0
    9a16:	9800      	ldr	r0, [sp, #0]
    9a18:	4580      	cmp	r8, r0
    9a1a:	bf84      	itt	hi
    9a1c:	eba8 0000 	subhi.w	r0, r8, r0
    9a20:	4407      	addhi	r7, r0
    9a22:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
    9a26:	e7b5      	b.n	9994 <MPSL_IRQ_RADIO_Handler+0xcc8>
    9a28:	1e848000 	.word	0x1e848000
    9a2c:	0f424000 	.word	0x0f424000
    9a30:	1e847fff 	.word	0x1e847fff
    9a34:	2000149c 	.word	0x2000149c
    9a38:	b570      	push	{r4, r5, r6, lr}
    9a3a:	4d1e      	ldr	r5, [pc, #120]	; (9ab4 <MPSL_IRQ_RADIO_Handler+0xde8>)
    9a3c:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
    9a40:	2820      	cmp	r0, #32
    9a42:	bf18      	it	ne
    9a44:	bd70      	popne	{r4, r5, r6, pc}
    9a46:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
    9a4a:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    9a4e:	4428      	add	r0, r5
    9a50:	f890 4020 	ldrb.w	r4, [r0, #32]
    9a54:	2c20      	cmp	r4, #32
    9a56:	d027      	beq.n	9aa8 <MPSL_IRQ_RADIO_Handler+0xddc>
    9a58:	4b17      	ldr	r3, [pc, #92]	; (9ab8 <MPSL_IRQ_RADIO_Handler+0xdec>)
    9a5a:	eb03 1182 	add.w	r1, r3, r2, lsl #6
    9a5e:	eb01 0144 	add.w	r1, r1, r4, lsl #1
    9a62:	7849      	ldrb	r1, [r1, #1]
    9a64:	f880 1020 	strb.w	r1, [r0, #32]
    9a68:	20ff      	movs	r0, #255	; 0xff
    9a6a:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    9a6e:	f885 4032 	strb.w	r4, [r5, #50]	; 0x32
    9a72:	4621      	mov	r1, r4
    9a74:	2002      	movs	r0, #2
    9a76:	f000 f891 	bl	9b9c <MPSL_IRQ_RADIO_Handler+0xed0>
    9a7a:	2000      	movs	r0, #0
    9a7c:	f885 0028 	strb.w	r0, [r5, #40]	; 0x28
    9a80:	77a8      	strb	r0, [r5, #30]
    9a82:	490e      	ldr	r1, [pc, #56]	; (9abc <MPSL_IRQ_RADIO_Handler+0xdf0>)
    9a84:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    9a88:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    9a8c:	7e00      	ldrb	r0, [r0, #24]
    9a8e:	2800      	cmp	r0, #0
    9a90:	bf08      	it	eq
    9a92:	f002 fdcb 	bleq	c62c <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>
    9a96:	2000      	movs	r0, #0
    9a98:	4909      	ldr	r1, [pc, #36]	; (9ac0 <MPSL_IRQ_RADIO_Handler+0xdf4>)
    9a9a:	6849      	ldr	r1, [r1, #4]
    9a9c:	2900      	cmp	r1, #0
    9a9e:	bf08      	it	eq
    9aa0:	bd70      	popeq	{r4, r5, r6, pc}
    9aa2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9aa6:	4708      	bx	r1
    9aa8:	f240 3132 	movw	r1, #818	; 0x332
    9aac:	2070      	movs	r0, #112	; 0x70
    9aae:	f002 fc53 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9ab2:	0000      	.short	0x0000
    9ab4:	2000149c 	.word	0x2000149c
    9ab8:	2000141c 	.word	0x2000141c
    9abc:	2000109c 	.word	0x2000109c
    9ac0:	200002d0 	.word	0x200002d0
    9ac4:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    9ac8:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 9b8c <MPSL_IRQ_RADIO_Handler+0xec0>
    9acc:	f898 5031 	ldrb.w	r5, [r8, #49]	; 0x31
    9ad0:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    9ad4:	4440      	add	r0, r8
    9ad6:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    9ada:	2c20      	cmp	r4, #32
    9adc:	bf08      	it	eq
    9ade:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9ae2:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 9b90 <MPSL_IRQ_RADIO_Handler+0xec4>
    9ae6:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 9b94 <MPSL_IRQ_RADIO_Handler+0xec8>
    9aea:	f5aa 7960 	sub.w	r9, sl, #896	; 0x380
    9aee:	eb0a 1785 	add.w	r7, sl, r5, lsl #6
    9af2:	2607      	movs	r6, #7
    9af4:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    9af8:	2801      	cmp	r0, #1
    9afa:	d00e      	beq.n	9b1a <MPSL_IRQ_RADIO_Handler+0xe4e>
    9afc:	2804      	cmp	r0, #4
    9afe:	bf08      	it	eq
    9b00:	2602      	moveq	r6, #2
    9b02:	d00a      	beq.n	9b1a <MPSL_IRQ_RADIO_Handler+0xe4e>
    9b04:	2805      	cmp	r0, #5
    9b06:	bf0c      	ite	eq
    9b08:	2603      	moveq	r6, #3
    9b0a:	2806      	cmpne	r0, #6
    9b0c:	d005      	beq.n	9b1a <MPSL_IRQ_RADIO_Handler+0xe4e>
    9b0e:	f640 01dd 	movw	r1, #2269	; 0x8dd
    9b12:	f04f 0070 	mov.w	r0, #112	; 0x70
    9b16:	f002 fc1f 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9b1a:	f1bb 0f00 	cmp.w	fp, #0
    9b1e:	bf18      	it	ne
    9b20:	f3af 8000 	nopne.w
    9b24:	f3ef 8010 	mrs	r0, PRIMASK
    9b28:	b672      	cpsid	i
    9b2a:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    9b2e:	784a      	ldrb	r2, [r1, #1]
    9b30:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    9b34:	4441      	add	r1, r8
    9b36:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    9b3a:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    9b3e:	42a2      	cmp	r2, r4
    9b40:	bf04      	itt	eq
    9b42:	2220      	moveq	r2, #32
    9b44:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
    9b48:	b1c0      	cbz	r0, 9b7c <MPSL_IRQ_RADIO_Handler+0xeb0>
    9b4a:	462a      	mov	r2, r5
    9b4c:	4621      	mov	r1, r4
    9b4e:	2001      	movs	r0, #1
    9b50:	f000 f824 	bl	9b9c <MPSL_IRQ_RADIO_Handler+0xed0>
    9b54:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    9b58:	eb09 0081 	add.w	r0, r9, r1, lsl #2
    9b5c:	f859 2021 	ldr.w	r2, [r9, r1, lsl #2]
    9b60:	6840      	ldr	r0, [r0, #4]
    9b62:	4631      	mov	r1, r6
    9b64:	4790      	blx	r2
    9b66:	f898 5031 	ldrb.w	r5, [r8, #49]	; 0x31
    9b6a:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    9b6e:	4440      	add	r0, r8
    9b70:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    9b74:	2c20      	cmp	r4, #32
    9b76:	d1ba      	bne.n	9aee <MPSL_IRQ_RADIO_Handler+0xe22>
    9b78:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9b7c:	4806      	ldr	r0, [pc, #24]	; (9b98 <MPSL_IRQ_RADIO_Handler+0xecc>)
    9b7e:	2800      	cmp	r0, #0
    9b80:	bf18      	it	ne
    9b82:	f3af 8000 	nopne.w
    9b86:	b662      	cpsie	i
    9b88:	e7df      	b.n	9b4a <MPSL_IRQ_RADIO_Handler+0xe7e>
    9b8a:	0000      	.short	0x0000
    9b8c:	2000149c 	.word	0x2000149c
    9b90:	00000000 	.word	0x00000000
    9b94:	2000141c 	.word	0x2000141c
    9b98:	00000000 	.word	0x00000000
    9b9c:	f8df c058 	ldr.w	ip, [pc, #88]	; 9bf8 <MPSL_IRQ_RADIO_Handler+0xf2c>
    9ba0:	b510      	push	{r4, lr}
    9ba2:	2300      	movs	r3, #0
    9ba4:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    9ba8:	2807      	cmp	r0, #7
    9baa:	d21f      	bcs.n	9bec <MPSL_IRQ_RADIO_Handler+0xf20>
    9bac:	e8df f000 	tbb	[pc, r0]
    9bb0:	05050505 	.word	0x05050505
    9bb4:	00040404 	.word	0x00040404
    9bb8:	2301      	movs	r3, #1
    9bba:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    9bbe:	2b00      	cmp	r3, #0
    9bc0:	bf08      	it	eq
    9bc2:	bd10      	popeq	{r4, pc}
    9bc4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    9bc8:	480c      	ldr	r0, [pc, #48]	; (9bfc <MPSL_IRQ_RADIO_Handler+0xf30>)
    9bca:	4402      	add	r2, r0
    9bcc:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
    9bd0:	2820      	cmp	r0, #32
    9bd2:	bf0e      	itee	eq
    9bd4:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
    9bd8:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    9bdc:	7041      	strbne	r1, [r0, #1]
    9bde:	2020      	movs	r0, #32
    9be0:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    9be4:	7058      	strb	r0, [r3, #1]
    9be6:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    9bea:	bd10      	pop	{r4, pc}
    9bec:	f240 216e 	movw	r1, #622	; 0x26e
    9bf0:	2070      	movs	r0, #112	; 0x70
    9bf2:	f002 fbb1 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9bf6:	0000      	.short	0x0000
    9bf8:	2000141c 	.word	0x2000141c
    9bfc:	2000149c 	.word	0x2000149c
    9c00:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    9c04:	460f      	mov	r7, r1
    9c06:	4680      	mov	r8, r0
    9c08:	f8df a160 	ldr.w	sl, [pc, #352]	; 9d6c <MPSL_IRQ_RADIO_Handler+0x10a0>
    9c0c:	eb01 0047 	add.w	r0, r1, r7, lsl #1
    9c10:	4450      	add	r0, sl
    9c12:	f1b8 0f01 	cmp.w	r8, #1
    9c16:	f890 4020 	ldrb.w	r4, [r0, #32]
    9c1a:	4625      	mov	r5, r4
    9c1c:	bf18      	it	ne
    9c1e:	f1b8 0f02 	cmpne.w	r8, #2
    9c22:	d005      	beq.n	9c30 <MPSL_IRQ_RADIO_Handler+0xf64>
    9c24:	f640 21ac 	movw	r1, #2732	; 0xaac
    9c28:	f04f 0070 	mov.w	r0, #112	; 0x70
    9c2c:	f002 fb94 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9c30:	f04f 0b00 	mov.w	fp, #0
    9c34:	2d20      	cmp	r5, #32
    9c36:	d042      	beq.n	9cbe <MPSL_IRQ_RADIO_Handler+0xff2>
    9c38:	f89a 001e 	ldrb.w	r0, [sl, #30]
    9c3c:	2600      	movs	r6, #0
    9c3e:	2800      	cmp	r0, #0
    9c40:	bf08      	it	eq
    9c42:	2602      	moveq	r6, #2
    9c44:	f001 fc3c 	bl	b4c0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    9c48:	f8df c124 	ldr.w	ip, [pc, #292]	; 9d70 <MPSL_IRQ_RADIO_Handler+0x10a4>
    9c4c:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    9c50:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
    9c54:	688a      	ldr	r2, [r1, #8]
    9c56:	68c9      	ldr	r1, [r1, #12]
    9c58:	1a12      	subs	r2, r2, r0
    9c5a:	1a09      	subs	r1, r1, r0
    9c5c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    9c60:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    9c64:	4296      	cmp	r6, r2
    9c66:	bf99      	ittee	ls
    9c68:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    9c6c:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    9c70:	4a40      	ldrhi	r2, [pc, #256]	; (9d74 <MPSL_IRQ_RADIO_Handler+0x10a8>)
    9c72:	eb02 1987 	addhi.w	r9, r2, r7, lsl #6
    9c76:	d920      	bls.n	9cba <MPSL_IRQ_RADIO_Handler+0xfee>
    9c78:	4622      	mov	r2, r4
    9c7a:	eb09 0142 	add.w	r1, r9, r2, lsl #1
    9c7e:	784c      	ldrb	r4, [r1, #1]
    9c80:	2c20      	cmp	r4, #32
    9c82:	d012      	beq.n	9caa <MPSL_IRQ_RADIO_Handler+0xfde>
    9c84:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    9c88:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
    9c8c:	688b      	ldr	r3, [r1, #8]
    9c8e:	68c9      	ldr	r1, [r1, #12]
    9c90:	1a1b      	subs	r3, r3, r0
    9c92:	1a09      	subs	r1, r1, r0
    9c94:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    9c98:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    9c9c:	429e      	cmp	r6, r3
    9c9e:	bf9c      	itt	ls
    9ca0:	f5b3 0f00 	cmpls.w	r3, #8388608	; 0x800000
    9ca4:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    9ca8:	d8e6      	bhi.n	9c78 <MPSL_IRQ_RADIO_Handler+0xfac>
    9caa:	2a20      	cmp	r2, #32
    9cac:	d005      	beq.n	9cba <MPSL_IRQ_RADIO_Handler+0xfee>
    9cae:	463b      	mov	r3, r7
    9cb0:	2120      	movs	r1, #32
    9cb2:	2004      	movs	r0, #4
    9cb4:	f7ff f82a 	bl	8d0c <MPSL_IRQ_RADIO_Handler+0x40>
    9cb8:	4604      	mov	r4, r0
    9cba:	42ac      	cmp	r4, r5
    9cbc:	d116      	bne.n	9cec <MPSL_IRQ_RADIO_Handler+0x1020>
    9cbe:	482e      	ldr	r0, [pc, #184]	; (9d78 <MPSL_IRQ_RADIO_Handler+0x10ac>)
    9cc0:	2800      	cmp	r0, #0
    9cc2:	bf18      	it	ne
    9cc4:	f3af 8000 	nopne.w
    9cc8:	f001 fbfa 	bl	b4c0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    9ccc:	4603      	mov	r3, r0
    9cce:	f89a 0033 	ldrb.w	r0, [sl, #51]	; 0x33
    9cd2:	2820      	cmp	r0, #32
    9cd4:	d00d      	beq.n	9cf2 <MPSL_IRQ_RADIO_Handler+0x1026>
    9cd6:	f8da 0008 	ldr.w	r0, [sl, #8]
    9cda:	1c99      	adds	r1, r3, #2
    9cdc:	1a08      	subs	r0, r1, r0
    9cde:	0200      	lsls	r0, r0, #8
    9ce0:	17c1      	asrs	r1, r0, #31
    9ce2:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    9ce6:	1200      	asrs	r0, r0, #8
    9ce8:	2800      	cmp	r0, #0
    9cea:	dd02      	ble.n	9cf2 <MPSL_IRQ_RADIO_Handler+0x1026>
    9cec:	2000      	movs	r0, #0
    9cee:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9cf2:	2d20      	cmp	r5, #32
    9cf4:	d014      	beq.n	9d20 <MPSL_IRQ_RADIO_Handler+0x1054>
    9cf6:	462a      	mov	r2, r5
    9cf8:	4641      	mov	r1, r8
    9cfa:	4618      	mov	r0, r3
    9cfc:	f7ff fa9c 	bl	9238 <MPSL_IRQ_RADIO_Handler+0x56c>
    9d00:	2800      	cmp	r0, #0
    9d02:	bf1e      	ittt	ne
    9d04:	f88a 5033 	strbne.w	r5, [sl, #51]	; 0x33
    9d08:	2002      	movne	r0, #2
    9d0a:	e8bd 9ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9d0e:	463b      	mov	r3, r7
    9d10:	462a      	mov	r2, r5
    9d12:	2120      	movs	r1, #32
    9d14:	2004      	movs	r0, #4
    9d16:	f7fe fff9 	bl	8d0c <MPSL_IRQ_RADIO_Handler+0x40>
    9d1a:	2000      	movs	r0, #0
    9d1c:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9d20:	f8da 002c 	ldr.w	r0, [sl, #44]	; 0x2c
    9d24:	f1b0 3fff 	cmp.w	r0, #4294967295
    9d28:	d005      	beq.n	9d36 <MPSL_IRQ_RADIO_Handler+0x106a>
    9d2a:	f002 f97b 	bl	c024 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    9d2e:	f04f 30ff 	mov.w	r0, #4294967295
    9d32:	f8ca 002c 	str.w	r0, [sl, #44]	; 0x2c
    9d36:	f89a 0030 	ldrb.w	r0, [sl, #48]	; 0x30
    9d3a:	b120      	cbz	r0, 9d46 <MPSL_IRQ_RADIO_Handler+0x107a>
    9d3c:	2005      	movs	r0, #5
    9d3e:	f001 fe35 	bl	b9ac <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9d42:	f88a b030 	strb.w	fp, [sl, #48]	; 0x30
    9d46:	2004      	movs	r0, #4
    9d48:	f001 fe30 	bl	b9ac <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9d4c:	f001 fe9e 	bl	ba8c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    9d50:	2020      	movs	r0, #32
    9d52:	f88a 0033 	strb.w	r0, [sl, #51]	; 0x33
    9d56:	4809      	ldr	r0, [pc, #36]	; (9d7c <MPSL_IRQ_RADIO_Handler+0x10b0>)
    9d58:	6880      	ldr	r0, [r0, #8]
    9d5a:	f8c0 b000 	str.w	fp, [r0]
    9d5e:	4808      	ldr	r0, [pc, #32]	; (9d80 <MPSL_IRQ_RADIO_Handler+0x10b4>)
    9d60:	f8c0 b000 	str.w	fp, [r0]
    9d64:	2001      	movs	r0, #1
    9d66:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9d6a:	0000      	.short	0x0000
    9d6c:	2000149c 	.word	0x2000149c
    9d70:	2000109c 	.word	0x2000109c
    9d74:	2000141c 	.word	0x2000141c
    9d78:	00000000 	.word	0x00000000
    9d7c:	200002d0 	.word	0x200002d0
    9d80:	40000508 	.word	0x40000508

00009d84 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    9d84:	4906      	ldr	r1, [pc, #24]	; (9da0 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    9d86:	b510      	push	{r4, lr}
    9d88:	f891 2032 	ldrb.w	r2, [r1, #50]	; 0x32
    9d8c:	2a20      	cmp	r2, #32
    9d8e:	bf1c      	itt	ne
    9d90:	7788      	strbne	r0, [r1, #30]
    9d92:	bd10      	popne	{r4, pc}
    9d94:	f240 319a 	movw	r1, #922	; 0x39a
    9d98:	2070      	movs	r0, #112	; 0x70
    9d9a:	f002 fadd 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9d9e:	0000      	.short	0x0000
    9da0:	2000149c 	.word	0x2000149c

00009da4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    9da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9da8:	4e69      	ldr	r6, [pc, #420]	; (9f50 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1ac>)
    9daa:	4607      	mov	r7, r0
    9dac:	b08d      	sub	sp, #52	; 0x34
    9dae:	f896 0032 	ldrb.w	r0, [r6, #50]	; 0x32
    9db2:	4688      	mov	r8, r1
    9db4:	2820      	cmp	r0, #32
    9db6:	d055      	beq.n	9e64 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xc0>
    9db8:	f896 0032 	ldrb.w	r0, [r6, #50]	; 0x32
    9dbc:	f106 0408 	add.w	r4, r6, #8
    9dc0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    9dc4:	f5a6 6980 	sub.w	r9, r6, #1024	; 0x400
    9dc8:	eb09 0a80 	add.w	sl, r9, r0, lsl #2
    9dcc:	2020      	movs	r0, #32
    9dce:	f88d 0020 	strb.w	r0, [sp, #32]
    9dd2:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
    9dd6:	aa0a      	add	r2, sp, #40	; 0x28
    9dd8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    9ddc:	4430      	add	r0, r6
    9dde:	a909      	add	r1, sp, #36	; 0x24
    9de0:	f890 5020 	ldrb.w	r5, [r0, #32]
    9de4:	68f0      	ldr	r0, [r6, #12]
    9de6:	9002      	str	r0, [sp, #8]
    9de8:	6830      	ldr	r0, [r6, #0]
    9dea:	4438      	add	r0, r7
    9dec:	f001 f9fe 	bl	b1ec <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    9df0:	f8da 000c 	ldr.w	r0, [sl, #12]
    9df4:	9909      	ldr	r1, [sp, #36]	; 0x24
    9df6:	2f65      	cmp	r7, #101	; 0x65
    9df8:	4408      	add	r0, r1
    9dfa:	d338      	bcc.n	9e6e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    9dfc:	4a55      	ldr	r2, [pc, #340]	; (9f54 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b0>)
    9dfe:	2100      	movs	r1, #0
    9e00:	1bd2      	subs	r2, r2, r7
    9e02:	eb71 0201 	sbcs.w	r2, r1, r1
    9e06:	d332      	bcc.n	9e6e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    9e08:	6822      	ldr	r2, [r4, #0]
    9e0a:	1a82      	subs	r2, r0, r2
    9e0c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    9e10:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    9e14:	d82b      	bhi.n	9e6e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    9e16:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9e1a:	6060      	str	r0, [r4, #4]
    9e1c:	4630      	mov	r0, r6
    9e1e:	f884 8010 	strb.w	r8, [r4, #16]
    9e22:	f890 0031 	ldrb.w	r0, [r0, #49]	; 0x31
    9e26:	f10d 0a20 	add.w	sl, sp, #32
    9e2a:	2d20      	cmp	r5, #32
    9e2c:	bf1c      	itt	ne
    9e2e:	494a      	ldrne	r1, [pc, #296]	; (9f58 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>)
    9e30:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    9e34:	d050      	beq.n	9ed8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    9e36:	bf00      	nop
    9e38:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    9e3c:	eb09 0880 	add.w	r8, r9, r0, lsl #2
    9e40:	6861      	ldr	r1, [r4, #4]
    9e42:	f8d8 6008 	ldr.w	r6, [r8, #8]
    9e46:	f108 0008 	add.w	r0, r8, #8
    9e4a:	1a71      	subs	r1, r6, r1
    9e4c:	0209      	lsls	r1, r1, #8
    9e4e:	17ca      	asrs	r2, r1, #31
    9e50:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    9e54:	1209      	asrs	r1, r1, #8
    9e56:	d42d      	bmi.n	9eb4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x110>
    9e58:	89c0      	ldrh	r0, [r0, #14]
    9e5a:	2800      	cmp	r0, #0
    9e5c:	d03c      	beq.n	9ed8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    9e5e:	89e0      	ldrh	r0, [r4, #14]
    9e60:	b148      	cbz	r0, 9e76 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xd2>
    9e62:	e039      	b.n	9ed8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    9e64:	f640 3173 	movw	r1, #2931	; 0xb73
    9e68:	2070      	movs	r0, #112	; 0x70
    9e6a:	f002 fa75 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9e6e:	b00d      	add	sp, #52	; 0x34
    9e70:	2001      	movs	r0, #1
    9e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9e76:	6820      	ldr	r0, [r4, #0]
    9e78:	900c      	str	r0, [sp, #48]	; 0x30
    9e7a:	f002 f8cd 	bl	c018 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9e7e:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9e82:	bf08      	it	eq
    9e84:	200d      	moveq	r0, #13
    9e86:	d00b      	beq.n	9ea0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xfc>
    9e88:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9e8c:	3856      	subs	r0, #86	; 0x56
    9e8e:	bf08      	it	eq
    9e90:	201c      	moveq	r0, #28
    9e92:	d005      	beq.n	9ea0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xfc>
    9e94:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9e98:	389f      	subs	r0, #159	; 0x9f
    9e9a:	bf14      	ite	ne
    9e9c:	2000      	movne	r0, #0
    9e9e:	2032      	moveq	r0, #50	; 0x32
    9ea0:	1c41      	adds	r1, r0, #1
    9ea2:	980c      	ldr	r0, [sp, #48]	; 0x30
    9ea4:	1a30      	subs	r0, r6, r0
    9ea6:	0200      	lsls	r0, r0, #8
    9ea8:	17c2      	asrs	r2, r0, #31
    9eaa:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    9eae:	1200      	asrs	r0, r0, #8
    9eb0:	4288      	cmp	r0, r1
    9eb2:	da11      	bge.n	9ed8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    9eb4:	f88a 5000 	strb.w	r5, [sl]
    9eb8:	f898 1018 	ldrb.w	r1, [r8, #24]
    9ebc:	7c20      	ldrb	r0, [r4, #16]
    9ebe:	4281      	cmp	r1, r0
    9ec0:	d805      	bhi.n	9ece <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x12a>
    9ec2:	9802      	ldr	r0, [sp, #8]
    9ec4:	6060      	str	r0, [r4, #4]
    9ec6:	b00d      	add	sp, #52	; 0x34
    9ec8:	2002      	movs	r0, #2
    9eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9ece:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    9ed2:	7845      	ldrb	r5, [r0, #1]
    9ed4:	2d20      	cmp	r5, #32
    9ed6:	d1af      	bne.n	9e38 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x94>
    9ed8:	2005      	movs	r0, #5
    9eda:	f001 fd67 	bl	b9ac <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9ede:	4c1c      	ldr	r4, [pc, #112]	; (9f50 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1ac>)
    9ee0:	f04f 30ff 	mov.w	r0, #4294967295
    9ee4:	6060      	str	r0, [r4, #4]
    9ee6:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
    9eea:	f89d 2020 	ldrb.w	r2, [sp, #32]
    9eee:	2120      	movs	r1, #32
    9ef0:	2a20      	cmp	r2, #32
    9ef2:	d003      	beq.n	9efc <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x158>
    9ef4:	2005      	movs	r0, #5
    9ef6:	f7fe ff09 	bl	8d0c <MPSL_IRQ_RADIO_Handler+0x40>
    9efa:	e004      	b.n	9f06 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x162>
    9efc:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    9f00:	4420      	add	r0, r4
    9f02:	f890 0020 	ldrb.w	r0, [r0, #32]
    9f06:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
    9f0a:	4913      	ldr	r1, [pc, #76]	; (9f58 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>)
    9f0c:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    9f10:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
    9f14:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    9f18:	7048      	strb	r0, [r1, #1]
    9f1a:	6820      	ldr	r0, [r4, #0]
    9f1c:	4438      	add	r0, r7
    9f1e:	6020      	str	r0, [r4, #0]
    9f20:	20ff      	movs	r0, #255	; 0xff
    9f22:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    9f26:	7e60      	ldrb	r0, [r4, #25]
    9f28:	2801      	cmp	r0, #1
    9f2a:	d105      	bne.n	9f38 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x194>
    9f2c:	68e0      	ldr	r0, [r4, #12]
    9f2e:	1e40      	subs	r0, r0, #1
    9f30:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9f34:	f001 fb9e 	bl	b674 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    9f38:	f89d 0020 	ldrb.w	r0, [sp, #32]
    9f3c:	2820      	cmp	r0, #32
    9f3e:	d003      	beq.n	9f48 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1a4>
    9f40:	4806      	ldr	r0, [pc, #24]	; (9f5c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b8>)
    9f42:	7840      	ldrb	r0, [r0, #1]
    9f44:	f002 fadc 	bl	c500 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    9f48:	b00d      	add	sp, #52	; 0x34
    9f4a:	2000      	movs	r0, #0
    9f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9f50:	2000149c 	.word	0x2000149c
    9f54:	0f424000 	.word	0x0f424000
    9f58:	2000141c 	.word	0x2000141c
    9f5c:	200002d0 	.word	0x200002d0

00009f60 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>:
    9f60:	b570      	push	{r4, r5, r6, lr}
    9f62:	4a24      	ldr	r2, [pc, #144]	; (9ff4 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x94>)
    9f64:	f892 1032 	ldrb.w	r1, [r2, #50]	; 0x32
    9f68:	2920      	cmp	r1, #32
    9f6a:	d03a      	beq.n	9fe2 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x82>
    9f6c:	f892 1032 	ldrb.w	r1, [r2, #50]	; 0x32
    9f70:	f5a2 6380 	sub.w	r3, r2, #1024	; 0x400
    9f74:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    9f78:	eb03 0c81 	add.w	ip, r3, r1, lsl #2
    9f7c:	f892 1031 	ldrb.w	r1, [r2, #49]	; 0x31
    9f80:	f892 4031 	ldrb.w	r4, [r2, #49]	; 0x31
    9f84:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    9f88:	4411      	add	r1, r2
    9f8a:	f891 1020 	ldrb.w	r1, [r1, #32]
    9f8e:	f1a2 0580 	sub.w	r5, r2, #128	; 0x80
    9f92:	eb05 1484 	add.w	r4, r5, r4, lsl #6
    9f96:	2920      	cmp	r1, #32
    9f98:	d028      	beq.n	9fec <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x8c>
    9f9a:	ebc1 05c1 	rsb	r5, r1, r1, lsl #3
    9f9e:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    9fa2:	7e2d      	ldrb	r5, [r5, #24]
    9fa4:	4285      	cmp	r5, r0
    9fa6:	bf84      	itt	hi
    9fa8:	eb04 0141 	addhi.w	r1, r4, r1, lsl #1
    9fac:	7849      	ldrbhi	r1, [r1, #1]
    9fae:	d8f2      	bhi.n	9f96 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x36>
    9fb0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    9fb4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    9fb8:	f8dc 000c 	ldr.w	r0, [ip, #12]
    9fbc:	6889      	ldr	r1, [r1, #8]
    9fbe:	6814      	ldr	r4, [r2, #0]
    9fc0:	1a08      	subs	r0, r1, r0
    9fc2:	0200      	lsls	r0, r0, #8
    9fc4:	17c1      	asrs	r1, r0, #31
    9fc6:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    9fca:	1200      	asrs	r0, r0, #8
    9fcc:	d407      	bmi.n	9fde <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x7e>
    9fce:	f006 f9bb 	bl	10348 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    9fd2:	f104 0165 	add.w	r1, r4, #101	; 0x65
    9fd6:	4288      	cmp	r0, r1
    9fd8:	bf24      	itt	cs
    9fda:	1b00      	subcs	r0, r0, r4
    9fdc:	bd70      	popcs	{r4, r5, r6, pc}
    9fde:	2000      	movs	r0, #0
    9fe0:	bd70      	pop	{r4, r5, r6, pc}
    9fe2:	f640 3145 	movw	r1, #2885	; 0xb45
    9fe6:	2070      	movs	r0, #112	; 0x70
    9fe8:	f002 f9b6 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9fec:	f04f 30ff 	mov.w	r0, #4294967295
    9ff0:	bd70      	pop	{r4, r5, r6, pc}
    9ff2:	0000      	.short	0x0000
    9ff4:	2000149c 	.word	0x2000149c

00009ff8 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>:
    9ff8:	4806      	ldr	r0, [pc, #24]	; (a014 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA+0x1c>)
    9ffa:	b510      	push	{r4, lr}
    9ffc:	f890 1032 	ldrb.w	r1, [r0, #50]	; 0x32
    a000:	2920      	cmp	r1, #32
    a002:	bf1c      	itt	ne
    a004:	7e00      	ldrbne	r0, [r0, #24]
    a006:	bd10      	popne	{r4, pc}
    a008:	f640 316d 	movw	r1, #2925	; 0xb6d
    a00c:	2070      	movs	r0, #112	; 0x70
    a00e:	f002 f9a3 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a012:	0000      	.short	0x0000
    a014:	2000149c 	.word	0x2000149c

0000a018 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>:
    a018:	b570      	push	{r4, r5, r6, lr}
    a01a:	ebc0 01c0 	rsb	r1, r0, r0, lsl #3
    a01e:	4809      	ldr	r0, [pc, #36]	; (a044 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x2c>)
    a020:	eb00 0481 	add.w	r4, r0, r1, lsl #2
    a024:	4908      	ldr	r1, [pc, #32]	; (a048 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x30>)
    a026:	6920      	ldr	r0, [r4, #16]
    a028:	fba0 5601 	umull	r5, r6, r0, r1
    a02c:	68a0      	ldr	r0, [r4, #8]
    a02e:	f006 f98b 	bl	10348 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    a032:	8ae1      	ldrh	r1, [r4, #22]
    a034:	7d22      	ldrb	r2, [r4, #20]
    a036:	1c40      	adds	r0, r0, #1
    a038:	4411      	add	r1, r2
    a03a:	4408      	add	r0, r1
    a03c:	1940      	adds	r0, r0, r5
    a03e:	f146 0100 	adc.w	r1, r6, #0
    a042:	bd70      	pop	{r4, r5, r6, pc}
    a044:	2000109c 	.word	0x2000109c
    a048:	1e848000 	.word	0x1e848000

0000a04c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    a04c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a04e:	4d6f      	ldr	r5, [pc, #444]	; (a20c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c0>)
    a050:	2601      	movs	r6, #1
    a052:	f505 6480 	add.w	r4, r5, #1024	; 0x400
    a056:	4a6e      	ldr	r2, [pc, #440]	; (a210 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c4>)
    a058:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    a05a:	2808      	cmp	r0, #8
    a05c:	d272      	bcs.n	a144 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xf8>
    a05e:	e8df f000 	tbb	[pc, r0]
    a062:	7704      	.short	0x7704
    a064:	44cfb19f 	.word	0x44cfb19f
    a068:	bbb6      	.short	0xbbb6
    a06a:	f1b1 3fff 	cmp.w	r1, #4294967295
    a06e:	d104      	bne.n	a07a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2e>
    a070:	f001 fff4 	bl	c05c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    a074:	f001 fa24 	bl	b4c0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    a078:	62e0      	str	r0, [r4, #44]	; 0x2c
    a07a:	8ae0      	ldrh	r0, [r4, #22]
    a07c:	b110      	cbz	r0, a084 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x38>
    a07e:	f002 f8f3 	bl	c268 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    a082:	b180      	cbz	r0, a0a6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x5a>
    a084:	f7ff fcd8 	bl	9a38 <MPSL_IRQ_RADIO_Handler+0xd6c>
    a088:	20ff      	movs	r0, #255	; 0xff
    a08a:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    a08e:	6861      	ldr	r1, [r4, #4]
    a090:	f1b1 3fff 	cmp.w	r1, #4294967295
    a094:	d003      	beq.n	a09e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x52>
    a096:	2005      	movs	r0, #5
    a098:	f001 fbd2 	bl	b840 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    a09c:	b140      	cbz	r0, a0b0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x64>
    a09e:	7e60      	ldrb	r0, [r4, #25]
    a0a0:	2801      	cmp	r0, #1
    a0a2:	d110      	bne.n	a0c6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x7a>
    a0a4:	e009      	b.n	a0ba <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6e>
    a0a6:	f640 0169 	movw	r1, #2153	; 0x869
    a0aa:	2070      	movs	r0, #112	; 0x70
    a0ac:	f002 f954 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a0b0:	f640 016e 	movw	r1, #2158	; 0x86e
    a0b4:	2070      	movs	r0, #112	; 0x70
    a0b6:	f002 f94f 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a0ba:	68e0      	ldr	r0, [r4, #12]
    a0bc:	1e40      	subs	r0, r0, #1
    a0be:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a0c2:	f001 fad7 	bl	b674 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    a0c6:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    a0ca:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
    a0ce:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    a0d2:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    a0d6:	6840      	ldr	r0, [r0, #4]
    a0d8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    a0dc:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    a0e0:	b001      	add	sp, #4
    a0e2:	2101      	movs	r1, #1
    a0e4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a0e8:	4710      	bx	r2
    a0ea:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
    a0ee:	b158      	cbz	r0, a108 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xbc>
    a0f0:	f1b1 3fff 	cmp.w	r1, #4294967295
    a0f4:	d104      	bne.n	a100 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xb4>
    a0f6:	f001 ffb1 	bl	c05c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    a0fa:	f001 f9e1 	bl	b4c0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    a0fe:	62e0      	str	r0, [r4, #44]	; 0x2c
    a100:	2000      	movs	r0, #0
    a102:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    a106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a108:	f7ff fc96 	bl	9a38 <MPSL_IRQ_RADIO_Handler+0xd6c>
    a10c:	f04f 30ff 	mov.w	r0, #4294967295
    a110:	6060      	str	r0, [r4, #4]
    a112:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    a116:	f88d 0000 	strb.w	r0, [sp]
    a11a:	f89d 0000 	ldrb.w	r0, [sp]
    a11e:	b190      	cbz	r0, a146 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xfa>
    a120:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    a124:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
    a128:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    a12c:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    a130:	6840      	ldr	r0, [r0, #4]
    a132:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    a136:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    a13a:	b001      	add	sp, #4
    a13c:	2106      	movs	r1, #6
    a13e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a142:	4710      	bx	r2
    a144:	e05c      	b.n	a200 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b4>
    a146:	f640 0185 	movw	r1, #2181	; 0x885
    a14a:	2070      	movs	r0, #112	; 0x70
    a14c:	f002 f904 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a150:	f7ff fc72 	bl	9a38 <MPSL_IRQ_RADIO_Handler+0xd6c>
    a154:	f884 6026 	strb.w	r6, [r4, #38]	; 0x26
    a158:	f002 f886 	bl	c268 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    a15c:	b120      	cbz	r0, a168 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x11c>
    a15e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    a160:	f1b0 3fff 	cmp.w	r0, #4294967295
    a164:	d005      	beq.n	a172 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x126>
    a166:	e009      	b.n	a17c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x130>
    a168:	f640 0193 	movw	r1, #2195	; 0x893
    a16c:	2070      	movs	r0, #112	; 0x70
    a16e:	f002 f8f3 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a172:	f001 ff73 	bl	c05c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    a176:	f001 f9a3 	bl	b4c0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    a17a:	62e0      	str	r0, [r4, #44]	; 0x2c
    a17c:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    a180:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
    a184:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    a188:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    a18c:	6840      	ldr	r0, [r0, #4]
    a18e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    a192:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    a196:	b001      	add	sp, #4
    a198:	2100      	movs	r1, #0
    a19a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a19e:	4710      	bx	r2
    a1a0:	f001 fd44 	bl	bc2c <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    a1a4:	8ae0      	ldrh	r0, [r4, #22]
    a1a6:	b110      	cbz	r0, a1ae <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x162>
    a1a8:	f002 f85e 	bl	c268 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    a1ac:	b128      	cbz	r0, a1ba <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x16e>
    a1ae:	f001 fd51 	bl	bc54 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    a1b2:	2800      	cmp	r0, #0
    a1b4:	bf18      	it	ne
    a1b6:	7766      	strbne	r6, [r4, #29]
    a1b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a1ba:	f640 019d 	movw	r1, #2205	; 0x89d
    a1be:	2070      	movs	r0, #112	; 0x70
    a1c0:	f002 f8ca 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a1c4:	4813      	ldr	r0, [pc, #76]	; (a214 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c8>)
    a1c6:	6006      	str	r6, [r0, #0]
    a1c8:	6890      	ldr	r0, [r2, #8]
    a1ca:	6006      	str	r6, [r0, #0]
    a1cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a1ce:	7810      	ldrb	r0, [r2, #0]
    a1d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    a1d4:	f002 b994 	b.w	c500 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    a1d8:	f7ff fc2e 	bl	9a38 <MPSL_IRQ_RADIO_Handler+0xd6c>
    a1dc:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    a1e0:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
    a1e4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    a1e8:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    a1ec:	6840      	ldr	r0, [r0, #4]
    a1ee:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    a1f2:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    a1f6:	b001      	add	sp, #4
    a1f8:	2105      	movs	r1, #5
    a1fa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a1fe:	4710      	bx	r2
    a200:	f44f 610b 	mov.w	r1, #2224	; 0x8b0
    a204:	2070      	movs	r0, #112	; 0x70
    a206:	f002 f8a7 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a20a:	0000      	.short	0x0000
    a20c:	2000109c 	.word	0x2000109c
    a210:	200002d0 	.word	0x200002d0
    a214:	40000508 	.word	0x40000508

0000a218 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    a218:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a21c:	4682      	mov	sl, r0
    a21e:	48ef      	ldr	r0, [pc, #956]	; (a5dc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c4>)
    a220:	b095      	sub	sp, #84	; 0x54
    a222:	6800      	ldr	r0, [r0, #0]
    a224:	4dee      	ldr	r5, [pc, #952]	; (a5e0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c8>)
    a226:	05c0      	lsls	r0, r0, #23
    a228:	0dc0      	lsrs	r0, r0, #23
    a22a:	d00e      	beq.n	a24a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    a22c:	3810      	subs	r0, #16
    a22e:	b240      	sxtb	r0, r0
    a230:	2800      	cmp	r0, #0
    a232:	bfb8      	it	lt
    a234:	f000 000f 	andlt.w	r0, r0, #15
    a238:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    a23c:	bfac      	ite	ge
    a23e:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    a242:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    a246:	0940      	lsrs	r0, r0, #5
    a248:	d00d      	beq.n	a266 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    a24a:	9816      	ldr	r0, [sp, #88]	; 0x58
    a24c:	f04f 0b00 	mov.w	fp, #0
    a250:	7800      	ldrb	r0, [r0, #0]
    a252:	2800      	cmp	r0, #0
    a254:	bf18      	it	ne
    a256:	2801      	cmpne	r0, #1
    a258:	d018      	beq.n	a28c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    a25a:	f240 713b 	movw	r1, #1851	; 0x73b
    a25e:	f04f 0070 	mov.w	r0, #112	; 0x70
    a262:	f002 f879 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a266:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
    a26a:	f04f 0b01 	mov.w	fp, #1
    a26e:	2820      	cmp	r0, #32
    a270:	d007      	beq.n	a282 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    a272:	9816      	ldr	r0, [sp, #88]	; 0x58
    a274:	7800      	ldrb	r0, [r0, #0]
    a276:	b148      	cbz	r0, a28c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    a278:	f240 7137 	movw	r1, #1847	; 0x737
    a27c:	2070      	movs	r0, #112	; 0x70
    a27e:	f002 f86b 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a282:	f240 7134 	movw	r1, #1844	; 0x734
    a286:	2070      	movs	r0, #112	; 0x70
    a288:	f002 f866 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a28c:	4cd5      	ldr	r4, [pc, #852]	; (a5e4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3cc>)
    a28e:	b124      	cbz	r4, a29a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    a290:	2100      	movs	r1, #0
    a292:	f240 703e 	movw	r0, #1854	; 0x73e
    a296:	f3af 8000 	nop.w
    a29a:	2000      	movs	r0, #0
    a29c:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
    a2a0:	49d1      	ldr	r1, [pc, #836]	; (a5e8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d0>)
    a2a2:	ebca 00ca 	rsb	r0, sl, sl, lsl #3
    a2a6:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    a2aa:	f04f 0901 	mov.w	r9, #1
    a2ae:	9000      	str	r0, [sp, #0]
    a2b0:	b124      	cbz	r4, a2bc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa4>
    a2b2:	2100      	movs	r1, #0
    a2b4:	f240 7049 	movw	r0, #1865	; 0x749
    a2b8:	f3af 8000 	nop.w
    a2bc:	f1b9 0f00 	cmp.w	r9, #0
    a2c0:	d00a      	beq.n	a2d8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc0>
    a2c2:	bf00      	nop
    a2c4:	f895 6031 	ldrb.w	r6, [r5, #49]	; 0x31
    a2c8:	f04f 0800 	mov.w	r8, #0
    a2cc:	f885 8029 	strb.w	r8, [r5, #41]	; 0x29
    a2d0:	f1bb 0f00 	cmp.w	fp, #0
    a2d4:	d007      	beq.n	a2e6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xce>
    a2d6:	e038      	b.n	a34a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x132>
    a2d8:	48c4      	ldr	r0, [pc, #784]	; (a5ec <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d4>)
    a2da:	2800      	cmp	r0, #0
    a2dc:	bf18      	it	ne
    a2de:	f3af 8000 	nopne.w
    a2e2:	b662      	cpsie	i
    a2e4:	e7ee      	b.n	a2c4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xac>
    a2e6:	4637      	mov	r7, r6
    a2e8:	2001      	movs	r0, #1
    a2ea:	ea20 0607 	bic.w	r6, r0, r7
    a2ee:	48c0      	ldr	r0, [pc, #768]	; (a5f0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d8>)
    a2f0:	2240      	movs	r2, #64	; 0x40
    a2f2:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    a2f6:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    a2fa:	f006 f9b8 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    a2fe:	b124      	cbz	r4, a30a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xf2>
    a300:	2100      	movs	r1, #0
    a302:	f240 505e 	movw	r0, #1374	; 0x55e
    a306:	f3af 8000 	nop.w
    a30a:	eb07 0147 	add.w	r1, r7, r7, lsl #1
    a30e:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    a312:	4429      	add	r1, r5
    a314:	4428      	add	r0, r5
    a316:	8c0a      	ldrh	r2, [r1, #32]
    a318:	8402      	strh	r2, [r0, #32]
    a31a:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    a31e:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    a322:	b124      	cbz	r4, a32e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x116>
    a324:	2100      	movs	r1, #0
    a326:	f240 5062 	movw	r0, #1378	; 0x562
    a32a:	f3af 8000 	nop.w
    a32e:	b124      	cbz	r4, a33a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x122>
    a330:	2100      	movs	r1, #0
    a332:	f240 7053 	movw	r0, #1875	; 0x753
    a336:	f3af 8000 	nop.w
    a33a:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    a33e:	f88d 0008 	strb.w	r0, [sp, #8]
    a342:	f89d 0008 	ldrb.w	r0, [sp, #8]
    a346:	2800      	cmp	r0, #0
    a348:	d1b2      	bne.n	a2b0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    a34a:	b124      	cbz	r4, a356 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x13e>
    a34c:	2100      	movs	r1, #0
    a34e:	f240 705d 	movw	r0, #1885	; 0x75d
    a352:	f3af 8000 	nop.w
    a356:	a802      	add	r0, sp, #8
    a358:	f001 f8b8 	bl	b4cc <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    a35c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    a360:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    a364:	4633      	mov	r3, r6
    a366:	aa09      	add	r2, sp, #36	; 0x24
    a368:	a80e      	add	r0, sp, #56	; 0x38
    a36a:	9916      	ldr	r1, [sp, #88]	; 0x58
    a36c:	f7ff fa02 	bl	9774 <MPSL_IRQ_RADIO_Handler+0xaa8>
    a370:	b124      	cbz	r4, a37c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x164>
    a372:	2100      	movs	r1, #0
    a374:	f240 7064 	movw	r0, #1892	; 0x764
    a378:	f3af 8000 	nop.w
    a37c:	4a9c      	ldr	r2, [pc, #624]	; (a5f0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d8>)
    a37e:	990e      	ldr	r1, [sp, #56]	; 0x38
    a380:	eb02 1786 	add.w	r7, r2, r6, lsl #6
    a384:	a809      	add	r0, sp, #36	; 0x24
    a386:	f817 201a 	ldrb.w	r2, [r7, sl, lsl #1]
    a38a:	2a01      	cmp	r2, #1
    a38c:	bf18      	it	ne
    a38e:	2a02      	cmpne	r2, #2
    a390:	d138      	bne.n	a404 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1ec>
    a392:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a394:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a396:	eba2 0201 	sub.w	r2, r2, r1
    a39a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    a39e:	eba3 0101 	sub.w	r1, r3, r1
    a3a2:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
    a3a6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    a3aa:	2a02      	cmp	r2, #2
    a3ac:	d364      	bcc.n	a478 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x260>
    a3ae:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    a3b2:	bf98      	it	ls
    a3b4:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    a3b8:	d85e      	bhi.n	a478 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x260>
    a3ba:	f04f 0801 	mov.w	r8, #1
    a3be:	ab14      	add	r3, sp, #80	; 0x50
    a3c0:	aa13      	add	r2, sp, #76	; 0x4c
    a3c2:	4631      	mov	r1, r6
    a3c4:	f7fe fe96 	bl	90f4 <MPSL_IRQ_RADIO_Handler+0x428>
    a3c8:	2800      	cmp	r0, #0
    a3ca:	d05d      	beq.n	a488 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x270>
    a3cc:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
    a3d0:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
    a3d4:	4633      	mov	r3, r6
    a3d6:	428a      	cmp	r2, r1
    a3d8:	d05a      	beq.n	a490 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x278>
    a3da:	2005      	movs	r0, #5
    a3dc:	f7fe fc96 	bl	8d0c <MPSL_IRQ_RADIO_Handler+0x40>
    a3e0:	eb07 014a 	add.w	r1, r7, sl, lsl #1
    a3e4:	7048      	strb	r0, [r1, #1]
    a3e6:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    a3ea:	2820      	cmp	r0, #32
    a3ec:	bf1c      	itt	ne
    a3ee:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    a3f2:	f880 a001 	strbne.w	sl, [r0, #1]
    a3f6:	d057      	beq.n	a4a8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x290>
    a3f8:	4632      	mov	r2, r6
    a3fa:	4651      	mov	r1, sl
    a3fc:	f05f 0003 	movs.w	r0, #3
    a400:	f7ff fbcc 	bl	9b9c <MPSL_IRQ_RADIO_Handler+0xed0>
    a404:	b124      	cbz	r4, a410 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f8>
    a406:	2100      	movs	r1, #0
    a408:	f240 7069 	movw	r0, #1897	; 0x769
    a40c:	f3af 8000 	nop.w
    a410:	4878      	ldr	r0, [pc, #480]	; (a5f4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3dc>)
    a412:	2800      	cmp	r0, #0
    a414:	bf18      	it	ne
    a416:	f3af 8000 	nopne.w
    a41a:	f3ef 8910 	mrs	r9, PRIMASK
    a41e:	b672      	cpsid	i
    a420:	b124      	cbz	r4, a42c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x214>
    a422:	2100      	movs	r1, #0
    a424:	f240 706f 	movw	r0, #1903	; 0x76f
    a428:	f3af 8000 	nop.w
    a42c:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    a430:	f88d 0008 	strb.w	r0, [sp, #8]
    a434:	f89d 0008 	ldrb.w	r0, [sp, #8]
    a438:	2800      	cmp	r0, #0
    a43a:	f47f af39 	bne.w	a2b0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    a43e:	b124      	cbz	r4, a44a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x232>
    a440:	2100      	movs	r1, #0
    a442:	f240 7077 	movw	r0, #1911	; 0x777
    a446:	f3af 8000 	nop.w
    a44a:	af09      	add	r7, sp, #36	; 0x24
    a44c:	9800      	ldr	r0, [sp, #0]
    a44e:	e897 100e 	ldmia.w	r7, {r1, r2, r3, ip}
    a452:	f100 0708 	add.w	r7, r0, #8
    a456:	f1b8 0f00 	cmp.w	r8, #0
    a45a:	e887 100e 	stmia.w	r7, {r1, r2, r3, ip}
    a45e:	990d      	ldr	r1, [sp, #52]	; 0x34
    a460:	6181      	str	r1, [r0, #24]
    a462:	d051      	beq.n	a508 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f0>
    a464:	b124      	cbz	r4, a470 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    a466:	2100      	movs	r1, #0
    a468:	f240 7084 	movw	r0, #1924	; 0x784
    a46c:	f3af 8000 	nop.w
    a470:	f1bb 0f00 	cmp.w	fp, #0
    a474:	d139      	bne.n	a4ea <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d2>
    a476:	e01f      	b.n	a4b8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2a0>
    a478:	4632      	mov	r2, r6
    a47a:	4651      	mov	r1, sl
    a47c:	2004      	movs	r0, #4
    a47e:	f7ff fb8d 	bl	9b9c <MPSL_IRQ_RADIO_Handler+0xed0>
    a482:	f04f 0801 	mov.w	r8, #1
    a486:	e7bd      	b.n	a404 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1ec>
    a488:	4632      	mov	r2, r6
    a48a:	4651      	mov	r1, sl
    a48c:	2004      	movs	r0, #4
    a48e:	e7b7      	b.n	a400 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1e8>
    a490:	2920      	cmp	r1, #32
    a492:	bf19      	ittee	ne
    a494:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    a498:	7840      	ldrbne	r0, [r0, #1]
    a49a:	eb06 0046 	addeq.w	r0, r6, r6, lsl #1
    a49e:	4428      	addeq	r0, r5
    a4a0:	bf08      	it	eq
    a4a2:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    a4a6:	e79b      	b.n	a3e0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1c8>
    a4a8:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    a4ac:	4429      	add	r1, r5
    a4ae:	f881 a020 	strb.w	sl, [r1, #32]
    a4b2:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
    a4b6:	e79f      	b.n	a3f8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1e0>
    a4b8:	9811      	ldr	r0, [sp, #68]	; 0x44
    a4ba:	f010 0fff 	tst.w	r0, #255	; 0xff
    a4be:	d014      	beq.n	a4ea <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d2>
    a4c0:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
    a4c4:	2820      	cmp	r0, #32
    a4c6:	d110      	bne.n	a4ea <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d2>
    a4c8:	b124      	cbz	r4, a4d4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2bc>
    a4ca:	2100      	movs	r1, #0
    a4cc:	f240 7089 	movw	r0, #1929	; 0x789
    a4d0:	f3af 8000 	nop.w
    a4d4:	4631      	mov	r1, r6
    a4d6:	2002      	movs	r0, #2
    a4d8:	f7ff fb92 	bl	9c00 <MPSL_IRQ_RADIO_Handler+0xf34>
    a4dc:	9010      	str	r0, [sp, #64]	; 0x40
    a4de:	b920      	cbnz	r0, a4ea <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d2>
    a4e0:	9816      	ldr	r0, [sp, #88]	; 0x58
    a4e2:	7800      	ldrb	r0, [r0, #0]
    a4e4:	b1e8      	cbz	r0, a522 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x30a>
    a4e6:	2801      	cmp	r0, #1
    a4e8:	d02a      	beq.n	a540 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x328>
    a4ea:	b124      	cbz	r4, a4f6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2de>
    a4ec:	2100      	movs	r1, #0
    a4ee:	f240 70a6 	movw	r0, #1958	; 0x7a6
    a4f2:	f3af 8000 	nop.w
    a4f6:	20ff      	movs	r0, #255	; 0xff
    a4f8:	f1bb 0f00 	cmp.w	fp, #0
    a4fc:	bf18      	it	ne
    a4fe:	f885 0029 	strbne.w	r0, [r5, #41]	; 0x29
    a502:	d026      	beq.n	a552 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x33a>
    a504:	f04f 0801 	mov.w	r8, #1
    a508:	b124      	cbz	r4, a514 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2fc>
    a50a:	2100      	movs	r1, #0
    a50c:	f240 70b7 	movw	r0, #1975	; 0x7b7
    a510:	f3af 8000 	nop.w
    a514:	9810      	ldr	r0, [sp, #64]	; 0x40
    a516:	4e38      	ldr	r6, [pc, #224]	; (a5f8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e0>)
    a518:	2802      	cmp	r0, #2
    a51a:	d023      	beq.n	a564 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x34c>
    a51c:	2801      	cmp	r0, #1
    a51e:	d029      	beq.n	a574 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35c>
    a520:	e02d      	b.n	a57e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x366>
    a522:	b124      	cbz	r4, a52e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x316>
    a524:	2100      	movs	r1, #0
    a526:	f240 7091 	movw	r0, #1937	; 0x791
    a52a:	f3af 8000 	nop.w
    a52e:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
    a532:	4651      	mov	r1, sl
    a534:	2004      	movs	r0, #4
    a536:	f7ff fb31 	bl	9b9c <MPSL_IRQ_RADIO_Handler+0xed0>
    a53a:	f04f 0801 	mov.w	r8, #1
    a53e:	e7e3      	b.n	a508 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f0>
    a540:	2c00      	cmp	r4, #0
    a542:	f43f aeb5 	beq.w	a2b0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    a546:	2100      	movs	r1, #0
    a548:	f240 709c 	movw	r0, #1948	; 0x79c
    a54c:	f3af 8000 	nop.w
    a550:	e6ae      	b.n	a2b0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    a552:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
    a556:	2101      	movs	r1, #1
    a558:	4391      	bics	r1, r2
    a55a:	f885 1031 	strb.w	r1, [r5, #49]	; 0x31
    a55e:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    a562:	e7cf      	b.n	a504 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ec>
    a564:	68a8      	ldr	r0, [r5, #8]
    a566:	990e      	ldr	r1, [sp, #56]	; 0x38
    a568:	1a40      	subs	r0, r0, r1
    a56a:	f005 feed 	bl	10348 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    a56e:	6871      	ldr	r1, [r6, #4]
    a570:	b921      	cbnz	r1, a57c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x364>
    a572:	e004      	b.n	a57e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x366>
    a574:	6871      	ldr	r1, [r6, #4]
    a576:	f04f 30ff 	mov.w	r0, #4294967295
    a57a:	b101      	cbz	r1, a57e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x366>
    a57c:	4788      	blx	r1
    a57e:	f1b9 0f00 	cmp.w	r9, #0
    a582:	d024      	beq.n	a5ce <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b6>
    a584:	b124      	cbz	r4, a590 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x378>
    a586:	2100      	movs	r1, #0
    a588:	f240 70c7 	movw	r0, #1991	; 0x7c7
    a58c:	f3af 8000 	nop.w
    a590:	f1b8 0f00 	cmp.w	r8, #0
    a594:	d011      	beq.n	a5ba <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a2>
    a596:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
    a59a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    a59e:	4428      	add	r0, r5
    a5a0:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    a5a4:	2820      	cmp	r0, #32
    a5a6:	d008      	beq.n	a5ba <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a2>
    a5a8:	b124      	cbz	r4, a5b4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x39c>
    a5aa:	2100      	movs	r1, #0
    a5ac:	f240 70ce 	movw	r0, #1998	; 0x7ce
    a5b0:	f3af 8000 	nop.w
    a5b4:	7870      	ldrb	r0, [r6, #1]
    a5b6:	f001 ffa3 	bl	c500 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    a5ba:	b124      	cbz	r4, a5c6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3ae>
    a5bc:	2100      	movs	r1, #0
    a5be:	f240 70d3 	movw	r0, #2003	; 0x7d3
    a5c2:	f3af 8000 	nop.w
    a5c6:	b017      	add	sp, #92	; 0x5c
    a5c8:	4640      	mov	r0, r8
    a5ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a5ce:	4807      	ldr	r0, [pc, #28]	; (a5ec <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d4>)
    a5d0:	2800      	cmp	r0, #0
    a5d2:	bf18      	it	ne
    a5d4:	f3af 8000 	nopne.w
    a5d8:	b662      	cpsie	i
    a5da:	e7d3      	b.n	a584 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x36c>
    a5dc:	e000ed04 	.word	0xe000ed04
    a5e0:	2000149c 	.word	0x2000149c
    a5e4:	00000000 	.word	0x00000000
    a5e8:	2000109c 	.word	0x2000109c
    a5ec:	00000000 	.word	0x00000000
    a5f0:	2000141c 	.word	0x2000141c
    a5f4:	00000000 	.word	0x00000000
    a5f8:	200002d0 	.word	0x200002d0

0000a5fc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    a5fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a600:	4606      	mov	r6, r0
    a602:	7800      	ldrb	r0, [r0, #0]
    a604:	b08d      	sub	sp, #52	; 0x34
    a606:	b118      	cbz	r0, a610 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x14>
    a608:	b00d      	add	sp, #52	; 0x34
    a60a:	2000      	movs	r0, #0
    a60c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a610:	488c      	ldr	r0, [pc, #560]	; (a844 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x248>)
    a612:	6800      	ldr	r0, [r0, #0]
    a614:	05c0      	lsls	r0, r0, #23
    a616:	0dc0      	lsrs	r0, r0, #23
    a618:	d00e      	beq.n	a638 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3c>
    a61a:	3810      	subs	r0, #16
    a61c:	b240      	sxtb	r0, r0
    a61e:	2800      	cmp	r0, #0
    a620:	bfb8      	it	lt
    a622:	f000 000f 	andlt.w	r0, r0, #15
    a626:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    a62a:	bfac      	ite	ge
    a62c:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    a630:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    a634:	0940      	lsrs	r0, r0, #5
    a636:	d0e7      	beq.n	a608 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc>
    a638:	4d83      	ldr	r5, [pc, #524]	; (a848 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x24c>)
    a63a:	4c84      	ldr	r4, [pc, #528]	; (a84c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x250>)
    a63c:	f04f 0b01 	mov.w	fp, #1
    a640:	2700      	movs	r7, #0
    a642:	b125      	cbz	r5, a64e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x52>
    a644:	2100      	movs	r1, #0
    a646:	f240 50e5 	movw	r0, #1509	; 0x5e5
    a64a:	f3af 8000 	nop.w
    a64e:	f894 a031 	ldrb.w	sl, [r4, #49]	; 0x31
    a652:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
    a656:	f04f 0900 	mov.w	r9, #0
    a65a:	b125      	cbz	r5, a666 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x6a>
    a65c:	2100      	movs	r1, #0
    a65e:	f240 50ea 	movw	r0, #1514	; 0x5ea
    a662:	f3af 8000 	nop.w
    a666:	487a      	ldr	r0, [pc, #488]	; (a850 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x254>)
    a668:	ea2b 080a 	bic.w	r8, fp, sl
    a66c:	eb00 118a 	add.w	r1, r0, sl, lsl #6
    a670:	eb00 1088 	add.w	r0, r0, r8, lsl #6
    a674:	2240      	movs	r2, #64	; 0x40
    a676:	f005 fffa 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    a67a:	b125      	cbz	r5, a686 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x8a>
    a67c:	2100      	movs	r1, #0
    a67e:	f240 505e 	movw	r0, #1374	; 0x55e
    a682:	f3af 8000 	nop.w
    a686:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    a68a:	eb08 0048 	add.w	r0, r8, r8, lsl #1
    a68e:	4421      	add	r1, r4
    a690:	4420      	add	r0, r4
    a692:	8c0a      	ldrh	r2, [r1, #32]
    a694:	8402      	strh	r2, [r0, #32]
    a696:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    a69a:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    a69e:	b125      	cbz	r5, a6aa <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xae>
    a6a0:	2100      	movs	r1, #0
    a6a2:	f240 5062 	movw	r0, #1378	; 0x562
    a6a6:	f3af 8000 	nop.w
    a6aa:	b125      	cbz	r5, a6b6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xba>
    a6ac:	2100      	movs	r1, #0
    a6ae:	f240 50ef 	movw	r0, #1519	; 0x5ef
    a6b2:	f3af 8000 	nop.w
    a6b6:	a808      	add	r0, sp, #32
    a6b8:	f000 ff08 	bl	b4cc <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    a6bc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    a6c0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    a6c4:	4643      	mov	r3, r8
    a6c6:	466a      	mov	r2, sp
    a6c8:	4631      	mov	r1, r6
    a6ca:	a80a      	add	r0, sp, #40	; 0x28
    a6cc:	f7ff f852 	bl	9774 <MPSL_IRQ_RADIO_Handler+0xaa8>
    a6d0:	b125      	cbz	r5, a6dc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xe0>
    a6d2:	2100      	movs	r1, #0
    a6d4:	f240 50f5 	movw	r0, #1525	; 0x5f5
    a6d8:	f3af 8000 	nop.w
    a6dc:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    a6e0:	2820      	cmp	r0, #32
    a6e2:	d01a      	beq.n	a71a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x11e>
    a6e4:	68e0      	ldr	r0, [r4, #12]
    a6e6:	9900      	ldr	r1, [sp, #0]
    a6e8:	1a09      	subs	r1, r1, r0
    a6ea:	0209      	lsls	r1, r1, #8
    a6ec:	17ca      	asrs	r2, r1, #31
    a6ee:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    a6f2:	1209      	asrs	r1, r1, #8
    a6f4:	d511      	bpl.n	a71a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x11e>
    a6f6:	9900      	ldr	r1, [sp, #0]
    a6f8:	4281      	cmp	r1, r0
    a6fa:	d902      	bls.n	a702 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x106>
    a6fc:	9902      	ldr	r1, [sp, #8]
    a6fe:	1c49      	adds	r1, r1, #1
    a700:	9102      	str	r1, [sp, #8]
    a702:	e9dd 2100 	ldrd	r2, r1, [sp]
    a706:	1a89      	subs	r1, r1, r2
    a708:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    a70c:	4408      	add	r0, r1
    a70e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a712:	e9cd 2000 	strd	r2, r0, [sp]
    a716:	f04f 0901 	mov.w	r9, #1
    a71a:	b125      	cbz	r5, a726 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x12a>
    a71c:	2100      	movs	r1, #0
    a71e:	f240 50ff 	movw	r0, #1535	; 0x5ff
    a722:	f3af 8000 	nop.w
    a726:	9900      	ldr	r1, [sp, #0]
    a728:	980a      	ldr	r0, [sp, #40]	; 0x28
    a72a:	9a01      	ldr	r2, [sp, #4]
    a72c:	1a09      	subs	r1, r1, r0
    a72e:	1a10      	subs	r0, r2, r0
    a730:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    a734:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a738:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    a73c:	bf98      	it	ls
    a73e:	f5b0 0f00 	cmpls.w	r0, #8388608	; 0x800000
    a742:	d809      	bhi.n	a758 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x15c>
    a744:	4643      	mov	r3, r8
    a746:	4669      	mov	r1, sp
    a748:	4842      	ldr	r0, [pc, #264]	; (a854 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x258>)
    a74a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a74c:	f7fe fb1a 	bl	8d84 <MPSL_IRQ_RADIO_Handler+0xb8>
    a750:	ea59 0000 	orrs.w	r0, r9, r0
    a754:	d129      	bne.n	a7aa <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1ae>
    a756:	e042      	b.n	a7de <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1e2>
    a758:	980b      	ldr	r0, [sp, #44]	; 0x2c
    a75a:	f8bd a00e 	ldrh.w	sl, [sp, #14]
    a75e:	9002      	str	r0, [sp, #8]
    a760:	aa09      	add	r2, sp, #36	; 0x24
    a762:	a907      	add	r1, sp, #28
    a764:	4650      	mov	r0, sl
    a766:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    a76a:	f000 fd3f 	bl	b1ec <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    a76e:	f001 fa7b 	bl	bc68 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    a772:	f000 fd1f 	bl	b1b4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    a776:	4681      	mov	r9, r0
    a778:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    a77c:	2820      	cmp	r0, #32
    a77e:	d03b      	beq.n	a7f8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1fc>
    a780:	68e0      	ldr	r0, [r4, #12]
    a782:	1d40      	adds	r0, r0, #5
    a784:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a788:	9900      	ldr	r1, [sp, #0]
    a78a:	4281      	cmp	r1, r0
    a78c:	d902      	bls.n	a794 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x198>
    a78e:	9902      	ldr	r1, [sp, #8]
    a790:	1c49      	adds	r1, r1, #1
    a792:	9102      	str	r1, [sp, #8]
    a794:	e9dd 2100 	ldrd	r2, r1, [sp]
    a798:	1a89      	subs	r1, r1, r2
    a79a:	9000      	str	r0, [sp, #0]
    a79c:	4408      	add	r0, r1
    a79e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a7a2:	9001      	str	r0, [sp, #4]
    a7a4:	201f      	movs	r0, #31
    a7a6:	f88d 000c 	strb.w	r0, [sp, #12]
    a7aa:	9800      	ldr	r0, [sp, #0]
    a7ac:	f005 fdcc 	bl	10348 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    a7b0:	1c41      	adds	r1, r0, #1
    a7b2:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    a7b6:	f89d 200c 	ldrb.w	r2, [sp, #12]
    a7ba:	4410      	add	r0, r2
    a7bc:	4408      	add	r0, r1
    a7be:	e9c6 0704 	strd	r0, r7, [r6, #16]
    a7c2:	b125      	cbz	r5, a7ce <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1d2>
    a7c4:	2100      	movs	r1, #0
    a7c6:	f240 601a 	movw	r0, #1562	; 0x61a
    a7ca:	f3af 8000 	nop.w
    a7ce:	e9d6 1004 	ldrd	r1, r0, [r6, #16]
    a7d2:	4a21      	ldr	r2, [pc, #132]	; (a858 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x25c>)
    a7d4:	9b02      	ldr	r3, [sp, #8]
    a7d6:	fbe3 1002 	umlal	r1, r0, r3, r2
    a7da:	e9c6 1004 	strd	r1, r0, [r6, #16]
    a7de:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    a7e2:	f88d 0014 	strb.w	r0, [sp, #20]
    a7e6:	f89d 0014 	ldrb.w	r0, [sp, #20]
    a7ea:	2800      	cmp	r0, #0
    a7ec:	f47f af29 	bne.w	a642 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x46>
    a7f0:	b00d      	add	sp, #52	; 0x34
    a7f2:	2001      	movs	r0, #1
    a7f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a7f8:	f108 0809 	add.w	r8, r8, #9
    a7fc:	f1ba 0f00 	cmp.w	sl, #0
    a800:	d016      	beq.n	a830 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x234>
    a802:	f001 fd31 	bl	c268 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    a806:	b998      	cbnz	r0, a830 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x234>
    a808:	f001 fc06 	bl	c018 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    a80c:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    a810:	bf08      	it	eq
    a812:	200d      	moveq	r0, #13
    a814:	d00b      	beq.n	a82e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x232>
    a816:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    a81a:	3856      	subs	r0, #86	; 0x56
    a81c:	bf08      	it	eq
    a81e:	201c      	moveq	r0, #28
    a820:	d005      	beq.n	a82e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x232>
    a822:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    a826:	389f      	subs	r0, #159	; 0x9f
    a828:	bf14      	ite	ne
    a82a:	4638      	movne	r0, r7
    a82c:	2032      	moveq	r0, #50	; 0x32
    a82e:	4480      	add	r8, r0
    a830:	9807      	ldr	r0, [sp, #28]
    a832:	4581      	cmp	r9, r0
    a834:	bf84      	itt	hi
    a836:	eba9 0000 	subhi.w	r0, r9, r0
    a83a:	4480      	addhi	r8, r0
    a83c:	f028 407f 	bic.w	r0, r8, #4278190080	; 0xff000000
    a840:	e7a2      	b.n	a788 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x18c>
    a842:	0000      	.short	0x0000
    a844:	e000ed04 	.word	0xe000ed04
    a848:	00000000 	.word	0x00000000
    a84c:	2000149c 	.word	0x2000149c
    a850:	2000141c 	.word	0x2000141c
    a854:	0f424000 	.word	0x0f424000
    a858:	1e848000 	.word	0x1e848000

0000a85c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    a85c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a860:	4d92      	ldr	r5, [pc, #584]	; (aaac <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x250>)
    a862:	b08c      	sub	sp, #48	; 0x30
    a864:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
    a868:	2000      	movs	r0, #0
    a86a:	9008      	str	r0, [sp, #32]
    a86c:	9006      	str	r0, [sp, #24]
    a86e:	2001      	movs	r0, #1
    a870:	4c8f      	ldr	r4, [pc, #572]	; (aab0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x254>)
    a872:	f1a5 0980 	sub.w	r9, r5, #128	; 0x80
    a876:	f04f 0800 	mov.w	r8, #0
    a87a:	4607      	mov	r7, r0
    a87c:	9007      	str	r0, [sp, #28]
    a87e:	b124      	cbz	r4, a88a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2e>
    a880:	2100      	movs	r1, #0
    a882:	f240 70e4 	movw	r0, #2020	; 0x7e4
    a886:	f3af 8000 	nop.w
    a88a:	9807      	ldr	r0, [sp, #28]
    a88c:	2800      	cmp	r0, #0
    a88e:	d03c      	beq.n	a90a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xae>
    a890:	f885 8029 	strb.w	r8, [r5, #41]	; 0x29
    a894:	b124      	cbz	r4, a8a0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x44>
    a896:	2100      	movs	r1, #0
    a898:	f240 70e9 	movw	r0, #2025	; 0x7e9
    a89c:	f3af 8000 	nop.w
    a8a0:	f895 a031 	ldrb.w	sl, [r5, #49]	; 0x31
    a8a4:	2240      	movs	r2, #64	; 0x40
    a8a6:	ea27 060a 	bic.w	r6, r7, sl
    a8aa:	eb09 1086 	add.w	r0, r9, r6, lsl #6
    a8ae:	eb09 118a 	add.w	r1, r9, sl, lsl #6
    a8b2:	4683      	mov	fp, r0
    a8b4:	f005 fedb 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    a8b8:	b124      	cbz	r4, a8c4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x68>
    a8ba:	2100      	movs	r1, #0
    a8bc:	f240 505e 	movw	r0, #1374	; 0x55e
    a8c0:	f3af 8000 	nop.w
    a8c4:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    a8c8:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    a8cc:	4428      	add	r0, r5
    a8ce:	4429      	add	r1, r5
    a8d0:	9000      	str	r0, [sp, #0]
    a8d2:	8c0a      	ldrh	r2, [r1, #32]
    a8d4:	8402      	strh	r2, [r0, #32]
    a8d6:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    a8da:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    a8de:	b124      	cbz	r4, a8ea <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x8e>
    a8e0:	2100      	movs	r1, #0
    a8e2:	f240 5062 	movw	r0, #1378	; 0x562
    a8e6:	f3af 8000 	nop.w
    a8ea:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    a8ee:	f88d 0008 	strb.w	r0, [sp, #8]
    a8f2:	f89d 0008 	ldrb.w	r0, [sp, #8]
    a8f6:	b178      	cbz	r0, a918 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xbc>
    a8f8:	2c00      	cmp	r4, #0
    a8fa:	bf1c      	itt	ne
    a8fc:	2100      	movne	r1, #0
    a8fe:	f240 70ef 	movwne	r0, #2031	; 0x7ef
    a902:	d0bc      	beq.n	a87e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    a904:	f3af 8000 	nop.w
    a908:	e7b9      	b.n	a87e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    a90a:	486a      	ldr	r0, [pc, #424]	; (aab4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x258>)
    a90c:	2800      	cmp	r0, #0
    a90e:	bf18      	it	ne
    a910:	f3af 8000 	nopne.w
    a914:	b662      	cpsie	i
    a916:	e7bb      	b.n	a890 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x34>
    a918:	b124      	cbz	r4, a924 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xc8>
    a91a:	2100      	movs	r1, #0
    a91c:	f240 70f3 	movw	r0, #2035	; 0x7f3
    a920:	f3af 8000 	nop.w
    a924:	980c      	ldr	r0, [sp, #48]	; 0x30
    a926:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    a92a:	2803      	cmp	r0, #3
    a92c:	d17e      	bne.n	aa2c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d0>
    a92e:	9a00      	ldr	r2, [sp, #0]
    a930:	990c      	ldr	r1, [sp, #48]	; 0x30
    a932:	f892 0020 	ldrb.w	r0, [r2, #32]
    a936:	4288      	cmp	r0, r1
    a938:	bf14      	ite	ne
    a93a:	f04f 0a00 	movne.w	sl, #0
    a93e:	f04f 0a01 	moveq.w	sl, #1
    a942:	f102 0c20 	add.w	ip, r2, #32
    a946:	4683      	mov	fp, r0
    a948:	2220      	movs	r2, #32
    a94a:	eb09 1386 	add.w	r3, r9, r6, lsl #6
    a94e:	e003      	b.n	a958 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xfc>
    a950:	4602      	mov	r2, r0
    a952:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    a956:	7840      	ldrb	r0, [r0, #1]
    a958:	4288      	cmp	r0, r1
    a95a:	d002      	beq.n	a962 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x106>
    a95c:	2820      	cmp	r0, #32
    a95e:	d00a      	beq.n	a976 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    a960:	e7f6      	b.n	a950 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf4>
    a962:	2820      	cmp	r0, #32
    a964:	d007      	beq.n	a976 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    a966:	4583      	cmp	fp, r0
    a968:	d107      	bne.n	a97a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11e>
    a96a:	eb03 004b 	add.w	r0, r3, fp, lsl #1
    a96e:	7840      	ldrb	r0, [r0, #1]
    a970:	f88c 0000 	strb.w	r0, [ip]
    a974:	e007      	b.n	a986 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x12a>
    a976:	4640      	mov	r0, r8
    a978:	e00c      	b.n	a994 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x138>
    a97a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    a97e:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    a982:	7840      	ldrb	r0, [r0, #1]
    a984:	7048      	strb	r0, [r1, #1]
    a986:	b124      	cbz	r4, a992 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x136>
    a988:	2100      	movs	r1, #0
    a98a:	f240 40c9 	movw	r0, #1225	; 0x4c9
    a98e:	f3af 8000 	nop.w
    a992:	4638      	mov	r0, r7
    a994:	46c3      	mov	fp, r8
    a996:	ea10 0f0a 	tst.w	r0, sl
    a99a:	bf18      	it	ne
    a99c:	46bb      	movne	fp, r7
    a99e:	2800      	cmp	r0, #0
    a9a0:	d04e      	beq.n	aa40 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
    a9a2:	b124      	cbz	r4, a9ae <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x152>
    a9a4:	2100      	movs	r1, #0
    a9a6:	f44f 60ff 	mov.w	r0, #2040	; 0x7f8
    a9aa:	f3af 8000 	nop.w
    a9ae:	4632      	mov	r2, r6
    a9b0:	2001      	movs	r0, #1
    a9b2:	990c      	ldr	r1, [sp, #48]	; 0x30
    a9b4:	f7ff f8f2 	bl	9b9c <MPSL_IRQ_RADIO_Handler+0xed0>
    a9b8:	b124      	cbz	r4, a9c4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x168>
    a9ba:	2100      	movs	r1, #0
    a9bc:	f640 0001 	movw	r0, #2049	; 0x801
    a9c0:	f3af 8000 	nop.w
    a9c4:	483c      	ldr	r0, [pc, #240]	; (aab8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x25c>)
    a9c6:	2800      	cmp	r0, #0
    a9c8:	bf18      	it	ne
    a9ca:	f3af 8000 	nopne.w
    a9ce:	f3ef 8010 	mrs	r0, PRIMASK
    a9d2:	b672      	cpsid	i
    a9d4:	9007      	str	r0, [sp, #28]
    a9d6:	b124      	cbz	r4, a9e2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x186>
    a9d8:	2100      	movs	r1, #0
    a9da:	f640 0006 	movw	r0, #2054	; 0x806
    a9de:	f3af 8000 	nop.w
    a9e2:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    a9e6:	f88d 0008 	strb.w	r0, [sp, #8]
    a9ea:	f89d 0008 	ldrb.w	r0, [sp, #8]
    a9ee:	b138      	cbz	r0, aa00 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1a4>
    a9f0:	2c00      	cmp	r4, #0
    a9f2:	bf1c      	itt	ne
    a9f4:	2100      	movne	r1, #0
    a9f6:	f640 000a 	movwne	r0, #2058	; 0x80a
    a9fa:	f43f af40 	beq.w	a87e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    a9fe:	e781      	b.n	a904 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa8>
    aa00:	f1bb 0f00 	cmp.w	fp, #0
    aa04:	d009      	beq.n	aa1a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
    aa06:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
    aa0a:	2820      	cmp	r0, #32
    aa0c:	d105      	bne.n	aa1a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
    aa0e:	4631      	mov	r1, r6
    aa10:	2002      	movs	r0, #2
    aa12:	f7ff f8f5 	bl	9c00 <MPSL_IRQ_RADIO_Handler+0xf34>
    aa16:	9006      	str	r0, [sp, #24]
    aa18:	b1f8      	cbz	r0, aa5a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1fe>
    aa1a:	b124      	cbz	r4, aa26 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ca>
    aa1c:	2100      	movs	r1, #0
    aa1e:	f640 001e 	movw	r0, #2078	; 0x81e
    aa22:	f3af 8000 	nop.w
    aa26:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
    aa2a:	e000      	b.n	aa2e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d2>
    aa2c:	e008      	b.n	aa40 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
    aa2e:	ea27 0000 	bic.w	r0, r7, r0
    aa32:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
    aa36:	20ff      	movs	r0, #255	; 0xff
    aa38:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    aa3c:	2001      	movs	r0, #1
    aa3e:	9008      	str	r0, [sp, #32]
    aa40:	b124      	cbz	r4, aa4c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f0>
    aa42:	2100      	movs	r1, #0
    aa44:	f640 0027 	movw	r0, #2087	; 0x827
    aa48:	f3af 8000 	nop.w
    aa4c:	9806      	ldr	r0, [sp, #24]
    aa4e:	4e1b      	ldr	r6, [pc, #108]	; (aabc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x260>)
    aa50:	2802      	cmp	r0, #2
    aa52:	d009      	beq.n	aa68 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20c>
    aa54:	2801      	cmp	r0, #1
    aa56:	d010      	beq.n	aa7a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x21e>
    aa58:	e014      	b.n	aa84 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    aa5a:	b19c      	cbz	r4, aa84 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    aa5c:	2100      	movs	r1, #0
    aa5e:	f640 0019 	movw	r0, #2073	; 0x819
    aa62:	f3af 8000 	nop.w
    aa66:	e7ec      	b.n	aa42 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    aa68:	f000 fd2a 	bl	b4c0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    aa6c:	68a9      	ldr	r1, [r5, #8]
    aa6e:	1a08      	subs	r0, r1, r0
    aa70:	f005 fc6a 	bl	10348 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    aa74:	6871      	ldr	r1, [r6, #4]
    aa76:	b921      	cbnz	r1, aa82 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x226>
    aa78:	e004      	b.n	aa84 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    aa7a:	6871      	ldr	r1, [r6, #4]
    aa7c:	f04f 30ff 	mov.w	r0, #4294967295
    aa80:	b101      	cbz	r1, aa84 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    aa82:	4788      	blx	r1
    aa84:	9807      	ldr	r0, [sp, #28]
    aa86:	b148      	cbz	r0, aa9c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x240>
    aa88:	b124      	cbz	r4, aa94 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x238>
    aa8a:	2100      	movs	r1, #0
    aa8c:	f640 003c 	movw	r0, #2108	; 0x83c
    aa90:	f3af 8000 	nop.w
    aa94:	9808      	ldr	r0, [sp, #32]
    aa96:	b00d      	add	sp, #52	; 0x34
    aa98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aa9c:	4805      	ldr	r0, [pc, #20]	; (aab4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x258>)
    aa9e:	2800      	cmp	r0, #0
    aaa0:	bf18      	it	ne
    aaa2:	f3af 8000 	nopne.w
    aaa6:	b662      	cpsie	i
    aaa8:	e7ee      	b.n	aa88 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22c>
    aaaa:	0000      	.short	0x0000
    aaac:	2000149c 	.word	0x2000149c
	...
    aabc:	200002d0 	.word	0x200002d0

0000aac0 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    aac0:	b510      	push	{r4, lr}
    aac2:	2820      	cmp	r0, #32
    aac4:	d211      	bcs.n	aaea <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    aac6:	490e      	ldr	r1, [pc, #56]	; (ab00 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    aac8:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    aacc:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    aad0:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    aad4:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    aad8:	b13b      	cbz	r3, aaea <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    aada:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    aade:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    aae2:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    aae6:	2a01      	cmp	r2, #1
    aae8:	d001      	beq.n	aaee <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    aaea:	2000      	movs	r0, #0
    aaec:	bd10      	pop	{r4, pc}
    aaee:	f891 2031 	ldrb.w	r2, [r1, #49]	; 0x31
    aaf2:	4601      	mov	r1, r0
    aaf4:	2000      	movs	r0, #0
    aaf6:	f7ff f851 	bl	9b9c <MPSL_IRQ_RADIO_Handler+0xed0>
    aafa:	2001      	movs	r0, #1
    aafc:	bd10      	pop	{r4, pc}
    aafe:	0000      	.short	0x0000
    ab00:	2000149c 	.word	0x2000149c

0000ab04 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    ab04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ab08:	4e86      	ldr	r6, [pc, #536]	; (ad24 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x220>)
    ab0a:	4680      	mov	r8, r0
    ab0c:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
    ab10:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    ab14:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    ab18:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    ab1c:	2800      	cmp	r0, #0
    ab1e:	d071      	beq.n	ac04 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    ab20:	f896 9031 	ldrb.w	r9, [r6, #49]	; 0x31
    ab24:	4d80      	ldr	r5, [pc, #512]	; (ad28 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x224>)
    ab26:	b125      	cbz	r5, ab32 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    ab28:	2100      	movs	r1, #0
    ab2a:	f640 30b9 	movw	r0, #3001	; 0xbb9
    ab2e:	f3af 8000 	nop.w
    ab32:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    ab36:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    ab3a:	2801      	cmp	r0, #1
    ab3c:	d018      	beq.n	ab70 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    ab3e:	b2c0      	uxtb	r0, r0
    ab40:	2804      	cmp	r0, #4
    ab42:	bf1c      	itt	ne
    ab44:	2805      	cmpne	r0, #5
    ab46:	2806      	cmpne	r0, #6
    ab48:	d061      	beq.n	ac0e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x10a>
    ab4a:	b12d      	cbz	r5, ab58 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    ab4c:	f04f 0100 	mov.w	r1, #0
    ab50:	f640 30c5 	movw	r0, #3013	; 0xbc5
    ab54:	f3af 8000 	nop.w
    ab58:	f005 fd2c 	bl	105b4 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    ab5c:	b125      	cbz	r5, ab68 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    ab5e:	2100      	movs	r1, #0
    ab60:	f640 30c9 	movw	r0, #3017	; 0xbc9
    ab64:	f3af 8000 	nop.w
    ab68:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    ab6c:	2801      	cmp	r0, #1
    ab6e:	d1e6      	bne.n	ab3e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    ab70:	2401      	movs	r4, #1
    ab72:	b125      	cbz	r5, ab7e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    ab74:	2100      	movs	r1, #0
    ab76:	f44f 603d 	mov.w	r0, #3024	; 0xbd0
    ab7a:	f3af 8000 	nop.w
    ab7e:	2c00      	cmp	r4, #0
    ab80:	d04b      	beq.n	ac1a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x116>
    ab82:	2000      	movs	r0, #0
    ab84:	f886 0029 	strb.w	r0, [r6, #41]	; 0x29
    ab88:	b125      	cbz	r5, ab94 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    ab8a:	2100      	movs	r1, #0
    ab8c:	f640 30d5 	movw	r0, #3029	; 0xbd5
    ab90:	f3af 8000 	nop.w
    ab94:	f896 b031 	ldrb.w	fp, [r6, #49]	; 0x31
    ab98:	2001      	movs	r0, #1
    ab9a:	ea20 090b 	bic.w	r9, r0, fp
    ab9e:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    aba2:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    aba6:	2240      	movs	r2, #64	; 0x40
    aba8:	f005 fd61 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    abac:	b125      	cbz	r5, abb8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    abae:	2100      	movs	r1, #0
    abb0:	f240 505e 	movw	r0, #1374	; 0x55e
    abb4:	f3af 8000 	nop.w
    abb8:	eb09 0049 	add.w	r0, r9, r9, lsl #1
    abbc:	eb00 0a06 	add.w	sl, r0, r6
    abc0:	eb0b 004b 	add.w	r0, fp, fp, lsl #1
    abc4:	4430      	add	r0, r6
    abc6:	8c01      	ldrh	r1, [r0, #32]
    abc8:	f8aa 1020 	strh.w	r1, [sl, #32]
    abcc:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    abd0:	f88a 0022 	strb.w	r0, [sl, #34]	; 0x22
    abd4:	b125      	cbz	r5, abe0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xdc>
    abd6:	2100      	movs	r1, #0
    abd8:	f240 5062 	movw	r0, #1378	; 0x562
    abdc:	f3af 8000 	nop.w
    abe0:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
    abe4:	f88d 0000 	strb.w	r0, [sp]
    abe8:	f89d 0000 	ldrb.w	r0, [sp]
    abec:	b1e0      	cbz	r0, ac28 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x124>
    abee:	2d00      	cmp	r5, #0
    abf0:	bf1c      	itt	ne
    abf2:	2100      	movne	r1, #0
    abf4:	f640 30db 	movwne	r0, #3035	; 0xbdb
    abf8:	d0bb      	beq.n	ab72 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    abfa:	bf00      	nop
    abfc:	f3af 8000 	nop.w
    ac00:	e7b7      	b.n	ab72 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    ac02:	e7ff      	b.n	ac04 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    ac04:	f44f 613b 	mov.w	r1, #2992	; 0xbb0
    ac08:	2070      	movs	r0, #112	; 0x70
    ac0a:	f001 fba5 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ac0e:	464a      	mov	r2, r9
    ac10:	4641      	mov	r1, r8
    ac12:	2001      	movs	r0, #1
    ac14:	f7fe ffc2 	bl	9b9c <MPSL_IRQ_RADIO_Handler+0xed0>
    ac18:	e7a0      	b.n	ab5c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    ac1a:	4844      	ldr	r0, [pc, #272]	; (ad2c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    ac1c:	2800      	cmp	r0, #0
    ac1e:	bf18      	it	ne
    ac20:	f3af 8000 	nopne.w
    ac24:	b662      	cpsie	i
    ac26:	e7ac      	b.n	ab82 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    ac28:	b125      	cbz	r5, ac34 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x130>
    ac2a:	2100      	movs	r1, #0
    ac2c:	f640 30df 	movw	r0, #3039	; 0xbdf
    ac30:	f3af 8000 	nop.w
    ac34:	f89a 3021 	ldrb.w	r3, [sl, #33]	; 0x21
    ac38:	f10a 0121 	add.w	r1, sl, #33	; 0x21
    ac3c:	4640      	mov	r0, r8
    ac3e:	461c      	mov	r4, r3
    ac40:	f04f 0b20 	mov.w	fp, #32
    ac44:	eb07 1289 	add.w	r2, r7, r9, lsl #6
    ac48:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
    ac4c:	e004      	b.n	ac58 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x154>
    ac4e:	46a3      	mov	fp, r4
    ac50:	eb02 0c4b 	add.w	ip, r2, fp, lsl #1
    ac54:	f89c 4001 	ldrb.w	r4, [ip, #1]
    ac58:	4284      	cmp	r4, r0
    ac5a:	d002      	beq.n	ac62 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15e>
    ac5c:	2c20      	cmp	r4, #32
    ac5e:	d02b      	beq.n	acb8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    ac60:	e7f5      	b.n	ac4e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x14a>
    ac62:	2c20      	cmp	r4, #32
    ac64:	d028      	beq.n	acb8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    ac66:	42a3      	cmp	r3, r4
    ac68:	d104      	bne.n	ac74 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x170>
    ac6a:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    ac6e:	7840      	ldrb	r0, [r0, #1]
    ac70:	7008      	strb	r0, [r1, #0]
    ac72:	e005      	b.n	ac80 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x17c>
    ac74:	eb02 0044 	add.w	r0, r2, r4, lsl #1
    ac78:	eb02 014b 	add.w	r1, r2, fp, lsl #1
    ac7c:	7840      	ldrb	r0, [r0, #1]
    ac7e:	7048      	strb	r0, [r1, #1]
    ac80:	f1ba 0f00 	cmp.w	sl, #0
    ac84:	d011      	beq.n	acaa <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    ac86:	b125      	cbz	r5, ac92 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    ac88:	2100      	movs	r1, #0
    ac8a:	f240 40c1 	movw	r0, #1217	; 0x4c1
    ac8e:	f3af 8000 	nop.w
    ac92:	f89a 0000 	ldrb.w	r0, [sl]
    ac96:	42a0      	cmp	r0, r4
    ac98:	d107      	bne.n	acaa <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    ac9a:	b125      	cbz	r5, aca6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a2>
    ac9c:	2100      	movs	r1, #0
    ac9e:	f240 40c4 	movw	r0, #1220	; 0x4c4
    aca2:	f3af 8000 	nop.w
    aca6:	f88a b000 	strb.w	fp, [sl]
    acaa:	b15d      	cbz	r5, acc4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    acac:	2100      	movs	r1, #0
    acae:	f240 40c9 	movw	r0, #1225	; 0x4c9
    acb2:	f3af 8000 	nop.w
    acb6:	e000      	b.n	acba <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b6>
    acb8:	b125      	cbz	r5, acc4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    acba:	2100      	movs	r1, #0
    acbc:	f640 30e3 	movw	r0, #3043	; 0xbe3
    acc0:	f3af 8000 	nop.w
    acc4:	481a      	ldr	r0, [pc, #104]	; (ad30 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x22c>)
    acc6:	2800      	cmp	r0, #0
    acc8:	bf18      	it	ne
    acca:	f3af 8000 	nopne.w
    acce:	f3ef 8410 	mrs	r4, PRIMASK
    acd2:	b672      	cpsid	i
    acd4:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
    acd8:	f88d 0000 	strb.w	r0, [sp]
    acdc:	f89d 0000 	ldrb.w	r0, [sp]
    ace0:	b138      	cbz	r0, acf2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1ee>
    ace2:	2d00      	cmp	r5, #0
    ace4:	bf1c      	itt	ne
    ace6:	2100      	movne	r1, #0
    ace8:	f640 30e9 	movwne	r0, #3049	; 0xbe9
    acec:	f43f af41 	beq.w	ab72 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    acf0:	e784      	b.n	abfc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    acf2:	f886 9031 	strb.w	r9, [r6, #49]	; 0x31
    acf6:	20ff      	movs	r0, #255	; 0xff
    acf8:	f886 0029 	strb.w	r0, [r6, #41]	; 0x29
    acfc:	b154      	cbz	r4, ad14 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>
    acfe:	2d00      	cmp	r5, #0
    ad00:	bf08      	it	eq
    ad02:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ad06:	2100      	movs	r1, #0
    ad08:	f640 30f6 	movw	r0, #3062	; 0xbf6
    ad0c:	f3af 8000 	nop.w
    ad10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ad14:	4805      	ldr	r0, [pc, #20]	; (ad2c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    ad16:	2800      	cmp	r0, #0
    ad18:	bf18      	it	ne
    ad1a:	f3af 8000 	nopne.w
    ad1e:	b662      	cpsie	i
    ad20:	e7ed      	b.n	acfe <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
    ad22:	0000      	.short	0x0000
    ad24:	2000149c 	.word	0x2000149c
	...

0000ad34 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    ad34:	b570      	push	{r4, r5, r6, lr}
    ad36:	460d      	mov	r5, r1
    ad38:	4606      	mov	r6, r0
    ad3a:	f001 fa83 	bl	c244 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    ad3e:	480f      	ldr	r0, [pc, #60]	; (ad7c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x48>)
    ad40:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
    ad44:	2400      	movs	r4, #0
    ad46:	3880      	subs	r0, #128	; 0x80
    ad48:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    ad4c:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    ad50:	b129      	cbz	r1, ad5e <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    ad52:	1c61      	adds	r1, r4, #1
    ad54:	b2cc      	uxtb	r4, r1
    ad56:	2c20      	cmp	r4, #32
    ad58:	d3f8      	bcc.n	ad4c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    ad5a:	2020      	movs	r0, #32
    ad5c:	bd70      	pop	{r4, r5, r6, pc}
    ad5e:	4808      	ldr	r0, [pc, #32]	; (ad80 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x4c>)
    ad60:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    ad64:	f840 6021 	str.w	r6, [r0, r1, lsl #2]
    ad68:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    ad6c:	4621      	mov	r1, r4
    ad6e:	6045      	str	r5, [r0, #4]
    ad70:	2001      	movs	r0, #1
    ad72:	f7fe ff13 	bl	9b9c <MPSL_IRQ_RADIO_Handler+0xed0>
    ad76:	4620      	mov	r0, r4
    ad78:	bd70      	pop	{r4, r5, r6, pc}
    ad7a:	0000      	.short	0x0000
    ad7c:	2000149c 	.word	0x2000149c
    ad80:	2000109c 	.word	0x2000109c

0000ad84 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    ad84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ad88:	b083      	sub	sp, #12
    ad8a:	f000 fb99 	bl	b4c0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    ad8e:	4605      	mov	r5, r0
    ad90:	f000 fe7c 	bl	ba8c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    ad94:	4c84      	ldr	r4, [pc, #528]	; (afa8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x224>)
    ad96:	6860      	ldr	r0, [r4, #4]
    ad98:	f1b0 3fff 	cmp.w	r0, #4294967295
    ad9c:	bf1c      	itt	ne
    ad9e:	f04f 30ff 	movne.w	r0, #4294967295
    ada2:	6060      	strne	r0, [r4, #4]
    ada4:	7fa0      	ldrb	r0, [r4, #30]
    ada6:	f8df 9204 	ldr.w	r9, [pc, #516]	; afac <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x228>
    adaa:	b990      	cbnz	r0, add2 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x4e>
    adac:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
    adb0:	1a40      	subs	r0, r0, r1
    adb2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    adb6:	f44f 710c 	mov.w	r1, #560	; 0x230
    adba:	f001 fa2f 	bl	c21c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    adbe:	68e1      	ldr	r1, [r4, #12]
    adc0:	4408      	add	r0, r1
    adc2:	1a28      	subs	r0, r5, r0
    adc4:	0200      	lsls	r0, r0, #8
    adc6:	17c1      	asrs	r1, r0, #31
    adc8:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    adcc:	1200      	asrs	r0, r0, #8
    adce:	0fc0      	lsrs	r0, r0, #31
    add0:	d012      	beq.n	adf8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x74>
    add2:	7e60      	ldrb	r0, [r4, #25]
    add4:	b320      	cbz	r0, ae20 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x9c>
    add6:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    adda:	f88d 0000 	strb.w	r0, [sp]
    adde:	f89d 0000 	ldrb.w	r0, [sp]
    ade2:	b1e8      	cbz	r0, ae20 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x9c>
    ade4:	f000 fcae 	bl	b744 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    ade8:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    adec:	b1f0      	cbz	r0, ae2c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa8>
    adee:	f240 31f5 	movw	r1, #1013	; 0x3f5
    adf2:	2070      	movs	r0, #112	; 0x70
    adf4:	f001 fab0 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    adf8:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    adfc:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
    ae00:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    ae04:	eb09 0080 	add.w	r0, r9, r0, lsl #2
    ae08:	6840      	ldr	r0, [r0, #4]
    ae0a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    ae0e:	f859 2021 	ldr.w	r2, [r9, r1, lsl #2]
    ae12:	2108      	movs	r1, #8
    ae14:	4790      	blx	r2
    ae16:	f240 31dd 	movw	r1, #989	; 0x3dd
    ae1a:	2070      	movs	r0, #112	; 0x70
    ae1c:	f001 fa9c 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ae20:	1ce8      	adds	r0, r5, #3
    ae22:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    ae26:	f000 fb71 	bl	b50c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    ae2a:	e7dd      	b.n	ade8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x64>
    ae2c:	2001      	movs	r0, #1
    ae2e:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    ae32:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    ae36:	2820      	cmp	r0, #32
    ae38:	d021      	beq.n	ae7e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xfa>
    ae3a:	f894 8032 	ldrb.w	r8, [r4, #50]	; 0x32
    ae3e:	2020      	movs	r0, #32
    ae40:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
    ae44:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
    ae48:	2000      	movs	r0, #0
    ae4a:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    ae4e:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    ae52:	6020      	str	r0, [r4, #0]
    ae54:	f000 ff0e 	bl	bc74 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>
    ae58:	7720      	strb	r0, [r4, #28]
    ae5a:	f894 6031 	ldrb.w	r6, [r4, #49]	; 0x31
    ae5e:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    ae62:	1907      	adds	r7, r0, r4
    ae64:	f897 0020 	ldrb.w	r0, [r7, #32]
    ae68:	2820      	cmp	r0, #32
    ae6a:	d058      	beq.n	af1e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    ae6c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    ae70:	eb09 0980 	add.w	r9, r9, r0, lsl #2
    ae74:	f899 001a 	ldrb.w	r0, [r9, #26]
    ae78:	2801      	cmp	r0, #1
    ae7a:	d005      	beq.n	ae88 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x104>
    ae7c:	e04f      	b.n	af1e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    ae7e:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    ae82:	2070      	movs	r0, #112	; 0x70
    ae84:	f001 fa68 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ae88:	f8b9 b016 	ldrh.w	fp, [r9, #22]
    ae8c:	aa01      	add	r2, sp, #4
    ae8e:	4669      	mov	r1, sp
    ae90:	4658      	mov	r0, fp
    ae92:	f000 f9ab 	bl	b1ec <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    ae96:	f000 fee7 	bl	bc68 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    ae9a:	f000 f98b 	bl	b1b4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    ae9e:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    aea2:	2820      	cmp	r0, #32
    aea4:	d004      	beq.n	aeb0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x12c>
    aea6:	68e0      	ldr	r0, [r4, #12]
    aea8:	1d40      	adds	r0, r0, #5
    aeaa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    aeae:	e01d      	b.n	aeec <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x168>
    aeb0:	f105 0a09 	add.w	sl, r5, #9
    aeb4:	f1bb 0f00 	cmp.w	fp, #0
    aeb8:	d016      	beq.n	aee8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x164>
    aeba:	f001 f9d5 	bl	c268 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    aebe:	b998      	cbnz	r0, aee8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x164>
    aec0:	f001 f8aa 	bl	c018 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    aec4:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    aec8:	bf08      	it	eq
    aeca:	200d      	moveq	r0, #13
    aecc:	d00b      	beq.n	aee6 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x162>
    aece:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    aed2:	3856      	subs	r0, #86	; 0x56
    aed4:	bf08      	it	eq
    aed6:	201c      	moveq	r0, #28
    aed8:	d005      	beq.n	aee6 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x162>
    aeda:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    aede:	389f      	subs	r0, #159	; 0x9f
    aee0:	bf14      	ite	ne
    aee2:	2000      	movne	r0, #0
    aee4:	2032      	moveq	r0, #50	; 0x32
    aee6:	4482      	add	sl, r0
    aee8:	f02a 407f 	bic.w	r0, sl, #4278190080	; 0xff000000
    aeec:	f8d9 2008 	ldr.w	r2, [r9, #8]
    aef0:	1a81      	subs	r1, r0, r2
    aef2:	0209      	lsls	r1, r1, #8
    aef4:	17cb      	asrs	r3, r1, #31
    aef6:	eb01 6113 	add.w	r1, r1, r3, lsr #24
    aefa:	1209      	asrs	r1, r1, #8
    aefc:	2900      	cmp	r1, #0
    aefe:	dc0e      	bgt.n	af1e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    af00:	f109 0308 	add.w	r3, r9, #8
    af04:	4282      	cmp	r2, r0
    af06:	d202      	bcs.n	af0e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x18a>
    af08:	6899      	ldr	r1, [r3, #8]
    af0a:	1e49      	subs	r1, r1, #1
    af0c:	6099      	str	r1, [r3, #8]
    af0e:	e9d3 2100 	ldrd	r2, r1, [r3]
    af12:	1a89      	subs	r1, r1, r2
    af14:	6018      	str	r0, [r3, #0]
    af16:	4408      	add	r0, r1
    af18:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    af1c:	6058      	str	r0, [r3, #4]
    af1e:	4631      	mov	r1, r6
    af20:	2001      	movs	r0, #1
    af22:	f7fe fe6d 	bl	9c00 <MPSL_IRQ_RADIO_Handler+0xf34>
    af26:	ea5f 0900 	movs.w	r9, r0
    af2a:	d0f8      	beq.n	af1e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    af2c:	4820      	ldr	r0, [pc, #128]	; (afb0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x22c>)
    af2e:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    af32:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    af36:	2802      	cmp	r0, #2
    af38:	d104      	bne.n	af44 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1c0>
    af3a:	4632      	mov	r2, r6
    af3c:	4641      	mov	r1, r8
    af3e:	2006      	movs	r0, #6
    af40:	f7fe fe2c 	bl	9b9c <MPSL_IRQ_RADIO_Handler+0xed0>
    af44:	20ff      	movs	r0, #255	; 0xff
    af46:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    af4a:	f897 0021 	ldrb.w	r0, [r7, #33]	; 0x21
    af4e:	4e19      	ldr	r6, [pc, #100]	; (afb4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x230>)
    af50:	2820      	cmp	r0, #32
    af52:	bf1c      	itt	ne
    af54:	7870      	ldrbne	r0, [r6, #1]
    af56:	f001 fad3 	blne	c500 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    af5a:	7f20      	ldrb	r0, [r4, #28]
    af5c:	b120      	cbz	r0, af68 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1e4>
    af5e:	f000 fe65 	bl	bc2c <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    af62:	2000      	movs	r0, #0
    af64:	7720      	strb	r0, [r4, #28]
    af66:	7760      	strb	r0, [r4, #29]
    af68:	f1b9 0f02 	cmp.w	r9, #2
    af6c:	d011      	beq.n	af92 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x20e>
    af6e:	f1b9 0f01 	cmp.w	r9, #1
    af72:	bf1c      	itt	ne
    af74:	b003      	addne	sp, #12
    af76:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    af7a:	f04f 30ff 	mov.w	r0, #4294967295
    af7e:	6871      	ldr	r1, [r6, #4]
    af80:	2900      	cmp	r1, #0
    af82:	bf04      	itt	eq
    af84:	b003      	addeq	sp, #12
    af86:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    af8a:	b003      	add	sp, #12
    af8c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    af90:	4708      	bx	r1
    af92:	68a0      	ldr	r0, [r4, #8]
    af94:	1b40      	subs	r0, r0, r5
    af96:	f005 f9d7 	bl	10348 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    af9a:	6871      	ldr	r1, [r6, #4]
    af9c:	2900      	cmp	r1, #0
    af9e:	d1f4      	bne.n	af8a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x206>
    afa0:	b003      	add	sp, #12
    afa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    afa6:	0000      	.short	0x0000
    afa8:	2000149c 	.word	0x2000149c
    afac:	2000109c 	.word	0x2000109c
    afb0:	2000141c 	.word	0x2000141c
    afb4:	200002d0 	.word	0x200002d0

0000afb8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    afb8:	b570      	push	{r4, r5, r6, lr}
    afba:	4c42      	ldr	r4, [pc, #264]	; (b0c4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x10c>)
    afbc:	4605      	mov	r5, r0
    afbe:	b082      	sub	sp, #8
    afc0:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    afc4:	2820      	cmp	r0, #32
    afc6:	d008      	beq.n	afda <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x22>
    afc8:	6860      	ldr	r0, [r4, #4]
    afca:	f1b0 3fff 	cmp.w	r0, #4294967295
    afce:	d009      	beq.n	afe4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2c>
    afd0:	f640 21e4 	movw	r1, #2788	; 0xae4
    afd4:	2070      	movs	r0, #112	; 0x70
    afd6:	f001 f9bf 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    afda:	f640 21e3 	movw	r1, #2787	; 0xae3
    afde:	2070      	movs	r0, #112	; 0x70
    afe0:	f001 f9ba 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    afe4:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    afe8:	4937      	ldr	r1, [pc, #220]	; (b0c8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x110>)
    afea:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    afee:	eb01 0680 	add.w	r6, r1, r0, lsl #2
    aff2:	68b0      	ldr	r0, [r6, #8]
    aff4:	f005 f9a8 	bl	10348 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    aff8:	4602      	mov	r2, r0
    affa:	8af0      	ldrh	r0, [r6, #22]
    affc:	7d31      	ldrb	r1, [r6, #20]
    affe:	4b33      	ldr	r3, [pc, #204]	; (b0cc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x114>)
    b000:	4408      	add	r0, r1
    b002:	1c40      	adds	r0, r0, #1
    b004:	1811      	adds	r1, r2, r0
    b006:	429a      	cmp	r2, r3
    b008:	d817      	bhi.n	b03a <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x82>
    b00a:	4a31      	ldr	r2, [pc, #196]	; (b0d0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x118>)
    b00c:	4290      	cmp	r0, r2
    b00e:	dc1b      	bgt.n	b048 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x90>
    b010:	f1c2 0c00 	rsb	ip, r2, #0
    b014:	4560      	cmp	r0, ip
    b016:	db1e      	blt.n	b056 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9e>
    b018:	0056      	lsls	r6, r2, #1
    b01a:	428e      	cmp	r6, r1
    b01c:	bfdc      	itt	le
    b01e:	f501 01f7 	addle.w	r1, r1, #8093696	; 0x7b8000
    b022:	f1a1 51f8 	suble.w	r1, r1, #520093696	; 0x1f000000
    b026:	dd05      	ble.n	b034 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    b028:	2900      	cmp	r1, #0
    b02a:	bfbc      	itt	lt
    b02c:	f5a1 01f7 	sublt.w	r1, r1, #8093696	; 0x7b8000
    b030:	f101 51f8 	addlt.w	r1, r1, #520093696	; 0x1f000000
    b034:	1948      	adds	r0, r1, r5
    b036:	4299      	cmp	r1, r3
    b038:	d904      	bls.n	b044 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x8c>
    b03a:	f240 519e 	movw	r1, #1438	; 0x59e
    b03e:	2070      	movs	r0, #112	; 0x70
    b040:	f001 f98a 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b044:	4295      	cmp	r5, r2
    b046:	dd04      	ble.n	b052 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9a>
    b048:	f240 519f 	movw	r1, #1439	; 0x59f
    b04c:	2070      	movs	r0, #112	; 0x70
    b04e:	f001 f983 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b052:	4565      	cmp	r5, ip
    b054:	da04      	bge.n	b060 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xa8>
    b056:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
    b05a:	2070      	movs	r0, #112	; 0x70
    b05c:	f001 f97c 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b060:	4286      	cmp	r6, r0
    b062:	bfdc      	itt	le
    b064:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    b068:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    b06c:	dd05      	ble.n	b07a <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc2>
    b06e:	2800      	cmp	r0, #0
    b070:	bfbc      	itt	lt
    b072:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    b076:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    b07a:	aa01      	add	r2, sp, #4
    b07c:	4669      	mov	r1, sp
    b07e:	f000 f8b5 	bl	b1ec <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    b082:	f89d 0004 	ldrb.w	r0, [sp, #4]
    b086:	280f      	cmp	r0, #15
    b088:	bf8c      	ite	hi
    b08a:	2001      	movhi	r0, #1
    b08c:	2000      	movls	r0, #0
    b08e:	9900      	ldr	r1, [sp, #0]
    b090:	4408      	add	r0, r1
    b092:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    b096:	6061      	str	r1, [r4, #4]
    b098:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    b09c:	f88d 0000 	strb.w	r0, [sp]
    b0a0:	f89d 0000 	ldrb.w	r0, [sp]
    b0a4:	2800      	cmp	r0, #0
    b0a6:	bf04      	itt	eq
    b0a8:	b002      	addeq	sp, #8
    b0aa:	bd70      	popeq	{r4, r5, r6, pc}
    b0ac:	2005      	movs	r0, #5
    b0ae:	f000 fbc7 	bl	b840 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    b0b2:	2800      	cmp	r0, #0
    b0b4:	bf1c      	itt	ne
    b0b6:	b002      	addne	sp, #8
    b0b8:	bd70      	popne	{r4, r5, r6, pc}
    b0ba:	f640 21eb 	movw	r1, #2795	; 0xaeb
    b0be:	2070      	movs	r0, #112	; 0x70
    b0c0:	f001 f94a 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b0c4:	2000149c 	.word	0x2000149c
    b0c8:	2000109c 	.word	0x2000109c
    b0cc:	1e847fff 	.word	0x1e847fff
    b0d0:	0f424000 	.word	0x0f424000

0000b0d4 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    b0d4:	b570      	push	{r4, r5, r6, lr}
    b0d6:	4c1c      	ldr	r4, [pc, #112]	; (b148 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x74>)
    b0d8:	2120      	movs	r1, #32
    b0da:	f884 1020 	strb.w	r1, [r4, #32]
    b0de:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    b0e2:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    b0e6:	2000      	movs	r0, #0
    b0e8:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
    b0ec:	f884 1032 	strb.w	r1, [r4, #50]	; 0x32
    b0f0:	1e42      	subs	r2, r0, #1
    b0f2:	e9c4 0200 	strd	r0, r2, [r4]
    b0f6:	77a0      	strb	r0, [r4, #30]
    b0f8:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    b0fc:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    b100:	7720      	strb	r0, [r4, #28]
    b102:	7760      	strb	r0, [r4, #29]
    b104:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
    b108:	62e2      	str	r2, [r4, #44]	; 0x2c
    b10a:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    b10e:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    b112:	2210      	movs	r2, #16
    b114:	7088      	strb	r0, [r1, #2]
    b116:	f801 0f04 	strb.w	r0, [r1, #4]!
    b11a:	1e52      	subs	r2, r2, #1
    b11c:	d1fa      	bne.n	b114 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x40>
    b11e:	f000 fdb3 	bl	bc88 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>
    b122:	4d0a      	ldr	r5, [pc, #40]	; (b14c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x78>)
    b124:	2601      	movs	r6, #1
    b126:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    b12a:	20ff      	movs	r0, #255	; 0xff
    b12c:	7028      	strb	r0, [r5, #0]
    b12e:	4808      	ldr	r0, [pc, #32]	; (b150 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    b130:	f001 f9c8 	bl	c4c4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    b134:	7068      	strb	r0, [r5, #1]
    b136:	f001 fa33 	bl	c5a0 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    b13a:	60a8      	str	r0, [r5, #8]
    b13c:	f000 fd2e 	bl	bb9c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    b140:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    b144:	bd70      	pop	{r4, r5, r6, pc}
    b146:	0000      	.short	0x0000
    b148:	2000149c 	.word	0x2000149c
    b14c:	200002d0 	.word	0x200002d0
    b150:	00009ac5 	.word	0x00009ac5

0000b154 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>:
    b154:	b570      	push	{r4, r5, r6, lr}
    b156:	4605      	mov	r5, r0
    b158:	2001      	movs	r0, #1
    b15a:	fa00 f405 	lsl.w	r4, r0, r5
    b15e:	460e      	mov	r6, r1
    b160:	2a00      	cmp	r2, #0
    b162:	bf08      	it	eq
    b164:	4808      	ldreq	r0, [pc, #32]	; (b188 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x34>)
    b166:	d00c      	beq.n	b182 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x2e>
    b168:	2000      	movs	r0, #0
    b16a:	f000 fcfd 	bl	bb68 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
    b16e:	00e9      	lsls	r1, r5, #3
    b170:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    b174:	f501 31f8 	add.w	r1, r1, #126976	; 0x1f000
    b178:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    b17c:	f8c1 6514 	str.w	r6, [r1, #1300]	; 0x514
    b180:	4802      	ldr	r0, [pc, #8]	; (b18c <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x38>)
    b182:	6004      	str	r4, [r0, #0]
    b184:	bd70      	pop	{r4, r5, r6, pc}
    b186:	0000      	.short	0x0000
    b188:	4001f508 	.word	0x4001f508
    b18c:	4001f504 	.word	0x4001f504

0000b190 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>:
    b190:	b500      	push	{lr}
    b192:	b083      	sub	sp, #12
    b194:	4668      	mov	r0, sp
    b196:	f000 f999 	bl	b4cc <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    b19a:	9800      	ldr	r0, [sp, #0]
    b19c:	f005 f8d4 	bl	10348 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    b1a0:	9a01      	ldr	r2, [sp, #4]
    b1a2:	4b03      	ldr	r3, [pc, #12]	; (b1b0 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q+0x20>)
    b1a4:	2100      	movs	r1, #0
    b1a6:	fbe2 0103 	umlal	r0, r1, r2, r3
    b1aa:	b003      	add	sp, #12
    b1ac:	bd00      	pop	{pc}
    b1ae:	0000      	.short	0x0000
    b1b0:	1e848000 	.word	0x1e848000

0000b1b4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    b1b4:	0b41      	lsrs	r1, r0, #13
    b1b6:	f248 6237 	movw	r2, #34359	; 0x8637
    b1ba:	4351      	muls	r1, r2
    b1bc:	0c0a      	lsrs	r2, r1, #16
    b1be:	4b09      	ldr	r3, [pc, #36]	; (b1e4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    b1c0:	0251      	lsls	r1, r2, #9
    b1c2:	fb02 0203 	mla	r2, r2, r3, r0
    b1c6:	4808      	ldr	r0, [pc, #32]	; (b1e8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    b1c8:	4350      	muls	r0, r2
    b1ca:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    b1ce:	306e      	adds	r0, #110	; 0x6e
    b1d0:	0d40      	lsrs	r0, r0, #21
    b1d2:	425b      	negs	r3, r3
    b1d4:	fb10 f303 	smulbb	r3, r0, r3
    b1d8:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    b1dc:	bf88      	it	hi
    b1de:	1c49      	addhi	r1, r1, #1
    b1e0:	4408      	add	r0, r1
    b1e2:	4770      	bx	lr
    b1e4:	ffffc2f7 	.word	0xffffc2f7
    b1e8:	00010c6f 	.word	0x00010c6f

0000b1ec <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    b1ec:	0b43      	lsrs	r3, r0, #13
    b1ee:	f248 6c37 	movw	ip, #34359	; 0x8637
    b1f2:	fb03 f30c 	mul.w	r3, r3, ip
    b1f6:	b430      	push	{r4, r5}
    b1f8:	0c1b      	lsrs	r3, r3, #16
    b1fa:	f8df c044 	ldr.w	ip, [pc, #68]	; b240 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    b1fe:	025c      	lsls	r4, r3, #9
    b200:	fb03 030c 	mla	r3, r3, ip, r0
    b204:	480f      	ldr	r0, [pc, #60]	; (b244 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    b206:	4358      	muls	r0, r3
    b208:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    b20c:	eb04 000c 	add.w	r0, r4, ip
    b210:	f643 5409 	movw	r4, #15625	; 0x3d09
    b214:	fb1c f404 	smulbb	r4, ip, r4
    b218:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    b21c:	f643 5508 	movw	r5, #15624	; 0x3d08
    b220:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    b224:	442c      	add	r4, r5
    b226:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    b22a:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    b22e:	bf84      	itt	hi
    b230:	f04f 0c00 	movhi.w	ip, #0
    b234:	1c40      	addhi	r0, r0, #1
    b236:	6008      	str	r0, [r1, #0]
    b238:	f882 c000 	strb.w	ip, [r2]
    b23c:	bc30      	pop	{r4, r5}
    b23e:	4770      	bx	lr
    b240:	ffffc2f7 	.word	0xffffc2f7
    b244:	00010c6f 	.word	0x00010c6f

0000b248 <MPSL_IRQ_RTC0_Handler>:
    b248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b24c:	4d3b      	ldr	r5, [pc, #236]	; (b33c <MPSL_IRQ_RTC0_Handler+0xf4>)
    b24e:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    b252:	f8df 80ec 	ldr.w	r8, [pc, #236]	; b340 <MPSL_IRQ_RTC0_Handler+0xf8>
    b256:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    b25a:	f44f 6600 	mov.w	r6, #2048	; 0x800
    b25e:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    b262:	f04f 0400 	mov.w	r4, #0
    b266:	d019      	beq.n	b29c <MPSL_IRQ_RTC0_Handler+0x54>
    b268:	4836      	ldr	r0, [pc, #216]	; (b344 <MPSL_IRQ_RTC0_Handler+0xfc>)
    b26a:	6800      	ldr	r0, [r0, #0]
    b26c:	b1b0      	cbz	r0, b29c <MPSL_IRQ_RTC0_Handler+0x54>
    b26e:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    b272:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    b276:	f8d5 0540 	ldr.w	r0, [r5, #1344]	; 0x540
    b27a:	f8d8 1000 	ldr.w	r1, [r8]
    b27e:	1a40      	subs	r0, r0, r1
    b280:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b284:	2802      	cmp	r0, #2
    b286:	d302      	bcc.n	b28e <MPSL_IRQ_RTC0_Handler+0x46>
    b288:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    b28c:	d906      	bls.n	b29c <MPSL_IRQ_RTC0_Handler+0x54>
    b28e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    b292:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    b296:	2004      	movs	r0, #4
    b298:	f7fe fed8 	bl	a04c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b29c:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    b2a0:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    b2a4:	d01a      	beq.n	b2dc <MPSL_IRQ_RTC0_Handler+0x94>
    b2a6:	4828      	ldr	r0, [pc, #160]	; (b348 <MPSL_IRQ_RTC0_Handler+0x100>)
    b2a8:	6800      	ldr	r0, [r0, #0]
    b2aa:	b1b8      	cbz	r0, b2dc <MPSL_IRQ_RTC0_Handler+0x94>
    b2ac:	f8c5 4144 	str.w	r4, [r5, #324]	; 0x144
    b2b0:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    b2b4:	4825      	ldr	r0, [pc, #148]	; (b34c <MPSL_IRQ_RTC0_Handler+0x104>)
    b2b6:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    b2ba:	f8d8 1000 	ldr.w	r1, [r8]
    b2be:	1a40      	subs	r0, r0, r1
    b2c0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b2c4:	2802      	cmp	r0, #2
    b2c6:	d302      	bcc.n	b2ce <MPSL_IRQ_RTC0_Handler+0x86>
    b2c8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    b2cc:	d906      	bls.n	b2dc <MPSL_IRQ_RTC0_Handler+0x94>
    b2ce:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    b2d2:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    b2d6:	2005      	movs	r0, #5
    b2d8:	f7fe feb8 	bl	a04c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b2dc:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    b2e0:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    b2e4:	d01a      	beq.n	b31c <MPSL_IRQ_RTC0_Handler+0xd4>
    b2e6:	481a      	ldr	r0, [pc, #104]	; (b350 <MPSL_IRQ_RTC0_Handler+0x108>)
    b2e8:	6800      	ldr	r0, [r0, #0]
    b2ea:	b1b8      	cbz	r0, b31c <MPSL_IRQ_RTC0_Handler+0xd4>
    b2ec:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    b2f0:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    b2f4:	4817      	ldr	r0, [pc, #92]	; (b354 <MPSL_IRQ_RTC0_Handler+0x10c>)
    b2f6:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    b2fa:	f8d8 1000 	ldr.w	r1, [r8]
    b2fe:	1a40      	subs	r0, r0, r1
    b300:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b304:	2802      	cmp	r0, #2
    b306:	d302      	bcc.n	b30e <MPSL_IRQ_RTC0_Handler+0xc6>
    b308:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    b30c:	d906      	bls.n	b31c <MPSL_IRQ_RTC0_Handler+0xd4>
    b30e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    b312:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    b316:	2006      	movs	r0, #6
    b318:	f7fe fe98 	bl	a04c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b31c:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    b320:	2800      	cmp	r0, #0
    b322:	bf08      	it	eq
    b324:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    b328:	f8c5 4104 	str.w	r4, [r5, #260]	; 0x104
    b32c:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    b330:	4809      	ldr	r0, [pc, #36]	; (b358 <MPSL_IRQ_RTC0_Handler+0x110>)
    b332:	68c1      	ldr	r1, [r0, #12]
    b334:	1c49      	adds	r1, r1, #1
    b336:	60c1      	str	r1, [r0, #12]
    b338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b33c:	4000b000 	.word	0x4000b000
    b340:	4000b504 	.word	0x4000b504
    b344:	4000b140 	.word	0x4000b140
    b348:	4000b144 	.word	0x4000b144
    b34c:	4000b004 	.word	0x4000b004
    b350:	4000b148 	.word	0x4000b148
    b354:	4000b008 	.word	0x4000b008
    b358:	200002dc 	.word	0x200002dc

0000b35c <MPSL_IRQ_TIMER0_Handler>:
    b35c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b360:	4d38      	ldr	r5, [pc, #224]	; (b444 <MPSL_IRQ_TIMER0_Handler+0xe8>)
    b362:	7828      	ldrb	r0, [r5, #0]
    b364:	2804      	cmp	r0, #4
    b366:	d068      	beq.n	b43a <MPSL_IRQ_TIMER0_Handler+0xde>
    b368:	1ca8      	adds	r0, r5, #2
    b36a:	2201      	movs	r2, #1
    b36c:	7801      	ldrb	r1, [r0, #0]
    b36e:	b159      	cbz	r1, b388 <MPSL_IRQ_TIMER0_Handler+0x2c>
    b370:	2901      	cmp	r1, #1
    b372:	bf08      	it	eq
    b374:	706a      	strbeq	r2, [r5, #1]
    b376:	d002      	beq.n	b37e <MPSL_IRQ_TIMER0_Handler+0x22>
    b378:	7869      	ldrb	r1, [r5, #1]
    b37a:	2900      	cmp	r1, #0
    b37c:	d058      	beq.n	b430 <MPSL_IRQ_TIMER0_Handler+0xd4>
    b37e:	2102      	movs	r1, #2
    b380:	7001      	strb	r1, [r0, #0]
    b382:	7840      	ldrb	r0, [r0, #1]
    b384:	f000 fb12 	bl	b9ac <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b388:	4c2f      	ldr	r4, [pc, #188]	; (b448 <MPSL_IRQ_TIMER0_Handler+0xec>)
    b38a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b38e:	f04f 0800 	mov.w	r8, #0
    b392:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    b396:	f44f 7780 	mov.w	r7, #256	; 0x100
    b39a:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
    b39e:	d00a      	beq.n	b3b6 <MPSL_IRQ_TIMER0_Handler+0x5a>
    b3a0:	482a      	ldr	r0, [pc, #168]	; (b44c <MPSL_IRQ_TIMER0_Handler+0xf0>)
    b3a2:	6800      	ldr	r0, [r0, #0]
    b3a4:	b138      	cbz	r0, b3b6 <MPSL_IRQ_TIMER0_Handler+0x5a>
    b3a6:	2003      	movs	r0, #3
    b3a8:	f000 fb00 	bl	b9ac <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b3ac:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    b3b0:	2003      	movs	r0, #3
    b3b2:	f7fe fe4b 	bl	a04c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b3b6:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b3ba:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    b3be:	d00a      	beq.n	b3d6 <MPSL_IRQ_TIMER0_Handler+0x7a>
    b3c0:	4823      	ldr	r0, [pc, #140]	; (b450 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    b3c2:	6800      	ldr	r0, [r0, #0]
    b3c4:	b138      	cbz	r0, b3d6 <MPSL_IRQ_TIMER0_Handler+0x7a>
    b3c6:	2002      	movs	r0, #2
    b3c8:	f000 faf0 	bl	b9ac <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b3cc:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    b3d0:	2002      	movs	r0, #2
    b3d2:	f7fe fe3b 	bl	a04c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b3d6:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b3da:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    b3de:	d00a      	beq.n	b3f6 <MPSL_IRQ_TIMER0_Handler+0x9a>
    b3e0:	481c      	ldr	r0, [pc, #112]	; (b454 <MPSL_IRQ_TIMER0_Handler+0xf8>)
    b3e2:	6800      	ldr	r0, [r0, #0]
    b3e4:	b138      	cbz	r0, b3f6 <MPSL_IRQ_TIMER0_Handler+0x9a>
    b3e6:	2001      	movs	r0, #1
    b3e8:	f000 fae0 	bl	b9ac <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b3ec:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    b3f0:	2001      	movs	r0, #1
    b3f2:	f7fe fe2b 	bl	a04c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b3f6:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b3fa:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    b3fe:	bf08      	it	eq
    b400:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    b404:	4814      	ldr	r0, [pc, #80]	; (b458 <MPSL_IRQ_TIMER0_Handler+0xfc>)
    b406:	6800      	ldr	r0, [r0, #0]
    b408:	2800      	cmp	r0, #0
    b40a:	bf08      	it	eq
    b40c:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    b410:	2000      	movs	r0, #0
    b412:	f000 facb 	bl	b9ac <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b416:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    b41a:	2004      	movs	r0, #4
    b41c:	7028      	strb	r0, [r5, #0]
    b41e:	f8c5 8004 	str.w	r8, [r5, #4]
    b422:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    b426:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b42a:	2000      	movs	r0, #0
    b42c:	f7fe be0e 	b.w	a04c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b430:	f44f 6195 	mov.w	r1, #1192	; 0x4a8
    b434:	206c      	movs	r0, #108	; 0x6c
    b436:	f000 ff8f 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b43a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b43e:	2007      	movs	r0, #7
    b440:	f7fe be04 	b.w	a04c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b444:	200002dc 	.word	0x200002dc
    b448:	40008000 	.word	0x40008000
    b44c:	4000814c 	.word	0x4000814c
    b450:	40008148 	.word	0x40008148
    b454:	40008144 	.word	0x40008144
    b458:	40008140 	.word	0x40008140
    b45c:	2201      	movs	r2, #1
    b45e:	0211      	lsls	r1, r2, #8
    b460:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    b464:	2000      	movs	r0, #0
    b466:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    b46a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    b46e:	f3bf 8f4f 	dsb	sy
    b472:	f3bf 8f6f 	isb	sy
    b476:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    b47a:	490e      	ldr	r1, [pc, #56]	; (b4b4 <MPSL_IRQ_TIMER0_Handler+0x158>)
    b47c:	f841 2f04 	str.w	r2, [r1, #4]!
    b480:	1e43      	subs	r3, r0, #1
    b482:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
    b486:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    b48a:	f8c1 013c 	str.w	r0, [r1, #316]	; 0x13c
    b48e:	4b0a      	ldr	r3, [pc, #40]	; (b4b8 <MPSL_IRQ_TIMER0_Handler+0x15c>)
    b490:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    b494:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    b498:	1d1b      	adds	r3, r3, #4
    b49a:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    b49e:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    b4a2:	1d1b      	adds	r3, r3, #4
    b4a4:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    b4a8:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    b4ac:	60ca      	str	r2, [r1, #12]
    b4ae:	4903      	ldr	r1, [pc, #12]	; (b4bc <MPSL_IRQ_TIMER0_Handler+0x160>)
    b4b0:	7048      	strb	r0, [r1, #1]
    b4b2:	4770      	bx	lr
    b4b4:	40008000 	.word	0x40008000
    b4b8:	40008004 	.word	0x40008004
    b4bc:	200002dc 	.word	0x200002dc

0000b4c0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    b4c0:	4801      	ldr	r0, [pc, #4]	; (b4c8 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    b4c2:	6800      	ldr	r0, [r0, #0]
    b4c4:	4770      	bx	lr
    b4c6:	0000      	.short	0x0000
    b4c8:	4000b504 	.word	0x4000b504

0000b4cc <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>:
    b4cc:	b430      	push	{r4, r5}
    b4ce:	f3ef 8c10 	mrs	ip, PRIMASK
    b4d2:	b672      	cpsid	i
    b4d4:	2500      	movs	r5, #0
    b4d6:	4b0b      	ldr	r3, [pc, #44]	; (b504 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x38>)
    b4d8:	4a0b      	ldr	r2, [pc, #44]	; (b508 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x3c>)
    b4da:	bf00      	nop
    b4dc:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
    b4e0:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
    b4e4:	b12c      	cbz	r4, b4f2 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x26>
    b4e6:	68d1      	ldr	r1, [r2, #12]
    b4e8:	1c49      	adds	r1, r1, #1
    b4ea:	60d1      	str	r1, [r2, #12]
    b4ec:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
    b4f0:	e7f4      	b.n	b4dc <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x10>
    b4f2:	68d2      	ldr	r2, [r2, #12]
    b4f4:	f1bc 0f00 	cmp.w	ip, #0
    b4f8:	d100      	bne.n	b4fc <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x30>
    b4fa:	b662      	cpsie	i
    b4fc:	e9c0 1200 	strd	r1, r2, [r0]
    b500:	bc30      	pop	{r4, r5}
    b502:	4770      	bx	lr
    b504:	4000b000 	.word	0x4000b000
    b508:	200002dc 	.word	0x200002dc

0000b50c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    b50c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b510:	f8df 8134 	ldr.w	r8, [pc, #308]	; b648 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x13c>
    b514:	4605      	mov	r5, r0
    b516:	f1a8 0602 	sub.w	r6, r8, #2
    b51a:	f898 3000 	ldrb.w	r3, [r8]
    b51e:	68b0      	ldr	r0, [r6, #8]
    b520:	2b01      	cmp	r3, #1
    b522:	bf04      	itt	eq
    b524:	42a8      	cmpeq	r0, r5
    b526:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b52a:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    b52e:	4a47      	ldr	r2, [pc, #284]	; (b64c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x140>)
    b530:	6011      	str	r1, [r2, #0]
    b532:	4948      	ldr	r1, [pc, #288]	; (b654 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x148>)
    b534:	4a46      	ldr	r2, [pc, #280]	; (b650 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x144>)
    b536:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    b53a:	f101 0c04 	add.w	ip, r1, #4
    b53e:	f04f 0400 	mov.w	r4, #0
    b542:	2b00      	cmp	r3, #0
    b544:	d055      	beq.n	b5f2 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xe6>
    b546:	4a44      	ldr	r2, [pc, #272]	; (b658 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x14c>)
    b548:	f8c1 2348 	str.w	r2, [r1, #840]	; 0x348
    b54c:	f8cc 4540 	str.w	r4, [ip, #1344]	; 0x540
    b550:	f8c1 4144 	str.w	r4, [r1, #324]	; 0x144
    b554:	f8d1 2148 	ldr.w	r2, [r1, #328]	; 0x148
    b558:	2701      	movs	r7, #1
    b55a:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    b55e:	2a00      	cmp	r2, #0
    b560:	bf01      	itttt	eq
    b562:	f8d1 2104 	ldreq.w	r2, [r1, #260]	; 0x104
    b566:	2a00      	cmpeq	r2, #0
    b568:	f44f 6200 	moveq.w	r2, #2048	; 0x800
    b56c:	f8c9 2280 	streq.w	r2, [r9, #640]	; 0x280
    b570:	f04f 0a10 	mov.w	sl, #16
    b574:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    b578:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    b57c:	f8c1 2348 	str.w	r2, [r1, #840]	; 0x348
    b580:	f8c1 4140 	str.w	r4, [r1, #320]	; 0x140
    b584:	4a35      	ldr	r2, [pc, #212]	; (b65c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x150>)
    b586:	f8d2 c000 	ldr.w	ip, [r2]
    b58a:	eba5 0c0c 	sub.w	ip, r5, ip
    b58e:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    b592:	f1bc 0f02 	cmp.w	ip, #2
    b596:	d337      	bcc.n	b608 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfc>
    b598:	f5bc 0f00 	cmp.w	ip, #8388608	; 0x800000
    b59c:	d834      	bhi.n	b608 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfc>
    b59e:	f8c1 5540 	str.w	r5, [r1, #1344]	; 0x540
    b5a2:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
    b5a6:	f8c1 c344 	str.w	ip, [r1, #836]	; 0x344
    b5aa:	b12b      	cbz	r3, b5b8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xac>
    b5ac:	6811      	ldr	r1, [r2, #0]
    b5ae:	1a41      	subs	r1, r0, r1
    b5b0:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    b5b4:	2902      	cmp	r1, #2
    b5b6:	d3f9      	bcc.n	b5ac <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xa0>
    b5b8:	6077      	str	r7, [r6, #4]
    b5ba:	7034      	strb	r4, [r6, #0]
    b5bc:	f7ff ff4e 	bl	b45c <MPSL_IRQ_TIMER0_Handler+0x100>
    b5c0:	4827      	ldr	r0, [pc, #156]	; (b660 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x154>)
    b5c2:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    b5c6:	f364 0101 	bfi	r1, r4, #0, #2
    b5ca:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    b5ce:	f8d0 2508 	ldr.w	r2, [r0, #1288]	; 0x508
    b5d2:	2102      	movs	r1, #2
    b5d4:	f361 0201 	bfi	r2, r1, #0, #2
    b5d8:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    b5dc:	fa9a f1aa 	rbit	r1, sl
    b5e0:	fab1 f181 	clz	r1, r1
    b5e4:	2909      	cmp	r1, #9
    b5e6:	d917      	bls.n	b618 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x10c>
    b5e8:	f240 3155 	movw	r1, #853	; 0x355
    b5ec:	a01d      	add	r0, pc, #116	; (adr r0, b664 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x158>)
    b5ee:	f000 fe87 	bl	c300 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    b5f2:	f8c1 2348 	str.w	r2, [r1, #840]	; 0x348
    b5f6:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    b5fa:	f8c1 4140 	str.w	r4, [r1, #320]	; 0x140
    b5fe:	f8cc 4540 	str.w	r4, [ip, #1344]	; 0x540
    b602:	f8c1 4144 	str.w	r4, [r1, #324]	; 0x144
    b606:	e7a5      	b.n	b554 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x48>
    b608:	2000      	movs	r0, #0
    b60a:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    b60e:	f44f 7127 	mov.w	r1, #668	; 0x29c
    b612:	206c      	movs	r0, #108	; 0x6c
    b614:	f000 fea0 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b618:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    b61c:	60c7      	str	r7, [r0, #12]
    b61e:	6871      	ldr	r1, [r6, #4]
    b620:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b624:	f44f 7080 	mov.w	r0, #256	; 0x100
    b628:	f8c9 0280 	str.w	r0, [r9, #640]	; 0x280
    b62c:	f8c9 0100 	str.w	r0, [r9, #256]	; 0x100
    b630:	490f      	ldr	r1, [pc, #60]	; (b670 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x164>)
    b632:	05c0      	lsls	r0, r0, #23
    b634:	6008      	str	r0, [r1, #0]
    b636:	2004      	movs	r0, #4
    b638:	60b5      	str	r5, [r6, #8]
    b63a:	f888 0001 	strb.w	r0, [r8, #1]
    b63e:	f888 7000 	strb.w	r7, [r8]
    b642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b646:	0000      	.short	0x0000
    b648:	200002de 	.word	0x200002de
    b64c:	4001f508 	.word	0x4001f508
    b650:	fffbfffd 	.word	0xfffbfffd
    b654:	4000b000 	.word	0x4000b000
    b658:	fffafffd 	.word	0xfffafffd
    b65c:	4000b504 	.word	0x4000b504
    b660:	40008000 	.word	0x40008000
    b664:	5f66726e 	.word	0x5f66726e
    b668:	656d6974 	.word	0x656d6974
    b66c:	00682e72 	.word	0x00682e72
    b670:	4001f504 	.word	0x4001f504

0000b674 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    b674:	b570      	push	{r4, r5, r6, lr}
    b676:	4c2a      	ldr	r4, [pc, #168]	; (b720 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xac>)
    b678:	68a1      	ldr	r1, [r4, #8]
    b67a:	4281      	cmp	r1, r0
    b67c:	bf14      	ite	ne
    b67e:	2201      	movne	r2, #1
    b680:	2200      	moveq	r2, #0
    b682:	f8df c0a0 	ldr.w	ip, [pc, #160]	; b724 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb0>
    b686:	f89c 5000 	ldrb.w	r5, [ip]
    b68a:	2d02      	cmp	r5, #2
    b68c:	d002      	beq.n	b694 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x20>
    b68e:	2a00      	cmp	r2, #0
    b690:	d034      	beq.n	b6fc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x88>
    b692:	e002      	b.n	b69a <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x26>
    b694:	2a00      	cmp	r2, #0
    b696:	bf08      	it	eq
    b698:	bd70      	popeq	{r4, r5, r6, pc}
    b69a:	7862      	ldrb	r2, [r4, #1]
    b69c:	b39a      	cbz	r2, b706 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x92>
    b69e:	4b22      	ldr	r3, [pc, #136]	; (b728 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    b6a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    b6a4:	601a      	str	r2, [r3, #0]
    b6a6:	4b21      	ldr	r3, [pc, #132]	; (b72c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>)
    b6a8:	1392      	asrs	r2, r2, #14
    b6aa:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    b6ae:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
    b6b2:	2200      	movs	r2, #0
    b6b4:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    b6b8:	4a1d      	ldr	r2, [pc, #116]	; (b730 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    b6ba:	6816      	ldr	r6, [r2, #0]
    b6bc:	1b86      	subs	r6, r0, r6
    b6be:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
    b6c2:	2e02      	cmp	r6, #2
    b6c4:	d324      	bcc.n	b710 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    b6c6:	f5b6 0f00 	cmp.w	r6, #8388608	; 0x800000
    b6ca:	d821      	bhi.n	b710 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    b6cc:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    b6d0:	f44f 3680 	mov.w	r6, #65536	; 0x10000
    b6d4:	f8c3 6344 	str.w	r6, [r3, #836]	; 0x344
    b6d8:	b12d      	cbz	r5, b6e6 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x72>
    b6da:	6813      	ldr	r3, [r2, #0]
    b6dc:	1acb      	subs	r3, r1, r3
    b6de:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    b6e2:	2b02      	cmp	r3, #2
    b6e4:	d3f9      	bcc.n	b6da <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x66>
    b6e6:	4b13      	ldr	r3, [pc, #76]	; (b734 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    b6e8:	2102      	movs	r1, #2
    b6ea:	074a      	lsls	r2, r1, #29
    b6ec:	601a      	str	r2, [r3, #0]
    b6ee:	60a0      	str	r0, [r4, #8]
    b6f0:	2004      	movs	r0, #4
    b6f2:	f88c 0001 	strb.w	r0, [ip, #1]
    b6f6:	f88c 1000 	strb.w	r1, [ip]
    b6fa:	bd70      	pop	{r4, r5, r6, pc}
    b6fc:	f240 21aa 	movw	r1, #682	; 0x2aa
    b700:	206c      	movs	r0, #108	; 0x6c
    b702:	f000 fe29 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b706:	f240 21ae 	movw	r1, #686	; 0x2ae
    b70a:	206c      	movs	r0, #108	; 0x6c
    b70c:	f000 fe24 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b710:	2000      	movs	r0, #0
    b712:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    b716:	f240 21ba 	movw	r1, #698	; 0x2ba
    b71a:	206c      	movs	r0, #108	; 0x6c
    b71c:	f000 fe1c 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b720:	200002dc 	.word	0x200002dc
    b724:	200002de 	.word	0x200002de
    b728:	4001f508 	.word	0x4001f508
    b72c:	4000b000 	.word	0x4000b000
    b730:	4000b504 	.word	0x4000b504
    b734:	4001f504 	.word	0x4001f504

0000b738 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    b738:	4801      	ldr	r0, [pc, #4]	; (b740 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    b73a:	6880      	ldr	r0, [r0, #8]
    b73c:	4770      	bx	lr
    b73e:	0000      	.short	0x0000
    b740:	200002dc 	.word	0x200002dc

0000b744 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    b744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b748:	4836      	ldr	r0, [pc, #216]	; (b824 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    b74a:	4a35      	ldr	r2, [pc, #212]	; (b820 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xdc>)
    b74c:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    b750:	f8df c0d4 	ldr.w	ip, [pc, #212]	; b828 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>
    b754:	1d03      	adds	r3, r0, #4
    b756:	2100      	movs	r1, #0
    b758:	f89c 4000 	ldrb.w	r4, [ip]
    b75c:	b184      	cbz	r4, b780 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x3c>
    b75e:	4a33      	ldr	r2, [pc, #204]	; (b82c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    b760:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    b764:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    b768:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    b76c:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    b770:	2301      	movs	r3, #1
    b772:	2a00      	cmp	r2, #0
    b774:	bf04      	itt	eq
    b776:	f8d0 0104 	ldreq.w	r0, [r0, #260]	; 0x104
    b77a:	2800      	cmpeq	r0, #0
    b77c:	d111      	bne.n	b7a2 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x5e>
    b77e:	e00a      	b.n	b796 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x52>
    b780:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    b784:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    b788:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    b78c:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    b790:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    b794:	e7ea      	b.n	b76c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x28>
    b796:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    b79a:	f44f 6000 	mov.w	r0, #2048	; 0x800
    b79e:	f8c2 0280 	str.w	r0, [r2, #640]	; 0x280
    b7a2:	2c02      	cmp	r4, #2
    b7a4:	d004      	beq.n	b7b0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x6c>
    b7a6:	f240 21c6 	movw	r1, #710	; 0x2c6
    b7aa:	206c      	movs	r0, #108	; 0x6c
    b7ac:	f000 fdd4 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b7b0:	4e1f      	ldr	r6, [pc, #124]	; (b830 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    b7b2:	6830      	ldr	r0, [r6, #0]
    b7b4:	4c1f      	ldr	r4, [pc, #124]	; (b834 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    b7b6:	1cc0      	adds	r0, r0, #3
    b7b8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b7bc:	68a2      	ldr	r2, [r4, #8]
    b7be:	4d1e      	ldr	r5, [pc, #120]	; (b838 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf4>)
    b7c0:	4290      	cmp	r0, r2
    b7c2:	d00b      	beq.n	b7dc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    b7c4:	6837      	ldr	r7, [r6, #0]
    b7c6:	1bd7      	subs	r7, r2, r7
    b7c8:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    b7cc:	2f04      	cmp	r7, #4
    b7ce:	d305      	bcc.n	b7dc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    b7d0:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
    b7d4:	d802      	bhi.n	b7dc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    b7d6:	f7ff fe99 	bl	b50c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    b7da:	e01b      	b.n	b814 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    b7dc:	6830      	ldr	r0, [r6, #0]
    b7de:	1a10      	subs	r0, r2, r0
    b7e0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b7e4:	2802      	cmp	r0, #2
    b7e6:	d313      	bcc.n	b810 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xcc>
    b7e8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    b7ec:	d810      	bhi.n	b810 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xcc>
    b7ee:	4a13      	ldr	r2, [pc, #76]	; (b83c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf8>)
    b7f0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    b7f4:	6010      	str	r0, [r2, #0]
    b7f6:	6063      	str	r3, [r4, #4]
    b7f8:	7021      	strb	r1, [r4, #0]
    b7fa:	606b      	str	r3, [r5, #4]
    b7fc:	60eb      	str	r3, [r5, #12]
    b7fe:	0040      	lsls	r0, r0, #1
    b800:	1f11      	subs	r1, r2, #4
    b802:	6008      	str	r0, [r1, #0]
    b804:	2004      	movs	r0, #4
    b806:	f88c 0001 	strb.w	r0, [ip, #1]
    b80a:	f88c 3000 	strb.w	r3, [ip]
    b80e:	e001      	b.n	b814 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    b810:	6063      	str	r3, [r4, #4]
    b812:	7021      	strb	r1, [r4, #0]
    b814:	6860      	ldr	r0, [r4, #4]
    b816:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    b81a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b81e:	0000      	.short	0x0000
    b820:	fffbfffd 	.word	0xfffbfffd
    b824:	4000b000 	.word	0x4000b000
    b828:	200002de 	.word	0x200002de
    b82c:	fffafffd 	.word	0xfffafffd
    b830:	4000b504 	.word	0x4000b504
    b834:	200002dc 	.word	0x200002dc
    b838:	40008000 	.word	0x40008000
    b83c:	4001f508 	.word	0x4001f508

0000b840 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    b840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b844:	4a54      	ldr	r2, [pc, #336]	; (b998 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x158>)
    b846:	2500      	movs	r5, #0
    b848:	2401      	movs	r4, #1
    b84a:	f892 c000 	ldrb.w	ip, [r2]
    b84e:	7853      	ldrb	r3, [r2, #1]
    b850:	f44f 76a0 	mov.w	r6, #320	; 0x140
    b854:	2807      	cmp	r0, #7
    b856:	d27d      	bcs.n	b954 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x114>
    b858:	e8df f000 	tbb	[pc, r0]
    b85c:	04040404 	.word	0x04040404
    b860:	00585858 	.word	0x00585858
    b864:	4a4d      	ldr	r2, [pc, #308]	; (b99c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x15c>)
    b866:	6897      	ldr	r7, [r2, #8]
    b868:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
    b86c:	bf04      	itt	eq
    b86e:	7852      	ldrbeq	r2, [r2, #1]
    b870:	2a00      	cmpeq	r2, #0
    b872:	d003      	beq.n	b87c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x3c>
    b874:	f1bc 0f02 	cmp.w	ip, #2
    b878:	d005      	beq.n	b886 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
    b87a:	e026      	b.n	b8ca <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8a>
    b87c:	f240 3156 	movw	r1, #854	; 0x356
    b880:	206c      	movs	r0, #108	; 0x6c
    b882:	f000 fd69 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b886:	1f1a      	subs	r2, r3, #4
    b888:	b2d2      	uxtb	r2, r2
    b88a:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    b88e:	f102 4680 	add.w	r6, r2, #1073741824	; 0x40000000
    b892:	f506 4630 	add.w	r6, r6, #45056	; 0xb000
    b896:	2200      	movs	r2, #0
    b898:	f1bc 0f01 	cmp.w	ip, #1
    b89c:	d003      	beq.n	b8a6 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x66>
    b89e:	f1bc 0f02 	cmp.w	ip, #2
    b8a2:	d008      	beq.n	b8b6 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x76>
    b8a4:	e00e      	b.n	b8c4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x84>
    b8a6:	2b04      	cmp	r3, #4
    b8a8:	bf24      	itt	cs
    b8aa:	6837      	ldrcs	r7, [r6, #0]
    b8ac:	2f00      	cmpcs	r7, #0
    b8ae:	bf08      	it	eq
    b8b0:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
    b8b4:	e006      	b.n	b8c4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x84>
    b8b6:	2b04      	cmp	r3, #4
    b8b8:	bf24      	itt	cs
    b8ba:	6837      	ldrcs	r7, [r6, #0]
    b8bc:	2f00      	cmpcs	r7, #0
    b8be:	bf08      	it	eq
    b8c0:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
    b8c4:	f012 4f80 	tst.w	r2, #1073741824	; 0x40000000
    b8c8:	d1e5      	bne.n	b896 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x56>
    b8ca:	f8df c0d4 	ldr.w	ip, [pc, #212]	; b9a0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x160>
    b8ce:	f100 0210 	add.w	r2, r0, #16
    b8d2:	fa04 f202 	lsl.w	r2, r4, r2
    b8d6:	f8cc 2308 	str.w	r2, [ip, #776]	; 0x308
    b8da:	f04f 0340 	mov.w	r3, #64	; 0x40
    b8de:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    b8e2:	b2db      	uxtb	r3, r3
    b8e4:	4463      	add	r3, ip
    b8e6:	601c      	str	r4, [r3, #0]
    b8e8:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    b8ec:	f8d0 3540 	ldr.w	r3, [r0, #1344]	; 0x540
    b8f0:	eba1 0303 	sub.w	r3, r1, r3
    b8f4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    b8f8:	2b03      	cmp	r3, #3
    b8fa:	bf26      	itte	cs
    b8fc:	f8c0 1540 	strcs.w	r1, [r0, #1344]	; 0x540
    b900:	f8cc 2304 	strcs.w	r2, [ip, #772]	; 0x304
    b904:	f8c0 5540 	strcc.w	r5, [r0, #1344]	; 0x540
    b908:	d237      	bcs.n	b97a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x13a>
    b90a:	e03c      	b.n	b986 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x146>
    b90c:	f1bc 0f00 	cmp.w	ip, #0
    b910:	d006      	beq.n	b920 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    b912:	4283      	cmp	r3, r0
    b914:	d104      	bne.n	b920 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    b916:	f240 3176 	movw	r1, #886	; 0x376
    b91a:	206c      	movs	r0, #108	; 0x6c
    b91c:	f000 fd1c 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b920:	1f02      	subs	r2, r0, #4
    b922:	b2d3      	uxtb	r3, r2
    b924:	2b03      	cmp	r3, #3
    b926:	d304      	bcc.n	b932 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xf2>
    b928:	f240 11d1 	movw	r1, #465	; 0x1d1
    b92c:	206c      	movs	r0, #108	; 0x6c
    b92e:	f000 fd13 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b932:	f8df c070 	ldr.w	ip, [pc, #112]	; b9a4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x164>
    b936:	f103 0210 	add.w	r2, r3, #16
    b93a:	fa04 f202 	lsl.w	r2, r4, r2
    b93e:	f8cc 2308 	str.w	r2, [ip, #776]	; 0x308
    b942:	f8cc 2348 	str.w	r2, [ip, #840]	; 0x348
    b946:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    b94a:	f84c 5003 	str.w	r5, [ip, r3]
    b94e:	4b16      	ldr	r3, [pc, #88]	; (b9a8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>)
    b950:	681b      	ldr	r3, [r3, #0]
    b952:	e000      	b.n	b956 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x116>
    b954:	e01a      	b.n	b98c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x14c>
    b956:	1f00      	subs	r0, r0, #4
    b958:	1acb      	subs	r3, r1, r3
    b95a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    b95e:	b2c0      	uxtb	r0, r0
    b960:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    b964:	2b02      	cmp	r3, #2
    b966:	d30b      	bcc.n	b980 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x140>
    b968:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    b96c:	d808      	bhi.n	b980 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x140>
    b96e:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    b972:	f8cc 2304 	str.w	r2, [ip, #772]	; 0x304
    b976:	f8cc 2344 	str.w	r2, [ip, #836]	; 0x344
    b97a:	2001      	movs	r0, #1
    b97c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b980:	2100      	movs	r1, #0
    b982:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    b986:	2000      	movs	r0, #0
    b988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b98c:	f240 317a 	movw	r1, #890	; 0x37a
    b990:	206c      	movs	r0, #108	; 0x6c
    b992:	f000 fce1 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b996:	0000      	.short	0x0000
    b998:	200002de 	.word	0x200002de
    b99c:	200002dc 	.word	0x200002dc
    b9a0:	40008000 	.word	0x40008000
    b9a4:	4000b000 	.word	0x4000b000
    b9a8:	4000b504 	.word	0x4000b504

0000b9ac <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    b9ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b9b0:	2601      	movs	r6, #1
    b9b2:	2700      	movs	r7, #0
    b9b4:	f44f 78a0 	mov.w	r8, #320	; 0x140
    b9b8:	2807      	cmp	r0, #7
    b9ba:	d251      	bcs.n	ba60 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>
    b9bc:	e8df f000 	tbb	[pc, r0]
    b9c0:	04040404 	.word	0x04040404
    b9c4:	00191919 	.word	0x00191919
    b9c8:	f100 0110 	add.w	r1, r0, #16
    b9cc:	fa06 f201 	lsl.w	r2, r6, r1
    b9d0:	4926      	ldr	r1, [pc, #152]	; (ba6c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    b9d2:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    b9d6:	eb01 0380 	add.w	r3, r1, r0, lsl #2
    b9da:	2200      	movs	r2, #0
    b9dc:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    b9e0:	eb08 0280 	add.w	r2, r8, r0, lsl #2
    b9e4:	508f      	str	r7, [r1, r2]
    b9e6:	4922      	ldr	r1, [pc, #136]	; (ba70 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    b9e8:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    b9ec:	9000      	str	r0, [sp, #0]
    b9ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b9f2:	4d20      	ldr	r5, [pc, #128]	; (ba74 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    b9f4:	1f01      	subs	r1, r0, #4
    b9f6:	b2cc      	uxtb	r4, r1
    b9f8:	7829      	ldrb	r1, [r5, #0]
    b9fa:	b179      	cbz	r1, ba1c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x70>
    b9fc:	786a      	ldrb	r2, [r5, #1]
    b9fe:	4282      	cmp	r2, r0
    ba00:	d10c      	bne.n	ba1c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x70>
    ba02:	4a1d      	ldr	r2, [pc, #116]	; (ba78 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    ba04:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    ba08:	6010      	str	r0, [r2, #0]
    ba0a:	2901      	cmp	r1, #1
    ba0c:	bf08      	it	eq
    ba0e:	f7ff fd25 	bleq	b45c <MPSL_IRQ_TIMER0_Handler+0x100>
    ba12:	702f      	strb	r7, [r5, #0]
    ba14:	4919      	ldr	r1, [pc, #100]	; (ba7c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd0>)
    ba16:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    ba1a:	6088      	str	r0, [r1, #8]
    ba1c:	4918      	ldr	r1, [pc, #96]	; (ba80 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd4>)
    ba1e:	f104 0010 	add.w	r0, r4, #16
    ba22:	fa06 f000 	lsl.w	r0, r6, r0
    ba26:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    ba2a:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
    ba2e:	00a0      	lsls	r0, r4, #2
    ba30:	4408      	add	r0, r1
    ba32:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    ba36:	4a13      	ldr	r2, [pc, #76]	; (ba84 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd8>)
    ba38:	6812      	ldr	r2, [r2, #0]
    ba3a:	1a80      	subs	r0, r0, r2
    ba3c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    ba40:	2802      	cmp	r0, #2
    ba42:	d307      	bcc.n	ba54 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa8>
    ba44:	eb01 0284 	add.w	r2, r1, r4, lsl #2
    ba48:	2000      	movs	r0, #0
    ba4a:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    ba4e:	eb08 0084 	add.w	r0, r8, r4, lsl #2
    ba52:	500f      	str	r7, [r1, r0]
    ba54:	480c      	ldr	r0, [pc, #48]	; (ba88 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xdc>)
    ba56:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    ba5a:	9000      	str	r0, [sp, #0]
    ba5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ba60:	f240 31fe 	movw	r1, #1022	; 0x3fe
    ba64:	206c      	movs	r0, #108	; 0x6c
    ba66:	f000 fc77 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ba6a:	0000      	.short	0x0000
    ba6c:	40008000 	.word	0x40008000
    ba70:	40008140 	.word	0x40008140
    ba74:	200002de 	.word	0x200002de
    ba78:	4001f508 	.word	0x4001f508
    ba7c:	200002dc 	.word	0x200002dc
    ba80:	4000b000 	.word	0x4000b000
    ba84:	4000b504 	.word	0x4000b504
    ba88:	4000b140 	.word	0x4000b140

0000ba8c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    ba8c:	4825      	ldr	r0, [pc, #148]	; (bb24 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x98>)
    ba8e:	4a24      	ldr	r2, [pc, #144]	; (bb20 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x94>)
    ba90:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    ba94:	4924      	ldr	r1, [pc, #144]	; (bb28 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x9c>)
    ba96:	1d03      	adds	r3, r0, #4
    ba98:	f891 c000 	ldrb.w	ip, [r1]
    ba9c:	2100      	movs	r1, #0
    ba9e:	f1bc 0f00 	cmp.w	ip, #0
    baa2:	d010      	beq.n	bac6 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x3a>
    baa4:	4a21      	ldr	r2, [pc, #132]	; (bb2c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0xa0>)
    baa6:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    baaa:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    baae:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    bab2:	bf00      	nop
    bab4:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    bab8:	2a00      	cmp	r2, #0
    baba:	bf04      	itt	eq
    babc:	f8d0 0104 	ldreq.w	r0, [r0, #260]	; 0x104
    bac0:	2800      	cmpeq	r0, #0
    bac2:	d111      	bne.n	bae8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x5c>
    bac4:	e00a      	b.n	badc <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x50>
    bac6:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    baca:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    bace:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    bad2:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    bad6:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    bada:	e7eb      	b.n	bab4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x28>
    badc:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    bae0:	f44f 6000 	mov.w	r0, #2048	; 0x800
    bae4:	f8c2 0280 	str.w	r0, [r2, #640]	; 0x280
    bae8:	4811      	ldr	r0, [pc, #68]	; (bb30 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0xa4>)
    baea:	f04f 32ff 	mov.w	r2, #4294967295
    baee:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    baf2:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    baf6:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    bafa:	f100 0204 	add.w	r2, r0, #4
    bafe:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    bb02:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    bb06:	f102 0204 	add.w	r2, r2, #4
    bb0a:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    bb0e:	f8c0 1148 	str.w	r1, [r0, #328]	; 0x148
    bb12:	f102 0204 	add.w	r2, r2, #4
    bb16:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    bb1a:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
    bb1e:	4770      	bx	lr
    bb20:	fffbfffd 	.word	0xfffbfffd
    bb24:	4000b000 	.word	0x4000b000
    bb28:	200002de 	.word	0x200002de
    bb2c:	fffafffd 	.word	0xfffafffd
    bb30:	40008000 	.word	0x40008000

0000bb34 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>:
    bb34:	b510      	push	{r4, lr}
    bb36:	2807      	cmp	r0, #7
    bb38:	d20d      	bcs.n	bb56 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x22>
    bb3a:	e8df f000 	tbb	[pc, r0]
    bb3e:	0404      	.short	0x0404
    bb40:	06060404 	.word	0x06060404
    bb44:	0006      	.short	0x0006
    bb46:	4906      	ldr	r1, [pc, #24]	; (bb60 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x2c>)
    bb48:	e002      	b.n	bb50 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x1c>
    bb4a:	1f00      	subs	r0, r0, #4
    bb4c:	4905      	ldr	r1, [pc, #20]	; (bb64 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x30>)
    bb4e:	b2c0      	uxtb	r0, r0
    bb50:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    bb54:	bd10      	pop	{r4, pc}
    bb56:	f240 319e 	movw	r1, #926	; 0x39e
    bb5a:	206c      	movs	r0, #108	; 0x6c
    bb5c:	f000 fbfc 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bb60:	40008140 	.word	0x40008140
    bb64:	4000b140 	.word	0x4000b140

0000bb68 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>:
    bb68:	b510      	push	{r4, lr}
    bb6a:	2807      	cmp	r0, #7
    bb6c:	d20d      	bcs.n	bb8a <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x22>
    bb6e:	e8df f000 	tbb	[pc, r0]
    bb72:	0404      	.short	0x0404
    bb74:	06060404 	.word	0x06060404
    bb78:	0006      	.short	0x0006
    bb7a:	4906      	ldr	r1, [pc, #24]	; (bb94 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x2c>)
    bb7c:	e002      	b.n	bb84 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x1c>
    bb7e:	1f00      	subs	r0, r0, #4
    bb80:	4905      	ldr	r1, [pc, #20]	; (bb98 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x30>)
    bb82:	b2c0      	uxtb	r0, r0
    bb84:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    bb88:	bd10      	pop	{r4, pc}
    bb8a:	f240 319e 	movw	r1, #926	; 0x39e
    bb8e:	206c      	movs	r0, #108	; 0x6c
    bb90:	f000 fbe2 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bb94:	40008140 	.word	0x40008140
    bb98:	4000b140 	.word	0x4000b140

0000bb9c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    bb9c:	b570      	push	{r4, r5, r6, lr}
    bb9e:	481f      	ldr	r0, [pc, #124]	; (bc1c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x80>)
    bba0:	2400      	movs	r4, #0
    bba2:	2104      	movs	r1, #4
    bba4:	7004      	strb	r4, [r0, #0]
    bba6:	1e80      	subs	r0, r0, #2
    bba8:	7001      	strb	r1, [r0, #0]
    bbaa:	0589      	lsls	r1, r1, #22
    bbac:	60c4      	str	r4, [r0, #12]
    bbae:	6081      	str	r1, [r0, #8]
    bbb0:	f7ff fc54 	bl	b45c <MPSL_IRQ_TIMER0_Handler+0x100>
    bbb4:	2501      	movs	r5, #1
    bbb6:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    bbba:	02eb      	lsls	r3, r5, #11
    bbbc:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
    bbc0:	f3bf 8f4f 	dsb	sy
    bbc4:	f3bf 8f6f 	isb	sy
    bbc8:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
    bbcc:	4814      	ldr	r0, [pc, #80]	; (bc20 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x84>)
    bbce:	6045      	str	r5, [r0, #4]
    bbd0:	6085      	str	r5, [r0, #8]
    bbd2:	4914      	ldr	r1, [pc, #80]	; (bc24 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x88>)
    bbd4:	680a      	ldr	r2, [r1, #0]
    bbd6:	2a00      	cmp	r2, #0
    bbd8:	d1fc      	bne.n	bbd4 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x38>
    bbda:	1e51      	subs	r1, r2, #1
    bbdc:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    bbe0:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    bbe4:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    bbe8:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    bbec:	490e      	ldr	r1, [pc, #56]	; (bc28 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x8c>)
    bbee:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    bbf2:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    bbf6:	1d09      	adds	r1, r1, #4
    bbf8:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    bbfc:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    bc00:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
    bc04:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
    bc08:	6005      	str	r5, [r0, #0]
    bc0a:	f44f 7182 	mov.w	r1, #260	; 0x104
    bc0e:	f8c0 1344 	str.w	r1, [r0, #836]	; 0x344
    bc12:	2102      	movs	r1, #2
    bc14:	f8c0 1304 	str.w	r1, [r0, #772]	; 0x304
    bc18:	bd70      	pop	{r4, r5, r6, pc}
    bc1a:	0000      	.short	0x0000
    bc1c:	200002de 	.word	0x200002de
    bc20:	4000b000 	.word	0x4000b000
    bc24:	4000b504 	.word	0x4000b504
    bc28:	4000b004 	.word	0x4000b004

0000bc2c <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>:
    bc2c:	4808      	ldr	r0, [pc, #32]	; (bc50 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ+0x24>)
    bc2e:	f990 0000 	ldrsb.w	r0, [r0]
    bc32:	2800      	cmp	r0, #0
    bc34:	bfb8      	it	lt
    bc36:	4770      	bxlt	lr
    bc38:	f000 011f 	and.w	r1, r0, #31
    bc3c:	2201      	movs	r2, #1
    bc3e:	fa02 f101 	lsl.w	r1, r2, r1
    bc42:	0940      	lsrs	r0, r0, #5
    bc44:	0080      	lsls	r0, r0, #2
    bc46:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    bc4a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    bc4e:	4770      	bx	lr
    bc50:	2000036a 	.word	0x2000036a

0000bc54 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>:
    bc54:	4803      	ldr	r0, [pc, #12]	; (bc64 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI+0x10>)
    bc56:	7800      	ldrb	r0, [r0, #0]
    bc58:	2803      	cmp	r0, #3
    bc5a:	bf0c      	ite	eq
    bc5c:	2001      	moveq	r0, #1
    bc5e:	2000      	movne	r0, #0
    bc60:	4770      	bx	lr
    bc62:	0000      	.short	0x0000
    bc64:	2000033c 	.word	0x2000033c

0000bc68 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>:
    bc68:	4801      	ldr	r0, [pc, #4]	; (bc70 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII+0x8>)
    bc6a:	8840      	ldrh	r0, [r0, #2]
    bc6c:	4770      	bx	lr
    bc6e:	0000      	.short	0x0000
    bc70:	2000033c 	.word	0x2000033c

0000bc74 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>:
    bc74:	4803      	ldr	r0, [pc, #12]	; (bc84 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI+0x10>)
    bc76:	7800      	ldrb	r0, [r0, #0]
    bc78:	2802      	cmp	r0, #2
    bc7a:	bf16      	itet	ne
    bc7c:	2803      	cmpne	r0, #3
    bc7e:	2001      	moveq	r0, #1
    bc80:	2000      	movne	r0, #0
    bc82:	4770      	bx	lr
    bc84:	2000033c 	.word	0x2000033c

0000bc88 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>:
    bc88:	4802      	ldr	r0, [pc, #8]	; (bc94 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY+0xc>)
    bc8a:	2100      	movs	r1, #0
    bc8c:	7001      	strb	r1, [r0, #0]
    bc8e:	8041      	strh	r1, [r0, #2]
    bc90:	4770      	bx	lr
    bc92:	0000      	.short	0x0000
    bc94:	2000033c 	.word	0x2000033c

0000bc98 <MPSL_IRQ_CLOCK_Handler>:
    bc98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bc9c:	4c16      	ldr	r4, [pc, #88]	; (bcf8 <MPSL_IRQ_CLOCK_Handler+0x60>)
    bc9e:	7a60      	ldrb	r0, [r4, #9]
    bca0:	2800      	cmp	r0, #0
    bca2:	d027      	beq.n	bcf4 <MPSL_IRQ_CLOCK_Handler+0x5c>
    bca4:	f44f 7180 	mov.w	r1, #256	; 0x100
    bca8:	058d      	lsls	r5, r1, #22
    bcaa:	4628      	mov	r0, r5
    bcac:	f004 fb77 	bl	1039e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    bcb0:	4680      	mov	r8, r0
    bcb2:	f44f 7182 	mov.w	r1, #260	; 0x104
    bcb6:	4628      	mov	r0, r5
    bcb8:	f004 fb71 	bl	1039e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    bcbc:	2600      	movs	r6, #0
    bcbe:	4607      	mov	r7, r0
    bcc0:	f1b8 0f00 	cmp.w	r8, #0
    bcc4:	d009      	beq.n	bcda <MPSL_IRQ_CLOCK_Handler+0x42>
    bcc6:	2001      	movs	r0, #1
    bcc8:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    bccc:	7920      	ldrb	r0, [r4, #4]
    bcce:	b120      	cbz	r0, bcda <MPSL_IRQ_CLOCK_Handler+0x42>
    bcd0:	7126      	strb	r6, [r4, #4]
    bcd2:	69e0      	ldr	r0, [r4, #28]
    bcd4:	b108      	cbz	r0, bcda <MPSL_IRQ_CLOCK_Handler+0x42>
    bcd6:	4780      	blx	r0
    bcd8:	61e6      	str	r6, [r4, #28]
    bcda:	b137      	cbz	r7, bcea <MPSL_IRQ_CLOCK_Handler+0x52>
    bcdc:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    bce0:	2002      	movs	r0, #2
    bce2:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    bce6:	f000 fa57 	bl	c198 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    bcea:	4640      	mov	r0, r8
    bcec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    bcf0:	f000 b858 	b.w	bda4 <MPSL_IRQ_CLOCK_Handler+0x10c>
    bcf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bcf8:	200002ec 	.word	0x200002ec
    bcfc:	b510      	push	{r4, lr}
    bcfe:	f004 fbf8 	bl	104f2 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    bd02:	b930      	cbnz	r0, bd12 <MPSL_IRQ_CLOCK_Handler+0x7a>
    bd04:	f004 fc16 	bl	10534 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    bd08:	b918      	cbnz	r0, bd12 <MPSL_IRQ_CLOCK_Handler+0x7a>
    bd0a:	f004 fc49 	bl	105a0 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    bd0e:	2800      	cmp	r0, #0
    bd10:	d002      	beq.n	bd18 <MPSL_IRQ_CLOCK_Handler+0x80>
    bd12:	4902      	ldr	r1, [pc, #8]	; (bd1c <MPSL_IRQ_CLOCK_Handler+0x84>)
    bd14:	2002      	movs	r0, #2
    bd16:	6008      	str	r0, [r1, #0]
    bd18:	bd10      	pop	{r4, pc}
    bd1a:	0000      	.short	0x0000
    bd1c:	40000c34 	.word	0x40000c34
    bd20:	b570      	push	{r4, r5, r6, lr}
    bd22:	f000 f99b 	bl	c05c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    bd26:	f000 fa9f 	bl	c268 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    bd2a:	4c09      	ldr	r4, [pc, #36]	; (bd50 <MPSL_IRQ_CLOCK_Handler+0xb8>)
    bd2c:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    bd30:	b130      	cbz	r0, bd40 <MPSL_IRQ_CLOCK_Handler+0xa8>
    bd32:	f7ff ffe3 	bl	bcfc <MPSL_IRQ_CLOCK_Handler+0x64>
    bd36:	2001      	movs	r0, #1
    bd38:	6128      	str	r0, [r5, #16]
    bd3a:	2004      	movs	r0, #4
    bd3c:	72a0      	strb	r0, [r4, #10]
    bd3e:	e004      	b.n	bd4a <MPSL_IRQ_CLOCK_Handler+0xb2>
    bd40:	2003      	movs	r0, #3
    bd42:	72a0      	strb	r0, [r4, #10]
    bd44:	2001      	movs	r0, #1
    bd46:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    bd4a:	2000      	movs	r0, #0
    bd4c:	71e0      	strb	r0, [r4, #7]
    bd4e:	bd70      	pop	{r4, r5, r6, pc}
    bd50:	200002ec 	.word	0x200002ec
    bd54:	b570      	push	{r4, r5, r6, lr}
    bd56:	4c12      	ldr	r4, [pc, #72]	; (bda0 <MPSL_IRQ_CLOCK_Handler+0x108>)
    bd58:	79a0      	ldrb	r0, [r4, #6]
    bd5a:	b1e0      	cbz	r0, bd96 <MPSL_IRQ_CLOCK_Handler+0xfe>
    bd5c:	79e1      	ldrb	r1, [r4, #7]
    bd5e:	1e40      	subs	r0, r0, #1
    bd60:	4281      	cmp	r1, r0
    bd62:	da18      	bge.n	bd96 <MPSL_IRQ_CLOCK_Handler+0xfe>
    bd64:	f000 fa80 	bl	c268 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    bd68:	4605      	mov	r5, r0
    bd6a:	f000 fb69 	bl	c440 <mpsl_temperature_get>
    bd6e:	79a1      	ldrb	r1, [r4, #6]
    bd70:	2901      	cmp	r1, #1
    bd72:	d902      	bls.n	bd7a <MPSL_IRQ_CLOCK_Handler+0xe2>
    bd74:	79e1      	ldrb	r1, [r4, #7]
    bd76:	1c49      	adds	r1, r1, #1
    bd78:	71e1      	strb	r1, [r4, #7]
    bd7a:	b10d      	cbz	r5, bd80 <MPSL_IRQ_CLOCK_Handler+0xe8>
    bd7c:	6961      	ldr	r1, [r4, #20]
    bd7e:	e000      	b.n	bd82 <MPSL_IRQ_CLOCK_Handler+0xea>
    bd80:	6921      	ldr	r1, [r4, #16]
    bd82:	1a41      	subs	r1, r0, r1
    bd84:	2902      	cmp	r1, #2
    bd86:	da02      	bge.n	bd8e <MPSL_IRQ_CLOCK_Handler+0xf6>
    bd88:	f111 0f02 	cmn.w	r1, #2
    bd8c:	dc07      	bgt.n	bd9e <MPSL_IRQ_CLOCK_Handler+0x106>
    bd8e:	b10d      	cbz	r5, bd94 <MPSL_IRQ_CLOCK_Handler+0xfc>
    bd90:	6160      	str	r0, [r4, #20]
    bd92:	e000      	b.n	bd96 <MPSL_IRQ_CLOCK_Handler+0xfe>
    bd94:	6120      	str	r0, [r4, #16]
    bd96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    bd9a:	f7ff bfc1 	b.w	bd20 <MPSL_IRQ_CLOCK_Handler+0x88>
    bd9e:	bd70      	pop	{r4, r5, r6, pc}
    bda0:	200002ec 	.word	0x200002ec
    bda4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bda8:	4606      	mov	r6, r0
    bdaa:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    bdae:	f44f 7186 	mov.w	r1, #268	; 0x10c
    bdb2:	4628      	mov	r0, r5
    bdb4:	f004 faf3 	bl	1039e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    bdb8:	4680      	mov	r8, r0
    bdba:	f44f 7188 	mov.w	r1, #272	; 0x110
    bdbe:	4628      	mov	r0, r5
    bdc0:	f004 faed 	bl	1039e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    bdc4:	4c27      	ldr	r4, [pc, #156]	; (be64 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    bdc6:	4682      	mov	sl, r0
    bdc8:	7827      	ldrb	r7, [r4, #0]
    bdca:	f104 0008 	add.w	r0, r4, #8
    bdce:	f004 fb5a 	bl	10486 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    bdd2:	b110      	cbz	r0, bdda <MPSL_IRQ_CLOCK_Handler+0x142>
    bdd4:	f44f 71db 	mov.w	r1, #438	; 0x1b6
    bdd8:	e016      	b.n	be08 <MPSL_IRQ_CLOCK_Handler+0x170>
    bdda:	f04f 0901 	mov.w	r9, #1
    bdde:	b146      	cbz	r6, bdf2 <MPSL_IRQ_CLOCK_Handler+0x15a>
    bde0:	7aa0      	ldrb	r0, [r4, #10]
    bde2:	2803      	cmp	r0, #3
    bde4:	d105      	bne.n	bdf2 <MPSL_IRQ_CLOCK_Handler+0x15a>
    bde6:	2004      	movs	r0, #4
    bde8:	72a0      	strb	r0, [r4, #10]
    bdea:	f7ff ff87 	bl	bcfc <MPSL_IRQ_CLOCK_Handler+0x64>
    bdee:	f8c5 9010 	str.w	r9, [r5, #16]
    bdf2:	2600      	movs	r6, #0
    bdf4:	f1b8 0f00 	cmp.w	r8, #0
    bdf8:	d018      	beq.n	be2c <MPSL_IRQ_CLOCK_Handler+0x194>
    bdfa:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    bdfe:	7aa0      	ldrb	r0, [r4, #10]
    be00:	2804      	cmp	r0, #4
    be02:	d004      	beq.n	be0e <MPSL_IRQ_CLOCK_Handler+0x176>
    be04:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    be08:	206d      	movs	r0, #109	; 0x6d
    be0a:	f000 faa5 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    be0e:	f004 fb70 	bl	104f2 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    be12:	b928      	cbnz	r0, be20 <MPSL_IRQ_CLOCK_Handler+0x188>
    be14:	f004 fb8e 	bl	10534 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    be18:	b910      	cbnz	r0, be20 <MPSL_IRQ_CLOCK_Handler+0x188>
    be1a:	f004 fbc1 	bl	105a0 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    be1e:	b108      	cbz	r0, be24 <MPSL_IRQ_CLOCK_Handler+0x18c>
    be20:	4811      	ldr	r0, [pc, #68]	; (be68 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    be22:	6006      	str	r6, [r0, #0]
    be24:	2002      	movs	r0, #2
    be26:	72a0      	strb	r0, [r4, #10]
    be28:	f000 f8fc 	bl	c024 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    be2c:	f1ba 0f00 	cmp.w	sl, #0
    be30:	d008      	beq.n	be44 <MPSL_IRQ_CLOCK_Handler+0x1ac>
    be32:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    be36:	7aa0      	ldrb	r0, [r4, #10]
    be38:	2802      	cmp	r0, #2
    be3a:	d101      	bne.n	be40 <MPSL_IRQ_CLOCK_Handler+0x1a8>
    be3c:	f7ff ff8a 	bl	bd54 <MPSL_IRQ_CLOCK_Handler+0xbc>
    be40:	f8c5 9014 	str.w	r9, [r5, #20]
    be44:	b13f      	cbz	r7, be56 <MPSL_IRQ_CLOCK_Handler+0x1be>
    be46:	7026      	strb	r6, [r4, #0]
    be48:	7aa0      	ldrb	r0, [r4, #10]
    be4a:	2802      	cmp	r0, #2
    be4c:	d101      	bne.n	be52 <MPSL_IRQ_CLOCK_Handler+0x1ba>
    be4e:	f7ff ff67 	bl	bd20 <MPSL_IRQ_CLOCK_Handler+0x88>
    be52:	f000 f8e7 	bl	c024 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    be56:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    be5a:	4802      	ldr	r0, [pc, #8]	; (be64 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    be5c:	3008      	adds	r0, #8
    be5e:	f004 bb29 	b.w	104b4 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    be62:	0000      	.short	0x0000
    be64:	200002ec 	.word	0x200002ec
    be68:	40000c34 	.word	0x40000c34
    be6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    be70:	4c49      	ldr	r4, [pc, #292]	; (bf98 <MPSL_IRQ_CLOCK_Handler+0x300>)
    be72:	2700      	movs	r7, #0
    be74:	4606      	mov	r6, r0
    be76:	61a7      	str	r7, [r4, #24]
    be78:	7842      	ldrb	r2, [r0, #1]
    be7a:	7881      	ldrb	r1, [r0, #2]
    be7c:	7800      	ldrb	r0, [r0, #0]
    be7e:	72e0      	strb	r0, [r4, #11]
    be80:	7162      	strb	r2, [r4, #5]
    be82:	71a1      	strb	r1, [r4, #6]
    be84:	71e7      	strb	r7, [r4, #7]
    be86:	f04f 0801 	mov.w	r8, #1
    be8a:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    be8e:	2805      	cmp	r0, #5
    be90:	d225      	bcs.n	bede <MPSL_IRQ_CLOCK_Handler+0x246>
    be92:	e8df f000 	tbb	[pc, r0]
    be96:	0310      	.short	0x0310
    be98:	00222006 	.word	0x00222006
    be9c:	f8c4 8018 	str.w	r8, [r4, #24]
    bea0:	e009      	b.n	beb6 <MPSL_IRQ_CLOCK_Handler+0x21e>
    bea2:	f000 f8db 	bl	c05c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    bea6:	2101      	movs	r1, #1
    bea8:	4628      	mov	r0, r5
    beaa:	f004 fa7d 	bl	103a8 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    beae:	2800      	cmp	r0, #0
    beb0:	d0f9      	beq.n	bea6 <MPSL_IRQ_CLOCK_Handler+0x20e>
    beb2:	2002      	movs	r0, #2
    beb4:	61a0      	str	r0, [r4, #24]
    beb6:	f004 faa3 	bl	10400 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    beba:	b1c0      	cbz	r0, beee <MPSL_IRQ_CLOCK_Handler+0x256>
    bebc:	f000 f9ee 	bl	c29c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    bec0:	7e21      	ldrb	r1, [r4, #24]
    bec2:	f001 0103 	and.w	r1, r1, #3
    bec6:	4288      	cmp	r0, r1
    bec8:	d111      	bne.n	beee <MPSL_IRQ_CLOCK_Handler+0x256>
    beca:	79b0      	ldrb	r0, [r6, #6]
    becc:	b160      	cbz	r0, bee8 <MPSL_IRQ_CLOCK_Handler+0x250>
    bece:	2002      	movs	r0, #2
    bed0:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    bed4:	e044      	b.n	bf60 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    bed6:	4831      	ldr	r0, [pc, #196]	; (bf9c <MPSL_IRQ_CLOCK_Handler+0x304>)
    bed8:	e7ec      	b.n	beb4 <MPSL_IRQ_CLOCK_Handler+0x21c>
    beda:	4831      	ldr	r0, [pc, #196]	; (bfa0 <MPSL_IRQ_CLOCK_Handler+0x308>)
    bedc:	e7ea      	b.n	beb4 <MPSL_IRQ_CLOCK_Handler+0x21c>
    bede:	f240 313d 	movw	r1, #829	; 0x33d
    bee2:	206d      	movs	r0, #109	; 0x6d
    bee4:	f000 fa38 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bee8:	f000 f9ac 	bl	c244 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    beec:	e038      	b.n	bf60 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    beee:	f8c5 800c 	str.w	r8, [r5, #12]
    bef2:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    bef6:	69a0      	ldr	r0, [r4, #24]
    bef8:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    befc:	f004 fae5 	bl	104ca <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    bf00:	b940      	cbnz	r0, bf14 <MPSL_IRQ_CLOCK_Handler+0x27c>
    bf02:	f004 faec 	bl	104de <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    bf06:	b928      	cbnz	r0, bf14 <MPSL_IRQ_CLOCK_Handler+0x27c>
    bf08:	f004 fb00 	bl	1050c <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    bf0c:	b910      	cbnz	r0, bf14 <MPSL_IRQ_CLOCK_Handler+0x27c>
    bf0e:	f004 fb11 	bl	10534 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    bf12:	b138      	cbz	r0, bf24 <MPSL_IRQ_CLOCK_Handler+0x28c>
    bf14:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    bf18:	f8d0 0244 	ldr.w	r0, [r0, #580]	; 0x244
    bf1c:	4921      	ldr	r1, [pc, #132]	; (bfa4 <MPSL_IRQ_CLOCK_Handler+0x30c>)
    bf1e:	f3c0 3042 	ubfx	r0, r0, #13, #3
    bf22:	6008      	str	r0, [r1, #0]
    bf24:	f004 fad1 	bl	104ca <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    bf28:	b940      	cbnz	r0, bf3c <MPSL_IRQ_CLOCK_Handler+0x2a4>
    bf2a:	f004 fad8 	bl	104de <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    bf2e:	b928      	cbnz	r0, bf3c <MPSL_IRQ_CLOCK_Handler+0x2a4>
    bf30:	f004 faec 	bl	1050c <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    bf34:	b910      	cbnz	r0, bf3c <MPSL_IRQ_CLOCK_Handler+0x2a4>
    bf36:	f004 fafd 	bl	10534 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    bf3a:	b118      	cbz	r0, bf44 <MPSL_IRQ_CLOCK_Handler+0x2ac>
    bf3c:	4919      	ldr	r1, [pc, #100]	; (bfa4 <MPSL_IRQ_CLOCK_Handler+0x30c>)
    bf3e:	3110      	adds	r1, #16
    bf40:	f8c1 8000 	str.w	r8, [r1]
    bf44:	f8c5 8008 	str.w	r8, [r5, #8]
    bf48:	2002      	movs	r0, #2
    bf4a:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    bf4e:	79b0      	ldrb	r0, [r6, #6]
    bf50:	b930      	cbnz	r0, bf60 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    bf52:	f000 f829 	bl	bfa8 <MPSL_IRQ_CLOCK_Handler+0x310>
    bf56:	2002      	movs	r0, #2
    bf58:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    bf5c:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    bf60:	79a0      	ldrb	r0, [r4, #6]
    bf62:	b170      	cbz	r0, bf82 <MPSL_IRQ_CLOCK_Handler+0x2ea>
    bf64:	7830      	ldrb	r0, [r6, #0]
    bf66:	b960      	cbnz	r0, bf82 <MPSL_IRQ_CLOCK_Handler+0x2ea>
    bf68:	f000 f97e 	bl	c268 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    bf6c:	4606      	mov	r6, r0
    bf6e:	f000 fa67 	bl	c440 <mpsl_temperature_get>
    bf72:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    bf76:	b116      	cbz	r6, bf7e <MPSL_IRQ_CLOCK_Handler+0x2e6>
    bf78:	e9c4 1004 	strd	r1, r0, [r4, #16]
    bf7c:	e001      	b.n	bf82 <MPSL_IRQ_CLOCK_Handler+0x2ea>
    bf7e:	e9c4 0104 	strd	r0, r1, [r4, #16]
    bf82:	2101      	movs	r1, #1
    bf84:	4628      	mov	r0, r5
    bf86:	f004 fa0f 	bl	103a8 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    bf8a:	b108      	cbz	r0, bf90 <MPSL_IRQ_CLOCK_Handler+0x2f8>
    bf8c:	f000 f966 	bl	c25c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    bf90:	72a7      	strb	r7, [r4, #10]
    bf92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bf96:	0000      	.short	0x0000
    bf98:	200002ec 	.word	0x200002ec
    bf9c:	00020001 	.word	0x00020001
    bfa0:	00030001 	.word	0x00030001
    bfa4:	4000053c 	.word	0x4000053c
    bfa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bfac:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    bfb0:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    bfb4:	f010 0f02 	tst.w	r0, #2
    bfb8:	d011      	beq.n	bfde <MPSL_IRQ_CLOCK_Handler+0x346>
    bfba:	4c16      	ldr	r4, [pc, #88]	; (c014 <MPSL_IRQ_CLOCK_Handler+0x37c>)
    bfbc:	6820      	ldr	r0, [r4, #0]
    bfbe:	43c0      	mvns	r0, r0
    bfc0:	f340 1600 	sbfx	r6, r0, #4, #1
    bfc4:	6820      	ldr	r0, [r4, #0]
    bfc6:	f040 0010 	orr.w	r0, r0, #16
    bfca:	6020      	str	r0, [r4, #0]
    bfcc:	f44f 7782 	mov.w	r7, #260	; 0x104
    bfd0:	4639      	mov	r1, r7
    bfd2:	4628      	mov	r0, r5
    bfd4:	1c76      	adds	r6, r6, #1
    bfd6:	f004 f9e2 	bl	1039e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    bfda:	b128      	cbz	r0, bfe8 <MPSL_IRQ_CLOCK_Handler+0x350>
    bfdc:	e00a      	b.n	bff4 <MPSL_IRQ_CLOCK_Handler+0x35c>
    bfde:	f44f 713e 	mov.w	r1, #760	; 0x2f8
    bfe2:	206d      	movs	r0, #109	; 0x6d
    bfe4:	f000 f9b8 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bfe8:	f004 fae6 	bl	105b8 <sym_PHK7RXLFFTGYQNCW3IEEUVLOAYXWQJQYEN3DT7Y>
    bfec:	e002      	b.n	bff4 <MPSL_IRQ_CLOCK_Handler+0x35c>
    bfee:	bf00      	nop
    bff0:	f004 fae0 	bl	105b4 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    bff4:	4639      	mov	r1, r7
    bff6:	4628      	mov	r0, r5
    bff8:	f004 f9d1 	bl	1039e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    bffc:	2800      	cmp	r0, #0
    bffe:	d0f7      	beq.n	bff0 <MPSL_IRQ_CLOCK_Handler+0x358>
    c000:	f000 f920 	bl	c244 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    c004:	2e00      	cmp	r6, #0
    c006:	d103      	bne.n	c010 <MPSL_IRQ_CLOCK_Handler+0x378>
    c008:	6820      	ldr	r0, [r4, #0]
    c00a:	f020 0010 	bic.w	r0, r0, #16
    c00e:	6020      	str	r0, [r4, #0]
    c010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c014:	e000ed10 	.word	0xe000ed10

0000c018 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>:
    c018:	4801      	ldr	r0, [pc, #4]	; (c020 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q+0x8>)
    c01a:	89c0      	ldrh	r0, [r0, #14]
    c01c:	4770      	bx	lr
    c01e:	0000      	.short	0x0000
    c020:	200002ec 	.word	0x200002ec

0000c024 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    c024:	b510      	push	{r4, lr}
    c026:	f3ef 8410 	mrs	r4, PRIMASK
    c02a:	b672      	cpsid	i
    c02c:	480a      	ldr	r0, [pc, #40]	; (c058 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    c02e:	7841      	ldrb	r1, [r0, #1]
    c030:	b129      	cbz	r1, c03e <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    c032:	7841      	ldrb	r1, [r0, #1]
    c034:	1e49      	subs	r1, r1, #1
    c036:	7041      	strb	r1, [r0, #1]
    c038:	7841      	ldrb	r1, [r0, #1]
    c03a:	b129      	cbz	r1, c048 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    c03c:	e008      	b.n	c050 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    c03e:	f240 1119 	movw	r1, #281	; 0x119
    c042:	206d      	movs	r0, #109	; 0x6d
    c044:	f000 f988 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c048:	7880      	ldrb	r0, [r0, #2]
    c04a:	b908      	cbnz	r0, c050 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    c04c:	f000 f91a 	bl	c284 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    c050:	2c00      	cmp	r4, #0
    c052:	d100      	bne.n	c056 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    c054:	b662      	cpsie	i
    c056:	bd10      	pop	{r4, pc}
    c058:	200002ec 	.word	0x200002ec

0000c05c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    c05c:	b510      	push	{r4, lr}
    c05e:	f3ef 8410 	mrs	r4, PRIMASK
    c062:	b672      	cpsid	i
    c064:	4806      	ldr	r0, [pc, #24]	; (c080 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    c066:	7841      	ldrb	r1, [r0, #1]
    c068:	1c49      	adds	r1, r1, #1
    c06a:	7041      	strb	r1, [r0, #1]
    c06c:	7840      	ldrb	r0, [r0, #1]
    c06e:	2801      	cmp	r0, #1
    c070:	d101      	bne.n	c076 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    c072:	f004 f9b0 	bl	103d6 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    c076:	2c00      	cmp	r4, #0
    c078:	d100      	bne.n	c07c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    c07a:	b662      	cpsie	i
    c07c:	bd10      	pop	{r4, pc}
    c07e:	0000      	.short	0x0000
    c080:	200002ec 	.word	0x200002ec

0000c084 <mpsl_clock_hfclk_release>:
    c084:	4805      	ldr	r0, [pc, #20]	; (c09c <mpsl_clock_hfclk_release+0x18>)
    c086:	b510      	push	{r4, lr}
    c088:	78c1      	ldrb	r1, [r0, #3]
    c08a:	b121      	cbz	r1, c096 <mpsl_clock_hfclk_release+0x12>
    c08c:	2100      	movs	r1, #0
    c08e:	7101      	strb	r1, [r0, #4]
    c090:	70c1      	strb	r1, [r0, #3]
    c092:	f7ff ffc7 	bl	c024 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    c096:	2000      	movs	r0, #0
    c098:	bd10      	pop	{r4, pc}
    c09a:	0000      	.short	0x0000
    c09c:	200002ec 	.word	0x200002ec

0000c0a0 <mpsl_clock_hfclk_request>:
    c0a0:	b570      	push	{r4, r5, r6, lr}
    c0a2:	4c0c      	ldr	r4, [pc, #48]	; (c0d4 <mpsl_clock_hfclk_request+0x34>)
    c0a4:	78e1      	ldrb	r1, [r4, #3]
    c0a6:	b961      	cbnz	r1, c0c2 <mpsl_clock_hfclk_request+0x22>
    c0a8:	2501      	movs	r5, #1
    c0aa:	70e5      	strb	r5, [r4, #3]
    c0ac:	61e0      	str	r0, [r4, #28]
    c0ae:	f7ff ffd5 	bl	c05c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    c0b2:	f000 f8d9 	bl	c268 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    c0b6:	b130      	cbz	r0, c0c6 <mpsl_clock_hfclk_request+0x26>
    c0b8:	69e0      	ldr	r0, [r4, #28]
    c0ba:	b110      	cbz	r0, c0c2 <mpsl_clock_hfclk_request+0x22>
    c0bc:	4780      	blx	r0
    c0be:	2000      	movs	r0, #0
    c0c0:	61e0      	str	r0, [r4, #28]
    c0c2:	2000      	movs	r0, #0
    c0c4:	bd70      	pop	{r4, r5, r6, pc}
    c0c6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c0ca:	7125      	strb	r5, [r4, #4]
    c0cc:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    c0d0:	e7f7      	b.n	c0c2 <mpsl_clock_hfclk_request+0x22>
    c0d2:	0000      	.short	0x0000
    c0d4:	200002ec 	.word	0x200002ec

0000c0d8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    c0d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c0dc:	0005      	movs	r5, r0
    c0de:	f06f 0015 	mvn.w	r0, #21
    c0e2:	d03f      	beq.n	c164 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c0e4:	7829      	ldrb	r1, [r5, #0]
    c0e6:	2904      	cmp	r1, #4
    c0e8:	d83c      	bhi.n	c164 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c0ea:	2900      	cmp	r1, #0
    c0ec:	7869      	ldrb	r1, [r5, #1]
    c0ee:	d03b      	beq.n	c168 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x90>
    c0f0:	2900      	cmp	r1, #0
    c0f2:	d137      	bne.n	c164 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c0f4:	78a9      	ldrb	r1, [r5, #2]
    c0f6:	2900      	cmp	r1, #0
    c0f8:	d134      	bne.n	c164 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c0fa:	2000      	movs	r0, #0
    c0fc:	f004 f93e 	bl	1037c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x34>
    c100:	2000      	movs	r0, #0
    c102:	f004 f92e 	bl	10362 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    c106:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    c10a:	f04f 31ff 	mov.w	r1, #4294967295
    c10e:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    c112:	2600      	movs	r6, #0
    c114:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    c118:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    c11c:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    c120:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    c124:	4c14      	ldr	r4, [pc, #80]	; (c178 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    c126:	7066      	strb	r6, [r4, #1]
    c128:	88a8      	ldrh	r0, [r5, #4]
    c12a:	81a0      	strh	r0, [r4, #12]
    c12c:	f004 f94a 	bl	103c4 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    c130:	2701      	movs	r7, #1
    c132:	b108      	cbz	r0, c138 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    c134:	70e7      	strb	r7, [r4, #3]
    c136:	7067      	strb	r7, [r4, #1]
    c138:	2101      	movs	r1, #1
    c13a:	4640      	mov	r0, r8
    c13c:	f004 f934 	bl	103a8 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    c140:	b108      	cbz	r0, c146 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    c142:	f000 f88b 	bl	c25c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    c146:	f240 50f5 	movw	r0, #1525	; 0x5f5
    c14a:	81e0      	strh	r0, [r4, #14]
    c14c:	4628      	mov	r0, r5
    c14e:	f7ff fe8d 	bl	be6c <MPSL_IRQ_CLOCK_Handler+0x1d4>
    c152:	7267      	strb	r7, [r4, #9]
    c154:	2000      	movs	r0, #0
    c156:	f004 f904 	bl	10362 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    c15a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    c15e:	4630      	mov	r0, r6
    c160:	f8c1 7100 	str.w	r7, [r1, #256]	; 0x100
    c164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c168:	2900      	cmp	r1, #0
    c16a:	d0fb      	beq.n	c164 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c16c:	2920      	cmp	r1, #32
    c16e:	d8f9      	bhi.n	c164 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c170:	78a9      	ldrb	r1, [r5, #2]
    c172:	2921      	cmp	r1, #33	; 0x21
    c174:	d9c1      	bls.n	c0fa <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    c176:	e7f5      	b.n	c164 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c178:	200002ec 	.word	0x200002ec

0000c17c <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    c17c:	4801      	ldr	r0, [pc, #4]	; (c184 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    c17e:	8980      	ldrh	r0, [r0, #12]
    c180:	4770      	bx	lr
    c182:	0000      	.short	0x0000
    c184:	200002ec 	.word	0x200002ec

0000c188 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    c188:	4802      	ldr	r0, [pc, #8]	; (c194 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    c18a:	7a80      	ldrb	r0, [r0, #10]
    c18c:	2800      	cmp	r0, #0
    c18e:	d000      	beq.n	c192 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    c190:	2001      	movs	r0, #1
    c192:	4770      	bx	lr
    c194:	200002ec 	.word	0x200002ec

0000c198 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    c198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c19a:	4d1f      	ldr	r5, [pc, #124]	; (c218 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    c19c:	7ae8      	ldrb	r0, [r5, #11]
    c19e:	2800      	cmp	r0, #0
    c1a0:	d10f      	bne.n	c1c2 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    c1a2:	7e28      	ldrb	r0, [r5, #24]
    c1a4:	f000 0003 	and.w	r0, r0, #3
    c1a8:	f004 f91a 	bl	103e0 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    c1ac:	2800      	cmp	r0, #0
    c1ae:	d008      	beq.n	c1c2 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    c1b0:	f3ef 8110 	mrs	r1, PRIMASK
    c1b4:	b672      	cpsid	i
    c1b6:	f7ff ffe7 	bl	c188 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    c1ba:	b118      	cbz	r0, c1c4 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    c1bc:	2900      	cmp	r1, #0
    c1be:	d100      	bne.n	c1c2 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    c1c0:	b662      	cpsie	i
    c1c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c1c4:	2601      	movs	r6, #1
    c1c6:	72ae      	strb	r6, [r5, #10]
    c1c8:	b901      	cbnz	r1, c1cc <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    c1ca:	b662      	cpsie	i
    c1cc:	2018      	movs	r0, #24
    c1ce:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    c1d2:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    c1d6:	61a6      	str	r6, [r4, #24]
    c1d8:	f44f 7020 	mov.w	r0, #640	; 0x280
    c1dc:	f8ad 0000 	strh.w	r0, [sp]
    c1e0:	f8bd 0000 	ldrh.w	r0, [sp]
    c1e4:	1e41      	subs	r1, r0, #1
    c1e6:	f8ad 1000 	strh.w	r1, [sp]
    c1ea:	d2f9      	bcs.n	c1e0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    c1ec:	2700      	movs	r7, #0
    c1ee:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    c1f2:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    c1f6:	4808      	ldr	r0, [pc, #32]	; (c218 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    c1f8:	3008      	adds	r0, #8
    c1fa:	f004 f957 	bl	104ac <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    c1fe:	702f      	strb	r7, [r5, #0]
    c200:	f7ff fd8e 	bl	bd20 <MPSL_IRQ_CLOCK_Handler+0x88>
    c204:	6166      	str	r6, [r4, #20]
    c206:	7968      	ldrb	r0, [r5, #5]
    c208:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    c20c:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    c210:	2018      	movs	r0, #24
    c212:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    c216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c218:	200002ec 	.word	0x200002ec

0000c21c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    c21c:	4602      	mov	r2, r0
    c21e:	b510      	push	{r4, lr}
    c220:	2000      	movs	r0, #0
    c222:	2900      	cmp	r1, #0
    c224:	d00a      	beq.n	c23c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x20>
    c226:	2a00      	cmp	r2, #0
    c228:	d008      	beq.n	c23c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x20>
    c22a:	fba2 0101 	umull	r0, r1, r2, r1
    c22e:	1e40      	subs	r0, r0, #1
    c230:	4a03      	ldr	r2, [pc, #12]	; (c240 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x24>)
    c232:	f141 31ff 	adc.w	r1, r1, #4294967295
    c236:	f004 f9c1 	bl	105bc <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>
    c23a:	1c40      	adds	r0, r0, #1
    c23c:	bd10      	pop	{r4, pc}
    c23e:	0000      	.short	0x0000
    c240:	000f4240 	.word	0x000f4240

0000c244 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    c244:	b510      	push	{r4, lr}
    c246:	4c04      	ldr	r4, [pc, #16]	; (c258 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    c248:	7e20      	ldrb	r0, [r4, #24]
    c24a:	f000 0003 	and.w	r0, r0, #3
    c24e:	f004 f8c7 	bl	103e0 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    c252:	2800      	cmp	r0, #0
    c254:	d0f8      	beq.n	c248 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    c256:	bd10      	pop	{r4, pc}
    c258:	200002ec 	.word	0x200002ec

0000c25c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    c25c:	4901      	ldr	r1, [pc, #4]	; (c264 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    c25e:	2001      	movs	r0, #1
    c260:	7008      	strb	r0, [r1, #0]
    c262:	4770      	bx	lr
    c264:	2000036b 	.word	0x2000036b

0000c268 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    c268:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c26c:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    c270:	b918      	cbnz	r0, c27a <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    c272:	4803      	ldr	r0, [pc, #12]	; (c280 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    c274:	7800      	ldrb	r0, [r0, #0]
    c276:	2800      	cmp	r0, #0
    c278:	d000      	beq.n	c27c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    c27a:	2001      	movs	r0, #1
    c27c:	4770      	bx	lr
    c27e:	0000      	.short	0x0000
    c280:	2000036b 	.word	0x2000036b

0000c284 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    c284:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c288:	2101      	movs	r1, #1
    c28a:	6041      	str	r1, [r0, #4]
    c28c:	2100      	movs	r1, #0
    c28e:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    c292:	4801      	ldr	r0, [pc, #4]	; (c298 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    c294:	7001      	strb	r1, [r0, #0]
    c296:	4770      	bx	lr
    c298:	2000036b 	.word	0x2000036b

0000c29c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    c29c:	4802      	ldr	r0, [pc, #8]	; (c2a8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    c29e:	6800      	ldr	r0, [r0, #0]
    c2a0:	f000 0003 	and.w	r0, r0, #3
    c2a4:	4770      	bx	lr
    c2a6:	0000      	.short	0x0000
    c2a8:	4000041c 	.word	0x4000041c
    c2ac:	b510      	push	{r4, lr}
    c2ae:	b131      	cbz	r1, c2be <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    c2b0:	2901      	cmp	r1, #1
    c2b2:	d007      	beq.n	c2c4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    c2b4:	f240 3102 	movw	r1, #770	; 0x302
    c2b8:	a005      	add	r0, pc, #20	; (adr r0, c2d0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    c2ba:	f000 f821 	bl	c300 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    c2be:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    c2c2:	e001      	b.n	c2c8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    c2c4:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    c2c8:	f000 0001 	and.w	r0, r0, #1
    c2cc:	bd10      	pop	{r4, pc}
    c2ce:	0000      	.short	0x0000
    c2d0:	5f66726e 	.word	0x5f66726e
    c2d4:	636f6c63 	.word	0x636f6c63
    c2d8:	00682e6b 	.word	0x00682e6b
    c2dc:	f3bf 8f4f 	dsb	sy
    c2e0:	4805      	ldr	r0, [pc, #20]	; (c2f8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x5c>)
    c2e2:	6801      	ldr	r1, [r0, #0]
    c2e4:	4a05      	ldr	r2, [pc, #20]	; (c2fc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x60>)
    c2e6:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    c2ea:	4311      	orrs	r1, r2
    c2ec:	6001      	str	r1, [r0, #0]
    c2ee:	f3bf 8f4f 	dsb	sy
    c2f2:	bf00      	nop
    c2f4:	e7fd      	b.n	c2f2 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x56>
    c2f6:	0000      	.short	0x0000
    c2f8:	e000ed0c 	.word	0xe000ed0c
    c2fc:	05fa0004 	.word	0x05fa0004

0000c300 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    c300:	b672      	cpsid	i
    c302:	4a03      	ldr	r2, [pc, #12]	; (c310 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>)
    c304:	6852      	ldr	r2, [r2, #4]
    c306:	b102      	cbz	r2, c30a <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xa>
    c308:	4790      	blx	r2
    c30a:	f7ff ffe7 	bl	c2dc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    c30e:	0000      	.short	0x0000
    c310:	2000030c 	.word	0x2000030c
    c314:	4806      	ldr	r0, [pc, #24]	; (c330 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>)
    c316:	b510      	push	{r4, lr}
    c318:	2100      	movs	r1, #0
    c31a:	6001      	str	r1, [r0, #0]
    c31c:	2101      	movs	r1, #1
    c31e:	6001      	str	r1, [r0, #0]
    c320:	4608      	mov	r0, r1
    c322:	f004 f884 	bl	1042e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    c326:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c32a:	2001      	movs	r0, #1
    c32c:	f004 b872 	b.w	10414 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    c330:	40001ffc 	.word	0x40001ffc
    c334:	4807      	ldr	r0, [pc, #28]	; (c354 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x54>)
    c336:	b510      	push	{r4, lr}
    c338:	2101      	movs	r1, #1
    c33a:	6041      	str	r1, [r0, #4]
    c33c:	1e89      	subs	r1, r1, #2
    c33e:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    c342:	200c      	movs	r0, #12
    c344:	f004 f873 	bl	1042e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    c348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c34c:	200c      	movs	r0, #12
    c34e:	f004 b861 	b.w	10414 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    c352:	0000      	.short	0x0000
    c354:	4000c000 	.word	0x4000c000

0000c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    c358:	b50e      	push	{r1, r2, r3, lr}
    c35a:	b672      	cpsid	i
    c35c:	4a0f      	ldr	r2, [pc, #60]	; (c39c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    c35e:	6855      	ldr	r5, [r2, #4]
    c360:	b1d5      	cbz	r5, c398 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x40>
    c362:	2200      	movs	r2, #0
    c364:	4603      	mov	r3, r0
    c366:	466e      	mov	r6, sp
    c368:	240a      	movs	r4, #10
    c36a:	e003      	b.n	c374 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1c>
    c36c:	fbb0 f0f4 	udiv	r0, r0, r4
    c370:	1c52      	adds	r2, r2, #1
    c372:	b2d2      	uxtb	r2, r2
    c374:	2800      	cmp	r0, #0
    c376:	d1f9      	bne.n	c36c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x14>
    c378:	54b0      	strb	r0, [r6, r2]
    c37a:	e009      	b.n	c390 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    c37c:	fbb3 f0f4 	udiv	r0, r3, r4
    c380:	fb04 3010 	mls	r0, r4, r0, r3
    c384:	fbb3 f3f4 	udiv	r3, r3, r4
    c388:	1e52      	subs	r2, r2, #1
    c38a:	b2d2      	uxtb	r2, r2
    c38c:	3030      	adds	r0, #48	; 0x30
    c38e:	54b0      	strb	r0, [r6, r2]
    c390:	2a00      	cmp	r2, #0
    c392:	d1f3      	bne.n	c37c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    c394:	4630      	mov	r0, r6
    c396:	47a8      	blx	r5
    c398:	f7ff ffa0 	bl	c2dc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    c39c:	2000030c 	.word	0x2000030c

0000c3a0 <mpsl_init>:
    c3a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c3a4:	4c18      	ldr	r4, [pc, #96]	; (c408 <mpsl_init+0x68>)
    c3a6:	4606      	mov	r6, r0
    c3a8:	4617      	mov	r7, r2
    c3aa:	7860      	ldrb	r0, [r4, #1]
    c3ac:	460d      	mov	r5, r1
    c3ae:	b118      	cbz	r0, c3b8 <mpsl_init+0x18>
    c3b0:	f04f 30ff 	mov.w	r0, #4294967295
    c3b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c3b8:	f7fc fbe2 	bl	8b80 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>
    c3bc:	b906      	cbnz	r6, c3c0 <mpsl_init+0x20>
    c3be:	4e13      	ldr	r6, [pc, #76]	; (c40c <mpsl_init+0x6c>)
    c3c0:	6067      	str	r7, [r4, #4]
    c3c2:	7025      	strb	r5, [r4, #0]
    c3c4:	f7ff ffa6 	bl	c314 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x14>
    c3c8:	f7ff ffb4 	bl	c334 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x34>
    c3cc:	4630      	mov	r0, r6
    c3ce:	f7ff fe83 	bl	c0d8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    c3d2:	0006      	movs	r6, r0
    c3d4:	d1ee      	bne.n	c3b4 <mpsl_init+0x14>
    c3d6:	f7fe fe7d 	bl	b0d4 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    c3da:	f7ff fedd 	bl	c198 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    c3de:	f003 ff98 	bl	10312 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    c3e2:	4628      	mov	r0, r5
    c3e4:	f004 f816 	bl	10414 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    c3e8:	2001      	movs	r0, #1
    c3ea:	2d00      	cmp	r5, #0
    c3ec:	db09      	blt.n	c402 <mpsl_init+0x62>
    c3ee:	f005 011f 	and.w	r1, r5, #31
    c3f2:	fa00 f101 	lsl.w	r1, r0, r1
    c3f6:	096a      	lsrs	r2, r5, #5
    c3f8:	0092      	lsls	r2, r2, #2
    c3fa:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    c3fe:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    c402:	7060      	strb	r0, [r4, #1]
    c404:	4630      	mov	r0, r6
    c406:	e7d5      	b.n	c3b4 <mpsl_init+0x14>
    c408:	2000030c 	.word	0x2000030c
    c40c:	00010450 	.word	0x00010450

0000c410 <mpsl_is_initialized>:
    c410:	4801      	ldr	r0, [pc, #4]	; (c418 <mpsl_is_initialized+0x8>)
    c412:	7840      	ldrb	r0, [r0, #1]
    c414:	4770      	bx	lr
    c416:	0000      	.short	0x0000
    c418:	2000030c 	.word	0x2000030c

0000c41c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    c41c:	4807      	ldr	r0, [pc, #28]	; (c43c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    c41e:	f990 0000 	ldrsb.w	r0, [r0]
    c422:	2800      	cmp	r0, #0
    c424:	db09      	blt.n	c43a <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    c426:	f000 021f 	and.w	r2, r0, #31
    c42a:	2101      	movs	r1, #1
    c42c:	4091      	lsls	r1, r2
    c42e:	0940      	lsrs	r0, r0, #5
    c430:	0080      	lsls	r0, r0, #2
    c432:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c436:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    c43a:	4770      	bx	lr
    c43c:	2000030c 	.word	0x2000030c

0000c440 <mpsl_temperature_get>:
    c440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c444:	2601      	movs	r6, #1
    c446:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    c44a:	0331      	lsls	r1, r6, #12
    c44c:	f04f 0800 	mov.w	r8, #0
    c450:	4640      	mov	r0, r8
    c452:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    c456:	f3bf 8f4f 	dsb	sy
    c45a:	f3bf 8f6f 	isb	sy
    c45e:	4c16      	ldr	r4, [pc, #88]	; (c4b8 <mpsl_temperature_get+0x78>)
    c460:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    c464:	200c      	movs	r0, #12
    c466:	f004 f801 	bl	1046c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    c46a:	4d14      	ldr	r5, [pc, #80]	; (c4bc <mpsl_temperature_get+0x7c>)
    c46c:	6828      	ldr	r0, [r5, #0]
    c46e:	43c0      	mvns	r0, r0
    c470:	f340 1700 	sbfx	r7, r0, #4, #1
    c474:	6828      	ldr	r0, [r5, #0]
    c476:	f040 0010 	orr.w	r0, r0, #16
    c47a:	6028      	str	r0, [r5, #0]
    c47c:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    c480:	6026      	str	r6, [r4, #0]
    c482:	1c7f      	adds	r7, r7, #1
    c484:	e002      	b.n	c48c <mpsl_temperature_get+0x4c>
    c486:	bf00      	nop
    c488:	f004 f894 	bl	105b4 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    c48c:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    c490:	2800      	cmp	r0, #0
    c492:	d0f9      	beq.n	c488 <mpsl_temperature_get+0x48>
    c494:	b91f      	cbnz	r7, c49e <mpsl_temperature_get+0x5e>
    c496:	6828      	ldr	r0, [r5, #0]
    c498:	f020 0010 	bic.w	r0, r0, #16
    c49c:	6028      	str	r0, [r5, #0]
    c49e:	4808      	ldr	r0, [pc, #32]	; (c4c0 <mpsl_temperature_get+0x80>)
    c4a0:	6805      	ldr	r5, [r0, #0]
    c4a2:	6066      	str	r6, [r4, #4]
    c4a4:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    c4a8:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    c4ac:	200c      	movs	r0, #12
    c4ae:	f003 ffdd 	bl	1046c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    c4b2:	4628      	mov	r0, r5
    c4b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c4b8:	4000c000 	.word	0x4000c000
    c4bc:	e000ed10 	.word	0xe000ed10
    c4c0:	4000c508 	.word	0x4000c508

0000c4c4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    c4c4:	b510      	push	{r4, lr}
    c4c6:	4602      	mov	r2, r0
    c4c8:	2005      	movs	r0, #5
    c4ca:	490c      	ldr	r1, [pc, #48]	; (c4fc <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    c4cc:	e004      	b.n	c4d8 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    c4ce:	bf00      	nop
    c4d0:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    c4d4:	791b      	ldrb	r3, [r3, #4]
    c4d6:	b133      	cbz	r3, c4e6 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    c4d8:	1e40      	subs	r0, r0, #1
    c4da:	b2c0      	uxtb	r0, r0
    c4dc:	d2f8      	bcs.n	c4d0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    c4de:	2148      	movs	r1, #72	; 0x48
    c4e0:	2069      	movs	r0, #105	; 0x69
    c4e2:	f7ff ff39 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c4e6:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    c4ea:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    c4ee:	2200      	movs	r2, #0
    c4f0:	714a      	strb	r2, [r1, #5]
    c4f2:	718a      	strb	r2, [r1, #6]
    c4f4:	2201      	movs	r2, #1
    c4f6:	710a      	strb	r2, [r1, #4]
    c4f8:	bd10      	pop	{r4, pc}
    c4fa:	0000      	.short	0x0000
    c4fc:	200014d4 	.word	0x200014d4

0000c500 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    c500:	b510      	push	{r4, lr}
    c502:	2805      	cmp	r0, #5
    c504:	d301      	bcc.n	c50a <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    c506:	2158      	movs	r1, #88	; 0x58
    c508:	e006      	b.n	c518 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    c50a:	490a      	ldr	r1, [pc, #40]	; (c534 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    c50c:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    c510:	7901      	ldrb	r1, [r0, #4]
    c512:	2901      	cmp	r1, #1
    c514:	d003      	beq.n	c51e <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    c516:	2159      	movs	r1, #89	; 0x59
    c518:	2069      	movs	r0, #105	; 0x69
    c51a:	f7ff ff1d 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c51e:	7941      	ldrb	r1, [r0, #5]
    c520:	7982      	ldrb	r2, [r0, #6]
    c522:	1c49      	adds	r1, r1, #1
    c524:	b2c9      	uxtb	r1, r1
    c526:	428a      	cmp	r2, r1
    c528:	d000      	beq.n	c52c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    c52a:	7141      	strb	r1, [r0, #5]
    c52c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c530:	f7ff bf74 	b.w	c41c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    c534:	200014d4 	.word	0x200014d4

0000c538 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>:
    c538:	b510      	push	{r4, lr}
    c53a:	2805      	cmp	r0, #5
    c53c:	d303      	bcc.n	c546 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0xe>
    c53e:	214f      	movs	r1, #79	; 0x4f
    c540:	2069      	movs	r0, #105	; 0x69
    c542:	f7ff ff09 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c546:	4a03      	ldr	r2, [pc, #12]	; (c554 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0x1c>)
    c548:	2100      	movs	r1, #0
    c54a:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    c54e:	7101      	strb	r1, [r0, #4]
    c550:	bd10      	pop	{r4, pc}
    c552:	0000      	.short	0x0000
    c554:	200014d4 	.word	0x200014d4

0000c558 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    c558:	b570      	push	{r4, r5, r6, lr}
    c55a:	2505      	movs	r5, #5
    c55c:	4e0e      	ldr	r6, [pc, #56]	; (c598 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    c55e:	4c0f      	ldr	r4, [pc, #60]	; (c59c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    c560:	e016      	b.n	c590 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    c562:	7821      	ldrb	r1, [r4, #0]
    c564:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    c568:	7902      	ldrb	r2, [r0, #4]
    c56a:	2a01      	cmp	r2, #1
    c56c:	d108      	bne.n	c580 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    c56e:	7942      	ldrb	r2, [r0, #5]
    c570:	7983      	ldrb	r3, [r0, #6]
    c572:	429a      	cmp	r2, r3
    c574:	d004      	beq.n	c580 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    c576:	7942      	ldrb	r2, [r0, #5]
    c578:	7182      	strb	r2, [r0, #6]
    c57a:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    c57e:	4780      	blx	r0
    c580:	7820      	ldrb	r0, [r4, #0]
    c582:	1c40      	adds	r0, r0, #1
    c584:	b2c0      	uxtb	r0, r0
    c586:	7020      	strb	r0, [r4, #0]
    c588:	2805      	cmp	r0, #5
    c58a:	d301      	bcc.n	c590 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    c58c:	2000      	movs	r0, #0
    c58e:	7020      	strb	r0, [r4, #0]
    c590:	1e6d      	subs	r5, r5, #1
    c592:	b2ed      	uxtb	r5, r5
    c594:	d2e5      	bcs.n	c562 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    c596:	bd70      	pop	{r4, r5, r6, pc}
    c598:	200014d4 	.word	0x200014d4
    c59c:	2000036c 	.word	0x2000036c

0000c5a0 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    c5a0:	b500      	push	{lr}
    c5a2:	f003 ff92 	bl	104ca <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    c5a6:	b940      	cbnz	r0, c5ba <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    c5a8:	f003 ff99 	bl	104de <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    c5ac:	b928      	cbnz	r0, c5ba <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    c5ae:	f003 ffad 	bl	1050c <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    c5b2:	b910      	cbnz	r0, c5ba <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    c5b4:	f003 ffbe 	bl	10534 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c5b8:	b108      	cbz	r0, c5be <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    c5ba:	4802      	ldr	r0, [pc, #8]	; (c5c4 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    c5bc:	bd00      	pop	{pc}
    c5be:	4802      	ldr	r0, [pc, #8]	; (c5c8 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    c5c0:	bd00      	pop	{pc}
    c5c2:	0000      	.short	0x0000
    c5c4:	4000050c 	.word	0x4000050c
    c5c8:	4001e700 	.word	0x4001e700
    c5cc:	b510      	push	{r4, lr}
    c5ce:	f003 ffb1 	bl	10534 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c5d2:	b330      	cbz	r0, c622 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x82>
    c5d4:	f3ef 8010 	mrs	r0, PRIMASK
    c5d8:	b1c8      	cbz	r0, c60e <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x6e>
    c5da:	2100      	movs	r1, #0
    c5dc:	b672      	cpsid	i
    c5de:	4812      	ldr	r0, [pc, #72]	; (c628 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x88>)
    c5e0:	6802      	ldr	r2, [r0, #0]
    c5e2:	6803      	ldr	r3, [r0, #0]
    c5e4:	f3c2 1200 	ubfx	r2, r2, #4, #1
    c5e8:	f043 0310 	orr.w	r3, r3, #16
    c5ec:	6003      	str	r3, [r0, #0]
    c5ee:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    c5f2:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    c5f6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    c5fa:	431c      	orrs	r4, r3
    c5fc:	d000      	beq.n	c600 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x60>
    c5fe:	bf40      	sev
    c600:	bf20      	wfe
    c602:	bf00      	nop
    c604:	bf00      	nop
    c606:	bf00      	nop
    c608:	bf00      	nop
    c60a:	b112      	cbz	r2, c612 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x72>
    c60c:	e005      	b.n	c61a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x7a>
    c60e:	2101      	movs	r1, #1
    c610:	e7e4      	b.n	c5dc <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x3c>
    c612:	6802      	ldr	r2, [r0, #0]
    c614:	f022 0210 	bic.w	r2, r2, #16
    c618:	6002      	str	r2, [r0, #0]
    c61a:	2900      	cmp	r1, #0
    c61c:	d000      	beq.n	c620 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x80>
    c61e:	b662      	cpsie	i
    c620:	bd10      	pop	{r4, pc}
    c622:	bf20      	wfe
    c624:	bd10      	pop	{r4, pc}
    c626:	0000      	.short	0x0000
    c628:	e000ed10 	.word	0xe000ed10

0000c62c <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>:
    c62c:	4901      	ldr	r1, [pc, #4]	; (c634 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q+0x8>)
    c62e:	2001      	movs	r0, #1
    c630:	7088      	strb	r0, [r1, #2]
    c632:	4770      	bx	lr
    c634:	20000314 	.word	0x20000314

0000c638 <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    c638:	0001083b 00010873 0001085d 0001084b     ;...s...]...K...
    c648:	00010857 00010845 00010839 00010837     W...E...9...7...
    c658:	0001086f 00010863 00010851 0001083f     o...c...Q...?...
    c668:	00010831 00010829 0001082d 00010823     1...)...-...#...

0000c678 <mpsl_fem_disable>:
    c678:	4801      	ldr	r0, [pc, #4]	; (c680 <mpsl_fem_disable+0x8>)
    c67a:	6800      	ldr	r0, [r0, #0]
    c67c:	6800      	ldr	r0, [r0, #0]
    c67e:	4700      	bx	r0
    c680:	20000328 	.word	0x20000328

0000c684 <mpsl_fem_lna_configuration_clear>:
    c684:	4801      	ldr	r0, [pc, #4]	; (c68c <mpsl_fem_lna_configuration_clear+0x8>)
    c686:	6800      	ldr	r0, [r0, #0]
    c688:	6940      	ldr	r0, [r0, #20]
    c68a:	4700      	bx	r0
    c68c:	20000328 	.word	0x20000328

0000c690 <mpsl_fem_lna_configuration_set>:
    c690:	4a01      	ldr	r2, [pc, #4]	; (c698 <mpsl_fem_lna_configuration_set+0x8>)
    c692:	6812      	ldr	r2, [r2, #0]
    c694:	68d2      	ldr	r2, [r2, #12]
    c696:	4710      	bx	r2
    c698:	20000328 	.word	0x20000328

0000c69c <mpsl_fem_lna_is_configured>:
    c69c:	4901      	ldr	r1, [pc, #4]	; (c6a4 <mpsl_fem_lna_is_configured+0x8>)
    c69e:	6809      	ldr	r1, [r1, #0]
    c6a0:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    c6a2:	4708      	bx	r1
    c6a4:	20000328 	.word	0x20000328

0000c6a8 <mpsl_fem_pa_configuration_clear>:
    c6a8:	4801      	ldr	r0, [pc, #4]	; (c6b0 <mpsl_fem_pa_configuration_clear+0x8>)
    c6aa:	6800      	ldr	r0, [r0, #0]
    c6ac:	6900      	ldr	r0, [r0, #16]
    c6ae:	4700      	bx	r0
    c6b0:	20000328 	.word	0x20000328

0000c6b4 <mpsl_fem_pa_configuration_set>:
    c6b4:	4a01      	ldr	r2, [pc, #4]	; (c6bc <mpsl_fem_pa_configuration_set+0x8>)
    c6b6:	6812      	ldr	r2, [r2, #0]
    c6b8:	6892      	ldr	r2, [r2, #8]
    c6ba:	4710      	bx	r2
    c6bc:	20000328 	.word	0x20000328

0000c6c0 <mpsl_fem_pa_gain_set>:
    c6c0:	4901      	ldr	r1, [pc, #4]	; (c6c8 <mpsl_fem_pa_gain_set+0x8>)
    c6c2:	6809      	ldr	r1, [r1, #0]
    c6c4:	6a49      	ldr	r1, [r1, #36]	; 0x24
    c6c6:	4708      	bx	r1
    c6c8:	20000328 	.word	0x20000328

0000c6cc <mpsl_fem_pa_is_configured>:
    c6cc:	4901      	ldr	r1, [pc, #4]	; (c6d4 <mpsl_fem_pa_is_configured+0x8>)
    c6ce:	6809      	ldr	r1, [r1, #0]
    c6d0:	6a89      	ldr	r1, [r1, #40]	; 0x28
    c6d2:	4708      	bx	r1
    c6d4:	20000328 	.word	0x20000328

0000c6d8 <mpsl_fem_tx_power_split>:
    c6d8:	b430      	push	{r4, r5}
    c6da:	4c03      	ldr	r4, [pc, #12]	; (c6e8 <mpsl_fem_tx_power_split+0x10>)
    c6dc:	6824      	ldr	r4, [r4, #0]
    c6de:	6864      	ldr	r4, [r4, #4]
    c6e0:	46a4      	mov	ip, r4
    c6e2:	bc30      	pop	{r4, r5}
    c6e4:	4760      	bx	ip
    c6e6:	0000      	.short	0x0000
    c6e8:	20000328 	.word	0x20000328

0000c6ec <mpsl_fem_device_config_254_apply_get>:
    c6ec:	4801      	ldr	r0, [pc, #4]	; (c6f4 <mpsl_fem_device_config_254_apply_get+0x8>)
    c6ee:	7800      	ldrb	r0, [r0, #0]
    c6f0:	4770      	bx	lr
    c6f2:	0000      	.short	0x0000
    c6f4:	2000036d 	.word	0x2000036d

0000c6f8 <__udivmoddi4>:
    c6f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c6fc:	4686      	mov	lr, r0
    c6fe:	468c      	mov	ip, r1
    c700:	4608      	mov	r0, r1
    c702:	9e08      	ldr	r6, [sp, #32]
    c704:	4615      	mov	r5, r2
    c706:	4674      	mov	r4, lr
    c708:	4619      	mov	r1, r3
    c70a:	2b00      	cmp	r3, #0
    c70c:	f040 80c2 	bne.w	c894 <__udivmoddi4+0x19c>
    c710:	4285      	cmp	r5, r0
    c712:	fab2 f282 	clz	r2, r2
    c716:	d945      	bls.n	c7a4 <__udivmoddi4+0xac>
    c718:	b14a      	cbz	r2, c72e <__udivmoddi4+0x36>
    c71a:	f1c2 0320 	rsb	r3, r2, #32
    c71e:	fa00 fc02 	lsl.w	ip, r0, r2
    c722:	fa2e f303 	lsr.w	r3, lr, r3
    c726:	4095      	lsls	r5, r2
    c728:	ea43 0c0c 	orr.w	ip, r3, ip
    c72c:	4094      	lsls	r4, r2
    c72e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c732:	b2a8      	uxth	r0, r5
    c734:	fbbc f8fe 	udiv	r8, ip, lr
    c738:	0c23      	lsrs	r3, r4, #16
    c73a:	fb0e cc18 	mls	ip, lr, r8, ip
    c73e:	fb08 f900 	mul.w	r9, r8, r0
    c742:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    c746:	4599      	cmp	r9, r3
    c748:	d928      	bls.n	c79c <__udivmoddi4+0xa4>
    c74a:	18eb      	adds	r3, r5, r3
    c74c:	f108 37ff 	add.w	r7, r8, #4294967295
    c750:	d204      	bcs.n	c75c <__udivmoddi4+0x64>
    c752:	4599      	cmp	r9, r3
    c754:	d902      	bls.n	c75c <__udivmoddi4+0x64>
    c756:	f1a8 0702 	sub.w	r7, r8, #2
    c75a:	442b      	add	r3, r5
    c75c:	eba3 0309 	sub.w	r3, r3, r9
    c760:	b2a4      	uxth	r4, r4
    c762:	fbb3 fcfe 	udiv	ip, r3, lr
    c766:	fb0e 331c 	mls	r3, lr, ip, r3
    c76a:	fb0c f000 	mul.w	r0, ip, r0
    c76e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    c772:	42a0      	cmp	r0, r4
    c774:	d914      	bls.n	c7a0 <__udivmoddi4+0xa8>
    c776:	192c      	adds	r4, r5, r4
    c778:	f10c 33ff 	add.w	r3, ip, #4294967295
    c77c:	d204      	bcs.n	c788 <__udivmoddi4+0x90>
    c77e:	42a0      	cmp	r0, r4
    c780:	d902      	bls.n	c788 <__udivmoddi4+0x90>
    c782:	f1ac 0302 	sub.w	r3, ip, #2
    c786:	442c      	add	r4, r5
    c788:	1a24      	subs	r4, r4, r0
    c78a:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    c78e:	b11e      	cbz	r6, c798 <__udivmoddi4+0xa0>
    c790:	40d4      	lsrs	r4, r2
    c792:	2300      	movs	r3, #0
    c794:	6034      	str	r4, [r6, #0]
    c796:	6073      	str	r3, [r6, #4]
    c798:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c79c:	4647      	mov	r7, r8
    c79e:	e7dd      	b.n	c75c <__udivmoddi4+0x64>
    c7a0:	4663      	mov	r3, ip
    c7a2:	e7f1      	b.n	c788 <__udivmoddi4+0x90>
    c7a4:	bb92      	cbnz	r2, c80c <__udivmoddi4+0x114>
    c7a6:	1b43      	subs	r3, r0, r5
    c7a8:	2101      	movs	r1, #1
    c7aa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c7ae:	b2af      	uxth	r7, r5
    c7b0:	fbb3 fcfe 	udiv	ip, r3, lr
    c7b4:	0c20      	lsrs	r0, r4, #16
    c7b6:	fb0e 331c 	mls	r3, lr, ip, r3
    c7ba:	fb0c f807 	mul.w	r8, ip, r7
    c7be:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    c7c2:	4598      	cmp	r8, r3
    c7c4:	d962      	bls.n	c88c <__udivmoddi4+0x194>
    c7c6:	18eb      	adds	r3, r5, r3
    c7c8:	f10c 30ff 	add.w	r0, ip, #4294967295
    c7cc:	d204      	bcs.n	c7d8 <__udivmoddi4+0xe0>
    c7ce:	4598      	cmp	r8, r3
    c7d0:	d902      	bls.n	c7d8 <__udivmoddi4+0xe0>
    c7d2:	f1ac 0002 	sub.w	r0, ip, #2
    c7d6:	442b      	add	r3, r5
    c7d8:	eba3 0308 	sub.w	r3, r3, r8
    c7dc:	b2a4      	uxth	r4, r4
    c7de:	fbb3 fcfe 	udiv	ip, r3, lr
    c7e2:	fb0e 331c 	mls	r3, lr, ip, r3
    c7e6:	fb0c f707 	mul.w	r7, ip, r7
    c7ea:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    c7ee:	42a7      	cmp	r7, r4
    c7f0:	d94e      	bls.n	c890 <__udivmoddi4+0x198>
    c7f2:	192c      	adds	r4, r5, r4
    c7f4:	f10c 33ff 	add.w	r3, ip, #4294967295
    c7f8:	d204      	bcs.n	c804 <__udivmoddi4+0x10c>
    c7fa:	42a7      	cmp	r7, r4
    c7fc:	d902      	bls.n	c804 <__udivmoddi4+0x10c>
    c7fe:	f1ac 0302 	sub.w	r3, ip, #2
    c802:	442c      	add	r4, r5
    c804:	1be4      	subs	r4, r4, r7
    c806:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    c80a:	e7c0      	b.n	c78e <__udivmoddi4+0x96>
    c80c:	f1c2 0320 	rsb	r3, r2, #32
    c810:	fa20 f103 	lsr.w	r1, r0, r3
    c814:	4095      	lsls	r5, r2
    c816:	4090      	lsls	r0, r2
    c818:	fa2e f303 	lsr.w	r3, lr, r3
    c81c:	4303      	orrs	r3, r0
    c81e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c822:	b2af      	uxth	r7, r5
    c824:	fbb1 fcfe 	udiv	ip, r1, lr
    c828:	fb0e 101c 	mls	r0, lr, ip, r1
    c82c:	0c19      	lsrs	r1, r3, #16
    c82e:	fb0c f807 	mul.w	r8, ip, r7
    c832:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    c836:	4588      	cmp	r8, r1
    c838:	fa04 f402 	lsl.w	r4, r4, r2
    c83c:	d922      	bls.n	c884 <__udivmoddi4+0x18c>
    c83e:	1869      	adds	r1, r5, r1
    c840:	f10c 30ff 	add.w	r0, ip, #4294967295
    c844:	d204      	bcs.n	c850 <__udivmoddi4+0x158>
    c846:	4588      	cmp	r8, r1
    c848:	d902      	bls.n	c850 <__udivmoddi4+0x158>
    c84a:	f1ac 0002 	sub.w	r0, ip, #2
    c84e:	4429      	add	r1, r5
    c850:	eba1 0108 	sub.w	r1, r1, r8
    c854:	b29b      	uxth	r3, r3
    c856:	fbb1 fcfe 	udiv	ip, r1, lr
    c85a:	fb0e 111c 	mls	r1, lr, ip, r1
    c85e:	fb0c f707 	mul.w	r7, ip, r7
    c862:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    c866:	429f      	cmp	r7, r3
    c868:	d90e      	bls.n	c888 <__udivmoddi4+0x190>
    c86a:	18eb      	adds	r3, r5, r3
    c86c:	f10c 31ff 	add.w	r1, ip, #4294967295
    c870:	d204      	bcs.n	c87c <__udivmoddi4+0x184>
    c872:	429f      	cmp	r7, r3
    c874:	d902      	bls.n	c87c <__udivmoddi4+0x184>
    c876:	f1ac 0102 	sub.w	r1, ip, #2
    c87a:	442b      	add	r3, r5
    c87c:	1bdb      	subs	r3, r3, r7
    c87e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    c882:	e792      	b.n	c7aa <__udivmoddi4+0xb2>
    c884:	4660      	mov	r0, ip
    c886:	e7e3      	b.n	c850 <__udivmoddi4+0x158>
    c888:	4661      	mov	r1, ip
    c88a:	e7f7      	b.n	c87c <__udivmoddi4+0x184>
    c88c:	4660      	mov	r0, ip
    c88e:	e7a3      	b.n	c7d8 <__udivmoddi4+0xe0>
    c890:	4663      	mov	r3, ip
    c892:	e7b7      	b.n	c804 <__udivmoddi4+0x10c>
    c894:	4283      	cmp	r3, r0
    c896:	d906      	bls.n	c8a6 <__udivmoddi4+0x1ae>
    c898:	b916      	cbnz	r6, c8a0 <__udivmoddi4+0x1a8>
    c89a:	2100      	movs	r1, #0
    c89c:	4608      	mov	r0, r1
    c89e:	e77b      	b.n	c798 <__udivmoddi4+0xa0>
    c8a0:	e9c6 e000 	strd	lr, r0, [r6]
    c8a4:	e7f9      	b.n	c89a <__udivmoddi4+0x1a2>
    c8a6:	fab3 f783 	clz	r7, r3
    c8aa:	b98f      	cbnz	r7, c8d0 <__udivmoddi4+0x1d8>
    c8ac:	4283      	cmp	r3, r0
    c8ae:	d301      	bcc.n	c8b4 <__udivmoddi4+0x1bc>
    c8b0:	4572      	cmp	r2, lr
    c8b2:	d808      	bhi.n	c8c6 <__udivmoddi4+0x1ce>
    c8b4:	ebbe 0402 	subs.w	r4, lr, r2
    c8b8:	eb60 0303 	sbc.w	r3, r0, r3
    c8bc:	2001      	movs	r0, #1
    c8be:	469c      	mov	ip, r3
    c8c0:	b91e      	cbnz	r6, c8ca <__udivmoddi4+0x1d2>
    c8c2:	2100      	movs	r1, #0
    c8c4:	e768      	b.n	c798 <__udivmoddi4+0xa0>
    c8c6:	4638      	mov	r0, r7
    c8c8:	e7fa      	b.n	c8c0 <__udivmoddi4+0x1c8>
    c8ca:	e9c6 4c00 	strd	r4, ip, [r6]
    c8ce:	e7f8      	b.n	c8c2 <__udivmoddi4+0x1ca>
    c8d0:	f1c7 0c20 	rsb	ip, r7, #32
    c8d4:	40bb      	lsls	r3, r7
    c8d6:	fa22 f40c 	lsr.w	r4, r2, ip
    c8da:	431c      	orrs	r4, r3
    c8dc:	fa2e f10c 	lsr.w	r1, lr, ip
    c8e0:	fa20 f30c 	lsr.w	r3, r0, ip
    c8e4:	40b8      	lsls	r0, r7
    c8e6:	4301      	orrs	r1, r0
    c8e8:	ea4f 4914 	mov.w	r9, r4, lsr #16
    c8ec:	fa0e f507 	lsl.w	r5, lr, r7
    c8f0:	fbb3 f8f9 	udiv	r8, r3, r9
    c8f4:	fa1f fe84 	uxth.w	lr, r4
    c8f8:	fb09 3018 	mls	r0, r9, r8, r3
    c8fc:	0c0b      	lsrs	r3, r1, #16
    c8fe:	fb08 fa0e 	mul.w	sl, r8, lr
    c902:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    c906:	459a      	cmp	sl, r3
    c908:	fa02 f207 	lsl.w	r2, r2, r7
    c90c:	d940      	bls.n	c990 <__udivmoddi4+0x298>
    c90e:	18e3      	adds	r3, r4, r3
    c910:	f108 30ff 	add.w	r0, r8, #4294967295
    c914:	d204      	bcs.n	c920 <__udivmoddi4+0x228>
    c916:	459a      	cmp	sl, r3
    c918:	d902      	bls.n	c920 <__udivmoddi4+0x228>
    c91a:	f1a8 0002 	sub.w	r0, r8, #2
    c91e:	4423      	add	r3, r4
    c920:	eba3 030a 	sub.w	r3, r3, sl
    c924:	b289      	uxth	r1, r1
    c926:	fbb3 f8f9 	udiv	r8, r3, r9
    c92a:	fb09 3318 	mls	r3, r9, r8, r3
    c92e:	fb08 fe0e 	mul.w	lr, r8, lr
    c932:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    c936:	458e      	cmp	lr, r1
    c938:	d92c      	bls.n	c994 <__udivmoddi4+0x29c>
    c93a:	1861      	adds	r1, r4, r1
    c93c:	f108 33ff 	add.w	r3, r8, #4294967295
    c940:	d204      	bcs.n	c94c <__udivmoddi4+0x254>
    c942:	458e      	cmp	lr, r1
    c944:	d902      	bls.n	c94c <__udivmoddi4+0x254>
    c946:	f1a8 0302 	sub.w	r3, r8, #2
    c94a:	4421      	add	r1, r4
    c94c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    c950:	fba0 9802 	umull	r9, r8, r0, r2
    c954:	eba1 010e 	sub.w	r1, r1, lr
    c958:	4541      	cmp	r1, r8
    c95a:	46ce      	mov	lr, r9
    c95c:	4643      	mov	r3, r8
    c95e:	d302      	bcc.n	c966 <__udivmoddi4+0x26e>
    c960:	d106      	bne.n	c970 <__udivmoddi4+0x278>
    c962:	454d      	cmp	r5, r9
    c964:	d204      	bcs.n	c970 <__udivmoddi4+0x278>
    c966:	ebb9 0e02 	subs.w	lr, r9, r2
    c96a:	eb68 0304 	sbc.w	r3, r8, r4
    c96e:	3801      	subs	r0, #1
    c970:	2e00      	cmp	r6, #0
    c972:	d0a6      	beq.n	c8c2 <__udivmoddi4+0x1ca>
    c974:	ebb5 020e 	subs.w	r2, r5, lr
    c978:	eb61 0103 	sbc.w	r1, r1, r3
    c97c:	fa01 fc0c 	lsl.w	ip, r1, ip
    c980:	fa22 f307 	lsr.w	r3, r2, r7
    c984:	ea4c 0303 	orr.w	r3, ip, r3
    c988:	40f9      	lsrs	r1, r7
    c98a:	e9c6 3100 	strd	r3, r1, [r6]
    c98e:	e798      	b.n	c8c2 <__udivmoddi4+0x1ca>
    c990:	4640      	mov	r0, r8
    c992:	e7c5      	b.n	c920 <__udivmoddi4+0x228>
    c994:	4643      	mov	r3, r8
    c996:	e7d9      	b.n	c94c <__udivmoddi4+0x254>

0000c998 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
    c998:	b50e      	push	{r1, r2, r3, lr}
    c99a:	4601      	mov	r1, r0
    c99c:	4668      	mov	r0, sp
    c99e:	f000 f804 	bl	c9aa <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
    c9a2:	4668      	mov	r0, sp
    c9a4:	f001 fba4 	bl	e0f0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
    c9a8:	bd0e      	pop	{r1, r2, r3, pc}

0000c9aa <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
    c9aa:	880a      	ldrh	r2, [r1, #0]
    c9ac:	f3c2 020b 	ubfx	r2, r2, #0, #12
    c9b0:	8082      	strh	r2, [r0, #4]
    c9b2:	884a      	ldrh	r2, [r1, #2]
    c9b4:	80c2      	strh	r2, [r0, #6]
    c9b6:	784a      	ldrb	r2, [r1, #1]
    c9b8:	0993      	lsrs	r3, r2, #6
    c9ba:	2200      	movs	r2, #0
    c9bc:	7242      	strb	r2, [r0, #9]
    c9be:	784b      	ldrb	r3, [r1, #1]
    c9c0:	f3c3 1301 	ubfx	r3, r3, #4, #2
    c9c4:	b11b      	cbz	r3, c9ce <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    c9c6:	2b01      	cmp	r3, #1
    c9c8:	d005      	beq.n	c9d6 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
    c9ca:	2b02      	cmp	r3, #2
    c9cc:	d005      	beq.n	c9da <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
    c9ce:	7202      	strb	r2, [r0, #8]
    c9d0:	1d09      	adds	r1, r1, #4
    c9d2:	6001      	str	r1, [r0, #0]
    c9d4:	4770      	bx	lr
    c9d6:	2201      	movs	r2, #1
    c9d8:	e7f9      	b.n	c9ce <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    c9da:	2202      	movs	r2, #2
    c9dc:	e7f7      	b.n	c9ce <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

0000c9de <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    c9de:	b510      	push	{r4, lr}
    c9e0:	460c      	mov	r4, r1
    c9e2:	7909      	ldrb	r1, [r1, #4]
    c9e4:	7001      	strb	r1, [r0, #0]
    c9e6:	7841      	ldrb	r1, [r0, #1]
    c9e8:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
    c9ec:	7041      	strb	r1, [r0, #1]
    c9ee:	88a2      	ldrh	r2, [r4, #4]
    c9f0:	f3c2 2203 	ubfx	r2, r2, #8, #4
    c9f4:	4311      	orrs	r1, r2
    c9f6:	7041      	strb	r1, [r0, #1]
    c9f8:	79a2      	ldrb	r2, [r4, #6]
    c9fa:	7082      	strb	r2, [r0, #2]
    c9fc:	88e2      	ldrh	r2, [r4, #6]
    c9fe:	f001 01cf 	and.w	r1, r1, #207	; 0xcf
    ca02:	0a12      	lsrs	r2, r2, #8
    ca04:	70c2      	strb	r2, [r0, #3]
    ca06:	7041      	strb	r1, [r0, #1]
    ca08:	7a22      	ldrb	r2, [r4, #8]
    ca0a:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    ca0e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    ca12:	7041      	strb	r1, [r0, #1]
    ca14:	7a62      	ldrb	r2, [r4, #9]
    ca16:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    ca1a:	7041      	strb	r1, [r0, #1]
    ca1c:	6821      	ldr	r1, [r4, #0]
    ca1e:	1d02      	adds	r2, r0, #4
    ca20:	4291      	cmp	r1, r2
    ca22:	d006      	beq.n	ca32 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x54>
    ca24:	88e2      	ldrh	r2, [r4, #6]
    ca26:	2afb      	cmp	r2, #251	; 0xfb
    ca28:	d300      	bcc.n	ca2c <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x4e>
    ca2a:	22fb      	movs	r2, #251	; 0xfb
    ca2c:	1d00      	adds	r0, r0, #4
    ca2e:	f003 fe1e 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ca32:	79a0      	ldrb	r0, [r4, #6]
    ca34:	1d00      	adds	r0, r0, #4
    ca36:	b2c0      	uxtb	r0, r0
    ca38:	bd10      	pop	{r4, pc}

0000ca3a <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY>:
    ca3a:	b430      	push	{r4, r5}
    ca3c:	790a      	ldrb	r2, [r1, #4]
    ca3e:	7002      	strb	r2, [r0, #0]
    ca40:	7842      	ldrb	r2, [r0, #1]
    ca42:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    ca46:	7042      	strb	r2, [r0, #1]
    ca48:	888b      	ldrh	r3, [r1, #4]
    ca4a:	f3c3 2303 	ubfx	r3, r3, #8, #4
    ca4e:	431a      	orrs	r2, r3
    ca50:	7042      	strb	r2, [r0, #1]
    ca52:	798b      	ldrb	r3, [r1, #6]
    ca54:	7083      	strb	r3, [r0, #2]
    ca56:	78c3      	ldrb	r3, [r0, #3]
    ca58:	f002 02cf 	and.w	r2, r2, #207	; 0xcf
    ca5c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    ca60:	70c3      	strb	r3, [r0, #3]
    ca62:	88cc      	ldrh	r4, [r1, #6]
    ca64:	f3c4 2405 	ubfx	r4, r4, #8, #6
    ca68:	4323      	orrs	r3, r4
    ca6a:	70c3      	strb	r3, [r0, #3]
    ca6c:	7042      	strb	r2, [r0, #1]
    ca6e:	7a0c      	ldrb	r4, [r1, #8]
    ca70:	f004 0403 	and.w	r4, r4, #3
    ca74:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    ca78:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    ca7c:	7042      	strb	r2, [r0, #1]
    ca7e:	7a4c      	ldrb	r4, [r1, #9]
    ca80:	ea42 1284 	orr.w	r2, r2, r4, lsl #6
    ca84:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    ca88:	7042      	strb	r2, [r0, #1]
    ca8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    ca8e:	70c2      	strb	r2, [r0, #3]
    ca90:	680b      	ldr	r3, [r1, #0]
    ca92:	1d02      	adds	r2, r0, #4
    ca94:	4293      	cmp	r3, r2
    ca96:	d005      	beq.n	caa4 <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY+0x6a>
    ca98:	88ca      	ldrh	r2, [r1, #6]
    ca9a:	bc30      	pop	{r4, r5}
    ca9c:	4619      	mov	r1, r3
    ca9e:	1d00      	adds	r0, r0, #4
    caa0:	f003 bde5 	b.w	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    caa4:	bc30      	pop	{r4, r5}
    caa6:	4770      	bx	lr

0000caa8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    caa8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    caac:	4604      	mov	r4, r0
    caae:	f891 c000 	ldrb.w	ip, [r1]
    cab2:	460d      	mov	r5, r1
    cab4:	2000      	movs	r0, #0
    cab6:	270c      	movs	r7, #12
    cab8:	263e      	movs	r6, #62	; 0x3e
    caba:	2312      	movs	r3, #18
    cabc:	22ff      	movs	r2, #255	; 0xff
    cabe:	f04f 0b10 	mov.w	fp, #16
    cac2:	f04f 0905 	mov.w	r9, #5
    cac6:	f104 010d 	add.w	r1, r4, #13
    caca:	f04f 0e14 	mov.w	lr, #20
    cace:	f04f 0a11 	mov.w	sl, #17
    cad2:	f1bc 0f23 	cmp.w	ip, #35	; 0x23
    cad6:	d271      	bcs.n	cbbc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x114>
    cad8:	e8df f00c 	tbb	[pc, ip]
    cadc:	2c291270 	.word	0x2c291270
    cae0:	8c70f431 	.word	0x8c70f431
    cae4:	d5c1a796 	.word	0xd5c1a796
    cae8:	f1f2f5d8 	.word	0xf1f2f5d8
    caec:	537070f0 	.word	0x537070f0
    caf0:	eeef7170 	.word	0xeeef7170
    caf4:	eaebeced 	.word	0xeaebeced
    caf8:	e6e7e8e9 	.word	0xe6e7e8e9
    cafc:	00e470e5 	.word	0x00e470e5
    cb00:	7027      	strb	r7, [r4, #0]
    cb02:	7928      	ldrb	r0, [r5, #4]
    cb04:	70a0      	strb	r0, [r4, #2]
    cb06:	7968      	ldrb	r0, [r5, #5]
    cb08:	70e0      	strb	r0, [r4, #3]
    cb0a:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    cb0e:	0a00      	lsrs	r0, r0, #8
    cb10:	7120      	strb	r0, [r4, #4]
    cb12:	79e8      	ldrb	r0, [r5, #7]
    cb14:	7160      	strb	r0, [r4, #5]
    cb16:	7a28      	ldrb	r0, [r5, #8]
    cb18:	71a0      	strb	r0, [r4, #6]
    cb1a:	8928      	ldrh	r0, [r5, #8]
    cb1c:	0a00      	lsrs	r0, r0, #8
    cb1e:	71e0      	strb	r0, [r4, #7]
    cb20:	7aa8      	ldrb	r0, [r5, #10]
    cb22:	7220      	strb	r0, [r4, #8]
    cb24:	8968      	ldrh	r0, [r5, #10]
    cb26:	0a00      	lsrs	r0, r0, #8
    cb28:	7260      	strb	r0, [r4, #9]
    cb2a:	2008      	movs	r0, #8
    cb2c:	e137      	b.n	cd9e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    cb2e:	f884 b000 	strb.w	fp, [r4]
    cb32:	e001      	b.n	cb38 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x90>
    cb34:	201a      	movs	r0, #26
    cb36:	7020      	strb	r0, [r4, #0]
    cb38:	7928      	ldrb	r0, [r5, #4]
    cb3a:	70a0      	strb	r0, [r4, #2]
    cb3c:	e136      	b.n	cdac <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x304>
    cb3e:	7026      	strb	r6, [r4, #0]
    cb40:	2002      	movs	r0, #2
    cb42:	70a0      	strb	r0, [r4, #2]
    cb44:	f815 0f04 	ldrb.w	r0, [r5, #4]!
    cb48:	70e0      	strb	r0, [r4, #3]
    cb4a:	7aa8      	ldrb	r0, [r5, #10]
    cb4c:	7120      	strb	r0, [r4, #4]
    cb4e:	7868      	ldrb	r0, [r5, #1]
    cb50:	7160      	strb	r0, [r4, #5]
    cb52:	f8d5 0002 	ldr.w	r0, [r5, #2]
    cb56:	f8c4 0006 	str.w	r0, [r4, #6]
    cb5a:	88e8      	ldrh	r0, [r5, #6]
    cb5c:	8160      	strh	r0, [r4, #10]
    cb5e:	7a28      	ldrb	r0, [r5, #8]
    cb60:	7320      	strb	r0, [r4, #12]
    cb62:	7a2e      	ldrb	r6, [r5, #8]
    cb64:	2e1f      	cmp	r6, #31
    cb66:	d300      	bcc.n	cb6a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xc2>
    cb68:	261f      	movs	r6, #31
    cb6a:	4608      	mov	r0, r1
    cb6c:	4632      	mov	r2, r6
    cb6e:	f105 010b 	add.w	r1, r5, #11
    cb72:	f003 fd7c 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cb76:	360d      	adds	r6, #13
    cb78:	7a69      	ldrb	r1, [r5, #9]
    cb7a:	55a1      	strb	r1, [r4, r6]
    cb7c:	1e76      	subs	r6, r6, #1
    cb7e:	b2f0      	uxtb	r0, r6
    cb80:	e10b      	b.n	cd9a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f2>
    cb82:	7026      	strb	r6, [r4, #0]
    cb84:	200b      	movs	r0, #11
    cb86:	70a0      	strb	r0, [r4, #2]
    cb88:	7928      	ldrb	r0, [r5, #4]
    cb8a:	70e0      	strb	r0, [r4, #3]
    cb8c:	7968      	ldrb	r0, [r5, #5]
    cb8e:	7120      	strb	r0, [r4, #4]
    cb90:	79a8      	ldrb	r0, [r5, #6]
    cb92:	7160      	strb	r0, [r4, #5]
    cb94:	f8d5 0007 	ldr.w	r0, [r5, #7]
    cb98:	f8c4 0006 	str.w	r0, [r4, #6]
    cb9c:	f8b5 000b 	ldrh.w	r0, [r5, #11]
    cba0:	8160      	strh	r0, [r4, #10]
    cba2:	7b68      	ldrb	r0, [r5, #13]
    cba4:	7320      	strb	r0, [r4, #12]
    cba6:	f8d5 000e 	ldr.w	r0, [r5, #14]
    cbaa:	f8c4 000d 	str.w	r0, [r4, #13]
    cbae:	8a68      	ldrh	r0, [r5, #18]
    cbb0:	f8a4 0011 	strh.w	r0, [r4, #17]
    cbb4:	7d28      	ldrb	r0, [r5, #20]
    cbb6:	74e0      	strb	r0, [r4, #19]
    cbb8:	4618      	mov	r0, r3
    cbba:	e0f0      	b.n	cd9e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    cbbc:	e0f1      	b.n	cda2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2fa>
    cbbe:	2029      	movs	r0, #41	; 0x29
    cbc0:	f7f4 f8c6 	bl	d50 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    cbc4:	b148      	cbz	r0, cbda <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x132>
    cbc6:	7026      	strb	r6, [r4, #0]
    cbc8:	2029      	movs	r0, #41	; 0x29
    cbca:	70a0      	strb	r0, [r4, #2]
    cbcc:	2221      	movs	r2, #33	; 0x21
    cbce:	1d29      	adds	r1, r5, #4
    cbd0:	1ce0      	adds	r0, r4, #3
    cbd2:	f003 fd4c 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cbd6:	2022      	movs	r0, #34	; 0x22
    cbd8:	e0e1      	b.n	cd9e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    cbda:	200a      	movs	r0, #10
    cbdc:	f7f4 f8b8 	bl	d50 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    cbe0:	2800      	cmp	r0, #0
    cbe2:	4629      	mov	r1, r5
    cbe4:	4620      	mov	r0, r4
    cbe6:	d002      	beq.n	cbee <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x146>
    cbe8:	f000 f9a0 	bl	cf2c <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0x52>
    cbec:	e0d5      	b.n	cd9a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f2>
    cbee:	f000 f974 	bl	ceda <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA>
    cbf2:	e0d2      	b.n	cd9a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f2>
    cbf4:	7026      	strb	r6, [r4, #0]
    cbf6:	f884 e002 	strb.w	lr, [r4, #2]
    cbfa:	7928      	ldrb	r0, [r5, #4]
    cbfc:	70e0      	strb	r0, [r4, #3]
    cbfe:	88a8      	ldrh	r0, [r5, #4]
    cc00:	0a00      	lsrs	r0, r0, #8
    cc02:	7120      	strb	r0, [r4, #4]
    cc04:	79a8      	ldrb	r0, [r5, #6]
    cc06:	e104      	b.n	ce12 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
    cc08:	223e      	movs	r2, #62	; 0x3e
    cc0a:	7022      	strb	r2, [r4, #0]
    cc0c:	2204      	movs	r2, #4
    cc0e:	70a2      	strb	r2, [r4, #2]
    cc10:	6868      	ldr	r0, [r5, #4]
    cc12:	f8c4 0003 	str.w	r0, [r4, #3]
    cc16:	68a8      	ldr	r0, [r5, #8]
    cc18:	f8c4 0007 	str.w	r0, [r4, #7]
    cc1c:	89a8      	ldrh	r0, [r5, #12]
    cc1e:	f8a4 000b 	strh.w	r0, [r4, #11]
    cc22:	7ba8      	ldrb	r0, [r5, #14]
    cc24:	7360      	strb	r0, [r4, #13]
    cc26:	200c      	movs	r0, #12
    cc28:	e0b9      	b.n	cd9e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    cc2a:	7026      	strb	r6, [r4, #0]
    cc2c:	2003      	movs	r0, #3
    cc2e:	70a0      	strb	r0, [r4, #2]
    cc30:	7928      	ldrb	r0, [r5, #4]
    cc32:	70e0      	strb	r0, [r4, #3]
    cc34:	79a8      	ldrb	r0, [r5, #6]
    cc36:	7120      	strb	r0, [r4, #4]
    cc38:	88e8      	ldrh	r0, [r5, #6]
    cc3a:	0a00      	lsrs	r0, r0, #8
    cc3c:	7160      	strb	r0, [r4, #5]
    cc3e:	7a28      	ldrb	r0, [r5, #8]
    cc40:	71a0      	strb	r0, [r4, #6]
    cc42:	8928      	ldrh	r0, [r5, #8]
    cc44:	0a00      	lsrs	r0, r0, #8
    cc46:	71e0      	strb	r0, [r4, #7]
    cc48:	7aa8      	ldrb	r0, [r5, #10]
    cc4a:	7220      	strb	r0, [r4, #8]
    cc4c:	8968      	ldrh	r0, [r5, #10]
    cc4e:	0a00      	lsrs	r0, r0, #8
    cc50:	7260      	strb	r0, [r4, #9]
    cc52:	7b28      	ldrb	r0, [r5, #12]
    cc54:	72a0      	strb	r0, [r4, #10]
    cc56:	89a8      	ldrh	r0, [r5, #12]
    cc58:	0a00      	lsrs	r0, r0, #8
    cc5a:	72e0      	strb	r0, [r4, #11]
    cc5c:	e116      	b.n	ce8c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3e4>
    cc5e:	7026      	strb	r6, [r4, #0]
    cc60:	f884 9002 	strb.w	r9, [r4, #2]
    cc64:	7928      	ldrb	r0, [r5, #4]
    cc66:	70e0      	strb	r0, [r4, #3]
    cc68:	88a8      	ldrh	r0, [r5, #4]
    cc6a:	0a00      	lsrs	r0, r0, #8
    cc6c:	7120      	strb	r0, [r4, #4]
    cc6e:	f8d5 0006 	ldr.w	r0, [r5, #6]
    cc72:	f8c4 0005 	str.w	r0, [r4, #5]
    cc76:	f8d5 000a 	ldr.w	r0, [r5, #10]
    cc7a:	f8c4 0009 	str.w	r0, [r4, #9]
    cc7e:	89e8      	ldrh	r0, [r5, #14]
    cc80:	f8a4 000d 	strh.w	r0, [r4, #13]
    cc84:	e127      	b.n	ced6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x42e>
    cc86:	f884 a000 	strb.w	sl, [r4]
    cc8a:	e049      	b.n	cd20 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x278>
    cc8c:	f884 9000 	strb.w	r9, [r4]
    cc90:	7928      	ldrb	r0, [r5, #4]
    cc92:	70a0      	strb	r0, [r4, #2]
    cc94:	7968      	ldrb	r0, [r5, #5]
    cc96:	70e0      	strb	r0, [r4, #3]
    cc98:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    cc9c:	0a00      	lsrs	r0, r0, #8
    cc9e:	7120      	strb	r0, [r4, #4]
    cca0:	79e8      	ldrb	r0, [r5, #7]
    cca2:	e0b6      	b.n	ce12 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
    cca4:	e102      	b.n	ceac <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x404>
    cca6:	e0d5      	b.n	ce54 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3ac>
    cca8:	e0b6      	b.n	ce18 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x370>
    ccaa:	e0e1      	b.n	ce70 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3c8>
    ccac:	e0f0      	b.n	ce90 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3e8>
    ccae:	e0a8      	b.n	ce02 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x35a>
    ccb0:	e090      	b.n	cdd4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32c>
    ccb2:	e08c      	b.n	cdce <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x326>
    ccb4:	e077      	b.n	cda6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2fe>
    ccb6:	e07b      	b.n	cdb0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x308>
    ccb8:	e01e      	b.n	ccf8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x250>
    ccba:	e01a      	b.n	ccf2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x24a>
    ccbc:	e02e      	b.n	cd1c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x274>
    ccbe:	e028      	b.n	cd12 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x26a>
    ccc0:	e00c      	b.n	ccdc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x234>
    ccc2:	e000      	b.n	ccc6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x21e>
    ccc4:	e033      	b.n	cd2e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x286>
    ccc6:	2008      	movs	r0, #8
    ccc8:	7020      	strb	r0, [r4, #0]
    ccca:	7928      	ldrb	r0, [r5, #4]
    cccc:	70a0      	strb	r0, [r4, #2]
    ccce:	79a8      	ldrb	r0, [r5, #6]
    ccd0:	70e0      	strb	r0, [r4, #3]
    ccd2:	88e8      	ldrh	r0, [r5, #6]
    ccd4:	0a00      	lsrs	r0, r0, #8
    ccd6:	7120      	strb	r0, [r4, #4]
    ccd8:	7a28      	ldrb	r0, [r5, #8]
    ccda:	e09a      	b.n	ce12 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
    ccdc:	2030      	movs	r0, #48	; 0x30
    ccde:	7020      	strb	r0, [r4, #0]
    cce0:	7928      	ldrb	r0, [r5, #4]
    cce2:	70a0      	strb	r0, [r4, #2]
    cce4:	79a8      	ldrb	r0, [r5, #6]
    cce6:	70e0      	strb	r0, [r4, #3]
    cce8:	88e8      	ldrh	r0, [r5, #6]
    ccea:	0a00      	lsrs	r0, r0, #8
    ccec:	7120      	strb	r0, [r4, #4]
    ccee:	2003      	movs	r0, #3
    ccf0:	e055      	b.n	cd9e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    ccf2:	7026      	strb	r6, [r4, #0]
    ccf4:	2007      	movs	r0, #7
    ccf6:	e091      	b.n	ce1c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x374>
    ccf8:	7026      	strb	r6, [r4, #0]
    ccfa:	70a7      	strb	r7, [r4, #2]
    ccfc:	7928      	ldrb	r0, [r5, #4]
    ccfe:	70e0      	strb	r0, [r4, #3]
    cd00:	79a8      	ldrb	r0, [r5, #6]
    cd02:	7120      	strb	r0, [r4, #4]
    cd04:	88e8      	ldrh	r0, [r5, #6]
    cd06:	0a00      	lsrs	r0, r0, #8
    cd08:	7160      	strb	r0, [r4, #5]
    cd0a:	7a28      	ldrb	r0, [r5, #8]
    cd0c:	71a0      	strb	r0, [r4, #6]
    cd0e:	7a68      	ldrb	r0, [r5, #9]
    cd10:	e05a      	b.n	cdc8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x320>
    cd12:	1d29      	adds	r1, r5, #4
    cd14:	4620      	mov	r0, r4
    cd16:	f7f3 ffdb 	bl	cd0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x94>
    cd1a:	e03e      	b.n	cd9a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f2>
    cd1c:	2057      	movs	r0, #87	; 0x57
    cd1e:	7020      	strb	r0, [r4, #0]
    cd20:	7928      	ldrb	r0, [r5, #4]
    cd22:	70a0      	strb	r0, [r4, #2]
    cd24:	88a8      	ldrh	r0, [r5, #4]
    cd26:	0a00      	lsrs	r0, r0, #8
    cd28:	70e0      	strb	r0, [r4, #3]
    cd2a:	2002      	movs	r0, #2
    cd2c:	e037      	b.n	cd9e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    cd2e:	7026      	strb	r6, [r4, #0]
    cd30:	220d      	movs	r2, #13
    cd32:	70a2      	strb	r2, [r4, #2]
    cd34:	792a      	ldrb	r2, [r5, #4]
    cd36:	70e2      	strb	r2, [r4, #3]
    cd38:	89ea      	ldrh	r2, [r5, #14]
    cd3a:	80a2      	strh	r2, [r4, #4]
    cd3c:	796a      	ldrb	r2, [r5, #5]
    cd3e:	71a2      	strb	r2, [r4, #6]
    cd40:	f8d5 2006 	ldr.w	r2, [r5, #6]
    cd44:	f8c4 2007 	str.w	r2, [r4, #7]
    cd48:	896a      	ldrh	r2, [r5, #10]
    cd4a:	f8a4 200b 	strh.w	r2, [r4, #11]
    cd4e:	7c2a      	ldrb	r2, [r5, #16]
    cd50:	4620      	mov	r0, r4
    cd52:	7362      	strb	r2, [r4, #13]
    cd54:	1d29      	adds	r1, r5, #4
    cd56:	7c6a      	ldrb	r2, [r5, #17]
    cd58:	7382      	strb	r2, [r0, #14]
    cd5a:	7b8a      	ldrb	r2, [r1, #14]
    cd5c:	73c2      	strb	r2, [r0, #15]
    cd5e:	7e8a      	ldrb	r2, [r1, #26]
    cd60:	7402      	strb	r2, [r0, #16]
    cd62:	7a4a      	ldrb	r2, [r1, #9]
    cd64:	7442      	strb	r2, [r0, #17]
    cd66:	f8b1 2011 	ldrh.w	r2, [r1, #17]
    cd6a:	f8ad 2000 	strh.w	r2, [sp]
    cd6e:	8242      	strh	r2, [r0, #18]
    cd70:	7cca      	ldrb	r2, [r1, #19]
    cd72:	7502      	strb	r2, [r0, #20]
    cd74:	694a      	ldr	r2, [r1, #20]
    cd76:	f8c0 2015 	str.w	r2, [r0, #21]
    cd7a:	8b0a      	ldrh	r2, [r1, #24]
    cd7c:	f8a0 2019 	strh.w	r2, [r0, #25]
    cd80:	7a0a      	ldrb	r2, [r1, #8]
    cd82:	76c2      	strb	r2, [r0, #27]
    cd84:	7a0d      	ldrb	r5, [r1, #8]
    cd86:	2de5      	cmp	r5, #229	; 0xe5
    cd88:	d300      	bcc.n	cd8c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2e4>
    cd8a:	25e5      	movs	r5, #229	; 0xe5
    cd8c:	462a      	mov	r2, r5
    cd8e:	301c      	adds	r0, #28
    cd90:	311c      	adds	r1, #28
    cd92:	f003 fc6c 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cd96:	351a      	adds	r5, #26
    cd98:	b2e8      	uxtb	r0, r5
    cd9a:	2800      	cmp	r0, #0
    cd9c:	d001      	beq.n	cda2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2fa>
    cd9e:	7060      	strb	r0, [r4, #1]
    cda0:	1c80      	adds	r0, r0, #2
    cda2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cda6:	7026      	strb	r6, [r4, #0]
    cda8:	f884 a002 	strb.w	sl, [r4, #2]
    cdac:	2001      	movs	r0, #1
    cdae:	e7f6      	b.n	cd9e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    cdb0:	7026      	strb	r6, [r4, #0]
    cdb2:	70a3      	strb	r3, [r4, #2]
    cdb4:	7928      	ldrb	r0, [r5, #4]
    cdb6:	70e0      	strb	r0, [r4, #3]
    cdb8:	7968      	ldrb	r0, [r5, #5]
    cdba:	7120      	strb	r0, [r4, #4]
    cdbc:	79a8      	ldrb	r0, [r5, #6]
    cdbe:	7160      	strb	r0, [r4, #5]
    cdc0:	88e8      	ldrh	r0, [r5, #6]
    cdc2:	0a00      	lsrs	r0, r0, #8
    cdc4:	71a0      	strb	r0, [r4, #6]
    cdc6:	7a28      	ldrb	r0, [r5, #8]
    cdc8:	71e0      	strb	r0, [r4, #7]
    cdca:	2006      	movs	r0, #6
    cdcc:	e7e7      	b.n	cd9e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    cdce:	7026      	strb	r6, [r4, #0]
    cdd0:	2020      	movs	r0, #32
    cdd2:	e041      	b.n	ce58 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3b0>
    cdd4:	7026      	strb	r6, [r4, #0]
    cdd6:	2021      	movs	r0, #33	; 0x21
    cdd8:	70a0      	strb	r0, [r4, #2]
    cdda:	7928      	ldrb	r0, [r5, #4]
    cddc:	70e0      	strb	r0, [r4, #3]
    cdde:	7968      	ldrb	r0, [r5, #5]
    cde0:	7120      	strb	r0, [r4, #4]
    cde2:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    cde6:	0a00      	lsrs	r0, r0, #8
    cde8:	7160      	strb	r0, [r4, #5]
    cdea:	79e8      	ldrb	r0, [r5, #7]
    cdec:	71a0      	strb	r0, [r4, #6]
    cdee:	7a28      	ldrb	r0, [r5, #8]
    cdf0:	71e0      	strb	r0, [r4, #7]
    cdf2:	7a68      	ldrb	r0, [r5, #9]
    cdf4:	7220      	strb	r0, [r4, #8]
    cdf6:	7aa8      	ldrb	r0, [r5, #10]
    cdf8:	7260      	strb	r0, [r4, #9]
    cdfa:	7ae8      	ldrb	r0, [r5, #11]
    cdfc:	72a0      	strb	r0, [r4, #10]
    cdfe:	2009      	movs	r0, #9
    ce00:	e7cd      	b.n	cd9e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    ce02:	7022      	strb	r2, [r4, #0]
    ce04:	20a1      	movs	r0, #161	; 0xa1
    ce06:	70a0      	strb	r0, [r4, #2]
    ce08:	7928      	ldrb	r0, [r5, #4]
    ce0a:	70e0      	strb	r0, [r4, #3]
    ce0c:	7968      	ldrb	r0, [r5, #5]
    ce0e:	7120      	strb	r0, [r4, #4]
    ce10:	2000      	movs	r0, #0
    ce12:	7160      	strb	r0, [r4, #5]
    ce14:	2004      	movs	r0, #4
    ce16:	e7c2      	b.n	cd9e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    ce18:	7022      	strb	r2, [r4, #0]
    ce1a:	20a2      	movs	r0, #162	; 0xa2
    ce1c:	70a0      	strb	r0, [r4, #2]
    ce1e:	7928      	ldrb	r0, [r5, #4]
    ce20:	70e0      	strb	r0, [r4, #3]
    ce22:	88a8      	ldrh	r0, [r5, #4]
    ce24:	0a00      	lsrs	r0, r0, #8
    ce26:	7120      	strb	r0, [r4, #4]
    ce28:	79a8      	ldrb	r0, [r5, #6]
    ce2a:	7160      	strb	r0, [r4, #5]
    ce2c:	88e8      	ldrh	r0, [r5, #6]
    ce2e:	0a00      	lsrs	r0, r0, #8
    ce30:	71a0      	strb	r0, [r4, #6]
    ce32:	7a28      	ldrb	r0, [r5, #8]
    ce34:	71e0      	strb	r0, [r4, #7]
    ce36:	8928      	ldrh	r0, [r5, #8]
    ce38:	0a00      	lsrs	r0, r0, #8
    ce3a:	7220      	strb	r0, [r4, #8]
    ce3c:	7aa8      	ldrb	r0, [r5, #10]
    ce3e:	7260      	strb	r0, [r4, #9]
    ce40:	8968      	ldrh	r0, [r5, #10]
    ce42:	0a00      	lsrs	r0, r0, #8
    ce44:	72a0      	strb	r0, [r4, #10]
    ce46:	7b28      	ldrb	r0, [r5, #12]
    ce48:	72e0      	strb	r0, [r4, #11]
    ce4a:	89a8      	ldrh	r0, [r5, #12]
    ce4c:	0a00      	lsrs	r0, r0, #8
    ce4e:	7320      	strb	r0, [r4, #12]
    ce50:	200b      	movs	r0, #11
    ce52:	e7a4      	b.n	cd9e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    ce54:	7022      	strb	r2, [r4, #0]
    ce56:	20a3      	movs	r0, #163	; 0xa3
    ce58:	70a0      	strb	r0, [r4, #2]
    ce5a:	7928      	ldrb	r0, [r5, #4]
    ce5c:	70e0      	strb	r0, [r4, #3]
    ce5e:	88a8      	ldrh	r0, [r5, #4]
    ce60:	0a00      	lsrs	r0, r0, #8
    ce62:	7120      	strb	r0, [r4, #4]
    ce64:	79a8      	ldrb	r0, [r5, #6]
    ce66:	7160      	strb	r0, [r4, #5]
    ce68:	79e8      	ldrb	r0, [r5, #7]
    ce6a:	71a0      	strb	r0, [r4, #6]
    ce6c:	2005      	movs	r0, #5
    ce6e:	e796      	b.n	cd9e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    ce70:	7026      	strb	r6, [r4, #0]
    ce72:	2013      	movs	r0, #19
    ce74:	70a0      	strb	r0, [r4, #2]
    ce76:	7928      	ldrb	r0, [r5, #4]
    ce78:	70e0      	strb	r0, [r4, #3]
    ce7a:	7968      	ldrb	r0, [r5, #5]
    ce7c:	7120      	strb	r0, [r4, #4]
    ce7e:	f8d5 0006 	ldr.w	r0, [r5, #6]
    ce82:	f8c4 0005 	str.w	r0, [r4, #5]
    ce86:	8968      	ldrh	r0, [r5, #10]
    ce88:	f8a4 0009 	strh.w	r0, [r4, #9]
    ce8c:	200a      	movs	r0, #10
    ce8e:	e786      	b.n	cd9e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    ce90:	7022      	strb	r2, [r4, #0]
    ce92:	20a4      	movs	r0, #164	; 0xa4
    ce94:	70a0      	strb	r0, [r4, #2]
    ce96:	7928      	ldrb	r0, [r5, #4]
    ce98:	70e0      	strb	r0, [r4, #3]
    ce9a:	88a8      	ldrh	r0, [r5, #4]
    ce9c:	0a00      	lsrs	r0, r0, #8
    ce9e:	7120      	strb	r0, [r4, #4]
    cea0:	79a8      	ldrb	r0, [r5, #6]
    cea2:	7160      	strb	r0, [r4, #5]
    cea4:	79e8      	ldrb	r0, [r5, #7]
    cea6:	71a0      	strb	r0, [r4, #6]
    cea8:	2007      	movs	r0, #7
    ceaa:	e778      	b.n	cd9e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    ceac:	7022      	strb	r2, [r4, #0]
    ceae:	2080      	movs	r0, #128	; 0x80
    ceb0:	70a0      	strb	r0, [r4, #2]
    ceb2:	88a9      	ldrh	r1, [r5, #4]
    ceb4:	f8a4 1003 	strh.w	r1, [r4, #3]
    ceb8:	88e9      	ldrh	r1, [r5, #6]
    ceba:	f8a4 1005 	strh.w	r1, [r4, #5]
    cebe:	7a29      	ldrb	r1, [r5, #8]
    cec0:	71e1      	strb	r1, [r4, #7]
    cec2:	8969      	ldrh	r1, [r5, #10]
    cec4:	8121      	strh	r1, [r4, #8]
    cec6:	89a9      	ldrh	r1, [r5, #12]
    cec8:	8161      	strh	r1, [r4, #10]
    ceca:	89e9      	ldrh	r1, [r5, #14]
    cecc:	81a1      	strh	r1, [r4, #12]
    cece:	7c29      	ldrb	r1, [r5, #16]
    ced0:	f001 0101 	and.w	r1, r1, #1
    ced4:	73a1      	strb	r1, [r4, #14]
    ced6:	200d      	movs	r0, #13
    ced8:	e761      	b.n	cd9e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>

0000ceda <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA>:
    ceda:	223e      	movs	r2, #62	; 0x3e
    cedc:	7002      	strb	r2, [r0, #0]
    cede:	2201      	movs	r2, #1
    cee0:	7082      	strb	r2, [r0, #2]
    cee2:	790a      	ldrb	r2, [r1, #4]
    cee4:	70c2      	strb	r2, [r0, #3]
    cee6:	f811 2f05 	ldrb.w	r2, [r1, #5]!
    ceea:	7102      	strb	r2, [r0, #4]
    ceec:	880a      	ldrh	r2, [r1, #0]
    ceee:	0a12      	lsrs	r2, r2, #8
    cef0:	7142      	strb	r2, [r0, #5]
    cef2:	788a      	ldrb	r2, [r1, #2]
    cef4:	7182      	strb	r2, [r0, #6]
    cef6:	78ca      	ldrb	r2, [r1, #3]
    cef8:	71c2      	strb	r2, [r0, #7]
    cefa:	684a      	ldr	r2, [r1, #4]
    cefc:	6082      	str	r2, [r0, #8]
    cefe:	890a      	ldrh	r2, [r1, #8]
    cf00:	8182      	strh	r2, [r0, #12]
    cf02:	7d8a      	ldrb	r2, [r1, #22]
    cf04:	7382      	strb	r2, [r0, #14]
    cf06:	8aca      	ldrh	r2, [r1, #22]
    cf08:	0a12      	lsrs	r2, r2, #8
    cf0a:	73c2      	strb	r2, [r0, #15]
    cf0c:	7e0a      	ldrb	r2, [r1, #24]
    cf0e:	7402      	strb	r2, [r0, #16]
    cf10:	8b0a      	ldrh	r2, [r1, #24]
    cf12:	0a12      	lsrs	r2, r2, #8
    cf14:	7442      	strb	r2, [r0, #17]
    cf16:	7e8a      	ldrb	r2, [r1, #26]
    cf18:	7482      	strb	r2, [r0, #18]
    cf1a:	8b4a      	ldrh	r2, [r1, #26]
    cf1c:	0a12      	lsrs	r2, r2, #8
    cf1e:	74c2      	strb	r2, [r0, #19]
    cf20:	7f09      	ldrb	r1, [r1, #28]
    cf22:	7501      	strb	r1, [r0, #20]
    cf24:	2113      	movs	r1, #19
    cf26:	7041      	strb	r1, [r0, #1]
    cf28:	4608      	mov	r0, r1
    cf2a:	4770      	bx	lr
    cf2c:	223e      	movs	r2, #62	; 0x3e
    cf2e:	7002      	strb	r2, [r0, #0]
    cf30:	220a      	movs	r2, #10
    cf32:	7082      	strb	r2, [r0, #2]
    cf34:	790a      	ldrb	r2, [r1, #4]
    cf36:	70c2      	strb	r2, [r0, #3]
    cf38:	f811 2f05 	ldrb.w	r2, [r1, #5]!
    cf3c:	7102      	strb	r2, [r0, #4]
    cf3e:	880a      	ldrh	r2, [r1, #0]
    cf40:	0a12      	lsrs	r2, r2, #8
    cf42:	7142      	strb	r2, [r0, #5]
    cf44:	788a      	ldrb	r2, [r1, #2]
    cf46:	7182      	strb	r2, [r0, #6]
    cf48:	78ca      	ldrb	r2, [r1, #3]
    cf4a:	71c2      	strb	r2, [r0, #7]
    cf4c:	684a      	ldr	r2, [r1, #4]
    cf4e:	6082      	str	r2, [r0, #8]
    cf50:	890a      	ldrh	r2, [r1, #8]
    cf52:	8182      	strh	r2, [r0, #12]
    cf54:	f8d1 200a 	ldr.w	r2, [r1, #10]
    cf58:	f8c0 200e 	str.w	r2, [r0, #14]
    cf5c:	89ca      	ldrh	r2, [r1, #14]
    cf5e:	8242      	strh	r2, [r0, #18]
    cf60:	690a      	ldr	r2, [r1, #16]
    cf62:	6142      	str	r2, [r0, #20]
    cf64:	8a8a      	ldrh	r2, [r1, #20]
    cf66:	8302      	strh	r2, [r0, #24]
    cf68:	7d8a      	ldrb	r2, [r1, #22]
    cf6a:	7682      	strb	r2, [r0, #26]
    cf6c:	8aca      	ldrh	r2, [r1, #22]
    cf6e:	0a12      	lsrs	r2, r2, #8
    cf70:	76c2      	strb	r2, [r0, #27]
    cf72:	7e0a      	ldrb	r2, [r1, #24]
    cf74:	7702      	strb	r2, [r0, #28]
    cf76:	8b0a      	ldrh	r2, [r1, #24]
    cf78:	0a12      	lsrs	r2, r2, #8
    cf7a:	7742      	strb	r2, [r0, #29]
    cf7c:	7e8a      	ldrb	r2, [r1, #26]
    cf7e:	7782      	strb	r2, [r0, #30]
    cf80:	8b4a      	ldrh	r2, [r1, #26]
    cf82:	0a12      	lsrs	r2, r2, #8
    cf84:	77c2      	strb	r2, [r0, #31]
    cf86:	7f09      	ldrb	r1, [r1, #28]
    cf88:	f880 1020 	strb.w	r1, [r0, #32]
    cf8c:	211f      	movs	r1, #31
    cf8e:	7041      	strb	r1, [r0, #1]
    cf90:	4608      	mov	r0, r1
    cf92:	4770      	bx	lr
    cf94:	094a      	lsrs	r2, r1, #5
    cf96:	f001 011f 	and.w	r1, r1, #31
    cf9a:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
    cf9e:	40c8      	lsrs	r0, r1
    cfa0:	f000 0001 	and.w	r0, r0, #1
    cfa4:	4770      	bx	lr

0000cfa6 <sdc_hci_data_put>:
    cfa6:	b510      	push	{r4, lr}
    cfa8:	f06f 0415 	mvn.w	r4, #21
    cfac:	b120      	cbz	r0, cfb8 <sdc_hci_data_put+0x12>
    cfae:	f7ff fcf3 	bl	c998 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
    cfb2:	b108      	cbz	r0, cfb8 <sdc_hci_data_put+0x12>
    cfb4:	2000      	movs	r0, #0
    cfb6:	bd10      	pop	{r4, pc}
    cfb8:	4620      	mov	r0, r4
    cfba:	bd10      	pop	{r4, pc}

0000cfbc <sdc_hci_get>:
    cfbc:	b510      	push	{r4, lr}
    cfbe:	460c      	mov	r4, r1
    cfc0:	b130      	cbz	r0, cfd0 <sdc_hci_get+0x14>
    cfc2:	b12c      	cbz	r4, cfd0 <sdc_hci_get+0x14>
    cfc4:	f7f3 fe3a 	bl	c3c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>
    cfc8:	b128      	cbz	r0, cfd6 <sdc_hci_get+0x1a>
    cfca:	7020      	strb	r0, [r4, #0]
    cfcc:	2000      	movs	r0, #0
    cfce:	bd10      	pop	{r4, pc}
    cfd0:	f06f 0015 	mvn.w	r0, #21
    cfd4:	bd10      	pop	{r4, pc}
    cfd6:	f06f 0022 	mvn.w	r0, #34	; 0x22
    cfda:	bd10      	pop	{r4, pc}

0000cfdc <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
    cfdc:	f002 bd48 	b.w	fa70 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0000cfe0 <sdc_hci_cmd_cb_read_transmit_power_level>:
    cfe0:	f002 bd63 	b.w	faaa <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0000cfe4 <sdc_hci_cmd_cb_set_event_mask>:
    cfe4:	b510      	push	{r4, lr}
    cfe6:	f7f3 fecd 	bl	d84 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    cfea:	2000      	movs	r0, #0
    cfec:	bd10      	pop	{r4, pc}

0000cfee <sdc_hci_cmd_cb_set_event_mask_page_2>:
    cfee:	b510      	push	{r4, lr}
    cff0:	f7f3 feda 	bl	da8 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
    cff4:	2000      	movs	r0, #0
    cff6:	bd10      	pop	{r4, pc}

0000cff8 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
    cff8:	f002 bd78 	b.w	faec <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

0000cffc <sdc_hci_cmd_vs_conn_event_extend>:
    cffc:	b508      	push	{r3, lr}
    cffe:	7800      	ldrb	r0, [r0, #0]
    d000:	f88d 0000 	strb.w	r0, [sp]
    d004:	4668      	mov	r0, sp
    d006:	f002 fd0f 	bl	fa28 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    d00a:	bd08      	pop	{r3, pc}

0000d00c <sdc_hci_cmd_vs_conn_update>:
    d00c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    d00e:	2100      	movs	r1, #0
    d010:	9100      	str	r1, [sp, #0]
    d012:	9101      	str	r1, [sp, #4]
    d014:	9102      	str	r1, [sp, #8]
    d016:	9103      	str	r1, [sp, #12]
    d018:	f8d0 1002 	ldr.w	r1, [r0, #2]
    d01c:	f641 524c 	movw	r2, #7500	; 0x1d4c
    d020:	4291      	cmp	r1, r2
    d022:	d304      	bcc.n	d02e <sdc_hci_cmd_vs_conn_update+0x22>
    d024:	f240 42e2 	movw	r2, #1250	; 0x4e2
    d028:	fbb1 f1f2 	udiv	r1, r1, r2
    d02c:	e005      	b.n	d03a <sdc_hci_cmd_vs_conn_update+0x2e>
    d02e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d032:	fbb1 f1f2 	udiv	r1, r1, r2
    d036:	f501 6150 	add.w	r1, r1, #3328	; 0xd00
    d03a:	8802      	ldrh	r2, [r0, #0]
    d03c:	b289      	uxth	r1, r1
    d03e:	f8ad 2000 	strh.w	r2, [sp]
    d042:	f8ad 1002 	strh.w	r1, [sp, #2]
    d046:	f8ad 1004 	strh.w	r1, [sp, #4]
    d04a:	88c1      	ldrh	r1, [r0, #6]
    d04c:	f8ad 1006 	strh.w	r1, [sp, #6]
    d050:	8900      	ldrh	r0, [r0, #8]
    d052:	f8ad 0008 	strh.w	r0, [sp, #8]
    d056:	4668      	mov	r0, sp
    d058:	f002 fa99 	bl	f58e <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>
    d05c:	b004      	add	sp, #16
    d05e:	bd10      	pop	{r4, pc}

0000d060 <sdc_hci_cmd_vs_event_length_set>:
    d060:	f7fa b880 	b.w	7164 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000d064 <sdc_hci_cmd_vs_llpm_mode_set>:
    d064:	2001      	movs	r0, #1
    d066:	4770      	bx	lr

0000d068 <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    d068:	7800      	ldrb	r0, [r0, #0]
    d06a:	b100      	cbz	r0, d06e <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    d06c:	2001      	movs	r0, #1
    d06e:	f002 bc0a 	b.w	f886 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000d072 <sdc_hci_cmd_vs_zephyr_read_chip_temp>:
    d072:	b510      	push	{r4, lr}
    d074:	4604      	mov	r4, r0
    d076:	f7ff f9e3 	bl	c440 <mpsl_temperature_get>
    d07a:	17c1      	asrs	r1, r0, #31
    d07c:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    d080:	1080      	asrs	r0, r0, #2
    d082:	287f      	cmp	r0, #127	; 0x7f
    d084:	dd01      	ble.n	d08a <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x18>
    d086:	207f      	movs	r0, #127	; 0x7f
    d088:	e004      	b.n	d094 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
    d08a:	f06f 017e 	mvn.w	r1, #126	; 0x7e
    d08e:	4288      	cmp	r0, r1
    d090:	da00      	bge.n	d094 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
    d092:	4608      	mov	r0, r1
    d094:	7020      	strb	r0, [r4, #0]
    d096:	2000      	movs	r0, #0
    d098:	bd10      	pop	{r4, pc}

0000d09a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
    d09a:	b570      	push	{r4, r5, r6, lr}
    d09c:	4605      	mov	r5, r0
    d09e:	2210      	movs	r2, #16
    d0a0:	2100      	movs	r1, #0
    d0a2:	f003 fb5e 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d0a6:	2210      	movs	r2, #16
    d0a8:	2100      	movs	r1, #0
    d0aa:	f105 0010 	add.w	r0, r5, #16
    d0ae:	f003 fb58 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d0b2:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    d0b6:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    d0ba:	1c40      	adds	r0, r0, #1
    d0bc:	d10b      	bne.n	d0d6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    d0be:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    d0c2:	1c40      	adds	r0, r0, #1
    d0c4:	d107      	bne.n	d0d6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    d0c6:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    d0ca:	1c40      	adds	r0, r0, #1
    d0cc:	d103      	bne.n	d0d6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    d0ce:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    d0d2:	1c40      	adds	r0, r0, #1
    d0d4:	d00b      	beq.n	d0ee <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x54>
    d0d6:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
    d0da:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    d0de:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
    d0e2:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    d0e6:	612a      	str	r2, [r5, #16]
    d0e8:	6168      	str	r0, [r5, #20]
    d0ea:	61a9      	str	r1, [r5, #24]
    d0ec:	61eb      	str	r3, [r5, #28]
    d0ee:	2000      	movs	r0, #0
    d0f0:	f7f4 fac4 	bl	167c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    d0f4:	b918      	cbnz	r0, d0fe <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x64>
    d0f6:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    d0fa:	07c0      	lsls	r0, r0, #31
    d0fc:	d118      	bne.n	d130 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    d0fe:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    d102:	1c40      	adds	r0, r0, #1
    d104:	d10b      	bne.n	d11e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    d106:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    d10a:	1c40      	adds	r0, r0, #1
    d10c:	d107      	bne.n	d11e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    d10e:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    d112:	1c40      	adds	r0, r0, #1
    d114:	d103      	bne.n	d11e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    d116:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    d11a:	1c40      	adds	r0, r0, #1
    d11c:	d008      	beq.n	d130 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    d11e:	f854 0f90 	ldr.w	r0, [r4, #144]!
    d122:	6861      	ldr	r1, [r4, #4]
    d124:	68a2      	ldr	r2, [r4, #8]
    d126:	68e3      	ldr	r3, [r4, #12]
    d128:	6028      	str	r0, [r5, #0]
    d12a:	6069      	str	r1, [r5, #4]
    d12c:	60aa      	str	r2, [r5, #8]
    d12e:	60eb      	str	r3, [r5, #12]
    d130:	2000      	movs	r0, #0
    d132:	bd70      	pop	{r4, r5, r6, pc}

0000d134 <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    d134:	b538      	push	{r3, r4, r5, lr}
    d136:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    d13a:	4604      	mov	r4, r0
    d13c:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    d140:	1c40      	adds	r0, r0, #1
    d142:	d105      	bne.n	d150 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
    d144:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    d148:	43c0      	mvns	r0, r0
    d14a:	0400      	lsls	r0, r0, #16
    d14c:	0c00      	lsrs	r0, r0, #16
    d14e:	d03e      	beq.n	d1ce <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    d150:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    d154:	07c0      	lsls	r0, r0, #31
    d156:	d03a      	beq.n	d1ce <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    d158:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    d15c:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
    d160:	f8ad 1000 	strh.w	r1, [sp]
    d164:	f8c4 0001 	str.w	r0, [r4, #1]
    d168:	f8bd 0000 	ldrh.w	r0, [sp]
    d16c:	f8a4 0005 	strh.w	r0, [r4, #5]
    d170:	79a0      	ldrb	r0, [r4, #6]
    d172:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    d176:	71a0      	strb	r0, [r4, #6]
    d178:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    d17c:	1c40      	adds	r0, r0, #1
    d17e:	d00f      	beq.n	d1a0 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d180:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    d184:	1c40      	adds	r0, r0, #1
    d186:	d00b      	beq.n	d1a0 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d188:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
    d18c:	1c40      	adds	r0, r0, #1
    d18e:	d007      	beq.n	d1a0 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d190:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    d194:	1c40      	adds	r0, r0, #1
    d196:	d003      	beq.n	d1a0 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d198:	2000      	movs	r0, #0
    d19a:	f7f4 fa6f 	bl	167c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    d19e:	b140      	cbz	r0, d1b2 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x7e>
    d1a0:	2210      	movs	r2, #16
    d1a2:	2100      	movs	r1, #0
    d1a4:	1de0      	adds	r0, r4, #7
    d1a6:	f003 fadc 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d1aa:	2001      	movs	r0, #1
    d1ac:	7020      	strb	r0, [r4, #0]
    d1ae:	2000      	movs	r0, #0
    d1b0:	bd38      	pop	{r3, r4, r5, pc}
    d1b2:	f855 2f90 	ldr.w	r2, [r5, #144]!
    d1b6:	6869      	ldr	r1, [r5, #4]
    d1b8:	68a8      	ldr	r0, [r5, #8]
    d1ba:	68eb      	ldr	r3, [r5, #12]
    d1bc:	f8c4 2007 	str.w	r2, [r4, #7]
    d1c0:	f8c4 100b 	str.w	r1, [r4, #11]
    d1c4:	f8c4 000f 	str.w	r0, [r4, #15]
    d1c8:	f8c4 3013 	str.w	r3, [r4, #19]
    d1cc:	e7ed      	b.n	d1aa <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x76>
    d1ce:	2000      	movs	r0, #0
    d1d0:	e7ec      	b.n	d1ac <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>

0000d1d2 <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    d1d2:	f002 bc18 	b.w	fa06 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000d1d6 <sdc_hci_cmd_ip_read_bd_addr>:
    d1d6:	f002 bc5c 	b.w	fa92 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000d1da <sdc_hci_cmd_ip_read_local_version_information>:
    d1da:	f7fa b815 	b.w	7208 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000d1de <sdc_hci_cmd_le_add_device_to_filter_accept_list>:
    d1de:	f002 b9b5 	b.w	f54c <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000d1e2 <sdc_hci_cmd_le_clear_filter_accept_list>:
    d1e2:	f002 b9ca 	b.w	f57a <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000d1e6 <sdc_hci_cmd_le_conn_update>:
    d1e6:	f002 b9d2 	b.w	f58e <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>

0000d1ea <sdc_hci_cmd_le_create_conn>:
    d1ea:	f7f9 bea1 	b.w	6f30 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA>

0000d1ee <sdc_hci_cmd_le_create_conn_cancel>:
    d1ee:	f002 ba11 	b.w	f614 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y>

0000d1f2 <sdc_hci_cmd_le_enable_encryption>:
    d1f2:	f002 bb05 	b.w	f800 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ>

0000d1f6 <sdc_hci_cmd_le_encrypt>:
    d1f6:	f002 ba1d 	b.w	f634 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000d1fa <sdc_hci_cmd_le_rand>:
    d1fa:	f002 ba24 	b.w	f646 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000d1fe <sdc_hci_cmd_le_read_buffer_size>:
    d1fe:	f7f9 bef3 	b.w	6fe8 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000d202 <sdc_hci_cmd_le_read_channel_map>:
    d202:	f7f9 befb 	b.w	6ffc <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0000d206 <sdc_hci_cmd_le_read_filter_accept_list_size>:
    d206:	f002 ba58 	b.w	f6ba <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000d20a <sdc_hci_cmd_le_read_max_data_length>:
    d20a:	f002 ba22 	b.w	f652 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0000d20e <sdc_hci_cmd_le_read_phy>:
    d20e:	f7f9 bf1d 	b.w	704c <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0000d212 <sdc_hci_cmd_le_read_remote_features>:
    d212:	f002 ba27 	b.w	f664 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0000d216 <sdc_hci_cmd_le_read_suggested_default_data_length>:
    d216:	f7f9 bf3f 	b.w	7098 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0000d21a <sdc_hci_cmd_le_read_transmit_power>:
    d21a:	f002 ba3e 	b.w	f69a <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000d21e <sdc_hci_cmd_le_remove_device_from_filter_accept_list>:
    d21e:	f002 ba50 	b.w	f6c2 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000d222 <sdc_hci_cmd_le_set_data_length>:
    d222:	f002 ba63 	b.w	f6ec <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0000d226 <sdc_hci_cmd_le_set_default_phy>:
    d226:	f7f9 bf41 	b.w	70ac <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0000d22a <sdc_hci_cmd_le_set_event_mask>:
    d22a:	b510      	push	{r4, lr}
    d22c:	f7f3 fd98 	bl	d60 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    d230:	2000      	movs	r0, #0
    d232:	bd10      	pop	{r4, pc}

0000d234 <sdc_hci_cmd_le_set_host_channel_classification>:
    d234:	f7f9 bf62 	b.w	70fc <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI>

0000d238 <sdc_hci_cmd_le_set_phy>:
    d238:	f002 ba78 	b.w	f72c <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0000d23c <sdc_hci_cmd_le_set_random_address>:
    d23c:	f002 ba8f 	b.w	f75e <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000d240 <sdc_hci_cmd_le_set_scan_enable>:
    d240:	f002 ba9b 	b.w	f77a <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ>

0000d244 <sdc_hci_cmd_le_set_scan_params>:
    d244:	f002 baaf 	b.w	f7a6 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA>

0000d248 <sdc_hci_cmd_le_write_suggested_default_data_length>:
    d248:	f002 bb0c 	b.w	f864 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0000d24c <sdc_hci_cmd_lc_disconnect>:
    d24c:	f002 b933 	b.w	f4b6 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0000d250 <sdc_hci_cmd_lc_read_remote_version_information>:
    d250:	f7f9 bfe4 	b.w	721c <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
    d254:	b570      	push	{r4, r5, r6, lr}
    d256:	880b      	ldrh	r3, [r1, #0]
    d258:	7cc4      	ldrb	r4, [r0, #19]
    d25a:	f100 0518 	add.w	r5, r0, #24
    d25e:	f3c3 060e 	ubfx	r6, r3, #0, #15
    d262:	8802      	ldrh	r2, [r0, #0]
    d264:	4435      	add	r5, r6
    d266:	1d64      	adds	r4, r4, #5
    d268:	882d      	ldrh	r5, [r5, #0]
    d26a:	4422      	add	r2, r4
    d26c:	b292      	uxth	r2, r2
    d26e:	4425      	add	r5, r4
    d270:	1e54      	subs	r4, r2, #1
    d272:	442c      	add	r4, r5
    d274:	fb94 f4f2 	sdiv	r4, r4, r2
    d278:	fb02 6204 	mla	r2, r2, r4, r6
    d27c:	8840      	ldrh	r0, [r0, #2]
    d27e:	b292      	uxth	r2, r2
    d280:	4290      	cmp	r0, r2
    d282:	d903      	bls.n	d28c <sdc_hci_cmd_lc_read_remote_version_information+0x3c>
    d284:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    d288:	4310      	orrs	r0, r2
    d28a:	e002      	b.n	d292 <sdc_hci_cmd_lc_read_remote_version_information+0x42>
    d28c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    d290:	4398      	bics	r0, r3
    d292:	8008      	strh	r0, [r1, #0]
    d294:	bd70      	pop	{r4, r5, r6, pc}
    d296:	0442      	lsls	r2, r0, #17
    d298:	ebb2 4f41 	cmp.w	r2, r1, lsl #17
    d29c:	d107      	bne.n	d2ae <sdc_hci_cmd_lc_read_remote_version_information+0x5e>
    d29e:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    d2a2:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    d2a6:	4288      	cmp	r0, r1
    d2a8:	d001      	beq.n	d2ae <sdc_hci_cmd_lc_read_remote_version_information+0x5e>
    d2aa:	2001      	movs	r0, #1
    d2ac:	4770      	bx	lr
    d2ae:	2000      	movs	r0, #0
    d2b0:	4770      	bx	lr

0000d2b2 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    d2b2:	8881      	ldrh	r1, [r0, #4]
    d2b4:	88c0      	ldrh	r0, [r0, #6]
    d2b6:	4288      	cmp	r0, r1
    d2b8:	d101      	bne.n	d2be <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
    d2ba:	2001      	movs	r0, #1
    d2bc:	4770      	bx	lr
    d2be:	2000      	movs	r0, #0
    d2c0:	4770      	bx	lr

0000d2c2 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
    d2c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d2c6:	460f      	mov	r7, r1
    d2c8:	4604      	mov	r4, r0
    d2ca:	f100 0118 	add.w	r1, r0, #24
    d2ce:	8880      	ldrh	r0, [r0, #4]
    d2d0:	2600      	movs	r6, #0
    d2d2:	f3c0 000e 	ubfx	r0, r0, #0, #15
    d2d6:	1845      	adds	r5, r0, r1
    d2d8:	603e      	str	r6, [r7, #0]
    d2da:	89e0      	ldrh	r0, [r4, #14]
    d2dc:	2800      	cmp	r0, #0
    d2de:	d016      	beq.n	d30e <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x4c>
    d2e0:	8961      	ldrh	r1, [r4, #10]
    d2e2:	4408      	add	r0, r1
    d2e4:	b280      	uxth	r0, r0
    d2e6:	8160      	strh	r0, [r4, #10]
    d2e8:	8829      	ldrh	r1, [r5, #0]
    d2ea:	4288      	cmp	r0, r1
    d2ec:	d905      	bls.n	d2fa <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x38>
    d2ee:	f240 1151 	movw	r1, #337	; 0x151
    d2f2:	f04f 0014 	mov.w	r0, #20
    d2f6:	f7f3 fbb5 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d2fa:	d106      	bne.n	d30a <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x48>
    d2fc:	f104 0104 	add.w	r1, r4, #4
    d300:	4620      	mov	r0, r4
    d302:	f7ff ffa7 	bl	d254 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d306:	8166      	strh	r6, [r4, #10]
    d308:	603d      	str	r5, [r7, #0]
    d30a:	81e6      	strh	r6, [r4, #14]
    d30c:	2001      	movs	r0, #1
    d30e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d312 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    d312:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d316:	4604      	mov	r4, r0
    d318:	f100 0318 	add.w	r3, r0, #24
    d31c:	88c0      	ldrh	r0, [r0, #6]
    d31e:	460e      	mov	r6, r1
    d320:	f3c0 070e 	ubfx	r7, r0, #0, #15
    d324:	8a20      	ldrh	r0, [r4, #16]
    d326:	19d9      	adds	r1, r3, r7
    d328:	b108      	cbz	r0, d32e <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1c>
    d32a:	42b0      	cmp	r0, r6
    d32c:	d202      	bcs.n	d334 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x22>
    d32e:	2000      	movs	r0, #0
    d330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d334:	89a0      	ldrh	r0, [r4, #12]
    d336:	2500      	movs	r5, #0
    d338:	b140      	cbz	r0, d34c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3a>
    d33a:	f8b1 c000 	ldrh.w	ip, [r1]
    d33e:	4560      	cmp	r0, ip
    d340:	d006      	beq.n	d350 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3e>
    d342:	f44f 7101 	mov.w	r1, #516	; 0x204
    d346:	2014      	movs	r0, #20
    d348:	f7f3 fb8c 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d34c:	800d      	strh	r5, [r1, #0]
    d34e:	e00e      	b.n	d36e <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
    d350:	f894 c013 	ldrb.w	ip, [r4, #19]
    d354:	4418      	add	r0, r3
    d356:	f10c 0c05 	add.w	ip, ip, #5
    d35a:	44bc      	add	ip, r7
    d35c:	4460      	add	r0, ip
    d35e:	f8b4 c014 	ldrh.w	ip, [r4, #20]
    d362:	f820 cc03 	strh.w	ip, [r0, #-3]
    d366:	f894 c016 	ldrb.w	ip, [r4, #22]
    d36a:	f800 cc01 	strb.w	ip, [r0, #-1]
    d36e:	89a0      	ldrh	r0, [r4, #12]
    d370:	4430      	add	r0, r6
    d372:	81a0      	strh	r0, [r4, #12]
    d374:	8808      	ldrh	r0, [r1, #0]
    d376:	4430      	add	r0, r6
    d378:	8008      	strh	r0, [r1, #0]
    d37a:	b12a      	cbz	r2, d388 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x76>
    d37c:	1da1      	adds	r1, r4, #6
    d37e:	4620      	mov	r0, r4
    d380:	f7ff ff68 	bl	d254 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d384:	81a5      	strh	r5, [r4, #12]
    d386:	e00a      	b.n	d39e <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x8c>
    d388:	7ce0      	ldrb	r0, [r4, #19]
    d38a:	89a1      	ldrh	r1, [r4, #12]
    d38c:	1d40      	adds	r0, r0, #5
    d38e:	4438      	add	r0, r7
    d390:	4419      	add	r1, r3
    d392:	4408      	add	r0, r1
    d394:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    d398:	82a1      	strh	r1, [r4, #20]
    d39a:	7880      	ldrb	r0, [r0, #2]
    d39c:	75a0      	strb	r0, [r4, #22]
    d39e:	8225      	strh	r5, [r4, #16]
    d3a0:	2001      	movs	r0, #1
    d3a2:	e7c5      	b.n	d330 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>

0000d3a4 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>:
    d3a4:	1c80      	adds	r0, r0, #2
    d3a6:	4770      	bx	lr

0000d3a8 <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>:
    d3a8:	b510      	push	{r4, lr}
    d3aa:	88c2      	ldrh	r2, [r0, #6]
    d3ac:	8903      	ldrh	r3, [r0, #8]
    d3ae:	f3c2 010e 	ubfx	r1, r2, #0, #15
    d3b2:	f3c3 040e 	ubfx	r4, r3, #0, #15
    d3b6:	1a61      	subs	r1, r4, r1
    d3b8:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
    d3bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    d3c0:	429a      	cmp	r2, r3
    d3c2:	d101      	bne.n	d3c8 <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY+0x20>
    d3c4:	8842      	ldrh	r2, [r0, #2]
    d3c6:	4411      	add	r1, r2
    d3c8:	7cc2      	ldrb	r2, [r0, #19]
    d3ca:	8800      	ldrh	r0, [r0, #0]
    d3cc:	4410      	add	r0, r2
    d3ce:	1d40      	adds	r0, r0, #5
    d3d0:	b280      	uxth	r0, r0
    d3d2:	fb91 f0f0 	sdiv	r0, r1, r0
    d3d6:	b280      	uxth	r0, r0
    d3d8:	bd10      	pop	{r4, pc}

0000d3da <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    d3da:	b510      	push	{r4, lr}
    d3dc:	4604      	mov	r4, r0
    d3de:	88c0      	ldrh	r0, [r0, #6]
    d3e0:	88a1      	ldrh	r1, [r4, #4]
    d3e2:	4281      	cmp	r1, r0
    d3e4:	d003      	beq.n	d3ee <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x14>
    d3e6:	8960      	ldrh	r0, [r4, #10]
    d3e8:	b908      	cbnz	r0, d3ee <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x14>
    d3ea:	89e0      	ldrh	r0, [r4, #14]
    d3ec:	b108      	cbz	r0, d3f2 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x18>
    d3ee:	2000      	movs	r0, #0
    d3f0:	bd10      	pop	{r4, pc}
    d3f2:	1d21      	adds	r1, r4, #4
    d3f4:	4620      	mov	r0, r4
    d3f6:	f7ff ff2d 	bl	d254 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d3fa:	2000      	movs	r0, #0
    d3fc:	81e0      	strh	r0, [r4, #14]
    d3fe:	2001      	movs	r0, #1
    d400:	bd10      	pop	{r4, pc}

0000d402 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
    d402:	b510      	push	{r4, lr}
    d404:	4604      	mov	r4, r0
    d406:	f100 0218 	add.w	r2, r0, #24
    d40a:	88c0      	ldrh	r0, [r0, #6]
    d40c:	f3c0 000e 	ubfx	r0, r0, #0, #15
    d410:	4402      	add	r2, r0
    d412:	8820      	ldrh	r0, [r4, #0]
    d414:	2845      	cmp	r0, #69	; 0x45
    d416:	d200      	bcs.n	d41a <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x18>
    d418:	2045      	movs	r0, #69	; 0x45
    d41a:	4288      	cmp	r0, r1
    d41c:	d204      	bcs.n	d428 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x26>
    d41e:	f44f 7182 	mov.w	r1, #260	; 0x104
    d422:	2014      	movs	r0, #20
    d424:	f7f3 fb1e 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d428:	7ca0      	ldrb	r0, [r4, #18]
    d42a:	2800      	cmp	r0, #0
    d42c:	d003      	beq.n	d436 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x34>
    d42e:	8810      	ldrh	r0, [r2, #0]
    d430:	4288      	cmp	r0, r1
    d432:	d201      	bcs.n	d438 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x36>
    d434:	2000      	movs	r0, #0
    d436:	bd10      	pop	{r4, pc}
    d438:	8011      	strh	r1, [r2, #0]
    d43a:	1da1      	adds	r1, r4, #6
    d43c:	4620      	mov	r0, r4
    d43e:	f7ff ff09 	bl	d254 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d442:	2000      	movs	r0, #0
    d444:	74a0      	strb	r0, [r4, #18]
    d446:	2001      	movs	r0, #1
    d448:	bd10      	pop	{r4, pc}

0000d44a <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    d44a:	b510      	push	{r4, lr}
    d44c:	88c4      	ldrh	r4, [r0, #6]
    d44e:	8883      	ldrh	r3, [r0, #4]
    d450:	4601      	mov	r1, r0
    d452:	f100 0218 	add.w	r2, r0, #24
    d456:	f3c3 000e 	ubfx	r0, r3, #0, #15
    d45a:	4410      	add	r0, r2
    d45c:	42a3      	cmp	r3, r4
    d45e:	d002      	beq.n	d466 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x1c>
    d460:	8949      	ldrh	r1, [r1, #10]
    d462:	2900      	cmp	r1, #0
    d464:	d000      	beq.n	d468 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x1e>
    d466:	2000      	movs	r0, #0
    d468:	bd10      	pop	{r4, pc}

0000d46a <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>:
    d46a:	8803      	ldrh	r3, [r0, #0]
    d46c:	2b45      	cmp	r3, #69	; 0x45
    d46e:	d200      	bcs.n	d472 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA+0x8>
    d470:	2345      	movs	r3, #69	; 0x45
    d472:	8013      	strh	r3, [r2, #0]
    d474:	88c2      	ldrh	r2, [r0, #6]
    d476:	f3c2 030e 	ubfx	r3, r2, #0, #15
    d47a:	f100 0218 	add.w	r2, r0, #24
    d47e:	441a      	add	r2, r3
    d480:	600a      	str	r2, [r1, #0]
    d482:	8980      	ldrh	r0, [r0, #12]
    d484:	4770      	bx	lr

0000d486 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    d486:	7cc0      	ldrb	r0, [r0, #19]
    d488:	1d40      	adds	r0, r0, #5
    d48a:	4408      	add	r0, r1
    d48c:	1ec0      	subs	r0, r0, #3
    d48e:	6010      	str	r0, [r2, #0]
    d490:	8808      	ldrh	r0, [r1, #0]
    d492:	4770      	bx	lr

0000d494 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
    d494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d498:	460e      	mov	r6, r1
    d49a:	88c1      	ldrh	r1, [r0, #6]
    d49c:	8902      	ldrh	r2, [r0, #8]
    d49e:	4604      	mov	r4, r0
    d4a0:	f100 0818 	add.w	r8, r0, #24
    d4a4:	8800      	ldrh	r0, [r0, #0]
    d4a6:	f3c1 050e 	ubfx	r5, r1, #0, #15
    d4aa:	f3c2 070e 	ubfx	r7, r2, #0, #15
    d4ae:	2845      	cmp	r0, #69	; 0x45
    d4b0:	d200      	bcs.n	d4b4 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
    d4b2:	2045      	movs	r0, #69	; 0x45
    d4b4:	42b0      	cmp	r0, r6
    d4b6:	d203      	bcs.n	d4c0 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x2c>
    d4b8:	21c6      	movs	r1, #198	; 0xc6
    d4ba:	2014      	movs	r0, #20
    d4bc:	f7f3 fad2 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d4c0:	4610      	mov	r0, r2
    d4c2:	f7ff fee8 	bl	d296 <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    d4c6:	b110      	cbz	r0, d4ce <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x3a>
    d4c8:	2000      	movs	r0, #0
    d4ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d4ce:	42af      	cmp	r7, r5
    d4d0:	d908      	bls.n	d4e4 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    d4d2:	7ce1      	ldrb	r1, [r4, #19]
    d4d4:	1b78      	subs	r0, r7, r5
    d4d6:	1a40      	subs	r0, r0, r1
    d4d8:	1f40      	subs	r0, r0, #5
    d4da:	4286      	cmp	r6, r0
    d4dc:	dd02      	ble.n	d4e4 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    d4de:	2000      	movs	r0, #0
    d4e0:	74a0      	strb	r0, [r4, #18]
    d4e2:	e7f1      	b.n	d4c8 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x34>
    d4e4:	eb08 0005 	add.w	r0, r8, r5
    d4e8:	2101      	movs	r1, #1
    d4ea:	8006      	strh	r6, [r0, #0]
    d4ec:	74a1      	strb	r1, [r4, #18]
    d4ee:	e7ec      	b.n	d4ca <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x36>

0000d4f0 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
    d4f0:	b538      	push	{r3, r4, r5, lr}
    d4f2:	88c4      	ldrh	r4, [r0, #6]
    d4f4:	8881      	ldrh	r1, [r0, #4]
    d4f6:	f100 0218 	add.w	r2, r0, #24
    d4fa:	f3c1 030e 	ubfx	r3, r1, #0, #15
    d4fe:	441a      	add	r2, r3
    d500:	42a1      	cmp	r1, r4
    d502:	d010      	beq.n	d526 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    d504:	8943      	ldrh	r3, [r0, #10]
    d506:	89c5      	ldrh	r5, [r0, #14]
    d508:	8812      	ldrh	r2, [r2, #0]
    d50a:	442b      	add	r3, r5
    d50c:	4293      	cmp	r3, r2
    d50e:	d308      	bcc.n	d522 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x32>
    d510:	f8ad 1000 	strh.w	r1, [sp]
    d514:	4669      	mov	r1, sp
    d516:	f7ff fe9d 	bl	d254 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d51a:	f8bd 0000 	ldrh.w	r0, [sp]
    d51e:	42a0      	cmp	r0, r4
    d520:	d001      	beq.n	d526 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    d522:	2001      	movs	r0, #1
    d524:	bd38      	pop	{r3, r4, r5, pc}
    d526:	2000      	movs	r0, #0
    d528:	bd38      	pop	{r3, r4, r5, pc}

0000d52a <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
    d52a:	b570      	push	{r4, r5, r6, lr}
    d52c:	88c6      	ldrh	r6, [r0, #6]
    d52e:	8885      	ldrh	r5, [r0, #4]
    d530:	4603      	mov	r3, r0
    d532:	f100 0418 	add.w	r4, r0, #24
    d536:	f3c5 000e 	ubfx	r0, r5, #0, #15
    d53a:	4420      	add	r0, r4
    d53c:	42b5      	cmp	r5, r6
    d53e:	d102      	bne.n	d546 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x1c>
    d540:	2000      	movs	r0, #0
    d542:	81d8      	strh	r0, [r3, #14]
    d544:	bd70      	pop	{r4, r5, r6, pc}
    d546:	8804      	ldrh	r4, [r0, #0]
    d548:	895d      	ldrh	r5, [r3, #10]
    d54a:	7cde      	ldrb	r6, [r3, #19]
    d54c:	1b64      	subs	r4, r4, r5
    d54e:	4435      	add	r5, r6
    d550:	4428      	add	r0, r5
    d552:	880d      	ldrh	r5, [r1, #0]
    d554:	b2a4      	uxth	r4, r4
    d556:	1c80      	adds	r0, r0, #2
    d558:	42a5      	cmp	r5, r4
    d55a:	d900      	bls.n	d55e <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x34>
    d55c:	800c      	strh	r4, [r1, #0]
    d55e:	895c      	ldrh	r4, [r3, #10]
    d560:	b124      	cbz	r4, d56c <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x42>
    d562:	2400      	movs	r4, #0
    d564:	7014      	strb	r4, [r2, #0]
    d566:	8809      	ldrh	r1, [r1, #0]
    d568:	81d9      	strh	r1, [r3, #14]
    d56a:	bd70      	pop	{r4, r5, r6, pc}
    d56c:	2401      	movs	r4, #1
    d56e:	e7f9      	b.n	d564 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3a>

0000d570 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    d570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d574:	461d      	mov	r5, r3
    d576:	4616      	mov	r6, r2
    d578:	9f06      	ldr	r7, [sp, #24]
    d57a:	460b      	mov	r3, r1
    d57c:	4604      	mov	r4, r0
    d57e:	463a      	mov	r2, r7
    d580:	4629      	mov	r1, r5
    d582:	4630      	mov	r0, r6
    d584:	f000 f839 	bl	d5fa <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d588:	4283      	cmp	r3, r0
    d58a:	d201      	bcs.n	d590 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    d58c:	219e      	movs	r1, #158	; 0x9e
    d58e:	e012      	b.n	d5b6 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x46>
    d590:	07a0      	lsls	r0, r4, #30
    d592:	d001      	beq.n	d598 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x28>
    d594:	219f      	movs	r1, #159	; 0x9f
    d596:	e00e      	b.n	d5b6 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x46>
    d598:	2218      	movs	r2, #24
    d59a:	2100      	movs	r1, #0
    d59c:	4620      	mov	r0, r4
    d59e:	f003 f8e0 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d5a2:	19a8      	adds	r0, r5, r6
    d5a4:	1d40      	adds	r0, r0, #5
    d5a6:	4378      	muls	r0, r7
    d5a8:	b280      	uxth	r0, r0
    d5aa:	74e5      	strb	r5, [r4, #19]
    d5ac:	8060      	strh	r0, [r4, #2]
    d5ae:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    d5b2:	d903      	bls.n	d5bc <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x4c>
    d5b4:	21a4      	movs	r1, #164	; 0xa4
    d5b6:	2014      	movs	r0, #20
    d5b8:	f7f3 fa54 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d5bc:	8026      	strh	r6, [r4, #0]
    d5be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d5c2 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    d5c2:	b570      	push	{r4, r5, r6, lr}
    d5c4:	460b      	mov	r3, r1
    d5c6:	4604      	mov	r4, r0
    d5c8:	f100 0118 	add.w	r1, r0, #24
    d5cc:	8902      	ldrh	r2, [r0, #8]
    d5ce:	8880      	ldrh	r0, [r0, #4]
    d5d0:	f3c2 050e 	ubfx	r5, r2, #0, #15
    d5d4:	440d      	add	r5, r1
    d5d6:	4282      	cmp	r2, r0
    d5d8:	d101      	bne.n	d5de <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x1c>
    d5da:	2000      	movs	r0, #0
    d5dc:	bd70      	pop	{r4, r5, r6, pc}
    d5de:	b123      	cbz	r3, d5ea <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x28>
    d5e0:	7ce2      	ldrb	r2, [r4, #19]
    d5e2:	1ca9      	adds	r1, r5, #2
    d5e4:	4618      	mov	r0, r3
    d5e6:	f003 f842 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d5ea:	882d      	ldrh	r5, [r5, #0]
    d5ec:	f104 0108 	add.w	r1, r4, #8
    d5f0:	4620      	mov	r0, r4
    d5f2:	f7ff fe2f 	bl	d254 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d5f6:	4628      	mov	r0, r5
    d5f8:	bd70      	pop	{r4, r5, r6, pc}

0000d5fa <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    d5fa:	4401      	add	r1, r0
    d5fc:	1d49      	adds	r1, r1, #5
    d5fe:	4351      	muls	r1, r2
    d600:	b28a      	uxth	r2, r1
    d602:	2100      	movs	r1, #0
    d604:	2845      	cmp	r0, #69	; 0x45
    d606:	d202      	bcs.n	d60e <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x14>
    d608:	f1c0 0045 	rsb	r0, r0, #69	; 0x45
    d60c:	b281      	uxth	r1, r0
    d60e:	3218      	adds	r2, #24
    d610:	1850      	adds	r0, r2, r1
    d612:	b280      	uxth	r0, r0
    d614:	4770      	bx	lr

0000d616 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    d616:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d61a:	4688      	mov	r8, r1
    d61c:	88c1      	ldrh	r1, [r0, #6]
    d61e:	4604      	mov	r4, r0
    d620:	8900      	ldrh	r0, [r0, #8]
    d622:	f3c1 060e 	ubfx	r6, r1, #0, #15
    d626:	f104 0518 	add.w	r5, r4, #24
    d62a:	f3c0 070e 	ubfx	r7, r0, #0, #15
    d62e:	eb05 0906 	add.w	r9, r5, r6
    d632:	f7ff fe30 	bl	d296 <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    d636:	2200      	movs	r2, #0
    d638:	b998      	cbnz	r0, d662 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    d63a:	8820      	ldrh	r0, [r4, #0]
    d63c:	2845      	cmp	r0, #69	; 0x45
    d63e:	d200      	bcs.n	d642 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    d640:	2045      	movs	r0, #69	; 0x45
    d642:	42b7      	cmp	r7, r6
    d644:	d906      	bls.n	d654 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    d646:	7ce3      	ldrb	r3, [r4, #19]
    d648:	1bb9      	subs	r1, r7, r6
    d64a:	1ac9      	subs	r1, r1, r3
    d64c:	1f49      	subs	r1, r1, #5
    d64e:	4281      	cmp	r1, r0
    d650:	da00      	bge.n	d654 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    d652:	4608      	mov	r0, r1
    d654:	89a1      	ldrh	r1, [r4, #12]
    d656:	b111      	cbz	r1, d65e <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    d658:	f8b9 3000 	ldrh.w	r3, [r9]
    d65c:	1ac0      	subs	r0, r0, r3
    d65e:	4540      	cmp	r0, r8
    d660:	da03      	bge.n	d66a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    d662:	8222      	strh	r2, [r4, #16]
    d664:	2000      	movs	r0, #0
    d666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d66a:	7ce0      	ldrb	r0, [r4, #19]
    d66c:	4429      	add	r1, r5
    d66e:	1d40      	adds	r0, r0, #5
    d670:	4430      	add	r0, r6
    d672:	4408      	add	r0, r1
    d674:	f8a4 8010 	strh.w	r8, [r4, #16]
    d678:	1ec0      	subs	r0, r0, #3
    d67a:	e7f4      	b.n	d666 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0000d67c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    d67c:	b570      	push	{r4, r5, r6, lr}
    d67e:	2300      	movs	r3, #0
    d680:	f1a1 0208 	sub.w	r2, r1, #8
    d684:	f64f 74f7 	movw	r4, #65527	; 0xfff7
    d688:	42a2      	cmp	r2, r4
    d68a:	d304      	bcc.n	d696 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    d68c:	f240 11cd 	movw	r1, #461	; 0x1cd
    d690:	2015      	movs	r0, #21
    d692:	f7f3 f9e7 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d696:	6802      	ldr	r2, [r0, #0]
    d698:	b90a      	cbnz	r2, d69e <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x22>
    d69a:	e01e      	b.n	d6da <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    d69c:	4610      	mov	r0, r2
    d69e:	6802      	ldr	r2, [r0, #0]
    d6a0:	8893      	ldrh	r3, [r2, #4]
    d6a2:	428b      	cmp	r3, r1
    d6a4:	d002      	beq.n	d6ac <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x30>
    d6a6:	6813      	ldr	r3, [r2, #0]
    d6a8:	2b00      	cmp	r3, #0
    d6aa:	d1f7      	bne.n	d69c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x20>
    d6ac:	8894      	ldrh	r4, [r2, #4]
    d6ae:	4613      	mov	r3, r2
    d6b0:	428c      	cmp	r4, r1
    d6b2:	d101      	bne.n	d6b8 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x3c>
    d6b4:	6811      	ldr	r1, [r2, #0]
    d6b6:	e00d      	b.n	d6d4 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x58>
    d6b8:	f101 0508 	add.w	r5, r1, #8
    d6bc:	b2ae      	uxth	r6, r5
    d6be:	2500      	movs	r5, #0
    d6c0:	42b4      	cmp	r4, r6
    d6c2:	d309      	bcc.n	d6d8 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5c>
    d6c4:	1a64      	subs	r4, r4, r1
    d6c6:	4411      	add	r1, r2
    d6c8:	600d      	str	r5, [r1, #0]
    d6ca:	808c      	strh	r4, [r1, #4]
    d6cc:	6802      	ldr	r2, [r0, #0]
    d6ce:	6812      	ldr	r2, [r2, #0]
    d6d0:	6002      	str	r2, [r0, #0]
    d6d2:	600a      	str	r2, [r1, #0]
    d6d4:	6001      	str	r1, [r0, #0]
    d6d6:	e000      	b.n	d6da <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    d6d8:	2300      	movs	r3, #0
    d6da:	4618      	mov	r0, r3
    d6dc:	bd70      	pop	{r4, r5, r6, pc}

0000d6de <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    d6de:	b510      	push	{r4, lr}
    d6e0:	000c      	movs	r4, r1
    d6e2:	d004      	beq.n	d6ee <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x10>
    d6e4:	2c08      	cmp	r4, #8
    d6e6:	d207      	bcs.n	d6f8 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    d6e8:	f240 1195 	movw	r1, #405	; 0x195
    d6ec:	e00a      	b.n	d704 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x26>
    d6ee:	b108      	cbz	r0, d6f4 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x16>
    d6f0:	2100      	movs	r1, #0
    d6f2:	6001      	str	r1, [r0, #0]
    d6f4:	2000      	movs	r0, #0
    d6f6:	bd10      	pop	{r4, pc}
    d6f8:	b158      	cbz	r0, d712 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x34>
    d6fa:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    d6fe:	d304      	bcc.n	d70a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x2c>
    d700:	f240 11a7 	movw	r1, #423	; 0x1a7
    d704:	2015      	movs	r0, #21
    d706:	f7f3 f9ad 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d70a:	b2a1      	uxth	r1, r4
    d70c:	6800      	ldr	r0, [r0, #0]
    d70e:	f000 f814 	bl	d73a <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    d712:	1d20      	adds	r0, r4, #4
    d714:	bd10      	pop	{r4, pc}

0000d716 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    d716:	2100      	movs	r1, #0
    d718:	6802      	ldr	r2, [r0, #0]
    d71a:	e003      	b.n	d724 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    d71c:	8893      	ldrh	r3, [r2, #4]
    d71e:	6812      	ldr	r2, [r2, #0]
    d720:	4419      	add	r1, r3
    d722:	b289      	uxth	r1, r1
    d724:	2a00      	cmp	r2, #0
    d726:	d1f9      	bne.n	d71c <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    d728:	f000 b807 	b.w	d73a <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000d72c <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    d72c:	2300      	movs	r3, #0
    d72e:	600b      	str	r3, [r1, #0]
    d730:	808a      	strh	r2, [r1, #4]
    d732:	6802      	ldr	r2, [r0, #0]
    d734:	600a      	str	r2, [r1, #0]
    d736:	6001      	str	r1, [r0, #0]
    d738:	4770      	bx	lr
    d73a:	2300      	movs	r3, #0
    d73c:	6043      	str	r3, [r0, #4]
    d73e:	1d02      	adds	r2, r0, #4
    d740:	8101      	strh	r1, [r0, #8]
    d742:	6002      	str	r2, [r0, #0]
    d744:	4770      	bx	lr

0000d746 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
    d746:	b51c      	push	{r2, r3, r4, lr}
    d748:	4604      	mov	r4, r0
    d74a:	2000      	movs	r0, #0
    d74c:	9001      	str	r0, [sp, #4]
    d74e:	9000      	str	r0, [sp, #0]
    d750:	f88d 4006 	strb.w	r4, [sp, #6]
    d754:	e00a      	b.n	d76c <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x26>
    d756:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    d75a:	4621      	mov	r1, r4
    d75c:	f7f3 fbe6 	bl	f2c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    d760:	b120      	cbz	r0, d76c <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x26>
    d762:	f44f 7129 	mov.w	r1, #676	; 0x2a4
    d766:	2017      	movs	r0, #23
    d768:	f7f3 f97c 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d76c:	4668      	mov	r0, sp
    d76e:	f7f3 fb97 	bl	ea0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    d772:	2800      	cmp	r0, #0
    d774:	d0ef      	beq.n	d756 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x10>
    d776:	bd1c      	pop	{r2, r3, r4, pc}

0000d778 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    d778:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    d77c:	3aff      	subs	r2, #255	; 0xff
    d77e:	d000      	beq.n	d782 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xa>
    d780:	b109      	cbz	r1, d786 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xe>
    d782:	2000      	movs	r0, #0
    d784:	4770      	bx	lr
    d786:	f7f3 bc23 	b.w	fd0 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x30>
    d78a:	b510      	push	{r4, lr}
    d78c:	4604      	mov	r4, r0
    d78e:	f7f3 fc6b 	bl	1068 <CONFIG_FPROTECT_BLOCK_SIZE+0x68>
    d792:	42a0      	cmp	r0, r4
    d794:	d901      	bls.n	d79a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x22>
    d796:	2001      	movs	r0, #1
    d798:	bd10      	pop	{r4, pc}
    d79a:	2000      	movs	r0, #0
    d79c:	bd10      	pop	{r4, pc}

0000d79e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    d79e:	b570      	push	{r4, r5, r6, lr}
    d7a0:	460e      	mov	r6, r1
    d7a2:	461d      	mov	r5, r3
    d7a4:	4611      	mov	r1, r2
    d7a6:	f000 f813 	bl	d7d0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    d7aa:	4604      	mov	r4, r0
    d7ac:	4629      	mov	r1, r5
    d7ae:	4630      	mov	r0, r6
    d7b0:	f000 f804 	bl	d7bc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    d7b4:	4420      	add	r0, r4
    d7b6:	1d00      	adds	r0, r0, #4
    d7b8:	b280      	uxth	r0, r0
    d7ba:	bd70      	pop	{r4, r5, r6, pc}
    d7bc:	b510      	push	{r4, lr}
    d7be:	460a      	mov	r2, r1
    d7c0:	2109      	movs	r1, #9
    d7c2:	f7ff ff1a 	bl	d5fa <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d7c6:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    d7ca:	1cc0      	adds	r0, r0, #3
    d7cc:	4008      	ands	r0, r1
    d7ce:	bd10      	pop	{r4, pc}
    d7d0:	b510      	push	{r4, lr}
    d7d2:	460a      	mov	r2, r1
    d7d4:	210a      	movs	r1, #10
    d7d6:	f7ff ff10 	bl	d5fa <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d7da:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    d7de:	1cc0      	adds	r0, r0, #3
    d7e0:	4008      	ands	r0, r1
    d7e2:	bd10      	pop	{r4, pc}
    d7e4:	2800      	cmp	r0, #0
    d7e6:	db09      	blt.n	d7fc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x5e>
    d7e8:	f000 021f 	and.w	r2, r0, #31
    d7ec:	2101      	movs	r1, #1
    d7ee:	4091      	lsls	r1, r2
    d7f0:	0940      	lsrs	r0, r0, #5
    d7f2:	0080      	lsls	r0, r0, #2
    d7f4:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d7f8:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    d7fc:	4770      	bx	lr
    d7fe:	2800      	cmp	r0, #0
    d800:	db0d      	blt.n	d81e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x80>
    d802:	f000 021f 	and.w	r2, r0, #31
    d806:	2101      	movs	r1, #1
    d808:	4091      	lsls	r1, r2
    d80a:	0940      	lsrs	r0, r0, #5
    d80c:	0080      	lsls	r0, r0, #2
    d80e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d812:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    d816:	f3bf 8f4f 	dsb	sy
    d81a:	f3bf 8f6f 	isb	sy
    d81e:	4770      	bx	lr
    d820:	b510      	push	{r4, lr}
    d822:	200e      	movs	r0, #14
    d824:	f7ff ffeb 	bl	d7fe <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x60>
    d828:	200e      	movs	r0, #14
    d82a:	f7ff ffdb 	bl	d7e4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
    d82e:	200f      	movs	r0, #15
    d830:	f7ff ffe5 	bl	d7fe <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x60>
    d834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d838:	200f      	movs	r0, #15
    d83a:	f7ff bfd3 	b.w	d7e4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
    d83e:	2800      	cmp	r0, #0
    d840:	db09      	blt.n	d856 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xb8>
    d842:	f000 021f 	and.w	r2, r0, #31
    d846:	2101      	movs	r1, #1
    d848:	4091      	lsls	r1, r2
    d84a:	0940      	lsrs	r0, r0, #5
    d84c:	0080      	lsls	r0, r0, #2
    d84e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d852:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    d856:	4770      	bx	lr
    d858:	5840      	ldr	r0, [r0, r1]
    d85a:	2800      	cmp	r0, #0
    d85c:	d000      	beq.n	d860 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc2>
    d85e:	2001      	movs	r0, #1
    d860:	4770      	bx	lr

0000d862 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    d862:	b510      	push	{r4, lr}
    d864:	4604      	mov	r4, r0
    d866:	4620      	mov	r0, r4
    d868:	f7f3 fd70 	bl	134c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x28>
    d86c:	2811      	cmp	r0, #17
    d86e:	d0fa      	beq.n	d866 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x4>
    d870:	bd10      	pop	{r4, pc}

0000d872 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    d872:	b510      	push	{r4, lr}
    d874:	f7ff fff5 	bl	d862 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    d878:	2800      	cmp	r0, #0
    d87a:	d003      	beq.n	d884 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x12>
    d87c:	21a0      	movs	r1, #160	; 0xa0
    d87e:	201d      	movs	r0, #29
    d880:	f7f3 f8f0 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d884:	bd10      	pop	{r4, pc}

0000d886 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    d886:	f7f3 bebf 	b.w	1608 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x20>

0000d88a <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    d88a:	f7f3 bead 	b.w	15e8 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>

0000d88e <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>:
    d88e:	b510      	push	{r4, lr}
    d890:	4050      	eors	r0, r2
    d892:	780a      	ldrb	r2, [r1, #0]
    d894:	781c      	ldrb	r4, [r3, #0]
    d896:	4062      	eors	r2, r4
    d898:	4410      	add	r0, r2
    d89a:	784a      	ldrb	r2, [r1, #1]
    d89c:	785c      	ldrb	r4, [r3, #1]
    d89e:	4062      	eors	r2, r4
    d8a0:	4410      	add	r0, r2
    d8a2:	788a      	ldrb	r2, [r1, #2]
    d8a4:	789c      	ldrb	r4, [r3, #2]
    d8a6:	4062      	eors	r2, r4
    d8a8:	4410      	add	r0, r2
    d8aa:	78ca      	ldrb	r2, [r1, #3]
    d8ac:	78dc      	ldrb	r4, [r3, #3]
    d8ae:	4062      	eors	r2, r4
    d8b0:	4410      	add	r0, r2
    d8b2:	790a      	ldrb	r2, [r1, #4]
    d8b4:	791c      	ldrb	r4, [r3, #4]
    d8b6:	7949      	ldrb	r1, [r1, #5]
    d8b8:	4062      	eors	r2, r4
    d8ba:	4410      	add	r0, r2
    d8bc:	795a      	ldrb	r2, [r3, #5]
    d8be:	4051      	eors	r1, r2
    d8c0:	42c1      	cmn	r1, r0
    d8c2:	d101      	bne.n	d8c8 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI+0x3a>
    d8c4:	2001      	movs	r0, #1
    d8c6:	bd10      	pop	{r4, pc}
    d8c8:	2000      	movs	r0, #0
    d8ca:	bd10      	pop	{r4, pc}

0000d8cc <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    d8cc:	b510      	push	{r4, lr}
    d8ce:	2900      	cmp	r1, #0
    d8d0:	4604      	mov	r4, r0
    d8d2:	f04f 0106 	mov.w	r1, #6
    d8d6:	d002      	beq.n	d8de <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    d8d8:	f7f3 f956 	bl	b88 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    d8dc:	e001      	b.n	d8e2 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    d8de:	f7f3 f961 	bl	ba4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    d8e2:	7960      	ldrb	r0, [r4, #5]
    d8e4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    d8e8:	7160      	strb	r0, [r4, #5]
    d8ea:	bd10      	pop	{r4, pc}

0000d8ec <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    d8ec:	4770      	bx	lr

0000d8ee <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    d8ee:	b530      	push	{r4, r5, lr}
    d8f0:	460c      	mov	r4, r1
    d8f2:	4605      	mov	r5, r0
    d8f4:	b08d      	sub	sp, #52	; 0x34
    d8f6:	f04f 0103 	mov.w	r1, #3
    d8fa:	f104 0003 	add.w	r0, r4, #3
    d8fe:	b112      	cbz	r2, d906 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    d900:	f7f3 f942 	bl	b88 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    d904:	e001      	b.n	d90a <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    d906:	f7f3 f94d 	bl	ba4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    d90a:	7960      	ldrb	r0, [r4, #5]
    d90c:	220d      	movs	r2, #13
    d90e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    d912:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    d916:	7160      	strb	r0, [r4, #5]
    d918:	2100      	movs	r1, #0
    d91a:	a804      	add	r0, sp, #16
    d91c:	f002 ff21 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d920:	78e0      	ldrb	r0, [r4, #3]
    d922:	f88d 001f 	strb.w	r0, [sp, #31]
    d926:	7920      	ldrb	r0, [r4, #4]
    d928:	f88d 001e 	strb.w	r0, [sp, #30]
    d92c:	7960      	ldrb	r0, [r4, #5]
    d92e:	f88d 001d 	strb.w	r0, [sp, #29]
    d932:	2210      	movs	r2, #16
    d934:	4629      	mov	r1, r5
    d936:	4668      	mov	r0, sp
    d938:	f002 fe99 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d93c:	4668      	mov	r0, sp
    d93e:	f7ff ff98 	bl	d872 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    d942:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    d946:	7020      	strb	r0, [r4, #0]
    d948:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    d94c:	7060      	strb	r0, [r4, #1]
    d94e:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    d952:	70a0      	strb	r0, [r4, #2]
    d954:	b00d      	add	sp, #52	; 0x34
    d956:	bd30      	pop	{r4, r5, pc}

0000d958 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ>:
    d958:	b530      	push	{r4, r5, lr}
    d95a:	b08d      	sub	sp, #52	; 0x34
    d95c:	460c      	mov	r4, r1
    d95e:	4605      	mov	r5, r0
    d960:	220d      	movs	r2, #13
    d962:	2100      	movs	r1, #0
    d964:	a804      	add	r0, sp, #16
    d966:	f002 fefc 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d96a:	78e0      	ldrb	r0, [r4, #3]
    d96c:	f88d 001f 	strb.w	r0, [sp, #31]
    d970:	7920      	ldrb	r0, [r4, #4]
    d972:	f88d 001e 	strb.w	r0, [sp, #30]
    d976:	7960      	ldrb	r0, [r4, #5]
    d978:	f88d 001d 	strb.w	r0, [sp, #29]
    d97c:	2210      	movs	r2, #16
    d97e:	4629      	mov	r1, r5
    d980:	4668      	mov	r0, sp
    d982:	f002 fe74 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d986:	4668      	mov	r0, sp
    d988:	f7ff ff73 	bl	d872 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    d98c:	7820      	ldrb	r0, [r4, #0]
    d98e:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
    d992:	4288      	cmp	r0, r1
    d994:	d10c      	bne.n	d9b0 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    d996:	7860      	ldrb	r0, [r4, #1]
    d998:	f89d 102e 	ldrb.w	r1, [sp, #46]	; 0x2e
    d99c:	4288      	cmp	r0, r1
    d99e:	d107      	bne.n	d9b0 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    d9a0:	78a0      	ldrb	r0, [r4, #2]
    d9a2:	f89d 102d 	ldrb.w	r1, [sp, #45]	; 0x2d
    d9a6:	4288      	cmp	r0, r1
    d9a8:	d102      	bne.n	d9b0 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    d9aa:	2001      	movs	r0, #1
    d9ac:	b00d      	add	sp, #52	; 0x34
    d9ae:	bd30      	pop	{r4, r5, pc}
    d9b0:	2000      	movs	r0, #0
    d9b2:	e7fb      	b.n	d9ac <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x54>

0000d9b4 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>:
    d9b4:	f7f4 b98e 	b.w	1cd4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b0>
    d9b8:	b510      	push	{r4, lr}
    d9ba:	2801      	cmp	r0, #1
    d9bc:	d008      	beq.n	d9d0 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x1c>
    d9be:	2802      	cmp	r0, #2
    d9c0:	d004      	beq.n	d9cc <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    d9c2:	f240 4122 	movw	r1, #1058	; 0x422
    d9c6:	2006      	movs	r0, #6
    d9c8:	f7f3 f84c 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d9cc:	2001      	movs	r0, #1
    d9ce:	bd10      	pop	{r4, pc}
    d9d0:	2000      	movs	r0, #0
    d9d2:	bd10      	pop	{r4, pc}
    d9d4:	2900      	cmp	r1, #0
    d9d6:	d004      	beq.n	d9e2 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x2e>
    d9d8:	2801      	cmp	r0, #1
    d9da:	d003      	beq.n	d9e4 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    d9dc:	2901      	cmp	r1, #1
    d9de:	d001      	beq.n	d9e4 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    d9e0:	2002      	movs	r0, #2
    d9e2:	4770      	bx	lr
    d9e4:	2001      	movs	r0, #1
    d9e6:	4770      	bx	lr
    d9e8:	f7ff bd9f 	b.w	d52a <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>

0000d9ec <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    d9ec:	2101      	movs	r1, #1
    d9ee:	f7f4 bcff 	b.w	23f0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x74>

0000d9f2 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    d9f2:	b510      	push	{r4, lr}
    d9f4:	f002 fc16 	bl	10224 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    d9f8:	b118      	cbz	r0, da02 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    d9fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d9fe:	f7f9 bf97 	b.w	7930 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    da02:	20ff      	movs	r0, #255	; 0xff
    da04:	bd10      	pop	{r4, pc}

0000da06 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    da06:	b510      	push	{r4, lr}
    da08:	f7f4 fd3a 	bl	2480 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    da0c:	2810      	cmp	r0, #16
    da0e:	d003      	beq.n	da18 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    da10:	f7f4 fd06 	bl	2420 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    da14:	2810      	cmp	r0, #16
    da16:	d100      	bne.n	da1a <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x14>
    da18:	2008      	movs	r0, #8
    da1a:	bd10      	pop	{r4, pc}

0000da1c <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
    da1c:	b510      	push	{r4, lr}
    da1e:	f7f4 fd2f 	bl	2480 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    da22:	2810      	cmp	r0, #16
    da24:	d003      	beq.n	da2e <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY+0x12>
    da26:	f7f4 fd89 	bl	253c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1c0>
    da2a:	2001      	movs	r0, #1
    da2c:	bd10      	pop	{r4, pc}
    da2e:	2000      	movs	r0, #0
    da30:	bd10      	pop	{r4, pc}

0000da32 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    da32:	b570      	push	{r4, r5, r6, lr}
    da34:	460e      	mov	r6, r1
    da36:	b08c      	sub	sp, #48	; 0x30
    da38:	4614      	mov	r4, r2
    da3a:	4601      	mov	r1, r0
    da3c:	461d      	mov	r5, r3
    da3e:	2210      	movs	r2, #16
    da40:	4668      	mov	r0, sp
    da42:	f000 f997 	bl	dd74 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    da46:	2210      	movs	r2, #16
    da48:	4631      	mov	r1, r6
    da4a:	a804      	add	r0, sp, #16
    da4c:	f000 f992 	bl	dd74 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    da50:	4668      	mov	r0, sp
    da52:	f7ff ff0e 	bl	d872 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    da56:	a908      	add	r1, sp, #32
    da58:	f04f 0210 	mov.w	r2, #16
    da5c:	4628      	mov	r0, r5
    da5e:	b11c      	cbz	r4, da68 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    da60:	f000 f988 	bl	dd74 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    da64:	b00c      	add	sp, #48	; 0x30
    da66:	bd70      	pop	{r4, r5, r6, pc}
    da68:	f002 fe01 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    da6c:	e7fa      	b.n	da64 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>
    da6e:	0781      	lsls	r1, r0, #30
    da70:	d501      	bpl.n	da76 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x44>
    da72:	2002      	movs	r0, #2
    da74:	4770      	bx	lr
    da76:	07c0      	lsls	r0, r0, #31
    da78:	d0fc      	beq.n	da74 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x42>
    da7a:	2001      	movs	r0, #1
    da7c:	4770      	bx	lr

0000da7e <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY>:
    da7e:	b570      	push	{r4, r5, r6, lr}
    da80:	4606      	mov	r6, r0
    da82:	7900      	ldrb	r0, [r0, #4]
    da84:	0940      	lsrs	r0, r0, #5
    da86:	d10e      	bne.n	daa6 <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY+0x28>
    da88:	2500      	movs	r5, #0
    da8a:	462c      	mov	r4, r5
    da8c:	5d30      	ldrb	r0, [r6, r4]
    da8e:	f000 fd31 	bl	e4f4 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>
    da92:	1c64      	adds	r4, r4, #1
    da94:	4428      	add	r0, r5
    da96:	b2e4      	uxtb	r4, r4
    da98:	b2c5      	uxtb	r5, r0
    da9a:	2c05      	cmp	r4, #5
    da9c:	d3f6      	bcc.n	da8c <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY+0xe>
    da9e:	2d01      	cmp	r5, #1
    daa0:	d901      	bls.n	daa6 <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY+0x28>
    daa2:	2001      	movs	r0, #1
    daa4:	bd70      	pop	{r4, r5, r6, pc}
    daa6:	2000      	movs	r0, #0
    daa8:	bd70      	pop	{r4, r5, r6, pc}

0000daaa <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    daaa:	b510      	push	{r4, lr}
    daac:	460c      	mov	r4, r1
    daae:	2100      	movs	r1, #0
    dab0:	f7ff fe62 	bl	d778 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    dab4:	6060      	str	r0, [r4, #4]
    dab6:	b110      	cbz	r0, dabe <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x14>
    dab8:	2000      	movs	r0, #0
    daba:	7020      	strb	r0, [r4, #0]
    dabc:	bd10      	pop	{r4, pc}
    dabe:	2002      	movs	r0, #2
    dac0:	bd10      	pop	{r4, pc}

0000dac2 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    dac2:	f240 41e2 	movw	r1, #1250	; 0x4e2
    dac6:	4348      	muls	r0, r1
    dac8:	4770      	bx	lr

0000daca <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    daca:	f240 41e2 	movw	r1, #1250	; 0x4e2
    dace:	fbb0 f0f1 	udiv	r0, r0, r1
    dad2:	b280      	uxth	r0, r0
    dad4:	4770      	bx	lr

0000dad6 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>:
    dad6:	b570      	push	{r4, r5, r6, lr}
    dad8:	4604      	mov	r4, r0
    dada:	4290      	cmp	r0, r2
    dadc:	d20b      	bcs.n	daf6 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x20>
    dade:	1b10      	subs	r0, r2, r4
    dae0:	2865      	cmp	r0, #101	; 0x65
    dae2:	d200      	bcs.n	dae6 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x10>
    dae4:	2065      	movs	r0, #101	; 0x65
    dae6:	1825      	adds	r5, r4, r0
    dae8:	428d      	cmp	r5, r1
    daea:	d803      	bhi.n	daf4 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x1e>
    daec:	2103      	movs	r1, #3
    daee:	f7fc f959 	bl	9da4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    daf2:	b108      	cbz	r0, daf8 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x22>
    daf4:	4620      	mov	r0, r4
    daf6:	bd70      	pop	{r4, r5, r6, pc}
    daf8:	4628      	mov	r0, r5
    dafa:	bd70      	pop	{r4, r5, r6, pc}

0000dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
    dafc:	b510      	push	{r4, lr}
    dafe:	f1a2 0310 	sub.w	r3, r2, #16
    db02:	290d      	cmp	r1, #13
    db04:	d258      	bcs.n	dbb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    db06:	e8df f001 	tbb	[pc, r1]
    db0a:	0907      	.short	0x0907
    db0c:	1d1a150e 	.word	0x1d1a150e
    db10:	5937342c 	.word	0x5937342c
    db14:	0053423b 	.word	0x0053423b
    db18:	b38a      	cbz	r2, db7e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x82>
    db1a:	e04d      	b.n	dbb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    db1c:	2a06      	cmp	r2, #6
    db1e:	d049      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db20:	2a07      	cmp	r2, #7
    db22:	d047      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db24:	e048      	b.n	dbb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    db26:	2a0b      	cmp	r2, #11
    db28:	d044      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db2a:	2a0c      	cmp	r2, #12
    db2c:	d042      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db2e:	2a0a      	cmp	r2, #10
    db30:	d040      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db32:	e041      	b.n	dbb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    db34:	2a0d      	cmp	r2, #13
    db36:	d03d      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db38:	2a0e      	cmp	r2, #14
    db3a:	d03b      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db3c:	e03c      	b.n	dbb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    db3e:	2b0c      	cmp	r3, #12
    db40:	d938      	bls.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db42:	e039      	b.n	dbb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    db44:	2a13      	cmp	r2, #19
    db46:	d035      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db48:	2a12      	cmp	r2, #18
    db4a:	d033      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db4c:	f890 005e 	ldrb.w	r0, [r0, #94]	; 0x5e
    db50:	b120      	cbz	r0, db5c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x60>
    db52:	2a13      	cmp	r2, #19
    db54:	d330      	bcc.n	dbb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    db56:	2a1b      	cmp	r2, #27
    db58:	d92c      	bls.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db5a:	e02d      	b.n	dbb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    db5c:	2a17      	cmp	r2, #23
    db5e:	d2fa      	bcs.n	db56 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x5a>
    db60:	e02a      	b.n	dbb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    db62:	2b03      	cmp	r3, #3
    db64:	d926      	bls.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db66:	f890 005e 	ldrb.w	r0, [r0, #94]	; 0x5e
    db6a:	b300      	cbz	r0, dbae <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb2>
    db6c:	2a1c      	cmp	r2, #28
    db6e:	d921      	bls.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db70:	e022      	b.n	dbb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    db72:	2a04      	cmp	r2, #4
    db74:	d01e      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db76:	e01f      	b.n	dbb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    db78:	2a01      	cmp	r2, #1
    db7a:	d01b      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db7c:	e01c      	b.n	dbb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    db7e:	e019      	b.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db80:	2a1d      	cmp	r2, #29
    db82:	d017      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db84:	2a1e      	cmp	r2, #30
    db86:	d015      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db88:	2a1f      	cmp	r2, #31
    db8a:	d013      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db8c:	e014      	b.n	dbb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    db8e:	2a20      	cmp	r2, #32
    db90:	d010      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db92:	2a21      	cmp	r2, #33	; 0x21
    db94:	d00e      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db96:	2a22      	cmp	r2, #34	; 0x22
    db98:	d00c      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db9a:	2a23      	cmp	r2, #35	; 0x23
    db9c:	d00a      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db9e:	2a24      	cmp	r2, #36	; 0x24
    dba0:	d008      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    dba2:	2a25      	cmp	r2, #37	; 0x25
    dba4:	d006      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    dba6:	2a26      	cmp	r2, #38	; 0x26
    dba8:	d004      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    dbaa:	2a2e      	cmp	r2, #46	; 0x2e
    dbac:	d002      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    dbae:	e003      	b.n	dbb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    dbb0:	2a28      	cmp	r2, #40	; 0x28
    dbb2:	d101      	bne.n	dbb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    dbb4:	2001      	movs	r0, #1
    dbb6:	bd10      	pop	{r4, pc}
    dbb8:	2000      	movs	r0, #0
    dbba:	bd10      	pop	{r4, pc}
    dbbc:	2a05      	cmp	r2, #5
    dbbe:	d1fb      	bne.n	dbb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    dbc0:	e7f8      	b.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>

0000dbc2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
    dbc2:	280b      	cmp	r0, #11
    dbc4:	d019      	beq.n	dbfa <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dbc6:	280c      	cmp	r0, #12
    dbc8:	d017      	beq.n	dbfa <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dbca:	280a      	cmp	r0, #10
    dbcc:	d015      	beq.n	dbfa <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dbce:	280d      	cmp	r0, #13
    dbd0:	d013      	beq.n	dbfa <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dbd2:	280e      	cmp	r0, #14
    dbd4:	d011      	beq.n	dbfa <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dbd6:	2820      	cmp	r0, #32
    dbd8:	d00f      	beq.n	dbfa <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dbda:	2821      	cmp	r0, #33	; 0x21
    dbdc:	d00d      	beq.n	dbfa <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dbde:	2822      	cmp	r0, #34	; 0x22
    dbe0:	d00b      	beq.n	dbfa <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dbe2:	2823      	cmp	r0, #35	; 0x23
    dbe4:	d009      	beq.n	dbfa <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dbe6:	2824      	cmp	r0, #36	; 0x24
    dbe8:	d007      	beq.n	dbfa <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dbea:	2825      	cmp	r0, #37	; 0x25
    dbec:	d005      	beq.n	dbfa <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dbee:	2826      	cmp	r0, #38	; 0x26
    dbf0:	d003      	beq.n	dbfa <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dbf2:	282e      	cmp	r0, #46	; 0x2e
    dbf4:	d001      	beq.n	dbfa <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dbf6:	2000      	movs	r0, #0
    dbf8:	4770      	bx	lr
    dbfa:	2001      	movs	r0, #1
    dbfc:	4770      	bx	lr

0000dbfe <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    dbfe:	f011 0f0c 	tst.w	r1, #12
    dc02:	d018      	beq.n	dc36 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x38>
    dc04:	074a      	lsls	r2, r1, #29
    dc06:	f44f 7116 	mov.w	r1, #600	; 0x258
    dc0a:	2a00      	cmp	r2, #0
    dc0c:	da02      	bge.n	dc14 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
    dc0e:	f04f 0210 	mov.w	r2, #16
    dc12:	e001      	b.n	dc18 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
    dc14:	f04f 0240 	mov.w	r2, #64	; 0x40
    dc18:	da01      	bge.n	dc1e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
    dc1a:	f04f 0196 	mov.w	r1, #150	; 0x96
    dc1e:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    dc22:	eba0 0301 	sub.w	r3, r0, r1
    dc26:	4288      	cmp	r0, r1
    dc28:	d903      	bls.n	dc32 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    dc2a:	fb93 f0f2 	sdiv	r0, r3, r2
    dc2e:	b280      	uxth	r0, r0
    dc30:	4770      	bx	lr
    dc32:	2000      	movs	r0, #0
    dc34:	4770      	bx	lr
    dc36:	2902      	cmp	r1, #2
    dc38:	d008      	beq.n	dc4c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    dc3a:	2870      	cmp	r0, #112	; 0x70
    dc3c:	d9f9      	bls.n	dc32 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    dc3e:	3870      	subs	r0, #112	; 0x70
    dc40:	17c1      	asrs	r1, r0, #31
    dc42:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    dc46:	f3c0 00cf 	ubfx	r0, r0, #3, #16
    dc4a:	4770      	bx	lr
    dc4c:	283c      	cmp	r0, #60	; 0x3c
    dc4e:	d9f0      	bls.n	dc32 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    dc50:	383c      	subs	r0, #60	; 0x3c
    dc52:	17c1      	asrs	r1, r0, #31
    dc54:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    dc58:	f3c0 008f 	ubfx	r0, r0, #2, #16
    dc5c:	4770      	bx	lr

0000dc5e <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    dc5e:	6809      	ldr	r1, [r1, #0]
    dc60:	f8c0 1066 	str.w	r1, [r0, #102]	; 0x66
    dc64:	4770      	bx	lr

0000dc66 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ>:
    dc66:	2801      	cmp	r0, #1
    dc68:	d002      	beq.n	dc70 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ+0xa>
    dc6a:	2802      	cmp	r0, #2
    dc6c:	d000      	beq.n	dc70 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ+0xa>
    dc6e:	2000      	movs	r0, #0
    dc70:	4770      	bx	lr

0000dc72 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI>:
    dc72:	b530      	push	{r4, r5, lr}
    dc74:	242a      	movs	r4, #42	; 0x2a
    dc76:	2523      	movs	r5, #35	; 0x23
    dc78:	2a16      	cmp	r2, #22
    dc7a:	d109      	bne.n	dc90 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x1e>
    dc7c:	280b      	cmp	r0, #11
    dc7e:	d00b      	beq.n	dc98 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x26>
    dc80:	280c      	cmp	r0, #12
    dc82:	d009      	beq.n	dc98 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x26>
    dc84:	280d      	cmp	r0, #13
    dc86:	d007      	beq.n	dc98 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x26>
    dc88:	280e      	cmp	r0, #14
    dc8a:	d005      	beq.n	dc98 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x26>
    dc8c:	2820      	cmp	r0, #32
    dc8e:	d005      	beq.n	dc9c <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x2a>
    dc90:	b171      	cbz	r1, dcb0 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x3e>
    dc92:	2a16      	cmp	r2, #22
    dc94:	d10c      	bne.n	dcb0 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x3e>
    dc96:	e004      	b.n	dca2 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x30>
    dc98:	701c      	strb	r4, [r3, #0]
    dc9a:	e000      	b.n	dc9e <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x2c>
    dc9c:	701d      	strb	r5, [r3, #0]
    dc9e:	2001      	movs	r0, #1
    dca0:	bd30      	pop	{r4, r5, pc}
    dca2:	7808      	ldrb	r0, [r1, #0]
    dca4:	2801      	cmp	r0, #1
    dca6:	d0f7      	beq.n	dc98 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x26>
    dca8:	2800      	cmp	r0, #0
    dcaa:	d0f5      	beq.n	dc98 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x26>
    dcac:	2816      	cmp	r0, #22
    dcae:	d0f5      	beq.n	dc9c <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x2a>
    dcb0:	2000      	movs	r0, #0
    dcb2:	bd30      	pop	{r4, r5, pc}

0000dcb4 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ>:
    dcb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dcb6:	b2cf      	uxtb	r7, r1
    dcb8:	4606      	mov	r6, r0
    dcba:	f3c1 2407 	ubfx	r4, r1, #8, #8
    dcbe:	4621      	mov	r1, r4
    dcc0:	4638      	mov	r0, r7
    dcc2:	f000 f88f 	bl	dde4 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A+0xc>
    dcc6:	b2f5      	uxtb	r5, r6
    dcc8:	f3c6 2607 	ubfx	r6, r6, #8, #8
    dccc:	b920      	cbnz	r0, dcd8 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x24>
    dcce:	4631      	mov	r1, r6
    dcd0:	4628      	mov	r0, r5
    dcd2:	f000 f887 	bl	dde4 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A+0xc>
    dcd6:	b140      	cbz	r0, dcea <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x36>
    dcd8:	4027      	ands	r7, r4
    dcda:	4035      	ands	r5, r6
    dcdc:	403d      	ands	r5, r7
    dcde:	4644      	mov	r4, r8
    dce0:	f365 0407 	bfi	r4, r5, #0, #8
    dce4:	f365 240f 	bfi	r4, r5, #8, #8
    dce8:	e006      	b.n	dcf8 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x44>
    dcea:	4025      	ands	r5, r4
    dcec:	4644      	mov	r4, r8
    dcee:	f365 0407 	bfi	r4, r5, #0, #8
    dcf2:	403e      	ands	r6, r7
    dcf4:	f366 240f 	bfi	r4, r6, #8, #8
    dcf8:	b2e0      	uxtb	r0, r4
    dcfa:	f7ff feb8 	bl	da6e <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x3c>
    dcfe:	f88d 0000 	strb.w	r0, [sp]
    dd02:	f3c4 2007 	ubfx	r0, r4, #8, #8
    dd06:	f7ff feb2 	bl	da6e <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x3c>
    dd0a:	f88d 0001 	strb.w	r0, [sp, #1]
    dd0e:	f8bd 0000 	ldrh.w	r0, [sp]
    dd12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000dd14 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    dd14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dd18:	4607      	mov	r7, r0
    dd1a:	460e      	mov	r6, r1
    dd1c:	e9d7 5404 	ldrd	r5, r4, [r7, #16]
    dd20:	f7fc fc6c 	bl	a5fc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    dd24:	b198      	cbz	r0, dd4e <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x3a>
    dd26:	b31e      	cbz	r6, dd70 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    dd28:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    dd2c:	1b40      	subs	r0, r0, r5
    dd2e:	2300      	movs	r3, #0
    dd30:	eb61 0104 	sbc.w	r1, r1, r4
    dd34:	461a      	mov	r2, r3
    dd36:	1a1b      	subs	r3, r3, r0
    dd38:	418a      	sbcs	r2, r1
    dd3a:	da19      	bge.n	dd70 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    dd3c:	1c42      	adds	r2, r0, #1
    dd3e:	f171 0100 	sbcs.w	r1, r1, #0
    dd42:	db07      	blt.n	dd54 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x40>
    dd44:	f240 211b 	movw	r1, #539	; 0x21b
    dd48:	2029      	movs	r0, #41	; 0x29
    dd4a:	f7f2 fe8b 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dd4e:	f240 2111 	movw	r1, #529	; 0x211
    dd52:	e7f9      	b.n	dd48 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>
    dd54:	4430      	add	r0, r6
    dd56:	1e40      	subs	r0, r0, #1
    dd58:	fbb0 f1f6 	udiv	r1, r0, r6
    dd5c:	fb01 f006 	mul.w	r0, r1, r6
    dd60:	1828      	adds	r0, r5, r0
    dd62:	f144 0400 	adc.w	r4, r4, #0
    dd66:	e9c7 0404 	strd	r0, r4, [r7, #16]
    dd6a:	4608      	mov	r0, r1
    dd6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dd70:	2000      	movs	r0, #0
    dd72:	e7fb      	b.n	dd6c <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x58>

0000dd74 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    dd74:	b530      	push	{r4, r5, lr}
    dd76:	4613      	mov	r3, r2
    dd78:	e006      	b.n	dd88 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    dd7a:	18cc      	adds	r4, r1, r3
    dd7c:	1ad5      	subs	r5, r2, r3
    dd7e:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    dd82:	1e5b      	subs	r3, r3, #1
    dd84:	5544      	strb	r4, [r0, r5]
    dd86:	b2db      	uxtb	r3, r3
    dd88:	2b00      	cmp	r3, #0
    dd8a:	d1f6      	bne.n	dd7a <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    dd8c:	bd30      	pop	{r4, r5, pc}

0000dd8e <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
    dd8e:	2300      	movs	r3, #0
    dd90:	6403      	str	r3, [r0, #64]	; 0x40
    dd92:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
    dd96:	f240 2371 	movw	r3, #625	; 0x271
    dd9a:	435a      	muls	r2, r3
    dd9c:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    dda0:	1e52      	subs	r2, r2, #1
    dda2:	fbb2 f1f1 	udiv	r1, r2, r1
    dda6:	6441      	str	r1, [r0, #68]	; 0x44
    dda8:	4770      	bx	lr

0000ddaa <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>:
    ddaa:	f240 41e2 	movw	r1, #1250	; 0x4e2
    ddae:	fbb0 f0f1 	udiv	r0, r0, r1
    ddb2:	b280      	uxth	r0, r0
    ddb4:	4770      	bx	lr

0000ddb6 <sym_MCZ5ZKWAPWEBLVDHDY2XS3XBNNW7L43ADSWQSTI>:
    ddb6:	f240 41e2 	movw	r1, #1250	; 0x4e2
    ddba:	fbb0 f2f1 	udiv	r2, r0, r1
    ddbe:	fb01 0112 	mls	r1, r1, r2, r0
    ddc2:	1a40      	subs	r0, r0, r1
    ddc4:	4770      	bx	lr

0000ddc6 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    ddc6:	f240 2171 	movw	r1, #625	; 0x271
    ddca:	fb10 f001 	smulbb	r0, r0, r1
    ddce:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ddd2:	ea01 0040 	and.w	r0, r1, r0, lsl #1
    ddd6:	4770      	bx	lr

0000ddd8 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>:
    ddd8:	f240 41e2 	movw	r1, #1250	; 0x4e2
    dddc:	fbb0 f0f1 	udiv	r0, r0, r1
    dde0:	b2c0      	uxtb	r0, r0
    dde2:	4770      	bx	lr
    dde4:	2801      	cmp	r0, #1
    dde6:	d002      	beq.n	ddee <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A+0x16>
    dde8:	2802      	cmp	r0, #2
    ddea:	d003      	beq.n	ddf4 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A+0x1c>
    ddec:	e004      	b.n	ddf8 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A+0x20>
    ddee:	2901      	cmp	r1, #1
    ddf0:	d004      	beq.n	ddfc <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A+0x24>
    ddf2:	e001      	b.n	ddf8 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A+0x20>
    ddf4:	2902      	cmp	r1, #2
    ddf6:	d001      	beq.n	ddfc <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A+0x24>
    ddf8:	2000      	movs	r0, #0
    ddfa:	4770      	bx	lr
    ddfc:	2001      	movs	r0, #1
    ddfe:	4770      	bx	lr
    de00:	4401      	add	r1, r0
    de02:	2914      	cmp	r1, #20
    de04:	dd01      	ble.n	de0a <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A+0x32>
    de06:	2014      	movs	r0, #20
    de08:	4770      	bx	lr
    de0a:	f06f 007e 	mvn.w	r0, #126	; 0x7e
    de0e:	4281      	cmp	r1, r0
    de10:	dbfa      	blt.n	de08 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A+0x30>
    de12:	b248      	sxtb	r0, r1
    de14:	4770      	bx	lr

0000de16 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>:
    de16:	b570      	push	{r4, r5, r6, lr}
    de18:	4605      	mov	r5, r0
    de1a:	ea81 4011 	eor.w	r0, r1, r1, lsr #16
    de1e:	b286      	uxth	r6, r0
    de20:	4610      	mov	r0, r2
    de22:	7aec      	ldrb	r4, [r5, #11]
    de24:	4631      	mov	r1, r6
    de26:	f000 f863 	bl	def0 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x52>
    de2a:	4070      	eors	r0, r6
    de2c:	2125      	movs	r1, #37	; 0x25
    de2e:	fbb0 f2f1 	udiv	r2, r0, r1
    de32:	fb01 0112 	mls	r1, r1, r2, r0
    de36:	eb05 02d1 	add.w	r2, r5, r1, lsr #3
    de3a:	f001 0307 	and.w	r3, r1, #7
    de3e:	7852      	ldrb	r2, [r2, #1]
    de40:	2601      	movs	r6, #1
    de42:	409e      	lsls	r6, r3
    de44:	4232      	tst	r2, r6
    de46:	d001      	beq.n	de4c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x36>
    de48:	4608      	mov	r0, r1
    de4a:	bd70      	pop	{r4, r5, r6, pc}
    de4c:	4344      	muls	r4, r0
    de4e:	0c21      	lsrs	r1, r4, #16
    de50:	4628      	mov	r0, r5
    de52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    de56:	f7f4 bc91 	b.w	277c <CONFIG_SD_DATA_TIMEOUT+0x6c>

0000de5a <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>:
    de5a:	b510      	push	{r4, lr}
    de5c:	4604      	mov	r4, r0
    de5e:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    de62:	b108      	cbz	r0, de68 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xe>
    de64:	2825      	cmp	r0, #37	; 0x25
    de66:	d901      	bls.n	de6c <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x12>
    de68:	2012      	movs	r0, #18
    de6a:	bd10      	pop	{r4, pc}
    de6c:	b132      	cbz	r2, de7c <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x22>
    de6e:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
    de72:	b128      	cbz	r0, de80 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x26>
    de74:	2801      	cmp	r0, #1
    de76:	d009      	beq.n	de8c <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x32>
    de78:	201f      	movs	r0, #31
    de7a:	bd10      	pop	{r4, pc}
    de7c:	2000      	movs	r0, #0
    de7e:	bd10      	pop	{r4, pc}
    de80:	4620      	mov	r0, r4
    de82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    de86:	4611      	mov	r1, r2
    de88:	f7f4 bc30 	b.w	26ec <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x1c>
    de8c:	8aa2      	ldrh	r2, [r4, #20]
    de8e:	6949      	ldr	r1, [r1, #20]
    de90:	f104 0025 	add.w	r0, r4, #37	; 0x25
    de94:	f7ff ffbf 	bl	de16 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
    de98:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
    de9c:	e7ee      	b.n	de7c <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x22>

0000de9e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    de9e:	b570      	push	{r4, r5, r6, lr}
    dea0:	4604      	mov	r4, r0
    dea2:	1c40      	adds	r0, r0, #1
    dea4:	4288      	cmp	r0, r1
    dea6:	d004      	beq.n	deb2 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x14>
    dea8:	6808      	ldr	r0, [r1, #0]
    deaa:	f8c4 0001 	str.w	r0, [r4, #1]
    deae:	7908      	ldrb	r0, [r1, #4]
    deb0:	7160      	strb	r0, [r4, #5]
    deb2:	7960      	ldrb	r0, [r4, #5]
    deb4:	f000 001f 	and.w	r0, r0, #31
    deb8:	7160      	strb	r0, [r4, #5]
    deba:	2000      	movs	r0, #0
    debc:	72e0      	strb	r0, [r4, #11]
    debe:	4605      	mov	r5, r0
    dec0:	1966      	adds	r6, r4, r5
    dec2:	7870      	ldrb	r0, [r6, #1]
    dec4:	f000 fb16 	bl	e4f4 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>
    dec8:	71b0      	strb	r0, [r6, #6]
    deca:	7ae1      	ldrb	r1, [r4, #11]
    decc:	1c6d      	adds	r5, r5, #1
    dece:	4408      	add	r0, r1
    ded0:	b2ed      	uxtb	r5, r5
    ded2:	72e0      	strb	r0, [r4, #11]
    ded4:	2d05      	cmp	r5, #5
    ded6:	d3f3      	bcc.n	dec0 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x22>
    ded8:	bd70      	pop	{r4, r5, r6, pc}
    deda:	b2c1      	uxtb	r1, r0
    dedc:	fa91 f1a1 	rbit	r1, r1
    dee0:	0a00      	lsrs	r0, r0, #8
    dee2:	0e09      	lsrs	r1, r1, #24
    dee4:	fa90 f0a0 	rbit	r0, r0
    dee8:	0e00      	lsrs	r0, r0, #24
    deea:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    deee:	4770      	bx	lr
    def0:	b570      	push	{r4, r5, r6, lr}
    def2:	460d      	mov	r5, r1
    def4:	4048      	eors	r0, r1
    def6:	2400      	movs	r4, #0
    def8:	f7ff ffef 	bl	deda <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x3c>
    defc:	eb00 1000 	add.w	r0, r0, r0, lsl #4
    df00:	1c64      	adds	r4, r4, #1
    df02:	4428      	add	r0, r5
    df04:	b2e4      	uxtb	r4, r4
    df06:	b280      	uxth	r0, r0
    df08:	2c03      	cmp	r4, #3
    df0a:	d3f5      	bcc.n	def8 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x5a>
    df0c:	bd70      	pop	{r4, r5, r6, pc}

0000df0e <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ>:
    df0e:	7841      	ldrb	r1, [r0, #1]
    df10:	7800      	ldrb	r0, [r0, #0]
    df12:	f010 000f 	ands.w	r0, r0, #15
    df16:	d005      	beq.n	df24 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x16>
    df18:	2801      	cmp	r0, #1
    df1a:	d007      	beq.n	df2c <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x1e>
    df1c:	2802      	cmp	r0, #2
    df1e:	d001      	beq.n	df24 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x16>
    df20:	2806      	cmp	r0, #6
    df22:	d105      	bne.n	df30 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x22>
    df24:	1f89      	subs	r1, r1, #6
    df26:	291f      	cmp	r1, #31
    df28:	d904      	bls.n	df34 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x26>
    df2a:	e001      	b.n	df30 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x22>
    df2c:	290c      	cmp	r1, #12
    df2e:	d001      	beq.n	df34 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x26>
    df30:	2000      	movs	r0, #0
    df32:	4770      	bx	lr
    df34:	2001      	movs	r0, #1
    df36:	4770      	bx	lr

0000df38 <sym_2RWLERIIOLMYS4LVQVNNIFLEQSG65A5Q5F2FPLA>:
    df38:	7800      	ldrb	r0, [r0, #0]
    df3a:	09c0      	lsrs	r0, r0, #7
    df3c:	4770      	bx	lr

0000df3e <sym_SKY6LLKHYM3MTKIUASL3OKO4LAKLVGGKKAJ3I2Y>:
    df3e:	f850 2f03 	ldr.w	r2, [r0, #3]!
    df42:	600a      	str	r2, [r1, #0]
    df44:	8880      	ldrh	r0, [r0, #4]
    df46:	8088      	strh	r0, [r1, #4]
    df48:	4770      	bx	lr

0000df4a <sym_GTN2QTPVJUP6VPTTNNKS6RR7APIHG3FG2T7SNQY>:
    df4a:	7800      	ldrb	r0, [r0, #0]
    df4c:	f3c0 1080 	ubfx	r0, r0, #6, #1
    df50:	4770      	bx	lr

0000df52 <sym_GSWR3VMQYTBBLEEXNPYAGKUY5XX24O5ABWIFKUI>:
    df52:	7801      	ldrb	r1, [r0, #0]
    df54:	f001 010f 	and.w	r1, r1, #15
    df58:	2904      	cmp	r1, #4
    df5a:	d105      	bne.n	df68 <sym_GSWR3VMQYTBBLEEXNPYAGKUY5XX24O5ABWIFKUI+0x16>
    df5c:	7840      	ldrb	r0, [r0, #1]
    df5e:	1f80      	subs	r0, r0, #6
    df60:	281f      	cmp	r0, #31
    df62:	d801      	bhi.n	df68 <sym_GSWR3VMQYTBBLEEXNPYAGKUY5XX24O5ABWIFKUI+0x16>
    df64:	2001      	movs	r0, #1
    df66:	4770      	bx	lr
    df68:	2000      	movs	r0, #0
    df6a:	4770      	bx	lr

0000df6c <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>:
    df6c:	b510      	push	{r4, lr}
    df6e:	7802      	ldrb	r2, [r0, #0]
    df70:	f001 030f 	and.w	r3, r1, #15
    df74:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    df78:	431a      	orrs	r2, r3
    df7a:	7002      	strb	r2, [r0, #0]
    df7c:	2907      	cmp	r1, #7
    df7e:	d20c      	bcs.n	df9a <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2e>
    df80:	e8df f001 	tbb	[pc, r1]
    df84:	06040604 	.word	0x06040604
    df88:	00040804 	.word	0x00040804
    df8c:	2106      	movs	r1, #6
    df8e:	e002      	b.n	df96 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2a>
    df90:	210c      	movs	r1, #12
    df92:	e000      	b.n	df96 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2a>
    df94:	2122      	movs	r1, #34	; 0x22
    df96:	7041      	strb	r1, [r0, #1]
    df98:	bd10      	pop	{r4, pc}
    df9a:	21a8      	movs	r1, #168	; 0xa8
    df9c:	202a      	movs	r0, #42	; 0x2a
    df9e:	f7f2 fd61 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000dfa2 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>:
    dfa2:	680a      	ldr	r2, [r1, #0]
    dfa4:	f840 2f09 	str.w	r2, [r0, #9]!
    dfa8:	8889      	ldrh	r1, [r1, #4]
    dfaa:	8081      	strh	r1, [r0, #4]
    dfac:	4770      	bx	lr

0000dfae <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>:
    dfae:	7802      	ldrb	r2, [r0, #0]
    dfb0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    dfb4:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    dfb8:	7002      	strb	r2, [r0, #0]
    dfba:	4770      	bx	lr

0000dfbc <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>:
    dfbc:	680a      	ldr	r2, [r1, #0]
    dfbe:	f840 2f03 	str.w	r2, [r0, #3]!
    dfc2:	8889      	ldrh	r1, [r1, #4]
    dfc4:	8081      	strh	r1, [r0, #4]
    dfc6:	4770      	bx	lr

0000dfc8 <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>:
    dfc8:	7802      	ldrb	r2, [r0, #0]
    dfca:	2340      	movs	r3, #64	; 0x40
    dfcc:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    dfd0:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    dfd4:	430a      	orrs	r2, r1
    dfd6:	7002      	strb	r2, [r0, #0]
    dfd8:	4770      	bx	lr

0000dfda <sym_UODFQA44OAUGQWVRPEK2IIKSCIFD37IIPLUYFSI>:
    dfda:	680a      	ldr	r2, [r1, #0]
    dfdc:	6042      	str	r2, [r0, #4]
    dfde:	7909      	ldrb	r1, [r1, #4]
    dfe0:	7201      	strb	r1, [r0, #8]
    dfe2:	4770      	bx	lr

0000dfe4 <sym_ZZDNF2NNUMTRE4Y6NUTK3CJU3EQI64HKYHSTDAI>:
    dfe4:	72c1      	strb	r1, [r0, #11]
    dfe6:	0a09      	lsrs	r1, r1, #8
    dfe8:	7301      	strb	r1, [r0, #12]
    dfea:	4770      	bx	lr

0000dfec <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI>:
    dfec:	b510      	push	{r4, lr}
    dfee:	29fb      	cmp	r1, #251	; 0xfb
    dff0:	d904      	bls.n	dffc <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI+0x10>
    dff2:	f240 61a9 	movw	r1, #1705	; 0x6a9
    dff6:	202a      	movs	r0, #42	; 0x2a
    dff8:	f7f2 fd34 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dffc:	7041      	strb	r1, [r0, #1]
    dffe:	bd10      	pop	{r4, pc}

0000e000 <sym_ZLXXGUFNBKYTUHSDKKKU4A6O7RMXODI4OQA6IUY>:
    e000:	8809      	ldrh	r1, [r1, #0]
    e002:	8181      	strh	r1, [r0, #12]
    e004:	4770      	bx	lr

0000e006 <sym_3LF2RG2XP7QRT5FAEZFOPL4L5RIBP3MCQ5PY7XY>:
    e006:	6809      	ldr	r1, [r1, #0]
    e008:	f8c0 1016 	str.w	r1, [r0, #22]
    e00c:	4770      	bx	lr

0000e00e <sym_NSDJKDRKPUUB5EAI3OMDTFOWZBLYJSPI3VQSNXQ>:
    e00e:	680a      	ldr	r2, [r1, #0]
    e010:	6042      	str	r2, [r0, #4]
    e012:	6849      	ldr	r1, [r1, #4]
    e014:	6081      	str	r1, [r0, #8]
    e016:	4770      	bx	lr

0000e018 <sym_LPOR4PC6XUIXDNEKJLY3JL3BKNV2UZG2OR7FAKQ>:
    e018:	680a      	ldr	r2, [r1, #0]
    e01a:	f840 2f0e 	str.w	r2, [r0, #14]!
    e01e:	6849      	ldr	r1, [r1, #4]
    e020:	6041      	str	r1, [r0, #4]
    e022:	4770      	bx	lr

0000e024 <sym_RHFWG2VAMMSM6HNQIXGIQMU7QUNXB2XIV4NQREY>:
    e024:	68c0      	ldr	r0, [r0, #12]
    e026:	6008      	str	r0, [r1, #0]
    e028:	4770      	bx	lr

0000e02a <sym_G3E5J3DBBC3WRZ26KQDVAZEPSZL4FITDNFKJBAY>:
    e02a:	6842      	ldr	r2, [r0, #4]
    e02c:	600a      	str	r2, [r1, #0]
    e02e:	6880      	ldr	r0, [r0, #8]
    e030:	6048      	str	r0, [r1, #4]
    e032:	4770      	bx	lr

0000e034 <sym_VV6G4PHP6ULWM4Y2LJJIOETDZSUFDXGJCHBQNZI>:
    e034:	7800      	ldrb	r0, [r0, #0]
    e036:	f000 0003 	and.w	r0, r0, #3
    e03a:	4770      	bx	lr

0000e03c <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>:
    e03c:	8880      	ldrh	r0, [r0, #4]
    e03e:	4770      	bx	lr

0000e040 <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>:
    e040:	88c0      	ldrh	r0, [r0, #6]
    e042:	4770      	bx	lr

0000e044 <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>:
    e044:	8900      	ldrh	r0, [r0, #8]
    e046:	4770      	bx	lr

0000e048 <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>:
    e048:	8940      	ldrh	r0, [r0, #10]
    e04a:	4770      	bx	lr

0000e04c <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>:
    e04c:	8901      	ldrh	r1, [r0, #8]
    e04e:	291b      	cmp	r1, #27
    e050:	d30c      	bcc.n	e06c <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    e052:	8941      	ldrh	r1, [r0, #10]
    e054:	f44f 72a4 	mov.w	r2, #328	; 0x148
    e058:	4291      	cmp	r1, r2
    e05a:	d307      	bcc.n	e06c <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    e05c:	8881      	ldrh	r1, [r0, #4]
    e05e:	291b      	cmp	r1, #27
    e060:	d304      	bcc.n	e06c <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    e062:	88c0      	ldrh	r0, [r0, #6]
    e064:	4290      	cmp	r0, r2
    e066:	d301      	bcc.n	e06c <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    e068:	2001      	movs	r0, #1
    e06a:	4770      	bx	lr
    e06c:	2000      	movs	r0, #0
    e06e:	4770      	bx	lr

0000e070 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y>:
    e070:	7901      	ldrb	r1, [r0, #4]
    e072:	0749      	lsls	r1, r1, #29
    e074:	d004      	beq.n	e080 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y+0x10>
    e076:	7940      	ldrb	r0, [r0, #5]
    e078:	0740      	lsls	r0, r0, #29
    e07a:	d001      	beq.n	e080 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y+0x10>
    e07c:	2001      	movs	r0, #1
    e07e:	4770      	bx	lr
    e080:	2000      	movs	r0, #0
    e082:	4770      	bx	lr

0000e084 <sym_AYZTYWE6SD5T6ZDLITENLNSRAVS5VKE23BWONUA>:
    e084:	7181      	strb	r1, [r0, #6]
    e086:	0a09      	lsrs	r1, r1, #8
    e088:	71c1      	strb	r1, [r0, #7]
    e08a:	4770      	bx	lr

0000e08c <sym_SAWOREXGWRJNX5IOUMHBRACZ6DWRXOAHPPFX4TA>:
    e08c:	7101      	strb	r1, [r0, #4]
    e08e:	4770      	bx	lr

0000e090 <sym_SG4OPFPHWHCVU6FHRG2ZQ5GV7RHUGBHEKN6N55A>:
    e090:	7141      	strb	r1, [r0, #5]
    e092:	4770      	bx	lr

0000e094 <sym_V2EAB4QFEU4UUAXJWVWPATMDA5XIHPNUG5SNJCQ>:
    e094:	7901      	ldrb	r1, [r0, #4]
    e096:	0749      	lsls	r1, r1, #29
    e098:	d004      	beq.n	e0a4 <sym_V2EAB4QFEU4UUAXJWVWPATMDA5XIHPNUG5SNJCQ+0x10>
    e09a:	7940      	ldrb	r0, [r0, #5]
    e09c:	0740      	lsls	r0, r0, #29
    e09e:	d001      	beq.n	e0a4 <sym_V2EAB4QFEU4UUAXJWVWPATMDA5XIHPNUG5SNJCQ+0x10>
    e0a0:	2001      	movs	r0, #1
    e0a2:	4770      	bx	lr
    e0a4:	2000      	movs	r0, #0
    e0a6:	4770      	bx	lr

0000e0a8 <sym_65MVSHFHYY3W6LGERKUEYJPJ7ENCODZZSM2L7CQ>:
    e0a8:	7900      	ldrb	r0, [r0, #4]
    e0aa:	4770      	bx	lr

0000e0ac <sym_YMBI57OSTLFK65WQKT7WKM26EFMSOHLSMFNNR4I>:
    e0ac:	7101      	strb	r1, [r0, #4]
    e0ae:	4770      	bx	lr

0000e0b0 <sym_MR2HDMT6FMX7P5HJAUSXDTOYNLKDM5AILMXKYDY>:
    e0b0:	7940      	ldrb	r0, [r0, #5]
    e0b2:	4770      	bx	lr

0000e0b4 <sym_HAHVMCZ4V2U4G5KM2JOTYBKS4GFM72EJZRT7M3A>:
    e0b4:	7141      	strb	r1, [r0, #5]
    e0b6:	4770      	bx	lr

0000e0b8 <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>:
    e0b8:	7802      	ldrb	r2, [r0, #0]
    e0ba:	f001 0103 	and.w	r1, r1, #3
    e0be:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    e0c2:	430a      	orrs	r2, r1
    e0c4:	7002      	strb	r2, [r0, #0]
    e0c6:	4770      	bx	lr

0000e0c8 <sym_XW2AJRDPRGLPOQ7S6SBIDHJSPT737QJRC7LOWOI>:
    e0c8:	7101      	strb	r1, [r0, #4]
    e0ca:	0a09      	lsrs	r1, r1, #8
    e0cc:	7141      	strb	r1, [r0, #5]
    e0ce:	4770      	bx	lr

0000e0d0 <sym_LKCMUIZAJSOHIZE54V37DJ4ULJ25HGEY7F7ST5I>:
    e0d0:	7181      	strb	r1, [r0, #6]
    e0d2:	0a09      	lsrs	r1, r1, #8
    e0d4:	71c1      	strb	r1, [r0, #7]
    e0d6:	4770      	bx	lr

0000e0d8 <sym_5NOMYYLIL22YATRZCGPQVOYH6BFSDNIEMEEMIZA>:
    e0d8:	7201      	strb	r1, [r0, #8]
    e0da:	0a09      	lsrs	r1, r1, #8
    e0dc:	7241      	strb	r1, [r0, #9]
    e0de:	4770      	bx	lr

0000e0e0 <sym_BD2MQHSWE7QNCT7DV5JGZCA5J2QIL2T6RGRVJ3Y>:
    e0e0:	7281      	strb	r1, [r0, #10]
    e0e2:	0a09      	lsrs	r1, r1, #8
    e0e4:	72c1      	strb	r1, [r0, #11]
    e0e6:	4770      	bx	lr

0000e0e8 <sym_AFBV6ZWWJ5TP5BBQPAY4D2XGGYVLQVI65FY6JPY>:
    e0e8:	7900      	ldrb	r0, [r0, #4]
    e0ea:	4770      	bx	lr

0000e0ec <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI>:
    e0ec:	7900      	ldrb	r0, [r0, #4]
    e0ee:	4770      	bx	lr

0000e0f0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    e0f0:	b510      	push	{r4, lr}
    e0f2:	7a01      	ldrb	r1, [r0, #8]
    e0f4:	b119      	cbz	r1, e0fe <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe>
    e0f6:	2901      	cmp	r1, #1
    e0f8:	d006      	beq.n	e108 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    e0fa:	2000      	movs	r0, #0
    e0fc:	bd10      	pop	{r4, pc}
    e0fe:	88c2      	ldrh	r2, [r0, #6]
    e100:	6803      	ldr	r3, [r0, #0]
    e102:	8880      	ldrh	r0, [r0, #4]
    e104:	2102      	movs	r1, #2
    e106:	e003      	b.n	e110 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
    e108:	88c2      	ldrh	r2, [r0, #6]
    e10a:	6803      	ldr	r3, [r0, #0]
    e10c:	8880      	ldrh	r0, [r0, #4]
    e10e:	2101      	movs	r1, #1
    e110:	f7f4 fb9e 	bl	2850 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x14>
    e114:	b908      	cbnz	r0, e11a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2a>
    e116:	f7f4 fbe5 	bl	28e4 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>
    e11a:	2001      	movs	r0, #1
    e11c:	bd10      	pop	{r4, pc}

0000e11e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>:
    e11e:	b508      	push	{r3, lr}
    e120:	7a03      	ldrb	r3, [r0, #8]
    e122:	f88d 3000 	strb.w	r3, [sp]
    e126:	9b00      	ldr	r3, [sp, #0]
    e128:	9300      	str	r3, [sp, #0]
    e12a:	f89d 3000 	ldrb.w	r3, [sp]
    e12e:	b123      	cbz	r3, e13a <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY+0x1c>
    e130:	f240 3117 	movw	r1, #791	; 0x317
    e134:	2010      	movs	r0, #16
    e136:	f7f2 fc95 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e13a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    e13e:	f7f4 bd57 	b.w	2bf0 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x100>

0000e142 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>:
    e142:	f7f4 bd83 	b.w	2c4c <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x15c>

0000e146 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>:
    e146:	7a03      	ldrb	r3, [r0, #8]
    e148:	b082      	sub	sp, #8
    e14a:	f88d 3000 	strb.w	r3, [sp]
    e14e:	9b00      	ldr	r3, [sp, #0]
    e150:	9300      	str	r3, [sp, #0]
    e152:	f89d 3000 	ldrb.w	r3, [sp]
    e156:	2b00      	cmp	r3, #0
    e158:	d102      	bne.n	e160 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY+0x1a>
    e15a:	b002      	add	sp, #8
    e15c:	f7f4 bd48 	b.w	2bf0 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x100>
    e160:	b002      	add	sp, #8
    e162:	4770      	bx	lr
    e164:	2000      	movs	r0, #0
    e166:	7048      	strb	r0, [r1, #1]
    e168:	2003      	movs	r0, #3
    e16a:	7008      	strb	r0, [r1, #0]
    e16c:	2001      	movs	r0, #1
    e16e:	7108      	strb	r0, [r1, #4]
    e170:	4770      	bx	lr

0000e172 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
    e172:	b510      	push	{r4, lr}
    e174:	888c      	ldrh	r4, [r1, #4]
    e176:	890a      	ldrh	r2, [r1, #8]
    e178:	884b      	ldrh	r3, [r1, #2]
    e17a:	88c9      	ldrh	r1, [r1, #6]
    e17c:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
    e180:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
    e184:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
    e188:	f8a0 204e 	strh.w	r2, [r0, #78]	; 0x4e
    e18c:	bd10      	pop	{r4, pc}

0000e18e <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
    e18e:	b570      	push	{r4, r5, r6, lr}
    e190:	4615      	mov	r5, r2
    e192:	460c      	mov	r4, r1
    e194:	f000 f91a 	bl	e3cc <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x108>
    e198:	3096      	adds	r0, #150	; 0x96
    e19a:	4428      	add	r0, r5
    e19c:	42a0      	cmp	r0, r4
    e19e:	d801      	bhi.n	e1a4 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI+0x16>
    e1a0:	1a20      	subs	r0, r4, r0
    e1a2:	bd70      	pop	{r4, r5, r6, pc}
    e1a4:	2000      	movs	r0, #0
    e1a6:	bd70      	pop	{r4, r5, r6, pc}

0000e1a8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
    e1a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e1ac:	4604      	mov	r4, r0
    e1ae:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
    e1b0:	8f46      	ldrh	r6, [r0, #58]	; 0x3a
    e1b2:	f8b0 504c 	ldrh.w	r5, [r0, #76]	; 0x4c
    e1b6:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
    e1ba:	4285      	cmp	r5, r0
    e1bc:	d300      	bcc.n	e1c0 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x18>
    e1be:	4605      	mov	r5, r0
    e1c0:	4620      	mov	r0, r4
    e1c2:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    e1c6:	f000 f89c 	bl	e302 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x3e>
    e1ca:	4601      	mov	r1, r0
    e1cc:	86e5      	strh	r5, [r4, #54]	; 0x36
    e1ce:	8761      	strh	r1, [r4, #58]	; 0x3a
    e1d0:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    e1d2:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    e1d6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    e1d8:	4680      	mov	r8, r0
    e1da:	42aa      	cmp	r2, r5
    e1dc:	d200      	bcs.n	e1e0 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x38>
    e1de:	462a      	mov	r2, r5
    e1e0:	428b      	cmp	r3, r1
    e1e2:	d200      	bcs.n	e1e6 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x3e>
    e1e4:	460b      	mov	r3, r1
    e1e6:	8202      	strh	r2, [r0, #16]
    e1e8:	f8a8 3012 	strh.w	r3, [r8, #18]
    e1ec:	42bd      	cmp	r5, r7
    e1ee:	d101      	bne.n	e1f4 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x4c>
    e1f0:	42b1      	cmp	r1, r6
    e1f2:	d001      	beq.n	e1f8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x50>
    e1f4:	2001      	movs	r0, #1
    e1f6:	e000      	b.n	e1fa <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x52>
    e1f8:	2000      	movs	r0, #0
    e1fa:	4681      	mov	r9, r0
    e1fc:	f8b4 5048 	ldrh.w	r5, [r4, #72]	; 0x48
    e200:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
    e204:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
    e206:	8f26      	ldrh	r6, [r4, #56]	; 0x38
    e208:	4285      	cmp	r5, r0
    e20a:	d300      	bcc.n	e20e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x66>
    e20c:	4605      	mov	r5, r0
    e20e:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    e212:	4620      	mov	r0, r4
    e214:	f000 f87d 	bl	e312 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x4e>
    e218:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
    e21c:	2902      	cmp	r1, #2
    e21e:	d108      	bne.n	e232 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x8a>
    e220:	42af      	cmp	r7, r5
    e222:	d200      	bcs.n	e226 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x7e>
    e224:	463d      	mov	r5, r7
    e226:	4286      	cmp	r6, r0
    e228:	d200      	bcs.n	e22c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x84>
    e22a:	4630      	mov	r0, r6
    e22c:	2100      	movs	r1, #0
    e22e:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
    e232:	f8a8 5008 	strh.w	r5, [r8, #8]
    e236:	f8a8 000c 	strh.w	r0, [r8, #12]
    e23a:	42bd      	cmp	r5, r7
    e23c:	d101      	bne.n	e242 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9a>
    e23e:	42b0      	cmp	r0, r6
    e240:	d001      	beq.n	e246 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9e>
    e242:	2001      	movs	r0, #1
    e244:	e000      	b.n	e248 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0xa0>
    e246:	2000      	movs	r0, #0
    e248:	ea40 0009 	orr.w	r0, r0, r9
    e24c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000e250 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>:
    e250:	6840      	ldr	r0, [r0, #4]
    e252:	4770      	bx	lr

0000e254 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>:
    e254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e258:	4616      	mov	r6, r2
    e25a:	460f      	mov	r7, r1
    e25c:	4604      	mov	r4, r0
    e25e:	f000 f8b5 	bl	e3cc <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x108>
    e262:	4605      	mov	r5, r0
    e264:	463a      	mov	r2, r7
    e266:	6921      	ldr	r1, [r4, #16]
    e268:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    e26a:	f000 f845 	bl	e2f8 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x34>
    e26e:	19a9      	adds	r1, r5, r6
    e270:	4281      	cmp	r1, r0
    e272:	d300      	bcc.n	e276 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY+0x22>
    e274:	4608      	mov	r0, r1
    e276:	6320      	str	r0, [r4, #48]	; 0x30
    e278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e27c <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
    e27c:	221b      	movs	r2, #27
    e27e:	8402      	strh	r2, [r0, #32]
    e280:	8382      	strh	r2, [r0, #28]
    e282:	82c2      	strh	r2, [r0, #22]
    e284:	8282      	strh	r2, [r0, #20]
    e286:	8142      	strh	r2, [r0, #10]
    e288:	8202      	strh	r2, [r0, #16]
    e28a:	8102      	strh	r2, [r0, #8]
    e28c:	8542      	strh	r2, [r0, #42]	; 0x2a
    e28e:	8582      	strh	r2, [r0, #44]	; 0x2c
    e290:	8482      	strh	r2, [r0, #36]	; 0x24
    e292:	2900      	cmp	r1, #0
    e294:	d10a      	bne.n	e2ac <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
    e296:	f44f 71a4 	mov.w	r1, #328	; 0x148
    e29a:	8441      	strh	r1, [r0, #34]	; 0x22
    e29c:	83c1      	strh	r1, [r0, #30]
    e29e:	8341      	strh	r1, [r0, #26]
    e2a0:	8301      	strh	r1, [r0, #24]
    e2a2:	81c1      	strh	r1, [r0, #14]
    e2a4:	8241      	strh	r1, [r0, #18]
    e2a6:	8181      	strh	r1, [r0, #12]
    e2a8:	85c1      	strh	r1, [r0, #46]	; 0x2e
    e2aa:	8601      	strh	r1, [r0, #48]	; 0x30
    e2ac:	4770      	bx	lr

0000e2ae <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
    e2ae:	6800      	ldr	r0, [r0, #0]
    e2b0:	f101 029c 	add.w	r2, r1, #156	; 0x9c
    e2b4:	4290      	cmp	r0, r2
    e2b6:	d903      	bls.n	e2c0 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
    e2b8:	1a40      	subs	r0, r0, r1
    e2ba:	389c      	subs	r0, #156	; 0x9c
    e2bc:	0840      	lsrs	r0, r0, #1
    e2be:	4770      	bx	lr
    e2c0:	2000      	movs	r0, #0
    e2c2:	4770      	bx	lr

0000e2c4 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
    e2c4:	b510      	push	{r4, lr}
    e2c6:	9c02      	ldr	r4, [sp, #8]
    e2c8:	8281      	strh	r1, [r0, #20]
    e2ca:	82c2      	strh	r2, [r0, #22]
    e2cc:	8303      	strh	r3, [r0, #24]
    e2ce:	8344      	strh	r4, [r0, #26]
    e2d0:	bd10      	pop	{r4, pc}
    e2d2:	1d00      	adds	r0, r0, #4
    e2d4:	b510      	push	{r4, lr}
    e2d6:	b280      	uxth	r0, r0
    e2d8:	2901      	cmp	r1, #1
    e2da:	d006      	beq.n	e2ea <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x26>
    e2dc:	2902      	cmp	r1, #2
    e2de:	d007      	beq.n	e2f0 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x2c>
    e2e0:	f240 2126 	movw	r1, #550	; 0x226
    e2e4:	2006      	movs	r0, #6
    e2e6:	f7f2 fbbd 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e2ea:	00c0      	lsls	r0, r0, #3
    e2ec:	3050      	adds	r0, #80	; 0x50
    e2ee:	e001      	b.n	e2f4 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x30>
    e2f0:	0080      	lsls	r0, r0, #2
    e2f2:	302c      	adds	r0, #44	; 0x2c
    e2f4:	b280      	uxth	r0, r0
    e2f6:	bd10      	pop	{r4, pc}
    e2f8:	4288      	cmp	r0, r1
    e2fa:	d300      	bcc.n	e2fe <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x3a>
    e2fc:	4608      	mov	r0, r1
    e2fe:	1a80      	subs	r0, r0, r2
    e300:	4770      	bx	lr
    e302:	f8b0 104e 	ldrh.w	r1, [r0, #78]	; 0x4e
    e306:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
    e30a:	4281      	cmp	r1, r0
    e30c:	d200      	bcs.n	e310 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x4c>
    e30e:	4608      	mov	r0, r1
    e310:	4770      	bx	lr
    e312:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    e316:	f8b0 0046 	ldrh.w	r0, [r0, #70]	; 0x46
    e31a:	4281      	cmp	r1, r0
    e31c:	d200      	bcs.n	e320 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x5c>
    e31e:	4608      	mov	r0, r1
    e320:	4770      	bx	lr
    e322:	b538      	push	{r3, r4, r5, lr}
    e324:	2200      	movs	r2, #0
    e326:	f1a0 0318 	sub.w	r3, r0, #24
    e32a:	2416      	movs	r4, #22
    e32c:	7202      	strb	r2, [r0, #8]
    e32e:	704a      	strb	r2, [r1, #1]
    e330:	700c      	strb	r4, [r1, #0]
    e332:	f8d3 5022 	ldr.w	r5, [r3, #34]	; 0x22
    e336:	604d      	str	r5, [r1, #4]
    e338:	f8d3 5026 	ldr.w	r5, [r3, #38]	; 0x26
    e33c:	608d      	str	r5, [r1, #8]
    e33e:	f8d3 502a 	ldr.w	r5, [r3, #42]	; 0x2a
    e342:	60cd      	str	r5, [r1, #12]
    e344:	7a05      	ldrb	r5, [r0, #8]
    e346:	f88d 5000 	strb.w	r5, [sp]
    e34a:	9d00      	ldr	r5, [sp, #0]
    e34c:	9500      	str	r5, [sp, #0]
    e34e:	f89d 5000 	ldrb.w	r5, [sp]
    e352:	2d00      	cmp	r5, #0
    e354:	d1ea      	bne.n	e32c <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x68>
    e356:	bd38      	pop	{r3, r4, r5, pc}
    e358:	b5f0      	push	{r4, r5, r6, r7, lr}
    e35a:	b087      	sub	sp, #28
    e35c:	460d      	mov	r5, r1
    e35e:	4604      	mov	r4, r0
    e360:	f7f4 fa62 	bl	2828 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>
    e364:	2600      	movs	r6, #0
    e366:	b328      	cbz	r0, e3b4 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xf0>
    e368:	f5a4 70c0 	sub.w	r0, r4, #384	; 0x180
    e36c:	7226      	strb	r6, [r4, #8]
    e36e:	8807      	ldrh	r7, [r0, #0]
    e370:	a903      	add	r1, sp, #12
    e372:	4638      	mov	r0, r7
    e374:	f001 fb39 	bl	f9ea <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    e378:	b108      	cbz	r0, e37e <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xba>
    e37a:	21fd      	movs	r1, #253	; 0xfd
    e37c:	e017      	b.n	e3ae <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xea>
    e37e:	f8ad 7000 	strh.w	r7, [sp]
    e382:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    e386:	f8ad 0002 	strh.w	r0, [sp, #2]
    e38a:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    e38e:	f8ad 0004 	strh.w	r0, [sp, #4]
    e392:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    e396:	f8ad 0006 	strh.w	r0, [sp, #6]
    e39a:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    e39e:	f8ad 0008 	strh.w	r0, [sp, #8]
    e3a2:	4668      	mov	r0, sp
    e3a4:	f001 fb48 	bl	fa38 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    e3a8:	b120      	cbz	r0, e3b4 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xf0>
    e3aa:	f44f 7183 	mov.w	r1, #262	; 0x106
    e3ae:	202c      	movs	r0, #44	; 0x2c
    e3b0:	f7f2 fb58 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e3b4:	201f      	movs	r0, #31
    e3b6:	7028      	strb	r0, [r5, #0]
    e3b8:	706e      	strb	r6, [r5, #1]
    e3ba:	f854 0f0a 	ldr.w	r0, [r4, #10]!
    e3be:	6068      	str	r0, [r5, #4]
    e3c0:	6860      	ldr	r0, [r4, #4]
    e3c2:	60a8      	str	r0, [r5, #8]
    e3c4:	8920      	ldrh	r0, [r4, #8]
    e3c6:	81a8      	strh	r0, [r5, #12]
    e3c8:	b007      	add	sp, #28
    e3ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e3cc:	2196      	movs	r1, #150	; 0x96
    e3ce:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
    e3d2:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
    e3d6:	f000 b800 	b.w	e3da <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x116>
    e3da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e3de:	460d      	mov	r5, r1
    e3e0:	4606      	mov	r6, r0
    e3e2:	4698      	mov	r8, r3
    e3e4:	4617      	mov	r7, r2
    e3e6:	8e80      	ldrh	r0, [r0, #52]	; 0x34
    e3e8:	4611      	mov	r1, r2
    e3ea:	f7ff ff72 	bl	e2d2 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xe>
    e3ee:	4604      	mov	r4, r0
    e3f0:	4639      	mov	r1, r7
    e3f2:	4630      	mov	r0, r6
    e3f4:	f7ff ff8d 	bl	e312 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x4e>
    e3f8:	42a0      	cmp	r0, r4
    e3fa:	d200      	bcs.n	e3fe <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x13a>
    e3fc:	4604      	mov	r4, r0
    e3fe:	8fb0      	ldrh	r0, [r6, #60]	; 0x3c
    e400:	4641      	mov	r1, r8
    e402:	f7ff ff66 	bl	e2d2 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xe>
    e406:	4607      	mov	r7, r0
    e408:	4641      	mov	r1, r8
    e40a:	4630      	mov	r0, r6
    e40c:	f7ff ff79 	bl	e302 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x3e>
    e410:	42b8      	cmp	r0, r7
    e412:	d300      	bcc.n	e416 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x152>
    e414:	4638      	mov	r0, r7
    e416:	4420      	add	r0, r4
    e418:	4428      	add	r0, r5
    e41a:	1d80      	adds	r0, r0, #6
    e41c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e420 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q>:
    e420:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    e424:	2700      	movs	r7, #0
    e426:	463d      	mov	r5, r7
    e428:	2623      	movs	r6, #35	; 0x23
    e42a:	46b8      	mov	r8, r7
    e42c:	f7f4 fccc 	bl	2dc8 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    e430:	4604      	mov	r4, r0
    e432:	f7f4 fc91 	bl	2d58 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA>
    e436:	b190      	cbz	r0, e45e <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x3e>
    e438:	f8cd 8000 	str.w	r8, [sp]
    e43c:	f8cd 8004 	str.w	r8, [sp, #4]
    e440:	e003      	b.n	e44a <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x2a>
    e442:	9800      	ldr	r0, [sp, #0]
    e444:	6941      	ldr	r1, [r0, #20]
    e446:	42a1      	cmp	r1, r4
    e448:	d009      	beq.n	e45e <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x3e>
    e44a:	4668      	mov	r0, sp
    e44c:	f7f2 fd28 	bl	ea0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    e450:	2800      	cmp	r0, #0
    e452:	d0f6      	beq.n	e442 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x22>
    e454:	4625      	mov	r5, r4
    e456:	4620      	mov	r0, r4
    e458:	f7f4 fc48 	bl	2cec <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>
    e45c:	4607      	mov	r7, r0
    e45e:	1e76      	subs	r6, r6, #1
    e460:	d001      	beq.n	e466 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x46>
    e462:	2f00      	cmp	r7, #0
    e464:	d0e2      	beq.n	e42c <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0xc>
    e466:	b115      	cbz	r5, e46e <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x4e>
    e468:	4628      	mov	r0, r5
    e46a:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    e46e:	f240 1167 	movw	r1, #359	; 0x167
    e472:	200f      	movs	r0, #15
    e474:	f7f2 faf6 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e478:	ea00 0040 	and.w	r0, r0, r0, lsl #1
    e47c:	ea00 0040 	and.w	r0, r0, r0, lsl #1
    e480:	ea00 0040 	and.w	r0, r0, r0, lsl #1
    e484:	ea00 0040 	and.w	r0, r0, r0, lsl #1
    e488:	ea00 0040 	and.w	r0, r0, r0, lsl #1
    e48c:	ea10 0f40 	tst.w	r0, r0, lsl #1
    e490:	d001      	beq.n	e496 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x76>
    e492:	2000      	movs	r0, #0
    e494:	4770      	bx	lr
    e496:	2001      	movs	r0, #1
    e498:	4770      	bx	lr
    e49a:	b510      	push	{r4, lr}
    e49c:	4604      	mov	r4, r0
    e49e:	2108      	movs	r1, #8
    e4a0:	4620      	mov	r0, r4
    e4a2:	f7f2 fb7f 	bl	ba4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    e4a6:	6820      	ldr	r0, [r4, #0]
    e4a8:	2800      	cmp	r0, #0
    e4aa:	d102      	bne.n	e4b2 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x92>
    e4ac:	6860      	ldr	r0, [r4, #4]
    e4ae:	2800      	cmp	r0, #0
    e4b0:	d0f5      	beq.n	e49e <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x7e>
    e4b2:	bd10      	pop	{r4, pc}

0000e4b4 <sym_B4SOI7ZERMZJ76YVIJFCACJN3HNVAJYEHZSLSTQ>:
    e4b4:	f000 3155 	and.w	r1, r0, #1431655765	; 0x55555555
    e4b8:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
    e4bc:	ea02 0050 	and.w	r0, r2, r0, lsr #1
    e4c0:	4408      	add	r0, r1
    e4c2:	f000 3133 	and.w	r1, r0, #858993459	; 0x33333333
    e4c6:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
    e4ca:	ea02 0090 	and.w	r0, r2, r0, lsr #2
    e4ce:	4408      	add	r0, r1
    e4d0:	f000 310f 	and.w	r1, r0, #252645135	; 0xf0f0f0f
    e4d4:	f04f 320f 	mov.w	r2, #252645135	; 0xf0f0f0f
    e4d8:	ea02 1010 	and.w	r0, r2, r0, lsr #4
    e4dc:	4408      	add	r0, r1
    e4de:	f000 11ff 	and.w	r1, r0, #16711935	; 0xff00ff
    e4e2:	f04f 12ff 	mov.w	r2, #16711935	; 0xff00ff
    e4e6:	ea02 2010 	and.w	r0, r2, r0, lsr #8
    e4ea:	4408      	add	r0, r1
    e4ec:	eb00 4010 	add.w	r0, r0, r0, lsr #16
    e4f0:	b2c0      	uxtb	r0, r0
    e4f2:	4770      	bx	lr

0000e4f4 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>:
    e4f4:	f000 0155 	and.w	r1, r0, #85	; 0x55
    e4f8:	2255      	movs	r2, #85	; 0x55
    e4fa:	ea02 0050 	and.w	r0, r2, r0, lsr #1
    e4fe:	4408      	add	r0, r1
    e500:	f000 0133 	and.w	r1, r0, #51	; 0x33
    e504:	2233      	movs	r2, #51	; 0x33
    e506:	ea02 0090 	and.w	r0, r2, r0, lsr #2
    e50a:	4408      	add	r0, r1
    e50c:	f000 010f 	and.w	r1, r0, #15
    e510:	eb01 1010 	add.w	r0, r1, r0, lsr #4
    e514:	4770      	bx	lr

0000e516 <sym_KX4ODCDF63RBCM4RLVD2FMITN5XCORTH2S6ZQ5A>:
    e516:	ea80 0060 	eor.w	r0, r0, r0, asr #1
    e51a:	f7ff bfcb 	b.w	e4b4 <sym_B4SOI7ZERMZJ76YVIJFCACJN3HNVAJYEHZSLSTQ>

0000e51e <sym_EROH2ERI6YP4PUJVAMOS4KJ2YDG74D2WAXB2TOI>:
    e51e:	b510      	push	{r4, lr}
    e520:	f1a0 0234 	sub.w	r2, r0, #52	; 0x34
    e524:	f830 4cbc 	ldrh.w	r4, [r0, #-188]
    e528:	2000      	movs	r0, #0
    e52a:	7048      	strb	r0, [r1, #1]
    e52c:	230c      	movs	r3, #12
    e52e:	700b      	strb	r3, [r1, #0]
    e530:	7108      	strb	r0, [r1, #4]
    e532:	f8a1 4005 	strh.w	r4, [r1, #5]
    e536:	f892 003d 	ldrb.w	r0, [r2, #61]	; 0x3d
    e53a:	71c8      	strb	r0, [r1, #7]
    e53c:	4620      	mov	r0, r4
    e53e:	f7f2 fe5d 	bl	11fc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    e542:	f7fe feb6 	bl	d2b2 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    e546:	b140      	cbz	r0, e55a <sym_EROH2ERI6YP4PUJVAMOS4KJ2YDG74D2WAXB2TOI+0x3c>
    e548:	4620      	mov	r0, r4
    e54a:	f7ff f99c 	bl	d886 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    e54e:	4620      	mov	r0, r4
    e550:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e554:	2100      	movs	r1, #0
    e556:	f7f2 bce9 	b.w	f2c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    e55a:	2160      	movs	r1, #96	; 0x60
    e55c:	2063      	movs	r0, #99	; 0x63
    e55e:	f7f2 fa81 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e562 <sym_24PTBIAZ2OKSUMWBHATZCO4EQUFF3BOLAN2QX4Y>:
    e562:	b538      	push	{r3, r4, r5, lr}
    e564:	2200      	movs	r2, #0
    e566:	704a      	strb	r2, [r1, #1]
    e568:	2309      	movs	r3, #9
    e56a:	700b      	strb	r3, [r1, #0]
    e56c:	f1a0 0474 	sub.w	r4, r0, #116	; 0x74
    e570:	f5a0 73e3 	sub.w	r3, r0, #454	; 0x1c6
    e574:	7202      	strb	r2, [r0, #8]
    e576:	84da      	strh	r2, [r3, #38]	; 0x26
    e578:	f8d4 507e 	ldr.w	r5, [r4, #126]	; 0x7e
    e57c:	604d      	str	r5, [r1, #4]
    e57e:	f8d4 5082 	ldr.w	r5, [r4, #130]	; 0x82
    e582:	608d      	str	r5, [r1, #8]
    e584:	f8b4 5086 	ldrh.w	r5, [r4, #134]	; 0x86
    e588:	818d      	strh	r5, [r1, #12]
    e58a:	710a      	strb	r2, [r1, #4]
    e58c:	7a05      	ldrb	r5, [r0, #8]
    e58e:	f88d 5000 	strb.w	r5, [sp]
    e592:	9d00      	ldr	r5, [sp, #0]
    e594:	9500      	str	r5, [sp, #0]
    e596:	f89d 5000 	ldrb.w	r5, [sp]
    e59a:	2d00      	cmp	r5, #0
    e59c:	d1ea      	bne.n	e574 <sym_24PTBIAZ2OKSUMWBHATZCO4EQUFF3BOLAN2QX4Y+0x12>
    e59e:	bd38      	pop	{r3, r4, r5, pc}

0000e5a0 <sym_2TCPCDAUQ3FXZYG56Z6ZP7VCFNUJTBV3EZJYPGY>:
    e5a0:	2200      	movs	r2, #0
    e5a2:	704a      	strb	r2, [r1, #1]
    e5a4:	220d      	movs	r2, #13
    e5a6:	700a      	strb	r2, [r1, #0]
    e5a8:	f100 020a 	add.w	r2, r0, #10
    e5ac:	7a83      	ldrb	r3, [r0, #10]
    e5ae:	f2a0 2012 	subw	r0, r0, #530	; 0x212
    e5b2:	710b      	strb	r3, [r1, #4]
    e5b4:	8800      	ldrh	r0, [r0, #0]
    e5b6:	80c8      	strh	r0, [r1, #6]
    e5b8:	7910      	ldrb	r0, [r2, #4]
    e5ba:	7208      	strb	r0, [r1, #8]
    e5bc:	4770      	bx	lr

0000e5be <sym_S6U6ANENQP6QL5TLITNXPOYFSB26Q5AFTW32CXI>:
    e5be:	2200      	movs	r2, #0
    e5c0:	704a      	strb	r2, [r1, #1]
    e5c2:	220e      	movs	r2, #14
    e5c4:	700a      	strb	r2, [r1, #0]
    e5c6:	7a82      	ldrb	r2, [r0, #10]
    e5c8:	f2a0 2012 	subw	r0, r0, #530	; 0x212
    e5cc:	710a      	strb	r2, [r1, #4]
    e5ce:	8800      	ldrh	r0, [r0, #0]
    e5d0:	80c8      	strh	r0, [r1, #6]
    e5d2:	4770      	bx	lr

0000e5d4 <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY>:
    e5d4:	b510      	push	{r4, lr}
    e5d6:	6844      	ldr	r4, [r0, #4]
    e5d8:	7803      	ldrb	r3, [r0, #0]
    e5da:	2100      	movs	r1, #0
    e5dc:	f894 20a5 	ldrb.w	r2, [r4, #165]	; 0xa5
    e5e0:	3488      	adds	r4, #136	; 0x88
    e5e2:	4620      	mov	r0, r4
    e5e4:	f7ff fa8a 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e5e8:	b110      	cbz	r0, e5f0 <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY+0x1c>
    e5ea:	2004      	movs	r0, #4
    e5ec:	7760      	strb	r0, [r4, #29]
    e5ee:	bd10      	pop	{r4, pc}
    e5f0:	21aa      	movs	r1, #170	; 0xaa
    e5f2:	201c      	movs	r0, #28
    e5f4:	f7f2 fa36 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e5f8 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY>:
    e5f8:	b510      	push	{r4, lr}
    e5fa:	4604      	mov	r4, r0
    e5fc:	6840      	ldr	r0, [r0, #4]
    e5fe:	2300      	movs	r3, #0
    e600:	4619      	mov	r1, r3
    e602:	f890 20a6 	ldrb.w	r2, [r0, #166]	; 0xa6
    e606:	3088      	adds	r0, #136	; 0x88
    e608:	f7ff fa78 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e60c:	b120      	cbz	r0, e618 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY+0x20>
    e60e:	6861      	ldr	r1, [r4, #4]
    e610:	2000      	movs	r0, #0
    e612:	f881 00e4 	strb.w	r0, [r1, #228]	; 0xe4
    e616:	bd10      	pop	{r4, pc}
    e618:	21b2      	movs	r1, #178	; 0xb2
    e61a:	201c      	movs	r0, #28
    e61c:	f7f2 fa22 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e620:	2200      	movs	r2, #0
    e622:	704a      	strb	r2, [r1, #1]
    e624:	2208      	movs	r2, #8
    e626:	700a      	strb	r2, [r1, #0]
    e628:	f850 2f09 	ldr.w	r2, [r0, #9]!
    e62c:	604a      	str	r2, [r1, #4]
    e62e:	6842      	ldr	r2, [r0, #4]
    e630:	608a      	str	r2, [r1, #8]
    e632:	8902      	ldrh	r2, [r0, #8]
    e634:	818a      	strh	r2, [r1, #12]
    e636:	7a80      	ldrb	r0, [r0, #10]
    e638:	7388      	strb	r0, [r1, #14]
    e63a:	4770      	bx	lr

0000e63c <sym_NK4HRRKGX3ST3ARVTU6HUEXLOWZFFBMCIDNT3EI>:
    e63c:	2200      	movs	r2, #0
    e63e:	704a      	strb	r2, [r1, #1]
    e640:	2210      	movs	r2, #16
    e642:	f5a0 70b0 	sub.w	r0, r0, #352	; 0x160
    e646:	700a      	strb	r2, [r1, #0]
    e648:	8800      	ldrh	r0, [r0, #0]
    e64a:	8088      	strh	r0, [r1, #4]
    e64c:	4770      	bx	lr

0000e64e <sym_2UKPFKMGRDZ4VV635IPSP7DNWK4DJAJ7LOHQN6A>:
    e64e:	b538      	push	{r3, r4, r5, lr}
    e650:	2400      	movs	r4, #0
    e652:	704c      	strb	r4, [r1, #1]
    e654:	2501      	movs	r5, #1
    e656:	700d      	strb	r5, [r1, #0]
    e658:	f1a0 0260 	sub.w	r2, r0, #96	; 0x60
    e65c:	f1a0 03e8 	sub.w	r3, r0, #232	; 0xe8
    e660:	710c      	strb	r4, [r1, #4]
    e662:	7204      	strb	r4, [r0, #8]
    e664:	881d      	ldrh	r5, [r3, #0]
    e666:	f8a1 5005 	strh.w	r5, [r1, #5]
    e66a:	f892 5069 	ldrb.w	r5, [r2, #105]	; 0x69
    e66e:	71cd      	strb	r5, [r1, #7]
    e670:	f8b2 506a 	ldrh.w	r5, [r2, #106]	; 0x6a
    e674:	810d      	strh	r5, [r1, #8]
    e676:	f8b2 506c 	ldrh.w	r5, [r2, #108]	; 0x6c
    e67a:	814d      	strh	r5, [r1, #10]
    e67c:	7a05      	ldrb	r5, [r0, #8]
    e67e:	f88d 5000 	strb.w	r5, [sp]
    e682:	9d00      	ldr	r5, [sp, #0]
    e684:	9500      	str	r5, [sp, #0]
    e686:	f89d 5000 	ldrb.w	r5, [sp]
    e68a:	2d00      	cmp	r5, #0
    e68c:	d1e9      	bne.n	e662 <sym_2UKPFKMGRDZ4VV635IPSP7DNWK4DJAJ7LOHQN6A+0x14>
    e68e:	bd38      	pop	{r3, r4, r5, pc}

0000e690 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q>:
    e690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e694:	7803      	ldrb	r3, [r0, #0]
    e696:	6840      	ldr	r0, [r0, #4]
    e698:	2501      	movs	r5, #1
    e69a:	f100 0488 	add.w	r4, r0, #136	; 0x88
    e69e:	f500 779c 	add.w	r7, r0, #312	; 0x138
    e6a2:	f890 00e7 	ldrb.w	r0, [r0, #231]	; 0xe7
    e6a6:	f04f 0600 	mov.w	r6, #0
    e6aa:	0780      	lsls	r0, r0, #30
    e6ac:	d410      	bmi.n	e6d0 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x40>
    e6ae:	7f62      	ldrb	r2, [r4, #29]
    e6b0:	2100      	movs	r1, #0
    e6b2:	4620      	mov	r0, r4
    e6b4:	f7ff fa22 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e6b8:	b130      	cbz	r0, e6c8 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x38>
    e6ba:	7765      	strb	r5, [r4, #29]
    e6bc:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
    e6c0:	f8a4 6054 	strh.w	r6, [r4, #84]	; 0x54
    e6c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e6c8:	216e      	movs	r1, #110	; 0x6e
    e6ca:	2040      	movs	r0, #64	; 0x40
    e6cc:	f7f2 f9ca 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e6d0:	2300      	movs	r3, #0
    e6d2:	7fa2      	ldrb	r2, [r4, #30]
    e6d4:	4619      	mov	r1, r3
    e6d6:	4620      	mov	r0, r4
    e6d8:	f7ff fa10 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e6dc:	b108      	cbz	r0, e6e2 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x52>
    e6de:	f884 605c 	strb.w	r6, [r4, #92]	; 0x5c
    e6e2:	74be      	strb	r6, [r7, #18]
    e6e4:	e7ee      	b.n	e6c4 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x34>
    e6e6:	2200      	movs	r2, #0
    e6e8:	704a      	strb	r2, [r1, #1]
    e6ea:	221d      	movs	r2, #29
    e6ec:	700a      	strb	r2, [r1, #0]
    e6ee:	f8d0 000a 	ldr.w	r0, [r0, #10]
    e6f2:	6048      	str	r0, [r1, #4]
    e6f4:	4770      	bx	lr
    e6f6:	b510      	push	{r4, lr}
    e6f8:	4604      	mov	r4, r0
    e6fa:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    e6fe:	e9d4 1000 	ldrd	r1, r0, [r4]
    e702:	4050      	eors	r0, r2
    e704:	ea70 0101 	orns	r1, r0, r1
    e708:	d008      	beq.n	e71c <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x8c>
    e70a:	f7fc fd41 	bl	b190 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    e70e:	e9d4 2300 	ldrd	r2, r3, [r4]
    e712:	1a80      	subs	r0, r0, r2
    e714:	4199      	sbcs	r1, r3
    e716:	d301      	bcc.n	e71c <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x8c>
    e718:	2001      	movs	r0, #1
    e71a:	bd10      	pop	{r4, pc}
    e71c:	2000      	movs	r0, #0
    e71e:	bd10      	pop	{r4, pc}
    e720:	2801      	cmp	r0, #1
    e722:	d102      	bne.n	e72a <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x9a>
    e724:	7948      	ldrb	r0, [r1, #5]
    e726:	0980      	lsrs	r0, r0, #6
    e728:	d001      	beq.n	e72e <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x9e>
    e72a:	2000      	movs	r0, #0
    e72c:	4770      	bx	lr
    e72e:	2001      	movs	r0, #1
    e730:	4770      	bx	lr
    e732:	2801      	cmp	r0, #1
    e734:	d106      	bne.n	e744 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xb4>
    e736:	7948      	ldrb	r0, [r1, #5]
    e738:	2101      	movs	r1, #1
    e73a:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    e73e:	d101      	bne.n	e744 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xb4>
    e740:	2001      	movs	r0, #1
    e742:	4770      	bx	lr
    e744:	2000      	movs	r0, #0
    e746:	4770      	bx	lr
    e748:	b118      	cbz	r0, e752 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xc2>
    e74a:	2802      	cmp	r0, #2
    e74c:	d001      	beq.n	e752 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xc2>
    e74e:	2001      	movs	r0, #1
    e750:	4770      	bx	lr
    e752:	2000      	movs	r0, #0
    e754:	4770      	bx	lr
    e756:	2802      	cmp	r0, #2
    e758:	d003      	beq.n	e762 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xd2>
    e75a:	2803      	cmp	r0, #3
    e75c:	d001      	beq.n	e762 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xd2>
    e75e:	2000      	movs	r0, #0
    e760:	4770      	bx	lr
    e762:	2001      	movs	r0, #1
    e764:	4770      	bx	lr

0000e766 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A>:
    e766:	f7f5 bd93 	b.w	4290 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x290>

0000e76a <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>:
    e76a:	b510      	push	{r4, lr}
    e76c:	2000      	movs	r0, #0
    e76e:	f7f5 fbc9 	bl	3f04 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x92c>
    e772:	f7f4 ff4f 	bl	3614 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    e776:	f7f5 fd99 	bl	42ac <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2ac>
    e77a:	2000      	movs	r0, #0
    e77c:	bd10      	pop	{r4, pc}
    e77e:	b510      	push	{r4, lr}
    e780:	f7f5 fbda 	bl	3f38 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x960>
    e784:	f7f4 ff46 	bl	3614 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    e788:	f7f9 fa92 	bl	7cb0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    e78c:	2005      	movs	r0, #5
    e78e:	bd10      	pop	{r4, pc}
    e790:	b510      	push	{r4, lr}
    e792:	f7f5 fbd1 	bl	3f38 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x960>
    e796:	f7f9 fa8b 	bl	7cb0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    e79a:	2005      	movs	r0, #5
    e79c:	bd10      	pop	{r4, pc}
    e79e:	b530      	push	{r4, r5, lr}
    e7a0:	b08b      	sub	sp, #44	; 0x2c
    e7a2:	4605      	mov	r5, r0
    e7a4:	f7f5 fbc8 	bl	3f38 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x960>
    e7a8:	7828      	ldrb	r0, [r5, #0]
    e7aa:	4669      	mov	r1, sp
    e7ac:	f000 040f 	and.w	r4, r0, #15
    e7b0:	4622      	mov	r2, r4
    e7b2:	4628      	mov	r0, r5
    e7b4:	f7f5 ff26 	bl	4604 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    e7b8:	2200      	movs	r2, #0
    e7ba:	4621      	mov	r1, r4
    e7bc:	4668      	mov	r0, sp
    e7be:	f7f4 ffb1 	bl	3724 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x14c>
    e7c2:	4621      	mov	r1, r4
    e7c4:	4668      	mov	r0, sp
    e7c6:	f7f5 fb37 	bl	3e38 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x860>
    e7ca:	4604      	mov	r4, r0
    e7cc:	f7f4 ff22 	bl	3614 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    e7d0:	b00b      	add	sp, #44	; 0x2c
    e7d2:	4620      	mov	r0, r4
    e7d4:	bd30      	pop	{r4, r5, pc}
    e7d6:	f240 31a7 	movw	r1, #935	; 0x3a7
    e7da:	2032      	movs	r0, #50	; 0x32
    e7dc:	f7f2 f942 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e7e0:	b510      	push	{r4, lr}
    e7e2:	f7f5 fba9 	bl	3f38 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x960>
    e7e6:	f7f9 fa63 	bl	7cb0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    e7ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e7ee:	f7f5 bd65 	b.w	42bc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2bc>
    e7f2:	f7f5 bd4d 	b.w	4290 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x290>
    e7f6:	f7fe bf0e 	b.w	d616 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    e7fa:	b570      	push	{r4, r5, r6, lr}
    e7fc:	4614      	mov	r4, r2
    e7fe:	461d      	mov	r5, r3
    e800:	4606      	mov	r6, r0
    e802:	f7fc fcc5 	bl	b190 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    e806:	1900      	adds	r0, r0, r4
    e808:	4169      	adcs	r1, r5
    e80a:	e9c6 0100 	strd	r0, r1, [r6]
    e80e:	bd70      	pop	{r4, r5, r6, pc}

0000e810 <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>:
    e810:	b510      	push	{r4, lr}
    e812:	f7f2 fd27 	bl	1264 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    e816:	f000 f944 	bl	eaa2 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xdc>
    e81a:	4604      	mov	r4, r0
    e81c:	221c      	movs	r2, #28
    e81e:	2100      	movs	r1, #0
    e820:	3009      	adds	r0, #9
    e822:	f001 ff9e 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e826:	207f      	movs	r0, #127	; 0x7f
    e828:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    e82c:	21ff      	movs	r1, #255	; 0xff
    e82e:	75e1      	strb	r1, [r4, #23]
    e830:	72a1      	strb	r1, [r4, #10]
    e832:	7721      	strb	r1, [r4, #28]
    e834:	7ce0      	ldrb	r0, [r4, #19]
    e836:	f020 0060 	bic.w	r0, r0, #96	; 0x60
    e83a:	3020      	adds	r0, #32
    e83c:	74e0      	strb	r0, [r4, #19]
    e83e:	bd10      	pop	{r4, pc}

0000e840 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>:
    e840:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    e844:	461d      	mov	r5, r3
    e846:	e9dd ba0b 	ldrd	fp, sl, [sp, #44]	; 0x2c
    e84a:	4616      	mov	r6, r2
    e84c:	4688      	mov	r8, r1
    e84e:	4681      	mov	r9, r0
    e850:	f7f2 fd08 	bl	1264 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    e854:	4604      	mov	r4, r0
    e856:	f7fe fda7 	bl	d3a8 <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>
    e85a:	2801      	cmp	r0, #1
    e85c:	d066      	beq.n	e92c <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xec>
    e85e:	4620      	mov	r0, r4
    e860:	f000 f91f 	bl	eaa2 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xdc>
    e864:	4604      	mov	r4, r0
    e866:	221c      	movs	r2, #28
    e868:	2100      	movs	r1, #0
    e86a:	3009      	adds	r0, #9
    e86c:	f001 ff79 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e870:	2701      	movs	r7, #1
    e872:	7267      	strb	r7, [r4, #9]
    e874:	ea5f 0008 	movs.w	r0, r8
    e878:	d009      	beq.n	e88e <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x4e>
    e87a:	2801      	cmp	r0, #1
    e87c:	d00b      	beq.n	e896 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x56>
    e87e:	2802      	cmp	r0, #2
    e880:	d02d      	beq.n	e8de <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x9e>
    e882:	f1b8 0f06 	cmp.w	r8, #6
    e886:	d02c      	beq.n	e8e2 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa2>
    e888:	f240 310b 	movw	r1, #779	; 0x30b
    e88c:	e04b      	b.n	e926 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xe6>
    e88e:	7ce0      	ldrb	r0, [r4, #19]
    e890:	f040 0001 	orr.w	r0, r0, #1
    e894:	e026      	b.n	e8e4 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa4>
    e896:	7ce0      	ldrb	r0, [r4, #19]
    e898:	f040 0005 	orr.w	r0, r0, #5
    e89c:	f040 0010 	orr.w	r0, r0, #16
    e8a0:	74e0      	strb	r0, [r4, #19]
    e8a2:	f104 030a 	add.w	r3, r4, #10
    e8a6:	1c5a      	adds	r2, r3, #1
    e8a8:	4648      	mov	r0, r9
    e8aa:	990a      	ldr	r1, [sp, #40]	; 0x28
    e8ac:	f000 f8de 	bl	ea6c <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xa6>
    e8b0:	f884 a012 	strb.w	sl, [r4, #18]
    e8b4:	7567      	strb	r7, [r4, #21]
    e8b6:	2000      	movs	r0, #0
    e8b8:	75a0      	strb	r0, [r4, #22]
    e8ba:	20ff      	movs	r0, #255	; 0xff
    e8bc:	75e0      	strb	r0, [r4, #23]
    e8be:	7ce1      	ldrb	r1, [r4, #19]
    e8c0:	0749      	lsls	r1, r1, #29
    e8c2:	d518      	bpl.n	e8f6 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xb6>
    e8c4:	f104 001d 	add.w	r0, r4, #29
    e8c8:	1e41      	subs	r1, r0, #1
    e8ca:	2d02      	cmp	r5, #2
    e8cc:	d00d      	beq.n	e8ea <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xaa>
    e8ce:	2d03      	cmp	r5, #3
    e8d0:	d00b      	beq.n	e8ea <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xaa>
    e8d2:	f8d9 2008 	ldr.w	r2, [r9, #8]
    e8d6:	6813      	ldr	r3, [r2, #0]
    e8d8:	6003      	str	r3, [r0, #0]
    e8da:	8892      	ldrh	r2, [r2, #4]
    e8dc:	e008      	b.n	e8f0 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xb0>
    e8de:	7ce0      	ldrb	r0, [r4, #19]
    e8e0:	e7dc      	b.n	e89c <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x5c>
    e8e2:	7ce0      	ldrb	r0, [r4, #19]
    e8e4:	f040 0002 	orr.w	r0, r0, #2
    e8e8:	e7d8      	b.n	e89c <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x5c>
    e8ea:	6832      	ldr	r2, [r6, #0]
    e8ec:	6002      	str	r2, [r0, #0]
    e8ee:	88b2      	ldrh	r2, [r6, #4]
    e8f0:	8082      	strh	r2, [r0, #4]
    e8f2:	700d      	strb	r5, [r1, #0]
    e8f4:	e000      	b.n	e8f8 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xb8>
    e8f6:	7720      	strb	r0, [r4, #28]
    e8f8:	207f      	movs	r0, #127	; 0x7f
    e8fa:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    e8fe:	f884 b024 	strb.w	fp, [r4, #36]	; 0x24
    e902:	f7f2 fca9 	bl	1258 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    e906:	4605      	mov	r5, r0
    e908:	f7f2 fcac 	bl	1264 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    e90c:	2201      	movs	r2, #1
    e90e:	4629      	mov	r1, r5
    e910:	f000 f8d0 	bl	eab4 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xee>
    e914:	b128      	cbz	r0, e922 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xe2>
    e916:	4620      	mov	r0, r4
    e918:	e8bd 5ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    e91c:	2100      	movs	r1, #0
    e91e:	f7f5 be69 	b.w	45f4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5f4>
    e922:	f240 312b 	movw	r1, #811	; 0x32b
    e926:	2033      	movs	r0, #51	; 0x33
    e928:	f7f2 f89c 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e92c:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

0000e930 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI>:
    e930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e934:	461e      	mov	r6, r3
    e936:	4617      	mov	r7, r2
    e938:	4689      	mov	r9, r1
    e93a:	4682      	mov	sl, r0
    e93c:	f8dd 8020 	ldr.w	r8, [sp, #32]
    e940:	f7f2 fc90 	bl	1264 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    e944:	4604      	mov	r4, r0
    e946:	f7fe fd2f 	bl	d3a8 <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>
    e94a:	2801      	cmp	r0, #1
    e94c:	d039      	beq.n	e9c2 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x92>
    e94e:	4620      	mov	r0, r4
    e950:	f000 f8a7 	bl	eaa2 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xdc>
    e954:	4604      	mov	r4, r0
    e956:	221c      	movs	r2, #28
    e958:	2100      	movs	r1, #0
    e95a:	3009      	adds	r0, #9
    e95c:	f001 ff01 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e960:	2501      	movs	r5, #1
    e962:	f104 030a 	add.w	r3, r4, #10
    e966:	7265      	strb	r5, [r4, #9]
    e968:	1c5a      	adds	r2, r3, #1
    e96a:	4649      	mov	r1, r9
    e96c:	4650      	mov	r0, sl
    e96e:	f000 f87d 	bl	ea6c <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xa6>
    e972:	f884 8012 	strb.w	r8, [r4, #18]
    e976:	7ce0      	ldrb	r0, [r4, #19]
    e978:	21ff      	movs	r1, #255	; 0xff
    e97a:	f367 0000 	bfi	r0, r7, #0, #1
    e97e:	f040 001a 	orr.w	r0, r0, #26
    e982:	74e0      	strb	r0, [r4, #19]
    e984:	7565      	strb	r5, [r4, #21]
    e986:	2000      	movs	r0, #0
    e988:	75a0      	strb	r0, [r4, #22]
    e98a:	75e1      	strb	r1, [r4, #23]
    e98c:	7721      	strb	r1, [r4, #28]
    e98e:	207f      	movs	r0, #127	; 0x7f
    e990:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    e994:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
    e998:	f7f2 fc5e 	bl	1258 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    e99c:	4605      	mov	r5, r0
    e99e:	f7f2 fc61 	bl	1264 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    e9a2:	2201      	movs	r2, #1
    e9a4:	4629      	mov	r1, r5
    e9a6:	f000 f885 	bl	eab4 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xee>
    e9aa:	b128      	cbz	r0, e9b8 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x88>
    e9ac:	4620      	mov	r0, r4
    e9ae:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e9b2:	2100      	movs	r1, #0
    e9b4:	f7f5 be1e 	b.w	45f4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5f4>
    e9b8:	f44f 7156 	mov.w	r1, #856	; 0x358
    e9bc:	2033      	movs	r0, #51	; 0x33
    e9be:	f7f2 f851 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e9c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000e9c6 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY>:
    e9c6:	f7ff bf23 	b.w	e810 <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>
    e9ca:	b5f0      	push	{r4, r5, r6, r7, lr}
    e9cc:	b08b      	sub	sp, #44	; 0x2c
    e9ce:	460f      	mov	r7, r1
    e9d0:	f7f2 fc48 	bl	1264 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    e9d4:	4604      	mov	r4, r0
    e9d6:	f7fe fd38 	bl	d44a <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    e9da:	0005      	movs	r5, r0
    e9dc:	d00c      	beq.n	e9f8 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x32>
    e9de:	4620      	mov	r0, r4
    e9e0:	4629      	mov	r1, r5
    e9e2:	aa0a      	add	r2, sp, #40	; 0x28
    e9e4:	f7fe fd4f 	bl	d486 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    e9e8:	4606      	mov	r6, r0
    e9ea:	f7f2 fc35 	bl	1258 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    e9ee:	42b0      	cmp	r0, r6
    e9f0:	d005      	beq.n	e9fe <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x38>
    e9f2:	f240 11ab 	movw	r1, #427	; 0x1ab
    e9f6:	e036      	b.n	ea66 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xa0>
    e9f8:	f240 11a1 	movw	r1, #417	; 0x1a1
    e9fc:	e033      	b.n	ea66 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xa0>
    e9fe:	4669      	mov	r1, sp
    ea00:	980a      	ldr	r0, [sp, #40]	; 0x28
    ea02:	f000 f859 	bl	eab8 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI>
    ea06:	1d3e      	adds	r6, r7, #4
    ea08:	4628      	mov	r0, r5
    ea0a:	f7fe fccb 	bl	d3a4 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    ea0e:	4605      	mov	r5, r0
    ea10:	f100 0109 	add.w	r1, r0, #9
    ea14:	221c      	movs	r2, #28
    ea16:	4630      	mov	r0, r6
    ea18:	f001 fe29 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ea1c:	7ce8      	ldrb	r0, [r5, #19]
    ea1e:	f04f 0500 	mov.w	r5, #0
    ea22:	06c1      	lsls	r1, r0, #27
    ea24:	d50d      	bpl.n	ea42 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x7c>
    ea26:	0740      	lsls	r0, r0, #29
    ea28:	d40a      	bmi.n	ea40 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x7a>
    ea2a:	f89d 2010 	ldrb.w	r2, [sp, #16]
    ea2e:	f106 001c 	add.w	r0, r6, #28
    ea32:	9903      	ldr	r1, [sp, #12]
    ea34:	f001 fe1b 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ea38:	f89d 0010 	ldrb.w	r0, [sp, #16]
    ea3c:	7230      	strb	r0, [r6, #8]
    ea3e:	e000      	b.n	ea42 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x7c>
    ea40:	7235      	strb	r5, [r6, #8]
    ea42:	707d      	strb	r5, [r7, #1]
    ea44:	2005      	movs	r0, #5
    ea46:	7038      	strb	r0, [r7, #0]
    ea48:	4638      	mov	r0, r7
    ea4a:	f7f5 fd63 	bl	4514 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x514>
    ea4e:	4620      	mov	r0, r4
    ea50:	f7fe fcc3 	bl	d3da <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    ea54:	b128      	cbz	r0, ea62 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x9c>
    ea56:	4620      	mov	r0, r4
    ea58:	2100      	movs	r1, #0
    ea5a:	f7fe fdb2 	bl	d5c2 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    ea5e:	b00b      	add	sp, #44	; 0x2c
    ea60:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ea62:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
    ea66:	2033      	movs	r0, #51	; 0x33
    ea68:	f7f1 fffc 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ea6c:	b510      	push	{r4, lr}
    ea6e:	461c      	mov	r4, r3
    ea70:	460b      	mov	r3, r1
    ea72:	29ff      	cmp	r1, #255	; 0xff
    ea74:	d00d      	beq.n	ea92 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xcc>
    ea76:	4621      	mov	r1, r4
    ea78:	4618      	mov	r0, r3
    ea7a:	f7f3 fbcf 	bl	221c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    ea7e:	b120      	cbz	r0, ea8a <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xc4>
    ea80:	7820      	ldrb	r0, [r4, #0]
    ea82:	f040 0002 	orr.w	r0, r0, #2
    ea86:	7020      	strb	r0, [r4, #0]
    ea88:	bd10      	pop	{r4, pc}
    ea8a:	21dc      	movs	r1, #220	; 0xdc
    ea8c:	2033      	movs	r0, #51	; 0x33
    ea8e:	f7f1 ffe9 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ea92:	7c41      	ldrb	r1, [r0, #17]
    ea94:	7021      	strb	r1, [r4, #0]
    ea96:	6840      	ldr	r0, [r0, #4]
    ea98:	6801      	ldr	r1, [r0, #0]
    ea9a:	6011      	str	r1, [r2, #0]
    ea9c:	8880      	ldrh	r0, [r0, #4]
    ea9e:	8090      	strh	r0, [r2, #4]
    eaa0:	bd10      	pop	{r4, pc}
    eaa2:	b51c      	push	{r2, r3, r4, lr}
    eaa4:	4669      	mov	r1, sp
    eaa6:	aa01      	add	r2, sp, #4
    eaa8:	f7fe fcdf 	bl	d46a <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    eaac:	9800      	ldr	r0, [sp, #0]
    eaae:	f7fe fc79 	bl	d3a4 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    eab2:	bd1c      	pop	{r2, r3, r4, pc}
    eab4:	f7fe bc2d 	b.w	d312 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>

0000eab8 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI>:
    eab8:	7802      	ldrb	r2, [r0, #0]
    eaba:	f002 020f 	and.w	r2, r2, #15
    eabe:	f7f5 bda1 	b.w	4604 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>

0000eac2 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>:
    eac2:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    eac4:	255e      	movs	r5, #94	; 0x5e
    eac6:	4668      	mov	r0, sp
    eac8:	f7fd fe00 	bl	c6cc <mpsl_fem_pa_is_configured>
    eacc:	f89d 0000 	ldrb.w	r0, [sp]
    ead0:	b108      	cbz	r0, ead6 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA+0x14>
    ead2:	2401      	movs	r4, #1
    ead4:	e000      	b.n	ead8 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA+0x16>
    ead6:	2400      	movs	r4, #0
    ead8:	a801      	add	r0, sp, #4
    eada:	f7fd fddf 	bl	c69c <mpsl_fem_lna_is_configured>
    eade:	f89d 0004 	ldrb.w	r0, [sp, #4]
    eae2:	b100      	cbz	r0, eae6 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA+0x24>
    eae4:	2001      	movs	r0, #1
    eae6:	4304      	orrs	r4, r0
    eae8:	d000      	beq.n	eaec <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA+0x2a>
    eaea:	2568      	movs	r5, #104	; 0x68
    eaec:	4628      	mov	r0, r5
    eaee:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000eaf0 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY>:
    eaf0:	b510      	push	{r4, lr}
    eaf2:	f7ff ffe6 	bl	eac2 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>
    eaf6:	3069      	adds	r0, #105	; 0x69
    eaf8:	b280      	uxth	r0, r0
    eafa:	bd10      	pop	{r4, pc}
    eafc:	6980      	ldr	r0, [r0, #24]
    eafe:	2800      	cmp	r0, #0
    eb00:	d000      	beq.n	eb04 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x14>
    eb02:	2001      	movs	r0, #1
    eb04:	4770      	bx	lr
    eb06:	b510      	push	{r4, lr}
    eb08:	2802      	cmp	r0, #2
    eb0a:	d006      	beq.n	eb1a <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x2a>
    eb0c:	2108      	movs	r1, #8
    eb0e:	2801      	cmp	r0, #1
    eb10:	d005      	beq.n	eb1e <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x2e>
    eb12:	21f5      	movs	r1, #245	; 0xf5
    eb14:	2005      	movs	r0, #5
    eb16:	f7f1 ffa5 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eb1a:	2104      	movs	r1, #4
    eb1c:	e7f7      	b.n	eb0e <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x1e>
    eb1e:	202a      	movs	r0, #42	; 0x2a
    eb20:	2228      	movs	r2, #40	; 0x28
    eb22:	fb11 2000 	smlabb	r0, r1, r0, r2
    eb26:	b280      	uxth	r0, r0
    eb28:	bd10      	pop	{r4, pc}
    eb2a:	9800      	ldr	r0, [sp, #0]
    eb2c:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
    eb30:	1810      	adds	r0, r2, r0
    eb32:	f143 0300 	adc.w	r3, r3, #0
    eb36:	1840      	adds	r0, r0, r1
    eb38:	f143 0100 	adc.w	r1, r3, #0
    eb3c:	3833      	subs	r0, #51	; 0x33
    eb3e:	f161 0100 	sbc.w	r1, r1, #0
    eb42:	f240 42e2 	movw	r2, #1250	; 0x4e2
    eb46:	1880      	adds	r0, r0, r2
    eb48:	f141 0100 	adc.w	r1, r1, #0
    eb4c:	4770      	bx	lr
    eb4e:	b510      	push	{r4, lr}
    eb50:	f7ff ffb7 	bl	eac2 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>
    eb54:	f500 7081 	add.w	r0, r0, #258	; 0x102
    eb58:	b280      	uxth	r0, r0
    eb5a:	bd10      	pop	{r4, pc}
    eb5c:	f7fb bb5c 	b.w	a218 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    eb60:	1a10      	subs	r0, r2, r0
    eb62:	4770      	bx	lr

0000eb64 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>:
    eb64:	b510      	push	{r4, lr}
    eb66:	2905      	cmp	r1, #5
    eb68:	d22d      	bcs.n	ebc6 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI+0x62>
    eb6a:	e8df f001 	tbb	[pc, r1]
    eb6e:	0a05      	.short	0x0a05
    eb70:	00280e03 	.word	0x00280e03
    eb74:	2100      	movs	r1, #0
    eb76:	e000      	b.n	eb7a <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI+0x16>
    eb78:	2101      	movs	r1, #1
    eb7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    eb7e:	f7f6 bbbd 	b.w	52fc <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x90>
    eb82:	2103      	movs	r1, #3
    eb84:	f880 1248 	strb.w	r1, [r0, #584]	; 0x248
    eb88:	bd10      	pop	{r4, pc}
    eb8a:	4604      	mov	r4, r0
    eb8c:	6900      	ldr	r0, [r0, #16]
    eb8e:	f8c4 0250 	str.w	r0, [r4, #592]	; 0x250
    eb92:	f8d4 026c 	ldr.w	r0, [r4, #620]	; 0x26c
    eb96:	6220      	str	r0, [r4, #32]
    eb98:	f8b4 0268 	ldrh.w	r0, [r4, #616]	; 0x268
    eb9c:	84a0      	strh	r0, [r4, #36]	; 0x24
    eb9e:	f8d4 0270 	ldr.w	r0, [r4, #624]	; 0x270
    eba2:	6120      	str	r0, [r4, #16]
    eba4:	f8b4 0274 	ldrh.w	r0, [r4, #628]	; 0x274
    eba8:	8320      	strh	r0, [r4, #24]
    ebaa:	f8b4 0276 	ldrh.w	r0, [r4, #630]	; 0x276
    ebae:	8360      	strh	r0, [r4, #26]
    ebb0:	4620      	mov	r0, r4
    ebb2:	f000 f817 	bl	ebe4 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xa>
    ebb6:	2002      	movs	r0, #2
    ebb8:	f884 0248 	strb.w	r0, [r4, #584]	; 0x248
    ebbc:	bd10      	pop	{r4, pc}
    ebbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ebc2:	f000 b80f 	b.w	ebe4 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xa>
    ebc6:	f240 21fd 	movw	r1, #765	; 0x2fd
    ebca:	2035      	movs	r0, #53	; 0x35
    ebcc:	f7f1 ff4a 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000ebd0 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY>:
    ebd0:	b510      	push	{r4, lr}
    ebd2:	f7f6 fb63 	bl	529c <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x30>
    ebd6:	2000      	movs	r0, #0
    ebd8:	bd10      	pop	{r4, pc}

0000ebda <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY>:
    ebda:	f8c0 1230 	str.w	r1, [r0, #560]	; 0x230
    ebde:	4770      	bx	lr
    ebe0:	2000      	movs	r0, #0
    ebe2:	4770      	bx	lr
    ebe4:	b570      	push	{r4, r5, r6, lr}
    ebe6:	4604      	mov	r4, r0
    ebe8:	f890 106b 	ldrb.w	r1, [r0, #107]	; 0x6b
    ebec:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    ebf0:	f7f6 fba0 	bl	5334 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0xc8>
    ebf4:	4605      	mov	r5, r0
    ebf6:	f7ff ff7b 	bl	eaf0 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY>
    ebfa:	4601      	mov	r1, r0
    ebfc:	462a      	mov	r2, r5
    ebfe:	4620      	mov	r0, r4
    ec00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ec04:	f7ff bb26 	b.w	e254 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
    ec08:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    ec0c:	469a      	mov	sl, r3
    ec0e:	4691      	mov	r9, r2
    ec10:	460c      	mov	r4, r1
    ec12:	4606      	mov	r6, r0
    ec14:	2500      	movs	r5, #0
    ec16:	f7ff ff54 	bl	eac2 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>
    ec1a:	4680      	mov	r8, r0
    ec1c:	f894 00a5 	ldrb.w	r0, [r4, #165]	; 0xa5
    ec20:	280d      	cmp	r0, #13
    ec22:	d017      	beq.n	ec54 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x7a>
    ec24:	280e      	cmp	r0, #14
    ec26:	d015      	beq.n	ec54 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x7a>
    ec28:	2000      	movs	r0, #0
    ec2a:	4683      	mov	fp, r0
    ec2c:	f1ba 0f00 	cmp.w	sl, #0
    ec30:	d003      	beq.n	ec3a <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x60>
    ec32:	2101      	movs	r1, #1
    ec34:	4620      	mov	r0, r4
    ec36:	f7f6 fd49 	bl	56cc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI>
    ec3a:	f894 0248 	ldrb.w	r0, [r4, #584]	; 0x248
    ec3e:	2701      	movs	r7, #1
    ec40:	b150      	cbz	r0, ec58 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x7e>
    ec42:	2801      	cmp	r0, #1
    ec44:	d01a      	beq.n	ec7c <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xa2>
    ec46:	2802      	cmp	r0, #2
    ec48:	d012      	beq.n	ec70 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x96>
    ec4a:	2803      	cmp	r0, #3
    ec4c:	d016      	beq.n	ec7c <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xa2>
    ec4e:	f240 2136 	movw	r1, #566	; 0x236
    ec52:	e08e      	b.n	ed72 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x198>
    ec54:	2001      	movs	r0, #1
    ec56:	e7e8      	b.n	ec2a <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x50>
    ec58:	f1b9 0f00 	cmp.w	r9, #0
    ec5c:	d005      	beq.n	ec6a <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x90>
    ec5e:	f884 7248 	strb.w	r7, [r4, #584]	; 0x248
    ec62:	4620      	mov	r0, r4
    ec64:	f7ff ffbe 	bl	ebe4 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xa>
    ec68:	e009      	b.n	ec7e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xa4>
    ec6a:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
    ec6e:	e080      	b.n	ed72 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x198>
    ec70:	2003      	movs	r0, #3
    ec72:	f8d4 5250 	ldr.w	r5, [r4, #592]	; 0x250
    ec76:	f884 0248 	strb.w	r0, [r4, #584]	; 0x248
    ec7a:	e000      	b.n	ec7e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xa4>
    ec7c:	6925      	ldr	r5, [r4, #16]
    ec7e:	e9d4 108a 	ldrd	r1, r0, [r4, #552]	; 0x228
    ec82:	f04f 0900 	mov.w	r9, #0
    ec86:	1949      	adds	r1, r1, r5
    ec88:	eb40 0009 	adc.w	r0, r0, r9
    ec8c:	e9c4 108a 	strd	r1, r0, [r4, #552]	; 0x228
    ec90:	e9c6 1004 	strd	r1, r0, [r6, #16]
    ec94:	f886 9000 	strb.w	r9, [r6]
    ec98:	f8a6 8008 	strh.w	r8, [r6, #8]
    ec9c:	f894 00a5 	ldrb.w	r0, [r4, #165]	; 0xa5
    eca0:	280d      	cmp	r0, #13
    eca2:	d02b      	beq.n	ecfc <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x122>
    eca4:	280b      	cmp	r0, #11
    eca6:	d029      	beq.n	ecfc <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x122>
    eca8:	2825      	cmp	r0, #37	; 0x25
    ecaa:	d027      	beq.n	ecfc <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x122>
    ecac:	2000      	movs	r0, #0
    ecae:	4680      	mov	r8, r0
    ecb0:	4620      	mov	r0, r4
    ecb2:	f7f6 fbd5 	bl	5460 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA>
    ecb6:	4601      	mov	r1, r0
    ecb8:	f1a8 0001 	sub.w	r0, r8, #1
    ecbc:	4201      	tst	r1, r0
    ecbe:	d102      	bne.n	ecc6 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xec>
    ecc0:	f886 900a 	strb.w	r9, [r6, #10]
    ecc4:	e005      	b.n	ecd2 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xf8>
    ecc6:	f894 0248 	ldrb.w	r0, [r4, #584]	; 0x248
    ecca:	2801      	cmp	r0, #1
    eccc:	d018      	beq.n	ed00 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x126>
    ecce:	2002      	movs	r0, #2
    ecd0:	72b0      	strb	r0, [r6, #10]
    ecd2:	72f7      	strb	r7, [r6, #11]
    ecd4:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    ecd8:	f7ff faba 	bl	e250 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    ecdc:	6070      	str	r0, [r6, #4]
    ecde:	ea3a 000b 	bics.w	r0, sl, fp
    ece2:	d042      	beq.n	ed6a <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x190>
    ece4:	4629      	mov	r1, r5
    ece6:	4630      	mov	r0, r6
    ece8:	f7ff f814 	bl	dd14 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    ecec:	b287      	uxth	r7, r0
    ecee:	4620      	mov	r0, r4
    ecf0:	f7f6 fbb6 	bl	5460 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA>
    ecf4:	f1b8 0f00 	cmp.w	r8, #0
    ecf8:	d004      	beq.n	ed04 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x12a>
    ecfa:	e018      	b.n	ed2e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x154>
    ecfc:	2001      	movs	r0, #1
    ecfe:	e7d6      	b.n	ecae <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xd4>
    ed00:	72b7      	strb	r7, [r6, #10]
    ed02:	e7e6      	b.n	ecd2 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xf8>
    ed04:	42b8      	cmp	r0, r7
    ed06:	d812      	bhi.n	ed2e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x154>
    ed08:	f886 900a 	strb.w	r9, [r6, #10]
    ed0c:	e9d4 328a 	ldrd	r3, r2, [r4, #552]	; 0x228
    ed10:	4607      	mov	r7, r0
    ed12:	fb05 f107 	mul.w	r1, r5, r7
    ed16:	1859      	adds	r1, r3, r1
    ed18:	eb42 0209 	adc.w	r2, r2, r9
    ed1c:	e9c6 1204 	strd	r1, r2, [r6, #16]
    ed20:	b32d      	cbz	r5, ed6e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x194>
    ed22:	4629      	mov	r1, r5
    ed24:	4630      	mov	r0, r6
    ed26:	f7fe fff5 	bl	dd14 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    ed2a:	4438      	add	r0, r7
    ed2c:	b287      	uxth	r7, r0
    ed2e:	4639      	mov	r1, r7
    ed30:	4620      	mov	r0, r4
    ed32:	f7f6 fccb 	bl	56cc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI>
    ed36:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
    ed3a:	e9c4 018a 	strd	r0, r1, [r4, #552]	; 0x228
    ed3e:	6f20      	ldr	r0, [r4, #112]	; 0x70
    ed40:	2800      	cmp	r0, #0
    ed42:	d012      	beq.n	ed6a <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x190>
    ed44:	f8b4 009c 	ldrh.w	r0, [r4, #156]	; 0x9c
    ed48:	f8b4 20d2 	ldrh.w	r2, [r4, #210]	; 0xd2
    ed4c:	1a80      	subs	r0, r0, r2
    ed4e:	b201      	sxth	r1, r0
    ed50:	2900      	cmp	r1, #0
    ed52:	dd0a      	ble.n	ed6a <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x190>
    ed54:	f8b4 0074 	ldrh.w	r0, [r4, #116]	; 0x74
    ed58:	4401      	add	r1, r0
    ed5a:	1e49      	subs	r1, r1, #1
    ed5c:	fb91 f1f0 	sdiv	r1, r1, r0
    ed60:	b289      	uxth	r1, r1
    ed62:	fb01 2000 	mla	r0, r1, r0, r2
    ed66:	f8a4 00d2 	strh.w	r0, [r4, #210]	; 0xd2
    ed6a:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    ed6e:	f44f 711e 	mov.w	r1, #632	; 0x278
    ed72:	2035      	movs	r0, #53	; 0x35
    ed74:	f7f1 fe76 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ed78:	b510      	push	{r4, lr}
    ed7a:	4604      	mov	r4, r0
    ed7c:	2000      	movs	r0, #0
    ed7e:	f884 0248 	strb.w	r0, [r4, #584]	; 0x248
    ed82:	f894 0249 	ldrb.w	r0, [r4, #585]	; 0x249
    ed86:	f7fb fe9b 	bl	aac0 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    ed8a:	b140      	cbz	r0, ed9e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x1c4>
    ed8c:	2020      	movs	r0, #32
    ed8e:	f884 0249 	strb.w	r0, [r4, #585]	; 0x249
    ed92:	f504 700a 	add.w	r0, r4, #552	; 0x228
    ed96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ed9a:	f7f8 b843 	b.w	6e24 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    ed9e:	f44f 71c4 	mov.w	r1, #392	; 0x188
    eda2:	2035      	movs	r0, #53	; 0x35
    eda4:	f7f1 fe5e 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eda8:	b510      	push	{r4, lr}
    edaa:	4613      	mov	r3, r2
    edac:	460a      	mov	r2, r1
    edae:	b086      	sub	sp, #24
    edb0:	4604      	mov	r4, r0
    edb2:	4601      	mov	r1, r0
    edb4:	4668      	mov	r0, sp
    edb6:	f7ff ff27 	bl	ec08 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x2e>
    edba:	f894 0249 	ldrb.w	r0, [r4, #585]	; 0x249
    edbe:	4669      	mov	r1, sp
    edc0:	f000 f809 	bl	edd6 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x1fc>
    edc4:	2800      	cmp	r0, #0
    edc6:	d104      	bne.n	edd2 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x1f8>
    edc8:	f240 21a6 	movw	r1, #678	; 0x2a6
    edcc:	2035      	movs	r0, #53	; 0x35
    edce:	f7f1 fe49 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    edd2:	b006      	add	sp, #24
    edd4:	bd10      	pop	{r4, pc}
    edd6:	f7fb ba1f 	b.w	a218 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    edda:	0000      	.short	0x0000
    eddc:	a1e0a62c 	.word	0xa1e0a62c
    ede0:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    ede4:	f001 0307 	and.w	r3, r1, #7
    ede8:	7802      	ldrb	r2, [r0, #0]
    edea:	2101      	movs	r1, #1
    edec:	4099      	lsls	r1, r3
    edee:	438a      	bics	r2, r1
    edf0:	7002      	strb	r2, [r0, #0]
    edf2:	4770      	bx	lr

0000edf4 <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI>:
    edf4:	f7f2 b990 	b.w	1118 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

0000edf8 <sym_VJEPN3SDR5AQAFQ3NEQBRQ5LOSN3JDHOXS2M77A>:
    edf8:	2000      	movs	r0, #0
    edfa:	4770      	bx	lr

0000edfc <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ>:
    edfc:	b510      	push	{r4, lr}
    edfe:	f7f7 f977 	bl	60f0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa24>
    ee02:	b128      	cbz	r0, ee10 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x14>
    ee04:	2000      	movs	r0, #0
    ee06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ee0a:	4601      	mov	r1, r0
    ee0c:	f7f7 b918 	b.w	6040 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x974>
    ee10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ee14:	f7f2 bd86 	b.w	1924 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>
    ee18:	f890 00a6 	ldrb.w	r0, [r0, #166]	; 0xa6
    ee1c:	28fe      	cmp	r0, #254	; 0xfe
    ee1e:	d001      	beq.n	ee24 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x28>
    ee20:	2001      	movs	r0, #1
    ee22:	4770      	bx	lr
    ee24:	2000      	movs	r0, #0
    ee26:	4770      	bx	lr
    ee28:	b510      	push	{r4, lr}
    ee2a:	2801      	cmp	r0, #1
    ee2c:	d006      	beq.n	ee3c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x40>
    ee2e:	2802      	cmp	r0, #2
    ee30:	d004      	beq.n	ee3c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x40>
    ee32:	f44f 7136 	mov.w	r1, #728	; 0x2d8
    ee36:	2006      	movs	r0, #6
    ee38:	f7f1 fe14 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ee3c:	bd10      	pop	{r4, pc}
    ee3e:	2801      	cmp	r0, #1
    ee40:	d002      	beq.n	ee48 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x4c>
    ee42:	2802      	cmp	r0, #2
    ee44:	d105      	bne.n	ee52 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x56>
    ee46:	e002      	b.n	ee4e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x52>
    ee48:	2901      	cmp	r1, #1
    ee4a:	d004      	beq.n	ee56 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5a>
    ee4c:	e001      	b.n	ee52 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x56>
    ee4e:	2902      	cmp	r1, #2
    ee50:	d001      	beq.n	ee56 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5a>
    ee52:	2000      	movs	r0, #0
    ee54:	4770      	bx	lr
    ee56:	2001      	movs	r0, #1
    ee58:	4770      	bx	lr
    ee5a:	e9d0 1232 	ldrd	r1, r2, [r0, #200]	; 0xc8
    ee5e:	428a      	cmp	r2, r1
    ee60:	d301      	bcc.n	ee66 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x6a>
    ee62:	1a51      	subs	r1, r2, r1
    ee64:	e000      	b.n	ee68 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x6c>
    ee66:	2100      	movs	r1, #0
    ee68:	8b02      	ldrh	r2, [r0, #24]
    ee6a:	1d52      	adds	r2, r2, #5
    ee6c:	428a      	cmp	r2, r1
    ee6e:	d302      	bcc.n	ee76 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x7a>
    ee70:	2101      	movs	r1, #1
    ee72:	f880 10d4 	strb.w	r1, [r0, #212]	; 0xd4
    ee76:	4770      	bx	lr
    ee78:	b510      	push	{r4, lr}
    ee7a:	4604      	mov	r4, r0
    ee7c:	6840      	ldr	r0, [r0, #4]
    ee7e:	2300      	movs	r3, #0
    ee80:	4619      	mov	r1, r3
    ee82:	f890 20a6 	ldrb.w	r2, [r0, #166]	; 0xa6
    ee86:	3088      	adds	r0, #136	; 0x88
    ee88:	f7fe fe38 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ee8c:	b168      	cbz	r0, eeaa <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xae>
    ee8e:	6861      	ldr	r1, [r4, #4]
    ee90:	2000      	movs	r0, #0
    ee92:	f8a1 00e2 	strh.w	r0, [r1, #226]	; 0xe2
    ee96:	6861      	ldr	r1, [r4, #4]
    ee98:	2001      	movs	r0, #1
    ee9a:	f881 00e4 	strb.w	r0, [r1, #228]	; 0xe4
    ee9e:	6861      	ldr	r1, [r4, #4]
    eea0:	2002      	movs	r0, #2
    eea2:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    eea6:	2000      	movs	r0, #0
    eea8:	bd10      	pop	{r4, pc}
    eeaa:	2001      	movs	r0, #1
    eeac:	bd10      	pop	{r4, pc}
    eeae:	b510      	push	{r4, lr}
    eeb0:	4604      	mov	r4, r0
    eeb2:	6840      	ldr	r0, [r0, #4]
    eeb4:	2300      	movs	r3, #0
    eeb6:	2109      	movs	r1, #9
    eeb8:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    eebc:	3088      	adds	r0, #136	; 0x88
    eebe:	f7fe fe1d 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    eec2:	2800      	cmp	r0, #0
    eec4:	d009      	beq.n	eeda <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xde>
    eec6:	6861      	ldr	r1, [r4, #4]
    eec8:	2000      	movs	r0, #0
    eeca:	f881 00d4 	strb.w	r0, [r1, #212]	; 0xd4
    eece:	6861      	ldr	r1, [r4, #4]
    eed0:	f881 00e0 	strb.w	r0, [r1, #224]	; 0xe0
    eed4:	6861      	ldr	r1, [r4, #4]
    eed6:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    eeda:	bd10      	pop	{r4, pc}
    eedc:	6841      	ldr	r1, [r0, #4]
    eede:	f891 20a5 	ldrb.w	r2, [r1, #165]	; 0xa5
    eee2:	2a10      	cmp	r2, #16
    eee4:	d001      	beq.n	eeea <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xee>
    eee6:	2002      	movs	r0, #2
    eee8:	4770      	bx	lr
    eeea:	2200      	movs	r2, #0
    eeec:	f881 20aa 	strb.w	r2, [r1, #170]	; 0xaa
    eef0:	6840      	ldr	r0, [r0, #4]
    eef2:	2113      	movs	r1, #19
    eef4:	f880 10a5 	strb.w	r1, [r0, #165]	; 0xa5
    eef8:	4610      	mov	r0, r2
    eefa:	4770      	bx	lr
    eefc:	b510      	push	{r4, lr}
    eefe:	4604      	mov	r4, r0
    ef00:	6840      	ldr	r0, [r0, #4]
    ef02:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    ef06:	2917      	cmp	r1, #23
    ef08:	d001      	beq.n	ef0e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x112>
    ef0a:	2002      	movs	r0, #2
    ef0c:	bd10      	pop	{r4, pc}
    ef0e:	f500 7388 	add.w	r3, r0, #272	; 0x110
    ef12:	f200 2193 	addw	r1, r0, #659	; 0x293
    ef16:	2200      	movs	r2, #0
    ef18:	f200 2083 	addw	r0, r0, #643	; 0x283
    ef1c:	f7fe fd89 	bl	da32 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    ef20:	6862      	ldr	r2, [r4, #4]
    ef22:	2000      	movs	r0, #0
    ef24:	e9c2 0040 	strd	r0, r0, [r2, #256]	; 0x100
    ef28:	6861      	ldr	r1, [r4, #4]
    ef2a:	2001      	movs	r0, #1
    ef2c:	f881 00aa 	strb.w	r0, [r1, #170]	; 0xaa
    ef30:	6861      	ldr	r1, [r4, #4]
    ef32:	2019      	movs	r0, #25
    ef34:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    ef38:	2000      	movs	r0, #0
    ef3a:	bd10      	pop	{r4, pc}
    ef3c:	b510      	push	{r4, lr}
    ef3e:	4604      	mov	r4, r0
    ef40:	6840      	ldr	r0, [r0, #4]
    ef42:	2300      	movs	r3, #0
    ef44:	4619      	mov	r1, r3
    ef46:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    ef4a:	3088      	adds	r0, #136	; 0x88
    ef4c:	f7fe fdd6 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ef50:	b120      	cbz	r0, ef5c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x160>
    ef52:	6861      	ldr	r1, [r4, #4]
    ef54:	200b      	movs	r0, #11
    ef56:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    ef5a:	bd10      	pop	{r4, pc}
    ef5c:	f240 7156 	movw	r1, #1878	; 0x756
    ef60:	2036      	movs	r0, #54	; 0x36
    ef62:	f7f1 fd7f 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ef66:	b510      	push	{r4, lr}
    ef68:	4604      	mov	r4, r0
    ef6a:	6840      	ldr	r0, [r0, #4]
    ef6c:	2300      	movs	r3, #0
    ef6e:	4619      	mov	r1, r3
    ef70:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    ef74:	3088      	adds	r0, #136	; 0x88
    ef76:	f7fe fdc1 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ef7a:	b120      	cbz	r0, ef86 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x18a>
    ef7c:	6861      	ldr	r1, [r4, #4]
    ef7e:	200d      	movs	r0, #13
    ef80:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    ef84:	bd10      	pop	{r4, pc}
    ef86:	f240 715c 	movw	r1, #1884	; 0x75c
    ef8a:	2036      	movs	r0, #54	; 0x36
    ef8c:	f7f1 fd6a 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ef90:	b510      	push	{r4, lr}
    ef92:	4604      	mov	r4, r0
    ef94:	6840      	ldr	r0, [r0, #4]
    ef96:	2300      	movs	r3, #0
    ef98:	4619      	mov	r1, r3
    ef9a:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    ef9e:	3088      	adds	r0, #136	; 0x88
    efa0:	f7fe fdac 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    efa4:	b918      	cbnz	r0, efae <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1b2>
    efa6:	6860      	ldr	r0, [r4, #4]
    efa8:	f890 00e6 	ldrb.w	r0, [r0, #230]	; 0xe6
    efac:	b140      	cbz	r0, efc0 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c4>
    efae:	6861      	ldr	r1, [r4, #4]
    efb0:	2001      	movs	r0, #1
    efb2:	f881 00e5 	strb.w	r0, [r1, #229]	; 0xe5
    efb6:	6861      	ldr	r1, [r4, #4]
    efb8:	2014      	movs	r0, #20
    efba:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    efbe:	bd10      	pop	{r4, pc}
    efc0:	f240 7171 	movw	r1, #1905	; 0x771
    efc4:	2036      	movs	r0, #54	; 0x36
    efc6:	f7f1 fd4d 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    efca:	f7ff bb03 	b.w	e5d4 <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY>
    efce:	b510      	push	{r4, lr}
    efd0:	4604      	mov	r4, r0
    efd2:	6840      	ldr	r0, [r0, #4]
    efd4:	2300      	movs	r3, #0
    efd6:	4619      	mov	r1, r3
    efd8:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    efdc:	3088      	adds	r0, #136	; 0x88
    efde:	f7fe fd8d 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    efe2:	b120      	cbz	r0, efee <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1f2>
    efe4:	6861      	ldr	r1, [r4, #4]
    efe6:	201d      	movs	r0, #29
    efe8:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    efec:	bd10      	pop	{r4, pc}
    efee:	f240 7192 	movw	r1, #1938	; 0x792
    eff2:	2036      	movs	r0, #54	; 0x36
    eff4:	f7f1 fd36 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eff8:	b510      	push	{r4, lr}
    effa:	4604      	mov	r4, r0
    effc:	6840      	ldr	r0, [r0, #4]
    effe:	2300      	movs	r3, #0
    f000:	4619      	mov	r1, r3
    f002:	f890 20a6 	ldrb.w	r2, [r0, #166]	; 0xa6
    f006:	3088      	adds	r0, #136	; 0x88
    f008:	f7fe fd78 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f00c:	b120      	cbz	r0, f018 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x21c>
    f00e:	6861      	ldr	r1, [r4, #4]
    f010:	2000      	movs	r0, #0
    f012:	f881 00e4 	strb.w	r0, [r1, #228]	; 0xe4
    f016:	bd10      	pop	{r4, pc}
    f018:	f240 7199 	movw	r1, #1945	; 0x799
    f01c:	2036      	movs	r0, #54	; 0x36
    f01e:	f7f1 fd21 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f022:	f7ff bae9 	b.w	e5f8 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY>
    f026:	b510      	push	{r4, lr}
    f028:	4604      	mov	r4, r0
    f02a:	6840      	ldr	r0, [r0, #4]
    f02c:	2300      	movs	r3, #0
    f02e:	4619      	mov	r1, r3
    f030:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    f034:	3088      	adds	r0, #136	; 0x88
    f036:	f7fe fd61 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f03a:	b120      	cbz	r0, f046 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x24a>
    f03c:	6861      	ldr	r1, [r4, #4]
    f03e:	2005      	movs	r0, #5
    f040:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    f044:	bd10      	pop	{r4, pc}
    f046:	f240 7185 	movw	r1, #1925	; 0x785
    f04a:	2036      	movs	r0, #54	; 0x36
    f04c:	f7f1 fd0a 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f050:	6840      	ldr	r0, [r0, #4]
    f052:	2100      	movs	r1, #0
    f054:	f880 10e4 	strb.w	r1, [r0, #228]	; 0xe4
    f058:	4770      	bx	lr
    f05a:	b510      	push	{r4, lr}
    f05c:	4604      	mov	r4, r0
    f05e:	6840      	ldr	r0, [r0, #4]
    f060:	2300      	movs	r3, #0
    f062:	4619      	mov	r1, r3
    f064:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    f068:	3088      	adds	r0, #136	; 0x88
    f06a:	f7fe fd47 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f06e:	b140      	cbz	r0, f082 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x286>
    f070:	6861      	ldr	r1, [r4, #4]
    f072:	2001      	movs	r0, #1
    f074:	f881 00e5 	strb.w	r0, [r1, #229]	; 0xe5
    f078:	6861      	ldr	r1, [r4, #4]
    f07a:	2010      	movs	r0, #16
    f07c:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    f080:	bd10      	pop	{r4, pc}
    f082:	f240 7162 	movw	r1, #1890	; 0x762
    f086:	2036      	movs	r0, #54	; 0x36
    f088:	f7f1 fcec 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f08c:	b510      	push	{r4, lr}
    f08e:	6841      	ldr	r1, [r0, #4]
    f090:	f891 20a5 	ldrb.w	r2, [r1, #165]	; 0xa5
    f094:	2a13      	cmp	r2, #19
    f096:	d004      	beq.n	f0a2 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2a6>
    f098:	f240 716a 	movw	r1, #1898	; 0x76a
    f09c:	2036      	movs	r0, #54	; 0x36
    f09e:	f7f1 fce1 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f0a2:	2201      	movs	r2, #1
    f0a4:	f881 20e6 	strb.w	r2, [r1, #230]	; 0xe6
    f0a8:	6840      	ldr	r0, [r0, #4]
    f0aa:	2112      	movs	r1, #18
    f0ac:	f880 10a5 	strb.w	r1, [r0, #165]	; 0xa5
    f0b0:	bd10      	pop	{r4, pc}
    f0b2:	b510      	push	{r4, lr}
    f0b4:	4604      	mov	r4, r0
    f0b6:	6840      	ldr	r0, [r0, #4]
    f0b8:	2300      	movs	r3, #0
    f0ba:	4619      	mov	r1, r3
    f0bc:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    f0c0:	3088      	adds	r0, #136	; 0x88
    f0c2:	f7fe fd1b 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f0c6:	b120      	cbz	r0, f0d2 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2d6>
    f0c8:	6861      	ldr	r1, [r4, #4]
    f0ca:	2020      	movs	r0, #32
    f0cc:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    f0d0:	bd10      	pop	{r4, pc}
    f0d2:	f240 71a2 	movw	r1, #1954	; 0x7a2
    f0d6:	2036      	movs	r0, #54	; 0x36
    f0d8:	f7f1 fcc4 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f0dc:	b570      	push	{r4, r5, r6, lr}
    f0de:	6841      	ldr	r1, [r0, #4]
    f0e0:	4604      	mov	r4, r0
    f0e2:	f891 0262 	ldrb.w	r0, [r1, #610]	; 0x262
    f0e6:	b910      	cbnz	r0, f0ee <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2f2>
    f0e8:	f891 0263 	ldrb.w	r0, [r1, #611]	; 0x263
    f0ec:	b178      	cbz	r0, f10e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x312>
    f0ee:	2000      	movs	r0, #0
    f0f0:	f891 30a6 	ldrb.w	r3, [r1, #166]	; 0xa6
    f0f4:	2225      	movs	r2, #37	; 0x25
    f0f6:	2500      	movs	r5, #0
    f0f8:	2b22      	cmp	r3, #34	; 0x22
    f0fa:	d00a      	beq.n	f112 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x316>
    f0fc:	f891 30a5 	ldrb.w	r3, [r1, #165]	; 0xa5
    f100:	2b24      	cmp	r3, #36	; 0x24
    f102:	d01b      	beq.n	f13c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x340>
    f104:	f240 71ce 	movw	r1, #1998	; 0x7ce
    f108:	2036      	movs	r0, #54	; 0x36
    f10a:	f7f1 fcab 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f10e:	2001      	movs	r0, #1
    f110:	e7ee      	b.n	f0f0 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2f4>
    f112:	b168      	cbz	r0, f130 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x334>
    f114:	f881 50a6 	strb.w	r5, [r1, #166]	; 0xa6
    f118:	6860      	ldr	r0, [r4, #4]
    f11a:	f890 0144 	ldrb.w	r0, [r0, #324]	; 0x144
    f11e:	2801      	cmp	r0, #1
    f120:	d102      	bne.n	f128 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x32c>
    f122:	2000      	movs	r0, #0
    f124:	f7f7 f9a0 	bl	6468 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd9c>
    f128:	6860      	ldr	r0, [r4, #4]
    f12a:	f880 5144 	strb.w	r5, [r0, #324]	; 0x144
    f12e:	e001      	b.n	f134 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x338>
    f130:	f881 20a6 	strb.w	r2, [r1, #166]	; 0xa6
    f134:	6860      	ldr	r0, [r4, #4]
    f136:	f880 50e4 	strb.w	r5, [r0, #228]	; 0xe4
    f13a:	bd70      	pop	{r4, r5, r6, pc}
    f13c:	b128      	cbz	r0, f14a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x34e>
    f13e:	f881 50a5 	strb.w	r5, [r1, #165]	; 0xa5
    f142:	2000      	movs	r0, #0
    f144:	f7f7 f990 	bl	6468 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd9c>
    f148:	e001      	b.n	f14e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x352>
    f14a:	f881 20a5 	strb.w	r2, [r1, #165]	; 0xa5
    f14e:	6860      	ldr	r0, [r4, #4]
    f150:	f880 50e0 	strb.w	r5, [r0, #224]	; 0xe0
    f154:	bd70      	pop	{r4, r5, r6, pc}
    f156:	6842      	ldr	r2, [r0, #4]
    f158:	2100      	movs	r1, #0
    f15a:	f892 3130 	ldrb.w	r3, [r2, #304]	; 0x130
    f15e:	b12b      	cbz	r3, f16c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x370>
    f160:	f882 10a5 	strb.w	r1, [r2, #165]	; 0xa5
    f164:	6840      	ldr	r0, [r0, #4]
    f166:	f880 10e0 	strb.w	r1, [r0, #224]	; 0xe0
    f16a:	4770      	bx	lr
    f16c:	f882 10a6 	strb.w	r1, [r2, #166]	; 0xa6
    f170:	6840      	ldr	r0, [r0, #4]
    f172:	f880 10e4 	strb.w	r1, [r0, #228]	; 0xe4
    f176:	4770      	bx	lr
    f178:	b510      	push	{r4, lr}
    f17a:	6840      	ldr	r0, [r0, #4]
    f17c:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    f180:	2919      	cmp	r1, #25
    f182:	d004      	beq.n	f18e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x392>
    f184:	f240 717a 	movw	r1, #1914	; 0x77a
    f188:	2036      	movs	r0, #54	; 0x36
    f18a:	f7f1 fc6b 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f18e:	211b      	movs	r1, #27
    f190:	f880 10a5 	strb.w	r1, [r0, #165]	; 0xa5
    f194:	bd10      	pop	{r4, pc}
    f196:	b510      	push	{r4, lr}
    f198:	4604      	mov	r4, r0
    f19a:	6840      	ldr	r0, [r0, #4]
    f19c:	2300      	movs	r3, #0
    f19e:	2101      	movs	r1, #1
    f1a0:	f890 20a7 	ldrb.w	r2, [r0, #167]	; 0xa7
    f1a4:	3088      	adds	r0, #136	; 0x88
    f1a6:	f7fe fca9 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f1aa:	2800      	cmp	r0, #0
    f1ac:	d10a      	bne.n	f1c4 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x3c8>
    f1ae:	6861      	ldr	r1, [r4, #4]
    f1b0:	2007      	movs	r0, #7
    f1b2:	f881 00a7 	strb.w	r0, [r1, #167]	; 0xa7
    f1b6:	6861      	ldr	r1, [r4, #4]
    f1b8:	2000      	movs	r0, #0
    f1ba:	f881 00e0 	strb.w	r0, [r1, #224]	; 0xe0
    f1be:	6861      	ldr	r1, [r4, #4]
    f1c0:	f881 00e4 	strb.w	r0, [r1, #228]	; 0xe4
    f1c4:	bd10      	pop	{r4, pc}
    f1c6:	b570      	push	{r4, r5, r6, lr}
    f1c8:	4604      	mov	r4, r0
    f1ca:	6840      	ldr	r0, [r0, #4]
    f1cc:	2300      	movs	r3, #0
    f1ce:	4619      	mov	r1, r3
    f1d0:	f890 20a6 	ldrb.w	r2, [r0, #166]	; 0xa6
    f1d4:	3088      	adds	r0, #136	; 0x88
    f1d6:	f7fe fc91 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f1da:	2500      	movs	r5, #0
    f1dc:	b110      	cbz	r0, f1e4 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x3e8>
    f1de:	6860      	ldr	r0, [r4, #4]
    f1e0:	f880 50e4 	strb.w	r5, [r0, #228]	; 0xe4
    f1e4:	6860      	ldr	r0, [r4, #4]
    f1e6:	2300      	movs	r3, #0
    f1e8:	4619      	mov	r1, r3
    f1ea:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    f1ee:	3088      	adds	r0, #136	; 0x88
    f1f0:	f7fe fc84 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f1f4:	2800      	cmp	r0, #0
    f1f6:	d002      	beq.n	f1fe <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x402>
    f1f8:	6860      	ldr	r0, [r4, #4]
    f1fa:	f880 50e0 	strb.w	r5, [r0, #224]	; 0xe0
    f1fe:	bd70      	pop	{r4, r5, r6, pc}
    f200:	f7ff ba46 	b.w	e690 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q>
    f204:	b510      	push	{r4, lr}
    f206:	f890 10ab 	ldrb.w	r1, [r0, #171]	; 0xab
    f20a:	b941      	cbnz	r1, f21e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x422>
    f20c:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    f210:	2300      	movs	r3, #0
    f212:	2106      	movs	r1, #6
    f214:	3088      	adds	r0, #136	; 0x88
    f216:	f7fe fc71 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f21a:	2800      	cmp	r0, #0
    f21c:	d000      	beq.n	f220 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x424>
    f21e:	2001      	movs	r0, #1
    f220:	bd10      	pop	{r4, pc}

0000f222 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>:
    f222:	b510      	push	{r4, lr}
    f224:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
    f228:	1ac3      	subs	r3, r0, r3
    f22a:	eb61 0104 	sbc.w	r1, r1, r4
    f22e:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
    f232:	17e0      	asrs	r0, r4, #31
    f234:	1ae4      	subs	r4, r4, r3
    f236:	4188      	sbcs	r0, r1
    f238:	da05      	bge.n	f246 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x24>
    f23a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    f23e:	1a18      	subs	r0, r3, r0
    f240:	f171 0000 	sbcs.w	r0, r1, #0
    f244:	db03      	blt.n	f24e <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x2c>
    f246:	21b0      	movs	r1, #176	; 0xb0
    f248:	2037      	movs	r0, #55	; 0x37
    f24a:	f7f1 fc0b 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f24e:	2900      	cmp	r1, #0
    f250:	da00      	bge.n	f254 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x32>
    f252:	425b      	negs	r3, r3
    f254:	fbb3 f0f2 	udiv	r0, r3, r2
    f258:	fb02 3010 	mls	r0, r2, r0, r3
    f25c:	2900      	cmp	r1, #0
    f25e:	da02      	bge.n	f266 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x44>
    f260:	2800      	cmp	r0, #0
    f262:	d000      	beq.n	f266 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x44>
    f264:	1a10      	subs	r0, r2, r0
    f266:	bd10      	pop	{r4, pc}
    f268:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f26c:	f001 0107 	and.w	r1, r1, #7
    f270:	7800      	ldrb	r0, [r0, #0]
    f272:	40c8      	lsrs	r0, r1
    f274:	f000 0001 	and.w	r0, r0, #1
    f278:	4770      	bx	lr

0000f27a <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ>:
    f27a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f27e:	6856      	ldr	r6, [r2, #4]
    f280:	460c      	mov	r4, r1
    f282:	f506 759c 	add.w	r5, r6, #312	; 0x138
    f286:	f106 0788 	add.w	r7, r6, #136	; 0x88
    f28a:	2823      	cmp	r0, #35	; 0x23
    f28c:	d008      	beq.n	f2a0 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x26>
    f28e:	2824      	cmp	r0, #36	; 0x24
    f290:	d014      	beq.n	f2bc <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x42>
    f292:	2825      	cmp	r0, #37	; 0x25
    f294:	d02a      	beq.n	f2ec <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x72>
    f296:	f44f 718d 	mov.w	r1, #282	; 0x11a
    f29a:	2078      	movs	r0, #120	; 0x78
    f29c:	f7f1 fbe2 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f2a0:	7de8      	ldrb	r0, [r5, #23]
    f2a2:	f000 f8d6 	bl	f452 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x50>
    f2a6:	7de9      	ldrb	r1, [r5, #23]
    f2a8:	7121      	strb	r1, [r4, #4]
    f2aa:	7e29      	ldrb	r1, [r5, #24]
    f2ac:	eb06 0040 	add.w	r0, r6, r0, lsl #1
    f2b0:	7161      	strb	r1, [r4, #5]
    f2b2:	f890 0079 	ldrb.w	r0, [r0, #121]	; 0x79
    f2b6:	71a0      	strb	r0, [r4, #6]
    f2b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f2bc:	7d28      	ldrb	r0, [r5, #20]
    f2be:	f000 f8c8 	bl	f452 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x50>
    f2c2:	eb06 0640 	add.w	r6, r6, r0, lsl #1
    f2c6:	7f78      	ldrb	r0, [r7, #29]
    f2c8:	3678      	adds	r6, #120	; 0x78
    f2ca:	2828      	cmp	r0, #40	; 0x28
    f2cc:	d00c      	beq.n	f2e8 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x6e>
    f2ce:	68b8      	ldr	r0, [r7, #8]
    f2d0:	f7f3 fe7e 	bl	2fd0 <sym_DEQHYPJXYJ4WT7NTOYVXPSGPFEINKR4XQZSCDJY>
    f2d4:	7831      	ldrb	r1, [r6, #0]
    f2d6:	7121      	strb	r1, [r4, #4]
    f2d8:	7d69      	ldrb	r1, [r5, #21]
    f2da:	7161      	strb	r1, [r4, #5]
    f2dc:	7871      	ldrb	r1, [r6, #1]
    f2de:	71a1      	strb	r1, [r4, #6]
    f2e0:	71e0      	strb	r0, [r4, #7]
    f2e2:	2000      	movs	r0, #0
    f2e4:	75a8      	strb	r0, [r5, #22]
    f2e6:	e7e7      	b.n	f2b8 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x3e>
    f2e8:	20ff      	movs	r0, #255	; 0xff
    f2ea:	e7f3      	b.n	f2d4 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x5a>
    f2ec:	7d28      	ldrb	r0, [r5, #20]
    f2ee:	f000 f8b0 	bl	f452 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x50>
    f2f2:	eb06 0040 	add.w	r0, r6, r0, lsl #1
    f2f6:	7d29      	ldrb	r1, [r5, #20]
    f2f8:	7121      	strb	r1, [r4, #4]
    f2fa:	f810 1f78 	ldrb.w	r1, [r0, #120]!
    f2fe:	7161      	strb	r1, [r4, #5]
    f300:	7d69      	ldrb	r1, [r5, #21]
    f302:	71a1      	strb	r1, [r4, #6]
    f304:	7840      	ldrb	r0, [r0, #1]
    f306:	71e0      	strb	r0, [r4, #7]
    f308:	e7d6      	b.n	f2b8 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x3e>

0000f30a <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y>:
    f30a:	b510      	push	{r4, lr}
    f30c:	2801      	cmp	r0, #1
    f30e:	d006      	beq.n	f31e <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y+0x14>
    f310:	2802      	cmp	r0, #2
    f312:	d006      	beq.n	f322 <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y+0x18>
    f314:	f240 2162 	movw	r1, #610	; 0x262
    f318:	2078      	movs	r0, #120	; 0x78
    f31a:	f7f1 fba3 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f31e:	2000      	movs	r0, #0
    f320:	bd10      	pop	{r4, pc}
    f322:	2001      	movs	r0, #1
    f324:	bd10      	pop	{r4, pc}

0000f326 <sym_LC25II2QNYO4QUC4WQAQXNPSFLYYHVIDWHXRWAA>:
    f326:	207f      	movs	r0, #127	; 0x7f
    f328:	f000 b8ad 	b.w	f486 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x84>

0000f32c <sym_6E7DB5DGCJDCKNJAQTLQVPITL6JXBGRB3SQGSDY>:
    f32c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    f330:	f000 b8a9 	b.w	f486 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x84>

0000f334 <sym_QIMK4SLEK3LSPZFVZAE765G6IOUSE5EWGSEHHUY>:
    f334:	b510      	push	{r4, lr}
    f336:	4604      	mov	r4, r0
    f338:	f7f8 fa6e 	bl	7818 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    f33c:	1e64      	subs	r4, r4, #1
    f33e:	b2e2      	uxtb	r2, r4
    f340:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f344:	f000 b86b 	b.w	f41e <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x1c>

0000f348 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I>:
    f348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f34c:	4607      	mov	r7, r0
    f34e:	461e      	mov	r6, r3
    f350:	4690      	mov	r8, r2
    f352:	460c      	mov	r4, r1
    f354:	4608      	mov	r0, r1
    f356:	f7ff ffed 	bl	f334 <sym_QIMK4SLEK3LSPZFVZAE765G6IOUSE5EWGSEHHUY>
    f35a:	b1f8      	cbz	r0, f39c <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x54>
    f35c:	687d      	ldr	r5, [r7, #4]
    f35e:	2121      	movs	r1, #33	; 0x21
    f360:	f105 00f6 	add.w	r0, r5, #246	; 0xf6
    f364:	3588      	adds	r5, #136	; 0x88
    f366:	f7ff ff7f 	bl	f268 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x46>
    f36a:	b1c8      	cbz	r0, f3a0 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x58>
    f36c:	1e64      	subs	r4, r4, #1
    f36e:	f8d5 1072 	ldr.w	r1, [r5, #114]	; 0x72
    f372:	f8d5 006e 	ldr.w	r0, [r5, #110]	; 0x6e
    f376:	b2e2      	uxtb	r2, r4
    f378:	f000 f851 	bl	f41e <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x1c>
    f37c:	b180      	cbz	r0, f3a0 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x58>
    f37e:	6878      	ldr	r0, [r7, #4]
    f380:	f890 1151 	ldrb.w	r1, [r0, #337]	; 0x151
    f384:	f88d 1000 	strb.w	r1, [sp]
    f388:	9900      	ldr	r1, [sp, #0]
    f38a:	9100      	str	r1, [sp, #0]
    f38c:	f89d 1000 	ldrb.w	r1, [sp]
    f390:	f200 104f 	addw	r0, r0, #335	; 0x14f
    f394:	b131      	cbz	r1, f3a4 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x5c>
    f396:	203a      	movs	r0, #58	; 0x3a
    f398:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f39c:	2011      	movs	r0, #17
    f39e:	e7fb      	b.n	f398 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x50>
    f3a0:	201a      	movs	r0, #26
    f3a2:	e7f9      	b.n	f398 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x50>
    f3a4:	1c81      	adds	r1, r0, #2
    f3a6:	700e      	strb	r6, [r1, #0]
    f3a8:	2101      	movs	r1, #1
    f3aa:	40a1      	lsls	r1, r4
    f3ac:	7001      	strb	r1, [r0, #0]
    f3ae:	f880 8001 	strb.w	r8, [r0, #1]
    f3b2:	2000      	movs	r0, #0
    f3b4:	e7f0      	b.n	f398 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x50>

0000f3b6 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>:
    f3b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f3ba:	460d      	mov	r5, r1
    f3bc:	4606      	mov	r6, r0
    f3be:	f7ff ffb2 	bl	f326 <sym_LC25II2QNYO4QUC4WQAQXNPSFLYYHVIDWHXRWAA>
    f3c2:	4607      	mov	r7, r0
    f3c4:	f7ff ffb2 	bl	f32c <sym_6E7DB5DGCJDCKNJAQTLQVPITL6JXBGRB3SQGSDY>
    f3c8:	2400      	movs	r4, #0
    f3ca:	4285      	cmp	r5, r0
    f3cc:	d100      	bne.n	f3d0 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x1a>
    f3ce:	2401      	movs	r4, #1
    f3d0:	42bd      	cmp	r5, r7
    f3d2:	d101      	bne.n	f3d8 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x22>
    f3d4:	f044 0402 	orr.w	r4, r4, #2
    f3d8:	f000 f834 	bl	f444 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x42>
    f3dc:	2200      	movs	r2, #0
    f3de:	4601      	mov	r1, r0
    f3e0:	2301      	movs	r3, #1
    f3e2:	fa03 f002 	lsl.w	r0, r3, r2
    f3e6:	4208      	tst	r0, r1
    f3e8:	d005      	beq.n	f3f6 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x40>
    f3ea:	eb06 0042 	add.w	r0, r6, r2, lsl #1
    f3ee:	f880 5079 	strb.w	r5, [r0, #121]	; 0x79
    f3f2:	f880 4078 	strb.w	r4, [r0, #120]	; 0x78
    f3f6:	1c52      	adds	r2, r2, #1
    f3f8:	b2d2      	uxtb	r2, r2
    f3fa:	2a02      	cmp	r2, #2
    f3fc:	d3f1      	bcc.n	f3e2 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x2c>
    f3fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f402 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY>:
    f402:	b510      	push	{r4, lr}
    f404:	4604      	mov	r4, r0
    f406:	4608      	mov	r0, r1
    f408:	f7ff ff7f 	bl	f30a <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y>
    f40c:	2802      	cmp	r0, #2
    f40e:	d205      	bcs.n	f41c <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x1a>
    f410:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    f414:	f890 0079 	ldrb.w	r0, [r0, #121]	; 0x79
    f418:	f884 006e 	strb.w	r0, [r4, #110]	; 0x6e
    f41c:	bd10      	pop	{r4, pc}
    f41e:	b510      	push	{r4, lr}
    f420:	4614      	mov	r4, r2
    f422:	4602      	mov	r2, r0
    f424:	2000      	movs	r0, #0
    f426:	4603      	mov	r3, r0
    f428:	2c02      	cmp	r4, #2
    f42a:	d205      	bcs.n	f438 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x36>
    f42c:	4610      	mov	r0, r2
    f42e:	f000 f821 	bl	f474 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x72>
    f432:	2101      	movs	r1, #1
    f434:	40a1      	lsls	r1, r4
    f436:	b2cb      	uxtb	r3, r1
    f438:	4203      	tst	r3, r0
    f43a:	d001      	beq.n	f440 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x3e>
    f43c:	2001      	movs	r0, #1
    f43e:	bd10      	pop	{r4, pc}
    f440:	2000      	movs	r0, #0
    f442:	bd10      	pop	{r4, pc}
    f444:	b510      	push	{r4, lr}
    f446:	f7f8 f9e7 	bl	7818 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    f44a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f44e:	f000 b811 	b.w	f474 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x72>
    f452:	4601      	mov	r1, r0
    f454:	b510      	push	{r4, lr}
    f456:	2000      	movs	r0, #0
    f458:	2301      	movs	r3, #1
    f45a:	fa03 f200 	lsl.w	r2, r3, r0
    f45e:	420a      	tst	r2, r1
    f460:	d107      	bne.n	f472 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x70>
    f462:	1c40      	adds	r0, r0, #1
    f464:	b2c0      	uxtb	r0, r0
    f466:	2802      	cmp	r0, #2
    f468:	d3f7      	bcc.n	f45a <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x58>
    f46a:	213c      	movs	r1, #60	; 0x3c
    f46c:	2078      	movs	r0, #120	; 0x78
    f46e:	f7f1 faf9 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f472:	bd10      	pop	{r4, pc}
    f474:	0a00      	lsrs	r0, r0, #8
    f476:	2201      	movs	r2, #1
    f478:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
    f47c:	07c0      	lsls	r0, r0, #31
    f47e:	d000      	beq.n	f482 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x80>
    f480:	2203      	movs	r2, #3
    f482:	4610      	mov	r0, r2
    f484:	4770      	bx	lr
    f486:	b508      	push	{r3, lr}
    f488:	2301      	movs	r3, #1
    f48a:	f640 1288 	movw	r2, #2440	; 0x988
    f48e:	4669      	mov	r1, sp
    f490:	f7fd f922 	bl	c6d8 <mpsl_fem_tx_power_split>
    f494:	bd08      	pop	{r3, pc}
    f496:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f49a:	f001 0107 	and.w	r1, r1, #7
    f49e:	7800      	ldrb	r0, [r0, #0]
    f4a0:	40c8      	lsrs	r0, r1
    f4a2:	f000 0001 	and.w	r0, r0, #1
    f4a6:	4770      	bx	lr
    f4a8:	b118      	cbz	r0, f4b2 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0xb0>
    f4aa:	2802      	cmp	r0, #2
    f4ac:	d001      	beq.n	f4b2 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0xb0>
    f4ae:	2001      	movs	r0, #1
    f4b0:	4770      	bx	lr
    f4b2:	2000      	movs	r0, #0
    f4b4:	4770      	bx	lr

0000f4b6 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
    f4b6:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    f4b8:	7881      	ldrb	r1, [r0, #2]
    f4ba:	2500      	movs	r5, #0
    f4bc:	4604      	mov	r4, r0
    f4be:	291a      	cmp	r1, #26
    f4c0:	d024      	beq.n	f50c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x56>
    f4c2:	dc0e      	bgt.n	f4e2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2c>
    f4c4:	2916      	cmp	r1, #22
    f4c6:	d22b      	bcs.n	f520 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f4c8:	e8df f001 	tbb	[pc, r1]
    f4cc:	2a2a2a2a 	.word	0x2a2a2a2a
    f4d0:	2a2a202a 	.word	0x2a2a202a
    f4d4:	2a2a2a2a 	.word	0x2a2a2a2a
    f4d8:	2a2a2a2a 	.word	0x2a2a2a2a
    f4dc:	202a2a2a 	.word	0x202a2a2a
    f4e0:	2020      	.short	0x2020
    f4e2:	292a      	cmp	r1, #42	; 0x2a
    f4e4:	d01c      	beq.n	f520 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f4e6:	dc0b      	bgt.n	f500 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x4a>
    f4e8:	f1a1 011e 	sub.w	r1, r1, #30
    f4ec:	290c      	cmp	r1, #12
    f4ee:	d217      	bcs.n	f520 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f4f0:	e8df f001 	tbb	[pc, r1]
    f4f4:	16161616 	.word	0x16161616
    f4f8:	16161616 	.word	0x16161616
    f4fc:	0c161616 	.word	0x0c161616
    f500:	393a      	subs	r1, #58	; 0x3a
    f502:	2902      	cmp	r1, #2
    f504:	d20c      	bcs.n	f520 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f506:	e8df f001 	tbb	[pc, r1]
    f50a:	010b      	.short	0x010b
    f50c:	8820      	ldrh	r0, [r4, #0]
    f50e:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
    f512:	d205      	bcs.n	f520 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f514:	4669      	mov	r1, sp
    f516:	f7fe fac8 	bl	daaa <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f51a:	b118      	cbz	r0, f524 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6e>
    f51c:	2002      	movs	r0, #2
    f51e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f520:	2012      	movs	r0, #18
    f522:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f524:	9901      	ldr	r1, [sp, #4]
    f526:	f891 0138 	ldrb.w	r0, [r1, #312]	; 0x138
    f52a:	f88d 0008 	strb.w	r0, [sp, #8]
    f52e:	9802      	ldr	r0, [sp, #8]
    f530:	9002      	str	r0, [sp, #8]
    f532:	f89d 0008 	ldrb.w	r0, [sp, #8]
    f536:	f501 719c 	add.w	r1, r1, #312	; 0x138
    f53a:	b108      	cbz	r0, f540 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x8a>
    f53c:	200c      	movs	r0, #12
    f53e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f540:	78a0      	ldrb	r0, [r4, #2]
    f542:	7048      	strb	r0, [r1, #1]
    f544:	20ff      	movs	r0, #255	; 0xff
    f546:	7008      	strb	r0, [r1, #0]
    f548:	4628      	mov	r0, r5
    f54a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000f54c <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    f54c:	b510      	push	{r4, lr}
    f54e:	4604      	mov	r4, r0
    f550:	f000 fdac 	bl	100ac <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x470>
    f554:	b108      	cbz	r0, f55a <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    f556:	200c      	movs	r0, #12
    f558:	bd10      	pop	{r4, pc}
    f55a:	7820      	ldrb	r0, [r4, #0]
    f55c:	b118      	cbz	r0, f566 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    f55e:	2801      	cmp	r0, #1
    f560:	d001      	beq.n	f566 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    f562:	2012      	movs	r0, #18
    f564:	bd10      	pop	{r4, pc}
    f566:	f7ff ff9f 	bl	f4a8 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0xa6>
    f56a:	1c61      	adds	r1, r4, #1
    f56c:	f7f2 fec2 	bl	22f4 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
    f570:	b108      	cbz	r0, f576 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
    f572:	2000      	movs	r0, #0
    f574:	bd10      	pop	{r4, pc}
    f576:	2007      	movs	r0, #7
    f578:	bd10      	pop	{r4, pc}

0000f57a <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    f57a:	b510      	push	{r4, lr}
    f57c:	f000 fd96 	bl	100ac <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x470>
    f580:	b108      	cbz	r0, f586 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    f582:	200c      	movs	r0, #12
    f584:	bd10      	pop	{r4, pc}
    f586:	f7f2 fedd 	bl	2344 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
    f58a:	2000      	movs	r0, #0
    f58c:	bd10      	pop	{r4, pc}

0000f58e <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>:
    f58e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f592:	4605      	mov	r5, r0
    f594:	f000 fb2f 	bl	fbf6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>
    f598:	2800      	cmp	r0, #0
    f59a:	d112      	bne.n	f5c2 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    f59c:	8828      	ldrh	r0, [r5, #0]
    f59e:	2100      	movs	r1, #0
    f5a0:	f7fe f8ea 	bl	d778 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f5a4:	0004      	movs	r4, r0
    f5a6:	d00e      	beq.n	f5c6 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x38>
    f5a8:	f000 fd40 	bl	1002c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3f0>
    f5ac:	b158      	cbz	r0, f5c6 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x38>
    f5ae:	f894 0264 	ldrb.w	r0, [r4, #612]	; 0x264
    f5b2:	f88d 0000 	strb.w	r0, [sp]
    f5b6:	9800      	ldr	r0, [sp, #0]
    f5b8:	9000      	str	r0, [sp, #0]
    f5ba:	f89d 0000 	ldrb.w	r0, [sp]
    f5be:	b120      	cbz	r0, f5ca <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x3c>
    f5c0:	203a      	movs	r0, #58	; 0x3a
    f5c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f5c6:	2002      	movs	r0, #2
    f5c8:	e7fb      	b.n	f5c2 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    f5ca:	f04f 0800 	mov.w	r8, #0
    f5ce:	88a8      	ldrh	r0, [r5, #4]
    f5d0:	f7fe fa77 	bl	dac2 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    f5d4:	4607      	mov	r7, r0
    f5d6:	4601      	mov	r1, r0
    f5d8:	2005      	movs	r0, #5
    f5da:	f7fe fbf4 	bl	ddc6 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    f5de:	4606      	mov	r6, r0
    f5e0:	4639      	mov	r1, r7
    f5e2:	2008      	movs	r0, #8
    f5e4:	f7fe fbef 	bl	ddc6 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    f5e8:	42b0      	cmp	r0, r6
    f5ea:	d301      	bcc.n	f5f0 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x62>
    f5ec:	42be      	cmp	r6, r7
    f5ee:	d301      	bcc.n	f5f4 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x66>
    f5f0:	2012      	movs	r0, #18
    f5f2:	e7e6      	b.n	f5c2 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    f5f4:	f8a4 6268 	strh.w	r6, [r4, #616]	; 0x268
    f5f8:	e9c4 879b 	strd	r8, r7, [r4, #620]	; 0x26c
    f5fc:	88e8      	ldrh	r0, [r5, #6]
    f5fe:	f8a4 0274 	strh.w	r0, [r4, #628]	; 0x274
    f602:	8928      	ldrh	r0, [r5, #8]
    f604:	f8a4 0276 	strh.w	r0, [r4, #630]	; 0x276
    f608:	f504 7419 	add.w	r4, r4, #612	; 0x264
    f60c:	20ff      	movs	r0, #255	; 0xff
    f60e:	7020      	strb	r0, [r4, #0]
    f610:	2000      	movs	r0, #0
    f612:	e7d6      	b.n	f5c2 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>

0000f614 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y>:
    f614:	b508      	push	{r3, lr}
    f616:	f7f5 f94b 	bl	48b0 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
    f61a:	2805      	cmp	r0, #5
    f61c:	d001      	beq.n	f622 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0xe>
    f61e:	200c      	movs	r0, #12
    f620:	bd08      	pop	{r3, pc}
    f622:	4668      	mov	r0, sp
    f624:	f7f5 f8ca 	bl	47bc <sym_GM7QU7LP6UH4DZPOIR7WHUEKZSOPEOATHYRRTQI>
    f628:	2800      	cmp	r0, #0
    f62a:	d1f9      	bne.n	f620 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0xc>
    f62c:	f7f3 fe90 	bl	3350 <sym_MSYMIWR3PI6HXHUAZX2P7HGFCTCK3HSW5N3BC2A>
    f630:	2000      	movs	r0, #0
    f632:	bd08      	pop	{r3, pc}

0000f634 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
    f634:	b510      	push	{r4, lr}
    f636:	460b      	mov	r3, r1
    f638:	2201      	movs	r2, #1
    f63a:	f100 0110 	add.w	r1, r0, #16
    f63e:	f7fe f9f8 	bl	da32 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    f642:	2000      	movs	r0, #0
    f644:	bd10      	pop	{r4, pc}

0000f646 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
    f646:	b510      	push	{r4, lr}
    f648:	2108      	movs	r1, #8
    f64a:	f7f1 faab 	bl	ba4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    f64e:	2000      	movs	r0, #0
    f650:	bd10      	pop	{r4, pc}

0000f652 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
    f652:	21fb      	movs	r1, #251	; 0xfb
    f654:	8001      	strh	r1, [r0, #0]
    f656:	f640 0248 	movw	r2, #2120	; 0x848
    f65a:	8042      	strh	r2, [r0, #2]
    f65c:	8081      	strh	r1, [r0, #4]
    f65e:	80c2      	strh	r2, [r0, #6]
    f660:	2000      	movs	r0, #0
    f662:	4770      	bx	lr

0000f664 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
    f664:	b51c      	push	{r2, r3, r4, lr}
    f666:	8800      	ldrh	r0, [r0, #0]
    f668:	4669      	mov	r1, sp
    f66a:	f7fe fa1e 	bl	daaa <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f66e:	2800      	cmp	r0, #0
    f670:	d10c      	bne.n	f68c <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x28>
    f672:	9c01      	ldr	r4, [sp, #4]
    f674:	f89d 0000 	ldrb.w	r0, [sp]
    f678:	f504 749c 	add.w	r4, r4, #312	; 0x138
    f67c:	b918      	cbnz	r0, f686 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x22>
    f67e:	9801      	ldr	r0, [sp, #4]
    f680:	f000 fcd4 	bl	1002c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3f0>
    f684:	b118      	cbz	r0, f68e <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2a>
    f686:	7ce0      	ldrb	r0, [r4, #19]
    f688:	b118      	cbz	r0, f692 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2e>
    f68a:	203a      	movs	r0, #58	; 0x3a
    f68c:	bd1c      	pop	{r2, r3, r4, pc}
    f68e:	2002      	movs	r0, #2
    f690:	bd1c      	pop	{r2, r3, r4, pc}
    f692:	2001      	movs	r0, #1
    f694:	74e0      	strb	r0, [r4, #19]
    f696:	2000      	movs	r0, #0
    f698:	bd1c      	pop	{r2, r3, r4, pc}

0000f69a <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
    f69a:	b510      	push	{r4, lr}
    f69c:	4604      	mov	r4, r0
    f69e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    f6a2:	f000 fce4 	bl	1006e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x432>
    f6a6:	f7f2 ffdf 	bl	2668 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    f6aa:	7020      	strb	r0, [r4, #0]
    f6ac:	f000 fcbb 	bl	10026 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3ea>
    f6b0:	f7f2 ffda 	bl	2668 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    f6b4:	7060      	strb	r0, [r4, #1]
    f6b6:	2000      	movs	r0, #0
    f6b8:	bd10      	pop	{r4, pc}

0000f6ba <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
    f6ba:	2108      	movs	r1, #8
    f6bc:	7001      	strb	r1, [r0, #0]
    f6be:	2000      	movs	r0, #0
    f6c0:	4770      	bx	lr

0000f6c2 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
    f6c2:	b510      	push	{r4, lr}
    f6c4:	4604      	mov	r4, r0
    f6c6:	f000 fcf1 	bl	100ac <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x470>
    f6ca:	b108      	cbz	r0, f6d0 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
    f6cc:	200c      	movs	r0, #12
    f6ce:	bd10      	pop	{r4, pc}
    f6d0:	7820      	ldrb	r0, [r4, #0]
    f6d2:	b108      	cbz	r0, f6d8 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
    f6d4:	2801      	cmp	r0, #1
    f6d6:	d107      	bne.n	f6e8 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    f6d8:	f7ff fee6 	bl	f4a8 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0xa6>
    f6dc:	1c61      	adds	r1, r4, #1
    f6de:	f7fe f99d 	bl	da1c <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
    f6e2:	b108      	cbz	r0, f6e8 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    f6e4:	2000      	movs	r0, #0
    f6e6:	bd10      	pop	{r4, pc}
    f6e8:	2012      	movs	r0, #18
    f6ea:	bd10      	pop	{r4, pc}

0000f6ec <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
    f6ec:	b50e      	push	{r1, r2, r3, lr}
    f6ee:	8882      	ldrh	r2, [r0, #4]
    f6f0:	f244 2390 	movw	r3, #17040	; 0x4290
    f6f4:	429a      	cmp	r2, r3
    f6f6:	d901      	bls.n	f6fc <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x10>
    f6f8:	2012      	movs	r0, #18
    f6fa:	bd0e      	pop	{r1, r2, r3, pc}
    f6fc:	f640 0348 	movw	r3, #2120	; 0x848
    f700:	429a      	cmp	r2, r3
    f702:	d300      	bcc.n	f706 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
    f704:	461a      	mov	r2, r3
    f706:	8803      	ldrh	r3, [r0, #0]
    f708:	f8ad 3000 	strh.w	r3, [sp]
    f70c:	8843      	ldrh	r3, [r0, #2]
    f70e:	f8ad 3002 	strh.w	r3, [sp, #2]
    f712:	f8ad 2004 	strh.w	r2, [sp, #4]
    f716:	8843      	ldrh	r3, [r0, #2]
    f718:	f8ad 3006 	strh.w	r3, [sp, #6]
    f71c:	f8ad 2008 	strh.w	r2, [sp, #8]
    f720:	8800      	ldrh	r0, [r0, #0]
    f722:	8008      	strh	r0, [r1, #0]
    f724:	4668      	mov	r0, sp
    f726:	f7f7 ff57 	bl	75d8 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x35c>
    f72a:	bd0e      	pop	{r1, r2, r3, pc}

0000f72c <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
    f72c:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    f72e:	4604      	mov	r4, r0
    f730:	f10d 0007 	add.w	r0, sp, #7
    f734:	9000      	str	r0, [sp, #0]
    f736:	7922      	ldrb	r2, [r4, #4]
    f738:	78e1      	ldrb	r1, [r4, #3]
    f73a:	78a0      	ldrb	r0, [r4, #2]
    f73c:	f10d 0306 	add.w	r3, sp, #6
    f740:	f000 fc9d 	bl	1007e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x442>
    f744:	2800      	cmp	r0, #0
    f746:	d109      	bne.n	f75c <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x30>
    f748:	8820      	ldrh	r0, [r4, #0]
    f74a:	f8ad 0004 	strh.w	r0, [sp, #4]
    f74e:	f8b4 0005 	ldrh.w	r0, [r4, #5]
    f752:	f8ad 0008 	strh.w	r0, [sp, #8]
    f756:	a801      	add	r0, sp, #4
    f758:	f000 f970 	bl	fa3c <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
    f75c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000f75e <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
    f75e:	b510      	push	{r4, lr}
    f760:	4604      	mov	r4, r0
    f762:	2001      	movs	r0, #1
    f764:	f000 fa97 	bl	fc96 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x5a>
    f768:	b128      	cbz	r0, f776 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
    f76a:	4621      	mov	r1, r4
    f76c:	2001      	movs	r0, #1
    f76e:	f7f1 ff71 	bl	1654 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    f772:	2000      	movs	r0, #0
    f774:	bd10      	pop	{r4, pc}
    f776:	200c      	movs	r0, #12
    f778:	bd10      	pop	{r4, pc}

0000f77a <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ>:
    f77a:	b51c      	push	{r2, r3, r4, lr}
    f77c:	7801      	ldrb	r1, [r0, #0]
    f77e:	f88d 1000 	strb.w	r1, [sp]
    f782:	7840      	ldrb	r0, [r0, #1]
    f784:	f88d 0001 	strb.w	r0, [sp, #1]
    f788:	2000      	movs	r0, #0
    f78a:	f8ad 0002 	strh.w	r0, [sp, #2]
    f78e:	f8ad 0004 	strh.w	r0, [sp, #4]
    f792:	4601      	mov	r1, r0
    f794:	4668      	mov	r0, sp
    f796:	f000 face 	bl	fd36 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xfa>
    f79a:	2800      	cmp	r0, #0
    f79c:	d102      	bne.n	f7a4 <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ+0x2a>
    f79e:	4668      	mov	r0, sp
    f7a0:	f000 faa8 	bl	fcf4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb8>
    f7a4:	bd1c      	pop	{r2, r3, r4, pc}

0000f7a6 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA>:
    f7a6:	b500      	push	{lr}
    f7a8:	b087      	sub	sp, #28
    f7aa:	7941      	ldrb	r1, [r0, #5]
    f7ac:	f88d 1000 	strb.w	r1, [sp]
    f7b0:	7981      	ldrb	r1, [r0, #6]
    f7b2:	f88d 1001 	strb.w	r1, [sp, #1]
    f7b6:	2101      	movs	r1, #1
    f7b8:	f88d 1002 	strb.w	r1, [sp, #2]
    f7bc:	7801      	ldrb	r1, [r0, #0]
    f7be:	f88d 1003 	strb.w	r1, [sp, #3]
    f7c2:	f8b0 1001 	ldrh.w	r1, [r0, #1]
    f7c6:	f240 2271 	movw	r2, #625	; 0x271
    f7ca:	4351      	muls	r1, r2
    f7cc:	9102      	str	r1, [sp, #8]
    f7ce:	f8b0 0003 	ldrh.w	r0, [r0, #3]
    f7d2:	4350      	muls	r0, r2
    f7d4:	9004      	str	r0, [sp, #16]
    f7d6:	2007      	movs	r0, #7
    f7d8:	f88d 0018 	strb.w	r0, [sp, #24]
    f7dc:	2000      	movs	r0, #0
    f7de:	f88d 0019 	strb.w	r0, [sp, #25]
    f7e2:	9804      	ldr	r0, [sp, #16]
    f7e4:	f7f7 fdfe 	bl	73e4 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x168>
    f7e8:	b140      	cbz	r0, f7fc <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x56>
    f7ea:	9802      	ldr	r0, [sp, #8]
    f7ec:	f7f7 fdee 	bl	73cc <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x150>
    f7f0:	b120      	cbz	r0, f7fc <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x56>
    f7f2:	4668      	mov	r0, sp
    f7f4:	f7f7 fcc4 	bl	7180 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA>
    f7f8:	b007      	add	sp, #28
    f7fa:	bd00      	pop	{pc}
    f7fc:	2030      	movs	r0, #48	; 0x30
    f7fe:	e7fb      	b.n	f7f8 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x52>

0000f800 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ>:
    f800:	b570      	push	{r4, r5, r6, lr}
    f802:	4605      	mov	r5, r0
    f804:	8800      	ldrh	r0, [r0, #0]
    f806:	2100      	movs	r1, #0
    f808:	f7fd ffb6 	bl	d778 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f80c:	0004      	movs	r4, r0
    f80e:	d007      	beq.n	f820 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x20>
    f810:	f000 fc0c 	bl	1002c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3f0>
    f814:	b120      	cbz	r0, f820 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x20>
    f816:	f894 0278 	ldrb.w	r0, [r4, #632]	; 0x278
    f81a:	b118      	cbz	r0, f824 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x24>
    f81c:	203a      	movs	r0, #58	; 0x3a
    f81e:	bd70      	pop	{r4, r5, r6, pc}
    f820:	2002      	movs	r0, #2
    f822:	bd70      	pop	{r4, r5, r6, pc}
    f824:	2100      	movs	r1, #0
    f826:	f104 00f6 	add.w	r0, r4, #246	; 0xf6
    f82a:	f7ff fe34 	bl	f496 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x94>
    f82e:	2801      	cmp	r0, #1
    f830:	d001      	beq.n	f836 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x36>
    f832:	201a      	movs	r0, #26
    f834:	bd70      	pop	{r4, r5, r6, pc}
    f836:	f8d5 0002 	ldr.w	r0, [r5, #2]
    f83a:	f8c4 0279 	str.w	r0, [r4, #633]	; 0x279
    f83e:	f8d5 0006 	ldr.w	r0, [r5, #6]
    f842:	f8c4 027d 	str.w	r0, [r4, #637]	; 0x27d
    f846:	8968      	ldrh	r0, [r5, #10]
    f848:	f8a4 0281 	strh.w	r0, [r4, #641]	; 0x281
    f84c:	2210      	movs	r2, #16
    f84e:	f105 010c 	add.w	r1, r5, #12
    f852:	f204 2083 	addw	r0, r4, #643	; 0x283
    f856:	f000 ff0a 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f85a:	2001      	movs	r0, #1
    f85c:	f884 0278 	strb.w	r0, [r4, #632]	; 0x278
    f860:	2000      	movs	r0, #0
    f862:	bd70      	pop	{r4, r5, r6, pc}

0000f864 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
    f864:	b51c      	push	{r2, r3, r4, lr}
    f866:	8801      	ldrh	r1, [r0, #0]
    f868:	f8ad 1000 	strh.w	r1, [sp]
    f86c:	8841      	ldrh	r1, [r0, #2]
    f86e:	f8ad 1002 	strh.w	r1, [sp, #2]
    f872:	8801      	ldrh	r1, [r0, #0]
    f874:	f8ad 1004 	strh.w	r1, [sp, #4]
    f878:	8840      	ldrh	r0, [r0, #2]
    f87a:	f8ad 0006 	strh.w	r0, [sp, #6]
    f87e:	4668      	mov	r0, sp
    f880:	f7f7 ff2e 	bl	76e0 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x464>
    f884:	bd1c      	pop	{r2, r3, r4, pc}

0000f886 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
    f886:	b510      	push	{r4, lr}
    f888:	f7f1 ff08 	bl	169c <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
    f88c:	2000      	movs	r0, #0
    f88e:	bd10      	pop	{r4, pc}

0000f890 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A>:
    f890:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    f894:	4604      	mov	r4, r0
    f896:	7a40      	ldrb	r0, [r0, #9]
    f898:	0781      	lsls	r1, r0, #30
    f89a:	d502      	bpl.n	f8a2 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x12>
    f89c:	f040 0001 	orr.w	r0, r0, #1
    f8a0:	7260      	strb	r0, [r4, #9]
    f8a2:	4620      	mov	r0, r4
    f8a4:	f000 fa67 	bl	fd76 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x13a>
    f8a8:	2800      	cmp	r0, #0
    f8aa:	d103      	bne.n	f8b4 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x24>
    f8ac:	f000 fbd4 	bl	10058 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x41c>
    f8b0:	b118      	cbz	r0, f8ba <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x2a>
    f8b2:	200c      	movs	r0, #12
    f8b4:	b004      	add	sp, #16
    f8b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f8ba:	f7f3 fcd7 	bl	326c <sym_TNTVRUTCX6QDICT5SCWQINK5TBPSWJENFWCYQCI>
    f8be:	b910      	cbnz	r0, f8c6 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x36>
    f8c0:	f7f3 fe50 	bl	3564 <sym_FLBXO3C2TGTXVEYELOG5B33ZBUVUNXUU6YZL7TY>
    f8c4:	b108      	cbz	r0, f8ca <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3a>
    f8c6:	203a      	movs	r0, #58	; 0x3a
    f8c8:	e7f4      	b.n	f8b4 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x24>
    f8ca:	2103      	movs	r1, #3
    f8cc:	f104 0018 	add.w	r0, r4, #24
    f8d0:	f7f7 fd94 	bl	73fc <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x180>
    f8d4:	2100      	movs	r1, #0
    f8d6:	4668      	mov	r0, sp
    f8d8:	f7f1 fb02 	bl	ee0 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    f8dc:	0006      	movs	r6, r0
    f8de:	d008      	beq.n	f8f2 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x62>
    f8e0:	2301      	movs	r3, #1
    f8e2:	4622      	mov	r2, r4
    f8e4:	f8bd 1000 	ldrh.w	r1, [sp]
    f8e8:	f7f7 fd9c 	bl	7424 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x1a8>
    f8ec:	0005      	movs	r5, r0
    f8ee:	d002      	beq.n	f8f6 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x66>
    f8f0:	e06c      	b.n	f9cc <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x13c>
    f8f2:	2009      	movs	r0, #9
    f8f4:	e7de      	b.n	f8b4 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x24>
    f8f6:	7860      	ldrb	r0, [r4, #1]
    f8f8:	f7f3 fd96 	bl	3428 <sym_WYXBJE6NWBKILRWDCM2MMYJSSQVAUS4Y4CIL3JA>
    f8fc:	78a1      	ldrb	r1, [r4, #2]
    f8fe:	7820      	ldrb	r0, [r4, #0]
    f900:	1ce2      	adds	r2, r4, #3
    f902:	f7f3 fd01 	bl	3308 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI>
    f906:	b148      	cbz	r0, f91c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x8c>
    f908:	f7f3 fc5c 	bl	31c4 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>
    f90c:	78a1      	ldrb	r1, [r4, #2]
    f90e:	7820      	ldrb	r0, [r4, #0]
    f910:	1ce2      	adds	r2, r4, #3
    f912:	f7f3 fd37 	bl	3384 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY>
    f916:	0005      	movs	r5, r0
    f918:	d002      	beq.n	f920 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x90>
    f91a:	e057      	b.n	f9cc <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x13c>
    f91c:	2512      	movs	r5, #18
    f91e:	e055      	b.n	f9cc <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x13c>
    f920:	4631      	mov	r1, r6
    f922:	2003      	movs	r0, #3
    f924:	f7f3 fc96 	bl	3254 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>
    f928:	4605      	mov	r5, r0
    f92a:	78a0      	ldrb	r0, [r4, #2]
    f92c:	f7ff fdbc 	bl	f4a8 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0xa6>
    f930:	1ce1      	adds	r1, r4, #3
    f932:	f7f3 fd51 	bl	33d8 <sym_IRV7IF6I52F3HYHZNFCDRHHNP7EOMECHNPGJUGI>
    f936:	bb1d      	cbnz	r5, f980 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xf0>
    f938:	7820      	ldrb	r0, [r4, #0]
    f93a:	f04f 0800 	mov.w	r8, #0
    f93e:	2701      	movs	r7, #1
    f940:	bb20      	cbnz	r0, f98c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xfc>
    f942:	f894 a002 	ldrb.w	sl, [r4, #2]
    f946:	f104 0903 	add.w	r9, r4, #3
    f94a:	f8cd 8004 	str.w	r8, [sp, #4]
    f94e:	f8cd 8008 	str.w	r8, [sp, #8]
    f952:	e016      	b.n	f982 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xf2>
    f954:	9d01      	ldr	r5, [sp, #4]
    f956:	42ae      	cmp	r6, r5
    f958:	d013      	beq.n	f982 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xf2>
    f95a:	4650      	mov	r0, sl
    f95c:	f7ff fda4 	bl	f4a8 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0xa6>
    f960:	78aa      	ldrb	r2, [r5, #2]
    f962:	1ceb      	adds	r3, r5, #3
    f964:	4649      	mov	r1, r9
    f966:	f7fd ff92 	bl	d88e <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    f96a:	b150      	cbz	r0, f982 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xf2>
    f96c:	7a6a      	ldrb	r2, [r5, #9]
    f96e:	7a70      	ldrb	r0, [r6, #9]
    f970:	f105 030a 	add.w	r3, r5, #10
    f974:	f106 010a 	add.w	r1, r6, #10
    f978:	f7fd ff89 	bl	d88e <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    f97c:	b108      	cbz	r0, f982 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xf2>
    f97e:	250b      	movs	r5, #11
    f980:	e024      	b.n	f9cc <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x13c>
    f982:	a801      	add	r0, sp, #4
    f984:	f7f1 fa8c 	bl	ea0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    f988:	2800      	cmp	r0, #0
    f98a:	d0e3      	beq.n	f954 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xc4>
    f98c:	4638      	mov	r0, r7
    f98e:	f7f3 fc7d 	bl	328c <sym_VK3LYWW654ZNWB44W7VFNFGOUDPRKIGF72NOIJQ>
    f992:	0005      	movs	r5, r0
    f994:	d11a      	bne.n	f9cc <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x13c>
    f996:	f88d 8004 	strb.w	r8, [sp, #4]
    f99a:	7a60      	ldrb	r0, [r4, #9]
    f99c:	07c0      	lsls	r0, r0, #31
    f99e:	d005      	beq.n	f9ac <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x11c>
    f9a0:	68e0      	ldr	r0, [r4, #12]
    f9a2:	9002      	str	r0, [sp, #8]
    f9a4:	69a0      	ldr	r0, [r4, #24]
    f9a6:	9003      	str	r0, [sp, #12]
    f9a8:	f88d 7004 	strb.w	r7, [sp, #4]
    f9ac:	a801      	add	r0, sp, #4
    f9ae:	f7f4 ffd1 	bl	4954 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ>
    f9b2:	4605      	mov	r5, r0
    f9b4:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
    f9b8:	f7f3 fdaa 	bl	3510 <sym_2QCSOYKJNF32ZBJORU6CJN7O5NDB7M3GD4LTM7A>
    f9bc:	b935      	cbnz	r5, f9cc <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x13c>
    f9be:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
    f9c2:	4630      	mov	r0, r6
    f9c4:	f7f4 feb8 	bl	4738 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI>
    f9c8:	0005      	movs	r5, r0
    f9ca:	d00c      	beq.n	f9e6 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x156>
    f9cc:	8830      	ldrh	r0, [r6, #0]
    f9ce:	f7fd ff5a 	bl	d886 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    f9d2:	8830      	ldrh	r0, [r6, #0]
    f9d4:	2100      	movs	r1, #0
    f9d6:	f7f1 faa9 	bl	f2c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    f9da:	b120      	cbz	r0, f9e6 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x156>
    f9dc:	f241 1139 	movw	r1, #4409	; 0x1139
    f9e0:	2039      	movs	r0, #57	; 0x39
    f9e2:	f7f1 f83f 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f9e6:	4628      	mov	r0, r5
    f9e8:	e764      	b.n	f8b4 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x24>

0000f9ea <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
    f9ea:	b51c      	push	{r2, r3, r4, lr}
    f9ec:	460c      	mov	r4, r1
    f9ee:	4669      	mov	r1, sp
    f9f0:	f7fe f85b 	bl	daaa <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f9f4:	2800      	cmp	r0, #0
    f9f6:	d105      	bne.n	fa04 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x1a>
    f9f8:	2101      	movs	r1, #1
    f9fa:	4622      	mov	r2, r4
    f9fc:	9801      	ldr	r0, [sp, #4]
    f9fe:	f000 fabc 	bl	ff7a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x33e>
    fa02:	2000      	movs	r0, #0
    fa04:	bd1c      	pop	{r2, r3, r4, pc}

0000fa06 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
    fa06:	b510      	push	{r4, lr}
    fa08:	4604      	mov	r4, r0
    fa0a:	f7f7 fe9f 	bl	774c <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ>
    fa0e:	b118      	cbz	r0, fa18 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x12>
    fa10:	2000      	movs	r0, #0
    fa12:	f000 f940 	bl	fc96 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x5a>
    fa16:	b128      	cbz	r0, fa24 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x1e>
    fa18:	4621      	mov	r1, r4
    fa1a:	2000      	movs	r0, #0
    fa1c:	f7f1 fe1a 	bl	1654 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    fa20:	2000      	movs	r0, #0
    fa22:	bd10      	pop	{r4, pc}
    fa24:	200c      	movs	r0, #12
    fa26:	bd10      	pop	{r4, pc}

0000fa28 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
    fa28:	b510      	push	{r4, lr}
    fa2a:	7800      	ldrb	r0, [r0, #0]
    fa2c:	b100      	cbz	r0, fa30 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ+0x8>
    fa2e:	2001      	movs	r0, #1
    fa30:	f7f5 fc16 	bl	5260 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI>
    fa34:	2000      	movs	r0, #0
    fa36:	bd10      	pop	{r4, pc}

0000fa38 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
    fa38:	f7f7 bdce 	b.w	75d8 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x35c>

0000fa3c <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
    fa3c:	b510      	push	{r4, lr}
    fa3e:	4604      	mov	r4, r0
    fa40:	8880      	ldrh	r0, [r0, #4]
    fa42:	b128      	cbz	r0, fa50 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    fa44:	2801      	cmp	r0, #1
    fa46:	d003      	beq.n	fa50 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    fa48:	2802      	cmp	r0, #2
    fa4a:	d001      	beq.n	fa50 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    fa4c:	2012      	movs	r0, #18
    fa4e:	bd10      	pop	{r4, pc}
    fa50:	78e0      	ldrb	r0, [r4, #3]
    fa52:	f000 f92c 	bl	fcae <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x72>
    fa56:	b148      	cbz	r0, fa6c <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    fa58:	78a0      	ldrb	r0, [r4, #2]
    fa5a:	f000 f928 	bl	fcae <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x72>
    fa5e:	b128      	cbz	r0, fa6c <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    fa60:	4620      	mov	r0, r4
    fa62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fa66:	2101      	movs	r1, #1
    fa68:	f000 b862 	b.w	fb30 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    fa6c:	2011      	movs	r0, #17
    fa6e:	bd10      	pop	{r4, pc}

0000fa70 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
    fa70:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    fa72:	460c      	mov	r4, r1
    fa74:	4605      	mov	r5, r0
    fa76:	8800      	ldrh	r0, [r0, #0]
    fa78:	4669      	mov	r1, sp
    fa7a:	f7fe f816 	bl	daaa <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fa7e:	2800      	cmp	r0, #0
    fa80:	d106      	bne.n	fa90 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
    fa82:	9801      	ldr	r0, [sp, #4]
    fa84:	8829      	ldrh	r1, [r5, #0]
    fa86:	8021      	strh	r1, [r4, #0]
    fa88:	f8b0 00d0 	ldrh.w	r0, [r0, #208]	; 0xd0
    fa8c:	8060      	strh	r0, [r4, #2]
    fa8e:	2000      	movs	r0, #0
    fa90:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000fa92 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
    fa92:	b510      	push	{r4, lr}
    fa94:	4604      	mov	r4, r0
    fa96:	4601      	mov	r1, r0
    fa98:	2000      	movs	r0, #0
    fa9a:	f7f1 fdc3 	bl	1624 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    fa9e:	b910      	cbnz	r0, faa6 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
    faa0:	2000      	movs	r0, #0
    faa2:	6020      	str	r0, [r4, #0]
    faa4:	80a0      	strh	r0, [r4, #4]
    faa6:	2000      	movs	r0, #0
    faa8:	bd10      	pop	{r4, pc}

0000faaa <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
    faaa:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    faac:	460c      	mov	r4, r1
    faae:	4605      	mov	r5, r0
    fab0:	8800      	ldrh	r0, [r0, #0]
    fab2:	4669      	mov	r1, sp
    fab4:	f7fd fff9 	bl	daaa <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fab8:	b108      	cbz	r0, fabe <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
    faba:	2002      	movs	r0, #2
    fabc:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    fabe:	78a8      	ldrb	r0, [r5, #2]
    fac0:	b158      	cbz	r0, fada <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x30>
    fac2:	f000 fab0 	bl	10026 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3ea>
    fac6:	70a0      	strb	r0, [r4, #2]
    fac8:	8828      	ldrh	r0, [r5, #0]
    faca:	8020      	strh	r0, [r4, #0]
    facc:	f994 0002 	ldrsb.w	r0, [r4, #2]
    fad0:	f7f2 fdca 	bl	2668 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    fad4:	70a0      	strb	r0, [r4, #2]
    fad6:	2000      	movs	r0, #0
    fad8:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    fada:	9801      	ldr	r0, [sp, #4]
    fadc:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
    fae0:	e7f1      	b.n	fac6 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1c>

0000fae2 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
    fae2:	b510      	push	{r4, lr}
    fae4:	f7f7 fe38 	bl	7758 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
    fae8:	2000      	movs	r0, #0
    faea:	bd10      	pop	{r4, pc}

0000faec <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
    faec:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    faf0:	4604      	mov	r4, r0
    faf2:	8840      	ldrh	r0, [r0, #2]
    faf4:	460d      	mov	r5, r1
    faf6:	b1b8      	cbz	r0, fb28 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3c>
    faf8:	8820      	ldrh	r0, [r4, #0]
    fafa:	4669      	mov	r1, sp
    fafc:	f7fd ffd5 	bl	daaa <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fb00:	2800      	cmp	r0, #0
    fb02:	d10f      	bne.n	fb24 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>
    fb04:	8820      	ldrh	r0, [r4, #0]
    fb06:	8028      	strh	r0, [r5, #0]
    fb08:	9e01      	ldr	r6, [sp, #4]
    fb0a:	f106 0510 	add.w	r5, r6, #16
    fb0e:	3688      	adds	r6, #136	; 0x88
    fb10:	682f      	ldr	r7, [r5, #0]
    fb12:	8862      	ldrh	r2, [r4, #2]
    fb14:	4639      	mov	r1, r7
    fb16:	4630      	mov	r0, r6
    fb18:	f7fe f939 	bl	dd8e <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
    fb1c:	6828      	ldr	r0, [r5, #0]
    fb1e:	42b8      	cmp	r0, r7
    fb20:	d1f6      	bne.n	fb10 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x24>
    fb22:	2000      	movs	r0, #0
    fb24:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    fb28:	2012      	movs	r0, #18
    fb2a:	e7fb      	b.n	fb24 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>

0000fb2c <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
    fb2c:	f000 b886 	b.w	fc3c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

0000fb30 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
    fb30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fb34:	b086      	sub	sp, #24
    fb36:	4689      	mov	r9, r1
    fb38:	4607      	mov	r7, r0
    fb3a:	8800      	ldrh	r0, [r0, #0]
    fb3c:	a901      	add	r1, sp, #4
    fb3e:	f7fd ffb4 	bl	daaa <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fb42:	2800      	cmp	r0, #0
    fb44:	d136      	bne.n	fbb4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>
    fb46:	9802      	ldr	r0, [sp, #8]
    fb48:	4601      	mov	r1, r0
    fb4a:	4688      	mov	r8, r1
    fb4c:	f890 119c 	ldrb.w	r1, [r0, #412]	; 0x19c
    fb50:	f500 749c 	add.w	r4, r0, #312	; 0x138
    fb54:	f88d 1000 	strb.w	r1, [sp]
    fb58:	9900      	ldr	r1, [sp, #0]
    fb5a:	9100      	str	r1, [sp, #0]
    fb5c:	f89d 1000 	ldrb.w	r1, [sp]
    fb60:	3088      	adds	r0, #136	; 0x88
    fb62:	b109      	cbz	r1, fb68 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x38>
    fb64:	2601      	movs	r6, #1
    fb66:	e000      	b.n	fb6a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3a>
    fb68:	2600      	movs	r6, #0
    fb6a:	7f81      	ldrb	r1, [r0, #30]
    fb6c:	2922      	cmp	r1, #34	; 0x22
    fb6e:	d100      	bne.n	fb72 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x42>
    fb70:	b13e      	cbz	r6, fb82 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x52>
    fb72:	2500      	movs	r5, #0
    fb74:	306e      	adds	r0, #110	; 0x6e
    fb76:	2108      	movs	r1, #8
    fb78:	4682      	mov	sl, r0
    fb7a:	f7ff fc8c 	bl	f496 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x94>
    fb7e:	b110      	cbz	r0, fb86 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x56>
    fb80:	e007      	b.n	fb92 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x62>
    fb82:	2501      	movs	r5, #1
    fb84:	e7f6      	b.n	fb74 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x44>
    fb86:	210b      	movs	r1, #11
    fb88:	4650      	mov	r0, sl
    fb8a:	f7ff fc84 	bl	f496 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x94>
    fb8e:	b900      	cbnz	r0, fb92 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x62>
    fb90:	b17d      	cbz	r5, fbb2 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x82>
    fb92:	a804      	add	r0, sp, #16
    fb94:	9000      	str	r0, [sp, #0]
    fb96:	f89d 0004 	ldrb.w	r0, [sp, #4]
    fb9a:	ab03      	add	r3, sp, #12
    fb9c:	463a      	mov	r2, r7
    fb9e:	4641      	mov	r1, r8
    fba0:	f000 fa21 	bl	ffe6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3aa>
    fba4:	0005      	movs	r5, r0
    fba6:	d105      	bne.n	fbb4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>
    fba8:	340c      	adds	r4, #12
    fbaa:	20ff      	movs	r0, #255	; 0xff
    fbac:	7060      	strb	r0, [r4, #1]
    fbae:	b936      	cbnz	r6, fbbe <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
    fbb0:	e003      	b.n	fbba <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8a>
    fbb2:	201a      	movs	r0, #26
    fbb4:	b006      	add	sp, #24
    fbb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    fbba:	7820      	ldrb	r0, [r4, #0]
    fbbc:	b108      	cbz	r0, fbc2 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x92>
    fbbe:	253a      	movs	r5, #58	; 0x3a
    fbc0:	e012      	b.n	fbe8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xb8>
    fbc2:	f884 9000 	strb.w	r9, [r4]
    fbc6:	f89d 000c 	ldrb.w	r0, [sp, #12]
    fbca:	70a0      	strb	r0, [r4, #2]
    fbcc:	f89d 1010 	ldrb.w	r1, [sp, #16]
    fbd0:	70e1      	strb	r1, [r4, #3]
    fbd2:	f88d 0000 	strb.w	r0, [sp]
    fbd6:	f88d 1001 	strb.w	r1, [sp, #1]
    fbda:	88b8      	ldrh	r0, [r7, #4]
    fbdc:	f8ad 0002 	strh.w	r0, [sp, #2]
    fbe0:	4669      	mov	r1, sp
    fbe2:	4640      	mov	r0, r8
    fbe4:	f7fe f83b 	bl	dc5e <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    fbe8:	2000      	movs	r0, #0
    fbea:	7060      	strb	r0, [r4, #1]
    fbec:	4628      	mov	r0, r5
    fbee:	e7e1      	b.n	fbb4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>

0000fbf0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
    fbf0:	2008      	movs	r0, #8
    fbf2:	f7f7 be05 	b.w	7800 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>

0000fbf6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>:
    fbf6:	b510      	push	{r4, lr}
    fbf8:	4604      	mov	r4, r0
    fbfa:	2000      	movs	r0, #0
    fbfc:	8822      	ldrh	r2, [r4, #0]
    fbfe:	b086      	sub	sp, #24
    fc00:	f5a2 417f 	sub.w	r1, r2, #65280	; 0xff00
    fc04:	39ff      	subs	r1, #255	; 0xff
    fc06:	d008      	beq.n	fc1a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x24>
    fc08:	a903      	add	r1, sp, #12
    fc0a:	4610      	mov	r0, r2
    fc0c:	f7fd ff4d 	bl	daaa <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fc10:	b110      	cbz	r0, fc18 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x22>
    fc12:	2002      	movs	r0, #2
    fc14:	b006      	add	sp, #24
    fc16:	bd10      	pop	{r4, pc}
    fc18:	9804      	ldr	r0, [sp, #16]
    fc1a:	8921      	ldrh	r1, [r4, #8]
    fc1c:	89a3      	ldrh	r3, [r4, #12]
    fc1e:	8962      	ldrh	r2, [r4, #10]
    fc20:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
    fc24:	88e3      	ldrh	r3, [r4, #6]
    fc26:	88a2      	ldrh	r2, [r4, #4]
    fc28:	8861      	ldrh	r1, [r4, #2]
    fc2a:	f000 f97b 	bl	ff24 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2e8>
    fc2e:	b108      	cbz	r0, fc34 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3e>
    fc30:	2000      	movs	r0, #0
    fc32:	e7ef      	b.n	fc14 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>
    fc34:	2030      	movs	r0, #48	; 0x30
    fc36:	e7ed      	b.n	fc14 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>

0000fc38 <sym_7ZWRNRN6OJ5G7BJWG232R5QOQBW4NK4HJWYOG5A>:
    fc38:	f7f5 bcb4 	b.w	55a4 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY>

0000fc3c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
    fc3c:	b510      	push	{r4, lr}
    fc3e:	f7fd fe55 	bl	d8ec <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    fc42:	f7f2 fad1 	bl	21e8 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    fc46:	f7f7 fdfd 	bl	7844 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
    fc4a:	f7fe fa7a 	bl	e142 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>
    fc4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fc52:	f7f7 bb8d 	b.w	7370 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xf4>
    fc56:	f44f 71a4 	mov.w	r1, #328	; 0x148
    fc5a:	4288      	cmp	r0, r1
    fc5c:	d303      	bcc.n	fc66 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2a>
    fc5e:	f640 0148 	movw	r1, #2120	; 0x848
    fc62:	4288      	cmp	r0, r1
    fc64:	d300      	bcc.n	fc68 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2c>
    fc66:	4608      	mov	r0, r1
    fc68:	b280      	uxth	r0, r0
    fc6a:	4770      	bx	lr
    fc6c:	07c1      	lsls	r1, r0, #31
    fc6e:	d001      	beq.n	fc74 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x38>
    fc70:	2001      	movs	r0, #1
    fc72:	4770      	bx	lr
    fc74:	0780      	lsls	r0, r0, #30
    fc76:	d501      	bpl.n	fc7c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x40>
    fc78:	2002      	movs	r0, #2
    fc7a:	4770      	bx	lr
    fc7c:	2000      	movs	r0, #0
    fc7e:	4770      	bx	lr
    fc80:	b510      	push	{r4, lr}
    fc82:	2801      	cmp	r0, #1
    fc84:	d006      	beq.n	fc94 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x58>
    fc86:	2802      	cmp	r0, #2
    fc88:	d004      	beq.n	fc94 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x58>
    fc8a:	f44f 7136 	mov.w	r1, #728	; 0x2d8
    fc8e:	2006      	movs	r0, #6
    fc90:	f7f0 fee8 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fc94:	bd10      	pop	{r4, pc}
    fc96:	b510      	push	{r4, lr}
    fc98:	f000 f9de 	bl	10058 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x41c>
    fc9c:	b128      	cbz	r0, fcaa <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x6e>
    fc9e:	f7f3 fc93 	bl	35c8 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>
    fca2:	2801      	cmp	r0, #1
    fca4:	d001      	beq.n	fcaa <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x6e>
    fca6:	2000      	movs	r0, #0
    fca8:	bd10      	pop	{r4, pc}
    fcaa:	2001      	movs	r0, #1
    fcac:	bd10      	pop	{r4, pc}
    fcae:	b510      	push	{r4, lr}
    fcb0:	0004      	movs	r4, r0
    fcb2:	d005      	beq.n	fcc0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x84>
    fcb4:	f7f7 fdb6 	bl	7824 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    fcb8:	4384      	bics	r4, r0
    fcba:	d001      	beq.n	fcc0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x84>
    fcbc:	2000      	movs	r0, #0
    fcbe:	bd10      	pop	{r4, pc}
    fcc0:	2001      	movs	r0, #1
    fcc2:	bd10      	pop	{r4, pc}
    fcc4:	28fb      	cmp	r0, #251	; 0xfb
    fcc6:	d803      	bhi.n	fcd0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x94>
    fcc8:	f640 0048 	movw	r0, #2120	; 0x848
    fccc:	4281      	cmp	r1, r0
    fcce:	d901      	bls.n	fcd4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x98>
    fcd0:	2011      	movs	r0, #17
    fcd2:	4770      	bx	lr
    fcd4:	2000      	movs	r0, #0
    fcd6:	4770      	bx	lr
    fcd8:	381b      	subs	r0, #27
    fcda:	28e1      	cmp	r0, #225	; 0xe1
    fcdc:	d206      	bcs.n	fcec <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb0>
    fcde:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
    fce2:	d303      	bcc.n	fcec <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb0>
    fce4:	f244 2090 	movw	r0, #17040	; 0x4290
    fce8:	4281      	cmp	r1, r0
    fcea:	d901      	bls.n	fcf0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb4>
    fcec:	2012      	movs	r0, #18
    fcee:	4770      	bx	lr
    fcf0:	2000      	movs	r0, #0
    fcf2:	4770      	bx	lr
    fcf4:	b510      	push	{r4, lr}
    fcf6:	4604      	mov	r4, r0
    fcf8:	7800      	ldrb	r0, [r0, #0]
    fcfa:	2801      	cmp	r0, #1
    fcfc:	d009      	beq.n	fd12 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xd6>
    fcfe:	f7f4 fdd7 	bl	48b0 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
    fd02:	2805      	cmp	r0, #5
    fd04:	d003      	beq.n	fd0e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xd2>
    fd06:	f7f4 fd9b 	bl	4840 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>
    fd0a:	2800      	cmp	r0, #0
    fd0c:	d000      	beq.n	fd10 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xd4>
    fd0e:	200c      	movs	r0, #12
    fd10:	bd10      	pop	{r4, pc}
    fd12:	f7f3 fc27 	bl	3564 <sym_FLBXO3C2TGTXVEYELOG5B33ZBUVUNXUU6YZL7TY>
    fd16:	b108      	cbz	r0, fd1c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xe0>
    fd18:	203a      	movs	r0, #58	; 0x3a
    fd1a:	bd10      	pop	{r4, pc}
    fd1c:	f7f3 fbdc 	bl	34d8 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ>
    fd20:	b138      	cbz	r0, fd32 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xf6>
    fd22:	f7f3 fa4f 	bl	31c4 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>
    fd26:	88a1      	ldrh	r1, [r4, #4]
    fd28:	8860      	ldrh	r0, [r4, #2]
    fd2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fd2e:	f7f4 bd4d 	b.w	47cc <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA>
    fd32:	2012      	movs	r0, #18
    fd34:	bd10      	pop	{r4, pc}
    fd36:	7802      	ldrb	r2, [r0, #0]
    fd38:	2a01      	cmp	r2, #1
    fd3a:	d001      	beq.n	fd40 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x104>
    fd3c:	b1ba      	cbz	r2, fd6e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x132>
    fd3e:	e018      	b.n	fd72 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x136>
    fd40:	7842      	ldrb	r2, [r0, #1]
    fd42:	b13a      	cbz	r2, fd54 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x118>
    fd44:	2a01      	cmp	r2, #1
    fd46:	d005      	beq.n	fd54 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x118>
    fd48:	2a02      	cmp	r2, #2
    fd4a:	d112      	bne.n	fd72 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x136>
    fd4c:	b189      	cbz	r1, fd72 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x136>
    fd4e:	8881      	ldrh	r1, [r0, #4]
    fd50:	b179      	cbz	r1, fd72 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x136>
    fd52:	e000      	b.n	fd56 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x11a>
    fd54:	b159      	cbz	r1, fd6e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x132>
    fd56:	8841      	ldrh	r1, [r0, #2]
    fd58:	b149      	cbz	r1, fd6e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x132>
    fd5a:	8880      	ldrh	r0, [r0, #4]
    fd5c:	b138      	cbz	r0, fd6e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x132>
    fd5e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    fd62:	0049      	lsls	r1, r1, #1
    fd64:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    fd68:	ebb1 2f00 	cmp.w	r1, r0, lsl #8
    fd6c:	d201      	bcs.n	fd72 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x136>
    fd6e:	2000      	movs	r0, #0
    fd70:	4770      	bx	lr
    fd72:	2012      	movs	r0, #18
    fd74:	4770      	bx	lr
    fd76:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    fd7a:	7a45      	ldrb	r5, [r0, #9]
    fd7c:	4604      	mov	r4, r0
    fd7e:	0768      	lsls	r0, r5, #29
    fd80:	d06c      	beq.n	fe5c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
    fd82:	08e8      	lsrs	r0, r5, #3
    fd84:	d16a      	bne.n	fe5c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
    fd86:	2d02      	cmp	r5, #2
    fd88:	d068      	beq.n	fe5c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
    fd8a:	f7f7 fd4b 	bl	7824 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    fd8e:	ea25 0000 	bic.w	r0, r5, r0
    fd92:	0740      	lsls	r0, r0, #29
    fd94:	d102      	bne.n	fd9c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x160>
    fd96:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    fd9a:	b110      	cbz	r0, fda2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x166>
    fd9c:	2011      	movs	r0, #17
    fd9e:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    fda2:	2d01      	cmp	r5, #1
    fda4:	d15a      	bne.n	fe5c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
    fda6:	27ff      	movs	r7, #255	; 0xff
    fda8:	2101      	movs	r1, #1
    fdaa:	69a0      	ldr	r0, [r4, #24]
    fdac:	f7f7 fbfe 	bl	75ac <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x330>
    fdb0:	b3e8      	cbz	r0, fe2e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1f2>
    fdb2:	46a8      	mov	r8, r5
    fdb4:	2600      	movs	r6, #0
    fdb6:	4635      	mov	r5, r6
    fdb8:	42bd      	cmp	r5, r7
    fdba:	d02f      	beq.n	fe1c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1e0>
    fdbc:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    fdc0:	6988      	ldr	r0, [r1, #24]
    fdc2:	68c9      	ldr	r1, [r1, #12]
    fdc4:	4288      	cmp	r0, r1
    fdc6:	d849      	bhi.n	fe5c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
    fdc8:	4406      	add	r6, r0
    fdca:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    fdce:	4681      	mov	r9, r0
    fdd0:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
    fdd2:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
    fdd6:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
    fdd8:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
    fddc:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    fdde:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
    fde0:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    fde2:	2000      	movs	r0, #0
    fde4:	f000 f89e 	bl	ff24 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2e8>
    fde8:	b308      	cbz	r0, fe2e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1f2>
    fdea:	b1bd      	cbz	r5, fe1c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1e0>
    fdec:	f8b9 1024 	ldrh.w	r1, [r9, #36]	; 0x24
    fdf0:	f8b9 0022 	ldrh.w	r0, [r9, #34]	; 0x22
    fdf4:	4281      	cmp	r1, r0
    fdf6:	d131      	bne.n	fe5c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
    fdf8:	f8b9 102a 	ldrh.w	r1, [r9, #42]	; 0x2a
    fdfc:	f8b9 0028 	ldrh.w	r0, [r9, #40]	; 0x28
    fe00:	4281      	cmp	r1, r0
    fe02:	d12b      	bne.n	fe5c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
    fe04:	f8b9 1030 	ldrh.w	r1, [r9, #48]	; 0x30
    fe08:	f8b9 002e 	ldrh.w	r0, [r9, #46]	; 0x2e
    fe0c:	4281      	cmp	r1, r0
    fe0e:	d125      	bne.n	fe5c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
    fe10:	f8b9 1036 	ldrh.w	r1, [r9, #54]	; 0x36
    fe14:	f8b9 0034 	ldrh.w	r0, [r9, #52]	; 0x34
    fe18:	4281      	cmp	r1, r0
    fe1a:	d11f      	bne.n	fe5c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
    fe1c:	1c6d      	adds	r5, r5, #1
    fe1e:	b2ed      	uxtb	r5, r5
    fe20:	4545      	cmp	r5, r8
    fe22:	d3c9      	bcc.n	fdb8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x17c>
    fe24:	68e0      	ldr	r0, [r4, #12]
    fe26:	42b0      	cmp	r0, r6
    fe28:	d318      	bcc.n	fe5c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
    fe2a:	7820      	ldrb	r0, [r4, #0]
    fe2c:	e000      	b.n	fe30 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1f4>
    fe2e:	e003      	b.n	fe38 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1fc>
    fe30:	b120      	cbz	r0, fe3c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x200>
    fe32:	2801      	cmp	r0, #1
    fe34:	d112      	bne.n	fe5c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
    fe36:	e004      	b.n	fe42 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x206>
    fe38:	2030      	movs	r0, #48	; 0x30
    fe3a:	e7b0      	b.n	fd9e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x162>
    fe3c:	78a0      	ldrb	r0, [r4, #2]
    fe3e:	2800      	cmp	r0, #0
    fe40:	d1f7      	bne.n	fe32 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1f6>
    fe42:	7860      	ldrb	r0, [r4, #1]
    fe44:	b128      	cbz	r0, fe52 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x216>
    fe46:	2801      	cmp	r0, #1
    fe48:	d003      	beq.n	fe52 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x216>
    fe4a:	2802      	cmp	r0, #2
    fe4c:	d001      	beq.n	fe52 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x216>
    fe4e:	2803      	cmp	r0, #3
    fe50:	d104      	bne.n	fe5c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
    fe52:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
    fe56:	b108      	cbz	r0, fe5c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
    fe58:	2807      	cmp	r0, #7
    fe5a:	d901      	bls.n	fe60 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x224>
    fe5c:	2012      	movs	r0, #18
    fe5e:	e79e      	b.n	fd9e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x162>
    fe60:	2000      	movs	r0, #0
    fe62:	e79c      	b.n	fd9e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x162>
    fe64:	b570      	push	{r4, r5, r6, lr}
    fe66:	4604      	mov	r4, r0
    fe68:	7800      	ldrb	r0, [r0, #0]
    fe6a:	2500      	movs	r5, #0
    fe6c:	2801      	cmp	r0, #1
    fe6e:	d004      	beq.n	fe7a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x23e>
    fe70:	b118      	cbz	r0, fe7a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x23e>
    fe72:	2802      	cmp	r0, #2
    fe74:	d001      	beq.n	fe7a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x23e>
    fe76:	2803      	cmp	r0, #3
    fe78:	d139      	bne.n	feee <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2b2>
    fe7a:	7860      	ldrb	r0, [r4, #1]
    fe7c:	b128      	cbz	r0, fe8a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x24e>
    fe7e:	2801      	cmp	r0, #1
    fe80:	d003      	beq.n	fe8a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x24e>
    fe82:	2802      	cmp	r0, #2
    fe84:	d001      	beq.n	fe8a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x24e>
    fe86:	2803      	cmp	r0, #3
    fe88:	d131      	bne.n	feee <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2b2>
    fe8a:	7e60      	ldrb	r0, [r4, #25]
    fe8c:	b948      	cbnz	r0, fea2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x266>
    fe8e:	78a0      	ldrb	r0, [r4, #2]
    fe90:	2801      	cmp	r0, #1
    fe92:	d12c      	bne.n	feee <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2b2>
    fe94:	f7f7 fcc6 	bl	7824 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    fe98:	4601      	mov	r1, r0
    fe9a:	78a0      	ldrb	r0, [r4, #2]
    fe9c:	ea30 0101 	bics.w	r1, r0, r1
    fea0:	d001      	beq.n	fea6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x26a>
    fea2:	2011      	movs	r0, #17
    fea4:	bd70      	pop	{r4, r5, r6, pc}
    fea6:	07c0      	lsls	r0, r0, #31
    fea8:	d006      	beq.n	feb8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x27c>
    feaa:	78e0      	ldrb	r0, [r4, #3]
    feac:	2301      	movs	r3, #1
    feae:	6922      	ldr	r2, [r4, #16]
    feb0:	68a1      	ldr	r1, [r4, #8]
    feb2:	f000 f820 	bl	fef6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2ba>
    feb6:	4605      	mov	r5, r0
    feb8:	78a0      	ldrb	r0, [r4, #2]
    feba:	0780      	lsls	r0, r0, #30
    febc:	d506      	bpl.n	fecc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x290>
    febe:	78e0      	ldrb	r0, [r4, #3]
    fec0:	2302      	movs	r3, #2
    fec2:	6922      	ldr	r2, [r4, #16]
    fec4:	68a1      	ldr	r1, [r4, #8]
    fec6:	f000 f816 	bl	fef6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2ba>
    feca:	4305      	orrs	r5, r0
    fecc:	78a0      	ldrb	r0, [r4, #2]
    fece:	0740      	lsls	r0, r0, #29
    fed0:	d506      	bpl.n	fee0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2a4>
    fed2:	78e0      	ldrb	r0, [r4, #3]
    fed4:	2304      	movs	r3, #4
    fed6:	6922      	ldr	r2, [r4, #16]
    fed8:	68a1      	ldr	r1, [r4, #8]
    feda:	f000 f80c 	bl	fef6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2ba>
    fede:	4305      	orrs	r5, r0
    fee0:	b10d      	cbz	r5, fee6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2aa>
    fee2:	4628      	mov	r0, r5
    fee4:	bd70      	pop	{r4, r5, r6, pc}
    fee6:	7e20      	ldrb	r0, [r4, #24]
    fee8:	b108      	cbz	r0, feee <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2b2>
    feea:	2807      	cmp	r0, #7
    feec:	d901      	bls.n	fef2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2b6>
    feee:	2012      	movs	r0, #18
    fef0:	bd70      	pop	{r4, r5, r6, pc}
    fef2:	2000      	movs	r0, #0
    fef4:	bd70      	pop	{r4, r5, r6, pc}
    fef6:	b570      	push	{r4, r5, r6, lr}
    fef8:	4614      	mov	r4, r2
    fefa:	460d      	mov	r5, r1
    fefc:	b108      	cbz	r0, ff02 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2c6>
    fefe:	2801      	cmp	r0, #1
    ff00:	d10a      	bne.n	ff18 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2dc>
    ff02:	4619      	mov	r1, r3
    ff04:	4610      	mov	r0, r2
    ff06:	f7f7 fb51 	bl	75ac <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x330>
    ff0a:	b138      	cbz	r0, ff1c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2e0>
    ff0c:	4628      	mov	r0, r5
    ff0e:	f7f7 fa51 	bl	73b4 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x138>
    ff12:	b118      	cbz	r0, ff1c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2e0>
    ff14:	42ac      	cmp	r4, r5
    ff16:	d903      	bls.n	ff20 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2e4>
    ff18:	2012      	movs	r0, #18
    ff1a:	bd70      	pop	{r4, r5, r6, pc}
    ff1c:	2030      	movs	r0, #48	; 0x30
    ff1e:	bd70      	pop	{r4, r5, r6, pc}
    ff20:	2000      	movs	r0, #0
    ff22:	bd70      	pop	{r4, r5, r6, pc}
    ff24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ff28:	461d      	mov	r5, r3
    ff2a:	4610      	mov	r0, r2
    ff2c:	e9dd 4706 	ldrd	r4, r7, [sp, #24]
    ff30:	1f8b      	subs	r3, r1, #6
    ff32:	f640 427a 	movw	r2, #3194	; 0xc7a
    ff36:	9e08      	ldr	r6, [sp, #32]
    ff38:	4293      	cmp	r3, r2
    ff3a:	d81c      	bhi.n	ff76 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x33a>
    ff3c:	1f83      	subs	r3, r0, #6
    ff3e:	4293      	cmp	r3, r2
    ff40:	d819      	bhi.n	ff76 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x33a>
    ff42:	4281      	cmp	r1, r0
    ff44:	d817      	bhi.n	ff76 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x33a>
    ff46:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    ff4a:	d214      	bcs.n	ff76 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x33a>
    ff4c:	f1a4 010a 	sub.w	r1, r4, #10
    ff50:	1f12      	subs	r2, r2, #4
    ff52:	4291      	cmp	r1, r2
    ff54:	d80f      	bhi.n	ff76 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x33a>
    ff56:	f7fd fdb4 	bl	dac2 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    ff5a:	1c6d      	adds	r5, r5, #1
    ff5c:	4368      	muls	r0, r5
    ff5e:	f240 2171 	movw	r1, #625	; 0x271
    ff62:	0040      	lsls	r0, r0, #1
    ff64:	434c      	muls	r4, r1
    ff66:	ebb0 1f04 	cmp.w	r0, r4, lsl #4
    ff6a:	d204      	bcs.n	ff76 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x33a>
    ff6c:	42b7      	cmp	r7, r6
    ff6e:	d802      	bhi.n	ff76 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x33a>
    ff70:	2001      	movs	r0, #1
    ff72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ff76:	2000      	movs	r0, #0
    ff78:	e7fb      	b.n	ff72 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x336>
    ff7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ff7e:	4606      	mov	r6, r0
    ff80:	f8b0 7052 	ldrh.w	r7, [r0, #82]	; 0x52
    ff84:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
    ff88:	4615      	mov	r5, r2
    ff8a:	302c      	adds	r0, #44	; 0x2c
    ff8c:	f7f5 f96e 	bl	526c <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI>
    ff90:	4680      	mov	r8, r0
    ff92:	2102      	movs	r1, #2
    ff94:	f7fd fe33 	bl	dbfe <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    ff98:	4287      	cmp	r7, r0
    ff9a:	d200      	bcs.n	ff9e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x362>
    ff9c:	4638      	mov	r0, r7
    ff9e:	4607      	mov	r7, r0
    ffa0:	2102      	movs	r1, #2
    ffa2:	4640      	mov	r0, r8
    ffa4:	f7fd fe2b 	bl	dbfe <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    ffa8:	4284      	cmp	r4, r0
    ffaa:	d200      	bcs.n	ffae <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x372>
    ffac:	4620      	mov	r0, r4
    ffae:	8831      	ldrh	r1, [r6, #0]
    ffb0:	8029      	strh	r1, [r5, #0]
    ffb2:	2f1b      	cmp	r7, #27
    ffb4:	d913      	bls.n	ffde <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3a2>
    ffb6:	2ffb      	cmp	r7, #251	; 0xfb
    ffb8:	d300      	bcc.n	ffbc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x380>
    ffba:	27fb      	movs	r7, #251	; 0xfb
    ffbc:	806f      	strh	r7, [r5, #2]
    ffbe:	281b      	cmp	r0, #27
    ffc0:	d90f      	bls.n	ffe2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3a6>
    ffc2:	28fb      	cmp	r0, #251	; 0xfb
    ffc4:	d300      	bcc.n	ffc8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x38c>
    ffc6:	20fb      	movs	r0, #251	; 0xfb
    ffc8:	80e8      	strh	r0, [r5, #6]
    ffca:	4640      	mov	r0, r8
    ffcc:	f7ff fe43 	bl	fc56 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1a>
    ffd0:	80a8      	strh	r0, [r5, #4]
    ffd2:	4640      	mov	r0, r8
    ffd4:	f7ff fe3f 	bl	fc56 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1a>
    ffd8:	8128      	strh	r0, [r5, #8]
    ffda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ffde:	271b      	movs	r7, #27
    ffe0:	e7ec      	b.n	ffbc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x380>
    ffe2:	201b      	movs	r0, #27
    ffe4:	e7f0      	b.n	ffc8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x38c>
    ffe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ffea:	7890      	ldrb	r0, [r2, #2]
    ffec:	9e06      	ldr	r6, [sp, #24]
    ffee:	461d      	mov	r5, r3
    fff0:	4614      	mov	r4, r2
    fff2:	b908      	cbnz	r0, fff8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3bc>
    fff4:	f7f7 fc16 	bl	7824 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    fff8:	78e4      	ldrb	r4, [r4, #3]
    fffa:	4607      	mov	r7, r0
    fffc:	b914      	cbnz	r4, 10004 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3c8>
    fffe:	f7f7 fc11 	bl	7824 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   10002:	4604      	mov	r4, r0
   10004:	b16f      	cbz	r7, 10022 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3e6>
   10006:	b164      	cbz	r4, 10022 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3e6>
   10008:	4638      	mov	r0, r7
   1000a:	f7ff fe2f 	bl	fc6c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x30>
   1000e:	4620      	mov	r0, r4
   10010:	f7ff fe2c 	bl	fc6c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x30>
   10014:	b12f      	cbz	r7, 10022 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3e6>
   10016:	b124      	cbz	r4, 10022 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3e6>
   10018:	702f      	strb	r7, [r5, #0]
   1001a:	7034      	strb	r4, [r6, #0]
   1001c:	2000      	movs	r0, #0
   1001e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10022:	2009      	movs	r0, #9
   10024:	e7fb      	b.n	1001e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3e2>
   10026:	207f      	movs	r0, #127	; 0x7f
   10028:	f000 b821 	b.w	1006e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x432>
   1002c:	b508      	push	{r3, lr}
   1002e:	f890 1248 	ldrb.w	r1, [r0, #584]	; 0x248
   10032:	f890 00c4 	ldrb.w	r0, [r0, #196]	; 0xc4
   10036:	f88d 0000 	strb.w	r0, [sp]
   1003a:	9800      	ldr	r0, [sp, #0]
   1003c:	9000      	str	r0, [sp, #0]
   1003e:	f89d 0000 	ldrb.w	r0, [sp]
   10042:	b100      	cbz	r0, 10046 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x40a>
   10044:	2001      	movs	r0, #1
   10046:	1e40      	subs	r0, r0, #1
   10048:	4208      	tst	r0, r1
   1004a:	d003      	beq.n	10054 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x418>
   1004c:	2904      	cmp	r1, #4
   1004e:	d001      	beq.n	10054 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x418>
   10050:	2001      	movs	r0, #1
   10052:	bd08      	pop	{r3, pc}
   10054:	2000      	movs	r0, #0
   10056:	bd08      	pop	{r3, pc}
   10058:	b510      	push	{r4, lr}
   1005a:	f7f4 fc29 	bl	48b0 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
   1005e:	2804      	cmp	r0, #4
   10060:	d003      	beq.n	1006a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x42e>
   10062:	2805      	cmp	r0, #5
   10064:	d001      	beq.n	1006a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x42e>
   10066:	2000      	movs	r0, #0
   10068:	bd10      	pop	{r4, pc}
   1006a:	2001      	movs	r0, #1
   1006c:	bd10      	pop	{r4, pc}
   1006e:	b508      	push	{r3, lr}
   10070:	f640 1288 	movw	r2, #2440	; 0x988
   10074:	2300      	movs	r3, #0
   10076:	4669      	mov	r1, sp
   10078:	f7fc fb2e 	bl	c6d8 <mpsl_fem_tx_power_split>
   1007c:	bd08      	pop	{r3, pc}
   1007e:	b530      	push	{r4, r5, lr}
   10080:	f340 0400 	sbfx	r4, r0, #0, #1
   10084:	f340 0040 	sbfx	r0, r0, #1, #1
   10088:	1c40      	adds	r0, r0, #1
   1008a:	9d03      	ldr	r5, [sp, #12]
   1008c:	1c64      	adds	r4, r4, #1
   1008e:	d000      	beq.n	10092 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x456>
   10090:	b119      	cbz	r1, 1009a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x45e>
   10092:	b100      	cbz	r0, 10096 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x45a>
   10094:	b10a      	cbz	r2, 1009a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x45e>
   10096:	b91c      	cbnz	r4, 100a0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x464>
   10098:	e001      	b.n	1009e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x462>
   1009a:	2011      	movs	r0, #17
   1009c:	bd30      	pop	{r4, r5, pc}
   1009e:	2100      	movs	r1, #0
   100a0:	7019      	strb	r1, [r3, #0]
   100a2:	b900      	cbnz	r0, 100a6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x46a>
   100a4:	2200      	movs	r2, #0
   100a6:	702a      	strb	r2, [r5, #0]
   100a8:	2000      	movs	r0, #0
   100aa:	bd30      	pop	{r4, r5, pc}
   100ac:	b510      	push	{r4, lr}
   100ae:	f7ff ffd3 	bl	10058 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x41c>
   100b2:	b120      	cbz	r0, 100be <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x482>
   100b4:	f7f3 fa90 	bl	35d8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>
   100b8:	b108      	cbz	r0, 100be <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x482>
   100ba:	2001      	movs	r0, #1
   100bc:	bd10      	pop	{r4, pc}
   100be:	2000      	movs	r0, #0
   100c0:	bd10      	pop	{r4, pc}
   100c2:	6802      	ldr	r2, [r0, #0]
   100c4:	b912      	cbnz	r2, 100cc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x490>
   100c6:	6001      	str	r1, [r0, #0]
   100c8:	4770      	bx	lr
   100ca:	4602      	mov	r2, r0
   100cc:	6850      	ldr	r0, [r2, #4]
   100ce:	b108      	cbz	r0, 100d4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x498>
   100d0:	428a      	cmp	r2, r1
   100d2:	d1fa      	bne.n	100ca <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x48e>
   100d4:	428a      	cmp	r2, r1
   100d6:	d0f7      	beq.n	100c8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x48c>
   100d8:	6051      	str	r1, [r2, #4]
   100da:	4770      	bx	lr
   100dc:	b510      	push	{r4, lr}
   100de:	4604      	mov	r4, r0
   100e0:	e002      	b.n	100e8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4ac>
   100e2:	6820      	ldr	r0, [r4, #0]
   100e4:	4780      	blx	r0
   100e6:	6864      	ldr	r4, [r4, #4]
   100e8:	2c00      	cmp	r4, #0
   100ea:	d1fa      	bne.n	100e2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4a6>
   100ec:	bd10      	pop	{r4, pc}
   100ee:	b510      	push	{r4, lr}
   100f0:	2000      	movs	r0, #0
   100f2:	f7fd fb28 	bl	d746 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   100f6:	f7f1 f86d 	bl	11d4 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
   100fa:	f7f1 fa75 	bl	15e8 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
   100fe:	f7f1 fc03 	bl	1908 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
   10102:	2800      	cmp	r0, #0
   10104:	d003      	beq.n	1010e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4d2>
   10106:	21df      	movs	r1, #223	; 0xdf
   10108:	2001      	movs	r0, #1
   1010a:	f7f0 fcab 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1010e:	bd10      	pop	{r4, pc}
   10110:	b510      	push	{r4, lr}
   10112:	f000 f80a 	bl	1012a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4ee>
   10116:	f7fe fe6f 	bl	edf8 <sym_VJEPN3SDR5AQAFQ3NEQBRQ5LOSN3JDHOXS2M77A>
   1011a:	2800      	cmp	r0, #0
   1011c:	d004      	beq.n	10128 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4ec>
   1011e:	f240 1161 	movw	r1, #353	; 0x161
   10122:	2001      	movs	r0, #1
   10124:	f7f0 fc9e 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10128:	bd10      	pop	{r4, pc}
   1012a:	b510      	push	{r4, lr}
   1012c:	f7f4 fc08 	bl	4940 <sym_CEIRMF45E42FC47RKIFGTU36Z7XGQCJUDSF57LQ>
   10130:	b110      	cbz	r0, 10138 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4fc>
   10132:	f240 113b 	movw	r1, #315	; 0x13b
   10136:	e004      	b.n	10142 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x506>
   10138:	f7fe fd4a 	bl	ebd0 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY>
   1013c:	b120      	cbz	r0, 10148 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x50c>
   1013e:	f44f 719e 	mov.w	r1, #316	; 0x13c
   10142:	2001      	movs	r0, #1
   10144:	f7f0 fc8e 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10148:	f7f7 f858 	bl	71fc <sym_UY577SX5HIKP7SN7G6RHWTFDXAXFXXF32S4VJUA>
   1014c:	f7f3 f98e 	bl	346c <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>
   10150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10154:	f7f6 beb4 	b.w	6ec0 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ>
   10158:	000b0001 	.word	0x000b0001
   1015c:	000a0002 	.word	0x000a0002
   10160:	00090005 	.word	0x00090005
   10164:	0008000a 	.word	0x0008000a
   10168:	00070014 	.word	0x00070014
   1016c:	0006001e 	.word	0x0006001e
   10170:	00050032 	.word	0x00050032
   10174:	0004004b 	.word	0x0004004b
   10178:	00030064 	.word	0x00030064
   1017c:	00020096 	.word	0x00020096
   10180:	000100fa 	.word	0x000100fa
   10184:	000001f4 	.word	0x000001f4

00010188 <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA>:
   10188:	b518      	push	{r3, r4, lr}
   1018a:	2200      	movs	r2, #0
   1018c:	704a      	strb	r2, [r1, #1]
   1018e:	2317      	movs	r3, #23
   10190:	700b      	strb	r3, [r1, #0]
   10192:	7202      	strb	r2, [r0, #8]
   10194:	f8d0 400a 	ldr.w	r4, [r0, #10]
   10198:	604c      	str	r4, [r1, #4]
   1019a:	89c3      	ldrh	r3, [r0, #14]
   1019c:	810b      	strh	r3, [r1, #8]
   1019e:	7a03      	ldrb	r3, [r0, #8]
   101a0:	f88d 3000 	strb.w	r3, [sp]
   101a4:	9b00      	ldr	r3, [sp, #0]
   101a6:	9300      	str	r3, [sp, #0]
   101a8:	f89d 3000 	ldrb.w	r3, [sp]
   101ac:	2b00      	cmp	r3, #0
   101ae:	d1f0      	bne.n	10192 <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA+0xa>
   101b0:	bd18      	pop	{r3, r4, pc}

000101b2 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY>:
   101b2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   101b4:	460d      	mov	r5, r1
   101b6:	4604      	mov	r4, r0
   101b8:	f7f2 fb40 	bl	283c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>
   101bc:	2600      	movs	r6, #0
   101be:	b1f8      	cbz	r0, 10200 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x4e>
   101c0:	f5a4 70ca 	sub.w	r0, r4, #404	; 0x194
   101c4:	7226      	strb	r6, [r4, #8]
   101c6:	8800      	ldrh	r0, [r0, #0]
   101c8:	f8ad 0000 	strh.w	r0, [sp]
   101cc:	a902      	add	r1, sp, #8
   101ce:	f7fd fc6c 	bl	daaa <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   101d2:	b108      	cbz	r0, 101d8 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x26>
   101d4:	2124      	movs	r1, #36	; 0x24
   101d6:	e010      	b.n	101fa <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x48>
   101d8:	9803      	ldr	r0, [sp, #12]
   101da:	f810 1f66 	ldrb.w	r1, [r0, #102]!
   101de:	f88d 1002 	strb.w	r1, [sp, #2]
   101e2:	7841      	ldrb	r1, [r0, #1]
   101e4:	f88d 1003 	strb.w	r1, [sp, #3]
   101e8:	8840      	ldrh	r0, [r0, #2]
   101ea:	f8ad 0004 	strh.w	r0, [sp, #4]
   101ee:	2102      	movs	r1, #2
   101f0:	4668      	mov	r0, sp
   101f2:	f7ff fc9d 	bl	fb30 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
   101f6:	b118      	cbz	r0, 10200 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x4e>
   101f8:	213a      	movs	r1, #58	; 0x3a
   101fa:	207e      	movs	r0, #126	; 0x7e
   101fc:	f7f0 fc32 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10200:	2020      	movs	r0, #32
   10202:	7028      	strb	r0, [r5, #0]
   10204:	706e      	strb	r6, [r5, #1]
   10206:	f8d4 000a 	ldr.w	r0, [r4, #10]
   1020a:	6068      	str	r0, [r5, #4]
   1020c:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}

0001020e <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
   1020e:	b510      	push	{r4, lr}
   10210:	f7f7 fe68 	bl	7ee4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
   10214:	f000 f81d 	bl	10252 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
   10218:	f7f7 fb80 	bl	791c <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
   1021c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10220:	f7f7 bc7a 	b.w	7b18 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

00010224 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
   10224:	b510      	push	{r4, lr}
   10226:	24c8      	movs	r4, #200	; 0xc8
   10228:	1e64      	subs	r4, r4, #1
   1022a:	b2e4      	uxtb	r4, r4
   1022c:	f7f7 fb94 	bl	7958 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
   10230:	2802      	cmp	r0, #2
   10232:	d003      	beq.n	1023c <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
   10234:	2801      	cmp	r0, #1
   10236:	d000      	beq.n	1023a <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
   10238:	2000      	movs	r0, #0
   1023a:	bd10      	pop	{r4, pc}
   1023c:	2c00      	cmp	r4, #0
   1023e:	d1f3      	bne.n	10228 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
   10240:	21ca      	movs	r1, #202	; 0xca
   10242:	203b      	movs	r0, #59	; 0x3b
   10244:	f7f0 fc0e 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10248:	5840      	ldr	r0, [r0, r1]
   1024a:	2800      	cmp	r0, #0
   1024c:	d000      	beq.n	10250 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x2c>
   1024e:	2001      	movs	r0, #1
   10250:	4770      	bx	lr

00010252 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
   10252:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   10256:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1025a:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
   1025e:	f3bf 8f4f 	dsb	sy
   10262:	f3bf 8f6f 	isb	sy
   10266:	f7f7 bcf1 	b.w	7c4c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
   1026a:	2800      	cmp	r0, #0
   1026c:	db09      	blt.n	10282 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
   1026e:	f000 021f 	and.w	r2, r0, #31
   10272:	2101      	movs	r1, #1
   10274:	4091      	lsls	r1, r2
   10276:	0940      	lsrs	r0, r0, #5
   10278:	0080      	lsls	r0, r0, #2
   1027a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   1027e:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   10282:	4770      	bx	lr
   10284:	2800      	cmp	r0, #0
   10286:	db0d      	blt.n	102a4 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
   10288:	f000 021f 	and.w	r2, r0, #31
   1028c:	2101      	movs	r1, #1
   1028e:	4091      	lsls	r1, r2
   10290:	0940      	lsrs	r0, r0, #5
   10292:	0080      	lsls	r0, r0, #2
   10294:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10298:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   1029c:	f3bf 8f4f 	dsb	sy
   102a0:	f3bf 8f6f 	isb	sy
   102a4:	4770      	bx	lr
   102a6:	5840      	ldr	r0, [r0, r1]
   102a8:	2800      	cmp	r0, #0
   102aa:	d000      	beq.n	102ae <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5c>
   102ac:	2001      	movs	r0, #1
   102ae:	4770      	bx	lr
   102b0:	5840      	ldr	r0, [r0, r1]
   102b2:	2800      	cmp	r0, #0
   102b4:	d000      	beq.n	102b8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x66>
   102b6:	2001      	movs	r0, #1
   102b8:	4770      	bx	lr

000102ba <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
   102ba:	b510      	push	{r4, lr}
   102bc:	4604      	mov	r4, r0
   102be:	4608      	mov	r0, r1
   102c0:	f7f7 ff30 	bl	8124 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   102c4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   102c8:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   102cc:	fbb0 f0f1 	udiv	r0, r0, r1
   102d0:	1a20      	subs	r0, r4, r0
   102d2:	1e80      	subs	r0, r0, #2
   102d4:	bd10      	pop	{r4, pc}

000102d6 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
   102d6:	b510      	push	{r4, lr}
   102d8:	4604      	mov	r4, r0
   102da:	4608      	mov	r0, r1
   102dc:	f7f7 ff22 	bl	8124 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   102e0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   102e4:	fbb0 f0f1 	udiv	r0, r0, r1
   102e8:	1a20      	subs	r0, r4, r0
   102ea:	bd10      	pop	{r4, pc}
   102ec:	2804      	cmp	r0, #4
   102ee:	d202      	bcs.n	102f6 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x20>
   102f0:	f04f 0028 	mov.w	r0, #40	; 0x28
   102f4:	4770      	bx	lr
   102f6:	d102      	bne.n	102fe <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x28>
   102f8:	f04f 0010 	mov.w	r0, #16
   102fc:	4770      	bx	lr
   102fe:	f04f 0000 	mov.w	r0, #0
   10302:	4770      	bx	lr
   10304:	2100      	movs	r1, #0
   10306:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
   1030a:	f800 1f24 	strb.w	r1, [r0, #36]!
   1030e:	7041      	strb	r1, [r0, #1]
   10310:	4770      	bx	lr

00010312 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
   10312:	b570      	push	{r4, r5, r6, lr}
   10314:	f7f8 fcc6 	bl	8ca4 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
   10318:	4605      	mov	r5, r0
   1031a:	2400      	movs	r4, #0
   1031c:	e006      	b.n	1032c <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
   1031e:	4620      	mov	r0, r4
   10320:	f7f8 fcc6 	bl	8cb0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
   10324:	f7ff ffee 	bl	10304 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x2e>
   10328:	1c64      	adds	r4, r4, #1
   1032a:	b2e4      	uxtb	r4, r4
   1032c:	42ac      	cmp	r4, r5
   1032e:	d3f6      	bcc.n	1031e <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
   10330:	bd70      	pop	{r4, r5, r6, pc}

00010332 <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>:
   10332:	f7fb b8c5 	b.w	b4c0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>

00010336 <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>:
   10336:	b510      	push	{r4, lr}
   10338:	2000      	movs	r0, #0
   1033a:	f7fb fbfb 	bl	bb34 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>
   1033e:	6800      	ldr	r0, [r0, #0]
   10340:	2800      	cmp	r0, #0
   10342:	bf18      	it	ne
   10344:	2001      	movne	r0, #1
   10346:	bd10      	pop	{r4, pc}

00010348 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
   10348:	0a41      	lsrs	r1, r0, #9
   1034a:	f643 5209 	movw	r2, #15625	; 0x3d09
   1034e:	4351      	muls	r1, r2
   10350:	f3c0 0008 	ubfx	r0, r0, #0, #9
   10354:	fb10 f002 	smulbb	r0, r0, r2
   10358:	f500 7080 	add.w	r0, r0, #256	; 0x100
   1035c:	eb01 2050 	add.w	r0, r1, r0, lsr #9
   10360:	4770      	bx	lr
   10362:	2800      	cmp	r0, #0
   10364:	db09      	blt.n	1037a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x32>
   10366:	f000 021f 	and.w	r2, r0, #31
   1036a:	2101      	movs	r1, #1
   1036c:	4091      	lsls	r1, r2
   1036e:	0940      	lsrs	r0, r0, #5
   10370:	0080      	lsls	r0, r0, #2
   10372:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10376:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   1037a:	4770      	bx	lr
   1037c:	2800      	cmp	r0, #0
   1037e:	db0d      	blt.n	1039c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x54>
   10380:	f000 021f 	and.w	r2, r0, #31
   10384:	2101      	movs	r1, #1
   10386:	4091      	lsls	r1, r2
   10388:	0940      	lsrs	r0, r0, #5
   1038a:	0080      	lsls	r0, r0, #2
   1038c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10390:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   10394:	f3bf 8f4f 	dsb	sy
   10398:	f3bf 8f6f 	isb	sy
   1039c:	4770      	bx	lr
   1039e:	5840      	ldr	r0, [r0, r1]
   103a0:	2800      	cmp	r0, #0
   103a2:	d000      	beq.n	103a6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x5e>
   103a4:	2001      	movs	r0, #1
   103a6:	4770      	bx	lr
   103a8:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
   103ac:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
   103b0:	f002 0201 	and.w	r2, r2, #1
   103b4:	03c0      	lsls	r0, r0, #15
   103b6:	d503      	bpl.n	103c0 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x78>
   103b8:	428a      	cmp	r2, r1
   103ba:	d101      	bne.n	103c0 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x78>
   103bc:	2001      	movs	r0, #1
   103be:	4770      	bx	lr
   103c0:	2000      	movs	r0, #0
   103c2:	4770      	bx	lr

000103c4 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
   103c4:	b510      	push	{r4, lr}
   103c6:	2101      	movs	r1, #1
   103c8:	0788      	lsls	r0, r1, #30
   103ca:	f7fb ff6f 	bl	c2ac <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
   103ce:	2800      	cmp	r0, #0
   103d0:	d000      	beq.n	103d4 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
   103d2:	2001      	movs	r0, #1
   103d4:	bd10      	pop	{r4, pc}

000103d6 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
   103d6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   103da:	2101      	movs	r1, #1
   103dc:	6001      	str	r1, [r0, #0]
   103de:	4770      	bx	lr

000103e0 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
   103e0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   103e4:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
   103e8:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
   103ec:	f002 0203 	and.w	r2, r2, #3
   103f0:	03c9      	lsls	r1, r1, #15
   103f2:	d503      	bpl.n	103fc <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
   103f4:	4282      	cmp	r2, r0
   103f6:	d101      	bne.n	103fc <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
   103f8:	2001      	movs	r0, #1
   103fa:	4770      	bx	lr
   103fc:	2000      	movs	r0, #0
   103fe:	4770      	bx	lr

00010400 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
   10400:	b510      	push	{r4, lr}
   10402:	2100      	movs	r1, #0
   10404:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   10408:	f7fb ff50 	bl	c2ac <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
   1040c:	2800      	cmp	r0, #0
   1040e:	d000      	beq.n	10412 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
   10410:	2001      	movs	r0, #1
   10412:	bd10      	pop	{r4, pc}
   10414:	2800      	cmp	r0, #0
   10416:	db09      	blt.n	1042c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
   10418:	f000 021f 	and.w	r2, r0, #31
   1041c:	2101      	movs	r1, #1
   1041e:	4091      	lsls	r1, r2
   10420:	0940      	lsrs	r0, r0, #5
   10422:	0080      	lsls	r0, r0, #2
   10424:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10428:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   1042c:	4770      	bx	lr
   1042e:	2800      	cmp	r0, #0
   10430:	db0d      	blt.n	1044e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
   10432:	f000 021f 	and.w	r2, r0, #31
   10436:	2101      	movs	r1, #1
   10438:	4091      	lsls	r1, r2
   1043a:	0940      	lsrs	r0, r0, #5
   1043c:	0080      	lsls	r0, r0, #2
   1043e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10442:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   10446:	f3bf 8f4f 	dsb	sy
   1044a:	f3bf 8f6f 	isb	sy
   1044e:	4770      	bx	lr
   10450:	00021000 	.word	0x00021000
   10454:	000000fa 	.word	0x000000fa
   10458:	cc9ef18c 	.word	0xcc9ef18c
   1045c:	a7d74134 	.word	0xa7d74134
   10460:	1459f70e 	.word	0x1459f70e
   10464:	67d72bbb 	.word	0x67d72bbb
   10468:	ebbebb7f 	.word	0xebbebb7f
   1046c:	2800      	cmp	r0, #0
   1046e:	db09      	blt.n	10484 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
   10470:	f000 021f 	and.w	r2, r0, #31
   10474:	2101      	movs	r1, #1
   10476:	4091      	lsls	r1, r2
   10478:	0940      	lsrs	r0, r0, #5
   1047a:	0080      	lsls	r0, r0, #2
   1047c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10480:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   10484:	4770      	bx	lr

00010486 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
   10486:	f3ef 8110 	mrs	r1, PRIMASK
   1048a:	b672      	cpsid	i
   1048c:	7802      	ldrb	r2, [r0, #0]
   1048e:	2a01      	cmp	r2, #1
   10490:	d001      	beq.n	10496 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
   10492:	2201      	movs	r2, #1
   10494:	e000      	b.n	10498 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
   10496:	2200      	movs	r2, #0
   10498:	2301      	movs	r3, #1
   1049a:	7003      	strb	r3, [r0, #0]
   1049c:	b901      	cbnz	r1, 104a0 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
   1049e:	b662      	cpsie	i
   104a0:	b10a      	cbz	r2, 104a6 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
   104a2:	2000      	movs	r0, #0
   104a4:	4770      	bx	lr
   104a6:	f06f 0022 	mvn.w	r0, #34	; 0x22
   104aa:	4770      	bx	lr

000104ac <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
   104ac:	2100      	movs	r1, #0
   104ae:	7001      	strb	r1, [r0, #0]
   104b0:	4608      	mov	r0, r1
   104b2:	4770      	bx	lr

000104b4 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
   104b4:	f3ef 8110 	mrs	r1, PRIMASK
   104b8:	b672      	cpsid	i
   104ba:	2200      	movs	r2, #0
   104bc:	7002      	strb	r2, [r0, #0]
   104be:	b901      	cbnz	r1, 104c2 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
   104c0:	b662      	cpsie	i
   104c2:	2000      	movs	r0, #0
   104c4:	4770      	bx	lr

000104c6 <mpsl_low_priority_process>:
   104c6:	f7fc b847 	b.w	c558 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

000104ca <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
   104ca:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   104ce:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   104d2:	280f      	cmp	r0, #15
   104d4:	d001      	beq.n	104da <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
   104d6:	2000      	movs	r0, #0
   104d8:	4770      	bx	lr
   104da:	2001      	movs	r0, #1
   104dc:	4770      	bx	lr

000104de <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
   104de:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   104e2:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   104e6:	280a      	cmp	r0, #10
   104e8:	d001      	beq.n	104ee <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
   104ea:	2000      	movs	r0, #0
   104ec:	4770      	bx	lr
   104ee:	2001      	movs	r0, #1
   104f0:	4770      	bx	lr

000104f2 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
   104f2:	b500      	push	{lr}
   104f4:	f7ff fff3 	bl	104de <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
   104f8:	b120      	cbz	r0, 10504 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
   104fa:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   104fe:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   10502:	b108      	cbz	r0, 10508 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
   10504:	2000      	movs	r0, #0
   10506:	bd00      	pop	{pc}
   10508:	2001      	movs	r0, #1
   1050a:	bd00      	pop	{pc}

0001050c <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
   1050c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10510:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10514:	280e      	cmp	r0, #14
   10516:	d001      	beq.n	1051c <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
   10518:	2000      	movs	r0, #0
   1051a:	4770      	bx	lr
   1051c:	2001      	movs	r0, #1
   1051e:	4770      	bx	lr

00010520 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
   10520:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10524:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10528:	2810      	cmp	r0, #16
   1052a:	d001      	beq.n	10530 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
   1052c:	2000      	movs	r0, #0
   1052e:	4770      	bx	lr
   10530:	2001      	movs	r0, #1
   10532:	4770      	bx	lr

00010534 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
   10534:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10538:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   1053c:	2806      	cmp	r0, #6
   1053e:	d003      	beq.n	10548 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
   10540:	1c40      	adds	r0, r0, #1
   10542:	d001      	beq.n	10548 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
   10544:	2000      	movs	r0, #0
   10546:	4770      	bx	lr
   10548:	2001      	movs	r0, #1
   1054a:	4770      	bx	lr

0001054c <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
   1054c:	b500      	push	{lr}
   1054e:	f7ff fff1 	bl	10534 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   10552:	b148      	cbz	r0, 10568 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   10554:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10558:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   1055c:	2806      	cmp	r0, #6
   1055e:	d303      	bcc.n	10568 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   10560:	1c40      	adds	r0, r0, #1
   10562:	d001      	beq.n	10568 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   10564:	2001      	movs	r0, #1
   10566:	bd00      	pop	{pc}
   10568:	2000      	movs	r0, #0
   1056a:	bd00      	pop	{pc}

0001056c <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
   1056c:	b500      	push	{lr}
   1056e:	f7ff ffe1 	bl	10534 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   10572:	b138      	cbz	r0, 10584 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
   10574:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10578:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   1057c:	2806      	cmp	r0, #6
   1057e:	d303      	bcc.n	10588 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
   10580:	1c40      	adds	r0, r0, #1
   10582:	d001      	beq.n	10588 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
   10584:	2000      	movs	r0, #0
   10586:	bd00      	pop	{pc}
   10588:	2001      	movs	r0, #1
   1058a:	bd00      	pop	{pc}

0001058c <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
   1058c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10590:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10594:	280d      	cmp	r0, #13
   10596:	d001      	beq.n	1059c <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
   10598:	2000      	movs	r0, #0
   1059a:	4770      	bx	lr
   1059c:	2001      	movs	r0, #1
   1059e:	4770      	bx	lr

000105a0 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
   105a0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   105a4:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   105a8:	2808      	cmp	r0, #8
   105aa:	d001      	beq.n	105b0 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
   105ac:	2000      	movs	r0, #0
   105ae:	4770      	bx	lr
   105b0:	2001      	movs	r0, #1
   105b2:	4770      	bx	lr

000105b4 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
   105b4:	f7fc b80a 	b.w	c5cc <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x2c>

000105b8 <sym_PHK7RXLFFTGYQNCW3IEEUVLOAYXWQJQYEN3DT7Y>:
   105b8:	f7fc b808 	b.w	c5cc <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x2c>

000105bc <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>:
   105bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   105c0:	428a      	cmp	r2, r1
   105c2:	d803      	bhi.n	105cc <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x10>
   105c4:	2179      	movs	r1, #121	; 0x79
   105c6:	2096      	movs	r0, #150	; 0x96
   105c8:	f7fb fec6 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   105cc:	fab2 f382 	clz	r3, r2
   105d0:	b13b      	cbz	r3, 105e2 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x26>
   105d2:	4099      	lsls	r1, r3
   105d4:	f1c3 0420 	rsb	r4, r3, #32
   105d8:	fa20 f404 	lsr.w	r4, r0, r4
   105dc:	4321      	orrs	r1, r4
   105de:	4098      	lsls	r0, r3
   105e0:	409a      	lsls	r2, r3
   105e2:	0c14      	lsrs	r4, r2, #16
   105e4:	0c07      	lsrs	r7, r0, #16
   105e6:	b286      	uxth	r6, r0
   105e8:	fbb1 f0f4 	udiv	r0, r1, r4
   105ec:	fbb1 f3f4 	udiv	r3, r1, r4
   105f0:	fb04 1c10 	mls	ip, r4, r0, r1
   105f4:	b295      	uxth	r5, r2
   105f6:	fb03 f005 	mul.w	r0, r3, r5
   105fa:	eb07 4c0c 	add.w	ip, r7, ip, lsl #16
   105fe:	4560      	cmp	r0, ip
   10600:	d907      	bls.n	10612 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x56>
   10602:	eba0 000c 	sub.w	r0, r0, ip
   10606:	4290      	cmp	r0, r2
   10608:	d901      	bls.n	1060e <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x52>
   1060a:	2002      	movs	r0, #2
   1060c:	e000      	b.n	10610 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x54>
   1060e:	2001      	movs	r0, #1
   10610:	1a1b      	subs	r3, r3, r0
   10612:	0409      	lsls	r1, r1, #16
   10614:	0418      	lsls	r0, r3, #16
   10616:	19c9      	adds	r1, r1, r7
   10618:	fba3 3702 	umull	r3, r7, r3, r2
   1061c:	1acf      	subs	r7, r1, r3
   1061e:	fbb7 f1f4 	udiv	r1, r7, r4
   10622:	fbb7 f3f4 	udiv	r3, r7, r4
   10626:	fb04 7413 	mls	r4, r4, r3, r7
   1062a:	fb01 f305 	mul.w	r3, r1, r5
   1062e:	eb06 4404 	add.w	r4, r6, r4, lsl #16
   10632:	42a3      	cmp	r3, r4
   10634:	d906      	bls.n	10644 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x88>
   10636:	1b1b      	subs	r3, r3, r4
   10638:	4293      	cmp	r3, r2
   1063a:	d901      	bls.n	10640 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x84>
   1063c:	2202      	movs	r2, #2
   1063e:	e000      	b.n	10642 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x86>
   10640:	2201      	movs	r2, #1
   10642:	1a89      	subs	r1, r1, r2
   10644:	4308      	orrs	r0, r1
   10646:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001064a <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>:
   1064a:	2a00      	cmp	r2, #0
   1064c:	bf04      	itt	eq
   1064e:	2000      	moveq	r0, #0
   10650:	4770      	bxeq	lr
   10652:	1e52      	subs	r2, r2, #1
   10654:	d007      	beq.n	10666 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x1c>
   10656:	7803      	ldrb	r3, [r0, #0]
   10658:	f891 c000 	ldrb.w	ip, [r1]
   1065c:	4563      	cmp	r3, ip
   1065e:	bf04      	itt	eq
   10660:	1c40      	addeq	r0, r0, #1
   10662:	1c49      	addeq	r1, r1, #1
   10664:	d0f5      	beq.n	10652 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x8>
   10666:	7800      	ldrb	r0, [r0, #0]
   10668:	7809      	ldrb	r1, [r1, #0]
   1066a:	1a40      	subs	r0, r0, r1
   1066c:	4770      	bx	lr

0001066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
   1066e:	b4f0      	push	{r4, r5, r6, r7}
   10670:	ea80 0c01 	eor.w	ip, r0, r1
   10674:	4603      	mov	r3, r0
   10676:	f01c 0f03 	tst.w	ip, #3
   1067a:	d13c      	bne.n	106f6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   1067c:	f013 0f03 	tst.w	r3, #3
   10680:	d00b      	beq.n	1069a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
   10682:	2a00      	cmp	r2, #0
   10684:	bf04      	itt	eq
   10686:	bcf0      	popeq	{r4, r5, r6, r7}
   10688:	4770      	bxeq	lr
   1068a:	f811 cb01 	ldrb.w	ip, [r1], #1
   1068e:	f803 cb01 	strb.w	ip, [r3], #1
   10692:	1e52      	subs	r2, r2, #1
   10694:	f013 0f03 	tst.w	r3, #3
   10698:	d1f3      	bne.n	10682 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
   1069a:	2a03      	cmp	r2, #3
   1069c:	d94f      	bls.n	1073e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
   1069e:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   106a2:	d24c      	bcs.n	1073e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
   106a4:	f1c2 0c00 	rsb	ip, r2, #0
   106a8:	ea4f 74ec 	mov.w	r4, ip, asr #31
   106ac:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
   106b0:	ea4f 0cac 	mov.w	ip, ip, asr #2
   106b4:	f1cc 0c00 	rsb	ip, ip, #0
   106b8:	f1bc 0f00 	cmp.w	ip, #0
   106bc:	dd1b      	ble.n	106f6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   106be:	1f0d      	subs	r5, r1, #4
   106c0:	1f1c      	subs	r4, r3, #4
   106c2:	f01c 0f01 	tst.w	ip, #1
   106c6:	d003      	beq.n	106d0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
   106c8:	f855 6f04 	ldr.w	r6, [r5, #4]!
   106cc:	f844 6f04 	str.w	r6, [r4, #4]!
   106d0:	ea5f 066c 	movs.w	r6, ip, asr #1
   106d4:	d007      	beq.n	106e6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
   106d6:	686f      	ldr	r7, [r5, #4]
   106d8:	6067      	str	r7, [r4, #4]
   106da:	f855 7f08 	ldr.w	r7, [r5, #8]!
   106de:	f844 7f08 	str.w	r7, [r4, #8]!
   106e2:	1e76      	subs	r6, r6, #1
   106e4:	d1f7      	bne.n	106d6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
   106e6:	eb01 018c 	add.w	r1, r1, ip, lsl #2
   106ea:	eb03 038c 	add.w	r3, r3, ip, lsl #2
   106ee:	f1cc 0c00 	rsb	ip, ip, #0
   106f2:	eb02 028c 	add.w	r2, r2, ip, lsl #2
   106f6:	2a00      	cmp	r2, #0
   106f8:	bf04      	itt	eq
   106fa:	bcf0      	popeq	{r4, r5, r6, r7}
   106fc:	4770      	bxeq	lr
   106fe:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   10702:	d226      	bcs.n	10752 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
   10704:	2a00      	cmp	r2, #0
   10706:	bfdc      	itt	le
   10708:	bcf0      	pople	{r4, r5, r6, r7}
   1070a:	4770      	bxle	lr
   1070c:	1e49      	subs	r1, r1, #1
   1070e:	1e5b      	subs	r3, r3, #1
   10710:	f012 0f01 	tst.w	r2, #1
   10714:	d003      	beq.n	1071e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
   10716:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   1071a:	f803 cf01 	strb.w	ip, [r3, #1]!
   1071e:	1052      	asrs	r2, r2, #1
   10720:	bf04      	itt	eq
   10722:	bcf0      	popeq	{r4, r5, r6, r7}
   10724:	4770      	bxeq	lr
   10726:	f891 c001 	ldrb.w	ip, [r1, #1]
   1072a:	f883 c001 	strb.w	ip, [r3, #1]
   1072e:	f811 cf02 	ldrb.w	ip, [r1, #2]!
   10732:	f803 cf02 	strb.w	ip, [r3, #2]!
   10736:	1e52      	subs	r2, r2, #1
   10738:	d1f5      	bne.n	10726 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
   1073a:	bcf0      	pop	{r4, r5, r6, r7}
   1073c:	4770      	bx	lr
   1073e:	2a04      	cmp	r2, #4
   10740:	d3d9      	bcc.n	106f6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   10742:	f851 cb04 	ldr.w	ip, [r1], #4
   10746:	1f12      	subs	r2, r2, #4
   10748:	f843 cb04 	str.w	ip, [r3], #4
   1074c:	2a04      	cmp	r2, #4
   1074e:	d2f8      	bcs.n	10742 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
   10750:	e7d1      	b.n	106f6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   10752:	f811 cb01 	ldrb.w	ip, [r1], #1
   10756:	f803 cb01 	strb.w	ip, [r3], #1
   1075a:	1e52      	subs	r2, r2, #1
   1075c:	d1f9      	bne.n	10752 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
   1075e:	bcf0      	pop	{r4, r5, r6, r7}
   10760:	4770      	bx	lr

00010762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
   10762:	b470      	push	{r4, r5, r6}
   10764:	4603      	mov	r3, r0
   10766:	f001 0cff 	and.w	ip, r1, #255	; 0xff
   1076a:	f010 0f03 	tst.w	r0, #3
   1076e:	d009      	beq.n	10784 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
   10770:	2a00      	cmp	r2, #0
   10772:	bf04      	itt	eq
   10774:	bc70      	popeq	{r4, r5, r6}
   10776:	4770      	bxeq	lr
   10778:	f803 cb01 	strb.w	ip, [r3], #1
   1077c:	1e52      	subs	r2, r2, #1
   1077e:	f013 0f03 	tst.w	r3, #3
   10782:	d1f5      	bne.n	10770 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
   10784:	b2c9      	uxtb	r1, r1
   10786:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   1078a:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
   1078e:	2a03      	cmp	r2, #3
   10790:	d939      	bls.n	10806 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
   10792:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   10796:	d236      	bcs.n	10806 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
   10798:	4251      	negs	r1, r2
   1079a:	17cc      	asrs	r4, r1, #31
   1079c:	eb01 7194 	add.w	r1, r1, r4, lsr #30
   107a0:	1089      	asrs	r1, r1, #2
   107a2:	424e      	negs	r6, r1
   107a4:	2e00      	cmp	r6, #0
   107a6:	dd11      	ble.n	107cc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   107a8:	1f19      	subs	r1, r3, #4
   107aa:	f016 0f01 	tst.w	r6, #1
   107ae:	bf18      	it	ne
   107b0:	f841 5f04 	strne.w	r5, [r1, #4]!
   107b4:	1074      	asrs	r4, r6, #1
   107b6:	d004      	beq.n	107c2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
   107b8:	604d      	str	r5, [r1, #4]
   107ba:	f841 5f08 	str.w	r5, [r1, #8]!
   107be:	1e64      	subs	r4, r4, #1
   107c0:	d1fa      	bne.n	107b8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
   107c2:	4271      	negs	r1, r6
   107c4:	eb03 0386 	add.w	r3, r3, r6, lsl #2
   107c8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   107cc:	2a00      	cmp	r2, #0
   107ce:	bf04      	itt	eq
   107d0:	bc70      	popeq	{r4, r5, r6}
   107d2:	4770      	bxeq	lr
   107d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   107d8:	d21d      	bcs.n	10816 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
   107da:	2a00      	cmp	r2, #0
   107dc:	bfdc      	itt	le
   107de:	bc70      	pople	{r4, r5, r6}
   107e0:	4770      	bxle	lr
   107e2:	1e59      	subs	r1, r3, #1
   107e4:	f012 0f01 	tst.w	r2, #1
   107e8:	bf18      	it	ne
   107ea:	f801 cf01 	strbne.w	ip, [r1, #1]!
   107ee:	1052      	asrs	r2, r2, #1
   107f0:	bf04      	itt	eq
   107f2:	bc70      	popeq	{r4, r5, r6}
   107f4:	4770      	bxeq	lr
   107f6:	f881 c001 	strb.w	ip, [r1, #1]
   107fa:	f801 cf02 	strb.w	ip, [r1, #2]!
   107fe:	1e52      	subs	r2, r2, #1
   10800:	d1f9      	bne.n	107f6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
   10802:	bc70      	pop	{r4, r5, r6}
   10804:	4770      	bx	lr
   10806:	2a04      	cmp	r2, #4
   10808:	d3e0      	bcc.n	107cc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   1080a:	1f12      	subs	r2, r2, #4
   1080c:	f843 5b04 	str.w	r5, [r3], #4
   10810:	2a04      	cmp	r2, #4
   10812:	d2fa      	bcs.n	1080a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
   10814:	e7da      	b.n	107cc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   10816:	f803 cb01 	strb.w	ip, [r3], #1
   1081a:	1e52      	subs	r2, r2, #1
   1081c:	d1fb      	bne.n	10816 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
   1081e:	bc70      	pop	{r4, r5, r6}
   10820:	4770      	bx	lr
   10822:	f04f 30ff 	mov.w	r0, #4294967295
   10826:	4770      	bx	lr
   10828:	2000      	movs	r0, #0
   1082a:	4770      	bx	lr
   1082c:	2000      	movs	r0, #0
   1082e:	4770      	bx	lr
   10830:	f04f 30ff 	mov.w	r0, #4294967295
   10834:	4770      	bx	lr
   10836:	4770      	bx	lr
   10838:	4770      	bx	lr
   1083a:	2000      	movs	r0, #0
   1083c:	4770      	bx	lr
   1083e:	2100      	movs	r1, #0
   10840:	7001      	strb	r1, [r0, #0]
   10842:	4770      	bx	lr
   10844:	f04f 30ff 	mov.w	r0, #4294967295
   10848:	4770      	bx	lr
   1084a:	f04f 30ff 	mov.w	r0, #4294967295
   1084e:	4770      	bx	lr
   10850:	2100      	movs	r1, #0
   10852:	7001      	strb	r1, [r0, #0]
   10854:	4770      	bx	lr
   10856:	f04f 30ff 	mov.w	r0, #4294967295
   1085a:	4770      	bx	lr
   1085c:	f04f 30ff 	mov.w	r0, #4294967295
   10860:	4770      	bx	lr
   10862:	7800      	ldrb	r0, [r0, #0]
   10864:	2800      	cmp	r0, #0
   10866:	d001      	beq.n	1086c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x10a>
   10868:	f06f 0015 	mvn.w	r0, #21
   1086c:	4770      	bx	lr
   1086e:	2000      	movs	r0, #0
   10870:	4770      	bx	lr
   10872:	2200      	movs	r2, #0
   10874:	f000 b802 	b.w	1087c <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>

00010878 <mpsl_fem_init>:
   10878:	f7f8 b982 	b.w	8b80 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>

0001087c <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>:
   1087c:	b570      	push	{r4, r5, r6, lr}
   1087e:	4614      	mov	r4, r2
   10880:	460d      	mov	r5, r1
   10882:	1b00      	subs	r0, r0, r4
   10884:	f06f 017f 	mvn.w	r1, #127	; 0x7f
   10888:	4288      	cmp	r0, r1
   1088a:	da01      	bge.n	10890 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x14>
   1088c:	4608      	mov	r0, r1
   1088e:	e002      	b.n	10896 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
   10890:	287f      	cmp	r0, #127	; 0x7f
   10892:	dd00      	ble.n	10896 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
   10894:	207f      	movs	r0, #127	; 0x7f
   10896:	4619      	mov	r1, r3
   10898:	b240      	sxtb	r0, r0
   1089a:	f7f8 f9a5 	bl	8be8 <mpsl_tx_power_radio_supported_power_adjust>
   1089e:	7028      	strb	r0, [r5, #0]
   108a0:	706c      	strb	r4, [r5, #1]
   108a2:	2100      	movs	r1, #0
   108a4:	4420      	add	r0, r4
   108a6:	70a9      	strb	r1, [r5, #2]
   108a8:	b240      	sxtb	r0, r0
   108aa:	bd70      	pop	{r4, r5, r6, pc}
   108ac:	1702080c 	.word	0x1702080c
   108b0:	0201010d 	.word	0x0201010d
   108b4:	01010909 	.word	0x01010909
   108b8:	18090206 	.word	0x18090206
   108bc:	01010318 	.word	0x01010318
   108c0:	03030909 	.word	0x03030909
   108c4:	01020305 	.word	0x01020305
   108c8:	24020223 	.word	0x24020223
   108cc:	04041009 	.word	0x04041009
   108d0:	0b0b0505 	.word	0x0b0b0505
   108d4:	0b04      	.short	0x0b04
   108d6:	2b          	.byte	0x2b
   108d7:	25          	.byte	0x25
   108d8:	2726      	.short	0x2726
   108da:	0301      	.short	0x0301
   108dc:	0101      	.short	0x0101
   108de:	01          	.byte	0x01
   108df:	d8          	.byte	0xd8
   108e0:	f8f4f0ec 	.word	0xf8f4f0ec
   108e4:	030200fc 	.word	0x030200fc
   108e8:	07060504 	.word	0x07060504
   108ec:	00000008 	.word	0x00000008
	...
   10900:	01010100 	.word	0x01010100
   10904:	02020201 	.word	0x02020201
   10908:	03030302 	.word	0x03030302
   1090c:	04040403 	.word	0x04040403
   10910:	05050504 	.word	0x05050504
   10914:	07060605 	.word	0x07060605
   10918:	0b0a0908 	.word	0x0b0a0908
   1091c:	00000d0c 	.word	0x00000d0c
	...
   10930:	01010000 	.word	0x01010000
   10934:	02020101 	.word	0x02020101
   10938:	03030202 	.word	0x03030202
   1093c:	04040303 	.word	0x04040303
   10940:	05050404 	.word	0x05050404
   10944:	06060505 	.word	0x06060505
   10948:	00090806 	.word	0x00090806

0001094c <bt_addr_le_to_str>:
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
   1094c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1094e:	b08b      	sub	sp, #44	; 0x2c
   10950:	4604      	mov	r4, r0
   10952:	460d      	mov	r5, r1
   10954:	4616      	mov	r6, r2
	char type[10];

	switch (addr->type) {
   10956:	7803      	ldrb	r3, [r0, #0]
   10958:	2b03      	cmp	r3, #3
   1095a:	d82c      	bhi.n	109b6 <bt_addr_le_to_str+0x6a>
   1095c:	e8df f003 	tbb	[pc, r3]
   10960:	26211c02 	.word	0x26211c02
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   10964:	4917      	ldr	r1, [pc, #92]	; (109c4 <bt_addr_le_to_str+0x78>)
   10966:	a807      	add	r0, sp, #28
   10968:	f019 f8a4 	bl	29ab4 <strcpy>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
   1096c:	7963      	ldrb	r3, [r4, #5]
   1096e:	7922      	ldrb	r2, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
   10970:	78e1      	ldrb	r1, [r4, #3]
   10972:	78a0      	ldrb	r0, [r4, #2]
   10974:	7867      	ldrb	r7, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   10976:	f10d 0c1c 	add.w	ip, sp, #28
   1097a:	f8cd c014 	str.w	ip, [sp, #20]
   1097e:	9704      	str	r7, [sp, #16]
   10980:	9003      	str	r0, [sp, #12]
   10982:	9102      	str	r1, [sp, #8]
   10984:	9201      	str	r2, [sp, #4]
   10986:	9300      	str	r3, [sp, #0]
   10988:	79a3      	ldrb	r3, [r4, #6]
   1098a:	4a0f      	ldr	r2, [pc, #60]	; (109c8 <bt_addr_le_to_str+0x7c>)
   1098c:	4631      	mov	r1, r6
   1098e:	4628      	mov	r0, r5
   10990:	f017 fb19 	bl	27fc6 <snprintk>
}
   10994:	b00b      	add	sp, #44	; 0x2c
   10996:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
   10998:	490c      	ldr	r1, [pc, #48]	; (109cc <bt_addr_le_to_str+0x80>)
   1099a:	a807      	add	r0, sp, #28
   1099c:	f019 f88a 	bl	29ab4 <strcpy>
		break;
   109a0:	e7e4      	b.n	1096c <bt_addr_le_to_str+0x20>
		strcpy(type, "public-id");
   109a2:	490b      	ldr	r1, [pc, #44]	; (109d0 <bt_addr_le_to_str+0x84>)
   109a4:	a807      	add	r0, sp, #28
   109a6:	f019 f885 	bl	29ab4 <strcpy>
		break;
   109aa:	e7df      	b.n	1096c <bt_addr_le_to_str+0x20>
		strcpy(type, "random-id");
   109ac:	4909      	ldr	r1, [pc, #36]	; (109d4 <bt_addr_le_to_str+0x88>)
   109ae:	a807      	add	r0, sp, #28
   109b0:	f019 f880 	bl	29ab4 <strcpy>
		break;
   109b4:	e7da      	b.n	1096c <bt_addr_le_to_str+0x20>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   109b6:	4a08      	ldr	r2, [pc, #32]	; (109d8 <bt_addr_le_to_str+0x8c>)
   109b8:	210a      	movs	r1, #10
   109ba:	a807      	add	r0, sp, #28
   109bc:	f017 fb03 	bl	27fc6 <snprintk>
		break;
   109c0:	e7d4      	b.n	1096c <bt_addr_le_to_str+0x20>
   109c2:	bf00      	nop
   109c4:	000315a8 	.word	0x000315a8
   109c8:	000315d0 	.word	0x000315d0
   109cc:	000315b0 	.word	0x000315b0
   109d0:	000315b8 	.word	0x000315b8
   109d4:	000315c4 	.word	0x000315c4
   109d8:	000330c8 	.word	0x000330c8

000109dc <disconnected>:

// Here we clear the connected bit for the sensor that disconnected (self-explanatory),
// and we also clear the subscribe bit so that the logic in main will know we need to
// subscribe again if re-connected (although there is also be a callback indicating the unsubscribe event upon disconnect).
static void disconnected(struct bt_conn *conn, uint8_t reason)
{
   109dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   109de:	b08b      	sub	sp, #44	; 0x2c
   109e0:	af00      	add	r7, sp, #0
   109e2:	460d      	mov	r5, r1
	int err;

	char addr_str[BT_ADDR_LE_STR_LEN];

	const bt_addr_le_t *addr = bt_conn_get_dst(conn);
   109e4:	f019 fd17 	bl	2a416 <bt_conn_get_dst>
   109e8:	4604      	mov	r4, r0

	bt_addr_le_to_str(addr, addr_str, sizeof(addr_str));
   109ea:	221e      	movs	r2, #30
   109ec:	f107 0108 	add.w	r1, r7, #8
   109f0:	f7ff ffac 	bl	1094c <bt_addr_le_to_str>
	return memcmp(a, b, sizeof(*a));
   109f4:	2207      	movs	r2, #7
   109f6:	49b1      	ldr	r1, [pc, #708]	; (10cbc <disconnected+0x2e0>)
   109f8:	4620      	mov	r0, r4
   109fa:	f019 f8c8 	bl	29b8e <memcmp>

	if (bt_addr_le_eq(addr, &IFL_bt_addr)) {
   109fe:	2800      	cmp	r0, #0
   10a00:	f040 809c 	bne.w	10b3c <disconnected+0x160>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   10a04:	4bae      	ldr	r3, [pc, #696]	; (10cc0 <disconnected+0x2e4>)
   10a06:	f3bf 8f5b 	dmb	ish
   10a0a:	e853 2f00 	ldrex	r2, [r3]
   10a0e:	f022 0201 	bic.w	r2, r2, #1
   10a12:	e843 2100 	strex	r1, r2, [r3]
   10a16:	2900      	cmp	r1, #0
   10a18:	d1f7      	bne.n	10a0a <disconnected+0x2e>
   10a1a:	f3bf 8f5b 	dmb	ish
   10a1e:	f3bf 8f5b 	dmb	ish
   10a22:	e853 1f00 	ldrex	r1, [r3]
   10a26:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
   10a2a:	e843 1200 	strex	r2, r1, [r3]
   10a2e:	2a00      	cmp	r2, #0
   10a30:	d1f7      	bne.n	10a22 <disconnected+0x46>
   10a32:	f3bf 8f5b 	dmb	ish

		atomic_clear_bit(flags, IFL_CONNECTED_FLAG);
		atomic_clear_bit(flags, IFL_SUBSCRIBED_FLAG);
		LOG_INF("Internal FL disconnected, addr: %s (reason 0x%02x)", addr_str, reason);
   10a36:	466c      	mov	r4, sp
   10a38:	2300      	movs	r3, #0
   10a3a:	713b      	strb	r3, [r7, #4]
   10a3c:	2302      	movs	r3, #2
   10a3e:	717b      	strb	r3, [r7, #5]
   10a40:	b08a      	sub	sp, #40	; 0x28
   10a42:	46ec      	mov	ip, sp
   10a44:	f11c 0210 	adds.w	r2, ip, #16
   10a48:	d01a      	beq.n	10a80 <disconnected+0xa4>
   10a4a:	2012      	movs	r0, #18
   10a4c:	b122      	cbz	r2, 10a58 <disconnected+0x7c>
   10a4e:	2804      	cmp	r0, #4
   10a50:	dd02      	ble.n	10a58 <disconnected+0x7c>
   10a52:	4b9c      	ldr	r3, [pc, #624]	; (10cc4 <disconnected+0x2e8>)
   10a54:	f8cc 3014 	str.w	r3, [ip, #20]
   10a58:	2300      	movs	r3, #0
   10a5a:	703b      	strb	r3, [r7, #0]
   10a5c:	2302      	movs	r3, #2
   10a5e:	707b      	strb	r3, [r7, #1]
   10a60:	b1da      	cbz	r2, 10a9a <disconnected+0xbe>
   10a62:	4603      	mov	r3, r0
   10a64:	2808      	cmp	r0, #8
   10a66:	dd03      	ble.n	10a70 <disconnected+0x94>
   10a68:	f107 0108 	add.w	r1, r7, #8
   10a6c:	f8cc 1018 	str.w	r1, [ip, #24]
   10a70:	2b0c      	cmp	r3, #12
   10a72:	dd01      	ble.n	10a78 <disconnected+0x9c>
   10a74:	f8cc 501c 	str.w	r5, [ip, #28]
   10a78:	f10c 0320 	add.w	r3, ip, #32
   10a7c:	2100      	movs	r1, #0
   10a7e:	e00a      	b.n	10a96 <disconnected+0xba>
   10a80:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   10a84:	e7e2      	b.n	10a4c <disconnected+0x70>
   10a86:	f101 0528 	add.w	r5, r1, #40	; 0x28
   10a8a:	443d      	add	r5, r7
   10a8c:	f815 5c28 	ldrb.w	r5, [r5, #-40]
   10a90:	f803 5b01 	strb.w	r5, [r3], #1
   10a94:	3101      	adds	r1, #1
   10a96:	2901      	cmp	r1, #1
   10a98:	d9f5      	bls.n	10a86 <disconnected+0xaa>
   10a9a:	2811      	cmp	r0, #17
   10a9c:	dd4b      	ble.n	10b36 <disconnected+0x15a>
   10a9e:	2312      	movs	r3, #18
   10aa0:	b14a      	cbz	r2, 10ab6 <disconnected+0xda>
   10aa2:	2104      	movs	r1, #4
   10aa4:	7139      	strb	r1, [r7, #4]
   10aa6:	2100      	movs	r1, #0
   10aa8:	7179      	strb	r1, [r7, #5]
   10aaa:	71b9      	strb	r1, [r7, #6]
   10aac:	2101      	movs	r1, #1
   10aae:	71f9      	strb	r1, [r7, #7]
   10ab0:	6878      	ldr	r0, [r7, #4]
   10ab2:	f8cc 0010 	str.w	r0, [ip, #16]
   10ab6:	2100      	movs	r1, #0
   10ab8:	f36f 0100 	bfc	r1, #0, #1
   10abc:	f36f 0141 	bfc	r1, #1, #1
   10ac0:	f36f 0182 	bfc	r1, #2, #1
   10ac4:	f36f 01c5 	bfc	r1, #3, #3
   10ac8:	2003      	movs	r0, #3
   10aca:	f360 1188 	bfi	r1, r0, #6, #3
   10ace:	f3c3 0309 	ubfx	r3, r3, #0, #10
   10ad2:	f363 2152 	bfi	r1, r3, #9, #10
   10ad6:	f36f 41de 	bfc	r1, #19, #12
   10ada:	f36f 71df 	bfc	r1, #31, #1
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
   10ade:	2300      	movs	r3, #0
   10ae0:	4879      	ldr	r0, [pc, #484]	; (10cc8 <disconnected+0x2ec>)
   10ae2:	f018 fb92 	bl	2920a <z_impl_z_log_msg_static_create>
   10ae6:	46a5      	mov	sp, r4
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   10ae8:	f3bf 8f5b 	dmb	ish
   10aec:	4b74      	ldr	r3, [pc, #464]	; (10cc0 <disconnected+0x2e4>)
   10aee:	681b      	ldr	r3, [r3, #0]
   10af0:	f3bf 8f5b 	dmb	ish
	}


	// see note in connected(), it would be nice to remove the below if the BT thread can be made to prioritize notifications over scanning
	// if we lost a sensor we want to have, stop slow scanning and start fast scanning to get it connected again quickly
	if (!(atomic_test_bit(flags, EFL_CONNECTED_FLAG) && atomic_test_bit(flags, EFR_CONNECTED_FLAG))) {
   10af4:	f013 0f10 	tst.w	r3, #16
   10af8:	d008      	beq.n	10b0c <disconnected+0x130>
   10afa:	f3bf 8f5b 	dmb	ish
   10afe:	4b70      	ldr	r3, [pc, #448]	; (10cc0 <disconnected+0x2e4>)
   10b00:	681b      	ldr	r3, [r3, #0]
   10b02:	f3bf 8f5b 	dmb	ish
   10b06:	f013 0f20 	tst.w	r3, #32
   10b0a:	d111      	bne.n	10b30 <disconnected+0x154>

		err = bt_conn_create_auto_stop();
   10b0c:	f009 fa96 	bl	1a03c <bt_conn_create_auto_stop>
		if (err) {
   10b10:	4605      	mov	r5, r0
   10b12:	2800      	cmp	r0, #0
   10b14:	f040 83e3 	bne.w	112de <disconnected+0x902>
			LOG_ERR("Failed to stop automatically connecting (err %d)", err);
		}

		scan_param.interval = BT_GAP_SCAN_FAST_INTERVAL;
   10b18:	486c      	ldr	r0, [pc, #432]	; (10ccc <disconnected+0x2f0>)
   10b1a:	2360      	movs	r3, #96	; 0x60
   10b1c:	8083      	strh	r3, [r0, #4]
		scan_param.window = BT_GAP_SCAN_FAST_WINDOW;
   10b1e:	2330      	movs	r3, #48	; 0x30
   10b20:	80c3      	strh	r3, [r0, #6]
		err = bt_conn_le_create_auto(&scan_param, &conn_param);
   10b22:	496b      	ldr	r1, [pc, #428]	; (10cd0 <disconnected+0x2f4>)
   10b24:	f009 f9d8 	bl	19ed8 <bt_conn_le_create_auto>
		if (err) {
   10b28:	4605      	mov	r5, r0
   10b2a:	2800      	cmp	r0, #0
   10b2c:	f040 8416 	bne.w	1135c <disconnected+0x980>
			LOG_ERR("Failed to start automatically connecting (err %d)", err);
		}

	}

}
   10b30:	372c      	adds	r7, #44	; 0x2c
   10b32:	46bd      	mov	sp, r7
   10b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_INF("Internal FL disconnected, addr: %s (reason 0x%02x)", addr_str, reason);
   10b36:	f06f 031b 	mvn.w	r3, #27
   10b3a:	e7b1      	b.n	10aa0 <disconnected+0xc4>
   10b3c:	2207      	movs	r2, #7
   10b3e:	4965      	ldr	r1, [pc, #404]	; (10cd4 <disconnected+0x2f8>)
   10b40:	4620      	mov	r0, r4
   10b42:	f019 f824 	bl	29b8e <memcmp>
	} else if (bt_addr_le_eq(addr, &IFR_bt_addr)) {
   10b46:	2800      	cmp	r0, #0
   10b48:	d171      	bne.n	10c2e <disconnected+0x252>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   10b4a:	4b5d      	ldr	r3, [pc, #372]	; (10cc0 <disconnected+0x2e4>)
   10b4c:	f3bf 8f5b 	dmb	ish
   10b50:	e853 2f00 	ldrex	r2, [r3]
   10b54:	f022 0202 	bic.w	r2, r2, #2
   10b58:	e843 2100 	strex	r1, r2, [r3]
   10b5c:	2900      	cmp	r1, #0
   10b5e:	d1f7      	bne.n	10b50 <disconnected+0x174>
   10b60:	f3bf 8f5b 	dmb	ish
   10b64:	f3bf 8f5b 	dmb	ish
   10b68:	e853 1f00 	ldrex	r1, [r3]
   10b6c:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
   10b70:	e843 1200 	strex	r2, r1, [r3]
   10b74:	2a00      	cmp	r2, #0
   10b76:	d1f7      	bne.n	10b68 <disconnected+0x18c>
   10b78:	f3bf 8f5b 	dmb	ish
		LOG_INF("Internal FR disconnected, addr: %s (reason 0x%02x)", addr_str, reason);
   10b7c:	466e      	mov	r6, sp
   10b7e:	2300      	movs	r3, #0
   10b80:	713b      	strb	r3, [r7, #4]
   10b82:	2302      	movs	r3, #2
   10b84:	717b      	strb	r3, [r7, #5]
   10b86:	b08a      	sub	sp, #40	; 0x28
   10b88:	466c      	mov	r4, sp
   10b8a:	f114 0210 	adds.w	r2, r4, #16
   10b8e:	d021      	beq.n	10bd4 <disconnected+0x1f8>
   10b90:	2012      	movs	r0, #18
   10b92:	b11a      	cbz	r2, 10b9c <disconnected+0x1c0>
   10b94:	2804      	cmp	r0, #4
   10b96:	dd01      	ble.n	10b9c <disconnected+0x1c0>
   10b98:	4b4f      	ldr	r3, [pc, #316]	; (10cd8 <disconnected+0x2fc>)
   10b9a:	6163      	str	r3, [r4, #20]
   10b9c:	2300      	movs	r3, #0
   10b9e:	703b      	strb	r3, [r7, #0]
   10ba0:	2302      	movs	r3, #2
   10ba2:	707b      	strb	r3, [r7, #1]
   10ba4:	b1ca      	cbz	r2, 10bda <disconnected+0x1fe>
   10ba6:	4603      	mov	r3, r0
   10ba8:	2808      	cmp	r0, #8
   10baa:	dd02      	ble.n	10bb2 <disconnected+0x1d6>
   10bac:	f107 0108 	add.w	r1, r7, #8
   10bb0:	61a1      	str	r1, [r4, #24]
   10bb2:	2b0c      	cmp	r3, #12
   10bb4:	dd00      	ble.n	10bb8 <disconnected+0x1dc>
   10bb6:	61e5      	str	r5, [r4, #28]
   10bb8:	f104 0320 	add.w	r3, r4, #32
   10bbc:	2100      	movs	r1, #0
   10bbe:	2901      	cmp	r1, #1
   10bc0:	d80b      	bhi.n	10bda <disconnected+0x1fe>
   10bc2:	f101 0528 	add.w	r5, r1, #40	; 0x28
   10bc6:	443d      	add	r5, r7
   10bc8:	f815 5c28 	ldrb.w	r5, [r5, #-40]
   10bcc:	f803 5b01 	strb.w	r5, [r3], #1
   10bd0:	3101      	adds	r1, #1
   10bd2:	e7f4      	b.n	10bbe <disconnected+0x1e2>
   10bd4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   10bd8:	e7db      	b.n	10b92 <disconnected+0x1b6>
   10bda:	2811      	cmp	r0, #17
   10bdc:	dd24      	ble.n	10c28 <disconnected+0x24c>
   10bde:	2312      	movs	r3, #18
   10be0:	b142      	cbz	r2, 10bf4 <disconnected+0x218>
   10be2:	2104      	movs	r1, #4
   10be4:	7139      	strb	r1, [r7, #4]
   10be6:	2100      	movs	r1, #0
   10be8:	7179      	strb	r1, [r7, #5]
   10bea:	71b9      	strb	r1, [r7, #6]
   10bec:	2101      	movs	r1, #1
   10bee:	71f9      	strb	r1, [r7, #7]
   10bf0:	6878      	ldr	r0, [r7, #4]
   10bf2:	6120      	str	r0, [r4, #16]
   10bf4:	2100      	movs	r1, #0
   10bf6:	f36f 0100 	bfc	r1, #0, #1
   10bfa:	f36f 0141 	bfc	r1, #1, #1
   10bfe:	f36f 0182 	bfc	r1, #2, #1
   10c02:	f36f 01c5 	bfc	r1, #3, #3
   10c06:	2003      	movs	r0, #3
   10c08:	f360 1188 	bfi	r1, r0, #6, #3
   10c0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
   10c10:	f363 2152 	bfi	r1, r3, #9, #10
   10c14:	f36f 41de 	bfc	r1, #19, #12
   10c18:	f36f 71df 	bfc	r1, #31, #1
   10c1c:	2300      	movs	r3, #0
   10c1e:	482a      	ldr	r0, [pc, #168]	; (10cc8 <disconnected+0x2ec>)
   10c20:	f018 faf3 	bl	2920a <z_impl_z_log_msg_static_create>
   10c24:	46b5      	mov	sp, r6
   10c26:	e75f      	b.n	10ae8 <disconnected+0x10c>
   10c28:	f06f 031b 	mvn.w	r3, #27
   10c2c:	e7d8      	b.n	10be0 <disconnected+0x204>
   10c2e:	2207      	movs	r2, #7
   10c30:	492a      	ldr	r1, [pc, #168]	; (10cdc <disconnected+0x300>)
   10c32:	4620      	mov	r0, r4
   10c34:	f018 ffab 	bl	29b8e <memcmp>
	} else if (bt_addr_le_eq(addr, &IRL_bt_addr)) {
   10c38:	2800      	cmp	r0, #0
   10c3a:	f040 8087 	bne.w	10d4c <disconnected+0x370>
   10c3e:	4b20      	ldr	r3, [pc, #128]	; (10cc0 <disconnected+0x2e4>)
   10c40:	f3bf 8f5b 	dmb	ish
   10c44:	e853 2f00 	ldrex	r2, [r3]
   10c48:	f022 0204 	bic.w	r2, r2, #4
   10c4c:	e843 2100 	strex	r1, r2, [r3]
   10c50:	2900      	cmp	r1, #0
   10c52:	d1f7      	bne.n	10c44 <disconnected+0x268>
   10c54:	f3bf 8f5b 	dmb	ish
   10c58:	f3bf 8f5b 	dmb	ish
   10c5c:	e853 1f00 	ldrex	r1, [r3]
   10c60:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   10c64:	e843 1200 	strex	r2, r1, [r3]
   10c68:	2a00      	cmp	r2, #0
   10c6a:	d1f7      	bne.n	10c5c <disconnected+0x280>
   10c6c:	f3bf 8f5b 	dmb	ish
		LOG_INF("Internal RL disconnected, addr: %s (reason 0x%02x)", addr_str, reason);
   10c70:	466e      	mov	r6, sp
   10c72:	2300      	movs	r3, #0
   10c74:	713b      	strb	r3, [r7, #4]
   10c76:	2302      	movs	r3, #2
   10c78:	717b      	strb	r3, [r7, #5]
   10c7a:	b08a      	sub	sp, #40	; 0x28
   10c7c:	466c      	mov	r4, sp
   10c7e:	f114 0210 	adds.w	r2, r4, #16
   10c82:	d017      	beq.n	10cb4 <disconnected+0x2d8>
   10c84:	2012      	movs	r0, #18
   10c86:	b11a      	cbz	r2, 10c90 <disconnected+0x2b4>
   10c88:	2804      	cmp	r0, #4
   10c8a:	dd01      	ble.n	10c90 <disconnected+0x2b4>
   10c8c:	4b14      	ldr	r3, [pc, #80]	; (10ce0 <disconnected+0x304>)
   10c8e:	6163      	str	r3, [r4, #20]
   10c90:	2300      	movs	r3, #0
   10c92:	703b      	strb	r3, [r7, #0]
   10c94:	2302      	movs	r3, #2
   10c96:	707b      	strb	r3, [r7, #1]
   10c98:	b372      	cbz	r2, 10cf8 <disconnected+0x31c>
   10c9a:	4603      	mov	r3, r0
   10c9c:	2808      	cmp	r0, #8
   10c9e:	dd02      	ble.n	10ca6 <disconnected+0x2ca>
   10ca0:	f107 0108 	add.w	r1, r7, #8
   10ca4:	61a1      	str	r1, [r4, #24]
   10ca6:	2b0c      	cmp	r3, #12
   10ca8:	dd00      	ble.n	10cac <disconnected+0x2d0>
   10caa:	61e5      	str	r5, [r4, #28]
   10cac:	f104 0320 	add.w	r3, r4, #32
   10cb0:	2100      	movs	r1, #0
   10cb2:	e01f      	b.n	10cf4 <disconnected+0x318>
   10cb4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   10cb8:	e7e5      	b.n	10c86 <disconnected+0x2aa>
   10cba:	bf00      	nop
   10cbc:	20007934 	.word	0x20007934
   10cc0:	2000794c 	.word	0x2000794c
   10cc4:	000315f4 	.word	0x000315f4
   10cc8:	000314f8 	.word	0x000314f8
   10ccc:	2000793c 	.word	0x2000793c
   10cd0:	20000648 	.word	0x20000648
   10cd4:	2000792c 	.word	0x2000792c
   10cd8:	00031628 	.word	0x00031628
   10cdc:	20007924 	.word	0x20007924
   10ce0:	0003165c 	.word	0x0003165c
   10ce4:	f101 0528 	add.w	r5, r1, #40	; 0x28
   10ce8:	443d      	add	r5, r7
   10cea:	f815 5c28 	ldrb.w	r5, [r5, #-40]
   10cee:	f803 5b01 	strb.w	r5, [r3], #1
   10cf2:	3101      	adds	r1, #1
   10cf4:	2901      	cmp	r1, #1
   10cf6:	d9f5      	bls.n	10ce4 <disconnected+0x308>
   10cf8:	2811      	cmp	r0, #17
   10cfa:	dd24      	ble.n	10d46 <disconnected+0x36a>
   10cfc:	2312      	movs	r3, #18
   10cfe:	b142      	cbz	r2, 10d12 <disconnected+0x336>
   10d00:	2104      	movs	r1, #4
   10d02:	7139      	strb	r1, [r7, #4]
   10d04:	2100      	movs	r1, #0
   10d06:	7179      	strb	r1, [r7, #5]
   10d08:	71b9      	strb	r1, [r7, #6]
   10d0a:	2101      	movs	r1, #1
   10d0c:	71f9      	strb	r1, [r7, #7]
   10d0e:	6878      	ldr	r0, [r7, #4]
   10d10:	6120      	str	r0, [r4, #16]
   10d12:	2100      	movs	r1, #0
   10d14:	f36f 0100 	bfc	r1, #0, #1
   10d18:	f36f 0141 	bfc	r1, #1, #1
   10d1c:	f36f 0182 	bfc	r1, #2, #1
   10d20:	f36f 01c5 	bfc	r1, #3, #3
   10d24:	2003      	movs	r0, #3
   10d26:	f360 1188 	bfi	r1, r0, #6, #3
   10d2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
   10d2e:	f363 2152 	bfi	r1, r3, #9, #10
   10d32:	f36f 41de 	bfc	r1, #19, #12
   10d36:	f36f 71df 	bfc	r1, #31, #1
   10d3a:	2300      	movs	r3, #0
   10d3c:	48b9      	ldr	r0, [pc, #740]	; (11024 <disconnected+0x648>)
   10d3e:	f018 fa64 	bl	2920a <z_impl_z_log_msg_static_create>
   10d42:	46b5      	mov	sp, r6
   10d44:	e6d0      	b.n	10ae8 <disconnected+0x10c>
   10d46:	f06f 031b 	mvn.w	r3, #27
   10d4a:	e7d8      	b.n	10cfe <disconnected+0x322>
   10d4c:	2207      	movs	r2, #7
   10d4e:	49b6      	ldr	r1, [pc, #728]	; (11028 <disconnected+0x64c>)
   10d50:	4620      	mov	r0, r4
   10d52:	f018 ff1c 	bl	29b8e <memcmp>
	} else if (bt_addr_le_eq(addr, &IRR_bt_addr)) {
   10d56:	2800      	cmp	r0, #0
   10d58:	d171      	bne.n	10e3e <disconnected+0x462>
   10d5a:	4bb4      	ldr	r3, [pc, #720]	; (1102c <disconnected+0x650>)
   10d5c:	f3bf 8f5b 	dmb	ish
   10d60:	e853 2f00 	ldrex	r2, [r3]
   10d64:	f022 0208 	bic.w	r2, r2, #8
   10d68:	e843 2100 	strex	r1, r2, [r3]
   10d6c:	2900      	cmp	r1, #0
   10d6e:	d1f7      	bne.n	10d60 <disconnected+0x384>
   10d70:	f3bf 8f5b 	dmb	ish
   10d74:	f3bf 8f5b 	dmb	ish
   10d78:	e853 1f00 	ldrex	r1, [r3]
   10d7c:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   10d80:	e843 1200 	strex	r2, r1, [r3]
   10d84:	2a00      	cmp	r2, #0
   10d86:	d1f7      	bne.n	10d78 <disconnected+0x39c>
   10d88:	f3bf 8f5b 	dmb	ish
		LOG_INF("Internal RR disconnected, addr: %s (reason 0x%02x)", addr_str, reason);
   10d8c:	466e      	mov	r6, sp
   10d8e:	2300      	movs	r3, #0
   10d90:	713b      	strb	r3, [r7, #4]
   10d92:	2302      	movs	r3, #2
   10d94:	717b      	strb	r3, [r7, #5]
   10d96:	b08a      	sub	sp, #40	; 0x28
   10d98:	466c      	mov	r4, sp
   10d9a:	f114 0210 	adds.w	r2, r4, #16
   10d9e:	d017      	beq.n	10dd0 <disconnected+0x3f4>
   10da0:	2012      	movs	r0, #18
   10da2:	b11a      	cbz	r2, 10dac <disconnected+0x3d0>
   10da4:	2804      	cmp	r0, #4
   10da6:	dd01      	ble.n	10dac <disconnected+0x3d0>
   10da8:	4ba1      	ldr	r3, [pc, #644]	; (11030 <disconnected+0x654>)
   10daa:	6163      	str	r3, [r4, #20]
   10dac:	2300      	movs	r3, #0
   10dae:	703b      	strb	r3, [r7, #0]
   10db0:	2302      	movs	r3, #2
   10db2:	707b      	strb	r3, [r7, #1]
   10db4:	b1ca      	cbz	r2, 10dea <disconnected+0x40e>
   10db6:	4603      	mov	r3, r0
   10db8:	2808      	cmp	r0, #8
   10dba:	dd02      	ble.n	10dc2 <disconnected+0x3e6>
   10dbc:	f107 0108 	add.w	r1, r7, #8
   10dc0:	61a1      	str	r1, [r4, #24]
   10dc2:	2b0c      	cmp	r3, #12
   10dc4:	dd00      	ble.n	10dc8 <disconnected+0x3ec>
   10dc6:	61e5      	str	r5, [r4, #28]
   10dc8:	f104 0320 	add.w	r3, r4, #32
   10dcc:	2100      	movs	r1, #0
   10dce:	e00a      	b.n	10de6 <disconnected+0x40a>
   10dd0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   10dd4:	e7e5      	b.n	10da2 <disconnected+0x3c6>
   10dd6:	f101 0528 	add.w	r5, r1, #40	; 0x28
   10dda:	443d      	add	r5, r7
   10ddc:	f815 5c28 	ldrb.w	r5, [r5, #-40]
   10de0:	f803 5b01 	strb.w	r5, [r3], #1
   10de4:	3101      	adds	r1, #1
   10de6:	2901      	cmp	r1, #1
   10de8:	d9f5      	bls.n	10dd6 <disconnected+0x3fa>
   10dea:	2811      	cmp	r0, #17
   10dec:	dd24      	ble.n	10e38 <disconnected+0x45c>
   10dee:	2312      	movs	r3, #18
   10df0:	b142      	cbz	r2, 10e04 <disconnected+0x428>
   10df2:	2104      	movs	r1, #4
   10df4:	7139      	strb	r1, [r7, #4]
   10df6:	2100      	movs	r1, #0
   10df8:	7179      	strb	r1, [r7, #5]
   10dfa:	71b9      	strb	r1, [r7, #6]
   10dfc:	2101      	movs	r1, #1
   10dfe:	71f9      	strb	r1, [r7, #7]
   10e00:	6878      	ldr	r0, [r7, #4]
   10e02:	6120      	str	r0, [r4, #16]
   10e04:	2100      	movs	r1, #0
   10e06:	f36f 0100 	bfc	r1, #0, #1
   10e0a:	f36f 0141 	bfc	r1, #1, #1
   10e0e:	f36f 0182 	bfc	r1, #2, #1
   10e12:	f36f 01c5 	bfc	r1, #3, #3
   10e16:	2003      	movs	r0, #3
   10e18:	f360 1188 	bfi	r1, r0, #6, #3
   10e1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
   10e20:	f363 2152 	bfi	r1, r3, #9, #10
   10e24:	f36f 41de 	bfc	r1, #19, #12
   10e28:	f36f 71df 	bfc	r1, #31, #1
   10e2c:	2300      	movs	r3, #0
   10e2e:	487d      	ldr	r0, [pc, #500]	; (11024 <disconnected+0x648>)
   10e30:	f018 f9eb 	bl	2920a <z_impl_z_log_msg_static_create>
   10e34:	46b5      	mov	sp, r6
   10e36:	e657      	b.n	10ae8 <disconnected+0x10c>
   10e38:	f06f 031b 	mvn.w	r3, #27
   10e3c:	e7d8      	b.n	10df0 <disconnected+0x414>
   10e3e:	2207      	movs	r2, #7
   10e40:	497c      	ldr	r1, [pc, #496]	; (11034 <disconnected+0x658>)
   10e42:	4620      	mov	r0, r4
   10e44:	f018 fea3 	bl	29b8e <memcmp>
	} else if (bt_addr_le_eq(addr, &EFL_bt_addr)) {
   10e48:	2800      	cmp	r0, #0
   10e4a:	d171      	bne.n	10f30 <disconnected+0x554>
   10e4c:	4b77      	ldr	r3, [pc, #476]	; (1102c <disconnected+0x650>)
   10e4e:	f3bf 8f5b 	dmb	ish
   10e52:	e853 2f00 	ldrex	r2, [r3]
   10e56:	f022 0210 	bic.w	r2, r2, #16
   10e5a:	e843 2100 	strex	r1, r2, [r3]
   10e5e:	2900      	cmp	r1, #0
   10e60:	d1f7      	bne.n	10e52 <disconnected+0x476>
   10e62:	f3bf 8f5b 	dmb	ish
   10e66:	f3bf 8f5b 	dmb	ish
   10e6a:	e853 1f00 	ldrex	r1, [r3]
   10e6e:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
   10e72:	e843 1200 	strex	r2, r1, [r3]
   10e76:	2a00      	cmp	r2, #0
   10e78:	d1f7      	bne.n	10e6a <disconnected+0x48e>
   10e7a:	f3bf 8f5b 	dmb	ish
		LOG_INF("External FL disconnected, addr: %s (reason 0x%02x)", addr_str, reason);
   10e7e:	466e      	mov	r6, sp
   10e80:	2300      	movs	r3, #0
   10e82:	713b      	strb	r3, [r7, #4]
   10e84:	2302      	movs	r3, #2
   10e86:	717b      	strb	r3, [r7, #5]
   10e88:	b08a      	sub	sp, #40	; 0x28
   10e8a:	466c      	mov	r4, sp
   10e8c:	f114 0210 	adds.w	r2, r4, #16
   10e90:	d017      	beq.n	10ec2 <disconnected+0x4e6>
   10e92:	2012      	movs	r0, #18
   10e94:	b11a      	cbz	r2, 10e9e <disconnected+0x4c2>
   10e96:	2804      	cmp	r0, #4
   10e98:	dd01      	ble.n	10e9e <disconnected+0x4c2>
   10e9a:	4b67      	ldr	r3, [pc, #412]	; (11038 <disconnected+0x65c>)
   10e9c:	6163      	str	r3, [r4, #20]
   10e9e:	2300      	movs	r3, #0
   10ea0:	703b      	strb	r3, [r7, #0]
   10ea2:	2302      	movs	r3, #2
   10ea4:	707b      	strb	r3, [r7, #1]
   10ea6:	b1ca      	cbz	r2, 10edc <disconnected+0x500>
   10ea8:	4603      	mov	r3, r0
   10eaa:	2808      	cmp	r0, #8
   10eac:	dd02      	ble.n	10eb4 <disconnected+0x4d8>
   10eae:	f107 0108 	add.w	r1, r7, #8
   10eb2:	61a1      	str	r1, [r4, #24]
   10eb4:	2b0c      	cmp	r3, #12
   10eb6:	dd00      	ble.n	10eba <disconnected+0x4de>
   10eb8:	61e5      	str	r5, [r4, #28]
   10eba:	f104 0320 	add.w	r3, r4, #32
   10ebe:	2100      	movs	r1, #0
   10ec0:	e00a      	b.n	10ed8 <disconnected+0x4fc>
   10ec2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   10ec6:	e7e5      	b.n	10e94 <disconnected+0x4b8>
   10ec8:	f101 0528 	add.w	r5, r1, #40	; 0x28
   10ecc:	443d      	add	r5, r7
   10ece:	f815 5c28 	ldrb.w	r5, [r5, #-40]
   10ed2:	f803 5b01 	strb.w	r5, [r3], #1
   10ed6:	3101      	adds	r1, #1
   10ed8:	2901      	cmp	r1, #1
   10eda:	d9f5      	bls.n	10ec8 <disconnected+0x4ec>
   10edc:	2811      	cmp	r0, #17
   10ede:	dd24      	ble.n	10f2a <disconnected+0x54e>
   10ee0:	2312      	movs	r3, #18
   10ee2:	b142      	cbz	r2, 10ef6 <disconnected+0x51a>
   10ee4:	2104      	movs	r1, #4
   10ee6:	7139      	strb	r1, [r7, #4]
   10ee8:	2100      	movs	r1, #0
   10eea:	7179      	strb	r1, [r7, #5]
   10eec:	71b9      	strb	r1, [r7, #6]
   10eee:	2101      	movs	r1, #1
   10ef0:	71f9      	strb	r1, [r7, #7]
   10ef2:	6878      	ldr	r0, [r7, #4]
   10ef4:	6120      	str	r0, [r4, #16]
   10ef6:	2100      	movs	r1, #0
   10ef8:	f36f 0100 	bfc	r1, #0, #1
   10efc:	f36f 0141 	bfc	r1, #1, #1
   10f00:	f36f 0182 	bfc	r1, #2, #1
   10f04:	f36f 01c5 	bfc	r1, #3, #3
   10f08:	2003      	movs	r0, #3
   10f0a:	f360 1188 	bfi	r1, r0, #6, #3
   10f0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
   10f12:	f363 2152 	bfi	r1, r3, #9, #10
   10f16:	f36f 41de 	bfc	r1, #19, #12
   10f1a:	f36f 71df 	bfc	r1, #31, #1
   10f1e:	2300      	movs	r3, #0
   10f20:	4840      	ldr	r0, [pc, #256]	; (11024 <disconnected+0x648>)
   10f22:	f018 f972 	bl	2920a <z_impl_z_log_msg_static_create>
   10f26:	46b5      	mov	sp, r6
   10f28:	e5de      	b.n	10ae8 <disconnected+0x10c>
   10f2a:	f06f 031b 	mvn.w	r3, #27
   10f2e:	e7d8      	b.n	10ee2 <disconnected+0x506>
   10f30:	2207      	movs	r2, #7
   10f32:	4942      	ldr	r1, [pc, #264]	; (1103c <disconnected+0x660>)
   10f34:	4620      	mov	r0, r4
   10f36:	f018 fe2a 	bl	29b8e <memcmp>
	} else if (bt_addr_le_eq(addr, &EFR_bt_addr)) {
   10f3a:	2800      	cmp	r0, #0
   10f3c:	f040 8082 	bne.w	11044 <disconnected+0x668>
   10f40:	4b3a      	ldr	r3, [pc, #232]	; (1102c <disconnected+0x650>)
   10f42:	f3bf 8f5b 	dmb	ish
   10f46:	e853 2f00 	ldrex	r2, [r3]
   10f4a:	f022 0220 	bic.w	r2, r2, #32
   10f4e:	e843 2100 	strex	r1, r2, [r3]
   10f52:	2900      	cmp	r1, #0
   10f54:	d1f7      	bne.n	10f46 <disconnected+0x56a>
   10f56:	f3bf 8f5b 	dmb	ish
   10f5a:	f3bf 8f5b 	dmb	ish
   10f5e:	e853 1f00 	ldrex	r1, [r3]
   10f62:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
   10f66:	e843 1200 	strex	r2, r1, [r3]
   10f6a:	2a00      	cmp	r2, #0
   10f6c:	d1f7      	bne.n	10f5e <disconnected+0x582>
   10f6e:	f3bf 8f5b 	dmb	ish
		LOG_INF("External FR disconnected, addr: %s (reason 0x%02x)", addr_str, reason);
   10f72:	466e      	mov	r6, sp
   10f74:	2300      	movs	r3, #0
   10f76:	713b      	strb	r3, [r7, #4]
   10f78:	2302      	movs	r3, #2
   10f7a:	717b      	strb	r3, [r7, #5]
   10f7c:	b08a      	sub	sp, #40	; 0x28
   10f7e:	466c      	mov	r4, sp
   10f80:	f114 0210 	adds.w	r2, r4, #16
   10f84:	d017      	beq.n	10fb6 <disconnected+0x5da>
   10f86:	2012      	movs	r0, #18
   10f88:	b11a      	cbz	r2, 10f92 <disconnected+0x5b6>
   10f8a:	2804      	cmp	r0, #4
   10f8c:	dd01      	ble.n	10f92 <disconnected+0x5b6>
   10f8e:	4b2c      	ldr	r3, [pc, #176]	; (11040 <disconnected+0x664>)
   10f90:	6163      	str	r3, [r4, #20]
   10f92:	2300      	movs	r3, #0
   10f94:	703b      	strb	r3, [r7, #0]
   10f96:	2302      	movs	r3, #2
   10f98:	707b      	strb	r3, [r7, #1]
   10f9a:	b1ca      	cbz	r2, 10fd0 <disconnected+0x5f4>
   10f9c:	4603      	mov	r3, r0
   10f9e:	2808      	cmp	r0, #8
   10fa0:	dd02      	ble.n	10fa8 <disconnected+0x5cc>
   10fa2:	f107 0108 	add.w	r1, r7, #8
   10fa6:	61a1      	str	r1, [r4, #24]
   10fa8:	2b0c      	cmp	r3, #12
   10faa:	dd00      	ble.n	10fae <disconnected+0x5d2>
   10fac:	61e5      	str	r5, [r4, #28]
   10fae:	f104 0320 	add.w	r3, r4, #32
   10fb2:	2100      	movs	r1, #0
   10fb4:	e00a      	b.n	10fcc <disconnected+0x5f0>
   10fb6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   10fba:	e7e5      	b.n	10f88 <disconnected+0x5ac>
   10fbc:	f101 0528 	add.w	r5, r1, #40	; 0x28
   10fc0:	443d      	add	r5, r7
   10fc2:	f815 5c28 	ldrb.w	r5, [r5, #-40]
   10fc6:	f803 5b01 	strb.w	r5, [r3], #1
   10fca:	3101      	adds	r1, #1
   10fcc:	2901      	cmp	r1, #1
   10fce:	d9f5      	bls.n	10fbc <disconnected+0x5e0>
   10fd0:	2811      	cmp	r0, #17
   10fd2:	dd24      	ble.n	1101e <disconnected+0x642>
   10fd4:	2312      	movs	r3, #18
   10fd6:	b142      	cbz	r2, 10fea <disconnected+0x60e>
   10fd8:	2104      	movs	r1, #4
   10fda:	7139      	strb	r1, [r7, #4]
   10fdc:	2100      	movs	r1, #0
   10fde:	7179      	strb	r1, [r7, #5]
   10fe0:	71b9      	strb	r1, [r7, #6]
   10fe2:	2101      	movs	r1, #1
   10fe4:	71f9      	strb	r1, [r7, #7]
   10fe6:	6878      	ldr	r0, [r7, #4]
   10fe8:	6120      	str	r0, [r4, #16]
   10fea:	2100      	movs	r1, #0
   10fec:	f36f 0100 	bfc	r1, #0, #1
   10ff0:	f36f 0141 	bfc	r1, #1, #1
   10ff4:	f36f 0182 	bfc	r1, #2, #1
   10ff8:	f36f 01c5 	bfc	r1, #3, #3
   10ffc:	2003      	movs	r0, #3
   10ffe:	f360 1188 	bfi	r1, r0, #6, #3
   11002:	f3c3 0309 	ubfx	r3, r3, #0, #10
   11006:	f363 2152 	bfi	r1, r3, #9, #10
   1100a:	f36f 41de 	bfc	r1, #19, #12
   1100e:	f36f 71df 	bfc	r1, #31, #1
   11012:	2300      	movs	r3, #0
   11014:	4803      	ldr	r0, [pc, #12]	; (11024 <disconnected+0x648>)
   11016:	f018 f8f8 	bl	2920a <z_impl_z_log_msg_static_create>
   1101a:	46b5      	mov	sp, r6
   1101c:	e564      	b.n	10ae8 <disconnected+0x10c>
   1101e:	f06f 031b 	mvn.w	r3, #27
   11022:	e7d8      	b.n	10fd6 <disconnected+0x5fa>
   11024:	000314f8 	.word	0x000314f8
   11028:	2000791c 	.word	0x2000791c
   1102c:	2000794c 	.word	0x2000794c
   11030:	00031690 	.word	0x00031690
   11034:	20007914 	.word	0x20007914
   11038:	000316c4 	.word	0x000316c4
   1103c:	2000790c 	.word	0x2000790c
   11040:	000316f8 	.word	0x000316f8
   11044:	2207      	movs	r2, #7
   11046:	49bd      	ldr	r1, [pc, #756]	; (1133c <disconnected+0x960>)
   11048:	4620      	mov	r0, r4
   1104a:	f018 fda0 	bl	29b8e <memcmp>
	} else if (bt_addr_le_eq(addr, &ERL_bt_addr)) {
   1104e:	2800      	cmp	r0, #0
   11050:	d171      	bne.n	11136 <disconnected+0x75a>
   11052:	4bbb      	ldr	r3, [pc, #748]	; (11340 <disconnected+0x964>)
   11054:	f3bf 8f5b 	dmb	ish
   11058:	e853 2f00 	ldrex	r2, [r3]
   1105c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   11060:	e843 2100 	strex	r1, r2, [r3]
   11064:	2900      	cmp	r1, #0
   11066:	d1f7      	bne.n	11058 <disconnected+0x67c>
   11068:	f3bf 8f5b 	dmb	ish
   1106c:	f3bf 8f5b 	dmb	ish
   11070:	e853 1f00 	ldrex	r1, [r3]
   11074:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
   11078:	e843 1200 	strex	r2, r1, [r3]
   1107c:	2a00      	cmp	r2, #0
   1107e:	d1f7      	bne.n	11070 <disconnected+0x694>
   11080:	f3bf 8f5b 	dmb	ish
		LOG_INF("External RL disconnected, addr: %s (reason 0x%02x)", addr_str, reason);
   11084:	466e      	mov	r6, sp
   11086:	2300      	movs	r3, #0
   11088:	713b      	strb	r3, [r7, #4]
   1108a:	2302      	movs	r3, #2
   1108c:	717b      	strb	r3, [r7, #5]
   1108e:	b08a      	sub	sp, #40	; 0x28
   11090:	466c      	mov	r4, sp
   11092:	f114 0210 	adds.w	r2, r4, #16
   11096:	d017      	beq.n	110c8 <disconnected+0x6ec>
   11098:	2012      	movs	r0, #18
   1109a:	b11a      	cbz	r2, 110a4 <disconnected+0x6c8>
   1109c:	2804      	cmp	r0, #4
   1109e:	dd01      	ble.n	110a4 <disconnected+0x6c8>
   110a0:	4ba8      	ldr	r3, [pc, #672]	; (11344 <disconnected+0x968>)
   110a2:	6163      	str	r3, [r4, #20]
   110a4:	2300      	movs	r3, #0
   110a6:	703b      	strb	r3, [r7, #0]
   110a8:	2302      	movs	r3, #2
   110aa:	707b      	strb	r3, [r7, #1]
   110ac:	b1ca      	cbz	r2, 110e2 <disconnected+0x706>
   110ae:	4603      	mov	r3, r0
   110b0:	2808      	cmp	r0, #8
   110b2:	dd02      	ble.n	110ba <disconnected+0x6de>
   110b4:	f107 0108 	add.w	r1, r7, #8
   110b8:	61a1      	str	r1, [r4, #24]
   110ba:	2b0c      	cmp	r3, #12
   110bc:	dd00      	ble.n	110c0 <disconnected+0x6e4>
   110be:	61e5      	str	r5, [r4, #28]
   110c0:	f104 0320 	add.w	r3, r4, #32
   110c4:	2100      	movs	r1, #0
   110c6:	e00a      	b.n	110de <disconnected+0x702>
   110c8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   110cc:	e7e5      	b.n	1109a <disconnected+0x6be>
   110ce:	f101 0528 	add.w	r5, r1, #40	; 0x28
   110d2:	443d      	add	r5, r7
   110d4:	f815 5c28 	ldrb.w	r5, [r5, #-40]
   110d8:	f803 5b01 	strb.w	r5, [r3], #1
   110dc:	3101      	adds	r1, #1
   110de:	2901      	cmp	r1, #1
   110e0:	d9f5      	bls.n	110ce <disconnected+0x6f2>
   110e2:	2811      	cmp	r0, #17
   110e4:	dd24      	ble.n	11130 <disconnected+0x754>
   110e6:	2312      	movs	r3, #18
   110e8:	b142      	cbz	r2, 110fc <disconnected+0x720>
   110ea:	2104      	movs	r1, #4
   110ec:	7139      	strb	r1, [r7, #4]
   110ee:	2100      	movs	r1, #0
   110f0:	7179      	strb	r1, [r7, #5]
   110f2:	71b9      	strb	r1, [r7, #6]
   110f4:	2101      	movs	r1, #1
   110f6:	71f9      	strb	r1, [r7, #7]
   110f8:	6878      	ldr	r0, [r7, #4]
   110fa:	6120      	str	r0, [r4, #16]
   110fc:	2100      	movs	r1, #0
   110fe:	f36f 0100 	bfc	r1, #0, #1
   11102:	f36f 0141 	bfc	r1, #1, #1
   11106:	f36f 0182 	bfc	r1, #2, #1
   1110a:	f36f 01c5 	bfc	r1, #3, #3
   1110e:	2003      	movs	r0, #3
   11110:	f360 1188 	bfi	r1, r0, #6, #3
   11114:	f3c3 0309 	ubfx	r3, r3, #0, #10
   11118:	f363 2152 	bfi	r1, r3, #9, #10
   1111c:	f36f 41de 	bfc	r1, #19, #12
   11120:	f36f 71df 	bfc	r1, #31, #1
   11124:	2300      	movs	r3, #0
   11126:	4888      	ldr	r0, [pc, #544]	; (11348 <disconnected+0x96c>)
   11128:	f018 f86f 	bl	2920a <z_impl_z_log_msg_static_create>
   1112c:	46b5      	mov	sp, r6
   1112e:	e4db      	b.n	10ae8 <disconnected+0x10c>
   11130:	f06f 031b 	mvn.w	r3, #27
   11134:	e7d8      	b.n	110e8 <disconnected+0x70c>
   11136:	2207      	movs	r2, #7
   11138:	4984      	ldr	r1, [pc, #528]	; (1134c <disconnected+0x970>)
   1113a:	4620      	mov	r0, r4
   1113c:	f018 fd27 	bl	29b8e <memcmp>
	} else if (bt_addr_le_eq(addr, &ERR_bt_addr)) {
   11140:	b320      	cbz	r0, 1118c <disconnected+0x7b0>
		LOG_WRN("UNRECOGNIZED SENSOR DISCONNECTED, addr: %s (reason 0x%02x)", addr_str, reason);
   11142:	466c      	mov	r4, sp
   11144:	2300      	movs	r3, #0
   11146:	713b      	strb	r3, [r7, #4]
   11148:	2302      	movs	r3, #2
   1114a:	717b      	strb	r3, [r7, #5]
   1114c:	b08a      	sub	sp, #40	; 0x28
   1114e:	466e      	mov	r6, sp
   11150:	f116 0210 	adds.w	r2, r6, #16
   11154:	f000 808c 	beq.w	11270 <disconnected+0x894>
   11158:	2012      	movs	r0, #18
   1115a:	b11a      	cbz	r2, 11164 <disconnected+0x788>
   1115c:	2804      	cmp	r0, #4
   1115e:	dd01      	ble.n	11164 <disconnected+0x788>
   11160:	4b7b      	ldr	r3, [pc, #492]	; (11350 <disconnected+0x974>)
   11162:	6173      	str	r3, [r6, #20]
   11164:	2300      	movs	r3, #0
   11166:	703b      	strb	r3, [r7, #0]
   11168:	2302      	movs	r3, #2
   1116a:	707b      	strb	r3, [r7, #1]
   1116c:	2a00      	cmp	r2, #0
   1116e:	f000 808c 	beq.w	1128a <disconnected+0x8ae>
   11172:	4603      	mov	r3, r0
   11174:	2808      	cmp	r0, #8
   11176:	dd02      	ble.n	1117e <disconnected+0x7a2>
   11178:	f107 0108 	add.w	r1, r7, #8
   1117c:	61b1      	str	r1, [r6, #24]
   1117e:	2b0c      	cmp	r3, #12
   11180:	dd00      	ble.n	11184 <disconnected+0x7a8>
   11182:	61f5      	str	r5, [r6, #28]
   11184:	f106 0320 	add.w	r3, r6, #32
   11188:	2100      	movs	r1, #0
   1118a:	e07c      	b.n	11286 <disconnected+0x8aa>
   1118c:	4b6c      	ldr	r3, [pc, #432]	; (11340 <disconnected+0x964>)
   1118e:	f3bf 8f5b 	dmb	ish
   11192:	e853 2f00 	ldrex	r2, [r3]
   11196:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   1119a:	e843 2100 	strex	r1, r2, [r3]
   1119e:	2900      	cmp	r1, #0
   111a0:	d1f7      	bne.n	11192 <disconnected+0x7b6>
   111a2:	f3bf 8f5b 	dmb	ish
   111a6:	f3bf 8f5b 	dmb	ish
   111aa:	e853 1f00 	ldrex	r1, [r3]
   111ae:	f421 3100 	bic.w	r1, r1, #131072	; 0x20000
   111b2:	e843 1200 	strex	r2, r1, [r3]
   111b6:	2a00      	cmp	r2, #0
   111b8:	d1f7      	bne.n	111aa <disconnected+0x7ce>
   111ba:	f3bf 8f5b 	dmb	ish
		LOG_INF("External RR disconnected, addr: %s (reason 0x%02x)", addr_str, reason);
   111be:	466e      	mov	r6, sp
   111c0:	2300      	movs	r3, #0
   111c2:	713b      	strb	r3, [r7, #4]
   111c4:	2302      	movs	r3, #2
   111c6:	717b      	strb	r3, [r7, #5]
   111c8:	b08a      	sub	sp, #40	; 0x28
   111ca:	466c      	mov	r4, sp
   111cc:	f114 0210 	adds.w	r2, r4, #16
   111d0:	d017      	beq.n	11202 <disconnected+0x826>
   111d2:	2012      	movs	r0, #18
   111d4:	b11a      	cbz	r2, 111de <disconnected+0x802>
   111d6:	2804      	cmp	r0, #4
   111d8:	dd01      	ble.n	111de <disconnected+0x802>
   111da:	4b5e      	ldr	r3, [pc, #376]	; (11354 <disconnected+0x978>)
   111dc:	6163      	str	r3, [r4, #20]
   111de:	2300      	movs	r3, #0
   111e0:	703b      	strb	r3, [r7, #0]
   111e2:	2302      	movs	r3, #2
   111e4:	707b      	strb	r3, [r7, #1]
   111e6:	b1ca      	cbz	r2, 1121c <disconnected+0x840>
   111e8:	4603      	mov	r3, r0
   111ea:	2808      	cmp	r0, #8
   111ec:	dd02      	ble.n	111f4 <disconnected+0x818>
   111ee:	f107 0108 	add.w	r1, r7, #8
   111f2:	61a1      	str	r1, [r4, #24]
   111f4:	2b0c      	cmp	r3, #12
   111f6:	dd00      	ble.n	111fa <disconnected+0x81e>
   111f8:	61e5      	str	r5, [r4, #28]
   111fa:	f104 0320 	add.w	r3, r4, #32
   111fe:	2100      	movs	r1, #0
   11200:	e00a      	b.n	11218 <disconnected+0x83c>
   11202:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   11206:	e7e5      	b.n	111d4 <disconnected+0x7f8>
   11208:	f101 0528 	add.w	r5, r1, #40	; 0x28
   1120c:	443d      	add	r5, r7
   1120e:	f815 5c28 	ldrb.w	r5, [r5, #-40]
   11212:	f803 5b01 	strb.w	r5, [r3], #1
   11216:	3101      	adds	r1, #1
   11218:	2901      	cmp	r1, #1
   1121a:	d9f5      	bls.n	11208 <disconnected+0x82c>
   1121c:	2811      	cmp	r0, #17
   1121e:	dd24      	ble.n	1126a <disconnected+0x88e>
   11220:	2312      	movs	r3, #18
   11222:	b142      	cbz	r2, 11236 <disconnected+0x85a>
   11224:	2104      	movs	r1, #4
   11226:	7139      	strb	r1, [r7, #4]
   11228:	2100      	movs	r1, #0
   1122a:	7179      	strb	r1, [r7, #5]
   1122c:	71b9      	strb	r1, [r7, #6]
   1122e:	2101      	movs	r1, #1
   11230:	71f9      	strb	r1, [r7, #7]
   11232:	6878      	ldr	r0, [r7, #4]
   11234:	6120      	str	r0, [r4, #16]
   11236:	2100      	movs	r1, #0
   11238:	f36f 0100 	bfc	r1, #0, #1
   1123c:	f36f 0141 	bfc	r1, #1, #1
   11240:	f36f 0182 	bfc	r1, #2, #1
   11244:	f36f 01c5 	bfc	r1, #3, #3
   11248:	2003      	movs	r0, #3
   1124a:	f360 1188 	bfi	r1, r0, #6, #3
   1124e:	f3c3 0309 	ubfx	r3, r3, #0, #10
   11252:	f363 2152 	bfi	r1, r3, #9, #10
   11256:	f36f 41de 	bfc	r1, #19, #12
   1125a:	f36f 71df 	bfc	r1, #31, #1
   1125e:	2300      	movs	r3, #0
   11260:	4839      	ldr	r0, [pc, #228]	; (11348 <disconnected+0x96c>)
   11262:	f017 ffd2 	bl	2920a <z_impl_z_log_msg_static_create>
   11266:	46b5      	mov	sp, r6
   11268:	e43e      	b.n	10ae8 <disconnected+0x10c>
   1126a:	f06f 031b 	mvn.w	r3, #27
   1126e:	e7d8      	b.n	11222 <disconnected+0x846>
		LOG_WRN("UNRECOGNIZED SENSOR DISCONNECTED, addr: %s (reason 0x%02x)", addr_str, reason);
   11270:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   11274:	e771      	b.n	1115a <disconnected+0x77e>
   11276:	f101 0528 	add.w	r5, r1, #40	; 0x28
   1127a:	443d      	add	r5, r7
   1127c:	f815 5c28 	ldrb.w	r5, [r5, #-40]
   11280:	f803 5b01 	strb.w	r5, [r3], #1
   11284:	3101      	adds	r1, #1
   11286:	2901      	cmp	r1, #1
   11288:	d9f5      	bls.n	11276 <disconnected+0x89a>
   1128a:	2811      	cmp	r0, #17
   1128c:	dd24      	ble.n	112d8 <disconnected+0x8fc>
   1128e:	2312      	movs	r3, #18
   11290:	b142      	cbz	r2, 112a4 <disconnected+0x8c8>
   11292:	2104      	movs	r1, #4
   11294:	7139      	strb	r1, [r7, #4]
   11296:	2100      	movs	r1, #0
   11298:	7179      	strb	r1, [r7, #5]
   1129a:	71b9      	strb	r1, [r7, #6]
   1129c:	2101      	movs	r1, #1
   1129e:	71f9      	strb	r1, [r7, #7]
   112a0:	6878      	ldr	r0, [r7, #4]
   112a2:	6130      	str	r0, [r6, #16]
   112a4:	2100      	movs	r1, #0
   112a6:	f36f 0100 	bfc	r1, #0, #1
   112aa:	f36f 0141 	bfc	r1, #1, #1
   112ae:	f36f 0182 	bfc	r1, #2, #1
   112b2:	f36f 01c5 	bfc	r1, #3, #3
   112b6:	2002      	movs	r0, #2
   112b8:	f360 1188 	bfi	r1, r0, #6, #3
   112bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
   112c0:	f363 2152 	bfi	r1, r3, #9, #10
   112c4:	f36f 41de 	bfc	r1, #19, #12
   112c8:	f36f 71df 	bfc	r1, #31, #1
   112cc:	2300      	movs	r3, #0
   112ce:	481e      	ldr	r0, [pc, #120]	; (11348 <disconnected+0x96c>)
   112d0:	f017 ff9b 	bl	2920a <z_impl_z_log_msg_static_create>
   112d4:	46a5      	mov	sp, r4
   112d6:	e407      	b.n	10ae8 <disconnected+0x10c>
   112d8:	f06f 031b 	mvn.w	r3, #27
   112dc:	e7d8      	b.n	11290 <disconnected+0x8b4>
			LOG_ERR("Failed to stop automatically connecting (err %d)", err);
   112de:	2008      	movs	r0, #8
   112e0:	f002 fd12 	bl	13d08 <z_log_msg_alloc>
   112e4:	2200      	movs	r2, #0
   112e6:	f36f 0200 	bfc	r2, #0, #1
   112ea:	f36f 0241 	bfc	r2, #1, #1
   112ee:	f36f 0282 	bfc	r2, #2, #1
   112f2:	f36f 02c5 	bfc	r2, #3, #3
   112f6:	2301      	movs	r3, #1
   112f8:	f363 1288 	bfi	r2, r3, #6, #3
   112fc:	230c      	movs	r3, #12
   112fe:	f363 2252 	bfi	r2, r3, #9, #10
   11302:	f36f 42de 	bfc	r2, #19, #12
   11306:	f36f 72df 	bfc	r2, #31, #1
   1130a:	4604      	mov	r4, r0
   1130c:	b170      	cbz	r0, 1132c <disconnected+0x950>
   1130e:	f110 0310 	adds.w	r3, r0, #16
   11312:	d002      	beq.n	1131a <disconnected+0x93e>
   11314:	4910      	ldr	r1, [pc, #64]	; (11358 <disconnected+0x97c>)
   11316:	6141      	str	r1, [r0, #20]
   11318:	6185      	str	r5, [r0, #24]
   1131a:	b13b      	cbz	r3, 1132c <disconnected+0x950>
   1131c:	2303      	movs	r3, #3
   1131e:	713b      	strb	r3, [r7, #4]
   11320:	2300      	movs	r3, #0
   11322:	717b      	strb	r3, [r7, #5]
   11324:	71bb      	strb	r3, [r7, #6]
   11326:	71fb      	strb	r3, [r7, #7]
   11328:	6878      	ldr	r0, [r7, #4]
   1132a:	6120      	str	r0, [r4, #16]
   1132c:	2300      	movs	r3, #0
   1132e:	4906      	ldr	r1, [pc, #24]	; (11348 <disconnected+0x96c>)
   11330:	4620      	mov	r0, r4
   11332:	f017 ff52 	bl	291da <z_log_msg_finalize>
   11336:	f7ff bbef 	b.w	10b18 <disconnected+0x13c>
   1133a:	bf00      	nop
   1133c:	20007904 	.word	0x20007904
   11340:	2000794c 	.word	0x2000794c
   11344:	0003172c 	.word	0x0003172c
   11348:	000314f8 	.word	0x000314f8
   1134c:	200078fc 	.word	0x200078fc
   11350:	00031794 	.word	0x00031794
   11354:	00031760 	.word	0x00031760
   11358:	000317d0 	.word	0x000317d0
			LOG_ERR("Failed to start automatically connecting (err %d)", err);
   1135c:	2008      	movs	r0, #8
   1135e:	f002 fcd3 	bl	13d08 <z_log_msg_alloc>
   11362:	2200      	movs	r2, #0
   11364:	f36f 0200 	bfc	r2, #0, #1
   11368:	f36f 0241 	bfc	r2, #1, #1
   1136c:	f36f 0282 	bfc	r2, #2, #1
   11370:	f36f 02c5 	bfc	r2, #3, #3
   11374:	2301      	movs	r3, #1
   11376:	f363 1288 	bfi	r2, r3, #6, #3
   1137a:	230c      	movs	r3, #12
   1137c:	f363 2252 	bfi	r2, r3, #9, #10
   11380:	f36f 42de 	bfc	r2, #19, #12
   11384:	f36f 72df 	bfc	r2, #31, #1
   11388:	4604      	mov	r4, r0
   1138a:	b170      	cbz	r0, 113aa <disconnected+0x9ce>
   1138c:	f110 0310 	adds.w	r3, r0, #16
   11390:	d002      	beq.n	11398 <disconnected+0x9bc>
   11392:	4909      	ldr	r1, [pc, #36]	; (113b8 <disconnected+0x9dc>)
   11394:	6141      	str	r1, [r0, #20]
   11396:	6185      	str	r5, [r0, #24]
   11398:	b13b      	cbz	r3, 113aa <disconnected+0x9ce>
   1139a:	2303      	movs	r3, #3
   1139c:	713b      	strb	r3, [r7, #4]
   1139e:	2300      	movs	r3, #0
   113a0:	717b      	strb	r3, [r7, #5]
   113a2:	71bb      	strb	r3, [r7, #6]
   113a4:	71fb      	strb	r3, [r7, #7]
   113a6:	6878      	ldr	r0, [r7, #4]
   113a8:	6120      	str	r0, [r4, #16]
   113aa:	2300      	movs	r3, #0
   113ac:	4903      	ldr	r1, [pc, #12]	; (113bc <disconnected+0x9e0>)
   113ae:	4620      	mov	r0, r4
   113b0:	f017 ff13 	bl	291da <z_log_msg_finalize>
}
   113b4:	f7ff bbbc 	b.w	10b30 <disconnected+0x154>
   113b8:	00031804 	.word	0x00031804
   113bc:	000314f8 	.word	0x000314f8

000113c0 <connected>:
{
   113c0:	b5b0      	push	{r4, r5, r7, lr}
   113c2:	b08a      	sub	sp, #40	; 0x28
   113c4:	af00      	add	r7, sp, #0
   113c6:	460c      	mov	r4, r1
	const bt_addr_le_t *addr = bt_conn_get_dst(conn);
   113c8:	f019 f825 	bl	2a416 <bt_conn_get_dst>
   113cc:	4605      	mov	r5, r0
	bt_addr_le_to_str(addr, addr_str, sizeof(addr_str));
   113ce:	221e      	movs	r2, #30
   113d0:	f107 0108 	add.w	r1, r7, #8
   113d4:	f7ff faba 	bl	1094c <bt_addr_le_to_str>
	if (err) {
   113d8:	2c00      	cmp	r4, #0
   113da:	d07d      	beq.n	114d8 <connected+0x118>
		LOG_WRN("Failed to connect to %s (%u)", addr_str, err);
   113dc:	466d      	mov	r5, sp
   113de:	2300      	movs	r3, #0
   113e0:	713b      	strb	r3, [r7, #4]
   113e2:	2302      	movs	r3, #2
   113e4:	717b      	strb	r3, [r7, #5]
   113e6:	b08a      	sub	sp, #40	; 0x28
   113e8:	46ec      	mov	ip, sp
   113ea:	f11c 0210 	adds.w	r2, ip, #16
   113ee:	d01a      	beq.n	11426 <connected+0x66>
   113f0:	2012      	movs	r0, #18
   113f2:	b122      	cbz	r2, 113fe <connected+0x3e>
   113f4:	2804      	cmp	r0, #4
   113f6:	dd02      	ble.n	113fe <connected+0x3e>
   113f8:	4bb7      	ldr	r3, [pc, #732]	; (116d8 <connected+0x318>)
   113fa:	f8cc 3014 	str.w	r3, [ip, #20]
   113fe:	2300      	movs	r3, #0
   11400:	703b      	strb	r3, [r7, #0]
   11402:	2302      	movs	r3, #2
   11404:	707b      	strb	r3, [r7, #1]
   11406:	b1da      	cbz	r2, 11440 <connected+0x80>
   11408:	4603      	mov	r3, r0
   1140a:	2808      	cmp	r0, #8
   1140c:	dd03      	ble.n	11416 <connected+0x56>
   1140e:	f107 0108 	add.w	r1, r7, #8
   11412:	f8cc 1018 	str.w	r1, [ip, #24]
   11416:	2b0c      	cmp	r3, #12
   11418:	dd01      	ble.n	1141e <connected+0x5e>
   1141a:	f8cc 401c 	str.w	r4, [ip, #28]
   1141e:	f10c 0320 	add.w	r3, ip, #32
   11422:	2100      	movs	r1, #0
   11424:	e00a      	b.n	1143c <connected+0x7c>
   11426:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1142a:	e7e2      	b.n	113f2 <connected+0x32>
   1142c:	f101 0428 	add.w	r4, r1, #40	; 0x28
   11430:	443c      	add	r4, r7
   11432:	f814 4c28 	ldrb.w	r4, [r4, #-40]
   11436:	f803 4b01 	strb.w	r4, [r3], #1
   1143a:	3101      	adds	r1, #1
   1143c:	2901      	cmp	r1, #1
   1143e:	d9f5      	bls.n	1142c <connected+0x6c>
   11440:	2811      	cmp	r0, #17
   11442:	dd46      	ble.n	114d2 <connected+0x112>
   11444:	2312      	movs	r3, #18
   11446:	b14a      	cbz	r2, 1145c <connected+0x9c>
   11448:	2104      	movs	r1, #4
   1144a:	7139      	strb	r1, [r7, #4]
   1144c:	2100      	movs	r1, #0
   1144e:	7179      	strb	r1, [r7, #5]
   11450:	71b9      	strb	r1, [r7, #6]
   11452:	2101      	movs	r1, #1
   11454:	71f9      	strb	r1, [r7, #7]
   11456:	6878      	ldr	r0, [r7, #4]
   11458:	f8cc 0010 	str.w	r0, [ip, #16]
   1145c:	2100      	movs	r1, #0
   1145e:	f36f 0100 	bfc	r1, #0, #1
   11462:	f36f 0141 	bfc	r1, #1, #1
   11466:	f36f 0182 	bfc	r1, #2, #1
   1146a:	f36f 01c5 	bfc	r1, #3, #3
   1146e:	2002      	movs	r0, #2
   11470:	f360 1188 	bfi	r1, r0, #6, #3
   11474:	f3c3 0309 	ubfx	r3, r3, #0, #10
   11478:	f363 2152 	bfi	r1, r3, #9, #10
   1147c:	f36f 41de 	bfc	r1, #19, #12
   11480:	f36f 71df 	bfc	r1, #31, #1
   11484:	2300      	movs	r3, #0
   11486:	4895      	ldr	r0, [pc, #596]	; (116dc <connected+0x31c>)
   11488:	f017 febf 	bl	2920a <z_impl_z_log_msg_static_create>
   1148c:	46ad      	mov	sp, r5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1148e:	f3bf 8f5b 	dmb	ish
   11492:	4b93      	ldr	r3, [pc, #588]	; (116e0 <connected+0x320>)
   11494:	681b      	ldr	r3, [r3, #0]
   11496:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, EFL_CONNECTED_FLAG) && atomic_test_bit(flags, EFR_CONNECTED_FLAG)) {
   1149a:	f013 0f10 	tst.w	r3, #16
   1149e:	d009      	beq.n	114b4 <connected+0xf4>
   114a0:	f3bf 8f5b 	dmb	ish
   114a4:	4b8e      	ldr	r3, [pc, #568]	; (116e0 <connected+0x320>)
   114a6:	681b      	ldr	r3, [r3, #0]
   114a8:	f3bf 8f5b 	dmb	ish
   114ac:	f013 0f20 	tst.w	r3, #32
   114b0:	f040 8570 	bne.w	11f94 <connected+0xbd4>
		scan_param.interval = BT_GAP_SCAN_FAST_INTERVAL;
   114b4:	488b      	ldr	r0, [pc, #556]	; (116e4 <connected+0x324>)
   114b6:	2360      	movs	r3, #96	; 0x60
   114b8:	8083      	strh	r3, [r0, #4]
		scan_param.window = BT_GAP_SCAN_FAST_WINDOW;
   114ba:	2330      	movs	r3, #48	; 0x30
   114bc:	80c3      	strh	r3, [r0, #6]
		err = bt_conn_le_create_auto(&scan_param, &conn_param);
   114be:	498a      	ldr	r1, [pc, #552]	; (116e8 <connected+0x328>)
   114c0:	f008 fd0a 	bl	19ed8 <bt_conn_le_create_auto>
		if (err) {
   114c4:	f010 0fff 	tst.w	r0, #255	; 0xff
   114c8:	f040 85a0 	bne.w	1200c <connected+0xc4c>
}
   114cc:	3728      	adds	r7, #40	; 0x28
   114ce:	46bd      	mov	sp, r7
   114d0:	bdb0      	pop	{r4, r5, r7, pc}
		LOG_WRN("Failed to connect to %s (%u)", addr_str, err);
   114d2:	f06f 031b 	mvn.w	r3, #27
   114d6:	e7b6      	b.n	11446 <connected+0x86>
   114d8:	2207      	movs	r2, #7
   114da:	4984      	ldr	r1, [pc, #528]	; (116ec <connected+0x32c>)
   114dc:	4628      	mov	r0, r5
   114de:	f018 fb56 	bl	29b8e <memcmp>
		if (bt_addr_le_eq(addr, &IFL_bt_addr)) {
   114e2:	2800      	cmp	r0, #0
   114e4:	f040 8092 	bne.w	1160c <connected+0x24c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   114e8:	4b7d      	ldr	r3, [pc, #500]	; (116e0 <connected+0x320>)
   114ea:	f3bf 8f5b 	dmb	ish
   114ee:	e853 2f00 	ldrex	r2, [r3]
   114f2:	f042 0101 	orr.w	r1, r2, #1
   114f6:	e843 1000 	strex	r0, r1, [r3]
   114fa:	2800      	cmp	r0, #0
   114fc:	d1f7      	bne.n	114ee <connected+0x12e>
   114fe:	f3bf 8f5b 	dmb	ish
			if(atomic_test_and_set_bit(flags, IFL_CONNECTED_FLAG)) {
   11502:	f012 0f01 	tst.w	r2, #1
   11506:	d11e      	bne.n	11546 <connected+0x186>
			LOG_INF("Internal FL connected, addr: %s", addr_str);
   11508:	466d      	mov	r5, sp
   1150a:	2300      	movs	r3, #0
   1150c:	713b      	strb	r3, [r7, #4]
   1150e:	2302      	movs	r3, #2
   11510:	717b      	strb	r3, [r7, #5]
   11512:	b088      	sub	sp, #32
   11514:	466c      	mov	r4, sp
   11516:	f114 0210 	adds.w	r2, r4, #16
   1151a:	d040      	beq.n	1159e <connected+0x1de>
   1151c:	200e      	movs	r0, #14
   1151e:	b11a      	cbz	r2, 11528 <connected+0x168>
   11520:	2804      	cmp	r0, #4
   11522:	dd01      	ble.n	11528 <connected+0x168>
   11524:	4b72      	ldr	r3, [pc, #456]	; (116f0 <connected+0x330>)
   11526:	6163      	str	r3, [r4, #20]
   11528:	2300      	movs	r3, #0
   1152a:	703b      	strb	r3, [r7, #0]
   1152c:	2302      	movs	r3, #2
   1152e:	707b      	strb	r3, [r7, #1]
   11530:	2a00      	cmp	r2, #0
   11532:	d041      	beq.n	115b8 <connected+0x1f8>
   11534:	2808      	cmp	r0, #8
   11536:	dd02      	ble.n	1153e <connected+0x17e>
   11538:	f107 0308 	add.w	r3, r7, #8
   1153c:	61a3      	str	r3, [r4, #24]
   1153e:	f104 031c 	add.w	r3, r4, #28
   11542:	2100      	movs	r1, #0
   11544:	e036      	b.n	115b4 <connected+0x1f4>
				LOG_WRN("WARNING, DUPLICATE CONNECTION:");
   11546:	2006      	movs	r0, #6
   11548:	f002 fbde 	bl	13d08 <z_log_msg_alloc>
   1154c:	2200      	movs	r2, #0
   1154e:	f36f 0200 	bfc	r2, #0, #1
   11552:	f36f 0241 	bfc	r2, #1, #1
   11556:	f36f 0282 	bfc	r2, #2, #1
   1155a:	f36f 02c5 	bfc	r2, #3, #3
   1155e:	2302      	movs	r3, #2
   11560:	f363 1288 	bfi	r2, r3, #6, #3
   11564:	2308      	movs	r3, #8
   11566:	f363 2252 	bfi	r2, r3, #9, #10
   1156a:	f36f 42de 	bfc	r2, #19, #12
   1156e:	f36f 72df 	bfc	r2, #31, #1
   11572:	4604      	mov	r4, r0
   11574:	b168      	cbz	r0, 11592 <connected+0x1d2>
   11576:	f110 0310 	adds.w	r3, r0, #16
   1157a:	d001      	beq.n	11580 <connected+0x1c0>
   1157c:	495d      	ldr	r1, [pc, #372]	; (116f4 <connected+0x334>)
   1157e:	6141      	str	r1, [r0, #20]
   11580:	b13b      	cbz	r3, 11592 <connected+0x1d2>
   11582:	2302      	movs	r3, #2
   11584:	713b      	strb	r3, [r7, #4]
   11586:	2300      	movs	r3, #0
   11588:	717b      	strb	r3, [r7, #5]
   1158a:	71bb      	strb	r3, [r7, #6]
   1158c:	71fb      	strb	r3, [r7, #7]
   1158e:	6878      	ldr	r0, [r7, #4]
   11590:	6120      	str	r0, [r4, #16]
   11592:	2300      	movs	r3, #0
   11594:	4951      	ldr	r1, [pc, #324]	; (116dc <connected+0x31c>)
   11596:	4620      	mov	r0, r4
   11598:	f017 fe1f 	bl	291da <z_log_msg_finalize>
   1159c:	e7b4      	b.n	11508 <connected+0x148>
			LOG_INF("Internal FL connected, addr: %s", addr_str);
   1159e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   115a2:	e7bc      	b.n	1151e <connected+0x15e>
   115a4:	f101 0c28 	add.w	ip, r1, #40	; 0x28
   115a8:	44bc      	add	ip, r7
   115aa:	f81c cc28 	ldrb.w	ip, [ip, #-40]
   115ae:	f803 cb01 	strb.w	ip, [r3], #1
   115b2:	3101      	adds	r1, #1
   115b4:	2901      	cmp	r1, #1
   115b6:	d9f5      	bls.n	115a4 <connected+0x1e4>
   115b8:	280d      	cmp	r0, #13
   115ba:	dd24      	ble.n	11606 <connected+0x246>
   115bc:	230e      	movs	r3, #14
   115be:	b142      	cbz	r2, 115d2 <connected+0x212>
   115c0:	2103      	movs	r1, #3
   115c2:	7139      	strb	r1, [r7, #4]
   115c4:	2100      	movs	r1, #0
   115c6:	7179      	strb	r1, [r7, #5]
   115c8:	71b9      	strb	r1, [r7, #6]
   115ca:	2101      	movs	r1, #1
   115cc:	71f9      	strb	r1, [r7, #7]
   115ce:	6878      	ldr	r0, [r7, #4]
   115d0:	6120      	str	r0, [r4, #16]
   115d2:	2100      	movs	r1, #0
   115d4:	f36f 0100 	bfc	r1, #0, #1
   115d8:	f36f 0141 	bfc	r1, #1, #1
   115dc:	f36f 0182 	bfc	r1, #2, #1
   115e0:	f36f 01c5 	bfc	r1, #3, #3
   115e4:	2003      	movs	r0, #3
   115e6:	f360 1188 	bfi	r1, r0, #6, #3
   115ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
   115ee:	f363 2152 	bfi	r1, r3, #9, #10
   115f2:	f36f 41de 	bfc	r1, #19, #12
   115f6:	f36f 71df 	bfc	r1, #31, #1
   115fa:	2300      	movs	r3, #0
   115fc:	4837      	ldr	r0, [pc, #220]	; (116dc <connected+0x31c>)
   115fe:	f017 fe04 	bl	2920a <z_impl_z_log_msg_static_create>
   11602:	46ad      	mov	sp, r5
   11604:	e743      	b.n	1148e <connected+0xce>
   11606:	f06f 031b 	mvn.w	r3, #27
   1160a:	e7d8      	b.n	115be <connected+0x1fe>
   1160c:	2207      	movs	r2, #7
   1160e:	493a      	ldr	r1, [pc, #232]	; (116f8 <connected+0x338>)
   11610:	4628      	mov	r0, r5
   11612:	f018 fabc 	bl	29b8e <memcmp>
		} else if (bt_addr_le_eq(addr, &IFR_bt_addr)) {
   11616:	2800      	cmp	r0, #0
   11618:	f040 80a6 	bne.w	11768 <connected+0x3a8>
   1161c:	4b30      	ldr	r3, [pc, #192]	; (116e0 <connected+0x320>)
   1161e:	f3bf 8f5b 	dmb	ish
   11622:	e853 2f00 	ldrex	r2, [r3]
   11626:	f042 0102 	orr.w	r1, r2, #2
   1162a:	e843 1000 	strex	r0, r1, [r3]
   1162e:	2800      	cmp	r0, #0
   11630:	d1f7      	bne.n	11622 <connected+0x262>
   11632:	f3bf 8f5b 	dmb	ish
			if(atomic_test_and_set_bit(flags, IFR_CONNECTED_FLAG)) {
   11636:	f012 0f02 	tst.w	r2, #2
   1163a:	d11e      	bne.n	1167a <connected+0x2ba>
			LOG_INF("Internal FR connected, addr: %s", addr_str);
   1163c:	466d      	mov	r5, sp
   1163e:	2300      	movs	r3, #0
   11640:	713b      	strb	r3, [r7, #4]
   11642:	2302      	movs	r3, #2
   11644:	717b      	strb	r3, [r7, #5]
   11646:	b088      	sub	sp, #32
   11648:	466c      	mov	r4, sp
   1164a:	f114 0210 	adds.w	r2, r4, #16
   1164e:	d040      	beq.n	116d2 <connected+0x312>
   11650:	200e      	movs	r0, #14
   11652:	b11a      	cbz	r2, 1165c <connected+0x29c>
   11654:	2804      	cmp	r0, #4
   11656:	dd01      	ble.n	1165c <connected+0x29c>
   11658:	4b28      	ldr	r3, [pc, #160]	; (116fc <connected+0x33c>)
   1165a:	6163      	str	r3, [r4, #20]
   1165c:	2300      	movs	r3, #0
   1165e:	703b      	strb	r3, [r7, #0]
   11660:	2302      	movs	r3, #2
   11662:	707b      	strb	r3, [r7, #1]
   11664:	2a00      	cmp	r2, #0
   11666:	d055      	beq.n	11714 <connected+0x354>
   11668:	2808      	cmp	r0, #8
   1166a:	dd02      	ble.n	11672 <connected+0x2b2>
   1166c:	f107 0308 	add.w	r3, r7, #8
   11670:	61a3      	str	r3, [r4, #24]
   11672:	f104 031c 	add.w	r3, r4, #28
   11676:	2100      	movs	r1, #0
   11678:	e04a      	b.n	11710 <connected+0x350>
				LOG_WRN("WARNING, DUPLICATE CONNECTION:");
   1167a:	2006      	movs	r0, #6
   1167c:	f002 fb44 	bl	13d08 <z_log_msg_alloc>
   11680:	2200      	movs	r2, #0
   11682:	f36f 0200 	bfc	r2, #0, #1
   11686:	f36f 0241 	bfc	r2, #1, #1
   1168a:	f36f 0282 	bfc	r2, #2, #1
   1168e:	f36f 02c5 	bfc	r2, #3, #3
   11692:	2302      	movs	r3, #2
   11694:	f363 1288 	bfi	r2, r3, #6, #3
   11698:	2308      	movs	r3, #8
   1169a:	f363 2252 	bfi	r2, r3, #9, #10
   1169e:	f36f 42de 	bfc	r2, #19, #12
   116a2:	f36f 72df 	bfc	r2, #31, #1
   116a6:	4604      	mov	r4, r0
   116a8:	b168      	cbz	r0, 116c6 <connected+0x306>
   116aa:	f110 0310 	adds.w	r3, r0, #16
   116ae:	d001      	beq.n	116b4 <connected+0x2f4>
   116b0:	4910      	ldr	r1, [pc, #64]	; (116f4 <connected+0x334>)
   116b2:	6141      	str	r1, [r0, #20]
   116b4:	b13b      	cbz	r3, 116c6 <connected+0x306>
   116b6:	2302      	movs	r3, #2
   116b8:	713b      	strb	r3, [r7, #4]
   116ba:	2300      	movs	r3, #0
   116bc:	717b      	strb	r3, [r7, #5]
   116be:	71bb      	strb	r3, [r7, #6]
   116c0:	71fb      	strb	r3, [r7, #7]
   116c2:	6878      	ldr	r0, [r7, #4]
   116c4:	6120      	str	r0, [r4, #16]
   116c6:	2300      	movs	r3, #0
   116c8:	4904      	ldr	r1, [pc, #16]	; (116dc <connected+0x31c>)
   116ca:	4620      	mov	r0, r4
   116cc:	f017 fd85 	bl	291da <z_log_msg_finalize>
   116d0:	e7b4      	b.n	1163c <connected+0x27c>
			LOG_INF("Internal FR connected, addr: %s", addr_str);
   116d2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   116d6:	e7bc      	b.n	11652 <connected+0x292>
   116d8:	00031838 	.word	0x00031838
   116dc:	000314f8 	.word	0x000314f8
   116e0:	2000794c 	.word	0x2000794c
   116e4:	2000793c 	.word	0x2000793c
   116e8:	20000648 	.word	0x20000648
   116ec:	20007934 	.word	0x20007934
   116f0:	00031878 	.word	0x00031878
   116f4:	00031858 	.word	0x00031858
   116f8:	2000792c 	.word	0x2000792c
   116fc:	00031898 	.word	0x00031898
   11700:	f101 0c28 	add.w	ip, r1, #40	; 0x28
   11704:	44bc      	add	ip, r7
   11706:	f81c cc28 	ldrb.w	ip, [ip, #-40]
   1170a:	f803 cb01 	strb.w	ip, [r3], #1
   1170e:	3101      	adds	r1, #1
   11710:	2901      	cmp	r1, #1
   11712:	d9f5      	bls.n	11700 <connected+0x340>
   11714:	280d      	cmp	r0, #13
   11716:	dd24      	ble.n	11762 <connected+0x3a2>
   11718:	230e      	movs	r3, #14
   1171a:	b142      	cbz	r2, 1172e <connected+0x36e>
   1171c:	2103      	movs	r1, #3
   1171e:	7139      	strb	r1, [r7, #4]
   11720:	2100      	movs	r1, #0
   11722:	7179      	strb	r1, [r7, #5]
   11724:	71b9      	strb	r1, [r7, #6]
   11726:	2101      	movs	r1, #1
   11728:	71f9      	strb	r1, [r7, #7]
   1172a:	6878      	ldr	r0, [r7, #4]
   1172c:	6120      	str	r0, [r4, #16]
   1172e:	2100      	movs	r1, #0
   11730:	f36f 0100 	bfc	r1, #0, #1
   11734:	f36f 0141 	bfc	r1, #1, #1
   11738:	f36f 0182 	bfc	r1, #2, #1
   1173c:	f36f 01c5 	bfc	r1, #3, #3
   11740:	2003      	movs	r0, #3
   11742:	f360 1188 	bfi	r1, r0, #6, #3
   11746:	f3c3 0309 	ubfx	r3, r3, #0, #10
   1174a:	f363 2152 	bfi	r1, r3, #9, #10
   1174e:	f36f 41de 	bfc	r1, #19, #12
   11752:	f36f 71df 	bfc	r1, #31, #1
   11756:	2300      	movs	r3, #0
   11758:	48b9      	ldr	r0, [pc, #740]	; (11a40 <connected+0x680>)
   1175a:	f017 fd56 	bl	2920a <z_impl_z_log_msg_static_create>
   1175e:	46ad      	mov	sp, r5
   11760:	e695      	b.n	1148e <connected+0xce>
   11762:	f06f 031b 	mvn.w	r3, #27
   11766:	e7d8      	b.n	1171a <connected+0x35a>
   11768:	2207      	movs	r2, #7
   1176a:	49b6      	ldr	r1, [pc, #728]	; (11a44 <connected+0x684>)
   1176c:	4628      	mov	r0, r5
   1176e:	f018 fa0e 	bl	29b8e <memcmp>
		} else if (bt_addr_le_eq(addr, &IRL_bt_addr)) {
   11772:	2800      	cmp	r0, #0
   11774:	f040 8092 	bne.w	1189c <connected+0x4dc>
   11778:	4bb3      	ldr	r3, [pc, #716]	; (11a48 <connected+0x688>)
   1177a:	f3bf 8f5b 	dmb	ish
   1177e:	e853 2f00 	ldrex	r2, [r3]
   11782:	f042 0104 	orr.w	r1, r2, #4
   11786:	e843 1000 	strex	r0, r1, [r3]
   1178a:	2800      	cmp	r0, #0
   1178c:	d1f7      	bne.n	1177e <connected+0x3be>
   1178e:	f3bf 8f5b 	dmb	ish
			if(atomic_test_and_set_bit(flags, IRL_CONNECTED_FLAG)) {
   11792:	f012 0f04 	tst.w	r2, #4
   11796:	d11e      	bne.n	117d6 <connected+0x416>
			LOG_INF("Internal RL connected, addr: %s", addr_str);
   11798:	466d      	mov	r5, sp
   1179a:	2300      	movs	r3, #0
   1179c:	713b      	strb	r3, [r7, #4]
   1179e:	2302      	movs	r3, #2
   117a0:	717b      	strb	r3, [r7, #5]
   117a2:	b088      	sub	sp, #32
   117a4:	466c      	mov	r4, sp
   117a6:	f114 0210 	adds.w	r2, r4, #16
   117aa:	d040      	beq.n	1182e <connected+0x46e>
   117ac:	200e      	movs	r0, #14
   117ae:	b11a      	cbz	r2, 117b8 <connected+0x3f8>
   117b0:	2804      	cmp	r0, #4
   117b2:	dd01      	ble.n	117b8 <connected+0x3f8>
   117b4:	4ba5      	ldr	r3, [pc, #660]	; (11a4c <connected+0x68c>)
   117b6:	6163      	str	r3, [r4, #20]
   117b8:	2300      	movs	r3, #0
   117ba:	703b      	strb	r3, [r7, #0]
   117bc:	2302      	movs	r3, #2
   117be:	707b      	strb	r3, [r7, #1]
   117c0:	2a00      	cmp	r2, #0
   117c2:	d041      	beq.n	11848 <connected+0x488>
   117c4:	2808      	cmp	r0, #8
   117c6:	dd02      	ble.n	117ce <connected+0x40e>
   117c8:	f107 0308 	add.w	r3, r7, #8
   117cc:	61a3      	str	r3, [r4, #24]
   117ce:	f104 031c 	add.w	r3, r4, #28
   117d2:	2100      	movs	r1, #0
   117d4:	e036      	b.n	11844 <connected+0x484>
				LOG_WRN("WARNING, DUPLICATE CONNECTION:");
   117d6:	2006      	movs	r0, #6
   117d8:	f002 fa96 	bl	13d08 <z_log_msg_alloc>
   117dc:	2200      	movs	r2, #0
   117de:	f36f 0200 	bfc	r2, #0, #1
   117e2:	f36f 0241 	bfc	r2, #1, #1
   117e6:	f36f 0282 	bfc	r2, #2, #1
   117ea:	f36f 02c5 	bfc	r2, #3, #3
   117ee:	2302      	movs	r3, #2
   117f0:	f363 1288 	bfi	r2, r3, #6, #3
   117f4:	2308      	movs	r3, #8
   117f6:	f363 2252 	bfi	r2, r3, #9, #10
   117fa:	f36f 42de 	bfc	r2, #19, #12
   117fe:	f36f 72df 	bfc	r2, #31, #1
   11802:	4604      	mov	r4, r0
   11804:	b168      	cbz	r0, 11822 <connected+0x462>
   11806:	f110 0310 	adds.w	r3, r0, #16
   1180a:	d001      	beq.n	11810 <connected+0x450>
   1180c:	4990      	ldr	r1, [pc, #576]	; (11a50 <connected+0x690>)
   1180e:	6141      	str	r1, [r0, #20]
   11810:	b13b      	cbz	r3, 11822 <connected+0x462>
   11812:	2302      	movs	r3, #2
   11814:	713b      	strb	r3, [r7, #4]
   11816:	2300      	movs	r3, #0
   11818:	717b      	strb	r3, [r7, #5]
   1181a:	71bb      	strb	r3, [r7, #6]
   1181c:	71fb      	strb	r3, [r7, #7]
   1181e:	6878      	ldr	r0, [r7, #4]
   11820:	6120      	str	r0, [r4, #16]
   11822:	2300      	movs	r3, #0
   11824:	4986      	ldr	r1, [pc, #536]	; (11a40 <connected+0x680>)
   11826:	4620      	mov	r0, r4
   11828:	f017 fcd7 	bl	291da <z_log_msg_finalize>
   1182c:	e7b4      	b.n	11798 <connected+0x3d8>
			LOG_INF("Internal RL connected, addr: %s", addr_str);
   1182e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   11832:	e7bc      	b.n	117ae <connected+0x3ee>
   11834:	f101 0c28 	add.w	ip, r1, #40	; 0x28
   11838:	44bc      	add	ip, r7
   1183a:	f81c cc28 	ldrb.w	ip, [ip, #-40]
   1183e:	f803 cb01 	strb.w	ip, [r3], #1
   11842:	3101      	adds	r1, #1
   11844:	2901      	cmp	r1, #1
   11846:	d9f5      	bls.n	11834 <connected+0x474>
   11848:	280d      	cmp	r0, #13
   1184a:	dd24      	ble.n	11896 <connected+0x4d6>
   1184c:	230e      	movs	r3, #14
   1184e:	b142      	cbz	r2, 11862 <connected+0x4a2>
   11850:	2103      	movs	r1, #3
   11852:	7139      	strb	r1, [r7, #4]
   11854:	2100      	movs	r1, #0
   11856:	7179      	strb	r1, [r7, #5]
   11858:	71b9      	strb	r1, [r7, #6]
   1185a:	2101      	movs	r1, #1
   1185c:	71f9      	strb	r1, [r7, #7]
   1185e:	6878      	ldr	r0, [r7, #4]
   11860:	6120      	str	r0, [r4, #16]
   11862:	2100      	movs	r1, #0
   11864:	f36f 0100 	bfc	r1, #0, #1
   11868:	f36f 0141 	bfc	r1, #1, #1
   1186c:	f36f 0182 	bfc	r1, #2, #1
   11870:	f36f 01c5 	bfc	r1, #3, #3
   11874:	2003      	movs	r0, #3
   11876:	f360 1188 	bfi	r1, r0, #6, #3
   1187a:	f3c3 0309 	ubfx	r3, r3, #0, #10
   1187e:	f363 2152 	bfi	r1, r3, #9, #10
   11882:	f36f 41de 	bfc	r1, #19, #12
   11886:	f36f 71df 	bfc	r1, #31, #1
   1188a:	2300      	movs	r3, #0
   1188c:	486c      	ldr	r0, [pc, #432]	; (11a40 <connected+0x680>)
   1188e:	f017 fcbc 	bl	2920a <z_impl_z_log_msg_static_create>
   11892:	46ad      	mov	sp, r5
   11894:	e5fb      	b.n	1148e <connected+0xce>
   11896:	f06f 031b 	mvn.w	r3, #27
   1189a:	e7d8      	b.n	1184e <connected+0x48e>
   1189c:	2207      	movs	r2, #7
   1189e:	496d      	ldr	r1, [pc, #436]	; (11a54 <connected+0x694>)
   118a0:	4628      	mov	r0, r5
   118a2:	f018 f974 	bl	29b8e <memcmp>
		} else if (bt_addr_le_eq(addr, &IRR_bt_addr)) {
   118a6:	2800      	cmp	r0, #0
   118a8:	f040 8092 	bne.w	119d0 <connected+0x610>
   118ac:	4b66      	ldr	r3, [pc, #408]	; (11a48 <connected+0x688>)
   118ae:	f3bf 8f5b 	dmb	ish
   118b2:	e853 2f00 	ldrex	r2, [r3]
   118b6:	f042 0108 	orr.w	r1, r2, #8
   118ba:	e843 1000 	strex	r0, r1, [r3]
   118be:	2800      	cmp	r0, #0
   118c0:	d1f7      	bne.n	118b2 <connected+0x4f2>
   118c2:	f3bf 8f5b 	dmb	ish
			if(atomic_test_and_set_bit(flags, IRR_CONNECTED_FLAG)) {
   118c6:	f012 0f08 	tst.w	r2, #8
   118ca:	d11e      	bne.n	1190a <connected+0x54a>
			LOG_INF("Internal RR connected, addr: %s", addr_str);
   118cc:	466d      	mov	r5, sp
   118ce:	2300      	movs	r3, #0
   118d0:	713b      	strb	r3, [r7, #4]
   118d2:	2302      	movs	r3, #2
   118d4:	717b      	strb	r3, [r7, #5]
   118d6:	b088      	sub	sp, #32
   118d8:	466c      	mov	r4, sp
   118da:	f114 0210 	adds.w	r2, r4, #16
   118de:	d040      	beq.n	11962 <connected+0x5a2>
   118e0:	200e      	movs	r0, #14
   118e2:	b11a      	cbz	r2, 118ec <connected+0x52c>
   118e4:	2804      	cmp	r0, #4
   118e6:	dd01      	ble.n	118ec <connected+0x52c>
   118e8:	4b5b      	ldr	r3, [pc, #364]	; (11a58 <connected+0x698>)
   118ea:	6163      	str	r3, [r4, #20]
   118ec:	2300      	movs	r3, #0
   118ee:	703b      	strb	r3, [r7, #0]
   118f0:	2302      	movs	r3, #2
   118f2:	707b      	strb	r3, [r7, #1]
   118f4:	2a00      	cmp	r2, #0
   118f6:	d041      	beq.n	1197c <connected+0x5bc>
   118f8:	2808      	cmp	r0, #8
   118fa:	dd02      	ble.n	11902 <connected+0x542>
   118fc:	f107 0308 	add.w	r3, r7, #8
   11900:	61a3      	str	r3, [r4, #24]
   11902:	f104 031c 	add.w	r3, r4, #28
   11906:	2100      	movs	r1, #0
   11908:	e036      	b.n	11978 <connected+0x5b8>
				LOG_WRN("WARNING, DUPLICATE CONNECTION:");
   1190a:	2006      	movs	r0, #6
   1190c:	f002 f9fc 	bl	13d08 <z_log_msg_alloc>
   11910:	2200      	movs	r2, #0
   11912:	f36f 0200 	bfc	r2, #0, #1
   11916:	f36f 0241 	bfc	r2, #1, #1
   1191a:	f36f 0282 	bfc	r2, #2, #1
   1191e:	f36f 02c5 	bfc	r2, #3, #3
   11922:	2302      	movs	r3, #2
   11924:	f363 1288 	bfi	r2, r3, #6, #3
   11928:	2308      	movs	r3, #8
   1192a:	f363 2252 	bfi	r2, r3, #9, #10
   1192e:	f36f 42de 	bfc	r2, #19, #12
   11932:	f36f 72df 	bfc	r2, #31, #1
   11936:	4604      	mov	r4, r0
   11938:	b168      	cbz	r0, 11956 <connected+0x596>
   1193a:	f110 0310 	adds.w	r3, r0, #16
   1193e:	d001      	beq.n	11944 <connected+0x584>
   11940:	4943      	ldr	r1, [pc, #268]	; (11a50 <connected+0x690>)
   11942:	6141      	str	r1, [r0, #20]
   11944:	b13b      	cbz	r3, 11956 <connected+0x596>
   11946:	2302      	movs	r3, #2
   11948:	713b      	strb	r3, [r7, #4]
   1194a:	2300      	movs	r3, #0
   1194c:	717b      	strb	r3, [r7, #5]
   1194e:	71bb      	strb	r3, [r7, #6]
   11950:	71fb      	strb	r3, [r7, #7]
   11952:	6878      	ldr	r0, [r7, #4]
   11954:	6120      	str	r0, [r4, #16]
   11956:	2300      	movs	r3, #0
   11958:	4939      	ldr	r1, [pc, #228]	; (11a40 <connected+0x680>)
   1195a:	4620      	mov	r0, r4
   1195c:	f017 fc3d 	bl	291da <z_log_msg_finalize>
   11960:	e7b4      	b.n	118cc <connected+0x50c>
			LOG_INF("Internal RR connected, addr: %s", addr_str);
   11962:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   11966:	e7bc      	b.n	118e2 <connected+0x522>
   11968:	f101 0c28 	add.w	ip, r1, #40	; 0x28
   1196c:	44bc      	add	ip, r7
   1196e:	f81c cc28 	ldrb.w	ip, [ip, #-40]
   11972:	f803 cb01 	strb.w	ip, [r3], #1
   11976:	3101      	adds	r1, #1
   11978:	2901      	cmp	r1, #1
   1197a:	d9f5      	bls.n	11968 <connected+0x5a8>
   1197c:	280d      	cmp	r0, #13
   1197e:	dd24      	ble.n	119ca <connected+0x60a>
   11980:	230e      	movs	r3, #14
   11982:	b142      	cbz	r2, 11996 <connected+0x5d6>
   11984:	2103      	movs	r1, #3
   11986:	7139      	strb	r1, [r7, #4]
   11988:	2100      	movs	r1, #0
   1198a:	7179      	strb	r1, [r7, #5]
   1198c:	71b9      	strb	r1, [r7, #6]
   1198e:	2101      	movs	r1, #1
   11990:	71f9      	strb	r1, [r7, #7]
   11992:	6878      	ldr	r0, [r7, #4]
   11994:	6120      	str	r0, [r4, #16]
   11996:	2100      	movs	r1, #0
   11998:	f36f 0100 	bfc	r1, #0, #1
   1199c:	f36f 0141 	bfc	r1, #1, #1
   119a0:	f36f 0182 	bfc	r1, #2, #1
   119a4:	f36f 01c5 	bfc	r1, #3, #3
   119a8:	2003      	movs	r0, #3
   119aa:	f360 1188 	bfi	r1, r0, #6, #3
   119ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
   119b2:	f363 2152 	bfi	r1, r3, #9, #10
   119b6:	f36f 41de 	bfc	r1, #19, #12
   119ba:	f36f 71df 	bfc	r1, #31, #1
   119be:	2300      	movs	r3, #0
   119c0:	481f      	ldr	r0, [pc, #124]	; (11a40 <connected+0x680>)
   119c2:	f017 fc22 	bl	2920a <z_impl_z_log_msg_static_create>
   119c6:	46ad      	mov	sp, r5
   119c8:	e561      	b.n	1148e <connected+0xce>
   119ca:	f06f 031b 	mvn.w	r3, #27
   119ce:	e7d8      	b.n	11982 <connected+0x5c2>
   119d0:	2207      	movs	r2, #7
   119d2:	4922      	ldr	r1, [pc, #136]	; (11a5c <connected+0x69c>)
   119d4:	4628      	mov	r0, r5
   119d6:	f018 f8da 	bl	29b8e <memcmp>
		} else if (bt_addr_le_eq(addr, &EFL_bt_addr)) {
   119da:	2800      	cmp	r0, #0
   119dc:	f040 80a5 	bne.w	11b2a <connected+0x76a>
   119e0:	4b19      	ldr	r3, [pc, #100]	; (11a48 <connected+0x688>)
   119e2:	f3bf 8f5b 	dmb	ish
   119e6:	e853 2f00 	ldrex	r2, [r3]
   119ea:	f042 0110 	orr.w	r1, r2, #16
   119ee:	e843 1000 	strex	r0, r1, [r3]
   119f2:	2800      	cmp	r0, #0
   119f4:	d1f7      	bne.n	119e6 <connected+0x626>
   119f6:	f3bf 8f5b 	dmb	ish
			if(atomic_test_and_set_bit(flags, EFL_CONNECTED_FLAG)) {
   119fa:	f012 0f10 	tst.w	r2, #16
   119fe:	d131      	bne.n	11a64 <connected+0x6a4>
			LOG_INF("External FL connected, addr: %s", addr_str);
   11a00:	466d      	mov	r5, sp
   11a02:	2300      	movs	r3, #0
   11a04:	713b      	strb	r3, [r7, #4]
   11a06:	2302      	movs	r3, #2
   11a08:	717b      	strb	r3, [r7, #5]
   11a0a:	b088      	sub	sp, #32
   11a0c:	466c      	mov	r4, sp
   11a0e:	f114 0210 	adds.w	r2, r4, #16
   11a12:	d053      	beq.n	11abc <connected+0x6fc>
   11a14:	200e      	movs	r0, #14
   11a16:	b11a      	cbz	r2, 11a20 <connected+0x660>
   11a18:	2804      	cmp	r0, #4
   11a1a:	dd01      	ble.n	11a20 <connected+0x660>
   11a1c:	4b10      	ldr	r3, [pc, #64]	; (11a60 <connected+0x6a0>)
   11a1e:	6163      	str	r3, [r4, #20]
   11a20:	2300      	movs	r3, #0
   11a22:	703b      	strb	r3, [r7, #0]
   11a24:	2302      	movs	r3, #2
   11a26:	707b      	strb	r3, [r7, #1]
   11a28:	2a00      	cmp	r2, #0
   11a2a:	d054      	beq.n	11ad6 <connected+0x716>
   11a2c:	2808      	cmp	r0, #8
   11a2e:	dd02      	ble.n	11a36 <connected+0x676>
   11a30:	f107 0308 	add.w	r3, r7, #8
   11a34:	61a3      	str	r3, [r4, #24]
   11a36:	f104 031c 	add.w	r3, r4, #28
   11a3a:	2100      	movs	r1, #0
   11a3c:	e049      	b.n	11ad2 <connected+0x712>
   11a3e:	bf00      	nop
   11a40:	000314f8 	.word	0x000314f8
   11a44:	20007924 	.word	0x20007924
   11a48:	2000794c 	.word	0x2000794c
   11a4c:	000318b8 	.word	0x000318b8
   11a50:	00031858 	.word	0x00031858
   11a54:	2000791c 	.word	0x2000791c
   11a58:	000318d8 	.word	0x000318d8
   11a5c:	20007914 	.word	0x20007914
   11a60:	000318f8 	.word	0x000318f8
				LOG_WRN("WARNING, DUPLICATE CONNECTION:");
   11a64:	2006      	movs	r0, #6
   11a66:	f002 f94f 	bl	13d08 <z_log_msg_alloc>
   11a6a:	2200      	movs	r2, #0
   11a6c:	f36f 0200 	bfc	r2, #0, #1
   11a70:	f36f 0241 	bfc	r2, #1, #1
   11a74:	f36f 0282 	bfc	r2, #2, #1
   11a78:	f36f 02c5 	bfc	r2, #3, #3
   11a7c:	2302      	movs	r3, #2
   11a7e:	f363 1288 	bfi	r2, r3, #6, #3
   11a82:	2308      	movs	r3, #8
   11a84:	f363 2252 	bfi	r2, r3, #9, #10
   11a88:	f36f 42de 	bfc	r2, #19, #12
   11a8c:	f36f 72df 	bfc	r2, #31, #1
   11a90:	4604      	mov	r4, r0
   11a92:	b168      	cbz	r0, 11ab0 <connected+0x6f0>
   11a94:	f110 0310 	adds.w	r3, r0, #16
   11a98:	d001      	beq.n	11a9e <connected+0x6de>
   11a9a:	49be      	ldr	r1, [pc, #760]	; (11d94 <connected+0x9d4>)
   11a9c:	6141      	str	r1, [r0, #20]
   11a9e:	b13b      	cbz	r3, 11ab0 <connected+0x6f0>
   11aa0:	2302      	movs	r3, #2
   11aa2:	713b      	strb	r3, [r7, #4]
   11aa4:	2300      	movs	r3, #0
   11aa6:	717b      	strb	r3, [r7, #5]
   11aa8:	71bb      	strb	r3, [r7, #6]
   11aaa:	71fb      	strb	r3, [r7, #7]
   11aac:	6878      	ldr	r0, [r7, #4]
   11aae:	6120      	str	r0, [r4, #16]
   11ab0:	2300      	movs	r3, #0
   11ab2:	49b9      	ldr	r1, [pc, #740]	; (11d98 <connected+0x9d8>)
   11ab4:	4620      	mov	r0, r4
   11ab6:	f017 fb90 	bl	291da <z_log_msg_finalize>
   11aba:	e7a1      	b.n	11a00 <connected+0x640>
			LOG_INF("External FL connected, addr: %s", addr_str);
   11abc:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   11ac0:	e7a9      	b.n	11a16 <connected+0x656>
   11ac2:	f101 0c28 	add.w	ip, r1, #40	; 0x28
   11ac6:	44bc      	add	ip, r7
   11ac8:	f81c cc28 	ldrb.w	ip, [ip, #-40]
   11acc:	f803 cb01 	strb.w	ip, [r3], #1
   11ad0:	3101      	adds	r1, #1
   11ad2:	2901      	cmp	r1, #1
   11ad4:	d9f5      	bls.n	11ac2 <connected+0x702>
   11ad6:	280d      	cmp	r0, #13
   11ad8:	dd24      	ble.n	11b24 <connected+0x764>
   11ada:	230e      	movs	r3, #14
   11adc:	b142      	cbz	r2, 11af0 <connected+0x730>
   11ade:	2103      	movs	r1, #3
   11ae0:	7139      	strb	r1, [r7, #4]
   11ae2:	2100      	movs	r1, #0
   11ae4:	7179      	strb	r1, [r7, #5]
   11ae6:	71b9      	strb	r1, [r7, #6]
   11ae8:	2101      	movs	r1, #1
   11aea:	71f9      	strb	r1, [r7, #7]
   11aec:	6878      	ldr	r0, [r7, #4]
   11aee:	6120      	str	r0, [r4, #16]
   11af0:	2100      	movs	r1, #0
   11af2:	f36f 0100 	bfc	r1, #0, #1
   11af6:	f36f 0141 	bfc	r1, #1, #1
   11afa:	f36f 0182 	bfc	r1, #2, #1
   11afe:	f36f 01c5 	bfc	r1, #3, #3
   11b02:	2003      	movs	r0, #3
   11b04:	f360 1188 	bfi	r1, r0, #6, #3
   11b08:	f3c3 0309 	ubfx	r3, r3, #0, #10
   11b0c:	f363 2152 	bfi	r1, r3, #9, #10
   11b10:	f36f 41de 	bfc	r1, #19, #12
   11b14:	f36f 71df 	bfc	r1, #31, #1
   11b18:	2300      	movs	r3, #0
   11b1a:	489f      	ldr	r0, [pc, #636]	; (11d98 <connected+0x9d8>)
   11b1c:	f017 fb75 	bl	2920a <z_impl_z_log_msg_static_create>
   11b20:	46ad      	mov	sp, r5
   11b22:	e4b4      	b.n	1148e <connected+0xce>
   11b24:	f06f 031b 	mvn.w	r3, #27
   11b28:	e7d8      	b.n	11adc <connected+0x71c>
   11b2a:	2207      	movs	r2, #7
   11b2c:	499b      	ldr	r1, [pc, #620]	; (11d9c <connected+0x9dc>)
   11b2e:	4628      	mov	r0, r5
   11b30:	f018 f82d 	bl	29b8e <memcmp>
		} else if (bt_addr_le_eq(addr, &EFR_bt_addr)) {
   11b34:	2800      	cmp	r0, #0
   11b36:	f040 8092 	bne.w	11c5e <connected+0x89e>
   11b3a:	4b99      	ldr	r3, [pc, #612]	; (11da0 <connected+0x9e0>)
   11b3c:	f3bf 8f5b 	dmb	ish
   11b40:	e853 2f00 	ldrex	r2, [r3]
   11b44:	f042 0120 	orr.w	r1, r2, #32
   11b48:	e843 1000 	strex	r0, r1, [r3]
   11b4c:	2800      	cmp	r0, #0
   11b4e:	d1f7      	bne.n	11b40 <connected+0x780>
   11b50:	f3bf 8f5b 	dmb	ish
			if(atomic_test_and_set_bit(flags, EFR_CONNECTED_FLAG)) {
   11b54:	f012 0f20 	tst.w	r2, #32
   11b58:	d11e      	bne.n	11b98 <connected+0x7d8>
			LOG_INF("External FR connected, addr: %s", addr_str);
   11b5a:	466d      	mov	r5, sp
   11b5c:	2300      	movs	r3, #0
   11b5e:	713b      	strb	r3, [r7, #4]
   11b60:	2302      	movs	r3, #2
   11b62:	717b      	strb	r3, [r7, #5]
   11b64:	b088      	sub	sp, #32
   11b66:	466c      	mov	r4, sp
   11b68:	f114 0210 	adds.w	r2, r4, #16
   11b6c:	d040      	beq.n	11bf0 <connected+0x830>
   11b6e:	200e      	movs	r0, #14
   11b70:	b11a      	cbz	r2, 11b7a <connected+0x7ba>
   11b72:	2804      	cmp	r0, #4
   11b74:	dd01      	ble.n	11b7a <connected+0x7ba>
   11b76:	4b8b      	ldr	r3, [pc, #556]	; (11da4 <connected+0x9e4>)
   11b78:	6163      	str	r3, [r4, #20]
   11b7a:	2300      	movs	r3, #0
   11b7c:	703b      	strb	r3, [r7, #0]
   11b7e:	2302      	movs	r3, #2
   11b80:	707b      	strb	r3, [r7, #1]
   11b82:	2a00      	cmp	r2, #0
   11b84:	d041      	beq.n	11c0a <connected+0x84a>
   11b86:	2808      	cmp	r0, #8
   11b88:	dd02      	ble.n	11b90 <connected+0x7d0>
   11b8a:	f107 0308 	add.w	r3, r7, #8
   11b8e:	61a3      	str	r3, [r4, #24]
   11b90:	f104 031c 	add.w	r3, r4, #28
   11b94:	2100      	movs	r1, #0
   11b96:	e036      	b.n	11c06 <connected+0x846>
				LOG_WRN("WARNING, DUPLICATE CONNECTION:");
   11b98:	2006      	movs	r0, #6
   11b9a:	f002 f8b5 	bl	13d08 <z_log_msg_alloc>
   11b9e:	2200      	movs	r2, #0
   11ba0:	f36f 0200 	bfc	r2, #0, #1
   11ba4:	f36f 0241 	bfc	r2, #1, #1
   11ba8:	f36f 0282 	bfc	r2, #2, #1
   11bac:	f36f 02c5 	bfc	r2, #3, #3
   11bb0:	2302      	movs	r3, #2
   11bb2:	f363 1288 	bfi	r2, r3, #6, #3
   11bb6:	2308      	movs	r3, #8
   11bb8:	f363 2252 	bfi	r2, r3, #9, #10
   11bbc:	f36f 42de 	bfc	r2, #19, #12
   11bc0:	f36f 72df 	bfc	r2, #31, #1
   11bc4:	4604      	mov	r4, r0
   11bc6:	b168      	cbz	r0, 11be4 <connected+0x824>
   11bc8:	f110 0310 	adds.w	r3, r0, #16
   11bcc:	d001      	beq.n	11bd2 <connected+0x812>
   11bce:	4971      	ldr	r1, [pc, #452]	; (11d94 <connected+0x9d4>)
   11bd0:	6141      	str	r1, [r0, #20]
   11bd2:	b13b      	cbz	r3, 11be4 <connected+0x824>
   11bd4:	2302      	movs	r3, #2
   11bd6:	713b      	strb	r3, [r7, #4]
   11bd8:	2300      	movs	r3, #0
   11bda:	717b      	strb	r3, [r7, #5]
   11bdc:	71bb      	strb	r3, [r7, #6]
   11bde:	71fb      	strb	r3, [r7, #7]
   11be0:	6878      	ldr	r0, [r7, #4]
   11be2:	6120      	str	r0, [r4, #16]
   11be4:	2300      	movs	r3, #0
   11be6:	496c      	ldr	r1, [pc, #432]	; (11d98 <connected+0x9d8>)
   11be8:	4620      	mov	r0, r4
   11bea:	f017 faf6 	bl	291da <z_log_msg_finalize>
   11bee:	e7b4      	b.n	11b5a <connected+0x79a>
			LOG_INF("External FR connected, addr: %s", addr_str);
   11bf0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   11bf4:	e7bc      	b.n	11b70 <connected+0x7b0>
   11bf6:	f101 0c28 	add.w	ip, r1, #40	; 0x28
   11bfa:	44bc      	add	ip, r7
   11bfc:	f81c cc28 	ldrb.w	ip, [ip, #-40]
   11c00:	f803 cb01 	strb.w	ip, [r3], #1
   11c04:	3101      	adds	r1, #1
   11c06:	2901      	cmp	r1, #1
   11c08:	d9f5      	bls.n	11bf6 <connected+0x836>
   11c0a:	280d      	cmp	r0, #13
   11c0c:	dd24      	ble.n	11c58 <connected+0x898>
   11c0e:	230e      	movs	r3, #14
   11c10:	b142      	cbz	r2, 11c24 <connected+0x864>
   11c12:	2103      	movs	r1, #3
   11c14:	7139      	strb	r1, [r7, #4]
   11c16:	2100      	movs	r1, #0
   11c18:	7179      	strb	r1, [r7, #5]
   11c1a:	71b9      	strb	r1, [r7, #6]
   11c1c:	2101      	movs	r1, #1
   11c1e:	71f9      	strb	r1, [r7, #7]
   11c20:	6878      	ldr	r0, [r7, #4]
   11c22:	6120      	str	r0, [r4, #16]
   11c24:	2100      	movs	r1, #0
   11c26:	f36f 0100 	bfc	r1, #0, #1
   11c2a:	f36f 0141 	bfc	r1, #1, #1
   11c2e:	f36f 0182 	bfc	r1, #2, #1
   11c32:	f36f 01c5 	bfc	r1, #3, #3
   11c36:	2003      	movs	r0, #3
   11c38:	f360 1188 	bfi	r1, r0, #6, #3
   11c3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
   11c40:	f363 2152 	bfi	r1, r3, #9, #10
   11c44:	f36f 41de 	bfc	r1, #19, #12
   11c48:	f36f 71df 	bfc	r1, #31, #1
   11c4c:	2300      	movs	r3, #0
   11c4e:	4852      	ldr	r0, [pc, #328]	; (11d98 <connected+0x9d8>)
   11c50:	f017 fadb 	bl	2920a <z_impl_z_log_msg_static_create>
   11c54:	46ad      	mov	sp, r5
   11c56:	e41a      	b.n	1148e <connected+0xce>
   11c58:	f06f 031b 	mvn.w	r3, #27
   11c5c:	e7d8      	b.n	11c10 <connected+0x850>
   11c5e:	2207      	movs	r2, #7
   11c60:	4951      	ldr	r1, [pc, #324]	; (11da8 <connected+0x9e8>)
   11c62:	4628      	mov	r0, r5
   11c64:	f017 ff93 	bl	29b8e <memcmp>
		} else if (bt_addr_le_eq(addr, &ERL_bt_addr)) {
   11c68:	2800      	cmp	r0, #0
   11c6a:	f040 80a1 	bne.w	11db0 <connected+0x9f0>
   11c6e:	4b4c      	ldr	r3, [pc, #304]	; (11da0 <connected+0x9e0>)
   11c70:	f3bf 8f5b 	dmb	ish
   11c74:	e853 2f00 	ldrex	r2, [r3]
   11c78:	f042 0140 	orr.w	r1, r2, #64	; 0x40
   11c7c:	e843 1000 	strex	r0, r1, [r3]
   11c80:	2800      	cmp	r0, #0
   11c82:	d1f7      	bne.n	11c74 <connected+0x8b4>
   11c84:	f3bf 8f5b 	dmb	ish
			if(atomic_test_and_set_bit(flags, ERL_CONNECTED_FLAG)) {
   11c88:	f012 0f40 	tst.w	r2, #64	; 0x40
   11c8c:	d11e      	bne.n	11ccc <connected+0x90c>
			LOG_INF("External RL connected, addr: %s", addr_str);
   11c8e:	466d      	mov	r5, sp
   11c90:	2300      	movs	r3, #0
   11c92:	713b      	strb	r3, [r7, #4]
   11c94:	2302      	movs	r3, #2
   11c96:	717b      	strb	r3, [r7, #5]
   11c98:	b088      	sub	sp, #32
   11c9a:	466c      	mov	r4, sp
   11c9c:	f114 0210 	adds.w	r2, r4, #16
   11ca0:	d040      	beq.n	11d24 <connected+0x964>
   11ca2:	200e      	movs	r0, #14
   11ca4:	b11a      	cbz	r2, 11cae <connected+0x8ee>
   11ca6:	2804      	cmp	r0, #4
   11ca8:	dd01      	ble.n	11cae <connected+0x8ee>
   11caa:	4b40      	ldr	r3, [pc, #256]	; (11dac <connected+0x9ec>)
   11cac:	6163      	str	r3, [r4, #20]
   11cae:	2300      	movs	r3, #0
   11cb0:	703b      	strb	r3, [r7, #0]
   11cb2:	2302      	movs	r3, #2
   11cb4:	707b      	strb	r3, [r7, #1]
   11cb6:	2a00      	cmp	r2, #0
   11cb8:	d041      	beq.n	11d3e <connected+0x97e>
   11cba:	2808      	cmp	r0, #8
   11cbc:	dd02      	ble.n	11cc4 <connected+0x904>
   11cbe:	f107 0308 	add.w	r3, r7, #8
   11cc2:	61a3      	str	r3, [r4, #24]
   11cc4:	f104 031c 	add.w	r3, r4, #28
   11cc8:	2100      	movs	r1, #0
   11cca:	e036      	b.n	11d3a <connected+0x97a>
				LOG_WRN("WARNING, DUPLICATE CONNECTION:");
   11ccc:	2006      	movs	r0, #6
   11cce:	f002 f81b 	bl	13d08 <z_log_msg_alloc>
   11cd2:	2200      	movs	r2, #0
   11cd4:	f36f 0200 	bfc	r2, #0, #1
   11cd8:	f36f 0241 	bfc	r2, #1, #1
   11cdc:	f36f 0282 	bfc	r2, #2, #1
   11ce0:	f36f 02c5 	bfc	r2, #3, #3
   11ce4:	2302      	movs	r3, #2
   11ce6:	f363 1288 	bfi	r2, r3, #6, #3
   11cea:	2308      	movs	r3, #8
   11cec:	f363 2252 	bfi	r2, r3, #9, #10
   11cf0:	f36f 42de 	bfc	r2, #19, #12
   11cf4:	f36f 72df 	bfc	r2, #31, #1
   11cf8:	4604      	mov	r4, r0
   11cfa:	b168      	cbz	r0, 11d18 <connected+0x958>
   11cfc:	f110 0310 	adds.w	r3, r0, #16
   11d00:	d001      	beq.n	11d06 <connected+0x946>
   11d02:	4924      	ldr	r1, [pc, #144]	; (11d94 <connected+0x9d4>)
   11d04:	6141      	str	r1, [r0, #20]
   11d06:	b13b      	cbz	r3, 11d18 <connected+0x958>
   11d08:	2302      	movs	r3, #2
   11d0a:	713b      	strb	r3, [r7, #4]
   11d0c:	2300      	movs	r3, #0
   11d0e:	717b      	strb	r3, [r7, #5]
   11d10:	71bb      	strb	r3, [r7, #6]
   11d12:	71fb      	strb	r3, [r7, #7]
   11d14:	6878      	ldr	r0, [r7, #4]
   11d16:	6120      	str	r0, [r4, #16]
   11d18:	2300      	movs	r3, #0
   11d1a:	491f      	ldr	r1, [pc, #124]	; (11d98 <connected+0x9d8>)
   11d1c:	4620      	mov	r0, r4
   11d1e:	f017 fa5c 	bl	291da <z_log_msg_finalize>
   11d22:	e7b4      	b.n	11c8e <connected+0x8ce>
			LOG_INF("External RL connected, addr: %s", addr_str);
   11d24:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   11d28:	e7bc      	b.n	11ca4 <connected+0x8e4>
   11d2a:	f101 0c28 	add.w	ip, r1, #40	; 0x28
   11d2e:	44bc      	add	ip, r7
   11d30:	f81c cc28 	ldrb.w	ip, [ip, #-40]
   11d34:	f803 cb01 	strb.w	ip, [r3], #1
   11d38:	3101      	adds	r1, #1
   11d3a:	2901      	cmp	r1, #1
   11d3c:	d9f5      	bls.n	11d2a <connected+0x96a>
   11d3e:	280d      	cmp	r0, #13
   11d40:	dd25      	ble.n	11d8e <connected+0x9ce>
   11d42:	230e      	movs	r3, #14
   11d44:	b142      	cbz	r2, 11d58 <connected+0x998>
   11d46:	2103      	movs	r1, #3
   11d48:	7139      	strb	r1, [r7, #4]
   11d4a:	2100      	movs	r1, #0
   11d4c:	7179      	strb	r1, [r7, #5]
   11d4e:	71b9      	strb	r1, [r7, #6]
   11d50:	2101      	movs	r1, #1
   11d52:	71f9      	strb	r1, [r7, #7]
   11d54:	6878      	ldr	r0, [r7, #4]
   11d56:	6120      	str	r0, [r4, #16]
   11d58:	2100      	movs	r1, #0
   11d5a:	f36f 0100 	bfc	r1, #0, #1
   11d5e:	f36f 0141 	bfc	r1, #1, #1
   11d62:	f36f 0182 	bfc	r1, #2, #1
   11d66:	f36f 01c5 	bfc	r1, #3, #3
   11d6a:	2003      	movs	r0, #3
   11d6c:	f360 1188 	bfi	r1, r0, #6, #3
   11d70:	f3c3 0309 	ubfx	r3, r3, #0, #10
   11d74:	f363 2152 	bfi	r1, r3, #9, #10
   11d78:	f36f 41de 	bfc	r1, #19, #12
   11d7c:	f36f 71df 	bfc	r1, #31, #1
   11d80:	2300      	movs	r3, #0
   11d82:	4805      	ldr	r0, [pc, #20]	; (11d98 <connected+0x9d8>)
   11d84:	f017 fa41 	bl	2920a <z_impl_z_log_msg_static_create>
   11d88:	46ad      	mov	sp, r5
   11d8a:	f7ff bb80 	b.w	1148e <connected+0xce>
   11d8e:	f06f 031b 	mvn.w	r3, #27
   11d92:	e7d7      	b.n	11d44 <connected+0x984>
   11d94:	00031858 	.word	0x00031858
   11d98:	000314f8 	.word	0x000314f8
   11d9c:	2000790c 	.word	0x2000790c
   11da0:	2000794c 	.word	0x2000794c
   11da4:	00031918 	.word	0x00031918
   11da8:	20007904 	.word	0x20007904
   11dac:	00031938 	.word	0x00031938
   11db0:	2207      	movs	r2, #7
   11db2:	49ae      	ldr	r1, [pc, #696]	; (1206c <connected+0xcac>)
   11db4:	4628      	mov	r0, r5
   11db6:	f017 feea 	bl	29b8e <memcmp>
		} else if (bt_addr_le_eq(addr, &ERR_bt_addr)) {
   11dba:	b300      	cbz	r0, 11dfe <connected+0xa3e>
			LOG_WRN("UNRECOGNIZED SENSOR CONNECTED, addr: %s", addr_str);
   11dbc:	466c      	mov	r4, sp
   11dbe:	2300      	movs	r3, #0
   11dc0:	713b      	strb	r3, [r7, #4]
   11dc2:	2302      	movs	r3, #2
   11dc4:	717b      	strb	r3, [r7, #5]
   11dc6:	b088      	sub	sp, #32
   11dc8:	466b      	mov	r3, sp
   11dca:	f113 0210 	adds.w	r2, r3, #16
   11dce:	f000 80a9 	beq.w	11f24 <connected+0xb64>
   11dd2:	250e      	movs	r5, #14
   11dd4:	b11a      	cbz	r2, 11dde <connected+0xa1e>
   11dd6:	2d04      	cmp	r5, #4
   11dd8:	dd01      	ble.n	11dde <connected+0xa1e>
   11dda:	49a5      	ldr	r1, [pc, #660]	; (12070 <connected+0xcb0>)
   11ddc:	6159      	str	r1, [r3, #20]
   11dde:	2100      	movs	r1, #0
   11de0:	7039      	strb	r1, [r7, #0]
   11de2:	2102      	movs	r1, #2
   11de4:	7079      	strb	r1, [r7, #1]
   11de6:	2a00      	cmp	r2, #0
   11de8:	f000 80a9 	beq.w	11f3e <connected+0xb7e>
   11dec:	2d08      	cmp	r5, #8
   11dee:	dd02      	ble.n	11df6 <connected+0xa36>
   11df0:	f107 0108 	add.w	r1, r7, #8
   11df4:	6199      	str	r1, [r3, #24]
   11df6:	f103 011c 	add.w	r1, r3, #28
   11dfa:	2000      	movs	r0, #0
   11dfc:	e09d      	b.n	11f3a <connected+0xb7a>
   11dfe:	4b9d      	ldr	r3, [pc, #628]	; (12074 <connected+0xcb4>)
   11e00:	f3bf 8f5b 	dmb	ish
   11e04:	e853 2f00 	ldrex	r2, [r3]
   11e08:	f042 0180 	orr.w	r1, r2, #128	; 0x80
   11e0c:	e843 1000 	strex	r0, r1, [r3]
   11e10:	2800      	cmp	r0, #0
   11e12:	d1f7      	bne.n	11e04 <connected+0xa44>
   11e14:	f3bf 8f5b 	dmb	ish
			if(atomic_test_and_set_bit(flags, ERR_CONNECTED_FLAG)) {
   11e18:	f012 0f80 	tst.w	r2, #128	; 0x80
   11e1c:	d11e      	bne.n	11e5c <connected+0xa9c>
			LOG_INF("External RR connected, addr: %s", addr_str);
   11e1e:	466d      	mov	r5, sp
   11e20:	2300      	movs	r3, #0
   11e22:	713b      	strb	r3, [r7, #4]
   11e24:	2302      	movs	r3, #2
   11e26:	717b      	strb	r3, [r7, #5]
   11e28:	b088      	sub	sp, #32
   11e2a:	466b      	mov	r3, sp
   11e2c:	f113 0210 	adds.w	r2, r3, #16
   11e30:	d040      	beq.n	11eb4 <connected+0xaf4>
   11e32:	200e      	movs	r0, #14
   11e34:	b11a      	cbz	r2, 11e3e <connected+0xa7e>
   11e36:	2804      	cmp	r0, #4
   11e38:	dd01      	ble.n	11e3e <connected+0xa7e>
   11e3a:	498f      	ldr	r1, [pc, #572]	; (12078 <connected+0xcb8>)
   11e3c:	6159      	str	r1, [r3, #20]
   11e3e:	2100      	movs	r1, #0
   11e40:	7039      	strb	r1, [r7, #0]
   11e42:	2102      	movs	r1, #2
   11e44:	7079      	strb	r1, [r7, #1]
   11e46:	2a00      	cmp	r2, #0
   11e48:	d041      	beq.n	11ece <connected+0xb0e>
   11e4a:	2808      	cmp	r0, #8
   11e4c:	dd02      	ble.n	11e54 <connected+0xa94>
   11e4e:	f107 0108 	add.w	r1, r7, #8
   11e52:	6199      	str	r1, [r3, #24]
   11e54:	f103 011c 	add.w	r1, r3, #28
   11e58:	2400      	movs	r4, #0
   11e5a:	e036      	b.n	11eca <connected+0xb0a>
				LOG_WRN("WARNING, DUPLICATE CONNECTION:");
   11e5c:	2006      	movs	r0, #6
   11e5e:	f001 ff53 	bl	13d08 <z_log_msg_alloc>
   11e62:	2200      	movs	r2, #0
   11e64:	f36f 0200 	bfc	r2, #0, #1
   11e68:	f36f 0241 	bfc	r2, #1, #1
   11e6c:	f36f 0282 	bfc	r2, #2, #1
   11e70:	f36f 02c5 	bfc	r2, #3, #3
   11e74:	2302      	movs	r3, #2
   11e76:	f363 1288 	bfi	r2, r3, #6, #3
   11e7a:	2308      	movs	r3, #8
   11e7c:	f363 2252 	bfi	r2, r3, #9, #10
   11e80:	f36f 42de 	bfc	r2, #19, #12
   11e84:	f36f 72df 	bfc	r2, #31, #1
   11e88:	4604      	mov	r4, r0
   11e8a:	b168      	cbz	r0, 11ea8 <connected+0xae8>
   11e8c:	f110 0310 	adds.w	r3, r0, #16
   11e90:	d001      	beq.n	11e96 <connected+0xad6>
   11e92:	497a      	ldr	r1, [pc, #488]	; (1207c <connected+0xcbc>)
   11e94:	6141      	str	r1, [r0, #20]
   11e96:	b13b      	cbz	r3, 11ea8 <connected+0xae8>
   11e98:	2302      	movs	r3, #2
   11e9a:	713b      	strb	r3, [r7, #4]
   11e9c:	2300      	movs	r3, #0
   11e9e:	717b      	strb	r3, [r7, #5]
   11ea0:	71bb      	strb	r3, [r7, #6]
   11ea2:	71fb      	strb	r3, [r7, #7]
   11ea4:	6878      	ldr	r0, [r7, #4]
   11ea6:	6120      	str	r0, [r4, #16]
   11ea8:	2300      	movs	r3, #0
   11eaa:	4975      	ldr	r1, [pc, #468]	; (12080 <connected+0xcc0>)
   11eac:	4620      	mov	r0, r4
   11eae:	f017 f994 	bl	291da <z_log_msg_finalize>
   11eb2:	e7b4      	b.n	11e1e <connected+0xa5e>
			LOG_INF("External RR connected, addr: %s", addr_str);
   11eb4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   11eb8:	e7bc      	b.n	11e34 <connected+0xa74>
   11eba:	f104 0c28 	add.w	ip, r4, #40	; 0x28
   11ebe:	44bc      	add	ip, r7
   11ec0:	f81c cc28 	ldrb.w	ip, [ip, #-40]
   11ec4:	f801 cb01 	strb.w	ip, [r1], #1
   11ec8:	3401      	adds	r4, #1
   11eca:	2c01      	cmp	r4, #1
   11ecc:	d9f5      	bls.n	11eba <connected+0xafa>
   11ece:	280d      	cmp	r0, #13
   11ed0:	dd25      	ble.n	11f1e <connected+0xb5e>
   11ed2:	240e      	movs	r4, #14
   11ed4:	b142      	cbz	r2, 11ee8 <connected+0xb28>
   11ed6:	2103      	movs	r1, #3
   11ed8:	7139      	strb	r1, [r7, #4]
   11eda:	2100      	movs	r1, #0
   11edc:	7179      	strb	r1, [r7, #5]
   11ede:	71b9      	strb	r1, [r7, #6]
   11ee0:	2101      	movs	r1, #1
   11ee2:	71f9      	strb	r1, [r7, #7]
   11ee4:	6878      	ldr	r0, [r7, #4]
   11ee6:	6118      	str	r0, [r3, #16]
   11ee8:	2100      	movs	r1, #0
   11eea:	f36f 0100 	bfc	r1, #0, #1
   11eee:	f36f 0141 	bfc	r1, #1, #1
   11ef2:	f36f 0182 	bfc	r1, #2, #1
   11ef6:	f36f 01c5 	bfc	r1, #3, #3
   11efa:	2303      	movs	r3, #3
   11efc:	f363 1188 	bfi	r1, r3, #6, #3
   11f00:	f3c4 0409 	ubfx	r4, r4, #0, #10
   11f04:	f364 2152 	bfi	r1, r4, #9, #10
   11f08:	f36f 41de 	bfc	r1, #19, #12
   11f0c:	f36f 71df 	bfc	r1, #31, #1
   11f10:	2300      	movs	r3, #0
   11f12:	485b      	ldr	r0, [pc, #364]	; (12080 <connected+0xcc0>)
   11f14:	f017 f979 	bl	2920a <z_impl_z_log_msg_static_create>
   11f18:	46ad      	mov	sp, r5
   11f1a:	f7ff bab8 	b.w	1148e <connected+0xce>
   11f1e:	f06f 041b 	mvn.w	r4, #27
   11f22:	e7d7      	b.n	11ed4 <connected+0xb14>
			LOG_WRN("UNRECOGNIZED SENSOR CONNECTED, addr: %s", addr_str);
   11f24:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   11f28:	e754      	b.n	11dd4 <connected+0xa14>
   11f2a:	f100 0c28 	add.w	ip, r0, #40	; 0x28
   11f2e:	44bc      	add	ip, r7
   11f30:	f81c cc28 	ldrb.w	ip, [ip, #-40]
   11f34:	f801 cb01 	strb.w	ip, [r1], #1
   11f38:	3001      	adds	r0, #1
   11f3a:	2801      	cmp	r0, #1
   11f3c:	d9f5      	bls.n	11f2a <connected+0xb6a>
   11f3e:	2d0d      	cmp	r5, #13
   11f40:	dd25      	ble.n	11f8e <connected+0xbce>
   11f42:	250e      	movs	r5, #14
   11f44:	b142      	cbz	r2, 11f58 <connected+0xb98>
   11f46:	2103      	movs	r1, #3
   11f48:	7139      	strb	r1, [r7, #4]
   11f4a:	2100      	movs	r1, #0
   11f4c:	7179      	strb	r1, [r7, #5]
   11f4e:	71b9      	strb	r1, [r7, #6]
   11f50:	2101      	movs	r1, #1
   11f52:	71f9      	strb	r1, [r7, #7]
   11f54:	6878      	ldr	r0, [r7, #4]
   11f56:	6118      	str	r0, [r3, #16]
   11f58:	2100      	movs	r1, #0
   11f5a:	f36f 0100 	bfc	r1, #0, #1
   11f5e:	f36f 0141 	bfc	r1, #1, #1
   11f62:	f36f 0182 	bfc	r1, #2, #1
   11f66:	f36f 01c5 	bfc	r1, #3, #3
   11f6a:	2302      	movs	r3, #2
   11f6c:	f363 1188 	bfi	r1, r3, #6, #3
   11f70:	f3c5 0509 	ubfx	r5, r5, #0, #10
   11f74:	f365 2152 	bfi	r1, r5, #9, #10
   11f78:	f36f 41de 	bfc	r1, #19, #12
   11f7c:	f36f 71df 	bfc	r1, #31, #1
   11f80:	2300      	movs	r3, #0
   11f82:	483f      	ldr	r0, [pc, #252]	; (12080 <connected+0xcc0>)
   11f84:	f017 f941 	bl	2920a <z_impl_z_log_msg_static_create>
   11f88:	46a5      	mov	sp, r4
   11f8a:	f7ff ba80 	b.w	1148e <connected+0xce>
   11f8e:	f06f 051b 	mvn.w	r5, #27
   11f92:	e7d7      	b.n	11f44 <connected+0xb84>
		scan_param.interval = BT_GAP_SCAN_SLOW_INTERVAL_1;
   11f94:	483b      	ldr	r0, [pc, #236]	; (12084 <connected+0xcc4>)
   11f96:	f44f 6300 	mov.w	r3, #2048	; 0x800
   11f9a:	8083      	strh	r3, [r0, #4]
		scan_param.window = BT_GAP_SCAN_SLOW_WINDOW_1;
   11f9c:	2312      	movs	r3, #18
   11f9e:	80c3      	strh	r3, [r0, #6]
		err = bt_conn_le_create_auto(&scan_param, &conn_param);
   11fa0:	4939      	ldr	r1, [pc, #228]	; (12088 <connected+0xcc8>)
   11fa2:	f007 ff99 	bl	19ed8 <bt_conn_le_create_auto>
		if (err) {
   11fa6:	f010 0fff 	tst.w	r0, #255	; 0xff
   11faa:	f43f aa8f 	beq.w	114cc <connected+0x10c>
			LOG_ERR("Failed to start automatically connecting (err %d)", err);
   11fae:	b2c4      	uxtb	r4, r0
   11fb0:	2008      	movs	r0, #8
   11fb2:	f001 fea9 	bl	13d08 <z_log_msg_alloc>
   11fb6:	2200      	movs	r2, #0
   11fb8:	f36f 0200 	bfc	r2, #0, #1
   11fbc:	f36f 0241 	bfc	r2, #1, #1
   11fc0:	f36f 0282 	bfc	r2, #2, #1
   11fc4:	f36f 02c5 	bfc	r2, #3, #3
   11fc8:	2301      	movs	r3, #1
   11fca:	f363 1288 	bfi	r2, r3, #6, #3
   11fce:	230c      	movs	r3, #12
   11fd0:	f363 2252 	bfi	r2, r3, #9, #10
   11fd4:	f36f 42de 	bfc	r2, #19, #12
   11fd8:	f36f 72df 	bfc	r2, #31, #1
   11fdc:	4605      	mov	r5, r0
   11fde:	b170      	cbz	r0, 11ffe <connected+0xc3e>
   11fe0:	f110 0310 	adds.w	r3, r0, #16
   11fe4:	d002      	beq.n	11fec <connected+0xc2c>
   11fe6:	4929      	ldr	r1, [pc, #164]	; (1208c <connected+0xccc>)
   11fe8:	6141      	str	r1, [r0, #20]
   11fea:	6184      	str	r4, [r0, #24]
   11fec:	b13b      	cbz	r3, 11ffe <connected+0xc3e>
   11fee:	2303      	movs	r3, #3
   11ff0:	713b      	strb	r3, [r7, #4]
   11ff2:	2300      	movs	r3, #0
   11ff4:	717b      	strb	r3, [r7, #5]
   11ff6:	71bb      	strb	r3, [r7, #6]
   11ff8:	71fb      	strb	r3, [r7, #7]
   11ffa:	6878      	ldr	r0, [r7, #4]
   11ffc:	6128      	str	r0, [r5, #16]
   11ffe:	2300      	movs	r3, #0
   12000:	491f      	ldr	r1, [pc, #124]	; (12080 <connected+0xcc0>)
   12002:	4628      	mov	r0, r5
   12004:	f017 f8e9 	bl	291da <z_log_msg_finalize>
   12008:	f7ff ba60 	b.w	114cc <connected+0x10c>
			LOG_ERR("Failed to start automatically connecting (err %d)", err);
   1200c:	b2c4      	uxtb	r4, r0
   1200e:	2008      	movs	r0, #8
   12010:	f001 fe7a 	bl	13d08 <z_log_msg_alloc>
   12014:	2200      	movs	r2, #0
   12016:	f36f 0200 	bfc	r2, #0, #1
   1201a:	f36f 0241 	bfc	r2, #1, #1
   1201e:	f36f 0282 	bfc	r2, #2, #1
   12022:	f36f 02c5 	bfc	r2, #3, #3
   12026:	2301      	movs	r3, #1
   12028:	f363 1288 	bfi	r2, r3, #6, #3
   1202c:	230c      	movs	r3, #12
   1202e:	f363 2252 	bfi	r2, r3, #9, #10
   12032:	f36f 42de 	bfc	r2, #19, #12
   12036:	f36f 72df 	bfc	r2, #31, #1
   1203a:	4605      	mov	r5, r0
   1203c:	b170      	cbz	r0, 1205c <connected+0xc9c>
   1203e:	f110 0310 	adds.w	r3, r0, #16
   12042:	d002      	beq.n	1204a <connected+0xc8a>
   12044:	4911      	ldr	r1, [pc, #68]	; (1208c <connected+0xccc>)
   12046:	6141      	str	r1, [r0, #20]
   12048:	6184      	str	r4, [r0, #24]
   1204a:	b13b      	cbz	r3, 1205c <connected+0xc9c>
   1204c:	2303      	movs	r3, #3
   1204e:	713b      	strb	r3, [r7, #4]
   12050:	2300      	movs	r3, #0
   12052:	717b      	strb	r3, [r7, #5]
   12054:	71bb      	strb	r3, [r7, #6]
   12056:	71fb      	strb	r3, [r7, #7]
   12058:	6878      	ldr	r0, [r7, #4]
   1205a:	6128      	str	r0, [r5, #16]
   1205c:	2300      	movs	r3, #0
   1205e:	4908      	ldr	r1, [pc, #32]	; (12080 <connected+0xcc0>)
   12060:	4628      	mov	r0, r5
   12062:	f017 f8ba 	bl	291da <z_log_msg_finalize>
}
   12066:	f7ff ba31 	b.w	114cc <connected+0x10c>
   1206a:	bf00      	nop
   1206c:	200078fc 	.word	0x200078fc
   12070:	00031978 	.word	0x00031978
   12074:	2000794c 	.word	0x2000794c
   12078:	00031958 	.word	0x00031958
   1207c:	00031858 	.word	0x00031858
   12080:	000314f8 	.word	0x000314f8
   12084:	2000793c 	.word	0x2000793c
   12088:	20000648 	.word	0x20000648
   1208c:	00031804 	.word	0x00031804

00012090 <create_some_entries>:
	return res;
}

#ifdef CONFIG_SAMPLE_FATFS_CREATE_SOME_ENTRIES
static bool create_some_entries(const char *base_path)
{
   12090:	b5f0      	push	{r4, r5, r6, r7, lr}
   12092:	b0a7      	sub	sp, #156	; 0x9c
   12094:	af00      	add	r7, sp, #0
   12096:	4605      	mov	r5, r0
	char path[MAX_PATH];
	struct fs_file_t file;
	int base = strlen(base_path);
   12098:	f017 fd3d 	bl	29b16 <strlen>
 * @param zfp Pointer to file object
 *
 */
static inline void fs_file_t_init(struct fs_file_t *zfp)
{
	*zfp = (struct fs_file_t){ 0 };
   1209c:	2300      	movs	r3, #0
   1209e:	60fb      	str	r3, [r7, #12]
   120a0:	613b      	str	r3, [r7, #16]
   120a2:	617b      	str	r3, [r7, #20]

	fs_file_t_init(&file);

	if (base >= (sizeof(path) - SOME_REQUIRED_LEN)) {
   120a4:	2876      	cmp	r0, #118	; 0x76
   120a6:	d81e      	bhi.n	120e6 <create_some_entries+0x56>
   120a8:	4604      	mov	r4, r0
		LOG_ERR("Not enough concatenation buffer to create file paths");
		return false;
	}

	LOG_INF("Creating some dir entries in %s", base_path);
   120aa:	466e      	mov	r6, sp
   120ac:	2300      	movs	r3, #0
   120ae:	723b      	strb	r3, [r7, #8]
   120b0:	2302      	movs	r3, #2
   120b2:	727b      	strb	r3, [r7, #9]
   120b4:	b088      	sub	sp, #32
   120b6:	4669      	mov	r1, sp
   120b8:	f111 0210 	adds.w	r2, r1, #16
   120bc:	d040      	beq.n	12140 <create_some_entries+0xb0>
   120be:	200e      	movs	r0, #14
   120c0:	b11a      	cbz	r2, 120ca <create_some_entries+0x3a>
   120c2:	2804      	cmp	r0, #4
   120c4:	dd01      	ble.n	120ca <create_some_entries+0x3a>
   120c6:	4bae      	ldr	r3, [pc, #696]	; (12380 <create_some_entries+0x2f0>)
   120c8:	614b      	str	r3, [r1, #20]
   120ca:	2300      	movs	r3, #0
   120cc:	713b      	strb	r3, [r7, #4]
   120ce:	2302      	movs	r3, #2
   120d0:	717b      	strb	r3, [r7, #5]
   120d2:	2a00      	cmp	r2, #0
   120d4:	d043      	beq.n	1215e <create_some_entries+0xce>
   120d6:	2808      	cmp	r0, #8
   120d8:	dd00      	ble.n	120dc <create_some_entries+0x4c>
   120da:	618d      	str	r5, [r1, #24]
   120dc:	f101 031c 	add.w	r3, r1, #28
   120e0:	f04f 0c00 	mov.w	ip, #0
   120e4:	e038      	b.n	12158 <create_some_entries+0xc8>
		LOG_ERR("Not enough concatenation buffer to create file paths");
   120e6:	2006      	movs	r0, #6
   120e8:	f001 fe0e 	bl	13d08 <z_log_msg_alloc>
   120ec:	2200      	movs	r2, #0
   120ee:	f36f 0200 	bfc	r2, #0, #1
   120f2:	f36f 0241 	bfc	r2, #1, #1
   120f6:	f36f 0282 	bfc	r2, #2, #1
   120fa:	f36f 02c5 	bfc	r2, #3, #3
   120fe:	2301      	movs	r3, #1
   12100:	f363 1288 	bfi	r2, r3, #6, #3
   12104:	2308      	movs	r3, #8
   12106:	f363 2252 	bfi	r2, r3, #9, #10
   1210a:	f36f 42de 	bfc	r2, #19, #12
   1210e:	f36f 72df 	bfc	r2, #31, #1
   12112:	4604      	mov	r4, r0
   12114:	b168      	cbz	r0, 12132 <create_some_entries+0xa2>
   12116:	f110 0310 	adds.w	r3, r0, #16
   1211a:	d001      	beq.n	12120 <create_some_entries+0x90>
   1211c:	4999      	ldr	r1, [pc, #612]	; (12384 <create_some_entries+0x2f4>)
   1211e:	6141      	str	r1, [r0, #20]
   12120:	b13b      	cbz	r3, 12132 <create_some_entries+0xa2>
   12122:	2302      	movs	r3, #2
   12124:	723b      	strb	r3, [r7, #8]
   12126:	2300      	movs	r3, #0
   12128:	727b      	strb	r3, [r7, #9]
   1212a:	72bb      	strb	r3, [r7, #10]
   1212c:	72fb      	strb	r3, [r7, #11]
   1212e:	68b8      	ldr	r0, [r7, #8]
   12130:	6120      	str	r0, [r4, #16]
   12132:	2300      	movs	r3, #0
   12134:	4994      	ldr	r1, [pc, #592]	; (12388 <create_some_entries+0x2f8>)
   12136:	4620      	mov	r0, r4
   12138:	f017 f84f 	bl	291da <z_log_msg_finalize>
		return false;
   1213c:	2000      	movs	r0, #0
   1213e:	e0ac      	b.n	1229a <create_some_entries+0x20a>
	LOG_INF("Creating some dir entries in %s", base_path);
   12140:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   12144:	e7bc      	b.n	120c0 <create_some_entries+0x30>
   12146:	f10c 0e98 	add.w	lr, ip, #152	; 0x98
   1214a:	44be      	add	lr, r7
   1214c:	f81e ec94 	ldrb.w	lr, [lr, #-148]
   12150:	f803 eb01 	strb.w	lr, [r3], #1
   12154:	f10c 0c01 	add.w	ip, ip, #1
   12158:	f1bc 0f01 	cmp.w	ip, #1
   1215c:	d9f3      	bls.n	12146 <create_some_entries+0xb6>
   1215e:	280d      	cmp	r0, #13
   12160:	dd6e      	ble.n	12240 <create_some_entries+0x1b0>
   12162:	230e      	movs	r3, #14
   12164:	b142      	cbz	r2, 12178 <create_some_entries+0xe8>
   12166:	2003      	movs	r0, #3
   12168:	7238      	strb	r0, [r7, #8]
   1216a:	2000      	movs	r0, #0
   1216c:	7278      	strb	r0, [r7, #9]
   1216e:	72b8      	strb	r0, [r7, #10]
   12170:	2001      	movs	r0, #1
   12172:	72f8      	strb	r0, [r7, #11]
   12174:	68b8      	ldr	r0, [r7, #8]
   12176:	6108      	str	r0, [r1, #16]
   12178:	2100      	movs	r1, #0
   1217a:	f36f 0100 	bfc	r1, #0, #1
   1217e:	f36f 0141 	bfc	r1, #1, #1
   12182:	f36f 0182 	bfc	r1, #2, #1
   12186:	f36f 01c5 	bfc	r1, #3, #3
   1218a:	2003      	movs	r0, #3
   1218c:	f360 1188 	bfi	r1, r0, #6, #3
   12190:	f3c3 0309 	ubfx	r3, r3, #0, #10
   12194:	f363 2152 	bfi	r1, r3, #9, #10
   12198:	f36f 41de 	bfc	r1, #19, #12
   1219c:	f36f 71df 	bfc	r1, #31, #1
   121a0:	2300      	movs	r3, #0
   121a2:	4879      	ldr	r0, [pc, #484]	; (12388 <create_some_entries+0x2f8>)
   121a4:	f017 f831 	bl	2920a <z_impl_z_log_msg_static_create>
   121a8:	46b5      	mov	sp, r6
	strncpy(path, base_path, sizeof(path));
   121aa:	2280      	movs	r2, #128	; 0x80
   121ac:	4629      	mov	r1, r5
   121ae:	f107 0018 	add.w	r0, r7, #24
   121b2:	f017 fc89 	bl	29ac8 <strncpy>

	path[base++] = '/';
   121b6:	1c65      	adds	r5, r4, #1
   121b8:	f104 0398 	add.w	r3, r4, #152	; 0x98
   121bc:	19dc      	adds	r4, r3, r7
   121be:	232f      	movs	r3, #47	; 0x2f
   121c0:	f804 3c80 	strb.w	r3, [r4, #-128]
	path[base] = 0;
   121c4:	f105 0398 	add.w	r3, r5, #152	; 0x98
   121c8:	443b      	add	r3, r7
   121ca:	2200      	movs	r2, #0
   121cc:	f803 2c80 	strb.w	r2, [r3, #-128]
	strcat(&path[base], SOME_FILE_NAME);
   121d0:	f107 0318 	add.w	r3, r7, #24
   121d4:	195c      	adds	r4, r3, r5
   121d6:	496d      	ldr	r1, [pc, #436]	; (1238c <create_some_entries+0x2fc>)
   121d8:	4620      	mov	r0, r4
   121da:	f017 fccd 	bl	29b78 <strcat>

	if (fs_open(&file, path, FS_O_CREATE) != 0) {
   121de:	2210      	movs	r2, #16
   121e0:	f107 0118 	add.w	r1, r7, #24
   121e4:	f107 000c 	add.w	r0, r7, #12
   121e8:	f00b fb6e 	bl	1d8c8 <fs_open>
   121ec:	2800      	cmp	r0, #0
   121ee:	d05a      	beq.n	122a6 <create_some_entries+0x216>
		LOG_ERR("Failed to create file %s", path);
   121f0:	466d      	mov	r5, sp
   121f2:	2300      	movs	r3, #0
   121f4:	723b      	strb	r3, [r7, #8]
   121f6:	2302      	movs	r3, #2
   121f8:	727b      	strb	r3, [r7, #9]
   121fa:	b088      	sub	sp, #32
   121fc:	466c      	mov	r4, sp
   121fe:	f114 0210 	adds.w	r2, r4, #16
   12202:	d020      	beq.n	12246 <create_some_entries+0x1b6>
   12204:	200e      	movs	r0, #14
   12206:	b11a      	cbz	r2, 12210 <create_some_entries+0x180>
   12208:	2804      	cmp	r0, #4
   1220a:	dd01      	ble.n	12210 <create_some_entries+0x180>
   1220c:	4b60      	ldr	r3, [pc, #384]	; (12390 <create_some_entries+0x300>)
   1220e:	6163      	str	r3, [r4, #20]
   12210:	2300      	movs	r3, #0
   12212:	713b      	strb	r3, [r7, #4]
   12214:	2302      	movs	r3, #2
   12216:	717b      	strb	r3, [r7, #5]
   12218:	b1c2      	cbz	r2, 1224c <create_some_entries+0x1bc>
   1221a:	2808      	cmp	r0, #8
   1221c:	dd02      	ble.n	12224 <create_some_entries+0x194>
   1221e:	f107 0318 	add.w	r3, r7, #24
   12222:	61a3      	str	r3, [r4, #24]
   12224:	f104 031c 	add.w	r3, r4, #28
   12228:	2100      	movs	r1, #0
   1222a:	2901      	cmp	r1, #1
   1222c:	d80e      	bhi.n	1224c <create_some_entries+0x1bc>
   1222e:	f101 0698 	add.w	r6, r1, #152	; 0x98
   12232:	443e      	add	r6, r7
   12234:	f816 6c94 	ldrb.w	r6, [r6, #-148]
   12238:	f803 6b01 	strb.w	r6, [r3], #1
   1223c:	3101      	adds	r1, #1
   1223e:	e7f4      	b.n	1222a <create_some_entries+0x19a>
	LOG_INF("Creating some dir entries in %s", base_path);
   12240:	f06f 031b 	mvn.w	r3, #27
   12244:	e78e      	b.n	12164 <create_some_entries+0xd4>
		LOG_ERR("Failed to create file %s", path);
   12246:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1224a:	e7dc      	b.n	12206 <create_some_entries+0x176>
   1224c:	280d      	cmp	r0, #13
   1224e:	dd27      	ble.n	122a0 <create_some_entries+0x210>
   12250:	230e      	movs	r3, #14
   12252:	b142      	cbz	r2, 12266 <create_some_entries+0x1d6>
   12254:	2103      	movs	r1, #3
   12256:	7239      	strb	r1, [r7, #8]
   12258:	2100      	movs	r1, #0
   1225a:	7279      	strb	r1, [r7, #9]
   1225c:	72b9      	strb	r1, [r7, #10]
   1225e:	2101      	movs	r1, #1
   12260:	72f9      	strb	r1, [r7, #11]
   12262:	68b8      	ldr	r0, [r7, #8]
   12264:	6120      	str	r0, [r4, #16]
   12266:	2100      	movs	r1, #0
   12268:	f36f 0100 	bfc	r1, #0, #1
   1226c:	f36f 0141 	bfc	r1, #1, #1
   12270:	f36f 0182 	bfc	r1, #2, #1
   12274:	f36f 01c5 	bfc	r1, #3, #3
   12278:	2001      	movs	r0, #1
   1227a:	f360 1188 	bfi	r1, r0, #6, #3
   1227e:	f3c3 0309 	ubfx	r3, r3, #0, #10
   12282:	f363 2152 	bfi	r1, r3, #9, #10
   12286:	f36f 41de 	bfc	r1, #19, #12
   1228a:	f36f 71df 	bfc	r1, #31, #1
   1228e:	2300      	movs	r3, #0
   12290:	483d      	ldr	r0, [pc, #244]	; (12388 <create_some_entries+0x2f8>)
   12292:	f016 ffba 	bl	2920a <z_impl_z_log_msg_static_create>
   12296:	46ad      	mov	sp, r5
		return false;
   12298:	2000      	movs	r0, #0
		/* If code gets here, it has at least successes to create the
		 * file so allow function to return true.
		 */
	}
	return true;
}
   1229a:	379c      	adds	r7, #156	; 0x9c
   1229c:	46bd      	mov	sp, r7
   1229e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Failed to create file %s", path);
   122a0:	f06f 031b 	mvn.w	r3, #27
   122a4:	e7d5      	b.n	12252 <create_some_entries+0x1c2>
	fs_close(&file);
   122a6:	f107 000c 	add.w	r0, r7, #12
   122aa:	f00b fbe9 	bl	1da80 <fs_close>
	path[base] = 0;
   122ae:	f105 0398 	add.w	r3, r5, #152	; 0x98
   122b2:	19dd      	adds	r5, r3, r7
   122b4:	2300      	movs	r3, #0
   122b6:	f805 3c80 	strb.w	r3, [r5, #-128]
	strcat(&path[base], SOME_DIR_NAME);
   122ba:	4936      	ldr	r1, [pc, #216]	; (12394 <create_some_entries+0x304>)
   122bc:	4620      	mov	r0, r4
   122be:	f017 fc5b 	bl	29b78 <strcat>
	if (fs_mkdir(path) != 0) {
   122c2:	f107 0018 	add.w	r0, r7, #24
   122c6:	f00b fe15 	bl	1def4 <fs_mkdir>
   122ca:	2800      	cmp	r0, #0
   122cc:	d055      	beq.n	1237a <create_some_entries+0x2ea>
		LOG_ERR("Failed to create dir %s", path);
   122ce:	466d      	mov	r5, sp
   122d0:	2300      	movs	r3, #0
   122d2:	723b      	strb	r3, [r7, #8]
   122d4:	2302      	movs	r3, #2
   122d6:	727b      	strb	r3, [r7, #9]
   122d8:	b088      	sub	sp, #32
   122da:	466c      	mov	r4, sp
   122dc:	f114 0210 	adds.w	r2, r4, #16
   122e0:	d013      	beq.n	1230a <create_some_entries+0x27a>
   122e2:	200e      	movs	r0, #14
   122e4:	b11a      	cbz	r2, 122ee <create_some_entries+0x25e>
   122e6:	2804      	cmp	r0, #4
   122e8:	dd01      	ble.n	122ee <create_some_entries+0x25e>
   122ea:	4b2b      	ldr	r3, [pc, #172]	; (12398 <create_some_entries+0x308>)
   122ec:	6163      	str	r3, [r4, #20]
   122ee:	2300      	movs	r3, #0
   122f0:	713b      	strb	r3, [r7, #4]
   122f2:	2302      	movs	r3, #2
   122f4:	717b      	strb	r3, [r7, #5]
   122f6:	b1aa      	cbz	r2, 12324 <create_some_entries+0x294>
   122f8:	2808      	cmp	r0, #8
   122fa:	dd02      	ble.n	12302 <create_some_entries+0x272>
   122fc:	f107 0318 	add.w	r3, r7, #24
   12300:	61a3      	str	r3, [r4, #24]
   12302:	f104 031c 	add.w	r3, r4, #28
   12306:	2100      	movs	r1, #0
   12308:	e00a      	b.n	12320 <create_some_entries+0x290>
   1230a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1230e:	e7e9      	b.n	122e4 <create_some_entries+0x254>
   12310:	f101 0698 	add.w	r6, r1, #152	; 0x98
   12314:	443e      	add	r6, r7
   12316:	f816 6c94 	ldrb.w	r6, [r6, #-148]
   1231a:	f803 6b01 	strb.w	r6, [r3], #1
   1231e:	3101      	adds	r1, #1
   12320:	2901      	cmp	r1, #1
   12322:	d9f5      	bls.n	12310 <create_some_entries+0x280>
   12324:	280d      	cmp	r0, #13
   12326:	dd25      	ble.n	12374 <create_some_entries+0x2e4>
   12328:	230e      	movs	r3, #14
   1232a:	b142      	cbz	r2, 1233e <create_some_entries+0x2ae>
   1232c:	2103      	movs	r1, #3
   1232e:	7239      	strb	r1, [r7, #8]
   12330:	2100      	movs	r1, #0
   12332:	7279      	strb	r1, [r7, #9]
   12334:	72b9      	strb	r1, [r7, #10]
   12336:	2101      	movs	r1, #1
   12338:	72f9      	strb	r1, [r7, #11]
   1233a:	68b8      	ldr	r0, [r7, #8]
   1233c:	6120      	str	r0, [r4, #16]
   1233e:	2100      	movs	r1, #0
   12340:	f36f 0100 	bfc	r1, #0, #1
   12344:	f36f 0141 	bfc	r1, #1, #1
   12348:	f36f 0182 	bfc	r1, #2, #1
   1234c:	f36f 01c5 	bfc	r1, #3, #3
   12350:	2401      	movs	r4, #1
   12352:	f364 1188 	bfi	r1, r4, #6, #3
   12356:	f3c3 0309 	ubfx	r3, r3, #0, #10
   1235a:	f363 2152 	bfi	r1, r3, #9, #10
   1235e:	f36f 41de 	bfc	r1, #19, #12
   12362:	f36f 71df 	bfc	r1, #31, #1
   12366:	2300      	movs	r3, #0
   12368:	4807      	ldr	r0, [pc, #28]	; (12388 <create_some_entries+0x2f8>)
   1236a:	f016 ff4e 	bl	2920a <z_impl_z_log_msg_static_create>
   1236e:	46ad      	mov	sp, r5
	return true;
   12370:	4620      	mov	r0, r4
   12372:	e792      	b.n	1229a <create_some_entries+0x20a>
		LOG_ERR("Failed to create dir %s", path);
   12374:	f06f 031b 	mvn.w	r3, #27
   12378:	e7d7      	b.n	1232a <create_some_entries+0x29a>
	return true;
   1237a:	2001      	movs	r0, #1
   1237c:	e78d      	b.n	1229a <create_some_entries+0x20a>
   1237e:	bf00      	nop
   12380:	000319d8 	.word	0x000319d8
   12384:	000319a0 	.word	0x000319a0
   12388:	000314f8 	.word	0x000314f8
   1238c:	000319f8 	.word	0x000319f8
   12390:	00031a04 	.word	0x00031a04
   12394:	00031a20 	.word	0x00031a20
   12398:	00031a28 	.word	0x00031a28

0001239c <lsdir>:
{
   1239c:	b530      	push	{r4, r5, lr}
   1239e:	b083      	sub	sp, #12
   123a0:	4605      	mov	r5, r0
 * @param zdp Pointer to file object
 *
 */
static inline void fs_dir_t_init(struct fs_dir_t *zdp)
{
	*zdp = (struct fs_dir_t){ 0 };
   123a2:	2300      	movs	r3, #0
   123a4:	9300      	str	r3, [sp, #0]
   123a6:	9301      	str	r3, [sp, #4]
	res = fs_opendir(&dirp, path);
   123a8:	4601      	mov	r1, r0
   123aa:	4668      	mov	r0, sp
   123ac:	f00b fbb4 	bl	1db18 <fs_opendir>
	if (res) {
   123b0:	4604      	mov	r4, r0
   123b2:	b920      	cbnz	r0, 123be <lsdir+0x22>
	printk("\nListing dir %s ...\n", path);
   123b4:	4629      	mov	r1, r5
   123b6:	4816      	ldr	r0, [pc, #88]	; (12410 <lsdir+0x74>)
   123b8:	f015 fdf7 	bl	27faa <printk>
   123bc:	e00c      	b.n	123d8 <lsdir+0x3c>
		printk("Error opening dir %s [%d]\n", path, res);
   123be:	4602      	mov	r2, r0
   123c0:	4629      	mov	r1, r5
   123c2:	4814      	ldr	r0, [pc, #80]	; (12414 <lsdir+0x78>)
   123c4:	f015 fdf1 	bl	27faa <printk>
}
   123c8:	4620      	mov	r0, r4
   123ca:	b003      	add	sp, #12
   123cc:	bd30      	pop	{r4, r5, pc}
			printk("[DIR ] %s\n", entry.name);
   123ce:	4912      	ldr	r1, [pc, #72]	; (12418 <lsdir+0x7c>)
   123d0:	4812      	ldr	r0, [pc, #72]	; (1241c <lsdir+0x80>)
   123d2:	f015 fdea 	bl	27faa <printk>
		count++;
   123d6:	3401      	adds	r4, #1
		res = fs_readdir(&dirp, &entry);
   123d8:	4911      	ldr	r1, [pc, #68]	; (12420 <lsdir+0x84>)
   123da:	4668      	mov	r0, sp
   123dc:	f00b fc92 	bl	1dd04 <fs_readdir>
		if (res || entry.name[0] == 0) {
   123e0:	4605      	mov	r5, r0
   123e2:	b968      	cbnz	r0, 12400 <lsdir+0x64>
   123e4:	4b0e      	ldr	r3, [pc, #56]	; (12420 <lsdir+0x84>)
   123e6:	785b      	ldrb	r3, [r3, #1]
   123e8:	b153      	cbz	r3, 12400 <lsdir+0x64>
		if (entry.type == FS_DIR_ENTRY_DIR) {
   123ea:	4b0d      	ldr	r3, [pc, #52]	; (12420 <lsdir+0x84>)
   123ec:	781b      	ldrb	r3, [r3, #0]
   123ee:	2b01      	cmp	r3, #1
   123f0:	d0ed      	beq.n	123ce <lsdir+0x32>
			printk("[FILE] %s (size = %zu)\n",
   123f2:	490b      	ldr	r1, [pc, #44]	; (12420 <lsdir+0x84>)
   123f4:	690a      	ldr	r2, [r1, #16]
   123f6:	3101      	adds	r1, #1
   123f8:	480a      	ldr	r0, [pc, #40]	; (12424 <lsdir+0x88>)
   123fa:	f015 fdd6 	bl	27faa <printk>
   123fe:	e7ea      	b.n	123d6 <lsdir+0x3a>
	fs_closedir(&dirp);
   12400:	4668      	mov	r0, sp
   12402:	f00b fd29 	bl	1de58 <fs_closedir>
	if (res == 0) {
   12406:	2d00      	cmp	r5, #0
   12408:	d0de      	beq.n	123c8 <lsdir+0x2c>
		res = fs_readdir(&dirp, &entry);
   1240a:	462c      	mov	r4, r5
   1240c:	e7dc      	b.n	123c8 <lsdir+0x2c>
   1240e:	bf00      	nop
   12410:	00031a5c 	.word	0x00031a5c
   12414:	00031a40 	.word	0x00031a40
   12418:	200078e9 	.word	0x200078e9
   1241c:	00031a74 	.word	0x00031a74
   12420:	200078e8 	.word	0x200078e8
   12424:	00031a80 	.word	0x00031a80

00012428 <main>:
#endif



void main(void)
{
   12428:	b530      	push	{r4, r5, lr}
   1242a:	b085      	sub	sp, #20
	LOG_INF("Running ttpms_v2_receiver");
   1242c:	2006      	movs	r0, #6
   1242e:	f001 fc6b 	bl	13d08 <z_log_msg_alloc>
   12432:	2200      	movs	r2, #0
   12434:	f36f 0200 	bfc	r2, #0, #1
   12438:	f36f 0241 	bfc	r2, #1, #1
   1243c:	f36f 0282 	bfc	r2, #2, #1
   12440:	f36f 02c5 	bfc	r2, #3, #3
   12444:	2303      	movs	r3, #3
   12446:	f363 1288 	bfi	r2, r3, #6, #3
   1244a:	2308      	movs	r3, #8
   1244c:	f363 2252 	bfi	r2, r3, #9, #10
   12450:	f36f 42de 	bfc	r2, #19, #12
   12454:	f36f 72df 	bfc	r2, #31, #1
   12458:	4684      	mov	ip, r0
   1245a:	b190      	cbz	r0, 12482 <main+0x5a>
   1245c:	f110 0310 	adds.w	r3, r0, #16
   12460:	d001      	beq.n	12466 <main+0x3e>
   12462:	499b      	ldr	r1, [pc, #620]	; (126d0 <main+0x2a8>)
   12464:	6141      	str	r1, [r0, #20]
   12466:	b163      	cbz	r3, 12482 <main+0x5a>
   12468:	2302      	movs	r3, #2
   1246a:	f88d 300c 	strb.w	r3, [sp, #12]
   1246e:	2300      	movs	r3, #0
   12470:	f88d 300d 	strb.w	r3, [sp, #13]
   12474:	f88d 300e 	strb.w	r3, [sp, #14]
   12478:	f88d 300f 	strb.w	r3, [sp, #15]
   1247c:	9803      	ldr	r0, [sp, #12]
   1247e:	f8cc 0010 	str.w	r0, [ip, #16]
   12482:	2300      	movs	r3, #0
   12484:	4993      	ldr	r1, [pc, #588]	; (126d4 <main+0x2ac>)
   12486:	4660      	mov	r0, ip
   12488:	f016 fea7 	bl	291da <z_log_msg_finalize>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
   1248c:	2021      	movs	r0, #33	; 0x21
   1248e:	2100      	movs	r1, #0
   12490:	f014 fdec 	bl	2706c <z_impl_k_sleep>
		static const char *disk_pdrv = DISK_DRIVE_NAME;
		uint64_t memory_size_mb;
		uint32_t block_count;
		uint32_t block_size;

		if (disk_access_init(disk_pdrv) != 0) {
   12494:	4890      	ldr	r0, [pc, #576]	; (126d8 <main+0x2b0>)
   12496:	f016 ffdb 	bl	29450 <disk_access_init>
   1249a:	2800      	cmp	r0, #0
   1249c:	d077      	beq.n	1258e <main+0x166>
			LOG_ERR("Storage init ERROR!");
   1249e:	2006      	movs	r0, #6
   124a0:	f001 fc32 	bl	13d08 <z_log_msg_alloc>
   124a4:	2200      	movs	r2, #0
   124a6:	f36f 0200 	bfc	r2, #0, #1
   124aa:	f36f 0241 	bfc	r2, #1, #1
   124ae:	f36f 0282 	bfc	r2, #2, #1
   124b2:	f36f 02c5 	bfc	r2, #3, #3
   124b6:	2301      	movs	r3, #1
   124b8:	f363 1288 	bfi	r2, r3, #6, #3
   124bc:	2308      	movs	r3, #8
   124be:	f363 2252 	bfi	r2, r3, #9, #10
   124c2:	f36f 42de 	bfc	r2, #19, #12
   124c6:	f36f 72df 	bfc	r2, #31, #1
   124ca:	4684      	mov	ip, r0
   124cc:	b190      	cbz	r0, 124f4 <main+0xcc>
   124ce:	f110 0310 	adds.w	r3, r0, #16
   124d2:	d001      	beq.n	124d8 <main+0xb0>
   124d4:	4981      	ldr	r1, [pc, #516]	; (126dc <main+0x2b4>)
   124d6:	6141      	str	r1, [r0, #20]
   124d8:	b163      	cbz	r3, 124f4 <main+0xcc>
   124da:	2302      	movs	r3, #2
   124dc:	f88d 300c 	strb.w	r3, [sp, #12]
   124e0:	2300      	movs	r3, #0
   124e2:	f88d 300d 	strb.w	r3, [sp, #13]
   124e6:	f88d 300e 	strb.w	r3, [sp, #14]
   124ea:	f88d 300f 	strb.w	r3, [sp, #15]
   124ee:	9803      	ldr	r0, [sp, #12]
   124f0:	f8cc 0010 	str.w	r0, [ip, #16]
   124f4:	2300      	movs	r3, #0
   124f6:	4977      	ldr	r1, [pc, #476]	; (126d4 <main+0x2ac>)
   124f8:	4660      	mov	r0, ip
   124fa:	f016 fe6e 	bl	291da <z_log_msg_finalize>

		memory_size_mb = (uint64_t)block_count * block_size;
		LOG_INF("Memory Size(MB) %u", (uint32_t)(memory_size_mb >> 20));
	} while (0);

	mp.mnt_point = disk_mount_pt;
   124fe:	4878      	ldr	r0, [pc, #480]	; (126e0 <main+0x2b8>)
   12500:	4b78      	ldr	r3, [pc, #480]	; (126e4 <main+0x2bc>)
   12502:	60c3      	str	r3, [r0, #12]

	int res = fs_mount(&mp);
   12504:	f00b fdbc 	bl	1e080 <fs_mount>

	if (res == FR_OK) {
   12508:	2800      	cmp	r0, #0
   1250a:	f040 8160 	bne.w	127ce <main+0x3a6>
		LOG_INF("Disk mounted.");
   1250e:	2006      	movs	r0, #6
   12510:	f001 fbfa 	bl	13d08 <z_log_msg_alloc>
   12514:	2200      	movs	r2, #0
   12516:	f36f 0200 	bfc	r2, #0, #1
   1251a:	f36f 0241 	bfc	r2, #1, #1
   1251e:	f36f 0282 	bfc	r2, #2, #1
   12522:	f36f 02c5 	bfc	r2, #3, #3
   12526:	2303      	movs	r3, #3
   12528:	f363 1288 	bfi	r2, r3, #6, #3
   1252c:	2308      	movs	r3, #8
   1252e:	f363 2252 	bfi	r2, r3, #9, #10
   12532:	f36f 42de 	bfc	r2, #19, #12
   12536:	f36f 72df 	bfc	r2, #31, #1
   1253a:	4684      	mov	ip, r0
   1253c:	b190      	cbz	r0, 12564 <main+0x13c>
   1253e:	f110 0310 	adds.w	r3, r0, #16
   12542:	d001      	beq.n	12548 <main+0x120>
   12544:	4968      	ldr	r1, [pc, #416]	; (126e8 <main+0x2c0>)
   12546:	6141      	str	r1, [r0, #20]
   12548:	b163      	cbz	r3, 12564 <main+0x13c>
   1254a:	2302      	movs	r3, #2
   1254c:	f88d 300c 	strb.w	r3, [sp, #12]
   12550:	2300      	movs	r3, #0
   12552:	f88d 300d 	strb.w	r3, [sp, #13]
   12556:	f88d 300e 	strb.w	r3, [sp, #14]
   1255a:	f88d 300f 	strb.w	r3, [sp, #15]
   1255e:	9803      	ldr	r0, [sp, #12]
   12560:	f8cc 0010 	str.w	r0, [ip, #16]
   12564:	2300      	movs	r3, #0
   12566:	495b      	ldr	r1, [pc, #364]	; (126d4 <main+0x2ac>)
   12568:	4660      	mov	r0, ip
   1256a:	f016 fe36 	bl	291da <z_log_msg_finalize>
		if (lsdir(disk_mount_pt) == 0) {
   1256e:	485d      	ldr	r0, [pc, #372]	; (126e4 <main+0x2bc>)
   12570:	f7ff ff14 	bl	1239c <lsdir>
   12574:	2800      	cmp	r0, #0
   12576:	f040 815a 	bne.w	1282e <main+0x406>
	#ifdef CONFIG_SAMPLE_FATFS_CREATE_SOME_ENTRIES
				if (create_some_entries(disk_mount_pt)) {
   1257a:	485a      	ldr	r0, [pc, #360]	; (126e4 <main+0x2bc>)
   1257c:	f7ff fd88 	bl	12090 <create_some_entries>
   12580:	2800      	cmp	r0, #0
   12582:	f000 8154 	beq.w	1282e <main+0x406>
					lsdir(disk_mount_pt);
   12586:	4857      	ldr	r0, [pc, #348]	; (126e4 <main+0x2bc>)
   12588:	f7ff ff08 	bl	1239c <lsdir>
   1258c:	e14f      	b.n	1282e <main+0x406>
		if (disk_access_ioctl(disk_pdrv,
   1258e:	aa01      	add	r2, sp, #4
   12590:	2101      	movs	r1, #1
   12592:	4851      	ldr	r0, [pc, #324]	; (126d8 <main+0x2b0>)
   12594:	f016 ffb4 	bl	29500 <disk_access_ioctl>
   12598:	b380      	cbz	r0, 125fc <main+0x1d4>
			LOG_ERR("Unable to get sector count");
   1259a:	2006      	movs	r0, #6
   1259c:	f001 fbb4 	bl	13d08 <z_log_msg_alloc>
   125a0:	2200      	movs	r2, #0
   125a2:	f36f 0200 	bfc	r2, #0, #1
   125a6:	f36f 0241 	bfc	r2, #1, #1
   125aa:	f36f 0282 	bfc	r2, #2, #1
   125ae:	f36f 02c5 	bfc	r2, #3, #3
   125b2:	2301      	movs	r3, #1
   125b4:	f363 1288 	bfi	r2, r3, #6, #3
   125b8:	2308      	movs	r3, #8
   125ba:	f363 2252 	bfi	r2, r3, #9, #10
   125be:	f36f 42de 	bfc	r2, #19, #12
   125c2:	f36f 72df 	bfc	r2, #31, #1
   125c6:	4684      	mov	ip, r0
   125c8:	b190      	cbz	r0, 125f0 <main+0x1c8>
   125ca:	f110 0310 	adds.w	r3, r0, #16
   125ce:	d001      	beq.n	125d4 <main+0x1ac>
   125d0:	4946      	ldr	r1, [pc, #280]	; (126ec <main+0x2c4>)
   125d2:	6141      	str	r1, [r0, #20]
   125d4:	b163      	cbz	r3, 125f0 <main+0x1c8>
   125d6:	2302      	movs	r3, #2
   125d8:	f88d 300c 	strb.w	r3, [sp, #12]
   125dc:	2300      	movs	r3, #0
   125de:	f88d 300d 	strb.w	r3, [sp, #13]
   125e2:	f88d 300e 	strb.w	r3, [sp, #14]
   125e6:	f88d 300f 	strb.w	r3, [sp, #15]
   125ea:	9803      	ldr	r0, [sp, #12]
   125ec:	f8cc 0010 	str.w	r0, [ip, #16]
   125f0:	2300      	movs	r3, #0
   125f2:	4938      	ldr	r1, [pc, #224]	; (126d4 <main+0x2ac>)
   125f4:	4660      	mov	r0, ip
   125f6:	f016 fdf0 	bl	291da <z_log_msg_finalize>
			break;
   125fa:	e780      	b.n	124fe <main+0xd6>
		LOG_INF("Block count %u", block_count);
   125fc:	9c01      	ldr	r4, [sp, #4]
   125fe:	2008      	movs	r0, #8
   12600:	f001 fb82 	bl	13d08 <z_log_msg_alloc>
   12604:	2200      	movs	r2, #0
   12606:	f36f 0200 	bfc	r2, #0, #1
   1260a:	f36f 0241 	bfc	r2, #1, #1
   1260e:	f36f 0282 	bfc	r2, #2, #1
   12612:	f36f 02c5 	bfc	r2, #3, #3
   12616:	2303      	movs	r3, #3
   12618:	f363 1288 	bfi	r2, r3, #6, #3
   1261c:	230c      	movs	r3, #12
   1261e:	f363 2252 	bfi	r2, r3, #9, #10
   12622:	f36f 42de 	bfc	r2, #19, #12
   12626:	f36f 72df 	bfc	r2, #31, #1
   1262a:	4684      	mov	ip, r0
   1262c:	b198      	cbz	r0, 12656 <main+0x22e>
   1262e:	f110 0310 	adds.w	r3, r0, #16
   12632:	d002      	beq.n	1263a <main+0x212>
   12634:	492e      	ldr	r1, [pc, #184]	; (126f0 <main+0x2c8>)
   12636:	6141      	str	r1, [r0, #20]
   12638:	6184      	str	r4, [r0, #24]
   1263a:	b163      	cbz	r3, 12656 <main+0x22e>
   1263c:	2303      	movs	r3, #3
   1263e:	f88d 300c 	strb.w	r3, [sp, #12]
   12642:	2300      	movs	r3, #0
   12644:	f88d 300d 	strb.w	r3, [sp, #13]
   12648:	f88d 300e 	strb.w	r3, [sp, #14]
   1264c:	f88d 300f 	strb.w	r3, [sp, #15]
   12650:	9803      	ldr	r0, [sp, #12]
   12652:	f8cc 0010 	str.w	r0, [ip, #16]
   12656:	2300      	movs	r3, #0
   12658:	491e      	ldr	r1, [pc, #120]	; (126d4 <main+0x2ac>)
   1265a:	4660      	mov	r0, ip
   1265c:	f016 fdbd 	bl	291da <z_log_msg_finalize>
		if (disk_access_ioctl(disk_pdrv,
   12660:	aa02      	add	r2, sp, #8
   12662:	2102      	movs	r1, #2
   12664:	481c      	ldr	r0, [pc, #112]	; (126d8 <main+0x2b0>)
   12666:	f016 ff4b 	bl	29500 <disk_access_ioctl>
   1266a:	2800      	cmp	r0, #0
   1266c:	d044      	beq.n	126f8 <main+0x2d0>
			LOG_ERR("Unable to get sector size");
   1266e:	2006      	movs	r0, #6
   12670:	f001 fb4a 	bl	13d08 <z_log_msg_alloc>
   12674:	2200      	movs	r2, #0
   12676:	f36f 0200 	bfc	r2, #0, #1
   1267a:	f36f 0241 	bfc	r2, #1, #1
   1267e:	f36f 0282 	bfc	r2, #2, #1
   12682:	f36f 02c5 	bfc	r2, #3, #3
   12686:	2301      	movs	r3, #1
   12688:	f363 1288 	bfi	r2, r3, #6, #3
   1268c:	2308      	movs	r3, #8
   1268e:	f363 2252 	bfi	r2, r3, #9, #10
   12692:	f36f 42de 	bfc	r2, #19, #12
   12696:	f36f 72df 	bfc	r2, #31, #1
   1269a:	4604      	mov	r4, r0
   1269c:	b188      	cbz	r0, 126c2 <main+0x29a>
   1269e:	f110 0310 	adds.w	r3, r0, #16
   126a2:	d001      	beq.n	126a8 <main+0x280>
   126a4:	4913      	ldr	r1, [pc, #76]	; (126f4 <main+0x2cc>)
   126a6:	6141      	str	r1, [r0, #20]
   126a8:	b15b      	cbz	r3, 126c2 <main+0x29a>
   126aa:	2302      	movs	r3, #2
   126ac:	f88d 300c 	strb.w	r3, [sp, #12]
   126b0:	2300      	movs	r3, #0
   126b2:	f88d 300d 	strb.w	r3, [sp, #13]
   126b6:	f88d 300e 	strb.w	r3, [sp, #14]
   126ba:	f88d 300f 	strb.w	r3, [sp, #15]
   126be:	9803      	ldr	r0, [sp, #12]
   126c0:	6120      	str	r0, [r4, #16]
   126c2:	2300      	movs	r3, #0
   126c4:	4903      	ldr	r1, [pc, #12]	; (126d4 <main+0x2ac>)
   126c6:	4620      	mov	r0, r4
   126c8:	f016 fd87 	bl	291da <z_log_msg_finalize>
			break;
   126cc:	e717      	b.n	124fe <main+0xd6>
   126ce:	bf00      	nop
   126d0:	00031a98 	.word	0x00031a98
   126d4:	000314f8 	.word	0x000314f8
   126d8:	00031ab4 	.word	0x00031ab4
   126dc:	00031ab8 	.word	0x00031ab8
   126e0:	20000650 	.word	0x20000650
   126e4:	00031b38 	.word	0x00031b38
   126e8:	00031b40 	.word	0x00031b40
   126ec:	00031acc 	.word	0x00031acc
   126f0:	00031ae8 	.word	0x00031ae8
   126f4:	00031af8 	.word	0x00031af8
		LOG_INF("Sector size %u", block_size);
   126f8:	9d02      	ldr	r5, [sp, #8]
   126fa:	2008      	movs	r0, #8
   126fc:	f001 fb04 	bl	13d08 <z_log_msg_alloc>
   12700:	2200      	movs	r2, #0
   12702:	f36f 0200 	bfc	r2, #0, #1
   12706:	f36f 0241 	bfc	r2, #1, #1
   1270a:	f36f 0282 	bfc	r2, #2, #1
   1270e:	f36f 02c5 	bfc	r2, #3, #3
   12712:	2303      	movs	r3, #3
   12714:	f363 1288 	bfi	r2, r3, #6, #3
   12718:	230c      	movs	r3, #12
   1271a:	f363 2252 	bfi	r2, r3, #9, #10
   1271e:	f36f 42de 	bfc	r2, #19, #12
   12722:	f36f 72df 	bfc	r2, #31, #1
   12726:	4604      	mov	r4, r0
   12728:	b190      	cbz	r0, 12750 <main+0x328>
   1272a:	f110 0310 	adds.w	r3, r0, #16
   1272e:	d002      	beq.n	12736 <main+0x30e>
   12730:	4941      	ldr	r1, [pc, #260]	; (12838 <main+0x410>)
   12732:	6141      	str	r1, [r0, #20]
   12734:	6185      	str	r5, [r0, #24]
   12736:	b15b      	cbz	r3, 12750 <main+0x328>
   12738:	2303      	movs	r3, #3
   1273a:	f88d 300c 	strb.w	r3, [sp, #12]
   1273e:	2300      	movs	r3, #0
   12740:	f88d 300d 	strb.w	r3, [sp, #13]
   12744:	f88d 300e 	strb.w	r3, [sp, #14]
   12748:	f88d 300f 	strb.w	r3, [sp, #15]
   1274c:	9803      	ldr	r0, [sp, #12]
   1274e:	6120      	str	r0, [r4, #16]
   12750:	2300      	movs	r3, #0
   12752:	493a      	ldr	r1, [pc, #232]	; (1283c <main+0x414>)
   12754:	4620      	mov	r0, r4
   12756:	f016 fd40 	bl	291da <z_log_msg_finalize>
		memory_size_mb = (uint64_t)block_count * block_size;
   1275a:	9b01      	ldr	r3, [sp, #4]
   1275c:	2500      	movs	r5, #0
   1275e:	9a02      	ldr	r2, [sp, #8]
   12760:	fba3 4202 	umull	r4, r2, r3, r2
		LOG_INF("Memory Size(MB) %u", (uint32_t)(memory_size_mb >> 20));
   12764:	0d24      	lsrs	r4, r4, #20
   12766:	ea44 3402 	orr.w	r4, r4, r2, lsl #12
   1276a:	2008      	movs	r0, #8
   1276c:	f001 facc 	bl	13d08 <z_log_msg_alloc>
   12770:	462a      	mov	r2, r5
   12772:	f365 0200 	bfi	r2, r5, #0, #1
   12776:	f365 0241 	bfi	r2, r5, #1, #1
   1277a:	f365 0282 	bfi	r2, r5, #2, #1
   1277e:	f365 02c5 	bfi	r2, r5, #3, #3
   12782:	2303      	movs	r3, #3
   12784:	f363 1288 	bfi	r2, r3, #6, #3
   12788:	230c      	movs	r3, #12
   1278a:	f363 2252 	bfi	r2, r3, #9, #10
   1278e:	f365 42de 	bfi	r2, r5, #19, #12
   12792:	f365 72df 	bfi	r2, r5, #31, #1
   12796:	4684      	mov	ip, r0
   12798:	b198      	cbz	r0, 127c2 <main+0x39a>
   1279a:	f110 0310 	adds.w	r3, r0, #16
   1279e:	d002      	beq.n	127a6 <main+0x37e>
   127a0:	4927      	ldr	r1, [pc, #156]	; (12840 <main+0x418>)
   127a2:	6141      	str	r1, [r0, #20]
   127a4:	6184      	str	r4, [r0, #24]
   127a6:	b163      	cbz	r3, 127c2 <main+0x39a>
   127a8:	2303      	movs	r3, #3
   127aa:	f88d 300c 	strb.w	r3, [sp, #12]
   127ae:	2300      	movs	r3, #0
   127b0:	f88d 300d 	strb.w	r3, [sp, #13]
   127b4:	f88d 300e 	strb.w	r3, [sp, #14]
   127b8:	f88d 300f 	strb.w	r3, [sp, #15]
   127bc:	9803      	ldr	r0, [sp, #12]
   127be:	f8cc 0010 	str.w	r0, [ip, #16]
   127c2:	2300      	movs	r3, #0
   127c4:	491d      	ldr	r1, [pc, #116]	; (1283c <main+0x414>)
   127c6:	4660      	mov	r0, ip
   127c8:	f016 fd07 	bl	291da <z_log_msg_finalize>
   127cc:	e697      	b.n	124fe <main+0xd6>
				}
	#endif
		}
	} else {
		LOG_ERR("Error mounting disk.");
   127ce:	2006      	movs	r0, #6
   127d0:	f001 fa9a 	bl	13d08 <z_log_msg_alloc>
   127d4:	2200      	movs	r2, #0
   127d6:	f36f 0200 	bfc	r2, #0, #1
   127da:	f36f 0241 	bfc	r2, #1, #1
   127de:	f36f 0282 	bfc	r2, #2, #1
   127e2:	f36f 02c5 	bfc	r2, #3, #3
   127e6:	2301      	movs	r3, #1
   127e8:	f363 1288 	bfi	r2, r3, #6, #3
   127ec:	2308      	movs	r3, #8
   127ee:	f363 2252 	bfi	r2, r3, #9, #10
   127f2:	f36f 42de 	bfc	r2, #19, #12
   127f6:	f36f 72df 	bfc	r2, #31, #1
   127fa:	4684      	mov	ip, r0
   127fc:	b190      	cbz	r0, 12824 <main+0x3fc>
   127fe:	f110 0310 	adds.w	r3, r0, #16
   12802:	d001      	beq.n	12808 <main+0x3e0>
   12804:	490f      	ldr	r1, [pc, #60]	; (12844 <main+0x41c>)
   12806:	6141      	str	r1, [r0, #20]
   12808:	b163      	cbz	r3, 12824 <main+0x3fc>
   1280a:	2302      	movs	r3, #2
   1280c:	f88d 300c 	strb.w	r3, [sp, #12]
   12810:	2300      	movs	r3, #0
   12812:	f88d 300d 	strb.w	r3, [sp, #13]
   12816:	f88d 300e 	strb.w	r3, [sp, #14]
   1281a:	f88d 300f 	strb.w	r3, [sp, #15]
   1281e:	9803      	ldr	r0, [sp, #12]
   12820:	f8cc 0010 	str.w	r0, [ip, #16]
   12824:	2300      	movs	r3, #0
   12826:	4905      	ldr	r1, [pc, #20]	; (1283c <main+0x414>)
   12828:	4660      	mov	r0, ip
   1282a:	f016 fcd6 	bl	291da <z_log_msg_finalize>
   1282e:	2021      	movs	r0, #33	; 0x21
   12830:	2100      	movs	r1, #0
   12832:	f014 fc1b 	bl	2706c <z_impl_k_sleep>
	}

	while (1)
   12836:	e7fa      	b.n	1282e <main+0x406>
   12838:	00031b14 	.word	0x00031b14
   1283c:	000314f8 	.word	0x000314f8
   12840:	00031b24 	.word	0x00031b24
   12844:	00031b50 	.word	0x00031b50

00012848 <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   12848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1284c:	b091      	sub	sp, #68	; 0x44
   1284e:	9205      	str	r2, [sp, #20]
   12850:	9302      	str	r3, [sp, #8]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
   12852:	4613      	mov	r3, r2
   12854:	f002 0204 	and.w	r2, r2, #4
   12858:	9200      	str	r2, [sp, #0]
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
   1285a:	f3c3 02c2 	ubfx	r2, r3, #3, #3
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
   1285e:	f010 0303 	ands.w	r3, r0, #3
   12862:	9301      	str	r3, [sp, #4]
   12864:	f040 8223 	bne.w	12cae <cbvprintf_package+0x466>
   12868:	4607      	mov	r7, r0
   1286a:	468a      	mov	sl, r1
   1286c:	3201      	adds	r2, #1
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
   1286e:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
   12870:	2800      	cmp	r0, #0
   12872:	d047      	beq.n	12904 <cbvprintf_package+0xbc>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
   12874:	b127      	cbz	r7, 12880 <cbvprintf_package+0x38>
   12876:	1be3      	subs	r3, r4, r7
   12878:	3304      	adds	r3, #4
   1287a:	4553      	cmp	r3, sl
   1287c:	f200 821a 	bhi.w	12cb4 <cbvprintf_package+0x46c>
	 * Here we branch directly into the code processing strings
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
   12880:	9b02      	ldr	r3, [sp, #8]
   12882:	1e5d      	subs	r5, r3, #1
	unsigned int s_ro_cnt = 0; /* number of ro strings */
   12884:	9b01      	ldr	r3, [sp, #4]
   12886:	9304      	str	r3, [sp, #16]
	unsigned int s_rw_cnt = 0; /* number of rw strings */
   12888:	9306      	str	r3, [sp, #24]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
   1288a:	9303      	str	r3, [sp, #12]
	bool parsing = false;
   1288c:	2600      	movs	r6, #0
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
   1288e:	f04f 3bff 	mov.w	fp, #4294967295
	align = VA_STACK_ALIGN(char *);
   12892:	f04f 0804 	mov.w	r8, #4
	size = sizeof(char *);
   12896:	46c1      	mov	r9, r8

		/* copy va_list data over to our buffer */
		if (is_str_arg) {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
   12898:	b10f      	cbz	r7, 1289e <cbvprintf_package+0x56>
				*(const char **)buf = s;
   1289a:	9b02      	ldr	r3, [sp, #8]
   1289c:	6023      	str	r3, [r4, #0]
			}

			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   1289e:	1e53      	subs	r3, r2, #1
   128a0:	9307      	str	r3, [sp, #28]
   128a2:	2a00      	cmp	r2, #0
   128a4:	f340 815f 	ble.w	12b66 <cbvprintf_package+0x31e>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
   128a8:	9b05      	ldr	r3, [sp, #20]
   128aa:	f013 0202 	ands.w	r2, r3, #2
   128ae:	d026      	beq.n	128fe <cbvprintf_package+0xb6>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   128b0:	2001      	movs	r0, #1
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   128b2:	1be1      	subs	r1, r4, r7
   128b4:	088b      	lsrs	r3, r1, #2
				 * In the do_ro case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   128b6:	b11a      	cbz	r2, 128c0 <cbvprintf_package+0x78>
   128b8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   128bc:	f080 8200 	bcs.w	12cc0 <cbvprintf_package+0x478>
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
				}

				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
   128c0:	9903      	ldr	r1, [sp, #12]
   128c2:	290f      	cmp	r1, #15
   128c4:	f200 81ff 	bhi.w	12cc6 <cbvprintf_package+0x47e>
					__ASSERT(false, "str_ptr_pos[] too small");
					return -EINVAL;
				}

				if (buf0 != NULL) {
   128c8:	2f00      	cmp	r7, #0
   128ca:	f000 8164 	beq.w	12b96 <cbvprintf_package+0x34e>
					/*
					 * Remember string pointer location.
					 * We will append non-ro strings later.
					 */
					str_ptr_pos[s_idx] = s_ptr_idx;
   128ce:	b2db      	uxtb	r3, r3
   128d0:	f101 0240 	add.w	r2, r1, #64	; 0x40
   128d4:	446a      	add	r2, sp
   128d6:	f802 3c10 	strb.w	r3, [r2, #-16]
					str_ptr_arg[s_idx] = arg_idx;
   128da:	f802 bc20 	strb.w	fp, [r2, #-32]
					if (is_ro) {
   128de:	2800      	cmp	r0, #0
   128e0:	f000 8155 	beq.w	12b8e <cbvprintf_package+0x346>
						/* flag read-only string. */
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
   128e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
   128e8:	f101 0240 	add.w	r2, r1, #64	; 0x40
   128ec:	446a      	add	r2, sp
   128ee:	f802 3c10 	strb.w	r3, [r2, #-16]
						s_ro_cnt++;
   128f2:	9b04      	ldr	r3, [sp, #16]
   128f4:	3301      	adds	r3, #1
   128f6:	9304      	str	r3, [sp, #16]
					 * and size of the pointer position prefix.
					 */
					len += strlen(s) + 1 + 1;
				}

				s_idx++;
   128f8:	9b03      	ldr	r3, [sp, #12]
   128fa:	3301      	adds	r3, #1
   128fc:	9303      	str	r3, [sp, #12]
			}
			buf += sizeof(char *);
   128fe:	3404      	adds	r4, #4

			is_str_arg = false;
   12900:	2200      	movs	r2, #0
   12902:	e03d      	b.n	12980 <cbvprintf_package+0x138>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
   12904:	f001 0a07 	and.w	sl, r1, #7
   12908:	4454      	add	r4, sl
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
   1290a:	f1ca 0a08 	rsb	sl, sl, #8
   1290e:	e7b1      	b.n	12874 <cbvprintf_package+0x2c>
				parsing = false;
   12910:	2600      	movs	r6, #0
   12912:	e034      	b.n	1297e <cbvprintf_package+0x136>
   12914:	2600      	movs	r6, #0
   12916:	e032      	b.n	1297e <cbvprintf_package+0x136>
   12918:	2600      	movs	r6, #0
   1291a:	e030      	b.n	1297e <cbvprintf_package+0x136>
				align = VA_STACK_ALIGN(intmax_t);
   1291c:	f04f 0808 	mov.w	r8, #8
				size = sizeof(intmax_t);
   12920:	46c1      	mov	r9, r8
   12922:	e02c      	b.n	1297e <cbvprintf_package+0x136>
				if (*fmt == '%') {
   12924:	2925      	cmp	r1, #37	; 0x25
   12926:	d12a      	bne.n	1297e <cbvprintf_package+0x136>
					arg_idx++;
   12928:	f10b 0b01 	add.w	fp, fp, #1
					parsing = true;
   1292c:	2601      	movs	r6, #1
					align = VA_STACK_ALIGN(int);
   1292e:	f04f 0804 	mov.w	r8, #4
					size = sizeof(int);
   12932:	46c1      	mov	r9, r8
				continue;
   12934:	e023      	b.n	1297e <cbvprintf_package+0x136>
			switch (*fmt) {
   12936:	2947      	cmp	r1, #71	; 0x47
   12938:	d8ec      	bhi.n	12914 <cbvprintf_package+0xcc>
   1293a:	292a      	cmp	r1, #42	; 0x2a
   1293c:	d312      	bcc.n	12964 <cbvprintf_package+0x11c>
   1293e:	392a      	subs	r1, #42	; 0x2a
   12940:	b2c9      	uxtb	r1, r1
   12942:	2001      	movs	r0, #1
   12944:	fa00 f101 	lsl.w	r1, r0, r1
   12948:	f64f 70da 	movw	r0, #65498	; 0xffda
   1294c:	4201      	tst	r1, r0
   1294e:	d116      	bne.n	1297e <cbvprintf_package+0x136>
   12950:	f011 5f62 	tst.w	r1, #947912704	; 0x38800000
   12954:	f040 80c4 	bne.w	12ae0 <cbvprintf_package+0x298>
   12958:	f011 0f01 	tst.w	r1, #1
   1295c:	f040 808e 	bne.w	12a7c <cbvprintf_package+0x234>
				parsing = false;
   12960:	2600      	movs	r6, #0
   12962:	e00c      	b.n	1297e <cbvprintf_package+0x136>
			switch (*fmt) {
   12964:	2925      	cmp	r1, #37	; 0x25
   12966:	d103      	bne.n	12970 <cbvprintf_package+0x128>
				arg_idx--;
   12968:	f10b 3bff 	add.w	fp, fp, #4294967295
				parsing = false;
   1296c:	2600      	movs	r6, #0
				continue;
   1296e:	e006      	b.n	1297e <cbvprintf_package+0x136>
			switch (*fmt) {
   12970:	d901      	bls.n	12976 <cbvprintf_package+0x12e>
				parsing = false;
   12972:	2600      	movs	r6, #0
   12974:	e003      	b.n	1297e <cbvprintf_package+0x136>
			switch (*fmt) {
   12976:	2920      	cmp	r1, #32
   12978:	d001      	beq.n	1297e <cbvprintf_package+0x136>
   1297a:	2923      	cmp	r1, #35	; 0x23
   1297c:	d1cc      	bne.n	12918 <cbvprintf_package+0xd0>
				parsing = false;
   1297e:	461d      	mov	r5, r3
			if (*++fmt == '\0') {
   12980:	1c6b      	adds	r3, r5, #1
   12982:	7869      	ldrb	r1, [r5, #1]
   12984:	2900      	cmp	r1, #0
   12986:	f000 811d 	beq.w	12bc4 <cbvprintf_package+0x37c>
			if (!parsing) {
   1298a:	2e00      	cmp	r6, #0
   1298c:	d0ca      	beq.n	12924 <cbvprintf_package+0xdc>
			switch (*fmt) {
   1298e:	297a      	cmp	r1, #122	; 0x7a
   12990:	d8be      	bhi.n	12910 <cbvprintf_package+0xc8>
   12992:	294c      	cmp	r1, #76	; 0x4c
   12994:	d3cf      	bcc.n	12936 <cbvprintf_package+0xee>
   12996:	394c      	subs	r1, #76	; 0x4c
   12998:	292e      	cmp	r1, #46	; 0x2e
   1299a:	d861      	bhi.n	12a60 <cbvprintf_package+0x218>
   1299c:	a001      	add	r0, pc, #4	; (adr r0, 129a4 <cbvprintf_package+0x15c>)
   1299e:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
   129a2:	bf00      	nop
   129a4:	0001297f 	.word	0x0001297f
   129a8:	00012a61 	.word	0x00012a61
   129ac:	00012a61 	.word	0x00012a61
   129b0:	00012a61 	.word	0x00012a61
   129b4:	00012a61 	.word	0x00012a61
   129b8:	00012a61 	.word	0x00012a61
   129bc:	00012a61 	.word	0x00012a61
   129c0:	00012a61 	.word	0x00012a61
   129c4:	00012a61 	.word	0x00012a61
   129c8:	00012a61 	.word	0x00012a61
   129cc:	00012a61 	.word	0x00012a61
   129d0:	00012a61 	.word	0x00012a61
   129d4:	00012a75 	.word	0x00012a75
   129d8:	00012a61 	.word	0x00012a61
   129dc:	00012a61 	.word	0x00012a61
   129e0:	00012a61 	.word	0x00012a61
   129e4:	00012a61 	.word	0x00012a61
   129e8:	00012a61 	.word	0x00012a61
   129ec:	00012a61 	.word	0x00012a61
   129f0:	00012a61 	.word	0x00012a61
   129f4:	00012a61 	.word	0x00012a61
   129f8:	00012ae1 	.word	0x00012ae1
   129fc:	00012a61 	.word	0x00012a61
   12a00:	00012a75 	.word	0x00012a75
   12a04:	00012a75 	.word	0x00012a75
   12a08:	00012ae1 	.word	0x00012ae1
   12a0c:	00012ae1 	.word	0x00012ae1
   12a10:	00012ae1 	.word	0x00012ae1
   12a14:	0001297f 	.word	0x0001297f
   12a18:	00012a75 	.word	0x00012a75
   12a1c:	0001291d 	.word	0x0001291d
   12a20:	00012a61 	.word	0x00012a61
   12a24:	0001297f 	.word	0x0001297f
   12a28:	00012a61 	.word	0x00012a61
   12a2c:	00012b3f 	.word	0x00012b3f
   12a30:	00012a75 	.word	0x00012a75
   12a34:	00012b3f 	.word	0x00012b3f
   12a38:	00012a61 	.word	0x00012a61
   12a3c:	00012a61 	.word	0x00012a61
   12a40:	00012b49 	.word	0x00012b49
   12a44:	00012a6d 	.word	0x00012a6d
   12a48:	00012a75 	.word	0x00012a75
   12a4c:	00012a61 	.word	0x00012a61
   12a50:	00012a61 	.word	0x00012a61
   12a54:	00012a75 	.word	0x00012a75
   12a58:	00012a61 	.word	0x00012a61
   12a5c:	00012a65 	.word	0x00012a65
				parsing = false;
   12a60:	2600      	movs	r6, #0
   12a62:	e78c      	b.n	1297e <cbvprintf_package+0x136>
				align = VA_STACK_ALIGN(size_t);
   12a64:	f04f 0804 	mov.w	r8, #4
				size = sizeof(size_t);
   12a68:	46c1      	mov	r9, r8
				continue;
   12a6a:	e788      	b.n	1297e <cbvprintf_package+0x136>
				align = VA_STACK_ALIGN(ptrdiff_t);
   12a6c:	f04f 0804 	mov.w	r8, #4
				size = sizeof(ptrdiff_t);
   12a70:	46c1      	mov	r9, r8
				continue;
   12a72:	e784      	b.n	1297e <cbvprintf_package+0x136>
				if (fmt[-1] == 'l') {
   12a74:	7829      	ldrb	r1, [r5, #0]
   12a76:	296c      	cmp	r1, #108	; 0x6c
   12a78:	d024      	beq.n	12ac4 <cbvprintf_package+0x27c>
				parsing = false;
   12a7a:	2600      	movs	r6, #0
		buf = (void *) ROUND_UP(buf, align);
   12a7c:	4444      	add	r4, r8
   12a7e:	3c01      	subs	r4, #1
   12a80:	f1c8 0100 	rsb	r1, r8, #0
   12a84:	400c      	ands	r4, r1
   12a86:	4620      	mov	r0, r4
		if (buf0 != NULL && BUF_OFFSET + size > len) {
   12a88:	b127      	cbz	r7, 12a94 <cbvprintf_package+0x24c>
   12a8a:	1be1      	subs	r1, r4, r7
   12a8c:	4449      	add	r1, r9
   12a8e:	4551      	cmp	r1, sl
   12a90:	f200 8113 	bhi.w	12cba <cbvprintf_package+0x472>
		if (is_str_arg) {
   12a94:	2a00      	cmp	r2, #0
   12a96:	d15d      	bne.n	12b54 <cbvprintf_package+0x30c>
		} else if (size == sizeof(int)) {
   12a98:	f1b9 0f04 	cmp.w	r9, #4
   12a9c:	f000 808a 	beq.w	12bb4 <cbvprintf_package+0x36c>

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
   12aa0:	f1b9 0f08 	cmp.w	r9, #8
   12aa4:	f040 8112 	bne.w	12ccc <cbvprintf_package+0x484>
			long long v = va_arg(ap, long long);
   12aa8:	991a      	ldr	r1, [sp, #104]	; 0x68
   12aaa:	3107      	adds	r1, #7
   12aac:	f021 0107 	bic.w	r1, r1, #7
   12ab0:	f101 0008 	add.w	r0, r1, #8
   12ab4:	901a      	str	r0, [sp, #104]	; 0x68
   12ab6:	e9d1 0100 	ldrd	r0, r1, [r1]

			if (buf0 != NULL) {
   12aba:	b10f      	cbz	r7, 12ac0 <cbvprintf_package+0x278>
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
   12abc:	e9c4 0100 	strd	r0, r1, [r4]
				}
			}
			buf += sizeof(long long);
   12ac0:	3408      	adds	r4, #8
   12ac2:	e75c      	b.n	1297e <cbvprintf_package+0x136>
					if (fmt[-2] == 'l') {
   12ac4:	f813 1c02 	ldrb.w	r1, [r3, #-2]
   12ac8:	296c      	cmp	r1, #108	; 0x6c
   12aca:	d004      	beq.n	12ad6 <cbvprintf_package+0x28e>
				parsing = false;
   12acc:	2600      	movs	r6, #0
						align = VA_STACK_ALIGN(long);
   12ace:	f04f 0804 	mov.w	r8, #4
						size = sizeof(long);
   12ad2:	46c1      	mov	r9, r8
   12ad4:	e7d2      	b.n	12a7c <cbvprintf_package+0x234>
				parsing = false;
   12ad6:	2600      	movs	r6, #0
						align = VA_STACK_ALIGN(long long);
   12ad8:	f04f 0808 	mov.w	r8, #8
						size = sizeof(long long);
   12adc:	46c1      	mov	r9, r8
   12ade:	e7cd      	b.n	12a7c <cbvprintf_package+0x234>
				if (fmt[-1] == 'L') {
   12ae0:	7829      	ldrb	r1, [r5, #0]
   12ae2:	294c      	cmp	r1, #76	; 0x4c
   12ae4:	d01b      	beq.n	12b1e <cbvprintf_package+0x2d6>
					v.d = va_arg(ap, double);
   12ae6:	991a      	ldr	r1, [sp, #104]	; 0x68
   12ae8:	3107      	adds	r1, #7
   12aea:	f021 0107 	bic.w	r1, r1, #7
   12aee:	f101 0008 	add.w	r0, r1, #8
   12af2:	901a      	str	r0, [sp, #104]	; 0x68
   12af4:	e9d1 0100 	ldrd	r0, r1, [r1]
				buf = (void *) ROUND_UP(buf, align);
   12af8:	3407      	adds	r4, #7
   12afa:	f024 0407 	bic.w	r4, r4, #7
				if (buf0 != NULL) {
   12afe:	b147      	cbz	r7, 12b12 <cbvprintf_package+0x2ca>
					if (BUF_OFFSET + size > len) {
   12b00:	1be6      	subs	r6, r4, r7
   12b02:	3608      	adds	r6, #8
   12b04:	4556      	cmp	r6, sl
   12b06:	d814      	bhi.n	12b32 <cbvprintf_package+0x2ea>
					} else if (fmt[-1] == 'L') {
   12b08:	782d      	ldrb	r5, [r5, #0]
   12b0a:	2d4c      	cmp	r5, #76	; 0x4c
   12b0c:	d014      	beq.n	12b38 <cbvprintf_package+0x2f0>
						*(double *)buf = v.d;
   12b0e:	e9c4 0100 	strd	r0, r1, [r4]
				buf += size;
   12b12:	3408      	adds	r4, #8
				parsing = false;
   12b14:	2600      	movs	r6, #0
				continue;
   12b16:	f04f 0808 	mov.w	r8, #8
   12b1a:	46c1      	mov	r9, r8
   12b1c:	e72f      	b.n	1297e <cbvprintf_package+0x136>
					v.ld = va_arg(ap, long double);
   12b1e:	991a      	ldr	r1, [sp, #104]	; 0x68
   12b20:	3107      	adds	r1, #7
   12b22:	f021 0107 	bic.w	r1, r1, #7
   12b26:	f101 0008 	add.w	r0, r1, #8
   12b2a:	901a      	str	r0, [sp, #104]	; 0x68
   12b2c:	e9d1 0100 	ldrd	r0, r1, [r1]
					size = sizeof(long double);
   12b30:	e7e2      	b.n	12af8 <cbvprintf_package+0x2b0>
						return -ENOSPC;
   12b32:	f06f 001b 	mvn.w	r0, #27
   12b36:	e0b7      	b.n	12ca8 <cbvprintf_package+0x460>
						*(long double *)buf = v.ld;
   12b38:	e9c4 0100 	strd	r0, r1, [r4]
   12b3c:	e7e9      	b.n	12b12 <cbvprintf_package+0x2ca>
				parsing = false;
   12b3e:	2600      	movs	r6, #0
				align = VA_STACK_ALIGN(void *);
   12b40:	f04f 0804 	mov.w	r8, #4
				size = sizeof(void *);
   12b44:	46c1      	mov	r9, r8
   12b46:	e799      	b.n	12a7c <cbvprintf_package+0x234>
				is_str_arg = true;
   12b48:	4632      	mov	r2, r6
				parsing = false;
   12b4a:	2600      	movs	r6, #0
				align = VA_STACK_ALIGN(void *);
   12b4c:	f04f 0804 	mov.w	r8, #4
				size = sizeof(void *);
   12b50:	46c1      	mov	r9, r8
   12b52:	e793      	b.n	12a7c <cbvprintf_package+0x234>
			s = va_arg(ap, char *);
   12b54:	4604      	mov	r4, r0
   12b56:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   12b58:	1d11      	adds	r1, r2, #4
   12b5a:	911a      	str	r1, [sp, #104]	; 0x68
   12b5c:	6812      	ldr	r2, [r2, #0]
   12b5e:	9202      	str	r2, [sp, #8]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   12b60:	9a07      	ldr	r2, [sp, #28]
			if (*++fmt == '\0') {
   12b62:	461d      	mov	r5, r3
   12b64:	e698      	b.n	12898 <cbvprintf_package+0x50>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
   12b66:	4b5f      	ldr	r3, [pc, #380]	; (12ce4 <cbvprintf_package+0x49c>)
   12b68:	9a02      	ldr	r2, [sp, #8]
   12b6a:	429a      	cmp	r2, r3
   12b6c:	d304      	bcc.n	12b78 <cbvprintf_package+0x330>
   12b6e:	4b5e      	ldr	r3, [pc, #376]	; (12ce8 <cbvprintf_package+0x4a0>)
   12b70:	429a      	cmp	r2, r3
   12b72:	d30a      	bcc.n	12b8a <cbvprintf_package+0x342>
   12b74:	2300      	movs	r3, #0
   12b76:	e000      	b.n	12b7a <cbvprintf_package+0x332>
   12b78:	2300      	movs	r3, #0
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   12b7a:	2b00      	cmp	r3, #0
   12b7c:	f47f ae94 	bne.w	128a8 <cbvprintf_package+0x60>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
   12b80:	9b05      	ldr	r3, [sp, #20]
   12b82:	f003 0202 	and.w	r2, r3, #2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   12b86:	2000      	movs	r0, #0
   12b88:	e693      	b.n	128b2 <cbvprintf_package+0x6a>
   12b8a:	2301      	movs	r3, #1
   12b8c:	e7f5      	b.n	12b7a <cbvprintf_package+0x332>
						s_rw_cnt++;
   12b8e:	9b06      	ldr	r3, [sp, #24]
   12b90:	3301      	adds	r3, #1
   12b92:	9306      	str	r3, [sp, #24]
   12b94:	e6b0      	b.n	128f8 <cbvprintf_package+0xb0>
				} else if (is_ro) {
   12b96:	b110      	cbz	r0, 12b9e <cbvprintf_package+0x356>
					len += 1;
   12b98:	f10a 0a01 	add.w	sl, sl, #1
   12b9c:	e6ac      	b.n	128f8 <cbvprintf_package+0xb0>
				} else if (rws_pos_en) {
   12b9e:	9b00      	ldr	r3, [sp, #0]
   12ba0:	b113      	cbz	r3, 12ba8 <cbvprintf_package+0x360>
					len += 2;
   12ba2:	f10a 0a02 	add.w	sl, sl, #2
   12ba6:	e6a7      	b.n	128f8 <cbvprintf_package+0xb0>
					len += strlen(s) + 1 + 1;
   12ba8:	9802      	ldr	r0, [sp, #8]
   12baa:	f016 ffb4 	bl	29b16 <strlen>
   12bae:	1c83      	adds	r3, r0, #2
   12bb0:	449a      	add	sl, r3
   12bb2:	e6a1      	b.n	128f8 <cbvprintf_package+0xb0>
			int v = va_arg(ap, int);
   12bb4:	991a      	ldr	r1, [sp, #104]	; 0x68
   12bb6:	1d08      	adds	r0, r1, #4
   12bb8:	901a      	str	r0, [sp, #104]	; 0x68
   12bba:	6809      	ldr	r1, [r1, #0]
			if (buf0 != NULL) {
   12bbc:	b107      	cbz	r7, 12bc0 <cbvprintf_package+0x378>
				*(int *)buf = v;
   12bbe:	6021      	str	r1, [r4, #0]
			buf += sizeof(int);
   12bc0:	3404      	adds	r4, #4
   12bc2:	e6dc      	b.n	1297e <cbvprintf_package+0x136>
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
   12bc4:	1be3      	subs	r3, r4, r7
   12bc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   12bca:	f080 8082 	bcs.w	12cd2 <cbvprintf_package+0x48a>

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
   12bce:	b197      	cbz	r7, 12bf6 <cbvprintf_package+0x3ae>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
	}

	/* Clear our buffer header. We made room for it initially. */
	*(char **)buf0 = NULL;
   12bd0:	2200      	movs	r2, #0
   12bd2:	603a      	str	r2, [r7, #0]

	/* Record end of argument list. */
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
   12bd4:	089b      	lsrs	r3, r3, #2
   12bd6:	703b      	strb	r3, [r7, #0]

	if (rws_pos_en) {
   12bd8:	9b00      	ldr	r3, [sp, #0]
   12bda:	b183      	cbz	r3, 12bfe <cbvprintf_package+0x3b6>
		/* Strings are appended, update location counter. */
		pkg_hdr->desc.str_cnt = 0;
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
   12bdc:	9b06      	ldr	r3, [sp, #24]
   12bde:	70fb      	strb	r3, [r7, #3]
		/* Strings are appended, update append counter. */
		pkg_hdr->desc.str_cnt = s_rw_cnt;
		pkg_hdr->desc.rw_str_cnt = 0;
	}

	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
   12be0:	9b04      	ldr	r3, [sp, #16]
   12be2:	70bb      	strb	r3, [r7, #2]
#ifdef CONFIG_CBPRINTF_PACKAGE_HEADER_STORE_CREATION_FLAGS
	pkg_hdr->desc.pkg_flags = flags;
#endif

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
   12be4:	bb1b      	cbnz	r3, 12c2e <cbvprintf_package+0x3e6>
			/* retrieve the string pointer */
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
			/* clear the in-buffer pointer (less entropy if compressed) */
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
			/* find the string length including terminating '\0' */
			size = strlen(s) + 1;
   12be6:	9d01      	ldr	r5, [sp, #4]
   12be8:	f8dd 900c 	ldr.w	r9, [sp, #12]
   12bec:	f8dd b010 	ldr.w	fp, [sp, #16]
   12bf0:	f8dd 8008 	ldr.w	r8, [sp, #8]
   12bf4:	e03b      	b.n	12c6e <cbvprintf_package+0x426>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
   12bf6:	4453      	add	r3, sl
   12bf8:	f1a3 0008 	sub.w	r0, r3, #8
   12bfc:	e054      	b.n	12ca8 <cbvprintf_package+0x460>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
   12bfe:	9b06      	ldr	r3, [sp, #24]
   12c00:	707b      	strb	r3, [r7, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
   12c02:	e7ed      	b.n	12be0 <cbvprintf_package+0x398>
		for (i = 0; i < s_idx; i++) {
   12c04:	3301      	adds	r3, #1
   12c06:	4298      	cmp	r0, r3
   12c08:	d9ed      	bls.n	12be6 <cbvprintf_package+0x39e>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
   12c0a:	f103 0240 	add.w	r2, r3, #64	; 0x40
   12c0e:	446a      	add	r2, sp
   12c10:	f812 1c10 	ldrb.w	r1, [r2, #-16]
   12c14:	f912 2c10 	ldrsb.w	r2, [r2, #-16]
   12c18:	2a00      	cmp	r2, #0
   12c1a:	daf3      	bge.n	12c04 <cbvprintf_package+0x3bc>
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
   12c1c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
   12c20:	1be2      	subs	r2, r4, r7
   12c22:	3201      	adds	r2, #1
   12c24:	4552      	cmp	r2, sl
   12c26:	d857      	bhi.n	12cd8 <cbvprintf_package+0x490>
			*buf++ = pos;
   12c28:	f804 1b01 	strb.w	r1, [r4], #1
   12c2c:	e7ea      	b.n	12c04 <cbvprintf_package+0x3bc>
		for (i = 0; i < s_idx; i++) {
   12c2e:	9b01      	ldr	r3, [sp, #4]
   12c30:	9803      	ldr	r0, [sp, #12]
   12c32:	e7e8      	b.n	12c06 <cbvprintf_package+0x3be>
		if (rws_pos_en) {
   12c34:	9b00      	ldr	r3, [sp, #0]
   12c36:	b33b      	cbz	r3, 12c88 <cbvprintf_package+0x440>
			*buf++ = str_ptr_arg[i];
   12c38:	f105 0340 	add.w	r3, r5, #64	; 0x40
   12c3c:	446b      	add	r3, sp
   12c3e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
   12c42:	f804 3b01 	strb.w	r3, [r4], #1
			size = 0;
   12c46:	9e01      	ldr	r6, [sp, #4]
		}

		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
   12c48:	1be3      	subs	r3, r4, r7
   12c4a:	4433      	add	r3, r6
   12c4c:	3301      	adds	r3, #1
   12c4e:	4553      	cmp	r3, sl
   12c50:	d845      	bhi.n	12cde <cbvprintf_package+0x496>
			return -ENOSPC;
		}
		/* store the pointer position prefix */
		*buf++ = str_ptr_pos[i];
   12c52:	f105 0340 	add.w	r3, r5, #64	; 0x40
   12c56:	446b      	add	r3, sp
   12c58:	f813 3c10 	ldrb.w	r3, [r3, #-16]
   12c5c:	f804 3b01 	strb.w	r3, [r4], #1
		/* copy the string with its terminating '\0' */
		memcpy(buf, s, size);
   12c60:	4632      	mov	r2, r6
   12c62:	4641      	mov	r1, r8
   12c64:	4620      	mov	r0, r4
   12c66:	f016 ffa4 	bl	29bb2 <memcpy>
		buf += size;
   12c6a:	4434      	add	r4, r6
	for (i = 0; i < s_idx; i++) {
   12c6c:	3501      	adds	r5, #1
   12c6e:	45a9      	cmp	r9, r5
   12c70:	d919      	bls.n	12ca6 <cbvprintf_package+0x45e>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
   12c72:	f1bb 0f00 	cmp.w	fp, #0
   12c76:	d0dd      	beq.n	12c34 <cbvprintf_package+0x3ec>
   12c78:	f105 0340 	add.w	r3, r5, #64	; 0x40
   12c7c:	446b      	add	r3, sp
   12c7e:	f913 3c10 	ldrsb.w	r3, [r3, #-16]
   12c82:	2b00      	cmp	r3, #0
   12c84:	dad6      	bge.n	12c34 <cbvprintf_package+0x3ec>
   12c86:	e7f1      	b.n	12c6c <cbvprintf_package+0x424>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
   12c88:	f105 0340 	add.w	r3, r5, #64	; 0x40
   12c8c:	446b      	add	r3, sp
   12c8e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
   12c92:	f857 8023 	ldr.w	r8, [r7, r3, lsl #2]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
   12c96:	2200      	movs	r2, #0
   12c98:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
			size = strlen(s) + 1;
   12c9c:	4640      	mov	r0, r8
   12c9e:	f016 ff3a 	bl	29b16 <strlen>
   12ca2:	1c46      	adds	r6, r0, #1
   12ca4:	e7d0      	b.n	12c48 <cbvprintf_package+0x400>
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return BUF_OFFSET;
   12ca6:	1be0      	subs	r0, r4, r7

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
   12ca8:	b011      	add	sp, #68	; 0x44
   12caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EFAULT;
   12cae:	f06f 000d 	mvn.w	r0, #13
   12cb2:	e7f9      	b.n	12ca8 <cbvprintf_package+0x460>
		return -ENOSPC;
   12cb4:	f06f 001b 	mvn.w	r0, #27
   12cb8:	e7f6      	b.n	12ca8 <cbvprintf_package+0x460>
			return -ENOSPC;
   12cba:	f06f 001b 	mvn.w	r0, #27
   12cbe:	e7f3      	b.n	12ca8 <cbvprintf_package+0x460>
					return -EINVAL;
   12cc0:	f06f 0015 	mvn.w	r0, #21
   12cc4:	e7f0      	b.n	12ca8 <cbvprintf_package+0x460>
					return -EINVAL;
   12cc6:	f06f 0015 	mvn.w	r0, #21
   12cca:	e7ed      	b.n	12ca8 <cbvprintf_package+0x460>
			return -EINVAL;
   12ccc:	f06f 0015 	mvn.w	r0, #21
   12cd0:	e7ea      	b.n	12ca8 <cbvprintf_package+0x460>
		return -EINVAL;
   12cd2:	f06f 0015 	mvn.w	r0, #21
   12cd6:	e7e7      	b.n	12ca8 <cbvprintf_package+0x460>
				return -ENOSPC;
   12cd8:	f06f 001b 	mvn.w	r0, #27
   12cdc:	e7e4      	b.n	12ca8 <cbvprintf_package+0x460>
			return -ENOSPC;
   12cde:	f06f 001b 	mvn.w	r0, #27
   12ce2:	e7e1      	b.n	12ca8 <cbvprintf_package+0x460>
   12ce4:	00031044 	.word	0x00031044
   12ce8:	00034b6c 	.word	0x00034b6c

00012cec <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
   12cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12cf0:	b097      	sub	sp, #92	; 0x5c
   12cf2:	af00      	add	r7, sp, #0
   12cf4:	4683      	mov	fp, r0
   12cf6:	61ba      	str	r2, [r7, #24]
   12cf8:	613b      	str	r3, [r7, #16]
	__ASSERT_NO_MSG(in_packaged != NULL);

	uint8_t *buf = in_packaged;
	uint32_t *buf32 = in_packaged;
	unsigned int args_size, ros_nbr, rws_nbr;
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
   12cfa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   12cfe:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   12d02:	623b      	str	r3, [r7, #32]
	bool rw_cpy;
	bool ro_cpy;
	struct cbprintf_package_desc *in_desc = in_packaged;

	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
   12d04:	60f9      	str	r1, [r7, #12]
   12d06:	b151      	cbz	r1, 12d1e <cbprintf_package_convert+0x32>

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = in_desc->ro_str_cnt;
   12d08:	f89b 6002 	ldrb.w	r6, [fp, #2]
   12d0c:	46b1      	mov	r9, r6
	ro_cpy = ros_nbr &&
   12d0e:	b156      	cbz	r6, 12d26 <cbprintf_package_convert+0x3a>
   12d10:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   12d14:	f013 0f01 	tst.w	r3, #1
   12d18:	d111      	bne.n	12d3e <cbprintf_package_convert+0x52>
   12d1a:	2300      	movs	r3, #0
   12d1c:	e004      	b.n	12d28 <cbprintf_package_convert+0x3c>
	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
   12d1e:	f015 f8a3 	bl	27e68 <get_package_len>
   12d22:	60f8      	str	r0, [r7, #12]
   12d24:	e7f0      	b.n	12d08 <cbprintf_package_convert+0x1c>
	ro_cpy = ros_nbr &&
   12d26:	2300      	movs	r3, #0
		(flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) == CBPRINTF_PACKAGE_CONVERT_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = in_desc->rw_str_cnt;
   12d28:	f89b 2003 	ldrb.w	r2, [fp, #3]
   12d2c:	627a      	str	r2, [r7, #36]	; 0x24
	rw_cpy = rws_nbr > 0 &&
   12d2e:	b142      	cbz	r2, 12d42 <cbprintf_package_convert+0x56>
   12d30:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
   12d34:	f012 0f02 	tst.w	r2, #2
   12d38:	d122      	bne.n	12d80 <cbprintf_package_convert+0x94>
   12d3a:	2200      	movs	r2, #0
   12d3c:	e002      	b.n	12d44 <cbprintf_package_convert+0x58>
	ro_cpy = ros_nbr &&
   12d3e:	2301      	movs	r3, #1
   12d40:	e7f2      	b.n	12d28 <cbprintf_package_convert+0x3c>
	rw_cpy = rws_nbr > 0 &&
   12d42:	2200      	movs	r2, #0

	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
   12d44:	b902      	cbnz	r2, 12d48 <cbprintf_package_convert+0x5c>
   12d46:	b1eb      	cbz	r3, 12d84 <cbprintf_package_convert+0x98>

	/* If we got here, it means that coping will be more complex and will be
	 * done with strings appending.
	 * Retrieve the size of the arg list.
	 */
	args_size = in_desc->len * sizeof(int);
   12d48:	f89b 5000 	ldrb.w	r5, [fp]
   12d4c:	00aa      	lsls	r2, r5, #2
   12d4e:	60ba      	str	r2, [r7, #8]
	int out_len;

	/* Pointer to array with string locations. Array starts with read-only
	 * string locations.
	 */
	const char *fmt = *(const char **)(buf + sizeof(void *));
   12d50:	f8db 2004 	ldr.w	r2, [fp, #4]
   12d54:	617a      	str	r2, [r7, #20]
	uint8_t *str_pos = &buf[args_size];
   12d56:	eb0b 0585 	add.w	r5, fp, r5, lsl #2
	size_t strl_cnt = 0;

	/* If null destination, just calculate output length. */
	if (cb == NULL) {
   12d5a:	69ba      	ldr	r2, [r7, #24]
   12d5c:	b1f2      	cbz	r2, 12d9c <cbprintf_package_convert+0xb0>

	/* If read-only strings shall be appended to the output package copy
	 * their indexes to the local array, otherwise indicate that indexes
	 * shall remain in the output package.
	 */
	if (ro_cpy) {
   12d5e:	2b00      	cmp	r3, #0
   12d60:	f040 8112 	bne.w	12f88 <cbprintf_package_convert+0x29c>
		scpy_cnt = ros_nbr;
		keep_cnt = 0;
		dst = cpy_str_pos;
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   12d64:	f1b9 0f00 	cmp.w	r9, #0
   12d68:	f000 811d 	beq.w	12fa6 <cbprintf_package_convert+0x2ba>
   12d6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   12d70:	f013 0f04 	tst.w	r3, #4
   12d74:	f040 811b 	bne.w	12fae <cbprintf_package_convert+0x2c2>
		keep_cnt = ros_nbr;
		dst = keep_str_pos;
	} else {
		scpy_cnt = 0;
		keep_cnt = 0;
		dst = NULL;
   12d78:	2000      	movs	r0, #0
		keep_cnt = 0;
   12d7a:	61f8      	str	r0, [r7, #28]
		scpy_cnt = 0;
   12d7c:	4606      	mov	r6, r0
   12d7e:	e107      	b.n	12f90 <cbprintf_package_convert+0x2a4>
	rw_cpy = rws_nbr > 0 &&
   12d80:	2201      	movs	r2, #1
   12d82:	e7df      	b.n	12d44 <cbprintf_package_convert+0x58>
		if (cb) {
   12d84:	69bb      	ldr	r3, [r7, #24]
   12d86:	b11b      	cbz	r3, 12d90 <cbprintf_package_convert+0xa4>
			cb(in_packaged, in_len, ctx);
   12d88:	693a      	ldr	r2, [r7, #16]
   12d8a:	68f9      	ldr	r1, [r7, #12]
   12d8c:	4658      	mov	r0, fp
   12d8e:	4798      	blx	r3
		return in_len;
   12d90:	68fc      	ldr	r4, [r7, #12]

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
   12d92:	4620      	mov	r0, r4
   12d94:	375c      	adds	r7, #92	; 0x5c
   12d96:	46bd      	mov	sp, r7
   12d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		out_len = (int)in_len;
   12d9c:	68fc      	ldr	r4, [r7, #12]
		if (ro_cpy) {
   12d9e:	bb2b      	cbnz	r3, 12dec <cbprintf_package_convert+0x100>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   12da0:	f1b9 0f00 	cmp.w	r9, #0
   12da4:	d038      	beq.n	12e18 <cbprintf_package_convert+0x12c>
   12da6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   12daa:	f013 0304 	ands.w	r3, r3, #4
   12dae:	613b      	str	r3, [r7, #16]
   12db0:	d027      	beq.n	12e02 <cbprintf_package_convert+0x116>
				str_pos += ros_nbr;
   12db2:	444d      	add	r5, r9
	size_t strl_cnt = 0;
   12db4:	2300      	movs	r3, #0
   12db6:	613b      	str	r3, [r7, #16]
   12db8:	e023      	b.n	12e02 <cbprintf_package_convert+0x116>
				out_len += len;
   12dba:	4404      	add	r4, r0
				str_pos++;
   12dbc:	3501      	adds	r5, #1
			for (int i = 0; i < ros_nbr; i++) {
   12dbe:	3601      	adds	r6, #1
   12dc0:	454e      	cmp	r6, r9
   12dc2:	d21a      	bcs.n	12dfa <cbprintf_package_convert+0x10e>
				const char *str = *(const char **)&buf32[*str_pos];
   12dc4:	782a      	ldrb	r2, [r5, #0]
				int len = append_string(cb, NULL, str, 0);
   12dc6:	2300      	movs	r3, #0
   12dc8:	f85b 2022 	ldr.w	r2, [fp, r2, lsl #2]
   12dcc:	4619      	mov	r1, r3
   12dce:	69b8      	ldr	r0, [r7, #24]
   12dd0:	f015 f85f 	bl	27e92 <append_string>
				if (strl && strl_cnt < strl_len) {
   12dd4:	f1ba 0f00 	cmp.w	sl, #0
   12dd8:	d0ef      	beq.n	12dba <cbprintf_package_convert+0xce>
   12dda:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
   12dde:	4598      	cmp	r8, r3
   12de0:	d2eb      	bcs.n	12dba <cbprintf_package_convert+0xce>
					strl[strl_cnt++] = (uint16_t)len;
   12de2:	f82a 0018 	strh.w	r0, [sl, r8, lsl #1]
   12de6:	f108 0801 	add.w	r8, r8, #1
   12dea:	e7e6      	b.n	12dba <cbprintf_package_convert+0xce>
			for (int i = 0; i < ros_nbr; i++) {
   12dec:	2600      	movs	r6, #0
	size_t strl_cnt = 0;
   12dee:	46b0      	mov	r8, r6
   12df0:	f8c7 a01c 	str.w	sl, [r7, #28]
   12df4:	f8d7 a084 	ldr.w	sl, [r7, #132]	; 0x84
   12df8:	e7e2      	b.n	12dc0 <cbprintf_package_convert+0xd4>
   12dfa:	f8c7 8010 	str.w	r8, [r7, #16]
   12dfe:	f8d7 a01c 	ldr.w	sl, [r7, #28]
		bool drop_ro_str_pos = !(flags &
   12e02:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   12e06:	f003 0305 	and.w	r3, r3, #5
   12e0a:	60fb      	str	r3, [r7, #12]
		for (int i = 0; i < rws_nbr; i++) {
   12e0c:	f04f 0800 	mov.w	r8, #0
   12e10:	46a1      	mov	r9, r4
   12e12:	f8c7 b01c 	str.w	fp, [r7, #28]
   12e16:	e0a1      	b.n	12f5c <cbprintf_package_convert+0x270>
	size_t strl_cnt = 0;
   12e18:	f8c7 9010 	str.w	r9, [r7, #16]
   12e1c:	e7f1      	b.n	12e02 <cbprintf_package_convert+0x116>
   12e1e:	2500      	movs	r5, #0
			if (fmt_present && is_ptr(fmt, arg_idx)) {
   12e20:	6a3b      	ldr	r3, [r7, #32]
   12e22:	b97b      	cbnz	r3, 12e44 <cbprintf_package_convert+0x158>
			if (is_ro) {
   12e24:	2d00      	cmp	r5, #0
   12e26:	d07b      	beq.n	12f20 <cbprintf_package_convert+0x234>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
   12e28:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   12e2c:	f013 0f01 	tst.w	r3, #1
   12e30:	d17b      	bne.n	12f2a <cbprintf_package_convert+0x23e>
					out_len -= drop_ro_str_pos ? 2 : 1;
   12e32:	68fb      	ldr	r3, [r7, #12]
   12e34:	2b00      	cmp	r3, #0
   12e36:	d171      	bne.n	12f1c <cbprintf_package_convert+0x230>
   12e38:	2302      	movs	r3, #2
   12e3a:	eba9 0903 	sub.w	r9, r9, r3
   12e3e:	e08a      	b.n	12f56 <cbprintf_package_convert+0x26a>
   12e40:	2501      	movs	r5, #1
   12e42:	e7ed      	b.n	12e20 <cbprintf_package_convert+0x134>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
   12e44:	4659      	mov	r1, fp
   12e46:	6978      	ldr	r0, [r7, #20]
   12e48:	f015 f86a 	bl	27f20 <is_ptr>
   12e4c:	2800      	cmp	r0, #0
   12e4e:	d0e9      	beq.n	12e24 <cbprintf_package_convert+0x138>
				LOG_WRN("(unsigned) char * used for %%p argument. "
   12e50:	466c      	mov	r4, sp
   12e52:	2300      	movs	r3, #0
   12e54:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
   12e58:	2302      	movs	r3, #2
   12e5a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
   12e5e:	b08a      	sub	sp, #40	; 0x28
   12e60:	4669      	mov	r1, sp
   12e62:	f111 0210 	adds.w	r2, r1, #16
   12e66:	d039      	beq.n	12edc <cbprintf_package_convert+0x1f0>
   12e68:	2512      	movs	r5, #18
   12e6a:	b11a      	cbz	r2, 12e74 <cbprintf_package_convert+0x188>
   12e6c:	2d04      	cmp	r5, #4
   12e6e:	dd01      	ble.n	12e74 <cbprintf_package_convert+0x188>
   12e70:	4bb3      	ldr	r3, [pc, #716]	; (13140 <cbprintf_package_convert+0x454>)
   12e72:	614b      	str	r3, [r1, #20]
   12e74:	2300      	movs	r3, #0
   12e76:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
   12e7a:	2302      	movs	r3, #2
   12e7c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
   12e80:	bb7a      	cbnz	r2, 12ee2 <cbprintf_package_convert+0x1f6>
   12e82:	2d11      	cmp	r5, #17
   12e84:	dd47      	ble.n	12f16 <cbprintf_package_convert+0x22a>
   12e86:	2312      	movs	r3, #18
   12e88:	b162      	cbz	r2, 12ea4 <cbprintf_package_convert+0x1b8>
   12e8a:	2004      	movs	r0, #4
   12e8c:	f887 002c 	strb.w	r0, [r7, #44]	; 0x2c
   12e90:	2000      	movs	r0, #0
   12e92:	f887 002d 	strb.w	r0, [r7, #45]	; 0x2d
   12e96:	f887 002e 	strb.w	r0, [r7, #46]	; 0x2e
   12e9a:	2001      	movs	r0, #1
   12e9c:	f887 002f 	strb.w	r0, [r7, #47]	; 0x2f
   12ea0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   12ea2:	6108      	str	r0, [r1, #16]
   12ea4:	f36f 0a00 	bfc	sl, #0, #1
   12ea8:	f36f 0a41 	bfc	sl, #1, #1
   12eac:	f36f 0a82 	bfc	sl, #2, #1
   12eb0:	f36f 0ac5 	bfc	sl, #3, #3
   12eb4:	2102      	movs	r1, #2
   12eb6:	f361 1a88 	bfi	sl, r1, #6, #3
   12eba:	f3c3 0309 	ubfx	r3, r3, #0, #10
   12ebe:	f363 2a52 	bfi	sl, r3, #9, #10
   12ec2:	f36f 4ade 	bfc	sl, #19, #12
   12ec6:	f36f 7adf 	bfc	sl, #31, #1
   12eca:	2300      	movs	r3, #0
   12ecc:	4651      	mov	r1, sl
   12ece:	489d      	ldr	r0, [pc, #628]	; (13144 <cbprintf_package_convert+0x458>)
   12ed0:	f016 f99b 	bl	2920a <z_impl_z_log_msg_static_create>
   12ed4:	46a5      	mov	sp, r4
				out_len -= 2;
   12ed6:	f1a9 0902 	sub.w	r9, r9, #2
				continue;
   12eda:	e03c      	b.n	12f56 <cbprintf_package_convert+0x26a>
				LOG_WRN("(unsigned) char * used for %%p argument. "
   12edc:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   12ee0:	e7c3      	b.n	12e6a <cbprintf_package_convert+0x17e>
   12ee2:	462b      	mov	r3, r5
   12ee4:	2d08      	cmp	r5, #8
   12ee6:	dd01      	ble.n	12eec <cbprintf_package_convert+0x200>
   12ee8:	6978      	ldr	r0, [r7, #20]
   12eea:	6188      	str	r0, [r1, #24]
   12eec:	2b0c      	cmp	r3, #12
   12eee:	dd01      	ble.n	12ef4 <cbprintf_package_convert+0x208>
   12ef0:	f8c1 b01c 	str.w	fp, [r1, #28]
   12ef4:	f101 0320 	add.w	r3, r1, #32
   12ef8:	2000      	movs	r0, #0
   12efa:	e009      	b.n	12f10 <cbprintf_package_convert+0x224>
   12efc:	f100 0c30 	add.w	ip, r0, #48	; 0x30
   12f00:	f107 0e28 	add.w	lr, r7, #40	; 0x28
   12f04:	44f4      	add	ip, lr
   12f06:	f81c cc30 	ldrb.w	ip, [ip, #-48]
   12f0a:	f803 cb01 	strb.w	ip, [r3], #1
   12f0e:	3001      	adds	r0, #1
   12f10:	2801      	cmp	r0, #1
   12f12:	d9f3      	bls.n	12efc <cbprintf_package_convert+0x210>
   12f14:	e7b5      	b.n	12e82 <cbprintf_package_convert+0x196>
   12f16:	f06f 031b 	mvn.w	r3, #27
   12f1a:	e7b5      	b.n	12e88 <cbprintf_package_convert+0x19c>
					out_len -= drop_ro_str_pos ? 2 : 1;
   12f1c:	2301      	movs	r3, #1
   12f1e:	e78c      	b.n	12e3a <cbprintf_package_convert+0x14e>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   12f20:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   12f24:	f013 0f02 	tst.w	r3, #2
   12f28:	d015      	beq.n	12f56 <cbprintf_package_convert+0x26a>
				len = append_string(cb, NULL, str, 0);
   12f2a:	2300      	movs	r3, #0
   12f2c:	4622      	mov	r2, r4
   12f2e:	4619      	mov	r1, r3
   12f30:	69b8      	ldr	r0, [r7, #24]
   12f32:	f014 ffae 	bl	27e92 <append_string>
				if (strl && strl_cnt < strl_len) {
   12f36:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   12f3a:	b153      	cbz	r3, 12f52 <cbprintf_package_convert+0x266>
   12f3c:	693b      	ldr	r3, [r7, #16]
   12f3e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
   12f42:	4293      	cmp	r3, r2
   12f44:	d205      	bcs.n	12f52 <cbprintf_package_convert+0x266>
					strl[strl_cnt++] = (uint16_t)len;
   12f46:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
   12f4a:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
   12f4e:	3301      	adds	r3, #1
   12f50:	613b      	str	r3, [r7, #16]
				out_len += (len - 1);
   12f52:	3801      	subs	r0, #1
   12f54:	4481      	add	r9, r0
		for (int i = 0; i < rws_nbr; i++) {
   12f56:	f108 0801 	add.w	r8, r8, #1
			uint8_t arg_pos = *str_pos++;
   12f5a:	4635      	mov	r5, r6
		for (int i = 0; i < rws_nbr; i++) {
   12f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12f5e:	4598      	cmp	r8, r3
   12f60:	d210      	bcs.n	12f84 <cbprintf_package_convert+0x298>
			uint8_t arg_idx = *str_pos++;
   12f62:	462e      	mov	r6, r5
   12f64:	f816 bb02 	ldrb.w	fp, [r6], #2
			uint8_t arg_pos = *str_pos++;
   12f68:	786b      	ldrb	r3, [r5, #1]
			const char *str = *(const char **)&buf32[arg_pos];
   12f6a:	69fa      	ldr	r2, [r7, #28]
   12f6c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   12f70:	4b75      	ldr	r3, [pc, #468]	; (13148 <cbprintf_package_convert+0x45c>)
   12f72:	429c      	cmp	r4, r3
   12f74:	f4ff af53 	bcc.w	12e1e <cbprintf_package_convert+0x132>
   12f78:	4b74      	ldr	r3, [pc, #464]	; (1314c <cbprintf_package_convert+0x460>)
   12f7a:	429c      	cmp	r4, r3
   12f7c:	f4ff af60 	bcc.w	12e40 <cbprintf_package_convert+0x154>
   12f80:	2500      	movs	r5, #0
   12f82:	e74d      	b.n	12e20 <cbprintf_package_convert+0x134>
   12f84:	464c      	mov	r4, r9
   12f86:	e704      	b.n	12d92 <cbprintf_package_convert+0xa6>
		dst = cpy_str_pos;
   12f88:	f107 0044 	add.w	r0, r7, #68	; 0x44
		keep_cnt = 0;
   12f8c:	2300      	movs	r3, #0
   12f8e:	61fb      	str	r3, [r7, #28]
	if (dst) {
   12f90:	b118      	cbz	r0, 12f9a <cbprintf_package_convert+0x2ae>
		memcpy(dst, str_pos, ros_nbr);
   12f92:	464a      	mov	r2, r9
   12f94:	4629      	mov	r1, r5
   12f96:	f016 fe0c 	bl	29bb2 <memcpy>
	str_pos += ros_nbr;
   12f9a:	444d      	add	r5, r9
	for (int i = 0; i < rws_nbr; i++) {
   12f9c:	f04f 0800 	mov.w	r8, #0
   12fa0:	f8c7 9004 	str.w	r9, [r7, #4]
   12fa4:	e01e      	b.n	12fe4 <cbprintf_package_convert+0x2f8>
		dst = NULL;
   12fa6:	2000      	movs	r0, #0
		keep_cnt = 0;
   12fa8:	61f8      	str	r0, [r7, #28]
		scpy_cnt = 0;
   12faa:	4606      	mov	r6, r0
   12fac:	e7f0      	b.n	12f90 <cbprintf_package_convert+0x2a4>
		keep_cnt = ros_nbr;
   12fae:	61fe      	str	r6, [r7, #28]
		dst = keep_str_pos;
   12fb0:	f107 0034 	add.w	r0, r7, #52	; 0x34
		scpy_cnt = 0;
   12fb4:	2600      	movs	r6, #0
   12fb6:	e7eb      	b.n	12f90 <cbprintf_package_convert+0x2a4>
   12fb8:	2500      	movs	r5, #0
		if (fmt_present && is_ptr(fmt, arg_idx)) {
   12fba:	6a3b      	ldr	r3, [r7, #32]
   12fbc:	bb33      	cbnz	r3, 1300c <cbprintf_package_convert+0x320>
		if (is_ro) {
   12fbe:	2d00      	cmp	r5, #0
   12fc0:	d03b      	beq.n	1303a <cbprintf_package_convert+0x34e>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
   12fc2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   12fc6:	f013 0f01 	tst.w	r3, #1
   12fca:	d026      	beq.n	1301a <cbprintf_package_convert+0x32e>
				cpy_str_pos[scpy_cnt++] = arg_pos;
   12fcc:	1c73      	adds	r3, r6, #1
   12fce:	f106 0230 	add.w	r2, r6, #48	; 0x30
   12fd2:	f107 0128 	add.w	r1, r7, #40	; 0x28
   12fd6:	1856      	adds	r6, r2, r1
   12fd8:	f806 9c14 	strb.w	r9, [r6, #-20]
   12fdc:	b2de      	uxtb	r6, r3
	for (int i = 0; i < rws_nbr; i++) {
   12fde:	f108 0801 	add.w	r8, r8, #1
		uint8_t arg_pos = *str_pos++;
   12fe2:	4625      	mov	r5, r4
	for (int i = 0; i < rws_nbr; i++) {
   12fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12fe6:	4598      	cmp	r8, r3
   12fe8:	d24a      	bcs.n	13080 <cbprintf_package_convert+0x394>
		uint8_t arg_idx = *str_pos++;
   12fea:	462c      	mov	r4, r5
   12fec:	f814 ab02 	ldrb.w	sl, [r4], #2
		uint8_t arg_pos = *str_pos++;
   12ff0:	f895 9001 	ldrb.w	r9, [r5, #1]
		const char *str = *(const char **)&buf32[arg_pos];
   12ff4:	f85b 3029 	ldr.w	r3, [fp, r9, lsl #2]
   12ff8:	4a53      	ldr	r2, [pc, #332]	; (13148 <cbprintf_package_convert+0x45c>)
   12ffa:	4293      	cmp	r3, r2
   12ffc:	d3dc      	bcc.n	12fb8 <cbprintf_package_convert+0x2cc>
   12ffe:	4a53      	ldr	r2, [pc, #332]	; (1314c <cbprintf_package_convert+0x460>)
   13000:	4293      	cmp	r3, r2
   13002:	d301      	bcc.n	13008 <cbprintf_package_convert+0x31c>
   13004:	2500      	movs	r5, #0
   13006:	e7d8      	b.n	12fba <cbprintf_package_convert+0x2ce>
   13008:	2501      	movs	r5, #1
   1300a:	e7d6      	b.n	12fba <cbprintf_package_convert+0x2ce>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
   1300c:	4651      	mov	r1, sl
   1300e:	6978      	ldr	r0, [r7, #20]
   13010:	f014 ff86 	bl	27f20 <is_ptr>
   13014:	2800      	cmp	r0, #0
   13016:	d0d2      	beq.n	12fbe <cbprintf_package_convert+0x2d2>
   13018:	e7e1      	b.n	12fde <cbprintf_package_convert+0x2f2>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   1301a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   1301e:	f013 0f04 	tst.w	r3, #4
   13022:	d0dc      	beq.n	12fde <cbprintf_package_convert+0x2f2>
				keep_str_pos[keep_cnt++] = arg_pos;
   13024:	69fa      	ldr	r2, [r7, #28]
   13026:	1c53      	adds	r3, r2, #1
   13028:	3230      	adds	r2, #48	; 0x30
   1302a:	f107 0128 	add.w	r1, r7, #40	; 0x28
   1302e:	440a      	add	r2, r1
   13030:	f802 9c24 	strb.w	r9, [r2, #-36]
   13034:	b2db      	uxtb	r3, r3
   13036:	61fb      	str	r3, [r7, #28]
   13038:	e7d1      	b.n	12fde <cbprintf_package_convert+0x2f2>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   1303a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   1303e:	f013 0f02 	tst.w	r3, #2
   13042:	d009      	beq.n	13058 <cbprintf_package_convert+0x36c>
				cpy_str_pos[scpy_cnt++] = arg_pos;
   13044:	1c73      	adds	r3, r6, #1
   13046:	f106 0230 	add.w	r2, r6, #48	; 0x30
   1304a:	f107 0128 	add.w	r1, r7, #40	; 0x28
   1304e:	1856      	adds	r6, r2, r1
   13050:	f806 9c14 	strb.w	r9, [r6, #-20]
   13054:	b2de      	uxtb	r6, r3
   13056:	e7c2      	b.n	12fde <cbprintf_package_convert+0x2f2>
				keep_str_pos[keep_cnt++] = arg_idx;
   13058:	69f8      	ldr	r0, [r7, #28]
   1305a:	1c43      	adds	r3, r0, #1
   1305c:	f100 0130 	add.w	r1, r0, #48	; 0x30
   13060:	f107 0228 	add.w	r2, r7, #40	; 0x28
   13064:	188a      	adds	r2, r1, r2
   13066:	f802 ac24 	strb.w	sl, [r2, #-36]
				keep_str_pos[keep_cnt++] = arg_pos;
   1306a:	4602      	mov	r2, r0
   1306c:	3202      	adds	r2, #2
   1306e:	b2d2      	uxtb	r2, r2
   13070:	61fa      	str	r2, [r7, #28]
   13072:	f107 0258 	add.w	r2, r7, #88	; 0x58
   13076:	fa52 f383 	uxtab	r3, r2, r3
   1307a:	f803 9c24 	strb.w	r9, [r3, #-36]
   1307e:	e7ae      	b.n	12fde <cbprintf_package_convert+0x2f2>
	out_desc.len = in_desc->len;
   13080:	f8d7 9004 	ldr.w	r9, [r7, #4]
   13084:	f89b 3000 	ldrb.w	r3, [fp]
   13088:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
   1308c:	f89b 3001 	ldrb.w	r3, [fp, #1]
   13090:	4433      	add	r3, r6
   13092:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
   13096:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   1309a:	f013 0f02 	tst.w	r3, #2
   1309e:	d10e      	bne.n	130be <cbprintf_package_convert+0x3d2>
   130a0:	69fb      	ldr	r3, [r7, #28]
   130a2:	f3c3 0347 	ubfx	r3, r3, #1, #8
   130a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   130aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   130ae:	f013 0f01 	tst.w	r3, #1
   130b2:	d106      	bne.n	130c2 <cbprintf_package_convert+0x3d6>
   130b4:	f013 0f04 	tst.w	r3, #4
   130b8:	d13f      	bne.n	1313a <cbprintf_package_convert+0x44e>
   130ba:	2300      	movs	r3, #0
   130bc:	e002      	b.n	130c4 <cbprintf_package_convert+0x3d8>
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
   130be:	2300      	movs	r3, #0
   130c0:	e7f1      	b.n	130a6 <cbprintf_package_convert+0x3ba>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   130c2:	2300      	movs	r3, #0
   130c4:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	struct cbprintf_package_desc in_desc_backup = *in_desc;
   130c8:	f8db 0000 	ldr.w	r0, [fp]
   130cc:	6338      	str	r0, [r7, #48]	; 0x30
	*in_desc = out_desc;
   130ce:	6d78      	ldr	r0, [r7, #84]	; 0x54
   130d0:	f8cb 0000 	str.w	r0, [fp]
	rv = cb(in_packaged, args_size, ctx);
   130d4:	f8d7 8010 	ldr.w	r8, [r7, #16]
   130d8:	4642      	mov	r2, r8
   130da:	68b9      	ldr	r1, [r7, #8]
   130dc:	4658      	mov	r0, fp
   130de:	f8d7 a018 	ldr.w	sl, [r7, #24]
   130e2:	47d0      	blx	sl
	if (rv < 0) {
   130e4:	1e04      	subs	r4, r0, #0
   130e6:	f6ff ae54 	blt.w	12d92 <cbprintf_package_convert+0xa6>
	*in_desc = in_desc_backup;
   130ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
   130ec:	f8cb 0000 	str.w	r0, [fp]
	rv = cb(keep_str_pos, keep_cnt, ctx);
   130f0:	f8c7 8010 	str.w	r8, [r7, #16]
   130f4:	4642      	mov	r2, r8
   130f6:	69f9      	ldr	r1, [r7, #28]
   130f8:	f107 0034 	add.w	r0, r7, #52	; 0x34
   130fc:	47d0      	blx	sl
	if (rv < 0) {
   130fe:	2800      	cmp	r0, #0
   13100:	db57      	blt.n	131b2 <cbprintf_package_convert+0x4c6>
	out_len += rv;
   13102:	eb04 0800 	add.w	r8, r4, r0
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
   13106:	68b9      	ldr	r1, [r7, #8]
   13108:	4449      	add	r1, r9
   1310a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1310c:	eb01 0143 	add.w	r1, r1, r3, lsl #1
	rv = cb(str_pos, strs_len, ctx);
   13110:	f8d7 9010 	ldr.w	r9, [r7, #16]
   13114:	464a      	mov	r2, r9
   13116:	68fb      	ldr	r3, [r7, #12]
   13118:	1a59      	subs	r1, r3, r1
   1311a:	4628      	mov	r0, r5
   1311c:	47d0      	blx	sl
	if (rv < 0) {
   1311e:	1e04      	subs	r4, r0, #0
   13120:	f6ff ae37 	blt.w	12d92 <cbprintf_package_convert+0xa6>
	out_len += rv;
   13124:	eb08 0504 	add.w	r5, r8, r4
	for (int i = 0; i < scpy_cnt; i++) {
   13128:	f04f 0800 	mov.w	r8, #0
   1312c:	627e      	str	r6, [r7, #36]	; 0x24
   1312e:	f8c7 b020 	str.w	fp, [r7, #32]
   13132:	4656      	mov	r6, sl
   13134:	f8d7 b084 	ldr.w	fp, [r7, #132]	; 0x84
   13138:	e01f      	b.n	1317a <cbprintf_package_convert+0x48e>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   1313a:	69fb      	ldr	r3, [r7, #28]
   1313c:	e7c2      	b.n	130c4 <cbprintf_package_convert+0x3d8>
   1313e:	bf00      	nop
   13140:	00031b70 	.word	0x00031b70
   13144:	00031478 	.word	0x00031478
   13148:	00031044 	.word	0x00031044
   1314c:	00034b6c 	.word	0x00034b6c
		uint16_t str_len = strl ? strl[i] : 0;
   13150:	f04f 0a00 	mov.w	sl, #0
		rv = cb(&loc, 1, ctx);
   13154:	464a      	mov	r2, r9
   13156:	2101      	movs	r1, #1
   13158:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   1315c:	47b0      	blx	r6
		if (rv < 0) {
   1315e:	2800      	cmp	r0, #0
   13160:	db29      	blt.n	131b6 <cbprintf_package_convert+0x4ca>
		out_len += rv;
   13162:	4405      	add	r5, r0
		rv = append_string(cb, ctx, str, str_len);
   13164:	4653      	mov	r3, sl
   13166:	4622      	mov	r2, r4
   13168:	4649      	mov	r1, r9
   1316a:	4630      	mov	r0, r6
   1316c:	f014 fe91 	bl	27e92 <append_string>
		if (rv < 0) {
   13170:	2800      	cmp	r0, #0
   13172:	db22      	blt.n	131ba <cbprintf_package_convert+0x4ce>
		out_len += rv;
   13174:	4405      	add	r5, r0
	for (int i = 0; i < scpy_cnt; i++) {
   13176:	f108 0801 	add.w	r8, r8, #1
   1317a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1317c:	4598      	cmp	r8, r3
   1317e:	da11      	bge.n	131a4 <cbprintf_package_convert+0x4b8>
		uint8_t loc = cpy_str_pos[i];
   13180:	f108 0330 	add.w	r3, r8, #48	; 0x30
   13184:	f107 0228 	add.w	r2, r7, #40	; 0x28
   13188:	4413      	add	r3, r2
   1318a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   1318e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		const char *str = *(const char **)&buf32[loc];
   13192:	6a3a      	ldr	r2, [r7, #32]
   13194:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
		uint16_t str_len = strl ? strl[i] : 0;
   13198:	f1bb 0f00 	cmp.w	fp, #0
   1319c:	d0d8      	beq.n	13150 <cbprintf_package_convert+0x464>
   1319e:	f83b a018 	ldrh.w	sl, [fp, r8, lsl #1]
   131a2:	e7d7      	b.n	13154 <cbprintf_package_convert+0x468>
	(void)cb(NULL, 0, ctx);
   131a4:	693a      	ldr	r2, [r7, #16]
   131a6:	2100      	movs	r1, #0
   131a8:	4608      	mov	r0, r1
   131aa:	69bb      	ldr	r3, [r7, #24]
   131ac:	4798      	blx	r3
	return out_len;
   131ae:	462c      	mov	r4, r5
   131b0:	e5ef      	b.n	12d92 <cbprintf_package_convert+0xa6>
		return rv;
   131b2:	4604      	mov	r4, r0
   131b4:	e5ed      	b.n	12d92 <cbprintf_package_convert+0xa6>
   131b6:	4604      	mov	r4, r0
   131b8:	e5eb      	b.n	12d92 <cbprintf_package_convert+0xa6>
   131ba:	4604      	mov	r4, r0
   131bc:	e5e9      	b.n	12d92 <cbprintf_package_convert+0xa6>
   131be:	bf00      	nop

000131c0 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
   131c0:	4b01      	ldr	r3, [pc, #4]	; (131c8 <__printk_hook_install+0x8>)
   131c2:	6018      	str	r0, [r3, #0]
}
   131c4:	4770      	bx	lr
   131c6:	bf00      	nop
   131c8:	20000674 	.word	0x20000674

000131cc <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   131cc:	b510      	push	{r4, lr}
   131ce:	b086      	sub	sp, #24
   131d0:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
   131d2:	9003      	str	r0, [sp, #12]
   131d4:	9104      	str	r1, [sp, #16]
   131d6:	2100      	movs	r1, #0
   131d8:	9105      	str	r1, [sp, #20]
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   131da:	9100      	str	r1, [sp, #0]
   131dc:	a903      	add	r1, sp, #12
   131de:	4806      	ldr	r0, [pc, #24]	; (131f8 <vsnprintk+0x2c>)
   131e0:	f000 f924 	bl	1342c <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
   131e4:	9b05      	ldr	r3, [sp, #20]
   131e6:	9a04      	ldr	r2, [sp, #16]
   131e8:	4293      	cmp	r3, r2
   131ea:	da01      	bge.n	131f0 <vsnprintk+0x24>
		str[ctx.count] = '\0';
   131ec:	2200      	movs	r2, #0
   131ee:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
   131f0:	9805      	ldr	r0, [sp, #20]
   131f2:	b006      	add	sp, #24
   131f4:	bd10      	pop	{r4, pc}
   131f6:	bf00      	nop
   131f8:	00027f73 	.word	0x00027f73

000131fc <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   131fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13200:	b083      	sub	sp, #12
   13202:	4604      	mov	r4, r0
   13204:	4608      	mov	r0, r1
   13206:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   13208:	8b23      	ldrh	r3, [r4, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   1320a:	f013 0f08 	tst.w	r3, #8
   1320e:	d105      	bne.n	1321c <process_event+0x20>
   13210:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   13214:	2300      	movs	r3, #0
   13216:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
   13218:	9301      	str	r3, [sp, #4]
}
   1321a:	e055      	b.n	132c8 <process_event+0xcc>
		if (evt == EVT_COMPLETE) {
   1321c:	2901      	cmp	r1, #1
   1321e:	d009      	beq.n	13234 <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   13220:	f043 0320 	orr.w	r3, r3, #32
   13224:	8323      	strh	r3, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   13226:	f385 8811 	msr	BASEPRI, r5
   1322a:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   1322e:	b003      	add	sp, #12
   13230:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   13234:	f043 0310 	orr.w	r3, r3, #16
   13238:	8323      	strh	r3, [r4, #24]
   1323a:	e7f4      	b.n	13226 <process_event+0x2a>
			evt = process_recheck(mgr);
   1323c:	4620      	mov	r0, r4
   1323e:	f015 f909 	bl	28454 <process_recheck>
   13242:	e043      	b.n	132cc <process_event+0xd0>
			res = mgr->last_res;
   13244:	f8d4 9014 	ldr.w	r9, [r4, #20]
			process_complete(mgr, &clients, res);
   13248:	464a      	mov	r2, r9
   1324a:	4669      	mov	r1, sp
   1324c:	4620      	mov	r0, r4
   1324e:	f015 f91a 	bl	28486 <process_complete>
		onoff_transition_fn transit = NULL;
   13252:	f04f 0800 	mov.w	r8, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   13256:	8b23      	ldrh	r3, [r4, #24]
   13258:	f003 0707 	and.w	r7, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   1325c:	42b7      	cmp	r7, r6
   1325e:	d069      	beq.n	13334 <process_event+0x138>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   13260:	68a2      	ldr	r2, [r4, #8]
   13262:	2a00      	cmp	r2, #0
   13264:	d066      	beq.n	13334 <process_event+0x138>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   13266:	2201      	movs	r2, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   13268:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
   1326c:	8323      	strh	r3, [r4, #24]
   1326e:	f385 8811 	msr	BASEPRI, r5
   13272:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   13276:	2a00      	cmp	r2, #0
   13278:	d164      	bne.n	13344 <process_event+0x148>
   1327a:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
   1327c:	b12b      	cbz	r3, 1328a <process_event+0x8e>
				notify_all(mgr, &clients, state, res);
   1327e:	464b      	mov	r3, r9
   13280:	463a      	mov	r2, r7
   13282:	4669      	mov	r1, sp
   13284:	4620      	mov	r0, r4
   13286:	f015 f977 	bl	28578 <notify_all>
			if (transit != NULL) {
   1328a:	f1b8 0f00 	cmp.w	r8, #0
   1328e:	d002      	beq.n	13296 <process_event+0x9a>
				transit(mgr, transition_complete);
   13290:	4934      	ldr	r1, [pc, #208]	; (13364 <process_event+0x168>)
   13292:	4620      	mov	r0, r4
   13294:	47c0      	blx	r8
	__asm__ volatile(
   13296:	f04f 0340 	mov.w	r3, #64	; 0x40
   1329a:	f3ef 8511 	mrs	r5, BASEPRI
   1329e:	f383 8812 	msr	BASEPRI_MAX, r3
   132a2:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   132a6:	8b23      	ldrh	r3, [r4, #24]
   132a8:	f023 0308 	bic.w	r3, r3, #8
   132ac:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   132ae:	8b23      	ldrh	r3, [r4, #24]
   132b0:	f013 0f10 	tst.w	r3, #16
   132b4:	d04c      	beq.n	13350 <process_event+0x154>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   132b6:	f023 0310 	bic.w	r3, r3, #16
   132ba:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
   132bc:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
   132be:	8b26      	ldrh	r6, [r4, #24]
   132c0:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
   132c4:	2800      	cmp	r0, #0
   132c6:	d0ae      	beq.n	13226 <process_event+0x2a>
		if (evt == EVT_RECHECK) {
   132c8:	2802      	cmp	r0, #2
   132ca:	d0b7      	beq.n	1323c <process_event+0x40>
		if (evt == EVT_NOP) {
   132cc:	2800      	cmp	r0, #0
   132ce:	d0aa      	beq.n	13226 <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
   132d0:	3801      	subs	r0, #1
   132d2:	2804      	cmp	r0, #4
   132d4:	d82a      	bhi.n	1332c <process_event+0x130>
   132d6:	a301      	add	r3, pc, #4	; (adr r3, 132dc <process_event+0xe0>)
   132d8:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
   132dc:	00013245 	.word	0x00013245
   132e0:	0001332d 	.word	0x0001332d
   132e4:	000132f1 	.word	0x000132f1
   132e8:	00013305 	.word	0x00013305
   132ec:	00013319 	.word	0x00013319
			transit = mgr->transitions->start;
   132f0:	6923      	ldr	r3, [r4, #16]
   132f2:	f8d3 8000 	ldr.w	r8, [r3]
			set_state(mgr, ONOFF_STATE_TO_ON);
   132f6:	2106      	movs	r1, #6
   132f8:	4620      	mov	r0, r4
   132fa:	f015 f881 	bl	28400 <set_state>
		res = 0;
   132fe:	f04f 0900 	mov.w	r9, #0
   13302:	e7a8      	b.n	13256 <process_event+0x5a>
			transit = mgr->transitions->stop;
   13304:	6923      	ldr	r3, [r4, #16]
   13306:	f8d3 8004 	ldr.w	r8, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
   1330a:	2104      	movs	r1, #4
   1330c:	4620      	mov	r0, r4
   1330e:	f015 f877 	bl	28400 <set_state>
		res = 0;
   13312:	f04f 0900 	mov.w	r9, #0
   13316:	e79e      	b.n	13256 <process_event+0x5a>
			transit = mgr->transitions->reset;
   13318:	6923      	ldr	r3, [r4, #16]
   1331a:	f8d3 8008 	ldr.w	r8, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
   1331e:	2105      	movs	r1, #5
   13320:	4620      	mov	r0, r4
   13322:	f015 f86d 	bl	28400 <set_state>
		res = 0;
   13326:	f04f 0900 	mov.w	r9, #0
   1332a:	e794      	b.n	13256 <process_event+0x5a>
		if (evt == EVT_NOP) {
   1332c:	f04f 0800 	mov.w	r8, #0
   13330:	46c1      	mov	r9, r8
   13332:	e790      	b.n	13256 <process_event+0x5a>
   13334:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
   13336:	b10a      	cbz	r2, 1333c <process_event+0x140>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   13338:	2200      	movs	r2, #0
   1333a:	e795      	b.n	13268 <process_event+0x6c>
		    || (transit != NULL)) {
   1333c:	f1b8 0f00 	cmp.w	r8, #0
   13340:	d192      	bne.n	13268 <process_event+0x6c>
   13342:	e7b4      	b.n	132ae <process_event+0xb2>
				notify_monitors(mgr, state, res);
   13344:	464a      	mov	r2, r9
   13346:	4639      	mov	r1, r7
   13348:	4620      	mov	r0, r4
   1334a:	f015 f861 	bl	28410 <notify_monitors>
   1334e:	e794      	b.n	1327a <process_event+0x7e>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   13350:	f013 0f20 	tst.w	r3, #32
   13354:	d004      	beq.n	13360 <process_event+0x164>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   13356:	f023 0320 	bic.w	r3, r3, #32
   1335a:	8323      	strh	r3, [r4, #24]
			evt = EVT_RECHECK;
   1335c:	2002      	movs	r0, #2
   1335e:	e7ae      	b.n	132be <process_event+0xc2>
		evt = EVT_NOP;
   13360:	2000      	movs	r0, #0
   13362:	e7ac      	b.n	132be <process_event+0xc2>
   13364:	000285a7 	.word	0x000285a7

00013368 <extract_flags>:
 *
 * @return a pointer the first character that follows the flags.
 */
static inline const char *extract_flags(struct conversion *conv,
					const char *sp)
{
   13368:	4684      	mov	ip, r0
   1336a:	4608      	mov	r0, r1
	bool loop = true;
   1336c:	2201      	movs	r2, #1
   1336e:	e026      	b.n	133be <extract_flags+0x56>

	do {
		switch (*sp) {
		case '-':
			conv->flag_dash = true;
   13370:	f89c 3000 	ldrb.w	r3, [ip]
   13374:	f043 0304 	orr.w	r3, r3, #4
   13378:	f88c 3000 	strb.w	r3, [ip]
			conv->flag_zero = true;
			break;
		default:
			loop = false;
		}
		if (loop) {
   1337c:	b1f2      	cbz	r2, 133bc <extract_flags+0x54>
			++sp;
   1337e:	3001      	adds	r0, #1
   13380:	e01c      	b.n	133bc <extract_flags+0x54>
			conv->flag_plus = true;
   13382:	f89c 3000 	ldrb.w	r3, [ip]
   13386:	f043 0308 	orr.w	r3, r3, #8
   1338a:	f88c 3000 	strb.w	r3, [ip]
			break;
   1338e:	e7f5      	b.n	1337c <extract_flags+0x14>
			conv->flag_space = true;
   13390:	f89c 3000 	ldrb.w	r3, [ip]
   13394:	f043 0310 	orr.w	r3, r3, #16
   13398:	f88c 3000 	strb.w	r3, [ip]
			break;
   1339c:	e7ee      	b.n	1337c <extract_flags+0x14>
			conv->flag_hash = true;
   1339e:	f89c 3000 	ldrb.w	r3, [ip]
   133a2:	f043 0320 	orr.w	r3, r3, #32
   133a6:	f88c 3000 	strb.w	r3, [ip]
			break;
   133aa:	e7e7      	b.n	1337c <extract_flags+0x14>
			conv->flag_zero = true;
   133ac:	f89c 3000 	ldrb.w	r3, [ip]
   133b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   133b4:	f88c 3000 	strb.w	r3, [ip]
			break;
   133b8:	e7e0      	b.n	1337c <extract_flags+0x14>
		switch (*sp) {
   133ba:	2200      	movs	r2, #0
		}
	} while (loop);
   133bc:	b342      	cbz	r2, 13410 <extract_flags+0xa8>
		switch (*sp) {
   133be:	7803      	ldrb	r3, [r0, #0]
   133c0:	3b20      	subs	r3, #32
   133c2:	2b10      	cmp	r3, #16
   133c4:	d8f9      	bhi.n	133ba <extract_flags+0x52>
   133c6:	a101      	add	r1, pc, #4	; (adr r1, 133cc <extract_flags+0x64>)
   133c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   133cc:	00013391 	.word	0x00013391
   133d0:	000133bb 	.word	0x000133bb
   133d4:	000133bb 	.word	0x000133bb
   133d8:	0001339f 	.word	0x0001339f
   133dc:	000133bb 	.word	0x000133bb
   133e0:	000133bb 	.word	0x000133bb
   133e4:	000133bb 	.word	0x000133bb
   133e8:	000133bb 	.word	0x000133bb
   133ec:	000133bb 	.word	0x000133bb
   133f0:	000133bb 	.word	0x000133bb
   133f4:	000133bb 	.word	0x000133bb
   133f8:	00013383 	.word	0x00013383
   133fc:	000133bb 	.word	0x000133bb
   13400:	00013371 	.word	0x00013371
   13404:	000133bb 	.word	0x000133bb
   13408:	000133bb 	.word	0x000133bb
   1340c:	000133ad 	.word	0x000133ad

	/* zero && dash => !zero */
	if (conv->flag_zero && conv->flag_dash) {
   13410:	f89c 3000 	ldrb.w	r3, [ip]
   13414:	f003 0344 	and.w	r3, r3, #68	; 0x44
   13418:	2b44      	cmp	r3, #68	; 0x44
   1341a:	d000      	beq.n	1341e <extract_flags+0xb6>
	}

	/* space && plus => !plus, handled in emitter code */

	return sp;
}
   1341c:	4770      	bx	lr
		conv->flag_zero = false;
   1341e:	f89c 3000 	ldrb.w	r3, [ip]
   13422:	f36f 1386 	bfc	r3, #6, #1
   13426:	f88c 3000 	strb.w	r3, [ip]
   1342a:	e7f7      	b.n	1341c <extract_flags+0xb4>

0001342c <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
   1342c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13430:	b091      	sub	sp, #68	; 0x44
   13432:	4606      	mov	r6, r0
   13434:	460d      	mov	r5, r1
   13436:	4691      	mov	r9, r2
   13438:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   1343a:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   1343c:	f899 0000 	ldrb.w	r0, [r9]
   13440:	2800      	cmp	r0, #0
   13442:	f000 82b9 	beq.w	139b8 <z_cbvprintf_impl+0x58c>
		if (*fp != '%') {
   13446:	2825      	cmp	r0, #37	; 0x25
   13448:	d008      	beq.n	1345c <z_cbvprintf_impl+0x30>
			OUTC(*fp++);
   1344a:	f109 0901 	add.w	r9, r9, #1
   1344e:	4629      	mov	r1, r5
   13450:	47b0      	blx	r6
   13452:	2800      	cmp	r0, #0
   13454:	f2c0 82b1 	blt.w	139ba <z_cbvprintf_impl+0x58e>
   13458:	3401      	adds	r4, #1
			continue;
   1345a:	e7ef      	b.n	1343c <z_cbvprintf_impl+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
   1345c:	2300      	movs	r3, #0
   1345e:	9304      	str	r3, [sp, #16]
   13460:	9305      	str	r3, [sp, #20]
   13462:	9306      	str	r3, [sp, #24]
   13464:	9307      	str	r3, [sp, #28]
   13466:	9308      	str	r3, [sp, #32]
   13468:	9309      	str	r3, [sp, #36]	; 0x24
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
		char sign = 0;

		fp = extract_conversion(conv, sp);
   1346a:	4649      	mov	r1, r9
   1346c:	a806      	add	r0, sp, #24
   1346e:	f015 faf3 	bl	28a58 <extract_conversion>
   13472:	9002      	str	r0, [sp, #8]

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
   13474:	f89d 3019 	ldrb.w	r3, [sp, #25]
   13478:	f013 0f01 	tst.w	r3, #1
   1347c:	f000 8097 	beq.w	135ae <z_cbvprintf_impl+0x182>
			width = va_arg(ap, int);
   13480:	9b03      	ldr	r3, [sp, #12]
   13482:	1d1a      	adds	r2, r3, #4
   13484:	9203      	str	r2, [sp, #12]
   13486:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
   13488:	2f00      	cmp	r7, #0
   1348a:	f2c0 8088 	blt.w	1359e <z_cbvprintf_impl+0x172>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
   1348e:	f89d 3019 	ldrb.w	r3, [sp, #25]
   13492:	f013 0f04 	tst.w	r3, #4
   13496:	f000 809c 	beq.w	135d2 <z_cbvprintf_impl+0x1a6>
			int arg = va_arg(ap, int);
   1349a:	9b03      	ldr	r3, [sp, #12]
   1349c:	1d1a      	adds	r2, r3, #4
   1349e:	9203      	str	r2, [sp, #12]
   134a0:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
   134a4:	f1ba 0f00 	cmp.w	sl, #0
   134a8:	f2c0 808a 	blt.w	135c0 <z_cbvprintf_impl+0x194>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
   134ac:	2300      	movs	r3, #0
   134ae:	9307      	str	r3, [sp, #28]
		conv->pad0_pre_exp = 0;
   134b0:	9308      	str	r3, [sp, #32]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
   134b2:	f89d 301a 	ldrb.w	r3, [sp, #26]
   134b6:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
   134ba:	f89d 1019 	ldrb.w	r1, [sp, #25]
   134be:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
   134c2:	2b01      	cmp	r3, #1
   134c4:	f000 808e 	beq.w	135e4 <z_cbvprintf_impl+0x1b8>
			if (length_mod == LENGTH_HH) {
				value->sint = (signed char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
   134c8:	2b02      	cmp	r3, #2
   134ca:	f000 80d3 	beq.w	13674 <z_cbvprintf_impl+0x248>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
   134ce:	2b04      	cmp	r3, #4
   134d0:	f000 8124 	beq.w	1371c <z_cbvprintf_impl+0x2f0>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
   134d4:	2b03      	cmp	r3, #3
   134d6:	f000 813b 	beq.w	13750 <z_cbvprintf_impl+0x324>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
   134da:	f89d 8018 	ldrb.w	r8, [sp, #24]
   134de:	f018 0b03 	ands.w	fp, r8, #3
   134e2:	f040 813b 	bne.w	1375c <z_cbvprintf_impl+0x330>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
   134e6:	f89d 301b 	ldrb.w	r3, [sp, #27]
   134ea:	3b25      	subs	r3, #37	; 0x25
   134ec:	2b53      	cmp	r3, #83	; 0x53
   134ee:	f200 81ca 	bhi.w	13886 <z_cbvprintf_impl+0x45a>
   134f2:	e8df f013 	tbh	[pc, r3, lsl #1]
   134f6:	0140      	.short	0x0140
   134f8:	01c801c8 	.word	0x01c801c8
   134fc:	01c801c8 	.word	0x01c801c8
   13500:	01c801c8 	.word	0x01c801c8
   13504:	01c801c8 	.word	0x01c801c8
   13508:	01c801c8 	.word	0x01c801c8
   1350c:	01c801c8 	.word	0x01c801c8
   13510:	01c801c8 	.word	0x01c801c8
   13514:	01c801c8 	.word	0x01c801c8
   13518:	01c801c8 	.word	0x01c801c8
   1351c:	01c801c8 	.word	0x01c801c8
   13520:	01c801c8 	.word	0x01c801c8
   13524:	01c801c8 	.word	0x01c801c8
   13528:	01c801c8 	.word	0x01c801c8
   1352c:	01c801c8 	.word	0x01c801c8
   13530:	01c801c8 	.word	0x01c801c8
   13534:	01c801c8 	.word	0x01c801c8
   13538:	01c801c8 	.word	0x01c801c8
   1353c:	01c801c8 	.word	0x01c801c8
   13540:	01c801c8 	.word	0x01c801c8
   13544:	01c801c8 	.word	0x01c801c8
   13548:	01c801c8 	.word	0x01c801c8
   1354c:	01c801c8 	.word	0x01c801c8
   13550:	01c801c8 	.word	0x01c801c8
   13554:	01c801c8 	.word	0x01c801c8
   13558:	01c801c8 	.word	0x01c801c8
   1355c:	01c80181 	.word	0x01c80181
   13560:	01c801c8 	.word	0x01c801c8
   13564:	01c801c8 	.word	0x01c801c8
   13568:	01c801c8 	.word	0x01c801c8
   1356c:	01c801c8 	.word	0x01c801c8
   13570:	015e01c8 	.word	0x015e01c8
   13574:	01c80167 	.word	0x01c80167
   13578:	01c801c8 	.word	0x01c801c8
   1357c:	016701c8 	.word	0x016701c8
   13580:	01c801c8 	.word	0x01c801c8
   13584:	01c801c8 	.word	0x01c801c8
   13588:	018101bd 	.word	0x018101bd
   1358c:	01c801a1 	.word	0x01c801a1
   13590:	014d01c8 	.word	0x014d01c8
   13594:	018101c8 	.word	0x018101c8
   13598:	01c801c8 	.word	0x01c801c8
   1359c:	0181      	.short	0x0181
				conv->flag_dash = true;
   1359e:	f89d 3018 	ldrb.w	r3, [sp, #24]
   135a2:	f043 0304 	orr.w	r3, r3, #4
   135a6:	f88d 3018 	strb.w	r3, [sp, #24]
				width = -width;
   135aa:	427f      	negs	r7, r7
   135ac:	e76f      	b.n	1348e <z_cbvprintf_impl+0x62>
		} else if (conv->width_present) {
   135ae:	f99d 3018 	ldrsb.w	r3, [sp, #24]
   135b2:	2b00      	cmp	r3, #0
   135b4:	db02      	blt.n	135bc <z_cbvprintf_impl+0x190>
		int width = -1;
   135b6:	f04f 37ff 	mov.w	r7, #4294967295
   135ba:	e768      	b.n	1348e <z_cbvprintf_impl+0x62>
			width = conv->width_value;
   135bc:	9f07      	ldr	r7, [sp, #28]
   135be:	e766      	b.n	1348e <z_cbvprintf_impl+0x62>
				conv->prec_present = false;
   135c0:	f89d 3019 	ldrb.w	r3, [sp, #25]
   135c4:	f36f 0341 	bfc	r3, #1, #1
   135c8:	f88d 3019 	strb.w	r3, [sp, #25]
		int precision = -1;
   135cc:	f04f 3aff 	mov.w	sl, #4294967295
   135d0:	e76c      	b.n	134ac <z_cbvprintf_impl+0x80>
		} else if (conv->prec_present) {
   135d2:	f013 0f02 	tst.w	r3, #2
   135d6:	d002      	beq.n	135de <z_cbvprintf_impl+0x1b2>
			precision = conv->prec_value;
   135d8:	f8dd a020 	ldr.w	sl, [sp, #32]
   135dc:	e766      	b.n	134ac <z_cbvprintf_impl+0x80>
		int precision = -1;
   135de:	f04f 3aff 	mov.w	sl, #4294967295
   135e2:	e763      	b.n	134ac <z_cbvprintf_impl+0x80>
			switch (length_mod) {
   135e4:	1ecb      	subs	r3, r1, #3
   135e6:	2b04      	cmp	r3, #4
   135e8:	d804      	bhi.n	135f4 <z_cbvprintf_impl+0x1c8>
   135ea:	e8df f003 	tbb	[pc, r3]
   135ee:	1d0b      	.short	0x1d0b
   135f0:	3529      	.short	0x3529
   135f2:	35          	.byte	0x35
   135f3:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
   135f4:	9b03      	ldr	r3, [sp, #12]
   135f6:	1d1a      	adds	r2, r3, #4
   135f8:	9203      	str	r2, [sp, #12]
   135fa:	681b      	ldr	r3, [r3, #0]
   135fc:	17da      	asrs	r2, r3, #31
   135fe:	9304      	str	r3, [sp, #16]
   13600:	9205      	str	r2, [sp, #20]
				break;
   13602:	e006      	b.n	13612 <z_cbvprintf_impl+0x1e6>
					value->sint = va_arg(ap, long);
   13604:	9b03      	ldr	r3, [sp, #12]
   13606:	1d1a      	adds	r2, r3, #4
   13608:	9203      	str	r2, [sp, #12]
   1360a:	681b      	ldr	r3, [r3, #0]
   1360c:	17da      	asrs	r2, r3, #31
   1360e:	9304      	str	r3, [sp, #16]
   13610:	9205      	str	r2, [sp, #20]
			if (length_mod == LENGTH_HH) {
   13612:	2901      	cmp	r1, #1
   13614:	d028      	beq.n	13668 <z_cbvprintf_impl+0x23c>
			} else if (length_mod == LENGTH_H) {
   13616:	2902      	cmp	r1, #2
   13618:	f47f af5f 	bne.w	134da <z_cbvprintf_impl+0xae>
				value->sint = (short)value->sint;
   1361c:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
   13620:	17da      	asrs	r2, r3, #31
   13622:	9304      	str	r3, [sp, #16]
   13624:	9205      	str	r2, [sp, #20]
   13626:	e758      	b.n	134da <z_cbvprintf_impl+0xae>
					(sint_value_type)va_arg(ap, long long);
   13628:	9b03      	ldr	r3, [sp, #12]
   1362a:	3307      	adds	r3, #7
   1362c:	f023 0307 	bic.w	r3, r3, #7
   13630:	f103 0208 	add.w	r2, r3, #8
   13634:	9203      	str	r2, [sp, #12]
   13636:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
   1363a:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
   1363e:	e7e8      	b.n	13612 <z_cbvprintf_impl+0x1e6>
					(sint_value_type)va_arg(ap, intmax_t);
   13640:	9b03      	ldr	r3, [sp, #12]
   13642:	3307      	adds	r3, #7
   13644:	f023 0307 	bic.w	r3, r3, #7
   13648:	f103 0208 	add.w	r2, r3, #8
   1364c:	9203      	str	r2, [sp, #12]
   1364e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
   13652:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
   13656:	e7dc      	b.n	13612 <z_cbvprintf_impl+0x1e6>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   13658:	9b03      	ldr	r3, [sp, #12]
   1365a:	1d1a      	adds	r2, r3, #4
   1365c:	9203      	str	r2, [sp, #12]
   1365e:	681b      	ldr	r3, [r3, #0]
   13660:	17da      	asrs	r2, r3, #31
				value->sint =
   13662:	9304      	str	r3, [sp, #16]
   13664:	9205      	str	r2, [sp, #20]
				break;
   13666:	e7d4      	b.n	13612 <z_cbvprintf_impl+0x1e6>
				value->sint = (signed char)value->sint;
   13668:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   1366c:	17da      	asrs	r2, r3, #31
   1366e:	9304      	str	r3, [sp, #16]
   13670:	9205      	str	r2, [sp, #20]
   13672:	e732      	b.n	134da <z_cbvprintf_impl+0xae>
			switch (length_mod) {
   13674:	1ecb      	subs	r3, r1, #3
   13676:	2b04      	cmp	r3, #4
   13678:	d804      	bhi.n	13684 <z_cbvprintf_impl+0x258>
   1367a:	e8df f003 	tbb	[pc, r3]
   1367e:	1f0b      	.short	0x1f0b
   13680:	4135      	.short	0x4135
   13682:	41          	.byte	0x41
   13683:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
   13684:	9b03      	ldr	r3, [sp, #12]
   13686:	1d1a      	adds	r2, r3, #4
   13688:	9203      	str	r2, [sp, #12]
   1368a:	681b      	ldr	r3, [r3, #0]
   1368c:	9304      	str	r3, [sp, #16]
   1368e:	2300      	movs	r3, #0
   13690:	9305      	str	r3, [sp, #20]
				break;
   13692:	e01e      	b.n	136d2 <z_cbvprintf_impl+0x2a6>
				    && (conv->specifier == 'c')) {
   13694:	f89d 301b 	ldrb.w	r3, [sp, #27]
				if ((!WCHAR_IS_SIGNED)
   13698:	2b63      	cmp	r3, #99	; 0x63
   1369a:	d007      	beq.n	136ac <z_cbvprintf_impl+0x280>
					value->uint = va_arg(ap, unsigned long);
   1369c:	9b03      	ldr	r3, [sp, #12]
   1369e:	1d1a      	adds	r2, r3, #4
   136a0:	9203      	str	r2, [sp, #12]
   136a2:	681b      	ldr	r3, [r3, #0]
   136a4:	9304      	str	r3, [sp, #16]
   136a6:	2300      	movs	r3, #0
   136a8:	9305      	str	r3, [sp, #20]
   136aa:	e012      	b.n	136d2 <z_cbvprintf_impl+0x2a6>
					value->uint = (wchar_t)va_arg(ap,
   136ac:	9b03      	ldr	r3, [sp, #12]
   136ae:	1d1a      	adds	r2, r3, #4
   136b0:	9203      	str	r2, [sp, #12]
   136b2:	681b      	ldr	r3, [r3, #0]
   136b4:	9304      	str	r3, [sp, #16]
   136b6:	2300      	movs	r3, #0
   136b8:	9305      	str	r3, [sp, #20]
   136ba:	e00a      	b.n	136d2 <z_cbvprintf_impl+0x2a6>
					(uint_value_type)va_arg(ap,
   136bc:	9b03      	ldr	r3, [sp, #12]
   136be:	3307      	adds	r3, #7
   136c0:	f023 0307 	bic.w	r3, r3, #7
   136c4:	f103 0208 	add.w	r2, r3, #8
   136c8:	9203      	str	r2, [sp, #12]
   136ca:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
   136ce:	e9cd 2304 	strd	r2, r3, [sp, #16]
			if (length_mod == LENGTH_HH) {
   136d2:	2901      	cmp	r1, #1
   136d4:	d01c      	beq.n	13710 <z_cbvprintf_impl+0x2e4>
			} else if (length_mod == LENGTH_H) {
   136d6:	2902      	cmp	r1, #2
   136d8:	f47f aeff 	bne.w	134da <z_cbvprintf_impl+0xae>
				value->uint = (unsigned short)value->uint;
   136dc:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   136e0:	9304      	str	r3, [sp, #16]
   136e2:	2300      	movs	r3, #0
   136e4:	9305      	str	r3, [sp, #20]
   136e6:	e6f8      	b.n	134da <z_cbvprintf_impl+0xae>
					(uint_value_type)va_arg(ap,
   136e8:	9b03      	ldr	r3, [sp, #12]
   136ea:	3307      	adds	r3, #7
   136ec:	f023 0307 	bic.w	r3, r3, #7
   136f0:	f103 0208 	add.w	r2, r3, #8
   136f4:	9203      	str	r2, [sp, #12]
   136f6:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
   136fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
   136fe:	e7e8      	b.n	136d2 <z_cbvprintf_impl+0x2a6>
					(uint_value_type)va_arg(ap, size_t);
   13700:	9b03      	ldr	r3, [sp, #12]
   13702:	1d1a      	adds	r2, r3, #4
   13704:	9203      	str	r2, [sp, #12]
   13706:	681b      	ldr	r3, [r3, #0]
				value->uint =
   13708:	9304      	str	r3, [sp, #16]
   1370a:	2300      	movs	r3, #0
   1370c:	9305      	str	r3, [sp, #20]
				break;
   1370e:	e7e0      	b.n	136d2 <z_cbvprintf_impl+0x2a6>
				value->uint = (unsigned char)value->uint;
   13710:	f89d 3010 	ldrb.w	r3, [sp, #16]
   13714:	9304      	str	r3, [sp, #16]
   13716:	2300      	movs	r3, #0
   13718:	9305      	str	r3, [sp, #20]
   1371a:	e6de      	b.n	134da <z_cbvprintf_impl+0xae>
			if (length_mod == LENGTH_UPPER_L) {
   1371c:	2908      	cmp	r1, #8
   1371e:	d00b      	beq.n	13738 <z_cbvprintf_impl+0x30c>
				value->dbl = va_arg(ap, double);
   13720:	9b03      	ldr	r3, [sp, #12]
   13722:	3307      	adds	r3, #7
   13724:	f023 0307 	bic.w	r3, r3, #7
   13728:	f103 0208 	add.w	r2, r3, #8
   1372c:	9203      	str	r2, [sp, #12]
   1372e:	e9d3 2300 	ldrd	r2, r3, [r3]
   13732:	e9cd 2304 	strd	r2, r3, [sp, #16]
   13736:	e6d0      	b.n	134da <z_cbvprintf_impl+0xae>
				value->ldbl = va_arg(ap, long double);
   13738:	9b03      	ldr	r3, [sp, #12]
   1373a:	3307      	adds	r3, #7
   1373c:	f023 0307 	bic.w	r3, r3, #7
   13740:	f103 0208 	add.w	r2, r3, #8
   13744:	9203      	str	r2, [sp, #12]
   13746:	e9d3 2300 	ldrd	r2, r3, [r3]
   1374a:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1374e:	e6c4      	b.n	134da <z_cbvprintf_impl+0xae>
			value->ptr = va_arg(ap, void *);
   13750:	9b03      	ldr	r3, [sp, #12]
   13752:	1d1a      	adds	r2, r3, #4
   13754:	9203      	str	r2, [sp, #12]
   13756:	681b      	ldr	r3, [r3, #0]
   13758:	9304      	str	r3, [sp, #16]
   1375a:	e6be      	b.n	134da <z_cbvprintf_impl+0xae>
			OUTS(sp, fp);
   1375c:	9f02      	ldr	r7, [sp, #8]
   1375e:	463b      	mov	r3, r7
   13760:	464a      	mov	r2, r9
   13762:	4629      	mov	r1, r5
   13764:	4630      	mov	r0, r6
   13766:	f015 fa1d 	bl	28ba4 <outs>
   1376a:	2800      	cmp	r0, #0
   1376c:	f2c0 8125 	blt.w	139ba <z_cbvprintf_impl+0x58e>
   13770:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
   13772:	46b9      	mov	r9, r7
			continue;
   13774:	e662      	b.n	1343c <z_cbvprintf_impl+0x10>
		case '%':
			OUTC('%');
   13776:	4629      	mov	r1, r5
   13778:	2025      	movs	r0, #37	; 0x25
   1377a:	47b0      	blx	r6
   1377c:	2800      	cmp	r0, #0
   1377e:	f2c0 811c 	blt.w	139ba <z_cbvprintf_impl+0x58e>
   13782:	3401      	adds	r4, #1
		char sign = 0;
   13784:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
   13786:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
   1378a:	f04f 0900 	mov.w	r9, #0
			break;
   1378e:	e07f      	b.n	13890 <z_cbvprintf_impl+0x464>
		case 's': {
			bps = (const char *)value->ptr;
   13790:	f8dd 9010 	ldr.w	r9, [sp, #16]

			size_t len;

			if (precision >= 0) {
   13794:	f1ba 0f00 	cmp.w	sl, #0
   13798:	db07      	blt.n	137aa <z_cbvprintf_impl+0x37e>
				len = strnlen(bps, precision);
   1379a:	4651      	mov	r1, sl
   1379c:	4648      	mov	r0, r9
   1379e:	f016 f9c3 	bl	29b28 <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
   137a2:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
   137a6:	46d8      	mov	r8, fp
			precision = -1;

			break;
   137a8:	e072      	b.n	13890 <z_cbvprintf_impl+0x464>
				len = strlen(bps);
   137aa:	4648      	mov	r0, r9
   137ac:	f016 f9b3 	bl	29b16 <strlen>
   137b0:	e7f7      	b.n	137a2 <z_cbvprintf_impl+0x376>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   137b2:	9b04      	ldr	r3, [sp, #16]
   137b4:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
   137b8:	46d8      	mov	r8, fp
			bpe = buf + 1;
   137ba:	f10d 0a29 	add.w	sl, sp, #41	; 0x29
			bps = buf;
   137be:	f10d 0928 	add.w	r9, sp, #40	; 0x28
			break;
   137c2:	e065      	b.n	13890 <z_cbvprintf_impl+0x464>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
   137c4:	f018 0f08 	tst.w	r8, #8
   137c8:	d105      	bne.n	137d6 <z_cbvprintf_impl+0x3aa>
				sign = '+';
			} else if (conv->flag_space) {
   137ca:	f018 0810 	ands.w	r8, r8, #16
   137ce:	d004      	beq.n	137da <z_cbvprintf_impl+0x3ae>
				sign = ' ';
   137d0:	f04f 0820 	mov.w	r8, #32
   137d4:	e001      	b.n	137da <z_cbvprintf_impl+0x3ae>
				sign = '+';
   137d6:	f04f 082b 	mov.w	r8, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
   137da:	9a04      	ldr	r2, [sp, #16]
   137dc:	9b05      	ldr	r3, [sp, #20]
			if (sint < 0) {
   137de:	2b00      	cmp	r3, #0
   137e0:	db02      	blt.n	137e8 <z_cbvprintf_impl+0x3bc>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
   137e2:	9204      	str	r2, [sp, #16]
   137e4:	9305      	str	r3, [sp, #20]
   137e6:	e008      	b.n	137fa <z_cbvprintf_impl+0x3ce>
				value->uint = (uint_value_type)-sint;
   137e8:	4252      	negs	r2, r2
   137ea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   137ee:	9204      	str	r2, [sp, #16]
   137f0:	9305      	str	r3, [sp, #20]
				sign = '-';
   137f2:	f04f 082d 	mov.w	r8, #45	; 0x2d
   137f6:	e000      	b.n	137fa <z_cbvprintf_impl+0x3ce>
		switch (conv->specifier) {
   137f8:	46d8      	mov	r8, fp
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
   137fa:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   137fe:	9300      	str	r3, [sp, #0]
   13800:	ab0a      	add	r3, sp, #40	; 0x28
   13802:	aa06      	add	r2, sp, #24
   13804:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   13808:	f015 f95d 	bl	28ac6 <encode_uint>
   1380c:	4681      	mov	r9, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
   1380e:	f1ba 0f00 	cmp.w	sl, #0
   13812:	db6c      	blt.n	138ee <z_cbvprintf_impl+0x4c2>
				size_t len = bpe - bps;
   13814:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   13818:	eba3 0309 	sub.w	r3, r3, r9

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
   1381c:	f89d 2018 	ldrb.w	r2, [sp, #24]
   13820:	f36f 1286 	bfc	r2, #6, #1
   13824:	f88d 2018 	strb.w	r2, [sp, #24]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
   13828:	459a      	cmp	sl, r3
   1382a:	d963      	bls.n	138f4 <z_cbvprintf_impl+0x4c8>
					conv->pad0_value = precision - (int)len;
   1382c:	ebaa 0303 	sub.w	r3, sl, r3
   13830:	9307      	str	r3, [sp, #28]
		const char *bpe = buf + sizeof(buf);
   13832:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
   13836:	e02b      	b.n	13890 <z_cbvprintf_impl+0x464>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
   13838:	9804      	ldr	r0, [sp, #16]
   1383a:	b928      	cbnz	r0, 13848 <z_cbvprintf_impl+0x41c>
		char sign = 0;
   1383c:	46d8      	mov	r8, fp

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
   1383e:	f8df a180 	ldr.w	sl, [pc, #384]	; 139c0 <z_cbvprintf_impl+0x594>
			bps = "(nil)";
   13842:	f1aa 0905 	sub.w	r9, sl, #5
   13846:	e023      	b.n	13890 <z_cbvprintf_impl+0x464>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   13848:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   1384c:	9300      	str	r3, [sp, #0]
   1384e:	ab0a      	add	r3, sp, #40	; 0x28
   13850:	aa06      	add	r2, sp, #24
   13852:	2100      	movs	r1, #0
   13854:	f015 f937 	bl	28ac6 <encode_uint>
   13858:	4681      	mov	r9, r0
				conv->altform_0c = true;
   1385a:	f89d 301a 	ldrb.w	r3, [sp, #26]
   1385e:	f043 0310 	orr.w	r3, r3, #16
   13862:	f88d 301a 	strb.w	r3, [sp, #26]
				conv->specifier = 'x';
   13866:	2378      	movs	r3, #120	; 0x78
   13868:	f88d 301b 	strb.w	r3, [sp, #27]
		char sign = 0;
   1386c:	46d8      	mov	r8, fp
				goto prec_int_pad0;
   1386e:	e7ce      	b.n	1380e <z_cbvprintf_impl+0x3e2>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
   13870:	4622      	mov	r2, r4
   13872:	9904      	ldr	r1, [sp, #16]
   13874:	a806      	add	r0, sp, #24
   13876:	f015 f976 	bl	28b66 <store_count>
		char sign = 0;
   1387a:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
   1387c:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
   13880:	f04f 0900 	mov.w	r9, #0
			}

			break;
   13884:	e004      	b.n	13890 <z_cbvprintf_impl+0x464>
		switch (conv->specifier) {
   13886:	46d8      	mov	r8, fp
   13888:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
   1388c:	f04f 0900 	mov.w	r9, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
   13890:	f1b9 0f00 	cmp.w	r9, #0
   13894:	f000 808d 	beq.w	139b2 <z_cbvprintf_impl+0x586>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
   13898:	ebaa 0309 	sub.w	r3, sl, r9
		int pad_len = 0;

		if (sign != 0) {
   1389c:	f1b8 0f00 	cmp.w	r8, #0
   138a0:	d000      	beq.n	138a4 <z_cbvprintf_impl+0x478>
			nj_len += 1U;
   138a2:	3301      	adds	r3, #1
		}

		if (conv->altform_0c) {
   138a4:	f89d 201a 	ldrb.w	r2, [sp, #26]
   138a8:	f012 0f10 	tst.w	r2, #16
   138ac:	d025      	beq.n	138fa <z_cbvprintf_impl+0x4ce>
			nj_len += 2U;
   138ae:	3302      	adds	r3, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
   138b0:	9907      	ldr	r1, [sp, #28]
   138b2:	440b      	add	r3, r1
		if (conv->pad_fp) {
   138b4:	f012 0f40 	tst.w	r2, #64	; 0x40
   138b8:	d001      	beq.n	138be <z_cbvprintf_impl+0x492>
			nj_len += conv->pad0_pre_exp;
   138ba:	9a08      	ldr	r2, [sp, #32]
   138bc:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
   138be:	2f00      	cmp	r7, #0
   138c0:	dd31      	ble.n	13926 <z_cbvprintf_impl+0x4fa>
			width -= (int)nj_len;
   138c2:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
   138c4:	f89d 3018 	ldrb.w	r3, [sp, #24]
   138c8:	f013 0f04 	tst.w	r3, #4
   138cc:	d12b      	bne.n	13926 <z_cbvprintf_impl+0x4fa>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
   138ce:	f013 0f40 	tst.w	r3, #64	; 0x40
   138d2:	d017      	beq.n	13904 <z_cbvprintf_impl+0x4d8>
					if (sign != 0) {
   138d4:	f1b8 0f00 	cmp.w	r8, #0
   138d8:	d017      	beq.n	1390a <z_cbvprintf_impl+0x4de>
						OUTC(sign);
   138da:	4629      	mov	r1, r5
   138dc:	4640      	mov	r0, r8
   138de:	47b0      	blx	r6
   138e0:	2800      	cmp	r0, #0
   138e2:	db6a      	blt.n	139ba <z_cbvprintf_impl+0x58e>
   138e4:	3401      	adds	r4, #1
						sign = 0;
   138e6:	46d8      	mov	r8, fp
					}
					pad = '0';
   138e8:	f04f 0b30 	mov.w	fp, #48	; 0x30
   138ec:	e00f      	b.n	1390e <z_cbvprintf_impl+0x4e2>
		const char *bpe = buf + sizeof(buf);
   138ee:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
   138f2:	e7cd      	b.n	13890 <z_cbvprintf_impl+0x464>
   138f4:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
   138f8:	e7ca      	b.n	13890 <z_cbvprintf_impl+0x464>
		} else if (conv->altform_0) {
   138fa:	f012 0f08 	tst.w	r2, #8
   138fe:	d0d7      	beq.n	138b0 <z_cbvprintf_impl+0x484>
			nj_len += 1U;
   13900:	3301      	adds	r3, #1
   13902:	e7d5      	b.n	138b0 <z_cbvprintf_impl+0x484>
				char pad = ' ';
   13904:	f04f 0b20 	mov.w	fp, #32
   13908:	e001      	b.n	1390e <z_cbvprintf_impl+0x4e2>
					pad = '0';
   1390a:	f04f 0b30 	mov.w	fp, #48	; 0x30
   1390e:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
   13910:	1e5f      	subs	r7, r3, #1
   13912:	2b00      	cmp	r3, #0
   13914:	dd07      	ble.n	13926 <z_cbvprintf_impl+0x4fa>
					OUTC(pad);
   13916:	4629      	mov	r1, r5
   13918:	4658      	mov	r0, fp
   1391a:	47b0      	blx	r6
   1391c:	2800      	cmp	r0, #0
   1391e:	db4c      	blt.n	139ba <z_cbvprintf_impl+0x58e>
   13920:	3401      	adds	r4, #1
				while (width-- > 0) {
   13922:	463b      	mov	r3, r7
   13924:	e7f4      	b.n	13910 <z_cbvprintf_impl+0x4e4>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
   13926:	f1b8 0f00 	cmp.w	r8, #0
   1392a:	d005      	beq.n	13938 <z_cbvprintf_impl+0x50c>
			OUTC(sign);
   1392c:	4629      	mov	r1, r5
   1392e:	4640      	mov	r0, r8
   13930:	47b0      	blx	r6
   13932:	2800      	cmp	r0, #0
   13934:	db41      	blt.n	139ba <z_cbvprintf_impl+0x58e>
   13936:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
   13938:	f89d 301a 	ldrb.w	r3, [sp, #26]
   1393c:	f3c3 1200 	ubfx	r2, r3, #4, #1
   13940:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   13944:	431a      	orrs	r2, r3
   13946:	d005      	beq.n	13954 <z_cbvprintf_impl+0x528>
				OUTC('0');
   13948:	4629      	mov	r1, r5
   1394a:	2030      	movs	r0, #48	; 0x30
   1394c:	47b0      	blx	r6
   1394e:	2800      	cmp	r0, #0
   13950:	db33      	blt.n	139ba <z_cbvprintf_impl+0x58e>
   13952:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
   13954:	f89d 301a 	ldrb.w	r3, [sp, #26]
   13958:	f013 0f10 	tst.w	r3, #16
   1395c:	d006      	beq.n	1396c <z_cbvprintf_impl+0x540>
				OUTC(conv->specifier);
   1395e:	4629      	mov	r1, r5
   13960:	f89d 001b 	ldrb.w	r0, [sp, #27]
   13964:	47b0      	blx	r6
   13966:	2800      	cmp	r0, #0
   13968:	db27      	blt.n	139ba <z_cbvprintf_impl+0x58e>
   1396a:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
   1396c:	9b07      	ldr	r3, [sp, #28]
			while (pad_len-- > 0) {
   1396e:	f103 38ff 	add.w	r8, r3, #4294967295
   13972:	2b00      	cmp	r3, #0
   13974:	dd07      	ble.n	13986 <z_cbvprintf_impl+0x55a>
				OUTC('0');
   13976:	4629      	mov	r1, r5
   13978:	2030      	movs	r0, #48	; 0x30
   1397a:	47b0      	blx	r6
   1397c:	2800      	cmp	r0, #0
   1397e:	db1c      	blt.n	139ba <z_cbvprintf_impl+0x58e>
   13980:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
   13982:	4643      	mov	r3, r8
   13984:	e7f3      	b.n	1396e <z_cbvprintf_impl+0x542>
			}

			OUTS(bps, bpe);
   13986:	4653      	mov	r3, sl
   13988:	464a      	mov	r2, r9
   1398a:	4629      	mov	r1, r5
   1398c:	4630      	mov	r0, r6
   1398e:	f015 f909 	bl	28ba4 <outs>
   13992:	2800      	cmp	r0, #0
   13994:	db11      	blt.n	139ba <z_cbvprintf_impl+0x58e>
   13996:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
   13998:	2f00      	cmp	r7, #0
   1399a:	dd07      	ble.n	139ac <z_cbvprintf_impl+0x580>
			OUTC(' ');
   1399c:	4629      	mov	r1, r5
   1399e:	2020      	movs	r0, #32
   139a0:	47b0      	blx	r6
   139a2:	2800      	cmp	r0, #0
   139a4:	db09      	blt.n	139ba <z_cbvprintf_impl+0x58e>
   139a6:	3401      	adds	r4, #1
			--width;
   139a8:	3f01      	subs	r7, #1
   139aa:	e7f5      	b.n	13998 <z_cbvprintf_impl+0x56c>
		fp = extract_conversion(conv, sp);
   139ac:	f8dd 9008 	ldr.w	r9, [sp, #8]
   139b0:	e544      	b.n	1343c <z_cbvprintf_impl+0x10>
   139b2:	f8dd 9008 	ldr.w	r9, [sp, #8]
   139b6:	e541      	b.n	1343c <z_cbvprintf_impl+0x10>
		}
	}

	return count;
   139b8:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
   139ba:	b011      	add	sp, #68	; 0x44
   139bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   139c0:	00031c2d 	.word	0x00031c2d

000139c4 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   139c4:	f011 b8c0 	b.w	24b48 <SystemInit>

000139c8 <msg_process>:
		return true;
	}
}

static void msg_process(union log_msg_generic *msg)
{
   139c8:	b538      	push	{r3, r4, r5, lr}
   139ca:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   139cc:	4c0b      	ldr	r4, [pc, #44]	; (139fc <msg_process+0x34>)
   139ce:	e000      	b.n	139d2 <msg_process+0xa>
   139d0:	3410      	adds	r4, #16
   139d2:	4b0b      	ldr	r3, [pc, #44]	; (13a00 <msg_process+0x38>)
   139d4:	429c      	cmp	r4, r3
   139d6:	d20f      	bcs.n	139f8 <msg_process+0x30>
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   139d8:	6863      	ldr	r3, [r4, #4]
   139da:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend) &&
   139dc:	2b00      	cmp	r3, #0
   139de:	d0f7      	beq.n	139d0 <msg_process+0x8>
		    msg_filter_check(backend, msg)) {
   139e0:	4629      	mov	r1, r5
   139e2:	4620      	mov	r0, r4
   139e4:	f015 fb99 	bl	2911a <msg_filter_check>
		if (log_backend_is_active(backend) &&
   139e8:	2800      	cmp	r0, #0
   139ea:	d0f1      	beq.n	139d0 <msg_process+0x8>
	backend->api->process(backend, msg);
   139ec:	6823      	ldr	r3, [r4, #0]
   139ee:	681b      	ldr	r3, [r3, #0]
   139f0:	4629      	mov	r1, r5
   139f2:	4620      	mov	r0, r4
   139f4:	4798      	blx	r3
}
   139f6:	e7eb      	b.n	139d0 <msg_process+0x8>
			log_backend_msg_process(backend, msg);
		}
	}
}
   139f8:	bd38      	pop	{r3, r4, r5, pc}
   139fa:	bf00      	nop
   139fc:	00031500 	.word	0x00031500
   13a00:	00031510 	.word	0x00031510

00013a04 <log_backend_notify_all>:
	return mpsc_pbuf_get_max_utilization(&log_buffer, max);
}

static void log_backend_notify_all(enum log_backend_evt event,
				   union log_backend_evt_arg *arg)
{
   13a04:	b570      	push	{r4, r5, r6, lr}
   13a06:	4606      	mov	r6, r0
   13a08:	460d      	mov	r5, r1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13a0a:	4c08      	ldr	r4, [pc, #32]	; (13a2c <log_backend_notify_all+0x28>)
   13a0c:	e004      	b.n	13a18 <log_backend_notify_all+0x14>
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
		backend->api->notify(backend, event, arg);
   13a0e:	462a      	mov	r2, r5
   13a10:	4631      	mov	r1, r6
   13a12:	4620      	mov	r0, r4
   13a14:	4798      	blx	r3
   13a16:	3410      	adds	r4, #16
   13a18:	4b05      	ldr	r3, [pc, #20]	; (13a30 <log_backend_notify_all+0x2c>)
   13a1a:	429c      	cmp	r4, r3
   13a1c:	d204      	bcs.n	13a28 <log_backend_notify_all+0x24>
	if (backend->api->notify) {
   13a1e:	6823      	ldr	r3, [r4, #0]
   13a20:	699b      	ldr	r3, [r3, #24]
   13a22:	2b00      	cmp	r3, #0
   13a24:	d1f3      	bne.n	13a0e <log_backend_notify_all+0xa>
   13a26:	e7f6      	b.n	13a16 <log_backend_notify_all+0x12>
		log_backend_notify(backend, event, arg);
	}
}
   13a28:	bd70      	pop	{r4, r5, r6, pc}
   13a2a:	bf00      	nop
   13a2c:	00031500 	.word	0x00031500
   13a30:	00031510 	.word	0x00031510

00013a34 <activate_foreach_backend>:
{
   13a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13a38:	4607      	mov	r7, r0
	uint32_t mask_cpy = mask;
   13a3a:	4605      	mov	r5, r0
	while (mask_cpy) {
   13a3c:	e00a      	b.n	13a54 <activate_foreach_backend+0x20>
			mask &= ~BIT(i);
   13a3e:	ea07 0708 	and.w	r7, r7, r8
					   backend->cb->ctx,
   13a42:	4b14      	ldr	r3, [pc, #80]	; (13a94 <activate_foreach_backend+0x60>)
   13a44:	eb03 1306 	add.w	r3, r3, r6, lsl #4
   13a48:	685b      	ldr	r3, [r3, #4]
			log_backend_enable(backend,
   13a4a:	2204      	movs	r2, #4
   13a4c:	6819      	ldr	r1, [r3, #0]
   13a4e:	4620      	mov	r0, r4
   13a50:	f000 faa4 	bl	13f9c <log_backend_enable>
	while (mask_cpy) {
   13a54:	b1d5      	cbz	r5, 13a8c <activate_foreach_backend+0x58>
		uint32_t i = __builtin_ctz(mask_cpy);
   13a56:	fa95 f6a5 	rbit	r6, r5
   13a5a:	fab6 f686 	clz	r6, r6
	STRUCT_SECTION_GET(log_backend, idx, &backend);
   13a5e:	4c0d      	ldr	r4, [pc, #52]	; (13a94 <activate_foreach_backend+0x60>)
   13a60:	eb04 1406 	add.w	r4, r4, r6, lsl #4
		mask_cpy &= ~BIT(i);
   13a64:	2301      	movs	r3, #1
   13a66:	40b3      	lsls	r3, r6
   13a68:	ea6f 0803 	mvn.w	r8, r3
   13a6c:	ea25 0503 	bic.w	r5, r5, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   13a70:	7b23      	ldrb	r3, [r4, #12]
   13a72:	2b00      	cmp	r3, #0
   13a74:	d0ee      	beq.n	13a54 <activate_foreach_backend+0x20>
	if (backend->api->is_ready != NULL) {
   13a76:	0133      	lsls	r3, r6, #4
   13a78:	4a06      	ldr	r2, [pc, #24]	; (13a94 <activate_foreach_backend+0x60>)
   13a7a:	58d3      	ldr	r3, [r2, r3]
   13a7c:	691b      	ldr	r3, [r3, #16]
   13a7e:	2b00      	cmp	r3, #0
   13a80:	d0dd      	beq.n	13a3e <activate_foreach_backend+0xa>
		return backend->api->is_ready(backend);
   13a82:	4620      	mov	r0, r4
   13a84:	4798      	blx	r3
   13a86:	2800      	cmp	r0, #0
   13a88:	d1e4      	bne.n	13a54 <activate_foreach_backend+0x20>
   13a8a:	e7d8      	b.n	13a3e <activate_foreach_backend+0xa>
}
   13a8c:	4638      	mov	r0, r7
   13a8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13a92:	bf00      	nop
   13a94:	00031500 	.word	0x00031500

00013a98 <z_log_init>:
{
   13a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13a9c:	4680      	mov	r8, r0
   13a9e:	460f      	mov	r7, r1
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   13aa0:	4b20      	ldr	r3, [pc, #128]	; (13b24 <z_log_init+0x8c>)
   13aa2:	f3bf 8f5b 	dmb	ish
   13aa6:	e853 5f00 	ldrex	r5, [r3]
   13aaa:	1c6a      	adds	r2, r5, #1
   13aac:	e843 2100 	strex	r1, r2, [r3]
   13ab0:	2900      	cmp	r1, #0
   13ab2:	d1f8      	bne.n	13aa6 <z_log_init+0xe>
   13ab4:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
   13ab8:	2d00      	cmp	r5, #0
   13aba:	d12f      	bne.n	13b1c <z_log_init+0x84>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13abc:	4c1a      	ldr	r4, [pc, #104]	; (13b28 <z_log_init+0x90>)
	int i = 0;
   13abe:	2600      	movs	r6, #0
   13ac0:	e007      	b.n	13ad2 <z_log_init+0x3a>
						   backend->cb->ctx,
   13ac2:	6863      	ldr	r3, [r4, #4]
				log_backend_enable(backend,
   13ac4:	2204      	movs	r2, #4
   13ac6:	6819      	ldr	r1, [r3, #0]
   13ac8:	4620      	mov	r0, r4
   13aca:	f000 fa67 	bl	13f9c <log_backend_enable>
			i++;
   13ace:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13ad0:	3410      	adds	r4, #16
   13ad2:	4b16      	ldr	r3, [pc, #88]	; (13b2c <z_log_init+0x94>)
   13ad4:	429c      	cmp	r4, r3
   13ad6:	d213      	bcs.n	13b00 <z_log_init+0x68>
		if (backend->autostart) {
   13ad8:	7b23      	ldrb	r3, [r4, #12]
   13ada:	2b00      	cmp	r3, #0
   13adc:	d0f8      	beq.n	13ad0 <z_log_init+0x38>
	if (backend->api->init) {
   13ade:	6823      	ldr	r3, [r4, #0]
   13ae0:	68db      	ldr	r3, [r3, #12]
   13ae2:	b10b      	cbz	r3, 13ae8 <z_log_init+0x50>
		backend->api->init(backend);
   13ae4:	4620      	mov	r0, r4
   13ae6:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
   13ae8:	6823      	ldr	r3, [r4, #0]
   13aea:	691b      	ldr	r3, [r3, #16]
   13aec:	2b00      	cmp	r3, #0
   13aee:	d0e8      	beq.n	13ac2 <z_log_init+0x2a>
		return backend->api->is_ready(backend);
   13af0:	4620      	mov	r0, r4
   13af2:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
   13af4:	2800      	cmp	r0, #0
   13af6:	d0e4      	beq.n	13ac2 <z_log_init+0x2a>
				mask |= BIT(i);
   13af8:	2301      	movs	r3, #1
   13afa:	40b3      	lsls	r3, r6
   13afc:	431d      	orrs	r5, r3
   13afe:	e7e6      	b.n	13ace <z_log_init+0x36>
	if (blocking) {
   13b00:	f1b8 0f00 	cmp.w	r8, #0
   13b04:	d00b      	beq.n	13b1e <z_log_init+0x86>
		while (mask) {
   13b06:	b155      	cbz	r5, 13b1e <z_log_init+0x86>
			mask = activate_foreach_backend(mask);
   13b08:	4628      	mov	r0, r5
   13b0a:	f7ff ff93 	bl	13a34 <activate_foreach_backend>
   13b0e:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
   13b10:	2f00      	cmp	r7, #0
   13b12:	d0f8      	beq.n	13b06 <z_log_init+0x6e>
				k_msleep(10);
   13b14:	200a      	movs	r0, #10
   13b16:	f015 fb06 	bl	29126 <k_msleep>
   13b1a:	e7f4      	b.n	13b06 <z_log_init+0x6e>
		return 0;
   13b1c:	2500      	movs	r5, #0
}
   13b1e:	4628      	mov	r0, r5
   13b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13b24:	20007b94 	.word	0x20007b94
   13b28:	00031500 	.word	0x00031500
   13b2c:	00031510 	.word	0x00031510

00013b30 <thread_set>:
{
   13b30:	b508      	push	{r3, lr}
	proc_tid = process_tid;
   13b32:	4b06      	ldr	r3, [pc, #24]	; (13b4c <thread_set+0x1c>)
   13b34:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   13b36:	b118      	cbz	r0, 13b40 <thread_set+0x10>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   13b38:	4b05      	ldr	r3, [pc, #20]	; (13b50 <thread_set+0x20>)
   13b3a:	681b      	ldr	r3, [r3, #0]
	    process_tid &&
   13b3c:	2b09      	cmp	r3, #9
   13b3e:	dc00      	bgt.n	13b42 <thread_set+0x12>
}
   13b40:	bd08      	pop	{r3, pc}
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   13b42:	4804      	ldr	r0, [pc, #16]	; (13b54 <thread_set+0x24>)
   13b44:	f012 fd36 	bl	265b4 <z_impl_k_sem_give>
}
   13b48:	e7fa      	b.n	13b40 <thread_set+0x10>
   13b4a:	bf00      	nop
   13b4c:	20007b88 	.word	0x20007b88
   13b50:	20007b90 	.word	0x20007b90
   13b54:	20000ae8 	.word	0x20000ae8

00013b58 <log_process_thread_timer_expiry_fn>:

static void log_process_thread_timer_expiry_fn(struct k_timer *timer)
{
   13b58:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   13b5a:	4802      	ldr	r0, [pc, #8]	; (13b64 <log_process_thread_timer_expiry_fn+0xc>)
   13b5c:	f012 fd2a 	bl	265b4 <z_impl_k_sem_give>
	k_sem_give(&log_process_thread_sem);
}
   13b60:	bd08      	pop	{r3, pc}
   13b62:	bf00      	nop
   13b64:	20000ae8 	.word	0x20000ae8

00013b68 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
   13b68:	b530      	push	{r4, r5, lr}
   13b6a:	b089      	sub	sp, #36	; 0x24
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   13b6c:	2200      	movs	r2, #0
   13b6e:	490f      	ldr	r1, [pc, #60]	; (13bac <enable_logger+0x44>)
   13b70:	480f      	ldr	r0, [pc, #60]	; (13bb0 <enable_logger+0x48>)
   13b72:	f01d f885 	bl	30c80 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   13b76:	4d0f      	ldr	r5, [pc, #60]	; (13bb4 <enable_logger+0x4c>)
   13b78:	2200      	movs	r2, #0
   13b7a:	2300      	movs	r3, #0
   13b7c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   13b80:	2400      	movs	r4, #0
   13b82:	9404      	str	r4, [sp, #16]
   13b84:	230e      	movs	r3, #14
   13b86:	9303      	str	r3, [sp, #12]
   13b88:	9402      	str	r4, [sp, #8]
   13b8a:	9401      	str	r4, [sp, #4]
   13b8c:	9400      	str	r4, [sp, #0]
   13b8e:	4b0a      	ldr	r3, [pc, #40]	; (13bb8 <enable_logger+0x50>)
   13b90:	f44f 7240 	mov.w	r2, #768	; 0x300
   13b94:	4909      	ldr	r1, [pc, #36]	; (13bbc <enable_logger+0x54>)
   13b96:	4628      	mov	r0, r5
   13b98:	f01c fb88 	bl	302ac <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   13b9c:	4908      	ldr	r1, [pc, #32]	; (13bc0 <enable_logger+0x58>)
   13b9e:	4628      	mov	r0, r5
   13ba0:	f012 fb1c 	bl	261dc <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
   13ba4:	4620      	mov	r0, r4
   13ba6:	b009      	add	sp, #36	; 0x24
   13ba8:	bd30      	pop	{r4, r5, pc}
   13baa:	bf00      	nop
   13bac:	00013b59 	.word	0x00013b59
   13bb0:	20001f10 	.word	0x20001f10
   13bb4:	20001a50 	.word	0x20001a50
   13bb8:	00013efd 	.word	0x00013efd
   13bbc:	20009100 	.word	0x20009100
   13bc0:	00031c30 	.word	0x00031c30

00013bc4 <log_format_func_t_get>:
}
   13bc4:	4b01      	ldr	r3, [pc, #4]	; (13bcc <log_format_func_t_get+0x8>)
   13bc6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   13bca:	4770      	bx	lr
   13bcc:	00031c4c 	.word	0x00031c4c

00013bd0 <log_set_timestamp_func>:
	if (timestamp_getter == NULL) {
   13bd0:	b148      	cbz	r0, 13be6 <log_set_timestamp_func+0x16>
{
   13bd2:	b508      	push	{r3, lr}
	timestamp_func = timestamp_getter;
   13bd4:	4a05      	ldr	r2, [pc, #20]	; (13bec <log_set_timestamp_func+0x1c>)
   13bd6:	6010      	str	r0, [r2, #0]
	timestamp_freq = freq;
   13bd8:	4b05      	ldr	r3, [pc, #20]	; (13bf0 <log_set_timestamp_func+0x20>)
   13bda:	6019      	str	r1, [r3, #0]
		log_output_timestamp_freq_set(freq);
   13bdc:	4608      	mov	r0, r1
   13bde:	f000 fbff 	bl	143e0 <log_output_timestamp_freq_set>
	return 0;
   13be2:	2000      	movs	r0, #0
}
   13be4:	bd08      	pop	{r3, pc}
		return -EINVAL;
   13be6:	f06f 0015 	mvn.w	r0, #21
}
   13bea:	4770      	bx	lr
   13bec:	20000678 	.word	0x20000678
   13bf0:	20007b84 	.word	0x20007b84

00013bf4 <z_log_notify_backend_enabled>:
{
   13bf4:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
   13bf6:	4b05      	ldr	r3, [pc, #20]	; (13c0c <z_log_notify_backend_enabled+0x18>)
   13bf8:	781b      	ldrb	r3, [r3, #0]
   13bfa:	b11b      	cbz	r3, 13c04 <z_log_notify_backend_enabled+0x10>
	backend_attached = true;
   13bfc:	4b03      	ldr	r3, [pc, #12]	; (13c0c <z_log_notify_backend_enabled+0x18>)
   13bfe:	2201      	movs	r2, #1
   13c00:	701a      	strb	r2, [r3, #0]
}
   13c02:	bd08      	pop	{r3, pc}
	z_impl_k_sem_give(sem);
   13c04:	4802      	ldr	r0, [pc, #8]	; (13c10 <z_log_notify_backend_enabled+0x1c>)
   13c06:	f012 fcd5 	bl	265b4 <z_impl_k_sem_give>
}
   13c0a:	e7f7      	b.n	13bfc <z_log_notify_backend_enabled+0x8>
   13c0c:	200090b8 	.word	0x200090b8
   13c10:	20000ae8 	.word	0x20000ae8

00013c14 <z_log_dropped>:
   13c14:	4b0d      	ldr	r3, [pc, #52]	; (13c4c <z_log_dropped+0x38>)
   13c16:	f3bf 8f5b 	dmb	ish
   13c1a:	e853 1f00 	ldrex	r1, [r3]
   13c1e:	3101      	adds	r1, #1
   13c20:	e843 1200 	strex	r2, r1, [r3]
   13c24:	2a00      	cmp	r2, #0
   13c26:	d1f8      	bne.n	13c1a <z_log_dropped+0x6>
   13c28:	f3bf 8f5b 	dmb	ish
	if (buffered) {
   13c2c:	b900      	cbnz	r0, 13c30 <z_log_dropped+0x1c>
}
   13c2e:	4770      	bx	lr
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   13c30:	4b07      	ldr	r3, [pc, #28]	; (13c50 <z_log_dropped+0x3c>)
   13c32:	f3bf 8f5b 	dmb	ish
   13c36:	e853 1f00 	ldrex	r1, [r3]
   13c3a:	3901      	subs	r1, #1
   13c3c:	e843 1200 	strex	r2, r1, [r3]
   13c40:	2a00      	cmp	r2, #0
   13c42:	d1f8      	bne.n	13c36 <z_log_dropped+0x22>
   13c44:	f3bf 8f5b 	dmb	ish
   13c48:	e7f1      	b.n	13c2e <z_log_dropped+0x1a>
   13c4a:	bf00      	nop
   13c4c:	20007b8c 	.word	0x20007b8c
   13c50:	20007b90 	.word	0x20007b90

00013c54 <z_log_dropped_read_and_clear>:
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   13c54:	4b06      	ldr	r3, [pc, #24]	; (13c70 <z_log_dropped_read_and_clear+0x1c>)
}
   13c56:	2000      	movs	r0, #0
   13c58:	4601      	mov	r1, r0
   13c5a:	f3bf 8f5b 	dmb	ish
   13c5e:	e853 0f00 	ldrex	r0, [r3]
   13c62:	e843 1200 	strex	r2, r1, [r3]
   13c66:	2a00      	cmp	r2, #0
   13c68:	d1f9      	bne.n	13c5e <z_log_dropped_read_and_clear+0xa>
   13c6a:	f3bf 8f5b 	dmb	ish
   13c6e:	4770      	bx	lr
   13c70:	20007b8c 	.word	0x20007b8c

00013c74 <dropped_notify>:
{
   13c74:	b538      	push	{r3, r4, r5, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
   13c76:	f7ff ffed 	bl	13c54 <z_log_dropped_read_and_clear>
   13c7a:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13c7c:	4c09      	ldr	r4, [pc, #36]	; (13ca4 <dropped_notify+0x30>)
   13c7e:	e000      	b.n	13c82 <dropped_notify+0xe>
   13c80:	3410      	adds	r4, #16
   13c82:	4b09      	ldr	r3, [pc, #36]	; (13ca8 <dropped_notify+0x34>)
   13c84:	429c      	cmp	r4, r3
   13c86:	d20b      	bcs.n	13ca0 <dropped_notify+0x2c>
	return backend->cb->active;
   13c88:	6863      	ldr	r3, [r4, #4]
   13c8a:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
   13c8c:	2b00      	cmp	r3, #0
   13c8e:	d0f7      	beq.n	13c80 <dropped_notify+0xc>
	if (backend->api->dropped != NULL) {
   13c90:	6823      	ldr	r3, [r4, #0]
   13c92:	685b      	ldr	r3, [r3, #4]
   13c94:	2b00      	cmp	r3, #0
   13c96:	d0f3      	beq.n	13c80 <dropped_notify+0xc>
		backend->api->dropped(backend, cnt);
   13c98:	4629      	mov	r1, r5
   13c9a:	4620      	mov	r0, r4
   13c9c:	4798      	blx	r3
   13c9e:	e7ef      	b.n	13c80 <dropped_notify+0xc>
}
   13ca0:	bd38      	pop	{r3, r4, r5, pc}
   13ca2:	bf00      	nop
   13ca4:	00031500 	.word	0x00031500
   13ca8:	00031510 	.word	0x00031510

00013cac <z_log_dropped_pending>:
	return dropped_cnt > 0;
   13cac:	4b03      	ldr	r3, [pc, #12]	; (13cbc <z_log_dropped_pending+0x10>)
   13cae:	6818      	ldr	r0, [r3, #0]
}
   13cb0:	2800      	cmp	r0, #0
   13cb2:	bfd4      	ite	le
   13cb4:	2000      	movle	r0, #0
   13cb6:	2001      	movgt	r0, #1
   13cb8:	4770      	bx	lr
   13cba:	bf00      	nop
   13cbc:	20007b8c 	.word	0x20007b8c

00013cc0 <z_log_msg_init>:
{
   13cc0:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
   13cc2:	4c04      	ldr	r4, [pc, #16]	; (13cd4 <z_log_msg_init+0x14>)
   13cc4:	4904      	ldr	r1, [pc, #16]	; (13cd8 <z_log_msg_init+0x18>)
   13cc6:	4620      	mov	r0, r4
   13cc8:	f015 f881 	bl	28dce <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
   13ccc:	4b03      	ldr	r3, [pc, #12]	; (13cdc <z_log_msg_init+0x1c>)
   13cce:	601c      	str	r4, [r3, #0]
}
   13cd0:	bd10      	pop	{r4, pc}
   13cd2:	bf00      	nop
   13cd4:	200009f0 	.word	0x200009f0
   13cd8:	00031c38 	.word	0x00031c38
   13cdc:	20007b80 	.word	0x20007b80

00013ce0 <log_core_init>:
{
   13ce0:	b508      	push	{r3, lr}
	panic_mode = false;
   13ce2:	2300      	movs	r3, #0
   13ce4:	4a05      	ldr	r2, [pc, #20]	; (13cfc <log_core_init+0x1c>)
   13ce6:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
   13ce8:	4a05      	ldr	r2, [pc, #20]	; (13d00 <log_core_init+0x20>)
   13cea:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
   13cec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   13cf0:	4804      	ldr	r0, [pc, #16]	; (13d04 <log_core_init+0x24>)
   13cf2:	f7ff ff6d 	bl	13bd0 <log_set_timestamp_func>
		z_log_msg_init();
   13cf6:	f7ff ffe3 	bl	13cc0 <z_log_msg_init>
}
   13cfa:	bd08      	pop	{r3, pc}
   13cfc:	200090b9 	.word	0x200090b9
   13d00:	20007b8c 	.word	0x20007b8c
   13d04:	0002911f 	.word	0x0002911f

00013d08 <z_log_msg_alloc>:
{
   13d08:	b508      	push	{r3, lr}
   13d0a:	4601      	mov	r1, r0
	return msg_alloc(&log_buffer, wlen);
   13d0c:	4801      	ldr	r0, [pc, #4]	; (13d14 <z_log_msg_alloc+0xc>)
   13d0e:	f015 fa20 	bl	29152 <msg_alloc>
}
   13d12:	bd08      	pop	{r3, pc}
   13d14:	200009f0 	.word	0x200009f0

00013d18 <z_log_msg_local_claim>:
{
   13d18:	b508      	push	{r3, lr}
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
   13d1a:	4802      	ldr	r0, [pc, #8]	; (13d24 <z_log_msg_local_claim+0xc>)
   13d1c:	f015 f92f 	bl	28f7e <mpsc_pbuf_claim>
}
   13d20:	bd08      	pop	{r3, pc}
   13d22:	bf00      	nop
   13d24:	200009f0 	.word	0x200009f0

00013d28 <z_log_msg_free>:
{
   13d28:	b508      	push	{r3, lr}
   13d2a:	4601      	mov	r1, r0
	msg_free(curr_log_buffer, msg);
   13d2c:	4b02      	ldr	r3, [pc, #8]	; (13d38 <z_log_msg_free+0x10>)
   13d2e:	6818      	ldr	r0, [r3, #0]
   13d30:	f015 fa15 	bl	2915e <msg_free>
}
   13d34:	bd08      	pop	{r3, pc}
   13d36:	bf00      	nop
   13d38:	20007b80 	.word	0x20007b80

00013d3c <z_log_msg_pending>:
{
   13d3c:	b508      	push	{r3, lr}
		return msg_pending(&log_buffer);
   13d3e:	4802      	ldr	r0, [pc, #8]	; (13d48 <z_log_msg_pending+0xc>)
   13d40:	f015 fa11 	bl	29166 <msg_pending>
}
   13d44:	bd08      	pop	{r3, pc}
   13d46:	bf00      	nop
   13d48:	200009f0 	.word	0x200009f0

00013d4c <z_impl_log_process>:
{
   13d4c:	b510      	push	{r4, lr}
   13d4e:	b082      	sub	sp, #8
	k_timeout_t backoff = K_NO_WAIT;
   13d50:	2200      	movs	r2, #0
   13d52:	2300      	movs	r3, #0
   13d54:	e9cd 2300 	strd	r2, r3, [sp]
	if (!backend_attached) {
   13d58:	4b28      	ldr	r3, [pc, #160]	; (13dfc <z_impl_log_process+0xb0>)
   13d5a:	7818      	ldrb	r0, [r3, #0]
   13d5c:	b908      	cbnz	r0, 13d62 <z_impl_log_process+0x16>
}
   13d5e:	b002      	add	sp, #8
   13d60:	bd10      	pop	{r4, pc}
	msg = z_log_msg_claim(&backoff);
   13d62:	4668      	mov	r0, sp
   13d64:	f015 fa17 	bl	29196 <z_log_msg_claim>
	if (msg) {
   13d68:	4604      	mov	r4, r0
   13d6a:	b188      	cbz	r0, 13d90 <z_impl_log_process+0x44>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   13d6c:	4b24      	ldr	r3, [pc, #144]	; (13e00 <z_impl_log_process+0xb4>)
   13d6e:	f3bf 8f5b 	dmb	ish
   13d72:	e853 1f00 	ldrex	r1, [r3]
   13d76:	3901      	subs	r1, #1
   13d78:	e843 1200 	strex	r2, r1, [r3]
   13d7c:	2a00      	cmp	r2, #0
   13d7e:	d1f8      	bne.n	13d72 <z_impl_log_process+0x26>
   13d80:	f3bf 8f5b 	dmb	ish
		msg_process(msg);
   13d84:	4620      	mov	r0, r4
   13d86:	f7ff fe1f 	bl	139c8 <msg_process>
		z_log_msg_free(msg);
   13d8a:	4620      	mov	r0, r4
   13d8c:	f7ff ffcc 	bl	13d28 <z_log_msg_free>
		bool dropped_pend = z_log_dropped_pending();
   13d90:	f7ff ff8c 	bl	13cac <z_log_dropped_pending>
		if ((dropped_pend || unordered_pend) &&
   13d94:	b958      	cbnz	r0, 13dae <z_impl_log_process+0x62>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
   13d96:	4a1b      	ldr	r2, [pc, #108]	; (13e04 <z_impl_log_process+0xb8>)
   13d98:	6813      	ldr	r3, [r2, #0]
   13d9a:	6851      	ldr	r1, [r2, #4]
   13d9c:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
   13da0:	f141 0100 	adc.w	r1, r1, #0
   13da4:	6013      	str	r3, [r2, #0]
   13da6:	6051      	str	r1, [r2, #4]
	return z_log_msg_pending();
   13da8:	f7ff ffc8 	bl	13d3c <z_log_msg_pending>
   13dac:	e7d7      	b.n	13d5e <z_impl_log_process+0x12>
	return z_impl_k_uptime_ticks();
   13dae:	f01c ff24 	bl	30bfa <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   13db2:	014a      	lsls	r2, r1, #5
   13db4:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
   13db8:	0143      	lsls	r3, r0, #5
   13dba:	1a1b      	subs	r3, r3, r0
   13dbc:	eb62 0201 	sbc.w	r2, r2, r1
   13dc0:	0092      	lsls	r2, r2, #2
   13dc2:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
   13dc6:	009b      	lsls	r3, r3, #2
   13dc8:	181b      	adds	r3, r3, r0
   13dca:	eb42 0201 	adc.w	r2, r2, r1
   13dce:	00d2      	lsls	r2, r2, #3
   13dd0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
   13dd4:	f3c3 3310 	ubfx	r3, r3, #12, #17
   13dd8:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
   13ddc:	0bd2      	lsrs	r2, r2, #15
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
   13dde:	4809      	ldr	r0, [pc, #36]	; (13e04 <z_impl_log_process+0xb8>)
   13de0:	6801      	ldr	r1, [r0, #0]
   13de2:	6840      	ldr	r0, [r0, #4]
   13de4:	1a5b      	subs	r3, r3, r1
   13de6:	eb62 0200 	sbc.w	r2, r2, r0
		if ((dropped_pend || unordered_pend) &&
   13dea:	f240 31e9 	movw	r1, #1001	; 0x3e9
   13dee:	428b      	cmp	r3, r1
   13df0:	f172 0200 	sbcs.w	r2, r2, #0
   13df4:	d3cf      	bcc.n	13d96 <z_impl_log_process+0x4a>
				dropped_notify();
   13df6:	f7ff ff3d 	bl	13c74 <dropped_notify>
			if (unordered_pend) {
   13dfa:	e7cc      	b.n	13d96 <z_impl_log_process+0x4a>
   13dfc:	200090b8 	.word	0x200090b8
   13e00:	20007b90 	.word	0x20007b90
   13e04:	20001f08 	.word	0x20001f08

00013e08 <z_impl_log_panic>:
	if (panic_mode) {
   13e08:	4b0f      	ldr	r3, [pc, #60]	; (13e48 <z_impl_log_panic+0x40>)
   13e0a:	781b      	ldrb	r3, [r3, #0]
   13e0c:	b103      	cbz	r3, 13e10 <z_impl_log_panic+0x8>
   13e0e:	4770      	bx	lr
{
   13e10:	b510      	push	{r4, lr}
	(void)z_log_init(true, false);
   13e12:	2100      	movs	r1, #0
   13e14:	2001      	movs	r0, #1
   13e16:	f7ff fe3f 	bl	13a98 <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13e1a:	4c0c      	ldr	r4, [pc, #48]	; (13e4c <z_impl_log_panic+0x44>)
   13e1c:	e000      	b.n	13e20 <z_impl_log_panic+0x18>
   13e1e:	3410      	adds	r4, #16
   13e20:	4b0b      	ldr	r3, [pc, #44]	; (13e50 <z_impl_log_panic+0x48>)
   13e22:	429c      	cmp	r4, r3
   13e24:	d208      	bcs.n	13e38 <z_impl_log_panic+0x30>
	return backend->cb->active;
   13e26:	6863      	ldr	r3, [r4, #4]
   13e28:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
   13e2a:	2b00      	cmp	r3, #0
   13e2c:	d0f7      	beq.n	13e1e <z_impl_log_panic+0x16>
	backend->api->panic(backend);
   13e2e:	6823      	ldr	r3, [r4, #0]
   13e30:	689b      	ldr	r3, [r3, #8]
   13e32:	4620      	mov	r0, r4
   13e34:	4798      	blx	r3
}
   13e36:	e7f2      	b.n	13e1e <z_impl_log_panic+0x16>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
   13e38:	f7ff ff88 	bl	13d4c <z_impl_log_process>
		while (log_process() == true) {
   13e3c:	2800      	cmp	r0, #0
   13e3e:	d1fb      	bne.n	13e38 <z_impl_log_panic+0x30>
	panic_mode = true;
   13e40:	4b01      	ldr	r3, [pc, #4]	; (13e48 <z_impl_log_panic+0x40>)
   13e42:	2201      	movs	r2, #1
   13e44:	701a      	strb	r2, [r3, #0]
}
   13e46:	bd10      	pop	{r4, pc}
   13e48:	200090b9 	.word	0x200090b9
   13e4c:	00031500 	.word	0x00031500
   13e50:	00031510 	.word	0x00031510

00013e54 <z_log_msg_post_finalize>:
{
   13e54:	b510      	push	{r4, lr}
   13e56:	b082      	sub	sp, #8
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   13e58:	4b1b      	ldr	r3, [pc, #108]	; (13ec8 <z_log_msg_post_finalize+0x74>)
   13e5a:	f3bf 8f5b 	dmb	ish
   13e5e:	e853 2f00 	ldrex	r2, [r3]
   13e62:	1c51      	adds	r1, r2, #1
   13e64:	e843 1000 	strex	r0, r1, [r3]
   13e68:	2800      	cmp	r0, #0
   13e6a:	d1f8      	bne.n	13e5e <z_log_msg_post_finalize+0xa>
   13e6c:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
   13e70:	4b16      	ldr	r3, [pc, #88]	; (13ecc <z_log_msg_post_finalize+0x78>)
   13e72:	781b      	ldrb	r3, [r3, #0]
   13e74:	b963      	cbnz	r3, 13e90 <z_log_msg_post_finalize+0x3c>
	} else if (proc_tid != NULL) {
   13e76:	4b16      	ldr	r3, [pc, #88]	; (13ed0 <z_log_msg_post_finalize+0x7c>)
   13e78:	681b      	ldr	r3, [r3, #0]
   13e7a:	b1bb      	cbz	r3, 13eac <z_log_msg_post_finalize+0x58>
		if (cnt == 0) {
   13e7c:	b1c2      	cbz	r2, 13eb0 <z_log_msg_post_finalize+0x5c>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   13e7e:	2a0a      	cmp	r2, #10
   13e80:	d114      	bne.n	13eac <z_log_msg_post_finalize+0x58>
	z_impl_k_timer_stop(timer);
   13e82:	4814      	ldr	r0, [pc, #80]	; (13ed4 <z_log_msg_post_finalize+0x80>)
   13e84:	f01c ff08 	bl	30c98 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   13e88:	4813      	ldr	r0, [pc, #76]	; (13ed8 <z_log_msg_post_finalize+0x84>)
   13e8a:	f012 fb93 	bl	265b4 <z_impl_k_sem_give>
}
   13e8e:	e00d      	b.n	13eac <z_log_msg_post_finalize+0x58>
   13e90:	f04f 0340 	mov.w	r3, #64	; 0x40
   13e94:	f3ef 8411 	mrs	r4, BASEPRI
   13e98:	f383 8812 	msr	BASEPRI_MAX, r3
   13e9c:	f3bf 8f6f 	isb	sy
   13ea0:	f7ff ff54 	bl	13d4c <z_impl_log_process>
	__asm__ volatile(
   13ea4:	f384 8811 	msr	BASEPRI, r4
   13ea8:	f3bf 8f6f 	isb	sy
   13eac:	b002      	add	sp, #8
   13eae:	bd10      	pop	{r4, pc}
	z_impl_k_timer_start(timer, duration, period);
   13eb0:	2200      	movs	r2, #0
   13eb2:	2300      	movs	r3, #0
   13eb4:	e9cd 2300 	strd	r2, r3, [sp]
   13eb8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   13ebc:	2300      	movs	r3, #0
   13ebe:	4805      	ldr	r0, [pc, #20]	; (13ed4 <z_log_msg_post_finalize+0x80>)
   13ec0:	f013 fb62 	bl	27588 <z_impl_k_timer_start>
   13ec4:	e7f2      	b.n	13eac <z_log_msg_post_finalize+0x58>
   13ec6:	bf00      	nop
   13ec8:	20007b90 	.word	0x20007b90
   13ecc:	200090b9 	.word	0x200090b9
   13ed0:	20007b88 	.word	0x20007b88
   13ed4:	20001f10 	.word	0x20001f10
   13ed8:	20000ae8 	.word	0x20000ae8

00013edc <z_log_msg_commit>:
{
   13edc:	b510      	push	{r4, lr}
   13ede:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
   13ee0:	4b04      	ldr	r3, [pc, #16]	; (13ef4 <z_log_msg_commit+0x18>)
   13ee2:	681b      	ldr	r3, [r3, #0]
   13ee4:	4798      	blx	r3
   13ee6:	60a0      	str	r0, [r4, #8]
	msg_commit(&log_buffer, msg);
   13ee8:	4621      	mov	r1, r4
   13eea:	4803      	ldr	r0, [pc, #12]	; (13ef8 <z_log_msg_commit+0x1c>)
   13eec:	f015 f957 	bl	2919e <msg_commit>
}
   13ef0:	bd10      	pop	{r4, pc}
   13ef2:	bf00      	nop
   13ef4:	20000678 	.word	0x20000678
   13ef8:	200009f0 	.word	0x200009f0

00013efc <log_process_thread_func>:
{
   13efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t activate_mask = z_log_init(false, false);
   13f00:	2100      	movs	r1, #0
   13f02:	4608      	mov	r0, r1
   13f04:	f7ff fdc8 	bl	13a98 <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   13f08:	4680      	mov	r8, r0
   13f0a:	b140      	cbz	r0, 13f1e <log_process_thread_func+0x22>
   13f0c:	f240 6667 	movw	r6, #1639	; 0x667
   13f10:	2700      	movs	r7, #0
	return z_impl_z_current_get();
   13f12:	f013 f90b 	bl	2712c <z_impl_z_current_get>
	thread_set(k_current_get());
   13f16:	f7ff fe0b 	bl	13b30 <thread_set>
	bool processed_any = false;
   13f1a:	2500      	movs	r5, #0
   13f1c:	e015      	b.n	13f4a <log_process_thread_func+0x4e>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   13f1e:	f04f 36ff 	mov.w	r6, #4294967295
   13f22:	f04f 37ff 	mov.w	r7, #4294967295
   13f26:	e7f4      	b.n	13f12 <log_process_thread_func+0x16>
			activate_mask = activate_foreach_backend(activate_mask);
   13f28:	4640      	mov	r0, r8
   13f2a:	f7ff fd83 	bl	13a34 <activate_foreach_backend>
			if (!activate_mask) {
   13f2e:	4680      	mov	r8, r0
   13f30:	b970      	cbnz	r0, 13f50 <log_process_thread_func+0x54>
				timeout = K_FOREVER;
   13f32:	f04f 36ff 	mov.w	r6, #4294967295
   13f36:	f04f 37ff 	mov.w	r7, #4294967295
   13f3a:	e009      	b.n	13f50 <log_process_thread_func+0x54>
   13f3c:	462c      	mov	r4, r5
	return z_impl_k_sem_take(sem, timeout);
   13f3e:	4632      	mov	r2, r6
   13f40:	463b      	mov	r3, r7
   13f42:	4809      	ldr	r0, [pc, #36]	; (13f68 <log_process_thread_func+0x6c>)
   13f44:	f012 fb5e 	bl	26604 <z_impl_k_sem_take>
{
   13f48:	4625      	mov	r5, r4
		if (activate_mask) {
   13f4a:	f1b8 0f00 	cmp.w	r8, #0
   13f4e:	d1eb      	bne.n	13f28 <log_process_thread_func+0x2c>
   13f50:	f7ff fefc 	bl	13d4c <z_impl_log_process>
		if (log_process() == false) {
   13f54:	4604      	mov	r4, r0
   13f56:	2800      	cmp	r0, #0
   13f58:	d1f6      	bne.n	13f48 <log_process_thread_func+0x4c>
			if (processed_any) {
   13f5a:	2d00      	cmp	r5, #0
   13f5c:	d0ee      	beq.n	13f3c <log_process_thread_func+0x40>
				log_backend_notify_all(LOG_BACKEND_EVT_PROCESS_THREAD_DONE, NULL);
   13f5e:	2100      	movs	r1, #0
   13f60:	4608      	mov	r0, r1
   13f62:	f7ff fd4f 	bl	13a04 <log_backend_notify_all>
   13f66:	e7ea      	b.n	13f3e <log_process_thread_func+0x42>
   13f68:	20000ae8 	.word	0x20000ae8

00013f6c <log_src_cnt_get>:
	if (z_log_is_local_domain(domain_id)) {
		return log_const_source_id(__log_const_end);
	}

	return link_source_count(domain_id);
}
   13f6c:	4802      	ldr	r0, [pc, #8]	; (13f78 <log_src_cnt_get+0xc>)
   13f6e:	4b03      	ldr	r3, [pc, #12]	; (13f7c <log_src_cnt_get+0x10>)
   13f70:	1ac0      	subs	r0, r0, r3
   13f72:	08c0      	lsrs	r0, r0, #3
   13f74:	4770      	bx	lr
   13f76:	bf00      	nop
   13f78:	00031500 	.word	0x00031500
   13f7c:	00031400 	.word	0x00031400

00013f80 <log_source_name_get>:

	return (const char *)cached;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
   13f80:	b510      	push	{r4, lr}
   13f82:	460c      	mov	r4, r1
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
   13f84:	f7ff fff2 	bl	13f6c <log_src_cnt_get>
   13f88:	42a0      	cmp	r0, r4
   13f8a:	d903      	bls.n	13f94 <log_source_name_get+0x14>
			return __log_const_start[source_id].name;
   13f8c:	4b02      	ldr	r3, [pc, #8]	; (13f98 <log_source_name_get+0x18>)
   13f8e:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			return NULL;
		}
	}

	return link_source_name_get(domain_id, source_id);
}
   13f92:	bd10      	pop	{r4, pc}
			return NULL;
   13f94:	2000      	movs	r0, #0
   13f96:	e7fc      	b.n	13f92 <log_source_name_get+0x12>
   13f98:	00031400 	.word	0x00031400

00013f9c <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
   13f9c:	b508      	push	{r3, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
   13f9e:	4b09      	ldr	r3, [pc, #36]	; (13fc4 <log_backend_enable+0x28>)
   13fa0:	1ac3      	subs	r3, r0, r3
   13fa2:	111b      	asrs	r3, r3, #4
   13fa4:	3301      	adds	r3, #1
	backend->cb->id = id;
   13fa6:	f8d0 c004 	ldr.w	ip, [r0, #4]
   13faa:	f88c 3004 	strb.w	r3, [ip, #4]

	log_backend_id_set(backend, id);
	backend->cb->level = level;
   13fae:	6843      	ldr	r3, [r0, #4]
   13fb0:	719a      	strb	r2, [r3, #6]
	backend->cb->ctx = ctx;
   13fb2:	6843      	ldr	r3, [r0, #4]
   13fb4:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
   13fb6:	6843      	ldr	r3, [r0, #4]
   13fb8:	2201      	movs	r2, #1
   13fba:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
   13fbc:	f7ff fe1a 	bl	13bf4 <z_log_notify_backend_enabled>
}
   13fc0:	bd08      	pop	{r3, pc}
   13fc2:	bf00      	nop
   13fc4:	00031500 	.word	0x00031500

00013fc8 <cbprintf_package_copy>:
{
   13fc8:	b500      	push	{lr}
   13fca:	b089      	sub	sp, #36	; 0x24
	struct z_cbprintf_buf_desc buf_desc = {
   13fcc:	9205      	str	r2, [sp, #20]
   13fce:	9306      	str	r3, [sp, #24]
   13fd0:	2300      	movs	r3, #0
   13fd2:	9307      	str	r3, [sp, #28]
	return cbprintf_package_convert(in_packaged, in_len,
   13fd4:	b162      	cbz	r2, 13ff0 <cbprintf_package_copy+0x28>
   13fd6:	4a07      	ldr	r2, [pc, #28]	; (13ff4 <cbprintf_package_copy+0x2c>)
   13fd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   13fda:	9302      	str	r3, [sp, #8]
   13fdc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13fde:	9301      	str	r3, [sp, #4]
   13fe0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13fe2:	9300      	str	r3, [sp, #0]
   13fe4:	ab05      	add	r3, sp, #20
   13fe6:	f7fe fe81 	bl	12cec <cbprintf_package_convert>
}
   13fea:	b009      	add	sp, #36	; 0x24
   13fec:	f85d fb04 	ldr.w	pc, [sp], #4
	return cbprintf_package_convert(in_packaged, in_len,
   13ff0:	2200      	movs	r2, #0
   13ff2:	e7f1      	b.n	13fd8 <cbprintf_package_copy+0x10>
   13ff4:	000291af 	.word	0x000291af

00013ff8 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
   13ff8:	b40e      	push	{r1, r2, r3}
   13ffa:	b500      	push	{lr}
   13ffc:	b084      	sub	sp, #16
   13ffe:	4601      	mov	r1, r0
   14000:	ab05      	add	r3, sp, #20
   14002:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
   14006:	9303      	str	r3, [sp, #12]
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   14008:	2000      	movs	r0, #0
   1400a:	9000      	str	r0, [sp, #0]
   1400c:	4803      	ldr	r0, [pc, #12]	; (1401c <print_formatted+0x24>)
   1400e:	f7ff fa0d 	bl	1342c <z_cbvprintf_impl>
	length = cbvprintf(out_func, (void *)output, fmt, args);
	va_end(args);

	return length;
}
   14012:	b004      	add	sp, #16
   14014:	f85d eb04 	ldr.w	lr, [sp], #4
   14018:	b003      	add	sp, #12
   1401a:	4770      	bx	lr
   1401c:	000293cf 	.word	0x000293cf

00014020 <timestamp_print>:
	output_date->day += seconds / SECONDS_IN_DAY;
}

static int timestamp_print(const struct log_output *output,
			   uint32_t flags, log_timestamp_t timestamp)
{
   14020:	b530      	push	{r4, r5, lr}
   14022:	b085      	sub	sp, #20
		(flags & LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP) |
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) |
		IS_ENABLED(CONFIG_LOG_OUTPUT_FORMAT_LINUX_TIMESTAMP);


	if (!format) {
   14024:	f011 0f44 	tst.w	r1, #68	; 0x44
   14028:	d005      	beq.n	14036 <timestamp_print+0x16>
#ifndef CONFIG_LOG_TIMESTAMP_64BIT
		length = print_formatted(output, "[%08lu] ", timestamp);
#else
		length = print_formatted(output, "[%016llu] ", timestamp);
#endif
	} else if (freq != 0U) {
   1402a:	4b1a      	ldr	r3, [pc, #104]	; (14094 <timestamp_print+0x74>)
   1402c:	681c      	ldr	r4, [r3, #0]
   1402e:	b934      	cbnz	r4, 1403e <timestamp_print+0x1e>
							"[%02u:%02u:%02u.%03u,%03u] ",
							hours, mins, seconds, ms, us);
			}
		}
	} else {
		length = 0;
   14030:	2000      	movs	r0, #0
	}

	return length;
}
   14032:	b005      	add	sp, #20
   14034:	bd30      	pop	{r4, r5, pc}
		length = print_formatted(output, "[%08lu] ", timestamp);
   14036:	4918      	ldr	r1, [pc, #96]	; (14098 <timestamp_print+0x78>)
   14038:	f7ff ffde 	bl	13ff8 <print_formatted>
   1403c:	e7f9      	b.n	14032 <timestamp_print+0x12>
		timestamp /= timestamp_div;
   1403e:	4b17      	ldr	r3, [pc, #92]	; (1409c <timestamp_print+0x7c>)
   14040:	6819      	ldr	r1, [r3, #0]
   14042:	fbb2 f1f1 	udiv	r1, r2, r1
		total_seconds = timestamp / freq;
   14046:	fbb1 fcf4 	udiv	ip, r1, r4
		hours = seconds / 3600U;
   1404a:	4a15      	ldr	r2, [pc, #84]	; (140a0 <timestamp_print+0x80>)
   1404c:	fba2 320c 	umull	r3, r2, r2, ip
   14050:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
   14052:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
   14056:	fb0e ce12 	mls	lr, lr, r2, ip
		mins = seconds / 60U;
   1405a:	4b12      	ldr	r3, [pc, #72]	; (140a4 <timestamp_print+0x84>)
   1405c:	fba3 530e 	umull	r5, r3, r3, lr
   14060:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
   14062:	fb04 111c 	mls	r1, r4, ip, r1
		ms = (remainder * 1000U) / freq;
   14066:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
   1406a:	fb0c f101 	mul.w	r1, ip, r1
   1406e:	fbb1 f5f4 	udiv	r5, r1, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   14072:	fb04 1115 	mls	r1, r4, r5, r1
   14076:	fb0c f101 	mul.w	r1, ip, r1
   1407a:	fbb1 f1f4 	udiv	r1, r1, r4
				length = print_formatted(output,
   1407e:	9102      	str	r1, [sp, #8]
   14080:	9501      	str	r5, [sp, #4]
   14082:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
   14086:	ebae 0181 	sub.w	r1, lr, r1, lsl #2
   1408a:	9100      	str	r1, [sp, #0]
   1408c:	4906      	ldr	r1, [pc, #24]	; (140a8 <timestamp_print+0x88>)
   1408e:	f7ff ffb3 	bl	13ff8 <print_formatted>
   14092:	e7ce      	b.n	14032 <timestamp_print+0x12>
   14094:	20007b9c 	.word	0x20007b9c
   14098:	00031c6c 	.word	0x00031c6c
   1409c:	20007b98 	.word	0x20007b98
   140a0:	91a2b3c5 	.word	0x91a2b3c5
   140a4:	88888889 	.word	0x88888889
   140a8:	00031c78 	.word	0x00031c78

000140ac <color_print>:

static void color_print(const struct log_output *output,
			bool color, bool start, uint32_t level)
{
	if (color) {
   140ac:	b161      	cbz	r1, 140c8 <color_print+0x1c>
{
   140ae:	b508      	push	{r3, lr}
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
   140b0:	b12a      	cbz	r2, 140be <color_print+0x12>
		const char *log_color = start && (colors[level] != NULL) ?
   140b2:	4a06      	ldr	r2, [pc, #24]	; (140cc <color_print+0x20>)
   140b4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   140b8:	b912      	cbnz	r2, 140c0 <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
   140ba:	4a05      	ldr	r2, [pc, #20]	; (140d0 <color_print+0x24>)
   140bc:	e000      	b.n	140c0 <color_print+0x14>
   140be:	4a04      	ldr	r2, [pc, #16]	; (140d0 <color_print+0x24>)
		print_formatted(output, "%s", log_color);
   140c0:	4904      	ldr	r1, [pc, #16]	; (140d4 <color_print+0x28>)
   140c2:	f7ff ff99 	bl	13ff8 <print_formatted>
	}
}
   140c6:	bd08      	pop	{r3, pc}
   140c8:	4770      	bx	lr
   140ca:	bf00      	nop
   140cc:	00031d18 	.word	0x00031d18
   140d0:	00031c94 	.word	0x00031c94
   140d4:	00031c9c 	.word	0x00031c9c

000140d8 <ids_print>:
		     bool level_on,
		     bool func_on,
		     const char *domain,
		     const char *source,
		     uint32_t level)
{
   140d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   140dc:	4605      	mov	r5, r0
   140de:	4690      	mov	r8, r2
   140e0:	461e      	mov	r6, r3
   140e2:	9f06      	ldr	r7, [sp, #24]
	int total = 0;

	if (level_on) {
   140e4:	b981      	cbnz	r1, 14108 <ids_print+0x30>
	int total = 0;
   140e6:	2400      	movs	r4, #0
		total += print_formatted(output, "<%s> ", severity[level]);
	}

	if (domain) {
   140e8:	b12e      	cbz	r6, 140f6 <ids_print+0x1e>
		total += print_formatted(output, "%s/", domain);
   140ea:	4632      	mov	r2, r6
   140ec:	4910      	ldr	r1, [pc, #64]	; (14130 <ids_print+0x58>)
   140ee:	4628      	mov	r0, r5
   140f0:	f7ff ff82 	bl	13ff8 <print_formatted>
   140f4:	4404      	add	r4, r0
	}

	if (source) {
   140f6:	b1b7      	cbz	r7, 14126 <ids_print+0x4e>
		total += print_formatted(output,
   140f8:	f1b8 0f00 	cmp.w	r8, #0
   140fc:	d00d      	beq.n	1411a <ids_print+0x42>
				(func_on &&
   140fe:	9b07      	ldr	r3, [sp, #28]
   14100:	2b04      	cmp	r3, #4
   14102:	d013      	beq.n	1412c <ids_print+0x54>
		total += print_formatted(output,
   14104:	490b      	ldr	r1, [pc, #44]	; (14134 <ids_print+0x5c>)
   14106:	e009      	b.n	1411c <ids_print+0x44>
		total += print_formatted(output, "<%s> ", severity[level]);
   14108:	4b0b      	ldr	r3, [pc, #44]	; (14138 <ids_print+0x60>)
   1410a:	9a07      	ldr	r2, [sp, #28]
   1410c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   14110:	490a      	ldr	r1, [pc, #40]	; (1413c <ids_print+0x64>)
   14112:	f7ff ff71 	bl	13ff8 <print_formatted>
   14116:	4604      	mov	r4, r0
   14118:	e7e6      	b.n	140e8 <ids_print+0x10>
		total += print_formatted(output,
   1411a:	4906      	ldr	r1, [pc, #24]	; (14134 <ids_print+0x5c>)
   1411c:	463a      	mov	r2, r7
   1411e:	4628      	mov	r0, r5
   14120:	f7ff ff6a 	bl	13ff8 <print_formatted>
   14124:	4404      	add	r4, r0
				"%s." : "%s: ",
				source);
	}

	return total;
}
   14126:	4620      	mov	r0, r4
   14128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total += print_formatted(output,
   1412c:	4904      	ldr	r1, [pc, #16]	; (14140 <ids_print+0x68>)
   1412e:	e7f5      	b.n	1411c <ids_print+0x44>
   14130:	00031cb4 	.word	0x00031cb4
   14134:	00031ca4 	.word	0x00031ca4
   14138:	00031d2c 	.word	0x00031d2c
   1413c:	00031cac 	.word	0x00031cac
   14140:	00031ca0 	.word	0x00031ca0

00014144 <prefix_print>:
			     bool func_on,
			     log_timestamp_t timestamp,
			     const char *domain,
			     const char *source,
			     uint8_t level)
{
   14144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14148:	b085      	sub	sp, #20
   1414a:	4605      	mov	r5, r0
   1414c:	460c      	mov	r4, r1
   1414e:	4616      	mov	r6, r2
   14150:	9303      	str	r3, [sp, #12]
   14152:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
   14156:	f001 0b02 	and.w	fp, r1, #2
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   1415a:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   1415e:	f3c1 09c0 	ubfx	r9, r1, #3, #1
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
   14162:	f015 f822 	bl	291aa <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
   14166:	b1d8      	cbz	r0, 141a0 <prefix_print+0x5c>
   14168:	4602      	mov	r2, r0
		length += print_formatted(output, "%s ", tag);
   1416a:	4912      	ldr	r1, [pc, #72]	; (141b4 <prefix_print+0x70>)
   1416c:	4628      	mov	r0, r5
   1416e:	f7ff ff43 	bl	13ff8 <print_formatted>
   14172:	4607      	mov	r7, r0
	}

	if (stamp) {
   14174:	f1bb 0f00 	cmp.w	fp, #0
   14178:	d114      	bne.n	141a4 <prefix_print+0x60>
			output, "%s - - - - ",
			output->control_block->hostname ?
			output->control_block->hostname :
			"zephyr");
	} else {
		color_prefix(output, colors_on, level);
   1417a:	4642      	mov	r2, r8
   1417c:	4651      	mov	r1, sl
   1417e:	4628      	mov	r0, r5
   14180:	f015 f8e5 	bl	2934e <color_prefix>
	}

	length += ids_print(output, level_on, func_on, domain, source, level);
   14184:	f8cd 8004 	str.w	r8, [sp, #4]
   14188:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1418a:	9300      	str	r3, [sp, #0]
   1418c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1418e:	4632      	mov	r2, r6
   14190:	4649      	mov	r1, r9
   14192:	4628      	mov	r0, r5
   14194:	f7ff ffa0 	bl	140d8 <ids_print>

	return length;
}
   14198:	4438      	add	r0, r7
   1419a:	b005      	add	sp, #20
   1419c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
   141a0:	2700      	movs	r7, #0
   141a2:	e7e7      	b.n	14174 <prefix_print+0x30>
		length += timestamp_print(output, flags, timestamp);
   141a4:	9a03      	ldr	r2, [sp, #12]
   141a6:	4621      	mov	r1, r4
   141a8:	4628      	mov	r0, r5
   141aa:	f7ff ff39 	bl	14020 <timestamp_print>
   141ae:	4407      	add	r7, r0
   141b0:	e7e3      	b.n	1417a <prefix_print+0x36>
   141b2:	bf00      	nop
   141b4:	00031cb8 	.word	0x00031cb8

000141b8 <newline_print>:
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   141b8:	f011 0f10 	tst.w	r1, #16
   141bc:	d10b      	bne.n	141d6 <newline_print+0x1e>
{
   141be:	b508      	push	{r3, lr}
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   141c0:	f011 0f20 	tst.w	r1, #32
   141c4:	d003      	beq.n	141ce <newline_print+0x16>
		print_formatted(ctx, "\n");
   141c6:	4904      	ldr	r1, [pc, #16]	; (141d8 <newline_print+0x20>)
   141c8:	f7ff ff16 	bl	13ff8 <print_formatted>
}
   141cc:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
   141ce:	4903      	ldr	r1, [pc, #12]	; (141dc <newline_print+0x24>)
   141d0:	f7ff ff12 	bl	13ff8 <print_formatted>
   141d4:	e7fa      	b.n	141cc <newline_print+0x14>
   141d6:	4770      	bx	lr
   141d8:	00034a68 	.word	0x00034a68
   141dc:	00031cbc 	.word	0x00031cbc

000141e0 <hexdump_line_print>:
{
   141e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   141e4:	4605      	mov	r5, r0
   141e6:	460f      	mov	r7, r1
   141e8:	4616      	mov	r6, r2
   141ea:	4698      	mov	r8, r3
	newline_print(output, flags);
   141ec:	9906      	ldr	r1, [sp, #24]
   141ee:	f7ff ffe3 	bl	141b8 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
   141f2:	2400      	movs	r4, #0
   141f4:	4544      	cmp	r4, r8
   141f6:	da05      	bge.n	14204 <hexdump_line_print+0x24>
		print_formatted(output, " ");
   141f8:	4923      	ldr	r1, [pc, #140]	; (14288 <hexdump_line_print+0xa8>)
   141fa:	4628      	mov	r0, r5
   141fc:	f7ff fefc 	bl	13ff8 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   14200:	3401      	adds	r4, #1
   14202:	e7f7      	b.n	141f4 <hexdump_line_print+0x14>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   14204:	2400      	movs	r4, #0
   14206:	e009      	b.n	1421c <hexdump_line_print+0x3c>
			print_formatted(output, " ");
   14208:	491f      	ldr	r1, [pc, #124]	; (14288 <hexdump_line_print+0xa8>)
   1420a:	4628      	mov	r0, r5
   1420c:	f7ff fef4 	bl	13ff8 <print_formatted>
   14210:	e00b      	b.n	1422a <hexdump_line_print+0x4a>
			print_formatted(output, "   ");
   14212:	491e      	ldr	r1, [pc, #120]	; (1428c <hexdump_line_print+0xac>)
   14214:	4628      	mov	r0, r5
   14216:	f7ff feef 	bl	13ff8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1421a:	3401      	adds	r4, #1
   1421c:	2c0f      	cmp	r4, #15
   1421e:	dc0c      	bgt.n	1423a <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
   14220:	2c00      	cmp	r4, #0
   14222:	dd02      	ble.n	1422a <hexdump_line_print+0x4a>
   14224:	f014 0f07 	tst.w	r4, #7
   14228:	d0ee      	beq.n	14208 <hexdump_line_print+0x28>
		if (i < length) {
   1422a:	42b4      	cmp	r4, r6
   1422c:	d2f1      	bcs.n	14212 <hexdump_line_print+0x32>
			print_formatted(output, "%02x ", data[i]);
   1422e:	5d3a      	ldrb	r2, [r7, r4]
   14230:	4917      	ldr	r1, [pc, #92]	; (14290 <hexdump_line_print+0xb0>)
   14232:	4628      	mov	r0, r5
   14234:	f7ff fee0 	bl	13ff8 <print_formatted>
   14238:	e7ef      	b.n	1421a <hexdump_line_print+0x3a>
	print_formatted(output, "|");
   1423a:	4916      	ldr	r1, [pc, #88]	; (14294 <hexdump_line_print+0xb4>)
   1423c:	4628      	mov	r0, r5
   1423e:	f7ff fedb 	bl	13ff8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   14242:	2400      	movs	r4, #0
   14244:	e009      	b.n	1425a <hexdump_line_print+0x7a>
			print_formatted(output, " ");
   14246:	4910      	ldr	r1, [pc, #64]	; (14288 <hexdump_line_print+0xa8>)
   14248:	4628      	mov	r0, r5
   1424a:	f7ff fed5 	bl	13ff8 <print_formatted>
   1424e:	e00b      	b.n	14268 <hexdump_line_print+0x88>
			print_formatted(output, "%c",
   14250:	4911      	ldr	r1, [pc, #68]	; (14298 <hexdump_line_print+0xb8>)
   14252:	4628      	mov	r0, r5
   14254:	f7ff fed0 	bl	13ff8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   14258:	3401      	adds	r4, #1
   1425a:	2c0f      	cmp	r4, #15
   1425c:	dc12      	bgt.n	14284 <hexdump_line_print+0xa4>
		if (i > 0 && !(i % 8)) {
   1425e:	2c00      	cmp	r4, #0
   14260:	dd02      	ble.n	14268 <hexdump_line_print+0x88>
   14262:	f014 0f07 	tst.w	r4, #7
   14266:	d0ee      	beq.n	14246 <hexdump_line_print+0x66>
		if (i < length) {
   14268:	42b4      	cmp	r4, r6
   1426a:	d206      	bcs.n	1427a <hexdump_line_print+0x9a>
			unsigned char c = (unsigned char)data[i];
   1426c:	5d3a      	ldrb	r2, [r7, r4]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
   1426e:	f1a2 0320 	sub.w	r3, r2, #32
			print_formatted(output, "%c",
   14272:	2b5e      	cmp	r3, #94	; 0x5e
   14274:	d9ec      	bls.n	14250 <hexdump_line_print+0x70>
   14276:	222e      	movs	r2, #46	; 0x2e
   14278:	e7ea      	b.n	14250 <hexdump_line_print+0x70>
			print_formatted(output, " ");
   1427a:	4903      	ldr	r1, [pc, #12]	; (14288 <hexdump_line_print+0xa8>)
   1427c:	4628      	mov	r0, r5
   1427e:	f7ff febb 	bl	13ff8 <print_formatted>
   14282:	e7e9      	b.n	14258 <hexdump_line_print+0x78>
}
   14284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14288:	00031cb0 	.word	0x00031cb0
   1428c:	000347e8 	.word	0x000347e8
   14290:	00031cc0 	.word	0x00031cc0
   14294:	00031cc8 	.word	0x00031cc8
   14298:	00031ccc 	.word	0x00031ccc

0001429c <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
   1429c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   142a0:	b084      	sub	sp, #16
   142a2:	4604      	mov	r4, r0
   142a4:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
   142a8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   142aa:	9e0d      	ldr	r6, [sp, #52]	; 0x34
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
   142ac:	b995      	cbnz	r5, 142d4 <log_output_process+0x38>
		prefix_offset = 0;
		/* source set to 1 indicates raw string and contrary to printk
		 * case it should not append anything to the output (printk is
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   142ae:	2b01      	cmp	r3, #1
   142b0:	d01b      	beq.n	142ea <log_output_process+0x4e>
   142b2:	4817      	ldr	r0, [pc, #92]	; (14310 <log_output_process+0x74>)
		prefix_offset = 0;
   142b4:	f04f 0800 	mov.w	r8, #0
	}

	if (package) {
   142b8:	b127      	cbz	r7, 142c4 <log_output_process+0x28>
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
   142ba:	463b      	mov	r3, r7
   142bc:	4622      	mov	r2, r4
   142be:	4915      	ldr	r1, [pc, #84]	; (14314 <log_output_process+0x78>)
   142c0:	f013 fdfe 	bl	27ec0 <cbpprintf_external>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
   142c4:	b9ae      	cbnz	r6, 142f2 <log_output_process+0x56>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
   142c6:	b9ed      	cbnz	r5, 14304 <log_output_process+0x68>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
   142c8:	4620      	mov	r0, r4
   142ca:	f015 f873 	bl	293b4 <log_output_flush>
}
   142ce:	b004      	add	sp, #16
   142d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		prefix_offset = prefix_print(output, flags, 0, timestamp, domain, source, level);
   142d4:	9502      	str	r5, [sp, #8]
   142d6:	9301      	str	r3, [sp, #4]
   142d8:	9200      	str	r2, [sp, #0]
   142da:	460b      	mov	r3, r1
   142dc:	2200      	movs	r2, #0
   142de:	990e      	ldr	r1, [sp, #56]	; 0x38
   142e0:	f7ff ff30 	bl	14144 <prefix_print>
   142e4:	4680      	mov	r8, r0
		cb = out_func;
   142e6:	480c      	ldr	r0, [pc, #48]	; (14318 <log_output_process+0x7c>)
   142e8:	e7e6      	b.n	142b8 <log_output_process+0x1c>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   142ea:	480b      	ldr	r0, [pc, #44]	; (14318 <log_output_process+0x7c>)
		prefix_offset = 0;
   142ec:	f04f 0800 	mov.w	r8, #0
   142f0:	e7e2      	b.n	142b8 <log_output_process+0x1c>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
   142f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   142f4:	9300      	str	r3, [sp, #0]
   142f6:	4643      	mov	r3, r8
   142f8:	4632      	mov	r2, r6
   142fa:	990c      	ldr	r1, [sp, #48]	; 0x30
   142fc:	4620      	mov	r0, r4
   142fe:	f015 f83e 	bl	2937e <log_msg_hexdump>
   14302:	e7e0      	b.n	142c6 <log_output_process+0x2a>
		postfix_print(output, flags, level);
   14304:	462a      	mov	r2, r5
   14306:	990e      	ldr	r1, [sp, #56]	; 0x38
   14308:	4620      	mov	r0, r4
   1430a:	f015 f82c 	bl	29366 <postfix_print>
   1430e:	e7db      	b.n	142c8 <log_output_process+0x2c>
   14310:	00029407 	.word	0x00029407
   14314:	0002933f 	.word	0x0002933f
   14318:	000293cf 	.word	0x000293cf

0001431c <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
   1431c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14320:	b086      	sub	sp, #24
   14322:	4605      	mov	r5, r0
   14324:	460c      	mov	r4, r1
   14326:	4617      	mov	r7, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
   14328:	f8d1 8008 	ldr.w	r8, [r1, #8]
	return msg->hdr.desc.level;
   1432c:	880e      	ldrh	r6, [r1, #0]
   1432e:	f3c6 1682 	ubfx	r6, r6, #6, #3
	return msg->hdr.desc.domain;
   14332:	7808      	ldrb	r0, [r1, #0]
   14334:	f3c0 00c2 	ubfx	r0, r0, #3, #3
	return msg->hdr.source;
   14338:	684b      	ldr	r3, [r1, #4]
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
   1433a:	b133      	cbz	r3, 1434a <log_output_msg_process+0x2e>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
   1433c:	4a11      	ldr	r2, [pc, #68]	; (14384 <log_output_msg_process+0x68>)
   1433e:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
   14340:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
   14344:	2900      	cmp	r1, #0
   14346:	da18      	bge.n	1437a <log_output_msg_process+0x5e>
   14348:	2300      	movs	r3, #0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
   1434a:	4622      	mov	r2, r4
   1434c:	f852 1b10 	ldr.w	r1, [r2], #16
   14350:	f3c1 2149 	ubfx	r1, r1, #9, #10
	*len = msg->hdr.desc.data_len;
   14354:	8860      	ldrh	r0, [r4, #2]
   14356:	f3c0 00cb 	ubfx	r0, r0, #3, #12
	return msg->data + msg->hdr.desc.package_len;
   1435a:	1854      	adds	r4, r2, r1
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
   1435c:	b901      	cbnz	r1, 14360 <log_output_msg_process+0x44>
   1435e:	2200      	movs	r2, #0
   14360:	9704      	str	r7, [sp, #16]
   14362:	9003      	str	r0, [sp, #12]
   14364:	9402      	str	r4, [sp, #8]
   14366:	9201      	str	r2, [sp, #4]
   14368:	9600      	str	r6, [sp, #0]
   1436a:	2200      	movs	r2, #0
   1436c:	4641      	mov	r1, r8
   1436e:	4628      	mov	r0, r5
   14370:	f7ff ff94 	bl	1429c <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
   14374:	b006      	add	sp, #24
   14376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
   1437a:	f7ff fe01 	bl	13f80 <log_source_name_get>
   1437e:	4603      	mov	r3, r0
   14380:	e7e3      	b.n	1434a <log_output_msg_process+0x2e>
   14382:	bf00      	nop
   14384:	00031400 	.word	0x00031400

00014388 <log_output_dropped_process>:

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
   14388:	b570      	push	{r4, r5, r6, lr}
   1438a:	b082      	sub	sp, #8
   1438c:	4604      	mov	r4, r0
	char buf[5];
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;
   1438e:	6805      	ldr	r5, [r0, #0]

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   14390:	f242 730f 	movw	r3, #9999	; 0x270f
   14394:	428b      	cmp	r3, r1
   14396:	bf28      	it	cs
   14398:	460b      	movcs	r3, r1
   1439a:	4a0e      	ldr	r2, [pc, #56]	; (143d4 <log_output_dropped_process+0x4c>)
   1439c:	2105      	movs	r1, #5
   1439e:	4668      	mov	r0, sp
   143a0:	f013 fe11 	bl	27fc6 <snprintk>
   143a4:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
		     output->control_block->ctx);
   143a6:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   143a8:	685b      	ldr	r3, [r3, #4]
   143aa:	220b      	movs	r2, #11
   143ac:	490a      	ldr	r1, [pc, #40]	; (143d8 <log_output_dropped_process+0x50>)
   143ae:	4628      	mov	r0, r5
   143b0:	f014 ffb8 	bl	29324 <buffer_write>
	buffer_write(outf, buf, len, output->control_block->ctx);
   143b4:	6863      	ldr	r3, [r4, #4]
   143b6:	685b      	ldr	r3, [r3, #4]
   143b8:	4632      	mov	r2, r6
   143ba:	4669      	mov	r1, sp
   143bc:	4628      	mov	r0, r5
   143be:	f014 ffb1 	bl	29324 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
		     output->control_block->ctx);
   143c2:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
   143c4:	685b      	ldr	r3, [r3, #4]
   143c6:	221b      	movs	r2, #27
   143c8:	4904      	ldr	r1, [pc, #16]	; (143dc <log_output_dropped_process+0x54>)
   143ca:	4628      	mov	r0, r5
   143cc:	f014 ffaa 	bl	29324 <buffer_write>
}
   143d0:	b002      	add	sp, #8
   143d2:	bd70      	pop	{r4, r5, r6, pc}
   143d4:	00032ff0 	.word	0x00032ff0
   143d8:	00031cec 	.word	0x00031cec
   143dc:	00031cd0 	.word	0x00031cd0

000143e0 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
   143e0:	4b07      	ldr	r3, [pc, #28]	; (14400 <log_output_timestamp_freq_set+0x20>)
   143e2:	2201      	movs	r2, #1
   143e4:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   143e6:	e004      	b.n	143f2 <log_output_timestamp_freq_set+0x12>
		frequency /= 2U;
   143e8:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   143ea:	4a05      	ldr	r2, [pc, #20]	; (14400 <log_output_timestamp_freq_set+0x20>)
   143ec:	6813      	ldr	r3, [r2, #0]
   143ee:	005b      	lsls	r3, r3, #1
   143f0:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
   143f2:	4b04      	ldr	r3, [pc, #16]	; (14404 <log_output_timestamp_freq_set+0x24>)
   143f4:	4298      	cmp	r0, r3
   143f6:	d8f7      	bhi.n	143e8 <log_output_timestamp_freq_set+0x8>
	}

	freq = frequency;
   143f8:	4b03      	ldr	r3, [pc, #12]	; (14408 <log_output_timestamp_freq_set+0x28>)
   143fa:	6018      	str	r0, [r3, #0]
}
   143fc:	4770      	bx	lr
   143fe:	bf00      	nop
   14400:	20007b98 	.word	0x20007b98
   14404:	000f4240 	.word	0x000f4240
   14408:	20007b9c 	.word	0x20007b9c

0001440c <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
   1440c:	4b03      	ldr	r3, [pc, #12]	; (1441c <log_backend_rtt_init+0x10>)
   1440e:	2201      	movs	r2, #1
   14410:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
   14412:	4b03      	ldr	r3, [pc, #12]	; (14420 <log_backend_rtt_init+0x14>)
   14414:	4a03      	ldr	r2, [pc, #12]	; (14424 <log_backend_rtt_init+0x18>)
   14416:	601a      	str	r2, [r3, #0]
}
   14418:	4770      	bx	lr
   1441a:	bf00      	nop
   1441c:	200090ba 	.word	0x200090ba
   14420:	20007bc8 	.word	0x20007bc8
   14424:	20007bcc 	.word	0x20007bcc

00014428 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
   14428:	4b01      	ldr	r3, [pc, #4]	; (14430 <format_set+0x8>)
   1442a:	6019      	str	r1, [r3, #0]
	return 0;
}
   1442c:	2000      	movs	r0, #0
   1442e:	4770      	bx	lr
   14430:	20007bb4 	.word	0x20007bb4

00014434 <on_failed_write>:
{
   14434:	b508      	push	{r3, lr}
	if (retry_cnt == 0) {
   14436:	b918      	cbnz	r0, 14440 <on_failed_write+0xc>
		host_present = false;
   14438:	4b07      	ldr	r3, [pc, #28]	; (14458 <on_failed_write+0x24>)
   1443a:	2200      	movs	r2, #0
   1443c:	701a      	strb	r2, [r3, #0]
}
   1443e:	bd08      	pop	{r3, pc}
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
   14440:	4b06      	ldr	r3, [pc, #24]	; (1445c <on_failed_write+0x28>)
   14442:	781b      	ldrb	r3, [r3, #0]
	} else if (is_sync_mode()) {
   14444:	b123      	cbz	r3, 14450 <on_failed_write+0x1c>
	z_impl_k_busy_wait(usec_to_wait);
   14446:	f241 3088 	movw	r0, #5000	; 0x1388
   1444a:	f01c fbda 	bl	30c02 <z_impl_k_busy_wait>
}
   1444e:	e7f6      	b.n	1443e <on_failed_write+0xa>
		k_msleep(CONFIG_LOG_BACKEND_RTT_RETRY_DELAY_MS);
   14450:	2005      	movs	r0, #5
   14452:	f014 ffe7 	bl	29424 <k_msleep>
}
   14456:	e7f2      	b.n	1443e <on_failed_write+0xa>
   14458:	200090ba 	.word	0x200090ba
   1445c:	200090bb 	.word	0x200090bb

00014460 <on_write>:
{
   14460:	b538      	push	{r3, r4, r5, lr}
   14462:	4604      	mov	r4, r0
	host_present = true;
   14464:	4b0a      	ldr	r3, [pc, #40]	; (14490 <on_write+0x30>)
   14466:	2201      	movs	r2, #1
   14468:	701a      	strb	r2, [r3, #0]
	return panic_mode;
   1446a:	4b0a      	ldr	r3, [pc, #40]	; (14494 <on_write+0x34>)
   1446c:	781b      	ldrb	r3, [r3, #0]
	if (is_panic_mode()) {
   1446e:	b92b      	cbnz	r3, 1447c <on_write+0x1c>
}
   14470:	bd38      	pop	{r3, r4, r5, pc}
			on_failed_write(retry_cnt--);
   14472:	1e65      	subs	r5, r4, #1
   14474:	4620      	mov	r0, r4
   14476:	f7ff ffdd 	bl	14434 <on_failed_write>
   1447a:	462c      	mov	r4, r5
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
   1447c:	2000      	movs	r0, #0
   1447e:	f011 fb8f 	bl	25ba0 <SEGGER_RTT_HasDataUp>
   14482:	2800      	cmp	r0, #0
   14484:	d0f4      	beq.n	14470 <on_write+0x10>
   14486:	4b02      	ldr	r3, [pc, #8]	; (14490 <on_write+0x30>)
   14488:	781b      	ldrb	r3, [r3, #0]
   1448a:	2b00      	cmp	r3, #0
   1448c:	d1f1      	bne.n	14472 <on_write+0x12>
   1448e:	e7ef      	b.n	14470 <on_write+0x10>
   14490:	200090ba 	.word	0x200090ba
   14494:	200090bb 	.word	0x200090bb

00014498 <data_out_block_mode>:
{
   14498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1449a:	4606      	mov	r6, r0
   1449c:	460d      	mov	r5, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
   1449e:	2704      	movs	r7, #4
   144a0:	e00d      	b.n	144be <data_out_block_mode+0x26>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   144a2:	462a      	mov	r2, r5
   144a4:	4631      	mov	r1, r6
   144a6:	2000      	movs	r0, #0
   144a8:	f011 fae0 	bl	25a6c <SEGGER_RTT_WriteSkipNoLock>
   144ac:	4604      	mov	r4, r0
   144ae:	e014      	b.n	144da <data_out_block_mode+0x42>
			on_write(retry_cnt);
   144b0:	4638      	mov	r0, r7
   144b2:	f7ff ffd5 	bl	14460 <on_write>
	} while ((ret == 0) && host_present);
   144b6:	b9dc      	cbnz	r4, 144f0 <data_out_block_mode+0x58>
   144b8:	4b11      	ldr	r3, [pc, #68]	; (14500 <data_out_block_mode+0x68>)
   144ba:	781b      	ldrb	r3, [r3, #0]
   144bc:	b1c3      	cbz	r3, 144f0 <data_out_block_mode+0x58>
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
   144be:	4b11      	ldr	r3, [pc, #68]	; (14504 <data_out_block_mode+0x6c>)
   144c0:	781b      	ldrb	r3, [r3, #0]
		if (!is_sync_mode()) {
   144c2:	2b00      	cmp	r3, #0
   144c4:	d1ed      	bne.n	144a2 <data_out_block_mode+0xa>
			RTT_LOCK();
   144c6:	f011 fb7b 	bl	25bc0 <zephyr_rtt_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   144ca:	462a      	mov	r2, r5
   144cc:	4631      	mov	r1, r6
   144ce:	2000      	movs	r0, #0
   144d0:	f011 facc 	bl	25a6c <SEGGER_RTT_WriteSkipNoLock>
   144d4:	4604      	mov	r4, r0
			RTT_UNLOCK();
   144d6:	f011 fb7f 	bl	25bd8 <zephyr_rtt_mutex_unlock>
		if (ret) {
   144da:	2c00      	cmp	r4, #0
   144dc:	d1e8      	bne.n	144b0 <data_out_block_mode+0x18>
		} else if (host_present) {
   144de:	4b08      	ldr	r3, [pc, #32]	; (14500 <data_out_block_mode+0x68>)
   144e0:	781b      	ldrb	r3, [r3, #0]
   144e2:	2b00      	cmp	r3, #0
   144e4:	d0e7      	beq.n	144b6 <data_out_block_mode+0x1e>
			retry_cnt--;
   144e6:	3f01      	subs	r7, #1
			on_failed_write(retry_cnt);
   144e8:	4638      	mov	r0, r7
   144ea:	f7ff ffa3 	bl	14434 <on_failed_write>
   144ee:	e7e2      	b.n	144b6 <data_out_block_mode+0x1e>
	return ((ret == 0) && host_present) ? 0 : length;
   144f0:	b914      	cbnz	r4, 144f8 <data_out_block_mode+0x60>
   144f2:	4b03      	ldr	r3, [pc, #12]	; (14500 <data_out_block_mode+0x68>)
   144f4:	781b      	ldrb	r3, [r3, #0]
   144f6:	b903      	cbnz	r3, 144fa <data_out_block_mode+0x62>
   144f8:	462c      	mov	r4, r5
}
   144fa:	4620      	mov	r0, r4
   144fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   144fe:	bf00      	nop
   14500:	200090ba 	.word	0x200090ba
   14504:	200090bb 	.word	0x200090bb

00014508 <panic>:
{
   14508:	b508      	push	{r3, lr}
	panic_mode = true;
   1450a:	4b03      	ldr	r3, [pc, #12]	; (14518 <panic+0x10>)
   1450c:	2201      	movs	r2, #1
   1450e:	701a      	strb	r2, [r3, #0]
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
   14510:	4802      	ldr	r0, [pc, #8]	; (1451c <panic+0x14>)
   14512:	f014 ff4f 	bl	293b4 <log_output_flush>
}
   14516:	bd08      	pop	{r3, pc}
   14518:	200090bb 	.word	0x200090bb
   1451c:	00031d6c 	.word	0x00031d6c

00014520 <dropped>:
{
   14520:	b508      	push	{r3, lr}
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
   14522:	4802      	ldr	r0, [pc, #8]	; (1452c <dropped+0xc>)
   14524:	f7ff ff30 	bl	14388 <log_output_dropped_process>
}
   14528:	bd08      	pop	{r3, pc}
   1452a:	bf00      	nop
   1452c:	00031d6c 	.word	0x00031d6c

00014530 <process>:
{
   14530:	b510      	push	{r4, lr}
   14532:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   14534:	4b04      	ldr	r3, [pc, #16]	; (14548 <process+0x18>)
   14536:	6818      	ldr	r0, [r3, #0]
   14538:	f7ff fb44 	bl	13bc4 <log_format_func_t_get>
   1453c:	4603      	mov	r3, r0
	log_output_func(&log_output_rtt, &msg->log, flags);
   1453e:	220f      	movs	r2, #15
   14540:	4621      	mov	r1, r4
   14542:	4802      	ldr	r0, [pc, #8]	; (1454c <process+0x1c>)
   14544:	4798      	blx	r3
}
   14546:	bd10      	pop	{r4, pc}
   14548:	20007bb4 	.word	0x20007bb4
   1454c:	00031d6c 	.word	0x00031d6c

00014550 <disk_init>:
	k_mutex_unlock(&mutex);
	return rc;
}

static int disk_init(const struct device *dev)
{
   14550:	b508      	push	{r3, lr}
	return z_impl_k_mutex_init(mutex);
   14552:	4804      	ldr	r0, [pc, #16]	; (14564 <disk_init+0x14>)
   14554:	f01b fee8 	bl	30328 <z_impl_k_mutex_init>
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   14558:	4b03      	ldr	r3, [pc, #12]	; (14568 <disk_init+0x18>)
   1455a:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   1455c:	605b      	str	r3, [r3, #4]
	ARG_UNUSED(dev);

	k_mutex_init(&mutex);
	sys_dlist_init(&disk_access_list);
	return 0;
}
   1455e:	2000      	movs	r0, #0
   14560:	bd08      	pop	{r3, pc}
   14562:	bf00      	nop
   14564:	20007be4 	.word	0x20007be4
   14568:	20007bf8 	.word	0x20007bf8

0001456c <disk_access_get_di>:
{
   1456c:	b570      	push	{r4, r5, r6, lr}
   1456e:	4606      	mov	r6, r0
	size_t name_len = strlen(name);
   14570:	f015 fad1 	bl	29b16 <strlen>
   14574:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   14576:	f04f 32ff 	mov.w	r2, #4294967295
   1457a:	f04f 33ff 	mov.w	r3, #4294967295
   1457e:	4811      	ldr	r0, [pc, #68]	; (145c4 <disk_access_get_di+0x58>)
   14580:	f011 ff18 	bl	263b4 <z_impl_k_mutex_lock>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   14584:	4b10      	ldr	r3, [pc, #64]	; (145c8 <disk_access_get_di+0x5c>)
   14586:	681c      	ldr	r4, [r3, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14588:	429c      	cmp	r4, r3
   1458a:	d106      	bne.n	1459a <disk_access_get_di+0x2e>
   1458c:	2400      	movs	r4, #0
   1458e:	e004      	b.n	1459a <disk_access_get_di+0x2e>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   14590:	4b0d      	ldr	r3, [pc, #52]	; (145c8 <disk_access_get_di+0x5c>)
   14592:	685b      	ldr	r3, [r3, #4]
   14594:	429c      	cmp	r4, r3
   14596:	d012      	beq.n	145be <disk_access_get_di+0x52>
   14598:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_NODE(&disk_access_list, node) {
   1459a:	b15c      	cbz	r4, 145b4 <disk_access_get_di+0x48>
		if (strlen(itr->name) != name_len) {
   1459c:	68a0      	ldr	r0, [r4, #8]
   1459e:	f015 faba 	bl	29b16 <strlen>
   145a2:	42a8      	cmp	r0, r5
   145a4:	d1f4      	bne.n	14590 <disk_access_get_di+0x24>
		if (strncmp(name, itr->name, name_len) == 0) {
   145a6:	462a      	mov	r2, r5
   145a8:	68a1      	ldr	r1, [r4, #8]
   145aa:	4630      	mov	r0, r6
   145ac:	f015 fad1 	bl	29b52 <strncmp>
   145b0:	2800      	cmp	r0, #0
   145b2:	d1ed      	bne.n	14590 <disk_access_get_di+0x24>
	return z_impl_k_mutex_unlock(mutex);
   145b4:	4803      	ldr	r0, [pc, #12]	; (145c4 <disk_access_get_di+0x58>)
   145b6:	f011 ff81 	bl	264bc <z_impl_k_mutex_unlock>
}
   145ba:	4620      	mov	r0, r4
   145bc:	bd70      	pop	{r4, r5, r6, pc}
   145be:	2400      	movs	r4, #0
   145c0:	e7eb      	b.n	1459a <disk_access_get_di+0x2e>
   145c2:	bf00      	nop
   145c4:	20007be4 	.word	0x20007be4
   145c8:	20007bf8 	.word	0x20007bf8

000145cc <disk_access_register>:
{
   145cc:	b510      	push	{r4, lr}
   145ce:	b082      	sub	sp, #8
   145d0:	4604      	mov	r4, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   145d2:	f04f 32ff 	mov.w	r2, #4294967295
   145d6:	f04f 33ff 	mov.w	r3, #4294967295
   145da:	483d      	ldr	r0, [pc, #244]	; (146d0 <disk_access_register+0x104>)
   145dc:	f011 feea 	bl	263b4 <z_impl_k_mutex_lock>
	if ((disk == NULL) || (disk->name == NULL)) {
   145e0:	b194      	cbz	r4, 14608 <disk_access_register+0x3c>
   145e2:	68a0      	ldr	r0, [r4, #8]
   145e4:	b180      	cbz	r0, 14608 <disk_access_register+0x3c>
	if (disk_access_get_di(disk->name) != NULL) {
   145e6:	f7ff ffc1 	bl	1456c <disk_access_get_di>
   145ea:	2800      	cmp	r0, #0
   145ec:	d13e      	bne.n	1466c <disk_access_register+0xa0>
 * @param node the element to append
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;
   145ee:	4b39      	ldr	r3, [pc, #228]	; (146d4 <disk_access_register+0x108>)
   145f0:	685a      	ldr	r2, [r3, #4]

	node->next = list;
   145f2:	6023      	str	r3, [r4, #0]
	node->prev = tail;
   145f4:	6062      	str	r2, [r4, #4]

	tail->next = node;
   145f6:	6014      	str	r4, [r2, #0]
	list->tail = node;
   145f8:	605c      	str	r4, [r3, #4]
	int rc = 0;
   145fa:	2400      	movs	r4, #0
	return z_impl_k_mutex_unlock(mutex);
   145fc:	4834      	ldr	r0, [pc, #208]	; (146d0 <disk_access_register+0x104>)
   145fe:	f011 ff5d 	bl	264bc <z_impl_k_mutex_unlock>
}
   14602:	4620      	mov	r0, r4
   14604:	b002      	add	sp, #8
   14606:	bd10      	pop	{r4, pc}
		LOG_ERR("invalid disk interface!!");
   14608:	2006      	movs	r0, #6
   1460a:	f7ff fb7d 	bl	13d08 <z_log_msg_alloc>
   1460e:	2200      	movs	r2, #0
   14610:	f36f 0200 	bfc	r2, #0, #1
   14614:	f36f 0241 	bfc	r2, #1, #1
   14618:	f36f 0282 	bfc	r2, #2, #1
   1461c:	f36f 02c5 	bfc	r2, #3, #3
   14620:	2301      	movs	r3, #1
   14622:	f363 1288 	bfi	r2, r3, #6, #3
   14626:	2308      	movs	r3, #8
   14628:	f363 2252 	bfi	r2, r3, #9, #10
   1462c:	f36f 42de 	bfc	r2, #19, #12
   14630:	f36f 72df 	bfc	r2, #31, #1
   14634:	4604      	mov	r4, r0
   14636:	b188      	cbz	r0, 1465c <disk_access_register+0x90>
   14638:	f110 0310 	adds.w	r3, r0, #16
   1463c:	d001      	beq.n	14642 <disk_access_register+0x76>
   1463e:	4926      	ldr	r1, [pc, #152]	; (146d8 <disk_access_register+0x10c>)
   14640:	6141      	str	r1, [r0, #20]
   14642:	b15b      	cbz	r3, 1465c <disk_access_register+0x90>
   14644:	2302      	movs	r3, #2
   14646:	f88d 3004 	strb.w	r3, [sp, #4]
   1464a:	2300      	movs	r3, #0
   1464c:	f88d 3005 	strb.w	r3, [sp, #5]
   14650:	f88d 3006 	strb.w	r3, [sp, #6]
   14654:	f88d 3007 	strb.w	r3, [sp, #7]
   14658:	9801      	ldr	r0, [sp, #4]
   1465a:	6120      	str	r0, [r4, #16]
   1465c:	2300      	movs	r3, #0
   1465e:	491f      	ldr	r1, [pc, #124]	; (146dc <disk_access_register+0x110>)
   14660:	4620      	mov	r0, r4
   14662:	f014 fdba 	bl	291da <z_log_msg_finalize>
		rc = -EINVAL;
   14666:	f06f 0415 	mvn.w	r4, #21
		goto reg_err;
   1466a:	e7c7      	b.n	145fc <disk_access_register+0x30>
		LOG_ERR("disk interface already registered!!");
   1466c:	2006      	movs	r0, #6
   1466e:	f7ff fb4b 	bl	13d08 <z_log_msg_alloc>
   14672:	2200      	movs	r2, #0
   14674:	f36f 0200 	bfc	r2, #0, #1
   14678:	f36f 0241 	bfc	r2, #1, #1
   1467c:	f36f 0282 	bfc	r2, #2, #1
   14680:	f36f 02c5 	bfc	r2, #3, #3
   14684:	2301      	movs	r3, #1
   14686:	f363 1288 	bfi	r2, r3, #6, #3
   1468a:	2308      	movs	r3, #8
   1468c:	f363 2252 	bfi	r2, r3, #9, #10
   14690:	f36f 42de 	bfc	r2, #19, #12
   14694:	f36f 72df 	bfc	r2, #31, #1
   14698:	4604      	mov	r4, r0
   1469a:	b188      	cbz	r0, 146c0 <disk_access_register+0xf4>
   1469c:	f110 0310 	adds.w	r3, r0, #16
   146a0:	d001      	beq.n	146a6 <disk_access_register+0xda>
   146a2:	490f      	ldr	r1, [pc, #60]	; (146e0 <disk_access_register+0x114>)
   146a4:	6141      	str	r1, [r0, #20]
   146a6:	b15b      	cbz	r3, 146c0 <disk_access_register+0xf4>
   146a8:	2302      	movs	r3, #2
   146aa:	f88d 3004 	strb.w	r3, [sp, #4]
   146ae:	2300      	movs	r3, #0
   146b0:	f88d 3005 	strb.w	r3, [sp, #5]
   146b4:	f88d 3006 	strb.w	r3, [sp, #6]
   146b8:	f88d 3007 	strb.w	r3, [sp, #7]
   146bc:	9801      	ldr	r0, [sp, #4]
   146be:	6120      	str	r0, [r4, #16]
   146c0:	2300      	movs	r3, #0
   146c2:	4906      	ldr	r1, [pc, #24]	; (146dc <disk_access_register+0x110>)
   146c4:	4620      	mov	r0, r4
   146c6:	f014 fd88 	bl	291da <z_log_msg_finalize>
		rc = -EINVAL;
   146ca:	f06f 0415 	mvn.w	r4, #21
		goto reg_err;
   146ce:	e795      	b.n	145fc <disk_access_register+0x30>
   146d0:	20007be4 	.word	0x20007be4
   146d4:	20007bf8 	.word	0x20007bf8
   146d8:	00031d7c 	.word	0x00031d7c
   146dc:	00031488 	.word	0x00031488
   146e0:	00031d98 	.word	0x00031d98

000146e4 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   146e4:	b570      	push	{r4, r5, r6, lr}
   146e6:	4605      	mov	r5, r0
	__asm__ volatile(
   146e8:	f04f 0340 	mov.w	r3, #64	; 0x40
   146ec:	f3ef 8611 	mrs	r6, BASEPRI
   146f0:	f383 8812 	msr	BASEPRI_MAX, r3
   146f4:	f3bf 8f6f 	isb	sy
   146f8:	4b0e      	ldr	r3, [pc, #56]	; (14734 <pm_state_notify+0x50>)
   146fa:	681c      	ldr	r4, [r3, #0]
   146fc:	e00d      	b.n	1471a <pm_state_notify+0x36>
	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
		if (entering_state) {
			callback = notifier->state_entry;
		} else {
			callback = notifier->state_exit;
   146fe:	68a2      	ldr	r2, [r4, #8]
		}

		if (callback) {
   14700:	b13a      	cbz	r2, 14712 <pm_state_notify+0x2e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   14702:	4b0d      	ldr	r3, [pc, #52]	; (14738 <pm_state_notify+0x54>)
   14704:	7d1b      	ldrb	r3, [r3, #20]
   14706:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1470a:	490c      	ldr	r1, [pc, #48]	; (1473c <pm_state_notify+0x58>)
   1470c:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
   14710:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   14712:	4623      	mov	r3, r4
	return node->next;
   14714:	6824      	ldr	r4, [r4, #0]
   14716:	b104      	cbz	r4, 1471a <pm_state_notify+0x36>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
   14718:	b123      	cbz	r3, 14724 <pm_state_notify+0x40>
   1471a:	b12c      	cbz	r4, 14728 <pm_state_notify+0x44>
		if (entering_state) {
   1471c:	2d00      	cmp	r5, #0
   1471e:	d0ee      	beq.n	146fe <pm_state_notify+0x1a>
			callback = notifier->state_entry;
   14720:	6862      	ldr	r2, [r4, #4]
   14722:	e7ed      	b.n	14700 <pm_state_notify+0x1c>
   14724:	461c      	mov	r4, r3
   14726:	e7f8      	b.n	1471a <pm_state_notify+0x36>
	__asm__ volatile(
   14728:	f386 8811 	msr	BASEPRI, r6
   1472c:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   14730:	bd70      	pop	{r4, r5, r6, pc}
   14732:	bf00      	nop
   14734:	20007c18 	.word	0x20007c18
   14738:	20009070 	.word	0x20009070
   1473c:	20007c0c 	.word	0x20007c0c

00014740 <pm_exit_pos_ops>:
{
   14740:	b508      	push	{r3, lr}
	if (pm_state_exit_post_ops != NULL) {
   14742:	4b06      	ldr	r3, [pc, #24]	; (1475c <pm_exit_pos_ops+0x1c>)
   14744:	b123      	cbz	r3, 14750 <pm_exit_pos_ops+0x10>
		pm_state_exit_post_ops(info->state, info->substate_id);
   14746:	7841      	ldrb	r1, [r0, #1]
   14748:	7800      	ldrb	r0, [r0, #0]
   1474a:	f015 fa99 	bl	29c80 <pm_state_exit_post_ops>
}
   1474e:	bd08      	pop	{r3, pc}
   14750:	2300      	movs	r3, #0
   14752:	f383 8811 	msr	BASEPRI, r3
   14756:	f3bf 8f6f 	isb	sy
   1475a:	e7f8      	b.n	1474e <pm_exit_pos_ops+0xe>
   1475c:	00029c81 	.word	0x00029c81

00014760 <pm_system_resume>:

void pm_system_resume(void)
{
   14760:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
   14762:	4b0e      	ldr	r3, [pc, #56]	; (1479c <pm_system_resume+0x3c>)
   14764:	7d1c      	ldrb	r4, [r3, #20]
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   14766:	4621      	mov	r1, r4
   14768:	480d      	ldr	r0, [pc, #52]	; (147a0 <pm_system_resume+0x40>)
   1476a:	f014 fee0 	bl	2952e <atomic_test_and_clear_bit>
   1476e:	b900      	cbnz	r0, 14772 <pm_system_resume+0x12>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
			0, 0};
	}
}
   14770:	bd70      	pop	{r4, r5, r6, pc}
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
   14772:	0065      	lsls	r5, r4, #1
   14774:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   14778:	4e0a      	ldr	r6, [pc, #40]	; (147a4 <pm_system_resume+0x44>)
   1477a:	eb06 0080 	add.w	r0, r6, r0, lsl #2
   1477e:	f7ff ffdf 	bl	14740 <pm_exit_pos_ops>
		pm_state_notify(false);
   14782:	2000      	movs	r0, #0
   14784:	f7ff ffae 	bl	146e4 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   14788:	192b      	adds	r3, r5, r4
   1478a:	0099      	lsls	r1, r3, #2
   1478c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   14790:	2200      	movs	r2, #0
   14792:	5072      	str	r2, [r6, r1]
   14794:	605a      	str	r2, [r3, #4]
   14796:	609a      	str	r2, [r3, #8]
}
   14798:	e7ea      	b.n	14770 <pm_system_resume+0x10>
   1479a:	bf00      	nop
   1479c:	20009070 	.word	0x20009070
   147a0:	20007c20 	.word	0x20007c20
   147a4:	20007c0c 	.word	0x20007c0c

000147a8 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
   147a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   147aa:	4605      	mov	r5, r0
	uint8_t id = CURRENT_CPU;
   147ac:	4b38      	ldr	r3, [pc, #224]	; (14890 <pm_system_suspend+0xe8>)
   147ae:	7d1c      	ldrb	r4, [r3, #20]
	__asm__ volatile(
   147b0:	f04f 0340 	mov.w	r3, #64	; 0x40
   147b4:	f3ef 8611 	mrs	r6, BASEPRI
   147b8:	f383 8812 	msr	BASEPRI_MAX, r3
   147bc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
   147c0:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   147c4:	4b33      	ldr	r3, [pc, #204]	; (14894 <pm_system_suspend+0xec>)
   147c6:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   147ca:	2b00      	cmp	r3, #0
   147cc:	d039      	beq.n	14842 <pm_system_suspend+0x9a>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
   147ce:	4b32      	ldr	r3, [pc, #200]	; (14898 <pm_system_suspend+0xf0>)
   147d0:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
   147d4:	4f2f      	ldr	r7, [pc, #188]	; (14894 <pm_system_suspend+0xec>)
   147d6:	ea4f 0e82 	mov.w	lr, r2, lsl #2
   147da:	eb07 0382 	add.w	r3, r7, r2, lsl #2
   147de:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   147e2:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
   147e6:	2300      	movs	r3, #0
   147e8:	f807 300e 	strb.w	r3, [r7, lr]
	__asm__ volatile(
   147ec:	f386 8811 	msr	BASEPRI, r6
   147f0:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   147f4:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   147f8:	4a27      	ldr	r2, [pc, #156]	; (14898 <pm_system_suspend+0xf0>)
   147fa:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   147fe:	2b00      	cmp	r3, #0
   14800:	d044      	beq.n	1488c <pm_system_suspend+0xe4>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
   14802:	f1b5 3fff 	cmp.w	r5, #4294967295
   14806:	d12b      	bne.n	14860 <pm_system_suspend+0xb8>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   14808:	f012 f93e 	bl	26a88 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   1480c:	2001      	movs	r0, #1
   1480e:	f7ff ff69 	bl	146e4 <pm_state_notify>
	atomic_set_bit(z_post_ops_required, id);
   14812:	4621      	mov	r1, r4
   14814:	4821      	ldr	r0, [pc, #132]	; (1489c <pm_system_suspend+0xf4>)
   14816:	f014 fea6 	bl	29566 <atomic_set_bit>
	if (pm_state_set != NULL) {
   1481a:	4b21      	ldr	r3, [pc, #132]	; (148a0 <pm_system_suspend+0xf8>)
   1481c:	b15b      	cbz	r3, 14836 <pm_system_suspend+0x8e>
		pm_state_set(info->state, info->substate_id);
   1481e:	4a1e      	ldr	r2, [pc, #120]	; (14898 <pm_system_suspend+0xf0>)
   14820:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   14824:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   14828:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1482c:	7859      	ldrb	r1, [r3, #1]
   1482e:	f812 0024 	ldrb.w	r0, [r2, r4, lsl #2]
   14832:	f015 fa1d 	bl	29c70 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
   14836:	f7ff ff93 	bl	14760 <pm_system_resume>
	k_sched_unlock();
   1483a:	f012 fb27 	bl	26e8c <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
   1483e:	2001      	movs	r0, #1
}
   14840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		info = pm_policy_next_state(id, ticks);
   14842:	4601      	mov	r1, r0
   14844:	4620      	mov	r0, r4
   14846:	f000 f831 	bl	148ac <pm_policy_next_state>
		if (info != NULL) {
   1484a:	2800      	cmp	r0, #0
   1484c:	d0ce      	beq.n	147ec <pm_system_suspend+0x44>
			z_cpus_pm_state[id] = *info;
   1484e:	eb04 0144 	add.w	r1, r4, r4, lsl #1
   14852:	4b11      	ldr	r3, [pc, #68]	; (14898 <pm_system_suspend+0xf0>)
   14854:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   14858:	c807      	ldmia	r0, {r0, r1, r2}
   1485a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   1485e:	e7c5      	b.n	147ec <pm_system_suspend+0x44>
		     k_us_to_ticks_ceil32(
   14860:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   14864:	4b0c      	ldr	r3, [pc, #48]	; (14898 <pm_system_suspend+0xf0>)
   14866:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   1486a:	6898      	ldr	r0, [r3, #8]
			return (uint32_t)((t * to_hz + off) / from_hz);
   1486c:	0c41      	lsrs	r1, r0, #17
   1486e:	03c0      	lsls	r0, r0, #15
   14870:	4b0c      	ldr	r3, [pc, #48]	; (148a4 <pm_system_suspend+0xfc>)
   14872:	18c0      	adds	r0, r0, r3
   14874:	4a0c      	ldr	r2, [pc, #48]	; (148a8 <pm_system_suspend+0x100>)
   14876:	f04f 0300 	mov.w	r3, #0
   1487a:	f141 0100 	adc.w	r1, r1, #0
   1487e:	f7eb fc3f 	bl	100 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
   14882:	2101      	movs	r1, #1
   14884:	1a28      	subs	r0, r5, r0
   14886:	f01c f989 	bl	30b9c <z_set_timeout_expiry>
   1488a:	e7bd      	b.n	14808 <pm_system_suspend+0x60>
		return false;
   1488c:	2000      	movs	r0, #0
   1488e:	e7d7      	b.n	14840 <pm_system_suspend+0x98>
   14890:	20009070 	.word	0x20009070
   14894:	20007c00 	.word	0x20007c00
   14898:	20007c0c 	.word	0x20007c0c
   1489c:	20007c20 	.word	0x20007c20
   148a0:	00029c71 	.word	0x00029c71
   148a4:	000f423f 	.word	0x000f423f
   148a8:	000f4240 	.word	0x000f4240

000148ac <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   148ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   148b0:	b082      	sub	sp, #8
   148b2:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   148b4:	a901      	add	r1, sp, #4
   148b6:	f000 f845 	bl	14944 <pm_state_cpu_get_all>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   148ba:	1e44      	subs	r4, r0, #1
   148bc:	b224      	sxth	r4, r4
   148be:	e007      	b.n	148d0 <pm_policy_next_state+0x24>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
		    (exit_latency >= max_latency_ticks)) {
			continue;
		}

		if ((ticks == K_TICKS_FOREVER) ||
   148c0:	f1b6 3fff 	cmp.w	r6, #4294967295
   148c4:	d033      	beq.n	1492e <pm_policy_next_state+0x82>
		    (ticks >= (min_residency + exit_latency))) {
   148c6:	4480      	add	r8, r0
		if ((ticks == K_TICKS_FOREVER) ||
   148c8:	45b0      	cmp	r8, r6
   148ca:	d930      	bls.n	1492e <pm_policy_next_state+0x82>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   148cc:	3c01      	subs	r4, #1
   148ce:	b224      	sxth	r4, r4
   148d0:	2c00      	cmp	r4, #0
   148d2:	db2b      	blt.n	1492c <pm_policy_next_state+0x80>
		const struct pm_state_info *state = &cpu_states[i];
   148d4:	9b01      	ldr	r3, [sp, #4]
   148d6:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   148da:	eb03 0582 	add.w	r5, r3, r2, lsl #2
		if (pm_policy_state_lock_is_active(state->state, state->substate_id)) {
   148de:	7869      	ldrb	r1, [r5, #1]
   148e0:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
   148e4:	f014 fe52 	bl	2958c <pm_policy_state_lock_is_active>
   148e8:	2800      	cmp	r0, #0
   148ea:	d1ef      	bne.n	148cc <pm_policy_next_state+0x20>
		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
   148ec:	6868      	ldr	r0, [r5, #4]
   148ee:	0c41      	lsrs	r1, r0, #17
   148f0:	03c0      	lsls	r0, r0, #15
   148f2:	4f11      	ldr	r7, [pc, #68]	; (14938 <pm_policy_next_state+0x8c>)
   148f4:	19c0      	adds	r0, r0, r7
   148f6:	4a11      	ldr	r2, [pc, #68]	; (1493c <pm_policy_next_state+0x90>)
   148f8:	f04f 0300 	mov.w	r3, #0
   148fc:	f141 0100 	adc.w	r1, r1, #0
   14900:	f7eb fbfe 	bl	100 <__aeabi_uldivmod>
   14904:	4680      	mov	r8, r0
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);
   14906:	68ab      	ldr	r3, [r5, #8]
   14908:	0c59      	lsrs	r1, r3, #17
   1490a:	03db      	lsls	r3, r3, #15
   1490c:	19d8      	adds	r0, r3, r7
   1490e:	4a0b      	ldr	r2, [pc, #44]	; (1493c <pm_policy_next_state+0x90>)
   14910:	f04f 0300 	mov.w	r3, #0
   14914:	f141 0100 	adc.w	r1, r1, #0
   14918:	f7eb fbf2 	bl	100 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   1491c:	4b08      	ldr	r3, [pc, #32]	; (14940 <pm_policy_next_state+0x94>)
   1491e:	681b      	ldr	r3, [r3, #0]
   14920:	f1b3 3fff 	cmp.w	r3, #4294967295
   14924:	d0cc      	beq.n	148c0 <pm_policy_next_state+0x14>
   14926:	4283      	cmp	r3, r0
   14928:	d8ca      	bhi.n	148c0 <pm_policy_next_state+0x14>
   1492a:	e7cf      	b.n	148cc <pm_policy_next_state+0x20>
			return state;
		}
	}

	return NULL;
   1492c:	2500      	movs	r5, #0
}
   1492e:	4628      	mov	r0, r5
   14930:	b002      	add	sp, #8
   14932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14936:	bf00      	nop
   14938:	000f423f 	.word	0x000f423f
   1493c:	000f4240 	.word	0x000f4240
   14940:	2000067c 	.word	0x2000067c

00014944 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   14944:	b908      	cbnz	r0, 1494a <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   14946:	4b02      	ldr	r3, [pc, #8]	; (14950 <pm_state_cpu_get_all+0xc>)
   14948:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   1494a:	2000      	movs	r0, #0
   1494c:	4770      	bx	lr
   1494e:	bf00      	nop
   14950:	00031dc8 	.word	0x00031dc8

00014954 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
   14954:	b470      	push	{r4, r5, r6}
   14956:	b08d      	sub	sp, #52	; 0x34
   14958:	4606      	mov	r6, r0
   1495a:	460d      	mov	r5, r1
	const unsigned int rconst[11] = {
   1495c:	f10d 0c04 	add.w	ip, sp, #4
   14960:	4c2b      	ldr	r4, [pc, #172]	; (14a10 <tc_aes128_set_encrypt_key+0xbc>)
   14962:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   14964:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   14968:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1496a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1496e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   14972:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
   14976:	2e00      	cmp	r6, #0
   14978:	d045      	beq.n	14a06 <tc_aes128_set_encrypt_key+0xb2>
   1497a:	4630      	mov	r0, r6
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
   1497c:	2d00      	cmp	r5, #0
   1497e:	d044      	beq.n	14a0a <tc_aes128_set_encrypt_key+0xb6>
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
   14980:	2300      	movs	r3, #0
   14982:	e00f      	b.n	149a4 <tc_aes128_set_encrypt_key+0x50>
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   14984:	f815 4023 	ldrb.w	r4, [r5, r3, lsl #2]
   14988:	eb05 0183 	add.w	r1, r5, r3, lsl #2
   1498c:	784a      	ldrb	r2, [r1, #1]
   1498e:	0412      	lsls	r2, r2, #16
   14990:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   14994:	788c      	ldrb	r4, [r1, #2]
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   14996:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   1499a:	78c9      	ldrb	r1, [r1, #3]
   1499c:	430a      	orrs	r2, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   1499e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	for (i = 0; i < Nk; ++i) {
   149a2:	3301      	adds	r3, #1
   149a4:	2b03      	cmp	r3, #3
   149a6:	d9ed      	bls.n	14984 <tc_aes128_set_encrypt_key+0x30>
   149a8:	e006      	b.n	149b8 <tc_aes128_set_encrypt_key+0x64>
	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
		}
		s->words[i] = s->words[i-Nk] ^ t;
   149aa:	1f19      	subs	r1, r3, #4
   149ac:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   149b0:	404a      	eors	r2, r1
   149b2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	for (; i < (Nb * (Nr + 1)); ++i) {
   149b6:	3301      	adds	r3, #1
   149b8:	2b2b      	cmp	r3, #43	; 0x2b
   149ba:	d820      	bhi.n	149fe <tc_aes128_set_encrypt_key+0xaa>
		t = s->words[i-1];
   149bc:	1e5a      	subs	r2, r3, #1
   149be:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
		if ((i % Nk) == 0) {
   149c2:	f013 0f03 	tst.w	r3, #3
   149c6:	d1f0      	bne.n	149aa <tc_aes128_set_encrypt_key+0x56>
	return (((a) >> 24)|((a) << 8));
   149c8:	ea4f 6232 	mov.w	r2, r2, ror #24
			t = subword(rotword(t)) ^ rconst[i/Nk];
   149cc:	0e11      	lsrs	r1, r2, #24
   149ce:	4c11      	ldr	r4, [pc, #68]	; (14a14 <tc_aes128_set_encrypt_key+0xc0>)
   149d0:	5c65      	ldrb	r5, [r4, r1]
   149d2:	f3c2 4107 	ubfx	r1, r2, #16, #8
   149d6:	5c61      	ldrb	r1, [r4, r1]
   149d8:	0409      	lsls	r1, r1, #16
   149da:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
   149de:	f3c2 2507 	ubfx	r5, r2, #8, #8
   149e2:	5d65      	ldrb	r5, [r4, r5]
   149e4:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
   149e8:	b2d2      	uxtb	r2, r2
   149ea:	5ca2      	ldrb	r2, [r4, r2]
   149ec:	4311      	orrs	r1, r2
   149ee:	f023 0203 	bic.w	r2, r3, #3
   149f2:	3230      	adds	r2, #48	; 0x30
   149f4:	446a      	add	r2, sp
   149f6:	f852 2c2c 	ldr.w	r2, [r2, #-44]
   149fa:	404a      	eors	r2, r1
   149fc:	e7d5      	b.n	149aa <tc_aes128_set_encrypt_key+0x56>
	}

	return TC_CRYPTO_SUCCESS;
   149fe:	2001      	movs	r0, #1
}
   14a00:	b00d      	add	sp, #52	; 0x34
   14a02:	bc70      	pop	{r4, r5, r6}
   14a04:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   14a06:	2000      	movs	r0, #0
   14a08:	e7fa      	b.n	14a00 <tc_aes128_set_encrypt_key+0xac>
		return TC_CRYPTO_FAIL;
   14a0a:	2000      	movs	r0, #0
   14a0c:	e7f8      	b.n	14a00 <tc_aes128_set_encrypt_key+0xac>
   14a0e:	bf00      	nop
   14a10:	00031550 	.word	0x00031550
   14a14:	00031dc8 	.word	0x00031dc8

00014a18 <tc_aes_encrypt>:
int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   14a18:	2800      	cmp	r0, #0
   14a1a:	d04e      	beq.n	14aba <tc_aes_encrypt+0xa2>
{
   14a1c:	b570      	push	{r4, r5, r6, lr}
   14a1e:	b084      	sub	sp, #16
   14a20:	4615      	mov	r5, r2
   14a22:	4606      	mov	r6, r0
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   14a24:	2900      	cmp	r1, #0
   14a26:	d04a      	beq.n	14abe <tc_aes_encrypt+0xa6>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   14a28:	2a00      	cmp	r2, #0
   14a2a:	d04a      	beq.n	14ac2 <tc_aes_encrypt+0xaa>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   14a2c:	2310      	movs	r3, #16
   14a2e:	460a      	mov	r2, r1
   14a30:	4619      	mov	r1, r3
   14a32:	4668      	mov	r0, sp
   14a34:	f014 fdac 	bl	29590 <_copy>
	add_round_key(state, s->words);
   14a38:	4629      	mov	r1, r5
   14a3a:	4668      	mov	r0, sp
   14a3c:	f014 fdc2 	bl	295c4 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   14a40:	2400      	movs	r4, #0
   14a42:	e014      	b.n	14a6e <tc_aes_encrypt+0x56>
		s[i] = sbox[s[i]];
   14a44:	f81d 1003 	ldrb.w	r1, [sp, r3]
   14a48:	481f      	ldr	r0, [pc, #124]	; (14ac8 <tc_aes_encrypt+0xb0>)
   14a4a:	5c41      	ldrb	r1, [r0, r1]
   14a4c:	f80d 1003 	strb.w	r1, [sp, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
   14a50:	3301      	adds	r3, #1
   14a52:	2b0f      	cmp	r3, #15
   14a54:	d9f6      	bls.n	14a44 <tc_aes_encrypt+0x2c>
		sub_bytes(state);
		shift_rows(state);
   14a56:	4668      	mov	r0, sp
   14a58:	f014 fdf5 	bl	29646 <shift_rows>
		mix_columns(state);
   14a5c:	4668      	mov	r0, sp
   14a5e:	f014 fe6c 	bl	2973a <mix_columns>
		add_round_key(state, s->words + Nb*(i+1));
   14a62:	3401      	adds	r4, #1
   14a64:	eb05 1104 	add.w	r1, r5, r4, lsl #4
   14a68:	4668      	mov	r0, sp
   14a6a:	f014 fdab 	bl	295c4 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   14a6e:	2c08      	cmp	r4, #8
   14a70:	d801      	bhi.n	14a76 <tc_aes_encrypt+0x5e>
	for (i = 0; i < (Nb * Nk); ++i) {
   14a72:	2300      	movs	r3, #0
   14a74:	e7ed      	b.n	14a52 <tc_aes_encrypt+0x3a>
   14a76:	2300      	movs	r3, #0
   14a78:	e006      	b.n	14a88 <tc_aes_encrypt+0x70>
		s[i] = sbox[s[i]];
   14a7a:	f81d 2003 	ldrb.w	r2, [sp, r3]
   14a7e:	4912      	ldr	r1, [pc, #72]	; (14ac8 <tc_aes_encrypt+0xb0>)
   14a80:	5c8a      	ldrb	r2, [r1, r2]
   14a82:	f80d 2003 	strb.w	r2, [sp, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
   14a86:	3301      	adds	r3, #1
   14a88:	2b0f      	cmp	r3, #15
   14a8a:	d9f6      	bls.n	14a7a <tc_aes_encrypt+0x62>
	}

	sub_bytes(state);
	shift_rows(state);
   14a8c:	4668      	mov	r0, sp
   14a8e:	f014 fdda 	bl	29646 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   14a92:	1c61      	adds	r1, r4, #1
   14a94:	eb05 1101 	add.w	r1, r5, r1, lsl #4
   14a98:	4668      	mov	r0, sp
   14a9a:	f014 fd93 	bl	295c4 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   14a9e:	2310      	movs	r3, #16
   14aa0:	466a      	mov	r2, sp
   14aa2:	4619      	mov	r1, r3
   14aa4:	4630      	mov	r0, r6
   14aa6:	f014 fd73 	bl	29590 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   14aaa:	2210      	movs	r2, #16
   14aac:	2100      	movs	r1, #0
   14aae:	4668      	mov	r0, sp
   14ab0:	f014 fd7b 	bl	295aa <_set>

	return TC_CRYPTO_SUCCESS;
   14ab4:	2001      	movs	r0, #1
}
   14ab6:	b004      	add	sp, #16
   14ab8:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   14aba:	2000      	movs	r0, #0
}
   14abc:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   14abe:	2000      	movs	r0, #0
   14ac0:	e7f9      	b.n	14ab6 <tc_aes_encrypt+0x9e>
		return TC_CRYPTO_FAIL;
   14ac2:	2000      	movs	r0, #0
   14ac4:	e7f7      	b.n	14ab6 <tc_aes_encrypt+0x9e>
   14ac6:	bf00      	nop
   14ac8:	00031dc8 	.word	0x00031dc8

00014acc <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   14acc:	4901      	ldr	r1, [pc, #4]	; (14ad4 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   14ace:	2210      	movs	r2, #16
	str	r2, [r1]
   14ad0:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   14ad2:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   14ad4:	e000ed10 	.word	0xe000ed10

00014ad8 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   14ad8:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   14ada:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   14adc:	f380 8811 	msr	BASEPRI, r0
	isb
   14ae0:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
   14ae4:	f3bf 8f4f 	dsb	sy
   14ae8:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   14aea:	b662      	cpsie	i
	isb
   14aec:	f3bf 8f6f 	isb	sy

	bx	lr
   14af0:	4770      	bx	lr
   14af2:	bf00      	nop

00014af4 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   14af4:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   14af6:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   14af8:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
   14afc:	f3bf 8f4f 	dsb	sy
   14b00:	bf20      	wfe

	msr	BASEPRI, r0
   14b02:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   14b06:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   14b08:	4770      	bx	lr
   14b0a:	bf00      	nop

00014b0c <esf_dump>:
#include <kernel_arch_data.h>
#include <zephyr/logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
   14b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
   14b0e:	b083      	sub	sp, #12
   14b10:	4604      	mov	r4, r0
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   14b12:	6807      	ldr	r7, [r0, #0]
   14b14:	6846      	ldr	r6, [r0, #4]
   14b16:	6885      	ldr	r5, [r0, #8]
   14b18:	200a      	movs	r0, #10
   14b1a:	f7ff f8f5 	bl	13d08 <z_log_msg_alloc>
   14b1e:	2200      	movs	r2, #0
   14b20:	f36f 0200 	bfc	r2, #0, #1
   14b24:	f36f 0241 	bfc	r2, #1, #1
   14b28:	f36f 0282 	bfc	r2, #2, #1
   14b2c:	f36f 02c5 	bfc	r2, #3, #3
   14b30:	2301      	movs	r3, #1
   14b32:	f363 1288 	bfi	r2, r3, #6, #3
   14b36:	2314      	movs	r3, #20
   14b38:	f363 2252 	bfi	r2, r3, #9, #10
   14b3c:	f36f 42de 	bfc	r2, #19, #12
   14b40:	f36f 72df 	bfc	r2, #31, #1
   14b44:	4684      	mov	ip, r0
   14b46:	b1a8      	cbz	r0, 14b74 <esf_dump+0x68>
   14b48:	f110 0310 	adds.w	r3, r0, #16
   14b4c:	d004      	beq.n	14b58 <esf_dump+0x4c>
   14b4e:	4959      	ldr	r1, [pc, #356]	; (14cb4 <esf_dump+0x1a8>)
   14b50:	6141      	str	r1, [r0, #20]
   14b52:	6187      	str	r7, [r0, #24]
   14b54:	61c6      	str	r6, [r0, #28]
   14b56:	6205      	str	r5, [r0, #32]
   14b58:	b163      	cbz	r3, 14b74 <esf_dump+0x68>
   14b5a:	2305      	movs	r3, #5
   14b5c:	f88d 3004 	strb.w	r3, [sp, #4]
   14b60:	2300      	movs	r3, #0
   14b62:	f88d 3005 	strb.w	r3, [sp, #5]
   14b66:	f88d 3006 	strb.w	r3, [sp, #6]
   14b6a:	f88d 3007 	strb.w	r3, [sp, #7]
   14b6e:	9801      	ldr	r0, [sp, #4]
   14b70:	f8cc 0010 	str.w	r0, [ip, #16]
   14b74:	2300      	movs	r3, #0
   14b76:	4950      	ldr	r1, [pc, #320]	; (14cb8 <esf_dump+0x1ac>)
   14b78:	4660      	mov	r0, ip
   14b7a:	f014 fb2e 	bl	291da <z_log_msg_finalize>
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   14b7e:	68e7      	ldr	r7, [r4, #12]
   14b80:	6926      	ldr	r6, [r4, #16]
   14b82:	6965      	ldr	r5, [r4, #20]
   14b84:	200a      	movs	r0, #10
   14b86:	f7ff f8bf 	bl	13d08 <z_log_msg_alloc>
   14b8a:	2200      	movs	r2, #0
   14b8c:	f36f 0200 	bfc	r2, #0, #1
   14b90:	f36f 0241 	bfc	r2, #1, #1
   14b94:	f36f 0282 	bfc	r2, #2, #1
   14b98:	f36f 02c5 	bfc	r2, #3, #3
   14b9c:	2301      	movs	r3, #1
   14b9e:	f363 1288 	bfi	r2, r3, #6, #3
   14ba2:	2314      	movs	r3, #20
   14ba4:	f363 2252 	bfi	r2, r3, #9, #10
   14ba8:	f36f 42de 	bfc	r2, #19, #12
   14bac:	f36f 72df 	bfc	r2, #31, #1
   14bb0:	4684      	mov	ip, r0
   14bb2:	b1a8      	cbz	r0, 14be0 <esf_dump+0xd4>
   14bb4:	f110 0310 	adds.w	r3, r0, #16
   14bb8:	d004      	beq.n	14bc4 <esf_dump+0xb8>
   14bba:	4940      	ldr	r1, [pc, #256]	; (14cbc <esf_dump+0x1b0>)
   14bbc:	6141      	str	r1, [r0, #20]
   14bbe:	6187      	str	r7, [r0, #24]
   14bc0:	61c6      	str	r6, [r0, #28]
   14bc2:	6205      	str	r5, [r0, #32]
   14bc4:	b163      	cbz	r3, 14be0 <esf_dump+0xd4>
   14bc6:	2305      	movs	r3, #5
   14bc8:	f88d 3004 	strb.w	r3, [sp, #4]
   14bcc:	2300      	movs	r3, #0
   14bce:	f88d 3005 	strb.w	r3, [sp, #5]
   14bd2:	f88d 3006 	strb.w	r3, [sp, #6]
   14bd6:	f88d 3007 	strb.w	r3, [sp, #7]
   14bda:	9801      	ldr	r0, [sp, #4]
   14bdc:	f8cc 0010 	str.w	r0, [ip, #16]
   14be0:	2300      	movs	r3, #0
   14be2:	4935      	ldr	r1, [pc, #212]	; (14cb8 <esf_dump+0x1ac>)
   14be4:	4660      	mov	r0, ip
   14be6:	f014 faf8 	bl	291da <z_log_msg_finalize>
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   14bea:	69e5      	ldr	r5, [r4, #28]
   14bec:	2008      	movs	r0, #8
   14bee:	f7ff f88b 	bl	13d08 <z_log_msg_alloc>
   14bf2:	2200      	movs	r2, #0
   14bf4:	f36f 0200 	bfc	r2, #0, #1
   14bf8:	f36f 0241 	bfc	r2, #1, #1
   14bfc:	f36f 0282 	bfc	r2, #2, #1
   14c00:	f36f 02c5 	bfc	r2, #3, #3
   14c04:	2301      	movs	r3, #1
   14c06:	f363 1288 	bfi	r2, r3, #6, #3
   14c0a:	230c      	movs	r3, #12
   14c0c:	f363 2252 	bfi	r2, r3, #9, #10
   14c10:	f36f 42de 	bfc	r2, #19, #12
   14c14:	f36f 72df 	bfc	r2, #31, #1
   14c18:	4684      	mov	ip, r0
   14c1a:	b198      	cbz	r0, 14c44 <esf_dump+0x138>
   14c1c:	f110 0310 	adds.w	r3, r0, #16
   14c20:	d002      	beq.n	14c28 <esf_dump+0x11c>
   14c22:	4927      	ldr	r1, [pc, #156]	; (14cc0 <esf_dump+0x1b4>)
   14c24:	6141      	str	r1, [r0, #20]
   14c26:	6185      	str	r5, [r0, #24]
   14c28:	b163      	cbz	r3, 14c44 <esf_dump+0x138>
   14c2a:	2303      	movs	r3, #3
   14c2c:	f88d 3004 	strb.w	r3, [sp, #4]
   14c30:	2300      	movs	r3, #0
   14c32:	f88d 3005 	strb.w	r3, [sp, #5]
   14c36:	f88d 3006 	strb.w	r3, [sp, #6]
   14c3a:	f88d 3007 	strb.w	r3, [sp, #7]
   14c3e:	9801      	ldr	r0, [sp, #4]
   14c40:	f8cc 0010 	str.w	r0, [ip, #16]
   14c44:	2300      	movs	r3, #0
   14c46:	491c      	ldr	r1, [pc, #112]	; (14cb8 <esf_dump+0x1ac>)
   14c48:	4660      	mov	r0, ip
   14c4a:	f014 fac6 	bl	291da <z_log_msg_finalize>
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   14c4e:	69a5      	ldr	r5, [r4, #24]
   14c50:	2008      	movs	r0, #8
   14c52:	f7ff f859 	bl	13d08 <z_log_msg_alloc>
   14c56:	2200      	movs	r2, #0
   14c58:	f36f 0200 	bfc	r2, #0, #1
   14c5c:	f36f 0241 	bfc	r2, #1, #1
   14c60:	f36f 0282 	bfc	r2, #2, #1
   14c64:	f36f 02c5 	bfc	r2, #3, #3
   14c68:	2301      	movs	r3, #1
   14c6a:	f363 1288 	bfi	r2, r3, #6, #3
   14c6e:	230c      	movs	r3, #12
   14c70:	f363 2252 	bfi	r2, r3, #9, #10
   14c74:	f36f 42de 	bfc	r2, #19, #12
   14c78:	f36f 72df 	bfc	r2, #31, #1
   14c7c:	4604      	mov	r4, r0
   14c7e:	b190      	cbz	r0, 14ca6 <esf_dump+0x19a>
   14c80:	f110 0310 	adds.w	r3, r0, #16
   14c84:	d002      	beq.n	14c8c <esf_dump+0x180>
   14c86:	490f      	ldr	r1, [pc, #60]	; (14cc4 <esf_dump+0x1b8>)
   14c88:	6141      	str	r1, [r0, #20]
   14c8a:	6185      	str	r5, [r0, #24]
   14c8c:	b15b      	cbz	r3, 14ca6 <esf_dump+0x19a>
   14c8e:	2303      	movs	r3, #3
   14c90:	f88d 3004 	strb.w	r3, [sp, #4]
   14c94:	2300      	movs	r3, #0
   14c96:	f88d 3005 	strb.w	r3, [sp, #5]
   14c9a:	f88d 3006 	strb.w	r3, [sp, #6]
   14c9e:	f88d 3007 	strb.w	r3, [sp, #7]
   14ca2:	9801      	ldr	r0, [sp, #4]
   14ca4:	6120      	str	r0, [r4, #16]
   14ca6:	2300      	movs	r3, #0
   14ca8:	4903      	ldr	r1, [pc, #12]	; (14cb8 <esf_dump+0x1ac>)
   14caa:	4620      	mov	r0, r4
   14cac:	f014 fa95 	bl	291da <z_log_msg_finalize>
		esf->basic.pc);
}
   14cb0:	b003      	add	sp, #12
   14cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14cb4:	00031ec8 	.word	0x00031ec8
   14cb8:	000314c8 	.word	0x000314c8
   14cbc:	00031ef8 	.word	0x00031ef8
   14cc0:	00031f28 	.word	0x00031f28
   14cc4:	00031f38 	.word	0x00031f38

00014cc8 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   14cc8:	2800      	cmp	r0, #0
   14cca:	db07      	blt.n	14cdc <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   14ccc:	f000 021f 	and.w	r2, r0, #31
   14cd0:	0940      	lsrs	r0, r0, #5
   14cd2:	2301      	movs	r3, #1
   14cd4:	4093      	lsls	r3, r2
   14cd6:	4a02      	ldr	r2, [pc, #8]	; (14ce0 <__NVIC_EnableIRQ+0x18>)
   14cd8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
   14cdc:	4770      	bx	lr
   14cde:	bf00      	nop
   14ce0:	e000e100 	.word	0xe000e100

00014ce4 <__NVIC_DisableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   14ce4:	2800      	cmp	r0, #0
   14ce6:	db0c      	blt.n	14d02 <__NVIC_DisableIRQ+0x1e>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   14ce8:	f000 021f 	and.w	r2, r0, #31
   14cec:	0940      	lsrs	r0, r0, #5
   14cee:	2301      	movs	r3, #1
   14cf0:	4093      	lsls	r3, r2
   14cf2:	3020      	adds	r0, #32
   14cf4:	4a03      	ldr	r2, [pc, #12]	; (14d04 <__NVIC_DisableIRQ+0x20>)
   14cf6:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   14cfa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   14cfe:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
   14d02:	4770      	bx	lr
   14d04:	e000e100 	.word	0xe000e100

00014d08 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   14d08:	2800      	cmp	r0, #0
   14d0a:	db08      	blt.n	14d1e <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14d0c:	0149      	lsls	r1, r1, #5
   14d0e:	b2c9      	uxtb	r1, r1
   14d10:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
   14d14:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
   14d18:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
   14d1c:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14d1e:	f000 000f 	and.w	r0, r0, #15
   14d22:	0149      	lsls	r1, r1, #5
   14d24:	b2c9      	uxtb	r1, r1
   14d26:	4b01      	ldr	r3, [pc, #4]	; (14d2c <__NVIC_SetPriority+0x24>)
   14d28:	5419      	strb	r1, [r3, r0]
  }
}
   14d2a:	4770      	bx	lr
   14d2c:	e000ed14 	.word	0xe000ed14

00014d30 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   14d30:	0942      	lsrs	r2, r0, #5
   14d32:	4b05      	ldr	r3, [pc, #20]	; (14d48 <arch_irq_is_enabled+0x18>)
   14d34:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   14d38:	f000 001f 	and.w	r0, r0, #31
   14d3c:	2301      	movs	r3, #1
   14d3e:	fa03 f000 	lsl.w	r0, r3, r0
}
   14d42:	4010      	ands	r0, r2
   14d44:	4770      	bx	lr
   14d46:	bf00      	nop
   14d48:	e000e100 	.word	0xe000e100

00014d4c <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   14d4c:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   14d4e:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   14d50:	4b05      	ldr	r3, [pc, #20]	; (14d68 <_arch_isr_direct_pm+0x1c>)
   14d52:	699b      	ldr	r3, [r3, #24]
   14d54:	b90b      	cbnz	r3, 14d5a <_arch_isr_direct_pm+0xe>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   14d56:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   14d58:	bd08      	pop	{r3, pc}
		_kernel.idle = 0;
   14d5a:	4b03      	ldr	r3, [pc, #12]	; (14d68 <_arch_isr_direct_pm+0x1c>)
   14d5c:	2200      	movs	r2, #0
   14d5e:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
   14d60:	f01b fac6 	bl	302f0 <z_pm_save_idle_exit>
   14d64:	e7f7      	b.n	14d56 <_arch_isr_direct_pm+0xa>
   14d66:	bf00      	nop
   14d68:	20009070 	.word	0x20009070

00014d6c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   14d6c:	bf30      	wfi
    b z_SysNmiOnReset
   14d6e:	f7ff bffd 	b.w	14d6c <z_SysNmiOnReset>
   14d72:	bf00      	nop

00014d74 <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   14d74:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   14d76:	4b0b      	ldr	r3, [pc, #44]	; (14da4 <z_arm_prep_c+0x30>)
   14d78:	4a0b      	ldr	r2, [pc, #44]	; (14da8 <z_arm_prep_c+0x34>)
   14d7a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   14d7e:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   14d80:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   14d84:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   14d88:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   14d8c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   14d90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   14d94:	f011 f902 	bl	25f9c <z_bss_zero>
	z_data_copy();
   14d98:	f012 fa1a 	bl	271d0 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   14d9c:	f001 f8cc 	bl	15f38 <z_arm_interrupt_init>
	z_cstart();
   14da0:	f011 f95a 	bl	26058 <z_cstart>
   14da4:	e000ed00 	.word	0xe000ed00
   14da8:	00000000 	.word	0x00000000

00014dac <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   14dac:	4a0a      	ldr	r2, [pc, #40]	; (14dd8 <arch_swap+0x2c>)
   14dae:	6893      	ldr	r3, [r2, #8]
   14db0:	f8c3 00ac 	str.w	r0, [r3, #172]	; 0xac
	_current->arch.swap_return_value = _k_neg_eagain;
   14db4:	4909      	ldr	r1, [pc, #36]	; (14ddc <arch_swap+0x30>)
   14db6:	6809      	ldr	r1, [r1, #0]
   14db8:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   14dbc:	4908      	ldr	r1, [pc, #32]	; (14de0 <arch_swap+0x34>)
   14dbe:	684b      	ldr	r3, [r1, #4]
   14dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   14dc4:	604b      	str	r3, [r1, #4]
   14dc6:	2300      	movs	r3, #0
   14dc8:	f383 8811 	msr	BASEPRI, r3
   14dcc:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   14dd0:	6893      	ldr	r3, [r2, #8]
}
   14dd2:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
   14dd6:	4770      	bx	lr
   14dd8:	20009070 	.word	0x20009070
   14ddc:	00034934 	.word	0x00034934
   14de0:	e000ed00 	.word	0xe000ed00

00014de4 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   14de4:	4913      	ldr	r1, [pc, #76]	; (14e34 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
   14de6:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   14de8:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   14dec:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   14dee:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   14df2:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   14df6:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
   14df8:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   14dfc:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   14e00:	4f0d      	ldr	r7, [pc, #52]	; (14e38 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   14e02:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   14e06:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   14e08:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   14e0a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   14e0c:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    movs r3, #0
   14e10:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   14e12:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   14e16:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   14e1a:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   14e1c:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   14e1e:	f001 f93b 	bl	16098 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   14e22:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   14e26:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   14e2a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   14e2e:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   14e32:	4770      	bx	lr
    ldr r1, =_kernel
   14e34:	20009070 	.word	0x20009070
    ldr v4, =_SCS_ICSR
   14e38:	e000ed04 	.word	0xe000ed04

00014e3c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   14e3c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   14e40:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   14e42:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   14e46:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   14e4a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   14e4c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   14e50:	2902      	cmp	r1, #2
    beq _oops
   14e52:	d0ff      	beq.n	14e54 <_oops>

00014e54 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   14e54:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
   14e56:	f014 fda7 	bl	299a8 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
   14e5a:	bd01      	pop	{r0, pc}

00014e5c <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
   14e5c:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   14e5e:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
   14e62:	490e      	ldr	r1, [pc, #56]	; (14e9c <arch_new_thread+0x40>)
   14e64:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
   14e68:	f021 0101 	bic.w	r1, r1, #1
   14e6c:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
   14e70:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   14e74:	9b01      	ldr	r3, [sp, #4]
   14e76:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   14e7a:	9b02      	ldr	r3, [sp, #8]
   14e7c:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   14e80:	9b03      	ldr	r3, [sp, #12]
   14e82:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   14e86:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   14e8a:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe = (struct __basic_sf *)
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
   14e8e:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   14e90:	2300      	movs	r3, #0
   14e92:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   14e96:	bc10      	pop	{r4}
   14e98:	4770      	bx	lr
   14e9a:	bf00      	nop
   14e9c:	00027fe3 	.word	0x00027fe3

00014ea0 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   14ea0:	4b10      	ldr	r3, [pc, #64]	; (14ee4 <z_check_thread_stack_fail+0x44>)
   14ea2:	689b      	ldr	r3, [r3, #8]

	if (thread == NULL) {
   14ea4:	b1bb      	cbz	r3, 14ed6 <z_check_thread_stack_fail+0x36>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   14ea6:	f110 0f16 	cmn.w	r0, #22
   14eaa:	d00b      	beq.n	14ec4 <z_check_thread_stack_fail+0x24>
   14eac:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
   14eb0:	f1a2 0c40 	sub.w	ip, r2, #64	; 0x40
   14eb4:	4584      	cmp	ip, r0
   14eb6:	d810      	bhi.n	14eda <z_check_thread_stack_fail+0x3a>
   14eb8:	4282      	cmp	r2, r0
   14eba:	d910      	bls.n	14ede <z_check_thread_stack_fail+0x3e>
   14ebc:	428a      	cmp	r2, r1
   14ebe:	d807      	bhi.n	14ed0 <z_check_thread_stack_fail+0x30>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
   14ec0:	2000      	movs	r0, #0
   14ec2:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   14ec4:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
   14ec8:	428a      	cmp	r2, r1
   14eca:	d801      	bhi.n	14ed0 <z_check_thread_stack_fail+0x30>
	return 0;
   14ecc:	2000      	movs	r0, #0
}
   14ece:	4770      	bx	lr
		return thread->stack_info.start;
   14ed0:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
   14ed4:	4770      	bx	lr
		return 0;
   14ed6:	2000      	movs	r0, #0
   14ed8:	4770      	bx	lr
	return 0;
   14eda:	2000      	movs	r0, #0
   14edc:	4770      	bx	lr
   14ede:	2000      	movs	r0, #0
   14ee0:	4770      	bx	lr
   14ee2:	bf00      	nop
   14ee4:	20009070 	.word	0x20009070

00014ee8 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   14ee8:	b508      	push	{r3, lr}
   14eea:	460d      	mov	r5, r1
   14eec:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   14eee:	4b08      	ldr	r3, [pc, #32]	; (14f10 <arch_switch_to_main_thread+0x28>)
   14ef0:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   14ef2:	f001 f8d1 	bl	16098 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   14ef6:	4620      	mov	r0, r4
   14ef8:	f385 8809 	msr	PSP, r5
   14efc:	2100      	movs	r1, #0
   14efe:	b663      	cpsie	if
   14f00:	f381 8811 	msr	BASEPRI, r1
   14f04:	f3bf 8f6f 	isb	sy
   14f08:	2200      	movs	r2, #0
   14f0a:	2300      	movs	r3, #0
   14f0c:	f013 f869 	bl	27fe2 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   14f10:	20009070 	.word	0x20009070

00014f14 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   14f14:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   14f16:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   14f18:	4a0b      	ldr	r2, [pc, #44]	; (14f48 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   14f1a:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   14f1c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   14f1e:	bf1e      	ittt	ne
	movne	r1, #0
   14f20:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   14f22:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   14f24:	f01b f9e4 	blne	302f0 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   14f28:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   14f2a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   14f2e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   14f32:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   14f36:	4905      	ldr	r1, [pc, #20]	; (14f4c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   14f38:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   14f3a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   14f3c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   14f3e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   14f42:	4903      	ldr	r1, [pc, #12]	; (14f50 <_isr_wrapper+0x3c>)
	bx r1
   14f44:	4708      	bx	r1
   14f46:	0000      	.short	0x0000
	ldr r2, =_kernel
   14f48:	20009070 	.word	0x20009070
	ldr r1, =_sw_isr_table
   14f4c:	000311ec 	.word	0x000311ec
	ldr r1, =z_arm_int_exit
   14f50:	00014f55 	.word	0x00014f55

00014f54 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   14f54:	4b04      	ldr	r3, [pc, #16]	; (14f68 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   14f56:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   14f58:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   14f5a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   14f5c:	d003      	beq.n	14f66 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   14f5e:	4903      	ldr	r1, [pc, #12]	; (14f6c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   14f60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   14f64:	600a      	str	r2, [r1, #0]

00014f66 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   14f66:	4770      	bx	lr
	ldr r3, =_kernel
   14f68:	20009070 	.word	0x20009070
	ldr r1, =_SCS_ICSR
   14f6c:	e000ed04 	.word	0xe000ed04

00014f70 <z_arm_is_synchronous_svc>:
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

static inline bool z_arm_is_synchronous_svc(z_arch_esf_t *esf)
{
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   14f70:	6981      	ldr	r1, [r0, #24]
	/* Note: ARMv6-M does not support CCR.BFHFNMIGN so this access
	 * could generate a fault if the pc was invalid.
	 */
	uint16_t fault_insn = *(ret_addr - 1);
#else
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   14f72:	4b0d      	ldr	r3, [pc, #52]	; (14fa8 <z_arm_is_synchronous_svc+0x38>)
   14f74:	695a      	ldr	r2, [r3, #20]
   14f76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   14f7a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   14f7c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   14f80:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();

	uint16_t fault_insn = *(ret_addr - 1);
   14f84:	f831 1c02 	ldrh.w	r1, [r1, #-2]

	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   14f88:	695a      	ldr	r2, [r3, #20]
   14f8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   14f8e:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   14f90:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   14f94:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
#endif /* ARMV6_M_ARMV8_M_BASELINE && !ARMV8_M_BASELINE */

	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   14f98:	f64d 7302 	movw	r3, #57090	; 0xdf02
   14f9c:	4299      	cmp	r1, r3
   14f9e:	d001      	beq.n	14fa4 <z_arm_is_synchronous_svc+0x34>
		((fault_insn & 0x00ff) == _SVC_CALL_RUNTIME_EXCEPT)) {
		return true;
	}
#undef _SVC_OPCODE
	return false;
   14fa0:	2000      	movs	r0, #0
   14fa2:	4770      	bx	lr
		return true;
   14fa4:	2001      	movs	r0, #1
}
   14fa6:	4770      	bx	lr
   14fa8:	e000ed00 	.word	0xe000ed00

00014fac <get_esf>:
	bool *nested_exc)
{
	bool alternative_state_exc = false;
	z_arch_esf_t *ptr_esf = NULL;

	*nested_exc = false;
   14fac:	f04f 0c00 	mov.w	ip, #0
   14fb0:	f883 c000 	strb.w	ip, [r3]

	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   14fb4:	f002 4c7f 	and.w	ip, r2, #4278190080	; 0xff000000
   14fb8:	f1bc 4f7f 	cmp.w	ip, #4278190080	; 0xff000000
   14fbc:	d142      	bne.n	15044 <get_esf+0x98>
	}
#else
	/* The processor has a single execution state.
	 * We verify that the Thread mode is using PSP.
	 */
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   14fbe:	f002 0c0c 	and.w	ip, r2, #12
   14fc2:	f1bc 0f08 	cmp.w	ip, #8
   14fc6:	d004      	beq.n	14fd2 <get_esf+0x26>
		return NULL;
	}
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	if (!alternative_state_exc) {
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   14fc8:	f012 0f08 	tst.w	r2, #8
   14fcc:	d037      	beq.n	1503e <get_esf+0x92>
			/* Returning to thread mode */
			ptr_esf =  (z_arch_esf_t *)psp;
   14fce:	4608      	mov	r0, r1
   14fd0:	4770      	bx	lr
{
   14fd2:	b500      	push	{lr}
   14fd4:	b083      	sub	sp, #12
		PR_EXC("SPSEL in thread mode does not indicate PSP");
   14fd6:	2006      	movs	r0, #6
   14fd8:	f7fe fe96 	bl	13d08 <z_log_msg_alloc>
   14fdc:	2200      	movs	r2, #0
   14fde:	f36f 0200 	bfc	r2, #0, #1
   14fe2:	f36f 0241 	bfc	r2, #1, #1
   14fe6:	f36f 0282 	bfc	r2, #2, #1
   14fea:	f36f 02c5 	bfc	r2, #3, #3
   14fee:	2301      	movs	r3, #1
   14ff0:	f363 1288 	bfi	r2, r3, #6, #3
   14ff4:	2308      	movs	r3, #8
   14ff6:	f363 2252 	bfi	r2, r3, #9, #10
   14ffa:	f36f 42de 	bfc	r2, #19, #12
   14ffe:	f36f 72df 	bfc	r2, #31, #1
   15002:	4684      	mov	ip, r0
   15004:	b190      	cbz	r0, 1502c <get_esf+0x80>
   15006:	f110 0310 	adds.w	r3, r0, #16
   1500a:	d001      	beq.n	15010 <get_esf+0x64>
   1500c:	490e      	ldr	r1, [pc, #56]	; (15048 <get_esf+0x9c>)
   1500e:	6141      	str	r1, [r0, #20]
   15010:	b163      	cbz	r3, 1502c <get_esf+0x80>
   15012:	2302      	movs	r3, #2
   15014:	f88d 3004 	strb.w	r3, [sp, #4]
   15018:	2300      	movs	r3, #0
   1501a:	f88d 3005 	strb.w	r3, [sp, #5]
   1501e:	f88d 3006 	strb.w	r3, [sp, #6]
   15022:	f88d 3007 	strb.w	r3, [sp, #7]
   15026:	9801      	ldr	r0, [sp, #4]
   15028:	f8cc 0010 	str.w	r0, [ip, #16]
   1502c:	2300      	movs	r3, #0
   1502e:	4907      	ldr	r1, [pc, #28]	; (1504c <get_esf+0xa0>)
   15030:	4660      	mov	r0, ip
   15032:	f014 f8d2 	bl	291da <z_log_msg_finalize>
		return NULL;
   15036:	2000      	movs	r0, #0
			*nested_exc = true;
		}
	}

	return ptr_esf;
}
   15038:	b003      	add	sp, #12
   1503a:	f85d fb04 	ldr.w	pc, [sp], #4
			*nested_exc = true;
   1503e:	2201      	movs	r2, #1
   15040:	701a      	strb	r2, [r3, #0]
   15042:	4770      	bx	lr
		return NULL;
   15044:	2000      	movs	r0, #0
}
   15046:	4770      	bx	lr
   15048:	00031f68 	.word	0x00031f68
   1504c:	000314c8 	.word	0x000314c8

00015050 <bus_fault>:
{
   15050:	b5f0      	push	{r4, r5, r6, r7, lr}
   15052:	b083      	sub	sp, #12
   15054:	4605      	mov	r5, r0
   15056:	460e      	mov	r6, r1
   15058:	4614      	mov	r4, r2
	PR_FAULT_INFO("***** BUS FAULT *****");
   1505a:	2006      	movs	r0, #6
   1505c:	f7fe fe54 	bl	13d08 <z_log_msg_alloc>
   15060:	2200      	movs	r2, #0
   15062:	f36f 0200 	bfc	r2, #0, #1
   15066:	f36f 0241 	bfc	r2, #1, #1
   1506a:	f36f 0282 	bfc	r2, #2, #1
   1506e:	f36f 02c5 	bfc	r2, #3, #3
   15072:	2301      	movs	r3, #1
   15074:	f363 1288 	bfi	r2, r3, #6, #3
   15078:	2308      	movs	r3, #8
   1507a:	f363 2252 	bfi	r2, r3, #9, #10
   1507e:	f36f 42de 	bfc	r2, #19, #12
   15082:	f36f 72df 	bfc	r2, #31, #1
   15086:	4684      	mov	ip, r0
   15088:	b190      	cbz	r0, 150b0 <bus_fault+0x60>
   1508a:	f110 0310 	adds.w	r3, r0, #16
   1508e:	d001      	beq.n	15094 <bus_fault+0x44>
   15090:	49bb      	ldr	r1, [pc, #748]	; (15380 <bus_fault+0x330>)
   15092:	6141      	str	r1, [r0, #20]
   15094:	b163      	cbz	r3, 150b0 <bus_fault+0x60>
   15096:	2302      	movs	r3, #2
   15098:	f88d 3004 	strb.w	r3, [sp, #4]
   1509c:	2300      	movs	r3, #0
   1509e:	f88d 3005 	strb.w	r3, [sp, #5]
   150a2:	f88d 3006 	strb.w	r3, [sp, #6]
   150a6:	f88d 3007 	strb.w	r3, [sp, #7]
   150aa:	9801      	ldr	r0, [sp, #4]
   150ac:	f8cc 0010 	str.w	r0, [ip, #16]
   150b0:	2300      	movs	r3, #0
   150b2:	49b4      	ldr	r1, [pc, #720]	; (15384 <bus_fault+0x334>)
   150b4:	4660      	mov	r0, ip
   150b6:	f014 f890 	bl	291da <z_log_msg_finalize>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   150ba:	4bb3      	ldr	r3, [pc, #716]	; (15388 <bus_fault+0x338>)
   150bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   150be:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   150c2:	d129      	bne.n	15118 <bus_fault+0xc8>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   150c4:	4bb0      	ldr	r3, [pc, #704]	; (15388 <bus_fault+0x338>)
   150c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   150c8:	f413 6f00 	tst.w	r3, #2048	; 0x800
   150cc:	d155      	bne.n	1517a <bus_fault+0x12a>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   150ce:	4bae      	ldr	r3, [pc, #696]	; (15388 <bus_fault+0x338>)
   150d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   150d2:	f413 7f00 	tst.w	r3, #512	; 0x200
   150d6:	f040 8081 	bne.w	151dc <bus_fault+0x18c>
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   150da:	4bab      	ldr	r3, [pc, #684]	; (15388 <bus_fault+0x338>)
   150dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   150de:	f413 6f80 	tst.w	r3, #1024	; 0x400
   150e2:	f040 80ec 	bne.w	152be <bus_fault+0x26e>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   150e6:	4ba8      	ldr	r3, [pc, #672]	; (15388 <bus_fault+0x338>)
   150e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   150ea:	f413 7f80 	tst.w	r3, #256	; 0x100
   150ee:	f040 8116 	bne.w	1531e <bus_fault+0x2ce>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   150f2:	4ba5      	ldr	r3, [pc, #660]	; (15388 <bus_fault+0x338>)
   150f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   150f6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   150fa:	f040 8153 	bne.w	153a4 <bus_fault+0x354>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   150fe:	4aa2      	ldr	r2, [pc, #648]	; (15388 <bus_fault+0x338>)
   15100:	6a93      	ldr	r3, [r2, #40]	; 0x28
   15102:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   15106:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   15108:	2101      	movs	r1, #1
   1510a:	4628      	mov	r0, r5
   1510c:	f014 fc73 	bl	299f6 <memory_fault_recoverable>
   15110:	7020      	strb	r0, [r4, #0]
}
   15112:	2000      	movs	r0, #0
   15114:	b003      	add	sp, #12
   15116:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_FAULT_INFO("  Stacking error");
   15118:	2006      	movs	r0, #6
   1511a:	f7fe fdf5 	bl	13d08 <z_log_msg_alloc>
   1511e:	2200      	movs	r2, #0
   15120:	f36f 0200 	bfc	r2, #0, #1
   15124:	f36f 0241 	bfc	r2, #1, #1
   15128:	f36f 0282 	bfc	r2, #2, #1
   1512c:	f36f 02c5 	bfc	r2, #3, #3
   15130:	2301      	movs	r3, #1
   15132:	f363 1288 	bfi	r2, r3, #6, #3
   15136:	2308      	movs	r3, #8
   15138:	f363 2252 	bfi	r2, r3, #9, #10
   1513c:	f36f 42de 	bfc	r2, #19, #12
   15140:	f36f 72df 	bfc	r2, #31, #1
   15144:	4684      	mov	ip, r0
   15146:	b190      	cbz	r0, 1516e <bus_fault+0x11e>
   15148:	f110 0310 	adds.w	r3, r0, #16
   1514c:	d001      	beq.n	15152 <bus_fault+0x102>
   1514e:	498f      	ldr	r1, [pc, #572]	; (1538c <bus_fault+0x33c>)
   15150:	6141      	str	r1, [r0, #20]
   15152:	b163      	cbz	r3, 1516e <bus_fault+0x11e>
   15154:	2302      	movs	r3, #2
   15156:	f88d 3004 	strb.w	r3, [sp, #4]
   1515a:	2300      	movs	r3, #0
   1515c:	f88d 3005 	strb.w	r3, [sp, #5]
   15160:	f88d 3006 	strb.w	r3, [sp, #6]
   15164:	f88d 3007 	strb.w	r3, [sp, #7]
   15168:	9801      	ldr	r0, [sp, #4]
   1516a:	f8cc 0010 	str.w	r0, [ip, #16]
   1516e:	2300      	movs	r3, #0
   15170:	4984      	ldr	r1, [pc, #528]	; (15384 <bus_fault+0x334>)
   15172:	4660      	mov	r0, ip
   15174:	f014 f831 	bl	291da <z_log_msg_finalize>
   15178:	e7a4      	b.n	150c4 <bus_fault+0x74>
		PR_FAULT_INFO("  Unstacking error");
   1517a:	2006      	movs	r0, #6
   1517c:	f7fe fdc4 	bl	13d08 <z_log_msg_alloc>
   15180:	2200      	movs	r2, #0
   15182:	f36f 0200 	bfc	r2, #0, #1
   15186:	f36f 0241 	bfc	r2, #1, #1
   1518a:	f36f 0282 	bfc	r2, #2, #1
   1518e:	f36f 02c5 	bfc	r2, #3, #3
   15192:	2301      	movs	r3, #1
   15194:	f363 1288 	bfi	r2, r3, #6, #3
   15198:	2308      	movs	r3, #8
   1519a:	f363 2252 	bfi	r2, r3, #9, #10
   1519e:	f36f 42de 	bfc	r2, #19, #12
   151a2:	f36f 72df 	bfc	r2, #31, #1
   151a6:	4684      	mov	ip, r0
   151a8:	b190      	cbz	r0, 151d0 <bus_fault+0x180>
   151aa:	f110 0310 	adds.w	r3, r0, #16
   151ae:	d001      	beq.n	151b4 <bus_fault+0x164>
   151b0:	4977      	ldr	r1, [pc, #476]	; (15390 <bus_fault+0x340>)
   151b2:	6141      	str	r1, [r0, #20]
   151b4:	b163      	cbz	r3, 151d0 <bus_fault+0x180>
   151b6:	2302      	movs	r3, #2
   151b8:	f88d 3004 	strb.w	r3, [sp, #4]
   151bc:	2300      	movs	r3, #0
   151be:	f88d 3005 	strb.w	r3, [sp, #5]
   151c2:	f88d 3006 	strb.w	r3, [sp, #6]
   151c6:	f88d 3007 	strb.w	r3, [sp, #7]
   151ca:	9801      	ldr	r0, [sp, #4]
   151cc:	f8cc 0010 	str.w	r0, [ip, #16]
   151d0:	2300      	movs	r3, #0
   151d2:	496c      	ldr	r1, [pc, #432]	; (15384 <bus_fault+0x334>)
   151d4:	4660      	mov	r0, ip
   151d6:	f014 f800 	bl	291da <z_log_msg_finalize>
   151da:	e778      	b.n	150ce <bus_fault+0x7e>
		PR_FAULT_INFO("  Precise data bus error");
   151dc:	2006      	movs	r0, #6
   151de:	f7fe fd93 	bl	13d08 <z_log_msg_alloc>
   151e2:	2200      	movs	r2, #0
   151e4:	f36f 0200 	bfc	r2, #0, #1
   151e8:	f36f 0241 	bfc	r2, #1, #1
   151ec:	f36f 0282 	bfc	r2, #2, #1
   151f0:	f36f 02c5 	bfc	r2, #3, #3
   151f4:	2301      	movs	r3, #1
   151f6:	f363 1288 	bfi	r2, r3, #6, #3
   151fa:	2308      	movs	r3, #8
   151fc:	f363 2252 	bfi	r2, r3, #9, #10
   15200:	f36f 42de 	bfc	r2, #19, #12
   15204:	f36f 72df 	bfc	r2, #31, #1
   15208:	4684      	mov	ip, r0
   1520a:	b190      	cbz	r0, 15232 <bus_fault+0x1e2>
   1520c:	f110 0310 	adds.w	r3, r0, #16
   15210:	d001      	beq.n	15216 <bus_fault+0x1c6>
   15212:	4960      	ldr	r1, [pc, #384]	; (15394 <bus_fault+0x344>)
   15214:	6141      	str	r1, [r0, #20]
   15216:	b163      	cbz	r3, 15232 <bus_fault+0x1e2>
   15218:	2302      	movs	r3, #2
   1521a:	f88d 3004 	strb.w	r3, [sp, #4]
   1521e:	2300      	movs	r3, #0
   15220:	f88d 3005 	strb.w	r3, [sp, #5]
   15224:	f88d 3006 	strb.w	r3, [sp, #6]
   15228:	f88d 3007 	strb.w	r3, [sp, #7]
   1522c:	9801      	ldr	r0, [sp, #4]
   1522e:	f8cc 0010 	str.w	r0, [ip, #16]
   15232:	2300      	movs	r3, #0
   15234:	4953      	ldr	r1, [pc, #332]	; (15384 <bus_fault+0x334>)
   15236:	4660      	mov	r0, ip
   15238:	f013 ffcf 	bl	291da <z_log_msg_finalize>
		STORE_xFAR(bfar, SCB->BFAR);
   1523c:	4b52      	ldr	r3, [pc, #328]	; (15388 <bus_fault+0x338>)
   1523e:	6b9f      	ldr	r7, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   15240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15242:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   15246:	f43f af48 	beq.w	150da <bus_fault+0x8a>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   1524a:	2008      	movs	r0, #8
   1524c:	f7fe fd5c 	bl	13d08 <z_log_msg_alloc>
   15250:	2200      	movs	r2, #0
   15252:	f36f 0200 	bfc	r2, #0, #1
   15256:	f36f 0241 	bfc	r2, #1, #1
   1525a:	f36f 0282 	bfc	r2, #2, #1
   1525e:	f36f 02c5 	bfc	r2, #3, #3
   15262:	2301      	movs	r3, #1
   15264:	f363 1288 	bfi	r2, r3, #6, #3
   15268:	230c      	movs	r3, #12
   1526a:	f363 2252 	bfi	r2, r3, #9, #10
   1526e:	f36f 42de 	bfc	r2, #19, #12
   15272:	f36f 72df 	bfc	r2, #31, #1
   15276:	4684      	mov	ip, r0
   15278:	b198      	cbz	r0, 152a2 <bus_fault+0x252>
   1527a:	f110 0310 	adds.w	r3, r0, #16
   1527e:	d002      	beq.n	15286 <bus_fault+0x236>
   15280:	4945      	ldr	r1, [pc, #276]	; (15398 <bus_fault+0x348>)
   15282:	6141      	str	r1, [r0, #20]
   15284:	6187      	str	r7, [r0, #24]
   15286:	b163      	cbz	r3, 152a2 <bus_fault+0x252>
   15288:	2303      	movs	r3, #3
   1528a:	f88d 3004 	strb.w	r3, [sp, #4]
   1528e:	2300      	movs	r3, #0
   15290:	f88d 3005 	strb.w	r3, [sp, #5]
   15294:	f88d 3006 	strb.w	r3, [sp, #6]
   15298:	f88d 3007 	strb.w	r3, [sp, #7]
   1529c:	9801      	ldr	r0, [sp, #4]
   1529e:	f8cc 0010 	str.w	r0, [ip, #16]
   152a2:	2300      	movs	r3, #0
   152a4:	4937      	ldr	r1, [pc, #220]	; (15384 <bus_fault+0x334>)
   152a6:	4660      	mov	r0, ip
   152a8:	f013 ff97 	bl	291da <z_log_msg_finalize>
			if (from_hard_fault != 0) {
   152ac:	2e00      	cmp	r6, #0
   152ae:	f43f af14 	beq.w	150da <bus_fault+0x8a>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   152b2:	4a35      	ldr	r2, [pc, #212]	; (15388 <bus_fault+0x338>)
   152b4:	6a93      	ldr	r3, [r2, #40]	; 0x28
   152b6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   152ba:	6293      	str	r3, [r2, #40]	; 0x28
   152bc:	e70d      	b.n	150da <bus_fault+0x8a>
		PR_FAULT_INFO("  Imprecise data bus error");
   152be:	2006      	movs	r0, #6
   152c0:	f7fe fd22 	bl	13d08 <z_log_msg_alloc>
   152c4:	2200      	movs	r2, #0
   152c6:	f36f 0200 	bfc	r2, #0, #1
   152ca:	f36f 0241 	bfc	r2, #1, #1
   152ce:	f36f 0282 	bfc	r2, #2, #1
   152d2:	f36f 02c5 	bfc	r2, #3, #3
   152d6:	2301      	movs	r3, #1
   152d8:	f363 1288 	bfi	r2, r3, #6, #3
   152dc:	2308      	movs	r3, #8
   152de:	f363 2252 	bfi	r2, r3, #9, #10
   152e2:	f36f 42de 	bfc	r2, #19, #12
   152e6:	f36f 72df 	bfc	r2, #31, #1
   152ea:	4606      	mov	r6, r0
   152ec:	b188      	cbz	r0, 15312 <bus_fault+0x2c2>
   152ee:	f110 0310 	adds.w	r3, r0, #16
   152f2:	d001      	beq.n	152f8 <bus_fault+0x2a8>
   152f4:	4929      	ldr	r1, [pc, #164]	; (1539c <bus_fault+0x34c>)
   152f6:	6141      	str	r1, [r0, #20]
   152f8:	b15b      	cbz	r3, 15312 <bus_fault+0x2c2>
   152fa:	2302      	movs	r3, #2
   152fc:	f88d 3004 	strb.w	r3, [sp, #4]
   15300:	2300      	movs	r3, #0
   15302:	f88d 3005 	strb.w	r3, [sp, #5]
   15306:	f88d 3006 	strb.w	r3, [sp, #6]
   1530a:	f88d 3007 	strb.w	r3, [sp, #7]
   1530e:	9801      	ldr	r0, [sp, #4]
   15310:	6130      	str	r0, [r6, #16]
   15312:	2300      	movs	r3, #0
   15314:	491b      	ldr	r1, [pc, #108]	; (15384 <bus_fault+0x334>)
   15316:	4630      	mov	r0, r6
   15318:	f013 ff5f 	bl	291da <z_log_msg_finalize>
   1531c:	e6e3      	b.n	150e6 <bus_fault+0x96>
		PR_FAULT_INFO("  Instruction bus error");
   1531e:	2006      	movs	r0, #6
   15320:	f7fe fcf2 	bl	13d08 <z_log_msg_alloc>
   15324:	2200      	movs	r2, #0
   15326:	f36f 0200 	bfc	r2, #0, #1
   1532a:	f36f 0241 	bfc	r2, #1, #1
   1532e:	f36f 0282 	bfc	r2, #2, #1
   15332:	f36f 02c5 	bfc	r2, #3, #3
   15336:	2301      	movs	r3, #1
   15338:	f363 1288 	bfi	r2, r3, #6, #3
   1533c:	2308      	movs	r3, #8
   1533e:	f363 2252 	bfi	r2, r3, #9, #10
   15342:	f36f 42de 	bfc	r2, #19, #12
   15346:	f36f 72df 	bfc	r2, #31, #1
   1534a:	4606      	mov	r6, r0
   1534c:	b188      	cbz	r0, 15372 <bus_fault+0x322>
   1534e:	f110 0310 	adds.w	r3, r0, #16
   15352:	d001      	beq.n	15358 <bus_fault+0x308>
   15354:	4912      	ldr	r1, [pc, #72]	; (153a0 <bus_fault+0x350>)
   15356:	6141      	str	r1, [r0, #20]
   15358:	b15b      	cbz	r3, 15372 <bus_fault+0x322>
   1535a:	2302      	movs	r3, #2
   1535c:	f88d 3004 	strb.w	r3, [sp, #4]
   15360:	2300      	movs	r3, #0
   15362:	f88d 3005 	strb.w	r3, [sp, #5]
   15366:	f88d 3006 	strb.w	r3, [sp, #6]
   1536a:	f88d 3007 	strb.w	r3, [sp, #7]
   1536e:	9801      	ldr	r0, [sp, #4]
   15370:	6130      	str	r0, [r6, #16]
   15372:	2300      	movs	r3, #0
   15374:	4903      	ldr	r1, [pc, #12]	; (15384 <bus_fault+0x334>)
   15376:	4630      	mov	r0, r6
   15378:	f013 ff2f 	bl	291da <z_log_msg_finalize>
   1537c:	e6bf      	b.n	150fe <bus_fault+0xae>
   1537e:	bf00      	nop
   15380:	00031f94 	.word	0x00031f94
   15384:	000314c8 	.word	0x000314c8
   15388:	e000ed00 	.word	0xe000ed00
   1538c:	00031fac 	.word	0x00031fac
   15390:	00031fc0 	.word	0x00031fc0
   15394:	00031fd4 	.word	0x00031fd4
   15398:	00031ff0 	.word	0x00031ff0
   1539c:	00032008 	.word	0x00032008
   153a0:	00032024 	.word	0x00032024
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   153a4:	2006      	movs	r0, #6
   153a6:	f7fe fcaf 	bl	13d08 <z_log_msg_alloc>
   153aa:	2200      	movs	r2, #0
   153ac:	f36f 0200 	bfc	r2, #0, #1
   153b0:	f36f 0241 	bfc	r2, #1, #1
   153b4:	f36f 0282 	bfc	r2, #2, #1
   153b8:	f36f 02c5 	bfc	r2, #3, #3
   153bc:	2301      	movs	r3, #1
   153be:	f363 1288 	bfi	r2, r3, #6, #3
   153c2:	2308      	movs	r3, #8
   153c4:	f363 2252 	bfi	r2, r3, #9, #10
   153c8:	f36f 42de 	bfc	r2, #19, #12
   153cc:	f36f 72df 	bfc	r2, #31, #1
   153d0:	4606      	mov	r6, r0
   153d2:	b188      	cbz	r0, 153f8 <bus_fault+0x3a8>
   153d4:	f110 0310 	adds.w	r3, r0, #16
   153d8:	d001      	beq.n	153de <bus_fault+0x38e>
   153da:	490a      	ldr	r1, [pc, #40]	; (15404 <bus_fault+0x3b4>)
   153dc:	6141      	str	r1, [r0, #20]
   153de:	b15b      	cbz	r3, 153f8 <bus_fault+0x3a8>
   153e0:	2302      	movs	r3, #2
   153e2:	f88d 3004 	strb.w	r3, [sp, #4]
   153e6:	2300      	movs	r3, #0
   153e8:	f88d 3005 	strb.w	r3, [sp, #5]
   153ec:	f88d 3006 	strb.w	r3, [sp, #6]
   153f0:	f88d 3007 	strb.w	r3, [sp, #7]
   153f4:	9801      	ldr	r0, [sp, #4]
   153f6:	6130      	str	r0, [r6, #16]
   153f8:	2300      	movs	r3, #0
   153fa:	4903      	ldr	r1, [pc, #12]	; (15408 <bus_fault+0x3b8>)
   153fc:	4630      	mov	r0, r6
   153fe:	f013 feec 	bl	291da <z_log_msg_finalize>
   15402:	e67c      	b.n	150fe <bus_fault+0xae>
   15404:	0003203c 	.word	0x0003203c
   15408:	000314c8 	.word	0x000314c8

0001540c <usage_fault>:
{
   1540c:	b500      	push	{lr}
   1540e:	b083      	sub	sp, #12
	PR_FAULT_INFO("***** USAGE FAULT *****");
   15410:	2006      	movs	r0, #6
   15412:	f7fe fc79 	bl	13d08 <z_log_msg_alloc>
   15416:	2200      	movs	r2, #0
   15418:	f36f 0200 	bfc	r2, #0, #1
   1541c:	f36f 0241 	bfc	r2, #1, #1
   15420:	f36f 0282 	bfc	r2, #2, #1
   15424:	f36f 02c5 	bfc	r2, #3, #3
   15428:	2301      	movs	r3, #1
   1542a:	f363 1288 	bfi	r2, r3, #6, #3
   1542e:	2308      	movs	r3, #8
   15430:	f363 2252 	bfi	r2, r3, #9, #10
   15434:	f36f 42de 	bfc	r2, #19, #12
   15438:	f36f 72df 	bfc	r2, #31, #1
   1543c:	4684      	mov	ip, r0
   1543e:	b190      	cbz	r0, 15466 <usage_fault+0x5a>
   15440:	f110 0310 	adds.w	r3, r0, #16
   15444:	d001      	beq.n	1544a <usage_fault+0x3e>
   15446:	49b3      	ldr	r1, [pc, #716]	; (15714 <usage_fault+0x308>)
   15448:	6141      	str	r1, [r0, #20]
   1544a:	b163      	cbz	r3, 15466 <usage_fault+0x5a>
   1544c:	2302      	movs	r3, #2
   1544e:	f88d 3004 	strb.w	r3, [sp, #4]
   15452:	2300      	movs	r3, #0
   15454:	f88d 3005 	strb.w	r3, [sp, #5]
   15458:	f88d 3006 	strb.w	r3, [sp, #6]
   1545c:	f88d 3007 	strb.w	r3, [sp, #7]
   15460:	9801      	ldr	r0, [sp, #4]
   15462:	f8cc 0010 	str.w	r0, [ip, #16]
   15466:	2300      	movs	r3, #0
   15468:	49ab      	ldr	r1, [pc, #684]	; (15718 <usage_fault+0x30c>)
   1546a:	4660      	mov	r0, ip
   1546c:	f013 feb5 	bl	291da <z_log_msg_finalize>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   15470:	4baa      	ldr	r3, [pc, #680]	; (1571c <usage_fault+0x310>)
   15472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15474:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
   15478:	d126      	bne.n	154c8 <usage_fault+0xbc>
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   1547a:	4ba8      	ldr	r3, [pc, #672]	; (1571c <usage_fault+0x310>)
   1547c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1547e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   15482:	d152      	bne.n	1552a <usage_fault+0x11e>
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   15484:	4ba5      	ldr	r3, [pc, #660]	; (1571c <usage_fault+0x310>)
   15486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15488:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   1548c:	d17e      	bne.n	1558c <usage_fault+0x180>
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   1548e:	4ba3      	ldr	r3, [pc, #652]	; (1571c <usage_fault+0x310>)
   15490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15492:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   15496:	f040 80aa 	bne.w	155ee <usage_fault+0x1e2>
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   1549a:	4ba0      	ldr	r3, [pc, #640]	; (1571c <usage_fault+0x310>)
   1549c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1549e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   154a2:	f040 80d5 	bne.w	15650 <usage_fault+0x244>
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   154a6:	4b9d      	ldr	r3, [pc, #628]	; (1571c <usage_fault+0x310>)
   154a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   154aa:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   154ae:	f040 8100 	bne.w	156b2 <usage_fault+0x2a6>
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   154b2:	4a9a      	ldr	r2, [pc, #616]	; (1571c <usage_fault+0x310>)
   154b4:	6a93      	ldr	r3, [r2, #40]	; 0x28
   154b6:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   154ba:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   154be:	6293      	str	r3, [r2, #40]	; 0x28
}
   154c0:	2000      	movs	r0, #0
   154c2:	b003      	add	sp, #12
   154c4:	f85d fb04 	ldr.w	pc, [sp], #4
		PR_FAULT_INFO("  Division by zero");
   154c8:	2006      	movs	r0, #6
   154ca:	f7fe fc1d 	bl	13d08 <z_log_msg_alloc>
   154ce:	2200      	movs	r2, #0
   154d0:	f36f 0200 	bfc	r2, #0, #1
   154d4:	f36f 0241 	bfc	r2, #1, #1
   154d8:	f36f 0282 	bfc	r2, #2, #1
   154dc:	f36f 02c5 	bfc	r2, #3, #3
   154e0:	2301      	movs	r3, #1
   154e2:	f363 1288 	bfi	r2, r3, #6, #3
   154e6:	2308      	movs	r3, #8
   154e8:	f363 2252 	bfi	r2, r3, #9, #10
   154ec:	f36f 42de 	bfc	r2, #19, #12
   154f0:	f36f 72df 	bfc	r2, #31, #1
   154f4:	4684      	mov	ip, r0
   154f6:	b190      	cbz	r0, 1551e <usage_fault+0x112>
   154f8:	f110 0310 	adds.w	r3, r0, #16
   154fc:	d001      	beq.n	15502 <usage_fault+0xf6>
   154fe:	4988      	ldr	r1, [pc, #544]	; (15720 <usage_fault+0x314>)
   15500:	6141      	str	r1, [r0, #20]
   15502:	b163      	cbz	r3, 1551e <usage_fault+0x112>
   15504:	2302      	movs	r3, #2
   15506:	f88d 3004 	strb.w	r3, [sp, #4]
   1550a:	2300      	movs	r3, #0
   1550c:	f88d 3005 	strb.w	r3, [sp, #5]
   15510:	f88d 3006 	strb.w	r3, [sp, #6]
   15514:	f88d 3007 	strb.w	r3, [sp, #7]
   15518:	9801      	ldr	r0, [sp, #4]
   1551a:	f8cc 0010 	str.w	r0, [ip, #16]
   1551e:	2300      	movs	r3, #0
   15520:	497d      	ldr	r1, [pc, #500]	; (15718 <usage_fault+0x30c>)
   15522:	4660      	mov	r0, ip
   15524:	f013 fe59 	bl	291da <z_log_msg_finalize>
   15528:	e7a7      	b.n	1547a <usage_fault+0x6e>
		PR_FAULT_INFO("  Unaligned memory access");
   1552a:	2006      	movs	r0, #6
   1552c:	f7fe fbec 	bl	13d08 <z_log_msg_alloc>
   15530:	2200      	movs	r2, #0
   15532:	f36f 0200 	bfc	r2, #0, #1
   15536:	f36f 0241 	bfc	r2, #1, #1
   1553a:	f36f 0282 	bfc	r2, #2, #1
   1553e:	f36f 02c5 	bfc	r2, #3, #3
   15542:	2301      	movs	r3, #1
   15544:	f363 1288 	bfi	r2, r3, #6, #3
   15548:	2308      	movs	r3, #8
   1554a:	f363 2252 	bfi	r2, r3, #9, #10
   1554e:	f36f 42de 	bfc	r2, #19, #12
   15552:	f36f 72df 	bfc	r2, #31, #1
   15556:	4684      	mov	ip, r0
   15558:	b190      	cbz	r0, 15580 <usage_fault+0x174>
   1555a:	f110 0310 	adds.w	r3, r0, #16
   1555e:	d001      	beq.n	15564 <usage_fault+0x158>
   15560:	4970      	ldr	r1, [pc, #448]	; (15724 <usage_fault+0x318>)
   15562:	6141      	str	r1, [r0, #20]
   15564:	b163      	cbz	r3, 15580 <usage_fault+0x174>
   15566:	2302      	movs	r3, #2
   15568:	f88d 3004 	strb.w	r3, [sp, #4]
   1556c:	2300      	movs	r3, #0
   1556e:	f88d 3005 	strb.w	r3, [sp, #5]
   15572:	f88d 3006 	strb.w	r3, [sp, #6]
   15576:	f88d 3007 	strb.w	r3, [sp, #7]
   1557a:	9801      	ldr	r0, [sp, #4]
   1557c:	f8cc 0010 	str.w	r0, [ip, #16]
   15580:	2300      	movs	r3, #0
   15582:	4965      	ldr	r1, [pc, #404]	; (15718 <usage_fault+0x30c>)
   15584:	4660      	mov	r0, ip
   15586:	f013 fe28 	bl	291da <z_log_msg_finalize>
   1558a:	e77b      	b.n	15484 <usage_fault+0x78>
		PR_FAULT_INFO("  No coprocessor instructions");
   1558c:	2006      	movs	r0, #6
   1558e:	f7fe fbbb 	bl	13d08 <z_log_msg_alloc>
   15592:	2200      	movs	r2, #0
   15594:	f36f 0200 	bfc	r2, #0, #1
   15598:	f36f 0241 	bfc	r2, #1, #1
   1559c:	f36f 0282 	bfc	r2, #2, #1
   155a0:	f36f 02c5 	bfc	r2, #3, #3
   155a4:	2301      	movs	r3, #1
   155a6:	f363 1288 	bfi	r2, r3, #6, #3
   155aa:	2308      	movs	r3, #8
   155ac:	f363 2252 	bfi	r2, r3, #9, #10
   155b0:	f36f 42de 	bfc	r2, #19, #12
   155b4:	f36f 72df 	bfc	r2, #31, #1
   155b8:	4684      	mov	ip, r0
   155ba:	b190      	cbz	r0, 155e2 <usage_fault+0x1d6>
   155bc:	f110 0310 	adds.w	r3, r0, #16
   155c0:	d001      	beq.n	155c6 <usage_fault+0x1ba>
   155c2:	4959      	ldr	r1, [pc, #356]	; (15728 <usage_fault+0x31c>)
   155c4:	6141      	str	r1, [r0, #20]
   155c6:	b163      	cbz	r3, 155e2 <usage_fault+0x1d6>
   155c8:	2302      	movs	r3, #2
   155ca:	f88d 3004 	strb.w	r3, [sp, #4]
   155ce:	2300      	movs	r3, #0
   155d0:	f88d 3005 	strb.w	r3, [sp, #5]
   155d4:	f88d 3006 	strb.w	r3, [sp, #6]
   155d8:	f88d 3007 	strb.w	r3, [sp, #7]
   155dc:	9801      	ldr	r0, [sp, #4]
   155de:	f8cc 0010 	str.w	r0, [ip, #16]
   155e2:	2300      	movs	r3, #0
   155e4:	494c      	ldr	r1, [pc, #304]	; (15718 <usage_fault+0x30c>)
   155e6:	4660      	mov	r0, ip
   155e8:	f013 fdf7 	bl	291da <z_log_msg_finalize>
   155ec:	e74f      	b.n	1548e <usage_fault+0x82>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   155ee:	2006      	movs	r0, #6
   155f0:	f7fe fb8a 	bl	13d08 <z_log_msg_alloc>
   155f4:	2200      	movs	r2, #0
   155f6:	f36f 0200 	bfc	r2, #0, #1
   155fa:	f36f 0241 	bfc	r2, #1, #1
   155fe:	f36f 0282 	bfc	r2, #2, #1
   15602:	f36f 02c5 	bfc	r2, #3, #3
   15606:	2301      	movs	r3, #1
   15608:	f363 1288 	bfi	r2, r3, #6, #3
   1560c:	2308      	movs	r3, #8
   1560e:	f363 2252 	bfi	r2, r3, #9, #10
   15612:	f36f 42de 	bfc	r2, #19, #12
   15616:	f36f 72df 	bfc	r2, #31, #1
   1561a:	4684      	mov	ip, r0
   1561c:	b190      	cbz	r0, 15644 <usage_fault+0x238>
   1561e:	f110 0310 	adds.w	r3, r0, #16
   15622:	d001      	beq.n	15628 <usage_fault+0x21c>
   15624:	4941      	ldr	r1, [pc, #260]	; (1572c <usage_fault+0x320>)
   15626:	6141      	str	r1, [r0, #20]
   15628:	b163      	cbz	r3, 15644 <usage_fault+0x238>
   1562a:	2302      	movs	r3, #2
   1562c:	f88d 3004 	strb.w	r3, [sp, #4]
   15630:	2300      	movs	r3, #0
   15632:	f88d 3005 	strb.w	r3, [sp, #5]
   15636:	f88d 3006 	strb.w	r3, [sp, #6]
   1563a:	f88d 3007 	strb.w	r3, [sp, #7]
   1563e:	9801      	ldr	r0, [sp, #4]
   15640:	f8cc 0010 	str.w	r0, [ip, #16]
   15644:	2300      	movs	r3, #0
   15646:	4934      	ldr	r1, [pc, #208]	; (15718 <usage_fault+0x30c>)
   15648:	4660      	mov	r0, ip
   1564a:	f013 fdc6 	bl	291da <z_log_msg_finalize>
   1564e:	e724      	b.n	1549a <usage_fault+0x8e>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   15650:	2006      	movs	r0, #6
   15652:	f7fe fb59 	bl	13d08 <z_log_msg_alloc>
   15656:	2200      	movs	r2, #0
   15658:	f36f 0200 	bfc	r2, #0, #1
   1565c:	f36f 0241 	bfc	r2, #1, #1
   15660:	f36f 0282 	bfc	r2, #2, #1
   15664:	f36f 02c5 	bfc	r2, #3, #3
   15668:	2301      	movs	r3, #1
   1566a:	f363 1288 	bfi	r2, r3, #6, #3
   1566e:	2308      	movs	r3, #8
   15670:	f363 2252 	bfi	r2, r3, #9, #10
   15674:	f36f 42de 	bfc	r2, #19, #12
   15678:	f36f 72df 	bfc	r2, #31, #1
   1567c:	4684      	mov	ip, r0
   1567e:	b190      	cbz	r0, 156a6 <usage_fault+0x29a>
   15680:	f110 0310 	adds.w	r3, r0, #16
   15684:	d001      	beq.n	1568a <usage_fault+0x27e>
   15686:	492a      	ldr	r1, [pc, #168]	; (15730 <usage_fault+0x324>)
   15688:	6141      	str	r1, [r0, #20]
   1568a:	b163      	cbz	r3, 156a6 <usage_fault+0x29a>
   1568c:	2302      	movs	r3, #2
   1568e:	f88d 3004 	strb.w	r3, [sp, #4]
   15692:	2300      	movs	r3, #0
   15694:	f88d 3005 	strb.w	r3, [sp, #5]
   15698:	f88d 3006 	strb.w	r3, [sp, #6]
   1569c:	f88d 3007 	strb.w	r3, [sp, #7]
   156a0:	9801      	ldr	r0, [sp, #4]
   156a2:	f8cc 0010 	str.w	r0, [ip, #16]
   156a6:	2300      	movs	r3, #0
   156a8:	491b      	ldr	r1, [pc, #108]	; (15718 <usage_fault+0x30c>)
   156aa:	4660      	mov	r0, ip
   156ac:	f013 fd95 	bl	291da <z_log_msg_finalize>
   156b0:	e6f9      	b.n	154a6 <usage_fault+0x9a>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   156b2:	2006      	movs	r0, #6
   156b4:	f7fe fb28 	bl	13d08 <z_log_msg_alloc>
   156b8:	2200      	movs	r2, #0
   156ba:	f36f 0200 	bfc	r2, #0, #1
   156be:	f36f 0241 	bfc	r2, #1, #1
   156c2:	f36f 0282 	bfc	r2, #2, #1
   156c6:	f36f 02c5 	bfc	r2, #3, #3
   156ca:	2301      	movs	r3, #1
   156cc:	f363 1288 	bfi	r2, r3, #6, #3
   156d0:	2308      	movs	r3, #8
   156d2:	f363 2252 	bfi	r2, r3, #9, #10
   156d6:	f36f 42de 	bfc	r2, #19, #12
   156da:	f36f 72df 	bfc	r2, #31, #1
   156de:	4684      	mov	ip, r0
   156e0:	b190      	cbz	r0, 15708 <usage_fault+0x2fc>
   156e2:	f110 0310 	adds.w	r3, r0, #16
   156e6:	d001      	beq.n	156ec <usage_fault+0x2e0>
   156e8:	4912      	ldr	r1, [pc, #72]	; (15734 <usage_fault+0x328>)
   156ea:	6141      	str	r1, [r0, #20]
   156ec:	b163      	cbz	r3, 15708 <usage_fault+0x2fc>
   156ee:	2302      	movs	r3, #2
   156f0:	f88d 3004 	strb.w	r3, [sp, #4]
   156f4:	2300      	movs	r3, #0
   156f6:	f88d 3005 	strb.w	r3, [sp, #5]
   156fa:	f88d 3006 	strb.w	r3, [sp, #6]
   156fe:	f88d 3007 	strb.w	r3, [sp, #7]
   15702:	9801      	ldr	r0, [sp, #4]
   15704:	f8cc 0010 	str.w	r0, [ip, #16]
   15708:	2300      	movs	r3, #0
   1570a:	4903      	ldr	r1, [pc, #12]	; (15718 <usage_fault+0x30c>)
   1570c:	4660      	mov	r0, ip
   1570e:	f013 fd64 	bl	291da <z_log_msg_finalize>
   15712:	e6ce      	b.n	154b2 <usage_fault+0xa6>
   15714:	0003206c 	.word	0x0003206c
   15718:	000314c8 	.word	0x000314c8
   1571c:	e000ed00 	.word	0xe000ed00
   15720:	00032084 	.word	0x00032084
   15724:	00032098 	.word	0x00032098
   15728:	000320b4 	.word	0x000320b4
   1572c:	000320d4 	.word	0x000320d4
   15730:	000320fc 	.word	0x000320fc
   15734:	00032118 	.word	0x00032118

00015738 <debug_monitor>:
{
   15738:	b510      	push	{r4, lr}
   1573a:	b082      	sub	sp, #8
	*recoverable = false;
   1573c:	2400      	movs	r4, #0
   1573e:	700c      	strb	r4, [r1, #0]
	PR_FAULT_INFO(
   15740:	2006      	movs	r0, #6
   15742:	f7fe fae1 	bl	13d08 <z_log_msg_alloc>
   15746:	4622      	mov	r2, r4
   15748:	f364 0200 	bfi	r2, r4, #0, #1
   1574c:	f364 0241 	bfi	r2, r4, #1, #1
   15750:	f364 0282 	bfi	r2, r4, #2, #1
   15754:	f364 02c5 	bfi	r2, r4, #3, #3
   15758:	2301      	movs	r3, #1
   1575a:	f363 1288 	bfi	r2, r3, #6, #3
   1575e:	2308      	movs	r3, #8
   15760:	f363 2252 	bfi	r2, r3, #9, #10
   15764:	f364 42de 	bfi	r2, r4, #19, #12
   15768:	f364 72df 	bfi	r2, r4, #31, #1
   1576c:	4604      	mov	r4, r0
   1576e:	b188      	cbz	r0, 15794 <debug_monitor+0x5c>
   15770:	f110 0310 	adds.w	r3, r0, #16
   15774:	d001      	beq.n	1577a <debug_monitor+0x42>
   15776:	490b      	ldr	r1, [pc, #44]	; (157a4 <debug_monitor+0x6c>)
   15778:	6141      	str	r1, [r0, #20]
   1577a:	b15b      	cbz	r3, 15794 <debug_monitor+0x5c>
   1577c:	2302      	movs	r3, #2
   1577e:	f88d 3004 	strb.w	r3, [sp, #4]
   15782:	2300      	movs	r3, #0
   15784:	f88d 3005 	strb.w	r3, [sp, #5]
   15788:	f88d 3006 	strb.w	r3, [sp, #6]
   1578c:	f88d 3007 	strb.w	r3, [sp, #7]
   15790:	9801      	ldr	r0, [sp, #4]
   15792:	6120      	str	r0, [r4, #16]
   15794:	2300      	movs	r3, #0
   15796:	4904      	ldr	r1, [pc, #16]	; (157a8 <debug_monitor+0x70>)
   15798:	4620      	mov	r0, r4
   1579a:	f013 fd1e 	bl	291da <z_log_msg_finalize>
}
   1579e:	b002      	add	sp, #8
   157a0:	bd10      	pop	{r4, pc}
   157a2:	bf00      	nop
   157a4:	00032144 	.word	0x00032144
   157a8:	000314c8 	.word	0x000314c8

000157ac <reserved_exception>:
{
   157ac:	b590      	push	{r4, r7, lr}
   157ae:	b083      	sub	sp, #12
   157b0:	af00      	add	r7, sp, #0
	PR_FAULT_INFO("***** %s %d) *****",
   157b2:	290f      	cmp	r1, #15
   157b4:	dc23      	bgt.n	157fe <reserved_exception+0x52>
   157b6:	4c30      	ldr	r4, [pc, #192]	; (15878 <reserved_exception+0xcc>)
   157b8:	3910      	subs	r1, #16
   157ba:	2300      	movs	r3, #0
   157bc:	713b      	strb	r3, [r7, #4]
   157be:	2302      	movs	r3, #2
   157c0:	717b      	strb	r3, [r7, #5]
   157c2:	b08a      	sub	sp, #40	; 0x28
   157c4:	46ec      	mov	ip, sp
   157c6:	f11c 0210 	adds.w	r2, ip, #16
   157ca:	d01a      	beq.n	15802 <reserved_exception+0x56>
   157cc:	2012      	movs	r0, #18
   157ce:	b122      	cbz	r2, 157da <reserved_exception+0x2e>
   157d0:	2804      	cmp	r0, #4
   157d2:	dd02      	ble.n	157da <reserved_exception+0x2e>
   157d4:	4b29      	ldr	r3, [pc, #164]	; (1587c <reserved_exception+0xd0>)
   157d6:	f8cc 3014 	str.w	r3, [ip, #20]
   157da:	2300      	movs	r3, #0
   157dc:	703b      	strb	r3, [r7, #0]
   157de:	2302      	movs	r3, #2
   157e0:	707b      	strb	r3, [r7, #1]
   157e2:	b1e2      	cbz	r2, 1581e <reserved_exception+0x72>
   157e4:	4603      	mov	r3, r0
   157e6:	2808      	cmp	r0, #8
   157e8:	dd01      	ble.n	157ee <reserved_exception+0x42>
   157ea:	f8cc 4018 	str.w	r4, [ip, #24]
   157ee:	2b0c      	cmp	r3, #12
   157f0:	dd01      	ble.n	157f6 <reserved_exception+0x4a>
   157f2:	f8cc 101c 	str.w	r1, [ip, #28]
   157f6:	f10c 0320 	add.w	r3, ip, #32
   157fa:	2100      	movs	r1, #0
   157fc:	e00d      	b.n	1581a <reserved_exception+0x6e>
   157fe:	4c20      	ldr	r4, [pc, #128]	; (15880 <reserved_exception+0xd4>)
   15800:	e7da      	b.n	157b8 <reserved_exception+0xc>
   15802:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   15806:	e7e2      	b.n	157ce <reserved_exception+0x22>
   15808:	f101 0408 	add.w	r4, r1, #8
   1580c:	eb04 0e07 	add.w	lr, r4, r7
   15810:	f81e ec08 	ldrb.w	lr, [lr, #-8]
   15814:	f803 eb01 	strb.w	lr, [r3], #1
   15818:	3101      	adds	r1, #1
   1581a:	2901      	cmp	r1, #1
   1581c:	d9f4      	bls.n	15808 <reserved_exception+0x5c>
   1581e:	2811      	cmp	r0, #17
   15820:	dd26      	ble.n	15870 <reserved_exception+0xc4>
   15822:	2312      	movs	r3, #18
   15824:	b14a      	cbz	r2, 1583a <reserved_exception+0x8e>
   15826:	2104      	movs	r1, #4
   15828:	7139      	strb	r1, [r7, #4]
   1582a:	2100      	movs	r1, #0
   1582c:	7179      	strb	r1, [r7, #5]
   1582e:	71b9      	strb	r1, [r7, #6]
   15830:	2101      	movs	r1, #1
   15832:	71f9      	strb	r1, [r7, #7]
   15834:	6878      	ldr	r0, [r7, #4]
   15836:	f8cc 0010 	str.w	r0, [ip, #16]
   1583a:	2100      	movs	r1, #0
   1583c:	f36f 0100 	bfc	r1, #0, #1
   15840:	f36f 0141 	bfc	r1, #1, #1
   15844:	f36f 0182 	bfc	r1, #2, #1
   15848:	f36f 01c5 	bfc	r1, #3, #3
   1584c:	2001      	movs	r0, #1
   1584e:	f360 1188 	bfi	r1, r0, #6, #3
   15852:	f3c3 0309 	ubfx	r3, r3, #0, #10
   15856:	f363 2152 	bfi	r1, r3, #9, #10
   1585a:	f36f 41de 	bfc	r1, #19, #12
   1585e:	f36f 71df 	bfc	r1, #31, #1
   15862:	2300      	movs	r3, #0
   15864:	4807      	ldr	r0, [pc, #28]	; (15884 <reserved_exception+0xd8>)
   15866:	f013 fcd0 	bl	2920a <z_impl_z_log_msg_static_create>
}
   1586a:	370c      	adds	r7, #12
   1586c:	46bd      	mov	sp, r7
   1586e:	bd90      	pop	{r4, r7, pc}
	PR_FAULT_INFO("***** %s %d) *****",
   15870:	f06f 031b 	mvn.w	r3, #27
   15874:	e7d6      	b.n	15824 <reserved_exception+0x78>
   15876:	bf00      	nop
   15878:	00032168 	.word	0x00032168
   1587c:	0003219c 	.word	0x0003219c
   15880:	00032180 	.word	0x00032180
   15884:	000314c8 	.word	0x000314c8

00015888 <mem_manage_fault>:
{
   15888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1588c:	b082      	sub	sp, #8
   1588e:	4605      	mov	r5, r0
   15890:	460f      	mov	r7, r1
   15892:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
   15894:	2006      	movs	r0, #6
   15896:	f7fe fa37 	bl	13d08 <z_log_msg_alloc>
   1589a:	2200      	movs	r2, #0
   1589c:	f36f 0200 	bfc	r2, #0, #1
   158a0:	f36f 0241 	bfc	r2, #1, #1
   158a4:	f36f 0282 	bfc	r2, #2, #1
   158a8:	f36f 02c5 	bfc	r2, #3, #3
   158ac:	2301      	movs	r3, #1
   158ae:	f363 1288 	bfi	r2, r3, #6, #3
   158b2:	2308      	movs	r3, #8
   158b4:	f363 2252 	bfi	r2, r3, #9, #10
   158b8:	f36f 42de 	bfc	r2, #19, #12
   158bc:	f36f 72df 	bfc	r2, #31, #1
   158c0:	4604      	mov	r4, r0
   158c2:	b188      	cbz	r0, 158e8 <mem_manage_fault+0x60>
   158c4:	f110 0310 	adds.w	r3, r0, #16
   158c8:	d001      	beq.n	158ce <mem_manage_fault+0x46>
   158ca:	49ae      	ldr	r1, [pc, #696]	; (15b84 <mem_manage_fault+0x2fc>)
   158cc:	6141      	str	r1, [r0, #20]
   158ce:	b15b      	cbz	r3, 158e8 <mem_manage_fault+0x60>
   158d0:	2302      	movs	r3, #2
   158d2:	f88d 3004 	strb.w	r3, [sp, #4]
   158d6:	2300      	movs	r3, #0
   158d8:	f88d 3005 	strb.w	r3, [sp, #5]
   158dc:	f88d 3006 	strb.w	r3, [sp, #6]
   158e0:	f88d 3007 	strb.w	r3, [sp, #7]
   158e4:	9801      	ldr	r0, [sp, #4]
   158e6:	6120      	str	r0, [r4, #16]
   158e8:	2300      	movs	r3, #0
   158ea:	49a7      	ldr	r1, [pc, #668]	; (15b88 <mem_manage_fault+0x300>)
   158ec:	4620      	mov	r0, r4
   158ee:	f013 fc74 	bl	291da <z_log_msg_finalize>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   158f2:	4ba6      	ldr	r3, [pc, #664]	; (15b8c <mem_manage_fault+0x304>)
   158f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   158f6:	f013 0f10 	tst.w	r3, #16
   158fa:	d140      	bne.n	1597e <mem_manage_fault+0xf6>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   158fc:	4ba3      	ldr	r3, [pc, #652]	; (15b8c <mem_manage_fault+0x304>)
   158fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15900:	f013 0f08 	tst.w	r3, #8
   15904:	d16b      	bne.n	159de <mem_manage_fault+0x156>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   15906:	4ba1      	ldr	r3, [pc, #644]	; (15b8c <mem_manage_fault+0x304>)
   15908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1590a:	f013 0f02 	tst.w	r3, #2
   1590e:	f040 8096 	bne.w	15a3e <mem_manage_fault+0x1b6>
	uint32_t mmfar = -EINVAL;
   15912:	f06f 0815 	mvn.w	r8, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   15916:	4b9d      	ldr	r3, [pc, #628]	; (15b8c <mem_manage_fault+0x304>)
   15918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1591a:	f013 0f01 	tst.w	r3, #1
   1591e:	f040 8101 	bne.w	15b24 <mem_manage_fault+0x29c>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   15922:	4b9a      	ldr	r3, [pc, #616]	; (15b8c <mem_manage_fault+0x304>)
   15924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15926:	f013 0f20 	tst.w	r3, #32
   1592a:	f040 813b 	bne.w	15ba4 <mem_manage_fault+0x31c>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   1592e:	4b97      	ldr	r3, [pc, #604]	; (15b8c <mem_manage_fault+0x304>)
   15930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15932:	f013 0f10 	tst.w	r3, #16
   15936:	d104      	bne.n	15942 <mem_manage_fault+0xba>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   15938:	4b94      	ldr	r3, [pc, #592]	; (15b8c <mem_manage_fault+0x304>)
   1593a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   1593c:	f014 0402 	ands.w	r4, r4, #2
   15940:	d005      	beq.n	1594e <mem_manage_fault+0xc6>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   15942:	4b92      	ldr	r3, [pc, #584]	; (15b8c <mem_manage_fault+0x304>)
   15944:	685c      	ldr	r4, [r3, #4]
   15946:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
   1594a:	f040 815b 	bne.w	15c04 <mem_manage_fault+0x37c>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   1594e:	4b8f      	ldr	r3, [pc, #572]	; (15b8c <mem_manage_fault+0x304>)
   15950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15952:	f013 0f20 	tst.w	r3, #32
   15956:	d004      	beq.n	15962 <mem_manage_fault+0xda>
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   15958:	4a8c      	ldr	r2, [pc, #560]	; (15b8c <mem_manage_fault+0x304>)
   1595a:	6a53      	ldr	r3, [r2, #36]	; 0x24
   1595c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   15960:	6253      	str	r3, [r2, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   15962:	4a8a      	ldr	r2, [pc, #552]	; (15b8c <mem_manage_fault+0x304>)
   15964:	6a93      	ldr	r3, [r2, #40]	; 0x28
   15966:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   1596a:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   1596c:	2101      	movs	r1, #1
   1596e:	4628      	mov	r0, r5
   15970:	f014 f841 	bl	299f6 <memory_fault_recoverable>
   15974:	7030      	strb	r0, [r6, #0]
}
   15976:	4620      	mov	r0, r4
   15978:	b002      	add	sp, #8
   1597a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		PR_FAULT_INFO("  Stacking error (context area might be"
   1597e:	2006      	movs	r0, #6
   15980:	f7fe f9c2 	bl	13d08 <z_log_msg_alloc>
   15984:	2200      	movs	r2, #0
   15986:	f36f 0200 	bfc	r2, #0, #1
   1598a:	f36f 0241 	bfc	r2, #1, #1
   1598e:	f36f 0282 	bfc	r2, #2, #1
   15992:	f36f 02c5 	bfc	r2, #3, #3
   15996:	2301      	movs	r3, #1
   15998:	f363 1288 	bfi	r2, r3, #6, #3
   1599c:	2308      	movs	r3, #8
   1599e:	f363 2252 	bfi	r2, r3, #9, #10
   159a2:	f36f 42de 	bfc	r2, #19, #12
   159a6:	f36f 72df 	bfc	r2, #31, #1
   159aa:	4604      	mov	r4, r0
   159ac:	b188      	cbz	r0, 159d2 <mem_manage_fault+0x14a>
   159ae:	f110 0310 	adds.w	r3, r0, #16
   159b2:	d001      	beq.n	159b8 <mem_manage_fault+0x130>
   159b4:	4976      	ldr	r1, [pc, #472]	; (15b90 <mem_manage_fault+0x308>)
   159b6:	6141      	str	r1, [r0, #20]
   159b8:	b15b      	cbz	r3, 159d2 <mem_manage_fault+0x14a>
   159ba:	2302      	movs	r3, #2
   159bc:	f88d 3004 	strb.w	r3, [sp, #4]
   159c0:	2300      	movs	r3, #0
   159c2:	f88d 3005 	strb.w	r3, [sp, #5]
   159c6:	f88d 3006 	strb.w	r3, [sp, #6]
   159ca:	f88d 3007 	strb.w	r3, [sp, #7]
   159ce:	9801      	ldr	r0, [sp, #4]
   159d0:	6120      	str	r0, [r4, #16]
   159d2:	2300      	movs	r3, #0
   159d4:	496c      	ldr	r1, [pc, #432]	; (15b88 <mem_manage_fault+0x300>)
   159d6:	4620      	mov	r0, r4
   159d8:	f013 fbff 	bl	291da <z_log_msg_finalize>
   159dc:	e78e      	b.n	158fc <mem_manage_fault+0x74>
		PR_FAULT_INFO("  Unstacking error");
   159de:	2006      	movs	r0, #6
   159e0:	f7fe f992 	bl	13d08 <z_log_msg_alloc>
   159e4:	2200      	movs	r2, #0
   159e6:	f36f 0200 	bfc	r2, #0, #1
   159ea:	f36f 0241 	bfc	r2, #1, #1
   159ee:	f36f 0282 	bfc	r2, #2, #1
   159f2:	f36f 02c5 	bfc	r2, #3, #3
   159f6:	2301      	movs	r3, #1
   159f8:	f363 1288 	bfi	r2, r3, #6, #3
   159fc:	2308      	movs	r3, #8
   159fe:	f363 2252 	bfi	r2, r3, #9, #10
   15a02:	f36f 42de 	bfc	r2, #19, #12
   15a06:	f36f 72df 	bfc	r2, #31, #1
   15a0a:	4604      	mov	r4, r0
   15a0c:	b188      	cbz	r0, 15a32 <mem_manage_fault+0x1aa>
   15a0e:	f110 0310 	adds.w	r3, r0, #16
   15a12:	d001      	beq.n	15a18 <mem_manage_fault+0x190>
   15a14:	495f      	ldr	r1, [pc, #380]	; (15b94 <mem_manage_fault+0x30c>)
   15a16:	6141      	str	r1, [r0, #20]
   15a18:	b15b      	cbz	r3, 15a32 <mem_manage_fault+0x1aa>
   15a1a:	2302      	movs	r3, #2
   15a1c:	f88d 3004 	strb.w	r3, [sp, #4]
   15a20:	2300      	movs	r3, #0
   15a22:	f88d 3005 	strb.w	r3, [sp, #5]
   15a26:	f88d 3006 	strb.w	r3, [sp, #6]
   15a2a:	f88d 3007 	strb.w	r3, [sp, #7]
   15a2e:	9801      	ldr	r0, [sp, #4]
   15a30:	6120      	str	r0, [r4, #16]
   15a32:	2300      	movs	r3, #0
   15a34:	4954      	ldr	r1, [pc, #336]	; (15b88 <mem_manage_fault+0x300>)
   15a36:	4620      	mov	r0, r4
   15a38:	f013 fbcf 	bl	291da <z_log_msg_finalize>
   15a3c:	e763      	b.n	15906 <mem_manage_fault+0x7e>
		PR_FAULT_INFO("  Data Access Violation");
   15a3e:	2006      	movs	r0, #6
   15a40:	f7fe f962 	bl	13d08 <z_log_msg_alloc>
   15a44:	2200      	movs	r2, #0
   15a46:	f36f 0200 	bfc	r2, #0, #1
   15a4a:	f36f 0241 	bfc	r2, #1, #1
   15a4e:	f36f 0282 	bfc	r2, #2, #1
   15a52:	f36f 02c5 	bfc	r2, #3, #3
   15a56:	2301      	movs	r3, #1
   15a58:	f363 1288 	bfi	r2, r3, #6, #3
   15a5c:	2308      	movs	r3, #8
   15a5e:	f363 2252 	bfi	r2, r3, #9, #10
   15a62:	f36f 42de 	bfc	r2, #19, #12
   15a66:	f36f 72df 	bfc	r2, #31, #1
   15a6a:	4604      	mov	r4, r0
   15a6c:	b188      	cbz	r0, 15a92 <mem_manage_fault+0x20a>
   15a6e:	f110 0310 	adds.w	r3, r0, #16
   15a72:	d001      	beq.n	15a78 <mem_manage_fault+0x1f0>
   15a74:	4948      	ldr	r1, [pc, #288]	; (15b98 <mem_manage_fault+0x310>)
   15a76:	6141      	str	r1, [r0, #20]
   15a78:	b15b      	cbz	r3, 15a92 <mem_manage_fault+0x20a>
   15a7a:	2302      	movs	r3, #2
   15a7c:	f88d 3004 	strb.w	r3, [sp, #4]
   15a80:	2300      	movs	r3, #0
   15a82:	f88d 3005 	strb.w	r3, [sp, #5]
   15a86:	f88d 3006 	strb.w	r3, [sp, #6]
   15a8a:	f88d 3007 	strb.w	r3, [sp, #7]
   15a8e:	9801      	ldr	r0, [sp, #4]
   15a90:	6120      	str	r0, [r4, #16]
   15a92:	2300      	movs	r3, #0
   15a94:	493c      	ldr	r1, [pc, #240]	; (15b88 <mem_manage_fault+0x300>)
   15a96:	4620      	mov	r0, r4
   15a98:	f013 fb9f 	bl	291da <z_log_msg_finalize>
		uint32_t temp = SCB->MMFAR;
   15a9c:	4b3b      	ldr	r3, [pc, #236]	; (15b8c <mem_manage_fault+0x304>)
   15a9e:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   15aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15aa4:	f013 0f80 	tst.w	r3, #128	; 0x80
   15aa8:	d102      	bne.n	15ab0 <mem_manage_fault+0x228>
	uint32_t mmfar = -EINVAL;
   15aaa:	f06f 0815 	mvn.w	r8, #21
   15aae:	e732      	b.n	15916 <mem_manage_fault+0x8e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   15ab0:	2008      	movs	r0, #8
   15ab2:	f7fe f929 	bl	13d08 <z_log_msg_alloc>
   15ab6:	2200      	movs	r2, #0
   15ab8:	f36f 0200 	bfc	r2, #0, #1
   15abc:	f36f 0241 	bfc	r2, #1, #1
   15ac0:	f36f 0282 	bfc	r2, #2, #1
   15ac4:	f36f 02c5 	bfc	r2, #3, #3
   15ac8:	2301      	movs	r3, #1
   15aca:	f363 1288 	bfi	r2, r3, #6, #3
   15ace:	230c      	movs	r3, #12
   15ad0:	f363 2252 	bfi	r2, r3, #9, #10
   15ad4:	f36f 42de 	bfc	r2, #19, #12
   15ad8:	f36f 72df 	bfc	r2, #31, #1
   15adc:	4604      	mov	r4, r0
   15ade:	b198      	cbz	r0, 15b08 <mem_manage_fault+0x280>
   15ae0:	f110 0310 	adds.w	r3, r0, #16
   15ae4:	d003      	beq.n	15aee <mem_manage_fault+0x266>
   15ae6:	492d      	ldr	r1, [pc, #180]	; (15b9c <mem_manage_fault+0x314>)
   15ae8:	6141      	str	r1, [r0, #20]
   15aea:	f8c0 8018 	str.w	r8, [r0, #24]
   15aee:	b15b      	cbz	r3, 15b08 <mem_manage_fault+0x280>
   15af0:	2303      	movs	r3, #3
   15af2:	f88d 3004 	strb.w	r3, [sp, #4]
   15af6:	2300      	movs	r3, #0
   15af8:	f88d 3005 	strb.w	r3, [sp, #5]
   15afc:	f88d 3006 	strb.w	r3, [sp, #6]
   15b00:	f88d 3007 	strb.w	r3, [sp, #7]
   15b04:	9801      	ldr	r0, [sp, #4]
   15b06:	6120      	str	r0, [r4, #16]
   15b08:	2300      	movs	r3, #0
   15b0a:	491f      	ldr	r1, [pc, #124]	; (15b88 <mem_manage_fault+0x300>)
   15b0c:	4620      	mov	r0, r4
   15b0e:	f013 fb64 	bl	291da <z_log_msg_finalize>
			if (from_hard_fault != 0) {
   15b12:	2f00      	cmp	r7, #0
   15b14:	f43f aeff 	beq.w	15916 <mem_manage_fault+0x8e>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   15b18:	4a1c      	ldr	r2, [pc, #112]	; (15b8c <mem_manage_fault+0x304>)
   15b1a:	6a93      	ldr	r3, [r2, #40]	; 0x28
   15b1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   15b20:	6293      	str	r3, [r2, #40]	; 0x28
   15b22:	e6f8      	b.n	15916 <mem_manage_fault+0x8e>
		PR_FAULT_INFO("  Instruction Access Violation");
   15b24:	2006      	movs	r0, #6
   15b26:	f7fe f8ef 	bl	13d08 <z_log_msg_alloc>
   15b2a:	2200      	movs	r2, #0
   15b2c:	f36f 0200 	bfc	r2, #0, #1
   15b30:	f36f 0241 	bfc	r2, #1, #1
   15b34:	f36f 0282 	bfc	r2, #2, #1
   15b38:	f36f 02c5 	bfc	r2, #3, #3
   15b3c:	2301      	movs	r3, #1
   15b3e:	f363 1288 	bfi	r2, r3, #6, #3
   15b42:	2308      	movs	r3, #8
   15b44:	f363 2252 	bfi	r2, r3, #9, #10
   15b48:	f36f 42de 	bfc	r2, #19, #12
   15b4c:	f36f 72df 	bfc	r2, #31, #1
   15b50:	4604      	mov	r4, r0
   15b52:	b188      	cbz	r0, 15b78 <mem_manage_fault+0x2f0>
   15b54:	f110 0310 	adds.w	r3, r0, #16
   15b58:	d001      	beq.n	15b5e <mem_manage_fault+0x2d6>
   15b5a:	4911      	ldr	r1, [pc, #68]	; (15ba0 <mem_manage_fault+0x318>)
   15b5c:	6141      	str	r1, [r0, #20]
   15b5e:	b15b      	cbz	r3, 15b78 <mem_manage_fault+0x2f0>
   15b60:	2302      	movs	r3, #2
   15b62:	f88d 3004 	strb.w	r3, [sp, #4]
   15b66:	2300      	movs	r3, #0
   15b68:	f88d 3005 	strb.w	r3, [sp, #5]
   15b6c:	f88d 3006 	strb.w	r3, [sp, #6]
   15b70:	f88d 3007 	strb.w	r3, [sp, #7]
   15b74:	9801      	ldr	r0, [sp, #4]
   15b76:	6120      	str	r0, [r4, #16]
   15b78:	2300      	movs	r3, #0
   15b7a:	4903      	ldr	r1, [pc, #12]	; (15b88 <mem_manage_fault+0x300>)
   15b7c:	4620      	mov	r0, r4
   15b7e:	f013 fb2c 	bl	291da <z_log_msg_finalize>
   15b82:	e6ce      	b.n	15922 <mem_manage_fault+0x9a>
   15b84:	000321b0 	.word	0x000321b0
   15b88:	000314c8 	.word	0x000314c8
   15b8c:	e000ed00 	.word	0xe000ed00
   15b90:	000321c8 	.word	0x000321c8
   15b94:	00031fc0 	.word	0x00031fc0
   15b98:	000321fc 	.word	0x000321fc
   15b9c:	00032214 	.word	0x00032214
   15ba0:	0003222c 	.word	0x0003222c
		PR_FAULT_INFO(
   15ba4:	2006      	movs	r0, #6
   15ba6:	f7fe f8af 	bl	13d08 <z_log_msg_alloc>
   15baa:	2200      	movs	r2, #0
   15bac:	f36f 0200 	bfc	r2, #0, #1
   15bb0:	f36f 0241 	bfc	r2, #1, #1
   15bb4:	f36f 0282 	bfc	r2, #2, #1
   15bb8:	f36f 02c5 	bfc	r2, #3, #3
   15bbc:	2301      	movs	r3, #1
   15bbe:	f363 1288 	bfi	r2, r3, #6, #3
   15bc2:	2308      	movs	r3, #8
   15bc4:	f363 2252 	bfi	r2, r3, #9, #10
   15bc8:	f36f 42de 	bfc	r2, #19, #12
   15bcc:	f36f 72df 	bfc	r2, #31, #1
   15bd0:	4604      	mov	r4, r0
   15bd2:	b188      	cbz	r0, 15bf8 <mem_manage_fault+0x370>
   15bd4:	f110 0310 	adds.w	r3, r0, #16
   15bd8:	d001      	beq.n	15bde <mem_manage_fault+0x356>
   15bda:	4910      	ldr	r1, [pc, #64]	; (15c1c <mem_manage_fault+0x394>)
   15bdc:	6141      	str	r1, [r0, #20]
   15bde:	b15b      	cbz	r3, 15bf8 <mem_manage_fault+0x370>
   15be0:	2302      	movs	r3, #2
   15be2:	f88d 3004 	strb.w	r3, [sp, #4]
   15be6:	2300      	movs	r3, #0
   15be8:	f88d 3005 	strb.w	r3, [sp, #5]
   15bec:	f88d 3006 	strb.w	r3, [sp, #6]
   15bf0:	f88d 3007 	strb.w	r3, [sp, #7]
   15bf4:	9801      	ldr	r0, [sp, #4]
   15bf6:	6120      	str	r0, [r4, #16]
   15bf8:	2300      	movs	r3, #0
   15bfa:	4909      	ldr	r1, [pc, #36]	; (15c20 <mem_manage_fault+0x398>)
   15bfc:	4620      	mov	r0, r4
   15bfe:	f013 faec 	bl	291da <z_log_msg_finalize>
   15c02:	e694      	b.n	1592e <mem_manage_fault+0xa6>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   15c04:	4629      	mov	r1, r5
   15c06:	4640      	mov	r0, r8
   15c08:	f7ff f94a 	bl	14ea0 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   15c0c:	4604      	mov	r4, r0
   15c0e:	2800      	cmp	r0, #0
   15c10:	f43f ae9d 	beq.w	1594e <mem_manage_fault+0xc6>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   15c14:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   15c18:	2402      	movs	r4, #2
   15c1a:	e698      	b.n	1594e <mem_manage_fault+0xc6>
   15c1c:	0003203c 	.word	0x0003203c
   15c20:	000314c8 	.word	0x000314c8

00015c24 <hard_fault>:
{
   15c24:	b570      	push	{r4, r5, r6, lr}
   15c26:	b082      	sub	sp, #8
   15c28:	4606      	mov	r6, r0
   15c2a:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** HARD FAULT *****");
   15c2c:	2006      	movs	r0, #6
   15c2e:	f7fe f86b 	bl	13d08 <z_log_msg_alloc>
   15c32:	2200      	movs	r2, #0
   15c34:	f36f 0200 	bfc	r2, #0, #1
   15c38:	f36f 0241 	bfc	r2, #1, #1
   15c3c:	f36f 0282 	bfc	r2, #2, #1
   15c40:	f36f 02c5 	bfc	r2, #3, #3
   15c44:	2301      	movs	r3, #1
   15c46:	f363 1288 	bfi	r2, r3, #6, #3
   15c4a:	2308      	movs	r3, #8
   15c4c:	f363 2252 	bfi	r2, r3, #9, #10
   15c50:	f36f 42de 	bfc	r2, #19, #12
   15c54:	f36f 72df 	bfc	r2, #31, #1
   15c58:	4604      	mov	r4, r0
   15c5a:	b188      	cbz	r0, 15c80 <hard_fault+0x5c>
   15c5c:	f110 0310 	adds.w	r3, r0, #16
   15c60:	d001      	beq.n	15c66 <hard_fault+0x42>
   15c62:	4988      	ldr	r1, [pc, #544]	; (15e84 <hard_fault+0x260>)
   15c64:	6141      	str	r1, [r0, #20]
   15c66:	b15b      	cbz	r3, 15c80 <hard_fault+0x5c>
   15c68:	2302      	movs	r3, #2
   15c6a:	f88d 3004 	strb.w	r3, [sp, #4]
   15c6e:	2300      	movs	r3, #0
   15c70:	f88d 3005 	strb.w	r3, [sp, #5]
   15c74:	f88d 3006 	strb.w	r3, [sp, #6]
   15c78:	f88d 3007 	strb.w	r3, [sp, #7]
   15c7c:	9801      	ldr	r0, [sp, #4]
   15c7e:	6120      	str	r0, [r4, #16]
   15c80:	2300      	movs	r3, #0
   15c82:	4981      	ldr	r1, [pc, #516]	; (15e88 <hard_fault+0x264>)
   15c84:	4620      	mov	r0, r4
   15c86:	f013 faa8 	bl	291da <z_log_msg_finalize>
	*recoverable = false;
   15c8a:	2300      	movs	r3, #0
   15c8c:	702b      	strb	r3, [r5, #0]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   15c8e:	4b7f      	ldr	r3, [pc, #508]	; (15e8c <hard_fault+0x268>)
   15c90:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   15c92:	f014 0402 	ands.w	r4, r4, #2
   15c96:	d10b      	bne.n	15cb0 <hard_fault+0x8c>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   15c98:	4b7c      	ldr	r3, [pc, #496]	; (15e8c <hard_fault+0x268>)
   15c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   15c9c:	2b00      	cmp	r3, #0
   15c9e:	db38      	blt.n	15d12 <hard_fault+0xee>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   15ca0:	4b7a      	ldr	r3, [pc, #488]	; (15e8c <hard_fault+0x268>)
   15ca2:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   15ca4:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
   15ca8:	d163      	bne.n	15d72 <hard_fault+0x14e>
}
   15caa:	4620      	mov	r0, r4
   15cac:	b002      	add	sp, #8
   15cae:	bd70      	pop	{r4, r5, r6, pc}
		PR_EXC("  Bus fault on vector table read");
   15cb0:	2006      	movs	r0, #6
   15cb2:	f7fe f829 	bl	13d08 <z_log_msg_alloc>
   15cb6:	2200      	movs	r2, #0
   15cb8:	f36f 0200 	bfc	r2, #0, #1
   15cbc:	f36f 0241 	bfc	r2, #1, #1
   15cc0:	f36f 0282 	bfc	r2, #2, #1
   15cc4:	f36f 02c5 	bfc	r2, #3, #3
   15cc8:	2301      	movs	r3, #1
   15cca:	f363 1288 	bfi	r2, r3, #6, #3
   15cce:	2308      	movs	r3, #8
   15cd0:	f363 2252 	bfi	r2, r3, #9, #10
   15cd4:	f36f 42de 	bfc	r2, #19, #12
   15cd8:	f36f 72df 	bfc	r2, #31, #1
   15cdc:	4604      	mov	r4, r0
   15cde:	b188      	cbz	r0, 15d04 <hard_fault+0xe0>
   15ce0:	f110 0310 	adds.w	r3, r0, #16
   15ce4:	d001      	beq.n	15cea <hard_fault+0xc6>
   15ce6:	496a      	ldr	r1, [pc, #424]	; (15e90 <hard_fault+0x26c>)
   15ce8:	6141      	str	r1, [r0, #20]
   15cea:	b15b      	cbz	r3, 15d04 <hard_fault+0xe0>
   15cec:	2302      	movs	r3, #2
   15cee:	f88d 3004 	strb.w	r3, [sp, #4]
   15cf2:	2300      	movs	r3, #0
   15cf4:	f88d 3005 	strb.w	r3, [sp, #5]
   15cf8:	f88d 3006 	strb.w	r3, [sp, #6]
   15cfc:	f88d 3007 	strb.w	r3, [sp, #7]
   15d00:	9801      	ldr	r0, [sp, #4]
   15d02:	6120      	str	r0, [r4, #16]
   15d04:	2300      	movs	r3, #0
   15d06:	4960      	ldr	r1, [pc, #384]	; (15e88 <hard_fault+0x264>)
   15d08:	4620      	mov	r0, r4
   15d0a:	f013 fa66 	bl	291da <z_log_msg_finalize>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   15d0e:	2400      	movs	r4, #0
   15d10:	e7cb      	b.n	15caa <hard_fault+0x86>
		PR_EXC("  Debug event");
   15d12:	2006      	movs	r0, #6
   15d14:	f7fd fff8 	bl	13d08 <z_log_msg_alloc>
   15d18:	2200      	movs	r2, #0
   15d1a:	f36f 0200 	bfc	r2, #0, #1
   15d1e:	f36f 0241 	bfc	r2, #1, #1
   15d22:	f36f 0282 	bfc	r2, #2, #1
   15d26:	f36f 02c5 	bfc	r2, #3, #3
   15d2a:	2301      	movs	r3, #1
   15d2c:	f363 1288 	bfi	r2, r3, #6, #3
   15d30:	2308      	movs	r3, #8
   15d32:	f363 2252 	bfi	r2, r3, #9, #10
   15d36:	f36f 42de 	bfc	r2, #19, #12
   15d3a:	f36f 72df 	bfc	r2, #31, #1
   15d3e:	4605      	mov	r5, r0
   15d40:	b188      	cbz	r0, 15d66 <hard_fault+0x142>
   15d42:	f110 0310 	adds.w	r3, r0, #16
   15d46:	d001      	beq.n	15d4c <hard_fault+0x128>
   15d48:	4952      	ldr	r1, [pc, #328]	; (15e94 <hard_fault+0x270>)
   15d4a:	6141      	str	r1, [r0, #20]
   15d4c:	b15b      	cbz	r3, 15d66 <hard_fault+0x142>
   15d4e:	2302      	movs	r3, #2
   15d50:	f88d 3004 	strb.w	r3, [sp, #4]
   15d54:	2300      	movs	r3, #0
   15d56:	f88d 3005 	strb.w	r3, [sp, #5]
   15d5a:	f88d 3006 	strb.w	r3, [sp, #6]
   15d5e:	f88d 3007 	strb.w	r3, [sp, #7]
   15d62:	9801      	ldr	r0, [sp, #4]
   15d64:	6128      	str	r0, [r5, #16]
   15d66:	2300      	movs	r3, #0
   15d68:	4947      	ldr	r1, [pc, #284]	; (15e88 <hard_fault+0x264>)
   15d6a:	4628      	mov	r0, r5
   15d6c:	f013 fa35 	bl	291da <z_log_msg_finalize>
   15d70:	e79b      	b.n	15caa <hard_fault+0x86>
		PR_EXC("  Fault escalation (see below)");
   15d72:	2006      	movs	r0, #6
   15d74:	f7fd ffc8 	bl	13d08 <z_log_msg_alloc>
   15d78:	2200      	movs	r2, #0
   15d7a:	f36f 0200 	bfc	r2, #0, #1
   15d7e:	f36f 0241 	bfc	r2, #1, #1
   15d82:	f36f 0282 	bfc	r2, #2, #1
   15d86:	f36f 02c5 	bfc	r2, #3, #3
   15d8a:	2301      	movs	r3, #1
   15d8c:	f363 1288 	bfi	r2, r3, #6, #3
   15d90:	2308      	movs	r3, #8
   15d92:	f363 2252 	bfi	r2, r3, #9, #10
   15d96:	f36f 42de 	bfc	r2, #19, #12
   15d9a:	f36f 72df 	bfc	r2, #31, #1
   15d9e:	4604      	mov	r4, r0
   15da0:	b188      	cbz	r0, 15dc6 <hard_fault+0x1a2>
   15da2:	f110 0310 	adds.w	r3, r0, #16
   15da6:	d001      	beq.n	15dac <hard_fault+0x188>
   15da8:	493b      	ldr	r1, [pc, #236]	; (15e98 <hard_fault+0x274>)
   15daa:	6141      	str	r1, [r0, #20]
   15dac:	b15b      	cbz	r3, 15dc6 <hard_fault+0x1a2>
   15dae:	2302      	movs	r3, #2
   15db0:	f88d 3004 	strb.w	r3, [sp, #4]
   15db4:	2300      	movs	r3, #0
   15db6:	f88d 3005 	strb.w	r3, [sp, #5]
   15dba:	f88d 3006 	strb.w	r3, [sp, #6]
   15dbe:	f88d 3007 	strb.w	r3, [sp, #7]
   15dc2:	9801      	ldr	r0, [sp, #4]
   15dc4:	6120      	str	r0, [r4, #16]
   15dc6:	2300      	movs	r3, #0
   15dc8:	492f      	ldr	r1, [pc, #188]	; (15e88 <hard_fault+0x264>)
   15dca:	4620      	mov	r0, r4
   15dcc:	f013 fa05 	bl	291da <z_log_msg_finalize>
		if (z_arm_is_synchronous_svc(esf)) {
   15dd0:	4630      	mov	r0, r6
   15dd2:	f7ff f8cd 	bl	14f70 <z_arm_is_synchronous_svc>
   15dd6:	b9a0      	cbnz	r0, 15e02 <hard_fault+0x1de>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
   15dd8:	4b2c      	ldr	r3, [pc, #176]	; (15e8c <hard_fault+0x268>)
   15dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15ddc:	f013 0fff 	tst.w	r3, #255	; 0xff
   15de0:	d142      	bne.n	15e68 <hard_fault+0x244>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
   15de2:	4b2a      	ldr	r3, [pc, #168]	; (15e8c <hard_fault+0x268>)
   15de4:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   15de6:	f414 447f 	ands.w	r4, r4, #65280	; 0xff00
   15dea:	d144      	bne.n	15e76 <hard_fault+0x252>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
   15dec:	4b27      	ldr	r3, [pc, #156]	; (15e8c <hard_fault+0x268>)
   15dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15df0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   15df4:	f4ff af59 	bcc.w	15caa <hard_fault+0x86>
			reason = usage_fault(esf);
   15df8:	4630      	mov	r0, r6
   15dfa:	f7ff fb07 	bl	1540c <usage_fault>
   15dfe:	4604      	mov	r4, r0
	return reason;
   15e00:	e753      	b.n	15caa <hard_fault+0x86>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   15e02:	6835      	ldr	r5, [r6, #0]
   15e04:	2008      	movs	r0, #8
   15e06:	f7fd ff7f 	bl	13d08 <z_log_msg_alloc>
   15e0a:	2200      	movs	r2, #0
   15e0c:	f36f 0200 	bfc	r2, #0, #1
   15e10:	f36f 0241 	bfc	r2, #1, #1
   15e14:	f36f 0282 	bfc	r2, #2, #1
   15e18:	f36f 02c5 	bfc	r2, #3, #3
   15e1c:	2301      	movs	r3, #1
   15e1e:	f363 1288 	bfi	r2, r3, #6, #3
   15e22:	230c      	movs	r3, #12
   15e24:	f363 2252 	bfi	r2, r3, #9, #10
   15e28:	f36f 42de 	bfc	r2, #19, #12
   15e2c:	f36f 72df 	bfc	r2, #31, #1
   15e30:	4604      	mov	r4, r0
   15e32:	b190      	cbz	r0, 15e5a <hard_fault+0x236>
   15e34:	f110 0310 	adds.w	r3, r0, #16
   15e38:	d002      	beq.n	15e40 <hard_fault+0x21c>
   15e3a:	4918      	ldr	r1, [pc, #96]	; (15e9c <hard_fault+0x278>)
   15e3c:	6141      	str	r1, [r0, #20]
   15e3e:	6185      	str	r5, [r0, #24]
   15e40:	b15b      	cbz	r3, 15e5a <hard_fault+0x236>
   15e42:	2303      	movs	r3, #3
   15e44:	f88d 3004 	strb.w	r3, [sp, #4]
   15e48:	2300      	movs	r3, #0
   15e4a:	f88d 3005 	strb.w	r3, [sp, #5]
   15e4e:	f88d 3006 	strb.w	r3, [sp, #6]
   15e52:	f88d 3007 	strb.w	r3, [sp, #7]
   15e56:	9801      	ldr	r0, [sp, #4]
   15e58:	6120      	str	r0, [r4, #16]
   15e5a:	2300      	movs	r3, #0
   15e5c:	490a      	ldr	r1, [pc, #40]	; (15e88 <hard_fault+0x264>)
   15e5e:	4620      	mov	r0, r4
   15e60:	f013 f9bb 	bl	291da <z_log_msg_finalize>
			reason = esf->basic.r0;
   15e64:	6834      	ldr	r4, [r6, #0]
   15e66:	e720      	b.n	15caa <hard_fault+0x86>
			reason = mem_manage_fault(esf, 1, recoverable);
   15e68:	462a      	mov	r2, r5
   15e6a:	2101      	movs	r1, #1
   15e6c:	4630      	mov	r0, r6
   15e6e:	f7ff fd0b 	bl	15888 <mem_manage_fault>
   15e72:	4604      	mov	r4, r0
   15e74:	e719      	b.n	15caa <hard_fault+0x86>
			reason = bus_fault(esf, 1, recoverable);
   15e76:	462a      	mov	r2, r5
   15e78:	2101      	movs	r1, #1
   15e7a:	4630      	mov	r0, r6
   15e7c:	f7ff f8e8 	bl	15050 <bus_fault>
   15e80:	4604      	mov	r4, r0
   15e82:	e712      	b.n	15caa <hard_fault+0x86>
   15e84:	0003224c 	.word	0x0003224c
   15e88:	000314c8 	.word	0x000314c8
   15e8c:	e000ed00 	.word	0xe000ed00
   15e90:	00032264 	.word	0x00032264
   15e94:	00032288 	.word	0x00032288
   15e98:	00032298 	.word	0x00032298
   15e9c:	000322b8 	.word	0x000322b8

00015ea0 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   15ea0:	b530      	push	{r4, r5, lr}
   15ea2:	b08b      	sub	sp, #44	; 0x2c
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   15ea4:	4b1a      	ldr	r3, [pc, #104]	; (15f10 <z_arm_fault+0x70>)
   15ea6:	685c      	ldr	r4, [r3, #4]
   15ea8:	f3c4 0408 	ubfx	r4, r4, #0, #9
   15eac:	2300      	movs	r3, #0
   15eae:	f383 8811 	msr	BASEPRI, r3
   15eb2:	f3bf 8f6f 	isb	sy
	arch_irq_unlock(0);

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
   15eb6:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   15eba:	f7ff f877 	bl	14fac <get_esf>
   15ebe:	4605      	mov	r5, r0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
   15ec0:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   15ec4:	4621      	mov	r1, r4
   15ec6:	f013 fd98 	bl	299fa <fault_handle>
	if (recoverable) {
   15eca:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   15ece:	b10b      	cbz	r3, 15ed4 <z_arm_fault+0x34>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
   15ed0:	b00b      	add	sp, #44	; 0x2c
   15ed2:	bd30      	pop	{r4, r5, pc}
   15ed4:	4604      	mov	r4, r0
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   15ed6:	2220      	movs	r2, #32
   15ed8:	4629      	mov	r1, r5
   15eda:	a801      	add	r0, sp, #4
   15edc:	f013 fe69 	bl	29bb2 <memcpy>
	if (nested_exc) {
   15ee0:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   15ee4:	b14b      	cbz	r3, 15efa <z_arm_fault+0x5a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   15ee6:	9b08      	ldr	r3, [sp, #32]
   15ee8:	f3c3 0208 	ubfx	r2, r3, #0, #9
   15eec:	b95a      	cbnz	r2, 15f06 <z_arm_fault+0x66>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   15eee:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   15ef2:	ea6f 2343 	mvn.w	r3, r3, lsl #9
   15ef6:	9308      	str	r3, [sp, #32]
   15ef8:	e005      	b.n	15f06 <z_arm_fault+0x66>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   15efa:	9b08      	ldr	r3, [sp, #32]
   15efc:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   15f00:	f023 0301 	bic.w	r3, r3, #1
   15f04:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
   15f06:	a901      	add	r1, sp, #4
   15f08:	4620      	mov	r0, r4
   15f0a:	f013 fd41 	bl	29990 <z_arm_fatal_error>
   15f0e:	e7df      	b.n	15ed0 <z_arm_fault+0x30>
   15f10:	e000ed00 	.word	0xe000ed00

00015f14 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   15f14:	4a02      	ldr	r2, [pc, #8]	; (15f20 <z_arm_fault_init+0xc>)
   15f16:	6953      	ldr	r3, [r2, #20]
   15f18:	f043 0310 	orr.w	r3, r3, #16
   15f1c:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   15f1e:	4770      	bx	lr
   15f20:	e000ed00 	.word	0xe000ed00

00015f24 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   15f24:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   15f28:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   15f2c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   15f2e:	4672      	mov	r2, lr
	bl z_arm_fault
   15f30:	f7ff ffb6 	bl	15ea0 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   15f34:	bd01      	pop	{r0, pc}
   15f36:	bf00      	nop

00015f38 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   15f38:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   15f3a:	e006      	b.n	15f4a <z_arm_interrupt_init+0x12>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   15f3c:	f003 030f 	and.w	r3, r3, #15
   15f40:	4909      	ldr	r1, [pc, #36]	; (15f68 <z_arm_interrupt_init+0x30>)
   15f42:	4419      	add	r1, r3
   15f44:	2340      	movs	r3, #64	; 0x40
   15f46:	760b      	strb	r3, [r1, #24]
   15f48:	3201      	adds	r2, #1
   15f4a:	2a2f      	cmp	r2, #47	; 0x2f
   15f4c:	dc0a      	bgt.n	15f64 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
   15f4e:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   15f50:	2b00      	cmp	r3, #0
   15f52:	dbf3      	blt.n	15f3c <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   15f54:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   15f58:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   15f5c:	2140      	movs	r1, #64	; 0x40
   15f5e:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
   15f62:	e7f1      	b.n	15f48 <z_arm_interrupt_init+0x10>
	}
}
   15f64:	4770      	bx	lr
   15f66:	bf00      	nop
   15f68:	e000ecfc 	.word	0xe000ecfc

00015f6c <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_DEBUG_THREAD_INFO)
    /* Clear z_sys_post_kernel flag for RTOS aware debuggers */
    movs.n r0, #0
   15f6c:	2000      	movs	r0, #0
    ldr r1, =z_sys_post_kernel
   15f6e:	4913      	ldr	r1, [pc, #76]	; (15fbc <__start+0x50>)
    strb r0, [r1]
   15f70:	7008      	strb	r0, [r1, #0]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   15f72:	2000      	movs	r0, #0
    msr CONTROL, r0
   15f74:	f380 8814 	msr	CONTROL, r0
    isb
   15f78:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   15f7c:	f7fd fd22 	bl	139c4 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   15f80:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   15f82:	490f      	ldr	r1, [pc, #60]	; (15fc0 <__start+0x54>)
    str r0, [r1]
   15f84:	6008      	str	r0, [r1, #0]
    dsb
   15f86:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   15f8a:	480e      	ldr	r0, [pc, #56]	; (15fc4 <__start+0x58>)
    msr msp, r0
   15f8c:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   15f90:	f000 f830 	bl	15ff4 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   15f94:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   15f96:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   15f9a:	480b      	ldr	r0, [pc, #44]	; (15fc8 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   15f9c:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
   15fa0:	1840      	adds	r0, r0, r1
    msr PSP, r0
   15fa2:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   15fa6:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   15faa:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   15fac:	4308      	orrs	r0, r1
    msr CONTROL, r0
   15fae:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   15fb2:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   15fb6:	f7fe fedd 	bl	14d74 <z_arm_prep_c>
   15fba:	0000      	.short	0x0000
    ldr r1, =z_sys_post_kernel
   15fbc:	200090c0 	.word	0x200090c0
    ldr r1, =_SCS_MPU_CTRL
   15fc0:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   15fc4:	2000be00 	.word	0x2000be00
    ldr r0, =z_interrupt_stacks
   15fc8:	2000a440 	.word	0x2000a440

00015fcc <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   15fcc:	4b08      	ldr	r3, [pc, #32]	; (15ff0 <z_arm_clear_arm_mpu_config+0x24>)
   15fce:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
	int num_regions =
   15fd2:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
   15fd6:	2300      	movs	r3, #0
   15fd8:	e006      	b.n	15fe8 <z_arm_clear_arm_mpu_config+0x1c>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
   15fda:	4a05      	ldr	r2, [pc, #20]	; (15ff0 <z_arm_clear_arm_mpu_config+0x24>)
   15fdc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
   15fe0:	2100      	movs	r1, #0
   15fe2:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
   15fe6:	3301      	adds	r3, #1
   15fe8:	4283      	cmp	r3, r0
   15fea:	dbf6      	blt.n	15fda <z_arm_clear_arm_mpu_config+0xe>
		ARM_MPU_ClrRegion(i);
	}
}
   15fec:	4770      	bx	lr
   15fee:	bf00      	nop
   15ff0:	e000ed00 	.word	0xe000ed00

00015ff4 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   15ff4:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   15ff6:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   15ff8:	2400      	movs	r4, #0
   15ffa:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   15ffe:	f7ff ffe5 	bl	15fcc <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   16002:	4623      	mov	r3, r4
   16004:	e008      	b.n	16018 <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
   16006:	f103 0120 	add.w	r1, r3, #32
   1600a:	4a0e      	ldr	r2, [pc, #56]	; (16044 <z_arm_init_arch_hw_at_boot+0x50>)
   1600c:	f04f 30ff 	mov.w	r0, #4294967295
   16010:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   16014:	3301      	adds	r3, #1
   16016:	b2db      	uxtb	r3, r3
   16018:	2b07      	cmp	r3, #7
   1601a:	d9f4      	bls.n	16006 <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   1601c:	2300      	movs	r3, #0
   1601e:	e008      	b.n	16032 <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
   16020:	f103 0160 	add.w	r1, r3, #96	; 0x60
   16024:	4a07      	ldr	r2, [pc, #28]	; (16044 <z_arm_init_arch_hw_at_boot+0x50>)
   16026:	f04f 30ff 	mov.w	r0, #4294967295
   1602a:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   1602e:	3301      	adds	r3, #1
   16030:	b2db      	uxtb	r3, r3
   16032:	2b07      	cmp	r3, #7
   16034:	d9f4      	bls.n	16020 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
   16036:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   16038:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1603c:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   16040:	bd10      	pop	{r4, pc}
   16042:	bf00      	nop
   16044:	e000e100 	.word	0xe000e100

00016048 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
   16048:	b508      	push	{r3, lr}
	if (_current == thread) {
   1604a:	4b0a      	ldr	r3, [pc, #40]	; (16074 <z_impl_k_thread_abort+0x2c>)
   1604c:	689b      	ldr	r3, [r3, #8]
   1604e:	4283      	cmp	r3, r0
   16050:	d002      	beq.n	16058 <z_impl_k_thread_abort+0x10>
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
		}
	}

	z_thread_abort(thread);
   16052:	f011 f871 	bl	27138 <z_thread_abort>
}
   16056:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   16058:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   1605c:	2b00      	cmp	r3, #0
   1605e:	d0f8      	beq.n	16052 <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   16060:	4b05      	ldr	r3, [pc, #20]	; (16078 <z_impl_k_thread_abort+0x30>)
   16062:	685a      	ldr	r2, [r3, #4]
   16064:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   16068:	605a      	str	r2, [r3, #4]
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   1606a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1606c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   16070:	625a      	str	r2, [r3, #36]	; 0x24
   16072:	e7ee      	b.n	16052 <z_impl_k_thread_abort+0xa>
   16074:	20009070 	.word	0x20009070
   16078:	e000ed00 	.word	0xe000ed00

0001607c <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   1607c:	b508      	push	{r3, lr}
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   1607e:	4b03      	ldr	r3, [pc, #12]	; (1608c <z_arm_configure_static_mpu_regions+0x10>)
   16080:	4a03      	ldr	r2, [pc, #12]	; (16090 <z_arm_configure_static_mpu_regions+0x14>)
   16082:	2101      	movs	r1, #1
   16084:	4803      	ldr	r0, [pc, #12]	; (16094 <z_arm_configure_static_mpu_regions+0x18>)
   16086:	f013 fd0d 	bl	29aa4 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   1608a:	bd08      	pop	{r3, pc}
   1608c:	20020000 	.word	0x20020000
   16090:	20000000 	.word	0x20000000
   16094:	000322d4 	.word	0x000322d4

00016098 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
   16098:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   1609a:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   1609e:	3b40      	subs	r3, #64	; 0x40
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   160a0:	4804      	ldr	r0, [pc, #16]	; (160b4 <z_arm_configure_dynamic_mpu_regions+0x1c>)
   160a2:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
   160a4:	2340      	movs	r3, #64	; 0x40
   160a6:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   160a8:	4b03      	ldr	r3, [pc, #12]	; (160b8 <z_arm_configure_dynamic_mpu_regions+0x20>)
   160aa:	6083      	str	r3, [r0, #8]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   160ac:	2101      	movs	r1, #1
   160ae:	f013 fcfd 	bl	29aac <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_enable();
#endif
}
   160b2:	bd08      	pop	{r3, pc}
   160b4:	20007c24 	.word	0x20007c24
   160b8:	150b0000 	.word	0x150b0000

000160bc <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   160bc:	4a08      	ldr	r2, [pc, #32]	; (160e0 <region_init+0x24>)
   160be:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   160c2:	680b      	ldr	r3, [r1, #0]
   160c4:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   160c8:	4303      	orrs	r3, r0
   160ca:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   160ce:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   160d2:	688b      	ldr	r3, [r1, #8]
   160d4:	f043 0301 	orr.w	r3, r3, #1
   160d8:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
   160dc:	4770      	bx	lr
   160de:	bf00      	nop
   160e0:	e000ed00 	.word	0xe000ed00

000160e4 <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
   160e4:	b510      	push	{r4, lr}
   160e6:	b082      	sub	sp, #8
   160e8:	4604      	mov	r4, r0
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
   160ea:	2807      	cmp	r0, #7
   160ec:	d804      	bhi.n	160f8 <region_allocate_and_init+0x14>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
   160ee:	f7ff ffe5 	bl	160bc <region_init>

	return index;
   160f2:	4620      	mov	r0, r4
}
   160f4:	b002      	add	sp, #8
   160f6:	bd10      	pop	{r4, pc}
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   160f8:	2008      	movs	r0, #8
   160fa:	f7fd fe05 	bl	13d08 <z_log_msg_alloc>
   160fe:	2200      	movs	r2, #0
   16100:	f36f 0200 	bfc	r2, #0, #1
   16104:	f36f 0241 	bfc	r2, #1, #1
   16108:	f36f 0282 	bfc	r2, #2, #1
   1610c:	f36f 02c5 	bfc	r2, #3, #3
   16110:	2301      	movs	r3, #1
   16112:	f363 1288 	bfi	r2, r3, #6, #3
   16116:	230c      	movs	r3, #12
   16118:	f363 2252 	bfi	r2, r3, #9, #10
   1611c:	f36f 42de 	bfc	r2, #19, #12
   16120:	f36f 72df 	bfc	r2, #31, #1
   16124:	4684      	mov	ip, r0
   16126:	b198      	cbz	r0, 16150 <region_allocate_and_init+0x6c>
   16128:	f110 0310 	adds.w	r3, r0, #16
   1612c:	d002      	beq.n	16134 <region_allocate_and_init+0x50>
   1612e:	490c      	ldr	r1, [pc, #48]	; (16160 <region_allocate_and_init+0x7c>)
   16130:	6141      	str	r1, [r0, #20]
   16132:	6184      	str	r4, [r0, #24]
   16134:	b163      	cbz	r3, 16150 <region_allocate_and_init+0x6c>
   16136:	2303      	movs	r3, #3
   16138:	f88d 3004 	strb.w	r3, [sp, #4]
   1613c:	2300      	movs	r3, #0
   1613e:	f88d 3005 	strb.w	r3, [sp, #5]
   16142:	f88d 3006 	strb.w	r3, [sp, #6]
   16146:	f88d 3007 	strb.w	r3, [sp, #7]
   1614a:	9801      	ldr	r0, [sp, #4]
   1614c:	f8cc 0010 	str.w	r0, [ip, #16]
   16150:	2300      	movs	r3, #0
   16152:	4904      	ldr	r1, [pc, #16]	; (16164 <region_allocate_and_init+0x80>)
   16154:	4660      	mov	r0, ip
   16156:	f013 f840 	bl	291da <z_log_msg_finalize>
		return -EINVAL;
   1615a:	f06f 0015 	mvn.w	r0, #21
   1615e:	e7c9      	b.n	160f4 <region_allocate_and_init+0x10>
   16160:	000322e4 	.word	0x000322e4
   16164:	000314b8 	.word	0x000314b8

00016168 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   16168:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1616c:	b083      	sub	sp, #12
   1616e:	4680      	mov	r8, r0
   16170:	460f      	mov	r7, r1
   16172:	4699      	mov	r9, r3
	int i;
	int reg_index = start_reg_index;
   16174:	4616      	mov	r6, r2

	for (i = 0; i < regions_num; i++) {
   16176:	2500      	movs	r5, #0
   16178:	e009      	b.n	1618e <mpu_configure_regions+0x26>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
   1617a:	4621      	mov	r1, r4
   1617c:	b2f0      	uxtb	r0, r6
   1617e:	f013 fc72 	bl	29a66 <mpu_configure_region>
   16182:	4606      	mov	r6, r0

		if (reg_index == -EINVAL) {
   16184:	f110 0f16 	cmn.w	r0, #22
   16188:	d044      	beq.n	16214 <mpu_configure_regions+0xac>
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
   1618a:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
   1618c:	3501      	adds	r5, #1
   1618e:	42bd      	cmp	r5, r7
   16190:	da40      	bge.n	16214 <mpu_configure_regions+0xac>
		if (regions[i].size == 0U) {
   16192:	eb05 0445 	add.w	r4, r5, r5, lsl #1
   16196:	eb08 0484 	add.w	r4, r8, r4, lsl #2
   1619a:	6862      	ldr	r2, [r4, #4]
   1619c:	2a00      	cmp	r2, #0
   1619e:	d0f5      	beq.n	1618c <mpu_configure_regions+0x24>
		if (do_sanity_check &&
   161a0:	f1b9 0f00 	cmp.w	r9, #0
   161a4:	d0e9      	beq.n	1617a <mpu_configure_regions+0x12>
				(!mpu_partition_is_valid(&regions[i]))) {
   161a6:	4620      	mov	r0, r4
   161a8:	f013 fc4c 	bl	29a44 <mpu_partition_is_valid>
		if (do_sanity_check &&
   161ac:	2800      	cmp	r0, #0
   161ae:	d1e4      	bne.n	1617a <mpu_configure_regions+0x12>
			LOG_ERR("Partition %u: sanity check failed.", i);
   161b0:	2008      	movs	r0, #8
   161b2:	f7fd fda9 	bl	13d08 <z_log_msg_alloc>
   161b6:	2200      	movs	r2, #0
   161b8:	f36f 0200 	bfc	r2, #0, #1
   161bc:	f36f 0241 	bfc	r2, #1, #1
   161c0:	f36f 0282 	bfc	r2, #2, #1
   161c4:	f36f 02c5 	bfc	r2, #3, #3
   161c8:	2301      	movs	r3, #1
   161ca:	f363 1288 	bfi	r2, r3, #6, #3
   161ce:	230c      	movs	r3, #12
   161d0:	f363 2252 	bfi	r2, r3, #9, #10
   161d4:	f36f 42de 	bfc	r2, #19, #12
   161d8:	f36f 72df 	bfc	r2, #31, #1
   161dc:	4604      	mov	r4, r0
   161de:	b190      	cbz	r0, 16206 <mpu_configure_regions+0x9e>
   161e0:	f110 0310 	adds.w	r3, r0, #16
   161e4:	d002      	beq.n	161ec <mpu_configure_regions+0x84>
   161e6:	490d      	ldr	r1, [pc, #52]	; (1621c <mpu_configure_regions+0xb4>)
   161e8:	6141      	str	r1, [r0, #20]
   161ea:	6185      	str	r5, [r0, #24]
   161ec:	b15b      	cbz	r3, 16206 <mpu_configure_regions+0x9e>
   161ee:	2303      	movs	r3, #3
   161f0:	f88d 3004 	strb.w	r3, [sp, #4]
   161f4:	2300      	movs	r3, #0
   161f6:	f88d 3005 	strb.w	r3, [sp, #5]
   161fa:	f88d 3006 	strb.w	r3, [sp, #6]
   161fe:	f88d 3007 	strb.w	r3, [sp, #7]
   16202:	9801      	ldr	r0, [sp, #4]
   16204:	6120      	str	r0, [r4, #16]
   16206:	2300      	movs	r3, #0
   16208:	4905      	ldr	r1, [pc, #20]	; (16220 <mpu_configure_regions+0xb8>)
   1620a:	4620      	mov	r0, r4
   1620c:	f012 ffe5 	bl	291da <z_log_msg_finalize>
			return -EINVAL;
   16210:	f06f 0615 	mvn.w	r6, #21
	}

	return reg_index;
}
   16214:	4630      	mov	r0, r6
   16216:	b003      	add	sp, #12
   16218:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1621c:	0003230c 	.word	0x0003230c
   16220:	000314b8 	.word	0x000314b8

00016224 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
   16224:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
   16226:	4c03      	ldr	r4, [pc, #12]	; (16234 <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   16228:	2301      	movs	r3, #1
   1622a:	7822      	ldrb	r2, [r4, #0]
   1622c:	f7ff ff9c 	bl	16168 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   16230:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
   16232:	bd10      	pop	{r4, pc}
   16234:	200090bc 	.word	0x200090bc

00016238 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
   16238:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   1623a:	2300      	movs	r3, #0
   1623c:	4a09      	ldr	r2, [pc, #36]	; (16264 <mpu_configure_dynamic_mpu_regions+0x2c>)
   1623e:	7812      	ldrb	r2, [r2, #0]
   16240:	f7ff ff92 	bl	16168 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   16244:	f110 0f16 	cmn.w	r0, #22
   16248:	d00a      	beq.n	16260 <mpu_configure_dynamic_mpu_regions+0x28>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   1624a:	4603      	mov	r3, r0
   1624c:	e006      	b.n	1625c <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
   1624e:	4a06      	ldr	r2, [pc, #24]	; (16268 <mpu_configure_dynamic_mpu_regions+0x30>)
   16250:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
   16254:	2100      	movs	r1, #0
   16256:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
   1625a:	3301      	adds	r3, #1
   1625c:	2b07      	cmp	r3, #7
   1625e:	ddf6      	ble.n	1624e <mpu_configure_dynamic_mpu_regions+0x16>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
   16260:	bd08      	pop	{r3, pc}
   16262:	bf00      	nop
   16264:	200090bc 	.word	0x200090bc
   16268:	e000ed00 	.word	0xe000ed00

0001626c <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   1626c:	4b04      	ldr	r3, [pc, #16]	; (16280 <arm_core_mpu_enable+0x14>)
   1626e:	2205      	movs	r2, #5
   16270:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   16274:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   16278:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   1627c:	4770      	bx	lr
   1627e:	bf00      	nop
   16280:	e000ed00 	.word	0xe000ed00

00016284 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   16284:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   16288:	4b02      	ldr	r3, [pc, #8]	; (16294 <arm_core_mpu_disable+0x10>)
   1628a:	2200      	movs	r2, #0
   1628c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   16290:	4770      	bx	lr
   16292:	bf00      	nop
   16294:	e000ed00 	.word	0xe000ed00

00016298 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   16298:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   1629a:	4b0e      	ldr	r3, [pc, #56]	; (162d4 <z_arm_mpu_init+0x3c>)
   1629c:	681d      	ldr	r5, [r3, #0]
   1629e:	2d08      	cmp	r5, #8
   162a0:	d815      	bhi.n	162ce <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   162a2:	f7ff ffef 	bl	16284 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   162a6:	2400      	movs	r4, #0
   162a8:	e009      	b.n	162be <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   162aa:	4b0a      	ldr	r3, [pc, #40]	; (162d4 <z_arm_mpu_init+0x3c>)
   162ac:	6859      	ldr	r1, [r3, #4]
   162ae:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   162b2:	0093      	lsls	r3, r2, #2
   162b4:	4419      	add	r1, r3
   162b6:	4620      	mov	r0, r4
   162b8:	f7ff ff00 	bl	160bc <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   162bc:	3401      	adds	r4, #1
   162be:	42a5      	cmp	r5, r4
   162c0:	d8f3      	bhi.n	162aa <z_arm_mpu_init+0x12>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   162c2:	4b05      	ldr	r3, [pc, #20]	; (162d8 <z_arm_mpu_init+0x40>)
   162c4:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
   162c6:	f7ff ffd1 	bl	1626c <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   162ca:	2000      	movs	r0, #0
}
   162cc:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
   162ce:	f04f 30ff 	mov.w	r0, #4294967295
   162d2:	e7fb      	b.n	162cc <z_arm_mpu_init+0x34>
   162d4:	00032330 	.word	0x00032330
   162d8:	200090bc 	.word	0x200090bc

000162dc <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
   162dc:	4b01      	ldr	r3, [pc, #4]	; (162e4 <__stdout_hook_install+0x8>)
   162de:	6018      	str	r0, [r3, #0]
}
   162e0:	4770      	bx	lr
   162e2:	bf00      	nop
   162e4:	20000680 	.word	0x20000680

000162e8 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
   162e8:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   162ec:	4905      	ldr	r1, [pc, #20]	; (16304 <__NVIC_SystemReset+0x1c>)
   162ee:	68ca      	ldr	r2, [r1, #12]
   162f0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   162f4:	4b04      	ldr	r3, [pc, #16]	; (16308 <__NVIC_SystemReset+0x20>)
   162f6:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   162f8:	60cb      	str	r3, [r1, #12]
   162fa:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   162fe:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   16300:	e7fd      	b.n	162fe <__NVIC_SystemReset+0x16>
   16302:	bf00      	nop
   16304:	e000ed00 	.word	0xe000ed00
   16308:	05fa0004 	.word	0x05fa0004

0001630c <nordicsemi_nrf52_init>:
	__asm__ volatile(
   1630c:	f04f 0340 	mov.w	r3, #64	; 0x40
   16310:	f3ef 8211 	mrs	r2, BASEPRI
   16314:	f383 8812 	msr	BASEPRI_MAX, r3
   16318:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   1631c:	2301      	movs	r3, #1
   1631e:	4906      	ldr	r1, [pc, #24]	; (16338 <nordicsemi_nrf52_init+0x2c>)
   16320:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   16324:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   16328:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
   1632c:	f382 8811 	msr	BASEPRI, r2
   16330:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   16334:	2000      	movs	r0, #0
   16336:	4770      	bx	lr
   16338:	4001e000 	.word	0x4001e000

0001633c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   1633c:	b130      	cbz	r0, 1634c <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
   1633e:	b508      	push	{r3, lr}
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   16340:	4b03      	ldr	r3, [pc, #12]	; (16350 <arch_busy_wait+0x14>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   16342:	0180      	lsls	r0, r0, #6
   16344:	f043 0301 	orr.w	r3, r3, #1
   16348:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
   1634a:	bd08      	pop	{r3, pc}
   1634c:	4770      	bx	lr
   1634e:	bf00      	nop
   16350:	000315a0 	.word	0x000315a0

00016354 <bt_addr_le_to_str>:
{
   16354:	b5f0      	push	{r4, r5, r6, r7, lr}
   16356:	b08b      	sub	sp, #44	; 0x2c
   16358:	4604      	mov	r4, r0
   1635a:	460d      	mov	r5, r1
   1635c:	4616      	mov	r6, r2
	switch (addr->type) {
   1635e:	7803      	ldrb	r3, [r0, #0]
   16360:	2b03      	cmp	r3, #3
   16362:	d82c      	bhi.n	163be <bt_addr_le_to_str+0x6a>
   16364:	e8df f003 	tbb	[pc, r3]
   16368:	26211c02 	.word	0x26211c02
		strcpy(type, "public");
   1636c:	4917      	ldr	r1, [pc, #92]	; (163cc <bt_addr_le_to_str+0x78>)
   1636e:	a807      	add	r0, sp, #28
   16370:	f013 fba0 	bl	29ab4 <strcpy>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
   16374:	7963      	ldrb	r3, [r4, #5]
   16376:	7922      	ldrb	r2, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
   16378:	78e1      	ldrb	r1, [r4, #3]
   1637a:	78a0      	ldrb	r0, [r4, #2]
   1637c:	7867      	ldrb	r7, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   1637e:	f10d 0c1c 	add.w	ip, sp, #28
   16382:	f8cd c014 	str.w	ip, [sp, #20]
   16386:	9704      	str	r7, [sp, #16]
   16388:	9003      	str	r0, [sp, #12]
   1638a:	9102      	str	r1, [sp, #8]
   1638c:	9201      	str	r2, [sp, #4]
   1638e:	9300      	str	r3, [sp, #0]
   16390:	79a3      	ldrb	r3, [r4, #6]
   16392:	4a0f      	ldr	r2, [pc, #60]	; (163d0 <bt_addr_le_to_str+0x7c>)
   16394:	4631      	mov	r1, r6
   16396:	4628      	mov	r0, r5
   16398:	f011 fe15 	bl	27fc6 <snprintk>
}
   1639c:	b00b      	add	sp, #44	; 0x2c
   1639e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
   163a0:	490c      	ldr	r1, [pc, #48]	; (163d4 <bt_addr_le_to_str+0x80>)
   163a2:	a807      	add	r0, sp, #28
   163a4:	f013 fb86 	bl	29ab4 <strcpy>
		break;
   163a8:	e7e4      	b.n	16374 <bt_addr_le_to_str+0x20>
		strcpy(type, "public-id");
   163aa:	490b      	ldr	r1, [pc, #44]	; (163d8 <bt_addr_le_to_str+0x84>)
   163ac:	a807      	add	r0, sp, #28
   163ae:	f013 fb81 	bl	29ab4 <strcpy>
		break;
   163b2:	e7df      	b.n	16374 <bt_addr_le_to_str+0x20>
		strcpy(type, "random-id");
   163b4:	4909      	ldr	r1, [pc, #36]	; (163dc <bt_addr_le_to_str+0x88>)
   163b6:	a807      	add	r0, sp, #28
   163b8:	f013 fb7c 	bl	29ab4 <strcpy>
		break;
   163bc:	e7da      	b.n	16374 <bt_addr_le_to_str+0x20>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   163be:	4a08      	ldr	r2, [pc, #32]	; (163e0 <bt_addr_le_to_str+0x8c>)
   163c0:	210a      	movs	r1, #10
   163c2:	a807      	add	r0, sp, #28
   163c4:	f011 fdff 	bl	27fc6 <snprintk>
		break;
   163c8:	e7d4      	b.n	16374 <bt_addr_le_to_str+0x20>
   163ca:	bf00      	nop
   163cc:	000315a8 	.word	0x000315a8
   163d0:	000315d0 	.word	0x000315d0
   163d4:	000315b0 	.word	0x000315b0
   163d8:	000315b8 	.word	0x000315b8
   163dc:	000315c4 	.word	0x000315c4
   163e0:	000330c8 	.word	0x000330c8

000163e4 <bt_hex>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   163e4:	2940      	cmp	r1, #64	; 0x40
   163e6:	bf28      	it	cs
   163e8:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
   163ea:	2300      	movs	r3, #0
   163ec:	428b      	cmp	r3, r1
   163ee:	d21c      	bcs.n	1642a <bt_hex+0x46>
{
   163f0:	b430      	push	{r4, r5}
		str[i * 2] = hex[b[i] >> 4];
   163f2:	f810 c003 	ldrb.w	ip, [r0, r3]
   163f6:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
   163fa:	005a      	lsls	r2, r3, #1
   163fc:	4d0d      	ldr	r5, [pc, #52]	; (16434 <bt_hex+0x50>)
   163fe:	f815 c00c 	ldrb.w	ip, [r5, ip]
   16402:	4c0d      	ldr	r4, [pc, #52]	; (16438 <bt_hex+0x54>)
   16404:	f804 c013 	strb.w	ip, [r4, r3, lsl #1]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   16408:	f810 c003 	ldrb.w	ip, [r0, r3]
   1640c:	f00c 0c0f 	and.w	ip, ip, #15
   16410:	3201      	adds	r2, #1
   16412:	f815 500c 	ldrb.w	r5, [r5, ip]
   16416:	54a5      	strb	r5, [r4, r2]
	for (i = 0; i < len; i++) {
   16418:	3301      	adds	r3, #1
   1641a:	428b      	cmp	r3, r1
   1641c:	d3e9      	bcc.n	163f2 <bt_hex+0xe>
	}

	str[i * 2] = '\0';
   1641e:	4806      	ldr	r0, [pc, #24]	; (16438 <bt_hex+0x54>)
   16420:	2200      	movs	r2, #0
   16422:	f800 2013 	strb.w	r2, [r0, r3, lsl #1]

	return str;
}
   16426:	bc30      	pop	{r4, r5}
   16428:	4770      	bx	lr
	str[i * 2] = '\0';
   1642a:	4803      	ldr	r0, [pc, #12]	; (16438 <bt_hex+0x54>)
   1642c:	2200      	movs	r2, #0
   1642e:	f800 2013 	strb.w	r2, [r0, r3, lsl #1]
}
   16432:	4770      	bx	lr
   16434:	00032384 	.word	0x00032384
   16438:	20007c50 	.word	0x20007c50

0001643c <bt_addr_le_str>:

	return str;
}

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
   1643c:	b510      	push	{r4, lr}
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));
   1643e:	4c03      	ldr	r4, [pc, #12]	; (1644c <bt_addr_le_str+0x10>)
   16440:	221e      	movs	r2, #30
   16442:	4621      	mov	r1, r4
   16444:	f7ff ff86 	bl	16354 <bt_addr_le_to_str>

	return str;
}
   16448:	4620      	mov	r0, r4
   1644a:	bd10      	pop	{r4, pc}
   1644c:	20007c30 	.word	0x20007c30

00016450 <long_wq_init>:
{
	return k_work_submit_to_queue(&bt_long_wq, work);
}

static int long_wq_init(const struct device *d)
{
   16450:	b570      	push	{r4, r5, r6, lr}
   16452:	b084      	sub	sp, #16
	ARG_UNUSED(d);

	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   16454:	ae02      	add	r6, sp, #8
   16456:	2400      	movs	r4, #0
   16458:	9402      	str	r4, [sp, #8]
   1645a:	9403      	str	r4, [sp, #12]
   1645c:	4b08      	ldr	r3, [pc, #32]	; (16480 <long_wq_init+0x30>)
   1645e:	9302      	str	r3, [sp, #8]

	k_work_queue_init(&bt_long_wq);
   16460:	4d08      	ldr	r5, [pc, #32]	; (16484 <long_wq_init+0x34>)
   16462:	4628      	mov	r0, r5
   16464:	f01a f92a 	bl	306bc <k_work_queue_init>

	k_work_queue_start(&bt_long_wq, bt_lw_stack_area,
   16468:	9600      	str	r6, [sp, #0]
   1646a:	230a      	movs	r3, #10
   1646c:	f44f 62a3 	mov.w	r2, #1304	; 0x518
   16470:	4905      	ldr	r1, [pc, #20]	; (16488 <long_wq_init+0x38>)
   16472:	4628      	mov	r0, r5
   16474:	f010 fa28 	bl	268c8 <k_work_queue_start>
			   K_THREAD_STACK_SIZEOF(bt_lw_stack_area),
			   CONFIG_BT_LONG_WQ_PRIO, &cfg);

	return 0;
}
   16478:	4620      	mov	r0, r4
   1647a:	b004      	add	sp, #16
   1647c:	bd70      	pop	{r4, r5, r6, pc}
   1647e:	bf00      	nop
   16480:	00032398 	.word	0x00032398
   16484:	20001f48 	.word	0x20001f48
   16488:	20009440 	.word	0x20009440

0001648c <bt_long_wq_schedule>:
{
   1648c:	b508      	push	{r3, lr}
   1648e:	4601      	mov	r1, r0
	return k_work_schedule_for_queue(&bt_long_wq, dwork, timeout);
   16490:	4801      	ldr	r0, [pc, #4]	; (16498 <bt_long_wq_schedule+0xc>)
   16492:	f01a f935 	bl	30700 <k_work_schedule_for_queue>
}
   16496:	bd08      	pop	{r3, pc}
   16498:	20001f48 	.word	0x20001f48

0001649c <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   1649c:	b510      	push	{r4, lr}
   1649e:	4686      	mov	lr, r0
   164a0:	468c      	mov	ip, r1
	switch (src->type) {
   164a2:	7803      	ldrb	r3, [r0, #0]
   164a4:	2b01      	cmp	r3, #1
   164a6:	d018      	beq.n	164da <uuid_to_uuid128+0x3e>
   164a8:	2b02      	cmp	r3, #2
   164aa:	d032      	beq.n	16512 <uuid_to_uuid128+0x76>
   164ac:	b103      	cbz	r3, 164b0 <uuid_to_uuid128+0x14>
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   164ae:	bd10      	pop	{r4, pc}
		*dst = uuid128_base;
   164b0:	4c1b      	ldr	r4, [pc, #108]	; (16520 <uuid_to_uuid128+0x84>)
   164b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   164b4:	f8cc 0000 	str.w	r0, [ip]
   164b8:	f8cc 1004 	str.w	r1, [ip, #4]
   164bc:	f8cc 2008 	str.w	r2, [ip, #8]
   164c0:	f8cc 300c 	str.w	r3, [ip, #12]
   164c4:	7823      	ldrb	r3, [r4, #0]
   164c6:	f88c 3010 	strb.w	r3, [ip, #16]
		sys_put_le16(BT_UUID_16(src)->val,
   164ca:	f8be 3002 	ldrh.w	r3, [lr, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
   164ce:	f88c 300d 	strb.w	r3, [ip, #13]
	dst[1] = val >> 8;
   164d2:	0a1b      	lsrs	r3, r3, #8
   164d4:	f88c 300e 	strb.w	r3, [ip, #14]
}
   164d8:	e7e9      	b.n	164ae <uuid_to_uuid128+0x12>
		*dst = uuid128_base;
   164da:	4c11      	ldr	r4, [pc, #68]	; (16520 <uuid_to_uuid128+0x84>)
   164dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   164de:	f8cc 0000 	str.w	r0, [ip]
   164e2:	f8cc 1004 	str.w	r1, [ip, #4]
   164e6:	f8cc 2008 	str.w	r2, [ip, #8]
   164ea:	f8cc 300c 	str.w	r3, [ip, #12]
   164ee:	7823      	ldrb	r3, [r4, #0]
   164f0:	f88c 3010 	strb.w	r3, [ip, #16]
		sys_put_le32(BT_UUID_32(src)->val,
   164f4:	f8de 3004 	ldr.w	r3, [lr, #4]
	dst[0] = val;
   164f8:	f88c 300d 	strb.w	r3, [ip, #13]
	dst[1] = val >> 8;
   164fc:	f3c3 2207 	ubfx	r2, r3, #8, #8
   16500:	f88c 200e 	strb.w	r2, [ip, #14]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
   16504:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   16506:	f88c 200f 	strb.w	r2, [ip, #15]
	dst[1] = val >> 8;
   1650a:	0e1b      	lsrs	r3, r3, #24
   1650c:	f88c 3010 	strb.w	r3, [ip, #16]
}
   16510:	e7cd      	b.n	164ae <uuid_to_uuid128+0x12>
		memcpy(dst, src, sizeof(*dst));
   16512:	2211      	movs	r2, #17
   16514:	4601      	mov	r1, r0
   16516:	4660      	mov	r0, ip
   16518:	f013 fb4b 	bl	29bb2 <memcpy>
		return;
   1651c:	e7c7      	b.n	164ae <uuid_to_uuid128+0x12>
   1651e:	bf00      	nop
   16520:	000323a4 	.word	0x000323a4

00016524 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   16524:	b538      	push	{r3, r4, r5, lr}
   16526:	4604      	mov	r4, r0
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf * __must_check net_buf_alloc(struct net_buf_pool *pool,
							  k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
   16528:	4805      	ldr	r0, [pc, #20]	; (16540 <bt_buf_get_rx+0x1c>)
   1652a:	f016 f81b 	bl	2c564 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   1652e:	4605      	mov	r5, r0
   16530:	b120      	cbz	r0, 1653c <bt_buf_get_rx+0x18>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
   16532:	2100      	movs	r1, #0
   16534:	300c      	adds	r0, #12
   16536:	f016 f826 	bl	2c586 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   1653a:	762c      	strb	r4, [r5, #24]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   1653c:	4628      	mov	r0, r5
   1653e:	bd38      	pop	{r3, r4, r5, pc}
   16540:	20000be0 	.word	0x20000be0

00016544 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   16544:	b510      	push	{r4, lr}
   16546:	4602      	mov	r2, r0
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   16548:	4b0a      	ldr	r3, [pc, #40]	; (16574 <bt_buf_get_cmd_complete+0x30>)
   1654a:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
   1654e:	b158      	cbz	r0, 16568 <bt_buf_get_cmd_complete+0x24>
		buf = net_buf_ref(bt_dev.sent_cmd);
   16550:	f016 f872 	bl	2c638 <net_buf_ref>
   16554:	4604      	mov	r4, r0
   16556:	2301      	movs	r3, #1
   16558:	7603      	strb	r3, [r0, #24]

		bt_buf_set_type(buf, BT_BUF_EVT);
		buf->len = 0U;
   1655a:	2100      	movs	r1, #0
   1655c:	8201      	strh	r1, [r0, #16]
   1655e:	300c      	adds	r0, #12
   16560:	f016 f811 	bl	2c586 <net_buf_simple_reserve>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   16564:	4620      	mov	r0, r4
   16566:	bd10      	pop	{r4, pc}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   16568:	460b      	mov	r3, r1
   1656a:	2001      	movs	r0, #1
   1656c:	f7ff ffda 	bl	16524 <bt_buf_get_rx>
   16570:	4604      	mov	r4, r0
   16572:	e7f7      	b.n	16564 <bt_buf_get_cmd_complete+0x20>
   16574:	20000370 	.word	0x20000370

00016578 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   16578:	b510      	push	{r4, lr}
	switch (evt) {
   1657a:	280f      	cmp	r0, #15
   1657c:	d90d      	bls.n	1659a <bt_buf_get_evt+0x22>
   1657e:	2813      	cmp	r0, #19
   16580:	d10d      	bne.n	1659e <bt_buf_get_evt+0x26>
	return net_buf_alloc_fixed(pool, timeout);
   16582:	4814      	ldr	r0, [pc, #80]	; (165d4 <bt_buf_get_evt+0x5c>)
   16584:	f015 ffee 	bl	2c564 <net_buf_alloc_fixed>
	case BT_HCI_EVT_NUM_COMPLETED_PACKETS:
		{
			struct net_buf *buf;

			buf = net_buf_alloc(&num_complete_pool, timeout);
			if (buf) {
   16588:	4604      	mov	r4, r0
   1658a:	b198      	cbz	r0, 165b4 <bt_buf_get_evt+0x3c>
	net_buf_simple_reserve(&buf->b, reserve);
   1658c:	2100      	movs	r1, #0
   1658e:	300c      	adds	r0, #12
   16590:	f015 fff9 	bl	2c586 <net_buf_simple_reserve>
   16594:	2301      	movs	r3, #1
   16596:	7623      	strb	r3, [r4, #24]
}
   16598:	e00c      	b.n	165b4 <bt_buf_get_evt+0x3c>
	switch (evt) {
   1659a:	280e      	cmp	r0, #14
   1659c:	d205      	bcs.n	165aa <bt_buf_get_evt+0x32>
#endif /* CONFIG_BT_CONN || CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return bt_buf_get_cmd_complete(timeout);
	default:
		if (discardable) {
   1659e:	b959      	cbnz	r1, 165b8 <bt_buf_get_evt+0x40>
			}

			return buf;
		}

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   165a0:	2001      	movs	r0, #1
   165a2:	f7ff ffbf 	bl	16524 <bt_buf_get_rx>
   165a6:	4604      	mov	r4, r0
   165a8:	e004      	b.n	165b4 <bt_buf_get_evt+0x3c>
		return bt_buf_get_cmd_complete(timeout);
   165aa:	4610      	mov	r0, r2
   165ac:	4619      	mov	r1, r3
   165ae:	f7ff ffc9 	bl	16544 <bt_buf_get_cmd_complete>
   165b2:	4604      	mov	r4, r0
	}
}
   165b4:	4620      	mov	r0, r4
   165b6:	bd10      	pop	{r4, pc}
	return net_buf_alloc_fixed(pool, timeout);
   165b8:	4807      	ldr	r0, [pc, #28]	; (165d8 <bt_buf_get_evt+0x60>)
   165ba:	f015 ffd3 	bl	2c564 <net_buf_alloc_fixed>
			if (buf) {
   165be:	4604      	mov	r4, r0
   165c0:	2800      	cmp	r0, #0
   165c2:	d0f7      	beq.n	165b4 <bt_buf_get_evt+0x3c>
	net_buf_simple_reserve(&buf->b, reserve);
   165c4:	2100      	movs	r1, #0
   165c6:	300c      	adds	r0, #12
   165c8:	f015 ffdd 	bl	2c586 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   165cc:	2301      	movs	r3, #1
   165ce:	7623      	strb	r3, [r4, #24]
			return buf;
   165d0:	e7f0      	b.n	165b4 <bt_buf_get_evt+0x3c>
   165d2:	bf00      	nop
   165d4:	20000c0c 	.word	0x20000c0c
   165d8:	20000b5c 	.word	0x20000b5c

000165dc <conn_handle_disconnected>:
	(void)memset(disconnected_handles, 0, sizeof(disconnected_handles));
}

static void conn_handle_disconnected(uint16_t handle)
{
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   165dc:	2300      	movs	r3, #0
   165de:	e000      	b.n	165e2 <conn_handle_disconnected+0x6>
   165e0:	3301      	adds	r3, #1
   165e2:	2b07      	cmp	r3, #7
   165e4:	d80a      	bhi.n	165fc <conn_handle_disconnected+0x20>
		if (!disconnected_handles[i]) {
   165e6:	4a06      	ldr	r2, [pc, #24]	; (16600 <conn_handle_disconnected+0x24>)
   165e8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
   165ec:	2a00      	cmp	r2, #0
   165ee:	d1f7      	bne.n	165e0 <conn_handle_disconnected+0x4>
			/* Use invalid connection handle bits so that connection
			 * handle 0 can be used as a valid non-zero handle.
			 */
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   165f0:	f440 4270 	orr.w	r2, r0, #61440	; 0xf000
   165f4:	4902      	ldr	r1, [pc, #8]	; (16600 <conn_handle_disconnected+0x24>)
   165f6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
   165fa:	e7f1      	b.n	165e0 <conn_handle_disconnected+0x4>
		}
	}
}
   165fc:	4770      	bx	lr
   165fe:	bf00      	nop
   16600:	20007cd4 	.word	0x20007cd4

00016604 <conn_handle_is_disconnected>:

static bool conn_handle_is_disconnected(uint16_t handle)
{
	handle |= ~BT_ACL_HANDLE_MASK;
   16604:	f440 4070 	orr.w	r0, r0, #61440	; 0xf000

	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   16608:	2300      	movs	r3, #0
   1660a:	2b07      	cmp	r3, #7
   1660c:	d80c      	bhi.n	16628 <conn_handle_is_disconnected+0x24>
		if (disconnected_handles[i] == handle) {
   1660e:	4a07      	ldr	r2, [pc, #28]	; (1662c <conn_handle_is_disconnected+0x28>)
   16610:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
   16614:	4282      	cmp	r2, r0
   16616:	d001      	beq.n	1661c <conn_handle_is_disconnected+0x18>
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   16618:	3301      	adds	r3, #1
   1661a:	e7f6      	b.n	1660a <conn_handle_is_disconnected+0x6>
			disconnected_handles[i] = 0;
   1661c:	4a03      	ldr	r2, [pc, #12]	; (1662c <conn_handle_is_disconnected+0x28>)
   1661e:	2100      	movs	r1, #0
   16620:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			return true;
   16624:	2001      	movs	r0, #1
   16626:	4770      	bx	lr
		}
	}

	return false;
   16628:	2000      	movs	r0, #0
}
   1662a:	4770      	bx	lr
   1662c:	20007cd4 	.word	0x20007cd4

00016630 <read_local_ver_complete>:
}


static void read_local_ver_complete(struct net_buf *buf)
{
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   16630:	68c2      	ldr	r2, [r0, #12]

	LOG_DBG("status 0x%02x", rp->status);

	bt_dev.hci_version = rp->hci_version;
   16632:	7851      	ldrb	r1, [r2, #1]
   16634:	4b08      	ldr	r3, [pc, #32]	; (16658 <read_local_ver_complete+0x28>)
   16636:	f883 1068 	strb.w	r1, [r3, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   1663a:	8851      	ldrh	r1, [r2, #2]
   1663c:	f8a3 106a 	strh.w	r1, [r3, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
   16640:	7911      	ldrb	r1, [r2, #4]
   16642:	f883 1069 	strb.w	r1, [r3, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   16646:	f8b2 1007 	ldrh.w	r1, [r2, #7]
   1664a:	f8a3 106c 	strh.w	r1, [r3, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   1664e:	f8b2 2005 	ldrh.w	r2, [r2, #5]
   16652:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
}
   16656:	4770      	bx	lr
   16658:	20000370 	.word	0x20000370

0001665c <le_read_supp_states_complete>:

	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
}

static void le_read_supp_states_complete(struct net_buf *buf)
{
   1665c:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_supp_states *rp = (void *)buf->data;
   1665e:	68c0      	ldr	r0, [r0, #12]

	LOG_DBG("status 0x%02x", rp->status);

	bt_dev.le.states = sys_get_le64(rp->le_states);
   16660:	3001      	adds	r0, #1
   16662:	f013 fb8e 	bl	29d82 <sys_get_le64>
   16666:	4b02      	ldr	r3, [pc, #8]	; (16670 <le_read_supp_states_complete+0x14>)
   16668:	e9c3 0136 	strd	r0, r1, [r3, #216]	; 0xd8
}
   1666c:	bd08      	pop	{r3, pc}
   1666e:	bf00      	nop
   16670:	20000370 	.word	0x20000370

00016674 <hci_data_buf_overflow>:
{
   16674:	b510      	push	{r4, lr}
   16676:	b082      	sub	sp, #8
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;
   16678:	68c3      	ldr	r3, [r0, #12]
	LOG_WRN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   1667a:	781c      	ldrb	r4, [r3, #0]
   1667c:	2008      	movs	r0, #8
   1667e:	f7fd fb43 	bl	13d08 <z_log_msg_alloc>
   16682:	2200      	movs	r2, #0
   16684:	f36f 0200 	bfc	r2, #0, #1
   16688:	f36f 0241 	bfc	r2, #1, #1
   1668c:	f36f 0282 	bfc	r2, #2, #1
   16690:	f36f 02c5 	bfc	r2, #3, #3
   16694:	2302      	movs	r3, #2
   16696:	f363 1288 	bfi	r2, r3, #6, #3
   1669a:	230c      	movs	r3, #12
   1669c:	f363 2252 	bfi	r2, r3, #9, #10
   166a0:	f36f 42de 	bfc	r2, #19, #12
   166a4:	f36f 72df 	bfc	r2, #31, #1
   166a8:	4684      	mov	ip, r0
   166aa:	b198      	cbz	r0, 166d4 <hci_data_buf_overflow+0x60>
   166ac:	f110 0310 	adds.w	r3, r0, #16
   166b0:	d002      	beq.n	166b8 <hci_data_buf_overflow+0x44>
   166b2:	490c      	ldr	r1, [pc, #48]	; (166e4 <hci_data_buf_overflow+0x70>)
   166b4:	6141      	str	r1, [r0, #20]
   166b6:	6184      	str	r4, [r0, #24]
   166b8:	b163      	cbz	r3, 166d4 <hci_data_buf_overflow+0x60>
   166ba:	2303      	movs	r3, #3
   166bc:	f88d 3004 	strb.w	r3, [sp, #4]
   166c0:	2300      	movs	r3, #0
   166c2:	f88d 3005 	strb.w	r3, [sp, #5]
   166c6:	f88d 3006 	strb.w	r3, [sp, #6]
   166ca:	f88d 3007 	strb.w	r3, [sp, #7]
   166ce:	9801      	ldr	r0, [sp, #4]
   166d0:	f8cc 0010 	str.w	r0, [ip, #16]
   166d4:	2300      	movs	r3, #0
   166d6:	4904      	ldr	r1, [pc, #16]	; (166e8 <hci_data_buf_overflow+0x74>)
   166d8:	4660      	mov	r0, ip
   166da:	f012 fd7e 	bl	291da <z_log_msg_finalize>
}
   166de:	b002      	add	sp, #8
   166e0:	bd10      	pop	{r4, pc}
   166e2:	bf00      	nop
   166e4:	000323e8 	.word	0x000323e8
   166e8:	00031428 	.word	0x00031428

000166ec <handle_event_common>:
{
   166ec:	b530      	push	{r4, r5, lr}
   166ee:	b083      	sub	sp, #12
   166f0:	4604      	mov	r4, r0
   166f2:	4608      	mov	r0, r1
	for (i = 0; i < num_handlers; i++) {
   166f4:	f04f 0c00 	mov.w	ip, #0
   166f8:	4563      	cmp	r3, ip
   166fa:	d945      	bls.n	16788 <handle_event_common+0x9c>
		const struct event_handler *handler = &handlers[i];
   166fc:	eb02 01cc 	add.w	r1, r2, ip, lsl #3
		if (handler->event != event) {
   16700:	f812 e03c 	ldrb.w	lr, [r2, ip, lsl #3]
   16704:	45a6      	cmp	lr, r4
   16706:	d108      	bne.n	1671a <handle_event_common+0x2e>
		if (buf->len < handler->min_len) {
   16708:	8a05      	ldrh	r5, [r0, #16]
   1670a:	784b      	ldrb	r3, [r1, #1]
   1670c:	429d      	cmp	r5, r3
   1670e:	d307      	bcc.n	16720 <handle_event_common+0x34>
		handler->handler(buf);
   16710:	684b      	ldr	r3, [r1, #4]
   16712:	4798      	blx	r3
		return 0;
   16714:	2000      	movs	r0, #0
}
   16716:	b003      	add	sp, #12
   16718:	bd30      	pop	{r4, r5, pc}
	for (i = 0; i < num_handlers; i++) {
   1671a:	f10c 0c01 	add.w	ip, ip, #1
   1671e:	e7eb      	b.n	166f8 <handle_event_common+0xc>
			LOG_ERR("Too small (%u bytes) event 0x%02x", buf->len, event);
   16720:	2008      	movs	r0, #8
   16722:	f7fd faf1 	bl	13d08 <z_log_msg_alloc>
   16726:	2200      	movs	r2, #0
   16728:	f36f 0200 	bfc	r2, #0, #1
   1672c:	f36f 0241 	bfc	r2, #1, #1
   16730:	f36f 0282 	bfc	r2, #2, #1
   16734:	f36f 02c5 	bfc	r2, #3, #3
   16738:	2301      	movs	r3, #1
   1673a:	f363 1288 	bfi	r2, r3, #6, #3
   1673e:	2310      	movs	r3, #16
   16740:	f363 2252 	bfi	r2, r3, #9, #10
   16744:	f36f 42de 	bfc	r2, #19, #12
   16748:	f36f 72df 	bfc	r2, #31, #1
   1674c:	4684      	mov	ip, r0
   1674e:	b198      	cbz	r0, 16778 <handle_event_common+0x8c>
   16750:	18c3      	adds	r3, r0, r3
   16752:	d003      	beq.n	1675c <handle_event_common+0x70>
   16754:	490e      	ldr	r1, [pc, #56]	; (16790 <handle_event_common+0xa4>)
   16756:	6141      	str	r1, [r0, #20]
   16758:	6185      	str	r5, [r0, #24]
   1675a:	61c4      	str	r4, [r0, #28]
   1675c:	b163      	cbz	r3, 16778 <handle_event_common+0x8c>
   1675e:	2304      	movs	r3, #4
   16760:	f88d 3004 	strb.w	r3, [sp, #4]
   16764:	2300      	movs	r3, #0
   16766:	f88d 3005 	strb.w	r3, [sp, #5]
   1676a:	f88d 3006 	strb.w	r3, [sp, #6]
   1676e:	f88d 3007 	strb.w	r3, [sp, #7]
   16772:	9801      	ldr	r0, [sp, #4]
   16774:	f8cc 0010 	str.w	r0, [ip, #16]
   16778:	2300      	movs	r3, #0
   1677a:	4906      	ldr	r1, [pc, #24]	; (16794 <handle_event_common+0xa8>)
   1677c:	4660      	mov	r0, ip
   1677e:	f012 fd2c 	bl	291da <z_log_msg_finalize>
			return -EINVAL;
   16782:	f06f 0015 	mvn.w	r0, #21
   16786:	e7c6      	b.n	16716 <handle_event_common+0x2a>
	return -EOPNOTSUPP;
   16788:	f06f 005e 	mvn.w	r0, #94	; 0x5e
   1678c:	e7c3      	b.n	16716 <handle_event_common+0x2a>
   1678e:	bf00      	nop
   16790:	00032410 	.word	0x00032410
   16794:	00031428 	.word	0x00031428

00016798 <hci_reset_complete>:
{
   16798:	b508      	push	{r3, lr}
	uint8_t status = buf->data[0];
   1679a:	68c3      	ldr	r3, [r0, #12]
   1679c:	781b      	ldrb	r3, [r3, #0]
	if (status) {
   1679e:	b99b      	cbnz	r3, 167c8 <hci_reset_complete+0x30>
		bt_scan_reset();
   167a0:	f002 fbc0 	bl	18f24 <bt_scan_reset>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   167a4:	4b09      	ldr	r3, [pc, #36]	; (167cc <hci_reset_complete+0x34>)
   167a6:	f3bf 8f5b 	dmb	ish
   167aa:	681a      	ldr	r2, [r3, #0]
   167ac:	f3bf 8f5b 	dmb	ish
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   167b0:	f002 0209 	and.w	r2, r2, #9
   167b4:	f3bf 8f5b 	dmb	ish
   167b8:	e853 1f00 	ldrex	r1, [r3]
   167bc:	e843 2000 	strex	r0, r2, [r3]
   167c0:	2800      	cmp	r0, #0
   167c2:	d1f9      	bne.n	167b8 <hci_reset_complete+0x20>
   167c4:	f3bf 8f5b 	dmb	ish
}
   167c8:	bd08      	pop	{r3, pc}
   167ca:	bf00      	nop
   167cc:	2000043c 	.word	0x2000043c

000167d0 <read_local_features_complete>:
{
   167d0:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
   167d2:	68c1      	ldr	r1, [r0, #12]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   167d4:	2208      	movs	r2, #8
   167d6:	3101      	adds	r1, #1
   167d8:	4801      	ldr	r0, [pc, #4]	; (167e0 <read_local_features_complete+0x10>)
   167da:	f013 f9ea 	bl	29bb2 <memcpy>
}
   167de:	bd08      	pop	{r3, pc}
   167e0:	200003e0 	.word	0x200003e0

000167e4 <read_supported_commands_complete>:
{
   167e4:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
   167e6:	68c1      	ldr	r1, [r0, #12]
	memcpy(bt_dev.supported_commands, rp->commands,
   167e8:	2240      	movs	r2, #64	; 0x40
   167ea:	3101      	adds	r1, #1
   167ec:	4801      	ldr	r0, [pc, #4]	; (167f4 <read_supported_commands_complete+0x10>)
   167ee:	f013 f9e0 	bl	29bb2 <memcpy>
}
   167f2:	bd08      	pop	{r3, pc}
   167f4:	200003e8 	.word	0x200003e8

000167f8 <read_le_features_complete>:
{
   167f8:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
   167fa:	68c1      	ldr	r1, [r0, #12]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   167fc:	2208      	movs	r2, #8
   167fe:	3101      	adds	r1, #1
   16800:	4801      	ldr	r0, [pc, #4]	; (16808 <read_le_features_complete+0x10>)
   16802:	f013 f9d6 	bl	29bb2 <memcpy>
}
   16806:	bd08      	pop	{r3, pc}
   16808:	20000440 	.word	0x20000440

0001680c <le_read_buffer_size_complete>:
{
   1680c:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
   1680e:	68c2      	ldr	r2, [r0, #12]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   16810:	f8b2 3001 	ldrh.w	r3, [r2, #1]
   16814:	b299      	uxth	r1, r3
   16816:	4806      	ldr	r0, [pc, #24]	; (16830 <le_read_buffer_size_complete+0x24>)
   16818:	f8a0 30fc 	strh.w	r3, [r0, #252]	; 0xfc
	if (!bt_dev.le.acl_mtu) {
   1681c:	b901      	cbnz	r1, 16820 <le_read_buffer_size_complete+0x14>
}
   1681e:	bd08      	pop	{r3, pc}
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   16820:	78d1      	ldrb	r1, [r2, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
   16822:	460a      	mov	r2, r1
   16824:	f500 7080 	add.w	r0, r0, #256	; 0x100
   16828:	f019 fe3b 	bl	304a2 <z_impl_k_sem_init>
   1682c:	e7f7      	b.n	1681e <le_read_buffer_size_complete+0x12>
   1682e:	bf00      	nop
   16830:	20000370 	.word	0x20000370

00016834 <read_buffer_size_complete>:
{
   16834:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
   16836:	68c2      	ldr	r2, [r0, #12]
	if (bt_dev.le.acl_mtu) {
   16838:	4b08      	ldr	r3, [pc, #32]	; (1685c <read_buffer_size_complete+0x28>)
   1683a:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
   1683e:	b103      	cbz	r3, 16842 <read_buffer_size_complete+0xe>
}
   16840:	bd08      	pop	{r3, pc}
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   16842:	f8b2 3001 	ldrh.w	r3, [r2, #1]
   16846:	4805      	ldr	r0, [pc, #20]	; (1685c <read_buffer_size_complete+0x28>)
   16848:	f8a0 30fc 	strh.w	r3, [r0, #252]	; 0xfc
	pkts = sys_le16_to_cpu(rp->acl_max_num);
   1684c:	8891      	ldrh	r1, [r2, #4]
   1684e:	460a      	mov	r2, r1
   16850:	f500 7080 	add.w	r0, r0, #256	; 0x100
   16854:	f019 fe25 	bl	304a2 <z_impl_k_sem_init>
   16858:	e7f2      	b.n	16840 <read_buffer_size_complete+0xc>
   1685a:	bf00      	nop
   1685c:	20000370 	.word	0x20000370

00016860 <find_pending_connect>:
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && role == BT_HCI_ROLE_CENTRAL) {
   16860:	b108      	cbz	r0, 16866 <find_pending_connect+0x6>
	return NULL;
   16862:	2000      	movs	r0, #0
}
   16864:	4770      	bx	lr
{
   16866:	b508      	push	{r3, lr}
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   16868:	2206      	movs	r2, #6
   1686a:	f003 faff 	bl	19e6c <bt_conn_lookup_state_le>
		if (IS_ENABLED(CONFIG_BT_FILTER_ACCEPT_LIST) && !conn) {
   1686e:	b100      	cbz	r0, 16872 <find_pending_connect+0x12>
}
   16870:	bd08      	pop	{r3, pc}
			conn = bt_conn_lookup_state_le(BT_ID_DEFAULT,
   16872:	2203      	movs	r2, #3
   16874:	4902      	ldr	r1, [pc, #8]	; (16880 <find_pending_connect+0x20>)
   16876:	2000      	movs	r0, #0
   16878:	f003 faf8 	bl	19e6c <bt_conn_lookup_state_le>
		return conn;
   1687c:	e7f8      	b.n	16870 <find_pending_connect+0x10>
   1687e:	bf00      	nop
   16880:	00032364 	.word	0x00032364

00016884 <hci_disconn_complete>:
{
   16884:	b570      	push	{r4, r5, r6, lr}
   16886:	b082      	sub	sp, #8
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   16888:	68c4      	ldr	r4, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1688a:	f8b4 6001 	ldrh.w	r6, [r4, #1]
	if (evt->status) {
   1688e:	7823      	ldrb	r3, [r4, #0]
   16890:	b10b      	cbz	r3, 16896 <hci_disconn_complete+0x12>
}
   16892:	b002      	add	sp, #8
   16894:	bd70      	pop	{r4, r5, r6, pc}
	conn = bt_conn_lookup_handle(handle);
   16896:	4630      	mov	r0, r6
   16898:	f003 f84e 	bl	19938 <bt_conn_lookup_handle>
	if (!conn) {
   1689c:	4605      	mov	r5, r0
   1689e:	b158      	cbz	r0, 168b8 <hci_disconn_complete+0x34>
	conn->err = evt->reason;
   168a0:	78e3      	ldrb	r3, [r4, #3]
   168a2:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   168a4:	2100      	movs	r1, #0
   168a6:	f003 f851 	bl	1994c <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
   168aa:	78ab      	ldrb	r3, [r5, #2]
   168ac:	2b01      	cmp	r3, #1
   168ae:	d034      	beq.n	1691a <hci_disconn_complete+0x96>
		bt_conn_unref(conn);
   168b0:	4628      	mov	r0, r5
   168b2:	f013 fd2f 	bl	2a314 <bt_conn_unref>
		return;
   168b6:	e7ec      	b.n	16892 <hci_disconn_complete+0xe>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   168b8:	2008      	movs	r0, #8
   168ba:	f7fd fa25 	bl	13d08 <z_log_msg_alloc>
   168be:	2200      	movs	r2, #0
   168c0:	f36f 0200 	bfc	r2, #0, #1
   168c4:	f36f 0241 	bfc	r2, #1, #1
   168c8:	f36f 0282 	bfc	r2, #2, #1
   168cc:	f36f 02c5 	bfc	r2, #3, #3
   168d0:	2301      	movs	r3, #1
   168d2:	f363 1288 	bfi	r2, r3, #6, #3
   168d6:	230c      	movs	r3, #12
   168d8:	f363 2252 	bfi	r2, r3, #9, #10
   168dc:	f36f 42de 	bfc	r2, #19, #12
   168e0:	f36f 72df 	bfc	r2, #31, #1
   168e4:	4604      	mov	r4, r0
   168e6:	b190      	cbz	r0, 1690e <hci_disconn_complete+0x8a>
   168e8:	f110 0310 	adds.w	r3, r0, #16
   168ec:	d002      	beq.n	168f4 <hci_disconn_complete+0x70>
   168ee:	490d      	ldr	r1, [pc, #52]	; (16924 <hci_disconn_complete+0xa0>)
   168f0:	6141      	str	r1, [r0, #20]
   168f2:	6186      	str	r6, [r0, #24]
   168f4:	b15b      	cbz	r3, 1690e <hci_disconn_complete+0x8a>
   168f6:	2303      	movs	r3, #3
   168f8:	f88d 3004 	strb.w	r3, [sp, #4]
   168fc:	2300      	movs	r3, #0
   168fe:	f88d 3005 	strb.w	r3, [sp, #5]
   16902:	f88d 3006 	strb.w	r3, [sp, #6]
   16906:	f88d 3007 	strb.w	r3, [sp, #7]
   1690a:	9801      	ldr	r0, [sp, #4]
   1690c:	6120      	str	r0, [r4, #16]
   1690e:	2300      	movs	r3, #0
   16910:	4905      	ldr	r1, [pc, #20]	; (16928 <hci_disconn_complete+0xa4>)
   16912:	4620      	mov	r0, r4
   16914:	f012 fc61 	bl	291da <z_log_msg_finalize>
		return;
   16918:	e7bb      	b.n	16892 <hci_disconn_complete+0xe>
	bt_conn_unref(conn);
   1691a:	4628      	mov	r0, r5
   1691c:	f013 fcfa 	bl	2a314 <bt_conn_unref>
   16920:	e7b7      	b.n	16892 <hci_disconn_complete+0xe>
   16922:	bf00      	nop
   16924:	00032434 	.word	0x00032434
   16928:	00031428 	.word	0x00031428

0001692c <le_phy_update_complete>:
{
   1692c:	b510      	push	{r4, lr}
   1692e:	b082      	sub	sp, #8
	struct bt_hci_evt_le_phy_update_complete *evt = (void *)buf->data;
   16930:	68c3      	ldr	r3, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   16932:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   16936:	4620      	mov	r0, r4
   16938:	f002 fffe 	bl	19938 <bt_conn_lookup_handle>
	if (!conn) {
   1693c:	b118      	cbz	r0, 16946 <le_phy_update_complete+0x1a>
	bt_conn_unref(conn);
   1693e:	f013 fce9 	bl	2a314 <bt_conn_unref>
}
   16942:	b002      	add	sp, #8
   16944:	bd10      	pop	{r4, pc}
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   16946:	2008      	movs	r0, #8
   16948:	f7fd f9de 	bl	13d08 <z_log_msg_alloc>
   1694c:	2200      	movs	r2, #0
   1694e:	f36f 0200 	bfc	r2, #0, #1
   16952:	f36f 0241 	bfc	r2, #1, #1
   16956:	f36f 0282 	bfc	r2, #2, #1
   1695a:	f36f 02c5 	bfc	r2, #3, #3
   1695e:	2301      	movs	r3, #1
   16960:	f363 1288 	bfi	r2, r3, #6, #3
   16964:	230c      	movs	r3, #12
   16966:	f363 2252 	bfi	r2, r3, #9, #10
   1696a:	f36f 42de 	bfc	r2, #19, #12
   1696e:	f36f 72df 	bfc	r2, #31, #1
   16972:	4684      	mov	ip, r0
   16974:	b198      	cbz	r0, 1699e <le_phy_update_complete+0x72>
   16976:	f110 0310 	adds.w	r3, r0, #16
   1697a:	d002      	beq.n	16982 <le_phy_update_complete+0x56>
   1697c:	490b      	ldr	r1, [pc, #44]	; (169ac <le_phy_update_complete+0x80>)
   1697e:	6141      	str	r1, [r0, #20]
   16980:	6184      	str	r4, [r0, #24]
   16982:	b163      	cbz	r3, 1699e <le_phy_update_complete+0x72>
   16984:	2303      	movs	r3, #3
   16986:	f88d 3004 	strb.w	r3, [sp, #4]
   1698a:	2300      	movs	r3, #0
   1698c:	f88d 3005 	strb.w	r3, [sp, #5]
   16990:	f88d 3006 	strb.w	r3, [sp, #6]
   16994:	f88d 3007 	strb.w	r3, [sp, #7]
   16998:	9801      	ldr	r0, [sp, #4]
   1699a:	f8cc 0010 	str.w	r0, [ip, #16]
   1699e:	2300      	movs	r3, #0
   169a0:	4903      	ldr	r1, [pc, #12]	; (169b0 <le_phy_update_complete+0x84>)
   169a2:	4660      	mov	r0, ip
   169a4:	f012 fc19 	bl	291da <z_log_msg_finalize>
		return;
   169a8:	e7cb      	b.n	16942 <le_phy_update_complete+0x16>
   169aa:	bf00      	nop
   169ac:	0003245c 	.word	0x0003245c
   169b0:	00031428 	.word	0x00031428

000169b4 <le_data_len_change>:
{
   169b4:	b510      	push	{r4, lr}
   169b6:	b082      	sub	sp, #8
	struct bt_hci_evt_le_data_len_change *evt = (void *)buf->data;
   169b8:	68c3      	ldr	r3, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   169ba:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   169bc:	4620      	mov	r0, r4
   169be:	f002 ffbb 	bl	19938 <bt_conn_lookup_handle>
	if (!conn) {
   169c2:	b118      	cbz	r0, 169cc <le_data_len_change+0x18>
	bt_conn_unref(conn);
   169c4:	f013 fca6 	bl	2a314 <bt_conn_unref>
}
   169c8:	b002      	add	sp, #8
   169ca:	bd10      	pop	{r4, pc}
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   169cc:	2008      	movs	r0, #8
   169ce:	f7fd f99b 	bl	13d08 <z_log_msg_alloc>
   169d2:	2200      	movs	r2, #0
   169d4:	f36f 0200 	bfc	r2, #0, #1
   169d8:	f36f 0241 	bfc	r2, #1, #1
   169dc:	f36f 0282 	bfc	r2, #2, #1
   169e0:	f36f 02c5 	bfc	r2, #3, #3
   169e4:	2301      	movs	r3, #1
   169e6:	f363 1288 	bfi	r2, r3, #6, #3
   169ea:	230c      	movs	r3, #12
   169ec:	f363 2252 	bfi	r2, r3, #9, #10
   169f0:	f36f 42de 	bfc	r2, #19, #12
   169f4:	f36f 72df 	bfc	r2, #31, #1
   169f8:	4684      	mov	ip, r0
   169fa:	b198      	cbz	r0, 16a24 <le_data_len_change+0x70>
   169fc:	f110 0310 	adds.w	r3, r0, #16
   16a00:	d002      	beq.n	16a08 <le_data_len_change+0x54>
   16a02:	490b      	ldr	r1, [pc, #44]	; (16a30 <le_data_len_change+0x7c>)
   16a04:	6141      	str	r1, [r0, #20]
   16a06:	6184      	str	r4, [r0, #24]
   16a08:	b163      	cbz	r3, 16a24 <le_data_len_change+0x70>
   16a0a:	2303      	movs	r3, #3
   16a0c:	f88d 3004 	strb.w	r3, [sp, #4]
   16a10:	2300      	movs	r3, #0
   16a12:	f88d 3005 	strb.w	r3, [sp, #5]
   16a16:	f88d 3006 	strb.w	r3, [sp, #6]
   16a1a:	f88d 3007 	strb.w	r3, [sp, #7]
   16a1e:	9801      	ldr	r0, [sp, #4]
   16a20:	f8cc 0010 	str.w	r0, [ip, #16]
   16a24:	2300      	movs	r3, #0
   16a26:	4903      	ldr	r1, [pc, #12]	; (16a34 <le_data_len_change+0x80>)
   16a28:	4660      	mov	r0, ip
   16a2a:	f012 fbd6 	bl	291da <z_log_msg_finalize>
		return;
   16a2e:	e7cb      	b.n	169c8 <le_data_len_change+0x14>
   16a30:	0003245c 	.word	0x0003245c
   16a34:	00031428 	.word	0x00031428

00016a38 <hci_num_completed_packets>:
{
   16a38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16a3c:	b082      	sub	sp, #8
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   16a3e:	f8d0 800c 	ldr.w	r8, [r0, #12]
	for (i = 0; i < evt->num_handles; i++) {
   16a42:	2600      	movs	r6, #0
   16a44:	e081      	b.n	16b4a <hci_num_completed_packets+0x112>
				conn->pending_no_cb--;
   16a46:	3b01      	subs	r3, #1
   16a48:	61e3      	str	r3, [r4, #28]
   16a4a:	f382 8811 	msr	BASEPRI, r2
   16a4e:	f3bf 8f6f 	isb	sy
				k_sem_give(bt_conn_get_pkts(conn));
   16a52:	4620      	mov	r0, r4
   16a54:	f002 fd0e 	bl	19474 <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   16a58:	f00f fdac 	bl	265b4 <z_impl_k_sem_give>
				continue;
   16a5c:	e025      	b.n	16aaa <hci_num_completed_packets+0x72>
   16a5e:	f382 8811 	msr	BASEPRI, r2
   16a62:	f3bf 8f6f 	isb	sy
			if (!node) {
   16a66:	2b00      	cmp	r3, #0
   16a68:	d03c      	beq.n	16ae4 <hci_num_completed_packets+0xac>
	__asm__ volatile(
   16a6a:	f04f 0140 	mov.w	r1, #64	; 0x40
   16a6e:	f3ef 8211 	mrs	r2, BASEPRI
   16a72:	f381 8812 	msr	BASEPRI_MAX, r1
   16a76:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   16a7a:	68d9      	ldr	r1, [r3, #12]
   16a7c:	61e1      	str	r1, [r4, #28]
			tx->pending_no_cb = 0U;
   16a7e:	2100      	movs	r1, #0
   16a80:	60d9      	str	r1, [r3, #12]
	parent->next = child;
   16a82:	6019      	str	r1, [r3, #0]
	return list->tail;
   16a84:	6a61      	ldr	r1, [r4, #36]	; 0x24
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   16a86:	2900      	cmp	r1, #0
   16a88:	f000 80a0 	beq.w	16bcc <hci_num_completed_packets+0x194>
	parent->next = child;
   16a8c:	600b      	str	r3, [r1, #0]
	list->tail = node;
   16a8e:	6263      	str	r3, [r4, #36]	; 0x24
	__asm__ volatile(
   16a90:	f382 8811 	msr	BASEPRI, r2
   16a94:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   16a98:	f104 0028 	add.w	r0, r4, #40	; 0x28
   16a9c:	f00f ff0c 	bl	268b8 <k_work_submit>
			k_sem_give(bt_conn_get_pkts(conn));
   16aa0:	4620      	mov	r0, r4
   16aa2:	f002 fce7 	bl	19474 <bt_conn_get_pkts>
   16aa6:	f00f fd85 	bl	265b4 <z_impl_k_sem_give>
{
   16aaa:	46aa      	mov	sl, r5
		while (count--) {
   16aac:	f10a 35ff 	add.w	r5, sl, #4294967295
   16ab0:	b2ad      	uxth	r5, r5
   16ab2:	f1ba 0f00 	cmp.w	sl, #0
   16ab6:	d044      	beq.n	16b42 <hci_num_completed_packets+0x10a>
	__asm__ volatile(
   16ab8:	f04f 0240 	mov.w	r2, #64	; 0x40
   16abc:	f3ef 8311 	mrs	r3, BASEPRI
   16ac0:	f382 8812 	msr	BASEPRI_MAX, r2
   16ac4:	f3bf 8f6f 	isb	sy
   16ac8:	461a      	mov	r2, r3
			if (conn->pending_no_cb) {
   16aca:	69e3      	ldr	r3, [r4, #28]
   16acc:	2b00      	cmp	r3, #0
   16ace:	d1ba      	bne.n	16a46 <hci_num_completed_packets+0xe>
	return list->head;
   16ad0:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   16ad2:	2b00      	cmp	r3, #0
   16ad4:	d0c3      	beq.n	16a5e <hci_num_completed_packets+0x26>
	return node->next;
   16ad6:	6819      	ldr	r1, [r3, #0]
	list->head = node;
   16ad8:	6161      	str	r1, [r4, #20]
	return list->tail;
   16ada:	69a0      	ldr	r0, [r4, #24]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   16adc:	4298      	cmp	r0, r3
   16ade:	d1be      	bne.n	16a5e <hci_num_completed_packets+0x26>
	list->tail = node;
   16ae0:	61a1      	str	r1, [r4, #24]
}
   16ae2:	e7bc      	b.n	16a5e <hci_num_completed_packets+0x26>
				LOG_ERR("packets count mismatch");
   16ae4:	2006      	movs	r0, #6
   16ae6:	f7fd f90f 	bl	13d08 <z_log_msg_alloc>
   16aea:	f36f 0700 	bfc	r7, #0, #1
   16aee:	f36f 0741 	bfc	r7, #1, #1
   16af2:	f36f 0782 	bfc	r7, #2, #1
   16af6:	f36f 07c5 	bfc	r7, #3, #3
   16afa:	2301      	movs	r3, #1
   16afc:	f363 1788 	bfi	r7, r3, #6, #3
   16b00:	2308      	movs	r3, #8
   16b02:	f363 2752 	bfi	r7, r3, #9, #10
   16b06:	f36f 47de 	bfc	r7, #19, #12
   16b0a:	f36f 77df 	bfc	r7, #31, #1
   16b0e:	4605      	mov	r5, r0
   16b10:	b188      	cbz	r0, 16b36 <hci_num_completed_packets+0xfe>
   16b12:	f110 0310 	adds.w	r3, r0, #16
   16b16:	d001      	beq.n	16b1c <hci_num_completed_packets+0xe4>
   16b18:	4a2f      	ldr	r2, [pc, #188]	; (16bd8 <hci_num_completed_packets+0x1a0>)
   16b1a:	6142      	str	r2, [r0, #20]
   16b1c:	b15b      	cbz	r3, 16b36 <hci_num_completed_packets+0xfe>
   16b1e:	2302      	movs	r3, #2
   16b20:	f88d 3004 	strb.w	r3, [sp, #4]
   16b24:	2300      	movs	r3, #0
   16b26:	f88d 3005 	strb.w	r3, [sp, #5]
   16b2a:	f88d 3006 	strb.w	r3, [sp, #6]
   16b2e:	f88d 3007 	strb.w	r3, [sp, #7]
   16b32:	9801      	ldr	r0, [sp, #4]
   16b34:	6128      	str	r0, [r5, #16]
   16b36:	2300      	movs	r3, #0
   16b38:	463a      	mov	r2, r7
   16b3a:	4928      	ldr	r1, [pc, #160]	; (16bdc <hci_num_completed_packets+0x1a4>)
   16b3c:	4628      	mov	r0, r5
   16b3e:	f012 fb4c 	bl	291da <z_log_msg_finalize>
		bt_conn_unref(conn);
   16b42:	4620      	mov	r0, r4
   16b44:	f013 fbe6 	bl	2a314 <bt_conn_unref>
	for (i = 0; i < evt->num_handles; i++) {
   16b48:	3601      	adds	r6, #1
   16b4a:	f898 3000 	ldrb.w	r3, [r8]
   16b4e:	429e      	cmp	r6, r3
   16b50:	da3f      	bge.n	16bd2 <hci_num_completed_packets+0x19a>
		handle = sys_le16_to_cpu(evt->h[i].handle);
   16b52:	eb08 0386 	add.w	r3, r8, r6, lsl #2
   16b56:	f8b3 5001 	ldrh.w	r5, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   16b5a:	f8b3 a003 	ldrh.w	sl, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   16b5e:	4628      	mov	r0, r5
   16b60:	f002 feea 	bl	19938 <bt_conn_lookup_handle>
		if (!conn) {
   16b64:	4604      	mov	r4, r0
   16b66:	2800      	cmp	r0, #0
   16b68:	d1a0      	bne.n	16aac <hci_num_completed_packets+0x74>
			LOG_ERR("No connection for handle %u", handle);
   16b6a:	2008      	movs	r0, #8
   16b6c:	f7fd f8cc 	bl	13d08 <z_log_msg_alloc>
   16b70:	f36f 0900 	bfc	r9, #0, #1
   16b74:	f36f 0941 	bfc	r9, #1, #1
   16b78:	f36f 0982 	bfc	r9, #2, #1
   16b7c:	f36f 09c5 	bfc	r9, #3, #3
   16b80:	2301      	movs	r3, #1
   16b82:	f363 1988 	bfi	r9, r3, #6, #3
   16b86:	230c      	movs	r3, #12
   16b88:	f363 2952 	bfi	r9, r3, #9, #10
   16b8c:	f36f 49de 	bfc	r9, #19, #12
   16b90:	f36f 79df 	bfc	r9, #31, #1
   16b94:	4604      	mov	r4, r0
   16b96:	b190      	cbz	r0, 16bbe <hci_num_completed_packets+0x186>
   16b98:	f110 0310 	adds.w	r3, r0, #16
   16b9c:	d002      	beq.n	16ba4 <hci_num_completed_packets+0x16c>
   16b9e:	4a10      	ldr	r2, [pc, #64]	; (16be0 <hci_num_completed_packets+0x1a8>)
   16ba0:	6142      	str	r2, [r0, #20]
   16ba2:	6185      	str	r5, [r0, #24]
   16ba4:	b15b      	cbz	r3, 16bbe <hci_num_completed_packets+0x186>
   16ba6:	2303      	movs	r3, #3
   16ba8:	f88d 3004 	strb.w	r3, [sp, #4]
   16bac:	2300      	movs	r3, #0
   16bae:	f88d 3005 	strb.w	r3, [sp, #5]
   16bb2:	f88d 3006 	strb.w	r3, [sp, #6]
   16bb6:	f88d 3007 	strb.w	r3, [sp, #7]
   16bba:	9801      	ldr	r0, [sp, #4]
   16bbc:	6120      	str	r0, [r4, #16]
   16bbe:	2300      	movs	r3, #0
   16bc0:	464a      	mov	r2, r9
   16bc2:	4906      	ldr	r1, [pc, #24]	; (16bdc <hci_num_completed_packets+0x1a4>)
   16bc4:	4620      	mov	r0, r4
   16bc6:	f012 fb08 	bl	291da <z_log_msg_finalize>
			continue;
   16bca:	e7bd      	b.n	16b48 <hci_num_completed_packets+0x110>
	list->tail = node;
   16bcc:	6263      	str	r3, [r4, #36]	; 0x24
	list->head = node;
   16bce:	6223      	str	r3, [r4, #32]
}
   16bd0:	e75e      	b.n	16a90 <hci_num_completed_packets+0x58>
}
   16bd2:	b002      	add	sp, #8
   16bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16bd8:	0003249c 	.word	0x0003249c
   16bdc:	00031428 	.word	0x00031428
   16be0:	00032480 	.word	0x00032480

00016be4 <hci_cmd_done>:
{
   16be4:	b5f0      	push	{r4, r5, r6, r7, lr}
   16be6:	b083      	sub	sp, #12
   16be8:	4605      	mov	r5, r0
   16bea:	460e      	mov	r6, r1
   16bec:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   16bee:	7a90      	ldrb	r0, [r2, #10]
   16bf0:	f007 fd46 	bl	1e680 <net_buf_pool_get>
   16bf4:	4b62      	ldr	r3, [pc, #392]	; (16d80 <hci_cmd_done+0x19c>)
   16bf6:	4283      	cmp	r3, r0
   16bf8:	d03a      	beq.n	16c70 <hci_cmd_done+0x8c>
		LOG_WRN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p", opcode,
   16bfa:	7aa6      	ldrb	r6, [r4, #10]
   16bfc:	4630      	mov	r0, r6
   16bfe:	f007 fd3f 	bl	1e680 <net_buf_pool_get>
   16c02:	4607      	mov	r7, r0
   16c04:	200a      	movs	r0, #10
   16c06:	f7fd f87f 	bl	13d08 <z_log_msg_alloc>
   16c0a:	2200      	movs	r2, #0
   16c0c:	f36f 0200 	bfc	r2, #0, #1
   16c10:	f36f 0241 	bfc	r2, #1, #1
   16c14:	f36f 0282 	bfc	r2, #2, #1
   16c18:	f36f 02c5 	bfc	r2, #3, #3
   16c1c:	2302      	movs	r3, #2
   16c1e:	f363 1288 	bfi	r2, r3, #6, #3
   16c22:	2318      	movs	r3, #24
   16c24:	f363 2252 	bfi	r2, r3, #9, #10
   16c28:	f36f 42de 	bfc	r2, #19, #12
   16c2c:	f36f 72df 	bfc	r2, #31, #1
   16c30:	4604      	mov	r4, r0
   16c32:	b1b0      	cbz	r0, 16c62 <hci_cmd_done+0x7e>
   16c34:	f110 0310 	adds.w	r3, r0, #16
   16c38:	d006      	beq.n	16c48 <hci_cmd_done+0x64>
   16c3a:	4952      	ldr	r1, [pc, #328]	; (16d84 <hci_cmd_done+0x1a0>)
   16c3c:	6141      	str	r1, [r0, #20]
   16c3e:	6185      	str	r5, [r0, #24]
   16c40:	61c6      	str	r6, [r0, #28]
   16c42:	6207      	str	r7, [r0, #32]
   16c44:	494e      	ldr	r1, [pc, #312]	; (16d80 <hci_cmd_done+0x19c>)
   16c46:	6241      	str	r1, [r0, #36]	; 0x24
   16c48:	b15b      	cbz	r3, 16c62 <hci_cmd_done+0x7e>
   16c4a:	2306      	movs	r3, #6
   16c4c:	f88d 3004 	strb.w	r3, [sp, #4]
   16c50:	2300      	movs	r3, #0
   16c52:	f88d 3005 	strb.w	r3, [sp, #5]
   16c56:	f88d 3006 	strb.w	r3, [sp, #6]
   16c5a:	f88d 3007 	strb.w	r3, [sp, #7]
   16c5e:	9801      	ldr	r0, [sp, #4]
   16c60:	6120      	str	r0, [r4, #16]
   16c62:	2300      	movs	r3, #0
   16c64:	4948      	ldr	r1, [pc, #288]	; (16d88 <hci_cmd_done+0x1a4>)
   16c66:	4620      	mov	r0, r4
   16c68:	f012 fab7 	bl	291da <z_log_msg_finalize>
}
   16c6c:	b003      	add	sp, #12
   16c6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (cmd(buf)->opcode != opcode) {
   16c70:	4620      	mov	r0, r4
   16c72:	f015 fbd4 	bl	2c41e <net_buf_id>
   16c76:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   16c7a:	4b44      	ldr	r3, [pc, #272]	; (16d8c <hci_cmd_done+0x1a8>)
   16c7c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   16c80:	885b      	ldrh	r3, [r3, #2]
   16c82:	429d      	cmp	r5, r3
   16c84:	d133      	bne.n	16cee <hci_cmd_done+0x10a>
	if (bt_dev.sent_cmd) {
   16c86:	4b42      	ldr	r3, [pc, #264]	; (16d90 <hci_cmd_done+0x1ac>)
   16c88:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
   16c8c:	b128      	cbz	r0, 16c9a <hci_cmd_done+0xb6>
		net_buf_unref(bt_dev.sent_cmd);
   16c8e:	f015 fcb0 	bl	2c5f2 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   16c92:	4b3f      	ldr	r3, [pc, #252]	; (16d90 <hci_cmd_done+0x1ac>)
   16c94:	2200      	movs	r2, #0
   16c96:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	if (cmd(buf)->state && !status) {
   16c9a:	4620      	mov	r0, r4
   16c9c:	f015 fbbf 	bl	2c41e <net_buf_id>
   16ca0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   16ca4:	4b39      	ldr	r3, [pc, #228]	; (16d8c <hci_cmd_done+0x1a8>)
   16ca6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   16caa:	685b      	ldr	r3, [r3, #4]
   16cac:	b10b      	cbz	r3, 16cb2 <hci_cmd_done+0xce>
   16cae:	2e00      	cmp	r6, #0
   16cb0:	d057      	beq.n	16d62 <hci_cmd_done+0x17e>
	if (cmd(buf)->sync) {
   16cb2:	4620      	mov	r0, r4
   16cb4:	f015 fbb3 	bl	2c41e <net_buf_id>
   16cb8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   16cbc:	4b33      	ldr	r3, [pc, #204]	; (16d8c <hci_cmd_done+0x1a8>)
   16cbe:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   16cc2:	689b      	ldr	r3, [r3, #8]
   16cc4:	2b00      	cmp	r3, #0
   16cc6:	d0d1      	beq.n	16c6c <hci_cmd_done+0x88>
		cmd(buf)->status = status;
   16cc8:	4620      	mov	r0, r4
   16cca:	f015 fba8 	bl	2c41e <net_buf_id>
   16cce:	4d2f      	ldr	r5, [pc, #188]	; (16d8c <hci_cmd_done+0x1a8>)
   16cd0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   16cd4:	f805 6020 	strb.w	r6, [r5, r0, lsl #2]
		k_sem_give(cmd(buf)->sync);
   16cd8:	4620      	mov	r0, r4
   16cda:	f015 fba0 	bl	2c41e <net_buf_id>
   16cde:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   16ce2:	eb05 0580 	add.w	r5, r5, r0, lsl #2
   16ce6:	68a8      	ldr	r0, [r5, #8]
   16ce8:	f00f fc64 	bl	265b4 <z_impl_k_sem_give>
}
   16cec:	e7be      	b.n	16c6c <hci_cmd_done+0x88>
		LOG_WRN("OpCode 0x%04x completed instead of expected 0x%04x", opcode,
   16cee:	4620      	mov	r0, r4
   16cf0:	f015 fb95 	bl	2c41e <net_buf_id>
   16cf4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   16cf8:	4b24      	ldr	r3, [pc, #144]	; (16d8c <hci_cmd_done+0x1a8>)
   16cfa:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   16cfe:	885e      	ldrh	r6, [r3, #2]
   16d00:	2008      	movs	r0, #8
   16d02:	f7fd f801 	bl	13d08 <z_log_msg_alloc>
   16d06:	2200      	movs	r2, #0
   16d08:	f36f 0200 	bfc	r2, #0, #1
   16d0c:	f36f 0241 	bfc	r2, #1, #1
   16d10:	f36f 0282 	bfc	r2, #2, #1
   16d14:	f36f 02c5 	bfc	r2, #3, #3
   16d18:	2302      	movs	r3, #2
   16d1a:	f363 1288 	bfi	r2, r3, #6, #3
   16d1e:	2310      	movs	r3, #16
   16d20:	f363 2252 	bfi	r2, r3, #9, #10
   16d24:	f36f 42de 	bfc	r2, #19, #12
   16d28:	f36f 72df 	bfc	r2, #31, #1
   16d2c:	4604      	mov	r4, r0
   16d2e:	b190      	cbz	r0, 16d56 <hci_cmd_done+0x172>
   16d30:	18c3      	adds	r3, r0, r3
   16d32:	d003      	beq.n	16d3c <hci_cmd_done+0x158>
   16d34:	4917      	ldr	r1, [pc, #92]	; (16d94 <hci_cmd_done+0x1b0>)
   16d36:	6141      	str	r1, [r0, #20]
   16d38:	6185      	str	r5, [r0, #24]
   16d3a:	61c6      	str	r6, [r0, #28]
   16d3c:	b15b      	cbz	r3, 16d56 <hci_cmd_done+0x172>
   16d3e:	2304      	movs	r3, #4
   16d40:	f88d 3004 	strb.w	r3, [sp, #4]
   16d44:	2300      	movs	r3, #0
   16d46:	f88d 3005 	strb.w	r3, [sp, #5]
   16d4a:	f88d 3006 	strb.w	r3, [sp, #6]
   16d4e:	f88d 3007 	strb.w	r3, [sp, #7]
   16d52:	9801      	ldr	r0, [sp, #4]
   16d54:	6120      	str	r0, [r4, #16]
   16d56:	2300      	movs	r3, #0
   16d58:	490b      	ldr	r1, [pc, #44]	; (16d88 <hci_cmd_done+0x1a4>)
   16d5a:	4620      	mov	r0, r4
   16d5c:	f012 fa3d 	bl	291da <z_log_msg_finalize>
		return;
   16d60:	e784      	b.n	16c6c <hci_cmd_done+0x88>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   16d62:	4620      	mov	r0, r4
   16d64:	f015 fb5b 	bl	2c41e <net_buf_id>
   16d68:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   16d6c:	4b07      	ldr	r3, [pc, #28]	; (16d8c <hci_cmd_done+0x1a8>)
   16d6e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   16d72:	685b      	ldr	r3, [r3, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   16d74:	7a1a      	ldrb	r2, [r3, #8]
   16d76:	6859      	ldr	r1, [r3, #4]
   16d78:	6818      	ldr	r0, [r3, #0]
   16d7a:	f013 f858 	bl	29e2e <atomic_set_bit_to>
   16d7e:	e798      	b.n	16cb2 <hci_cmd_done+0xce>
   16d80:	20000bb4 	.word	0x20000bb4
   16d84:	000324b4 	.word	0x000324b4
   16d88:	00031428 	.word	0x00031428
   16d8c:	20007ce4 	.word	0x20007ce4
   16d90:	20000370 	.word	0x20000370
   16d94:	000324ec 	.word	0x000324ec

00016d98 <le_remote_feat_complete>:
{
   16d98:	b570      	push	{r4, r5, r6, lr}
   16d9a:	b082      	sub	sp, #8
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   16d9c:	68c4      	ldr	r4, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   16d9e:	f8b4 6001 	ldrh.w	r6, [r4, #1]
	conn = bt_conn_lookup_handle(handle);
   16da2:	4630      	mov	r0, r6
   16da4:	f002 fdc8 	bl	19938 <bt_conn_lookup_handle>
	if (!conn) {
   16da8:	b1a8      	cbz	r0, 16dd6 <le_remote_feat_complete+0x3e>
   16daa:	4605      	mov	r5, r0
	if (!evt->status) {
   16dac:	7823      	ldrb	r3, [r4, #0]
   16dae:	2b00      	cmp	r3, #0
   16db0:	d042      	beq.n	16e38 <le_remote_feat_complete+0xa0>
	atomic_set_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH);
   16db2:	1d2b      	adds	r3, r5, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16db4:	f3bf 8f5b 	dmb	ish
   16db8:	e853 1f00 	ldrex	r1, [r3]
   16dbc:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   16dc0:	e843 1200 	strex	r2, r1, [r3]
   16dc4:	2a00      	cmp	r2, #0
   16dc6:	d1f7      	bne.n	16db8 <le_remote_feat_complete+0x20>
   16dc8:	f3bf 8f5b 	dmb	ish
	bt_conn_unref(conn);
   16dcc:	4628      	mov	r0, r5
   16dce:	f013 faa1 	bl	2a314 <bt_conn_unref>
}
   16dd2:	b002      	add	sp, #8
   16dd4:	bd70      	pop	{r4, r5, r6, pc}
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   16dd6:	2008      	movs	r0, #8
   16dd8:	f7fc ff96 	bl	13d08 <z_log_msg_alloc>
   16ddc:	2200      	movs	r2, #0
   16dde:	f36f 0200 	bfc	r2, #0, #1
   16de2:	f36f 0241 	bfc	r2, #1, #1
   16de6:	f36f 0282 	bfc	r2, #2, #1
   16dea:	f36f 02c5 	bfc	r2, #3, #3
   16dee:	2301      	movs	r3, #1
   16df0:	f363 1288 	bfi	r2, r3, #6, #3
   16df4:	230c      	movs	r3, #12
   16df6:	f363 2252 	bfi	r2, r3, #9, #10
   16dfa:	f36f 42de 	bfc	r2, #19, #12
   16dfe:	f36f 72df 	bfc	r2, #31, #1
   16e02:	4604      	mov	r4, r0
   16e04:	b190      	cbz	r0, 16e2c <le_remote_feat_complete+0x94>
   16e06:	f110 0310 	adds.w	r3, r0, #16
   16e0a:	d002      	beq.n	16e12 <le_remote_feat_complete+0x7a>
   16e0c:	490d      	ldr	r1, [pc, #52]	; (16e44 <le_remote_feat_complete+0xac>)
   16e0e:	6141      	str	r1, [r0, #20]
   16e10:	6186      	str	r6, [r0, #24]
   16e12:	b15b      	cbz	r3, 16e2c <le_remote_feat_complete+0x94>
   16e14:	2303      	movs	r3, #3
   16e16:	f88d 3004 	strb.w	r3, [sp, #4]
   16e1a:	2300      	movs	r3, #0
   16e1c:	f88d 3005 	strb.w	r3, [sp, #5]
   16e20:	f88d 3006 	strb.w	r3, [sp, #6]
   16e24:	f88d 3007 	strb.w	r3, [sp, #7]
   16e28:	9801      	ldr	r0, [sp, #4]
   16e2a:	6120      	str	r0, [r4, #16]
   16e2c:	2300      	movs	r3, #0
   16e2e:	4906      	ldr	r1, [pc, #24]	; (16e48 <le_remote_feat_complete+0xb0>)
   16e30:	4620      	mov	r0, r4
   16e32:	f012 f9d2 	bl	291da <z_log_msg_finalize>
		return;
   16e36:	e7cc      	b.n	16dd2 <le_remote_feat_complete+0x3a>
		memcpy(conn->le.features, evt->features,
   16e38:	2208      	movs	r2, #8
   16e3a:	1ce1      	adds	r1, r4, #3
   16e3c:	30ac      	adds	r0, #172	; 0xac
   16e3e:	f012 feb8 	bl	29bb2 <memcpy>
   16e42:	e7b6      	b.n	16db2 <le_remote_feat_complete+0x1a>
   16e44:	0003245c 	.word	0x0003245c
   16e48:	00031428 	.word	0x00031428

00016e4c <hci_cmd_status>:
{
   16e4c:	b538      	push	{r3, r4, r5, lr}
   16e4e:	4604      	mov	r4, r0
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   16e50:	2104      	movs	r1, #4
   16e52:	300c      	adds	r0, #12
   16e54:	f015 fc3e 	bl	2c6d4 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   16e58:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   16e5a:	4622      	mov	r2, r4
   16e5c:	7801      	ldrb	r1, [r0, #0]
   16e5e:	8840      	ldrh	r0, [r0, #2]
   16e60:	f7ff fec0 	bl	16be4 <hci_cmd_done>
	if (ncmd) {
   16e64:	b905      	cbnz	r5, 16e68 <hci_cmd_status+0x1c>
}
   16e66:	bd38      	pop	{r3, r4, r5, pc}
	z_impl_k_sem_give(sem);
   16e68:	4801      	ldr	r0, [pc, #4]	; (16e70 <hci_cmd_status+0x24>)
   16e6a:	f00f fba3 	bl	265b4 <z_impl_k_sem_give>
   16e6e:	e7fa      	b.n	16e66 <hci_cmd_status+0x1a>
   16e70:	20000488 	.word	0x20000488

00016e74 <hci_cmd_complete>:
{
   16e74:	b538      	push	{r3, r4, r5, lr}
   16e76:	4604      	mov	r4, r0
   16e78:	2103      	movs	r1, #3
   16e7a:	300c      	adds	r0, #12
   16e7c:	f015 fc2a 	bl	2c6d4 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   16e80:	7805      	ldrb	r5, [r0, #0]
	status = buf->data[0];
   16e82:	68e3      	ldr	r3, [r4, #12]
	hci_cmd_done(opcode, status, buf);
   16e84:	4622      	mov	r2, r4
   16e86:	7819      	ldrb	r1, [r3, #0]
   16e88:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   16e8c:	f7ff feaa 	bl	16be4 <hci_cmd_done>
	if (ncmd) {
   16e90:	b905      	cbnz	r5, 16e94 <hci_cmd_complete+0x20>
}
   16e92:	bd38      	pop	{r3, r4, r5, pc}
   16e94:	4801      	ldr	r0, [pc, #4]	; (16e9c <hci_cmd_complete+0x28>)
   16e96:	f00f fb8d 	bl	265b4 <z_impl_k_sem_give>
   16e9a:	e7fa      	b.n	16e92 <hci_cmd_complete+0x1e>
   16e9c:	20000488 	.word	0x20000488

00016ea0 <hci_hardware_error>:
{
   16ea0:	b510      	push	{r4, lr}
   16ea2:	b082      	sub	sp, #8
   16ea4:	2101      	movs	r1, #1
   16ea6:	300c      	adds	r0, #12
   16ea8:	f015 fc14 	bl	2c6d4 <net_buf_simple_pull_mem>
	LOG_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   16eac:	7804      	ldrb	r4, [r0, #0]
   16eae:	2008      	movs	r0, #8
   16eb0:	f7fc ff2a 	bl	13d08 <z_log_msg_alloc>
   16eb4:	2200      	movs	r2, #0
   16eb6:	f36f 0200 	bfc	r2, #0, #1
   16eba:	f36f 0241 	bfc	r2, #1, #1
   16ebe:	f36f 0282 	bfc	r2, #2, #1
   16ec2:	f36f 02c5 	bfc	r2, #3, #3
   16ec6:	2301      	movs	r3, #1
   16ec8:	f363 1288 	bfi	r2, r3, #6, #3
   16ecc:	230c      	movs	r3, #12
   16ece:	f363 2252 	bfi	r2, r3, #9, #10
   16ed2:	f36f 42de 	bfc	r2, #19, #12
   16ed6:	f36f 72df 	bfc	r2, #31, #1
   16eda:	4684      	mov	ip, r0
   16edc:	b198      	cbz	r0, 16f06 <hci_hardware_error+0x66>
   16ede:	f110 0310 	adds.w	r3, r0, #16
   16ee2:	d002      	beq.n	16eea <hci_hardware_error+0x4a>
   16ee4:	490b      	ldr	r1, [pc, #44]	; (16f14 <hci_hardware_error+0x74>)
   16ee6:	6141      	str	r1, [r0, #20]
   16ee8:	6184      	str	r4, [r0, #24]
   16eea:	b163      	cbz	r3, 16f06 <hci_hardware_error+0x66>
   16eec:	2303      	movs	r3, #3
   16eee:	f88d 3004 	strb.w	r3, [sp, #4]
   16ef2:	2300      	movs	r3, #0
   16ef4:	f88d 3005 	strb.w	r3, [sp, #5]
   16ef8:	f88d 3006 	strb.w	r3, [sp, #6]
   16efc:	f88d 3007 	strb.w	r3, [sp, #7]
   16f00:	9801      	ldr	r0, [sp, #4]
   16f02:	f8cc 0010 	str.w	r0, [ip, #16]
   16f06:	2300      	movs	r3, #0
   16f08:	4903      	ldr	r1, [pc, #12]	; (16f18 <hci_hardware_error+0x78>)
   16f0a:	4660      	mov	r0, ip
   16f0c:	f012 f965 	bl	291da <z_log_msg_finalize>
}
   16f10:	b002      	add	sp, #8
   16f12:	bd10      	pop	{r4, pc}
   16f14:	00032520 	.word	0x00032520
   16f18:	00031428 	.word	0x00031428

00016f1c <handle_event>:
{
   16f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16f20:	b082      	sub	sp, #8
   16f22:	af00      	add	r7, sp, #0
   16f24:	4605      	mov	r5, r0
   16f26:	460c      	mov	r4, r1
	err = handle_event_common(event, buf, handlers, num_handlers);
   16f28:	f7ff fbe0 	bl	166ec <handle_event_common>
	if (err == -EOPNOTSUPP) {
   16f2c:	f110 0f5f 	cmn.w	r0, #95	; 0x5f
   16f30:	d003      	beq.n	16f3a <handle_event+0x1e>
}
   16f32:	3708      	adds	r7, #8
   16f34:	46bd      	mov	sp, r7
   16f36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   16f3a:	f8b4 8010 	ldrh.w	r8, [r4, #16]
   16f3e:	4641      	mov	r1, r8
   16f40:	68e0      	ldr	r0, [r4, #12]
   16f42:	f7ff fa4f 	bl	163e4 <bt_hex>
   16f46:	466e      	mov	r6, sp
   16f48:	2302      	movs	r3, #2
   16f4a:	713b      	strb	r3, [r7, #4]
   16f4c:	2304      	movs	r3, #4
   16f4e:	717b      	strb	r3, [r7, #5]
   16f50:	b08a      	sub	sp, #40	; 0x28
   16f52:	466c      	mov	r4, sp
   16f54:	f114 0210 	adds.w	r2, r4, #16
   16f58:	d01c      	beq.n	16f94 <handle_event+0x78>
   16f5a:	f04f 0c16 	mov.w	ip, #22
   16f5e:	b162      	cbz	r2, 16f7a <handle_event+0x5e>
   16f60:	4663      	mov	r3, ip
   16f62:	f1bc 0f04 	cmp.w	ip, #4
   16f66:	dd01      	ble.n	16f6c <handle_event+0x50>
   16f68:	4926      	ldr	r1, [pc, #152]	; (17004 <handle_event+0xe8>)
   16f6a:	6161      	str	r1, [r4, #20]
   16f6c:	2b08      	cmp	r3, #8
   16f6e:	dd00      	ble.n	16f72 <handle_event+0x56>
   16f70:	61a5      	str	r5, [r4, #24]
   16f72:	2b0c      	cmp	r3, #12
   16f74:	dd01      	ble.n	16f7a <handle_event+0x5e>
   16f76:	f8c4 801c 	str.w	r8, [r4, #28]
   16f7a:	2302      	movs	r3, #2
   16f7c:	703b      	strb	r3, [r7, #0]
   16f7e:	2304      	movs	r3, #4
   16f80:	707b      	strb	r3, [r7, #1]
   16f82:	b1a2      	cbz	r2, 16fae <handle_event+0x92>
   16f84:	f1bc 0f10 	cmp.w	ip, #16
   16f88:	dd00      	ble.n	16f8c <handle_event+0x70>
   16f8a:	6220      	str	r0, [r4, #32]
   16f8c:	f104 0324 	add.w	r3, r4, #36	; 0x24
   16f90:	2100      	movs	r1, #0
   16f92:	e00a      	b.n	16faa <handle_event+0x8e>
   16f94:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
   16f98:	e7e1      	b.n	16f5e <handle_event+0x42>
   16f9a:	f101 0008 	add.w	r0, r1, #8
   16f9e:	4438      	add	r0, r7
   16fa0:	f810 0c08 	ldrb.w	r0, [r0, #-8]
   16fa4:	f803 0b01 	strb.w	r0, [r3], #1
   16fa8:	3101      	adds	r1, #1
   16faa:	2901      	cmp	r1, #1
   16fac:	d9f5      	bls.n	16f9a <handle_event+0x7e>
   16fae:	f1bc 0f15 	cmp.w	ip, #21
   16fb2:	dd24      	ble.n	16ffe <handle_event+0xe2>
   16fb4:	2316      	movs	r3, #22
   16fb6:	b142      	cbz	r2, 16fca <handle_event+0xae>
   16fb8:	2105      	movs	r1, #5
   16fba:	7139      	strb	r1, [r7, #4]
   16fbc:	2100      	movs	r1, #0
   16fbe:	7179      	strb	r1, [r7, #5]
   16fc0:	71b9      	strb	r1, [r7, #6]
   16fc2:	2101      	movs	r1, #1
   16fc4:	71f9      	strb	r1, [r7, #7]
   16fc6:	6878      	ldr	r0, [r7, #4]
   16fc8:	6120      	str	r0, [r4, #16]
   16fca:	2100      	movs	r1, #0
   16fcc:	f36f 0100 	bfc	r1, #0, #1
   16fd0:	f36f 0141 	bfc	r1, #1, #1
   16fd4:	f36f 0182 	bfc	r1, #2, #1
   16fd8:	f36f 01c5 	bfc	r1, #3, #3
   16fdc:	2002      	movs	r0, #2
   16fde:	f360 1188 	bfi	r1, r0, #6, #3
   16fe2:	f3c3 0309 	ubfx	r3, r3, #0, #10
   16fe6:	f363 2152 	bfi	r1, r3, #9, #10
   16fea:	f36f 41de 	bfc	r1, #19, #12
   16fee:	f36f 71df 	bfc	r1, #31, #1
   16ff2:	2300      	movs	r3, #0
   16ff4:	4804      	ldr	r0, [pc, #16]	; (17008 <handle_event+0xec>)
   16ff6:	f012 f908 	bl	2920a <z_impl_z_log_msg_static_create>
   16ffa:	46b5      	mov	sp, r6
}
   16ffc:	e799      	b.n	16f32 <handle_event+0x16>
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   16ffe:	f06f 031b 	mvn.w	r3, #27
   17002:	e7d8      	b.n	16fb6 <handle_event+0x9a>
   17004:	00032544 	.word	0x00032544
   17008:	00031428 	.word	0x00031428

0001700c <hci_event>:
{
   1700c:	b538      	push	{r3, r4, r5, lr}
   1700e:	4604      	mov	r4, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
   17010:	8a03      	ldrh	r3, [r0, #16]
   17012:	2b01      	cmp	r3, #1
   17014:	d915      	bls.n	17042 <hci_event+0x36>
   17016:	2102      	movs	r1, #2
   17018:	f104 000c 	add.w	r0, r4, #12
   1701c:	f015 fb5a 	bl	2c6d4 <net_buf_simple_pull_mem>
   17020:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   17022:	7800      	ldrb	r0, [r0, #0]
   17024:	f012 fec6 	bl	29db4 <bt_hci_evt_get_flags>
   17028:	f010 0f02 	tst.w	r0, #2
   1702c:	d017      	beq.n	1705e <hci_event+0x52>
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   1702e:	2304      	movs	r3, #4
   17030:	4a12      	ldr	r2, [pc, #72]	; (1707c <hci_event+0x70>)
   17032:	4621      	mov	r1, r4
   17034:	7828      	ldrb	r0, [r5, #0]
   17036:	f7ff ff71 	bl	16f1c <handle_event>
	net_buf_unref(buf);
   1703a:	4620      	mov	r0, r4
   1703c:	f015 fad9 	bl	2c5f2 <net_buf_unref>
}
   17040:	bd38      	pop	{r3, r4, r5, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   17042:	f640 136d 	movw	r3, #2413	; 0x96d
   17046:	4a0e      	ldr	r2, [pc, #56]	; (17080 <hci_event+0x74>)
   17048:	490e      	ldr	r1, [pc, #56]	; (17084 <hci_event+0x78>)
   1704a:	480f      	ldr	r0, [pc, #60]	; (17088 <hci_event+0x7c>)
   1704c:	f011 fdc4 	bl	28bd8 <assert_print>
   17050:	4040      	eors	r0, r0
   17052:	f380 8811 	msr	BASEPRI, r0
   17056:	f04f 0003 	mov.w	r0, #3
   1705a:	df02      	svc	2
   1705c:	e7db      	b.n	17016 <hci_event+0xa>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   1705e:	f640 1371 	movw	r3, #2417	; 0x971
   17062:	4a07      	ldr	r2, [pc, #28]	; (17080 <hci_event+0x74>)
   17064:	4909      	ldr	r1, [pc, #36]	; (1708c <hci_event+0x80>)
   17066:	4808      	ldr	r0, [pc, #32]	; (17088 <hci_event+0x7c>)
   17068:	f011 fdb6 	bl	28bd8 <assert_print>
   1706c:	4040      	eors	r0, r0
   1706e:	f380 8811 	msr	BASEPRI, r0
   17072:	f04f 0003 	mov.w	r0, #3
   17076:	df02      	svc	2
   17078:	e7d9      	b.n	1702e <hci_event+0x22>
   1707a:	bf00      	nop
   1707c:	00032908 	.word	0x00032908
   17080:	00032568 	.word	0x00032568
   17084:	0003259c 	.word	0x0003259c
   17088:	000325b8 	.word	0x000325b8
   1708c:	000325d8 	.word	0x000325d8

00017090 <hci_le_meta_event>:
{
   17090:	b510      	push	{r4, lr}
   17092:	4604      	mov	r4, r0
   17094:	2101      	movs	r1, #1
   17096:	300c      	adds	r0, #12
   17098:	f015 fb1c 	bl	2c6d4 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   1709c:	2308      	movs	r3, #8
   1709e:	4a03      	ldr	r2, [pc, #12]	; (170ac <hci_le_meta_event+0x1c>)
   170a0:	4621      	mov	r1, r4
   170a2:	7800      	ldrb	r0, [r0, #0]
   170a4:	f7ff ff3a 	bl	16f1c <handle_event>
}
   170a8:	bd10      	pop	{r4, pc}
   170aa:	bf00      	nop
   170ac:	00032928 	.word	0x00032928

000170b0 <rx_queue_put>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_queue_put(struct net_buf *buf)
{
   170b0:	b510      	push	{r4, lr}
   170b2:	b082      	sub	sp, #8
   170b4:	4601      	mov	r1, r0
	net_buf_slist_put(&bt_dev.rx_queue, buf);
   170b6:	481e      	ldr	r0, [pc, #120]	; (17130 <rx_queue_put+0x80>)
   170b8:	f015 fa69 	bl	2c58e <net_buf_slist_put>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
	const int err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
   170bc:	491d      	ldr	r1, [pc, #116]	; (17134 <rx_queue_put+0x84>)
   170be:	481e      	ldr	r0, [pc, #120]	; (17138 <rx_queue_put+0x88>)
   170c0:	f019 faf2 	bl	306a8 <k_work_submit_to_queue>
#endif /* CONFIG_BT_RECV_WORKQ_SYS */
	if (err < 0) {
   170c4:	1e04      	subs	r4, r0, #0
   170c6:	db01      	blt.n	170cc <rx_queue_put+0x1c>
		LOG_ERR("Could not submit rx_work: %d", err);
	}
}
   170c8:	b002      	add	sp, #8
   170ca:	bd10      	pop	{r4, pc}
		LOG_ERR("Could not submit rx_work: %d", err);
   170cc:	2008      	movs	r0, #8
   170ce:	f7fc fe1b 	bl	13d08 <z_log_msg_alloc>
   170d2:	2200      	movs	r2, #0
   170d4:	f36f 0200 	bfc	r2, #0, #1
   170d8:	f36f 0241 	bfc	r2, #1, #1
   170dc:	f36f 0282 	bfc	r2, #2, #1
   170e0:	f36f 02c5 	bfc	r2, #3, #3
   170e4:	2301      	movs	r3, #1
   170e6:	f363 1288 	bfi	r2, r3, #6, #3
   170ea:	230c      	movs	r3, #12
   170ec:	f363 2252 	bfi	r2, r3, #9, #10
   170f0:	f36f 42de 	bfc	r2, #19, #12
   170f4:	f36f 72df 	bfc	r2, #31, #1
   170f8:	4684      	mov	ip, r0
   170fa:	b198      	cbz	r0, 17124 <rx_queue_put+0x74>
   170fc:	f110 0310 	adds.w	r3, r0, #16
   17100:	d002      	beq.n	17108 <rx_queue_put+0x58>
   17102:	490e      	ldr	r1, [pc, #56]	; (1713c <rx_queue_put+0x8c>)
   17104:	6141      	str	r1, [r0, #20]
   17106:	6184      	str	r4, [r0, #24]
   17108:	b163      	cbz	r3, 17124 <rx_queue_put+0x74>
   1710a:	2303      	movs	r3, #3
   1710c:	f88d 3004 	strb.w	r3, [sp, #4]
   17110:	2300      	movs	r3, #0
   17112:	f88d 3005 	strb.w	r3, [sp, #5]
   17116:	f88d 3006 	strb.w	r3, [sp, #6]
   1711a:	f88d 3007 	strb.w	r3, [sp, #7]
   1711e:	9801      	ldr	r0, [sp, #4]
   17120:	f8cc 0010 	str.w	r0, [ip, #16]
   17124:	2300      	movs	r3, #0
   17126:	4906      	ldr	r1, [pc, #24]	; (17140 <rx_queue_put+0x90>)
   17128:	4660      	mov	r0, ip
   1712a:	f012 f856 	bl	291da <z_log_msg_finalize>
}
   1712e:	e7cb      	b.n	170c8 <rx_queue_put+0x18>
   17130:	200004a4 	.word	0x200004a4
   17134:	20000684 	.word	0x20000684
   17138:	20002020 	.word	0x20002020
   1713c:	00032608 	.word	0x00032608
   17140:	00031428 	.word	0x00031428

00017144 <hci_acl>:
{
   17144:	b5f0      	push	{r4, r5, r6, r7, lr}
   17146:	b083      	sub	sp, #12
   17148:	4604      	mov	r4, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
   1714a:	8a03      	ldrh	r3, [r0, #16]
   1714c:	2b03      	cmp	r3, #3
   1714e:	d945      	bls.n	171dc <hci_acl+0x98>
   17150:	2104      	movs	r1, #4
   17152:	f104 000c 	add.w	r0, r4, #12
   17156:	f015 fabd 	bl	2c6d4 <net_buf_simple_pull_mem>
	len = sys_le16_to_cpu(hdr->len);
   1715a:	8845      	ldrh	r5, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   1715c:	8800      	ldrh	r0, [r0, #0]
	flags = bt_acl_flags(handle);
   1715e:	0b07      	lsrs	r7, r0, #12
	acl(buf)->handle = bt_acl_handle(handle);
   17160:	f3c0 000b 	ubfx	r0, r0, #0, #12
   17164:	8360      	strh	r0, [r4, #26]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   17166:	23ff      	movs	r3, #255	; 0xff
   17168:	7663      	strb	r3, [r4, #25]
	if (buf->len != len) {
   1716a:	8a26      	ldrh	r6, [r4, #16]
   1716c:	42ae      	cmp	r6, r5
   1716e:	d043      	beq.n	171f8 <hci_acl+0xb4>
		LOG_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   17170:	2008      	movs	r0, #8
   17172:	f7fc fdc9 	bl	13d08 <z_log_msg_alloc>
   17176:	2200      	movs	r2, #0
   17178:	f36f 0200 	bfc	r2, #0, #1
   1717c:	f36f 0241 	bfc	r2, #1, #1
   17180:	f36f 0282 	bfc	r2, #2, #1
   17184:	f36f 02c5 	bfc	r2, #3, #3
   17188:	2301      	movs	r3, #1
   1718a:	f363 1288 	bfi	r2, r3, #6, #3
   1718e:	2310      	movs	r3, #16
   17190:	f363 2252 	bfi	r2, r3, #9, #10
   17194:	f36f 42de 	bfc	r2, #19, #12
   17198:	f36f 72df 	bfc	r2, #31, #1
   1719c:	4684      	mov	ip, r0
   1719e:	b198      	cbz	r0, 171c8 <hci_acl+0x84>
   171a0:	18c3      	adds	r3, r0, r3
   171a2:	d003      	beq.n	171ac <hci_acl+0x68>
   171a4:	4937      	ldr	r1, [pc, #220]	; (17284 <hci_acl+0x140>)
   171a6:	6141      	str	r1, [r0, #20]
   171a8:	6186      	str	r6, [r0, #24]
   171aa:	61c5      	str	r5, [r0, #28]
   171ac:	b163      	cbz	r3, 171c8 <hci_acl+0x84>
   171ae:	2304      	movs	r3, #4
   171b0:	f88d 3004 	strb.w	r3, [sp, #4]
   171b4:	2300      	movs	r3, #0
   171b6:	f88d 3005 	strb.w	r3, [sp, #5]
   171ba:	f88d 3006 	strb.w	r3, [sp, #6]
   171be:	f88d 3007 	strb.w	r3, [sp, #7]
   171c2:	9801      	ldr	r0, [sp, #4]
   171c4:	f8cc 0010 	str.w	r0, [ip, #16]
   171c8:	2300      	movs	r3, #0
   171ca:	492f      	ldr	r1, [pc, #188]	; (17288 <hci_acl+0x144>)
   171cc:	4660      	mov	r0, ip
   171ce:	f012 f804 	bl	291da <z_log_msg_finalize>
		net_buf_unref(buf);
   171d2:	4620      	mov	r0, r4
   171d4:	f015 fa0d 	bl	2c5f2 <net_buf_unref>
}
   171d8:	b003      	add	sp, #12
   171da:	bdf0      	pop	{r4, r5, r6, r7, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   171dc:	f240 13ed 	movw	r3, #493	; 0x1ed
   171e0:	4a2a      	ldr	r2, [pc, #168]	; (1728c <hci_acl+0x148>)
   171e2:	492b      	ldr	r1, [pc, #172]	; (17290 <hci_acl+0x14c>)
   171e4:	482b      	ldr	r0, [pc, #172]	; (17294 <hci_acl+0x150>)
   171e6:	f011 fcf7 	bl	28bd8 <assert_print>
   171ea:	4040      	eors	r0, r0
   171ec:	f380 8811 	msr	BASEPRI, r0
   171f0:	f04f 0003 	mov.w	r0, #3
   171f4:	df02      	svc	2
   171f6:	e7ab      	b.n	17150 <hci_acl+0xc>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   171f8:	f002 fb9e 	bl	19938 <bt_conn_lookup_handle>
	if (!conn) {
   171fc:	4605      	mov	r5, r0
   171fe:	b158      	cbz	r0, 17218 <hci_acl+0xd4>
	acl(buf)->index = bt_conn_index(conn);
   17200:	f002 fd2e 	bl	19c60 <bt_conn_index>
   17204:	7660      	strb	r0, [r4, #25]
	bt_conn_recv(conn, buf, flags);
   17206:	463a      	mov	r2, r7
   17208:	4621      	mov	r1, r4
   1720a:	4628      	mov	r0, r5
   1720c:	f013 f84f 	bl	2a2ae <bt_conn_recv>
	bt_conn_unref(conn);
   17210:	4628      	mov	r0, r5
   17212:	f013 f87f 	bl	2a314 <bt_conn_unref>
   17216:	e7df      	b.n	171d8 <hci_acl+0x94>
		LOG_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   17218:	8b66      	ldrh	r6, [r4, #26]
   1721a:	2008      	movs	r0, #8
   1721c:	f7fc fd74 	bl	13d08 <z_log_msg_alloc>
   17220:	2200      	movs	r2, #0
   17222:	f36f 0200 	bfc	r2, #0, #1
   17226:	f36f 0241 	bfc	r2, #1, #1
   1722a:	f36f 0282 	bfc	r2, #2, #1
   1722e:	f36f 02c5 	bfc	r2, #3, #3
   17232:	2301      	movs	r3, #1
   17234:	f363 1288 	bfi	r2, r3, #6, #3
   17238:	230c      	movs	r3, #12
   1723a:	f363 2252 	bfi	r2, r3, #9, #10
   1723e:	f36f 42de 	bfc	r2, #19, #12
   17242:	f36f 72df 	bfc	r2, #31, #1
   17246:	4605      	mov	r5, r0
   17248:	b190      	cbz	r0, 17270 <hci_acl+0x12c>
   1724a:	f110 0310 	adds.w	r3, r0, #16
   1724e:	d002      	beq.n	17256 <hci_acl+0x112>
   17250:	4911      	ldr	r1, [pc, #68]	; (17298 <hci_acl+0x154>)
   17252:	6141      	str	r1, [r0, #20]
   17254:	6186      	str	r6, [r0, #24]
   17256:	b15b      	cbz	r3, 17270 <hci_acl+0x12c>
   17258:	2303      	movs	r3, #3
   1725a:	f88d 3004 	strb.w	r3, [sp, #4]
   1725e:	2300      	movs	r3, #0
   17260:	f88d 3005 	strb.w	r3, [sp, #5]
   17264:	f88d 3006 	strb.w	r3, [sp, #6]
   17268:	f88d 3007 	strb.w	r3, [sp, #7]
   1726c:	9801      	ldr	r0, [sp, #4]
   1726e:	6128      	str	r0, [r5, #16]
   17270:	2300      	movs	r3, #0
   17272:	4905      	ldr	r1, [pc, #20]	; (17288 <hci_acl+0x144>)
   17274:	4628      	mov	r0, r5
   17276:	f011 ffb0 	bl	291da <z_log_msg_finalize>
		net_buf_unref(buf);
   1727a:	4620      	mov	r0, r4
   1727c:	f015 f9b9 	bl	2c5f2 <net_buf_unref>
		return;
   17280:	e7aa      	b.n	171d8 <hci_acl+0x94>
   17282:	bf00      	nop
   17284:	00032628 	.word	0x00032628
   17288:	00031428 	.word	0x00031428
   1728c:	00032568 	.word	0x00032568
   17290:	0003259c 	.word	0x0003259c
   17294:	000325b8 	.word	0x000325b8
   17298:	0003264c 	.word	0x0003264c

0001729c <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
   1729c:	b530      	push	{r4, r5, lr}
   1729e:	b083      	sub	sp, #12
	int err;

	struct net_buf *buf;

	LOG_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   172a0:	4840      	ldr	r0, [pc, #256]	; (173a4 <rx_work_handler+0x108>)
   172a2:	f015 f98a 	bl	2c5ba <net_buf_slist_get>
	if (!buf) {
   172a6:	b188      	cbz	r0, 172cc <rx_work_handler+0x30>
   172a8:	4604      	mov	r4, r0
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   172aa:	7e05      	ldrb	r5, [r0, #24]
		return;
	}

	LOG_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	switch (bt_buf_get_type(buf)) {
   172ac:	2d01      	cmp	r5, #1
   172ae:	d00f      	beq.n	172d0 <rx_work_handler+0x34>
   172b0:	2d03      	cmp	r5, #3
   172b2:	d110      	bne.n	172d6 <rx_work_handler+0x3a>
#if defined(CONFIG_BT_CONN)
	case BT_BUF_ACL_IN:
		hci_acl(buf);
   172b4:	f7ff ff46 	bl	17144 <hci_acl>
	return list->head;
   172b8:	4b3b      	ldr	r3, [pc, #236]	; (173a8 <rx_work_handler+0x10c>)
   172ba:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
   172be:	b12b      	cbz	r3, 172cc <rx_work_handler+0x30>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
		err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
   172c0:	493a      	ldr	r1, [pc, #232]	; (173ac <rx_work_handler+0x110>)
   172c2:	483b      	ldr	r0, [pc, #236]	; (173b0 <rx_work_handler+0x114>)
   172c4:	f019 f9f0 	bl	306a8 <k_work_submit_to_queue>
#endif
		if (err < 0) {
   172c8:	1e04      	subs	r4, r0, #0
   172ca:	db39      	blt.n	17340 <rx_work_handler+0xa4>
			LOG_ERR("Could not submit rx_work: %d", err);
		}
	}
}
   172cc:	b003      	add	sp, #12
   172ce:	bd30      	pop	{r4, r5, pc}
		hci_event(buf);
   172d0:	f7ff fe9c 	bl	1700c <hci_event>
		break;
   172d4:	e7f0      	b.n	172b8 <rx_work_handler+0x1c>
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   172d6:	2008      	movs	r0, #8
   172d8:	f7fc fd16 	bl	13d08 <z_log_msg_alloc>
   172dc:	2200      	movs	r2, #0
   172de:	f36f 0200 	bfc	r2, #0, #1
   172e2:	f36f 0241 	bfc	r2, #1, #1
   172e6:	f36f 0282 	bfc	r2, #2, #1
   172ea:	f36f 02c5 	bfc	r2, #3, #3
   172ee:	2301      	movs	r3, #1
   172f0:	f363 1288 	bfi	r2, r3, #6, #3
   172f4:	230c      	movs	r3, #12
   172f6:	f363 2252 	bfi	r2, r3, #9, #10
   172fa:	f36f 42de 	bfc	r2, #19, #12
   172fe:	f36f 72df 	bfc	r2, #31, #1
   17302:	4684      	mov	ip, r0
   17304:	b198      	cbz	r0, 1732e <rx_work_handler+0x92>
   17306:	f110 0310 	adds.w	r3, r0, #16
   1730a:	d002      	beq.n	17312 <rx_work_handler+0x76>
   1730c:	4929      	ldr	r1, [pc, #164]	; (173b4 <rx_work_handler+0x118>)
   1730e:	6141      	str	r1, [r0, #20]
   17310:	6185      	str	r5, [r0, #24]
   17312:	b163      	cbz	r3, 1732e <rx_work_handler+0x92>
   17314:	2303      	movs	r3, #3
   17316:	f88d 3004 	strb.w	r3, [sp, #4]
   1731a:	2300      	movs	r3, #0
   1731c:	f88d 3005 	strb.w	r3, [sp, #5]
   17320:	f88d 3006 	strb.w	r3, [sp, #6]
   17324:	f88d 3007 	strb.w	r3, [sp, #7]
   17328:	9801      	ldr	r0, [sp, #4]
   1732a:	f8cc 0010 	str.w	r0, [ip, #16]
   1732e:	2300      	movs	r3, #0
   17330:	4921      	ldr	r1, [pc, #132]	; (173b8 <rx_work_handler+0x11c>)
   17332:	4660      	mov	r0, ip
   17334:	f011 ff51 	bl	291da <z_log_msg_finalize>
		net_buf_unref(buf);
   17338:	4620      	mov	r0, r4
   1733a:	f015 f95a 	bl	2c5f2 <net_buf_unref>
		break;
   1733e:	e7bb      	b.n	172b8 <rx_work_handler+0x1c>
			LOG_ERR("Could not submit rx_work: %d", err);
   17340:	2008      	movs	r0, #8
   17342:	f7fc fce1 	bl	13d08 <z_log_msg_alloc>
   17346:	2200      	movs	r2, #0
   17348:	f36f 0200 	bfc	r2, #0, #1
   1734c:	f36f 0241 	bfc	r2, #1, #1
   17350:	f36f 0282 	bfc	r2, #2, #1
   17354:	f36f 02c5 	bfc	r2, #3, #3
   17358:	2301      	movs	r3, #1
   1735a:	f363 1288 	bfi	r2, r3, #6, #3
   1735e:	230c      	movs	r3, #12
   17360:	f363 2252 	bfi	r2, r3, #9, #10
   17364:	f36f 42de 	bfc	r2, #19, #12
   17368:	f36f 72df 	bfc	r2, #31, #1
   1736c:	4605      	mov	r5, r0
   1736e:	b190      	cbz	r0, 17396 <rx_work_handler+0xfa>
   17370:	f110 0310 	adds.w	r3, r0, #16
   17374:	d002      	beq.n	1737c <rx_work_handler+0xe0>
   17376:	4911      	ldr	r1, [pc, #68]	; (173bc <rx_work_handler+0x120>)
   17378:	6141      	str	r1, [r0, #20]
   1737a:	6184      	str	r4, [r0, #24]
   1737c:	b15b      	cbz	r3, 17396 <rx_work_handler+0xfa>
   1737e:	2303      	movs	r3, #3
   17380:	f88d 3004 	strb.w	r3, [sp, #4]
   17384:	2300      	movs	r3, #0
   17386:	f88d 3005 	strb.w	r3, [sp, #5]
   1738a:	f88d 3006 	strb.w	r3, [sp, #6]
   1738e:	f88d 3007 	strb.w	r3, [sp, #7]
   17392:	9801      	ldr	r0, [sp, #4]
   17394:	6128      	str	r0, [r5, #16]
   17396:	2300      	movs	r3, #0
   17398:	4907      	ldr	r1, [pc, #28]	; (173b8 <rx_work_handler+0x11c>)
   1739a:	4628      	mov	r0, r5
   1739c:	f011 ff1d 	bl	291da <z_log_msg_finalize>
   173a0:	e794      	b.n	172cc <rx_work_handler+0x30>
   173a2:	bf00      	nop
   173a4:	200004a4 	.word	0x200004a4
   173a8:	20000370 	.word	0x20000370
   173ac:	20000684 	.word	0x20000684
   173b0:	20002020 	.word	0x20002020
   173b4:	00032670 	.word	0x00032670
   173b8:	00031428 	.word	0x00031428
   173bc:	00032608 	.word	0x00032608

000173c0 <le_conn_update_complete>:
{
   173c0:	b570      	push	{r4, r5, r6, lr}
   173c2:	b082      	sub	sp, #8
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   173c4:	68c4      	ldr	r4, [r0, #12]
	handle = sys_le16_to_cpu(evt->handle);
   173c6:	f8b4 6001 	ldrh.w	r6, [r4, #1]
	conn = bt_conn_lookup_handle(handle);
   173ca:	4630      	mov	r0, r6
   173cc:	f002 fab4 	bl	19938 <bt_conn_lookup_handle>
	if (!conn) {
   173d0:	b1c8      	cbz	r0, 17406 <le_conn_update_complete+0x46>
   173d2:	4605      	mov	r5, r0
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   173d4:	7823      	ldrb	r3, [r4, #0]
   173d6:	2b1a      	cmp	r3, #26
   173d8:	d046      	beq.n	17468 <le_conn_update_complete+0xa8>
		if (!evt->status) {
   173da:	7823      	ldrb	r3, [r4, #0]
   173dc:	b95b      	cbnz	r3, 173f6 <le_conn_update_complete+0x36>
			conn->le.interval = sys_le16_to_cpu(evt->interval);
   173de:	f8b4 3003 	ldrh.w	r3, [r4, #3]
   173e2:	f8a5 309e 	strh.w	r3, [r5, #158]	; 0x9e
			conn->le.latency = sys_le16_to_cpu(evt->latency);
   173e6:	f8b4 3005 	ldrh.w	r3, [r4, #5]
   173ea:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
			conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   173ee:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   173f2:	f8a5 30a6 	strh.w	r3, [r5, #166]	; 0xa6
		notify_le_param_updated(conn);
   173f6:	4628      	mov	r0, r5
   173f8:	f002 fc88 	bl	19d0c <notify_le_param_updated>
	bt_conn_unref(conn);
   173fc:	4628      	mov	r0, r5
   173fe:	f012 ff89 	bl	2a314 <bt_conn_unref>
}
   17402:	b002      	add	sp, #8
   17404:	bd70      	pop	{r4, r5, r6, pc}
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   17406:	2008      	movs	r0, #8
   17408:	f7fc fc7e 	bl	13d08 <z_log_msg_alloc>
   1740c:	2200      	movs	r2, #0
   1740e:	f36f 0200 	bfc	r2, #0, #1
   17412:	f36f 0241 	bfc	r2, #1, #1
   17416:	f36f 0282 	bfc	r2, #2, #1
   1741a:	f36f 02c5 	bfc	r2, #3, #3
   1741e:	2301      	movs	r3, #1
   17420:	f363 1288 	bfi	r2, r3, #6, #3
   17424:	230c      	movs	r3, #12
   17426:	f363 2252 	bfi	r2, r3, #9, #10
   1742a:	f36f 42de 	bfc	r2, #19, #12
   1742e:	f36f 72df 	bfc	r2, #31, #1
   17432:	4604      	mov	r4, r0
   17434:	b190      	cbz	r0, 1745c <le_conn_update_complete+0x9c>
   17436:	f110 0310 	adds.w	r3, r0, #16
   1743a:	d002      	beq.n	17442 <le_conn_update_complete+0x82>
   1743c:	4919      	ldr	r1, [pc, #100]	; (174a4 <le_conn_update_complete+0xe4>)
   1743e:	6141      	str	r1, [r0, #20]
   17440:	6186      	str	r6, [r0, #24]
   17442:	b15b      	cbz	r3, 1745c <le_conn_update_complete+0x9c>
   17444:	2303      	movs	r3, #3
   17446:	f88d 3000 	strb.w	r3, [sp]
   1744a:	2300      	movs	r3, #0
   1744c:	f88d 3001 	strb.w	r3, [sp, #1]
   17450:	f88d 3002 	strb.w	r3, [sp, #2]
   17454:	f88d 3003 	strb.w	r3, [sp, #3]
   17458:	9800      	ldr	r0, [sp, #0]
   1745a:	6120      	str	r0, [r4, #16]
   1745c:	2300      	movs	r3, #0
   1745e:	4912      	ldr	r1, [pc, #72]	; (174a8 <le_conn_update_complete+0xe8>)
   17460:	4620      	mov	r0, r4
   17462:	f011 feba 	bl	291da <z_log_msg_finalize>
		return;
   17466:	e7cc      	b.n	17402 <le_conn_update_complete+0x42>
	    conn->role == BT_HCI_ROLE_PERIPHERAL &&
   17468:	78c3      	ldrb	r3, [r0, #3]
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   1746a:	2b01      	cmp	r3, #1
   1746c:	d1b5      	bne.n	173da <le_conn_update_complete+0x1a>
	    !atomic_test_and_set_bit(conn->flags,
   1746e:	210a      	movs	r1, #10
   17470:	3004      	adds	r0, #4
   17472:	f012 fd01 	bl	29e78 <atomic_test_and_set_bit>
	    conn->role == BT_HCI_ROLE_PERIPHERAL &&
   17476:	2800      	cmp	r0, #0
   17478:	d1af      	bne.n	173da <le_conn_update_complete+0x1a>
		param.interval_min = conn->le.interval_min;
   1747a:	f8b5 30a0 	ldrh.w	r3, [r5, #160]	; 0xa0
   1747e:	f8ad 3000 	strh.w	r3, [sp]
		param.interval_max = conn->le.interval_max;
   17482:	f8b5 30a2 	ldrh.w	r3, [r5, #162]	; 0xa2
   17486:	f8ad 3002 	strh.w	r3, [sp, #2]
		param.latency = conn->le.pending_latency;
   1748a:	f8b5 30a8 	ldrh.w	r3, [r5, #168]	; 0xa8
   1748e:	f8ad 3004 	strh.w	r3, [sp, #4]
		param.timeout = conn->le.pending_timeout;
   17492:	f8b5 30aa 	ldrh.w	r3, [r5, #170]	; 0xaa
   17496:	f8ad 3006 	strh.w	r3, [sp, #6]
		bt_l2cap_update_conn_param(conn, &param);
   1749a:	4669      	mov	r1, sp
   1749c:	4628      	mov	r0, r5
   1749e:	f013 f88a 	bl	2a5b6 <bt_l2cap_update_conn_param>
				     BT_CONN_PERIPHERAL_PARAM_L2CAP)) {
   174a2:	e7ab      	b.n	173fc <le_conn_update_complete+0x3c>
   174a4:	0003245c 	.word	0x0003245c
   174a8:	00031428 	.word	0x00031428

000174ac <bt_hci_cmd_state_set_init>:
{
   174ac:	b510      	push	{r4, lr}
   174ae:	460c      	mov	r4, r1
	state->target = target;
   174b0:	600a      	str	r2, [r1, #0]
	state->bit = bit;
   174b2:	604b      	str	r3, [r1, #4]
	state->val = val;
   174b4:	f89d 3008 	ldrb.w	r3, [sp, #8]
   174b8:	720b      	strb	r3, [r1, #8]
	cmd(buf)->state = state;
   174ba:	f014 ffb0 	bl	2c41e <net_buf_id>
   174be:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   174c2:	4b02      	ldr	r3, [pc, #8]	; (174cc <bt_hci_cmd_state_set_init+0x20>)
   174c4:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   174c8:	605c      	str	r4, [r3, #4]
}
   174ca:	bd10      	pop	{r4, pc}
   174cc:	20007ce4 	.word	0x20007ce4

000174d0 <bt_hci_cmd_create>:
{
   174d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   174d4:	4606      	mov	r6, r0
   174d6:	460f      	mov	r7, r1
	return net_buf_alloc_fixed(pool, timeout);
   174d8:	f04f 32ff 	mov.w	r2, #4294967295
   174dc:	f04f 33ff 	mov.w	r3, #4294967295
   174e0:	4818      	ldr	r0, [pc, #96]	; (17544 <bt_hci_cmd_create+0x74>)
   174e2:	f015 f83f 	bl	2c564 <net_buf_alloc_fixed>
   174e6:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
   174e8:	f100 090c 	add.w	r9, r0, #12
   174ec:	2100      	movs	r1, #0
   174ee:	4648      	mov	r0, r9
   174f0:	f015 f849 	bl	2c586 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   174f4:	f04f 0800 	mov.w	r8, #0
   174f8:	f884 8018 	strb.w	r8, [r4, #24]
	cmd(buf)->opcode = opcode;
   174fc:	4620      	mov	r0, r4
   174fe:	f014 ff8e 	bl	2c41e <net_buf_id>
   17502:	4d11      	ldr	r5, [pc, #68]	; (17548 <bt_hci_cmd_create+0x78>)
   17504:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   17508:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   1750c:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   1750e:	4620      	mov	r0, r4
   17510:	f014 ff85 	bl	2c41e <net_buf_id>
   17514:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   17518:	eb05 0380 	add.w	r3, r5, r0, lsl #2
   1751c:	f8c3 8008 	str.w	r8, [r3, #8]
	cmd(buf)->state = NULL;
   17520:	4620      	mov	r0, r4
   17522:	f014 ff7c 	bl	2c41e <net_buf_id>
   17526:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1752a:	eb05 0580 	add.w	r5, r5, r0, lsl #2
   1752e:	f8c5 8004 	str.w	r8, [r5, #4]
	return net_buf_simple_add(&buf->b, len);
   17532:	2103      	movs	r1, #3
   17534:	4648      	mov	r0, r9
   17536:	f015 f8a3 	bl	2c680 <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
   1753a:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
   1753c:	7087      	strb	r7, [r0, #2]
}
   1753e:	4620      	mov	r0, r4
   17540:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   17544:	20000bb4 	.word	0x20000bb4
   17548:	20007ce4 	.word	0x20007ce4

0001754c <bt_hci_cmd_send_sync>:
{
   1754c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1754e:	b089      	sub	sp, #36	; 0x24
   17550:	4607      	mov	r7, r0
   17552:	4615      	mov	r5, r2
	if (!buf) {
   17554:	460c      	mov	r4, r1
   17556:	b361      	cbz	r1, 175b2 <bt_hci_cmd_send_sync+0x66>
	return z_impl_k_sem_init(sem, initial_count, limit);
   17558:	ae02      	add	r6, sp, #8
   1755a:	2201      	movs	r2, #1
   1755c:	2100      	movs	r1, #0
   1755e:	4630      	mov	r0, r6
   17560:	f018 ff9f 	bl	304a2 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   17564:	4620      	mov	r0, r4
   17566:	f014 ff5a 	bl	2c41e <net_buf_id>
   1756a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1756e:	4b3e      	ldr	r3, [pc, #248]	; (17668 <bt_hci_cmd_send_sync+0x11c>)
   17570:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   17574:	609e      	str	r6, [r3, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   17576:	4620      	mov	r0, r4
   17578:	f015 f85e 	bl	2c638 <net_buf_ref>
   1757c:	4601      	mov	r1, r0
   1757e:	483b      	ldr	r0, [pc, #236]	; (1766c <bt_hci_cmd_send_sync+0x120>)
   17580:	f015 f833 	bl	2c5ea <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   17584:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   17588:	2300      	movs	r3, #0
   1758a:	4630      	mov	r0, r6
   1758c:	f00f f83a 	bl	26604 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   17590:	4606      	mov	r6, r0
   17592:	b9b0      	cbnz	r0, 175c2 <bt_hci_cmd_send_sync+0x76>
	status = cmd(buf)->status;
   17594:	4620      	mov	r0, r4
   17596:	f014 ff42 	bl	2c41e <net_buf_id>
   1759a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1759e:	4b32      	ldr	r3, [pc, #200]	; (17668 <bt_hci_cmd_send_sync+0x11c>)
   175a0:	f813 6020 	ldrb.w	r6, [r3, r0, lsl #2]
	if (status) {
   175a4:	b9fe      	cbnz	r6, 175e6 <bt_hci_cmd_send_sync+0x9a>
	if (rsp) {
   175a6:	2d00      	cmp	r5, #0
   175a8:	d058      	beq.n	1765c <bt_hci_cmd_send_sync+0x110>
		*rsp = buf;
   175aa:	602c      	str	r4, [r5, #0]
	return 0;
   175ac:	2000      	movs	r0, #0
}
   175ae:	b009      	add	sp, #36	; 0x24
   175b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		buf = bt_hci_cmd_create(opcode, 0);
   175b2:	f7ff ff8d 	bl	174d0 <bt_hci_cmd_create>
		if (!buf) {
   175b6:	4604      	mov	r4, r0
   175b8:	2800      	cmp	r0, #0
   175ba:	d1cd      	bne.n	17558 <bt_hci_cmd_send_sync+0xc>
			return -ENOBUFS;
   175bc:	f06f 0068 	mvn.w	r0, #104	; 0x68
   175c0:	e7f5      	b.n	175ae <bt_hci_cmd_send_sync+0x62>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   175c2:	f240 1349 	movw	r3, #329	; 0x149
   175c6:	4a2a      	ldr	r2, [pc, #168]	; (17670 <bt_hci_cmd_send_sync+0x124>)
   175c8:	492a      	ldr	r1, [pc, #168]	; (17674 <bt_hci_cmd_send_sync+0x128>)
   175ca:	482b      	ldr	r0, [pc, #172]	; (17678 <bt_hci_cmd_send_sync+0x12c>)
   175cc:	f011 fb04 	bl	28bd8 <assert_print>
   175d0:	4631      	mov	r1, r6
   175d2:	482a      	ldr	r0, [pc, #168]	; (1767c <bt_hci_cmd_send_sync+0x130>)
   175d4:	f011 fb00 	bl	28bd8 <assert_print>
   175d8:	4040      	eors	r0, r0
   175da:	f380 8811 	msr	BASEPRI, r0
   175de:	f04f 0003 	mov.w	r0, #3
   175e2:	df02      	svc	2
   175e4:	e7d6      	b.n	17594 <bt_hci_cmd_send_sync+0x48>
		LOG_WRN("opcode 0x%04x status 0x%02x", opcode, status);
   175e6:	2008      	movs	r0, #8
   175e8:	f7fc fb8e 	bl	13d08 <z_log_msg_alloc>
   175ec:	2200      	movs	r2, #0
   175ee:	f36f 0200 	bfc	r2, #0, #1
   175f2:	f36f 0241 	bfc	r2, #1, #1
   175f6:	f36f 0282 	bfc	r2, #2, #1
   175fa:	f36f 02c5 	bfc	r2, #3, #3
   175fe:	2302      	movs	r3, #2
   17600:	f363 1288 	bfi	r2, r3, #6, #3
   17604:	2310      	movs	r3, #16
   17606:	f363 2252 	bfi	r2, r3, #9, #10
   1760a:	f36f 42de 	bfc	r2, #19, #12
   1760e:	f36f 72df 	bfc	r2, #31, #1
   17612:	4605      	mov	r5, r0
   17614:	b190      	cbz	r0, 1763c <bt_hci_cmd_send_sync+0xf0>
   17616:	18c3      	adds	r3, r0, r3
   17618:	d003      	beq.n	17622 <bt_hci_cmd_send_sync+0xd6>
   1761a:	4919      	ldr	r1, [pc, #100]	; (17680 <bt_hci_cmd_send_sync+0x134>)
   1761c:	6141      	str	r1, [r0, #20]
   1761e:	6187      	str	r7, [r0, #24]
   17620:	61c6      	str	r6, [r0, #28]
   17622:	b15b      	cbz	r3, 1763c <bt_hci_cmd_send_sync+0xf0>
   17624:	2304      	movs	r3, #4
   17626:	f88d 3004 	strb.w	r3, [sp, #4]
   1762a:	2300      	movs	r3, #0
   1762c:	f88d 3005 	strb.w	r3, [sp, #5]
   17630:	f88d 3006 	strb.w	r3, [sp, #6]
   17634:	f88d 3007 	strb.w	r3, [sp, #7]
   17638:	9801      	ldr	r0, [sp, #4]
   1763a:	6128      	str	r0, [r5, #16]
   1763c:	2300      	movs	r3, #0
   1763e:	4911      	ldr	r1, [pc, #68]	; (17684 <bt_hci_cmd_send_sync+0x138>)
   17640:	4628      	mov	r0, r5
   17642:	f011 fdca 	bl	291da <z_log_msg_finalize>
		net_buf_unref(buf);
   17646:	4620      	mov	r0, r4
   17648:	f014 ffd3 	bl	2c5f2 <net_buf_unref>
		switch (status) {
   1764c:	2e09      	cmp	r6, #9
   1764e:	d002      	beq.n	17656 <bt_hci_cmd_send_sync+0x10a>
			return -EIO;
   17650:	f06f 0004 	mvn.w	r0, #4
   17654:	e7ab      	b.n	175ae <bt_hci_cmd_send_sync+0x62>
			return -ECONNREFUSED;
   17656:	f06f 006e 	mvn.w	r0, #110	; 0x6e
   1765a:	e7a8      	b.n	175ae <bt_hci_cmd_send_sync+0x62>
		net_buf_unref(buf);
   1765c:	4620      	mov	r0, r4
   1765e:	f014 ffc8 	bl	2c5f2 <net_buf_unref>
	return 0;
   17662:	2000      	movs	r0, #0
   17664:	e7a3      	b.n	175ae <bt_hci_cmd_send_sync+0x62>
   17666:	bf00      	nop
   17668:	20007ce4 	.word	0x20007ce4
   1766c:	200004ac 	.word	0x200004ac
   17670:	00032568 	.word	0x00032568
   17674:	00032684 	.word	0x00032684
   17678:	000325b8 	.word	0x000325b8
   1767c:	00032690 	.word	0x00032690
   17680:	000326b0 	.word	0x000326b0
   17684:	00031428 	.word	0x00031428

00017688 <common_init>:
{
   17688:	b510      	push	{r4, lr}
   1768a:	b082      	sub	sp, #8
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   1768c:	4b22      	ldr	r3, [pc, #136]	; (17718 <common_init+0x90>)
   1768e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
   17692:	689b      	ldr	r3, [r3, #8]
   17694:	f013 0f01 	tst.w	r3, #1
   17698:	d10d      	bne.n	176b6 <common_init+0x2e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   1769a:	aa01      	add	r2, sp, #4
   1769c:	2100      	movs	r1, #0
   1769e:	f640 4003 	movw	r0, #3075	; 0xc03
   176a2:	f7ff ff53 	bl	1754c <bt_hci_cmd_send_sync>
		if (err) {
   176a6:	4604      	mov	r4, r0
   176a8:	b968      	cbnz	r0, 176c6 <common_init+0x3e>
		hci_reset_complete(rsp);
   176aa:	9801      	ldr	r0, [sp, #4]
   176ac:	f7ff f874 	bl	16798 <hci_reset_complete>
		net_buf_unref(rsp);
   176b0:	9801      	ldr	r0, [sp, #4]
   176b2:	f014 ff9e 	bl	2c5f2 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   176b6:	aa01      	add	r2, sp, #4
   176b8:	2100      	movs	r1, #0
   176ba:	f241 0003 	movw	r0, #4099	; 0x1003
   176be:	f7ff ff45 	bl	1754c <bt_hci_cmd_send_sync>
	if (err) {
   176c2:	4604      	mov	r4, r0
   176c4:	b110      	cbz	r0, 176cc <common_init+0x44>
}
   176c6:	4620      	mov	r0, r4
   176c8:	b002      	add	sp, #8
   176ca:	bd10      	pop	{r4, pc}
	read_local_features_complete(rsp);
   176cc:	9801      	ldr	r0, [sp, #4]
   176ce:	f7ff f87f 	bl	167d0 <read_local_features_complete>
	net_buf_unref(rsp);
   176d2:	9801      	ldr	r0, [sp, #4]
   176d4:	f014 ff8d 	bl	2c5f2 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   176d8:	aa01      	add	r2, sp, #4
   176da:	2100      	movs	r1, #0
   176dc:	f241 0001 	movw	r0, #4097	; 0x1001
   176e0:	f7ff ff34 	bl	1754c <bt_hci_cmd_send_sync>
	if (err) {
   176e4:	4604      	mov	r4, r0
   176e6:	2800      	cmp	r0, #0
   176e8:	d1ed      	bne.n	176c6 <common_init+0x3e>
	read_local_ver_complete(rsp);
   176ea:	9801      	ldr	r0, [sp, #4]
   176ec:	f7fe ffa0 	bl	16630 <read_local_ver_complete>
	net_buf_unref(rsp);
   176f0:	9801      	ldr	r0, [sp, #4]
   176f2:	f014 ff7e 	bl	2c5f2 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   176f6:	aa01      	add	r2, sp, #4
   176f8:	2100      	movs	r1, #0
   176fa:	f241 0002 	movw	r0, #4098	; 0x1002
   176fe:	f7ff ff25 	bl	1754c <bt_hci_cmd_send_sync>
	if (err) {
   17702:	4604      	mov	r4, r0
   17704:	2800      	cmp	r0, #0
   17706:	d1de      	bne.n	176c6 <common_init+0x3e>
	read_supported_commands_complete(rsp);
   17708:	9801      	ldr	r0, [sp, #4]
   1770a:	f7ff f86b 	bl	167e4 <read_supported_commands_complete>
	net_buf_unref(rsp);
   1770e:	9801      	ldr	r0, [sp, #4]
   17710:	f014 ff6f 	bl	2c5f2 <net_buf_unref>
	return 0;
   17714:	e7d7      	b.n	176c6 <common_init+0x3e>
   17716:	bf00      	nop
   17718:	20000370 	.word	0x20000370

0001771c <hci_le_read_max_data_len>:
{
   1771c:	b570      	push	{r4, r5, r6, lr}
   1771e:	b082      	sub	sp, #8
   17720:	4605      	mov	r5, r0
   17722:	460c      	mov	r4, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   17724:	aa01      	add	r2, sp, #4
   17726:	2100      	movs	r1, #0
   17728:	f242 002f 	movw	r0, #8239	; 0x202f
   1772c:	f7ff ff0e 	bl	1754c <bt_hci_cmd_send_sync>
	if (err) {
   17730:	4606      	mov	r6, r0
   17732:	b960      	cbnz	r0, 1774e <hci_le_read_max_data_len+0x32>
	rp = (void *)rsp->data;
   17734:	9801      	ldr	r0, [sp, #4]
   17736:	68c3      	ldr	r3, [r0, #12]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   17738:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   1773c:	802a      	strh	r2, [r5, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   1773e:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   17742:	8023      	strh	r3, [r4, #0]
	net_buf_unref(rsp);
   17744:	f014 ff55 	bl	2c5f2 <net_buf_unref>
}
   17748:	4630      	mov	r0, r6
   1774a:	b002      	add	sp, #8
   1774c:	bd70      	pop	{r4, r5, r6, pc}
		LOG_ERR("Failed to read DLE max data len");
   1774e:	2006      	movs	r0, #6
   17750:	f7fc fada 	bl	13d08 <z_log_msg_alloc>
   17754:	2200      	movs	r2, #0
   17756:	f36f 0200 	bfc	r2, #0, #1
   1775a:	f36f 0241 	bfc	r2, #1, #1
   1775e:	f36f 0282 	bfc	r2, #2, #1
   17762:	f36f 02c5 	bfc	r2, #3, #3
   17766:	2301      	movs	r3, #1
   17768:	f363 1288 	bfi	r2, r3, #6, #3
   1776c:	2308      	movs	r3, #8
   1776e:	f363 2252 	bfi	r2, r3, #9, #10
   17772:	f36f 42de 	bfc	r2, #19, #12
   17776:	f36f 72df 	bfc	r2, #31, #1
   1777a:	4604      	mov	r4, r0
   1777c:	b188      	cbz	r0, 177a2 <hci_le_read_max_data_len+0x86>
   1777e:	f110 0310 	adds.w	r3, r0, #16
   17782:	d001      	beq.n	17788 <hci_le_read_max_data_len+0x6c>
   17784:	490a      	ldr	r1, [pc, #40]	; (177b0 <hci_le_read_max_data_len+0x94>)
   17786:	6141      	str	r1, [r0, #20]
   17788:	b15b      	cbz	r3, 177a2 <hci_le_read_max_data_len+0x86>
   1778a:	2302      	movs	r3, #2
   1778c:	f88d 3000 	strb.w	r3, [sp]
   17790:	2300      	movs	r3, #0
   17792:	f88d 3001 	strb.w	r3, [sp, #1]
   17796:	f88d 3002 	strb.w	r3, [sp, #2]
   1779a:	f88d 3003 	strb.w	r3, [sp, #3]
   1779e:	9800      	ldr	r0, [sp, #0]
   177a0:	6120      	str	r0, [r4, #16]
   177a2:	2300      	movs	r3, #0
   177a4:	4903      	ldr	r1, [pc, #12]	; (177b4 <hci_le_read_max_data_len+0x98>)
   177a6:	4620      	mov	r0, r4
   177a8:	f011 fd17 	bl	291da <z_log_msg_finalize>
		return err;
   177ac:	e7cc      	b.n	17748 <hci_le_read_max_data_len+0x2c>
   177ae:	bf00      	nop
   177b0:	000326cc 	.word	0x000326cc
   177b4:	00031428 	.word	0x00031428

000177b8 <le_set_event_mask>:
{
   177b8:	b510      	push	{r4, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   177ba:	2108      	movs	r1, #8
   177bc:	f242 0001 	movw	r0, #8193	; 0x2001
   177c0:	f7ff fe86 	bl	174d0 <bt_hci_cmd_create>
	if (!buf) {
   177c4:	b330      	cbz	r0, 17814 <le_set_event_mask+0x5c>
   177c6:	4604      	mov	r4, r0
   177c8:	2108      	movs	r1, #8
   177ca:	300c      	adds	r0, #12
   177cc:	f014 ff58 	bl	2c680 <net_buf_simple_add>
   177d0:	4602      	mov	r2, r0
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   177d2:	4b12      	ldr	r3, [pc, #72]	; (1781c <le_set_event_mask+0x64>)
   177d4:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   177d8:	f013 0f02 	tst.w	r3, #2
   177dc:	d117      	bne.n	1780e <le_set_event_mask+0x56>
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
   177de:	200f      	movs	r0, #15
   177e0:	2100      	movs	r1, #0
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   177e2:	f013 0f20 	tst.w	r3, #32
   177e6:	d001      	beq.n	177ec <le_set_event_mask+0x34>
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   177e8:	f040 0040 	orr.w	r0, r0, #64	; 0x40
		    (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
   177ec:	4b0b      	ldr	r3, [pc, #44]	; (1781c <le_set_event_mask+0x64>)
   177ee:	f893 30d1 	ldrb.w	r3, [r3, #209]	; 0xd1
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   177f2:	f013 0f09 	tst.w	r3, #9
   177f6:	d001      	beq.n	177fc <le_set_event_mask+0x44>
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   177f8:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
	sys_put_le64(mask, cp_mask->events);
   177fc:	f012 fab0 	bl	29d60 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   17800:	2200      	movs	r2, #0
   17802:	4621      	mov	r1, r4
   17804:	f242 0001 	movw	r0, #8193	; 0x2001
   17808:	f7ff fea0 	bl	1754c <bt_hci_cmd_send_sync>
}
   1780c:	bd10      	pop	{r4, pc}
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   1780e:	202f      	movs	r0, #47	; 0x2f
   17810:	2100      	movs	r1, #0
   17812:	e7e6      	b.n	177e2 <le_set_event_mask+0x2a>
		return -ENOBUFS;
   17814:	f06f 0068 	mvn.w	r0, #104	; 0x68
   17818:	e7f8      	b.n	1780c <le_set_event_mask+0x54>
   1781a:	bf00      	nop
   1781c:	20000370 	.word	0x20000370

00017820 <le_init>:
{
   17820:	b510      	push	{r4, lr}
   17822:	b084      	sub	sp, #16
	if (!BT_FEAT_LE(bt_dev.features)) {
   17824:	4b5f      	ldr	r3, [pc, #380]	; (179a4 <le_init+0x184>)
   17826:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   1782a:	f013 0f40 	tst.w	r3, #64	; 0x40
   1782e:	d00a      	beq.n	17846 <le_init+0x26>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   17830:	aa03      	add	r2, sp, #12
   17832:	2100      	movs	r1, #0
   17834:	f242 0003 	movw	r0, #8195	; 0x2003
   17838:	f7ff fe88 	bl	1754c <bt_hci_cmd_send_sync>
	if (err) {
   1783c:	4603      	mov	r3, r0
   1783e:	b3a0      	cbz	r0, 178aa <le_init+0x8a>
}
   17840:	4618      	mov	r0, r3
   17842:	b004      	add	sp, #16
   17844:	bd10      	pop	{r4, pc}
		LOG_ERR("Non-LE capable controller detected!");
   17846:	2006      	movs	r0, #6
   17848:	f7fc fa5e 	bl	13d08 <z_log_msg_alloc>
   1784c:	2200      	movs	r2, #0
   1784e:	f36f 0200 	bfc	r2, #0, #1
   17852:	f36f 0241 	bfc	r2, #1, #1
   17856:	f36f 0282 	bfc	r2, #2, #1
   1785a:	f36f 02c5 	bfc	r2, #3, #3
   1785e:	2301      	movs	r3, #1
   17860:	f363 1288 	bfi	r2, r3, #6, #3
   17864:	2308      	movs	r3, #8
   17866:	f363 2252 	bfi	r2, r3, #9, #10
   1786a:	f36f 42de 	bfc	r2, #19, #12
   1786e:	f36f 72df 	bfc	r2, #31, #1
   17872:	4604      	mov	r4, r0
   17874:	b188      	cbz	r0, 1789a <le_init+0x7a>
   17876:	f110 0310 	adds.w	r3, r0, #16
   1787a:	d001      	beq.n	17880 <le_init+0x60>
   1787c:	494a      	ldr	r1, [pc, #296]	; (179a8 <le_init+0x188>)
   1787e:	6141      	str	r1, [r0, #20]
   17880:	b15b      	cbz	r3, 1789a <le_init+0x7a>
   17882:	2302      	movs	r3, #2
   17884:	f88d 3008 	strb.w	r3, [sp, #8]
   17888:	2300      	movs	r3, #0
   1788a:	f88d 3009 	strb.w	r3, [sp, #9]
   1788e:	f88d 300a 	strb.w	r3, [sp, #10]
   17892:	f88d 300b 	strb.w	r3, [sp, #11]
   17896:	9802      	ldr	r0, [sp, #8]
   17898:	6120      	str	r0, [r4, #16]
   1789a:	2300      	movs	r3, #0
   1789c:	4943      	ldr	r1, [pc, #268]	; (179ac <le_init+0x18c>)
   1789e:	4620      	mov	r0, r4
   178a0:	f011 fc9b 	bl	291da <z_log_msg_finalize>
		return -ENODEV;
   178a4:	f06f 0312 	mvn.w	r3, #18
   178a8:	e7ca      	b.n	17840 <le_init+0x20>
	read_le_features_complete(rsp);
   178aa:	9803      	ldr	r0, [sp, #12]
   178ac:	f7fe ffa4 	bl	167f8 <read_le_features_complete>
	net_buf_unref(rsp);
   178b0:	9803      	ldr	r0, [sp, #12]
   178b2:	f014 fe9e 	bl	2c5f2 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   178b6:	aa03      	add	r2, sp, #12
   178b8:	2100      	movs	r1, #0
   178ba:	f242 0002 	movw	r0, #8194	; 0x2002
   178be:	f7ff fe45 	bl	1754c <bt_hci_cmd_send_sync>
		if (err) {
   178c2:	4603      	mov	r3, r0
   178c4:	2800      	cmp	r0, #0
   178c6:	d1bb      	bne.n	17840 <le_init+0x20>
		le_read_buffer_size_complete(rsp);
   178c8:	9803      	ldr	r0, [sp, #12]
   178ca:	f7fe ff9f 	bl	1680c <le_read_buffer_size_complete>
		net_buf_unref(rsp);
   178ce:	9803      	ldr	r0, [sp, #12]
   178d0:	f014 fe8f 	bl	2c5f2 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   178d4:	4b33      	ldr	r3, [pc, #204]	; (179a4 <le_init+0x184>)
   178d6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   178da:	f013 0f20 	tst.w	r3, #32
   178de:	d032      	beq.n	17946 <le_init+0x126>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   178e0:	4b30      	ldr	r3, [pc, #192]	; (179a4 <le_init+0x184>)
   178e2:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   178e6:	f013 0f08 	tst.w	r3, #8
   178ea:	d144      	bne.n	17976 <le_init+0x156>
	    BT_FEAT_LE_DLE(bt_dev.le.features)) {
   178ec:	4b2d      	ldr	r3, [pc, #180]	; (179a4 <le_init+0x184>)
   178ee:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   178f2:	f013 0f20 	tst.w	r3, #32
   178f6:	d022      	beq.n	1793e <le_init+0x11e>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   178f8:	a902      	add	r1, sp, #8
   178fa:	f10d 0006 	add.w	r0, sp, #6
   178fe:	f7ff ff0d 	bl	1771c <hci_le_read_max_data_len>
		if (err) {
   17902:	4603      	mov	r3, r0
   17904:	2800      	cmp	r0, #0
   17906:	d19b      	bne.n	17840 <le_init+0x20>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   17908:	2104      	movs	r1, #4
   1790a:	f242 0024 	movw	r0, #8228	; 0x2024
   1790e:	f7ff fddf 	bl	174d0 <bt_hci_cmd_create>
		if (!buf) {
   17912:	4604      	mov	r4, r0
   17914:	2800      	cmp	r0, #0
   17916:	d03f      	beq.n	17998 <le_init+0x178>
   17918:	2104      	movs	r1, #4
   1791a:	300c      	adds	r0, #12
   1791c:	f014 feb0 	bl	2c680 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   17920:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   17924:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   17926:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   1792a:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   1792c:	2200      	movs	r2, #0
   1792e:	4621      	mov	r1, r4
   17930:	f242 0024 	movw	r0, #8228	; 0x2024
   17934:	f7ff fe0a 	bl	1754c <bt_hci_cmd_send_sync>
		if (err) {
   17938:	4603      	mov	r3, r0
   1793a:	2800      	cmp	r0, #0
   1793c:	d180      	bne.n	17840 <le_init+0x20>
	return  le_set_event_mask();
   1793e:	f7ff ff3b 	bl	177b8 <le_set_event_mask>
   17942:	4603      	mov	r3, r0
   17944:	e77c      	b.n	17840 <le_init+0x20>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   17946:	2102      	movs	r1, #2
   17948:	f640 406d 	movw	r0, #3181	; 0xc6d
   1794c:	f7ff fdc0 	bl	174d0 <bt_hci_cmd_create>
		if (!buf) {
   17950:	4604      	mov	r4, r0
   17952:	b320      	cbz	r0, 1799e <le_init+0x17e>
   17954:	2102      	movs	r1, #2
   17956:	300c      	adds	r0, #12
   17958:	f014 fe92 	bl	2c680 <net_buf_simple_add>
		cp_le->le = 0x01;
   1795c:	2301      	movs	r3, #1
   1795e:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   17960:	2200      	movs	r2, #0
   17962:	7042      	strb	r2, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   17964:	4621      	mov	r1, r4
   17966:	f640 406d 	movw	r0, #3181	; 0xc6d
   1796a:	f7ff fdef 	bl	1754c <bt_hci_cmd_send_sync>
		if (err) {
   1796e:	4603      	mov	r3, r0
   17970:	2800      	cmp	r0, #0
   17972:	d0b5      	beq.n	178e0 <le_init+0xc0>
   17974:	e764      	b.n	17840 <le_init+0x20>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   17976:	aa03      	add	r2, sp, #12
   17978:	2100      	movs	r1, #0
   1797a:	f242 001c 	movw	r0, #8220	; 0x201c
   1797e:	f7ff fde5 	bl	1754c <bt_hci_cmd_send_sync>
		if (err) {
   17982:	4603      	mov	r3, r0
   17984:	2800      	cmp	r0, #0
   17986:	f47f af5b 	bne.w	17840 <le_init+0x20>
		le_read_supp_states_complete(rsp);
   1798a:	9803      	ldr	r0, [sp, #12]
   1798c:	f7fe fe66 	bl	1665c <le_read_supp_states_complete>
		net_buf_unref(rsp);
   17990:	9803      	ldr	r0, [sp, #12]
   17992:	f014 fe2e 	bl	2c5f2 <net_buf_unref>
   17996:	e7a9      	b.n	178ec <le_init+0xcc>
			return -ENOBUFS;
   17998:	f06f 0368 	mvn.w	r3, #104	; 0x68
   1799c:	e750      	b.n	17840 <le_init+0x20>
			return -ENOBUFS;
   1799e:	f06f 0368 	mvn.w	r3, #104	; 0x68
   179a2:	e74d      	b.n	17840 <le_init+0x20>
   179a4:	20000370 	.word	0x20000370
   179a8:	000326ec 	.word	0x000326ec
   179ac:	00031428 	.word	0x00031428

000179b0 <bt_br_init>:
{
   179b0:	b510      	push	{r4, lr}
   179b2:	b082      	sub	sp, #8
	if (bt_dev.le.acl_mtu) {
   179b4:	4b0b      	ldr	r3, [pc, #44]	; (179e4 <bt_br_init+0x34>)
   179b6:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
   179ba:	b11b      	cbz	r3, 179c4 <bt_br_init+0x14>
		return 0;
   179bc:	2400      	movs	r4, #0
}
   179be:	4620      	mov	r0, r4
   179c0:	b002      	add	sp, #8
   179c2:	bd10      	pop	{r4, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   179c4:	aa01      	add	r2, sp, #4
   179c6:	2100      	movs	r1, #0
   179c8:	f241 0005 	movw	r0, #4101	; 0x1005
   179cc:	f7ff fdbe 	bl	1754c <bt_hci_cmd_send_sync>
	if (err) {
   179d0:	4604      	mov	r4, r0
   179d2:	2800      	cmp	r0, #0
   179d4:	d1f3      	bne.n	179be <bt_br_init+0xe>
	read_buffer_size_complete(rsp);
   179d6:	9801      	ldr	r0, [sp, #4]
   179d8:	f7fe ff2c 	bl	16834 <read_buffer_size_complete>
	net_buf_unref(rsp);
   179dc:	9801      	ldr	r0, [sp, #4]
   179de:	f014 fe08 	bl	2c5f2 <net_buf_unref>
	return 0;
   179e2:	e7ec      	b.n	179be <bt_br_init+0xe>
   179e4:	20000370 	.word	0x20000370

000179e8 <set_event_mask>:
{
   179e8:	b510      	push	{r4, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   179ea:	2108      	movs	r1, #8
   179ec:	f640 4001 	movw	r0, #3073	; 0xc01
   179f0:	f7ff fd6e 	bl	174d0 <bt_hci_cmd_create>
	if (!buf) {
   179f4:	b188      	cbz	r0, 17a1a <set_event_mask+0x32>
   179f6:	4604      	mov	r4, r0
   179f8:	2108      	movs	r1, #8
   179fa:	300c      	adds	r0, #12
   179fc:	f014 fe40 	bl	2c680 <net_buf_simple_add>
   17a00:	4602      	mov	r2, r0
	sys_put_le64(mask, ev->events);
   17a02:	4807      	ldr	r0, [pc, #28]	; (17a20 <set_event_mask+0x38>)
   17a04:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   17a08:	f012 f9aa 	bl	29d60 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   17a0c:	2200      	movs	r2, #0
   17a0e:	4621      	mov	r1, r4
   17a10:	f640 4001 	movw	r0, #3073	; 0xc01
   17a14:	f7ff fd9a 	bl	1754c <bt_hci_cmd_send_sync>
}
   17a18:	bd10      	pop	{r4, pc}
		return -ENOBUFS;
   17a1a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   17a1e:	e7fb      	b.n	17a18 <set_event_mask+0x30>
   17a20:	02008810 	.word	0x02008810

00017a24 <hci_vs_init>:
{
   17a24:	b510      	push	{r4, lr}
   17a26:	b082      	sub	sp, #8
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   17a28:	aa01      	add	r2, sp, #4
   17a2a:	2100      	movs	r1, #0
   17a2c:	f64f 4001 	movw	r0, #64513	; 0xfc01
   17a30:	f7ff fd8c 	bl	1754c <bt_hci_cmd_send_sync>
	if (err) {
   17a34:	bb60      	cbnz	r0, 17a90 <hci_vs_init+0x6c>
	net_buf_unref(rsp);
   17a36:	9801      	ldr	r0, [sp, #4]
   17a38:	f014 fddb 	bl	2c5f2 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   17a3c:	aa01      	add	r2, sp, #4
   17a3e:	2100      	movs	r1, #0
   17a40:	f64f 4002 	movw	r0, #64514	; 0xfc02
   17a44:	f7ff fd82 	bl	1754c <bt_hci_cmd_send_sync>
	if (err) {
   17a48:	2800      	cmp	r0, #0
   17a4a:	d153      	bne.n	17af4 <hci_vs_init+0xd0>
	rp.cmds = (void *)rsp->data;
   17a4c:	9b01      	ldr	r3, [sp, #4]
   17a4e:	68d9      	ldr	r1, [r3, #12]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   17a50:	4c58      	ldr	r4, [pc, #352]	; (17bb4 <hci_vs_init+0x190>)
   17a52:	2202      	movs	r2, #2
   17a54:	3101      	adds	r1, #1
   17a56:	4620      	mov	r0, r4
   17a58:	f012 f8ab 	bl	29bb2 <memcpy>
	net_buf_unref(rsp);
   17a5c:	9801      	ldr	r0, [sp, #4]
   17a5e:	f014 fdc8 	bl	2c5f2 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   17a62:	7823      	ldrb	r3, [r4, #0]
   17a64:	f013 0f04 	tst.w	r3, #4
   17a68:	d042      	beq.n	17af0 <hci_vs_init+0xcc>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   17a6a:	aa01      	add	r2, sp, #4
   17a6c:	2100      	movs	r1, #0
   17a6e:	f64f 4003 	movw	r0, #64515	; 0xfc03
   17a72:	f7ff fd6b 	bl	1754c <bt_hci_cmd_send_sync>
		if (err) {
   17a76:	2800      	cmp	r0, #0
   17a78:	d16c      	bne.n	17b54 <hci_vs_init+0x130>
		rp.feat = (void *)rsp->data;
   17a7a:	9b01      	ldr	r3, [sp, #4]
   17a7c:	68d9      	ldr	r1, [r3, #12]
		memcpy(bt_dev.vs_features, rp.feat->features,
   17a7e:	2201      	movs	r2, #1
   17a80:	4411      	add	r1, r2
   17a82:	484d      	ldr	r0, [pc, #308]	; (17bb8 <hci_vs_init+0x194>)
   17a84:	f012 f895 	bl	29bb2 <memcpy>
		net_buf_unref(rsp);
   17a88:	9801      	ldr	r0, [sp, #4]
   17a8a:	f014 fdb2 	bl	2c5f2 <net_buf_unref>
   17a8e:	e02f      	b.n	17af0 <hci_vs_init+0xcc>
		LOG_WRN("Vendor HCI extensions not available");
   17a90:	2006      	movs	r0, #6
   17a92:	f7fc f939 	bl	13d08 <z_log_msg_alloc>
   17a96:	2200      	movs	r2, #0
   17a98:	f36f 0200 	bfc	r2, #0, #1
   17a9c:	f36f 0241 	bfc	r2, #1, #1
   17aa0:	f36f 0282 	bfc	r2, #2, #1
   17aa4:	f36f 02c5 	bfc	r2, #3, #3
   17aa8:	2302      	movs	r3, #2
   17aaa:	f363 1288 	bfi	r2, r3, #6, #3
   17aae:	2308      	movs	r3, #8
   17ab0:	f363 2252 	bfi	r2, r3, #9, #10
   17ab4:	f36f 42de 	bfc	r2, #19, #12
   17ab8:	f36f 72df 	bfc	r2, #31, #1
   17abc:	4684      	mov	ip, r0
   17abe:	b190      	cbz	r0, 17ae6 <hci_vs_init+0xc2>
   17ac0:	f110 0310 	adds.w	r3, r0, #16
   17ac4:	d001      	beq.n	17aca <hci_vs_init+0xa6>
   17ac6:	493d      	ldr	r1, [pc, #244]	; (17bbc <hci_vs_init+0x198>)
   17ac8:	6141      	str	r1, [r0, #20]
   17aca:	b163      	cbz	r3, 17ae6 <hci_vs_init+0xc2>
   17acc:	2302      	movs	r3, #2
   17ace:	f88d 3000 	strb.w	r3, [sp]
   17ad2:	2300      	movs	r3, #0
   17ad4:	f88d 3001 	strb.w	r3, [sp, #1]
   17ad8:	f88d 3002 	strb.w	r3, [sp, #2]
   17adc:	f88d 3003 	strb.w	r3, [sp, #3]
   17ae0:	9800      	ldr	r0, [sp, #0]
   17ae2:	f8cc 0010 	str.w	r0, [ip, #16]
   17ae6:	2300      	movs	r3, #0
   17ae8:	4935      	ldr	r1, [pc, #212]	; (17bc0 <hci_vs_init+0x19c>)
   17aea:	4660      	mov	r0, ip
   17aec:	f011 fb75 	bl	291da <z_log_msg_finalize>
}
   17af0:	b002      	add	sp, #8
   17af2:	bd10      	pop	{r4, pc}
		LOG_WRN("Failed to read supported vendor commands");
   17af4:	2006      	movs	r0, #6
   17af6:	f7fc f907 	bl	13d08 <z_log_msg_alloc>
   17afa:	2200      	movs	r2, #0
   17afc:	f36f 0200 	bfc	r2, #0, #1
   17b00:	f36f 0241 	bfc	r2, #1, #1
   17b04:	f36f 0282 	bfc	r2, #2, #1
   17b08:	f36f 02c5 	bfc	r2, #3, #3
   17b0c:	2302      	movs	r3, #2
   17b0e:	f363 1288 	bfi	r2, r3, #6, #3
   17b12:	2308      	movs	r3, #8
   17b14:	f363 2252 	bfi	r2, r3, #9, #10
   17b18:	f36f 42de 	bfc	r2, #19, #12
   17b1c:	f36f 72df 	bfc	r2, #31, #1
   17b20:	4604      	mov	r4, r0
   17b22:	b188      	cbz	r0, 17b48 <hci_vs_init+0x124>
   17b24:	f110 0310 	adds.w	r3, r0, #16
   17b28:	d001      	beq.n	17b2e <hci_vs_init+0x10a>
   17b2a:	4926      	ldr	r1, [pc, #152]	; (17bc4 <hci_vs_init+0x1a0>)
   17b2c:	6141      	str	r1, [r0, #20]
   17b2e:	b15b      	cbz	r3, 17b48 <hci_vs_init+0x124>
   17b30:	2302      	movs	r3, #2
   17b32:	f88d 3000 	strb.w	r3, [sp]
   17b36:	2300      	movs	r3, #0
   17b38:	f88d 3001 	strb.w	r3, [sp, #1]
   17b3c:	f88d 3002 	strb.w	r3, [sp, #2]
   17b40:	f88d 3003 	strb.w	r3, [sp, #3]
   17b44:	9800      	ldr	r0, [sp, #0]
   17b46:	6120      	str	r0, [r4, #16]
   17b48:	2300      	movs	r3, #0
   17b4a:	491d      	ldr	r1, [pc, #116]	; (17bc0 <hci_vs_init+0x19c>)
   17b4c:	4620      	mov	r0, r4
   17b4e:	f011 fb44 	bl	291da <z_log_msg_finalize>
		return;
   17b52:	e7cd      	b.n	17af0 <hci_vs_init+0xcc>
			LOG_WRN("Failed to read supported vendor features");
   17b54:	2006      	movs	r0, #6
   17b56:	f7fc f8d7 	bl	13d08 <z_log_msg_alloc>
   17b5a:	2200      	movs	r2, #0
   17b5c:	f36f 0200 	bfc	r2, #0, #1
   17b60:	f36f 0241 	bfc	r2, #1, #1
   17b64:	f36f 0282 	bfc	r2, #2, #1
   17b68:	f36f 02c5 	bfc	r2, #3, #3
   17b6c:	2302      	movs	r3, #2
   17b6e:	f363 1288 	bfi	r2, r3, #6, #3
   17b72:	2308      	movs	r3, #8
   17b74:	f363 2252 	bfi	r2, r3, #9, #10
   17b78:	f36f 42de 	bfc	r2, #19, #12
   17b7c:	f36f 72df 	bfc	r2, #31, #1
   17b80:	4604      	mov	r4, r0
   17b82:	b188      	cbz	r0, 17ba8 <hci_vs_init+0x184>
   17b84:	f110 0310 	adds.w	r3, r0, #16
   17b88:	d001      	beq.n	17b8e <hci_vs_init+0x16a>
   17b8a:	490f      	ldr	r1, [pc, #60]	; (17bc8 <hci_vs_init+0x1a4>)
   17b8c:	6141      	str	r1, [r0, #20]
   17b8e:	b15b      	cbz	r3, 17ba8 <hci_vs_init+0x184>
   17b90:	2302      	movs	r3, #2
   17b92:	f88d 3000 	strb.w	r3, [sp]
   17b96:	2300      	movs	r3, #0
   17b98:	f88d 3001 	strb.w	r3, [sp, #1]
   17b9c:	f88d 3002 	strb.w	r3, [sp, #2]
   17ba0:	f88d 3003 	strb.w	r3, [sp, #3]
   17ba4:	9800      	ldr	r0, [sp, #0]
   17ba6:	6120      	str	r0, [r4, #16]
   17ba8:	2300      	movs	r3, #0
   17baa:	4905      	ldr	r1, [pc, #20]	; (17bc0 <hci_vs_init+0x19c>)
   17bac:	4620      	mov	r0, r4
   17bae:	f011 fb14 	bl	291da <z_log_msg_finalize>
			return;
   17bb2:	e79d      	b.n	17af0 <hci_vs_init+0xcc>
   17bb4:	20000429 	.word	0x20000429
   17bb8:	20000428 	.word	0x20000428
   17bbc:	00032710 	.word	0x00032710
   17bc0:	00031428 	.word	0x00031428
   17bc4:	00032734 	.word	0x00032734
   17bc8:	00032760 	.word	0x00032760

00017bcc <hci_init>:
{
   17bcc:	b500      	push	{lr}
   17bce:	b083      	sub	sp, #12
	err = common_init();
   17bd0:	f7ff fd5a 	bl	17688 <common_init>
	if (err) {
   17bd4:	4603      	mov	r3, r0
   17bd6:	b118      	cbz	r0, 17be0 <hci_init+0x14>
}
   17bd8:	4618      	mov	r0, r3
   17bda:	b003      	add	sp, #12
   17bdc:	f85d fb04 	ldr.w	pc, [sp], #4
	err = le_init();
   17be0:	f7ff fe1e 	bl	17820 <le_init>
	if (err) {
   17be4:	4603      	mov	r3, r0
   17be6:	2800      	cmp	r0, #0
   17be8:	d1f6      	bne.n	17bd8 <hci_init+0xc>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   17bea:	4b27      	ldr	r3, [pc, #156]	; (17c88 <hci_init+0xbc>)
   17bec:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   17bf0:	f013 0f20 	tst.w	r3, #32
   17bf4:	d00e      	beq.n	17c14 <hci_init+0x48>
	else if (!bt_dev.le.acl_mtu) {
   17bf6:	4b24      	ldr	r3, [pc, #144]	; (17c88 <hci_init+0xbc>)
   17bf8:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
   17bfc:	b183      	cbz	r3, 17c20 <hci_init+0x54>
	err = set_event_mask();
   17bfe:	f7ff fef3 	bl	179e8 <set_event_mask>
	if (err) {
   17c02:	4603      	mov	r3, r0
   17c04:	2800      	cmp	r0, #0
   17c06:	d1e7      	bne.n	17bd8 <hci_init+0xc>
	hci_vs_init();
   17c08:	f7ff ff0c 	bl	17a24 <hci_vs_init>
	err = bt_id_init();
   17c0c:	f001 f89a 	bl	18d44 <bt_id_init>
   17c10:	4603      	mov	r3, r0
	if (err) {
   17c12:	e7e1      	b.n	17bd8 <hci_init+0xc>
		err = bt_br_init();
   17c14:	f7ff fecc 	bl	179b0 <bt_br_init>
		if (err) {
   17c18:	4603      	mov	r3, r0
   17c1a:	2800      	cmp	r0, #0
   17c1c:	d0ef      	beq.n	17bfe <hci_init+0x32>
   17c1e:	e7db      	b.n	17bd8 <hci_init+0xc>
		LOG_ERR("ACL BR/EDR buffers not initialized");
   17c20:	2006      	movs	r0, #6
   17c22:	f7fc f871 	bl	13d08 <z_log_msg_alloc>
   17c26:	2200      	movs	r2, #0
   17c28:	f36f 0200 	bfc	r2, #0, #1
   17c2c:	f36f 0241 	bfc	r2, #1, #1
   17c30:	f36f 0282 	bfc	r2, #2, #1
   17c34:	f36f 02c5 	bfc	r2, #3, #3
   17c38:	2301      	movs	r3, #1
   17c3a:	f363 1288 	bfi	r2, r3, #6, #3
   17c3e:	2308      	movs	r3, #8
   17c40:	f363 2252 	bfi	r2, r3, #9, #10
   17c44:	f36f 42de 	bfc	r2, #19, #12
   17c48:	f36f 72df 	bfc	r2, #31, #1
   17c4c:	4684      	mov	ip, r0
   17c4e:	b190      	cbz	r0, 17c76 <hci_init+0xaa>
   17c50:	f110 0310 	adds.w	r3, r0, #16
   17c54:	d001      	beq.n	17c5a <hci_init+0x8e>
   17c56:	490d      	ldr	r1, [pc, #52]	; (17c8c <hci_init+0xc0>)
   17c58:	6141      	str	r1, [r0, #20]
   17c5a:	b163      	cbz	r3, 17c76 <hci_init+0xaa>
   17c5c:	2302      	movs	r3, #2
   17c5e:	f88d 3004 	strb.w	r3, [sp, #4]
   17c62:	2300      	movs	r3, #0
   17c64:	f88d 3005 	strb.w	r3, [sp, #5]
   17c68:	f88d 3006 	strb.w	r3, [sp, #6]
   17c6c:	f88d 3007 	strb.w	r3, [sp, #7]
   17c70:	9801      	ldr	r0, [sp, #4]
   17c72:	f8cc 0010 	str.w	r0, [ip, #16]
   17c76:	2300      	movs	r3, #0
   17c78:	4905      	ldr	r1, [pc, #20]	; (17c90 <hci_init+0xc4>)
   17c7a:	4660      	mov	r0, ip
   17c7c:	f011 faad 	bl	291da <z_log_msg_finalize>
		return -EIO;
   17c80:	f06f 0304 	mvn.w	r3, #4
   17c84:	e7a8      	b.n	17bd8 <hci_init+0xc>
   17c86:	bf00      	nop
   17c88:	20000370 	.word	0x20000370
   17c8c:	0003278c 	.word	0x0003278c
   17c90:	00031428 	.word	0x00031428

00017c94 <bt_le_create_conn_legacy>:
{
   17c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17c98:	b086      	sub	sp, #24
   17c9a:	4604      	mov	r4, r0
		use_filter = atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT);
   17c9c:	2100      	movs	r1, #0
   17c9e:	3004      	adds	r0, #4
   17ca0:	f012 f8a1 	bl	29de6 <atomic_test_bit>
   17ca4:	4606      	mov	r6, r0
	err = bt_id_set_create_conn_own_addr(use_filter, &own_addr_type);
   17ca6:	f10d 010b 	add.w	r1, sp, #11
   17caa:	f001 f819 	bl	18ce0 <bt_id_set_create_conn_own_addr>
	if (err) {
   17cae:	b110      	cbz	r0, 17cb6 <bt_le_create_conn_legacy+0x22>
}
   17cb0:	b006      	add	sp, #24
   17cb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
   17cb6:	2119      	movs	r1, #25
   17cb8:	f242 000d 	movw	r0, #8205	; 0x200d
   17cbc:	f7ff fc08 	bl	174d0 <bt_hci_cmd_create>
	if (!buf) {
   17cc0:	4607      	mov	r7, r0
   17cc2:	2800      	cmp	r0, #0
   17cc4:	d04b      	beq.n	17d5e <bt_le_create_conn_legacy+0xca>
   17cc6:	2119      	movs	r1, #25
   17cc8:	300c      	adds	r0, #12
   17cca:	f014 fcd9 	bl	2c680 <net_buf_simple_add>
   17cce:	4605      	mov	r5, r0
	memset(cp, 0, sizeof(*cp));
   17cd0:	2219      	movs	r2, #25
   17cd2:	2100      	movs	r1, #0
   17cd4:	f011 ff9c 	bl	29c10 <memset>
	cp->own_addr_type = own_addr_type;
   17cd8:	f89d 300b 	ldrb.w	r3, [sp, #11]
   17cdc:	732b      	strb	r3, [r5, #12]
	if (use_filter) {
   17cde:	b35e      	cbz	r6, 17d38 <bt_le_create_conn_legacy+0xa4>
	memcpy(dst, src, sizeof(*dst));
   17ce0:	2207      	movs	r2, #7
   17ce2:	4920      	ldr	r1, [pc, #128]	; (17d64 <bt_le_create_conn_legacy+0xd0>)
   17ce4:	1d68      	adds	r0, r5, #5
   17ce6:	f011 ff64 	bl	29bb2 <memcpy>
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_FILTER;
   17cea:	2301      	movs	r3, #1
   17cec:	712b      	strb	r3, [r5, #4]
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
   17cee:	4a1e      	ldr	r2, [pc, #120]	; (17d68 <bt_le_create_conn_legacy+0xd4>)
   17cf0:	8993      	ldrh	r3, [r2, #12]
   17cf2:	802b      	strh	r3, [r5, #0]
	cp->scan_window = sys_cpu_to_le16(bt_dev.create_param.window);
   17cf4:	89d3      	ldrh	r3, [r2, #14]
   17cf6:	806b      	strh	r3, [r5, #2]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
   17cf8:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
   17cfc:	f8a5 300d 	strh.w	r3, [r5, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
   17d00:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
   17d04:	f8a5 300f 	strh.w	r3, [r5, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
   17d08:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
   17d0c:	f8a5 3011 	strh.w	r3, [r5, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
   17d10:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   17d14:	f8a5 3013 	strh.w	r3, [r5, #19]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
   17d18:	2301      	movs	r3, #1
   17d1a:	9300      	str	r3, [sp, #0]
   17d1c:	230c      	movs	r3, #12
   17d1e:	32cc      	adds	r2, #204	; 0xcc
   17d20:	eb0d 0103 	add.w	r1, sp, r3
   17d24:	4638      	mov	r0, r7
   17d26:	f7ff fbc1 	bl	174ac <bt_hci_cmd_state_set_init>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
   17d2a:	2200      	movs	r2, #0
   17d2c:	4639      	mov	r1, r7
   17d2e:	f242 000d 	movw	r0, #8205	; 0x200d
   17d32:	f7ff fc0b 	bl	1754c <bt_hci_cmd_send_sync>
   17d36:	e7bb      	b.n	17cb0 <bt_le_create_conn_legacy+0x1c>
		const bt_addr_le_t *peer_addr = &conn->le.dst;
   17d38:	f104 0888 	add.w	r8, r4, #136	; 0x88
		if (!bt_addr_le_eq(&conn->le.resp_addr, BT_ADDR_LE_ANY)) {
   17d3c:	f104 0696 	add.w	r6, r4, #150	; 0x96
	return memcmp(a, b, sizeof(*a));
   17d40:	2207      	movs	r2, #7
   17d42:	4908      	ldr	r1, [pc, #32]	; (17d64 <bt_le_create_conn_legacy+0xd0>)
   17d44:	4630      	mov	r0, r6
   17d46:	f011 ff22 	bl	29b8e <memcmp>
   17d4a:	b900      	cbnz	r0, 17d4e <bt_le_create_conn_legacy+0xba>
		const bt_addr_le_t *peer_addr = &conn->le.dst;
   17d4c:	4646      	mov	r6, r8
	memcpy(dst, src, sizeof(*dst));
   17d4e:	2207      	movs	r2, #7
   17d50:	4631      	mov	r1, r6
   17d52:	1d68      	adds	r0, r5, #5
   17d54:	f011 ff2d 	bl	29bb2 <memcpy>
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_NO_FILTER;
   17d58:	2300      	movs	r3, #0
   17d5a:	712b      	strb	r3, [r5, #4]
   17d5c:	e7c7      	b.n	17cee <bt_le_create_conn_legacy+0x5a>
		return -ENOBUFS;
   17d5e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   17d62:	e7a5      	b.n	17cb0 <bt_le_create_conn_legacy+0x1c>
   17d64:	0003236c 	.word	0x0003236c
   17d68:	20000370 	.word	0x20000370

00017d6c <bt_hci_le_rand>:
{
   17d6c:	b570      	push	{r4, r5, r6, lr}
   17d6e:	b082      	sub	sp, #8
   17d70:	4606      	mov	r6, r0
   17d72:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   17d74:	4b12      	ldr	r3, [pc, #72]	; (17dc0 <bt_hci_le_rand+0x54>)
   17d76:	f993 3093 	ldrsb.w	r3, [r3, #147]	; 0x93
   17d7a:	2b00      	cmp	r3, #0
   17d7c:	da1d      	bge.n	17dba <bt_hci_le_rand+0x4e>
	while (len > 0) {
   17d7e:	b1c4      	cbz	r4, 17db2 <bt_hci_le_rand+0x46>
		count = MIN(len, sizeof(rp->rand));
   17d80:	4625      	mov	r5, r4
   17d82:	2c08      	cmp	r4, #8
   17d84:	bf28      	it	cs
   17d86:	2508      	movcs	r5, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   17d88:	aa01      	add	r2, sp, #4
   17d8a:	2100      	movs	r1, #0
   17d8c:	f242 0018 	movw	r0, #8216	; 0x2018
   17d90:	f7ff fbdc 	bl	1754c <bt_hci_cmd_send_sync>
		if (err) {
   17d94:	4603      	mov	r3, r0
   17d96:	b968      	cbnz	r0, 17db4 <bt_hci_le_rand+0x48>
		rp = (void *)rsp->data;
   17d98:	9b01      	ldr	r3, [sp, #4]
   17d9a:	68d9      	ldr	r1, [r3, #12]
		memcpy(buffer, rp->rand, count);
   17d9c:	462a      	mov	r2, r5
   17d9e:	3101      	adds	r1, #1
   17da0:	4630      	mov	r0, r6
   17da2:	f011 ff06 	bl	29bb2 <memcpy>
		net_buf_unref(rsp);
   17da6:	9801      	ldr	r0, [sp, #4]
   17da8:	f014 fc23 	bl	2c5f2 <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
   17dac:	442e      	add	r6, r5
		len -= count;
   17dae:	1b64      	subs	r4, r4, r5
   17db0:	e7e5      	b.n	17d7e <bt_hci_le_rand+0x12>
	return 0;
   17db2:	2300      	movs	r3, #0
}
   17db4:	4618      	mov	r0, r3
   17db6:	b002      	add	sp, #8
   17db8:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTSUP;
   17dba:	f06f 0385 	mvn.w	r3, #133	; 0x85
   17dbe:	e7f9      	b.n	17db4 <bt_hci_le_rand+0x48>
   17dc0:	20000370 	.word	0x20000370

00017dc4 <le_conn_complete_cancel>:
{
   17dc4:	b510      	push	{r4, lr}
   17dc6:	b082      	sub	sp, #8
	conn = find_pending_connect(BT_HCI_ROLE_CENTRAL, NULL);
   17dc8:	2100      	movs	r1, #0
   17dca:	4608      	mov	r0, r1
   17dcc:	f7fe fd48 	bl	16860 <find_pending_connect>
	if (!conn) {
   17dd0:	b178      	cbz	r0, 17df2 <le_conn_complete_cancel+0x2e>
   17dd2:	4604      	mov	r4, r0
	conn->err = BT_HCI_ERR_UNKNOWN_CONN_ID;
   17dd4:	2302      	movs	r3, #2
   17dd6:	7243      	strb	r3, [r0, #9]
		if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
   17dd8:	2100      	movs	r1, #0
   17dda:	3004      	adds	r0, #4
   17ddc:	f012 f803 	bl	29de6 <atomic_test_bit>
   17de0:	b3b8      	cbz	r0, 17e52 <le_conn_complete_cancel+0x8e>
			bt_le_create_conn(conn);
   17de2:	4620      	mov	r0, r4
   17de4:	f012 f87a 	bl	29edc <bt_le_create_conn>
	bt_conn_unref(conn);
   17de8:	4620      	mov	r0, r4
   17dea:	f012 fa93 	bl	2a314 <bt_conn_unref>
}
   17dee:	b002      	add	sp, #8
   17df0:	bd10      	pop	{r4, pc}
		LOG_ERR("No pending central connection");
   17df2:	2006      	movs	r0, #6
   17df4:	f7fb ff88 	bl	13d08 <z_log_msg_alloc>
   17df8:	2200      	movs	r2, #0
   17dfa:	f36f 0200 	bfc	r2, #0, #1
   17dfe:	f36f 0241 	bfc	r2, #1, #1
   17e02:	f36f 0282 	bfc	r2, #2, #1
   17e06:	f36f 02c5 	bfc	r2, #3, #3
   17e0a:	2301      	movs	r3, #1
   17e0c:	f363 1288 	bfi	r2, r3, #6, #3
   17e10:	2308      	movs	r3, #8
   17e12:	f363 2252 	bfi	r2, r3, #9, #10
   17e16:	f36f 42de 	bfc	r2, #19, #12
   17e1a:	f36f 72df 	bfc	r2, #31, #1
   17e1e:	4604      	mov	r4, r0
   17e20:	b188      	cbz	r0, 17e46 <le_conn_complete_cancel+0x82>
   17e22:	f110 0310 	adds.w	r3, r0, #16
   17e26:	d001      	beq.n	17e2c <le_conn_complete_cancel+0x68>
   17e28:	490c      	ldr	r1, [pc, #48]	; (17e5c <le_conn_complete_cancel+0x98>)
   17e2a:	6141      	str	r1, [r0, #20]
   17e2c:	b15b      	cbz	r3, 17e46 <le_conn_complete_cancel+0x82>
   17e2e:	2302      	movs	r3, #2
   17e30:	f88d 3004 	strb.w	r3, [sp, #4]
   17e34:	2300      	movs	r3, #0
   17e36:	f88d 3005 	strb.w	r3, [sp, #5]
   17e3a:	f88d 3006 	strb.w	r3, [sp, #6]
   17e3e:	f88d 3007 	strb.w	r3, [sp, #7]
   17e42:	9801      	ldr	r0, [sp, #4]
   17e44:	6120      	str	r0, [r4, #16]
   17e46:	2300      	movs	r3, #0
   17e48:	4905      	ldr	r1, [pc, #20]	; (17e60 <le_conn_complete_cancel+0x9c>)
   17e4a:	4620      	mov	r0, r4
   17e4c:	f011 f9c5 	bl	291da <z_log_msg_finalize>
		return;
   17e50:	e7cd      	b.n	17dee <le_conn_complete_cancel+0x2a>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   17e52:	2100      	movs	r1, #0
   17e54:	4620      	mov	r0, r4
   17e56:	f001 fd79 	bl	1994c <bt_conn_set_state>
   17e5a:	e7c5      	b.n	17de8 <le_conn_complete_cancel+0x24>
   17e5c:	000327b0 	.word	0x000327b0
   17e60:	00031428 	.word	0x00031428

00017e64 <bt_le_create_conn_cancel>:
{
   17e64:	b530      	push	{r4, r5, lr}
   17e66:	b087      	sub	sp, #28
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
   17e68:	2100      	movs	r1, #0
   17e6a:	f242 000e 	movw	r0, #8206	; 0x200e
   17e6e:	f7ff fb2f 	bl	174d0 <bt_hci_cmd_create>
   17e72:	4604      	mov	r4, r0
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
   17e74:	2500      	movs	r5, #0
   17e76:	9500      	str	r5, [sp, #0]
   17e78:	230c      	movs	r3, #12
   17e7a:	4a06      	ldr	r2, [pc, #24]	; (17e94 <bt_le_create_conn_cancel+0x30>)
   17e7c:	eb0d 0103 	add.w	r1, sp, r3
   17e80:	f7ff fb14 	bl	174ac <bt_hci_cmd_state_set_init>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN_CANCEL, buf, NULL);
   17e84:	462a      	mov	r2, r5
   17e86:	4621      	mov	r1, r4
   17e88:	f242 000e 	movw	r0, #8206	; 0x200e
   17e8c:	f7ff fb5e 	bl	1754c <bt_hci_cmd_send_sync>
}
   17e90:	b007      	add	sp, #28
   17e92:	bd30      	pop	{r4, r5, pc}
   17e94:	2000043c 	.word	0x2000043c

00017e98 <conn_auto_initiate>:
	if (conn->state != BT_CONN_CONNECTED) {
   17e98:	7a83      	ldrb	r3, [r0, #10]
   17e9a:	2b07      	cmp	r3, #7
   17e9c:	d000      	beq.n	17ea0 <conn_auto_initiate+0x8>
   17e9e:	4770      	bx	lr
{
   17ea0:	b570      	push	{r4, r5, r6, lr}
   17ea2:	b084      	sub	sp, #16
   17ea4:	4604      	mov	r4, r0
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   17ea6:	210d      	movs	r1, #13
   17ea8:	3004      	adds	r0, #4
   17eaa:	f011 ff9c 	bl	29de6 <atomic_test_bit>
   17eae:	b960      	cbnz	r0, 17eca <conn_auto_initiate+0x32>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   17eb0:	78e3      	ldrb	r3, [r4, #3]
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   17eb2:	b12b      	cbz	r3, 17ec0 <conn_auto_initiate+0x28>
	     BT_FEAT_LE_PER_INIT_FEAT_XCHG(bt_dev.le.features))) {
   17eb4:	4b6a      	ldr	r3, [pc, #424]	; (18060 <conn_auto_initiate+0x1c8>)
   17eb6:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   17eba:	f013 0f08 	tst.w	r3, #8
   17ebe:	d004      	beq.n	17eca <conn_auto_initiate+0x32>
		err = hci_le_read_remote_features(conn);
   17ec0:	4620      	mov	r0, r4
   17ec2:	f011 fff2 	bl	29eaa <hci_le_read_remote_features>
		if (err) {
   17ec6:	4605      	mov	r5, r0
   17ec8:	b9c8      	cbnz	r0, 17efe <conn_auto_initiate+0x66>
	    BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
   17eca:	4b65      	ldr	r3, [pc, #404]	; (18060 <conn_auto_initiate+0x1c8>)
   17ecc:	f893 30d1 	ldrb.w	r3, [r3, #209]	; 0xd1
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   17ed0:	f013 0f01 	tst.w	r3, #1
   17ed4:	d004      	beq.n	17ee0 <conn_auto_initiate+0x48>
	    !skip_auto_phy_update_on_conn_establishment(conn)) {
   17ed6:	4620      	mov	r0, r4
   17ed8:	f011 ff82 	bl	29de0 <skip_auto_phy_update_on_conn_establishment>
	    BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
   17edc:	2800      	cmp	r0, #0
   17ede:	d040      	beq.n	17f62 <conn_auto_initiate+0xca>
	    BT_FEAT_LE_DLE(bt_dev.le.features)) {
   17ee0:	4b5f      	ldr	r3, [pc, #380]	; (18060 <conn_auto_initiate+0x1c8>)
   17ee2:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   17ee6:	f013 0f20 	tst.w	r3, #32
   17eea:	d006      	beq.n	17efa <conn_auto_initiate+0x62>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   17eec:	4b5c      	ldr	r3, [pc, #368]	; (18060 <conn_auto_initiate+0x1c8>)
   17eee:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
   17ef2:	689b      	ldr	r3, [r3, #8]
   17ef4:	f013 0f02 	tst.w	r3, #2
   17ef8:	d16e      	bne.n	17fd8 <conn_auto_initiate+0x140>
}
   17efa:	b004      	add	sp, #16
   17efc:	bd70      	pop	{r4, r5, r6, pc}
			LOG_ERR("Failed read remote features (%d)", err);
   17efe:	2008      	movs	r0, #8
   17f00:	f7fb ff02 	bl	13d08 <z_log_msg_alloc>
   17f04:	2200      	movs	r2, #0
   17f06:	f36f 0200 	bfc	r2, #0, #1
   17f0a:	f36f 0241 	bfc	r2, #1, #1
   17f0e:	f36f 0282 	bfc	r2, #2, #1
   17f12:	f36f 02c5 	bfc	r2, #3, #3
   17f16:	2301      	movs	r3, #1
   17f18:	f363 1288 	bfi	r2, r3, #6, #3
   17f1c:	230c      	movs	r3, #12
   17f1e:	f363 2252 	bfi	r2, r3, #9, #10
   17f22:	f36f 42de 	bfc	r2, #19, #12
   17f26:	f36f 72df 	bfc	r2, #31, #1
   17f2a:	4684      	mov	ip, r0
   17f2c:	b198      	cbz	r0, 17f56 <conn_auto_initiate+0xbe>
   17f2e:	f110 0310 	adds.w	r3, r0, #16
   17f32:	d002      	beq.n	17f3a <conn_auto_initiate+0xa2>
   17f34:	494b      	ldr	r1, [pc, #300]	; (18064 <conn_auto_initiate+0x1cc>)
   17f36:	6141      	str	r1, [r0, #20]
   17f38:	6185      	str	r5, [r0, #24]
   17f3a:	b163      	cbz	r3, 17f56 <conn_auto_initiate+0xbe>
   17f3c:	2303      	movs	r3, #3
   17f3e:	f88d 300c 	strb.w	r3, [sp, #12]
   17f42:	2300      	movs	r3, #0
   17f44:	f88d 300d 	strb.w	r3, [sp, #13]
   17f48:	f88d 300e 	strb.w	r3, [sp, #14]
   17f4c:	f88d 300f 	strb.w	r3, [sp, #15]
   17f50:	9803      	ldr	r0, [sp, #12]
   17f52:	f8cc 0010 	str.w	r0, [ip, #16]
   17f56:	2300      	movs	r3, #0
   17f58:	4943      	ldr	r1, [pc, #268]	; (18068 <conn_auto_initiate+0x1d0>)
   17f5a:	4660      	mov	r0, ip
   17f5c:	f011 f93d 	bl	291da <z_log_msg_finalize>
   17f60:	e7b3      	b.n	17eca <conn_auto_initiate+0x32>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   17f62:	2100      	movs	r1, #0
   17f64:	9100      	str	r1, [sp, #0]
   17f66:	2302      	movs	r3, #2
   17f68:	461a      	mov	r2, r3
   17f6a:	4620      	mov	r0, r4
   17f6c:	f011 fff1 	bl	29f52 <bt_le_set_phy>
		if (err) {
   17f70:	4606      	mov	r6, r0
   17f72:	2800      	cmp	r0, #0
   17f74:	d0b4      	beq.n	17ee0 <conn_auto_initiate+0x48>
			LOG_ERR("Failed LE Set PHY (%d)", err);
   17f76:	2008      	movs	r0, #8
   17f78:	f7fb fec6 	bl	13d08 <z_log_msg_alloc>
   17f7c:	2200      	movs	r2, #0
   17f7e:	f36f 0200 	bfc	r2, #0, #1
   17f82:	f36f 0241 	bfc	r2, #1, #1
   17f86:	f36f 0282 	bfc	r2, #2, #1
   17f8a:	f36f 02c5 	bfc	r2, #3, #3
   17f8e:	2301      	movs	r3, #1
   17f90:	f363 1288 	bfi	r2, r3, #6, #3
   17f94:	230c      	movs	r3, #12
   17f96:	f363 2252 	bfi	r2, r3, #9, #10
   17f9a:	f36f 42de 	bfc	r2, #19, #12
   17f9e:	f36f 72df 	bfc	r2, #31, #1
   17fa2:	4605      	mov	r5, r0
   17fa4:	b190      	cbz	r0, 17fcc <conn_auto_initiate+0x134>
   17fa6:	f110 0310 	adds.w	r3, r0, #16
   17faa:	d002      	beq.n	17fb2 <conn_auto_initiate+0x11a>
   17fac:	492f      	ldr	r1, [pc, #188]	; (1806c <conn_auto_initiate+0x1d4>)
   17fae:	6141      	str	r1, [r0, #20]
   17fb0:	6186      	str	r6, [r0, #24]
   17fb2:	b15b      	cbz	r3, 17fcc <conn_auto_initiate+0x134>
   17fb4:	2303      	movs	r3, #3
   17fb6:	f88d 300c 	strb.w	r3, [sp, #12]
   17fba:	2300      	movs	r3, #0
   17fbc:	f88d 300d 	strb.w	r3, [sp, #13]
   17fc0:	f88d 300e 	strb.w	r3, [sp, #14]
   17fc4:	f88d 300f 	strb.w	r3, [sp, #15]
   17fc8:	9803      	ldr	r0, [sp, #12]
   17fca:	6128      	str	r0, [r5, #16]
   17fcc:	2300      	movs	r3, #0
   17fce:	4926      	ldr	r1, [pc, #152]	; (18068 <conn_auto_initiate+0x1d0>)
   17fd0:	4628      	mov	r0, r5
   17fd2:	f011 f902 	bl	291da <z_log_msg_finalize>
   17fd6:	e783      	b.n	17ee0 <conn_auto_initiate+0x48>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   17fd8:	f10d 010a 	add.w	r1, sp, #10
   17fdc:	a802      	add	r0, sp, #8
   17fde:	f7ff fb9d 	bl	1771c <hci_le_read_max_data_len>
			if (!err) {
   17fe2:	2800      	cmp	r0, #0
   17fe4:	d189      	bne.n	17efa <conn_auto_initiate+0x62>
				err = bt_le_set_data_len(conn,
   17fe6:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   17fea:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   17fee:	4620      	mov	r0, r4
   17ff0:	f011 ff92 	bl	29f18 <bt_le_set_data_len>
				if (err) {
   17ff4:	4605      	mov	r5, r0
   17ff6:	2800      	cmp	r0, #0
   17ff8:	f43f af7f 	beq.w	17efa <conn_auto_initiate+0x62>
					LOG_ERR("Failed to set data len (%d)", err);
   17ffc:	2008      	movs	r0, #8
   17ffe:	f7fb fe83 	bl	13d08 <z_log_msg_alloc>
   18002:	2200      	movs	r2, #0
   18004:	f36f 0200 	bfc	r2, #0, #1
   18008:	f36f 0241 	bfc	r2, #1, #1
   1800c:	f36f 0282 	bfc	r2, #2, #1
   18010:	f36f 02c5 	bfc	r2, #3, #3
   18014:	2301      	movs	r3, #1
   18016:	f363 1288 	bfi	r2, r3, #6, #3
   1801a:	230c      	movs	r3, #12
   1801c:	f363 2252 	bfi	r2, r3, #9, #10
   18020:	f36f 42de 	bfc	r2, #19, #12
   18024:	f36f 72df 	bfc	r2, #31, #1
   18028:	4604      	mov	r4, r0
   1802a:	b190      	cbz	r0, 18052 <conn_auto_initiate+0x1ba>
   1802c:	f110 0310 	adds.w	r3, r0, #16
   18030:	d002      	beq.n	18038 <conn_auto_initiate+0x1a0>
   18032:	490f      	ldr	r1, [pc, #60]	; (18070 <conn_auto_initiate+0x1d8>)
   18034:	6141      	str	r1, [r0, #20]
   18036:	6185      	str	r5, [r0, #24]
   18038:	b15b      	cbz	r3, 18052 <conn_auto_initiate+0x1ba>
   1803a:	2303      	movs	r3, #3
   1803c:	f88d 300c 	strb.w	r3, [sp, #12]
   18040:	2300      	movs	r3, #0
   18042:	f88d 300d 	strb.w	r3, [sp, #13]
   18046:	f88d 300e 	strb.w	r3, [sp, #14]
   1804a:	f88d 300f 	strb.w	r3, [sp, #15]
   1804e:	9803      	ldr	r0, [sp, #12]
   18050:	6120      	str	r0, [r4, #16]
   18052:	2300      	movs	r3, #0
   18054:	4904      	ldr	r1, [pc, #16]	; (18068 <conn_auto_initiate+0x1d0>)
   18056:	4620      	mov	r0, r4
   18058:	f011 f8bf 	bl	291da <z_log_msg_finalize>
		}
   1805c:	e74d      	b.n	17efa <conn_auto_initiate+0x62>
   1805e:	bf00      	nop
   18060:	20000370 	.word	0x20000370
   18064:	000327d0 	.word	0x000327d0
   18068:	00031428 	.word	0x00031428
   1806c:	000327f4 	.word	0x000327f4
   18070:	0003280c 	.word	0x0003280c

00018074 <bt_hci_le_enh_conn_complete>:
{
   18074:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18078:	b087      	sub	sp, #28
   1807a:	af00      	add	r7, sp, #0
   1807c:	4604      	mov	r4, r0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1807e:	f8b0 8001 	ldrh.w	r8, [r0, #1]
   18082:	fa1f f988 	uxth.w	r9, r8
	bool is_disconnected = conn_handle_is_disconnected(handle);
   18086:	4648      	mov	r0, r9
   18088:	f7fe fabc 	bl	16604 <conn_handle_is_disconnected>
   1808c:	4606      	mov	r6, r0
	if (evt->status) {
   1808e:	7820      	ldrb	r0, [r4, #0]
   18090:	b3c0      	cbz	r0, 18104 <bt_hci_le_enh_conn_complete+0x90>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   18092:	2802      	cmp	r0, #2
   18094:	d030      	beq.n	180f8 <bt_hci_le_enh_conn_complete+0x84>
		LOG_WRN("Unexpected status 0x%02x", evt->status);
   18096:	4604      	mov	r4, r0
   18098:	2008      	movs	r0, #8
   1809a:	f7fb fe35 	bl	13d08 <z_log_msg_alloc>
   1809e:	2200      	movs	r2, #0
   180a0:	f36f 0200 	bfc	r2, #0, #1
   180a4:	f36f 0241 	bfc	r2, #1, #1
   180a8:	f36f 0282 	bfc	r2, #2, #1
   180ac:	f36f 02c5 	bfc	r2, #3, #3
   180b0:	2302      	movs	r3, #2
   180b2:	f363 1288 	bfi	r2, r3, #6, #3
   180b6:	230c      	movs	r3, #12
   180b8:	f363 2252 	bfi	r2, r3, #9, #10
   180bc:	f36f 42de 	bfc	r2, #19, #12
   180c0:	f36f 72df 	bfc	r2, #31, #1
   180c4:	4605      	mov	r5, r0
   180c6:	b170      	cbz	r0, 180e6 <bt_hci_le_enh_conn_complete+0x72>
   180c8:	f110 0310 	adds.w	r3, r0, #16
   180cc:	d002      	beq.n	180d4 <bt_hci_le_enh_conn_complete+0x60>
   180ce:	4982      	ldr	r1, [pc, #520]	; (182d8 <bt_hci_le_enh_conn_complete+0x264>)
   180d0:	6141      	str	r1, [r0, #20]
   180d2:	6184      	str	r4, [r0, #24]
   180d4:	b13b      	cbz	r3, 180e6 <bt_hci_le_enh_conn_complete+0x72>
   180d6:	2303      	movs	r3, #3
   180d8:	713b      	strb	r3, [r7, #4]
   180da:	2300      	movs	r3, #0
   180dc:	717b      	strb	r3, [r7, #5]
   180de:	71bb      	strb	r3, [r7, #6]
   180e0:	71fb      	strb	r3, [r7, #7]
   180e2:	6878      	ldr	r0, [r7, #4]
   180e4:	6128      	str	r0, [r5, #16]
   180e6:	2300      	movs	r3, #0
   180e8:	497c      	ldr	r1, [pc, #496]	; (182dc <bt_hci_le_enh_conn_complete+0x268>)
   180ea:	4628      	mov	r0, r5
   180ec:	f011 f875 	bl	291da <z_log_msg_finalize>
}
   180f0:	371c      	adds	r7, #28
   180f2:	46bd      	mov	sp, r7
   180f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			le_conn_complete_cancel();
   180f8:	f7ff fe64 	bl	17dc4 <le_conn_complete_cancel>
			bt_le_scan_update(false);
   180fc:	2000      	movs	r0, #0
   180fe:	f000 ff6b 	bl	18fd8 <bt_le_scan_update>
			return;
   18102:	e7f5      	b.n	180f0 <bt_hci_le_enh_conn_complete+0x7c>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   18104:	7923      	ldrb	r3, [r4, #4]
   18106:	3b02      	subs	r3, #2
   18108:	b2db      	uxtb	r3, r3
   1810a:	2b01      	cmp	r3, #1
   1810c:	d95b      	bls.n	181c6 <bt_hci_le_enh_conn_complete+0x152>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   1810e:	78e3      	ldrb	r3, [r4, #3]
   18110:	2b01      	cmp	r3, #1
   18112:	d06b      	beq.n	181ec <bt_hci_le_enh_conn_complete+0x178>
				bt_lookup_id_addr(id, &evt->peer_addr));
   18114:	1d25      	adds	r5, r4, #4
		bt_addr_le_copy(&id_addr,
   18116:	4629      	mov	r1, r5
   18118:	f011 ffab 	bl	2a072 <bt_lookup_id_addr>
   1811c:	4601      	mov	r1, r0
   1811e:	2207      	movs	r2, #7
   18120:	f107 0008 	add.w	r0, r7, #8
   18124:	f011 fd45 	bl	29bb2 <memcpy>
   18128:	2207      	movs	r2, #7
   1812a:	4629      	mov	r1, r5
   1812c:	f107 0010 	add.w	r0, r7, #16
   18130:	f011 fd3f 	bl	29bb2 <memcpy>
	conn = find_pending_connect(evt->role, &id_addr);
   18134:	f107 0108 	add.w	r1, r7, #8
   18138:	78e0      	ldrb	r0, [r4, #3]
   1813a:	f7fe fb91 	bl	16860 <find_pending_connect>
   1813e:	4605      	mov	r5, r0
	    evt->role == BT_HCI_ROLE_CENTRAL) {
   18140:	78e3      	ldrb	r3, [r4, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   18142:	b963      	cbnz	r3, 1815e <bt_hci_le_enh_conn_complete+0xea>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   18144:	4b66      	ldr	r3, [pc, #408]	; (182e0 <bt_hci_le_enh_conn_complete+0x26c>)
   18146:	f3bf 8f5b 	dmb	ish
   1814a:	e853 1f00 	ldrex	r1, [r3]
   1814e:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   18152:	e843 1200 	strex	r2, r1, [r3]
   18156:	2a00      	cmp	r2, #0
   18158:	d1f7      	bne.n	1814a <bt_hci_le_enh_conn_complete+0xd6>
   1815a:	f3bf 8f5b 	dmb	ish
	if (!conn) {
   1815e:	2d00      	cmp	r5, #0
   18160:	d048      	beq.n	181f4 <bt_hci_le_enh_conn_complete+0x180>
	conn->handle = handle;
   18162:	4628      	mov	r0, r5
   18164:	f820 8b88 	strh.w	r8, [r0], #136
   18168:	2207      	movs	r2, #7
   1816a:	f107 0108 	add.w	r1, r7, #8
   1816e:	f011 fd20 	bl	29bb2 <memcpy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   18172:	f8b4 3017 	ldrh.w	r3, [r4, #23]
   18176:	f8a5 309e 	strh.w	r3, [r5, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   1817a:	f8b4 3019 	ldrh.w	r3, [r4, #25]
   1817e:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   18182:	f8b4 301b 	ldrh.w	r3, [r4, #27]
   18186:	f8a5 30a6 	strh.w	r3, [r5, #166]	; 0xa6
	conn->role = evt->role;
   1818a:	78e3      	ldrb	r3, [r4, #3]
   1818c:	70eb      	strb	r3, [r5, #3]
	conn->err = 0U;
   1818e:	2200      	movs	r2, #0
   18190:	726a      	strb	r2, [r5, #9]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   18192:	2b00      	cmp	r3, #0
   18194:	f000 8088 	beq.w	182a8 <bt_hci_le_enh_conn_complete+0x234>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   18198:	2107      	movs	r1, #7
   1819a:	4628      	mov	r0, r5
   1819c:	f001 fbd6 	bl	1994c <bt_conn_set_state>
	if (is_disconnected) {
   181a0:	2e00      	cmp	r6, #0
   181a2:	f040 8093 	bne.w	182cc <bt_hci_le_enh_conn_complete+0x258>
	bt_conn_connected(conn);
   181a6:	4628      	mov	r0, r5
   181a8:	f012 f8ed 	bl	2a386 <bt_conn_connected>
	conn_auto_initiate(conn);
   181ac:	4628      	mov	r0, r5
   181ae:	f7ff fe73 	bl	17e98 <conn_auto_initiate>
	bt_conn_unref(conn);
   181b2:	4628      	mov	r0, r5
   181b4:	f012 f8ae 	bl	2a314 <bt_conn_unref>
	    conn->role == BT_HCI_ROLE_CENTRAL) {
   181b8:	78eb      	ldrb	r3, [r5, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   181ba:	2b00      	cmp	r3, #0
   181bc:	d198      	bne.n	180f0 <bt_hci_le_enh_conn_complete+0x7c>
		bt_le_scan_update(false);
   181be:	2000      	movs	r0, #0
   181c0:	f000 ff0a 	bl	18fd8 <bt_le_scan_update>
   181c4:	e794      	b.n	180f0 <bt_hci_le_enh_conn_complete+0x7c>
   181c6:	2207      	movs	r2, #7
   181c8:	1d21      	adds	r1, r4, #4
   181ca:	f107 0008 	add.w	r0, r7, #8
   181ce:	f011 fcf0 	bl	29bb2 <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   181d2:	7a3b      	ldrb	r3, [r7, #8]
   181d4:	3b02      	subs	r3, #2
   181d6:	723b      	strb	r3, [r7, #8]
	memcpy(dst, src, sizeof(*dst));
   181d8:	2206      	movs	r2, #6
   181da:	f104 0111 	add.w	r1, r4, #17
   181de:	f107 0011 	add.w	r0, r7, #17
   181e2:	f011 fce6 	bl	29bb2 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   181e6:	2301      	movs	r3, #1
   181e8:	743b      	strb	r3, [r7, #16]
   181ea:	e7a3      	b.n	18134 <bt_hci_le_enh_conn_complete+0xc0>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   181ec:	4b3d      	ldr	r3, [pc, #244]	; (182e4 <bt_hci_le_enh_conn_complete+0x270>)
   181ee:	f893 0067 	ldrb.w	r0, [r3, #103]	; 0x67
   181f2:	e78f      	b.n	18114 <bt_hci_le_enh_conn_complete+0xa0>
		LOG_ERR("No pending conn for peer %s", bt_addr_le_str(&evt->peer_addr));
   181f4:	1d20      	adds	r0, r4, #4
   181f6:	f7fe f921 	bl	1643c <bt_addr_le_str>
   181fa:	466d      	mov	r5, sp
   181fc:	2300      	movs	r3, #0
   181fe:	713b      	strb	r3, [r7, #4]
   18200:	2302      	movs	r3, #2
   18202:	717b      	strb	r3, [r7, #5]
   18204:	b088      	sub	sp, #32
   18206:	466c      	mov	r4, sp
   18208:	f114 0210 	adds.w	r2, r4, #16
   1820c:	d011      	beq.n	18232 <bt_hci_le_enh_conn_complete+0x1be>
   1820e:	260e      	movs	r6, #14
   18210:	b11a      	cbz	r2, 1821a <bt_hci_le_enh_conn_complete+0x1a6>
   18212:	2e04      	cmp	r6, #4
   18214:	dd01      	ble.n	1821a <bt_hci_le_enh_conn_complete+0x1a6>
   18216:	4b34      	ldr	r3, [pc, #208]	; (182e8 <bt_hci_le_enh_conn_complete+0x274>)
   18218:	6163      	str	r3, [r4, #20]
   1821a:	2300      	movs	r3, #0
   1821c:	703b      	strb	r3, [r7, #0]
   1821e:	2302      	movs	r3, #2
   18220:	707b      	strb	r3, [r7, #1]
   18222:	b19a      	cbz	r2, 1824c <bt_hci_le_enh_conn_complete+0x1d8>
   18224:	2e08      	cmp	r6, #8
   18226:	dd00      	ble.n	1822a <bt_hci_le_enh_conn_complete+0x1b6>
   18228:	61a0      	str	r0, [r4, #24]
   1822a:	f104 031c 	add.w	r3, r4, #28
   1822e:	2100      	movs	r1, #0
   18230:	e00a      	b.n	18248 <bt_hci_le_enh_conn_complete+0x1d4>
   18232:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   18236:	e7eb      	b.n	18210 <bt_hci_le_enh_conn_complete+0x19c>
   18238:	f101 0018 	add.w	r0, r1, #24
   1823c:	4438      	add	r0, r7
   1823e:	f810 0c18 	ldrb.w	r0, [r0, #-24]
   18242:	f803 0b01 	strb.w	r0, [r3], #1
   18246:	3101      	adds	r1, #1
   18248:	2901      	cmp	r1, #1
   1824a:	d9f5      	bls.n	18238 <bt_hci_le_enh_conn_complete+0x1c4>
   1824c:	2e0d      	cmp	r6, #13
   1824e:	dd28      	ble.n	182a2 <bt_hci_le_enh_conn_complete+0x22e>
   18250:	230e      	movs	r3, #14
   18252:	b142      	cbz	r2, 18266 <bt_hci_le_enh_conn_complete+0x1f2>
   18254:	2103      	movs	r1, #3
   18256:	7139      	strb	r1, [r7, #4]
   18258:	2100      	movs	r1, #0
   1825a:	7179      	strb	r1, [r7, #5]
   1825c:	71b9      	strb	r1, [r7, #6]
   1825e:	2101      	movs	r1, #1
   18260:	71f9      	strb	r1, [r7, #7]
   18262:	6878      	ldr	r0, [r7, #4]
   18264:	6120      	str	r0, [r4, #16]
   18266:	2100      	movs	r1, #0
   18268:	f36f 0100 	bfc	r1, #0, #1
   1826c:	f36f 0141 	bfc	r1, #1, #1
   18270:	f36f 0182 	bfc	r1, #2, #1
   18274:	f36f 01c5 	bfc	r1, #3, #3
   18278:	2001      	movs	r0, #1
   1827a:	f360 1188 	bfi	r1, r0, #6, #3
   1827e:	f3c3 0309 	ubfx	r3, r3, #0, #10
   18282:	f363 2152 	bfi	r1, r3, #9, #10
   18286:	f36f 41de 	bfc	r1, #19, #12
   1828a:	f36f 71df 	bfc	r1, #31, #1
   1828e:	2300      	movs	r3, #0
   18290:	4812      	ldr	r0, [pc, #72]	; (182dc <bt_hci_le_enh_conn_complete+0x268>)
   18292:	f010 ffba 	bl	2920a <z_impl_z_log_msg_static_create>
   18296:	46ad      	mov	sp, r5
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   18298:	211f      	movs	r1, #31
   1829a:	4648      	mov	r0, r9
   1829c:	f011 fe22 	bl	29ee4 <bt_hci_disconnect>
		return;
   182a0:	e726      	b.n	180f0 <bt_hci_le_enh_conn_complete+0x7c>
		LOG_ERR("No pending conn for peer %s", bt_addr_le_str(&evt->peer_addr));
   182a2:	f06f 031b 	mvn.w	r3, #27
   182a6:	e7d4      	b.n	18252 <bt_hci_le_enh_conn_complete+0x1de>
	memcpy(dst, src, sizeof(*dst));
   182a8:	2207      	movs	r2, #7
   182aa:	f107 0110 	add.w	r1, r7, #16
   182ae:	f105 0096 	add.w	r0, r5, #150	; 0x96
   182b2:	f011 fc7e 	bl	29bb2 <memcpy>
					&bt_dev.id_addr[conn->id]);
   182b6:	7a29      	ldrb	r1, [r5, #8]
   182b8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
   182bc:	2207      	movs	r2, #7
   182be:	4b09      	ldr	r3, [pc, #36]	; (182e4 <bt_hci_le_enh_conn_complete+0x270>)
   182c0:	4419      	add	r1, r3
   182c2:	f105 008f 	add.w	r0, r5, #143	; 0x8f
   182c6:	f011 fc74 	bl	29bb2 <memcpy>
}
   182ca:	e765      	b.n	18198 <bt_hci_le_enh_conn_complete+0x124>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   182cc:	2101      	movs	r1, #1
   182ce:	4628      	mov	r0, r5
   182d0:	f001 fb3c 	bl	1994c <bt_conn_set_state>
   182d4:	e767      	b.n	181a6 <bt_hci_le_enh_conn_complete+0x132>
   182d6:	bf00      	nop
   182d8:	00032828 	.word	0x00032828
   182dc:	00031428 	.word	0x00031428
   182e0:	2000043c 	.word	0x2000043c
   182e4:	20000370 	.word	0x20000370
   182e8:	00032844 	.word	0x00032844

000182ec <le_legacy_conn_complete>:
{
   182ec:	b510      	push	{r4, lr}
   182ee:	b088      	sub	sp, #32
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   182f0:	68c1      	ldr	r1, [r0, #12]
	enh.status         = evt->status;
   182f2:	780b      	ldrb	r3, [r1, #0]
   182f4:	f88d 3000 	strb.w	r3, [sp]
	enh.handle         = evt->handle;
   182f8:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   182fc:	f8ad 3001 	strh.w	r3, [sp, #1]
	enh.role           = evt->role;
   18300:	78cb      	ldrb	r3, [r1, #3]
   18302:	f88d 3003 	strb.w	r3, [sp, #3]
	enh.interval       = evt->interval;
   18306:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   1830a:	f8ad 3017 	strh.w	r3, [sp, #23]
	enh.latency        = evt->latency;
   1830e:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   18312:	f8ad 3019 	strh.w	r3, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
   18316:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   1831a:	f8ad 301b 	strh.w	r3, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
   1831e:	7c4b      	ldrb	r3, [r1, #17]
   18320:	f88d 301d 	strb.w	r3, [sp, #29]
	memcpy(dst, src, sizeof(*dst));
   18324:	2207      	movs	r2, #7
   18326:	3104      	adds	r1, #4
   18328:	a801      	add	r0, sp, #4
   1832a:	f011 fc42 	bl	29bb2 <memcpy>
	memcpy(dst, src, sizeof(*dst));
   1832e:	4c09      	ldr	r4, [pc, #36]	; (18354 <le_legacy_conn_complete+0x68>)
   18330:	2206      	movs	r2, #6
   18332:	4621      	mov	r1, r4
   18334:	f10d 000b 	add.w	r0, sp, #11
   18338:	f011 fc3b 	bl	29bb2 <memcpy>
   1833c:	2206      	movs	r2, #6
   1833e:	4621      	mov	r1, r4
   18340:	f10d 0011 	add.w	r0, sp, #17
   18344:	f011 fc35 	bl	29bb2 <memcpy>
	enh_conn_complete(&enh);
   18348:	4668      	mov	r0, sp
   1834a:	f011 fe27 	bl	29f9c <enh_conn_complete>
}
   1834e:	b008      	add	sp, #32
   18350:	bd10      	pop	{r4, pc}
   18352:	bf00      	nop
   18354:	0003237c 	.word	0x0003237c

00018358 <bt_send>:
{
   18358:	b508      	push	{r3, lr}
	return bt_dev.drv->send(buf);
   1835a:	4b03      	ldr	r3, [pc, #12]	; (18368 <bt_send+0x10>)
   1835c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
   18360:	695b      	ldr	r3, [r3, #20]
   18362:	4798      	blx	r3
}
   18364:	bd08      	pop	{r3, pc}
   18366:	bf00      	nop
   18368:	20000370 	.word	0x20000370

0001836c <bt_hci_cmd_send>:
{
   1836c:	b530      	push	{r4, r5, lr}
   1836e:	b083      	sub	sp, #12
   18370:	4604      	mov	r4, r0
	if (!buf) {
   18372:	460d      	mov	r5, r1
   18374:	b159      	cbz	r1, 1838e <bt_hci_cmd_send+0x22>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   18376:	f640 4335 	movw	r3, #3125	; 0xc35
   1837a:	429c      	cmp	r4, r3
   1837c:	d00f      	beq.n	1839e <bt_hci_cmd_send+0x32>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   1837e:	4629      	mov	r1, r5
   18380:	4824      	ldr	r0, [pc, #144]	; (18414 <bt_hci_cmd_send+0xa8>)
   18382:	f014 f932 	bl	2c5ea <net_buf_put>
	return 0;
   18386:	2400      	movs	r4, #0
}
   18388:	4620      	mov	r0, r4
   1838a:	b003      	add	sp, #12
   1838c:	bd30      	pop	{r4, r5, pc}
		buf = bt_hci_cmd_create(opcode, 0);
   1838e:	f7ff f89f 	bl	174d0 <bt_hci_cmd_create>
		if (!buf) {
   18392:	4605      	mov	r5, r0
   18394:	2800      	cmp	r0, #0
   18396:	d1ee      	bne.n	18376 <bt_hci_cmd_send+0xa>
			return -ENOBUFS;
   18398:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1839c:	e7f4      	b.n	18388 <bt_hci_cmd_send+0x1c>
		err = bt_send(buf);
   1839e:	4628      	mov	r0, r5
   183a0:	f7ff ffda 	bl	18358 <bt_send>
		if (err) {
   183a4:	4604      	mov	r4, r0
   183a6:	2800      	cmp	r0, #0
   183a8:	d0ee      	beq.n	18388 <bt_hci_cmd_send+0x1c>
			LOG_ERR("Unable to send to driver (err %d)", err);
   183aa:	2008      	movs	r0, #8
   183ac:	f7fb fcac 	bl	13d08 <z_log_msg_alloc>
   183b0:	2200      	movs	r2, #0
   183b2:	f36f 0200 	bfc	r2, #0, #1
   183b6:	f36f 0241 	bfc	r2, #1, #1
   183ba:	f36f 0282 	bfc	r2, #2, #1
   183be:	f36f 02c5 	bfc	r2, #3, #3
   183c2:	2301      	movs	r3, #1
   183c4:	f363 1288 	bfi	r2, r3, #6, #3
   183c8:	230c      	movs	r3, #12
   183ca:	f363 2252 	bfi	r2, r3, #9, #10
   183ce:	f36f 42de 	bfc	r2, #19, #12
   183d2:	f36f 72df 	bfc	r2, #31, #1
   183d6:	4684      	mov	ip, r0
   183d8:	b198      	cbz	r0, 18402 <bt_hci_cmd_send+0x96>
   183da:	f110 0310 	adds.w	r3, r0, #16
   183de:	d002      	beq.n	183e6 <bt_hci_cmd_send+0x7a>
   183e0:	490d      	ldr	r1, [pc, #52]	; (18418 <bt_hci_cmd_send+0xac>)
   183e2:	6141      	str	r1, [r0, #20]
   183e4:	6184      	str	r4, [r0, #24]
   183e6:	b163      	cbz	r3, 18402 <bt_hci_cmd_send+0x96>
   183e8:	2303      	movs	r3, #3
   183ea:	f88d 3004 	strb.w	r3, [sp, #4]
   183ee:	2300      	movs	r3, #0
   183f0:	f88d 3005 	strb.w	r3, [sp, #5]
   183f4:	f88d 3006 	strb.w	r3, [sp, #6]
   183f8:	f88d 3007 	strb.w	r3, [sp, #7]
   183fc:	9801      	ldr	r0, [sp, #4]
   183fe:	f8cc 0010 	str.w	r0, [ip, #16]
   18402:	2300      	movs	r3, #0
   18404:	4905      	ldr	r1, [pc, #20]	; (1841c <bt_hci_cmd_send+0xb0>)
   18406:	4660      	mov	r0, ip
   18408:	f010 fee7 	bl	291da <z_log_msg_finalize>
			net_buf_unref(buf);
   1840c:	4628      	mov	r0, r5
   1840e:	f014 f8f0 	bl	2c5f2 <net_buf_unref>
		return err;
   18412:	e7b9      	b.n	18388 <bt_hci_cmd_send+0x1c>
   18414:	200004ac 	.word	0x200004ac
   18418:	00032860 	.word	0x00032860
   1841c:	00031428 	.word	0x00031428

00018420 <le_conn_param_neg_reply>:
{
   18420:	b570      	push	{r4, r5, r6, lr}
   18422:	b082      	sub	sp, #8
   18424:	4605      	mov	r5, r0
   18426:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   18428:	2103      	movs	r1, #3
   1842a:	f242 0021 	movw	r0, #8225	; 0x2021
   1842e:	f7ff f84f 	bl	174d0 <bt_hci_cmd_create>
	if (!buf) {
   18432:	b168      	cbz	r0, 18450 <le_conn_param_neg_reply+0x30>
   18434:	4606      	mov	r6, r0
   18436:	2103      	movs	r1, #3
   18438:	300c      	adds	r0, #12
   1843a:	f014 f921 	bl	2c680 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   1843e:	8005      	strh	r5, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
   18440:	7084      	strb	r4, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   18442:	4631      	mov	r1, r6
   18444:	f242 0021 	movw	r0, #8225	; 0x2021
   18448:	f7ff ff90 	bl	1836c <bt_hci_cmd_send>
}
   1844c:	b002      	add	sp, #8
   1844e:	bd70      	pop	{r4, r5, r6, pc}
		LOG_ERR("Unable to allocate buffer");
   18450:	2006      	movs	r0, #6
   18452:	f7fb fc59 	bl	13d08 <z_log_msg_alloc>
   18456:	2200      	movs	r2, #0
   18458:	f36f 0200 	bfc	r2, #0, #1
   1845c:	f36f 0241 	bfc	r2, #1, #1
   18460:	f36f 0282 	bfc	r2, #2, #1
   18464:	f36f 02c5 	bfc	r2, #3, #3
   18468:	2301      	movs	r3, #1
   1846a:	f363 1288 	bfi	r2, r3, #6, #3
   1846e:	2308      	movs	r3, #8
   18470:	f363 2252 	bfi	r2, r3, #9, #10
   18474:	f36f 42de 	bfc	r2, #19, #12
   18478:	f36f 72df 	bfc	r2, #31, #1
   1847c:	4604      	mov	r4, r0
   1847e:	b188      	cbz	r0, 184a4 <le_conn_param_neg_reply+0x84>
   18480:	f110 0310 	adds.w	r3, r0, #16
   18484:	d001      	beq.n	1848a <le_conn_param_neg_reply+0x6a>
   18486:	490a      	ldr	r1, [pc, #40]	; (184b0 <le_conn_param_neg_reply+0x90>)
   18488:	6141      	str	r1, [r0, #20]
   1848a:	b15b      	cbz	r3, 184a4 <le_conn_param_neg_reply+0x84>
   1848c:	2302      	movs	r3, #2
   1848e:	f88d 3004 	strb.w	r3, [sp, #4]
   18492:	2300      	movs	r3, #0
   18494:	f88d 3005 	strb.w	r3, [sp, #5]
   18498:	f88d 3006 	strb.w	r3, [sp, #6]
   1849c:	f88d 3007 	strb.w	r3, [sp, #7]
   184a0:	9801      	ldr	r0, [sp, #4]
   184a2:	6120      	str	r0, [r4, #16]
   184a4:	2300      	movs	r3, #0
   184a6:	4903      	ldr	r1, [pc, #12]	; (184b4 <le_conn_param_neg_reply+0x94>)
   184a8:	4620      	mov	r0, r4
   184aa:	f010 fe96 	bl	291da <z_log_msg_finalize>
		return;
   184ae:	e7cd      	b.n	1844c <le_conn_param_neg_reply+0x2c>
   184b0:	00032884 	.word	0x00032884
   184b4:	00031428 	.word	0x00031428

000184b8 <le_conn_param_req>:
{
   184b8:	b530      	push	{r4, r5, lr}
   184ba:	b085      	sub	sp, #20
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   184bc:	68c3      	ldr	r3, [r0, #12]
	handle = sys_le16_to_cpu(evt->handle);
   184be:	881c      	ldrh	r4, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   184c0:	885a      	ldrh	r2, [r3, #2]
   184c2:	f8ad 2008 	strh.w	r2, [sp, #8]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   184c6:	889a      	ldrh	r2, [r3, #4]
   184c8:	f8ad 200a 	strh.w	r2, [sp, #10]
	param.latency = sys_le16_to_cpu(evt->latency);
   184cc:	88da      	ldrh	r2, [r3, #6]
   184ce:	f8ad 200c 	strh.w	r2, [sp, #12]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   184d2:	891b      	ldrh	r3, [r3, #8]
   184d4:	f8ad 300e 	strh.w	r3, [sp, #14]
	conn = bt_conn_lookup_handle(handle);
   184d8:	4620      	mov	r0, r4
   184da:	f001 fa2d 	bl	19938 <bt_conn_lookup_handle>
	if (!conn) {
   184de:	b170      	cbz	r0, 184fe <le_conn_param_req+0x46>
   184e0:	4605      	mov	r5, r0
	if (!le_param_req(conn, &param)) {
   184e2:	a902      	add	r1, sp, #8
   184e4:	f001 fc62 	bl	19dac <le_param_req>
   184e8:	2800      	cmp	r0, #0
   184ea:	d13d      	bne.n	18568 <le_conn_param_req+0xb0>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   184ec:	211e      	movs	r1, #30
   184ee:	4620      	mov	r0, r4
   184f0:	f7ff ff96 	bl	18420 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   184f4:	4628      	mov	r0, r5
   184f6:	f011 ff0d 	bl	2a314 <bt_conn_unref>
}
   184fa:	b005      	add	sp, #20
   184fc:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   184fe:	2008      	movs	r0, #8
   18500:	f7fb fc02 	bl	13d08 <z_log_msg_alloc>
   18504:	2200      	movs	r2, #0
   18506:	f36f 0200 	bfc	r2, #0, #1
   1850a:	f36f 0241 	bfc	r2, #1, #1
   1850e:	f36f 0282 	bfc	r2, #2, #1
   18512:	f36f 02c5 	bfc	r2, #3, #3
   18516:	2301      	movs	r3, #1
   18518:	f363 1288 	bfi	r2, r3, #6, #3
   1851c:	230c      	movs	r3, #12
   1851e:	f363 2252 	bfi	r2, r3, #9, #10
   18522:	f36f 42de 	bfc	r2, #19, #12
   18526:	f36f 72df 	bfc	r2, #31, #1
   1852a:	4605      	mov	r5, r0
   1852c:	b190      	cbz	r0, 18554 <le_conn_param_req+0x9c>
   1852e:	f110 0310 	adds.w	r3, r0, #16
   18532:	d002      	beq.n	1853a <le_conn_param_req+0x82>
   18534:	490f      	ldr	r1, [pc, #60]	; (18574 <le_conn_param_req+0xbc>)
   18536:	6141      	str	r1, [r0, #20]
   18538:	6184      	str	r4, [r0, #24]
   1853a:	b15b      	cbz	r3, 18554 <le_conn_param_req+0x9c>
   1853c:	2303      	movs	r3, #3
   1853e:	f88d 3004 	strb.w	r3, [sp, #4]
   18542:	2300      	movs	r3, #0
   18544:	f88d 3005 	strb.w	r3, [sp, #5]
   18548:	f88d 3006 	strb.w	r3, [sp, #6]
   1854c:	f88d 3007 	strb.w	r3, [sp, #7]
   18550:	9801      	ldr	r0, [sp, #4]
   18552:	6128      	str	r0, [r5, #16]
   18554:	2300      	movs	r3, #0
   18556:	4908      	ldr	r1, [pc, #32]	; (18578 <le_conn_param_req+0xc0>)
   18558:	4628      	mov	r0, r5
   1855a:	f010 fe3e 	bl	291da <z_log_msg_finalize>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   1855e:	2102      	movs	r1, #2
   18560:	4620      	mov	r0, r4
   18562:	f7ff ff5d 	bl	18420 <le_conn_param_neg_reply>
		return;
   18566:	e7c8      	b.n	184fa <le_conn_param_req+0x42>
		le_conn_param_req_reply(handle, &param);
   18568:	a902      	add	r1, sp, #8
   1856a:	4620      	mov	r0, r4
   1856c:	f011 fd47 	bl	29ffe <le_conn_param_req_reply>
   18570:	e7c0      	b.n	184f4 <le_conn_param_req+0x3c>
   18572:	bf00      	nop
   18574:	0003245c 	.word	0x0003245c
   18578:	00031428 	.word	0x00031428

0001857c <hci_event_prio>:
{
   1857c:	b570      	push	{r4, r5, r6, lr}
   1857e:	b082      	sub	sp, #8
   18580:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   18582:	f100 050c 	add.w	r5, r0, #12
	state->offset = net_buf_simple_headroom(buf);
   18586:	4628      	mov	r0, r5
   18588:	f014 f8bc 	bl	2c704 <net_buf_simple_headroom>
   1858c:	f8ad 0004 	strh.w	r0, [sp, #4]
	state->len = buf->len;
   18590:	8a23      	ldrh	r3, [r4, #16]
   18592:	f8ad 3006 	strh.w	r3, [sp, #6]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   18596:	2b01      	cmp	r3, #1
   18598:	d91e      	bls.n	185d8 <hci_event_prio+0x5c>
	return net_buf_simple_pull_mem(&buf->b, len);
   1859a:	2102      	movs	r1, #2
   1859c:	4628      	mov	r0, r5
   1859e:	f014 f899 	bl	2c6d4 <net_buf_simple_pull_mem>
   185a2:	4606      	mov	r6, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   185a4:	7800      	ldrb	r0, [r0, #0]
   185a6:	f011 fc05 	bl	29db4 <bt_hci_evt_get_flags>
   185aa:	4605      	mov	r5, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   185ac:	f010 0f01 	tst.w	r0, #1
   185b0:	d020      	beq.n	185f4 <hci_event_prio+0x78>
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   185b2:	2305      	movs	r3, #5
   185b4:	4a18      	ldr	r2, [pc, #96]	; (18618 <hci_event_prio+0x9c>)
   185b6:	4621      	mov	r1, r4
   185b8:	7830      	ldrb	r0, [r6, #0]
   185ba:	f7fe fcaf 	bl	16f1c <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   185be:	f015 0f02 	tst.w	r5, #2
   185c2:	d025      	beq.n	18610 <hci_event_prio+0x94>
	buf->data = buf->__buf + state->offset;
   185c4:	6963      	ldr	r3, [r4, #20]
   185c6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   185ca:	4413      	add	r3, r2
   185cc:	60e3      	str	r3, [r4, #12]
	buf->len = state->len;
   185ce:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   185d2:	8223      	strh	r3, [r4, #16]
}
   185d4:	b002      	add	sp, #8
   185d6:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   185d8:	f640 537b 	movw	r3, #3451	; 0xd7b
   185dc:	4a0f      	ldr	r2, [pc, #60]	; (1861c <hci_event_prio+0xa0>)
   185de:	4910      	ldr	r1, [pc, #64]	; (18620 <hci_event_prio+0xa4>)
   185e0:	4810      	ldr	r0, [pc, #64]	; (18624 <hci_event_prio+0xa8>)
   185e2:	f010 faf9 	bl	28bd8 <assert_print>
   185e6:	4040      	eors	r0, r0
   185e8:	f380 8811 	msr	BASEPRI, r0
   185ec:	f04f 0003 	mov.w	r0, #3
   185f0:	df02      	svc	2
   185f2:	e7d2      	b.n	1859a <hci_event_prio+0x1e>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   185f4:	f640 537f 	movw	r3, #3455	; 0xd7f
   185f8:	4a08      	ldr	r2, [pc, #32]	; (1861c <hci_event_prio+0xa0>)
   185fa:	490b      	ldr	r1, [pc, #44]	; (18628 <hci_event_prio+0xac>)
   185fc:	4809      	ldr	r0, [pc, #36]	; (18624 <hci_event_prio+0xa8>)
   185fe:	f010 faeb 	bl	28bd8 <assert_print>
   18602:	4040      	eors	r0, r0
   18604:	f380 8811 	msr	BASEPRI, r0
   18608:	f04f 0003 	mov.w	r0, #3
   1860c:	df02      	svc	2
   1860e:	e7d0      	b.n	185b2 <hci_event_prio+0x36>
		net_buf_unref(buf);
   18610:	4620      	mov	r0, r4
   18612:	f013 ffee 	bl	2c5f2 <net_buf_unref>
}
   18616:	e7dd      	b.n	185d4 <hci_event_prio+0x58>
   18618:	000328e0 	.word	0x000328e0
   1861c:	00032568 	.word	0x00032568
   18620:	0003259c 	.word	0x0003259c
   18624:	000325b8 	.word	0x000325b8
   18628:	000328a0 	.word	0x000328a0

0001862c <bt_recv>:
{
   1862c:	b530      	push	{r4, r5, lr}
   1862e:	b083      	sub	sp, #12
   18630:	4604      	mov	r4, r0
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   18632:	7e05      	ldrb	r5, [r0, #24]
	switch (bt_buf_get_type(buf)) {
   18634:	2d01      	cmp	r5, #1
   18636:	d006      	beq.n	18646 <bt_recv+0x1a>
   18638:	2d03      	cmp	r5, #3
   1863a:	d11a      	bne.n	18672 <bt_recv+0x46>
		rx_queue_put(buf);
   1863c:	f7fe fd38 	bl	170b0 <rx_queue_put>
		return 0;
   18640:	2000      	movs	r0, #0
}
   18642:	b003      	add	sp, #12
   18644:	bd30      	pop	{r4, r5, pc}
		struct bt_hci_evt_hdr *hdr = (void *)buf->data;
   18646:	68c3      	ldr	r3, [r0, #12]
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   18648:	7818      	ldrb	r0, [r3, #0]
   1864a:	f011 fbb3 	bl	29db4 <bt_hci_evt_get_flags>
   1864e:	4605      	mov	r5, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   18650:	f010 0f01 	tst.w	r0, #1
   18654:	d104      	bne.n	18660 <bt_recv+0x34>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   18656:	f015 0f02 	tst.w	r5, #2
   1865a:	d105      	bne.n	18668 <bt_recv+0x3c>
		return 0;
   1865c:	2000      	movs	r0, #0
   1865e:	e7f0      	b.n	18642 <bt_recv+0x16>
			hci_event_prio(buf);
   18660:	4620      	mov	r0, r4
   18662:	f7ff ff8b 	bl	1857c <hci_event_prio>
   18666:	e7f6      	b.n	18656 <bt_recv+0x2a>
			rx_queue_put(buf);
   18668:	4620      	mov	r0, r4
   1866a:	f7fe fd21 	bl	170b0 <rx_queue_put>
		return 0;
   1866e:	2000      	movs	r0, #0
   18670:	e7e7      	b.n	18642 <bt_recv+0x16>
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   18672:	2008      	movs	r0, #8
   18674:	f7fb fb48 	bl	13d08 <z_log_msg_alloc>
   18678:	2200      	movs	r2, #0
   1867a:	f36f 0200 	bfc	r2, #0, #1
   1867e:	f36f 0241 	bfc	r2, #1, #1
   18682:	f36f 0282 	bfc	r2, #2, #1
   18686:	f36f 02c5 	bfc	r2, #3, #3
   1868a:	2301      	movs	r3, #1
   1868c:	f363 1288 	bfi	r2, r3, #6, #3
   18690:	230c      	movs	r3, #12
   18692:	f363 2252 	bfi	r2, r3, #9, #10
   18696:	f36f 42de 	bfc	r2, #19, #12
   1869a:	f36f 72df 	bfc	r2, #31, #1
   1869e:	4684      	mov	ip, r0
   186a0:	b198      	cbz	r0, 186ca <bt_recv+0x9e>
   186a2:	f110 0310 	adds.w	r3, r0, #16
   186a6:	d002      	beq.n	186ae <bt_recv+0x82>
   186a8:	490d      	ldr	r1, [pc, #52]	; (186e0 <bt_recv+0xb4>)
   186aa:	6141      	str	r1, [r0, #20]
   186ac:	6185      	str	r5, [r0, #24]
   186ae:	b163      	cbz	r3, 186ca <bt_recv+0x9e>
   186b0:	2303      	movs	r3, #3
   186b2:	f88d 3004 	strb.w	r3, [sp, #4]
   186b6:	2300      	movs	r3, #0
   186b8:	f88d 3005 	strb.w	r3, [sp, #5]
   186bc:	f88d 3006 	strb.w	r3, [sp, #6]
   186c0:	f88d 3007 	strb.w	r3, [sp, #7]
   186c4:	9801      	ldr	r0, [sp, #4]
   186c6:	f8cc 0010 	str.w	r0, [ip, #16]
   186ca:	2300      	movs	r3, #0
   186cc:	4905      	ldr	r1, [pc, #20]	; (186e4 <bt_recv+0xb8>)
   186ce:	4660      	mov	r0, ip
   186d0:	f010 fd83 	bl	291da <z_log_msg_finalize>
		net_buf_unref(buf);
   186d4:	4620      	mov	r0, r4
   186d6:	f013 ff8c 	bl	2c5f2 <net_buf_unref>
		return -EINVAL;
   186da:	f06f 0015 	mvn.w	r0, #21
   186de:	e7b0      	b.n	18642 <bt_recv+0x16>
   186e0:	000328bc 	.word	0x000328bc
   186e4:	00031428 	.word	0x00031428

000186e8 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   186e8:	4b0a      	ldr	r3, [pc, #40]	; (18714 <bt_hci_driver_register+0x2c>)
   186ea:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
   186ee:	b943      	cbnz	r3, 18702 <bt_hci_driver_register+0x1a>
	if (!drv->open || !drv->send) {
   186f0:	68c3      	ldr	r3, [r0, #12]
   186f2:	b14b      	cbz	r3, 18708 <bt_hci_driver_register+0x20>
   186f4:	6943      	ldr	r3, [r0, #20]
   186f6:	b153      	cbz	r3, 1870e <bt_hci_driver_register+0x26>
	bt_dev.drv = drv;
   186f8:	4b06      	ldr	r3, [pc, #24]	; (18714 <bt_hci_driver_register+0x2c>)
   186fa:	f8c3 0154 	str.w	r0, [r3, #340]	; 0x154
	return 0;
   186fe:	2000      	movs	r0, #0
   18700:	4770      	bx	lr
		return -EALREADY;
   18702:	f06f 0077 	mvn.w	r0, #119	; 0x77
   18706:	4770      	bx	lr
		return -EINVAL;
   18708:	f06f 0015 	mvn.w	r0, #21
   1870c:	4770      	bx	lr
   1870e:	f06f 0015 	mvn.w	r0, #21
}
   18712:	4770      	bx	lr
   18714:	20000370 	.word	0x20000370

00018718 <bt_finalize_init>:
{
   18718:	b508      	push	{r3, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1871a:	4b08      	ldr	r3, [pc, #32]	; (1873c <bt_finalize_init+0x24>)
   1871c:	f3bf 8f5b 	dmb	ish
   18720:	e853 1f00 	ldrex	r1, [r3]
   18724:	f041 0104 	orr.w	r1, r1, #4
   18728:	e843 1200 	strex	r2, r1, [r3]
   1872c:	2a00      	cmp	r2, #0
   1872e:	d1f7      	bne.n	18720 <bt_finalize_init+0x8>
   18730:	f3bf 8f5b 	dmb	ish
		bt_le_scan_update(false);
   18734:	2000      	movs	r0, #0
   18736:	f000 fc4f 	bl	18fd8 <bt_le_scan_update>
}
   1873a:	bd08      	pop	{r3, pc}
   1873c:	2000043c 	.word	0x2000043c

00018740 <init_work>:
{
   18740:	b508      	push	{r3, lr}
	err = bt_init();
   18742:	f011 fc81 	bl	2a048 <bt_init>
	if (ready_cb) {
   18746:	4b02      	ldr	r3, [pc, #8]	; (18750 <init_work+0x10>)
   18748:	681b      	ldr	r3, [r3, #0]
   1874a:	b103      	cbz	r3, 1874e <init_work+0xe>
		ready_cb(err);
   1874c:	4798      	blx	r3
}
   1874e:	bd08      	pop	{r3, pc}
   18750:	20007cfc 	.word	0x20007cfc

00018754 <bt_is_ready>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18754:	f3bf 8f5b 	dmb	ish
   18758:	4b03      	ldr	r3, [pc, #12]	; (18768 <bt_is_ready+0x14>)
   1875a:	6818      	ldr	r0, [r3, #0]
   1875c:	f3bf 8f5b 	dmb	ish
 */
static inline bool atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   18760:	f3c0 0080 	ubfx	r0, r0, #2, #1
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
   18764:	4770      	bx	lr
   18766:	bf00      	nop
   18768:	2000043c 	.word	0x2000043c

0001876c <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   1876c:	4800      	ldr	r0, [pc, #0]	; (18770 <bt_get_name+0x4>)
   1876e:	4770      	bx	lr
   18770:	000328d0 	.word	0x000328d0

00018774 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   18774:	b570      	push	{r4, r5, r6, lr}
   18776:	4605      	mov	r5, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   18778:	2400      	movs	r4, #0
   1877a:	e001      	b.n	18780 <id_find+0xc>
   1877c:	3401      	adds	r4, #1
   1877e:	b2e4      	uxtb	r4, r4
   18780:	4b09      	ldr	r3, [pc, #36]	; (187a8 <id_find+0x34>)
   18782:	79db      	ldrb	r3, [r3, #7]
   18784:	42a3      	cmp	r3, r4
   18786:	d90b      	bls.n	187a0 <id_find+0x2c>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
   18788:	4626      	mov	r6, r4
   1878a:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
   1878e:	2207      	movs	r2, #7
   18790:	4b05      	ldr	r3, [pc, #20]	; (187a8 <id_find+0x34>)
   18792:	4419      	add	r1, r3
   18794:	4628      	mov	r0, r5
   18796:	f011 f9fa 	bl	29b8e <memcmp>
   1879a:	2800      	cmp	r0, #0
   1879c:	d1ee      	bne.n	1877c <id_find+0x8>
   1879e:	e001      	b.n	187a4 <id_find+0x30>
			return id;
		}
	}

	return -ENOENT;
   187a0:	f06f 0601 	mvn.w	r6, #1
}
   187a4:	4630      	mov	r0, r6
   187a6:	bd70      	pop	{r4, r5, r6, pc}
   187a8:	20000370 	.word	0x20000370

000187ac <set_random_address>:
{
   187ac:	b570      	push	{r4, r5, r6, lr}
   187ae:	4604      	mov	r4, r0
	return memcmp(a, b, sizeof(*a));
   187b0:	2206      	movs	r2, #6
   187b2:	4914      	ldr	r1, [pc, #80]	; (18804 <set_random_address+0x58>)
   187b4:	f011 f9eb 	bl	29b8e <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   187b8:	4605      	mov	r5, r0
   187ba:	b908      	cbnz	r0, 187c0 <set_random_address+0x14>
}
   187bc:	4628      	mov	r0, r5
   187be:	bd70      	pop	{r4, r5, r6, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   187c0:	2106      	movs	r1, #6
   187c2:	f242 0005 	movw	r0, #8197	; 0x2005
   187c6:	f7fe fe83 	bl	174d0 <bt_hci_cmd_create>
	if (!buf) {
   187ca:	4605      	mov	r5, r0
   187cc:	b1b8      	cbz	r0, 187fe <set_random_address+0x52>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   187ce:	2206      	movs	r2, #6
   187d0:	4621      	mov	r1, r4
   187d2:	300c      	adds	r0, #12
   187d4:	f013 ff5a 	bl	2c68c <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   187d8:	2200      	movs	r2, #0
   187da:	4629      	mov	r1, r5
   187dc:	f242 0005 	movw	r0, #8197	; 0x2005
   187e0:	f7fe feb4 	bl	1754c <bt_hci_cmd_send_sync>
	if (err) {
   187e4:	4605      	mov	r5, r0
   187e6:	2800      	cmp	r0, #0
   187e8:	d1e8      	bne.n	187bc <set_random_address+0x10>
	memcpy(dst, src, sizeof(*dst));
   187ea:	4e06      	ldr	r6, [pc, #24]	; (18804 <set_random_address+0x58>)
   187ec:	2206      	movs	r2, #6
   187ee:	4621      	mov	r1, r4
   187f0:	4630      	mov	r0, r6
   187f2:	f011 f9de 	bl	29bb2 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   187f6:	2301      	movs	r3, #1
   187f8:	f806 3c01 	strb.w	r3, [r6, #-1]
	return 0;
   187fc:	e7de      	b.n	187bc <set_random_address+0x10>
		return -ENOBUFS;
   187fe:	f06f 0568 	mvn.w	r5, #104	; 0x68
   18802:	e7db      	b.n	187bc <set_random_address+0x10>
   18804:	200003d1 	.word	0x200003d1

00018808 <id_create>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
{
   18808:	b570      	push	{r4, r5, r6, lr}
   1880a:	b082      	sub	sp, #8
   1880c:	4605      	mov	r5, r0
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   1880e:	460e      	mov	r6, r1
   18810:	b129      	cbz	r1, 1881e <id_create+0x16>
	return memcmp(a, b, sizeof(*a));
   18812:	2207      	movs	r2, #7
   18814:	4915      	ldr	r1, [pc, #84]	; (1886c <id_create+0x64>)
   18816:	4630      	mov	r0, r6
   18818:	f011 f9b9 	bl	29b8e <memcmp>
   1881c:	b9d8      	cbnz	r0, 18856 <id_create+0x4e>
		bt_addr_le_t new_addr;

		do {
			int err;

			err = bt_addr_le_create_static(&new_addr);
   1881e:	4668      	mov	r0, sp
   18820:	f011 fa90 	bl	29d44 <bt_addr_le_create_static>
			if (err) {
   18824:	4604      	mov	r4, r0
   18826:	b998      	cbnz	r0, 18850 <id_create+0x48>
				return err;
			}
			/* Make sure we didn't generate a duplicate */
		} while (id_find(&new_addr) >= 0);
   18828:	4668      	mov	r0, sp
   1882a:	f7ff ffa3 	bl	18774 <id_find>
   1882e:	2800      	cmp	r0, #0
   18830:	daf5      	bge.n	1881e <id_create+0x16>

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   18832:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
   18836:	4b0e      	ldr	r3, [pc, #56]	; (18870 <id_create+0x68>)
   18838:	441d      	add	r5, r3
	memcpy(dst, src, sizeof(*dst));
   1883a:	2207      	movs	r2, #7
   1883c:	4669      	mov	r1, sp
   1883e:	4628      	mov	r0, r5
   18840:	f011 f9b7 	bl	29bb2 <memcpy>

		if (addr) {
   18844:	b126      	cbz	r6, 18850 <id_create+0x48>
   18846:	2207      	movs	r2, #7
   18848:	4629      	mov	r1, r5
   1884a:	4630      	mov	r0, r6
   1884c:	f011 f9b1 	bl	29bb2 <memcpy>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
}
   18850:	4620      	mov	r0, r4
   18852:	b002      	add	sp, #8
   18854:	bd70      	pop	{r4, r5, r6, pc}
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   18856:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
   1885a:	2207      	movs	r2, #7
   1885c:	4631      	mov	r1, r6
   1885e:	4804      	ldr	r0, [pc, #16]	; (18870 <id_create+0x68>)
   18860:	4428      	add	r0, r5
   18862:	f011 f9a6 	bl	29bb2 <memcpy>
	return 0;
   18866:	2400      	movs	r4, #0
}
   18868:	e7f2      	b.n	18850 <id_create+0x48>
   1886a:	bf00      	nop
   1886c:	0003236c 	.word	0x0003236c
   18870:	20000370 	.word	0x20000370

00018874 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   18874:	b570      	push	{r4, r5, r6, lr}
   18876:	b084      	sub	sp, #16
   18878:	460c      	mov	r4, r1
	int new_id, err;

	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   1887a:	4605      	mov	r5, r0
   1887c:	b188      	cbz	r0, 188a2 <bt_id_create+0x2e>
	return memcmp(a, b, sizeof(*a));
   1887e:	2207      	movs	r2, #7
   18880:	493d      	ldr	r1, [pc, #244]	; (18978 <bt_id_create+0x104>)
   18882:	f011 f984 	bl	29b8e <memcmp>
   18886:	b160      	cbz	r0, 188a2 <bt_id_create+0x2e>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   18888:	782b      	ldrb	r3, [r5, #0]
   1888a:	2b01      	cmp	r3, #1
   1888c:	d135      	bne.n	188fa <bt_id_create+0x86>
		    !BT_ADDR_IS_STATIC(&addr->a)) {
   1888e:	79ab      	ldrb	r3, [r5, #6]
		if (addr->type != BT_ADDR_LE_RANDOM ||
   18890:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   18894:	2bc0      	cmp	r3, #192	; 0xc0
   18896:	d130      	bne.n	188fa <bt_id_create+0x86>
			LOG_ERR("Only static random identity address supported");
			return -EINVAL;
		}

		if (id_find(addr) >= 0) {
   18898:	4628      	mov	r0, r5
   1889a:	f7ff ff6b 	bl	18774 <id_find>
   1889e:	2800      	cmp	r0, #0
   188a0:	da60      	bge.n	18964 <bt_id_create+0xf0>
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   188a2:	2c00      	cmp	r4, #0
   188a4:	d161      	bne.n	1896a <bt_id_create+0xf6>
		return -EINVAL;
	}

	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   188a6:	4b35      	ldr	r3, [pc, #212]	; (1897c <bt_id_create+0x108>)
   188a8:	79db      	ldrb	r3, [r3, #7]
   188aa:	2b01      	cmp	r3, #1
   188ac:	d060      	beq.n	18970 <bt_id_create+0xfc>
   188ae:	f3bf 8f5b 	dmb	ish
   188b2:	4b33      	ldr	r3, [pc, #204]	; (18980 <bt_id_create+0x10c>)
   188b4:	681b      	ldr	r3, [r3, #0]
   188b6:	f3bf 8f5b 	dmb	ish
		return -ENOMEM;
	}

	/* bt_rand is not available before Bluetooth enable has been called */
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   188ba:	f013 0f01 	tst.w	r3, #1
   188be:	d10d      	bne.n	188dc <bt_id_create+0x68>
		uint8_t zero_irk[16] = { 0 };
   188c0:	2300      	movs	r3, #0
   188c2:	9300      	str	r3, [sp, #0]
   188c4:	9301      	str	r3, [sp, #4]
   188c6:	9302      	str	r3, [sp, #8]
   188c8:	9303      	str	r3, [sp, #12]

		if (!(addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY))) {
   188ca:	2d00      	cmp	r5, #0
   188cc:	d047      	beq.n	1895e <bt_id_create+0xea>
   188ce:	2207      	movs	r2, #7
   188d0:	4929      	ldr	r1, [pc, #164]	; (18978 <bt_id_create+0x104>)
   188d2:	4628      	mov	r0, r5
   188d4:	f011 f95b 	bl	29b8e <memcmp>
   188d8:	2800      	cmp	r0, #0
   188da:	d040      	beq.n	1895e <bt_id_create+0xea>
		    !(irk && memcmp(irk, zero_irk, 16))) {
			return -EINVAL;
		}
	}

	new_id = bt_dev.id_count;
   188dc:	4b27      	ldr	r3, [pc, #156]	; (1897c <bt_id_create+0x108>)
   188de:	79de      	ldrb	r6, [r3, #7]
	err = id_create(new_id, addr, irk);
   188e0:	4622      	mov	r2, r4
   188e2:	4629      	mov	r1, r5
   188e4:	4630      	mov	r0, r6
   188e6:	f7ff ff8f 	bl	18808 <id_create>
	if (err) {
   188ea:	b920      	cbnz	r0, 188f6 <bt_id_create+0x82>
		return err;
	} else {
		bt_dev.id_count++;
   188ec:	4a23      	ldr	r2, [pc, #140]	; (1897c <bt_id_create+0x108>)
   188ee:	79d3      	ldrb	r3, [r2, #7]
   188f0:	3301      	adds	r3, #1
   188f2:	71d3      	strb	r3, [r2, #7]
	}

	return new_id;
   188f4:	4630      	mov	r0, r6
}
   188f6:	b004      	add	sp, #16
   188f8:	bd70      	pop	{r4, r5, r6, pc}
			LOG_ERR("Only static random identity address supported");
   188fa:	2006      	movs	r0, #6
   188fc:	f7fb fa04 	bl	13d08 <z_log_msg_alloc>
   18900:	2200      	movs	r2, #0
   18902:	f36f 0200 	bfc	r2, #0, #1
   18906:	f36f 0241 	bfc	r2, #1, #1
   1890a:	f36f 0282 	bfc	r2, #2, #1
   1890e:	f36f 02c5 	bfc	r2, #3, #3
   18912:	2301      	movs	r3, #1
   18914:	f363 1288 	bfi	r2, r3, #6, #3
   18918:	2308      	movs	r3, #8
   1891a:	f363 2252 	bfi	r2, r3, #9, #10
   1891e:	f36f 42de 	bfc	r2, #19, #12
   18922:	f36f 72df 	bfc	r2, #31, #1
   18926:	4604      	mov	r4, r0
   18928:	b188      	cbz	r0, 1894e <bt_id_create+0xda>
   1892a:	f110 0310 	adds.w	r3, r0, #16
   1892e:	d001      	beq.n	18934 <bt_id_create+0xc0>
   18930:	4914      	ldr	r1, [pc, #80]	; (18984 <bt_id_create+0x110>)
   18932:	6141      	str	r1, [r0, #20]
   18934:	b15b      	cbz	r3, 1894e <bt_id_create+0xda>
   18936:	2302      	movs	r3, #2
   18938:	f88d 3000 	strb.w	r3, [sp]
   1893c:	2300      	movs	r3, #0
   1893e:	f88d 3001 	strb.w	r3, [sp, #1]
   18942:	f88d 3002 	strb.w	r3, [sp, #2]
   18946:	f88d 3003 	strb.w	r3, [sp, #3]
   1894a:	9800      	ldr	r0, [sp, #0]
   1894c:	6120      	str	r0, [r4, #16]
   1894e:	2300      	movs	r3, #0
   18950:	490d      	ldr	r1, [pc, #52]	; (18988 <bt_id_create+0x114>)
   18952:	4620      	mov	r0, r4
   18954:	f010 fc41 	bl	291da <z_log_msg_finalize>
			return -EINVAL;
   18958:	f06f 0015 	mvn.w	r0, #21
   1895c:	e7cb      	b.n	188f6 <bt_id_create+0x82>
			return -EINVAL;
   1895e:	f06f 0015 	mvn.w	r0, #21
   18962:	e7c8      	b.n	188f6 <bt_id_create+0x82>
			return -EALREADY;
   18964:	f06f 0077 	mvn.w	r0, #119	; 0x77
   18968:	e7c5      	b.n	188f6 <bt_id_create+0x82>
		return -EINVAL;
   1896a:	f06f 0015 	mvn.w	r0, #21
   1896e:	e7c2      	b.n	188f6 <bt_id_create+0x82>
		return -ENOMEM;
   18970:	f06f 000b 	mvn.w	r0, #11
   18974:	e7bf      	b.n	188f6 <bt_id_create+0x82>
   18976:	bf00      	nop
   18978:	0003236c 	.word	0x0003236c
   1897c:	20000370 	.word	0x20000370
   18980:	2000043c 	.word	0x2000043c
   18984:	00032984 	.word	0x00032984
   18988:	00031430 	.word	0x00031430

0001898c <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   1898c:	b530      	push	{r4, r5, lr}
   1898e:	b083      	sub	sp, #12
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	CHECKIF(addr == NULL) {
   18990:	b1f0      	cbz	r0, 189d0 <bt_id_read_public_addr+0x44>
   18992:	4605      	mov	r5, r0
		LOG_WRN("Invalid input parameters");
		return 0U;
	}

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   18994:	aa01      	add	r2, sp, #4
   18996:	2100      	movs	r1, #0
   18998:	f241 0009 	movw	r0, #4105	; 0x1009
   1899c:	f7fe fdd6 	bl	1754c <bt_hci_cmd_send_sync>
	if (err) {
   189a0:	2800      	cmp	r0, #0
   189a2:	d146      	bne.n	18a32 <bt_id_read_public_addr+0xa6>
		LOG_WRN("Failed to read public address");
		return 0U;
	}

	rp = (void *)rsp->data;
   189a4:	9b01      	ldr	r3, [sp, #4]
   189a6:	68dc      	ldr	r4, [r3, #12]

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   189a8:	3401      	adds	r4, #1
	return memcmp(a, b, sizeof(*a));
   189aa:	2206      	movs	r2, #6
   189ac:	493f      	ldr	r1, [pc, #252]	; (18aac <bt_id_read_public_addr+0x120>)
   189ae:	4620      	mov	r0, r4
   189b0:	f011 f8ed 	bl	29b8e <memcmp>
   189b4:	b130      	cbz	r0, 189c4 <bt_id_read_public_addr+0x38>
   189b6:	2206      	movs	r2, #6
   189b8:	493d      	ldr	r1, [pc, #244]	; (18ab0 <bt_id_read_public_addr+0x124>)
   189ba:	4620      	mov	r0, r4
   189bc:	f011 f8e7 	bl	29b8e <memcmp>
   189c0:	2800      	cmp	r0, #0
   189c2:	d167      	bne.n	18a94 <bt_id_read_public_addr+0x108>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		LOG_DBG("Controller has no public address");
		net_buf_unref(rsp);
   189c4:	9801      	ldr	r0, [sp, #4]
   189c6:	f013 fe14 	bl	2c5f2 <net_buf_unref>
		return 0U;
   189ca:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   189cc:	b003      	add	sp, #12
   189ce:	bd30      	pop	{r4, r5, pc}
		LOG_WRN("Invalid input parameters");
   189d0:	2006      	movs	r0, #6
   189d2:	f7fb f999 	bl	13d08 <z_log_msg_alloc>
   189d6:	2200      	movs	r2, #0
   189d8:	f36f 0200 	bfc	r2, #0, #1
   189dc:	f36f 0241 	bfc	r2, #1, #1
   189e0:	f36f 0282 	bfc	r2, #2, #1
   189e4:	f36f 02c5 	bfc	r2, #3, #3
   189e8:	2302      	movs	r3, #2
   189ea:	f363 1288 	bfi	r2, r3, #6, #3
   189ee:	2308      	movs	r3, #8
   189f0:	f363 2252 	bfi	r2, r3, #9, #10
   189f4:	f36f 42de 	bfc	r2, #19, #12
   189f8:	f36f 72df 	bfc	r2, #31, #1
   189fc:	4604      	mov	r4, r0
   189fe:	b188      	cbz	r0, 18a24 <bt_id_read_public_addr+0x98>
   18a00:	f110 0310 	adds.w	r3, r0, #16
   18a04:	d001      	beq.n	18a0a <bt_id_read_public_addr+0x7e>
   18a06:	492b      	ldr	r1, [pc, #172]	; (18ab4 <bt_id_read_public_addr+0x128>)
   18a08:	6141      	str	r1, [r0, #20]
   18a0a:	b15b      	cbz	r3, 18a24 <bt_id_read_public_addr+0x98>
   18a0c:	2302      	movs	r3, #2
   18a0e:	f88d 3000 	strb.w	r3, [sp]
   18a12:	2300      	movs	r3, #0
   18a14:	f88d 3001 	strb.w	r3, [sp, #1]
   18a18:	f88d 3002 	strb.w	r3, [sp, #2]
   18a1c:	f88d 3003 	strb.w	r3, [sp, #3]
   18a20:	9800      	ldr	r0, [sp, #0]
   18a22:	6120      	str	r0, [r4, #16]
   18a24:	2300      	movs	r3, #0
   18a26:	4924      	ldr	r1, [pc, #144]	; (18ab8 <bt_id_read_public_addr+0x12c>)
   18a28:	4620      	mov	r0, r4
   18a2a:	f010 fbd6 	bl	291da <z_log_msg_finalize>
		return 0U;
   18a2e:	2000      	movs	r0, #0
   18a30:	e7cc      	b.n	189cc <bt_id_read_public_addr+0x40>
		LOG_WRN("Failed to read public address");
   18a32:	2006      	movs	r0, #6
   18a34:	f7fb f968 	bl	13d08 <z_log_msg_alloc>
   18a38:	2200      	movs	r2, #0
   18a3a:	f36f 0200 	bfc	r2, #0, #1
   18a3e:	f36f 0241 	bfc	r2, #1, #1
   18a42:	f36f 0282 	bfc	r2, #2, #1
   18a46:	f36f 02c5 	bfc	r2, #3, #3
   18a4a:	2302      	movs	r3, #2
   18a4c:	f363 1288 	bfi	r2, r3, #6, #3
   18a50:	2308      	movs	r3, #8
   18a52:	f363 2252 	bfi	r2, r3, #9, #10
   18a56:	f36f 42de 	bfc	r2, #19, #12
   18a5a:	f36f 72df 	bfc	r2, #31, #1
   18a5e:	4604      	mov	r4, r0
   18a60:	b188      	cbz	r0, 18a86 <bt_id_read_public_addr+0xfa>
   18a62:	f110 0310 	adds.w	r3, r0, #16
   18a66:	d001      	beq.n	18a6c <bt_id_read_public_addr+0xe0>
   18a68:	4914      	ldr	r1, [pc, #80]	; (18abc <bt_id_read_public_addr+0x130>)
   18a6a:	6141      	str	r1, [r0, #20]
   18a6c:	b15b      	cbz	r3, 18a86 <bt_id_read_public_addr+0xfa>
   18a6e:	2302      	movs	r3, #2
   18a70:	f88d 3000 	strb.w	r3, [sp]
   18a74:	2300      	movs	r3, #0
   18a76:	f88d 3001 	strb.w	r3, [sp, #1]
   18a7a:	f88d 3002 	strb.w	r3, [sp, #2]
   18a7e:	f88d 3003 	strb.w	r3, [sp, #3]
   18a82:	9800      	ldr	r0, [sp, #0]
   18a84:	6120      	str	r0, [r4, #16]
   18a86:	2300      	movs	r3, #0
   18a88:	490b      	ldr	r1, [pc, #44]	; (18ab8 <bt_id_read_public_addr+0x12c>)
   18a8a:	4620      	mov	r0, r4
   18a8c:	f010 fba5 	bl	291da <z_log_msg_finalize>
		return 0U;
   18a90:	2000      	movs	r0, #0
   18a92:	e79b      	b.n	189cc <bt_id_read_public_addr+0x40>
	memcpy(dst, src, sizeof(*dst));
   18a94:	2206      	movs	r2, #6
   18a96:	4621      	mov	r1, r4
   18a98:	1c68      	adds	r0, r5, #1
   18a9a:	f011 f88a 	bl	29bb2 <memcpy>
	addr->type = BT_ADDR_LE_PUBLIC;
   18a9e:	2300      	movs	r3, #0
   18aa0:	702b      	strb	r3, [r5, #0]
	net_buf_unref(rsp);
   18aa2:	9801      	ldr	r0, [sp, #4]
   18aa4:	f013 fda5 	bl	2c5f2 <net_buf_unref>
	return 1U;
   18aa8:	2001      	movs	r0, #1
   18aaa:	e78f      	b.n	189cc <bt_id_read_public_addr+0x40>
   18aac:	0003237c 	.word	0x0003237c
   18ab0:	00032374 	.word	0x00032374
   18ab4:	000329b4 	.word	0x000329b4
   18ab8:	00031430 	.word	0x00031430
   18abc:	000329d0 	.word	0x000329d0

00018ac0 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   18ac0:	b500      	push	{lr}
   18ac2:	b083      	sub	sp, #12
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   18ac4:	4668      	mov	r0, sp
   18ac6:	f7ff ff61 	bl	1898c <bt_id_read_public_addr>
   18aca:	4b06      	ldr	r3, [pc, #24]	; (18ae4 <bt_setup_public_id_addr+0x24>)
   18acc:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   18ace:	b918      	cbnz	r0, 18ad8 <bt_setup_public_id_addr+0x18>
		return 0;
   18ad0:	2000      	movs	r0, #0
			atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
		}
	}

	return id_create(BT_ID_DEFAULT, &addr, irk);
}
   18ad2:	b003      	add	sp, #12
   18ad4:	f85d fb04 	ldr.w	pc, [sp], #4
	return id_create(BT_ID_DEFAULT, &addr, irk);
   18ad8:	2200      	movs	r2, #0
   18ada:	4669      	mov	r1, sp
   18adc:	4610      	mov	r0, r2
   18ade:	f7ff fe93 	bl	18808 <id_create>
   18ae2:	e7f6      	b.n	18ad2 <bt_setup_public_id_addr+0x12>
   18ae4:	20000370 	.word	0x20000370

00018ae8 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   18ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18aec:	b082      	sub	sp, #8
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   18aee:	4b5d      	ldr	r3, [pc, #372]	; (18c64 <bt_read_static_addr+0x17c>)
   18af0:	f893 50ba 	ldrb.w	r5, [r3, #186]	; 0xba
   18af4:	f015 0501 	ands.w	r5, r5, #1
   18af8:	d010      	beq.n	18b1c <bt_read_static_addr+0x34>
   18afa:	4607      	mov	r7, r0
   18afc:	4688      	mov	r8, r1
		LOG_WRN("Read Static Addresses command not available");
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   18afe:	aa01      	add	r2, sp, #4
   18b00:	2100      	movs	r1, #0
   18b02:	f64f 4009 	movw	r0, #64521	; 0xfc09
   18b06:	f7fe fd21 	bl	1754c <bt_hci_cmd_send_sync>
	if (err) {
   18b0a:	4604      	mov	r4, r0
   18b0c:	bbb0      	cbnz	r0, 18b7c <bt_read_static_addr+0x94>
		LOG_WRN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	rp = (void *)rsp->data;
   18b0e:	9b01      	ldr	r3, [sp, #4]
   18b10:	68de      	ldr	r6, [r3, #12]
	cnt = MIN(rp->num_addrs, size);
   18b12:	7875      	ldrb	r5, [r6, #1]
   18b14:	4545      	cmp	r5, r8
   18b16:	bf28      	it	cs
   18b18:	4645      	movcs	r5, r8
		LOG_WRN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	for (i = 0; i < cnt; i++) {
   18b1a:	e069      	b.n	18bf0 <bt_read_static_addr+0x108>
		LOG_WRN("Read Static Addresses command not available");
   18b1c:	2006      	movs	r0, #6
   18b1e:	f7fb f8f3 	bl	13d08 <z_log_msg_alloc>
   18b22:	2200      	movs	r2, #0
   18b24:	f36f 0200 	bfc	r2, #0, #1
   18b28:	f36f 0241 	bfc	r2, #1, #1
   18b2c:	f36f 0282 	bfc	r2, #2, #1
   18b30:	f36f 02c5 	bfc	r2, #3, #3
   18b34:	2302      	movs	r3, #2
   18b36:	f363 1288 	bfi	r2, r3, #6, #3
   18b3a:	2308      	movs	r3, #8
   18b3c:	f363 2252 	bfi	r2, r3, #9, #10
   18b40:	f36f 42de 	bfc	r2, #19, #12
   18b44:	f36f 72df 	bfc	r2, #31, #1
   18b48:	4604      	mov	r4, r0
   18b4a:	b188      	cbz	r0, 18b70 <bt_read_static_addr+0x88>
   18b4c:	f110 0310 	adds.w	r3, r0, #16
   18b50:	d001      	beq.n	18b56 <bt_read_static_addr+0x6e>
   18b52:	4945      	ldr	r1, [pc, #276]	; (18c68 <bt_read_static_addr+0x180>)
   18b54:	6141      	str	r1, [r0, #20]
   18b56:	b15b      	cbz	r3, 18b70 <bt_read_static_addr+0x88>
   18b58:	2302      	movs	r3, #2
   18b5a:	f88d 3000 	strb.w	r3, [sp]
   18b5e:	2300      	movs	r3, #0
   18b60:	f88d 3001 	strb.w	r3, [sp, #1]
   18b64:	f88d 3002 	strb.w	r3, [sp, #2]
   18b68:	f88d 3003 	strb.w	r3, [sp, #3]
   18b6c:	9800      	ldr	r0, [sp, #0]
   18b6e:	6120      	str	r0, [r4, #16]
   18b70:	2300      	movs	r3, #0
   18b72:	493e      	ldr	r1, [pc, #248]	; (18c6c <bt_read_static_addr+0x184>)
   18b74:	4620      	mov	r0, r4
   18b76:	f010 fb30 	bl	291da <z_log_msg_finalize>
		return 0;
   18b7a:	e03f      	b.n	18bfc <bt_read_static_addr+0x114>
		LOG_WRN("Failed to read static addresses");
   18b7c:	2006      	movs	r0, #6
   18b7e:	f7fb f8c3 	bl	13d08 <z_log_msg_alloc>
   18b82:	2200      	movs	r2, #0
   18b84:	f36f 0200 	bfc	r2, #0, #1
   18b88:	f36f 0241 	bfc	r2, #1, #1
   18b8c:	f36f 0282 	bfc	r2, #2, #1
   18b90:	f36f 02c5 	bfc	r2, #3, #3
   18b94:	2302      	movs	r3, #2
   18b96:	f363 1288 	bfi	r2, r3, #6, #3
   18b9a:	2308      	movs	r3, #8
   18b9c:	f363 2252 	bfi	r2, r3, #9, #10
   18ba0:	f36f 42de 	bfc	r2, #19, #12
   18ba4:	f36f 72df 	bfc	r2, #31, #1
   18ba8:	4604      	mov	r4, r0
   18baa:	b188      	cbz	r0, 18bd0 <bt_read_static_addr+0xe8>
   18bac:	f110 0310 	adds.w	r3, r0, #16
   18bb0:	d001      	beq.n	18bb6 <bt_read_static_addr+0xce>
   18bb2:	492f      	ldr	r1, [pc, #188]	; (18c70 <bt_read_static_addr+0x188>)
   18bb4:	6141      	str	r1, [r0, #20]
   18bb6:	b15b      	cbz	r3, 18bd0 <bt_read_static_addr+0xe8>
   18bb8:	2302      	movs	r3, #2
   18bba:	f88d 3000 	strb.w	r3, [sp]
   18bbe:	2300      	movs	r3, #0
   18bc0:	f88d 3001 	strb.w	r3, [sp, #1]
   18bc4:	f88d 3002 	strb.w	r3, [sp, #2]
   18bc8:	f88d 3003 	strb.w	r3, [sp, #3]
   18bcc:	9800      	ldr	r0, [sp, #0]
   18bce:	6120      	str	r0, [r4, #16]
   18bd0:	2300      	movs	r3, #0
   18bd2:	4926      	ldr	r1, [pc, #152]	; (18c6c <bt_read_static_addr+0x184>)
   18bd4:	4620      	mov	r0, r4
   18bd6:	f010 fb00 	bl	291da <z_log_msg_finalize>
		return 0;
   18bda:	2500      	movs	r5, #0
   18bdc:	e00e      	b.n	18bfc <bt_read_static_addr+0x114>
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
   18bde:	2216      	movs	r2, #22
   18be0:	fb02 f004 	mul.w	r0, r2, r4
   18be4:	1831      	adds	r1, r6, r0
   18be6:	3102      	adds	r1, #2
   18be8:	4438      	add	r0, r7
   18bea:	f010 ffe2 	bl	29bb2 <memcpy>
	for (i = 0; i < cnt; i++) {
   18bee:	3401      	adds	r4, #1
   18bf0:	42a5      	cmp	r5, r4
   18bf2:	dcf4      	bgt.n	18bde <bt_read_static_addr+0xf6>
	}

	net_buf_unref(rsp);
   18bf4:	9801      	ldr	r0, [sp, #4]
   18bf6:	f013 fcfc 	bl	2c5f2 <net_buf_unref>
	if (!cnt) {
   18bfa:	b11d      	cbz	r5, 18c04 <bt_read_static_addr+0x11c>
		LOG_WRN("No static addresses stored in controller");
	}

	return cnt;
}
   18bfc:	4628      	mov	r0, r5
   18bfe:	b002      	add	sp, #8
   18c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_WRN("No static addresses stored in controller");
   18c04:	2006      	movs	r0, #6
   18c06:	f7fb f87f 	bl	13d08 <z_log_msg_alloc>
   18c0a:	2200      	movs	r2, #0
   18c0c:	f36f 0200 	bfc	r2, #0, #1
   18c10:	f36f 0241 	bfc	r2, #1, #1
   18c14:	f36f 0282 	bfc	r2, #2, #1
   18c18:	f36f 02c5 	bfc	r2, #3, #3
   18c1c:	2302      	movs	r3, #2
   18c1e:	f363 1288 	bfi	r2, r3, #6, #3
   18c22:	2308      	movs	r3, #8
   18c24:	f363 2252 	bfi	r2, r3, #9, #10
   18c28:	f36f 42de 	bfc	r2, #19, #12
   18c2c:	f36f 72df 	bfc	r2, #31, #1
   18c30:	4604      	mov	r4, r0
   18c32:	b188      	cbz	r0, 18c58 <bt_read_static_addr+0x170>
   18c34:	f110 0310 	adds.w	r3, r0, #16
   18c38:	d001      	beq.n	18c3e <bt_read_static_addr+0x156>
   18c3a:	490e      	ldr	r1, [pc, #56]	; (18c74 <bt_read_static_addr+0x18c>)
   18c3c:	6141      	str	r1, [r0, #20]
   18c3e:	b15b      	cbz	r3, 18c58 <bt_read_static_addr+0x170>
   18c40:	2302      	movs	r3, #2
   18c42:	f88d 3000 	strb.w	r3, [sp]
   18c46:	2300      	movs	r3, #0
   18c48:	f88d 3001 	strb.w	r3, [sp, #1]
   18c4c:	f88d 3002 	strb.w	r3, [sp, #2]
   18c50:	f88d 3003 	strb.w	r3, [sp, #3]
   18c54:	9800      	ldr	r0, [sp, #0]
   18c56:	6120      	str	r0, [r4, #16]
   18c58:	2300      	movs	r3, #0
   18c5a:	4904      	ldr	r1, [pc, #16]	; (18c6c <bt_read_static_addr+0x184>)
   18c5c:	4620      	mov	r0, r4
   18c5e:	f010 fabc 	bl	291da <z_log_msg_finalize>
   18c62:	e7cb      	b.n	18bfc <bt_read_static_addr+0x114>
   18c64:	20000370 	.word	0x20000370
   18c68:	000329f0 	.word	0x000329f0
   18c6c:	00031430 	.word	0x00031430
   18c70:	00032a1c 	.word	0x00032a1c
   18c74:	00032a3c 	.word	0x00032a3c

00018c78 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   18c78:	b510      	push	{r4, lr}
   18c7a:	b088      	sub	sp, #32
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   18c7c:	4b17      	ldr	r3, [pc, #92]	; (18cdc <bt_setup_random_id_addr+0x64>)
   18c7e:	79dc      	ldrb	r4, [r3, #7]
   18c80:	b934      	cbnz	r4, 18c90 <bt_setup_random_id_addr+0x18>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   18c82:	2101      	movs	r1, #1
   18c84:	a802      	add	r0, sp, #8
   18c86:	f7ff ff2f 	bl	18ae8 <bt_read_static_addr>
   18c8a:	4b14      	ldr	r3, [pc, #80]	; (18cdc <bt_setup_random_id_addr+0x64>)
   18c8c:	71d8      	strb	r0, [r3, #7]

		if (bt_dev.id_count) {
   18c8e:	b948      	cbnz	r0, 18ca4 <bt_setup_random_id_addr+0x2c>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   18c90:	2100      	movs	r1, #0
   18c92:	4608      	mov	r0, r1
   18c94:	f7ff fdee 	bl	18874 <bt_id_create>
   18c98:	4603      	mov	r3, r0
}
   18c9a:	4618      	mov	r0, r3
   18c9c:	b008      	add	sp, #32
   18c9e:	bd10      	pop	{r4, pc}
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   18ca0:	3401      	adds	r4, #1
   18ca2:	b2e4      	uxtb	r4, r4
   18ca4:	4b0d      	ldr	r3, [pc, #52]	; (18cdc <bt_setup_random_id_addr+0x64>)
   18ca6:	79db      	ldrb	r3, [r3, #7]
   18ca8:	42a3      	cmp	r3, r4
   18caa:	d914      	bls.n	18cd6 <bt_setup_random_id_addr+0x5e>
   18cac:	2206      	movs	r2, #6
   18cae:	2116      	movs	r1, #22
   18cb0:	ab02      	add	r3, sp, #8
   18cb2:	fb01 3104 	mla	r1, r1, r4, r3
   18cb6:	f10d 0001 	add.w	r0, sp, #1
   18cba:	f010 ff7a 	bl	29bb2 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   18cbe:	2301      	movs	r3, #1
   18cc0:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   18cc4:	2200      	movs	r2, #0
   18cc6:	4669      	mov	r1, sp
   18cc8:	4620      	mov	r0, r4
   18cca:	f7ff fd9d 	bl	18808 <id_create>
				if (err) {
   18cce:	4603      	mov	r3, r0
   18cd0:	2800      	cmp	r0, #0
   18cd2:	d0e5      	beq.n	18ca0 <bt_setup_random_id_addr+0x28>
   18cd4:	e7e1      	b.n	18c9a <bt_setup_random_id_addr+0x22>
			return 0;
   18cd6:	2300      	movs	r3, #0
   18cd8:	e7df      	b.n	18c9a <bt_setup_random_id_addr+0x22>
   18cda:	bf00      	nop
   18cdc:	20000370 	.word	0x20000370

00018ce0 <bt_id_set_create_conn_own_addr>:

int bt_id_set_create_conn_own_addr(bool use_filter, uint8_t *own_addr_type)
{
	int err;

	CHECKIF(own_addr_type == NULL) {
   18ce0:	b181      	cbz	r1, 18d04 <bt_id_set_create_conn_own_addr+0x24>
{
   18ce2:	b510      	push	{r4, lr}
   18ce4:	460c      	mov	r4, r1

		/* If Static Random address is used as Identity address we
		 * need to restore it before creating connection. Otherwise
		 * NRPA used for active scan could be used for connection.
		 */
		if (addr->type == BT_ADDR_LE_RANDOM) {
   18ce6:	4b09      	ldr	r3, [pc, #36]	; (18d0c <bt_id_set_create_conn_own_addr+0x2c>)
   18ce8:	781b      	ldrb	r3, [r3, #0]
   18cea:	2b01      	cmp	r3, #1
   18cec:	d004      	beq.n	18cf8 <bt_id_set_create_conn_own_addr+0x18>
			if (err) {
				return err;
			}
		}

		*own_addr_type = addr->type;
   18cee:	4b07      	ldr	r3, [pc, #28]	; (18d0c <bt_id_set_create_conn_own_addr+0x2c>)
   18cf0:	781b      	ldrb	r3, [r3, #0]
   18cf2:	7023      	strb	r3, [r4, #0]
	}

	return 0;
   18cf4:	2000      	movs	r0, #0
}
   18cf6:	bd10      	pop	{r4, pc}
			err = set_random_address(&addr->a);
   18cf8:	4805      	ldr	r0, [pc, #20]	; (18d10 <bt_id_set_create_conn_own_addr+0x30>)
   18cfa:	f7ff fd57 	bl	187ac <set_random_address>
			if (err) {
   18cfe:	2800      	cmp	r0, #0
   18d00:	d0f5      	beq.n	18cee <bt_id_set_create_conn_own_addr+0xe>
   18d02:	e7f8      	b.n	18cf6 <bt_id_set_create_conn_own_addr+0x16>
		return -EINVAL;
   18d04:	f06f 0015 	mvn.w	r0, #21
}
   18d08:	4770      	bx	lr
   18d0a:	bf00      	nop
   18d0c:	20000370 	.word	0x20000370
   18d10:	20000371 	.word	0x20000371

00018d14 <bt_id_set_scan_own_addr>:

int bt_id_set_scan_own_addr(bool active_scan, uint8_t *own_addr_type)
{
	int err;

	CHECKIF(own_addr_type == NULL) {
   18d14:	b181      	cbz	r1, 18d38 <bt_id_set_scan_own_addr+0x24>
{
   18d16:	b510      	push	{r4, lr}
   18d18:	460c      	mov	r4, r1
			*own_addr_type = BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
		} else {
			*own_addr_type = BT_ADDR_LE_RANDOM;
		}
	} else {
		*own_addr_type = bt_dev.id_addr[0].type;
   18d1a:	4b09      	ldr	r3, [pc, #36]	; (18d40 <bt_id_set_scan_own_addr+0x2c>)
   18d1c:	781b      	ldrb	r3, [r3, #0]
   18d1e:	700b      	strb	r3, [r1, #0]
		/* Use NRPA unless identity has been explicitly requested
		 * (through Kconfig).
		 * Use same RPA as legacy advertiser if advertising.
		 */
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
		    !is_adv_using_rand_addr()) {
   18d20:	f011 f9a5 	bl	2a06e <is_adv_using_rand_addr>
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
   18d24:	b108      	cbz	r0, 18d2a <bt_id_set_scan_own_addr+0x16>
				return err;
			}
		}
	}

	return 0;
   18d26:	2000      	movs	r0, #0
}
   18d28:	bd10      	pop	{r4, pc}
			err = bt_id_set_private_addr(BT_ID_DEFAULT);
   18d2a:	f011 f9aa 	bl	2a082 <bt_id_set_private_addr>
			if (err) {
   18d2e:	2800      	cmp	r0, #0
   18d30:	d1fa      	bne.n	18d28 <bt_id_set_scan_own_addr+0x14>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   18d32:	2301      	movs	r3, #1
   18d34:	7023      	strb	r3, [r4, #0]
   18d36:	e7f7      	b.n	18d28 <bt_id_set_scan_own_addr+0x14>
		return -EINVAL;
   18d38:	f06f 0015 	mvn.w	r0, #21
}
   18d3c:	4770      	bx	lr
   18d3e:	bf00      	nop
   18d40:	20000370 	.word	0x20000370

00018d44 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   18d44:	b510      	push	{r4, lr}
   18d46:	b082      	sub	sp, #8
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   18d48:	4b56      	ldr	r3, [pc, #344]	; (18ea4 <bt_id_init+0x160>)
   18d4a:	79db      	ldrb	r3, [r3, #7]
   18d4c:	b13b      	cbz	r3, 18d5e <bt_id_init+0x1a>
			LOG_ERR("Unable to set identity address");
			return err;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   18d4e:	4b55      	ldr	r3, [pc, #340]	; (18ea4 <bt_id_init+0x160>)
   18d50:	79db      	ldrb	r3, [r3, #7]
   18d52:	2b00      	cmp	r3, #0
   18d54:	d039      	beq.n	18dca <bt_id_init+0x86>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
   18d56:	2400      	movs	r4, #0
}
   18d58:	4620      	mov	r0, r4
   18d5a:	b002      	add	sp, #8
   18d5c:	bd10      	pop	{r4, pc}
		err = bt_setup_public_id_addr();
   18d5e:	f7ff feaf 	bl	18ac0 <bt_setup_public_id_addr>
		if (err) {
   18d62:	4604      	mov	r4, r0
   18d64:	2800      	cmp	r0, #0
   18d66:	d0f2      	beq.n	18d4e <bt_id_init+0xa>
			LOG_ERR("Unable to set identity address");
   18d68:	2006      	movs	r0, #6
   18d6a:	f7fa ffcd 	bl	13d08 <z_log_msg_alloc>
   18d6e:	2200      	movs	r2, #0
   18d70:	f36f 0200 	bfc	r2, #0, #1
   18d74:	f36f 0241 	bfc	r2, #1, #1
   18d78:	f36f 0282 	bfc	r2, #2, #1
   18d7c:	f36f 02c5 	bfc	r2, #3, #3
   18d80:	2301      	movs	r3, #1
   18d82:	f363 1288 	bfi	r2, r3, #6, #3
   18d86:	2308      	movs	r3, #8
   18d88:	f363 2252 	bfi	r2, r3, #9, #10
   18d8c:	f36f 42de 	bfc	r2, #19, #12
   18d90:	f36f 72df 	bfc	r2, #31, #1
   18d94:	4684      	mov	ip, r0
   18d96:	b190      	cbz	r0, 18dbe <bt_id_init+0x7a>
   18d98:	f110 0310 	adds.w	r3, r0, #16
   18d9c:	d001      	beq.n	18da2 <bt_id_init+0x5e>
   18d9e:	4942      	ldr	r1, [pc, #264]	; (18ea8 <bt_id_init+0x164>)
   18da0:	6141      	str	r1, [r0, #20]
   18da2:	b163      	cbz	r3, 18dbe <bt_id_init+0x7a>
   18da4:	2302      	movs	r3, #2
   18da6:	f88d 3004 	strb.w	r3, [sp, #4]
   18daa:	2300      	movs	r3, #0
   18dac:	f88d 3005 	strb.w	r3, [sp, #5]
   18db0:	f88d 3006 	strb.w	r3, [sp, #6]
   18db4:	f88d 3007 	strb.w	r3, [sp, #7]
   18db8:	9801      	ldr	r0, [sp, #4]
   18dba:	f8cc 0010 	str.w	r0, [ip, #16]
   18dbe:	2300      	movs	r3, #0
   18dc0:	493a      	ldr	r1, [pc, #232]	; (18eac <bt_id_init+0x168>)
   18dc2:	4660      	mov	r0, ip
   18dc4:	f010 fa09 	bl	291da <z_log_msg_finalize>
			return err;
   18dc8:	e7c6      	b.n	18d58 <bt_id_init+0x14>
		err = bt_setup_random_id_addr();
   18dca:	f7ff ff55 	bl	18c78 <bt_setup_random_id_addr>
		if (err) {
   18dce:	4604      	mov	r4, r0
   18dd0:	bbb0      	cbnz	r0, 18e40 <bt_id_init+0xfc>
		err = set_random_address(&bt_dev.id_addr[0].a);
   18dd2:	4837      	ldr	r0, [pc, #220]	; (18eb0 <bt_id_init+0x16c>)
   18dd4:	f7ff fcea 	bl	187ac <set_random_address>
		if (err) {
   18dd8:	4604      	mov	r4, r0
   18dda:	2800      	cmp	r0, #0
   18ddc:	d0bc      	beq.n	18d58 <bt_id_init+0x14>
			LOG_ERR("Unable to set random address");
   18dde:	2006      	movs	r0, #6
   18de0:	f7fa ff92 	bl	13d08 <z_log_msg_alloc>
   18de4:	2200      	movs	r2, #0
   18de6:	f36f 0200 	bfc	r2, #0, #1
   18dea:	f36f 0241 	bfc	r2, #1, #1
   18dee:	f36f 0282 	bfc	r2, #2, #1
   18df2:	f36f 02c5 	bfc	r2, #3, #3
   18df6:	2301      	movs	r3, #1
   18df8:	f363 1288 	bfi	r2, r3, #6, #3
   18dfc:	2308      	movs	r3, #8
   18dfe:	f363 2252 	bfi	r2, r3, #9, #10
   18e02:	f36f 42de 	bfc	r2, #19, #12
   18e06:	f36f 72df 	bfc	r2, #31, #1
   18e0a:	4684      	mov	ip, r0
   18e0c:	b190      	cbz	r0, 18e34 <bt_id_init+0xf0>
   18e0e:	f110 0310 	adds.w	r3, r0, #16
   18e12:	d001      	beq.n	18e18 <bt_id_init+0xd4>
   18e14:	4927      	ldr	r1, [pc, #156]	; (18eb4 <bt_id_init+0x170>)
   18e16:	6141      	str	r1, [r0, #20]
   18e18:	b163      	cbz	r3, 18e34 <bt_id_init+0xf0>
   18e1a:	2302      	movs	r3, #2
   18e1c:	f88d 3004 	strb.w	r3, [sp, #4]
   18e20:	2300      	movs	r3, #0
   18e22:	f88d 3005 	strb.w	r3, [sp, #5]
   18e26:	f88d 3006 	strb.w	r3, [sp, #6]
   18e2a:	f88d 3007 	strb.w	r3, [sp, #7]
   18e2e:	9801      	ldr	r0, [sp, #4]
   18e30:	f8cc 0010 	str.w	r0, [ip, #16]
   18e34:	2300      	movs	r3, #0
   18e36:	491d      	ldr	r1, [pc, #116]	; (18eac <bt_id_init+0x168>)
   18e38:	4660      	mov	r0, ip
   18e3a:	f010 f9ce 	bl	291da <z_log_msg_finalize>
			return err;
   18e3e:	e78b      	b.n	18d58 <bt_id_init+0x14>
			LOG_ERR("Unable to set identity address");
   18e40:	2006      	movs	r0, #6
   18e42:	f7fa ff61 	bl	13d08 <z_log_msg_alloc>
   18e46:	2200      	movs	r2, #0
   18e48:	f36f 0200 	bfc	r2, #0, #1
   18e4c:	f36f 0241 	bfc	r2, #1, #1
   18e50:	f36f 0282 	bfc	r2, #2, #1
   18e54:	f36f 02c5 	bfc	r2, #3, #3
   18e58:	2301      	movs	r3, #1
   18e5a:	f363 1288 	bfi	r2, r3, #6, #3
   18e5e:	2308      	movs	r3, #8
   18e60:	f363 2252 	bfi	r2, r3, #9, #10
   18e64:	f36f 42de 	bfc	r2, #19, #12
   18e68:	f36f 72df 	bfc	r2, #31, #1
   18e6c:	4684      	mov	ip, r0
   18e6e:	b190      	cbz	r0, 18e96 <bt_id_init+0x152>
   18e70:	f110 0310 	adds.w	r3, r0, #16
   18e74:	d001      	beq.n	18e7a <bt_id_init+0x136>
   18e76:	490c      	ldr	r1, [pc, #48]	; (18ea8 <bt_id_init+0x164>)
   18e78:	6141      	str	r1, [r0, #20]
   18e7a:	b163      	cbz	r3, 18e96 <bt_id_init+0x152>
   18e7c:	2302      	movs	r3, #2
   18e7e:	f88d 3004 	strb.w	r3, [sp, #4]
   18e82:	2300      	movs	r3, #0
   18e84:	f88d 3005 	strb.w	r3, [sp, #5]
   18e88:	f88d 3006 	strb.w	r3, [sp, #6]
   18e8c:	f88d 3007 	strb.w	r3, [sp, #7]
   18e90:	9801      	ldr	r0, [sp, #4]
   18e92:	f8cc 0010 	str.w	r0, [ip, #16]
   18e96:	2300      	movs	r3, #0
   18e98:	4904      	ldr	r1, [pc, #16]	; (18eac <bt_id_init+0x168>)
   18e9a:	4660      	mov	r0, ip
   18e9c:	f010 f99d 	bl	291da <z_log_msg_finalize>
			return err;
   18ea0:	e75a      	b.n	18d58 <bt_id_init+0x14>
   18ea2:	bf00      	nop
   18ea4:	20000370 	.word	0x20000370
   18ea8:	00032a68 	.word	0x00032a68
   18eac:	00031430 	.word	0x00031430
   18eb0:	20000371 	.word	0x20000371
   18eb4:	00032a88 	.word	0x00032a88

00018eb8 <bt_le_scan_set_enable_legacy>:

	return 0;
}

static int bt_le_scan_set_enable_legacy(uint8_t enable)
{
   18eb8:	b530      	push	{r4, r5, lr}
   18eba:	b087      	sub	sp, #28
   18ebc:	4604      	mov	r4, r0
	struct bt_hci_cp_le_set_scan_enable *cp;
	struct bt_hci_cmd_state_set state;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
   18ebe:	2102      	movs	r1, #2
   18ec0:	f242 000c 	movw	r0, #8204	; 0x200c
   18ec4:	f7fe fb04 	bl	174d0 <bt_hci_cmd_create>
	if (!buf) {
   18ec8:	b330      	cbz	r0, 18f18 <bt_le_scan_set_enable_legacy+0x60>
   18eca:	4605      	mov	r5, r0
	return net_buf_simple_add(&buf->b, len);
   18ecc:	2102      	movs	r1, #2
   18ece:	300c      	adds	r0, #12
   18ed0:	f013 fbd6 	bl	2c680 <net_buf_simple_add>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));

	if (enable == BT_HCI_LE_SCAN_ENABLE) {
   18ed4:	2c01      	cmp	r4, #1
   18ed6:	d015      	beq.n	18f04 <bt_le_scan_set_enable_legacy+0x4c>
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
						 BT_DEV_SCAN_FILTER_DUP);
	} else {
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
   18ed8:	2300      	movs	r3, #0
   18eda:	7043      	strb	r3, [r0, #1]
	}

	cp->enable = enable;
   18edc:	7004      	strb	r4, [r0, #0]

	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   18ede:	2c01      	cmp	r4, #1
   18ee0:	bf14      	ite	ne
   18ee2:	2400      	movne	r4, #0
   18ee4:	2401      	moveq	r4, #1
   18ee6:	9400      	str	r4, [sp, #0]
   18ee8:	2306      	movs	r3, #6
   18eea:	4a0d      	ldr	r2, [pc, #52]	; (18f20 <bt_le_scan_set_enable_legacy+0x68>)
   18eec:	a903      	add	r1, sp, #12
   18eee:	4628      	mov	r0, r5
   18ef0:	f7fe fadc 	bl	174ac <bt_hci_cmd_state_set_init>
				  enable == BT_HCI_LE_SCAN_ENABLE);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
   18ef4:	2200      	movs	r2, #0
   18ef6:	4629      	mov	r1, r5
   18ef8:	f242 000c 	movw	r0, #8204	; 0x200c
   18efc:	f7fe fb26 	bl	1754c <bt_hci_cmd_send_sync>
	if (err) {
		return err;
	}

	return 0;
}
   18f00:	b007      	add	sp, #28
   18f02:	bd30      	pop	{r4, r5, pc}
   18f04:	f3bf 8f5b 	dmb	ish
   18f08:	4b05      	ldr	r3, [pc, #20]	; (18f20 <bt_le_scan_set_enable_legacy+0x68>)
   18f0a:	681b      	ldr	r3, [r3, #0]
   18f0c:	f3bf 8f5b 	dmb	ish
   18f10:	f3c3 2340 	ubfx	r3, r3, #9, #1
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
   18f14:	7043      	strb	r3, [r0, #1]
   18f16:	e7e1      	b.n	18edc <bt_le_scan_set_enable_legacy+0x24>
		return -ENOBUFS;
   18f18:	f06f 0068 	mvn.w	r0, #104	; 0x68
   18f1c:	e7f0      	b.n	18f00 <bt_le_scan_set_enable_legacy+0x48>
   18f1e:	bf00      	nop
   18f20:	2000043c 	.word	0x2000043c

00018f24 <bt_scan_reset>:
	scan_dev_found_cb = NULL;
   18f24:	4b01      	ldr	r3, [pc, #4]	; (18f2c <bt_scan_reset+0x8>)
   18f26:	2200      	movs	r2, #0
   18f28:	601a      	str	r2, [r3, #0]
}
   18f2a:	4770      	bx	lr
   18f2c:	20007d08 	.word	0x20007d08

00018f30 <start_le_scan_legacy>:

	return 0;
}

static int start_le_scan_legacy(uint8_t scan_type, uint16_t interval, uint16_t window)
{
   18f30:	b570      	push	{r4, r5, r6, lr}
   18f32:	b082      	sub	sp, #8
   18f34:	4604      	mov	r4, r0
   18f36:	460e      	mov	r6, r1
   18f38:	4615      	mov	r5, r2
	struct bt_hci_cp_le_set_scan_param set_param;
	struct net_buf *buf;
	int err;
	bool active_scan;

	(void)memset(&set_param, 0, sizeof(set_param));
   18f3a:	2207      	movs	r2, #7
   18f3c:	2100      	movs	r1, #0
   18f3e:	4668      	mov	r0, sp
   18f40:	f010 fe66 	bl	29c10 <memset>

	set_param.scan_type = scan_type;
   18f44:	f88d 4000 	strb.w	r4, [sp]

	/* for the rest parameters apply default values according to
	 *  spec 4.2, vol2, part E, 7.8.10
	 */
	set_param.interval = sys_cpu_to_le16(interval);
   18f48:	f8ad 6001 	strh.w	r6, [sp, #1]
	set_param.window = sys_cpu_to_le16(window);
   18f4c:	f8ad 5003 	strh.w	r5, [sp, #3]
   18f50:	f3bf 8f5b 	dmb	ish
   18f54:	4b1f      	ldr	r3, [pc, #124]	; (18fd4 <start_le_scan_legacy+0xa4>)
   18f56:	681b      	ldr	r3, [r3, #0]
   18f58:	f3bf 8f5b 	dmb	ish

	if (IS_ENABLED(CONFIG_BT_FILTER_ACCEPT_LIST) &&
   18f5c:	f413 6f80 	tst.w	r3, #1024	; 0x400
   18f60:	d010      	beq.n	18f84 <start_le_scan_legacy+0x54>
	    atomic_test_bit(bt_dev.flags, BT_DEV_SCAN_FILTERED)) {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_FILTER;
   18f62:	2301      	movs	r3, #1
   18f64:	f88d 3006 	strb.w	r3, [sp, #6]
	} else {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_NO_FILTER;
	}

	active_scan = scan_type == BT_HCI_LE_SCAN_ACTIVE;
   18f68:	2c01      	cmp	r4, #1
   18f6a:	bf14      	ite	ne
   18f6c:	2400      	movne	r4, #0
   18f6e:	2401      	moveq	r4, #1
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   18f70:	f10d 0105 	add.w	r1, sp, #5
   18f74:	4620      	mov	r0, r4
   18f76:	f7ff fecd 	bl	18d14 <bt_id_set_scan_own_addr>
	if (err) {
   18f7a:	4605      	mov	r5, r0
   18f7c:	b130      	cbz	r0, 18f8c <start_le_scan_legacy+0x5c>
	}

	atomic_set_bit_to(bt_dev.flags, BT_DEV_ACTIVE_SCAN, active_scan);

	return 0;
}
   18f7e:	4628      	mov	r0, r5
   18f80:	b002      	add	sp, #8
   18f82:	bd70      	pop	{r4, r5, r6, pc}
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_NO_FILTER;
   18f84:	2300      	movs	r3, #0
   18f86:	f88d 3006 	strb.w	r3, [sp, #6]
   18f8a:	e7ed      	b.n	18f68 <start_le_scan_legacy+0x38>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
   18f8c:	2107      	movs	r1, #7
   18f8e:	f242 000b 	movw	r0, #8203	; 0x200b
   18f92:	f7fe fa9d 	bl	174d0 <bt_hci_cmd_create>
	if (!buf) {
   18f96:	4605      	mov	r5, r0
   18f98:	b1c8      	cbz	r0, 18fce <start_le_scan_legacy+0x9e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   18f9a:	2207      	movs	r2, #7
   18f9c:	4669      	mov	r1, sp
   18f9e:	300c      	adds	r0, #12
   18fa0:	f013 fb74 	bl	2c68c <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
   18fa4:	2200      	movs	r2, #0
   18fa6:	4629      	mov	r1, r5
   18fa8:	f242 000b 	movw	r0, #8203	; 0x200b
   18fac:	f7fe face 	bl	1754c <bt_hci_cmd_send_sync>
	if (err) {
   18fb0:	4605      	mov	r5, r0
   18fb2:	2800      	cmp	r0, #0
   18fb4:	d1e3      	bne.n	18f7e <start_le_scan_legacy+0x4e>
	err = bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
   18fb6:	2001      	movs	r0, #1
   18fb8:	f011 f8b3 	bl	2a122 <bt_le_scan_set_enable>
	if (err) {
   18fbc:	4605      	mov	r5, r0
   18fbe:	2800      	cmp	r0, #0
   18fc0:	d1dd      	bne.n	18f7e <start_le_scan_legacy+0x4e>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_ACTIVE_SCAN, active_scan);
   18fc2:	4622      	mov	r2, r4
   18fc4:	2108      	movs	r1, #8
   18fc6:	4803      	ldr	r0, [pc, #12]	; (18fd4 <start_le_scan_legacy+0xa4>)
   18fc8:	f011 f886 	bl	2a0d8 <atomic_set_bit_to>
	return 0;
   18fcc:	e7d7      	b.n	18f7e <start_le_scan_legacy+0x4e>
		return -ENOBUFS;
   18fce:	f06f 0568 	mvn.w	r5, #104	; 0x68
   18fd2:	e7d4      	b.n	18f7e <start_le_scan_legacy+0x4e>
   18fd4:	2000043c 	.word	0x2000043c

00018fd8 <bt_le_scan_update>:

	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
}

int bt_le_scan_update(bool fast_scan)
{
   18fd8:	b538      	push	{r3, r4, r5, lr}
   18fda:	f3bf 8f5b 	dmb	ish
   18fde:	4b21      	ldr	r3, [pc, #132]	; (19064 <bt_le_scan_update+0x8c>)
   18fe0:	681b      	ldr	r3, [r3, #0]
   18fe2:	f3bf 8f5b 	dmb	ish
   18fe6:	f3c3 14c0 	ubfx	r4, r3, #7, #1
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   18fea:	f013 0f80 	tst.w	r3, #128	; 0x80
   18fee:	d002      	beq.n	18ff6 <bt_le_scan_update+0x1e>
		return 0;
   18ff0:	2400      	movs	r4, #0
		return start_passive_scan(fast_scan);
	}
#endif

	return 0;
}
   18ff2:	4620      	mov	r0, r4
   18ff4:	bd38      	pop	{r3, r4, r5, pc}
   18ff6:	4605      	mov	r5, r0
   18ff8:	f3bf 8f5b 	dmb	ish
   18ffc:	4b19      	ldr	r3, [pc, #100]	; (19064 <bt_le_scan_update+0x8c>)
   18ffe:	681b      	ldr	r3, [r3, #0]
   19000:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   19004:	f013 0f40 	tst.w	r3, #64	; 0x40
   19008:	d003      	beq.n	19012 <bt_le_scan_update+0x3a>
		err = bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
   1900a:	2000      	movs	r0, #0
   1900c:	f011 f889 	bl	2a122 <bt_le_scan_set_enable>
		if (err) {
   19010:	bb28      	cbnz	r0, 1905e <bt_le_scan_update+0x86>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
   19012:	2206      	movs	r2, #6
   19014:	2100      	movs	r1, #0
   19016:	4608      	mov	r0, r1
   19018:	f000 ff28 	bl	19e6c <bt_conn_lookup_state_le>
		if (conn) {
   1901c:	b110      	cbz	r0, 19024 <bt_le_scan_update+0x4c>
			bt_conn_unref(conn);
   1901e:	f011 f979 	bl	2a314 <bt_conn_unref>
			return 0;
   19022:	e7e6      	b.n	18ff2 <bt_le_scan_update+0x1a>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
   19024:	2202      	movs	r2, #2
   19026:	2100      	movs	r1, #0
   19028:	4608      	mov	r0, r1
   1902a:	f000 ff1f 	bl	19e6c <bt_conn_lookup_state_le>
		if (conn) {
   1902e:	4603      	mov	r3, r0
   19030:	2800      	cmp	r0, #0
   19032:	d0de      	beq.n	18ff2 <bt_le_scan_update+0x1a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   19034:	4a0b      	ldr	r2, [pc, #44]	; (19064 <bt_le_scan_update+0x8c>)
   19036:	f3bf 8f5b 	dmb	ish
   1903a:	e852 0f00 	ldrex	r0, [r2]
   1903e:	f440 7000 	orr.w	r0, r0, #512	; 0x200
   19042:	e842 0100 	strex	r1, r0, [r2]
   19046:	2900      	cmp	r1, #0
   19048:	d1f7      	bne.n	1903a <bt_le_scan_update+0x62>
   1904a:	f3bf 8f5b 	dmb	ish
			bt_conn_unref(conn);
   1904e:	4618      	mov	r0, r3
   19050:	f011 f960 	bl	2a314 <bt_conn_unref>
			return start_passive_scan(fast_scan);
   19054:	4628      	mov	r0, r5
   19056:	f011 f868 	bl	2a12a <start_passive_scan>
   1905a:	4604      	mov	r4, r0
   1905c:	e7c9      	b.n	18ff2 <bt_le_scan_update+0x1a>
			return err;
   1905e:	4604      	mov	r4, r0
   19060:	e7c7      	b.n	18ff2 <bt_le_scan_update+0x1a>
   19062:	bf00      	nop
   19064:	2000043c 	.word	0x2000043c

00019068 <check_pending_conn>:

#if defined(CONFIG_BT_CENTRAL)
static void check_pending_conn(const bt_addr_le_t *id_addr,
			       const bt_addr_le_t *addr, uint8_t adv_props)
{
   19068:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1906a:	f3bf 8f5b 	dmb	ish
   1906e:	4b20      	ldr	r3, [pc, #128]	; (190f0 <check_pending_conn+0x88>)
   19070:	681b      	ldr	r3, [r3, #0]
   19072:	f3bf 8f5b 	dmb	ish
	struct bt_conn *conn;

	/* No connections are allowed during explicit scanning */
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   19076:	f013 0f80 	tst.w	r3, #128	; 0x80
   1907a:	d103      	bne.n	19084 <check_pending_conn+0x1c>
   1907c:	460c      	mov	r4, r1
		return;
	}

	/* Return if event is not connectable */
	if (!(adv_props & BT_HCI_LE_ADV_EVT_TYPE_CONN)) {
   1907e:	f012 0f01 	tst.w	r2, #1
   19082:	d100      	bne.n	19086 <check_pending_conn+0x1e>
failed:
	conn->err = BT_HCI_ERR_UNSPECIFIED;
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
	bt_conn_unref(conn);
	bt_le_scan_update(false);
}
   19084:	bd38      	pop	{r3, r4, r5, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, id_addr,
   19086:	2202      	movs	r2, #2
   19088:	4601      	mov	r1, r0
   1908a:	2000      	movs	r0, #0
   1908c:	f000 feee 	bl	19e6c <bt_conn_lookup_state_le>
	if (!conn) {
   19090:	4605      	mov	r5, r0
   19092:	2800      	cmp	r0, #0
   19094:	d0f6      	beq.n	19084 <check_pending_conn+0x1c>
   19096:	f3bf 8f5b 	dmb	ish
   1909a:	4b15      	ldr	r3, [pc, #84]	; (190f0 <check_pending_conn+0x88>)
   1909c:	681b      	ldr	r3, [r3, #0]
   1909e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   190a2:	f013 0f40 	tst.w	r3, #64	; 0x40
   190a6:	d003      	beq.n	190b0 <check_pending_conn+0x48>
	    bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE)) {
   190a8:	2000      	movs	r0, #0
   190aa:	f011 f83a 	bl	2a122 <bt_le_scan_set_enable>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   190ae:	b948      	cbnz	r0, 190c4 <check_pending_conn+0x5c>
	memcpy(dst, src, sizeof(*dst));
   190b0:	2207      	movs	r2, #7
   190b2:	4621      	mov	r1, r4
   190b4:	f105 0096 	add.w	r0, r5, #150	; 0x96
   190b8:	f010 fd7b 	bl	29bb2 <memcpy>
	if (bt_le_create_conn(conn)) {
   190bc:	4628      	mov	r0, r5
   190be:	f010 ff0d 	bl	29edc <bt_le_create_conn>
   190c2:	b160      	cbz	r0, 190de <check_pending_conn+0x76>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
   190c4:	231f      	movs	r3, #31
   190c6:	726b      	strb	r3, [r5, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   190c8:	2100      	movs	r1, #0
   190ca:	4628      	mov	r0, r5
   190cc:	f000 fc3e 	bl	1994c <bt_conn_set_state>
	bt_conn_unref(conn);
   190d0:	4628      	mov	r0, r5
   190d2:	f011 f91f 	bl	2a314 <bt_conn_unref>
	bt_le_scan_update(false);
   190d6:	2000      	movs	r0, #0
   190d8:	f7ff ff7e 	bl	18fd8 <bt_le_scan_update>
   190dc:	e7d2      	b.n	19084 <check_pending_conn+0x1c>
	bt_conn_set_state(conn, BT_CONN_CONNECTING);
   190de:	2106      	movs	r1, #6
   190e0:	4628      	mov	r0, r5
   190e2:	f000 fc33 	bl	1994c <bt_conn_set_state>
	bt_conn_unref(conn);
   190e6:	4628      	mov	r0, r5
   190e8:	f011 f914 	bl	2a314 <bt_conn_unref>
	return;
   190ec:	e7ca      	b.n	19084 <check_pending_conn+0x1c>
   190ee:	bf00      	nop
   190f0:	2000043c 	.word	0x2000043c

000190f4 <le_adv_recv>:
	}
}

static void le_adv_recv(bt_addr_le_t *addr, struct bt_le_scan_recv_info *info,
			struct net_buf_simple *buf, uint16_t len)
{
   190f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   190f8:	b085      	sub	sp, #20
   190fa:	4682      	mov	sl, r0
   190fc:	4688      	mov	r8, r1
   190fe:	4614      	mov	r4, r2
   19100:	4699      	mov	r9, r3
   19102:	f3bf 8f5b 	dmb	ish
   19106:	4b44      	ldr	r3, [pc, #272]	; (19218 <le_adv_recv+0x124>)
   19108:	681b      	ldr	r3, [r3, #0]
   1910a:	f3bf 8f5b 	dmb	ish
	bt_addr_le_t id_addr;

	LOG_DBG("%s event %u, len %u, rssi %d dBm", bt_addr_le_str(addr), info->adv_type, len,
		info->rssi);

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
   1910e:	f013 0f80 	tst.w	r3, #128	; 0x80
   19112:	d003      	beq.n	1911c <le_adv_recv+0x28>
	    !IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
	    (info->adv_props & BT_HCI_LE_ADV_PROP_DIRECT)) {
   19114:	890b      	ldrh	r3, [r1, #8]
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
   19116:	f013 0f04 	tst.w	r3, #4
   1911a:	d179      	bne.n	19210 <le_adv_recv+0x11c>
		LOG_DBG("Dropped direct adv report");
		return;
	}

	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
   1911c:	f89a 2000 	ldrb.w	r2, [sl]
   19120:	1e93      	subs	r3, r2, #2
   19122:	b2db      	uxtb	r3, r3
   19124:	2b01      	cmp	r3, #1
   19126:	d934      	bls.n	19192 <le_adv_recv+0x9e>
	    addr->type == BT_ADDR_LE_RANDOM_ID) {
		bt_addr_le_copy(&id_addr, addr);
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
   19128:	2aff      	cmp	r2, #255	; 0xff
   1912a:	d03d      	beq.n	191a8 <le_adv_recv+0xb4>
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
	} else {
		bt_addr_le_copy(&id_addr,
   1912c:	4651      	mov	r1, sl
   1912e:	2000      	movs	r0, #0
   19130:	f010 ff9f 	bl	2a072 <bt_lookup_id_addr>
   19134:	4601      	mov	r1, r0
   19136:	2207      	movs	r2, #7
   19138:	a801      	add	r0, sp, #4
   1913a:	f010 fd3a 	bl	29bb2 <memcpy>
				bt_lookup_id_addr(BT_ID_DEFAULT, addr));
	}

	if (scan_dev_found_cb) {
   1913e:	4b37      	ldr	r3, [pc, #220]	; (1921c <le_adv_recv+0x128>)
   19140:	681b      	ldr	r3, [r3, #0]
   19142:	b1c3      	cbz	r3, 19176 <le_adv_recv+0x82>
	state->offset = net_buf_simple_headroom(buf);
   19144:	4620      	mov	r0, r4
   19146:	f013 fadd 	bl	2c704 <net_buf_simple_headroom>
   1914a:	4605      	mov	r5, r0
   1914c:	f8ad 000c 	strh.w	r0, [sp, #12]
	state->len = buf->len;
   19150:	88a6      	ldrh	r6, [r4, #4]
   19152:	f8ad 600e 	strh.w	r6, [sp, #14]
		net_buf_simple_save(buf, &state);

		buf->len = len;
   19156:	f8a4 9004 	strh.w	r9, [r4, #4]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type, buf);
   1915a:	4b30      	ldr	r3, [pc, #192]	; (1921c <le_adv_recv+0x128>)
   1915c:	681f      	ldr	r7, [r3, #0]
   1915e:	4623      	mov	r3, r4
   19160:	f898 2007 	ldrb.w	r2, [r8, #7]
   19164:	f998 1005 	ldrsb.w	r1, [r8, #5]
   19168:	a801      	add	r0, sp, #4
   1916a:	47b8      	blx	r7
	buf->data = buf->__buf + state->offset;
   1916c:	68a3      	ldr	r3, [r4, #8]
   1916e:	fa13 f585 	uxtah	r5, r3, r5
   19172:	6025      	str	r5, [r4, #0]
	buf->len = state->len;
   19174:	80a6      	strh	r6, [r4, #4]

		net_buf_simple_restore(buf, &state);
	}

	info->addr = &id_addr;
   19176:	ab01      	add	r3, sp, #4
   19178:	f8c8 3000 	str.w	r3, [r8]
   1917c:	4b28      	ldr	r3, [pc, #160]	; (19220 <le_adv_recv+0x12c>)
   1917e:	681e      	ldr	r6, [r3, #0]

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   19180:	b1c6      	cbz	r6, 191b4 <le_adv_recv+0xc0>
   19182:	3e08      	subs	r6, #8
Z_GENLIST_PEEK_NEXT(slist, snode)
   19184:	f116 0508 	adds.w	r5, r6, #8
   19188:	d019      	beq.n	191be <le_adv_recv+0xca>
	return node->next;
   1918a:	68b5      	ldr	r5, [r6, #8]
   1918c:	b1bd      	cbz	r5, 191be <le_adv_recv+0xca>
   1918e:	3d08      	subs	r5, #8
   19190:	e015      	b.n	191be <le_adv_recv+0xca>
   19192:	2207      	movs	r2, #7
   19194:	4651      	mov	r1, sl
   19196:	a801      	add	r0, sp, #4
   19198:	f010 fd0b 	bl	29bb2 <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   1919c:	f89d 3004 	ldrb.w	r3, [sp, #4]
   191a0:	3b02      	subs	r3, #2
   191a2:	f88d 3004 	strb.w	r3, [sp, #4]
   191a6:	e7ca      	b.n	1913e <le_adv_recv+0x4a>
   191a8:	2207      	movs	r2, #7
   191aa:	491e      	ldr	r1, [pc, #120]	; (19224 <le_adv_recv+0x130>)
   191ac:	a801      	add	r0, sp, #4
   191ae:	f010 fd00 	bl	29bb2 <memcpy>
}
   191b2:	e7c4      	b.n	1913e <le_adv_recv+0x4a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   191b4:	4635      	mov	r5, r6
   191b6:	e002      	b.n	191be <le_adv_recv+0xca>
   191b8:	462a      	mov	r2, r5
   191ba:	462e      	mov	r6, r5
   191bc:	4615      	mov	r5, r2
   191be:	b1f6      	cbz	r6, 191fe <le_adv_recv+0x10a>
		if (listener->recv) {
   191c0:	6833      	ldr	r3, [r6, #0]
   191c2:	b1ab      	cbz	r3, 191f0 <le_adv_recv+0xfc>
	state->offset = net_buf_simple_headroom(buf);
   191c4:	4620      	mov	r0, r4
   191c6:	f013 fa9d 	bl	2c704 <net_buf_simple_headroom>
   191ca:	4607      	mov	r7, r0
   191cc:	f8ad 000c 	strh.w	r0, [sp, #12]
	state->len = buf->len;
   191d0:	f8b4 b004 	ldrh.w	fp, [r4, #4]
   191d4:	f8ad b00e 	strh.w	fp, [sp, #14]
			net_buf_simple_save(buf, &state);

			buf->len = len;
   191d8:	f8a4 9004 	strh.w	r9, [r4, #4]
			listener->recv(info, buf);
   191dc:	6833      	ldr	r3, [r6, #0]
   191de:	4621      	mov	r1, r4
   191e0:	4640      	mov	r0, r8
   191e2:	4798      	blx	r3
	buf->data = buf->__buf + state->offset;
   191e4:	68a3      	ldr	r3, [r4, #8]
   191e6:	fa13 f787 	uxtah	r7, r3, r7
   191ea:	6027      	str	r7, [r4, #0]
	buf->len = state->len;
   191ec:	f8a4 b004 	strh.w	fp, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   191f0:	2d00      	cmp	r5, #0
   191f2:	d0e1      	beq.n	191b8 <le_adv_recv+0xc4>
   191f4:	68aa      	ldr	r2, [r5, #8]
   191f6:	2a00      	cmp	r2, #0
   191f8:	d0df      	beq.n	191ba <le_adv_recv+0xc6>
   191fa:	3a08      	subs	r2, #8
   191fc:	e7dd      	b.n	191ba <le_adv_recv+0xc6>
			net_buf_simple_restore(buf, &state);
		}
	}

	/* Clear pointer to this stack frame before returning to calling function */
	info->addr = NULL;
   191fe:	2300      	movs	r3, #0
   19200:	f8c8 3000 	str.w	r3, [r8]

#if defined(CONFIG_BT_CENTRAL)
	check_pending_conn(&id_addr, addr, info->adv_props);
   19204:	f898 2008 	ldrb.w	r2, [r8, #8]
   19208:	4651      	mov	r1, sl
   1920a:	a801      	add	r0, sp, #4
   1920c:	f7ff ff2c 	bl	19068 <check_pending_conn>
#endif /* CONFIG_BT_CENTRAL */
}
   19210:	b005      	add	sp, #20
   19212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19216:	bf00      	nop
   19218:	2000043c 	.word	0x2000043c
   1921c:	20007d08 	.word	0x20007d08
   19220:	20007d00 	.word	0x20007d00
   19224:	0003236c 	.word	0x0003236c

00019228 <bt_hci_le_adv_report>:
#endif /* CONFIG_BT_DF_CONNECTIONLESS_CTE_RX */
#endif /* defined(CONFIG_BT_PER_ADV_SYNC) */
#endif /* defined(CONFIG_BT_EXT_ADV) */

void bt_hci_le_adv_report(struct net_buf *buf)
{
   19228:	b5f0      	push	{r4, r5, r6, r7, lr}
   1922a:	b085      	sub	sp, #20
   1922c:	4607      	mov	r7, r0
 *
 * @return The 8-bit removed value
 */
static inline uint8_t net_buf_pull_u8(struct net_buf *buf)
{
	return net_buf_simple_pull_u8(&buf->b);
   1922e:	f100 060c 	add.w	r6, r0, #12
   19232:	4630      	mov	r0, r6
   19234:	f013 fa56 	bl	2c6e4 <net_buf_simple_pull_u8>
	uint8_t num_reports = net_buf_pull_u8(buf);
	struct bt_hci_evt_le_advertising_info *evt;

	LOG_DBG("Adv number of reports %u",  num_reports);
   19238:	e02b      	b.n	19292 <bt_hci_le_adv_report+0x6a>
	return net_buf_simple_pull_mem(&buf->b, len);
   1923a:	2109      	movs	r1, #9
   1923c:	4630      	mov	r0, r6
   1923e:	f013 fa49 	bl	2c6d4 <net_buf_simple_pull_mem>
   19242:	4604      	mov	r4, r0
			break;
		}

		evt = net_buf_pull_mem(buf, sizeof(*evt));

		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
   19244:	2301      	movs	r3, #1
   19246:	f88d 300c 	strb.w	r3, [sp, #12]
		adv_info.secondary_phy = 0;
   1924a:	2200      	movs	r2, #0
   1924c:	f88d 200d 	strb.w	r2, [sp, #13]
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
   19250:	237f      	movs	r3, #127	; 0x7f
   19252:	f88d 3006 	strb.w	r3, [sp, #6]
		adv_info.rssi = evt->data[evt->length];
   19256:	7a03      	ldrb	r3, [r0, #8]
   19258:	4403      	add	r3, r0
   1925a:	f993 3009 	ldrsb.w	r3, [r3, #9]
   1925e:	f88d 3005 	strb.w	r3, [sp, #5]
		adv_info.sid = BT_GAP_SID_INVALID;
   19262:	23ff      	movs	r3, #255	; 0xff
   19264:	f88d 3004 	strb.w	r3, [sp, #4]
		adv_info.interval = 0U;
   19268:	f8ad 200a 	strh.w	r2, [sp, #10]

		adv_info.adv_type = evt->evt_type;
   1926c:	7800      	ldrb	r0, [r0, #0]
   1926e:	f88d 0007 	strb.w	r0, [sp, #7]
		adv_info.adv_props = get_adv_props_legacy(evt->evt_type);
   19272:	f010 ff20 	bl	2a0b6 <get_adv_props_legacy>
   19276:	f8ad 0008 	strh.w	r0, [sp, #8]

		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);
   1927a:	7a23      	ldrb	r3, [r4, #8]
   1927c:	4632      	mov	r2, r6
   1927e:	4669      	mov	r1, sp
   19280:	1c60      	adds	r0, r4, #1
   19282:	f7ff ff37 	bl	190f4 <le_adv_recv>

		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
   19286:	7a21      	ldrb	r1, [r4, #8]
	return net_buf_simple_pull(&buf->b, len);
   19288:	3101      	adds	r1, #1
   1928a:	4630      	mov	r0, r6
   1928c:	f013 fa1a 	bl	2c6c4 <net_buf_simple_pull>
	while (num_reports--) {
   19290:	4628      	mov	r0, r5
   19292:	1e45      	subs	r5, r0, #1
   19294:	b2ed      	uxtb	r5, r5
   19296:	b388      	cbz	r0, 192fc <bt_hci_le_adv_report+0xd4>
		if (buf->len < sizeof(*evt)) {
   19298:	8a3b      	ldrh	r3, [r7, #16]
   1929a:	2b08      	cmp	r3, #8
   1929c:	d8cd      	bhi.n	1923a <bt_hci_le_adv_report+0x12>
			LOG_ERR("Unexpected end of buffer");
   1929e:	2006      	movs	r0, #6
   192a0:	f7fa fd32 	bl	13d08 <z_log_msg_alloc>
   192a4:	2200      	movs	r2, #0
   192a6:	f36f 0200 	bfc	r2, #0, #1
   192aa:	f36f 0241 	bfc	r2, #1, #1
   192ae:	f36f 0282 	bfc	r2, #2, #1
   192b2:	f36f 02c5 	bfc	r2, #3, #3
   192b6:	2301      	movs	r3, #1
   192b8:	f363 1288 	bfi	r2, r3, #6, #3
   192bc:	2308      	movs	r3, #8
   192be:	f363 2252 	bfi	r2, r3, #9, #10
   192c2:	f36f 42de 	bfc	r2, #19, #12
   192c6:	f36f 72df 	bfc	r2, #31, #1
   192ca:	4604      	mov	r4, r0
   192cc:	b188      	cbz	r0, 192f2 <bt_hci_le_adv_report+0xca>
   192ce:	f110 0310 	adds.w	r3, r0, #16
   192d2:	d001      	beq.n	192d8 <bt_hci_le_adv_report+0xb0>
   192d4:	490a      	ldr	r1, [pc, #40]	; (19300 <bt_hci_le_adv_report+0xd8>)
   192d6:	6141      	str	r1, [r0, #20]
   192d8:	b15b      	cbz	r3, 192f2 <bt_hci_le_adv_report+0xca>
   192da:	2302      	movs	r3, #2
   192dc:	f88d 3000 	strb.w	r3, [sp]
   192e0:	2300      	movs	r3, #0
   192e2:	f88d 3001 	strb.w	r3, [sp, #1]
   192e6:	f88d 3002 	strb.w	r3, [sp, #2]
   192ea:	f88d 3003 	strb.w	r3, [sp, #3]
   192ee:	9800      	ldr	r0, [sp, #0]
   192f0:	6120      	str	r0, [r4, #16]
   192f2:	2300      	movs	r3, #0
   192f4:	4903      	ldr	r1, [pc, #12]	; (19304 <bt_hci_le_adv_report+0xdc>)
   192f6:	4620      	mov	r0, r4
   192f8:	f00f ff6f 	bl	291da <z_log_msg_finalize>
	}
}
   192fc:	b005      	add	sp, #20
   192fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19300:	00032ab0 	.word	0x00032ab0
   19304:	00031440 	.word	0x00031440

00019308 <state2str>:
#endif /* CONFIG_BT_CONN */
}

static inline const char *state2str(bt_conn_state_t state)
{
	switch (state) {
   19308:	2808      	cmp	r0, #8
   1930a:	d816      	bhi.n	1933a <state2str+0x32>
   1930c:	e8df f000 	tbb	[pc, r0]
   19310:	0d071705 	.word	0x0d071705
   19314:	110f090b 	.word	0x110f090b
   19318:	13          	.byte	0x13
   19319:	00          	.byte	0x00
   1931a:	480a      	ldr	r0, [pc, #40]	; (19344 <state2str+0x3c>)
   1931c:	4770      	bx	lr
	case BT_CONN_DISCONNECTED:
		return "disconnected";
	case BT_CONN_DISCONNECT_COMPLETE:
		return "disconnect-complete";
	case BT_CONN_CONNECTING_SCAN:
		return "connecting-scan";
   1931e:	480a      	ldr	r0, [pc, #40]	; (19348 <state2str+0x40>)
   19320:	4770      	bx	lr
	case BT_CONN_CONNECTING_DIR_ADV:
		return "connecting-dir-adv";
   19322:	480a      	ldr	r0, [pc, #40]	; (1934c <state2str+0x44>)
   19324:	4770      	bx	lr
	case BT_CONN_CONNECTING_ADV:
		return "connecting-adv";
   19326:	480a      	ldr	r0, [pc, #40]	; (19350 <state2str+0x48>)
   19328:	4770      	bx	lr
	case BT_CONN_CONNECTING_AUTO:
		return "connecting-auto";
   1932a:	480a      	ldr	r0, [pc, #40]	; (19354 <state2str+0x4c>)
   1932c:	4770      	bx	lr
	case BT_CONN_CONNECTING:
		return "connecting";
   1932e:	480a      	ldr	r0, [pc, #40]	; (19358 <state2str+0x50>)
   19330:	4770      	bx	lr
	case BT_CONN_CONNECTED:
		return "connected";
   19332:	480a      	ldr	r0, [pc, #40]	; (1935c <state2str+0x54>)
   19334:	4770      	bx	lr
	case BT_CONN_DISCONNECTING:
		return "disconnecting";
   19336:	480a      	ldr	r0, [pc, #40]	; (19360 <state2str+0x58>)
   19338:	4770      	bx	lr
	default:
		return "(unknown)";
   1933a:	480a      	ldr	r0, [pc, #40]	; (19364 <state2str+0x5c>)
   1933c:	4770      	bx	lr
		return "disconnect-complete";
   1933e:	480a      	ldr	r0, [pc, #40]	; (19368 <state2str+0x60>)
	}
}
   19340:	4770      	bx	lr
   19342:	bf00      	nop
   19344:	00032ad4 	.word	0x00032ad4
   19348:	00032af8 	.word	0x00032af8
   1934c:	00032b08 	.word	0x00032b08
   19350:	00032b1c 	.word	0x00032b1c
   19354:	00032b2c 	.word	0x00032b2c
   19358:	00032b3c 	.word	0x00032b3c
   1935c:	00032e18 	.word	0x00032e18
   19360:	00032b48 	.word	0x00032b48
   19364:	00032b58 	.word	0x00032b58
   19368:	00032ae4 	.word	0x00032ae4

0001936c <notify_connected>:
		return -ENOTCONN;
	}
}

static void notify_connected(struct bt_conn *conn)
{
   1936c:	b538      	push	{r3, r4, r5, lr}
   1936e:	4605      	mov	r5, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   19370:	4b0c      	ldr	r3, [pc, #48]	; (193a4 <notify_connected+0x38>)
   19372:	681c      	ldr	r4, [r3, #0]
   19374:	e003      	b.n	1937e <notify_connected+0x12>
		if (cb->connected) {
			cb->connected(conn, conn->err);
   19376:	7a69      	ldrb	r1, [r5, #9]
   19378:	4628      	mov	r0, r5
   1937a:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1937c:	6924      	ldr	r4, [r4, #16]
   1937e:	b11c      	cbz	r4, 19388 <notify_connected+0x1c>
		if (cb->connected) {
   19380:	6823      	ldr	r3, [r4, #0]
   19382:	2b00      	cmp	r3, #0
   19384:	d1f7      	bne.n	19376 <notify_connected+0xa>
   19386:	e7f9      	b.n	1937c <notify_connected+0x10>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   19388:	4c07      	ldr	r4, [pc, #28]	; (193a8 <notify_connected+0x3c>)
   1938a:	e000      	b.n	1938e <notify_connected+0x22>
   1938c:	3414      	adds	r4, #20
   1938e:	4b07      	ldr	r3, [pc, #28]	; (193ac <notify_connected+0x40>)
   19390:	429c      	cmp	r4, r3
   19392:	d206      	bcs.n	193a2 <notify_connected+0x36>
		if (cb->connected) {
   19394:	6823      	ldr	r3, [r4, #0]
   19396:	2b00      	cmp	r3, #0
   19398:	d0f8      	beq.n	1938c <notify_connected+0x20>
			cb->connected(conn, conn->err);
   1939a:	7a69      	ldrb	r1, [r5, #9]
   1939c:	4628      	mov	r0, r5
   1939e:	4798      	blx	r3
   193a0:	e7f4      	b.n	1938c <notify_connected+0x20>
		}
	}
}
   193a2:	bd38      	pop	{r3, r4, r5, pc}
   193a4:	20007d3c 	.word	0x20007d3c
   193a8:	000313dc 	.word	0x000313dc
   193ac:	000313f0 	.word	0x000313f0

000193b0 <notify_disconnected>:

static void notify_disconnected(struct bt_conn *conn)
{
   193b0:	b538      	push	{r3, r4, r5, lr}
   193b2:	4605      	mov	r5, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   193b4:	4b0c      	ldr	r3, [pc, #48]	; (193e8 <notify_disconnected+0x38>)
   193b6:	681c      	ldr	r4, [r3, #0]
   193b8:	e003      	b.n	193c2 <notify_disconnected+0x12>
		if (cb->disconnected) {
			cb->disconnected(conn, conn->err);
   193ba:	7a69      	ldrb	r1, [r5, #9]
   193bc:	4628      	mov	r0, r5
   193be:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   193c0:	6924      	ldr	r4, [r4, #16]
   193c2:	b11c      	cbz	r4, 193cc <notify_disconnected+0x1c>
		if (cb->disconnected) {
   193c4:	6863      	ldr	r3, [r4, #4]
   193c6:	2b00      	cmp	r3, #0
   193c8:	d1f7      	bne.n	193ba <notify_disconnected+0xa>
   193ca:	e7f9      	b.n	193c0 <notify_disconnected+0x10>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   193cc:	4c07      	ldr	r4, [pc, #28]	; (193ec <notify_disconnected+0x3c>)
   193ce:	e000      	b.n	193d2 <notify_disconnected+0x22>
   193d0:	3414      	adds	r4, #20
   193d2:	4b07      	ldr	r3, [pc, #28]	; (193f0 <notify_disconnected+0x40>)
   193d4:	429c      	cmp	r4, r3
   193d6:	d206      	bcs.n	193e6 <notify_disconnected+0x36>
		if (cb->disconnected) {
   193d8:	6863      	ldr	r3, [r4, #4]
   193da:	2b00      	cmp	r3, #0
   193dc:	d0f8      	beq.n	193d0 <notify_disconnected+0x20>
			cb->disconnected(conn, conn->err);
   193de:	7a69      	ldrb	r1, [r5, #9]
   193e0:	4628      	mov	r0, r5
   193e2:	4798      	blx	r3
   193e4:	e7f4      	b.n	193d0 <notify_disconnected+0x20>
		}
	}
}
   193e6:	bd38      	pop	{r3, r4, r5, pc}
   193e8:	20007d3c 	.word	0x20007d3c
   193ec:	000313dc 	.word	0x000313dc
   193f0:	000313f0 	.word	0x000313f0

000193f4 <create_param_setup>:

	return true;
}

static void create_param_setup(const struct bt_conn_le_create_param *param)
{
   193f4:	b410      	push	{r4}
	bt_dev.create_param = *param;
   193f6:	4c0c      	ldr	r4, [pc, #48]	; (19428 <create_param_setup+0x34>)
   193f8:	f104 0c08 	add.w	ip, r4, #8
   193fc:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   193fe:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	bt_dev.create_param.timeout =
		(bt_dev.create_param.timeout != 0) ?
   19402:	8aa3      	ldrh	r3, [r4, #20]
	bt_dev.create_param.timeout =
   19404:	b90b      	cbnz	r3, 1940a <create_param_setup+0x16>
   19406:	f44f 7396 	mov.w	r3, #300	; 0x12c
   1940a:	4a07      	ldr	r2, [pc, #28]	; (19428 <create_param_setup+0x34>)
   1940c:	8293      	strh	r3, [r2, #20]
		bt_dev.create_param.timeout :
		(MSEC_PER_SEC / 10) * CONFIG_BT_CREATE_CONN_TIMEOUT;

	bt_dev.create_param.interval_coded =
		(bt_dev.create_param.interval_coded != 0) ?
   1940e:	8a13      	ldrh	r3, [r2, #16]
	bt_dev.create_param.interval_coded =
   19410:	b903      	cbnz	r3, 19414 <create_param_setup+0x20>
   19412:	8993      	ldrh	r3, [r2, #12]
   19414:	4a04      	ldr	r2, [pc, #16]	; (19428 <create_param_setup+0x34>)
   19416:	8213      	strh	r3, [r2, #16]
		bt_dev.create_param.interval_coded :
		bt_dev.create_param.interval;

	bt_dev.create_param.window_coded =
		(bt_dev.create_param.window_coded != 0) ?
   19418:	8a53      	ldrh	r3, [r2, #18]
	bt_dev.create_param.window_coded =
   1941a:	b903      	cbnz	r3, 1941e <create_param_setup+0x2a>
   1941c:	89d3      	ldrh	r3, [r2, #14]
   1941e:	4a02      	ldr	r2, [pc, #8]	; (19428 <create_param_setup+0x34>)
   19420:	8253      	strh	r3, [r2, #18]
		bt_dev.create_param.window_coded :
		bt_dev.create_param.window;
}
   19422:	bc10      	pop	{r4}
   19424:	4770      	bx	lr
   19426:	bf00      	nop
   19428:	20000370 	.word	0x20000370

0001942c <tx_free>:
{
   1942c:	b508      	push	{r3, lr}
   1942e:	4601      	mov	r1, r0
	tx->cb = NULL;
   19430:	2300      	movs	r3, #0
   19432:	6043      	str	r3, [r0, #4]
	tx->user_data = NULL;
   19434:	6083      	str	r3, [r0, #8]
	tx->pending_no_cb = 0U;
   19436:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   19438:	4801      	ldr	r0, [pc, #4]	; (19440 <tx_free+0x14>)
   1943a:	f017 f81b 	bl	30474 <k_queue_append>
}
   1943e:	bd08      	pop	{r3, pc}
   19440:	20000b18 	.word	0x20000b18

00019444 <conn_tx_alloc>:
{
   19444:	b508      	push	{r3, lr}
	return z_impl_z_current_get();
   19446:	f00d fe71 	bl	2712c <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   1944a:	4b08      	ldr	r3, [pc, #32]	; (1946c <conn_tx_alloc+0x28>)
   1944c:	4283      	cmp	r3, r0
   1944e:	d007      	beq.n	19460 <conn_tx_alloc+0x1c>
	return z_impl_k_queue_get(queue, timeout);
   19450:	f04f 32ff 	mov.w	r2, #4294967295
   19454:	f04f 33ff 	mov.w	r3, #4294967295
   19458:	4805      	ldr	r0, [pc, #20]	; (19470 <conn_tx_alloc+0x2c>)
   1945a:	f00d f86d 	bl	26538 <z_impl_k_queue_get>
}
   1945e:	bd08      	pop	{r3, pc}
   19460:	2200      	movs	r2, #0
   19462:	2300      	movs	r3, #0
   19464:	4802      	ldr	r0, [pc, #8]	; (19470 <conn_tx_alloc+0x2c>)
   19466:	f00d f867 	bl	26538 <z_impl_k_queue_get>
		return k_fifo_get(&free_tx, K_NO_WAIT);
   1946a:	e7f8      	b.n	1945e <conn_tx_alloc+0x1a>
   1946c:	20007808 	.word	0x20007808
   19470:	20000b18 	.word	0x20000b18

00019474 <bt_conn_get_pkts>:
}
   19474:	4800      	ldr	r0, [pc, #0]	; (19478 <bt_conn_get_pkts+0x4>)
   19476:	4770      	bx	lr
   19478:	20000470 	.word	0x20000470

0001947c <bt_conn_new>:
{
   1947c:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
   1947e:	2300      	movs	r3, #0
   19480:	428b      	cmp	r3, r1
   19482:	d229      	bcs.n	194d8 <bt_conn_new+0x5c>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   19484:	eb03 0443 	add.w	r4, r3, r3, lsl #1
   19488:	eb00 1484 	add.w	r4, r0, r4, lsl #6
   1948c:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   19490:	f04f 0c01 	mov.w	ip, #1
   19494:	f3bf 8f5b 	dmb	ish
   19498:	e852 ef00 	ldrex	lr, [r2]
   1949c:	f1be 0f00 	cmp.w	lr, #0
   194a0:	d103      	bne.n	194aa <bt_conn_new+0x2e>
   194a2:	e842 c500 	strex	r5, ip, [r2]
   194a6:	2d00      	cmp	r5, #0
   194a8:	d1f6      	bne.n	19498 <bt_conn_new+0x1c>
   194aa:	f3bf 8f5b 	dmb	ish
   194ae:	d111      	bne.n	194d4 <bt_conn_new+0x58>
	if (!conn) {
   194b0:	b174      	cbz	r4, 194d0 <bt_conn_new+0x54>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   194b2:	22b8      	movs	r2, #184	; 0xb8
   194b4:	2100      	movs	r1, #0
   194b6:	4620      	mov	r0, r4
   194b8:	f010 fbaa 	bl	29c10 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   194bc:	4907      	ldr	r1, [pc, #28]	; (194dc <bt_conn_new+0x60>)
   194be:	f104 0058 	add.w	r0, r4, #88	; 0x58
   194c2:	f017 f901 	bl	306c8 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   194c6:	4906      	ldr	r1, [pc, #24]	; (194e0 <bt_conn_new+0x64>)
   194c8:	f104 0028 	add.w	r0, r4, #40	; 0x28
   194cc:	f017 f8d0 	bl	30670 <k_work_init>
}
   194d0:	4620      	mov	r0, r4
   194d2:	bd38      	pop	{r3, r4, r5, pc}
	for (i = 0; i < size; i++) {
   194d4:	4463      	add	r3, ip
   194d6:	e7d3      	b.n	19480 <bt_conn_new+0x4>
	struct bt_conn *conn = NULL;
   194d8:	2400      	movs	r4, #0
   194da:	e7e9      	b.n	194b0 <bt_conn_new+0x34>
   194dc:	0001a185 	.word	0x0001a185
   194e0:	0002a1a3 	.word	0x0002a1a3

000194e4 <acl_conn_new>:
{
   194e4:	b508      	push	{r3, lr}
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   194e6:	2108      	movs	r1, #8
   194e8:	4801      	ldr	r0, [pc, #4]	; (194f0 <acl_conn_new+0xc>)
   194ea:	f7ff ffc7 	bl	1947c <bt_conn_new>
}
   194ee:	bd08      	pop	{r3, pc}
   194f0:	200020f8 	.word	0x200020f8

000194f4 <bt_acl_recv>:
{
   194f4:	b570      	push	{r4, r5, r6, lr}
   194f6:	b082      	sub	sp, #8
   194f8:	4604      	mov	r4, r0
   194fa:	460e      	mov	r6, r1
	switch (flags) {
   194fc:	2a01      	cmp	r2, #1
   194fe:	d050      	beq.n	195a2 <bt_acl_recv+0xae>
   19500:	4615      	mov	r5, r2
   19502:	2a02      	cmp	r2, #2
   19504:	f040 80d5 	bne.w	196b2 <bt_acl_recv+0x1be>
		if (conn->rx) {
   19508:	6903      	ldr	r3, [r0, #16]
   1950a:	b38b      	cbz	r3, 19570 <bt_acl_recv+0x7c>
			LOG_ERR("Unexpected first L2CAP frame");
   1950c:	2006      	movs	r0, #6
   1950e:	f7fa fbfb 	bl	13d08 <z_log_msg_alloc>
   19512:	2200      	movs	r2, #0
   19514:	f36f 0200 	bfc	r2, #0, #1
   19518:	f36f 0241 	bfc	r2, #1, #1
   1951c:	f36f 0282 	bfc	r2, #2, #1
   19520:	f36f 02c5 	bfc	r2, #3, #3
   19524:	2301      	movs	r3, #1
   19526:	f363 1288 	bfi	r2, r3, #6, #3
   1952a:	2308      	movs	r3, #8
   1952c:	f363 2252 	bfi	r2, r3, #9, #10
   19530:	f36f 42de 	bfc	r2, #19, #12
   19534:	f36f 72df 	bfc	r2, #31, #1
   19538:	4605      	mov	r5, r0
   1953a:	b188      	cbz	r0, 19560 <bt_acl_recv+0x6c>
   1953c:	f110 0310 	adds.w	r3, r0, #16
   19540:	d001      	beq.n	19546 <bt_acl_recv+0x52>
   19542:	4993      	ldr	r1, [pc, #588]	; (19790 <bt_acl_recv+0x29c>)
   19544:	6141      	str	r1, [r0, #20]
   19546:	b15b      	cbz	r3, 19560 <bt_acl_recv+0x6c>
   19548:	2302      	movs	r3, #2
   1954a:	f88d 3004 	strb.w	r3, [sp, #4]
   1954e:	2300      	movs	r3, #0
   19550:	f88d 3005 	strb.w	r3, [sp, #5]
   19554:	f88d 3006 	strb.w	r3, [sp, #6]
   19558:	f88d 3007 	strb.w	r3, [sp, #7]
   1955c:	9801      	ldr	r0, [sp, #4]
   1955e:	6128      	str	r0, [r5, #16]
   19560:	2300      	movs	r3, #0
   19562:	498c      	ldr	r1, [pc, #560]	; (19794 <bt_acl_recv+0x2a0>)
   19564:	4628      	mov	r0, r5
   19566:	f00f fe38 	bl	291da <z_log_msg_finalize>
			bt_conn_reset_rx_state(conn);
   1956a:	4620      	mov	r0, r4
   1956c:	f010 fe96 	bl	2a29c <bt_conn_reset_rx_state>
		conn->rx = buf;
   19570:	6126      	str	r6, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   19572:	6921      	ldr	r1, [r4, #16]
   19574:	8a0e      	ldrh	r6, [r1, #16]
   19576:	2e01      	cmp	r6, #1
   19578:	f240 80d2 	bls.w	19720 <bt_acl_recv+0x22c>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   1957c:	68cb      	ldr	r3, [r1, #12]
 *
 *  @return 16-bit integer in host endianness.
 */
static inline uint16_t sys_get_le16(const uint8_t src[2])
{
	return ((uint16_t)src[1] << 8) | src[0];
   1957e:	785a      	ldrb	r2, [r3, #1]
   19580:	781d      	ldrb	r5, [r3, #0]
   19582:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
   19586:	3504      	adds	r5, #4
   19588:	b2ad      	uxth	r5, r5
	if (conn->rx->len < acl_total_len) {
   1958a:	42b5      	cmp	r5, r6
   1958c:	f200 80c8 	bhi.w	19720 <bt_acl_recv+0x22c>
	if (conn->rx->len > acl_total_len) {
   19590:	f0c0 80c8 	bcc.w	19724 <bt_acl_recv+0x230>
	conn->rx = NULL;
   19594:	2300      	movs	r3, #0
   19596:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   19598:	2201      	movs	r2, #1
   1959a:	4620      	mov	r0, r4
   1959c:	f001 f9d4 	bl	1a948 <bt_l2cap_recv>
   195a0:	e0be      	b.n	19720 <bt_acl_recv+0x22c>
		if (!conn->rx) {
   195a2:	6900      	ldr	r0, [r0, #16]
   195a4:	b188      	cbz	r0, 195ca <bt_acl_recv+0xd6>
		if (!buf->len) {
   195a6:	8a0d      	ldrh	r5, [r1, #16]
   195a8:	2d00      	cmp	r5, #0
   195aa:	d044      	beq.n	19636 <bt_acl_recv+0x142>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   195ac:	300c      	adds	r0, #12
   195ae:	f013 f8ad 	bl	2c70c <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   195b2:	42a8      	cmp	r0, r5
   195b4:	d343      	bcc.n	1963e <bt_acl_recv+0x14a>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
   195b6:	6920      	ldr	r0, [r4, #16]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   195b8:	8a32      	ldrh	r2, [r6, #16]
   195ba:	68f1      	ldr	r1, [r6, #12]
   195bc:	300c      	adds	r0, #12
   195be:	f013 f865 	bl	2c68c <net_buf_simple_add_mem>
		net_buf_unref(buf);
   195c2:	4630      	mov	r0, r6
   195c4:	f013 f815 	bl	2c5f2 <net_buf_unref>
		break;
   195c8:	e7d3      	b.n	19572 <bt_acl_recv+0x7e>
			LOG_ERR("Unexpected L2CAP continuation");
   195ca:	2006      	movs	r0, #6
   195cc:	f7fa fb9c 	bl	13d08 <z_log_msg_alloc>
   195d0:	2200      	movs	r2, #0
   195d2:	f36f 0200 	bfc	r2, #0, #1
   195d6:	f36f 0241 	bfc	r2, #1, #1
   195da:	f36f 0282 	bfc	r2, #2, #1
   195de:	f36f 02c5 	bfc	r2, #3, #3
   195e2:	2301      	movs	r3, #1
   195e4:	f363 1288 	bfi	r2, r3, #6, #3
   195e8:	2308      	movs	r3, #8
   195ea:	f363 2252 	bfi	r2, r3, #9, #10
   195ee:	f36f 42de 	bfc	r2, #19, #12
   195f2:	f36f 72df 	bfc	r2, #31, #1
   195f6:	4605      	mov	r5, r0
   195f8:	b188      	cbz	r0, 1961e <bt_acl_recv+0x12a>
   195fa:	f110 0310 	adds.w	r3, r0, #16
   195fe:	d001      	beq.n	19604 <bt_acl_recv+0x110>
   19600:	4965      	ldr	r1, [pc, #404]	; (19798 <bt_acl_recv+0x2a4>)
   19602:	6141      	str	r1, [r0, #20]
   19604:	b15b      	cbz	r3, 1961e <bt_acl_recv+0x12a>
   19606:	2302      	movs	r3, #2
   19608:	f88d 3004 	strb.w	r3, [sp, #4]
   1960c:	2300      	movs	r3, #0
   1960e:	f88d 3005 	strb.w	r3, [sp, #5]
   19612:	f88d 3006 	strb.w	r3, [sp, #6]
   19616:	f88d 3007 	strb.w	r3, [sp, #7]
   1961a:	9801      	ldr	r0, [sp, #4]
   1961c:	6128      	str	r0, [r5, #16]
   1961e:	2300      	movs	r3, #0
   19620:	495c      	ldr	r1, [pc, #368]	; (19794 <bt_acl_recv+0x2a0>)
   19622:	4628      	mov	r0, r5
   19624:	f00f fdd9 	bl	291da <z_log_msg_finalize>
			bt_conn_reset_rx_state(conn);
   19628:	4620      	mov	r0, r4
   1962a:	f010 fe37 	bl	2a29c <bt_conn_reset_rx_state>
			net_buf_unref(buf);
   1962e:	4630      	mov	r0, r6
   19630:	f012 ffdf 	bl	2c5f2 <net_buf_unref>
			return;
   19634:	e074      	b.n	19720 <bt_acl_recv+0x22c>
			net_buf_unref(buf);
   19636:	4608      	mov	r0, r1
   19638:	f012 ffdb 	bl	2c5f2 <net_buf_unref>
			return;
   1963c:	e070      	b.n	19720 <bt_acl_recv+0x22c>
			LOG_ERR("Not enough buffer space for L2CAP data");
   1963e:	2006      	movs	r0, #6
   19640:	f7fa fb62 	bl	13d08 <z_log_msg_alloc>
   19644:	2200      	movs	r2, #0
   19646:	f36f 0200 	bfc	r2, #0, #1
   1964a:	f36f 0241 	bfc	r2, #1, #1
   1964e:	f36f 0282 	bfc	r2, #2, #1
   19652:	f36f 02c5 	bfc	r2, #3, #3
   19656:	2301      	movs	r3, #1
   19658:	f363 1288 	bfi	r2, r3, #6, #3
   1965c:	2308      	movs	r3, #8
   1965e:	f363 2252 	bfi	r2, r3, #9, #10
   19662:	f36f 42de 	bfc	r2, #19, #12
   19666:	f36f 72df 	bfc	r2, #31, #1
   1966a:	4605      	mov	r5, r0
   1966c:	b188      	cbz	r0, 19692 <bt_acl_recv+0x19e>
   1966e:	f110 0310 	adds.w	r3, r0, #16
   19672:	d001      	beq.n	19678 <bt_acl_recv+0x184>
   19674:	4949      	ldr	r1, [pc, #292]	; (1979c <bt_acl_recv+0x2a8>)
   19676:	6141      	str	r1, [r0, #20]
   19678:	b15b      	cbz	r3, 19692 <bt_acl_recv+0x19e>
   1967a:	2302      	movs	r3, #2
   1967c:	f88d 3004 	strb.w	r3, [sp, #4]
   19680:	2300      	movs	r3, #0
   19682:	f88d 3005 	strb.w	r3, [sp, #5]
   19686:	f88d 3006 	strb.w	r3, [sp, #6]
   1968a:	f88d 3007 	strb.w	r3, [sp, #7]
   1968e:	9801      	ldr	r0, [sp, #4]
   19690:	6128      	str	r0, [r5, #16]
   19692:	2300      	movs	r3, #0
   19694:	493f      	ldr	r1, [pc, #252]	; (19794 <bt_acl_recv+0x2a0>)
   19696:	4628      	mov	r0, r5
   19698:	f00f fd9f 	bl	291da <z_log_msg_finalize>
			bt_l2cap_recv(conn, conn->rx, false);
   1969c:	2200      	movs	r2, #0
   1969e:	6921      	ldr	r1, [r4, #16]
   196a0:	4620      	mov	r0, r4
   196a2:	f001 f951 	bl	1a948 <bt_l2cap_recv>
			conn->rx = NULL;
   196a6:	2300      	movs	r3, #0
   196a8:	6123      	str	r3, [r4, #16]
			net_buf_unref(buf);
   196aa:	4630      	mov	r0, r6
   196ac:	f012 ffa1 	bl	2c5f2 <net_buf_unref>
			return;
   196b0:	e036      	b.n	19720 <bt_acl_recv+0x22c>
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   196b2:	2008      	movs	r0, #8
   196b4:	f7fa fb28 	bl	13d08 <z_log_msg_alloc>
   196b8:	2200      	movs	r2, #0
   196ba:	f36f 0200 	bfc	r2, #0, #1
   196be:	f36f 0241 	bfc	r2, #1, #1
   196c2:	f36f 0282 	bfc	r2, #2, #1
   196c6:	f36f 02c5 	bfc	r2, #3, #3
   196ca:	2301      	movs	r3, #1
   196cc:	f363 1288 	bfi	r2, r3, #6, #3
   196d0:	230c      	movs	r3, #12
   196d2:	f363 2252 	bfi	r2, r3, #9, #10
   196d6:	f36f 42de 	bfc	r2, #19, #12
   196da:	f36f 72df 	bfc	r2, #31, #1
   196de:	4684      	mov	ip, r0
   196e0:	b198      	cbz	r0, 1970a <bt_acl_recv+0x216>
   196e2:	f110 0310 	adds.w	r3, r0, #16
   196e6:	d002      	beq.n	196ee <bt_acl_recv+0x1fa>
   196e8:	492d      	ldr	r1, [pc, #180]	; (197a0 <bt_acl_recv+0x2ac>)
   196ea:	6141      	str	r1, [r0, #20]
   196ec:	6185      	str	r5, [r0, #24]
   196ee:	b163      	cbz	r3, 1970a <bt_acl_recv+0x216>
   196f0:	2303      	movs	r3, #3
   196f2:	f88d 3004 	strb.w	r3, [sp, #4]
   196f6:	2300      	movs	r3, #0
   196f8:	f88d 3005 	strb.w	r3, [sp, #5]
   196fc:	f88d 3006 	strb.w	r3, [sp, #6]
   19700:	f88d 3007 	strb.w	r3, [sp, #7]
   19704:	9801      	ldr	r0, [sp, #4]
   19706:	f8cc 0010 	str.w	r0, [ip, #16]
   1970a:	2300      	movs	r3, #0
   1970c:	4921      	ldr	r1, [pc, #132]	; (19794 <bt_acl_recv+0x2a0>)
   1970e:	4660      	mov	r0, ip
   19710:	f00f fd63 	bl	291da <z_log_msg_finalize>
		bt_conn_reset_rx_state(conn);
   19714:	4620      	mov	r0, r4
   19716:	f010 fdc1 	bl	2a29c <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   1971a:	4630      	mov	r0, r6
   1971c:	f012 ff69 	bl	2c5f2 <net_buf_unref>
}
   19720:	b002      	add	sp, #8
   19722:	bd70      	pop	{r4, r5, r6, pc}
		LOG_ERR("ACL len mismatch (%u > %u)", conn->rx->len, acl_total_len);
   19724:	2008      	movs	r0, #8
   19726:	f7fa faef 	bl	13d08 <z_log_msg_alloc>
   1972a:	2200      	movs	r2, #0
   1972c:	f36f 0200 	bfc	r2, #0, #1
   19730:	f36f 0241 	bfc	r2, #1, #1
   19734:	f36f 0282 	bfc	r2, #2, #1
   19738:	f36f 02c5 	bfc	r2, #3, #3
   1973c:	2301      	movs	r3, #1
   1973e:	f363 1288 	bfi	r2, r3, #6, #3
   19742:	2310      	movs	r3, #16
   19744:	f363 2252 	bfi	r2, r3, #9, #10
   19748:	f36f 42de 	bfc	r2, #19, #12
   1974c:	f36f 72df 	bfc	r2, #31, #1
   19750:	4684      	mov	ip, r0
   19752:	b198      	cbz	r0, 1977c <bt_acl_recv+0x288>
   19754:	18c3      	adds	r3, r0, r3
   19756:	d003      	beq.n	19760 <bt_acl_recv+0x26c>
   19758:	4912      	ldr	r1, [pc, #72]	; (197a4 <bt_acl_recv+0x2b0>)
   1975a:	6141      	str	r1, [r0, #20]
   1975c:	6186      	str	r6, [r0, #24]
   1975e:	61c5      	str	r5, [r0, #28]
   19760:	b163      	cbz	r3, 1977c <bt_acl_recv+0x288>
   19762:	2304      	movs	r3, #4
   19764:	f88d 3004 	strb.w	r3, [sp, #4]
   19768:	2300      	movs	r3, #0
   1976a:	f88d 3005 	strb.w	r3, [sp, #5]
   1976e:	f88d 3006 	strb.w	r3, [sp, #6]
   19772:	f88d 3007 	strb.w	r3, [sp, #7]
   19776:	9801      	ldr	r0, [sp, #4]
   19778:	f8cc 0010 	str.w	r0, [ip, #16]
   1977c:	2300      	movs	r3, #0
   1977e:	4905      	ldr	r1, [pc, #20]	; (19794 <bt_acl_recv+0x2a0>)
   19780:	4660      	mov	r0, ip
   19782:	f00f fd2a 	bl	291da <z_log_msg_finalize>
		bt_conn_reset_rx_state(conn);
   19786:	4620      	mov	r0, r4
   19788:	f010 fd88 	bl	2a29c <bt_conn_reset_rx_state>
		return;
   1978c:	e7c8      	b.n	19720 <bt_acl_recv+0x22c>
   1978e:	bf00      	nop
   19790:	00032b64 	.word	0x00032b64
   19794:	00031418 	.word	0x00031418
   19798:	00032b84 	.word	0x00032b84
   1979c:	00032ba4 	.word	0x00032ba4
   197a0:	00032bcc 	.word	0x00032bcc
   197a4:	00032bec 	.word	0x00032bec

000197a8 <bt_conn_send_cb>:
{
   197a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   197ac:	b082      	sub	sp, #8
   197ae:	461f      	mov	r7, r3
	if (conn->state != BT_CONN_CONNECTED) {
   197b0:	7a83      	ldrb	r3, [r0, #10]
   197b2:	2b07      	cmp	r3, #7
   197b4:	d11b      	bne.n	197ee <bt_conn_send_cb+0x46>
   197b6:	4604      	mov	r4, r0
   197b8:	460d      	mov	r5, r1
   197ba:	4616      	mov	r6, r2
	if (cb) {
   197bc:	2a00      	cmp	r2, #0
   197be:	f000 80af 	beq.w	19920 <bt_conn_send_cb+0x178>
		tx = conn_tx_alloc();
   197c2:	f7ff fe3f 	bl	19444 <conn_tx_alloc>
		if (!tx) {
   197c6:	4680      	mov	r8, r0
   197c8:	2800      	cmp	r0, #0
   197ca:	d042      	beq.n	19852 <bt_conn_send_cb+0xaa>
		if (conn->state != BT_CONN_CONNECTED) {
   197cc:	7aa3      	ldrb	r3, [r4, #10]
   197ce:	2b07      	cmp	r3, #7
   197d0:	d171      	bne.n	198b6 <bt_conn_send_cb+0x10e>
		tx->cb = cb;
   197d2:	6046      	str	r6, [r0, #4]
		tx->user_data = user_data;
   197d4:	6087      	str	r7, [r0, #8]
		tx->pending_no_cb = 0U;
   197d6:	2300      	movs	r3, #0
   197d8:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   197da:	61a8      	str	r0, [r5, #24]
	net_buf_put(&conn->tx_queue, buf);
   197dc:	4629      	mov	r1, r5
   197de:	f104 0038 	add.w	r0, r4, #56	; 0x38
   197e2:	f012 ff02 	bl	2c5ea <net_buf_put>
	return 0;
   197e6:	2000      	movs	r0, #0
}
   197e8:	b002      	add	sp, #8
   197ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERR("not connected!");
   197ee:	2006      	movs	r0, #6
   197f0:	f7fa fa8a 	bl	13d08 <z_log_msg_alloc>
   197f4:	2200      	movs	r2, #0
   197f6:	f36f 0200 	bfc	r2, #0, #1
   197fa:	f36f 0241 	bfc	r2, #1, #1
   197fe:	f36f 0282 	bfc	r2, #2, #1
   19802:	f36f 02c5 	bfc	r2, #3, #3
   19806:	2301      	movs	r3, #1
   19808:	f363 1288 	bfi	r2, r3, #6, #3
   1980c:	2308      	movs	r3, #8
   1980e:	f363 2252 	bfi	r2, r3, #9, #10
   19812:	f36f 42de 	bfc	r2, #19, #12
   19816:	f36f 72df 	bfc	r2, #31, #1
   1981a:	4604      	mov	r4, r0
   1981c:	b188      	cbz	r0, 19842 <bt_conn_send_cb+0x9a>
   1981e:	f110 0310 	adds.w	r3, r0, #16
   19822:	d001      	beq.n	19828 <bt_conn_send_cb+0x80>
   19824:	4940      	ldr	r1, [pc, #256]	; (19928 <bt_conn_send_cb+0x180>)
   19826:	6141      	str	r1, [r0, #20]
   19828:	b15b      	cbz	r3, 19842 <bt_conn_send_cb+0x9a>
   1982a:	2302      	movs	r3, #2
   1982c:	f88d 3004 	strb.w	r3, [sp, #4]
   19830:	2300      	movs	r3, #0
   19832:	f88d 3005 	strb.w	r3, [sp, #5]
   19836:	f88d 3006 	strb.w	r3, [sp, #6]
   1983a:	f88d 3007 	strb.w	r3, [sp, #7]
   1983e:	9801      	ldr	r0, [sp, #4]
   19840:	6120      	str	r0, [r4, #16]
   19842:	2300      	movs	r3, #0
   19844:	4939      	ldr	r1, [pc, #228]	; (1992c <bt_conn_send_cb+0x184>)
   19846:	4620      	mov	r0, r4
   19848:	f00f fcc7 	bl	291da <z_log_msg_finalize>
		return -ENOTCONN;
   1984c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   19850:	e7ca      	b.n	197e8 <bt_conn_send_cb+0x40>
			LOG_ERR("Unable to allocate TX context");
   19852:	2006      	movs	r0, #6
   19854:	f7fa fa58 	bl	13d08 <z_log_msg_alloc>
   19858:	2200      	movs	r2, #0
   1985a:	f36f 0200 	bfc	r2, #0, #1
   1985e:	f36f 0241 	bfc	r2, #1, #1
   19862:	f36f 0282 	bfc	r2, #2, #1
   19866:	f36f 02c5 	bfc	r2, #3, #3
   1986a:	2301      	movs	r3, #1
   1986c:	f363 1288 	bfi	r2, r3, #6, #3
   19870:	2308      	movs	r3, #8
   19872:	f363 2252 	bfi	r2, r3, #9, #10
   19876:	f36f 42de 	bfc	r2, #19, #12
   1987a:	f36f 72df 	bfc	r2, #31, #1
   1987e:	4604      	mov	r4, r0
   19880:	b188      	cbz	r0, 198a6 <bt_conn_send_cb+0xfe>
   19882:	f110 0310 	adds.w	r3, r0, #16
   19886:	d001      	beq.n	1988c <bt_conn_send_cb+0xe4>
   19888:	4929      	ldr	r1, [pc, #164]	; (19930 <bt_conn_send_cb+0x188>)
   1988a:	6141      	str	r1, [r0, #20]
   1988c:	b15b      	cbz	r3, 198a6 <bt_conn_send_cb+0xfe>
   1988e:	2302      	movs	r3, #2
   19890:	f88d 3004 	strb.w	r3, [sp, #4]
   19894:	2300      	movs	r3, #0
   19896:	f88d 3005 	strb.w	r3, [sp, #5]
   1989a:	f88d 3006 	strb.w	r3, [sp, #6]
   1989e:	f88d 3007 	strb.w	r3, [sp, #7]
   198a2:	9801      	ldr	r0, [sp, #4]
   198a4:	6120      	str	r0, [r4, #16]
   198a6:	2300      	movs	r3, #0
   198a8:	4920      	ldr	r1, [pc, #128]	; (1992c <bt_conn_send_cb+0x184>)
   198aa:	4620      	mov	r0, r4
   198ac:	f00f fc95 	bl	291da <z_log_msg_finalize>
			return -ENOBUFS;
   198b0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   198b4:	e798      	b.n	197e8 <bt_conn_send_cb+0x40>
			LOG_WRN("Disconnected while allocating context");
   198b6:	2006      	movs	r0, #6
   198b8:	f7fa fa26 	bl	13d08 <z_log_msg_alloc>
   198bc:	2200      	movs	r2, #0
   198be:	f36f 0200 	bfc	r2, #0, #1
   198c2:	f36f 0241 	bfc	r2, #1, #1
   198c6:	f36f 0282 	bfc	r2, #2, #1
   198ca:	f36f 02c5 	bfc	r2, #3, #3
   198ce:	2302      	movs	r3, #2
   198d0:	f363 1288 	bfi	r2, r3, #6, #3
   198d4:	2308      	movs	r3, #8
   198d6:	f363 2252 	bfi	r2, r3, #9, #10
   198da:	f36f 42de 	bfc	r2, #19, #12
   198de:	f36f 72df 	bfc	r2, #31, #1
   198e2:	4604      	mov	r4, r0
   198e4:	b188      	cbz	r0, 1990a <bt_conn_send_cb+0x162>
   198e6:	f110 0310 	adds.w	r3, r0, #16
   198ea:	d001      	beq.n	198f0 <bt_conn_send_cb+0x148>
   198ec:	4911      	ldr	r1, [pc, #68]	; (19934 <bt_conn_send_cb+0x18c>)
   198ee:	6141      	str	r1, [r0, #20]
   198f0:	b15b      	cbz	r3, 1990a <bt_conn_send_cb+0x162>
   198f2:	2302      	movs	r3, #2
   198f4:	f88d 3004 	strb.w	r3, [sp, #4]
   198f8:	2300      	movs	r3, #0
   198fa:	f88d 3005 	strb.w	r3, [sp, #5]
   198fe:	f88d 3006 	strb.w	r3, [sp, #6]
   19902:	f88d 3007 	strb.w	r3, [sp, #7]
   19906:	9801      	ldr	r0, [sp, #4]
   19908:	6120      	str	r0, [r4, #16]
   1990a:	2300      	movs	r3, #0
   1990c:	4907      	ldr	r1, [pc, #28]	; (1992c <bt_conn_send_cb+0x184>)
   1990e:	4620      	mov	r0, r4
   19910:	f00f fc63 	bl	291da <z_log_msg_finalize>
			tx_free(tx);
   19914:	4640      	mov	r0, r8
   19916:	f7ff fd89 	bl	1942c <tx_free>
			return -ENOTCONN;
   1991a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1991e:	e763      	b.n	197e8 <bt_conn_send_cb+0x40>
		tx_data(buf)->tx = NULL;
   19920:	2300      	movs	r3, #0
   19922:	618b      	str	r3, [r1, #24]
   19924:	e75a      	b.n	197dc <bt_conn_send_cb+0x34>
   19926:	bf00      	nop
   19928:	00032c08 	.word	0x00032c08
   1992c:	00031418 	.word	0x00031418
   19930:	00032c18 	.word	0x00032c18
   19934:	00032c38 	.word	0x00032c38

00019938 <bt_conn_lookup_handle>:
{
   19938:	b508      	push	{r3, lr}
   1993a:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   1993c:	2108      	movs	r1, #8
   1993e:	4802      	ldr	r0, [pc, #8]	; (19948 <bt_conn_lookup_handle+0x10>)
   19940:	f010 fcf5 	bl	2a32e <conn_lookup_handle>
}
   19944:	bd08      	pop	{r3, pc}
   19946:	bf00      	nop
   19948:	200020f8 	.word	0x200020f8

0001994c <bt_conn_set_state>:
{
   1994c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1994e:	b083      	sub	sp, #12
   19950:	af00      	add	r7, sp, #0
   19952:	460d      	mov	r5, r1
	if (conn->state == state) {
   19954:	7a86      	ldrb	r6, [r0, #10]
   19956:	428e      	cmp	r6, r1
   19958:	d014      	beq.n	19984 <bt_conn_set_state+0x38>
   1995a:	4604      	mov	r4, r0
	conn->state = state;
   1995c:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
   1995e:	2e00      	cmp	r6, #0
   19960:	d068      	beq.n	19a34 <bt_conn_set_state+0xe8>
   19962:	2e06      	cmp	r6, #6
   19964:	d06c      	beq.n	19a40 <bt_conn_set_state+0xf4>
	switch (conn->state) {
   19966:	7aa3      	ldrb	r3, [r4, #10]
   19968:	2b08      	cmp	r3, #8
   1996a:	f200 813f 	bhi.w	19bec <bt_conn_set_state+0x2a0>
   1996e:	e8df f013 	tbh	[pc, r3, lsl #1]
   19972:	007d      	.short	0x007d
   19974:	005b0139 	.word	0x005b0139
   19978:	005b005b 	.word	0x005b005b
   1997c:	0112005b 	.word	0x0112005b
   19980:	005b006e 	.word	0x005b006e
		LOG_WRN("no transition %s", state2str(state));
   19984:	4608      	mov	r0, r1
   19986:	f7ff fcbf 	bl	19308 <state2str>
   1998a:	466d      	mov	r5, sp
   1998c:	2300      	movs	r3, #0
   1998e:	713b      	strb	r3, [r7, #4]
   19990:	2302      	movs	r3, #2
   19992:	717b      	strb	r3, [r7, #5]
   19994:	b088      	sub	sp, #32
   19996:	466c      	mov	r4, sp
   19998:	f114 0210 	adds.w	r2, r4, #16
   1999c:	d011      	beq.n	199c2 <bt_conn_set_state+0x76>
   1999e:	260e      	movs	r6, #14
   199a0:	b11a      	cbz	r2, 199aa <bt_conn_set_state+0x5e>
   199a2:	2e04      	cmp	r6, #4
   199a4:	dd01      	ble.n	199aa <bt_conn_set_state+0x5e>
   199a6:	4ba8      	ldr	r3, [pc, #672]	; (19c48 <bt_conn_set_state+0x2fc>)
   199a8:	6163      	str	r3, [r4, #20]
   199aa:	2300      	movs	r3, #0
   199ac:	703b      	strb	r3, [r7, #0]
   199ae:	2302      	movs	r3, #2
   199b0:	707b      	strb	r3, [r7, #1]
   199b2:	b19a      	cbz	r2, 199dc <bt_conn_set_state+0x90>
   199b4:	2e08      	cmp	r6, #8
   199b6:	dd00      	ble.n	199ba <bt_conn_set_state+0x6e>
   199b8:	61a0      	str	r0, [r4, #24]
   199ba:	f104 031c 	add.w	r3, r4, #28
   199be:	2100      	movs	r1, #0
   199c0:	e00a      	b.n	199d8 <bt_conn_set_state+0x8c>
   199c2:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   199c6:	e7eb      	b.n	199a0 <bt_conn_set_state+0x54>
   199c8:	f101 0008 	add.w	r0, r1, #8
   199cc:	4438      	add	r0, r7
   199ce:	f810 0c08 	ldrb.w	r0, [r0, #-8]
   199d2:	f803 0b01 	strb.w	r0, [r3], #1
   199d6:	3101      	adds	r1, #1
   199d8:	2901      	cmp	r1, #1
   199da:	d9f5      	bls.n	199c8 <bt_conn_set_state+0x7c>
   199dc:	2e0d      	cmp	r6, #13
   199de:	dd26      	ble.n	19a2e <bt_conn_set_state+0xe2>
   199e0:	230e      	movs	r3, #14
   199e2:	b142      	cbz	r2, 199f6 <bt_conn_set_state+0xaa>
   199e4:	2103      	movs	r1, #3
   199e6:	7139      	strb	r1, [r7, #4]
   199e8:	2100      	movs	r1, #0
   199ea:	7179      	strb	r1, [r7, #5]
   199ec:	71b9      	strb	r1, [r7, #6]
   199ee:	2101      	movs	r1, #1
   199f0:	71f9      	strb	r1, [r7, #7]
   199f2:	6878      	ldr	r0, [r7, #4]
   199f4:	6120      	str	r0, [r4, #16]
   199f6:	2100      	movs	r1, #0
   199f8:	f36f 0100 	bfc	r1, #0, #1
   199fc:	f36f 0141 	bfc	r1, #1, #1
   19a00:	f36f 0182 	bfc	r1, #2, #1
   19a04:	f36f 01c5 	bfc	r1, #3, #3
   19a08:	2002      	movs	r0, #2
   19a0a:	f360 1188 	bfi	r1, r0, #6, #3
   19a0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
   19a12:	f363 2152 	bfi	r1, r3, #9, #10
   19a16:	f36f 41de 	bfc	r1, #19, #12
   19a1a:	f36f 71df 	bfc	r1, #31, #1
   19a1e:	2300      	movs	r3, #0
   19a20:	488a      	ldr	r0, [pc, #552]	; (19c4c <bt_conn_set_state+0x300>)
   19a22:	f00f fbf2 	bl	2920a <z_impl_z_log_msg_static_create>
   19a26:	46ad      	mov	sp, r5
}
   19a28:	370c      	adds	r7, #12
   19a2a:	46bd      	mov	sp, r7
   19a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_WRN("no transition %s", state2str(state));
   19a2e:	f06f 031b 	mvn.w	r3, #27
   19a32:	e7d6      	b.n	199e2 <bt_conn_set_state+0x96>
		if (conn->type != BT_CONN_TYPE_ISO) {
   19a34:	7883      	ldrb	r3, [r0, #2]
   19a36:	2b08      	cmp	r3, #8
   19a38:	d095      	beq.n	19966 <bt_conn_set_state+0x1a>
			bt_conn_ref(conn);
   19a3a:	f010 fc44 	bl	2a2c6 <bt_conn_ref>
   19a3e:	e792      	b.n	19966 <bt_conn_set_state+0x1a>
		    conn->type == BT_CONN_TYPE_LE) {
   19a40:	7883      	ldrb	r3, [r0, #2]
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   19a42:	2b01      	cmp	r3, #1
   19a44:	d18f      	bne.n	19966 <bt_conn_set_state+0x1a>
			k_work_cancel_delayable(&conn->deferred_work);
   19a46:	3058      	adds	r0, #88	; 0x58
   19a48:	f016 fe91 	bl	3076e <k_work_cancel_delayable>
   19a4c:	e78b      	b.n	19966 <bt_conn_set_state+0x1a>
		if (conn->type == BT_CONN_TYPE_SCO) {
   19a4e:	78a3      	ldrb	r3, [r4, #2]
   19a50:	2b04      	cmp	r3, #4
   19a52:	d0e9      	beq.n	19a28 <bt_conn_set_state+0xdc>
		k_fifo_init(&conn->tx_queue);
   19a54:	f104 0038 	add.w	r0, r4, #56	; 0x38
	z_impl_k_queue_init(queue);
   19a58:	f016 fd00 	bl	3045c <z_impl_k_queue_init>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   19a5c:	2100      	movs	r1, #0
   19a5e:	487c      	ldr	r0, [pc, #496]	; (19c50 <bt_conn_set_state+0x304>)
   19a60:	f00d fe48 	bl	276f4 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   19a64:	2300      	movs	r3, #0
   19a66:	6523      	str	r3, [r4, #80]	; 0x50
	list->tail = NULL;
   19a68:	6563      	str	r3, [r4, #84]	; 0x54
}
   19a6a:	e7dd      	b.n	19a28 <bt_conn_set_state+0xdc>
		if (conn->type == BT_CONN_TYPE_SCO) {
   19a6c:	78a3      	ldrb	r3, [r4, #2]
   19a6e:	2b04      	cmp	r3, #4
   19a70:	d016      	beq.n	19aa0 <bt_conn_set_state+0x154>
		switch (old_state) {
   19a72:	2e08      	cmp	r6, #8
   19a74:	d8d8      	bhi.n	19a28 <bt_conn_set_state+0xdc>
   19a76:	a301      	add	r3, pc, #4	; (adr r3, 19a7c <bt_conn_set_state+0x130>)
   19a78:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   19a7c:	00019b3d 	.word	0x00019b3d
   19a80:	00019aa9 	.word	0x00019aa9
   19a84:	00019b05 	.word	0x00019b05
   19a88:	00019b2d 	.word	0x00019b2d
   19a8c:	00019b35 	.word	0x00019b35
   19a90:	00019b19 	.word	0x00019b19
   19a94:	00019af1 	.word	0x00019af1
   19a98:	00019a29 	.word	0x00019a29
   19a9c:	00019b3d 	.word	0x00019b3d
			bt_conn_unref(conn);
   19aa0:	4620      	mov	r0, r4
   19aa2:	f010 fc37 	bl	2a314 <bt_conn_unref>
			break;
   19aa6:	e7bf      	b.n	19a28 <bt_conn_set_state+0xdc>
			tx_notify(conn);
   19aa8:	4620      	mov	r0, r4
   19aaa:	f010 fb57 	bl	2a15c <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   19aae:	78a3      	ldrb	r3, [r4, #2]
   19ab0:	2b01      	cmp	r3, #1
   19ab2:	d011      	beq.n	19ad8 <bt_conn_set_state+0x18c>
			atomic_set_bit(conn->flags, BT_CONN_CLEANUP);
   19ab4:	3404      	adds	r4, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   19ab6:	f3bf 8f5b 	dmb	ish
   19aba:	e854 3f00 	ldrex	r3, [r4]
   19abe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   19ac2:	e844 3200 	strex	r2, r3, [r4]
   19ac6:	2a00      	cmp	r2, #0
   19ac8:	d1f7      	bne.n	19aba <bt_conn_set_state+0x16e>
   19aca:	f3bf 8f5b 	dmb	ish
   19ace:	2100      	movs	r1, #0
   19ad0:	485f      	ldr	r0, [pc, #380]	; (19c50 <bt_conn_set_state+0x304>)
   19ad2:	f00d fe0f 	bl	276f4 <z_impl_k_poll_signal_raise>
   19ad6:	e7a7      	b.n	19a28 <bt_conn_set_state+0xdc>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
   19ad8:	f104 0558 	add.w	r5, r4, #88	; 0x58
   19adc:	4628      	mov	r0, r5
   19ade:	f016 fdff 	bl	306e0 <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   19ae2:	f010 0f0c 	tst.w	r0, #12
   19ae6:	d0e5      	beq.n	19ab4 <bt_conn_set_state+0x168>
				k_work_cancel_delayable(&conn->deferred_work);
   19ae8:	4628      	mov	r0, r5
   19aea:	f016 fe40 	bl	3076e <k_work_cancel_delayable>
   19aee:	e7e1      	b.n	19ab4 <bt_conn_set_state+0x168>
			if (conn->err) {
   19af0:	7a63      	ldrb	r3, [r4, #9]
   19af2:	b91b      	cbnz	r3, 19afc <bt_conn_set_state+0x1b0>
			bt_conn_unref(conn);
   19af4:	4620      	mov	r0, r4
   19af6:	f010 fc0d 	bl	2a314 <bt_conn_unref>
			break;
   19afa:	e795      	b.n	19a28 <bt_conn_set_state+0xdc>
				notify_connected(conn);
   19afc:	4620      	mov	r0, r4
   19afe:	f7ff fc35 	bl	1936c <notify_connected>
   19b02:	e7f7      	b.n	19af4 <bt_conn_set_state+0x1a8>
			if (conn->err) {
   19b04:	7a63      	ldrb	r3, [r4, #9]
   19b06:	b91b      	cbnz	r3, 19b10 <bt_conn_set_state+0x1c4>
			bt_conn_unref(conn);
   19b08:	4620      	mov	r0, r4
   19b0a:	f010 fc03 	bl	2a314 <bt_conn_unref>
			break;
   19b0e:	e78b      	b.n	19a28 <bt_conn_set_state+0xdc>
				notify_connected(conn);
   19b10:	4620      	mov	r0, r4
   19b12:	f7ff fc2b 	bl	1936c <notify_connected>
   19b16:	e7f7      	b.n	19b08 <bt_conn_set_state+0x1bc>
			if (conn->err) {
   19b18:	7a63      	ldrb	r3, [r4, #9]
   19b1a:	b91b      	cbnz	r3, 19b24 <bt_conn_set_state+0x1d8>
			bt_conn_unref(conn);
   19b1c:	4620      	mov	r0, r4
   19b1e:	f010 fbf9 	bl	2a314 <bt_conn_unref>
			break;
   19b22:	e781      	b.n	19a28 <bt_conn_set_state+0xdc>
				notify_connected(conn);
   19b24:	4620      	mov	r0, r4
   19b26:	f7ff fc21 	bl	1936c <notify_connected>
   19b2a:	e7f7      	b.n	19b1c <bt_conn_set_state+0x1d0>
			bt_conn_unref(conn);
   19b2c:	4620      	mov	r0, r4
   19b2e:	f010 fbf1 	bl	2a314 <bt_conn_unref>
			break;
   19b32:	e779      	b.n	19a28 <bt_conn_set_state+0xdc>
			bt_conn_unref(conn);
   19b34:	4620      	mov	r0, r4
   19b36:	f010 fbed 	bl	2a314 <bt_conn_unref>
			break;
   19b3a:	e775      	b.n	19a28 <bt_conn_set_state+0xdc>
			LOG_WRN("Invalid (%u) old state", state);
   19b3c:	2008      	movs	r0, #8
   19b3e:	f7fa f8e3 	bl	13d08 <z_log_msg_alloc>
   19b42:	2200      	movs	r2, #0
   19b44:	f36f 0200 	bfc	r2, #0, #1
   19b48:	f36f 0241 	bfc	r2, #1, #1
   19b4c:	f36f 0282 	bfc	r2, #2, #1
   19b50:	f36f 02c5 	bfc	r2, #3, #3
   19b54:	2302      	movs	r3, #2
   19b56:	f363 1288 	bfi	r2, r3, #6, #3
   19b5a:	230c      	movs	r3, #12
   19b5c:	f363 2252 	bfi	r2, r3, #9, #10
   19b60:	f36f 42de 	bfc	r2, #19, #12
   19b64:	f36f 72df 	bfc	r2, #31, #1
   19b68:	4604      	mov	r4, r0
   19b6a:	b170      	cbz	r0, 19b8a <bt_conn_set_state+0x23e>
   19b6c:	f110 0310 	adds.w	r3, r0, #16
   19b70:	d002      	beq.n	19b78 <bt_conn_set_state+0x22c>
   19b72:	4938      	ldr	r1, [pc, #224]	; (19c54 <bt_conn_set_state+0x308>)
   19b74:	6141      	str	r1, [r0, #20]
   19b76:	6185      	str	r5, [r0, #24]
   19b78:	b13b      	cbz	r3, 19b8a <bt_conn_set_state+0x23e>
   19b7a:	2303      	movs	r3, #3
   19b7c:	713b      	strb	r3, [r7, #4]
   19b7e:	2300      	movs	r3, #0
   19b80:	717b      	strb	r3, [r7, #5]
   19b82:	71bb      	strb	r3, [r7, #6]
   19b84:	71fb      	strb	r3, [r7, #7]
   19b86:	6878      	ldr	r0, [r7, #4]
   19b88:	6120      	str	r0, [r4, #16]
   19b8a:	2300      	movs	r3, #0
   19b8c:	492f      	ldr	r1, [pc, #188]	; (19c4c <bt_conn_set_state+0x300>)
   19b8e:	4620      	mov	r0, r4
   19b90:	f00f fb23 	bl	291da <z_log_msg_finalize>
			break;
   19b94:	e748      	b.n	19a28 <bt_conn_set_state+0xdc>
		if (conn->type == BT_CONN_TYPE_SCO) {
   19b96:	78a3      	ldrb	r3, [r4, #2]
   19b98:	2b04      	cmp	r3, #4
   19b9a:	f43f af45 	beq.w	19a28 <bt_conn_set_state+0xdc>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   19b9e:	2b01      	cmp	r3, #1
   19ba0:	f47f af42 	bne.w	19a28 <bt_conn_set_state+0xdc>
			k_work_schedule(&conn->deferred_work,
   19ba4:	3458      	adds	r4, #88	; 0x58
					K_MSEC(10 * bt_dev.create_param.timeout));
   19ba6:	4b2c      	ldr	r3, [pc, #176]	; (19c58 <bt_conn_set_state+0x30c>)
   19ba8:	8a98      	ldrh	r0, [r3, #20]
   19baa:	b1c0      	cbz	r0, 19bde <bt_conn_set_state+0x292>
   19bac:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   19bb0:	0040      	lsls	r0, r0, #1
   19bb2:	2100      	movs	r1, #0
			return ((t * to_hz + off) / from_hz);
   19bb4:	03c9      	lsls	r1, r1, #15
   19bb6:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   19bba:	03c0      	lsls	r0, r0, #15
   19bbc:	f240 33e7 	movw	r3, #999	; 0x3e7
   19bc0:	18c0      	adds	r0, r0, r3
   19bc2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   19bc6:	f04f 0300 	mov.w	r3, #0
   19bca:	f141 0100 	adc.w	r1, r1, #0
   19bce:	f7e6 fa97 	bl	100 <__aeabi_uldivmod>
   19bd2:	4602      	mov	r2, r0
   19bd4:	460b      	mov	r3, r1
			k_work_schedule(&conn->deferred_work,
   19bd6:	4620      	mov	r0, r4
   19bd8:	f00c feb4 	bl	26944 <k_work_schedule>
   19bdc:	e724      	b.n	19a28 <bt_conn_set_state+0xdc>
					K_MSEC(10 * bt_dev.create_param.timeout));
   19bde:	2000      	movs	r0, #0
   19be0:	4601      	mov	r1, r0
   19be2:	e7e7      	b.n	19bb4 <bt_conn_set_state+0x268>
		process_unack_tx(conn);
   19be4:	4620      	mov	r0, r4
   19be6:	f010 fb17 	bl	2a218 <process_unack_tx>
		break;
   19bea:	e71d      	b.n	19a28 <bt_conn_set_state+0xdc>
		LOG_WRN("no valid (%u) state was set", state);
   19bec:	2008      	movs	r0, #8
   19bee:	f7fa f88b 	bl	13d08 <z_log_msg_alloc>
   19bf2:	2200      	movs	r2, #0
   19bf4:	f36f 0200 	bfc	r2, #0, #1
   19bf8:	f36f 0241 	bfc	r2, #1, #1
   19bfc:	f36f 0282 	bfc	r2, #2, #1
   19c00:	f36f 02c5 	bfc	r2, #3, #3
   19c04:	2302      	movs	r3, #2
   19c06:	f363 1288 	bfi	r2, r3, #6, #3
   19c0a:	230c      	movs	r3, #12
   19c0c:	f363 2252 	bfi	r2, r3, #9, #10
   19c10:	f36f 42de 	bfc	r2, #19, #12
   19c14:	f36f 72df 	bfc	r2, #31, #1
   19c18:	4604      	mov	r4, r0
   19c1a:	b170      	cbz	r0, 19c3a <bt_conn_set_state+0x2ee>
   19c1c:	f110 0310 	adds.w	r3, r0, #16
   19c20:	d002      	beq.n	19c28 <bt_conn_set_state+0x2dc>
   19c22:	490e      	ldr	r1, [pc, #56]	; (19c5c <bt_conn_set_state+0x310>)
   19c24:	6141      	str	r1, [r0, #20]
   19c26:	6185      	str	r5, [r0, #24]
   19c28:	b13b      	cbz	r3, 19c3a <bt_conn_set_state+0x2ee>
   19c2a:	2303      	movs	r3, #3
   19c2c:	713b      	strb	r3, [r7, #4]
   19c2e:	2300      	movs	r3, #0
   19c30:	717b      	strb	r3, [r7, #5]
   19c32:	71bb      	strb	r3, [r7, #6]
   19c34:	71fb      	strb	r3, [r7, #7]
   19c36:	6878      	ldr	r0, [r7, #4]
   19c38:	6120      	str	r0, [r4, #16]
   19c3a:	2300      	movs	r3, #0
   19c3c:	4903      	ldr	r1, [pc, #12]	; (19c4c <bt_conn_set_state+0x300>)
   19c3e:	4620      	mov	r0, r4
   19c40:	f00f facb 	bl	291da <z_log_msg_finalize>
		break;
   19c44:	e6f0      	b.n	19a28 <bt_conn_set_state+0xdc>
   19c46:	bf00      	nop
   19c48:	00032c60 	.word	0x00032c60
   19c4c:	00031418 	.word	0x00031418
   19c50:	20000694 	.word	0x20000694
   19c54:	00032c74 	.word	0x00032c74
   19c58:	20000370 	.word	0x20000370
   19c5c:	00032c8c 	.word	0x00032c8c

00019c60 <bt_conn_index>:
		index = conn - acl_conns;
   19c60:	4b03      	ldr	r3, [pc, #12]	; (19c70 <bt_conn_index+0x10>)
   19c62:	1ac0      	subs	r0, r0, r3
   19c64:	1180      	asrs	r0, r0, #6
   19c66:	4b03      	ldr	r3, [pc, #12]	; (19c74 <bt_conn_index+0x14>)
   19c68:	fb03 f000 	mul.w	r0, r3, r0
}
   19c6c:	b2c0      	uxtb	r0, r0
   19c6e:	4770      	bx	lr
   19c70:	200020f8 	.word	0x200020f8
   19c74:	aaaaaaab 	.word	0xaaaaaaab

00019c78 <bt_conn_create_pdu_timeout>:
{
   19c78:	b530      	push	{r4, r5, lr}
   19c7a:	b083      	sub	sp, #12
   19c7c:	460c      	mov	r4, r1
	if (!pool) {
   19c7e:	4601      	mov	r1, r0
   19c80:	b158      	cbz	r0, 19c9a <bt_conn_create_pdu_timeout+0x22>
	return net_buf_alloc_fixed(pool, timeout);
   19c82:	4608      	mov	r0, r1
   19c84:	f012 fc6e 	bl	2c564 <net_buf_alloc_fixed>
	if (!buf) {
   19c88:	4605      	mov	r5, r0
   19c8a:	b140      	cbz	r0, 19c9e <bt_conn_create_pdu_timeout+0x26>
	net_buf_simple_reserve(&buf->b, reserve);
   19c8c:	1d21      	adds	r1, r4, #4
   19c8e:	300c      	adds	r0, #12
   19c90:	f012 fc79 	bl	2c586 <net_buf_simple_reserve>
}
   19c94:	4628      	mov	r0, r5
   19c96:	b003      	add	sp, #12
   19c98:	bd30      	pop	{r4, r5, pc}
		pool = &acl_tx_pool;
   19c9a:	4919      	ldr	r1, [pc, #100]	; (19d00 <bt_conn_create_pdu_timeout+0x88>)
   19c9c:	e7f1      	b.n	19c82 <bt_conn_create_pdu_timeout+0xa>
		LOG_WRN("Unable to allocate buffer within timeout");
   19c9e:	2006      	movs	r0, #6
   19ca0:	f7fa f832 	bl	13d08 <z_log_msg_alloc>
   19ca4:	2200      	movs	r2, #0
   19ca6:	f36f 0200 	bfc	r2, #0, #1
   19caa:	f36f 0241 	bfc	r2, #1, #1
   19cae:	f36f 0282 	bfc	r2, #2, #1
   19cb2:	f36f 02c5 	bfc	r2, #3, #3
   19cb6:	2302      	movs	r3, #2
   19cb8:	f363 1288 	bfi	r2, r3, #6, #3
   19cbc:	2308      	movs	r3, #8
   19cbe:	f363 2252 	bfi	r2, r3, #9, #10
   19cc2:	f36f 42de 	bfc	r2, #19, #12
   19cc6:	f36f 72df 	bfc	r2, #31, #1
   19cca:	4604      	mov	r4, r0
   19ccc:	b188      	cbz	r0, 19cf2 <bt_conn_create_pdu_timeout+0x7a>
   19cce:	f110 0310 	adds.w	r3, r0, #16
   19cd2:	d001      	beq.n	19cd8 <bt_conn_create_pdu_timeout+0x60>
   19cd4:	490b      	ldr	r1, [pc, #44]	; (19d04 <bt_conn_create_pdu_timeout+0x8c>)
   19cd6:	6141      	str	r1, [r0, #20]
   19cd8:	b15b      	cbz	r3, 19cf2 <bt_conn_create_pdu_timeout+0x7a>
   19cda:	2302      	movs	r3, #2
   19cdc:	f88d 3004 	strb.w	r3, [sp, #4]
   19ce0:	2300      	movs	r3, #0
   19ce2:	f88d 3005 	strb.w	r3, [sp, #5]
   19ce6:	f88d 3006 	strb.w	r3, [sp, #6]
   19cea:	f88d 3007 	strb.w	r3, [sp, #7]
   19cee:	9801      	ldr	r0, [sp, #4]
   19cf0:	6120      	str	r0, [r4, #16]
   19cf2:	2300      	movs	r3, #0
   19cf4:	4904      	ldr	r1, [pc, #16]	; (19d08 <bt_conn_create_pdu_timeout+0x90>)
   19cf6:	4620      	mov	r0, r4
   19cf8:	f00f fa6f 	bl	291da <z_log_msg_finalize>
		return NULL;
   19cfc:	e7ca      	b.n	19c94 <bt_conn_create_pdu_timeout+0x1c>
   19cfe:	bf00      	nop
   19d00:	20000b30 	.word	0x20000b30
   19d04:	00032ca8 	.word	0x00032ca8
   19d08:	00031418 	.word	0x00031418

00019d0c <notify_le_param_updated>:
{
   19d0c:	b570      	push	{r4, r5, r6, lr}
   19d0e:	4604      	mov	r4, r0
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   19d10:	1d05      	adds	r5, r0, #4
   19d12:	2109      	movs	r1, #9
   19d14:	4628      	mov	r0, r5
   19d16:	f010 fa72 	bl	2a1fe <atomic_test_bit>
   19d1a:	b178      	cbz	r0, 19d3c <notify_le_param_updated+0x30>
	    conn->le.interval >= conn->le.interval_min &&
   19d1c:	f8b4 309e 	ldrh.w	r3, [r4, #158]	; 0x9e
   19d20:	f8b4 20a0 	ldrh.w	r2, [r4, #160]	; 0xa0
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   19d24:	4293      	cmp	r3, r2
   19d26:	d309      	bcc.n	19d3c <notify_le_param_updated+0x30>
	    conn->le.interval <= conn->le.interval_max &&
   19d28:	f8b4 20a2 	ldrh.w	r2, [r4, #162]	; 0xa2
	    conn->le.interval >= conn->le.interval_min &&
   19d2c:	4293      	cmp	r3, r2
   19d2e:	d805      	bhi.n	19d3c <notify_le_param_updated+0x30>
	    conn->le.latency == conn->le.pending_latency &&
   19d30:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
   19d34:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   19d38:	429a      	cmp	r2, r3
   19d3a:	d002      	beq.n	19d42 <notify_le_param_updated+0x36>
	for (cb = callback_list; cb; cb = cb->_next) {
   19d3c:	4b18      	ldr	r3, [pc, #96]	; (19da0 <notify_le_param_updated+0x94>)
   19d3e:	681d      	ldr	r5, [r3, #0]
   19d40:	e015      	b.n	19d6e <notify_le_param_updated+0x62>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   19d42:	f3bf 8f5b 	dmb	ish
   19d46:	e855 3f00 	ldrex	r3, [r5]
   19d4a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
   19d4e:	e845 3200 	strex	r2, r3, [r5]
   19d52:	2a00      	cmp	r2, #0
   19d54:	d1f7      	bne.n	19d46 <notify_le_param_updated+0x3a>
   19d56:	f3bf 8f5b 	dmb	ish
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
}
   19d5a:	e7ef      	b.n	19d3c <notify_le_param_updated+0x30>
			cb->le_param_updated(conn, conn->le.interval,
   19d5c:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   19d60:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   19d64:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   19d68:	4620      	mov	r0, r4
   19d6a:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   19d6c:	692d      	ldr	r5, [r5, #16]
   19d6e:	b11d      	cbz	r5, 19d78 <notify_le_param_updated+0x6c>
		if (cb->le_param_updated) {
   19d70:	68ee      	ldr	r6, [r5, #12]
   19d72:	2e00      	cmp	r6, #0
   19d74:	d1f2      	bne.n	19d5c <notify_le_param_updated+0x50>
   19d76:	e7f9      	b.n	19d6c <notify_le_param_updated+0x60>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   19d78:	4d0a      	ldr	r5, [pc, #40]	; (19da4 <notify_le_param_updated+0x98>)
   19d7a:	e000      	b.n	19d7e <notify_le_param_updated+0x72>
   19d7c:	3514      	adds	r5, #20
   19d7e:	4b0a      	ldr	r3, [pc, #40]	; (19da8 <notify_le_param_updated+0x9c>)
   19d80:	429d      	cmp	r5, r3
   19d82:	d20b      	bcs.n	19d9c <notify_le_param_updated+0x90>
		if (cb->le_param_updated) {
   19d84:	68ee      	ldr	r6, [r5, #12]
   19d86:	2e00      	cmp	r6, #0
   19d88:	d0f8      	beq.n	19d7c <notify_le_param_updated+0x70>
			cb->le_param_updated(conn, conn->le.interval,
   19d8a:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   19d8e:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   19d92:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   19d96:	4620      	mov	r0, r4
   19d98:	47b0      	blx	r6
   19d9a:	e7ef      	b.n	19d7c <notify_le_param_updated+0x70>
}
   19d9c:	bd70      	pop	{r4, r5, r6, pc}
   19d9e:	bf00      	nop
   19da0:	20007d3c 	.word	0x20007d3c
   19da4:	000313dc 	.word	0x000313dc
   19da8:	000313f0 	.word	0x000313f0

00019dac <le_param_req>:
{
   19dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19dae:	4606      	mov	r6, r0
   19db0:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   19db2:	4608      	mov	r0, r1
   19db4:	f010 f8fb 	bl	29fae <bt_le_conn_params_valid>
   19db8:	4607      	mov	r7, r0
   19dba:	b338      	cbz	r0, 19e0c <le_param_req+0x60>
	for (cb = callback_list; cb; cb = cb->_next) {
   19dbc:	4b15      	ldr	r3, [pc, #84]	; (19e14 <le_param_req+0x68>)
   19dbe:	681c      	ldr	r4, [r3, #0]
   19dc0:	e000      	b.n	19dc4 <le_param_req+0x18>
   19dc2:	6924      	ldr	r4, [r4, #16]
   19dc4:	b16c      	cbz	r4, 19de2 <le_param_req+0x36>
		if (!cb->le_param_req) {
   19dc6:	68a3      	ldr	r3, [r4, #8]
   19dc8:	2b00      	cmp	r3, #0
   19dca:	d0fa      	beq.n	19dc2 <le_param_req+0x16>
		if (!cb->le_param_req(conn, param)) {
   19dcc:	4629      	mov	r1, r5
   19dce:	4630      	mov	r0, r6
   19dd0:	4798      	blx	r3
   19dd2:	b1d0      	cbz	r0, 19e0a <le_param_req+0x5e>
		if (!bt_le_conn_params_valid(param)) {
   19dd4:	4628      	mov	r0, r5
   19dd6:	f010 f8ea 	bl	29fae <bt_le_conn_params_valid>
   19dda:	2800      	cmp	r0, #0
   19ddc:	d1f1      	bne.n	19dc2 <le_param_req+0x16>
			return false;
   19dde:	4607      	mov	r7, r0
   19de0:	e014      	b.n	19e0c <le_param_req+0x60>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   19de2:	4c0d      	ldr	r4, [pc, #52]	; (19e18 <le_param_req+0x6c>)
   19de4:	e000      	b.n	19de8 <le_param_req+0x3c>
   19de6:	3414      	adds	r4, #20
   19de8:	4b0c      	ldr	r3, [pc, #48]	; (19e1c <le_param_req+0x70>)
   19dea:	429c      	cmp	r4, r3
   19dec:	d20e      	bcs.n	19e0c <le_param_req+0x60>
		if (!cb->le_param_req) {
   19dee:	68a3      	ldr	r3, [r4, #8]
   19df0:	2b00      	cmp	r3, #0
   19df2:	d0f8      	beq.n	19de6 <le_param_req+0x3a>
		if (!cb->le_param_req(conn, param)) {
   19df4:	4629      	mov	r1, r5
   19df6:	4630      	mov	r0, r6
   19df8:	4798      	blx	r3
   19dfa:	b148      	cbz	r0, 19e10 <le_param_req+0x64>
		if (!bt_le_conn_params_valid(param)) {
   19dfc:	4628      	mov	r0, r5
   19dfe:	f010 f8d6 	bl	29fae <bt_le_conn_params_valid>
   19e02:	2800      	cmp	r0, #0
   19e04:	d1ef      	bne.n	19de6 <le_param_req+0x3a>
			return false;
   19e06:	4607      	mov	r7, r0
   19e08:	e000      	b.n	19e0c <le_param_req+0x60>
			return false;
   19e0a:	4607      	mov	r7, r0
}
   19e0c:	4638      	mov	r0, r7
   19e0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return false;
   19e10:	4607      	mov	r7, r0
   19e12:	e7fb      	b.n	19e0c <le_param_req+0x60>
   19e14:	20007d3c 	.word	0x20007d3c
   19e18:	000313dc 	.word	0x000313dc
   19e1c:	000313f0 	.word	0x000313f0

00019e20 <bt_conn_lookup_addr_le>:
{
   19e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19e22:	4607      	mov	r7, r0
   19e24:	460e      	mov	r6, r1
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   19e26:	2400      	movs	r4, #0
   19e28:	e002      	b.n	19e30 <bt_conn_lookup_addr_le+0x10>
			bt_conn_unref(conn);
   19e2a:	f010 fa73 	bl	2a314 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   19e2e:	3401      	adds	r4, #1
   19e30:	2c07      	cmp	r4, #7
   19e32:	d817      	bhi.n	19e64 <bt_conn_lookup_addr_le+0x44>
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   19e34:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   19e38:	480b      	ldr	r0, [pc, #44]	; (19e68 <bt_conn_lookup_addr_le+0x48>)
   19e3a:	eb00 1083 	add.w	r0, r0, r3, lsl #6
   19e3e:	f010 fa42 	bl	2a2c6 <bt_conn_ref>
		if (!conn) {
   19e42:	4605      	mov	r5, r0
   19e44:	2800      	cmp	r0, #0
   19e46:	d0f2      	beq.n	19e2e <bt_conn_lookup_addr_le+0xe>
		if (conn->type != BT_CONN_TYPE_LE) {
   19e48:	7883      	ldrb	r3, [r0, #2]
   19e4a:	2b01      	cmp	r3, #1
   19e4c:	d1ed      	bne.n	19e2a <bt_conn_lookup_addr_le+0xa>
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   19e4e:	4632      	mov	r2, r6
   19e50:	4639      	mov	r1, r7
   19e52:	f010 fab9 	bl	2a3c8 <bt_conn_is_peer_addr_le>
   19e56:	b108      	cbz	r0, 19e5c <bt_conn_lookup_addr_le+0x3c>
}
   19e58:	4628      	mov	r0, r5
   19e5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			bt_conn_unref(conn);
   19e5c:	4628      	mov	r0, r5
   19e5e:	f010 fa59 	bl	2a314 <bt_conn_unref>
			continue;
   19e62:	e7e4      	b.n	19e2e <bt_conn_lookup_addr_le+0xe>
	return NULL;
   19e64:	2500      	movs	r5, #0
   19e66:	e7f7      	b.n	19e58 <bt_conn_lookup_addr_le+0x38>
   19e68:	200020f8 	.word	0x200020f8

00019e6c <bt_conn_lookup_state_le>:
{
   19e6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19e70:	4607      	mov	r7, r0
   19e72:	460e      	mov	r6, r1
   19e74:	4690      	mov	r8, r2
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   19e76:	2400      	movs	r4, #0
   19e78:	e00a      	b.n	19e90 <bt_conn_lookup_state_le+0x24>
			bt_conn_unref(conn);
   19e7a:	f010 fa4b 	bl	2a314 <bt_conn_unref>
			continue;
   19e7e:	e006      	b.n	19e8e <bt_conn_lookup_state_le+0x22>
			bt_conn_unref(conn);
   19e80:	4628      	mov	r0, r5
   19e82:	f010 fa47 	bl	2a314 <bt_conn_unref>
			continue;
   19e86:	e002      	b.n	19e8e <bt_conn_lookup_state_le+0x22>
			bt_conn_unref(conn);
   19e88:	4628      	mov	r0, r5
   19e8a:	f010 fa43 	bl	2a314 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   19e8e:	3401      	adds	r4, #1
   19e90:	2c07      	cmp	r4, #7
   19e92:	d81c      	bhi.n	19ece <bt_conn_lookup_state_le+0x62>
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   19e94:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   19e98:	480e      	ldr	r0, [pc, #56]	; (19ed4 <bt_conn_lookup_state_le+0x68>)
   19e9a:	eb00 1083 	add.w	r0, r0, r3, lsl #6
   19e9e:	f010 fa12 	bl	2a2c6 <bt_conn_ref>
		if (!conn) {
   19ea2:	4605      	mov	r5, r0
   19ea4:	2800      	cmp	r0, #0
   19ea6:	d0f2      	beq.n	19e8e <bt_conn_lookup_state_le+0x22>
		if (conn->type != BT_CONN_TYPE_LE) {
   19ea8:	7883      	ldrb	r3, [r0, #2]
   19eaa:	2b01      	cmp	r3, #1
   19eac:	d1e5      	bne.n	19e7a <bt_conn_lookup_state_le+0xe>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   19eae:	b12e      	cbz	r6, 19ebc <bt_conn_lookup_state_le+0x50>
   19eb0:	4632      	mov	r2, r6
   19eb2:	4639      	mov	r1, r7
   19eb4:	f010 fa88 	bl	2a3c8 <bt_conn_is_peer_addr_le>
   19eb8:	2800      	cmp	r0, #0
   19eba:	d0e1      	beq.n	19e80 <bt_conn_lookup_state_le+0x14>
		if (!(conn->state == state && conn->id == id)) {
   19ebc:	7aab      	ldrb	r3, [r5, #10]
   19ebe:	4543      	cmp	r3, r8
   19ec0:	d1e2      	bne.n	19e88 <bt_conn_lookup_state_le+0x1c>
   19ec2:	7a2b      	ldrb	r3, [r5, #8]
   19ec4:	42bb      	cmp	r3, r7
   19ec6:	d1df      	bne.n	19e88 <bt_conn_lookup_state_le+0x1c>
}
   19ec8:	4628      	mov	r0, r5
   19eca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return NULL;
   19ece:	2500      	movs	r5, #0
   19ed0:	e7fa      	b.n	19ec8 <bt_conn_lookup_state_le+0x5c>
   19ed2:	bf00      	nop
   19ed4:	200020f8 	.word	0x200020f8

00019ed8 <bt_conn_le_create_auto>:

#if defined(CONFIG_BT_FILTER_ACCEPT_LIST)
int bt_conn_le_create_auto(const struct bt_conn_le_create_param *create_param,
			   const struct bt_le_conn_param *param)
{
   19ed8:	b570      	push	{r4, r5, r6, lr}
   19eda:	b082      	sub	sp, #8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19edc:	f3bf 8f5b 	dmb	ish
   19ee0:	4b52      	ldr	r3, [pc, #328]	; (1a02c <bt_conn_le_create_auto+0x154>)
   19ee2:	681b      	ldr	r3, [r3, #0]
   19ee4:	f3bf 8f5b 	dmb	ish
	struct bt_conn *conn;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   19ee8:	f013 0f04 	tst.w	r3, #4
   19eec:	f000 808b 	beq.w	1a006 <bt_conn_le_create_auto+0x12e>
   19ef0:	4606      	mov	r6, r0
   19ef2:	460d      	mov	r5, r1
		return -EAGAIN;
	}

	if (!bt_le_conn_params_valid(param)) {
   19ef4:	4608      	mov	r0, r1
   19ef6:	f010 f85a 	bl	29fae <bt_le_conn_params_valid>
   19efa:	2800      	cmp	r0, #0
   19efc:	f000 8086 	beq.w	1a00c <bt_conn_le_create_auto+0x134>
		return -EINVAL;
	}

	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, BT_ADDR_LE_NONE,
   19f00:	2203      	movs	r2, #3
   19f02:	494b      	ldr	r1, [pc, #300]	; (1a030 <bt_conn_le_create_auto+0x158>)
   19f04:	2000      	movs	r0, #0
   19f06:	f7ff ffb1 	bl	19e6c <bt_conn_lookup_state_le>
				       BT_CONN_CONNECTING_AUTO);
	if (conn) {
   19f0a:	2800      	cmp	r0, #0
   19f0c:	d13e      	bne.n	19f8c <bt_conn_le_create_auto+0xb4>
   19f0e:	f3bf 8f5b 	dmb	ish
   19f12:	4b46      	ldr	r3, [pc, #280]	; (1a02c <bt_conn_le_create_auto+0x154>)
   19f14:	681b      	ldr	r3, [r3, #0]
   19f16:	f3bf 8f5b 	dmb	ish
	}

	/* Scanning either to connect or explicit scan, either case scanner was
	 * started by application and should not be stopped.
	 */
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   19f1a:	f013 0f40 	tst.w	r3, #64	; 0x40
   19f1e:	d178      	bne.n	1a012 <bt_conn_le_create_auto+0x13a>
   19f20:	f3bf 8f5b 	dmb	ish
   19f24:	4b41      	ldr	r3, [pc, #260]	; (1a02c <bt_conn_le_create_auto+0x154>)
   19f26:	681b      	ldr	r3, [r3, #0]
   19f28:	f3bf 8f5b 	dmb	ish
		return -EINVAL;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING)) {
   19f2c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   19f30:	d172      	bne.n	1a018 <bt_conn_le_create_auto+0x140>
		return -EINVAL;
	}

	if (!bt_id_scan_random_addr_check()) {
   19f32:	f010 f8be 	bl	2a0b2 <bt_id_scan_random_addr_check>
   19f36:	2800      	cmp	r0, #0
   19f38:	d071      	beq.n	1a01e <bt_conn_le_create_auto+0x146>
		return -EINVAL;
	}

	conn = bt_conn_add_le(BT_ID_DEFAULT, BT_ADDR_LE_NONE);
   19f3a:	493d      	ldr	r1, [pc, #244]	; (1a030 <bt_conn_le_create_auto+0x158>)
   19f3c:	2000      	movs	r0, #0
   19f3e:	f010 fa2c 	bl	2a39a <bt_conn_add_le>
	if (!conn) {
   19f42:	4604      	mov	r4, r0
   19f44:	2800      	cmp	r0, #0
   19f46:	d06d      	beq.n	1a024 <bt_conn_le_create_auto+0x14c>
		return -ENOMEM;
	}

	bt_conn_set_param_le(conn, param);
   19f48:	4629      	mov	r1, r5
   19f4a:	f010 f8fa 	bl	2a142 <bt_conn_set_param_le>
	create_param_setup(create_param);
   19f4e:	4630      	mov	r0, r6
   19f50:	f7ff fa50 	bl	193f4 <create_param_setup>

	atomic_set_bit(conn->flags, BT_CONN_AUTO_CONNECT);
   19f54:	1d23      	adds	r3, r4, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   19f56:	f3bf 8f5b 	dmb	ish
   19f5a:	e853 1f00 	ldrex	r1, [r3]
   19f5e:	f041 0101 	orr.w	r1, r1, #1
   19f62:	e843 1200 	strex	r2, r1, [r3]
   19f66:	2a00      	cmp	r2, #0
   19f68:	d1f7      	bne.n	19f5a <bt_conn_le_create_auto+0x82>
   19f6a:	f3bf 8f5b 	dmb	ish
	bt_conn_set_state(conn, BT_CONN_CONNECTING_AUTO);
   19f6e:	2103      	movs	r1, #3
   19f70:	4620      	mov	r0, r4
   19f72:	f7ff fceb 	bl	1994c <bt_conn_set_state>

	err = bt_le_create_conn(conn);
   19f76:	4620      	mov	r0, r4
   19f78:	f00f ffb0 	bl	29edc <bt_le_create_conn>
	if (err) {
   19f7c:	4605      	mov	r5, r0
   19f7e:	b950      	cbnz	r0, 19f96 <bt_conn_le_create_auto+0xbe>
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
   19f80:	4620      	mov	r0, r4
   19f82:	f010 f9c7 	bl	2a314 <bt_conn_unref>
	return 0;
}
   19f86:	4628      	mov	r0, r5
   19f88:	b002      	add	sp, #8
   19f8a:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_unref(conn);
   19f8c:	f010 f9c2 	bl	2a314 <bt_conn_unref>
		return -EALREADY;
   19f90:	f06f 0577 	mvn.w	r5, #119	; 0x77
   19f94:	e7f7      	b.n	19f86 <bt_conn_le_create_auto+0xae>
		LOG_ERR("Failed to start filtered scan");
   19f96:	2006      	movs	r0, #6
   19f98:	f7f9 feb6 	bl	13d08 <z_log_msg_alloc>
   19f9c:	2200      	movs	r2, #0
   19f9e:	f36f 0200 	bfc	r2, #0, #1
   19fa2:	f36f 0241 	bfc	r2, #1, #1
   19fa6:	f36f 0282 	bfc	r2, #2, #1
   19faa:	f36f 02c5 	bfc	r2, #3, #3
   19fae:	2301      	movs	r3, #1
   19fb0:	f363 1288 	bfi	r2, r3, #6, #3
   19fb4:	2308      	movs	r3, #8
   19fb6:	f363 2252 	bfi	r2, r3, #9, #10
   19fba:	f36f 42de 	bfc	r2, #19, #12
   19fbe:	f36f 72df 	bfc	r2, #31, #1
   19fc2:	4606      	mov	r6, r0
   19fc4:	b188      	cbz	r0, 19fea <bt_conn_le_create_auto+0x112>
   19fc6:	f110 0310 	adds.w	r3, r0, #16
   19fca:	d001      	beq.n	19fd0 <bt_conn_le_create_auto+0xf8>
   19fcc:	4919      	ldr	r1, [pc, #100]	; (1a034 <bt_conn_le_create_auto+0x15c>)
   19fce:	6141      	str	r1, [r0, #20]
   19fd0:	b15b      	cbz	r3, 19fea <bt_conn_le_create_auto+0x112>
   19fd2:	2302      	movs	r3, #2
   19fd4:	f88d 3004 	strb.w	r3, [sp, #4]
   19fd8:	2300      	movs	r3, #0
   19fda:	f88d 3005 	strb.w	r3, [sp, #5]
   19fde:	f88d 3006 	strb.w	r3, [sp, #6]
   19fe2:	f88d 3007 	strb.w	r3, [sp, #7]
   19fe6:	9801      	ldr	r0, [sp, #4]
   19fe8:	6130      	str	r0, [r6, #16]
   19fea:	2300      	movs	r3, #0
   19fec:	4912      	ldr	r1, [pc, #72]	; (1a038 <bt_conn_le_create_auto+0x160>)
   19fee:	4630      	mov	r0, r6
   19ff0:	f00f f8f3 	bl	291da <z_log_msg_finalize>
		conn->err = 0;
   19ff4:	2100      	movs	r1, #0
   19ff6:	7261      	strb	r1, [r4, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   19ff8:	4620      	mov	r0, r4
   19ffa:	f7ff fca7 	bl	1994c <bt_conn_set_state>
		bt_conn_unref(conn);
   19ffe:	4620      	mov	r0, r4
   1a000:	f010 f988 	bl	2a314 <bt_conn_unref>
		return err;
   1a004:	e7bf      	b.n	19f86 <bt_conn_le_create_auto+0xae>
		return -EAGAIN;
   1a006:	f06f 050a 	mvn.w	r5, #10
   1a00a:	e7bc      	b.n	19f86 <bt_conn_le_create_auto+0xae>
		return -EINVAL;
   1a00c:	f06f 0515 	mvn.w	r5, #21
   1a010:	e7b9      	b.n	19f86 <bt_conn_le_create_auto+0xae>
		return -EINVAL;
   1a012:	f06f 0515 	mvn.w	r5, #21
   1a016:	e7b6      	b.n	19f86 <bt_conn_le_create_auto+0xae>
		return -EINVAL;
   1a018:	f06f 0515 	mvn.w	r5, #21
   1a01c:	e7b3      	b.n	19f86 <bt_conn_le_create_auto+0xae>
		return -EINVAL;
   1a01e:	f06f 0515 	mvn.w	r5, #21
   1a022:	e7b0      	b.n	19f86 <bt_conn_le_create_auto+0xae>
		return -ENOMEM;
   1a024:	f06f 050b 	mvn.w	r5, #11
   1a028:	e7ad      	b.n	19f86 <bt_conn_le_create_auto+0xae>
   1a02a:	bf00      	nop
   1a02c:	2000043c 	.word	0x2000043c
   1a030:	00032364 	.word	0x00032364
   1a034:	00032cd4 	.word	0x00032cd4
   1a038:	00031418 	.word	0x00031418

0001a03c <bt_conn_create_auto_stop>:

int bt_conn_create_auto_stop(void)
{
   1a03c:	b510      	push	{r4, lr}
   1a03e:	b082      	sub	sp, #8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1a040:	f3bf 8f5b 	dmb	ish
   1a044:	4b2f      	ldr	r3, [pc, #188]	; (1a104 <bt_conn_create_auto_stop+0xc8>)
   1a046:	681b      	ldr	r3, [r3, #0]
   1a048:	f3bf 8f5b 	dmb	ish
	struct bt_conn *conn;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1a04c:	f013 0f04 	tst.w	r3, #4
   1a050:	d04e      	beq.n	1a0f0 <bt_conn_create_auto_stop+0xb4>
		return -EINVAL;
	}

	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, BT_ADDR_LE_NONE,
   1a052:	2203      	movs	r2, #3
   1a054:	492c      	ldr	r1, [pc, #176]	; (1a108 <bt_conn_create_auto_stop+0xcc>)
   1a056:	2000      	movs	r0, #0
   1a058:	f7ff ff08 	bl	19e6c <bt_conn_lookup_state_le>
				       BT_CONN_CONNECTING_AUTO);
	if (!conn) {
   1a05c:	4604      	mov	r4, r0
   1a05e:	2800      	cmp	r0, #0
   1a060:	d049      	beq.n	1a0f6 <bt_conn_create_auto_stop+0xba>
   1a062:	f3bf 8f5b 	dmb	ish
   1a066:	4b27      	ldr	r3, [pc, #156]	; (1a104 <bt_conn_create_auto_stop+0xc8>)
   1a068:	681b      	ldr	r3, [r3, #0]
   1a06a:	f3bf 8f5b 	dmb	ish
		return -EINVAL;
	}

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING)) {
   1a06e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   1a072:	d043      	beq.n	1a0fc <bt_conn_create_auto_stop+0xc0>
		return -EINVAL;
	}

	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1a074:	2100      	movs	r1, #0
   1a076:	f7ff fc69 	bl	1994c <bt_conn_set_state>
	bt_conn_unref(conn);
   1a07a:	4620      	mov	r0, r4
   1a07c:	f010 f94a 	bl	2a314 <bt_conn_unref>

	err = bt_le_create_conn_cancel();
   1a080:	f7fd fef0 	bl	17e64 <bt_le_create_conn_cancel>
	if (err) {
   1a084:	4604      	mov	r4, r0
   1a086:	b910      	cbnz	r0, 1a08e <bt_conn_create_auto_stop+0x52>
		LOG_ERR("Failed to stop initiator");
		return err;
	}

	return 0;
}
   1a088:	4620      	mov	r0, r4
   1a08a:	b002      	add	sp, #8
   1a08c:	bd10      	pop	{r4, pc}
		LOG_ERR("Failed to stop initiator");
   1a08e:	2006      	movs	r0, #6
   1a090:	f7f9 fe3a 	bl	13d08 <z_log_msg_alloc>
   1a094:	2200      	movs	r2, #0
   1a096:	f36f 0200 	bfc	r2, #0, #1
   1a09a:	f36f 0241 	bfc	r2, #1, #1
   1a09e:	f36f 0282 	bfc	r2, #2, #1
   1a0a2:	f36f 02c5 	bfc	r2, #3, #3
   1a0a6:	2301      	movs	r3, #1
   1a0a8:	f363 1288 	bfi	r2, r3, #6, #3
   1a0ac:	2308      	movs	r3, #8
   1a0ae:	f363 2252 	bfi	r2, r3, #9, #10
   1a0b2:	f36f 42de 	bfc	r2, #19, #12
   1a0b6:	f36f 72df 	bfc	r2, #31, #1
   1a0ba:	4684      	mov	ip, r0
   1a0bc:	b190      	cbz	r0, 1a0e4 <bt_conn_create_auto_stop+0xa8>
   1a0be:	f110 0310 	adds.w	r3, r0, #16
   1a0c2:	d001      	beq.n	1a0c8 <bt_conn_create_auto_stop+0x8c>
   1a0c4:	4911      	ldr	r1, [pc, #68]	; (1a10c <bt_conn_create_auto_stop+0xd0>)
   1a0c6:	6141      	str	r1, [r0, #20]
   1a0c8:	b163      	cbz	r3, 1a0e4 <bt_conn_create_auto_stop+0xa8>
   1a0ca:	2302      	movs	r3, #2
   1a0cc:	f88d 3004 	strb.w	r3, [sp, #4]
   1a0d0:	2300      	movs	r3, #0
   1a0d2:	f88d 3005 	strb.w	r3, [sp, #5]
   1a0d6:	f88d 3006 	strb.w	r3, [sp, #6]
   1a0da:	f88d 3007 	strb.w	r3, [sp, #7]
   1a0de:	9801      	ldr	r0, [sp, #4]
   1a0e0:	f8cc 0010 	str.w	r0, [ip, #16]
   1a0e4:	2300      	movs	r3, #0
   1a0e6:	490a      	ldr	r1, [pc, #40]	; (1a110 <bt_conn_create_auto_stop+0xd4>)
   1a0e8:	4660      	mov	r0, ip
   1a0ea:	f00f f876 	bl	291da <z_log_msg_finalize>
		return err;
   1a0ee:	e7cb      	b.n	1a088 <bt_conn_create_auto_stop+0x4c>
		return -EINVAL;
   1a0f0:	f06f 0415 	mvn.w	r4, #21
   1a0f4:	e7c8      	b.n	1a088 <bt_conn_create_auto_stop+0x4c>
		return -EINVAL;
   1a0f6:	f06f 0415 	mvn.w	r4, #21
   1a0fa:	e7c5      	b.n	1a088 <bt_conn_create_auto_stop+0x4c>
		return -EINVAL;
   1a0fc:	f06f 0415 	mvn.w	r4, #21
   1a100:	e7c2      	b.n	1a088 <bt_conn_create_auto_stop+0x4c>
   1a102:	bf00      	nop
   1a104:	2000043c 	.word	0x2000043c
   1a108:	00032364 	.word	0x00032364
   1a10c:	00032cf4 	.word	0x00032cf4
   1a110:	00031418 	.word	0x00031418

0001a114 <send_conn_le_param_update>:
{
   1a114:	b538      	push	{r3, r4, r5, lr}
   1a116:	4604      	mov	r4, r0
   1a118:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   1a11a:	4608      	mov	r0, r1
   1a11c:	f00f ff47 	bl	29fae <bt_le_conn_params_valid>
   1a120:	b350      	cbz	r0, 1a178 <send_conn_le_param_update+0x64>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   1a122:	4b17      	ldr	r3, [pc, #92]	; (1a180 <send_conn_le_param_update+0x6c>)
   1a124:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   1a128:	f013 0f02 	tst.w	r3, #2
   1a12c:	d004      	beq.n	1a138 <send_conn_le_param_update+0x24>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   1a12e:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   1a132:	f013 0f02 	tst.w	r3, #2
   1a136:	d113      	bne.n	1a160 <send_conn_le_param_update+0x4c>
	     (conn->role == BT_HCI_ROLE_CENTRAL)) {
   1a138:	78e3      	ldrb	r3, [r4, #3]
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   1a13a:	b9c3      	cbnz	r3, 1a16e <send_conn_le_param_update+0x5a>
		rc = bt_conn_le_conn_update(conn, param);
   1a13c:	4629      	mov	r1, r5
   1a13e:	4620      	mov	r0, r4
   1a140:	f010 f96b 	bl	2a41a <bt_conn_le_conn_update>
		if (rc == 0) {
   1a144:	b9b8      	cbnz	r0, 1a176 <send_conn_le_param_update+0x62>
			conn->le.interval_min = param->interval_min;
   1a146:	882b      	ldrh	r3, [r5, #0]
   1a148:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
			conn->le.interval_max = param->interval_max;
   1a14c:	886b      	ldrh	r3, [r5, #2]
   1a14e:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
			conn->le.pending_latency = param->latency;
   1a152:	88ab      	ldrh	r3, [r5, #4]
   1a154:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   1a158:	88eb      	ldrh	r3, [r5, #6]
   1a15a:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
		return rc;
   1a15e:	e00a      	b.n	1a176 <send_conn_le_param_update+0x62>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   1a160:	210a      	movs	r1, #10
   1a162:	1d20      	adds	r0, r4, #4
   1a164:	f010 f84b 	bl	2a1fe <atomic_test_bit>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   1a168:	2800      	cmp	r0, #0
   1a16a:	d1e5      	bne.n	1a138 <send_conn_le_param_update+0x24>
   1a16c:	e7e6      	b.n	1a13c <send_conn_le_param_update+0x28>
	return bt_l2cap_update_conn_param(conn, param);
   1a16e:	4629      	mov	r1, r5
   1a170:	4620      	mov	r0, r4
   1a172:	f010 fa20 	bl	2a5b6 <bt_l2cap_update_conn_param>
}
   1a176:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1a178:	f06f 0015 	mvn.w	r0, #21
   1a17c:	e7fb      	b.n	1a176 <send_conn_le_param_update+0x62>
   1a17e:	bf00      	nop
   1a180:	20000370 	.word	0x20000370

0001a184 <deferred_work>:
{
   1a184:	b570      	push	{r4, r5, r6, lr}
   1a186:	b084      	sub	sp, #16
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   1a188:	f1a0 0558 	sub.w	r5, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   1a18c:	f810 3c4e 	ldrb.w	r3, [r0, #-78]
   1a190:	b1e3      	cbz	r3, 1a1cc <deferred_work+0x48>
   1a192:	4604      	mov	r4, r0
	if (conn->type != BT_CONN_TYPE_LE) {
   1a194:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   1a198:	2b01      	cmp	r3, #1
   1a19a:	d115      	bne.n	1a1c8 <deferred_work+0x44>
	    conn->role == BT_CONN_ROLE_CENTRAL) {
   1a19c:	f810 3c55 	ldrb.w	r3, [r0, #-85]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1a1a0:	b1f3      	cbz	r3, 1a1e0 <deferred_work+0x5c>
	if (atomic_test_and_clear_bit(conn->flags,
   1a1a2:	f1a0 0654 	sub.w	r6, r0, #84	; 0x54
   1a1a6:	2109      	movs	r1, #9
   1a1a8:	4630      	mov	r0, r6
   1a1aa:	f010 f80c 	bl	2a1c6 <atomic_test_and_clear_bit>
   1a1ae:	b9d0      	cbnz	r0, 1a1e6 <deferred_work+0x62>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1a1b0:	f3bf 8f5b 	dmb	ish
   1a1b4:	e856 3f00 	ldrex	r3, [r6]
   1a1b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1a1bc:	e846 3200 	strex	r2, r3, [r6]
   1a1c0:	2a00      	cmp	r2, #0
   1a1c2:	d1f7      	bne.n	1a1b4 <deferred_work+0x30>
   1a1c4:	f3bf 8f5b 	dmb	ish
}
   1a1c8:	b004      	add	sp, #16
   1a1ca:	bd70      	pop	{r4, r5, r6, pc}
		bt_l2cap_disconnected(conn);
   1a1cc:	4628      	mov	r0, r5
   1a1ce:	f010 f979 	bl	2a4c4 <bt_l2cap_disconnected>
		notify_disconnected(conn);
   1a1d2:	4628      	mov	r0, r5
   1a1d4:	f7ff f8ec 	bl	193b0 <notify_disconnected>
		bt_conn_unref(conn);
   1a1d8:	4628      	mov	r0, r5
   1a1da:	f010 f89b 	bl	2a314 <bt_conn_unref>
		return;
   1a1de:	e7f3      	b.n	1a1c8 <deferred_work+0x44>
		bt_le_create_conn_cancel();
   1a1e0:	f7fd fe40 	bl	17e64 <bt_le_create_conn_cancel>
		return;
   1a1e4:	e7f0      	b.n	1a1c8 <deferred_work+0x44>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   1a1e6:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   1a1ea:	f8ad 3008 	strh.w	r3, [sp, #8]
   1a1ee:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
   1a1f2:	f8ad 300a 	strh.w	r3, [sp, #10]
   1a1f6:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
   1a1fa:	f8ad 300c 	strh.w	r3, [sp, #12]
   1a1fe:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
   1a202:	f8ad 300e 	strh.w	r3, [sp, #14]
		err = send_conn_le_param_update(conn, param);
   1a206:	a902      	add	r1, sp, #8
   1a208:	4628      	mov	r0, r5
   1a20a:	f7ff ff83 	bl	1a114 <send_conn_le_param_update>
		if (!err) {
   1a20e:	4605      	mov	r5, r0
   1a210:	b960      	cbnz	r0, 1a22c <deferred_work+0xa8>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1a212:	f3bf 8f5b 	dmb	ish
   1a216:	e856 3f00 	ldrex	r3, [r6]
   1a21a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   1a21e:	e846 3200 	strex	r2, r3, [r6]
   1a222:	2a00      	cmp	r2, #0
   1a224:	d1f7      	bne.n	1a216 <deferred_work+0x92>
   1a226:	f3bf 8f5b 	dmb	ish
   1a22a:	e7c1      	b.n	1a1b0 <deferred_work+0x2c>
			LOG_WRN("Send LE param update failed (err %d)", err);
   1a22c:	2008      	movs	r0, #8
   1a22e:	f7f9 fd6b 	bl	13d08 <z_log_msg_alloc>
   1a232:	2200      	movs	r2, #0
   1a234:	f36f 0200 	bfc	r2, #0, #1
   1a238:	f36f 0241 	bfc	r2, #1, #1
   1a23c:	f36f 0282 	bfc	r2, #2, #1
   1a240:	f36f 02c5 	bfc	r2, #3, #3
   1a244:	2302      	movs	r3, #2
   1a246:	f363 1288 	bfi	r2, r3, #6, #3
   1a24a:	230c      	movs	r3, #12
   1a24c:	f363 2252 	bfi	r2, r3, #9, #10
   1a250:	f36f 42de 	bfc	r2, #19, #12
   1a254:	f36f 72df 	bfc	r2, #31, #1
   1a258:	4604      	mov	r4, r0
   1a25a:	b190      	cbz	r0, 1a282 <deferred_work+0xfe>
   1a25c:	f110 0310 	adds.w	r3, r0, #16
   1a260:	d002      	beq.n	1a268 <deferred_work+0xe4>
   1a262:	490b      	ldr	r1, [pc, #44]	; (1a290 <deferred_work+0x10c>)
   1a264:	6141      	str	r1, [r0, #20]
   1a266:	6185      	str	r5, [r0, #24]
   1a268:	b15b      	cbz	r3, 1a282 <deferred_work+0xfe>
   1a26a:	2303      	movs	r3, #3
   1a26c:	f88d 3004 	strb.w	r3, [sp, #4]
   1a270:	2300      	movs	r3, #0
   1a272:	f88d 3005 	strb.w	r3, [sp, #5]
   1a276:	f88d 3006 	strb.w	r3, [sp, #6]
   1a27a:	f88d 3007 	strb.w	r3, [sp, #7]
   1a27e:	9801      	ldr	r0, [sp, #4]
   1a280:	6120      	str	r0, [r4, #16]
   1a282:	2300      	movs	r3, #0
   1a284:	4903      	ldr	r1, [pc, #12]	; (1a294 <deferred_work+0x110>)
   1a286:	4620      	mov	r0, r4
   1a288:	f00e ffa7 	bl	291da <z_log_msg_finalize>
   1a28c:	e790      	b.n	1a1b0 <deferred_work+0x2c>
   1a28e:	bf00      	nop
   1a290:	00032d10 	.word	0x00032d10
   1a294:	00031418 	.word	0x00031418

0001a298 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   1a298:	b538      	push	{r3, r4, r5, lr}
	z_impl_k_queue_init(queue);
   1a29a:	4814      	ldr	r0, [pc, #80]	; (1a2ec <bt_conn_init+0x54>)
   1a29c:	f016 f8de 	bl	3045c <z_impl_k_queue_init>
	int err, i;

	k_fifo_init(&free_tx);
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
   1a2a0:	2400      	movs	r4, #0
   1a2a2:	e006      	b.n	1a2b2 <bt_conn_init+0x1a>
		k_fifo_put(&free_tx, &conn_tx[i]);
   1a2a4:	4912      	ldr	r1, [pc, #72]	; (1a2f0 <bt_conn_init+0x58>)
   1a2a6:	eb01 1104 	add.w	r1, r1, r4, lsl #4
   1a2aa:	4810      	ldr	r0, [pc, #64]	; (1a2ec <bt_conn_init+0x54>)
   1a2ac:	f016 f8e2 	bl	30474 <k_queue_append>
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
   1a2b0:	3401      	adds	r4, #1
   1a2b2:	2c02      	cmp	r4, #2
   1a2b4:	d9f6      	bls.n	1a2a4 <bt_conn_init+0xc>
	}

	bt_att_init();
   1a2b6:	f001 fd47 	bl	1bd48 <bt_att_init>

	err = bt_smp_init();
   1a2ba:	f011 ff17 	bl	2c0ec <bt_smp_init>
	if (err) {
   1a2be:	4605      	mov	r5, r0
   1a2c0:	b108      	cbz	r0, 1a2c6 <bt_conn_init+0x2e>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   1a2c2:	4628      	mov	r0, r5
   1a2c4:	bd38      	pop	{r3, r4, r5, pc}
	bt_l2cap_init();
   1a2c6:	f010 f9a3 	bl	2a610 <bt_l2cap_init>
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   1a2ca:	462c      	mov	r4, r5
   1a2cc:	e002      	b.n	1a2d4 <bt_conn_init+0x3c>
			bt_conn_unref(conn);
   1a2ce:	f010 f821 	bl	2a314 <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   1a2d2:	3401      	adds	r4, #1
   1a2d4:	2c07      	cmp	r4, #7
   1a2d6:	d8f4      	bhi.n	1a2c2 <bt_conn_init+0x2a>
			struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1a2d8:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   1a2dc:	4b05      	ldr	r3, [pc, #20]	; (1a2f4 <bt_conn_init+0x5c>)
   1a2de:	eb03 1080 	add.w	r0, r3, r0, lsl #6
   1a2e2:	f00f fff0 	bl	2a2c6 <bt_conn_ref>
			if (!conn) {
   1a2e6:	2800      	cmp	r0, #0
   1a2e8:	d1f1      	bne.n	1a2ce <bt_conn_init+0x36>
   1a2ea:	e7f2      	b.n	1a2d2 <bt_conn_init+0x3a>
   1a2ec:	20000b18 	.word	0x20000b18
   1a2f0:	20007d0c 	.word	0x20007d0c
   1a2f4:	200020f8 	.word	0x200020f8

0001a2f8 <get_ident>:

static uint8_t get_ident(void)
{
	static uint8_t ident;

	ident++;
   1a2f8:	4905      	ldr	r1, [pc, #20]	; (1a310 <get_ident+0x18>)
   1a2fa:	780a      	ldrb	r2, [r1, #0]
   1a2fc:	1c53      	adds	r3, r2, #1
   1a2fe:	b2db      	uxtb	r3, r3
   1a300:	700b      	strb	r3, [r1, #0]
	/* handle integer overflow (0 is not valid) */
	if (!ident) {
   1a302:	b90b      	cbnz	r3, 1a308 <get_ident+0x10>
		ident++;
   1a304:	3202      	adds	r2, #2
   1a306:	700a      	strb	r2, [r1, #0]
	}

	return ident;
}
   1a308:	4b01      	ldr	r3, [pc, #4]	; (1a310 <get_ident+0x18>)
   1a30a:	7818      	ldrb	r0, [r3, #0]
   1a30c:	4770      	bx	lr
   1a30e:	bf00      	nop
   1a310:	200090bd 	.word	0x200090bd

0001a314 <l2cap_accept>:
	(void)k_work_cancel_delayable(&le_chan->rtx_work);
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   1a314:	b530      	push	{r4, r5, lr}
   1a316:	b083      	sub	sp, #12
   1a318:	4605      	mov	r5, r0
		.recv = l2cap_recv,
	};

	LOG_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   1a31a:	2300      	movs	r3, #0
   1a31c:	2b07      	cmp	r3, #7
   1a31e:	d811      	bhi.n	1a344 <l2cap_accept+0x30>
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   1a320:	228c      	movs	r2, #140	; 0x8c
   1a322:	fb03 f202 	mul.w	r2, r3, r2
   1a326:	4c21      	ldr	r4, [pc, #132]	; (1a3ac <l2cap_accept+0x98>)
   1a328:	58a2      	ldr	r2, [r4, r2]
   1a32a:	b10a      	cbz	r2, 1a330 <l2cap_accept+0x1c>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   1a32c:	3301      	adds	r3, #1
   1a32e:	e7f5      	b.n	1a31c <l2cap_accept+0x8>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
   1a330:	4a1e      	ldr	r2, [pc, #120]	; (1a3ac <l2cap_accept+0x98>)
   1a332:	208c      	movs	r0, #140	; 0x8c
   1a334:	fb00 2303 	mla	r3, r0, r3, r2
   1a338:	4a1d      	ldr	r2, [pc, #116]	; (1a3b0 <l2cap_accept+0x9c>)
   1a33a:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
   1a33c:	600b      	str	r3, [r1, #0]

		return 0;
   1a33e:	2000      	movs	r0, #0
	}

	LOG_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
   1a340:	b003      	add	sp, #12
   1a342:	bd30      	pop	{r4, r5, pc}
	LOG_ERR("No available L2CAP context for conn %p", conn);
   1a344:	2008      	movs	r0, #8
   1a346:	f7f9 fcdf 	bl	13d08 <z_log_msg_alloc>
   1a34a:	2200      	movs	r2, #0
   1a34c:	f36f 0200 	bfc	r2, #0, #1
   1a350:	f36f 0241 	bfc	r2, #1, #1
   1a354:	f36f 0282 	bfc	r2, #2, #1
   1a358:	f36f 02c5 	bfc	r2, #3, #3
   1a35c:	2301      	movs	r3, #1
   1a35e:	f363 1288 	bfi	r2, r3, #6, #3
   1a362:	230c      	movs	r3, #12
   1a364:	f363 2252 	bfi	r2, r3, #9, #10
   1a368:	f36f 42de 	bfc	r2, #19, #12
   1a36c:	f36f 72df 	bfc	r2, #31, #1
   1a370:	4604      	mov	r4, r0
   1a372:	b190      	cbz	r0, 1a39a <l2cap_accept+0x86>
   1a374:	f110 0310 	adds.w	r3, r0, #16
   1a378:	d002      	beq.n	1a380 <l2cap_accept+0x6c>
   1a37a:	490e      	ldr	r1, [pc, #56]	; (1a3b4 <l2cap_accept+0xa0>)
   1a37c:	6141      	str	r1, [r0, #20]
   1a37e:	6185      	str	r5, [r0, #24]
   1a380:	b15b      	cbz	r3, 1a39a <l2cap_accept+0x86>
   1a382:	2303      	movs	r3, #3
   1a384:	f88d 3004 	strb.w	r3, [sp, #4]
   1a388:	2300      	movs	r3, #0
   1a38a:	f88d 3005 	strb.w	r3, [sp, #5]
   1a38e:	f88d 3006 	strb.w	r3, [sp, #6]
   1a392:	f88d 3007 	strb.w	r3, [sp, #7]
   1a396:	9801      	ldr	r0, [sp, #4]
   1a398:	6120      	str	r0, [r4, #16]
   1a39a:	2300      	movs	r3, #0
   1a39c:	4906      	ldr	r1, [pc, #24]	; (1a3b8 <l2cap_accept+0xa4>)
   1a39e:	4620      	mov	r0, r4
   1a3a0:	f00e ff1b 	bl	291da <z_log_msg_finalize>
	return -ENOMEM;
   1a3a4:	f06f 000b 	mvn.w	r0, #11
   1a3a8:	e7ca      	b.n	1a340 <l2cap_accept+0x2c>
   1a3aa:	bf00      	nop
   1a3ac:	20007d40 	.word	0x20007d40
   1a3b0:	00032f00 	.word	0x00032f00
   1a3b4:	00032d60 	.word	0x00032d60
   1a3b8:	00031438 	.word	0x00031438

0001a3bc <le_conn_param_rsp>:
	if (buf->len < sizeof(*rsp)) {
   1a3bc:	8a0b      	ldrh	r3, [r1, #16]
   1a3be:	2b01      	cmp	r3, #1
   1a3c0:	d900      	bls.n	1a3c4 <le_conn_param_rsp+0x8>
   1a3c2:	4770      	bx	lr
{
   1a3c4:	b500      	push	{lr}
   1a3c6:	b083      	sub	sp, #12
		LOG_ERR("Too small LE conn param rsp");
   1a3c8:	2006      	movs	r0, #6
   1a3ca:	f7f9 fc9d 	bl	13d08 <z_log_msg_alloc>
   1a3ce:	2200      	movs	r2, #0
   1a3d0:	f36f 0200 	bfc	r2, #0, #1
   1a3d4:	f36f 0241 	bfc	r2, #1, #1
   1a3d8:	f36f 0282 	bfc	r2, #2, #1
   1a3dc:	f36f 02c5 	bfc	r2, #3, #3
   1a3e0:	2301      	movs	r3, #1
   1a3e2:	f363 1288 	bfi	r2, r3, #6, #3
   1a3e6:	2308      	movs	r3, #8
   1a3e8:	f363 2252 	bfi	r2, r3, #9, #10
   1a3ec:	f36f 42de 	bfc	r2, #19, #12
   1a3f0:	f36f 72df 	bfc	r2, #31, #1
   1a3f4:	4684      	mov	ip, r0
   1a3f6:	b190      	cbz	r0, 1a41e <le_conn_param_rsp+0x62>
   1a3f8:	f110 0310 	adds.w	r3, r0, #16
   1a3fc:	d001      	beq.n	1a402 <le_conn_param_rsp+0x46>
   1a3fe:	490c      	ldr	r1, [pc, #48]	; (1a430 <le_conn_param_rsp+0x74>)
   1a400:	6141      	str	r1, [r0, #20]
   1a402:	b163      	cbz	r3, 1a41e <le_conn_param_rsp+0x62>
   1a404:	2302      	movs	r3, #2
   1a406:	f88d 3004 	strb.w	r3, [sp, #4]
   1a40a:	2300      	movs	r3, #0
   1a40c:	f88d 3005 	strb.w	r3, [sp, #5]
   1a410:	f88d 3006 	strb.w	r3, [sp, #6]
   1a414:	f88d 3007 	strb.w	r3, [sp, #7]
   1a418:	9801      	ldr	r0, [sp, #4]
   1a41a:	f8cc 0010 	str.w	r0, [ip, #16]
   1a41e:	2300      	movs	r3, #0
   1a420:	4904      	ldr	r1, [pc, #16]	; (1a434 <le_conn_param_rsp+0x78>)
   1a422:	4660      	mov	r0, ip
   1a424:	f00e fed9 	bl	291da <z_log_msg_finalize>
}
   1a428:	b003      	add	sp, #12
   1a42a:	f85d fb04 	ldr.w	pc, [sp], #4
   1a42e:	bf00      	nop
   1a430:	00032d88 	.word	0x00032d88
   1a434:	00031438 	.word	0x00031438

0001a438 <l2cap_chan_add>:
{
   1a438:	b510      	push	{r4, lr}
   1a43a:	b082      	sub	sp, #8
	if (!le_chan) {
   1a43c:	b199      	cbz	r1, 1a466 <l2cap_chan_add+0x2e>
   1a43e:	460b      	mov	r3, r1
	atomic_clear(chan->status);
   1a440:	3110      	adds	r1, #16
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1a442:	f04f 0c00 	mov.w	ip, #0
   1a446:	f3bf 8f5b 	dmb	ish
   1a44a:	e851 ef00 	ldrex	lr, [r1]
   1a44e:	e841 c400 	strex	r4, ip, [r1]
   1a452:	2c00      	cmp	r4, #0
   1a454:	d1f9      	bne.n	1a44a <l2cap_chan_add+0x12>
   1a456:	f3bf 8f5b 	dmb	ish
	bt_l2cap_chan_add(conn, chan, destroy);
   1a45a:	4619      	mov	r1, r3
   1a45c:	f010 f822 	bl	2a4a4 <bt_l2cap_chan_add>
	return true;
   1a460:	2001      	movs	r0, #1
}
   1a462:	b002      	add	sp, #8
   1a464:	bd10      	pop	{r4, pc}
		LOG_ERR("Unable to allocate L2CAP channel ID");
   1a466:	2006      	movs	r0, #6
   1a468:	f7f9 fc4e 	bl	13d08 <z_log_msg_alloc>
   1a46c:	2200      	movs	r2, #0
   1a46e:	f36f 0200 	bfc	r2, #0, #1
   1a472:	f36f 0241 	bfc	r2, #1, #1
   1a476:	f36f 0282 	bfc	r2, #2, #1
   1a47a:	f36f 02c5 	bfc	r2, #3, #3
   1a47e:	2301      	movs	r3, #1
   1a480:	f363 1288 	bfi	r2, r3, #6, #3
   1a484:	2308      	movs	r3, #8
   1a486:	f363 2252 	bfi	r2, r3, #9, #10
   1a48a:	f36f 42de 	bfc	r2, #19, #12
   1a48e:	f36f 72df 	bfc	r2, #31, #1
   1a492:	4604      	mov	r4, r0
   1a494:	b188      	cbz	r0, 1a4ba <l2cap_chan_add+0x82>
   1a496:	f110 0310 	adds.w	r3, r0, #16
   1a49a:	d001      	beq.n	1a4a0 <l2cap_chan_add+0x68>
   1a49c:	490a      	ldr	r1, [pc, #40]	; (1a4c8 <l2cap_chan_add+0x90>)
   1a49e:	6141      	str	r1, [r0, #20]
   1a4a0:	b15b      	cbz	r3, 1a4ba <l2cap_chan_add+0x82>
   1a4a2:	2302      	movs	r3, #2
   1a4a4:	f88d 3004 	strb.w	r3, [sp, #4]
   1a4a8:	2300      	movs	r3, #0
   1a4aa:	f88d 3005 	strb.w	r3, [sp, #5]
   1a4ae:	f88d 3006 	strb.w	r3, [sp, #6]
   1a4b2:	f88d 3007 	strb.w	r3, [sp, #7]
   1a4b6:	9801      	ldr	r0, [sp, #4]
   1a4b8:	6120      	str	r0, [r4, #16]
   1a4ba:	2300      	movs	r3, #0
   1a4bc:	4903      	ldr	r1, [pc, #12]	; (1a4cc <l2cap_chan_add+0x94>)
   1a4be:	4620      	mov	r0, r4
   1a4c0:	f00e fe8b 	bl	291da <z_log_msg_finalize>
		return false;
   1a4c4:	2000      	movs	r0, #0
   1a4c6:	e7cc      	b.n	1a462 <l2cap_chan_add+0x2a>
   1a4c8:	00032da4 	.word	0x00032da4
   1a4cc:	00031438 	.word	0x00031438

0001a4d0 <bt_l2cap_connected>:
{
   1a4d0:	b530      	push	{r4, r5, lr}
   1a4d2:	b083      	sub	sp, #12
   1a4d4:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1a4d6:	4c19      	ldr	r4, [pc, #100]	; (1a53c <bt_l2cap_connected+0x6c>)
   1a4d8:	e000      	b.n	1a4dc <bt_l2cap_connected+0xc>
   1a4da:	340c      	adds	r4, #12
   1a4dc:	4b18      	ldr	r3, [pc, #96]	; (1a540 <bt_l2cap_connected+0x70>)
   1a4de:	429c      	cmp	r4, r3
   1a4e0:	d22a      	bcs.n	1a538 <bt_l2cap_connected+0x68>
		if (fchan->accept(conn, &chan) < 0) {
   1a4e2:	6863      	ldr	r3, [r4, #4]
   1a4e4:	a901      	add	r1, sp, #4
   1a4e6:	4628      	mov	r0, r5
   1a4e8:	4798      	blx	r3
   1a4ea:	2800      	cmp	r0, #0
   1a4ec:	dbf5      	blt.n	1a4da <bt_l2cap_connected+0xa>
		le_chan = BT_L2CAP_LE_CHAN(chan);
   1a4ee:	9901      	ldr	r1, [sp, #4]
		le_chan->rx.cid = fchan->cid;
   1a4f0:	8823      	ldrh	r3, [r4, #0]
   1a4f2:	828b      	strh	r3, [r1, #20]
		le_chan->tx.cid = fchan->cid;
   1a4f4:	848b      	strh	r3, [r1, #36]	; 0x24
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   1a4f6:	68a2      	ldr	r2, [r4, #8]
   1a4f8:	4628      	mov	r0, r5
   1a4fa:	f7ff ff9d 	bl	1a438 <l2cap_chan_add>
   1a4fe:	b1d8      	cbz	r0, 1a538 <bt_l2cap_connected+0x68>
		if (chan->ops->connected) {
   1a500:	9801      	ldr	r0, [sp, #4]
   1a502:	6843      	ldr	r3, [r0, #4]
   1a504:	681b      	ldr	r3, [r3, #0]
   1a506:	b103      	cbz	r3, 1a50a <bt_l2cap_connected+0x3a>
			chan->ops->connected(chan);
   1a508:	4798      	blx	r3
		atomic_set_bit(chan->status, BT_L2CAP_STATUS_OUT);
   1a50a:	9b01      	ldr	r3, [sp, #4]
   1a50c:	3310      	adds	r3, #16
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1a50e:	f3bf 8f5b 	dmb	ish
   1a512:	e853 1f00 	ldrex	r1, [r3]
   1a516:	f041 0101 	orr.w	r1, r1, #1
   1a51a:	e843 1200 	strex	r2, r1, [r3]
   1a51e:	2a00      	cmp	r2, #0
   1a520:	d1f7      	bne.n	1a512 <bt_l2cap_connected+0x42>
   1a522:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   1a526:	9801      	ldr	r0, [sp, #4]
   1a528:	6843      	ldr	r3, [r0, #4]
   1a52a:	69db      	ldr	r3, [r3, #28]
   1a52c:	2b00      	cmp	r3, #0
   1a52e:	d0d4      	beq.n	1a4da <bt_l2cap_connected+0xa>
			chan->ops->status(chan, chan->status);
   1a530:	f100 0110 	add.w	r1, r0, #16
   1a534:	4798      	blx	r3
   1a536:	e7d0      	b.n	1a4da <bt_l2cap_connected+0xa>
}
   1a538:	b003      	add	sp, #12
   1a53a:	bd30      	pop	{r4, r5, pc}
   1a53c:	000313b8 	.word	0x000313b8
   1a540:	000313dc 	.word	0x000313dc

0001a544 <l2cap_create_le_sig_pdu>:
{
   1a544:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a546:	b083      	sub	sp, #12
   1a548:	460c      	mov	r4, r1
   1a54a:	4616      	mov	r6, r2
   1a54c:	461d      	mov	r5, r3
	buf = bt_l2cap_create_pdu_timeout(pool, 0, L2CAP_RTX_TIMEOUT);
   1a54e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1a552:	2300      	movs	r3, #0
   1a554:	2100      	movs	r1, #0
   1a556:	4608      	mov	r0, r1
   1a558:	f00f ffcf 	bl	2a4fa <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   1a55c:	4607      	mov	r7, r0
   1a55e:	b148      	cbz	r0, 1a574 <l2cap_create_le_sig_pdu+0x30>
	return net_buf_simple_add(&buf->b, len);
   1a560:	2104      	movs	r1, #4
   1a562:	300c      	adds	r0, #12
   1a564:	f012 f88c 	bl	2c680 <net_buf_simple_add>
	hdr->code = code;
   1a568:	7004      	strb	r4, [r0, #0]
	hdr->ident = ident;
   1a56a:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   1a56c:	8045      	strh	r5, [r0, #2]
}
   1a56e:	4638      	mov	r0, r7
   1a570:	b003      	add	sp, #12
   1a572:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Unable to allocate buffer for op 0x%02x", code);
   1a574:	2008      	movs	r0, #8
   1a576:	f7f9 fbc7 	bl	13d08 <z_log_msg_alloc>
   1a57a:	2200      	movs	r2, #0
   1a57c:	f36f 0200 	bfc	r2, #0, #1
   1a580:	f36f 0241 	bfc	r2, #1, #1
   1a584:	f36f 0282 	bfc	r2, #2, #1
   1a588:	f36f 02c5 	bfc	r2, #3, #3
   1a58c:	2301      	movs	r3, #1
   1a58e:	f363 1288 	bfi	r2, r3, #6, #3
   1a592:	230c      	movs	r3, #12
   1a594:	f363 2252 	bfi	r2, r3, #9, #10
   1a598:	f36f 42de 	bfc	r2, #19, #12
   1a59c:	f36f 72df 	bfc	r2, #31, #1
   1a5a0:	4605      	mov	r5, r0
   1a5a2:	b190      	cbz	r0, 1a5ca <l2cap_create_le_sig_pdu+0x86>
   1a5a4:	f110 0310 	adds.w	r3, r0, #16
   1a5a8:	d002      	beq.n	1a5b0 <l2cap_create_le_sig_pdu+0x6c>
   1a5aa:	490b      	ldr	r1, [pc, #44]	; (1a5d8 <l2cap_create_le_sig_pdu+0x94>)
   1a5ac:	6141      	str	r1, [r0, #20]
   1a5ae:	6184      	str	r4, [r0, #24]
   1a5b0:	b15b      	cbz	r3, 1a5ca <l2cap_create_le_sig_pdu+0x86>
   1a5b2:	2303      	movs	r3, #3
   1a5b4:	f88d 3004 	strb.w	r3, [sp, #4]
   1a5b8:	2300      	movs	r3, #0
   1a5ba:	f88d 3005 	strb.w	r3, [sp, #5]
   1a5be:	f88d 3006 	strb.w	r3, [sp, #6]
   1a5c2:	f88d 3007 	strb.w	r3, [sp, #7]
   1a5c6:	9801      	ldr	r0, [sp, #4]
   1a5c8:	6128      	str	r0, [r5, #16]
   1a5ca:	2300      	movs	r3, #0
   1a5cc:	4903      	ldr	r1, [pc, #12]	; (1a5dc <l2cap_create_le_sig_pdu+0x98>)
   1a5ce:	4628      	mov	r0, r5
   1a5d0:	f00e fe03 	bl	291da <z_log_msg_finalize>
		return NULL;
   1a5d4:	e7cb      	b.n	1a56e <l2cap_create_le_sig_pdu+0x2a>
   1a5d6:	bf00      	nop
   1a5d8:	00032dc8 	.word	0x00032dc8
   1a5dc:	00031438 	.word	0x00031438

0001a5e0 <le_conn_param_update_req>:
{
   1a5e0:	b570      	push	{r4, r5, r6, lr}
   1a5e2:	b086      	sub	sp, #24
	struct bt_conn *conn = l2cap->chan.chan.conn;
   1a5e4:	6804      	ldr	r4, [r0, #0]
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
   1a5e6:	68d3      	ldr	r3, [r2, #12]
	if (buf->len < sizeof(*req)) {
   1a5e8:	8a10      	ldrh	r0, [r2, #16]
   1a5ea:	2807      	cmp	r0, #7
   1a5ec:	d937      	bls.n	1a65e <le_conn_param_update_req+0x7e>
   1a5ee:	4694      	mov	ip, r2
	if (conn->state != BT_CONN_CONNECTED) {
   1a5f0:	7aa2      	ldrb	r2, [r4, #10]
   1a5f2:	2a07      	cmp	r2, #7
   1a5f4:	d163      	bne.n	1a6be <le_conn_param_update_req+0xde>
	if (conn->role != BT_HCI_ROLE_CENTRAL) {
   1a5f6:	78e2      	ldrb	r2, [r4, #3]
   1a5f8:	2a00      	cmp	r2, #0
   1a5fa:	f040 8091 	bne.w	1a720 <le_conn_param_update_req+0x140>
	param.interval_min = sys_le16_to_cpu(req->min_interval);
   1a5fe:	881a      	ldrh	r2, [r3, #0]
   1a600:	f8ad 2010 	strh.w	r2, [sp, #16]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
   1a604:	885a      	ldrh	r2, [r3, #2]
   1a606:	f8ad 2012 	strh.w	r2, [sp, #18]
	param.latency = sys_le16_to_cpu(req->latency);
   1a60a:	889a      	ldrh	r2, [r3, #4]
   1a60c:	f8ad 2014 	strh.w	r2, [sp, #20]
	param.timeout = sys_le16_to_cpu(req->timeout);
   1a610:	88db      	ldrh	r3, [r3, #6]
   1a612:	f8ad 3016 	strh.w	r3, [sp, #22]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   1a616:	2302      	movs	r3, #2
   1a618:	460a      	mov	r2, r1
   1a61a:	2113      	movs	r1, #19
   1a61c:	4660      	mov	r0, ip
   1a61e:	f7ff ff91 	bl	1a544 <l2cap_create_le_sig_pdu>
	if (!buf) {
   1a622:	4606      	mov	r6, r0
   1a624:	2800      	cmp	r0, #0
   1a626:	d079      	beq.n	1a71c <le_conn_param_update_req+0x13c>
	accepted = le_param_req(conn, &param);
   1a628:	a904      	add	r1, sp, #16
   1a62a:	4620      	mov	r0, r4
   1a62c:	f7ff fbbe 	bl	19dac <le_param_req>
   1a630:	4605      	mov	r5, r0
   1a632:	2102      	movs	r1, #2
   1a634:	f106 000c 	add.w	r0, r6, #12
   1a638:	f012 f822 	bl	2c680 <net_buf_simple_add>
	if (accepted) {
   1a63c:	2d00      	cmp	r5, #0
   1a63e:	d076      	beq.n	1a72e <le_conn_param_update_req+0x14e>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
   1a640:	2300      	movs	r3, #0
   1a642:	7003      	strb	r3, [r0, #0]
   1a644:	7043      	strb	r3, [r0, #1]
	l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
   1a646:	4632      	mov	r2, r6
   1a648:	2105      	movs	r1, #5
   1a64a:	4620      	mov	r0, r4
   1a64c:	f00f ff6f 	bl	2a52e <l2cap_send>
	if (accepted) {
   1a650:	2d00      	cmp	r5, #0
   1a652:	d063      	beq.n	1a71c <le_conn_param_update_req+0x13c>
		bt_conn_le_conn_update(conn, &param);
   1a654:	a904      	add	r1, sp, #16
   1a656:	4620      	mov	r0, r4
   1a658:	f00f fedf 	bl	2a41a <bt_conn_le_conn_update>
   1a65c:	e05e      	b.n	1a71c <le_conn_param_update_req+0x13c>
		LOG_ERR("Too small LE conn update param req");
   1a65e:	2006      	movs	r0, #6
   1a660:	f7f9 fb52 	bl	13d08 <z_log_msg_alloc>
   1a664:	2200      	movs	r2, #0
   1a666:	f36f 0200 	bfc	r2, #0, #1
   1a66a:	f36f 0241 	bfc	r2, #1, #1
   1a66e:	f36f 0282 	bfc	r2, #2, #1
   1a672:	f36f 02c5 	bfc	r2, #3, #3
   1a676:	2301      	movs	r3, #1
   1a678:	f363 1288 	bfi	r2, r3, #6, #3
   1a67c:	2308      	movs	r3, #8
   1a67e:	f363 2252 	bfi	r2, r3, #9, #10
   1a682:	f36f 42de 	bfc	r2, #19, #12
   1a686:	f36f 72df 	bfc	r2, #31, #1
   1a68a:	4604      	mov	r4, r0
   1a68c:	b188      	cbz	r0, 1a6b2 <le_conn_param_update_req+0xd2>
   1a68e:	f110 0310 	adds.w	r3, r0, #16
   1a692:	d001      	beq.n	1a698 <le_conn_param_update_req+0xb8>
   1a694:	4928      	ldr	r1, [pc, #160]	; (1a738 <le_conn_param_update_req+0x158>)
   1a696:	6141      	str	r1, [r0, #20]
   1a698:	b15b      	cbz	r3, 1a6b2 <le_conn_param_update_req+0xd2>
   1a69a:	2302      	movs	r3, #2
   1a69c:	f88d 300c 	strb.w	r3, [sp, #12]
   1a6a0:	2300      	movs	r3, #0
   1a6a2:	f88d 300d 	strb.w	r3, [sp, #13]
   1a6a6:	f88d 300e 	strb.w	r3, [sp, #14]
   1a6aa:	f88d 300f 	strb.w	r3, [sp, #15]
   1a6ae:	9803      	ldr	r0, [sp, #12]
   1a6b0:	6120      	str	r0, [r4, #16]
   1a6b2:	2300      	movs	r3, #0
   1a6b4:	4921      	ldr	r1, [pc, #132]	; (1a73c <le_conn_param_update_req+0x15c>)
   1a6b6:	4620      	mov	r0, r4
   1a6b8:	f00e fd8f 	bl	291da <z_log_msg_finalize>
		return;
   1a6bc:	e02e      	b.n	1a71c <le_conn_param_update_req+0x13c>
		LOG_WRN("Not connected");
   1a6be:	2006      	movs	r0, #6
   1a6c0:	f7f9 fb22 	bl	13d08 <z_log_msg_alloc>
   1a6c4:	2200      	movs	r2, #0
   1a6c6:	f36f 0200 	bfc	r2, #0, #1
   1a6ca:	f36f 0241 	bfc	r2, #1, #1
   1a6ce:	f36f 0282 	bfc	r2, #2, #1
   1a6d2:	f36f 02c5 	bfc	r2, #3, #3
   1a6d6:	2302      	movs	r3, #2
   1a6d8:	f363 1288 	bfi	r2, r3, #6, #3
   1a6dc:	2308      	movs	r3, #8
   1a6de:	f363 2252 	bfi	r2, r3, #9, #10
   1a6e2:	f36f 42de 	bfc	r2, #19, #12
   1a6e6:	f36f 72df 	bfc	r2, #31, #1
   1a6ea:	4604      	mov	r4, r0
   1a6ec:	b188      	cbz	r0, 1a712 <le_conn_param_update_req+0x132>
   1a6ee:	f110 0310 	adds.w	r3, r0, #16
   1a6f2:	d001      	beq.n	1a6f8 <le_conn_param_update_req+0x118>
   1a6f4:	4912      	ldr	r1, [pc, #72]	; (1a740 <le_conn_param_update_req+0x160>)
   1a6f6:	6141      	str	r1, [r0, #20]
   1a6f8:	b15b      	cbz	r3, 1a712 <le_conn_param_update_req+0x132>
   1a6fa:	2302      	movs	r3, #2
   1a6fc:	f88d 300c 	strb.w	r3, [sp, #12]
   1a700:	2300      	movs	r3, #0
   1a702:	f88d 300d 	strb.w	r3, [sp, #13]
   1a706:	f88d 300e 	strb.w	r3, [sp, #14]
   1a70a:	f88d 300f 	strb.w	r3, [sp, #15]
   1a70e:	9803      	ldr	r0, [sp, #12]
   1a710:	6120      	str	r0, [r4, #16]
   1a712:	2300      	movs	r3, #0
   1a714:	4909      	ldr	r1, [pc, #36]	; (1a73c <le_conn_param_update_req+0x15c>)
   1a716:	4620      	mov	r0, r4
   1a718:	f00e fd5f 	bl	291da <z_log_msg_finalize>
}
   1a71c:	b006      	add	sp, #24
   1a71e:	bd70      	pop	{r4, r5, r6, pc}
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
   1a720:	2200      	movs	r2, #0
   1a722:	9200      	str	r2, [sp, #0]
   1a724:	4613      	mov	r3, r2
   1a726:	4620      	mov	r0, r4
   1a728:	f00f ff0f 	bl	2a54a <l2cap_send_reject>
		return;
   1a72c:	e7f6      	b.n	1a71c <le_conn_param_update_req+0x13c>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_REJECTED);
   1a72e:	2301      	movs	r3, #1
   1a730:	7003      	strb	r3, [r0, #0]
   1a732:	2300      	movs	r3, #0
   1a734:	7043      	strb	r3, [r0, #1]
   1a736:	e786      	b.n	1a646 <le_conn_param_update_req+0x66>
   1a738:	00032df0 	.word	0x00032df0
   1a73c:	00031438 	.word	0x00031438
   1a740:	00032e14 	.word	0x00032e14

0001a744 <l2cap_recv>:
{
   1a744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a748:	b084      	sub	sp, #16
	if (buf->len < sizeof(*hdr)) {
   1a74a:	8a0b      	ldrh	r3, [r1, #16]
   1a74c:	2b03      	cmp	r3, #3
   1a74e:	d951      	bls.n	1a7f4 <l2cap_recv+0xb0>
   1a750:	4607      	mov	r7, r0
   1a752:	460c      	mov	r4, r1
	return net_buf_simple_pull_mem(&buf->b, len);
   1a754:	2104      	movs	r1, #4
   1a756:	f104 000c 	add.w	r0, r4, #12
   1a75a:	f011 ffbb 	bl	2c6d4 <net_buf_simple_pull_mem>
   1a75e:	4605      	mov	r5, r0
	len = sys_le16_to_cpu(hdr->len);
   1a760:	8846      	ldrh	r6, [r0, #2]
	if (buf->len != len) {
   1a762:	f8b4 8010 	ldrh.w	r8, [r4, #16]
   1a766:	45b0      	cmp	r8, r6
   1a768:	d177      	bne.n	1a85a <l2cap_recv+0x116>
	if (!hdr->ident) {
   1a76a:	7841      	ldrb	r1, [r0, #1]
   1a76c:	2900      	cmp	r1, #0
   1a76e:	f000 80a6 	beq.w	1a8be <l2cap_recv+0x17a>
	switch (hdr->code) {
   1a772:	7806      	ldrb	r6, [r0, #0]
   1a774:	2e12      	cmp	r6, #18
   1a776:	f000 80d7 	beq.w	1a928 <l2cap_recv+0x1e4>
   1a77a:	2e13      	cmp	r6, #19
   1a77c:	f000 80cf 	beq.w	1a91e <l2cap_recv+0x1da>
   1a780:	2e01      	cmp	r6, #1
   1a782:	d066      	beq.n	1a852 <l2cap_recv+0x10e>
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   1a784:	2008      	movs	r0, #8
   1a786:	f7f9 fabf 	bl	13d08 <z_log_msg_alloc>
   1a78a:	2200      	movs	r2, #0
   1a78c:	f36f 0200 	bfc	r2, #0, #1
   1a790:	f36f 0241 	bfc	r2, #1, #1
   1a794:	f36f 0282 	bfc	r2, #2, #1
   1a798:	f36f 02c5 	bfc	r2, #3, #3
   1a79c:	2302      	movs	r3, #2
   1a79e:	f363 1288 	bfi	r2, r3, #6, #3
   1a7a2:	230c      	movs	r3, #12
   1a7a4:	f363 2252 	bfi	r2, r3, #9, #10
   1a7a8:	f36f 42de 	bfc	r2, #19, #12
   1a7ac:	f36f 72df 	bfc	r2, #31, #1
   1a7b0:	4604      	mov	r4, r0
   1a7b2:	b190      	cbz	r0, 1a7da <l2cap_recv+0x96>
   1a7b4:	f110 0310 	adds.w	r3, r0, #16
   1a7b8:	d002      	beq.n	1a7c0 <l2cap_recv+0x7c>
   1a7ba:	495e      	ldr	r1, [pc, #376]	; (1a934 <l2cap_recv+0x1f0>)
   1a7bc:	6141      	str	r1, [r0, #20]
   1a7be:	6186      	str	r6, [r0, #24]
   1a7c0:	b15b      	cbz	r3, 1a7da <l2cap_recv+0x96>
   1a7c2:	2303      	movs	r3, #3
   1a7c4:	f88d 300c 	strb.w	r3, [sp, #12]
   1a7c8:	2300      	movs	r3, #0
   1a7ca:	f88d 300d 	strb.w	r3, [sp, #13]
   1a7ce:	f88d 300e 	strb.w	r3, [sp, #14]
   1a7d2:	f88d 300f 	strb.w	r3, [sp, #15]
   1a7d6:	9803      	ldr	r0, [sp, #12]
   1a7d8:	6120      	str	r0, [r4, #16]
   1a7da:	2300      	movs	r3, #0
   1a7dc:	4956      	ldr	r1, [pc, #344]	; (1a938 <l2cap_recv+0x1f4>)
   1a7de:	4620      	mov	r0, r4
   1a7e0:	f00e fcfb 	bl	291da <z_log_msg_finalize>
		l2cap_send_reject(chan->conn, hdr->ident,
   1a7e4:	7869      	ldrb	r1, [r5, #1]
   1a7e6:	2200      	movs	r2, #0
   1a7e8:	9200      	str	r2, [sp, #0]
   1a7ea:	4613      	mov	r3, r2
   1a7ec:	6838      	ldr	r0, [r7, #0]
   1a7ee:	f00f feac 	bl	2a54a <l2cap_send_reject>
		break;
   1a7f2:	e02e      	b.n	1a852 <l2cap_recv+0x10e>
		LOG_ERR("Too small L2CAP signaling PDU");
   1a7f4:	2006      	movs	r0, #6
   1a7f6:	f7f9 fa87 	bl	13d08 <z_log_msg_alloc>
   1a7fa:	2200      	movs	r2, #0
   1a7fc:	f36f 0200 	bfc	r2, #0, #1
   1a800:	f36f 0241 	bfc	r2, #1, #1
   1a804:	f36f 0282 	bfc	r2, #2, #1
   1a808:	f36f 02c5 	bfc	r2, #3, #3
   1a80c:	2301      	movs	r3, #1
   1a80e:	f363 1288 	bfi	r2, r3, #6, #3
   1a812:	2308      	movs	r3, #8
   1a814:	f363 2252 	bfi	r2, r3, #9, #10
   1a818:	f36f 42de 	bfc	r2, #19, #12
   1a81c:	f36f 72df 	bfc	r2, #31, #1
   1a820:	4604      	mov	r4, r0
   1a822:	b188      	cbz	r0, 1a848 <l2cap_recv+0x104>
   1a824:	f110 0310 	adds.w	r3, r0, #16
   1a828:	d001      	beq.n	1a82e <l2cap_recv+0xea>
   1a82a:	4944      	ldr	r1, [pc, #272]	; (1a93c <l2cap_recv+0x1f8>)
   1a82c:	6141      	str	r1, [r0, #20]
   1a82e:	b15b      	cbz	r3, 1a848 <l2cap_recv+0x104>
   1a830:	2302      	movs	r3, #2
   1a832:	f88d 300c 	strb.w	r3, [sp, #12]
   1a836:	2300      	movs	r3, #0
   1a838:	f88d 300d 	strb.w	r3, [sp, #13]
   1a83c:	f88d 300e 	strb.w	r3, [sp, #14]
   1a840:	f88d 300f 	strb.w	r3, [sp, #15]
   1a844:	9803      	ldr	r0, [sp, #12]
   1a846:	6120      	str	r0, [r4, #16]
   1a848:	2300      	movs	r3, #0
   1a84a:	493b      	ldr	r1, [pc, #236]	; (1a938 <l2cap_recv+0x1f4>)
   1a84c:	4620      	mov	r0, r4
   1a84e:	f00e fcc4 	bl	291da <z_log_msg_finalize>
}
   1a852:	2000      	movs	r0, #0
   1a854:	b004      	add	sp, #16
   1a856:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   1a85a:	2008      	movs	r0, #8
   1a85c:	f7f9 fa54 	bl	13d08 <z_log_msg_alloc>
   1a860:	2200      	movs	r2, #0
   1a862:	f36f 0200 	bfc	r2, #0, #1
   1a866:	f36f 0241 	bfc	r2, #1, #1
   1a86a:	f36f 0282 	bfc	r2, #2, #1
   1a86e:	f36f 02c5 	bfc	r2, #3, #3
   1a872:	2301      	movs	r3, #1
   1a874:	f363 1288 	bfi	r2, r3, #6, #3
   1a878:	2310      	movs	r3, #16
   1a87a:	f363 2252 	bfi	r2, r3, #9, #10
   1a87e:	f36f 42de 	bfc	r2, #19, #12
   1a882:	f36f 72df 	bfc	r2, #31, #1
   1a886:	4604      	mov	r4, r0
   1a888:	b198      	cbz	r0, 1a8b2 <l2cap_recv+0x16e>
   1a88a:	18c3      	adds	r3, r0, r3
   1a88c:	d004      	beq.n	1a898 <l2cap_recv+0x154>
   1a88e:	492c      	ldr	r1, [pc, #176]	; (1a940 <l2cap_recv+0x1fc>)
   1a890:	6141      	str	r1, [r0, #20]
   1a892:	f8c0 8018 	str.w	r8, [r0, #24]
   1a896:	61c6      	str	r6, [r0, #28]
   1a898:	b15b      	cbz	r3, 1a8b2 <l2cap_recv+0x16e>
   1a89a:	2304      	movs	r3, #4
   1a89c:	f88d 300c 	strb.w	r3, [sp, #12]
   1a8a0:	2300      	movs	r3, #0
   1a8a2:	f88d 300d 	strb.w	r3, [sp, #13]
   1a8a6:	f88d 300e 	strb.w	r3, [sp, #14]
   1a8aa:	f88d 300f 	strb.w	r3, [sp, #15]
   1a8ae:	9803      	ldr	r0, [sp, #12]
   1a8b0:	6120      	str	r0, [r4, #16]
   1a8b2:	2300      	movs	r3, #0
   1a8b4:	4920      	ldr	r1, [pc, #128]	; (1a938 <l2cap_recv+0x1f4>)
   1a8b6:	4620      	mov	r0, r4
   1a8b8:	f00e fc8f 	bl	291da <z_log_msg_finalize>
		return 0;
   1a8bc:	e7c9      	b.n	1a852 <l2cap_recv+0x10e>
		LOG_ERR("Invalid ident value in L2CAP PDU");
   1a8be:	2006      	movs	r0, #6
   1a8c0:	f7f9 fa22 	bl	13d08 <z_log_msg_alloc>
   1a8c4:	2200      	movs	r2, #0
   1a8c6:	f36f 0200 	bfc	r2, #0, #1
   1a8ca:	f36f 0241 	bfc	r2, #1, #1
   1a8ce:	f36f 0282 	bfc	r2, #2, #1
   1a8d2:	f36f 02c5 	bfc	r2, #3, #3
   1a8d6:	2301      	movs	r3, #1
   1a8d8:	f363 1288 	bfi	r2, r3, #6, #3
   1a8dc:	2308      	movs	r3, #8
   1a8de:	f363 2252 	bfi	r2, r3, #9, #10
   1a8e2:	f36f 42de 	bfc	r2, #19, #12
   1a8e6:	f36f 72df 	bfc	r2, #31, #1
   1a8ea:	4604      	mov	r4, r0
   1a8ec:	b188      	cbz	r0, 1a912 <l2cap_recv+0x1ce>
   1a8ee:	f110 0310 	adds.w	r3, r0, #16
   1a8f2:	d001      	beq.n	1a8f8 <l2cap_recv+0x1b4>
   1a8f4:	4913      	ldr	r1, [pc, #76]	; (1a944 <l2cap_recv+0x200>)
   1a8f6:	6141      	str	r1, [r0, #20]
   1a8f8:	b15b      	cbz	r3, 1a912 <l2cap_recv+0x1ce>
   1a8fa:	2302      	movs	r3, #2
   1a8fc:	f88d 300c 	strb.w	r3, [sp, #12]
   1a900:	2300      	movs	r3, #0
   1a902:	f88d 300d 	strb.w	r3, [sp, #13]
   1a906:	f88d 300e 	strb.w	r3, [sp, #14]
   1a90a:	f88d 300f 	strb.w	r3, [sp, #15]
   1a90e:	9803      	ldr	r0, [sp, #12]
   1a910:	6120      	str	r0, [r4, #16]
   1a912:	2300      	movs	r3, #0
   1a914:	4908      	ldr	r1, [pc, #32]	; (1a938 <l2cap_recv+0x1f4>)
   1a916:	4620      	mov	r0, r4
   1a918:	f00e fc5f 	bl	291da <z_log_msg_finalize>
		return 0;
   1a91c:	e799      	b.n	1a852 <l2cap_recv+0x10e>
		le_conn_param_rsp(l2cap, buf);
   1a91e:	4621      	mov	r1, r4
   1a920:	4638      	mov	r0, r7
   1a922:	f7ff fd4b 	bl	1a3bc <le_conn_param_rsp>
		break;
   1a926:	e794      	b.n	1a852 <l2cap_recv+0x10e>
			le_conn_param_update_req(l2cap, hdr->ident, buf);
   1a928:	4622      	mov	r2, r4
   1a92a:	4638      	mov	r0, r7
   1a92c:	f7ff fe58 	bl	1a5e0 <le_conn_param_update_req>
			break;
   1a930:	e78f      	b.n	1a852 <l2cap_recv+0x10e>
   1a932:	bf00      	nop
   1a934:	00032e8c 	.word	0x00032e8c
   1a938:	00031438 	.word	0x00031438
   1a93c:	00032e24 	.word	0x00032e24
   1a940:	00032e44 	.word	0x00032e44
   1a944:	00032e68 	.word	0x00032e68

0001a948 <bt_l2cap_recv>:
{
   1a948:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a94a:	b083      	sub	sp, #12
   1a94c:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   1a94e:	8a0b      	ldrh	r3, [r1, #16]
   1a950:	2b03      	cmp	r3, #3
   1a952:	d912      	bls.n	1a97a <bt_l2cap_recv+0x32>
   1a954:	4605      	mov	r5, r0
   1a956:	4616      	mov	r6, r2
   1a958:	2104      	movs	r1, #4
   1a95a:	f104 000c 	add.w	r0, r4, #12
   1a95e:	f011 feb9 	bl	2c6d4 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   1a962:	8847      	ldrh	r7, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   1a964:	4639      	mov	r1, r7
   1a966:	4628      	mov	r0, r5
   1a968:	f00f fe13 	bl	2a592 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1a96c:	b3c0      	cbz	r0, 1a9e0 <bt_l2cap_recv+0x98>
	l2cap_chan_recv(chan, buf, complete);
   1a96e:	4632      	mov	r2, r6
   1a970:	4621      	mov	r1, r4
   1a972:	f00f fd7b 	bl	2a46c <l2cap_chan_recv>
}
   1a976:	b003      	add	sp, #12
   1a978:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Too small L2CAP PDU received");
   1a97a:	2006      	movs	r0, #6
   1a97c:	f7f9 f9c4 	bl	13d08 <z_log_msg_alloc>
   1a980:	2200      	movs	r2, #0
   1a982:	f36f 0200 	bfc	r2, #0, #1
   1a986:	f36f 0241 	bfc	r2, #1, #1
   1a98a:	f36f 0282 	bfc	r2, #2, #1
   1a98e:	f36f 02c5 	bfc	r2, #3, #3
   1a992:	2301      	movs	r3, #1
   1a994:	f363 1288 	bfi	r2, r3, #6, #3
   1a998:	2308      	movs	r3, #8
   1a99a:	f363 2252 	bfi	r2, r3, #9, #10
   1a99e:	f36f 42de 	bfc	r2, #19, #12
   1a9a2:	f36f 72df 	bfc	r2, #31, #1
   1a9a6:	4605      	mov	r5, r0
   1a9a8:	b188      	cbz	r0, 1a9ce <bt_l2cap_recv+0x86>
   1a9aa:	f110 0310 	adds.w	r3, r0, #16
   1a9ae:	d001      	beq.n	1a9b4 <bt_l2cap_recv+0x6c>
   1a9b0:	4925      	ldr	r1, [pc, #148]	; (1aa48 <bt_l2cap_recv+0x100>)
   1a9b2:	6141      	str	r1, [r0, #20]
   1a9b4:	b15b      	cbz	r3, 1a9ce <bt_l2cap_recv+0x86>
   1a9b6:	2302      	movs	r3, #2
   1a9b8:	f88d 3004 	strb.w	r3, [sp, #4]
   1a9bc:	2300      	movs	r3, #0
   1a9be:	f88d 3005 	strb.w	r3, [sp, #5]
   1a9c2:	f88d 3006 	strb.w	r3, [sp, #6]
   1a9c6:	f88d 3007 	strb.w	r3, [sp, #7]
   1a9ca:	9801      	ldr	r0, [sp, #4]
   1a9cc:	6128      	str	r0, [r5, #16]
   1a9ce:	2300      	movs	r3, #0
   1a9d0:	491e      	ldr	r1, [pc, #120]	; (1aa4c <bt_l2cap_recv+0x104>)
   1a9d2:	4628      	mov	r0, r5
   1a9d4:	f00e fc01 	bl	291da <z_log_msg_finalize>
		net_buf_unref(buf);
   1a9d8:	4620      	mov	r0, r4
   1a9da:	f011 fe0a 	bl	2c5f2 <net_buf_unref>
		return;
   1a9de:	e7ca      	b.n	1a976 <bt_l2cap_recv+0x2e>
		LOG_WRN("Ignoring data for unknown channel ID 0x%04x", cid);
   1a9e0:	2008      	movs	r0, #8
   1a9e2:	f7f9 f991 	bl	13d08 <z_log_msg_alloc>
   1a9e6:	2200      	movs	r2, #0
   1a9e8:	f36f 0200 	bfc	r2, #0, #1
   1a9ec:	f36f 0241 	bfc	r2, #1, #1
   1a9f0:	f36f 0282 	bfc	r2, #2, #1
   1a9f4:	f36f 02c5 	bfc	r2, #3, #3
   1a9f8:	2302      	movs	r3, #2
   1a9fa:	f363 1288 	bfi	r2, r3, #6, #3
   1a9fe:	230c      	movs	r3, #12
   1aa00:	f363 2252 	bfi	r2, r3, #9, #10
   1aa04:	f36f 42de 	bfc	r2, #19, #12
   1aa08:	f36f 72df 	bfc	r2, #31, #1
   1aa0c:	4605      	mov	r5, r0
   1aa0e:	b190      	cbz	r0, 1aa36 <bt_l2cap_recv+0xee>
   1aa10:	f110 0310 	adds.w	r3, r0, #16
   1aa14:	d002      	beq.n	1aa1c <bt_l2cap_recv+0xd4>
   1aa16:	490e      	ldr	r1, [pc, #56]	; (1aa50 <bt_l2cap_recv+0x108>)
   1aa18:	6141      	str	r1, [r0, #20]
   1aa1a:	6187      	str	r7, [r0, #24]
   1aa1c:	b15b      	cbz	r3, 1aa36 <bt_l2cap_recv+0xee>
   1aa1e:	2303      	movs	r3, #3
   1aa20:	f88d 3004 	strb.w	r3, [sp, #4]
   1aa24:	2300      	movs	r3, #0
   1aa26:	f88d 3005 	strb.w	r3, [sp, #5]
   1aa2a:	f88d 3006 	strb.w	r3, [sp, #6]
   1aa2e:	f88d 3007 	strb.w	r3, [sp, #7]
   1aa32:	9801      	ldr	r0, [sp, #4]
   1aa34:	6128      	str	r0, [r5, #16]
   1aa36:	2300      	movs	r3, #0
   1aa38:	4904      	ldr	r1, [pc, #16]	; (1aa4c <bt_l2cap_recv+0x104>)
   1aa3a:	4628      	mov	r0, r5
   1aa3c:	f00e fbcd 	bl	291da <z_log_msg_finalize>
		net_buf_unref(buf);
   1aa40:	4620      	mov	r0, r4
   1aa42:	f011 fdd6 	bl	2c5f2 <net_buf_unref>
		return;
   1aa46:	e796      	b.n	1a976 <bt_l2cap_recv+0x2e>
   1aa48:	00032eb4 	.word	0x00032eb4
   1aa4c:	00031438 	.word	0x00031438
   1aa50:	00032ed4 	.word	0x00032ed4

0001aa54 <att_op_get_type>:
#endif /* CONFIG_BT_GATT_CLIENT */
};

static att_type_t att_op_get_type(uint8_t op)
{
	switch (op) {
   1aa54:	2852      	cmp	r0, #82	; 0x52
   1aa56:	d833      	bhi.n	1aac0 <att_op_get_type+0x6c>
   1aa58:	281b      	cmp	r0, #27
   1aa5a:	d321      	bcc.n	1aaa0 <att_op_get_type+0x4c>
   1aa5c:	f1a0 031b 	sub.w	r3, r0, #27
   1aa60:	2b37      	cmp	r3, #55	; 0x37
   1aa62:	d82f      	bhi.n	1aac4 <att_op_get_type+0x70>
   1aa64:	e8df f003 	tbb	[pc, r3]
   1aa68:	3b392e37 	.word	0x3b392e37
   1aa6c:	2e352a2e 	.word	0x2e352a2e
   1aa70:	2e2e2e37 	.word	0x2e2e2e37
   1aa74:	2e2e2e2e 	.word	0x2e2e2e2e
   1aa78:	2e2e2e2e 	.word	0x2e2e2e2e
   1aa7c:	2e2e2e2e 	.word	0x2e2e2e2e
   1aa80:	2e2e2e2e 	.word	0x2e2e2e2e
   1aa84:	2e2e2e2e 	.word	0x2e2e2e2e
   1aa88:	2e2e2e2e 	.word	0x2e2e2e2e
   1aa8c:	2e2e2e2e 	.word	0x2e2e2e2e
   1aa90:	2e2e2e2e 	.word	0x2e2e2e2e
   1aa94:	2e2e2e2e 	.word	0x2e2e2e2e
   1aa98:	2e2e2e2e 	.word	0x2e2e2e2e
   1aa9c:	332e2e2e 	.word	0x332e2e2e
   1aaa0:	2819      	cmp	r0, #25
   1aaa2:	d80f      	bhi.n	1aac4 <att_op_get_type+0x70>
   1aaa4:	b243      	sxtb	r3, r0
   1aaa6:	b16b      	cbz	r3, 1aac4 <att_op_get_type+0x70>
   1aaa8:	2301      	movs	r3, #1
   1aaaa:	4083      	lsls	r3, r0
   1aaac:	4a10      	ldr	r2, [pc, #64]	; (1aaf0 <att_op_get_type+0x9c>)
   1aaae:	401a      	ands	r2, r3
   1aab0:	b9ba      	cbnz	r2, 1aae2 <att_op_get_type+0x8e>
   1aab2:	4a10      	ldr	r2, [pc, #64]	; (1aaf4 <att_op_get_type+0xa0>)
   1aab4:	401a      	ands	r2, r3
   1aab6:	b12a      	cbz	r2, 1aac4 <att_op_get_type+0x70>
   1aab8:	2001      	movs	r0, #1
   1aaba:	4770      	bx	lr
   1aabc:	2001      	movs	r0, #1
   1aabe:	4770      	bx	lr
   1aac0:	28d2      	cmp	r0, #210	; 0xd2
   1aac2:	d010      	beq.n	1aae6 <att_op_get_type+0x92>
		return ATT_NOTIFICATION;
	case BT_ATT_OP_INDICATE:
		return ATT_INDICATION;
	}

	if (op & ATT_CMD_MASK) {
   1aac4:	f010 0f40 	tst.w	r0, #64	; 0x40
   1aac8:	d10f      	bne.n	1aaea <att_op_get_type+0x96>
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
   1aaca:	2006      	movs	r0, #6
   1aacc:	4770      	bx	lr
		return ATT_COMMAND;
   1aace:	2000      	movs	r0, #0
   1aad0:	4770      	bx	lr
		return ATT_RESPONSE;
   1aad2:	2002      	movs	r0, #2
   1aad4:	4770      	bx	lr
		return ATT_NOTIFICATION;
   1aad6:	2003      	movs	r0, #3
   1aad8:	4770      	bx	lr
		return ATT_INDICATION;
   1aada:	2005      	movs	r0, #5
   1aadc:	4770      	bx	lr
		return ATT_CONFIRMATION;
   1aade:	2004      	movs	r0, #4
   1aae0:	4770      	bx	lr
		return ATT_RESPONSE;
   1aae2:	2002      	movs	r0, #2
   1aae4:	4770      	bx	lr
		return ATT_COMMAND;
   1aae6:	2000      	movs	r0, #0
   1aae8:	4770      	bx	lr
		return ATT_COMMAND;
   1aaea:	2000      	movs	r0, #0
}
   1aaec:	4770      	bx	lr
   1aaee:	bf00      	nop
   1aaf0:	028aaaaa 	.word	0x028aaaaa
   1aaf4:	01455554 	.word	0x01455554

0001aaf8 <att_cb>:
{
   1aaf8:	b508      	push	{r3, lr}
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   1aafa:	68c3      	ldr	r3, [r0, #12]
   1aafc:	7818      	ldrb	r0, [r3, #0]
   1aafe:	f7ff ffa9 	bl	1aa54 <att_op_get_type>
	switch (op_type) {
   1ab02:	2805      	cmp	r0, #5
   1ab04:	d80a      	bhi.n	1ab1c <att_cb+0x24>
   1ab06:	e8df f000 	tbb	[pc, r0]
   1ab0a:	0507      	.short	0x0507
   1ab0c:	050b0703 	.word	0x050b0703
   1ab10:	4804      	ldr	r0, [pc, #16]	; (1ab24 <att_cb+0x2c>)
   1ab12:	e000      	b.n	1ab16 <att_cb+0x1e>
		return att_req_sent;
   1ab14:	4804      	ldr	r0, [pc, #16]	; (1ab28 <att_cb+0x30>)
}
   1ab16:	bd08      	pop	{r3, pc}
		return att_tx_complete;
   1ab18:	4804      	ldr	r0, [pc, #16]	; (1ab2c <att_cb+0x34>)
   1ab1a:	e7fc      	b.n	1ab16 <att_cb+0x1e>
	return att_unknown;
   1ab1c:	4804      	ldr	r0, [pc, #16]	; (1ab30 <att_cb+0x38>)
   1ab1e:	e7fa      	b.n	1ab16 <att_cb+0x1e>
		return att_cfm_sent;
   1ab20:	4804      	ldr	r0, [pc, #16]	; (1ab34 <att_cb+0x3c>)
   1ab22:	e7f8      	b.n	1ab16 <att_cb+0x1e>
   1ab24:	0002aecd 	.word	0x0002aecd
   1ab28:	0002ae95 	.word	0x0002ae95
   1ab2c:	0002ae79 	.word	0x0002ae79
   1ab30:	0002ae5d 	.word	0x0002ae5d
   1ab34:	0002aeb1 	.word	0x0002aeb1

0001ab38 <tx_meta_data_alloc>:
{
   1ab38:	b508      	push	{r3, lr}
   1ab3a:	4602      	mov	r2, r0
   1ab3c:	460b      	mov	r3, r1
	return z_impl_k_queue_get(queue, timeout);
   1ab3e:	4802      	ldr	r0, [pc, #8]	; (1ab48 <tx_meta_data_alloc+0x10>)
   1ab40:	f00b fcfa 	bl	26538 <z_impl_k_queue_get>
}
   1ab44:	bd08      	pop	{r3, pc}
   1ab46:	bf00      	nop
   1ab48:	20000b00 	.word	0x20000b00

0001ab4c <att_get>:

	return 0;
}

static struct bt_att *att_get(struct bt_conn *conn)
{
   1ab4c:	b510      	push	{r4, lr}
   1ab4e:	b082      	sub	sp, #8
	struct bt_l2cap_chan *chan;
	struct bt_att_chan *att_chan;

	if (conn->state != BT_CONN_CONNECTED) {
   1ab50:	7a83      	ldrb	r3, [r0, #10]
   1ab52:	2b07      	cmp	r3, #7
   1ab54:	d109      	bne.n	1ab6a <att_get+0x1e>
		LOG_WRN("Not connected");
		return NULL;
	}

	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   1ab56:	2104      	movs	r1, #4
   1ab58:	f00f fd1b 	bl	2a592 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1ab5c:	4604      	mov	r4, r0
   1ab5e:	b3a8      	cbz	r0, 1abcc <att_get+0x80>

	att_chan = ATT_CHAN(chan);
	__ASSERT(atomic_test_bit(att_chan->flags, ATT_CONNECTED),
		 "ATT channel not connected");

	return att_chan->att;
   1ab60:	f850 4c04 	ldr.w	r4, [r0, #-4]
}
   1ab64:	4620      	mov	r0, r4
   1ab66:	b002      	add	sp, #8
   1ab68:	bd10      	pop	{r4, pc}
		LOG_WRN("Not connected");
   1ab6a:	2006      	movs	r0, #6
   1ab6c:	f7f9 f8cc 	bl	13d08 <z_log_msg_alloc>
   1ab70:	2200      	movs	r2, #0
   1ab72:	f36f 0200 	bfc	r2, #0, #1
   1ab76:	f36f 0241 	bfc	r2, #1, #1
   1ab7a:	f36f 0282 	bfc	r2, #2, #1
   1ab7e:	f36f 02c5 	bfc	r2, #3, #3
   1ab82:	2302      	movs	r3, #2
   1ab84:	f363 1288 	bfi	r2, r3, #6, #3
   1ab88:	2308      	movs	r3, #8
   1ab8a:	f363 2252 	bfi	r2, r3, #9, #10
   1ab8e:	f36f 42de 	bfc	r2, #19, #12
   1ab92:	f36f 72df 	bfc	r2, #31, #1
   1ab96:	4604      	mov	r4, r0
   1ab98:	b188      	cbz	r0, 1abbe <att_get+0x72>
   1ab9a:	f110 0310 	adds.w	r3, r0, #16
   1ab9e:	d001      	beq.n	1aba4 <att_get+0x58>
   1aba0:	4923      	ldr	r1, [pc, #140]	; (1ac30 <att_get+0xe4>)
   1aba2:	6141      	str	r1, [r0, #20]
   1aba4:	b15b      	cbz	r3, 1abbe <att_get+0x72>
   1aba6:	2302      	movs	r3, #2
   1aba8:	f88d 3004 	strb.w	r3, [sp, #4]
   1abac:	2300      	movs	r3, #0
   1abae:	f88d 3005 	strb.w	r3, [sp, #5]
   1abb2:	f88d 3006 	strb.w	r3, [sp, #6]
   1abb6:	f88d 3007 	strb.w	r3, [sp, #7]
   1abba:	9801      	ldr	r0, [sp, #4]
   1abbc:	6120      	str	r0, [r4, #16]
   1abbe:	2300      	movs	r3, #0
   1abc0:	491c      	ldr	r1, [pc, #112]	; (1ac34 <att_get+0xe8>)
   1abc2:	4620      	mov	r0, r4
   1abc4:	f00e fb09 	bl	291da <z_log_msg_finalize>
		return NULL;
   1abc8:	2400      	movs	r4, #0
   1abca:	e7cb      	b.n	1ab64 <att_get+0x18>
		LOG_ERR("Unable to find ATT channel");
   1abcc:	2006      	movs	r0, #6
   1abce:	f7f9 f89b 	bl	13d08 <z_log_msg_alloc>
   1abd2:	2200      	movs	r2, #0
   1abd4:	f36f 0200 	bfc	r2, #0, #1
   1abd8:	f36f 0241 	bfc	r2, #1, #1
   1abdc:	f36f 0282 	bfc	r2, #2, #1
   1abe0:	f36f 02c5 	bfc	r2, #3, #3
   1abe4:	2301      	movs	r3, #1
   1abe6:	f363 1288 	bfi	r2, r3, #6, #3
   1abea:	2308      	movs	r3, #8
   1abec:	f363 2252 	bfi	r2, r3, #9, #10
   1abf0:	f36f 42de 	bfc	r2, #19, #12
   1abf4:	f36f 72df 	bfc	r2, #31, #1
   1abf8:	4684      	mov	ip, r0
   1abfa:	b190      	cbz	r0, 1ac22 <att_get+0xd6>
   1abfc:	f110 0310 	adds.w	r3, r0, #16
   1ac00:	d001      	beq.n	1ac06 <att_get+0xba>
   1ac02:	490d      	ldr	r1, [pc, #52]	; (1ac38 <att_get+0xec>)
   1ac04:	6141      	str	r1, [r0, #20]
   1ac06:	b163      	cbz	r3, 1ac22 <att_get+0xd6>
   1ac08:	2302      	movs	r3, #2
   1ac0a:	f88d 3004 	strb.w	r3, [sp, #4]
   1ac0e:	2300      	movs	r3, #0
   1ac10:	f88d 3005 	strb.w	r3, [sp, #5]
   1ac14:	f88d 3006 	strb.w	r3, [sp, #6]
   1ac18:	f88d 3007 	strb.w	r3, [sp, #7]
   1ac1c:	9801      	ldr	r0, [sp, #4]
   1ac1e:	f8cc 0010 	str.w	r0, [ip, #16]
   1ac22:	2300      	movs	r3, #0
   1ac24:	4903      	ldr	r1, [pc, #12]	; (1ac34 <att_get+0xe8>)
   1ac26:	4660      	mov	r0, ip
   1ac28:	f00e fad7 	bl	291da <z_log_msg_finalize>
		return NULL;
   1ac2c:	e79a      	b.n	1ab64 <att_get+0x18>
   1ac2e:	bf00      	nop
   1ac30:	00032e14 	.word	0x00032e14
   1ac34:	00031410 	.word	0x00031410
   1ac38:	00032f34 	.word	0x00032f34

0001ac3c <att_chan_new>:
	att_chan_mtu_updated(att_chan);
}
#endif /* CONFIG_BT_EATT */

static struct bt_att_chan *att_chan_new(struct bt_att *att, atomic_val_t flags)
{
   1ac3c:	b570      	push	{r4, r5, r6, lr}
   1ac3e:	b082      	sub	sp, #8
   1ac40:	4605      	mov	r5, r0
   1ac42:	460e      	mov	r6, r1
	return list->head;
   1ac44:	6a43      	ldr	r3, [r0, #36]	; 0x24
		.reconfigured = bt_att_reconfigured,
	#endif /* CONFIG_BT_EATT */
	};
	struct bt_att_chan *chan;

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1ac46:	b103      	cbz	r3, 1ac4a <att_chan_new+0xe>
   1ac48:	3be0      	subs	r3, #224	; 0xe0
   1ac4a:	9301      	str	r3, [sp, #4]
	int quota = 0;
   1ac4c:	2200      	movs	r2, #0
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1ac4e:	e002      	b.n	1ac56 <att_chan_new+0x1a>
		if (chan->att == att) {
			quota++;
   1ac50:	3201      	adds	r2, #1
   1ac52:	e005      	b.n	1ac60 <att_chan_new+0x24>
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1ac54:	9301      	str	r3, [sp, #4]
   1ac56:	9c01      	ldr	r4, [sp, #4]
   1ac58:	b16c      	cbz	r4, 1ac76 <att_chan_new+0x3a>
		if (chan->att == att) {
   1ac5a:	6823      	ldr	r3, [r4, #0]
   1ac5c:	42ab      	cmp	r3, r5
   1ac5e:	d0f7      	beq.n	1ac50 <att_chan_new+0x14>
		}

		if (quota == ATT_CHAN_MAX) {
   1ac60:	2a01      	cmp	r2, #1
   1ac62:	d062      	beq.n	1ad2a <att_chan_new+0xee>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ac64:	f114 03e0 	adds.w	r3, r4, #224	; 0xe0
   1ac68:	d0f4      	beq.n	1ac54 <att_chan_new+0x18>
	return node->next;
   1ac6a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1ac6e:	2b00      	cmp	r3, #0
   1ac70:	d0f0      	beq.n	1ac54 <att_chan_new+0x18>
   1ac72:	3be0      	subs	r3, #224	; 0xe0
   1ac74:	e7ee      	b.n	1ac54 <att_chan_new+0x18>
			LOG_DBG("Maximum number of channels reached: %d", quota);
			return NULL;
		}
	}

	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   1ac76:	2200      	movs	r2, #0
   1ac78:	2300      	movs	r3, #0
   1ac7a:	a901      	add	r1, sp, #4
   1ac7c:	482c      	ldr	r0, [pc, #176]	; (1ad30 <att_chan_new+0xf4>)
   1ac7e:	f00b fa59 	bl	26134 <k_mem_slab_alloc>
   1ac82:	bb00      	cbnz	r0, 1acc6 <att_chan_new+0x8a>
		LOG_WRN("No available ATT channel for conn %p", att->conn);
		return NULL;
	}

	(void)memset(chan, 0, sizeof(*chan));
   1ac84:	22e8      	movs	r2, #232	; 0xe8
   1ac86:	2100      	movs	r1, #0
   1ac88:	9801      	ldr	r0, [sp, #4]
   1ac8a:	f00e ffc1 	bl	29c10 <memset>
	chan->chan.chan.ops = &ops;
   1ac8e:	9801      	ldr	r0, [sp, #4]
   1ac90:	4b28      	ldr	r3, [pc, #160]	; (1ad34 <att_chan_new+0xf8>)
   1ac92:	6083      	str	r3, [r0, #8]
	k_fifo_init(&chan->tx_queue);
   1ac94:	3098      	adds	r0, #152	; 0x98
	z_impl_k_queue_init(queue);
   1ac96:	f015 fbe1 	bl	3045c <z_impl_k_queue_init>
	atomic_set(chan->flags, flags);
   1ac9a:	9b01      	ldr	r3, [sp, #4]
   1ac9c:	3390      	adds	r3, #144	; 0x90
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1ac9e:	f3bf 8f5b 	dmb	ish
   1aca2:	e853 2f00 	ldrex	r2, [r3]
   1aca6:	e843 6100 	strex	r1, r6, [r3]
   1acaa:	2900      	cmp	r1, #0
   1acac:	d1f9      	bne.n	1aca2 <att_chan_new+0x66>
   1acae:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   1acb2:	9b01      	ldr	r3, [sp, #4]
   1acb4:	601d      	str	r5, [r3, #0]
	att_chan_attach(att, chan);
   1acb6:	9901      	ldr	r1, [sp, #4]
   1acb8:	4628      	mov	r0, r5
   1acba:	f00f fd1a 	bl	2a6f2 <att_chan_attach>

	return chan;
   1acbe:	9c01      	ldr	r4, [sp, #4]
}
   1acc0:	4620      	mov	r0, r4
   1acc2:	b002      	add	sp, #8
   1acc4:	bd70      	pop	{r4, r5, r6, pc}
		LOG_WRN("No available ATT channel for conn %p", att->conn);
   1acc6:	682e      	ldr	r6, [r5, #0]
   1acc8:	2008      	movs	r0, #8
   1acca:	f7f9 f81d 	bl	13d08 <z_log_msg_alloc>
   1acce:	2200      	movs	r2, #0
   1acd0:	f36f 0200 	bfc	r2, #0, #1
   1acd4:	f36f 0241 	bfc	r2, #1, #1
   1acd8:	f36f 0282 	bfc	r2, #2, #1
   1acdc:	f36f 02c5 	bfc	r2, #3, #3
   1ace0:	2302      	movs	r3, #2
   1ace2:	f363 1288 	bfi	r2, r3, #6, #3
   1ace6:	230c      	movs	r3, #12
   1ace8:	f363 2252 	bfi	r2, r3, #9, #10
   1acec:	f36f 42de 	bfc	r2, #19, #12
   1acf0:	f36f 72df 	bfc	r2, #31, #1
   1acf4:	4605      	mov	r5, r0
   1acf6:	b190      	cbz	r0, 1ad1e <att_chan_new+0xe2>
   1acf8:	f110 0310 	adds.w	r3, r0, #16
   1acfc:	d002      	beq.n	1ad04 <att_chan_new+0xc8>
   1acfe:	490e      	ldr	r1, [pc, #56]	; (1ad38 <att_chan_new+0xfc>)
   1ad00:	6141      	str	r1, [r0, #20]
   1ad02:	6186      	str	r6, [r0, #24]
   1ad04:	b15b      	cbz	r3, 1ad1e <att_chan_new+0xe2>
   1ad06:	2303      	movs	r3, #3
   1ad08:	f88d 3000 	strb.w	r3, [sp]
   1ad0c:	2300      	movs	r3, #0
   1ad0e:	f88d 3001 	strb.w	r3, [sp, #1]
   1ad12:	f88d 3002 	strb.w	r3, [sp, #2]
   1ad16:	f88d 3003 	strb.w	r3, [sp, #3]
   1ad1a:	9800      	ldr	r0, [sp, #0]
   1ad1c:	6128      	str	r0, [r5, #16]
   1ad1e:	2300      	movs	r3, #0
   1ad20:	4906      	ldr	r1, [pc, #24]	; (1ad3c <att_chan_new+0x100>)
   1ad22:	4628      	mov	r0, r5
   1ad24:	f00e fa59 	bl	291da <z_log_msg_finalize>
		return NULL;
   1ad28:	e7ca      	b.n	1acc0 <att_chan_new+0x84>
			return NULL;
   1ad2a:	2400      	movs	r4, #0
   1ad2c:	e7c8      	b.n	1acc0 <att_chan_new+0x84>
   1ad2e:	bf00      	nop
   1ad30:	20000a50 	.word	0x20000a50
   1ad34:	200006a4 	.word	0x200006a4
   1ad38:	00032f50 	.word	0x00032f50
   1ad3c:	00031410 	.word	0x00031410

0001ad40 <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   1ad40:	b570      	push	{r4, r5, r6, lr}
   1ad42:	b082      	sub	sp, #8
   1ad44:	4606      	mov	r6, r0
   1ad46:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan;

	LOG_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   1ad48:	2200      	movs	r2, #0
   1ad4a:	2300      	movs	r3, #0
   1ad4c:	a901      	add	r1, sp, #4
   1ad4e:	482a      	ldr	r0, [pc, #168]	; (1adf8 <bt_att_accept+0xb8>)
   1ad50:	f00b f9f0 	bl	26134 <k_mem_slab_alloc>
   1ad54:	b9d0      	cbnz	r0, 1ad8c <bt_att_accept+0x4c>
   1ad56:	4605      	mov	r5, r0
	return z_impl_z_current_get();
   1ad58:	f00c f9e8 	bl	2712c <z_impl_z_current_get>
		LOG_ERR("No available ATT context for conn %p", conn);
		return -ENOMEM;
	}

	att_handle_rsp_thread = k_current_get();
   1ad5c:	4b27      	ldr	r3, [pc, #156]	; (1adfc <bt_att_accept+0xbc>)
   1ad5e:	6018      	str	r0, [r3, #0]

	(void)memset(att, 0, sizeof(*att));
   1ad60:	222c      	movs	r2, #44	; 0x2c
   1ad62:	2100      	movs	r1, #0
   1ad64:	9801      	ldr	r0, [sp, #4]
   1ad66:	f00e ff53 	bl	29c10 <memset>
	att->conn = conn;
   1ad6a:	9b01      	ldr	r3, [sp, #4]
   1ad6c:	601e      	str	r6, [r3, #0]
	sys_slist_init(&att->reqs);
   1ad6e:	9801      	ldr	r0, [sp, #4]
	list->head = NULL;
   1ad70:	2100      	movs	r1, #0
   1ad72:	6041      	str	r1, [r0, #4]
	list->tail = NULL;
   1ad74:	6081      	str	r1, [r0, #8]
	list->head = NULL;
   1ad76:	6241      	str	r1, [r0, #36]	; 0x24
	list->tail = NULL;
   1ad78:	6281      	str	r1, [r0, #40]	; 0x28
#if defined(CONFIG_BT_EATT)
	k_work_init_delayable(&att->eatt.connection_work,
			      att_enhanced_connection_work_handler);
#endif /* CONFIG_BT_EATT */

	chan = att_chan_new(att, 0);
   1ad7a:	f7ff ff5f 	bl	1ac3c <att_chan_new>
	if (!chan) {
   1ad7e:	4603      	mov	r3, r0
   1ad80:	b3b8      	cbz	r0, 1adf2 <bt_att_accept+0xb2>
		return -ENOMEM;
	}

	*ch = &chan->chan.chan;
   1ad82:	3304      	adds	r3, #4
   1ad84:	6023      	str	r3, [r4, #0]

	return 0;
}
   1ad86:	4628      	mov	r0, r5
   1ad88:	b002      	add	sp, #8
   1ad8a:	bd70      	pop	{r4, r5, r6, pc}
		LOG_ERR("No available ATT context for conn %p", conn);
   1ad8c:	2008      	movs	r0, #8
   1ad8e:	f7f8 ffbb 	bl	13d08 <z_log_msg_alloc>
   1ad92:	2200      	movs	r2, #0
   1ad94:	f36f 0200 	bfc	r2, #0, #1
   1ad98:	f36f 0241 	bfc	r2, #1, #1
   1ad9c:	f36f 0282 	bfc	r2, #2, #1
   1ada0:	f36f 02c5 	bfc	r2, #3, #3
   1ada4:	2301      	movs	r3, #1
   1ada6:	f363 1288 	bfi	r2, r3, #6, #3
   1adaa:	230c      	movs	r3, #12
   1adac:	f363 2252 	bfi	r2, r3, #9, #10
   1adb0:	f36f 42de 	bfc	r2, #19, #12
   1adb4:	f36f 72df 	bfc	r2, #31, #1
   1adb8:	4604      	mov	r4, r0
   1adba:	b190      	cbz	r0, 1ade2 <bt_att_accept+0xa2>
   1adbc:	f110 0310 	adds.w	r3, r0, #16
   1adc0:	d002      	beq.n	1adc8 <bt_att_accept+0x88>
   1adc2:	490f      	ldr	r1, [pc, #60]	; (1ae00 <bt_att_accept+0xc0>)
   1adc4:	6141      	str	r1, [r0, #20]
   1adc6:	6186      	str	r6, [r0, #24]
   1adc8:	b15b      	cbz	r3, 1ade2 <bt_att_accept+0xa2>
   1adca:	2303      	movs	r3, #3
   1adcc:	f88d 3000 	strb.w	r3, [sp]
   1add0:	2300      	movs	r3, #0
   1add2:	f88d 3001 	strb.w	r3, [sp, #1]
   1add6:	f88d 3002 	strb.w	r3, [sp, #2]
   1adda:	f88d 3003 	strb.w	r3, [sp, #3]
   1adde:	9800      	ldr	r0, [sp, #0]
   1ade0:	6120      	str	r0, [r4, #16]
   1ade2:	2300      	movs	r3, #0
   1ade4:	4907      	ldr	r1, [pc, #28]	; (1ae04 <bt_att_accept+0xc4>)
   1ade6:	4620      	mov	r0, r4
   1ade8:	f00e f9f7 	bl	291da <z_log_msg_finalize>
		return -ENOMEM;
   1adec:	f06f 050b 	mvn.w	r5, #11
   1adf0:	e7c9      	b.n	1ad86 <bt_att_accept+0x46>
		return -ENOMEM;
   1adf2:	f06f 050b 	mvn.w	r5, #11
   1adf6:	e7c6      	b.n	1ad86 <bt_att_accept+0x46>
   1adf8:	20000a34 	.word	0x20000a34
   1adfc:	200081dc 	.word	0x200081dc
   1ae00:	00032f78 	.word	0x00032f78
   1ae04:	00031410 	.word	0x00031410

0001ae08 <bt_att_released>:
{
   1ae08:	b500      	push	{lr}
   1ae0a:	b083      	sub	sp, #12
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1ae0c:	3804      	subs	r0, #4
   1ae0e:	9001      	str	r0, [sp, #4]
	k_mem_slab_free(&chan_slab, (void **)&chan);
   1ae10:	a901      	add	r1, sp, #4
   1ae12:	4803      	ldr	r0, [pc, #12]	; (1ae20 <bt_att_released+0x18>)
   1ae14:	f015 f9f1 	bl	301fa <k_mem_slab_free>
}
   1ae18:	b003      	add	sp, #12
   1ae1a:	f85d fb04 	ldr.w	pc, [sp], #4
   1ae1e:	bf00      	nop
   1ae20:	20000a50 	.word	0x20000a50

0001ae24 <tx_meta_data_free>:
{
   1ae24:	b510      	push	{r4, lr}
   1ae26:	4604      	mov	r4, r0
	(void)memset(data, 0, sizeof(*data));
   1ae28:	2214      	movs	r2, #20
   1ae2a:	2100      	movs	r1, #0
   1ae2c:	f00e fef0 	bl	29c10 <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
   1ae30:	4621      	mov	r1, r4
   1ae32:	4802      	ldr	r0, [pc, #8]	; (1ae3c <tx_meta_data_free+0x18>)
   1ae34:	f015 fb1e 	bl	30474 <k_queue_append>
}
   1ae38:	bd10      	pop	{r4, pc}
   1ae3a:	bf00      	nop
   1ae3c:	20000b00 	.word	0x20000b00

0001ae40 <chan_send>:
{
   1ae40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ae44:	b085      	sub	sp, #20
   1ae46:	4605      	mov	r5, r0
   1ae48:	460c      	mov	r4, r1
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   1ae4a:	698f      	ldr	r7, [r1, #24]
	hdr = (void *)buf->data;
   1ae4c:	68ce      	ldr	r6, [r1, #12]
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   1ae4e:	2102      	movs	r1, #2
   1ae50:	3090      	adds	r0, #144	; 0x90
   1ae52:	f00f fc62 	bl	2a71a <atomic_test_bit>
   1ae56:	2800      	cmp	r0, #0
   1ae58:	d064      	beq.n	1af24 <chan_send+0xe4>
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   1ae5a:	7833      	ldrb	r3, [r6, #0]
   1ae5c:	2bd2      	cmp	r3, #210	; 0xd2
   1ae5e:	d023      	beq.n	1aea8 <chan_send+0x68>
	state->offset = net_buf_simple_headroom(buf);
   1ae60:	f104 000c 	add.w	r0, r4, #12
   1ae64:	f011 fc4e 	bl	2c704 <net_buf_simple_headroom>
   1ae68:	4606      	mov	r6, r0
   1ae6a:	f8ad 000c 	strh.w	r0, [sp, #12]
	state->len = buf->len;
   1ae6e:	f8b4 8010 	ldrh.w	r8, [r4, #16]
   1ae72:	f8ad 800e 	strh.w	r8, [sp, #14]
	data->att_chan = chan;
   1ae76:	603d      	str	r5, [r7, #0]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1ae78:	682b      	ldr	r3, [r5, #0]
   1ae7a:	681d      	ldr	r5, [r3, #0]
   1ae7c:	4620      	mov	r0, r4
   1ae7e:	f7ff fe3b 	bl	1aaf8 <att_cb>
   1ae82:	4603      	mov	r3, r0
   1ae84:	9700      	str	r7, [sp, #0]
   1ae86:	4622      	mov	r2, r4
   1ae88:	2104      	movs	r1, #4
   1ae8a:	4628      	mov	r0, r5
   1ae8c:	f00f fb3a 	bl	2a504 <bt_l2cap_send_cb>
	if (err) {
   1ae90:	4681      	mov	r9, r0
   1ae92:	b128      	cbz	r0, 1aea0 <chan_send+0x60>
	buf->data = buf->__buf + state->offset;
   1ae94:	6963      	ldr	r3, [r4, #20]
   1ae96:	fa13 f686 	uxtah	r6, r3, r6
   1ae9a:	60e6      	str	r6, [r4, #12]
	buf->len = state->len;
   1ae9c:	f8a4 8010 	strh.w	r8, [r4, #16]
}
   1aea0:	4648      	mov	r0, r9
   1aea2:	b005      	add	sp, #20
   1aea4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = bt_smp_sign(chan->att->conn, buf);
   1aea8:	682b      	ldr	r3, [r5, #0]
   1aeaa:	4621      	mov	r1, r4
   1aeac:	6818      	ldr	r0, [r3, #0]
   1aeae:	f011 f91a 	bl	2c0e6 <bt_smp_sign>
		if (err) {
   1aeb2:	4681      	mov	r9, r0
   1aeb4:	2800      	cmp	r0, #0
   1aeb6:	d0d3      	beq.n	1ae60 <chan_send+0x20>
			LOG_ERR("Error signing data");
   1aeb8:	2006      	movs	r0, #6
   1aeba:	f7f8 ff25 	bl	13d08 <z_log_msg_alloc>
   1aebe:	2200      	movs	r2, #0
   1aec0:	f36f 0200 	bfc	r2, #0, #1
   1aec4:	f36f 0241 	bfc	r2, #1, #1
   1aec8:	f36f 0282 	bfc	r2, #2, #1
   1aecc:	f36f 02c5 	bfc	r2, #3, #3
   1aed0:	2301      	movs	r3, #1
   1aed2:	f363 1288 	bfi	r2, r3, #6, #3
   1aed6:	2308      	movs	r3, #8
   1aed8:	f363 2252 	bfi	r2, r3, #9, #10
   1aedc:	f36f 42de 	bfc	r2, #19, #12
   1aee0:	f36f 72df 	bfc	r2, #31, #1
   1aee4:	4605      	mov	r5, r0
   1aee6:	b188      	cbz	r0, 1af0c <chan_send+0xcc>
   1aee8:	f110 0310 	adds.w	r3, r0, #16
   1aeec:	d001      	beq.n	1aef2 <chan_send+0xb2>
   1aeee:	490f      	ldr	r1, [pc, #60]	; (1af2c <chan_send+0xec>)
   1aef0:	6141      	str	r1, [r0, #20]
   1aef2:	b15b      	cbz	r3, 1af0c <chan_send+0xcc>
   1aef4:	2302      	movs	r3, #2
   1aef6:	f88d 3008 	strb.w	r3, [sp, #8]
   1aefa:	2300      	movs	r3, #0
   1aefc:	f88d 3009 	strb.w	r3, [sp, #9]
   1af00:	f88d 300a 	strb.w	r3, [sp, #10]
   1af04:	f88d 300b 	strb.w	r3, [sp, #11]
   1af08:	9802      	ldr	r0, [sp, #8]
   1af0a:	6128      	str	r0, [r5, #16]
   1af0c:	2300      	movs	r3, #0
   1af0e:	4908      	ldr	r1, [pc, #32]	; (1af30 <chan_send+0xf0>)
   1af10:	4628      	mov	r0, r5
   1af12:	f00e f962 	bl	291da <z_log_msg_finalize>
			tx_meta_data_free(bt_att_tx_meta_data(buf));
   1af16:	69a0      	ldr	r0, [r4, #24]
   1af18:	f7ff ff84 	bl	1ae24 <tx_meta_data_free>
			net_buf_unref(buf);
   1af1c:	4620      	mov	r0, r4
   1af1e:	f011 fb68 	bl	2c5f2 <net_buf_unref>
			return err;
   1af22:	e7bd      	b.n	1aea0 <chan_send+0x60>
		return -EINVAL;
   1af24:	f06f 0915 	mvn.w	r9, #21
   1af28:	e7ba      	b.n	1aea0 <chan_send+0x60>
   1af2a:	bf00      	nop
   1af2c:	00032fa0 	.word	0x00032fa0
   1af30:	00031410 	.word	0x00031410

0001af34 <read_group_cb>:
{
   1af34:	b5f0      	push	{r4, r5, r6, r7, lr}
   1af36:	b085      	sub	sp, #20
   1af38:	4605      	mov	r5, r0
   1af3a:	460e      	mov	r6, r1
   1af3c:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   1af3e:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1af40:	2300      	movs	r3, #0
   1af42:	f88d 3008 	strb.w	r3, [sp, #8]
   1af46:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1af4a:	f8ad 300a 	strh.w	r3, [sp, #10]
   1af4e:	a902      	add	r1, sp, #8
   1af50:	6800      	ldr	r0, [r0, #0]
   1af52:	f00e feae 	bl	29cb2 <bt_uuid_cmp>
   1af56:	b158      	cbz	r0, 1af70 <read_group_cb+0x3c>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1af58:	2300      	movs	r3, #0
   1af5a:	f88d 300c 	strb.w	r3, [sp, #12]
   1af5e:	f642 0301 	movw	r3, #10241	; 0x2801
   1af62:	f8ad 300e 	strh.w	r3, [sp, #14]
   1af66:	a903      	add	r1, sp, #12
   1af68:	6828      	ldr	r0, [r5, #0]
   1af6a:	f00e fea2 	bl	29cb2 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1af6e:	bb28      	cbnz	r0, 1afbc <read_group_cb+0x88>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1af70:	6861      	ldr	r1, [r4, #4]
   1af72:	6828      	ldr	r0, [r5, #0]
   1af74:	f00e fe9d 	bl	29cb2 <bt_uuid_cmp>
   1af78:	bb40      	cbnz	r0, 1afcc <read_group_cb+0x98>
	if (data->rsp->len &&
   1af7a:	68e3      	ldr	r3, [r4, #12]
   1af7c:	781a      	ldrb	r2, [r3, #0]
   1af7e:	b12a      	cbz	r2, 1af8c <read_group_cb+0x58>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   1af80:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   1af82:	68a1      	ldr	r1, [r4, #8]
   1af84:	8a09      	ldrh	r1, [r1, #16]
   1af86:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   1af88:	4293      	cmp	r3, r2
   1af8a:	db24      	blt.n	1afd6 <read_group_cb+0xa2>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   1af8c:	68a0      	ldr	r0, [r4, #8]
	return net_buf_simple_add(&buf->b, len);
   1af8e:	2104      	movs	r1, #4
   1af90:	300c      	adds	r0, #12
   1af92:	f011 fb75 	bl	2c680 <net_buf_simple_add>
   1af96:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1af98:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1af9a:	6923      	ldr	r3, [r4, #16]
   1af9c:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   1af9e:	9401      	str	r4, [sp, #4]
   1afa0:	4b10      	ldr	r3, [pc, #64]	; (1afe4 <read_group_cb+0xb0>)
   1afa2:	9300      	str	r3, [sp, #0]
   1afa4:	2300      	movs	r3, #0
   1afa6:	68a2      	ldr	r2, [r4, #8]
   1afa8:	4629      	mov	r1, r5
   1afaa:	4638      	mov	r0, r7
   1afac:	f00f fdd8 	bl	2ab60 <att_chan_read>
	if (read < 0) {
   1afb0:	2800      	cmp	r0, #0
   1afb2:	db12      	blt.n	1afda <read_group_cb+0xa6>
	if (!data->group) {
   1afb4:	6923      	ldr	r3, [r4, #16]
   1afb6:	b193      	cbz	r3, 1afde <read_group_cb+0xaa>
	return BT_GATT_ITER_CONTINUE;
   1afb8:	2001      	movs	r0, #1
   1afba:	e00a      	b.n	1afd2 <read_group_cb+0x9e>
		if (data->group &&
   1afbc:	6923      	ldr	r3, [r4, #16]
   1afbe:	b11b      	cbz	r3, 1afc8 <read_group_cb+0x94>
		    handle > sys_le16_to_cpu(data->group->end_handle)) {
   1afc0:	885a      	ldrh	r2, [r3, #2]
		if (data->group &&
   1afc2:	42b2      	cmp	r2, r6
   1afc4:	d200      	bcs.n	1afc8 <read_group_cb+0x94>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1afc6:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   1afc8:	2001      	movs	r0, #1
   1afca:	e002      	b.n	1afd2 <read_group_cb+0x9e>
		data->group = NULL;
   1afcc:	2300      	movs	r3, #0
   1afce:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   1afd0:	2001      	movs	r0, #1
}
   1afd2:	b005      	add	sp, #20
   1afd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ITER_STOP;
   1afd6:	2000      	movs	r0, #0
   1afd8:	e7fb      	b.n	1afd2 <read_group_cb+0x9e>
		return BT_GATT_ITER_STOP;
   1afda:	2000      	movs	r0, #0
   1afdc:	e7f9      	b.n	1afd2 <read_group_cb+0x9e>
		return BT_GATT_ITER_STOP;
   1afde:	2000      	movs	r0, #0
   1afe0:	e7f7      	b.n	1afd2 <read_group_cb+0x9e>
   1afe2:	bf00      	nop
   1afe4:	0002a6c5 	.word	0x0002a6c5

0001afe8 <read_type_cb>:
{
   1afe8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1afec:	b083      	sub	sp, #12
   1afee:	4606      	mov	r6, r0
   1aff0:	4688      	mov	r8, r1
   1aff2:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   1aff4:	6817      	ldr	r7, [r2, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   1aff6:	687d      	ldr	r5, [r7, #4]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1aff8:	6851      	ldr	r1, [r2, #4]
   1affa:	6800      	ldr	r0, [r0, #0]
   1affc:	f00e fe59 	bl	29cb2 <bt_uuid_cmp>
   1b000:	b120      	cbz	r0, 1b00c <read_type_cb+0x24>
		return BT_GATT_ITER_CONTINUE;
   1b002:	2501      	movs	r5, #1
}
   1b004:	4628      	mov	r0, r5
   1b006:	b003      	add	sp, #12
   1b008:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1b00c:	2295      	movs	r2, #149	; 0x95
   1b00e:	4631      	mov	r1, r6
   1b010:	4628      	mov	r0, r5
   1b012:	f010 fe78 	bl	2bd06 <bt_gatt_check_perm>
   1b016:	4605      	mov	r5, r0
   1b018:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1b01a:	b130      	cbz	r0, 1b02a <read_type_cb+0x42>
		if (data->rsp->len) {
   1b01c:	68e3      	ldr	r3, [r4, #12]
   1b01e:	781b      	ldrb	r3, [r3, #0]
   1b020:	b10b      	cbz	r3, 1b026 <read_type_cb+0x3e>
			data->err = 0x00;
   1b022:	2300      	movs	r3, #0
   1b024:	7523      	strb	r3, [r4, #20]
		return BT_GATT_ITER_STOP;
   1b026:	2500      	movs	r5, #0
   1b028:	e7ec      	b.n	1b004 <read_type_cb+0x1c>
	data->err = 0x00;
   1b02a:	f04f 0900 	mov.w	r9, #0
   1b02e:	f884 9014 	strb.w	r9, [r4, #20]
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1b032:	68a0      	ldr	r0, [r4, #8]
   1b034:	f011 fb04 	bl	2c640 <net_buf_frag_last>
   1b038:	2102      	movs	r1, #2
   1b03a:	300c      	adds	r0, #12
   1b03c:	f011 fb20 	bl	2c680 <net_buf_simple_add>
   1b040:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
   1b042:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1b046:	9401      	str	r4, [sp, #4]
   1b048:	4b10      	ldr	r3, [pc, #64]	; (1b08c <read_type_cb+0xa4>)
   1b04a:	9300      	str	r3, [sp, #0]
   1b04c:	464b      	mov	r3, r9
   1b04e:	68a2      	ldr	r2, [r4, #8]
   1b050:	4631      	mov	r1, r6
   1b052:	4638      	mov	r0, r7
   1b054:	f00f fd84 	bl	2ab60 <att_chan_read>
	if (read < 0) {
   1b058:	2800      	cmp	r0, #0
   1b05a:	db06      	blt.n	1b06a <read_type_cb+0x82>
	if (!data->item) {
   1b05c:	6923      	ldr	r3, [r4, #16]
   1b05e:	2b00      	cmp	r3, #0
   1b060:	d0d0      	beq.n	1b004 <read_type_cb+0x1c>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   1b062:	8d7d      	ldrh	r5, [r7, #42]	; 0x2a
   1b064:	68a3      	ldr	r3, [r4, #8]
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
	size_t bytes = 0;
   1b066:	2200      	movs	r2, #0

	while (buf) {
   1b068:	e006      	b.n	1b078 <read_type_cb+0x90>
		data->err = err_to_att(read);
   1b06a:	f00f fb0f 	bl	2a68c <err_to_att>
   1b06e:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   1b070:	e7c8      	b.n	1b004 <read_type_cb+0x1c>
		bytes += buf->len;
   1b072:	8a19      	ldrh	r1, [r3, #16]
   1b074:	440a      	add	r2, r1
		buf = buf->frags;
   1b076:	685b      	ldr	r3, [r3, #4]
	while (buf) {
   1b078:	2b00      	cmp	r3, #0
   1b07a:	d1fa      	bne.n	1b072 <read_type_cb+0x8a>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   1b07c:	1aad      	subs	r5, r5, r2
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1b07e:	68e3      	ldr	r3, [r4, #12]
   1b080:	781b      	ldrb	r3, [r3, #0]
   1b082:	429d      	cmp	r5, r3
   1b084:	bf94      	ite	ls
   1b086:	2500      	movls	r5, #0
   1b088:	2501      	movhi	r5, #1
   1b08a:	e7bb      	b.n	1b004 <read_type_cb+0x1c>
   1b08c:	0002a69d 	.word	0x0002a69d

0001b090 <find_type_cb>:
{
   1b090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b094:	b095      	sub	sp, #84	; 0x54
   1b096:	4605      	mov	r5, r0
   1b098:	460e      	mov	r6, r1
   1b09a:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   1b09c:	6817      	ldr	r7, [r2, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   1b09e:	f8d7 8004 	ldr.w	r8, [r7, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1b0a2:	2300      	movs	r3, #0
   1b0a4:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   1b0a8:	f642 0301 	movw	r3, #10241	; 0x2801
   1b0ac:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
   1b0b0:	a912      	add	r1, sp, #72	; 0x48
   1b0b2:	6800      	ldr	r0, [r0, #0]
   1b0b4:	f00e fdfd 	bl	29cb2 <bt_uuid_cmp>
   1b0b8:	b928      	cbnz	r0, 1b0c6 <find_type_cb+0x36>
	data->group = NULL;
   1b0ba:	2300      	movs	r3, #0
   1b0bc:	60a3      	str	r3, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
   1b0be:	2001      	movs	r0, #1
}
   1b0c0:	b015      	add	sp, #84	; 0x54
   1b0c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   1b0c6:	2300      	movs	r3, #0
   1b0c8:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
   1b0cc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1b0d0:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
   1b0d4:	a913      	add	r1, sp, #76	; 0x4c
   1b0d6:	6828      	ldr	r0, [r5, #0]
   1b0d8:	f00e fdeb 	bl	29cb2 <bt_uuid_cmp>
   1b0dc:	b928      	cbnz	r0, 1b0ea <find_type_cb+0x5a>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   1b0de:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
   1b0e0:	6860      	ldr	r0, [r4, #4]
   1b0e2:	4603      	mov	r3, r0
	size_t bytes = 0;
   1b0e4:	f04f 0c00 	mov.w	ip, #0
	while (buf) {
   1b0e8:	e00a      	b.n	1b100 <find_type_cb+0x70>
		if (data->group &&
   1b0ea:	68a3      	ldr	r3, [r4, #8]
   1b0ec:	b11b      	cbz	r3, 1b0f6 <find_type_cb+0x66>
		    handle > sys_le16_to_cpu(data->group->end_handle)) {
   1b0ee:	885a      	ldrh	r2, [r3, #2]
		if (data->group &&
   1b0f0:	42b2      	cmp	r2, r6
   1b0f2:	d200      	bcs.n	1b0f6 <find_type_cb+0x66>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1b0f4:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   1b0f6:	2001      	movs	r0, #1
   1b0f8:	e7e2      	b.n	1b0c0 <find_type_cb+0x30>
		bytes += buf->len;
   1b0fa:	8a1a      	ldrh	r2, [r3, #16]
   1b0fc:	4494      	add	ip, r2
		buf = buf->frags;
   1b0fe:	685b      	ldr	r3, [r3, #4]
	while (buf) {
   1b100:	2b00      	cmp	r3, #0
   1b102:	d1fa      	bne.n	1b0fa <find_type_cb+0x6a>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   1b104:	eba1 030c 	sub.w	r3, r1, ip
   1b108:	2b03      	cmp	r3, #3
   1b10a:	d801      	bhi.n	1b110 <find_type_cb+0x80>
		return BT_GATT_ITER_STOP;
   1b10c:	2000      	movs	r0, #0
   1b10e:	e7d7      	b.n	1b0c0 <find_type_cb+0x30>
	frag = net_buf_frag_last(data->buf);
   1b110:	f011 fa96 	bl	2c640 <net_buf_frag_last>
   1b114:	4681      	mov	r9, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   1b116:	f8b7 a02a 	ldrh.w	sl, [r7, #42]	; 0x2a
   1b11a:	6863      	ldr	r3, [r4, #4]
	size_t bytes = 0;
   1b11c:	2200      	movs	r2, #0
	while (buf) {
   1b11e:	e002      	b.n	1b126 <find_type_cb+0x96>
		bytes += buf->len;
   1b120:	8a19      	ldrh	r1, [r3, #16]
   1b122:	440a      	add	r2, r1
		buf = buf->frags;
   1b124:	685b      	ldr	r3, [r3, #4]
	while (buf) {
   1b126:	2b00      	cmp	r3, #0
   1b128:	d1fa      	bne.n	1b120 <find_type_cb+0x90>
   1b12a:	ebaa 0a02 	sub.w	sl, sl, r2
	return net_buf_simple_tailroom(&buf->b);
   1b12e:	f109 0b0c 	add.w	fp, r9, #12
   1b132:	4658      	mov	r0, fp
   1b134:	f011 faea 	bl	2c70c <net_buf_simple_tailroom>
   1b138:	4582      	cmp	sl, r0
   1b13a:	d22b      	bcs.n	1b194 <find_type_cb+0x104>
   1b13c:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   1b13e:	6863      	ldr	r3, [r4, #4]
	size_t bytes = 0;
   1b140:	2200      	movs	r2, #0
	while (buf) {
   1b142:	e002      	b.n	1b14a <find_type_cb+0xba>
		bytes += buf->len;
   1b144:	8a19      	ldrh	r1, [r3, #16]
   1b146:	440a      	add	r2, r1
		buf = buf->frags;
   1b148:	685b      	ldr	r3, [r3, #4]
	while (buf) {
   1b14a:	2b00      	cmp	r3, #0
   1b14c:	d1fa      	bne.n	1b144 <find_type_cb+0xb4>
   1b14e:	1a80      	subs	r0, r0, r2
	if (!len) {
   1b150:	b320      	cbz	r0, 1b19c <find_type_cb+0x10c>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   1b152:	686f      	ldr	r7, [r5, #4]
   1b154:	2300      	movs	r3, #0
   1b156:	9300      	str	r3, [sp, #0]
   1b158:	2310      	movs	r3, #16
   1b15a:	aa0e      	add	r2, sp, #56	; 0x38
   1b15c:	4629      	mov	r1, r5
   1b15e:	4640      	mov	r0, r8
   1b160:	47b8      	blx	r7
	if (read < 0) {
   1b162:	1e05      	subs	r5, r0, #0
   1b164:	dba9      	blt.n	1b0ba <find_type_cb+0x2a>
	if (read != data->value_len) {
   1b166:	7c22      	ldrb	r2, [r4, #16]
   1b168:	42aa      	cmp	r2, r5
   1b16a:	f000 808a 	beq.w	1b282 <find_type_cb+0x1f2>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1b16e:	68e1      	ldr	r1, [r4, #12]
   1b170:	a809      	add	r0, sp, #36	; 0x24
   1b172:	f00e fdbc 	bl	29cee <bt_uuid_create>
   1b176:	b308      	cbz	r0, 1b1bc <find_type_cb+0x12c>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   1b178:	b2ea      	uxtb	r2, r5
   1b17a:	a90e      	add	r1, sp, #56	; 0x38
   1b17c:	a804      	add	r0, sp, #16
   1b17e:	f00e fdb6 	bl	29cee <bt_uuid_create>
   1b182:	2800      	cmp	r0, #0
   1b184:	d04c      	beq.n	1b220 <find_type_cb+0x190>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   1b186:	a904      	add	r1, sp, #16
   1b188:	a809      	add	r0, sp, #36	; 0x24
   1b18a:	f00e fd92 	bl	29cb2 <bt_uuid_cmp>
   1b18e:	2800      	cmp	r0, #0
   1b190:	d07f      	beq.n	1b292 <find_type_cb+0x202>
   1b192:	e792      	b.n	1b0ba <find_type_cb+0x2a>
	return net_buf_simple_tailroom(&buf->b);
   1b194:	4658      	mov	r0, fp
   1b196:	f011 fab9 	bl	2c70c <net_buf_simple_tailroom>
   1b19a:	e7d9      	b.n	1b150 <find_type_cb+0xc0>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   1b19c:	6863      	ldr	r3, [r4, #4]
   1b19e:	7a98      	ldrb	r0, [r3, #10]
   1b1a0:	f003 fa6e 	bl	1e680 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1b1a4:	2200      	movs	r2, #0
   1b1a6:	2300      	movs	r3, #0
   1b1a8:	f011 f9dc 	bl	2c564 <net_buf_alloc_fixed>
		if (!frag) {
   1b1ac:	4681      	mov	r9, r0
   1b1ae:	2800      	cmp	r0, #0
   1b1b0:	d086      	beq.n	1b0c0 <find_type_cb+0x30>
		net_buf_frag_add(data->buf, frag);
   1b1b2:	4601      	mov	r1, r0
   1b1b4:	6860      	ldr	r0, [r4, #4]
   1b1b6:	f011 fa54 	bl	2c662 <net_buf_frag_add>
   1b1ba:	e7ca      	b.n	1b152 <find_type_cb+0xc2>
			LOG_WRN("Unable to create UUID: size %u", data->value_len);
   1b1bc:	7c26      	ldrb	r6, [r4, #16]
   1b1be:	2008      	movs	r0, #8
   1b1c0:	f7f8 fda2 	bl	13d08 <z_log_msg_alloc>
   1b1c4:	2200      	movs	r2, #0
   1b1c6:	f36f 0200 	bfc	r2, #0, #1
   1b1ca:	f36f 0241 	bfc	r2, #1, #1
   1b1ce:	f36f 0282 	bfc	r2, #2, #1
   1b1d2:	f36f 02c5 	bfc	r2, #3, #3
   1b1d6:	2302      	movs	r3, #2
   1b1d8:	f363 1288 	bfi	r2, r3, #6, #3
   1b1dc:	230c      	movs	r3, #12
   1b1de:	f363 2252 	bfi	r2, r3, #9, #10
   1b1e2:	f36f 42de 	bfc	r2, #19, #12
   1b1e6:	f36f 72df 	bfc	r2, #31, #1
   1b1ea:	4605      	mov	r5, r0
   1b1ec:	b190      	cbz	r0, 1b214 <find_type_cb+0x184>
   1b1ee:	f110 0310 	adds.w	r3, r0, #16
   1b1f2:	d002      	beq.n	1b1fa <find_type_cb+0x16a>
   1b1f4:	492d      	ldr	r1, [pc, #180]	; (1b2ac <find_type_cb+0x21c>)
   1b1f6:	6141      	str	r1, [r0, #20]
   1b1f8:	6186      	str	r6, [r0, #24]
   1b1fa:	b15b      	cbz	r3, 1b214 <find_type_cb+0x184>
   1b1fc:	2303      	movs	r3, #3
   1b1fe:	f88d 3010 	strb.w	r3, [sp, #16]
   1b202:	2300      	movs	r3, #0
   1b204:	f88d 3011 	strb.w	r3, [sp, #17]
   1b208:	f88d 3012 	strb.w	r3, [sp, #18]
   1b20c:	f88d 3013 	strb.w	r3, [sp, #19]
   1b210:	9804      	ldr	r0, [sp, #16]
   1b212:	6128      	str	r0, [r5, #16]
   1b214:	2300      	movs	r3, #0
   1b216:	4926      	ldr	r1, [pc, #152]	; (1b2b0 <find_type_cb+0x220>)
   1b218:	4628      	mov	r0, r5
   1b21a:	f00d ffde 	bl	291da <z_log_msg_finalize>
			goto skip;
   1b21e:	e74c      	b.n	1b0ba <find_type_cb+0x2a>
			LOG_WRN("Unable to create UUID: size %d", read);
   1b220:	2008      	movs	r0, #8
   1b222:	f7f8 fd71 	bl	13d08 <z_log_msg_alloc>
   1b226:	2200      	movs	r2, #0
   1b228:	f36f 0200 	bfc	r2, #0, #1
   1b22c:	f36f 0241 	bfc	r2, #1, #1
   1b230:	f36f 0282 	bfc	r2, #2, #1
   1b234:	f36f 02c5 	bfc	r2, #3, #3
   1b238:	2302      	movs	r3, #2
   1b23a:	f363 1288 	bfi	r2, r3, #6, #3
   1b23e:	230c      	movs	r3, #12
   1b240:	f363 2252 	bfi	r2, r3, #9, #10
   1b244:	f36f 42de 	bfc	r2, #19, #12
   1b248:	f36f 72df 	bfc	r2, #31, #1
   1b24c:	4606      	mov	r6, r0
   1b24e:	b190      	cbz	r0, 1b276 <find_type_cb+0x1e6>
   1b250:	f110 0310 	adds.w	r3, r0, #16
   1b254:	d002      	beq.n	1b25c <find_type_cb+0x1cc>
   1b256:	4917      	ldr	r1, [pc, #92]	; (1b2b4 <find_type_cb+0x224>)
   1b258:	6141      	str	r1, [r0, #20]
   1b25a:	6185      	str	r5, [r0, #24]
   1b25c:	b15b      	cbz	r3, 1b276 <find_type_cb+0x1e6>
   1b25e:	2303      	movs	r3, #3
   1b260:	f88d 300c 	strb.w	r3, [sp, #12]
   1b264:	2300      	movs	r3, #0
   1b266:	f88d 300d 	strb.w	r3, [sp, #13]
   1b26a:	f88d 300e 	strb.w	r3, [sp, #14]
   1b26e:	f88d 300f 	strb.w	r3, [sp, #15]
   1b272:	9803      	ldr	r0, [sp, #12]
   1b274:	6130      	str	r0, [r6, #16]
   1b276:	2300      	movs	r3, #0
   1b278:	490d      	ldr	r1, [pc, #52]	; (1b2b0 <find_type_cb+0x220>)
   1b27a:	4630      	mov	r0, r6
   1b27c:	f00d ffad 	bl	291da <z_log_msg_finalize>
			goto skip;
   1b280:	e71b      	b.n	1b0ba <find_type_cb+0x2a>
	} else if (memcmp(data->value, uuid, read)) {
   1b282:	462a      	mov	r2, r5
   1b284:	a90e      	add	r1, sp, #56	; 0x38
   1b286:	68e0      	ldr	r0, [r4, #12]
   1b288:	f00e fc81 	bl	29b8e <memcmp>
   1b28c:	2800      	cmp	r0, #0
   1b28e:	f47f af14 	bne.w	1b0ba <find_type_cb+0x2a>
	data->err = 0x00;
   1b292:	2300      	movs	r3, #0
   1b294:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   1b296:	2104      	movs	r1, #4
   1b298:	f109 000c 	add.w	r0, r9, #12
   1b29c:	f011 f9f0 	bl	2c680 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   1b2a0:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1b2a2:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1b2a4:	68a3      	ldr	r3, [r4, #8]
   1b2a6:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   1b2a8:	2001      	movs	r0, #1
   1b2aa:	e709      	b.n	1b0c0 <find_type_cb+0x30>
   1b2ac:	00032fb4 	.word	0x00032fb4
   1b2b0:	00031410 	.word	0x00031410
   1b2b4:	00032fd4 	.word	0x00032fd4

0001b2b8 <bt_att_connected>:
{
   1b2b8:	b510      	push	{r4, lr}
   1b2ba:	4604      	mov	r4, r0
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   1b2bc:	3804      	subs	r0, #4
	atomic_set_bit(att_chan->flags, ATT_CONNECTED);
   1b2be:	f104 038c 	add.w	r3, r4, #140	; 0x8c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1b2c2:	f3bf 8f5b 	dmb	ish
   1b2c6:	e853 1f00 	ldrex	r1, [r3]
   1b2ca:	f041 0104 	orr.w	r1, r1, #4
   1b2ce:	e843 1200 	strex	r2, r1, [r3]
   1b2d2:	2a00      	cmp	r2, #0
   1b2d4:	d1f7      	bne.n	1b2c6 <bt_att_connected+0xe>
   1b2d6:	f3bf 8f5b 	dmb	ish
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1b2da:	2317      	movs	r3, #23
   1b2dc:	84e3      	strh	r3, [r4, #38]	; 0x26
		le_chan->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1b2de:	82e3      	strh	r3, [r4, #22]
	att_chan_mtu_updated(att_chan);
   1b2e0:	f00f fbd6 	bl	2aa90 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   1b2e4:	4904      	ldr	r1, [pc, #16]	; (1b2f8 <bt_att_connected+0x40>)
   1b2e6:	f104 00ac 	add.w	r0, r4, #172	; 0xac
   1b2ea:	f015 f9ed 	bl	306c8 <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
   1b2ee:	6820      	ldr	r0, [r4, #0]
   1b2f0:	f002 f97e 	bl	1d5f0 <bt_gatt_connected>
}
   1b2f4:	bd10      	pop	{r4, pc}
   1b2f6:	bf00      	nop
   1b2f8:	0001bf5d 	.word	0x0001bf5d

0001b2fc <bt_att_chan_create_pdu>:
{
   1b2fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b2fe:	b083      	sub	sp, #12
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1b300:	1c55      	adds	r5, r2, #1
   1b302:	8d46      	ldrh	r6, [r0, #42]	; 0x2a
   1b304:	42b5      	cmp	r5, r6
   1b306:	d80c      	bhi.n	1b322 <bt_att_chan_create_pdu+0x26>
   1b308:	460c      	mov	r4, r1
	switch (att_op_get_type(op)) {
   1b30a:	4608      	mov	r0, r1
   1b30c:	f7ff fba2 	bl	1aa54 <att_op_get_type>
   1b310:	2802      	cmp	r0, #2
   1b312:	d038      	beq.n	1b386 <bt_att_chan_create_pdu+0x8a>
   1b314:	2804      	cmp	r0, #4
   1b316:	d036      	beq.n	1b386 <bt_att_chan_create_pdu+0x8a>
		timeout = K_FOREVER;
   1b318:	f04f 36ff 	mov.w	r6, #4294967295
   1b31c:	f04f 37ff 	mov.w	r7, #4294967295
   1b320:	e034      	b.n	1b38c <bt_att_chan_create_pdu+0x90>
		LOG_WRN("ATT MTU exceeded, max %u, wanted %zu", chan->chan.tx.mtu,
   1b322:	2008      	movs	r0, #8
   1b324:	f7f8 fcf0 	bl	13d08 <z_log_msg_alloc>
   1b328:	2200      	movs	r2, #0
   1b32a:	f36f 0200 	bfc	r2, #0, #1
   1b32e:	f36f 0241 	bfc	r2, #1, #1
   1b332:	f36f 0282 	bfc	r2, #2, #1
   1b336:	f36f 02c5 	bfc	r2, #3, #3
   1b33a:	2302      	movs	r3, #2
   1b33c:	f363 1288 	bfi	r2, r3, #6, #3
   1b340:	2310      	movs	r3, #16
   1b342:	f363 2252 	bfi	r2, r3, #9, #10
   1b346:	f36f 42de 	bfc	r2, #19, #12
   1b34a:	f36f 72df 	bfc	r2, #31, #1
   1b34e:	4604      	mov	r4, r0
   1b350:	b190      	cbz	r0, 1b378 <bt_att_chan_create_pdu+0x7c>
   1b352:	18c3      	adds	r3, r0, r3
   1b354:	d003      	beq.n	1b35e <bt_att_chan_create_pdu+0x62>
   1b356:	494c      	ldr	r1, [pc, #304]	; (1b488 <bt_att_chan_create_pdu+0x18c>)
   1b358:	6141      	str	r1, [r0, #20]
   1b35a:	6186      	str	r6, [r0, #24]
   1b35c:	61c5      	str	r5, [r0, #28]
   1b35e:	b15b      	cbz	r3, 1b378 <bt_att_chan_create_pdu+0x7c>
   1b360:	2304      	movs	r3, #4
   1b362:	f88d 3004 	strb.w	r3, [sp, #4]
   1b366:	2300      	movs	r3, #0
   1b368:	f88d 3005 	strb.w	r3, [sp, #5]
   1b36c:	f88d 3006 	strb.w	r3, [sp, #6]
   1b370:	f88d 3007 	strb.w	r3, [sp, #7]
   1b374:	9801      	ldr	r0, [sp, #4]
   1b376:	6120      	str	r0, [r4, #16]
   1b378:	2300      	movs	r3, #0
   1b37a:	4944      	ldr	r1, [pc, #272]	; (1b48c <bt_att_chan_create_pdu+0x190>)
   1b37c:	4620      	mov	r0, r4
   1b37e:	f00d ff2c 	bl	291da <z_log_msg_finalize>
		return NULL;
   1b382:	2500      	movs	r5, #0
   1b384:	e018      	b.n	1b3b8 <bt_att_chan_create_pdu+0xbc>
		timeout = BT_ATT_TIMEOUT;
   1b386:	f44f 2670 	mov.w	r6, #983040	; 0xf0000
   1b38a:	2700      	movs	r7, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   1b38c:	4632      	mov	r2, r6
   1b38e:	463b      	mov	r3, r7
   1b390:	2100      	movs	r1, #0
   1b392:	4608      	mov	r0, r1
   1b394:	f00f f8b1 	bl	2a4fa <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   1b398:	4605      	mov	r5, r0
   1b39a:	b180      	cbz	r0, 1b3be <bt_att_chan_create_pdu+0xc2>
	data = tx_meta_data_alloc(timeout);
   1b39c:	4630      	mov	r0, r6
   1b39e:	4639      	mov	r1, r7
   1b3a0:	f7ff fbca 	bl	1ab38 <tx_meta_data_alloc>
	if (!data) {
   1b3a4:	4606      	mov	r6, r0
   1b3a6:	2800      	cmp	r0, #0
   1b3a8:	d03a      	beq.n	1b420 <bt_att_chan_create_pdu+0x124>
	bt_att_tx_meta_data(buf) = data;
   1b3aa:	61a8      	str	r0, [r5, #24]
   1b3ac:	2101      	movs	r1, #1
   1b3ae:	f105 000c 	add.w	r0, r5, #12
   1b3b2:	f011 f965 	bl	2c680 <net_buf_simple_add>
	hdr->code = op;
   1b3b6:	7004      	strb	r4, [r0, #0]
}
   1b3b8:	4628      	mov	r0, r5
   1b3ba:	b003      	add	sp, #12
   1b3bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Unable to allocate buffer for op 0x%02x", op);
   1b3be:	2008      	movs	r0, #8
   1b3c0:	f7f8 fca2 	bl	13d08 <z_log_msg_alloc>
   1b3c4:	2200      	movs	r2, #0
   1b3c6:	f36f 0200 	bfc	r2, #0, #1
   1b3ca:	f36f 0241 	bfc	r2, #1, #1
   1b3ce:	f36f 0282 	bfc	r2, #2, #1
   1b3d2:	f36f 02c5 	bfc	r2, #3, #3
   1b3d6:	2301      	movs	r3, #1
   1b3d8:	f363 1288 	bfi	r2, r3, #6, #3
   1b3dc:	230c      	movs	r3, #12
   1b3de:	f363 2252 	bfi	r2, r3, #9, #10
   1b3e2:	f36f 42de 	bfc	r2, #19, #12
   1b3e6:	f36f 72df 	bfc	r2, #31, #1
   1b3ea:	4606      	mov	r6, r0
   1b3ec:	b190      	cbz	r0, 1b414 <bt_att_chan_create_pdu+0x118>
   1b3ee:	f110 0310 	adds.w	r3, r0, #16
   1b3f2:	d002      	beq.n	1b3fa <bt_att_chan_create_pdu+0xfe>
   1b3f4:	4926      	ldr	r1, [pc, #152]	; (1b490 <bt_att_chan_create_pdu+0x194>)
   1b3f6:	6141      	str	r1, [r0, #20]
   1b3f8:	6184      	str	r4, [r0, #24]
   1b3fa:	b15b      	cbz	r3, 1b414 <bt_att_chan_create_pdu+0x118>
   1b3fc:	2303      	movs	r3, #3
   1b3fe:	f88d 3004 	strb.w	r3, [sp, #4]
   1b402:	2300      	movs	r3, #0
   1b404:	f88d 3005 	strb.w	r3, [sp, #5]
   1b408:	f88d 3006 	strb.w	r3, [sp, #6]
   1b40c:	f88d 3007 	strb.w	r3, [sp, #7]
   1b410:	9801      	ldr	r0, [sp, #4]
   1b412:	6130      	str	r0, [r6, #16]
   1b414:	2300      	movs	r3, #0
   1b416:	491d      	ldr	r1, [pc, #116]	; (1b48c <bt_att_chan_create_pdu+0x190>)
   1b418:	4630      	mov	r0, r6
   1b41a:	f00d fede 	bl	291da <z_log_msg_finalize>
		return NULL;
   1b41e:	e7cb      	b.n	1b3b8 <bt_att_chan_create_pdu+0xbc>
		LOG_WRN("Unable to allocate ATT TX meta");
   1b420:	2006      	movs	r0, #6
   1b422:	f7f8 fc71 	bl	13d08 <z_log_msg_alloc>
   1b426:	2200      	movs	r2, #0
   1b428:	f36f 0200 	bfc	r2, #0, #1
   1b42c:	f36f 0241 	bfc	r2, #1, #1
   1b430:	f36f 0282 	bfc	r2, #2, #1
   1b434:	f36f 02c5 	bfc	r2, #3, #3
   1b438:	2302      	movs	r3, #2
   1b43a:	f363 1288 	bfi	r2, r3, #6, #3
   1b43e:	2308      	movs	r3, #8
   1b440:	f363 2252 	bfi	r2, r3, #9, #10
   1b444:	f36f 42de 	bfc	r2, #19, #12
   1b448:	f36f 72df 	bfc	r2, #31, #1
   1b44c:	4604      	mov	r4, r0
   1b44e:	b188      	cbz	r0, 1b474 <bt_att_chan_create_pdu+0x178>
   1b450:	f110 0310 	adds.w	r3, r0, #16
   1b454:	d001      	beq.n	1b45a <bt_att_chan_create_pdu+0x15e>
   1b456:	490f      	ldr	r1, [pc, #60]	; (1b494 <bt_att_chan_create_pdu+0x198>)
   1b458:	6141      	str	r1, [r0, #20]
   1b45a:	b15b      	cbz	r3, 1b474 <bt_att_chan_create_pdu+0x178>
   1b45c:	2302      	movs	r3, #2
   1b45e:	f88d 3004 	strb.w	r3, [sp, #4]
   1b462:	2300      	movs	r3, #0
   1b464:	f88d 3005 	strb.w	r3, [sp, #5]
   1b468:	f88d 3006 	strb.w	r3, [sp, #6]
   1b46c:	f88d 3007 	strb.w	r3, [sp, #7]
   1b470:	9801      	ldr	r0, [sp, #4]
   1b472:	6120      	str	r0, [r4, #16]
   1b474:	2300      	movs	r3, #0
   1b476:	4905      	ldr	r1, [pc, #20]	; (1b48c <bt_att_chan_create_pdu+0x190>)
   1b478:	4620      	mov	r0, r4
   1b47a:	f00d feae 	bl	291da <z_log_msg_finalize>
		net_buf_unref(buf);
   1b47e:	4628      	mov	r0, r5
   1b480:	f011 f8b7 	bl	2c5f2 <net_buf_unref>
		return NULL;
   1b484:	4635      	mov	r5, r6
   1b486:	e797      	b.n	1b3b8 <bt_att_chan_create_pdu+0xbc>
   1b488:	00032ff4 	.word	0x00032ff4
   1b48c:	00031410 	.word	0x00031410
   1b490:	00032dc8 	.word	0x00032dc8
   1b494:	0003301c 	.word	0x0003301c

0001b498 <bt_att_recv>:
{
   1b498:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b49c:	b083      	sub	sp, #12
	if (buf->len < sizeof(*hdr)) {
   1b49e:	8a0b      	ldrh	r3, [r1, #16]
   1b4a0:	b16b      	cbz	r3, 1b4be <bt_att_recv+0x26>
   1b4a2:	4606      	mov	r6, r0
   1b4a4:	460d      	mov	r5, r1
   1b4a6:	1f07      	subs	r7, r0, #4
	return net_buf_simple_pull_mem(&buf->b, len);
   1b4a8:	2101      	movs	r1, #1
   1b4aa:	f105 000c 	add.w	r0, r5, #12
   1b4ae:	f011 f911 	bl	2c6d4 <net_buf_simple_pull_mem>
   1b4b2:	4604      	mov	r4, r0
	if (!att_chan->att) {
   1b4b4:	f856 3c04 	ldr.w	r3, [r6, #-4]
   1b4b8:	b383      	cbz	r3, 1b51c <bt_att_recv+0x84>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1b4ba:	2300      	movs	r3, #0
   1b4bc:	e033      	b.n	1b526 <bt_att_recv+0x8e>
		LOG_ERR("Too small ATT PDU received");
   1b4be:	2006      	movs	r0, #6
   1b4c0:	f7f8 fc22 	bl	13d08 <z_log_msg_alloc>
   1b4c4:	2200      	movs	r2, #0
   1b4c6:	f36f 0200 	bfc	r2, #0, #1
   1b4ca:	f36f 0241 	bfc	r2, #1, #1
   1b4ce:	f36f 0282 	bfc	r2, #2, #1
   1b4d2:	f36f 02c5 	bfc	r2, #3, #3
   1b4d6:	2301      	movs	r3, #1
   1b4d8:	f363 1288 	bfi	r2, r3, #6, #3
   1b4dc:	2308      	movs	r3, #8
   1b4de:	f363 2252 	bfi	r2, r3, #9, #10
   1b4e2:	f36f 42de 	bfc	r2, #19, #12
   1b4e6:	f36f 72df 	bfc	r2, #31, #1
   1b4ea:	4604      	mov	r4, r0
   1b4ec:	b188      	cbz	r0, 1b512 <bt_att_recv+0x7a>
   1b4ee:	f110 0310 	adds.w	r3, r0, #16
   1b4f2:	d001      	beq.n	1b4f8 <bt_att_recv+0x60>
   1b4f4:	4994      	ldr	r1, [pc, #592]	; (1b748 <bt_att_recv+0x2b0>)
   1b4f6:	6141      	str	r1, [r0, #20]
   1b4f8:	b15b      	cbz	r3, 1b512 <bt_att_recv+0x7a>
   1b4fa:	2302      	movs	r3, #2
   1b4fc:	f88d 3004 	strb.w	r3, [sp, #4]
   1b500:	2300      	movs	r3, #0
   1b502:	f88d 3005 	strb.w	r3, [sp, #5]
   1b506:	f88d 3006 	strb.w	r3, [sp, #6]
   1b50a:	f88d 3007 	strb.w	r3, [sp, #7]
   1b50e:	9801      	ldr	r0, [sp, #4]
   1b510:	6120      	str	r0, [r4, #16]
   1b512:	2300      	movs	r3, #0
   1b514:	498d      	ldr	r1, [pc, #564]	; (1b74c <bt_att_recv+0x2b4>)
   1b516:	4620      	mov	r0, r4
   1b518:	f00d fe5f 	bl	291da <z_log_msg_finalize>
}
   1b51c:	2000      	movs	r0, #0
   1b51e:	b003      	add	sp, #12
   1b520:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1b524:	3301      	adds	r3, #1
   1b526:	2b1d      	cmp	r3, #29
   1b528:	d829      	bhi.n	1b57e <bt_att_recv+0xe6>
		if (hdr->code == handlers[i].op) {
   1b52a:	f894 c000 	ldrb.w	ip, [r4]
   1b52e:	4a88      	ldr	r2, [pc, #544]	; (1b750 <bt_att_recv+0x2b8>)
   1b530:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   1b534:	4594      	cmp	ip, r2
   1b536:	d1f5      	bne.n	1b524 <bt_att_recv+0x8c>
			handler = &handlers[i];
   1b538:	4a85      	ldr	r2, [pc, #532]	; (1b750 <bt_att_recv+0x2b8>)
   1b53a:	eb02 08c3 	add.w	r8, r2, r3, lsl #3
		if (handler->type == ATT_REQUEST &&
   1b53e:	f898 9002 	ldrb.w	r9, [r8, #2]
   1b542:	f1b9 0f01 	cmp.w	r9, #1
   1b546:	d05a      	beq.n	1b5fe <bt_att_recv+0x166>
		} else if (handler->type == ATT_INDICATION &&
   1b548:	f1b9 0f05 	cmp.w	r9, #5
   1b54c:	f000 808e 	beq.w	1b66c <bt_att_recv+0x1d4>
	if (buf->len < handler->expect_len) {
   1b550:	8a2e      	ldrh	r6, [r5, #16]
   1b552:	f898 3001 	ldrb.w	r3, [r8, #1]
   1b556:	429e      	cmp	r6, r3
   1b558:	f0c0 80c0 	bcc.w	1b6dc <bt_att_recv+0x244>
		err = handler->func(att_chan, buf);
   1b55c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1b560:	4629      	mov	r1, r5
   1b562:	4638      	mov	r0, r7
   1b564:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   1b566:	f1b9 0f01 	cmp.w	r9, #1
   1b56a:	d1d7      	bne.n	1b51c <bt_att_recv+0x84>
   1b56c:	2800      	cmp	r0, #0
   1b56e:	d0d5      	beq.n	1b51c <bt_att_recv+0x84>
		send_err_rsp(att_chan, hdr->code, 0, err);
   1b570:	4603      	mov	r3, r0
   1b572:	2200      	movs	r2, #0
   1b574:	7821      	ldrb	r1, [r4, #0]
   1b576:	4638      	mov	r0, r7
   1b578:	f00f fcd0 	bl	2af1c <send_err_rsp>
   1b57c:	e7ce      	b.n	1b51c <bt_att_recv+0x84>
		LOG_WRN("Unhandled ATT code 0x%02x", hdr->code);
   1b57e:	7826      	ldrb	r6, [r4, #0]
   1b580:	2008      	movs	r0, #8
   1b582:	f7f8 fbc1 	bl	13d08 <z_log_msg_alloc>
   1b586:	2200      	movs	r2, #0
   1b588:	f36f 0200 	bfc	r2, #0, #1
   1b58c:	f36f 0241 	bfc	r2, #1, #1
   1b590:	f36f 0282 	bfc	r2, #2, #1
   1b594:	f36f 02c5 	bfc	r2, #3, #3
   1b598:	2302      	movs	r3, #2
   1b59a:	f363 1288 	bfi	r2, r3, #6, #3
   1b59e:	230c      	movs	r3, #12
   1b5a0:	f363 2252 	bfi	r2, r3, #9, #10
   1b5a4:	f36f 42de 	bfc	r2, #19, #12
   1b5a8:	f36f 72df 	bfc	r2, #31, #1
   1b5ac:	4605      	mov	r5, r0
   1b5ae:	b190      	cbz	r0, 1b5d6 <bt_att_recv+0x13e>
   1b5b0:	f110 0310 	adds.w	r3, r0, #16
   1b5b4:	d002      	beq.n	1b5bc <bt_att_recv+0x124>
   1b5b6:	4967      	ldr	r1, [pc, #412]	; (1b754 <bt_att_recv+0x2bc>)
   1b5b8:	6141      	str	r1, [r0, #20]
   1b5ba:	6186      	str	r6, [r0, #24]
   1b5bc:	b15b      	cbz	r3, 1b5d6 <bt_att_recv+0x13e>
   1b5be:	2303      	movs	r3, #3
   1b5c0:	f88d 3004 	strb.w	r3, [sp, #4]
   1b5c4:	2300      	movs	r3, #0
   1b5c6:	f88d 3005 	strb.w	r3, [sp, #5]
   1b5ca:	f88d 3006 	strb.w	r3, [sp, #6]
   1b5ce:	f88d 3007 	strb.w	r3, [sp, #7]
   1b5d2:	9801      	ldr	r0, [sp, #4]
   1b5d4:	6128      	str	r0, [r5, #16]
   1b5d6:	2300      	movs	r3, #0
   1b5d8:	495c      	ldr	r1, [pc, #368]	; (1b74c <bt_att_recv+0x2b4>)
   1b5da:	4628      	mov	r0, r5
   1b5dc:	f00d fdfd 	bl	291da <z_log_msg_finalize>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   1b5e0:	7824      	ldrb	r4, [r4, #0]
   1b5e2:	4620      	mov	r0, r4
   1b5e4:	f7ff fa36 	bl	1aa54 <att_op_get_type>
   1b5e8:	2800      	cmp	r0, #0
   1b5ea:	d097      	beq.n	1b51c <bt_att_recv+0x84>
   1b5ec:	2805      	cmp	r0, #5
   1b5ee:	d095      	beq.n	1b51c <bt_att_recv+0x84>
			send_err_rsp(att_chan, hdr->code, 0,
   1b5f0:	2306      	movs	r3, #6
   1b5f2:	2200      	movs	r2, #0
   1b5f4:	4621      	mov	r1, r4
   1b5f6:	4638      	mov	r0, r7
   1b5f8:	f00f fc90 	bl	2af1c <send_err_rsp>
		return 0;
   1b5fc:	e78e      	b.n	1b51c <bt_att_recv+0x84>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   1b5fe:	2100      	movs	r1, #0
   1b600:	f106 008c 	add.w	r0, r6, #140	; 0x8c
   1b604:	f00f fc09 	bl	2ae1a <atomic_test_and_set_bit>
		if (handler->type == ATT_REQUEST &&
   1b608:	2800      	cmp	r0, #0
   1b60a:	d09d      	beq.n	1b548 <bt_att_recv+0xb0>
			LOG_WRN("Ignoring unexpected request");
   1b60c:	2006      	movs	r0, #6
   1b60e:	f7f8 fb7b 	bl	13d08 <z_log_msg_alloc>
   1b612:	2200      	movs	r2, #0
   1b614:	f36f 0200 	bfc	r2, #0, #1
   1b618:	f36f 0241 	bfc	r2, #1, #1
   1b61c:	f36f 0282 	bfc	r2, #2, #1
   1b620:	f36f 02c5 	bfc	r2, #3, #3
   1b624:	2302      	movs	r3, #2
   1b626:	f363 1288 	bfi	r2, r3, #6, #3
   1b62a:	2308      	movs	r3, #8
   1b62c:	f363 2252 	bfi	r2, r3, #9, #10
   1b630:	f36f 42de 	bfc	r2, #19, #12
   1b634:	f36f 72df 	bfc	r2, #31, #1
   1b638:	4604      	mov	r4, r0
   1b63a:	b188      	cbz	r0, 1b660 <bt_att_recv+0x1c8>
   1b63c:	f110 0310 	adds.w	r3, r0, #16
   1b640:	d001      	beq.n	1b646 <bt_att_recv+0x1ae>
   1b642:	4945      	ldr	r1, [pc, #276]	; (1b758 <bt_att_recv+0x2c0>)
   1b644:	6141      	str	r1, [r0, #20]
   1b646:	b15b      	cbz	r3, 1b660 <bt_att_recv+0x1c8>
   1b648:	2302      	movs	r3, #2
   1b64a:	f88d 3004 	strb.w	r3, [sp, #4]
   1b64e:	2300      	movs	r3, #0
   1b650:	f88d 3005 	strb.w	r3, [sp, #5]
   1b654:	f88d 3006 	strb.w	r3, [sp, #6]
   1b658:	f88d 3007 	strb.w	r3, [sp, #7]
   1b65c:	9801      	ldr	r0, [sp, #4]
   1b65e:	6120      	str	r0, [r4, #16]
   1b660:	2300      	movs	r3, #0
   1b662:	493a      	ldr	r1, [pc, #232]	; (1b74c <bt_att_recv+0x2b4>)
   1b664:	4620      	mov	r0, r4
   1b666:	f00d fdb8 	bl	291da <z_log_msg_finalize>
			return 0;
   1b66a:	e757      	b.n	1b51c <bt_att_recv+0x84>
			   atomic_test_and_set_bit(att_chan->flags,
   1b66c:	2101      	movs	r1, #1
   1b66e:	f106 008c 	add.w	r0, r6, #140	; 0x8c
   1b672:	f00f fbd2 	bl	2ae1a <atomic_test_and_set_bit>
		} else if (handler->type == ATT_INDICATION &&
   1b676:	2800      	cmp	r0, #0
   1b678:	f43f af6a 	beq.w	1b550 <bt_att_recv+0xb8>
			LOG_WRN("Ignoring unexpected indication");
   1b67c:	2006      	movs	r0, #6
   1b67e:	f7f8 fb43 	bl	13d08 <z_log_msg_alloc>
   1b682:	2200      	movs	r2, #0
   1b684:	f36f 0200 	bfc	r2, #0, #1
   1b688:	f36f 0241 	bfc	r2, #1, #1
   1b68c:	f36f 0282 	bfc	r2, #2, #1
   1b690:	f36f 02c5 	bfc	r2, #3, #3
   1b694:	2302      	movs	r3, #2
   1b696:	f363 1288 	bfi	r2, r3, #6, #3
   1b69a:	2308      	movs	r3, #8
   1b69c:	f363 2252 	bfi	r2, r3, #9, #10
   1b6a0:	f36f 42de 	bfc	r2, #19, #12
   1b6a4:	f36f 72df 	bfc	r2, #31, #1
   1b6a8:	4604      	mov	r4, r0
   1b6aa:	b188      	cbz	r0, 1b6d0 <bt_att_recv+0x238>
   1b6ac:	f110 0310 	adds.w	r3, r0, #16
   1b6b0:	d001      	beq.n	1b6b6 <bt_att_recv+0x21e>
   1b6b2:	492a      	ldr	r1, [pc, #168]	; (1b75c <bt_att_recv+0x2c4>)
   1b6b4:	6141      	str	r1, [r0, #20]
   1b6b6:	b15b      	cbz	r3, 1b6d0 <bt_att_recv+0x238>
   1b6b8:	2302      	movs	r3, #2
   1b6ba:	f88d 3004 	strb.w	r3, [sp, #4]
   1b6be:	2300      	movs	r3, #0
   1b6c0:	f88d 3005 	strb.w	r3, [sp, #5]
   1b6c4:	f88d 3006 	strb.w	r3, [sp, #6]
   1b6c8:	f88d 3007 	strb.w	r3, [sp, #7]
   1b6cc:	9801      	ldr	r0, [sp, #4]
   1b6ce:	6120      	str	r0, [r4, #16]
   1b6d0:	2300      	movs	r3, #0
   1b6d2:	491e      	ldr	r1, [pc, #120]	; (1b74c <bt_att_recv+0x2b4>)
   1b6d4:	4620      	mov	r0, r4
   1b6d6:	f00d fd80 	bl	291da <z_log_msg_finalize>
			return 0;
   1b6da:	e71f      	b.n	1b51c <bt_att_recv+0x84>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1b6dc:	f894 8000 	ldrb.w	r8, [r4]
   1b6e0:	2008      	movs	r0, #8
   1b6e2:	f7f8 fb11 	bl	13d08 <z_log_msg_alloc>
   1b6e6:	2200      	movs	r2, #0
   1b6e8:	f36f 0200 	bfc	r2, #0, #1
   1b6ec:	f36f 0241 	bfc	r2, #1, #1
   1b6f0:	f36f 0282 	bfc	r2, #2, #1
   1b6f4:	f36f 02c5 	bfc	r2, #3, #3
   1b6f8:	2301      	movs	r3, #1
   1b6fa:	f363 1288 	bfi	r2, r3, #6, #3
   1b6fe:	2310      	movs	r3, #16
   1b700:	f363 2252 	bfi	r2, r3, #9, #10
   1b704:	f36f 42de 	bfc	r2, #19, #12
   1b708:	f36f 72df 	bfc	r2, #31, #1
   1b70c:	4605      	mov	r5, r0
   1b70e:	b198      	cbz	r0, 1b738 <bt_att_recv+0x2a0>
   1b710:	18c3      	adds	r3, r0, r3
   1b712:	d004      	beq.n	1b71e <bt_att_recv+0x286>
   1b714:	4912      	ldr	r1, [pc, #72]	; (1b760 <bt_att_recv+0x2c8>)
   1b716:	6141      	str	r1, [r0, #20]
   1b718:	6186      	str	r6, [r0, #24]
   1b71a:	f8c0 801c 	str.w	r8, [r0, #28]
   1b71e:	b15b      	cbz	r3, 1b738 <bt_att_recv+0x2a0>
   1b720:	2304      	movs	r3, #4
   1b722:	f88d 3004 	strb.w	r3, [sp, #4]
   1b726:	2300      	movs	r3, #0
   1b728:	f88d 3005 	strb.w	r3, [sp, #5]
   1b72c:	f88d 3006 	strb.w	r3, [sp, #6]
   1b730:	f88d 3007 	strb.w	r3, [sp, #7]
   1b734:	9801      	ldr	r0, [sp, #4]
   1b736:	6128      	str	r0, [r5, #16]
   1b738:	2300      	movs	r3, #0
   1b73a:	4904      	ldr	r1, [pc, #16]	; (1b74c <bt_att_recv+0x2b4>)
   1b73c:	4628      	mov	r0, r5
   1b73e:	f00d fd4c 	bl	291da <z_log_msg_finalize>
		err = BT_ATT_ERR_INVALID_PDU;
   1b742:	2004      	movs	r0, #4
   1b744:	e70f      	b.n	1b566 <bt_att_recv+0xce>
   1b746:	bf00      	nop
   1b748:	0003303c 	.word	0x0003303c
   1b74c:	00031410 	.word	0x00031410
   1b750:	00033110 	.word	0x00033110
   1b754:	00033058 	.word	0x00033058
   1b758:	00033074 	.word	0x00033074
   1b75c:	00033090 	.word	0x00033090
   1b760:	000330b0 	.word	0x000330b0

0001b764 <att_write_rsp>:
{
   1b764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b768:	b08a      	sub	sp, #40	; 0x28
   1b76a:	4604      	mov	r4, r0
   1b76c:	4617      	mov	r7, r2
   1b76e:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1b770:	6803      	ldr	r3, [r0, #0]
   1b772:	4688      	mov	r8, r1
   1b774:	3900      	subs	r1, #0
   1b776:	bf18      	it	ne
   1b778:	2101      	movne	r1, #1
   1b77a:	6818      	ldr	r0, [r3, #0]
   1b77c:	f010 fc31 	bl	2bfe2 <bt_gatt_change_aware>
   1b780:	b128      	cbz	r0, 1b78e <att_write_rsp+0x2a>
	if (!handle) {
   1b782:	b975      	cbnz	r5, 1b7a2 <att_write_rsp+0x3e>
		return BT_ATT_ERR_INVALID_HANDLE;
   1b784:	2601      	movs	r6, #1
}
   1b786:	4630      	mov	r0, r6
   1b788:	b00a      	add	sp, #40	; 0x28
   1b78a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1b78e:	2105      	movs	r1, #5
   1b790:	f104 0090 	add.w	r0, r4, #144	; 0x90
   1b794:	f00f fb41 	bl	2ae1a <atomic_test_and_set_bit>
   1b798:	b108      	cbz	r0, 1b79e <att_write_rsp+0x3a>
			return 0;
   1b79a:	2600      	movs	r6, #0
   1b79c:	e7f3      	b.n	1b786 <att_write_rsp+0x22>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1b79e:	2612      	movs	r6, #18
   1b7a0:	e7f1      	b.n	1b786 <att_write_rsp+0x22>
	(void)memset(&data, 0, sizeof(data));
   1b7a2:	2218      	movs	r2, #24
   1b7a4:	2100      	movs	r1, #0
   1b7a6:	a804      	add	r0, sp, #16
   1b7a8:	f00e fa32 	bl	29c10 <memset>
	if (rsp) {
   1b7ac:	b13f      	cbz	r7, 1b7be <att_write_rsp+0x5a>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   1b7ae:	2200      	movs	r2, #0
   1b7b0:	4639      	mov	r1, r7
   1b7b2:	4620      	mov	r0, r4
   1b7b4:	f7ff fda2 	bl	1b2fc <bt_att_chan_create_pdu>
   1b7b8:	9005      	str	r0, [sp, #20]
		if (!data.buf) {
   1b7ba:	2800      	cmp	r0, #0
   1b7bc:	d03e      	beq.n	1b83c <att_write_rsp+0xd8>
	data.conn = chan->att->conn;
   1b7be:	6823      	ldr	r3, [r4, #0]
   1b7c0:	681b      	ldr	r3, [r3, #0]
   1b7c2:	9304      	str	r3, [sp, #16]
	data.req = req;
   1b7c4:	f88d 8018 	strb.w	r8, [sp, #24]
	data.offset = offset;
   1b7c8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   1b7cc:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	data.value = value;
   1b7d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1b7d2:	9307      	str	r3, [sp, #28]
	data.len = len;
   1b7d4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   1b7d8:	f8ad 3020 	strh.w	r3, [sp, #32]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1b7dc:	2301      	movs	r3, #1
   1b7de:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1b7e2:	ab04      	add	r3, sp, #16
   1b7e4:	9302      	str	r3, [sp, #8]
   1b7e6:	4b16      	ldr	r3, [pc, #88]	; (1b840 <att_write_rsp+0xdc>)
   1b7e8:	9301      	str	r3, [sp, #4]
   1b7ea:	2200      	movs	r2, #0
   1b7ec:	9200      	str	r2, [sp, #0]
   1b7ee:	4613      	mov	r3, r2
   1b7f0:	4629      	mov	r1, r5
   1b7f2:	4628      	mov	r0, r5
   1b7f4:	f001 f886 	bl	1c904 <bt_gatt_foreach_attr_type>
	if (data.err) {
   1b7f8:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
   1b7fc:	b936      	cbnz	r6, 1b80c <att_write_rsp+0xa8>
	if (data.buf) {
   1b7fe:	9905      	ldr	r1, [sp, #20]
   1b800:	2900      	cmp	r1, #0
   1b802:	d0c0      	beq.n	1b786 <att_write_rsp+0x22>
		bt_att_chan_send_rsp(chan, data.buf);
   1b804:	4620      	mov	r0, r4
   1b806:	f00f f936 	bl	2aa76 <bt_att_chan_send_rsp>
   1b80a:	e7bc      	b.n	1b786 <att_write_rsp+0x22>
		if (rsp) {
   1b80c:	b927      	cbnz	r7, 1b818 <att_write_rsp+0xb4>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   1b80e:	f1b8 0f18 	cmp.w	r8, #24
   1b812:	d010      	beq.n	1b836 <att_write_rsp+0xd2>
   1b814:	2600      	movs	r6, #0
   1b816:	e7b6      	b.n	1b786 <att_write_rsp+0x22>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1b818:	9b05      	ldr	r3, [sp, #20]
   1b81a:	6998      	ldr	r0, [r3, #24]
   1b81c:	f7ff fb02 	bl	1ae24 <tx_meta_data_free>
			net_buf_unref(data.buf);
   1b820:	9805      	ldr	r0, [sp, #20]
   1b822:	f010 fee6 	bl	2c5f2 <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
   1b826:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   1b82a:	462a      	mov	r2, r5
   1b82c:	4641      	mov	r1, r8
   1b82e:	4620      	mov	r0, r4
   1b830:	f00f fb74 	bl	2af1c <send_err_rsp>
   1b834:	e7eb      	b.n	1b80e <att_write_rsp+0xaa>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   1b836:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
   1b83a:	e7a4      	b.n	1b786 <att_write_rsp+0x22>
			return BT_ATT_ERR_UNLIKELY;
   1b83c:	260e      	movs	r6, #14
   1b83e:	e7a2      	b.n	1b786 <att_write_rsp+0x22>
   1b840:	0002ab01 	.word	0x0002ab01

0001b844 <bt_att_create_pdu>:
{
   1b844:	b570      	push	{r4, r5, r6, lr}
   1b846:	b082      	sub	sp, #8
   1b848:	460e      	mov	r6, r1
   1b84a:	4615      	mov	r5, r2
	att = att_get(conn);
   1b84c:	f7ff f97e 	bl	1ab4c <att_get>
	if (!att) {
   1b850:	4604      	mov	r4, r0
   1b852:	b300      	cbz	r0, 1b896 <bt_att_create_pdu+0x52>
	return list->head;
   1b854:	6a44      	ldr	r4, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1b856:	b30c      	cbz	r4, 1b89c <bt_att_create_pdu+0x58>
   1b858:	3ce0      	subs	r4, #224	; 0xe0
Z_GENLIST_PEEK_NEXT(slist, snode)
   1b85a:	f114 00e0 	adds.w	r0, r4, #224	; 0xe0
   1b85e:	d007      	beq.n	1b870 <bt_att_create_pdu+0x2c>
	return node->next;
   1b860:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
   1b864:	b120      	cbz	r0, 1b870 <bt_att_create_pdu+0x2c>
   1b866:	38e0      	subs	r0, #224	; 0xe0
   1b868:	e002      	b.n	1b870 <bt_att_create_pdu+0x2c>
   1b86a:	4603      	mov	r3, r0
   1b86c:	4604      	mov	r4, r0
   1b86e:	4618      	mov	r0, r3
   1b870:	b1b4      	cbz	r4, 1b8a0 <bt_att_create_pdu+0x5c>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1b872:	1c6b      	adds	r3, r5, #1
   1b874:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
   1b876:	4293      	cmp	r3, r2
   1b878:	d907      	bls.n	1b88a <bt_att_create_pdu+0x46>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1b87a:	2800      	cmp	r0, #0
   1b87c:	d0f5      	beq.n	1b86a <bt_att_create_pdu+0x26>
   1b87e:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
   1b882:	2b00      	cmp	r3, #0
   1b884:	d0f2      	beq.n	1b86c <bt_att_create_pdu+0x28>
   1b886:	3be0      	subs	r3, #224	; 0xe0
   1b888:	e7f0      	b.n	1b86c <bt_att_create_pdu+0x28>
		return bt_att_chan_create_pdu(chan, op, len);
   1b88a:	462a      	mov	r2, r5
   1b88c:	4631      	mov	r1, r6
   1b88e:	4620      	mov	r0, r4
   1b890:	f7ff fd34 	bl	1b2fc <bt_att_chan_create_pdu>
   1b894:	4604      	mov	r4, r0
}
   1b896:	4620      	mov	r0, r4
   1b898:	b002      	add	sp, #8
   1b89a:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1b89c:	4620      	mov	r0, r4
   1b89e:	e7e7      	b.n	1b870 <bt_att_create_pdu+0x2c>
	LOG_WRN("No ATT channel for MTU %zu", len + sizeof(op));
   1b8a0:	3501      	adds	r5, #1
   1b8a2:	2008      	movs	r0, #8
   1b8a4:	f7f8 fa30 	bl	13d08 <z_log_msg_alloc>
   1b8a8:	2200      	movs	r2, #0
   1b8aa:	f36f 0200 	bfc	r2, #0, #1
   1b8ae:	f36f 0241 	bfc	r2, #1, #1
   1b8b2:	f36f 0282 	bfc	r2, #2, #1
   1b8b6:	f36f 02c5 	bfc	r2, #3, #3
   1b8ba:	2302      	movs	r3, #2
   1b8bc:	f363 1288 	bfi	r2, r3, #6, #3
   1b8c0:	230c      	movs	r3, #12
   1b8c2:	f363 2252 	bfi	r2, r3, #9, #10
   1b8c6:	f36f 42de 	bfc	r2, #19, #12
   1b8ca:	f36f 72df 	bfc	r2, #31, #1
   1b8ce:	4606      	mov	r6, r0
   1b8d0:	b190      	cbz	r0, 1b8f8 <bt_att_create_pdu+0xb4>
   1b8d2:	f110 0310 	adds.w	r3, r0, #16
   1b8d6:	d002      	beq.n	1b8de <bt_att_create_pdu+0x9a>
   1b8d8:	490a      	ldr	r1, [pc, #40]	; (1b904 <bt_att_create_pdu+0xc0>)
   1b8da:	6141      	str	r1, [r0, #20]
   1b8dc:	6185      	str	r5, [r0, #24]
   1b8de:	b15b      	cbz	r3, 1b8f8 <bt_att_create_pdu+0xb4>
   1b8e0:	2303      	movs	r3, #3
   1b8e2:	f88d 3004 	strb.w	r3, [sp, #4]
   1b8e6:	2300      	movs	r3, #0
   1b8e8:	f88d 3005 	strb.w	r3, [sp, #5]
   1b8ec:	f88d 3006 	strb.w	r3, [sp, #6]
   1b8f0:	f88d 3007 	strb.w	r3, [sp, #7]
   1b8f4:	9801      	ldr	r0, [sp, #4]
   1b8f6:	6130      	str	r0, [r6, #16]
   1b8f8:	2300      	movs	r3, #0
   1b8fa:	4903      	ldr	r1, [pc, #12]	; (1b908 <bt_att_create_pdu+0xc4>)
   1b8fc:	4630      	mov	r0, r6
   1b8fe:	f00d fc6c 	bl	291da <z_log_msg_finalize>
	return NULL;
   1b902:	e7c8      	b.n	1b896 <bt_att_create_pdu+0x52>
   1b904:	000330d0 	.word	0x000330d0
   1b908:	00031410 	.word	0x00031410

0001b90c <att_read_group_rsp>:
{
   1b90c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b910:	b08a      	sub	sp, #40	; 0x28
   1b912:	4604      	mov	r4, r0
   1b914:	460f      	mov	r7, r1
   1b916:	4615      	mov	r5, r2
   1b918:	461e      	mov	r6, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   1b91a:	f8d0 8004 	ldr.w	r8, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   1b91e:	2214      	movs	r2, #20
   1b920:	2100      	movs	r1, #0
   1b922:	eb0d 0002 	add.w	r0, sp, r2
   1b926:	f00e f973 	bl	29c10 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   1b92a:	2201      	movs	r2, #1
   1b92c:	2111      	movs	r1, #17
   1b92e:	4640      	mov	r0, r8
   1b930:	f7ff ff88 	bl	1b844 <bt_att_create_pdu>
   1b934:	9007      	str	r0, [sp, #28]
	if (!data.buf) {
   1b936:	b368      	cbz	r0, 1b994 <att_read_group_rsp+0x88>
	data.chan = chan;
   1b938:	9405      	str	r4, [sp, #20]
	data.uuid = uuid;
   1b93a:	9706      	str	r7, [sp, #24]
	return net_buf_simple_add(&buf->b, len);
   1b93c:	2101      	movs	r1, #1
   1b93e:	300c      	adds	r0, #12
   1b940:	f010 fe9e 	bl	2c680 <net_buf_simple_add>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1b944:	9008      	str	r0, [sp, #32]
	data.rsp->len = 0U;
   1b946:	2200      	movs	r2, #0
   1b948:	7002      	strb	r2, [r0, #0]
	data.group = NULL;
   1b94a:	9209      	str	r2, [sp, #36]	; 0x24
   1b94c:	ab05      	add	r3, sp, #20
   1b94e:	9302      	str	r3, [sp, #8]
   1b950:	4b11      	ldr	r3, [pc, #68]	; (1b998 <att_read_group_rsp+0x8c>)
   1b952:	9301      	str	r3, [sp, #4]
   1b954:	9200      	str	r2, [sp, #0]
   1b956:	4613      	mov	r3, r2
   1b958:	4631      	mov	r1, r6
   1b95a:	4628      	mov	r0, r5
   1b95c:	f000 ffd2 	bl	1c904 <bt_gatt_foreach_attr_type>
	if (!data.rsp->len) {
   1b960:	9b08      	ldr	r3, [sp, #32]
   1b962:	781e      	ldrb	r6, [r3, #0]
   1b964:	b146      	cbz	r6, 1b978 <att_read_group_rsp+0x6c>
	bt_att_chan_send_rsp(chan, data.buf);
   1b966:	9907      	ldr	r1, [sp, #28]
   1b968:	4620      	mov	r0, r4
   1b96a:	f00f f884 	bl	2aa76 <bt_att_chan_send_rsp>
	return 0;
   1b96e:	2600      	movs	r6, #0
}
   1b970:	4630      	mov	r0, r6
   1b972:	b00a      	add	sp, #40	; 0x28
   1b974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1b978:	9b07      	ldr	r3, [sp, #28]
   1b97a:	6998      	ldr	r0, [r3, #24]
   1b97c:	f7ff fa52 	bl	1ae24 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1b980:	9807      	ldr	r0, [sp, #28]
   1b982:	f010 fe36 	bl	2c5f2 <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_READ_GROUP_REQ, start_handle,
   1b986:	230a      	movs	r3, #10
   1b988:	462a      	mov	r2, r5
   1b98a:	2110      	movs	r1, #16
   1b98c:	4620      	mov	r0, r4
   1b98e:	f00f fac5 	bl	2af1c <send_err_rsp>
		return 0;
   1b992:	e7ed      	b.n	1b970 <att_read_group_rsp+0x64>
		return BT_ATT_ERR_UNLIKELY;
   1b994:	260e      	movs	r6, #14
   1b996:	e7eb      	b.n	1b970 <att_read_group_rsp+0x64>
   1b998:	0001af35 	.word	0x0001af35

0001b99c <att_read_mult_vl_req>:
{
   1b99c:	b570      	push	{r4, r5, r6, lr}
   1b99e:	b088      	sub	sp, #32
   1b9a0:	4606      	mov	r6, r0
   1b9a2:	460d      	mov	r5, r1
	struct bt_conn *conn = chan->chan.chan.conn;
   1b9a4:	6844      	ldr	r4, [r0, #4]
	if (!bt_gatt_change_aware(conn, true)) {
   1b9a6:	2101      	movs	r1, #1
   1b9a8:	4620      	mov	r0, r4
   1b9aa:	f010 fb1a 	bl	2bfe2 <bt_gatt_change_aware>
   1b9ae:	b950      	cbnz	r0, 1b9c6 <att_read_mult_vl_req+0x2a>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1b9b0:	2105      	movs	r1, #5
   1b9b2:	f106 0090 	add.w	r0, r6, #144	; 0x90
   1b9b6:	f00f fa30 	bl	2ae1a <atomic_test_and_set_bit>
   1b9ba:	b110      	cbz	r0, 1b9c2 <att_read_mult_vl_req+0x26>
			return 0;
   1b9bc:	2000      	movs	r0, #0
}
   1b9be:	b008      	add	sp, #32
   1b9c0:	bd70      	pop	{r4, r5, r6, pc}
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1b9c2:	2012      	movs	r0, #18
   1b9c4:	e7fb      	b.n	1b9be <att_read_mult_vl_req+0x22>
	(void)memset(&data, 0, sizeof(data));
   1b9c6:	2210      	movs	r2, #16
   1b9c8:	2100      	movs	r1, #0
   1b9ca:	eb0d 0002 	add.w	r0, sp, r2
   1b9ce:	f00e f91f 	bl	29c10 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_VL_RSP, 0);
   1b9d2:	2200      	movs	r2, #0
   1b9d4:	2121      	movs	r1, #33	; 0x21
   1b9d6:	4620      	mov	r0, r4
   1b9d8:	f7ff ff34 	bl	1b844 <bt_att_create_pdu>
   1b9dc:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   1b9de:	b378      	cbz	r0, 1ba40 <att_read_mult_vl_req+0xa4>
	data.chan = chan;
   1b9e0:	9604      	str	r6, [sp, #16]
	while (buf->len >= sizeof(uint16_t)) {
   1b9e2:	8a2b      	ldrh	r3, [r5, #16]
   1b9e4:	2b01      	cmp	r3, #1
   1b9e6:	d925      	bls.n	1ba34 <att_read_mult_vl_req+0x98>
	return net_buf_simple_pull_le16(&buf->b);
   1b9e8:	f105 000c 	add.w	r0, r5, #12
   1b9ec:	f010 fe82 	bl	2c6f4 <net_buf_simple_pull_le16>
   1b9f0:	4604      	mov	r4, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1b9f2:	2301      	movs	r3, #1
   1b9f4:	f88d 301c 	strb.w	r3, [sp, #28]
   1b9f8:	ab04      	add	r3, sp, #16
   1b9fa:	9302      	str	r3, [sp, #8]
   1b9fc:	4b11      	ldr	r3, [pc, #68]	; (1ba44 <att_read_mult_vl_req+0xa8>)
   1b9fe:	9301      	str	r3, [sp, #4]
   1ba00:	2200      	movs	r2, #0
   1ba02:	9200      	str	r2, [sp, #0]
   1ba04:	4613      	mov	r3, r2
   1ba06:	4601      	mov	r1, r0
   1ba08:	f000 ff7c 	bl	1c904 <bt_gatt_foreach_attr_type>
		if (data.err) {
   1ba0c:	f89d 301c 	ldrb.w	r3, [sp, #28]
   1ba10:	2b00      	cmp	r3, #0
   1ba12:	d0e6      	beq.n	1b9e2 <att_read_mult_vl_req+0x46>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1ba14:	9b06      	ldr	r3, [sp, #24]
   1ba16:	6998      	ldr	r0, [r3, #24]
   1ba18:	f7ff fa04 	bl	1ae24 <tx_meta_data_free>
			net_buf_unref(data.buf);
   1ba1c:	9806      	ldr	r0, [sp, #24]
   1ba1e:	f010 fde8 	bl	2c5f2 <net_buf_unref>
			send_err_rsp(chan, BT_ATT_OP_READ_MULT_VL_REQ, handle,
   1ba22:	f89d 301c 	ldrb.w	r3, [sp, #28]
   1ba26:	4622      	mov	r2, r4
   1ba28:	2120      	movs	r1, #32
   1ba2a:	4630      	mov	r0, r6
   1ba2c:	f00f fa76 	bl	2af1c <send_err_rsp>
			return 0;
   1ba30:	2000      	movs	r0, #0
   1ba32:	e7c4      	b.n	1b9be <att_read_mult_vl_req+0x22>
	bt_att_chan_send_rsp(chan, data.buf);
   1ba34:	9906      	ldr	r1, [sp, #24]
   1ba36:	4630      	mov	r0, r6
   1ba38:	f00f f81d 	bl	2aa76 <bt_att_chan_send_rsp>
	return 0;
   1ba3c:	2000      	movs	r0, #0
   1ba3e:	e7be      	b.n	1b9be <att_read_mult_vl_req+0x22>
		return BT_ATT_ERR_UNLIKELY;
   1ba40:	200e      	movs	r0, #14
   1ba42:	e7bc      	b.n	1b9be <att_read_mult_vl_req+0x22>
   1ba44:	0002acb5 	.word	0x0002acb5

0001ba48 <att_read_mult_req>:
{
   1ba48:	b570      	push	{r4, r5, r6, lr}
   1ba4a:	b088      	sub	sp, #32
   1ba4c:	4606      	mov	r6, r0
   1ba4e:	460d      	mov	r5, r1
	struct bt_conn *conn = chan->chan.chan.conn;
   1ba50:	6844      	ldr	r4, [r0, #4]
	if (!bt_gatt_change_aware(conn, true)) {
   1ba52:	2101      	movs	r1, #1
   1ba54:	4620      	mov	r0, r4
   1ba56:	f010 fac4 	bl	2bfe2 <bt_gatt_change_aware>
   1ba5a:	b950      	cbnz	r0, 1ba72 <att_read_mult_req+0x2a>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1ba5c:	2105      	movs	r1, #5
   1ba5e:	f106 0090 	add.w	r0, r6, #144	; 0x90
   1ba62:	f00f f9da 	bl	2ae1a <atomic_test_and_set_bit>
   1ba66:	b110      	cbz	r0, 1ba6e <att_read_mult_req+0x26>
			return 0;
   1ba68:	2000      	movs	r0, #0
}
   1ba6a:	b008      	add	sp, #32
   1ba6c:	bd70      	pop	{r4, r5, r6, pc}
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1ba6e:	2012      	movs	r0, #18
   1ba70:	e7fb      	b.n	1ba6a <att_read_mult_req+0x22>
	(void)memset(&data, 0, sizeof(data));
   1ba72:	2210      	movs	r2, #16
   1ba74:	2100      	movs	r1, #0
   1ba76:	eb0d 0002 	add.w	r0, sp, r2
   1ba7a:	f00e f8c9 	bl	29c10 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   1ba7e:	2200      	movs	r2, #0
   1ba80:	210f      	movs	r1, #15
   1ba82:	4620      	mov	r0, r4
   1ba84:	f7ff fede 	bl	1b844 <bt_att_create_pdu>
   1ba88:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   1ba8a:	b378      	cbz	r0, 1baec <att_read_mult_req+0xa4>
	data.chan = chan;
   1ba8c:	9604      	str	r6, [sp, #16]
	while (buf->len >= sizeof(uint16_t)) {
   1ba8e:	8a2b      	ldrh	r3, [r5, #16]
   1ba90:	2b01      	cmp	r3, #1
   1ba92:	d925      	bls.n	1bae0 <att_read_mult_req+0x98>
   1ba94:	f105 000c 	add.w	r0, r5, #12
   1ba98:	f010 fe2c 	bl	2c6f4 <net_buf_simple_pull_le16>
   1ba9c:	4604      	mov	r4, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1ba9e:	2301      	movs	r3, #1
   1baa0:	f88d 301c 	strb.w	r3, [sp, #28]
   1baa4:	ab04      	add	r3, sp, #16
   1baa6:	9302      	str	r3, [sp, #8]
   1baa8:	4b11      	ldr	r3, [pc, #68]	; (1baf0 <att_read_mult_req+0xa8>)
   1baaa:	9301      	str	r3, [sp, #4]
   1baac:	2200      	movs	r2, #0
   1baae:	9200      	str	r2, [sp, #0]
   1bab0:	4613      	mov	r3, r2
   1bab2:	4601      	mov	r1, r0
   1bab4:	f000 ff26 	bl	1c904 <bt_gatt_foreach_attr_type>
		if (data.err) {
   1bab8:	f89d 301c 	ldrb.w	r3, [sp, #28]
   1babc:	2b00      	cmp	r3, #0
   1babe:	d0e6      	beq.n	1ba8e <att_read_mult_req+0x46>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1bac0:	9b06      	ldr	r3, [sp, #24]
   1bac2:	6998      	ldr	r0, [r3, #24]
   1bac4:	f7ff f9ae 	bl	1ae24 <tx_meta_data_free>
			net_buf_unref(data.buf);
   1bac8:	9806      	ldr	r0, [sp, #24]
   1baca:	f010 fd92 	bl	2c5f2 <net_buf_unref>
			send_err_rsp(chan, BT_ATT_OP_READ_MULT_REQ, handle,
   1bace:	f89d 301c 	ldrb.w	r3, [sp, #28]
   1bad2:	4622      	mov	r2, r4
   1bad4:	210e      	movs	r1, #14
   1bad6:	4630      	mov	r0, r6
   1bad8:	f00f fa20 	bl	2af1c <send_err_rsp>
			return 0;
   1badc:	2000      	movs	r0, #0
   1bade:	e7c4      	b.n	1ba6a <att_read_mult_req+0x22>
	bt_att_chan_send_rsp(chan, data.buf);
   1bae0:	9906      	ldr	r1, [sp, #24]
   1bae2:	4630      	mov	r0, r6
   1bae4:	f00e ffc7 	bl	2aa76 <bt_att_chan_send_rsp>
	return 0;
   1bae8:	2000      	movs	r0, #0
   1baea:	e7be      	b.n	1ba6a <att_read_mult_req+0x22>
		return BT_ATT_ERR_UNLIKELY;
   1baec:	200e      	movs	r0, #14
   1baee:	e7bc      	b.n	1ba6a <att_read_mult_req+0x22>
   1baf0:	0002ad1b 	.word	0x0002ad1b

0001baf4 <att_read_rsp>:
{
   1baf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1baf8:	b088      	sub	sp, #32
   1bafa:	4604      	mov	r4, r0
   1bafc:	4688      	mov	r8, r1
   1bafe:	4616      	mov	r6, r2
   1bb00:	461d      	mov	r5, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   1bb02:	6847      	ldr	r7, [r0, #4]
	if (!bt_gatt_change_aware(conn, true)) {
   1bb04:	2101      	movs	r1, #1
   1bb06:	4638      	mov	r0, r7
   1bb08:	f010 fa6b 	bl	2bfe2 <bt_gatt_change_aware>
   1bb0c:	b128      	cbz	r0, 1bb1a <att_read_rsp+0x26>
	if (!handle) {
   1bb0e:	b975      	cbnz	r5, 1bb2e <att_read_rsp+0x3a>
		return BT_ATT_ERR_INVALID_HANDLE;
   1bb10:	2601      	movs	r6, #1
}
   1bb12:	4630      	mov	r0, r6
   1bb14:	b008      	add	sp, #32
   1bb16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1bb1a:	2105      	movs	r1, #5
   1bb1c:	f104 0090 	add.w	r0, r4, #144	; 0x90
   1bb20:	f00f f97b 	bl	2ae1a <atomic_test_and_set_bit>
   1bb24:	b108      	cbz	r0, 1bb2a <att_read_rsp+0x36>
			return 0;
   1bb26:	2600      	movs	r6, #0
   1bb28:	e7f3      	b.n	1bb12 <att_read_rsp+0x1e>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1bb2a:	2612      	movs	r6, #18
   1bb2c:	e7f1      	b.n	1bb12 <att_read_rsp+0x1e>
	(void)memset(&data, 0, sizeof(data));
   1bb2e:	2210      	movs	r2, #16
   1bb30:	2100      	movs	r1, #0
   1bb32:	eb0d 0002 	add.w	r0, sp, r2
   1bb36:	f00e f86b 	bl	29c10 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   1bb3a:	2200      	movs	r2, #0
   1bb3c:	4631      	mov	r1, r6
   1bb3e:	4638      	mov	r0, r7
   1bb40:	f7ff fe80 	bl	1b844 <bt_att_create_pdu>
   1bb44:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   1bb46:	b350      	cbz	r0, 1bb9e <att_read_rsp+0xaa>
	data.chan = chan;
   1bb48:	9404      	str	r4, [sp, #16]
	data.offset = offset;
   1bb4a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   1bb4e:	f8ad 3014 	strh.w	r3, [sp, #20]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1bb52:	2301      	movs	r3, #1
   1bb54:	f88d 301c 	strb.w	r3, [sp, #28]
   1bb58:	ab04      	add	r3, sp, #16
   1bb5a:	9302      	str	r3, [sp, #8]
   1bb5c:	4b11      	ldr	r3, [pc, #68]	; (1bba4 <att_read_rsp+0xb0>)
   1bb5e:	9301      	str	r3, [sp, #4]
   1bb60:	2200      	movs	r2, #0
   1bb62:	9200      	str	r2, [sp, #0]
   1bb64:	4613      	mov	r3, r2
   1bb66:	4629      	mov	r1, r5
   1bb68:	4628      	mov	r0, r5
   1bb6a:	f000 fecb 	bl	1c904 <bt_gatt_foreach_attr_type>
	if (data.err) {
   1bb6e:	f89d 601c 	ldrb.w	r6, [sp, #28]
   1bb72:	b926      	cbnz	r6, 1bb7e <att_read_rsp+0x8a>
	bt_att_chan_send_rsp(chan, data.buf);
   1bb74:	9906      	ldr	r1, [sp, #24]
   1bb76:	4620      	mov	r0, r4
   1bb78:	f00e ff7d 	bl	2aa76 <bt_att_chan_send_rsp>
	return 0;
   1bb7c:	e7c9      	b.n	1bb12 <att_read_rsp+0x1e>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1bb7e:	9b06      	ldr	r3, [sp, #24]
   1bb80:	6998      	ldr	r0, [r3, #24]
   1bb82:	f7ff f94f 	bl	1ae24 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1bb86:	9806      	ldr	r0, [sp, #24]
   1bb88:	f010 fd33 	bl	2c5f2 <net_buf_unref>
		send_err_rsp(chan, op, handle, data.err);
   1bb8c:	f89d 301c 	ldrb.w	r3, [sp, #28]
   1bb90:	462a      	mov	r2, r5
   1bb92:	4641      	mov	r1, r8
   1bb94:	4620      	mov	r0, r4
   1bb96:	f00f f9c1 	bl	2af1c <send_err_rsp>
		return 0;
   1bb9a:	2600      	movs	r6, #0
   1bb9c:	e7b9      	b.n	1bb12 <att_read_rsp+0x1e>
		return BT_ATT_ERR_UNLIKELY;
   1bb9e:	260e      	movs	r6, #14
   1bba0:	e7b7      	b.n	1bb12 <att_read_rsp+0x1e>
   1bba2:	bf00      	nop
   1bba4:	0002ad1b 	.word	0x0002ad1b

0001bba8 <att_read_type_rsp>:
{
   1bba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bbac:	b08a      	sub	sp, #40	; 0x28
   1bbae:	4604      	mov	r4, r0
   1bbb0:	460f      	mov	r7, r1
   1bbb2:	4615      	mov	r5, r2
   1bbb4:	461e      	mov	r6, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   1bbb6:	f8d0 8004 	ldr.w	r8, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   1bbba:	2218      	movs	r2, #24
   1bbbc:	2100      	movs	r1, #0
   1bbbe:	a804      	add	r0, sp, #16
   1bbc0:	f00e f826 	bl	29c10 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   1bbc4:	2201      	movs	r2, #1
   1bbc6:	2109      	movs	r1, #9
   1bbc8:	4640      	mov	r0, r8
   1bbca:	f7ff fe3b 	bl	1b844 <bt_att_create_pdu>
   1bbce:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   1bbd0:	b380      	cbz	r0, 1bc34 <att_read_type_rsp+0x8c>
	data.chan = chan;
   1bbd2:	9404      	str	r4, [sp, #16]
	data.uuid = uuid;
   1bbd4:	9705      	str	r7, [sp, #20]
	return net_buf_simple_add(&buf->b, len);
   1bbd6:	2101      	movs	r1, #1
   1bbd8:	300c      	adds	r0, #12
   1bbda:	f010 fd51 	bl	2c680 <net_buf_simple_add>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1bbde:	9007      	str	r0, [sp, #28]
	data.rsp->len = 0U;
   1bbe0:	2200      	movs	r2, #0
   1bbe2:	7002      	strb	r2, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1bbe4:	230a      	movs	r3, #10
   1bbe6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   1bbea:	ab04      	add	r3, sp, #16
   1bbec:	9302      	str	r3, [sp, #8]
   1bbee:	4b12      	ldr	r3, [pc, #72]	; (1bc38 <att_read_type_rsp+0x90>)
   1bbf0:	9301      	str	r3, [sp, #4]
   1bbf2:	9200      	str	r2, [sp, #0]
   1bbf4:	4613      	mov	r3, r2
   1bbf6:	4631      	mov	r1, r6
   1bbf8:	4628      	mov	r0, r5
   1bbfa:	f000 fe83 	bl	1c904 <bt_gatt_foreach_attr_type>
	if (data.err) {
   1bbfe:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
   1bc02:	b93e      	cbnz	r6, 1bc14 <att_read_type_rsp+0x6c>
	bt_att_chan_send_rsp(chan, data.buf);
   1bc04:	9906      	ldr	r1, [sp, #24]
   1bc06:	4620      	mov	r0, r4
   1bc08:	f00e ff35 	bl	2aa76 <bt_att_chan_send_rsp>
}
   1bc0c:	4630      	mov	r0, r6
   1bc0e:	b00a      	add	sp, #40	; 0x28
   1bc10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1bc14:	9b06      	ldr	r3, [sp, #24]
   1bc16:	6998      	ldr	r0, [r3, #24]
   1bc18:	f7ff f904 	bl	1ae24 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1bc1c:	9806      	ldr	r0, [sp, #24]
   1bc1e:	f010 fce8 	bl	2c5f2 <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_READ_TYPE_REQ, start_handle,
   1bc22:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   1bc26:	462a      	mov	r2, r5
   1bc28:	2108      	movs	r1, #8
   1bc2a:	4620      	mov	r0, r4
   1bc2c:	f00f f976 	bl	2af1c <send_err_rsp>
		return 0;
   1bc30:	2600      	movs	r6, #0
   1bc32:	e7eb      	b.n	1bc0c <att_read_type_rsp+0x64>
		return BT_ATT_ERR_UNLIKELY;
   1bc34:	260e      	movs	r6, #14
   1bc36:	e7e9      	b.n	1bc0c <att_read_type_rsp+0x64>
   1bc38:	0001afe9 	.word	0x0001afe9

0001bc3c <att_find_type_rsp>:
{
   1bc3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bc40:	b08a      	sub	sp, #40	; 0x28
   1bc42:	4604      	mov	r4, r0
   1bc44:	460d      	mov	r5, r1
   1bc46:	4616      	mov	r6, r2
   1bc48:	461f      	mov	r7, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   1bc4a:	f8d0 8004 	ldr.w	r8, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   1bc4e:	2214      	movs	r2, #20
   1bc50:	2100      	movs	r1, #0
   1bc52:	eb0d 0002 	add.w	r0, sp, r2
   1bc56:	f00d ffdb 	bl	29c10 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   1bc5a:	2200      	movs	r2, #0
   1bc5c:	2107      	movs	r1, #7
   1bc5e:	4640      	mov	r0, r8
   1bc60:	f7ff fdf0 	bl	1b844 <bt_att_create_pdu>
   1bc64:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   1bc66:	b378      	cbz	r0, 1bcc8 <att_find_type_rsp+0x8c>
	data.chan = chan;
   1bc68:	9405      	str	r4, [sp, #20]
	data.group = NULL;
   1bc6a:	2200      	movs	r2, #0
   1bc6c:	9207      	str	r2, [sp, #28]
	data.value = value;
   1bc6e:	9708      	str	r7, [sp, #32]
	data.value_len = value_len;
   1bc70:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   1bc74:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1bc78:	230a      	movs	r3, #10
   1bc7a:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   1bc7e:	ab05      	add	r3, sp, #20
   1bc80:	9302      	str	r3, [sp, #8]
   1bc82:	4b12      	ldr	r3, [pc, #72]	; (1bccc <att_find_type_rsp+0x90>)
   1bc84:	9301      	str	r3, [sp, #4]
   1bc86:	9200      	str	r2, [sp, #0]
   1bc88:	4613      	mov	r3, r2
   1bc8a:	4631      	mov	r1, r6
   1bc8c:	4628      	mov	r0, r5
   1bc8e:	f000 fe39 	bl	1c904 <bt_gatt_foreach_attr_type>
	if (data.err) {
   1bc92:	f89d 6025 	ldrb.w	r6, [sp, #37]	; 0x25
   1bc96:	b93e      	cbnz	r6, 1bca8 <att_find_type_rsp+0x6c>
	bt_att_chan_send_rsp(chan, data.buf);
   1bc98:	9906      	ldr	r1, [sp, #24]
   1bc9a:	4620      	mov	r0, r4
   1bc9c:	f00e feeb 	bl	2aa76 <bt_att_chan_send_rsp>
}
   1bca0:	4630      	mov	r0, r6
   1bca2:	b00a      	add	sp, #40	; 0x28
   1bca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1bca8:	9b06      	ldr	r3, [sp, #24]
   1bcaa:	6998      	ldr	r0, [r3, #24]
   1bcac:	f7ff f8ba 	bl	1ae24 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1bcb0:	9806      	ldr	r0, [sp, #24]
   1bcb2:	f010 fc9e 	bl	2c5f2 <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
   1bcb6:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   1bcba:	462a      	mov	r2, r5
   1bcbc:	2106      	movs	r1, #6
   1bcbe:	4620      	mov	r0, r4
   1bcc0:	f00f f92c 	bl	2af1c <send_err_rsp>
		return 0;
   1bcc4:	2600      	movs	r6, #0
   1bcc6:	e7eb      	b.n	1bca0 <att_find_type_rsp+0x64>
		return BT_ATT_ERR_UNLIKELY;
   1bcc8:	260e      	movs	r6, #14
   1bcca:	e7e9      	b.n	1bca0 <att_find_type_rsp+0x64>
   1bccc:	0001b091 	.word	0x0001b091

0001bcd0 <att_find_info_rsp>:
{
   1bcd0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bcd2:	b089      	sub	sp, #36	; 0x24
   1bcd4:	4604      	mov	r4, r0
   1bcd6:	460f      	mov	r7, r1
   1bcd8:	4616      	mov	r6, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   1bcda:	6845      	ldr	r5, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   1bcdc:	2210      	movs	r2, #16
   1bcde:	2100      	movs	r1, #0
   1bce0:	eb0d 0002 	add.w	r0, sp, r2
   1bce4:	f00d ff94 	bl	29c10 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   1bce8:	2200      	movs	r2, #0
   1bcea:	2105      	movs	r1, #5
   1bcec:	4628      	mov	r0, r5
   1bcee:	f7ff fda9 	bl	1b844 <bt_att_create_pdu>
   1bcf2:	9005      	str	r0, [sp, #20]
	if (!data.buf) {
   1bcf4:	b318      	cbz	r0, 1bd3e <att_find_info_rsp+0x6e>
	data.chan = chan;
   1bcf6:	9404      	str	r4, [sp, #16]
   1bcf8:	ab04      	add	r3, sp, #16
   1bcfa:	9302      	str	r3, [sp, #8]
   1bcfc:	4b11      	ldr	r3, [pc, #68]	; (1bd44 <att_find_info_rsp+0x74>)
   1bcfe:	9301      	str	r3, [sp, #4]
   1bd00:	2200      	movs	r2, #0
   1bd02:	9200      	str	r2, [sp, #0]
   1bd04:	4613      	mov	r3, r2
   1bd06:	4631      	mov	r1, r6
   1bd08:	4638      	mov	r0, r7
   1bd0a:	f000 fdfb 	bl	1c904 <bt_gatt_foreach_attr_type>
	if (!data.rsp) {
   1bd0e:	9b06      	ldr	r3, [sp, #24]
   1bd10:	b133      	cbz	r3, 1bd20 <att_find_info_rsp+0x50>
	bt_att_chan_send_rsp(chan, data.buf);
   1bd12:	9905      	ldr	r1, [sp, #20]
   1bd14:	4620      	mov	r0, r4
   1bd16:	f00e feae 	bl	2aa76 <bt_att_chan_send_rsp>
	return 0;
   1bd1a:	2000      	movs	r0, #0
}
   1bd1c:	b009      	add	sp, #36	; 0x24
   1bd1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1bd20:	9b05      	ldr	r3, [sp, #20]
   1bd22:	6998      	ldr	r0, [r3, #24]
   1bd24:	f7ff f87e 	bl	1ae24 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1bd28:	9805      	ldr	r0, [sp, #20]
   1bd2a:	f010 fc62 	bl	2c5f2 <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_FIND_INFO_REQ, start_handle,
   1bd2e:	230a      	movs	r3, #10
   1bd30:	463a      	mov	r2, r7
   1bd32:	2104      	movs	r1, #4
   1bd34:	4620      	mov	r0, r4
   1bd36:	f00f f8f1 	bl	2af1c <send_err_rsp>
		return 0;
   1bd3a:	2000      	movs	r0, #0
   1bd3c:	e7ee      	b.n	1bd1c <att_find_info_rsp+0x4c>
		return BT_ATT_ERR_UNLIKELY;
   1bd3e:	200e      	movs	r0, #14
   1bd40:	e7ec      	b.n	1bd1c <att_find_info_rsp+0x4c>
   1bd42:	bf00      	nop
   1bd44:	0002ad63 	.word	0x0002ad63

0001bd48 <bt_att_init>:
	bt_l2cap_register_ecred_cb(&cb);
#endif /* CONFIG_BT_EATT */
}

void bt_att_init(void)
{
   1bd48:	b510      	push	{r4, lr}
	z_impl_k_queue_init(queue);
   1bd4a:	4809      	ldr	r0, [pc, #36]	; (1bd70 <bt_att_init+0x28>)
   1bd4c:	f014 fb86 	bl	3045c <z_impl_k_queue_init>
	k_fifo_init(&free_att_tx_meta_data);
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
   1bd50:	2400      	movs	r4, #0
   1bd52:	e008      	b.n	1bd66 <bt_att_init+0x1e>
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
   1bd54:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1bd58:	0093      	lsls	r3, r2, #2
   1bd5a:	4906      	ldr	r1, [pc, #24]	; (1bd74 <bt_att_init+0x2c>)
   1bd5c:	4419      	add	r1, r3
   1bd5e:	4804      	ldr	r0, [pc, #16]	; (1bd70 <bt_att_init+0x28>)
   1bd60:	f014 fb88 	bl	30474 <k_queue_append>
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
   1bd64:	3401      	adds	r4, #1
   1bd66:	2c02      	cmp	r4, #2
   1bd68:	d9f4      	bls.n	1bd54 <bt_att_init+0xc>
	}

	bt_gatt_init();
   1bd6a:	f000 fd65 	bl	1c838 <bt_gatt_init>

	if (IS_ENABLED(CONFIG_BT_EATT)) {
		bt_eatt_init();
	}
}
   1bd6e:	bd10      	pop	{r4, pc}
   1bd70:	20000b00 	.word	0x20000b00
   1bd74:	200081a0 	.word	0x200081a0

0001bd78 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   1bd78:	b530      	push	{r4, r5, lr}
   1bd7a:	b083      	sub	sp, #12
   1bd7c:	4605      	mov	r5, r0
   1bd7e:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   1bd80:	2300      	movs	r3, #0
   1bd82:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   1bd84:	f00b f9d2 	bl	2712c <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
   1bd88:	4b0b      	ldr	r3, [pc, #44]	; (1bdb8 <bt_att_req_alloc+0x40>)
   1bd8a:	681b      	ldr	r3, [r3, #0]
   1bd8c:	4283      	cmp	r3, r0
   1bd8e:	d00e      	beq.n	1bdae <bt_att_req_alloc+0x36>
		 */
		timeout = K_NO_WAIT;
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   1bd90:	462a      	mov	r2, r5
   1bd92:	4623      	mov	r3, r4
   1bd94:	a901      	add	r1, sp, #4
   1bd96:	4809      	ldr	r0, [pc, #36]	; (1bdbc <bt_att_req_alloc+0x44>)
   1bd98:	f00a f9cc 	bl	26134 <k_mem_slab_alloc>
   1bd9c:	b950      	cbnz	r0, 1bdb4 <bt_att_req_alloc+0x3c>
		return NULL;
	}

	LOG_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   1bd9e:	2210      	movs	r2, #16
   1bda0:	2100      	movs	r1, #0
   1bda2:	9801      	ldr	r0, [sp, #4]
   1bda4:	f00d ff34 	bl	29c10 <memset>

	return req;
   1bda8:	9801      	ldr	r0, [sp, #4]
}
   1bdaa:	b003      	add	sp, #12
   1bdac:	bd30      	pop	{r4, r5, pc}
		timeout = K_NO_WAIT;
   1bdae:	2500      	movs	r5, #0
   1bdb0:	462c      	mov	r4, r5
   1bdb2:	e7ed      	b.n	1bd90 <bt_att_req_alloc+0x18>
		return NULL;
   1bdb4:	2000      	movs	r0, #0
   1bdb6:	e7f8      	b.n	1bdaa <bt_att_req_alloc+0x32>
   1bdb8:	200081dc 	.word	0x200081dc
   1bdbc:	20000aa4 	.word	0x20000aa4

0001bdc0 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   1bdc0:	b500      	push	{lr}
   1bdc2:	b083      	sub	sp, #12
   1bdc4:	9001      	str	r0, [sp, #4]
	LOG_DBG("req %p", req);

	if (req->buf) {
   1bdc6:	6883      	ldr	r3, [r0, #8]
   1bdc8:	b14b      	cbz	r3, 1bdde <bt_att_req_free+0x1e>
		tx_meta_data_free(bt_att_tx_meta_data(req->buf));
   1bdca:	6998      	ldr	r0, [r3, #24]
   1bdcc:	f7ff f82a 	bl	1ae24 <tx_meta_data_free>
		net_buf_unref(req->buf);
   1bdd0:	9b01      	ldr	r3, [sp, #4]
   1bdd2:	6898      	ldr	r0, [r3, #8]
   1bdd4:	f010 fc0d 	bl	2c5f2 <net_buf_unref>
		req->buf = NULL;
   1bdd8:	9b01      	ldr	r3, [sp, #4]
   1bdda:	2200      	movs	r2, #0
   1bddc:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   1bdde:	a901      	add	r1, sp, #4
   1bde0:	4802      	ldr	r0, [pc, #8]	; (1bdec <bt_att_req_free+0x2c>)
   1bde2:	f014 fa0a 	bl	301fa <k_mem_slab_free>
}
   1bde6:	b003      	add	sp, #12
   1bde8:	f85d fb04 	ldr.w	pc, [sp], #4
   1bdec:	20000aa4 	.word	0x20000aa4

0001bdf0 <att_handle_rsp>:
{
   1bdf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1bdf4:	b084      	sub	sp, #16
   1bdf6:	4604      	mov	r4, r0
   1bdf8:	460f      	mov	r7, r1
   1bdfa:	4691      	mov	r9, r2
   1bdfc:	461e      	mov	r6, r3
	k_work_cancel_delayable(&chan->timeout_work);
   1bdfe:	30b0      	adds	r0, #176	; 0xb0
   1be00:	f014 fcb5 	bl	3076e <k_work_cancel_delayable>
	if (!chan->req) {
   1be04:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
   1be08:	b1f8      	cbz	r0, 1be4a <att_handle_rsp+0x5a>
	if (chan->req == &cancel) {
   1be0a:	4b2a      	ldr	r3, [pc, #168]	; (1beb4 <att_handle_rsp+0xc4>)
   1be0c:	4298      	cmp	r0, r3
   1be0e:	d04d      	beq.n	1beac <att_handle_rsp+0xbc>
	func = chan->req->func;
   1be10:	6845      	ldr	r5, [r0, #4]
	chan->req->func = NULL;
   1be12:	f04f 0a00 	mov.w	sl, #0
   1be16:	f8c0 a004 	str.w	sl, [r0, #4]
	params = chan->req->user_data;
   1be1a:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
   1be1e:	f8d0 800c 	ldr.w	r8, [r0, #12]
	bt_att_req_free(chan->req);
   1be22:	f7ff ffcd 	bl	1bdc0 <bt_att_req_free>
	chan->req = NULL;
   1be26:	f8c4 a094 	str.w	sl, [r4, #148]	; 0x94
	att_req_send_process(chan->att);
   1be2a:	6820      	ldr	r0, [r4, #0]
   1be2c:	f00e fcf0 	bl	2a810 <att_req_send_process>
	if (func) {
   1be30:	b13d      	cbz	r5, 1be42 <att_handle_rsp+0x52>
		func(chan->att->conn, err, pdu, len, params);
   1be32:	6823      	ldr	r3, [r4, #0]
   1be34:	6818      	ldr	r0, [r3, #0]
   1be36:	f8cd 8000 	str.w	r8, [sp]
   1be3a:	464b      	mov	r3, r9
   1be3c:	463a      	mov	r2, r7
   1be3e:	4631      	mov	r1, r6
   1be40:	47a8      	blx	r5
}
   1be42:	2000      	movs	r0, #0
   1be44:	b004      	add	sp, #16
   1be46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		LOG_WRN("No pending ATT request");
   1be4a:	2006      	movs	r0, #6
   1be4c:	f7f7 ff5c 	bl	13d08 <z_log_msg_alloc>
   1be50:	2200      	movs	r2, #0
   1be52:	f36f 0200 	bfc	r2, #0, #1
   1be56:	f36f 0241 	bfc	r2, #1, #1
   1be5a:	f36f 0282 	bfc	r2, #2, #1
   1be5e:	f36f 02c5 	bfc	r2, #3, #3
   1be62:	2302      	movs	r3, #2
   1be64:	f363 1288 	bfi	r2, r3, #6, #3
   1be68:	2308      	movs	r3, #8
   1be6a:	f363 2252 	bfi	r2, r3, #9, #10
   1be6e:	f36f 42de 	bfc	r2, #19, #12
   1be72:	f36f 72df 	bfc	r2, #31, #1
   1be76:	4605      	mov	r5, r0
   1be78:	b188      	cbz	r0, 1be9e <att_handle_rsp+0xae>
   1be7a:	f110 0310 	adds.w	r3, r0, #16
   1be7e:	d001      	beq.n	1be84 <att_handle_rsp+0x94>
   1be80:	490d      	ldr	r1, [pc, #52]	; (1beb8 <att_handle_rsp+0xc8>)
   1be82:	6141      	str	r1, [r0, #20]
   1be84:	b15b      	cbz	r3, 1be9e <att_handle_rsp+0xae>
   1be86:	2302      	movs	r3, #2
   1be88:	f88d 300c 	strb.w	r3, [sp, #12]
   1be8c:	2300      	movs	r3, #0
   1be8e:	f88d 300d 	strb.w	r3, [sp, #13]
   1be92:	f88d 300e 	strb.w	r3, [sp, #14]
   1be96:	f88d 300f 	strb.w	r3, [sp, #15]
   1be9a:	9803      	ldr	r0, [sp, #12]
   1be9c:	6128      	str	r0, [r5, #16]
   1be9e:	2300      	movs	r3, #0
   1bea0:	4906      	ldr	r1, [pc, #24]	; (1bebc <att_handle_rsp+0xcc>)
   1bea2:	4628      	mov	r0, r5
   1bea4:	f00d f999 	bl	291da <z_log_msg_finalize>
	bt_att_func_t func = NULL;
   1bea8:	2500      	movs	r5, #0
		goto process;
   1beaa:	e7be      	b.n	1be2a <att_handle_rsp+0x3a>
		chan->req = NULL;
   1beac:	2500      	movs	r5, #0
   1beae:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
		goto process;
   1beb2:	e7ba      	b.n	1be2a <att_handle_rsp+0x3a>
   1beb4:	200081e0 	.word	0x200081e0
   1beb8:	000330ec 	.word	0x000330ec
   1bebc:	00031410 	.word	0x00031410

0001bec0 <att_error_rsp>:
{
   1bec0:	b508      	push	{r3, lr}
	rsp = (void *)buf->data;
   1bec2:	68ca      	ldr	r2, [r1, #12]
	if (!chan->req || chan->req == &cancel || !rsp->error) {
   1bec4:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
   1bec8:	b14b      	cbz	r3, 1bede <att_error_rsp+0x1e>
   1beca:	4908      	ldr	r1, [pc, #32]	; (1beec <att_error_rsp+0x2c>)
   1becc:	428b      	cmp	r3, r1
   1bece:	d008      	beq.n	1bee2 <att_error_rsp+0x22>
   1bed0:	78d3      	ldrb	r3, [r2, #3]
   1bed2:	b143      	cbz	r3, 1bee6 <att_error_rsp+0x26>
	return att_handle_rsp(chan, NULL, 0, err);
   1bed4:	2200      	movs	r2, #0
   1bed6:	4611      	mov	r1, r2
   1bed8:	f7ff ff8a 	bl	1bdf0 <att_handle_rsp>
}
   1bedc:	bd08      	pop	{r3, pc}
		err = BT_ATT_ERR_UNLIKELY;
   1bede:	230e      	movs	r3, #14
   1bee0:	e7f8      	b.n	1bed4 <att_error_rsp+0x14>
   1bee2:	230e      	movs	r3, #14
   1bee4:	e7f6      	b.n	1bed4 <att_error_rsp+0x14>
   1bee6:	230e      	movs	r3, #14
   1bee8:	e7f4      	b.n	1bed4 <att_error_rsp+0x14>
   1beea:	bf00      	nop
   1beec:	200081e0 	.word	0x200081e0

0001bef0 <att_reset>:
{
   1bef0:	b530      	push	{r4, r5, lr}
   1bef2:	b085      	sub	sp, #20
   1bef4:	9003      	str	r0, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   1bef6:	e005      	b.n	1bf04 <att_reset+0x14>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   1bef8:	69a0      	ldr	r0, [r4, #24]
   1befa:	f7fe ff93 	bl	1ae24 <tx_meta_data_free>
		net_buf_unref(buf);
   1befe:	4620      	mov	r0, r4
   1bf00:	f010 fb77 	bl	2c5f2 <net_buf_unref>
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   1bf04:	2200      	movs	r2, #0
   1bf06:	2300      	movs	r3, #0
   1bf08:	9803      	ldr	r0, [sp, #12]
   1bf0a:	300c      	adds	r0, #12
   1bf0c:	f010 fb31 	bl	2c572 <net_buf_get>
   1bf10:	4604      	mov	r4, r0
   1bf12:	2800      	cmp	r0, #0
   1bf14:	d1f0      	bne.n	1bef8 <att_reset+0x8>
   1bf16:	e00b      	b.n	1bf30 <att_reset+0x40>
	list->tail = node;
   1bf18:	609a      	str	r2, [r3, #8]
}
   1bf1a:	e011      	b.n	1bf40 <att_reset+0x50>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   1bf1c:	6818      	ldr	r0, [r3, #0]
   1bf1e:	68e3      	ldr	r3, [r4, #12]
   1bf20:	9300      	str	r3, [sp, #0]
   1bf22:	2300      	movs	r3, #0
   1bf24:	461a      	mov	r2, r3
   1bf26:	210e      	movs	r1, #14
   1bf28:	47a8      	blx	r5
		bt_att_req_free(req);
   1bf2a:	4620      	mov	r0, r4
   1bf2c:	f7ff ff48 	bl	1bdc0 <bt_att_req_free>
	while (!sys_slist_is_empty(&att->reqs)) {
   1bf30:	9b03      	ldr	r3, [sp, #12]
	return list->head;
   1bf32:	685c      	ldr	r4, [r3, #4]
   1bf34:	b144      	cbz	r4, 1bf48 <att_reset+0x58>
	return node->next;
   1bf36:	6822      	ldr	r2, [r4, #0]
	list->head = node;
   1bf38:	605a      	str	r2, [r3, #4]
	return list->tail;
   1bf3a:	6899      	ldr	r1, [r3, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1bf3c:	42a1      	cmp	r1, r4
   1bf3e:	d0eb      	beq.n	1bf18 <att_reset+0x28>
		if (req->func) {
   1bf40:	6865      	ldr	r5, [r4, #4]
   1bf42:	2d00      	cmp	r5, #0
   1bf44:	d1ea      	bne.n	1bf1c <att_reset+0x2c>
   1bf46:	e7f0      	b.n	1bf2a <att_reset+0x3a>
	att->conn = NULL;
   1bf48:	2200      	movs	r2, #0
   1bf4a:	601a      	str	r2, [r3, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   1bf4c:	a903      	add	r1, sp, #12
   1bf4e:	4802      	ldr	r0, [pc, #8]	; (1bf58 <att_reset+0x68>)
   1bf50:	f014 f953 	bl	301fa <k_mem_slab_free>
}
   1bf54:	b005      	add	sp, #20
   1bf56:	bd30      	pop	{r4, r5, pc}
   1bf58:	20000a34 	.word	0x20000a34

0001bf5c <att_timeout>:
{
   1bf5c:	b510      	push	{r4, lr}
   1bf5e:	b082      	sub	sp, #8
   1bf60:	4604      	mov	r4, r0
	LOG_ERR("ATT Timeout");
   1bf62:	2006      	movs	r0, #6
   1bf64:	f7f7 fed0 	bl	13d08 <z_log_msg_alloc>
   1bf68:	2200      	movs	r2, #0
   1bf6a:	f36f 0200 	bfc	r2, #0, #1
   1bf6e:	f36f 0241 	bfc	r2, #1, #1
   1bf72:	f36f 0282 	bfc	r2, #2, #1
   1bf76:	f36f 02c5 	bfc	r2, #3, #3
   1bf7a:	2301      	movs	r3, #1
   1bf7c:	f363 1288 	bfi	r2, r3, #6, #3
   1bf80:	2308      	movs	r3, #8
   1bf82:	f363 2252 	bfi	r2, r3, #9, #10
   1bf86:	f36f 42de 	bfc	r2, #19, #12
   1bf8a:	f36f 72df 	bfc	r2, #31, #1
   1bf8e:	4684      	mov	ip, r0
   1bf90:	b190      	cbz	r0, 1bfb8 <att_timeout+0x5c>
   1bf92:	f110 0310 	adds.w	r3, r0, #16
   1bf96:	d001      	beq.n	1bf9c <att_timeout+0x40>
   1bf98:	490d      	ldr	r1, [pc, #52]	; (1bfd0 <att_timeout+0x74>)
   1bf9a:	6141      	str	r1, [r0, #20]
   1bf9c:	b163      	cbz	r3, 1bfb8 <att_timeout+0x5c>
   1bf9e:	2302      	movs	r3, #2
   1bfa0:	f88d 3004 	strb.w	r3, [sp, #4]
   1bfa4:	2300      	movs	r3, #0
   1bfa6:	f88d 3005 	strb.w	r3, [sp, #5]
   1bfaa:	f88d 3006 	strb.w	r3, [sp, #6]
   1bfae:	f88d 3007 	strb.w	r3, [sp, #7]
   1bfb2:	9801      	ldr	r0, [sp, #4]
   1bfb4:	f8cc 0010 	str.w	r0, [ip, #16]
   1bfb8:	2300      	movs	r3, #0
   1bfba:	4906      	ldr	r1, [pc, #24]	; (1bfd4 <att_timeout+0x78>)
   1bfbc:	4660      	mov	r0, ip
   1bfbe:	f00d f90c 	bl	291da <z_log_msg_finalize>
	bt_att_disconnected(&chan->chan.chan);
   1bfc2:	f1a4 00ac 	sub.w	r0, r4, #172	; 0xac
   1bfc6:	f00f f9c4 	bl	2b352 <bt_att_disconnected>
}
   1bfca:	b002      	add	sp, #8
   1bfcc:	bd10      	pop	{r4, pc}
   1bfce:	bf00      	nop
   1bfd0:	00033104 	.word	0x00033104
   1bfd4:	00031410 	.word	0x00031410

0001bfd8 <bt_att_chan_req_cancel>:
	return 0;
}

static bool bt_att_chan_req_cancel(struct bt_att_chan *chan,
				   struct bt_att_req *req)
{
   1bfd8:	b508      	push	{r3, lr}
	if (chan->req != req) {
   1bfda:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
   1bfde:	428b      	cmp	r3, r1
   1bfe0:	d001      	beq.n	1bfe6 <bt_att_chan_req_cancel+0xe>
		return false;
   1bfe2:	2000      	movs	r0, #0
	chan->req = &cancel;

	bt_att_req_free(req);

	return true;
}
   1bfe4:	bd08      	pop	{r3, pc}
	chan->req = &cancel;
   1bfe6:	4b04      	ldr	r3, [pc, #16]	; (1bff8 <bt_att_chan_req_cancel+0x20>)
   1bfe8:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
	bt_att_req_free(req);
   1bfec:	4608      	mov	r0, r1
   1bfee:	f7ff fee7 	bl	1bdc0 <bt_att_req_free>
	return true;
   1bff2:	2001      	movs	r0, #1
   1bff4:	e7f6      	b.n	1bfe4 <bt_att_chan_req_cancel+0xc>
   1bff6:	bf00      	nop
   1bff8:	200081e0 	.word	0x200081e0

0001bffc <bt_gatt_service_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1bffc:	4b0d      	ldr	r3, [pc, #52]	; (1c034 <bt_gatt_service_init+0x38>)
   1bffe:	2201      	movs	r2, #1
   1c000:	f3bf 8f5b 	dmb	ish
   1c004:	e853 1f00 	ldrex	r1, [r3]
   1c008:	2900      	cmp	r1, #0
   1c00a:	d103      	bne.n	1c014 <bt_gatt_service_init+0x18>
   1c00c:	e843 2000 	strex	r0, r2, [r3]
   1c010:	2800      	cmp	r0, #0
   1c012:	d1f7      	bne.n	1c004 <bt_gatt_service_init+0x8>
   1c014:	f3bf 8f5b 	dmb	ish
}
#endif

static void bt_gatt_service_init(void)
{
	if (!atomic_cas(&service_init, 0, 1)) {
   1c018:	d101      	bne.n	1c01e <bt_gatt_service_init+0x22>
		return;
	}

	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1c01a:	4b07      	ldr	r3, [pc, #28]	; (1c038 <bt_gatt_service_init+0x3c>)
   1c01c:	e006      	b.n	1c02c <bt_gatt_service_init+0x30>
   1c01e:	4770      	bx	lr
		last_static_handle += svc->attr_count;
   1c020:	685a      	ldr	r2, [r3, #4]
   1c022:	4906      	ldr	r1, [pc, #24]	; (1c03c <bt_gatt_service_init+0x40>)
   1c024:	8808      	ldrh	r0, [r1, #0]
   1c026:	4402      	add	r2, r0
   1c028:	800a      	strh	r2, [r1, #0]
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1c02a:	3308      	adds	r3, #8
   1c02c:	4a04      	ldr	r2, [pc, #16]	; (1c040 <bt_gatt_service_init+0x44>)
   1c02e:	4293      	cmp	r3, r2
   1c030:	d3f6      	bcc.n	1c020 <bt_gatt_service_init+0x24>
	}
}
   1c032:	4770      	bx	lr
   1c034:	20008390 	.word	0x20008390
   1c038:	000313f0 	.word	0x000313f0
   1c03c:	200090b4 	.word	0x200090b4
   1c040:	00031400 	.word	0x00031400

0001c044 <gatt_exchange_mtu_func>:

#if defined(CONFIG_BT_GATT_AUTO_UPDATE_MTU)
static void gatt_exchange_mtu_func(struct bt_conn *conn, uint8_t err,
				   struct bt_gatt_exchange_params *params)
{
	if (err) {
   1c044:	b901      	cbnz	r1, 1c048 <gatt_exchange_mtu_func+0x4>
   1c046:	4770      	bx	lr
{
   1c048:	b530      	push	{r4, r5, lr}
   1c04a:	b083      	sub	sp, #12
   1c04c:	4604      	mov	r4, r0
   1c04e:	460d      	mov	r5, r1
		LOG_WRN("conn %p err 0x%02x", conn, err);
   1c050:	2008      	movs	r0, #8
   1c052:	f7f7 fe59 	bl	13d08 <z_log_msg_alloc>
   1c056:	2200      	movs	r2, #0
   1c058:	f36f 0200 	bfc	r2, #0, #1
   1c05c:	f36f 0241 	bfc	r2, #1, #1
   1c060:	f36f 0282 	bfc	r2, #2, #1
   1c064:	f36f 02c5 	bfc	r2, #3, #3
   1c068:	2302      	movs	r3, #2
   1c06a:	f363 1288 	bfi	r2, r3, #6, #3
   1c06e:	2310      	movs	r3, #16
   1c070:	f363 2252 	bfi	r2, r3, #9, #10
   1c074:	f36f 42de 	bfc	r2, #19, #12
   1c078:	f36f 72df 	bfc	r2, #31, #1
   1c07c:	4684      	mov	ip, r0
   1c07e:	b198      	cbz	r0, 1c0a8 <gatt_exchange_mtu_func+0x64>
   1c080:	18c3      	adds	r3, r0, r3
   1c082:	d003      	beq.n	1c08c <gatt_exchange_mtu_func+0x48>
   1c084:	490c      	ldr	r1, [pc, #48]	; (1c0b8 <gatt_exchange_mtu_func+0x74>)
   1c086:	6141      	str	r1, [r0, #20]
   1c088:	6184      	str	r4, [r0, #24]
   1c08a:	61c5      	str	r5, [r0, #28]
   1c08c:	b163      	cbz	r3, 1c0a8 <gatt_exchange_mtu_func+0x64>
   1c08e:	2304      	movs	r3, #4
   1c090:	f88d 3004 	strb.w	r3, [sp, #4]
   1c094:	2300      	movs	r3, #0
   1c096:	f88d 3005 	strb.w	r3, [sp, #5]
   1c09a:	f88d 3006 	strb.w	r3, [sp, #6]
   1c09e:	f88d 3007 	strb.w	r3, [sp, #7]
   1c0a2:	9801      	ldr	r0, [sp, #4]
   1c0a4:	f8cc 0010 	str.w	r0, [ip, #16]
   1c0a8:	2300      	movs	r3, #0
   1c0aa:	4904      	ldr	r1, [pc, #16]	; (1c0bc <gatt_exchange_mtu_func+0x78>)
   1c0ac:	4660      	mov	r0, ip
   1c0ae:	f00d f894 	bl	291da <z_log_msg_finalize>
	}
}
   1c0b2:	b003      	add	sp, #12
   1c0b4:	bd30      	pop	{r4, r5, pc}
   1c0b6:	bf00      	nop
   1c0b8:	00033208 	.word	0x00033208
   1c0bc:	00031420 	.word	0x00031420

0001c0c0 <find_cf_cfg>:
{
   1c0c0:	b570      	push	{r4, r5, r6, lr}
   1c0c2:	4606      	mov	r6, r0
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   1c0c4:	2400      	movs	r4, #0
   1c0c6:	e007      	b.n	1c0d8 <find_cf_cfg+0x18>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1c0c8:	4628      	mov	r0, r5
	return memcmp(a, b, sizeof(*a));
   1c0ca:	2207      	movs	r2, #7
   1c0cc:	490d      	ldr	r1, [pc, #52]	; (1c104 <find_cf_cfg+0x44>)
   1c0ce:	3001      	adds	r0, #1
   1c0d0:	f00d fd5d 	bl	29b8e <memcmp>
   1c0d4:	b1a0      	cbz	r0, 1c100 <find_cf_cfg+0x40>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   1c0d6:	3401      	adds	r4, #1
   1c0d8:	2c07      	cmp	r4, #7
   1c0da:	d810      	bhi.n	1c0fe <find_cf_cfg+0x3e>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1c0dc:	4d0a      	ldr	r5, [pc, #40]	; (1c108 <find_cf_cfg+0x48>)
   1c0de:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (!conn) {
   1c0e2:	2e00      	cmp	r6, #0
   1c0e4:	d0f0      	beq.n	1c0c8 <find_cf_cfg+0x8>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1c0e6:	0123      	lsls	r3, r4, #4
   1c0e8:	4907      	ldr	r1, [pc, #28]	; (1c108 <find_cf_cfg+0x48>)
   1c0ea:	eb01 1204 	add.w	r2, r1, r4, lsl #4
   1c0ee:	3201      	adds	r2, #1
   1c0f0:	5cc9      	ldrb	r1, [r1, r3]
   1c0f2:	4630      	mov	r0, r6
   1c0f4:	f00e f968 	bl	2a3c8 <bt_conn_is_peer_addr_le>
   1c0f8:	2800      	cmp	r0, #0
   1c0fa:	d0ec      	beq.n	1c0d6 <find_cf_cfg+0x16>
   1c0fc:	e000      	b.n	1c100 <find_cf_cfg+0x40>
	return NULL;
   1c0fe:	2500      	movs	r5, #0
}
   1c100:	4628      	mov	r0, r5
   1c102:	bd70      	pop	{r4, r5, r6, pc}
   1c104:	0003236c 	.word	0x0003236c
   1c108:	200082b0 	.word	0x200082b0

0001c10c <find_sc_cfg>:
{
   1c10c:	b570      	push	{r4, r5, r6, lr}
   1c10e:	4605      	mov	r5, r0
   1c110:	460e      	mov	r6, r1
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1c112:	2400      	movs	r4, #0
   1c114:	e000      	b.n	1c118 <find_sc_cfg+0xc>
   1c116:	3401      	adds	r4, #1
   1c118:	2c07      	cmp	r4, #7
   1c11a:	d817      	bhi.n	1c14c <find_sc_cfg+0x40>
		if (id == sc_cfg[i].id &&
   1c11c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1c120:	4a0b      	ldr	r2, [pc, #44]	; (1c150 <find_sc_cfg+0x44>)
   1c122:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   1c126:	429d      	cmp	r5, r3
   1c128:	d1f5      	bne.n	1c116 <find_sc_cfg+0xa>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   1c12a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1c12e:	eb02 0083 	add.w	r0, r2, r3, lsl #2
   1c132:	2207      	movs	r2, #7
   1c134:	4631      	mov	r1, r6
   1c136:	3001      	adds	r0, #1
   1c138:	f00d fd29 	bl	29b8e <memcmp>
		if (id == sc_cfg[i].id &&
   1c13c:	2800      	cmp	r0, #0
   1c13e:	d1ea      	bne.n	1c116 <find_sc_cfg+0xa>
			return &sc_cfg[i];
   1c140:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1c144:	4802      	ldr	r0, [pc, #8]	; (1c150 <find_sc_cfg+0x44>)
   1c146:	eb00 0084 	add.w	r0, r0, r4, lsl #2
   1c14a:	e000      	b.n	1c14e <find_sc_cfg+0x42>
	return NULL;
   1c14c:	2000      	movs	r0, #0
}
   1c14e:	bd70      	pop	{r4, r5, r6, pc}
   1c150:	20008330 	.word	0x20008330

0001c154 <find_ccc_cfg>:
{
   1c154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c156:	4607      	mov	r7, r0
   1c158:	460e      	mov	r6, r1
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1c15a:	2400      	movs	r4, #0
   1c15c:	e00a      	b.n	1c174 <find_ccc_cfg+0x20>
		} else if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1c15e:	eb04 0084 	add.w	r0, r4, r4, lsl #2
   1c162:	eb06 0040 	add.w	r0, r6, r0, lsl #1
   1c166:	2207      	movs	r2, #7
   1c168:	490d      	ldr	r1, [pc, #52]	; (1c1a0 <find_ccc_cfg+0x4c>)
   1c16a:	3001      	adds	r0, #1
   1c16c:	f00d fd0f 	bl	29b8e <memcmp>
   1c170:	b198      	cbz	r0, 1c19a <find_ccc_cfg+0x46>
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1c172:	3401      	adds	r4, #1
   1c174:	2c07      	cmp	r4, #7
   1c176:	d80f      	bhi.n	1c198 <find_ccc_cfg+0x44>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   1c178:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1c17c:	eb06 0543 	add.w	r5, r6, r3, lsl #1
		if (conn) {
   1c180:	2f00      	cmp	r7, #0
   1c182:	d0ec      	beq.n	1c15e <find_ccc_cfg+0xa>
						    &cfg->peer)) {
   1c184:	462a      	mov	r2, r5
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   1c186:	3201      	adds	r2, #1
   1c188:	f816 1013 	ldrb.w	r1, [r6, r3, lsl #1]
   1c18c:	4638      	mov	r0, r7
   1c18e:	f00e f91b 	bl	2a3c8 <bt_conn_is_peer_addr_le>
   1c192:	2800      	cmp	r0, #0
   1c194:	d0ed      	beq.n	1c172 <find_ccc_cfg+0x1e>
   1c196:	e000      	b.n	1c19a <find_ccc_cfg+0x46>
	return NULL;
   1c198:	2500      	movs	r5, #0
}
   1c19a:	4628      	mov	r0, r5
   1c19c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c19e:	bf00      	nop
   1c1a0:	0003236c 	.word	0x0003236c

0001c1a4 <gatt_sub_find>:
{
   1c1a4:	b570      	push	{r4, r5, r6, lr}
   1c1a6:	4606      	mov	r6, r0
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
   1c1a8:	2400      	movs	r4, #0
   1c1aa:	e007      	b.n	1c1bc <gatt_sub_find+0x18>
			if (bt_addr_le_eq(&sub->peer, BT_ADDR_LE_ANY)) {
   1c1ac:	4628      	mov	r0, r5
   1c1ae:	2207      	movs	r2, #7
   1c1b0:	490d      	ldr	r1, [pc, #52]	; (1c1e8 <gatt_sub_find+0x44>)
   1c1b2:	3001      	adds	r0, #1
   1c1b4:	f00d fceb 	bl	29b8e <memcmp>
   1c1b8:	b1a0      	cbz	r0, 1c1e4 <gatt_sub_find+0x40>
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
   1c1ba:	3401      	adds	r4, #1
   1c1bc:	2c07      	cmp	r4, #7
   1c1be:	d810      	bhi.n	1c1e2 <gatt_sub_find+0x3e>
		struct gatt_sub *sub = &subscriptions[i];
   1c1c0:	4d0a      	ldr	r5, [pc, #40]	; (1c1ec <gatt_sub_find+0x48>)
   1c1c2:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (!conn) {
   1c1c6:	2e00      	cmp	r6, #0
   1c1c8:	d0f0      	beq.n	1c1ac <gatt_sub_find+0x8>
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
   1c1ca:	0123      	lsls	r3, r4, #4
   1c1cc:	4907      	ldr	r1, [pc, #28]	; (1c1ec <gatt_sub_find+0x48>)
   1c1ce:	eb01 1204 	add.w	r2, r1, r4, lsl #4
   1c1d2:	3201      	adds	r2, #1
   1c1d4:	5cc9      	ldrb	r1, [r1, r3]
   1c1d6:	4630      	mov	r0, r6
   1c1d8:	f00e f8f6 	bl	2a3c8 <bt_conn_is_peer_addr_le>
   1c1dc:	2800      	cmp	r0, #0
   1c1de:	d0ec      	beq.n	1c1ba <gatt_sub_find+0x16>
   1c1e0:	e000      	b.n	1c1e4 <gatt_sub_find+0x40>
	return NULL;
   1c1e2:	2500      	movs	r5, #0
}
   1c1e4:	4628      	mov	r0, r5
   1c1e6:	bd70      	pop	{r4, r5, r6, pc}
   1c1e8:	0003236c 	.word	0x0003236c
   1c1ec:	200083a0 	.word	0x200083a0

0001c1f0 <cf_write>:
{
   1c1f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c1f4:	b082      	sub	sp, #8
   1c1f6:	461d      	mov	r5, r3
   1c1f8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	if (offset > sizeof(cfg->data)) {
   1c1fc:	2b01      	cmp	r3, #1
   1c1fe:	d861      	bhi.n	1c2c4 <cf_write+0xd4>
   1c200:	4606      	mov	r6, r0
   1c202:	4617      	mov	r7, r2
	if (offset + len > sizeof(cfg->data)) {
   1c204:	46a8      	mov	r8, r5
   1c206:	442b      	add	r3, r5
   1c208:	2b01      	cmp	r3, #1
   1c20a:	d85e      	bhi.n	1c2ca <cf_write+0xda>
	cfg = find_cf_cfg(conn);
   1c20c:	f7ff ff58 	bl	1c0c0 <find_cf_cfg>
	if (!cfg) {
   1c210:	4604      	mov	r4, r0
   1c212:	b300      	cbz	r0, 1c256 <cf_write+0x66>
	if (!cf_set_value(cfg, value, len)) {
   1c214:	462a      	mov	r2, r5
   1c216:	4639      	mov	r1, r7
   1c218:	4620      	mov	r0, r4
   1c21a:	f00f f9bf 	bl	2b59c <cf_set_value>
   1c21e:	2800      	cmp	r0, #0
   1c220:	d056      	beq.n	1c2d0 <cf_write+0xe0>
	memcpy(dst, src, sizeof(*dst));
   1c222:	2207      	movs	r2, #7
   1c224:	f106 0188 	add.w	r1, r6, #136	; 0x88
   1c228:	1c60      	adds	r0, r4, #1
   1c22a:	f00d fcc2 	bl	29bb2 <memcpy>
	cfg->id = conn->id;
   1c22e:	7a33      	ldrb	r3, [r6, #8]
   1c230:	4620      	mov	r0, r4
   1c232:	f800 3b0c 	strb.w	r3, [r0], #12
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1c236:	f3bf 8f5b 	dmb	ish
   1c23a:	e850 3f00 	ldrex	r3, [r0]
   1c23e:	f043 0301 	orr.w	r3, r3, #1
   1c242:	e840 3200 	strex	r2, r3, [r0]
   1c246:	2a00      	cmp	r2, #0
   1c248:	d1f7      	bne.n	1c23a <cf_write+0x4a>
   1c24a:	f3bf 8f5b 	dmb	ish
}
   1c24e:	4640      	mov	r0, r8
   1c250:	b002      	add	sp, #8
   1c252:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg = find_cf_cfg(NULL);
   1c256:	f7ff ff33 	bl	1c0c0 <find_cf_cfg>
	if (!cfg) {
   1c25a:	4604      	mov	r4, r0
   1c25c:	2800      	cmp	r0, #0
   1c25e:	d1d9      	bne.n	1c214 <cf_write+0x24>
		LOG_WRN("No space to store Client Supported Features");
   1c260:	2006      	movs	r0, #6
   1c262:	f7f7 fd51 	bl	13d08 <z_log_msg_alloc>
   1c266:	2200      	movs	r2, #0
   1c268:	f36f 0200 	bfc	r2, #0, #1
   1c26c:	f36f 0241 	bfc	r2, #1, #1
   1c270:	f36f 0282 	bfc	r2, #2, #1
   1c274:	f36f 02c5 	bfc	r2, #3, #3
   1c278:	2302      	movs	r3, #2
   1c27a:	f363 1288 	bfi	r2, r3, #6, #3
   1c27e:	2308      	movs	r3, #8
   1c280:	f363 2252 	bfi	r2, r3, #9, #10
   1c284:	f36f 42de 	bfc	r2, #19, #12
   1c288:	f36f 72df 	bfc	r2, #31, #1
   1c28c:	4604      	mov	r4, r0
   1c28e:	b188      	cbz	r0, 1c2b4 <cf_write+0xc4>
   1c290:	f110 0310 	adds.w	r3, r0, #16
   1c294:	d001      	beq.n	1c29a <cf_write+0xaa>
   1c296:	4910      	ldr	r1, [pc, #64]	; (1c2d8 <cf_write+0xe8>)
   1c298:	6141      	str	r1, [r0, #20]
   1c29a:	b15b      	cbz	r3, 1c2b4 <cf_write+0xc4>
   1c29c:	2302      	movs	r3, #2
   1c29e:	f88d 3004 	strb.w	r3, [sp, #4]
   1c2a2:	2300      	movs	r3, #0
   1c2a4:	f88d 3005 	strb.w	r3, [sp, #5]
   1c2a8:	f88d 3006 	strb.w	r3, [sp, #6]
   1c2ac:	f88d 3007 	strb.w	r3, [sp, #7]
   1c2b0:	9801      	ldr	r0, [sp, #4]
   1c2b2:	6120      	str	r0, [r4, #16]
   1c2b4:	2300      	movs	r3, #0
   1c2b6:	4909      	ldr	r1, [pc, #36]	; (1c2dc <cf_write+0xec>)
   1c2b8:	4620      	mov	r0, r4
   1c2ba:	f00c ff8e 	bl	291da <z_log_msg_finalize>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1c2be:	f06f 0810 	mvn.w	r8, #16
   1c2c2:	e7c4      	b.n	1c24e <cf_write+0x5e>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1c2c4:	f06f 0806 	mvn.w	r8, #6
   1c2c8:	e7c1      	b.n	1c24e <cf_write+0x5e>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1c2ca:	f06f 080c 	mvn.w	r8, #12
   1c2ce:	e7be      	b.n	1c24e <cf_write+0x5e>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   1c2d0:	f06f 0812 	mvn.w	r8, #18
   1c2d4:	e7bb      	b.n	1c24e <cf_write+0x5e>
   1c2d6:	bf00      	nop
   1c2d8:	0003321c 	.word	0x0003321c
   1c2dc:	00031420 	.word	0x00031420

0001c2e0 <sc_save>:
{
   1c2e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c2e4:	b082      	sub	sp, #8
   1c2e6:	4607      	mov	r7, r0
   1c2e8:	4688      	mov	r8, r1
   1c2ea:	4616      	mov	r6, r2
   1c2ec:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   1c2ee:	f7ff ff0d 	bl	1c10c <find_sc_cfg>
	if (!cfg) {
   1c2f2:	4604      	mov	r4, r0
   1c2f4:	b178      	cbz	r0, 1c316 <sc_save+0x36>
	if (!(cfg->data.start || cfg->data.end)) {
   1c2f6:	8923      	ldrh	r3, [r4, #8]
   1c2f8:	b913      	cbnz	r3, 1c300 <sc_save+0x20>
   1c2fa:	8963      	ldrh	r3, [r4, #10]
   1c2fc:	2b00      	cmp	r3, #0
   1c2fe:	d046      	beq.n	1c38e <sc_save+0xae>
	modified = update_range(&cfg->data.start, &cfg->data.end, start, end);
   1c300:	462b      	mov	r3, r5
   1c302:	4632      	mov	r2, r6
   1c304:	f104 010a 	add.w	r1, r4, #10
   1c308:	f104 0008 	add.w	r0, r4, #8
   1c30c:	f00f f924 	bl	2b558 <update_range>
}
   1c310:	b002      	add	sp, #8
   1c312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1c316:	491f      	ldr	r1, [pc, #124]	; (1c394 <sc_save+0xb4>)
   1c318:	f7ff fef8 	bl	1c10c <find_sc_cfg>
		if (!cfg) {
   1c31c:	4604      	mov	r4, r0
   1c31e:	b130      	cbz	r0, 1c32e <sc_save+0x4e>
		cfg->id = id;
   1c320:	f800 7b01 	strb.w	r7, [r0], #1
   1c324:	2207      	movs	r2, #7
   1c326:	4641      	mov	r1, r8
   1c328:	f00d fc43 	bl	29bb2 <memcpy>
}
   1c32c:	e7e3      	b.n	1c2f6 <sc_save+0x16>
			LOG_ERR("unable to save SC: no cfg left");
   1c32e:	2006      	movs	r0, #6
   1c330:	f7f7 fcea 	bl	13d08 <z_log_msg_alloc>
   1c334:	2200      	movs	r2, #0
   1c336:	f36f 0200 	bfc	r2, #0, #1
   1c33a:	f36f 0241 	bfc	r2, #1, #1
   1c33e:	f36f 0282 	bfc	r2, #2, #1
   1c342:	f36f 02c5 	bfc	r2, #3, #3
   1c346:	2301      	movs	r3, #1
   1c348:	f363 1288 	bfi	r2, r3, #6, #3
   1c34c:	2308      	movs	r3, #8
   1c34e:	f363 2252 	bfi	r2, r3, #9, #10
   1c352:	f36f 42de 	bfc	r2, #19, #12
   1c356:	f36f 72df 	bfc	r2, #31, #1
   1c35a:	4604      	mov	r4, r0
   1c35c:	b188      	cbz	r0, 1c382 <sc_save+0xa2>
   1c35e:	f110 0310 	adds.w	r3, r0, #16
   1c362:	d001      	beq.n	1c368 <sc_save+0x88>
   1c364:	490c      	ldr	r1, [pc, #48]	; (1c398 <sc_save+0xb8>)
   1c366:	6141      	str	r1, [r0, #20]
   1c368:	b15b      	cbz	r3, 1c382 <sc_save+0xa2>
   1c36a:	2302      	movs	r3, #2
   1c36c:	f88d 3004 	strb.w	r3, [sp, #4]
   1c370:	2300      	movs	r3, #0
   1c372:	f88d 3005 	strb.w	r3, [sp, #5]
   1c376:	f88d 3006 	strb.w	r3, [sp, #6]
   1c37a:	f88d 3007 	strb.w	r3, [sp, #7]
   1c37e:	9801      	ldr	r0, [sp, #4]
   1c380:	6120      	str	r0, [r4, #16]
   1c382:	2300      	movs	r3, #0
   1c384:	4905      	ldr	r1, [pc, #20]	; (1c39c <sc_save+0xbc>)
   1c386:	4620      	mov	r0, r4
   1c388:	f00c ff27 	bl	291da <z_log_msg_finalize>
			return;
   1c38c:	e7c0      	b.n	1c310 <sc_save+0x30>
		cfg->data.start = start;
   1c38e:	8126      	strh	r6, [r4, #8]
		cfg->data.end = end;
   1c390:	8165      	strh	r5, [r4, #10]
		goto done;
   1c392:	e7bd      	b.n	1c310 <sc_save+0x30>
   1c394:	0003236c 	.word	0x0003236c
   1c398:	00033248 	.word	0x00033248
   1c39c:	00031420 	.word	0x00031420

0001c3a0 <clear_ccc_cfg>:
{
   1c3a0:	b510      	push	{r4, lr}
   1c3a2:	4604      	mov	r4, r0
	memcpy(dst, src, sizeof(*dst));
   1c3a4:	2207      	movs	r2, #7
   1c3a6:	4904      	ldr	r1, [pc, #16]	; (1c3b8 <clear_ccc_cfg+0x18>)
   1c3a8:	3001      	adds	r0, #1
   1c3aa:	f00d fc02 	bl	29bb2 <memcpy>
	cfg->id = 0U;
   1c3ae:	2300      	movs	r3, #0
   1c3b0:	7023      	strb	r3, [r4, #0]
	cfg->value = 0U;
   1c3b2:	8123      	strh	r3, [r4, #8]
}
   1c3b4:	bd10      	pop	{r4, pc}
   1c3b6:	bf00      	nop
   1c3b8:	0003236c 	.word	0x0003236c

0001c3bc <bt_gatt_attr_write_ccc>:
{
   1c3bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c3c0:	b083      	sub	sp, #12
   1c3c2:	461c      	mov	r4, r3
   1c3c4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	struct _bt_gatt_ccc *ccc = attr->user_data;
   1c3c8:	68cf      	ldr	r7, [r1, #12]
	if (offset) {
   1c3ca:	2b00      	cmp	r3, #0
   1c3cc:	d179      	bne.n	1c4c2 <bt_gatt_attr_write_ccc+0x106>
   1c3ce:	4681      	mov	r9, r0
   1c3d0:	460e      	mov	r6, r1
	if (!len || len > sizeof(uint16_t)) {
   1c3d2:	1e63      	subs	r3, r4, #1
   1c3d4:	b29b      	uxth	r3, r3
   1c3d6:	2b01      	cmp	r3, #1
   1c3d8:	d876      	bhi.n	1c4c8 <bt_gatt_attr_write_ccc+0x10c>
	if (len < sizeof(uint16_t)) {
   1c3da:	2c01      	cmp	r4, #1
   1c3dc:	d920      	bls.n	1c420 <bt_gatt_attr_write_ccc+0x64>
   1c3de:	7853      	ldrb	r3, [r2, #1]
   1c3e0:	7815      	ldrb	r5, [r2, #0]
   1c3e2:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
   1c3e6:	4639      	mov	r1, r7
   1c3e8:	4648      	mov	r0, r9
   1c3ea:	f7ff feb3 	bl	1c154 <find_ccc_cfg>
	if (!cfg) {
   1c3ee:	4680      	mov	r8, r0
   1c3f0:	b1c0      	cbz	r0, 1c424 <bt_gatt_attr_write_ccc+0x68>
	if (ccc->cfg_write) {
   1c3f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1c3f4:	b143      	cbz	r3, 1c408 <bt_gatt_attr_write_ccc+0x4c>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   1c3f6:	462a      	mov	r2, r5
   1c3f8:	4631      	mov	r1, r6
   1c3fa:	4648      	mov	r0, r9
   1c3fc:	4798      	blx	r3
		if (write < 0) {
   1c3fe:	2800      	cmp	r0, #0
   1c400:	db0b      	blt.n	1c41a <bt_gatt_attr_write_ccc+0x5e>
		if (write != sizeof(value) && write != 1) {
   1c402:	3801      	subs	r0, #1
   1c404:	2801      	cmp	r0, #1
   1c406:	d862      	bhi.n	1c4ce <bt_gatt_attr_write_ccc+0x112>
	cfg->value = value;
   1c408:	f8a8 5008 	strh.w	r5, [r8, #8]
	if (cfg->value != ccc->value) {
   1c40c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
   1c410:	429d      	cmp	r5, r3
   1c412:	d14d      	bne.n	1c4b0 <bt_gatt_attr_write_ccc+0xf4>
	if (!value) {
   1c414:	2d00      	cmp	r5, #0
   1c416:	d050      	beq.n	1c4ba <bt_gatt_attr_write_ccc+0xfe>
	return len;
   1c418:	4620      	mov	r0, r4
}
   1c41a:	b003      	add	sp, #12
   1c41c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		value = *(uint8_t *)buf;
   1c420:	7815      	ldrb	r5, [r2, #0]
   1c422:	e7e0      	b.n	1c3e6 <bt_gatt_attr_write_ccc+0x2a>
		if (!value) {
   1c424:	b90d      	cbnz	r5, 1c42a <bt_gatt_attr_write_ccc+0x6e>
			return len;
   1c426:	4620      	mov	r0, r4
   1c428:	e7f7      	b.n	1c41a <bt_gatt_attr_write_ccc+0x5e>
		cfg = find_ccc_cfg(NULL, ccc);
   1c42a:	4639      	mov	r1, r7
   1c42c:	2000      	movs	r0, #0
   1c42e:	f7ff fe91 	bl	1c154 <find_ccc_cfg>
		if (!cfg) {
   1c432:	4680      	mov	r8, r0
   1c434:	b150      	cbz	r0, 1c44c <bt_gatt_attr_write_ccc+0x90>
   1c436:	2207      	movs	r2, #7
   1c438:	f109 0188 	add.w	r1, r9, #136	; 0x88
   1c43c:	3001      	adds	r0, #1
   1c43e:	f00d fbb8 	bl	29bb2 <memcpy>
		cfg->id = conn->id;
   1c442:	f899 3008 	ldrb.w	r3, [r9, #8]
   1c446:	f888 3000 	strb.w	r3, [r8]
   1c44a:	e7d2      	b.n	1c3f2 <bt_gatt_attr_write_ccc+0x36>
			LOG_WRN("No space to store CCC cfg");
   1c44c:	2006      	movs	r0, #6
   1c44e:	f7f7 fc5b 	bl	13d08 <z_log_msg_alloc>
   1c452:	2200      	movs	r2, #0
   1c454:	f36f 0200 	bfc	r2, #0, #1
   1c458:	f36f 0241 	bfc	r2, #1, #1
   1c45c:	f36f 0282 	bfc	r2, #2, #1
   1c460:	f36f 02c5 	bfc	r2, #3, #3
   1c464:	2302      	movs	r3, #2
   1c466:	f363 1288 	bfi	r2, r3, #6, #3
   1c46a:	2308      	movs	r3, #8
   1c46c:	f363 2252 	bfi	r2, r3, #9, #10
   1c470:	f36f 42de 	bfc	r2, #19, #12
   1c474:	f36f 72df 	bfc	r2, #31, #1
   1c478:	4604      	mov	r4, r0
   1c47a:	b188      	cbz	r0, 1c4a0 <bt_gatt_attr_write_ccc+0xe4>
   1c47c:	f110 0310 	adds.w	r3, r0, #16
   1c480:	d001      	beq.n	1c486 <bt_gatt_attr_write_ccc+0xca>
   1c482:	4914      	ldr	r1, [pc, #80]	; (1c4d4 <bt_gatt_attr_write_ccc+0x118>)
   1c484:	6141      	str	r1, [r0, #20]
   1c486:	b15b      	cbz	r3, 1c4a0 <bt_gatt_attr_write_ccc+0xe4>
   1c488:	2302      	movs	r3, #2
   1c48a:	f88d 3004 	strb.w	r3, [sp, #4]
   1c48e:	2300      	movs	r3, #0
   1c490:	f88d 3005 	strb.w	r3, [sp, #5]
   1c494:	f88d 3006 	strb.w	r3, [sp, #6]
   1c498:	f88d 3007 	strb.w	r3, [sp, #7]
   1c49c:	9801      	ldr	r0, [sp, #4]
   1c49e:	6120      	str	r0, [r4, #16]
   1c4a0:	2300      	movs	r3, #0
   1c4a2:	490d      	ldr	r1, [pc, #52]	; (1c4d8 <bt_gatt_attr_write_ccc+0x11c>)
   1c4a4:	4620      	mov	r0, r4
   1c4a6:	f00c fe98 	bl	291da <z_log_msg_finalize>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1c4aa:	f06f 0010 	mvn.w	r0, #16
   1c4ae:	e7b4      	b.n	1c41a <bt_gatt_attr_write_ccc+0x5e>
		gatt_ccc_changed(attr, ccc);
   1c4b0:	4639      	mov	r1, r7
   1c4b2:	4630      	mov	r0, r6
   1c4b4:	f00f f8ac 	bl	2b610 <gatt_ccc_changed>
   1c4b8:	e7ac      	b.n	1c414 <bt_gatt_attr_write_ccc+0x58>
		clear_ccc_cfg(cfg);
   1c4ba:	4640      	mov	r0, r8
   1c4bc:	f7ff ff70 	bl	1c3a0 <clear_ccc_cfg>
   1c4c0:	e7aa      	b.n	1c418 <bt_gatt_attr_write_ccc+0x5c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1c4c2:	f06f 0006 	mvn.w	r0, #6
   1c4c6:	e7a8      	b.n	1c41a <bt_gatt_attr_write_ccc+0x5e>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1c4c8:	f06f 000c 	mvn.w	r0, #12
   1c4cc:	e7a5      	b.n	1c41a <bt_gatt_attr_write_ccc+0x5e>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   1c4ce:	f06f 000d 	mvn.w	r0, #13
   1c4d2:	e7a2      	b.n	1c41a <bt_gatt_attr_write_ccc+0x5e>
   1c4d4:	00033268 	.word	0x00033268
   1c4d8:	00031420 	.word	0x00031420

0001c4dc <gatt_sub_free>:
{
   1c4dc:	b508      	push	{r3, lr}
   1c4de:	2207      	movs	r2, #7
   1c4e0:	4902      	ldr	r1, [pc, #8]	; (1c4ec <gatt_sub_free+0x10>)
   1c4e2:	3001      	adds	r0, #1
   1c4e4:	f00d fb65 	bl	29bb2 <memcpy>
}
   1c4e8:	bd08      	pop	{r3, pc}
   1c4ea:	bf00      	nop
   1c4ec:	0003236c 	.word	0x0003236c

0001c4f0 <sc_clear>:
{
   1c4f0:	b530      	push	{r4, r5, lr}
   1c4f2:	b083      	sub	sp, #12
   1c4f4:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1c4f6:	f100 0588 	add.w	r5, r0, #136	; 0x88
   1c4fa:	4629      	mov	r1, r5
   1c4fc:	7a00      	ldrb	r0, [r0, #8]
   1c4fe:	f00d fdb4 	bl	2a06a <bt_addr_le_is_bonded>
   1c502:	b3c0      	cbz	r0, 1c576 <sc_clear+0x86>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   1c504:	4629      	mov	r1, r5
   1c506:	7a20      	ldrb	r0, [r4, #8]
   1c508:	f00f f9be 	bl	2b888 <bt_gatt_clear_sc>
		if (err) {
   1c50c:	4605      	mov	r5, r0
   1c50e:	b908      	cbnz	r0, 1c514 <sc_clear+0x24>
}
   1c510:	b003      	add	sp, #12
   1c512:	bd30      	pop	{r4, r5, pc}
			LOG_ERR("Failed to clear SC %d", err);
   1c514:	2008      	movs	r0, #8
   1c516:	f7f7 fbf7 	bl	13d08 <z_log_msg_alloc>
   1c51a:	2200      	movs	r2, #0
   1c51c:	f36f 0200 	bfc	r2, #0, #1
   1c520:	f36f 0241 	bfc	r2, #1, #1
   1c524:	f36f 0282 	bfc	r2, #2, #1
   1c528:	f36f 02c5 	bfc	r2, #3, #3
   1c52c:	2301      	movs	r3, #1
   1c52e:	f363 1288 	bfi	r2, r3, #6, #3
   1c532:	230c      	movs	r3, #12
   1c534:	f363 2252 	bfi	r2, r3, #9, #10
   1c538:	f36f 42de 	bfc	r2, #19, #12
   1c53c:	f36f 72df 	bfc	r2, #31, #1
   1c540:	4604      	mov	r4, r0
   1c542:	b190      	cbz	r0, 1c56a <sc_clear+0x7a>
   1c544:	f110 0310 	adds.w	r3, r0, #16
   1c548:	d002      	beq.n	1c550 <sc_clear+0x60>
   1c54a:	490f      	ldr	r1, [pc, #60]	; (1c588 <sc_clear+0x98>)
   1c54c:	6141      	str	r1, [r0, #20]
   1c54e:	6185      	str	r5, [r0, #24]
   1c550:	b15b      	cbz	r3, 1c56a <sc_clear+0x7a>
   1c552:	2303      	movs	r3, #3
   1c554:	f88d 3004 	strb.w	r3, [sp, #4]
   1c558:	2300      	movs	r3, #0
   1c55a:	f88d 3005 	strb.w	r3, [sp, #5]
   1c55e:	f88d 3006 	strb.w	r3, [sp, #6]
   1c562:	f88d 3007 	strb.w	r3, [sp, #7]
   1c566:	9801      	ldr	r0, [sp, #4]
   1c568:	6120      	str	r0, [r4, #16]
   1c56a:	2300      	movs	r3, #0
   1c56c:	4907      	ldr	r1, [pc, #28]	; (1c58c <sc_clear+0x9c>)
   1c56e:	4620      	mov	r0, r4
   1c570:	f00c fe33 	bl	291da <z_log_msg_finalize>
   1c574:	e7cc      	b.n	1c510 <sc_clear+0x20>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1c576:	4629      	mov	r1, r5
   1c578:	7a20      	ldrb	r0, [r4, #8]
   1c57a:	f7ff fdc7 	bl	1c10c <find_sc_cfg>
		if (cfg) {
   1c57e:	2800      	cmp	r0, #0
   1c580:	d0c6      	beq.n	1c510 <sc_clear+0x20>
			clear_sc_cfg(cfg);
   1c582:	f00f f97b 	bl	2b87c <clear_sc_cfg>
}
   1c586:	e7c3      	b.n	1c510 <sc_clear+0x20>
   1c588:	00033284 	.word	0x00033284
   1c58c:	00031420 	.word	0x00031420

0001c590 <sc_indicate_rsp>:
{
   1c590:	b510      	push	{r4, lr}
   1c592:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1c594:	4b1b      	ldr	r3, [pc, #108]	; (1c604 <sc_indicate_rsp+0x74>)
   1c596:	f3bf 8f5b 	dmb	ish
   1c59a:	e853 2f00 	ldrex	r2, [r3]
   1c59e:	f022 0202 	bic.w	r2, r2, #2
   1c5a2:	e843 2100 	strex	r1, r2, [r3]
   1c5a6:	2900      	cmp	r1, #0
   1c5a8:	d1f7      	bne.n	1c59a <sc_indicate_rsp+0xa>
   1c5aa:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c5ae:	f3bf 8f5b 	dmb	ish
   1c5b2:	681b      	ldr	r3, [r3, #0]
   1c5b4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1c5b8:	f013 0f01 	tst.w	r3, #1
   1c5bc:	d104      	bne.n	1c5c8 <sc_indicate_rsp+0x38>
	if (bt_att_fixed_chan_only(conn)) {
   1c5be:	4620      	mov	r0, r4
   1c5c0:	f00e ff5f 	bl	2b482 <bt_att_fixed_chan_only>
   1c5c4:	b930      	cbnz	r0, 1c5d4 <sc_indicate_rsp+0x44>
}
   1c5c6:	bd10      	pop	{r4, pc}
	k_work_reschedule(&gatt_sc.work, timeout);
   1c5c8:	2200      	movs	r2, #0
   1c5ca:	2300      	movs	r3, #0
   1c5cc:	480e      	ldr	r0, [pc, #56]	; (1c608 <sc_indicate_rsp+0x78>)
   1c5ce:	f00a f9c1 	bl	26954 <k_work_reschedule>
   1c5d2:	e7f4      	b.n	1c5be <sc_indicate_rsp+0x2e>
		cfg = find_cf_cfg(conn);
   1c5d4:	4620      	mov	r0, r4
   1c5d6:	f7ff fd73 	bl	1c0c0 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   1c5da:	4603      	mov	r3, r0
   1c5dc:	2800      	cmp	r0, #0
   1c5de:	d0f2      	beq.n	1c5c6 <sc_indicate_rsp+0x36>
   1c5e0:	7a02      	ldrb	r2, [r0, #8]
   1c5e2:	f012 0f01 	tst.w	r2, #1
   1c5e6:	d0ee      	beq.n	1c5c6 <sc_indicate_rsp+0x36>
			atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1c5e8:	330c      	adds	r3, #12
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1c5ea:	f3bf 8f5b 	dmb	ish
   1c5ee:	e853 1f00 	ldrex	r1, [r3]
   1c5f2:	f041 0101 	orr.w	r1, r1, #1
   1c5f6:	e843 1200 	strex	r2, r1, [r3]
   1c5fa:	2a00      	cmp	r2, #0
   1c5fc:	d1f7      	bne.n	1c5ee <sc_indicate_rsp+0x5e>
   1c5fe:	f3bf 8f5b 	dmb	ish
}
   1c602:	e7e0      	b.n	1c5c6 <sc_indicate_rsp+0x36>
   1c604:	200027b0 	.word	0x200027b0
   1c608:	20002780 	.word	0x20002780

0001c60c <gatt_write_ccc_rsp>:
{
   1c60c:	b570      	push	{r4, r5, r6, lr}
   1c60e:	b082      	sub	sp, #8
   1c610:	4606      	mov	r6, r0
   1c612:	460d      	mov	r5, r1
   1c614:	9c06      	ldr	r4, [sp, #24]
	atomic_clear_bit(params->flags, BT_GATT_SUBSCRIBE_FLAG_WRITE_PENDING);
   1c616:	f104 0314 	add.w	r3, r4, #20
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1c61a:	f3bf 8f5b 	dmb	ish
   1c61e:	e853 1f00 	ldrex	r1, [r3]
   1c622:	f021 0104 	bic.w	r1, r1, #4
   1c626:	e843 1200 	strex	r2, r1, [r3]
   1c62a:	2a00      	cmp	r2, #0
   1c62c:	d1f7      	bne.n	1c61e <gatt_write_ccc_rsp+0x12>
   1c62e:	f3bf 8f5b 	dmb	ish
	if (err) {
   1c632:	b97d      	cbnz	r5, 1c654 <gatt_write_ccc_rsp+0x48>
	} else if (!params->value) {
   1c634:	8a23      	ldrh	r3, [r4, #16]
   1c636:	b92b      	cbnz	r3, 1c644 <gatt_write_ccc_rsp+0x38>
		params->notify(conn, params, NULL, 0);
   1c638:	461a      	mov	r2, r3
   1c63a:	4621      	mov	r1, r4
   1c63c:	4630      	mov	r0, r6
   1c63e:	f8d4 c000 	ldr.w	ip, [r4]
   1c642:	47e0      	blx	ip
	if (params->subscribe) {
   1c644:	6863      	ldr	r3, [r4, #4]
   1c646:	b31b      	cbz	r3, 1c690 <gatt_write_ccc_rsp+0x84>
		params->subscribe(conn, err, params);
   1c648:	4622      	mov	r2, r4
   1c64a:	4629      	mov	r1, r5
   1c64c:	4630      	mov	r0, r6
   1c64e:	4798      	blx	r3
}
   1c650:	b002      	add	sp, #8
   1c652:	bd70      	pop	{r4, r5, r6, pc}
		sub = gatt_sub_find(conn);
   1c654:	4630      	mov	r0, r6
   1c656:	f7ff fda5 	bl	1c1a4 <gatt_sub_find>
		if (!sub) {
   1c65a:	4601      	mov	r1, r0
   1c65c:	2800      	cmp	r0, #0
   1c65e:	d0f7      	beq.n	1c650 <gatt_write_ccc_rsp+0x44>
	return list->head;
   1c660:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_PEEK_NEXT(slist, snode)
   1c662:	b133      	cbz	r3, 1c672 <gatt_write_ccc_rsp+0x66>
	return node->next;
   1c664:	681a      	ldr	r2, [r3, #0]
   1c666:	e009      	b.n	1c67c <gatt_write_ccc_rsp+0x70>
				gatt_sub_remove(conn, sub, tmp, params);
   1c668:	4623      	mov	r3, r4
   1c66a:	4630      	mov	r0, r6
   1c66c:	f00f f8a2 	bl	2b7b4 <gatt_sub_remove>
				break;
   1c670:	e7e8      	b.n	1c644 <gatt_write_ccc_rsp+0x38>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1c672:	461a      	mov	r2, r3
   1c674:	e002      	b.n	1c67c <gatt_write_ccc_rsp+0x70>
   1c676:	4610      	mov	r0, r2
   1c678:	4613      	mov	r3, r2
   1c67a:	4602      	mov	r2, r0
		SYS_SLIST_FOR_EACH_NODE_SAFE(&sub->list, node, tmp) {
   1c67c:	2b00      	cmp	r3, #0
   1c67e:	d0e1      	beq.n	1c644 <gatt_write_ccc_rsp+0x38>
			if (node == &params->node) {
   1c680:	f104 0c18 	add.w	ip, r4, #24
   1c684:	459c      	cmp	ip, r3
   1c686:	d0ef      	beq.n	1c668 <gatt_write_ccc_rsp+0x5c>
   1c688:	2a00      	cmp	r2, #0
   1c68a:	d0f4      	beq.n	1c676 <gatt_write_ccc_rsp+0x6a>
	return node->next;
   1c68c:	6810      	ldr	r0, [r2, #0]
   1c68e:	e7f3      	b.n	1c678 <gatt_write_ccc_rsp+0x6c>
	} else if (params->write) {
   1c690:	68a3      	ldr	r3, [r4, #8]
   1c692:	2b00      	cmp	r3, #0
   1c694:	d0dc      	beq.n	1c650 <gatt_write_ccc_rsp+0x44>
		LOG_WRN("write callback is deprecated, use subscribe cb instead");
   1c696:	2006      	movs	r0, #6
   1c698:	f7f7 fb36 	bl	13d08 <z_log_msg_alloc>
   1c69c:	2200      	movs	r2, #0
   1c69e:	f36f 0200 	bfc	r2, #0, #1
   1c6a2:	f36f 0241 	bfc	r2, #1, #1
   1c6a6:	f36f 0282 	bfc	r2, #2, #1
   1c6aa:	f36f 02c5 	bfc	r2, #3, #3
   1c6ae:	2302      	movs	r3, #2
   1c6b0:	f363 1288 	bfi	r2, r3, #6, #3
   1c6b4:	2308      	movs	r3, #8
   1c6b6:	f363 2252 	bfi	r2, r3, #9, #10
   1c6ba:	f36f 42de 	bfc	r2, #19, #12
   1c6be:	f36f 72df 	bfc	r2, #31, #1
   1c6c2:	4684      	mov	ip, r0
   1c6c4:	b190      	cbz	r0, 1c6ec <gatt_write_ccc_rsp+0xe0>
   1c6c6:	f110 0310 	adds.w	r3, r0, #16
   1c6ca:	d001      	beq.n	1c6d0 <gatt_write_ccc_rsp+0xc4>
   1c6cc:	490d      	ldr	r1, [pc, #52]	; (1c704 <gatt_write_ccc_rsp+0xf8>)
   1c6ce:	6141      	str	r1, [r0, #20]
   1c6d0:	b163      	cbz	r3, 1c6ec <gatt_write_ccc_rsp+0xe0>
   1c6d2:	2302      	movs	r3, #2
   1c6d4:	f88d 3004 	strb.w	r3, [sp, #4]
   1c6d8:	2300      	movs	r3, #0
   1c6da:	f88d 3005 	strb.w	r3, [sp, #5]
   1c6de:	f88d 3006 	strb.w	r3, [sp, #6]
   1c6e2:	f88d 3007 	strb.w	r3, [sp, #7]
   1c6e6:	9801      	ldr	r0, [sp, #4]
   1c6e8:	f8cc 0010 	str.w	r0, [ip, #16]
   1c6ec:	2300      	movs	r3, #0
   1c6ee:	4906      	ldr	r1, [pc, #24]	; (1c708 <gatt_write_ccc_rsp+0xfc>)
   1c6f0:	4660      	mov	r0, ip
   1c6f2:	f00c fd72 	bl	291da <z_log_msg_finalize>
		params->write(conn, err, NULL);
   1c6f6:	68a3      	ldr	r3, [r4, #8]
   1c6f8:	2200      	movs	r2, #0
   1c6fa:	4629      	mov	r1, r5
   1c6fc:	4630      	mov	r0, r6
   1c6fe:	4798      	blx	r3
   1c700:	e7a6      	b.n	1c650 <gatt_write_ccc_rsp+0x44>
   1c702:	bf00      	nop
   1c704:	0003329c 	.word	0x0003329c
   1c708:	00031420 	.word	0x00031420

0001c70c <disconnected_cb>:
{
   1c70c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c710:	4690      	mov	r8, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1c712:	6882      	ldr	r2, [r0, #8]
   1c714:	4b2e      	ldr	r3, [pc, #184]	; (1c7d0 <disconnected_cb+0xc4>)
   1c716:	429a      	cmp	r2, r3
   1c718:	d002      	beq.n	1c720 <disconnected_cb+0x14>
}
   1c71a:	2001      	movs	r0, #1
   1c71c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c720:	4681      	mov	r9, r0
	ccc = attr->user_data;
   1c722:	68c6      	ldr	r6, [r0, #12]
	if (!ccc->value) {
   1c724:	f8b6 3050 	ldrh.w	r3, [r6, #80]	; 0x50
   1c728:	2b00      	cmp	r3, #0
   1c72a:	d0f6      	beq.n	1c71a <disconnected_cb+0xe>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1c72c:	2400      	movs	r4, #0
	value_used = false;
   1c72e:	46a2      	mov	sl, r4
   1c730:	e003      	b.n	1c73a <disconnected_cb+0x2e>
				bt_conn_unref(tmp);
   1c732:	4618      	mov	r0, r3
   1c734:	f00d fdee 	bl	2a314 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1c738:	3401      	adds	r4, #1
   1c73a:	2c07      	cmp	r4, #7
   1c73c:	d83a      	bhi.n	1c7b4 <disconnected_cb+0xa8>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   1c73e:	eb04 0584 	add.w	r5, r4, r4, lsl #2
   1c742:	eb06 0545 	add.w	r5, r6, r5, lsl #1
		if (!cfg->value) {
   1c746:	892b      	ldrh	r3, [r5, #8]
   1c748:	2b00      	cmp	r3, #0
   1c74a:	d0f5      	beq.n	1c738 <disconnected_cb+0x2c>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1c74c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1c750:	462f      	mov	r7, r5
   1c752:	3701      	adds	r7, #1
   1c754:	463a      	mov	r2, r7
   1c756:	f816 1013 	ldrb.w	r1, [r6, r3, lsl #1]
   1c75a:	4640      	mov	r0, r8
   1c75c:	f00d fe34 	bl	2a3c8 <bt_conn_is_peer_addr_le>
   1c760:	b978      	cbnz	r0, 1c782 <disconnected_cb+0x76>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1c762:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1c766:	4639      	mov	r1, r7
   1c768:	f816 0013 	ldrb.w	r0, [r6, r3, lsl #1]
   1c76c:	f7fd fb58 	bl	19e20 <bt_conn_lookup_addr_le>
			if (tmp) {
   1c770:	4603      	mov	r3, r0
   1c772:	2800      	cmp	r0, #0
   1c774:	d0e0      	beq.n	1c738 <disconnected_cb+0x2c>
				if (tmp->state == BT_CONN_CONNECTED) {
   1c776:	7a82      	ldrb	r2, [r0, #10]
   1c778:	2a07      	cmp	r2, #7
   1c77a:	d1da      	bne.n	1c732 <disconnected_cb+0x26>
					value_used = true;
   1c77c:	f04f 0a01 	mov.w	sl, #1
   1c780:	e7d7      	b.n	1c732 <disconnected_cb+0x26>
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1c782:	f108 0b88 	add.w	fp, r8, #136	; 0x88
   1c786:	4659      	mov	r1, fp
   1c788:	f898 0008 	ldrb.w	r0, [r8, #8]
   1c78c:	f00d fc6d 	bl	2a06a <bt_addr_le_is_bonded>
   1c790:	b950      	cbnz	r0, 1c7a8 <disconnected_cb+0x9c>
				if (ccc == &sc_ccc) {
   1c792:	4b10      	ldr	r3, [pc, #64]	; (1c7d4 <disconnected_cb+0xc8>)
   1c794:	429e      	cmp	r6, r3
   1c796:	d003      	beq.n	1c7a0 <disconnected_cb+0x94>
				clear_ccc_cfg(cfg);
   1c798:	4628      	mov	r0, r5
   1c79a:	f7ff fe01 	bl	1c3a0 <clear_ccc_cfg>
   1c79e:	e7cb      	b.n	1c738 <disconnected_cb+0x2c>
					sc_clear(conn);
   1c7a0:	4640      	mov	r0, r8
   1c7a2:	f7ff fea5 	bl	1c4f0 <sc_clear>
   1c7a6:	e7f7      	b.n	1c798 <disconnected_cb+0x8c>
   1c7a8:	2207      	movs	r2, #7
   1c7aa:	4659      	mov	r1, fp
   1c7ac:	4638      	mov	r0, r7
   1c7ae:	f00d fa00 	bl	29bb2 <memcpy>
}
   1c7b2:	e7c1      	b.n	1c738 <disconnected_cb+0x2c>
	if (!value_used) {
   1c7b4:	f1ba 0f00 	cmp.w	sl, #0
   1c7b8:	d1af      	bne.n	1c71a <disconnected_cb+0xe>
		ccc->value = 0U;
   1c7ba:	2300      	movs	r3, #0
   1c7bc:	f8a6 3050 	strh.w	r3, [r6, #80]	; 0x50
		if (ccc->cfg_changed) {
   1c7c0:	6d73      	ldr	r3, [r6, #84]	; 0x54
   1c7c2:	2b00      	cmp	r3, #0
   1c7c4:	d0a9      	beq.n	1c71a <disconnected_cb+0xe>
			ccc->cfg_changed(attr, ccc->value);
   1c7c6:	2100      	movs	r1, #0
   1c7c8:	4648      	mov	r0, r9
   1c7ca:	4798      	blx	r3
   1c7cc:	e7a5      	b.n	1c71a <disconnected_cb+0xe>
   1c7ce:	bf00      	nop
   1c7d0:	0001c3bd 	.word	0x0001c3bd
   1c7d4:	20000718 	.word	0x20000718

0001c7d8 <gatt_write_ccc>:
{
   1c7d8:	b500      	push	{lr}
   1c7da:	b085      	sub	sp, #20
   1c7dc:	460a      	mov	r2, r1
	return gatt_req_send(conn, gatt_write_ccc_rsp, params,
   1c7de:	2301      	movs	r3, #1
   1c7e0:	9302      	str	r3, [sp, #8]
   1c7e2:	2304      	movs	r3, #4
   1c7e4:	9301      	str	r3, [sp, #4]
   1c7e6:	2312      	movs	r3, #18
   1c7e8:	9300      	str	r3, [sp, #0]
   1c7ea:	4b03      	ldr	r3, [pc, #12]	; (1c7f8 <gatt_write_ccc+0x20>)
   1c7ec:	4903      	ldr	r1, [pc, #12]	; (1c7fc <gatt_write_ccc+0x24>)
   1c7ee:	f00f f8e8 	bl	2b9c2 <gatt_req_send>
}
   1c7f2:	b005      	add	sp, #20
   1c7f4:	f85d fb04 	ldr.w	pc, [sp], #4
   1c7f8:	0002baa1 	.word	0x0002baa1
   1c7fc:	0001c60d 	.word	0x0001c60d

0001c800 <clear_cf_cfg>:
{
   1c800:	b510      	push	{r4, lr}
   1c802:	4604      	mov	r4, r0
	memcpy(dst, src, sizeof(*dst));
   1c804:	2207      	movs	r2, #7
   1c806:	490b      	ldr	r1, [pc, #44]	; (1c834 <clear_cf_cfg+0x34>)
   1c808:	3001      	adds	r0, #1
   1c80a:	f00d f9d2 	bl	29bb2 <memcpy>
	memset(cfg->data, 0, sizeof(cfg->data));
   1c80e:	2201      	movs	r2, #1
   1c810:	2100      	movs	r1, #0
   1c812:	f104 0008 	add.w	r0, r4, #8
   1c816:	f00d f9fb 	bl	29c10 <memset>
	atomic_set(cfg->flags, 0);
   1c81a:	340c      	adds	r4, #12
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1c81c:	2300      	movs	r3, #0
   1c81e:	f3bf 8f5b 	dmb	ish
   1c822:	e854 2f00 	ldrex	r2, [r4]
   1c826:	e844 3100 	strex	r1, r3, [r4]
   1c82a:	2900      	cmp	r1, #0
   1c82c:	d1f9      	bne.n	1c822 <clear_cf_cfg+0x22>
   1c82e:	f3bf 8f5b 	dmb	ish
}
   1c832:	bd10      	pop	{r4, pc}
   1c834:	0003236c 	.word	0x0003236c

0001c838 <bt_gatt_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1c838:	4b13      	ldr	r3, [pc, #76]	; (1c888 <bt_gatt_init+0x50>)
   1c83a:	2201      	movs	r2, #1
   1c83c:	f3bf 8f5b 	dmb	ish
   1c840:	e853 1f00 	ldrex	r1, [r3]
   1c844:	2900      	cmp	r1, #0
   1c846:	d103      	bne.n	1c850 <bt_gatt_init+0x18>
   1c848:	e843 2000 	strex	r0, r2, [r3]
   1c84c:	2800      	cmp	r0, #0
   1c84e:	d1f7      	bne.n	1c840 <bt_gatt_init+0x8>
   1c850:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   1c854:	d116      	bne.n	1c884 <bt_gatt_init+0x4c>
{
   1c856:	b510      	push	{r4, lr}
	bt_gatt_service_init();
   1c858:	f7ff fbd0 	bl	1bffc <bt_gatt_service_init>
	list->head = NULL;
   1c85c:	4b0b      	ldr	r3, [pc, #44]	; (1c88c <bt_gatt_init+0x54>)
   1c85e:	2200      	movs	r2, #0
   1c860:	601a      	str	r2, [r3, #0]
	list->tail = NULL;
   1c862:	605a      	str	r2, [r3, #4]
	k_work_init_delayable(&db_hash.work, db_hash_process);
   1c864:	4c0a      	ldr	r4, [pc, #40]	; (1c890 <bt_gatt_init+0x58>)
   1c866:	490b      	ldr	r1, [pc, #44]	; (1c894 <bt_gatt_init+0x5c>)
   1c868:	4620      	mov	r0, r4
   1c86a:	f013 ff2d 	bl	306c8 <k_work_init_delayable>
		bt_long_wq_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   1c86e:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1c872:	2300      	movs	r3, #0
   1c874:	4620      	mov	r0, r4
   1c876:	f7f9 fe09 	bl	1648c <bt_long_wq_schedule>
	k_work_init_delayable(&gatt_sc.work, sc_process);
   1c87a:	4907      	ldr	r1, [pc, #28]	; (1c898 <bt_gatt_init+0x60>)
   1c87c:	4807      	ldr	r0, [pc, #28]	; (1c89c <bt_gatt_init+0x64>)
   1c87e:	f013 ff23 	bl	306c8 <k_work_init_delayable>
}
   1c882:	bd10      	pop	{r4, pc}
   1c884:	4770      	bx	lr
   1c886:	bf00      	nop
   1c888:	20008394 	.word	0x20008394
   1c88c:	20008398 	.word	0x20008398
   1c890:	20002708 	.word	0x20002708
   1c894:	0002bcfd 	.word	0x0002bcfd
   1c898:	0001ceb1 	.word	0x0001ceb1
   1c89c:	20002780 	.word	0x20002780

0001c8a0 <bt_gatt_attr_get_handle>:
	if (!attr) {
   1c8a0:	b328      	cbz	r0, 1c8ee <bt_gatt_attr_get_handle+0x4e>
   1c8a2:	4684      	mov	ip, r0
	if (attr->handle) {
   1c8a4:	8a00      	ldrh	r0, [r0, #16]
   1c8a6:	bb38      	cbnz	r0, 1c8f8 <bt_gatt_attr_get_handle+0x58>
{
   1c8a8:	b470      	push	{r4, r5, r6}
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1c8aa:	4d14      	ldr	r5, [pc, #80]	; (1c8fc <bt_gatt_attr_get_handle+0x5c>)
	uint16_t handle = 1;
   1c8ac:	2201      	movs	r2, #1
   1c8ae:	e003      	b.n	1c8b8 <bt_gatt_attr_get_handle+0x18>
			handle += static_svc->attr_count;
   1c8b0:	686b      	ldr	r3, [r5, #4]
   1c8b2:	4413      	add	r3, r2
   1c8b4:	b29a      	uxth	r2, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1c8b6:	3508      	adds	r5, #8
   1c8b8:	4b11      	ldr	r3, [pc, #68]	; (1c900 <bt_gatt_attr_get_handle+0x60>)
   1c8ba:	429d      	cmp	r5, r3
   1c8bc:	d21a      	bcs.n	1c8f4 <bt_gatt_attr_get_handle+0x54>
		if ((attr < &static_svc->attrs[0]) ||
   1c8be:	682c      	ldr	r4, [r5, #0]
   1c8c0:	4564      	cmp	r4, ip
   1c8c2:	d8f5      	bhi.n	1c8b0 <bt_gatt_attr_get_handle+0x10>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1c8c4:	686e      	ldr	r6, [r5, #4]
   1c8c6:	eb06 0386 	add.w	r3, r6, r6, lsl #2
   1c8ca:	009b      	lsls	r3, r3, #2
   1c8cc:	3b14      	subs	r3, #20
   1c8ce:	4423      	add	r3, r4
		if ((attr < &static_svc->attrs[0]) ||
   1c8d0:	4563      	cmp	r3, ip
   1c8d2:	d3ed      	bcc.n	1c8b0 <bt_gatt_attr_get_handle+0x10>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   1c8d4:	2300      	movs	r3, #0
   1c8d6:	429e      	cmp	r6, r3
   1c8d8:	d9ed      	bls.n	1c8b6 <bt_gatt_attr_get_handle+0x16>
			if (attr == &static_svc->attrs[i]) {
   1c8da:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   1c8de:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   1c8e2:	4561      	cmp	r1, ip
   1c8e4:	d005      	beq.n	1c8f2 <bt_gatt_attr_get_handle+0x52>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   1c8e6:	3301      	adds	r3, #1
   1c8e8:	3201      	adds	r2, #1
   1c8ea:	b292      	uxth	r2, r2
   1c8ec:	e7f3      	b.n	1c8d6 <bt_gatt_attr_get_handle+0x36>
		return 0;
   1c8ee:	2000      	movs	r0, #0
   1c8f0:	4770      	bx	lr
				return handle;
   1c8f2:	4610      	mov	r0, r2
}
   1c8f4:	bc70      	pop	{r4, r5, r6}
   1c8f6:	4770      	bx	lr
   1c8f8:	4770      	bx	lr
   1c8fa:	bf00      	nop
   1c8fc:	000313f0 	.word	0x000313f0
   1c900:	00031400 	.word	0x00031400

0001c904 <bt_gatt_foreach_attr_type>:
{
   1c904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c908:	b089      	sub	sp, #36	; 0x24
   1c90a:	4682      	mov	sl, r0
   1c90c:	9107      	str	r1, [sp, #28]
   1c90e:	4690      	mov	r8, r2
   1c910:	4699      	mov	r9, r3
   1c912:	9f13      	ldr	r7, [sp, #76]	; 0x4c
   1c914:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
	if (!num_matches) {
   1c918:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   1c91c:	b91b      	cbnz	r3, 1c926 <bt_gatt_foreach_attr_type+0x22>
		num_matches = UINT16_MAX;
   1c91e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1c922:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
	if (start_handle <= last_static_handle) {
   1c926:	4b1b      	ldr	r3, [pc, #108]	; (1c994 <bt_gatt_foreach_attr_type+0x90>)
   1c928:	881b      	ldrh	r3, [r3, #0]
   1c92a:	4553      	cmp	r3, sl
   1c92c:	d22a      	bcs.n	1c984 <bt_gatt_foreach_attr_type+0x80>
}
   1c92e:	b009      	add	sp, #36	; 0x24
   1c930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				handle += static_svc->attr_count;
   1c934:	b28c      	uxth	r4, r1
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1c936:	3608      	adds	r6, #8
   1c938:	4b17      	ldr	r3, [pc, #92]	; (1c998 <bt_gatt_foreach_attr_type+0x94>)
   1c93a:	429e      	cmp	r6, r3
   1c93c:	d2f7      	bcs.n	1c92e <bt_gatt_foreach_attr_type+0x2a>
			if (handle + static_svc->attr_count < start_handle) {
   1c93e:	6873      	ldr	r3, [r6, #4]
   1c940:	18e1      	adds	r1, r4, r3
   1c942:	42b9      	cmp	r1, r7
   1c944:	d3f6      	bcc.n	1c934 <bt_gatt_foreach_attr_type+0x30>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1c946:	2500      	movs	r5, #0
   1c948:	6873      	ldr	r3, [r6, #4]
   1c94a:	42ab      	cmp	r3, r5
   1c94c:	d9f3      	bls.n	1c936 <bt_gatt_foreach_attr_type+0x32>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1c94e:	eb05 0085 	add.w	r0, r5, r5, lsl #2
   1c952:	f8cd b010 	str.w	fp, [sp, #16]
   1c956:	f8cd a00c 	str.w	sl, [sp, #12]
   1c95a:	ab12      	add	r3, sp, #72	; 0x48
   1c95c:	9302      	str	r3, [sp, #8]
   1c95e:	f8cd 9004 	str.w	r9, [sp, #4]
   1c962:	f8cd 8000 	str.w	r8, [sp]
   1c966:	9b07      	ldr	r3, [sp, #28]
   1c968:	463a      	mov	r2, r7
   1c96a:	4621      	mov	r1, r4
   1c96c:	f8d6 c000 	ldr.w	ip, [r6]
   1c970:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
   1c974:	f00e ffec 	bl	2b950 <gatt_foreach_iter>
   1c978:	2800      	cmp	r0, #0
   1c97a:	d0d8      	beq.n	1c92e <bt_gatt_foreach_attr_type+0x2a>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1c97c:	3501      	adds	r5, #1
   1c97e:	3401      	adds	r4, #1
   1c980:	b2a4      	uxth	r4, r4
   1c982:	e7e1      	b.n	1c948 <bt_gatt_foreach_attr_type+0x44>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1c984:	4e05      	ldr	r6, [pc, #20]	; (1c99c <bt_gatt_foreach_attr_type+0x98>)
		uint16_t handle = 1;
   1c986:	2401      	movs	r4, #1
   1c988:	9713      	str	r7, [sp, #76]	; 0x4c
   1c98a:	4657      	mov	r7, sl
   1c98c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
   1c990:	e7d2      	b.n	1c938 <bt_gatt_foreach_attr_type+0x34>
   1c992:	bf00      	nop
   1c994:	200090b4 	.word	0x200090b4
   1c998:	00031400 	.word	0x00031400
   1c99c:	000313f0 	.word	0x000313f0

0001c9a0 <db_hash_gen>:
{
   1c9a0:	b510      	push	{r4, lr}
   1c9a2:	b0ce      	sub	sp, #312	; 0x138
	uint8_t key[16] = {};
   1c9a4:	2300      	movs	r3, #0
   1c9a6:	934a      	str	r3, [sp, #296]	; 0x128
   1c9a8:	934b      	str	r3, [sp, #300]	; 0x12c
   1c9aa:	934c      	str	r3, [sp, #304]	; 0x130
   1c9ac:	934d      	str	r3, [sp, #308]	; 0x134
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1c9ae:	aa1e      	add	r2, sp, #120	; 0x78
   1c9b0:	a94a      	add	r1, sp, #296	; 0x128
   1c9b2:	a806      	add	r0, sp, #24
   1c9b4:	f00c ff19 	bl	297ea <tc_cmac_setup>
   1c9b8:	b320      	cbz	r0, 1ca04 <db_hash_gen+0x64>
   1c9ba:	ac06      	add	r4, sp, #24
   1c9bc:	9402      	str	r4, [sp, #8]
   1c9be:	4b41      	ldr	r3, [pc, #260]	; (1cac4 <db_hash_gen+0x124>)
   1c9c0:	9301      	str	r3, [sp, #4]
   1c9c2:	2200      	movs	r2, #0
   1c9c4:	9200      	str	r2, [sp, #0]
   1c9c6:	4613      	mov	r3, r2
   1c9c8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1c9cc:	2001      	movs	r0, #1
   1c9ce:	f7ff ff99 	bl	1c904 <bt_gatt_foreach_attr_type>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   1c9d2:	4621      	mov	r1, r4
   1c9d4:	483c      	ldr	r0, [pc, #240]	; (1cac8 <db_hash_gen+0x128>)
   1c9d6:	f00c ffa5 	bl	29924 <tc_cmac_final>
   1c9da:	2800      	cmp	r0, #0
   1c9dc:	d042      	beq.n	1ca64 <db_hash_gen+0xc4>
	sys_mem_swap(db_hash.hash, sizeof(db_hash.hash));
   1c9de:	2110      	movs	r1, #16
   1c9e0:	4839      	ldr	r0, [pc, #228]	; (1cac8 <db_hash_gen+0x128>)
   1c9e2:	f00e fda3 	bl	2b52c <sys_mem_swap>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1c9e6:	4b39      	ldr	r3, [pc, #228]	; (1cacc <db_hash_gen+0x12c>)
   1c9e8:	f3bf 8f5b 	dmb	ish
   1c9ec:	e853 1f00 	ldrex	r1, [r3]
   1c9f0:	f041 0104 	orr.w	r1, r1, #4
   1c9f4:	e843 1200 	strex	r2, r1, [r3]
   1c9f8:	2a00      	cmp	r2, #0
   1c9fa:	d1f7      	bne.n	1c9ec <db_hash_gen+0x4c>
   1c9fc:	f3bf 8f5b 	dmb	ish
}
   1ca00:	b04e      	add	sp, #312	; 0x138
   1ca02:	bd10      	pop	{r4, pc}
		LOG_ERR("Unable to setup AES CMAC");
   1ca04:	2006      	movs	r0, #6
   1ca06:	f7f7 f97f 	bl	13d08 <z_log_msg_alloc>
   1ca0a:	2200      	movs	r2, #0
   1ca0c:	f36f 0200 	bfc	r2, #0, #1
   1ca10:	f36f 0241 	bfc	r2, #1, #1
   1ca14:	f36f 0282 	bfc	r2, #2, #1
   1ca18:	f36f 02c5 	bfc	r2, #3, #3
   1ca1c:	2301      	movs	r3, #1
   1ca1e:	f363 1288 	bfi	r2, r3, #6, #3
   1ca22:	2308      	movs	r3, #8
   1ca24:	f363 2252 	bfi	r2, r3, #9, #10
   1ca28:	f36f 42de 	bfc	r2, #19, #12
   1ca2c:	f36f 72df 	bfc	r2, #31, #1
   1ca30:	4604      	mov	r4, r0
   1ca32:	b188      	cbz	r0, 1ca58 <db_hash_gen+0xb8>
   1ca34:	f110 0310 	adds.w	r3, r0, #16
   1ca38:	d001      	beq.n	1ca3e <db_hash_gen+0x9e>
   1ca3a:	4925      	ldr	r1, [pc, #148]	; (1cad0 <db_hash_gen+0x130>)
   1ca3c:	6141      	str	r1, [r0, #20]
   1ca3e:	b15b      	cbz	r3, 1ca58 <db_hash_gen+0xb8>
   1ca40:	2302      	movs	r3, #2
   1ca42:	f88d 3014 	strb.w	r3, [sp, #20]
   1ca46:	2300      	movs	r3, #0
   1ca48:	f88d 3015 	strb.w	r3, [sp, #21]
   1ca4c:	f88d 3016 	strb.w	r3, [sp, #22]
   1ca50:	f88d 3017 	strb.w	r3, [sp, #23]
   1ca54:	9805      	ldr	r0, [sp, #20]
   1ca56:	6120      	str	r0, [r4, #16]
   1ca58:	2300      	movs	r3, #0
   1ca5a:	491e      	ldr	r1, [pc, #120]	; (1cad4 <db_hash_gen+0x134>)
   1ca5c:	4620      	mov	r0, r4
   1ca5e:	f00c fbbc 	bl	291da <z_log_msg_finalize>
		return;
   1ca62:	e7cd      	b.n	1ca00 <db_hash_gen+0x60>
		LOG_ERR("Unable to calculate hash");
   1ca64:	2006      	movs	r0, #6
   1ca66:	f7f7 f94f 	bl	13d08 <z_log_msg_alloc>
   1ca6a:	2200      	movs	r2, #0
   1ca6c:	f36f 0200 	bfc	r2, #0, #1
   1ca70:	f36f 0241 	bfc	r2, #1, #1
   1ca74:	f36f 0282 	bfc	r2, #2, #1
   1ca78:	f36f 02c5 	bfc	r2, #3, #3
   1ca7c:	2301      	movs	r3, #1
   1ca7e:	f363 1288 	bfi	r2, r3, #6, #3
   1ca82:	2308      	movs	r3, #8
   1ca84:	f363 2252 	bfi	r2, r3, #9, #10
   1ca88:	f36f 42de 	bfc	r2, #19, #12
   1ca8c:	f36f 72df 	bfc	r2, #31, #1
   1ca90:	4604      	mov	r4, r0
   1ca92:	b188      	cbz	r0, 1cab8 <db_hash_gen+0x118>
   1ca94:	f110 0310 	adds.w	r3, r0, #16
   1ca98:	d001      	beq.n	1ca9e <db_hash_gen+0xfe>
   1ca9a:	490f      	ldr	r1, [pc, #60]	; (1cad8 <db_hash_gen+0x138>)
   1ca9c:	6141      	str	r1, [r0, #20]
   1ca9e:	b15b      	cbz	r3, 1cab8 <db_hash_gen+0x118>
   1caa0:	2302      	movs	r3, #2
   1caa2:	f88d 3014 	strb.w	r3, [sp, #20]
   1caa6:	2300      	movs	r3, #0
   1caa8:	f88d 3015 	strb.w	r3, [sp, #21]
   1caac:	f88d 3016 	strb.w	r3, [sp, #22]
   1cab0:	f88d 3017 	strb.w	r3, [sp, #23]
   1cab4:	9805      	ldr	r0, [sp, #20]
   1cab6:	6120      	str	r0, [r4, #16]
   1cab8:	2300      	movs	r3, #0
   1caba:	4906      	ldr	r1, [pc, #24]	; (1cad4 <db_hash_gen+0x134>)
   1cabc:	4620      	mov	r0, r4
   1cabe:	f00c fb8c 	bl	291da <z_log_msg_finalize>
		return;
   1cac2:	e79d      	b.n	1ca00 <db_hash_gen+0x60>
   1cac4:	0002b68b 	.word	0x0002b68b
   1cac8:	200026f8 	.word	0x200026f8
   1cacc:	200027b0 	.word	0x200027b0
   1cad0:	000332d4 	.word	0x000332d4
   1cad4:	00031420 	.word	0x00031420
   1cad8:	000332f0 	.word	0x000332f0

0001cadc <db_hash_read>:
{
   1cadc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cae0:	b084      	sub	sp, #16
   1cae2:	4604      	mov	r4, r0
   1cae4:	460d      	mov	r5, r1
   1cae6:	4616      	mov	r6, r2
   1cae8:	461f      	mov	r7, r3
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1caea:	491f      	ldr	r1, [pc, #124]	; (1cb68 <db_hash_read+0x8c>)
   1caec:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   1caf0:	f013 fe4d 	bl	3078e <k_work_cancel_delayable_sync>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1caf4:	f3bf 8f5b 	dmb	ish
   1caf8:	4b1c      	ldr	r3, [pc, #112]	; (1cb6c <db_hash_read+0x90>)
   1cafa:	681b      	ldr	r3, [r3, #0]
   1cafc:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   1cb00:	f013 0f04 	tst.w	r3, #4
   1cb04:	d017      	beq.n	1cb36 <db_hash_read+0x5a>
	cfg = find_cf_cfg(conn);
   1cb06:	4620      	mov	r0, r4
   1cb08:	f7ff fada 	bl	1c0c0 <find_cf_cfg>
	if (cfg &&
   1cb0c:	b118      	cbz	r0, 1cb16 <db_hash_read+0x3a>
	    CF_ROBUST_CACHING(cfg) &&
   1cb0e:	7a02      	ldrb	r2, [r0, #8]
	if (cfg &&
   1cb10:	f012 0f01 	tst.w	r2, #1
   1cb14:	d113      	bne.n	1cb3e <db_hash_read+0x62>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   1cb16:	2310      	movs	r3, #16
   1cb18:	9302      	str	r3, [sp, #8]
   1cb1a:	4b15      	ldr	r3, [pc, #84]	; (1cb70 <db_hash_read+0x94>)
   1cb1c:	9301      	str	r3, [sp, #4]
   1cb1e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1cb22:	9300      	str	r3, [sp, #0]
   1cb24:	463b      	mov	r3, r7
   1cb26:	4632      	mov	r2, r6
   1cb28:	4629      	mov	r1, r5
   1cb2a:	4620      	mov	r0, r4
   1cb2c:	f00e ffec 	bl	2bb08 <bt_gatt_attr_read>
}
   1cb30:	b004      	add	sp, #16
   1cb32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		db_hash_gen(true);
   1cb36:	2001      	movs	r0, #1
   1cb38:	f7ff ff32 	bl	1c9a0 <db_hash_gen>
   1cb3c:	e7e3      	b.n	1cb06 <db_hash_read+0x2a>
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1cb3e:	f100 080c 	add.w	r8, r0, #12
   1cb42:	2100      	movs	r1, #0
   1cb44:	4640      	mov	r0, r8
   1cb46:	f00e fe0f 	bl	2b768 <atomic_test_bit>
	    CF_ROBUST_CACHING(cfg) &&
   1cb4a:	2800      	cmp	r0, #0
   1cb4c:	d1e3      	bne.n	1cb16 <db_hash_read+0x3a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1cb4e:	f3bf 8f5b 	dmb	ish
   1cb52:	e858 3f00 	ldrex	r3, [r8]
   1cb56:	f043 0302 	orr.w	r3, r3, #2
   1cb5a:	e848 3200 	strex	r2, r3, [r8]
   1cb5e:	2a00      	cmp	r2, #0
   1cb60:	d1f7      	bne.n	1cb52 <db_hash_read+0x76>
   1cb62:	f3bf 8f5b 	dmb	ish
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
}
   1cb66:	e7d6      	b.n	1cb16 <db_hash_read+0x3a>
   1cb68:	20002738 	.word	0x20002738
   1cb6c:	200027b0 	.word	0x200027b0
   1cb70:	200026f8 	.word	0x200026f8

0001cb74 <gatt_find_by_uuid>:
{
   1cb74:	b510      	push	{r4, lr}
   1cb76:	b084      	sub	sp, #16
   1cb78:	4604      	mov	r4, r0
   1cb7a:	460a      	mov	r2, r1
	found->attr = NULL;
   1cb7c:	2300      	movs	r3, #0
   1cb7e:	6003      	str	r3, [r0, #0]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1cb80:	9002      	str	r0, [sp, #8]
   1cb82:	4907      	ldr	r1, [pc, #28]	; (1cba0 <gatt_find_by_uuid+0x2c>)
   1cb84:	9101      	str	r1, [sp, #4]
   1cb86:	2101      	movs	r1, #1
   1cb88:	9100      	str	r1, [sp, #0]
   1cb8a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1cb8e:	8880      	ldrh	r0, [r0, #4]
   1cb90:	f7ff feb8 	bl	1c904 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   1cb94:	6820      	ldr	r0, [r4, #0]
}
   1cb96:	3800      	subs	r0, #0
   1cb98:	bf18      	it	ne
   1cb9a:	2001      	movne	r0, #1
   1cb9c:	b004      	add	sp, #16
   1cb9e:	bd10      	pop	{r4, pc}
   1cba0:	0002b66b 	.word	0x0002b66b

0001cba4 <bt_gatt_attr_next>:
{
   1cba4:	b510      	push	{r4, lr}
   1cba6:	b086      	sub	sp, #24
	struct bt_gatt_attr *next = NULL;
   1cba8:	2400      	movs	r4, #0
   1cbaa:	9405      	str	r4, [sp, #20]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   1cbac:	f7ff fe78 	bl	1c8a0 <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   1cbb0:	3001      	adds	r0, #1
   1cbb2:	b280      	uxth	r0, r0
   1cbb4:	ab05      	add	r3, sp, #20
   1cbb6:	9302      	str	r3, [sp, #8]
   1cbb8:	4b05      	ldr	r3, [pc, #20]	; (1cbd0 <bt_gatt_attr_next+0x2c>)
   1cbba:	9301      	str	r3, [sp, #4]
   1cbbc:	9400      	str	r4, [sp, #0]
   1cbbe:	4623      	mov	r3, r4
   1cbc0:	4622      	mov	r2, r4
   1cbc2:	4601      	mov	r1, r0
   1cbc4:	f7ff fe9e 	bl	1c904 <bt_gatt_foreach_attr_type>
}
   1cbc8:	9805      	ldr	r0, [sp, #20]
   1cbca:	b006      	add	sp, #24
   1cbcc:	bd10      	pop	{r4, pc}
   1cbce:	bf00      	nop
   1cbd0:	0002b60b 	.word	0x0002b60b

0001cbd4 <gatt_indicate>:
{
   1cbd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1cbd8:	b084      	sub	sp, #16
   1cbda:	4605      	mov	r5, r0
   1cbdc:	460f      	mov	r7, r1
   1cbde:	4614      	mov	r4, r2
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1cbe0:	2294      	movs	r2, #148	; 0x94
   1cbe2:	6861      	ldr	r1, [r4, #4]
   1cbe4:	f00f f88f 	bl	2bd06 <bt_gatt_check_perm>
   1cbe8:	2800      	cmp	r0, #0
   1cbea:	d141      	bne.n	1cc70 <gatt_indicate+0x9c>
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_INDICATE)) {
   1cbec:	2202      	movs	r2, #2
   1cbee:	6861      	ldr	r1, [r4, #4]
   1cbf0:	4628      	mov	r0, r5
   1cbf2:	f00f f8ba 	bl	2bd6a <bt_gatt_is_subscribed>
   1cbf6:	2800      	cmp	r0, #0
   1cbf8:	d06c      	beq.n	1ccd4 <gatt_indicate+0x100>
	len = sizeof(*ind) + params->len;
   1cbfa:	8aa6      	ldrh	r6, [r4, #20]
   1cbfc:	3602      	adds	r6, #2
	req = gatt_req_alloc(gatt_indicate_rsp, params, NULL,
   1cbfe:	9600      	str	r6, [sp, #0]
   1cc00:	231d      	movs	r3, #29
   1cc02:	2200      	movs	r2, #0
   1cc04:	4621      	mov	r1, r4
   1cc06:	486a      	ldr	r0, [pc, #424]	; (1cdb0 <gatt_indicate+0x1dc>)
   1cc08:	f00e fecd 	bl	2b9a6 <gatt_req_alloc>
	if (!req) {
   1cc0c:	4681      	mov	r9, r0
   1cc0e:	2800      	cmp	r0, #0
   1cc10:	f000 80cb 	beq.w	1cdaa <gatt_indicate+0x1d6>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   1cc14:	4632      	mov	r2, r6
   1cc16:	211d      	movs	r1, #29
   1cc18:	4628      	mov	r0, r5
   1cc1a:	f7fe fe13 	bl	1b844 <bt_att_create_pdu>
	if (!buf) {
   1cc1e:	4680      	mov	r8, r0
   1cc20:	2800      	cmp	r0, #0
   1cc22:	f000 8089 	beq.w	1cd38 <gatt_indicate+0x164>
	bt_att_set_tx_meta_data(buf, NULL, NULL, BT_ATT_CHAN_OPT(params));
   1cc26:	2301      	movs	r3, #1
   1cc28:	2200      	movs	r2, #0
   1cc2a:	4611      	mov	r1, r2
   1cc2c:	f00e fc54 	bl	2b4d8 <bt_att_set_tx_meta_data>
   1cc30:	f108 0a0c 	add.w	sl, r8, #12
   1cc34:	2102      	movs	r1, #2
   1cc36:	4650      	mov	r0, sl
   1cc38:	f00f fd22 	bl	2c680 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   1cc3c:	4606      	mov	r6, r0
   1cc3e:	f826 7b02 	strh.w	r7, [r6], #2
   1cc42:	8aa1      	ldrh	r1, [r4, #20]
   1cc44:	4650      	mov	r0, sl
   1cc46:	f00f fd1b 	bl	2c680 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   1cc4a:	8aa2      	ldrh	r2, [r4, #20]
   1cc4c:	6921      	ldr	r1, [r4, #16]
   1cc4e:	4630      	mov	r0, r6
   1cc50:	f00c ffaf 	bl	29bb2 <memcpy>
	req->buf = buf;
   1cc54:	f8c9 8008 	str.w	r8, [r9, #8]
	err = bt_att_req_send(conn, req);
   1cc58:	4649      	mov	r1, r9
   1cc5a:	4628      	mov	r0, r5
   1cc5c:	f00e fba3 	bl	2b3a6 <bt_att_req_send>
	if (err) {
   1cc60:	4604      	mov	r4, r0
   1cc62:	2800      	cmp	r0, #0
   1cc64:	f040 809d 	bne.w	1cda2 <gatt_indicate+0x1ce>
}
   1cc68:	4620      	mov	r0, r4
   1cc6a:	b004      	add	sp, #16
   1cc6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		LOG_WRN("Link is not encrypted");
   1cc70:	2006      	movs	r0, #6
   1cc72:	f7f7 f849 	bl	13d08 <z_log_msg_alloc>
   1cc76:	2200      	movs	r2, #0
   1cc78:	f36f 0200 	bfc	r2, #0, #1
   1cc7c:	f36f 0241 	bfc	r2, #1, #1
   1cc80:	f36f 0282 	bfc	r2, #2, #1
   1cc84:	f36f 02c5 	bfc	r2, #3, #3
   1cc88:	2302      	movs	r3, #2
   1cc8a:	f363 1288 	bfi	r2, r3, #6, #3
   1cc8e:	2308      	movs	r3, #8
   1cc90:	f363 2252 	bfi	r2, r3, #9, #10
   1cc94:	f36f 42de 	bfc	r2, #19, #12
   1cc98:	f36f 72df 	bfc	r2, #31, #1
   1cc9c:	4604      	mov	r4, r0
   1cc9e:	b188      	cbz	r0, 1ccc4 <gatt_indicate+0xf0>
   1cca0:	f110 0310 	adds.w	r3, r0, #16
   1cca4:	d001      	beq.n	1ccaa <gatt_indicate+0xd6>
   1cca6:	4943      	ldr	r1, [pc, #268]	; (1cdb4 <gatt_indicate+0x1e0>)
   1cca8:	6141      	str	r1, [r0, #20]
   1ccaa:	b15b      	cbz	r3, 1ccc4 <gatt_indicate+0xf0>
   1ccac:	2302      	movs	r3, #2
   1ccae:	f88d 300c 	strb.w	r3, [sp, #12]
   1ccb2:	2300      	movs	r3, #0
   1ccb4:	f88d 300d 	strb.w	r3, [sp, #13]
   1ccb8:	f88d 300e 	strb.w	r3, [sp, #14]
   1ccbc:	f88d 300f 	strb.w	r3, [sp, #15]
   1ccc0:	9803      	ldr	r0, [sp, #12]
   1ccc2:	6120      	str	r0, [r4, #16]
   1ccc4:	2300      	movs	r3, #0
   1ccc6:	493c      	ldr	r1, [pc, #240]	; (1cdb8 <gatt_indicate+0x1e4>)
   1ccc8:	4620      	mov	r0, r4
   1ccca:	f00c fa86 	bl	291da <z_log_msg_finalize>
		return -EPERM;
   1ccce:	f04f 34ff 	mov.w	r4, #4294967295
   1ccd2:	e7c9      	b.n	1cc68 <gatt_indicate+0x94>
			LOG_WRN("Device is not subscribed to characteristic");
   1ccd4:	2006      	movs	r0, #6
   1ccd6:	f7f7 f817 	bl	13d08 <z_log_msg_alloc>
   1ccda:	2200      	movs	r2, #0
   1ccdc:	f36f 0200 	bfc	r2, #0, #1
   1cce0:	f36f 0241 	bfc	r2, #1, #1
   1cce4:	f36f 0282 	bfc	r2, #2, #1
   1cce8:	f36f 02c5 	bfc	r2, #3, #3
   1ccec:	2302      	movs	r3, #2
   1ccee:	f363 1288 	bfi	r2, r3, #6, #3
   1ccf2:	2308      	movs	r3, #8
   1ccf4:	f363 2252 	bfi	r2, r3, #9, #10
   1ccf8:	f36f 42de 	bfc	r2, #19, #12
   1ccfc:	f36f 72df 	bfc	r2, #31, #1
   1cd00:	4604      	mov	r4, r0
   1cd02:	b188      	cbz	r0, 1cd28 <gatt_indicate+0x154>
   1cd04:	f110 0310 	adds.w	r3, r0, #16
   1cd08:	d001      	beq.n	1cd0e <gatt_indicate+0x13a>
   1cd0a:	492c      	ldr	r1, [pc, #176]	; (1cdbc <gatt_indicate+0x1e8>)
   1cd0c:	6141      	str	r1, [r0, #20]
   1cd0e:	b15b      	cbz	r3, 1cd28 <gatt_indicate+0x154>
   1cd10:	2302      	movs	r3, #2
   1cd12:	f88d 300c 	strb.w	r3, [sp, #12]
   1cd16:	2300      	movs	r3, #0
   1cd18:	f88d 300d 	strb.w	r3, [sp, #13]
   1cd1c:	f88d 300e 	strb.w	r3, [sp, #14]
   1cd20:	f88d 300f 	strb.w	r3, [sp, #15]
   1cd24:	9803      	ldr	r0, [sp, #12]
   1cd26:	6120      	str	r0, [r4, #16]
   1cd28:	2300      	movs	r3, #0
   1cd2a:	4923      	ldr	r1, [pc, #140]	; (1cdb8 <gatt_indicate+0x1e4>)
   1cd2c:	4620      	mov	r0, r4
   1cd2e:	f00c fa54 	bl	291da <z_log_msg_finalize>
			return -EINVAL;
   1cd32:	f06f 0415 	mvn.w	r4, #21
   1cd36:	e797      	b.n	1cc68 <gatt_indicate+0x94>
		LOG_WRN("No buffer available to send indication");
   1cd38:	2006      	movs	r0, #6
   1cd3a:	f7f6 ffe5 	bl	13d08 <z_log_msg_alloc>
   1cd3e:	2200      	movs	r2, #0
   1cd40:	f36f 0200 	bfc	r2, #0, #1
   1cd44:	f36f 0241 	bfc	r2, #1, #1
   1cd48:	f36f 0282 	bfc	r2, #2, #1
   1cd4c:	f36f 02c5 	bfc	r2, #3, #3
   1cd50:	2302      	movs	r3, #2
   1cd52:	f363 1288 	bfi	r2, r3, #6, #3
   1cd56:	2308      	movs	r3, #8
   1cd58:	f363 2252 	bfi	r2, r3, #9, #10
   1cd5c:	f36f 42de 	bfc	r2, #19, #12
   1cd60:	f36f 72df 	bfc	r2, #31, #1
   1cd64:	4604      	mov	r4, r0
   1cd66:	b188      	cbz	r0, 1cd8c <gatt_indicate+0x1b8>
   1cd68:	f110 0310 	adds.w	r3, r0, #16
   1cd6c:	d001      	beq.n	1cd72 <gatt_indicate+0x19e>
   1cd6e:	4914      	ldr	r1, [pc, #80]	; (1cdc0 <gatt_indicate+0x1ec>)
   1cd70:	6141      	str	r1, [r0, #20]
   1cd72:	b15b      	cbz	r3, 1cd8c <gatt_indicate+0x1b8>
   1cd74:	2302      	movs	r3, #2
   1cd76:	f88d 300c 	strb.w	r3, [sp, #12]
   1cd7a:	2300      	movs	r3, #0
   1cd7c:	f88d 300d 	strb.w	r3, [sp, #13]
   1cd80:	f88d 300e 	strb.w	r3, [sp, #14]
   1cd84:	f88d 300f 	strb.w	r3, [sp, #15]
   1cd88:	9803      	ldr	r0, [sp, #12]
   1cd8a:	6120      	str	r0, [r4, #16]
   1cd8c:	2300      	movs	r3, #0
   1cd8e:	490a      	ldr	r1, [pc, #40]	; (1cdb8 <gatt_indicate+0x1e4>)
   1cd90:	4620      	mov	r0, r4
   1cd92:	f00c fa22 	bl	291da <z_log_msg_finalize>
		bt_att_req_free(req);
   1cd96:	4648      	mov	r0, r9
   1cd98:	f7ff f812 	bl	1bdc0 <bt_att_req_free>
		return -ENOMEM;
   1cd9c:	f06f 040b 	mvn.w	r4, #11
   1cda0:	e762      	b.n	1cc68 <gatt_indicate+0x94>
		bt_att_req_free(req);
   1cda2:	4648      	mov	r0, r9
   1cda4:	f7ff f80c 	bl	1bdc0 <bt_att_req_free>
   1cda8:	e75e      	b.n	1cc68 <gatt_indicate+0x94>
		return -ENOMEM;
   1cdaa:	f06f 040b 	mvn.w	r4, #11
   1cdae:	e75b      	b.n	1cc68 <gatt_indicate+0x94>
   1cdb0:	0002b649 	.word	0x0002b649
   1cdb4:	0003330c 	.word	0x0003330c
   1cdb8:	00031420 	.word	0x00031420
   1cdbc:	00033324 	.word	0x00033324
   1cdc0:	00033350 	.word	0x00033350

0001cdc4 <bt_gatt_indicate>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1cdc4:	f3bf 8f5b 	dmb	ish
   1cdc8:	4b37      	ldr	r3, [pc, #220]	; (1cea8 <bt_gatt_indicate+0xe4>)
   1cdca:	681b      	ldr	r3, [r3, #0]
   1cdcc:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1cdd0:	f013 0f04 	tst.w	r3, #4
   1cdd4:	d05e      	beq.n	1ce94 <bt_gatt_indicate+0xd0>
{
   1cdd6:	b530      	push	{r4, r5, lr}
   1cdd8:	b08d      	sub	sp, #52	; 0x34
   1cdda:	4605      	mov	r5, r0
   1cddc:	460c      	mov	r4, r1
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1cdde:	b110      	cbz	r0, 1cde6 <bt_gatt_indicate+0x22>
   1cde0:	7a83      	ldrb	r3, [r0, #10]
   1cde2:	2b07      	cmp	r3, #7
   1cde4:	d159      	bne.n	1ce9a <bt_gatt_indicate+0xd6>
	data.attr = params->attr;
   1cde6:	6860      	ldr	r0, [r4, #4]
   1cde8:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1cdea:	f7ff fd59 	bl	1c8a0 <bt_gatt_attr_get_handle>
   1cdee:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   1cdf2:	6821      	ldr	r1, [r4, #0]
   1cdf4:	b341      	cbz	r1, 1ce48 <bt_gatt_indicate+0x84>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1cdf6:	a805      	add	r0, sp, #20
   1cdf8:	f7ff febc 	bl	1cb74 <gatt_find_by_uuid>
   1cdfc:	2800      	cmp	r0, #0
   1cdfe:	d04f      	beq.n	1cea0 <bt_gatt_indicate+0xdc>
		params->attr = data.attr;
   1ce00:	9b05      	ldr	r3, [sp, #20]
   1ce02:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1ce04:	9b05      	ldr	r3, [sp, #20]
   1ce06:	6818      	ldr	r0, [r3, #0]
   1ce08:	2300      	movs	r3, #0
   1ce0a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   1ce0e:	f642 0303 	movw	r3, #10243	; 0x2803
   1ce12:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1ce16:	a90b      	add	r1, sp, #44	; 0x2c
   1ce18:	f00c ff4b 	bl	29cb2 <bt_uuid_cmp>
   1ce1c:	b948      	cbnz	r0, 1ce32 <bt_gatt_indicate+0x6e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1ce1e:	9805      	ldr	r0, [sp, #20]
   1ce20:	68c3      	ldr	r3, [r0, #12]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   1ce22:	799b      	ldrb	r3, [r3, #6]
   1ce24:	f013 0f20 	tst.w	r3, #32
   1ce28:	d013      	beq.n	1ce52 <bt_gatt_indicate+0x8e>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1ce2a:	f00e ff18 	bl	2bc5e <bt_gatt_attr_value_handle>
   1ce2e:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (conn) {
   1ce32:	b18d      	cbz	r5, 1ce58 <bt_gatt_indicate+0x94>
		params->_ref = 1;
   1ce34:	2301      	movs	r3, #1
   1ce36:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   1ce38:	4622      	mov	r2, r4
   1ce3a:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   1ce3e:	4628      	mov	r0, r5
   1ce40:	f7ff fec8 	bl	1cbd4 <gatt_indicate>
}
   1ce44:	b00d      	add	sp, #52	; 0x34
   1ce46:	bd30      	pop	{r4, r5, pc}
		if (!data.handle) {
   1ce48:	2800      	cmp	r0, #0
   1ce4a:	d1db      	bne.n	1ce04 <bt_gatt_indicate+0x40>
			return -ENOENT;
   1ce4c:	f06f 0001 	mvn.w	r0, #1
   1ce50:	e7f8      	b.n	1ce44 <bt_gatt_indicate+0x80>
			return -EINVAL;
   1ce52:	f06f 0015 	mvn.w	r0, #21
   1ce56:	e7f5      	b.n	1ce44 <bt_gatt_indicate+0x80>
	data.err = -ENOTCONN;
   1ce58:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1ce5c:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   1ce5e:	2302      	movs	r3, #2
   1ce60:	f8ad 3020 	strh.w	r3, [sp, #32]
	data.ind_params = params;
   1ce64:	9409      	str	r4, [sp, #36]	; 0x24
	params->_ref = 0;
   1ce66:	2300      	movs	r3, #0
   1ce68:	75a3      	strb	r3, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1ce6a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   1ce6e:	f642 1202 	movw	r2, #10498	; 0x2902
   1ce72:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
   1ce76:	aa05      	add	r2, sp, #20
   1ce78:	9202      	str	r2, [sp, #8]
   1ce7a:	4a0c      	ldr	r2, [pc, #48]	; (1ceac <bt_gatt_indicate+0xe8>)
   1ce7c:	9201      	str	r2, [sp, #4]
   1ce7e:	2201      	movs	r2, #1
   1ce80:	9200      	str	r2, [sp, #0]
   1ce82:	aa0a      	add	r2, sp, #40	; 0x28
   1ce84:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1ce88:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   1ce8c:	f7ff fd3a 	bl	1c904 <bt_gatt_foreach_attr_type>
	return data.err;
   1ce90:	9807      	ldr	r0, [sp, #28]
   1ce92:	e7d7      	b.n	1ce44 <bt_gatt_indicate+0x80>
		return -EAGAIN;
   1ce94:	f06f 000a 	mvn.w	r0, #10
}
   1ce98:	4770      	bx	lr
		return -ENOTCONN;
   1ce9a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1ce9e:	e7d1      	b.n	1ce44 <bt_gatt_indicate+0x80>
			return -ENOENT;
   1cea0:	f06f 0001 	mvn.w	r0, #1
   1cea4:	e7ce      	b.n	1ce44 <bt_gatt_indicate+0x80>
   1cea6:	bf00      	nop
   1cea8:	2000043c 	.word	0x2000043c
   1ceac:	0001d299 	.word	0x0001d299

0001ceb0 <sc_process>:
{
   1ceb0:	b510      	push	{r4, lr}
   1ceb2:	b082      	sub	sp, #8
   1ceb4:	4603      	mov	r3, r0
	sc_range[0] = sys_cpu_to_le16(sc->start);
   1ceb6:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   1ceba:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(sc->end);
   1cebe:	f830 2c06 	ldrh.w	r2, [r0, #-6]
   1cec2:	f8ad 2006 	strh.w	r2, [sp, #6]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   1cec6:	f1a0 0120 	sub.w	r1, r0, #32
   1ceca:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1cece:	f3bf 8f5b 	dmb	ish
   1ced2:	e854 2f00 	ldrex	r2, [r4]
   1ced6:	f022 0201 	bic.w	r2, r2, #1
   1ceda:	e844 2000 	strex	r0, r2, [r4]
   1cede:	2800      	cmp	r0, #0
   1cee0:	d1f7      	bne.n	1ced2 <sc_process+0x22>
   1cee2:	f3bf 8f5b 	dmb	ish
	sc->start = 0U;
   1cee6:	2000      	movs	r0, #0
   1cee8:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->end = 0U;
   1ceec:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.attr = &_1_gatt_svc.attrs[2];
   1cef0:	4a0e      	ldr	r2, [pc, #56]	; (1cf2c <sc_process+0x7c>)
   1cef2:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
   1cef6:	4a0e      	ldr	r2, [pc, #56]	; (1cf30 <sc_process+0x80>)
   1cef8:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
   1cefc:	aa01      	add	r2, sp, #4
   1cefe:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
   1cf02:	2204      	movs	r2, #4
   1cf04:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   1cf08:	f7ff ff5c 	bl	1cdc4 <bt_gatt_indicate>
   1cf0c:	b108      	cbz	r0, 1cf12 <sc_process+0x62>
}
   1cf0e:	b002      	add	sp, #8
   1cf10:	bd10      	pop	{r4, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1cf12:	f3bf 8f5b 	dmb	ish
   1cf16:	e854 3f00 	ldrex	r3, [r4]
   1cf1a:	f043 0302 	orr.w	r3, r3, #2
   1cf1e:	e844 3200 	strex	r2, r3, [r4]
   1cf22:	2a00      	cmp	r2, #0
   1cf24:	d1f7      	bne.n	1cf16 <sc_process+0x66>
   1cf26:	f3bf 8f5b 	dmb	ish
   1cf2a:	e7f0      	b.n	1cf0e <sc_process+0x5e>
   1cf2c:	0003344c 	.word	0x0003344c
   1cf30:	0001c591 	.word	0x0001c591

0001cf34 <sc_restore>:
{
   1cf34:	b510      	push	{r4, lr}
   1cf36:	b082      	sub	sp, #8
   1cf38:	4604      	mov	r4, r0
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1cf3a:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1cf3e:	7a00      	ldrb	r0, [r0, #8]
   1cf40:	f7ff f8e4 	bl	1c10c <find_sc_cfg>
	if (!cfg) {
   1cf44:	b1f0      	cbz	r0, 1cf84 <sc_restore+0x50>
   1cf46:	4603      	mov	r3, r0
	if (!(cfg->data.start || cfg->data.end)) {
   1cf48:	8902      	ldrh	r2, [r0, #8]
   1cf4a:	b90a      	cbnz	r2, 1cf50 <sc_restore+0x1c>
   1cf4c:	8941      	ldrh	r1, [r0, #10]
   1cf4e:	b1c9      	cbz	r1, 1cf84 <sc_restore+0x50>
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   1cf50:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   1cf54:	895b      	ldrh	r3, [r3, #10]
   1cf56:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   1cf5a:	4620      	mov	r0, r4
   1cf5c:	f7fc fe80 	bl	19c60 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1cf60:	4921      	ldr	r1, [pc, #132]	; (1cfe8 <sc_restore+0xb4>)
   1cf62:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   1cf66:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   1cf6a:	4a20      	ldr	r2, [pc, #128]	; (1cfec <sc_restore+0xb8>)
   1cf6c:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   1cf6e:	4a20      	ldr	r2, [pc, #128]	; (1cff0 <sc_restore+0xbc>)
   1cf70:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   1cf72:	aa01      	add	r2, sp, #4
   1cf74:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   1cf76:	2204      	movs	r2, #4
   1cf78:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1cf7a:	4619      	mov	r1, r3
   1cf7c:	4620      	mov	r0, r4
   1cf7e:	f7ff ff21 	bl	1cdc4 <bt_gatt_indicate>
   1cf82:	b908      	cbnz	r0, 1cf88 <sc_restore+0x54>
}
   1cf84:	b002      	add	sp, #8
   1cf86:	bd10      	pop	{r4, pc}
		LOG_ERR("SC restore indication failed");
   1cf88:	2006      	movs	r0, #6
   1cf8a:	f7f6 febd 	bl	13d08 <z_log_msg_alloc>
   1cf8e:	2200      	movs	r2, #0
   1cf90:	f36f 0200 	bfc	r2, #0, #1
   1cf94:	f36f 0241 	bfc	r2, #1, #1
   1cf98:	f36f 0282 	bfc	r2, #2, #1
   1cf9c:	f36f 02c5 	bfc	r2, #3, #3
   1cfa0:	2301      	movs	r3, #1
   1cfa2:	f363 1288 	bfi	r2, r3, #6, #3
   1cfa6:	2308      	movs	r3, #8
   1cfa8:	f363 2252 	bfi	r2, r3, #9, #10
   1cfac:	f36f 42de 	bfc	r2, #19, #12
   1cfb0:	f36f 72df 	bfc	r2, #31, #1
   1cfb4:	4604      	mov	r4, r0
   1cfb6:	b188      	cbz	r0, 1cfdc <sc_restore+0xa8>
   1cfb8:	f110 0310 	adds.w	r3, r0, #16
   1cfbc:	d001      	beq.n	1cfc2 <sc_restore+0x8e>
   1cfbe:	490d      	ldr	r1, [pc, #52]	; (1cff4 <sc_restore+0xc0>)
   1cfc0:	6141      	str	r1, [r0, #20]
   1cfc2:	b15b      	cbz	r3, 1cfdc <sc_restore+0xa8>
   1cfc4:	2302      	movs	r3, #2
   1cfc6:	f88d 3000 	strb.w	r3, [sp]
   1cfca:	2300      	movs	r3, #0
   1cfcc:	f88d 3001 	strb.w	r3, [sp, #1]
   1cfd0:	f88d 3002 	strb.w	r3, [sp, #2]
   1cfd4:	f88d 3003 	strb.w	r3, [sp, #3]
   1cfd8:	9800      	ldr	r0, [sp, #0]
   1cfda:	6120      	str	r0, [r4, #16]
   1cfdc:	2300      	movs	r3, #0
   1cfde:	4906      	ldr	r1, [pc, #24]	; (1cff8 <sc_restore+0xc4>)
   1cfe0:	4620      	mov	r0, r4
   1cfe2:	f00c f8fa 	bl	291da <z_log_msg_finalize>
   1cfe6:	e7cd      	b.n	1cf84 <sc_restore+0x50>
   1cfe8:	200081f0 	.word	0x200081f0
   1cfec:	0003344c 	.word	0x0003344c
   1cff0:	0002b8c5 	.word	0x0002b8c5
   1cff4:	00033378 	.word	0x00033378
   1cff8:	00031420 	.word	0x00031420

0001cffc <update_ccc>:
{
   1cffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d000:	b082      	sub	sp, #8
	struct bt_conn *conn = data->conn;
   1d002:	6817      	ldr	r7, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   1d004:	6882      	ldr	r2, [r0, #8]
   1d006:	4b33      	ldr	r3, [pc, #204]	; (1d0d4 <update_ccc+0xd8>)
   1d008:	429a      	cmp	r2, r3
   1d00a:	d003      	beq.n	1d014 <update_ccc+0x18>
}
   1d00c:	2001      	movs	r0, #1
   1d00e:	b002      	add	sp, #8
   1d010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d014:	4605      	mov	r5, r0
	ccc = attr->user_data;
   1d016:	68c6      	ldr	r6, [r0, #12]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1d018:	2400      	movs	r4, #0
   1d01a:	e031      	b.n	1d080 <update_ccc+0x84>
				LOG_WRN("CCC %p not writable", attr);
   1d01c:	2008      	movs	r0, #8
   1d01e:	f7f6 fe73 	bl	13d08 <z_log_msg_alloc>
   1d022:	f36f 0800 	bfc	r8, #0, #1
   1d026:	f36f 0841 	bfc	r8, #1, #1
   1d02a:	f36f 0882 	bfc	r8, #2, #1
   1d02e:	f36f 08c5 	bfc	r8, #3, #3
   1d032:	2302      	movs	r3, #2
   1d034:	f363 1888 	bfi	r8, r3, #6, #3
   1d038:	230c      	movs	r3, #12
   1d03a:	f363 2852 	bfi	r8, r3, #9, #10
   1d03e:	f36f 48de 	bfc	r8, #19, #12
   1d042:	f36f 78df 	bfc	r8, #31, #1
   1d046:	4684      	mov	ip, r0
   1d048:	b198      	cbz	r0, 1d072 <update_ccc+0x76>
   1d04a:	f110 0310 	adds.w	r3, r0, #16
   1d04e:	d002      	beq.n	1d056 <update_ccc+0x5a>
   1d050:	4a21      	ldr	r2, [pc, #132]	; (1d0d8 <update_ccc+0xdc>)
   1d052:	6142      	str	r2, [r0, #20]
   1d054:	6185      	str	r5, [r0, #24]
   1d056:	b163      	cbz	r3, 1d072 <update_ccc+0x76>
   1d058:	2303      	movs	r3, #3
   1d05a:	f88d 3004 	strb.w	r3, [sp, #4]
   1d05e:	2300      	movs	r3, #0
   1d060:	f88d 3005 	strb.w	r3, [sp, #5]
   1d064:	f88d 3006 	strb.w	r3, [sp, #6]
   1d068:	f88d 3007 	strb.w	r3, [sp, #7]
   1d06c:	9801      	ldr	r0, [sp, #4]
   1d06e:	f8cc 0010 	str.w	r0, [ip, #16]
   1d072:	2300      	movs	r3, #0
   1d074:	4642      	mov	r2, r8
   1d076:	4919      	ldr	r1, [pc, #100]	; (1d0dc <update_ccc+0xe0>)
   1d078:	4660      	mov	r0, ip
   1d07a:	f00c f8ae 	bl	291da <z_log_msg_finalize>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1d07e:	3401      	adds	r4, #1
   1d080:	2c07      	cmp	r4, #7
   1d082:	d8c3      	bhi.n	1d00c <update_ccc+0x10>
		if (!cfg->value ||
   1d084:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1d088:	eb06 0343 	add.w	r3, r6, r3, lsl #1
   1d08c:	891b      	ldrh	r3, [r3, #8]
   1d08e:	2b00      	cmp	r3, #0
   1d090:	d0f5      	beq.n	1d07e <update_ccc+0x82>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1d092:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1d096:	eb06 0243 	add.w	r2, r6, r3, lsl #1
   1d09a:	3201      	adds	r2, #1
   1d09c:	f816 1013 	ldrb.w	r1, [r6, r3, lsl #1]
   1d0a0:	4638      	mov	r0, r7
   1d0a2:	f00d f991 	bl	2a3c8 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   1d0a6:	2800      	cmp	r0, #0
   1d0a8:	d0e9      	beq.n	1d07e <update_ccc+0x82>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   1d0aa:	f44f 7295 	mov.w	r2, #298	; 0x12a
   1d0ae:	4629      	mov	r1, r5
   1d0b0:	4638      	mov	r0, r7
   1d0b2:	f00e fe28 	bl	2bd06 <bt_gatt_check_perm>
		if (err) {
   1d0b6:	b108      	cbz	r0, 1d0bc <update_ccc+0xc0>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   1d0b8:	2803      	cmp	r0, #3
   1d0ba:	d0af      	beq.n	1d01c <update_ccc+0x20>
		gatt_ccc_changed(attr, ccc);
   1d0bc:	4631      	mov	r1, r6
   1d0be:	4628      	mov	r0, r5
   1d0c0:	f00e faa6 	bl	2b610 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   1d0c4:	4b06      	ldr	r3, [pc, #24]	; (1d0e0 <update_ccc+0xe4>)
   1d0c6:	429e      	cmp	r6, r3
   1d0c8:	d1a0      	bne.n	1d00c <update_ccc+0x10>
			sc_restore(conn);
   1d0ca:	4638      	mov	r0, r7
   1d0cc:	f7ff ff32 	bl	1cf34 <sc_restore>
   1d0d0:	e79c      	b.n	1d00c <update_ccc+0x10>
   1d0d2:	bf00      	nop
   1d0d4:	0001c3bd 	.word	0x0001c3bd
   1d0d8:	00033398 	.word	0x00033398
   1d0dc:	00031420 	.word	0x00031420
   1d0e0:	20000718 	.word	0x20000718

0001d0e4 <gatt_notify>:
{
   1d0e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d0e8:	b083      	sub	sp, #12
   1d0ea:	4605      	mov	r5, r0
   1d0ec:	460f      	mov	r7, r1
   1d0ee:	4614      	mov	r4, r2
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1d0f0:	2294      	movs	r2, #148	; 0x94
   1d0f2:	6861      	ldr	r1, [r4, #4]
   1d0f4:	f00e fe07 	bl	2bd06 <bt_gatt_check_perm>
   1d0f8:	bb78      	cbnz	r0, 1d15a <gatt_notify+0x76>
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_NOTIFY)) {
   1d0fa:	2201      	movs	r2, #1
   1d0fc:	6861      	ldr	r1, [r4, #4]
   1d0fe:	4628      	mov	r0, r5
   1d100:	f00e fe33 	bl	2bd6a <bt_gatt_is_subscribed>
   1d104:	2800      	cmp	r0, #0
   1d106:	d05a      	beq.n	1d1be <gatt_notify+0xda>
				sizeof(*nfy) + params->len);
   1d108:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   1d10a:	3202      	adds	r2, #2
   1d10c:	211b      	movs	r1, #27
   1d10e:	4628      	mov	r0, r5
   1d110:	f7fe fb98 	bl	1b844 <bt_att_create_pdu>
	if (!buf) {
   1d114:	4680      	mov	r8, r0
   1d116:	2800      	cmp	r0, #0
   1d118:	f000 8083 	beq.w	1d222 <gatt_notify+0x13e>
   1d11c:	f100 090c 	add.w	r9, r0, #12
   1d120:	2102      	movs	r1, #2
   1d122:	4648      	mov	r0, r9
   1d124:	f00f faac 	bl	2c680 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   1d128:	4606      	mov	r6, r0
   1d12a:	f826 7b02 	strh.w	r7, [r6], #2
   1d12e:	89a1      	ldrh	r1, [r4, #12]
   1d130:	4648      	mov	r0, r9
   1d132:	f00f faa5 	bl	2c680 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   1d136:	89a2      	ldrh	r2, [r4, #12]
   1d138:	68a1      	ldr	r1, [r4, #8]
   1d13a:	4630      	mov	r0, r6
   1d13c:	f00c fd39 	bl	29bb2 <memcpy>
	bt_att_set_tx_meta_data(buf, params->func, params->user_data, BT_ATT_CHAN_OPT(params));
   1d140:	2301      	movs	r3, #1
   1d142:	6962      	ldr	r2, [r4, #20]
   1d144:	6921      	ldr	r1, [r4, #16]
   1d146:	4640      	mov	r0, r8
   1d148:	f00e f9c6 	bl	2b4d8 <bt_att_set_tx_meta_data>
	return bt_att_send(conn, buf);
   1d14c:	4641      	mov	r1, r8
   1d14e:	4628      	mov	r0, r5
   1d150:	f00e f911 	bl	2b376 <bt_att_send>
}
   1d154:	b003      	add	sp, #12
   1d156:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		LOG_WRN("Link is not encrypted");
   1d15a:	2006      	movs	r0, #6
   1d15c:	f7f6 fdd4 	bl	13d08 <z_log_msg_alloc>
   1d160:	2200      	movs	r2, #0
   1d162:	f36f 0200 	bfc	r2, #0, #1
   1d166:	f36f 0241 	bfc	r2, #1, #1
   1d16a:	f36f 0282 	bfc	r2, #2, #1
   1d16e:	f36f 02c5 	bfc	r2, #3, #3
   1d172:	2302      	movs	r3, #2
   1d174:	f363 1288 	bfi	r2, r3, #6, #3
   1d178:	2308      	movs	r3, #8
   1d17a:	f363 2252 	bfi	r2, r3, #9, #10
   1d17e:	f36f 42de 	bfc	r2, #19, #12
   1d182:	f36f 72df 	bfc	r2, #31, #1
   1d186:	4604      	mov	r4, r0
   1d188:	b188      	cbz	r0, 1d1ae <gatt_notify+0xca>
   1d18a:	f110 0310 	adds.w	r3, r0, #16
   1d18e:	d001      	beq.n	1d194 <gatt_notify+0xb0>
   1d190:	493d      	ldr	r1, [pc, #244]	; (1d288 <gatt_notify+0x1a4>)
   1d192:	6141      	str	r1, [r0, #20]
   1d194:	b15b      	cbz	r3, 1d1ae <gatt_notify+0xca>
   1d196:	2302      	movs	r3, #2
   1d198:	f88d 3004 	strb.w	r3, [sp, #4]
   1d19c:	2300      	movs	r3, #0
   1d19e:	f88d 3005 	strb.w	r3, [sp, #5]
   1d1a2:	f88d 3006 	strb.w	r3, [sp, #6]
   1d1a6:	f88d 3007 	strb.w	r3, [sp, #7]
   1d1aa:	9801      	ldr	r0, [sp, #4]
   1d1ac:	6120      	str	r0, [r4, #16]
   1d1ae:	2300      	movs	r3, #0
   1d1b0:	4936      	ldr	r1, [pc, #216]	; (1d28c <gatt_notify+0x1a8>)
   1d1b2:	4620      	mov	r0, r4
   1d1b4:	f00c f811 	bl	291da <z_log_msg_finalize>
		return -EPERM;
   1d1b8:	f04f 30ff 	mov.w	r0, #4294967295
   1d1bc:	e7ca      	b.n	1d154 <gatt_notify+0x70>
			LOG_WRN("Device is not subscribed to characteristic");
   1d1be:	2006      	movs	r0, #6
   1d1c0:	f7f6 fda2 	bl	13d08 <z_log_msg_alloc>
   1d1c4:	2200      	movs	r2, #0
   1d1c6:	f36f 0200 	bfc	r2, #0, #1
   1d1ca:	f36f 0241 	bfc	r2, #1, #1
   1d1ce:	f36f 0282 	bfc	r2, #2, #1
   1d1d2:	f36f 02c5 	bfc	r2, #3, #3
   1d1d6:	2302      	movs	r3, #2
   1d1d8:	f363 1288 	bfi	r2, r3, #6, #3
   1d1dc:	2308      	movs	r3, #8
   1d1de:	f363 2252 	bfi	r2, r3, #9, #10
   1d1e2:	f36f 42de 	bfc	r2, #19, #12
   1d1e6:	f36f 72df 	bfc	r2, #31, #1
   1d1ea:	4604      	mov	r4, r0
   1d1ec:	b188      	cbz	r0, 1d212 <gatt_notify+0x12e>
   1d1ee:	f110 0310 	adds.w	r3, r0, #16
   1d1f2:	d001      	beq.n	1d1f8 <gatt_notify+0x114>
   1d1f4:	4926      	ldr	r1, [pc, #152]	; (1d290 <gatt_notify+0x1ac>)
   1d1f6:	6141      	str	r1, [r0, #20]
   1d1f8:	b15b      	cbz	r3, 1d212 <gatt_notify+0x12e>
   1d1fa:	2302      	movs	r3, #2
   1d1fc:	f88d 3004 	strb.w	r3, [sp, #4]
   1d200:	2300      	movs	r3, #0
   1d202:	f88d 3005 	strb.w	r3, [sp, #5]
   1d206:	f88d 3006 	strb.w	r3, [sp, #6]
   1d20a:	f88d 3007 	strb.w	r3, [sp, #7]
   1d20e:	9801      	ldr	r0, [sp, #4]
   1d210:	6120      	str	r0, [r4, #16]
   1d212:	2300      	movs	r3, #0
   1d214:	491d      	ldr	r1, [pc, #116]	; (1d28c <gatt_notify+0x1a8>)
   1d216:	4620      	mov	r0, r4
   1d218:	f00b ffdf 	bl	291da <z_log_msg_finalize>
			return -EINVAL;
   1d21c:	f06f 0015 	mvn.w	r0, #21
   1d220:	e798      	b.n	1d154 <gatt_notify+0x70>
		LOG_WRN("No buffer available to send notification");
   1d222:	2006      	movs	r0, #6
   1d224:	f7f6 fd70 	bl	13d08 <z_log_msg_alloc>
   1d228:	2200      	movs	r2, #0
   1d22a:	f36f 0200 	bfc	r2, #0, #1
   1d22e:	f36f 0241 	bfc	r2, #1, #1
   1d232:	f36f 0282 	bfc	r2, #2, #1
   1d236:	f36f 02c5 	bfc	r2, #3, #3
   1d23a:	2302      	movs	r3, #2
   1d23c:	f363 1288 	bfi	r2, r3, #6, #3
   1d240:	2308      	movs	r3, #8
   1d242:	f363 2252 	bfi	r2, r3, #9, #10
   1d246:	f36f 42de 	bfc	r2, #19, #12
   1d24a:	f36f 72df 	bfc	r2, #31, #1
   1d24e:	4604      	mov	r4, r0
   1d250:	b188      	cbz	r0, 1d276 <gatt_notify+0x192>
   1d252:	f110 0310 	adds.w	r3, r0, #16
   1d256:	d001      	beq.n	1d25c <gatt_notify+0x178>
   1d258:	490e      	ldr	r1, [pc, #56]	; (1d294 <gatt_notify+0x1b0>)
   1d25a:	6141      	str	r1, [r0, #20]
   1d25c:	b15b      	cbz	r3, 1d276 <gatt_notify+0x192>
   1d25e:	2302      	movs	r3, #2
   1d260:	f88d 3004 	strb.w	r3, [sp, #4]
   1d264:	2300      	movs	r3, #0
   1d266:	f88d 3005 	strb.w	r3, [sp, #5]
   1d26a:	f88d 3006 	strb.w	r3, [sp, #6]
   1d26e:	f88d 3007 	strb.w	r3, [sp, #7]
   1d272:	9801      	ldr	r0, [sp, #4]
   1d274:	6120      	str	r0, [r4, #16]
   1d276:	2300      	movs	r3, #0
   1d278:	4904      	ldr	r1, [pc, #16]	; (1d28c <gatt_notify+0x1a8>)
   1d27a:	4620      	mov	r0, r4
   1d27c:	f00b ffad 	bl	291da <z_log_msg_finalize>
		return -ENOMEM;
   1d280:	f06f 000b 	mvn.w	r0, #11
   1d284:	e766      	b.n	1d154 <gatt_notify+0x70>
   1d286:	bf00      	nop
   1d288:	0003330c 	.word	0x0003330c
   1d28c:	00031420 	.word	0x00031420
   1d290:	00033324 	.word	0x00033324
   1d294:	000333ac 	.word	0x000333ac

0001d298 <notify_cb>:
{
   1d298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d29c:	b083      	sub	sp, #12
   1d29e:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1d2a0:	6882      	ldr	r2, [r0, #8]
   1d2a2:	4b6e      	ldr	r3, [pc, #440]	; (1d45c <notify_cb+0x1c4>)
   1d2a4:	429a      	cmp	r2, r3
   1d2a6:	d005      	beq.n	1d2b4 <notify_cb+0x1c>
		return BT_GATT_ITER_CONTINUE;
   1d2a8:	f04f 0a01 	mov.w	sl, #1
}
   1d2ac:	4650      	mov	r0, sl
   1d2ae:	b003      	add	sp, #12
   1d2b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d2b4:	4607      	mov	r7, r0
	ccc = attr->user_data;
   1d2b6:	68c5      	ldr	r5, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   1d2b8:	4b69      	ldr	r3, [pc, #420]	; (1d460 <notify_cb+0x1c8>)
   1d2ba:	429d      	cmp	r5, r3
   1d2bc:	d02d      	beq.n	1d31a <notify_cb+0x82>
			err = 0;
   1d2be:	2400      	movs	r4, #0
   1d2c0:	e091      	b.n	1d3e6 <notify_cb+0x14e>
				sc = (struct sc_data *)data->ind_params->data;
   1d2c2:	6933      	ldr	r3, [r6, #16]
   1d2c4:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   1d2c6:	eb09 0049 	add.w	r0, r9, r9, lsl #1
   1d2ca:	8853      	ldrh	r3, [r2, #2]
   1d2cc:	8812      	ldrh	r2, [r2, #0]
   1d2ce:	4621      	mov	r1, r4
   1d2d0:	4c64      	ldr	r4, [pc, #400]	; (1d464 <notify_cb+0x1cc>)
   1d2d2:	f814 0020 	ldrb.w	r0, [r4, r0, lsl #2]
   1d2d6:	f7ff f803 	bl	1c2e0 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1d2da:	f109 0901 	add.w	r9, r9, #1
   1d2de:	f1b9 0f07 	cmp.w	r9, #7
   1d2e2:	d8ec      	bhi.n	1d2be <notify_cb+0x26>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1d2e4:	eb09 0349 	add.w	r3, r9, r9, lsl #1
   1d2e8:	4c5e      	ldr	r4, [pc, #376]	; (1d464 <notify_cb+0x1cc>)
   1d2ea:	eb04 0483 	add.w	r4, r4, r3, lsl #2
   1d2ee:	3401      	adds	r4, #1
	return memcmp(a, b, sizeof(*a));
   1d2f0:	2207      	movs	r2, #7
   1d2f2:	495d      	ldr	r1, [pc, #372]	; (1d468 <notify_cb+0x1d0>)
   1d2f4:	4620      	mov	r0, r4
   1d2f6:	f00c fc4a 	bl	29b8e <memcmp>
   1d2fa:	2800      	cmp	r0, #0
   1d2fc:	d0ed      	beq.n	1d2da <notify_cb+0x42>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   1d2fe:	eb09 0349 	add.w	r3, r9, r9, lsl #1
   1d302:	2207      	movs	r2, #7
   1d304:	4621      	mov	r1, r4
   1d306:	4857      	ldr	r0, [pc, #348]	; (1d464 <notify_cb+0x1cc>)
   1d308:	f810 0023 	ldrb.w	r0, [r0, r3, lsl #2]
   1d30c:	f7fc fdae 	bl	19e6c <bt_conn_lookup_state_le>
			if (!conn) {
   1d310:	2800      	cmp	r0, #0
   1d312:	d0d6      	beq.n	1d2c2 <notify_cb+0x2a>
			bt_conn_unref(conn);
   1d314:	f00c fffe 	bl	2a314 <bt_conn_unref>
   1d318:	e7df      	b.n	1d2da <notify_cb+0x42>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1d31a:	f04f 0900 	mov.w	r9, #0
   1d31e:	e7de      	b.n	1d2de <notify_cb+0x46>
			bt_conn_unref(conn);
   1d320:	f00c fff8 	bl	2a314 <bt_conn_unref>
			continue;
   1d324:	e05e      	b.n	1d3e4 <notify_cb+0x14c>
			bt_conn_unref(conn);
   1d326:	4648      	mov	r0, r9
   1d328:	f00c fff4 	bl	2a314 <bt_conn_unref>
			continue;
   1d32c:	e05a      	b.n	1d3e4 <notify_cb+0x14c>
			LOG_WRN("Link is not encrypted");
   1d32e:	2006      	movs	r0, #6
   1d330:	f7f6 fcea 	bl	13d08 <z_log_msg_alloc>
   1d334:	f36f 0800 	bfc	r8, #0, #1
   1d338:	f36f 0841 	bfc	r8, #1, #1
   1d33c:	f36f 0882 	bfc	r8, #2, #1
   1d340:	f36f 08c5 	bfc	r8, #3, #3
   1d344:	2302      	movs	r3, #2
   1d346:	f363 1888 	bfi	r8, r3, #6, #3
   1d34a:	2308      	movs	r3, #8
   1d34c:	f363 2852 	bfi	r8, r3, #9, #10
   1d350:	f36f 48de 	bfc	r8, #19, #12
   1d354:	f36f 78df 	bfc	r8, #31, #1
   1d358:	4684      	mov	ip, r0
   1d35a:	b190      	cbz	r0, 1d382 <notify_cb+0xea>
   1d35c:	f110 0310 	adds.w	r3, r0, #16
   1d360:	d001      	beq.n	1d366 <notify_cb+0xce>
   1d362:	4a42      	ldr	r2, [pc, #264]	; (1d46c <notify_cb+0x1d4>)
   1d364:	6142      	str	r2, [r0, #20]
   1d366:	b163      	cbz	r3, 1d382 <notify_cb+0xea>
   1d368:	2302      	movs	r3, #2
   1d36a:	f88d 3004 	strb.w	r3, [sp, #4]
   1d36e:	2300      	movs	r3, #0
   1d370:	f88d 3005 	strb.w	r3, [sp, #5]
   1d374:	f88d 3006 	strb.w	r3, [sp, #6]
   1d378:	f88d 3007 	strb.w	r3, [sp, #7]
   1d37c:	9801      	ldr	r0, [sp, #4]
   1d37e:	f8cc 0010 	str.w	r0, [ip, #16]
   1d382:	2300      	movs	r3, #0
   1d384:	4642      	mov	r2, r8
   1d386:	493a      	ldr	r1, [pc, #232]	; (1d470 <notify_cb+0x1d8>)
   1d388:	4660      	mov	r0, ip
   1d38a:	f00b ff26 	bl	291da <z_log_msg_finalize>
			bt_conn_unref(conn);
   1d38e:	4648      	mov	r0, r9
   1d390:	f00c ffc0 	bl	2a314 <bt_conn_unref>
			continue;
   1d394:	e026      	b.n	1d3e4 <notify_cb+0x14c>
		    (cfg->value & BT_GATT_CCC_INDICATE)) {
   1d396:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1d39a:	eb05 0242 	add.w	r2, r5, r2, lsl #1
   1d39e:	8912      	ldrh	r2, [r2, #8]
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   1d3a0:	f012 0f02 	tst.w	r2, #2
   1d3a4:	d04a      	beq.n	1d43c <notify_cb+0x1a4>
			err = gatt_indicate(conn, data->handle, data->ind_params);
   1d3a6:	6932      	ldr	r2, [r6, #16]
   1d3a8:	88b1      	ldrh	r1, [r6, #4]
   1d3aa:	4648      	mov	r0, r9
   1d3ac:	f7ff fc12 	bl	1cbd4 <gatt_indicate>
			if (err == 0) {
   1d3b0:	4683      	mov	fp, r0
   1d3b2:	b970      	cbnz	r0, 1d3d2 <notify_cb+0x13a>
				data->ind_params->_ref++;
   1d3b4:	6932      	ldr	r2, [r6, #16]
   1d3b6:	7d93      	ldrb	r3, [r2, #22]
   1d3b8:	3301      	adds	r3, #1
   1d3ba:	7593      	strb	r3, [r2, #22]
   1d3bc:	e009      	b.n	1d3d2 <notify_cb+0x13a>
			   (cfg->value & BT_GATT_CCC_NOTIFY)) {
   1d3be:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1d3c2:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   1d3c6:	891b      	ldrh	r3, [r3, #8]
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   1d3c8:	f013 0f01 	tst.w	r3, #1
   1d3cc:	d13b      	bne.n	1d446 <notify_cb+0x1ae>
			err = 0;
   1d3ce:	f04f 0b00 	mov.w	fp, #0
		bt_conn_unref(conn);
   1d3d2:	4648      	mov	r0, r9
   1d3d4:	f00c ff9e 	bl	2a314 <bt_conn_unref>
		if (err < 0) {
   1d3d8:	f1bb 0f00 	cmp.w	fp, #0
   1d3dc:	f6ff af66 	blt.w	1d2ac <notify_cb+0x14>
		data->err = 0;
   1d3e0:	2300      	movs	r3, #0
   1d3e2:	60b3      	str	r3, [r6, #8]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1d3e4:	3401      	adds	r4, #1
   1d3e6:	2c07      	cmp	r4, #7
   1d3e8:	d834      	bhi.n	1d454 <notify_cb+0x1bc>
		if (cfg->value != data->type) {
   1d3ea:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1d3ee:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   1d3f2:	891a      	ldrh	r2, [r3, #8]
   1d3f4:	89b3      	ldrh	r3, [r6, #12]
   1d3f6:	429a      	cmp	r2, r3
   1d3f8:	d1f4      	bne.n	1d3e4 <notify_cb+0x14c>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1d3fa:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1d3fe:	eb05 0143 	add.w	r1, r5, r3, lsl #1
   1d402:	3101      	adds	r1, #1
   1d404:	f815 0013 	ldrb.w	r0, [r5, r3, lsl #1]
   1d408:	f7fc fd0a 	bl	19e20 <bt_conn_lookup_addr_le>
		if (!conn) {
   1d40c:	4681      	mov	r9, r0
   1d40e:	2800      	cmp	r0, #0
   1d410:	d0e8      	beq.n	1d3e4 <notify_cb+0x14c>
		if (conn->state != BT_CONN_CONNECTED) {
   1d412:	7a83      	ldrb	r3, [r0, #10]
   1d414:	2b07      	cmp	r3, #7
   1d416:	d183      	bne.n	1d320 <notify_cb+0x88>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   1d418:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   1d41a:	b11b      	cbz	r3, 1d424 <notify_cb+0x18c>
   1d41c:	4639      	mov	r1, r7
   1d41e:	4798      	blx	r3
   1d420:	2800      	cmp	r0, #0
   1d422:	d080      	beq.n	1d326 <notify_cb+0x8e>
		if (bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1d424:	2294      	movs	r2, #148	; 0x94
   1d426:	4639      	mov	r1, r7
   1d428:	4648      	mov	r0, r9
   1d42a:	f00e fc6c 	bl	2bd06 <bt_gatt_check_perm>
   1d42e:	4682      	mov	sl, r0
   1d430:	2800      	cmp	r0, #0
   1d432:	f47f af7c 	bne.w	1d32e <notify_cb+0x96>
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   1d436:	89b3      	ldrh	r3, [r6, #12]
   1d438:	2b02      	cmp	r3, #2
   1d43a:	d0ac      	beq.n	1d396 <notify_cb+0xfe>
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   1d43c:	2b01      	cmp	r3, #1
   1d43e:	d0be      	beq.n	1d3be <notify_cb+0x126>
			err = 0;
   1d440:	f04f 0b00 	mov.w	fp, #0
   1d444:	e7c5      	b.n	1d3d2 <notify_cb+0x13a>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   1d446:	6932      	ldr	r2, [r6, #16]
   1d448:	88b1      	ldrh	r1, [r6, #4]
   1d44a:	4648      	mov	r0, r9
   1d44c:	f7ff fe4a 	bl	1d0e4 <gatt_notify>
   1d450:	4683      	mov	fp, r0
   1d452:	e7be      	b.n	1d3d2 <notify_cb+0x13a>
	return BT_GATT_ITER_CONTINUE;
   1d454:	f04f 0a01 	mov.w	sl, #1
   1d458:	e728      	b.n	1d2ac <notify_cb+0x14>
   1d45a:	bf00      	nop
   1d45c:	0001c3bd 	.word	0x0001c3bd
   1d460:	20000718 	.word	0x20000718
   1d464:	20008330 	.word	0x20008330
   1d468:	0003236c 	.word	0x0003236c
   1d46c:	0003330c 	.word	0x0003330c
   1d470:	00031420 	.word	0x00031420

0001d474 <bt_gatt_exchange_mtu>:
	if (conn->state != BT_CONN_CONNECTED) {
   1d474:	7a83      	ldrb	r3, [r0, #10]
   1d476:	2b07      	cmp	r3, #7
   1d478:	d123      	bne.n	1d4c2 <bt_gatt_exchange_mtu+0x4e>
{
   1d47a:	b570      	push	{r4, r5, r6, lr}
   1d47c:	b084      	sub	sp, #16
   1d47e:	4604      	mov	r4, r0
   1d480:	460d      	mov	r5, r1
	if (atomic_test_and_set_bit(conn->flags, BT_CONN_ATT_MTU_EXCHANGED)) {
   1d482:	1d06      	adds	r6, r0, #4
   1d484:	210c      	movs	r1, #12
   1d486:	4630      	mov	r0, r6
   1d488:	f00e f97b 	bl	2b782 <atomic_test_and_set_bit>
   1d48c:	b9e0      	cbnz	r0, 1d4c8 <bt_gatt_exchange_mtu+0x54>
	err = gatt_req_send(conn, gatt_mtu_rsp, params,
   1d48e:	2301      	movs	r3, #1
   1d490:	9302      	str	r3, [sp, #8]
   1d492:	2302      	movs	r3, #2
   1d494:	9301      	str	r3, [sp, #4]
   1d496:	9300      	str	r3, [sp, #0]
   1d498:	4b0d      	ldr	r3, [pc, #52]	; (1d4d0 <bt_gatt_exchange_mtu+0x5c>)
   1d49a:	462a      	mov	r2, r5
   1d49c:	490d      	ldr	r1, [pc, #52]	; (1d4d4 <bt_gatt_exchange_mtu+0x60>)
   1d49e:	4620      	mov	r0, r4
   1d4a0:	f00e fa8f 	bl	2b9c2 <gatt_req_send>
	if (err) {
   1d4a4:	b158      	cbz	r0, 1d4be <bt_gatt_exchange_mtu+0x4a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1d4a6:	f3bf 8f5b 	dmb	ish
   1d4aa:	e856 3f00 	ldrex	r3, [r6]
   1d4ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   1d4b2:	e846 3200 	strex	r2, r3, [r6]
   1d4b6:	2a00      	cmp	r2, #0
   1d4b8:	d1f7      	bne.n	1d4aa <bt_gatt_exchange_mtu+0x36>
   1d4ba:	f3bf 8f5b 	dmb	ish
}
   1d4be:	b004      	add	sp, #16
   1d4c0:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTCONN;
   1d4c2:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   1d4c6:	4770      	bx	lr
		return -EALREADY;
   1d4c8:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1d4cc:	e7f7      	b.n	1d4be <bt_gatt_exchange_mtu+0x4a>
   1d4ce:	bf00      	nop
   1d4d0:	0002ba89 	.word	0x0002ba89
   1d4d4:	0002b681 	.word	0x0002b681

0001d4d8 <bt_gatt_mult_notification>:
{
   1d4d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d4dc:	b085      	sub	sp, #20
   1d4de:	4606      	mov	r6, r0
   1d4e0:	460c      	mov	r4, r1
   1d4e2:	4615      	mov	r5, r2
	sub = gatt_sub_find(conn);
   1d4e4:	f7fe fe5e 	bl	1c1a4 <gatt_sub_find>
	if (!sub) {
   1d4e8:	b3b8      	cbz	r0, 1d55a <bt_gatt_mult_notification+0x82>
   1d4ea:	4680      	mov	r8, r0
	net_buf_simple_init_with_data(&buf, (void *)data, length);
   1d4ec:	462a      	mov	r2, r5
   1d4ee:	4621      	mov	r1, r4
   1d4f0:	a801      	add	r0, sp, #4
   1d4f2:	f00f f842 	bl	2c57a <net_buf_simple_init_with_data>
	while (buf.len > sizeof(*nfy)) {
   1d4f6:	e05a      	b.n	1d5ae <bt_gatt_mult_notification+0xd6>
			LOG_ERR("Invalid data len %u > %u", len, length);
   1d4f8:	2008      	movs	r0, #8
   1d4fa:	f7f6 fc05 	bl	13d08 <z_log_msg_alloc>
   1d4fe:	2200      	movs	r2, #0
   1d500:	f36f 0200 	bfc	r2, #0, #1
   1d504:	f36f 0241 	bfc	r2, #1, #1
   1d508:	f36f 0282 	bfc	r2, #2, #1
   1d50c:	f36f 02c5 	bfc	r2, #3, #3
   1d510:	2301      	movs	r3, #1
   1d512:	f363 1288 	bfi	r2, r3, #6, #3
   1d516:	2310      	movs	r3, #16
   1d518:	f363 2252 	bfi	r2, r3, #9, #10
   1d51c:	f36f 42de 	bfc	r2, #19, #12
   1d520:	f36f 72df 	bfc	r2, #31, #1
   1d524:	4604      	mov	r4, r0
   1d526:	b198      	cbz	r0, 1d550 <bt_gatt_mult_notification+0x78>
   1d528:	18c3      	adds	r3, r0, r3
   1d52a:	d004      	beq.n	1d536 <bt_gatt_mult_notification+0x5e>
   1d52c:	492e      	ldr	r1, [pc, #184]	; (1d5e8 <bt_gatt_mult_notification+0x110>)
   1d52e:	6141      	str	r1, [r0, #20]
   1d530:	f8c4 b018 	str.w	fp, [r4, #24]
   1d534:	61c5      	str	r5, [r0, #28]
   1d536:	b15b      	cbz	r3, 1d550 <bt_gatt_mult_notification+0x78>
   1d538:	2304      	movs	r3, #4
   1d53a:	f88d 3000 	strb.w	r3, [sp]
   1d53e:	2300      	movs	r3, #0
   1d540:	f88d 3001 	strb.w	r3, [sp, #1]
   1d544:	f88d 3002 	strb.w	r3, [sp, #2]
   1d548:	f88d 3003 	strb.w	r3, [sp, #3]
   1d54c:	9800      	ldr	r0, [sp, #0]
   1d54e:	6120      	str	r0, [r4, #16]
   1d550:	2300      	movs	r3, #0
   1d552:	4926      	ldr	r1, [pc, #152]	; (1d5ec <bt_gatt_mult_notification+0x114>)
   1d554:	4620      	mov	r0, r4
   1d556:	f00b fe40 	bl	291da <z_log_msg_finalize>
}
   1d55a:	b005      	add	sp, #20
   1d55c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   1d560:	b1ff      	cbz	r7, 1d5a2 <bt_gatt_mult_notification+0xca>
	return node->next;
   1d562:	69bb      	ldr	r3, [r7, #24]
   1d564:	b103      	cbz	r3, 1d568 <bt_gatt_mult_notification+0x90>
   1d566:	3b18      	subs	r3, #24
   1d568:	463c      	mov	r4, r7
   1d56a:	461f      	mov	r7, r3
   1d56c:	b1dc      	cbz	r4, 1d5a6 <bt_gatt_mult_notification+0xce>
			if (handle != params->value_handle) {
   1d56e:	89a3      	ldrh	r3, [r4, #12]
   1d570:	4599      	cmp	r9, r3
   1d572:	d1f5      	bne.n	1d560 <bt_gatt_mult_notification+0x88>
			if (check_subscribe_security_level(conn, params)) {
   1d574:	4621      	mov	r1, r4
   1d576:	4630      	mov	r0, r6
   1d578:	f00e f880 	bl	2b67c <check_subscribe_security_level>
   1d57c:	2800      	cmp	r0, #0
   1d57e:	d0ef      	beq.n	1d560 <bt_gatt_mult_notification+0x88>
				if (params->notify(conn, params, nfy->value, len) ==
   1d580:	465b      	mov	r3, fp
   1d582:	f10a 0204 	add.w	r2, sl, #4
   1d586:	4621      	mov	r1, r4
   1d588:	4630      	mov	r0, r6
   1d58a:	f8d4 c000 	ldr.w	ip, [r4]
   1d58e:	47e0      	blx	ip
   1d590:	2800      	cmp	r0, #0
   1d592:	d1e5      	bne.n	1d560 <bt_gatt_mult_notification+0x88>
					bt_gatt_unsubscribe(conn, params);
   1d594:	4621      	mov	r1, r4
   1d596:	4630      	mov	r0, r6
   1d598:	f00e fc99 	bl	2bece <bt_gatt_unsubscribe>
   1d59c:	e7e0      	b.n	1d560 <bt_gatt_mult_notification+0x88>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   1d59e:	4627      	mov	r7, r4
   1d5a0:	e7e4      	b.n	1d56c <bt_gatt_mult_notification+0x94>
   1d5a2:	463b      	mov	r3, r7
   1d5a4:	e7e0      	b.n	1d568 <bt_gatt_mult_notification+0x90>
		net_buf_simple_pull_mem(&buf, len);
   1d5a6:	4659      	mov	r1, fp
   1d5a8:	a801      	add	r0, sp, #4
   1d5aa:	f00f f893 	bl	2c6d4 <net_buf_simple_pull_mem>
	while (buf.len > sizeof(*nfy)) {
   1d5ae:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   1d5b2:	2b04      	cmp	r3, #4
   1d5b4:	d9d1      	bls.n	1d55a <bt_gatt_mult_notification+0x82>
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   1d5b6:	2104      	movs	r1, #4
   1d5b8:	eb0d 0001 	add.w	r0, sp, r1
   1d5bc:	f00f f88a 	bl	2c6d4 <net_buf_simple_pull_mem>
   1d5c0:	4682      	mov	sl, r0
		handle = sys_cpu_to_le16(nfy->handle);
   1d5c2:	f8b0 9000 	ldrh.w	r9, [r0]
		len = sys_cpu_to_le16(nfy->len);
   1d5c6:	f8b0 b002 	ldrh.w	fp, [r0, #2]
		if (len > buf.len) {
   1d5ca:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   1d5ce:	455b      	cmp	r3, fp
   1d5d0:	d392      	bcc.n	1d4f8 <bt_gatt_mult_notification+0x20>
	return list->head;
   1d5d2:	f8d8 4008 	ldr.w	r4, [r8, #8]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   1d5d6:	2c00      	cmp	r4, #0
   1d5d8:	d0e1      	beq.n	1d59e <bt_gatt_mult_notification+0xc6>
	return node->next;
   1d5da:	f854 7918 	ldr.w	r7, [r4], #-24
   1d5de:	2f00      	cmp	r7, #0
   1d5e0:	d0c4      	beq.n	1d56c <bt_gatt_mult_notification+0x94>
   1d5e2:	3f18      	subs	r7, #24
   1d5e4:	e7c2      	b.n	1d56c <bt_gatt_mult_notification+0x94>
   1d5e6:	bf00      	nop
   1d5e8:	000333d8 	.word	0x000333d8
   1d5ec:	00031420 	.word	0x00031420

0001d5f0 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   1d5f0:	b530      	push	{r4, r5, lr}
   1d5f2:	b089      	sub	sp, #36	; 0x24
   1d5f4:	4604      	mov	r4, r0
	struct conn_data data;

	LOG_DBG("conn %p", conn);

	data.conn = conn;
   1d5f6:	9006      	str	r0, [sp, #24]
	data.sec = BT_SECURITY_L1;
   1d5f8:	2001      	movs	r0, #1
   1d5fa:	f88d 001c 	strb.w	r0, [sp, #28]
   1d5fe:	ab06      	add	r3, sp, #24
   1d600:	9302      	str	r3, [sp, #8]
   1d602:	4b22      	ldr	r3, [pc, #136]	; (1d68c <bt_gatt_connected+0x9c>)
   1d604:	9301      	str	r3, [sp, #4]
   1d606:	2200      	movs	r2, #0
   1d608:	9200      	str	r2, [sp, #0]
   1d60a:	4613      	mov	r3, r2
   1d60c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1d610:	f7ff f978 	bl	1c904 <bt_gatt_foreach_attr_type>
			LOG_WRN("Failed to set security for bonded peer (%d)", err);
		}
	}

#if defined(CONFIG_BT_GATT_CLIENT)
	add_subscriptions(conn);
   1d614:	4620      	mov	r0, r4
   1d616:	f00e fa16 	bl	2ba46 <add_subscriptions>
#if defined(CONFIG_BT_GATT_AUTO_UPDATE_MTU)
	int err;

	err = bt_gatt_exchange_mtu(conn, &gatt_exchange_params);
   1d61a:	491d      	ldr	r1, [pc, #116]	; (1d690 <bt_gatt_connected+0xa0>)
   1d61c:	4620      	mov	r0, r4
   1d61e:	f7ff ff29 	bl	1d474 <bt_gatt_exchange_mtu>
	if (err) {
   1d622:	b908      	cbnz	r0, 1d628 <bt_gatt_connected+0x38>
		LOG_WRN("MTU Exchange failed (err %d)", err);
	}
#endif /* CONFIG_BT_GATT_AUTO_UPDATE_MTU */
#endif /* CONFIG_BT_GATT_CLIENT */
}
   1d624:	b009      	add	sp, #36	; 0x24
   1d626:	bd30      	pop	{r4, r5, pc}
   1d628:	4605      	mov	r5, r0
		LOG_WRN("MTU Exchange failed (err %d)", err);
   1d62a:	2008      	movs	r0, #8
   1d62c:	f7f6 fb6c 	bl	13d08 <z_log_msg_alloc>
   1d630:	2200      	movs	r2, #0
   1d632:	f36f 0200 	bfc	r2, #0, #1
   1d636:	f36f 0241 	bfc	r2, #1, #1
   1d63a:	f36f 0282 	bfc	r2, #2, #1
   1d63e:	f36f 02c5 	bfc	r2, #3, #3
   1d642:	2302      	movs	r3, #2
   1d644:	f363 1288 	bfi	r2, r3, #6, #3
   1d648:	230c      	movs	r3, #12
   1d64a:	f363 2252 	bfi	r2, r3, #9, #10
   1d64e:	f36f 42de 	bfc	r2, #19, #12
   1d652:	f36f 72df 	bfc	r2, #31, #1
   1d656:	4604      	mov	r4, r0
   1d658:	b190      	cbz	r0, 1d680 <bt_gatt_connected+0x90>
   1d65a:	f110 0310 	adds.w	r3, r0, #16
   1d65e:	d002      	beq.n	1d666 <bt_gatt_connected+0x76>
   1d660:	490c      	ldr	r1, [pc, #48]	; (1d694 <bt_gatt_connected+0xa4>)
   1d662:	6141      	str	r1, [r0, #20]
   1d664:	6185      	str	r5, [r0, #24]
   1d666:	b15b      	cbz	r3, 1d680 <bt_gatt_connected+0x90>
   1d668:	2303      	movs	r3, #3
   1d66a:	f88d 3014 	strb.w	r3, [sp, #20]
   1d66e:	2300      	movs	r3, #0
   1d670:	f88d 3015 	strb.w	r3, [sp, #21]
   1d674:	f88d 3016 	strb.w	r3, [sp, #22]
   1d678:	f88d 3017 	strb.w	r3, [sp, #23]
   1d67c:	9805      	ldr	r0, [sp, #20]
   1d67e:	6120      	str	r0, [r4, #16]
   1d680:	2300      	movs	r3, #0
   1d682:	4905      	ldr	r1, [pc, #20]	; (1d698 <bt_gatt_connected+0xa8>)
   1d684:	4620      	mov	r0, r4
   1d686:	f00b fda8 	bl	291da <z_log_msg_finalize>
}
   1d68a:	e7cb      	b.n	1d624 <bt_gatt_connected+0x34>
   1d68c:	0001cffd 	.word	0x0001cffd
   1d690:	200006cc 	.word	0x200006cc
   1d694:	000333f4 	.word	0x000333f4
   1d698:	00031420 	.word	0x00031420

0001d69c <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
   1d69c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d69e:	4605      	mov	r5, r0
   1d6a0:	460e      	mov	r6, r1
   1d6a2:	4617      	mov	r7, r2
	return list->head;
   1d6a4:	4b0a      	ldr	r3, [pc, #40]	; (1d6d0 <bt_gatt_att_max_mtu_changed+0x34>)
   1d6a6:	681c      	ldr	r4, [r3, #0]
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1d6a8:	b104      	cbz	r4, 1d6ac <bt_gatt_att_max_mtu_changed+0x10>
   1d6aa:	3c04      	subs	r4, #4
   1d6ac:	b174      	cbz	r4, 1d6cc <bt_gatt_att_max_mtu_changed+0x30>
		if (cb->att_mtu_updated) {
   1d6ae:	6823      	ldr	r3, [r4, #0]
   1d6b0:	b143      	cbz	r3, 1d6c4 <bt_gatt_att_max_mtu_changed+0x28>
			cb->att_mtu_updated(conn, tx, rx);
   1d6b2:	463a      	mov	r2, r7
   1d6b4:	4631      	mov	r1, r6
   1d6b6:	4628      	mov	r0, r5
   1d6b8:	4798      	blx	r3
	return node->next;
   1d6ba:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1d6bc:	2c00      	cmp	r4, #0
   1d6be:	d0f5      	beq.n	1d6ac <bt_gatt_att_max_mtu_changed+0x10>
   1d6c0:	3c04      	subs	r4, #4
   1d6c2:	e7f3      	b.n	1d6ac <bt_gatt_att_max_mtu_changed+0x10>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1d6c4:	1d23      	adds	r3, r4, #4
   1d6c6:	d1f8      	bne.n	1d6ba <bt_gatt_att_max_mtu_changed+0x1e>
   1d6c8:	461c      	mov	r4, r3
   1d6ca:	e7ef      	b.n	1d6ac <bt_gatt_att_max_mtu_changed+0x10>
		}
	}
}
   1d6cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d6ce:	bf00      	nop
   1d6d0:	20008398 	.word	0x20008398

0001d6d4 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   1d6d4:	b510      	push	{r4, lr}
   1d6d6:	b084      	sub	sp, #16
   1d6d8:	4604      	mov	r4, r0
   1d6da:	9002      	str	r0, [sp, #8]
   1d6dc:	4b08      	ldr	r3, [pc, #32]	; (1d700 <bt_gatt_disconnected+0x2c>)
   1d6de:	9301      	str	r3, [sp, #4]
   1d6e0:	2200      	movs	r2, #0
   1d6e2:	9200      	str	r2, [sp, #0]
   1d6e4:	4613      	mov	r3, r2
   1d6e6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1d6ea:	2001      	movs	r0, #1
   1d6ec:	f7ff f90a 	bl	1c904 <bt_gatt_foreach_attr_type>
				     remove_peer_from_attr,
				     &addr_with_id);
	}

#if defined(CONFIG_BT_GATT_CLIENT)
	remove_subscriptions(conn);
   1d6f0:	4620      	mov	r0, r4
   1d6f2:	f00e f886 	bl	2b802 <remove_subscriptions>
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
   1d6f6:	4620      	mov	r0, r4
   1d6f8:	f00e f9ef 	bl	2bada <remove_cf_cfg>
#endif
}
   1d6fc:	b004      	add	sp, #16
   1d6fe:	bd10      	pop	{r4, pc}
   1d700:	0001c70d 	.word	0x0001c70d

0001d704 <bt_smp_accept>:

	return 0;
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   1d704:	b530      	push	{r4, r5, lr}
   1d706:	b083      	sub	sp, #12
   1d708:	4605      	mov	r5, r0
		.recv = bt_smp_recv,
	};

	LOG_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1d70a:	2300      	movs	r3, #0
   1d70c:	2b07      	cmp	r3, #7
   1d70e:	d811      	bhi.n	1d734 <bt_smp_accept+0x30>
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
   1d710:	228c      	movs	r2, #140	; 0x8c
   1d712:	fb03 f202 	mul.w	r2, r3, r2
   1d716:	4c21      	ldr	r4, [pc, #132]	; (1d79c <bt_smp_accept+0x98>)
   1d718:	58a2      	ldr	r2, [r4, r2]
   1d71a:	b10a      	cbz	r2, 1d720 <bt_smp_accept+0x1c>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1d71c:	3301      	adds	r3, #1
   1d71e:	e7f5      	b.n	1d70c <bt_smp_accept+0x8>
			continue;
		}

		smp->chan.ops = &ops;
   1d720:	4a1e      	ldr	r2, [pc, #120]	; (1d79c <bt_smp_accept+0x98>)
   1d722:	208c      	movs	r0, #140	; 0x8c
   1d724:	fb00 2303 	mla	r3, r0, r3, r2
   1d728:	4a1d      	ldr	r2, [pc, #116]	; (1d7a0 <bt_smp_accept+0x9c>)
   1d72a:	605a      	str	r2, [r3, #4]

		*chan = &smp->chan;
   1d72c:	600b      	str	r3, [r1, #0]

		return 0;
   1d72e:	2000      	movs	r0, #0
	}

	LOG_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
   1d730:	b003      	add	sp, #12
   1d732:	bd30      	pop	{r4, r5, pc}
	LOG_ERR("No available SMP context for conn %p", conn);
   1d734:	2008      	movs	r0, #8
   1d736:	f7f6 fae7 	bl	13d08 <z_log_msg_alloc>
   1d73a:	2200      	movs	r2, #0
   1d73c:	f36f 0200 	bfc	r2, #0, #1
   1d740:	f36f 0241 	bfc	r2, #1, #1
   1d744:	f36f 0282 	bfc	r2, #2, #1
   1d748:	f36f 02c5 	bfc	r2, #3, #3
   1d74c:	2301      	movs	r3, #1
   1d74e:	f363 1288 	bfi	r2, r3, #6, #3
   1d752:	230c      	movs	r3, #12
   1d754:	f363 2252 	bfi	r2, r3, #9, #10
   1d758:	f36f 42de 	bfc	r2, #19, #12
   1d75c:	f36f 72df 	bfc	r2, #31, #1
   1d760:	4604      	mov	r4, r0
   1d762:	b190      	cbz	r0, 1d78a <bt_smp_accept+0x86>
   1d764:	f110 0310 	adds.w	r3, r0, #16
   1d768:	d002      	beq.n	1d770 <bt_smp_accept+0x6c>
   1d76a:	490e      	ldr	r1, [pc, #56]	; (1d7a4 <bt_smp_accept+0xa0>)
   1d76c:	6141      	str	r1, [r0, #20]
   1d76e:	6185      	str	r5, [r0, #24]
   1d770:	b15b      	cbz	r3, 1d78a <bt_smp_accept+0x86>
   1d772:	2303      	movs	r3, #3
   1d774:	f88d 3004 	strb.w	r3, [sp, #4]
   1d778:	2300      	movs	r3, #0
   1d77a:	f88d 3005 	strb.w	r3, [sp, #5]
   1d77e:	f88d 3006 	strb.w	r3, [sp, #6]
   1d782:	f88d 3007 	strb.w	r3, [sp, #7]
   1d786:	9801      	ldr	r0, [sp, #4]
   1d788:	6120      	str	r0, [r4, #16]
   1d78a:	2300      	movs	r3, #0
   1d78c:	4906      	ldr	r1, [pc, #24]	; (1d7a8 <bt_smp_accept+0xa4>)
   1d78e:	4620      	mov	r0, r4
   1d790:	f00b fd23 	bl	291da <z_log_msg_finalize>
	return -ENOMEM;
   1d794:	f06f 000b 	mvn.w	r0, #11
   1d798:	e7ca      	b.n	1d730 <bt_smp_accept+0x2c>
   1d79a:	bf00      	nop
   1d79c:	20008420 	.word	0x20008420
   1d7a0:	00033550 	.word	0x00033550
   1d7a4:	00033528 	.word	0x00033528
   1d7a8:	00031460 	.word	0x00031460

0001d7ac <registry_add>:
static int registry_add(int type,
			const struct fs_file_system_t *fstp)
{
	int rv = -ENOSPC;

	for (size_t i = 0; i < ARRAY_SIZE(registry); ++i) {
   1d7ac:	2300      	movs	r3, #0
   1d7ae:	2b01      	cmp	r3, #1
   1d7b0:	d80e      	bhi.n	1d7d0 <registry_add+0x24>
		struct registry_entry *ep = &registry[i];

		if (ep->fstp == NULL) {
   1d7b2:	4a09      	ldr	r2, [pc, #36]	; (1d7d8 <registry_add+0x2c>)
   1d7b4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   1d7b8:	6852      	ldr	r2, [r2, #4]
   1d7ba:	b10a      	cbz	r2, 1d7c0 <registry_add+0x14>
	for (size_t i = 0; i < ARRAY_SIZE(registry); ++i) {
   1d7bc:	3301      	adds	r3, #1
   1d7be:	e7f6      	b.n	1d7ae <registry_add+0x2>
			ep->type = type;
   1d7c0:	4a05      	ldr	r2, [pc, #20]	; (1d7d8 <registry_add+0x2c>)
   1d7c2:	f842 0033 	str.w	r0, [r2, r3, lsl #3]
			ep->fstp = fstp;
   1d7c6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   1d7ca:	6051      	str	r1, [r2, #4]
			rv = 0;
   1d7cc:	2000      	movs	r0, #0
			break;
   1d7ce:	4770      	bx	lr
	int rv = -ENOSPC;
   1d7d0:	f06f 001b 	mvn.w	r0, #27
		}
	}

	return rv;
}
   1d7d4:	4770      	bx	lr
   1d7d6:	bf00      	nop
   1d7d8:	20008880 	.word	0x20008880

0001d7dc <registry_find>:

static struct registry_entry *registry_find(int type)
{
   1d7dc:	4601      	mov	r1, r0
	for (size_t i = 0; i < ARRAY_SIZE(registry); ++i) {
   1d7de:	2300      	movs	r3, #0
   1d7e0:	e000      	b.n	1d7e4 <registry_find+0x8>
   1d7e2:	3301      	adds	r3, #1
   1d7e4:	2b01      	cmp	r3, #1
   1d7e6:	d80b      	bhi.n	1d800 <registry_find+0x24>
		struct registry_entry *ep = &registry[i];
   1d7e8:	4806      	ldr	r0, [pc, #24]	; (1d804 <registry_find+0x28>)
   1d7ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3

		if ((ep->fstp != NULL) && (ep->type == type)) {
   1d7ee:	6842      	ldr	r2, [r0, #4]
   1d7f0:	2a00      	cmp	r2, #0
   1d7f2:	d0f6      	beq.n	1d7e2 <registry_find+0x6>
   1d7f4:	4a03      	ldr	r2, [pc, #12]	; (1d804 <registry_find+0x28>)
   1d7f6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   1d7fa:	428a      	cmp	r2, r1
   1d7fc:	d1f1      	bne.n	1d7e2 <registry_find+0x6>
   1d7fe:	e000      	b.n	1d802 <registry_find+0x26>
			return ep;
		}
	}
	return NULL;
   1d800:	2000      	movs	r0, #0
}
   1d802:	4770      	bx	lr
   1d804:	20008880 	.word	0x20008880

0001d808 <fs_get_mnt_point>:
	return (ep != NULL) ? ep->fstp : NULL;
}

static int fs_get_mnt_point(struct fs_mount_t **mnt_pntp,
			    const char *name, size_t *match_len)
{
   1d808:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d80c:	4683      	mov	fp, r0
   1d80e:	460f      	mov	r7, r1
   1d810:	4692      	mov	sl, r2
	struct fs_mount_t *mnt_p = NULL, *itr;
	size_t longest_match = 0;
	size_t len, name_len = strlen(name);
   1d812:	4608      	mov	r0, r1
   1d814:	f00c f97f 	bl	29b16 <strlen>
   1d818:	4680      	mov	r8, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   1d81a:	f04f 32ff 	mov.w	r2, #4294967295
   1d81e:	f04f 33ff 	mov.w	r3, #4294967295
   1d822:	4820      	ldr	r0, [pc, #128]	; (1d8a4 <fs_get_mnt_point+0x9c>)
   1d824:	f008 fdc6 	bl	263b4 <z_impl_k_mutex_lock>
	return list->head == list;
   1d828:	4b1f      	ldr	r3, [pc, #124]	; (1d8a8 <fs_get_mnt_point+0xa0>)
   1d82a:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d82c:	429c      	cmp	r4, r3
   1d82e:	d01d      	beq.n	1d86c <fs_get_mnt_point+0x64>
	return (node == list->tail) ? NULL : node->next;
   1d830:	2600      	movs	r6, #0
   1d832:	46b1      	mov	r9, r6
   1d834:	e00c      	b.n	1d850 <fs_get_mnt_point+0x48>
		if ((len > 1) && (name[len] != '/') && (name[len] != '\0')) {
			continue;
		}

		/* Check for mount point match */
		if (strncmp(name, itr->mnt_point, len) == 0) {
   1d836:	462a      	mov	r2, r5
   1d838:	68e1      	ldr	r1, [r4, #12]
   1d83a:	4638      	mov	r0, r7
   1d83c:	f00c f989 	bl	29b52 <strncmp>
   1d840:	b908      	cbnz	r0, 1d846 <fs_get_mnt_point+0x3e>
			mnt_p = itr;
			longest_match = len;
   1d842:	462e      	mov	r6, r5
			mnt_p = itr;
   1d844:	46a1      	mov	r9, r4
   1d846:	4b18      	ldr	r3, [pc, #96]	; (1d8a8 <fs_get_mnt_point+0xa0>)
   1d848:	685b      	ldr	r3, [r3, #4]
   1d84a:	429c      	cmp	r4, r3
   1d84c:	d010      	beq.n	1d870 <fs_get_mnt_point+0x68>
   1d84e:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_NODE(&fs_mnt_list, node) {
   1d850:	b184      	cbz	r4, 1d874 <fs_get_mnt_point+0x6c>
		len = itr->mountp_len;
   1d852:	69a5      	ldr	r5, [r4, #24]
		if ((len < longest_match) || (len > name_len)) {
   1d854:	42ae      	cmp	r6, r5
   1d856:	d8f6      	bhi.n	1d846 <fs_get_mnt_point+0x3e>
   1d858:	45a8      	cmp	r8, r5
   1d85a:	d3f4      	bcc.n	1d846 <fs_get_mnt_point+0x3e>
		if ((len > 1) && (name[len] != '/') && (name[len] != '\0')) {
   1d85c:	2d01      	cmp	r5, #1
   1d85e:	d9ea      	bls.n	1d836 <fs_get_mnt_point+0x2e>
   1d860:	5d7b      	ldrb	r3, [r7, r5]
   1d862:	2b2f      	cmp	r3, #47	; 0x2f
   1d864:	d0e7      	beq.n	1d836 <fs_get_mnt_point+0x2e>
   1d866:	2b00      	cmp	r3, #0
   1d868:	d0e5      	beq.n	1d836 <fs_get_mnt_point+0x2e>
   1d86a:	e7ec      	b.n	1d846 <fs_get_mnt_point+0x3e>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d86c:	2400      	movs	r4, #0
   1d86e:	e7df      	b.n	1d830 <fs_get_mnt_point+0x28>
	return (node == list->tail) ? NULL : node->next;
   1d870:	2400      	movs	r4, #0
   1d872:	e7ed      	b.n	1d850 <fs_get_mnt_point+0x48>
	return z_impl_k_mutex_unlock(mutex);
   1d874:	480b      	ldr	r0, [pc, #44]	; (1d8a4 <fs_get_mnt_point+0x9c>)
   1d876:	f008 fe21 	bl	264bc <z_impl_k_mutex_unlock>
		}
	}
	k_mutex_unlock(&mutex);

	if (mnt_p == NULL) {
   1d87a:	f1b9 0f00 	cmp.w	r9, #0
   1d87e:	d00b      	beq.n	1d898 <fs_get_mnt_point+0x90>
		return -ENOENT;
	}

	*mnt_pntp = mnt_p;
   1d880:	f8cb 9000 	str.w	r9, [fp]
	if (match_len) {
   1d884:	f1ba 0f00 	cmp.w	sl, #0
   1d888:	d009      	beq.n	1d89e <fs_get_mnt_point+0x96>
		*match_len = mnt_p->mountp_len;
   1d88a:	f8d9 3018 	ldr.w	r3, [r9, #24]
   1d88e:	f8ca 3000 	str.w	r3, [sl]
	}

	return 0;
   1d892:	2000      	movs	r0, #0
}
   1d894:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOENT;
   1d898:	f06f 0001 	mvn.w	r0, #1
   1d89c:	e7fa      	b.n	1d894 <fs_get_mnt_point+0x8c>
	return 0;
   1d89e:	2000      	movs	r0, #0
   1d8a0:	e7f8      	b.n	1d894 <fs_get_mnt_point+0x8c>
   1d8a2:	bf00      	nop
   1d8a4:	20008890 	.word	0x20008890
   1d8a8:	200088a4 	.word	0x200088a4

0001d8ac <fs_init>:
	LOG_DBG("fs unregister %d: %d", type, rc);
	return rc;
}

static int fs_init(const struct device *dev)
{
   1d8ac:	b508      	push	{r3, lr}
	return z_impl_k_mutex_init(mutex);
   1d8ae:	4804      	ldr	r0, [pc, #16]	; (1d8c0 <fs_init+0x14>)
   1d8b0:	f012 fd3a 	bl	30328 <z_impl_k_mutex_init>
	list->head = (sys_dnode_t *)list;
   1d8b4:	4b03      	ldr	r3, [pc, #12]	; (1d8c4 <fs_init+0x18>)
   1d8b6:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   1d8b8:	605b      	str	r3, [r3, #4]
	k_mutex_init(&mutex);
	sys_dlist_init(&fs_mnt_list);
	return 0;
}
   1d8ba:	2000      	movs	r0, #0
   1d8bc:	bd08      	pop	{r3, pc}
   1d8be:	bf00      	nop
   1d8c0:	20008890 	.word	0x20008890
   1d8c4:	200088a4 	.word	0x200088a4

0001d8c8 <fs_open>:
{
   1d8c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d8ca:	b083      	sub	sp, #12
	if ((file_name == NULL) ||
   1d8cc:	b389      	cbz	r1, 1d932 <fs_open+0x6a>
   1d8ce:	4605      	mov	r5, r0
   1d8d0:	4616      	mov	r6, r2
   1d8d2:	460f      	mov	r7, r1
			(strlen(file_name) <= 1) || (file_name[0] != '/')) {
   1d8d4:	4608      	mov	r0, r1
   1d8d6:	f00c f91e 	bl	29b16 <strlen>
	if ((file_name == NULL) ||
   1d8da:	2801      	cmp	r0, #1
   1d8dc:	d929      	bls.n	1d932 <fs_open+0x6a>
			(strlen(file_name) <= 1) || (file_name[0] != '/')) {
   1d8de:	783b      	ldrb	r3, [r7, #0]
   1d8e0:	2b2f      	cmp	r3, #47	; 0x2f
   1d8e2:	d126      	bne.n	1d932 <fs_open+0x6a>
	if (zfp->mp != NULL) {
   1d8e4:	686b      	ldr	r3, [r5, #4]
   1d8e6:	2b00      	cmp	r3, #0
   1d8e8:	f040 80b8 	bne.w	1da5c <fs_open+0x194>
	rc = fs_get_mnt_point(&mp, file_name, NULL);
   1d8ec:	2200      	movs	r2, #0
   1d8ee:	4639      	mov	r1, r7
   1d8f0:	a801      	add	r0, sp, #4
   1d8f2:	f7ff ff89 	bl	1d808 <fs_get_mnt_point>
	if (rc < 0) {
   1d8f6:	1e04      	subs	r4, r0, #0
   1d8f8:	db4d      	blt.n	1d996 <fs_open+0xce>
	if (((mp->flags & FS_MOUNT_FLAG_READ_ONLY) != 0) &&
   1d8fa:	9b01      	ldr	r3, [sp, #4]
   1d8fc:	f893 2020 	ldrb.w	r2, [r3, #32]
   1d900:	f012 0f02 	tst.w	r2, #2
   1d904:	d003      	beq.n	1d90e <fs_open+0x46>
   1d906:	f016 0f12 	tst.w	r6, #18
   1d90a:	f040 80aa 	bne.w	1da62 <fs_open+0x19a>
	CHECKIF(mp->fs->open == NULL) {
   1d90e:	69da      	ldr	r2, [r3, #28]
   1d910:	6812      	ldr	r2, [r2, #0]
   1d912:	2a00      	cmp	r2, #0
   1d914:	f000 80a8 	beq.w	1da68 <fs_open+0x1a0>
	zfp->mp = mp;
   1d918:	606b      	str	r3, [r5, #4]
	rc = mp->fs->open(zfp, file_name, flags);
   1d91a:	69db      	ldr	r3, [r3, #28]
   1d91c:	681b      	ldr	r3, [r3, #0]
   1d91e:	4632      	mov	r2, r6
   1d920:	4639      	mov	r1, r7
   1d922:	4628      	mov	r0, r5
   1d924:	4798      	blx	r3
	if (rc < 0) {
   1d926:	1e04      	subs	r4, r0, #0
   1d928:	db65      	blt.n	1d9f6 <fs_open+0x12e>
	zfp->flags = flags;
   1d92a:	722e      	strb	r6, [r5, #8]
}
   1d92c:	4620      	mov	r0, r4
   1d92e:	b003      	add	sp, #12
   1d930:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("invalid file name!!");
   1d932:	2006      	movs	r0, #6
   1d934:	f7f6 f9e8 	bl	13d08 <z_log_msg_alloc>
   1d938:	2200      	movs	r2, #0
   1d93a:	f36f 0200 	bfc	r2, #0, #1
   1d93e:	f36f 0241 	bfc	r2, #1, #1
   1d942:	f36f 0282 	bfc	r2, #2, #1
   1d946:	f36f 02c5 	bfc	r2, #3, #3
   1d94a:	2301      	movs	r3, #1
   1d94c:	f363 1288 	bfi	r2, r3, #6, #3
   1d950:	2308      	movs	r3, #8
   1d952:	f363 2252 	bfi	r2, r3, #9, #10
   1d956:	f36f 42de 	bfc	r2, #19, #12
   1d95a:	f36f 72df 	bfc	r2, #31, #1
   1d95e:	4604      	mov	r4, r0
   1d960:	b188      	cbz	r0, 1d986 <fs_open+0xbe>
   1d962:	f110 0310 	adds.w	r3, r0, #16
   1d966:	d001      	beq.n	1d96c <fs_open+0xa4>
   1d968:	4941      	ldr	r1, [pc, #260]	; (1da70 <fs_open+0x1a8>)
   1d96a:	6141      	str	r1, [r0, #20]
   1d96c:	b15b      	cbz	r3, 1d986 <fs_open+0xbe>
   1d96e:	2302      	movs	r3, #2
   1d970:	f88d 3000 	strb.w	r3, [sp]
   1d974:	2300      	movs	r3, #0
   1d976:	f88d 3001 	strb.w	r3, [sp, #1]
   1d97a:	f88d 3002 	strb.w	r3, [sp, #2]
   1d97e:	f88d 3003 	strb.w	r3, [sp, #3]
   1d982:	9800      	ldr	r0, [sp, #0]
   1d984:	6120      	str	r0, [r4, #16]
   1d986:	2300      	movs	r3, #0
   1d988:	493a      	ldr	r1, [pc, #232]	; (1da74 <fs_open+0x1ac>)
   1d98a:	4620      	mov	r0, r4
   1d98c:	f00b fc25 	bl	291da <z_log_msg_finalize>
		return -EINVAL;
   1d990:	f06f 0415 	mvn.w	r4, #21
   1d994:	e7ca      	b.n	1d92c <fs_open+0x64>
		LOG_ERR("mount point not found!!");
   1d996:	2006      	movs	r0, #6
   1d998:	f7f6 f9b6 	bl	13d08 <z_log_msg_alloc>
   1d99c:	2200      	movs	r2, #0
   1d99e:	f36f 0200 	bfc	r2, #0, #1
   1d9a2:	f36f 0241 	bfc	r2, #1, #1
   1d9a6:	f36f 0282 	bfc	r2, #2, #1
   1d9aa:	f36f 02c5 	bfc	r2, #3, #3
   1d9ae:	2301      	movs	r3, #1
   1d9b0:	f363 1288 	bfi	r2, r3, #6, #3
   1d9b4:	2308      	movs	r3, #8
   1d9b6:	f363 2252 	bfi	r2, r3, #9, #10
   1d9ba:	f36f 42de 	bfc	r2, #19, #12
   1d9be:	f36f 72df 	bfc	r2, #31, #1
   1d9c2:	4605      	mov	r5, r0
   1d9c4:	b188      	cbz	r0, 1d9ea <fs_open+0x122>
   1d9c6:	f110 0310 	adds.w	r3, r0, #16
   1d9ca:	d001      	beq.n	1d9d0 <fs_open+0x108>
   1d9cc:	492a      	ldr	r1, [pc, #168]	; (1da78 <fs_open+0x1b0>)
   1d9ce:	6141      	str	r1, [r0, #20]
   1d9d0:	b15b      	cbz	r3, 1d9ea <fs_open+0x122>
   1d9d2:	2302      	movs	r3, #2
   1d9d4:	f88d 3000 	strb.w	r3, [sp]
   1d9d8:	2300      	movs	r3, #0
   1d9da:	f88d 3001 	strb.w	r3, [sp, #1]
   1d9de:	f88d 3002 	strb.w	r3, [sp, #2]
   1d9e2:	f88d 3003 	strb.w	r3, [sp, #3]
   1d9e6:	9800      	ldr	r0, [sp, #0]
   1d9e8:	6128      	str	r0, [r5, #16]
   1d9ea:	2300      	movs	r3, #0
   1d9ec:	4921      	ldr	r1, [pc, #132]	; (1da74 <fs_open+0x1ac>)
   1d9ee:	4628      	mov	r0, r5
   1d9f0:	f00b fbf3 	bl	291da <z_log_msg_finalize>
		return rc;
   1d9f4:	e79a      	b.n	1d92c <fs_open+0x64>
		LOG_ERR("file open error (%d)", rc);
   1d9f6:	2008      	movs	r0, #8
   1d9f8:	f7f6 f986 	bl	13d08 <z_log_msg_alloc>
   1d9fc:	2200      	movs	r2, #0
   1d9fe:	f36f 0200 	bfc	r2, #0, #1
   1da02:	f36f 0241 	bfc	r2, #1, #1
   1da06:	f36f 0282 	bfc	r2, #2, #1
   1da0a:	f36f 02c5 	bfc	r2, #3, #3
   1da0e:	2301      	movs	r3, #1
   1da10:	f363 1288 	bfi	r2, r3, #6, #3
   1da14:	230c      	movs	r3, #12
   1da16:	f363 2252 	bfi	r2, r3, #9, #10
   1da1a:	f36f 42de 	bfc	r2, #19, #12
   1da1e:	f36f 72df 	bfc	r2, #31, #1
   1da22:	4606      	mov	r6, r0
   1da24:	b190      	cbz	r0, 1da4c <fs_open+0x184>
   1da26:	f110 0310 	adds.w	r3, r0, #16
   1da2a:	d002      	beq.n	1da32 <fs_open+0x16a>
   1da2c:	4913      	ldr	r1, [pc, #76]	; (1da7c <fs_open+0x1b4>)
   1da2e:	6141      	str	r1, [r0, #20]
   1da30:	6184      	str	r4, [r0, #24]
   1da32:	b15b      	cbz	r3, 1da4c <fs_open+0x184>
   1da34:	2303      	movs	r3, #3
   1da36:	f88d 3000 	strb.w	r3, [sp]
   1da3a:	2300      	movs	r3, #0
   1da3c:	f88d 3001 	strb.w	r3, [sp, #1]
   1da40:	f88d 3002 	strb.w	r3, [sp, #2]
   1da44:	f88d 3003 	strb.w	r3, [sp, #3]
   1da48:	9800      	ldr	r0, [sp, #0]
   1da4a:	6130      	str	r0, [r6, #16]
   1da4c:	2300      	movs	r3, #0
   1da4e:	4909      	ldr	r1, [pc, #36]	; (1da74 <fs_open+0x1ac>)
   1da50:	4630      	mov	r0, r6
   1da52:	f00b fbc2 	bl	291da <z_log_msg_finalize>
		zfp->mp = NULL;
   1da56:	2300      	movs	r3, #0
   1da58:	606b      	str	r3, [r5, #4]
		return rc;
   1da5a:	e767      	b.n	1d92c <fs_open+0x64>
		return -EBUSY;
   1da5c:	f06f 040f 	mvn.w	r4, #15
   1da60:	e764      	b.n	1d92c <fs_open+0x64>
		return -EROFS;
   1da62:	f06f 041d 	mvn.w	r4, #29
   1da66:	e761      	b.n	1d92c <fs_open+0x64>
		return -ENOTSUP;
   1da68:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1da6c:	e75e      	b.n	1d92c <fs_open+0x64>
   1da6e:	bf00      	nop
   1da70:	00033580 	.word	0x00033580
   1da74:	00031498 	.word	0x00031498
   1da78:	00033594 	.word	0x00033594
   1da7c:	000335ac 	.word	0x000335ac

0001da80 <fs_close>:
{
   1da80:	b530      	push	{r4, r5, lr}
   1da82:	b083      	sub	sp, #12
	if (zfp->mp == NULL) {
   1da84:	6843      	ldr	r3, [r0, #4]
   1da86:	2b00      	cmp	r3, #0
   1da88:	d03d      	beq.n	1db06 <fs_close+0x86>
   1da8a:	4604      	mov	r4, r0
	CHECKIF(zfp->mp->fs->close == NULL) {
   1da8c:	69db      	ldr	r3, [r3, #28]
   1da8e:	69db      	ldr	r3, [r3, #28]
   1da90:	2b00      	cmp	r3, #0
   1da92:	d03a      	beq.n	1db0a <fs_close+0x8a>
	rc = zfp->mp->fs->close(zfp);
   1da94:	4798      	blx	r3
	if (rc < 0) {
   1da96:	1e05      	subs	r5, r0, #0
   1da98:	db04      	blt.n	1daa4 <fs_close+0x24>
	zfp->mp = NULL;
   1da9a:	2300      	movs	r3, #0
   1da9c:	6063      	str	r3, [r4, #4]
}
   1da9e:	4628      	mov	r0, r5
   1daa0:	b003      	add	sp, #12
   1daa2:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("file close error (%d)", rc);
   1daa4:	2008      	movs	r0, #8
   1daa6:	f7f6 f92f 	bl	13d08 <z_log_msg_alloc>
   1daaa:	2200      	movs	r2, #0
   1daac:	f36f 0200 	bfc	r2, #0, #1
   1dab0:	f36f 0241 	bfc	r2, #1, #1
   1dab4:	f36f 0282 	bfc	r2, #2, #1
   1dab8:	f36f 02c5 	bfc	r2, #3, #3
   1dabc:	2301      	movs	r3, #1
   1dabe:	f363 1288 	bfi	r2, r3, #6, #3
   1dac2:	230c      	movs	r3, #12
   1dac4:	f363 2252 	bfi	r2, r3, #9, #10
   1dac8:	f36f 42de 	bfc	r2, #19, #12
   1dacc:	f36f 72df 	bfc	r2, #31, #1
   1dad0:	4604      	mov	r4, r0
   1dad2:	b190      	cbz	r0, 1dafa <fs_close+0x7a>
   1dad4:	f110 0310 	adds.w	r3, r0, #16
   1dad8:	d002      	beq.n	1dae0 <fs_close+0x60>
   1dada:	490d      	ldr	r1, [pc, #52]	; (1db10 <fs_close+0x90>)
   1dadc:	6141      	str	r1, [r0, #20]
   1dade:	6185      	str	r5, [r0, #24]
   1dae0:	b15b      	cbz	r3, 1dafa <fs_close+0x7a>
   1dae2:	2303      	movs	r3, #3
   1dae4:	f88d 3004 	strb.w	r3, [sp, #4]
   1dae8:	2300      	movs	r3, #0
   1daea:	f88d 3005 	strb.w	r3, [sp, #5]
   1daee:	f88d 3006 	strb.w	r3, [sp, #6]
   1daf2:	f88d 3007 	strb.w	r3, [sp, #7]
   1daf6:	9801      	ldr	r0, [sp, #4]
   1daf8:	6120      	str	r0, [r4, #16]
   1dafa:	2300      	movs	r3, #0
   1dafc:	4905      	ldr	r1, [pc, #20]	; (1db14 <fs_close+0x94>)
   1dafe:	4620      	mov	r0, r4
   1db00:	f00b fb6b 	bl	291da <z_log_msg_finalize>
		return rc;
   1db04:	e7cb      	b.n	1da9e <fs_close+0x1e>
		return 0;
   1db06:	2500      	movs	r5, #0
   1db08:	e7c9      	b.n	1da9e <fs_close+0x1e>
		return -ENOTSUP;
   1db0a:	f06f 0585 	mvn.w	r5, #133	; 0x85
   1db0e:	e7c6      	b.n	1da9e <fs_close+0x1e>
   1db10:	000335c4 	.word	0x000335c4
   1db14:	00031498 	.word	0x00031498

0001db18 <fs_opendir>:
{
   1db18:	b5f0      	push	{r4, r5, r6, r7, lr}
   1db1a:	b083      	sub	sp, #12
	if ((abs_path == NULL) ||
   1db1c:	2900      	cmp	r1, #0
   1db1e:	d02f      	beq.n	1db80 <fs_opendir+0x68>
   1db20:	4604      	mov	r4, r0
   1db22:	460e      	mov	r6, r1
			(strlen(abs_path) < 1) || (abs_path[0] != '/')) {
   1db24:	4608      	mov	r0, r1
   1db26:	f00b fff6 	bl	29b16 <strlen>
	if ((abs_path == NULL) ||
   1db2a:	b348      	cbz	r0, 1db80 <fs_opendir+0x68>
			(strlen(abs_path) < 1) || (abs_path[0] != '/')) {
   1db2c:	7833      	ldrb	r3, [r6, #0]
   1db2e:	2b2f      	cmp	r3, #47	; 0x2f
   1db30:	d126      	bne.n	1db80 <fs_opendir+0x68>
	if (zdp->mp != NULL || zdp->dirp != NULL) {
   1db32:	6863      	ldr	r3, [r4, #4]
   1db34:	2b00      	cmp	r3, #0
   1db36:	f040 80cd 	bne.w	1dcd4 <fs_opendir+0x1bc>
   1db3a:	6827      	ldr	r7, [r4, #0]
   1db3c:	2f00      	cmp	r7, #0
   1db3e:	f040 80cc 	bne.w	1dcda <fs_opendir+0x1c2>
	if (strcmp(abs_path, "/") == 0) {
   1db42:	4969      	ldr	r1, [pc, #420]	; (1dce8 <fs_opendir+0x1d0>)
   1db44:	4630      	mov	r0, r6
   1db46:	f00b fff9 	bl	29b3c <strcmp>
   1db4a:	4605      	mov	r5, r0
   1db4c:	2800      	cmp	r0, #0
   1db4e:	d049      	beq.n	1dbe4 <fs_opendir+0xcc>
	rc = fs_get_mnt_point(&mp, abs_path, NULL);
   1db50:	2200      	movs	r2, #0
   1db52:	4631      	mov	r1, r6
   1db54:	a801      	add	r0, sp, #4
   1db56:	f7ff fe57 	bl	1d808 <fs_get_mnt_point>
	if (rc < 0) {
   1db5a:	1e05      	subs	r5, r0, #0
   1db5c:	db56      	blt.n	1dc0c <fs_opendir+0xf4>
	CHECKIF(mp->fs->opendir == NULL) {
   1db5e:	9b01      	ldr	r3, [sp, #4]
   1db60:	69da      	ldr	r2, [r3, #28]
   1db62:	6a12      	ldr	r2, [r2, #32]
   1db64:	2a00      	cmp	r2, #0
   1db66:	f000 80bb 	beq.w	1dce0 <fs_opendir+0x1c8>
	zdp->mp = mp;
   1db6a:	6063      	str	r3, [r4, #4]
	rc = zdp->mp->fs->opendir(zdp, abs_path);
   1db6c:	69db      	ldr	r3, [r3, #28]
   1db6e:	6a1b      	ldr	r3, [r3, #32]
   1db70:	4631      	mov	r1, r6
   1db72:	4620      	mov	r0, r4
   1db74:	4798      	blx	r3
	if (rc < 0) {
   1db76:	1e05      	subs	r5, r0, #0
   1db78:	db78      	blt.n	1dc6c <fs_opendir+0x154>
}
   1db7a:	4628      	mov	r0, r5
   1db7c:	b003      	add	sp, #12
   1db7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("invalid directory name!!");
   1db80:	2006      	movs	r0, #6
   1db82:	f7f6 f8c1 	bl	13d08 <z_log_msg_alloc>
   1db86:	2200      	movs	r2, #0
   1db88:	f36f 0200 	bfc	r2, #0, #1
   1db8c:	f36f 0241 	bfc	r2, #1, #1
   1db90:	f36f 0282 	bfc	r2, #2, #1
   1db94:	f36f 02c5 	bfc	r2, #3, #3
   1db98:	2301      	movs	r3, #1
   1db9a:	f363 1288 	bfi	r2, r3, #6, #3
   1db9e:	2308      	movs	r3, #8
   1dba0:	f363 2252 	bfi	r2, r3, #9, #10
   1dba4:	f36f 42de 	bfc	r2, #19, #12
   1dba8:	f36f 72df 	bfc	r2, #31, #1
   1dbac:	4604      	mov	r4, r0
   1dbae:	b188      	cbz	r0, 1dbd4 <fs_opendir+0xbc>
   1dbb0:	f110 0310 	adds.w	r3, r0, #16
   1dbb4:	d001      	beq.n	1dbba <fs_opendir+0xa2>
   1dbb6:	494d      	ldr	r1, [pc, #308]	; (1dcec <fs_opendir+0x1d4>)
   1dbb8:	6141      	str	r1, [r0, #20]
   1dbba:	b15b      	cbz	r3, 1dbd4 <fs_opendir+0xbc>
   1dbbc:	2302      	movs	r3, #2
   1dbbe:	f88d 3000 	strb.w	r3, [sp]
   1dbc2:	2300      	movs	r3, #0
   1dbc4:	f88d 3001 	strb.w	r3, [sp, #1]
   1dbc8:	f88d 3002 	strb.w	r3, [sp, #2]
   1dbcc:	f88d 3003 	strb.w	r3, [sp, #3]
   1dbd0:	9800      	ldr	r0, [sp, #0]
   1dbd2:	6120      	str	r0, [r4, #16]
   1dbd4:	2300      	movs	r3, #0
   1dbd6:	4946      	ldr	r1, [pc, #280]	; (1dcf0 <fs_opendir+0x1d8>)
   1dbd8:	4620      	mov	r0, r4
   1dbda:	f00b fafe 	bl	291da <z_log_msg_finalize>
		return -EINVAL;
   1dbde:	f06f 0515 	mvn.w	r5, #21
   1dbe2:	e7ca      	b.n	1db7a <fs_opendir+0x62>
	return z_impl_k_mutex_lock(mutex, timeout);
   1dbe4:	f04f 32ff 	mov.w	r2, #4294967295
   1dbe8:	f04f 33ff 	mov.w	r3, #4294967295
   1dbec:	4841      	ldr	r0, [pc, #260]	; (1dcf4 <fs_opendir+0x1dc>)
   1dbee:	f008 fbe1 	bl	263b4 <z_impl_k_mutex_lock>
		zdp->mp = NULL;
   1dbf2:	2300      	movs	r3, #0
   1dbf4:	6063      	str	r3, [r4, #4]
	return list->head == list;
   1dbf6:	4a40      	ldr	r2, [pc, #256]	; (1dcf8 <fs_opendir+0x1e0>)
   1dbf8:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1dbfa:	4293      	cmp	r3, r2
   1dbfc:	d004      	beq.n	1dc08 <fs_opendir+0xf0>
		zdp->dirp = sys_dlist_peek_head(&fs_mnt_list);
   1dbfe:	6023      	str	r3, [r4, #0]
	return z_impl_k_mutex_unlock(mutex);
   1dc00:	483c      	ldr	r0, [pc, #240]	; (1dcf4 <fs_opendir+0x1dc>)
   1dc02:	f008 fc5b 	bl	264bc <z_impl_k_mutex_unlock>
		return 0;
   1dc06:	e7b8      	b.n	1db7a <fs_opendir+0x62>
   1dc08:	463b      	mov	r3, r7
   1dc0a:	e7f8      	b.n	1dbfe <fs_opendir+0xe6>
		LOG_ERR("mount point not found!!");
   1dc0c:	2006      	movs	r0, #6
   1dc0e:	f7f6 f87b 	bl	13d08 <z_log_msg_alloc>
   1dc12:	2200      	movs	r2, #0
   1dc14:	f36f 0200 	bfc	r2, #0, #1
   1dc18:	f36f 0241 	bfc	r2, #1, #1
   1dc1c:	f36f 0282 	bfc	r2, #2, #1
   1dc20:	f36f 02c5 	bfc	r2, #3, #3
   1dc24:	2301      	movs	r3, #1
   1dc26:	f363 1288 	bfi	r2, r3, #6, #3
   1dc2a:	2308      	movs	r3, #8
   1dc2c:	f363 2252 	bfi	r2, r3, #9, #10
   1dc30:	f36f 42de 	bfc	r2, #19, #12
   1dc34:	f36f 72df 	bfc	r2, #31, #1
   1dc38:	4604      	mov	r4, r0
   1dc3a:	b188      	cbz	r0, 1dc60 <fs_opendir+0x148>
   1dc3c:	f110 0310 	adds.w	r3, r0, #16
   1dc40:	d001      	beq.n	1dc46 <fs_opendir+0x12e>
   1dc42:	492e      	ldr	r1, [pc, #184]	; (1dcfc <fs_opendir+0x1e4>)
   1dc44:	6141      	str	r1, [r0, #20]
   1dc46:	b15b      	cbz	r3, 1dc60 <fs_opendir+0x148>
   1dc48:	2302      	movs	r3, #2
   1dc4a:	f88d 3000 	strb.w	r3, [sp]
   1dc4e:	2300      	movs	r3, #0
   1dc50:	f88d 3001 	strb.w	r3, [sp, #1]
   1dc54:	f88d 3002 	strb.w	r3, [sp, #2]
   1dc58:	f88d 3003 	strb.w	r3, [sp, #3]
   1dc5c:	9800      	ldr	r0, [sp, #0]
   1dc5e:	6120      	str	r0, [r4, #16]
   1dc60:	2300      	movs	r3, #0
   1dc62:	4923      	ldr	r1, [pc, #140]	; (1dcf0 <fs_opendir+0x1d8>)
   1dc64:	4620      	mov	r0, r4
   1dc66:	f00b fab8 	bl	291da <z_log_msg_finalize>
		return rc;
   1dc6a:	e786      	b.n	1db7a <fs_opendir+0x62>
		zdp->mp = NULL;
   1dc6c:	2600      	movs	r6, #0
   1dc6e:	6066      	str	r6, [r4, #4]
		zdp->dirp = NULL;
   1dc70:	6026      	str	r6, [r4, #0]
		LOG_ERR("directory open error (%d)", rc);
   1dc72:	2008      	movs	r0, #8
   1dc74:	f7f6 f848 	bl	13d08 <z_log_msg_alloc>
   1dc78:	4632      	mov	r2, r6
   1dc7a:	f366 0200 	bfi	r2, r6, #0, #1
   1dc7e:	f366 0241 	bfi	r2, r6, #1, #1
   1dc82:	f366 0282 	bfi	r2, r6, #2, #1
   1dc86:	f366 02c5 	bfi	r2, r6, #3, #3
   1dc8a:	2301      	movs	r3, #1
   1dc8c:	f363 1288 	bfi	r2, r3, #6, #3
   1dc90:	230c      	movs	r3, #12
   1dc92:	f363 2252 	bfi	r2, r3, #9, #10
   1dc96:	f366 42de 	bfi	r2, r6, #19, #12
   1dc9a:	f366 72df 	bfi	r2, r6, #31, #1
   1dc9e:	4604      	mov	r4, r0
   1dca0:	b190      	cbz	r0, 1dcc8 <fs_opendir+0x1b0>
   1dca2:	f110 0310 	adds.w	r3, r0, #16
   1dca6:	d002      	beq.n	1dcae <fs_opendir+0x196>
   1dca8:	4915      	ldr	r1, [pc, #84]	; (1dd00 <fs_opendir+0x1e8>)
   1dcaa:	6141      	str	r1, [r0, #20]
   1dcac:	6185      	str	r5, [r0, #24]
   1dcae:	b15b      	cbz	r3, 1dcc8 <fs_opendir+0x1b0>
   1dcb0:	2303      	movs	r3, #3
   1dcb2:	f88d 3000 	strb.w	r3, [sp]
   1dcb6:	2300      	movs	r3, #0
   1dcb8:	f88d 3001 	strb.w	r3, [sp, #1]
   1dcbc:	f88d 3002 	strb.w	r3, [sp, #2]
   1dcc0:	f88d 3003 	strb.w	r3, [sp, #3]
   1dcc4:	9800      	ldr	r0, [sp, #0]
   1dcc6:	6120      	str	r0, [r4, #16]
   1dcc8:	2300      	movs	r3, #0
   1dcca:	4909      	ldr	r1, [pc, #36]	; (1dcf0 <fs_opendir+0x1d8>)
   1dccc:	4620      	mov	r0, r4
   1dcce:	f00b fa84 	bl	291da <z_log_msg_finalize>
   1dcd2:	e752      	b.n	1db7a <fs_opendir+0x62>
		return -EBUSY;
   1dcd4:	f06f 050f 	mvn.w	r5, #15
   1dcd8:	e74f      	b.n	1db7a <fs_opendir+0x62>
   1dcda:	f06f 050f 	mvn.w	r5, #15
   1dcde:	e74c      	b.n	1db7a <fs_opendir+0x62>
		return -ENOTSUP;
   1dce0:	f06f 0585 	mvn.w	r5, #133	; 0x85
   1dce4:	e749      	b.n	1db7a <fs_opendir+0x62>
   1dce6:	bf00      	nop
   1dce8:	000335f8 	.word	0x000335f8
   1dcec:	000335dc 	.word	0x000335dc
   1dcf0:	00031498 	.word	0x00031498
   1dcf4:	20008890 	.word	0x20008890
   1dcf8:	200088a4 	.word	0x200088a4
   1dcfc:	00033594 	.word	0x00033594
   1dd00:	000335fc 	.word	0x000335fc

0001dd04 <fs_readdir>:
{
   1dd04:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dd06:	b083      	sub	sp, #12
   1dd08:	4606      	mov	r6, r0
   1dd0a:	460d      	mov	r5, r1
	if (zdp->mp) {
   1dd0c:	6847      	ldr	r7, [r0, #4]
   1dd0e:	2f00      	cmp	r7, #0
   1dd10:	d054      	beq.n	1ddbc <fs_readdir+0xb8>
		CHECKIF(zdp->mp->fs->readdir == NULL) {
   1dd12:	69fb      	ldr	r3, [r7, #28]
   1dd14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1dd16:	2b00      	cmp	r3, #0
   1dd18:	f000 808c 	beq.w	1de34 <fs_readdir+0x130>
			rc = zdp->mp->fs->readdir(zdp, entry);
   1dd1c:	6873      	ldr	r3, [r6, #4]
   1dd1e:	69db      	ldr	r3, [r3, #28]
   1dd20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1dd22:	4629      	mov	r1, r5
   1dd24:	4630      	mov	r0, r6
   1dd26:	4798      	blx	r3
			if (rc < 0) {
   1dd28:	1e04      	subs	r4, r0, #0
   1dd2a:	db11      	blt.n	1dd50 <fs_readdir+0x4c>
			if (entry->name[0] == 0) {
   1dd2c:	786b      	ldrb	r3, [r5, #1]
   1dd2e:	b17b      	cbz	r3, 1dd50 <fs_readdir+0x4c>
			if (entry->type != FS_DIR_ENTRY_DIR) {
   1dd30:	782b      	ldrb	r3, [r5, #0]
   1dd32:	2b01      	cmp	r3, #1
   1dd34:	d10c      	bne.n	1dd50 <fs_readdir+0x4c>
			if ((strcmp(entry->name, ".") != 0)
   1dd36:	1c6f      	adds	r7, r5, #1
   1dd38:	4941      	ldr	r1, [pc, #260]	; (1de40 <fs_readdir+0x13c>)
   1dd3a:	4638      	mov	r0, r7
   1dd3c:	f00b fefe 	bl	29b3c <strcmp>
   1dd40:	2800      	cmp	r0, #0
   1dd42:	d0eb      	beq.n	1dd1c <fs_readdir+0x18>
			    && (strcmp(entry->name, "..") != 0)) {
   1dd44:	493f      	ldr	r1, [pc, #252]	; (1de44 <fs_readdir+0x140>)
   1dd46:	4638      	mov	r0, r7
   1dd48:	f00b fef8 	bl	29b3c <strcmp>
   1dd4c:	2800      	cmp	r0, #0
   1dd4e:	d0e5      	beq.n	1dd1c <fs_readdir+0x18>
		if (rc < 0) {
   1dd50:	2c00      	cmp	r4, #0
   1dd52:	db02      	blt.n	1dd5a <fs_readdir+0x56>
}
   1dd54:	4620      	mov	r0, r4
   1dd56:	b003      	add	sp, #12
   1dd58:	bdf0      	pop	{r4, r5, r6, r7, pc}
			LOG_ERR("directory read error (%d)", rc);
   1dd5a:	2008      	movs	r0, #8
   1dd5c:	f7f5 ffd4 	bl	13d08 <z_log_msg_alloc>
   1dd60:	2200      	movs	r2, #0
   1dd62:	f36f 0200 	bfc	r2, #0, #1
   1dd66:	f36f 0241 	bfc	r2, #1, #1
   1dd6a:	f36f 0282 	bfc	r2, #2, #1
   1dd6e:	f36f 02c5 	bfc	r2, #3, #3
   1dd72:	2301      	movs	r3, #1
   1dd74:	f363 1288 	bfi	r2, r3, #6, #3
   1dd78:	230c      	movs	r3, #12
   1dd7a:	f363 2252 	bfi	r2, r3, #9, #10
   1dd7e:	f36f 42de 	bfc	r2, #19, #12
   1dd82:	f36f 72df 	bfc	r2, #31, #1
   1dd86:	4605      	mov	r5, r0
   1dd88:	b190      	cbz	r0, 1ddb0 <fs_readdir+0xac>
   1dd8a:	f110 0310 	adds.w	r3, r0, #16
   1dd8e:	d002      	beq.n	1dd96 <fs_readdir+0x92>
   1dd90:	492d      	ldr	r1, [pc, #180]	; (1de48 <fs_readdir+0x144>)
   1dd92:	6141      	str	r1, [r0, #20]
   1dd94:	6184      	str	r4, [r0, #24]
   1dd96:	b15b      	cbz	r3, 1ddb0 <fs_readdir+0xac>
   1dd98:	2303      	movs	r3, #3
   1dd9a:	f88d 3004 	strb.w	r3, [sp, #4]
   1dd9e:	2300      	movs	r3, #0
   1dda0:	f88d 3005 	strb.w	r3, [sp, #5]
   1dda4:	f88d 3006 	strb.w	r3, [sp, #6]
   1dda8:	f88d 3007 	strb.w	r3, [sp, #7]
   1ddac:	9801      	ldr	r0, [sp, #4]
   1ddae:	6128      	str	r0, [r5, #16]
   1ddb0:	2300      	movs	r3, #0
   1ddb2:	4926      	ldr	r1, [pc, #152]	; (1de4c <fs_readdir+0x148>)
   1ddb4:	4628      	mov	r0, r5
   1ddb6:	f00b fa10 	bl	291da <z_log_msg_finalize>
		return rc;
   1ddba:	e7cb      	b.n	1dd54 <fs_readdir+0x50>
	if (zdp->dirp == NULL) {
   1ddbc:	6803      	ldr	r3, [r0, #0]
   1ddbe:	b163      	cbz	r3, 1ddda <fs_readdir+0xd6>
	return z_impl_k_mutex_lock(mutex, timeout);
   1ddc0:	f04f 32ff 	mov.w	r2, #4294967295
   1ddc4:	f04f 33ff 	mov.w	r3, #4294967295
   1ddc8:	4821      	ldr	r0, [pc, #132]	; (1de50 <fs_readdir+0x14c>)
   1ddca:	f008 faf3 	bl	263b4 <z_impl_k_mutex_lock>
	return list->head == list;
   1ddce:	4b21      	ldr	r3, [pc, #132]	; (1de54 <fs_readdir+0x150>)
   1ddd0:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ddd2:	429c      	cmp	r4, r3
   1ddd4:	d119      	bne.n	1de0a <fs_readdir+0x106>
   1ddd6:	463c      	mov	r4, r7
   1ddd8:	e017      	b.n	1de0a <fs_readdir+0x106>
		entry->name[0] = 0;
   1ddda:	2000      	movs	r0, #0
   1dddc:	7048      	strb	r0, [r1, #1]
		return 0;
   1ddde:	4604      	mov	r4, r0
   1dde0:	e7b8      	b.n	1dd54 <fs_readdir+0x50>
			entry->type = FS_DIR_ENTRY_DIR;
   1dde2:	4628      	mov	r0, r5
   1dde4:	2301      	movs	r3, #1
   1dde6:	f800 3b01 	strb.w	r3, [r0], #1
			strncpy(entry->name, mnt->mnt_point + 1,
   1ddea:	68e1      	ldr	r1, [r4, #12]
   1ddec:	220c      	movs	r2, #12
   1ddee:	4419      	add	r1, r3
   1ddf0:	f00b fe6a 	bl	29ac8 <strncpy>
			entry->name[sizeof(entry->name) - 1] = 0;
   1ddf4:	2300      	movs	r3, #0
   1ddf6:	736b      	strb	r3, [r5, #13]
			entry->size = 0;
   1ddf8:	612b      	str	r3, [r5, #16]
	return (node == list->tail) ? NULL : node->next;
   1ddfa:	4b16      	ldr	r3, [pc, #88]	; (1de54 <fs_readdir+0x150>)
   1ddfc:	685b      	ldr	r3, [r3, #4]
   1ddfe:	42a3      	cmp	r3, r4
   1de00:	d015      	beq.n	1de2e <fs_readdir+0x12a>
   1de02:	6824      	ldr	r4, [r4, #0]
			found = true;
   1de04:	2501      	movs	r5, #1
   1de06:	e00b      	b.n	1de20 <fs_readdir+0x11c>
   1de08:	463c      	mov	r4, r7
	SYS_DLIST_FOR_EACH_NODE(&fs_mnt_list, node) {
   1de0a:	b144      	cbz	r4, 1de1e <fs_readdir+0x11a>
		if (node == zdp->dirp) {
   1de0c:	6833      	ldr	r3, [r6, #0]
   1de0e:	429c      	cmp	r4, r3
   1de10:	d0e7      	beq.n	1dde2 <fs_readdir+0xde>
   1de12:	4b10      	ldr	r3, [pc, #64]	; (1de54 <fs_readdir+0x150>)
   1de14:	685b      	ldr	r3, [r3, #4]
   1de16:	429c      	cmp	r4, r3
   1de18:	d0f6      	beq.n	1de08 <fs_readdir+0x104>
   1de1a:	6824      	ldr	r4, [r4, #0]
   1de1c:	e7f5      	b.n	1de0a <fs_readdir+0x106>
	bool found = false;
   1de1e:	2500      	movs	r5, #0
	return z_impl_k_mutex_unlock(mutex);
   1de20:	480b      	ldr	r0, [pc, #44]	; (1de50 <fs_readdir+0x14c>)
   1de22:	f008 fb4b 	bl	264bc <z_impl_k_mutex_unlock>
	if (!found) {
   1de26:	b145      	cbz	r5, 1de3a <fs_readdir+0x136>
	zdp->dirp = next;
   1de28:	6034      	str	r4, [r6, #0]
	return 0;
   1de2a:	2400      	movs	r4, #0
   1de2c:	e792      	b.n	1dd54 <fs_readdir+0x50>
   1de2e:	463c      	mov	r4, r7
			found = true;
   1de30:	2501      	movs	r5, #1
   1de32:	e7f5      	b.n	1de20 <fs_readdir+0x11c>
			return  -ENOTSUP;
   1de34:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1de38:	e78c      	b.n	1dd54 <fs_readdir+0x50>
		return -ENOENT;
   1de3a:	f06f 0401 	mvn.w	r4, #1
   1de3e:	e789      	b.n	1dd54 <fs_readdir+0x50>
   1de40:	00031b4c 	.word	0x00031b4c
   1de44:	00033618 	.word	0x00033618
   1de48:	0003361c 	.word	0x0003361c
   1de4c:	00031498 	.word	0x00031498
   1de50:	20008890 	.word	0x20008890
   1de54:	200088a4 	.word	0x200088a4

0001de58 <fs_closedir>:
{
   1de58:	b530      	push	{r4, r5, lr}
   1de5a:	b083      	sub	sp, #12
   1de5c:	4604      	mov	r4, r0
	if (zdp->mp == NULL) {
   1de5e:	6843      	ldr	r3, [r0, #4]
   1de60:	b163      	cbz	r3, 1de7c <fs_closedir+0x24>
	CHECKIF(zdp->mp->fs->closedir == NULL) {
   1de62:	69db      	ldr	r3, [r3, #28]
   1de64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1de66:	2b00      	cmp	r3, #0
   1de68:	d03c      	beq.n	1dee4 <fs_closedir+0x8c>
	rc = zdp->mp->fs->closedir(zdp);
   1de6a:	4798      	blx	r3
	if (rc < 0) {
   1de6c:	1e05      	subs	r5, r0, #0
   1de6e:	db08      	blt.n	1de82 <fs_closedir+0x2a>
	zdp->mp = NULL;
   1de70:	2300      	movs	r3, #0
   1de72:	6063      	str	r3, [r4, #4]
	zdp->dirp = NULL;
   1de74:	6023      	str	r3, [r4, #0]
}
   1de76:	4628      	mov	r0, r5
   1de78:	b003      	add	sp, #12
   1de7a:	bd30      	pop	{r4, r5, pc}
		zdp->dirp = NULL;
   1de7c:	2500      	movs	r5, #0
   1de7e:	6005      	str	r5, [r0, #0]
		return 0;
   1de80:	e7f9      	b.n	1de76 <fs_closedir+0x1e>
		LOG_ERR("directory close error (%d)", rc);
   1de82:	2008      	movs	r0, #8
   1de84:	f7f5 ff40 	bl	13d08 <z_log_msg_alloc>
   1de88:	2200      	movs	r2, #0
   1de8a:	f36f 0200 	bfc	r2, #0, #1
   1de8e:	f36f 0241 	bfc	r2, #1, #1
   1de92:	f36f 0282 	bfc	r2, #2, #1
   1de96:	f36f 02c5 	bfc	r2, #3, #3
   1de9a:	2301      	movs	r3, #1
   1de9c:	f363 1288 	bfi	r2, r3, #6, #3
   1dea0:	230c      	movs	r3, #12
   1dea2:	f363 2252 	bfi	r2, r3, #9, #10
   1dea6:	f36f 42de 	bfc	r2, #19, #12
   1deaa:	f36f 72df 	bfc	r2, #31, #1
   1deae:	4604      	mov	r4, r0
   1deb0:	b190      	cbz	r0, 1ded8 <fs_closedir+0x80>
   1deb2:	f110 0310 	adds.w	r3, r0, #16
   1deb6:	d002      	beq.n	1debe <fs_closedir+0x66>
   1deb8:	490c      	ldr	r1, [pc, #48]	; (1deec <fs_closedir+0x94>)
   1deba:	6141      	str	r1, [r0, #20]
   1debc:	6185      	str	r5, [r0, #24]
   1debe:	b15b      	cbz	r3, 1ded8 <fs_closedir+0x80>
   1dec0:	2303      	movs	r3, #3
   1dec2:	f88d 3004 	strb.w	r3, [sp, #4]
   1dec6:	2300      	movs	r3, #0
   1dec8:	f88d 3005 	strb.w	r3, [sp, #5]
   1decc:	f88d 3006 	strb.w	r3, [sp, #6]
   1ded0:	f88d 3007 	strb.w	r3, [sp, #7]
   1ded4:	9801      	ldr	r0, [sp, #4]
   1ded6:	6120      	str	r0, [r4, #16]
   1ded8:	2300      	movs	r3, #0
   1deda:	4905      	ldr	r1, [pc, #20]	; (1def0 <fs_closedir+0x98>)
   1dedc:	4620      	mov	r0, r4
   1dede:	f00b f97c 	bl	291da <z_log_msg_finalize>
		return rc;
   1dee2:	e7c8      	b.n	1de76 <fs_closedir+0x1e>
		return -ENOTSUP;
   1dee4:	f06f 0585 	mvn.w	r5, #133	; 0x85
   1dee8:	e7c5      	b.n	1de76 <fs_closedir+0x1e>
   1deea:	bf00      	nop
   1deec:	00033638 	.word	0x00033638
   1def0:	00031498 	.word	0x00031498

0001def4 <fs_mkdir>:
{
   1def4:	b530      	push	{r4, r5, lr}
   1def6:	b083      	sub	sp, #12
	if ((abs_path == NULL) ||
   1def8:	b308      	cbz	r0, 1df3e <fs_mkdir+0x4a>
   1defa:	4605      	mov	r5, r0
			(strlen(abs_path) <= 1) || (abs_path[0] != '/')) {
   1defc:	f00b fe0b 	bl	29b16 <strlen>
	if ((abs_path == NULL) ||
   1df00:	2801      	cmp	r0, #1
   1df02:	d91c      	bls.n	1df3e <fs_mkdir+0x4a>
			(strlen(abs_path) <= 1) || (abs_path[0] != '/')) {
   1df04:	782b      	ldrb	r3, [r5, #0]
   1df06:	2b2f      	cmp	r3, #47	; 0x2f
   1df08:	d119      	bne.n	1df3e <fs_mkdir+0x4a>
	rc = fs_get_mnt_point(&mp, abs_path, NULL);
   1df0a:	2200      	movs	r2, #0
   1df0c:	4629      	mov	r1, r5
   1df0e:	a801      	add	r0, sp, #4
   1df10:	f7ff fc7a 	bl	1d808 <fs_get_mnt_point>
	if (rc < 0) {
   1df14:	1e04      	subs	r4, r0, #0
   1df16:	db44      	blt.n	1dfa2 <fs_mkdir+0xae>
	if (mp->flags & FS_MOUNT_FLAG_READ_ONLY) {
   1df18:	9801      	ldr	r0, [sp, #4]
   1df1a:	f890 3020 	ldrb.w	r3, [r0, #32]
   1df1e:	f013 0f02 	tst.w	r3, #2
   1df22:	f040 809f 	bne.w	1e064 <fs_mkdir+0x170>
	CHECKIF(mp->fs->mkdir == NULL) {
   1df26:	69c3      	ldr	r3, [r0, #28]
   1df28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1df2a:	2b00      	cmp	r3, #0
   1df2c:	f000 809d 	beq.w	1e06a <fs_mkdir+0x176>
	rc = mp->fs->mkdir(mp, abs_path);
   1df30:	4629      	mov	r1, r5
   1df32:	4798      	blx	r3
	if (rc < 0) {
   1df34:	1e04      	subs	r4, r0, #0
   1df36:	db64      	blt.n	1e002 <fs_mkdir+0x10e>
}
   1df38:	4620      	mov	r0, r4
   1df3a:	b003      	add	sp, #12
   1df3c:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("invalid directory name!!");
   1df3e:	2006      	movs	r0, #6
   1df40:	f7f5 fee2 	bl	13d08 <z_log_msg_alloc>
   1df44:	2200      	movs	r2, #0
   1df46:	f36f 0200 	bfc	r2, #0, #1
   1df4a:	f36f 0241 	bfc	r2, #1, #1
   1df4e:	f36f 0282 	bfc	r2, #2, #1
   1df52:	f36f 02c5 	bfc	r2, #3, #3
   1df56:	2301      	movs	r3, #1
   1df58:	f363 1288 	bfi	r2, r3, #6, #3
   1df5c:	2308      	movs	r3, #8
   1df5e:	f363 2252 	bfi	r2, r3, #9, #10
   1df62:	f36f 42de 	bfc	r2, #19, #12
   1df66:	f36f 72df 	bfc	r2, #31, #1
   1df6a:	4604      	mov	r4, r0
   1df6c:	b188      	cbz	r0, 1df92 <fs_mkdir+0x9e>
   1df6e:	f110 0310 	adds.w	r3, r0, #16
   1df72:	d001      	beq.n	1df78 <fs_mkdir+0x84>
   1df74:	493e      	ldr	r1, [pc, #248]	; (1e070 <fs_mkdir+0x17c>)
   1df76:	6141      	str	r1, [r0, #20]
   1df78:	b15b      	cbz	r3, 1df92 <fs_mkdir+0x9e>
   1df7a:	2302      	movs	r3, #2
   1df7c:	f88d 3000 	strb.w	r3, [sp]
   1df80:	2300      	movs	r3, #0
   1df82:	f88d 3001 	strb.w	r3, [sp, #1]
   1df86:	f88d 3002 	strb.w	r3, [sp, #2]
   1df8a:	f88d 3003 	strb.w	r3, [sp, #3]
   1df8e:	9800      	ldr	r0, [sp, #0]
   1df90:	6120      	str	r0, [r4, #16]
   1df92:	2300      	movs	r3, #0
   1df94:	4937      	ldr	r1, [pc, #220]	; (1e074 <fs_mkdir+0x180>)
   1df96:	4620      	mov	r0, r4
   1df98:	f00b f91f 	bl	291da <z_log_msg_finalize>
		return -EINVAL;
   1df9c:	f06f 0415 	mvn.w	r4, #21
   1dfa0:	e7ca      	b.n	1df38 <fs_mkdir+0x44>
		LOG_ERR("mount point not found!!");
   1dfa2:	2006      	movs	r0, #6
   1dfa4:	f7f5 feb0 	bl	13d08 <z_log_msg_alloc>
   1dfa8:	2200      	movs	r2, #0
   1dfaa:	f36f 0200 	bfc	r2, #0, #1
   1dfae:	f36f 0241 	bfc	r2, #1, #1
   1dfb2:	f36f 0282 	bfc	r2, #2, #1
   1dfb6:	f36f 02c5 	bfc	r2, #3, #3
   1dfba:	2301      	movs	r3, #1
   1dfbc:	f363 1288 	bfi	r2, r3, #6, #3
   1dfc0:	2308      	movs	r3, #8
   1dfc2:	f363 2252 	bfi	r2, r3, #9, #10
   1dfc6:	f36f 42de 	bfc	r2, #19, #12
   1dfca:	f36f 72df 	bfc	r2, #31, #1
   1dfce:	4605      	mov	r5, r0
   1dfd0:	b188      	cbz	r0, 1dff6 <fs_mkdir+0x102>
   1dfd2:	f110 0310 	adds.w	r3, r0, #16
   1dfd6:	d001      	beq.n	1dfdc <fs_mkdir+0xe8>
   1dfd8:	4927      	ldr	r1, [pc, #156]	; (1e078 <fs_mkdir+0x184>)
   1dfda:	6141      	str	r1, [r0, #20]
   1dfdc:	b15b      	cbz	r3, 1dff6 <fs_mkdir+0x102>
   1dfde:	2302      	movs	r3, #2
   1dfe0:	f88d 3000 	strb.w	r3, [sp]
   1dfe4:	2300      	movs	r3, #0
   1dfe6:	f88d 3001 	strb.w	r3, [sp, #1]
   1dfea:	f88d 3002 	strb.w	r3, [sp, #2]
   1dfee:	f88d 3003 	strb.w	r3, [sp, #3]
   1dff2:	9800      	ldr	r0, [sp, #0]
   1dff4:	6128      	str	r0, [r5, #16]
   1dff6:	2300      	movs	r3, #0
   1dff8:	491e      	ldr	r1, [pc, #120]	; (1e074 <fs_mkdir+0x180>)
   1dffa:	4628      	mov	r0, r5
   1dffc:	f00b f8ed 	bl	291da <z_log_msg_finalize>
		return rc;
   1e000:	e79a      	b.n	1df38 <fs_mkdir+0x44>
		LOG_ERR("failed to create directory (%d)", rc);
   1e002:	2008      	movs	r0, #8
   1e004:	f7f5 fe80 	bl	13d08 <z_log_msg_alloc>
   1e008:	2200      	movs	r2, #0
   1e00a:	f36f 0200 	bfc	r2, #0, #1
   1e00e:	f36f 0241 	bfc	r2, #1, #1
   1e012:	f36f 0282 	bfc	r2, #2, #1
   1e016:	f36f 02c5 	bfc	r2, #3, #3
   1e01a:	2301      	movs	r3, #1
   1e01c:	f363 1288 	bfi	r2, r3, #6, #3
   1e020:	230c      	movs	r3, #12
   1e022:	f363 2252 	bfi	r2, r3, #9, #10
   1e026:	f36f 42de 	bfc	r2, #19, #12
   1e02a:	f36f 72df 	bfc	r2, #31, #1
   1e02e:	4605      	mov	r5, r0
   1e030:	b190      	cbz	r0, 1e058 <fs_mkdir+0x164>
   1e032:	f110 0310 	adds.w	r3, r0, #16
   1e036:	d002      	beq.n	1e03e <fs_mkdir+0x14a>
   1e038:	4910      	ldr	r1, [pc, #64]	; (1e07c <fs_mkdir+0x188>)
   1e03a:	6141      	str	r1, [r0, #20]
   1e03c:	6184      	str	r4, [r0, #24]
   1e03e:	b15b      	cbz	r3, 1e058 <fs_mkdir+0x164>
   1e040:	2303      	movs	r3, #3
   1e042:	f88d 3000 	strb.w	r3, [sp]
   1e046:	2300      	movs	r3, #0
   1e048:	f88d 3001 	strb.w	r3, [sp, #1]
   1e04c:	f88d 3002 	strb.w	r3, [sp, #2]
   1e050:	f88d 3003 	strb.w	r3, [sp, #3]
   1e054:	9800      	ldr	r0, [sp, #0]
   1e056:	6128      	str	r0, [r5, #16]
   1e058:	2300      	movs	r3, #0
   1e05a:	4906      	ldr	r1, [pc, #24]	; (1e074 <fs_mkdir+0x180>)
   1e05c:	4628      	mov	r0, r5
   1e05e:	f00b f8bc 	bl	291da <z_log_msg_finalize>
   1e062:	e769      	b.n	1df38 <fs_mkdir+0x44>
		return -EROFS;
   1e064:	f06f 041d 	mvn.w	r4, #29
   1e068:	e766      	b.n	1df38 <fs_mkdir+0x44>
		return -ENOTSUP;
   1e06a:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1e06e:	e763      	b.n	1df38 <fs_mkdir+0x44>
   1e070:	000335dc 	.word	0x000335dc
   1e074:	00031498 	.word	0x00031498
   1e078:	00033594 	.word	0x00033594
   1e07c:	00033654 	.word	0x00033654

0001e080 <fs_mount>:
{
   1e080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e084:	b082      	sub	sp, #8
   1e086:	af00      	add	r7, sp, #0
	if ((mp == NULL) || (mp->mnt_point == NULL)) {
   1e088:	b1f0      	cbz	r0, 1e0c8 <fs_mount+0x48>
   1e08a:	4606      	mov	r6, r0
   1e08c:	68c0      	ldr	r0, [r0, #12]
   1e08e:	b1d8      	cbz	r0, 1e0c8 <fs_mount+0x48>
	return node->next != NULL;
   1e090:	f8d6 8000 	ldr.w	r8, [r6]
	if (sys_dnode_is_linked(&mp->node)) {
   1e094:	f1b8 0f00 	cmp.w	r8, #0
   1e098:	d144      	bne.n	1e124 <fs_mount+0xa4>
	len = strlen(mp->mnt_point);
   1e09a:	f00b fd3c 	bl	29b16 <strlen>
   1e09e:	4605      	mov	r5, r0
	if ((len <= 1) || (mp->mnt_point[0] != '/')) {
   1e0a0:	2801      	cmp	r0, #1
   1e0a2:	d96d      	bls.n	1e180 <fs_mount+0x100>
   1e0a4:	68f3      	ldr	r3, [r6, #12]
   1e0a6:	781b      	ldrb	r3, [r3, #0]
   1e0a8:	2b2f      	cmp	r3, #47	; 0x2f
   1e0aa:	d169      	bne.n	1e180 <fs_mount+0x100>
	return z_impl_k_mutex_lock(mutex, timeout);
   1e0ac:	f04f 32ff 	mov.w	r2, #4294967295
   1e0b0:	f04f 33ff 	mov.w	r3, #4294967295
   1e0b4:	48b9      	ldr	r0, [pc, #740]	; (1e39c <fs_mount+0x31c>)
   1e0b6:	f008 f97d 	bl	263b4 <z_impl_k_mutex_lock>
	return list->head == list;
   1e0ba:	4bb9      	ldr	r3, [pc, #740]	; (1e3a0 <fs_mount+0x320>)
   1e0bc:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e0be:	429c      	cmp	r4, r3
   1e0c0:	f040 8091 	bne.w	1e1e6 <fs_mount+0x166>
   1e0c4:	4644      	mov	r4, r8
   1e0c6:	e08e      	b.n	1e1e6 <fs_mount+0x166>
		LOG_ERR("mount point not initialized!!");
   1e0c8:	2006      	movs	r0, #6
   1e0ca:	f7f5 fe1d 	bl	13d08 <z_log_msg_alloc>
   1e0ce:	2200      	movs	r2, #0
   1e0d0:	f36f 0200 	bfc	r2, #0, #1
   1e0d4:	f36f 0241 	bfc	r2, #1, #1
   1e0d8:	f36f 0282 	bfc	r2, #2, #1
   1e0dc:	f36f 02c5 	bfc	r2, #3, #3
   1e0e0:	2301      	movs	r3, #1
   1e0e2:	f363 1288 	bfi	r2, r3, #6, #3
   1e0e6:	2308      	movs	r3, #8
   1e0e8:	f363 2252 	bfi	r2, r3, #9, #10
   1e0ec:	f36f 42de 	bfc	r2, #19, #12
   1e0f0:	f36f 72df 	bfc	r2, #31, #1
   1e0f4:	4604      	mov	r4, r0
   1e0f6:	b168      	cbz	r0, 1e114 <fs_mount+0x94>
   1e0f8:	f110 0310 	adds.w	r3, r0, #16
   1e0fc:	d001      	beq.n	1e102 <fs_mount+0x82>
   1e0fe:	49a9      	ldr	r1, [pc, #676]	; (1e3a4 <fs_mount+0x324>)
   1e100:	6141      	str	r1, [r0, #20]
   1e102:	b13b      	cbz	r3, 1e114 <fs_mount+0x94>
   1e104:	2302      	movs	r3, #2
   1e106:	713b      	strb	r3, [r7, #4]
   1e108:	2300      	movs	r3, #0
   1e10a:	717b      	strb	r3, [r7, #5]
   1e10c:	71bb      	strb	r3, [r7, #6]
   1e10e:	71fb      	strb	r3, [r7, #7]
   1e110:	6878      	ldr	r0, [r7, #4]
   1e112:	6120      	str	r0, [r4, #16]
   1e114:	2300      	movs	r3, #0
   1e116:	49a4      	ldr	r1, [pc, #656]	; (1e3a8 <fs_mount+0x328>)
   1e118:	4620      	mov	r0, r4
   1e11a:	f00b f85e 	bl	291da <z_log_msg_finalize>
		return -EINVAL;
   1e11e:	f06f 0415 	mvn.w	r4, #21
   1e122:	e0bb      	b.n	1e29c <fs_mount+0x21c>
		LOG_ERR("file system already mounted!!");
   1e124:	2006      	movs	r0, #6
   1e126:	f7f5 fdef 	bl	13d08 <z_log_msg_alloc>
   1e12a:	2200      	movs	r2, #0
   1e12c:	f36f 0200 	bfc	r2, #0, #1
   1e130:	f36f 0241 	bfc	r2, #1, #1
   1e134:	f36f 0282 	bfc	r2, #2, #1
   1e138:	f36f 02c5 	bfc	r2, #3, #3
   1e13c:	2301      	movs	r3, #1
   1e13e:	f363 1288 	bfi	r2, r3, #6, #3
   1e142:	2308      	movs	r3, #8
   1e144:	f363 2252 	bfi	r2, r3, #9, #10
   1e148:	f36f 42de 	bfc	r2, #19, #12
   1e14c:	f36f 72df 	bfc	r2, #31, #1
   1e150:	4604      	mov	r4, r0
   1e152:	b168      	cbz	r0, 1e170 <fs_mount+0xf0>
   1e154:	f110 0310 	adds.w	r3, r0, #16
   1e158:	d001      	beq.n	1e15e <fs_mount+0xde>
   1e15a:	4994      	ldr	r1, [pc, #592]	; (1e3ac <fs_mount+0x32c>)
   1e15c:	6141      	str	r1, [r0, #20]
   1e15e:	b13b      	cbz	r3, 1e170 <fs_mount+0xf0>
   1e160:	2302      	movs	r3, #2
   1e162:	713b      	strb	r3, [r7, #4]
   1e164:	2300      	movs	r3, #0
   1e166:	717b      	strb	r3, [r7, #5]
   1e168:	71bb      	strb	r3, [r7, #6]
   1e16a:	71fb      	strb	r3, [r7, #7]
   1e16c:	6878      	ldr	r0, [r7, #4]
   1e16e:	6120      	str	r0, [r4, #16]
   1e170:	2300      	movs	r3, #0
   1e172:	498d      	ldr	r1, [pc, #564]	; (1e3a8 <fs_mount+0x328>)
   1e174:	4620      	mov	r0, r4
   1e176:	f00b f830 	bl	291da <z_log_msg_finalize>
		return -EBUSY;
   1e17a:	f06f 040f 	mvn.w	r4, #15
   1e17e:	e08d      	b.n	1e29c <fs_mount+0x21c>
		LOG_ERR("invalid mount point!!");
   1e180:	2006      	movs	r0, #6
   1e182:	f7f5 fdc1 	bl	13d08 <z_log_msg_alloc>
   1e186:	2200      	movs	r2, #0
   1e188:	f36f 0200 	bfc	r2, #0, #1
   1e18c:	f36f 0241 	bfc	r2, #1, #1
   1e190:	f36f 0282 	bfc	r2, #2, #1
   1e194:	f36f 02c5 	bfc	r2, #3, #3
   1e198:	2301      	movs	r3, #1
   1e19a:	f363 1288 	bfi	r2, r3, #6, #3
   1e19e:	2308      	movs	r3, #8
   1e1a0:	f363 2252 	bfi	r2, r3, #9, #10
   1e1a4:	f36f 42de 	bfc	r2, #19, #12
   1e1a8:	f36f 72df 	bfc	r2, #31, #1
   1e1ac:	4604      	mov	r4, r0
   1e1ae:	b168      	cbz	r0, 1e1cc <fs_mount+0x14c>
   1e1b0:	f110 0310 	adds.w	r3, r0, #16
   1e1b4:	d001      	beq.n	1e1ba <fs_mount+0x13a>
   1e1b6:	497e      	ldr	r1, [pc, #504]	; (1e3b0 <fs_mount+0x330>)
   1e1b8:	6141      	str	r1, [r0, #20]
   1e1ba:	b13b      	cbz	r3, 1e1cc <fs_mount+0x14c>
   1e1bc:	2302      	movs	r3, #2
   1e1be:	713b      	strb	r3, [r7, #4]
   1e1c0:	2300      	movs	r3, #0
   1e1c2:	717b      	strb	r3, [r7, #5]
   1e1c4:	71bb      	strb	r3, [r7, #6]
   1e1c6:	71fb      	strb	r3, [r7, #7]
   1e1c8:	6878      	ldr	r0, [r7, #4]
   1e1ca:	6120      	str	r0, [r4, #16]
   1e1cc:	2300      	movs	r3, #0
   1e1ce:	4976      	ldr	r1, [pc, #472]	; (1e3a8 <fs_mount+0x328>)
   1e1d0:	4620      	mov	r0, r4
   1e1d2:	f00b f802 	bl	291da <z_log_msg_finalize>
		return -EINVAL;
   1e1d6:	f06f 0415 	mvn.w	r4, #21
   1e1da:	e05f      	b.n	1e29c <fs_mount+0x21c>
	return (node == list->tail) ? NULL : node->next;
   1e1dc:	4b70      	ldr	r3, [pc, #448]	; (1e3a0 <fs_mount+0x320>)
   1e1de:	685b      	ldr	r3, [r3, #4]
   1e1e0:	429c      	cmp	r4, r3
   1e1e2:	d03a      	beq.n	1e25a <fs_mount+0x1da>
   1e1e4:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_NODE(&fs_mnt_list, node) {
   1e1e6:	2c00      	cmp	r4, #0
   1e1e8:	d039      	beq.n	1e25e <fs_mount+0x1de>
		if (len != itr->mountp_len) {
   1e1ea:	69a3      	ldr	r3, [r4, #24]
   1e1ec:	42ab      	cmp	r3, r5
   1e1ee:	d1f5      	bne.n	1e1dc <fs_mount+0x15c>
		if (strncmp(mp->mnt_point, itr->mnt_point, len) == 0) {
   1e1f0:	462a      	mov	r2, r5
   1e1f2:	68e1      	ldr	r1, [r4, #12]
   1e1f4:	68f0      	ldr	r0, [r6, #12]
   1e1f6:	f00b fcac 	bl	29b52 <strncmp>
   1e1fa:	2800      	cmp	r0, #0
   1e1fc:	d1ee      	bne.n	1e1dc <fs_mount+0x15c>
			LOG_ERR("mount point already exists!!");
   1e1fe:	2006      	movs	r0, #6
   1e200:	f7f5 fd82 	bl	13d08 <z_log_msg_alloc>
   1e204:	2200      	movs	r2, #0
   1e206:	f36f 0200 	bfc	r2, #0, #1
   1e20a:	f36f 0241 	bfc	r2, #1, #1
   1e20e:	f36f 0282 	bfc	r2, #2, #1
   1e212:	f36f 02c5 	bfc	r2, #3, #3
   1e216:	2301      	movs	r3, #1
   1e218:	f363 1288 	bfi	r2, r3, #6, #3
   1e21c:	2308      	movs	r3, #8
   1e21e:	f363 2252 	bfi	r2, r3, #9, #10
   1e222:	f36f 42de 	bfc	r2, #19, #12
   1e226:	f36f 72df 	bfc	r2, #31, #1
   1e22a:	4604      	mov	r4, r0
   1e22c:	b168      	cbz	r0, 1e24a <fs_mount+0x1ca>
   1e22e:	f110 0310 	adds.w	r3, r0, #16
   1e232:	d001      	beq.n	1e238 <fs_mount+0x1b8>
   1e234:	495f      	ldr	r1, [pc, #380]	; (1e3b4 <fs_mount+0x334>)
   1e236:	6141      	str	r1, [r0, #20]
   1e238:	b13b      	cbz	r3, 1e24a <fs_mount+0x1ca>
   1e23a:	2302      	movs	r3, #2
   1e23c:	713b      	strb	r3, [r7, #4]
   1e23e:	2300      	movs	r3, #0
   1e240:	717b      	strb	r3, [r7, #5]
   1e242:	71bb      	strb	r3, [r7, #6]
   1e244:	71fb      	strb	r3, [r7, #7]
   1e246:	6878      	ldr	r0, [r7, #4]
   1e248:	6120      	str	r0, [r4, #16]
   1e24a:	2300      	movs	r3, #0
   1e24c:	4956      	ldr	r1, [pc, #344]	; (1e3a8 <fs_mount+0x328>)
   1e24e:	4620      	mov	r0, r4
   1e250:	f00a ffc3 	bl	291da <z_log_msg_finalize>
			rc = -EBUSY;
   1e254:	f06f 040f 	mvn.w	r4, #15
			goto mount_err;
   1e258:	e01d      	b.n	1e296 <fs_mount+0x216>
   1e25a:	4644      	mov	r4, r8
   1e25c:	e7c3      	b.n	1e1e6 <fs_mount+0x166>
	fs = fs_type_get(mp->type);
   1e25e:	68b4      	ldr	r4, [r6, #8]
   1e260:	4620      	mov	r0, r4
   1e262:	f00d ff45 	bl	2c0f0 <fs_type_get>
	if (fs == NULL) {
   1e266:	4680      	mov	r8, r0
   1e268:	b1e8      	cbz	r0, 1e2a6 <fs_mount+0x226>
	CHECKIF(fs->mount == NULL) {
   1e26a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   1e26c:	2b00      	cmp	r3, #0
   1e26e:	d048      	beq.n	1e302 <fs_mount+0x282>
	if (fs->unmount == NULL) {
   1e270:	6b03      	ldr	r3, [r0, #48]	; 0x30
   1e272:	2b00      	cmp	r3, #0
   1e274:	d074      	beq.n	1e360 <fs_mount+0x2e0>
	rc = fs->mount(mp);
   1e276:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
   1e27a:	4630      	mov	r0, r6
   1e27c:	4798      	blx	r3
	if (rc < 0) {
   1e27e:	1e04      	subs	r4, r0, #0
   1e280:	f2c0 80d8 	blt.w	1e434 <fs_mount+0x3b4>
	mp->mountp_len = len;
   1e284:	61b5      	str	r5, [r6, #24]
	mp->fs = fs;
   1e286:	f8c6 801c 	str.w	r8, [r6, #28]
	sys_dnode_t *const tail = list->tail;
   1e28a:	4b45      	ldr	r3, [pc, #276]	; (1e3a0 <fs_mount+0x320>)
   1e28c:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   1e28e:	6033      	str	r3, [r6, #0]
	node->prev = tail;
   1e290:	6072      	str	r2, [r6, #4]
	tail->next = node;
   1e292:	6016      	str	r6, [r2, #0]
	list->tail = node;
   1e294:	605e      	str	r6, [r3, #4]
	return z_impl_k_mutex_unlock(mutex);
   1e296:	4841      	ldr	r0, [pc, #260]	; (1e39c <fs_mount+0x31c>)
   1e298:	f008 f910 	bl	264bc <z_impl_k_mutex_unlock>
}
   1e29c:	4620      	mov	r0, r4
   1e29e:	3708      	adds	r7, #8
   1e2a0:	46bd      	mov	sp, r7
   1e2a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERR("requested file system type not registered!!");
   1e2a6:	2006      	movs	r0, #6
   1e2a8:	f7f5 fd2e 	bl	13d08 <z_log_msg_alloc>
   1e2ac:	2200      	movs	r2, #0
   1e2ae:	f36f 0200 	bfc	r2, #0, #1
   1e2b2:	f36f 0241 	bfc	r2, #1, #1
   1e2b6:	f36f 0282 	bfc	r2, #2, #1
   1e2ba:	f36f 02c5 	bfc	r2, #3, #3
   1e2be:	2301      	movs	r3, #1
   1e2c0:	f363 1288 	bfi	r2, r3, #6, #3
   1e2c4:	2308      	movs	r3, #8
   1e2c6:	f363 2252 	bfi	r2, r3, #9, #10
   1e2ca:	f36f 42de 	bfc	r2, #19, #12
   1e2ce:	f36f 72df 	bfc	r2, #31, #1
   1e2d2:	4604      	mov	r4, r0
   1e2d4:	b168      	cbz	r0, 1e2f2 <fs_mount+0x272>
   1e2d6:	f110 0310 	adds.w	r3, r0, #16
   1e2da:	d001      	beq.n	1e2e0 <fs_mount+0x260>
   1e2dc:	4936      	ldr	r1, [pc, #216]	; (1e3b8 <fs_mount+0x338>)
   1e2de:	6141      	str	r1, [r0, #20]
   1e2e0:	b13b      	cbz	r3, 1e2f2 <fs_mount+0x272>
   1e2e2:	2302      	movs	r3, #2
   1e2e4:	713b      	strb	r3, [r7, #4]
   1e2e6:	2300      	movs	r3, #0
   1e2e8:	717b      	strb	r3, [r7, #5]
   1e2ea:	71bb      	strb	r3, [r7, #6]
   1e2ec:	71fb      	strb	r3, [r7, #7]
   1e2ee:	6878      	ldr	r0, [r7, #4]
   1e2f0:	6120      	str	r0, [r4, #16]
   1e2f2:	2300      	movs	r3, #0
   1e2f4:	492c      	ldr	r1, [pc, #176]	; (1e3a8 <fs_mount+0x328>)
   1e2f6:	4620      	mov	r0, r4
   1e2f8:	f00a ff6f 	bl	291da <z_log_msg_finalize>
		rc = -ENOENT;
   1e2fc:	f06f 0401 	mvn.w	r4, #1
		goto mount_err;
   1e300:	e7c9      	b.n	1e296 <fs_mount+0x216>
		LOG_ERR("fs type %d does not support mounting", mp->type);
   1e302:	2008      	movs	r0, #8
   1e304:	f7f5 fd00 	bl	13d08 <z_log_msg_alloc>
   1e308:	2200      	movs	r2, #0
   1e30a:	f36f 0200 	bfc	r2, #0, #1
   1e30e:	f36f 0241 	bfc	r2, #1, #1
   1e312:	f36f 0282 	bfc	r2, #2, #1
   1e316:	f36f 02c5 	bfc	r2, #3, #3
   1e31a:	2301      	movs	r3, #1
   1e31c:	f363 1288 	bfi	r2, r3, #6, #3
   1e320:	230c      	movs	r3, #12
   1e322:	f363 2252 	bfi	r2, r3, #9, #10
   1e326:	f36f 42de 	bfc	r2, #19, #12
   1e32a:	f36f 72df 	bfc	r2, #31, #1
   1e32e:	4605      	mov	r5, r0
   1e330:	b170      	cbz	r0, 1e350 <fs_mount+0x2d0>
   1e332:	f110 0310 	adds.w	r3, r0, #16
   1e336:	d002      	beq.n	1e33e <fs_mount+0x2be>
   1e338:	4920      	ldr	r1, [pc, #128]	; (1e3bc <fs_mount+0x33c>)
   1e33a:	6141      	str	r1, [r0, #20]
   1e33c:	6184      	str	r4, [r0, #24]
   1e33e:	b13b      	cbz	r3, 1e350 <fs_mount+0x2d0>
   1e340:	2303      	movs	r3, #3
   1e342:	713b      	strb	r3, [r7, #4]
   1e344:	2300      	movs	r3, #0
   1e346:	717b      	strb	r3, [r7, #5]
   1e348:	71bb      	strb	r3, [r7, #6]
   1e34a:	71fb      	strb	r3, [r7, #7]
   1e34c:	6878      	ldr	r0, [r7, #4]
   1e34e:	6128      	str	r0, [r5, #16]
   1e350:	2300      	movs	r3, #0
   1e352:	4915      	ldr	r1, [pc, #84]	; (1e3a8 <fs_mount+0x328>)
   1e354:	4628      	mov	r0, r5
   1e356:	f00a ff40 	bl	291da <z_log_msg_finalize>
		rc = -ENOTSUP;
   1e35a:	f06f 0485 	mvn.w	r4, #133	; 0x85
		goto mount_err;
   1e35e:	e79a      	b.n	1e296 <fs_mount+0x216>
		LOG_WRN("mount path %s is not unmountable",
   1e360:	68f1      	ldr	r1, [r6, #12]
   1e362:	466c      	mov	r4, sp
   1e364:	713b      	strb	r3, [r7, #4]
   1e366:	2302      	movs	r3, #2
   1e368:	717b      	strb	r3, [r7, #5]
   1e36a:	b088      	sub	sp, #32
   1e36c:	46ec      	mov	ip, sp
   1e36e:	f11c 0210 	adds.w	r2, ip, #16
   1e372:	d027      	beq.n	1e3c4 <fs_mount+0x344>
   1e374:	200e      	movs	r0, #14
   1e376:	b122      	cbz	r2, 1e382 <fs_mount+0x302>
   1e378:	2804      	cmp	r0, #4
   1e37a:	dd02      	ble.n	1e382 <fs_mount+0x302>
   1e37c:	4b10      	ldr	r3, [pc, #64]	; (1e3c0 <fs_mount+0x340>)
   1e37e:	f8cc 3014 	str.w	r3, [ip, #20]
   1e382:	2300      	movs	r3, #0
   1e384:	703b      	strb	r3, [r7, #0]
   1e386:	2302      	movs	r3, #2
   1e388:	707b      	strb	r3, [r7, #1]
   1e38a:	b342      	cbz	r2, 1e3de <fs_mount+0x35e>
   1e38c:	2808      	cmp	r0, #8
   1e38e:	dd01      	ble.n	1e394 <fs_mount+0x314>
   1e390:	f8cc 1018 	str.w	r1, [ip, #24]
   1e394:	f10c 031c 	add.w	r3, ip, #28
   1e398:	2100      	movs	r1, #0
   1e39a:	e01e      	b.n	1e3da <fs_mount+0x35a>
   1e39c:	20008890 	.word	0x20008890
   1e3a0:	200088a4 	.word	0x200088a4
   1e3a4:	00033674 	.word	0x00033674
   1e3a8:	00031498 	.word	0x00031498
   1e3ac:	00033694 	.word	0x00033694
   1e3b0:	000336b4 	.word	0x000336b4
   1e3b4:	000336cc 	.word	0x000336cc
   1e3b8:	000336ec 	.word	0x000336ec
   1e3bc:	00033718 	.word	0x00033718
   1e3c0:	00033740 	.word	0x00033740
   1e3c4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1e3c8:	e7d5      	b.n	1e376 <fs_mount+0x2f6>
   1e3ca:	f101 0e08 	add.w	lr, r1, #8
   1e3ce:	44be      	add	lr, r7
   1e3d0:	f81e ec08 	ldrb.w	lr, [lr, #-8]
   1e3d4:	f803 eb01 	strb.w	lr, [r3], #1
   1e3d8:	3101      	adds	r1, #1
   1e3da:	2901      	cmp	r1, #1
   1e3dc:	d9f5      	bls.n	1e3ca <fs_mount+0x34a>
   1e3de:	280d      	cmp	r0, #13
   1e3e0:	dd25      	ble.n	1e42e <fs_mount+0x3ae>
   1e3e2:	230e      	movs	r3, #14
   1e3e4:	b14a      	cbz	r2, 1e3fa <fs_mount+0x37a>
   1e3e6:	2103      	movs	r1, #3
   1e3e8:	7139      	strb	r1, [r7, #4]
   1e3ea:	2100      	movs	r1, #0
   1e3ec:	7179      	strb	r1, [r7, #5]
   1e3ee:	71b9      	strb	r1, [r7, #6]
   1e3f0:	2101      	movs	r1, #1
   1e3f2:	71f9      	strb	r1, [r7, #7]
   1e3f4:	6878      	ldr	r0, [r7, #4]
   1e3f6:	f8cc 0010 	str.w	r0, [ip, #16]
   1e3fa:	2100      	movs	r1, #0
   1e3fc:	f36f 0100 	bfc	r1, #0, #1
   1e400:	f36f 0141 	bfc	r1, #1, #1
   1e404:	f36f 0182 	bfc	r1, #2, #1
   1e408:	f36f 01c5 	bfc	r1, #3, #3
   1e40c:	2002      	movs	r0, #2
   1e40e:	f360 1188 	bfi	r1, r0, #6, #3
   1e412:	f3c3 0309 	ubfx	r3, r3, #0, #10
   1e416:	f363 2152 	bfi	r1, r3, #9, #10
   1e41a:	f36f 41de 	bfc	r1, #19, #12
   1e41e:	f36f 71df 	bfc	r1, #31, #1
   1e422:	2300      	movs	r3, #0
   1e424:	481a      	ldr	r0, [pc, #104]	; (1e490 <fs_mount+0x410>)
   1e426:	f00a fef0 	bl	2920a <z_impl_z_log_msg_static_create>
   1e42a:	46a5      	mov	sp, r4
   1e42c:	e723      	b.n	1e276 <fs_mount+0x1f6>
   1e42e:	f06f 031b 	mvn.w	r3, #27
   1e432:	e7d7      	b.n	1e3e4 <fs_mount+0x364>
		LOG_ERR("fs mount error (%d)", rc);
   1e434:	2008      	movs	r0, #8
   1e436:	f7f5 fc67 	bl	13d08 <z_log_msg_alloc>
   1e43a:	2200      	movs	r2, #0
   1e43c:	f36f 0200 	bfc	r2, #0, #1
   1e440:	f36f 0241 	bfc	r2, #1, #1
   1e444:	f36f 0282 	bfc	r2, #2, #1
   1e448:	f36f 02c5 	bfc	r2, #3, #3
   1e44c:	2301      	movs	r3, #1
   1e44e:	f363 1288 	bfi	r2, r3, #6, #3
   1e452:	230c      	movs	r3, #12
   1e454:	f363 2252 	bfi	r2, r3, #9, #10
   1e458:	f36f 42de 	bfc	r2, #19, #12
   1e45c:	f36f 72df 	bfc	r2, #31, #1
   1e460:	4605      	mov	r5, r0
   1e462:	b170      	cbz	r0, 1e482 <fs_mount+0x402>
   1e464:	f110 0310 	adds.w	r3, r0, #16
   1e468:	d002      	beq.n	1e470 <fs_mount+0x3f0>
   1e46a:	490a      	ldr	r1, [pc, #40]	; (1e494 <fs_mount+0x414>)
   1e46c:	6141      	str	r1, [r0, #20]
   1e46e:	6184      	str	r4, [r0, #24]
   1e470:	b13b      	cbz	r3, 1e482 <fs_mount+0x402>
   1e472:	2303      	movs	r3, #3
   1e474:	713b      	strb	r3, [r7, #4]
   1e476:	2300      	movs	r3, #0
   1e478:	717b      	strb	r3, [r7, #5]
   1e47a:	71bb      	strb	r3, [r7, #6]
   1e47c:	71fb      	strb	r3, [r7, #7]
   1e47e:	6878      	ldr	r0, [r7, #4]
   1e480:	6128      	str	r0, [r5, #16]
   1e482:	2300      	movs	r3, #0
   1e484:	4902      	ldr	r1, [pc, #8]	; (1e490 <fs_mount+0x410>)
   1e486:	4628      	mov	r0, r5
   1e488:	f00a fea7 	bl	291da <z_log_msg_finalize>
		goto mount_err;
   1e48c:	e703      	b.n	1e296 <fs_mount+0x216>
   1e48e:	bf00      	nop
   1e490:	00031498 	.word	0x00031498
   1e494:	00033764 	.word	0x00033764

0001e498 <fs_register>:
{
   1e498:	b538      	push	{r3, r4, r5, lr}
   1e49a:	4604      	mov	r4, r0
   1e49c:	460d      	mov	r5, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   1e49e:	f04f 32ff 	mov.w	r2, #4294967295
   1e4a2:	f04f 33ff 	mov.w	r3, #4294967295
   1e4a6:	480a      	ldr	r0, [pc, #40]	; (1e4d0 <fs_register+0x38>)
   1e4a8:	f007 ff84 	bl	263b4 <z_impl_k_mutex_lock>
	if (fs_type_get(type) != NULL) {
   1e4ac:	4620      	mov	r0, r4
   1e4ae:	f00d fe1f 	bl	2c0f0 <fs_type_get>
   1e4b2:	b948      	cbnz	r0, 1e4c8 <fs_register+0x30>
		rc = registry_add(type, fs);
   1e4b4:	4629      	mov	r1, r5
   1e4b6:	4620      	mov	r0, r4
   1e4b8:	f7ff f978 	bl	1d7ac <registry_add>
   1e4bc:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   1e4be:	4804      	ldr	r0, [pc, #16]	; (1e4d0 <fs_register+0x38>)
   1e4c0:	f007 fffc 	bl	264bc <z_impl_k_mutex_unlock>
}
   1e4c4:	4620      	mov	r0, r4
   1e4c6:	bd38      	pop	{r3, r4, r5, pc}
		rc = -EALREADY;
   1e4c8:	f06f 0477 	mvn.w	r4, #119	; 0x77
   1e4cc:	e7f7      	b.n	1e4be <fs_register+0x26>
   1e4ce:	bf00      	nop
   1e4d0:	20008890 	.word	0x20008890

0001e4d4 <fatfs_init>:
	.mkfs = fatfs_mkfs,
#endif
};

static int fatfs_init(const struct device *dev)
{
   1e4d4:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	return fs_register(FS_FATFS, &fatfs_fs);
   1e4d6:	4902      	ldr	r1, [pc, #8]	; (1e4e0 <fatfs_init+0xc>)
   1e4d8:	2000      	movs	r0, #0
   1e4da:	f7ff ffdd 	bl	1e498 <fs_register>
}
   1e4de:	bd08      	pop	{r3, pc}
   1e4e0:	0003377c 	.word	0x0003377c

0001e4e4 <fatfs_mount>:
{
   1e4e4:	b530      	push	{r4, r5, lr}
   1e4e6:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
   1e4ea:	4604      	mov	r4, r0
	res = f_mount((FATFS *)mountp->fs_data, translate_path(mountp->mnt_point), 1);
   1e4ec:	6905      	ldr	r5, [r0, #16]
   1e4ee:	68c0      	ldr	r0, [r0, #12]
   1e4f0:	f00d fe35 	bl	2c15e <translate_path>
   1e4f4:	4601      	mov	r1, r0
   1e4f6:	2201      	movs	r2, #1
   1e4f8:	4628      	mov	r0, r5
   1e4fa:	f005 fd99 	bl	24030 <f_mount>
	if (res == FR_NO_FILESYSTEM &&
   1e4fe:	280d      	cmp	r0, #13
   1e500:	d00b      	beq.n	1e51a <fatfs_mount+0x36>
	if (res == FR_OK) {
   1e502:	b928      	cbnz	r0, 1e510 <fatfs_mount+0x2c>
		mountp->flags |= FS_MOUNT_FLAG_USE_DISK_ACCESS;
   1e504:	f894 3020 	ldrb.w	r3, [r4, #32]
   1e508:	f043 0308 	orr.w	r3, r3, #8
   1e50c:	f884 3020 	strb.w	r3, [r4, #32]
	return translate_error(res);
   1e510:	f00d fdf6 	bl	2c100 <translate_error>
}
   1e514:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
   1e518:	bd30      	pop	{r4, r5, pc}
	    (mountp->flags & FS_MOUNT_FLAG_READ_ONLY) != 0) {
   1e51a:	f894 3020 	ldrb.w	r3, [r4, #32]
	if (res == FR_NO_FILESYSTEM &&
   1e51e:	f013 0f02 	tst.w	r3, #2
   1e522:	d11c      	bne.n	1e55e <fatfs_mount+0x7a>
	if (res == FR_NO_FILESYSTEM &&
   1e524:	f013 0f01 	tst.w	r3, #1
   1e528:	d1eb      	bne.n	1e502 <fatfs_mount+0x1e>
		MKFS_PARM mkfs_opt = {
   1e52a:	466d      	mov	r5, sp
   1e52c:	4b0d      	ldr	r3, [pc, #52]	; (1e564 <fatfs_mount+0x80>)
   1e52e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1e530:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		res = f_mkfs(translate_path(mountp->mnt_point), &mkfs_opt, work, sizeof(work));
   1e534:	68e0      	ldr	r0, [r4, #12]
   1e536:	f00d fe12 	bl	2c15e <translate_path>
   1e53a:	f44f 7300 	mov.w	r3, #512	; 0x200
   1e53e:	aa04      	add	r2, sp, #16
   1e540:	4629      	mov	r1, r5
   1e542:	f005 ff41 	bl	243c8 <f_mkfs>
		if (res == FR_OK) {
   1e546:	2800      	cmp	r0, #0
   1e548:	d1e2      	bne.n	1e510 <fatfs_mount+0x2c>
			res = f_mount((FATFS *)mountp->fs_data,
   1e54a:	6925      	ldr	r5, [r4, #16]
					translate_path(mountp->mnt_point), 1);
   1e54c:	68e0      	ldr	r0, [r4, #12]
   1e54e:	f00d fe06 	bl	2c15e <translate_path>
   1e552:	4601      	mov	r1, r0
			res = f_mount((FATFS *)mountp->fs_data,
   1e554:	2201      	movs	r2, #1
   1e556:	4628      	mov	r0, r5
   1e558:	f005 fd6a 	bl	24030 <f_mount>
   1e55c:	e7d1      	b.n	1e502 <fatfs_mount+0x1e>
		return -EROFS;
   1e55e:	f06f 001d 	mvn.w	r0, #29
   1e562:	e7d7      	b.n	1e514 <fatfs_mount+0x30>
   1e564:	0003157c 	.word	0x0003157c

0001e568 <fatfs_closedir>:
{
   1e568:	b538      	push	{r3, r4, r5, lr}
   1e56a:	4604      	mov	r4, r0
	res = f_closedir(zdp->dirp);
   1e56c:	6800      	ldr	r0, [r0, #0]
   1e56e:	f011 fa35 	bl	2f9dc <f_closedir>
   1e572:	4605      	mov	r5, r0
	k_mem_slab_free(&fatfs_dirp_pool, &zdp->dirp);
   1e574:	4621      	mov	r1, r4
   1e576:	4803      	ldr	r0, [pc, #12]	; (1e584 <fatfs_closedir+0x1c>)
   1e578:	f011 fe3f 	bl	301fa <k_mem_slab_free>
	return translate_error(res);
   1e57c:	4628      	mov	r0, r5
   1e57e:	f00d fdbf 	bl	2c100 <translate_error>
}
   1e582:	bd38      	pop	{r3, r4, r5, pc}
   1e584:	20000a6c 	.word	0x20000a6c

0001e588 <fatfs_opendir>:
{
   1e588:	b570      	push	{r4, r5, r6, lr}
   1e58a:	b082      	sub	sp, #8
   1e58c:	4604      	mov	r4, r0
   1e58e:	460d      	mov	r5, r1
	if (k_mem_slab_alloc(&fatfs_dirp_pool, &ptr, K_NO_WAIT) == 0) {
   1e590:	2200      	movs	r2, #0
   1e592:	2300      	movs	r3, #0
   1e594:	a901      	add	r1, sp, #4
   1e596:	4811      	ldr	r0, [pc, #68]	; (1e5dc <fatfs_opendir+0x54>)
   1e598:	f007 fdcc 	bl	26134 <k_mem_slab_alloc>
   1e59c:	b9a0      	cbnz	r0, 1e5c8 <fatfs_opendir+0x40>
		(void)memset(ptr, 0, sizeof(DIR));
   1e59e:	222c      	movs	r2, #44	; 0x2c
   1e5a0:	2100      	movs	r1, #0
   1e5a2:	9801      	ldr	r0, [sp, #4]
   1e5a4:	f00b fb34 	bl	29c10 <memset>
		zdp->dirp = ptr;
   1e5a8:	9e01      	ldr	r6, [sp, #4]
   1e5aa:	6026      	str	r6, [r4, #0]
	res = f_opendir(zdp->dirp, translate_path(path));
   1e5ac:	4628      	mov	r0, r5
   1e5ae:	f00d fdd6 	bl	2c15e <translate_path>
   1e5b2:	4601      	mov	r1, r0
   1e5b4:	4630      	mov	r0, r6
   1e5b6:	f011 f9d7 	bl	2f968 <f_opendir>
	if (res != FR_OK) {
   1e5ba:	4605      	mov	r5, r0
   1e5bc:	b938      	cbnz	r0, 1e5ce <fatfs_opendir+0x46>
	return translate_error(res);
   1e5be:	4628      	mov	r0, r5
   1e5c0:	f00d fd9e 	bl	2c100 <translate_error>
}
   1e5c4:	b002      	add	sp, #8
   1e5c6:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   1e5c8:	f06f 000b 	mvn.w	r0, #11
   1e5cc:	e7fa      	b.n	1e5c4 <fatfs_opendir+0x3c>
		k_mem_slab_free(&fatfs_dirp_pool, &ptr);
   1e5ce:	a901      	add	r1, sp, #4
   1e5d0:	4802      	ldr	r0, [pc, #8]	; (1e5dc <fatfs_opendir+0x54>)
   1e5d2:	f011 fe12 	bl	301fa <k_mem_slab_free>
		zdp->dirp = NULL;
   1e5d6:	2300      	movs	r3, #0
   1e5d8:	6023      	str	r3, [r4, #0]
   1e5da:	e7f0      	b.n	1e5be <fatfs_opendir+0x36>
   1e5dc:	20000a6c 	.word	0x20000a6c

0001e5e0 <fatfs_close>:
{
   1e5e0:	b538      	push	{r3, r4, r5, lr}
   1e5e2:	4604      	mov	r4, r0
	res = f_close(zfp->filep);
   1e5e4:	6800      	ldr	r0, [r0, #0]
   1e5e6:	f011 f911 	bl	2f80c <f_close>
   1e5ea:	4605      	mov	r5, r0
	k_mem_slab_free(&fatfs_filep_pool, &zfp->filep);
   1e5ec:	4621      	mov	r1, r4
   1e5ee:	4804      	ldr	r0, [pc, #16]	; (1e600 <fatfs_close+0x20>)
   1e5f0:	f011 fe03 	bl	301fa <k_mem_slab_free>
	zfp->filep = NULL;
   1e5f4:	2300      	movs	r3, #0
   1e5f6:	6023      	str	r3, [r4, #0]
	return translate_error(res);
   1e5f8:	4628      	mov	r0, r5
   1e5fa:	f00d fd81 	bl	2c100 <translate_error>
}
   1e5fe:	bd38      	pop	{r3, r4, r5, pc}
   1e600:	20000a88 	.word	0x20000a88

0001e604 <fatfs_open>:
{
   1e604:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e606:	b083      	sub	sp, #12
   1e608:	4604      	mov	r4, r0
   1e60a:	460d      	mov	r5, r1
   1e60c:	4616      	mov	r6, r2
	if (k_mem_slab_alloc(&fatfs_filep_pool, &ptr, K_NO_WAIT) == 0) {
   1e60e:	2200      	movs	r2, #0
   1e610:	2300      	movs	r3, #0
   1e612:	a901      	add	r1, sp, #4
   1e614:	4813      	ldr	r0, [pc, #76]	; (1e664 <fatfs_open+0x60>)
   1e616:	f007 fd8d 	bl	26134 <k_mem_slab_alloc>
   1e61a:	b9c8      	cbnz	r0, 1e650 <fatfs_open+0x4c>
		(void)memset(ptr, 0, sizeof(FIL));
   1e61c:	2228      	movs	r2, #40	; 0x28
   1e61e:	2100      	movs	r1, #0
   1e620:	9801      	ldr	r0, [sp, #4]
   1e622:	f00b faf5 	bl	29c10 <memset>
		zfp->filep = ptr;
   1e626:	9f01      	ldr	r7, [sp, #4]
   1e628:	6027      	str	r7, [r4, #0]
	fs_mode = translate_flags(mode);
   1e62a:	4630      	mov	r0, r6
   1e62c:	f00d fd99 	bl	2c162 <translate_flags>
   1e630:	4606      	mov	r6, r0
	res = f_open(zfp->filep, translate_path(file_name), fs_mode);
   1e632:	4628      	mov	r0, r5
   1e634:	f00d fd93 	bl	2c15e <translate_path>
   1e638:	4601      	mov	r1, r0
   1e63a:	4632      	mov	r2, r6
   1e63c:	4638      	mov	r0, r7
   1e63e:	f005 fd1f 	bl	24080 <f_open>
	if (res != FR_OK) {
   1e642:	4605      	mov	r5, r0
   1e644:	b938      	cbnz	r0, 1e656 <fatfs_open+0x52>
	return translate_error(res);
   1e646:	4628      	mov	r0, r5
   1e648:	f00d fd5a 	bl	2c100 <translate_error>
}
   1e64c:	b003      	add	sp, #12
   1e64e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOMEM;
   1e650:	f06f 000b 	mvn.w	r0, #11
   1e654:	e7fa      	b.n	1e64c <fatfs_open+0x48>
		k_mem_slab_free(&fatfs_filep_pool, &ptr);
   1e656:	a901      	add	r1, sp, #4
   1e658:	4802      	ldr	r0, [pc, #8]	; (1e664 <fatfs_open+0x60>)
   1e65a:	f011 fdce 	bl	301fa <k_mem_slab_free>
		zfp->filep = NULL;
   1e65e:	2300      	movs	r3, #0
   1e660:	6023      	str	r3, [r4, #0]
   1e662:	e7f0      	b.n	1e646 <fatfs_open+0x42>
   1e664:	20000a88 	.word	0x20000a88

0001e668 <pool_id>:
	return &_net_buf_pool_list[id];
}

static int pool_id(struct net_buf_pool *pool)
{
	return pool - _net_buf_pool_list;
   1e668:	4b03      	ldr	r3, [pc, #12]	; (1e678 <pool_id+0x10>)
   1e66a:	1ac0      	subs	r0, r0, r3
   1e66c:	1080      	asrs	r0, r0, #2
}
   1e66e:	4b03      	ldr	r3, [pc, #12]	; (1e67c <pool_id+0x14>)
   1e670:	fb03 f000 	mul.w	r0, r3, r0
   1e674:	4770      	bx	lr
   1e676:	bf00      	nop
   1e678:	20000b30 	.word	0x20000b30
   1e67c:	ba2e8ba3 	.word	0xba2e8ba3

0001e680 <net_buf_pool_get>:
}
   1e680:	222c      	movs	r2, #44	; 0x2c
   1e682:	4b02      	ldr	r3, [pc, #8]	; (1e68c <net_buf_pool_get+0xc>)
   1e684:	fb02 3000 	mla	r0, r2, r0, r3
   1e688:	4770      	bx	lr
   1e68a:	bf00      	nop
   1e68c:	20000b30 	.word	0x20000b30

0001e690 <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(const struct device *dev)
{
   1e690:	b508      	push	{r3, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   1e692:	4804      	ldr	r0, [pc, #16]	; (1e6a4 <xoshiro128_initialize+0x14>)
   1e694:	f011 fd07 	bl	300a6 <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
   1e698:	b108      	cbz	r0, 1e69e <xoshiro128_initialize+0xe>
		return -ENODEV;
	}
	return 0;
   1e69a:	2000      	movs	r0, #0
}
   1e69c:	bd08      	pop	{r3, pc}
		return -ENODEV;
   1e69e:	f06f 0012 	mvn.w	r0, #18
   1e6a2:	e7fb      	b.n	1e69c <xoshiro128_initialize+0xc>
   1e6a4:	0003115c 	.word	0x0003115c

0001e6a8 <sd_common_init>:
 * This function performs the following portions of SD initialization
 * - CMD0 (SD reset)
 * - CMD8 (SD voltage check)
 */
static int sd_common_init(struct sd_card *card)
{
   1e6a8:	b530      	push	{r4, r5, lr}
   1e6aa:	b083      	sub	sp, #12
   1e6ac:	4605      	mov	r5, r0
	int ret;

	/* Reset card with CMD0 */
	ret = sd_idle(card);
   1e6ae:	f00e f86e 	bl	2c78e <sd_idle>
	if (ret) {
   1e6b2:	b990      	cbnz	r0, 1e6da <sd_common_init+0x32>
		LOG_ERR("Card error on CMD0");
		return ret;
	}
	/* Perform voltage check using SD CMD8 */
	ret = sd_retry(sd_send_interface_condition, card, CONFIG_SD_RETRY_COUNT);
   1e6b4:	220a      	movs	r2, #10
   1e6b6:	4629      	mov	r1, r5
   1e6b8:	4853      	ldr	r0, [pc, #332]	; (1e808 <sd_common_init+0x160>)
   1e6ba:	f00e f854 	bl	2c766 <sd_retry>
   1e6be:	4604      	mov	r4, r0
	if (ret == -ETIMEDOUT) {
   1e6c0:	f110 0f74 	cmn.w	r0, #116	; 0x74
   1e6c4:	d03c      	beq.n	1e740 <sd_common_init+0x98>
		LOG_INF("Card does not support CMD8, assuming legacy card");
		return sd_idle(card);
	} else if (ret) {
   1e6c6:	2800      	cmp	r0, #0
   1e6c8:	d16e      	bne.n	1e7a8 <sd_common_init+0x100>
		LOG_ERR("Card error on CMD 8");
		return ret;
	}
	if (card->host_props.is_spi &&
   1e6ca:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
   1e6ce:	b3a3      	cbz	r3, 1e73a <sd_common_init+0x92>
		IS_ENABLED(CONFIG_SDHC_SUPPORTS_SPI_MODE)) {
		/* Enable CRC for spi commands using CMD59 */
		ret = sd_enable_crc(card);
   1e6d0:	4628      	mov	r0, r5
   1e6d2:	f00e f86f 	bl	2c7b4 <sd_enable_crc>
   1e6d6:	4604      	mov	r4, r0
   1e6d8:	e02f      	b.n	1e73a <sd_common_init+0x92>
   1e6da:	4604      	mov	r4, r0
		LOG_ERR("Card error on CMD0");
   1e6dc:	2006      	movs	r0, #6
   1e6de:	f7f5 fb13 	bl	13d08 <z_log_msg_alloc>
   1e6e2:	2200      	movs	r2, #0
   1e6e4:	f36f 0200 	bfc	r2, #0, #1
   1e6e8:	f36f 0241 	bfc	r2, #1, #1
   1e6ec:	f36f 0282 	bfc	r2, #2, #1
   1e6f0:	f36f 02c5 	bfc	r2, #3, #3
   1e6f4:	2301      	movs	r3, #1
   1e6f6:	f363 1288 	bfi	r2, r3, #6, #3
   1e6fa:	2308      	movs	r3, #8
   1e6fc:	f363 2252 	bfi	r2, r3, #9, #10
   1e700:	f36f 42de 	bfc	r2, #19, #12
   1e704:	f36f 72df 	bfc	r2, #31, #1
   1e708:	4605      	mov	r5, r0
   1e70a:	b188      	cbz	r0, 1e730 <sd_common_init+0x88>
   1e70c:	f110 0310 	adds.w	r3, r0, #16
   1e710:	d001      	beq.n	1e716 <sd_common_init+0x6e>
   1e712:	493e      	ldr	r1, [pc, #248]	; (1e80c <sd_common_init+0x164>)
   1e714:	6141      	str	r1, [r0, #20]
   1e716:	b15b      	cbz	r3, 1e730 <sd_common_init+0x88>
   1e718:	2302      	movs	r3, #2
   1e71a:	f88d 3004 	strb.w	r3, [sp, #4]
   1e71e:	2300      	movs	r3, #0
   1e720:	f88d 3005 	strb.w	r3, [sp, #5]
   1e724:	f88d 3006 	strb.w	r3, [sp, #6]
   1e728:	f88d 3007 	strb.w	r3, [sp, #7]
   1e72c:	9801      	ldr	r0, [sp, #4]
   1e72e:	6128      	str	r0, [r5, #16]
   1e730:	2300      	movs	r3, #0
   1e732:	4937      	ldr	r1, [pc, #220]	; (1e810 <sd_common_init+0x168>)
   1e734:	4628      	mov	r0, r5
   1e736:	f00a fd50 	bl	291da <z_log_msg_finalize>
	}
	return ret;
}
   1e73a:	4620      	mov	r0, r4
   1e73c:	b003      	add	sp, #12
   1e73e:	bd30      	pop	{r4, r5, pc}
		LOG_INF("Card does not support CMD8, assuming legacy card");
   1e740:	2006      	movs	r0, #6
   1e742:	f7f5 fae1 	bl	13d08 <z_log_msg_alloc>
   1e746:	2200      	movs	r2, #0
   1e748:	f36f 0200 	bfc	r2, #0, #1
   1e74c:	f36f 0241 	bfc	r2, #1, #1
   1e750:	f36f 0282 	bfc	r2, #2, #1
   1e754:	f36f 02c5 	bfc	r2, #3, #3
   1e758:	2303      	movs	r3, #3
   1e75a:	f363 1288 	bfi	r2, r3, #6, #3
   1e75e:	2308      	movs	r3, #8
   1e760:	f363 2252 	bfi	r2, r3, #9, #10
   1e764:	f36f 42de 	bfc	r2, #19, #12
   1e768:	f36f 72df 	bfc	r2, #31, #1
   1e76c:	4604      	mov	r4, r0
   1e76e:	b188      	cbz	r0, 1e794 <sd_common_init+0xec>
   1e770:	f110 0310 	adds.w	r3, r0, #16
   1e774:	d001      	beq.n	1e77a <sd_common_init+0xd2>
   1e776:	4927      	ldr	r1, [pc, #156]	; (1e814 <sd_common_init+0x16c>)
   1e778:	6141      	str	r1, [r0, #20]
   1e77a:	b15b      	cbz	r3, 1e794 <sd_common_init+0xec>
   1e77c:	2302      	movs	r3, #2
   1e77e:	f88d 3004 	strb.w	r3, [sp, #4]
   1e782:	2300      	movs	r3, #0
   1e784:	f88d 3005 	strb.w	r3, [sp, #5]
   1e788:	f88d 3006 	strb.w	r3, [sp, #6]
   1e78c:	f88d 3007 	strb.w	r3, [sp, #7]
   1e790:	9801      	ldr	r0, [sp, #4]
   1e792:	6120      	str	r0, [r4, #16]
   1e794:	2300      	movs	r3, #0
   1e796:	491e      	ldr	r1, [pc, #120]	; (1e810 <sd_common_init+0x168>)
   1e798:	4620      	mov	r0, r4
   1e79a:	f00a fd1e 	bl	291da <z_log_msg_finalize>
		return sd_idle(card);
   1e79e:	4628      	mov	r0, r5
   1e7a0:	f00d fff5 	bl	2c78e <sd_idle>
   1e7a4:	4604      	mov	r4, r0
   1e7a6:	e7c8      	b.n	1e73a <sd_common_init+0x92>
		LOG_ERR("Card error on CMD 8");
   1e7a8:	2006      	movs	r0, #6
   1e7aa:	f7f5 faad 	bl	13d08 <z_log_msg_alloc>
   1e7ae:	2200      	movs	r2, #0
   1e7b0:	f36f 0200 	bfc	r2, #0, #1
   1e7b4:	f36f 0241 	bfc	r2, #1, #1
   1e7b8:	f36f 0282 	bfc	r2, #2, #1
   1e7bc:	f36f 02c5 	bfc	r2, #3, #3
   1e7c0:	2301      	movs	r3, #1
   1e7c2:	f363 1288 	bfi	r2, r3, #6, #3
   1e7c6:	2308      	movs	r3, #8
   1e7c8:	f363 2252 	bfi	r2, r3, #9, #10
   1e7cc:	f36f 42de 	bfc	r2, #19, #12
   1e7d0:	f36f 72df 	bfc	r2, #31, #1
   1e7d4:	4605      	mov	r5, r0
   1e7d6:	b188      	cbz	r0, 1e7fc <sd_common_init+0x154>
   1e7d8:	f110 0310 	adds.w	r3, r0, #16
   1e7dc:	d001      	beq.n	1e7e2 <sd_common_init+0x13a>
   1e7de:	490e      	ldr	r1, [pc, #56]	; (1e818 <sd_common_init+0x170>)
   1e7e0:	6141      	str	r1, [r0, #20]
   1e7e2:	b15b      	cbz	r3, 1e7fc <sd_common_init+0x154>
   1e7e4:	2302      	movs	r3, #2
   1e7e6:	f88d 3004 	strb.w	r3, [sp, #4]
   1e7ea:	2300      	movs	r3, #0
   1e7ec:	f88d 3005 	strb.w	r3, [sp, #5]
   1e7f0:	f88d 3006 	strb.w	r3, [sp, #6]
   1e7f4:	f88d 3007 	strb.w	r3, [sp, #7]
   1e7f8:	9801      	ldr	r0, [sp, #4]
   1e7fa:	6128      	str	r0, [r5, #16]
   1e7fc:	2300      	movs	r3, #0
   1e7fe:	4904      	ldr	r1, [pc, #16]	; (1e810 <sd_common_init+0x168>)
   1e800:	4628      	mov	r0, r5
   1e802:	f00a fcea 	bl	291da <z_log_msg_finalize>
		return ret;
   1e806:	e798      	b.n	1e73a <sd_common_init+0x92>
   1e808:	0001e81d 	.word	0x0001e81d
   1e80c:	000337d8 	.word	0x000337d8
   1e810:	000314d8 	.word	0x000314d8
   1e814:	000337ec 	.word	0x000337ec
   1e818:	00033820 	.word	0x00033820

0001e81c <sd_send_interface_condition>:
{
   1e81c:	b510      	push	{r4, lr}
   1e81e:	b08a      	sub	sp, #40	; 0x28
   1e820:	4604      	mov	r4, r0
	struct sdhc_command cmd = {0};
   1e822:	2224      	movs	r2, #36	; 0x24
   1e824:	2100      	movs	r1, #0
   1e826:	a801      	add	r0, sp, #4
   1e828:	f00b f9f2 	bl	29c10 <memset>
	cmd.opcode = SD_SEND_IF_COND;
   1e82c:	2308      	movs	r3, #8
   1e82e:	9301      	str	r3, [sp, #4]
	cmd.arg = SD_IF_COND_VHS_3V3 | SD_IF_COND_CHECK;
   1e830:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
   1e834:	9302      	str	r3, [sp, #8]
	cmd.response_type = (SD_RSP_TYPE_R7 | SD_SPI_RSP_TYPE_R7);
   1e836:	2379      	movs	r3, #121	; 0x79
   1e838:	9307      	str	r3, [sp, #28]
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
   1e83a:	23c8      	movs	r3, #200	; 0xc8
   1e83c:	9309      	str	r3, [sp, #36]	; 0x24
	ret = sdhc_request(card->sdhc, &cmd, NULL);
   1e83e:	2200      	movs	r2, #0
   1e840:	a901      	add	r1, sp, #4
   1e842:	6820      	ldr	r0, [r4, #0]
   1e844:	f00d ff6b 	bl	2c71e <sdhc_request>
	if (ret) {
   1e848:	2800      	cmp	r0, #0
   1e84a:	d144      	bne.n	1e8d6 <sd_send_interface_condition+0xba>
	if (card->host_props.is_spi) {
   1e84c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   1e850:	b173      	cbz	r3, 1e870 <sd_send_interface_condition+0x54>
		resp = cmd.response[1];
   1e852:	9b04      	ldr	r3, [sp, #16]
	if ((resp & 0xFF) != SD_IF_COND_CHECK) {
   1e854:	b2da      	uxtb	r2, r3
   1e856:	2aaa      	cmp	r2, #170	; 0xaa
   1e858:	d10c      	bne.n	1e874 <sd_send_interface_condition+0x58>
	if ((resp & SD_IF_COND_VHS_MASK) != SD_IF_COND_VHS_3V3) {
   1e85a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
   1e85e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   1e862:	d13a      	bne.n	1e8da <sd_send_interface_condition+0xbe>
	card->flags |= SD_SDHC_FLAG;
   1e864:	6f63      	ldr	r3, [r4, #116]	; 0x74
   1e866:	f043 0308 	orr.w	r3, r3, #8
   1e86a:	6763      	str	r3, [r4, #116]	; 0x74
}
   1e86c:	b00a      	add	sp, #40	; 0x28
   1e86e:	bd10      	pop	{r4, pc}
		resp = cmd.response[0];
   1e870:	9b03      	ldr	r3, [sp, #12]
   1e872:	e7ef      	b.n	1e854 <sd_send_interface_condition+0x38>
		LOG_INF("Legacy card detected, no CMD8 support");
   1e874:	2006      	movs	r0, #6
   1e876:	f7f5 fa47 	bl	13d08 <z_log_msg_alloc>
   1e87a:	2200      	movs	r2, #0
   1e87c:	f36f 0200 	bfc	r2, #0, #1
   1e880:	f36f 0241 	bfc	r2, #1, #1
   1e884:	f36f 0282 	bfc	r2, #2, #1
   1e888:	f36f 02c5 	bfc	r2, #3, #3
   1e88c:	2303      	movs	r3, #3
   1e88e:	f363 1288 	bfi	r2, r3, #6, #3
   1e892:	2308      	movs	r3, #8
   1e894:	f363 2252 	bfi	r2, r3, #9, #10
   1e898:	f36f 42de 	bfc	r2, #19, #12
   1e89c:	f36f 72df 	bfc	r2, #31, #1
   1e8a0:	4604      	mov	r4, r0
   1e8a2:	b188      	cbz	r0, 1e8c8 <sd_send_interface_condition+0xac>
   1e8a4:	f110 0310 	adds.w	r3, r0, #16
   1e8a8:	d001      	beq.n	1e8ae <sd_send_interface_condition+0x92>
   1e8aa:	490d      	ldr	r1, [pc, #52]	; (1e8e0 <sd_send_interface_condition+0xc4>)
   1e8ac:	6141      	str	r1, [r0, #20]
   1e8ae:	b15b      	cbz	r3, 1e8c8 <sd_send_interface_condition+0xac>
   1e8b0:	2302      	movs	r3, #2
   1e8b2:	f88d 3000 	strb.w	r3, [sp]
   1e8b6:	2300      	movs	r3, #0
   1e8b8:	f88d 3001 	strb.w	r3, [sp, #1]
   1e8bc:	f88d 3002 	strb.w	r3, [sp, #2]
   1e8c0:	f88d 3003 	strb.w	r3, [sp, #3]
   1e8c4:	9800      	ldr	r0, [sp, #0]
   1e8c6:	6120      	str	r0, [r4, #16]
   1e8c8:	2300      	movs	r3, #0
   1e8ca:	4906      	ldr	r1, [pc, #24]	; (1e8e4 <sd_send_interface_condition+0xc8>)
   1e8cc:	4620      	mov	r0, r4
   1e8ce:	f00a fc84 	bl	291da <z_log_msg_finalize>
		return SD_RETRY;
   1e8d2:	2001      	movs	r0, #1
   1e8d4:	e7ca      	b.n	1e86c <sd_send_interface_condition+0x50>
		return SD_RETRY;
   1e8d6:	2001      	movs	r0, #1
   1e8d8:	e7c8      	b.n	1e86c <sd_send_interface_condition+0x50>
		return -ENOTSUP;
   1e8da:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1e8de:	e7c5      	b.n	1e86c <sd_send_interface_condition+0x50>
   1e8e0:	00033834 	.word	0x00033834
   1e8e4:	000314d8 	.word	0x000314d8

0001e8e8 <sd_init_io>:

static int sd_init_io(struct sd_card *card)
{
   1e8e8:	b570      	push	{r4, r5, r6, lr}
   1e8ea:	b082      	sub	sp, #8
   1e8ec:	4604      	mov	r4, r0
	struct sdhc_io *bus_io = &card->bus_io;
   1e8ee:	1d06      	adds	r6, r0, #4
	int ret;

	/* SD clock should start gated */
	bus_io->clock = 0;
   1e8f0:	2300      	movs	r3, #0
   1e8f2:	6043      	str	r3, [r0, #4]
	/* SPI requires SDHC PUSH PULL, and open drain buses use more power */
	bus_io->bus_mode = SDHC_BUSMODE_PUSHPULL;
   1e8f4:	2302      	movs	r3, #2
   1e8f6:	7203      	strb	r3, [r0, #8]
	bus_io->power_mode = SDHC_POWER_ON;
   1e8f8:	7243      	strb	r3, [r0, #9]
	bus_io->bus_width = SDHC_BUS_WIDTH1BIT;
   1e8fa:	2301      	movs	r3, #1
   1e8fc:	7283      	strb	r3, [r0, #10]
	/* Cards start with legacy timing and 3.3V signalling at power on */
	bus_io->timing = SDHC_TIMING_LEGACY;
   1e8fe:	72c3      	strb	r3, [r0, #11]
	bus_io->signal_voltage = SD_VOL_3_3_V;
   1e900:	7343      	strb	r3, [r0, #13]

	/* Toggle power to card to reset it */
	LOG_DBG("Resetting power to card");
	bus_io->power_mode = SDHC_POWER_OFF;
   1e902:	7243      	strb	r3, [r0, #9]
	ret = sdhc_set_io(card->sdhc, bus_io);
   1e904:	4631      	mov	r1, r6
   1e906:	6800      	ldr	r0, [r0, #0]
   1e908:	f00d ff12 	bl	2c730 <sdhc_set_io>
	if (ret) {
   1e90c:	b9f0      	cbnz	r0, 1e94c <sd_init_io+0x64>
};

/* Delay function for SD subsystem */
static inline void sd_delay(unsigned int millis)
{
	k_msleep(millis);
   1e90e:	6b20      	ldr	r0, [r4, #48]	; 0x30
   1e910:	f00d ff67 	bl	2c7e2 <k_msleep>
		LOG_ERR("Could not disable card power via SDHC");
		return ret;
	}
	sd_delay(card->host_props.power_delay);
	bus_io->power_mode = SDHC_POWER_ON;
   1e914:	2302      	movs	r3, #2
   1e916:	7263      	strb	r3, [r4, #9]
	ret = sdhc_set_io(card->sdhc, bus_io);
   1e918:	4631      	mov	r1, r6
   1e91a:	6820      	ldr	r0, [r4, #0]
   1e91c:	f00d ff08 	bl	2c730 <sdhc_set_io>
	if (ret) {
   1e920:	4605      	mov	r5, r0
   1e922:	2800      	cmp	r0, #0
   1e924:	d143      	bne.n	1e9ae <sd_init_io+0xc6>
		LOG_ERR("Could not disable card power via SDHC");
		return ret;
	}
	/* After reset or init, card voltage should be 3.3V */
	card->card_voltage = SD_VOL_3_3_V;
   1e926:	2301      	movs	r3, #1
   1e928:	7423      	strb	r3, [r4, #16]
	/* Reset card flags */
	card->flags = 0U;
   1e92a:	2300      	movs	r3, #0
   1e92c:	6763      	str	r3, [r4, #116]	; 0x74
   1e92e:	6b20      	ldr	r0, [r4, #48]	; 0x30
   1e930:	f00d ff57 	bl	2c7e2 <k_msleep>
	/* Delay so card can power up */
	sd_delay(card->host_props.power_delay);
	/* Start bus clock */
	bus_io->clock = SDMMC_CLOCK_400KHZ;
   1e934:	4b4e      	ldr	r3, [pc, #312]	; (1ea70 <sd_init_io+0x188>)
   1e936:	6063      	str	r3, [r4, #4]
	ret = sdhc_set_io(card->sdhc, bus_io);
   1e938:	4631      	mov	r1, r6
   1e93a:	6820      	ldr	r0, [r4, #0]
   1e93c:	f00d fef8 	bl	2c730 <sdhc_set_io>
	if (ret) {
   1e940:	4605      	mov	r5, r0
   1e942:	2800      	cmp	r0, #0
   1e944:	d163      	bne.n	1ea0e <sd_init_io+0x126>
		LOG_ERR("Could not start bus clock");
		return ret;
	}
	return 0;
}
   1e946:	4628      	mov	r0, r5
   1e948:	b002      	add	sp, #8
   1e94a:	bd70      	pop	{r4, r5, r6, pc}
   1e94c:	4605      	mov	r5, r0
		LOG_ERR("Could not disable card power via SDHC");
   1e94e:	2006      	movs	r0, #6
   1e950:	f7f5 f9da 	bl	13d08 <z_log_msg_alloc>
   1e954:	2200      	movs	r2, #0
   1e956:	f36f 0200 	bfc	r2, #0, #1
   1e95a:	f36f 0241 	bfc	r2, #1, #1
   1e95e:	f36f 0282 	bfc	r2, #2, #1
   1e962:	f36f 02c5 	bfc	r2, #3, #3
   1e966:	2301      	movs	r3, #1
   1e968:	f363 1288 	bfi	r2, r3, #6, #3
   1e96c:	2308      	movs	r3, #8
   1e96e:	f363 2252 	bfi	r2, r3, #9, #10
   1e972:	f36f 42de 	bfc	r2, #19, #12
   1e976:	f36f 72df 	bfc	r2, #31, #1
   1e97a:	4604      	mov	r4, r0
   1e97c:	b188      	cbz	r0, 1e9a2 <sd_init_io+0xba>
   1e97e:	f110 0310 	adds.w	r3, r0, #16
   1e982:	d001      	beq.n	1e988 <sd_init_io+0xa0>
   1e984:	493b      	ldr	r1, [pc, #236]	; (1ea74 <sd_init_io+0x18c>)
   1e986:	6141      	str	r1, [r0, #20]
   1e988:	b15b      	cbz	r3, 1e9a2 <sd_init_io+0xba>
   1e98a:	2302      	movs	r3, #2
   1e98c:	f88d 3004 	strb.w	r3, [sp, #4]
   1e990:	2300      	movs	r3, #0
   1e992:	f88d 3005 	strb.w	r3, [sp, #5]
   1e996:	f88d 3006 	strb.w	r3, [sp, #6]
   1e99a:	f88d 3007 	strb.w	r3, [sp, #7]
   1e99e:	9801      	ldr	r0, [sp, #4]
   1e9a0:	6120      	str	r0, [r4, #16]
   1e9a2:	2300      	movs	r3, #0
   1e9a4:	4934      	ldr	r1, [pc, #208]	; (1ea78 <sd_init_io+0x190>)
   1e9a6:	4620      	mov	r0, r4
   1e9a8:	f00a fc17 	bl	291da <z_log_msg_finalize>
		return ret;
   1e9ac:	e7cb      	b.n	1e946 <sd_init_io+0x5e>
		LOG_ERR("Could not disable card power via SDHC");
   1e9ae:	2006      	movs	r0, #6
   1e9b0:	f7f5 f9aa 	bl	13d08 <z_log_msg_alloc>
   1e9b4:	2200      	movs	r2, #0
   1e9b6:	f36f 0200 	bfc	r2, #0, #1
   1e9ba:	f36f 0241 	bfc	r2, #1, #1
   1e9be:	f36f 0282 	bfc	r2, #2, #1
   1e9c2:	f36f 02c5 	bfc	r2, #3, #3
   1e9c6:	2301      	movs	r3, #1
   1e9c8:	f363 1288 	bfi	r2, r3, #6, #3
   1e9cc:	2308      	movs	r3, #8
   1e9ce:	f363 2252 	bfi	r2, r3, #9, #10
   1e9d2:	f36f 42de 	bfc	r2, #19, #12
   1e9d6:	f36f 72df 	bfc	r2, #31, #1
   1e9da:	4604      	mov	r4, r0
   1e9dc:	b188      	cbz	r0, 1ea02 <sd_init_io+0x11a>
   1e9de:	f110 0310 	adds.w	r3, r0, #16
   1e9e2:	d001      	beq.n	1e9e8 <sd_init_io+0x100>
   1e9e4:	4923      	ldr	r1, [pc, #140]	; (1ea74 <sd_init_io+0x18c>)
   1e9e6:	6141      	str	r1, [r0, #20]
   1e9e8:	b15b      	cbz	r3, 1ea02 <sd_init_io+0x11a>
   1e9ea:	2302      	movs	r3, #2
   1e9ec:	f88d 3004 	strb.w	r3, [sp, #4]
   1e9f0:	2300      	movs	r3, #0
   1e9f2:	f88d 3005 	strb.w	r3, [sp, #5]
   1e9f6:	f88d 3006 	strb.w	r3, [sp, #6]
   1e9fa:	f88d 3007 	strb.w	r3, [sp, #7]
   1e9fe:	9801      	ldr	r0, [sp, #4]
   1ea00:	6120      	str	r0, [r4, #16]
   1ea02:	2300      	movs	r3, #0
   1ea04:	491c      	ldr	r1, [pc, #112]	; (1ea78 <sd_init_io+0x190>)
   1ea06:	4620      	mov	r0, r4
   1ea08:	f00a fbe7 	bl	291da <z_log_msg_finalize>
		return ret;
   1ea0c:	e79b      	b.n	1e946 <sd_init_io+0x5e>
		LOG_ERR("Could not start bus clock");
   1ea0e:	2006      	movs	r0, #6
   1ea10:	f7f5 f97a 	bl	13d08 <z_log_msg_alloc>
   1ea14:	2200      	movs	r2, #0
   1ea16:	f36f 0200 	bfc	r2, #0, #1
   1ea1a:	f36f 0241 	bfc	r2, #1, #1
   1ea1e:	f36f 0282 	bfc	r2, #2, #1
   1ea22:	f36f 02c5 	bfc	r2, #3, #3
   1ea26:	2301      	movs	r3, #1
   1ea28:	f363 1288 	bfi	r2, r3, #6, #3
   1ea2c:	2308      	movs	r3, #8
   1ea2e:	f363 2252 	bfi	r2, r3, #9, #10
   1ea32:	f36f 42de 	bfc	r2, #19, #12
   1ea36:	f36f 72df 	bfc	r2, #31, #1
   1ea3a:	4604      	mov	r4, r0
   1ea3c:	b188      	cbz	r0, 1ea62 <sd_init_io+0x17a>
   1ea3e:	f110 0310 	adds.w	r3, r0, #16
   1ea42:	d001      	beq.n	1ea48 <sd_init_io+0x160>
   1ea44:	490d      	ldr	r1, [pc, #52]	; (1ea7c <sd_init_io+0x194>)
   1ea46:	6141      	str	r1, [r0, #20]
   1ea48:	b15b      	cbz	r3, 1ea62 <sd_init_io+0x17a>
   1ea4a:	2302      	movs	r3, #2
   1ea4c:	f88d 3004 	strb.w	r3, [sp, #4]
   1ea50:	2300      	movs	r3, #0
   1ea52:	f88d 3005 	strb.w	r3, [sp, #5]
   1ea56:	f88d 3006 	strb.w	r3, [sp, #6]
   1ea5a:	f88d 3007 	strb.w	r3, [sp, #7]
   1ea5e:	9801      	ldr	r0, [sp, #4]
   1ea60:	6120      	str	r0, [r4, #16]
   1ea62:	2300      	movs	r3, #0
   1ea64:	4904      	ldr	r1, [pc, #16]	; (1ea78 <sd_init_io+0x190>)
   1ea66:	4620      	mov	r0, r4
   1ea68:	f00a fbb7 	bl	291da <z_log_msg_finalize>
		return ret;
   1ea6c:	e76b      	b.n	1e946 <sd_init_io+0x5e>
   1ea6e:	bf00      	nop
   1ea70:	00061a80 	.word	0x00061a80
   1ea74:	0003385c 	.word	0x0003385c
   1ea78:	000314d8 	.word	0x000314d8
   1ea7c:	00033884 	.word	0x00033884

0001ea80 <sd_check_card_type>:
/*
 * Check SD card type
 * Uses SDIO OCR response to determine what type of card is present.
 */
static int sd_check_card_type(struct sd_card *card)
{
   1ea80:	b530      	push	{r4, r5, lr}
   1ea82:	b083      	sub	sp, #12
   1ea84:	4605      	mov	r5, r0
	int ret;

	/* Test if the card response to CMD5 (only SDIO cards will) */
	/* Note that CMD5 can take many retries */
	ret = sd_test_sdio(card);
   1ea86:	f00d fec2 	bl	2c80e <sd_test_sdio>
   1ea8a:	4604      	mov	r4, r0
	if ((ret == SD_NOT_SDIO) && card->type == CARD_SDMMC) {
   1ea8c:	2802      	cmp	r0, #2
   1ea8e:	d037      	beq.n	1eb00 <sd_check_card_type+0x80>
		LOG_INF("Detected SD card");
		return 0;
	} else if ((ret == 0) && card->type == CARD_SDIO) {
   1ea90:	2c00      	cmp	r4, #0
   1ea92:	d16a      	bne.n	1eb6a <sd_check_card_type+0xea>
   1ea94:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
   1ea98:	2b01      	cmp	r3, #1
   1ea9a:	d166      	bne.n	1eb6a <sd_check_card_type+0xea>
		LOG_INF("Detected SDIO card");
   1ea9c:	2006      	movs	r0, #6
   1ea9e:	f7f5 f933 	bl	13d08 <z_log_msg_alloc>
   1eaa2:	2200      	movs	r2, #0
   1eaa4:	f36f 0200 	bfc	r2, #0, #1
   1eaa8:	f36f 0241 	bfc	r2, #1, #1
   1eaac:	f36f 0282 	bfc	r2, #2, #1
   1eab0:	f36f 02c5 	bfc	r2, #3, #3
   1eab4:	2303      	movs	r3, #3
   1eab6:	f363 1288 	bfi	r2, r3, #6, #3
   1eaba:	2308      	movs	r3, #8
   1eabc:	f363 2252 	bfi	r2, r3, #9, #10
   1eac0:	f36f 42de 	bfc	r2, #19, #12
   1eac4:	f36f 72df 	bfc	r2, #31, #1
   1eac8:	4605      	mov	r5, r0
   1eaca:	b188      	cbz	r0, 1eaf0 <sd_check_card_type+0x70>
   1eacc:	f110 0310 	adds.w	r3, r0, #16
   1ead0:	d001      	beq.n	1ead6 <sd_check_card_type+0x56>
   1ead2:	493f      	ldr	r1, [pc, #252]	; (1ebd0 <sd_check_card_type+0x150>)
   1ead4:	6141      	str	r1, [r0, #20]
   1ead6:	b15b      	cbz	r3, 1eaf0 <sd_check_card_type+0x70>
   1ead8:	2302      	movs	r3, #2
   1eada:	f88d 3004 	strb.w	r3, [sp, #4]
   1eade:	2300      	movs	r3, #0
   1eae0:	f88d 3005 	strb.w	r3, [sp, #5]
   1eae4:	f88d 3006 	strb.w	r3, [sp, #6]
   1eae8:	f88d 3007 	strb.w	r3, [sp, #7]
   1eaec:	9801      	ldr	r0, [sp, #4]
   1eaee:	6128      	str	r0, [r5, #16]
   1eaf0:	2300      	movs	r3, #0
   1eaf2:	4938      	ldr	r1, [pc, #224]	; (1ebd4 <sd_check_card_type+0x154>)
   1eaf4:	4628      	mov	r0, r5
   1eaf6:	f00a fb70 	bl	291da <z_log_msg_finalize>
		return 0;
	}
	LOG_ERR("No usable card type was found");
	return -ENOTSUP;
}
   1eafa:	4620      	mov	r0, r4
   1eafc:	b003      	add	sp, #12
   1eafe:	bd30      	pop	{r4, r5, pc}
	if ((ret == SD_NOT_SDIO) && card->type == CARD_SDMMC) {
   1eb00:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
   1eb04:	2b00      	cmp	r3, #0
   1eb06:	d1c3      	bne.n	1ea90 <sd_check_card_type+0x10>
		LOG_INF("Detected SD card");
   1eb08:	2006      	movs	r0, #6
   1eb0a:	f7f5 f8fd 	bl	13d08 <z_log_msg_alloc>
   1eb0e:	2200      	movs	r2, #0
   1eb10:	f36f 0200 	bfc	r2, #0, #1
   1eb14:	f36f 0241 	bfc	r2, #1, #1
   1eb18:	f36f 0282 	bfc	r2, #2, #1
   1eb1c:	f36f 02c5 	bfc	r2, #3, #3
   1eb20:	2303      	movs	r3, #3
   1eb22:	f363 1288 	bfi	r2, r3, #6, #3
   1eb26:	2308      	movs	r3, #8
   1eb28:	f363 2252 	bfi	r2, r3, #9, #10
   1eb2c:	f36f 42de 	bfc	r2, #19, #12
   1eb30:	f36f 72df 	bfc	r2, #31, #1
   1eb34:	4604      	mov	r4, r0
   1eb36:	b188      	cbz	r0, 1eb5c <sd_check_card_type+0xdc>
   1eb38:	f110 0310 	adds.w	r3, r0, #16
   1eb3c:	d001      	beq.n	1eb42 <sd_check_card_type+0xc2>
   1eb3e:	4926      	ldr	r1, [pc, #152]	; (1ebd8 <sd_check_card_type+0x158>)
   1eb40:	6141      	str	r1, [r0, #20]
   1eb42:	b15b      	cbz	r3, 1eb5c <sd_check_card_type+0xdc>
   1eb44:	2302      	movs	r3, #2
   1eb46:	f88d 3004 	strb.w	r3, [sp, #4]
   1eb4a:	2300      	movs	r3, #0
   1eb4c:	f88d 3005 	strb.w	r3, [sp, #5]
   1eb50:	f88d 3006 	strb.w	r3, [sp, #6]
   1eb54:	f88d 3007 	strb.w	r3, [sp, #7]
   1eb58:	9801      	ldr	r0, [sp, #4]
   1eb5a:	6120      	str	r0, [r4, #16]
   1eb5c:	2300      	movs	r3, #0
   1eb5e:	491d      	ldr	r1, [pc, #116]	; (1ebd4 <sd_check_card_type+0x154>)
   1eb60:	4620      	mov	r0, r4
   1eb62:	f00a fb3a 	bl	291da <z_log_msg_finalize>
		return 0;
   1eb66:	2400      	movs	r4, #0
   1eb68:	e7c7      	b.n	1eafa <sd_check_card_type+0x7a>
	LOG_ERR("No usable card type was found");
   1eb6a:	2006      	movs	r0, #6
   1eb6c:	f7f5 f8cc 	bl	13d08 <z_log_msg_alloc>
   1eb70:	2200      	movs	r2, #0
   1eb72:	f36f 0200 	bfc	r2, #0, #1
   1eb76:	f36f 0241 	bfc	r2, #1, #1
   1eb7a:	f36f 0282 	bfc	r2, #2, #1
   1eb7e:	f36f 02c5 	bfc	r2, #3, #3
   1eb82:	2301      	movs	r3, #1
   1eb84:	f363 1288 	bfi	r2, r3, #6, #3
   1eb88:	2308      	movs	r3, #8
   1eb8a:	f363 2252 	bfi	r2, r3, #9, #10
   1eb8e:	f36f 42de 	bfc	r2, #19, #12
   1eb92:	f36f 72df 	bfc	r2, #31, #1
   1eb96:	4604      	mov	r4, r0
   1eb98:	b188      	cbz	r0, 1ebbe <sd_check_card_type+0x13e>
   1eb9a:	f110 0310 	adds.w	r3, r0, #16
   1eb9e:	d001      	beq.n	1eba4 <sd_check_card_type+0x124>
   1eba0:	490e      	ldr	r1, [pc, #56]	; (1ebdc <sd_check_card_type+0x15c>)
   1eba2:	6141      	str	r1, [r0, #20]
   1eba4:	b15b      	cbz	r3, 1ebbe <sd_check_card_type+0x13e>
   1eba6:	2302      	movs	r3, #2
   1eba8:	f88d 3004 	strb.w	r3, [sp, #4]
   1ebac:	2300      	movs	r3, #0
   1ebae:	f88d 3005 	strb.w	r3, [sp, #5]
   1ebb2:	f88d 3006 	strb.w	r3, [sp, #6]
   1ebb6:	f88d 3007 	strb.w	r3, [sp, #7]
   1ebba:	9801      	ldr	r0, [sp, #4]
   1ebbc:	6120      	str	r0, [r4, #16]
   1ebbe:	2300      	movs	r3, #0
   1ebc0:	4904      	ldr	r1, [pc, #16]	; (1ebd4 <sd_check_card_type+0x154>)
   1ebc2:	4620      	mov	r0, r4
   1ebc4:	f00a fb09 	bl	291da <z_log_msg_finalize>
	return -ENOTSUP;
   1ebc8:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1ebcc:	e795      	b.n	1eafa <sd_check_card_type+0x7a>
   1ebce:	bf00      	nop
   1ebd0:	000338b4 	.word	0x000338b4
   1ebd4:	000314d8 	.word	0x000314d8
   1ebd8:	000338a0 	.word	0x000338a0
   1ebdc:	000338c8 	.word	0x000338c8

0001ebe0 <sd_command_init>:

/*
 * Performs init flow described in section 3.6 of SD specification.
 */
static int sd_command_init(struct sd_card *card)
{
   1ebe0:	b530      	push	{r4, r5, lr}
   1ebe2:	b083      	sub	sp, #12
   1ebe4:	4604      	mov	r4, r0
   1ebe6:	2001      	movs	r0, #1
   1ebe8:	f00d fdfb 	bl	2c7e2 <k_msleep>
	sd_delay(1);
	/*
	 * Start card initialization and identification
	 * flow described in section 3.6 of SD specification
	 */
	ret = sd_common_init(card);
   1ebec:	4620      	mov	r0, r4
   1ebee:	f7ff fd5b 	bl	1e6a8 <sd_common_init>
	if (ret) {
   1ebf2:	4605      	mov	r5, r0
   1ebf4:	b110      	cbz	r0, 1ebfc <sd_command_init+0x1c>
	if (ret) {
		LOG_ERR("Card init failed");
		return ret;
	}
	return 0;
}
   1ebf6:	4628      	mov	r0, r5
   1ebf8:	b003      	add	sp, #12
   1ebfa:	bd30      	pop	{r4, r5, pc}
	ret = sd_check_card_type(card);
   1ebfc:	4620      	mov	r0, r4
   1ebfe:	f7ff ff3f 	bl	1ea80 <sd_check_card_type>
	if (ret) {
   1ec02:	4605      	mov	r5, r0
   1ec04:	2800      	cmp	r0, #0
   1ec06:	d138      	bne.n	1ec7a <sd_command_init+0x9a>
	if (card->type == CARD_SDMMC) {
   1ec08:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
   1ec0c:	2b00      	cmp	r3, #0
   1ec0e:	d066      	beq.n	1ecde <sd_command_init+0xfe>
	} else if (card->type == CARD_SDIO) {
   1ec10:	2b01      	cmp	r3, #1
   1ec12:	f000 809e 	beq.w	1ed52 <sd_command_init+0x172>
	if (ret) {
   1ec16:	2d00      	cmp	r5, #0
   1ec18:	d0ed      	beq.n	1ebf6 <sd_command_init+0x16>
		LOG_ERR("Card init failed");
   1ec1a:	2006      	movs	r0, #6
   1ec1c:	f7f5 f874 	bl	13d08 <z_log_msg_alloc>
   1ec20:	2200      	movs	r2, #0
   1ec22:	f36f 0200 	bfc	r2, #0, #1
   1ec26:	f36f 0241 	bfc	r2, #1, #1
   1ec2a:	f36f 0282 	bfc	r2, #2, #1
   1ec2e:	f36f 02c5 	bfc	r2, #3, #3
   1ec32:	2301      	movs	r3, #1
   1ec34:	f363 1288 	bfi	r2, r3, #6, #3
   1ec38:	2308      	movs	r3, #8
   1ec3a:	f363 2252 	bfi	r2, r3, #9, #10
   1ec3e:	f36f 42de 	bfc	r2, #19, #12
   1ec42:	f36f 72df 	bfc	r2, #31, #1
   1ec46:	4604      	mov	r4, r0
   1ec48:	b188      	cbz	r0, 1ec6e <sd_command_init+0x8e>
   1ec4a:	f110 0310 	adds.w	r3, r0, #16
   1ec4e:	d001      	beq.n	1ec54 <sd_command_init+0x74>
   1ec50:	4959      	ldr	r1, [pc, #356]	; (1edb8 <sd_command_init+0x1d8>)
   1ec52:	6141      	str	r1, [r0, #20]
   1ec54:	b15b      	cbz	r3, 1ec6e <sd_command_init+0x8e>
   1ec56:	2302      	movs	r3, #2
   1ec58:	f88d 3004 	strb.w	r3, [sp, #4]
   1ec5c:	2300      	movs	r3, #0
   1ec5e:	f88d 3005 	strb.w	r3, [sp, #5]
   1ec62:	f88d 3006 	strb.w	r3, [sp, #6]
   1ec66:	f88d 3007 	strb.w	r3, [sp, #7]
   1ec6a:	9801      	ldr	r0, [sp, #4]
   1ec6c:	6120      	str	r0, [r4, #16]
   1ec6e:	2300      	movs	r3, #0
   1ec70:	4952      	ldr	r1, [pc, #328]	; (1edbc <sd_command_init+0x1dc>)
   1ec72:	4620      	mov	r0, r4
   1ec74:	f00a fab1 	bl	291da <z_log_msg_finalize>
		return ret;
   1ec78:	e7bd      	b.n	1ebf6 <sd_command_init+0x16>
		LOG_ERR("Unusable card");
   1ec7a:	2006      	movs	r0, #6
   1ec7c:	f7f5 f844 	bl	13d08 <z_log_msg_alloc>
   1ec80:	2200      	movs	r2, #0
   1ec82:	f36f 0200 	bfc	r2, #0, #1
   1ec86:	f36f 0241 	bfc	r2, #1, #1
   1ec8a:	f36f 0282 	bfc	r2, #2, #1
   1ec8e:	f36f 02c5 	bfc	r2, #3, #3
   1ec92:	2301      	movs	r3, #1
   1ec94:	f363 1288 	bfi	r2, r3, #6, #3
   1ec98:	2308      	movs	r3, #8
   1ec9a:	f363 2252 	bfi	r2, r3, #9, #10
   1ec9e:	f36f 42de 	bfc	r2, #19, #12
   1eca2:	f36f 72df 	bfc	r2, #31, #1
   1eca6:	4604      	mov	r4, r0
   1eca8:	b188      	cbz	r0, 1ecce <sd_command_init+0xee>
   1ecaa:	f110 0310 	adds.w	r3, r0, #16
   1ecae:	d001      	beq.n	1ecb4 <sd_command_init+0xd4>
   1ecb0:	4943      	ldr	r1, [pc, #268]	; (1edc0 <sd_command_init+0x1e0>)
   1ecb2:	6141      	str	r1, [r0, #20]
   1ecb4:	b15b      	cbz	r3, 1ecce <sd_command_init+0xee>
   1ecb6:	2302      	movs	r3, #2
   1ecb8:	f88d 3004 	strb.w	r3, [sp, #4]
   1ecbc:	2300      	movs	r3, #0
   1ecbe:	f88d 3005 	strb.w	r3, [sp, #5]
   1ecc2:	f88d 3006 	strb.w	r3, [sp, #6]
   1ecc6:	f88d 3007 	strb.w	r3, [sp, #7]
   1ecca:	9801      	ldr	r0, [sp, #4]
   1eccc:	6120      	str	r0, [r4, #16]
   1ecce:	2300      	movs	r3, #0
   1ecd0:	493a      	ldr	r1, [pc, #232]	; (1edbc <sd_command_init+0x1dc>)
   1ecd2:	4620      	mov	r0, r4
   1ecd4:	f00a fa81 	bl	291da <z_log_msg_finalize>
		return -ENOTSUP;
   1ecd8:	f06f 0585 	mvn.w	r5, #133	; 0x85
   1ecdc:	e78b      	b.n	1ebf6 <sd_command_init+0x16>
		ret = sd_common_init(card);
   1ecde:	4620      	mov	r0, r4
   1ece0:	f7ff fce2 	bl	1e6a8 <sd_common_init>
		if (ret) {
   1ece4:	4605      	mov	r5, r0
   1ece6:	b920      	cbnz	r0, 1ecf2 <sd_command_init+0x112>
		ret = sdmmc_card_init(card);
   1ece8:	4620      	mov	r0, r4
   1ecea:	f000 fdcf 	bl	1f88c <sdmmc_card_init>
   1ecee:	4605      	mov	r5, r0
   1ecf0:	e791      	b.n	1ec16 <sd_command_init+0x36>
			LOG_ERR("Init after CMD5 failed");
   1ecf2:	2006      	movs	r0, #6
   1ecf4:	f7f5 f808 	bl	13d08 <z_log_msg_alloc>
   1ecf8:	2200      	movs	r2, #0
   1ecfa:	f36f 0200 	bfc	r2, #0, #1
   1ecfe:	f36f 0241 	bfc	r2, #1, #1
   1ed02:	f36f 0282 	bfc	r2, #2, #1
   1ed06:	f36f 02c5 	bfc	r2, #3, #3
   1ed0a:	2301      	movs	r3, #1
   1ed0c:	f363 1288 	bfi	r2, r3, #6, #3
   1ed10:	2308      	movs	r3, #8
   1ed12:	f363 2252 	bfi	r2, r3, #9, #10
   1ed16:	f36f 42de 	bfc	r2, #19, #12
   1ed1a:	f36f 72df 	bfc	r2, #31, #1
   1ed1e:	4604      	mov	r4, r0
   1ed20:	b188      	cbz	r0, 1ed46 <sd_command_init+0x166>
   1ed22:	f110 0310 	adds.w	r3, r0, #16
   1ed26:	d001      	beq.n	1ed2c <sd_command_init+0x14c>
   1ed28:	4926      	ldr	r1, [pc, #152]	; (1edc4 <sd_command_init+0x1e4>)
   1ed2a:	6141      	str	r1, [r0, #20]
   1ed2c:	b15b      	cbz	r3, 1ed46 <sd_command_init+0x166>
   1ed2e:	2302      	movs	r3, #2
   1ed30:	f88d 3004 	strb.w	r3, [sp, #4]
   1ed34:	2300      	movs	r3, #0
   1ed36:	f88d 3005 	strb.w	r3, [sp, #5]
   1ed3a:	f88d 3006 	strb.w	r3, [sp, #6]
   1ed3e:	f88d 3007 	strb.w	r3, [sp, #7]
   1ed42:	9801      	ldr	r0, [sp, #4]
   1ed44:	6120      	str	r0, [r4, #16]
   1ed46:	2300      	movs	r3, #0
   1ed48:	491c      	ldr	r1, [pc, #112]	; (1edbc <sd_command_init+0x1dc>)
   1ed4a:	4620      	mov	r0, r4
   1ed4c:	f00a fa45 	bl	291da <z_log_msg_finalize>
			return ret;
   1ed50:	e751      	b.n	1ebf6 <sd_command_init+0x16>
		LOG_ERR("SDIO cards not currently supported");
   1ed52:	2006      	movs	r0, #6
   1ed54:	f7f4 ffd8 	bl	13d08 <z_log_msg_alloc>
   1ed58:	2200      	movs	r2, #0
   1ed5a:	f36f 0200 	bfc	r2, #0, #1
   1ed5e:	f36f 0241 	bfc	r2, #1, #1
   1ed62:	f36f 0282 	bfc	r2, #2, #1
   1ed66:	f36f 02c5 	bfc	r2, #3, #3
   1ed6a:	2301      	movs	r3, #1
   1ed6c:	f363 1288 	bfi	r2, r3, #6, #3
   1ed70:	2308      	movs	r3, #8
   1ed72:	f363 2252 	bfi	r2, r3, #9, #10
   1ed76:	f36f 42de 	bfc	r2, #19, #12
   1ed7a:	f36f 72df 	bfc	r2, #31, #1
   1ed7e:	4604      	mov	r4, r0
   1ed80:	b188      	cbz	r0, 1eda6 <sd_command_init+0x1c6>
   1ed82:	f110 0310 	adds.w	r3, r0, #16
   1ed86:	d001      	beq.n	1ed8c <sd_command_init+0x1ac>
   1ed88:	490f      	ldr	r1, [pc, #60]	; (1edc8 <sd_command_init+0x1e8>)
   1ed8a:	6141      	str	r1, [r0, #20]
   1ed8c:	b15b      	cbz	r3, 1eda6 <sd_command_init+0x1c6>
   1ed8e:	2302      	movs	r3, #2
   1ed90:	f88d 3004 	strb.w	r3, [sp, #4]
   1ed94:	2300      	movs	r3, #0
   1ed96:	f88d 3005 	strb.w	r3, [sp, #5]
   1ed9a:	f88d 3006 	strb.w	r3, [sp, #6]
   1ed9e:	f88d 3007 	strb.w	r3, [sp, #7]
   1eda2:	9801      	ldr	r0, [sp, #4]
   1eda4:	6120      	str	r0, [r4, #16]
   1eda6:	2300      	movs	r3, #0
   1eda8:	4904      	ldr	r1, [pc, #16]	; (1edbc <sd_command_init+0x1dc>)
   1edaa:	4620      	mov	r0, r4
   1edac:	f00a fa15 	bl	291da <z_log_msg_finalize>
		return -ENOTSUP;
   1edb0:	f06f 0585 	mvn.w	r5, #133	; 0x85
   1edb4:	e71f      	b.n	1ebf6 <sd_command_init+0x16>
   1edb6:	bf00      	nop
   1edb8:	00033934 	.word	0x00033934
   1edbc:	000314d8 	.word	0x000314d8
   1edc0:	000338e8 	.word	0x000338e8
   1edc4:	000338f8 	.word	0x000338f8
   1edc8:	00033910 	.word	0x00033910

0001edcc <sd_init>:

/* Initializes SD/SDIO card */
int sd_init(const struct device *sdhc_dev, struct sd_card *card)
{
   1edcc:	b570      	push	{r4, r5, r6, lr}
   1edce:	b082      	sub	sp, #8
	int ret;

	if (!sdhc_dev) {
   1edd0:	2800      	cmp	r0, #0
   1edd2:	f000 8110 	beq.w	1eff6 <sd_init+0x22a>
   1edd6:	460c      	mov	r4, r1
		return -ENODEV;
	}
	card->sdhc = sdhc_dev;
   1edd8:	f841 0b28 	str.w	r0, [r1], #40
	ret = sdhc_get_host_props(card->sdhc, &card->host_props);
   1eddc:	f00d fcba 	bl	2c754 <sdhc_get_host_props>
	if (ret) {
   1ede0:	4605      	mov	r5, r0
   1ede2:	bb38      	cbnz	r0, 1ee34 <sd_init+0x68>
		LOG_ERR("SD host controller returned invalid properties");
		return ret;
	}

	/* init and lock card mutex */
	ret = k_mutex_init(&card->lock);
   1ede4:	f104 0614 	add.w	r6, r4, #20
	return z_impl_k_mutex_init(mutex);
   1ede8:	4630      	mov	r0, r6
   1edea:	f011 fa9d 	bl	30328 <z_impl_k_mutex_init>
	if (ret) {
   1edee:	4605      	mov	r5, r0
   1edf0:	2800      	cmp	r0, #0
   1edf2:	d14e      	bne.n	1ee92 <sd_init+0xc6>
	return z_impl_k_mutex_lock(mutex, timeout);
   1edf4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   1edf8:	2300      	movs	r3, #0
   1edfa:	4630      	mov	r0, r6
   1edfc:	f007 fada 	bl	263b4 <z_impl_k_mutex_lock>
		LOG_DBG("Could not init card mutex");
		return ret;
	}
	ret = k_mutex_lock(&card->lock, K_MSEC(CONFIG_SD_INIT_TIMEOUT));
	if (ret) {
   1ee00:	4605      	mov	r5, r0
   1ee02:	2800      	cmp	r0, #0
   1ee04:	d148      	bne.n	1ee98 <sd_init+0xcc>
		LOG_ERR("Timeout while trying to acquire card mutex");
		return ret;
	}

	/* Initialize SDHC IO with defaults */
	ret = sd_init_io(card);
   1ee06:	4620      	mov	r0, r4
   1ee08:	f7ff fd6e 	bl	1e8e8 <sd_init_io>
	if (ret) {
   1ee0c:	4605      	mov	r5, r0
   1ee0e:	2800      	cmp	r0, #0
   1ee10:	d172      	bne.n	1eef8 <sd_init+0x12c>
	 * - re init host I/O (will also toggle power to the SD card)
	 * - retry initialization once more
	 * If initialization then fails, the sd_init routine will assume the
	 * card is inaccessible
	 */
	ret = sd_command_init(card);
   1ee12:	4620      	mov	r0, r4
   1ee14:	f7ff fee4 	bl	1ebe0 <sd_command_init>
   1ee18:	4605      	mov	r5, r0
	if (ret == SD_RESTART) {
   1ee1a:	2803      	cmp	r0, #3
   1ee1c:	d070      	beq.n	1ef00 <sd_init+0x134>
		if (ret) {
			LOG_ERR("Failed to init SD card after I/O reset");
			k_mutex_unlock(&card->lock);
			return ret;
		}
	} else if (ret != 0) {
   1ee1e:	2800      	cmp	r0, #0
   1ee20:	f040 80e2 	bne.w	1efe8 <sd_init+0x21c>
		k_mutex_unlock(&card->lock);
		card->status = CARD_ERROR;
		return ret;
	}
	/* Card initialization succeeded. */
	card->status = CARD_INITIALIZED;
   1ee24:	2302      	movs	r3, #2
   1ee26:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
	return z_impl_k_mutex_unlock(mutex);
   1ee2a:	4630      	mov	r0, r6
   1ee2c:	f007 fb46 	bl	264bc <z_impl_k_mutex_unlock>
   1ee30:	4605      	mov	r5, r0
	/* Unlock card mutex */
	ret = k_mutex_unlock(&card->lock);
	if (ret) {
   1ee32:	e02e      	b.n	1ee92 <sd_init+0xc6>
		LOG_ERR("SD host controller returned invalid properties");
   1ee34:	2006      	movs	r0, #6
   1ee36:	f7f4 ff67 	bl	13d08 <z_log_msg_alloc>
   1ee3a:	2200      	movs	r2, #0
   1ee3c:	f36f 0200 	bfc	r2, #0, #1
   1ee40:	f36f 0241 	bfc	r2, #1, #1
   1ee44:	f36f 0282 	bfc	r2, #2, #1
   1ee48:	f36f 02c5 	bfc	r2, #3, #3
   1ee4c:	2301      	movs	r3, #1
   1ee4e:	f363 1288 	bfi	r2, r3, #6, #3
   1ee52:	2308      	movs	r3, #8
   1ee54:	f363 2252 	bfi	r2, r3, #9, #10
   1ee58:	f36f 42de 	bfc	r2, #19, #12
   1ee5c:	f36f 72df 	bfc	r2, #31, #1
   1ee60:	4604      	mov	r4, r0
   1ee62:	b188      	cbz	r0, 1ee88 <sd_init+0xbc>
   1ee64:	f110 0310 	adds.w	r3, r0, #16
   1ee68:	d001      	beq.n	1ee6e <sd_init+0xa2>
   1ee6a:	4964      	ldr	r1, [pc, #400]	; (1effc <sd_init+0x230>)
   1ee6c:	6141      	str	r1, [r0, #20]
   1ee6e:	b15b      	cbz	r3, 1ee88 <sd_init+0xbc>
   1ee70:	2302      	movs	r3, #2
   1ee72:	f88d 3004 	strb.w	r3, [sp, #4]
   1ee76:	2300      	movs	r3, #0
   1ee78:	f88d 3005 	strb.w	r3, [sp, #5]
   1ee7c:	f88d 3006 	strb.w	r3, [sp, #6]
   1ee80:	f88d 3007 	strb.w	r3, [sp, #7]
   1ee84:	9801      	ldr	r0, [sp, #4]
   1ee86:	6120      	str	r0, [r4, #16]
   1ee88:	2300      	movs	r3, #0
   1ee8a:	495d      	ldr	r1, [pc, #372]	; (1f000 <sd_init+0x234>)
   1ee8c:	4620      	mov	r0, r4
   1ee8e:	f00a f9a4 	bl	291da <z_log_msg_finalize>
		LOG_DBG("Could not unlock card mutex");
		return ret;
	}
	return ret;
}
   1ee92:	4628      	mov	r0, r5
   1ee94:	b002      	add	sp, #8
   1ee96:	bd70      	pop	{r4, r5, r6, pc}
		LOG_ERR("Timeout while trying to acquire card mutex");
   1ee98:	2006      	movs	r0, #6
   1ee9a:	f7f4 ff35 	bl	13d08 <z_log_msg_alloc>
   1ee9e:	2200      	movs	r2, #0
   1eea0:	f36f 0200 	bfc	r2, #0, #1
   1eea4:	f36f 0241 	bfc	r2, #1, #1
   1eea8:	f36f 0282 	bfc	r2, #2, #1
   1eeac:	f36f 02c5 	bfc	r2, #3, #3
   1eeb0:	2301      	movs	r3, #1
   1eeb2:	f363 1288 	bfi	r2, r3, #6, #3
   1eeb6:	2308      	movs	r3, #8
   1eeb8:	f363 2252 	bfi	r2, r3, #9, #10
   1eebc:	f36f 42de 	bfc	r2, #19, #12
   1eec0:	f36f 72df 	bfc	r2, #31, #1
   1eec4:	4604      	mov	r4, r0
   1eec6:	b188      	cbz	r0, 1eeec <sd_init+0x120>
   1eec8:	f110 0310 	adds.w	r3, r0, #16
   1eecc:	d001      	beq.n	1eed2 <sd_init+0x106>
   1eece:	494d      	ldr	r1, [pc, #308]	; (1f004 <sd_init+0x238>)
   1eed0:	6141      	str	r1, [r0, #20]
   1eed2:	b15b      	cbz	r3, 1eeec <sd_init+0x120>
   1eed4:	2302      	movs	r3, #2
   1eed6:	f88d 3004 	strb.w	r3, [sp, #4]
   1eeda:	2300      	movs	r3, #0
   1eedc:	f88d 3005 	strb.w	r3, [sp, #5]
   1eee0:	f88d 3006 	strb.w	r3, [sp, #6]
   1eee4:	f88d 3007 	strb.w	r3, [sp, #7]
   1eee8:	9801      	ldr	r0, [sp, #4]
   1eeea:	6120      	str	r0, [r4, #16]
   1eeec:	2300      	movs	r3, #0
   1eeee:	4944      	ldr	r1, [pc, #272]	; (1f000 <sd_init+0x234>)
   1eef0:	4620      	mov	r0, r4
   1eef2:	f00a f972 	bl	291da <z_log_msg_finalize>
		return ret;
   1eef6:	e7cc      	b.n	1ee92 <sd_init+0xc6>
   1eef8:	4630      	mov	r0, r6
   1eefa:	f007 fadf 	bl	264bc <z_impl_k_mutex_unlock>
		return ret;
   1eefe:	e7c8      	b.n	1ee92 <sd_init+0xc6>
		card->status = CARD_ERROR;
   1ef00:	2301      	movs	r3, #1
   1ef02:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
		ret = sd_init_io(card);
   1ef06:	4620      	mov	r0, r4
   1ef08:	f7ff fcee 	bl	1e8e8 <sd_init_io>
		if (ret) {
   1ef0c:	4605      	mov	r5, r0
   1ef0e:	bbc0      	cbnz	r0, 1ef82 <sd_init+0x1b6>
		ret = sd_command_init(card);
   1ef10:	4620      	mov	r0, r4
   1ef12:	f7ff fe65 	bl	1ebe0 <sd_command_init>
		if (ret) {
   1ef16:	4605      	mov	r5, r0
   1ef18:	2800      	cmp	r0, #0
   1ef1a:	d083      	beq.n	1ee24 <sd_init+0x58>
			LOG_ERR("Failed to init SD card after I/O reset");
   1ef1c:	2006      	movs	r0, #6
   1ef1e:	f7f4 fef3 	bl	13d08 <z_log_msg_alloc>
   1ef22:	2200      	movs	r2, #0
   1ef24:	f36f 0200 	bfc	r2, #0, #1
   1ef28:	f36f 0241 	bfc	r2, #1, #1
   1ef2c:	f36f 0282 	bfc	r2, #2, #1
   1ef30:	f36f 02c5 	bfc	r2, #3, #3
   1ef34:	2301      	movs	r3, #1
   1ef36:	f363 1288 	bfi	r2, r3, #6, #3
   1ef3a:	2308      	movs	r3, #8
   1ef3c:	f363 2252 	bfi	r2, r3, #9, #10
   1ef40:	f36f 42de 	bfc	r2, #19, #12
   1ef44:	f36f 72df 	bfc	r2, #31, #1
   1ef48:	4604      	mov	r4, r0
   1ef4a:	b188      	cbz	r0, 1ef70 <sd_init+0x1a4>
   1ef4c:	f110 0310 	adds.w	r3, r0, #16
   1ef50:	d001      	beq.n	1ef56 <sd_init+0x18a>
   1ef52:	492d      	ldr	r1, [pc, #180]	; (1f008 <sd_init+0x23c>)
   1ef54:	6141      	str	r1, [r0, #20]
   1ef56:	b15b      	cbz	r3, 1ef70 <sd_init+0x1a4>
   1ef58:	2302      	movs	r3, #2
   1ef5a:	f88d 3004 	strb.w	r3, [sp, #4]
   1ef5e:	2300      	movs	r3, #0
   1ef60:	f88d 3005 	strb.w	r3, [sp, #5]
   1ef64:	f88d 3006 	strb.w	r3, [sp, #6]
   1ef68:	f88d 3007 	strb.w	r3, [sp, #7]
   1ef6c:	9801      	ldr	r0, [sp, #4]
   1ef6e:	6120      	str	r0, [r4, #16]
   1ef70:	2300      	movs	r3, #0
   1ef72:	4923      	ldr	r1, [pc, #140]	; (1f000 <sd_init+0x234>)
   1ef74:	4620      	mov	r0, r4
   1ef76:	f00a f930 	bl	291da <z_log_msg_finalize>
   1ef7a:	4630      	mov	r0, r6
   1ef7c:	f007 fa9e 	bl	264bc <z_impl_k_mutex_unlock>
			return ret;
   1ef80:	e787      	b.n	1ee92 <sd_init+0xc6>
			LOG_ERR("Failed to reset SDHC I/O");
   1ef82:	2006      	movs	r0, #6
   1ef84:	f7f4 fec0 	bl	13d08 <z_log_msg_alloc>
   1ef88:	2200      	movs	r2, #0
   1ef8a:	f36f 0200 	bfc	r2, #0, #1
   1ef8e:	f36f 0241 	bfc	r2, #1, #1
   1ef92:	f36f 0282 	bfc	r2, #2, #1
   1ef96:	f36f 02c5 	bfc	r2, #3, #3
   1ef9a:	2301      	movs	r3, #1
   1ef9c:	f363 1288 	bfi	r2, r3, #6, #3
   1efa0:	2308      	movs	r3, #8
   1efa2:	f363 2252 	bfi	r2, r3, #9, #10
   1efa6:	f36f 42de 	bfc	r2, #19, #12
   1efaa:	f36f 72df 	bfc	r2, #31, #1
   1efae:	4604      	mov	r4, r0
   1efb0:	b188      	cbz	r0, 1efd6 <sd_init+0x20a>
   1efb2:	f110 0310 	adds.w	r3, r0, #16
   1efb6:	d001      	beq.n	1efbc <sd_init+0x1f0>
   1efb8:	4914      	ldr	r1, [pc, #80]	; (1f00c <sd_init+0x240>)
   1efba:	6141      	str	r1, [r0, #20]
   1efbc:	b15b      	cbz	r3, 1efd6 <sd_init+0x20a>
   1efbe:	2302      	movs	r3, #2
   1efc0:	f88d 3004 	strb.w	r3, [sp, #4]
   1efc4:	2300      	movs	r3, #0
   1efc6:	f88d 3005 	strb.w	r3, [sp, #5]
   1efca:	f88d 3006 	strb.w	r3, [sp, #6]
   1efce:	f88d 3007 	strb.w	r3, [sp, #7]
   1efd2:	9801      	ldr	r0, [sp, #4]
   1efd4:	6120      	str	r0, [r4, #16]
   1efd6:	2300      	movs	r3, #0
   1efd8:	4909      	ldr	r1, [pc, #36]	; (1f000 <sd_init+0x234>)
   1efda:	4620      	mov	r0, r4
   1efdc:	f00a f8fd 	bl	291da <z_log_msg_finalize>
   1efe0:	4630      	mov	r0, r6
   1efe2:	f007 fa6b 	bl	264bc <z_impl_k_mutex_unlock>
			return ret;
   1efe6:	e754      	b.n	1ee92 <sd_init+0xc6>
   1efe8:	4630      	mov	r0, r6
   1efea:	f007 fa67 	bl	264bc <z_impl_k_mutex_unlock>
		card->status = CARD_ERROR;
   1efee:	2301      	movs	r3, #1
   1eff0:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
		return ret;
   1eff4:	e74d      	b.n	1ee92 <sd_init+0xc6>
		return -ENODEV;
   1eff6:	f06f 0512 	mvn.w	r5, #18
   1effa:	e74a      	b.n	1ee92 <sd_init+0xc6>
   1effc:	00033948 	.word	0x00033948
   1f000:	000314d8 	.word	0x000314d8
   1f004:	00033978 	.word	0x00033978
   1f008:	000339c0 	.word	0x000339c0
   1f00c:	000339a4 	.word	0x000339a4

0001f010 <sdmmc_app_command>:
	return 0;
}

/* Helper to send SD app command */
static int sdmmc_app_command(struct sd_card *card, int relative_card_address)
{
   1f010:	b530      	push	{r4, r5, lr}
   1f012:	b08b      	sub	sp, #44	; 0x2c
   1f014:	4605      	mov	r5, r0
   1f016:	460c      	mov	r4, r1
	struct sdhc_command cmd = {0};
   1f018:	2224      	movs	r2, #36	; 0x24
   1f01a:	2100      	movs	r1, #0
   1f01c:	a801      	add	r0, sp, #4
   1f01e:	f00a fdf7 	bl	29c10 <memset>
	int ret;

	cmd.opcode = SD_APP_CMD;
   1f022:	2337      	movs	r3, #55	; 0x37
   1f024:	9301      	str	r3, [sp, #4]
	cmd.arg = relative_card_address << 16U;
   1f026:	0424      	lsls	r4, r4, #16
   1f028:	9402      	str	r4, [sp, #8]
	cmd.response_type = (SD_RSP_TYPE_R1 | SD_SPI_RSP_TYPE_R1);
   1f02a:	2311      	movs	r3, #17
   1f02c:	9307      	str	r3, [sp, #28]
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
   1f02e:	23c8      	movs	r3, #200	; 0xc8
   1f030:	9309      	str	r3, [sp, #36]	; 0x24
	ret = sdhc_request(card->sdhc, &cmd, NULL);
   1f032:	2200      	movs	r2, #0
   1f034:	a901      	add	r1, sp, #4
   1f036:	6828      	ldr	r0, [r5, #0]
   1f038:	f00d fc2b 	bl	2c892 <sdhc_request>
	if (ret) {
   1f03c:	2800      	cmp	r0, #0
   1f03e:	d145      	bne.n	1f0cc <sdmmc_app_command+0xbc>
	if (cmd->response_type == SD_RSP_TYPE_R1) {
   1f040:	9b07      	ldr	r3, [sp, #28]
   1f042:	2b01      	cmp	r3, #1
   1f044:	d00a      	beq.n	1f05c <sdmmc_app_command+0x4c>
		LOG_WRN("SD app command failed with R1 response of 0x%X",
			cmd.response[0]);
		return -EIO;
	}
	/* Check application command flag to determine if card is ready for APP CMD */
	if ((!card->host_props.is_spi) && !(cmd.response[0U] & SD_R1_APP_CMD)) {
   1f046:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
   1f04a:	2b00      	cmp	r3, #0
   1f04c:	d13f      	bne.n	1f0ce <sdmmc_app_command+0xbe>
   1f04e:	9b03      	ldr	r3, [sp, #12]
   1f050:	f013 0f20 	tst.w	r3, #32
   1f054:	d13b      	bne.n	1f0ce <sdmmc_app_command+0xbe>
		/* Command succeeded, but card not ready for app command. No APP CMD support */
		return -ENOTSUP;
   1f056:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1f05a:	e038      	b.n	1f0ce <sdmmc_app_command+0xbe>
		return (cmd->response[0U] & SD_R1_ERR_FLAGS);
   1f05c:	9c03      	ldr	r4, [sp, #12]
   1f05e:	4b1d      	ldr	r3, [pc, #116]	; (1f0d4 <sdmmc_app_command+0xc4>)
   1f060:	4023      	ands	r3, r4
	if (ret) {
   1f062:	2b00      	cmp	r3, #0
   1f064:	d0ef      	beq.n	1f046 <sdmmc_app_command+0x36>
		LOG_WRN("SD app command failed with R1 response of 0x%X",
   1f066:	2008      	movs	r0, #8
   1f068:	f7f4 fe4e 	bl	13d08 <z_log_msg_alloc>
   1f06c:	2200      	movs	r2, #0
   1f06e:	f36f 0200 	bfc	r2, #0, #1
   1f072:	f36f 0241 	bfc	r2, #1, #1
   1f076:	f36f 0282 	bfc	r2, #2, #1
   1f07a:	f36f 02c5 	bfc	r2, #3, #3
   1f07e:	2302      	movs	r3, #2
   1f080:	f363 1288 	bfi	r2, r3, #6, #3
   1f084:	230c      	movs	r3, #12
   1f086:	f363 2252 	bfi	r2, r3, #9, #10
   1f08a:	f36f 42de 	bfc	r2, #19, #12
   1f08e:	f36f 72df 	bfc	r2, #31, #1
   1f092:	4605      	mov	r5, r0
   1f094:	b190      	cbz	r0, 1f0bc <sdmmc_app_command+0xac>
   1f096:	f110 0310 	adds.w	r3, r0, #16
   1f09a:	d002      	beq.n	1f0a2 <sdmmc_app_command+0x92>
   1f09c:	490e      	ldr	r1, [pc, #56]	; (1f0d8 <sdmmc_app_command+0xc8>)
   1f09e:	6141      	str	r1, [r0, #20]
   1f0a0:	6184      	str	r4, [r0, #24]
   1f0a2:	b15b      	cbz	r3, 1f0bc <sdmmc_app_command+0xac>
   1f0a4:	2303      	movs	r3, #3
   1f0a6:	f88d 3000 	strb.w	r3, [sp]
   1f0aa:	2300      	movs	r3, #0
   1f0ac:	f88d 3001 	strb.w	r3, [sp, #1]
   1f0b0:	f88d 3002 	strb.w	r3, [sp, #2]
   1f0b4:	f88d 3003 	strb.w	r3, [sp, #3]
   1f0b8:	9800      	ldr	r0, [sp, #0]
   1f0ba:	6128      	str	r0, [r5, #16]
   1f0bc:	2300      	movs	r3, #0
   1f0be:	4907      	ldr	r1, [pc, #28]	; (1f0dc <sdmmc_app_command+0xcc>)
   1f0c0:	4628      	mov	r0, r5
   1f0c2:	f00a f88a 	bl	291da <z_log_msg_finalize>
		return -EIO;
   1f0c6:	f06f 0004 	mvn.w	r0, #4
   1f0ca:	e000      	b.n	1f0ce <sdmmc_app_command+0xbe>
		return SD_RETRY;
   1f0cc:	2001      	movs	r0, #1
	}
	return 0;
}
   1f0ce:	b00b      	add	sp, #44	; 0x2c
   1f0d0:	bd30      	pop	{r4, r5, pc}
   1f0d2:	bf00      	nop
   1f0d4:	fdf98008 	.word	0xfdf98008
   1f0d8:	000339ec 	.word	0x000339ec
   1f0dc:	000314d8 	.word	0x000314d8

0001f0e0 <sdmmc_set_bus_width>:
/*
 * Sets bus width of host and card, following section 3.4 of
 * SD host controller specification
 */
static int sdmmc_set_bus_width(struct sd_card *card, enum sdhc_bus_width width)
{
   1f0e0:	b530      	push	{r4, r5, lr}
   1f0e2:	b08b      	sub	sp, #44	; 0x2c
   1f0e4:	4604      	mov	r4, r0
   1f0e6:	460d      	mov	r5, r1
	struct sdhc_command cmd = {0};
   1f0e8:	2224      	movs	r2, #36	; 0x24
   1f0ea:	2100      	movs	r1, #0
   1f0ec:	a801      	add	r0, sp, #4
   1f0ee:	f00a fd8f 	bl	29c10 <memset>
	/*
	 * The specification strictly requires card interrupts to be masked, but
	 * Linux does not do so, so we won't either.
	 */
	/* Send ACMD6 to change bus width */
	ret = sdmmc_app_command(card, card->relative_addr);
   1f0f2:	6e21      	ldr	r1, [r4, #96]	; 0x60
   1f0f4:	4620      	mov	r0, r4
   1f0f6:	f7ff ff8b 	bl	1f010 <sdmmc_app_command>
	if (ret) {
   1f0fa:	4603      	mov	r3, r0
   1f0fc:	b958      	cbnz	r0, 1f116 <sdmmc_set_bus_width+0x36>
		LOG_DBG("SD app command failed for ACMD6");
		return ret;
	}
	cmd.opcode = SD_APP_SET_BUS_WIDTH;
   1f0fe:	2306      	movs	r3, #6
   1f100:	9301      	str	r3, [sp, #4]
	cmd.response_type = SD_RSP_TYPE_R1;
   1f102:	2301      	movs	r3, #1
   1f104:	9307      	str	r3, [sp, #28]
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
   1f106:	23c8      	movs	r3, #200	; 0xc8
   1f108:	9309      	str	r3, [sp, #36]	; 0x24
	switch (width) {
   1f10a:	2d01      	cmp	r5, #1
   1f10c:	d006      	beq.n	1f11c <sdmmc_set_bus_width+0x3c>
   1f10e:	2d04      	cmp	r5, #4
   1f110:	d019      	beq.n	1f146 <sdmmc_set_bus_width+0x66>
   1f112:	f06f 0385 	mvn.w	r3, #133	; 0x85
	ret = sdhc_set_io(card->sdhc, &card->bus_io);
	if (ret) {
		LOG_DBG("Could not change host bus width");
	}
	return ret;
}
   1f116:	4618      	mov	r0, r3
   1f118:	b00b      	add	sp, #44	; 0x2c
   1f11a:	bd30      	pop	{r4, r5, pc}
		cmd.arg = 0U;
   1f11c:	2300      	movs	r3, #0
   1f11e:	9302      	str	r3, [sp, #8]
	ret = sdhc_request(card->sdhc, &cmd, NULL);
   1f120:	2200      	movs	r2, #0
   1f122:	a901      	add	r1, sp, #4
   1f124:	6820      	ldr	r0, [r4, #0]
   1f126:	f00d fbb4 	bl	2c892 <sdhc_request>
	if (ret) {
   1f12a:	4603      	mov	r3, r0
   1f12c:	2800      	cmp	r0, #0
   1f12e:	d1f2      	bne.n	1f116 <sdmmc_set_bus_width+0x36>
	if (cmd->response_type == SD_RSP_TYPE_R1) {
   1f130:	9b07      	ldr	r3, [sp, #28]
   1f132:	2b01      	cmp	r3, #1
   1f134:	d00a      	beq.n	1f14c <sdmmc_set_bus_width+0x6c>
	card->bus_io.bus_width = width;
   1f136:	72a5      	strb	r5, [r4, #10]
	ret = sdhc_set_io(card->sdhc, &card->bus_io);
   1f138:	4621      	mov	r1, r4
   1f13a:	f851 0b04 	ldr.w	r0, [r1], #4
   1f13e:	f00d fbb1 	bl	2c8a4 <sdhc_set_io>
   1f142:	4603      	mov	r3, r0
	if (ret) {
   1f144:	e7e7      	b.n	1f116 <sdmmc_set_bus_width+0x36>
		cmd.arg = 2U;
   1f146:	2302      	movs	r3, #2
   1f148:	9302      	str	r3, [sp, #8]
		break;
   1f14a:	e7e9      	b.n	1f120 <sdmmc_set_bus_width+0x40>
		return (cmd->response[0U] & SD_R1_ERR_FLAGS);
   1f14c:	4b02      	ldr	r3, [pc, #8]	; (1f158 <sdmmc_set_bus_width+0x78>)
   1f14e:	9a03      	ldr	r2, [sp, #12]
   1f150:	4013      	ands	r3, r2
	if (ret) {
   1f152:	2b00      	cmp	r3, #0
   1f154:	d0ef      	beq.n	1f136 <sdmmc_set_bus_width+0x56>
   1f156:	e7de      	b.n	1f116 <sdmmc_set_bus_width+0x36>
   1f158:	fdf98008 	.word	0xfdf98008

0001f15c <sdmmc_query_written>:
/*
 * Sends ACMD22 (number of written blocks) to see how many blocks were written
 * to a card
 */
static int sdmmc_query_written(struct sd_card *card, uint32_t *num_written)
{
   1f15c:	b570      	push	{r4, r5, r6, lr}
   1f15e:	b090      	sub	sp, #64	; 0x40
   1f160:	4604      	mov	r4, r0
   1f162:	460d      	mov	r5, r1
	int ret;
	struct sdhc_command cmd = {0};
   1f164:	2224      	movs	r2, #36	; 0x24
   1f166:	2100      	movs	r1, #0
   1f168:	a807      	add	r0, sp, #28
   1f16a:	f00a fd51 	bl	29c10 <memset>
	struct sdhc_data data = {0};
   1f16e:	2300      	movs	r3, #0
   1f170:	9301      	str	r3, [sp, #4]
   1f172:	9302      	str	r3, [sp, #8]
   1f174:	9303      	str	r3, [sp, #12]
   1f176:	9304      	str	r3, [sp, #16]
   1f178:	9305      	str	r3, [sp, #20]
   1f17a:	9306      	str	r3, [sp, #24]
	uint32_t *blocks = (uint32_t *)card->card_buffer;

	ret = sdmmc_app_command(card, card->relative_addr);
   1f17c:	6e21      	ldr	r1, [r4, #96]	; 0x60
   1f17e:	4620      	mov	r0, r4
   1f180:	f7ff ff46 	bl	1f010 <sdmmc_app_command>
	if (ret) {
   1f184:	b108      	cbz	r0, 1f18a <sdmmc_query_written+0x2e>
	}

	/* Decode blocks */
	*num_written = sys_be32_to_cpu(blocks[0]);
	return 0;
}
   1f186:	b010      	add	sp, #64	; 0x40
   1f188:	bd70      	pop	{r4, r5, r6, pc}
   1f18a:	f104 0678 	add.w	r6, r4, #120	; 0x78
	cmd.opcode = SD_APP_SEND_NUM_WRITTEN_BLK;
   1f18e:	2316      	movs	r3, #22
   1f190:	9307      	str	r3, [sp, #28]
	cmd.arg = 0;
   1f192:	2300      	movs	r3, #0
   1f194:	9308      	str	r3, [sp, #32]
	cmd.response_type = (SD_RSP_TYPE_R1 | SD_SPI_RSP_TYPE_R1);
   1f196:	2311      	movs	r3, #17
   1f198:	930d      	str	r3, [sp, #52]	; 0x34
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
   1f19a:	23c8      	movs	r3, #200	; 0xc8
   1f19c:	930f      	str	r3, [sp, #60]	; 0x3c
	data.block_size = 4U;
   1f19e:	2304      	movs	r3, #4
   1f1a0:	9302      	str	r3, [sp, #8]
	data.blocks = 1U;
   1f1a2:	2301      	movs	r3, #1
   1f1a4:	9303      	str	r3, [sp, #12]
	data.data = blocks;
   1f1a6:	9605      	str	r6, [sp, #20]
	data.timeout_ms = CONFIG_SD_DATA_TIMEOUT;
   1f1a8:	f242 7310 	movw	r3, #10000	; 0x2710
   1f1ac:	9306      	str	r3, [sp, #24]
	ret = sdhc_request(card->sdhc, &cmd, &data);
   1f1ae:	aa01      	add	r2, sp, #4
   1f1b0:	a907      	add	r1, sp, #28
   1f1b2:	6820      	ldr	r0, [r4, #0]
   1f1b4:	f00d fb6d 	bl	2c892 <sdhc_request>
	if (ret) {
   1f1b8:	2800      	cmp	r0, #0
   1f1ba:	d1e4      	bne.n	1f186 <sdmmc_query_written+0x2a>
	if (cmd->response_type == SD_RSP_TYPE_R1) {
   1f1bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1f1be:	2b01      	cmp	r3, #1
   1f1c0:	d00d      	beq.n	1f1de <sdmmc_query_written+0x82>
	*num_written = sys_be32_to_cpu(blocks[0]);
   1f1c2:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   1f1c4:	0a13      	lsrs	r3, r2, #8
   1f1c6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   1f1ca:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   1f1ce:	0211      	lsls	r1, r2, #8
   1f1d0:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   1f1d4:	430b      	orrs	r3, r1
   1f1d6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   1f1da:	602b      	str	r3, [r5, #0]
	return 0;
   1f1dc:	e7d3      	b.n	1f186 <sdmmc_query_written+0x2a>
		return (cmd->response[0U] & SD_R1_ERR_FLAGS);
   1f1de:	4b03      	ldr	r3, [pc, #12]	; (1f1ec <sdmmc_query_written+0x90>)
   1f1e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1f1e2:	4013      	ands	r3, r2
	if (ret) {
   1f1e4:	2b00      	cmp	r3, #0
   1f1e6:	d0ec      	beq.n	1f1c2 <sdmmc_query_written+0x66>
		return (cmd->response[0U] & SD_R1_ERR_FLAGS);
   1f1e8:	4618      	mov	r0, r3
   1f1ea:	e7cc      	b.n	1f186 <sdmmc_query_written+0x2a>
   1f1ec:	fdf98008 	.word	0xfdf98008

0001f1f0 <sdmmc_set_bus_speed>:
{
   1f1f0:	b570      	push	{r4, r5, r6, lr}
   1f1f2:	b084      	sub	sp, #16
   1f1f4:	4604      	mov	r4, r0
	uint8_t *status = card->card_buffer;
   1f1f6:	f100 0278 	add.w	r2, r0, #120	; 0x78
	switch (card->card_speed) {
   1f1fa:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
   1f1fe:	2b04      	cmp	r3, #4
   1f200:	f200 8095 	bhi.w	1f32e <sdmmc_set_bus_speed+0x13e>
   1f204:	e8df f003 	tbb	[pc, r3]
   1f208:	034c5054 	.word	0x034c5054
   1f20c:	48          	.byte	0x48
   1f20d:	00          	.byte	0x00
		card->switch_caps.uhs_max_dtr = SD_CLOCK_208MHZ;
   1f20e:	4949      	ldr	r1, [pc, #292]	; (1f334 <sdmmc_set_bus_speed+0x144>)
   1f210:	6541      	str	r1, [r0, #84]	; 0x54
		timing = SDHC_TIMING_SDR104;
   1f212:	2606      	movs	r6, #6
	ret = sdmmc_switch(card, SD_SWITCH_SET, SD_GRP_TIMING_MODE,
   1f214:	9200      	str	r2, [sp, #0]
   1f216:	2200      	movs	r2, #0
   1f218:	2101      	movs	r1, #1
   1f21a:	4620      	mov	r0, r4
   1f21c:	f00d fd42 	bl	2cca4 <sdmmc_switch>
	if (ret) {
   1f220:	4605      	mov	r5, r0
   1f222:	bbb0      	cbnz	r0, 1f292 <sdmmc_set_bus_speed+0xa2>
	if ((status[16] & 0xF) != card->card_speed) {
   1f224:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
   1f228:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
   1f22c:	f003 030f 	and.w	r3, r3, #15
   1f230:	429a      	cmp	r2, r3
   1f232:	d041      	beq.n	1f2b8 <sdmmc_set_bus_speed+0xc8>
		LOG_WRN("Card did not accept new speed");
   1f234:	2006      	movs	r0, #6
   1f236:	f7f4 fd67 	bl	13d08 <z_log_msg_alloc>
   1f23a:	2200      	movs	r2, #0
   1f23c:	f36f 0200 	bfc	r2, #0, #1
   1f240:	f36f 0241 	bfc	r2, #1, #1
   1f244:	f36f 0282 	bfc	r2, #2, #1
   1f248:	f36f 02c5 	bfc	r2, #3, #3
   1f24c:	2302      	movs	r3, #2
   1f24e:	f363 1288 	bfi	r2, r3, #6, #3
   1f252:	2308      	movs	r3, #8
   1f254:	f363 2252 	bfi	r2, r3, #9, #10
   1f258:	f36f 42de 	bfc	r2, #19, #12
   1f25c:	f36f 72df 	bfc	r2, #31, #1
   1f260:	4604      	mov	r4, r0
   1f262:	b188      	cbz	r0, 1f288 <sdmmc_set_bus_speed+0x98>
   1f264:	f110 0310 	adds.w	r3, r0, #16
   1f268:	d001      	beq.n	1f26e <sdmmc_set_bus_speed+0x7e>
   1f26a:	4933      	ldr	r1, [pc, #204]	; (1f338 <sdmmc_set_bus_speed+0x148>)
   1f26c:	6141      	str	r1, [r0, #20]
   1f26e:	b15b      	cbz	r3, 1f288 <sdmmc_set_bus_speed+0x98>
   1f270:	2302      	movs	r3, #2
   1f272:	f88d 300c 	strb.w	r3, [sp, #12]
   1f276:	2300      	movs	r3, #0
   1f278:	f88d 300d 	strb.w	r3, [sp, #13]
   1f27c:	f88d 300e 	strb.w	r3, [sp, #14]
   1f280:	f88d 300f 	strb.w	r3, [sp, #15]
   1f284:	9803      	ldr	r0, [sp, #12]
   1f286:	6120      	str	r0, [r4, #16]
   1f288:	2300      	movs	r3, #0
   1f28a:	492c      	ldr	r1, [pc, #176]	; (1f33c <sdmmc_set_bus_speed+0x14c>)
   1f28c:	4620      	mov	r0, r4
   1f28e:	f009 ffa4 	bl	291da <z_log_msg_finalize>
}
   1f292:	4628      	mov	r0, r5
   1f294:	b004      	add	sp, #16
   1f296:	bd70      	pop	{r4, r5, r6, pc}
		card->switch_caps.uhs_max_dtr = SD_CLOCK_50MHZ;
   1f298:	4929      	ldr	r1, [pc, #164]	; (1f340 <sdmmc_set_bus_speed+0x150>)
   1f29a:	6541      	str	r1, [r0, #84]	; 0x54
		timing = SDHC_TIMING_DDR50;
   1f29c:	2607      	movs	r6, #7
		break;
   1f29e:	e7b9      	b.n	1f214 <sdmmc_set_bus_speed+0x24>
		card->switch_caps.uhs_max_dtr = SD_CLOCK_100MHZ;
   1f2a0:	4928      	ldr	r1, [pc, #160]	; (1f344 <sdmmc_set_bus_speed+0x154>)
   1f2a2:	6541      	str	r1, [r0, #84]	; 0x54
		timing = SDHC_TIMING_SDR50;
   1f2a4:	2605      	movs	r6, #5
		break;
   1f2a6:	e7b5      	b.n	1f214 <sdmmc_set_bus_speed+0x24>
		card->switch_caps.uhs_max_dtr = SD_CLOCK_50MHZ;
   1f2a8:	4925      	ldr	r1, [pc, #148]	; (1f340 <sdmmc_set_bus_speed+0x150>)
   1f2aa:	6541      	str	r1, [r0, #84]	; 0x54
		timing = SDHC_TIMING_SDR25;
   1f2ac:	2604      	movs	r6, #4
		break;
   1f2ae:	e7b1      	b.n	1f214 <sdmmc_set_bus_speed+0x24>
		card->switch_caps.uhs_max_dtr = SD_CLOCK_25MHZ;
   1f2b0:	4925      	ldr	r1, [pc, #148]	; (1f348 <sdmmc_set_bus_speed+0x158>)
   1f2b2:	6541      	str	r1, [r0, #84]	; 0x54
		timing = SDHC_TIMING_SDR12;
   1f2b4:	2603      	movs	r6, #3
		break;
   1f2b6:	e7ad      	b.n	1f214 <sdmmc_set_bus_speed+0x24>
		card->bus_io.timing = timing;
   1f2b8:	72e6      	strb	r6, [r4, #11]
		card->bus_io.clock = card->switch_caps.uhs_max_dtr;
   1f2ba:	6d63      	ldr	r3, [r4, #84]	; 0x54
   1f2bc:	6063      	str	r3, [r4, #4]
		ret = sdhc_set_io(card->sdhc, &card->bus_io);
   1f2be:	4621      	mov	r1, r4
   1f2c0:	f851 0b04 	ldr.w	r0, [r1], #4
   1f2c4:	f00d faee 	bl	2c8a4 <sdhc_set_io>
		if (ret) {
   1f2c8:	4605      	mov	r5, r0
   1f2ca:	2800      	cmp	r0, #0
   1f2cc:	d0e1      	beq.n	1f292 <sdmmc_set_bus_speed+0xa2>
			LOG_ERR("Failed to change host bus speed");
   1f2ce:	2006      	movs	r0, #6
   1f2d0:	f7f4 fd1a 	bl	13d08 <z_log_msg_alloc>
   1f2d4:	2200      	movs	r2, #0
   1f2d6:	f36f 0200 	bfc	r2, #0, #1
   1f2da:	f36f 0241 	bfc	r2, #1, #1
   1f2de:	f36f 0282 	bfc	r2, #2, #1
   1f2e2:	f36f 02c5 	bfc	r2, #3, #3
   1f2e6:	2301      	movs	r3, #1
   1f2e8:	f363 1288 	bfi	r2, r3, #6, #3
   1f2ec:	2308      	movs	r3, #8
   1f2ee:	f363 2252 	bfi	r2, r3, #9, #10
   1f2f2:	f36f 42de 	bfc	r2, #19, #12
   1f2f6:	f36f 72df 	bfc	r2, #31, #1
   1f2fa:	4604      	mov	r4, r0
   1f2fc:	b188      	cbz	r0, 1f322 <sdmmc_set_bus_speed+0x132>
   1f2fe:	f110 0310 	adds.w	r3, r0, #16
   1f302:	d001      	beq.n	1f308 <sdmmc_set_bus_speed+0x118>
   1f304:	4911      	ldr	r1, [pc, #68]	; (1f34c <sdmmc_set_bus_speed+0x15c>)
   1f306:	6141      	str	r1, [r0, #20]
   1f308:	b15b      	cbz	r3, 1f322 <sdmmc_set_bus_speed+0x132>
   1f30a:	2302      	movs	r3, #2
   1f30c:	f88d 300c 	strb.w	r3, [sp, #12]
   1f310:	2300      	movs	r3, #0
   1f312:	f88d 300d 	strb.w	r3, [sp, #13]
   1f316:	f88d 300e 	strb.w	r3, [sp, #14]
   1f31a:	f88d 300f 	strb.w	r3, [sp, #15]
   1f31e:	9803      	ldr	r0, [sp, #12]
   1f320:	6120      	str	r0, [r4, #16]
   1f322:	2300      	movs	r3, #0
   1f324:	4905      	ldr	r1, [pc, #20]	; (1f33c <sdmmc_set_bus_speed+0x14c>)
   1f326:	4620      	mov	r0, r4
   1f328:	f009 ff57 	bl	291da <z_log_msg_finalize>
			return ret;
   1f32c:	e7b1      	b.n	1f292 <sdmmc_set_bus_speed+0xa2>
	switch (card->card_speed) {
   1f32e:	2500      	movs	r5, #0
   1f330:	e7af      	b.n	1f292 <sdmmc_set_bus_speed+0xa2>
   1f332:	bf00      	nop
   1f334:	0c65d400 	.word	0x0c65d400
   1f338:	00033a1c 	.word	0x00033a1c
   1f33c:	000314d8 	.word	0x000314d8
   1f340:	02faf080 	.word	0x02faf080
   1f344:	05f5e100 	.word	0x05f5e100
   1f348:	017d7840 	.word	0x017d7840
   1f34c:	00033a3c 	.word	0x00033a3c

0001f350 <sdmmc_init_hs>:
{
   1f350:	b530      	push	{r4, r5, lr}
   1f352:	b083      	sub	sp, #12
	if ((!card->host_props.host_caps.high_spd_support) ||
   1f354:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
   1f358:	f013 0f10 	tst.w	r3, #16
   1f35c:	d07a      	beq.n	1f454 <__kernel_ram_size+0x8c>
   1f35e:	4604      	mov	r4, r0
		(card->sd_version < SD_SPEC_VER1_1) ||
   1f360:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
	if ((!card->host_props.host_caps.high_spd_support) ||
   1f362:	2b01      	cmp	r3, #1
   1f364:	d97a      	bls.n	1f45c <__kernel_ram_size+0x94>
		(card->switch_caps.hs_max_dtr == 0)) {
   1f366:	6d03      	ldr	r3, [r0, #80]	; 0x50
		(card->sd_version < SD_SPEC_VER1_1) ||
   1f368:	b90b      	cbnz	r3, 1f36e <sdmmc_init_hs+0x1e>
		return 0;
   1f36a:	2500      	movs	r5, #0
   1f36c:	e073      	b.n	1f456 <__kernel_ram_size+0x8e>
	card->card_speed = SD_TIMING_SDR25;
   1f36e:	2301      	movs	r3, #1
   1f370:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
	ret = sdmmc_set_bus_speed(card);
   1f374:	f7ff ff3c 	bl	1f1f0 <sdmmc_set_bus_speed>
	if (ret) {
   1f378:	4605      	mov	r5, r0
   1f37a:	2800      	cmp	r0, #0
   1f37c:	d13a      	bne.n	1f3f4 <__kernel_ram_size+0x2c>
	if (card->flags & SD_4BITS_WIDTH) {
   1f37e:	6f63      	ldr	r3, [r4, #116]	; 0x74
   1f380:	f013 0f04 	tst.w	r3, #4
   1f384:	d067      	beq.n	1f456 <__kernel_ram_size+0x8e>
		ret = sdmmc_set_bus_width(card, SDHC_BUS_WIDTH4BIT);
   1f386:	2104      	movs	r1, #4
   1f388:	4620      	mov	r0, r4
   1f38a:	f7ff fea9 	bl	1f0e0 <sdmmc_set_bus_width>
		if (ret) {
   1f38e:	4605      	mov	r5, r0
   1f390:	2800      	cmp	r0, #0
   1f392:	d060      	beq.n	1f456 <__kernel_ram_size+0x8e>
			LOG_ERR("Failed to change card bus width to 4 bits");
   1f394:	2006      	movs	r0, #6
   1f396:	f7f4 fcb7 	bl	13d08 <z_log_msg_alloc>
   1f39a:	2200      	movs	r2, #0
   1f39c:	f36f 0200 	bfc	r2, #0, #1
   1f3a0:	f36f 0241 	bfc	r2, #1, #1
   1f3a4:	f36f 0282 	bfc	r2, #2, #1
   1f3a8:	f36f 02c5 	bfc	r2, #3, #3
   1f3ac:	2301      	movs	r3, #1
   1f3ae:	f363 1288 	bfi	r2, r3, #6, #3
   1f3b2:	2308      	movs	r3, #8
   1f3b4:	f363 2252 	bfi	r2, r3, #9, #10
   1f3b8:	f36f 42de 	bfc	r2, #19, #12
   1f3bc:	f36f 72df 	bfc	r2, #31, #1
   1f3c0:	4604      	mov	r4, r0
   1f3c2:	b188      	cbz	r0, 1f3e8 <__kernel_ram_size+0x20>
   1f3c4:	f110 0310 	adds.w	r3, r0, #16
   1f3c8:	d001      	beq.n	1f3ce <__kernel_ram_size+0x6>
   1f3ca:	4925      	ldr	r1, [pc, #148]	; (1f460 <__kernel_ram_size+0x98>)
   1f3cc:	6141      	str	r1, [r0, #20]
   1f3ce:	b15b      	cbz	r3, 1f3e8 <__kernel_ram_size+0x20>
   1f3d0:	2302      	movs	r3, #2
   1f3d2:	f88d 3004 	strb.w	r3, [sp, #4]
   1f3d6:	2300      	movs	r3, #0
   1f3d8:	f88d 3005 	strb.w	r3, [sp, #5]
   1f3dc:	f88d 3006 	strb.w	r3, [sp, #6]
   1f3e0:	f88d 3007 	strb.w	r3, [sp, #7]
   1f3e4:	9801      	ldr	r0, [sp, #4]
   1f3e6:	6120      	str	r0, [r4, #16]
   1f3e8:	2300      	movs	r3, #0
   1f3ea:	491e      	ldr	r1, [pc, #120]	; (1f464 <__kernel_ram_size+0x9c>)
   1f3ec:	4620      	mov	r0, r4
   1f3ee:	f009 fef4 	bl	291da <z_log_msg_finalize>
			return ret;
   1f3f2:	e030      	b.n	1f456 <__kernel_ram_size+0x8e>
		LOG_ERR("Failed to switch card to HS mode");
   1f3f4:	2006      	movs	r0, #6
   1f3f6:	f7f4 fc87 	bl	13d08 <z_log_msg_alloc>
   1f3fa:	2200      	movs	r2, #0
   1f3fc:	f36f 0200 	bfc	r2, #0, #1
   1f400:	f36f 0241 	bfc	r2, #1, #1
   1f404:	f36f 0282 	bfc	r2, #2, #1
   1f408:	f36f 02c5 	bfc	r2, #3, #3
   1f40c:	2301      	movs	r3, #1
   1f40e:	f363 1288 	bfi	r2, r3, #6, #3
   1f412:	2308      	movs	r3, #8
   1f414:	f363 2252 	bfi	r2, r3, #9, #10
   1f418:	f36f 42de 	bfc	r2, #19, #12
   1f41c:	f36f 72df 	bfc	r2, #31, #1
   1f420:	4604      	mov	r4, r0
   1f422:	b188      	cbz	r0, 1f448 <__kernel_ram_size+0x80>
   1f424:	f110 0310 	adds.w	r3, r0, #16
   1f428:	d001      	beq.n	1f42e <__kernel_ram_size+0x66>
   1f42a:	490f      	ldr	r1, [pc, #60]	; (1f468 <__kernel_ram_size+0xa0>)
   1f42c:	6141      	str	r1, [r0, #20]
   1f42e:	b15b      	cbz	r3, 1f448 <__kernel_ram_size+0x80>
   1f430:	2302      	movs	r3, #2
   1f432:	f88d 3004 	strb.w	r3, [sp, #4]
   1f436:	2300      	movs	r3, #0
   1f438:	f88d 3005 	strb.w	r3, [sp, #5]
   1f43c:	f88d 3006 	strb.w	r3, [sp, #6]
   1f440:	f88d 3007 	strb.w	r3, [sp, #7]
   1f444:	9801      	ldr	r0, [sp, #4]
   1f446:	6120      	str	r0, [r4, #16]
   1f448:	2300      	movs	r3, #0
   1f44a:	4906      	ldr	r1, [pc, #24]	; (1f464 <__kernel_ram_size+0x9c>)
   1f44c:	4620      	mov	r0, r4
   1f44e:	f009 fec4 	bl	291da <z_log_msg_finalize>
		return ret;
   1f452:	e000      	b.n	1f456 <__kernel_ram_size+0x8e>
		return 0;
   1f454:	2500      	movs	r5, #0
}
   1f456:	4628      	mov	r0, r5
   1f458:	b003      	add	sp, #12
   1f45a:	bd30      	pop	{r4, r5, pc}
		return 0;
   1f45c:	2500      	movs	r5, #0
   1f45e:	e7fa      	b.n	1f456 <__kernel_ram_size+0x8e>
   1f460:	00033a80 	.word	0x00033a80
   1f464:	000314d8 	.word	0x000314d8
   1f468:	00033a5c 	.word	0x00033a5c

0001f46c <sdmmc_send_ocr>:
{
   1f46c:	b570      	push	{r4, r5, r6, lr}
   1f46e:	b08a      	sub	sp, #40	; 0x28
   1f470:	4605      	mov	r5, r0
   1f472:	460e      	mov	r6, r1
	cmd.opcode = SD_APP_SEND_OP_COND;
   1f474:	2329      	movs	r3, #41	; 0x29
   1f476:	9301      	str	r3, [sp, #4]
	cmd.arg = ocr_arg;
   1f478:	9102      	str	r1, [sp, #8]
	cmd.response_type = (SD_RSP_TYPE_R3 | SD_SPI_RSP_TYPE_R1);
   1f47a:	2314      	movs	r3, #20
   1f47c:	9307      	str	r3, [sp, #28]
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
   1f47e:	23c8      	movs	r3, #200	; 0xc8
   1f480:	9309      	str	r3, [sp, #36]	; 0x24
	for (retries = 0; retries < CONFIG_SD_OCR_RETRY_COUNT; retries++) {
   1f482:	2400      	movs	r4, #0
   1f484:	e006      	b.n	1f494 <sdmmc_send_ocr+0x28>
			if ((cmd.response[0U] & SD_OCR_PWR_BUSY_FLAG)) {
   1f486:	9b03      	ldr	r3, [sp, #12]
   1f488:	2b00      	cmp	r3, #0
   1f48a:	db21      	blt.n	1f4d0 <sdmmc_send_ocr+0x64>
   1f48c:	200a      	movs	r0, #10
   1f48e:	f00d fced 	bl	2ce6c <k_msleep>
	for (retries = 0; retries < CONFIG_SD_OCR_RETRY_COUNT; retries++) {
   1f492:	3401      	adds	r4, #1
   1f494:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
   1f498:	da1a      	bge.n	1f4d0 <sdmmc_send_ocr+0x64>
		ret = sdmmc_app_command(card, 0U);
   1f49a:	2100      	movs	r1, #0
   1f49c:	4628      	mov	r0, r5
   1f49e:	f7ff fdb7 	bl	1f010 <sdmmc_app_command>
   1f4a2:	4603      	mov	r3, r0
		if (ret == SD_RETRY) {
   1f4a4:	2801      	cmp	r0, #1
   1f4a6:	d0f4      	beq.n	1f492 <sdmmc_send_ocr+0x26>
		} else if (ret) {
   1f4a8:	2800      	cmp	r0, #0
   1f4aa:	d14f      	bne.n	1f54c <sdmmc_send_ocr+0xe0>
		ret = sdhc_request(card->sdhc, &cmd, NULL);
   1f4ac:	2200      	movs	r2, #0
   1f4ae:	a901      	add	r1, sp, #4
   1f4b0:	6828      	ldr	r0, [r5, #0]
   1f4b2:	f00d f9ee 	bl	2c892 <sdhc_request>
		if (ret) {
   1f4b6:	4603      	mov	r3, r0
   1f4b8:	2800      	cmp	r0, #0
   1f4ba:	d147      	bne.n	1f54c <sdmmc_send_ocr+0xe0>
		if (ocr_arg == 0) {
   1f4bc:	2e00      	cmp	r6, #0
   1f4be:	d044      	beq.n	1f54a <sdmmc_send_ocr+0xde>
		if (card->host_props.is_spi) {
   1f4c0:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
   1f4c4:	2b00      	cmp	r3, #0
   1f4c6:	d0de      	beq.n	1f486 <sdmmc_send_ocr+0x1a>
			if (!(cmd.response[0] & SD_SPI_R1IDLE_STATE)) {
   1f4c8:	9b03      	ldr	r3, [sp, #12]
   1f4ca:	f013 0f01 	tst.w	r3, #1
   1f4ce:	d1dd      	bne.n	1f48c <sdmmc_send_ocr+0x20>
	if (retries >= CONFIG_SD_OCR_RETRY_COUNT) {
   1f4d0:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
   1f4d4:	da07      	bge.n	1f4e6 <sdmmc_send_ocr+0x7a>
	if (!card->host_props.is_spi) {
   1f4d6:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
   1f4da:	2b00      	cmp	r3, #0
   1f4dc:	d139      	bne.n	1f552 <sdmmc_send_ocr+0xe6>
		card->ocr = cmd.response[0U];
   1f4de:	9b03      	ldr	r3, [sp, #12]
   1f4e0:	64eb      	str	r3, [r5, #76]	; 0x4c
	return 0;
   1f4e2:	2300      	movs	r3, #0
   1f4e4:	e032      	b.n	1f54c <sdmmc_send_ocr+0xe0>
		LOG_ERR("Card never left busy state");
   1f4e6:	2006      	movs	r0, #6
   1f4e8:	f7f4 fc0e 	bl	13d08 <z_log_msg_alloc>
   1f4ec:	2200      	movs	r2, #0
   1f4ee:	f36f 0200 	bfc	r2, #0, #1
   1f4f2:	f36f 0241 	bfc	r2, #1, #1
   1f4f6:	f36f 0282 	bfc	r2, #2, #1
   1f4fa:	f36f 02c5 	bfc	r2, #3, #3
   1f4fe:	2301      	movs	r3, #1
   1f500:	f363 1288 	bfi	r2, r3, #6, #3
   1f504:	2308      	movs	r3, #8
   1f506:	f363 2252 	bfi	r2, r3, #9, #10
   1f50a:	f36f 42de 	bfc	r2, #19, #12
   1f50e:	f36f 72df 	bfc	r2, #31, #1
   1f512:	4604      	mov	r4, r0
   1f514:	b188      	cbz	r0, 1f53a <sdmmc_send_ocr+0xce>
   1f516:	f110 0310 	adds.w	r3, r0, #16
   1f51a:	d001      	beq.n	1f520 <sdmmc_send_ocr+0xb4>
   1f51c:	490e      	ldr	r1, [pc, #56]	; (1f558 <sdmmc_send_ocr+0xec>)
   1f51e:	6141      	str	r1, [r0, #20]
   1f520:	b15b      	cbz	r3, 1f53a <sdmmc_send_ocr+0xce>
   1f522:	2302      	movs	r3, #2
   1f524:	f88d 3000 	strb.w	r3, [sp]
   1f528:	2300      	movs	r3, #0
   1f52a:	f88d 3001 	strb.w	r3, [sp, #1]
   1f52e:	f88d 3002 	strb.w	r3, [sp, #2]
   1f532:	f88d 3003 	strb.w	r3, [sp, #3]
   1f536:	9800      	ldr	r0, [sp, #0]
   1f538:	6120      	str	r0, [r4, #16]
   1f53a:	2300      	movs	r3, #0
   1f53c:	4907      	ldr	r1, [pc, #28]	; (1f55c <sdmmc_send_ocr+0xf0>)
   1f53e:	4620      	mov	r0, r4
   1f540:	f009 fe4b 	bl	291da <z_log_msg_finalize>
		return -ETIMEDOUT;
   1f544:	f06f 0373 	mvn.w	r3, #115	; 0x73
   1f548:	e000      	b.n	1f54c <sdmmc_send_ocr+0xe0>
			return 0;
   1f54a:	4633      	mov	r3, r6
}
   1f54c:	4618      	mov	r0, r3
   1f54e:	b00a      	add	sp, #40	; 0x28
   1f550:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   1f552:	2300      	movs	r3, #0
   1f554:	e7fa      	b.n	1f54c <sdmmc_send_ocr+0xe0>
   1f556:	bf00      	nop
   1f558:	00033aac 	.word	0x00033aac
   1f55c:	000314d8 	.word	0x000314d8

0001f560 <sdmmc_wait_ready>:
{
   1f560:	b570      	push	{r4, r5, r6, lr}
   1f562:	4606      	mov	r6, r0
	int ret, timeout = CONFIG_SD_DATA_TIMEOUT * 1000;
   1f564:	4d0d      	ldr	r5, [pc, #52]	; (1f59c <sdmmc_wait_ready+0x3c>)
   1f566:	e00a      	b.n	1f57e <sdmmc_wait_ready+0x1e>
			ret = sd_retry(sdmmc_read_status, card, CONFIG_SD_RETRY_COUNT);
   1f568:	220a      	movs	r2, #10
   1f56a:	4631      	mov	r1, r6
   1f56c:	480c      	ldr	r0, [pc, #48]	; (1f5a0 <sdmmc_wait_ready+0x40>)
   1f56e:	f00d f9ab 	bl	2c8c8 <sd_retry>
			busy = (ret != 0);
   1f572:	1e04      	subs	r4, r0, #0
   1f574:	bf18      	it	ne
   1f576:	2401      	movne	r4, #1
	} while (busy && (timeout > 0));
   1f578:	b174      	cbz	r4, 1f598 <sdmmc_wait_ready+0x38>
   1f57a:	2d00      	cmp	r5, #0
   1f57c:	dd0c      	ble.n	1f598 <sdmmc_wait_ready+0x38>
		busy = sdhc_card_busy(card->sdhc);
   1f57e:	6830      	ldr	r0, [r6, #0]
   1f580:	f00d f999 	bl	2c8b6 <sdhc_card_busy>
   1f584:	2800      	cmp	r0, #0
   1f586:	bf14      	ite	ne
   1f588:	2401      	movne	r4, #1
   1f58a:	2400      	moveq	r4, #0
		if (!busy) {
   1f58c:	d0ec      	beq.n	1f568 <sdmmc_wait_ready+0x8>
	z_impl_k_busy_wait(usec_to_wait);
   1f58e:	207d      	movs	r0, #125	; 0x7d
   1f590:	f011 fb37 	bl	30c02 <z_impl_k_busy_wait>
			timeout -= 125;
   1f594:	3d7d      	subs	r5, #125	; 0x7d
   1f596:	e7ef      	b.n	1f578 <sdmmc_wait_ready+0x18>
}
   1f598:	4620      	mov	r0, r4
   1f59a:	bd70      	pop	{r4, r5, r6, pc}
   1f59c:	00989680 	.word	0x00989680
   1f5a0:	0002cd13 	.word	0x0002cd13

0001f5a4 <sdmmc_write>:

static int sdmmc_write(struct sd_card *card, const uint8_t *wbuf,
	uint32_t start_block, uint32_t num_blocks)
{
   1f5a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f5a6:	b093      	sub	sp, #76	; 0x4c
   1f5a8:	4604      	mov	r4, r0
   1f5aa:	460f      	mov	r7, r1
   1f5ac:	4616      	mov	r6, r2
   1f5ae:	461d      	mov	r5, r3
	int ret;
	uint32_t blocks;
	struct sdhc_command cmd = {0};
   1f5b0:	2224      	movs	r2, #36	; 0x24
   1f5b2:	2100      	movs	r1, #0
   1f5b4:	a808      	add	r0, sp, #32
   1f5b6:	f00a fb2b 	bl	29c10 <memset>
	struct sdhc_data data = {0};
   1f5ba:	2000      	movs	r0, #0
   1f5bc:	9002      	str	r0, [sp, #8]
   1f5be:	9003      	str	r0, [sp, #12]
   1f5c0:	9004      	str	r0, [sp, #16]
   1f5c2:	9005      	str	r0, [sp, #20]
   1f5c4:	9006      	str	r0, [sp, #24]
   1f5c6:	9007      	str	r0, [sp, #28]

	/*
	 * See the note in sdmmc_read() above. We will not issue CMD23
	 * or CMD12, and expect the host to handle those details.
	 */
	cmd.opcode = (num_blocks == 1) ? SD_WRITE_SINGLE_BLOCK : SD_WRITE_MULTIPLE_BLOCK;
   1f5c8:	2d01      	cmp	r5, #1
   1f5ca:	d061      	beq.n	1f690 <sdmmc_write+0xec>
   1f5cc:	2319      	movs	r3, #25
   1f5ce:	9308      	str	r3, [sp, #32]
	if (!(card->flags & SD_HIGH_CAPACITY_FLAG)) {
   1f5d0:	6f63      	ldr	r3, [r4, #116]	; 0x74
   1f5d2:	f013 0f02 	tst.w	r3, #2
   1f5d6:	d15d      	bne.n	1f694 <sdmmc_write+0xf0>
		/* SDSC cards require block size in bytes, not blocks */
		cmd.arg = start_block * card->block_size;
   1f5d8:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   1f5da:	fb06 f303 	mul.w	r3, r6, r3
   1f5de:	9309      	str	r3, [sp, #36]	; 0x24
	} else {
		cmd.arg = start_block;
	}
	cmd.response_type = (SD_RSP_TYPE_R1 | SD_SPI_RSP_TYPE_R1);
   1f5e0:	2311      	movs	r3, #17
   1f5e2:	930e      	str	r3, [sp, #56]	; 0x38
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
   1f5e4:	23c8      	movs	r3, #200	; 0xc8
   1f5e6:	9310      	str	r3, [sp, #64]	; 0x40
	cmd.retries = CONFIG_SD_DATA_RETRIES;
   1f5e8:	2303      	movs	r3, #3
   1f5ea:	930f      	str	r3, [sp, #60]	; 0x3c

	data.block_addr = start_block;
   1f5ec:	9602      	str	r6, [sp, #8]
	data.block_size = card->block_size;
   1f5ee:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   1f5f0:	9303      	str	r3, [sp, #12]
	data.blocks = num_blocks;
   1f5f2:	9504      	str	r5, [sp, #16]
	data.data = (uint8_t *)wbuf;
   1f5f4:	9706      	str	r7, [sp, #24]
	data.timeout_ms = CONFIG_SD_DATA_TIMEOUT;
   1f5f6:	f242 7310 	movw	r3, #10000	; 0x2710
   1f5fa:	9307      	str	r3, [sp, #28]

	LOG_DBG("WRITE: Sector = %u, Count = %u", start_block, num_blocks);

	ret = sdhc_request(card->sdhc, &cmd, &data);
   1f5fc:	aa02      	add	r2, sp, #8
   1f5fe:	a908      	add	r1, sp, #32
   1f600:	6820      	ldr	r0, [r4, #0]
   1f602:	f00d f946 	bl	2c892 <sdhc_request>
	if (ret) {
   1f606:	2800      	cmp	r0, #0
   1f608:	d04a      	beq.n	1f6a0 <sdmmc_write+0xfc>
		LOG_DBG("Write failed: %d", ret);
		if (card->host_props.is_spi) {
   1f60a:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   1f60e:	2b00      	cmp	r3, #0
   1f610:	d042      	beq.n	1f698 <sdmmc_write+0xf4>
			/* Just check card status */
			ret = sdmmc_read_status(card);
   1f612:	4620      	mov	r0, r4
   1f614:	f00d fb7d 	bl	2cd12 <sdmmc_read_status>
		} else {
			/* Wait for card to be idle */
			ret = sdmmc_wait_ready(card);
		}
		if (ret) {
   1f618:	2800      	cmp	r0, #0
   1f61a:	d148      	bne.n	1f6ae <sdmmc_write+0x10a>
			return ret;
		}
		/* Query card to see how many blocks were actually written */
		ret = sdmmc_query_written(card, &blocks);
   1f61c:	a911      	add	r1, sp, #68	; 0x44
   1f61e:	4620      	mov	r0, r4
   1f620:	f7ff fd9c 	bl	1f15c <sdmmc_query_written>
		if (ret) {
   1f624:	2800      	cmp	r0, #0
   1f626:	d142      	bne.n	1f6ae <sdmmc_write+0x10a>
			return ret;
		}
		LOG_ERR("Only %d blocks of %d were written", blocks, num_blocks);
   1f628:	9e11      	ldr	r6, [sp, #68]	; 0x44
   1f62a:	2008      	movs	r0, #8
   1f62c:	f7f4 fb6c 	bl	13d08 <z_log_msg_alloc>
   1f630:	2200      	movs	r2, #0
   1f632:	f36f 0200 	bfc	r2, #0, #1
   1f636:	f36f 0241 	bfc	r2, #1, #1
   1f63a:	f36f 0282 	bfc	r2, #2, #1
   1f63e:	f36f 02c5 	bfc	r2, #3, #3
   1f642:	2301      	movs	r3, #1
   1f644:	f363 1288 	bfi	r2, r3, #6, #3
   1f648:	2310      	movs	r3, #16
   1f64a:	f363 2252 	bfi	r2, r3, #9, #10
   1f64e:	f36f 42de 	bfc	r2, #19, #12
   1f652:	f36f 72df 	bfc	r2, #31, #1
   1f656:	4604      	mov	r4, r0
   1f658:	b190      	cbz	r0, 1f680 <sdmmc_write+0xdc>
   1f65a:	18c3      	adds	r3, r0, r3
   1f65c:	d003      	beq.n	1f666 <sdmmc_write+0xc2>
   1f65e:	4930      	ldr	r1, [pc, #192]	; (1f720 <sdmmc_write+0x17c>)
   1f660:	6141      	str	r1, [r0, #20]
   1f662:	6186      	str	r6, [r0, #24]
   1f664:	61c5      	str	r5, [r0, #28]
   1f666:	b15b      	cbz	r3, 1f680 <sdmmc_write+0xdc>
   1f668:	2304      	movs	r3, #4
   1f66a:	f88d 3004 	strb.w	r3, [sp, #4]
   1f66e:	2300      	movs	r3, #0
   1f670:	f88d 3005 	strb.w	r3, [sp, #5]
   1f674:	f88d 3006 	strb.w	r3, [sp, #6]
   1f678:	f88d 3007 	strb.w	r3, [sp, #7]
   1f67c:	9801      	ldr	r0, [sp, #4]
   1f67e:	6120      	str	r0, [r4, #16]
   1f680:	2300      	movs	r3, #0
   1f682:	4928      	ldr	r1, [pc, #160]	; (1f724 <sdmmc_write+0x180>)
   1f684:	4620      	mov	r0, r4
   1f686:	f009 fda8 	bl	291da <z_log_msg_finalize>
		return -EIO;
   1f68a:	f06f 0004 	mvn.w	r0, #4
   1f68e:	e00e      	b.n	1f6ae <sdmmc_write+0x10a>
	cmd.opcode = (num_blocks == 1) ? SD_WRITE_SINGLE_BLOCK : SD_WRITE_MULTIPLE_BLOCK;
   1f690:	2318      	movs	r3, #24
   1f692:	e79c      	b.n	1f5ce <sdmmc_write+0x2a>
		cmd.arg = start_block;
   1f694:	9609      	str	r6, [sp, #36]	; 0x24
   1f696:	e7a3      	b.n	1f5e0 <sdmmc_write+0x3c>
			ret = sdmmc_wait_ready(card);
   1f698:	4620      	mov	r0, r4
   1f69a:	f7ff ff61 	bl	1f560 <sdmmc_wait_ready>
   1f69e:	e7bb      	b.n	1f618 <sdmmc_write+0x74>
	}
	/* Verify card is back in transfer state after write */
	if (card->host_props.is_spi) {
   1f6a0:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   1f6a4:	b12b      	cbz	r3, 1f6b2 <sdmmc_write+0x10e>
		/* Just check card status */
		ret = sdmmc_read_status(card);
   1f6a6:	4620      	mov	r0, r4
   1f6a8:	f00d fb33 	bl	2cd12 <sdmmc_read_status>
	} else {
		/* Wait for card to be idle */
		ret = sdmmc_wait_ready(card);
	}
	if (ret) {
   1f6ac:	b928      	cbnz	r0, 1f6ba <sdmmc_write+0x116>
		LOG_ERR("Card did not return to ready state");
		return -ETIMEDOUT;
	}
	return 0;
}
   1f6ae:	b013      	add	sp, #76	; 0x4c
   1f6b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = sdmmc_wait_ready(card);
   1f6b2:	4620      	mov	r0, r4
   1f6b4:	f7ff ff54 	bl	1f560 <sdmmc_wait_ready>
   1f6b8:	e7f8      	b.n	1f6ac <sdmmc_write+0x108>
		LOG_ERR("Card did not return to ready state");
   1f6ba:	2006      	movs	r0, #6
   1f6bc:	f7f4 fb24 	bl	13d08 <z_log_msg_alloc>
   1f6c0:	2200      	movs	r2, #0
   1f6c2:	f36f 0200 	bfc	r2, #0, #1
   1f6c6:	f36f 0241 	bfc	r2, #1, #1
   1f6ca:	f36f 0282 	bfc	r2, #2, #1
   1f6ce:	f36f 02c5 	bfc	r2, #3, #3
   1f6d2:	2301      	movs	r3, #1
   1f6d4:	f363 1288 	bfi	r2, r3, #6, #3
   1f6d8:	2308      	movs	r3, #8
   1f6da:	f363 2252 	bfi	r2, r3, #9, #10
   1f6de:	f36f 42de 	bfc	r2, #19, #12
   1f6e2:	f36f 72df 	bfc	r2, #31, #1
   1f6e6:	4604      	mov	r4, r0
   1f6e8:	b188      	cbz	r0, 1f70e <sdmmc_write+0x16a>
   1f6ea:	f110 0310 	adds.w	r3, r0, #16
   1f6ee:	d001      	beq.n	1f6f4 <sdmmc_write+0x150>
   1f6f0:	490d      	ldr	r1, [pc, #52]	; (1f728 <sdmmc_write+0x184>)
   1f6f2:	6141      	str	r1, [r0, #20]
   1f6f4:	b15b      	cbz	r3, 1f70e <sdmmc_write+0x16a>
   1f6f6:	2302      	movs	r3, #2
   1f6f8:	f88d 3004 	strb.w	r3, [sp, #4]
   1f6fc:	2300      	movs	r3, #0
   1f6fe:	f88d 3005 	strb.w	r3, [sp, #5]
   1f702:	f88d 3006 	strb.w	r3, [sp, #6]
   1f706:	f88d 3007 	strb.w	r3, [sp, #7]
   1f70a:	9801      	ldr	r0, [sp, #4]
   1f70c:	6120      	str	r0, [r4, #16]
   1f70e:	2300      	movs	r3, #0
   1f710:	4904      	ldr	r1, [pc, #16]	; (1f724 <sdmmc_write+0x180>)
   1f712:	4620      	mov	r0, r4
   1f714:	f009 fd61 	bl	291da <z_log_msg_finalize>
		return -ETIMEDOUT;
   1f718:	f06f 0073 	mvn.w	r0, #115	; 0x73
   1f71c:	e7c7      	b.n	1f6ae <sdmmc_write+0x10a>
   1f71e:	bf00      	nop
   1f720:	00033ac8 	.word	0x00033ac8
   1f724:	000314d8 	.word	0x000314d8
   1f728:	00033aec 	.word	0x00033aec

0001f72c <sdmmc_read>:
{
   1f72c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f72e:	b091      	sub	sp, #68	; 0x44
   1f730:	4604      	mov	r4, r0
   1f732:	460f      	mov	r7, r1
   1f734:	4616      	mov	r6, r2
   1f736:	461d      	mov	r5, r3
	struct sdhc_command cmd = {0};
   1f738:	2224      	movs	r2, #36	; 0x24
   1f73a:	2100      	movs	r1, #0
   1f73c:	a807      	add	r0, sp, #28
   1f73e:	f00a fa67 	bl	29c10 <memset>
	struct sdhc_data data = {0};
   1f742:	2000      	movs	r0, #0
   1f744:	9001      	str	r0, [sp, #4]
   1f746:	9002      	str	r0, [sp, #8]
   1f748:	9003      	str	r0, [sp, #12]
   1f74a:	9004      	str	r0, [sp, #16]
   1f74c:	9005      	str	r0, [sp, #20]
   1f74e:	9006      	str	r0, [sp, #24]
	cmd.opcode = (num_blocks == 1U) ? SD_READ_SINGLE_BLOCK : SD_READ_MULTIPLE_BLOCK;
   1f750:	2d01      	cmp	r5, #1
   1f752:	d024      	beq.n	1f79e <sdmmc_read+0x72>
   1f754:	2312      	movs	r3, #18
   1f756:	9307      	str	r3, [sp, #28]
	if (!(card->flags & SD_HIGH_CAPACITY_FLAG)) {
   1f758:	6f63      	ldr	r3, [r4, #116]	; 0x74
   1f75a:	f013 0f02 	tst.w	r3, #2
   1f75e:	d120      	bne.n	1f7a2 <sdmmc_read+0x76>
		cmd.arg = start_block * card->block_size;
   1f760:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   1f762:	fb06 f303 	mul.w	r3, r6, r3
   1f766:	9308      	str	r3, [sp, #32]
	cmd.response_type = (SD_RSP_TYPE_R1 | SD_SPI_RSP_TYPE_R1);
   1f768:	2311      	movs	r3, #17
   1f76a:	930d      	str	r3, [sp, #52]	; 0x34
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
   1f76c:	23c8      	movs	r3, #200	; 0xc8
   1f76e:	930f      	str	r3, [sp, #60]	; 0x3c
	cmd.retries = CONFIG_SD_DATA_RETRIES;
   1f770:	2303      	movs	r3, #3
   1f772:	930e      	str	r3, [sp, #56]	; 0x38
	data.block_addr = start_block;
   1f774:	9601      	str	r6, [sp, #4]
	data.block_size = card->block_size;
   1f776:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   1f778:	9302      	str	r3, [sp, #8]
	data.blocks = num_blocks;
   1f77a:	9503      	str	r5, [sp, #12]
	data.data = rbuf;
   1f77c:	9705      	str	r7, [sp, #20]
	data.timeout_ms = CONFIG_SD_DATA_TIMEOUT;
   1f77e:	f242 7310 	movw	r3, #10000	; 0x2710
   1f782:	9306      	str	r3, [sp, #24]
	ret = sdhc_request(card->sdhc, &cmd, &data);
   1f784:	aa01      	add	r2, sp, #4
   1f786:	a907      	add	r1, sp, #28
   1f788:	6820      	ldr	r0, [r4, #0]
   1f78a:	f00d f882 	bl	2c892 <sdhc_request>
	if (ret) {
   1f78e:	4605      	mov	r5, r0
   1f790:	b948      	cbnz	r0, 1f7a6 <sdmmc_read+0x7a>
	if (!card->host_props.is_spi) {
   1f792:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   1f796:	b3bb      	cbz	r3, 1f808 <sdmmc_read+0xdc>
}
   1f798:	4628      	mov	r0, r5
   1f79a:	b011      	add	sp, #68	; 0x44
   1f79c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	cmd.opcode = (num_blocks == 1U) ? SD_READ_SINGLE_BLOCK : SD_READ_MULTIPLE_BLOCK;
   1f79e:	2311      	movs	r3, #17
   1f7a0:	e7d9      	b.n	1f756 <sdmmc_read+0x2a>
		cmd.arg = start_block;
   1f7a2:	9608      	str	r6, [sp, #32]
   1f7a4:	e7e0      	b.n	1f768 <sdmmc_read+0x3c>
		LOG_ERR("Failed to read from SDMMC %d", ret);
   1f7a6:	2008      	movs	r0, #8
   1f7a8:	f7f4 faae 	bl	13d08 <z_log_msg_alloc>
   1f7ac:	2200      	movs	r2, #0
   1f7ae:	f36f 0200 	bfc	r2, #0, #1
   1f7b2:	f36f 0241 	bfc	r2, #1, #1
   1f7b6:	f36f 0282 	bfc	r2, #2, #1
   1f7ba:	f36f 02c5 	bfc	r2, #3, #3
   1f7be:	2301      	movs	r3, #1
   1f7c0:	f363 1288 	bfi	r2, r3, #6, #3
   1f7c4:	230c      	movs	r3, #12
   1f7c6:	f363 2252 	bfi	r2, r3, #9, #10
   1f7ca:	f36f 42de 	bfc	r2, #19, #12
   1f7ce:	f36f 72df 	bfc	r2, #31, #1
   1f7d2:	4604      	mov	r4, r0
   1f7d4:	b190      	cbz	r0, 1f7fc <sdmmc_read+0xd0>
   1f7d6:	f110 0310 	adds.w	r3, r0, #16
   1f7da:	d002      	beq.n	1f7e2 <sdmmc_read+0xb6>
   1f7dc:	4928      	ldr	r1, [pc, #160]	; (1f880 <sdmmc_read+0x154>)
   1f7de:	6141      	str	r1, [r0, #20]
   1f7e0:	6185      	str	r5, [r0, #24]
   1f7e2:	b15b      	cbz	r3, 1f7fc <sdmmc_read+0xd0>
   1f7e4:	2303      	movs	r3, #3
   1f7e6:	f88d 3000 	strb.w	r3, [sp]
   1f7ea:	2300      	movs	r3, #0
   1f7ec:	f88d 3001 	strb.w	r3, [sp, #1]
   1f7f0:	f88d 3002 	strb.w	r3, [sp, #2]
   1f7f4:	f88d 3003 	strb.w	r3, [sp, #3]
   1f7f8:	9800      	ldr	r0, [sp, #0]
   1f7fa:	6120      	str	r0, [r4, #16]
   1f7fc:	2300      	movs	r3, #0
   1f7fe:	4921      	ldr	r1, [pc, #132]	; (1f884 <sdmmc_read+0x158>)
   1f800:	4620      	mov	r0, r4
   1f802:	f009 fcea 	bl	291da <z_log_msg_finalize>
		return ret;
   1f806:	e7c7      	b.n	1f798 <sdmmc_read+0x6c>
		ret = sdmmc_wait_ready(card);
   1f808:	4620      	mov	r0, r4
   1f80a:	f7ff fea9 	bl	1f560 <sdmmc_wait_ready>
		if (ret) {
   1f80e:	4605      	mov	r5, r0
   1f810:	2800      	cmp	r0, #0
   1f812:	d0c1      	beq.n	1f798 <sdmmc_read+0x6c>
			LOG_ERR("Card did not return to ready state");
   1f814:	2006      	movs	r0, #6
   1f816:	f7f4 fa77 	bl	13d08 <z_log_msg_alloc>
   1f81a:	2200      	movs	r2, #0
   1f81c:	f36f 0200 	bfc	r2, #0, #1
   1f820:	f36f 0241 	bfc	r2, #1, #1
   1f824:	f36f 0282 	bfc	r2, #2, #1
   1f828:	f36f 02c5 	bfc	r2, #3, #3
   1f82c:	2301      	movs	r3, #1
   1f82e:	f363 1288 	bfi	r2, r3, #6, #3
   1f832:	2308      	movs	r3, #8
   1f834:	f363 2252 	bfi	r2, r3, #9, #10
   1f838:	f36f 42de 	bfc	r2, #19, #12
   1f83c:	f36f 72df 	bfc	r2, #31, #1
   1f840:	4605      	mov	r5, r0
   1f842:	b188      	cbz	r0, 1f868 <sdmmc_read+0x13c>
   1f844:	f110 0310 	adds.w	r3, r0, #16
   1f848:	d001      	beq.n	1f84e <sdmmc_read+0x122>
   1f84a:	490f      	ldr	r1, [pc, #60]	; (1f888 <sdmmc_read+0x15c>)
   1f84c:	6141      	str	r1, [r0, #20]
   1f84e:	b15b      	cbz	r3, 1f868 <sdmmc_read+0x13c>
   1f850:	2302      	movs	r3, #2
   1f852:	f88d 3000 	strb.w	r3, [sp]
   1f856:	2300      	movs	r3, #0
   1f858:	f88d 3001 	strb.w	r3, [sp, #1]
   1f85c:	f88d 3002 	strb.w	r3, [sp, #2]
   1f860:	f88d 3003 	strb.w	r3, [sp, #3]
   1f864:	9800      	ldr	r0, [sp, #0]
   1f866:	6128      	str	r0, [r5, #16]
   1f868:	2300      	movs	r3, #0
   1f86a:	4906      	ldr	r1, [pc, #24]	; (1f884 <sdmmc_read+0x158>)
   1f86c:	4628      	mov	r0, r5
   1f86e:	f009 fcb4 	bl	291da <z_log_msg_finalize>
			k_mutex_unlock(&card->lock);
   1f872:	f104 0014 	add.w	r0, r4, #20
	return z_impl_k_mutex_unlock(mutex);
   1f876:	f006 fe21 	bl	264bc <z_impl_k_mutex_unlock>
			return -ETIMEDOUT;
   1f87a:	f06f 0573 	mvn.w	r5, #115	; 0x73
   1f87e:	e78b      	b.n	1f798 <sdmmc_read+0x6c>
   1f880:	00033b10 	.word	0x00033b10
   1f884:	000314d8 	.word	0x000314d8
   1f888:	00033aec 	.word	0x00033aec

0001f88c <sdmmc_card_init>:
{
   1f88c:	b570      	push	{r4, r5, r6, lr}
   1f88e:	b082      	sub	sp, #8
	if (card->host_props.is_spi && IS_ENABLED(CONFIG_SDHC_SUPPORTS_SPI_MODE)) {
   1f890:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
   1f894:	2b00      	cmp	r3, #0
   1f896:	f000 815d 	beq.w	1fb54 <sdmmc_card_init+0x2c8>
   1f89a:	4604      	mov	r4, r0
		ret = sdmmc_spi_send_ocr(card, 0);
   1f89c:	2100      	movs	r1, #0
   1f89e:	f00d f96a 	bl	2cb76 <sdmmc_spi_send_ocr>
		if (ret) {
   1f8a2:	4606      	mov	r6, r0
   1f8a4:	b958      	cbnz	r0, 1f8be <sdmmc_card_init+0x32>
		if (card->flags & SD_SDHC_FLAG) {
   1f8a6:	6f61      	ldr	r1, [r4, #116]	; 0x74
   1f8a8:	f011 0508 	ands.w	r5, r1, #8
   1f8ac:	d001      	beq.n	1f8b2 <sdmmc_card_init+0x26>
			ocr_arg |= SD_OCR_HOST_CAP_FLAG;
   1f8ae:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
		ret = sdmmc_send_ocr(card, ocr_arg);
   1f8b2:	4629      	mov	r1, r5
   1f8b4:	4620      	mov	r0, r4
   1f8b6:	f7ff fdd9 	bl	1f46c <sdmmc_send_ocr>
		if (ret) {
   1f8ba:	4606      	mov	r6, r0
   1f8bc:	b110      	cbz	r0, 1f8c4 <sdmmc_card_init+0x38>
}
   1f8be:	4630      	mov	r0, r6
   1f8c0:	b002      	add	sp, #8
   1f8c2:	bd70      	pop	{r4, r5, r6, pc}
		ret = sdmmc_spi_send_ocr(card, ocr_arg);
   1f8c4:	4629      	mov	r1, r5
   1f8c6:	4620      	mov	r0, r4
   1f8c8:	f00d f955 	bl	2cb76 <sdmmc_spi_send_ocr>
	if (ret) {
   1f8cc:	4606      	mov	r6, r0
   1f8ce:	2800      	cmp	r0, #0
   1f8d0:	d17d      	bne.n	1f9ce <sdmmc_card_init+0x142>
	if (card->ocr & SD_OCR_CARD_CAP_FLAG) {
   1f8d2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   1f8d4:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   1f8d8:	d003      	beq.n	1f8e2 <sdmmc_card_init+0x56>
		card->flags |= SD_HIGH_CAPACITY_FLAG;
   1f8da:	6f62      	ldr	r2, [r4, #116]	; 0x74
   1f8dc:	f042 0202 	orr.w	r2, r2, #2
   1f8e0:	6762      	str	r2, [r4, #116]	; 0x74
	if (card->ocr & SD_OCR_SWITCH_18_ACCEPT_FLAG) {
   1f8e2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   1f8e6:	d003      	beq.n	1f8f0 <sdmmc_card_init+0x64>
		card->flags |= SD_1800MV_FLAG;
   1f8e8:	6f62      	ldr	r2, [r4, #116]	; 0x74
   1f8ea:	f042 0220 	orr.w	r2, r2, #32
   1f8ee:	6762      	str	r2, [r4, #116]	; 0x74
	if (card->ocr & SD_OCR_VDD29_30FLAG) {
   1f8f0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   1f8f4:	d003      	beq.n	1f8fe <sdmmc_card_init+0x72>
		card->flags |= SD_3000MV_FLAG;
   1f8f6:	6f63      	ldr	r3, [r4, #116]	; 0x74
   1f8f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1f8fc:	6763      	str	r3, [r4, #116]	; 0x74
	ret = sdmmc_read_cid(card);
   1f8fe:	4620      	mov	r0, r4
   1f900:	f00d f988 	bl	2cc14 <sdmmc_read_cid>
	if (ret) {
   1f904:	4606      	mov	r6, r0
   1f906:	2800      	cmp	r0, #0
   1f908:	d1d9      	bne.n	1f8be <sdmmc_card_init+0x32>
	ret = sdmmc_read_csd(card);
   1f90a:	4620      	mov	r0, r4
   1f90c:	f00d f998 	bl	2cc40 <sdmmc_read_csd>
	if (ret) {
   1f910:	4606      	mov	r6, r0
   1f912:	2800      	cmp	r0, #0
   1f914:	d1d3      	bne.n	1f8be <sdmmc_card_init+0x32>
	if (card->host_props.f_max < SD_CLOCK_25MHZ) {
   1f916:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   1f918:	4b90      	ldr	r3, [pc, #576]	; (1fb5c <sdmmc_card_init+0x2d0>)
   1f91a:	429d      	cmp	r5, r3
   1f91c:	f240 8087 	bls.w	1fa2e <sdmmc_card_init+0x1a2>
		card->bus_io.clock = SD_CLOCK_25MHZ;
   1f920:	4b8f      	ldr	r3, [pc, #572]	; (1fb60 <sdmmc_card_init+0x2d4>)
   1f922:	6063      	str	r3, [r4, #4]
	ret = sdhc_set_io(card->sdhc, &card->bus_io);
   1f924:	4621      	mov	r1, r4
   1f926:	f851 0b04 	ldr.w	r0, [r1], #4
   1f92a:	f00c ffbb 	bl	2c8a4 <sdhc_set_io>
	if (ret) {
   1f92e:	4606      	mov	r6, r0
   1f930:	2800      	cmp	r0, #0
   1f932:	f040 80af 	bne.w	1fa94 <sdmmc_card_init+0x208>
	ret = sdmmc_read_scr(card);
   1f936:	4620      	mov	r0, r4
   1f938:	f00d fa2c 	bl	2cd94 <sdmmc_read_scr>
	if (ret) {
   1f93c:	4606      	mov	r6, r0
   1f93e:	2800      	cmp	r0, #0
   1f940:	d1bd      	bne.n	1f8be <sdmmc_card_init+0x32>
	if ((card->flags & SD_1800MV_FLAG) &&
   1f942:	6f63      	ldr	r3, [r4, #116]	; 0x74
		if ((card->flags & SD_HIGH_CAPACITY_FLAG) == 0) {
   1f944:	f013 0f02 	tst.w	r3, #2
   1f948:	d10b      	bne.n	1f962 <sdmmc_card_init+0xd6>
			ret = sdmmc_set_blocklen(card, SDMMC_DEFAULT_BLOCK_SIZE);
   1f94a:	f44f 7100 	mov.w	r1, #512	; 0x200
   1f94e:	4620      	mov	r0, r4
   1f950:	f00d f991 	bl	2cc76 <sdmmc_set_blocklen>
			if (ret) {
   1f954:	4606      	mov	r6, r0
   1f956:	2800      	cmp	r0, #0
   1f958:	f040 80cc 	bne.w	1faf4 <sdmmc_card_init+0x268>
			card->block_size = 512;
   1f95c:	f44f 7300 	mov.w	r3, #512	; 0x200
   1f960:	66a3      	str	r3, [r4, #104]	; 0x68
		ret = sdmmc_init_hs(card);
   1f962:	4620      	mov	r0, r4
   1f964:	f7ff fcf4 	bl	1f350 <sdmmc_init_hs>
		if (ret) {
   1f968:	4606      	mov	r6, r0
   1f96a:	2800      	cmp	r0, #0
   1f96c:	d0a7      	beq.n	1f8be <sdmmc_card_init+0x32>
			LOG_ERR("HS card init failed");
   1f96e:	2006      	movs	r0, #6
   1f970:	f7f4 f9ca 	bl	13d08 <z_log_msg_alloc>
   1f974:	2200      	movs	r2, #0
   1f976:	f36f 0200 	bfc	r2, #0, #1
   1f97a:	f36f 0241 	bfc	r2, #1, #1
   1f97e:	f36f 0282 	bfc	r2, #2, #1
   1f982:	f36f 02c5 	bfc	r2, #3, #3
   1f986:	2301      	movs	r3, #1
   1f988:	f363 1288 	bfi	r2, r3, #6, #3
   1f98c:	2308      	movs	r3, #8
   1f98e:	f363 2252 	bfi	r2, r3, #9, #10
   1f992:	f36f 42de 	bfc	r2, #19, #12
   1f996:	f36f 72df 	bfc	r2, #31, #1
   1f99a:	4604      	mov	r4, r0
   1f99c:	b188      	cbz	r0, 1f9c2 <sdmmc_card_init+0x136>
   1f99e:	f110 0310 	adds.w	r3, r0, #16
   1f9a2:	d001      	beq.n	1f9a8 <sdmmc_card_init+0x11c>
   1f9a4:	496f      	ldr	r1, [pc, #444]	; (1fb64 <sdmmc_card_init+0x2d8>)
   1f9a6:	6141      	str	r1, [r0, #20]
   1f9a8:	b15b      	cbz	r3, 1f9c2 <sdmmc_card_init+0x136>
   1f9aa:	2302      	movs	r3, #2
   1f9ac:	f88d 3004 	strb.w	r3, [sp, #4]
   1f9b0:	2300      	movs	r3, #0
   1f9b2:	f88d 3005 	strb.w	r3, [sp, #5]
   1f9b6:	f88d 3006 	strb.w	r3, [sp, #6]
   1f9ba:	f88d 3007 	strb.w	r3, [sp, #7]
   1f9be:	9801      	ldr	r0, [sp, #4]
   1f9c0:	6120      	str	r0, [r4, #16]
   1f9c2:	2300      	movs	r3, #0
   1f9c4:	4968      	ldr	r1, [pc, #416]	; (1fb68 <sdmmc_card_init+0x2dc>)
   1f9c6:	4620      	mov	r0, r4
   1f9c8:	f009 fc07 	bl	291da <z_log_msg_finalize>
   1f9cc:	e777      	b.n	1f8be <sdmmc_card_init+0x32>
		LOG_ERR("Failed to query card OCR");
   1f9ce:	2006      	movs	r0, #6
   1f9d0:	f7f4 f99a 	bl	13d08 <z_log_msg_alloc>
   1f9d4:	2200      	movs	r2, #0
   1f9d6:	f36f 0200 	bfc	r2, #0, #1
   1f9da:	f36f 0241 	bfc	r2, #1, #1
   1f9de:	f36f 0282 	bfc	r2, #2, #1
   1f9e2:	f36f 02c5 	bfc	r2, #3, #3
   1f9e6:	2301      	movs	r3, #1
   1f9e8:	f363 1288 	bfi	r2, r3, #6, #3
   1f9ec:	2308      	movs	r3, #8
   1f9ee:	f363 2252 	bfi	r2, r3, #9, #10
   1f9f2:	f36f 42de 	bfc	r2, #19, #12
   1f9f6:	f36f 72df 	bfc	r2, #31, #1
   1f9fa:	4604      	mov	r4, r0
   1f9fc:	b188      	cbz	r0, 1fa22 <sdmmc_card_init+0x196>
   1f9fe:	f110 0310 	adds.w	r3, r0, #16
   1fa02:	d001      	beq.n	1fa08 <sdmmc_card_init+0x17c>
   1fa04:	4959      	ldr	r1, [pc, #356]	; (1fb6c <sdmmc_card_init+0x2e0>)
   1fa06:	6141      	str	r1, [r0, #20]
   1fa08:	b15b      	cbz	r3, 1fa22 <sdmmc_card_init+0x196>
   1fa0a:	2302      	movs	r3, #2
   1fa0c:	f88d 3004 	strb.w	r3, [sp, #4]
   1fa10:	2300      	movs	r3, #0
   1fa12:	f88d 3005 	strb.w	r3, [sp, #5]
   1fa16:	f88d 3006 	strb.w	r3, [sp, #6]
   1fa1a:	f88d 3007 	strb.w	r3, [sp, #7]
   1fa1e:	9801      	ldr	r0, [sp, #4]
   1fa20:	6120      	str	r0, [r4, #16]
   1fa22:	2300      	movs	r3, #0
   1fa24:	4950      	ldr	r1, [pc, #320]	; (1fb68 <sdmmc_card_init+0x2dc>)
   1fa26:	4620      	mov	r0, r4
   1fa28:	f009 fbd7 	bl	291da <z_log_msg_finalize>
		return ret;
   1fa2c:	e747      	b.n	1f8be <sdmmc_card_init+0x32>
		LOG_INF("Maximum SD clock is under 25MHz, using clock of %dHz",
   1fa2e:	2008      	movs	r0, #8
   1fa30:	f7f4 f96a 	bl	13d08 <z_log_msg_alloc>
   1fa34:	2200      	movs	r2, #0
   1fa36:	f36f 0200 	bfc	r2, #0, #1
   1fa3a:	f36f 0241 	bfc	r2, #1, #1
   1fa3e:	f36f 0282 	bfc	r2, #2, #1
   1fa42:	f36f 02c5 	bfc	r2, #3, #3
   1fa46:	2303      	movs	r3, #3
   1fa48:	f363 1288 	bfi	r2, r3, #6, #3
   1fa4c:	230c      	movs	r3, #12
   1fa4e:	f363 2252 	bfi	r2, r3, #9, #10
   1fa52:	f36f 42de 	bfc	r2, #19, #12
   1fa56:	f36f 72df 	bfc	r2, #31, #1
   1fa5a:	4606      	mov	r6, r0
   1fa5c:	b190      	cbz	r0, 1fa84 <sdmmc_card_init+0x1f8>
   1fa5e:	f110 0310 	adds.w	r3, r0, #16
   1fa62:	d002      	beq.n	1fa6a <sdmmc_card_init+0x1de>
   1fa64:	4942      	ldr	r1, [pc, #264]	; (1fb70 <sdmmc_card_init+0x2e4>)
   1fa66:	6141      	str	r1, [r0, #20]
   1fa68:	6185      	str	r5, [r0, #24]
   1fa6a:	b15b      	cbz	r3, 1fa84 <sdmmc_card_init+0x1f8>
   1fa6c:	2303      	movs	r3, #3
   1fa6e:	f88d 3004 	strb.w	r3, [sp, #4]
   1fa72:	2300      	movs	r3, #0
   1fa74:	f88d 3005 	strb.w	r3, [sp, #5]
   1fa78:	f88d 3006 	strb.w	r3, [sp, #6]
   1fa7c:	f88d 3007 	strb.w	r3, [sp, #7]
   1fa80:	9801      	ldr	r0, [sp, #4]
   1fa82:	6130      	str	r0, [r6, #16]
   1fa84:	2300      	movs	r3, #0
   1fa86:	4938      	ldr	r1, [pc, #224]	; (1fb68 <sdmmc_card_init+0x2dc>)
   1fa88:	4630      	mov	r0, r6
   1fa8a:	f009 fba6 	bl	291da <z_log_msg_finalize>
		card->bus_io.clock = card->host_props.f_max;
   1fa8e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1fa90:	6063      	str	r3, [r4, #4]
   1fa92:	e747      	b.n	1f924 <sdmmc_card_init+0x98>
		LOG_ERR("Failed to raise bus frequency to 25MHz");
   1fa94:	2006      	movs	r0, #6
   1fa96:	f7f4 f937 	bl	13d08 <z_log_msg_alloc>
   1fa9a:	2200      	movs	r2, #0
   1fa9c:	f36f 0200 	bfc	r2, #0, #1
   1faa0:	f36f 0241 	bfc	r2, #1, #1
   1faa4:	f36f 0282 	bfc	r2, #2, #1
   1faa8:	f36f 02c5 	bfc	r2, #3, #3
   1faac:	2301      	movs	r3, #1
   1faae:	f363 1288 	bfi	r2, r3, #6, #3
   1fab2:	2308      	movs	r3, #8
   1fab4:	f363 2252 	bfi	r2, r3, #9, #10
   1fab8:	f36f 42de 	bfc	r2, #19, #12
   1fabc:	f36f 72df 	bfc	r2, #31, #1
   1fac0:	4604      	mov	r4, r0
   1fac2:	b188      	cbz	r0, 1fae8 <sdmmc_card_init+0x25c>
   1fac4:	f110 0310 	adds.w	r3, r0, #16
   1fac8:	d001      	beq.n	1face <sdmmc_card_init+0x242>
   1faca:	492a      	ldr	r1, [pc, #168]	; (1fb74 <sdmmc_card_init+0x2e8>)
   1facc:	6141      	str	r1, [r0, #20]
   1face:	b15b      	cbz	r3, 1fae8 <sdmmc_card_init+0x25c>
   1fad0:	2302      	movs	r3, #2
   1fad2:	f88d 3004 	strb.w	r3, [sp, #4]
   1fad6:	2300      	movs	r3, #0
   1fad8:	f88d 3005 	strb.w	r3, [sp, #5]
   1fadc:	f88d 3006 	strb.w	r3, [sp, #6]
   1fae0:	f88d 3007 	strb.w	r3, [sp, #7]
   1fae4:	9801      	ldr	r0, [sp, #4]
   1fae6:	6120      	str	r0, [r4, #16]
   1fae8:	2300      	movs	r3, #0
   1faea:	491f      	ldr	r1, [pc, #124]	; (1fb68 <sdmmc_card_init+0x2dc>)
   1faec:	4620      	mov	r0, r4
   1faee:	f009 fb74 	bl	291da <z_log_msg_finalize>
		return ret;
   1faf2:	e6e4      	b.n	1f8be <sdmmc_card_init+0x32>
				LOG_ERR("Could not set SD blocklen to 512");
   1faf4:	2006      	movs	r0, #6
   1faf6:	f7f4 f907 	bl	13d08 <z_log_msg_alloc>
   1fafa:	2200      	movs	r2, #0
   1fafc:	f36f 0200 	bfc	r2, #0, #1
   1fb00:	f36f 0241 	bfc	r2, #1, #1
   1fb04:	f36f 0282 	bfc	r2, #2, #1
   1fb08:	f36f 02c5 	bfc	r2, #3, #3
   1fb0c:	2301      	movs	r3, #1
   1fb0e:	f363 1288 	bfi	r2, r3, #6, #3
   1fb12:	2308      	movs	r3, #8
   1fb14:	f363 2252 	bfi	r2, r3, #9, #10
   1fb18:	f36f 42de 	bfc	r2, #19, #12
   1fb1c:	f36f 72df 	bfc	r2, #31, #1
   1fb20:	4604      	mov	r4, r0
   1fb22:	b188      	cbz	r0, 1fb48 <sdmmc_card_init+0x2bc>
   1fb24:	f110 0310 	adds.w	r3, r0, #16
   1fb28:	d001      	beq.n	1fb2e <sdmmc_card_init+0x2a2>
   1fb2a:	4913      	ldr	r1, [pc, #76]	; (1fb78 <sdmmc_card_init+0x2ec>)
   1fb2c:	6141      	str	r1, [r0, #20]
   1fb2e:	b15b      	cbz	r3, 1fb48 <sdmmc_card_init+0x2bc>
   1fb30:	2302      	movs	r3, #2
   1fb32:	f88d 3004 	strb.w	r3, [sp, #4]
   1fb36:	2300      	movs	r3, #0
   1fb38:	f88d 3005 	strb.w	r3, [sp, #5]
   1fb3c:	f88d 3006 	strb.w	r3, [sp, #6]
   1fb40:	f88d 3007 	strb.w	r3, [sp, #7]
   1fb44:	9801      	ldr	r0, [sp, #4]
   1fb46:	6120      	str	r0, [r4, #16]
   1fb48:	2300      	movs	r3, #0
   1fb4a:	4907      	ldr	r1, [pc, #28]	; (1fb68 <sdmmc_card_init+0x2dc>)
   1fb4c:	4620      	mov	r0, r4
   1fb4e:	f009 fb44 	bl	291da <z_log_msg_finalize>
				return ret;
   1fb52:	e6b4      	b.n	1f8be <sdmmc_card_init+0x32>
		return -ENOTSUP;
   1fb54:	f06f 0685 	mvn.w	r6, #133	; 0x85
   1fb58:	e6b1      	b.n	1f8be <sdmmc_card_init+0x32>
   1fb5a:	bf00      	nop
   1fb5c:	017d783f 	.word	0x017d783f
   1fb60:	017d7840 	.word	0x017d7840
   1fb64:	00033bd0 	.word	0x00033bd0
   1fb68:	000314d8 	.word	0x000314d8
   1fb6c:	00033b30 	.word	0x00033b30
   1fb70:	00033b4c 	.word	0x00033b4c
   1fb74:	00033b84 	.word	0x00033b84
   1fb78:	00033bac 	.word	0x00033bac

0001fb7c <sdmmc_read_blocks>:
{
   1fb7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fb80:	b082      	sub	sp, #8
   1fb82:	4615      	mov	r5, r2
   1fb84:	461e      	mov	r6, r3
	if ((start_block + num_blocks) > card->block_count) {
   1fb86:	441a      	add	r2, r3
   1fb88:	6e43      	ldr	r3, [r0, #100]	; 0x64
   1fb8a:	429a      	cmp	r2, r3
   1fb8c:	f200 80b6 	bhi.w	1fcfc <sdmmc_read_blocks+0x180>
   1fb90:	4604      	mov	r4, r0
   1fb92:	4688      	mov	r8, r1
	if (card->type == CARD_SDIO) {
   1fb94:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72
   1fb98:	2b01      	cmp	r3, #1
   1fb9a:	d018      	beq.n	1fbce <sdmmc_read_blocks+0x52>
	ret = k_mutex_lock(&card->lock, K_NO_WAIT);
   1fb9c:	f100 0714 	add.w	r7, r0, #20
	return z_impl_k_mutex_lock(mutex, timeout);
   1fba0:	2200      	movs	r2, #0
   1fba2:	2300      	movs	r3, #0
   1fba4:	4638      	mov	r0, r7
   1fba6:	f006 fc05 	bl	263b4 <z_impl_k_mutex_lock>
	if (ret) {
   1fbaa:	2800      	cmp	r0, #0
   1fbac:	d141      	bne.n	1fc32 <sdmmc_read_blocks+0xb6>
		ret = sdmmc_read(card, rbuf, start_block, num_blocks);
   1fbae:	4633      	mov	r3, r6
   1fbb0:	462a      	mov	r2, r5
   1fbb2:	4641      	mov	r1, r8
   1fbb4:	4620      	mov	r0, r4
   1fbb6:	f7ff fdb9 	bl	1f72c <sdmmc_read>
		if (ret) {
   1fbba:	4604      	mov	r4, r0
   1fbbc:	2800      	cmp	r0, #0
   1fbbe:	d16a      	bne.n	1fc96 <sdmmc_read_blocks+0x11a>
	return z_impl_k_mutex_unlock(mutex);
   1fbc0:	4638      	mov	r0, r7
   1fbc2:	f006 fc7b 	bl	264bc <z_impl_k_mutex_unlock>
}
   1fbc6:	4620      	mov	r0, r4
   1fbc8:	b002      	add	sp, #8
   1fbca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_WRN("SDIO does not support MMC commands");
   1fbce:	2006      	movs	r0, #6
   1fbd0:	f7f4 f89a 	bl	13d08 <z_log_msg_alloc>
   1fbd4:	2200      	movs	r2, #0
   1fbd6:	f36f 0200 	bfc	r2, #0, #1
   1fbda:	f36f 0241 	bfc	r2, #1, #1
   1fbde:	f36f 0282 	bfc	r2, #2, #1
   1fbe2:	f36f 02c5 	bfc	r2, #3, #3
   1fbe6:	2302      	movs	r3, #2
   1fbe8:	f363 1288 	bfi	r2, r3, #6, #3
   1fbec:	2308      	movs	r3, #8
   1fbee:	f363 2252 	bfi	r2, r3, #9, #10
   1fbf2:	f36f 42de 	bfc	r2, #19, #12
   1fbf6:	f36f 72df 	bfc	r2, #31, #1
   1fbfa:	4604      	mov	r4, r0
   1fbfc:	b188      	cbz	r0, 1fc22 <sdmmc_read_blocks+0xa6>
   1fbfe:	f110 0310 	adds.w	r3, r0, #16
   1fc02:	d001      	beq.n	1fc08 <sdmmc_read_blocks+0x8c>
   1fc04:	493f      	ldr	r1, [pc, #252]	; (1fd04 <sdmmc_read_blocks+0x188>)
   1fc06:	6141      	str	r1, [r0, #20]
   1fc08:	b15b      	cbz	r3, 1fc22 <sdmmc_read_blocks+0xa6>
   1fc0a:	2302      	movs	r3, #2
   1fc0c:	f88d 3004 	strb.w	r3, [sp, #4]
   1fc10:	2300      	movs	r3, #0
   1fc12:	f88d 3005 	strb.w	r3, [sp, #5]
   1fc16:	f88d 3006 	strb.w	r3, [sp, #6]
   1fc1a:	f88d 3007 	strb.w	r3, [sp, #7]
   1fc1e:	9801      	ldr	r0, [sp, #4]
   1fc20:	6120      	str	r0, [r4, #16]
   1fc22:	2300      	movs	r3, #0
   1fc24:	4938      	ldr	r1, [pc, #224]	; (1fd08 <sdmmc_read_blocks+0x18c>)
   1fc26:	4620      	mov	r0, r4
   1fc28:	f009 fad7 	bl	291da <z_log_msg_finalize>
		return -ENOTSUP;
   1fc2c:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1fc30:	e7c9      	b.n	1fbc6 <sdmmc_read_blocks+0x4a>
		LOG_WRN("Could not get SD card mutex");
   1fc32:	2006      	movs	r0, #6
   1fc34:	f7f4 f868 	bl	13d08 <z_log_msg_alloc>
   1fc38:	2200      	movs	r2, #0
   1fc3a:	f36f 0200 	bfc	r2, #0, #1
   1fc3e:	f36f 0241 	bfc	r2, #1, #1
   1fc42:	f36f 0282 	bfc	r2, #2, #1
   1fc46:	f36f 02c5 	bfc	r2, #3, #3
   1fc4a:	2302      	movs	r3, #2
   1fc4c:	f363 1288 	bfi	r2, r3, #6, #3
   1fc50:	2308      	movs	r3, #8
   1fc52:	f363 2252 	bfi	r2, r3, #9, #10
   1fc56:	f36f 42de 	bfc	r2, #19, #12
   1fc5a:	f36f 72df 	bfc	r2, #31, #1
   1fc5e:	4604      	mov	r4, r0
   1fc60:	b188      	cbz	r0, 1fc86 <sdmmc_read_blocks+0x10a>
   1fc62:	f110 0310 	adds.w	r3, r0, #16
   1fc66:	d001      	beq.n	1fc6c <sdmmc_read_blocks+0xf0>
   1fc68:	4928      	ldr	r1, [pc, #160]	; (1fd0c <sdmmc_read_blocks+0x190>)
   1fc6a:	6141      	str	r1, [r0, #20]
   1fc6c:	b15b      	cbz	r3, 1fc86 <sdmmc_read_blocks+0x10a>
   1fc6e:	2302      	movs	r3, #2
   1fc70:	f88d 3004 	strb.w	r3, [sp, #4]
   1fc74:	2300      	movs	r3, #0
   1fc76:	f88d 3005 	strb.w	r3, [sp, #5]
   1fc7a:	f88d 3006 	strb.w	r3, [sp, #6]
   1fc7e:	f88d 3007 	strb.w	r3, [sp, #7]
   1fc82:	9801      	ldr	r0, [sp, #4]
   1fc84:	6120      	str	r0, [r4, #16]
   1fc86:	2300      	movs	r3, #0
   1fc88:	491f      	ldr	r1, [pc, #124]	; (1fd08 <sdmmc_read_blocks+0x18c>)
   1fc8a:	4620      	mov	r0, r4
   1fc8c:	f009 faa5 	bl	291da <z_log_msg_finalize>
		return -EBUSY;
   1fc90:	f06f 040f 	mvn.w	r4, #15
   1fc94:	e797      	b.n	1fbc6 <sdmmc_read_blocks+0x4a>
			LOG_ERR("Card read failed");
   1fc96:	2006      	movs	r0, #6
   1fc98:	f7f4 f836 	bl	13d08 <z_log_msg_alloc>
   1fc9c:	2200      	movs	r2, #0
   1fc9e:	f36f 0200 	bfc	r2, #0, #1
   1fca2:	f36f 0241 	bfc	r2, #1, #1
   1fca6:	f36f 0282 	bfc	r2, #2, #1
   1fcaa:	f36f 02c5 	bfc	r2, #3, #3
   1fcae:	2301      	movs	r3, #1
   1fcb0:	f363 1288 	bfi	r2, r3, #6, #3
   1fcb4:	2308      	movs	r3, #8
   1fcb6:	f363 2252 	bfi	r2, r3, #9, #10
   1fcba:	f36f 42de 	bfc	r2, #19, #12
   1fcbe:	f36f 72df 	bfc	r2, #31, #1
   1fcc2:	4605      	mov	r5, r0
   1fcc4:	b188      	cbz	r0, 1fcea <sdmmc_read_blocks+0x16e>
   1fcc6:	f110 0310 	adds.w	r3, r0, #16
   1fcca:	d001      	beq.n	1fcd0 <sdmmc_read_blocks+0x154>
   1fccc:	4910      	ldr	r1, [pc, #64]	; (1fd10 <sdmmc_read_blocks+0x194>)
   1fcce:	6141      	str	r1, [r0, #20]
   1fcd0:	b15b      	cbz	r3, 1fcea <sdmmc_read_blocks+0x16e>
   1fcd2:	2302      	movs	r3, #2
   1fcd4:	f88d 3004 	strb.w	r3, [sp, #4]
   1fcd8:	2300      	movs	r3, #0
   1fcda:	f88d 3005 	strb.w	r3, [sp, #5]
   1fcde:	f88d 3006 	strb.w	r3, [sp, #6]
   1fce2:	f88d 3007 	strb.w	r3, [sp, #7]
   1fce6:	9801      	ldr	r0, [sp, #4]
   1fce8:	6128      	str	r0, [r5, #16]
   1fcea:	2300      	movs	r3, #0
   1fcec:	4906      	ldr	r1, [pc, #24]	; (1fd08 <sdmmc_read_blocks+0x18c>)
   1fcee:	4628      	mov	r0, r5
   1fcf0:	f009 fa73 	bl	291da <z_log_msg_finalize>
   1fcf4:	4638      	mov	r0, r7
   1fcf6:	f006 fbe1 	bl	264bc <z_impl_k_mutex_unlock>
			return ret;
   1fcfa:	e764      	b.n	1fbc6 <sdmmc_read_blocks+0x4a>
		return -EINVAL;
   1fcfc:	f06f 0415 	mvn.w	r4, #21
   1fd00:	e761      	b.n	1fbc6 <sdmmc_read_blocks+0x4a>
   1fd02:	bf00      	nop
   1fd04:	00033be4 	.word	0x00033be4
   1fd08:	000314d8 	.word	0x000314d8
   1fd0c:	00033c08 	.word	0x00033c08
   1fd10:	00033c24 	.word	0x00033c24

0001fd14 <sdmmc_write_blocks>:

/* Writes data to SD card memory card */
int sdmmc_write_blocks(struct sd_card *card, const uint8_t *wbuf,
	uint32_t start_block, uint32_t num_blocks)
{
   1fd14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fd18:	b082      	sub	sp, #8
   1fd1a:	4615      	mov	r5, r2
   1fd1c:	461e      	mov	r6, r3
	int ret;
	uint32_t wlen;
	uint32_t sector;
	const uint8_t *buf_offset;

	if ((start_block + num_blocks) > card->block_count) {
   1fd1e:	441a      	add	r2, r3
   1fd20:	6e43      	ldr	r3, [r0, #100]	; 0x64
   1fd22:	429a      	cmp	r2, r3
   1fd24:	f200 80b6 	bhi.w	1fe94 <sdmmc_write_blocks+0x180>
   1fd28:	4604      	mov	r4, r0
   1fd2a:	4688      	mov	r8, r1
		return -EINVAL;
	}
	if (card->type == CARD_SDIO) {
   1fd2c:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72
   1fd30:	2b01      	cmp	r3, #1
   1fd32:	d018      	beq.n	1fd66 <sdmmc_write_blocks+0x52>
		LOG_WRN("SDIO does not support MMC commands");
		return -ENOTSUP;
	}
	ret = k_mutex_lock(&card->lock, K_NO_WAIT);
   1fd34:	f100 0714 	add.w	r7, r0, #20
	return z_impl_k_mutex_lock(mutex, timeout);
   1fd38:	2200      	movs	r2, #0
   1fd3a:	2300      	movs	r3, #0
   1fd3c:	4638      	mov	r0, r7
   1fd3e:	f006 fb39 	bl	263b4 <z_impl_k_mutex_lock>
	if (ret) {
   1fd42:	2800      	cmp	r0, #0
   1fd44:	d141      	bne.n	1fdca <sdmmc_write_blocks+0xb6>
			sector += wlen;
			buf_offset += wlen * card->block_size;
		}
	} else {
		/* We can use aligned buffers directly */
		ret = sdmmc_write(card, wbuf, start_block, num_blocks);
   1fd46:	4633      	mov	r3, r6
   1fd48:	462a      	mov	r2, r5
   1fd4a:	4641      	mov	r1, r8
   1fd4c:	4620      	mov	r0, r4
   1fd4e:	f7ff fc29 	bl	1f5a4 <sdmmc_write>
		if (ret) {
   1fd52:	4604      	mov	r4, r0
   1fd54:	2800      	cmp	r0, #0
   1fd56:	d16a      	bne.n	1fe2e <sdmmc_write_blocks+0x11a>
	return z_impl_k_mutex_unlock(mutex);
   1fd58:	4638      	mov	r0, r7
   1fd5a:	f006 fbaf 	bl	264bc <z_impl_k_mutex_unlock>
			return ret;
		}
	}
	k_mutex_unlock(&card->lock);
	return 0;
}
   1fd5e:	4620      	mov	r0, r4
   1fd60:	b002      	add	sp, #8
   1fd62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_WRN("SDIO does not support MMC commands");
   1fd66:	2006      	movs	r0, #6
   1fd68:	f7f3 ffce 	bl	13d08 <z_log_msg_alloc>
   1fd6c:	2200      	movs	r2, #0
   1fd6e:	f36f 0200 	bfc	r2, #0, #1
   1fd72:	f36f 0241 	bfc	r2, #1, #1
   1fd76:	f36f 0282 	bfc	r2, #2, #1
   1fd7a:	f36f 02c5 	bfc	r2, #3, #3
   1fd7e:	2302      	movs	r3, #2
   1fd80:	f363 1288 	bfi	r2, r3, #6, #3
   1fd84:	2308      	movs	r3, #8
   1fd86:	f363 2252 	bfi	r2, r3, #9, #10
   1fd8a:	f36f 42de 	bfc	r2, #19, #12
   1fd8e:	f36f 72df 	bfc	r2, #31, #1
   1fd92:	4604      	mov	r4, r0
   1fd94:	b188      	cbz	r0, 1fdba <sdmmc_write_blocks+0xa6>
   1fd96:	f110 0310 	adds.w	r3, r0, #16
   1fd9a:	d001      	beq.n	1fda0 <sdmmc_write_blocks+0x8c>
   1fd9c:	493f      	ldr	r1, [pc, #252]	; (1fe9c <sdmmc_write_blocks+0x188>)
   1fd9e:	6141      	str	r1, [r0, #20]
   1fda0:	b15b      	cbz	r3, 1fdba <sdmmc_write_blocks+0xa6>
   1fda2:	2302      	movs	r3, #2
   1fda4:	f88d 3004 	strb.w	r3, [sp, #4]
   1fda8:	2300      	movs	r3, #0
   1fdaa:	f88d 3005 	strb.w	r3, [sp, #5]
   1fdae:	f88d 3006 	strb.w	r3, [sp, #6]
   1fdb2:	f88d 3007 	strb.w	r3, [sp, #7]
   1fdb6:	9801      	ldr	r0, [sp, #4]
   1fdb8:	6120      	str	r0, [r4, #16]
   1fdba:	2300      	movs	r3, #0
   1fdbc:	4938      	ldr	r1, [pc, #224]	; (1fea0 <sdmmc_write_blocks+0x18c>)
   1fdbe:	4620      	mov	r0, r4
   1fdc0:	f009 fa0b 	bl	291da <z_log_msg_finalize>
		return -ENOTSUP;
   1fdc4:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1fdc8:	e7c9      	b.n	1fd5e <sdmmc_write_blocks+0x4a>
		LOG_WRN("Could not get SD card mutex");
   1fdca:	2006      	movs	r0, #6
   1fdcc:	f7f3 ff9c 	bl	13d08 <z_log_msg_alloc>
   1fdd0:	2200      	movs	r2, #0
   1fdd2:	f36f 0200 	bfc	r2, #0, #1
   1fdd6:	f36f 0241 	bfc	r2, #1, #1
   1fdda:	f36f 0282 	bfc	r2, #2, #1
   1fdde:	f36f 02c5 	bfc	r2, #3, #3
   1fde2:	2302      	movs	r3, #2
   1fde4:	f363 1288 	bfi	r2, r3, #6, #3
   1fde8:	2308      	movs	r3, #8
   1fdea:	f363 2252 	bfi	r2, r3, #9, #10
   1fdee:	f36f 42de 	bfc	r2, #19, #12
   1fdf2:	f36f 72df 	bfc	r2, #31, #1
   1fdf6:	4604      	mov	r4, r0
   1fdf8:	b188      	cbz	r0, 1fe1e <sdmmc_write_blocks+0x10a>
   1fdfa:	f110 0310 	adds.w	r3, r0, #16
   1fdfe:	d001      	beq.n	1fe04 <sdmmc_write_blocks+0xf0>
   1fe00:	4928      	ldr	r1, [pc, #160]	; (1fea4 <sdmmc_write_blocks+0x190>)
   1fe02:	6141      	str	r1, [r0, #20]
   1fe04:	b15b      	cbz	r3, 1fe1e <sdmmc_write_blocks+0x10a>
   1fe06:	2302      	movs	r3, #2
   1fe08:	f88d 3004 	strb.w	r3, [sp, #4]
   1fe0c:	2300      	movs	r3, #0
   1fe0e:	f88d 3005 	strb.w	r3, [sp, #5]
   1fe12:	f88d 3006 	strb.w	r3, [sp, #6]
   1fe16:	f88d 3007 	strb.w	r3, [sp, #7]
   1fe1a:	9801      	ldr	r0, [sp, #4]
   1fe1c:	6120      	str	r0, [r4, #16]
   1fe1e:	2300      	movs	r3, #0
   1fe20:	491f      	ldr	r1, [pc, #124]	; (1fea0 <sdmmc_write_blocks+0x18c>)
   1fe22:	4620      	mov	r0, r4
   1fe24:	f009 f9d9 	bl	291da <z_log_msg_finalize>
		return -EBUSY;
   1fe28:	f06f 040f 	mvn.w	r4, #15
   1fe2c:	e797      	b.n	1fd5e <sdmmc_write_blocks+0x4a>
			LOG_ERR("Write failed");
   1fe2e:	2006      	movs	r0, #6
   1fe30:	f7f3 ff6a 	bl	13d08 <z_log_msg_alloc>
   1fe34:	2200      	movs	r2, #0
   1fe36:	f36f 0200 	bfc	r2, #0, #1
   1fe3a:	f36f 0241 	bfc	r2, #1, #1
   1fe3e:	f36f 0282 	bfc	r2, #2, #1
   1fe42:	f36f 02c5 	bfc	r2, #3, #3
   1fe46:	2301      	movs	r3, #1
   1fe48:	f363 1288 	bfi	r2, r3, #6, #3
   1fe4c:	2308      	movs	r3, #8
   1fe4e:	f363 2252 	bfi	r2, r3, #9, #10
   1fe52:	f36f 42de 	bfc	r2, #19, #12
   1fe56:	f36f 72df 	bfc	r2, #31, #1
   1fe5a:	4605      	mov	r5, r0
   1fe5c:	b188      	cbz	r0, 1fe82 <sdmmc_write_blocks+0x16e>
   1fe5e:	f110 0310 	adds.w	r3, r0, #16
   1fe62:	d001      	beq.n	1fe68 <sdmmc_write_blocks+0x154>
   1fe64:	4910      	ldr	r1, [pc, #64]	; (1fea8 <sdmmc_write_blocks+0x194>)
   1fe66:	6141      	str	r1, [r0, #20]
   1fe68:	b15b      	cbz	r3, 1fe82 <sdmmc_write_blocks+0x16e>
   1fe6a:	2302      	movs	r3, #2
   1fe6c:	f88d 3004 	strb.w	r3, [sp, #4]
   1fe70:	2300      	movs	r3, #0
   1fe72:	f88d 3005 	strb.w	r3, [sp, #5]
   1fe76:	f88d 3006 	strb.w	r3, [sp, #6]
   1fe7a:	f88d 3007 	strb.w	r3, [sp, #7]
   1fe7e:	9801      	ldr	r0, [sp, #4]
   1fe80:	6128      	str	r0, [r5, #16]
   1fe82:	2300      	movs	r3, #0
   1fe84:	4906      	ldr	r1, [pc, #24]	; (1fea0 <sdmmc_write_blocks+0x18c>)
   1fe86:	4628      	mov	r0, r5
   1fe88:	f009 f9a7 	bl	291da <z_log_msg_finalize>
   1fe8c:	4638      	mov	r0, r7
   1fe8e:	f006 fb15 	bl	264bc <z_impl_k_mutex_unlock>
			return ret;
   1fe92:	e764      	b.n	1fd5e <sdmmc_write_blocks+0x4a>
		return -EINVAL;
   1fe94:	f06f 0415 	mvn.w	r4, #21
   1fe98:	e761      	b.n	1fd5e <sdmmc_write_blocks+0x4a>
   1fe9a:	bf00      	nop
   1fe9c:	00033be4 	.word	0x00033be4
   1fea0:	000314d8 	.word	0x000314d8
   1fea4:	00033c08 	.word	0x00033c08
   1fea8:	00033c38 	.word	0x00033c38

0001feac <disk_sdmmc_init>:
static struct disk_info sdmmc_disk = {
	.ops = &sdmmc_disk_ops,
};

static int disk_sdmmc_init(const struct device *dev)
{
   1feac:	b508      	push	{r3, lr}
   1feae:	4603      	mov	r3, r0
	struct sdmmc_data *data = dev->data;
   1feb0:	6902      	ldr	r2, [r0, #16]

	data->status = SD_UNINIT;
   1feb2:	2100      	movs	r1, #0
   1feb4:	f882 10b8 	strb.w	r1, [r2, #184]	; 0xb8
	sdmmc_disk.dev = dev;
   1feb8:	4803      	ldr	r0, [pc, #12]	; (1fec8 <disk_sdmmc_init+0x1c>)
   1feba:	6103      	str	r3, [r0, #16]
	sdmmc_disk.name = data->name;
   1febc:	f8d2 30bc 	ldr.w	r3, [r2, #188]	; 0xbc
   1fec0:	6083      	str	r3, [r0, #8]

	return disk_access_register(&sdmmc_disk);
   1fec2:	f7f4 fb83 	bl	145cc <disk_access_register>
}
   1fec6:	bd08      	pop	{r3, pc}
   1fec8:	20000868 	.word	0x20000868

0001fecc <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
   1fecc:	4800      	ldr	r0, [pc, #0]	; (1fed0 <get_hf_flags+0x4>)
   1fece:	4770      	bx	lr
   1fed0:	20008900 	.word	0x20008900

0001fed4 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   1fed4:	4b03      	ldr	r3, [pc, #12]	; (1fee4 <get_subsys+0x10>)
   1fed6:	1ac0      	subs	r0, r0, r3
   1fed8:	1080      	asrs	r0, r0, #2

	return (clock_control_subsys_t)offset;
}
   1feda:	4b03      	ldr	r3, [pc, #12]	; (1fee8 <get_subsys+0x14>)
   1fedc:	fb03 f000 	mul.w	r0, r3, r0
   1fee0:	4770      	bx	lr
   1fee2:	bf00      	nop
   1fee4:	200088c0 	.word	0x200088c0
   1fee8:	b6db6db7 	.word	0xb6db6db7

0001feec <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1feec:	b538      	push	{r3, r4, r5, lr}
   1feee:	4605      	mov	r5, r0
   1fef0:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1fef2:	f7ff ffef 	bl	1fed4 <get_subsys>
   1fef6:	4601      	mov	r1, r0
   1fef8:	2240      	movs	r2, #64	; 0x40
   1fefa:	4803      	ldr	r0, [pc, #12]	; (1ff08 <onoff_stop+0x1c>)
   1fefc:	f00d f8be 	bl	2d07c <stop>
   1ff00:	4601      	mov	r1, r0
	notify(mgr, res);
   1ff02:	4628      	mov	r0, r5
   1ff04:	47a0      	blx	r4
}
   1ff06:	bd38      	pop	{r3, r4, r5, pc}
   1ff08:	00031114 	.word	0x00031114

0001ff0c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1ff0c:	b530      	push	{r4, r5, lr}
   1ff0e:	b083      	sub	sp, #12
   1ff10:	4605      	mov	r5, r0
   1ff12:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1ff14:	f7ff ffde 	bl	1fed4 <get_subsys>
   1ff18:	4601      	mov	r1, r0
   1ff1a:	2340      	movs	r3, #64	; 0x40
   1ff1c:	9300      	str	r3, [sp, #0]
   1ff1e:	4623      	mov	r3, r4
   1ff20:	4a05      	ldr	r2, [pc, #20]	; (1ff38 <onoff_start+0x2c>)
   1ff22:	4806      	ldr	r0, [pc, #24]	; (1ff3c <onoff_start+0x30>)
   1ff24:	f00d f8c4 	bl	2d0b0 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   1ff28:	1e01      	subs	r1, r0, #0
   1ff2a:	db01      	blt.n	1ff30 <onoff_start+0x24>
		notify(mgr, err);
	}
}
   1ff2c:	b003      	add	sp, #12
   1ff2e:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
   1ff30:	4628      	mov	r0, r5
   1ff32:	47a0      	blx	r4
}
   1ff34:	e7fa      	b.n	1ff2c <onoff_start+0x20>
   1ff36:	bf00      	nop
   1ff38:	0002d0f9 	.word	0x0002d0f9
   1ff3c:	00031114 	.word	0x00031114

0001ff40 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
   1ff40:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
   1ff42:	b110      	cbz	r0, 1ff4a <clock_event_handler+0xa>
   1ff44:	2801      	cmp	r0, #1
   1ff46:	d00d      	beq.n	1ff64 <clock_event_handler+0x24>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
   1ff48:	bd08      	pop	{r3, pc}
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   1ff4a:	2100      	movs	r1, #0
   1ff4c:	4808      	ldr	r0, [pc, #32]	; (1ff70 <clock_event_handler+0x30>)
   1ff4e:	f00d f81e 	bl	2cf8e <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   1ff52:	6883      	ldr	r3, [r0, #8]
   1ff54:	f013 0f07 	tst.w	r3, #7
   1ff58:	d1f6      	bne.n	1ff48 <clock_event_handler+0x8>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   1ff5a:	2100      	movs	r1, #0
   1ff5c:	4804      	ldr	r0, [pc, #16]	; (1ff70 <clock_event_handler+0x30>)
   1ff5e:	f00d f87b 	bl	2d058 <clkstarted_handle>
   1ff62:	e7f1      	b.n	1ff48 <clock_event_handler+0x8>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   1ff64:	2101      	movs	r1, #1
   1ff66:	4802      	ldr	r0, [pc, #8]	; (1ff70 <clock_event_handler+0x30>)
   1ff68:	f00d f876 	bl	2d058 <clkstarted_handle>
}
   1ff6c:	e7ec      	b.n	1ff48 <clock_event_handler+0x8>
   1ff6e:	bf00      	nop
   1ff70:	00031114 	.word	0x00031114

0001ff74 <generic_hfclk_start>:
{
   1ff74:	b510      	push	{r4, lr}
   1ff76:	b082      	sub	sp, #8
   1ff78:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ff7c:	f3ef 8411 	mrs	r4, BASEPRI
   1ff80:	f383 8812 	msr	BASEPRI_MAX, r3
   1ff84:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   1ff88:	4a14      	ldr	r2, [pc, #80]	; (1ffdc <generic_hfclk_start+0x68>)
   1ff8a:	6813      	ldr	r3, [r2, #0]
   1ff8c:	f043 0102 	orr.w	r1, r3, #2
   1ff90:	6011      	str	r1, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   1ff92:	f013 0f01 	tst.w	r3, #1
   1ff96:	d109      	bne.n	1ffac <generic_hfclk_start+0x38>
	bool already_started = false;
   1ff98:	2300      	movs	r3, #0
	__asm__ volatile(
   1ff9a:	f384 8811 	msr	BASEPRI, r4
   1ff9e:	f3bf 8f6f 	isb	sy
	if (already_started) {
   1ffa2:	b9b3      	cbnz	r3, 1ffd2 <generic_hfclk_start+0x5e>
	hfclk_start();
   1ffa4:	f00d f8b0 	bl	2d108 <hfclk_start>
}
   1ffa8:	b002      	add	sp, #8
   1ffaa:	bd10      	pop	{r4, pc}
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
   1ffac:	f10d 0207 	add.w	r2, sp, #7
   1ffb0:	2101      	movs	r1, #1
   1ffb2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   1ffb6:	f00c ffc7 	bl	2cf48 <nrf_clock_is_running>
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   1ffba:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1ffbe:	2b01      	cmp	r3, #1
   1ffc0:	d001      	beq.n	1ffc6 <generic_hfclk_start+0x52>
	bool already_started = false;
   1ffc2:	2300      	movs	r3, #0
   1ffc4:	e7e9      	b.n	1ff9a <generic_hfclk_start+0x26>
			set_on_state(get_hf_flags());
   1ffc6:	f7ff ff81 	bl	1fecc <get_hf_flags>
   1ffca:	f00d f832 	bl	2d032 <set_on_state>
			already_started = true;
   1ffce:	2301      	movs	r3, #1
   1ffd0:	e7e3      	b.n	1ff9a <generic_hfclk_start+0x26>
		clkstarted_handle(CLOCK_DEVICE,
   1ffd2:	2100      	movs	r1, #0
   1ffd4:	4802      	ldr	r0, [pc, #8]	; (1ffe0 <generic_hfclk_start+0x6c>)
   1ffd6:	f00d f83f 	bl	2d058 <clkstarted_handle>
		return;
   1ffda:	e7e5      	b.n	1ffa8 <generic_hfclk_start+0x34>
   1ffdc:	20008910 	.word	0x20008910
   1ffe0:	00031114 	.word	0x00031114

0001ffe4 <generic_hfclk_stop>:
{
   1ffe4:	b510      	push	{r4, lr}
	__asm__ volatile(
   1ffe6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ffea:	f3ef 8411 	mrs	r4, BASEPRI
   1ffee:	f383 8812 	msr	BASEPRI_MAX, r3
   1fff2:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
   1fff6:	4a08      	ldr	r2, [pc, #32]	; (20018 <CONFIG_PM_SRAM_SIZE+0x18>)
   1fff8:	6813      	ldr	r3, [r2, #0]
   1fffa:	f023 0102 	bic.w	r1, r3, #2
   1fffe:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
   20000:	f013 0f01 	tst.w	r3, #1
   20004:	d004      	beq.n	20010 <CONFIG_PM_SRAM_SIZE+0x10>
	__asm__ volatile(
   20006:	f384 8811 	msr	BASEPRI, r4
   2000a:	f3bf 8f6f 	isb	sy
}
   2000e:	bd10      	pop	{r4, pc}
		hfclk_stop();
   20010:	f00d f884 	bl	2d11c <hfclk_stop>
   20014:	e7f7      	b.n	20006 <CONFIG_PM_SRAM_SIZE+0x6>
   20016:	bf00      	nop
   20018:	20008910 	.word	0x20008910

0002001c <lfclk_spinwait>:
{
   2001c:	b570      	push	{r4, r5, r6, lr}
   2001e:	b082      	sub	sp, #8
   20020:	4606      	mov	r6, r0
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   20022:	f010 f92c 	bl	3027e <k_is_in_isr>
   20026:	b918      	cbnz	r0, 20030 <lfclk_spinwait+0x14>
   20028:	4604      	mov	r4, r0
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
   2002a:	4b1b      	ldr	r3, [pc, #108]	; (20098 <lfclk_spinwait+0x7c>)
   2002c:	781b      	ldrb	r3, [r3, #0]
   2002e:	b97b      	cbnz	r3, 20050 <lfclk_spinwait+0x34>
	__asm__ volatile(
   20030:	f04f 0340 	mov.w	r3, #64	; 0x40
   20034:	f3ef 8511 	mrs	r5, BASEPRI
   20038:	f383 8812 	msr	BASEPRI_MAX, r3
   2003c:	f3bf 8f6f 	isb	sy
   20040:	2401      	movs	r4, #1
	if (!isr_mode) {
   20042:	b95c      	cbnz	r4, 2005c <lfclk_spinwait+0x40>
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_clock_int_disable(NRF_CLOCK_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   20044:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   20048:	2202      	movs	r2, #2
   2004a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   2004e:	e005      	b.n	2005c <lfclk_spinwait+0x40>
	int key = isr_mode ? irq_lock() : 0;
   20050:	2500      	movs	r5, #0
   20052:	e7f6      	b.n	20042 <lfclk_spinwait+0x26>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   20054:	b1ac      	cbz	r4, 20082 <lfclk_spinwait+0x66>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   20056:	4628      	mov	r0, r5
   20058:	f7f4 fd4c 	bl	14af4 <arch_cpu_atomic_idle>
   2005c:	aa01      	add	r2, sp, #4
   2005e:	2100      	movs	r1, #0
   20060:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   20064:	f00c ff70 	bl	2cf48 <nrf_clock_is_running>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   20068:	2800      	cmp	r0, #0
   2006a:	d0f3      	beq.n	20054 <lfclk_spinwait+0x38>
		 && ((type == target_type)
   2006c:	9b01      	ldr	r3, [sp, #4]
	while (!(nrfx_clock_is_running(d, (void *)&type)
   2006e:	b10b      	cbz	r3, 20074 <lfclk_spinwait+0x58>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   20070:	2e01      	cmp	r6, #1
   20072:	d1ef      	bne.n	20054 <lfclk_spinwait+0x38>
	if (isr_mode) {
   20074:	b14c      	cbz	r4, 2008a <lfclk_spinwait+0x6e>
	__asm__ volatile(
   20076:	f385 8811 	msr	BASEPRI, r5
   2007a:	f3bf 8f6f 	isb	sy
}
   2007e:	b002      	add	sp, #8
   20080:	bd70      	pop	{r4, r5, r6, pc}
				k_msleep(1);
   20082:	2001      	movs	r0, #1
   20084:	f00d f854 	bl	2d130 <k_msleep>
   20088:	e7e8      	b.n	2005c <lfclk_spinwait+0x40>
    p_reg->INTENSET = mask;
   2008a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2008e:	2202      	movs	r2, #2
   20090:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   20094:	e7f3      	b.n	2007e <lfclk_spinwait+0x62>
   20096:	bf00      	nop
   20098:	200090c0 	.word	0x200090c0

0002009c <api_blocking_start>:
{
   2009c:	b500      	push	{lr}
   2009e:	b087      	sub	sp, #28
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   200a0:	f8cd d000 	str.w	sp, [sp]
   200a4:	f8cd d004 	str.w	sp, [sp, #4]
   200a8:	2300      	movs	r3, #0
   200aa:	9302      	str	r3, [sp, #8]
   200ac:	2301      	movs	r3, #1
   200ae:	9303      	str	r3, [sp, #12]
   200b0:	ab04      	add	r3, sp, #16
   200b2:	9304      	str	r3, [sp, #16]
   200b4:	9305      	str	r3, [sp, #20]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   200b6:	466b      	mov	r3, sp
   200b8:	4a06      	ldr	r2, [pc, #24]	; (200d4 <api_blocking_start+0x38>)
   200ba:	f00d f815 	bl	2d0e8 <api_start>
	if (err < 0) {
   200be:	2800      	cmp	r0, #0
   200c0:	db05      	blt.n	200ce <api_blocking_start+0x32>
	return z_impl_k_sem_take(sem, timeout);
   200c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   200c6:	2300      	movs	r3, #0
   200c8:	4668      	mov	r0, sp
   200ca:	f006 fa9b 	bl	26604 <z_impl_k_sem_take>
}
   200ce:	b007      	add	sp, #28
   200d0:	f85d fb04 	ldr.w	pc, [sp], #4
   200d4:	0002d15d 	.word	0x0002d15d

000200d8 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   200d8:	b570      	push	{r4, r5, r6, lr}
   200da:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   200dc:	2200      	movs	r2, #0
   200de:	2101      	movs	r1, #1
   200e0:	4610      	mov	r0, r2
   200e2:	f009 fc71 	bl	299c8 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   200e6:	4811      	ldr	r0, [pc, #68]	; (2012c <clk_init+0x54>)
   200e8:	f003 fc18 	bl	2391c <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   200ec:	4b10      	ldr	r3, [pc, #64]	; (20130 <clk_init+0x58>)
   200ee:	4298      	cmp	r0, r3
   200f0:	d119      	bne.n	20126 <clk_init+0x4e>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   200f2:	f00e fd26 	bl	2eb42 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
   200f6:	2400      	movs	r4, #0
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   200f8:	2c01      	cmp	r4, #1
   200fa:	d812      	bhi.n	20122 <clk_init+0x4a>
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
   200fc:	4621      	mov	r1, r4
   200fe:	4630      	mov	r0, r6
   20100:	f00c ff45 	bl	2cf8e <get_sub_data>
   20104:	4605      	mov	r5, r0

		err = onoff_manager_init(get_onoff_manager(dev, i),
   20106:	4621      	mov	r1, r4
   20108:	4630      	mov	r0, r6
   2010a:	f00c ff4d 	bl	2cfa8 <get_onoff_manager>
   2010e:	4909      	ldr	r1, [pc, #36]	; (20134 <clk_init+0x5c>)
   20110:	f008 fa57 	bl	285c2 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   20114:	2800      	cmp	r0, #0
   20116:	db05      	blt.n	20124 <clk_init+0x4c>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   20118:	2301      	movs	r3, #1
   2011a:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   2011c:	441c      	add	r4, r3
   2011e:	b2e4      	uxtb	r4, r4
   20120:	e7ea      	b.n	200f8 <clk_init+0x20>
	}

	return 0;
   20122:	2000      	movs	r0, #0
}
   20124:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   20126:	f06f 0004 	mvn.w	r0, #4
   2012a:	e7fb      	b.n	20124 <clk_init+0x4c>
   2012c:	0001ff41 	.word	0x0001ff41
   20130:	0bad0000 	.word	0x0bad0000
   20134:	00033c64 	.word	0x00033c64

00020138 <z_nrf_clock_control_lf_on>:
{
   20138:	b510      	push	{r4, lr}
   2013a:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2013c:	4b10      	ldr	r3, [pc, #64]	; (20180 <z_nrf_clock_control_lf_on+0x48>)
   2013e:	2101      	movs	r1, #1
   20140:	f3bf 8f5b 	dmb	ish
   20144:	e853 2f00 	ldrex	r2, [r3]
   20148:	e843 1000 	strex	r0, r1, [r3]
   2014c:	2800      	cmp	r0, #0
   2014e:	d1f9      	bne.n	20144 <z_nrf_clock_control_lf_on+0xc>
   20150:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   20154:	b11a      	cbz	r2, 2015e <z_nrf_clock_control_lf_on+0x26>
	switch (start_mode) {
   20156:	1e63      	subs	r3, r4, #1
   20158:	2b01      	cmp	r3, #1
   2015a:	d90d      	bls.n	20178 <z_nrf_clock_control_lf_on+0x40>
}
   2015c:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
   2015e:	4809      	ldr	r0, [pc, #36]	; (20184 <z_nrf_clock_control_lf_on+0x4c>)
   20160:	f00c ff22 	bl	2cfa8 <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   20164:	4908      	ldr	r1, [pc, #32]	; (20188 <z_nrf_clock_control_lf_on+0x50>)
   20166:	2300      	movs	r3, #0
   20168:	604b      	str	r3, [r1, #4]
   2016a:	608b      	str	r3, [r1, #8]
   2016c:	60cb      	str	r3, [r1, #12]
   2016e:	2301      	movs	r3, #1
   20170:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
   20172:	f008 fa43 	bl	285fc <onoff_request>
   20176:	e7ee      	b.n	20156 <z_nrf_clock_control_lf_on+0x1e>
		lfclk_spinwait(start_mode);
   20178:	4620      	mov	r0, r4
   2017a:	f7ff ff4f 	bl	2001c <lfclk_spinwait>
		break;
   2017e:	e7ed      	b.n	2015c <z_nrf_clock_control_lf_on+0x24>
   20180:	200088bc 	.word	0x200088bc
   20184:	00031114 	.word	0x00031114
   20188:	200088ac 	.word	0x200088ac

0002018c <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
   2018c:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

#ifdef CONFIG_PRINTK
	__printk_hook_install(rtt_console_out);
   2018e:	4c04      	ldr	r4, [pc, #16]	; (201a0 <rtt_console_init+0x14>)
   20190:	4620      	mov	r0, r4
   20192:	f7f3 f815 	bl	131c0 <__printk_hook_install>
#endif
	__stdout_hook_install(rtt_console_out);
   20196:	4620      	mov	r0, r4
   20198:	f7f6 f8a0 	bl	162dc <__stdout_hook_install>

	return 0;
}
   2019c:	2000      	movs	r0, #0
   2019e:	bd10      	pop	{r4, pc}
   201a0:	000201a5 	.word	0x000201a5

000201a4 <rtt_console_out>:
{
   201a4:	b570      	push	{r4, r5, r6, lr}
   201a6:	b082      	sub	sp, #8
   201a8:	4606      	mov	r6, r0
	char c = (char)character;
   201aa:	f88d 0007 	strb.w	r0, [sp, #7]
	int max_cnt = CONFIG_RTT_TX_RETRY_CNT;
   201ae:	2502      	movs	r5, #2
		SEGGER_RTT_LOCK();
   201b0:	f005 fd06 	bl	25bc0 <zephyr_rtt_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
   201b4:	2201      	movs	r2, #1
   201b6:	f10d 0107 	add.w	r1, sp, #7
   201ba:	2000      	movs	r0, #0
   201bc:	f005 fcba 	bl	25b34 <SEGGER_RTT_WriteNoLock>
   201c0:	4604      	mov	r4, r0
		SEGGER_RTT_UNLOCK();
   201c2:	f005 fd09 	bl	25bd8 <zephyr_rtt_mutex_unlock>
		if (cnt) {
   201c6:	b93c      	cbnz	r4, 201d8 <rtt_console_out+0x34>
		} else if (host_present) {
   201c8:	4b08      	ldr	r3, [pc, #32]	; (201ec <rtt_console_out+0x48>)
   201ca:	781b      	ldrb	r3, [r3, #0]
   201cc:	b15b      	cbz	r3, 201e6 <rtt_console_out+0x42>
			if (max_cnt) {
   201ce:	b13d      	cbz	r5, 201e0 <rtt_console_out+0x3c>
				wait();
   201d0:	f00c ffdf 	bl	2d192 <wait>
				max_cnt--;
   201d4:	3d01      	subs	r5, #1
		SEGGER_RTT_LOCK();
   201d6:	e7eb      	b.n	201b0 <rtt_console_out+0xc>
			host_present = true;
   201d8:	4b04      	ldr	r3, [pc, #16]	; (201ec <rtt_console_out+0x48>)
   201da:	2201      	movs	r2, #1
   201dc:	701a      	strb	r2, [r3, #0]
   201de:	e002      	b.n	201e6 <rtt_console_out+0x42>
				host_present = false;
   201e0:	4b02      	ldr	r3, [pc, #8]	; (201ec <rtt_console_out+0x48>)
   201e2:	2200      	movs	r2, #0
   201e4:	701a      	strb	r2, [r3, #0]
}
   201e6:	4630      	mov	r0, r6
   201e8:	b002      	add	sp, #8
   201ea:	bd70      	pop	{r4, r5, r6, pc}
   201ec:	200090be 	.word	0x200090be

000201f0 <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   201f0:	b128      	cbz	r0, 201fe <get_dev+0xe>
   201f2:	2801      	cmp	r0, #1
   201f4:	d101      	bne.n	201fa <get_dev+0xa>
   201f6:	4803      	ldr	r0, [pc, #12]	; (20204 <get_dev+0x14>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
   201f8:	4770      	bx	lr
	const struct device *dev = NULL;
   201fa:	2000      	movs	r0, #0
   201fc:	4770      	bx	lr
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   201fe:	4802      	ldr	r0, [pc, #8]	; (20208 <get_dev+0x18>)
   20200:	4770      	bx	lr
   20202:	bf00      	nop
   20204:	0003112c 	.word	0x0003112c
   20208:	00031144 	.word	0x00031144

0002020c <gpio_nrfx_pin_interrupt_configure>:
{
   2020c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2020e:	b085      	sub	sp, #20
   20210:	460e      	mov	r6, r1
   20212:	4619      	mov	r1, r3
	return port->config;
   20214:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   20216:	7b1b      	ldrb	r3, [r3, #12]
   20218:	f006 051f 	and.w	r5, r6, #31
   2021c:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   20220:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
   20224:	d022      	beq.n	2026c <gpio_nrfx_pin_interrupt_configure+0x60>
   20226:	4607      	mov	r7, r0
   20228:	4614      	mov	r4, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
   2022a:	2300      	movs	r3, #0
   2022c:	9301      	str	r3, [sp, #4]
   2022e:	9302      	str	r3, [sp, #8]
		.trigger = get_trigger(mode, trig),
   20230:	4610      	mov	r0, r2
   20232:	f00d f894 	bl	2d35e <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
   20236:	f88d 0004 	strb.w	r0, [sp, #4]
	return port->config;
   2023a:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   2023c:	6899      	ldr	r1, [r3, #8]
   2023e:	40f1      	lsrs	r1, r6
   20240:	f011 0f01 	tst.w	r1, #1
   20244:	d102      	bne.n	2024c <gpio_nrfx_pin_interrupt_configure+0x40>
   20246:	f1b4 7fa0 	cmp.w	r4, #20971520	; 0x1400000
   2024a:	d014      	beq.n	20276 <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   2024c:	2300      	movs	r3, #0
   2024e:	aa01      	add	r2, sp, #4
   20250:	4619      	mov	r1, r3
   20252:	4628      	mov	r0, r5
   20254:	f004 ffa8 	bl	251a8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   20258:	4b1b      	ldr	r3, [pc, #108]	; (202c8 <gpio_nrfx_pin_interrupt_configure+0xbc>)
   2025a:	4298      	cmp	r0, r3
   2025c:	d131      	bne.n	202c2 <gpio_nrfx_pin_interrupt_configure+0xb6>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   2025e:	2101      	movs	r1, #1
   20260:	4628      	mov	r0, r5
   20262:	f005 f901 	bl	25468 <nrfx_gpiote_trigger_enable>
	return 0;
   20266:	2000      	movs	r0, #0
}
   20268:	b005      	add	sp, #20
   2026a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
   2026c:	4628      	mov	r0, r5
   2026e:	f005 f92d 	bl	254cc <nrfx_gpiote_trigger_disable>
		return 0;
   20272:	2000      	movs	r0, #0
   20274:	e7f8      	b.n	20268 <gpio_nrfx_pin_interrupt_configure+0x5c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   20276:	f005 031f 	and.w	r3, r5, #31

    return pin_number >> 5;
   2027a:	096a      	lsrs	r2, r5, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2027c:	2a01      	cmp	r2, #1
   2027e:	d014      	beq.n	202aa <gpio_nrfx_pin_interrupt_configure+0x9e>
        case 0: return NRF_P0;
   20280:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   20284:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   20288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   2028c:	f013 0f01 	tst.w	r3, #1
   20290:	d1dc      	bne.n	2024c <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   20292:	f10d 010f 	add.w	r1, sp, #15
   20296:	4628      	mov	r0, r5
   20298:	f005 f88a 	bl	253b0 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   2029c:	4b0b      	ldr	r3, [pc, #44]	; (202cc <gpio_nrfx_pin_interrupt_configure+0xc0>)
   2029e:	4298      	cmp	r0, r3
   202a0:	d005      	beq.n	202ae <gpio_nrfx_pin_interrupt_configure+0xa2>
		trigger_config.p_in_channel = &ch;
   202a2:	f10d 030f 	add.w	r3, sp, #15
   202a6:	9302      	str	r3, [sp, #8]
   202a8:	e7d0      	b.n	2024c <gpio_nrfx_pin_interrupt_configure+0x40>
        case 1: return NRF_P1;
   202aa:	4a09      	ldr	r2, [pc, #36]	; (202d0 <gpio_nrfx_pin_interrupt_configure+0xc4>)
   202ac:	e7ea      	b.n	20284 <gpio_nrfx_pin_interrupt_configure+0x78>
			err = nrfx_gpiote_channel_alloc(&ch);
   202ae:	f10d 000f 	add.w	r0, sp, #15
   202b2:	f005 f8d1 	bl	25458 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   202b6:	4b04      	ldr	r3, [pc, #16]	; (202c8 <gpio_nrfx_pin_interrupt_configure+0xbc>)
   202b8:	4298      	cmp	r0, r3
   202ba:	d0f2      	beq.n	202a2 <gpio_nrfx_pin_interrupt_configure+0x96>
				return -ENOMEM;
   202bc:	f06f 000b 	mvn.w	r0, #11
   202c0:	e7d2      	b.n	20268 <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EINVAL;
   202c2:	f06f 0015 	mvn.w	r0, #21
   202c6:	e7cf      	b.n	20268 <gpio_nrfx_pin_interrupt_configure+0x5c>
   202c8:	0bad0000 	.word	0x0bad0000
   202cc:	0bad0004 	.word	0x0bad0004
   202d0:	50000300 	.word	0x50000300

000202d4 <gpio_nrfx_pin_configure>:
{
   202d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   202d8:	b086      	sub	sp, #24
   202da:	460e      	mov	r6, r1
   202dc:	4614      	mov	r4, r2
	return port->config;
   202de:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   202e2:	f898 300c 	ldrb.w	r3, [r8, #12]
   202e6:	f001 051f 	and.w	r5, r1, #31
   202ea:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   202ee:	f10d 0117 	add.w	r1, sp, #23
   202f2:	4628      	mov	r0, r5
   202f4:	f005 f85c 	bl	253b0 <nrfx_gpiote_channel_get>
   202f8:	4607      	mov	r7, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   202fa:	f414 3f40 	tst.w	r4, #196608	; 0x30000
   202fe:	d03a      	beq.n	20376 <gpio_nrfx_pin_configure+0xa2>
	nrfx_gpiote_trigger_config_t trigger_config = {
   20300:	2100      	movs	r1, #0
   20302:	9103      	str	r1, [sp, #12]
   20304:	9104      	str	r1, [sp, #16]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   20306:	460b      	mov	r3, r1
   20308:	aa03      	add	r2, sp, #12
   2030a:	4628      	mov	r0, r5
   2030c:	f004 ff4c 	bl	251a8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   20310:	4b33      	ldr	r3, [pc, #204]	; (203e0 <gpio_nrfx_pin_configure+0x10c>)
   20312:	4298      	cmp	r0, r3
   20314:	d161      	bne.n	203da <gpio_nrfx_pin_configure+0x106>
	if (free_ch) {
   20316:	429f      	cmp	r7, r3
   20318:	d03d      	beq.n	20396 <gpio_nrfx_pin_configure+0xc2>
	if (flags & GPIO_OUTPUT) {
   2031a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
   2031e:	d049      	beq.n	203b4 <gpio_nrfx_pin_configure+0xe0>
		int rv = get_drive(flags, &drive);
   20320:	f10d 0103 	add.w	r1, sp, #3
   20324:	4620      	mov	r0, r4
   20326:	f00c ff9f 	bl	2d268 <get_drive>
		if (rv != 0) {
   2032a:	4607      	mov	r7, r0
   2032c:	bb50      	cbnz	r0, 20384 <gpio_nrfx_pin_configure+0xb0>
		nrfx_gpiote_output_config_t output_config = {
   2032e:	f89d 3003 	ldrb.w	r3, [sp, #3]
   20332:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   20336:	f414 3f80 	tst.w	r4, #65536	; 0x10000
   2033a:	bf0c      	ite	eq
   2033c:	2301      	moveq	r3, #1
   2033e:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
   20340:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
   20344:	4620      	mov	r0, r4
   20346:	f00c ffd2 	bl	2d2ee <get_pull>
		nrfx_gpiote_output_config_t output_config = {
   2034a:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   2034e:	f414 2f00 	tst.w	r4, #524288	; 0x80000
   20352:	d025      	beq.n	203a0 <gpio_nrfx_pin_configure+0xcc>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   20354:	f8d8 2004 	ldr.w	r2, [r8, #4]
   20358:	2301      	movs	r3, #1
   2035a:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
   2035c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   20360:	2200      	movs	r2, #0
   20362:	a901      	add	r1, sp, #4
   20364:	4628      	mov	r0, r5
   20366:	f004 ffb3 	bl	252d0 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   2036a:	4b1d      	ldr	r3, [pc, #116]	; (203e0 <gpio_nrfx_pin_configure+0x10c>)
   2036c:	4298      	cmp	r0, r3
   2036e:	d009      	beq.n	20384 <gpio_nrfx_pin_configure+0xb0>
   20370:	f06f 0715 	mvn.w	r7, #21
   20374:	e006      	b.n	20384 <gpio_nrfx_pin_configure+0xb0>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   20376:	4628      	mov	r0, r5
   20378:	f005 f8ca 	bl	25510 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   2037c:	4b18      	ldr	r3, [pc, #96]	; (203e0 <gpio_nrfx_pin_configure+0x10c>)
   2037e:	429f      	cmp	r7, r3
   20380:	d004      	beq.n	2038c <gpio_nrfx_pin_configure+0xb8>
		return 0;
   20382:	2700      	movs	r7, #0
}
   20384:	4638      	mov	r0, r7
   20386:	b006      	add	sp, #24
   20388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			err = nrfx_gpiote_channel_free(ch);
   2038c:	f89d 0017 	ldrb.w	r0, [sp, #23]
   20390:	f005 f85a 	bl	25448 <nrfx_gpiote_channel_free>
   20394:	e7f5      	b.n	20382 <gpio_nrfx_pin_configure+0xae>
		err = nrfx_gpiote_channel_free(ch);
   20396:	f89d 0017 	ldrb.w	r0, [sp, #23]
   2039a:	f005 f855 	bl	25448 <nrfx_gpiote_channel_free>
   2039e:	e7bc      	b.n	2031a <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   203a0:	f414 2f80 	tst.w	r4, #262144	; 0x40000
   203a4:	d0dc      	beq.n	20360 <gpio_nrfx_pin_configure+0x8c>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   203a6:	f8d8 2004 	ldr.w	r2, [r8, #4]
   203aa:	2301      	movs	r3, #1
   203ac:	40b3      	lsls	r3, r6
    p_reg->OUTCLR = clr_mask;
   203ae:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   203b2:	e7d5      	b.n	20360 <gpio_nrfx_pin_configure+0x8c>
		.pull = get_pull(flags)
   203b4:	4620      	mov	r0, r4
   203b6:	f00c ff9a 	bl	2d2ee <get_pull>
	nrfx_gpiote_input_config_t input_config = {
   203ba:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   203be:	2300      	movs	r3, #0
   203c0:	461a      	mov	r2, r3
   203c2:	a902      	add	r1, sp, #8
   203c4:	4628      	mov	r0, r5
   203c6:	f004 feef 	bl	251a8 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   203ca:	4b05      	ldr	r3, [pc, #20]	; (203e0 <gpio_nrfx_pin_configure+0x10c>)
   203cc:	4298      	cmp	r0, r3
   203ce:	d101      	bne.n	203d4 <gpio_nrfx_pin_configure+0x100>
   203d0:	2700      	movs	r7, #0
   203d2:	e7d7      	b.n	20384 <gpio_nrfx_pin_configure+0xb0>
   203d4:	f06f 0715 	mvn.w	r7, #21
   203d8:	e7d4      	b.n	20384 <gpio_nrfx_pin_configure+0xb0>
		return -EINVAL;
   203da:	f06f 0715 	mvn.w	r7, #21
   203de:	e7d1      	b.n	20384 <gpio_nrfx_pin_configure+0xb0>
   203e0:	0bad0000 	.word	0x0bad0000

000203e4 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   203e4:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   203e6:	f005 f825 	bl	25434 <nrfx_gpiote_is_init>
   203ea:	b108      	cbz	r0, 203f0 <gpio_nrfx_init+0xc>
		return 0;
   203ec:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   203ee:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
   203f0:	f004 fff6 	bl	253e0 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   203f4:	4b08      	ldr	r3, [pc, #32]	; (20418 <gpio_nrfx_init+0x34>)
   203f6:	4298      	cmp	r0, r3
   203f8:	d10a      	bne.n	20410 <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   203fa:	2100      	movs	r1, #0
   203fc:	4807      	ldr	r0, [pc, #28]	; (2041c <gpio_nrfx_init+0x38>)
   203fe:	f004 ffd1 	bl	253a4 <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   20402:	2200      	movs	r2, #0
   20404:	2105      	movs	r1, #5
   20406:	2006      	movs	r0, #6
   20408:	f009 fade 	bl	299c8 <z_arm_irq_priority_set>
	return 0;
   2040c:	2000      	movs	r0, #0
   2040e:	e7ee      	b.n	203ee <gpio_nrfx_init+0xa>
		return -EIO;
   20410:	f06f 0004 	mvn.w	r0, #4
   20414:	e7eb      	b.n	203ee <gpio_nrfx_init+0xa>
   20416:	bf00      	nop
   20418:	0bad0000 	.word	0x0bad0000
   2041c:	0002d397 	.word	0x0002d397

00020420 <get_nrf_spi_frequency>:

static inline nrf_spi_frequency_t get_nrf_spi_frequency(uint32_t frequency)
{
	/* Get the highest supported frequency not exceeding the requested one.
	 */
	if (frequency < 250000) {
   20420:	4b13      	ldr	r3, [pc, #76]	; (20470 <get_nrf_spi_frequency+0x50>)
   20422:	4298      	cmp	r0, r3
   20424:	d911      	bls.n	2044a <get_nrf_spi_frequency+0x2a>
		return NRF_SPI_FREQ_125K;
	} else if (frequency < 500000) {
   20426:	4b13      	ldr	r3, [pc, #76]	; (20474 <get_nrf_spi_frequency+0x54>)
   20428:	4298      	cmp	r0, r3
   2042a:	d911      	bls.n	20450 <get_nrf_spi_frequency+0x30>
		return NRF_SPI_FREQ_250K;
	} else if (frequency < 1000000) {
   2042c:	4b12      	ldr	r3, [pc, #72]	; (20478 <get_nrf_spi_frequency+0x58>)
   2042e:	4298      	cmp	r0, r3
   20430:	d911      	bls.n	20456 <get_nrf_spi_frequency+0x36>
		return NRF_SPI_FREQ_500K;
	} else if (frequency < 2000000) {
   20432:	4b12      	ldr	r3, [pc, #72]	; (2047c <get_nrf_spi_frequency+0x5c>)
   20434:	4298      	cmp	r0, r3
   20436:	d911      	bls.n	2045c <get_nrf_spi_frequency+0x3c>
		return NRF_SPI_FREQ_1M;
	} else if (frequency < 4000000) {
   20438:	4b11      	ldr	r3, [pc, #68]	; (20480 <get_nrf_spi_frequency+0x60>)
   2043a:	4298      	cmp	r0, r3
   2043c:	d911      	bls.n	20462 <get_nrf_spi_frequency+0x42>
		return NRF_SPI_FREQ_2M;
	} else if (frequency < 8000000) {
   2043e:	4b11      	ldr	r3, [pc, #68]	; (20484 <get_nrf_spi_frequency+0x64>)
   20440:	4298      	cmp	r0, r3
   20442:	d211      	bcs.n	20468 <get_nrf_spi_frequency+0x48>
		return NRF_SPI_FREQ_4M;
   20444:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   20448:	4770      	bx	lr
		return NRF_SPI_FREQ_125K;
   2044a:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
   2044e:	4770      	bx	lr
		return NRF_SPI_FREQ_250K;
   20450:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
   20454:	4770      	bx	lr
		return NRF_SPI_FREQ_500K;
   20456:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   2045a:	4770      	bx	lr
		return NRF_SPI_FREQ_1M;
   2045c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   20460:	4770      	bx	lr
		return NRF_SPI_FREQ_2M;
   20462:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
   20466:	4770      	bx	lr
	} else {
		return NRF_SPI_FREQ_8M;
   20468:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
	}
}
   2046c:	4770      	bx	lr
   2046e:	bf00      	nop
   20470:	0003d08f 	.word	0x0003d08f
   20474:	0007a11f 	.word	0x0007a11f
   20478:	000f423f 	.word	0x000f423f
   2047c:	001e847f 	.word	0x001e847f
   20480:	003d08ff 	.word	0x003d08ff
   20484:	007a1200 	.word	0x007a1200

00020488 <spi_context_wait_for_completion>:
	}
#endif /* CONFIG_SPI_ASYNC */
}

static inline int spi_context_wait_for_completion(struct spi_context *ctx)
{
   20488:	b530      	push	{r4, r5, lr}
   2048a:	b083      	sub	sp, #12
   2048c:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_SPI_SLAVE) && spi_context_is_slave(ctx)) {
		timeout = K_FOREVER;
	} else {
		uint32_t timeout_ms;

		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   2048e:	6e03      	ldr	r3, [r0, #96]	; 0x60
   20490:	6d82      	ldr	r2, [r0, #88]	; 0x58
   20492:	4293      	cmp	r3, r2
   20494:	bf38      	it	cc
   20496:	4613      	movcc	r3, r2
   20498:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
   2049c:	fb02 f303 	mul.w	r3, r2, r3
			     ctx->config->frequency;
   204a0:	4605      	mov	r5, r0
   204a2:	f855 2b28 	ldr.w	r2, [r5], #40
   204a6:	6812      	ldr	r2, [r2, #0]
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   204a8:	fbb3 f3f2 	udiv	r3, r3, r2
		timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
   204ac:	33c8      	adds	r3, #200	; 0xc8
   204ae:	0c59      	lsrs	r1, r3, #17
   204b0:	03db      	lsls	r3, r3, #15
   204b2:	f240 32e7 	movw	r2, #999	; 0x3e7
   204b6:	1898      	adds	r0, r3, r2
   204b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   204bc:	f04f 0300 	mov.w	r3, #0
   204c0:	f141 0100 	adc.w	r1, r1, #0
   204c4:	f7df fe1c 	bl	100 <__aeabi_uldivmod>
   204c8:	4602      	mov	r2, r0
   204ca:	460b      	mov	r3, r1
   204cc:	4628      	mov	r0, r5
   204ce:	f006 f899 	bl	26604 <z_impl_k_sem_take>
			return -ETIMEDOUT;
		}
		status = ctx->sync_status;
	}
#else
	if (k_sem_take(&ctx->sync, timeout)) {
   204d2:	b910      	cbnz	r0, 204da <spi_context_wait_for_completion+0x52>
		LOG_ERR("Timeout waiting for transfer complete");
		return -ETIMEDOUT;
	}
	status = ctx->sync_status;
   204d4:	6c20      	ldr	r0, [r4, #64]	; 0x40
		return ctx->recv_frames;
	}
#endif /* CONFIG_SPI_SLAVE */

	return status;
}
   204d6:	b003      	add	sp, #12
   204d8:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("Timeout waiting for transfer complete");
   204da:	2006      	movs	r0, #6
   204dc:	f7f3 fc14 	bl	13d08 <z_log_msg_alloc>
   204e0:	2200      	movs	r2, #0
   204e2:	f36f 0200 	bfc	r2, #0, #1
   204e6:	f36f 0241 	bfc	r2, #1, #1
   204ea:	f36f 0282 	bfc	r2, #2, #1
   204ee:	f36f 02c5 	bfc	r2, #3, #3
   204f2:	2301      	movs	r3, #1
   204f4:	f363 1288 	bfi	r2, r3, #6, #3
   204f8:	2308      	movs	r3, #8
   204fa:	f363 2252 	bfi	r2, r3, #9, #10
   204fe:	f36f 42de 	bfc	r2, #19, #12
   20502:	f36f 72df 	bfc	r2, #31, #1
   20506:	4604      	mov	r4, r0
   20508:	b188      	cbz	r0, 2052e <spi_context_wait_for_completion+0xa6>
   2050a:	f110 0310 	adds.w	r3, r0, #16
   2050e:	d001      	beq.n	20514 <spi_context_wait_for_completion+0x8c>
   20510:	490b      	ldr	r1, [pc, #44]	; (20540 <spi_context_wait_for_completion+0xb8>)
   20512:	6141      	str	r1, [r0, #20]
   20514:	b15b      	cbz	r3, 2052e <spi_context_wait_for_completion+0xa6>
   20516:	2302      	movs	r3, #2
   20518:	f88d 3004 	strb.w	r3, [sp, #4]
   2051c:	2300      	movs	r3, #0
   2051e:	f88d 3005 	strb.w	r3, [sp, #5]
   20522:	f88d 3006 	strb.w	r3, [sp, #6]
   20526:	f88d 3007 	strb.w	r3, [sp, #7]
   2052a:	9801      	ldr	r0, [sp, #4]
   2052c:	6120      	str	r0, [r4, #16]
   2052e:	2300      	movs	r3, #0
   20530:	4904      	ldr	r1, [pc, #16]	; (20544 <spi_context_wait_for_completion+0xbc>)
   20532:	4620      	mov	r0, r4
   20534:	f008 fe51 	bl	291da <z_log_msg_finalize>
		return -ETIMEDOUT;
   20538:	f06f 0073 	mvn.w	r0, #115	; 0x73
   2053c:	e7cb      	b.n	204d6 <spi_context_wait_for_completion+0x4e>
   2053e:	bf00      	nop
   20540:	00033d38 	.word	0x00033d38
   20544:	000314f0 	.word	0x000314f0

00020548 <configure>:
	}
}

static int configure(const struct device *dev,
		     const struct spi_config *spi_cfg)
{
   20548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2054c:	b088      	sub	sp, #32
   2054e:	af00      	add	r7, sp, #0
   20550:	460c      	mov	r4, r1
	struct spi_nrfx_data *dev_data = dev->data;
   20552:	6905      	ldr	r5, [r0, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
   20554:	6846      	ldr	r6, [r0, #4]
	struct spi_context *ctx = &dev_data->ctx;
	nrfx_spi_config_t config;
	nrfx_err_t result;

	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
   20556:	f895 806d 	ldrb.w	r8, [r5, #109]	; 0x6d
   2055a:	f1b8 0f00 	cmp.w	r8, #0
   2055e:	d003      	beq.n	20568 <configure+0x20>
	return !!(ctx->config == config);
   20560:	682b      	ldr	r3, [r5, #0]
   20562:	428b      	cmp	r3, r1
   20564:	f000 81b1 	beq.w	208ca <configure+0x382>
		/* Already configured. No need to do it again. */
		return 0;
	}

	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
   20568:	88a3      	ldrh	r3, [r4, #4]
   2056a:	f413 6f00 	tst.w	r3, #2048	; 0x800
   2056e:	d14b      	bne.n	20608 <configure+0xc0>
		LOG_ERR("Half-duplex not supported");
		return -ENOTSUP;
	}

	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
   20570:	f013 0f01 	tst.w	r3, #1
   20574:	d176      	bne.n	20664 <configure+0x11c>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
		return -EINVAL;
	}

	if (spi_cfg->operation & SPI_MODE_LOOP) {
   20576:	f013 0f08 	tst.w	r3, #8
   2057a:	f040 80c9 	bne.w	20710 <configure+0x1c8>
	    (spi_cfg->operation & SPI_LINES_MASK) != SPI_LINES_SINGLE) {
		LOG_ERR("Only single line mode is supported");
		return -EINVAL;
	}

	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
   2057e:	f3c3 1345 	ubfx	r3, r3, #5, #6
   20582:	2b08      	cmp	r3, #8
   20584:	f040 80f2 	bne.w	2076c <configure+0x224>
		LOG_ERR("Word sizes other than 8 bits are not supported");
		return -EINVAL;
	}

	if (spi_cfg->frequency < 125000) {
   20588:	6822      	ldr	r2, [r4, #0]
   2058a:	4baf      	ldr	r3, [pc, #700]	; (20848 <configure+0x300>)
   2058c:	429a      	cmp	r2, r3
   2058e:	f240 811b 	bls.w	207c8 <configure+0x280>
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
		return -EINVAL;
	}

	config = dev_config->def_config;
   20592:	f107 0c0c 	add.w	ip, r7, #12
   20596:	f106 0e08 	add.w	lr, r6, #8
   2059a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   2059e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   205a2:	f8de 3000 	ldr.w	r3, [lr]
   205a6:	f8cc 3000 	str.w	r3, [ip]

	config.frequency = get_nrf_spi_frequency(spi_cfg->frequency);
   205aa:	6820      	ldr	r0, [r4, #0]
   205ac:	f7ff ff38 	bl	20420 <get_nrf_spi_frequency>
   205b0:	6178      	str	r0, [r7, #20]
	config.mode      = get_nrf_spi_mode(spi_cfg->operation);
   205b2:	88a3      	ldrh	r3, [r4, #4]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   205b4:	f013 0f02 	tst.w	r3, #2
   205b8:	f000 8134 	beq.w	20824 <configure+0x2dc>
		if (SPI_MODE_GET(operation) & SPI_MODE_CPHA) {
   205bc:	f013 0f04 	tst.w	r3, #4
   205c0:	f000 8135 	beq.w	2082e <configure+0x2e6>
			return NRF_SPI_MODE_3;
   205c4:	2303      	movs	r3, #3
	config.mode      = get_nrf_spi_mode(spi_cfg->operation);
   205c6:	763b      	strb	r3, [r7, #24]
	config.bit_order = get_nrf_spi_bit_order(spi_cfg->operation);
   205c8:	88a3      	ldrh	r3, [r4, #4]
	if (operation & SPI_TRANSFER_LSB) {
   205ca:	f013 0f10 	tst.w	r3, #16
   205ce:	f000 8132 	beq.w	20836 <configure+0x2ee>
		return NRF_SPI_BIT_ORDER_LSB_FIRST;
   205d2:	2301      	movs	r3, #1
	config.bit_order = get_nrf_spi_bit_order(spi_cfg->operation);
   205d4:	767b      	strb	r3, [r7, #25]

	if (dev_data->initialized) {
   205d6:	f1b8 0f00 	cmp.w	r8, #0
   205da:	f040 812e 	bne.w	2083a <configure+0x2f2>
		nrfx_spi_uninit(&dev_config->spi);
		dev_data->initialized = false;
	}

	result = nrfx_spi_init(&dev_config->spi, &config,
   205de:	462b      	mov	r3, r5
   205e0:	4a9a      	ldr	r2, [pc, #616]	; (2084c <configure+0x304>)
   205e2:	f107 010c 	add.w	r1, r7, #12
   205e6:	4630      	mov	r0, r6
   205e8:	f005 f8f4 	bl	257d4 <nrfx_spi_init>
   205ec:	4606      	mov	r6, r0
			       event_handler, dev_data);
	if (result != NRFX_SUCCESS) {
   205ee:	4b98      	ldr	r3, [pc, #608]	; (20850 <configure+0x308>)
   205f0:	4298      	cmp	r0, r3
   205f2:	f040 813b 	bne.w	2086c <configure+0x324>
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
		return -EIO;
	}

	dev_data->initialized = true;
   205f6:	2301      	movs	r3, #1
   205f8:	f885 306d 	strb.w	r3, [r5, #109]	; 0x6d

	ctx->config = spi_cfg;
   205fc:	602c      	str	r4, [r5, #0]

	return 0;
   205fe:	2000      	movs	r0, #0
}
   20600:	3720      	adds	r7, #32
   20602:	46bd      	mov	sp, r7
   20604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERR("Half-duplex not supported");
   20608:	2006      	movs	r0, #6
   2060a:	f7f3 fb7d 	bl	13d08 <z_log_msg_alloc>
   2060e:	2200      	movs	r2, #0
   20610:	f36f 0200 	bfc	r2, #0, #1
   20614:	f36f 0241 	bfc	r2, #1, #1
   20618:	f36f 0282 	bfc	r2, #2, #1
   2061c:	f36f 02c5 	bfc	r2, #3, #3
   20620:	2301      	movs	r3, #1
   20622:	f363 1288 	bfi	r2, r3, #6, #3
   20626:	2308      	movs	r3, #8
   20628:	f363 2252 	bfi	r2, r3, #9, #10
   2062c:	f36f 42de 	bfc	r2, #19, #12
   20630:	f36f 72df 	bfc	r2, #31, #1
   20634:	4604      	mov	r4, r0
   20636:	b168      	cbz	r0, 20654 <configure+0x10c>
   20638:	f110 0310 	adds.w	r3, r0, #16
   2063c:	d001      	beq.n	20642 <configure+0xfa>
   2063e:	4985      	ldr	r1, [pc, #532]	; (20854 <configure+0x30c>)
   20640:	6141      	str	r1, [r0, #20]
   20642:	b13b      	cbz	r3, 20654 <configure+0x10c>
   20644:	2302      	movs	r3, #2
   20646:	723b      	strb	r3, [r7, #8]
   20648:	2300      	movs	r3, #0
   2064a:	727b      	strb	r3, [r7, #9]
   2064c:	72bb      	strb	r3, [r7, #10]
   2064e:	72fb      	strb	r3, [r7, #11]
   20650:	68b8      	ldr	r0, [r7, #8]
   20652:	6120      	str	r0, [r4, #16]
   20654:	2300      	movs	r3, #0
   20656:	4980      	ldr	r1, [pc, #512]	; (20858 <configure+0x310>)
   20658:	4620      	mov	r0, r4
   2065a:	f008 fdbe 	bl	291da <z_log_msg_finalize>
		return -ENOTSUP;
   2065e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   20662:	e7cd      	b.n	20600 <configure+0xb8>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
   20664:	6801      	ldr	r1, [r0, #0]
   20666:	466d      	mov	r5, sp
   20668:	2300      	movs	r3, #0
   2066a:	723b      	strb	r3, [r7, #8]
   2066c:	2302      	movs	r3, #2
   2066e:	727b      	strb	r3, [r7, #9]
   20670:	b088      	sub	sp, #32
   20672:	466c      	mov	r4, sp
   20674:	f114 0210 	adds.w	r2, r4, #16
   20678:	d011      	beq.n	2069e <configure+0x156>
   2067a:	200e      	movs	r0, #14
   2067c:	b11a      	cbz	r2, 20686 <configure+0x13e>
   2067e:	2804      	cmp	r0, #4
   20680:	dd01      	ble.n	20686 <configure+0x13e>
   20682:	4b76      	ldr	r3, [pc, #472]	; (2085c <configure+0x314>)
   20684:	6163      	str	r3, [r4, #20]
   20686:	2300      	movs	r3, #0
   20688:	713b      	strb	r3, [r7, #4]
   2068a:	2302      	movs	r3, #2
   2068c:	717b      	strb	r3, [r7, #5]
   2068e:	b19a      	cbz	r2, 206b8 <configure+0x170>
   20690:	2808      	cmp	r0, #8
   20692:	dd00      	ble.n	20696 <configure+0x14e>
   20694:	61a1      	str	r1, [r4, #24]
   20696:	f104 031c 	add.w	r3, r4, #28
   2069a:	2100      	movs	r1, #0
   2069c:	e00a      	b.n	206b4 <configure+0x16c>
   2069e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   206a2:	e7eb      	b.n	2067c <configure+0x134>
   206a4:	f101 0620 	add.w	r6, r1, #32
   206a8:	443e      	add	r6, r7
   206aa:	f816 6c1c 	ldrb.w	r6, [r6, #-28]
   206ae:	f803 6b01 	strb.w	r6, [r3], #1
   206b2:	3101      	adds	r1, #1
   206b4:	2901      	cmp	r1, #1
   206b6:	d9f5      	bls.n	206a4 <configure+0x15c>
   206b8:	280d      	cmp	r0, #13
   206ba:	dd26      	ble.n	2070a <configure+0x1c2>
   206bc:	230e      	movs	r3, #14
   206be:	b142      	cbz	r2, 206d2 <configure+0x18a>
   206c0:	2103      	movs	r1, #3
   206c2:	7239      	strb	r1, [r7, #8]
   206c4:	2100      	movs	r1, #0
   206c6:	7279      	strb	r1, [r7, #9]
   206c8:	72b9      	strb	r1, [r7, #10]
   206ca:	2101      	movs	r1, #1
   206cc:	72f9      	strb	r1, [r7, #11]
   206ce:	68b8      	ldr	r0, [r7, #8]
   206d0:	6120      	str	r0, [r4, #16]
   206d2:	2100      	movs	r1, #0
   206d4:	f36f 0100 	bfc	r1, #0, #1
   206d8:	f36f 0141 	bfc	r1, #1, #1
   206dc:	f36f 0182 	bfc	r1, #2, #1
   206e0:	f36f 01c5 	bfc	r1, #3, #3
   206e4:	2001      	movs	r0, #1
   206e6:	f360 1188 	bfi	r1, r0, #6, #3
   206ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
   206ee:	f363 2152 	bfi	r1, r3, #9, #10
   206f2:	f36f 41de 	bfc	r1, #19, #12
   206f6:	f36f 71df 	bfc	r1, #31, #1
   206fa:	2300      	movs	r3, #0
   206fc:	4856      	ldr	r0, [pc, #344]	; (20858 <configure+0x310>)
   206fe:	f008 fd84 	bl	2920a <z_impl_z_log_msg_static_create>
   20702:	46ad      	mov	sp, r5
		return -EINVAL;
   20704:	f06f 0015 	mvn.w	r0, #21
   20708:	e77a      	b.n	20600 <configure+0xb8>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
   2070a:	f06f 031b 	mvn.w	r3, #27
   2070e:	e7d6      	b.n	206be <configure+0x176>
		LOG_ERR("Loopback mode is not supported");
   20710:	2006      	movs	r0, #6
   20712:	f7f3 faf9 	bl	13d08 <z_log_msg_alloc>
   20716:	2200      	movs	r2, #0
   20718:	f36f 0200 	bfc	r2, #0, #1
   2071c:	f36f 0241 	bfc	r2, #1, #1
   20720:	f36f 0282 	bfc	r2, #2, #1
   20724:	f36f 02c5 	bfc	r2, #3, #3
   20728:	2301      	movs	r3, #1
   2072a:	f363 1288 	bfi	r2, r3, #6, #3
   2072e:	2308      	movs	r3, #8
   20730:	f363 2252 	bfi	r2, r3, #9, #10
   20734:	f36f 42de 	bfc	r2, #19, #12
   20738:	f36f 72df 	bfc	r2, #31, #1
   2073c:	4604      	mov	r4, r0
   2073e:	b168      	cbz	r0, 2075c <configure+0x214>
   20740:	f110 0310 	adds.w	r3, r0, #16
   20744:	d001      	beq.n	2074a <configure+0x202>
   20746:	4946      	ldr	r1, [pc, #280]	; (20860 <configure+0x318>)
   20748:	6141      	str	r1, [r0, #20]
   2074a:	b13b      	cbz	r3, 2075c <configure+0x214>
   2074c:	2302      	movs	r3, #2
   2074e:	723b      	strb	r3, [r7, #8]
   20750:	2300      	movs	r3, #0
   20752:	727b      	strb	r3, [r7, #9]
   20754:	72bb      	strb	r3, [r7, #10]
   20756:	72fb      	strb	r3, [r7, #11]
   20758:	68b8      	ldr	r0, [r7, #8]
   2075a:	6120      	str	r0, [r4, #16]
   2075c:	2300      	movs	r3, #0
   2075e:	493e      	ldr	r1, [pc, #248]	; (20858 <configure+0x310>)
   20760:	4620      	mov	r0, r4
   20762:	f008 fd3a 	bl	291da <z_log_msg_finalize>
		return -EINVAL;
   20766:	f06f 0015 	mvn.w	r0, #21
   2076a:	e749      	b.n	20600 <configure+0xb8>
		LOG_ERR("Word sizes other than 8 bits are not supported");
   2076c:	2006      	movs	r0, #6
   2076e:	f7f3 facb 	bl	13d08 <z_log_msg_alloc>
   20772:	2200      	movs	r2, #0
   20774:	f36f 0200 	bfc	r2, #0, #1
   20778:	f36f 0241 	bfc	r2, #1, #1
   2077c:	f36f 0282 	bfc	r2, #2, #1
   20780:	f36f 02c5 	bfc	r2, #3, #3
   20784:	2301      	movs	r3, #1
   20786:	f363 1288 	bfi	r2, r3, #6, #3
   2078a:	2308      	movs	r3, #8
   2078c:	f363 2252 	bfi	r2, r3, #9, #10
   20790:	f36f 42de 	bfc	r2, #19, #12
   20794:	f36f 72df 	bfc	r2, #31, #1
   20798:	4604      	mov	r4, r0
   2079a:	b168      	cbz	r0, 207b8 <configure+0x270>
   2079c:	f110 0310 	adds.w	r3, r0, #16
   207a0:	d001      	beq.n	207a6 <configure+0x25e>
   207a2:	4930      	ldr	r1, [pc, #192]	; (20864 <configure+0x31c>)
   207a4:	6141      	str	r1, [r0, #20]
   207a6:	b13b      	cbz	r3, 207b8 <configure+0x270>
   207a8:	2302      	movs	r3, #2
   207aa:	723b      	strb	r3, [r7, #8]
   207ac:	2300      	movs	r3, #0
   207ae:	727b      	strb	r3, [r7, #9]
   207b0:	72bb      	strb	r3, [r7, #10]
   207b2:	72fb      	strb	r3, [r7, #11]
   207b4:	68b8      	ldr	r0, [r7, #8]
   207b6:	6120      	str	r0, [r4, #16]
   207b8:	2300      	movs	r3, #0
   207ba:	4927      	ldr	r1, [pc, #156]	; (20858 <configure+0x310>)
   207bc:	4620      	mov	r0, r4
   207be:	f008 fd0c 	bl	291da <z_log_msg_finalize>
		return -EINVAL;
   207c2:	f06f 0015 	mvn.w	r0, #21
   207c6:	e71b      	b.n	20600 <configure+0xb8>
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
   207c8:	2006      	movs	r0, #6
   207ca:	f7f3 fa9d 	bl	13d08 <z_log_msg_alloc>
   207ce:	2200      	movs	r2, #0
   207d0:	f36f 0200 	bfc	r2, #0, #1
   207d4:	f36f 0241 	bfc	r2, #1, #1
   207d8:	f36f 0282 	bfc	r2, #2, #1
   207dc:	f36f 02c5 	bfc	r2, #3, #3
   207e0:	2301      	movs	r3, #1
   207e2:	f363 1288 	bfi	r2, r3, #6, #3
   207e6:	2308      	movs	r3, #8
   207e8:	f363 2252 	bfi	r2, r3, #9, #10
   207ec:	f36f 42de 	bfc	r2, #19, #12
   207f0:	f36f 72df 	bfc	r2, #31, #1
   207f4:	4604      	mov	r4, r0
   207f6:	b168      	cbz	r0, 20814 <configure+0x2cc>
   207f8:	f110 0310 	adds.w	r3, r0, #16
   207fc:	d001      	beq.n	20802 <configure+0x2ba>
   207fe:	491a      	ldr	r1, [pc, #104]	; (20868 <configure+0x320>)
   20800:	6141      	str	r1, [r0, #20]
   20802:	b13b      	cbz	r3, 20814 <configure+0x2cc>
   20804:	2302      	movs	r3, #2
   20806:	723b      	strb	r3, [r7, #8]
   20808:	2300      	movs	r3, #0
   2080a:	727b      	strb	r3, [r7, #9]
   2080c:	72bb      	strb	r3, [r7, #10]
   2080e:	72fb      	strb	r3, [r7, #11]
   20810:	68b8      	ldr	r0, [r7, #8]
   20812:	6120      	str	r0, [r4, #16]
   20814:	2300      	movs	r3, #0
   20816:	4910      	ldr	r1, [pc, #64]	; (20858 <configure+0x310>)
   20818:	4620      	mov	r0, r4
   2081a:	f008 fcde 	bl	291da <z_log_msg_finalize>
		return -EINVAL;
   2081e:	f06f 0015 	mvn.w	r0, #21
   20822:	e6ed      	b.n	20600 <configure+0xb8>
		if (SPI_MODE_GET(operation) & SPI_MODE_CPHA) {
   20824:	f013 0f04 	tst.w	r3, #4
   20828:	d003      	beq.n	20832 <configure+0x2ea>
			return NRF_SPI_MODE_1;
   2082a:	2301      	movs	r3, #1
   2082c:	e6cb      	b.n	205c6 <configure+0x7e>
			return NRF_SPI_MODE_2;
   2082e:	2302      	movs	r3, #2
   20830:	e6c9      	b.n	205c6 <configure+0x7e>
			return NRF_SPI_MODE_0;
   20832:	2300      	movs	r3, #0
   20834:	e6c7      	b.n	205c6 <configure+0x7e>
		return NRF_SPI_BIT_ORDER_MSB_FIRST;
   20836:	2300      	movs	r3, #0
   20838:	e6cc      	b.n	205d4 <configure+0x8c>
		nrfx_spi_uninit(&dev_config->spi);
   2083a:	4630      	mov	r0, r6
   2083c:	f005 f814 	bl	25868 <nrfx_spi_uninit>
		dev_data->initialized = false;
   20840:	2300      	movs	r3, #0
   20842:	f885 306d 	strb.w	r3, [r5, #109]	; 0x6d
   20846:	e6ca      	b.n	205de <configure+0x96>
   20848:	0001e847 	.word	0x0001e847
   2084c:	00020959 	.word	0x00020959
   20850:	0bad0000 	.word	0x0bad0000
   20854:	00033d60 	.word	0x00033d60
   20858:	000314f0 	.word	0x000314f0
   2085c:	00033d7c 	.word	0x00033d7c
   20860:	00033da0 	.word	0x00033da0
   20864:	00033dc0 	.word	0x00033dc0
   20868:	00033df0 	.word	0x00033df0
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
   2086c:	2008      	movs	r0, #8
   2086e:	f7f3 fa4b 	bl	13d08 <z_log_msg_alloc>
   20872:	2200      	movs	r2, #0
   20874:	f36f 0200 	bfc	r2, #0, #1
   20878:	f36f 0241 	bfc	r2, #1, #1
   2087c:	f36f 0282 	bfc	r2, #2, #1
   20880:	f36f 02c5 	bfc	r2, #3, #3
   20884:	2301      	movs	r3, #1
   20886:	f363 1288 	bfi	r2, r3, #6, #3
   2088a:	230c      	movs	r3, #12
   2088c:	f363 2252 	bfi	r2, r3, #9, #10
   20890:	f36f 42de 	bfc	r2, #19, #12
   20894:	f36f 72df 	bfc	r2, #31, #1
   20898:	4604      	mov	r4, r0
   2089a:	b170      	cbz	r0, 208ba <configure+0x372>
   2089c:	f110 0310 	adds.w	r3, r0, #16
   208a0:	d002      	beq.n	208a8 <configure+0x360>
   208a2:	490b      	ldr	r1, [pc, #44]	; (208d0 <configure+0x388>)
   208a4:	6141      	str	r1, [r0, #20]
   208a6:	6186      	str	r6, [r0, #24]
   208a8:	b13b      	cbz	r3, 208ba <configure+0x372>
   208aa:	2303      	movs	r3, #3
   208ac:	723b      	strb	r3, [r7, #8]
   208ae:	2300      	movs	r3, #0
   208b0:	727b      	strb	r3, [r7, #9]
   208b2:	72bb      	strb	r3, [r7, #10]
   208b4:	72fb      	strb	r3, [r7, #11]
   208b6:	68b8      	ldr	r0, [r7, #8]
   208b8:	6120      	str	r0, [r4, #16]
   208ba:	2300      	movs	r3, #0
   208bc:	4905      	ldr	r1, [pc, #20]	; (208d4 <configure+0x38c>)
   208be:	4620      	mov	r0, r4
   208c0:	f008 fc8b 	bl	291da <z_log_msg_finalize>
		return -EIO;
   208c4:	f06f 0004 	mvn.w	r0, #4
   208c8:	e69a      	b.n	20600 <configure+0xb8>
		return 0;
   208ca:	2000      	movs	r0, #0
   208cc:	e698      	b.n	20600 <configure+0xb8>
   208ce:	bf00      	nop
   208d0:	00033e24 	.word	0x00033e24
   208d4:	000314f0 	.word	0x000314f0

000208d8 <transfer_next_chunk>:

static void transfer_next_chunk(const struct device *dev)
{
   208d8:	b530      	push	{r4, r5, lr}
   208da:	b085      	sub	sp, #20
   208dc:	4603      	mov	r3, r0
	const struct spi_nrfx_config *dev_config = dev->config;
   208de:	6840      	ldr	r0, [r0, #4]
	struct spi_nrfx_data *dev_data = dev->data;
   208e0:	691c      	ldr	r4, [r3, #16]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
   208e2:	6da2      	ldr	r2, [r4, #88]	; 0x58
   208e4:	b352      	cbz	r2, 2093c <transfer_next_chunk+0x64>
		return ctx->rx_len;
	} else if (!ctx->rx_len) {
   208e6:	6e23      	ldr	r3, [r4, #96]	; 0x60
   208e8:	b353      	cbz	r3, 20940 <transfer_next_chunk+0x68>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
   208ea:	4293      	cmp	r3, r2
   208ec:	bf28      	it	cs
   208ee:	4613      	movcs	r3, r2
	struct spi_context *ctx = &dev_data->ctx;
	int error = 0;

	size_t chunk_len = spi_context_max_continuous_chunk(ctx);

	if (chunk_len > 0) {
   208f0:	b373      	cbz	r3, 20950 <transfer_next_chunk+0x78>
		nrfx_spi_xfer_desc_t xfer;
		nrfx_err_t result;

		dev_data->chunk_len = chunk_len;
   208f2:	66a3      	str	r3, [r4, #104]	; 0x68

		xfer.p_tx_buffer = ctx->tx_buf;
   208f4:	6d61      	ldr	r1, [r4, #84]	; 0x54
   208f6:	9100      	str	r1, [sp, #0]
	return !!(ctx->tx_buf && ctx->tx_len);
   208f8:	b321      	cbz	r1, 20944 <transfer_next_chunk+0x6c>
   208fa:	bb2a      	cbnz	r2, 20948 <transfer_next_chunk+0x70>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   208fc:	9201      	str	r2, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
   208fe:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   20900:	9202      	str	r2, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
   20902:	b31a      	cbz	r2, 2094c <transfer_next_chunk+0x74>
   20904:	6e22      	ldr	r2, [r4, #96]	; 0x60
   20906:	b902      	cbnz	r2, 2090a <transfer_next_chunk+0x32>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   20908:	4613      	mov	r3, r2
   2090a:	9303      	str	r3, [sp, #12]
		result = nrfx_spi_xfer(&dev_config->spi, &xfer, 0);
   2090c:	2200      	movs	r2, #0
   2090e:	4669      	mov	r1, sp
   20910:	f005 f81e 	bl	25950 <nrfx_spi_xfer>
		if (result == NRFX_SUCCESS) {
   20914:	4b0f      	ldr	r3, [pc, #60]	; (20954 <transfer_next_chunk+0x7c>)
   20916:	4298      	cmp	r0, r3
   20918:	d00e      	beq.n	20938 <transfer_next_chunk+0x60>
			return;
		}

		error = -EIO;
   2091a:	f06f 0504 	mvn.w	r5, #4
	_spi_context_cs_control(ctx, on, false);
   2091e:	2200      	movs	r2, #0
   20920:	4611      	mov	r1, r2
   20922:	4620      	mov	r0, r4
   20924:	f00c fddd 	bl	2d4e2 <_spi_context_cs_control>
	ctx->sync_status = status;
   20928:	6425      	str	r5, [r4, #64]	; 0x40
	k_sem_give(&ctx->sync);
   2092a:	f104 0028 	add.w	r0, r4, #40	; 0x28
	z_impl_k_sem_give(sem);
   2092e:	f005 fe41 	bl	265b4 <z_impl_k_sem_give>
	spi_context_cs_control(ctx, false);

	LOG_DBG("Transaction finished with status %d", error);

	spi_context_complete(ctx, dev, error);
	dev_data->busy = false;
   20932:	2300      	movs	r3, #0
   20934:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
}
   20938:	b005      	add	sp, #20
   2093a:	bd30      	pop	{r4, r5, pc}
		return ctx->rx_len;
   2093c:	6e23      	ldr	r3, [r4, #96]	; 0x60
   2093e:	e7d7      	b.n	208f0 <transfer_next_chunk+0x18>
		return ctx->tx_len;
   20940:	4613      	mov	r3, r2
   20942:	e7d5      	b.n	208f0 <transfer_next_chunk+0x18>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   20944:	2200      	movs	r2, #0
   20946:	e7d9      	b.n	208fc <transfer_next_chunk+0x24>
   20948:	461a      	mov	r2, r3
   2094a:	e7d7      	b.n	208fc <transfer_next_chunk+0x24>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   2094c:	2300      	movs	r3, #0
   2094e:	e7dc      	b.n	2090a <transfer_next_chunk+0x32>
	int error = 0;
   20950:	2500      	movs	r5, #0
   20952:	e7e4      	b.n	2091e <transfer_next_chunk+0x46>
   20954:	0bad0000 	.word	0x0bad0000

00020958 <event_handler>:

static void event_handler(const nrfx_spi_evt_t *p_event, void *p_context)
{
	struct spi_nrfx_data *dev_data = p_context;

	if (p_event->type == NRFX_SPI_EVENT_DONE) {
   20958:	7803      	ldrb	r3, [r0, #0]
   2095a:	2b00      	cmp	r3, #0
   2095c:	f040 80a0 	bne.w	20aa0 <event_handler+0x148>
{
   20960:	b510      	push	{r4, lr}
   20962:	b082      	sub	sp, #8
   20964:	460c      	mov	r4, r1
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
   20966:	6e8a      	ldr	r2, [r1, #104]	; 0x68
	if (!ctx->tx_len) {
   20968:	6d8b      	ldr	r3, [r1, #88]	; 0x58
   2096a:	b14b      	cbz	r3, 20980 <event_handler+0x28>
	if (len > ctx->tx_len) {
   2096c:	429a      	cmp	r2, r3
   2096e:	d819      	bhi.n	209a4 <event_handler+0x4c>
	ctx->tx_len -= len;
   20970:	1a9b      	subs	r3, r3, r2
   20972:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->tx_len) {
   20974:	2b00      	cmp	r3, #0
   20976:	d045      	beq.n	20a04 <event_handler+0xac>
	} else if (ctx->tx_buf) {
   20978:	6d4b      	ldr	r3, [r1, #84]	; 0x54
   2097a:	b10b      	cbz	r3, 20980 <event_handler+0x28>
		ctx->tx_buf += dfs * len;
   2097c:	4413      	add	r3, r2
   2097e:	654b      	str	r3, [r1, #84]	; 0x54
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
   20980:	6ea2      	ldr	r2, [r4, #104]	; 0x68
	if (!ctx->rx_len) {
   20982:	6e23      	ldr	r3, [r4, #96]	; 0x60
   20984:	b14b      	cbz	r3, 2099a <event_handler+0x42>
	if (len > ctx->rx_len) {
   20986:	429a      	cmp	r2, r3
   20988:	d84c      	bhi.n	20a24 <event_handler+0xcc>
	ctx->rx_len -= len;
   2098a:	1a9b      	subs	r3, r3, r2
   2098c:	6623      	str	r3, [r4, #96]	; 0x60
	if (!ctx->rx_len) {
   2098e:	2b00      	cmp	r3, #0
   20990:	d075      	beq.n	20a7e <event_handler+0x126>
	} else if (ctx->rx_buf) {
   20992:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   20994:	b10b      	cbz	r3, 2099a <event_handler+0x42>
		ctx->rx_buf += dfs * len;
   20996:	4413      	add	r3, r2
   20998:	65e3      	str	r3, [r4, #92]	; 0x5c

		transfer_next_chunk(dev_data->dev);
   2099a:	6e60      	ldr	r0, [r4, #100]	; 0x64
   2099c:	f7ff ff9c 	bl	208d8 <transfer_next_chunk>
	}
}
   209a0:	b002      	add	sp, #8
   209a2:	bd10      	pop	{r4, pc}
		LOG_ERR("Update exceeds current buffer");
   209a4:	2006      	movs	r0, #6
   209a6:	f7f3 f9af 	bl	13d08 <z_log_msg_alloc>
   209aa:	2200      	movs	r2, #0
   209ac:	f36f 0200 	bfc	r2, #0, #1
   209b0:	f36f 0241 	bfc	r2, #1, #1
   209b4:	f36f 0282 	bfc	r2, #2, #1
   209b8:	f36f 02c5 	bfc	r2, #3, #3
   209bc:	2301      	movs	r3, #1
   209be:	f363 1288 	bfi	r2, r3, #6, #3
   209c2:	2308      	movs	r3, #8
   209c4:	f363 2252 	bfi	r2, r3, #9, #10
   209c8:	f36f 42de 	bfc	r2, #19, #12
   209cc:	f36f 72df 	bfc	r2, #31, #1
   209d0:	4684      	mov	ip, r0
   209d2:	b188      	cbz	r0, 209f8 <event_handler+0xa0>
   209d4:	4b33      	ldr	r3, [pc, #204]	; (20aa4 <event_handler+0x14c>)
   209d6:	6143      	str	r3, [r0, #20]
   209d8:	f110 0f10 	cmn.w	r0, #16
   209dc:	d00c      	beq.n	209f8 <event_handler+0xa0>
   209de:	2302      	movs	r3, #2
   209e0:	f88d 3004 	strb.w	r3, [sp, #4]
   209e4:	2300      	movs	r3, #0
   209e6:	f88d 3005 	strb.w	r3, [sp, #5]
   209ea:	f88d 3006 	strb.w	r3, [sp, #6]
   209ee:	f88d 3007 	strb.w	r3, [sp, #7]
   209f2:	9801      	ldr	r0, [sp, #4]
   209f4:	f8cc 0010 	str.w	r0, [ip, #16]
   209f8:	2300      	movs	r3, #0
   209fa:	492b      	ldr	r1, [pc, #172]	; (20aa8 <event_handler+0x150>)
   209fc:	4660      	mov	r0, ip
   209fe:	f008 fbec 	bl	291da <z_log_msg_finalize>
		return;
   20a02:	e7bd      	b.n	20980 <event_handler+0x28>
		++ctx->current_tx;
   20a04:	6c4b      	ldr	r3, [r1, #68]	; 0x44
   20a06:	3308      	adds	r3, #8
   20a08:	644b      	str	r3, [r1, #68]	; 0x44
		--ctx->tx_count;
   20a0a:	6c8b      	ldr	r3, [r1, #72]	; 0x48
   20a0c:	3b01      	subs	r3, #1
   20a0e:	648b      	str	r3, [r1, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
   20a10:	2301      	movs	r3, #1
   20a12:	f101 0258 	add.w	r2, r1, #88	; 0x58
   20a16:	3148      	adds	r1, #72	; 0x48
   20a18:	f104 0044 	add.w	r0, r4, #68	; 0x44
   20a1c:	f00c fd1a 	bl	2d454 <spi_context_get_next_buf>
		ctx->tx_buf = (const uint8_t *)
   20a20:	6560      	str	r0, [r4, #84]	; 0x54
   20a22:	e7ad      	b.n	20980 <event_handler+0x28>
		LOG_ERR("Update exceeds current buffer");
   20a24:	2006      	movs	r0, #6
   20a26:	f7f3 f96f 	bl	13d08 <z_log_msg_alloc>
   20a2a:	2200      	movs	r2, #0
   20a2c:	f36f 0200 	bfc	r2, #0, #1
   20a30:	f36f 0241 	bfc	r2, #1, #1
   20a34:	f36f 0282 	bfc	r2, #2, #1
   20a38:	f36f 02c5 	bfc	r2, #3, #3
   20a3c:	2301      	movs	r3, #1
   20a3e:	f363 1288 	bfi	r2, r3, #6, #3
   20a42:	2308      	movs	r3, #8
   20a44:	f363 2252 	bfi	r2, r3, #9, #10
   20a48:	f36f 42de 	bfc	r2, #19, #12
   20a4c:	f36f 72df 	bfc	r2, #31, #1
   20a50:	4684      	mov	ip, r0
   20a52:	b170      	cbz	r0, 20a72 <event_handler+0x11a>
   20a54:	4b13      	ldr	r3, [pc, #76]	; (20aa4 <event_handler+0x14c>)
   20a56:	6143      	str	r3, [r0, #20]
   20a58:	2302      	movs	r3, #2
   20a5a:	f88d 3004 	strb.w	r3, [sp, #4]
   20a5e:	2300      	movs	r3, #0
   20a60:	f88d 3005 	strb.w	r3, [sp, #5]
   20a64:	f88d 3006 	strb.w	r3, [sp, #6]
   20a68:	f88d 3007 	strb.w	r3, [sp, #7]
   20a6c:	9801      	ldr	r0, [sp, #4]
   20a6e:	f8cc 0010 	str.w	r0, [ip, #16]
   20a72:	2300      	movs	r3, #0
   20a74:	490c      	ldr	r1, [pc, #48]	; (20aa8 <event_handler+0x150>)
   20a76:	4660      	mov	r0, ip
   20a78:	f008 fbaf 	bl	291da <z_log_msg_finalize>
		return;
   20a7c:	e78d      	b.n	2099a <event_handler+0x42>
		++ctx->current_rx;
   20a7e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   20a80:	3308      	adds	r3, #8
   20a82:	64e3      	str	r3, [r4, #76]	; 0x4c
		--ctx->rx_count;
   20a84:	6d23      	ldr	r3, [r4, #80]	; 0x50
   20a86:	3b01      	subs	r3, #1
   20a88:	6523      	str	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
   20a8a:	2301      	movs	r3, #1
   20a8c:	f104 0260 	add.w	r2, r4, #96	; 0x60
   20a90:	f104 0150 	add.w	r1, r4, #80	; 0x50
   20a94:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   20a98:	f00c fcdc 	bl	2d454 <spi_context_get_next_buf>
		ctx->rx_buf = (uint8_t *)
   20a9c:	65e0      	str	r0, [r4, #92]	; 0x5c
   20a9e:	e77c      	b.n	2099a <event_handler+0x42>
   20aa0:	4770      	bx	lr
   20aa2:	bf00      	nop
   20aa4:	00033e4c 	.word	0x00033e4c
   20aa8:	000314f0 	.word	0x000314f0

00020aac <spi_context_cs_configure_all>:
{
   20aac:	b5f0      	push	{r4, r5, r6, r7, lr}
   20aae:	b083      	sub	sp, #12
   20ab0:	af00      	add	r7, sp, #0
   20ab2:	4605      	mov	r5, r0
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   20ab4:	6884      	ldr	r4, [r0, #8]
   20ab6:	e05d      	b.n	20b74 <spi_context_cs_configure_all+0xc8>
			LOG_ERR("CS GPIO port %s pin %d is not ready",
   20ab8:	6823      	ldr	r3, [r4, #0]
   20aba:	681e      	ldr	r6, [r3, #0]
   20abc:	7921      	ldrb	r1, [r4, #4]
   20abe:	466d      	mov	r5, sp
   20ac0:	2300      	movs	r3, #0
   20ac2:	713b      	strb	r3, [r7, #4]
   20ac4:	2302      	movs	r3, #2
   20ac6:	717b      	strb	r3, [r7, #5]
   20ac8:	b08a      	sub	sp, #40	; 0x28
   20aca:	466c      	mov	r4, sp
   20acc:	f114 0210 	adds.w	r2, r4, #16
   20ad0:	d015      	beq.n	20afe <spi_context_cs_configure_all+0x52>
   20ad2:	2012      	movs	r0, #18
   20ad4:	b11a      	cbz	r2, 20ade <spi_context_cs_configure_all+0x32>
   20ad6:	2804      	cmp	r0, #4
   20ad8:	dd01      	ble.n	20ade <spi_context_cs_configure_all+0x32>
   20ada:	4b32      	ldr	r3, [pc, #200]	; (20ba4 <spi_context_cs_configure_all+0xf8>)
   20adc:	6163      	str	r3, [r4, #20]
   20ade:	2300      	movs	r3, #0
   20ae0:	703b      	strb	r3, [r7, #0]
   20ae2:	2302      	movs	r3, #2
   20ae4:	707b      	strb	r3, [r7, #1]
   20ae6:	b1c2      	cbz	r2, 20b1a <spi_context_cs_configure_all+0x6e>
   20ae8:	4603      	mov	r3, r0
   20aea:	2808      	cmp	r0, #8
   20aec:	dd00      	ble.n	20af0 <spi_context_cs_configure_all+0x44>
   20aee:	61a6      	str	r6, [r4, #24]
   20af0:	2b0c      	cmp	r3, #12
   20af2:	dd00      	ble.n	20af6 <spi_context_cs_configure_all+0x4a>
   20af4:	61e1      	str	r1, [r4, #28]
   20af6:	f104 0320 	add.w	r3, r4, #32
   20afa:	2100      	movs	r1, #0
   20afc:	e00b      	b.n	20b16 <spi_context_cs_configure_all+0x6a>
   20afe:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   20b02:	e7e7      	b.n	20ad4 <spi_context_cs_configure_all+0x28>
   20b04:	f101 0608 	add.w	r6, r1, #8
   20b08:	eb06 0c07 	add.w	ip, r6, r7
   20b0c:	f81c cc08 	ldrb.w	ip, [ip, #-8]
   20b10:	f803 cb01 	strb.w	ip, [r3], #1
   20b14:	3101      	adds	r1, #1
   20b16:	2901      	cmp	r1, #1
   20b18:	d9f4      	bls.n	20b04 <spi_context_cs_configure_all+0x58>
   20b1a:	2811      	cmp	r0, #17
   20b1c:	dd26      	ble.n	20b6c <spi_context_cs_configure_all+0xc0>
   20b1e:	2312      	movs	r3, #18
   20b20:	b142      	cbz	r2, 20b34 <spi_context_cs_configure_all+0x88>
   20b22:	2104      	movs	r1, #4
   20b24:	7139      	strb	r1, [r7, #4]
   20b26:	2100      	movs	r1, #0
   20b28:	7179      	strb	r1, [r7, #5]
   20b2a:	71b9      	strb	r1, [r7, #6]
   20b2c:	2101      	movs	r1, #1
   20b2e:	71f9      	strb	r1, [r7, #7]
   20b30:	6878      	ldr	r0, [r7, #4]
   20b32:	6120      	str	r0, [r4, #16]
   20b34:	2100      	movs	r1, #0
   20b36:	f36f 0100 	bfc	r1, #0, #1
   20b3a:	f36f 0141 	bfc	r1, #1, #1
   20b3e:	f36f 0182 	bfc	r1, #2, #1
   20b42:	f36f 01c5 	bfc	r1, #3, #3
   20b46:	2001      	movs	r0, #1
   20b48:	f360 1188 	bfi	r1, r0, #6, #3
   20b4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
   20b50:	f363 2152 	bfi	r1, r3, #9, #10
   20b54:	f36f 41de 	bfc	r1, #19, #12
   20b58:	f36f 71df 	bfc	r1, #31, #1
   20b5c:	2300      	movs	r3, #0
   20b5e:	4812      	ldr	r0, [pc, #72]	; (20ba8 <spi_context_cs_configure_all+0xfc>)
   20b60:	f008 fb53 	bl	2920a <z_impl_z_log_msg_static_create>
   20b64:	46ad      	mov	sp, r5
			return -ENODEV;
   20b66:	f06f 0012 	mvn.w	r0, #18
   20b6a:	e017      	b.n	20b9c <spi_context_cs_configure_all+0xf0>
			LOG_ERR("CS GPIO port %s pin %d is not ready",
   20b6c:	f06f 031b 	mvn.w	r3, #27
   20b70:	e7d6      	b.n	20b20 <spi_context_cs_configure_all+0x74>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   20b72:	3408      	adds	r4, #8
   20b74:	68ab      	ldr	r3, [r5, #8]
   20b76:	68ea      	ldr	r2, [r5, #12]
   20b78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   20b7c:	429c      	cmp	r4, r3
   20b7e:	d20c      	bcs.n	20b9a <spi_context_cs_configure_all+0xee>
		if (!device_is_ready(cs_gpio->port)) {
   20b80:	6820      	ldr	r0, [r4, #0]
   20b82:	f00f fa90 	bl	300a6 <z_device_is_ready>
   20b86:	2800      	cmp	r0, #0
   20b88:	d096      	beq.n	20ab8 <spi_context_cs_configure_all+0xc>
		ret = gpio_pin_configure_dt(cs_gpio, GPIO_OUTPUT_INACTIVE);
   20b8a:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
   20b8e:	4620      	mov	r0, r4
   20b90:	f00c fc38 	bl	2d404 <gpio_pin_configure_dt>
		if (ret < 0) {
   20b94:	2800      	cmp	r0, #0
   20b96:	daec      	bge.n	20b72 <spi_context_cs_configure_all+0xc6>
   20b98:	e000      	b.n	20b9c <spi_context_cs_configure_all+0xf0>
	return 0;
   20b9a:	2000      	movs	r0, #0
}
   20b9c:	370c      	adds	r7, #12
   20b9e:	46bd      	mov	sp, r7
   20ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20ba2:	bf00      	nop
   20ba4:	00033e6c 	.word	0x00033e6c
   20ba8:	000314f0 	.word	0x000314f0

00020bac <sdhc_spi_rx>:
};

/* Receives a block of bytes */
static int sdhc_spi_rx(const struct device *spi_dev, struct spi_config *spi_cfg,
	uint8_t *buf, int len)
{
   20bac:	b510      	push	{r4, lr}
   20bae:	b088      	sub	sp, #32
	struct spi_buf tx_bufs[] = {
   20bb0:	4c09      	ldr	r4, [pc, #36]	; (20bd8 <sdhc_spi_rx+0x2c>)
   20bb2:	9406      	str	r4, [sp, #24]
   20bb4:	9307      	str	r3, [sp, #28]
			.buf = (uint8_t *)sdhc_ones,
			.len = len
		}
	};

	const struct spi_buf_set tx = {
   20bb6:	ac06      	add	r4, sp, #24
   20bb8:	9404      	str	r4, [sp, #16]
   20bba:	2401      	movs	r4, #1
   20bbc:	9405      	str	r4, [sp, #20]
		.buffers = tx_bufs,
		.count = 1,
	};

	struct spi_buf rx_bufs[] = {
   20bbe:	9202      	str	r2, [sp, #8]
   20bc0:	9303      	str	r3, [sp, #12]
			.buf = buf,
			.len = len
		}
	};

	const struct spi_buf_set rx = {
   20bc2:	ab02      	add	r3, sp, #8
   20bc4:	9300      	str	r3, [sp, #0]
   20bc6:	9401      	str	r4, [sp, #4]
static inline int z_impl_spi_transceive(const struct device *dev,
					const struct spi_config *config,
					const struct spi_buf_set *tx_bufs,
					const struct spi_buf_set *rx_bufs)
{
	const struct spi_driver_api *api =
   20bc8:	6883      	ldr	r3, [r0, #8]
		(const struct spi_driver_api *)dev->api;

	return api->transceive(dev, config, tx_bufs, rx_bufs);
   20bca:	681c      	ldr	r4, [r3, #0]
   20bcc:	466b      	mov	r3, sp
   20bce:	aa04      	add	r2, sp, #16
   20bd0:	47a0      	blx	r4
		.buffers = rx_bufs,
		.count = 1,
	};

	return spi_transceive(spi_dev, spi_cfg, &tx, &rx);
}
   20bd2:	b008      	add	sp, #32
   20bd4:	bd10      	pop	{r4, pc}
   20bd6:	bf00      	nop
   20bd8:	00033f80 	.word	0x00033f80

00020bdc <sdhc_spi_init_card>:

static int sdhc_spi_init_card(const struct device *dev)
{
   20bdc:	b538      	push	{r3, r4, r5, lr}
	/* SD spec requires at least 74 clocks be send to SD to start it.
	 * for SPI protocol, this will be performed by sending 10 0xff values
	 * to the card (this should result in 80 SCK cycles)
	 */
	const struct sdhc_spi_config *config = dev->config;
   20bde:	6845      	ldr	r5, [r0, #4]
	struct sdhc_spi_data *data = dev->data;
   20be0:	6902      	ldr	r2, [r0, #16]
	struct spi_config *spi_cfg = data->spi_cfg;
   20be2:	6854      	ldr	r4, [r2, #4]
	int ret;

	if (spi_cfg->frequency == 0) {
   20be4:	6823      	ldr	r3, [r4, #0]
   20be6:	b90b      	cbnz	r3, 20bec <sdhc_spi_init_card+0x10>
		/* Use default 400KHZ frequency */
		spi_cfg->frequency = SDMMC_CLOCK_400KHZ;
   20be8:	4b0d      	ldr	r3, [pc, #52]	; (20c20 <sdhc_spi_init_card+0x44>)
   20bea:	6023      	str	r3, [r4, #0]
	}
	/* the initial 74 clocks must be sent while CS is high */
	spi_cfg->operation |= SPI_CS_ACTIVE_HIGH;
   20bec:	88a3      	ldrh	r3, [r4, #4]
   20bee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   20bf2:	80a3      	strh	r3, [r4, #4]
	ret = sdhc_spi_rx(config->spi_dev, spi_cfg, data->scratch, 10);
   20bf4:	230a      	movs	r3, #10
   20bf6:	3220      	adds	r2, #32
   20bf8:	4621      	mov	r1, r4
   20bfa:	6828      	ldr	r0, [r5, #0]
   20bfc:	f7ff ffd6 	bl	20bac <sdhc_spi_rx>
	if (ret != 0) {
   20c00:	b948      	cbnz	r0, 20c16 <sdhc_spi_init_card+0x3a>
		spi_cfg->operation &= ~SPI_CS_ACTIVE_HIGH;
		return ret;
	}
	/* Release lock on SPI bus */
	ret = spi_release(config->spi_dev, spi_cfg);
   20c02:	6828      	ldr	r0, [r5, #0]
			  const struct spi_config *config);

static inline int z_impl_spi_release(const struct device *dev,
				     const struct spi_config *config)
{
	const struct spi_driver_api *api =
   20c04:	6883      	ldr	r3, [r0, #8]
		(const struct spi_driver_api *)dev->api;

	return api->release(dev, config);
   20c06:	685b      	ldr	r3, [r3, #4]
   20c08:	4621      	mov	r1, r4
   20c0a:	4798      	blx	r3
	spi_cfg->operation &= ~SPI_CS_ACTIVE_HIGH;
   20c0c:	88a3      	ldrh	r3, [r4, #4]
   20c0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
   20c12:	80a3      	strh	r3, [r4, #4]
	return ret;
}
   20c14:	bd38      	pop	{r3, r4, r5, pc}
		spi_cfg->operation &= ~SPI_CS_ACTIVE_HIGH;
   20c16:	88a3      	ldrh	r3, [r4, #4]
   20c18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
   20c1c:	80a3      	strh	r3, [r4, #4]
		return ret;
   20c1e:	e7f9      	b.n	20c14 <sdhc_spi_init_card+0x38>
   20c20:	00061a80 	.word	0x00061a80

00020c24 <sdhc_skip>:
	return sdhc_spi_response_get(dev, cmd, bufs[0].len);
}

/* Skips bytes in SDHC data stream. */
static int sdhc_skip(const struct device *dev, uint8_t skip_val)
{
   20c24:	b5f0      	push	{r4, r5, r6, r7, lr}
   20c26:	b083      	sub	sp, #12
   20c28:	460d      	mov	r5, r1
	const struct sdhc_spi_config *config = dev->config;
   20c2a:	6847      	ldr	r7, [r0, #4]
	struct sdhc_spi_data *data = dev->data;
   20c2c:	6906      	ldr	r6, [r0, #16]
	uint8_t buf;
	int ret;
	uint32_t retries = SD_SPI_SKIP_RETRIES;
   20c2e:	4c0e      	ldr	r4, [pc, #56]	; (20c68 <sdhc_skip+0x44>)
   20c30:	e000      	b.n	20c34 <sdhc_skip+0x10>
		ret = sdhc_spi_rx(config->spi_dev, data->spi_cfg,
			&buf, sizeof(buf));
		if (ret) {
			return ret;
		}
	} while (buf == skip_val && retries--);
   20c32:	461c      	mov	r4, r3
		ret = sdhc_spi_rx(config->spi_dev, data->spi_cfg,
   20c34:	2301      	movs	r3, #1
   20c36:	f10d 0207 	add.w	r2, sp, #7
   20c3a:	6871      	ldr	r1, [r6, #4]
   20c3c:	6838      	ldr	r0, [r7, #0]
   20c3e:	f7ff ffb5 	bl	20bac <sdhc_spi_rx>
		if (ret) {
   20c42:	4603      	mov	r3, r0
   20c44:	b948      	cbnz	r0, 20c5a <sdhc_skip+0x36>
	} while (buf == skip_val && retries--);
   20c46:	f89d 0007 	ldrb.w	r0, [sp, #7]
   20c4a:	42a8      	cmp	r0, r5
   20c4c:	d103      	bne.n	20c56 <sdhc_skip+0x32>
   20c4e:	1e63      	subs	r3, r4, #1
   20c50:	2c00      	cmp	r4, #0
   20c52:	d1ee      	bne.n	20c32 <sdhc_skip+0xe>
   20c54:	461c      	mov	r4, r3
	if (retries == 0) {
   20c56:	b11c      	cbz	r4, 20c60 <sdhc_skip+0x3c>
		return -ETIMEDOUT;
	}
	/* Return first non-skipped value */
	return buf;
   20c58:	4603      	mov	r3, r0
}
   20c5a:	4618      	mov	r0, r3
   20c5c:	b003      	add	sp, #12
   20c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ETIMEDOUT;
   20c60:	f06f 0373 	mvn.w	r3, #115	; 0x73
   20c64:	e7f9      	b.n	20c5a <sdhc_skip+0x36>
   20c66:	bf00      	nop
   20c68:	000f4240 	.word	0x000f4240

00020c6c <sdhc_spi_reset>:
	return 0;
}

static int sdhc_spi_reset(const struct device *dev)
{
	struct sdhc_spi_data *data = dev->data;
   20c6c:	6903      	ldr	r3, [r0, #16]

	/* Reset host I/O */
	data->spi_cfg->frequency = SDMMC_CLOCK_400KHZ;
   20c6e:	685b      	ldr	r3, [r3, #4]
   20c70:	4a01      	ldr	r2, [pc, #4]	; (20c78 <sdhc_spi_reset+0xc>)
   20c72:	601a      	str	r2, [r3, #0]
	return 0;
}
   20c74:	2000      	movs	r0, #0
   20c76:	4770      	bx	lr
   20c78:	00061a80 	.word	0x00061a80

00020c7c <sdhc_spi_get_host_props>:
{
   20c7c:	b538      	push	{r3, r4, r5, lr}
   20c7e:	460c      	mov	r4, r1
	const struct sdhc_spi_config *cfg = dev->config;
   20c80:	6845      	ldr	r5, [r0, #4]
	memset(props, 0, sizeof(struct sdhc_host_props));
   20c82:	2224      	movs	r2, #36	; 0x24
   20c84:	2100      	movs	r1, #0
   20c86:	4620      	mov	r0, r4
   20c88:	f008 ffc2 	bl	29c10 <memset>
	props->f_min = SDMMC_CLOCK_400KHZ;
   20c8c:	4b07      	ldr	r3, [pc, #28]	; (20cac <sdhc_spi_get_host_props+0x30>)
   20c8e:	6063      	str	r3, [r4, #4]
	props->f_max = cfg->spi_max_freq;
   20c90:	68eb      	ldr	r3, [r5, #12]
   20c92:	6023      	str	r3, [r4, #0]
	props->power_delay = 1000; /* SPI always needs 1ms power delay */
   20c94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   20c98:	60a3      	str	r3, [r4, #8]
	props->host_caps.vol_330_support = true;
   20c9a:	7ba3      	ldrb	r3, [r4, #14]
   20c9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   20ca0:	73a3      	strb	r3, [r4, #14]
	props->is_spi = true;
   20ca2:	2301      	movs	r3, #1
   20ca4:	f884 3020 	strb.w	r3, [r4, #32]
}
   20ca8:	2000      	movs	r0, #0
   20caa:	bd38      	pop	{r3, r4, r5, pc}
   20cac:	00061a80 	.word	0x00061a80

00020cb0 <sdhc_spi_set_io>:
{
   20cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20cb4:	b082      	sub	sp, #8
   20cb6:	4605      	mov	r5, r0
   20cb8:	460c      	mov	r4, r1
	const struct sdhc_spi_config *cfg = dev->config;
   20cba:	6847      	ldr	r7, [r0, #4]
	struct sdhc_spi_data *data = dev->data;
   20cbc:	6906      	ldr	r6, [r0, #16]
	if (ios->clock != data->spi_cfg->frequency) {
   20cbe:	680b      	ldr	r3, [r1, #0]
   20cc0:	6872      	ldr	r2, [r6, #4]
   20cc2:	6811      	ldr	r1, [r2, #0]
   20cc4:	428b      	cmp	r3, r1
   20cc6:	d010      	beq.n	20cea <sdhc_spi_set_io+0x3a>
		if (ios->clock > cfg->spi_max_freq) {
   20cc8:	68f9      	ldr	r1, [r7, #12]
   20cca:	428b      	cmp	r3, r1
   20ccc:	d879      	bhi.n	20dc2 <sdhc_spi_set_io+0x112>
		if (ios->clock != 0) {
   20cce:	b163      	cbz	r3, 20cea <sdhc_spi_set_io+0x3a>
			if (data->spi_cfg == &data->cfg_a) {
   20cd0:	f106 0808 	add.w	r8, r6, #8
   20cd4:	4542      	cmp	r2, r8
   20cd6:	d028      	beq.n	20d2a <sdhc_spi_set_io+0x7a>
				data->cfg_b.frequency = ios->clock;
   20cd8:	4631      	mov	r1, r6
   20cda:	f841 3f14 	str.w	r3, [r1, #20]!
				memcpy(&data->cfg_a, &data->cfg_b,
   20cde:	220c      	movs	r2, #12
   20ce0:	4640      	mov	r0, r8
   20ce2:	f008 ff66 	bl	29bb2 <memcpy>
				data->spi_cfg = &data->cfg_a;
   20ce6:	f8c6 8004 	str.w	r8, [r6, #4]
	if (ios->bus_mode != SDHC_BUSMODE_PUSHPULL) {
   20cea:	7923      	ldrb	r3, [r4, #4]
   20cec:	2b02      	cmp	r3, #2
   20cee:	d16b      	bne.n	20dc8 <sdhc_spi_set_io+0x118>
	if (data->power_mode != ios->power_mode) {
   20cf0:	7832      	ldrb	r2, [r6, #0]
   20cf2:	7963      	ldrb	r3, [r4, #5]
   20cf4:	429a      	cmp	r2, r3
   20cf6:	d00e      	beq.n	20d16 <sdhc_spi_set_io+0x66>
		if (ios->power_mode == SDHC_POWER_ON) {
   20cf8:	2b02      	cmp	r3, #2
   20cfa:	d022      	beq.n	20d42 <sdhc_spi_set_io+0x92>
		if (cfg->pwr_gpio.port) {
   20cfc:	6878      	ldr	r0, [r7, #4]
   20cfe:	b140      	cbz	r0, 20d12 <sdhc_spi_set_io+0x62>
			if (ios->power_mode == SDHC_POWER_ON) {
   20d00:	7963      	ldrb	r3, [r4, #5]
   20d02:	2b02      	cmp	r3, #2
   20d04:	d054      	beq.n	20db0 <sdhc_spi_set_io+0x100>
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
	return gpio_pin_set(spec->port, spec->pin, value);
   20d06:	2200      	movs	r2, #0
   20d08:	7a39      	ldrb	r1, [r7, #8]
   20d0a:	f00c fccb 	bl	2d6a4 <gpio_pin_set>
				if (gpio_pin_set_dt(&cfg->pwr_gpio, 0)) {
   20d0e:	2800      	cmp	r0, #0
   20d10:	d15d      	bne.n	20dce <sdhc_spi_set_io+0x11e>
		data->power_mode = ios->power_mode;
   20d12:	7963      	ldrb	r3, [r4, #5]
   20d14:	7033      	strb	r3, [r6, #0]
	if (ios->bus_width != SDHC_BUS_WIDTH1BIT) {
   20d16:	79a3      	ldrb	r3, [r4, #6]
   20d18:	2b01      	cmp	r3, #1
   20d1a:	d15b      	bne.n	20dd4 <sdhc_spi_set_io+0x124>
	if (ios->signal_voltage != SD_VOL_3_3_V) {
   20d1c:	7a63      	ldrb	r3, [r4, #9]
   20d1e:	2b01      	cmp	r3, #1
   20d20:	d15b      	bne.n	20dda <sdhc_spi_set_io+0x12a>
	return 0;
   20d22:	2000      	movs	r0, #0
}
   20d24:	b002      	add	sp, #8
   20d26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				data->cfg_a.frequency = ios->clock;
   20d2a:	60b3      	str	r3, [r6, #8]
				memcpy(&data->cfg_b, &data->cfg_a,
   20d2c:	f106 0314 	add.w	r3, r6, #20
   20d30:	220c      	movs	r2, #12
   20d32:	4641      	mov	r1, r8
   20d34:	4698      	mov	r8, r3
   20d36:	4618      	mov	r0, r3
   20d38:	f008 ff3b 	bl	29bb2 <memcpy>
				data->spi_cfg = &data->cfg_b;
   20d3c:	f8c6 8004 	str.w	r8, [r6, #4]
   20d40:	e7d3      	b.n	20cea <sdhc_spi_set_io+0x3a>
			if (sdhc_spi_init_card(dev) != 0) {
   20d42:	4628      	mov	r0, r5
   20d44:	f7ff ff4a 	bl	20bdc <sdhc_spi_init_card>
   20d48:	2800      	cmp	r0, #0
   20d4a:	d0d7      	beq.n	20cfc <sdhc_spi_set_io+0x4c>
				LOG_ERR("Card SCLK init sequence failed");
   20d4c:	2006      	movs	r0, #6
   20d4e:	f7f2 ffdb 	bl	13d08 <z_log_msg_alloc>
   20d52:	2200      	movs	r2, #0
   20d54:	f36f 0200 	bfc	r2, #0, #1
   20d58:	f36f 0241 	bfc	r2, #1, #1
   20d5c:	f36f 0282 	bfc	r2, #2, #1
   20d60:	f36f 02c5 	bfc	r2, #3, #3
   20d64:	2301      	movs	r3, #1
   20d66:	f363 1288 	bfi	r2, r3, #6, #3
   20d6a:	2308      	movs	r3, #8
   20d6c:	f363 2252 	bfi	r2, r3, #9, #10
   20d70:	f36f 42de 	bfc	r2, #19, #12
   20d74:	f36f 72df 	bfc	r2, #31, #1
   20d78:	4604      	mov	r4, r0
   20d7a:	b188      	cbz	r0, 20da0 <sdhc_spi_set_io+0xf0>
   20d7c:	f110 0310 	adds.w	r3, r0, #16
   20d80:	d001      	beq.n	20d86 <sdhc_spi_set_io+0xd6>
   20d82:	4917      	ldr	r1, [pc, #92]	; (20de0 <sdhc_spi_set_io+0x130>)
   20d84:	6141      	str	r1, [r0, #20]
   20d86:	b15b      	cbz	r3, 20da0 <sdhc_spi_set_io+0xf0>
   20d88:	2302      	movs	r3, #2
   20d8a:	f88d 3004 	strb.w	r3, [sp, #4]
   20d8e:	2300      	movs	r3, #0
   20d90:	f88d 3005 	strb.w	r3, [sp, #5]
   20d94:	f88d 3006 	strb.w	r3, [sp, #6]
   20d98:	f88d 3007 	strb.w	r3, [sp, #7]
   20d9c:	9801      	ldr	r0, [sp, #4]
   20d9e:	6120      	str	r0, [r4, #16]
   20da0:	2300      	movs	r3, #0
   20da2:	4910      	ldr	r1, [pc, #64]	; (20de4 <sdhc_spi_set_io+0x134>)
   20da4:	4620      	mov	r0, r4
   20da6:	f008 fa18 	bl	291da <z_log_msg_finalize>
				return -EIO;
   20daa:	f06f 0004 	mvn.w	r0, #4
   20dae:	e7b9      	b.n	20d24 <sdhc_spi_set_io+0x74>
   20db0:	2201      	movs	r2, #1
   20db2:	7a39      	ldrb	r1, [r7, #8]
   20db4:	f00c fc76 	bl	2d6a4 <gpio_pin_set>
				if (gpio_pin_set_dt(&cfg->pwr_gpio, 1)) {
   20db8:	2800      	cmp	r0, #0
   20dba:	d0aa      	beq.n	20d12 <sdhc_spi_set_io+0x62>
					return -EIO;
   20dbc:	f06f 0004 	mvn.w	r0, #4
   20dc0:	e7b0      	b.n	20d24 <sdhc_spi_set_io+0x74>
			return -ENOTSUP;
   20dc2:	f06f 0085 	mvn.w	r0, #133	; 0x85
   20dc6:	e7ad      	b.n	20d24 <sdhc_spi_set_io+0x74>
		return -ENOTSUP;
   20dc8:	f06f 0085 	mvn.w	r0, #133	; 0x85
   20dcc:	e7aa      	b.n	20d24 <sdhc_spi_set_io+0x74>
					return -EIO;
   20dce:	f06f 0004 	mvn.w	r0, #4
   20dd2:	e7a7      	b.n	20d24 <sdhc_spi_set_io+0x74>
		return -ENOTSUP;
   20dd4:	f06f 0085 	mvn.w	r0, #133	; 0x85
   20dd8:	e7a4      	b.n	20d24 <sdhc_spi_set_io+0x74>
		return -ENOTSUP;
   20dda:	f06f 0085 	mvn.w	r0, #133	; 0x85
   20dde:	e7a1      	b.n	20d24 <sdhc_spi_set_io+0x74>
   20de0:	00033f0c 	.word	0x00033f0c
   20de4:	000314e0 	.word	0x000314e0

00020de8 <sdhc_spi_read_data>:
{
   20de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20dec:	b08b      	sub	sp, #44	; 0x2c
   20dee:	460f      	mov	r7, r1
	const struct sdhc_spi_config *config = dev->config;
   20df0:	f8d0 8004 	ldr.w	r8, [r0, #4]
	struct sdhc_spi_data *dev_data = dev->data;
   20df4:	f8d0 9010 	ldr.w	r9, [r0, #16]
	uint8_t *read_location = data->data;
   20df8:	690d      	ldr	r5, [r1, #16]
	uint32_t remaining = data->blocks;
   20dfa:	f8d1 b008 	ldr.w	fp, [r1, #8]
	const struct spi_buf tx_bufs[] = {
   20dfe:	4b75      	ldr	r3, [pc, #468]	; (20fd4 <sdhc_spi_read_data+0x1ec>)
   20e00:	9307      	str	r3, [sp, #28]
			.len = data->block_size,
   20e02:	684b      	ldr	r3, [r1, #4]
	const struct spi_buf tx_bufs[] = {
   20e04:	9308      	str	r3, [sp, #32]
	const struct spi_buf_set tx = {
   20e06:	aa07      	add	r2, sp, #28
   20e08:	9205      	str	r2, [sp, #20]
   20e0a:	2201      	movs	r2, #1
   20e0c:	9206      	str	r2, [sp, #24]
	struct spi_buf rx_bufs[] = {
   20e0e:	9503      	str	r5, [sp, #12]
   20e10:	9304      	str	r3, [sp, #16]
	const struct spi_buf_set rx = {
   20e12:	a903      	add	r1, sp, #12
   20e14:	9101      	str	r1, [sp, #4]
   20e16:	9202      	str	r2, [sp, #8]
	if (data->block_size > 512) {
   20e18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   20e1c:	f200 80d6 	bhi.w	20fcc <sdhc_spi_read_data+0x1e4>
   20e20:	4682      	mov	sl, r0
	ret = sdhc_skip(dev, 0xff);
   20e22:	21ff      	movs	r1, #255	; 0xff
   20e24:	f7ff fefe 	bl	20c24 <sdhc_skip>
	if (ret < 0) {
   20e28:	1e04      	subs	r4, r0, #0
   20e2a:	db33      	blt.n	20e94 <sdhc_spi_read_data+0xac>
	if (ret != SD_SPI_TOKEN_SINGLE)	{
   20e2c:	2cfe      	cmp	r4, #254	; 0xfe
   20e2e:	d068      	beq.n	20f02 <sdhc_spi_read_data+0x11a>
		return -EIO;
   20e30:	f06f 0404 	mvn.w	r4, #4
   20e34:	e02e      	b.n	20e94 <sdhc_spi_read_data+0xac>
			LOG_ERR("Data write failed");
   20e36:	2006      	movs	r0, #6
   20e38:	f7f2 ff66 	bl	13d08 <z_log_msg_alloc>
   20e3c:	2200      	movs	r2, #0
   20e3e:	f36f 0200 	bfc	r2, #0, #1
   20e42:	f36f 0241 	bfc	r2, #1, #1
   20e46:	f36f 0282 	bfc	r2, #2, #1
   20e4a:	f36f 02c5 	bfc	r2, #3, #3
   20e4e:	2301      	movs	r3, #1
   20e50:	f363 1288 	bfi	r2, r3, #6, #3
   20e54:	2308      	movs	r3, #8
   20e56:	f363 2252 	bfi	r2, r3, #9, #10
   20e5a:	f36f 42de 	bfc	r2, #19, #12
   20e5e:	f36f 72df 	bfc	r2, #31, #1
   20e62:	4605      	mov	r5, r0
   20e64:	b188      	cbz	r0, 20e8a <sdhc_spi_read_data+0xa2>
   20e66:	f110 0310 	adds.w	r3, r0, #16
   20e6a:	d001      	beq.n	20e70 <sdhc_spi_read_data+0x88>
   20e6c:	495a      	ldr	r1, [pc, #360]	; (20fd8 <sdhc_spi_read_data+0x1f0>)
   20e6e:	6141      	str	r1, [r0, #20]
   20e70:	b15b      	cbz	r3, 20e8a <sdhc_spi_read_data+0xa2>
   20e72:	2302      	movs	r3, #2
   20e74:	f88d 3000 	strb.w	r3, [sp]
   20e78:	2300      	movs	r3, #0
   20e7a:	f88d 3001 	strb.w	r3, [sp, #1]
   20e7e:	f88d 3002 	strb.w	r3, [sp, #2]
   20e82:	f88d 3003 	strb.w	r3, [sp, #3]
   20e86:	9800      	ldr	r0, [sp, #0]
   20e88:	6128      	str	r0, [r5, #16]
   20e8a:	2300      	movs	r3, #0
   20e8c:	4953      	ldr	r1, [pc, #332]	; (20fdc <sdhc_spi_read_data+0x1f4>)
   20e8e:	4628      	mov	r0, r5
   20e90:	f008 f9a3 	bl	291da <z_log_msg_finalize>
}
   20e94:	4620      	mov	r0, r4
   20e96:	b00b      	add	sp, #44	; 0x2c
   20e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LOG_ERR("Bad data CRC");
   20e9c:	2006      	movs	r0, #6
   20e9e:	f7f2 ff33 	bl	13d08 <z_log_msg_alloc>
   20ea2:	2200      	movs	r2, #0
   20ea4:	f36f 0200 	bfc	r2, #0, #1
   20ea8:	f36f 0241 	bfc	r2, #1, #1
   20eac:	f36f 0282 	bfc	r2, #2, #1
   20eb0:	f36f 02c5 	bfc	r2, #3, #3
   20eb4:	2301      	movs	r3, #1
   20eb6:	f363 1288 	bfi	r2, r3, #6, #3
   20eba:	2308      	movs	r3, #8
   20ebc:	f363 2252 	bfi	r2, r3, #9, #10
   20ec0:	f36f 42de 	bfc	r2, #19, #12
   20ec4:	f36f 72df 	bfc	r2, #31, #1
   20ec8:	4604      	mov	r4, r0
   20eca:	b188      	cbz	r0, 20ef0 <sdhc_spi_read_data+0x108>
   20ecc:	f110 0310 	adds.w	r3, r0, #16
   20ed0:	d001      	beq.n	20ed6 <sdhc_spi_read_data+0xee>
   20ed2:	4943      	ldr	r1, [pc, #268]	; (20fe0 <sdhc_spi_read_data+0x1f8>)
   20ed4:	6141      	str	r1, [r0, #20]
   20ed6:	b15b      	cbz	r3, 20ef0 <sdhc_spi_read_data+0x108>
   20ed8:	2302      	movs	r3, #2
   20eda:	f88d 3000 	strb.w	r3, [sp]
   20ede:	2300      	movs	r3, #0
   20ee0:	f88d 3001 	strb.w	r3, [sp, #1]
   20ee4:	f88d 3002 	strb.w	r3, [sp, #2]
   20ee8:	f88d 3003 	strb.w	r3, [sp, #3]
   20eec:	9800      	ldr	r0, [sp, #0]
   20eee:	6120      	str	r0, [r4, #16]
   20ef0:	2300      	movs	r3, #0
   20ef2:	493a      	ldr	r1, [pc, #232]	; (20fdc <sdhc_spi_read_data+0x1f4>)
   20ef4:	4620      	mov	r0, r4
   20ef6:	f008 f970 	bl	291da <z_log_msg_finalize>
			return -EILSEQ;
   20efa:	f06f 0489 	mvn.w	r4, #137	; 0x89
   20efe:	e7c9      	b.n	20e94 <sdhc_spi_read_data+0xac>
{
   20f00:	46b3      	mov	fp, r6
	while (remaining--) {
   20f02:	f10b 36ff 	add.w	r6, fp, #4294967295
   20f06:	f1bb 0f00 	cmp.w	fp, #0
   20f0a:	d0c3      	beq.n	20e94 <sdhc_spi_read_data+0xac>
		ret = spi_transceive(config->spi_dev,
   20f0c:	f8d8 0000 	ldr.w	r0, [r8]
			dev_data->spi_cfg, &tx, &rx);
   20f10:	f8d9 1004 	ldr.w	r1, [r9, #4]
	const struct spi_driver_api *api =
   20f14:	6883      	ldr	r3, [r0, #8]
	return api->transceive(dev, config, tx_bufs, rx_bufs);
   20f16:	681c      	ldr	r4, [r3, #0]
   20f18:	ab01      	add	r3, sp, #4
   20f1a:	aa05      	add	r2, sp, #20
   20f1c:	47a0      	blx	r4
		if (ret) {
   20f1e:	4604      	mov	r4, r0
   20f20:	2800      	cmp	r0, #0
   20f22:	d188      	bne.n	20e36 <sdhc_spi_read_data+0x4e>
		ret = sdhc_spi_rx(config->spi_dev, dev_data->spi_cfg,
   20f24:	2303      	movs	r3, #3
   20f26:	aa09      	add	r2, sp, #36	; 0x24
   20f28:	f8d9 1004 	ldr.w	r1, [r9, #4]
   20f2c:	f8d8 0000 	ldr.w	r0, [r8]
   20f30:	f7ff fe3c 	bl	20bac <sdhc_spi_rx>
   20f34:	4604      	mov	r4, r0
		if (crc16_itu_t(0, read_location, data->block_size) !=
   20f36:	687a      	ldr	r2, [r7, #4]
   20f38:	4629      	mov	r1, r5
   20f3a:	2000      	movs	r0, #0
   20f3c:	f007 fbf7 	bl	2872e <crc16_itu_t>
	return ((uint16_t)src[0] << 8) | src[1];
   20f40:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
   20f44:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   20f48:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   20f4c:	4298      	cmp	r0, r3
   20f4e:	d1a5      	bne.n	20e9c <sdhc_spi_read_data+0xb4>
		read_location += data->block_size;
   20f50:	687b      	ldr	r3, [r7, #4]
   20f52:	441d      	add	r5, r3
		rx_bufs[0].buf = read_location;
   20f54:	9503      	str	r5, [sp, #12]
		if (remaining) {
   20f56:	2e00      	cmp	r6, #0
   20f58:	d0d2      	beq.n	20f00 <sdhc_spi_read_data+0x118>
			ret = sdhc_skip(dev, 0xff);
   20f5a:	21ff      	movs	r1, #255	; 0xff
   20f5c:	4650      	mov	r0, sl
   20f5e:	f7ff fe61 	bl	20c24 <sdhc_skip>
   20f62:	4604      	mov	r4, r0
			if (ret != SD_SPI_TOKEN_SINGLE) {
   20f64:	28fe      	cmp	r0, #254	; 0xfe
   20f66:	d0cb      	beq.n	20f00 <sdhc_spi_read_data+0x118>
				LOG_ERR("Bad token");
   20f68:	2006      	movs	r0, #6
   20f6a:	f7f2 fecd 	bl	13d08 <z_log_msg_alloc>
   20f6e:	2200      	movs	r2, #0
   20f70:	f36f 0200 	bfc	r2, #0, #1
   20f74:	f36f 0241 	bfc	r2, #1, #1
   20f78:	f36f 0282 	bfc	r2, #2, #1
   20f7c:	f36f 02c5 	bfc	r2, #3, #3
   20f80:	2301      	movs	r3, #1
   20f82:	f363 1288 	bfi	r2, r3, #6, #3
   20f86:	2308      	movs	r3, #8
   20f88:	f363 2252 	bfi	r2, r3, #9, #10
   20f8c:	f36f 42de 	bfc	r2, #19, #12
   20f90:	f36f 72df 	bfc	r2, #31, #1
   20f94:	4604      	mov	r4, r0
   20f96:	b188      	cbz	r0, 20fbc <sdhc_spi_read_data+0x1d4>
   20f98:	f110 0310 	adds.w	r3, r0, #16
   20f9c:	d001      	beq.n	20fa2 <sdhc_spi_read_data+0x1ba>
   20f9e:	4911      	ldr	r1, [pc, #68]	; (20fe4 <sdhc_spi_read_data+0x1fc>)
   20fa0:	6141      	str	r1, [r0, #20]
   20fa2:	b15b      	cbz	r3, 20fbc <sdhc_spi_read_data+0x1d4>
   20fa4:	2302      	movs	r3, #2
   20fa6:	f88d 3000 	strb.w	r3, [sp]
   20faa:	2300      	movs	r3, #0
   20fac:	f88d 3001 	strb.w	r3, [sp, #1]
   20fb0:	f88d 3002 	strb.w	r3, [sp, #2]
   20fb4:	f88d 3003 	strb.w	r3, [sp, #3]
   20fb8:	9800      	ldr	r0, [sp, #0]
   20fba:	6120      	str	r0, [r4, #16]
   20fbc:	2300      	movs	r3, #0
   20fbe:	4907      	ldr	r1, [pc, #28]	; (20fdc <sdhc_spi_read_data+0x1f4>)
   20fc0:	4620      	mov	r0, r4
   20fc2:	f008 f90a 	bl	291da <z_log_msg_finalize>
				return -EIO;
   20fc6:	f06f 0404 	mvn.w	r4, #4
   20fca:	e763      	b.n	20e94 <sdhc_spi_read_data+0xac>
		return -ENOTSUP;
   20fcc:	f06f 0485 	mvn.w	r4, #133	; 0x85
   20fd0:	e760      	b.n	20e94 <sdhc_spi_read_data+0xac>
   20fd2:	bf00      	nop
   20fd4:	00033f80 	.word	0x00033f80
   20fd8:	00033f2c 	.word	0x00033f2c
   20fdc:	000314e0 	.word	0x000314e0
   20fe0:	00033f40 	.word	0x00033f40
   20fe4:	00033f50 	.word	0x00033f50

00020fe8 <update_sampling_pnt>:
}

static int update_sampling_pnt(uint32_t ts, uint32_t sp, struct can_timing *res,
			       const struct can_timing *max,
			       const struct can_timing *min)
{
   20fe8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20fec:	9f07      	ldr	r7, [sp, #28]
	uint16_t ts1_max = max->phase_seg1 + max->prop_seg;
   20fee:	f8b3 c004 	ldrh.w	ip, [r3, #4]
   20ff2:	f8b3 8002 	ldrh.w	r8, [r3, #2]
   20ff6:	44c4      	add	ip, r8
   20ff8:	fa1f fc8c 	uxth.w	ip, ip
	uint16_t ts1_min = min->phase_seg1 + min->prop_seg;
   20ffc:	88bd      	ldrh	r5, [r7, #4]
   20ffe:	887c      	ldrh	r4, [r7, #2]
   21000:	4425      	add	r5, r4
   21002:	b2ad      	uxth	r5, r5
	uint32_t sp_calc;
	uint16_t ts1, ts2;

	ts2 = ts - (ts * sp) / 1000;
   21004:	b286      	uxth	r6, r0
   21006:	fb01 fe00 	mul.w	lr, r1, r0
   2100a:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 210b0 <update_sampling_pnt+0xc8>
   2100e:	fba9 9e0e 	umull	r9, lr, r9, lr
   21012:	f3ce 1e8f 	ubfx	lr, lr, #6, #16
   21016:	eba6 0e0e 	sub.w	lr, r6, lr
   2101a:	fa1f fe8e 	uxth.w	lr, lr
	ts2 = CLAMP(ts2, min->phase_seg2, max->phase_seg2);
   2101e:	f8b7 9006 	ldrh.w	r9, [r7, #6]
   21022:	45f1      	cmp	r9, lr
   21024:	d22f      	bcs.n	21086 <update_sampling_pnt+0x9e>
   21026:	88df      	ldrh	r7, [r3, #6]
   21028:	45be      	cmp	lr, r7
   2102a:	bf28      	it	cs
   2102c:	46be      	movcs	lr, r7
	ts1 = ts - CAN_SYNC_SEG - ts2;
   2102e:	eba6 070e 	sub.w	r7, r6, lr
   21032:	b2bf      	uxth	r7, r7
   21034:	3f01      	subs	r7, #1
   21036:	b2bf      	uxth	r7, r7

	if (ts1 > ts1_max) {
   21038:	45bc      	cmp	ip, r7
   2103a:	d226      	bcs.n	2108a <update_sampling_pnt+0xa2>
		ts1 = ts1_max;
		ts2 = ts - CAN_SYNC_SEG - ts1;
   2103c:	eba6 0e0c 	sub.w	lr, r6, ip
   21040:	fa1f fe8e 	uxth.w	lr, lr
   21044:	f10e 3eff 	add.w	lr, lr, #4294967295
   21048:	fa1f fe8e 	uxth.w	lr, lr
		if (ts2 > max->phase_seg2) {
   2104c:	88db      	ldrh	r3, [r3, #6]
   2104e:	4573      	cmp	r3, lr
   21050:	d328      	bcc.n	210a4 <update_sampling_pnt+0xbc>
		if (ts2 < min->phase_seg2) {
			return -1;
		}
	}

	res->prop_seg = CLAMP(ts1 / 2, min->prop_seg, max->prop_seg);
   21052:	ea4f 035c 	mov.w	r3, ip, lsr #1
   21056:	ebb4 0f5c 	cmp.w	r4, ip, lsr #1
   2105a:	d203      	bcs.n	21064 <update_sampling_pnt+0x7c>
   2105c:	4644      	mov	r4, r8
   2105e:	4598      	cmp	r8, r3
   21060:	bf28      	it	cs
   21062:	461c      	movcs	r4, r3
   21064:	8054      	strh	r4, [r2, #2]
	res->phase_seg1 = ts1 - res->prop_seg;
   21066:	ebac 0404 	sub.w	r4, ip, r4
   2106a:	8094      	strh	r4, [r2, #4]
	res->phase_seg2 = ts2;
   2106c:	f8a2 e006 	strh.w	lr, [r2, #6]

	sp_calc = (CAN_SYNC_SEG + ts1) * 1000 / ts;
   21070:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   21074:	fb0c 3303 	mla	r3, ip, r3, r3
   21078:	fbb3 f0f0 	udiv	r0, r3, r0

	return sp_calc > sp ? sp_calc - sp : sp - sp_calc;
   2107c:	4281      	cmp	r1, r0
   2107e:	d20f      	bcs.n	210a0 <update_sampling_pnt+0xb8>
   21080:	1a40      	subs	r0, r0, r1
}
   21082:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	ts2 = CLAMP(ts2, min->phase_seg2, max->phase_seg2);
   21086:	46ce      	mov	lr, r9
   21088:	e7d1      	b.n	2102e <update_sampling_pnt+0x46>
	} else if (ts1 < ts1_min) {
   2108a:	42bd      	cmp	r5, r7
   2108c:	d906      	bls.n	2109c <update_sampling_pnt+0xb4>
		ts2 = ts - ts1;
   2108e:	1b76      	subs	r6, r6, r5
   21090:	fa1f fe86 	uxth.w	lr, r6
		if (ts2 < min->phase_seg2) {
   21094:	45f1      	cmp	r9, lr
   21096:	d808      	bhi.n	210aa <update_sampling_pnt+0xc2>
		ts1 = ts1_min;
   21098:	46ac      	mov	ip, r5
   2109a:	e7da      	b.n	21052 <update_sampling_pnt+0x6a>
	ts1 = ts - CAN_SYNC_SEG - ts2;
   2109c:	46bc      	mov	ip, r7
   2109e:	e7d8      	b.n	21052 <update_sampling_pnt+0x6a>
	return sp_calc > sp ? sp_calc - sp : sp - sp_calc;
   210a0:	1a08      	subs	r0, r1, r0
   210a2:	e7ee      	b.n	21082 <update_sampling_pnt+0x9a>
			return -1;
   210a4:	f04f 30ff 	mov.w	r0, #4294967295
   210a8:	e7eb      	b.n	21082 <update_sampling_pnt+0x9a>
			return -1;
   210aa:	f04f 30ff 	mov.w	r0, #4294967295
   210ae:	e7e8      	b.n	21082 <update_sampling_pnt+0x9a>
   210b0:	10624dd3 	.word	0x10624dd3

000210b4 <z_impl_can_calc_timing>:
	return sp_err_min == UINT16_MAX ? -ENOTSUP : (int)sp_err_min;
}

int z_impl_can_calc_timing(const struct device *dev, struct can_timing *res,
			   uint32_t bitrate, uint16_t sample_pnt)
{
   210b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   210b8:	b084      	sub	sp, #16
   210ba:	4698      	mov	r8, r3
 */
__syscall const struct can_timing *can_get_timing_min(const struct device *dev);

static inline const struct can_timing *z_impl_can_get_timing_min(const struct device *dev)
{
	const struct can_driver_api *api = (const struct can_driver_api *)dev->api;
   210bc:	6886      	ldr	r6, [r0, #8]
 */
__syscall const struct can_timing *can_get_timing_max(const struct device *dev);

static inline const struct can_timing *z_impl_can_get_timing_max(const struct device *dev)
{
	const struct can_driver_api *api = (const struct can_driver_api *)dev->api;
   210be:	6887      	ldr	r7, [r0, #8]
	const struct can_timing *min = can_get_timing_min(dev);
	const struct can_timing *max = can_get_timing_max(dev);
	uint32_t core_clock;
	int ret;

	if (bitrate > 1000000) {
   210c0:	4b0d      	ldr	r3, [pc, #52]	; (210f8 <z_impl_can_calc_timing+0x44>)
   210c2:	429a      	cmp	r2, r3
   210c4:	d815      	bhi.n	210f2 <z_impl_can_calc_timing+0x3e>
   210c6:	460d      	mov	r5, r1
   210c8:	4614      	mov	r4, r2
   210ca:	3634      	adds	r6, #52	; 0x34
   210cc:	373e      	adds	r7, #62	; 0x3e
	const struct can_driver_api *api = (const struct can_driver_api *)dev->api;
   210ce:	6883      	ldr	r3, [r0, #8]
	return api->get_core_clock(dev, rate);
   210d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   210d2:	a903      	add	r1, sp, #12
   210d4:	4798      	blx	r3
		return -EINVAL;
	}

	ret = can_get_core_clock(dev, &core_clock);
	if (ret != 0) {
   210d6:	b110      	cbz	r0, 210de <z_impl_can_calc_timing+0x2a>
		return ret;
	}

	return can_calc_timing_int(core_clock, res, min, max, bitrate, sample_pnt);
}
   210d8:	b004      	add	sp, #16
   210da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return can_calc_timing_int(core_clock, res, min, max, bitrate, sample_pnt);
   210de:	f8cd 8004 	str.w	r8, [sp, #4]
   210e2:	9400      	str	r4, [sp, #0]
   210e4:	463b      	mov	r3, r7
   210e6:	4632      	mov	r2, r6
   210e8:	4629      	mov	r1, r5
   210ea:	9803      	ldr	r0, [sp, #12]
   210ec:	f00c fd3e 	bl	2db6c <can_calc_timing_int>
   210f0:	e7f2      	b.n	210d8 <z_impl_can_calc_timing+0x24>
		return -EINVAL;
   210f2:	f06f 0015 	mvn.w	r0, #21
   210f6:	e7ef      	b.n	210d8 <z_impl_can_calc_timing+0x24>
   210f8:	000f4240 	.word	0x000f4240

000210fc <mcp2515_get_state>:
	mcp2515_rx_filter(dev, &frame);
}

static int mcp2515_get_state(const struct device *dev, enum can_state *state,
			     struct can_bus_err_cnt *err_cnt)
{
   210fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21100:	b082      	sub	sp, #8
   21102:	4607      	mov	r7, r0
   21104:	460d      	mov	r5, r1
   21106:	4614      	mov	r4, r2
	struct mcp2515_data *dev_data = dev->data;
   21108:	f8d0 8010 	ldr.w	r8, [r0, #16]
	uint8_t eflg;
	uint8_t err_cnt_buf[2];
	int ret;

	ret = mcp2515_cmd_read_reg(dev, MCP2515_ADDR_EFLG, &eflg, sizeof(eflg));
   2110c:	2301      	movs	r3, #1
   2110e:	f10d 0207 	add.w	r2, sp, #7
   21112:	212d      	movs	r1, #45	; 0x2d
   21114:	f00c febd 	bl	2de92 <mcp2515_cmd_read_reg>
	if (ret < 0) {
   21118:	1e06      	subs	r6, r0, #0
   2111a:	db1b      	blt.n	21154 <mcp2515_get_state+0x58>
		LOG_ERR("Failed to read error register [%d]", ret);
		return -EIO;
	}

	if (state != NULL) {
   2111c:	b12d      	cbz	r5, 2112a <mcp2515_get_state+0x2e>
		if (!dev_data->started) {
   2111e:	f898 317a 	ldrb.w	r3, [r8, #378]	; 0x17a
   21122:	2b00      	cmp	r3, #0
   21124:	d149      	bne.n	211ba <mcp2515_get_state+0xbe>
			*state = CAN_STATE_STOPPED;
   21126:	2304      	movs	r3, #4
   21128:	702b      	strb	r3, [r5, #0]
		} else {
			*state = CAN_STATE_ERROR_ACTIVE;
		}
	}

	if (err_cnt != NULL) {
   2112a:	2c00      	cmp	r4, #0
   2112c:	f000 808f 	beq.w	2124e <mcp2515_get_state+0x152>
		ret = mcp2515_cmd_read_reg(dev, MCP2515_ADDR_TEC, err_cnt_buf,
   21130:	2302      	movs	r3, #2
   21132:	aa01      	add	r2, sp, #4
   21134:	211c      	movs	r1, #28
   21136:	4638      	mov	r0, r7
   21138:	f00c feab 	bl	2de92 <mcp2515_cmd_read_reg>
					   sizeof(err_cnt_buf));
		if (ret < 0) {
   2113c:	1e05      	subs	r5, r0, #0
   2113e:	db53      	blt.n	211e8 <mcp2515_get_state+0xec>
			LOG_ERR("Failed to read error counters [%d]", ret);
			return -EIO;
		}

		err_cnt->tx_err_cnt = err_cnt_buf[0];
   21140:	f89d 3004 	ldrb.w	r3, [sp, #4]
   21144:	7023      	strb	r3, [r4, #0]
		err_cnt->rx_err_cnt = err_cnt_buf[1];
   21146:	f89d 3005 	ldrb.w	r3, [sp, #5]
   2114a:	7063      	strb	r3, [r4, #1]
	}

	return 0;
   2114c:	2000      	movs	r0, #0
}
   2114e:	b002      	add	sp, #8
   21150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERR("Failed to read error register [%d]", ret);
   21154:	2008      	movs	r0, #8
   21156:	f7f2 fdd7 	bl	13d08 <z_log_msg_alloc>
   2115a:	2200      	movs	r2, #0
   2115c:	f36f 0200 	bfc	r2, #0, #1
   21160:	f36f 0241 	bfc	r2, #1, #1
   21164:	f36f 0282 	bfc	r2, #2, #1
   21168:	f36f 02c5 	bfc	r2, #3, #3
   2116c:	2301      	movs	r3, #1
   2116e:	f363 1288 	bfi	r2, r3, #6, #3
   21172:	230c      	movs	r3, #12
   21174:	f363 2252 	bfi	r2, r3, #9, #10
   21178:	f36f 42de 	bfc	r2, #19, #12
   2117c:	f36f 72df 	bfc	r2, #31, #1
   21180:	4604      	mov	r4, r0
   21182:	b190      	cbz	r0, 211aa <mcp2515_get_state+0xae>
   21184:	f110 0310 	adds.w	r3, r0, #16
   21188:	d002      	beq.n	21190 <mcp2515_get_state+0x94>
   2118a:	4932      	ldr	r1, [pc, #200]	; (21254 <mcp2515_get_state+0x158>)
   2118c:	6141      	str	r1, [r0, #20]
   2118e:	6186      	str	r6, [r0, #24]
   21190:	b15b      	cbz	r3, 211aa <mcp2515_get_state+0xae>
   21192:	2303      	movs	r3, #3
   21194:	f88d 3000 	strb.w	r3, [sp]
   21198:	2300      	movs	r3, #0
   2119a:	f88d 3001 	strb.w	r3, [sp, #1]
   2119e:	f88d 3002 	strb.w	r3, [sp, #2]
   211a2:	f88d 3003 	strb.w	r3, [sp, #3]
   211a6:	9800      	ldr	r0, [sp, #0]
   211a8:	6120      	str	r0, [r4, #16]
   211aa:	2300      	movs	r3, #0
   211ac:	492a      	ldr	r1, [pc, #168]	; (21258 <mcp2515_get_state+0x15c>)
   211ae:	4620      	mov	r0, r4
   211b0:	f008 f813 	bl	291da <z_log_msg_finalize>
		return -EIO;
   211b4:	f06f 0004 	mvn.w	r0, #4
   211b8:	e7c9      	b.n	2114e <mcp2515_get_state+0x52>
		} else if (eflg & MCP2515_EFLG_TXBO) {
   211ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
   211be:	f013 0f20 	tst.w	r3, #32
   211c2:	d002      	beq.n	211ca <mcp2515_get_state+0xce>
			*state = CAN_STATE_BUS_OFF;
   211c4:	2303      	movs	r3, #3
   211c6:	702b      	strb	r3, [r5, #0]
   211c8:	e7af      	b.n	2112a <mcp2515_get_state+0x2e>
		} else if ((eflg & MCP2515_EFLG_RXEP) || (eflg & MCP2515_EFLG_TXEP)) {
   211ca:	f013 0f18 	tst.w	r3, #24
   211ce:	d002      	beq.n	211d6 <mcp2515_get_state+0xda>
			*state = CAN_STATE_ERROR_PASSIVE;
   211d0:	2302      	movs	r3, #2
   211d2:	702b      	strb	r3, [r5, #0]
   211d4:	e7a9      	b.n	2112a <mcp2515_get_state+0x2e>
		} else if (eflg & MCP2515_EFLG_EWARN) {
   211d6:	f013 0f01 	tst.w	r3, #1
   211da:	d002      	beq.n	211e2 <mcp2515_get_state+0xe6>
			*state = CAN_STATE_ERROR_WARNING;
   211dc:	2301      	movs	r3, #1
   211de:	702b      	strb	r3, [r5, #0]
   211e0:	e7a3      	b.n	2112a <mcp2515_get_state+0x2e>
			*state = CAN_STATE_ERROR_ACTIVE;
   211e2:	2300      	movs	r3, #0
   211e4:	702b      	strb	r3, [r5, #0]
   211e6:	e7a0      	b.n	2112a <mcp2515_get_state+0x2e>
			LOG_ERR("Failed to read error counters [%d]", ret);
   211e8:	2008      	movs	r0, #8
   211ea:	f7f2 fd8d 	bl	13d08 <z_log_msg_alloc>
   211ee:	2200      	movs	r2, #0
   211f0:	f36f 0200 	bfc	r2, #0, #1
   211f4:	f36f 0241 	bfc	r2, #1, #1
   211f8:	f36f 0282 	bfc	r2, #2, #1
   211fc:	f36f 02c5 	bfc	r2, #3, #3
   21200:	2301      	movs	r3, #1
   21202:	f363 1288 	bfi	r2, r3, #6, #3
   21206:	230c      	movs	r3, #12
   21208:	f363 2252 	bfi	r2, r3, #9, #10
   2120c:	f36f 42de 	bfc	r2, #19, #12
   21210:	f36f 72df 	bfc	r2, #31, #1
   21214:	4604      	mov	r4, r0
   21216:	b190      	cbz	r0, 2123e <mcp2515_get_state+0x142>
   21218:	f110 0310 	adds.w	r3, r0, #16
   2121c:	d002      	beq.n	21224 <mcp2515_get_state+0x128>
   2121e:	490f      	ldr	r1, [pc, #60]	; (2125c <mcp2515_get_state+0x160>)
   21220:	6141      	str	r1, [r0, #20]
   21222:	6185      	str	r5, [r0, #24]
   21224:	b15b      	cbz	r3, 2123e <mcp2515_get_state+0x142>
   21226:	2303      	movs	r3, #3
   21228:	f88d 3000 	strb.w	r3, [sp]
   2122c:	2300      	movs	r3, #0
   2122e:	f88d 3001 	strb.w	r3, [sp, #1]
   21232:	f88d 3002 	strb.w	r3, [sp, #2]
   21236:	f88d 3003 	strb.w	r3, [sp, #3]
   2123a:	9800      	ldr	r0, [sp, #0]
   2123c:	6120      	str	r0, [r4, #16]
   2123e:	2300      	movs	r3, #0
   21240:	4905      	ldr	r1, [pc, #20]	; (21258 <mcp2515_get_state+0x15c>)
   21242:	4620      	mov	r0, r4
   21244:	f007 ffc9 	bl	291da <z_log_msg_finalize>
			return -EIO;
   21248:	f06f 0004 	mvn.w	r0, #4
   2124c:	e77f      	b.n	2114e <mcp2515_get_state+0x52>
	return 0;
   2124e:	2000      	movs	r0, #0
   21250:	e77d      	b.n	2114e <mcp2515_get_state+0x52>
   21252:	bf00      	nop
   21254:	0003418c 	.word	0x0003418c
   21258:	00031470 	.word	0x00031470
   2125c:	000341b0 	.word	0x000341b0

00021260 <mcp2515_set_mode>:
	struct mcp2515_data *dev_data = dev->data;
   21260:	6903      	ldr	r3, [r0, #16]
	if (dev_data->started) {
   21262:	f893 217a 	ldrb.w	r2, [r3, #378]	; 0x17a
   21266:	2a00      	cmp	r2, #0
   21268:	d14a      	bne.n	21300 <mcp2515_set_mode+0xa0>
{
   2126a:	b510      	push	{r4, lr}
   2126c:	b082      	sub	sp, #8
   2126e:	460c      	mov	r4, r1
	switch (mode) {
   21270:	2901      	cmp	r1, #1
   21272:	d040      	beq.n	212f6 <mcp2515_set_mode+0x96>
   21274:	2902      	cmp	r1, #2
   21276:	d039      	beq.n	212ec <mcp2515_set_mode+0x8c>
   21278:	b399      	cbz	r1, 212e2 <mcp2515_set_mode+0x82>
		LOG_ERR("Unsupported CAN Mode %u", mode);
   2127a:	2008      	movs	r0, #8
   2127c:	f7f2 fd44 	bl	13d08 <z_log_msg_alloc>
   21280:	2200      	movs	r2, #0
   21282:	f36f 0200 	bfc	r2, #0, #1
   21286:	f36f 0241 	bfc	r2, #1, #1
   2128a:	f36f 0282 	bfc	r2, #2, #1
   2128e:	f36f 02c5 	bfc	r2, #3, #3
   21292:	2301      	movs	r3, #1
   21294:	f363 1288 	bfi	r2, r3, #6, #3
   21298:	230c      	movs	r3, #12
   2129a:	f363 2252 	bfi	r2, r3, #9, #10
   2129e:	f36f 42de 	bfc	r2, #19, #12
   212a2:	f36f 72df 	bfc	r2, #31, #1
   212a6:	4684      	mov	ip, r0
   212a8:	b198      	cbz	r0, 212d2 <mcp2515_set_mode+0x72>
   212aa:	f110 0310 	adds.w	r3, r0, #16
   212ae:	d002      	beq.n	212b6 <mcp2515_set_mode+0x56>
   212b0:	4915      	ldr	r1, [pc, #84]	; (21308 <mcp2515_set_mode+0xa8>)
   212b2:	6141      	str	r1, [r0, #20]
   212b4:	6184      	str	r4, [r0, #24]
   212b6:	b163      	cbz	r3, 212d2 <mcp2515_set_mode+0x72>
   212b8:	2303      	movs	r3, #3
   212ba:	f88d 3004 	strb.w	r3, [sp, #4]
   212be:	2300      	movs	r3, #0
   212c0:	f88d 3005 	strb.w	r3, [sp, #5]
   212c4:	f88d 3006 	strb.w	r3, [sp, #6]
   212c8:	f88d 3007 	strb.w	r3, [sp, #7]
   212cc:	9801      	ldr	r0, [sp, #4]
   212ce:	f8cc 0010 	str.w	r0, [ip, #16]
   212d2:	2300      	movs	r3, #0
   212d4:	490d      	ldr	r1, [pc, #52]	; (2130c <mcp2515_set_mode+0xac>)
   212d6:	4660      	mov	r0, ip
   212d8:	f007 ff7f 	bl	291da <z_log_msg_finalize>
		return -ENOTSUP;
   212dc:	f06f 0085 	mvn.w	r0, #133	; 0x85
   212e0:	e002      	b.n	212e8 <mcp2515_set_mode+0x88>
		dev_data->mcp2515_mode = MCP2515_MODE_NORMAL;
   212e2:	2000      	movs	r0, #0
   212e4:	f883 0179 	strb.w	r0, [r3, #377]	; 0x179
}
   212e8:	b002      	add	sp, #8
   212ea:	bd10      	pop	{r4, pc}
		dev_data->mcp2515_mode = MCP2515_MODE_SILENT;
   212ec:	2203      	movs	r2, #3
   212ee:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
	return 0;
   212f2:	2000      	movs	r0, #0
		break;
   212f4:	e7f8      	b.n	212e8 <mcp2515_set_mode+0x88>
		dev_data->mcp2515_mode = MCP2515_MODE_LOOPBACK;
   212f6:	2202      	movs	r2, #2
   212f8:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
	return 0;
   212fc:	2000      	movs	r0, #0
		break;
   212fe:	e7f3      	b.n	212e8 <mcp2515_set_mode+0x88>
		return -EBUSY;
   21300:	f06f 000f 	mvn.w	r0, #15
}
   21304:	4770      	bx	lr
   21306:	bf00      	nop
   21308:	000341d4 	.word	0x000341d4
   2130c:	00031470 	.word	0x00031470

00021310 <mcp2515_handle_errors>:

static void mcp2515_handle_errors(const struct device *dev)
{
   21310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21314:	b082      	sub	sp, #8
   21316:	4604      	mov	r4, r0
	struct mcp2515_data *dev_data = dev->data;
   21318:	6906      	ldr	r6, [r0, #16]
	can_state_change_callback_t state_change_cb = dev_data->state_change_cb;
   2131a:	f8d6 515c 	ldr.w	r5, [r6, #348]	; 0x15c
	void *state_change_cb_data = dev_data->state_change_cb_data;
   2131e:	f8d6 7160 	ldr.w	r7, [r6, #352]	; 0x160
	enum can_state state;
	struct can_bus_err_cnt err_cnt;
	int err;

	err = mcp2515_get_state(dev, &state, state_change_cb ? &err_cnt : NULL);
   21322:	b1bd      	cbz	r5, 21354 <mcp2515_handle_errors+0x44>
   21324:	aa01      	add	r2, sp, #4
   21326:	f10d 0107 	add.w	r1, sp, #7
   2132a:	4620      	mov	r0, r4
   2132c:	f7ff fee6 	bl	210fc <mcp2515_get_state>
	if (err != 0) {
   21330:	4680      	mov	r8, r0
   21332:	b988      	cbnz	r0, 21358 <mcp2515_handle_errors+0x48>
		LOG_ERR("Failed to get CAN controller state [%d]", err);
		return;
	}

	if (state_change_cb && dev_data->old_state != state) {
   21334:	b15d      	cbz	r5, 2134e <mcp2515_handle_errors+0x3e>
   21336:	f896 3178 	ldrb.w	r3, [r6, #376]	; 0x178
   2133a:	f89d 1007 	ldrb.w	r1, [sp, #7]
   2133e:	428b      	cmp	r3, r1
   21340:	d005      	beq.n	2134e <mcp2515_handle_errors+0x3e>
		dev_data->old_state = state;
   21342:	f886 1178 	strb.w	r1, [r6, #376]	; 0x178
		state_change_cb(dev, state, err_cnt, state_change_cb_data);
   21346:	463b      	mov	r3, r7
   21348:	9a01      	ldr	r2, [sp, #4]
   2134a:	4620      	mov	r0, r4
   2134c:	47a8      	blx	r5
	}
}
   2134e:	b002      	add	sp, #8
   21350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = mcp2515_get_state(dev, &state, state_change_cb ? &err_cnt : NULL);
   21354:	2200      	movs	r2, #0
   21356:	e7e6      	b.n	21326 <mcp2515_handle_errors+0x16>
		LOG_ERR("Failed to get CAN controller state [%d]", err);
   21358:	2008      	movs	r0, #8
   2135a:	f7f2 fcd5 	bl	13d08 <z_log_msg_alloc>
   2135e:	2200      	movs	r2, #0
   21360:	f36f 0200 	bfc	r2, #0, #1
   21364:	f36f 0241 	bfc	r2, #1, #1
   21368:	f36f 0282 	bfc	r2, #2, #1
   2136c:	f36f 02c5 	bfc	r2, #3, #3
   21370:	2301      	movs	r3, #1
   21372:	f363 1288 	bfi	r2, r3, #6, #3
   21376:	230c      	movs	r3, #12
   21378:	f363 2252 	bfi	r2, r3, #9, #10
   2137c:	f36f 42de 	bfc	r2, #19, #12
   21380:	f36f 72df 	bfc	r2, #31, #1
   21384:	4604      	mov	r4, r0
   21386:	b198      	cbz	r0, 213b0 <mcp2515_handle_errors+0xa0>
   21388:	f110 0310 	adds.w	r3, r0, #16
   2138c:	d003      	beq.n	21396 <mcp2515_handle_errors+0x86>
   2138e:	490b      	ldr	r1, [pc, #44]	; (213bc <mcp2515_handle_errors+0xac>)
   21390:	6141      	str	r1, [r0, #20]
   21392:	f8c0 8018 	str.w	r8, [r0, #24]
   21396:	b15b      	cbz	r3, 213b0 <mcp2515_handle_errors+0xa0>
   21398:	2303      	movs	r3, #3
   2139a:	f88d 3000 	strb.w	r3, [sp]
   2139e:	2300      	movs	r3, #0
   213a0:	f88d 3001 	strb.w	r3, [sp, #1]
   213a4:	f88d 3002 	strb.w	r3, [sp, #2]
   213a8:	f88d 3003 	strb.w	r3, [sp, #3]
   213ac:	9800      	ldr	r0, [sp, #0]
   213ae:	6120      	str	r0, [r4, #16]
   213b0:	2300      	movs	r3, #0
   213b2:	4903      	ldr	r1, [pc, #12]	; (213c0 <mcp2515_handle_errors+0xb0>)
   213b4:	4620      	mov	r0, r4
   213b6:	f007 ff10 	bl	291da <z_log_msg_finalize>
		return;
   213ba:	e7c8      	b.n	2134e <mcp2515_handle_errors+0x3e>
   213bc:	000341ec 	.word	0x000341ec
   213c0:	00031470 	.word	0x00031470

000213c4 <mcp2515_set_timing>:
{
   213c4:	b570      	push	{r4, r5, r6, lr}
   213c6:	b082      	sub	sp, #8
	struct mcp2515_data *dev_data = dev->data;
   213c8:	6906      	ldr	r6, [r0, #16]
	if (!timing) {
   213ca:	2900      	cmp	r1, #0
   213cc:	f000 80e5 	beq.w	2159a <mcp2515_set_timing+0x1d6>
   213d0:	4604      	mov	r4, r0
   213d2:	460a      	mov	r2, r1
	if (dev_data->started) {
   213d4:	f896 317a 	ldrb.w	r3, [r6, #378]	; 0x17a
   213d8:	2b00      	cmp	r3, #0
   213da:	f040 80e1 	bne.w	215a0 <mcp2515_set_timing+0x1dc>
	uint8_t brp = timing->prescaler - 1;
   213de:	7a0b      	ldrb	r3, [r1, #8]
   213e0:	3b01      	subs	r3, #1
   213e2:	b2db      	uxtb	r3, r3
	if (timing->sjw != CAN_SJW_NO_CHANGE) {
   213e4:	8809      	ldrh	r1, [r1, #0]
   213e6:	b121      	cbz	r1, 213f2 <mcp2515_set_timing+0x2e>
		dev_data->sjw = (timing->sjw - 1) << 6;
   213e8:	3901      	subs	r1, #1
   213ea:	b2c9      	uxtb	r1, r1
   213ec:	0189      	lsls	r1, r1, #6
   213ee:	f886 117b 	strb.w	r1, [r6, #379]	; 0x17b
	uint8_t cnf1 = dev_data->sjw | brp;
   213f2:	f896 517b 	ldrb.w	r5, [r6, #379]	; 0x17b
   213f6:	431d      	orrs	r5, r3
	const uint8_t phseg1 = (timing->phase_seg1 - 1) << 3;
   213f8:	8893      	ldrh	r3, [r2, #4]
   213fa:	3b01      	subs	r3, #1
   213fc:	b2db      	uxtb	r3, r3
   213fe:	00db      	lsls	r3, r3, #3
   21400:	b2db      	uxtb	r3, r3
	const uint8_t prseg = (timing->prop_seg - 1);
   21402:	7891      	ldrb	r1, [r2, #2]
   21404:	3901      	subs	r1, #1
   21406:	b2c9      	uxtb	r1, r1
	const uint8_t cnf2 = btlmode | sam | phseg1 | prseg;
   21408:	430b      	orrs	r3, r1
   2140a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
	const uint8_t phseg2 = (timing->phase_seg2 - 1);
   2140e:	7992      	ldrb	r2, [r2, #6]
   21410:	3a01      	subs	r2, #1
	config_buf[0] = cnf3;
   21412:	f88d 2004 	strb.w	r2, [sp, #4]
	config_buf[1] = cnf2;
   21416:	f88d 3005 	strb.w	r3, [sp, #5]
	config_buf[2] = cnf1;
   2141a:	f88d 5006 	strb.w	r5, [sp, #6]
	config_buf[3] = caninte;
   2141e:	233f      	movs	r3, #63	; 0x3f
   21420:	f88d 3007 	strb.w	r3, [sp, #7]
	k_mutex_lock(&dev_data->mutex, K_FOREVER);
   21424:	f506 76b2 	add.w	r6, r6, #356	; 0x164
	return z_impl_k_mutex_lock(mutex, timeout);
   21428:	f04f 32ff 	mov.w	r2, #4294967295
   2142c:	f04f 33ff 	mov.w	r3, #4294967295
   21430:	4630      	mov	r0, r6
   21432:	f004 ffbf 	bl	263b4 <z_impl_k_mutex_lock>
	ret = mcp2515_cmd_write_reg(dev, MCP2515_ADDR_CNF3, config_buf,
   21436:	2304      	movs	r3, #4
   21438:	eb0d 0203 	add.w	r2, sp, r3
   2143c:	2128      	movs	r1, #40	; 0x28
   2143e:	4620      	mov	r0, r4
   21440:	f00c fce7 	bl	2de12 <mcp2515_cmd_write_reg>
	if (ret < 0) {
   21444:	1e05      	subs	r5, r0, #0
   21446:	db15      	blt.n	21474 <mcp2515_set_timing+0xb0>
	ret = mcp2515_cmd_bit_modify(dev, MCP2515_ADDR_RXB0CTRL, rx0_ctrl,
   21448:	2364      	movs	r3, #100	; 0x64
   2144a:	461a      	mov	r2, r3
   2144c:	2160      	movs	r1, #96	; 0x60
   2144e:	4620      	mov	r0, r4
   21450:	f00c fcc4 	bl	2dddc <mcp2515_cmd_bit_modify>
	if (ret < 0) {
   21454:	1e05      	subs	r5, r0, #0
   21456:	db3e      	blt.n	214d6 <mcp2515_set_timing+0x112>
	ret = mcp2515_cmd_bit_modify(dev, MCP2515_ADDR_RXB1CTRL, rx1_ctrl,
   21458:	2360      	movs	r3, #96	; 0x60
   2145a:	461a      	mov	r2, r3
   2145c:	2170      	movs	r1, #112	; 0x70
   2145e:	4620      	mov	r0, r4
   21460:	f00c fcbc 	bl	2dddc <mcp2515_cmd_bit_modify>
	if (ret < 0) {
   21464:	1e05      	subs	r5, r0, #0
   21466:	db67      	blt.n	21538 <mcp2515_set_timing+0x174>
	return z_impl_k_mutex_unlock(mutex);
   21468:	4630      	mov	r0, r6
   2146a:	f005 f827 	bl	264bc <z_impl_k_mutex_unlock>
}
   2146e:	4628      	mov	r0, r5
   21470:	b002      	add	sp, #8
   21472:	bd70      	pop	{r4, r5, r6, pc}
		LOG_ERR("Failed to write the configuration [%d]", ret);
   21474:	2008      	movs	r0, #8
   21476:	f7f2 fc47 	bl	13d08 <z_log_msg_alloc>
   2147a:	2200      	movs	r2, #0
   2147c:	f36f 0200 	bfc	r2, #0, #1
   21480:	f36f 0241 	bfc	r2, #1, #1
   21484:	f36f 0282 	bfc	r2, #2, #1
   21488:	f36f 02c5 	bfc	r2, #3, #3
   2148c:	2301      	movs	r3, #1
   2148e:	f363 1288 	bfi	r2, r3, #6, #3
   21492:	230c      	movs	r3, #12
   21494:	f363 2252 	bfi	r2, r3, #9, #10
   21498:	f36f 42de 	bfc	r2, #19, #12
   2149c:	f36f 72df 	bfc	r2, #31, #1
   214a0:	4604      	mov	r4, r0
   214a2:	b190      	cbz	r0, 214ca <mcp2515_set_timing+0x106>
   214a4:	f110 0310 	adds.w	r3, r0, #16
   214a8:	d002      	beq.n	214b0 <mcp2515_set_timing+0xec>
   214aa:	493f      	ldr	r1, [pc, #252]	; (215a8 <mcp2515_set_timing+0x1e4>)
   214ac:	6141      	str	r1, [r0, #20]
   214ae:	6185      	str	r5, [r0, #24]
   214b0:	b15b      	cbz	r3, 214ca <mcp2515_set_timing+0x106>
   214b2:	2303      	movs	r3, #3
   214b4:	f88d 3000 	strb.w	r3, [sp]
   214b8:	2300      	movs	r3, #0
   214ba:	f88d 3001 	strb.w	r3, [sp, #1]
   214be:	f88d 3002 	strb.w	r3, [sp, #2]
   214c2:	f88d 3003 	strb.w	r3, [sp, #3]
   214c6:	9800      	ldr	r0, [sp, #0]
   214c8:	6120      	str	r0, [r4, #16]
   214ca:	2300      	movs	r3, #0
   214cc:	4937      	ldr	r1, [pc, #220]	; (215ac <mcp2515_set_timing+0x1e8>)
   214ce:	4620      	mov	r0, r4
   214d0:	f007 fe83 	bl	291da <z_log_msg_finalize>
		goto done;
   214d4:	e7c8      	b.n	21468 <mcp2515_set_timing+0xa4>
		LOG_ERR("Failed to write RXB0CTRL [%d]", ret);
   214d6:	2008      	movs	r0, #8
   214d8:	f7f2 fc16 	bl	13d08 <z_log_msg_alloc>
   214dc:	2200      	movs	r2, #0
   214de:	f36f 0200 	bfc	r2, #0, #1
   214e2:	f36f 0241 	bfc	r2, #1, #1
   214e6:	f36f 0282 	bfc	r2, #2, #1
   214ea:	f36f 02c5 	bfc	r2, #3, #3
   214ee:	2301      	movs	r3, #1
   214f0:	f363 1288 	bfi	r2, r3, #6, #3
   214f4:	230c      	movs	r3, #12
   214f6:	f363 2252 	bfi	r2, r3, #9, #10
   214fa:	f36f 42de 	bfc	r2, #19, #12
   214fe:	f36f 72df 	bfc	r2, #31, #1
   21502:	4604      	mov	r4, r0
   21504:	b190      	cbz	r0, 2152c <mcp2515_set_timing+0x168>
   21506:	f110 0310 	adds.w	r3, r0, #16
   2150a:	d002      	beq.n	21512 <mcp2515_set_timing+0x14e>
   2150c:	4928      	ldr	r1, [pc, #160]	; (215b0 <mcp2515_set_timing+0x1ec>)
   2150e:	6141      	str	r1, [r0, #20]
   21510:	6185      	str	r5, [r0, #24]
   21512:	b15b      	cbz	r3, 2152c <mcp2515_set_timing+0x168>
   21514:	2303      	movs	r3, #3
   21516:	f88d 3000 	strb.w	r3, [sp]
   2151a:	2300      	movs	r3, #0
   2151c:	f88d 3001 	strb.w	r3, [sp, #1]
   21520:	f88d 3002 	strb.w	r3, [sp, #2]
   21524:	f88d 3003 	strb.w	r3, [sp, #3]
   21528:	9800      	ldr	r0, [sp, #0]
   2152a:	6120      	str	r0, [r4, #16]
   2152c:	2300      	movs	r3, #0
   2152e:	491f      	ldr	r1, [pc, #124]	; (215ac <mcp2515_set_timing+0x1e8>)
   21530:	4620      	mov	r0, r4
   21532:	f007 fe52 	bl	291da <z_log_msg_finalize>
		goto done;
   21536:	e797      	b.n	21468 <mcp2515_set_timing+0xa4>
		LOG_ERR("Failed to write RXB1CTRL [%d]", ret);
   21538:	2008      	movs	r0, #8
   2153a:	f7f2 fbe5 	bl	13d08 <z_log_msg_alloc>
   2153e:	2200      	movs	r2, #0
   21540:	f36f 0200 	bfc	r2, #0, #1
   21544:	f36f 0241 	bfc	r2, #1, #1
   21548:	f36f 0282 	bfc	r2, #2, #1
   2154c:	f36f 02c5 	bfc	r2, #3, #3
   21550:	2301      	movs	r3, #1
   21552:	f363 1288 	bfi	r2, r3, #6, #3
   21556:	230c      	movs	r3, #12
   21558:	f363 2252 	bfi	r2, r3, #9, #10
   2155c:	f36f 42de 	bfc	r2, #19, #12
   21560:	f36f 72df 	bfc	r2, #31, #1
   21564:	4604      	mov	r4, r0
   21566:	b190      	cbz	r0, 2158e <mcp2515_set_timing+0x1ca>
   21568:	f110 0310 	adds.w	r3, r0, #16
   2156c:	d002      	beq.n	21574 <mcp2515_set_timing+0x1b0>
   2156e:	4911      	ldr	r1, [pc, #68]	; (215b4 <mcp2515_set_timing+0x1f0>)
   21570:	6141      	str	r1, [r0, #20]
   21572:	6185      	str	r5, [r0, #24]
   21574:	b15b      	cbz	r3, 2158e <mcp2515_set_timing+0x1ca>
   21576:	2303      	movs	r3, #3
   21578:	f88d 3000 	strb.w	r3, [sp]
   2157c:	2300      	movs	r3, #0
   2157e:	f88d 3001 	strb.w	r3, [sp, #1]
   21582:	f88d 3002 	strb.w	r3, [sp, #2]
   21586:	f88d 3003 	strb.w	r3, [sp, #3]
   2158a:	9800      	ldr	r0, [sp, #0]
   2158c:	6120      	str	r0, [r4, #16]
   2158e:	2300      	movs	r3, #0
   21590:	4906      	ldr	r1, [pc, #24]	; (215ac <mcp2515_set_timing+0x1e8>)
   21592:	4620      	mov	r0, r4
   21594:	f007 fe21 	bl	291da <z_log_msg_finalize>
		goto done;
   21598:	e766      	b.n	21468 <mcp2515_set_timing+0xa4>
		return -EINVAL;
   2159a:	f06f 0515 	mvn.w	r5, #21
   2159e:	e766      	b.n	2146e <mcp2515_set_timing+0xaa>
		return -EBUSY;
   215a0:	f06f 050f 	mvn.w	r5, #15
   215a4:	e763      	b.n	2146e <mcp2515_set_timing+0xaa>
   215a6:	bf00      	nop
   215a8:	00034214 	.word	0x00034214
   215ac:	00031470 	.word	0x00031470
   215b0:	0003423c 	.word	0x0003423c
   215b4:	0003425c 	.word	0x0003425c

000215b8 <mcp2515_send>:
{
   215b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   215bc:	b087      	sub	sp, #28
	struct mcp2515_data *dev_data = dev->data;
   215be:	6905      	ldr	r5, [r0, #16]
	if (frame->dlc > CAN_MAX_DLC) {
   215c0:	790c      	ldrb	r4, [r1, #4]
   215c2:	2c08      	cmp	r4, #8
   215c4:	d844      	bhi.n	21650 <mcp2515_send+0x98>
   215c6:	4607      	mov	r7, r0
   215c8:	460e      	mov	r6, r1
	if ((frame->flags & ~(CAN_FRAME_IDE | CAN_FRAME_RTR)) != 0) {
   215ca:	794c      	ldrb	r4, [r1, #5]
   215cc:	2c03      	cmp	r4, #3
   215ce:	d873      	bhi.n	216b8 <mcp2515_send+0x100>
	if (!dev_data->started) {
   215d0:	f895 117a 	ldrb.w	r1, [r5, #378]	; 0x17a
   215d4:	2900      	cmp	r1, #0
   215d6:	f000 80e4 	beq.w	217a2 <mcp2515_send+0x1ea>
	if (k_sem_take(&dev_data->tx_sem, timeout) != 0) {
   215da:	f105 00e4 	add.w	r0, r5, #228	; 0xe4
	return z_impl_k_sem_take(sem, timeout);
   215de:	f005 f811 	bl	26604 <z_impl_k_sem_take>
   215e2:	4680      	mov	r8, r0
   215e4:	2800      	cmp	r0, #0
   215e6:	f040 80df 	bne.w	217a8 <mcp2515_send+0x1f0>
	k_mutex_lock(&dev_data->mutex, K_FOREVER);
   215ea:	f505 79b2 	add.w	r9, r5, #356	; 0x164
	return z_impl_k_mutex_lock(mutex, timeout);
   215ee:	f04f 32ff 	mov.w	r2, #4294967295
   215f2:	f04f 33ff 	mov.w	r3, #4294967295
   215f6:	4648      	mov	r0, r9
   215f8:	f004 fedc 	bl	263b4 <z_impl_k_mutex_lock>
	uint8_t tx_idx = 0U;
   215fc:	2400      	movs	r4, #0
	for (; tx_idx < MCP2515_TX_CNT; tx_idx++) {
   215fe:	2c00      	cmp	r4, #0
   21600:	f000 808d 	beq.w	2171e <mcp2515_send+0x166>
	return z_impl_k_mutex_unlock(mutex);
   21604:	4648      	mov	r0, r9
   21606:	f004 ff59 	bl	264bc <z_impl_k_mutex_unlock>
	if (tx_idx == MCP2515_TX_CNT) {
   2160a:	2c01      	cmp	r4, #1
   2160c:	f000 8097 	beq.w	2173e <mcp2515_send+0x186>
	dev_data->tx_cb[tx_idx].cb = callback;
   21610:	f104 031f 	add.w	r3, r4, #31
   21614:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   21618:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2161a:	606b      	str	r3, [r5, #4]
	dev_data->tx_cb[tx_idx].cb_arg = user_data;
   2161c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2161e:	60ab      	str	r3, [r5, #8]
	mcp2515_convert_canframe_to_mcp2515frame(frame, tx_frame);
   21620:	a902      	add	r1, sp, #8
   21622:	4630      	mov	r0, r6
   21624:	f00c fc74 	bl	2df10 <mcp2515_convert_canframe_to_mcp2515frame>
	abc = 2 * tx_idx;
   21628:	0061      	lsls	r1, r4, #1
	len = sizeof(tx_frame) - CAN_MAX_DLC + frame->dlc;
   2162a:	7933      	ldrb	r3, [r6, #4]
   2162c:	3305      	adds	r3, #5
	mcp2515_cmd_load_tx_buffer(dev, abc, tx_frame, len);
   2162e:	b2db      	uxtb	r3, r3
   21630:	aa02      	add	r2, sp, #8
   21632:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
   21636:	4638      	mov	r0, r7
   21638:	f00c fc00 	bl	2de3c <mcp2515_cmd_load_tx_buffer>
	nnn = BIT(tx_idx);
   2163c:	2101      	movs	r1, #1
   2163e:	40a1      	lsls	r1, r4
	mcp2515_cmd_rts(dev, nnn);
   21640:	b2c9      	uxtb	r1, r1
   21642:	4638      	mov	r0, r7
   21644:	f00c fc11 	bl	2de6a <mcp2515_cmd_rts>
}
   21648:	4640      	mov	r0, r8
   2164a:	b007      	add	sp, #28
   2164c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		LOG_ERR("DLC of %d exceeds maximum (%d)",
   21650:	2008      	movs	r0, #8
   21652:	f7f2 fb59 	bl	13d08 <z_log_msg_alloc>
   21656:	2200      	movs	r2, #0
   21658:	f36f 0200 	bfc	r2, #0, #1
   2165c:	f36f 0241 	bfc	r2, #1, #1
   21660:	f36f 0282 	bfc	r2, #2, #1
   21664:	f36f 02c5 	bfc	r2, #3, #3
   21668:	2301      	movs	r3, #1
   2166a:	f363 1288 	bfi	r2, r3, #6, #3
   2166e:	2310      	movs	r3, #16
   21670:	f363 2252 	bfi	r2, r3, #9, #10
   21674:	f36f 42de 	bfc	r2, #19, #12
   21678:	f36f 72df 	bfc	r2, #31, #1
   2167c:	4605      	mov	r5, r0
   2167e:	b198      	cbz	r0, 216a8 <mcp2515_send+0xf0>
   21680:	18c3      	adds	r3, r0, r3
   21682:	d004      	beq.n	2168e <mcp2515_send+0xd6>
   21684:	494a      	ldr	r1, [pc, #296]	; (217b0 <mcp2515_send+0x1f8>)
   21686:	6141      	str	r1, [r0, #20]
   21688:	6184      	str	r4, [r0, #24]
   2168a:	2108      	movs	r1, #8
   2168c:	61c1      	str	r1, [r0, #28]
   2168e:	b15b      	cbz	r3, 216a8 <mcp2515_send+0xf0>
   21690:	2304      	movs	r3, #4
   21692:	f88d 3004 	strb.w	r3, [sp, #4]
   21696:	2300      	movs	r3, #0
   21698:	f88d 3005 	strb.w	r3, [sp, #5]
   2169c:	f88d 3006 	strb.w	r3, [sp, #6]
   216a0:	f88d 3007 	strb.w	r3, [sp, #7]
   216a4:	9801      	ldr	r0, [sp, #4]
   216a6:	6128      	str	r0, [r5, #16]
   216a8:	2300      	movs	r3, #0
   216aa:	4942      	ldr	r1, [pc, #264]	; (217b4 <mcp2515_send+0x1fc>)
   216ac:	4628      	mov	r0, r5
   216ae:	f007 fd94 	bl	291da <z_log_msg_finalize>
		return -EINVAL;
   216b2:	f06f 0815 	mvn.w	r8, #21
   216b6:	e7c7      	b.n	21648 <mcp2515_send+0x90>
		LOG_ERR("unsupported CAN frame flags 0x%02x", frame->flags);
   216b8:	2008      	movs	r0, #8
   216ba:	f7f2 fb25 	bl	13d08 <z_log_msg_alloc>
   216be:	2200      	movs	r2, #0
   216c0:	f36f 0200 	bfc	r2, #0, #1
   216c4:	f36f 0241 	bfc	r2, #1, #1
   216c8:	f36f 0282 	bfc	r2, #2, #1
   216cc:	f36f 02c5 	bfc	r2, #3, #3
   216d0:	2301      	movs	r3, #1
   216d2:	f363 1288 	bfi	r2, r3, #6, #3
   216d6:	230c      	movs	r3, #12
   216d8:	f363 2252 	bfi	r2, r3, #9, #10
   216dc:	f36f 42de 	bfc	r2, #19, #12
   216e0:	f36f 72df 	bfc	r2, #31, #1
   216e4:	4605      	mov	r5, r0
   216e6:	b190      	cbz	r0, 2170e <mcp2515_send+0x156>
   216e8:	f110 0310 	adds.w	r3, r0, #16
   216ec:	d002      	beq.n	216f4 <mcp2515_send+0x13c>
   216ee:	4932      	ldr	r1, [pc, #200]	; (217b8 <mcp2515_send+0x200>)
   216f0:	6141      	str	r1, [r0, #20]
   216f2:	6184      	str	r4, [r0, #24]
   216f4:	b15b      	cbz	r3, 2170e <mcp2515_send+0x156>
   216f6:	2303      	movs	r3, #3
   216f8:	f88d 3004 	strb.w	r3, [sp, #4]
   216fc:	2300      	movs	r3, #0
   216fe:	f88d 3005 	strb.w	r3, [sp, #5]
   21702:	f88d 3006 	strb.w	r3, [sp, #6]
   21706:	f88d 3007 	strb.w	r3, [sp, #7]
   2170a:	9801      	ldr	r0, [sp, #4]
   2170c:	6128      	str	r0, [r5, #16]
   2170e:	2300      	movs	r3, #0
   21710:	4928      	ldr	r1, [pc, #160]	; (217b4 <mcp2515_send+0x1fc>)
   21712:	4628      	mov	r0, r5
   21714:	f007 fd61 	bl	291da <z_log_msg_finalize>
		return -ENOTSUP;
   21718:	f06f 0885 	mvn.w	r8, #133	; 0x85
   2171c:	e794      	b.n	21648 <mcp2515_send+0x90>
		if ((BIT(tx_idx) & dev_data->tx_busy_map) == 0) {
   2171e:	f895 3104 	ldrb.w	r3, [r5, #260]	; 0x104
   21722:	fa23 f204 	lsr.w	r2, r3, r4
   21726:	f012 0f01 	tst.w	r2, #1
   2172a:	d002      	beq.n	21732 <mcp2515_send+0x17a>
	for (; tx_idx < MCP2515_TX_CNT; tx_idx++) {
   2172c:	3401      	adds	r4, #1
   2172e:	b2e4      	uxtb	r4, r4
   21730:	e765      	b.n	215fe <mcp2515_send+0x46>
			dev_data->tx_busy_map |= BIT(tx_idx);
   21732:	2201      	movs	r2, #1
   21734:	40a2      	lsls	r2, r4
   21736:	4313      	orrs	r3, r2
   21738:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
			break;
   2173c:	e762      	b.n	21604 <mcp2515_send+0x4c>
		LOG_WRN("no free tx slot available");
   2173e:	2006      	movs	r0, #6
   21740:	f7f2 fae2 	bl	13d08 <z_log_msg_alloc>
   21744:	2200      	movs	r2, #0
   21746:	f36f 0200 	bfc	r2, #0, #1
   2174a:	f36f 0241 	bfc	r2, #1, #1
   2174e:	f36f 0282 	bfc	r2, #2, #1
   21752:	f36f 02c5 	bfc	r2, #3, #3
   21756:	2302      	movs	r3, #2
   21758:	f363 1288 	bfi	r2, r3, #6, #3
   2175c:	2308      	movs	r3, #8
   2175e:	f363 2252 	bfi	r2, r3, #9, #10
   21762:	f36f 42de 	bfc	r2, #19, #12
   21766:	f36f 72df 	bfc	r2, #31, #1
   2176a:	4604      	mov	r4, r0
   2176c:	b188      	cbz	r0, 21792 <mcp2515_send+0x1da>
   2176e:	f110 0310 	adds.w	r3, r0, #16
   21772:	d001      	beq.n	21778 <mcp2515_send+0x1c0>
   21774:	4911      	ldr	r1, [pc, #68]	; (217bc <mcp2515_send+0x204>)
   21776:	6141      	str	r1, [r0, #20]
   21778:	b15b      	cbz	r3, 21792 <mcp2515_send+0x1da>
   2177a:	2302      	movs	r3, #2
   2177c:	f88d 3004 	strb.w	r3, [sp, #4]
   21780:	2300      	movs	r3, #0
   21782:	f88d 3005 	strb.w	r3, [sp, #5]
   21786:	f88d 3006 	strb.w	r3, [sp, #6]
   2178a:	f88d 3007 	strb.w	r3, [sp, #7]
   2178e:	9801      	ldr	r0, [sp, #4]
   21790:	6120      	str	r0, [r4, #16]
   21792:	2300      	movs	r3, #0
   21794:	4907      	ldr	r1, [pc, #28]	; (217b4 <mcp2515_send+0x1fc>)
   21796:	4620      	mov	r0, r4
   21798:	f007 fd1f 	bl	291da <z_log_msg_finalize>
		return -EIO;
   2179c:	f06f 0804 	mvn.w	r8, #4
   217a0:	e752      	b.n	21648 <mcp2515_send+0x90>
		return -ENETDOWN;
   217a2:	f06f 0872 	mvn.w	r8, #114	; 0x72
   217a6:	e74f      	b.n	21648 <mcp2515_send+0x90>
		return -EAGAIN;
   217a8:	f06f 080a 	mvn.w	r8, #10
   217ac:	e74c      	b.n	21648 <mcp2515_send+0x90>
   217ae:	bf00      	nop
   217b0:	0003427c 	.word	0x0003427c
   217b4:	00031470 	.word	0x00031470
   217b8:	0003429c 	.word	0x0003429c
   217bc:	000342c0 	.word	0x000342c0

000217c0 <mcp2515_handle_interrupts>:
	return -ENOTSUP;
}
#endif

static void mcp2515_handle_interrupts(const struct device *dev)
{
   217c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   217c4:	b082      	sub	sp, #8
   217c6:	4604      	mov	r4, r0
	const struct mcp2515_config *dev_cfg = dev->config;
   217c8:	6847      	ldr	r7, [r0, #4]
   217ca:	e066      	b.n	2189a <mcp2515_handle_interrupts+0xda>
	/* Loop until INT pin is inactive (all interrupt flags handled) */
	while (1) {
		ret = mcp2515_cmd_read_reg(dev, MCP2515_ADDR_CANINTF,
				&canintf, 1);
		if (ret != 0) {
			LOG_ERR("Couldn't read INTF register %d", ret);
   217cc:	2008      	movs	r0, #8
   217ce:	f7f2 fa9b 	bl	13d08 <z_log_msg_alloc>
   217d2:	f36f 0500 	bfc	r5, #0, #1
   217d6:	f36f 0541 	bfc	r5, #1, #1
   217da:	f36f 0582 	bfc	r5, #2, #1
   217de:	f36f 05c5 	bfc	r5, #3, #3
   217e2:	2301      	movs	r3, #1
   217e4:	f363 1588 	bfi	r5, r3, #6, #3
   217e8:	230c      	movs	r3, #12
   217ea:	f363 2552 	bfi	r5, r3, #9, #10
   217ee:	f36f 45de 	bfc	r5, #19, #12
   217f2:	f36f 75df 	bfc	r5, #31, #1
   217f6:	4684      	mov	ip, r0
   217f8:	b1a0      	cbz	r0, 21824 <mcp2515_handle_interrupts+0x64>
   217fa:	f110 0310 	adds.w	r3, r0, #16
   217fe:	d003      	beq.n	21808 <mcp2515_handle_interrupts+0x48>
   21800:	4a5a      	ldr	r2, [pc, #360]	; (2196c <mcp2515_handle_interrupts+0x1ac>)
   21802:	6142      	str	r2, [r0, #20]
   21804:	f8c0 8018 	str.w	r8, [r0, #24]
   21808:	b163      	cbz	r3, 21824 <mcp2515_handle_interrupts+0x64>
   2180a:	2303      	movs	r3, #3
   2180c:	f88d 3000 	strb.w	r3, [sp]
   21810:	2300      	movs	r3, #0
   21812:	f88d 3001 	strb.w	r3, [sp, #1]
   21816:	f88d 3002 	strb.w	r3, [sp, #2]
   2181a:	f88d 3003 	strb.w	r3, [sp, #3]
   2181e:	9800      	ldr	r0, [sp, #0]
   21820:	f8cc 0010 	str.w	r0, [ip, #16]
   21824:	2300      	movs	r3, #0
   21826:	462a      	mov	r2, r5
   21828:	4951      	ldr	r1, [pc, #324]	; (21970 <mcp2515_handle_interrupts+0x1b0>)
   2182a:	4660      	mov	r0, ip
   2182c:	f007 fcd5 	bl	291da <z_log_msg_finalize>
			continue;
   21830:	e033      	b.n	2189a <mcp2515_handle_interrupts+0xda>
			/* No interrupt flags set */
			break;
		}

		if (canintf & MCP2515_CANINTF_RX0IF) {
			mcp2515_rx(dev, 0);
   21832:	2100      	movs	r1, #0
   21834:	4620      	mov	r0, r4
   21836:	f00c fcc3 	bl	2e1c0 <mcp2515_rx>

			/* RX0IF flag cleared automatically during read */
			canintf &= ~MCP2515_CANINTF_RX0IF;
   2183a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2183e:	f023 0301 	bic.w	r3, r3, #1
   21842:	f88d 3007 	strb.w	r3, [sp, #7]
   21846:	e039      	b.n	218bc <mcp2515_handle_interrupts+0xfc>
		}

		if (canintf & MCP2515_CANINTF_RX1IF) {
			mcp2515_rx(dev, 1);
   21848:	2101      	movs	r1, #1
   2184a:	4620      	mov	r0, r4
   2184c:	f00c fcb8 	bl	2e1c0 <mcp2515_rx>

			/* RX1IF flag cleared automatically during read */
			canintf &= ~MCP2515_CANINTF_RX1IF;
   21850:	f89d 3007 	ldrb.w	r3, [sp, #7]
   21854:	f023 0302 	bic.w	r3, r3, #2
   21858:	f88d 3007 	strb.w	r3, [sp, #7]
   2185c:	e033      	b.n	218c6 <mcp2515_handle_interrupts+0x106>
		}

		if (canintf & MCP2515_CANINTF_TX0IF) {
			mcp2515_tx_done(dev, 0, 0);
   2185e:	2200      	movs	r2, #0
   21860:	4611      	mov	r1, r2
   21862:	4620      	mov	r0, r4
   21864:	f00c fc38 	bl	2e0d8 <mcp2515_tx_done>
   21868:	e032      	b.n	218d0 <mcp2515_handle_interrupts+0x110>
		}

		if (canintf & MCP2515_CANINTF_TX1IF) {
			mcp2515_tx_done(dev, 1, 0);
   2186a:	2200      	movs	r2, #0
   2186c:	2101      	movs	r1, #1
   2186e:	4620      	mov	r0, r4
   21870:	f00c fc32 	bl	2e0d8 <mcp2515_tx_done>
   21874:	e031      	b.n	218da <mcp2515_handle_interrupts+0x11a>
		}

		if (canintf & MCP2515_CANINTF_TX2IF) {
			mcp2515_tx_done(dev, 2, 0);
   21876:	2200      	movs	r2, #0
   21878:	2102      	movs	r1, #2
   2187a:	4620      	mov	r0, r4
   2187c:	f00c fc2c 	bl	2e0d8 <mcp2515_tx_done>
   21880:	e030      	b.n	218e4 <mcp2515_handle_interrupts+0x124>
		}

		if (canintf & MCP2515_CANINTF_ERRIF) {
			mcp2515_handle_errors(dev);
   21882:	4620      	mov	r0, r4
   21884:	f7ff fd44 	bl	21310 <mcp2515_handle_errors>
   21888:	e031      	b.n	218ee <mcp2515_handle_interrupts+0x12e>
	return gpio_pin_get(spec->port, spec->pin);
   2188a:	7d39      	ldrb	r1, [r7, #20]
   2188c:	6938      	ldr	r0, [r7, #16]
   2188e:	f00c fa3c 	bl	2dd0a <gpio_pin_get>
					canintf, ~canintf);
		}

		/* Break from loop if INT pin is inactive */
		ret = gpio_pin_get_dt(&dev_cfg->int_gpio);
		if (ret < 0) {
   21892:	2800      	cmp	r0, #0
   21894:	db36      	blt.n	21904 <mcp2515_handle_interrupts+0x144>
			LOG_ERR("Couldn't read INT pin");
		} else if (ret == 0) {
   21896:	2800      	cmp	r0, #0
   21898:	d065      	beq.n	21966 <mcp2515_handle_interrupts+0x1a6>
		ret = mcp2515_cmd_read_reg(dev, MCP2515_ADDR_CANINTF,
   2189a:	2301      	movs	r3, #1
   2189c:	f10d 0207 	add.w	r2, sp, #7
   218a0:	212c      	movs	r1, #44	; 0x2c
   218a2:	4620      	mov	r0, r4
   218a4:	f00c faf5 	bl	2de92 <mcp2515_cmd_read_reg>
		if (ret != 0) {
   218a8:	4680      	mov	r8, r0
   218aa:	2800      	cmp	r0, #0
   218ac:	d18e      	bne.n	217cc <mcp2515_handle_interrupts+0xc>
		if (canintf == 0) {
   218ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
   218b2:	2b00      	cmp	r3, #0
   218b4:	d057      	beq.n	21966 <mcp2515_handle_interrupts+0x1a6>
		if (canintf & MCP2515_CANINTF_RX0IF) {
   218b6:	f013 0f01 	tst.w	r3, #1
   218ba:	d1ba      	bne.n	21832 <mcp2515_handle_interrupts+0x72>
		if (canintf & MCP2515_CANINTF_RX1IF) {
   218bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
   218c0:	f013 0f02 	tst.w	r3, #2
   218c4:	d1c0      	bne.n	21848 <mcp2515_handle_interrupts+0x88>
		if (canintf & MCP2515_CANINTF_TX0IF) {
   218c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   218ca:	f013 0f04 	tst.w	r3, #4
   218ce:	d1c6      	bne.n	2185e <mcp2515_handle_interrupts+0x9e>
		if (canintf & MCP2515_CANINTF_TX1IF) {
   218d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   218d4:	f013 0f08 	tst.w	r3, #8
   218d8:	d1c7      	bne.n	2186a <mcp2515_handle_interrupts+0xaa>
		if (canintf & MCP2515_CANINTF_TX2IF) {
   218da:	f89d 3007 	ldrb.w	r3, [sp, #7]
   218de:	f013 0f10 	tst.w	r3, #16
   218e2:	d1c8      	bne.n	21876 <mcp2515_handle_interrupts+0xb6>
		if (canintf & MCP2515_CANINTF_ERRIF) {
   218e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   218e8:	f013 0f20 	tst.w	r3, #32
   218ec:	d1c9      	bne.n	21882 <mcp2515_handle_interrupts+0xc2>
		if (canintf != 0) {
   218ee:	f89d 2007 	ldrb.w	r2, [sp, #7]
   218f2:	2a00      	cmp	r2, #0
   218f4:	d0c9      	beq.n	2188a <mcp2515_handle_interrupts+0xca>
			mcp2515_cmd_bit_modify(dev, MCP2515_ADDR_CANINTF,
   218f6:	43d3      	mvns	r3, r2
   218f8:	b2db      	uxtb	r3, r3
   218fa:	212c      	movs	r1, #44	; 0x2c
   218fc:	4620      	mov	r0, r4
   218fe:	f00c fa6d 	bl	2dddc <mcp2515_cmd_bit_modify>
   21902:	e7c2      	b.n	2188a <mcp2515_handle_interrupts+0xca>
			LOG_ERR("Couldn't read INT pin");
   21904:	2006      	movs	r0, #6
   21906:	f7f2 f9ff 	bl	13d08 <z_log_msg_alloc>
   2190a:	f36f 0600 	bfc	r6, #0, #1
   2190e:	f36f 0641 	bfc	r6, #1, #1
   21912:	f36f 0682 	bfc	r6, #2, #1
   21916:	f36f 06c5 	bfc	r6, #3, #3
   2191a:	2301      	movs	r3, #1
   2191c:	f363 1688 	bfi	r6, r3, #6, #3
   21920:	2308      	movs	r3, #8
   21922:	f363 2652 	bfi	r6, r3, #9, #10
   21926:	f36f 46de 	bfc	r6, #19, #12
   2192a:	f36f 76df 	bfc	r6, #31, #1
   2192e:	4684      	mov	ip, r0
   21930:	b190      	cbz	r0, 21958 <mcp2515_handle_interrupts+0x198>
   21932:	f110 0310 	adds.w	r3, r0, #16
   21936:	d001      	beq.n	2193c <mcp2515_handle_interrupts+0x17c>
   21938:	4a0e      	ldr	r2, [pc, #56]	; (21974 <mcp2515_handle_interrupts+0x1b4>)
   2193a:	6142      	str	r2, [r0, #20]
   2193c:	b163      	cbz	r3, 21958 <mcp2515_handle_interrupts+0x198>
   2193e:	2302      	movs	r3, #2
   21940:	f88d 3000 	strb.w	r3, [sp]
   21944:	2300      	movs	r3, #0
   21946:	f88d 3001 	strb.w	r3, [sp, #1]
   2194a:	f88d 3002 	strb.w	r3, [sp, #2]
   2194e:	f88d 3003 	strb.w	r3, [sp, #3]
   21952:	9800      	ldr	r0, [sp, #0]
   21954:	f8cc 0010 	str.w	r0, [ip, #16]
   21958:	2300      	movs	r3, #0
   2195a:	4632      	mov	r2, r6
   2195c:	4904      	ldr	r1, [pc, #16]	; (21970 <mcp2515_handle_interrupts+0x1b0>)
   2195e:	4660      	mov	r0, ip
   21960:	f007 fc3b 	bl	291da <z_log_msg_finalize>
   21964:	e799      	b.n	2189a <mcp2515_handle_interrupts+0xda>
			/* All interrupt flags handled */
			break;
		}
	}
}
   21966:	b002      	add	sp, #8
   21968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2196c:	000342dc 	.word	0x000342dc
   21970:	00031470 	.word	0x00031470
   21974:	000342fc 	.word	0x000342fc

00021978 <mcp2515_init>:
	}
};


static int mcp2515_init(const struct device *dev)
{
   21978:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2197c:	b08f      	sub	sp, #60	; 0x3c
   2197e:	af08      	add	r7, sp, #32
   21980:	4606      	mov	r6, r0
	const struct mcp2515_config *dev_cfg = dev->config;
   21982:	6844      	ldr	r4, [r0, #4]
	struct mcp2515_data *dev_data = dev->data;
   21984:	6905      	ldr	r5, [r0, #16]
	struct can_timing timing;
	int ret;

	k_sem_init(&dev_data->int_sem, 0, 1);
   21986:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
	return z_impl_k_sem_init(sem, initial_count, limit);
   2198a:	2201      	movs	r2, #1
   2198c:	2100      	movs	r1, #0
   2198e:	f00e fd88 	bl	304a2 <z_impl_k_sem_init>
	k_mutex_init(&dev_data->mutex);
   21992:	f505 70b2 	add.w	r0, r5, #356	; 0x164
	return z_impl_k_mutex_init(mutex);
   21996:	f00e fcc7 	bl	30328 <z_impl_k_mutex_init>
	k_sem_init(&dev_data->tx_sem, MCP2515_TX_CNT, MCP2515_TX_CNT);
   2199a:	f105 00e4 	add.w	r0, r5, #228	; 0xe4
	return z_impl_k_sem_init(sem, initial_count, limit);
   2199e:	2201      	movs	r2, #1
   219a0:	4611      	mov	r1, r2
   219a2:	f00e fd7e 	bl	304a2 <z_impl_k_sem_init>

	if (dev_cfg->phy != NULL) {
   219a6:	6b20      	ldr	r0, [r4, #48]	; 0x30
   219a8:	b118      	cbz	r0, 219b2 <mcp2515_init+0x3a>
   219aa:	f00e fb7c 	bl	300a6 <z_device_is_ready>
		if (!device_is_ready(dev_cfg->phy)) {
   219ae:	2800      	cmp	r0, #0
   219b0:	d07a      	beq.n	21aa8 <mcp2515_init+0x130>
			LOG_ERR("CAN transceiver not ready");
			return -ENODEV;
		}
	}

	if (!spi_is_ready_dt(&dev_cfg->bus)) {
   219b2:	4620      	mov	r0, r4
   219b4:	f00c fc27 	bl	2e206 <spi_is_ready_dt>
   219b8:	2800      	cmp	r0, #0
   219ba:	f000 80a3 	beq.w	21b04 <mcp2515_init+0x18c>
		LOG_ERR("SPI bus %s not ready", dev_cfg->bus.bus->name);
		return -ENODEV;
	}

	/* Reset MCP2515 */
	if (mcp2515_cmd_soft_reset(dev)) {
   219be:	4630      	mov	r0, r6
   219c0:	f00c f9f9 	bl	2ddb6 <mcp2515_cmd_soft_reset>
   219c4:	2800      	cmp	r0, #0
   219c6:	f040 80f4 	bne.w	21bb2 <mcp2515_init+0x23a>
		LOG_ERR("Soft-reset failed");
		return -EIO;
	}

	/* Initialize interrupt handling  */
	if (!device_is_ready(dev_cfg->int_gpio.port)) {
   219ca:	6920      	ldr	r0, [r4, #16]
   219cc:	f00e fb6b 	bl	300a6 <z_device_is_ready>
   219d0:	2800      	cmp	r0, #0
   219d2:	f000 811c 	beq.w	21c0e <mcp2515_init+0x296>
		LOG_ERR("Interrupt GPIO port not ready");
		return -ENODEV;
	}

	if (gpio_pin_configure_dt(&dev_cfg->int_gpio, GPIO_INPUT)) {
   219d6:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   219da:	f104 0010 	add.w	r0, r4, #16
   219de:	f00c f97d 	bl	2dcdc <gpio_pin_configure_dt>
   219e2:	2800      	cmp	r0, #0
   219e4:	f040 8141 	bne.w	21c6a <mcp2515_init+0x2f2>
		LOG_ERR("Unable to configure interrupt GPIO");
		return -EINVAL;
	}

	gpio_init_callback(&(dev_data->int_gpio_cb), mcp2515_int_gpio_callback,
			   BIT(dev_cfg->int_gpio.pin));
   219e8:	7d22      	ldrb	r2, [r4, #20]
   219ea:	2301      	movs	r3, #1
   219ec:	4093      	lsls	r3, r2
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   219ee:	4ab6      	ldr	r2, [pc, #728]	; (21cc8 <mcp2515_init+0x350>)
   219f0:	606a      	str	r2, [r5, #4]
	callback->pin_mask = pin_mask;
   219f2:	60ab      	str	r3, [r5, #8]

	if (gpio_add_callback(dev_cfg->int_gpio.port,
   219f4:	4629      	mov	r1, r5
   219f6:	6920      	ldr	r0, [r4, #16]
   219f8:	f00c f997 	bl	2dd2a <gpio_add_callback>
   219fc:	2800      	cmp	r0, #0
   219fe:	f040 81e1 	bne.w	21dc4 <mcp2515_init+0x44c>
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
   21a02:	6920      	ldr	r0, [r4, #16]
   21a04:	7d21      	ldrb	r1, [r4, #20]
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_INTERRUPT_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
   21a06:	f04f 62b8 	mov.w	r2, #96468992	; 0x5c00000
   21a0a:	f00c f92b 	bl	2dc64 <z_impl_gpio_pin_interrupt_configure>
			      &(dev_data->int_gpio_cb))) {
		return -EINVAL;
	}

	if (gpio_pin_interrupt_configure_dt(&dev_cfg->int_gpio,
   21a0e:	2800      	cmp	r0, #0
   21a10:	f040 81db 	bne.w	21dca <mcp2515_init+0x452>
					    GPIO_INT_EDGE_TO_ACTIVE)) {
		return -EINVAL;
	}

	k_thread_create(&dev_data->int_thread, dev_data->int_thread_stack,
   21a14:	f105 0010 	add.w	r0, r5, #16
   21a18:	f8d5 10c8 	ldr.w	r1, [r5, #200]	; 0xc8
			dev_cfg->int_thread_stack_size,
   21a1c:	69a2      	ldr	r2, [r4, #24]
			(k_thread_entry_t) mcp2515_int_thread, (void *)dev,
			NULL, NULL, K_PRIO_COOP(dev_cfg->int_thread_priority),
   21a1e:	69e3      	ldr	r3, [r4, #28]
	k_thread_create(&dev_data->int_thread, dev_data->int_thread_stack,
   21a20:	3b10      	subs	r3, #16
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   21a22:	f04f 0800 	mov.w	r8, #0
   21a26:	f04f 0900 	mov.w	r9, #0
   21a2a:	e9cd 8906 	strd	r8, r9, [sp, #24]
   21a2e:	f8cd 8010 	str.w	r8, [sp, #16]
   21a32:	9303      	str	r3, [sp, #12]
   21a34:	f8cd 8008 	str.w	r8, [sp, #8]
   21a38:	f8cd 8004 	str.w	r8, [sp, #4]
   21a3c:	9600      	str	r6, [sp, #0]
   21a3e:	4ba3      	ldr	r3, [pc, #652]	; (21ccc <mcp2515_init+0x354>)
   21a40:	f00e fc34 	bl	302ac <z_impl_k_thread_create>
			0, K_NO_WAIT);

	(void)memset(dev_data->rx_cb, 0, sizeof(dev_data->rx_cb));
   21a44:	2214      	movs	r2, #20
   21a46:	4641      	mov	r1, r8
   21a48:	f505 7086 	add.w	r0, r5, #268	; 0x10c
   21a4c:	f008 f8e0 	bl	29c10 <memset>
	(void)memset(dev_data->filter, 0, sizeof(dev_data->filter));
   21a50:	2228      	movs	r2, #40	; 0x28
   21a52:	4641      	mov	r1, r8
   21a54:	f505 709a 	add.w	r0, r5, #308	; 0x134
   21a58:	f008 f8da 	bl	29c10 <memset>
	dev_data->old_state = CAN_STATE_ERROR_ACTIVE;
   21a5c:	f885 8178 	strb.w	r8, [r5, #376]	; 0x178

	timing.sjw = dev_cfg->tq_sjw;
   21a60:	f894 3020 	ldrb.w	r3, [r4, #32]
   21a64:	81bb      	strh	r3, [r7, #12]
	if (dev_cfg->sample_point && USE_SP_ALGO) {
   21a66:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   21a68:	2b00      	cmp	r3, #0
   21a6a:	f000 816b 	beq.w	21d44 <mcp2515_init+0x3cc>
		ret = can_calc_timing(dev, &timing, dev_cfg->bus_speed,
   21a6e:	6a62      	ldr	r2, [r4, #36]	; 0x24
		union { uintptr_t x; uint16_t val; } parm3 = { .val = sample_pnt };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_CAN_CALC_TIMING);
	}
#endif
	compiler_barrier();
	return z_impl_can_calc_timing(dev, res, bitrate, sample_pnt);
   21a70:	f107 010c 	add.w	r1, r7, #12
   21a74:	4630      	mov	r0, r6
   21a76:	f7ff fb1d 	bl	210b4 <z_impl_can_calc_timing>
				      dev_cfg->sample_point);
		if (ret == -EINVAL) {
   21a7a:	f110 0f16 	cmn.w	r0, #22
   21a7e:	f000 8133 	beq.w	21ce8 <mcp2515_init+0x370>
	return z_impl_k_usleep(us);
   21a82:	2080      	movs	r0, #128	; 0x80
   21a84:	f005 fb1c 	bl	270c0 <z_impl_k_usleep>
			     const struct can_timing *timing);

static inline int z_impl_can_set_timing(const struct device *dev,
					const struct can_timing *timing)
{
	const struct can_driver_api *api = (const struct can_driver_api *)dev->api;
   21a88:	68b3      	ldr	r3, [r6, #8]

	return api->set_timing(dev, timing);
   21a8a:	691b      	ldr	r3, [r3, #16]
   21a8c:	f107 010c 	add.w	r1, r7, #12
   21a90:	4630      	mov	r0, r6
   21a92:	4798      	blx	r3
	}

	k_usleep(MCP2515_OSC_STARTUP_US);

	ret = can_set_timing(dev, &timing);
	if (ret) {
   21a94:	b920      	cbnz	r0, 21aa0 <mcp2515_init+0x128>
 */
__syscall int can_set_mode(const struct device *dev, can_mode_t mode);

static inline int z_impl_can_set_mode(const struct device *dev, can_mode_t mode)
{
	const struct can_driver_api *api = (const struct can_driver_api *)dev->api;
   21a96:	68b3      	ldr	r3, [r6, #8]

	return api->set_mode(dev, mode);
   21a98:	68db      	ldr	r3, [r3, #12]
   21a9a:	2100      	movs	r1, #0
   21a9c:	4630      	mov	r0, r6
   21a9e:	4798      	blx	r3
	}

	ret = can_set_mode(dev, CAN_MODE_NORMAL);

	return ret;
}
   21aa0:	371c      	adds	r7, #28
   21aa2:	46bd      	mov	sp, r7
   21aa4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			LOG_ERR("CAN transceiver not ready");
   21aa8:	2006      	movs	r0, #6
   21aaa:	f7f2 f92d 	bl	13d08 <z_log_msg_alloc>
   21aae:	2200      	movs	r2, #0
   21ab0:	f36f 0200 	bfc	r2, #0, #1
   21ab4:	f36f 0241 	bfc	r2, #1, #1
   21ab8:	f36f 0282 	bfc	r2, #2, #1
   21abc:	f36f 02c5 	bfc	r2, #3, #3
   21ac0:	2301      	movs	r3, #1
   21ac2:	f363 1288 	bfi	r2, r3, #6, #3
   21ac6:	2308      	movs	r3, #8
   21ac8:	f363 2252 	bfi	r2, r3, #9, #10
   21acc:	f36f 42de 	bfc	r2, #19, #12
   21ad0:	f36f 72df 	bfc	r2, #31, #1
   21ad4:	4604      	mov	r4, r0
   21ad6:	b168      	cbz	r0, 21af4 <mcp2515_init+0x17c>
   21ad8:	f110 0310 	adds.w	r3, r0, #16
   21adc:	d001      	beq.n	21ae2 <mcp2515_init+0x16a>
   21ade:	497c      	ldr	r1, [pc, #496]	; (21cd0 <mcp2515_init+0x358>)
   21ae0:	6141      	str	r1, [r0, #20]
   21ae2:	b13b      	cbz	r3, 21af4 <mcp2515_init+0x17c>
   21ae4:	2302      	movs	r3, #2
   21ae6:	723b      	strb	r3, [r7, #8]
   21ae8:	2300      	movs	r3, #0
   21aea:	727b      	strb	r3, [r7, #9]
   21aec:	72bb      	strb	r3, [r7, #10]
   21aee:	72fb      	strb	r3, [r7, #11]
   21af0:	68b8      	ldr	r0, [r7, #8]
   21af2:	6120      	str	r0, [r4, #16]
   21af4:	2300      	movs	r3, #0
   21af6:	4977      	ldr	r1, [pc, #476]	; (21cd4 <mcp2515_init+0x35c>)
   21af8:	4620      	mov	r0, r4
   21afa:	f007 fb6e 	bl	291da <z_log_msg_finalize>
			return -ENODEV;
   21afe:	f06f 0012 	mvn.w	r0, #18
   21b02:	e7cd      	b.n	21aa0 <mcp2515_init+0x128>
		LOG_ERR("SPI bus %s not ready", dev_cfg->bus.bus->name);
   21b04:	6823      	ldr	r3, [r4, #0]
   21b06:	6819      	ldr	r1, [r3, #0]
   21b08:	466d      	mov	r5, sp
   21b0a:	2300      	movs	r3, #0
   21b0c:	723b      	strb	r3, [r7, #8]
   21b0e:	2302      	movs	r3, #2
   21b10:	727b      	strb	r3, [r7, #9]
   21b12:	b088      	sub	sp, #32
   21b14:	462c      	mov	r4, r5
   21b16:	f115 0210 	adds.w	r2, r5, #16
   21b1a:	d011      	beq.n	21b40 <mcp2515_init+0x1c8>
   21b1c:	200e      	movs	r0, #14
   21b1e:	b11a      	cbz	r2, 21b28 <mcp2515_init+0x1b0>
   21b20:	2804      	cmp	r0, #4
   21b22:	dd01      	ble.n	21b28 <mcp2515_init+0x1b0>
   21b24:	4b6c      	ldr	r3, [pc, #432]	; (21cd8 <mcp2515_init+0x360>)
   21b26:	6163      	str	r3, [r4, #20]
   21b28:	2300      	movs	r3, #0
   21b2a:	713b      	strb	r3, [r7, #4]
   21b2c:	2302      	movs	r3, #2
   21b2e:	717b      	strb	r3, [r7, #5]
   21b30:	b19a      	cbz	r2, 21b5a <mcp2515_init+0x1e2>
   21b32:	2808      	cmp	r0, #8
   21b34:	dd00      	ble.n	21b38 <mcp2515_init+0x1c0>
   21b36:	61a1      	str	r1, [r4, #24]
   21b38:	f104 031c 	add.w	r3, r4, #28
   21b3c:	2100      	movs	r1, #0
   21b3e:	e00a      	b.n	21b56 <mcp2515_init+0x1de>
   21b40:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   21b44:	e7eb      	b.n	21b1e <mcp2515_init+0x1a6>
   21b46:	f101 0618 	add.w	r6, r1, #24
   21b4a:	443e      	add	r6, r7
   21b4c:	f816 6c14 	ldrb.w	r6, [r6, #-20]
   21b50:	f803 6b01 	strb.w	r6, [r3], #1
   21b54:	3101      	adds	r1, #1
   21b56:	2901      	cmp	r1, #1
   21b58:	d9f5      	bls.n	21b46 <mcp2515_init+0x1ce>
   21b5a:	280d      	cmp	r0, #13
   21b5c:	dd26      	ble.n	21bac <mcp2515_init+0x234>
   21b5e:	230e      	movs	r3, #14
   21b60:	b142      	cbz	r2, 21b74 <mcp2515_init+0x1fc>
   21b62:	2103      	movs	r1, #3
   21b64:	7239      	strb	r1, [r7, #8]
   21b66:	2100      	movs	r1, #0
   21b68:	7279      	strb	r1, [r7, #9]
   21b6a:	72b9      	strb	r1, [r7, #10]
   21b6c:	2101      	movs	r1, #1
   21b6e:	72f9      	strb	r1, [r7, #11]
   21b70:	68b8      	ldr	r0, [r7, #8]
   21b72:	6120      	str	r0, [r4, #16]
   21b74:	2100      	movs	r1, #0
   21b76:	f36f 0100 	bfc	r1, #0, #1
   21b7a:	f36f 0141 	bfc	r1, #1, #1
   21b7e:	f36f 0182 	bfc	r1, #2, #1
   21b82:	f36f 01c5 	bfc	r1, #3, #3
   21b86:	2001      	movs	r0, #1
   21b88:	f360 1188 	bfi	r1, r0, #6, #3
   21b8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
   21b90:	f363 2152 	bfi	r1, r3, #9, #10
   21b94:	f36f 41de 	bfc	r1, #19, #12
   21b98:	f36f 71df 	bfc	r1, #31, #1
   21b9c:	2300      	movs	r3, #0
   21b9e:	484d      	ldr	r0, [pc, #308]	; (21cd4 <mcp2515_init+0x35c>)
   21ba0:	f007 fb33 	bl	2920a <z_impl_z_log_msg_static_create>
   21ba4:	46ad      	mov	sp, r5
		return -ENODEV;
   21ba6:	f06f 0012 	mvn.w	r0, #18
   21baa:	e779      	b.n	21aa0 <mcp2515_init+0x128>
		LOG_ERR("SPI bus %s not ready", dev_cfg->bus.bus->name);
   21bac:	f06f 031b 	mvn.w	r3, #27
   21bb0:	e7d6      	b.n	21b60 <mcp2515_init+0x1e8>
		LOG_ERR("Soft-reset failed");
   21bb2:	2006      	movs	r0, #6
   21bb4:	f7f2 f8a8 	bl	13d08 <z_log_msg_alloc>
   21bb8:	2200      	movs	r2, #0
   21bba:	f36f 0200 	bfc	r2, #0, #1
   21bbe:	f36f 0241 	bfc	r2, #1, #1
   21bc2:	f36f 0282 	bfc	r2, #2, #1
   21bc6:	f36f 02c5 	bfc	r2, #3, #3
   21bca:	2301      	movs	r3, #1
   21bcc:	f363 1288 	bfi	r2, r3, #6, #3
   21bd0:	2308      	movs	r3, #8
   21bd2:	f363 2252 	bfi	r2, r3, #9, #10
   21bd6:	f36f 42de 	bfc	r2, #19, #12
   21bda:	f36f 72df 	bfc	r2, #31, #1
   21bde:	4604      	mov	r4, r0
   21be0:	b168      	cbz	r0, 21bfe <mcp2515_init+0x286>
   21be2:	f110 0310 	adds.w	r3, r0, #16
   21be6:	d001      	beq.n	21bec <mcp2515_init+0x274>
   21be8:	493c      	ldr	r1, [pc, #240]	; (21cdc <mcp2515_init+0x364>)
   21bea:	6141      	str	r1, [r0, #20]
   21bec:	b13b      	cbz	r3, 21bfe <mcp2515_init+0x286>
   21bee:	2302      	movs	r3, #2
   21bf0:	723b      	strb	r3, [r7, #8]
   21bf2:	2300      	movs	r3, #0
   21bf4:	727b      	strb	r3, [r7, #9]
   21bf6:	72bb      	strb	r3, [r7, #10]
   21bf8:	72fb      	strb	r3, [r7, #11]
   21bfa:	68b8      	ldr	r0, [r7, #8]
   21bfc:	6120      	str	r0, [r4, #16]
   21bfe:	2300      	movs	r3, #0
   21c00:	4934      	ldr	r1, [pc, #208]	; (21cd4 <mcp2515_init+0x35c>)
   21c02:	4620      	mov	r0, r4
   21c04:	f007 fae9 	bl	291da <z_log_msg_finalize>
		return -EIO;
   21c08:	f06f 0004 	mvn.w	r0, #4
   21c0c:	e748      	b.n	21aa0 <mcp2515_init+0x128>
		LOG_ERR("Interrupt GPIO port not ready");
   21c0e:	2006      	movs	r0, #6
   21c10:	f7f2 f87a 	bl	13d08 <z_log_msg_alloc>
   21c14:	2200      	movs	r2, #0
   21c16:	f36f 0200 	bfc	r2, #0, #1
   21c1a:	f36f 0241 	bfc	r2, #1, #1
   21c1e:	f36f 0282 	bfc	r2, #2, #1
   21c22:	f36f 02c5 	bfc	r2, #3, #3
   21c26:	2301      	movs	r3, #1
   21c28:	f363 1288 	bfi	r2, r3, #6, #3
   21c2c:	2308      	movs	r3, #8
   21c2e:	f363 2252 	bfi	r2, r3, #9, #10
   21c32:	f36f 42de 	bfc	r2, #19, #12
   21c36:	f36f 72df 	bfc	r2, #31, #1
   21c3a:	4604      	mov	r4, r0
   21c3c:	b168      	cbz	r0, 21c5a <mcp2515_init+0x2e2>
   21c3e:	f110 0310 	adds.w	r3, r0, #16
   21c42:	d001      	beq.n	21c48 <mcp2515_init+0x2d0>
   21c44:	4926      	ldr	r1, [pc, #152]	; (21ce0 <mcp2515_init+0x368>)
   21c46:	6141      	str	r1, [r0, #20]
   21c48:	b13b      	cbz	r3, 21c5a <mcp2515_init+0x2e2>
   21c4a:	2302      	movs	r3, #2
   21c4c:	723b      	strb	r3, [r7, #8]
   21c4e:	2300      	movs	r3, #0
   21c50:	727b      	strb	r3, [r7, #9]
   21c52:	72bb      	strb	r3, [r7, #10]
   21c54:	72fb      	strb	r3, [r7, #11]
   21c56:	68b8      	ldr	r0, [r7, #8]
   21c58:	6120      	str	r0, [r4, #16]
   21c5a:	2300      	movs	r3, #0
   21c5c:	491d      	ldr	r1, [pc, #116]	; (21cd4 <mcp2515_init+0x35c>)
   21c5e:	4620      	mov	r0, r4
   21c60:	f007 fabb 	bl	291da <z_log_msg_finalize>
		return -ENODEV;
   21c64:	f06f 0012 	mvn.w	r0, #18
   21c68:	e71a      	b.n	21aa0 <mcp2515_init+0x128>
		LOG_ERR("Unable to configure interrupt GPIO");
   21c6a:	2006      	movs	r0, #6
   21c6c:	f7f2 f84c 	bl	13d08 <z_log_msg_alloc>
   21c70:	2200      	movs	r2, #0
   21c72:	f36f 0200 	bfc	r2, #0, #1
   21c76:	f36f 0241 	bfc	r2, #1, #1
   21c7a:	f36f 0282 	bfc	r2, #2, #1
   21c7e:	f36f 02c5 	bfc	r2, #3, #3
   21c82:	2301      	movs	r3, #1
   21c84:	f363 1288 	bfi	r2, r3, #6, #3
   21c88:	2308      	movs	r3, #8
   21c8a:	f363 2252 	bfi	r2, r3, #9, #10
   21c8e:	f36f 42de 	bfc	r2, #19, #12
   21c92:	f36f 72df 	bfc	r2, #31, #1
   21c96:	4604      	mov	r4, r0
   21c98:	b168      	cbz	r0, 21cb6 <mcp2515_init+0x33e>
   21c9a:	f110 0310 	adds.w	r3, r0, #16
   21c9e:	d001      	beq.n	21ca4 <mcp2515_init+0x32c>
   21ca0:	4910      	ldr	r1, [pc, #64]	; (21ce4 <mcp2515_init+0x36c>)
   21ca2:	6141      	str	r1, [r0, #20]
   21ca4:	b13b      	cbz	r3, 21cb6 <mcp2515_init+0x33e>
   21ca6:	2302      	movs	r3, #2
   21ca8:	723b      	strb	r3, [r7, #8]
   21caa:	2300      	movs	r3, #0
   21cac:	727b      	strb	r3, [r7, #9]
   21cae:	72bb      	strb	r3, [r7, #10]
   21cb0:	72fb      	strb	r3, [r7, #11]
   21cb2:	68b8      	ldr	r0, [r7, #8]
   21cb4:	6120      	str	r0, [r4, #16]
   21cb6:	2300      	movs	r3, #0
   21cb8:	4906      	ldr	r1, [pc, #24]	; (21cd4 <mcp2515_init+0x35c>)
   21cba:	4620      	mov	r0, r4
   21cbc:	f007 fa8d 	bl	291da <z_log_msg_finalize>
		return -EINVAL;
   21cc0:	f06f 0015 	mvn.w	r0, #21
   21cc4:	e6ec      	b.n	21aa0 <mcp2515_init+0x128>
   21cc6:	bf00      	nop
   21cc8:	0002e12f 	.word	0x0002e12f
   21ccc:	0002e1e9 	.word	0x0002e1e9
   21cd0:	00034314 	.word	0x00034314
   21cd4:	00031470 	.word	0x00031470
   21cd8:	00034330 	.word	0x00034330
   21cdc:	00034348 	.word	0x00034348
   21ce0:	0003435c 	.word	0x0003435c
   21ce4:	0003437c 	.word	0x0003437c
			LOG_ERR("Can't find timing for given param");
   21ce8:	2006      	movs	r0, #6
   21cea:	f7f2 f80d 	bl	13d08 <z_log_msg_alloc>
   21cee:	4642      	mov	r2, r8
   21cf0:	f36f 0200 	bfc	r2, #0, #1
   21cf4:	f36f 0241 	bfc	r2, #1, #1
   21cf8:	f36f 0282 	bfc	r2, #2, #1
   21cfc:	f36f 02c5 	bfc	r2, #3, #3
   21d00:	2301      	movs	r3, #1
   21d02:	f363 1288 	bfi	r2, r3, #6, #3
   21d06:	2308      	movs	r3, #8
   21d08:	f363 2252 	bfi	r2, r3, #9, #10
   21d0c:	f36f 42de 	bfc	r2, #19, #12
   21d10:	f36f 72df 	bfc	r2, #31, #1
   21d14:	4604      	mov	r4, r0
   21d16:	b168      	cbz	r0, 21d34 <mcp2515_init+0x3bc>
   21d18:	f110 0310 	adds.w	r3, r0, #16
   21d1c:	d001      	beq.n	21d22 <mcp2515_init+0x3aa>
   21d1e:	492c      	ldr	r1, [pc, #176]	; (21dd0 <mcp2515_init+0x458>)
   21d20:	6141      	str	r1, [r0, #20]
   21d22:	b13b      	cbz	r3, 21d34 <mcp2515_init+0x3bc>
   21d24:	2302      	movs	r3, #2
   21d26:	723b      	strb	r3, [r7, #8]
   21d28:	2300      	movs	r3, #0
   21d2a:	727b      	strb	r3, [r7, #9]
   21d2c:	72bb      	strb	r3, [r7, #10]
   21d2e:	72fb      	strb	r3, [r7, #11]
   21d30:	68b8      	ldr	r0, [r7, #8]
   21d32:	6120      	str	r0, [r4, #16]
   21d34:	2300      	movs	r3, #0
   21d36:	4927      	ldr	r1, [pc, #156]	; (21dd4 <mcp2515_init+0x45c>)
   21d38:	4620      	mov	r0, r4
   21d3a:	f007 fa4e 	bl	291da <z_log_msg_finalize>
			return -EIO;
   21d3e:	f06f 0004 	mvn.w	r0, #4
   21d42:	e6ad      	b.n	21aa0 <mcp2515_init+0x128>
		timing.prop_seg = dev_cfg->tq_prop;
   21d44:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   21d48:	81fb      	strh	r3, [r7, #14]
		timing.phase_seg1 = dev_cfg->tq_bs1;
   21d4a:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   21d4e:	823b      	strh	r3, [r7, #16]
		timing.phase_seg2 = dev_cfg->tq_bs2;
   21d50:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   21d54:	827b      	strh	r3, [r7, #18]
		ret = can_calc_prescaler(dev, &timing, dev_cfg->bus_speed);
   21d56:	6a62      	ldr	r2, [r4, #36]	; 0x24
   21d58:	f107 010c 	add.w	r1, r7, #12
   21d5c:	4630      	mov	r0, r6
   21d5e:	f00b ff63 	bl	2dc28 <can_calc_prescaler>
		if (ret) {
   21d62:	4605      	mov	r5, r0
   21d64:	2800      	cmp	r0, #0
   21d66:	f43f ae8c 	beq.w	21a82 <mcp2515_init+0x10a>
			LOG_WRN("Bitrate error: %d", ret);
   21d6a:	2008      	movs	r0, #8
   21d6c:	f7f1 ffcc 	bl	13d08 <z_log_msg_alloc>
   21d70:	2200      	movs	r2, #0
   21d72:	f36f 0200 	bfc	r2, #0, #1
   21d76:	f36f 0241 	bfc	r2, #1, #1
   21d7a:	f36f 0282 	bfc	r2, #2, #1
   21d7e:	f36f 02c5 	bfc	r2, #3, #3
   21d82:	2302      	movs	r3, #2
   21d84:	f363 1288 	bfi	r2, r3, #6, #3
   21d88:	230c      	movs	r3, #12
   21d8a:	f363 2252 	bfi	r2, r3, #9, #10
   21d8e:	f36f 42de 	bfc	r2, #19, #12
   21d92:	f36f 72df 	bfc	r2, #31, #1
   21d96:	4604      	mov	r4, r0
   21d98:	b170      	cbz	r0, 21db8 <mcp2515_init+0x440>
   21d9a:	f110 0310 	adds.w	r3, r0, #16
   21d9e:	d002      	beq.n	21da6 <mcp2515_init+0x42e>
   21da0:	490d      	ldr	r1, [pc, #52]	; (21dd8 <mcp2515_init+0x460>)
   21da2:	6141      	str	r1, [r0, #20]
   21da4:	6185      	str	r5, [r0, #24]
   21da6:	b13b      	cbz	r3, 21db8 <mcp2515_init+0x440>
   21da8:	2303      	movs	r3, #3
   21daa:	723b      	strb	r3, [r7, #8]
   21dac:	2300      	movs	r3, #0
   21dae:	727b      	strb	r3, [r7, #9]
   21db0:	72bb      	strb	r3, [r7, #10]
   21db2:	72fb      	strb	r3, [r7, #11]
   21db4:	68b8      	ldr	r0, [r7, #8]
   21db6:	6120      	str	r0, [r4, #16]
   21db8:	2300      	movs	r3, #0
   21dba:	4906      	ldr	r1, [pc, #24]	; (21dd4 <mcp2515_init+0x45c>)
   21dbc:	4620      	mov	r0, r4
   21dbe:	f007 fa0c 	bl	291da <z_log_msg_finalize>
   21dc2:	e65e      	b.n	21a82 <mcp2515_init+0x10a>
		return -EINVAL;
   21dc4:	f06f 0015 	mvn.w	r0, #21
   21dc8:	e66a      	b.n	21aa0 <mcp2515_init+0x128>
		return -EINVAL;
   21dca:	f06f 0015 	mvn.w	r0, #21
   21dce:	e667      	b.n	21aa0 <mcp2515_init+0x128>
   21dd0:	000343a0 	.word	0x000343a0
   21dd4:	00031470 	.word	0x00031470
   21dd8:	000343c4 	.word	0x000343c4

00021ddc <mcp2515_set_mode_int>:
{
   21ddc:	b570      	push	{r4, r5, r6, lr}
   21dde:	b082      	sub	sp, #8
   21de0:	4606      	mov	r6, r0
   21de2:	460d      	mov	r5, r1
	mcp2515_cmd_bit_modify(dev, MCP2515_ADDR_CANCTRL,
   21de4:	014b      	lsls	r3, r1, #5
   21de6:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
   21dea:	22e0      	movs	r2, #224	; 0xe0
   21dec:	210f      	movs	r1, #15
   21dee:	f00b fff5 	bl	2dddc <mcp2515_cmd_bit_modify>
	mcp2515_cmd_read_reg(dev, MCP2515_ADDR_CANSTAT, &canstat, 1);
   21df2:	2301      	movs	r3, #1
   21df4:	f10d 0207 	add.w	r2, sp, #7
   21df8:	210e      	movs	r1, #14
   21dfa:	4630      	mov	r0, r6
   21dfc:	f00c f849 	bl	2de92 <mcp2515_cmd_read_reg>
	int retries = MCP2515_MODE_CHANGE_RETRIES;
   21e00:	2464      	movs	r4, #100	; 0x64
	while (((canstat & MCP2515_CANSTAT_MODE_MASK) >> MCP2515_CANSTAT_MODE_POS)
   21e02:	f89d 3007 	ldrb.w	r3, [sp, #7]
		!= mcp2515_mode) {
   21e06:	ebb5 1f53 	cmp.w	r5, r3, lsr #5
   21e0a:	d03f      	beq.n	21e8c <mcp2515_set_mode_int+0xb0>
		if (--retries < 0) {
   21e0c:	3c01      	subs	r4, #1
   21e0e:	d40b      	bmi.n	21e28 <mcp2515_set_mode_int+0x4c>
	return z_impl_k_sleep(timeout);
   21e10:	2001      	movs	r0, #1
   21e12:	2100      	movs	r1, #0
   21e14:	f005 f92a 	bl	2706c <z_impl_k_sleep>
		mcp2515_cmd_read_reg(dev, MCP2515_ADDR_CANSTAT, &canstat, 1);
   21e18:	2301      	movs	r3, #1
   21e1a:	f10d 0207 	add.w	r2, sp, #7
   21e1e:	210e      	movs	r1, #14
   21e20:	4630      	mov	r0, r6
   21e22:	f00c f836 	bl	2de92 <mcp2515_cmd_read_reg>
   21e26:	e7ec      	b.n	21e02 <mcp2515_set_mode_int+0x26>
			LOG_ERR("Timeout trying to set MCP2515 operation mode");
   21e28:	2006      	movs	r0, #6
   21e2a:	f7f1 ff6d 	bl	13d08 <z_log_msg_alloc>
   21e2e:	2200      	movs	r2, #0
   21e30:	f36f 0200 	bfc	r2, #0, #1
   21e34:	f36f 0241 	bfc	r2, #1, #1
   21e38:	f36f 0282 	bfc	r2, #2, #1
   21e3c:	f36f 02c5 	bfc	r2, #3, #3
   21e40:	2301      	movs	r3, #1
   21e42:	f363 1288 	bfi	r2, r3, #6, #3
   21e46:	2308      	movs	r3, #8
   21e48:	f363 2252 	bfi	r2, r3, #9, #10
   21e4c:	f36f 42de 	bfc	r2, #19, #12
   21e50:	f36f 72df 	bfc	r2, #31, #1
   21e54:	4604      	mov	r4, r0
   21e56:	b188      	cbz	r0, 21e7c <mcp2515_set_mode_int+0xa0>
   21e58:	f110 0310 	adds.w	r3, r0, #16
   21e5c:	d001      	beq.n	21e62 <mcp2515_set_mode_int+0x86>
   21e5e:	490d      	ldr	r1, [pc, #52]	; (21e94 <mcp2515_set_mode_int+0xb8>)
   21e60:	6141      	str	r1, [r0, #20]
   21e62:	b15b      	cbz	r3, 21e7c <mcp2515_set_mode_int+0xa0>
   21e64:	2302      	movs	r3, #2
   21e66:	f88d 3000 	strb.w	r3, [sp]
   21e6a:	2300      	movs	r3, #0
   21e6c:	f88d 3001 	strb.w	r3, [sp, #1]
   21e70:	f88d 3002 	strb.w	r3, [sp, #2]
   21e74:	f88d 3003 	strb.w	r3, [sp, #3]
   21e78:	9800      	ldr	r0, [sp, #0]
   21e7a:	6120      	str	r0, [r4, #16]
   21e7c:	2300      	movs	r3, #0
   21e7e:	4906      	ldr	r1, [pc, #24]	; (21e98 <mcp2515_set_mode_int+0xbc>)
   21e80:	4620      	mov	r0, r4
   21e82:	f007 f9aa 	bl	291da <z_log_msg_finalize>
			return -EIO;
   21e86:	f06f 0004 	mvn.w	r0, #4
   21e8a:	e000      	b.n	21e8e <mcp2515_set_mode_int+0xb2>
	return 0;
   21e8c:	2000      	movs	r0, #0
}
   21e8e:	b002      	add	sp, #8
   21e90:	bd70      	pop	{r4, r5, r6, pc}
   21e92:	bf00      	nop
   21e94:	000343d8 	.word	0x000343d8
   21e98:	00031470 	.word	0x00031470

00021e9c <mcp2515_stop>:
{
   21e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21ea0:	b082      	sub	sp, #8
	const struct mcp2515_config *dev_cfg = dev->config;
   21ea2:	f8d0 8004 	ldr.w	r8, [r0, #4]
	struct mcp2515_data *dev_data = dev->data;
   21ea6:	6905      	ldr	r5, [r0, #16]
	if (!dev_data->started) {
   21ea8:	f895 317a 	ldrb.w	r3, [r5, #378]	; 0x17a
   21eac:	2b00      	cmp	r3, #0
   21eae:	f000 8098 	beq.w	21fe2 <mcp2515_stop+0x146>
   21eb2:	4604      	mov	r4, r0
	k_mutex_lock(&dev_data->mutex, K_FOREVER);
   21eb4:	f505 77b2 	add.w	r7, r5, #356	; 0x164
	return z_impl_k_mutex_lock(mutex, timeout);
   21eb8:	f04f 32ff 	mov.w	r2, #4294967295
   21ebc:	f04f 33ff 	mov.w	r3, #4294967295
   21ec0:	4638      	mov	r0, r7
   21ec2:	f004 fa77 	bl	263b4 <z_impl_k_mutex_lock>
	mcp2515_cmd_bit_modify(dev, MCP2515_ADDR_TXB0CTRL,
   21ec6:	2300      	movs	r3, #0
   21ec8:	2208      	movs	r2, #8
   21eca:	2130      	movs	r1, #48	; 0x30
   21ecc:	4620      	mov	r0, r4
   21ece:	f00b ff85 	bl	2dddc <mcp2515_cmd_bit_modify>
	ret = mcp2515_set_mode_int(dev, MCP2515_MODE_CONFIGURATION);
   21ed2:	2104      	movs	r1, #4
   21ed4:	4620      	mov	r0, r4
   21ed6:	f7ff ff81 	bl	21ddc <mcp2515_set_mode_int>
	if (ret < 0) {
   21eda:	1e06      	subs	r6, r0, #0
   21edc:	da36      	bge.n	21f4c <mcp2515_stop+0xb0>
		LOG_ERR("Failed to enter configuration mode [%d]", ret);
   21ede:	2008      	movs	r0, #8
   21ee0:	f7f1 ff12 	bl	13d08 <z_log_msg_alloc>
   21ee4:	2200      	movs	r2, #0
   21ee6:	f36f 0200 	bfc	r2, #0, #1
   21eea:	f36f 0241 	bfc	r2, #1, #1
   21eee:	f36f 0282 	bfc	r2, #2, #1
   21ef2:	f36f 02c5 	bfc	r2, #3, #3
   21ef6:	2301      	movs	r3, #1
   21ef8:	f363 1288 	bfi	r2, r3, #6, #3
   21efc:	230c      	movs	r3, #12
   21efe:	f363 2252 	bfi	r2, r3, #9, #10
   21f02:	f36f 42de 	bfc	r2, #19, #12
   21f06:	f36f 72df 	bfc	r2, #31, #1
   21f0a:	4604      	mov	r4, r0
   21f0c:	b190      	cbz	r0, 21f34 <mcp2515_stop+0x98>
   21f0e:	f110 0310 	adds.w	r3, r0, #16
   21f12:	d002      	beq.n	21f1a <mcp2515_stop+0x7e>
   21f14:	4935      	ldr	r1, [pc, #212]	; (21fec <mcp2515_stop+0x150>)
   21f16:	6141      	str	r1, [r0, #20]
   21f18:	6186      	str	r6, [r0, #24]
   21f1a:	b15b      	cbz	r3, 21f34 <mcp2515_stop+0x98>
   21f1c:	2303      	movs	r3, #3
   21f1e:	f88d 3004 	strb.w	r3, [sp, #4]
   21f22:	2300      	movs	r3, #0
   21f24:	f88d 3005 	strb.w	r3, [sp, #5]
   21f28:	f88d 3006 	strb.w	r3, [sp, #6]
   21f2c:	f88d 3007 	strb.w	r3, [sp, #7]
   21f30:	9801      	ldr	r0, [sp, #4]
   21f32:	6120      	str	r0, [r4, #16]
   21f34:	2300      	movs	r3, #0
   21f36:	492e      	ldr	r1, [pc, #184]	; (21ff0 <mcp2515_stop+0x154>)
   21f38:	4620      	mov	r0, r4
   21f3a:	f007 f94e 	bl	291da <z_log_msg_finalize>
	return z_impl_k_mutex_unlock(mutex);
   21f3e:	4638      	mov	r0, r7
   21f40:	f004 fabc 	bl	264bc <z_impl_k_mutex_unlock>
}
   21f44:	4630      	mov	r0, r6
   21f46:	b002      	add	sp, #8
   21f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	dev_data->started = false;
   21f4c:	2600      	movs	r6, #0
   21f4e:	f885 617a 	strb.w	r6, [r5, #378]	; 0x17a
   21f52:	4638      	mov	r0, r7
   21f54:	f004 fab2 	bl	264bc <z_impl_k_mutex_unlock>
	for (i = 0; i < MCP2515_TX_CNT; i++) {
   21f58:	2e00      	cmp	r6, #0
   21f5a:	dd3a      	ble.n	21fd2 <mcp2515_stop+0x136>
	if (dev_cfg->phy != NULL) {
   21f5c:	f8d8 0030 	ldr.w	r0, [r8, #48]	; 0x30
   21f60:	2800      	cmp	r0, #0
   21f62:	d041      	beq.n	21fe8 <mcp2515_stop+0x14c>
 * @retval 0 If successful.
 * @retval -EIO General input/output error, failed to disable device.
 */
static inline int can_transceiver_disable(const struct device *dev)
{
	const struct can_transceiver_driver_api *api =
   21f64:	6883      	ldr	r3, [r0, #8]
		(const struct can_transceiver_driver_api *)dev->api;

	return api->disable(dev);
   21f66:	685b      	ldr	r3, [r3, #4]
   21f68:	4798      	blx	r3
		if (ret != 0) {
   21f6a:	4606      	mov	r6, r0
   21f6c:	2800      	cmp	r0, #0
   21f6e:	d0e9      	beq.n	21f44 <mcp2515_stop+0xa8>
			LOG_ERR("Failed to disable CAN transceiver [%d]", ret);
   21f70:	2008      	movs	r0, #8
   21f72:	f7f1 fec9 	bl	13d08 <z_log_msg_alloc>
   21f76:	2200      	movs	r2, #0
   21f78:	f36f 0200 	bfc	r2, #0, #1
   21f7c:	f36f 0241 	bfc	r2, #1, #1
   21f80:	f36f 0282 	bfc	r2, #2, #1
   21f84:	f36f 02c5 	bfc	r2, #3, #3
   21f88:	2301      	movs	r3, #1
   21f8a:	f363 1288 	bfi	r2, r3, #6, #3
   21f8e:	230c      	movs	r3, #12
   21f90:	f363 2252 	bfi	r2, r3, #9, #10
   21f94:	f36f 42de 	bfc	r2, #19, #12
   21f98:	f36f 72df 	bfc	r2, #31, #1
   21f9c:	4604      	mov	r4, r0
   21f9e:	b190      	cbz	r0, 21fc6 <mcp2515_stop+0x12a>
   21fa0:	f110 0310 	adds.w	r3, r0, #16
   21fa4:	d002      	beq.n	21fac <mcp2515_stop+0x110>
   21fa6:	4913      	ldr	r1, [pc, #76]	; (21ff4 <mcp2515_stop+0x158>)
   21fa8:	6141      	str	r1, [r0, #20]
   21faa:	6186      	str	r6, [r0, #24]
   21fac:	b15b      	cbz	r3, 21fc6 <mcp2515_stop+0x12a>
   21fae:	2303      	movs	r3, #3
   21fb0:	f88d 3004 	strb.w	r3, [sp, #4]
   21fb4:	2300      	movs	r3, #0
   21fb6:	f88d 3005 	strb.w	r3, [sp, #5]
   21fba:	f88d 3006 	strb.w	r3, [sp, #6]
   21fbe:	f88d 3007 	strb.w	r3, [sp, #7]
   21fc2:	9801      	ldr	r0, [sp, #4]
   21fc4:	6120      	str	r0, [r4, #16]
   21fc6:	2300      	movs	r3, #0
   21fc8:	4909      	ldr	r1, [pc, #36]	; (21ff0 <mcp2515_stop+0x154>)
   21fca:	4620      	mov	r0, r4
   21fcc:	f007 f905 	bl	291da <z_log_msg_finalize>
			return ret;
   21fd0:	e7b8      	b.n	21f44 <mcp2515_stop+0xa8>
		mcp2515_tx_done(dev, i, -ENETDOWN);
   21fd2:	f06f 0272 	mvn.w	r2, #114	; 0x72
   21fd6:	b2f1      	uxtb	r1, r6
   21fd8:	4620      	mov	r0, r4
   21fda:	f00c f87d 	bl	2e0d8 <mcp2515_tx_done>
	for (i = 0; i < MCP2515_TX_CNT; i++) {
   21fde:	3601      	adds	r6, #1
   21fe0:	e7ba      	b.n	21f58 <mcp2515_stop+0xbc>
		return -EALREADY;
   21fe2:	f06f 0677 	mvn.w	r6, #119	; 0x77
   21fe6:	e7ad      	b.n	21f44 <mcp2515_stop+0xa8>
	return 0;
   21fe8:	2600      	movs	r6, #0
   21fea:	e7ab      	b.n	21f44 <mcp2515_stop+0xa8>
   21fec:	00034408 	.word	0x00034408
   21ff0:	00031470 	.word	0x00031470
   21ff4:	00034430 	.word	0x00034430

00021ff8 <mcp2515_start>:
{
   21ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21ffc:	b082      	sub	sp, #8
	const struct mcp2515_config *dev_cfg = dev->config;
   21ffe:	f8d0 8004 	ldr.w	r8, [r0, #4]
	struct mcp2515_data *dev_data = dev->data;
   22002:	6907      	ldr	r7, [r0, #16]
	if (dev_data->started) {
   22004:	f897 317a 	ldrb.w	r3, [r7, #378]	; 0x17a
   22008:	2b00      	cmp	r3, #0
   2200a:	f040 808c 	bne.w	22126 <mcp2515_start+0x12e>
   2200e:	4604      	mov	r4, r0
	if (dev_cfg->phy != NULL) {
   22010:	f8d8 0030 	ldr.w	r0, [r8, #48]	; 0x30
   22014:	b120      	cbz	r0, 22020 <mcp2515_start+0x28>
	const struct can_transceiver_driver_api *api =
   22016:	6883      	ldr	r3, [r0, #8]
	return api->enable(dev);
   22018:	681b      	ldr	r3, [r3, #0]
   2201a:	4798      	blx	r3
		if (ret != 0) {
   2201c:	4605      	mov	r5, r0
   2201e:	b9c8      	cbnz	r0, 22054 <mcp2515_start+0x5c>
	k_mutex_lock(&dev_data->mutex, K_FOREVER);
   22020:	f507 76b2 	add.w	r6, r7, #356	; 0x164
	return z_impl_k_mutex_lock(mutex, timeout);
   22024:	f04f 32ff 	mov.w	r2, #4294967295
   22028:	f04f 33ff 	mov.w	r3, #4294967295
   2202c:	4630      	mov	r0, r6
   2202e:	f004 f9c1 	bl	263b4 <z_impl_k_mutex_lock>
	ret = mcp2515_set_mode_int(dev, dev_data->mcp2515_mode);
   22032:	f897 1179 	ldrb.w	r1, [r7, #377]	; 0x179
   22036:	4620      	mov	r0, r4
   22038:	f7ff fed0 	bl	21ddc <mcp2515_set_mode_int>
	if (ret < 0) {
   2203c:	1e05      	subs	r5, r0, #0
   2203e:	db3a      	blt.n	220b6 <mcp2515_start+0xbe>
		dev_data->started = true;
   22040:	2301      	movs	r3, #1
   22042:	f887 317a 	strb.w	r3, [r7, #378]	; 0x17a
	return z_impl_k_mutex_unlock(mutex);
   22046:	4630      	mov	r0, r6
   22048:	f004 fa38 	bl	264bc <z_impl_k_mutex_unlock>
}
   2204c:	4628      	mov	r0, r5
   2204e:	b002      	add	sp, #8
   22050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			LOG_ERR("Failed to enable CAN transceiver [%d]", ret);
   22054:	2008      	movs	r0, #8
   22056:	f7f1 fe57 	bl	13d08 <z_log_msg_alloc>
   2205a:	2200      	movs	r2, #0
   2205c:	f36f 0200 	bfc	r2, #0, #1
   22060:	f36f 0241 	bfc	r2, #1, #1
   22064:	f36f 0282 	bfc	r2, #2, #1
   22068:	f36f 02c5 	bfc	r2, #3, #3
   2206c:	2301      	movs	r3, #1
   2206e:	f363 1288 	bfi	r2, r3, #6, #3
   22072:	230c      	movs	r3, #12
   22074:	f363 2252 	bfi	r2, r3, #9, #10
   22078:	f36f 42de 	bfc	r2, #19, #12
   2207c:	f36f 72df 	bfc	r2, #31, #1
   22080:	4604      	mov	r4, r0
   22082:	b190      	cbz	r0, 220aa <mcp2515_start+0xb2>
   22084:	f110 0310 	adds.w	r3, r0, #16
   22088:	d002      	beq.n	22090 <mcp2515_start+0x98>
   2208a:	4928      	ldr	r1, [pc, #160]	; (2212c <mcp2515_start+0x134>)
   2208c:	6141      	str	r1, [r0, #20]
   2208e:	6185      	str	r5, [r0, #24]
   22090:	b15b      	cbz	r3, 220aa <mcp2515_start+0xb2>
   22092:	2303      	movs	r3, #3
   22094:	f88d 3004 	strb.w	r3, [sp, #4]
   22098:	2300      	movs	r3, #0
   2209a:	f88d 3005 	strb.w	r3, [sp, #5]
   2209e:	f88d 3006 	strb.w	r3, [sp, #6]
   220a2:	f88d 3007 	strb.w	r3, [sp, #7]
   220a6:	9801      	ldr	r0, [sp, #4]
   220a8:	6120      	str	r0, [r4, #16]
   220aa:	2300      	movs	r3, #0
   220ac:	4920      	ldr	r1, [pc, #128]	; (22130 <mcp2515_start+0x138>)
   220ae:	4620      	mov	r0, r4
   220b0:	f007 f893 	bl	291da <z_log_msg_finalize>
			return ret;
   220b4:	e7ca      	b.n	2204c <mcp2515_start+0x54>
		LOG_ERR("Failed to set the mode [%d]", ret);
   220b6:	2008      	movs	r0, #8
   220b8:	f7f1 fe26 	bl	13d08 <z_log_msg_alloc>
   220bc:	2200      	movs	r2, #0
   220be:	f36f 0200 	bfc	r2, #0, #1
   220c2:	f36f 0241 	bfc	r2, #1, #1
   220c6:	f36f 0282 	bfc	r2, #2, #1
   220ca:	f36f 02c5 	bfc	r2, #3, #3
   220ce:	2301      	movs	r3, #1
   220d0:	f363 1288 	bfi	r2, r3, #6, #3
   220d4:	230c      	movs	r3, #12
   220d6:	f363 2252 	bfi	r2, r3, #9, #10
   220da:	f36f 42de 	bfc	r2, #19, #12
   220de:	f36f 72df 	bfc	r2, #31, #1
   220e2:	4604      	mov	r4, r0
   220e4:	b190      	cbz	r0, 2210c <mcp2515_start+0x114>
   220e6:	f110 0310 	adds.w	r3, r0, #16
   220ea:	d002      	beq.n	220f2 <mcp2515_start+0xfa>
   220ec:	4911      	ldr	r1, [pc, #68]	; (22134 <mcp2515_start+0x13c>)
   220ee:	6141      	str	r1, [r0, #20]
   220f0:	6185      	str	r5, [r0, #24]
   220f2:	b15b      	cbz	r3, 2210c <mcp2515_start+0x114>
   220f4:	2303      	movs	r3, #3
   220f6:	f88d 3004 	strb.w	r3, [sp, #4]
   220fa:	2300      	movs	r3, #0
   220fc:	f88d 3005 	strb.w	r3, [sp, #5]
   22100:	f88d 3006 	strb.w	r3, [sp, #6]
   22104:	f88d 3007 	strb.w	r3, [sp, #7]
   22108:	9801      	ldr	r0, [sp, #4]
   2210a:	6120      	str	r0, [r4, #16]
   2210c:	2300      	movs	r3, #0
   2210e:	4908      	ldr	r1, [pc, #32]	; (22130 <mcp2515_start+0x138>)
   22110:	4620      	mov	r0, r4
   22112:	f007 f862 	bl	291da <z_log_msg_finalize>
		if (dev_cfg->phy != NULL) {
   22116:	f8d8 0030 	ldr.w	r0, [r8, #48]	; 0x30
   2211a:	2800      	cmp	r0, #0
   2211c:	d093      	beq.n	22046 <mcp2515_start+0x4e>
	const struct can_transceiver_driver_api *api =
   2211e:	6883      	ldr	r3, [r0, #8]
	return api->disable(dev);
   22120:	685b      	ldr	r3, [r3, #4]
   22122:	4798      	blx	r3
   22124:	e78f      	b.n	22046 <mcp2515_start+0x4e>
		return -EALREADY;
   22126:	f06f 0577 	mvn.w	r5, #119	; 0x77
   2212a:	e78f      	b.n	2204c <mcp2515_start+0x54>
   2212c:	00034458 	.word	0x00034458
   22130:	00031470 	.word	0x00031470
   22134:	00034480 	.word	0x00034480

00022138 <random_byte_get>:
	__asm__ volatile(
   22138:	f04f 0240 	mov.w	r2, #64	; 0x40
   2213c:	f3ef 8311 	mrs	r3, BASEPRI
   22140:	f382 8812 	msr	BASEPRI_MAX, r2
   22144:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   22148:	4a0a      	ldr	r2, [pc, #40]	; (22174 <random_byte_get+0x3c>)
   2214a:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   2214e:	b16a      	cbz	r2, 2216c <random_byte_get+0x34>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   22150:	4a08      	ldr	r2, [pc, #32]	; (22174 <random_byte_get+0x3c>)
   22152:	f8d2 0508 	ldr.w	r0, [r2, #1288]	; 0x508
		retval = nrf_rng_random_value_get(NRF_RNG);
   22156:	b2c0      	uxtb	r0, r0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   22158:	2100      	movs	r1, #0
   2215a:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   2215e:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
	__asm__ volatile(
   22162:	f383 8811 	msr	BASEPRI, r3
   22166:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   2216a:	4770      	bx	lr
	int retval = -EAGAIN;
   2216c:	f06f 000a 	mvn.w	r0, #10
   22170:	e7f7      	b.n	22162 <random_byte_get+0x2a>
   22172:	bf00      	nop
   22174:	4000d000 	.word	0x4000d000

00022178 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   22178:	b5f0      	push	{r4, r5, r6, r7, lr}
   2217a:	4686      	mov	lr, r0
	uint32_t last  = rngp->last;
   2217c:	7885      	ldrb	r5, [r0, #2]
	uint32_t mask  = rngp->mask;
   2217e:	78c4      	ldrb	r4, [r0, #3]
	__asm__ volatile(
   22180:	f04f 0340 	mov.w	r3, #64	; 0x40
   22184:	f3ef 8011 	mrs	r0, BASEPRI
   22188:	f383 8812 	msr	BASEPRI_MAX, r3
   2218c:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   22190:	f89e 6000 	ldrb.w	r6, [lr]
   22194:	4633      	mov	r3, r6
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   22196:	f89e 7001 	ldrb.w	r7, [lr, #1]

	available = (last - first) & mask;
   2219a:	1bad      	subs	r5, r5, r6
   2219c:	4025      	ands	r5, r4
	if (available < len) {
   2219e:	42aa      	cmp	r2, r5
   221a0:	d900      	bls.n	221a4 <rng_pool_get+0x2c>
		len = available;
   221a2:	b2aa      	uxth	r2, r5

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   221a4:	eb06 0c02 	add.w	ip, r6, r2
   221a8:	ea0c 0c04 	and.w	ip, ip, r4
   221ac:	f88e c000 	strb.w	ip, [lr]
	__asm__ volatile(
   221b0:	f380 8811 	msr	BASEPRI, r0
   221b4:	f3bf 8f6f 	isb	sy
	uint8_t *dst   = buf;
   221b8:	4608      	mov	r0, r1
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   221ba:	e007      	b.n	221cc <rng_pool_get+0x54>
	irq_unlock(key);

	while (likely(len--)) {
		*dst++ = rngp->buffer[first];
   221bc:	eb0e 0203 	add.w	r2, lr, r3
   221c0:	7952      	ldrb	r2, [r2, #5]
   221c2:	f800 2b01 	strb.w	r2, [r0], #1
		first = (first + 1) & mask;
   221c6:	3301      	adds	r3, #1
   221c8:	4023      	ands	r3, r4
	while (likely(len--)) {
   221ca:	4662      	mov	r2, ip
   221cc:	f102 3cff 	add.w	ip, r2, #4294967295
   221d0:	fa1f fc8c 	uxth.w	ip, ip
   221d4:	2a00      	cmp	r2, #0
   221d6:	d1f1      	bne.n	221bc <rng_pool_get+0x44>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   221d8:	42be      	cmp	r6, r7
   221da:	d10f      	bne.n	221fc <rng_pool_get+0x84>
	__asm__ volatile(
   221dc:	f04f 0240 	mov.w	r2, #64	; 0x40
   221e0:	f3ef 8311 	mrs	r3, BASEPRI
   221e4:	f382 8812 	msr	BASEPRI_MAX, r2
   221e8:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   221ec:	f89e 2000 	ldrb.w	r2, [lr]
   221f0:	f88e 2001 	strb.w	r2, [lr, #1]
	__asm__ volatile(
   221f4:	f383 8811 	msr	BASEPRI, r3
   221f8:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   221fc:	1a40      	subs	r0, r0, r1
   221fe:	b280      	uxth	r0, r0
	available = available - len;
   22200:	1a2d      	subs	r5, r5, r0
	if (available <= rngp->threshold) {
   22202:	f89e 3004 	ldrb.w	r3, [lr, #4]
   22206:	42ab      	cmp	r3, r5
   22208:	d302      	bcc.n	22210 <rng_pool_get+0x98>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   2220a:	4b02      	ldr	r3, [pc, #8]	; (22214 <rng_pool_get+0x9c>)
   2220c:	2201      	movs	r2, #1
   2220e:	601a      	str	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   22210:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22212:	bf00      	nop
   22214:	4000d000 	.word	0x4000d000

00022218 <entropy_nrf5_get_entropy_isr>:
}

static int entropy_nrf5_get_entropy_isr(const struct device *dev,
					uint8_t *buf, uint16_t len,
					uint32_t flags)
{
   22218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2221a:	460d      	mov	r5, r1
   2221c:	4614      	mov	r4, r2
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   2221e:	f013 0f01 	tst.w	r3, #1
   22222:	d103      	bne.n	2222c <entropy_nrf5_get_entropy_isr+0x14>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   22224:	4826      	ldr	r0, [pc, #152]	; (222c0 <entropy_nrf5_get_entropy_isr+0xa8>)
   22226:	f7ff ffa7 	bl	22178 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   2222a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len) {
   2222c:	b90a      	cbnz	r2, 22232 <entropy_nrf5_get_entropy_isr+0x1a>
	return cnt;
   2222e:	4620      	mov	r0, r4
   22230:	e7fb      	b.n	2222a <entropy_nrf5_get_entropy_isr+0x12>
	__asm__ volatile(
   22232:	f04f 0340 	mov.w	r3, #64	; 0x40
   22236:	f3ef 8611 	mrs	r6, BASEPRI
   2223a:	f383 8812 	msr	BASEPRI_MAX, r3
   2223e:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   22242:	200d      	movs	r0, #13
   22244:	f7f2 fd74 	bl	14d30 <arch_irq_is_enabled>
   22248:	4607      	mov	r7, r0
		irq_disable(IRQN);
   2224a:	200d      	movs	r0, #13
   2224c:	f007 fbb7 	bl	299be <arch_irq_disable>
	__asm__ volatile(
   22250:	f386 8811 	msr	BASEPRI, r6
   22254:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   22258:	4b1a      	ldr	r3, [pc, #104]	; (222c4 <entropy_nrf5_get_entropy_isr+0xac>)
   2225a:	2200      	movs	r2, #0
   2225c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   22260:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   22264:	2201      	movs	r2, #1
   22266:	601a      	str	r2, [r3, #0]
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   22268:	4b17      	ldr	r3, [pc, #92]	; (222c8 <entropy_nrf5_get_entropy_isr+0xb0>)
   2226a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   2226e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   22272:	4626      	mov	r6, r4
   22274:	e00b      	b.n	2228e <entropy_nrf5_get_entropy_isr+0x76>
	__asm__ volatile(
   22276:	f04f 0340 	mov.w	r3, #64	; 0x40
   2227a:	f3ef 8011 	mrs	r0, BASEPRI
   2227e:	f383 8812 	msr	BASEPRI_MAX, r3
   22282:	f3bf 8f6f 	isb	sy
   22286:	f7f2 fc35 	bl	14af4 <arch_cpu_atomic_idle>
}
   2228a:	e000      	b.n	2228e <entropy_nrf5_get_entropy_isr+0x76>
		} while (len);
   2228c:	b18e      	cbz	r6, 222b2 <entropy_nrf5_get_entropy_isr+0x9a>
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   2228e:	4b0d      	ldr	r3, [pc, #52]	; (222c4 <entropy_nrf5_get_entropy_isr+0xac>)
   22290:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   22294:	2b00      	cmp	r3, #0
   22296:	d0ee      	beq.n	22276 <entropy_nrf5_get_entropy_isr+0x5e>
			byte = random_byte_get();
   22298:	f7ff ff4e 	bl	22138 <random_byte_get>
   2229c:	4b0a      	ldr	r3, [pc, #40]	; (222c8 <entropy_nrf5_get_entropy_isr+0xb0>)
   2229e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   222a2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
			if (byte < 0) {
   222a6:	2800      	cmp	r0, #0
   222a8:	dbf0      	blt.n	2228c <entropy_nrf5_get_entropy_isr+0x74>
			buf[--len] = byte;
   222aa:	3e01      	subs	r6, #1
   222ac:	b2b6      	uxth	r6, r6
   222ae:	55a8      	strb	r0, [r5, r6]
   222b0:	e7ec      	b.n	2228c <entropy_nrf5_get_entropy_isr+0x74>
		if (irq_enabled) {
   222b2:	2f00      	cmp	r7, #0
   222b4:	d0bb      	beq.n	2222e <entropy_nrf5_get_entropy_isr+0x16>
			irq_enable(IRQN);
   222b6:	200d      	movs	r0, #13
   222b8:	f007 fb7c 	bl	299b4 <arch_irq_enable>
   222bc:	e7b7      	b.n	2222e <entropy_nrf5_get_entropy_isr+0x16>
   222be:	bf00      	nop
   222c0:	2000895c 	.word	0x2000895c
   222c4:	4000d000 	.word	0x4000d000
   222c8:	e000e100 	.word	0xe000e100

000222cc <isr>:
{
   222cc:	b510      	push	{r4, lr}
	byte = random_byte_get();
   222ce:	f7ff ff33 	bl	22138 <random_byte_get>
	if (byte < 0) {
   222d2:	2800      	cmp	r0, #0
   222d4:	db06      	blt.n	222e4 <isr+0x18>
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   222d6:	b2c4      	uxtb	r4, r0
   222d8:	4621      	mov	r1, r4
   222da:	480a      	ldr	r0, [pc, #40]	; (22304 <isr+0x38>)
   222dc:	f00b ff9f 	bl	2e21e <rng_pool_put>
	if (ret < 0) {
   222e0:	2800      	cmp	r0, #0
   222e2:	db00      	blt.n	222e6 <isr+0x1a>
}
   222e4:	bd10      	pop	{r4, pc}
		ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.thr),
   222e6:	4621      	mov	r1, r4
   222e8:	4807      	ldr	r0, [pc, #28]	; (22308 <isr+0x3c>)
   222ea:	f00b ff98 	bl	2e21e <rng_pool_put>
		if (ret < 0) {
   222ee:	2800      	cmp	r0, #0
   222f0:	db03      	blt.n	222fa <isr+0x2e>
	z_impl_k_sem_give(sem);
   222f2:	4806      	ldr	r0, [pc, #24]	; (2230c <isr+0x40>)
   222f4:	f004 f95e 	bl	265b4 <z_impl_k_sem_give>
}
   222f8:	e7f4      	b.n	222e4 <isr+0x18>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   222fa:	4b05      	ldr	r3, [pc, #20]	; (22310 <isr+0x44>)
   222fc:	2201      	movs	r2, #1
   222fe:	605a      	str	r2, [r3, #4]
}
   22300:	e7f7      	b.n	222f2 <isr+0x26>
   22302:	bf00      	nop
   22304:	2000895c 	.word	0x2000895c
   22308:	20008971 	.word	0x20008971
   2230c:	20008944 	.word	0x20008944
   22310:	4000d000 	.word	0x4000d000

00022314 <entropy_nrf5_get_entropy>:
{
   22314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22316:	460f      	mov	r7, r1
   22318:	4614      	mov	r4, r2
	while (len) {
   2231a:	e007      	b.n	2232c <entropy_nrf5_get_entropy+0x18>
	return z_impl_k_sem_take(sem, timeout);
   2231c:	f04f 32ff 	mov.w	r2, #4294967295
   22320:	f04f 33ff 	mov.w	r3, #4294967295
   22324:	f106 0018 	add.w	r0, r6, #24
   22328:	f004 f96c 	bl	26604 <z_impl_k_sem_take>
   2232c:	b1bc      	cbz	r4, 2235e <entropy_nrf5_get_entropy+0x4a>
   2232e:	4e0d      	ldr	r6, [pc, #52]	; (22364 <entropy_nrf5_get_entropy+0x50>)
   22330:	f04f 32ff 	mov.w	r2, #4294967295
   22334:	f04f 33ff 	mov.w	r3, #4294967295
   22338:	4630      	mov	r0, r6
   2233a:	f004 f963 	bl	26604 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   2233e:	4622      	mov	r2, r4
   22340:	4639      	mov	r1, r7
   22342:	f106 0045 	add.w	r0, r6, #69	; 0x45
   22346:	f7ff ff17 	bl	22178 <rng_pool_get>
   2234a:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
   2234c:	4630      	mov	r0, r6
   2234e:	f004 f931 	bl	265b4 <z_impl_k_sem_give>
		if (bytes == 0U) {
   22352:	2d00      	cmp	r5, #0
   22354:	d0e2      	beq.n	2231c <entropy_nrf5_get_entropy+0x8>
		len -= bytes;
   22356:	1b64      	subs	r4, r4, r5
   22358:	b2a4      	uxth	r4, r4
		buf += bytes;
   2235a:	442f      	add	r7, r5
   2235c:	e7e6      	b.n	2232c <entropy_nrf5_get_entropy+0x18>
}
   2235e:	2000      	movs	r0, #0
   22360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22362:	bf00      	nop
   22364:	2000892c 	.word	0x2000892c

00022368 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   22368:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   2236a:	4c18      	ldr	r4, [pc, #96]	; (223cc <entropy_nrf5_init+0x64>)
   2236c:	2201      	movs	r2, #1
   2236e:	4611      	mov	r1, r2
   22370:	4620      	mov	r0, r4
   22372:	f00e f896 	bl	304a2 <z_impl_k_sem_init>
   22376:	2201      	movs	r2, #1
   22378:	2100      	movs	r1, #0
   2237a:	f104 0018 	add.w	r0, r4, #24
   2237e:	f00e f890 	bl	304a2 <z_impl_k_sem_init>
	k_sem_init(&entropy_nrf5_data.sem_lock, 1, 1);

	/* Synching semaphore */
	k_sem_init(&entropy_nrf5_data.sem_sync, 0, 1);

	rng_pool_init((struct rng_pool *)(entropy_nrf5_data.thr),
   22382:	2204      	movs	r2, #4
   22384:	2108      	movs	r1, #8
   22386:	f104 0045 	add.w	r0, r4, #69	; 0x45
   2238a:	f00b ff5b 	bl	2e244 <rng_pool_init>
		      CONFIG_ENTROPY_NRF5_THR_POOL_SIZE,
		      CONFIG_ENTROPY_NRF5_THR_THRESHOLD);
	rng_pool_init((struct rng_pool *)(entropy_nrf5_data.isr),
   2238e:	220c      	movs	r2, #12
   22390:	2110      	movs	r1, #16
   22392:	f104 0030 	add.w	r0, r4, #48	; 0x30
   22396:	f00b ff55 	bl	2e244 <rng_pool_init>
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   2239a:	4b0d      	ldr	r3, [pc, #52]	; (223d0 <entropy_nrf5_init+0x68>)
   2239c:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   223a0:	f022 0201 	bic.w	r2, r2, #1
   223a4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   223a8:	2400      	movs	r4, #0
   223aa:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
   223ae:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   223b2:	2101      	movs	r1, #1
   223b4:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   223b8:	6019      	str	r1, [r3, #0]

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   223ba:	4622      	mov	r2, r4
   223bc:	200d      	movs	r0, #13
   223be:	f007 fb03 	bl	299c8 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   223c2:	200d      	movs	r0, #13
   223c4:	f007 faf6 	bl	299b4 <arch_irq_enable>

	return 0;
}
   223c8:	4620      	mov	r0, r4
   223ca:	bd10      	pop	{r4, pc}
   223cc:	2000892c 	.word	0x2000892c
   223d0:	4000d000 	.word	0x4000d000

000223d4 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   223d4:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
   223d8:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   223dc:	4b01      	ldr	r3, [pc, #4]	; (223e4 <set_comparator+0x10>)
   223de:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
   223e2:	4770      	bx	lr
   223e4:	40011000 	.word	0x40011000

000223e8 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   223e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   223ec:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   223ee:	4a02      	ldr	r2, [pc, #8]	; (223f8 <event_enable+0x10>)
   223f0:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
   223f4:	4770      	bx	lr
   223f6:	bf00      	nop
   223f8:	40011000 	.word	0x40011000

000223fc <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   223fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   22400:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   22402:	4a02      	ldr	r2, [pc, #8]	; (2240c <event_disable+0x10>)
   22404:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
   22408:	4770      	bx	lr
   2240a:	bf00      	nop
   2240c:	40011000 	.word	0x40011000

00022410 <counter>:
     return p_reg->COUNTER;
   22410:	4b01      	ldr	r3, [pc, #4]	; (22418 <counter+0x8>)
   22412:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
   22416:	4770      	bx	lr
   22418:	40011000 	.word	0x40011000

0002241c <set_alarm>:
 * @param[in] chan A channel for which a new CC value is to be set.
 *
 * @param[in] req_cc Requested CC register value to be set.
 */
static void set_alarm(int32_t chan, uint32_t req_cc)
{
   2241c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22420:	4606      	mov	r6, r0
   22422:	4688      	mov	r8, r1
	 * (however, even if such spurious event was generated, it would be
	 * properly filtered out in process_channel(), where the target time
	 * is checked).
	 * Clear also the event as it may already be generated at this point.
	 */
	event_disable(chan);
   22424:	f7ff ffea 	bl	223fc <event_disable>
	event_clear(chan);
   22428:	4630      	mov	r0, r6
   2242a:	f00b ff35 	bl	2e298 <event_clear>
	uint32_t cc_val = req_cc;
   2242e:	4645      	mov	r5, r8
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
   22430:	2703      	movs	r7, #3
   22432:	e001      	b.n	22438 <set_alarm+0x1c>
				} else {
					break;
				}
			}

			cc_val = now + cc_inc;
   22434:	193d      	adds	r5, r7, r4
			cc_inc++;
   22436:	3701      	adds	r7, #1
		set_comparator(chan, cc_val);
   22438:	4629      	mov	r1, r5
   2243a:	4630      	mov	r0, r6
   2243c:	f7ff ffca 	bl	223d4 <set_comparator>
		event_enable(chan);
   22440:	4630      	mov	r0, r6
   22442:	f7ff ffd1 	bl	223e8 <event_enable>
		now = counter();
   22446:	f7ff ffe3 	bl	22410 <counter>
   2244a:	4604      	mov	r4, r0
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   2244c:	1cc1      	adds	r1, r0, #3
   2244e:	4628      	mov	r0, r5
   22450:	f00b ff11 	bl	2e276 <counter_sub>
   22454:	4b0b      	ldr	r3, [pc, #44]	; (22484 <set_alarm+0x68>)
   22456:	4298      	cmp	r0, r3
   22458:	d911      	bls.n	2247e <set_alarm+0x62>
			if (event_check(chan)) {
   2245a:	4630      	mov	r0, r6
   2245c:	f00b ff0f 	bl	2e27e <event_check>
   22460:	2800      	cmp	r0, #0
   22462:	d0e7      	beq.n	22434 <set_alarm+0x18>
				now = counter();
   22464:	f7ff ffd4 	bl	22410 <counter>
   22468:	4604      	mov	r4, r0
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
   2246a:	4641      	mov	r1, r8
   2246c:	f00b ff03 	bl	2e276 <counter_sub>
   22470:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   22474:	d903      	bls.n	2247e <set_alarm+0x62>
					event_clear(chan);
   22476:	4630      	mov	r0, r6
   22478:	f00b ff0e 	bl	2e298 <event_clear>
   2247c:	e7da      	b.n	22434 <set_alarm+0x18>
		} else {
			break;
		}
	}
}
   2247e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22482:	bf00      	nop
   22484:	007ffffd 	.word	0x007ffffd

00022488 <compare_int_lock>:
{
   22488:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   2248a:	2301      	movs	r3, #1
   2248c:	4083      	lsls	r3, r0
   2248e:	ea6f 0c03 	mvn.w	ip, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   22492:	4a0e      	ldr	r2, [pc, #56]	; (224cc <compare_int_lock+0x44>)
   22494:	f3bf 8f5b 	dmb	ish
   22498:	e852 1f00 	ldrex	r1, [r2]
   2249c:	ea01 0e0c 	and.w	lr, r1, ip
   224a0:	e842 e400 	strex	r4, lr, [r2]
   224a4:	2c00      	cmp	r4, #0
   224a6:	d1f7      	bne.n	22498 <compare_int_lock+0x10>
   224a8:	f3bf 8f5b 	dmb	ish
	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   224ac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   224b0:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
   224b2:	4807      	ldr	r0, [pc, #28]	; (224d0 <compare_int_lock+0x48>)
   224b4:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   224b8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   224bc:	f3bf 8f6f 	isb	sy
	return prev & BIT(chan);
   224c0:	420b      	tst	r3, r1
}
   224c2:	bf14      	ite	ne
   224c4:	2001      	movne	r0, #1
   224c6:	2000      	moveq	r0, #0
   224c8:	bd10      	pop	{r4, pc}
   224ca:	bf00      	nop
   224cc:	20008984 	.word	0x20008984
   224d0:	40011000 	.word	0x40011000

000224d4 <channel_processing_check_and_clear>:
	sys_clock_announce(dticks);
}

static bool channel_processing_check_and_clear(int32_t chan)
{
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   224d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   224d8:	4083      	lsls	r3, r0
    return p_reg->INTENSET & mask;
   224da:	4a14      	ldr	r2, [pc, #80]	; (2252c <channel_processing_check_and_clear+0x58>)
   224dc:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   224e0:	4213      	tst	r3, r2
   224e2:	d101      	bne.n	224e8 <channel_processing_check_and_clear+0x14>
			event_clear(chan);
			return true;
		}
	}

	return false;
   224e4:	2000      	movs	r0, #0
}
   224e6:	4770      	bx	lr
{
   224e8:	b510      	push	{r4, lr}
   224ea:	4604      	mov	r4, r0
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
   224ec:	2301      	movs	r3, #1
   224ee:	4083      	lsls	r3, r0
   224f0:	43db      	mvns	r3, r3
   224f2:	490f      	ldr	r1, [pc, #60]	; (22530 <channel_processing_check_and_clear+0x5c>)
   224f4:	f3bf 8f5b 	dmb	ish
   224f8:	e851 2f00 	ldrex	r2, [r1]
   224fc:	ea02 0003 	and.w	r0, r2, r3
   22500:	e841 0c00 	strex	ip, r0, [r1]
   22504:	f1bc 0f00 	cmp.w	ip, #0
   22508:	d1f6      	bne.n	224f8 <channel_processing_check_and_clear+0x24>
   2250a:	f3bf 8f5b 	dmb	ish
   2250e:	fa22 f304 	lsr.w	r3, r2, r4
   22512:	f013 0f01 	tst.w	r3, #1
   22516:	d103      	bne.n	22520 <channel_processing_check_and_clear+0x4c>
		    event_check(chan)) {
   22518:	4620      	mov	r0, r4
   2251a:	f00b feb0 	bl	2e27e <event_check>
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
   2251e:	b118      	cbz	r0, 22528 <channel_processing_check_and_clear+0x54>
			event_clear(chan);
   22520:	4620      	mov	r0, r4
   22522:	f00b feb9 	bl	2e298 <event_clear>
			return true;
   22526:	2001      	movs	r0, #1
}
   22528:	bd10      	pop	{r4, pc}
   2252a:	bf00      	nop
   2252c:	40011000 	.word	0x40011000
   22530:	20008980 	.word	0x20008980

00022534 <compare_int_unlock>:
	if (key) {
   22534:	b901      	cbnz	r1, 22538 <compare_int_unlock+0x4>
}
   22536:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
   22538:	2301      	movs	r3, #1
   2253a:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2253c:	4a11      	ldr	r2, [pc, #68]	; (22584 <compare_int_unlock+0x50>)
   2253e:	f3bf 8f5b 	dmb	ish
   22542:	e852 cf00 	ldrex	ip, [r2]
   22546:	ea4c 0c03 	orr.w	ip, ip, r3
   2254a:	e842 c100 	strex	r1, ip, [r2]
   2254e:	2900      	cmp	r1, #0
   22550:	d1f7      	bne.n	22542 <compare_int_unlock+0xe>
   22552:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   22556:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2255a:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
   2255c:	4a0a      	ldr	r2, [pc, #40]	; (22588 <compare_int_unlock+0x54>)
   2255e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   22562:	f3bf 8f5b 	dmb	ish
   22566:	4b09      	ldr	r3, [pc, #36]	; (2258c <compare_int_unlock+0x58>)
   22568:	681b      	ldr	r3, [r3, #0]
   2256a:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   2256e:	40c3      	lsrs	r3, r0
   22570:	f013 0f01 	tst.w	r3, #1
   22574:	d0df      	beq.n	22536 <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   22576:	4b06      	ldr	r3, [pc, #24]	; (22590 <compare_int_unlock+0x5c>)
   22578:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   2257c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   22580:	e7d9      	b.n	22536 <compare_int_unlock+0x2>
   22582:	bf00      	nop
   22584:	20008984 	.word	0x20008984
   22588:	40011000 	.word	0x40011000
   2258c:	20008980 	.word	0x20008980
   22590:	e000e100 	.word	0xe000e100

00022594 <sys_clock_timeout_handler>:
{
   22594:	b538      	push	{r3, r4, r5, lr}
   22596:	4614      	mov	r4, r2
	uint32_t cc_value = absolute_time_to_cc(expire_time);
   22598:	4610      	mov	r0, r2
   2259a:	4619      	mov	r1, r3
   2259c:	f00b fe88 	bl	2e2b0 <absolute_time_to_cc>
   225a0:	4602      	mov	r2, r0
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
   225a2:	490d      	ldr	r1, [pc, #52]	; (225d8 <sys_clock_timeout_handler+0x44>)
   225a4:	680b      	ldr	r3, [r1, #0]
   225a6:	1ae0      	subs	r0, r4, r3
	last_count += dticks * CYC_PER_TICK;
   225a8:	181b      	adds	r3, r3, r0
   225aa:	684c      	ldr	r4, [r1, #4]
   225ac:	f144 0400 	adc.w	r4, r4, #0
   225b0:	600b      	str	r3, [r1, #0]
   225b2:	604c      	str	r4, [r1, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   225b4:	f5a2 1300 	sub.w	r3, r2, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
   225b8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   225bc:	d209      	bcs.n	225d2 <sys_clock_timeout_handler+0x3e>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   225be:	4b07      	ldr	r3, [pc, #28]	; (225dc <sys_clock_timeout_handler+0x48>)
   225c0:	681b      	ldr	r3, [r3, #0]
   225c2:	0a19      	lsrs	r1, r3, #8
   225c4:	061b      	lsls	r3, r3, #24
   225c6:	18d4      	adds	r4, r2, r3
   225c8:	f141 0500 	adc.w	r5, r1, #0
   225cc:	4b04      	ldr	r3, [pc, #16]	; (225e0 <sys_clock_timeout_handler+0x4c>)
   225ce:	e9c3 4500 	strd	r4, r5, [r3]
	sys_clock_announce(dticks);
   225d2:	f004 fee9 	bl	273a8 <sys_clock_announce>
}
   225d6:	bd38      	pop	{r3, r4, r5, pc}
   225d8:	200027c8 	.word	0x200027c8
   225dc:	20008988 	.word	0x20008988
   225e0:	200027d0 	.word	0x200027d0

000225e4 <z_nrf_rtc_timer_read>:
{
   225e4:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   225e6:	4b0d      	ldr	r3, [pc, #52]	; (2261c <z_nrf_rtc_timer_read+0x38>)
   225e8:	681c      	ldr	r4, [r3, #0]
   225ea:	0a25      	lsrs	r5, r4, #8
   225ec:	0624      	lsls	r4, r4, #24
  __ASM volatile ("dmb 0xF":::"memory");
   225ee:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
   225f2:	f7ff ff0d 	bl	22410 <counter>
   225f6:	4603      	mov	r3, r0
	val += cntr;
   225f8:	1900      	adds	r0, r0, r4
   225fa:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   225fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   22602:	d20a      	bcs.n	2261a <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
   22604:	4b06      	ldr	r3, [pc, #24]	; (22620 <z_nrf_rtc_timer_read+0x3c>)
   22606:	e9d3 2300 	ldrd	r2, r3, [r3]
   2260a:	4290      	cmp	r0, r2
   2260c:	eb71 0303 	sbcs.w	r3, r1, r3
   22610:	d203      	bcs.n	2261a <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
   22612:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   22616:	f141 0100 	adc.w	r1, r1, #0
}
   2261a:	bd38      	pop	{r3, r4, r5, pc}
   2261c:	20008988 	.word	0x20008988
   22620:	200027d0 	.word	0x200027d0

00022624 <compare_set_nolocks>:
{
   22624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22626:	4606      	mov	r6, r0
   22628:	4614      	mov	r4, r2
   2262a:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
   2262c:	4610      	mov	r0, r2
   2262e:	4619      	mov	r1, r3
   22630:	f00b fe3e 	bl	2e2b0 <absolute_time_to_cc>
   22634:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
   22636:	f7ff ffd5 	bl	225e4 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   2263a:	42a0      	cmp	r0, r4
   2263c:	eb71 0305 	sbcs.w	r3, r1, r5
   22640:	d215      	bcs.n	2266e <compare_set_nolocks+0x4a>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
   22642:	1a20      	subs	r0, r4, r0
   22644:	eb65 0101 	sbc.w	r1, r5, r1
   22648:	4b17      	ldr	r3, [pc, #92]	; (226a8 <compare_set_nolocks+0x84>)
   2264a:	4298      	cmp	r0, r3
   2264c:	f171 0100 	sbcs.w	r1, r1, #0
   22650:	d227      	bcs.n	226a2 <compare_set_nolocks+0x7e>
		if (target_time != cc_data[chan].target_time) {
   22652:	4b16      	ldr	r3, [pc, #88]	; (226ac <compare_set_nolocks+0x88>)
   22654:	eb03 1306 	add.w	r3, r3, r6, lsl #4
   22658:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   2265c:	42ab      	cmp	r3, r5
   2265e:	bf08      	it	eq
   22660:	42a2      	cmpeq	r2, r4
   22662:	d012      	beq.n	2268a <compare_set_nolocks+0x66>
			set_alarm(chan, cc_value);
   22664:	4639      	mov	r1, r7
   22666:	4630      	mov	r0, r6
   22668:	f7ff fed8 	bl	2241c <set_alarm>
   2266c:	e00d      	b.n	2268a <compare_set_nolocks+0x66>
		atomic_or(&force_isr_mask, BIT(chan));
   2266e:	2301      	movs	r3, #1
   22670:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   22672:	4a0f      	ldr	r2, [pc, #60]	; (226b0 <compare_set_nolocks+0x8c>)
   22674:	f3bf 8f5b 	dmb	ish
   22678:	e852 0f00 	ldrex	r0, [r2]
   2267c:	4318      	orrs	r0, r3
   2267e:	e842 0100 	strex	r1, r0, [r2]
   22682:	2900      	cmp	r1, #0
   22684:	d1f8      	bne.n	22678 <compare_set_nolocks+0x54>
   22686:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
   2268a:	4b08      	ldr	r3, [pc, #32]	; (226ac <compare_set_nolocks+0x88>)
   2268c:	0132      	lsls	r2, r6, #4
   2268e:	eb03 1606 	add.w	r6, r3, r6, lsl #4
   22692:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
   22696:	9906      	ldr	r1, [sp, #24]
   22698:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
   2269a:	9b07      	ldr	r3, [sp, #28]
   2269c:	6073      	str	r3, [r6, #4]
	return ret;
   2269e:	2000      	movs	r0, #0
}
   226a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -EINVAL;
   226a2:	f06f 0015 	mvn.w	r0, #21
   226a6:	e7fb      	b.n	226a0 <compare_set_nolocks+0x7c>
   226a8:	00800001 	.word	0x00800001
   226ac:	200027b8 	.word	0x200027b8
   226b0:	20008980 	.word	0x20008980

000226b4 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   226b4:	b530      	push	{r4, r5, lr}
   226b6:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
   226b8:	2300      	movs	r3, #0
   226ba:	4a1d      	ldr	r2, [pc, #116]	; (22730 <sys_clock_driver_init+0x7c>)
   226bc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   226c0:	2b00      	cmp	r3, #0
   226c2:	dd24      	ble.n	2270e <sys_clock_driver_init+0x5a>
    p_reg->INTENSET = mask;
   226c4:	4c1a      	ldr	r4, [pc, #104]	; (22730 <sys_clock_driver_init+0x7c>)
   226c6:	2502      	movs	r5, #2
   226c8:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   226cc:	4b19      	ldr	r3, [pc, #100]	; (22734 <sys_clock_driver_init+0x80>)
   226ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   226d2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   226d6:	2200      	movs	r2, #0
   226d8:	2101      	movs	r1, #1
   226da:	2011      	movs	r0, #17
   226dc:	f007 f974 	bl	299c8 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   226e0:	2011      	movs	r0, #17
   226e2:	f007 f967 	bl	299b4 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   226e6:	2301      	movs	r3, #1
   226e8:	60a3      	str	r3, [r4, #8]
   226ea:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   226ec:	4a12      	ldr	r2, [pc, #72]	; (22738 <sys_clock_driver_init+0x84>)
   226ee:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   226f0:	2400      	movs	r4, #0
   226f2:	9401      	str	r4, [sp, #4]
   226f4:	4b11      	ldr	r3, [pc, #68]	; (2273c <sys_clock_driver_init+0x88>)
   226f6:	9300      	str	r3, [sp, #0]
   226f8:	4a11      	ldr	r2, [pc, #68]	; (22740 <sys_clock_driver_init+0x8c>)
   226fa:	2300      	movs	r3, #0
   226fc:	4620      	mov	r0, r4
   226fe:	f00b fde1 	bl	2e2c4 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   22702:	4628      	mov	r0, r5
   22704:	f7fd fd18 	bl	20138 <z_nrf_clock_control_lf_on>

	return 0;
}
   22708:	4620      	mov	r0, r4
   2270a:	b003      	add	sp, #12
   2270c:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   2270e:	4a0d      	ldr	r2, [pc, #52]	; (22744 <sys_clock_driver_init+0x90>)
   22710:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   22714:	f04f 30ff 	mov.w	r0, #4294967295
   22718:	f04f 31ff 	mov.w	r1, #4294967295
   2271c:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   22720:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   22724:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
   22726:	4902      	ldr	r1, [pc, #8]	; (22730 <sys_clock_driver_init+0x7c>)
   22728:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   2272c:	3301      	adds	r3, #1
   2272e:	e7c7      	b.n	226c0 <sys_clock_driver_init+0xc>
   22730:	40011000 	.word	0x40011000
   22734:	e000e100 	.word	0xe000e100
   22738:	20008984 	.word	0x20008984
   2273c:	00022595 	.word	0x00022595
   22740:	007fffff 	.word	0x007fffff
   22744:	200027b8 	.word	0x200027b8

00022748 <process_channel>:
{
   22748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2274c:	b082      	sub	sp, #8
   2274e:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
   22750:	f7ff fec0 	bl	224d4 <channel_processing_check_and_clear>
   22754:	b910      	cbnz	r0, 2275c <process_channel+0x14>
}
   22756:	b002      	add	sp, #8
   22758:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
   2275c:	f7ff ff42 	bl	225e4 <z_nrf_rtc_timer_read>
   22760:	4682      	mov	sl, r0
   22762:	460d      	mov	r5, r1
		mcu_critical_state = full_int_lock();
   22764:	f00b fda7 	bl	2e2b6 <full_int_lock>
   22768:	4606      	mov	r6, r0
		expire_time = cc_data[chan].target_time;
   2276a:	4b15      	ldr	r3, [pc, #84]	; (227c0 <process_channel+0x78>)
   2276c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   22770:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
   22774:	45c2      	cmp	sl, r8
   22776:	eb75 0509 	sbcs.w	r5, r5, r9
   2277a:	d20b      	bcs.n	22794 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   2277c:	2500      	movs	r5, #0
		full_int_unlock(mcu_critical_state);
   2277e:	4630      	mov	r0, r6
   22780:	f00b fd9d 	bl	2e2be <full_int_unlock>
		if (handler) {
   22784:	2d00      	cmp	r5, #0
   22786:	d0e6      	beq.n	22756 <process_channel+0xe>
			handler(chan, expire_time, user_context);
   22788:	9700      	str	r7, [sp, #0]
   2278a:	4642      	mov	r2, r8
   2278c:	464b      	mov	r3, r9
   2278e:	4620      	mov	r0, r4
   22790:	47a8      	blx	r5
}
   22792:	e7e0      	b.n	22756 <process_channel+0xe>
			handler = cc_data[chan].callback;
   22794:	4a0a      	ldr	r2, [pc, #40]	; (227c0 <process_channel+0x78>)
   22796:	0123      	lsls	r3, r4, #4
   22798:	eb02 1104 	add.w	r1, r2, r4, lsl #4
   2279c:	58d5      	ldr	r5, [r2, r3]
			user_context = cc_data[chan].user_context;
   2279e:	684f      	ldr	r7, [r1, #4]
			cc_data[chan].callback = NULL;
   227a0:	2000      	movs	r0, #0
   227a2:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   227a4:	f04f 32ff 	mov.w	r2, #4294967295
   227a8:	f04f 33ff 	mov.w	r3, #4294967295
   227ac:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
   227b0:	4620      	mov	r0, r4
   227b2:	f7ff fe23 	bl	223fc <event_disable>
			event_clear(chan);
   227b6:	4620      	mov	r0, r4
   227b8:	f00b fd6e 	bl	2e298 <event_clear>
   227bc:	e7df      	b.n	2277e <process_channel+0x36>
   227be:	bf00      	nop
   227c0:	200027b8 	.word	0x200027b8

000227c4 <rtc_nrf_isr>:
{
   227c4:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
   227c6:	4b0e      	ldr	r3, [pc, #56]	; (22800 <rtc_nrf_isr+0x3c>)
   227c8:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   227cc:	f013 0f02 	tst.w	r3, #2
   227d0:	d00d      	beq.n	227ee <rtc_nrf_isr+0x2a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   227d2:	4b0b      	ldr	r3, [pc, #44]	; (22800 <rtc_nrf_isr+0x3c>)
   227d4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   227d8:	b14b      	cbz	r3, 227ee <rtc_nrf_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   227da:	4b09      	ldr	r3, [pc, #36]	; (22800 <rtc_nrf_isr+0x3c>)
   227dc:	2200      	movs	r2, #0
   227de:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   227e2:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		overflow_cnt++;
   227e6:	4a07      	ldr	r2, [pc, #28]	; (22804 <rtc_nrf_isr+0x40>)
   227e8:	6813      	ldr	r3, [r2, #0]
   227ea:	3301      	adds	r3, #1
   227ec:	6013      	str	r3, [r2, #0]
{
   227ee:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   227f0:	2c00      	cmp	r4, #0
   227f2:	dd00      	ble.n	227f6 <rtc_nrf_isr+0x32>
}
   227f4:	bd10      	pop	{r4, pc}
		process_channel(chan);
   227f6:	4620      	mov	r0, r4
   227f8:	f7ff ffa6 	bl	22748 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   227fc:	3401      	adds	r4, #1
   227fe:	e7f7      	b.n	227f0 <rtc_nrf_isr+0x2c>
   22800:	40011000 	.word	0x40011000
   22804:	20008988 	.word	0x20008988

00022808 <sys_clock_set_timeout>:
{
   22808:	b510      	push	{r4, lr}
   2280a:	b082      	sub	sp, #8
	if (ticks == K_TICKS_FOREVER) {
   2280c:	f1b0 3fff 	cmp.w	r0, #4294967295
   22810:	d006      	beq.n	22820 <sys_clock_set_timeout+0x18>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   22812:	2801      	cmp	r0, #1
   22814:	dd09      	ble.n	2282a <sys_clock_set_timeout+0x22>
   22816:	4b15      	ldr	r3, [pc, #84]	; (2286c <sys_clock_set_timeout+0x64>)
   22818:	4298      	cmp	r0, r3
   2281a:	dc24      	bgt.n	22866 <sys_clock_set_timeout+0x5e>
   2281c:	4604      	mov	r4, r0
   2281e:	e005      	b.n	2282c <sys_clock_set_timeout+0x24>
		sys_busy = false;
   22820:	4b13      	ldr	r3, [pc, #76]	; (22870 <sys_clock_set_timeout+0x68>)
   22822:	2200      	movs	r2, #0
   22824:	701a      	strb	r2, [r3, #0]
		cyc = MAX_TICKS * CYC_PER_TICK;
   22826:	4c13      	ldr	r4, [pc, #76]	; (22874 <sys_clock_set_timeout+0x6c>)
   22828:	e003      	b.n	22832 <sys_clock_set_timeout+0x2a>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   2282a:	2401      	movs	r4, #1
		sys_busy = true;
   2282c:	4b10      	ldr	r3, [pc, #64]	; (22870 <sys_clock_set_timeout+0x68>)
   2282e:	2201      	movs	r2, #1
   22830:	701a      	strb	r2, [r3, #0]
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   22832:	f7ff fed7 	bl	225e4 <z_nrf_rtc_timer_read>
   22836:	4b10      	ldr	r3, [pc, #64]	; (22878 <sys_clock_set_timeout+0x70>)
   22838:	681a      	ldr	r2, [r3, #0]
   2283a:	685b      	ldr	r3, [r3, #4]
   2283c:	1a80      	subs	r0, r0, r2
	if (unannounced >= COUNTER_HALF_SPAN) {
   2283e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   22842:	d300      	bcc.n	22846 <sys_clock_set_timeout+0x3e>
		cyc = 0;
   22844:	2400      	movs	r4, #0
	cyc += unannounced;
   22846:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
   22848:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
   2284c:	d300      	bcc.n	22850 <sys_clock_set_timeout+0x48>
		cyc = MAX_CYCLES;
   2284e:	4c09      	ldr	r4, [pc, #36]	; (22874 <sys_clock_set_timeout+0x6c>)
	uint64_t target_time = cyc + last_count;
   22850:	2000      	movs	r0, #0
   22852:	1912      	adds	r2, r2, r4
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   22854:	9001      	str	r0, [sp, #4]
   22856:	4909      	ldr	r1, [pc, #36]	; (2287c <sys_clock_set_timeout+0x74>)
   22858:	9100      	str	r1, [sp, #0]
   2285a:	f143 0300 	adc.w	r3, r3, #0
   2285e:	f00b fd31 	bl	2e2c4 <compare_set>
}
   22862:	b002      	add	sp, #8
   22864:	bd10      	pop	{r4, pc}
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   22866:	4c03      	ldr	r4, [pc, #12]	; (22874 <sys_clock_set_timeout+0x6c>)
   22868:	e7e0      	b.n	2282c <sys_clock_set_timeout+0x24>
   2286a:	bf00      	nop
   2286c:	007ffffe 	.word	0x007ffffe
   22870:	200090bf 	.word	0x200090bf
   22874:	007fffff 	.word	0x007fffff
   22878:	200027c8 	.word	0x200027c8
   2287c:	00022595 	.word	0x00022595

00022880 <sys_clock_elapsed>:
{
   22880:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   22882:	f7ff feaf 	bl	225e4 <z_nrf_rtc_timer_read>
   22886:	4b02      	ldr	r3, [pc, #8]	; (22890 <sys_clock_elapsed+0x10>)
   22888:	681b      	ldr	r3, [r3, #0]
}
   2288a:	1ac0      	subs	r0, r0, r3
   2288c:	bd08      	pop	{r3, pc}
   2288e:	bf00      	nop
   22890:	200027c8 	.word	0x200027c8

00022894 <nrf_gpio_pin_write>:
    if (value == 0)
   22894:	b969      	cbnz	r1, 228b2 <nrf_gpio_pin_write+0x1e>
    *p_pin = pin_number & 0x1F;
   22896:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
   2289a:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2289c:	2801      	cmp	r0, #1
   2289e:	d006      	beq.n	228ae <nrf_gpio_pin_write+0x1a>
        case 0: return NRF_P0;
   228a0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   228a4:	2301      	movs	r3, #1
   228a6:	408b      	lsls	r3, r1
    p_reg->OUTCLR = clr_mask;
   228a8:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   228ac:	4770      	bx	lr
        case 1: return NRF_P1;
   228ae:	4a08      	ldr	r2, [pc, #32]	; (228d0 <nrf_gpio_pin_write+0x3c>)
   228b0:	e7f8      	b.n	228a4 <nrf_gpio_pin_write+0x10>
    *p_pin = pin_number & 0x1F;
   228b2:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
   228b6:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   228b8:	2801      	cmp	r0, #1
   228ba:	d006      	beq.n	228ca <nrf_gpio_pin_write+0x36>
        case 0: return NRF_P0;
   228bc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   228c0:	2301      	movs	r3, #1
   228c2:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
   228c4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
}
   228c8:	4770      	bx	lr
        case 1: return NRF_P1;
   228ca:	4a01      	ldr	r2, [pc, #4]	; (228d0 <nrf_gpio_pin_write+0x3c>)
   228cc:	e7f8      	b.n	228c0 <nrf_gpio_pin_write+0x2c>
   228ce:	bf00      	nop
   228d0:	50000300 	.word	0x50000300

000228d4 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   228d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   228d8:	b083      	sub	sp, #12
   228da:	4607      	mov	r7, r0
   228dc:	4689      	mov	r9, r1
   228de:	9201      	str	r2, [sp, #4]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   228e0:	2400      	movs	r4, #0
   228e2:	e02a      	b.n	2293a <pinctrl_configure_pins+0x66>
		uint32_t write = NO_WRITE;
		nrf_gpio_pin_dir_t dir;
		nrf_gpio_pin_input_t input;

		if (pin == NRF_PIN_DISCONNECTED) {
			pin = 0xFFFFFFFFU;
   228e4:	f04f 35ff 	mov.w	r5, #4294967295
   228e8:	e033      	b.n	22952 <pinctrl_configure_pins+0x7e>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
			break;
#endif /* defined(NRF_PSEL_UART) */
#if defined(NRF_PSEL_SPIM)
		case NRF_FUN_SPIM_SCK:
			NRF_PSEL_SPIM(reg, SCK) = pin;
   228ea:	9b01      	ldr	r3, [sp, #4]
   228ec:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
			write = 0U;
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   228f0:	f04f 0800 	mov.w	r8, #0
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   228f4:	2601      	movs	r6, #1
			write = 0U;
   228f6:	4641      	mov	r1, r8
		default:
			return -ENOTSUP;
		}

		/* configure GPIO properties */
		if (pin != NRF_PIN_DISCONNECTED) {
   228f8:	2d7f      	cmp	r5, #127	; 0x7f
   228fa:	d01c      	beq.n	22936 <pinctrl_configure_pins+0x62>
			if (write != NO_WRITE) {
   228fc:	2900      	cmp	r1, #0
   228fe:	d045      	beq.n	2298c <pinctrl_configure_pins+0xb8>
				nrf_gpio_pin_write(pin, write);
			}

			/* force input and disconnected buffer for low power */
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   22900:	f857 300b 	ldr.w	r3, [r7, fp]
   22904:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   22908:	d002      	beq.n	22910 <pinctrl_configure_pins+0x3c>
				dir = NRF_GPIO_PIN_DIR_INPUT;
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   2290a:	f04f 0801 	mov.w	r8, #1
				dir = NRF_GPIO_PIN_DIR_INPUT;
   2290e:	2600      	movs	r6, #0
			}

			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
   22910:	f3c3 13c1 	ubfx	r3, r3, #7, #2
    *p_pin = pin_number & 0x1F;
   22914:	f005 021f 	and.w	r2, r5, #31
    return pin_number >> 5;
   22918:	096d      	lsrs	r5, r5, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2291a:	2d01      	cmp	r5, #1
   2291c:	d03a      	beq.n	22994 <pinctrl_configure_pins+0xc0>
        case 0: return NRF_P0;
   2291e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   22922:	ea46 0648 	orr.w	r6, r6, r8, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
   22926:	ea46 0683 	orr.w	r6, r6, r3, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   2292a:	ea46 260a 	orr.w	r6, r6, sl, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
   2292e:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   22932:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   22936:	3401      	adds	r4, #1
   22938:	b2e4      	uxtb	r4, r4
   2293a:	454c      	cmp	r4, r9
   2293c:	d22c      	bcs.n	22998 <pinctrl_configure_pins+0xc4>
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   2293e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
   22942:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   22946:	f3c3 2a43 	ubfx	sl, r3, #9, #4
		uint32_t pin = NRF_GET_PIN(pins[i]);
   2294a:	f003 057f 	and.w	r5, r3, #127	; 0x7f
		if (pin == NRF_PIN_DISCONNECTED) {
   2294e:	2d7f      	cmp	r5, #127	; 0x7f
   22950:	d0c8      	beq.n	228e4 <pinctrl_configure_pins+0x10>
		switch (NRF_GET_FUN(pins[i])) {
   22952:	0c1b      	lsrs	r3, r3, #16
   22954:	2b05      	cmp	r3, #5
   22956:	d008      	beq.n	2296a <pinctrl_configure_pins+0x96>
   22958:	2b06      	cmp	r3, #6
   2295a:	d00e      	beq.n	2297a <pinctrl_configure_pins+0xa6>
   2295c:	2b04      	cmp	r3, #4
   2295e:	d0c4      	beq.n	228ea <pinctrl_configure_pins+0x16>
   22960:	f06f 0085 	mvn.w	r0, #133	; 0x85
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
}
   22964:	b003      	add	sp, #12
   22966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			NRF_PSEL_SPIM(reg, MOSI) = pin;
   2296a:	9b01      	ldr	r3, [sp, #4]
   2296c:	f8c3 550c 	str.w	r5, [r3, #1292]	; 0x50c
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   22970:	f04f 0801 	mov.w	r8, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   22974:	4646      	mov	r6, r8
			write = 0U;
   22976:	2100      	movs	r1, #0
			break;
   22978:	e7be      	b.n	228f8 <pinctrl_configure_pins+0x24>
			NRF_PSEL_SPIM(reg, MISO) = pin;
   2297a:	9b01      	ldr	r3, [sp, #4]
   2297c:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   22980:	f04f 0800 	mov.w	r8, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   22984:	4646      	mov	r6, r8
		uint32_t write = NO_WRITE;
   22986:	f04f 31ff 	mov.w	r1, #4294967295
			break;
   2298a:	e7b5      	b.n	228f8 <pinctrl_configure_pins+0x24>
				nrf_gpio_pin_write(pin, write);
   2298c:	4628      	mov	r0, r5
   2298e:	f7ff ff81 	bl	22894 <nrf_gpio_pin_write>
   22992:	e7b5      	b.n	22900 <pinctrl_configure_pins+0x2c>
        case 1: return NRF_P1;
   22994:	4901      	ldr	r1, [pc, #4]	; (2299c <pinctrl_configure_pins+0xc8>)
   22996:	e7c4      	b.n	22922 <pinctrl_configure_pins+0x4e>
	return 0;
   22998:	2000      	movs	r0, #0
   2299a:	e7e3      	b.n	22964 <pinctrl_configure_pins+0x90>
   2299c:	50000300 	.word	0x50000300

000229a0 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   229a0:	b508      	push	{r3, lr}
   229a2:	4602      	mov	r2, r0
   229a4:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   229a6:	4802      	ldr	r0, [pc, #8]	; (229b0 <multithreading_lock_acquire+0x10>)
   229a8:	f003 fd04 	bl	263b4 <z_impl_k_mutex_lock>
	return k_mutex_lock(&mpsl_lock, timeout);
}
   229ac:	bd08      	pop	{r3, pc}
   229ae:	bf00      	nop
   229b0:	20000ac0 	.word	0x20000ac0

000229b4 <multithreading_lock_release>:

void multithreading_lock_release(void)
{
   229b4:	b508      	push	{r3, lr}
	return z_impl_k_mutex_unlock(mutex);
   229b6:	4802      	ldr	r0, [pc, #8]	; (229c0 <multithreading_lock_release+0xc>)
   229b8:	f003 fd80 	bl	264bc <z_impl_k_mutex_unlock>
	k_mutex_unlock(&mpsl_lock);
}
   229bc:	bd08      	pop	{r3, pc}
   229be:	bf00      	nop
   229c0:	20000ac0 	.word	0x20000ac0

000229c4 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   229c4:	b500      	push	{lr}
   229c6:	b083      	sub	sp, #12
	z_impl_log_panic();
   229c8:	f7f1 fa1e 	bl	13e08 <z_impl_log_panic>
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   229cc:	2006      	movs	r0, #6
   229ce:	f7f1 f99b 	bl	13d08 <z_log_msg_alloc>
   229d2:	2200      	movs	r2, #0
   229d4:	f36f 0200 	bfc	r2, #0, #1
   229d8:	f36f 0241 	bfc	r2, #1, #1
   229dc:	f36f 0282 	bfc	r2, #2, #1
   229e0:	f36f 02c5 	bfc	r2, #3, #3
   229e4:	2301      	movs	r3, #1
   229e6:	f363 1288 	bfi	r2, r3, #6, #3
   229ea:	2308      	movs	r3, #8
   229ec:	f363 2252 	bfi	r2, r3, #9, #10
   229f0:	f36f 42de 	bfc	r2, #19, #12
   229f4:	f36f 72df 	bfc	r2, #31, #1
   229f8:	4684      	mov	ip, r0
   229fa:	b190      	cbz	r0, 22a22 <k_sys_fatal_error_handler+0x5e>
   229fc:	f110 0310 	adds.w	r3, r0, #16
   22a00:	d001      	beq.n	22a06 <k_sys_fatal_error_handler+0x42>
   22a02:	490c      	ldr	r1, [pc, #48]	; (22a34 <k_sys_fatal_error_handler+0x70>)
   22a04:	6141      	str	r1, [r0, #20]
   22a06:	b163      	cbz	r3, 22a22 <k_sys_fatal_error_handler+0x5e>
   22a08:	2302      	movs	r3, #2
   22a0a:	f88d 3004 	strb.w	r3, [sp, #4]
   22a0e:	2300      	movs	r3, #0
   22a10:	f88d 3005 	strb.w	r3, [sp, #5]
   22a14:	f88d 3006 	strb.w	r3, [sp, #6]
   22a18:	f88d 3007 	strb.w	r3, [sp, #7]
   22a1c:	9801      	ldr	r0, [sp, #4]
   22a1e:	f8cc 0010 	str.w	r0, [ip, #16]
   22a22:	2300      	movs	r3, #0
   22a24:	4904      	ldr	r1, [pc, #16]	; (22a38 <k_sys_fatal_error_handler+0x74>)
   22a26:	4660      	mov	r0, ip
   22a28:	f006 fbd7 	bl	291da <z_log_msg_finalize>
		sys_arch_reboot(0);
   22a2c:	2000      	movs	r0, #0
   22a2e:	f007 f910 	bl	29c52 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   22a32:	bf00      	nop
   22a34:	00034560 	.word	0x00034560
   22a38:	00031490 	.word	0x00031490

00022a3c <rand_prio_low_vector_get_blocking>:
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
	return ret >= 0 ? ret : 0;
}

static void rand_prio_low_vector_get_blocking(uint8_t *p_buff, uint8_t length)
{
   22a3c:	b510      	push	{r4, lr}
   22a3e:	4603      	mov	r3, r0
   22a40:	460a      	mov	r2, r1

static inline int z_impl_entropy_get_entropy(const struct device *dev,
					     uint8_t *buffer,
					     uint16_t length)
{
	const struct entropy_driver_api *api =
   22a42:	4803      	ldr	r0, [pc, #12]	; (22a50 <rand_prio_low_vector_get_blocking+0x14>)
   22a44:	6881      	ldr	r1, [r0, #8]
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   22a46:	680c      	ldr	r4, [r1, #0]
   22a48:	4619      	mov	r1, r3
   22a4a:	47a0      	blx	r4
	int err = entropy_get_entropy(entropy_source, p_buff, length);

	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
	(void) err;
}
   22a4c:	bd10      	pop	{r4, pc}
   22a4e:	bf00      	nop
   22a50:	0003115c 	.word	0x0003115c

00022a54 <sdc_assertion_handler>:
{
   22a54:	b590      	push	{r4, r7, lr}
   22a56:	b083      	sub	sp, #12
   22a58:	af00      	add	r7, sp, #0
	LOG_ERR("SoftDevice Controller ASSERT: %s, %d", file, line);
   22a5a:	466c      	mov	r4, sp
   22a5c:	2300      	movs	r3, #0
   22a5e:	713b      	strb	r3, [r7, #4]
   22a60:	2302      	movs	r3, #2
   22a62:	717b      	strb	r3, [r7, #5]
   22a64:	b08a      	sub	sp, #40	; 0x28
   22a66:	46ec      	mov	ip, sp
   22a68:	f11c 0210 	adds.w	r2, ip, #16
   22a6c:	d01b      	beq.n	22aa6 <sdc_assertion_handler+0x52>
   22a6e:	f04f 0e12 	mov.w	lr, #18
   22a72:	b12a      	cbz	r2, 22a80 <sdc_assertion_handler+0x2c>
   22a74:	f1be 0f04 	cmp.w	lr, #4
   22a78:	dd02      	ble.n	22a80 <sdc_assertion_handler+0x2c>
   22a7a:	4b2b      	ldr	r3, [pc, #172]	; (22b28 <sdc_assertion_handler+0xd4>)
   22a7c:	f8cc 3014 	str.w	r3, [ip, #20]
   22a80:	2300      	movs	r3, #0
   22a82:	703b      	strb	r3, [r7, #0]
   22a84:	2302      	movs	r3, #2
   22a86:	707b      	strb	r3, [r7, #1]
   22a88:	b1d2      	cbz	r2, 22ac0 <sdc_assertion_handler+0x6c>
   22a8a:	4673      	mov	r3, lr
   22a8c:	f1be 0f08 	cmp.w	lr, #8
   22a90:	dd01      	ble.n	22a96 <sdc_assertion_handler+0x42>
   22a92:	f8cc 0018 	str.w	r0, [ip, #24]
   22a96:	2b0c      	cmp	r3, #12
   22a98:	dd01      	ble.n	22a9e <sdc_assertion_handler+0x4a>
   22a9a:	f8cc 101c 	str.w	r1, [ip, #28]
   22a9e:	f10c 0320 	add.w	r3, ip, #32
   22aa2:	2100      	movs	r1, #0
   22aa4:	e00a      	b.n	22abc <sdc_assertion_handler+0x68>
   22aa6:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
   22aaa:	e7e2      	b.n	22a72 <sdc_assertion_handler+0x1e>
   22aac:	f101 0008 	add.w	r0, r1, #8
   22ab0:	4438      	add	r0, r7
   22ab2:	f810 0c08 	ldrb.w	r0, [r0, #-8]
   22ab6:	f803 0b01 	strb.w	r0, [r3], #1
   22aba:	3101      	adds	r1, #1
   22abc:	2901      	cmp	r1, #1
   22abe:	d9f5      	bls.n	22aac <sdc_assertion_handler+0x58>
   22ac0:	f1be 0f11 	cmp.w	lr, #17
   22ac4:	dd2d      	ble.n	22b22 <sdc_assertion_handler+0xce>
   22ac6:	2312      	movs	r3, #18
   22ac8:	b14a      	cbz	r2, 22ade <sdc_assertion_handler+0x8a>
   22aca:	2104      	movs	r1, #4
   22acc:	7139      	strb	r1, [r7, #4]
   22ace:	2100      	movs	r1, #0
   22ad0:	7179      	strb	r1, [r7, #5]
   22ad2:	71b9      	strb	r1, [r7, #6]
   22ad4:	2101      	movs	r1, #1
   22ad6:	71f9      	strb	r1, [r7, #7]
   22ad8:	6878      	ldr	r0, [r7, #4]
   22ada:	f8cc 0010 	str.w	r0, [ip, #16]
   22ade:	2100      	movs	r1, #0
   22ae0:	f36f 0100 	bfc	r1, #0, #1
   22ae4:	f36f 0141 	bfc	r1, #1, #1
   22ae8:	f36f 0182 	bfc	r1, #2, #1
   22aec:	f36f 01c5 	bfc	r1, #3, #3
   22af0:	2001      	movs	r0, #1
   22af2:	f360 1188 	bfi	r1, r0, #6, #3
   22af6:	f3c3 0309 	ubfx	r3, r3, #0, #10
   22afa:	f363 2152 	bfi	r1, r3, #9, #10
   22afe:	f36f 41de 	bfc	r1, #19, #12
   22b02:	f36f 71df 	bfc	r1, #31, #1
   22b06:	2300      	movs	r3, #0
   22b08:	4808      	ldr	r0, [pc, #32]	; (22b2c <sdc_assertion_handler+0xd8>)
   22b0a:	f006 fb7e 	bl	2920a <z_impl_z_log_msg_static_create>
   22b0e:	46a5      	mov	sp, r4
	k_oops();
   22b10:	4040      	eors	r0, r0
   22b12:	f380 8811 	msr	BASEPRI, r0
   22b16:	f04f 0003 	mov.w	r0, #3
   22b1a:	df02      	svc	2
}
   22b1c:	370c      	adds	r7, #12
   22b1e:	46bd      	mov	sp, r7
   22b20:	bd90      	pop	{r4, r7, pc}
	LOG_ERR("SoftDevice Controller ASSERT: %s, %d", file, line);
   22b22:	f06f 031b 	mvn.w	r3, #27
   22b26:	e7cf      	b.n	22ac8 <sdc_assertion_handler+0x74>
   22b28:	00034580 	.word	0x00034580
   22b2c:	00031458 	.word	0x00031458

00022b30 <event_packet_process>:
{
   22b30:	b570      	push	{r4, r5, r6, lr}
   22b32:	b082      	sub	sp, #8
   22b34:	4604      	mov	r4, r0
	bool discardable = event_packet_is_discardable(hci_buf);
   22b36:	f00b fbfb 	bl	2e330 <event_packet_is_discardable>
   22b3a:	4603      	mov	r3, r0
	if (hdr->evt == BT_HCI_EVT_LE_META_EVENT) {
   22b3c:	7820      	ldrb	r0, [r4, #0]
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   22b3e:	461d      	mov	r5, r3
   22b40:	b18b      	cbz	r3, 22b66 <event_packet_process+0x36>
   22b42:	2200      	movs	r2, #0
   22b44:	2300      	movs	r3, #0
   22b46:	4629      	mov	r1, r5
   22b48:	f7f3 fd16 	bl	16578 <bt_buf_get_evt>
	if (!evt_buf) {
   22b4c:	4606      	mov	r6, r0
   22b4e:	b178      	cbz	r0, 22b70 <event_packet_process+0x40>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   22b50:	7862      	ldrb	r2, [r4, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   22b52:	3202      	adds	r2, #2
   22b54:	4621      	mov	r1, r4
   22b56:	300c      	adds	r0, #12
   22b58:	f009 fd98 	bl	2c68c <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   22b5c:	4630      	mov	r0, r6
   22b5e:	f7f5 fd65 	bl	1862c <bt_recv>
}
   22b62:	b002      	add	sp, #8
   22b64:	bd70      	pop	{r4, r5, r6, pc}
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   22b66:	f04f 32ff 	mov.w	r2, #4294967295
   22b6a:	f04f 33ff 	mov.w	r3, #4294967295
   22b6e:	e7ea      	b.n	22b46 <event_packet_process+0x16>
		if (discardable) {
   22b70:	2d00      	cmp	r5, #0
   22b72:	d1f6      	bne.n	22b62 <event_packet_process+0x32>
		LOG_ERR("No event buffer available");
   22b74:	2006      	movs	r0, #6
   22b76:	f7f1 f8c7 	bl	13d08 <z_log_msg_alloc>
   22b7a:	2200      	movs	r2, #0
   22b7c:	f36f 0200 	bfc	r2, #0, #1
   22b80:	f36f 0241 	bfc	r2, #1, #1
   22b84:	f36f 0282 	bfc	r2, #2, #1
   22b88:	f36f 02c5 	bfc	r2, #3, #3
   22b8c:	2301      	movs	r3, #1
   22b8e:	f363 1288 	bfi	r2, r3, #6, #3
   22b92:	2308      	movs	r3, #8
   22b94:	f363 2252 	bfi	r2, r3, #9, #10
   22b98:	f36f 42de 	bfc	r2, #19, #12
   22b9c:	f36f 72df 	bfc	r2, #31, #1
   22ba0:	4604      	mov	r4, r0
   22ba2:	b188      	cbz	r0, 22bc8 <event_packet_process+0x98>
   22ba4:	f110 0310 	adds.w	r3, r0, #16
   22ba8:	d001      	beq.n	22bae <event_packet_process+0x7e>
   22baa:	490a      	ldr	r1, [pc, #40]	; (22bd4 <event_packet_process+0xa4>)
   22bac:	6141      	str	r1, [r0, #20]
   22bae:	b15b      	cbz	r3, 22bc8 <event_packet_process+0x98>
   22bb0:	2302      	movs	r3, #2
   22bb2:	f88d 3004 	strb.w	r3, [sp, #4]
   22bb6:	2300      	movs	r3, #0
   22bb8:	f88d 3005 	strb.w	r3, [sp, #5]
   22bbc:	f88d 3006 	strb.w	r3, [sp, #6]
   22bc0:	f88d 3007 	strb.w	r3, [sp, #7]
   22bc4:	9801      	ldr	r0, [sp, #4]
   22bc6:	6120      	str	r0, [r4, #16]
   22bc8:	2300      	movs	r3, #0
   22bca:	4903      	ldr	r1, [pc, #12]	; (22bd8 <event_packet_process+0xa8>)
   22bcc:	4620      	mov	r0, r4
   22bce:	f006 fb04 	bl	291da <z_log_msg_finalize>
		return;
   22bd2:	e7c6      	b.n	22b62 <event_packet_process+0x32>
   22bd4:	000345a8 	.word	0x000345a8
   22bd8:	00031458 	.word	0x00031458

00022bdc <data_packet_process>:
{
   22bdc:	b530      	push	{r4, r5, lr}
   22bde:	b083      	sub	sp, #12
   22be0:	4604      	mov	r4, r0
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   22be2:	f04f 32ff 	mov.w	r2, #4294967295
   22be6:	f04f 33ff 	mov.w	r3, #4294967295
   22bea:	2003      	movs	r0, #3
   22bec:	f7f3 fc9a 	bl	16524 <bt_buf_get_rx>
	if (!data_buf) {
   22bf0:	b158      	cbz	r0, 22c0a <data_packet_process+0x2e>
   22bf2:	4605      	mov	r5, r0
	len = sys_le16_to_cpu(hdr->len);
   22bf4:	8862      	ldrh	r2, [r4, #2]
   22bf6:	3204      	adds	r2, #4
   22bf8:	4621      	mov	r1, r4
   22bfa:	300c      	adds	r0, #12
   22bfc:	f009 fd46 	bl	2c68c <net_buf_simple_add_mem>
	bt_recv(data_buf);
   22c00:	4628      	mov	r0, r5
   22c02:	f7f5 fd13 	bl	1862c <bt_recv>
}
   22c06:	b003      	add	sp, #12
   22c08:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("No data buffer available");
   22c0a:	2006      	movs	r0, #6
   22c0c:	f7f1 f87c 	bl	13d08 <z_log_msg_alloc>
   22c10:	2200      	movs	r2, #0
   22c12:	f36f 0200 	bfc	r2, #0, #1
   22c16:	f36f 0241 	bfc	r2, #1, #1
   22c1a:	f36f 0282 	bfc	r2, #2, #1
   22c1e:	f36f 02c5 	bfc	r2, #3, #3
   22c22:	2301      	movs	r3, #1
   22c24:	f363 1288 	bfi	r2, r3, #6, #3
   22c28:	2308      	movs	r3, #8
   22c2a:	f363 2252 	bfi	r2, r3, #9, #10
   22c2e:	f36f 42de 	bfc	r2, #19, #12
   22c32:	f36f 72df 	bfc	r2, #31, #1
   22c36:	4604      	mov	r4, r0
   22c38:	b188      	cbz	r0, 22c5e <data_packet_process+0x82>
   22c3a:	f110 0310 	adds.w	r3, r0, #16
   22c3e:	d001      	beq.n	22c44 <data_packet_process+0x68>
   22c40:	490a      	ldr	r1, [pc, #40]	; (22c6c <data_packet_process+0x90>)
   22c42:	6141      	str	r1, [r0, #20]
   22c44:	b15b      	cbz	r3, 22c5e <data_packet_process+0x82>
   22c46:	2302      	movs	r3, #2
   22c48:	f88d 3004 	strb.w	r3, [sp, #4]
   22c4c:	2300      	movs	r3, #0
   22c4e:	f88d 3005 	strb.w	r3, [sp, #5]
   22c52:	f88d 3006 	strb.w	r3, [sp, #6]
   22c56:	f88d 3007 	strb.w	r3, [sp, #7]
   22c5a:	9801      	ldr	r0, [sp, #4]
   22c5c:	6120      	str	r0, [r4, #16]
   22c5e:	2300      	movs	r3, #0
   22c60:	4903      	ldr	r1, [pc, #12]	; (22c70 <data_packet_process+0x94>)
   22c62:	4620      	mov	r0, r4
   22c64:	f006 fab9 	bl	291da <z_log_msg_finalize>
		return;
   22c68:	e7cd      	b.n	22c06 <data_packet_process+0x2a>
   22c6a:	bf00      	nop
   22c6c:	000345c4 	.word	0x000345c4
   22c70:	00031458 	.word	0x00031458

00022c74 <fetch_and_process_hci_msg>:
{
   22c74:	b530      	push	{r4, r5, lr}
   22c76:	b083      	sub	sp, #12
   22c78:	4604      	mov	r4, r0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   22c7a:	f04f 30ff 	mov.w	r0, #4294967295
   22c7e:	f04f 31ff 	mov.w	r1, #4294967295
   22c82:	f7ff fe8d 	bl	229a0 <multithreading_lock_acquire>
	if (!errcode) {
   22c86:	b110      	cbz	r0, 22c8e <fetch_and_process_hci_msg+0x1a>
		return false;
   22c88:	2000      	movs	r0, #0
}
   22c8a:	b003      	add	sp, #12
   22c8c:	bd30      	pop	{r4, r5, pc}
		errcode = hci_internal_msg_get(p_hci_buffer, &msg_type);
   22c8e:	f10d 0107 	add.w	r1, sp, #7
   22c92:	4620      	mov	r0, r4
   22c94:	f000 fb44 	bl	23320 <hci_internal_msg_get>
   22c98:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   22c9a:	f7ff fe8b 	bl	229b4 <multithreading_lock_release>
	if (errcode) {
   22c9e:	2d00      	cmp	r5, #0
   22ca0:	d1f2      	bne.n	22c88 <fetch_and_process_hci_msg+0x14>
	if (msg_type == SDC_HCI_MSG_TYPE_EVT) {
   22ca2:	f89d 5007 	ldrb.w	r5, [sp, #7]
   22ca6:	2d04      	cmp	r5, #4
   22ca8:	d033      	beq.n	22d12 <fetch_and_process_hci_msg+0x9e>
	} else if (msg_type == SDC_HCI_MSG_TYPE_DATA) {
   22caa:	2d02      	cmp	r5, #2
   22cac:	d036      	beq.n	22d1c <fetch_and_process_hci_msg+0xa8>
		LOG_ERR("Unexpected msg_type: %u. This if-else needs a new branch", msg_type);
   22cae:	2008      	movs	r0, #8
   22cb0:	f7f1 f82a 	bl	13d08 <z_log_msg_alloc>
   22cb4:	2200      	movs	r2, #0
   22cb6:	f36f 0200 	bfc	r2, #0, #1
   22cba:	f36f 0241 	bfc	r2, #1, #1
   22cbe:	f36f 0282 	bfc	r2, #2, #1
   22cc2:	f36f 02c5 	bfc	r2, #3, #3
   22cc6:	2301      	movs	r3, #1
   22cc8:	f363 1288 	bfi	r2, r3, #6, #3
   22ccc:	230c      	movs	r3, #12
   22cce:	f363 2252 	bfi	r2, r3, #9, #10
   22cd2:	f36f 42de 	bfc	r2, #19, #12
   22cd6:	f36f 72df 	bfc	r2, #31, #1
   22cda:	4604      	mov	r4, r0
   22cdc:	b190      	cbz	r0, 22d04 <fetch_and_process_hci_msg+0x90>
   22cde:	f110 0310 	adds.w	r3, r0, #16
   22ce2:	d002      	beq.n	22cea <fetch_and_process_hci_msg+0x76>
   22ce4:	4910      	ldr	r1, [pc, #64]	; (22d28 <fetch_and_process_hci_msg+0xb4>)
   22ce6:	6141      	str	r1, [r0, #20]
   22ce8:	6185      	str	r5, [r0, #24]
   22cea:	b15b      	cbz	r3, 22d04 <fetch_and_process_hci_msg+0x90>
   22cec:	2303      	movs	r3, #3
   22cee:	f88d 3000 	strb.w	r3, [sp]
   22cf2:	2300      	movs	r3, #0
   22cf4:	f88d 3001 	strb.w	r3, [sp, #1]
   22cf8:	f88d 3002 	strb.w	r3, [sp, #2]
   22cfc:	f88d 3003 	strb.w	r3, [sp, #3]
   22d00:	9800      	ldr	r0, [sp, #0]
   22d02:	6120      	str	r0, [r4, #16]
   22d04:	2300      	movs	r3, #0
   22d06:	4909      	ldr	r1, [pc, #36]	; (22d2c <fetch_and_process_hci_msg+0xb8>)
   22d08:	4620      	mov	r0, r4
   22d0a:	f006 fa66 	bl	291da <z_log_msg_finalize>
	return true;
   22d0e:	2001      	movs	r0, #1
   22d10:	e7bb      	b.n	22c8a <fetch_and_process_hci_msg+0x16>
		event_packet_process(p_hci_buffer);
   22d12:	4620      	mov	r0, r4
   22d14:	f7ff ff0c 	bl	22b30 <event_packet_process>
	return true;
   22d18:	2001      	movs	r0, #1
   22d1a:	e7b6      	b.n	22c8a <fetch_and_process_hci_msg+0x16>
		data_packet_process(p_hci_buffer);
   22d1c:	4620      	mov	r0, r4
   22d1e:	f7ff ff5d 	bl	22bdc <data_packet_process>
	return true;
   22d22:	2001      	movs	r0, #1
   22d24:	e7b1      	b.n	22c8a <fetch_and_process_hci_msg+0x16>
   22d26:	bf00      	nop
   22d28:	000345e0 	.word	0x000345e0
   22d2c:	00031458 	.word	0x00031458

00022d30 <receive_signal_raise>:
{
   22d30:	b508      	push	{r3, lr}
 *
 * @return N/A
 */
static inline int mpsl_work_submit(struct k_work *work)
{
	return k_work_submit_to_queue(&mpsl_work_q, work);
   22d32:	4902      	ldr	r1, [pc, #8]	; (22d3c <receive_signal_raise+0xc>)
   22d34:	4802      	ldr	r0, [pc, #8]	; (22d40 <receive_signal_raise+0x10>)
   22d36:	f00d fcb7 	bl	306a8 <k_work_submit_to_queue>
}
   22d3a:	bd08      	pop	{r3, pc}
   22d3c:	20008a8c 	.word	0x20008a8c
   22d40:	200075c0 	.word	0x200075c0

00022d44 <acl_handle>:
{
   22d44:	b538      	push	{r3, r4, r5, lr}
   22d46:	4604      	mov	r4, r0
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   22d48:	f04f 30ff 	mov.w	r0, #4294967295
   22d4c:	f04f 31ff 	mov.w	r1, #4294967295
   22d50:	f7ff fe26 	bl	229a0 <multithreading_lock_acquire>
	if (!errcode) {
   22d54:	4605      	mov	r5, r0
   22d56:	b108      	cbz	r0, 22d5c <acl_handle+0x18>
}
   22d58:	4628      	mov	r0, r5
   22d5a:	bd38      	pop	{r3, r4, r5, pc}
		errcode = sdc_hci_data_put(acl->data);
   22d5c:	68e0      	ldr	r0, [r4, #12]
   22d5e:	f7ea f922 	bl	cfa6 <sdc_hci_data_put>
   22d62:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   22d64:	f7ff fe26 	bl	229b4 <multithreading_lock_release>
		if (errcode) {
   22d68:	2d00      	cmp	r5, #0
   22d6a:	d0f5      	beq.n	22d58 <acl_handle+0x14>
   22d6c:	4902      	ldr	r1, [pc, #8]	; (22d78 <acl_handle+0x34>)
   22d6e:	4803      	ldr	r0, [pc, #12]	; (22d7c <acl_handle+0x38>)
   22d70:	f00d fc9a 	bl	306a8 <k_work_submit_to_queue>
}
   22d74:	e7f0      	b.n	22d58 <acl_handle+0x14>
   22d76:	bf00      	nop
   22d78:	20008a8c 	.word	0x20008a8c
   22d7c:	200075c0 	.word	0x200075c0

00022d80 <cmd_handle>:
{
   22d80:	b538      	push	{r3, r4, r5, lr}
   22d82:	4605      	mov	r5, r0
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   22d84:	f04f 30ff 	mov.w	r0, #4294967295
   22d88:	f04f 31ff 	mov.w	r1, #4294967295
   22d8c:	f7ff fe08 	bl	229a0 <multithreading_lock_acquire>
	if (!errcode) {
   22d90:	4604      	mov	r4, r0
   22d92:	b108      	cbz	r0, 22d98 <cmd_handle+0x18>
}
   22d94:	4620      	mov	r0, r4
   22d96:	bd38      	pop	{r3, r4, r5, pc}
		errcode = hci_internal_cmd_put(cmd->data);
   22d98:	68e8      	ldr	r0, [r5, #12]
   22d9a:	f000 faad 	bl	232f8 <hci_internal_cmd_put>
   22d9e:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   22da0:	f7ff fe08 	bl	229b4 <multithreading_lock_release>
	if (errcode) {
   22da4:	2c00      	cmp	r4, #0
   22da6:	d1f5      	bne.n	22d94 <cmd_handle+0x14>
   22da8:	4902      	ldr	r1, [pc, #8]	; (22db4 <cmd_handle+0x34>)
   22daa:	4803      	ldr	r0, [pc, #12]	; (22db8 <cmd_handle+0x38>)
   22dac:	f00d fc7c 	bl	306a8 <k_work_submit_to_queue>
	return 0;
   22db0:	e7f0      	b.n	22d94 <cmd_handle+0x14>
   22db2:	bf00      	nop
   22db4:	20008a8c 	.word	0x20008a8c
   22db8:	200075c0 	.word	0x200075c0

00022dbc <rand_prio_high_vector_get>:
{
   22dbc:	b510      	push	{r4, lr}
static inline int entropy_get_entropy_isr(const struct device *dev,
					  uint8_t *buffer,
					  uint16_t length,
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
   22dbe:	4b08      	ldr	r3, [pc, #32]	; (22de0 <rand_prio_high_vector_get+0x24>)
   22dc0:	689b      	ldr	r3, [r3, #8]
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   22dc2:	685c      	ldr	r4, [r3, #4]
   22dc4:	b144      	cbz	r4, 22dd8 <rand_prio_high_vector_get+0x1c>
   22dc6:	460a      	mov	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   22dc8:	2300      	movs	r3, #0
   22dca:	4601      	mov	r1, r0
   22dcc:	4804      	ldr	r0, [pc, #16]	; (22de0 <rand_prio_high_vector_get+0x24>)
   22dce:	47a0      	blx	r4
	return ret >= 0 ? ret : 0;
   22dd0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   22dd4:	b2c0      	uxtb	r0, r0
   22dd6:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   22dd8:	f06f 0085 	mvn.w	r0, #133	; 0x85
   22ddc:	e7f8      	b.n	22dd0 <rand_prio_high_vector_get+0x14>
   22dde:	bf00      	nop
   22de0:	0003115c 	.word	0x0003115c

00022de4 <rand_prio_low_vector_get>:
{
   22de4:	b510      	push	{r4, lr}
	const struct entropy_driver_api *api =
   22de6:	4b08      	ldr	r3, [pc, #32]	; (22e08 <rand_prio_low_vector_get+0x24>)
   22de8:	689b      	ldr	r3, [r3, #8]
	if (unlikely(!api->get_entropy_isr)) {
   22dea:	685c      	ldr	r4, [r3, #4]
   22dec:	b144      	cbz	r4, 22e00 <rand_prio_low_vector_get+0x1c>
   22dee:	460a      	mov	r2, r1
	return api->get_entropy_isr(dev, buffer, length, flags);
   22df0:	2300      	movs	r3, #0
   22df2:	4601      	mov	r1, r0
   22df4:	4804      	ldr	r0, [pc, #16]	; (22e08 <rand_prio_low_vector_get+0x24>)
   22df6:	47a0      	blx	r4
	return ret >= 0 ? ret : 0;
   22df8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   22dfc:	b2c0      	uxtb	r0, r0
   22dfe:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   22e00:	f06f 0085 	mvn.w	r0, #133	; 0x85
   22e04:	e7f8      	b.n	22df8 <rand_prio_low_vector_get+0x14>
   22e06:	bf00      	nop
   22e08:	0003115c 	.word	0x0003115c

00022e0c <hci_driver_open>:

	return 0;
}

static int hci_driver_open(void)
{
   22e0c:	b590      	push	{r4, r7, lr}
   22e0e:	b08b      	sub	sp, #44	; 0x2c
   22e10:	af00      	add	r7, sp, #0
	LOG_DBG("Open");

	k_work_init(&receive_work, receive_work_handler);
   22e12:	4974      	ldr	r1, [pc, #464]	; (22fe4 <hci_driver_open+0x1d8>)
   22e14:	4874      	ldr	r0, [pc, #464]	; (22fe8 <hci_driver_open+0x1dc>)
   22e16:	f00d fc2b 	bl	30670 <k_work_init>

	if (IS_ENABLED(CONFIG_BT_CTLR_ECDH)) {
		hci_ecdh_init();
   22e1a:	f000 fc27 	bl	2366c <hci_ecdh_init>
	}

	uint8_t build_revision[SDC_BUILD_REVISION_SIZE];

	sdc_build_revision_get(build_revision);
   22e1e:	f107 0014 	add.w	r0, r7, #20
   22e22:	f7dd fd45 	bl	8b0 <sdc_build_revision_get>
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   22e26:	466c      	mov	r4, sp
   22e28:	2300      	movs	r3, #0
   22e2a:	713b      	strb	r3, [r7, #4]
   22e2c:	2302      	movs	r3, #2
   22e2e:	717b      	strb	r3, [r7, #5]
   22e30:	b088      	sub	sp, #32
   22e32:	46ec      	mov	ip, sp
   22e34:	f11c 0210 	adds.w	r2, ip, #16
   22e38:	d014      	beq.n	22e64 <hci_driver_open+0x58>
   22e3a:	200e      	movs	r0, #14
   22e3c:	b122      	cbz	r2, 22e48 <hci_driver_open+0x3c>
   22e3e:	2804      	cmp	r0, #4
   22e40:	dd02      	ble.n	22e48 <hci_driver_open+0x3c>
   22e42:	4b6a      	ldr	r3, [pc, #424]	; (22fec <hci_driver_open+0x1e0>)
   22e44:	f8cc 3014 	str.w	r3, [ip, #20]
   22e48:	2300      	movs	r3, #0
   22e4a:	703b      	strb	r3, [r7, #0]
   22e4c:	2302      	movs	r3, #2
   22e4e:	707b      	strb	r3, [r7, #1]
   22e50:	b1aa      	cbz	r2, 22e7e <hci_driver_open+0x72>
   22e52:	2808      	cmp	r0, #8
   22e54:	dd02      	ble.n	22e5c <hci_driver_open+0x50>
   22e56:	4b66      	ldr	r3, [pc, #408]	; (22ff0 <hci_driver_open+0x1e4>)
   22e58:	f8cc 3018 	str.w	r3, [ip, #24]
   22e5c:	f10c 031c 	add.w	r3, ip, #28
   22e60:	2100      	movs	r1, #0
   22e62:	e00a      	b.n	22e7a <hci_driver_open+0x6e>
   22e64:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   22e68:	e7e8      	b.n	22e3c <hci_driver_open+0x30>
   22e6a:	f101 0e28 	add.w	lr, r1, #40	; 0x28
   22e6e:	44be      	add	lr, r7
   22e70:	f81e ec28 	ldrb.w	lr, [lr, #-40]
   22e74:	f803 eb01 	strb.w	lr, [r3], #1
   22e78:	3101      	adds	r1, #1
   22e7a:	2901      	cmp	r1, #1
   22e7c:	d9f5      	bls.n	22e6a <hci_driver_open+0x5e>
   22e7e:	280d      	cmp	r0, #13
   22e80:	dd42      	ble.n	22f08 <hci_driver_open+0xfc>
   22e82:	230e      	movs	r3, #14
   22e84:	b14a      	cbz	r2, 22e9a <hci_driver_open+0x8e>
   22e86:	2103      	movs	r1, #3
   22e88:	7139      	strb	r1, [r7, #4]
   22e8a:	2100      	movs	r1, #0
   22e8c:	7179      	strb	r1, [r7, #5]
   22e8e:	71b9      	strb	r1, [r7, #6]
   22e90:	2101      	movs	r1, #1
   22e92:	71f9      	strb	r1, [r7, #7]
   22e94:	6878      	ldr	r0, [r7, #4]
   22e96:	f8cc 0010 	str.w	r0, [ip, #16]
   22e9a:	2100      	movs	r1, #0
   22e9c:	f36f 0100 	bfc	r1, #0, #1
   22ea0:	f36f 0141 	bfc	r1, #1, #1
   22ea4:	f36f 0182 	bfc	r1, #2, #1
   22ea8:	f36f 01c5 	bfc	r1, #3, #3
   22eac:	2003      	movs	r0, #3
   22eae:	f360 1188 	bfi	r1, r0, #6, #3
   22eb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
   22eb6:	f363 2152 	bfi	r1, r3, #9, #10
   22eba:	2314      	movs	r3, #20
   22ebc:	f363 41de 	bfi	r1, r3, #19, #12
   22ec0:	f36f 71df 	bfc	r1, #31, #1
   22ec4:	18fb      	adds	r3, r7, r3
   22ec6:	484b      	ldr	r0, [pc, #300]	; (22ff4 <hci_driver_open+0x1e8>)
   22ec8:	f006 f99f 	bl	2920a <z_impl_z_log_msg_static_create>
   22ecc:	46a5      	mov	sp, r4
   22ece:	484a      	ldr	r0, [pc, #296]	; (22ff8 <hci_driver_open+0x1ec>)
   22ed0:	f00d f8e9 	bl	300a6 <z_device_is_ready>
			"SoftDevice Controller build revision: ");

	int err;

	if (!device_is_ready(entropy_source)) {
   22ed4:	b1d8      	cbz	r0, 22f0e <hci_driver_open+0x102>
		LOG_ERR("Entropy source device not ready");
		return -ENODEV;
	}

	sdc_rand_source_t rand_functions = {
   22ed6:	4a49      	ldr	r2, [pc, #292]	; (22ffc <hci_driver_open+0x1f0>)
   22ed8:	f107 0308 	add.w	r3, r7, #8
   22edc:	ca07      	ldmia	r2, {r0, r1, r2}
   22ede:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		.rand_prio_low_get = rand_prio_low_vector_get,
		.rand_prio_high_get = rand_prio_high_vector_get,
		.rand_poll = rand_prio_low_vector_get_blocking
	};

	err = sdc_rand_source_register(&rand_functions);
   22ee2:	4618      	mov	r0, r3
   22ee4:	f7dd fe7a 	bl	bdc <sdc_rand_source_register>
	if (err) {
   22ee8:	4604      	mov	r4, r0
   22eea:	2800      	cmp	r0, #0
   22eec:	d13d      	bne.n	22f6a <hci_driver_open+0x15e>
		LOG_ERR("Failed to register rand source (%d)", err);
		return -EINVAL;
	}

	err = MULTITHREADING_LOCK_ACQUIRE();
   22eee:	f04f 30ff 	mov.w	r0, #4294967295
   22ef2:	f04f 31ff 	mov.w	r1, #4294967295
   22ef6:	f7ff fd53 	bl	229a0 <multithreading_lock_acquire>
	if (err) {
   22efa:	4604      	mov	r4, r0
   22efc:	2800      	cmp	r0, #0
   22efe:	d064      	beq.n	22fca <hci_driver_open+0x1be>
	}

	MULTITHREADING_LOCK_RELEASE();

	return 0;
}
   22f00:	4620      	mov	r0, r4
   22f02:	372c      	adds	r7, #44	; 0x2c
   22f04:	46bd      	mov	sp, r7
   22f06:	bd90      	pop	{r4, r7, pc}
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   22f08:	f06f 031b 	mvn.w	r3, #27
   22f0c:	e7ba      	b.n	22e84 <hci_driver_open+0x78>
		LOG_ERR("Entropy source device not ready");
   22f0e:	2006      	movs	r0, #6
   22f10:	f7f0 fefa 	bl	13d08 <z_log_msg_alloc>
   22f14:	2200      	movs	r2, #0
   22f16:	f36f 0200 	bfc	r2, #0, #1
   22f1a:	f36f 0241 	bfc	r2, #1, #1
   22f1e:	f36f 0282 	bfc	r2, #2, #1
   22f22:	f36f 02c5 	bfc	r2, #3, #3
   22f26:	2301      	movs	r3, #1
   22f28:	f363 1288 	bfi	r2, r3, #6, #3
   22f2c:	2308      	movs	r3, #8
   22f2e:	f363 2252 	bfi	r2, r3, #9, #10
   22f32:	f36f 42de 	bfc	r2, #19, #12
   22f36:	f36f 72df 	bfc	r2, #31, #1
   22f3a:	4604      	mov	r4, r0
   22f3c:	b168      	cbz	r0, 22f5a <hci_driver_open+0x14e>
   22f3e:	f110 0310 	adds.w	r3, r0, #16
   22f42:	d001      	beq.n	22f48 <hci_driver_open+0x13c>
   22f44:	492e      	ldr	r1, [pc, #184]	; (23000 <hci_driver_open+0x1f4>)
   22f46:	6141      	str	r1, [r0, #20]
   22f48:	b13b      	cbz	r3, 22f5a <hci_driver_open+0x14e>
   22f4a:	2302      	movs	r3, #2
   22f4c:	713b      	strb	r3, [r7, #4]
   22f4e:	2300      	movs	r3, #0
   22f50:	717b      	strb	r3, [r7, #5]
   22f52:	71bb      	strb	r3, [r7, #6]
   22f54:	71fb      	strb	r3, [r7, #7]
   22f56:	6878      	ldr	r0, [r7, #4]
   22f58:	6120      	str	r0, [r4, #16]
   22f5a:	2300      	movs	r3, #0
   22f5c:	4925      	ldr	r1, [pc, #148]	; (22ff4 <hci_driver_open+0x1e8>)
   22f5e:	4620      	mov	r0, r4
   22f60:	f006 f93b 	bl	291da <z_log_msg_finalize>
		return -ENODEV;
   22f64:	f06f 0412 	mvn.w	r4, #18
   22f68:	e7ca      	b.n	22f00 <hci_driver_open+0xf4>
		LOG_ERR("Failed to register rand source (%d)", err);
   22f6a:	2008      	movs	r0, #8
   22f6c:	f7f0 fecc 	bl	13d08 <z_log_msg_alloc>
   22f70:	2200      	movs	r2, #0
   22f72:	f36f 0200 	bfc	r2, #0, #1
   22f76:	f36f 0241 	bfc	r2, #1, #1
   22f7a:	f36f 0282 	bfc	r2, #2, #1
   22f7e:	f36f 02c5 	bfc	r2, #3, #3
   22f82:	2301      	movs	r3, #1
   22f84:	f363 1288 	bfi	r2, r3, #6, #3
   22f88:	230c      	movs	r3, #12
   22f8a:	f363 2252 	bfi	r2, r3, #9, #10
   22f8e:	f36f 42de 	bfc	r2, #19, #12
   22f92:	f36f 72df 	bfc	r2, #31, #1
   22f96:	4684      	mov	ip, r0
   22f98:	b178      	cbz	r0, 22fba <hci_driver_open+0x1ae>
   22f9a:	f110 0310 	adds.w	r3, r0, #16
   22f9e:	d002      	beq.n	22fa6 <hci_driver_open+0x19a>
   22fa0:	4918      	ldr	r1, [pc, #96]	; (23004 <hci_driver_open+0x1f8>)
   22fa2:	6141      	str	r1, [r0, #20]
   22fa4:	6184      	str	r4, [r0, #24]
   22fa6:	b143      	cbz	r3, 22fba <hci_driver_open+0x1ae>
   22fa8:	2303      	movs	r3, #3
   22faa:	713b      	strb	r3, [r7, #4]
   22fac:	2300      	movs	r3, #0
   22fae:	717b      	strb	r3, [r7, #5]
   22fb0:	71bb      	strb	r3, [r7, #6]
   22fb2:	71fb      	strb	r3, [r7, #7]
   22fb4:	6878      	ldr	r0, [r7, #4]
   22fb6:	f8cc 0010 	str.w	r0, [ip, #16]
   22fba:	2300      	movs	r3, #0
   22fbc:	490d      	ldr	r1, [pc, #52]	; (22ff4 <hci_driver_open+0x1e8>)
   22fbe:	4660      	mov	r0, ip
   22fc0:	f006 f90b 	bl	291da <z_log_msg_finalize>
		return -EINVAL;
   22fc4:	f06f 0415 	mvn.w	r4, #21
   22fc8:	e79a      	b.n	22f00 <hci_driver_open+0xf4>
	err = sdc_enable(receive_signal_raise, sdc_mempool);
   22fca:	490f      	ldr	r1, [pc, #60]	; (23008 <hci_driver_open+0x1fc>)
   22fcc:	480f      	ldr	r0, [pc, #60]	; (2300c <hci_driver_open+0x200>)
   22fce:	f7dd fcd7 	bl	980 <sdc_enable>
	if (err) {
   22fd2:	4604      	mov	r4, r0
   22fd4:	b910      	cbnz	r0, 22fdc <hci_driver_open+0x1d0>
	MULTITHREADING_LOCK_RELEASE();
   22fd6:	f7ff fced 	bl	229b4 <multithreading_lock_release>
	return 0;
   22fda:	e791      	b.n	22f00 <hci_driver_open+0xf4>
		MULTITHREADING_LOCK_RELEASE();
   22fdc:	f7ff fcea 	bl	229b4 <multithreading_lock_release>
		return err;
   22fe0:	e78e      	b.n	22f00 <hci_driver_open+0xf4>
   22fe2:	bf00      	nop
   22fe4:	0002e3f3 	.word	0x0002e3f3
   22fe8:	20008a8c 	.word	0x20008a8c
   22fec:	00031c9c 	.word	0x00031c9c
   22ff0:	0003461c 	.word	0x0003461c
   22ff4:	00031458 	.word	0x00031458
   22ff8:	0003115c 	.word	0x0003115c
   22ffc:	0003158c 	.word	0x0003158c
   23000:	00034644 	.word	0x00034644
   23004:	00034664 	.word	0x00034664
   23008:	200027d8 	.word	0x200027d8
   2300c:	00022d31 	.word	0x00022d31

00023010 <configure_memory_usage>:
{
   23010:	b510      	push	{r4, lr}
   23012:	b082      	sub	sp, #8
	cfg.central_count.count = SDC_CENTRAL_COUNT;
   23014:	2308      	movs	r3, #8
   23016:	f88d 3004 	strb.w	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   2301a:	aa01      	add	r2, sp, #4
   2301c:	2101      	movs	r1, #1
   2301e:	2000      	movs	r0, #0
   23020:	f7dd fc54 	bl	8cc <sdc_cfg_set>
	if (required_memory < 0) {
   23024:	1e04      	subs	r4, r0, #0
   23026:	db29      	blt.n	2307c <configure_memory_usage+0x6c>
	cfg.buffer_cfg.rx_packet_size = MAX_RX_PACKET_SIZE;
   23028:	23fb      	movs	r3, #251	; 0xfb
   2302a:	f88d 3005 	strb.w	r3, [sp, #5]
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   2302e:	f88d 3004 	strb.w	r3, [sp, #4]
	cfg.buffer_cfg.rx_packet_count = CONFIG_BT_CTLR_SDC_RX_PACKET_COUNT;
   23032:	2302      	movs	r3, #2
   23034:	f88d 3007 	strb.w	r3, [sp, #7]
	cfg.buffer_cfg.tx_packet_count = CONFIG_BT_CTLR_SDC_TX_PACKET_COUNT;
   23038:	2103      	movs	r1, #3
   2303a:	f88d 1006 	strb.w	r1, [sp, #6]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   2303e:	aa01      	add	r2, sp, #4
   23040:	2000      	movs	r0, #0
   23042:	f7dd fc43 	bl	8cc <sdc_cfg_set>
	if (required_memory < 0) {
   23046:	1e04      	subs	r4, r0, #0
   23048:	db18      	blt.n	2307c <configure_memory_usage+0x6c>
	cfg.event_length.event_length_us =
   2304a:	f641 534c 	movw	r3, #7500	; 0x1d4c
   2304e:	9301      	str	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   23050:	aa01      	add	r2, sp, #4
   23052:	2104      	movs	r1, #4
   23054:	2000      	movs	r0, #0
   23056:	f7dd fc39 	bl	8cc <sdc_cfg_set>
	if (required_memory < 0) {
   2305a:	1e04      	subs	r4, r0, #0
   2305c:	db0e      	blt.n	2307c <configure_memory_usage+0x6c>
		cfg.scan_buffer_cfg.count = CONFIG_BT_CTLR_SDC_SCAN_BUFFER_COUNT;
   2305e:	2303      	movs	r3, #3
   23060:	f88d 3004 	strb.w	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   23064:	aa01      	add	r2, sp, #4
   23066:	2106      	movs	r1, #6
   23068:	2000      	movs	r0, #0
   2306a:	f7dd fc2f 	bl	8cc <sdc_cfg_set>
		if (required_memory < 0) {
   2306e:	1e04      	subs	r4, r0, #0
   23070:	db04      	blt.n	2307c <configure_memory_usage+0x6c>
	if (required_memory > sizeof(sdc_mempool)) {
   23072:	f644 532e 	movw	r3, #19758	; 0x4d2e
   23076:	429c      	cmp	r4, r3
   23078:	d803      	bhi.n	23082 <configure_memory_usage+0x72>
	return 0;
   2307a:	2400      	movs	r4, #0
}
   2307c:	4620      	mov	r0, r4
   2307e:	b002      	add	sp, #8
   23080:	bd10      	pop	{r4, pc}
		LOG_ERR("Allocated memory too low: %u < %u",
   23082:	2008      	movs	r0, #8
   23084:	f7f0 fe40 	bl	13d08 <z_log_msg_alloc>
   23088:	2200      	movs	r2, #0
   2308a:	f36f 0200 	bfc	r2, #0, #1
   2308e:	f36f 0241 	bfc	r2, #1, #1
   23092:	f36f 0282 	bfc	r2, #2, #1
   23096:	f36f 02c5 	bfc	r2, #3, #3
   2309a:	2301      	movs	r3, #1
   2309c:	f363 1288 	bfi	r2, r3, #6, #3
   230a0:	2310      	movs	r3, #16
   230a2:	f363 2252 	bfi	r2, r3, #9, #10
   230a6:	f36f 42de 	bfc	r2, #19, #12
   230aa:	f36f 72df 	bfc	r2, #31, #1
   230ae:	4684      	mov	ip, r0
   230b0:	b1a8      	cbz	r0, 230de <configure_memory_usage+0xce>
   230b2:	18c3      	adds	r3, r0, r3
   230b4:	d005      	beq.n	230c2 <configure_memory_usage+0xb2>
   230b6:	4911      	ldr	r1, [pc, #68]	; (230fc <configure_memory_usage+0xec>)
   230b8:	6141      	str	r1, [r0, #20]
   230ba:	f644 512e 	movw	r1, #19758	; 0x4d2e
   230be:	6181      	str	r1, [r0, #24]
   230c0:	61c4      	str	r4, [r0, #28]
   230c2:	b163      	cbz	r3, 230de <configure_memory_usage+0xce>
   230c4:	2304      	movs	r3, #4
   230c6:	f88d 3000 	strb.w	r3, [sp]
   230ca:	2300      	movs	r3, #0
   230cc:	f88d 3001 	strb.w	r3, [sp, #1]
   230d0:	f88d 3002 	strb.w	r3, [sp, #2]
   230d4:	f88d 3003 	strb.w	r3, [sp, #3]
   230d8:	9800      	ldr	r0, [sp, #0]
   230da:	f8cc 0010 	str.w	r0, [ip, #16]
   230de:	2300      	movs	r3, #0
   230e0:	4907      	ldr	r1, [pc, #28]	; (23100 <configure_memory_usage+0xf0>)
   230e2:	4660      	mov	r0, ip
   230e4:	f006 f879 	bl	291da <z_log_msg_finalize>
		k_panic();
   230e8:	4040      	eors	r0, r0
   230ea:	f380 8811 	msr	BASEPRI, r0
   230ee:	f04f 0004 	mov.w	r0, #4
   230f2:	df02      	svc	2
		return -ENOMEM;
   230f4:	f06f 040b 	mvn.w	r4, #11
   230f8:	e7c0      	b.n	2307c <configure_memory_usage+0x6c>
   230fa:	bf00      	nop
   230fc:	00034688 	.word	0x00034688
   23100:	00031458 	.word	0x00031458

00023104 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
   23104:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
   23106:	4806      	ldr	r0, [pc, #24]	; (23120 <hci_driver_init+0x1c>)
   23108:	f7f5 faee 	bl	186e8 <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
   2310c:	4805      	ldr	r0, [pc, #20]	; (23124 <hci_driver_init+0x20>)
   2310e:	f7dd fc61 	bl	9d4 <sdc_init>

	err = configure_supported_features();
   23112:	f00b f954 	bl	2e3be <configure_supported_features>
	if (err) {
   23116:	b100      	cbz	r0, 2311a <hci_driver_init+0x16>
	if (err) {
		return err;
	}

	return err;
}
   23118:	bd08      	pop	{r3, pc}
	err = configure_memory_usage();
   2311a:	f7ff ff79 	bl	23010 <configure_memory_usage>
	if (err) {
   2311e:	e7fb      	b.n	23118 <hci_driver_init+0x14>
   23120:	000346d8 	.word	0x000346d8
   23124:	00022a55 	.word	0x00022a55

00023128 <hci_driver_receive_process>:
{
   23128:	b508      	push	{r3, lr}
	if (fetch_and_process_hci_msg(&hci_buf[0])) {
   2312a:	4805      	ldr	r0, [pc, #20]	; (23140 <hci_driver_receive_process+0x18>)
   2312c:	f7ff fda2 	bl	22c74 <fetch_and_process_hci_msg>
   23130:	b900      	cbnz	r0, 23134 <hci_driver_receive_process+0xc>
}
   23132:	bd08      	pop	{r3, pc}
   23134:	4903      	ldr	r1, [pc, #12]	; (23144 <hci_driver_receive_process+0x1c>)
   23136:	4804      	ldr	r0, [pc, #16]	; (23148 <hci_driver_receive_process+0x20>)
   23138:	f00d fab6 	bl	306a8 <k_work_submit_to_queue>
   2313c:	e7f9      	b.n	23132 <hci_driver_receive_process+0xa>
   2313e:	bf00      	nop
   23140:	2000898c 	.word	0x2000898c
   23144:	20008a8c 	.word	0x20008a8c
   23148:	200075c0 	.word	0x200075c0

0002314c <command_generates_command_complete_event>:

static hci_internal_user_cmd_handler_t user_cmd_handler;

static bool command_generates_command_complete_event(uint16_t hci_opcode)
{
	switch (hci_opcode) {
   2314c:	f242 0332 	movw	r3, #8242	; 0x2032
   23150:	4298      	cmp	r0, r3
   23152:	d04a      	beq.n	231ea <command_generates_command_complete_event+0x9e>
   23154:	d82d      	bhi.n	231b2 <command_generates_command_complete_event+0x66>
   23156:	f242 0326 	movw	r3, #8230	; 0x2026
   2315a:	4298      	cmp	r0, r3
   2315c:	d847      	bhi.n	231ee <command_generates_command_complete_event+0xa2>
   2315e:	f242 030d 	movw	r3, #8205	; 0x200d
   23162:	4298      	cmp	r0, r3
   23164:	d218      	bcs.n	23198 <command_generates_command_complete_event+0x4c>
   23166:	f240 4306 	movw	r3, #1030	; 0x406
   2316a:	4298      	cmp	r0, r3
   2316c:	d041      	beq.n	231f2 <command_generates_command_complete_event+0xa6>
   2316e:	f240 431d 	movw	r3, #1053	; 0x41d
   23172:	4298      	cmp	r0, r3
   23174:	d001      	beq.n	2317a <command_generates_command_complete_event+0x2e>
	case SDC_HCI_OPCODE_CMD_VS_WRITE_REMOTE_TX_POWER:
	case BT_HCI_OP_LE_P256_PUBLIC_KEY:
	case BT_HCI_OP_LE_GENERATE_DHKEY:
		return false;
	default:
		return true;
   23176:	2001      	movs	r0, #1
   23178:	4770      	bx	lr
	switch (hci_opcode) {
   2317a:	2000      	movs	r0, #0
   2317c:	4770      	bx	lr
   2317e:	f5a0 5001 	sub.w	r0, r0, #8256	; 0x2040
   23182:	382d      	subs	r0, #45	; 0x2d
   23184:	b280      	uxth	r0, r0
   23186:	4b1e      	ldr	r3, [pc, #120]	; (23200 <command_generates_command_complete_event+0xb4>)
   23188:	40c3      	lsrs	r3, r0
   2318a:	f013 0f01 	tst.w	r3, #1
   2318e:	d101      	bne.n	23194 <command_generates_command_complete_event+0x48>
		return true;
   23190:	2001      	movs	r0, #1
   23192:	4770      	bx	lr
	switch (hci_opcode) {
   23194:	2000      	movs	r0, #0
   23196:	4770      	bx	lr
   23198:	f5a0 5000 	sub.w	r0, r0, #8192	; 0x2000
   2319c:	380d      	subs	r0, #13
   2319e:	b280      	uxth	r0, r0
   231a0:	4b18      	ldr	r3, [pc, #96]	; (23204 <command_generates_command_complete_event+0xb8>)
   231a2:	40c3      	lsrs	r3, r0
   231a4:	f013 0f01 	tst.w	r3, #1
   231a8:	d101      	bne.n	231ae <command_generates_command_complete_event+0x62>
		return true;
   231aa:	2001      	movs	r0, #1
   231ac:	4770      	bx	lr
	switch (hci_opcode) {
   231ae:	2000      	movs	r0, #0
   231b0:	4770      	bx	lr
   231b2:	f242 0385 	movw	r3, #8325	; 0x2085
   231b6:	4298      	cmp	r0, r3
   231b8:	d80b      	bhi.n	231d2 <command_generates_command_complete_event+0x86>
   231ba:	f242 036d 	movw	r3, #8301	; 0x206d
   231be:	4298      	cmp	r0, r3
   231c0:	d2dd      	bcs.n	2317e <command_generates_command_complete_event+0x32>
   231c2:	f5a0 5001 	sub.w	r0, r0, #8256	; 0x2040
   231c6:	3803      	subs	r0, #3
   231c8:	b280      	uxth	r0, r0
   231ca:	2801      	cmp	r0, #1
   231cc:	d913      	bls.n	231f6 <command_generates_command_complete_event+0xaa>
		return true;
   231ce:	2001      	movs	r0, #1
   231d0:	4770      	bx	lr
	switch (hci_opcode) {
   231d2:	f64f 5302 	movw	r3, #64770	; 0xfd02
   231d6:	4298      	cmp	r0, r3
   231d8:	d00f      	beq.n	231fa <command_generates_command_complete_event+0xae>
   231da:	f64f 530a 	movw	r3, #64778	; 0xfd0a
   231de:	4298      	cmp	r0, r3
   231e0:	d001      	beq.n	231e6 <command_generates_command_complete_event+0x9a>
		return true;
   231e2:	2001      	movs	r0, #1
	}
}
   231e4:	4770      	bx	lr
	switch (hci_opcode) {
   231e6:	2000      	movs	r0, #0
   231e8:	4770      	bx	lr
   231ea:	2000      	movs	r0, #0
   231ec:	4770      	bx	lr
		return true;
   231ee:	2001      	movs	r0, #1
   231f0:	4770      	bx	lr
	switch (hci_opcode) {
   231f2:	2000      	movs	r0, #0
   231f4:	4770      	bx	lr
   231f6:	2000      	movs	r0, #0
   231f8:	4770      	bx	lr
   231fa:	2000      	movs	r0, #0
   231fc:	4770      	bx	lr
   231fe:	bf00      	nop
   23200:	01000401 	.word	0x01000401
   23204:	03001241 	.word	0x03001241

00023208 <cmd_put>:
	}
}
#endif /* CONFIG_BT_HCI_VS */

static void cmd_put(uint8_t *cmd_in, uint8_t * const raw_event_out)
{
   23208:	b5f0      	push	{r4, r5, r6, r7, lr}
   2320a:	b083      	sub	sp, #12
   2320c:	4607      	mov	r7, r0
   2320e:	460e      	mov	r6, r1
	return ((uint16_t)src[1] << 8) | src[0];
   23210:	7843      	ldrb	r3, [r0, #1]
   23212:	7805      	ldrb	r5, [r0, #0]
   23214:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	uint8_t status = BT_HCI_ERR_UNKNOWN_CMD;
	uint16_t opcode = sys_get_le16(cmd_in);
	bool generate_command_status_event;

	/* Assume command complete */
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   23218:	2304      	movs	r3, #4
   2321a:	f88d 3006 	strb.w	r3, [sp, #6]
				      + sizeof(struct bt_hci_evt_cc_status);

	if (user_cmd_handler) {
   2321e:	4b35      	ldr	r3, [pc, #212]	; (232f4 <cmd_put+0xec>)
   23220:	681c      	ldr	r4, [r3, #0]
   23222:	b13c      	cbz	r4, 23234 <cmd_put+0x2c>
		status = user_cmd_handler(cmd_in,
   23224:	f10d 0307 	add.w	r3, sp, #7
   23228:	f10d 0206 	add.w	r2, sp, #6
   2322c:	47a0      	blx	r4
   2322e:	4604      	mov	r4, r0
					  raw_event_out,
					  &return_param_length,
					  &generate_command_status_event);
	}

	if (status == BT_HCI_ERR_UNKNOWN_CMD) {
   23230:	2801      	cmp	r0, #1
   23232:	d121      	bne.n	23278 <cmd_put+0x70>

		switch (BT_OGF(opcode)) {
   23234:	0aab      	lsrs	r3, r5, #10
   23236:	f5b5 5f10 	cmp.w	r5, #9216	; 0x2400
   2323a:	d20b      	bcs.n	23254 <cmd_put+0x4c>
   2323c:	b21a      	sxth	r2, r3
   2323e:	2a00      	cmp	r2, #0
   23240:	d04b      	beq.n	232da <cmd_put+0xd2>
   23242:	3b01      	subs	r3, #1
   23244:	2b07      	cmp	r3, #7
   23246:	d84a      	bhi.n	232de <cmd_put+0xd6>
   23248:	e8df f003 	tbb	[pc, r3]
   2324c:	2f274922 	.word	0x2f274922
   23250:	3f494937 	.word	0x3f494937
   23254:	2b3f      	cmp	r3, #63	; 0x3f
   23256:	d107      	bne.n	23268 <cmd_put+0x60>
						       raw_event_out,
						       &return_param_length);
			break;
#if defined(CONFIG_BT_HCI_VS)
		case BT_OGF_VS:
			status = vs_cmd_put(cmd_in,
   23258:	f10d 0206 	add.w	r2, sp, #6
   2325c:	4631      	mov	r1, r6
   2325e:	4638      	mov	r0, r7
   23260:	f00b fb8d 	bl	2e97e <vs_cmd_put>
   23264:	4604      	mov	r4, r0
					    raw_event_out,
					    &return_param_length);
			break;
   23266:	e000      	b.n	2326a <cmd_put+0x62>
		switch (BT_OGF(opcode)) {
   23268:	2401      	movs	r4, #1
		default:
			status = BT_HCI_ERR_UNKNOWN_CMD;
			break;
		}

		generate_command_status_event = !command_generates_command_complete_event(opcode);
   2326a:	4628      	mov	r0, r5
   2326c:	f7ff ff6e 	bl	2314c <command_generates_command_complete_event>
   23270:	f080 0001 	eor.w	r0, r0, #1
   23274:	f88d 0007 	strb.w	r0, [sp, #7]
	}

	if (generate_command_status_event ||
   23278:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2327c:	b90b      	cbnz	r3, 23282 <cmd_put+0x7a>
   2327e:	2c01      	cmp	r4, #1
   23280:	d12f      	bne.n	232e2 <cmd_put+0xda>
	    (status == BT_HCI_ERR_UNKNOWN_CMD))	{
		encode_command_status(raw_event_out, opcode, status);
   23282:	4622      	mov	r2, r4
   23284:	4629      	mov	r1, r5
   23286:	4630      	mov	r0, r6
   23288:	f00b f8b7 	bl	2e3fa <encode_command_status>
	} else {
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}
   2328c:	b003      	add	sp, #12
   2328e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			status = link_control_cmd_put(cmd_in);
   23290:	4638      	mov	r0, r7
   23292:	f00b f8cd 	bl	2e430 <link_control_cmd_put>
   23296:	4604      	mov	r4, r0
			break;
   23298:	e7e7      	b.n	2326a <cmd_put+0x62>
			status = controller_and_baseband_cmd_put(cmd_in,
   2329a:	f10d 0206 	add.w	r2, sp, #6
   2329e:	4631      	mov	r1, r6
   232a0:	4638      	mov	r0, r7
   232a2:	f00b f8dc 	bl	2e45e <controller_and_baseband_cmd_put>
   232a6:	4604      	mov	r4, r0
			break;
   232a8:	e7df      	b.n	2326a <cmd_put+0x62>
			status = info_param_cmd_put(cmd_in,
   232aa:	f10d 0206 	add.w	r2, sp, #6
   232ae:	4631      	mov	r1, r6
   232b0:	4638      	mov	r0, r7
   232b2:	f00b fa00 	bl	2e6b6 <info_param_cmd_put>
   232b6:	4604      	mov	r4, r0
			break;
   232b8:	e7d7      	b.n	2326a <cmd_put+0x62>
			status = status_param_cmd_put(cmd_in,
   232ba:	f10d 0206 	add.w	r2, sp, #6
   232be:	4631      	mov	r1, r6
   232c0:	4638      	mov	r0, r7
   232c2:	f00b f8b3 	bl	2e42c <status_param_cmd_put>
   232c6:	4604      	mov	r4, r0
			break;
   232c8:	e7cf      	b.n	2326a <cmd_put+0x62>
			status = le_controller_cmd_put(cmd_in,
   232ca:	f10d 0206 	add.w	r2, sp, #6
   232ce:	4631      	mov	r1, r6
   232d0:	4638      	mov	r0, r7
   232d2:	f00b fa86 	bl	2e7e2 <le_controller_cmd_put>
   232d6:	4604      	mov	r4, r0
			break;
   232d8:	e7c7      	b.n	2326a <cmd_put+0x62>
		switch (BT_OGF(opcode)) {
   232da:	2401      	movs	r4, #1
   232dc:	e7c5      	b.n	2326a <cmd_put+0x62>
   232de:	2401      	movs	r4, #1
   232e0:	e7c3      	b.n	2326a <cmd_put+0x62>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
   232e2:	4623      	mov	r3, r4
   232e4:	f89d 2006 	ldrb.w	r2, [sp, #6]
   232e8:	4629      	mov	r1, r5
   232ea:	4630      	mov	r0, r6
   232ec:	f00b f88e 	bl	2e40c <encode_command_complete_header>
}
   232f0:	e7cc      	b.n	2328c <cmd_put+0x84>
   232f2:	bf00      	nop
   232f4:	20008a9c 	.word	0x20008a9c

000232f8 <hci_internal_cmd_put>:

int hci_internal_cmd_put(uint8_t *cmd_in)
{
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   232f8:	4b07      	ldr	r3, [pc, #28]	; (23318 <hci_internal_cmd_put+0x20>)
   232fa:	781b      	ldrb	r3, [r3, #0]
   232fc:	b94b      	cbnz	r3, 23312 <hci_internal_cmd_put+0x1a>
{
   232fe:	b510      	push	{r4, lr}
		> HCI_CMD_PACKET_MAX_SIZE) {
		return -EINVAL;
	}

	if (!IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT)) {
		cmd_put(cmd_in, &cmd_complete_or_status.raw_event[0]);
   23300:	4c06      	ldr	r4, [pc, #24]	; (2331c <hci_internal_cmd_put+0x24>)
   23302:	4621      	mov	r1, r4
   23304:	f7ff ff80 	bl	23208 <cmd_put>
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
   23308:	2301      	movs	r3, #1
   2330a:	f804 3c01 	strb.w	r3, [r4, #-1]
	}

	return 0;
   2330e:	2000      	movs	r0, #0
}
   23310:	bd10      	pop	{r4, pc}
		return -NRF_EPERM;
   23312:	f04f 30ff 	mov.w	r0, #4294967295
}
   23316:	4770      	bx	lr
   23318:	20008aa0 	.word	0x20008aa0
   2331c:	20008aa1 	.word	0x20008aa1

00023320 <hci_internal_msg_get>:

int hci_internal_msg_get(uint8_t *msg_out, sdc_hci_msg_type_t *msg_type_out)
{
   23320:	b538      	push	{r3, r4, r5, lr}
   23322:	460c      	mov	r4, r1
	if (cmd_complete_or_status.occurred) {
   23324:	4b08      	ldr	r3, [pc, #32]	; (23348 <hci_internal_msg_get+0x28>)
   23326:	781b      	ldrb	r3, [r3, #0]
   23328:	b913      	cbnz	r3, 23330 <hci_internal_msg_get+0x10>
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;

		return 0;
	}

	return sdc_hci_get(msg_out, msg_type_out);
   2332a:	f7e9 fe47 	bl	cfbc <sdc_hci_get>
}
   2332e:	bd38      	pop	{r3, r4, r5, pc}
					 evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
   23330:	4d05      	ldr	r5, [pc, #20]	; (23348 <hci_internal_msg_get+0x28>)
   23332:	78aa      	ldrb	r2, [r5, #2]
		memcpy(msg_out,
   23334:	3202      	adds	r2, #2
   23336:	1c69      	adds	r1, r5, #1
   23338:	f006 fc3b 	bl	29bb2 <memcpy>
		cmd_complete_or_status.occurred = false;
   2333c:	2000      	movs	r0, #0
   2333e:	7028      	strb	r0, [r5, #0]
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   23340:	2304      	movs	r3, #4
   23342:	7023      	strb	r3, [r4, #0]
		return 0;
   23344:	e7f3      	b.n	2332e <hci_internal_msg_get+0xe>
   23346:	bf00      	nop
   23348:	20008aa0 	.word	0x20008aa0

0002334c <bt_rand>:
#define BT_ECB_BLOCK_SIZE 16

static const struct device *dev = DEVICE_DT_GET(DT_NODELABEL(rng));

int bt_rand(void *buf, size_t len)
{
   2334c:	b538      	push	{r3, r4, r5, lr}
   2334e:	4605      	mov	r5, r0
   23350:	460c      	mov	r4, r1
   23352:	4809      	ldr	r0, [pc, #36]	; (23378 <bt_rand+0x2c>)
   23354:	f00c fea7 	bl	300a6 <z_device_is_ready>
	if (unlikely(!device_is_ready(dev))) {
   23358:	f080 0301 	eor.w	r3, r0, #1
   2335c:	f013 0fff 	tst.w	r3, #255	; 0xff
   23360:	d106      	bne.n	23370 <bt_rand+0x24>
		return -ENODEV;
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
   23362:	b2a2      	uxth	r2, r4
	const struct entropy_driver_api *api =
   23364:	4804      	ldr	r0, [pc, #16]	; (23378 <bt_rand+0x2c>)
   23366:	6883      	ldr	r3, [r0, #8]
	return api->get_entropy(dev, buffer, length);
   23368:	681b      	ldr	r3, [r3, #0]
   2336a:	4629      	mov	r1, r5
   2336c:	4798      	blx	r3
}
   2336e:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
   23370:	f06f 0012 	mvn.w	r0, #18
   23374:	e7fb      	b.n	2336e <bt_rand+0x22>
   23376:	bf00      	nop
   23378:	0003115c 	.word	0x0003115c

0002337c <public_key>:

#if defined(CONFIG_BT_CTLR_ECDH_LIB_OBERON)
#include <ocrypto_ecdh_p256.h>

static uint8_t public_key(void)
{
   2337c:	b508      	push	{r3, lr}
   2337e:	e002      	b.n	23386 <public_key+0xa>
		if (err) {
			return BT_HCI_ERR_UNSPECIFIED;
		}

		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
			err = -1;
   23380:	f04f 30ff 	mov.w	r0, #4294967295
			continue;
		}

		err = ocrypto_ecdh_p256_public_key(ecdh.public_key_be,
						   ecdh.private_key_be);
	} while (err);
   23384:	b190      	cbz	r0, 233ac <public_key+0x30>
		err = bt_rand(ecdh.private_key_be, 32);
   23386:	2120      	movs	r1, #32
   23388:	4809      	ldr	r0, [pc, #36]	; (233b0 <public_key+0x34>)
   2338a:	f7ff ffdf 	bl	2334c <bt_rand>
		if (err) {
   2338e:	b960      	cbnz	r0, 233aa <public_key+0x2e>
		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
   23390:	2220      	movs	r2, #32
   23392:	4908      	ldr	r1, [pc, #32]	; (233b4 <public_key+0x38>)
   23394:	4806      	ldr	r0, [pc, #24]	; (233b0 <public_key+0x34>)
   23396:	f006 fbfa 	bl	29b8e <memcmp>
   2339a:	2800      	cmp	r0, #0
   2339c:	d0f0      	beq.n	23380 <public_key+0x4>
		err = ocrypto_ecdh_p256_public_key(ecdh.public_key_be,
   2339e:	4904      	ldr	r1, [pc, #16]	; (233b0 <public_key+0x34>)
   233a0:	f101 0020 	add.w	r0, r1, #32
   233a4:	f004 f9ec 	bl	27780 <ocrypto_ecdh_p256_public_key>
   233a8:	e7ec      	b.n	23384 <public_key+0x8>
			return BT_HCI_ERR_UNSPECIFIED;
   233aa:	201f      	movs	r0, #31

	return 0;
}
   233ac:	bd08      	pop	{r3, pc}
   233ae:	bf00      	nop
   233b0:	20008afc 	.word	0x20008afc
   233b4:	00034744 	.word	0x00034744

000233b8 <ecdh_p256_public_key>:
	return 0;
}
#endif /* defined(BT_CTLR_ECDH_LIB_TINYCRYPT) */

static struct net_buf *ecdh_p256_public_key(void)
{
   233b8:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_meta_event *meta;
	struct bt_hci_evt_hdr *hdr;
	struct net_buf *buf;
	uint8_t status;

	status = public_key();
   233ba:	f7ff ffdf 	bl	2337c <public_key>
   233be:	4605      	mov	r5, r0

	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   233c0:	f04f 32ff 	mov.w	r2, #4294967295
   233c4:	f04f 33ff 	mov.w	r3, #4294967295
   233c8:	2001      	movs	r0, #1
   233ca:	f7f3 f8ab 	bl	16524 <bt_buf_get_rx>
   233ce:	4604      	mov	r4, r0
	return net_buf_simple_add(&buf->b, len);
   233d0:	f100 060c 	add.w	r6, r0, #12
   233d4:	2102      	movs	r1, #2
   233d6:	4630      	mov	r0, r6
   233d8:	f009 f952 	bl	2c680 <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   233dc:	233e      	movs	r3, #62	; 0x3e
   233de:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   233e0:	2342      	movs	r3, #66	; 0x42
   233e2:	7043      	strb	r3, [r0, #1]
   233e4:	2101      	movs	r1, #1
   233e6:	4630      	mov	r0, r6
   233e8:	f009 f94a 	bl	2c680 <net_buf_simple_add>

	meta = net_buf_add(buf, sizeof(*meta));
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
   233ec:	2308      	movs	r3, #8
   233ee:	7003      	strb	r3, [r0, #0]
   233f0:	2141      	movs	r1, #65	; 0x41
   233f2:	4630      	mov	r0, r6
   233f4:	f009 f944 	bl	2c680 <net_buf_simple_add>

	evt = net_buf_add(buf, sizeof(*evt));
	evt->status = status;
   233f8:	7005      	strb	r5, [r0, #0]

	if (status) {
   233fa:	b91d      	cbnz	r5, 23404 <ecdh_p256_public_key+0x4c>
		(void)memset(evt->key, 0, sizeof(evt->key));
	} else {
		/* Reverse X */
		sys_memcpy_swap(&evt->key[0], &ecdh.public_key_be[0], 32);
   233fc:	1c42      	adds	r2, r0, #1

	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
		  (psrc > pdst && (pdst + length) <= psrc)),
		 "Source and destination buffers must not overlap");

	psrc += length - 1;
   233fe:	4b0e      	ldr	r3, [pc, #56]	; (23438 <ecdh_p256_public_key+0x80>)

	for (; length > 0; length--) {
   23400:	2120      	movs	r1, #32
   23402:	e00a      	b.n	2341a <ecdh_p256_public_key+0x62>
		(void)memset(evt->key, 0, sizeof(evt->key));
   23404:	2240      	movs	r2, #64	; 0x40
   23406:	2100      	movs	r1, #0
   23408:	3001      	adds	r0, #1
   2340a:	f006 fc01 	bl	29c10 <memset>
   2340e:	e011      	b.n	23434 <ecdh_p256_public_key+0x7c>
		*pdst++ = *psrc--;
   23410:	f813 c901 	ldrb.w	ip, [r3], #-1
   23414:	f802 cb01 	strb.w	ip, [r2], #1
	for (; length > 0; length--) {
   23418:	3901      	subs	r1, #1
   2341a:	2900      	cmp	r1, #0
   2341c:	d1f8      	bne.n	23410 <ecdh_p256_public_key+0x58>
		/* Reverse Y */
		sys_memcpy_swap(&evt->key[32], &ecdh.public_key_be[32], 32);
   2341e:	3021      	adds	r0, #33	; 0x21
	psrc += length - 1;
   23420:	4b06      	ldr	r3, [pc, #24]	; (2343c <ecdh_p256_public_key+0x84>)
	for (; length > 0; length--) {
   23422:	2220      	movs	r2, #32
   23424:	e004      	b.n	23430 <ecdh_p256_public_key+0x78>
		*pdst++ = *psrc--;
   23426:	f813 1901 	ldrb.w	r1, [r3], #-1
   2342a:	f800 1b01 	strb.w	r1, [r0], #1
	for (; length > 0; length--) {
   2342e:	3a01      	subs	r2, #1
   23430:	2a00      	cmp	r2, #0
   23432:	d1f8      	bne.n	23426 <ecdh_p256_public_key+0x6e>
	}

	return buf;
}
   23434:	4620      	mov	r0, r4
   23436:	bd70      	pop	{r4, r5, r6, pc}
   23438:	20008b3b 	.word	0x20008b3b
   2343c:	20008b5b 	.word	0x20008b5b

00023440 <common_secret>:
{
   23440:	b510      	push	{r4, lr}
   23442:	b082      	sub	sp, #8
	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   23444:	b148      	cbz	r0, 2345a <common_secret+0x1a>
   23446:	491f      	ldr	r1, [pc, #124]	; (234c4 <common_secret+0x84>)
   23448:	481f      	ldr	r0, [pc, #124]	; (234c8 <common_secret+0x88>)
   2344a:	4602      	mov	r2, r0
   2344c:	f004 f9ac 	bl	277a8 <ocrypto_ecdh_p256_common_secret>
	if (err) {
   23450:	4604      	mov	r4, r0
   23452:	b920      	cbnz	r0, 2345e <common_secret+0x1e>
	return 0;
   23454:	2000      	movs	r0, #0
}
   23456:	b002      	add	sp, #8
   23458:	bd10      	pop	{r4, pc}
	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   2345a:	491c      	ldr	r1, [pc, #112]	; (234cc <common_secret+0x8c>)
   2345c:	e7f4      	b.n	23448 <common_secret+0x8>
		LOG_ERR("public key is not valid (err %d)", err);
   2345e:	2008      	movs	r0, #8
   23460:	f7f0 fc52 	bl	13d08 <z_log_msg_alloc>
   23464:	2200      	movs	r2, #0
   23466:	f36f 0200 	bfc	r2, #0, #1
   2346a:	f36f 0241 	bfc	r2, #1, #1
   2346e:	f36f 0282 	bfc	r2, #2, #1
   23472:	f36f 02c5 	bfc	r2, #3, #3
   23476:	2301      	movs	r3, #1
   23478:	f363 1288 	bfi	r2, r3, #6, #3
   2347c:	230c      	movs	r3, #12
   2347e:	f363 2252 	bfi	r2, r3, #9, #10
   23482:	f36f 42de 	bfc	r2, #19, #12
   23486:	f36f 72df 	bfc	r2, #31, #1
   2348a:	4684      	mov	ip, r0
   2348c:	b198      	cbz	r0, 234b6 <common_secret+0x76>
   2348e:	f110 0310 	adds.w	r3, r0, #16
   23492:	d002      	beq.n	2349a <common_secret+0x5a>
   23494:	490e      	ldr	r1, [pc, #56]	; (234d0 <common_secret+0x90>)
   23496:	6141      	str	r1, [r0, #20]
   23498:	6184      	str	r4, [r0, #24]
   2349a:	b163      	cbz	r3, 234b6 <common_secret+0x76>
   2349c:	2303      	movs	r3, #3
   2349e:	f88d 3004 	strb.w	r3, [sp, #4]
   234a2:	2300      	movs	r3, #0
   234a4:	f88d 3005 	strb.w	r3, [sp, #5]
   234a8:	f88d 3006 	strb.w	r3, [sp, #6]
   234ac:	f88d 3007 	strb.w	r3, [sp, #7]
   234b0:	9801      	ldr	r0, [sp, #4]
   234b2:	f8cc 0010 	str.w	r0, [ip, #16]
   234b6:	2300      	movs	r3, #0
   234b8:	4906      	ldr	r1, [pc, #24]	; (234d4 <common_secret+0x94>)
   234ba:	4660      	mov	r0, ip
   234bc:	f005 fe8d 	bl	291da <z_log_msg_finalize>
		return BT_HCI_ERR_INVALID_PARAM;
   234c0:	2012      	movs	r0, #18
   234c2:	e7c8      	b.n	23456 <common_secret+0x16>
   234c4:	00034744 	.word	0x00034744
   234c8:	20008b1c 	.word	0x20008b1c
   234cc:	20008afc 	.word	0x20008afc
   234d0:	00034700 	.word	0x00034700
   234d4:	00031450 	.word	0x00031450

000234d8 <ecdh_p256_common_secret>:

static struct net_buf *ecdh_p256_common_secret(bool use_debug)
{
   234d8:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_meta_event *meta;
	struct bt_hci_evt_hdr *hdr;
	struct net_buf *buf;
	uint8_t status;

	status = common_secret(use_debug);
   234da:	f7ff ffb1 	bl	23440 <common_secret>
   234de:	4605      	mov	r5, r0

	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   234e0:	f04f 32ff 	mov.w	r2, #4294967295
   234e4:	f04f 33ff 	mov.w	r3, #4294967295
   234e8:	2001      	movs	r0, #1
   234ea:	f7f3 f81b 	bl	16524 <bt_buf_get_rx>
   234ee:	4604      	mov	r4, r0
   234f0:	f100 060c 	add.w	r6, r0, #12
   234f4:	2102      	movs	r1, #2
   234f6:	4630      	mov	r0, r6
   234f8:	f009 f8c2 	bl	2c680 <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   234fc:	233e      	movs	r3, #62	; 0x3e
   234fe:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   23500:	2322      	movs	r3, #34	; 0x22
   23502:	7043      	strb	r3, [r0, #1]
   23504:	2101      	movs	r1, #1
   23506:	4630      	mov	r0, r6
   23508:	f009 f8ba 	bl	2c680 <net_buf_simple_add>

	meta = net_buf_add(buf, sizeof(*meta));
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
   2350c:	2309      	movs	r3, #9
   2350e:	7003      	strb	r3, [r0, #0]
   23510:	2121      	movs	r1, #33	; 0x21
   23512:	4630      	mov	r0, r6
   23514:	f009 f8b4 	bl	2c680 <net_buf_simple_add>

	evt = net_buf_add(buf, sizeof(*evt));
	evt->status = status;
   23518:	7005      	strb	r5, [r0, #0]

	if (status) {
   2351a:	b91d      	cbnz	r5, 23524 <ecdh_p256_common_secret+0x4c>
		memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
	} else {
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
   2351c:	3001      	adds	r0, #1
	psrc += length - 1;
   2351e:	4b09      	ldr	r3, [pc, #36]	; (23544 <ecdh_p256_common_secret+0x6c>)
	for (; length > 0; length--) {
   23520:	2220      	movs	r2, #32
   23522:	e00a      	b.n	2353a <ecdh_p256_common_secret+0x62>
		memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
   23524:	2220      	movs	r2, #32
   23526:	21ff      	movs	r1, #255	; 0xff
   23528:	3001      	adds	r0, #1
   2352a:	f006 fb71 	bl	29c10 <memset>
   2352e:	e006      	b.n	2353e <ecdh_p256_common_secret+0x66>
		*pdst++ = *psrc--;
   23530:	f813 1901 	ldrb.w	r1, [r3], #-1
   23534:	f800 1b01 	strb.w	r1, [r0], #1
	for (; length > 0; length--) {
   23538:	3a01      	subs	r2, #1
   2353a:	2a00      	cmp	r2, #0
   2353c:	d1f8      	bne.n	23530 <ecdh_p256_common_secret+0x58>
				sizeof(ecdh.dhkey_be));
	}

	return buf;
}
   2353e:	4620      	mov	r0, r4
   23540:	bd70      	pop	{r4, r5, r6, pc}
   23542:	bf00      	nop
   23544:	20008b3b 	.word	0x20008b3b

00023548 <work_submit>:

static struct k_thread ecdh_thread_data;
static K_KERNEL_STACK_DEFINE(ecdh_thread_stack, CONFIG_BT_CTLR_ECDH_STACK_SIZE);

static void work_submit(void)
{
   23548:	b508      	push	{r3, lr}
	return z_impl_k_poll_signal_raise(sig, result);
   2354a:	2100      	movs	r1, #0
   2354c:	4801      	ldr	r0, [pc, #4]	; (23554 <work_submit+0xc>)
   2354e:	f004 f8d1 	bl	276f4 <z_impl_k_poll_signal_raise>
	k_poll_signal_raise(&ecdh_signal, 0);
}
   23552:	bd08      	pop	{r3, pc}
   23554:	20008ae8 	.word	0x20008ae8

00023558 <ecdh_cmd_process>:
{
   23558:	b500      	push	{lr}
   2355a:	b083      	sub	sp, #12
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2355c:	f3bf 8f5b 	dmb	ish
   23560:	4b2c      	ldr	r3, [pc, #176]	; (23614 <ecdh_cmd_process+0xbc>)
   23562:	681b      	ldr	r3, [r3, #0]
   23564:	f3bf 8f5b 	dmb	ish
	switch (atomic_get(&cmd)) {
   23568:	2b02      	cmp	r3, #2
   2356a:	d04a      	beq.n	23602 <ecdh_cmd_process+0xaa>
   2356c:	2b04      	cmp	r3, #4
   2356e:	d04c      	beq.n	2360a <ecdh_cmd_process+0xb2>
   23570:	2b01      	cmp	r3, #1
   23572:	d031      	beq.n	235d8 <ecdh_cmd_process+0x80>
		LOG_WRN("Unknown command");
   23574:	2006      	movs	r0, #6
   23576:	f7f0 fbc7 	bl	13d08 <z_log_msg_alloc>
   2357a:	2200      	movs	r2, #0
   2357c:	f36f 0200 	bfc	r2, #0, #1
   23580:	f36f 0241 	bfc	r2, #1, #1
   23584:	f36f 0282 	bfc	r2, #2, #1
   23588:	f36f 02c5 	bfc	r2, #3, #3
   2358c:	2302      	movs	r3, #2
   2358e:	f363 1288 	bfi	r2, r3, #6, #3
   23592:	2308      	movs	r3, #8
   23594:	f363 2252 	bfi	r2, r3, #9, #10
   23598:	f36f 42de 	bfc	r2, #19, #12
   2359c:	f36f 72df 	bfc	r2, #31, #1
   235a0:	4684      	mov	ip, r0
   235a2:	b190      	cbz	r0, 235ca <ecdh_cmd_process+0x72>
   235a4:	f110 0310 	adds.w	r3, r0, #16
   235a8:	d001      	beq.n	235ae <ecdh_cmd_process+0x56>
   235aa:	491b      	ldr	r1, [pc, #108]	; (23618 <ecdh_cmd_process+0xc0>)
   235ac:	6141      	str	r1, [r0, #20]
   235ae:	b163      	cbz	r3, 235ca <ecdh_cmd_process+0x72>
   235b0:	2302      	movs	r3, #2
   235b2:	f88d 3004 	strb.w	r3, [sp, #4]
   235b6:	2300      	movs	r3, #0
   235b8:	f88d 3005 	strb.w	r3, [sp, #5]
   235bc:	f88d 3006 	strb.w	r3, [sp, #6]
   235c0:	f88d 3007 	strb.w	r3, [sp, #7]
   235c4:	9801      	ldr	r0, [sp, #4]
   235c6:	f8cc 0010 	str.w	r0, [ip, #16]
   235ca:	2300      	movs	r3, #0
   235cc:	4913      	ldr	r1, [pc, #76]	; (2361c <ecdh_cmd_process+0xc4>)
   235ce:	4660      	mov	r0, ip
   235d0:	f005 fe03 	bl	291da <z_log_msg_finalize>
		buf = NULL;
   235d4:	2000      	movs	r0, #0
		break;
   235d6:	e001      	b.n	235dc <ecdh_cmd_process+0x84>
		buf = ecdh_p256_public_key();
   235d8:	f7ff feee 	bl	233b8 <ecdh_p256_public_key>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   235dc:	4b0d      	ldr	r3, [pc, #52]	; (23614 <ecdh_cmd_process+0xbc>)
   235de:	2200      	movs	r2, #0
   235e0:	f3bf 8f5b 	dmb	ish
   235e4:	e853 1f00 	ldrex	r1, [r3]
   235e8:	e843 2c00 	strex	ip, r2, [r3]
   235ec:	f1bc 0f00 	cmp.w	ip, #0
   235f0:	d1f8      	bne.n	235e4 <ecdh_cmd_process+0x8c>
   235f2:	f3bf 8f5b 	dmb	ish
	if (buf) {
   235f6:	b108      	cbz	r0, 235fc <ecdh_cmd_process+0xa4>
		bt_recv(buf);
   235f8:	f7f5 f818 	bl	1862c <bt_recv>
}
   235fc:	b003      	add	sp, #12
   235fe:	f85d fb04 	ldr.w	pc, [sp], #4
		buf = ecdh_p256_common_secret(false);
   23602:	2000      	movs	r0, #0
   23604:	f7ff ff68 	bl	234d8 <ecdh_p256_common_secret>
		break;
   23608:	e7e8      	b.n	235dc <ecdh_cmd_process+0x84>
		buf = ecdh_p256_common_secret(true);
   2360a:	2001      	movs	r0, #1
   2360c:	f7ff ff64 	bl	234d8 <ecdh_p256_common_secret>
		break;
   23610:	e7e4      	b.n	235dc <ecdh_cmd_process+0x84>
   23612:	bf00      	nop
   23614:	20008af8 	.word	0x20008af8
   23618:	00034724 	.word	0x00034724
   2361c:	00031450 	.word	0x00031450

00023620 <ecdh_thread>:

static void ecdh_thread(void *p1, void *p2, void *p3)
{
   23620:	b500      	push	{lr}
   23622:	b087      	sub	sp, #28
	struct k_poll_event events[1] = {
   23624:	2300      	movs	r3, #0
   23626:	9301      	str	r3, [sp, #4]
   23628:	9302      	str	r3, [sp, #8]
   2362a:	9303      	str	r3, [sp, #12]
   2362c:	9304      	str	r3, [sp, #16]
   2362e:	9305      	str	r3, [sp, #20]
   23630:	f89d 3011 	ldrb.w	r3, [sp, #17]
   23634:	2201      	movs	r2, #1
   23636:	f362 0305 	bfi	r3, r2, #0, #6
   2363a:	f88d 3011 	strb.w	r3, [sp, #17]
   2363e:	4b0a      	ldr	r3, [pc, #40]	; (23668 <ecdh_thread+0x48>)
   23640:	9305      	str	r3, [sp, #20]
	return z_impl_k_poll(events, num_events, timeout);
   23642:	f04f 32ff 	mov.w	r2, #4294967295
   23646:	f04f 33ff 	mov.w	r3, #4294967295
   2364a:	2101      	movs	r1, #1
   2364c:	a801      	add	r0, sp, #4
   2364e:	f003 fff3 	bl	27638 <z_impl_k_poll>
	z_impl_k_poll_signal_reset(sig);
   23652:	4805      	ldr	r0, [pc, #20]	; (23668 <ecdh_thread+0x48>)
   23654:	f00d fccb 	bl	30fee <z_impl_k_poll_signal_reset>

	while (true) {
		k_poll(events, 1, K_FOREVER);

		k_poll_signal_reset(&ecdh_signal);
		events[0].state = K_POLL_STATE_NOT_READY;
   23658:	9b04      	ldr	r3, [sp, #16]
   2365a:	f36f 3394 	bfc	r3, #14, #7
   2365e:	9304      	str	r3, [sp, #16]

		ecdh_cmd_process();
   23660:	f7ff ff7a 	bl	23558 <ecdh_cmd_process>
	while (true) {
   23664:	e7ed      	b.n	23642 <ecdh_thread+0x22>
   23666:	bf00      	nop
   23668:	20008ae8 	.word	0x20008ae8

0002366c <hci_ecdh_init>:
	}
}
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */

void hci_ecdh_init(void)
{
   2366c:	b510      	push	{r4, lr}
   2366e:	b088      	sub	sp, #32
	z_impl_k_poll_signal_init(sig);
   23670:	480d      	ldr	r0, [pc, #52]	; (236a8 <hci_ecdh_init+0x3c>)
   23672:	f00d fcb7 	bl	30fe4 <z_impl_k_poll_signal_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   23676:	4c0d      	ldr	r4, [pc, #52]	; (236ac <hci_ecdh_init+0x40>)
   23678:	2200      	movs	r2, #0
   2367a:	2300      	movs	r3, #0
   2367c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   23680:	2300      	movs	r3, #0
   23682:	9304      	str	r3, [sp, #16]
   23684:	220a      	movs	r2, #10
   23686:	9203      	str	r2, [sp, #12]
   23688:	9302      	str	r3, [sp, #8]
   2368a:	9301      	str	r3, [sp, #4]
   2368c:	9300      	str	r3, [sp, #0]
   2368e:	4b08      	ldr	r3, [pc, #32]	; (236b0 <hci_ecdh_init+0x44>)
   23690:	f44f 7262 	mov.w	r2, #904	; 0x388
   23694:	4907      	ldr	r1, [pc, #28]	; (236b4 <hci_ecdh_init+0x48>)
   23696:	4620      	mov	r0, r4
   23698:	f00c fe08 	bl	302ac <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   2369c:	4906      	ldr	r1, [pc, #24]	; (236b8 <hci_ecdh_init+0x4c>)
   2369e:	4620      	mov	r0, r4
   236a0:	f002 fd9c 	bl	261dc <z_impl_k_thread_name_set>
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecdh_thread_data, "BT CTLR ECDH");
#else
	k_work_init(&ecdh_work, ecdh_work_handler);
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */
}
   236a4:	b008      	add	sp, #32
   236a6:	bd10      	pop	{r4, pc}
   236a8:	20008ae8 	.word	0x20008ae8
   236ac:	20007508 	.word	0x20007508
   236b0:	00023621 	.word	0x00023621
   236b4:	20009c00 	.word	0x20009c00
   236b8:	00034734 	.word	0x00034734

000236bc <hci_ecdh_uninit>:

void hci_ecdh_uninit(void)
{
   236bc:	b508      	push	{r3, lr}
	z_impl_k_thread_abort(thread);
   236be:	4802      	ldr	r0, [pc, #8]	; (236c8 <hci_ecdh_uninit+0xc>)
   236c0:	f7f2 fcc2 	bl	16048 <z_impl_k_thread_abort>
#if !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK)
	k_thread_abort(&ecdh_thread_data);
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */
}
   236c4:	bd08      	pop	{r3, pc}
   236c6:	bf00      	nop
   236c8:	20007508 	.word	0x20007508

000236cc <hci_cmd_le_read_local_p256_public_key>:


uint8_t hci_cmd_le_read_local_p256_public_key(void)
{
   236cc:	b508      	push	{r3, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   236ce:	4b0a      	ldr	r3, [pc, #40]	; (236f8 <hci_cmd_le_read_local_p256_public_key+0x2c>)
   236d0:	2201      	movs	r2, #1
   236d2:	f3bf 8f5b 	dmb	ish
   236d6:	e853 1f00 	ldrex	r1, [r3]
   236da:	2900      	cmp	r1, #0
   236dc:	d103      	bne.n	236e6 <hci_cmd_le_read_local_p256_public_key+0x1a>
   236de:	e843 2000 	strex	r0, r2, [r3]
   236e2:	2800      	cmp	r0, #0
   236e4:	d1f7      	bne.n	236d6 <hci_cmd_le_read_local_p256_public_key+0xa>
   236e6:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&cmd, 0, GEN_PUBLIC_KEY)) {
   236ea:	d103      	bne.n	236f4 <hci_cmd_le_read_local_p256_public_key+0x28>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	work_submit();
   236ec:	f7ff ff2c 	bl	23548 <work_submit>

	return 0;
   236f0:	2000      	movs	r0, #0
}
   236f2:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   236f4:	200c      	movs	r0, #12
   236f6:	e7fc      	b.n	236f2 <hci_cmd_le_read_local_p256_public_key+0x26>
   236f8:	20008af8 	.word	0x20008af8

000236fc <cmd_le_generate_dhkey>:

uint8_t cmd_le_generate_dhkey(uint8_t *key, uint8_t key_type)
{
   236fc:	b508      	push	{r3, lr}
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   236fe:	b1a1      	cbz	r1, 2372a <cmd_le_generate_dhkey+0x2e>
   23700:	2204      	movs	r2, #4
   23702:	4b17      	ldr	r3, [pc, #92]	; (23760 <cmd_le_generate_dhkey+0x64>)
   23704:	f3bf 8f5b 	dmb	ish
   23708:	e853 1f00 	ldrex	r1, [r3]
   2370c:	2900      	cmp	r1, #0
   2370e:	d104      	bne.n	2371a <cmd_le_generate_dhkey+0x1e>
   23710:	e843 2c00 	strex	ip, r2, [r3]
   23714:	f1bc 0f00 	cmp.w	ip, #0
   23718:	d1f6      	bne.n	23708 <cmd_le_generate_dhkey+0xc>
   2371a:	f3bf 8f5b 	dmb	ish
   2371e:	d11c      	bne.n	2375a <cmd_le_generate_dhkey+0x5e>
	psrc += length - 1;
   23720:	f100 021f 	add.w	r2, r0, #31
	uint8_t *pdst = (uint8_t *)dst;
   23724:	4b0f      	ldr	r3, [pc, #60]	; (23764 <cmd_le_generate_dhkey+0x68>)
	for (; length > 0; length--) {
   23726:	2120      	movs	r1, #32
   23728:	e006      	b.n	23738 <cmd_le_generate_dhkey+0x3c>
   2372a:	2202      	movs	r2, #2
   2372c:	e7e9      	b.n	23702 <cmd_le_generate_dhkey+0x6>
		*pdst++ = *psrc--;
   2372e:	f812 c901 	ldrb.w	ip, [r2], #-1
   23732:	f803 cb01 	strb.w	ip, [r3], #1
	for (; length > 0; length--) {
   23736:	3901      	subs	r1, #1
   23738:	2900      	cmp	r1, #0
   2373a:	d1f8      	bne.n	2372e <cmd_le_generate_dhkey+0x32>
	psrc += length - 1;
   2373c:	303f      	adds	r0, #63	; 0x3f
	uint8_t *pdst = (uint8_t *)dst;
   2373e:	4b0a      	ldr	r3, [pc, #40]	; (23768 <cmd_le_generate_dhkey+0x6c>)
	for (; length > 0; length--) {
   23740:	2220      	movs	r2, #32
   23742:	e004      	b.n	2374e <cmd_le_generate_dhkey+0x52>
		*pdst++ = *psrc--;
   23744:	f810 1901 	ldrb.w	r1, [r0], #-1
   23748:	f803 1b01 	strb.w	r1, [r3], #1
	for (; length > 0; length--) {
   2374c:	3a01      	subs	r2, #1
   2374e:	2a00      	cmp	r2, #0
   23750:	d1f8      	bne.n	23744 <cmd_le_generate_dhkey+0x48>
	}

	sys_memcpy_swap(&ecdh.public_key_be[0], &key[0], 32);
	sys_memcpy_swap(&ecdh.public_key_be[32], &key[32], 32);

	work_submit();
   23752:	f7ff fef9 	bl	23548 <work_submit>

	return 0;
   23756:	2000      	movs	r0, #0
}
   23758:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   2375a:	200c      	movs	r0, #12
   2375c:	e7fc      	b.n	23758 <cmd_le_generate_dhkey+0x5c>
   2375e:	bf00      	nop
   23760:	20008af8 	.word	0x20008af8
   23764:	20008b1c 	.word	0x20008b1c
   23768:	20008b3c 	.word	0x20008b3c

0002376c <mpsl_lib_init_internal>:
	return 0;
#endif
}

static int32_t mpsl_lib_init_internal(void)
{
   2376c:	b500      	push	{lr}
   2376e:	b083      	sub	sp, #12
	int err = 0;
	mpsl_clock_lfclk_cfg_t clock_cfg;

	clock_cfg.source = m_config_clock_source_get();
   23770:	f00b f98b 	bl	2ea8a <m_config_clock_source_get>
   23774:	f88d 0000 	strb.w	r0, [sp]
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   23778:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   2377c:	f8ad 3004 	strh.w	r3, [sp, #4]
	clock_cfg.skip_wait_lfclk_started =
   23780:	2300      	movs	r3, #0
   23782:	f88d 3006 	strb.w	r3, [sp, #6]
	BUILD_ASSERT(IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION),
		    "MPSL requires clock calibration to be enabled when RC is used as LFCLK");

	/* clock_cfg.rc_ctiv is given in 1/4 seconds units.
	 * CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD is given in ms. */
	clock_cfg.rc_ctiv = (CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD * 4 / 1000);
   23786:	2310      	movs	r3, #16
   23788:	f88d 3001 	strb.w	r3, [sp, #1]
	clock_cfg.rc_temp_ctiv = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP + 1;
   2378c:	2302      	movs	r3, #2
   2378e:	f88d 3002 	strb.w	r3, [sp, #2]
#else
	clock_cfg.rc_ctiv = 0;
	clock_cfg.rc_temp_ctiv = 0;
#endif

	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   23792:	4a04      	ldr	r2, [pc, #16]	; (237a4 <mpsl_lib_init_internal+0x38>)
   23794:	2119      	movs	r1, #25
   23796:	4668      	mov	r0, sp
   23798:	f7e8 fe02 	bl	c3a0 <mpsl_init>
		return err;
	}
#endif

	return 0;
}
   2379c:	b003      	add	sp, #12
   2379e:	f85d fb04 	ldr.w	pc, [sp], #4
   237a2:	bf00      	nop
   237a4:	000237a9 	.word	0x000237a9

000237a8 <m_assert_handler>:
{
   237a8:	b590      	push	{r4, r7, lr}
   237aa:	b083      	sub	sp, #12
   237ac:	af00      	add	r7, sp, #0
	LOG_ERR("MPSL ASSERT: %s, %d", file, line);
   237ae:	466c      	mov	r4, sp
   237b0:	2300      	movs	r3, #0
   237b2:	713b      	strb	r3, [r7, #4]
   237b4:	2302      	movs	r3, #2
   237b6:	717b      	strb	r3, [r7, #5]
   237b8:	b08a      	sub	sp, #40	; 0x28
   237ba:	46ec      	mov	ip, sp
   237bc:	f11c 0210 	adds.w	r2, ip, #16
   237c0:	d01b      	beq.n	237fa <m_assert_handler+0x52>
   237c2:	f04f 0e12 	mov.w	lr, #18
   237c6:	b12a      	cbz	r2, 237d4 <m_assert_handler+0x2c>
   237c8:	f1be 0f04 	cmp.w	lr, #4
   237cc:	dd02      	ble.n	237d4 <m_assert_handler+0x2c>
   237ce:	4b2b      	ldr	r3, [pc, #172]	; (2387c <m_assert_handler+0xd4>)
   237d0:	f8cc 3014 	str.w	r3, [ip, #20]
   237d4:	2300      	movs	r3, #0
   237d6:	703b      	strb	r3, [r7, #0]
   237d8:	2302      	movs	r3, #2
   237da:	707b      	strb	r3, [r7, #1]
   237dc:	b1d2      	cbz	r2, 23814 <m_assert_handler+0x6c>
   237de:	4673      	mov	r3, lr
   237e0:	f1be 0f08 	cmp.w	lr, #8
   237e4:	dd01      	ble.n	237ea <m_assert_handler+0x42>
   237e6:	f8cc 0018 	str.w	r0, [ip, #24]
   237ea:	2b0c      	cmp	r3, #12
   237ec:	dd01      	ble.n	237f2 <m_assert_handler+0x4a>
   237ee:	f8cc 101c 	str.w	r1, [ip, #28]
   237f2:	f10c 0320 	add.w	r3, ip, #32
   237f6:	2100      	movs	r1, #0
   237f8:	e00a      	b.n	23810 <m_assert_handler+0x68>
   237fa:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
   237fe:	e7e2      	b.n	237c6 <m_assert_handler+0x1e>
   23800:	f101 0008 	add.w	r0, r1, #8
   23804:	4438      	add	r0, r7
   23806:	f810 0c08 	ldrb.w	r0, [r0, #-8]
   2380a:	f803 0b01 	strb.w	r0, [r3], #1
   2380e:	3101      	adds	r1, #1
   23810:	2901      	cmp	r1, #1
   23812:	d9f5      	bls.n	23800 <m_assert_handler+0x58>
   23814:	f1be 0f11 	cmp.w	lr, #17
   23818:	dd2d      	ble.n	23876 <m_assert_handler+0xce>
   2381a:	2312      	movs	r3, #18
   2381c:	b14a      	cbz	r2, 23832 <m_assert_handler+0x8a>
   2381e:	2104      	movs	r1, #4
   23820:	7139      	strb	r1, [r7, #4]
   23822:	2100      	movs	r1, #0
   23824:	7179      	strb	r1, [r7, #5]
   23826:	71b9      	strb	r1, [r7, #6]
   23828:	2101      	movs	r1, #1
   2382a:	71f9      	strb	r1, [r7, #7]
   2382c:	6878      	ldr	r0, [r7, #4]
   2382e:	f8cc 0010 	str.w	r0, [ip, #16]
   23832:	2100      	movs	r1, #0
   23834:	f36f 0100 	bfc	r1, #0, #1
   23838:	f36f 0141 	bfc	r1, #1, #1
   2383c:	f36f 0182 	bfc	r1, #2, #1
   23840:	f36f 01c5 	bfc	r1, #3, #3
   23844:	2001      	movs	r0, #1
   23846:	f360 1188 	bfi	r1, r0, #6, #3
   2384a:	f3c3 0309 	ubfx	r3, r3, #0, #10
   2384e:	f363 2152 	bfi	r1, r3, #9, #10
   23852:	f36f 41de 	bfc	r1, #19, #12
   23856:	f36f 71df 	bfc	r1, #31, #1
   2385a:	2300      	movs	r3, #0
   2385c:	4808      	ldr	r0, [pc, #32]	; (23880 <m_assert_handler+0xd8>)
   2385e:	f005 fcd4 	bl	2920a <z_impl_z_log_msg_static_create>
   23862:	46a5      	mov	sp, r4
	k_oops();
   23864:	4040      	eors	r0, r0
   23866:	f380 8811 	msr	BASEPRI, r0
   2386a:	f04f 0003 	mov.w	r0, #3
   2386e:	df02      	svc	2
}
   23870:	370c      	adds	r7, #12
   23872:	46bd      	mov	sp, r7
   23874:	bd90      	pop	{r4, r7, pc}
	LOG_ERR("MPSL ASSERT: %s, %d", file, line);
   23876:	f06f 031b 	mvn.w	r3, #27
   2387a:	e7cf      	b.n	2381c <m_assert_handler+0x74>
   2387c:	00034770 	.word	0x00034770
   23880:	000314b0 	.word	0x000314b0

00023884 <mpsl_low_prio_init>:

	return 0;
}

static int mpsl_low_prio_init(const struct device *dev)
{
   23884:	b530      	push	{r4, r5, lr}
   23886:	b083      	sub	sp, #12
	ARG_UNUSED(dev);

	k_work_queue_start(&mpsl_work_q, mpsl_work_stack,
   23888:	4d0d      	ldr	r5, [pc, #52]	; (238c0 <mpsl_low_prio_init+0x3c>)
   2388a:	2400      	movs	r4, #0
   2388c:	9400      	str	r4, [sp, #0]
   2388e:	f06f 0309 	mvn.w	r3, #9
   23892:	f44f 6280 	mov.w	r2, #1024	; 0x400
   23896:	490b      	ldr	r1, [pc, #44]	; (238c4 <mpsl_low_prio_init+0x40>)
   23898:	4628      	mov	r0, r5
   2389a:	f003 f815 	bl	268c8 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
   2389e:	490a      	ldr	r1, [pc, #40]	; (238c8 <mpsl_low_prio_init+0x44>)
   238a0:	4628      	mov	r0, r5
   238a2:	f002 fc9b 	bl	261dc <z_impl_k_thread_name_set>
			   K_THREAD_STACK_SIZEOF(mpsl_work_stack),
			   K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO), NULL);
	k_thread_name_set(&mpsl_work_q.thread, "MPSL Work");
	k_work_init(&mpsl_low_prio_work, mpsl_low_prio_work_handler);
   238a6:	4909      	ldr	r1, [pc, #36]	; (238cc <mpsl_low_prio_init+0x48>)
   238a8:	4809      	ldr	r0, [pc, #36]	; (238d0 <mpsl_low_prio_init+0x4c>)
   238aa:	f00c fee1 	bl	30670 <k_work_init>

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   238ae:	4622      	mov	r2, r4
   238b0:	2104      	movs	r1, #4
   238b2:	2019      	movs	r0, #25
   238b4:	f006 f888 	bl	299c8 <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   238b8:	4620      	mov	r0, r4
   238ba:	b003      	add	sp, #12
   238bc:	bd30      	pop	{r4, r5, pc}
   238be:	bf00      	nop
   238c0:	200075c0 	.word	0x200075c0
   238c4:	2000a000 	.word	0x2000a000
   238c8:	00034784 	.word	0x00034784
   238cc:	0002eb13 	.word	0x0002eb13
   238d0:	20008b5c 	.word	0x20008b5c

000238d4 <mpsl_low_prio_irq_handler>:
{
   238d4:	b508      	push	{r3, lr}
	k_work_submit_to_queue(&mpsl_work_q, &mpsl_low_prio_work);
   238d6:	4902      	ldr	r1, [pc, #8]	; (238e0 <mpsl_low_prio_irq_handler+0xc>)
   238d8:	4802      	ldr	r0, [pc, #8]	; (238e4 <mpsl_low_prio_irq_handler+0x10>)
   238da:	f00c fee5 	bl	306a8 <k_work_submit_to_queue>
}
   238de:	bd08      	pop	{r3, pc}
   238e0:	20008b5c 	.word	0x20008b5c
   238e4:	200075c0 	.word	0x200075c0

000238e8 <mpsl_hfclk_callback>:
#include <mpsl_clock.h>

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
   238e8:	b508      	push	{r3, lr}
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   238ea:	4b02      	ldr	r3, [pc, #8]	; (238f4 <mpsl_hfclk_callback+0xc>)
   238ec:	681b      	ldr	r3, [r3, #0]
   238ee:	2000      	movs	r0, #0
   238f0:	4798      	blx	r3
}
   238f2:	bd08      	pop	{r3, pc}
   238f4:	20008b6c 	.word	0x20008b6c

000238f8 <nrfx_clock_start>:

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   238f8:	b508      	push	{r3, lr}
	switch (domain) {
   238fa:	b128      	cbz	r0, 23908 <nrfx_clock_start+0x10>
   238fc:	2801      	cmp	r0, #1
   238fe:	d102      	bne.n	23906 <nrfx_clock_start+0xe>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   23900:	4804      	ldr	r0, [pc, #16]	; (23914 <nrfx_clock_start+0x1c>)
   23902:	f7e8 fbcd 	bl	c0a0 <mpsl_clock_hfclk_request>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   23906:	bd08      	pop	{r3, pc}
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   23908:	4b03      	ldr	r3, [pc, #12]	; (23918 <nrfx_clock_start+0x20>)
   2390a:	681b      	ldr	r3, [r3, #0]
   2390c:	2001      	movs	r0, #1
   2390e:	4798      	blx	r3
}
   23910:	e7f9      	b.n	23906 <nrfx_clock_start+0xe>
   23912:	bf00      	nop
   23914:	000238e9 	.word	0x000238e9
   23918:	20008b6c 	.word	0x20008b6c

0002391c <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   2391c:	4b01      	ldr	r3, [pc, #4]	; (23924 <nrfx_clock_init+0x8>)
   2391e:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   23920:	4801      	ldr	r0, [pc, #4]	; (23928 <nrfx_clock_init+0xc>)
   23922:	4770      	bx	lr
   23924:	20008b6c 	.word	0x20008b6c
   23928:	0bad0000 	.word	0x0bad0000

0002392c <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
   2392c:	b4f0      	push	{r4, r5, r6, r7}
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
   2392e:	6805      	ldr	r5, [r0, #0]
	if (!tp) return vol;	/* Invalid path name? */
   23930:	2d00      	cmp	r5, #0
   23932:	d044      	beq.n	239be <get_ldnumber+0x92>
   23934:	4606      	mov	r6, r0
	tt = tp = *path;
   23936:	462f      	mov	r7, r5
	do tc = *tt++; while (!IsTerminator(tc) && tc != ':');	/* Find a colon in the path */
   23938:	783b      	ldrb	r3, [r7, #0]
   2393a:	3701      	adds	r7, #1
   2393c:	2b20      	cmp	r3, #32
   2393e:	d901      	bls.n	23944 <get_ldnumber+0x18>
   23940:	2b3a      	cmp	r3, #58	; 0x3a
   23942:	d1f9      	bne.n	23938 <get_ldnumber+0xc>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
   23944:	2b3a      	cmp	r3, #58	; 0x3a
   23946:	d002      	beq.n	2394e <get_ldnumber+0x22>
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
#endif
	return vol;		/* Return the default drive */
   23948:	2000      	movs	r0, #0
}
   2394a:	bcf0      	pop	{r4, r5, r6, r7}
   2394c:	4770      	bx	lr
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
   2394e:	7828      	ldrb	r0, [r5, #0]
   23950:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   23954:	b2db      	uxtb	r3, r3
   23956:	2b09      	cmp	r3, #9
   23958:	d809      	bhi.n	2396e <get_ldnumber+0x42>
   2395a:	1cab      	adds	r3, r5, #2
   2395c:	42bb      	cmp	r3, r7
   2395e:	d001      	beq.n	23964 <get_ldnumber+0x38>
   23960:	2000      	movs	r0, #0
   23962:	e024      	b.n	239ae <get_ldnumber+0x82>
			i = (int)*tp - '0';	/* Get the LD number */
   23964:	3830      	subs	r0, #48	; 0x30
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
   23966:	2807      	cmp	r0, #7
   23968:	dc26      	bgt.n	239b8 <get_ldnumber+0x8c>
			*path = tt;		/* Snip the drive prefix off */
   2396a:	6037      	str	r7, [r6, #0]
   2396c:	e7ed      	b.n	2394a <get_ldnumber+0x1e>
   2396e:	2000      	movs	r0, #0
   23970:	e01d      	b.n	239ae <get_ldnumber+0x82>
					if (IsLower(tc)) tc -= 0x20;
   23972:	3a20      	subs	r2, #32
   23974:	b2d2      	uxtb	r2, r2
				} while (c && (TCHAR)c == tc);
   23976:	b1a3      	cbz	r3, 239a2 <get_ldnumber+0x76>
   23978:	429a      	cmp	r2, r3
   2397a:	d112      	bne.n	239a2 <get_ldnumber+0x76>
					c = *sp++; tc = *tp++;
   2397c:	7823      	ldrb	r3, [r4, #0]
   2397e:	3401      	adds	r4, #1
   23980:	f89c 2000 	ldrb.w	r2, [ip]
   23984:	f10c 0c01 	add.w	ip, ip, #1
					if (IsLower(c)) c -= 0x20;
   23988:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
   2398c:	b2c9      	uxtb	r1, r1
   2398e:	2919      	cmp	r1, #25
   23990:	d801      	bhi.n	23996 <get_ldnumber+0x6a>
   23992:	3b20      	subs	r3, #32
   23994:	b2db      	uxtb	r3, r3
					if (IsLower(tc)) tc -= 0x20;
   23996:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
   2399a:	b2c9      	uxtb	r1, r1
   2399c:	2919      	cmp	r1, #25
   2399e:	d8ea      	bhi.n	23976 <get_ldnumber+0x4a>
   239a0:	e7e7      	b.n	23972 <get_ldnumber+0x46>
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
   239a2:	b90b      	cbnz	r3, 239a8 <get_ldnumber+0x7c>
   239a4:	4567      	cmp	r7, ip
   239a6:	d0de      	beq.n	23966 <get_ldnumber+0x3a>
   239a8:	3001      	adds	r0, #1
   239aa:	2807      	cmp	r0, #7
   239ac:	dcdb      	bgt.n	23966 <get_ldnumber+0x3a>
				sp = VolumeStr[i]; tp = *path;	/* This string volume ID and path name */
   239ae:	4b05      	ldr	r3, [pc, #20]	; (239c4 <get_ldnumber+0x98>)
   239b0:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   239b4:	46ac      	mov	ip, r5
   239b6:	e7e1      	b.n	2397c <get_ldnumber+0x50>
	int vol = -1;
   239b8:	f04f 30ff 	mov.w	r0, #4294967295
		return vol;
   239bc:	e7c5      	b.n	2394a <get_ldnumber+0x1e>
	if (!tp) return vol;	/* Invalid path name? */
   239be:	f04f 30ff 	mov.w	r0, #4294967295
   239c2:	e7c2      	b.n	2394a <get_ldnumber+0x1e>
   239c4:	000348c4 	.word	0x000348c4

000239c8 <check_fs>:

static UINT check_fs (	/* 0:FAT/FAT32 VBR, 1:exFAT VBR, 2:Not FAT and valid BS, 3:Not FAT and invalid BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	LBA_t sect			/* Sector to load and check if it is an FAT-VBR or not */
)
{
   239c8:	b538      	push	{r3, r4, r5, lr}
   239ca:	4604      	mov	r4, r0
	WORD w, sign;
	BYTE b;


	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
   239cc:	2300      	movs	r3, #0
   239ce:	70c3      	strb	r3, [r0, #3]
   239d0:	f04f 33ff 	mov.w	r3, #4294967295
   239d4:	62c3      	str	r3, [r0, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
   239d6:	f00b f98e 	bl	2ecf6 <move_window>
   239da:	2800      	cmp	r0, #0
   239dc:	d15a      	bne.n	23a94 <check_fs+0xcc>
	sign = ld_word(fs->win + BS_55AA);
   239de:	f204 202e 	addw	r0, r4, #558	; 0x22e
   239e2:	f00b f8b3 	bl	2eb4c <ld_word>
   239e6:	4605      	mov	r5, r0
#if FF_FS_EXFAT
	if (sign == 0xAA55 && !memcmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* It is an exFAT VBR */
#endif
	b = fs->win[BS_JmpBoot];
   239e8:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near call) */
   239ec:	2beb      	cmp	r3, #235	; 0xeb
   239ee:	d009      	beq.n	23a04 <check_fs+0x3c>
   239f0:	2be9      	cmp	r3, #233	; 0xe9
   239f2:	d007      	beq.n	23a04 <check_fs+0x3c>
   239f4:	2be8      	cmp	r3, #232	; 0xe8
   239f6:	d005      	beq.n	23a04 <check_fs+0x3c>
			&& (ld_word(fs->win + BPB_TotSec16) >= 128 || ld_dword(fs->win + BPB_TotSec32) >= 0x10000)	/* Properness of volume sectors (>=128) */
			&& ld_word(fs->win + BPB_FATSz16) != 0) {	/* Properness of FAT size (MNBZ) */
				return 0;	/* It can be presumed an FAT VBR */
		}
	}
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (valid or invalid BS) */
   239f8:	f64a 2355 	movw	r3, #43605	; 0xaa55
   239fc:	429d      	cmp	r5, r3
   239fe:	d047      	beq.n	23a90 <check_fs+0xc8>
   23a00:	2003      	movs	r0, #3
}
   23a02:	bd38      	pop	{r3, r4, r5, pc}
		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
   23a04:	f64a 2355 	movw	r3, #43605	; 0xaa55
   23a08:	429d      	cmp	r5, r3
   23a0a:	d037      	beq.n	23a7c <check_fs+0xb4>
		w = ld_word(fs->win + BPB_BytsPerSec);
   23a0c:	f104 003b 	add.w	r0, r4, #59	; 0x3b
   23a10:	f00b f89c 	bl	2eb4c <ld_word>
		b = fs->win[BPB_SecPerClus];
   23a14:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
   23a18:	1e43      	subs	r3, r0, #1
   23a1a:	4218      	tst	r0, r3
   23a1c:	d1ec      	bne.n	239f8 <check_fs+0x30>
   23a1e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   23a22:	d3e9      	bcc.n	239f8 <check_fs+0x30>
   23a24:	d8e8      	bhi.n	239f8 <check_fs+0x30>
			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
   23a26:	2a00      	cmp	r2, #0
   23a28:	d0e6      	beq.n	239f8 <check_fs+0x30>
   23a2a:	1e53      	subs	r3, r2, #1
   23a2c:	421a      	tst	r2, r3
   23a2e:	d1e3      	bne.n	239f8 <check_fs+0x30>
			&& ld_word(fs->win + BPB_RsvdSecCnt) != 0	/* Properness of reserved sectors (MNBZ) */
   23a30:	f104 003e 	add.w	r0, r4, #62	; 0x3e
   23a34:	f00b f88a 	bl	2eb4c <ld_word>
   23a38:	2800      	cmp	r0, #0
   23a3a:	d0dd      	beq.n	239f8 <check_fs+0x30>
			&& (UINT)fs->win[BPB_NumFATs] - 1 <= 1		/* Properness of FATs (1 or 2) */
   23a3c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   23a40:	3b01      	subs	r3, #1
   23a42:	2b01      	cmp	r3, #1
   23a44:	d8d8      	bhi.n	239f8 <check_fs+0x30>
			&& ld_word(fs->win + BPB_RootEntCnt) != 0	/* Properness of root dir entries (MNBZ) */
   23a46:	f104 0041 	add.w	r0, r4, #65	; 0x41
   23a4a:	f00b f87f 	bl	2eb4c <ld_word>
   23a4e:	2800      	cmp	r0, #0
   23a50:	d0d2      	beq.n	239f8 <check_fs+0x30>
			&& (ld_word(fs->win + BPB_TotSec16) >= 128 || ld_dword(fs->win + BPB_TotSec32) >= 0x10000)	/* Properness of volume sectors (>=128) */
   23a52:	f104 0043 	add.w	r0, r4, #67	; 0x43
   23a56:	f00b f879 	bl	2eb4c <ld_word>
   23a5a:	287f      	cmp	r0, #127	; 0x7f
   23a5c:	d806      	bhi.n	23a6c <check_fs+0xa4>
   23a5e:	f104 0050 	add.w	r0, r4, #80	; 0x50
   23a62:	f00b f878 	bl	2eb56 <ld_dword>
   23a66:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   23a6a:	d3c5      	bcc.n	239f8 <check_fs+0x30>
			&& ld_word(fs->win + BPB_FATSz16) != 0) {	/* Properness of FAT size (MNBZ) */
   23a6c:	f104 0046 	add.w	r0, r4, #70	; 0x46
   23a70:	f00b f86c 	bl	2eb4c <ld_word>
   23a74:	2800      	cmp	r0, #0
   23a76:	d0bf      	beq.n	239f8 <check_fs+0x30>
				return 0;	/* It can be presumed an FAT VBR */
   23a78:	2000      	movs	r0, #0
   23a7a:	e7c2      	b.n	23a02 <check_fs+0x3a>
		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
   23a7c:	2208      	movs	r2, #8
   23a7e:	4906      	ldr	r1, [pc, #24]	; (23a98 <check_fs+0xd0>)
   23a80:	f104 0082 	add.w	r0, r4, #130	; 0x82
   23a84:	f006 f883 	bl	29b8e <memcmp>
   23a88:	2800      	cmp	r0, #0
   23a8a:	d1bf      	bne.n	23a0c <check_fs+0x44>
			return 0;	/* It is an FAT32 VBR */
   23a8c:	2000      	movs	r0, #0
   23a8e:	e7b8      	b.n	23a02 <check_fs+0x3a>
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (valid or invalid BS) */
   23a90:	2002      	movs	r0, #2
   23a92:	e7b6      	b.n	23a02 <check_fs+0x3a>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
   23a94:	2004      	movs	r0, #4
   23a96:	e7b4      	b.n	23a02 <check_fs+0x3a>
   23a98:	0003479c 	.word	0x0003479c

00023a9c <mount_volume>:
static FRESULT mount_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* !=0: Check write protection for write access */
)
{
   23a9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23aa0:	460c      	mov	r4, r1
   23aa2:	4615      	mov	r5, r2
	FATFS *fs;
	UINT fmt;


	/* Get logical drive number */
	*rfs = 0;
   23aa4:	2300      	movs	r3, #0
   23aa6:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
   23aa8:	f7ff ff40 	bl	2392c <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
   23aac:	1e06      	subs	r6, r0, #0
   23aae:	f2c0 811b 	blt.w	23ce8 <mount_volume+0x24c>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
   23ab2:	4ba1      	ldr	r3, [pc, #644]	; (23d38 <mount_volume+0x29c>)
   23ab4:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
   23ab8:	2f00      	cmp	r7, #0
   23aba:	f000 8119 	beq.w	23cf0 <mount_volume+0x254>
#if FF_FS_REENTRANT
	if (!lock_fs(fs)) return FR_TIMEOUT;	/* Lock the volume */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
   23abe:	6027      	str	r7, [r4, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
   23ac0:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
   23ac4:	783b      	ldrb	r3, [r7, #0]
   23ac6:	b173      	cbz	r3, 23ae6 <mount_volume+0x4a>
		stat = disk_status(fs->pdrv);
   23ac8:	7878      	ldrb	r0, [r7, #1]
   23aca:	f000 ff93 	bl	249f4 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
   23ace:	f010 0401 	ands.w	r4, r0, #1
   23ad2:	d108      	bne.n	23ae6 <mount_volume+0x4a>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
   23ad4:	2d00      	cmp	r5, #0
   23ad6:	f000 8108 	beq.w	23cea <mount_volume+0x24e>
   23ada:	f010 0f04 	tst.w	r0, #4
   23ade:	f000 8104 	beq.w	23cea <mount_volume+0x24e>
				return FR_WRITE_PROTECTED;
   23ae2:	240a      	movs	r4, #10
   23ae4:	e101      	b.n	23cea <mount_volume+0x24e>
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (find an FAT volume, analyze the BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Clear the filesystem object */
   23ae6:	2300      	movs	r3, #0
   23ae8:	703b      	strb	r3, [r7, #0]
	fs->pdrv = LD2PD(vol);				/* Volume hosting physical drive */
   23aea:	b2f0      	uxtb	r0, r6
   23aec:	7078      	strb	r0, [r7, #1]
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
   23aee:	f000 ff8f 	bl	24a10 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
   23af2:	f010 0401 	ands.w	r4, r0, #1
   23af6:	f040 80fd 	bne.w	23cf4 <mount_volume+0x258>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
	}
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
   23afa:	b11d      	cbz	r5, 23b04 <mount_volume+0x68>
   23afc:	f010 0f04 	tst.w	r0, #4
   23b00:	f040 80fa 	bne.w	23cf8 <mount_volume+0x25c>
	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT volume on the drive */
	fmt = find_volume(fs, LD2PT(vol));
   23b04:	2100      	movs	r1, #0
   23b06:	4638      	mov	r0, r7
   23b08:	f00b f910 	bl	2ed2c <find_volume>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
   23b0c:	2804      	cmp	r0, #4
   23b0e:	f000 80f5 	beq.w	23cfc <mount_volume+0x260>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
   23b12:	2801      	cmp	r0, #1
   23b14:	f200 80f4 	bhi.w	23d00 <mount_volume+0x264>
	bsect = fs->winsect;					/* Volume offset */
   23b18:	6afd      	ldr	r5, [r7, #44]	; 0x2c
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
   23b1a:	f107 003b 	add.w	r0, r7, #59	; 0x3b
   23b1e:	f00b f815 	bl	2eb4c <ld_word>
   23b22:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   23b26:	f040 80ed 	bne.w	23d04 <mount_volume+0x268>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
   23b2a:	f107 0046 	add.w	r0, r7, #70	; 0x46
   23b2e:	f00b f80d 	bl	2eb4c <ld_word>
   23b32:	4606      	mov	r6, r0
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
   23b34:	b920      	cbnz	r0, 23b40 <mount_volume+0xa4>
   23b36:	f107 0054 	add.w	r0, r7, #84	; 0x54
   23b3a:	f00b f80c 	bl	2eb56 <ld_dword>
   23b3e:	4606      	mov	r6, r0
		fs->fsize = fasize;
   23b40:	61be      	str	r6, [r7, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
   23b42:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
   23b46:	70ba      	strb	r2, [r7, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
   23b48:	1e53      	subs	r3, r2, #1
   23b4a:	b2db      	uxtb	r3, r3
   23b4c:	2b01      	cmp	r3, #1
   23b4e:	f200 80db 	bhi.w	23d08 <mount_volume+0x26c>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
   23b52:	fb06 f802 	mul.w	r8, r6, r2

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
   23b56:	f897 903d 	ldrb.w	r9, [r7, #61]	; 0x3d
   23b5a:	f8a7 900a 	strh.w	r9, [r7, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
   23b5e:	f1b9 0f00 	cmp.w	r9, #0
   23b62:	f000 80d3 	beq.w	23d0c <mount_volume+0x270>
   23b66:	f109 33ff 	add.w	r3, r9, #4294967295
   23b6a:	ea19 0f03 	tst.w	r9, r3
   23b6e:	f040 80cf 	bne.w	23d10 <mount_volume+0x274>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
   23b72:	f107 0041 	add.w	r0, r7, #65	; 0x41
   23b76:	f00a ffe9 	bl	2eb4c <ld_word>
   23b7a:	4682      	mov	sl, r0
   23b7c:	8138      	strh	r0, [r7, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
   23b7e:	f010 0f0f 	tst.w	r0, #15
   23b82:	f040 80c7 	bne.w	23d14 <mount_volume+0x278>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
   23b86:	f107 0043 	add.w	r0, r7, #67	; 0x43
   23b8a:	f00a ffdf 	bl	2eb4c <ld_word>
   23b8e:	4683      	mov	fp, r0
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
   23b90:	b920      	cbnz	r0, 23b9c <mount_volume+0x100>
   23b92:	f107 0050 	add.w	r0, r7, #80	; 0x50
   23b96:	f00a ffde 	bl	2eb56 <ld_dword>
   23b9a:	4683      	mov	fp, r0

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
   23b9c:	f107 003e 	add.w	r0, r7, #62	; 0x3e
   23ba0:	f00a ffd4 	bl	2eb4c <ld_word>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
   23ba4:	4602      	mov	r2, r0
   23ba6:	2800      	cmp	r0, #0
   23ba8:	f000 80b6 	beq.w	23d18 <mount_volume+0x27c>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
   23bac:	eb00 0308 	add.w	r3, r0, r8
   23bb0:	eb03 131a 	add.w	r3, r3, sl, lsr #4
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
   23bb4:	459b      	cmp	fp, r3
   23bb6:	f0c0 80b1 	bcc.w	23d1c <mount_volume+0x280>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
   23bba:	ebab 0b03 	sub.w	fp, fp, r3
   23bbe:	fbbb f1f9 	udiv	r1, fp, r9
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
   23bc2:	45cb      	cmp	fp, r9
   23bc4:	f0c0 80ac 	bcc.w	23d20 <mount_volume+0x284>
		fmt = 0;
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
   23bc8:	485c      	ldr	r0, [pc, #368]	; (23d3c <mount_volume+0x2a0>)
   23bca:	4281      	cmp	r1, r0
   23bcc:	d806      	bhi.n	23bdc <mount_volume+0x140>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
   23bce:	f64f 70f5 	movw	r0, #65525	; 0xfff5
   23bd2:	4281      	cmp	r1, r0
   23bd4:	d83f      	bhi.n	23c56 <mount_volume+0x1ba>
   23bd6:	f04f 0b02 	mov.w	fp, #2
   23bda:	e001      	b.n	23be0 <mount_volume+0x144>
		fmt = 0;
   23bdc:	f04f 0b00 	mov.w	fp, #0
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
   23be0:	f640 70f5 	movw	r0, #4085	; 0xff5
   23be4:	4281      	cmp	r1, r0
   23be6:	d939      	bls.n	23c5c <mount_volume+0x1c0>
		if (fmt == 0) return FR_NO_FILESYSTEM;
   23be8:	f1bb 0f00 	cmp.w	fp, #0
   23bec:	f000 809a 	beq.w	23d24 <mount_volume+0x288>

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
   23bf0:	f101 0902 	add.w	r9, r1, #2
   23bf4:	f8c7 9014 	str.w	r9, [r7, #20]
		fs->volbase = bsect;							/* Volume start sector */
   23bf8:	61fd      	str	r5, [r7, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
   23bfa:	442a      	add	r2, r5
   23bfc:	623a      	str	r2, [r7, #32]
		fs->database = bsect + sysect;					/* Data start sector */
   23bfe:	442b      	add	r3, r5
   23c00:	62bb      	str	r3, [r7, #40]	; 0x28
		if (fmt == FS_FAT32) {
   23c02:	f1bb 0f03 	cmp.w	fp, #3
   23c06:	d02c      	beq.n	23c62 <mount_volume+0x1c6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   23c08:	f1ba 0f00 	cmp.w	sl, #0
   23c0c:	f000 8090 	beq.w	23d30 <mount_volume+0x294>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
   23c10:	4442      	add	r2, r8
   23c12:	627a      	str	r2, [r7, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   23c14:	f1bb 0f02 	cmp.w	fp, #2
   23c18:	d034      	beq.n	23c84 <mount_volume+0x1e8>
   23c1a:	eb09 0349 	add.w	r3, r9, r9, lsl #1
   23c1e:	f009 0901 	and.w	r9, r9, #1
   23c22:	eb09 0953 	add.w	r9, r9, r3, lsr #1
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
   23c26:	f209 13ff 	addw	r3, r9, #511	; 0x1ff
   23c2a:	ebb6 2f53 	cmp.w	r6, r3, lsr #9
   23c2e:	f0c0 8081 	bcc.w	23d34 <mount_volume+0x298>

#if !FF_FS_READONLY
		/* Get FSInfo if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
   23c32:	f04f 33ff 	mov.w	r3, #4294967295
   23c36:	613b      	str	r3, [r7, #16]
   23c38:	60fb      	str	r3, [r7, #12]
		fs->fsi_flag = 0x80;
   23c3a:	2380      	movs	r3, #128	; 0x80
   23c3c:	713b      	strb	r3, [r7, #4]
#if (FF_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
   23c3e:	f1bb 0f03 	cmp.w	fp, #3
   23c42:	d022      	beq.n	23c8a <mount_volume+0x1ee>
		}
#endif	/* (FF_FS_NOFSINFO & 3) != 3 */
#endif	/* !FF_FS_READONLY */
	}

	fs->fs_type = (BYTE)fmt;/* FAT sub-type */
   23c44:	f887 b000 	strb.w	fp, [r7]
	fs->id = ++Fsid;		/* Volume mount ID */
   23c48:	4a3d      	ldr	r2, [pc, #244]	; (23d40 <mount_volume+0x2a4>)
   23c4a:	8813      	ldrh	r3, [r2, #0]
   23c4c:	3301      	adds	r3, #1
   23c4e:	b29b      	uxth	r3, r3
   23c50:	8013      	strh	r3, [r2, #0]
   23c52:	80fb      	strh	r3, [r7, #6]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if FF_FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
   23c54:	e049      	b.n	23cea <mount_volume+0x24e>
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
   23c56:	f04f 0b03 	mov.w	fp, #3
   23c5a:	e7c5      	b.n	23be8 <mount_volume+0x14c>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
   23c5c:	f04f 0b01 	mov.w	fp, #1
   23c60:	e7c6      	b.n	23bf0 <mount_volume+0x154>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
   23c62:	f107 005a 	add.w	r0, r7, #90	; 0x5a
   23c66:	f00a ff71 	bl	2eb4c <ld_word>
   23c6a:	2800      	cmp	r0, #0
   23c6c:	d15c      	bne.n	23d28 <mount_volume+0x28c>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
   23c6e:	f1ba 0f00 	cmp.w	sl, #0
   23c72:	d15b      	bne.n	23d2c <mount_volume+0x290>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
   23c74:	f107 005c 	add.w	r0, r7, #92	; 0x5c
   23c78:	f00a ff6d 	bl	2eb56 <ld_dword>
   23c7c:	6278      	str	r0, [r7, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
   23c7e:	ea4f 0989 	mov.w	r9, r9, lsl #2
   23c82:	e7d0      	b.n	23c26 <mount_volume+0x18a>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   23c84:	ea4f 0949 	mov.w	r9, r9, lsl #1
   23c88:	e7cd      	b.n	23c26 <mount_volume+0x18a>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
   23c8a:	f107 0060 	add.w	r0, r7, #96	; 0x60
   23c8e:	f00a ff5d 	bl	2eb4c <ld_word>
   23c92:	2801      	cmp	r0, #1
   23c94:	d1d6      	bne.n	23c44 <mount_volume+0x1a8>
			&& move_window(fs, bsect + 1) == FR_OK)
   23c96:	1c69      	adds	r1, r5, #1
   23c98:	4638      	mov	r0, r7
   23c9a:	f00b f82c 	bl	2ecf6 <move_window>
   23c9e:	2800      	cmp	r0, #0
   23ca0:	d1d0      	bne.n	23c44 <mount_volume+0x1a8>
			fs->fsi_flag = 0;
   23ca2:	2300      	movs	r3, #0
   23ca4:	713b      	strb	r3, [r7, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
   23ca6:	f207 202e 	addw	r0, r7, #558	; 0x22e
   23caa:	f00a ff4f 	bl	2eb4c <ld_word>
   23cae:	f64a 2355 	movw	r3, #43605	; 0xaa55
   23cb2:	4298      	cmp	r0, r3
   23cb4:	d1c6      	bne.n	23c44 <mount_volume+0x1a8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
   23cb6:	f107 0030 	add.w	r0, r7, #48	; 0x30
   23cba:	f00a ff4c 	bl	2eb56 <ld_dword>
   23cbe:	4b21      	ldr	r3, [pc, #132]	; (23d44 <mount_volume+0x2a8>)
   23cc0:	4298      	cmp	r0, r3
   23cc2:	d1bf      	bne.n	23c44 <mount_volume+0x1a8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
   23cc4:	f507 7005 	add.w	r0, r7, #532	; 0x214
   23cc8:	f00a ff45 	bl	2eb56 <ld_dword>
   23ccc:	4b1e      	ldr	r3, [pc, #120]	; (23d48 <mount_volume+0x2ac>)
   23cce:	4298      	cmp	r0, r3
   23cd0:	d1b8      	bne.n	23c44 <mount_volume+0x1a8>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
   23cd2:	f507 7006 	add.w	r0, r7, #536	; 0x218
   23cd6:	f00a ff3e 	bl	2eb56 <ld_dword>
   23cda:	6138      	str	r0, [r7, #16]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
   23cdc:	f507 7007 	add.w	r0, r7, #540	; 0x21c
   23ce0:	f00a ff39 	bl	2eb56 <ld_dword>
   23ce4:	60f8      	str	r0, [r7, #12]
   23ce6:	e7ad      	b.n	23c44 <mount_volume+0x1a8>
	if (vol < 0) return FR_INVALID_DRIVE;
   23ce8:	240b      	movs	r4, #11
}
   23cea:	4620      	mov	r0, r4
   23cec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
   23cf0:	240c      	movs	r4, #12
   23cf2:	e7fa      	b.n	23cea <mount_volume+0x24e>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
   23cf4:	2403      	movs	r4, #3
   23cf6:	e7f8      	b.n	23cea <mount_volume+0x24e>
		return FR_WRITE_PROTECTED;
   23cf8:	240a      	movs	r4, #10
   23cfa:	e7f6      	b.n	23cea <mount_volume+0x24e>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
   23cfc:	2401      	movs	r4, #1
   23cfe:	e7f4      	b.n	23cea <mount_volume+0x24e>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
   23d00:	240d      	movs	r4, #13
   23d02:	e7f2      	b.n	23cea <mount_volume+0x24e>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
   23d04:	240d      	movs	r4, #13
   23d06:	e7f0      	b.n	23cea <mount_volume+0x24e>
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
   23d08:	240d      	movs	r4, #13
   23d0a:	e7ee      	b.n	23cea <mount_volume+0x24e>
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
   23d0c:	240d      	movs	r4, #13
   23d0e:	e7ec      	b.n	23cea <mount_volume+0x24e>
   23d10:	240d      	movs	r4, #13
   23d12:	e7ea      	b.n	23cea <mount_volume+0x24e>
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
   23d14:	240d      	movs	r4, #13
   23d16:	e7e8      	b.n	23cea <mount_volume+0x24e>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
   23d18:	240d      	movs	r4, #13
   23d1a:	e7e6      	b.n	23cea <mount_volume+0x24e>
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
   23d1c:	240d      	movs	r4, #13
   23d1e:	e7e4      	b.n	23cea <mount_volume+0x24e>
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
   23d20:	240d      	movs	r4, #13
   23d22:	e7e2      	b.n	23cea <mount_volume+0x24e>
		if (fmt == 0) return FR_NO_FILESYSTEM;
   23d24:	240d      	movs	r4, #13
   23d26:	e7e0      	b.n	23cea <mount_volume+0x24e>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
   23d28:	240d      	movs	r4, #13
   23d2a:	e7de      	b.n	23cea <mount_volume+0x24e>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
   23d2c:	240d      	movs	r4, #13
   23d2e:	e7dc      	b.n	23cea <mount_volume+0x24e>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   23d30:	240d      	movs	r4, #13
   23d32:	e7da      	b.n	23cea <mount_volume+0x24e>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
   23d34:	240d      	movs	r4, #13
   23d36:	e7d8      	b.n	23cea <mount_volume+0x24e>
   23d38:	20008b70 	.word	0x20008b70
   23d3c:	0ffffff5 	.word	0x0ffffff5
   23d40:	200090b6 	.word	0x200090b6
   23d44:	41615252 	.word	0x41615252
   23d48:	61417272 	.word	0x61417272

00023d4c <create_name>:
{
   23d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23d50:	b083      	sub	sp, #12
   23d52:	4682      	mov	sl, r0
   23d54:	9100      	str	r1, [sp, #0]
	p = *path; sfn = dp->fn;
   23d56:	f8d1 8000 	ldr.w	r8, [r1]
   23d5a:	f100 0b20 	add.w	fp, r0, #32
	memset(sfn, ' ', 11);
   23d5e:	220b      	movs	r2, #11
   23d60:	2120      	movs	r1, #32
   23d62:	4658      	mov	r0, fp
   23d64:	f005 ff54 	bl	29c10 <memset>
	si = i = 0; ni = 8;
   23d68:	2700      	movs	r7, #0
   23d6a:	463d      	mov	r5, r7
   23d6c:	f04f 0908 	mov.w	r9, #8
   23d70:	e01a      	b.n	23da8 <create_name+0x5c>
			while (IsSeparator(p[si])) si++;	/* Skip duplicated separator if exist */
   23d72:	3601      	adds	r6, #1
   23d74:	f818 3006 	ldrb.w	r3, [r8, r6]
   23d78:	2b2f      	cmp	r3, #47	; 0x2f
   23d7a:	d0fa      	beq.n	23d72 <create_name+0x26>
   23d7c:	2b5c      	cmp	r3, #92	; 0x5c
   23d7e:	d0f8      	beq.n	23d72 <create_name+0x26>
	*path = &p[si];						/* Return pointer to the next segment */
   23d80:	4446      	add	r6, r8
   23d82:	9b00      	ldr	r3, [sp, #0]
   23d84:	601e      	str	r6, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
   23d86:	2f00      	cmp	r7, #0
   23d88:	d067      	beq.n	23e5a <create_name+0x10e>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
   23d8a:	f89a 2020 	ldrb.w	r2, [sl, #32]
   23d8e:	2ae5      	cmp	r2, #229	; 0xe5
   23d90:	d050      	beq.n	23e34 <create_name+0xe8>
	sfn[NSFLAG] = (c <= ' ' || p[si] <= ' ') ? NS_LAST : 0;	/* Set last segment flag if end of the path */
   23d92:	2c20      	cmp	r4, #32
   23d94:	d952      	bls.n	23e3c <create_name+0xf0>
   23d96:	7833      	ldrb	r3, [r6, #0]
   23d98:	2b20      	cmp	r3, #32
   23d9a:	d854      	bhi.n	23e46 <create_name+0xfa>
   23d9c:	2304      	movs	r3, #4
   23d9e:	e04e      	b.n	23e3e <create_name+0xf2>
			i = 8; ni = 11;				/* Enter file extension field */
   23da0:	2708      	movs	r7, #8
   23da2:	f04f 090b 	mov.w	r9, #11
   23da6:	4635      	mov	r5, r6
		c = (BYTE)p[si++];				/* Get a byte */
   23da8:	1c6e      	adds	r6, r5, #1
   23daa:	f818 4005 	ldrb.w	r4, [r8, r5]
		if (c <= ' ') break; 			/* Break if end of the path name */
   23dae:	2c20      	cmp	r4, #32
   23db0:	d9e6      	bls.n	23d80 <create_name+0x34>
		if (IsSeparator(c)) {			/* Break if a separator is found */
   23db2:	2c2f      	cmp	r4, #47	; 0x2f
   23db4:	d0de      	beq.n	23d74 <create_name+0x28>
   23db6:	2c5c      	cmp	r4, #92	; 0x5c
   23db8:	d0dc      	beq.n	23d74 <create_name+0x28>
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
   23dba:	2c2e      	cmp	r4, #46	; 0x2e
   23dbc:	d001      	beq.n	23dc2 <create_name+0x76>
   23dbe:	45b9      	cmp	r9, r7
   23dc0:	d808      	bhi.n	23dd4 <create_name+0x88>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
   23dc2:	f1b9 0f0b 	cmp.w	r9, #11
   23dc6:	d040      	beq.n	23e4a <create_name+0xfe>
   23dc8:	2c2e      	cmp	r4, #46	; 0x2e
   23dca:	d0e9      	beq.n	23da0 <create_name+0x54>
   23dcc:	2006      	movs	r0, #6
}
   23dce:	b003      	add	sp, #12
   23dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (c >= 0x80) {				/* Is SBC extended character? */
   23dd4:	f014 0f80 	tst.w	r4, #128	; 0x80
   23dd8:	d117      	bne.n	23e0a <create_name+0xbe>
		if (dbc_1st(c)) {				/* Check if it is a DBC 1st byte */
   23dda:	4620      	mov	r0, r4
   23ddc:	f00a fed4 	bl	2eb88 <dbc_1st>
   23de0:	b1c0      	cbz	r0, 23e14 <create_name+0xc8>
			d = (BYTE)p[si++];			/* Get 2nd byte */
   23de2:	1cab      	adds	r3, r5, #2
   23de4:	9301      	str	r3, [sp, #4]
   23de6:	f818 5006 	ldrb.w	r5, [r8, r6]
			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
   23dea:	4628      	mov	r0, r5
   23dec:	f00a fece 	bl	2eb8c <dbc_2nd>
   23df0:	b368      	cbz	r0, 23e4e <create_name+0x102>
   23df2:	f109 33ff 	add.w	r3, r9, #4294967295
   23df6:	42bb      	cmp	r3, r7
   23df8:	d92b      	bls.n	23e52 <create_name+0x106>
			sfn[i++] = c;
   23dfa:	1c7b      	adds	r3, r7, #1
   23dfc:	f80b 4007 	strb.w	r4, [fp, r7]
			sfn[i++] = d;
   23e00:	f80b 5003 	strb.w	r5, [fp, r3]
   23e04:	3702      	adds	r7, #2
			d = (BYTE)p[si++];			/* Get 2nd byte */
   23e06:	9e01      	ldr	r6, [sp, #4]
   23e08:	e7cd      	b.n	23da6 <create_name+0x5a>
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
   23e0a:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   23e0e:	4b14      	ldr	r3, [pc, #80]	; (23e60 <create_name+0x114>)
   23e10:	5d1c      	ldrb	r4, [r3, r4]
   23e12:	e7e2      	b.n	23dda <create_name+0x8e>
			if (strchr("*+,:;<=>[]|\"\?\x7F", (int)c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
   23e14:	4621      	mov	r1, r4
   23e16:	4813      	ldr	r0, [pc, #76]	; (23e64 <create_name+0x118>)
   23e18:	f005 fe70 	bl	29afc <strchr>
   23e1c:	b9d8      	cbnz	r0, 23e56 <create_name+0x10a>
			if (IsLower(c)) c -= 0x20;	/* To upper */
   23e1e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
   23e22:	b2db      	uxtb	r3, r3
   23e24:	2b19      	cmp	r3, #25
   23e26:	d801      	bhi.n	23e2c <create_name+0xe0>
   23e28:	3c20      	subs	r4, #32
   23e2a:	b2e4      	uxtb	r4, r4
			sfn[i++] = c;
   23e2c:	f80b 4007 	strb.w	r4, [fp, r7]
   23e30:	3701      	adds	r7, #1
   23e32:	e7b8      	b.n	23da6 <create_name+0x5a>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
   23e34:	2205      	movs	r2, #5
   23e36:	f88a 2020 	strb.w	r2, [sl, #32]
   23e3a:	e7aa      	b.n	23d92 <create_name+0x46>
	sfn[NSFLAG] = (c <= ' ' || p[si] <= ' ') ? NS_LAST : 0;	/* Set last segment flag if end of the path */
   23e3c:	2304      	movs	r3, #4
   23e3e:	f88a 302b 	strb.w	r3, [sl, #43]	; 0x2b
	return FR_OK;
   23e42:	2000      	movs	r0, #0
   23e44:	e7c3      	b.n	23dce <create_name+0x82>
	sfn[NSFLAG] = (c <= ' ' || p[si] <= ' ') ? NS_LAST : 0;	/* Set last segment flag if end of the path */
   23e46:	2300      	movs	r3, #0
   23e48:	e7f9      	b.n	23e3e <create_name+0xf2>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
   23e4a:	2006      	movs	r0, #6
   23e4c:	e7bf      	b.n	23dce <create_name+0x82>
			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
   23e4e:	2006      	movs	r0, #6
   23e50:	e7bd      	b.n	23dce <create_name+0x82>
   23e52:	2006      	movs	r0, #6
   23e54:	e7bb      	b.n	23dce <create_name+0x82>
			if (strchr("*+,:;<=>[]|\"\?\x7F", (int)c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
   23e56:	2006      	movs	r0, #6
   23e58:	e7b9      	b.n	23dce <create_name+0x82>
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
   23e5a:	2006      	movs	r0, #6
   23e5c:	e7b7      	b.n	23dce <create_name+0x82>
   23e5e:	bf00      	nop
   23e60:	0003481c 	.word	0x0003481c
   23e64:	000347a8 	.word	0x000347a8

00023e68 <sync_fs>:
{
   23e68:	b570      	push	{r4, r5, r6, lr}
   23e6a:	4604      	mov	r4, r0
	res = sync_window(fs);
   23e6c:	f00a ff1f 	bl	2ecae <sync_window>
	if (res == FR_OK) {
   23e70:	4605      	mov	r5, r0
   23e72:	b948      	cbnz	r0, 23e88 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
   23e74:	7823      	ldrb	r3, [r4, #0]
   23e76:	2b03      	cmp	r3, #3
   23e78:	d008      	beq.n	23e8c <sync_fs+0x24>
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
   23e7a:	2200      	movs	r2, #0
   23e7c:	4611      	mov	r1, r2
   23e7e:	7860      	ldrb	r0, [r4, #1]
   23e80:	f000 fdf0 	bl	24a64 <disk_ioctl>
   23e84:	b100      	cbz	r0, 23e88 <sync_fs+0x20>
   23e86:	2501      	movs	r5, #1
}
   23e88:	4628      	mov	r0, r5
   23e8a:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
   23e8c:	7923      	ldrb	r3, [r4, #4]
   23e8e:	2b01      	cmp	r3, #1
   23e90:	d1f3      	bne.n	23e7a <sync_fs+0x12>
			memset(fs->win, 0, sizeof fs->win);
   23e92:	f104 0630 	add.w	r6, r4, #48	; 0x30
   23e96:	f44f 7200 	mov.w	r2, #512	; 0x200
   23e9a:	2100      	movs	r1, #0
   23e9c:	4630      	mov	r0, r6
   23e9e:	f005 feb7 	bl	29c10 <memset>
			st_word(fs->win + BS_55AA, 0xAA55);					/* Boot signature */
   23ea2:	f64a 2155 	movw	r1, #43605	; 0xaa55
   23ea6:	f204 202e 	addw	r0, r4, #558	; 0x22e
   23eaa:	f00a fe5f 	bl	2eb6c <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);		/* Leading signature */
   23eae:	490f      	ldr	r1, [pc, #60]	; (23eec <sync_fs+0x84>)
   23eb0:	4630      	mov	r0, r6
   23eb2:	f00a fe5f 	bl	2eb74 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);		/* Structure signature */
   23eb6:	490e      	ldr	r1, [pc, #56]	; (23ef0 <sync_fs+0x88>)
   23eb8:	f504 7005 	add.w	r0, r4, #532	; 0x214
   23ebc:	f00a fe5a 	bl	2eb74 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);	/* Number of free clusters */
   23ec0:	6921      	ldr	r1, [r4, #16]
   23ec2:	f504 7006 	add.w	r0, r4, #536	; 0x218
   23ec6:	f00a fe55 	bl	2eb74 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);	/* Last allocated culuster */
   23eca:	68e1      	ldr	r1, [r4, #12]
   23ecc:	f504 7007 	add.w	r0, r4, #540	; 0x21c
   23ed0:	f00a fe50 	bl	2eb74 <st_dword>
			fs->winsect = fs->volbase + 1;						/* Write it into the FSInfo sector (Next to VBR) */
   23ed4:	69e2      	ldr	r2, [r4, #28]
   23ed6:	3201      	adds	r2, #1
   23ed8:	62e2      	str	r2, [r4, #44]	; 0x2c
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
   23eda:	2301      	movs	r3, #1
   23edc:	4631      	mov	r1, r6
   23ede:	7860      	ldrb	r0, [r4, #1]
   23ee0:	f000 fdb2 	bl	24a48 <disk_write>
			fs->fsi_flag = 0;
   23ee4:	2300      	movs	r3, #0
   23ee6:	7123      	strb	r3, [r4, #4]
   23ee8:	e7c7      	b.n	23e7a <sync_fs+0x12>
   23eea:	bf00      	nop
   23eec:	41615252 	.word	0x41615252
   23ef0:	61417272 	.word	0x61417272

00023ef4 <create_partition>:
	BYTE drv,			/* Physical drive number */
	const LBA_t plst[],	/* Partition list */
	BYTE sys,			/* System ID (for only MBR, temp setting) */
	BYTE* buf			/* Working buffer for a sector */
)
{
   23ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23ef8:	b085      	sub	sp, #20
   23efa:	9001      	str	r0, [sp, #4]
   23efc:	468b      	mov	fp, r1
   23efe:	9200      	str	r2, [sp, #0]
   23f00:	469a      	mov	sl, r3
	DWORD sz_drv32, nxt_alloc32, sz_part32;
	BYTE *pte;
	BYTE hd, n_hd, sc, n_sc;

	/* Get physical drive size */
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &sz_drv) != RES_OK) return FR_DISK_ERR;
   23f02:	aa03      	add	r2, sp, #12
   23f04:	2101      	movs	r1, #1
   23f06:	f000 fdad 	bl	24a64 <disk_ioctl>
   23f0a:	2800      	cmp	r0, #0
   23f0c:	f040 8088 	bne.w	24020 <create_partition+0x12c>
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;

	} else
#endif
	{	/* Create partitions in MBR format */
		sz_drv32 = (DWORD)sz_drv;
   23f10:	f8dd 800c 	ldr.w	r8, [sp, #12]
		n_sc = N_SEC_TRACK;				/* Determine drive CHS without any consideration of the drive geometry */
		for (n_hd = 8; n_hd != 0 && sz_drv32 / n_hd / n_sc > 1024; n_hd *= 2) ;
   23f14:	2408      	movs	r4, #8
   23f16:	b144      	cbz	r4, 23f2a <create_partition+0x36>
   23f18:	fbb8 f2f4 	udiv	r2, r8, r4
   23f1c:	f64f 433e 	movw	r3, #64574	; 0xfc3e
   23f20:	429a      	cmp	r2, r3
   23f22:	d902      	bls.n	23f2a <create_partition+0x36>
   23f24:	0064      	lsls	r4, r4, #1
   23f26:	b2e4      	uxtb	r4, r4
   23f28:	e7f5      	b.n	23f16 <create_partition+0x22>
		if (n_hd == 0) n_hd = 255;		/* Number of heads needs to be <256 */
   23f2a:	b904      	cbnz	r4, 23f2e <create_partition+0x3a>
   23f2c:	24ff      	movs	r4, #255	; 0xff

		memset(buf, 0, FF_MAX_SS);		/* Clear MBR */
   23f2e:	f44f 7200 	mov.w	r2, #512	; 0x200
   23f32:	2100      	movs	r1, #0
   23f34:	4650      	mov	r0, sl
   23f36:	f005 fe6b 	bl	29c10 <memset>
		pte = buf + MBR_Table;	/* Partition table in the MBR */
   23f3a:	f50a 76df 	add.w	r6, sl, #446	; 0x1be
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
   23f3e:	253f      	movs	r5, #63	; 0x3f
   23f40:	f04f 0900 	mov.w	r9, #0
   23f44:	e045      	b.n	23fd2 <create_partition+0xde>
			sz_part32 = (DWORD)plst[i];	/* Get partition size */
			if (sz_part32 <= 100) sz_part32 = (sz_part32 == 100) ? sz_drv32 : sz_drv32 / 100 * sz_part32;	/* Size in percentage? */
   23f46:	4647      	mov	r7, r8
   23f48:	e054      	b.n	23ff4 <create_partition+0x100>
			if (nxt_alloc32 + sz_part32 > sz_drv32 || nxt_alloc32 + sz_part32 < nxt_alloc32) sz_part32 = sz_drv32 - nxt_alloc32;	/* Clip at drive size */
   23f4a:	eba8 0705 	sub.w	r7, r8, r5
			if (sz_part32 == 0) break;	/* End of table or no sector to allocate? */
   23f4e:	2f00      	cmp	r7, #0
   23f50:	d056      	beq.n	24000 <create_partition+0x10c>

			st_dword(pte + PTE_StLba, nxt_alloc32);	/* Start LBA */
   23f52:	4629      	mov	r1, r5
   23f54:	f106 0008 	add.w	r0, r6, #8
   23f58:	f00a fe0c 	bl	2eb74 <st_dword>
			st_dword(pte + PTE_SizLba, sz_part32);	/* Number of sectors */
   23f5c:	4639      	mov	r1, r7
   23f5e:	f106 000c 	add.w	r0, r6, #12
   23f62:	f00a fe07 	bl	2eb74 <st_dword>
			pte[PTE_System] = sys;					/* System type */
   23f66:	9b00      	ldr	r3, [sp, #0]
   23f68:	7133      	strb	r3, [r6, #4]

			cy = (UINT)(nxt_alloc32 / n_sc / n_hd);	/* Start cylinder */
   23f6a:	4a2f      	ldr	r2, [pc, #188]	; (24028 <create_partition+0x134>)
   23f6c:	fba2 1305 	umull	r1, r3, r2, r5
   23f70:	1ae9      	subs	r1, r5, r3
   23f72:	eb03 0351 	add.w	r3, r3, r1, lsr #1
   23f76:	095b      	lsrs	r3, r3, #5
   23f78:	fbb3 f1f4 	udiv	r1, r3, r4
			hd = (BYTE)(nxt_alloc32 / n_sc % n_hd);	/* Start head */
   23f7c:	fb04 3011 	mls	r0, r4, r1, r3
			sc = (BYTE)(nxt_alloc32 % n_sc + 1);	/* Start sector */
   23f80:	ebc3 1383 	rsb	r3, r3, r3, lsl #6
   23f84:	1aeb      	subs	r3, r5, r3
   23f86:	b2db      	uxtb	r3, r3
   23f88:	3301      	adds	r3, #1
   23f8a:	b2db      	uxtb	r3, r3
			pte[PTE_StHead] = hd;
   23f8c:	7070      	strb	r0, [r6, #1]
			pte[PTE_StSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
   23f8e:	0888      	lsrs	r0, r1, #2
   23f90:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   23f94:	4303      	orrs	r3, r0
   23f96:	70b3      	strb	r3, [r6, #2]
			pte[PTE_StCyl] = (BYTE)cy;
   23f98:	70f1      	strb	r1, [r6, #3]

			cy = (UINT)((nxt_alloc32 + sz_part32 - 1) / n_sc / n_hd);	/* End cylinder */
   23f9a:	443d      	add	r5, r7
   23f9c:	1e6b      	subs	r3, r5, #1
   23f9e:	fba2 1203 	umull	r1, r2, r2, r3
   23fa2:	1a99      	subs	r1, r3, r2
   23fa4:	eb02 0251 	add.w	r2, r2, r1, lsr #1
   23fa8:	0952      	lsrs	r2, r2, #5
   23faa:	fbb2 f1f4 	udiv	r1, r2, r4
			hd = (BYTE)((nxt_alloc32 + sz_part32 - 1) / n_sc % n_hd);	/* End head */
   23fae:	fb04 2011 	mls	r0, r4, r1, r2
			sc = (BYTE)((nxt_alloc32 + sz_part32 - 1) % n_sc + 1);		/* End sector */
   23fb2:	ebc2 1282 	rsb	r2, r2, r2, lsl #6
   23fb6:	1a9b      	subs	r3, r3, r2
   23fb8:	b2db      	uxtb	r3, r3
   23fba:	3301      	adds	r3, #1
   23fbc:	b2db      	uxtb	r3, r3
			pte[PTE_EdHead] = hd;
   23fbe:	7170      	strb	r0, [r6, #5]
			pte[PTE_EdSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
   23fc0:	088a      	lsrs	r2, r1, #2
   23fc2:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   23fc6:	4313      	orrs	r3, r2
   23fc8:	71b3      	strb	r3, [r6, #6]
			pte[PTE_EdCyl] = (BYTE)cy;
   23fca:	71f1      	strb	r1, [r6, #7]

			pte += SZ_PTE;		/* Next entry */
   23fcc:	3610      	adds	r6, #16
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
   23fce:	f109 0901 	add.w	r9, r9, #1
   23fd2:	f1b9 0f03 	cmp.w	r9, #3
   23fd6:	d813      	bhi.n	24000 <create_partition+0x10c>
   23fd8:	b195      	cbz	r5, 24000 <create_partition+0x10c>
   23fda:	4545      	cmp	r5, r8
   23fdc:	d210      	bcs.n	24000 <create_partition+0x10c>
			sz_part32 = (DWORD)plst[i];	/* Get partition size */
   23fde:	f85b 7029 	ldr.w	r7, [fp, r9, lsl #2]
			if (sz_part32 <= 100) sz_part32 = (sz_part32 == 100) ? sz_drv32 : sz_drv32 / 100 * sz_part32;	/* Size in percentage? */
   23fe2:	2f64      	cmp	r7, #100	; 0x64
   23fe4:	d806      	bhi.n	23ff4 <create_partition+0x100>
   23fe6:	d0ae      	beq.n	23f46 <create_partition+0x52>
   23fe8:	4b10      	ldr	r3, [pc, #64]	; (2402c <create_partition+0x138>)
   23fea:	fba3 2308 	umull	r2, r3, r3, r8
   23fee:	095b      	lsrs	r3, r3, #5
   23ff0:	fb03 f707 	mul.w	r7, r3, r7
			if (nxt_alloc32 + sz_part32 > sz_drv32 || nxt_alloc32 + sz_part32 < nxt_alloc32) sz_part32 = sz_drv32 - nxt_alloc32;	/* Clip at drive size */
   23ff4:	19eb      	adds	r3, r5, r7
   23ff6:	4543      	cmp	r3, r8
   23ff8:	d8a7      	bhi.n	23f4a <create_partition+0x56>
   23ffa:	42ab      	cmp	r3, r5
   23ffc:	d2a7      	bcs.n	23f4e <create_partition+0x5a>
   23ffe:	e7a4      	b.n	23f4a <create_partition+0x56>
		}

		st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
   24000:	f64a 2155 	movw	r1, #43605	; 0xaa55
   24004:	f50a 70ff 	add.w	r0, sl, #510	; 0x1fe
   24008:	f00a fdb0 	bl	2eb6c <st_word>
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
   2400c:	2301      	movs	r3, #1
   2400e:	2200      	movs	r2, #0
   24010:	4651      	mov	r1, sl
   24012:	9801      	ldr	r0, [sp, #4]
   24014:	f000 fd18 	bl	24a48 <disk_write>
   24018:	b920      	cbnz	r0, 24024 <create_partition+0x130>
	}

	return FR_OK;
}
   2401a:	b005      	add	sp, #20
   2401c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &sz_drv) != RES_OK) return FR_DISK_ERR;
   24020:	2001      	movs	r0, #1
   24022:	e7fa      	b.n	2401a <create_partition+0x126>
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
   24024:	2001      	movs	r0, #1
   24026:	e7f8      	b.n	2401a <create_partition+0x126>
   24028:	04104105 	.word	0x04104105
   2402c:	51eb851f 	.word	0x51eb851f

00024030 <f_mount>:
{
   24030:	b510      	push	{r4, lr}
   24032:	b084      	sub	sp, #16
   24034:	9001      	str	r0, [sp, #4]
   24036:	9100      	str	r1, [sp, #0]
   24038:	4614      	mov	r4, r2
	const TCHAR *rp = path;
   2403a:	9103      	str	r1, [sp, #12]
	vol = get_ldnumber(&rp);
   2403c:	a803      	add	r0, sp, #12
   2403e:	f7ff fc75 	bl	2392c <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
   24042:	2800      	cmp	r0, #0
   24044:	db17      	blt.n	24076 <f_mount+0x46>
	cfs = FatFs[vol];					/* Pointer to fs object */
   24046:	4b0d      	ldr	r3, [pc, #52]	; (2407c <f_mount+0x4c>)
   24048:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	if (cfs) {
   2404c:	b10b      	cbz	r3, 24052 <f_mount+0x22>
		cfs->fs_type = 0;				/* Clear old fs object */
   2404e:	2200      	movs	r2, #0
   24050:	701a      	strb	r2, [r3, #0]
	if (fs) {
   24052:	9b01      	ldr	r3, [sp, #4]
   24054:	b10b      	cbz	r3, 2405a <f_mount+0x2a>
		fs->fs_type = 0;				/* Clear new fs object */
   24056:	2200      	movs	r2, #0
   24058:	701a      	strb	r2, [r3, #0]
	FatFs[vol] = fs;					/* Register new fs object */
   2405a:	4b08      	ldr	r3, [pc, #32]	; (2407c <f_mount+0x4c>)
   2405c:	9a01      	ldr	r2, [sp, #4]
   2405e:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
   24062:	b914      	cbnz	r4, 2406a <f_mount+0x3a>
   24064:	4620      	mov	r0, r4
}
   24066:	b004      	add	sp, #16
   24068:	bd10      	pop	{r4, pc}
	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
   2406a:	2200      	movs	r2, #0
   2406c:	a901      	add	r1, sp, #4
   2406e:	4668      	mov	r0, sp
   24070:	f7ff fd14 	bl	23a9c <mount_volume>
	LEAVE_FF(fs, res);
   24074:	e7f7      	b.n	24066 <f_mount+0x36>
	if (vol < 0) return FR_INVALID_DRIVE;
   24076:	200b      	movs	r0, #11
   24078:	e7f5      	b.n	24066 <f_mount+0x36>
   2407a:	bf00      	nop
   2407c:	20008b70 	.word	0x20008b70

00024080 <f_open>:
{
   24080:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   24084:	b08f      	sub	sp, #60	; 0x3c
   24086:	9101      	str	r1, [sp, #4]
	if (!fp) return FR_INVALID_OBJECT;
   24088:	2800      	cmp	r0, #0
   2408a:	f000 80dd 	beq.w	24248 <f_open+0x1c8>
   2408e:	4614      	mov	r4, r2
   24090:	4606      	mov	r6, r0
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
   24092:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = mount_volume(&path, &fs, mode);
   24096:	463a      	mov	r2, r7
   24098:	a902      	add	r1, sp, #8
   2409a:	a801      	add	r0, sp, #4
   2409c:	f7ff fcfe 	bl	23a9c <mount_volume>
	if (res == FR_OK) {
   240a0:	4605      	mov	r5, r0
   240a2:	b128      	cbz	r0, 240b0 <f_open+0x30>
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
   240a4:	2300      	movs	r3, #0
   240a6:	6033      	str	r3, [r6, #0]
}
   240a8:	4628      	mov	r0, r5
   240aa:	b00f      	add	sp, #60	; 0x3c
   240ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		dj.obj.fs = fs;
   240b0:	9b02      	ldr	r3, [sp, #8]
   240b2:	9303      	str	r3, [sp, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
   240b4:	9901      	ldr	r1, [sp, #4]
   240b6:	a803      	add	r0, sp, #12
   240b8:	f00b f9a3 	bl	2f402 <follow_path>
		if (res == FR_OK) {
   240bc:	4605      	mov	r5, r0
   240be:	b918      	cbnz	r0, 240c8 <f_open+0x48>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
   240c0:	f99d 3037 	ldrsb.w	r3, [sp, #55]	; 0x37
   240c4:	2b00      	cmp	r3, #0
   240c6:	db46      	blt.n	24156 <f_open+0xd6>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   240c8:	f014 0f1c 	tst.w	r4, #28
   240cc:	d054      	beq.n	24178 <f_open+0xf8>
			if (res != FR_OK) {					/* No file, create new */
   240ce:	2d00      	cmp	r5, #0
   240d0:	d048      	beq.n	24164 <f_open+0xe4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
   240d2:	2d04      	cmp	r5, #4
   240d4:	d041      	beq.n	2415a <f_open+0xda>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
   240d6:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
   240da:	2d00      	cmp	r5, #0
   240dc:	d1e2      	bne.n	240a4 <f_open+0x24>
   240de:	f017 0f08 	tst.w	r7, #8
   240e2:	d059      	beq.n	24198 <f_open+0x118>
					st_dword(dj.dir + DIR_CrtTime, tm);
   240e4:	4c59      	ldr	r4, [pc, #356]	; (2424c <f_open+0x1cc>)
   240e6:	4621      	mov	r1, r4
   240e8:	980a      	ldr	r0, [sp, #40]	; 0x28
   240ea:	300e      	adds	r0, #14
   240ec:	f00a fd42 	bl	2eb74 <st_dword>
					st_dword(dj.dir + DIR_ModTime, tm);
   240f0:	4621      	mov	r1, r4
   240f2:	980a      	ldr	r0, [sp, #40]	; 0x28
   240f4:	3016      	adds	r0, #22
   240f6:	f00a fd3d 	bl	2eb74 <st_dword>
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
   240fa:	f8dd 8008 	ldr.w	r8, [sp, #8]
   240fe:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   24102:	4649      	mov	r1, r9
   24104:	4640      	mov	r0, r8
   24106:	f00a fd4f 	bl	2eba8 <ld_clust>
   2410a:	4604      	mov	r4, r0
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
   2410c:	2320      	movs	r3, #32
   2410e:	f889 300b 	strb.w	r3, [r9, #11]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
   24112:	2200      	movs	r2, #0
   24114:	990a      	ldr	r1, [sp, #40]	; 0x28
   24116:	4640      	mov	r0, r8
   24118:	f00a fd59 	bl	2ebce <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
   2411c:	2100      	movs	r1, #0
   2411e:	980a      	ldr	r0, [sp, #40]	; 0x28
   24120:	301c      	adds	r0, #28
   24122:	f00a fd27 	bl	2eb74 <st_dword>
					fs->wflag = 1;
   24126:	9b02      	ldr	r3, [sp, #8]
   24128:	2201      	movs	r2, #1
   2412a:	70da      	strb	r2, [r3, #3]
					if (cl != 0) {						/* Remove the cluster chain if exist */
   2412c:	b3a4      	cbz	r4, 24198 <f_open+0x118>
						sc = fs->winsect;
   2412e:	9b02      	ldr	r3, [sp, #8]
   24130:	f8d3 802c 	ldr.w	r8, [r3, #44]	; 0x2c
						res = remove_chain(&dj.obj, cl, 0);
   24134:	2200      	movs	r2, #0
   24136:	4621      	mov	r1, r4
   24138:	a803      	add	r0, sp, #12
   2413a:	f00b f804 	bl	2f146 <remove_chain>
						if (res == FR_OK) {
   2413e:	4605      	mov	r5, r0
   24140:	2800      	cmp	r0, #0
   24142:	d1af      	bne.n	240a4 <f_open+0x24>
							res = move_window(fs, sc);
   24144:	4641      	mov	r1, r8
   24146:	9802      	ldr	r0, [sp, #8]
   24148:	f00a fdd5 	bl	2ecf6 <move_window>
   2414c:	4605      	mov	r5, r0
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
   2414e:	3c01      	subs	r4, #1
   24150:	9b02      	ldr	r3, [sp, #8]
   24152:	60dc      	str	r4, [r3, #12]
   24154:	e020      	b.n	24198 <f_open+0x118>
				res = FR_INVALID_NAME;
   24156:	2506      	movs	r5, #6
   24158:	e7b6      	b.n	240c8 <f_open+0x48>
					res = dir_register(&dj);
   2415a:	a803      	add	r0, sp, #12
   2415c:	f00b f997 	bl	2f48e <dir_register>
   24160:	4605      	mov	r5, r0
   24162:	e7b8      	b.n	240d6 <f_open+0x56>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   24164:	f89d 3012 	ldrb.w	r3, [sp, #18]
   24168:	f013 0f11 	tst.w	r3, #17
   2416c:	d113      	bne.n	24196 <f_open+0x116>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
   2416e:	f014 0f04 	tst.w	r4, #4
   24172:	d0b2      	beq.n	240da <f_open+0x5a>
   24174:	2508      	movs	r5, #8
   24176:	e795      	b.n	240a4 <f_open+0x24>
			if (res == FR_OK) {					/* Is the object exsiting? */
   24178:	2d00      	cmp	r5, #0
   2417a:	d193      	bne.n	240a4 <f_open+0x24>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
   2417c:	f89d 3012 	ldrb.w	r3, [sp, #18]
   24180:	f013 0f10 	tst.w	r3, #16
   24184:	d15c      	bne.n	24240 <f_open+0x1c0>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
   24186:	f014 0f02 	tst.w	r4, #2
   2418a:	d005      	beq.n	24198 <f_open+0x118>
   2418c:	f013 0f01 	tst.w	r3, #1
   24190:	d002      	beq.n	24198 <f_open+0x118>
						res = FR_DENIED;
   24192:	2507      	movs	r5, #7
   24194:	e786      	b.n	240a4 <f_open+0x24>
					res = FR_DENIED;
   24196:	2507      	movs	r5, #7
		if (res == FR_OK) {
   24198:	2d00      	cmp	r5, #0
   2419a:	d183      	bne.n	240a4 <f_open+0x24>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
   2419c:	f017 0f08 	tst.w	r7, #8
   241a0:	d001      	beq.n	241a6 <f_open+0x126>
   241a2:	f047 0740 	orr.w	r7, r7, #64	; 0x40
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
   241a6:	f8dd 9008 	ldr.w	r9, [sp, #8]
   241aa:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
   241ae:	6233      	str	r3, [r6, #32]
			fp->dir_ptr = dj.dir;
   241b0:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   241b4:	f8c6 8024 	str.w	r8, [r6, #36]	; 0x24
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
   241b8:	4641      	mov	r1, r8
   241ba:	4648      	mov	r0, r9
   241bc:	f00a fcf4 	bl	2eba8 <ld_clust>
   241c0:	4604      	mov	r4, r0
   241c2:	60b0      	str	r0, [r6, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
   241c4:	f108 001c 	add.w	r0, r8, #28
   241c8:	f00a fcc5 	bl	2eb56 <ld_dword>
   241cc:	4680      	mov	r8, r0
   241ce:	60f0      	str	r0, [r6, #12]
			fp->obj.fs = fs;	/* Validate the file object */
   241d0:	f8c6 9000 	str.w	r9, [r6]
			fp->obj.id = fs->id;
   241d4:	f8b9 3006 	ldrh.w	r3, [r9, #6]
   241d8:	80b3      	strh	r3, [r6, #4]
			fp->flag = mode;	/* Set file access mode */
   241da:	7437      	strb	r7, [r6, #16]
			fp->err = 0;		/* Clear error flag */
   241dc:	2300      	movs	r3, #0
   241de:	7473      	strb	r3, [r6, #17]
			fp->sect = 0;		/* Invalidate current data sector */
   241e0:	61f3      	str	r3, [r6, #28]
			fp->fptr = 0;		/* Set file pointer top of the file */
   241e2:	6173      	str	r3, [r6, #20]
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
   241e4:	f017 0f20 	tst.w	r7, #32
   241e8:	d026      	beq.n	24238 <f_open+0x1b8>
   241ea:	b328      	cbz	r0, 24238 <f_open+0x1b8>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
   241ec:	6170      	str	r0, [r6, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
   241ee:	f8b9 700a 	ldrh.w	r7, [r9, #10]
   241f2:	027f      	lsls	r7, r7, #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
   241f4:	e002      	b.n	241fc <f_open+0x17c>
					if (clst <= 1) res = FR_INT_ERR;
   241f6:	2502      	movs	r5, #2
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
   241f8:	eba8 0807 	sub.w	r8, r8, r7
   241fc:	b96d      	cbnz	r5, 2421a <f_open+0x19a>
   241fe:	45b8      	cmp	r8, r7
   24200:	d90b      	bls.n	2421a <f_open+0x19a>
					clst = get_fat(&fp->obj, clst);
   24202:	4621      	mov	r1, r4
   24204:	4630      	mov	r0, r6
   24206:	f00a fe4f 	bl	2eea8 <get_fat>
   2420a:	4604      	mov	r4, r0
					if (clst <= 1) res = FR_INT_ERR;
   2420c:	2801      	cmp	r0, #1
   2420e:	d9f2      	bls.n	241f6 <f_open+0x176>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
   24210:	f1b0 3fff 	cmp.w	r0, #4294967295
   24214:	d1f0      	bne.n	241f8 <f_open+0x178>
   24216:	2501      	movs	r5, #1
   24218:	e7ee      	b.n	241f8 <f_open+0x178>
				fp->clust = clst;
   2421a:	61b4      	str	r4, [r6, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
   2421c:	2d00      	cmp	r5, #0
   2421e:	f47f af41 	bne.w	240a4 <f_open+0x24>
   24222:	f3c8 0308 	ubfx	r3, r8, #0, #9
   24226:	b13b      	cbz	r3, 24238 <f_open+0x1b8>
					sc = clst2sect(fs, clst);
   24228:	4621      	mov	r1, r4
   2422a:	9802      	ldr	r0, [sp, #8]
   2422c:	f00a fcb0 	bl	2eb90 <clst2sect>
					if (sc == 0) {
   24230:	b140      	cbz	r0, 24244 <f_open+0x1c4>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
   24232:	eb00 2358 	add.w	r3, r0, r8, lsr #9
   24236:	61f3      	str	r3, [r6, #28]
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
   24238:	2d00      	cmp	r5, #0
   2423a:	f43f af35 	beq.w	240a8 <f_open+0x28>
   2423e:	e731      	b.n	240a4 <f_open+0x24>
					res = FR_NO_FILE;
   24240:	2504      	movs	r5, #4
   24242:	e72f      	b.n	240a4 <f_open+0x24>
						res = FR_INT_ERR;
   24244:	2502      	movs	r5, #2
   24246:	e72d      	b.n	240a4 <f_open+0x24>
	if (!fp) return FR_INVALID_OBJECT;
   24248:	2509      	movs	r5, #9
   2424a:	e72d      	b.n	240a8 <f_open+0x28>
   2424c:	50210000 	.word	0x50210000

00024250 <f_sync>:
{
   24250:	b530      	push	{r4, r5, lr}
   24252:	b083      	sub	sp, #12
   24254:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
   24256:	a901      	add	r1, sp, #4
   24258:	f00a fd06 	bl	2ec68 <validate>
	if (res == FR_OK) {
   2425c:	b918      	cbnz	r0, 24266 <f_sync+0x16>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
   2425e:	7c23      	ldrb	r3, [r4, #16]
   24260:	f013 0f40 	tst.w	r3, #64	; 0x40
   24264:	d101      	bne.n	2426a <f_sync+0x1a>
}
   24266:	b003      	add	sp, #12
   24268:	bd30      	pop	{r4, r5, pc}
				res = move_window(fs, fp->dir_sect);
   2426a:	6a21      	ldr	r1, [r4, #32]
   2426c:	9801      	ldr	r0, [sp, #4]
   2426e:	f00a fd42 	bl	2ecf6 <move_window>
				if (res == FR_OK) {
   24272:	2800      	cmp	r0, #0
   24274:	d1f7      	bne.n	24266 <f_sync+0x16>
					dir = fp->dir_ptr;
   24276:	6a65      	ldr	r5, [r4, #36]	; 0x24
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
   24278:	7aeb      	ldrb	r3, [r5, #11]
   2427a:	f043 0320 	orr.w	r3, r3, #32
   2427e:	72eb      	strb	r3, [r5, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
   24280:	68a2      	ldr	r2, [r4, #8]
   24282:	4629      	mov	r1, r5
   24284:	6820      	ldr	r0, [r4, #0]
   24286:	f00a fca2 	bl	2ebce <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
   2428a:	68e1      	ldr	r1, [r4, #12]
   2428c:	f105 001c 	add.w	r0, r5, #28
   24290:	f00a fc70 	bl	2eb74 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
   24294:	490a      	ldr	r1, [pc, #40]	; (242c0 <f_sync+0x70>)
   24296:	f105 0016 	add.w	r0, r5, #22
   2429a:	f00a fc6b 	bl	2eb74 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
   2429e:	2100      	movs	r1, #0
   242a0:	f105 0012 	add.w	r0, r5, #18
   242a4:	f00a fc62 	bl	2eb6c <st_word>
					fs->wflag = 1;
   242a8:	9b01      	ldr	r3, [sp, #4]
   242aa:	2201      	movs	r2, #1
   242ac:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
   242ae:	9801      	ldr	r0, [sp, #4]
   242b0:	f7ff fdda 	bl	23e68 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
   242b4:	7c23      	ldrb	r3, [r4, #16]
   242b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   242ba:	7423      	strb	r3, [r4, #16]
   242bc:	e7d3      	b.n	24266 <f_sync+0x16>
   242be:	bf00      	nop
   242c0:	50210000 	.word	0x50210000

000242c4 <f_mkdir>:
{
   242c4:	b530      	push	{r4, r5, lr}
   242c6:	b093      	sub	sp, #76	; 0x4c
   242c8:	9001      	str	r0, [sp, #4]
	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
   242ca:	2202      	movs	r2, #2
   242cc:	a902      	add	r1, sp, #8
   242ce:	a801      	add	r0, sp, #4
   242d0:	f7ff fbe4 	bl	23a9c <mount_volume>
	if (res == FR_OK) {
   242d4:	4604      	mov	r4, r0
   242d6:	b110      	cbz	r0, 242de <f_mkdir+0x1a>
}
   242d8:	4620      	mov	r0, r4
   242da:	b013      	add	sp, #76	; 0x4c
   242dc:	bd30      	pop	{r4, r5, pc}
		dj.obj.fs = fs;
   242de:	9b02      	ldr	r3, [sp, #8]
   242e0:	9307      	str	r3, [sp, #28]
		res = follow_path(&dj, path);			/* Follow the file path */
   242e2:	9901      	ldr	r1, [sp, #4]
   242e4:	a807      	add	r0, sp, #28
   242e6:	f00b f88c 	bl	2f402 <follow_path>
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
   242ea:	2800      	cmp	r0, #0
   242ec:	d067      	beq.n	243be <f_mkdir+0xfa>
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
   242ee:	2804      	cmp	r0, #4
   242f0:	d001      	beq.n	242f6 <f_mkdir+0x32>
		res = follow_path(&dj, path);			/* Follow the file path */
   242f2:	4604      	mov	r4, r0
   242f4:	e7f0      	b.n	242d8 <f_mkdir+0x14>
			sobj.fs = fs;						/* New object id to create a new chain */
   242f6:	9b02      	ldr	r3, [sp, #8]
   242f8:	9303      	str	r3, [sp, #12]
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
   242fa:	2100      	movs	r1, #0
   242fc:	a803      	add	r0, sp, #12
   242fe:	f00a fe91 	bl	2f024 <create_chain>
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
   24302:	4605      	mov	r5, r0
   24304:	b118      	cbz	r0, 2430e <f_mkdir+0x4a>
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
   24306:	2801      	cmp	r0, #1
   24308:	d102      	bne.n	24310 <f_mkdir+0x4c>
   2430a:	2402      	movs	r4, #2
   2430c:	e003      	b.n	24316 <f_mkdir+0x52>
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
   2430e:	2407      	movs	r4, #7
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
   24310:	f1b5 3fff 	cmp.w	r5, #4294967295
   24314:	d051      	beq.n	243ba <f_mkdir+0xf6>
			if (res == FR_OK) {
   24316:	b12c      	cbz	r4, 24324 <f_mkdir+0x60>
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
   24318:	2200      	movs	r2, #0
   2431a:	4629      	mov	r1, r5
   2431c:	a803      	add	r0, sp, #12
   2431e:	f00a ff12 	bl	2f146 <remove_chain>
   24322:	e7d9      	b.n	242d8 <f_mkdir+0x14>
				res = dir_clear(fs, dcl);		/* Clean up the new table */
   24324:	4629      	mov	r1, r5
   24326:	9802      	ldr	r0, [sp, #8]
   24328:	f00a ff5a 	bl	2f1e0 <dir_clear>
				if (res == FR_OK) {
   2432c:	4604      	mov	r4, r0
   2432e:	2800      	cmp	r0, #0
   24330:	d1f2      	bne.n	24318 <f_mkdir+0x54>
						memset(fs->win + DIR_Name, ' ', 11);	/* Create "." entry */
   24332:	220b      	movs	r2, #11
   24334:	2120      	movs	r1, #32
   24336:	9802      	ldr	r0, [sp, #8]
   24338:	3030      	adds	r0, #48	; 0x30
   2433a:	f005 fc69 	bl	29c10 <memset>
						fs->win[DIR_Name] = '.';
   2433e:	9802      	ldr	r0, [sp, #8]
   24340:	242e      	movs	r4, #46	; 0x2e
   24342:	f880 4030 	strb.w	r4, [r0, #48]	; 0x30
						fs->win[DIR_Attr] = AM_DIR;
   24346:	2310      	movs	r3, #16
   24348:	f880 303b 	strb.w	r3, [r0, #59]	; 0x3b
						st_dword(fs->win + DIR_ModTime, tm);
   2434c:	491d      	ldr	r1, [pc, #116]	; (243c4 <f_mkdir+0x100>)
   2434e:	3046      	adds	r0, #70	; 0x46
   24350:	f00a fc10 	bl	2eb74 <st_dword>
						st_clust(fs, fs->win, dcl);
   24354:	9802      	ldr	r0, [sp, #8]
   24356:	462a      	mov	r2, r5
   24358:	f100 0130 	add.w	r1, r0, #48	; 0x30
   2435c:	f00a fc37 	bl	2ebce <st_clust>
						memcpy(fs->win + SZDIRE, fs->win, SZDIRE);	/* Create ".." entry */
   24360:	9802      	ldr	r0, [sp, #8]
   24362:	2220      	movs	r2, #32
   24364:	f100 0130 	add.w	r1, r0, #48	; 0x30
   24368:	3050      	adds	r0, #80	; 0x50
   2436a:	f005 fc22 	bl	29bb2 <memcpy>
						fs->win[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
   2436e:	9802      	ldr	r0, [sp, #8]
   24370:	f880 4051 	strb.w	r4, [r0, #81]	; 0x51
						st_clust(fs, fs->win + SZDIRE, pcl);
   24374:	9a09      	ldr	r2, [sp, #36]	; 0x24
   24376:	f100 0150 	add.w	r1, r0, #80	; 0x50
   2437a:	f00a fc28 	bl	2ebce <st_clust>
						fs->wflag = 1;
   2437e:	9b02      	ldr	r3, [sp, #8]
   24380:	2201      	movs	r2, #1
   24382:	70da      	strb	r2, [r3, #3]
					res = dir_register(&dj);	/* Register the object to the parent directoy */
   24384:	a807      	add	r0, sp, #28
   24386:	f00b f882 	bl	2f48e <dir_register>
			if (res == FR_OK) {
   2438a:	4604      	mov	r4, r0
   2438c:	2800      	cmp	r0, #0
   2438e:	d1c3      	bne.n	24318 <f_mkdir+0x54>
					st_dword(dj.dir + DIR_ModTime, tm);	/* Created time */
   24390:	490c      	ldr	r1, [pc, #48]	; (243c4 <f_mkdir+0x100>)
   24392:	980e      	ldr	r0, [sp, #56]	; 0x38
   24394:	3016      	adds	r0, #22
   24396:	f00a fbed 	bl	2eb74 <st_dword>
					st_clust(fs, dj.dir, dcl);			/* Table start cluster */
   2439a:	462a      	mov	r2, r5
   2439c:	990e      	ldr	r1, [sp, #56]	; 0x38
   2439e:	9802      	ldr	r0, [sp, #8]
   243a0:	f00a fc15 	bl	2ebce <st_clust>
					dj.dir[DIR_Attr] = AM_DIR;			/* Attribute */
   243a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   243a6:	2210      	movs	r2, #16
   243a8:	72da      	strb	r2, [r3, #11]
					fs->wflag = 1;
   243aa:	9b02      	ldr	r3, [sp, #8]
   243ac:	2201      	movs	r2, #1
   243ae:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);
   243b0:	9802      	ldr	r0, [sp, #8]
   243b2:	f7ff fd59 	bl	23e68 <sync_fs>
   243b6:	4604      	mov	r4, r0
   243b8:	e78e      	b.n	242d8 <f_mkdir+0x14>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
   243ba:	2401      	movs	r4, #1
   243bc:	e7ac      	b.n	24318 <f_mkdir+0x54>
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
   243be:	2408      	movs	r4, #8
   243c0:	e78a      	b.n	242d8 <f_mkdir+0x14>
   243c2:	bf00      	nop
   243c4:	50210000 	.word	0x50210000

000243c8 <f_mkfs>:
	const TCHAR* path,		/* Logical drive number */
	const MKFS_PARM* opt,	/* Format options */
	void* work,				/* Pointer to working buffer (null: use heap memory) */
	UINT len				/* Size of working buffer [byte] */
)
{
   243c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   243cc:	b091      	sub	sp, #68	; 0x44
   243ce:	900b      	str	r0, [sp, #44]	; 0x2c
   243d0:	460d      	mov	r5, r1
   243d2:	9202      	str	r2, [sp, #8]
   243d4:	9301      	str	r3, [sp, #4]
	DSTATUS ds;
	FRESULT fr;


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
   243d6:	a80b      	add	r0, sp, #44	; 0x2c
   243d8:	f7ff faa8 	bl	2392c <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
   243dc:	2800      	cmp	r0, #0
   243de:	f2c0 82d9 	blt.w	24994 <f_mkfs+0x5cc>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the fs object if mounted */
   243e2:	4ba8      	ldr	r3, [pc, #672]	; (24684 <f_mkfs+0x2bc>)
   243e4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   243e8:	b10b      	cbz	r3, 243ee <f_mkfs+0x26>
   243ea:	2200      	movs	r2, #0
   243ec:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);			/* Physical drive */
   243ee:	b2c4      	uxtb	r4, r0
	ipart = LD2PT(vol);			/* Partition (0:create as new, 1..:get from partition table) */
	if (!opt) opt = &defopt;	/* Use default parameter if it is not given */
   243f0:	b355      	cbz	r5, 24448 <f_mkfs+0x80>

	/* Get physical drive status (sz_drv, sz_blk, ss) */
	ds = disk_initialize(pdrv);
   243f2:	4620      	mov	r0, r4
   243f4:	f000 fb0c 	bl	24a10 <disk_initialize>
	if (ds & STA_NOINIT) return FR_NOT_READY;
   243f8:	f010 0f01 	tst.w	r0, #1
   243fc:	f040 82cc 	bne.w	24998 <f_mkfs+0x5d0>
	if (ds & STA_PROTECT) return FR_WRITE_PROTECTED;
   24400:	f010 0f04 	tst.w	r0, #4
   24404:	f040 82cc 	bne.w	249a0 <f_mkfs+0x5d8>
	sz_blk = opt->align;
   24408:	686b      	ldr	r3, [r5, #4]
   2440a:	930f      	str	r3, [sp, #60]	; 0x3c
	if (sz_blk == 0 && disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK) sz_blk = 1;
   2440c:	b1f3      	cbz	r3, 2444c <f_mkfs+0x84>
 	if (sz_blk == 0 || sz_blk > 0x8000 || (sz_blk & (sz_blk - 1))) sz_blk = 1;
   2440e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   24410:	1e53      	subs	r3, r2, #1
   24412:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   24416:	d201      	bcs.n	2441c <f_mkfs+0x54>
   24418:	421a      	tst	r2, r3
   2441a:	d001      	beq.n	24420 <f_mkfs+0x58>
   2441c:	2301      	movs	r3, #1
   2441e:	930f      	str	r3, [sp, #60]	; 0x3c
	if (ss > FF_MAX_SS || ss < FF_MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = FF_MAX_SS;
#endif
	/* Options for FAT sub-type and FAT parameters */
	fsopt = opt->fmt & (FM_ANY | FM_SFD);
   24420:	782e      	ldrb	r6, [r5, #0]
	n_fat = (opt->n_fat >= 1 && opt->n_fat <= 2) ? opt->n_fat : 1;
   24422:	786a      	ldrb	r2, [r5, #1]
   24424:	1e53      	subs	r3, r2, #1
   24426:	b2db      	uxtb	r3, r3
   24428:	2b01      	cmp	r3, #1
   2442a:	d919      	bls.n	24460 <f_mkfs+0x98>
   2442c:	2701      	movs	r7, #1
	n_root = (opt->n_root >= 1 && opt->n_root <= 32768 && (opt->n_root % (ss / SZDIRE)) == 0) ? opt->n_root : 512;
   2442e:	f8d5 9008 	ldr.w	r9, [r5, #8]
   24432:	f109 33ff 	add.w	r3, r9, #4294967295
   24436:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2443a:	d213      	bcs.n	24464 <f_mkfs+0x9c>
   2443c:	f019 0f0f 	tst.w	r9, #15
   24440:	d012      	beq.n	24468 <f_mkfs+0xa0>
   24442:	f44f 7900 	mov.w	r9, #512	; 0x200
   24446:	e00f      	b.n	24468 <f_mkfs+0xa0>
	if (!opt) opt = &defopt;	/* Use default parameter if it is not given */
   24448:	4d8f      	ldr	r5, [pc, #572]	; (24688 <f_mkfs+0x2c0>)
   2444a:	e7d2      	b.n	243f2 <f_mkfs+0x2a>
	if (sz_blk == 0 && disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK) sz_blk = 1;
   2444c:	aa0f      	add	r2, sp, #60	; 0x3c
   2444e:	2103      	movs	r1, #3
   24450:	4620      	mov	r0, r4
   24452:	f000 fb07 	bl	24a64 <disk_ioctl>
   24456:	2800      	cmp	r0, #0
   24458:	d0d9      	beq.n	2440e <f_mkfs+0x46>
   2445a:	2301      	movs	r3, #1
   2445c:	930f      	str	r3, [sp, #60]	; 0x3c
   2445e:	e7d6      	b.n	2440e <f_mkfs+0x46>
	n_fat = (opt->n_fat >= 1 && opt->n_fat <= 2) ? opt->n_fat : 1;
   24460:	4617      	mov	r7, r2
   24462:	e7e4      	b.n	2442e <f_mkfs+0x66>
	n_root = (opt->n_root >= 1 && opt->n_root <= 32768 && (opt->n_root % (ss / SZDIRE)) == 0) ? opt->n_root : 512;
   24464:	f44f 7900 	mov.w	r9, #512	; 0x200
	sz_au = (opt->au_size <= 0x1000000 && (opt->au_size & (opt->au_size - 1)) == 0) ? opt->au_size : 0;
   24468:	68ed      	ldr	r5, [r5, #12]
   2446a:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
   2446e:	d804      	bhi.n	2447a <f_mkfs+0xb2>
   24470:	1e6b      	subs	r3, r5, #1
   24472:	421d      	tst	r5, r3
   24474:	d002      	beq.n	2447c <f_mkfs+0xb4>
   24476:	2500      	movs	r5, #0
   24478:	e000      	b.n	2447c <f_mkfs+0xb4>
   2447a:	2500      	movs	r5, #0
	sz_au /= ss;	/* Byte --> Sector */
   2447c:	ea4f 2855 	mov.w	r8, r5, lsr #9

	/* Get working buffer */
	sz_buf = len / ss;		/* Size of working buffer [sector] */
   24480:	9b01      	ldr	r3, [sp, #4]
   24482:	0a5a      	lsrs	r2, r3, #9
   24484:	9204      	str	r2, [sp, #16]
	if (sz_buf == 0) return FR_NOT_ENOUGH_CORE;
   24486:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   2448a:	f0c0 828b 	bcc.w	249a4 <f_mkfs+0x5dc>
	buf = (BYTE*)work;		/* Working buffer */
#if FF_USE_LFN == 3
	if (!buf) buf = ff_memalloc(sz_buf * ss);	/* Use heap memory for working buffer */
#endif
	if (!buf) return FR_NOT_ENOUGH_CORE;
   2448e:	9b02      	ldr	r3, [sp, #8]
   24490:	2b00      	cmp	r3, #0
   24492:	f000 8289 	beq.w	249a8 <f_mkfs+0x5e0>

	/* Determine where the volume to be located (b_vol, sz_vol) */
	b_vol = sz_vol = 0;
   24496:	2300      	movs	r3, #0
   24498:	930e      	str	r3, [sp, #56]	; 0x38
			if (ipart > 4 || pte[PTE_System] == 0) LEAVE_MKFS(FR_MKFS_ABORTED);	/* No partition? */
			b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
			sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
		}
	} else {	/* The volume is associated with a physical drive */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
   2449a:	aa0e      	add	r2, sp, #56	; 0x38
   2449c:	2101      	movs	r1, #1
   2449e:	4620      	mov	r0, r4
   244a0:	f000 fae0 	bl	24a64 <disk_ioctl>
   244a4:	2800      	cmp	r0, #0
   244a6:	f040 8281 	bne.w	249ac <f_mkfs+0x5e4>
		if (!(fsopt & FM_SFD)) {	/* To be partitioned? */
   244aa:	f016 0308 	ands.w	r3, r6, #8
   244ae:	9305      	str	r3, [sp, #20]
   244b0:	d108      	bne.n	244c4 <f_mkfs+0xfc>
				fsopt |= 0x80;		/* Partitioning is in GPT */
				b_vol = GPT_ALIGN / ss; sz_vol -= b_vol + GPT_ITEMS * SZ_GPTE / ss + 1;	/* Estimated partition offset and size */
			} else
#endif
			{	/* Partitioning is in MBR */
				if (sz_vol > N_SEC_TRACK) {
   244b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   244b4:	2b3f      	cmp	r3, #63	; 0x3f
   244b6:	f240 8082 	bls.w	245be <f_mkfs+0x1f6>
					b_vol = N_SEC_TRACK; sz_vol -= b_vol;	/* Estimated partition offset and size */
   244ba:	3b3f      	subs	r3, #63	; 0x3f
   244bc:	930e      	str	r3, [sp, #56]	; 0x38
   244be:	233f      	movs	r3, #63	; 0x3f
   244c0:	9303      	str	r3, [sp, #12]
   244c2:	e001      	b.n	244c8 <f_mkfs+0x100>
	b_vol = sz_vol = 0;
   244c4:	2300      	movs	r3, #0
   244c6:	9303      	str	r3, [sp, #12]
				}
			}
		}
	}
	if (sz_vol < 128) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Check if volume size is >=128s */
   244c8:	990e      	ldr	r1, [sp, #56]	; 0x38
   244ca:	297f      	cmp	r1, #127	; 0x7f
   244cc:	f240 8270 	bls.w	249b0 <f_mkfs+0x5e8>
			}
		}
#if FF_LBA64
		if (sz_vol >= 0x100000000) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too large volume for FAT/FAT32 */
#endif
		if (sz_au > 128) sz_au = 128;	/* Invalid AU for FAT/FAT32? */
   244d0:	f5b5 3f81 	cmp.w	r5, #66048	; 0x10200
   244d4:	d301      	bcc.n	244da <f_mkfs+0x112>
   244d6:	f04f 0880 	mov.w	r8, #128	; 0x80
		if (fsopt & FM_FAT32) {	/* FAT32 possible? */
   244da:	f016 0002 	ands.w	r0, r6, #2
   244de:	d002      	beq.n	244e6 <f_mkfs+0x11e>
			if (!(fsopt & FM_FAT)) {	/* no-FAT? */
   244e0:	f016 0f01 	tst.w	r6, #1
   244e4:	d06e      	beq.n	245c4 <f_mkfs+0x1fc>
				fsty = FS_FAT32; break;
			}
		}
		if (!(fsopt & FM_FAT)) LEAVE_MKFS(FR_INVALID_PARAMETER);	/* no-FAT? */
   244e6:	f016 0f01 	tst.w	r6, #1
   244ea:	f000 8263 	beq.w	249b4 <f_mkfs+0x5ec>
		fsty = FS_FAT16;
   244ee:	f04f 0a02 	mov.w	sl, #2
	} while (0);

	vsn = (DWORD)sz_vol + GET_FATTIME();	/* VSN generated from current time and partitiion size */
   244f2:	f101 43a0 	add.w	r3, r1, #1342177280	; 0x50000000
   244f6:	f503 1304 	add.w	r3, r3, #2162688	; 0x210000
   244fa:	9307      	str	r3, [sp, #28]
   244fc:	4646      	mov	r6, r8
   244fe:	9406      	str	r4, [sp, #24]
#endif	/* FF_FS_EXFAT */
	{	/* Create an FAT/FAT32 volume */
		do {
			pau = sz_au;
			/* Pre-determine number of clusters and FAT sub-type */
			if (fsty == FS_FAT32) {	/* FAT32 volume */
   24500:	f1ba 0f03 	cmp.w	sl, #3
   24504:	d066      	beq.n	245d4 <f_mkfs+0x20c>
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
				sz_rsv = 32;	/* Number of reserved sectors */
				sz_dir = 0;		/* No static directory */
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
			} else {				/* FAT volume */
				if (pau == 0) {	/* au auto-selection */
   24506:	2e00      	cmp	r6, #0
   24508:	f000 8087 	beq.w	2461a <f_mkfs+0x252>
			pau = sz_au;
   2450c:	4634      	mov	r4, r6
					n = (DWORD)sz_vol / 0x1000;	/* Volume size in unit of 4KS */
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
				}
				n_clst = (DWORD)sz_vol / pau;
   2450e:	fbb1 f3f4 	udiv	r3, r1, r4
				if (n_clst > MAX_FAT12) {
   24512:	f640 72f5 	movw	r2, #4085	; 0xff5
   24516:	4293      	cmp	r3, r2
   24518:	f240 808e 	bls.w	24638 <f_mkfs+0x270>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
   2451c:	1c9d      	adds	r5, r3, #2
   2451e:	006d      	lsls	r5, r5, #1
				} else {
					fsty = FS_FAT12;
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
   24520:	f205 15ff 	addw	r5, r5, #511	; 0x1ff
   24524:	0a6d      	lsrs	r5, r5, #9
				sz_rsv = 1;						/* Number of reserved sectors */
				sz_dir = (DWORD)n_root * SZDIRE / ss;	/* Root dir size [sector] */
   24526:	f3c9 1e16 	ubfx	lr, r9, #4, #23
				sz_rsv = 1;						/* Number of reserved sectors */
   2452a:	f04f 0c01 	mov.w	ip, #1
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
   2452e:	9b03      	ldr	r3, [sp, #12]
   24530:	eb0c 0b03 	add.w	fp, ip, r3
			b_data = b_fat + sz_fat * n_fat + sz_dir;	/* Data base */
   24534:	fb07 b205 	mla	r2, r7, r5, fp
   24538:	4472      	add	r2, lr

			/* Align data area to erase block boundary (for flash memory media) */
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
   2453a:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   2453e:	eb08 0302 	add.w	r3, r8, r2
   24542:	3b01      	subs	r3, #1
   24544:	f1c8 0800 	rsb	r8, r8, #0
   24548:	ea03 0308 	and.w	r3, r3, r8
   2454c:	1a9b      	subs	r3, r3, r2
			if (fsty == FS_FAT32) {		/* FAT32: Move FAT */
   2454e:	f1ba 0f03 	cmp.w	sl, #3
   24552:	d079      	beq.n	24648 <f_mkfs+0x280>
				sz_rsv += n; b_fat += n;
			} else {					/* FAT: Expand FAT */
				if (n % n_fat) {	/* Adjust fractional error if needed */
   24554:	fbb3 f8f7 	udiv	r8, r3, r7
   24558:	fb07 3818 	mls	r8, r7, r8, r3
   2455c:	f1b8 0f00 	cmp.w	r8, #0
   24560:	d004      	beq.n	2456c <f_mkfs+0x1a4>
					n--; sz_rsv++; b_fat++;
   24562:	3b01      	subs	r3, #1
   24564:	f10c 0c01 	add.w	ip, ip, #1
   24568:	f10b 0b01 	add.w	fp, fp, #1
				}
				sz_fat += n / n_fat;
   2456c:	fbb3 f3f7 	udiv	r3, r3, r7
   24570:	441d      	add	r5, r3
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume? */
   24572:	eb02 1204 	add.w	r2, r2, r4, lsl #4
   24576:	9b03      	ldr	r3, [sp, #12]
   24578:	1ad2      	subs	r2, r2, r3
   2457a:	4291      	cmp	r1, r2
   2457c:	f0c0 821e 	bcc.w	249bc <f_mkfs+0x5f4>
			n_clst = ((DWORD)sz_vol - sz_rsv - sz_fat * n_fat - sz_dir) / pau;
   24580:	eba1 030c 	sub.w	r3, r1, ip
   24584:	fb07 3315 	mls	r3, r7, r5, r3
   24588:	eba3 030e 	sub.w	r3, r3, lr
   2458c:	fbb3 f3f4 	udiv	r3, r3, r4
			if (fsty == FS_FAT32) {
   24590:	f1ba 0f03 	cmp.w	sl, #3
   24594:	d05b      	beq.n	2464e <f_mkfs+0x286>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32? */
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
					LEAVE_MKFS(FR_MKFS_ABORTED);
				}
			}
			if (fsty == FS_FAT16) {
   24596:	f1ba 0f02 	cmp.w	sl, #2
   2459a:	d17d      	bne.n	24698 <f_mkfs+0x2d0>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
   2459c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
   245a0:	4293      	cmp	r3, r2
   245a2:	d961      	bls.n	24668 <f_mkfs+0x2a0>
					if (sz_au == 0 && (pau * 2) <= 64) {
   245a4:	b916      	cbnz	r6, 245ac <f_mkfs+0x1e4>
   245a6:	0063      	lsls	r3, r4, #1
   245a8:	2b40      	cmp	r3, #64	; 0x40
   245aa:	d90e      	bls.n	245ca <f_mkfs+0x202>
						sz_au = pau * 2; continue;	/* Adjust cluster size and retry */
					}
					if ((fsopt & FM_FAT32)) {
   245ac:	b978      	cbnz	r0, 245ce <f_mkfs+0x206>
						fsty = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
					}
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
   245ae:	2e00      	cmp	r6, #0
   245b0:	f040 8208 	bne.w	249c4 <f_mkfs+0x5fc>
   245b4:	0066      	lsls	r6, r4, #1
   245b6:	2e80      	cmp	r6, #128	; 0x80
   245b8:	d9a2      	bls.n	24500 <f_mkfs+0x138>
					LEAVE_MKFS(FR_MKFS_ABORTED);
   245ba:	200e      	movs	r0, #14
   245bc:	e1ed      	b.n	2499a <f_mkfs+0x5d2>
	b_vol = sz_vol = 0;
   245be:	2300      	movs	r3, #0
   245c0:	9303      	str	r3, [sp, #12]
   245c2:	e781      	b.n	244c8 <f_mkfs+0x100>
				fsty = FS_FAT32; break;
   245c4:	f04f 0a03 	mov.w	sl, #3
   245c8:	e793      	b.n	244f2 <f_mkfs+0x12a>
						sz_au = pau * 2; continue;	/* Adjust cluster size and retry */
   245ca:	461e      	mov	r6, r3
   245cc:	e798      	b.n	24500 <f_mkfs+0x138>
						fsty = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
   245ce:	f04f 0a03 	mov.w	sl, #3
   245d2:	e795      	b.n	24500 <f_mkfs+0x138>
				if (pau == 0) {	/* AU auto-selection */
   245d4:	b19e      	cbz	r6, 245fe <f_mkfs+0x236>
			pau = sz_au;
   245d6:	4634      	mov	r4, r6
				n_clst = (DWORD)sz_vol / pau;	/* Number of clusters */
   245d8:	fbb1 f3f4 	udiv	r3, r1, r4
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
   245dc:	1c9d      	adds	r5, r3, #2
   245de:	00ad      	lsls	r5, r5, #2
   245e0:	f205 15ff 	addw	r5, r5, #511	; 0x1ff
   245e4:	0a6d      	lsrs	r5, r5, #9
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
   245e6:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
   245ea:	3bf6      	subs	r3, #246	; 0xf6
   245ec:	4a27      	ldr	r2, [pc, #156]	; (2468c <f_mkfs+0x2c4>)
   245ee:	4293      	cmp	r3, r2
   245f0:	f200 81e2 	bhi.w	249b8 <f_mkfs+0x5f0>
				sz_dir = 0;		/* No static directory */
   245f4:	f04f 0e00 	mov.w	lr, #0
				sz_rsv = 32;	/* Number of reserved sectors */
   245f8:	f04f 0c20 	mov.w	ip, #32
   245fc:	e797      	b.n	2452e <f_mkfs+0x166>
					n = (DWORD)sz_vol / 0x20000;	/* Volume size in unit of 128KS */
   245fe:	0c4d      	lsrs	r5, r1, #17
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
   24600:	4632      	mov	r2, r6
   24602:	2401      	movs	r4, #1
   24604:	e001      	b.n	2460a <f_mkfs+0x242>
   24606:	3201      	adds	r2, #1
   24608:	0064      	lsls	r4, r4, #1
   2460a:	4b21      	ldr	r3, [pc, #132]	; (24690 <f_mkfs+0x2c8>)
   2460c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   24610:	2b00      	cmp	r3, #0
   24612:	d0e1      	beq.n	245d8 <f_mkfs+0x210>
   24614:	42ab      	cmp	r3, r5
   24616:	d9f6      	bls.n	24606 <f_mkfs+0x23e>
   24618:	e7de      	b.n	245d8 <f_mkfs+0x210>
					n = (DWORD)sz_vol / 0x1000;	/* Volume size in unit of 4KS */
   2461a:	0b0d      	lsrs	r5, r1, #12
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
   2461c:	4632      	mov	r2, r6
   2461e:	2401      	movs	r4, #1
   24620:	e001      	b.n	24626 <f_mkfs+0x25e>
   24622:	3201      	adds	r2, #1
   24624:	0064      	lsls	r4, r4, #1
   24626:	4b1b      	ldr	r3, [pc, #108]	; (24694 <f_mkfs+0x2cc>)
   24628:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   2462c:	2b00      	cmp	r3, #0
   2462e:	f43f af6e 	beq.w	2450e <f_mkfs+0x146>
   24632:	42ab      	cmp	r3, r5
   24634:	d9f5      	bls.n	24622 <f_mkfs+0x25a>
   24636:	e76a      	b.n	2450e <f_mkfs+0x146>
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
   24638:	eb03 0543 	add.w	r5, r3, r3, lsl #1
   2463c:	3501      	adds	r5, #1
   2463e:	086d      	lsrs	r5, r5, #1
   24640:	3503      	adds	r5, #3
					fsty = FS_FAT12;
   24642:	f04f 0a01 	mov.w	sl, #1
   24646:	e76b      	b.n	24520 <f_mkfs+0x158>
				sz_rsv += n; b_fat += n;
   24648:	449c      	add	ip, r3
   2464a:	449b      	add	fp, r3
   2464c:	e791      	b.n	24572 <f_mkfs+0x1aa>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32? */
   2464e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
   24652:	4293      	cmp	r3, r2
   24654:	d89f      	bhi.n	24596 <f_mkfs+0x1ce>
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
   24656:	2e00      	cmp	r6, #0
   24658:	f040 81b2 	bne.w	249c0 <f_mkfs+0x5f8>
   2465c:	0866      	lsrs	r6, r4, #1
   2465e:	2c01      	cmp	r4, #1
   24660:	f63f af4e 	bhi.w	24500 <f_mkfs+0x138>
					LEAVE_MKFS(FR_MKFS_ABORTED);
   24664:	200e      	movs	r0, #14
   24666:	e198      	b.n	2499a <f_mkfs+0x5d2>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
   24668:	f640 72f5 	movw	r2, #4085	; 0xff5
   2466c:	4293      	cmp	r3, r2
   2466e:	d813      	bhi.n	24698 <f_mkfs+0x2d0>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
   24670:	2e00      	cmp	r6, #0
   24672:	f040 81a9 	bne.w	249c8 <f_mkfs+0x600>
   24676:	0066      	lsls	r6, r4, #1
   24678:	2e80      	cmp	r6, #128	; 0x80
   2467a:	f67f af41 	bls.w	24500 <f_mkfs+0x138>
					LEAVE_MKFS(FR_MKFS_ABORTED);
   2467e:	200e      	movs	r0, #14
   24680:	e18b      	b.n	2499a <f_mkfs+0x5d2>
   24682:	bf00      	nop
   24684:	20008b70 	.word	0x20008b70
   24688:	0003480c 	.word	0x0003480c
   2468c:	0ffeffff 	.word	0x0ffeffff
   24690:	000347fc 	.word	0x000347fc
   24694:	000347ec 	.word	0x000347ec
				}
			}
			if (fsty == FS_FAT12 && n_clst > MAX_FAT12) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too many clusters for FAT12 */
   24698:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
   2469c:	9408      	str	r4, [sp, #32]
   2469e:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
   246a2:	9c06      	ldr	r4, [sp, #24]
   246a4:	461e      	mov	r6, r3
   246a6:	f1ba 0f01 	cmp.w	sl, #1
   246aa:	d104      	bne.n	246b6 <f_mkfs+0x2ee>
   246ac:	f640 73f5 	movw	r3, #4085	; 0xff5
   246b0:	429e      	cmp	r6, r3
   246b2:	f200 818b 	bhi.w	249cc <f_mkfs+0x604>
#if FF_USE_TRIM
		lba[0] = b_vol; lba[1] = b_vol + sz_vol - 1;	/* Inform storage device that the volume area may be erased */
		disk_ioctl(pdrv, CTRL_TRIM, lba);
#endif
		/* Create FAT VBR */
		memset(buf, 0, ss);
   246b6:	f44f 7200 	mov.w	r2, #512	; 0x200
   246ba:	2100      	movs	r1, #0
   246bc:	f8dd 8008 	ldr.w	r8, [sp, #8]
   246c0:	4640      	mov	r0, r8
   246c2:	f005 faa5 	bl	29c10 <memset>
		memcpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);	/* Boot jump code (x86), OEM name */
   246c6:	220b      	movs	r2, #11
   246c8:	49c4      	ldr	r1, [pc, #784]	; (249dc <f_mkfs+0x614>)
   246ca:	4640      	mov	r0, r8
   246cc:	f005 fa71 	bl	29bb2 <memcpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
   246d0:	f44f 7100 	mov.w	r1, #512	; 0x200
   246d4:	f108 000b 	add.w	r0, r8, #11
   246d8:	f00a fa48 	bl	2eb6c <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
   246dc:	9b08      	ldr	r3, [sp, #32]
   246de:	f888 300d 	strb.w	r3, [r8, #13]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
   246e2:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
   246e6:	f108 000e 	add.w	r0, r8, #14
   246ea:	f00a fa3f 	bl	2eb6c <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fat;					/* Number of FATs */
   246ee:	f888 7010 	strb.w	r7, [r8, #16]
		st_word(buf + BPB_RootEntCnt, (WORD)((fsty == FS_FAT32) ? 0 : n_root));	/* Number of root directory entries */
   246f2:	f108 0011 	add.w	r0, r8, #17
   246f6:	f1ba 0f03 	cmp.w	sl, #3
   246fa:	f000 8093 	beq.w	24824 <f_mkfs+0x45c>
   246fe:	fa1f f189 	uxth.w	r1, r9
   24702:	f00a fa33 	bl	2eb6c <st_word>
		if (sz_vol < 0x10000) {
   24706:	990e      	ldr	r1, [sp, #56]	; 0x38
   24708:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
   2470c:	f080 808c 	bcs.w	24828 <f_mkfs+0x460>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
   24710:	b289      	uxth	r1, r1
   24712:	9b02      	ldr	r3, [sp, #8]
   24714:	f103 0013 	add.w	r0, r3, #19
   24718:	f00a fa28 	bl	2eb6c <st_word>
		} else {
			st_dword(buf + BPB_TotSec32, (DWORD)sz_vol);	/* Volume size in 32-bit LBA */
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
   2471c:	23f8      	movs	r3, #248	; 0xf8
   2471e:	f8dd 8008 	ldr.w	r8, [sp, #8]
   24722:	f888 3015 	strb.w	r3, [r8, #21]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
   24726:	213f      	movs	r1, #63	; 0x3f
   24728:	f108 0018 	add.w	r0, r8, #24
   2472c:	f00a fa1e 	bl	2eb6c <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
   24730:	21ff      	movs	r1, #255	; 0xff
   24732:	f108 001a 	add.w	r0, r8, #26
   24736:	f00a fa19 	bl	2eb6c <st_word>
		st_dword(buf + BPB_HiddSec, (DWORD)b_vol);		/* Volume offset in the physical drive [sector] */
   2473a:	9903      	ldr	r1, [sp, #12]
   2473c:	f108 001c 	add.w	r0, r8, #28
   24740:	f00a fa18 	bl	2eb74 <st_dword>
		if (fsty == FS_FAT32) {
   24744:	f1ba 0f03 	cmp.w	sl, #3
   24748:	d074      	beq.n	24834 <f_mkfs+0x46c>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
			memcpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
		} else {
			st_dword(buf + BS_VolID, vsn);				/* VSN */
   2474a:	9907      	ldr	r1, [sp, #28]
   2474c:	f8dd 8008 	ldr.w	r8, [sp, #8]
   24750:	f108 0027 	add.w	r0, r8, #39	; 0x27
   24754:	f00a fa0e 	bl	2eb74 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
   24758:	b2a9      	uxth	r1, r5
   2475a:	f108 0016 	add.w	r0, r8, #22
   2475e:	f00a fa05 	bl	2eb6c <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
   24762:	2380      	movs	r3, #128	; 0x80
   24764:	f888 3024 	strb.w	r3, [r8, #36]	; 0x24
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
   24768:	2329      	movs	r3, #41	; 0x29
   2476a:	f888 3026 	strb.w	r3, [r8, #38]	; 0x26
			memcpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
   2476e:	2213      	movs	r2, #19
   24770:	499b      	ldr	r1, [pc, #620]	; (249e0 <f_mkfs+0x618>)
   24772:	f108 002b 	add.w	r0, r8, #43	; 0x2b
   24776:	f005 fa1c 	bl	29bb2 <memcpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
   2477a:	f8dd 9008 	ldr.w	r9, [sp, #8]
   2477e:	f509 78ff 	add.w	r8, r9, #510	; 0x1fe
   24782:	f64a 2155 	movw	r1, #43605	; 0xaa55
   24786:	4640      	mov	r0, r8
   24788:	f00a f9f0 	bl	2eb6c <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it to the VBR sector */
   2478c:	2301      	movs	r3, #1
   2478e:	9a03      	ldr	r2, [sp, #12]
   24790:	4649      	mov	r1, r9
   24792:	4620      	mov	r0, r4
   24794:	f000 f958 	bl	24a48 <disk_write>
   24798:	2800      	cmp	r0, #0
   2479a:	f040 8119 	bne.w	249d0 <f_mkfs+0x608>

		/* Create FSINFO record if needed */
		if (fsty == FS_FAT32) {
   2479e:	f1ba 0f03 	cmp.w	sl, #3
   247a2:	d06f      	beq.n	24884 <f_mkfs+0x4bc>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
		}

		/* Initialize FAT area */
		memset(buf, 0, sz_buf * ss);
   247a4:	9b01      	ldr	r3, [sp, #4]
   247a6:	f423 72ff 	bic.w	r2, r3, #510	; 0x1fe
   247aa:	f022 0201 	bic.w	r2, r2, #1
   247ae:	2100      	movs	r1, #0
   247b0:	9e02      	ldr	r6, [sp, #8]
   247b2:	4630      	mov	r0, r6
   247b4:	f005 fa2c 	bl	29c10 <memset>
		sect = b_fat;		/* FAT start sector */
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
   247b8:	f04f 0900 	mov.w	r9, #0
   247bc:	9501      	str	r5, [sp, #4]
   247be:	463d      	mov	r5, r7
   247c0:	f8dd 8010 	ldr.w	r8, [sp, #16]
   247c4:	4637      	mov	r7, r6
   247c6:	45a9      	cmp	r9, r5
   247c8:	f080 80a4 	bcs.w	24914 <f_mkfs+0x54c>
			if (fsty == FS_FAT32) {
   247cc:	f1ba 0f03 	cmp.w	sl, #3
   247d0:	f000 808d 	beq.w	248ee <f_mkfs+0x526>
				st_dword(buf + 0, 0xFFFFFFF8);	/* FAT[0] */
				st_dword(buf + 4, 0xFFFFFFFF);	/* FAT[1] */
				st_dword(buf + 8, 0x0FFFFFFF);	/* FAT[2] (root directory) */
			} else {
				st_dword(buf + 0, (fsty == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* FAT[0] and FAT[1] */
   247d4:	f1ba 0f01 	cmp.w	sl, #1
   247d8:	f000 809a 	beq.w	24910 <f_mkfs+0x548>
   247dc:	f06f 0107 	mvn.w	r1, #7
   247e0:	4638      	mov	r0, r7
   247e2:	f00a f9c7 	bl	2eb74 <st_dword>
   247e6:	9e01      	ldr	r6, [sp, #4]
   247e8:	f8cd a00c 	str.w	sl, [sp, #12]
			}
			nsect = sz_fat;		/* Number of FAT sectors */
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
   247ec:	46b2      	mov	sl, r6
   247ee:	4546      	cmp	r6, r8
   247f0:	bf28      	it	cs
   247f2:	46c2      	movcs	sl, r8
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
   247f4:	4653      	mov	r3, sl
   247f6:	465a      	mov	r2, fp
   247f8:	4639      	mov	r1, r7
   247fa:	4620      	mov	r0, r4
   247fc:	f000 f924 	bl	24a48 <disk_write>
   24800:	2800      	cmp	r0, #0
   24802:	f040 80e7 	bne.w	249d4 <f_mkfs+0x60c>
				memset(buf, 0, ss);	/* Rest of FAT all are cleared */
   24806:	f44f 7200 	mov.w	r2, #512	; 0x200
   2480a:	2100      	movs	r1, #0
   2480c:	4638      	mov	r0, r7
   2480e:	f005 f9ff 	bl	29c10 <memset>
				sect += n; nsect -= n;
   24812:	44d3      	add	fp, sl
			} while (nsect);
   24814:	ebb6 060a 	subs.w	r6, r6, sl
   24818:	d1e8      	bne.n	247ec <f_mkfs+0x424>
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
   2481a:	f8dd a00c 	ldr.w	sl, [sp, #12]
   2481e:	f109 0901 	add.w	r9, r9, #1
   24822:	e7d0      	b.n	247c6 <f_mkfs+0x3fe>
		st_word(buf + BPB_RootEntCnt, (WORD)((fsty == FS_FAT32) ? 0 : n_root));	/* Number of root directory entries */
   24824:	2100      	movs	r1, #0
   24826:	e76c      	b.n	24702 <f_mkfs+0x33a>
			st_dword(buf + BPB_TotSec32, (DWORD)sz_vol);	/* Volume size in 32-bit LBA */
   24828:	9b02      	ldr	r3, [sp, #8]
   2482a:	f103 0020 	add.w	r0, r3, #32
   2482e:	f00a f9a1 	bl	2eb74 <st_dword>
   24832:	e773      	b.n	2471c <f_mkfs+0x354>
			st_dword(buf + BS_VolID32, vsn);			/* VSN */
   24834:	9907      	ldr	r1, [sp, #28]
   24836:	f8dd 8008 	ldr.w	r8, [sp, #8]
   2483a:	f108 0043 	add.w	r0, r8, #67	; 0x43
   2483e:	f00a f999 	bl	2eb74 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
   24842:	4629      	mov	r1, r5
   24844:	f108 0024 	add.w	r0, r8, #36	; 0x24
   24848:	f00a f994 	bl	2eb74 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
   2484c:	2102      	movs	r1, #2
   2484e:	f108 002c 	add.w	r0, r8, #44	; 0x2c
   24852:	f00a f98f 	bl	2eb74 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
   24856:	2101      	movs	r1, #1
   24858:	f108 0030 	add.w	r0, r8, #48	; 0x30
   2485c:	f00a f986 	bl	2eb6c <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
   24860:	2106      	movs	r1, #6
   24862:	f108 0032 	add.w	r0, r8, #50	; 0x32
   24866:	f00a f981 	bl	2eb6c <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
   2486a:	2380      	movs	r3, #128	; 0x80
   2486c:	f888 3040 	strb.w	r3, [r8, #64]	; 0x40
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
   24870:	2329      	movs	r3, #41	; 0x29
   24872:	f888 3042 	strb.w	r3, [r8, #66]	; 0x42
			memcpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
   24876:	2213      	movs	r2, #19
   24878:	495a      	ldr	r1, [pc, #360]	; (249e4 <f_mkfs+0x61c>)
   2487a:	f108 0047 	add.w	r0, r8, #71	; 0x47
   2487e:	f005 f998 	bl	29bb2 <memcpy>
   24882:	e77a      	b.n	2477a <f_mkfs+0x3b2>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
   24884:	2301      	movs	r3, #1
   24886:	9a03      	ldr	r2, [sp, #12]
   24888:	3206      	adds	r2, #6
   2488a:	f8dd 9008 	ldr.w	r9, [sp, #8]
   2488e:	4649      	mov	r1, r9
   24890:	4620      	mov	r0, r4
   24892:	f000 f8d9 	bl	24a48 <disk_write>
			memset(buf, 0, ss);
   24896:	f44f 7200 	mov.w	r2, #512	; 0x200
   2489a:	2100      	movs	r1, #0
   2489c:	4648      	mov	r0, r9
   2489e:	f005 f9b7 	bl	29c10 <memset>
			st_dword(buf + FSI_LeadSig, 0x41615252);
   248a2:	4951      	ldr	r1, [pc, #324]	; (249e8 <f_mkfs+0x620>)
   248a4:	4648      	mov	r0, r9
   248a6:	f00a f965 	bl	2eb74 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
   248aa:	4950      	ldr	r1, [pc, #320]	; (249ec <f_mkfs+0x624>)
   248ac:	f509 70f2 	add.w	r0, r9, #484	; 0x1e4
   248b0:	f00a f960 	bl	2eb74 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
   248b4:	1e71      	subs	r1, r6, #1
   248b6:	f509 70f4 	add.w	r0, r9, #488	; 0x1e8
   248ba:	f00a f95b 	bl	2eb74 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
   248be:	2102      	movs	r1, #2
   248c0:	f509 70f6 	add.w	r0, r9, #492	; 0x1ec
   248c4:	f00a f956 	bl	2eb74 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
   248c8:	f64a 2155 	movw	r1, #43605	; 0xaa55
   248cc:	4640      	mov	r0, r8
   248ce:	f00a f94d 	bl	2eb6c <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
   248d2:	2301      	movs	r3, #1
   248d4:	9e03      	ldr	r6, [sp, #12]
   248d6:	1df2      	adds	r2, r6, #7
   248d8:	4649      	mov	r1, r9
   248da:	4620      	mov	r0, r4
   248dc:	f000 f8b4 	bl	24a48 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
   248e0:	2301      	movs	r3, #1
   248e2:	18f2      	adds	r2, r6, r3
   248e4:	4649      	mov	r1, r9
   248e6:	4620      	mov	r0, r4
   248e8:	f000 f8ae 	bl	24a48 <disk_write>
   248ec:	e75a      	b.n	247a4 <f_mkfs+0x3dc>
				st_dword(buf + 0, 0xFFFFFFF8);	/* FAT[0] */
   248ee:	f06f 0107 	mvn.w	r1, #7
   248f2:	4638      	mov	r0, r7
   248f4:	f00a f93e 	bl	2eb74 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* FAT[1] */
   248f8:	f04f 31ff 	mov.w	r1, #4294967295
   248fc:	1d38      	adds	r0, r7, #4
   248fe:	f00a f939 	bl	2eb74 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* FAT[2] (root directory) */
   24902:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
   24906:	f107 0008 	add.w	r0, r7, #8
   2490a:	f00a f933 	bl	2eb74 <st_dword>
   2490e:	e76a      	b.n	247e6 <f_mkfs+0x41e>
				st_dword(buf + 0, (fsty == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* FAT[0] and FAT[1] */
   24910:	4937      	ldr	r1, [pc, #220]	; (249f0 <f_mkfs+0x628>)
   24912:	e765      	b.n	247e0 <f_mkfs+0x418>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fsty == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
   24914:	f1ba 0f03 	cmp.w	sl, #3
   24918:	d01e      	beq.n	24958 <f_mkfs+0x590>
   2491a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   2491c:	9f04      	ldr	r7, [sp, #16]
   2491e:	f8dd 8008 	ldr.w	r8, [sp, #8]
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
   24922:	4635      	mov	r5, r6
   24924:	42be      	cmp	r6, r7
   24926:	bf28      	it	cs
   24928:	463d      	movcs	r5, r7
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
   2492a:	462b      	mov	r3, r5
   2492c:	465a      	mov	r2, fp
   2492e:	4641      	mov	r1, r8
   24930:	4620      	mov	r0, r4
   24932:	f000 f889 	bl	24a48 <disk_write>
   24936:	2800      	cmp	r0, #0
   24938:	d14e      	bne.n	249d8 <f_mkfs+0x610>
			sect += n; nsect -= n;
   2493a:	44ab      	add	fp, r5
		} while (nsect);
   2493c:	1b76      	subs	r6, r6, r5
   2493e:	d1f0      	bne.n	24922 <f_mkfs+0x55a>

	/* Determine system ID in the MBR partition table */
	if (FF_FS_EXFAT && fsty == FS_EXFAT) {
		sys = 0x07;			/* exFAT */
	} else {
		if (fsty == FS_FAT32) {
   24940:	f1ba 0f03 	cmp.w	sl, #3
   24944:	d00f      	beq.n	24966 <f_mkfs+0x59e>
			sys = 0x0C;		/* FAT32X */
		} else {
			if (sz_vol >= 0x10000) {
   24946:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   24948:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   2494c:	d220      	bcs.n	24990 <f_mkfs+0x5c8>
				sys = 0x06;	/* FAT12/16 (large) */
			} else {
				sys = (fsty == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 : FAT12 */
   2494e:	f1ba 0f02 	cmp.w	sl, #2
   24952:	d006      	beq.n	24962 <f_mkfs+0x59a>
   24954:	2201      	movs	r2, #1
   24956:	e007      	b.n	24968 <f_mkfs+0x5a0>
		nsect = (fsty == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
   24958:	9e08      	ldr	r6, [sp, #32]
   2495a:	9f04      	ldr	r7, [sp, #16]
   2495c:	f8dd 8008 	ldr.w	r8, [sp, #8]
   24960:	e7df      	b.n	24922 <f_mkfs+0x55a>
				sys = (fsty == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 : FAT12 */
   24962:	2204      	movs	r2, #4
   24964:	e000      	b.n	24968 <f_mkfs+0x5a0>
			sys = 0x0C;		/* FAT32X */
   24966:	220c      	movs	r2, #12
			if (disk_read(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Read the MBR */
			buf[MBR_Table + (ipart - 1) * SZ_PTE + PTE_System] = sys;			/* Set system ID */
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it back to the MBR */
		}
	} else {								/* Volume as a new single partition */
		if (!(fsopt & FM_SFD)) {			/* Create partition table if not in SFD */
   24968:	9b05      	ldr	r3, [sp, #20]
   2496a:	b94b      	cbnz	r3, 24980 <f_mkfs+0x5b8>
			lba[0] = sz_vol; lba[1] = 0;
   2496c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2496e:	930c      	str	r3, [sp, #48]	; 0x30
   24970:	2300      	movs	r3, #0
   24972:	930d      	str	r3, [sp, #52]	; 0x34
			fr = create_partition(pdrv, lba, sys, buf);
   24974:	9b02      	ldr	r3, [sp, #8]
   24976:	a90c      	add	r1, sp, #48	; 0x30
   24978:	4620      	mov	r0, r4
   2497a:	f7ff fabb 	bl	23ef4 <create_partition>
			if (fr != FR_OK) LEAVE_MKFS(fr);
   2497e:	b960      	cbnz	r0, 2499a <f_mkfs+0x5d2>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
   24980:	2200      	movs	r2, #0
   24982:	4611      	mov	r1, r2
   24984:	4620      	mov	r0, r4
   24986:	f000 f86d 	bl	24a64 <disk_ioctl>
   2498a:	b130      	cbz	r0, 2499a <f_mkfs+0x5d2>
   2498c:	2001      	movs	r0, #1
   2498e:	e004      	b.n	2499a <f_mkfs+0x5d2>
				sys = 0x06;	/* FAT12/16 (large) */
   24990:	2206      	movs	r2, #6
   24992:	e7e9      	b.n	24968 <f_mkfs+0x5a0>
	if (vol < 0) return FR_INVALID_DRIVE;
   24994:	200b      	movs	r0, #11
   24996:	e000      	b.n	2499a <f_mkfs+0x5d2>
	if (ds & STA_NOINIT) return FR_NOT_READY;
   24998:	2003      	movs	r0, #3

	LEAVE_MKFS(FR_OK);
}
   2499a:	b011      	add	sp, #68	; 0x44
   2499c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (ds & STA_PROTECT) return FR_WRITE_PROTECTED;
   249a0:	200a      	movs	r0, #10
   249a2:	e7fa      	b.n	2499a <f_mkfs+0x5d2>
	if (sz_buf == 0) return FR_NOT_ENOUGH_CORE;
   249a4:	2011      	movs	r0, #17
   249a6:	e7f8      	b.n	2499a <f_mkfs+0x5d2>
	if (!buf) return FR_NOT_ENOUGH_CORE;
   249a8:	2011      	movs	r0, #17
   249aa:	e7f6      	b.n	2499a <f_mkfs+0x5d2>
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
   249ac:	2001      	movs	r0, #1
   249ae:	e7f4      	b.n	2499a <f_mkfs+0x5d2>
	if (sz_vol < 128) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Check if volume size is >=128s */
   249b0:	200e      	movs	r0, #14
   249b2:	e7f2      	b.n	2499a <f_mkfs+0x5d2>
		if (!(fsopt & FM_FAT)) LEAVE_MKFS(FR_INVALID_PARAMETER);	/* no-FAT? */
   249b4:	2013      	movs	r0, #19
   249b6:	e7f0      	b.n	2499a <f_mkfs+0x5d2>
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
   249b8:	200e      	movs	r0, #14
   249ba:	e7ee      	b.n	2499a <f_mkfs+0x5d2>
			if (sz_vol < b_data + pau * 16 - b_vol) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume? */
   249bc:	200e      	movs	r0, #14
   249be:	e7ec      	b.n	2499a <f_mkfs+0x5d2>
					LEAVE_MKFS(FR_MKFS_ABORTED);
   249c0:	200e      	movs	r0, #14
   249c2:	e7ea      	b.n	2499a <f_mkfs+0x5d2>
					LEAVE_MKFS(FR_MKFS_ABORTED);
   249c4:	200e      	movs	r0, #14
   249c6:	e7e8      	b.n	2499a <f_mkfs+0x5d2>
					LEAVE_MKFS(FR_MKFS_ABORTED);
   249c8:	200e      	movs	r0, #14
   249ca:	e7e6      	b.n	2499a <f_mkfs+0x5d2>
			if (fsty == FS_FAT12 && n_clst > MAX_FAT12) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too many clusters for FAT12 */
   249cc:	200e      	movs	r0, #14
   249ce:	e7e4      	b.n	2499a <f_mkfs+0x5d2>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it to the VBR sector */
   249d0:	2001      	movs	r0, #1
   249d2:	e7e2      	b.n	2499a <f_mkfs+0x5d2>
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
   249d4:	2001      	movs	r0, #1
   249d6:	e7e0      	b.n	2499a <f_mkfs+0x5d2>
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
   249d8:	2001      	movs	r0, #1
   249da:	e7de      	b.n	2499a <f_mkfs+0x5d2>
   249dc:	000347b8 	.word	0x000347b8
   249e0:	000347d8 	.word	0x000347d8
   249e4:	000347c4 	.word	0x000347c4
   249e8:	41615252 	.word	0x41615252
   249ec:	61417272 	.word	0x61417272
   249f0:	00fffff8 	.word	0x00fffff8

000249f4 <disk_status>:

static const char * const pdrv_str[] = {FF_VOLUME_STRS};

/* Get Drive Status */
DSTATUS disk_status(BYTE pdrv)
{
   249f4:	b508      	push	{r3, lr}
	__ASSERT(pdrv < ARRAY_SIZE(pdrv_str), "pdrv out-of-range\n");

	if (disk_access_status(pdrv_str[pdrv]) != 0) {
   249f6:	4b05      	ldr	r3, [pc, #20]	; (24a0c <disk_status+0x18>)
   249f8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   249fc:	f004 fd3b 	bl	29476 <disk_access_status>
   24a00:	b108      	cbz	r0, 24a06 <disk_status+0x12>
		return STA_NOINIT;
   24a02:	2001      	movs	r0, #1
	} else {
		return RES_OK;
	}
}
   24a04:	bd08      	pop	{r3, pc}
		return RES_OK;
   24a06:	2000      	movs	r0, #0
   24a08:	e7fc      	b.n	24a04 <disk_status+0x10>
   24a0a:	bf00      	nop
   24a0c:	000348e4 	.word	0x000348e4

00024a10 <disk_initialize>:

/* Initialize a Drive */
DSTATUS disk_initialize(BYTE pdrv)
{
   24a10:	b508      	push	{r3, lr}
	__ASSERT(pdrv < ARRAY_SIZE(pdrv_str), "pdrv out-of-range\n");

	if (disk_access_init(pdrv_str[pdrv]) != 0) {
   24a12:	4b05      	ldr	r3, [pc, #20]	; (24a28 <disk_initialize+0x18>)
   24a14:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   24a18:	f004 fd1a 	bl	29450 <disk_access_init>
   24a1c:	b108      	cbz	r0, 24a22 <disk_initialize+0x12>
		return STA_NOINIT;
   24a1e:	2001      	movs	r0, #1
	} else {
		return RES_OK;
	}
}
   24a20:	bd08      	pop	{r3, pc}
		return RES_OK;
   24a22:	2000      	movs	r0, #0
   24a24:	e7fc      	b.n	24a20 <disk_initialize+0x10>
   24a26:	bf00      	nop
   24a28:	000348e4 	.word	0x000348e4

00024a2c <disk_read>:

/* Read Sector(s) */
DRESULT disk_read(BYTE pdrv, BYTE *buff, DWORD sector, UINT count)
{
   24a2c:	b510      	push	{r4, lr}
	__ASSERT(pdrv < ARRAY_SIZE(pdrv_str), "pdrv out-of-range\n");

	if (disk_access_read(pdrv_str[pdrv], buff, sector, count) != 0) {
   24a2e:	4c05      	ldr	r4, [pc, #20]	; (24a44 <disk_read+0x18>)
   24a30:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
   24a34:	f004 fd32 	bl	2949c <disk_access_read>
   24a38:	b108      	cbz	r0, 24a3e <disk_read+0x12>
		return RES_ERROR;
   24a3a:	2001      	movs	r0, #1
	} else {
		return RES_OK;
	}

}
   24a3c:	bd10      	pop	{r4, pc}
		return RES_OK;
   24a3e:	2000      	movs	r0, #0
   24a40:	e7fc      	b.n	24a3c <disk_read+0x10>
   24a42:	bf00      	nop
   24a44:	000348e4 	.word	0x000348e4

00024a48 <disk_write>:

/* Write Sector(s) */
DRESULT disk_write(BYTE pdrv, const BYTE *buff, DWORD sector, UINT count)
{
   24a48:	b510      	push	{r4, lr}
	__ASSERT(pdrv < ARRAY_SIZE(pdrv_str), "pdrv out-of-range\n");

	if (disk_access_write(pdrv_str[pdrv], buff, sector, count) != 0) {
   24a4a:	4c05      	ldr	r4, [pc, #20]	; (24a60 <disk_write+0x18>)
   24a4c:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
   24a50:	f004 fd3d 	bl	294ce <disk_access_write>
   24a54:	b108      	cbz	r0, 24a5a <disk_write+0x12>
		return RES_ERROR;
   24a56:	2001      	movs	r0, #1
	} else {
		return RES_OK;
	}
}
   24a58:	bd10      	pop	{r4, pc}
		return RES_OK;
   24a5a:	2000      	movs	r0, #0
   24a5c:	e7fc      	b.n	24a58 <disk_write+0x10>
   24a5e:	bf00      	nop
   24a60:	000348e4 	.word	0x000348e4

00024a64 <disk_ioctl>:

/* Miscellaneous Functions */
DRESULT disk_ioctl(BYTE pdrv, BYTE cmd, void *buff)
{
   24a64:	b510      	push	{r4, lr}
   24a66:	b082      	sub	sp, #8
   24a68:	4614      	mov	r4, r2
	int ret = RES_OK;
	uint32_t sector_size = 0;
   24a6a:	2300      	movs	r3, #0
   24a6c:	9301      	str	r3, [sp, #4]

	__ASSERT(pdrv < ARRAY_SIZE(pdrv_str), "pdrv out-of-range\n");

	switch (cmd) {
   24a6e:	2903      	cmp	r1, #3
   24a70:	d834      	bhi.n	24adc <disk_ioctl+0x78>
   24a72:	e8df f001 	tbb	[pc, r1]
   24a76:	0d02      	.short	0x0d02
   24a78:	2818      	.short	0x2818
	case CTRL_SYNC:
		if (disk_access_ioctl(pdrv_str[pdrv],
   24a7a:	2105      	movs	r1, #5
   24a7c:	4b1b      	ldr	r3, [pc, #108]	; (24aec <disk_ioctl+0x88>)
   24a7e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   24a82:	f004 fd3d 	bl	29500 <disk_access_ioctl>
   24a86:	4603      	mov	r3, r0
   24a88:	bb50      	cbnz	r0, 24ae0 <disk_ioctl+0x7c>
	default:
		ret = RES_PARERR;
		break;
	}
	return ret;
}
   24a8a:	b2d8      	uxtb	r0, r3
   24a8c:	b002      	add	sp, #8
   24a8e:	bd10      	pop	{r4, pc}
		if (disk_access_ioctl(pdrv_str[pdrv],
   24a90:	2101      	movs	r1, #1
   24a92:	4b16      	ldr	r3, [pc, #88]	; (24aec <disk_ioctl+0x88>)
   24a94:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   24a98:	f004 fd32 	bl	29500 <disk_access_ioctl>
   24a9c:	4603      	mov	r3, r0
   24a9e:	2800      	cmp	r0, #0
   24aa0:	d0f3      	beq.n	24a8a <disk_ioctl+0x26>
			ret = RES_ERROR;
   24aa2:	2301      	movs	r3, #1
   24aa4:	e7f1      	b.n	24a8a <disk_ioctl+0x26>
		if ((disk_access_ioctl(pdrv_str[pdrv],
   24aa6:	aa01      	add	r2, sp, #4
   24aa8:	2102      	movs	r1, #2
   24aaa:	4b10      	ldr	r3, [pc, #64]	; (24aec <disk_ioctl+0x88>)
   24aac:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   24ab0:	f004 fd26 	bl	29500 <disk_access_ioctl>
   24ab4:	4603      	mov	r3, r0
   24ab6:	b9a8      	cbnz	r0, 24ae4 <disk_ioctl+0x80>
			(sector_size == (uint16_t)sector_size)) {
   24ab8:	9a01      	ldr	r2, [sp, #4]
   24aba:	b291      	uxth	r1, r2
				DISK_IOCTL_GET_SECTOR_SIZE, &sector_size) == 0) &&
   24abc:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   24ac0:	d212      	bcs.n	24ae8 <disk_ioctl+0x84>
			*(uint16_t *)buff = (uint16_t)sector_size;
   24ac2:	8021      	strh	r1, [r4, #0]
   24ac4:	e7e1      	b.n	24a8a <disk_ioctl+0x26>
		if (disk_access_ioctl(pdrv_str[pdrv],
   24ac6:	2104      	movs	r1, #4
   24ac8:	4b08      	ldr	r3, [pc, #32]	; (24aec <disk_ioctl+0x88>)
   24aca:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   24ace:	f004 fd17 	bl	29500 <disk_access_ioctl>
   24ad2:	4603      	mov	r3, r0
   24ad4:	2800      	cmp	r0, #0
   24ad6:	d0d8      	beq.n	24a8a <disk_ioctl+0x26>
			ret = RES_ERROR;
   24ad8:	2301      	movs	r3, #1
   24ada:	e7d6      	b.n	24a8a <disk_ioctl+0x26>
	switch (cmd) {
   24adc:	2304      	movs	r3, #4
   24ade:	e7d4      	b.n	24a8a <disk_ioctl+0x26>
			ret = RES_ERROR;
   24ae0:	2301      	movs	r3, #1
   24ae2:	e7d2      	b.n	24a8a <disk_ioctl+0x26>
			ret = RES_ERROR;
   24ae4:	2301      	movs	r3, #1
   24ae6:	e7d0      	b.n	24a8a <disk_ioctl+0x26>
   24ae8:	2301      	movs	r3, #1
   24aea:	e7ce      	b.n	24a8a <disk_ioctl+0x26>
   24aec:	000348e4 	.word	0x000348e4

00024af0 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
   24af0:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   24af4:	4905      	ldr	r1, [pc, #20]	; (24b0c <__NVIC_SystemReset+0x1c>)
   24af6:	68ca      	ldr	r2, [r1, #12]
   24af8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   24afc:	4b04      	ldr	r3, [pc, #16]	; (24b10 <__NVIC_SystemReset+0x20>)
   24afe:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   24b00:	60cb      	str	r3, [r1, #12]
   24b02:	f3bf 8f4f 	dsb	sy
    __NOP();
   24b06:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   24b08:	e7fd      	b.n	24b06 <__NVIC_SystemReset+0x16>
   24b0a:	bf00      	nop
   24b0c:	e000ed00 	.word	0xe000ed00
   24b10:	05fa0004 	.word	0x05fa0004

00024b14 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   24b14:	4b02      	ldr	r3, [pc, #8]	; (24b20 <nvmc_wait+0xc>)
   24b16:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   24b1a:	2b00      	cmp	r3, #0
   24b1c:	d0fa      	beq.n	24b14 <nvmc_wait>
}
   24b1e:	4770      	bx	lr
   24b20:	4001e000 	.word	0x4001e000

00024b24 <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
   24b24:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   24b26:	4b03      	ldr	r3, [pc, #12]	; (24b34 <nvmc_config+0x10>)
   24b28:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
   24b2c:	f7ff fff2 	bl	24b14 <nvmc_wait>
}
   24b30:	bd08      	pop	{r3, pc}
   24b32:	bf00      	nop
   24b34:	4001e000 	.word	0x4001e000

00024b38 <SystemCoreClockUpdate>:

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   24b38:	4b01      	ldr	r3, [pc, #4]	; (24b40 <SystemCoreClockUpdate+0x8>)
   24b3a:	4a02      	ldr	r2, [pc, #8]	; (24b44 <SystemCoreClockUpdate+0xc>)
   24b3c:	601a      	str	r2, [r3, #0]
}
   24b3e:	4770      	bx	lr
   24b40:	20000958 	.word	0x20000958
   24b44:	03d09000 	.word	0x03d09000

00024b48 <SystemInit>:

void SystemInit(void)
{
   24b48:	b538      	push	{r3, r4, r5, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   24b4a:	f00b f932 	bl	2fdb2 <nrf52_errata_36>
   24b4e:	b140      	cbz	r0, 24b62 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   24b50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   24b54:	2200      	movs	r2, #0
   24b56:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   24b5a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   24b5e:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   24b62:	f00b f930 	bl	2fdc6 <nrf52_errata_66>
   24b66:	2800      	cmp	r0, #0
   24b68:	d046      	beq.n	24bf8 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   24b6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   24b6e:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   24b72:	4b3b      	ldr	r3, [pc, #236]	; (24c60 <SystemInit+0x118>)
   24b74:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   24b78:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   24b7c:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   24b80:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   24b84:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   24b88:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   24b8c:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   24b90:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   24b94:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   24b98:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   24b9c:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   24ba0:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   24ba4:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   24ba8:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   24bac:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   24bb0:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   24bb4:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   24bb8:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   24bbc:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   24bc0:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   24bc4:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   24bc8:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   24bcc:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   24bd0:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   24bd4:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   24bd8:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   24bdc:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   24be0:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   24be4:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   24be8:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   24bec:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   24bf0:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   24bf4:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   24bf8:	f00b f8ef 	bl	2fdda <nrf52_errata_136>
   24bfc:	b160      	cbz	r0, 24c18 <SystemInit+0xd0>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   24bfe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   24c02:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   24c06:	f013 0f01 	tst.w	r3, #1
   24c0a:	d005      	beq.n	24c18 <SystemInit+0xd0>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   24c0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   24c10:	f06f 0201 	mvn.w	r2, #1
   24c14:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    nrf52_handle_approtect();
   24c18:	f00b f8f8 	bl	2fe0c <nrf52_handle_approtect>

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   24c1c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   24c20:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   24c24:	2b00      	cmp	r3, #0
   24c26:	db08      	blt.n	24c3a <SystemInit+0xf2>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   24c28:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   24c2c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   24c30:	2b00      	cmp	r3, #0
   24c32:	db02      	blt.n	24c3a <SystemInit+0xf2>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
   24c34:	f7ff ff80 	bl	24b38 <SystemCoreClockUpdate>
}
   24c38:	bd38      	pop	{r3, r4, r5, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
   24c3a:	2001      	movs	r0, #1
   24c3c:	f7ff ff72 	bl	24b24 <nvmc_config>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   24c40:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
   24c44:	2512      	movs	r5, #18
   24c46:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
            nvmc_wait();
   24c4a:	f7ff ff63 	bl	24b14 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   24c4e:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
            nvmc_wait();
   24c52:	f7ff ff5f 	bl	24b14 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
   24c56:	2000      	movs	r0, #0
   24c58:	f7ff ff64 	bl	24b24 <nvmc_config>
            NVIC_SystemReset();
   24c5c:	f7ff ff48 	bl	24af0 <__NVIC_SystemReset>
   24c60:	4000c000 	.word	0x4000c000

00024c64 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   24c64:	b510      	push	{r4, lr}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
   24c66:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   24c68:	fab4 f384 	clz	r3, r4
   24c6c:	f1c3 031f 	rsb	r3, r3, #31
   24c70:	fa5f fc83 	uxtb.w	ip, r3
        if (idx < 0) {
   24c74:	2b00      	cmp	r3, #0
   24c76:	db16      	blt.n	24ca6 <nrfx_flag32_alloc+0x42>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   24c78:	2201      	movs	r2, #1
   24c7a:	fa02 f303 	lsl.w	r3, r2, r3
   24c7e:	ea24 0303 	bic.w	r3, r4, r3
   24c82:	f3bf 8f5b 	dmb	ish
   24c86:	e850 2f00 	ldrex	r2, [r0]
   24c8a:	42a2      	cmp	r2, r4
   24c8c:	d104      	bne.n	24c98 <nrfx_flag32_alloc+0x34>
   24c8e:	e840 3e00 	strex	lr, r3, [r0]
   24c92:	f1be 0f00 	cmp.w	lr, #0
   24c96:	d1f6      	bne.n	24c86 <nrfx_flag32_alloc+0x22>
   24c98:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   24c9c:	d1e3      	bne.n	24c66 <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
   24c9e:	f881 c000 	strb.w	ip, [r1]

    return NRFX_SUCCESS;
   24ca2:	4802      	ldr	r0, [pc, #8]	; (24cac <nrfx_flag32_alloc+0x48>)
}
   24ca4:	bd10      	pop	{r4, pc}
            return NRFX_ERROR_NO_MEM;
   24ca6:	4802      	ldr	r0, [pc, #8]	; (24cb0 <nrfx_flag32_alloc+0x4c>)
   24ca8:	e7fc      	b.n	24ca4 <nrfx_flag32_alloc+0x40>
   24caa:	bf00      	nop
   24cac:	0bad0000 	.word	0x0bad0000
   24cb0:	0bad0002 	.word	0x0bad0002

00024cb4 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   24cb4:	6803      	ldr	r3, [r0, #0]
   24cb6:	40cb      	lsrs	r3, r1
   24cb8:	f013 0f01 	tst.w	r3, #1
   24cbc:	d115      	bne.n	24cea <nrfx_flag32_free+0x36>
{
   24cbe:	b500      	push	{lr}
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
   24cc0:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
   24cc2:	2301      	movs	r3, #1
   24cc4:	408b      	lsls	r3, r1
   24cc6:	4313      	orrs	r3, r2
   24cc8:	f3bf 8f5b 	dmb	ish
   24ccc:	e850 cf00 	ldrex	ip, [r0]
   24cd0:	4594      	cmp	ip, r2
   24cd2:	d104      	bne.n	24cde <nrfx_flag32_free+0x2a>
   24cd4:	e840 3e00 	strex	lr, r3, [r0]
   24cd8:	f1be 0f00 	cmp.w	lr, #0
   24cdc:	d1f6      	bne.n	24ccc <nrfx_flag32_free+0x18>
   24cde:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   24ce2:	d1ed      	bne.n	24cc0 <nrfx_flag32_free+0xc>

    return NRFX_SUCCESS;
   24ce4:	4802      	ldr	r0, [pc, #8]	; (24cf0 <nrfx_flag32_free+0x3c>)
}
   24ce6:	f85d fb04 	ldr.w	pc, [sp], #4
        return NRFX_ERROR_INVALID_PARAM;
   24cea:	4802      	ldr	r0, [pc, #8]	; (24cf4 <nrfx_flag32_free+0x40>)
}
   24cec:	4770      	bx	lr
   24cee:	bf00      	nop
   24cf0:	0bad0000 	.word	0x0bad0000
   24cf4:	0bad0004 	.word	0x0bad0004

00024cf8 <nrf_gpio_reconfigure>:
{
   24cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
   24cfa:	461c      	mov	r4, r3
   24cfc:	9f05      	ldr	r7, [sp, #20]
   24cfe:	9e06      	ldr	r6, [sp, #24]
    *p_pin = pin_number & 0x1F;
   24d00:	f000 0c1f 	and.w	ip, r0, #31
    return pin_number >> 5;
   24d04:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   24d06:	2801      	cmp	r0, #1
   24d08:	d035      	beq.n	24d76 <nrf_gpio_reconfigure+0x7e>
        case 0: return NRF_P0;
   24d0a:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
   24d0e:	f50c 73e0 	add.w	r3, ip, #448	; 0x1c0
   24d12:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   24d16:	b381      	cbz	r1, 24d7a <nrf_gpio_reconfigure+0x82>
   24d18:	2001      	movs	r0, #1
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   24d1a:	b382      	cbz	r2, 24d7e <nrf_gpio_reconfigure+0x86>
   24d1c:	f04f 0e02 	mov.w	lr, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   24d20:	ea40 000e 	orr.w	r0, r0, lr
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   24d24:	b374      	cbz	r4, 24d84 <nrf_gpio_reconfigure+0x8c>
   24d26:	f04f 0e0c 	mov.w	lr, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   24d2a:	ea40 000e 	orr.w	r0, r0, lr
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   24d2e:	b367      	cbz	r7, 24d8a <nrf_gpio_reconfigure+0x92>
   24d30:	f44f 6ee0 	mov.w	lr, #1792	; 0x700
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   24d34:	ea40 000e 	orr.w	r0, r0, lr
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   24d38:	b356      	cbz	r6, 24d90 <nrf_gpio_reconfigure+0x98>
   24d3a:	f44f 3e40 	mov.w	lr, #196608	; 0x30000
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   24d3e:	ea40 000e 	orr.w	r0, r0, lr
    cnf &= ~to_update;
   24d42:	ea23 0000 	bic.w	r0, r3, r0
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   24d46:	b331      	cbz	r1, 24d96 <nrf_gpio_reconfigure+0x9e>
   24d48:	780b      	ldrb	r3, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   24d4a:	b332      	cbz	r2, 24d9a <nrf_gpio_reconfigure+0xa2>
   24d4c:	7812      	ldrb	r2, [r2, #0]
   24d4e:	0052      	lsls	r2, r2, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   24d50:	4313      	orrs	r3, r2
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   24d52:	b324      	cbz	r4, 24d9e <nrf_gpio_reconfigure+0xa6>
   24d54:	7822      	ldrb	r2, [r4, #0]
   24d56:	0092      	lsls	r2, r2, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   24d58:	4313      	orrs	r3, r2
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   24d5a:	b317      	cbz	r7, 24da2 <nrf_gpio_reconfigure+0xaa>
   24d5c:	783a      	ldrb	r2, [r7, #0]
   24d5e:	0212      	lsls	r2, r2, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   24d60:	4313      	orrs	r3, r2
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   24d62:	b306      	cbz	r6, 24da6 <nrf_gpio_reconfigure+0xae>
   24d64:	7832      	ldrb	r2, [r6, #0]
   24d66:	0412      	lsls	r2, r2, #16
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   24d68:	4313      	orrs	r3, r2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   24d6a:	4303      	orrs	r3, r0
    reg->PIN_CNF[pin_number] = cnf;
   24d6c:	f50c 7ce0 	add.w	ip, ip, #448	; 0x1c0
   24d70:	f845 302c 	str.w	r3, [r5, ip, lsl #2]
}
   24d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
        case 1: return NRF_P1;
   24d76:	4d0d      	ldr	r5, [pc, #52]	; (24dac <nrf_gpio_reconfigure+0xb4>)
   24d78:	e7c9      	b.n	24d0e <nrf_gpio_reconfigure+0x16>
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   24d7a:	2000      	movs	r0, #0
   24d7c:	e7cd      	b.n	24d1a <nrf_gpio_reconfigure+0x22>
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   24d7e:	f04f 0e00 	mov.w	lr, #0
   24d82:	e7cd      	b.n	24d20 <nrf_gpio_reconfigure+0x28>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   24d84:	f04f 0e00 	mov.w	lr, #0
   24d88:	e7cf      	b.n	24d2a <nrf_gpio_reconfigure+0x32>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   24d8a:	f04f 0e00 	mov.w	lr, #0
   24d8e:	e7d1      	b.n	24d34 <nrf_gpio_reconfigure+0x3c>
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   24d90:	f04f 0e00 	mov.w	lr, #0
   24d94:	e7d3      	b.n	24d3e <nrf_gpio_reconfigure+0x46>
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   24d96:	2300      	movs	r3, #0
   24d98:	e7d7      	b.n	24d4a <nrf_gpio_reconfigure+0x52>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   24d9a:	2200      	movs	r2, #0
   24d9c:	e7d8      	b.n	24d50 <nrf_gpio_reconfigure+0x58>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   24d9e:	2200      	movs	r2, #0
   24da0:	e7da      	b.n	24d58 <nrf_gpio_reconfigure+0x60>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   24da2:	2200      	movs	r2, #0
   24da4:	e7dc      	b.n	24d60 <nrf_gpio_reconfigure+0x68>
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   24da6:	2200      	movs	r2, #0
   24da8:	e7de      	b.n	24d68 <nrf_gpio_reconfigure+0x70>
   24daa:	bf00      	nop
   24dac:	50000300 	.word	0x50000300

00024db0 <nrf_gpio_latches_read_and_clear>:
{
   24db0:	b500      	push	{lr}
   24db2:	b083      	sub	sp, #12
   24db4:	4684      	mov	ip, r0
   24db6:	468e      	mov	lr, r1
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
   24db8:	4b0d      	ldr	r3, [pc, #52]	; (24df0 <nrf_gpio_latches_read_and_clear+0x40>)
   24dba:	e893 0003 	ldmia.w	r3, {r0, r1}
   24dbe:	ab02      	add	r3, sp, #8
   24dc0:	e903 0003 	stmdb	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
   24dc4:	4663      	mov	r3, ip
   24dc6:	e00b      	b.n	24de0 <nrf_gpio_latches_read_and_clear+0x30>
        *p_masks = gpio_regs[i]->LATCH;
   24dc8:	a902      	add	r1, sp, #8
   24dca:	eb01 0183 	add.w	r1, r1, r3, lsl #2
   24dce:	f851 1c08 	ldr.w	r1, [r1, #-8]
   24dd2:	f8d1 0520 	ldr.w	r0, [r1, #1312]	; 0x520
   24dd6:	f842 0b04 	str.w	r0, [r2], #4
        gpio_regs[i]->LATCH = *p_masks;
   24dda:	f8c1 0520 	str.w	r0, [r1, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
   24dde:	3301      	adds	r3, #1
   24de0:	eb0c 000e 	add.w	r0, ip, lr
   24de4:	4298      	cmp	r0, r3
   24de6:	d8ef      	bhi.n	24dc8 <nrf_gpio_latches_read_and_clear+0x18>
}
   24de8:	b003      	add	sp, #12
   24dea:	f85d fb04 	ldr.w	pc, [sp], #4
   24dee:	bf00      	nop
   24df0:	00031598 	.word	0x00031598

00024df4 <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   24df4:	3008      	adds	r0, #8
   24df6:	4b03      	ldr	r3, [pc, #12]	; (24e04 <pin_in_use+0x10>)
   24df8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   24dfc:	f000 0001 	and.w	r0, r0, #1
   24e00:	4770      	bx	lr
   24e02:	bf00      	nop
   24e04:	2000095c 	.word	0x2000095c

00024e08 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   24e08:	3008      	adds	r0, #8
   24e0a:	4b03      	ldr	r3, [pc, #12]	; (24e18 <pin_in_use_by_te+0x10>)
   24e0c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   24e10:	f3c0 1040 	ubfx	r0, r0, #5, #1
   24e14:	4770      	bx	lr
   24e16:	bf00      	nop
   24e18:	2000095c 	.word	0x2000095c

00024e1c <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   24e1c:	3008      	adds	r0, #8
   24e1e:	4b04      	ldr	r3, [pc, #16]	; (24e30 <pin_has_trigger+0x14>)
   24e20:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   24e24:	f010 001c 	ands.w	r0, r0, #28
   24e28:	bf18      	it	ne
   24e2a:	2001      	movne	r0, #1
   24e2c:	4770      	bx	lr
   24e2e:	bf00      	nop
   24e30:	2000095c 	.word	0x2000095c

00024e34 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   24e34:	3008      	adds	r0, #8
   24e36:	4b03      	ldr	r3, [pc, #12]	; (24e44 <pin_is_output+0x10>)
   24e38:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   24e3c:	f3c0 0040 	ubfx	r0, r0, #1, #1
   24e40:	4770      	bx	lr
   24e42:	bf00      	nop
   24e44:	2000095c 	.word	0x2000095c

00024e48 <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   24e48:	3008      	adds	r0, #8
   24e4a:	4b02      	ldr	r3, [pc, #8]	; (24e54 <pin_te_get+0xc>)
   24e4c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   24e50:	0b40      	lsrs	r0, r0, #13
   24e52:	4770      	bx	lr
   24e54:	2000095c 	.word	0x2000095c

00024e58 <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   24e58:	2200      	movs	r2, #0
   24e5a:	e004      	b.n	24e66 <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   24e5c:	f04f 33ff 	mov.w	r3, #4294967295
   24e60:	4283      	cmp	r3, r0
   24e62:	d00f      	beq.n	24e84 <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   24e64:	3201      	adds	r2, #1
   24e66:	2a29      	cmp	r2, #41	; 0x29
   24e68:	d80a      	bhi.n	24e80 <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   24e6a:	f102 0308 	add.w	r3, r2, #8
   24e6e:	4906      	ldr	r1, [pc, #24]	; (24e88 <handler_in_use+0x30>)
   24e70:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   24e74:	f413 7f80 	tst.w	r3, #256	; 0x100
   24e78:	d0f0      	beq.n	24e5c <handler_in_use+0x4>
   24e7a:	f3c3 2343 	ubfx	r3, r3, #9, #4
   24e7e:	e7ef      	b.n	24e60 <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
   24e80:	2000      	movs	r0, #0
   24e82:	4770      	bx	lr
            return true;
   24e84:	2001      	movs	r0, #1
}
   24e86:	4770      	bx	lr
   24e88:	2000095c 	.word	0x2000095c

00024e8c <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
   24e8c:	2300      	movs	r3, #0
   24e8e:	b113      	cbz	r3, 24e96 <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
   24e90:	f04f 30ff 	mov.w	r0, #4294967295
}
   24e94:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   24e96:	4a07      	ldr	r2, [pc, #28]	; (24eb4 <find_handler+0x28>)
   24e98:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   24e9c:	4282      	cmp	r2, r0
   24e9e:	d001      	beq.n	24ea4 <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
   24ea0:	3301      	adds	r3, #1
   24ea2:	e7f4      	b.n	24e8e <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   24ea4:	4a03      	ldr	r2, [pc, #12]	; (24eb4 <find_handler+0x28>)
   24ea6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   24eaa:	6852      	ldr	r2, [r2, #4]
   24eac:	428a      	cmp	r2, r1
   24eae:	d1f7      	bne.n	24ea0 <find_handler+0x14>
            return i;
   24eb0:	4618      	mov	r0, r3
   24eb2:	4770      	bx	lr
   24eb4:	2000095c 	.word	0x2000095c

00024eb8 <get_initial_sense>:
    return NRFX_SUCCESS;
}

static inline nrf_gpio_pin_sense_t get_initial_sense(nrfx_gpiote_pin_t pin)
{
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   24eb8:	f100 0208 	add.w	r2, r0, #8
   24ebc:	4b0f      	ldr	r3, [pc, #60]	; (24efc <get_initial_sense+0x44>)
   24ebe:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   24ec2:	f3c3 0382 	ubfx	r3, r3, #2, #3
    nrf_gpio_pin_sense_t sense;

    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   24ec6:	2b04      	cmp	r3, #4
   24ec8:	d012      	beq.n	24ef0 <get_initial_sense+0x38>
    {
        sense = NRF_GPIO_PIN_SENSE_LOW;
    }
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   24eca:	2b05      	cmp	r3, #5
   24ecc:	d012      	beq.n	24ef4 <get_initial_sense+0x3c>
    *p_pin = pin_number & 0x1F;
   24ece:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
   24ed2:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   24ed4:	2801      	cmp	r0, #1
   24ed6:	d009      	beq.n	24eec <get_initial_sense+0x34>
        case 0: return NRF_P0;
   24ed8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    return p_reg->IN;
   24edc:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   24ee0:	40d3      	lsrs	r3, r2
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    }
    else
    {
        /* If edge detection start with sensing opposite state. */
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   24ee2:	f013 0f01 	tst.w	r3, #1
   24ee6:	d007      	beq.n	24ef8 <get_initial_sense+0x40>
   24ee8:	2003      	movs	r0, #3
   24eea:	4770      	bx	lr
        case 1: return NRF_P1;
   24eec:	4b04      	ldr	r3, [pc, #16]	; (24f00 <get_initial_sense+0x48>)
   24eee:	e7f5      	b.n	24edc <get_initial_sense+0x24>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   24ef0:	2003      	movs	r0, #3
   24ef2:	4770      	bx	lr
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   24ef4:	2002      	movs	r0, #2
   24ef6:	4770      	bx	lr
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   24ef8:	2002      	movs	r0, #2
    }

    return sense;
}
   24efa:	4770      	bx	lr
   24efc:	2000095c 	.word	0x2000095c
   24f00:	50000300 	.word	0x50000300

00024f04 <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   24f04:	3008      	adds	r0, #8
   24f06:	4b06      	ldr	r3, [pc, #24]	; (24f20 <channel_handler_get+0x1c>)
   24f08:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   24f0c:	f410 7f80 	tst.w	r0, #256	; 0x100
   24f10:	d004      	beq.n	24f1c <channel_handler_get+0x18>
   24f12:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
   24f16:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   24f1a:	4770      	bx	lr
        return NULL;
   24f1c:	2000      	movs	r0, #0
}
   24f1e:	4770      	bx	lr
   24f20:	2000095c 	.word	0x2000095c

00024f24 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   24f24:	b570      	push	{r4, r5, r6, lr}
   24f26:	4604      	mov	r4, r0
   24f28:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
   24f2a:	f7ff ffeb 	bl	24f04 <channel_handler_get>

    if (handler)
   24f2e:	b120      	cbz	r0, 24f3a <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
   24f30:	6806      	ldr	r6, [r0, #0]
   24f32:	6842      	ldr	r2, [r0, #4]
   24f34:	4629      	mov	r1, r5
   24f36:	4620      	mov	r0, r4
   24f38:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
   24f3a:	4b04      	ldr	r3, [pc, #16]	; (24f4c <call_handler+0x28>)
   24f3c:	689b      	ldr	r3, [r3, #8]
   24f3e:	b123      	cbz	r3, 24f4a <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   24f40:	4a02      	ldr	r2, [pc, #8]	; (24f4c <call_handler+0x28>)
   24f42:	68d2      	ldr	r2, [r2, #12]
   24f44:	4629      	mov	r1, r5
   24f46:	4620      	mov	r0, r4
   24f48:	4798      	blx	r3
    }
}
   24f4a:	bd70      	pop	{r4, r5, r6, pc}
   24f4c:	2000095c 	.word	0x2000095c

00024f50 <next_sense_cond_call_handler>:

static void next_sense_cond_call_handler(nrfx_gpiote_pin_t     pin,
                                         nrfx_gpiote_trigger_t trigger,
                                         nrf_gpio_pin_sense_t  sense)
{
   24f50:	b570      	push	{r4, r5, r6, lr}
   24f52:	4606      	mov	r6, r0
   24f54:	460c      	mov	r4, r1
   24f56:	4615      	mov	r5, r2
    if (is_level(trigger))
   24f58:	4608      	mov	r0, r1
   24f5a:	f00a ffc7 	bl	2feec <is_level>
   24f5e:	b960      	cbnz	r0, 24f7a <next_sense_cond_call_handler+0x2a>
    {
        /* Reconfigure sense to the opposite level, so the internal PINx.DETECT signal
         * can be deasserted. Therefore PORT event can be generated again,
         * unless some other PINx.DETECT signal is still active. */
        nrf_gpio_pin_sense_t next_sense = (sense == NRF_GPIO_PIN_SENSE_HIGH) ?
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   24f60:	2d02      	cmp	r5, #2
   24f62:	d028      	beq.n	24fb6 <next_sense_cond_call_handler+0x66>
   24f64:	2102      	movs	r1, #2

        nrf_gpio_cfg_sense_set(pin, next_sense);
   24f66:	4630      	mov	r0, r6
   24f68:	f00a ff98 	bl	2fe9c <nrf_gpio_cfg_sense_set>

        /* Invoke user handler only if the sensed pin level matches its polarity
         * configuration. Call handler unconditionally in case of toggle trigger or
         * level trigger. */
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   24f6c:	2c03      	cmp	r4, #3
   24f6e:	d026      	beq.n	24fbe <next_sense_cond_call_handler+0x6e>
   24f70:	2d02      	cmp	r5, #2
   24f72:	d022      	beq.n	24fba <next_sense_cond_call_handler+0x6a>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   24f74:	2d03      	cmp	r5, #3
   24f76:	d027      	beq.n	24fc8 <next_sense_cond_call_handler+0x78>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
        {
            call_handler(pin, trigger);
        }
    }
}
   24f78:	bd70      	pop	{r4, r5, r6, pc}
        call_handler(pin, trigger);
   24f7a:	4621      	mov	r1, r4
   24f7c:	4630      	mov	r0, r6
   24f7e:	f7ff ffd1 	bl	24f24 <call_handler>
    *p_pin = pin_number & 0x1F;
   24f82:	f006 031f 	and.w	r3, r6, #31
    return pin_number >> 5;
   24f86:	0972      	lsrs	r2, r6, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   24f88:	2a01      	cmp	r2, #1
   24f8a:	d012      	beq.n	24fb2 <next_sense_cond_call_handler+0x62>
        case 0: return NRF_P0;
   24f8c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   24f90:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   24f94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   24f98:	f3c3 4301 	ubfx	r3, r3, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
   24f9c:	429d      	cmp	r5, r3
   24f9e:	d1eb      	bne.n	24f78 <next_sense_cond_call_handler+0x28>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   24fa0:	2100      	movs	r1, #0
   24fa2:	4630      	mov	r0, r6
   24fa4:	f00a ff7a 	bl	2fe9c <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   24fa8:	4629      	mov	r1, r5
   24faa:	4630      	mov	r0, r6
   24fac:	f00a ff76 	bl	2fe9c <nrf_gpio_cfg_sense_set>
   24fb0:	e7e2      	b.n	24f78 <next_sense_cond_call_handler+0x28>
        case 1: return NRF_P1;
   24fb2:	4a07      	ldr	r2, [pc, #28]	; (24fd0 <next_sense_cond_call_handler+0x80>)
   24fb4:	e7ec      	b.n	24f90 <next_sense_cond_call_handler+0x40>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   24fb6:	2103      	movs	r1, #3
   24fb8:	e7d5      	b.n	24f66 <next_sense_cond_call_handler+0x16>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   24fba:	2c01      	cmp	r4, #1
   24fbc:	d1da      	bne.n	24f74 <next_sense_cond_call_handler+0x24>
            call_handler(pin, trigger);
   24fbe:	4621      	mov	r1, r4
   24fc0:	4630      	mov	r0, r6
   24fc2:	f7ff ffaf 	bl	24f24 <call_handler>
}
   24fc6:	e7d7      	b.n	24f78 <next_sense_cond_call_handler+0x28>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   24fc8:	2c02      	cmp	r4, #2
   24fca:	d1d5      	bne.n	24f78 <next_sense_cond_call_handler+0x28>
   24fcc:	e7f7      	b.n	24fbe <next_sense_cond_call_handler+0x6e>
   24fce:	bf00      	nop
   24fd0:	50000300 	.word	0x50000300

00024fd4 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   24fd4:	f100 0208 	add.w	r2, r0, #8
   24fd8:	4b0e      	ldr	r3, [pc, #56]	; (25014 <release_handler+0x40>)
   24fda:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   24fde:	f413 7f80 	tst.w	r3, #256	; 0x100
   24fe2:	d016      	beq.n	25012 <release_handler+0x3e>
{
   24fe4:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   24fe6:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   24fea:	4610      	mov	r0, r2
   24fec:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   24ff0:	4a08      	ldr	r2, [pc, #32]	; (25014 <release_handler+0x40>)
   24ff2:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
   24ff6:	4620      	mov	r0, r4
   24ff8:	f7ff ff2e 	bl	24e58 <handler_in_use>
   24ffc:	b100      	cbz	r0, 25000 <release_handler+0x2c>
}
   24ffe:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
   25000:	4804      	ldr	r0, [pc, #16]	; (25014 <release_handler+0x40>)
   25002:	2300      	movs	r3, #0
   25004:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   25008:	4621      	mov	r1, r4
   2500a:	3068      	adds	r0, #104	; 0x68
   2500c:	f7ff fe52 	bl	24cb4 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   25010:	e7f5      	b.n	24ffe <release_handler+0x2a>
   25012:	4770      	bx	lr
   25014:	2000095c 	.word	0x2000095c

00025018 <pin_handler_trigger_uninit>:
{
   25018:	b510      	push	{r4, lr}
   2501a:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
   2501c:	f7ff fef4 	bl	24e08 <pin_in_use_by_te>
   25020:	b140      	cbz	r0, 25034 <pin_handler_trigger_uninit+0x1c>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   25022:	4620      	mov	r0, r4
   25024:	f7ff ff10 	bl	24e48 <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   25028:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   2502c:	4b06      	ldr	r3, [pc, #24]	; (25048 <pin_handler_trigger_uninit+0x30>)
   2502e:	2200      	movs	r2, #0
   25030:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
   25034:	4620      	mov	r0, r4
   25036:	f7ff ffcd 	bl	24fd4 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   2503a:	3408      	adds	r4, #8
   2503c:	4b03      	ldr	r3, [pc, #12]	; (2504c <pin_handler_trigger_uninit+0x34>)
   2503e:	2200      	movs	r2, #0
   25040:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
   25044:	bd10      	pop	{r4, pc}
   25046:	bf00      	nop
   25048:	40006000 	.word	0x40006000
   2504c:	2000095c 	.word	0x2000095c

00025050 <pin_handler_set>:
{
   25050:	b570      	push	{r4, r5, r6, lr}
   25052:	b082      	sub	sp, #8
   25054:	4605      	mov	r5, r0
   25056:	460e      	mov	r6, r1
   25058:	4614      	mov	r4, r2
    release_handler(pin);
   2505a:	f7ff ffbb 	bl	24fd4 <release_handler>
    if (!handler)
   2505e:	b326      	cbz	r6, 250aa <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
   25060:	4621      	mov	r1, r4
   25062:	4630      	mov	r0, r6
   25064:	f7ff ff12 	bl	24e8c <find_handler>
    if (handler_id < 0)
   25068:	1e03      	subs	r3, r0, #0
   2506a:	db13      	blt.n	25094 <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
   2506c:	4910      	ldr	r1, [pc, #64]	; (250b0 <pin_handler_set+0x60>)
   2506e:	f841 6033 	str.w	r6, [r1, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   25072:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
   25076:	6054      	str	r4, [r2, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   25078:	f105 0008 	add.w	r0, r5, #8
   2507c:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
   25080:	025b      	lsls	r3, r3, #9
   25082:	b29b      	uxth	r3, r3
   25084:	4313      	orrs	r3, r2
   25086:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   2508a:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
    return NRFX_SUCCESS;
   2508e:	4809      	ldr	r0, [pc, #36]	; (250b4 <pin_handler_set+0x64>)
}
   25090:	b002      	add	sp, #8
   25092:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   25094:	f10d 0107 	add.w	r1, sp, #7
   25098:	4807      	ldr	r0, [pc, #28]	; (250b8 <pin_handler_set+0x68>)
   2509a:	f7ff fde3 	bl	24c64 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   2509e:	4b05      	ldr	r3, [pc, #20]	; (250b4 <pin_handler_set+0x64>)
   250a0:	4298      	cmp	r0, r3
   250a2:	d1f5      	bne.n	25090 <pin_handler_set+0x40>
        handler_id = (int32_t)id;
   250a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   250a8:	e7e0      	b.n	2506c <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
   250aa:	4802      	ldr	r0, [pc, #8]	; (250b4 <pin_handler_set+0x64>)
   250ac:	e7f0      	b.n	25090 <pin_handler_set+0x40>
   250ae:	bf00      	nop
   250b0:	2000095c 	.word	0x2000095c
   250b4:	0bad0000 	.word	0x0bad0000
   250b8:	200009c4 	.word	0x200009c4

000250bc <port_event_handle>:
    }
    return false;
}

static void port_event_handle(void)
{
   250bc:	b570      	push	{r4, r5, r6, lr}
   250be:	b082      	sub	sp, #8
    uint32_t latch[GPIO_COUNT];

    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);
   250c0:	466a      	mov	r2, sp
   250c2:	2102      	movs	r1, #2
   250c4:	2000      	movs	r0, #0
   250c6:	f7ff fe73 	bl	24db0 <nrf_gpio_latches_read_and_clear>
   250ca:	e040      	b.n	2514e <port_event_handle+0x92>
   250cc:	4e22      	ldr	r6, [pc, #136]	; (25158 <port_event_handle+0x9c>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   250ce:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
   250d2:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);

                nrf_bitmask_bit_clear(pin, latch);
                sense = nrf_gpio_pin_sense_get(pin);

                next_sense_cond_call_handler(pin, trigger, sense);
   250d6:	f3c2 4201 	ubfx	r2, r2, #16, #2
   250da:	f7ff ff39 	bl	24f50 <next_sense_cond_call_handler>
    reg->LATCH = (1 << pin_number);
   250de:	2301      	movs	r3, #1
   250e0:	40ab      	lsls	r3, r5
   250e2:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
            while (latch[i])
   250e6:	ab02      	add	r3, sp, #8
   250e8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   250ec:	f853 0c08 	ldr.w	r0, [r3, #-8]
   250f0:	b300      	cbz	r0, 25134 <port_event_handle+0x78>
                uint32_t pin = NRF_CTZ(latch[i]);
   250f2:	fa90 f0a0 	rbit	r0, r0
   250f6:	fab0 f080 	clz	r0, r0
                pin += 32 * i;
   250fa:	eb00 1044 	add.w	r0, r0, r4, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   250fe:	f100 0208 	add.w	r2, r0, #8
   25102:	4b16      	ldr	r3, [pc, #88]	; (2515c <port_event_handle+0xa0>)
   25104:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
   25108:	f3c1 0182 	ubfx	r1, r1, #2, #3
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   2510c:	08c5      	lsrs	r5, r0, #3
    bit = BITMASK_RELBIT_GET(bit);
   2510e:	f000 0607 	and.w	r6, r0, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   25112:	f81d 2005 	ldrb.w	r2, [sp, r5]
   25116:	2301      	movs	r3, #1
   25118:	40b3      	lsls	r3, r6
   2511a:	43db      	mvns	r3, r3
   2511c:	b25b      	sxtb	r3, r3
   2511e:	4013      	ands	r3, r2
   25120:	f80d 3005 	strb.w	r3, [sp, r5]
    *p_pin = pin_number & 0x1F;
   25124:	f000 051f 	and.w	r5, r0, #31
    return pin_number >> 5;
   25128:	0943      	lsrs	r3, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2512a:	2b01      	cmp	r3, #1
   2512c:	d0ce      	beq.n	250cc <port_event_handle+0x10>
        case 0: return NRF_P0;
   2512e:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
   25132:	e7cc      	b.n	250ce <port_event_handle+0x12>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   25134:	3401      	adds	r4, #1
   25136:	2c01      	cmp	r4, #1
   25138:	d9d5      	bls.n	250e6 <port_event_handle+0x2a>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   2513a:	4b09      	ldr	r3, [pc, #36]	; (25160 <port_event_handle+0xa4>)
   2513c:	2200      	movs	r2, #0
   2513e:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
   25142:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
        }

        /* All pins have been handled, clear PORT, check latch again in case
         * something came between deciding to exit and clearing PORT event. */
        nrf_gpiote_event_clear(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT);
    } while (latch_pending_read_and_check(latch));
   25146:	4668      	mov	r0, sp
   25148:	f00a fed5 	bl	2fef6 <latch_pending_read_and_check>
   2514c:	b108      	cbz	r0, 25152 <port_event_handle+0x96>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   2514e:	2400      	movs	r4, #0
   25150:	e7f1      	b.n	25136 <port_event_handle+0x7a>
}
   25152:	b002      	add	sp, #8
   25154:	bd70      	pop	{r4, r5, r6, pc}
   25156:	bf00      	nop
   25158:	50000300 	.word	0x50000300
   2515c:	2000095c 	.word	0x2000095c
   25160:	40006000 	.word	0x40006000

00025164 <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
   25164:	b538      	push	{r3, r4, r5, lr}
   25166:	4604      	mov	r4, r0
    while (mask)
   25168:	e018      	b.n	2519c <gpiote_evt_handle+0x38>
    {
        uint32_t ch = NRF_CTZ(mask);
   2516a:	fa94 f3a4 	rbit	r3, r4
   2516e:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   25172:	2201      	movs	r2, #1
   25174:	409a      	lsls	r2, r3
   25176:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   2517a:	4a0a      	ldr	r2, [pc, #40]	; (251a4 <gpiote_evt_handle+0x40>)
   2517c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   25180:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   25184:	f3c5 2505 	ubfx	r5, r5, #8, #6
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   25188:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   2518c:	f3c0 4001 	ubfx	r0, r0, #16, #2
   25190:	f00a feaa 	bl	2fee8 <gpiote_polarity_to_trigger>
   25194:	4601      	mov	r1, r0
   25196:	4628      	mov	r0, r5
   25198:	f7ff fec4 	bl	24f24 <call_handler>
    while (mask)
   2519c:	2c00      	cmp	r4, #0
   2519e:	d1e4      	bne.n	2516a <gpiote_evt_handle+0x6>
    }
}
   251a0:	bd38      	pop	{r3, r4, r5, pc}
   251a2:	bf00      	nop
   251a4:	40006000 	.word	0x40006000

000251a8 <nrfx_gpiote_input_configure>:
{
   251a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   251ac:	b084      	sub	sp, #16
   251ae:	4604      	mov	r4, r0
   251b0:	4615      	mov	r5, r2
   251b2:	461e      	mov	r6, r3
    if (p_input_config)
   251b4:	b309      	cbz	r1, 251fa <nrfx_gpiote_input_configure+0x52>
   251b6:	460f      	mov	r7, r1
        if (pin_is_task_output(pin))
   251b8:	f00a fe80 	bl	2febc <pin_is_task_output>
   251bc:	2800      	cmp	r0, #0
   251be:	d13f      	bne.n	25240 <nrfx_gpiote_input_configure+0x98>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   251c0:	2300      	movs	r3, #0
   251c2:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   251c6:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   251ca:	9301      	str	r3, [sp, #4]
   251cc:	9300      	str	r3, [sp, #0]
   251ce:	463b      	mov	r3, r7
   251d0:	f10d 020f 	add.w	r2, sp, #15
   251d4:	f10d 010e 	add.w	r1, sp, #14
   251d8:	4620      	mov	r0, r4
   251da:	f7ff fd8d 	bl	24cf8 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   251de:	4a38      	ldr	r2, [pc, #224]	; (252c0 <nrfx_gpiote_input_configure+0x118>)
   251e0:	f104 0108 	add.w	r1, r4, #8
   251e4:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   251e8:	f023 0302 	bic.w	r3, r3, #2
   251ec:	b29b      	uxth	r3, r3
   251ee:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   251f2:	f043 0301 	orr.w	r3, r3, #1
   251f6:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
   251fa:	b1bd      	cbz	r5, 2522c <nrfx_gpiote_input_configure+0x84>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   251fc:	782f      	ldrb	r7, [r5, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   251fe:	f8d5 8004 	ldr.w	r8, [r5, #4]
        if (pin_is_output(pin))
   25202:	4620      	mov	r0, r4
   25204:	f7ff fe16 	bl	24e34 <pin_is_output>
   25208:	b1e0      	cbz	r0, 25244 <nrfx_gpiote_input_configure+0x9c>
            if (use_evt)
   2520a:	f1b8 0f00 	cmp.w	r8, #0
   2520e:	d151      	bne.n	252b4 <nrfx_gpiote_input_configure+0x10c>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   25210:	4a2b      	ldr	r2, [pc, #172]	; (252c0 <nrfx_gpiote_input_configure+0x118>)
   25212:	f104 0108 	add.w	r1, r4, #8
   25216:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   2521a:	f023 031c 	bic.w	r3, r3, #28
   2521e:	b29b      	uxth	r3, r3
   25220:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   25224:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
   25228:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
   2522c:	2e00      	cmp	r6, #0
   2522e:	d045      	beq.n	252bc <nrfx_gpiote_input_configure+0x114>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   25230:	6872      	ldr	r2, [r6, #4]
   25232:	6831      	ldr	r1, [r6, #0]
   25234:	4620      	mov	r0, r4
   25236:	f7ff ff0b 	bl	25050 <pin_handler_set>
}
   2523a:	b004      	add	sp, #16
   2523c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return NRFX_ERROR_INVALID_PARAM;
   25240:	4820      	ldr	r0, [pc, #128]	; (252c4 <nrfx_gpiote_input_configure+0x11c>)
   25242:	e7fa      	b.n	2523a <nrfx_gpiote_input_configure+0x92>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   25244:	4a1e      	ldr	r2, [pc, #120]	; (252c0 <nrfx_gpiote_input_configure+0x118>)
   25246:	f104 0108 	add.w	r1, r4, #8
   2524a:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   2524e:	f023 0320 	bic.w	r3, r3, #32
   25252:	04db      	lsls	r3, r3, #19
   25254:	0cdb      	lsrs	r3, r3, #19
   25256:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            if (use_evt)
   2525a:	f1b8 0f00 	cmp.w	r8, #0
   2525e:	d0d7      	beq.n	25210 <nrfx_gpiote_input_configure+0x68>
                if (!edge)
   25260:	2f03      	cmp	r7, #3
   25262:	d829      	bhi.n	252b8 <nrfx_gpiote_input_configure+0x110>
                uint8_t ch = *p_trigger_config->p_in_channel;
   25264:	686b      	ldr	r3, [r5, #4]
   25266:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   25268:	b937      	cbnz	r7, 25278 <nrfx_gpiote_input_configure+0xd0>
    p_reg->CONFIG[idx] = 0;
   2526a:	f505 75a2 	add.w	r5, r5, #324	; 0x144
   2526e:	4b16      	ldr	r3, [pc, #88]	; (252c8 <nrfx_gpiote_input_configure+0x120>)
   25270:	2200      	movs	r2, #0
   25272:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
   25276:	e7cb      	b.n	25210 <nrfx_gpiote_input_configure+0x68>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
   25278:	4638      	mov	r0, r7
   2527a:	f00a fe36 	bl	2feea <gpiote_trigger_to_polarity>
   2527e:	4603      	mov	r3, r0
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   25280:	4811      	ldr	r0, [pc, #68]	; (252c8 <nrfx_gpiote_input_configure+0x120>)
   25282:	f505 71a2 	add.w	r1, r5, #324	; 0x144
   25286:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
   2528a:	f022 0203 	bic.w	r2, r2, #3
   2528e:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
                    nrf_gpiote_event_configure(NRF_GPIOTE, ch, pin, polarity);
   25292:	4622      	mov	r2, r4
   25294:	4629      	mov	r1, r5
   25296:	f00a fdc9 	bl	2fe2c <nrf_gpiote_event_configure>
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   2529a:	4a09      	ldr	r2, [pc, #36]	; (252c0 <nrfx_gpiote_input_configure+0x118>)
   2529c:	f104 0108 	add.w	r1, r4, #8
   252a0:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   252a4:	036d      	lsls	r5, r5, #13
   252a6:	b2ad      	uxth	r5, r5
   252a8:	432b      	orrs	r3, r5
   252aa:	f043 0320 	orr.w	r3, r3, #32
   252ae:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
   252b2:	e7ad      	b.n	25210 <nrfx_gpiote_input_configure+0x68>
                return NRFX_ERROR_INVALID_PARAM;
   252b4:	4803      	ldr	r0, [pc, #12]	; (252c4 <nrfx_gpiote_input_configure+0x11c>)
   252b6:	e7c0      	b.n	2523a <nrfx_gpiote_input_configure+0x92>
                    return NRFX_ERROR_INVALID_PARAM;
   252b8:	4802      	ldr	r0, [pc, #8]	; (252c4 <nrfx_gpiote_input_configure+0x11c>)
   252ba:	e7be      	b.n	2523a <nrfx_gpiote_input_configure+0x92>
        err = NRFX_SUCCESS;
   252bc:	4803      	ldr	r0, [pc, #12]	; (252cc <nrfx_gpiote_input_configure+0x124>)
   252be:	e7bc      	b.n	2523a <nrfx_gpiote_input_configure+0x92>
   252c0:	2000095c 	.word	0x2000095c
   252c4:	0bad0004 	.word	0x0bad0004
   252c8:	40006000 	.word	0x40006000
   252cc:	0bad0000 	.word	0x0bad0000

000252d0 <nrfx_gpiote_output_configure>:
{
   252d0:	b570      	push	{r4, r5, r6, lr}
   252d2:	b084      	sub	sp, #16
   252d4:	4604      	mov	r4, r0
   252d6:	4615      	mov	r5, r2
    if (p_config)
   252d8:	b329      	cbz	r1, 25326 <nrfx_gpiote_output_configure+0x56>
   252da:	460e      	mov	r6, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   252dc:	f00a fdfd 	bl	2feda <pin_is_input>
   252e0:	b120      	cbz	r0, 252ec <nrfx_gpiote_output_configure+0x1c>
   252e2:	4620      	mov	r0, r4
   252e4:	f7ff fd90 	bl	24e08 <pin_in_use_by_te>
   252e8:	2800      	cmp	r0, #0
   252ea:	d138      	bne.n	2535e <nrfx_gpiote_output_configure+0x8e>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   252ec:	4620      	mov	r0, r4
   252ee:	f7ff fd95 	bl	24e1c <pin_has_trigger>
   252f2:	b110      	cbz	r0, 252fa <nrfx_gpiote_output_configure+0x2a>
   252f4:	7873      	ldrb	r3, [r6, #1]
   252f6:	2b01      	cmp	r3, #1
   252f8:	d031      	beq.n	2535e <nrfx_gpiote_output_configure+0x8e>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   252fa:	2301      	movs	r3, #1
   252fc:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   25300:	2300      	movs	r3, #0
   25302:	9301      	str	r3, [sp, #4]
   25304:	9600      	str	r6, [sp, #0]
   25306:	1cb3      	adds	r3, r6, #2
   25308:	1c72      	adds	r2, r6, #1
   2530a:	f10d 010f 	add.w	r1, sp, #15
   2530e:	4620      	mov	r0, r4
   25310:	f7ff fcf2 	bl	24cf8 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   25314:	4a1f      	ldr	r2, [pc, #124]	; (25394 <nrfx_gpiote_output_configure+0xc4>)
   25316:	f104 0108 	add.w	r1, r4, #8
   2531a:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   2531e:	f043 0303 	orr.w	r3, r3, #3
   25322:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
   25326:	b385      	cbz	r5, 2538a <nrfx_gpiote_output_configure+0xba>
        if (pin_is_input(pin))
   25328:	4620      	mov	r0, r4
   2532a:	f00a fdd6 	bl	2feda <pin_is_input>
   2532e:	bb70      	cbnz	r0, 2538e <nrfx_gpiote_output_configure+0xbe>
        uint32_t ch = p_task_config->task_ch;
   25330:	782e      	ldrb	r6, [r5, #0]
    p_reg->CONFIG[idx] = 0;
   25332:	f506 72a2 	add.w	r2, r6, #324	; 0x144
   25336:	4b18      	ldr	r3, [pc, #96]	; (25398 <nrfx_gpiote_output_configure+0xc8>)
   25338:	2100      	movs	r1, #0
   2533a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   2533e:	4a15      	ldr	r2, [pc, #84]	; (25394 <nrfx_gpiote_output_configure+0xc4>)
   25340:	f104 0108 	add.w	r1, r4, #8
   25344:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   25348:	f023 0320 	bic.w	r3, r3, #32
   2534c:	04db      	lsls	r3, r3, #19
   2534e:	0cdb      	lsrs	r3, r3, #19
   25350:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   25354:	786b      	ldrb	r3, [r5, #1]
   25356:	b923      	cbnz	r3, 25362 <nrfx_gpiote_output_configure+0x92>
    return NRFX_SUCCESS;
   25358:	4810      	ldr	r0, [pc, #64]	; (2539c <nrfx_gpiote_output_configure+0xcc>)
}
   2535a:	b004      	add	sp, #16
   2535c:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_INVALID_PARAM;
   2535e:	4810      	ldr	r0, [pc, #64]	; (253a0 <nrfx_gpiote_output_configure+0xd0>)
   25360:	e7fb      	b.n	2535a <nrfx_gpiote_output_configure+0x8a>
                                      p_task_config->init_val);
   25362:	78aa      	ldrb	r2, [r5, #2]
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   25364:	9200      	str	r2, [sp, #0]
   25366:	4622      	mov	r2, r4
   25368:	4631      	mov	r1, r6
   2536a:	480b      	ldr	r0, [pc, #44]	; (25398 <nrfx_gpiote_output_configure+0xc8>)
   2536c:	f00a fd77 	bl	2fe5e <nrf_gpiote_task_configure>
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   25370:	4a08      	ldr	r2, [pc, #32]	; (25394 <nrfx_gpiote_output_configure+0xc4>)
   25372:	3408      	adds	r4, #8
   25374:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
   25378:	0376      	lsls	r6, r6, #13
   2537a:	b2b6      	uxth	r6, r6
   2537c:	4333      	orrs	r3, r6
   2537e:	f043 0320 	orr.w	r3, r3, #32
   25382:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    return NRFX_SUCCESS;
   25386:	4805      	ldr	r0, [pc, #20]	; (2539c <nrfx_gpiote_output_configure+0xcc>)
   25388:	e7e7      	b.n	2535a <nrfx_gpiote_output_configure+0x8a>
   2538a:	4804      	ldr	r0, [pc, #16]	; (2539c <nrfx_gpiote_output_configure+0xcc>)
   2538c:	e7e5      	b.n	2535a <nrfx_gpiote_output_configure+0x8a>
            return NRFX_ERROR_INVALID_PARAM;
   2538e:	4804      	ldr	r0, [pc, #16]	; (253a0 <nrfx_gpiote_output_configure+0xd0>)
   25390:	e7e3      	b.n	2535a <nrfx_gpiote_output_configure+0x8a>
   25392:	bf00      	nop
   25394:	2000095c 	.word	0x2000095c
   25398:	40006000 	.word	0x40006000
   2539c:	0bad0000 	.word	0x0bad0000
   253a0:	0bad0004 	.word	0x0bad0004

000253a4 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   253a4:	4b01      	ldr	r3, [pc, #4]	; (253ac <nrfx_gpiote_global_callback_set+0x8>)
   253a6:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
   253a8:	60d9      	str	r1, [r3, #12]
}
   253aa:	4770      	bx	lr
   253ac:	2000095c 	.word	0x2000095c

000253b0 <nrfx_gpiote_channel_get>:
{
   253b0:	b538      	push	{r3, r4, r5, lr}
   253b2:	4604      	mov	r4, r0
   253b4:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin))
   253b6:	f7ff fd27 	bl	24e08 <pin_in_use_by_te>
   253ba:	b140      	cbz	r0, 253ce <nrfx_gpiote_channel_get+0x1e>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   253bc:	f104 0008 	add.w	r0, r4, #8
   253c0:	4b04      	ldr	r3, [pc, #16]	; (253d4 <nrfx_gpiote_channel_get+0x24>)
   253c2:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
   253c6:	0b5b      	lsrs	r3, r3, #13
   253c8:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
   253ca:	4803      	ldr	r0, [pc, #12]	; (253d8 <nrfx_gpiote_channel_get+0x28>)
}
   253cc:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
   253ce:	4803      	ldr	r0, [pc, #12]	; (253dc <nrfx_gpiote_channel_get+0x2c>)
   253d0:	e7fc      	b.n	253cc <nrfx_gpiote_channel_get+0x1c>
   253d2:	bf00      	nop
   253d4:	2000095c 	.word	0x2000095c
   253d8:	0bad0000 	.word	0x0bad0000
   253dc:	0bad0004 	.word	0x0bad0004

000253e0 <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   253e0:	4b0f      	ldr	r3, [pc, #60]	; (25420 <nrfx_gpiote_init+0x40>)
   253e2:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
   253e6:	b10b      	cbz	r3, 253ec <nrfx_gpiote_init+0xc>
        return err_code;
   253e8:	480e      	ldr	r0, [pc, #56]	; (25424 <nrfx_gpiote_init+0x44>)
}
   253ea:	4770      	bx	lr
{
   253ec:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   253ee:	4c0e      	ldr	r4, [pc, #56]	; (25428 <nrfx_gpiote_init+0x48>)
   253f0:	2254      	movs	r2, #84	; 0x54
   253f2:	2100      	movs	r1, #0
   253f4:	4620      	mov	r0, r4
   253f6:	f004 fc0b 	bl	29c10 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   253fa:	2006      	movs	r0, #6
   253fc:	f004 fada 	bl	299b4 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   25400:	4b0a      	ldr	r3, [pc, #40]	; (2542c <nrfx_gpiote_init+0x4c>)
   25402:	2200      	movs	r2, #0
   25404:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
   25408:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   2540c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   25410:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   25414:	2301      	movs	r3, #1
   25416:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   2541a:	65a3      	str	r3, [r4, #88]	; 0x58
    return err_code;
   2541c:	4804      	ldr	r0, [pc, #16]	; (25430 <nrfx_gpiote_init+0x50>)
}
   2541e:	bd10      	pop	{r4, pc}
   25420:	2000095c 	.word	0x2000095c
   25424:	0bad0005 	.word	0x0bad0005
   25428:	2000096c 	.word	0x2000096c
   2542c:	40006000 	.word	0x40006000
   25430:	0bad0000 	.word	0x0bad0000

00025434 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   25434:	4b03      	ldr	r3, [pc, #12]	; (25444 <nrfx_gpiote_is_init+0x10>)
   25436:	f893 006c 	ldrb.w	r0, [r3, #108]	; 0x6c
}
   2543a:	3800      	subs	r0, #0
   2543c:	bf18      	it	ne
   2543e:	2001      	movne	r0, #1
   25440:	4770      	bx	lr
   25442:	bf00      	nop
   25444:	2000095c 	.word	0x2000095c

00025448 <nrfx_gpiote_channel_free>:
{
   25448:	b508      	push	{r3, lr}
   2544a:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   2544c:	4801      	ldr	r0, [pc, #4]	; (25454 <nrfx_gpiote_channel_free+0xc>)
   2544e:	f7ff fc31 	bl	24cb4 <nrfx_flag32_free>
}
   25452:	bd08      	pop	{r3, pc}
   25454:	200009c0 	.word	0x200009c0

00025458 <nrfx_gpiote_channel_alloc>:
{
   25458:	b508      	push	{r3, lr}
   2545a:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   2545c:	4801      	ldr	r0, [pc, #4]	; (25464 <nrfx_gpiote_channel_alloc+0xc>)
   2545e:	f7ff fc01 	bl	24c64 <nrfx_flag32_alloc>
}
   25462:	bd08      	pop	{r3, pc}
   25464:	200009c0 	.word	0x200009c0

00025468 <nrfx_gpiote_trigger_enable>:
{
   25468:	b538      	push	{r3, r4, r5, lr}
   2546a:	4604      	mov	r4, r0
   2546c:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   2546e:	f7ff fccb 	bl	24e08 <pin_in_use_by_te>
   25472:	b300      	cbz	r0, 254b6 <nrfx_gpiote_trigger_enable+0x4e>
   25474:	4620      	mov	r0, r4
   25476:	f00a fd30 	bl	2feda <pin_is_input>
   2547a:	b1e0      	cbz	r0, 254b6 <nrfx_gpiote_trigger_enable+0x4e>
        uint8_t ch = pin_te_get(pin);
   2547c:	4620      	mov	r0, r4
   2547e:	f7ff fce3 	bl	24e48 <pin_te_get>
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   25482:	0083      	lsls	r3, r0, #2
   25484:	f503 7380 	add.w	r3, r3, #256	; 0x100
    return ((uint32_t)p_reg + event);
   25488:	b29b      	uxth	r3, r3
   2548a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2548e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   25492:	2200      	movs	r2, #0
   25494:	601a      	str	r2, [r3, #0]
   25496:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   25498:	4a0b      	ldr	r2, [pc, #44]	; (254c8 <nrfx_gpiote_trigger_enable+0x60>)
   2549a:	f500 71a2 	add.w	r1, r0, #324	; 0x144
   2549e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   254a2:	f043 0301 	orr.w	r3, r3, #1
   254a6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
   254aa:	b15d      	cbz	r5, 254c4 <nrfx_gpiote_trigger_enable+0x5c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   254ac:	2301      	movs	r3, #1
   254ae:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
   254b0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   254b4:	e006      	b.n	254c4 <nrfx_gpiote_trigger_enable+0x5c>
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   254b6:	4620      	mov	r0, r4
   254b8:	f7ff fcfe 	bl	24eb8 <get_initial_sense>
   254bc:	4601      	mov	r1, r0
   254be:	4620      	mov	r0, r4
   254c0:	f00a fcec 	bl	2fe9c <nrf_gpio_cfg_sense_set>
}
   254c4:	bd38      	pop	{r3, r4, r5, pc}
   254c6:	bf00      	nop
   254c8:	40006000 	.word	0x40006000

000254cc <nrfx_gpiote_trigger_disable>:
{
   254cc:	b510      	push	{r4, lr}
   254ce:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   254d0:	f7ff fc9a 	bl	24e08 <pin_in_use_by_te>
   254d4:	b1a0      	cbz	r0, 25500 <nrfx_gpiote_trigger_disable+0x34>
   254d6:	4620      	mov	r0, r4
   254d8:	f00a fcff 	bl	2feda <pin_is_input>
   254dc:	b180      	cbz	r0, 25500 <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
   254de:	4620      	mov	r0, r4
   254e0:	f7ff fcb2 	bl	24e48 <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   254e4:	2201      	movs	r2, #1
   254e6:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
   254e8:	4b08      	ldr	r3, [pc, #32]	; (2550c <nrfx_gpiote_trigger_disable+0x40>)
   254ea:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   254ee:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   254f2:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
   254f6:	f022 0203 	bic.w	r2, r2, #3
   254fa:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
   254fe:	e003      	b.n	25508 <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   25500:	2100      	movs	r1, #0
   25502:	4620      	mov	r0, r4
   25504:	f00a fcca 	bl	2fe9c <nrf_gpio_cfg_sense_set>
}
   25508:	bd10      	pop	{r4, pc}
   2550a:	bf00      	nop
   2550c:	40006000 	.word	0x40006000

00025510 <nrfx_gpiote_pin_uninit>:
{
   25510:	b510      	push	{r4, lr}
   25512:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   25514:	f7ff fc6e 	bl	24df4 <pin_in_use>
   25518:	b908      	cbnz	r0, 2551e <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
   2551a:	480c      	ldr	r0, [pc, #48]	; (2554c <nrfx_gpiote_pin_uninit+0x3c>)
}
   2551c:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_disable(pin);
   2551e:	4620      	mov	r0, r4
   25520:	f7ff ffd4 	bl	254cc <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   25524:	4620      	mov	r0, r4
   25526:	f7ff fd77 	bl	25018 <pin_handler_trigger_uninit>
    *p_pin = pin_number & 0x1F;
   2552a:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
   2552e:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   25530:	2c01      	cmp	r4, #1
   25532:	d008      	beq.n	25546 <nrfx_gpiote_pin_uninit+0x36>
        case 0: return NRF_P0;
   25534:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   25538:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   2553c:	2102      	movs	r1, #2
   2553e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    return NRFX_SUCCESS;
   25542:	4803      	ldr	r0, [pc, #12]	; (25550 <nrfx_gpiote_pin_uninit+0x40>)
   25544:	e7ea      	b.n	2551c <nrfx_gpiote_pin_uninit+0xc>
        case 1: return NRF_P1;
   25546:	4a03      	ldr	r2, [pc, #12]	; (25554 <nrfx_gpiote_pin_uninit+0x44>)
   25548:	e7f6      	b.n	25538 <nrfx_gpiote_pin_uninit+0x28>
   2554a:	bf00      	nop
   2554c:	0bad0004 	.word	0x0bad0004
   25550:	0bad0000 	.word	0x0bad0000
   25554:	50000300 	.word	0x50000300

00025558 <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
   25558:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   2555a:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
   2555c:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   25560:	2100      	movs	r1, #0
    uint32_t status = 0;
   25562:	460c      	mov	r4, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   25564:	e003      	b.n	2556e <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
   25566:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
   25568:	3304      	adds	r3, #4
   2556a:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   2556c:	3101      	adds	r1, #1
   2556e:	2907      	cmp	r1, #7
   25570:	d814      	bhi.n	2559c <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   25572:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   25576:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
   2557a:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   2557c:	2a00      	cmp	r2, #0
   2557e:	d0f2      	beq.n	25566 <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
   25580:	4a0c      	ldr	r2, [pc, #48]	; (255b4 <nrfx_gpiote_irq_handler+0x5c>)
   25582:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   25586:	4210      	tst	r0, r2
   25588:	d0ed      	beq.n	25566 <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
   2558a:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   2558e:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   25592:	2500      	movs	r5, #0
   25594:	6015      	str	r5, [r2, #0]
   25596:	6812      	ldr	r2, [r2, #0]
            status |= mask;
   25598:	4304      	orrs	r4, r0
   2559a:	e7e4      	b.n	25566 <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2559c:	4b05      	ldr	r3, [pc, #20]	; (255b4 <nrfx_gpiote_irq_handler+0x5c>)
   2559e:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   255a2:	b91b      	cbnz	r3, 255ac <nrfx_gpiote_irq_handler+0x54>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
   255a4:	4620      	mov	r0, r4
   255a6:	f7ff fddd 	bl	25164 <gpiote_evt_handle>
}
   255aa:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
   255ac:	f7ff fd86 	bl	250bc <port_event_handle>
   255b0:	e7f8      	b.n	255a4 <nrfx_gpiote_irq_handler+0x4c>
   255b2:	bf00      	nop
   255b4:	40006000 	.word	0x40006000

000255b8 <nrf_gpio_pin_write>:
    if (value == 0)
   255b8:	b969      	cbnz	r1, 255d6 <nrf_gpio_pin_write+0x1e>
    *p_pin = pin_number & 0x1F;
   255ba:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
   255be:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   255c0:	2801      	cmp	r0, #1
   255c2:	d006      	beq.n	255d2 <nrf_gpio_pin_write+0x1a>
        case 0: return NRF_P0;
   255c4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   255c8:	2301      	movs	r3, #1
   255ca:	408b      	lsls	r3, r1
    p_reg->OUTCLR = clr_mask;
   255cc:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   255d0:	4770      	bx	lr
        case 1: return NRF_P1;
   255d2:	4a08      	ldr	r2, [pc, #32]	; (255f4 <nrf_gpio_pin_write+0x3c>)
   255d4:	e7f8      	b.n	255c8 <nrf_gpio_pin_write+0x10>
    *p_pin = pin_number & 0x1F;
   255d6:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
   255da:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   255dc:	2801      	cmp	r0, #1
   255de:	d006      	beq.n	255ee <nrf_gpio_pin_write+0x36>
        case 0: return NRF_P0;
   255e0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   255e4:	2301      	movs	r3, #1
   255e6:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
   255e8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
}
   255ec:	4770      	bx	lr
        case 1: return NRF_P1;
   255ee:	4a01      	ldr	r2, [pc, #4]	; (255f4 <nrf_gpio_pin_write+0x3c>)
   255f0:	e7f8      	b.n	255e4 <nrf_gpio_pin_write+0x2c>
   255f2:	bf00      	nop
   255f4:	50000300 	.word	0x50000300

000255f8 <configure_pins>:
static spi_control_block_t m_cb[NRFX_SPI_ENABLED_COUNT];


static void configure_pins(NRF_SPI_Type *            p_spi,
                           nrfx_spi_config_t const * p_config)
{
   255f8:	b538      	push	{r3, r4, r5, lr}
   255fa:	4605      	mov	r5, r0
   255fc:	460c      	mov	r4, r1
    if (!p_config->skip_gpio_cfg)
   255fe:	7bcb      	ldrb	r3, [r1, #15]
   25600:	b183      	cbz	r3, 25624 <configure_pins+0x2c>
            nrf_gpio_pin_write(p_config->ss_pin, 1);
            nrf_gpio_cfg_output(p_config->ss_pin);
        }
    }

    if (!p_config->skip_psel_cfg)
   25602:	7c23      	ldrb	r3, [r4, #16]
   25604:	b96b      	cbnz	r3, 25622 <configure_pins+0x2a>
    {
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
   25606:	7863      	ldrb	r3, [r4, #1]
                            ? p_config->mosi_pin
                            : NRF_SPI_PIN_NOT_CONNECTED;
   25608:	2bff      	cmp	r3, #255	; 0xff
   2560a:	d073      	beq.n	256f4 <configure_pins+0xfc>
   2560c:	461a      	mov	r2, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
   2560e:	78a3      	ldrb	r3, [r4, #2]
                            ? p_config->miso_pin
                            : NRF_SPI_PIN_NOT_CONNECTED;
   25610:	2bff      	cmp	r3, #255	; 0xff
   25612:	d072      	beq.n	256fa <configure_pins+0x102>

        nrf_spi_pins_set(p_spi, p_config->sck_pin, mosi_pin, miso_pin);
   25614:	7821      	ldrb	r1, [r4, #0]
                                        uint32_t       sck_pin,
                                        uint32_t       mosi_pin,
                                        uint32_t       miso_pin)
{
#if defined(SPI_PSEL_SCK_CONNECT_Pos)
    p_reg->PSEL.SCK = sck_pin;
   25616:	f8c5 1508 	str.w	r1, [r5, #1288]	; 0x508
#else
    p_reg->PSELSCK  = sck_pin;
#endif

#if defined(SPI_PSEL_MOSI_CONNECT_Pos)
    p_reg->PSEL.MOSI = mosi_pin;
   2561a:	f8c5 250c 	str.w	r2, [r5, #1292]	; 0x50c
#else
    p_reg->PSELMOSI = mosi_pin;
#endif

#if defined(SPI_PSEL_MISO_CONNECT_Pos)
    p_reg->PSEL.MISO = miso_pin;
   2561e:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
    }
}
   25622:	bd38      	pop	{r3, r4, r5, pc}
                           p_config->mode <= NRF_SPI_MODE_1 ? 0 : 1);
   25624:	7b09      	ldrb	r1, [r1, #12]
        nrf_gpio_pin_write(p_config->sck_pin,
   25626:	2901      	cmp	r1, #1
   25628:	bf94      	ite	ls
   2562a:	2100      	movls	r1, #0
   2562c:	2101      	movhi	r1, #1
   2562e:	7820      	ldrb	r0, [r4, #0]
   25630:	f7ff ffc2 	bl	255b8 <nrf_gpio_pin_write>
        nrf_gpio_cfg(p_config->sck_pin,
   25634:	7823      	ldrb	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   25636:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   2563a:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2563c:	2b01      	cmp	r3, #1
   2563e:	d04d      	beq.n	256dc <configure_pins+0xe4>
        case 0: return NRF_P0;
   25640:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   25644:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   25648:	2201      	movs	r2, #1
   2564a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
   2564e:	7863      	ldrb	r3, [r4, #1]
   25650:	2bff      	cmp	r3, #255	; 0xff
   25652:	d017      	beq.n	25684 <configure_pins+0x8c>
    *p_pin = pin_number & 0x1F;
   25654:	f003 011f 	and.w	r1, r3, #31
    return pin_number >> 5;
   25658:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2565a:	4293      	cmp	r3, r2
   2565c:	d040      	beq.n	256e0 <configure_pins+0xe8>
        case 0: return NRF_P0;
   2565e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   25662:	2301      	movs	r3, #1
   25664:	408b      	lsls	r3, r1
    p_reg->OUTCLR = clr_mask;
   25666:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
            nrf_gpio_cfg_output(p_config->mosi_pin);
   2566a:	7863      	ldrb	r3, [r4, #1]
    *p_pin = pin_number & 0x1F;
   2566c:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   25670:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   25672:	2b01      	cmp	r3, #1
   25674:	d036      	beq.n	256e4 <configure_pins+0xec>
        case 0: return NRF_P0;
   25676:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   2567a:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   2567e:	2203      	movs	r2, #3
   25680:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
   25684:	78a3      	ldrb	r3, [r4, #2]
   25686:	2bff      	cmp	r3, #255	; 0xff
   25688:	d00c      	beq.n	256a4 <configure_pins+0xac>
            nrf_gpio_cfg_input(p_config->miso_pin, p_config->miso_pull);
   2568a:	7ba1      	ldrb	r1, [r4, #14]
    *p_pin = pin_number & 0x1F;
   2568c:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   25690:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   25692:	2b01      	cmp	r3, #1
   25694:	d028      	beq.n	256e8 <configure_pins+0xf0>
        case 0: return NRF_P0;
   25696:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   2569a:	0089      	lsls	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
   2569c:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   256a0:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
        if (p_config->ss_pin != NRFX_SPI_PIN_NOT_USED)
   256a4:	78e3      	ldrb	r3, [r4, #3]
   256a6:	2bff      	cmp	r3, #255	; 0xff
   256a8:	d0ab      	beq.n	25602 <configure_pins+0xa>
    *p_pin = pin_number & 0x1F;
   256aa:	f003 011f 	and.w	r1, r3, #31
    return pin_number >> 5;
   256ae:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   256b0:	2b01      	cmp	r3, #1
   256b2:	d01b      	beq.n	256ec <configure_pins+0xf4>
        case 0: return NRF_P0;
   256b4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   256b8:	2301      	movs	r3, #1
   256ba:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
   256bc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
            nrf_gpio_cfg_output(p_config->ss_pin);
   256c0:	78e3      	ldrb	r3, [r4, #3]
    *p_pin = pin_number & 0x1F;
   256c2:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   256c6:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   256c8:	2b01      	cmp	r3, #1
   256ca:	d011      	beq.n	256f0 <configure_pins+0xf8>
        case 0: return NRF_P0;
   256cc:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   256d0:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   256d4:	2203      	movs	r2, #3
   256d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   256da:	e792      	b.n	25602 <configure_pins+0xa>
        case 1: return NRF_P1;
   256dc:	4908      	ldr	r1, [pc, #32]	; (25700 <configure_pins+0x108>)
   256de:	e7b1      	b.n	25644 <configure_pins+0x4c>
   256e0:	4a07      	ldr	r2, [pc, #28]	; (25700 <configure_pins+0x108>)
   256e2:	e7be      	b.n	25662 <configure_pins+0x6a>
   256e4:	4906      	ldr	r1, [pc, #24]	; (25700 <configure_pins+0x108>)
   256e6:	e7c8      	b.n	2567a <configure_pins+0x82>
   256e8:	4805      	ldr	r0, [pc, #20]	; (25700 <configure_pins+0x108>)
   256ea:	e7d6      	b.n	2569a <configure_pins+0xa2>
   256ec:	4a04      	ldr	r2, [pc, #16]	; (25700 <configure_pins+0x108>)
   256ee:	e7e3      	b.n	256b8 <configure_pins+0xc0>
   256f0:	4903      	ldr	r1, [pc, #12]	; (25700 <configure_pins+0x108>)
   256f2:	e7ed      	b.n	256d0 <configure_pins+0xd8>
                            : NRF_SPI_PIN_NOT_CONNECTED;
   256f4:	f04f 32ff 	mov.w	r2, #4294967295
   256f8:	e789      	b.n	2560e <configure_pins+0x16>
                            : NRF_SPI_PIN_NOT_CONNECTED;
   256fa:	f04f 33ff 	mov.w	r3, #4294967295
   256fe:	e789      	b.n	25614 <configure_pins+0x1c>
   25700:	50000300 	.word	0x50000300

00025704 <finish_transfer>:

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
}

static void finish_transfer(spi_control_block_t * p_cb)
{
   25704:	b508      	push	{r3, lr}
   25706:	4603      	mov	r3, r0
    // If Slave Select signal is used, this is the time to deactivate it.
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   25708:	7f82      	ldrb	r2, [r0, #30]
   2570a:	2aff      	cmp	r2, #255	; 0xff
   2570c:	d00a      	beq.n	25724 <finish_transfer+0x20>
    *p_pin = pin_number & 0x1F;
   2570e:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   25712:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   25714:	2a01      	cmp	r2, #1
   25716:	d00e      	beq.n	25736 <finish_transfer+0x32>
        case 0: return NRF_P0;
   25718:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2571c:	2201      	movs	r2, #1
   2571e:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
   25720:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
        nrf_gpio_pin_write(p_cb->ss_pin, 1);
    }

    // By clearing this flag before calling the handler we allow subsequent
    // transfers to be started directly from the handler function.
    p_cb->transfer_in_progress = false;
   25724:	2200      	movs	r2, #0
   25726:	775a      	strb	r2, [r3, #29]

    p_cb->evt.type = NRFX_SPI_EVENT_DONE;
   25728:	721a      	strb	r2, [r3, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   2572a:	4618      	mov	r0, r3
   2572c:	f850 2b08 	ldr.w	r2, [r0], #8
   25730:	6859      	ldr	r1, [r3, #4]
   25732:	4790      	blx	r2
}
   25734:	bd08      	pop	{r3, pc}
        case 1: return NRF_P1;
   25736:	4801      	ldr	r0, [pc, #4]	; (2573c <finish_transfer+0x38>)
   25738:	e7f0      	b.n	2571c <finish_transfer+0x18>
   2573a:	bf00      	nop
   2573c:	50000300 	.word	0x50000300

00025740 <spi_xfer>:
}

static void spi_xfer(NRF_SPI_Type               * p_spi,
                     spi_control_block_t        * p_cb,
                     nrfx_spi_xfer_desc_t const * p_xfer_desc)
{
   25740:	b538      	push	{r3, r4, r5, lr}
   25742:	4604      	mov	r4, r0
   25744:	460d      	mov	r5, r1
    p_cb->bytes_transferred = 0;
   25746:	2300      	movs	r3, #0
   25748:	620b      	str	r3, [r1, #32]
    p_reg->INTENCLR = mask;
   2574a:	2104      	movs	r1, #4
   2574c:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   25750:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   25754:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108

    // Start the transfer by writing some byte to the TXD register;
    // if TX buffer is not empty, take the first byte from this buffer,
    // otherwise - use over-run character.
    nrf_spi_txd_set(p_spi,
        (p_xfer_desc->tx_length > 0 ? p_xfer_desc->p_tx_buffer[0] : p_cb->orc));
   25758:	6853      	ldr	r3, [r2, #4]
    nrf_spi_txd_set(p_spi,
   2575a:	b183      	cbz	r3, 2577e <spi_xfer+0x3e>
        (p_xfer_desc->tx_length > 0 ? p_xfer_desc->p_tx_buffer[0] : p_cb->orc));
   2575c:	6813      	ldr	r3, [r2, #0]
    nrf_spi_txd_set(p_spi,
   2575e:	781b      	ldrb	r3, [r3, #0]
#endif
}

NRF_STATIC_INLINE void nrf_spi_txd_set(NRF_SPI_Type * p_reg, uint8_t data)
{
    p_reg->TXD = data;
   25760:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c

    // TXD register is double buffered, so next byte to be transmitted can
    // be written immediately, if needed, i.e. if TX or RX transfer is to
    // be more that 1 byte long. Again - if there is something more in TX
    // buffer send it, otherwise use over-run character.
    if (p_xfer_desc->tx_length > 1)
   25764:	6853      	ldr	r3, [r2, #4]
   25766:	2b01      	cmp	r3, #1
   25768:	d90b      	bls.n	25782 <spi_xfer+0x42>
    {
        nrf_spi_txd_set(p_spi, p_xfer_desc->p_tx_buffer[1]);
   2576a:	6813      	ldr	r3, [r2, #0]
   2576c:	785b      	ldrb	r3, [r3, #1]
   2576e:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
    // For blocking mode (user handler not provided) wait here for READY
    // events (indicating that the byte from TXD register was transmitted
    // and a new incoming byte was moved to the RXD register) and continue
    // transaction until all requested bytes are transferred.
    // In non-blocking mode - IRQ service routine will do this stuff.
    if (p_cb->handler)
   25772:	682b      	ldr	r3, [r5, #0]
   25774:	b163      	cbz	r3, 25790 <spi_xfer+0x50>
    p_reg->INTENSET = mask;
   25776:	2304      	movs	r3, #4
   25778:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
        {
            nrf_gpio_pin_write(p_cb->ss_pin, 1);
        }
    }
}
   2577c:	bd38      	pop	{r3, r4, r5, pc}
    nrf_spi_txd_set(p_spi,
   2577e:	7feb      	ldrb	r3, [r5, #31]
   25780:	e7ee      	b.n	25760 <spi_xfer+0x20>
    else if (p_xfer_desc->rx_length > 1)
   25782:	68d3      	ldr	r3, [r2, #12]
   25784:	2b01      	cmp	r3, #1
   25786:	d9f4      	bls.n	25772 <spi_xfer+0x32>
        nrf_spi_txd_set(p_spi, p_cb->orc);
   25788:	7feb      	ldrb	r3, [r5, #31]
    p_reg->TXD = data;
   2578a:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
}
   2578e:	e7f0      	b.n	25772 <spi_xfer+0x32>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   25790:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
            while (!nrf_spi_event_check(p_spi, NRF_SPI_EVENT_READY)) {}
   25794:	2b00      	cmp	r3, #0
   25796:	d0fb      	beq.n	25790 <spi_xfer+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   25798:	2300      	movs	r3, #0
   2579a:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   2579e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
        } while (transfer_byte(p_spi, p_cb));
   257a2:	4629      	mov	r1, r5
   257a4:	4620      	mov	r0, r4
   257a6:	f00a fbce 	bl	2ff46 <transfer_byte>
   257aa:	2800      	cmp	r0, #0
   257ac:	d1f0      	bne.n	25790 <spi_xfer+0x50>
        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   257ae:	7fab      	ldrb	r3, [r5, #30]
   257b0:	2bff      	cmp	r3, #255	; 0xff
   257b2:	d0e3      	beq.n	2577c <spi_xfer+0x3c>
    *p_pin = pin_number & 0x1F;
   257b4:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   257b8:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   257ba:	2b01      	cmp	r3, #1
   257bc:	d006      	beq.n	257cc <spi_xfer+0x8c>
        case 0: return NRF_P0;
   257be:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   257c2:	2301      	movs	r3, #1
   257c4:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   257c6:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
}
   257ca:	e7d7      	b.n	2577c <spi_xfer+0x3c>
        case 1: return NRF_P1;
   257cc:	4900      	ldr	r1, [pc, #0]	; (257d0 <spi_xfer+0x90>)
   257ce:	e7f8      	b.n	257c2 <spi_xfer+0x82>
   257d0:	50000300 	.word	0x50000300

000257d4 <nrfx_spi_init>:
{
   257d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   257d8:	4606      	mov	r6, r0
   257da:	460d      	mov	r5, r1
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   257dc:	7904      	ldrb	r4, [r0, #4]
    NRF_SPI_Type * p_spi = p_instance->p_reg;
   257de:	6807      	ldr	r7, [r0, #0]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   257e0:	eb04 0084 	add.w	r0, r4, r4, lsl #2
   257e4:	491d      	ldr	r1, [pc, #116]	; (2585c <nrfx_spi_init+0x88>)
   257e6:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   257ea:	7f09      	ldrb	r1, [r1, #28]
   257ec:	b111      	cbz	r1, 257f4 <nrfx_spi_init+0x20>
        return err_code;
   257ee:	481c      	ldr	r0, [pc, #112]	; (25860 <nrfx_spi_init+0x8c>)
}
   257f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    p_cb->handler = handler;
   257f4:	f8df 8064 	ldr.w	r8, [pc, #100]	; 2585c <nrfx_spi_init+0x88>
   257f8:	ea4f 09c0 	mov.w	r9, r0, lsl #3
   257fc:	eb08 01c0 	add.w	r1, r8, r0, lsl #3
   25800:	f848 2009 	str.w	r2, [r8, r9]
    p_cb->p_context = p_context;
   25804:	604b      	str	r3, [r1, #4]
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
   25806:	7beb      	ldrb	r3, [r5, #15]
   25808:	f881 3025 	strb.w	r3, [r1, #37]	; 0x25
    p_cb->ss_pin = p_config->ss_pin;
   2580c:	78eb      	ldrb	r3, [r5, #3]
   2580e:	778b      	strb	r3, [r1, #30]
    p_cb->orc = p_config->orc;
   25810:	796b      	ldrb	r3, [r5, #5]
   25812:	77cb      	strb	r3, [r1, #31]
    configure_pins(p_spi, p_config);
   25814:	4629      	mov	r1, r5
   25816:	4638      	mov	r0, r7
   25818:	f7ff feee 	bl	255f8 <configure_pins>
    nrf_spi_frequency_set(p_spi, p_config->frequency);
   2581c:	68ab      	ldr	r3, [r5, #8]
}

NRF_STATIC_INLINE void nrf_spi_frequency_set(NRF_SPI_Type *      p_reg,
                                             nrf_spi_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
   2581e:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
    nrf_spi_configure(p_spi, p_config->mode, p_config->bit_order);
   25822:	7b6a      	ldrb	r2, [r5, #13]
   25824:	7b29      	ldrb	r1, [r5, #12]
   25826:	4638      	mov	r0, r7
   25828:	f00a fb78 	bl	2ff1c <nrf_spi_configure>
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   2582c:	2301      	movs	r3, #1
   2582e:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
    if (p_cb->handler)
   25832:	f858 3009 	ldr.w	r3, [r8, r9]
   25836:	b123      	cbz	r3, 25842 <nrfx_spi_init+0x6e>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   25838:	6830      	ldr	r0, [r6, #0]
   2583a:	f340 3007 	sbfx	r0, r0, #12, #8
   2583e:	f004 f8b9 	bl	299b4 <arch_irq_enable>
    p_cb->transfer_in_progress = false;
   25842:	4b06      	ldr	r3, [pc, #24]	; (2585c <nrfx_spi_init+0x88>)
   25844:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   25848:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   2584c:	2100      	movs	r1, #0
   2584e:	7751      	strb	r1, [r2, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   25850:	4613      	mov	r3, r2
   25852:	2201      	movs	r2, #1
   25854:	771a      	strb	r2, [r3, #28]
    return err_code;
   25856:	4803      	ldr	r0, [pc, #12]	; (25864 <nrfx_spi_init+0x90>)
   25858:	e7ca      	b.n	257f0 <nrfx_spi_init+0x1c>
   2585a:	bf00      	nop
   2585c:	20008b90 	.word	0x20008b90
   25860:	0bad0005 	.word	0x0bad0005
   25864:	0bad0000 	.word	0x0bad0000

00025868 <nrfx_spi_uninit>:
{
   25868:	b538      	push	{r3, r4, r5, lr}
    spi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   2586a:	7904      	ldrb	r4, [r0, #4]
    NRF_SPI_Type * p_spi = p_instance->p_reg;
   2586c:	6805      	ldr	r5, [r0, #0]
    if (p_cb->handler)
   2586e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   25872:	4b35      	ldr	r3, [pc, #212]	; (25948 <nrfx_spi_uninit+0xe0>)
   25874:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
   25878:	b133      	cbz	r3, 25888 <nrfx_spi_uninit+0x20>
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
   2587a:	f345 3007 	sbfx	r0, r5, #12, #8
   2587e:	f004 f89e 	bl	299be <arch_irq_disable>
    p_reg->INTENCLR = mask;
   25882:	2304      	movs	r3, #4
   25884:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Disabled << SPI_ENABLE_ENABLE_Pos);
   25888:	2300      	movs	r3, #0
   2588a:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
    if (!p_cb->skip_gpio_cfg)
   2588e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   25892:	4b2d      	ldr	r3, [pc, #180]	; (25948 <nrfx_spi_uninit+0xe0>)
   25894:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   25898:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   2589c:	2b00      	cmp	r3, #0
   2589e:	d143      	bne.n	25928 <nrfx_spi_uninit+0xc0>
    return p_reg->PSEL.SCK;
   258a0:	f8d5 3508 	ldr.w	r3, [r5, #1288]	; 0x508
    *p_pin = pin_number & 0x1F;
   258a4:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   258a8:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   258aa:	2b01      	cmp	r3, #1
   258ac:	d044      	beq.n	25938 <nrfx_spi_uninit+0xd0>
        case 0: return NRF_P0;
   258ae:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   258b2:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   258b6:	2202      	movs	r2, #2
   258b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    return p_reg->PSEL.MISO;
   258bc:	f8d5 3510 	ldr.w	r3, [r5, #1296]	; 0x510
        if (miso_pin != NRF_SPI_PIN_NOT_CONNECTED)
   258c0:	f1b3 3fff 	cmp.w	r3, #4294967295
   258c4:	d00b      	beq.n	258de <nrfx_spi_uninit+0x76>
    *p_pin = pin_number & 0x1F;
   258c6:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   258ca:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   258cc:	2b01      	cmp	r3, #1
   258ce:	d035      	beq.n	2593c <nrfx_spi_uninit+0xd4>
        case 0: return NRF_P0;
   258d0:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   258d4:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   258d8:	2202      	movs	r2, #2
   258da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    return p_reg->PSEL.MOSI;
   258de:	f8d5 350c 	ldr.w	r3, [r5, #1292]	; 0x50c
        if (mosi_pin != NRF_SPI_PIN_NOT_CONNECTED)
   258e2:	f1b3 3fff 	cmp.w	r3, #4294967295
   258e6:	d00b      	beq.n	25900 <nrfx_spi_uninit+0x98>
    *p_pin = pin_number & 0x1F;
   258e8:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   258ec:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   258ee:	2b01      	cmp	r3, #1
   258f0:	d026      	beq.n	25940 <nrfx_spi_uninit+0xd8>
        case 0: return NRF_P0;
   258f2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   258f6:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   258fa:	2202      	movs	r2, #2
   258fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   25900:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   25904:	4b10      	ldr	r3, [pc, #64]	; (25948 <nrfx_spi_uninit+0xe0>)
   25906:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   2590a:	7f9b      	ldrb	r3, [r3, #30]
   2590c:	2bff      	cmp	r3, #255	; 0xff
   2590e:	d00b      	beq.n	25928 <nrfx_spi_uninit+0xc0>
    *p_pin = pin_number & 0x1F;
   25910:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   25914:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   25916:	2b01      	cmp	r3, #1
   25918:	d014      	beq.n	25944 <nrfx_spi_uninit+0xdc>
        case 0: return NRF_P0;
   2591a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   2591e:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   25922:	2202      	movs	r2, #2
   25924:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
   25928:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   2592c:	4b06      	ldr	r3, [pc, #24]	; (25948 <nrfx_spi_uninit+0xe0>)
   2592e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   25932:	2200      	movs	r2, #0
   25934:	771a      	strb	r2, [r3, #28]
}
   25936:	bd38      	pop	{r3, r4, r5, pc}
        case 1: return NRF_P1;
   25938:	4904      	ldr	r1, [pc, #16]	; (2594c <nrfx_spi_uninit+0xe4>)
   2593a:	e7ba      	b.n	258b2 <nrfx_spi_uninit+0x4a>
   2593c:	4903      	ldr	r1, [pc, #12]	; (2594c <nrfx_spi_uninit+0xe4>)
   2593e:	e7c9      	b.n	258d4 <nrfx_spi_uninit+0x6c>
   25940:	4902      	ldr	r1, [pc, #8]	; (2594c <nrfx_spi_uninit+0xe4>)
   25942:	e7d8      	b.n	258f6 <nrfx_spi_uninit+0x8e>
   25944:	4901      	ldr	r1, [pc, #4]	; (2594c <nrfx_spi_uninit+0xe4>)
   25946:	e7ea      	b.n	2591e <nrfx_spi_uninit+0xb6>
   25948:	20008b90 	.word	0x20008b90
   2594c:	50000300 	.word	0x50000300

00025950 <nrfx_spi_xfer>:

nrfx_err_t nrfx_spi_xfer(nrfx_spi_t const *           p_instance,
                         nrfx_spi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
   25950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   25954:	f890 c004 	ldrb.w	ip, [r0, #4]
   25958:	eb0c 038c 	add.w	r3, ip, ip, lsl #2
   2595c:	4d21      	ldr	r5, [pc, #132]	; (259e4 <nrfx_spi_xfer+0x94>)
   2595e:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
   25962:	7f6b      	ldrb	r3, [r5, #29]
   25964:	2b00      	cmp	r3, #0
   25966:	d13a      	bne.n	259de <nrfx_spi_xfer+0x8e>
   25968:	4604      	mov	r4, r0
   2596a:	468e      	mov	lr, r1
   2596c:	4617      	mov	r7, r2
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler)
   2596e:	eb0c 038c 	add.w	r3, ip, ip, lsl #2
   25972:	4a1c      	ldr	r2, [pc, #112]	; (259e4 <nrfx_spi_xfer+0x94>)
   25974:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
   25978:	b10b      	cbz	r3, 2597e <nrfx_spi_xfer+0x2e>
        {
            p_cb->transfer_in_progress = true;
   2597a:	2201      	movs	r2, #1
   2597c:	776a      	strb	r2, [r5, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
   2597e:	eb0c 038c 	add.w	r3, ip, ip, lsl #2
   25982:	4e18      	ldr	r6, [pc, #96]	; (259e4 <nrfx_spi_xfer+0x94>)
   25984:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
   25988:	f106 080c 	add.w	r8, r6, #12
   2598c:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
   25990:	e888 000f 	stmia.w	r8, {r0, r1, r2, r3}
    p_cb->abort = false;
   25994:	2300      	movs	r3, #0
   25996:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24

    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   2599a:	7fb3      	ldrb	r3, [r6, #30]
   2599c:	2bff      	cmp	r3, #255	; 0xff
   2599e:	d00a      	beq.n	259b6 <nrfx_spi_xfer+0x66>
    *p_pin = pin_number & 0x1F;
   259a0:	f003 011f 	and.w	r1, r3, #31
    return pin_number >> 5;
   259a4:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   259a6:	2b01      	cmp	r3, #1
   259a8:	d010      	beq.n	259cc <nrfx_spi_xfer+0x7c>
        case 0: return NRF_P0;
   259aa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   259ae:	2301      	movs	r3, #1
   259b0:	408b      	lsls	r3, r1
    p_reg->OUTCLR = clr_mask;
   259b2:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    {
        nrf_gpio_pin_write(p_cb->ss_pin, 0);
    }
    if (flags)
   259b6:	b15f      	cbz	r7, 259d0 <nrfx_spi_xfer+0x80>
    {
        p_cb->transfer_in_progress = false;
   259b8:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
   259bc:	4b09      	ldr	r3, [pc, #36]	; (259e4 <nrfx_spi_xfer+0x94>)
   259be:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
   259c2:	2200      	movs	r2, #0
   259c4:	775a      	strb	r2, [r3, #29]
        err_code = NRFX_ERROR_NOT_SUPPORTED;
   259c6:	4808      	ldr	r0, [pc, #32]	; (259e8 <nrfx_spi_xfer+0x98>)
    }
    NRFX_LOG_INFO("Function: %s, error code: %s.",
                  __func__,
                  NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   259c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        case 1: return NRF_P1;
   259cc:	4a07      	ldr	r2, [pc, #28]	; (259ec <nrfx_spi_xfer+0x9c>)
   259ce:	e7ee      	b.n	259ae <nrfx_spi_xfer+0x5e>
        spi_xfer(p_instance->p_reg, p_cb, p_xfer_desc);
   259d0:	4672      	mov	r2, lr
   259d2:	4629      	mov	r1, r5
   259d4:	6820      	ldr	r0, [r4, #0]
   259d6:	f7ff feb3 	bl	25740 <spi_xfer>
    nrfx_err_t err_code = NRFX_SUCCESS;
   259da:	4805      	ldr	r0, [pc, #20]	; (259f0 <nrfx_spi_xfer+0xa0>)
   259dc:	e7f4      	b.n	259c8 <nrfx_spi_xfer+0x78>
        return err_code;
   259de:	4805      	ldr	r0, [pc, #20]	; (259f4 <nrfx_spi_xfer+0xa4>)
   259e0:	e7f2      	b.n	259c8 <nrfx_spi_xfer+0x78>
   259e2:	bf00      	nop
   259e4:	20008b90 	.word	0x20008b90
   259e8:	0bad0003 	.word	0x0bad0003
   259ec:	50000300 	.word	0x50000300
   259f0:	0bad0000 	.word	0x0bad0000
   259f4:	0bad000b 	.word	0x0bad000b

000259f8 <nrfx_spi_0_irq_handler>:
    }
}

#if NRFX_CHECK(NRFX_SPI0_ENABLED)
void nrfx_spi_0_irq_handler(void)
{
   259f8:	b508      	push	{r3, lr}
    irq_handler(NRF_SPI0, &m_cb[NRFX_SPI0_INST_IDX]);
   259fa:	4902      	ldr	r1, [pc, #8]	; (25a04 <nrfx_spi_0_irq_handler+0xc>)
   259fc:	4802      	ldr	r0, [pc, #8]	; (25a08 <nrfx_spi_0_irq_handler+0x10>)
   259fe:	f00a fadd 	bl	2ffbc <irq_handler>
}
   25a02:	bd08      	pop	{r3, pc}
   25a04:	20008b90 	.word	0x20008b90
   25a08:	40003000 	.word	0x40003000

00025a0c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   25a0c:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   25a0e:	4c11      	ldr	r4, [pc, #68]	; (25a54 <_DoInit+0x48>)
   25a10:	2303      	movs	r3, #3
   25a12:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   25a14:	6163      	str	r3, [r4, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   25a16:	4a10      	ldr	r2, [pc, #64]	; (25a58 <_DoInit+0x4c>)
   25a18:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   25a1a:	4b10      	ldr	r3, [pc, #64]	; (25a5c <_DoInit+0x50>)
   25a1c:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   25a1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
   25a22:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   25a24:	2300      	movs	r3, #0
   25a26:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   25a28:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   25a2a:	62e3      	str	r3, [r4, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
   25a2c:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   25a2e:	4a0c      	ldr	r2, [pc, #48]	; (25a60 <_DoInit+0x54>)
   25a30:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   25a32:	2210      	movs	r2, #16
   25a34:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   25a36:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   25a38:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   25a3a:	6763      	str	r3, [r4, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   25a3c:	4909      	ldr	r1, [pc, #36]	; (25a64 <_DoInit+0x58>)
   25a3e:	1de0      	adds	r0, r4, #7
   25a40:	f004 f838 	bl	29ab4 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
   25a44:	4908      	ldr	r1, [pc, #32]	; (25a68 <_DoInit+0x5c>)
   25a46:	4620      	mov	r0, r4
   25a48:	f004 f834 	bl	29ab4 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
   25a4c:	2320      	movs	r3, #32
   25a4e:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
   25a50:	bd10      	pop	{r4, pc}
   25a52:	bf00      	nop
   25a54:	20008fc8 	.word	0x20008fc8
   25a58:	0003491c 	.word	0x0003491c
   25a5c:	20008bc8 	.word	0x20008bc8
   25a60:	20008bb8 	.word	0x20008bb8
   25a64:	00034928 	.word	0x00034928
   25a68:	0003492c 	.word	0x0003492c

00025a6c <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   25a6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   25a70:	4604      	mov	r4, r0
   25a72:	460e      	mov	r6, r1
   25a74:	4615      	mov	r5, r2
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
   25a76:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   25a7a:	4a2d      	ldr	r2, [pc, #180]	; (25b30 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
   25a7c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   25a80:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   25a82:	6a57      	ldr	r7, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   25a84:	42bb      	cmp	r3, r7
   25a86:	d84c      	bhi.n	25b22 <SEGGER_RTT_WriteSkipNoLock+0xb6>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   25a88:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   25a8c:	4a28      	ldr	r2, [pc, #160]	; (25b30 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
   25a8e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   25a92:	f8d2 8020 	ldr.w	r8, [r2, #32]
   25a96:	eba8 0907 	sub.w	r9, r8, r7
   25a9a:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
   25a9e:	4295      	cmp	r5, r2
   25aa0:	d904      	bls.n	25aac <SEGGER_RTT_WriteSkipNoLock+0x40>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
      return 1;
    }
    Avail += RdOff;                                     // Space incl. wrap-around
   25aa2:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   25aa4:	429d      	cmp	r5, r3
   25aa6:	d916      	bls.n	25ad6 <SEGGER_RTT_WriteSkipNoLock+0x6a>
    Avail = RdOff - WrOff - 1u;
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
   25aa8:	2000      	movs	r0, #0
   25aaa:	e03f      	b.n	25b2c <SEGGER_RTT_WriteSkipNoLock+0xc0>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   25aac:	f8df 8080 	ldr.w	r8, [pc, #128]	; 25b30 <SEGGER_RTT_WriteSkipNoLock+0xc4>
   25ab0:	1c63      	adds	r3, r4, #1
   25ab2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   25ab6:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   25aba:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
   25abc:	462a      	mov	r2, r5
   25abe:	4631      	mov	r1, r6
   25ac0:	4438      	add	r0, r7
   25ac2:	f004 f876 	bl	29bb2 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
   25ac6:	442f      	add	r7, r5
   25ac8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   25acc:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
   25ad0:	6267      	str	r7, [r4, #36]	; 0x24
      return 1;
   25ad2:	2001      	movs	r0, #1
   25ad4:	e02a      	b.n	25b2c <SEGGER_RTT_WriteSkipNoLock+0xc0>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   25ad6:	1c43      	adds	r3, r0, #1
   25ad8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   25adc:	4a14      	ldr	r2, [pc, #80]	; (25b30 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
   25ade:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   25ae2:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
   25ae4:	464a      	mov	r2, r9
   25ae6:	4631      	mov	r1, r6
   25ae8:	4438      	add	r0, r7
   25aea:	f004 f862 	bl	29bb2 <memcpy>
      NumBytes -= Rem;
   25aee:	eba7 0808 	sub.w	r8, r7, r8
      if (NumBytes) {
   25af2:	eb18 0505 	adds.w	r5, r8, r5
   25af6:	d107      	bne.n	25b08 <SEGGER_RTT_WriteSkipNoLock+0x9c>
      pRing->WrOff = NumBytes;
   25af8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   25afc:	4b0c      	ldr	r3, [pc, #48]	; (25b30 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
   25afe:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   25b02:	625d      	str	r5, [r3, #36]	; 0x24
      return 1;
   25b04:	2001      	movs	r0, #1
   25b06:	e011      	b.n	25b2c <SEGGER_RTT_WriteSkipNoLock+0xc0>
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
   25b08:	1c63      	adds	r3, r4, #1
   25b0a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   25b0e:	4a08      	ldr	r2, [pc, #32]	; (25b30 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
   25b10:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
        memcpy((void*)pDst, pData + Rem, NumBytes);
   25b14:	462a      	mov	r2, r5
   25b16:	eb06 0109 	add.w	r1, r6, r9
   25b1a:	6858      	ldr	r0, [r3, #4]
   25b1c:	f004 f849 	bl	29bb2 <memcpy>
   25b20:	e7ea      	b.n	25af8 <SEGGER_RTT_WriteSkipNoLock+0x8c>
    Avail = RdOff - WrOff - 1u;
   25b22:	1bdb      	subs	r3, r3, r7
   25b24:	3b01      	subs	r3, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   25b26:	42ab      	cmp	r3, r5
   25b28:	d2c0      	bcs.n	25aac <SEGGER_RTT_WriteSkipNoLock+0x40>
  return 0;     // No space in buffer
   25b2a:	2000      	movs	r0, #0
}
   25b2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   25b30:	20008fc8 	.word	0x20008fc8

00025b34 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   25b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25b36:	460f      	mov	r7, r1
   25b38:	4616      	mov	r6, r2
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
   25b3a:	1c45      	adds	r5, r0, #1
   25b3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   25b40:	4b16      	ldr	r3, [pc, #88]	; (25b9c <SEGGER_RTT_WriteNoLock+0x68>)
   25b42:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
   25b46:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   25b4a:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   25b4e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   25b50:	2c01      	cmp	r4, #1
   25b52:	d011      	beq.n	25b78 <SEGGER_RTT_WriteNoLock+0x44>
   25b54:	2c02      	cmp	r4, #2
   25b56:	d01c      	beq.n	25b92 <SEGGER_RTT_WriteNoLock+0x5e>
   25b58:	b114      	cbz	r4, 25b60 <SEGGER_RTT_WriteNoLock+0x2c>
   25b5a:	2400      	movs	r4, #0
  }
  //
  // Finish up.
  //
  return Status;
}
   25b5c:	4620      	mov	r0, r4
   25b5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
   25b60:	4628      	mov	r0, r5
   25b62:	f00a fa3a 	bl	2ffda <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
   25b66:	4286      	cmp	r6, r0
   25b68:	d8f8      	bhi.n	25b5c <SEGGER_RTT_WriteNoLock+0x28>
      _WriteNoCheck(pRing, pData, NumBytes);
   25b6a:	4632      	mov	r2, r6
   25b6c:	4639      	mov	r1, r7
   25b6e:	4628      	mov	r0, r5
   25b70:	f00a fa3f 	bl	2fff2 <_WriteNoCheck>
      Status = NumBytes;
   25b74:	4634      	mov	r4, r6
   25b76:	e7f1      	b.n	25b5c <SEGGER_RTT_WriteNoLock+0x28>
    Avail = _GetAvailWriteSpace(pRing);
   25b78:	4628      	mov	r0, r5
   25b7a:	f00a fa2e 	bl	2ffda <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
   25b7e:	4634      	mov	r4, r6
   25b80:	4286      	cmp	r6, r0
   25b82:	bf28      	it	cs
   25b84:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
   25b86:	4622      	mov	r2, r4
   25b88:	4639      	mov	r1, r7
   25b8a:	4628      	mov	r0, r5
   25b8c:	f00a fa31 	bl	2fff2 <_WriteNoCheck>
    break;
   25b90:	e7e4      	b.n	25b5c <SEGGER_RTT_WriteNoLock+0x28>
    Status = _WriteBlocking(pRing, pData, NumBytes);
   25b92:	4628      	mov	r0, r5
   25b94:	f00a fa4f 	bl	30036 <_WriteBlocking>
   25b98:	4604      	mov	r4, r0
    break;
   25b9a:	e7df      	b.n	25b5c <SEGGER_RTT_WriteNoLock+0x28>
   25b9c:	20008fc8 	.word	0x20008fc8

00025ba0 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
   25ba0:	4b06      	ldr	r3, [pc, #24]	; (25bbc <SEGGER_RTT_HasDataUp+0x1c>)
   25ba2:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   25ba6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   25baa:	6a92      	ldr	r2, [r2, #40]	; 0x28
  return pRing->WrOff - v;
   25bac:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   25bb0:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   25bb4:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
   25bb6:	1a80      	subs	r0, r0, r2
   25bb8:	4770      	bx	lr
   25bba:	bf00      	nop
   25bbc:	20008fc8 	.word	0x20008fc8

00025bc0 <zephyr_rtt_mutex_lock>:
}

#ifdef CONFIG_MULTITHREADING

void zephyr_rtt_mutex_lock(void)
{
   25bc0:	b508      	push	{r3, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   25bc2:	f04f 32ff 	mov.w	r2, #4294967295
   25bc6:	f04f 33ff 	mov.w	r3, #4294967295
   25bca:	4802      	ldr	r0, [pc, #8]	; (25bd4 <zephyr_rtt_mutex_lock+0x14>)
   25bcc:	f000 fbf2 	bl	263b4 <z_impl_k_mutex_lock>
	k_mutex_lock(&rtt_term_mutex, K_FOREVER);
}
   25bd0:	bd08      	pop	{r3, pc}
   25bd2:	bf00      	nop
   25bd4:	20000ad4 	.word	0x20000ad4

00025bd8 <zephyr_rtt_mutex_unlock>:

void zephyr_rtt_mutex_unlock(void)
{
   25bd8:	b508      	push	{r3, lr}
	return z_impl_k_mutex_unlock(mutex);
   25bda:	4802      	ldr	r0, [pc, #8]	; (25be4 <zephyr_rtt_mutex_unlock+0xc>)
   25bdc:	f000 fc6e 	bl	264bc <z_impl_k_mutex_unlock>
	k_mutex_unlock(&rtt_term_mutex);
}
   25be0:	bd08      	pop	{r3, pc}
   25be2:	bf00      	nop
   25be4:	20000ad4 	.word	0x20000ad4

00025be8 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
   25be8:	4b03      	ldr	r3, [pc, #12]	; (25bf8 <z_device_state_init+0x10>)

	while (dev < __device_end) {
   25bea:	e000      	b.n	25bee <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
   25bec:	3318      	adds	r3, #24
	while (dev < __device_end) {
   25bee:	4a03      	ldr	r2, [pc, #12]	; (25bfc <z_device_state_init+0x14>)
   25bf0:	4293      	cmp	r3, r2
   25bf2:	d3fb      	bcc.n	25bec <z_device_state_init+0x4>
	}
}
   25bf4:	4770      	bx	lr
   25bf6:	bf00      	nop
   25bf8:	00031114 	.word	0x00031114
   25bfc:	000311ec 	.word	0x000311ec

00025c00 <reason_to_str>:
	return thread_name;
}

static const char *reason_to_str(unsigned int reason)
{
	switch (reason) {
   25c00:	2804      	cmp	r0, #4
   25c02:	d80c      	bhi.n	25c1e <reason_to_str+0x1e>
   25c04:	e8df f000 	tbb	[pc, r0]
   25c08:	07050d03 	.word	0x07050d03
   25c0c:	09          	.byte	0x09
   25c0d:	00          	.byte	0x00
   25c0e:	4806      	ldr	r0, [pc, #24]	; (25c28 <reason_to_str+0x28>)
   25c10:	4770      	bx	lr
	case K_ERR_CPU_EXCEPTION:
		return "CPU exception";
	case K_ERR_SPURIOUS_IRQ:
		return "Unhandled interrupt";
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
   25c12:	4806      	ldr	r0, [pc, #24]	; (25c2c <reason_to_str+0x2c>)
   25c14:	4770      	bx	lr
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
   25c16:	4806      	ldr	r0, [pc, #24]	; (25c30 <reason_to_str+0x30>)
   25c18:	4770      	bx	lr
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
   25c1a:	4806      	ldr	r0, [pc, #24]	; (25c34 <reason_to_str+0x34>)
   25c1c:	4770      	bx	lr
	default:
		return "Unknown error";
   25c1e:	4806      	ldr	r0, [pc, #24]	; (25c38 <reason_to_str+0x38>)
   25c20:	4770      	bx	lr
		return "Unhandled interrupt";
   25c22:	4806      	ldr	r0, [pc, #24]	; (25c3c <reason_to_str+0x3c>)
	}
}
   25c24:	4770      	bx	lr
   25c26:	bf00      	nop
   25c28:	00034938 	.word	0x00034938
   25c2c:	0003495c 	.word	0x0003495c
   25c30:	0003496c 	.word	0x0003496c
   25c34:	00034978 	.word	0x00034978
   25c38:	00034988 	.word	0x00034988
   25c3c:	00034948 	.word	0x00034948

00025c40 <thread_name_get>:
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   25c40:	b130      	cbz	r0, 25c50 <thread_name_get+0x10>
{
   25c42:	b508      	push	{r3, lr}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   25c44:	f00a fb21 	bl	3028a <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   25c48:	b120      	cbz	r0, 25c54 <thread_name_get+0x14>
   25c4a:	7803      	ldrb	r3, [r0, #0]
   25c4c:	b123      	cbz	r3, 25c58 <thread_name_get+0x18>
}
   25c4e:	bd08      	pop	{r3, pc}
		thread_name = "unknown";
   25c50:	4802      	ldr	r0, [pc, #8]	; (25c5c <thread_name_get+0x1c>)
}
   25c52:	4770      	bx	lr
		thread_name = "unknown";
   25c54:	4801      	ldr	r0, [pc, #4]	; (25c5c <thread_name_get+0x1c>)
   25c56:	e7fa      	b.n	25c4e <thread_name_get+0xe>
   25c58:	4800      	ldr	r0, [pc, #0]	; (25c5c <thread_name_get+0x1c>)
	return thread_name;
   25c5a:	e7f8      	b.n	25c4e <thread_name_get+0xe>
   25c5c:	00034998 	.word	0x00034998

00025c60 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   25c60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   25c64:	b083      	sub	sp, #12
   25c66:	af00      	add	r7, sp, #0
   25c68:	4606      	mov	r6, r0
   25c6a:	460c      	mov	r4, r1
   25c6c:	f04f 0340 	mov.w	r3, #64	; 0x40
   25c70:	f3ef 8811 	mrs	r8, BASEPRI
   25c74:	f383 8812 	msr	BASEPRI_MAX, r3
   25c78:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   25c7c:	f001 fa56 	bl	2712c <z_impl_z_current_get>
   25c80:	4605      	mov	r5, r0
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   25c82:	4630      	mov	r0, r6
   25c84:	f7ff ffbc 	bl	25c00 <reason_to_str>
   25c88:	46e9      	mov	r9, sp
   25c8a:	2301      	movs	r3, #1
   25c8c:	713b      	strb	r3, [r7, #4]
   25c8e:	2303      	movs	r3, #3
   25c90:	717b      	strb	r3, [r7, #5]
   25c92:	b08a      	sub	sp, #40	; 0x28
   25c94:	46ec      	mov	ip, sp
   25c96:	f11c 0210 	adds.w	r2, ip, #16
   25c9a:	d021      	beq.n	25ce0 <z_fatal_error+0x80>
   25c9c:	f04f 0e16 	mov.w	lr, #22
   25ca0:	b152      	cbz	r2, 25cb8 <z_fatal_error+0x58>
   25ca2:	4673      	mov	r3, lr
   25ca4:	f1be 0f04 	cmp.w	lr, #4
   25ca8:	dd02      	ble.n	25cb0 <z_fatal_error+0x50>
   25caa:	497b      	ldr	r1, [pc, #492]	; (25e98 <z_fatal_error+0x238>)
   25cac:	f8cc 1014 	str.w	r1, [ip, #20]
   25cb0:	2b08      	cmp	r3, #8
   25cb2:	dd01      	ble.n	25cb8 <z_fatal_error+0x58>
   25cb4:	f8cc 6018 	str.w	r6, [ip, #24]
   25cb8:	2301      	movs	r3, #1
   25cba:	703b      	strb	r3, [r7, #0]
   25cbc:	2303      	movs	r3, #3
   25cbe:	707b      	strb	r3, [r7, #1]
   25cc0:	b1da      	cbz	r2, 25cfa <z_fatal_error+0x9a>
   25cc2:	4673      	mov	r3, lr
   25cc4:	f1be 0f0c 	cmp.w	lr, #12
   25cc8:	dd01      	ble.n	25cce <z_fatal_error+0x6e>
   25cca:	f8cc 001c 	str.w	r0, [ip, #28]
   25cce:	2b10      	cmp	r3, #16
   25cd0:	dd02      	ble.n	25cd8 <z_fatal_error+0x78>
   25cd2:	2300      	movs	r3, #0
   25cd4:	f8cc 3020 	str.w	r3, [ip, #32]
   25cd8:	f10c 0324 	add.w	r3, ip, #36	; 0x24
   25cdc:	2100      	movs	r1, #0
   25cde:	e00a      	b.n	25cf6 <z_fatal_error+0x96>
   25ce0:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
   25ce4:	e7dc      	b.n	25ca0 <z_fatal_error+0x40>
   25ce6:	f101 0008 	add.w	r0, r1, #8
   25cea:	4438      	add	r0, r7
   25cec:	f810 0c08 	ldrb.w	r0, [r0, #-8]
   25cf0:	f803 0b01 	strb.w	r0, [r3], #1
   25cf4:	3101      	adds	r1, #1
   25cf6:	2901      	cmp	r1, #1
   25cf8:	d9f5      	bls.n	25ce6 <z_fatal_error+0x86>
   25cfa:	f1be 0f15 	cmp.w	lr, #21
   25cfe:	dd53      	ble.n	25da8 <z_fatal_error+0x148>
   25d00:	2316      	movs	r3, #22
   25d02:	b14a      	cbz	r2, 25d18 <z_fatal_error+0xb8>
   25d04:	2105      	movs	r1, #5
   25d06:	7139      	strb	r1, [r7, #4]
   25d08:	2100      	movs	r1, #0
   25d0a:	7179      	strb	r1, [r7, #5]
   25d0c:	71b9      	strb	r1, [r7, #6]
   25d0e:	2101      	movs	r1, #1
   25d10:	71f9      	strb	r1, [r7, #7]
   25d12:	6878      	ldr	r0, [r7, #4]
   25d14:	f8cc 0010 	str.w	r0, [ip, #16]
   25d18:	2100      	movs	r1, #0
   25d1a:	f36f 0100 	bfc	r1, #0, #1
   25d1e:	f36f 0141 	bfc	r1, #1, #1
   25d22:	f36f 0182 	bfc	r1, #2, #1
   25d26:	f36f 01c5 	bfc	r1, #3, #3
   25d2a:	2001      	movs	r0, #1
   25d2c:	f360 1188 	bfi	r1, r0, #6, #3
   25d30:	f3c3 0309 	ubfx	r3, r3, #0, #10
   25d34:	f363 2152 	bfi	r1, r3, #9, #10
   25d38:	f36f 41de 	bfc	r1, #19, #12
   25d3c:	f36f 71df 	bfc	r1, #31, #1
   25d40:	2300      	movs	r3, #0
   25d42:	4856      	ldr	r0, [pc, #344]	; (25e9c <z_fatal_error+0x23c>)
   25d44:	f003 fa61 	bl	2920a <z_impl_z_log_msg_static_create>
   25d48:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   25d4a:	b11c      	cbz	r4, 25d54 <z_fatal_error+0xf4>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   25d4c:	69e3      	ldr	r3, [r4, #28]
   25d4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   25d52:	bb63      	cbnz	r3, 25dae <z_fatal_error+0x14e>
		LOG_ERR("Fault during interrupt handling\n");
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   25d54:	4628      	mov	r0, r5
   25d56:	f7ff ff73 	bl	25c40 <thread_name_get>
   25d5a:	46e9      	mov	r9, sp
   25d5c:	2301      	movs	r3, #1
   25d5e:	713b      	strb	r3, [r7, #4]
   25d60:	2303      	movs	r3, #3
   25d62:	717b      	strb	r3, [r7, #5]
   25d64:	b08a      	sub	sp, #40	; 0x28
   25d66:	46ec      	mov	ip, sp
   25d68:	f11c 0210 	adds.w	r2, ip, #16
   25d6c:	d04c      	beq.n	25e08 <z_fatal_error+0x1a8>
   25d6e:	f04f 0e12 	mov.w	lr, #18
   25d72:	b152      	cbz	r2, 25d8a <z_fatal_error+0x12a>
   25d74:	4673      	mov	r3, lr
   25d76:	f1be 0f04 	cmp.w	lr, #4
   25d7a:	dd02      	ble.n	25d82 <z_fatal_error+0x122>
   25d7c:	4948      	ldr	r1, [pc, #288]	; (25ea0 <z_fatal_error+0x240>)
   25d7e:	f8cc 1014 	str.w	r1, [ip, #20]
   25d82:	2b08      	cmp	r3, #8
   25d84:	dd01      	ble.n	25d8a <z_fatal_error+0x12a>
   25d86:	f8cc 5018 	str.w	r5, [ip, #24]
   25d8a:	2301      	movs	r3, #1
   25d8c:	703b      	strb	r3, [r7, #0]
   25d8e:	2303      	movs	r3, #3
   25d90:	707b      	strb	r3, [r7, #1]
   25d92:	2a00      	cmp	r2, #0
   25d94:	d045      	beq.n	25e22 <z_fatal_error+0x1c2>
   25d96:	f1be 0f0c 	cmp.w	lr, #12
   25d9a:	dd01      	ble.n	25da0 <z_fatal_error+0x140>
   25d9c:	f8cc 001c 	str.w	r0, [ip, #28]
   25da0:	f10c 0320 	add.w	r3, ip, #32
   25da4:	2100      	movs	r1, #0
   25da6:	e03a      	b.n	25e1e <z_fatal_error+0x1be>
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   25da8:	f06f 031b 	mvn.w	r3, #27
   25dac:	e7a9      	b.n	25d02 <z_fatal_error+0xa2>
		LOG_ERR("Fault during interrupt handling\n");
   25dae:	2006      	movs	r0, #6
   25db0:	f7ed ffaa 	bl	13d08 <z_log_msg_alloc>
   25db4:	2200      	movs	r2, #0
   25db6:	f36f 0200 	bfc	r2, #0, #1
   25dba:	f36f 0241 	bfc	r2, #1, #1
   25dbe:	f36f 0282 	bfc	r2, #2, #1
   25dc2:	f36f 02c5 	bfc	r2, #3, #3
   25dc6:	2301      	movs	r3, #1
   25dc8:	f363 1288 	bfi	r2, r3, #6, #3
   25dcc:	2308      	movs	r3, #8
   25dce:	f363 2252 	bfi	r2, r3, #9, #10
   25dd2:	f36f 42de 	bfc	r2, #19, #12
   25dd6:	f36f 72df 	bfc	r2, #31, #1
   25dda:	4684      	mov	ip, r0
   25ddc:	b170      	cbz	r0, 25dfc <z_fatal_error+0x19c>
   25dde:	f110 0310 	adds.w	r3, r0, #16
   25de2:	d001      	beq.n	25de8 <z_fatal_error+0x188>
   25de4:	492f      	ldr	r1, [pc, #188]	; (25ea4 <z_fatal_error+0x244>)
   25de6:	6141      	str	r1, [r0, #20]
   25de8:	b143      	cbz	r3, 25dfc <z_fatal_error+0x19c>
   25dea:	2302      	movs	r3, #2
   25dec:	713b      	strb	r3, [r7, #4]
   25dee:	2300      	movs	r3, #0
   25df0:	717b      	strb	r3, [r7, #5]
   25df2:	71bb      	strb	r3, [r7, #6]
   25df4:	71fb      	strb	r3, [r7, #7]
   25df6:	6878      	ldr	r0, [r7, #4]
   25df8:	f8cc 0010 	str.w	r0, [ip, #16]
   25dfc:	2300      	movs	r3, #0
   25dfe:	4927      	ldr	r1, [pc, #156]	; (25e9c <z_fatal_error+0x23c>)
   25e00:	4660      	mov	r0, ip
   25e02:	f003 f9ea 	bl	291da <z_log_msg_finalize>
   25e06:	e7a5      	b.n	25d54 <z_fatal_error+0xf4>
	LOG_ERR("Current thread: %p (%s)", thread,
   25e08:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
   25e0c:	e7b1      	b.n	25d72 <z_fatal_error+0x112>
   25e0e:	f101 0008 	add.w	r0, r1, #8
   25e12:	4438      	add	r0, r7
   25e14:	f810 0c08 	ldrb.w	r0, [r0, #-8]
   25e18:	f803 0b01 	strb.w	r0, [r3], #1
   25e1c:	3101      	adds	r1, #1
   25e1e:	2901      	cmp	r1, #1
   25e20:	d9f5      	bls.n	25e0e <z_fatal_error+0x1ae>
   25e22:	f1be 0f11 	cmp.w	lr, #17
   25e26:	dd33      	ble.n	25e90 <z_fatal_error+0x230>
   25e28:	2312      	movs	r3, #18
   25e2a:	b14a      	cbz	r2, 25e40 <z_fatal_error+0x1e0>
   25e2c:	2104      	movs	r1, #4
   25e2e:	7139      	strb	r1, [r7, #4]
   25e30:	2100      	movs	r1, #0
   25e32:	7179      	strb	r1, [r7, #5]
   25e34:	71b9      	strb	r1, [r7, #6]
   25e36:	2101      	movs	r1, #1
   25e38:	71f9      	strb	r1, [r7, #7]
   25e3a:	6878      	ldr	r0, [r7, #4]
   25e3c:	f8cc 0010 	str.w	r0, [ip, #16]
   25e40:	2100      	movs	r1, #0
   25e42:	f36f 0100 	bfc	r1, #0, #1
   25e46:	f36f 0141 	bfc	r1, #1, #1
   25e4a:	f36f 0182 	bfc	r1, #2, #1
   25e4e:	f36f 01c5 	bfc	r1, #3, #3
   25e52:	2001      	movs	r0, #1
   25e54:	f360 1188 	bfi	r1, r0, #6, #3
   25e58:	f3c3 0309 	ubfx	r3, r3, #0, #10
   25e5c:	f363 2152 	bfi	r1, r3, #9, #10
   25e60:	f36f 41de 	bfc	r1, #19, #12
   25e64:	f36f 71df 	bfc	r1, #31, #1
   25e68:	2300      	movs	r3, #0
   25e6a:	480c      	ldr	r0, [pc, #48]	; (25e9c <z_fatal_error+0x23c>)
   25e6c:	f003 f9cd 	bl	2920a <z_impl_z_log_msg_static_create>
   25e70:	46cd      	mov	sp, r9

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   25e72:	4621      	mov	r1, r4
   25e74:	4630      	mov	r0, r6
   25e76:	f7fc fda5 	bl	229c4 <k_sys_fatal_error_handler>
	__asm__ volatile(
   25e7a:	f388 8811 	msr	BASEPRI, r8
   25e7e:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   25e82:	4628      	mov	r0, r5
   25e84:	f7f0 f8e0 	bl	16048 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   25e88:	370c      	adds	r7, #12
   25e8a:	46bd      	mov	sp, r7
   25e8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LOG_ERR("Current thread: %p (%s)", thread,
   25e90:	f06f 031b 	mvn.w	r3, #27
   25e94:	e7c9      	b.n	25e2a <z_fatal_error+0x1ca>
   25e96:	bf00      	nop
   25e98:	000349a0 	.word	0x000349a0
   25e9c:	000314c8 	.word	0x000314c8
   25ea0:	000349ec 	.word	0x000349ec
   25ea4:	000349c8 	.word	0x000349c8

00025ea8 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
static void z_sys_init_run_level(enum init_level level)
{
   25ea8:	b570      	push	{r4, r5, r6, lr}
   25eaa:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   25eac:	4b11      	ldr	r3, [pc, #68]	; (25ef4 <z_sys_init_run_level+0x4c>)
   25eae:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   25eb2:	e009      	b.n	25ec8 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
   25eb4:	4240      	negs	r0, r0
   25eb6:	e017      	b.n	25ee8 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
   25eb8:	68eb      	ldr	r3, [r5, #12]
   25eba:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
   25ebc:	68ea      	ldr	r2, [r5, #12]
   25ebe:	7853      	ldrb	r3, [r2, #1]
   25ec0:	f043 0301 	orr.w	r3, r3, #1
   25ec4:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   25ec6:	3408      	adds	r4, #8
   25ec8:	1c73      	adds	r3, r6, #1
   25eca:	4a0a      	ldr	r2, [pc, #40]	; (25ef4 <z_sys_init_run_level+0x4c>)
   25ecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   25ed0:	42a3      	cmp	r3, r4
   25ed2:	d90d      	bls.n	25ef0 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
   25ed4:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
   25ed6:	6823      	ldr	r3, [r4, #0]
   25ed8:	4628      	mov	r0, r5
   25eda:	4798      	blx	r3
		if (dev != NULL) {
   25edc:	2d00      	cmp	r5, #0
   25ede:	d0f2      	beq.n	25ec6 <z_sys_init_run_level+0x1e>
			if (rc != 0) {
   25ee0:	2800      	cmp	r0, #0
   25ee2:	d0eb      	beq.n	25ebc <z_sys_init_run_level+0x14>
				if (rc < 0) {
   25ee4:	2800      	cmp	r0, #0
   25ee6:	dbe5      	blt.n	25eb4 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
   25ee8:	28ff      	cmp	r0, #255	; 0xff
   25eea:	dde5      	ble.n	25eb8 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
   25eec:	20ff      	movs	r0, #255	; 0xff
   25eee:	e7e3      	b.n	25eb8 <z_sys_init_run_level+0x10>
		}
	}
}
   25ef0:	bd70      	pop	{r4, r5, r6, pc}
   25ef2:	bf00      	nop
   25ef4:	00034a14 	.word	0x00034a14

00025ef8 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   25ef8:	b510      	push	{r4, lr}
   25efa:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
   25efc:	23b8      	movs	r3, #184	; 0xb8
   25efe:	4c10      	ldr	r4, [pc, #64]	; (25f40 <init_idle_thread+0x48>)
   25f00:	fb03 4400 	mla	r4, r3, r0, r4
	k_thread_stack_t *stack = z_idle_stacks[i];
   25f04:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   25f08:	4b0e      	ldr	r3, [pc, #56]	; (25f44 <init_idle_thread+0x4c>)
   25f0a:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
	z_setup_new_thread(thread, stack,
   25f0e:	4a0e      	ldr	r2, [pc, #56]	; (25f48 <init_idle_thread+0x50>)
   25f10:	9205      	str	r2, [sp, #20]
   25f12:	2201      	movs	r2, #1
   25f14:	9204      	str	r2, [sp, #16]
   25f16:	220f      	movs	r2, #15
   25f18:	9203      	str	r2, [sp, #12]
   25f1a:	2200      	movs	r2, #0
   25f1c:	9202      	str	r2, [sp, #8]
   25f1e:	9201      	str	r2, [sp, #4]
   25f20:	9300      	str	r3, [sp, #0]
   25f22:	4b0a      	ldr	r3, [pc, #40]	; (25f4c <init_idle_thread+0x54>)
   25f24:	f44f 72a0 	mov.w	r2, #320	; 0x140
   25f28:	4909      	ldr	r1, [pc, #36]	; (25f50 <init_idle_thread+0x58>)
   25f2a:	eb01 11cc 	add.w	r1, r1, ip, lsl #7
   25f2e:	4620      	mov	r0, r4
   25f30:	f000 f974 	bl	2621c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   25f34:	7b63      	ldrb	r3, [r4, #13]
   25f36:	f023 0304 	bic.w	r3, r3, #4
   25f3a:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   25f3c:	b006      	add	sp, #24
   25f3e:	bd10      	pop	{r4, pc}
   25f40:	20007698 	.word	0x20007698
   25f44:	20009070 	.word	0x20009070
   25f48:	00034a04 	.word	0x00034a04
   25f4c:	00026379 	.word	0x00026379
   25f50:	2000ac80 	.word	0x2000ac80

00025f54 <bg_thread_main>:
{
   25f54:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   25f56:	4b0a      	ldr	r3, [pc, #40]	; (25f80 <bg_thread_main+0x2c>)
   25f58:	2201      	movs	r2, #1
   25f5a:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   25f5c:	2003      	movs	r0, #3
   25f5e:	f7ff ffa3 	bl	25ea8 <z_sys_init_run_level>
	boot_banner();
   25f62:	f001 fc05 	bl	27770 <boot_banner>
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   25f66:	2004      	movs	r0, #4
   25f68:	f7ff ff9e 	bl	25ea8 <z_sys_init_run_level>
	z_init_static_threads();
   25f6c:	f000 f9ba 	bl	262e4 <z_init_static_threads>
	(void)main();
   25f70:	f7ec fa5a 	bl	12428 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   25f74:	4a03      	ldr	r2, [pc, #12]	; (25f84 <bg_thread_main+0x30>)
   25f76:	7b13      	ldrb	r3, [r2, #12]
   25f78:	f023 0301 	bic.w	r3, r3, #1
   25f7c:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   25f7e:	bd08      	pop	{r3, pc}
   25f80:	200090c0 	.word	0x200090c0
   25f84:	20007750 	.word	0x20007750

00025f88 <switch_to_main_thread>:
	return stack_ptr;
}

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
   25f88:	b508      	push	{r3, lr}
   25f8a:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   25f8c:	4a01      	ldr	r2, [pc, #4]	; (25f94 <switch_to_main_thread+0xc>)
   25f8e:	4802      	ldr	r0, [pc, #8]	; (25f98 <switch_to_main_thread+0x10>)
   25f90:	f7ee ffaa 	bl	14ee8 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   25f94:	00025f55 	.word	0x00025f55
   25f98:	20007750 	.word	0x20007750

00025f9c <z_bss_zero>:
{
   25f9c:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   25f9e:	4803      	ldr	r0, [pc, #12]	; (25fac <z_bss_zero+0x10>)
   25fa0:	4a03      	ldr	r2, [pc, #12]	; (25fb0 <z_bss_zero+0x14>)
   25fa2:	1a12      	subs	r2, r2, r0
   25fa4:	2100      	movs	r1, #0
   25fa6:	f00a f88e 	bl	300c6 <z_early_memset>
}
   25faa:	bd08      	pop	{r3, pc}
   25fac:	20000c38 	.word	0x20000c38
   25fb0:	200090c4 	.word	0x200090c4

00025fb4 <z_init_cpu>:
{
   25fb4:	b510      	push	{r4, lr}
   25fb6:	4604      	mov	r4, r0
	init_idle_thread(id);
   25fb8:	f7ff ff9e 	bl	25ef8 <init_idle_thread>
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   25fbc:	23b8      	movs	r3, #184	; 0xb8
   25fbe:	490b      	ldr	r1, [pc, #44]	; (25fec <z_init_cpu+0x38>)
   25fc0:	fb03 1104 	mla	r1, r3, r4, r1
   25fc4:	4a0a      	ldr	r2, [pc, #40]	; (25ff0 <z_init_cpu+0x3c>)
   25fc6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   25fca:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   25fce:	60d9      	str	r1, [r3, #12]
	_kernel.cpus[id].id = id;
   25fd0:	751c      	strb	r4, [r3, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   25fd2:	eb04 1144 	add.w	r1, r4, r4, lsl #5
   25fd6:	4b07      	ldr	r3, [pc, #28]	; (25ff4 <z_init_cpu+0x40>)
   25fd8:	eb03 1381 	add.w	r3, r3, r1, lsl #6
   25fdc:	f503 6304 	add.w	r3, r3, #2112	; 0x840
	_kernel.cpus[id].irq_stack =
   25fe0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   25fe4:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
   25fe8:	6053      	str	r3, [r2, #4]
}
   25fea:	bd10      	pop	{r4, pc}
   25fec:	20007698 	.word	0x20007698
   25ff0:	20009070 	.word	0x20009070
   25ff4:	2000a440 	.word	0x2000a440

00025ff8 <prepare_multithreading>:
{
   25ff8:	b570      	push	{r4, r5, r6, lr}
   25ffa:	b086      	sub	sp, #24
	z_sched_init();
   25ffc:	f000 ff98 	bl	26f30 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
   26000:	4d10      	ldr	r5, [pc, #64]	; (26044 <prepare_multithreading+0x4c>)
   26002:	4b11      	ldr	r3, [pc, #68]	; (26048 <prepare_multithreading+0x50>)
   26004:	61dd      	str	r5, [r3, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   26006:	4b11      	ldr	r3, [pc, #68]	; (2604c <prepare_multithreading+0x54>)
   26008:	9305      	str	r3, [sp, #20]
   2600a:	2301      	movs	r3, #1
   2600c:	9304      	str	r3, [sp, #16]
   2600e:	2400      	movs	r4, #0
   26010:	9403      	str	r4, [sp, #12]
   26012:	9402      	str	r4, [sp, #8]
   26014:	9401      	str	r4, [sp, #4]
   26016:	9400      	str	r4, [sp, #0]
   26018:	4b0d      	ldr	r3, [pc, #52]	; (26050 <prepare_multithreading+0x58>)
   2601a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   2601e:	490d      	ldr	r1, [pc, #52]	; (26054 <prepare_multithreading+0x5c>)
   26020:	4628      	mov	r0, r5
   26022:	f000 f8fb 	bl	2621c <z_setup_new_thread>
   26026:	4606      	mov	r6, r0
   26028:	7b6b      	ldrb	r3, [r5, #13]
   2602a:	f023 0304 	bic.w	r3, r3, #4
   2602e:	736b      	strb	r3, [r5, #13]
	z_ready_thread(&z_main_thread);
   26030:	4628      	mov	r0, r5
   26032:	f00a fc4e 	bl	308d2 <z_ready_thread>
	z_init_cpu(0);
   26036:	4620      	mov	r0, r4
   26038:	f7ff ffbc 	bl	25fb4 <z_init_cpu>
}
   2603c:	4630      	mov	r0, r6
   2603e:	b006      	add	sp, #24
   26040:	bd70      	pop	{r4, r5, r6, pc}
   26042:	bf00      	nop
   26044:	20007750 	.word	0x20007750
   26048:	20009070 	.word	0x20009070
   2604c:	00034a0c 	.word	0x00034a0c
   26050:	00025f55 	.word	0x00025f55
   26054:	2000ae00 	.word	0x2000ae00

00026058 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   26058:	b500      	push	{lr}
   2605a:	b0af      	sub	sp, #188	; 0xbc
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   2605c:	2000      	movs	r0, #0
   2605e:	f7ff ff23 	bl	25ea8 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   26062:	4b1f      	ldr	r3, [pc, #124]	; (260e0 <z_cstart+0x88>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   26064:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   26068:	4c1e      	ldr	r4, [pc, #120]	; (260e4 <z_cstart+0x8c>)
   2606a:	6963      	ldr	r3, [r4, #20]
   2606c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   26070:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   26072:	23e0      	movs	r3, #224	; 0xe0
   26074:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
   26078:	2320      	movs	r3, #32
   2607a:	77e3      	strb	r3, [r4, #31]
   2607c:	2500      	movs	r5, #0
   2607e:	7625      	strb	r5, [r4, #24]
   26080:	7665      	strb	r5, [r4, #25]
   26082:	76a5      	strb	r5, [r4, #26]
   26084:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   26088:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2608a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   2608e:	6263      	str	r3, [r4, #36]	; 0x24
   26090:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   26094:	f7ef ff3e 	bl	15f14 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   26098:	f7ee fd18 	bl	14acc <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   2609c:	f04f 33ff 	mov.w	r3, #4294967295
   260a0:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   260a2:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   260a4:	f7f0 f8f8 	bl	16298 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   260a8:	f7ef ffe8 	bl	1607c <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   260ac:	f7ed fe18 	bl	13ce0 <log_core_init>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
   260b0:	2401      	movs	r4, #1
   260b2:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   260b6:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
   260ba:	9527      	str	r5, [sp, #156]	; 0x9c
	dummy_thread->stack_info.size = 0U;
   260bc:	9528      	str	r5, [sp, #160]	; 0xa0
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
   260be:	952a      	str	r5, [sp, #168]	; 0xa8

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   260c0:	4b09      	ldr	r3, [pc, #36]	; (260e8 <z_cstart+0x90>)
   260c2:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   260c6:	f7ff fd8f 	bl	25be8 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   260ca:	4620      	mov	r0, r4
   260cc:	f7ff feec 	bl	25ea8 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   260d0:	2002      	movs	r0, #2
   260d2:	f7ff fee9 	bl	25ea8 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
   260d6:	f7ff ff8f 	bl	25ff8 <prepare_multithreading>
   260da:	f7ff ff55 	bl	25f88 <switch_to_main_thread>
   260de:	bf00      	nop
   260e0:	2000ac80 	.word	0x2000ac80
   260e4:	e000ed00 	.word	0xe000ed00
   260e8:	20009070 	.word	0x20009070

000260ec <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   260ec:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   260ee:	4c06      	ldr	r4, [pc, #24]	; (26108 <statics_init+0x1c>)
   260f0:	e005      	b.n	260fe <statics_init+0x12>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   260f2:	68a2      	ldr	r2, [r4, #8]
   260f4:	6861      	ldr	r1, [r4, #4]
   260f6:	4620      	mov	r0, r4
   260f8:	f009 ffed 	bl	300d6 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   260fc:	3414      	adds	r4, #20
   260fe:	4b03      	ldr	r3, [pc, #12]	; (2610c <statics_init+0x20>)
   26100:	429c      	cmp	r4, r3
   26102:	d3f6      	bcc.n	260f2 <statics_init+0x6>
		}
	}
	return 0;
}
   26104:	2000      	movs	r0, #0
   26106:	bd10      	pop	{r4, pc}
   26108:	20000ac0 	.word	0x20000ac0
   2610c:	20000ac0 	.word	0x20000ac0

00026110 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
   26110:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   26112:	4c06      	ldr	r4, [pc, #24]	; (2612c <init_mem_slab_module+0x1c>)
	int rc = 0;
   26114:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   26116:	e000      	b.n	2611a <init_mem_slab_module+0xa>
   26118:	341c      	adds	r4, #28
   2611a:	4b05      	ldr	r3, [pc, #20]	; (26130 <init_mem_slab_module+0x20>)
   2611c:	429c      	cmp	r4, r3
   2611e:	d204      	bcs.n	2612a <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
   26120:	4620      	mov	r0, r4
   26122:	f00a f853 	bl	301cc <create_free_list>
		if (rc < 0) {
   26126:	2800      	cmp	r0, #0
   26128:	daf6      	bge.n	26118 <init_mem_slab_module+0x8>
		z_object_init(slab);
	}

out:
	return rc;
}
   2612a:	bd10      	pop	{r4, pc}
   2612c:	20000a34 	.word	0x20000a34
   26130:	20000ac0 	.word	0x20000ac0

00026134 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   26134:	b530      	push	{r4, r5, lr}
   26136:	b083      	sub	sp, #12
   26138:	460d      	mov	r5, r1
	__asm__ volatile(
   2613a:	f04f 0140 	mov.w	r1, #64	; 0x40
   2613e:	f3ef 8c11 	mrs	ip, BASEPRI
   26142:	f381 8812 	msr	BASEPRI_MAX, r1
   26146:	f3bf 8f6f 	isb	sy
   2614a:	4661      	mov	r1, ip
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   2614c:	6944      	ldr	r4, [r0, #20]
   2614e:	b164      	cbz	r4, 2616a <k_mem_slab_alloc+0x36>
		/* take a free block */
		*mem = slab->free_list;
   26150:	602c      	str	r4, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
   26152:	6823      	ldr	r3, [r4, #0]
   26154:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   26156:	6983      	ldr	r3, [r0, #24]
   26158:	3301      	adds	r3, #1
   2615a:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   2615c:	2000      	movs	r0, #0
	__asm__ volatile(
   2615e:	f381 8811 	msr	BASEPRI, r1
   26162:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
   26166:	b003      	add	sp, #12
   26168:	bd30      	pop	{r4, r5, pc}
   2616a:	f100 0e08 	add.w	lr, r0, #8
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   2616e:	ea53 0402 	orrs.w	r4, r3, r2
   26172:	d104      	bne.n	2617e <k_mem_slab_alloc+0x4a>
		*mem = NULL;
   26174:	2300      	movs	r3, #0
   26176:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
   26178:	f06f 000b 	mvn.w	r0, #11
   2617c:	e7ef      	b.n	2615e <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   2617e:	9200      	str	r2, [sp, #0]
   26180:	9301      	str	r3, [sp, #4]
   26182:	4602      	mov	r2, r0
   26184:	4670      	mov	r0, lr
   26186:	f000 fdcd 	bl	26d24 <z_pend_curr>
		if (result == 0) {
   2618a:	2800      	cmp	r0, #0
   2618c:	d1eb      	bne.n	26166 <k_mem_slab_alloc+0x32>
			*mem = _current->base.swap_data;
   2618e:	4b02      	ldr	r3, [pc, #8]	; (26198 <k_mem_slab_alloc+0x64>)
   26190:	689b      	ldr	r3, [r3, #8]
   26192:	695b      	ldr	r3, [r3, #20]
   26194:	602b      	str	r3, [r5, #0]
		return result;
   26196:	e7e6      	b.n	26166 <k_mem_slab_alloc+0x32>
   26198:	20009070 	.word	0x20009070

0002619c <z_thread_monitor_exit>:
	__asm__ volatile(
   2619c:	f04f 0340 	mov.w	r3, #64	; 0x40
   261a0:	f3ef 8111 	mrs	r1, BASEPRI
   261a4:	f383 8812 	msr	BASEPRI_MAX, r3
   261a8:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
   261ac:	4b0a      	ldr	r3, [pc, #40]	; (261d8 <z_thread_monitor_exit+0x3c>)
   261ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   261b0:	4283      	cmp	r3, r0
   261b2:	d104      	bne.n	261be <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
   261b4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
   261b6:	4b08      	ldr	r3, [pc, #32]	; (261d8 <z_thread_monitor_exit+0x3c>)
   261b8:	629a      	str	r2, [r3, #40]	; 0x28
   261ba:	e007      	b.n	261cc <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
   261bc:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
   261be:	b113      	cbz	r3, 261c6 <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
   261c0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
		while ((prev_thread != NULL) &&
   261c2:	4282      	cmp	r2, r0
   261c4:	d1fa      	bne.n	261bc <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
   261c6:	b10b      	cbz	r3, 261cc <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
   261c8:	6f42      	ldr	r2, [r0, #116]	; 0x74
   261ca:	675a      	str	r2, [r3, #116]	; 0x74
	__asm__ volatile(
   261cc:	f381 8811 	msr	BASEPRI, r1
   261d0:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
   261d4:	4770      	bx	lr
   261d6:	bf00      	nop
   261d8:	20009070 	.word	0x20009070

000261dc <z_impl_k_thread_name_set>:
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
   261dc:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
   261de:	4604      	mov	r4, r0
   261e0:	b140      	cbz	r0, 261f4 <z_impl_k_thread_name_set+0x18>
		thread = _current;
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN - 1);
   261e2:	221f      	movs	r2, #31
   261e4:	f104 0078 	add.w	r0, r4, #120	; 0x78
   261e8:	f003 fc6e 	bl	29ac8 <strncpy>
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   261ec:	2000      	movs	r0, #0
   261ee:	f884 0097 	strb.w	r0, [r4, #151]	; 0x97

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
   261f2:	bd10      	pop	{r4, pc}
		thread = _current;
   261f4:	4b01      	ldr	r3, [pc, #4]	; (261fc <z_impl_k_thread_name_set+0x20>)
   261f6:	689c      	ldr	r4, [r3, #8]
   261f8:	e7f3      	b.n	261e2 <z_impl_k_thread_name_set+0x6>
   261fa:	bf00      	nop
   261fc:	20009070 	.word	0x20009070

00026200 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
   26200:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   26202:	ea53 0102 	orrs.w	r1, r3, r2
   26206:	d102      	bne.n	2620e <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
   26208:	f00a f841 	bl	3028e <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
   2620c:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   2620e:	4902      	ldr	r1, [pc, #8]	; (26218 <schedule_new_thread+0x18>)
   26210:	3018      	adds	r0, #24
   26212:	f001 f83f 	bl	27294 <z_add_timeout>
   26216:	e7f9      	b.n	2620c <schedule_new_thread+0xc>
   26218:	0003090b 	.word	0x0003090b

0002621c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   2621c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26220:	b085      	sub	sp, #20
   26222:	4604      	mov	r4, r0
   26224:	460f      	mov	r7, r1
   26226:	4615      	mov	r5, r2
   26228:	461e      	mov	r6, r3
   2622a:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   2622e:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   26232:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   26236:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   2623a:	f100 0358 	add.w	r3, r0, #88	; 0x58
	list->head = (sys_dnode_t *)list;
   2623e:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
   26240:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
   26242:	9b12      	ldr	r3, [sp, #72]	; 0x48
   26244:	2204      	movs	r2, #4
   26246:	9911      	ldr	r1, [sp, #68]	; 0x44
   26248:	f00a f825 	bl	30296 <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
   2624c:	462a      	mov	r2, r5
   2624e:	4639      	mov	r1, r7
   26250:	4620      	mov	r0, r4
   26252:	f00a f801 	bl	30258 <setup_thread_stack>
   26256:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   26258:	f8cd 8008 	str.w	r8, [sp, #8]
   2625c:	f8cd 9004 	str.w	r9, [sp, #4]
   26260:	f8cd a000 	str.w	sl, [sp]
   26264:	4633      	mov	r3, r6
   26266:	4602      	mov	r2, r0
   26268:	4639      	mov	r1, r7
   2626a:	4620      	mov	r0, r4
   2626c:	f7ee fdf6 	bl	14e5c <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
   26270:	2300      	movs	r3, #0
   26272:	6563      	str	r3, [r4, #84]	; 0x54
#ifdef CONFIG_THREAD_CUSTOM_DATA
	/* Initialize custom data field (value is opaque to kernel) */
	new_thread->custom_data = NULL;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
   26274:	6666      	str	r6, [r4, #100]	; 0x64
	new_thread->entry.parameter1 = p1;
   26276:	f8c4 a068 	str.w	sl, [r4, #104]	; 0x68
	new_thread->entry.parameter2 = p2;
   2627a:	f8c4 906c 	str.w	r9, [r4, #108]	; 0x6c
	new_thread->entry.parameter3 = p3;
   2627e:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
	__asm__ volatile(
   26282:	f04f 0340 	mov.w	r3, #64	; 0x40
   26286:	f3ef 8211 	mrs	r2, BASEPRI
   2628a:	f383 8812 	msr	BASEPRI_MAX, r3
   2628e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
   26292:	4b13      	ldr	r3, [pc, #76]	; (262e0 <z_setup_new_thread+0xc4>)
   26294:	6a99      	ldr	r1, [r3, #40]	; 0x28
   26296:	6761      	str	r1, [r4, #116]	; 0x74
	_kernel.threads = new_thread;
   26298:	629c      	str	r4, [r3, #40]	; 0x28
	__asm__ volatile(
   2629a:	f382 8811 	msr	BASEPRI, r2
   2629e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
   262a2:	f1bb 0f00 	cmp.w	fp, #0
   262a6:	d013      	beq.n	262d0 <z_setup_new_thread+0xb4>
		strncpy(new_thread->name, name,
   262a8:	221f      	movs	r2, #31
   262aa:	4659      	mov	r1, fp
   262ac:	f104 0078 	add.w	r0, r4, #120	; 0x78
   262b0:	f003 fc0a 	bl	29ac8 <strncpy>
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   262b4:	2300      	movs	r3, #0
   262b6:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
		new_thread->base.cpu_mask = -1; /* allow all cpus */
	}
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   262ba:	4b09      	ldr	r3, [pc, #36]	; (262e0 <z_setup_new_thread+0xc4>)
   262bc:	689b      	ldr	r3, [r3, #8]
   262be:	b15b      	cbz	r3, 262d8 <z_setup_new_thread+0xbc>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   262c0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   262c4:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
#endif

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, create, new_thread);

	return stack_ptr;
}
   262c8:	4628      	mov	r0, r5
   262ca:	b005      	add	sp, #20
   262cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
   262d0:	2300      	movs	r3, #0
   262d2:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   262d6:	e7f0      	b.n	262ba <z_setup_new_thread+0x9e>
		new_thread->resource_pool = NULL;
   262d8:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
		return stack_ptr;
   262dc:	e7f4      	b.n	262c8 <z_setup_new_thread+0xac>
   262de:	bf00      	nop
   262e0:	20009070 	.word	0x20009070

000262e4 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
   262e4:	b530      	push	{r4, r5, lr}
   262e6:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   262e8:	4c21      	ldr	r4, [pc, #132]	; (26370 <z_init_static_threads+0x8c>)
   262ea:	e014      	b.n	26316 <z_init_static_threads+0x32>
		z_setup_new_thread(
   262ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   262ee:	9305      	str	r3, [sp, #20]
   262f0:	6a23      	ldr	r3, [r4, #32]
   262f2:	9304      	str	r3, [sp, #16]
   262f4:	69e3      	ldr	r3, [r4, #28]
   262f6:	9303      	str	r3, [sp, #12]
   262f8:	69a3      	ldr	r3, [r4, #24]
   262fa:	9302      	str	r3, [sp, #8]
   262fc:	6963      	ldr	r3, [r4, #20]
   262fe:	9301      	str	r3, [sp, #4]
   26300:	6923      	ldr	r3, [r4, #16]
   26302:	9300      	str	r3, [sp, #0]
   26304:	68e3      	ldr	r3, [r4, #12]
   26306:	68a2      	ldr	r2, [r4, #8]
   26308:	6861      	ldr	r1, [r4, #4]
   2630a:	6820      	ldr	r0, [r4, #0]
   2630c:	f7ff ff86 	bl	2621c <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
   26310:	6823      	ldr	r3, [r4, #0]
   26312:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   26314:	3430      	adds	r4, #48	; 0x30
   26316:	4b17      	ldr	r3, [pc, #92]	; (26374 <z_init_static_threads+0x90>)
   26318:	429c      	cmp	r4, r3
   2631a:	d3e7      	bcc.n	262ec <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
   2631c:	f000 fbb4 	bl	26a88 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   26320:	4c13      	ldr	r4, [pc, #76]	; (26370 <z_init_static_threads+0x8c>)
   26322:	e000      	b.n	26326 <z_init_static_threads+0x42>
   26324:	3430      	adds	r4, #48	; 0x30
   26326:	4b13      	ldr	r3, [pc, #76]	; (26374 <z_init_static_threads+0x90>)
   26328:	429c      	cmp	r4, r3
   2632a:	d21c      	bcs.n	26366 <z_init_static_threads+0x82>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   2632c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   2632e:	f1b0 3fff 	cmp.w	r0, #4294967295
   26332:	d0f7      	beq.n	26324 <z_init_static_threads+0x40>
			schedule_new_thread(thread_data->init_thread,
   26334:	6825      	ldr	r5, [r4, #0]
					    K_MSEC(thread_data->init_delay));
   26336:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   2633a:	17c1      	asrs	r1, r0, #31
   2633c:	03c9      	lsls	r1, r1, #15
   2633e:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   26342:	03c0      	lsls	r0, r0, #15
   26344:	f240 33e7 	movw	r3, #999	; 0x3e7
   26348:	18c0      	adds	r0, r0, r3
   2634a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2634e:	f04f 0300 	mov.w	r3, #0
   26352:	f141 0100 	adc.w	r1, r1, #0
   26356:	f7d9 fed3 	bl	100 <__aeabi_uldivmod>
   2635a:	4602      	mov	r2, r0
   2635c:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
   2635e:	4628      	mov	r0, r5
   26360:	f7ff ff4e 	bl	26200 <schedule_new_thread>
   26364:	e7de      	b.n	26324 <z_init_static_threads+0x40>
		}
	}
	k_sched_unlock();
   26366:	f000 fd91 	bl	26e8c <k_sched_unlock>
}
   2636a:	b007      	add	sp, #28
   2636c:	bd30      	pop	{r4, r5, pc}
   2636e:	bf00      	nop
   26370:	0003136c 	.word	0x0003136c
   26374:	0003136c 	.word	0x0003136c

00026378 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   26378:	b508      	push	{r3, lr}
   2637a:	e001      	b.n	26380 <idle+0x8>
	arch_cpu_idle();
   2637c:	f7ee fbac 	bl	14ad8 <arch_cpu_idle>
	__asm__ volatile(
   26380:	f04f 0240 	mov.w	r2, #64	; 0x40
   26384:	f3ef 8311 	mrs	r3, BASEPRI
   26388:	f382 8812 	msr	BASEPRI_MAX, r2
   2638c:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   26390:	f00a fbed 	bl	30b6e <z_get_next_timeout_expiry>
   26394:	4b05      	ldr	r3, [pc, #20]	; (263ac <idle+0x34>)
   26396:	6198      	str	r0, [r3, #24]
	return !z_sys_post_kernel;
   26398:	4b05      	ldr	r3, [pc, #20]	; (263b0 <idle+0x38>)
   2639a:	781b      	ldrb	r3, [r3, #0]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   2639c:	2b00      	cmp	r3, #0
   2639e:	d0ed      	beq.n	2637c <idle+0x4>
   263a0:	f7ee fa02 	bl	147a8 <pm_system_suspend>
   263a4:	2800      	cmp	r0, #0
   263a6:	d1eb      	bne.n	26380 <idle+0x8>
   263a8:	e7e8      	b.n	2637c <idle+0x4>
   263aa:	bf00      	nop
   263ac:	20009070 	.word	0x20009070
   263b0:	200090c0 	.word	0x200090c0

000263b4 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   263b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   263b8:	b082      	sub	sp, #8
   263ba:	4604      	mov	r4, r0
   263bc:	461e      	mov	r6, r3
   263be:	f04f 0340 	mov.w	r3, #64	; 0x40
   263c2:	f3ef 8511 	mrs	r5, BASEPRI
   263c6:	f383 8812 	msr	BASEPRI_MAX, r3
   263ca:	f3bf 8f6f 	isb	sy
   263ce:	462b      	mov	r3, r5

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   263d0:	68c1      	ldr	r1, [r0, #12]
   263d2:	b999      	cbnz	r1, 263fc <z_impl_k_mutex_lock+0x48>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
   263d4:	2900      	cmp	r1, #0
   263d6:	d151      	bne.n	2647c <z_impl_k_mutex_lock+0xc8>
   263d8:	4a36      	ldr	r2, [pc, #216]	; (264b4 <z_impl_k_mutex_lock+0x100>)
   263da:	6892      	ldr	r2, [r2, #8]
   263dc:	f992 200e 	ldrsb.w	r2, [r2, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   263e0:	6122      	str	r2, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
   263e2:	3101      	adds	r1, #1
   263e4:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
   263e6:	4a33      	ldr	r2, [pc, #204]	; (264b4 <z_impl_k_mutex_lock+0x100>)
   263e8:	6892      	ldr	r2, [r2, #8]
   263ea:	60a2      	str	r2, [r4, #8]
	__asm__ volatile(
   263ec:	f383 8811 	msr	BASEPRI, r3
   263f0:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
   263f4:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   263f6:	b002      	add	sp, #8
   263f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   263fc:	4617      	mov	r7, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   263fe:	6880      	ldr	r0, [r0, #8]
   26400:	4a2c      	ldr	r2, [pc, #176]	; (264b4 <z_impl_k_mutex_lock+0x100>)
   26402:	6892      	ldr	r2, [r2, #8]
   26404:	4290      	cmp	r0, r2
   26406:	d0e5      	beq.n	263d4 <z_impl_k_mutex_lock+0x20>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   26408:	ea56 0107 	orrs.w	r1, r6, r7
   2640c:	d038      	beq.n	26480 <z_impl_k_mutex_lock+0xcc>
					    mutex->owner->base.prio);
   2640e:	f990 800e 	ldrsb.w	r8, [r0, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
   26412:	4641      	mov	r1, r8
   26414:	f992 000e 	ldrsb.w	r0, [r2, #14]
   26418:	f009 ff70 	bl	302fc <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   2641c:	4580      	cmp	r8, r0
   2641e:	dc36      	bgt.n	2648e <z_impl_k_mutex_lock+0xda>
	bool resched = false;
   26420:	f04f 0800 	mov.w	r8, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   26424:	9700      	str	r7, [sp, #0]
   26426:	9601      	str	r6, [sp, #4]
   26428:	4622      	mov	r2, r4
   2642a:	4629      	mov	r1, r5
   2642c:	4822      	ldr	r0, [pc, #136]	; (264b8 <z_impl_k_mutex_lock+0x104>)
   2642e:	f000 fc79 	bl	26d24 <z_pend_curr>
	if (got_mutex == 0) {
   26432:	2800      	cmp	r0, #0
   26434:	d0df      	beq.n	263f6 <z_impl_k_mutex_lock+0x42>
	__asm__ volatile(
   26436:	f04f 0340 	mov.w	r3, #64	; 0x40
   2643a:	f3ef 8511 	mrs	r5, BASEPRI
   2643e:	f383 8812 	msr	BASEPRI_MAX, r3
   26442:	f3bf 8f6f 	isb	sy
   26446:	462e      	mov	r6, r5
	if (likely(mutex->owner != NULL)) {
   26448:	68a3      	ldr	r3, [r4, #8]
   2644a:	b343      	cbz	r3, 2649e <z_impl_k_mutex_lock+0xea>
	return list->head == list;
   2644c:	6823      	ldr	r3, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2644e:	429c      	cmp	r4, r3
   26450:	d023      	beq.n	2649a <z_impl_k_mutex_lock+0xe6>
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   26452:	b313      	cbz	r3, 2649a <z_impl_k_mutex_lock+0xe6>
   26454:	6921      	ldr	r1, [r4, #16]
   26456:	f993 000e 	ldrsb.w	r0, [r3, #14]
   2645a:	f009 ff4f 	bl	302fc <new_prio_for_inheritance>
   2645e:	4601      	mov	r1, r0
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   26460:	4620      	mov	r0, r4
   26462:	f009 ff56 	bl	30312 <adjust_owner_prio>
   26466:	b9e8      	cbnz	r0, 264a4 <z_impl_k_mutex_lock+0xf0>
   26468:	f1b8 0f00 	cmp.w	r8, #0
   2646c:	d11a      	bne.n	264a4 <z_impl_k_mutex_lock+0xf0>
	__asm__ volatile(
   2646e:	f386 8811 	msr	BASEPRI, r6
   26472:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
   26476:	f06f 000a 	mvn.w	r0, #10
   2647a:	e7bc      	b.n	263f6 <z_impl_k_mutex_lock+0x42>
					_current->base.prio :
   2647c:	6922      	ldr	r2, [r4, #16]
   2647e:	e7af      	b.n	263e0 <z_impl_k_mutex_lock+0x2c>
   26480:	f385 8811 	msr	BASEPRI, r5
   26484:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   26488:	f06f 000f 	mvn.w	r0, #15
   2648c:	e7b3      	b.n	263f6 <z_impl_k_mutex_lock+0x42>
		resched = adjust_owner_prio(mutex, new_prio);
   2648e:	4601      	mov	r1, r0
   26490:	4620      	mov	r0, r4
   26492:	f009 ff3e 	bl	30312 <adjust_owner_prio>
   26496:	4680      	mov	r8, r0
   26498:	e7c4      	b.n	26424 <z_impl_k_mutex_lock+0x70>
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   2649a:	6921      	ldr	r1, [r4, #16]
   2649c:	e7e0      	b.n	26460 <z_impl_k_mutex_lock+0xac>
	if (resched) {
   2649e:	f1b8 0f00 	cmp.w	r8, #0
   264a2:	d0e4      	beq.n	2646e <z_impl_k_mutex_lock+0xba>
		z_reschedule(&lock, key);
   264a4:	4629      	mov	r1, r5
   264a6:	4804      	ldr	r0, [pc, #16]	; (264b8 <z_impl_k_mutex_lock+0x104>)
   264a8:	f000 fad8 	bl	26a5c <z_reschedule>
	return -EAGAIN;
   264ac:	f06f 000a 	mvn.w	r0, #10
   264b0:	e7a1      	b.n	263f6 <z_impl_k_mutex_lock+0x42>
   264b2:	bf00      	nop
   264b4:	20009070 	.word	0x20009070
   264b8:	2000909c 	.word	0x2000909c

000264bc <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   264bc:	6883      	ldr	r3, [r0, #8]
   264be:	b38b      	cbz	r3, 26524 <z_impl_k_mutex_unlock+0x68>
{
   264c0:	b570      	push	{r4, r5, r6, lr}
   264c2:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   264c4:	4a1a      	ldr	r2, [pc, #104]	; (26530 <z_impl_k_mutex_unlock+0x74>)
   264c6:	6892      	ldr	r2, [r2, #8]
   264c8:	4293      	cmp	r3, r2
   264ca:	d12e      	bne.n	2652a <z_impl_k_mutex_unlock+0x6e>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   264cc:	68c3      	ldr	r3, [r0, #12]
   264ce:	2b01      	cmp	r3, #1
   264d0:	d903      	bls.n	264da <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
   264d2:	3b01      	subs	r3, #1
   264d4:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   264d6:	2000      	movs	r0, #0
}
   264d8:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   264da:	f04f 0340 	mov.w	r3, #64	; 0x40
   264de:	f3ef 8511 	mrs	r5, BASEPRI
   264e2:	f383 8812 	msr	BASEPRI_MAX, r3
   264e6:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   264ea:	6901      	ldr	r1, [r0, #16]
   264ec:	f009 ff11 	bl	30312 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   264f0:	4620      	mov	r0, r4
   264f2:	f00a faa3 	bl	30a3c <z_unpend_first_thread>
	mutex->owner = new_owner;
   264f6:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   264f8:	b168      	cbz	r0, 26516 <z_impl_k_mutex_unlock+0x5a>
		mutex->owner_orig_prio = new_owner->base.prio;
   264fa:	f990 300e 	ldrsb.w	r3, [r0, #14]
   264fe:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   26500:	2400      	movs	r4, #0
   26502:	f8c0 40b0 	str.w	r4, [r0, #176]	; 0xb0
		z_ready_thread(new_owner);
   26506:	f00a f9e4 	bl	308d2 <z_ready_thread>
		z_reschedule(&lock, key);
   2650a:	4629      	mov	r1, r5
   2650c:	4809      	ldr	r0, [pc, #36]	; (26534 <z_impl_k_mutex_unlock+0x78>)
   2650e:	f000 faa5 	bl	26a5c <z_reschedule>
	return 0;
   26512:	4620      	mov	r0, r4
   26514:	e7e0      	b.n	264d8 <z_impl_k_mutex_unlock+0x1c>
		mutex->lock_count = 0U;
   26516:	2000      	movs	r0, #0
   26518:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   2651a:	f385 8811 	msr	BASEPRI, r5
   2651e:	f3bf 8f6f 	isb	sy
   26522:	e7d9      	b.n	264d8 <z_impl_k_mutex_unlock+0x1c>
		return -EINVAL;
   26524:	f06f 0015 	mvn.w	r0, #21
}
   26528:	4770      	bx	lr
		return -EPERM;
   2652a:	f04f 30ff 	mov.w	r0, #4294967295
   2652e:	e7d3      	b.n	264d8 <z_impl_k_mutex_unlock+0x1c>
   26530:	20009070 	.word	0x20009070
   26534:	2000909c 	.word	0x2000909c

00026538 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   26538:	b510      	push	{r4, lr}
   2653a:	b082      	sub	sp, #8
   2653c:	4684      	mov	ip, r0
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2653e:	4686      	mov	lr, r0
	__asm__ volatile(
   26540:	f04f 0040 	mov.w	r0, #64	; 0x40
   26544:	f3ef 8111 	mrs	r1, BASEPRI
   26548:	f380 8812 	msr	BASEPRI_MAX, r0
   2654c:	f3bf 8f6f 	isb	sy
   26550:	460c      	mov	r4, r1
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   26552:	f85e 0b08 	ldr.w	r0, [lr], #8
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   26556:	b1a0      	cbz	r0, 26582 <z_impl_k_queue_get+0x4a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   26558:	6803      	ldr	r3, [r0, #0]
   2655a:	f023 0303 	bic.w	r3, r3, #3
	list->head = node;
   2655e:	f8cc 3000 	str.w	r3, [ip]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   26562:	f8dc 2004 	ldr.w	r2, [ip, #4]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   26566:	4290      	cmp	r0, r2
   26568:	d008      	beq.n	2657c <z_impl_k_queue_get+0x44>
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   2656a:	2101      	movs	r1, #1
   2656c:	f009 ff67 	bl	3043e <z_queue_node_peek>
	__asm__ volatile(
   26570:	f384 8811 	msr	BASEPRI, r4
   26574:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   26578:	b002      	add	sp, #8
   2657a:	bd10      	pop	{r4, pc}
	list->tail = node;
   2657c:	f8cc 3004 	str.w	r3, [ip, #4]
}
   26580:	e7f3      	b.n	2656a <z_impl_k_queue_get+0x32>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   26582:	ea53 0002 	orrs.w	r0, r3, r2
   26586:	d00a      	beq.n	2659e <z_impl_k_queue_get+0x66>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   26588:	9200      	str	r2, [sp, #0]
   2658a:	9301      	str	r3, [sp, #4]
   2658c:	4672      	mov	r2, lr
   2658e:	4670      	mov	r0, lr
   26590:	f000 fbc8 	bl	26d24 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   26594:	b948      	cbnz	r0, 265aa <z_impl_k_queue_get+0x72>
   26596:	4b06      	ldr	r3, [pc, #24]	; (265b0 <z_impl_k_queue_get+0x78>)
   26598:	689b      	ldr	r3, [r3, #8]
   2659a:	6958      	ldr	r0, [r3, #20]
   2659c:	e7ec      	b.n	26578 <z_impl_k_queue_get+0x40>
   2659e:	f381 8811 	msr	BASEPRI, r1
   265a2:	f3bf 8f6f 	isb	sy
		return NULL;
   265a6:	2000      	movs	r0, #0
   265a8:	e7e6      	b.n	26578 <z_impl_k_queue_get+0x40>
	return (ret != 0) ? NULL : _current->base.swap_data;
   265aa:	2000      	movs	r0, #0
   265ac:	e7e4      	b.n	26578 <z_impl_k_queue_get+0x40>
   265ae:	bf00      	nop
   265b0:	20009070 	.word	0x20009070

000265b4 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   265b4:	b538      	push	{r3, r4, r5, lr}
   265b6:	4604      	mov	r4, r0
	__asm__ volatile(
   265b8:	f04f 0340 	mov.w	r3, #64	; 0x40
   265bc:	f3ef 8511 	mrs	r5, BASEPRI
   265c0:	f383 8812 	msr	BASEPRI_MAX, r3
   265c4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   265c8:	f00a fa38 	bl	30a3c <z_unpend_first_thread>

	if (thread != NULL) {
   265cc:	b148      	cbz	r0, 265e2 <z_impl_k_sem_give+0x2e>
   265ce:	2200      	movs	r2, #0
   265d0:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   265d4:	f00a f97d 	bl	308d2 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   265d8:	4629      	mov	r1, r5
   265da:	4809      	ldr	r0, [pc, #36]	; (26600 <z_impl_k_sem_give+0x4c>)
   265dc:	f000 fa3e 	bl	26a5c <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   265e0:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   265e2:	68a3      	ldr	r3, [r4, #8]
   265e4:	68e2      	ldr	r2, [r4, #12]
   265e6:	4293      	cmp	r3, r2
   265e8:	d008      	beq.n	265fc <z_impl_k_sem_give+0x48>
   265ea:	2201      	movs	r2, #1
   265ec:	4413      	add	r3, r2
   265ee:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   265f0:	2102      	movs	r1, #2
   265f2:	f104 0010 	add.w	r0, r4, #16
   265f6:	f00a fce6 	bl	30fc6 <z_handle_obj_poll_events>
}
   265fa:	e7ed      	b.n	265d8 <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   265fc:	2200      	movs	r2, #0
   265fe:	e7f5      	b.n	265ec <z_impl_k_sem_give+0x38>
   26600:	2000909c 	.word	0x2000909c

00026604 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   26604:	b510      	push	{r4, lr}
   26606:	b082      	sub	sp, #8
   26608:	f04f 0440 	mov.w	r4, #64	; 0x40
   2660c:	f3ef 8111 	mrs	r1, BASEPRI
   26610:	f384 8812 	msr	BASEPRI_MAX, r4
   26614:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   26618:	6884      	ldr	r4, [r0, #8]
   2661a:	b144      	cbz	r4, 2662e <z_impl_k_sem_take+0x2a>
		sem->count--;
   2661c:	3c01      	subs	r4, #1
   2661e:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   26620:	f381 8811 	msr	BASEPRI, r1
   26624:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   26628:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   2662a:	b002      	add	sp, #8
   2662c:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2662e:	ea53 0402 	orrs.w	r4, r3, r2
   26632:	d006      	beq.n	26642 <z_impl_k_sem_take+0x3e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   26634:	9200      	str	r2, [sp, #0]
   26636:	9301      	str	r3, [sp, #4]
   26638:	4602      	mov	r2, r0
   2663a:	4805      	ldr	r0, [pc, #20]	; (26650 <z_impl_k_sem_take+0x4c>)
   2663c:	f000 fb72 	bl	26d24 <z_pend_curr>
	return ret;
   26640:	e7f3      	b.n	2662a <z_impl_k_sem_take+0x26>
   26642:	f381 8811 	msr	BASEPRI, r1
   26646:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   2664a:	f06f 000f 	mvn.w	r0, #15
   2664e:	e7ec      	b.n	2662a <z_impl_k_sem_take+0x26>
   26650:	2000909c 	.word	0x2000909c

00026654 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   26654:	b510      	push	{r4, lr}
   26656:	b084      	sub	sp, #16
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   26658:	4b08      	ldr	r3, [pc, #32]	; (2667c <k_sys_work_q_init+0x28>)
   2665a:	9302      	str	r3, [sp, #8]
   2665c:	2400      	movs	r4, #0
   2665e:	f88d 400c 	strb.w	r4, [sp, #12]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   26662:	ab02      	add	r3, sp, #8
   26664:	9300      	str	r3, [sp, #0]
   26666:	f04f 33ff 	mov.w	r3, #4294967295
   2666a:	f44f 6200 	mov.w	r2, #2048	; 0x800
   2666e:	4904      	ldr	r1, [pc, #16]	; (26680 <k_sys_work_q_init+0x2c>)
   26670:	4804      	ldr	r0, [pc, #16]	; (26684 <k_sys_work_q_init+0x30>)
   26672:	f000 f929 	bl	268c8 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   26676:	4620      	mov	r0, r4
   26678:	b004      	add	sp, #16
   2667a:	bd10      	pop	{r4, pc}
   2667c:	00034a30 	.word	0x00034a30
   26680:	2000be40 	.word	0x2000be40
   26684:	20007808 	.word	0x20007808

00026688 <queue_submit_locked>:
 * @retval -EBUSY if the submission was rejected (draining, plugged)
 */
static inline int queue_submit_locked(struct k_work_q *queue,
				      struct k_work *work)
{
	if (queue == NULL) {
   26688:	b370      	cbz	r0, 266e8 <queue_submit_locked+0x60>
{
   2668a:	b538      	push	{r3, r4, r5, lr}
   2668c:	460d      	mov	r5, r1
   2668e:	4604      	mov	r4, r0
		return -EINVAL;
	}

	int ret = -EBUSY;
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   26690:	4b1b      	ldr	r3, [pc, #108]	; (26700 <queue_submit_locked+0x78>)
   26692:	689b      	ldr	r3, [r3, #8]
   26694:	4283      	cmp	r3, r0
   26696:	d01b      	beq.n	266d0 <queue_submit_locked+0x48>
   26698:	2300      	movs	r3, #0
   2669a:	461a      	mov	r2, r3
	return (*flagp & BIT(bit)) != 0U;
   2669c:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
   266a0:	f3c3 0180 	ubfx	r1, r3, #2, #1
   266a4:	f3c3 00c0 	ubfx	r0, r3, #3, #1
	 * * -ENODEV if the queue isn't running.
	 * * -EBUSY if draining and not chained
	 * * -EBUSY if plugged and not draining
	 * * otherwise OK
	 */
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   266a8:	f013 0f01 	tst.w	r3, #1
   266ac:	d01f      	beq.n	266ee <queue_submit_locked+0x66>
		ret = -ENODEV;
	} else if (draining && !chained) {
   266ae:	b101      	cbz	r1, 266b2 <queue_submit_locked+0x2a>
   266b0:	b302      	cbz	r2, 266f4 <queue_submit_locked+0x6c>
		ret = -EBUSY;
	} else if (plugged && !draining) {
   266b2:	b100      	cbz	r0, 266b6 <queue_submit_locked+0x2e>
   266b4:	b309      	cbz	r1, 266fa <queue_submit_locked+0x72>
	parent->next = child;
   266b6:	2300      	movs	r3, #0
   266b8:	602b      	str	r3, [r5, #0]
	return list->tail;
   266ba:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
Z_GENLIST_APPEND(slist, snode)
   266be:	b173      	cbz	r3, 266de <queue_submit_locked+0x56>
	parent->next = child;
   266c0:	601d      	str	r5, [r3, #0]
	list->tail = node;
   266c2:	f8c4 50bc 	str.w	r5, [r4, #188]	; 0xbc
		ret = -EBUSY;
	} else {
		sys_slist_append(&queue->pending, &work->node);
		ret = 1;
		(void)notify_queue_locked(queue);
   266c6:	4620      	mov	r0, r4
   266c8:	f009 ff43 	bl	30552 <notify_queue_locked>
		ret = 1;
   266cc:	2001      	movs	r0, #1
	}

	return ret;
}
   266ce:	bd38      	pop	{r3, r4, r5, pc}
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   266d0:	f009 fdd5 	bl	3027e <k_is_in_isr>
   266d4:	b908      	cbnz	r0, 266da <queue_submit_locked+0x52>
   266d6:	2301      	movs	r3, #1
   266d8:	e7df      	b.n	2669a <queue_submit_locked+0x12>
   266da:	2300      	movs	r3, #0
   266dc:	e7dd      	b.n	2669a <queue_submit_locked+0x12>
   266de:	f8c4 50bc 	str.w	r5, [r4, #188]	; 0xbc
	list->head = node;
   266e2:	f8c4 50b8 	str.w	r5, [r4, #184]	; 0xb8
}
   266e6:	e7ee      	b.n	266c6 <queue_submit_locked+0x3e>
		return -EINVAL;
   266e8:	f06f 0015 	mvn.w	r0, #21
}
   266ec:	4770      	bx	lr
		ret = -ENODEV;
   266ee:	f06f 0012 	mvn.w	r0, #18
   266f2:	e7ec      	b.n	266ce <queue_submit_locked+0x46>
		ret = -EBUSY;
   266f4:	f06f 000f 	mvn.w	r0, #15
   266f8:	e7e9      	b.n	266ce <queue_submit_locked+0x46>
		ret = -EBUSY;
   266fa:	f06f 000f 	mvn.w	r0, #15
   266fe:	e7e6      	b.n	266ce <queue_submit_locked+0x46>
   26700:	20009070 	.word	0x20009070

00026704 <finalize_cancel_locked>:
{
   26704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26706:	4606      	mov	r6, r0
	*flagp &= ~BIT(bit);
   26708:	68c3      	ldr	r3, [r0, #12]
   2670a:	f023 0302 	bic.w	r3, r3, #2
   2670e:	60c3      	str	r3, [r0, #12]
	return list->head;
   26710:	4b13      	ldr	r3, [pc, #76]	; (26760 <finalize_cancel_locked+0x5c>)
   26712:	681d      	ldr	r5, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   26714:	b185      	cbz	r5, 26738 <finalize_cancel_locked+0x34>
	return node->next;
   26716:	682c      	ldr	r4, [r5, #0]
   26718:	b104      	cbz	r4, 2671c <finalize_cancel_locked+0x18>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2671a:	b10d      	cbz	r5, 26720 <finalize_cancel_locked+0x1c>
   2671c:	2700      	movs	r7, #0
   2671e:	e010      	b.n	26742 <finalize_cancel_locked+0x3e>
   26720:	462c      	mov	r4, r5
   26722:	e7fb      	b.n	2671c <finalize_cancel_locked+0x18>
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   26724:	462a      	mov	r2, r5
   26726:	4639      	mov	r1, r7
   26728:	480d      	ldr	r0, [pc, #52]	; (26760 <finalize_cancel_locked+0x5c>)
   2672a:	f009 fecd 	bl	304c8 <sys_slist_remove>
			k_sem_give(&wc->sem);
   2672e:	f105 0008 	add.w	r0, r5, #8
	z_impl_k_sem_give(sem);
   26732:	f7ff ff3f 	bl	265b4 <z_impl_k_sem_give>
}
   26736:	e009      	b.n	2674c <finalize_cancel_locked+0x48>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   26738:	462c      	mov	r4, r5
   2673a:	e7ef      	b.n	2671c <finalize_cancel_locked+0x18>
   2673c:	4623      	mov	r3, r4
   2673e:	4625      	mov	r5, r4
   26740:	461c      	mov	r4, r3
   26742:	b165      	cbz	r5, 2675e <finalize_cancel_locked+0x5a>
		if (wc->work == work) {
   26744:	686b      	ldr	r3, [r5, #4]
   26746:	42b3      	cmp	r3, r6
   26748:	d0ec      	beq.n	26724 <finalize_cancel_locked+0x20>
			prev = &wc->node;
   2674a:	462f      	mov	r7, r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   2674c:	2c00      	cmp	r4, #0
   2674e:	d0f5      	beq.n	2673c <finalize_cancel_locked+0x38>
	return node->next;
   26750:	6823      	ldr	r3, [r4, #0]
   26752:	2b00      	cmp	r3, #0
   26754:	d0f3      	beq.n	2673e <finalize_cancel_locked+0x3a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   26756:	2c00      	cmp	r4, #0
   26758:	d1f1      	bne.n	2673e <finalize_cancel_locked+0x3a>
   2675a:	4623      	mov	r3, r4
   2675c:	e7ef      	b.n	2673e <finalize_cancel_locked+0x3a>
}
   2675e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26760:	2000909c 	.word	0x2000909c

00026764 <init_work_cancel>:
{
   26764:	b538      	push	{r3, r4, r5, lr}
   26766:	4604      	mov	r4, r0
   26768:	460d      	mov	r5, r1
	k_sem_init(&canceler->sem, 0, 1);
   2676a:	3008      	adds	r0, #8
	return z_impl_k_sem_init(sem, initial_count, limit);
   2676c:	2201      	movs	r2, #1
   2676e:	2100      	movs	r1, #0
   26770:	f009 fe97 	bl	304a2 <z_impl_k_sem_init>
	canceler->work = work;
   26774:	6065      	str	r5, [r4, #4]
	parent->next = child;
   26776:	2300      	movs	r3, #0
   26778:	6023      	str	r3, [r4, #0]
	return list->tail;
   2677a:	4b05      	ldr	r3, [pc, #20]	; (26790 <init_work_cancel+0x2c>)
   2677c:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   2677e:	b11b      	cbz	r3, 26788 <init_work_cancel+0x24>
	parent->next = child;
   26780:	601c      	str	r4, [r3, #0]
	list->tail = node;
   26782:	4b03      	ldr	r3, [pc, #12]	; (26790 <init_work_cancel+0x2c>)
   26784:	605c      	str	r4, [r3, #4]
}
   26786:	bd38      	pop	{r3, r4, r5, pc}
   26788:	4b01      	ldr	r3, [pc, #4]	; (26790 <init_work_cancel+0x2c>)
   2678a:	605c      	str	r4, [r3, #4]
	list->head = node;
   2678c:	601c      	str	r4, [r3, #0]
}
   2678e:	e7fa      	b.n	26786 <init_work_cancel+0x22>
   26790:	2000909c 	.word	0x2000909c

00026794 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   26794:	b570      	push	{r4, r5, r6, lr}
   26796:	b084      	sub	sp, #16
   26798:	4605      	mov	r5, r0
	struct k_work_q *queue = (struct k_work_q *)workq_ptr;
   2679a:	e016      	b.n	267ca <work_queue_main+0x36>
	return (*flagp & BIT(bit)) != 0U;
   2679c:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
	*flagp &= ~BIT(bit);
   267a0:	f023 0204 	bic.w	r2, r3, #4
   267a4:	f8c5 20d0 	str.w	r2, [r5, #208]	; 0xd0
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   267a8:	f013 0f04 	tst.w	r3, #4
   267ac:	d15a      	bne.n	26864 <work_queue_main+0xd0>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   267ae:	2300      	movs	r3, #0
   267b0:	9302      	str	r3, [sp, #8]
   267b2:	f04f 32ff 	mov.w	r2, #4294967295
   267b6:	f04f 33ff 	mov.w	r3, #4294967295
   267ba:	e9cd 2300 	strd	r2, r3, [sp]
   267be:	f105 02c0 	add.w	r2, r5, #192	; 0xc0
   267c2:	4631      	mov	r1, r6
   267c4:	482e      	ldr	r0, [pc, #184]	; (26880 <work_queue_main+0xec>)
   267c6:	f000 fcef 	bl	271a8 <z_sched_wait>
	__asm__ volatile(
   267ca:	f04f 0340 	mov.w	r3, #64	; 0x40
   267ce:	f3ef 8611 	mrs	r6, BASEPRI
   267d2:	f383 8812 	msr	BASEPRI_MAX, r3
   267d6:	f3bf 8f6f 	isb	sy
   267da:	4632      	mov	r2, r6
	return list->head;
   267dc:	f8d5 40b8 	ldr.w	r4, [r5, #184]	; 0xb8
Z_GENLIST_GET(slist, snode)
   267e0:	2c00      	cmp	r4, #0
   267e2:	d0db      	beq.n	2679c <work_queue_main+0x8>
	return node->next;
   267e4:	6823      	ldr	r3, [r4, #0]
	list->head = node;
   267e6:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
	return list->tail;
   267ea:	f8d5 10bc 	ldr.w	r1, [r5, #188]	; 0xbc
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   267ee:	428c      	cmp	r4, r1
   267f0:	d035      	beq.n	2685e <work_queue_main+0xca>
	*flagp |= BIT(bit);
   267f2:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
   267f6:	f043 0302 	orr.w	r3, r3, #2
   267fa:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
   267fe:	68e3      	ldr	r3, [r4, #12]
   26800:	f043 0101 	orr.w	r1, r3, #1
   26804:	60e1      	str	r1, [r4, #12]
	*flagp &= ~BIT(bit);
   26806:	f023 0304 	bic.w	r3, r3, #4
   2680a:	f043 0301 	orr.w	r3, r3, #1
   2680e:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
   26810:	6863      	ldr	r3, [r4, #4]
	__asm__ volatile(
   26812:	f382 8811 	msr	BASEPRI, r2
   26816:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   2681a:	4620      	mov	r0, r4
   2681c:	4798      	blx	r3
	__asm__ volatile(
   2681e:	f04f 0340 	mov.w	r3, #64	; 0x40
   26822:	f3ef 8611 	mrs	r6, BASEPRI
   26826:	f383 8812 	msr	BASEPRI_MAX, r3
   2682a:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   2682e:	68e3      	ldr	r3, [r4, #12]
   26830:	f023 0301 	bic.w	r3, r3, #1
   26834:	60e3      	str	r3, [r4, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   26836:	f013 0f02 	tst.w	r3, #2
   2683a:	d11d      	bne.n	26878 <work_queue_main+0xe4>
	*flagp &= ~BIT(bit);
   2683c:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
   26840:	f023 0302 	bic.w	r3, r3, #2
   26844:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
	return (*flagp & BIT(bit)) != 0U;
   26848:	f3c3 2300 	ubfx	r3, r3, #8, #1
	__asm__ volatile(
   2684c:	f386 8811 	msr	BASEPRI, r6
   26850:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   26854:	2b00      	cmp	r3, #0
   26856:	d1b8      	bne.n	267ca <work_queue_main+0x36>
	z_impl_k_yield();
   26858:	f000 fb76 	bl	26f48 <z_impl_k_yield>
}
   2685c:	e7b5      	b.n	267ca <work_queue_main+0x36>
	list->tail = node;
   2685e:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
		if (node != NULL) {
   26862:	e7c6      	b.n	267f2 <work_queue_main+0x5e>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   26864:	f105 04c8 	add.w	r4, r5, #200	; 0xc8
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   26868:	2200      	movs	r2, #0
   2686a:	2101      	movs	r1, #1
   2686c:	4620      	mov	r0, r4
   2686e:	f00a f91b 	bl	30aa8 <z_sched_wake>
   26872:	2800      	cmp	r0, #0
   26874:	d1f8      	bne.n	26868 <work_queue_main+0xd4>
   26876:	e79a      	b.n	267ae <work_queue_main+0x1a>
			finalize_cancel_locked(work);
   26878:	4620      	mov	r0, r4
   2687a:	f7ff ff43 	bl	26704 <finalize_cancel_locked>
   2687e:	e7dd      	b.n	2683c <work_queue_main+0xa8>
   26880:	200090a4 	.word	0x200090a4

00026884 <schedule_for_queue_locked>:
 * @retval 1 to indicate successfully scheduled.
 */
static int schedule_for_queue_locked(struct k_work_q **queuep,
				     struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   26884:	b508      	push	{r3, lr}
   26886:	4684      	mov	ip, r0
   26888:	4608      	mov	r0, r1
	int ret = 1;
	struct k_work *work = &dwork->work;

	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2688a:	ea53 0102 	orrs.w	r1, r3, r2
   2688e:	d00c      	beq.n	268aa <schedule_for_queue_locked+0x26>
	*flagp |= BIT(bit);
   26890:	68c1      	ldr	r1, [r0, #12]
   26892:	f041 0108 	orr.w	r1, r1, #8
   26896:	60c1      	str	r1, [r0, #12]
		return submit_to_queue_locked(work, queuep);
	}

	flag_set(&work->flags, K_WORK_DELAYED_BIT);
	dwork->queue = *queuep;
   26898:	f8dc 1000 	ldr.w	r1, [ip]
   2689c:	6281      	str	r1, [r0, #40]	; 0x28

	/* Add timeout */
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   2689e:	4905      	ldr	r1, [pc, #20]	; (268b4 <schedule_for_queue_locked+0x30>)
   268a0:	3010      	adds	r0, #16
   268a2:	f000 fcf7 	bl	27294 <z_add_timeout>

	return ret;
   268a6:	2001      	movs	r0, #1
}
   268a8:	bd08      	pop	{r3, pc}
		return submit_to_queue_locked(work, queuep);
   268aa:	4661      	mov	r1, ip
   268ac:	f009 fe5b 	bl	30566 <submit_to_queue_locked>
   268b0:	e7fa      	b.n	268a8 <schedule_for_queue_locked+0x24>
   268b2:	bf00      	nop
   268b4:	000305c7 	.word	0x000305c7

000268b8 <k_work_submit>:
{
   268b8:	b508      	push	{r3, lr}
   268ba:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   268bc:	4801      	ldr	r0, [pc, #4]	; (268c4 <k_work_submit+0xc>)
   268be:	f009 fef3 	bl	306a8 <k_work_submit_to_queue>
}
   268c2:	bd08      	pop	{r3, pc}
   268c4:	20007808 	.word	0x20007808

000268c8 <k_work_queue_start>:
{
   268c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   268ca:	b089      	sub	sp, #36	; 0x24
   268cc:	4604      	mov	r4, r0
   268ce:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	list->head = NULL;
   268d0:	2000      	movs	r0, #0
   268d2:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
	list->tail = NULL;
   268d6:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
   268da:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
	list->head = (sys_dnode_t *)list;
   268de:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	list->tail = (sys_dnode_t *)list;
   268e2:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
   268e6:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
	list->head = (sys_dnode_t *)list;
   268ea:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
	list->tail = (sys_dnode_t *)list;
   268ee:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
	if ((cfg != NULL) && cfg->no_yield) {
   268f2:	b1fd      	cbz	r5, 26934 <k_work_queue_start+0x6c>
   268f4:	7928      	ldrb	r0, [r5, #4]
   268f6:	b9f8      	cbnz	r0, 26938 <k_work_queue_start+0x70>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   268f8:	2001      	movs	r0, #1
	*flagp = flags;
   268fa:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   268fe:	f04f 36ff 	mov.w	r6, #4294967295
   26902:	f04f 37ff 	mov.w	r7, #4294967295
   26906:	e9cd 6706 	strd	r6, r7, [sp, #24]
   2690a:	2000      	movs	r0, #0
   2690c:	9004      	str	r0, [sp, #16]
   2690e:	9303      	str	r3, [sp, #12]
   26910:	9002      	str	r0, [sp, #8]
   26912:	9001      	str	r0, [sp, #4]
   26914:	9400      	str	r4, [sp, #0]
   26916:	4b0a      	ldr	r3, [pc, #40]	; (26940 <k_work_queue_start+0x78>)
   26918:	4620      	mov	r0, r4
   2691a:	f009 fcc7 	bl	302ac <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   2691e:	b125      	cbz	r5, 2692a <k_work_queue_start+0x62>
   26920:	6829      	ldr	r1, [r5, #0]
   26922:	b111      	cbz	r1, 2692a <k_work_queue_start+0x62>
	return z_impl_k_thread_name_set(thread, str);
   26924:	4620      	mov	r0, r4
   26926:	f7ff fc59 	bl	261dc <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   2692a:	4620      	mov	r0, r4
   2692c:	f009 fcaf 	bl	3028e <z_impl_k_thread_start>
}
   26930:	b009      	add	sp, #36	; 0x24
   26932:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t flags = K_WORK_QUEUE_STARTED;
   26934:	2001      	movs	r0, #1
   26936:	e7e0      	b.n	268fa <k_work_queue_start+0x32>
		flags |= K_WORK_QUEUE_NO_YIELD;
   26938:	f240 1001 	movw	r0, #257	; 0x101
   2693c:	e7dd      	b.n	268fa <k_work_queue_start+0x32>
   2693e:	bf00      	nop
   26940:	00026795 	.word	0x00026795

00026944 <k_work_schedule>:
	return ret;
}

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   26944:	b508      	push	{r3, lr}
   26946:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   26948:	4801      	ldr	r0, [pc, #4]	; (26950 <k_work_schedule+0xc>)
   2694a:	f009 fed9 	bl	30700 <k_work_schedule_for_queue>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule, dwork, delay, ret);

	return ret;
}
   2694e:	bd08      	pop	{r3, pc}
   26950:	20007808 	.word	0x20007808

00026954 <k_work_reschedule>:
	return ret;
}

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   26954:	b508      	push	{r3, lr}
   26956:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   26958:	4801      	ldr	r0, [pc, #4]	; (26960 <k_work_reschedule+0xc>)
   2695a:	f009 feeb 	bl	30734 <k_work_reschedule_for_queue>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule, dwork, delay, ret);

	return ret;
}
   2695e:	bd08      	pop	{r3, pc}
   26960:	20007808 	.word	0x20007808

00026964 <sliceable>:


static inline int is_preempt(struct k_thread *thread)
{
	/* explanation in kernel_struct.h */
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   26964:	89c3      	ldrh	r3, [r0, #14]
static inline bool sliceable(struct k_thread *thread)
{
	bool ret = is_preempt(thread)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_idle_thread_object(thread);
   26966:	2b7f      	cmp	r3, #127	; 0x7f
   26968:	d80e      	bhi.n	26988 <sliceable+0x24>
	uint8_t state = thread->base.thread_state;
   2696a:	7b43      	ldrb	r3, [r0, #13]
		&& !z_is_thread_prevented_from_running(thread)
   2696c:	f013 0f1f 	tst.w	r3, #31
   26970:	d10c      	bne.n	2698c <sliceable+0x28>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   26972:	f990 200e 	ldrsb.w	r2, [r0, #14]
   26976:	4b08      	ldr	r3, [pc, #32]	; (26998 <sliceable+0x34>)
   26978:	681b      	ldr	r3, [r3, #0]
   2697a:	429a      	cmp	r2, r3
   2697c:	db08      	blt.n	26990 <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
   2697e:	4b07      	ldr	r3, [pc, #28]	; (2699c <sliceable+0x38>)
   26980:	4298      	cmp	r0, r3
   26982:	d007      	beq.n	26994 <sliceable+0x30>
   26984:	2001      	movs	r0, #1
   26986:	4770      	bx	lr
   26988:	2000      	movs	r0, #0
   2698a:	4770      	bx	lr
   2698c:	2000      	movs	r0, #0
   2698e:	4770      	bx	lr
   26990:	2000      	movs	r0, #0
   26992:	4770      	bx	lr
   26994:	2000      	movs	r0, #0
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
   26996:	4770      	bx	lr
   26998:	200090a8 	.word	0x200090a8
   2699c:	20007698 	.word	0x20007698

000269a0 <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   269a0:	f1b3 3fff 	cmp.w	r3, #4294967295
   269a4:	bf08      	it	eq
   269a6:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   269aa:	d100      	bne.n	269ae <add_thread_timeout+0xe>
   269ac:	4770      	bx	lr
{
   269ae:	b508      	push	{r3, lr}
   269b0:	4902      	ldr	r1, [pc, #8]	; (269bc <add_thread_timeout+0x1c>)
   269b2:	3018      	adds	r0, #24
   269b4:	f000 fc6e 	bl	27294 <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
   269b8:	bd08      	pop	{r3, pc}
   269ba:	bf00      	nop
   269bc:	0003090b 	.word	0x0003090b

000269c0 <z_reset_time_slice>:
{
   269c0:	b510      	push	{r4, lr}
	int ret = slice_ticks;
   269c2:	4b07      	ldr	r3, [pc, #28]	; (269e0 <z_reset_time_slice+0x20>)
   269c4:	681c      	ldr	r4, [r3, #0]
	if (slice_time(curr) != 0) {
   269c6:	b904      	cbnz	r4, 269ca <z_reset_time_slice+0xa>
}
   269c8:	bd10      	pop	{r4, pc}
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   269ca:	f7fb ff59 	bl	22880 <sys_clock_elapsed>
   269ce:	4404      	add	r4, r0
   269d0:	4b04      	ldr	r3, [pc, #16]	; (269e4 <z_reset_time_slice+0x24>)
   269d2:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   269d4:	2100      	movs	r1, #0
   269d6:	4b02      	ldr	r3, [pc, #8]	; (269e0 <z_reset_time_slice+0x20>)
   269d8:	6818      	ldr	r0, [r3, #0]
   269da:	f00a f8df 	bl	30b9c <z_set_timeout_expiry>
}
   269de:	e7f3      	b.n	269c8 <z_reset_time_slice+0x8>
   269e0:	200090ac 	.word	0x200090ac
   269e4:	20009070 	.word	0x20009070

000269e8 <k_sched_time_slice_set>:
{
   269e8:	b570      	push	{r4, r5, r6, lr}
   269ea:	4604      	mov	r4, r0
   269ec:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
   269ee:	2300      	movs	r3, #0
	__asm__ volatile(
   269f0:	f04f 0240 	mov.w	r2, #64	; 0x40
   269f4:	f3ef 8511 	mrs	r5, BASEPRI
   269f8:	f382 8812 	msr	BASEPRI_MAX, r2
   269fc:	f3bf 8f6f 	isb	sy
	z_spin_lock_set_owner(l);
#if defined(CONFIG_SPIN_LOCK_TIME_LIMIT) && (CONFIG_SPIN_LOCK_TIME_LIMIT != 0)
	l->lock_time = sys_clock_cycle_get_32();
#endif /* CONFIG_SPIN_LOCK_TIME_LIMIT */
#endif/* CONFIG_SPIN_VALIDATE */
	return k;
   26a00:	e00e      	b.n	26a20 <k_sched_time_slice_set+0x38>
			slice_ticks = MAX(2, slice_ticks);
   26a02:	2802      	cmp	r0, #2
   26a04:	bfb8      	it	lt
   26a06:	2002      	movlt	r0, #2
   26a08:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   26a0a:	4b11      	ldr	r3, [pc, #68]	; (26a50 <k_sched_time_slice_set+0x68>)
   26a0c:	601e      	str	r6, [r3, #0]
		z_reset_time_slice(_current);
   26a0e:	4b11      	ldr	r3, [pc, #68]	; (26a54 <k_sched_time_slice_set+0x6c>)
   26a10:	6898      	ldr	r0, [r3, #8]
   26a12:	f7ff ffd5 	bl	269c0 <z_reset_time_slice>
	__asm__ volatile(
   26a16:	f385 8811 	msr	BASEPRI, r5
   26a1a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   26a1e:	2301      	movs	r3, #1
   26a20:	b9a3      	cbnz	r3, 26a4c <k_sched_time_slice_set+0x64>
		_current_cpu->slice_ticks = 0;
   26a22:	4b0c      	ldr	r3, [pc, #48]	; (26a54 <k_sched_time_slice_set+0x6c>)
   26a24:	2200      	movs	r2, #0
   26a26:	611a      	str	r2, [r3, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
   26a28:	0c61      	lsrs	r1, r4, #17
   26a2a:	03e0      	lsls	r0, r4, #15
   26a2c:	f240 33e7 	movw	r3, #999	; 0x3e7
   26a30:	18c0      	adds	r0, r0, r3
   26a32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   26a36:	f04f 0300 	mov.w	r3, #0
   26a3a:	f141 0100 	adc.w	r1, r1, #0
   26a3e:	f7d9 fb5f 	bl	100 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   26a42:	4b05      	ldr	r3, [pc, #20]	; (26a58 <k_sched_time_slice_set+0x70>)
   26a44:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   26a46:	2c00      	cmp	r4, #0
   26a48:	dcdb      	bgt.n	26a02 <k_sched_time_slice_set+0x1a>
   26a4a:	e7de      	b.n	26a0a <k_sched_time_slice_set+0x22>
}
   26a4c:	bd70      	pop	{r4, r5, r6, pc}
   26a4e:	bf00      	nop
   26a50:	200090a8 	.word	0x200090a8
   26a54:	20009070 	.word	0x20009070
   26a58:	200090ac 	.word	0x200090ac

00026a5c <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   26a5c:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
   26a5e:	460b      	mov	r3, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   26a60:	b959      	cbnz	r1, 26a7a <z_reschedule+0x1e>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   26a62:	f3ef 8205 	mrs	r2, IPSR
   26a66:	b942      	cbnz	r2, 26a7a <z_reschedule+0x1e>
	new_thread = _kernel.ready_q.cache;
   26a68:	4a06      	ldr	r2, [pc, #24]	; (26a84 <z_reschedule+0x28>)
   26a6a:	69d0      	ldr	r0, [r2, #28]
	return new_thread != _current;
   26a6c:	6892      	ldr	r2, [r2, #8]
	if (resched(key.key) && need_swap()) {
   26a6e:	4290      	cmp	r0, r2
   26a70:	d003      	beq.n	26a7a <z_reschedule+0x1e>
	ret = arch_swap(key);
   26a72:	4608      	mov	r0, r1
   26a74:	f7ee f99a 	bl	14dac <arch_swap>
		z_swap(lock, key);
   26a78:	e003      	b.n	26a82 <z_reschedule+0x26>
   26a7a:	f383 8811 	msr	BASEPRI, r3
   26a7e:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
   26a82:	bd08      	pop	{r3, pc}
   26a84:	20009070 	.word	0x20009070

00026a88 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
   26a88:	2300      	movs	r3, #0
	__asm__ volatile(
   26a8a:	f04f 0240 	mov.w	r2, #64	; 0x40
   26a8e:	f3ef 8111 	mrs	r1, BASEPRI
   26a92:	f382 8812 	msr	BASEPRI_MAX, r2
   26a96:	f3bf 8f6f 	isb	sy
   26a9a:	e009      	b.n	26ab0 <k_sched_lock+0x28>
	--_current->base.sched_locked;
   26a9c:	4b06      	ldr	r3, [pc, #24]	; (26ab8 <k_sched_lock+0x30>)
   26a9e:	689a      	ldr	r2, [r3, #8]
   26aa0:	7bd3      	ldrb	r3, [r2, #15]
   26aa2:	3b01      	subs	r3, #1
   26aa4:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   26aa6:	f381 8811 	msr	BASEPRI, r1
   26aaa:	f3bf 8f6f 	isb	sy
   26aae:	2301      	movs	r3, #1
   26ab0:	2b00      	cmp	r3, #0
   26ab2:	d0f3      	beq.n	26a9c <k_sched_lock+0x14>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   26ab4:	4770      	bx	lr
   26ab6:	bf00      	nop
   26ab8:	20009070 	.word	0x20009070

00026abc <update_cache>:
{
   26abc:	b538      	push	{r3, r4, r5, lr}
   26abe:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
   26ac0:	4810      	ldr	r0, [pc, #64]	; (26b04 <update_cache+0x48>)
   26ac2:	f009 feff 	bl	308c4 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   26ac6:	4605      	mov	r5, r0
   26ac8:	b170      	cbz	r0, 26ae8 <update_cache+0x2c>
	if (preempt_ok != 0) {
   26aca:	b984      	cbnz	r4, 26aee <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
   26acc:	4b0e      	ldr	r3, [pc, #56]	; (26b08 <update_cache+0x4c>)
   26ace:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
   26ad0:	7b5a      	ldrb	r2, [r3, #13]
   26ad2:	f012 0f1f 	tst.w	r2, #31
   26ad6:	d10a      	bne.n	26aee <update_cache+0x32>
	return node->next != NULL;
   26ad8:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   26ada:	b942      	cbnz	r2, 26aee <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   26adc:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
   26ade:	2a7f      	cmp	r2, #127	; 0x7f
   26ae0:	d905      	bls.n	26aee <update_cache+0x32>
		_kernel.ready_q.cache = _current;
   26ae2:	4a09      	ldr	r2, [pc, #36]	; (26b08 <update_cache+0x4c>)
   26ae4:	61d3      	str	r3, [r2, #28]
   26ae6:	e00b      	b.n	26b00 <update_cache+0x44>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   26ae8:	4b07      	ldr	r3, [pc, #28]	; (26b08 <update_cache+0x4c>)
   26aea:	68dd      	ldr	r5, [r3, #12]
   26aec:	e7ed      	b.n	26aca <update_cache+0xe>
		if (thread != _current) {
   26aee:	4b06      	ldr	r3, [pc, #24]	; (26b08 <update_cache+0x4c>)
   26af0:	689b      	ldr	r3, [r3, #8]
   26af2:	42ab      	cmp	r3, r5
   26af4:	d002      	beq.n	26afc <update_cache+0x40>
			z_reset_time_slice(thread);
   26af6:	4628      	mov	r0, r5
   26af8:	f7ff ff62 	bl	269c0 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   26afc:	4b02      	ldr	r3, [pc, #8]	; (26b08 <update_cache+0x4c>)
   26afe:	61dd      	str	r5, [r3, #28]
}
   26b00:	bd38      	pop	{r3, r4, r5, pc}
   26b02:	bf00      	nop
   26b04:	20009090 	.word	0x20009090
   26b08:	20009070 	.word	0x20009070

00026b0c <move_thread_to_end_of_prio_q>:
{
   26b0c:	b538      	push	{r3, r4, r5, lr}
   26b0e:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
   26b10:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   26b12:	f990 300d 	ldrsb.w	r3, [r0, #13]
   26b16:	2b00      	cmp	r3, #0
   26b18:	db0a      	blt.n	26b30 <move_thread_to_end_of_prio_q+0x24>
	thread->base.thread_state |= _THREAD_QUEUED;
   26b1a:	7b6b      	ldrb	r3, [r5, #13]
   26b1c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   26b20:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   26b22:	4b1b      	ldr	r3, [pc, #108]	; (26b90 <move_thread_to_end_of_prio_q+0x84>)
   26b24:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26b28:	429c      	cmp	r4, r3
   26b2a:	d110      	bne.n	26b4e <move_thread_to_end_of_prio_q+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   26b2c:	2400      	movs	r4, #0
   26b2e:	e00e      	b.n	26b4e <move_thread_to_end_of_prio_q+0x42>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   26b30:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   26b34:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   26b36:	4601      	mov	r1, r0
   26b38:	4816      	ldr	r0, [pc, #88]	; (26b94 <move_thread_to_end_of_prio_q+0x88>)
   26b3a:	f009 fe92 	bl	30862 <z_priq_dumb_remove>
}
   26b3e:	e7ec      	b.n	26b1a <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   26b40:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
   26b42:	606b      	str	r3, [r5, #4]
	node->next = successor;
   26b44:	602c      	str	r4, [r5, #0]
	prev->next = node;
   26b46:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   26b48:	6065      	str	r5, [r4, #4]
}
   26b4a:	e017      	b.n	26b7c <move_thread_to_end_of_prio_q+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   26b4c:	2400      	movs	r4, #0
   26b4e:	b16c      	cbz	r4, 26b6c <move_thread_to_end_of_prio_q+0x60>
		if (z_sched_prio_cmp(thread, t) > 0) {
   26b50:	4621      	mov	r1, r4
   26b52:	4628      	mov	r0, r5
   26b54:	f009 fe4a 	bl	307ec <z_sched_prio_cmp>
   26b58:	2800      	cmp	r0, #0
   26b5a:	dcf1      	bgt.n	26b40 <move_thread_to_end_of_prio_q+0x34>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   26b5c:	2c00      	cmp	r4, #0
   26b5e:	d0f6      	beq.n	26b4e <move_thread_to_end_of_prio_q+0x42>
	return (node == list->tail) ? NULL : node->next;
   26b60:	4b0b      	ldr	r3, [pc, #44]	; (26b90 <move_thread_to_end_of_prio_q+0x84>)
   26b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   26b64:	429c      	cmp	r4, r3
   26b66:	d0f1      	beq.n	26b4c <move_thread_to_end_of_prio_q+0x40>
   26b68:	6824      	ldr	r4, [r4, #0]
   26b6a:	e7f0      	b.n	26b4e <move_thread_to_end_of_prio_q+0x42>
	sys_dnode_t *const tail = list->tail;
   26b6c:	4b08      	ldr	r3, [pc, #32]	; (26b90 <move_thread_to_end_of_prio_q+0x84>)
   26b6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   26b70:	f103 0120 	add.w	r1, r3, #32
   26b74:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   26b76:	606a      	str	r2, [r5, #4]
	tail->next = node;
   26b78:	6015      	str	r5, [r2, #0]
	list->tail = node;
   26b7a:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
   26b7c:	4b04      	ldr	r3, [pc, #16]	; (26b90 <move_thread_to_end_of_prio_q+0x84>)
   26b7e:	6898      	ldr	r0, [r3, #8]
   26b80:	42a8      	cmp	r0, r5
   26b82:	bf14      	ite	ne
   26b84:	2000      	movne	r0, #0
   26b86:	2001      	moveq	r0, #1
   26b88:	f7ff ff98 	bl	26abc <update_cache>
}
   26b8c:	bd38      	pop	{r3, r4, r5, pc}
   26b8e:	bf00      	nop
   26b90:	20009070 	.word	0x20009070
   26b94:	20009090 	.word	0x20009090

00026b98 <slice_expired_locked>:
{
   26b98:	b538      	push	{r3, r4, r5, lr}
   26b9a:	4604      	mov	r4, r0
	struct k_thread *curr = _current;
   26b9c:	4b07      	ldr	r3, [pc, #28]	; (26bbc <slice_expired_locked+0x24>)
   26b9e:	689d      	ldr	r5, [r3, #8]
	uint8_t state = thread->base.thread_state;
   26ba0:	7b6b      	ldrb	r3, [r5, #13]
	if (!z_is_thread_prevented_from_running(curr)) {
   26ba2:	f013 0f1f 	tst.w	r3, #31
   26ba6:	d004      	beq.n	26bb2 <slice_expired_locked+0x1a>
	z_reset_time_slice(curr);
   26ba8:	4628      	mov	r0, r5
   26baa:	f7ff ff09 	bl	269c0 <z_reset_time_slice>
}
   26bae:	4620      	mov	r0, r4
   26bb0:	bd38      	pop	{r3, r4, r5, pc}
		move_thread_to_end_of_prio_q(curr);
   26bb2:	4628      	mov	r0, r5
   26bb4:	f7ff ffaa 	bl	26b0c <move_thread_to_end_of_prio_q>
   26bb8:	e7f6      	b.n	26ba8 <slice_expired_locked+0x10>
   26bba:	bf00      	nop
   26bbc:	20009070 	.word	0x20009070

00026bc0 <z_time_slice>:
{
   26bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26bc2:	4605      	mov	r5, r0
	__asm__ volatile(
   26bc4:	f04f 0340 	mov.w	r3, #64	; 0x40
   26bc8:	f3ef 8611 	mrs	r6, BASEPRI
   26bcc:	f383 8812 	msr	BASEPRI_MAX, r3
   26bd0:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   26bd4:	4b15      	ldr	r3, [pc, #84]	; (26c2c <z_time_slice+0x6c>)
   26bd6:	6898      	ldr	r0, [r3, #8]
   26bd8:	4b15      	ldr	r3, [pc, #84]	; (26c30 <z_time_slice+0x70>)
   26bda:	681b      	ldr	r3, [r3, #0]
   26bdc:	4298      	cmp	r0, r3
   26bde:	d011      	beq.n	26c04 <z_time_slice+0x44>
   26be0:	4634      	mov	r4, r6
	pending_current = NULL;
   26be2:	4b13      	ldr	r3, [pc, #76]	; (26c30 <z_time_slice+0x70>)
   26be4:	2200      	movs	r2, #0
   26be6:	601a      	str	r2, [r3, #0]
	int ret = slice_ticks;
   26be8:	4b12      	ldr	r3, [pc, #72]	; (26c34 <z_time_slice+0x74>)
   26bea:	681b      	ldr	r3, [r3, #0]
	if (slice_time(_current) && sliceable(_current)) {
   26bec:	b1b3      	cbz	r3, 26c1c <z_time_slice+0x5c>
   26bee:	f7ff feb9 	bl	26964 <sliceable>
   26bf2:	b198      	cbz	r0, 26c1c <z_time_slice+0x5c>
		if (ticks >= _current_cpu->slice_ticks) {
   26bf4:	4b0d      	ldr	r3, [pc, #52]	; (26c2c <z_time_slice+0x6c>)
   26bf6:	691b      	ldr	r3, [r3, #16]
   26bf8:	42ab      	cmp	r3, r5
   26bfa:	dd0a      	ble.n	26c12 <z_time_slice+0x52>
			_current_cpu->slice_ticks -= ticks;
   26bfc:	1b5b      	subs	r3, r3, r5
   26bfe:	4a0b      	ldr	r2, [pc, #44]	; (26c2c <z_time_slice+0x6c>)
   26c00:	6113      	str	r3, [r2, #16]
   26c02:	e00e      	b.n	26c22 <z_time_slice+0x62>
		z_reset_time_slice(_current);
   26c04:	f7ff fedc 	bl	269c0 <z_reset_time_slice>
	__asm__ volatile(
   26c08:	f386 8811 	msr	BASEPRI, r6
   26c0c:	f3bf 8f6f 	isb	sy
		return;
   26c10:	e00b      	b.n	26c2a <z_time_slice+0x6a>
			key = slice_expired_locked(key);
   26c12:	4630      	mov	r0, r6
   26c14:	f7ff ffc0 	bl	26b98 <slice_expired_locked>
   26c18:	4604      	mov	r4, r0
   26c1a:	e002      	b.n	26c22 <z_time_slice+0x62>
		_current_cpu->slice_ticks = 0;
   26c1c:	4b03      	ldr	r3, [pc, #12]	; (26c2c <z_time_slice+0x6c>)
   26c1e:	2200      	movs	r2, #0
   26c20:	611a      	str	r2, [r3, #16]
   26c22:	f384 8811 	msr	BASEPRI, r4
   26c26:	f3bf 8f6f 	isb	sy
}
   26c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26c2c:	20009070 	.word	0x20009070
   26c30:	200090a4 	.word	0x200090a4
   26c34:	200090ac 	.word	0x200090ac

00026c38 <ready_thread>:
	return (thread->base.thread_state & state) != 0U;
   26c38:	7b42      	ldrb	r2, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   26c3a:	f990 300d 	ldrsb.w	r3, [r0, #13]
   26c3e:	2b00      	cmp	r3, #0
   26c40:	db33      	blt.n	26caa <ready_thread+0x72>
{
   26c42:	b570      	push	{r4, r5, r6, lr}
   26c44:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   26c46:	f012 0f1f 	tst.w	r2, #31
   26c4a:	d101      	bne.n	26c50 <ready_thread+0x18>
	return node->next != NULL;
   26c4c:	6986      	ldr	r6, [r0, #24]
   26c4e:	b106      	cbz	r6, 26c52 <ready_thread+0x1a>
}
   26c50:	bd70      	pop	{r4, r5, r6, pc}
	thread->base.thread_state |= _THREAD_QUEUED;
   26c52:	f062 027f 	orn	r2, r2, #127	; 0x7f
   26c56:	7342      	strb	r2, [r0, #13]
	return list->head == list;
   26c58:	4b14      	ldr	r3, [pc, #80]	; (26cac <ready_thread+0x74>)
   26c5a:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26c5e:	429d      	cmp	r5, r3
   26c60:	d108      	bne.n	26c74 <ready_thread+0x3c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   26c62:	4635      	mov	r5, r6
   26c64:	e006      	b.n	26c74 <ready_thread+0x3c>
	sys_dnode_t *const prev = successor->prev;
   26c66:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
   26c68:	6063      	str	r3, [r4, #4]
	node->next = successor;
   26c6a:	6025      	str	r5, [r4, #0]
	prev->next = node;
   26c6c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   26c6e:	606c      	str	r4, [r5, #4]
}
   26c70:	e017      	b.n	26ca2 <ready_thread+0x6a>
   26c72:	4635      	mov	r5, r6
   26c74:	b16d      	cbz	r5, 26c92 <ready_thread+0x5a>
		if (z_sched_prio_cmp(thread, t) > 0) {
   26c76:	4629      	mov	r1, r5
   26c78:	4620      	mov	r0, r4
   26c7a:	f009 fdb7 	bl	307ec <z_sched_prio_cmp>
   26c7e:	2800      	cmp	r0, #0
   26c80:	dcf1      	bgt.n	26c66 <ready_thread+0x2e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   26c82:	2d00      	cmp	r5, #0
   26c84:	d0f6      	beq.n	26c74 <ready_thread+0x3c>
	return (node == list->tail) ? NULL : node->next;
   26c86:	4b09      	ldr	r3, [pc, #36]	; (26cac <ready_thread+0x74>)
   26c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   26c8a:	429d      	cmp	r5, r3
   26c8c:	d0f1      	beq.n	26c72 <ready_thread+0x3a>
   26c8e:	682d      	ldr	r5, [r5, #0]
   26c90:	e7f0      	b.n	26c74 <ready_thread+0x3c>
	sys_dnode_t *const tail = list->tail;
   26c92:	4b06      	ldr	r3, [pc, #24]	; (26cac <ready_thread+0x74>)
   26c94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   26c96:	f103 0120 	add.w	r1, r3, #32
   26c9a:	6021      	str	r1, [r4, #0]
	node->prev = tail;
   26c9c:	6062      	str	r2, [r4, #4]
	tail->next = node;
   26c9e:	6014      	str	r4, [r2, #0]
	list->tail = node;
   26ca0:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
   26ca2:	2000      	movs	r0, #0
   26ca4:	f7ff ff0a 	bl	26abc <update_cache>
}
   26ca8:	e7d2      	b.n	26c50 <ready_thread+0x18>
   26caa:	4770      	bx	lr
   26cac:	20009070 	.word	0x20009070

00026cb0 <z_sched_start>:
{
   26cb0:	b510      	push	{r4, lr}
	__asm__ volatile(
   26cb2:	f04f 0340 	mov.w	r3, #64	; 0x40
   26cb6:	f3ef 8411 	mrs	r4, BASEPRI
   26cba:	f383 8812 	msr	BASEPRI_MAX, r3
   26cbe:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   26cc2:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
   26cc4:	f013 0f04 	tst.w	r3, #4
   26cc8:	d104      	bne.n	26cd4 <z_sched_start+0x24>
	__asm__ volatile(
   26cca:	f384 8811 	msr	BASEPRI, r4
   26cce:	f3bf 8f6f 	isb	sy
}
   26cd2:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   26cd4:	f023 0304 	bic.w	r3, r3, #4
   26cd8:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
   26cda:	f7ff ffad 	bl	26c38 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   26cde:	4621      	mov	r1, r4
   26ce0:	4801      	ldr	r0, [pc, #4]	; (26ce8 <z_sched_start+0x38>)
   26ce2:	f7ff febb 	bl	26a5c <z_reschedule>
   26ce6:	e7f4      	b.n	26cd2 <z_sched_start+0x22>
   26ce8:	200090b0 	.word	0x200090b0

00026cec <unready_thread>:
{
   26cec:	b510      	push	{r4, lr}
   26cee:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
   26cf0:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   26cf2:	f990 300d 	ldrsb.w	r3, [r0, #13]
   26cf6:	2b00      	cmp	r3, #0
   26cf8:	db08      	blt.n	26d0c <unready_thread+0x20>
	update_cache(thread == _current);
   26cfa:	4b08      	ldr	r3, [pc, #32]	; (26d1c <unready_thread+0x30>)
   26cfc:	6898      	ldr	r0, [r3, #8]
   26cfe:	42a0      	cmp	r0, r4
   26d00:	bf14      	ite	ne
   26d02:	2000      	movne	r0, #0
   26d04:	2001      	moveq	r0, #1
   26d06:	f7ff fed9 	bl	26abc <update_cache>
}
   26d0a:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   26d0c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   26d10:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   26d12:	4601      	mov	r1, r0
   26d14:	4802      	ldr	r0, [pc, #8]	; (26d20 <unready_thread+0x34>)
   26d16:	f009 fda4 	bl	30862 <z_priq_dumb_remove>
}
   26d1a:	e7ee      	b.n	26cfa <unready_thread+0xe>
   26d1c:	20009070 	.word	0x20009070
   26d20:	20009090 	.word	0x20009090

00026d24 <z_pend_curr>:
{
   26d24:	b510      	push	{r4, lr}
   26d26:	460c      	mov	r4, r1
   26d28:	4611      	mov	r1, r2
	pending_current = _current;
   26d2a:	480a      	ldr	r0, [pc, #40]	; (26d54 <z_pend_curr+0x30>)
   26d2c:	6882      	ldr	r2, [r0, #8]
   26d2e:	4b0a      	ldr	r3, [pc, #40]	; (26d58 <z_pend_curr+0x34>)
   26d30:	601a      	str	r2, [r3, #0]
	__asm__ volatile(
   26d32:	f04f 0240 	mov.w	r2, #64	; 0x40
   26d36:	f3ef 8311 	mrs	r3, BASEPRI
   26d3a:	f382 8812 	msr	BASEPRI_MAX, r2
   26d3e:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
   26d42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   26d46:	6880      	ldr	r0, [r0, #8]
   26d48:	f009 fe4e 	bl	309e8 <pend_locked>
   26d4c:	4620      	mov	r0, r4
   26d4e:	f7ee f82d 	bl	14dac <arch_swap>
}
   26d52:	bd10      	pop	{r4, pc}
   26d54:	20009070 	.word	0x20009070
   26d58:	200090a4 	.word	0x200090a4

00026d5c <z_set_prio>:
{
   26d5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26d60:	4605      	mov	r5, r0
   26d62:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
   26d64:	2300      	movs	r3, #0
   26d66:	f04f 0240 	mov.w	r2, #64	; 0x40
   26d6a:	f3ef 8611 	mrs	r6, BASEPRI
   26d6e:	f382 8812 	msr	BASEPRI_MAX, r2
   26d72:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
   26d76:	4618      	mov	r0, r3
   26d78:	e029      	b.n	26dce <z_set_prio+0x72>
	sys_dnode_t *const prev = successor->prev;
   26d7a:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   26d7c:	606b      	str	r3, [r5, #4]
	node->next = successor;
   26d7e:	602c      	str	r4, [r5, #0]
	prev->next = node;
   26d80:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   26d82:	6065      	str	r5, [r4, #4]
}
   26d84:	e017      	b.n	26db6 <z_set_prio+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   26d86:	4644      	mov	r4, r8
   26d88:	b16c      	cbz	r4, 26da6 <z_set_prio+0x4a>
		if (z_sched_prio_cmp(thread, t) > 0) {
   26d8a:	4621      	mov	r1, r4
   26d8c:	4628      	mov	r0, r5
   26d8e:	f009 fd2d 	bl	307ec <z_sched_prio_cmp>
   26d92:	2800      	cmp	r0, #0
   26d94:	dcf1      	bgt.n	26d7a <z_set_prio+0x1e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   26d96:	2c00      	cmp	r4, #0
   26d98:	d0f6      	beq.n	26d88 <z_set_prio+0x2c>
	return (node == list->tail) ? NULL : node->next;
   26d9a:	4b1d      	ldr	r3, [pc, #116]	; (26e10 <z_set_prio+0xb4>)
   26d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   26d9e:	429c      	cmp	r4, r3
   26da0:	d0f1      	beq.n	26d86 <z_set_prio+0x2a>
   26da2:	6824      	ldr	r4, [r4, #0]
   26da4:	e7f0      	b.n	26d88 <z_set_prio+0x2c>
	sys_dnode_t *const tail = list->tail;
   26da6:	4b1a      	ldr	r3, [pc, #104]	; (26e10 <z_set_prio+0xb4>)
   26da8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   26daa:	f103 0120 	add.w	r1, r3, #32
   26dae:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   26db0:	606a      	str	r2, [r5, #4]
	tail->next = node;
   26db2:	6015      	str	r5, [r2, #0]
	list->tail = node;
   26db4:	625d      	str	r5, [r3, #36]	; 0x24
			update_cache(1);
   26db6:	2001      	movs	r0, #1
   26db8:	f7ff fe80 	bl	26abc <update_cache>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   26dbc:	2001      	movs	r0, #1
   26dbe:	e001      	b.n	26dc4 <z_set_prio+0x68>
			thread->base.prio = prio;
   26dc0:	73af      	strb	r7, [r5, #14]
   26dc2:	2000      	movs	r0, #0
	__asm__ volatile(
   26dc4:	f386 8811 	msr	BASEPRI, r6
   26dc8:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   26dcc:	2301      	movs	r3, #1
   26dce:	b9e3      	cbnz	r3, 26e0a <z_set_prio+0xae>
	uint8_t state = thread->base.thread_state;
   26dd0:	7b6b      	ldrb	r3, [r5, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   26dd2:	f013 0f1f 	tst.w	r3, #31
   26dd6:	d1f3      	bne.n	26dc0 <z_set_prio+0x64>
	return node->next != NULL;
   26dd8:	f8d5 8018 	ldr.w	r8, [r5, #24]
   26ddc:	f1b8 0f00 	cmp.w	r8, #0
   26de0:	d1ee      	bne.n	26dc0 <z_set_prio+0x64>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   26de2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   26de6:	736b      	strb	r3, [r5, #13]
	_priq_run_remove(thread_runq(thread), thread);
   26de8:	f8df 9028 	ldr.w	r9, [pc, #40]	; 26e14 <z_set_prio+0xb8>
   26dec:	4629      	mov	r1, r5
   26dee:	4648      	mov	r0, r9
   26df0:	f009 fd37 	bl	30862 <z_priq_dumb_remove>
				thread->base.prio = prio;
   26df4:	73af      	strb	r7, [r5, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   26df6:	7b6b      	ldrb	r3, [r5, #13]
   26df8:	f063 037f 	orn	r3, r3, #127	; 0x7f
   26dfc:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   26dfe:	f8d9 4000 	ldr.w	r4, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26e02:	454c      	cmp	r4, r9
   26e04:	d1c0      	bne.n	26d88 <z_set_prio+0x2c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   26e06:	4644      	mov	r4, r8
   26e08:	e7be      	b.n	26d88 <z_set_prio+0x2c>
}
   26e0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   26e0e:	bf00      	nop
   26e10:	20009070 	.word	0x20009070
   26e14:	20009090 	.word	0x20009090

00026e18 <z_impl_k_thread_suspend>:
{
   26e18:	b538      	push	{r3, r4, r5, lr}
   26e1a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   26e1c:	3018      	adds	r0, #24
   26e1e:	f009 fe88 	bl	30b32 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
   26e22:	2300      	movs	r3, #0
	__asm__ volatile(
   26e24:	f04f 0240 	mov.w	r2, #64	; 0x40
   26e28:	f3ef 8511 	mrs	r5, BASEPRI
   26e2c:	f382 8812 	msr	BASEPRI_MAX, r2
   26e30:	f3bf 8f6f 	isb	sy
   26e34:	e010      	b.n	26e58 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
   26e36:	7b63      	ldrb	r3, [r4, #13]
   26e38:	f043 0310 	orr.w	r3, r3, #16
   26e3c:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   26e3e:	4b11      	ldr	r3, [pc, #68]	; (26e84 <z_impl_k_thread_suspend+0x6c>)
   26e40:	6898      	ldr	r0, [r3, #8]
   26e42:	42a0      	cmp	r0, r4
   26e44:	bf14      	ite	ne
   26e46:	2000      	movne	r0, #0
   26e48:	2001      	moveq	r0, #1
   26e4a:	f7ff fe37 	bl	26abc <update_cache>
	__asm__ volatile(
   26e4e:	f385 8811 	msr	BASEPRI, r5
   26e52:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   26e56:	2301      	movs	r3, #1
   26e58:	b963      	cbnz	r3, 26e74 <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
   26e5a:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
   26e5c:	f994 300d 	ldrsb.w	r3, [r4, #13]
   26e60:	2b00      	cmp	r3, #0
   26e62:	dae8      	bge.n	26e36 <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   26e64:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   26e68:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   26e6a:	4621      	mov	r1, r4
   26e6c:	4806      	ldr	r0, [pc, #24]	; (26e88 <z_impl_k_thread_suspend+0x70>)
   26e6e:	f009 fcf8 	bl	30862 <z_priq_dumb_remove>
}
   26e72:	e7e0      	b.n	26e36 <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
   26e74:	4b03      	ldr	r3, [pc, #12]	; (26e84 <z_impl_k_thread_suspend+0x6c>)
   26e76:	689b      	ldr	r3, [r3, #8]
   26e78:	42a3      	cmp	r3, r4
   26e7a:	d000      	beq.n	26e7e <z_impl_k_thread_suspend+0x66>
}
   26e7c:	bd38      	pop	{r3, r4, r5, pc}
		z_reschedule_unlocked();
   26e7e:	f009 fce4 	bl	3084a <z_reschedule_unlocked>
}
   26e82:	e7fb      	b.n	26e7c <z_impl_k_thread_suspend+0x64>
   26e84:	20009070 	.word	0x20009070
   26e88:	20009090 	.word	0x20009090

00026e8c <k_sched_unlock>:

void k_sched_unlock(void)
{
   26e8c:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
   26e8e:	2300      	movs	r3, #0
	__asm__ volatile(
   26e90:	f04f 0240 	mov.w	r2, #64	; 0x40
   26e94:	f3ef 8411 	mrs	r4, BASEPRI
   26e98:	f382 8812 	msr	BASEPRI_MAX, r2
   26e9c:	f3bf 8f6f 	isb	sy
   26ea0:	e00c      	b.n	26ebc <k_sched_unlock+0x30>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
   26ea2:	4b09      	ldr	r3, [pc, #36]	; (26ec8 <k_sched_unlock+0x3c>)
   26ea4:	689a      	ldr	r2, [r3, #8]
   26ea6:	7bd3      	ldrb	r3, [r2, #15]
   26ea8:	3301      	adds	r3, #1
   26eaa:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   26eac:	2000      	movs	r0, #0
   26eae:	f7ff fe05 	bl	26abc <update_cache>
	__asm__ volatile(
   26eb2:	f384 8811 	msr	BASEPRI, r4
   26eb6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   26eba:	2301      	movs	r3, #1
   26ebc:	2b00      	cmp	r3, #0
   26ebe:	d0f0      	beq.n	26ea2 <k_sched_unlock+0x16>
	LOG_DBG("scheduler unlocked (%p:%d)",
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
   26ec0:	f009 fcc3 	bl	3084a <z_reschedule_unlocked>
}
   26ec4:	bd10      	pop	{r4, pc}
   26ec6:	bf00      	nop
   26ec8:	20009070 	.word	0x20009070

00026ecc <end_thread>:
static void end_thread(struct k_thread *thread)
{
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
   26ecc:	7b43      	ldrb	r3, [r0, #13]
   26ece:	f013 0f08 	tst.w	r3, #8
   26ed2:	d12a      	bne.n	26f2a <end_thread+0x5e>
{
   26ed4:	b510      	push	{r4, lr}
   26ed6:	4604      	mov	r4, r0
		thread->base.thread_state |= _THREAD_DEAD;
   26ed8:	f043 0208 	orr.w	r2, r3, #8
   26edc:	7342      	strb	r2, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
   26ede:	f023 0220 	bic.w	r2, r3, #32
   26ee2:	f042 0208 	orr.w	r2, r2, #8
   26ee6:	7342      	strb	r2, [r0, #13]
		if (z_is_thread_queued(thread)) {
   26ee8:	f012 0f80 	tst.w	r2, #128	; 0x80
   26eec:	d113      	bne.n	26f16 <end_thread+0x4a>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
   26eee:	68a3      	ldr	r3, [r4, #8]
   26ef0:	b113      	cbz	r3, 26ef8 <end_thread+0x2c>
			unpend_thread_no_timeout(thread);
   26ef2:	4620      	mov	r0, r4
   26ef4:	f009 fcbd 	bl	30872 <unpend_thread_no_timeout>
   26ef8:	f104 0018 	add.w	r0, r4, #24
   26efc:	f009 fe19 	bl	30b32 <z_abort_timeout>
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
   26f00:	f104 0058 	add.w	r0, r4, #88	; 0x58
   26f04:	f009 fd30 	bl	30968 <unpend_all>
		update_cache(1);
   26f08:	2001      	movs	r0, #1
   26f0a:	f7ff fdd7 	bl	26abc <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
   26f0e:	4620      	mov	r0, r4
   26f10:	f7ff f944 	bl	2619c <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
   26f14:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   26f16:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   26f1a:	f043 0308 	orr.w	r3, r3, #8
   26f1e:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   26f20:	4601      	mov	r1, r0
   26f22:	4802      	ldr	r0, [pc, #8]	; (26f2c <end_thread+0x60>)
   26f24:	f009 fc9d 	bl	30862 <z_priq_dumb_remove>
}
   26f28:	e7e1      	b.n	26eee <end_thread+0x22>
   26f2a:	4770      	bx	lr
   26f2c:	20009090 	.word	0x20009090

00026f30 <z_sched_init>:
{
   26f30:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
   26f32:	4804      	ldr	r0, [pc, #16]	; (26f44 <z_sched_init+0x14>)
   26f34:	f009 fdb4 	bl	30aa0 <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   26f38:	2100      	movs	r1, #0
   26f3a:	4608      	mov	r0, r1
   26f3c:	f7ff fd54 	bl	269e8 <k_sched_time_slice_set>
}
   26f40:	bd08      	pop	{r3, pc}
   26f42:	bf00      	nop
   26f44:	2000908c 	.word	0x2000908c

00026f48 <z_impl_k_yield>:
{
   26f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   26f4a:	f04f 0340 	mov.w	r3, #64	; 0x40
   26f4e:	f3ef 8611 	mrs	r6, BASEPRI
   26f52:	f383 8812 	msr	BASEPRI_MAX, r3
   26f56:	f3bf 8f6f 	isb	sy
		dequeue_thread(_current);
   26f5a:	4c1d      	ldr	r4, [pc, #116]	; (26fd0 <z_impl_k_yield+0x88>)
   26f5c:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   26f5e:	7b4b      	ldrb	r3, [r1, #13]
   26f60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   26f64:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   26f66:	f104 0720 	add.w	r7, r4, #32
   26f6a:	4638      	mov	r0, r7
   26f6c:	f009 fc79 	bl	30862 <z_priq_dumb_remove>
	queue_thread(_current);
   26f70:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   26f72:	7b6b      	ldrb	r3, [r5, #13]
   26f74:	f063 037f 	orn	r3, r3, #127	; 0x7f
   26f78:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   26f7a:	6a24      	ldr	r4, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26f7c:	42bc      	cmp	r4, r7
   26f7e:	d108      	bne.n	26f92 <z_impl_k_yield+0x4a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   26f80:	2400      	movs	r4, #0
   26f82:	e006      	b.n	26f92 <z_impl_k_yield+0x4a>
	sys_dnode_t *const prev = successor->prev;
   26f84:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   26f86:	606b      	str	r3, [r5, #4]
	node->next = successor;
   26f88:	602c      	str	r4, [r5, #0]
	prev->next = node;
   26f8a:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   26f8c:	6065      	str	r5, [r4, #4]
}
   26f8e:	e017      	b.n	26fc0 <z_impl_k_yield+0x78>
   26f90:	2400      	movs	r4, #0
   26f92:	b16c      	cbz	r4, 26fb0 <z_impl_k_yield+0x68>
		if (z_sched_prio_cmp(thread, t) > 0) {
   26f94:	4621      	mov	r1, r4
   26f96:	4628      	mov	r0, r5
   26f98:	f009 fc28 	bl	307ec <z_sched_prio_cmp>
   26f9c:	2800      	cmp	r0, #0
   26f9e:	dcf1      	bgt.n	26f84 <z_impl_k_yield+0x3c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   26fa0:	2c00      	cmp	r4, #0
   26fa2:	d0f6      	beq.n	26f92 <z_impl_k_yield+0x4a>
	return (node == list->tail) ? NULL : node->next;
   26fa4:	4b0a      	ldr	r3, [pc, #40]	; (26fd0 <z_impl_k_yield+0x88>)
   26fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   26fa8:	429c      	cmp	r4, r3
   26faa:	d0f1      	beq.n	26f90 <z_impl_k_yield+0x48>
   26fac:	6824      	ldr	r4, [r4, #0]
   26fae:	e7f0      	b.n	26f92 <z_impl_k_yield+0x4a>
	sys_dnode_t *const tail = list->tail;
   26fb0:	4b07      	ldr	r3, [pc, #28]	; (26fd0 <z_impl_k_yield+0x88>)
   26fb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   26fb4:	f103 0120 	add.w	r1, r3, #32
   26fb8:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   26fba:	606a      	str	r2, [r5, #4]
	tail->next = node;
   26fbc:	6015      	str	r5, [r2, #0]
	list->tail = node;
   26fbe:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
   26fc0:	2001      	movs	r0, #1
   26fc2:	f7ff fd7b 	bl	26abc <update_cache>
   26fc6:	4630      	mov	r0, r6
   26fc8:	f7ed fef0 	bl	14dac <arch_swap>
}
   26fcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26fce:	bf00      	nop
   26fd0:	20009070 	.word	0x20009070

00026fd4 <z_tick_sleep>:
{
   26fd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (ticks == 0) {
   26fd8:	ea50 0301 	orrs.w	r3, r0, r1
   26fdc:	d038      	beq.n	27050 <z_tick_sleep+0x7c>
   26fde:	4604      	mov	r4, r0
   26fe0:	460e      	mov	r6, r1
	if (Z_TICK_ABS(ticks) <= 0) {
   26fe2:	f06f 0301 	mvn.w	r3, #1
   26fe6:	1a1b      	subs	r3, r3, r0
   26fe8:	f04f 32ff 	mov.w	r2, #4294967295
   26fec:	eb62 0201 	sbc.w	r2, r2, r1
   26ff0:	2b01      	cmp	r3, #1
   26ff2:	f172 0200 	sbcs.w	r2, r2, #0
   26ff6:	db2f      	blt.n	27058 <z_tick_sleep+0x84>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   26ff8:	f06f 0501 	mvn.w	r5, #1
   26ffc:	1a2d      	subs	r5, r5, r0
   26ffe:	f04f 0340 	mov.w	r3, #64	; 0x40
   27002:	f3ef 8811 	mrs	r8, BASEPRI
   27006:	f383 8812 	msr	BASEPRI_MAX, r3
   2700a:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   2700e:	4f14      	ldr	r7, [pc, #80]	; (27060 <z_tick_sleep+0x8c>)
   27010:	68b8      	ldr	r0, [r7, #8]
   27012:	4b14      	ldr	r3, [pc, #80]	; (27064 <z_tick_sleep+0x90>)
   27014:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   27016:	f7ff fe69 	bl	26cec <unready_thread>
	z_add_thread_timeout(_current, timeout);
   2701a:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   2701c:	4622      	mov	r2, r4
   2701e:	4633      	mov	r3, r6
   27020:	4911      	ldr	r1, [pc, #68]	; (27068 <z_tick_sleep+0x94>)
   27022:	3018      	adds	r0, #24
   27024:	f000 f936 	bl	27294 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   27028:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   2702a:	7b53      	ldrb	r3, [r2, #13]
   2702c:	f043 0310 	orr.w	r3, r3, #16
   27030:	7353      	strb	r3, [r2, #13]
   27032:	4640      	mov	r0, r8
   27034:	f7ed feba 	bl	14dac <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   27038:	f009 fddb 	bl	30bf2 <sys_clock_tick_get_32>
   2703c:	1a28      	subs	r0, r5, r0
   2703e:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   27042:	2801      	cmp	r0, #1
   27044:	f173 0300 	sbcs.w	r3, r3, #0
   27048:	da00      	bge.n	2704c <z_tick_sleep+0x78>
	return 0;
   2704a:	2000      	movs	r0, #0
}
   2704c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
   27050:	f7ff ff7a 	bl	26f48 <z_impl_k_yield>
		return 0;
   27054:	2000      	movs	r0, #0
   27056:	e7f9      	b.n	2704c <z_tick_sleep+0x78>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   27058:	f009 fdcb 	bl	30bf2 <sys_clock_tick_get_32>
   2705c:	1905      	adds	r5, r0, r4
   2705e:	e7ce      	b.n	26ffe <z_tick_sleep+0x2a>
   27060:	20009070 	.word	0x20009070
   27064:	200090a4 	.word	0x200090a4
   27068:	0003090b 	.word	0x0003090b

0002706c <z_impl_k_sleep>:
{
   2706c:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2706e:	f1b1 3fff 	cmp.w	r1, #4294967295
   27072:	bf08      	it	eq
   27074:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   27078:	d018      	beq.n	270ac <z_impl_k_sleep+0x40>
	ticks = z_tick_sleep(ticks);
   2707a:	f7ff ffab 	bl	26fd4 <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
   2707e:	17c2      	asrs	r2, r0, #31
			return ((t * to_hz + off) / from_hz);
   27080:	0151      	lsls	r1, r2, #5
   27082:	ea41 61d0 	orr.w	r1, r1, r0, lsr #27
   27086:	0143      	lsls	r3, r0, #5
   27088:	1a1b      	subs	r3, r3, r0
   2708a:	eb61 0102 	sbc.w	r1, r1, r2
   2708e:	0089      	lsls	r1, r1, #2
   27090:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
   27094:	009b      	lsls	r3, r3, #2
   27096:	181b      	adds	r3, r3, r0
   27098:	eb42 0201 	adc.w	r2, r2, r1
   2709c:	00d2      	lsls	r2, r2, #3
   2709e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
   270a2:	f3c3 3310 	ubfx	r3, r3, #12, #17
   270a6:	ea43 4042 	orr.w	r0, r3, r2, lsl #17
}
   270aa:	bd08      	pop	{r3, pc}
		k_thread_suspend(_current);
   270ac:	4b03      	ldr	r3, [pc, #12]	; (270bc <z_impl_k_sleep+0x50>)
   270ae:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   270b0:	f7ff feb2 	bl	26e18 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   270b4:	f04f 30ff 	mov.w	r0, #4294967295
   270b8:	e7f7      	b.n	270aa <z_impl_k_sleep+0x3e>
   270ba:	bf00      	nop
   270bc:	20009070 	.word	0x20009070

000270c0 <z_impl_k_usleep>:
{
   270c0:	b508      	push	{r3, lr}
	ticks = k_us_to_ticks_ceil64(us);
   270c2:	17c1      	asrs	r1, r0, #31
   270c4:	03c9      	lsls	r1, r1, #15
   270c6:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   270ca:	03c0      	lsls	r0, r0, #15
   270cc:	4b15      	ldr	r3, [pc, #84]	; (27124 <z_impl_k_usleep+0x64>)
   270ce:	18c0      	adds	r0, r0, r3
   270d0:	4a15      	ldr	r2, [pc, #84]	; (27128 <z_impl_k_usleep+0x68>)
   270d2:	f04f 0300 	mov.w	r3, #0
   270d6:	f141 0100 	adc.w	r1, r1, #0
   270da:	f7d9 f811 	bl	100 <__aeabi_uldivmod>
	ticks = z_tick_sleep(ticks);
   270de:	17c1      	asrs	r1, r0, #31
   270e0:	f7ff ff78 	bl	26fd4 <z_tick_sleep>
	return k_ticks_to_us_floor64(ticks);
   270e4:	ea4f 7ce0 	mov.w	ip, r0, asr #31
   270e8:	ea4f 124c 	mov.w	r2, ip, lsl #5
   270ec:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
   270f0:	0143      	lsls	r3, r0, #5
   270f2:	1a1b      	subs	r3, r3, r0
   270f4:	eb62 020c 	sbc.w	r2, r2, ip
   270f8:	0252      	lsls	r2, r2, #9
   270fa:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
   270fe:	025b      	lsls	r3, r3, #9
   27100:	181b      	adds	r3, r3, r0
   27102:	eb4c 0202 	adc.w	r2, ip, r2
   27106:	ea4f 1e82 	mov.w	lr, r2, lsl #6
   2710a:	ea4e 6e93 	orr.w	lr, lr, r3, lsr #26
   2710e:	0199      	lsls	r1, r3, #6
   27110:	1acb      	subs	r3, r1, r3
   27112:	eb6e 0e02 	sbc.w	lr, lr, r2
   27116:	181b      	adds	r3, r3, r0
   27118:	eb4c 000e 	adc.w	r0, ip, lr
   2711c:	0bdb      	lsrs	r3, r3, #15
}
   2711e:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
   27122:	bd08      	pop	{r3, pc}
   27124:	000f423f 	.word	0x000f423f
   27128:	000f4240 	.word	0x000f4240

0002712c <z_impl_z_current_get>:
}
   2712c:	4b01      	ldr	r3, [pc, #4]	; (27134 <z_impl_z_current_get+0x8>)
   2712e:	6898      	ldr	r0, [r3, #8]
   27130:	4770      	bx	lr
   27132:	bf00      	nop
   27134:	20009070 	.word	0x20009070

00027138 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
   27138:	b570      	push	{r4, r5, r6, lr}
   2713a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2713e:	f3ef 8511 	mrs	r5, BASEPRI
   27142:	f383 8812 	msr	BASEPRI_MAX, r3
   27146:	f3bf 8f6f 	isb	sy
   2714a:	462e      	mov	r6, r5
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   2714c:	7b03      	ldrb	r3, [r0, #12]
   2714e:	f013 0f01 	tst.w	r3, #1
   27152:	d109      	bne.n	27168 <z_thread_abort+0x30>
   27154:	4604      	mov	r4, r0
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
		return;
	}

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   27156:	7b43      	ldrb	r3, [r0, #13]
   27158:	f013 0f08 	tst.w	r3, #8
   2715c:	d00f      	beq.n	2717e <z_thread_abort+0x46>
	__asm__ volatile(
   2715e:	f385 8811 	msr	BASEPRI, r5
   27162:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		return;
   27166:	e009      	b.n	2717c <z_thread_abort+0x44>
   27168:	f385 8811 	msr	BASEPRI, r5
   2716c:	f3bf 8f6f 	isb	sy
		k_panic();
   27170:	4040      	eors	r0, r0
   27172:	f380 8811 	msr	BASEPRI, r0
   27176:	f04f 0004 	mov.w	r0, #4
   2717a:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   2717c:	bd70      	pop	{r4, r5, r6, pc}
	end_thread(thread);
   2717e:	f7ff fea5 	bl	26ecc <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
   27182:	4b08      	ldr	r3, [pc, #32]	; (271a4 <z_thread_abort+0x6c>)
   27184:	689b      	ldr	r3, [r3, #8]
   27186:	42a3      	cmp	r3, r4
   27188:	d004      	beq.n	27194 <z_thread_abort+0x5c>
   2718a:	f386 8811 	msr	BASEPRI, r6
   2718e:	f3bf 8f6f 	isb	sy
   27192:	e7f3      	b.n	2717c <z_thread_abort+0x44>
   27194:	f3ef 8305 	mrs	r3, IPSR
   27198:	2b00      	cmp	r3, #0
   2719a:	d1f6      	bne.n	2718a <z_thread_abort+0x52>
   2719c:	4628      	mov	r0, r5
   2719e:	f7ed fe05 	bl	14dac <arch_swap>
	return ret;
   271a2:	e7f2      	b.n	2718a <z_thread_abort+0x52>
   271a4:	20009070 	.word	0x20009070

000271a8 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   271a8:	e92d 4810 	stmdb	sp!, {r4, fp, lr}
   271ac:	b083      	sub	sp, #12
   271ae:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   271b0:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
   271b4:	e9cd bc00 	strd	fp, ip, [sp]
   271b8:	f7ff fdb4 	bl	26d24 <z_pend_curr>

	if (data != NULL) {
   271bc:	b11c      	cbz	r4, 271c6 <z_sched_wait+0x1e>
		*data = _current->base.swap_data;
   271be:	4b03      	ldr	r3, [pc, #12]	; (271cc <z_sched_wait+0x24>)
   271c0:	689b      	ldr	r3, [r3, #8]
   271c2:	695b      	ldr	r3, [r3, #20]
   271c4:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   271c6:	b003      	add	sp, #12
   271c8:	e8bd 8810 	ldmia.w	sp!, {r4, fp, pc}
   271cc:	20009070 	.word	0x20009070

000271d0 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   271d0:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   271d2:	4806      	ldr	r0, [pc, #24]	; (271ec <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   271d4:	4a06      	ldr	r2, [pc, #24]	; (271f0 <z_data_copy+0x20>)
   271d6:	1a12      	subs	r2, r2, r0
   271d8:	4906      	ldr	r1, [pc, #24]	; (271f4 <z_data_copy+0x24>)
   271da:	f008 ff78 	bl	300ce <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   271de:	4a06      	ldr	r2, [pc, #24]	; (271f8 <z_data_copy+0x28>)
   271e0:	4906      	ldr	r1, [pc, #24]	; (271fc <z_data_copy+0x2c>)
   271e2:	4807      	ldr	r0, [pc, #28]	; (27200 <z_data_copy+0x30>)
   271e4:	f008 ff73 	bl	300ce <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   271e8:	bd08      	pop	{r3, pc}
   271ea:	bf00      	nop
   271ec:	20000000 	.word	0x20000000
   271f0:	20000c38 	.word	0x20000c38
   271f4:	00034b6c 	.word	0x00034b6c
   271f8:	00000000 	.word	0x00000000
   271fc:	00034b6c 	.word	0x00034b6c
   27200:	20000000 	.word	0x20000000

00027204 <first>:
	return list->head == list;
   27204:	4b03      	ldr	r3, [pc, #12]	; (27214 <first+0x10>)
   27206:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27208:	4298      	cmp	r0, r3
   2720a:	d000      	beq.n	2720e <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
   2720c:	4770      	bx	lr
   2720e:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
   27210:	e7fc      	b.n	2720c <first+0x8>
   27212:	bf00      	nop
   27214:	200009cc 	.word	0x200009cc

00027218 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   27218:	b130      	cbz	r0, 27228 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
   2721a:	4a04      	ldr	r2, [pc, #16]	; (2722c <next+0x14>)
   2721c:	6852      	ldr	r2, [r2, #4]
   2721e:	4290      	cmp	r0, r2
   27220:	d001      	beq.n	27226 <next+0xe>
   27222:	6800      	ldr	r0, [r0, #0]
   27224:	4770      	bx	lr
   27226:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
   27228:	4770      	bx	lr
   2722a:	bf00      	nop
   2722c:	200009cc 	.word	0x200009cc

00027230 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
   27230:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   27232:	4b04      	ldr	r3, [pc, #16]	; (27244 <elapsed+0x14>)
   27234:	681b      	ldr	r3, [r3, #0]
   27236:	b10b      	cbz	r3, 2723c <elapsed+0xc>
   27238:	2000      	movs	r0, #0
}
   2723a:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   2723c:	f7fb fb20 	bl	22880 <sys_clock_elapsed>
   27240:	e7fb      	b.n	2723a <elapsed+0xa>
   27242:	bf00      	nop
   27244:	200090b0 	.word	0x200090b0

00027248 <next_timeout>:

static int32_t next_timeout(void)
{
   27248:	b510      	push	{r4, lr}
	struct _timeout *to = first();
   2724a:	f7ff ffdb 	bl	27204 <first>
   2724e:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
   27250:	f7ff ffee 	bl	27230 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
   27254:	b17c      	cbz	r4, 27276 <next_timeout+0x2e>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   27256:	6923      	ldr	r3, [r4, #16]
   27258:	6962      	ldr	r2, [r4, #20]
   2725a:	1a1b      	subs	r3, r3, r0
   2725c:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   27260:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   27264:	f172 0100 	sbcs.w	r1, r2, #0
   27268:	da08      	bge.n	2727c <next_timeout+0x34>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
   2726a:	2a00      	cmp	r2, #0
   2726c:	db01      	blt.n	27272 <next_timeout+0x2a>
   2726e:	4618      	mov	r0, r3
   27270:	e006      	b.n	27280 <next_timeout+0x38>
   27272:	2300      	movs	r3, #0
   27274:	e7fb      	b.n	2726e <next_timeout+0x26>
		ret = MAX_WAIT;
   27276:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   2727a:	e001      	b.n	27280 <next_timeout+0x38>
   2727c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   27280:	4b03      	ldr	r3, [pc, #12]	; (27290 <next_timeout+0x48>)
   27282:	691b      	ldr	r3, [r3, #16]
   27284:	b113      	cbz	r3, 2728c <next_timeout+0x44>
   27286:	4283      	cmp	r3, r0
   27288:	da00      	bge.n	2728c <next_timeout+0x44>
		ret = _current_cpu->slice_ticks;
   2728a:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
   2728c:	bd10      	pop	{r4, pc}
   2728e:	bf00      	nop
   27290:	20009070 	.word	0x20009070

00027294 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   27294:	f1b3 3fff 	cmp.w	r3, #4294967295
   27298:	bf08      	it	eq
   2729a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   2729e:	d07b      	beq.n	27398 <z_add_timeout+0x104>
{
   272a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   272a4:	4604      	mov	r4, r0
   272a6:	4692      	mov	sl, r2
   272a8:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   272aa:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
   272ac:	2300      	movs	r3, #0
	__asm__ volatile(
   272ae:	f04f 0240 	mov.w	r2, #64	; 0x40
   272b2:	f3ef 8711 	mrs	r7, BASEPRI
   272b6:	f382 8812 	msr	BASEPRI_MAX, r2
   272ba:	f3bf 8f6f 	isb	sy
   272be:	e026      	b.n	2730e <z_add_timeout+0x7a>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   272c0:	f11a 0801 	adds.w	r8, sl, #1
   272c4:	f145 0900 	adc.w	r9, r5, #0
   272c8:	f7ff ffb2 	bl	27230 <elapsed>
   272cc:	eb18 0300 	adds.w	r3, r8, r0
   272d0:	eb49 70e0 	adc.w	r0, r9, r0, asr #31
   272d4:	6123      	str	r3, [r4, #16]
   272d6:	6160      	str	r0, [r4, #20]
   272d8:	e03b      	b.n	27352 <z_add_timeout+0xbe>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
   272da:	1a52      	subs	r2, r2, r1
   272dc:	eb66 0303 	sbc.w	r3, r6, r3
   272e0:	6102      	str	r2, [r0, #16]
   272e2:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
   272e4:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
   272e6:	6063      	str	r3, [r4, #4]
	node->next = successor;
   272e8:	6020      	str	r0, [r4, #0]
	prev->next = node;
   272ea:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   272ec:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
   272ee:	e005      	b.n	272fc <z_add_timeout+0x68>
	sys_dnode_t *const tail = list->tail;
   272f0:	4b2a      	ldr	r3, [pc, #168]	; (2739c <z_add_timeout+0x108>)
   272f2:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   272f4:	6023      	str	r3, [r4, #0]
	node->prev = tail;
   272f6:	6062      	str	r2, [r4, #4]
	tail->next = node;
   272f8:	6014      	str	r4, [r2, #0]
	list->tail = node;
   272fa:	605c      	str	r4, [r3, #4]
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   272fc:	f7ff ff82 	bl	27204 <first>
   27300:	4284      	cmp	r4, r0
   27302:	d03a      	beq.n	2737a <z_add_timeout+0xe6>
	__asm__ volatile(
   27304:	f387 8811 	msr	BASEPRI, r7
   27308:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   2730c:	2301      	movs	r3, #1
   2730e:	2b00      	cmp	r3, #0
   27310:	d140      	bne.n	27394 <z_add_timeout+0x100>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   27312:	4653      	mov	r3, sl
   27314:	f06f 0101 	mvn.w	r1, #1
   27318:	ebb1 010a 	subs.w	r1, r1, sl
   2731c:	f04f 30ff 	mov.w	r0, #4294967295
   27320:	eb60 0205 	sbc.w	r2, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   27324:	2a00      	cmp	r2, #0
   27326:	dbcb      	blt.n	272c0 <z_add_timeout+0x2c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   27328:	4a1d      	ldr	r2, [pc, #116]	; (273a0 <z_add_timeout+0x10c>)
   2732a:	6811      	ldr	r1, [r2, #0]
   2732c:	6852      	ldr	r2, [r2, #4]
   2732e:	185b      	adds	r3, r3, r1
   27330:	eb42 0205 	adc.w	r2, r2, r5
   27334:	f06f 0101 	mvn.w	r1, #1
   27338:	1ac9      	subs	r1, r1, r3
   2733a:	eb60 0302 	sbc.w	r3, r0, r2
			to->dticks = MAX(1, ticks);
   2733e:	4608      	mov	r0, r1
   27340:	461a      	mov	r2, r3
   27342:	2901      	cmp	r1, #1
   27344:	f173 0300 	sbcs.w	r3, r3, #0
   27348:	da01      	bge.n	2734e <z_add_timeout+0xba>
   2734a:	2001      	movs	r0, #1
   2734c:	2200      	movs	r2, #0
   2734e:	6120      	str	r0, [r4, #16]
   27350:	6162      	str	r2, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
   27352:	f7ff ff57 	bl	27204 <first>
   27356:	2800      	cmp	r0, #0
   27358:	d0ca      	beq.n	272f0 <z_add_timeout+0x5c>
			if (t->dticks > to->dticks) {
   2735a:	6902      	ldr	r2, [r0, #16]
   2735c:	6946      	ldr	r6, [r0, #20]
   2735e:	6921      	ldr	r1, [r4, #16]
   27360:	6963      	ldr	r3, [r4, #20]
   27362:	4291      	cmp	r1, r2
   27364:	eb73 0e06 	sbcs.w	lr, r3, r6
   27368:	dbb7      	blt.n	272da <z_add_timeout+0x46>
			to->dticks -= t->dticks;
   2736a:	1a89      	subs	r1, r1, r2
   2736c:	eb63 0306 	sbc.w	r3, r3, r6
   27370:	6121      	str	r1, [r4, #16]
   27372:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
   27374:	f7ff ff50 	bl	27218 <next>
   27378:	e7ed      	b.n	27356 <z_add_timeout+0xc2>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   2737a:	f7ff ff65 	bl	27248 <next_timeout>

			if (next_time == 0 ||
   2737e:	4603      	mov	r3, r0
   27380:	b118      	cbz	r0, 2738a <z_add_timeout+0xf6>
			    _current_cpu->slice_ticks != next_time) {
   27382:	4a08      	ldr	r2, [pc, #32]	; (273a4 <z_add_timeout+0x110>)
   27384:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
   27386:	4282      	cmp	r2, r0
   27388:	d0bc      	beq.n	27304 <z_add_timeout+0x70>
				sys_clock_set_timeout(next_time, false);
   2738a:	2100      	movs	r1, #0
   2738c:	4618      	mov	r0, r3
   2738e:	f7fb fa3b 	bl	22808 <sys_clock_set_timeout>
   27392:	e7b7      	b.n	27304 <z_add_timeout+0x70>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   27394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   27398:	4770      	bx	lr
   2739a:	bf00      	nop
   2739c:	200009cc 	.word	0x200009cc
   273a0:	200078e0 	.word	0x200078e0
   273a4:	20009070 	.word	0x20009070

000273a8 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   273a8:	b570      	push	{r4, r5, r6, lr}
   273aa:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   273ac:	f7ff fc08 	bl	26bc0 <z_time_slice>
	__asm__ volatile(
   273b0:	f04f 0340 	mov.w	r3, #64	; 0x40
   273b4:	f3ef 8611 	mrs	r6, BASEPRI
   273b8:	f383 8812 	msr	BASEPRI_MAX, r3
   273bc:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   273c0:	4b28      	ldr	r3, [pc, #160]	; (27464 <sys_clock_announce+0xbc>)
   273c2:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   273c4:	e021      	b.n	2740a <sys_clock_announce+0x62>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   273c6:	4a28      	ldr	r2, [pc, #160]	; (27468 <sys_clock_announce+0xc0>)
   273c8:	6813      	ldr	r3, [r2, #0]
   273ca:	6851      	ldr	r1, [r2, #4]
   273cc:	195b      	adds	r3, r3, r5
   273ce:	eb41 71e5 	adc.w	r1, r1, r5, asr #31
   273d2:	6013      	str	r3, [r2, #0]
   273d4:	6051      	str	r1, [r2, #4]
		t->dticks = 0;
   273d6:	2200      	movs	r2, #0
   273d8:	2300      	movs	r3, #0
   273da:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   273de:	4620      	mov	r0, r4
   273e0:	f009 fb90 	bl	30b04 <remove_timeout>
	__asm__ volatile(
   273e4:	f386 8811 	msr	BASEPRI, r6
   273e8:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
   273ec:	68a3      	ldr	r3, [r4, #8]
   273ee:	4620      	mov	r0, r4
   273f0:	4798      	blx	r3
	__asm__ volatile(
   273f2:	f04f 0340 	mov.w	r3, #64	; 0x40
   273f6:	f3ef 8611 	mrs	r6, BASEPRI
   273fa:	f383 8812 	msr	BASEPRI_MAX, r3
   273fe:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
   27402:	4a18      	ldr	r2, [pc, #96]	; (27464 <sys_clock_announce+0xbc>)
   27404:	6813      	ldr	r3, [r2, #0]
   27406:	1b5b      	subs	r3, r3, r5
   27408:	6013      	str	r3, [r2, #0]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   2740a:	f7ff fefb 	bl	27204 <first>
   2740e:	4604      	mov	r4, r0
   27410:	b138      	cbz	r0, 27422 <sys_clock_announce+0x7a>
   27412:	6905      	ldr	r5, [r0, #16]
   27414:	6941      	ldr	r1, [r0, #20]
   27416:	4b13      	ldr	r3, [pc, #76]	; (27464 <sys_clock_announce+0xbc>)
   27418:	681a      	ldr	r2, [r3, #0]
   2741a:	17d3      	asrs	r3, r2, #31
   2741c:	42aa      	cmp	r2, r5
   2741e:	418b      	sbcs	r3, r1
   27420:	dad1      	bge.n	273c6 <sys_clock_announce+0x1e>
	}

	if (first() != NULL) {
   27422:	b144      	cbz	r4, 27436 <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
   27424:	6923      	ldr	r3, [r4, #16]
   27426:	6962      	ldr	r2, [r4, #20]
   27428:	490e      	ldr	r1, [pc, #56]	; (27464 <sys_clock_announce+0xbc>)
   2742a:	6809      	ldr	r1, [r1, #0]
   2742c:	1a5b      	subs	r3, r3, r1
   2742e:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
   27432:	6123      	str	r3, [r4, #16]
   27434:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
   27436:	4a0c      	ldr	r2, [pc, #48]	; (27468 <sys_clock_announce+0xc0>)
   27438:	4d0a      	ldr	r5, [pc, #40]	; (27464 <sys_clock_announce+0xbc>)
   2743a:	6828      	ldr	r0, [r5, #0]
   2743c:	6813      	ldr	r3, [r2, #0]
   2743e:	6851      	ldr	r1, [r2, #4]
   27440:	181b      	adds	r3, r3, r0
   27442:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
   27446:	6013      	str	r3, [r2, #0]
   27448:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
   2744a:	2400      	movs	r4, #0
   2744c:	602c      	str	r4, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
   2744e:	f7ff fefb 	bl	27248 <next_timeout>
   27452:	4621      	mov	r1, r4
   27454:	f7fb f9d8 	bl	22808 <sys_clock_set_timeout>
	__asm__ volatile(
   27458:	f386 8811 	msr	BASEPRI, r6
   2745c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   27460:	bd70      	pop	{r4, r5, r6, pc}
   27462:	bf00      	nop
   27464:	200090b0 	.word	0x200090b0
   27468:	200078e0 	.word	0x200078e0

0002746c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   2746c:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
   2746e:	2200      	movs	r2, #0
	__asm__ volatile(
   27470:	f04f 0340 	mov.w	r3, #64	; 0x40
   27474:	f3ef 8411 	mrs	r4, BASEPRI
   27478:	f383 8812 	msr	BASEPRI_MAX, r3
   2747c:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
   27480:	4613      	mov	r3, r2
   27482:	4611      	mov	r1, r2
   27484:	e00c      	b.n	274a0 <sys_clock_tick_get+0x34>
		t = curr_tick + elapsed();
   27486:	f7ff fed3 	bl	27230 <elapsed>
   2748a:	4a07      	ldr	r2, [pc, #28]	; (274a8 <sys_clock_tick_get+0x3c>)
   2748c:	6813      	ldr	r3, [r2, #0]
   2748e:	6851      	ldr	r1, [r2, #4]
   27490:	18c3      	adds	r3, r0, r3
   27492:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
	__asm__ volatile(
   27496:	f384 8811 	msr	BASEPRI, r4
   2749a:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   2749e:	2201      	movs	r2, #1
   274a0:	2a00      	cmp	r2, #0
   274a2:	d0f0      	beq.n	27486 <sys_clock_tick_get+0x1a>
	}
	return t;
}
   274a4:	4618      	mov	r0, r3
   274a6:	bd10      	pop	{r4, pc}
   274a8:	200078e0 	.word	0x200078e0

000274ac <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   274ac:	b538      	push	{r3, r4, r5, lr}
   274ae:	4604      	mov	r4, r0
	__asm__ volatile(
   274b0:	f04f 0340 	mov.w	r3, #64	; 0x40
   274b4:	f3ef 8511 	mrs	r5, BASEPRI
   274b8:	f383 8812 	msr	BASEPRI_MAX, r3
   274bc:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   274c0:	6a82      	ldr	r2, [r0, #40]	; 0x28
   274c2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   274c4:	ea52 0103 	orrs.w	r1, r2, r3
   274c8:	d005      	beq.n	274d6 <z_timer_expiration_handler+0x2a>
   274ca:	f1b3 3fff 	cmp.w	r3, #4294967295
   274ce:	bf08      	it	eq
   274d0:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   274d4:	d128      	bne.n	27528 <z_timer_expiration_handler+0x7c>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
   274d6:	6b23      	ldr	r3, [r4, #48]	; 0x30
   274d8:	3301      	adds	r3, #1
   274da:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   274dc:	6a23      	ldr	r3, [r4, #32]
   274de:	b173      	cbz	r3, 274fe <z_timer_expiration_handler+0x52>
	__asm__ volatile(
   274e0:	f385 8811 	msr	BASEPRI, r5
   274e4:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   274e8:	6a23      	ldr	r3, [r4, #32]
   274ea:	4620      	mov	r0, r4
   274ec:	4798      	blx	r3
	__asm__ volatile(
   274ee:	f04f 0340 	mov.w	r3, #64	; 0x40
   274f2:	f3ef 8511 	mrs	r5, BASEPRI
   274f6:	f383 8812 	msr	BASEPRI_MAX, r3
   274fa:	f3bf 8f6f 	isb	sy
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   274fe:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
   27502:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27504:	42a3      	cmp	r3, r4
   27506:	d038      	beq.n	2757a <z_timer_expiration_handler+0xce>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   27508:	2c00      	cmp	r4, #0
   2750a:	d036      	beq.n	2757a <z_timer_expiration_handler+0xce>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
   2750c:	4620      	mov	r0, r4
   2750e:	f009 f977 	bl	30800 <z_unpend_thread_no_timeout>
   27512:	2300      	movs	r3, #0
   27514:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	__asm__ volatile(
   27518:	f385 8811 	msr	BASEPRI, r5
   2751c:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
   27520:	4620      	mov	r0, r4
   27522:	f009 f9d6 	bl	308d2 <z_ready_thread>
}
   27526:	bd38      	pop	{r3, r4, r5, pc}
	return z_impl_k_uptime_ticks();
   27528:	f009 fb67 	bl	30bfa <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   2752c:	3001      	adds	r0, #1
   2752e:	f141 0100 	adc.w	r1, r1, #0
   27532:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   27534:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   27536:	18c0      	adds	r0, r0, r3
   27538:	eb41 0102 	adc.w	r1, r1, r2
   2753c:	2801      	cmp	r0, #1
   2753e:	f171 0100 	sbcs.w	r1, r1, #0
   27542:	da08      	bge.n	27556 <z_timer_expiration_handler+0xaa>
   27544:	f06f 0201 	mvn.w	r2, #1
   27548:	f04f 33ff 	mov.w	r3, #4294967295
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2754c:	490d      	ldr	r1, [pc, #52]	; (27584 <z_timer_expiration_handler+0xd8>)
   2754e:	4620      	mov	r0, r4
   27550:	f7ff fea0 	bl	27294 <z_add_timeout>
   27554:	e7bf      	b.n	274d6 <z_timer_expiration_handler+0x2a>
   27556:	f009 fb50 	bl	30bfa <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   2755a:	3001      	adds	r0, #1
   2755c:	f141 0300 	adc.w	r3, r1, #0
   27560:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   27562:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   27564:	1880      	adds	r0, r0, r2
   27566:	eb43 0301 	adc.w	r3, r3, r1
   2756a:	f06f 0201 	mvn.w	r2, #1
   2756e:	1a12      	subs	r2, r2, r0
   27570:	f04f 31ff 	mov.w	r1, #4294967295
   27574:	eb61 0303 	sbc.w	r3, r1, r3
   27578:	e7e8      	b.n	2754c <z_timer_expiration_handler+0xa0>
   2757a:	f385 8811 	msr	BASEPRI, r5
   2757e:	f3bf 8f6f 	isb	sy
		return;
   27582:	e7d0      	b.n	27526 <z_timer_expiration_handler+0x7a>
   27584:	000274ad 	.word	0x000274ad

00027588 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   27588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2758c:	461e      	mov	r6, r3
   2758e:	9f06      	ldr	r7, [sp, #24]
   27590:	f8dd 801c 	ldr.w	r8, [sp, #28]
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   27594:	f1b3 3fff 	cmp.w	r3, #4294967295
   27598:	bf08      	it	eq
   2759a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   2759e:	d02f      	beq.n	27600 <z_impl_k_timer_start+0x78>
   275a0:	4605      	mov	r5, r0
   275a2:	4614      	mov	r4, r2
   275a4:	4613      	mov	r3, r2
   275a6:	4631      	mov	r1, r6
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   275a8:	4640      	mov	r0, r8
   275aa:	f1b8 3fff 	cmp.w	r8, #4294967295
   275ae:	bf08      	it	eq
   275b0:	f1b7 3fff 	cmpeq.w	r7, #4294967295
   275b4:	d00d      	beq.n	275d2 <z_impl_k_timer_start+0x4a>
   275b6:	ea57 0c08 	orrs.w	ip, r7, r8
   275ba:	d00a      	beq.n	275d2 <z_impl_k_timer_start+0x4a>
	    Z_TICK_ABS(period.ticks) < 0) {
   275bc:	f06f 0c01 	mvn.w	ip, #1
   275c0:	ebbc 0c07 	subs.w	ip, ip, r7
   275c4:	f04f 3cff 	mov.w	ip, #4294967295
   275c8:	eb6c 0c08 	sbc.w	ip, ip, r8
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   275cc:	f1bc 0f00 	cmp.w	ip, #0
   275d0:	db18      	blt.n	27604 <z_impl_k_timer_start+0x7c>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   275d2:	f06f 0201 	mvn.w	r2, #1
   275d6:	1ad2      	subs	r2, r2, r3
   275d8:	f04f 32ff 	mov.w	r2, #4294967295
   275dc:	eb62 0201 	sbc.w	r2, r2, r1
   275e0:	2a00      	cmp	r2, #0
   275e2:	db1a      	blt.n	2761a <z_impl_k_timer_start+0x92>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
   275e4:	4628      	mov	r0, r5
   275e6:	f009 faa4 	bl	30b32 <z_abort_timeout>
	timer->period = period;
   275ea:	62af      	str	r7, [r5, #40]	; 0x28
   275ec:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
	timer->status = 0U;
   275f0:	2300      	movs	r3, #0
   275f2:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   275f4:	4622      	mov	r2, r4
   275f6:	4633      	mov	r3, r6
   275f8:	490e      	ldr	r1, [pc, #56]	; (27634 <z_impl_k_timer_start+0xac>)
   275fa:	4628      	mov	r0, r5
   275fc:	f7ff fe4a 	bl	27294 <z_add_timeout>
		     duration);
}
   27600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		period.ticks = MAX(period.ticks - 1, 1);
   27604:	2f02      	cmp	r7, #2
   27606:	f170 0000 	sbcs.w	r0, r0, #0
   2760a:	da02      	bge.n	27612 <z_impl_k_timer_start+0x8a>
   2760c:	2702      	movs	r7, #2
   2760e:	f04f 0800 	mov.w	r8, #0
   27612:	3f01      	subs	r7, #1
   27614:	f148 38ff 	adc.w	r8, r8, #4294967295
   27618:	e7db      	b.n	275d2 <z_impl_k_timer_start+0x4a>
		duration.ticks = MAX(duration.ticks - 1, 0);
   2761a:	461c      	mov	r4, r3
   2761c:	460e      	mov	r6, r1
   2761e:	2b01      	cmp	r3, #1
   27620:	f171 0100 	sbcs.w	r1, r1, #0
   27624:	da01      	bge.n	2762a <z_impl_k_timer_start+0xa2>
   27626:	2401      	movs	r4, #1
   27628:	2600      	movs	r6, #0
   2762a:	3c01      	subs	r4, #1
   2762c:	f146 36ff 	adc.w	r6, r6, #4294967295
   27630:	e7d8      	b.n	275e4 <z_impl_k_timer_start+0x5c>
   27632:	bf00      	nop
   27634:	000274ad 	.word	0x000274ad

00027638 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   27638:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2763c:	b083      	sub	sp, #12
   2763e:	4607      	mov	r7, r0
   27640:	4616      	mov	r6, r2
   27642:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   27644:	4b28      	ldr	r3, [pc, #160]	; (276e8 <z_impl_k_poll+0xb0>)
   27646:	689c      	ldr	r4, [r3, #8]

	poller->is_polling = true;
   27648:	2301      	movs	r3, #1
   2764a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	poller->mode = MODE_POLL;
   2764e:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   27652:	ea55 0302 	orrs.w	r3, r5, r2
   27656:	bf0c      	ite	eq
   27658:	2301      	moveq	r3, #1
   2765a:	2300      	movne	r3, #0
   2765c:	f104 0260 	add.w	r2, r4, #96	; 0x60
   27660:	f009 fc05 	bl	30e6e <register_events>
   27664:	4680      	mov	r8, r0
	__asm__ volatile(
   27666:	f04f 0340 	mov.w	r3, #64	; 0x40
   2766a:	f3ef 8111 	mrs	r1, BASEPRI
   2766e:	f383 8812 	msr	BASEPRI_MAX, r3
   27672:	f3bf 8f6f 	isb	sy
   27676:	4689      	mov	r9, r1
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   27678:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   2767c:	b30b      	cbz	r3, 276c2 <z_impl_k_poll+0x8a>
		SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, 0);

		return 0;
	}

	poller->is_polling = false;
   2767e:	2300      	movs	r3, #0
   27680:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   27684:	ea55 0306 	orrs.w	r3, r5, r6
   27688:	d026      	beq.n	276d8 <z_impl_k_poll+0xa0>
		return -EAGAIN;
	}

	static _wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);

	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   2768a:	9600      	str	r6, [sp, #0]
   2768c:	9501      	str	r5, [sp, #4]
   2768e:	4a17      	ldr	r2, [pc, #92]	; (276ec <z_impl_k_poll+0xb4>)
   27690:	4817      	ldr	r0, [pc, #92]	; (276f0 <z_impl_k_poll+0xb8>)
   27692:	f7ff fb47 	bl	26d24 <z_pend_curr>
   27696:	4604      	mov	r4, r0
   27698:	f04f 0340 	mov.w	r3, #64	; 0x40
   2769c:	f3ef 8211 	mrs	r2, BASEPRI
   276a0:	f383 8812 	msr	BASEPRI_MAX, r3
   276a4:	f3bf 8f6f 	isb	sy
   276a8:	4615      	mov	r5, r2
	 * we've already know the return code (-EAGAIN), and even if they are
	 * added to the list of events that occurred, the user has to check the
	 * return code first, which invalidates the whole list of event states.
	 */
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
   276aa:	4641      	mov	r1, r8
   276ac:	4638      	mov	r0, r7
   276ae:	f009 fb52 	bl	30d56 <clear_event_registrations>
	__asm__ volatile(
   276b2:	f385 8811 	msr	BASEPRI, r5
   276b6:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   276ba:	4620      	mov	r0, r4
   276bc:	b003      	add	sp, #12
   276be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		clear_event_registrations(events, events_registered, key);
   276c2:	460a      	mov	r2, r1
   276c4:	4601      	mov	r1, r0
   276c6:	4638      	mov	r0, r7
   276c8:	f009 fb45 	bl	30d56 <clear_event_registrations>
   276cc:	f389 8811 	msr	BASEPRI, r9
   276d0:	f3bf 8f6f 	isb	sy
		return 0;
   276d4:	2400      	movs	r4, #0
   276d6:	e7f0      	b.n	276ba <z_impl_k_poll+0x82>
   276d8:	f381 8811 	msr	BASEPRI, r1
   276dc:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   276e0:	f06f 040a 	mvn.w	r4, #10
   276e4:	e7e9      	b.n	276ba <z_impl_k_poll+0x82>
   276e6:	bf00      	nop
   276e8:	20009070 	.word	0x20009070
   276ec:	200009d4 	.word	0x200009d4
   276f0:	200090b4 	.word	0x200090b4

000276f4 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   276f4:	b538      	push	{r3, r4, r5, lr}
   276f6:	4603      	mov	r3, r0
	__asm__ volatile(
   276f8:	f04f 0240 	mov.w	r2, #64	; 0x40
   276fc:	f3ef 8511 	mrs	r5, BASEPRI
   27700:	f382 8812 	msr	BASEPRI_MAX, r2
   27704:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   27708:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   2770a:	2201      	movs	r2, #1
   2770c:	6082      	str	r2, [r0, #8]
	return list->head == list;
   2770e:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   27710:	4283      	cmp	r3, r0
   27712:	d010      	beq.n	27736 <z_impl_k_poll_signal_raise+0x42>
	sys_dnode_t *const prev = node->prev;
   27714:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
   27716:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
   27718:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2771a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2771c:	2300      	movs	r3, #0
   2771e:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   27720:	6043      	str	r3, [r0, #4]
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   27722:	2101      	movs	r1, #1
   27724:	f009 fc2d 	bl	30f82 <signal_poll_event>
   27728:	4604      	mov	r4, r0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
   2772a:	4629      	mov	r1, r5
   2772c:	4805      	ldr	r0, [pc, #20]	; (27744 <z_impl_k_poll_signal_raise+0x50>)
   2772e:	f7ff f995 	bl	26a5c <z_reschedule>
	return rc;
}
   27732:	4620      	mov	r0, r4
   27734:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   27736:	f385 8811 	msr	BASEPRI, r5
   2773a:	f3bf 8f6f 	isb	sy
		return 0;
   2773e:	2400      	movs	r4, #0
   27740:	e7f7      	b.n	27732 <z_impl_k_poll_signal_raise+0x3e>
   27742:	bf00      	nop
   27744:	200090b4 	.word	0x200090b4

00027748 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   27748:	b538      	push	{r3, r4, r5, lr}
   2774a:	4604      	mov	r4, r0
   2774c:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   2774e:	f008 fd96 	bl	3027e <k_is_in_isr>
   27752:	b948      	cbnz	r0, 27768 <z_thread_aligned_alloc+0x20>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   27754:	4b05      	ldr	r3, [pc, #20]	; (2776c <z_thread_aligned_alloc+0x24>)
   27756:	689b      	ldr	r3, [r3, #8]
   27758:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
	}

	if (heap != NULL) {
   2775c:	b118      	cbz	r0, 27766 <z_thread_aligned_alloc+0x1e>
		ret = z_heap_aligned_alloc(heap, align, size);
   2775e:	462a      	mov	r2, r5
   27760:	4621      	mov	r1, r4
   27762:	f009 fc47 	bl	30ff4 <z_heap_aligned_alloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   27766:	bd38      	pop	{r3, r4, r5, pc}
		ret = NULL;
   27768:	2000      	movs	r0, #0
	return ret;
   2776a:	e7fc      	b.n	27766 <z_thread_aligned_alloc+0x1e>
   2776c:	20009070 	.word	0x20009070

00027770 <boot_banner>:
#else
#define BANNER_VERSION KERNEL_VERSION_STRING
#endif

void boot_banner(void)
{
   27770:	b508      	push	{r3, lr}
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   27772:	4802      	ldr	r0, [pc, #8]	; (2777c <boot_banner+0xc>)
   27774:	f000 fc19 	bl	27faa <printk>
#endif /* CONFIG_BOOT_BANNER */
}
   27778:	bd08      	pop	{r3, pc}
   2777a:	bf00      	nop
   2777c:	00034a3c 	.word	0x00034a3c

00027780 <ocrypto_ecdh_p256_public_key>:
   27780:	b530      	push	{r4, r5, lr}
   27782:	b099      	sub	sp, #100	; 0x64
   27784:	4605      	mov	r5, r0
   27786:	4668      	mov	r0, sp
   27788:	f000 f828 	bl	277dc <ocrypto_sc_p256_from32bytes>
   2778c:	4669      	mov	r1, sp
   2778e:	4604      	mov	r4, r0
   27790:	a808      	add	r0, sp, #32
   27792:	f000 fa53 	bl	27c3c <ocrypto_curve_p256_scalarmult_base>
   27796:	a908      	add	r1, sp, #32
   27798:	4304      	orrs	r4, r0
   2779a:	4628      	mov	r0, r5
   2779c:	f000 f98a 	bl	27ab4 <ocrypto_curve_p256_to64bytes>
   277a0:	4620      	mov	r0, r4
   277a2:	b019      	add	sp, #100	; 0x64
   277a4:	bd30      	pop	{r4, r5, pc}
   277a6:	bf00      	nop

000277a8 <ocrypto_ecdh_p256_common_secret>:
   277a8:	b570      	push	{r4, r5, r6, lr}
   277aa:	b098      	sub	sp, #96	; 0x60
   277ac:	4605      	mov	r5, r0
   277ae:	4668      	mov	r0, sp
   277b0:	4616      	mov	r6, r2
   277b2:	f000 f813 	bl	277dc <ocrypto_sc_p256_from32bytes>
   277b6:	4631      	mov	r1, r6
   277b8:	4604      	mov	r4, r0
   277ba:	a808      	add	r0, sp, #32
   277bc:	f000 f946 	bl	27a4c <ocrypto_curve_p256_from64bytes>
   277c0:	a908      	add	r1, sp, #32
   277c2:	466a      	mov	r2, sp
   277c4:	4304      	orrs	r4, r0
   277c6:	4608      	mov	r0, r1
   277c8:	f000 f982 	bl	27ad0 <ocrypto_curve_p256_scalarmult>
   277cc:	a908      	add	r1, sp, #32
   277ce:	4304      	orrs	r4, r0
   277d0:	4628      	mov	r0, r5
   277d2:	f000 f96d 	bl	27ab0 <ocrypto_curve_p256_to32bytes>
   277d6:	4620      	mov	r0, r4
   277d8:	b018      	add	sp, #96	; 0x60
   277da:	bd70      	pop	{r4, r5, r6, pc}

000277dc <ocrypto_sc_p256_from32bytes>:
   277dc:	b570      	push	{r4, r5, r6, lr}
   277de:	680b      	ldr	r3, [r1, #0]
   277e0:	4e12      	ldr	r6, [pc, #72]	; (2782c <ocrypto_sc_p256_from32bytes+0x50>)
   277e2:	ba1b      	rev	r3, r3
   277e4:	61c3      	str	r3, [r0, #28]
   277e6:	684b      	ldr	r3, [r1, #4]
   277e8:	ba1b      	rev	r3, r3
   277ea:	6183      	str	r3, [r0, #24]
   277ec:	688b      	ldr	r3, [r1, #8]
   277ee:	ba1b      	rev	r3, r3
   277f0:	6143      	str	r3, [r0, #20]
   277f2:	68cb      	ldr	r3, [r1, #12]
   277f4:	ba1b      	rev	r3, r3
   277f6:	6103      	str	r3, [r0, #16]
   277f8:	690b      	ldr	r3, [r1, #16]
   277fa:	ba1b      	rev	r3, r3
   277fc:	60c3      	str	r3, [r0, #12]
   277fe:	694b      	ldr	r3, [r1, #20]
   27800:	ba1b      	rev	r3, r3
   27802:	6083      	str	r3, [r0, #8]
   27804:	698b      	ldr	r3, [r1, #24]
   27806:	ba1b      	rev	r3, r3
   27808:	6043      	str	r3, [r0, #4]
   2780a:	69cb      	ldr	r3, [r1, #28]
   2780c:	ba1b      	rev	r3, r3
   2780e:	4632      	mov	r2, r6
   27810:	6003      	str	r3, [r0, #0]
   27812:	4601      	mov	r1, r0
   27814:	4604      	mov	r4, r0
   27816:	f7d8 fcad 	bl	174 <ocrypto_bigint_sub256>
   2781a:	4631      	mov	r1, r6
   2781c:	4605      	mov	r5, r0
   2781e:	4602      	mov	r2, r0
   27820:	4620      	mov	r0, r4
   27822:	f7d8 fcc7 	bl	1b4 <ocrypto_bigint_cadd256>
   27826:	1e68      	subs	r0, r5, #1
   27828:	bd70      	pop	{r4, r5, r6, pc}
   2782a:	bf00      	nop
   2782c:	00034a6c 	.word	0x00034a6c

00027830 <p256_zdblu>:
   27830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27834:	b088      	sub	sp, #32
   27836:	460c      	mov	r4, r1
   27838:	4606      	mov	r6, r0
   2783a:	f102 0120 	add.w	r1, r2, #32
   2783e:	4668      	mov	r0, sp
   27840:	f106 0720 	add.w	r7, r6, #32
   27844:	4690      	mov	r8, r2
   27846:	f7d8 ff9f 	bl	788 <ocrypto_mod_p256_sqr>
   2784a:	466a      	mov	r2, sp
   2784c:	4669      	mov	r1, sp
   2784e:	4668      	mov	r0, sp
   27850:	f7d8 feac 	bl	5ac <ocrypto_mod_p256_add>
   27854:	4669      	mov	r1, sp
   27856:	4638      	mov	r0, r7
   27858:	f7d8 ff96 	bl	788 <ocrypto_mod_p256_sqr>
   2785c:	463a      	mov	r2, r7
   2785e:	4639      	mov	r1, r7
   27860:	4638      	mov	r0, r7
   27862:	f104 0520 	add.w	r5, r4, #32
   27866:	f7d8 fea1 	bl	5ac <ocrypto_mod_p256_add>
   2786a:	466a      	mov	r2, sp
   2786c:	4669      	mov	r1, sp
   2786e:	4668      	mov	r0, sp
   27870:	f7d8 fe9c 	bl	5ac <ocrypto_mod_p256_add>
   27874:	4641      	mov	r1, r8
   27876:	4628      	mov	r0, r5
   27878:	f7d8 ff86 	bl	788 <ocrypto_mod_p256_sqr>
   2787c:	466a      	mov	r2, sp
   2787e:	4641      	mov	r1, r8
   27880:	4630      	mov	r0, r6
   27882:	f7d8 ff69 	bl	758 <ocrypto_mod_p256_mul>
   27886:	462a      	mov	r2, r5
   27888:	4629      	mov	r1, r5
   2788a:	4668      	mov	r0, sp
   2788c:	f7d8 fe8e 	bl	5ac <ocrypto_mod_p256_add>
   27890:	462a      	mov	r2, r5
   27892:	4669      	mov	r1, sp
   27894:	4668      	mov	r0, sp
   27896:	f7d8 fe89 	bl	5ac <ocrypto_mod_p256_add>
   2789a:	4a12      	ldr	r2, [pc, #72]	; (278e4 <p256_zdblu+0xb4>)
   2789c:	4669      	mov	r1, sp
   2789e:	4668      	mov	r0, sp
   278a0:	f7d8 fe84 	bl	5ac <ocrypto_mod_p256_add>
   278a4:	4669      	mov	r1, sp
   278a6:	4620      	mov	r0, r4
   278a8:	f7d8 ff6e 	bl	788 <ocrypto_mod_p256_sqr>
   278ac:	4632      	mov	r2, r6
   278ae:	4621      	mov	r1, r4
   278b0:	4620      	mov	r0, r4
   278b2:	f7d8 feb9 	bl	628 <ocrypto_mod_p256_sub>
   278b6:	4632      	mov	r2, r6
   278b8:	4621      	mov	r1, r4
   278ba:	4620      	mov	r0, r4
   278bc:	f7d8 feb4 	bl	628 <ocrypto_mod_p256_sub>
   278c0:	4622      	mov	r2, r4
   278c2:	4631      	mov	r1, r6
   278c4:	4628      	mov	r0, r5
   278c6:	f7d8 feaf 	bl	628 <ocrypto_mod_p256_sub>
   278ca:	466a      	mov	r2, sp
   278cc:	4629      	mov	r1, r5
   278ce:	4628      	mov	r0, r5
   278d0:	f7d8 ff42 	bl	758 <ocrypto_mod_p256_mul>
   278d4:	463a      	mov	r2, r7
   278d6:	4629      	mov	r1, r5
   278d8:	4628      	mov	r0, r5
   278da:	f7d8 fea5 	bl	628 <ocrypto_mod_p256_sub>
   278de:	b008      	add	sp, #32
   278e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   278e4:	00034b0c 	.word	0x00034b0c

000278e8 <p256_zaddc>:
   278e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   278ea:	b099      	sub	sp, #100	; 0x64
   278ec:	4604      	mov	r4, r0
   278ee:	460d      	mov	r5, r1
   278f0:	460a      	mov	r2, r1
   278f2:	4601      	mov	r1, r0
   278f4:	4668      	mov	r0, sp
   278f6:	f7d8 fe97 	bl	628 <ocrypto_mod_p256_sub>
   278fa:	4669      	mov	r1, sp
   278fc:	4668      	mov	r0, sp
   278fe:	f7d8 ff43 	bl	788 <ocrypto_mod_p256_sqr>
   27902:	466a      	mov	r2, sp
   27904:	4621      	mov	r1, r4
   27906:	a808      	add	r0, sp, #32
   27908:	f105 0620 	add.w	r6, r5, #32
   2790c:	f104 0720 	add.w	r7, r4, #32
   27910:	f7d8 ff22 	bl	758 <ocrypto_mod_p256_mul>
   27914:	466a      	mov	r2, sp
   27916:	4629      	mov	r1, r5
   27918:	4668      	mov	r0, sp
   2791a:	f7d8 ff1d 	bl	758 <ocrypto_mod_p256_mul>
   2791e:	4632      	mov	r2, r6
   27920:	4639      	mov	r1, r7
   27922:	a810      	add	r0, sp, #64	; 0x40
   27924:	f7d8 fe42 	bl	5ac <ocrypto_mod_p256_add>
   27928:	4632      	mov	r2, r6
   2792a:	4639      	mov	r1, r7
   2792c:	4630      	mov	r0, r6
   2792e:	f7d8 fe7b 	bl	628 <ocrypto_mod_p256_sub>
   27932:	4631      	mov	r1, r6
   27934:	4628      	mov	r0, r5
   27936:	f7d8 ff27 	bl	788 <ocrypto_mod_p256_sqr>
   2793a:	466a      	mov	r2, sp
   2793c:	a908      	add	r1, sp, #32
   2793e:	4620      	mov	r0, r4
   27940:	f7d8 fe34 	bl	5ac <ocrypto_mod_p256_add>
   27944:	4622      	mov	r2, r4
   27946:	4629      	mov	r1, r5
   27948:	4628      	mov	r0, r5
   2794a:	f7d8 fe6d 	bl	628 <ocrypto_mod_p256_sub>
   2794e:	466a      	mov	r2, sp
   27950:	a908      	add	r1, sp, #32
   27952:	4668      	mov	r0, sp
   27954:	f7d8 fe68 	bl	628 <ocrypto_mod_p256_sub>
   27958:	466a      	mov	r2, sp
   2795a:	4639      	mov	r1, r7
   2795c:	4638      	mov	r0, r7
   2795e:	f7d8 fefb 	bl	758 <ocrypto_mod_p256_mul>
   27962:	462a      	mov	r2, r5
   27964:	a908      	add	r1, sp, #32
   27966:	4668      	mov	r0, sp
   27968:	f7d8 fe5e 	bl	628 <ocrypto_mod_p256_sub>
   2796c:	466a      	mov	r2, sp
   2796e:	4631      	mov	r1, r6
   27970:	4630      	mov	r0, r6
   27972:	f7d8 fef1 	bl	758 <ocrypto_mod_p256_mul>
   27976:	463a      	mov	r2, r7
   27978:	4631      	mov	r1, r6
   2797a:	4630      	mov	r0, r6
   2797c:	f7d8 fe54 	bl	628 <ocrypto_mod_p256_sub>
   27980:	a910      	add	r1, sp, #64	; 0x40
   27982:	4668      	mov	r0, sp
   27984:	f7d8 ff00 	bl	788 <ocrypto_mod_p256_sqr>
   27988:	4622      	mov	r2, r4
   2798a:	4669      	mov	r1, sp
   2798c:	4620      	mov	r0, r4
   2798e:	f7d8 fe4b 	bl	628 <ocrypto_mod_p256_sub>
   27992:	a908      	add	r1, sp, #32
   27994:	4622      	mov	r2, r4
   27996:	4608      	mov	r0, r1
   27998:	f7d8 fe46 	bl	628 <ocrypto_mod_p256_sub>
   2799c:	a910      	add	r1, sp, #64	; 0x40
   2799e:	aa08      	add	r2, sp, #32
   279a0:	4608      	mov	r0, r1
   279a2:	f7d8 fed9 	bl	758 <ocrypto_mod_p256_mul>
   279a6:	463a      	mov	r2, r7
   279a8:	a910      	add	r1, sp, #64	; 0x40
   279aa:	4638      	mov	r0, r7
   279ac:	f7d8 fe3c 	bl	628 <ocrypto_mod_p256_sub>
   279b0:	b019      	add	sp, #100	; 0x64
   279b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000279b4 <p256_zaddu>:
   279b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   279b8:	b088      	sub	sp, #32
   279ba:	460c      	mov	r4, r1
   279bc:	4605      	mov	r5, r0
   279be:	4690      	mov	r8, r2
   279c0:	460a      	mov	r2, r1
   279c2:	4601      	mov	r1, r0
   279c4:	4668      	mov	r0, sp
   279c6:	f7d8 fe2f 	bl	628 <ocrypto_mod_p256_sub>
   279ca:	4669      	mov	r1, sp
   279cc:	4668      	mov	r0, sp
   279ce:	f7d8 fedb 	bl	788 <ocrypto_mod_p256_sqr>
   279d2:	466a      	mov	r2, sp
   279d4:	4629      	mov	r1, r5
   279d6:	4628      	mov	r0, r5
   279d8:	f104 0620 	add.w	r6, r4, #32
   279dc:	f7d8 febc 	bl	758 <ocrypto_mod_p256_mul>
   279e0:	f105 0720 	add.w	r7, r5, #32
   279e4:	466a      	mov	r2, sp
   279e6:	4621      	mov	r1, r4
   279e8:	4668      	mov	r0, sp
   279ea:	f7d8 feb5 	bl	758 <ocrypto_mod_p256_mul>
   279ee:	4632      	mov	r2, r6
   279f0:	4639      	mov	r1, r7
   279f2:	4630      	mov	r0, r6
   279f4:	f7d8 fe18 	bl	628 <ocrypto_mod_p256_sub>
   279f8:	4631      	mov	r1, r6
   279fa:	4620      	mov	r0, r4
   279fc:	f7d8 fec4 	bl	788 <ocrypto_mod_p256_sqr>
   27a00:	462a      	mov	r2, r5
   27a02:	4621      	mov	r1, r4
   27a04:	4620      	mov	r0, r4
   27a06:	f7d8 fe0f 	bl	628 <ocrypto_mod_p256_sub>
   27a0a:	466a      	mov	r2, sp
   27a0c:	4621      	mov	r1, r4
   27a0e:	4620      	mov	r0, r4
   27a10:	f7d8 fe0a 	bl	628 <ocrypto_mod_p256_sub>
   27a14:	466a      	mov	r2, sp
   27a16:	4629      	mov	r1, r5
   27a18:	4640      	mov	r0, r8
   27a1a:	f7d8 fe05 	bl	628 <ocrypto_mod_p256_sub>
   27a1e:	4642      	mov	r2, r8
   27a20:	4639      	mov	r1, r7
   27a22:	4638      	mov	r0, r7
   27a24:	f7d8 fe98 	bl	758 <ocrypto_mod_p256_mul>
   27a28:	4622      	mov	r2, r4
   27a2a:	4629      	mov	r1, r5
   27a2c:	4668      	mov	r0, sp
   27a2e:	f7d8 fdfb 	bl	628 <ocrypto_mod_p256_sub>
   27a32:	466a      	mov	r2, sp
   27a34:	4631      	mov	r1, r6
   27a36:	4630      	mov	r0, r6
   27a38:	f7d8 fe8e 	bl	758 <ocrypto_mod_p256_mul>
   27a3c:	463a      	mov	r2, r7
   27a3e:	4631      	mov	r1, r6
   27a40:	4630      	mov	r0, r6
   27a42:	f7d8 fdf1 	bl	628 <ocrypto_mod_p256_sub>
   27a46:	b008      	add	sp, #32
   27a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00027a4c <ocrypto_curve_p256_from64bytes>:
   27a4c:	b570      	push	{r4, r5, r6, lr}
   27a4e:	f100 0620 	add.w	r6, r0, #32
   27a52:	b090      	sub	sp, #64	; 0x40
   27a54:	460d      	mov	r5, r1
   27a56:	4604      	mov	r4, r0
   27a58:	f000 f914 	bl	27c84 <ocrypto_mod_p256_from_bytes>
   27a5c:	f105 0120 	add.w	r1, r5, #32
   27a60:	4630      	mov	r0, r6
   27a62:	f000 f90f 	bl	27c84 <ocrypto_mod_p256_from_bytes>
   27a66:	4621      	mov	r1, r4
   27a68:	a808      	add	r0, sp, #32
   27a6a:	f7d8 fe8d 	bl	788 <ocrypto_mod_p256_sqr>
   27a6e:	a908      	add	r1, sp, #32
   27a70:	4608      	mov	r0, r1
   27a72:	4a0d      	ldr	r2, [pc, #52]	; (27aa8 <ocrypto_curve_p256_from64bytes+0x5c>)
   27a74:	f7d8 fd9a 	bl	5ac <ocrypto_mod_p256_add>
   27a78:	a908      	add	r1, sp, #32
   27a7a:	4622      	mov	r2, r4
   27a7c:	4608      	mov	r0, r1
   27a7e:	f7d8 fe6b 	bl	758 <ocrypto_mod_p256_mul>
   27a82:	a908      	add	r1, sp, #32
   27a84:	4a09      	ldr	r2, [pc, #36]	; (27aac <ocrypto_curve_p256_from64bytes+0x60>)
   27a86:	4608      	mov	r0, r1
   27a88:	f7d8 fd90 	bl	5ac <ocrypto_mod_p256_add>
   27a8c:	4631      	mov	r1, r6
   27a8e:	4668      	mov	r0, sp
   27a90:	f7d8 fe7a 	bl	788 <ocrypto_mod_p256_sqr>
   27a94:	2220      	movs	r2, #32
   27a96:	4669      	mov	r1, sp
   27a98:	eb0d 0002 	add.w	r0, sp, r2
   27a9c:	f7d8 fd58 	bl	550 <ocrypto_constant_time_equal>
   27aa0:	3801      	subs	r0, #1
   27aa2:	b010      	add	sp, #64	; 0x40
   27aa4:	bd70      	pop	{r4, r5, r6, pc}
   27aa6:	bf00      	nop
   27aa8:	00034b0c 	.word	0x00034b0c
   27aac:	00034b2c 	.word	0x00034b2c

00027ab0 <ocrypto_curve_p256_to32bytes>:
   27ab0:	f000 b902 	b.w	27cb8 <ocrypto_mod_p256_to_bytes>

00027ab4 <ocrypto_curve_p256_to64bytes>:
   27ab4:	b538      	push	{r3, r4, r5, lr}
   27ab6:	4604      	mov	r4, r0
   27ab8:	460d      	mov	r5, r1
   27aba:	f000 f8fd 	bl	27cb8 <ocrypto_mod_p256_to_bytes>
   27abe:	f105 0120 	add.w	r1, r5, #32
   27ac2:	f104 0020 	add.w	r0, r4, #32
   27ac6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   27aca:	f000 b8f5 	b.w	27cb8 <ocrypto_mod_p256_to_bytes>
   27ace:	bf00      	nop

00027ad0 <ocrypto_curve_p256_scalarmult>:
   27ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   27ad4:	4613      	mov	r3, r2
   27ad6:	b0b8      	sub	sp, #224	; 0xe0
   27ad8:	4a54      	ldr	r2, [pc, #336]	; (27c2c <ocrypto_curve_p256_scalarmult+0x15c>)
   27ada:	4689      	mov	r9, r1
   27adc:	4680      	mov	r8, r0
   27ade:	4619      	mov	r1, r3
   27ae0:	a810      	add	r0, sp, #64	; 0x40
   27ae2:	f7d8 fb47 	bl	174 <ocrypto_bigint_sub256>
   27ae6:	4952      	ldr	r1, [pc, #328]	; (27c30 <ocrypto_curve_p256_scalarmult+0x160>)
   27ae8:	4602      	mov	r2, r0
   27aea:	a810      	add	r0, sp, #64	; 0x40
   27aec:	f7d8 fb62 	bl	1b4 <ocrypto_bigint_cadd256>
   27af0:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   27af2:	494e      	ldr	r1, [pc, #312]	; (27c2c <ocrypto_curve_p256_scalarmult+0x15c>)
   27af4:	ea00 76d6 	and.w	r6, r0, r6, lsr #31
   27af8:	4607      	mov	r7, r0
   27afa:	f1c6 0201 	rsb	r2, r6, #1
   27afe:	a810      	add	r0, sp, #64	; 0x40
   27b00:	f7d8 fb58 	bl	1b4 <ocrypto_bigint_cadd256>
   27b04:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   27b06:	464a      	mov	r2, r9
   27b08:	ea6f 0a03 	mvn.w	sl, r3
   27b0c:	a928      	add	r1, sp, #160	; 0xa0
   27b0e:	a818      	add	r0, sp, #96	; 0x60
   27b10:	f7ff fe8e 	bl	27830 <p256_zdblu>
   27b14:	ea4f 7ada 	mov.w	sl, sl, lsr #31
   27b18:	a920      	add	r1, sp, #128	; 0x80
   27b1a:	f1ca 0201 	rsb	r2, sl, #1
   27b1e:	4608      	mov	r0, r1
   27b20:	f000 f892 	bl	27c48 <ocrypto_mod_p256_cneg>
   27b24:	f1c7 0701 	rsb	r7, r7, #1
   27b28:	24fe      	movs	r4, #254	; 0xfe
   27b2a:	466a      	mov	r2, sp
   27b2c:	a918      	add	r1, sp, #96	; 0x60
   27b2e:	a828      	add	r0, sp, #160	; 0xa0
   27b30:	f7ff ff40 	bl	279b4 <p256_zaddu>
   27b34:	1162      	asrs	r2, r4, #5
   27b36:	ab38      	add	r3, sp, #224	; 0xe0
   27b38:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   27b3c:	f004 011f 	and.w	r1, r4, #31
   27b40:	f852 3ca0 	ldr.w	r3, [r2, #-160]
   27b44:	40cb      	lsrs	r3, r1
   27b46:	4655      	mov	r5, sl
   27b48:	f003 0a01 	and.w	sl, r3, #1
   27b4c:	ea8a 0505 	eor.w	r5, sl, r5
   27b50:	462a      	mov	r2, r5
   27b52:	a928      	add	r1, sp, #160	; 0xa0
   27b54:	a818      	add	r0, sp, #96	; 0x60
   27b56:	f7d8 fb89 	bl	26c <ocrypto_bigint_cswap256>
   27b5a:	462a      	mov	r2, r5
   27b5c:	a930      	add	r1, sp, #192	; 0xc0
   27b5e:	a820      	add	r0, sp, #128	; 0x80
   27b60:	f7d8 fb84 	bl	26c <ocrypto_bigint_cswap256>
   27b64:	3c01      	subs	r4, #1
   27b66:	a928      	add	r1, sp, #160	; 0xa0
   27b68:	a818      	add	r0, sp, #96	; 0x60
   27b6a:	f7ff febd 	bl	278e8 <p256_zaddc>
   27b6e:	1c63      	adds	r3, r4, #1
   27b70:	d1db      	bne.n	27b2a <ocrypto_curve_p256_scalarmult+0x5a>
   27b72:	f1ca 0201 	rsb	r2, sl, #1
   27b76:	a920      	add	r1, sp, #128	; 0x80
   27b78:	a808      	add	r0, sp, #32
   27b7a:	f000 f865 	bl	27c48 <ocrypto_mod_p256_cneg>
   27b7e:	ea86 060a 	eor.w	r6, r6, sl
   27b82:	466a      	mov	r2, sp
   27b84:	a918      	add	r1, sp, #96	; 0x60
   27b86:	a828      	add	r0, sp, #160	; 0xa0
   27b88:	f7ff ff14 	bl	279b4 <p256_zaddu>
   27b8c:	a928      	add	r1, sp, #160	; 0xa0
   27b8e:	4632      	mov	r2, r6
   27b90:	a818      	add	r0, sp, #96	; 0x60
   27b92:	f7d8 fb6b 	bl	26c <ocrypto_bigint_cswap256>
   27b96:	4632      	mov	r2, r6
   27b98:	a930      	add	r1, sp, #192	; 0xc0
   27b9a:	a820      	add	r0, sp, #128	; 0x80
   27b9c:	f7d8 fb66 	bl	26c <ocrypto_bigint_cswap256>
   27ba0:	a908      	add	r1, sp, #32
   27ba2:	466a      	mov	r2, sp
   27ba4:	4608      	mov	r0, r1
   27ba6:	f7d8 fdd7 	bl	758 <ocrypto_mod_p256_mul>
   27baa:	a908      	add	r1, sp, #32
   27bac:	4608      	mov	r0, r1
   27bae:	f000 f89d 	bl	27cec <ocrypto_mod_p256_inv>
   27bb2:	a908      	add	r1, sp, #32
   27bb4:	f108 0420 	add.w	r4, r8, #32
   27bb8:	f109 0220 	add.w	r2, r9, #32
   27bbc:	4608      	mov	r0, r1
   27bbe:	f7d8 fdcb 	bl	758 <ocrypto_mod_p256_mul>
   27bc2:	a920      	add	r1, sp, #128	; 0x80
   27bc4:	aa08      	add	r2, sp, #32
   27bc6:	4620      	mov	r0, r4
   27bc8:	f7d8 fdc6 	bl	758 <ocrypto_mod_p256_mul>
   27bcc:	aa08      	add	r2, sp, #32
   27bce:	a918      	add	r1, sp, #96	; 0x60
   27bd0:	4668      	mov	r0, sp
   27bd2:	f7d8 fdc1 	bl	758 <ocrypto_mod_p256_mul>
   27bd6:	4669      	mov	r1, sp
   27bd8:	4668      	mov	r0, sp
   27bda:	f7d8 fdd5 	bl	788 <ocrypto_mod_p256_sqr>
   27bde:	aa18      	add	r2, sp, #96	; 0x60
   27be0:	4669      	mov	r1, sp
   27be2:	a808      	add	r0, sp, #32
   27be4:	f7d8 fdb8 	bl	758 <ocrypto_mod_p256_mul>
   27be8:	4621      	mov	r1, r4
   27bea:	4668      	mov	r0, sp
   27bec:	f7d8 fdcc 	bl	788 <ocrypto_mod_p256_sqr>
   27bf0:	aa08      	add	r2, sp, #32
   27bf2:	4669      	mov	r1, sp
   27bf4:	4610      	mov	r0, r2
   27bf6:	f7d8 fd17 	bl	628 <ocrypto_mod_p256_sub>
   27bfa:	4a0e      	ldr	r2, [pc, #56]	; (27c34 <ocrypto_curve_p256_scalarmult+0x164>)
   27bfc:	a908      	add	r1, sp, #32
   27bfe:	4668      	mov	r0, sp
   27c00:	f7d8 fd12 	bl	628 <ocrypto_mod_p256_sub>
   27c04:	4620      	mov	r0, r4
   27c06:	2120      	movs	r1, #32
   27c08:	f7d8 fcb6 	bl	578 <ocrypto_constant_time_is_zero>
   27c0c:	a908      	add	r1, sp, #32
   27c0e:	4243      	negs	r3, r0
   27c10:	4602      	mov	r2, r0
   27c12:	4668      	mov	r0, sp
   27c14:	431f      	orrs	r7, r3
   27c16:	f7d8 fb29 	bl	26c <ocrypto_bigint_cswap256>
   27c1a:	4640      	mov	r0, r8
   27c1c:	4a06      	ldr	r2, [pc, #24]	; (27c38 <ocrypto_curve_p256_scalarmult+0x168>)
   27c1e:	4669      	mov	r1, sp
   27c20:	f7d8 fd9a 	bl	758 <ocrypto_mod_p256_mul>
   27c24:	4638      	mov	r0, r7
   27c26:	b038      	add	sp, #224	; 0xe0
   27c28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   27c2c:	00034b4c 	.word	0x00034b4c
   27c30:	00034acc 	.word	0x00034acc
   27c34:	00034b2c 	.word	0x00034b2c
   27c38:	00034aec 	.word	0x00034aec

00027c3c <ocrypto_curve_p256_scalarmult_base>:
   27c3c:	460a      	mov	r2, r1
   27c3e:	4901      	ldr	r1, [pc, #4]	; (27c44 <ocrypto_curve_p256_scalarmult_base+0x8>)
   27c40:	f7ff bf46 	b.w	27ad0 <ocrypto_curve_p256_scalarmult>
   27c44:	00034a8c 	.word	0x00034a8c

00027c48 <ocrypto_mod_p256_cneg>:
   27c48:	b570      	push	{r4, r5, r6, lr}
   27c4a:	b088      	sub	sp, #32
   27c4c:	4604      	mov	r4, r0
   27c4e:	460d      	mov	r5, r1
   27c50:	4616      	mov	r6, r2
   27c52:	2100      	movs	r1, #0
   27c54:	2220      	movs	r2, #32
   27c56:	4668      	mov	r0, sp
   27c58:	f001 ffda 	bl	29c10 <memset>
   27c5c:	2300      	movs	r3, #0
   27c5e:	4629      	mov	r1, r5
   27c60:	2220      	movs	r2, #32
   27c62:	4620      	mov	r0, r4
   27c64:	9300      	str	r3, [sp, #0]
   27c66:	f001 ffa4 	bl	29bb2 <memcpy>
   27c6a:	462a      	mov	r2, r5
   27c6c:	4669      	mov	r1, sp
   27c6e:	4668      	mov	r0, sp
   27c70:	f7d8 fcda 	bl	628 <ocrypto_mod_p256_sub>
   27c74:	4632      	mov	r2, r6
   27c76:	4669      	mov	r1, sp
   27c78:	4620      	mov	r0, r4
   27c7a:	f7d8 faf7 	bl	26c <ocrypto_bigint_cswap256>
   27c7e:	b008      	add	sp, #32
   27c80:	bd70      	pop	{r4, r5, r6, pc}
   27c82:	bf00      	nop

00027c84 <ocrypto_mod_p256_from_bytes>:
   27c84:	680b      	ldr	r3, [r1, #0]
   27c86:	ba1b      	rev	r3, r3
   27c88:	61c3      	str	r3, [r0, #28]
   27c8a:	684b      	ldr	r3, [r1, #4]
   27c8c:	ba1b      	rev	r3, r3
   27c8e:	6183      	str	r3, [r0, #24]
   27c90:	688b      	ldr	r3, [r1, #8]
   27c92:	ba1b      	rev	r3, r3
   27c94:	6143      	str	r3, [r0, #20]
   27c96:	68cb      	ldr	r3, [r1, #12]
   27c98:	ba1b      	rev	r3, r3
   27c9a:	6103      	str	r3, [r0, #16]
   27c9c:	690b      	ldr	r3, [r1, #16]
   27c9e:	ba1b      	rev	r3, r3
   27ca0:	60c3      	str	r3, [r0, #12]
   27ca2:	694b      	ldr	r3, [r1, #20]
   27ca4:	ba1b      	rev	r3, r3
   27ca6:	6083      	str	r3, [r0, #8]
   27ca8:	698b      	ldr	r3, [r1, #24]
   27caa:	ba1b      	rev	r3, r3
   27cac:	6043      	str	r3, [r0, #4]
   27cae:	69cb      	ldr	r3, [r1, #28]
   27cb0:	ba1b      	rev	r3, r3
   27cb2:	6003      	str	r3, [r0, #0]
   27cb4:	4770      	bx	lr
   27cb6:	bf00      	nop

00027cb8 <ocrypto_mod_p256_to_bytes>:
   27cb8:	69cb      	ldr	r3, [r1, #28]
   27cba:	ba1b      	rev	r3, r3
   27cbc:	6003      	str	r3, [r0, #0]
   27cbe:	698b      	ldr	r3, [r1, #24]
   27cc0:	ba1b      	rev	r3, r3
   27cc2:	6043      	str	r3, [r0, #4]
   27cc4:	694b      	ldr	r3, [r1, #20]
   27cc6:	ba1b      	rev	r3, r3
   27cc8:	6083      	str	r3, [r0, #8]
   27cca:	690b      	ldr	r3, [r1, #16]
   27ccc:	ba1b      	rev	r3, r3
   27cce:	60c3      	str	r3, [r0, #12]
   27cd0:	68cb      	ldr	r3, [r1, #12]
   27cd2:	ba1b      	rev	r3, r3
   27cd4:	6103      	str	r3, [r0, #16]
   27cd6:	688b      	ldr	r3, [r1, #8]
   27cd8:	ba1b      	rev	r3, r3
   27cda:	6143      	str	r3, [r0, #20]
   27cdc:	684b      	ldr	r3, [r1, #4]
   27cde:	ba1b      	rev	r3, r3
   27ce0:	6183      	str	r3, [r0, #24]
   27ce2:	680b      	ldr	r3, [r1, #0]
   27ce4:	ba1b      	rev	r3, r3
   27ce6:	61c3      	str	r3, [r0, #28]
   27ce8:	4770      	bx	lr
   27cea:	bf00      	nop

00027cec <ocrypto_mod_p256_inv>:
   27cec:	b570      	push	{r4, r5, r6, lr}
   27cee:	b098      	sub	sp, #96	; 0x60
   27cf0:	460d      	mov	r5, r1
   27cf2:	4606      	mov	r6, r0
   27cf4:	a810      	add	r0, sp, #64	; 0x40
   27cf6:	f7d8 fd47 	bl	788 <ocrypto_mod_p256_sqr>
   27cfa:	462a      	mov	r2, r5
   27cfc:	a910      	add	r1, sp, #64	; 0x40
   27cfe:	4668      	mov	r0, sp
   27d00:	f7d8 fd2a 	bl	758 <ocrypto_mod_p256_mul>
   27d04:	4669      	mov	r1, sp
   27d06:	a810      	add	r0, sp, #64	; 0x40
   27d08:	f7d8 fd3e 	bl	788 <ocrypto_mod_p256_sqr>
   27d0c:	a910      	add	r1, sp, #64	; 0x40
   27d0e:	4608      	mov	r0, r1
   27d10:	f7d8 fd3a 	bl	788 <ocrypto_mod_p256_sqr>
   27d14:	466a      	mov	r2, sp
   27d16:	a910      	add	r1, sp, #64	; 0x40
   27d18:	a808      	add	r0, sp, #32
   27d1a:	f7d8 fd1d 	bl	758 <ocrypto_mod_p256_mul>
   27d1e:	a908      	add	r1, sp, #32
   27d20:	a810      	add	r0, sp, #64	; 0x40
   27d22:	f7d8 fd31 	bl	788 <ocrypto_mod_p256_sqr>
   27d26:	a910      	add	r1, sp, #64	; 0x40
   27d28:	4608      	mov	r0, r1
   27d2a:	f7d8 fd2d 	bl	788 <ocrypto_mod_p256_sqr>
   27d2e:	a910      	add	r1, sp, #64	; 0x40
   27d30:	4608      	mov	r0, r1
   27d32:	f7d8 fd29 	bl	788 <ocrypto_mod_p256_sqr>
   27d36:	a910      	add	r1, sp, #64	; 0x40
   27d38:	4608      	mov	r0, r1
   27d3a:	f7d8 fd25 	bl	788 <ocrypto_mod_p256_sqr>
   27d3e:	a910      	add	r1, sp, #64	; 0x40
   27d40:	aa08      	add	r2, sp, #32
   27d42:	4608      	mov	r0, r1
   27d44:	f7d8 fd08 	bl	758 <ocrypto_mod_p256_mul>
   27d48:	a910      	add	r1, sp, #64	; 0x40
   27d4a:	4608      	mov	r0, r1
   27d4c:	f7d8 fd1c 	bl	788 <ocrypto_mod_p256_sqr>
   27d50:	a910      	add	r1, sp, #64	; 0x40
   27d52:	4608      	mov	r0, r1
   27d54:	f7d8 fd18 	bl	788 <ocrypto_mod_p256_sqr>
   27d58:	a910      	add	r1, sp, #64	; 0x40
   27d5a:	466a      	mov	r2, sp
   27d5c:	a808      	add	r0, sp, #32
   27d5e:	f7d8 fcfb 	bl	758 <ocrypto_mod_p256_mul>
   27d62:	2405      	movs	r4, #5
   27d64:	a908      	add	r1, sp, #32
   27d66:	a810      	add	r0, sp, #64	; 0x40
   27d68:	f7d8 fd0e 	bl	788 <ocrypto_mod_p256_sqr>
   27d6c:	a910      	add	r1, sp, #64	; 0x40
   27d6e:	4608      	mov	r0, r1
   27d70:	f7d8 fd0a 	bl	788 <ocrypto_mod_p256_sqr>
   27d74:	3c01      	subs	r4, #1
   27d76:	a910      	add	r1, sp, #64	; 0x40
   27d78:	d1f5      	bne.n	27d66 <ocrypto_mod_p256_inv+0x7a>
   27d7a:	aa08      	add	r2, sp, #32
   27d7c:	4608      	mov	r0, r1
   27d7e:	f7d8 fceb 	bl	758 <ocrypto_mod_p256_mul>
   27d82:	2405      	movs	r4, #5
   27d84:	a910      	add	r1, sp, #64	; 0x40
   27d86:	4608      	mov	r0, r1
   27d88:	f7d8 fcfe 	bl	788 <ocrypto_mod_p256_sqr>
   27d8c:	a910      	add	r1, sp, #64	; 0x40
   27d8e:	4608      	mov	r0, r1
   27d90:	f7d8 fcfa 	bl	788 <ocrypto_mod_p256_sqr>
   27d94:	3c01      	subs	r4, #1
   27d96:	d1f5      	bne.n	27d84 <ocrypto_mod_p256_inv+0x98>
   27d98:	a910      	add	r1, sp, #64	; 0x40
   27d9a:	aa08      	add	r2, sp, #32
   27d9c:	4608      	mov	r0, r1
   27d9e:	f7d8 fcdb 	bl	758 <ocrypto_mod_p256_mul>
   27da2:	a910      	add	r1, sp, #64	; 0x40
   27da4:	a808      	add	r0, sp, #32
   27da6:	f7d8 fcef 	bl	788 <ocrypto_mod_p256_sqr>
   27daa:	a908      	add	r1, sp, #32
   27dac:	4608      	mov	r0, r1
   27dae:	f7d8 fceb 	bl	788 <ocrypto_mod_p256_sqr>
   27db2:	a908      	add	r1, sp, #32
   27db4:	466a      	mov	r2, sp
   27db6:	4668      	mov	r0, sp
   27db8:	f7d8 fcce 	bl	758 <ocrypto_mod_p256_mul>
   27dbc:	2410      	movs	r4, #16
   27dbe:	4669      	mov	r1, sp
   27dc0:	a810      	add	r0, sp, #64	; 0x40
   27dc2:	f7d8 fce1 	bl	788 <ocrypto_mod_p256_sqr>
   27dc6:	a910      	add	r1, sp, #64	; 0x40
   27dc8:	4608      	mov	r0, r1
   27dca:	f7d8 fcdd 	bl	788 <ocrypto_mod_p256_sqr>
   27dce:	3c01      	subs	r4, #1
   27dd0:	a910      	add	r1, sp, #64	; 0x40
   27dd2:	d1f5      	bne.n	27dc0 <ocrypto_mod_p256_inv+0xd4>
   27dd4:	462a      	mov	r2, r5
   27dd6:	4608      	mov	r0, r1
   27dd8:	f7d8 fcbe 	bl	758 <ocrypto_mod_p256_mul>
   27ddc:	2440      	movs	r4, #64	; 0x40
   27dde:	a910      	add	r1, sp, #64	; 0x40
   27de0:	4608      	mov	r0, r1
   27de2:	f7d8 fcd1 	bl	788 <ocrypto_mod_p256_sqr>
   27de6:	a910      	add	r1, sp, #64	; 0x40
   27de8:	4608      	mov	r0, r1
   27dea:	f7d8 fccd 	bl	788 <ocrypto_mod_p256_sqr>
   27dee:	3c01      	subs	r4, #1
   27df0:	d1f5      	bne.n	27dde <ocrypto_mod_p256_inv+0xf2>
   27df2:	a910      	add	r1, sp, #64	; 0x40
   27df4:	466a      	mov	r2, sp
   27df6:	4608      	mov	r0, r1
   27df8:	f7d8 fcae 	bl	758 <ocrypto_mod_p256_mul>
   27dfc:	2410      	movs	r4, #16
   27dfe:	a910      	add	r1, sp, #64	; 0x40
   27e00:	4608      	mov	r0, r1
   27e02:	f7d8 fcc1 	bl	788 <ocrypto_mod_p256_sqr>
   27e06:	a910      	add	r1, sp, #64	; 0x40
   27e08:	4608      	mov	r0, r1
   27e0a:	f7d8 fcbd 	bl	788 <ocrypto_mod_p256_sqr>
   27e0e:	3c01      	subs	r4, #1
   27e10:	d1f5      	bne.n	27dfe <ocrypto_mod_p256_inv+0x112>
   27e12:	a910      	add	r1, sp, #64	; 0x40
   27e14:	466a      	mov	r2, sp
   27e16:	4608      	mov	r0, r1
   27e18:	f7d8 fc9e 	bl	758 <ocrypto_mod_p256_mul>
   27e1c:	2410      	movs	r4, #16
   27e1e:	a910      	add	r1, sp, #64	; 0x40
   27e20:	4608      	mov	r0, r1
   27e22:	f7d8 fcb1 	bl	788 <ocrypto_mod_p256_sqr>
   27e26:	a910      	add	r1, sp, #64	; 0x40
   27e28:	4608      	mov	r0, r1
   27e2a:	f7d8 fcad 	bl	788 <ocrypto_mod_p256_sqr>
   27e2e:	3c01      	subs	r4, #1
   27e30:	d1f5      	bne.n	27e1e <ocrypto_mod_p256_inv+0x132>
   27e32:	a910      	add	r1, sp, #64	; 0x40
   27e34:	aa08      	add	r2, sp, #32
   27e36:	4608      	mov	r0, r1
   27e38:	f7d8 fc8e 	bl	758 <ocrypto_mod_p256_mul>
   27e3c:	462a      	mov	r2, r5
   27e3e:	a910      	add	r1, sp, #64	; 0x40
   27e40:	4630      	mov	r0, r6
   27e42:	f7d8 fc89 	bl	758 <ocrypto_mod_p256_mul>
   27e46:	b018      	add	sp, #96	; 0x60
   27e48:	bd70      	pop	{r4, r5, r6, pc}
   27e4a:	bf00      	nop

00027e4c <cbprintf_via_va_list>:
{
   27e4c:	b510      	push	{r4, lr}
   27e4e:	460c      	mov	r4, r1
   27e50:	4611      	mov	r1, r2
   27e52:	461a      	mov	r2, r3
	return formatter(out, ctx, fmt, u.ap);
   27e54:	9b02      	ldr	r3, [sp, #8]
   27e56:	47a0      	blx	r4
}
   27e58:	bd10      	pop	{r4, pc}

00027e5a <is_fmt_spec>:
	return (c >= 64) && (c <= 122);
   27e5a:	3840      	subs	r0, #64	; 0x40
   27e5c:	b2c0      	uxtb	r0, r0
}
   27e5e:	283a      	cmp	r0, #58	; 0x3a
   27e60:	bf8c      	ite	hi
   27e62:	2000      	movhi	r0, #0
   27e64:	2001      	movls	r0, #1
   27e66:	4770      	bx	lr

00027e68 <get_package_len>:
{
   27e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27e6a:	4606      	mov	r6, r0
	args_size = buf[0] * sizeof(int);
   27e6c:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
   27e6e:	7845      	ldrb	r5, [r0, #1]
	ros_nbr   = buf[2];
   27e70:	7884      	ldrb	r4, [r0, #2]
	buf += ros_nbr;
   27e72:	eb04 0483 	add.w	r4, r4, r3, lsl #2
   27e76:	4404      	add	r4, r0
	for (int i = 0; i < s_nbr; i++) {
   27e78:	2700      	movs	r7, #0
   27e7a:	e006      	b.n	27e8a <get_package_len+0x22>
		buf++;
   27e7c:	3401      	adds	r4, #1
		buf += strlen((const char *)buf) + 1;
   27e7e:	4620      	mov	r0, r4
   27e80:	f001 fe49 	bl	29b16 <strlen>
   27e84:	3001      	adds	r0, #1
   27e86:	4404      	add	r4, r0
	for (int i = 0; i < s_nbr; i++) {
   27e88:	3701      	adds	r7, #1
   27e8a:	42af      	cmp	r7, r5
   27e8c:	d3f6      	bcc.n	27e7c <get_package_len+0x14>
}
   27e8e:	1ba0      	subs	r0, r4, r6
   27e90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00027e92 <append_string>:
{
   27e92:	b570      	push	{r4, r5, r6, lr}
   27e94:	4614      	mov	r4, r2
	if (cb == NULL) {
   27e96:	b138      	cbz	r0, 27ea8 <append_string+0x16>
   27e98:	460d      	mov	r5, r1
   27e9a:	4619      	mov	r1, r3
   27e9c:	4606      	mov	r6, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
   27e9e:	b143      	cbz	r3, 27eb2 <append_string+0x20>
	return cb(str, strl, ctx);
   27ea0:	462a      	mov	r2, r5
   27ea2:	4620      	mov	r0, r4
   27ea4:	47b0      	blx	r6
}
   27ea6:	bd70      	pop	{r4, r5, r6, pc}
		return 1 + strlen(str);
   27ea8:	4610      	mov	r0, r2
   27eaa:	f001 fe34 	bl	29b16 <strlen>
   27eae:	3001      	adds	r0, #1
   27eb0:	e7f9      	b.n	27ea6 <append_string+0x14>
	strl = strl > 0 ? strl : strlen(str) + 1;
   27eb2:	4610      	mov	r0, r2
   27eb4:	f001 fe2f 	bl	29b16 <strlen>
   27eb8:	b283      	uxth	r3, r0
   27eba:	3301      	adds	r3, #1
   27ebc:	b299      	uxth	r1, r3
   27ebe:	e7ef      	b.n	27ea0 <append_string+0xe>

00027ec0 <cbpprintf_external>:
	if (buf == NULL) {
   27ec0:	b35b      	cbz	r3, 27f1a <cbpprintf_external+0x5a>
{
   27ec2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   27ec6:	b082      	sub	sp, #8
   27ec8:	4607      	mov	r7, r0
   27eca:	4688      	mov	r8, r1
   27ecc:	4691      	mov	r9, r2
   27ece:	461d      	mov	r5, r3
	args_size = hdr->hdr.desc.len * sizeof(int);
   27ed0:	781a      	ldrb	r2, [r3, #0]
	s_nbr     = hdr->hdr.desc.str_cnt;
   27ed2:	785e      	ldrb	r6, [r3, #1]
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
   27ed4:	789c      	ldrb	r4, [r3, #2]
	rws_nbr   = hdr->hdr.desc.rw_str_cnt;
   27ed6:	78db      	ldrb	r3, [r3, #3]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   27ed8:	eb04 0482 	add.w	r4, r4, r2, lsl #2
   27edc:	eb04 0443 	add.w	r4, r4, r3, lsl #1
   27ee0:	442c      	add	r4, r5
	for (i = 0; i < s_nbr; i++) {
   27ee2:	f04f 0a00 	mov.w	sl, #0
   27ee6:	e00a      	b.n	27efe <cbpprintf_external+0x3e>
		s_idx = *(uint8_t *)s++;
   27ee8:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
   27eec:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		s += strlen(s) + 1;
   27ef0:	4620      	mov	r0, r4
   27ef2:	f001 fe10 	bl	29b16 <strlen>
   27ef6:	3001      	adds	r0, #1
   27ef8:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   27efa:	f10a 0a01 	add.w	sl, sl, #1
   27efe:	45b2      	cmp	sl, r6
   27f00:	d3f2      	bcc.n	27ee8 <cbpprintf_external+0x28>
	buf += sizeof(*hdr);
   27f02:	f105 0308 	add.w	r3, r5, #8
	return cbprintf_via_va_list(out, formatter, ctx, hdr->fmt, buf);
   27f06:	9300      	str	r3, [sp, #0]
   27f08:	686b      	ldr	r3, [r5, #4]
   27f0a:	464a      	mov	r2, r9
   27f0c:	4641      	mov	r1, r8
   27f0e:	4638      	mov	r0, r7
   27f10:	f7ff ff9c 	bl	27e4c <cbprintf_via_va_list>
}
   27f14:	b002      	add	sp, #8
   27f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -EINVAL;
   27f1a:	f06f 0015 	mvn.w	r0, #21
}
   27f1e:	4770      	bx	lr

00027f20 <is_ptr>:
{
   27f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27f24:	4604      	mov	r4, r0
   27f26:	4688      	mov	r8, r1
	int cnt = 0;
   27f28:	2700      	movs	r7, #0
	bool mod = false;
   27f2a:	463e      	mov	r6, r7
	while ((c = *fmt++) != '\0') {
   27f2c:	e007      	b.n	27f3e <is_ptr+0x1e>
				if (c == 'p') {
   27f2e:	2d70      	cmp	r5, #112	; 0x70
   27f30:	d018      	beq.n	27f64 <is_ptr+0x44>
				} else if (is_fmt_spec(c)) {
   27f32:	4628      	mov	r0, r5
   27f34:	f7ff ff91 	bl	27e5a <is_fmt_spec>
   27f38:	b9b8      	cbnz	r0, 27f6a <is_ptr+0x4a>
		if (c == '%') {
   27f3a:	2d25      	cmp	r5, #37	; 0x25
   27f3c:	d00e      	beq.n	27f5c <is_ptr+0x3c>
	while ((c = *fmt++) != '\0') {
   27f3e:	f814 5b01 	ldrb.w	r5, [r4], #1
   27f42:	b175      	cbz	r5, 27f62 <is_ptr+0x42>
		if (mod) {
   27f44:	2e00      	cmp	r6, #0
   27f46:	d0f8      	beq.n	27f3a <is_ptr+0x1a>
			if (cnt == n) {
   27f48:	4547      	cmp	r7, r8
   27f4a:	d0f0      	beq.n	27f2e <is_ptr+0xe>
			} else if (is_fmt_spec(c)) {
   27f4c:	4628      	mov	r0, r5
   27f4e:	f7ff ff84 	bl	27e5a <is_fmt_spec>
   27f52:	2800      	cmp	r0, #0
   27f54:	d0f1      	beq.n	27f3a <is_ptr+0x1a>
				cnt++;
   27f56:	3701      	adds	r7, #1
				mod = false;
   27f58:	2600      	movs	r6, #0
   27f5a:	e7ee      	b.n	27f3a <is_ptr+0x1a>
			mod = !mod;
   27f5c:	f086 0601 	eor.w	r6, r6, #1
   27f60:	e7ed      	b.n	27f3e <is_ptr+0x1e>
	return false;
   27f62:	2600      	movs	r6, #0
}
   27f64:	4630      	mov	r0, r6
   27f66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					return false;
   27f6a:	2600      	movs	r6, #0
   27f6c:	e7fa      	b.n	27f64 <is_ptr+0x44>

00027f6e <arch_printk_char_out>:
}
   27f6e:	2000      	movs	r0, #0
   27f70:	4770      	bx	lr

00027f72 <str_out>:
{
   27f72:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   27f74:	680c      	ldr	r4, [r1, #0]
   27f76:	b154      	cbz	r4, 27f8e <str_out+0x1c>
   27f78:	688a      	ldr	r2, [r1, #8]
   27f7a:	684b      	ldr	r3, [r1, #4]
   27f7c:	429a      	cmp	r2, r3
   27f7e:	da06      	bge.n	27f8e <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
   27f80:	3b01      	subs	r3, #1
   27f82:	429a      	cmp	r2, r3
   27f84:	d008      	beq.n	27f98 <str_out+0x26>
		ctx->str[ctx->count++] = c;
   27f86:	1c53      	adds	r3, r2, #1
   27f88:	608b      	str	r3, [r1, #8]
   27f8a:	54a0      	strb	r0, [r4, r2]
   27f8c:	e002      	b.n	27f94 <str_out+0x22>
		ctx->count++;
   27f8e:	688b      	ldr	r3, [r1, #8]
   27f90:	3301      	adds	r3, #1
   27f92:	608b      	str	r3, [r1, #8]
}
   27f94:	bc10      	pop	{r4}
   27f96:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
   27f98:	1c53      	adds	r3, r2, #1
   27f9a:	608b      	str	r3, [r1, #8]
   27f9c:	2300      	movs	r3, #0
   27f9e:	54a3      	strb	r3, [r4, r2]
   27fa0:	e7f8      	b.n	27f94 <str_out+0x22>

00027fa2 <vprintk>:
{
   27fa2:	b508      	push	{r3, lr}
		z_log_vprintk(fmt, ap);
   27fa4:	f001 f8e3 	bl	2916e <z_log_vprintk>
}
   27fa8:	bd08      	pop	{r3, pc}

00027faa <printk>:
{
   27faa:	b40f      	push	{r0, r1, r2, r3}
   27fac:	b500      	push	{lr}
   27fae:	b083      	sub	sp, #12
   27fb0:	a904      	add	r1, sp, #16
   27fb2:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   27fb6:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   27fb8:	f7ff fff3 	bl	27fa2 <vprintk>
}
   27fbc:	b003      	add	sp, #12
   27fbe:	f85d eb04 	ldr.w	lr, [sp], #4
   27fc2:	b004      	add	sp, #16
   27fc4:	4770      	bx	lr

00027fc6 <snprintk>:
{
   27fc6:	b40c      	push	{r2, r3}
   27fc8:	b500      	push	{lr}
   27fca:	b083      	sub	sp, #12
   27fcc:	ab04      	add	r3, sp, #16
   27fce:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   27fd2:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   27fd4:	f7eb f8fa 	bl	131cc <vsnprintk>
}
   27fd8:	b003      	add	sp, #12
   27fda:	f85d eb04 	ldr.w	lr, [sp], #4
   27fde:	b002      	add	sp, #8
   27fe0:	4770      	bx	lr

00027fe2 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   27fe2:	b508      	push	{r3, lr}
   27fe4:	4604      	mov	r4, r0
   27fe6:	4608      	mov	r0, r1
   27fe8:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   27fea:	461a      	mov	r2, r3
   27fec:	47a0      	blx	r4
	return z_impl_z_current_get();
   27fee:	f7ff f89d 	bl	2712c <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   27ff2:	f7ee f829 	bl	16048 <z_impl_k_thread_abort>

00027ff6 <chunk_mem>:
#endif

static void *chunk_mem(struct z_heap *h, chunkid_t c)
{
	chunk_unit_t *buf = chunk_buf(h);
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   27ff6:	00c9      	lsls	r1, r1, #3
   27ff8:	3104      	adds	r1, #4

	CHECK(!(((uintptr_t)ret) & (big_heap(h) ? 7 : 3)));

	return ret;
}
   27ffa:	4408      	add	r0, r1
   27ffc:	4770      	bx	lr

00027ffe <free_list_remove_bidx>:

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   27ffe:	ea4f 0cc1 	mov.w	ip, r1, lsl #3

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   28002:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   28006:	88db      	ldrh	r3, [r3, #6]

	CHECK(!chunk_used(h, c));
	CHECK(b->next != 0);
	CHECK(h->avail_buckets & BIT(bidx));

	if (next_free_chunk(h, c) == c) {
   28008:	4299      	cmp	r1, r3
   2800a:	d00c      	beq.n	28026 <free_list_remove_bidx+0x28>
   2800c:	4484      	add	ip, r0
   2800e:	f8bc 1004 	ldrh.w	r1, [ip, #4]
		b->next = 0;
	} else {
		chunkid_t first = prev_free_chunk(h, c),
			  second = next_free_chunk(h, c);

		b->next = second;
   28012:	3204      	adds	r2, #4
   28014:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   28018:	00ca      	lsls	r2, r1, #3
	if (big_heap(h)) {
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   2801a:	3206      	adds	r2, #6
   2801c:	5283      	strh	r3, [r0, r2]
	void *cmem = &buf[c];
   2801e:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
   28020:	3304      	adds	r3, #4
   28022:	52c1      	strh	r1, [r0, r3]
	}

#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes -= chunksz_to_bytes(h, chunk_size(h, c));
#endif
}
   28024:	4770      	bx	lr
		h->avail_buckets &= ~BIT(bidx);
   28026:	68c3      	ldr	r3, [r0, #12]
   28028:	2101      	movs	r1, #1
   2802a:	4091      	lsls	r1, r2
   2802c:	ea23 0301 	bic.w	r3, r3, r1
   28030:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   28032:	3204      	adds	r2, #4
   28034:	2300      	movs	r3, #0
   28036:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
   2803a:	4770      	bx	lr

0002803c <free_list_add_bidx>:
		free_list_remove_bidx(h, c, bidx);
	}
}

static void free_list_add_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
   2803c:	b510      	push	{r4, lr}
	struct z_heap_bucket *b = &h->buckets[bidx];

	if (b->next == 0U) {
   2803e:	1d13      	adds	r3, r2, #4
   28040:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   28044:	b974      	cbnz	r4, 28064 <free_list_add_bidx+0x28>
		CHECK((h->avail_buckets & BIT(bidx)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= BIT(bidx);
   28046:	68c3      	ldr	r3, [r0, #12]
   28048:	2401      	movs	r4, #1
   2804a:	4094      	lsls	r4, r2
   2804c:	4323      	orrs	r3, r4
   2804e:	60c3      	str	r3, [r0, #12]
		b->next = c;
   28050:	3204      	adds	r2, #4
   28052:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	void *cmem = &buf[c];
   28056:	00cb      	lsls	r3, r1, #3
		((uint16_t *)cmem)[f] = val;
   28058:	1d1a      	adds	r2, r3, #4
   2805a:	b289      	uxth	r1, r1
   2805c:	5281      	strh	r1, [r0, r2]
   2805e:	3306      	adds	r3, #6
   28060:	52c1      	strh	r1, [r0, r3]
	}

#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}
   28062:	bd10      	pop	{r4, pc}
	void *cmem = &buf[c];
   28064:	00e2      	lsls	r2, r4, #3
		return ((uint16_t *)cmem)[f];
   28066:	3204      	adds	r2, #4
   28068:	5a83      	ldrh	r3, [r0, r2]
	void *cmem = &buf[c];
   2806a:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
		((uint16_t *)cmem)[f] = val;
   2806e:	f10c 0e04 	add.w	lr, ip, #4
   28072:	f820 300e 	strh.w	r3, [r0, lr]
   28076:	f10c 0c06 	add.w	ip, ip, #6
   2807a:	f820 400c 	strh.w	r4, [r0, ip]
	void *cmem = &buf[c];
   2807e:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
   28080:	3306      	adds	r3, #6
   28082:	b289      	uxth	r1, r1
   28084:	52c1      	strh	r1, [r0, r3]
   28086:	5281      	strh	r1, [r0, r2]
   28088:	e7eb      	b.n	28062 <free_list_add_bidx+0x26>

0002808a <split_chunks>:

/* Splits a chunk "lc" into a left chunk and a right chunk at "rc".
 * Leaves both chunks marked "free"
 */
static void split_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   2808a:	b500      	push	{lr}
	void *cmem = &buf[c];
   2808c:	00cb      	lsls	r3, r1, #3
		return ((uint16_t *)cmem)[f];
   2808e:	3302      	adds	r3, #2
   28090:	f830 e003 	ldrh.w	lr, [r0, r3]
	CHECK(rc > lc);
	CHECK(rc - lc < chunk_size(h, lc));

	chunksz_t sz0 = chunk_size(h, lc);
	chunksz_t lsz = rc - lc;
   28094:	eba2 0c01 	sub.w	ip, r2, r1
	chunksz_t rsz = sz0 - lsz;
   28098:	1a89      	subs	r1, r1, r2
   2809a:	eb01 015e 	add.w	r1, r1, lr, lsr #1
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2809e:	ea4f 0e4c 	mov.w	lr, ip, lsl #1
		((uint16_t *)cmem)[f] = val;
   280a2:	f820 e003 	strh.w	lr, [r0, r3]
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   280a6:	ea4f 0e41 	mov.w	lr, r1, lsl #1
	void *cmem = &buf[c];
   280aa:	00d3      	lsls	r3, r2, #3
		((uint16_t *)cmem)[f] = val;
   280ac:	3302      	adds	r3, #2
   280ae:	f820 e003 	strh.w	lr, [r0, r3]
   280b2:	f820 c032 	strh.w	ip, [r0, r2, lsl #3]
		return ((uint16_t *)cmem)[f];
   280b6:	5ac3      	ldrh	r3, [r0, r3]
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
   280b8:	eb02 0253 	add.w	r2, r2, r3, lsr #1
		((uint16_t *)cmem)[f] = val;
   280bc:	f820 1032 	strh.w	r1, [r0, r2, lsl #3]

	set_chunk_size(h, lc, lsz);
	set_chunk_size(h, rc, rsz);
	set_left_chunk_size(h, rc, lsz);
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}
   280c0:	f85d fb04 	ldr.w	pc, [sp], #4

000280c4 <merge_chunks>:

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   280c4:	b500      	push	{lr}
	void *cmem = &buf[c];
   280c6:	00c9      	lsls	r1, r1, #3
		return ((uint16_t *)cmem)[f];
   280c8:	3102      	adds	r1, #2
   280ca:	f830 e001 	ldrh.w	lr, [r0, r1]
	void *cmem = &buf[c];
   280ce:	ea4f 0cc2 	mov.w	ip, r2, lsl #3
		return ((uint16_t *)cmem)[f];
   280d2:	f10c 0c02 	add.w	ip, ip, #2
   280d6:	f830 300c 	ldrh.w	r3, [r0, ip]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   280da:	085b      	lsrs	r3, r3, #1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   280dc:	eb03 035e 	add.w	r3, r3, lr, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   280e0:	ea4f 0e43 	mov.w	lr, r3, lsl #1
		((uint16_t *)cmem)[f] = val;
   280e4:	f820 e001 	strh.w	lr, [r0, r1]
		return ((uint16_t *)cmem)[f];
   280e8:	f830 100c 	ldrh.w	r1, [r0, ip]
	return c + chunk_size(h, c);
   280ec:	eb02 0251 	add.w	r2, r2, r1, lsr #1
		((uint16_t *)cmem)[f] = val;
   280f0:	f820 3032 	strh.w	r3, [r0, r2, lsl #3]

	set_chunk_size(h, lc, newsz);
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
   280f4:	f85d fb04 	ldr.w	pc, [sp], #4

000280f8 <mem_to_chunkid>:
 * boundary.
 */
static chunkid_t mem_to_chunkid(struct z_heap *h, void *p)
{
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   280f8:	3904      	subs	r1, #4
   280fa:	1a08      	subs	r0, r1, r0
}
   280fc:	08c0      	lsrs	r0, r0, #3
   280fe:	4770      	bx	lr

00028100 <free_list_remove>:
{
   28100:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
   28102:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   28106:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   28108:	0852      	lsrs	r2, r2, #1
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   2810a:	fab2 f282 	clz	r2, r2
		free_list_remove_bidx(h, c, bidx);
   2810e:	f1c2 021f 	rsb	r2, r2, #31
   28112:	f7ff ff74 	bl	27ffe <free_list_remove_bidx>
}
   28116:	bd08      	pop	{r3, pc}

00028118 <free_list_add>:
{
   28118:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
   2811a:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   2811e:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   28120:	0852      	lsrs	r2, r2, #1
	return 31 - __builtin_clz(usable_sz);
   28122:	fab2 f282 	clz	r2, r2
		free_list_add_bidx(h, c, bidx);
   28126:	f1c2 021f 	rsb	r2, r2, #31
   2812a:	f7ff ff87 	bl	2803c <free_list_add_bidx>
}
   2812e:	bd08      	pop	{r3, pc}

00028130 <free_chunk>:
{
   28130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28132:	4604      	mov	r4, r0
   28134:	460d      	mov	r5, r1
	void *cmem = &buf[c];
   28136:	00ce      	lsls	r6, r1, #3
		return ((uint16_t *)cmem)[f];
   28138:	1cb7      	adds	r7, r6, #2
   2813a:	5bc1      	ldrh	r1, [r0, r7]
	return c + chunk_size(h, c);
   2813c:	eb05 0151 	add.w	r1, r5, r1, lsr #1
		return ((uint16_t *)cmem)[f];
   28140:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   28144:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   28146:	f013 0f01 	tst.w	r3, #1
   2814a:	d00c      	beq.n	28166 <free_chunk+0x36>
   2814c:	5ba1      	ldrh	r1, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   2814e:	1a69      	subs	r1, r5, r1
		return ((uint16_t *)cmem)[f];
   28150:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
   28154:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   28156:	f013 0f01 	tst.w	r3, #1
   2815a:	d00e      	beq.n	2817a <free_chunk+0x4a>
	free_list_add(h, c);
   2815c:	4629      	mov	r1, r5
   2815e:	4620      	mov	r0, r4
   28160:	f7ff ffda 	bl	28118 <free_list_add>
}
   28164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		free_list_remove(h, right_chunk(h, c));
   28166:	f7ff ffcb 	bl	28100 <free_list_remove>
   2816a:	5be2      	ldrh	r2, [r4, r7]
		merge_chunks(h, c, right_chunk(h, c));
   2816c:	eb05 0252 	add.w	r2, r5, r2, lsr #1
   28170:	4629      	mov	r1, r5
   28172:	4620      	mov	r0, r4
   28174:	f7ff ffa6 	bl	280c4 <merge_chunks>
   28178:	e7e8      	b.n	2814c <free_chunk+0x1c>
		free_list_remove(h, left_chunk(h, c));
   2817a:	4620      	mov	r0, r4
   2817c:	f7ff ffc0 	bl	28100 <free_list_remove>
   28180:	5ba1      	ldrh	r1, [r4, r6]
		merge_chunks(h, left_chunk(h, c), c);
   28182:	462a      	mov	r2, r5
   28184:	1a69      	subs	r1, r5, r1
   28186:	4620      	mov	r0, r4
   28188:	f7ff ff9c 	bl	280c4 <merge_chunks>
   2818c:	5ba3      	ldrh	r3, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   2818e:	1aed      	subs	r5, r5, r3
   28190:	e7e4      	b.n	2815c <free_chunk+0x2c>

00028192 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   28192:	b570      	push	{r4, r5, r6, lr}
	return 31 - __builtin_clz(usable_sz);
   28194:	fab1 f381 	clz	r3, r1
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   28198:	f1c3 0423 	rsb	r4, r3, #35	; 0x23
   2819c:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
   281a0:	b1cd      	cbz	r5, 281d6 <alloc_chunk+0x44>
   281a2:	f1c3 021f 	rsb	r2, r3, #31
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
   281a6:	f04f 0e03 	mov.w	lr, #3
		do {
			chunkid_t c = b->next;
   281aa:	1d14      	adds	r4, r2, #4
   281ac:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
	void *cmem = &buf[c];
   281b0:	ea4f 0cc4 	mov.w	ip, r4, lsl #3
		return ((uint16_t *)cmem)[f];
   281b4:	eb00 06c4 	add.w	r6, r0, r4, lsl #3
   281b8:	8876      	ldrh	r6, [r6, #2]
			if (chunk_size(h, c) >= sz) {
   281ba:	ebb1 0f56 	cmp.w	r1, r6, lsr #1
   281be:	d914      	bls.n	281ea <alloc_chunk+0x58>
   281c0:	4484      	add	ip, r0
   281c2:	f8bc 4006 	ldrh.w	r4, [ip, #6]
				free_list_remove_bidx(h, c, bi);
				return c;
			}
			b->next = next_free_chunk(h, c);
   281c6:	1d16      	adds	r6, r2, #4
   281c8:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
			CHECK(b->next != 0);
		} while (--i && b->next != first);
   281cc:	f1be 0e01 	subs.w	lr, lr, #1
   281d0:	d001      	beq.n	281d6 <alloc_chunk+0x44>
   281d2:	42a5      	cmp	r5, r4
   281d4:	d1e9      	bne.n	281aa <alloc_chunk+0x18>
	}

	/* Otherwise pick the smallest non-empty bucket guaranteed to
	 * fit and use that unconditionally.
	 */
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   281d6:	68c4      	ldr	r4, [r0, #12]
   281d8:	f1c3 0220 	rsb	r2, r3, #32
   281dc:	2301      	movs	r3, #1
   281de:	4093      	lsls	r3, r2
   281e0:	425b      	negs	r3, r3

	if (bmask != 0U) {
   281e2:	401c      	ands	r4, r3
   281e4:	d105      	bne.n	281f2 <alloc_chunk+0x60>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   281e6:	4620      	mov	r0, r4
   281e8:	bd70      	pop	{r4, r5, r6, pc}
				free_list_remove_bidx(h, c, bi);
   281ea:	4621      	mov	r1, r4
   281ec:	f7ff ff07 	bl	27ffe <free_list_remove_bidx>
				return c;
   281f0:	e7f9      	b.n	281e6 <alloc_chunk+0x54>
		int minbucket = __builtin_ctz(bmask);
   281f2:	fa94 f2a4 	rbit	r2, r4
   281f6:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   281fa:	1d13      	adds	r3, r2, #4
   281fc:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   28200:	4621      	mov	r1, r4
   28202:	f7ff fefc 	bl	27ffe <free_list_remove_bidx>
		return c;
   28206:	e7ee      	b.n	281e6 <alloc_chunk+0x54>

00028208 <sys_heap_free>:
	if (mem == NULL) {
   28208:	b179      	cbz	r1, 2822a <sys_heap_free+0x22>
{
   2820a:	b510      	push	{r4, lr}
	struct z_heap *h = heap->heap;
   2820c:	6804      	ldr	r4, [r0, #0]
	chunkid_t c = mem_to_chunkid(h, mem);
   2820e:	4620      	mov	r0, r4
   28210:	f7ff ff72 	bl	280f8 <mem_to_chunkid>
   28214:	4601      	mov	r1, r0
	void *cmem = &buf[c];
   28216:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   2821a:	8853      	ldrh	r3, [r2, #2]
   2821c:	f023 0301 	bic.w	r3, r3, #1
   28220:	8053      	strh	r3, [r2, #2]
	free_chunk(h, c);
   28222:	4620      	mov	r0, r4
   28224:	f7ff ff84 	bl	28130 <free_chunk>
}
   28228:	bd10      	pop	{r4, pc}
   2822a:	4770      	bx	lr

0002822c <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   2822c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct z_heap *h = heap->heap;
   2822e:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   28230:	b341      	cbz	r1, 28284 <sys_heap_alloc+0x58>
   28232:	460b      	mov	r3, r1
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   28234:	68aa      	ldr	r2, [r5, #8]
   28236:	ebb2 0fd1 	cmp.w	r2, r1, lsr #3
   2823a:	d925      	bls.n	28288 <sys_heap_alloc+0x5c>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2823c:	330b      	adds	r3, #11
   2823e:	08dc      	lsrs	r4, r3, #3
		return NULL;
	}

	chunksz_t chunk_sz = bytes_to_chunksz(h, bytes);
	chunkid_t c = alloc_chunk(h, chunk_sz);
   28240:	4621      	mov	r1, r4
   28242:	4628      	mov	r0, r5
   28244:	f7ff ffa5 	bl	28192 <alloc_chunk>
	if (c == 0U) {
   28248:	4607      	mov	r7, r0
   2824a:	b1f8      	cbz	r0, 2828c <sys_heap_alloc+0x60>
	void *cmem = &buf[c];
   2824c:	00c6      	lsls	r6, r0, #3
		return ((uint16_t *)cmem)[f];
   2824e:	eb05 03c0 	add.w	r3, r5, r0, lsl #3
   28252:	885b      	ldrh	r3, [r3, #2]
		return NULL;
	}

	/* Split off remainder if any */
	if (chunk_size(h, c) > chunk_sz) {
   28254:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
   28258:	d309      	bcc.n	2826e <sys_heap_alloc+0x42>
	void *cmem = &buf[c];
   2825a:	19ab      	adds	r3, r5, r6
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2825c:	885a      	ldrh	r2, [r3, #2]
   2825e:	f042 0201 	orr.w	r2, r2, #1
   28262:	805a      	strh	r2, [r3, #2]
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);

	mem = chunk_mem(h, c);
   28264:	4639      	mov	r1, r7
   28266:	4628      	mov	r0, r5
   28268:	f7ff fec5 	bl	27ff6 <chunk_mem>
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   2826c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		split_chunks(h, c, c + chunk_sz);
   2826e:	4404      	add	r4, r0
   28270:	4622      	mov	r2, r4
   28272:	4601      	mov	r1, r0
   28274:	4628      	mov	r0, r5
   28276:	f7ff ff08 	bl	2808a <split_chunks>
		free_list_add(h, c + chunk_sz);
   2827a:	4621      	mov	r1, r4
   2827c:	4628      	mov	r0, r5
   2827e:	f7ff ff4b 	bl	28118 <free_list_add>
   28282:	e7ea      	b.n	2825a <sys_heap_alloc+0x2e>
		return NULL;
   28284:	2000      	movs	r0, #0
   28286:	e7f1      	b.n	2826c <sys_heap_alloc+0x40>
   28288:	2000      	movs	r0, #0
   2828a:	e7ef      	b.n	2826c <sys_heap_alloc+0x40>
		return NULL;
   2828c:	2000      	movs	r0, #0
   2828e:	e7ed      	b.n	2826c <sys_heap_alloc+0x40>

00028290 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   28290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   28294:	4615      	mov	r5, r2
	struct z_heap *h = heap->heap;
   28296:	6806      	ldr	r6, [r0, #0]
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   28298:	424b      	negs	r3, r1
   2829a:	400b      	ands	r3, r1
	if (align != rew) {
   2829c:	f101 39ff 	add.w	r9, r1, #4294967295
   282a0:	ea19 0901 	ands.w	r9, r9, r1
   282a4:	d004      	beq.n	282b0 <sys_heap_aligned_alloc+0x20>
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
   282a6:	2b03      	cmp	r3, #3
   282a8:	d847      	bhi.n	2833a <sys_heap_aligned_alloc+0xaa>
		align -= rew;
   282aa:	464c      	mov	r4, r9
	rew = align & -align;
   282ac:	4699      	mov	r9, r3
   282ae:	e003      	b.n	282b8 <sys_heap_aligned_alloc+0x28>
   282b0:	460c      	mov	r4, r1
	} else {
		if (align <= chunk_header_bytes(h)) {
   282b2:	2904      	cmp	r1, #4
   282b4:	d93c      	bls.n	28330 <sys_heap_aligned_alloc+0xa0>
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
   282b6:	2304      	movs	r3, #4
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   282b8:	2d00      	cmp	r5, #0
   282ba:	d056      	beq.n	2836a <sys_heap_aligned_alloc+0xda>
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   282bc:	68b2      	ldr	r2, [r6, #8]
   282be:	ebb2 0fd5 	cmp.w	r2, r5, lsr #3
   282c2:	d955      	bls.n	28370 <sys_heap_aligned_alloc+0xe0>
	/*
	 * Find a free block that is guaranteed to fit.
	 * We over-allocate to account for alignment and then free
	 * the extra allocations afterwards.
	 */
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   282c4:	1961      	adds	r1, r4, r5
   282c6:	1ac9      	subs	r1, r1, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   282c8:	310b      	adds	r1, #11
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   282ca:	08c9      	lsrs	r1, r1, #3
   282cc:	4630      	mov	r0, r6
   282ce:	f7ff ff60 	bl	28192 <alloc_chunk>

	if (c0 == 0) {
   282d2:	4607      	mov	r7, r0
   282d4:	2800      	cmp	r0, #0
   282d6:	d04e      	beq.n	28376 <sys_heap_aligned_alloc+0xe6>
		return NULL;
	}
	uint8_t *mem = chunk_mem(h, c0);
   282d8:	4601      	mov	r1, r0
   282da:	4630      	mov	r0, r6
   282dc:	f7ff fe8b 	bl	27ff6 <chunk_mem>

	/* Align allocated memory */
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   282e0:	eb00 0809 	add.w	r8, r0, r9
   282e4:	44a0      	add	r8, r4
   282e6:	f108 38ff 	add.w	r8, r8, #4294967295
   282ea:	4264      	negs	r4, r4
   282ec:	ea08 0804 	and.w	r8, r8, r4
   282f0:	eba8 0809 	sub.w	r8, r8, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   282f4:	eb08 0405 	add.w	r4, r8, r5
   282f8:	3407      	adds	r4, #7
   282fa:	f024 0407 	bic.w	r4, r4, #7

	/* Get corresponding chunks */
	chunkid_t c = mem_to_chunkid(h, mem);
   282fe:	4641      	mov	r1, r8
   28300:	4630      	mov	r0, r6
   28302:	f7ff fef9 	bl	280f8 <mem_to_chunkid>
   28306:	4605      	mov	r5, r0
	chunkid_t c_end = end - chunk_buf(h);
   28308:	1ba4      	subs	r4, r4, r6
   2830a:	10e4      	asrs	r4, r4, #3
	CHECK(c >= c0 && c  < c_end && c_end <= c0 + padded_sz);

	/* Split and free unused prefix */
	if (c > c0) {
   2830c:	4287      	cmp	r7, r0
   2830e:	d318      	bcc.n	28342 <sys_heap_aligned_alloc+0xb2>
	void *cmem = &buf[c];
   28310:	00ef      	lsls	r7, r5, #3
		return ((uint16_t *)cmem)[f];
   28312:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
   28316:	885b      	ldrh	r3, [r3, #2]
	return c + chunk_size(h, c);
   28318:	eb05 0353 	add.w	r3, r5, r3, lsr #1
		split_chunks(h, c0, c);
		free_list_add(h, c0);
	}

	/* Split and free unused suffix */
	if (right_chunk(h, c) > c_end) {
   2831c:	429c      	cmp	r4, r3
   2831e:	d31a      	bcc.n	28356 <sys_heap_aligned_alloc+0xc6>
	void *cmem = &buf[c];
   28320:	443e      	add	r6, r7
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   28322:	8873      	ldrh	r3, [r6, #2]
   28324:	f043 0301 	orr.w	r3, r3, #1
   28328:	8073      	strh	r3, [r6, #2]
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   2832a:	4640      	mov	r0, r8
   2832c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return sys_heap_alloc(heap, bytes);
   28330:	4611      	mov	r1, r2
   28332:	f7ff ff7b 	bl	2822c <sys_heap_alloc>
   28336:	4680      	mov	r8, r0
   28338:	e7f7      	b.n	2832a <sys_heap_aligned_alloc+0x9a>
		align -= rew;
   2833a:	464c      	mov	r4, r9
	rew = align & -align;
   2833c:	4699      	mov	r9, r3
		gap = MIN(rew, chunk_header_bytes(h));
   2833e:	2304      	movs	r3, #4
   28340:	e7ba      	b.n	282b8 <sys_heap_aligned_alloc+0x28>
		split_chunks(h, c0, c);
   28342:	4602      	mov	r2, r0
   28344:	4639      	mov	r1, r7
   28346:	4630      	mov	r0, r6
   28348:	f7ff fe9f 	bl	2808a <split_chunks>
		free_list_add(h, c0);
   2834c:	4639      	mov	r1, r7
   2834e:	4630      	mov	r0, r6
   28350:	f7ff fee2 	bl	28118 <free_list_add>
   28354:	e7dc      	b.n	28310 <sys_heap_aligned_alloc+0x80>
		split_chunks(h, c, c_end);
   28356:	4622      	mov	r2, r4
   28358:	4629      	mov	r1, r5
   2835a:	4630      	mov	r0, r6
   2835c:	f7ff fe95 	bl	2808a <split_chunks>
		free_list_add(h, c_end);
   28360:	4621      	mov	r1, r4
   28362:	4630      	mov	r0, r6
   28364:	f7ff fed8 	bl	28118 <free_list_add>
   28368:	e7da      	b.n	28320 <sys_heap_aligned_alloc+0x90>
		return NULL;
   2836a:	f04f 0800 	mov.w	r8, #0
   2836e:	e7dc      	b.n	2832a <sys_heap_aligned_alloc+0x9a>
   28370:	f04f 0800 	mov.w	r8, #0
   28374:	e7d9      	b.n	2832a <sys_heap_aligned_alloc+0x9a>
		return NULL;
   28376:	f04f 0800 	mov.w	r8, #0
   2837a:	e7d6      	b.n	2832a <sys_heap_aligned_alloc+0x9a>

0002837c <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   2837c:	b570      	push	{r4, r5, r6, lr}
   2837e:	4603      	mov	r3, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   28380:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   28382:	1dc8      	adds	r0, r1, #7
   28384:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   28388:	440a      	add	r2, r1
   2838a:	f022 0207 	bic.w	r2, r2, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   2838e:	1a12      	subs	r2, r2, r0
   28390:	08d5      	lsrs	r5, r2, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   28392:	6018      	str	r0, [r3, #0]
	h->end_chunk = heap_sz;
   28394:	6085      	str	r5, [r0, #8]
	h->avail_buckets = 0;
   28396:	2300      	movs	r3, #0
   28398:	60c3      	str	r3, [r0, #12]
	return 31 - __builtin_clz(usable_sz);
   2839a:	fab5 f185 	clz	r1, r5
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   2839e:	f1c1 0e20 	rsb	lr, r1, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   283a2:	f1c1 0124 	rsb	r1, r1, #36	; 0x24
   283a6:	0089      	lsls	r1, r1, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   283a8:	1dce      	adds	r6, r1, #7
   283aa:	08f1      	lsrs	r1, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   283ac:	e005      	b.n	283ba <sys_heap_init+0x3e>
		h->buckets[i].next = 0;
   283ae:	f103 0c04 	add.w	ip, r3, #4
   283b2:	2400      	movs	r4, #0
   283b4:	f840 402c 	str.w	r4, [r0, ip, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
   283b8:	3301      	adds	r3, #1
   283ba:	4573      	cmp	r3, lr
   283bc:	dbf7      	blt.n	283ae <sys_heap_init+0x32>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   283be:	004c      	lsls	r4, r1, #1
		((uint16_t *)cmem)[f] = val;
   283c0:	b2a4      	uxth	r4, r4
   283c2:	8044      	strh	r4, [r0, #2]
   283c4:	f04f 0c00 	mov.w	ip, #0
   283c8:	f8a0 c000 	strh.w	ip, [r0]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   283cc:	f044 0401 	orr.w	r4, r4, #1
   283d0:	8044      	strh	r4, [r0, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   283d2:	1a6b      	subs	r3, r5, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   283d4:	ea4f 0e43 	mov.w	lr, r3, lsl #1
	void *cmem = &buf[c];
   283d8:	f026 0407 	bic.w	r4, r6, #7
		((uint16_t *)cmem)[f] = val;
   283dc:	1ca5      	adds	r5, r4, #2
   283de:	f820 e005 	strh.w	lr, [r0, r5]
   283e2:	5301      	strh	r1, [r0, r4]
	void *cmem = &buf[c];
   283e4:	f022 0407 	bic.w	r4, r2, #7
		((uint16_t *)cmem)[f] = val;
   283e8:	1c95      	adds	r5, r2, #2
   283ea:	f820 c005 	strh.w	ip, [r0, r5]
   283ee:	4402      	add	r2, r0
   283f0:	5303      	strh	r3, [r0, r4]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   283f2:	8853      	ldrh	r3, [r2, #2]
   283f4:	f043 0301 	orr.w	r3, r3, #1
   283f8:	8053      	strh	r3, [r2, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
   283fa:	f7ff fe8d 	bl	28118 <free_list_add>
}
   283fe:	bd70      	pop	{r4, r5, r6, pc}

00028400 <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
   28400:	f001 0107 	and.w	r1, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   28404:	8b03      	ldrh	r3, [r0, #24]
   28406:	f023 0307 	bic.w	r3, r3, #7
   2840a:	430b      	orrs	r3, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
   2840c:	8303      	strh	r3, [r0, #24]
}
   2840e:	4770      	bx	lr

00028410 <notify_monitors>:
{
   28410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28414:	4606      	mov	r6, r0
   28416:	460f      	mov	r7, r1
   28418:	4690      	mov	r8, r2
	return list->head;
   2841a:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   2841c:	b121      	cbz	r1, 28428 <notify_monitors+0x18>
	return node->next;
   2841e:	680c      	ldr	r4, [r1, #0]
   28420:	b13c      	cbz	r4, 28432 <notify_monitors+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   28422:	b931      	cbnz	r1, 28432 <notify_monitors+0x22>
   28424:	460c      	mov	r4, r1
   28426:	e004      	b.n	28432 <notify_monitors+0x22>
   28428:	460c      	mov	r4, r1
   2842a:	e002      	b.n	28432 <notify_monitors+0x22>
   2842c:	4623      	mov	r3, r4
   2842e:	4621      	mov	r1, r4
   28430:	461c      	mov	r4, r3
   28432:	b169      	cbz	r1, 28450 <notify_monitors+0x40>
		mon->callback(mgr, mon, state, res);
   28434:	684d      	ldr	r5, [r1, #4]
   28436:	4643      	mov	r3, r8
   28438:	463a      	mov	r2, r7
   2843a:	4630      	mov	r0, r6
   2843c:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   2843e:	2c00      	cmp	r4, #0
   28440:	d0f4      	beq.n	2842c <notify_monitors+0x1c>
	return node->next;
   28442:	6823      	ldr	r3, [r4, #0]
   28444:	2b00      	cmp	r3, #0
   28446:	d0f2      	beq.n	2842e <notify_monitors+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   28448:	2c00      	cmp	r4, #0
   2844a:	d1f0      	bne.n	2842e <notify_monitors+0x1e>
   2844c:	4623      	mov	r3, r4
   2844e:	e7ee      	b.n	2842e <notify_monitors+0x1e>
}
   28450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00028454 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   28454:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   28456:	f013 0307 	ands.w	r3, r3, #7
   2845a:	d103      	bne.n	28464 <process_recheck+0x10>
	return list->head;
   2845c:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
   2845e:	b10a      	cbz	r2, 28464 <process_recheck+0x10>
		evt = EVT_START;
   28460:	2003      	movs	r0, #3
   28462:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   28464:	2b02      	cmp	r3, #2
   28466:	d003      	beq.n	28470 <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
   28468:	2b01      	cmp	r3, #1
   2846a:	d006      	beq.n	2847a <process_recheck+0x26>
	int evt = EVT_NOP;
   2846c:	2000      	movs	r0, #0
   2846e:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
   28470:	8b42      	ldrh	r2, [r0, #26]
   28472:	2a00      	cmp	r2, #0
   28474:	d1f8      	bne.n	28468 <process_recheck+0x14>
		evt = EVT_STOP;
   28476:	2004      	movs	r0, #4
   28478:	4770      	bx	lr
   2847a:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
   2847c:	b10b      	cbz	r3, 28482 <process_recheck+0x2e>
		evt = EVT_RESET;
   2847e:	2005      	movs	r0, #5
}
   28480:	4770      	bx	lr
	int evt = EVT_NOP;
   28482:	2000      	movs	r0, #0
   28484:	4770      	bx	lr

00028486 <process_complete>:
{
   28486:	b510      	push	{r4, lr}
   28488:	4604      	mov	r4, r0
   2848a:	468c      	mov	ip, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2848c:	8b03      	ldrh	r3, [r0, #24]
	if (res < 0) {
   2848e:	2a00      	cmp	r2, #0
   28490:	db07      	blt.n	284a2 <process_complete+0x1c>
   28492:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   28496:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   28498:	2a01      	cmp	r2, #1
   2849a:	d90e      	bls.n	284ba <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
   2849c:	2b04      	cmp	r3, #4
   2849e:	d036      	beq.n	2850e <process_complete+0x88>
}
   284a0:	bd10      	pop	{r4, pc}
		*clients = mgr->clients;
   284a2:	e9d0 0100 	ldrd	r0, r1, [r0]
   284a6:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
   284aa:	2300      	movs	r3, #0
   284ac:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
   284ae:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
   284b0:	2101      	movs	r1, #1
   284b2:	4620      	mov	r0, r4
   284b4:	f7ff ffa4 	bl	28400 <set_state>
   284b8:	e7f2      	b.n	284a0 <process_complete+0x1a>
		*clients = mgr->clients;
   284ba:	e9d0 0100 	ldrd	r0, r1, [r0]
   284be:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
   284c2:	2200      	movs	r2, #0
   284c4:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
   284c6:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
   284c8:	2b06      	cmp	r3, #6
   284ca:	d11b      	bne.n	28504 <process_complete+0x7e>
	return list->head;
   284cc:	f8dc 3000 	ldr.w	r3, [ip]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   284d0:	b153      	cbz	r3, 284e8 <process_complete+0x62>
				mgr->refs += 1U;
   284d2:	8b62      	ldrh	r2, [r4, #26]
   284d4:	3201      	adds	r2, #1
   284d6:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   284d8:	461a      	mov	r2, r3
	return node->next;
   284da:	681b      	ldr	r3, [r3, #0]
   284dc:	2b00      	cmp	r3, #0
   284de:	d0f7      	beq.n	284d0 <process_complete+0x4a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   284e0:	2a00      	cmp	r2, #0
   284e2:	d1f5      	bne.n	284d0 <process_complete+0x4a>
   284e4:	4613      	mov	r3, r2
   284e6:	e7f3      	b.n	284d0 <process_complete+0x4a>
			set_state(mgr, ONOFF_STATE_ON);
   284e8:	2102      	movs	r1, #2
   284ea:	4620      	mov	r0, r4
   284ec:	f7ff ff88 	bl	28400 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   284f0:	4620      	mov	r0, r4
   284f2:	f7ff ffaf 	bl	28454 <process_recheck>
   284f6:	2800      	cmp	r0, #0
   284f8:	d0d2      	beq.n	284a0 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   284fa:	8b23      	ldrh	r3, [r4, #24]
   284fc:	f043 0320 	orr.w	r3, r3, #32
   28500:	8323      	strh	r3, [r4, #24]
   28502:	e7cd      	b.n	284a0 <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
   28504:	2100      	movs	r1, #0
   28506:	4620      	mov	r0, r4
   28508:	f7ff ff7a 	bl	28400 <set_state>
   2850c:	e7f0      	b.n	284f0 <process_complete+0x6a>
		set_state(mgr, ONOFF_STATE_OFF);
   2850e:	2100      	movs	r1, #0
   28510:	f7ff ff76 	bl	28400 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   28514:	4620      	mov	r0, r4
   28516:	f7ff ff9d 	bl	28454 <process_recheck>
   2851a:	2800      	cmp	r0, #0
   2851c:	d0c0      	beq.n	284a0 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   2851e:	8b23      	ldrh	r3, [r4, #24]
   28520:	f043 0320 	orr.w	r3, r3, #32
   28524:	8323      	strh	r3, [r4, #24]
}
   28526:	e7bb      	b.n	284a0 <process_complete+0x1a>

00028528 <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
   28528:	b150      	cbz	r0, 28540 <validate_args+0x18>
{
   2852a:	b510      	push	{r4, lr}
   2852c:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   2852e:	b151      	cbz	r1, 28546 <validate_args+0x1e>
	int rv = sys_notify_validate(&cli->notify);
   28530:	1d08      	adds	r0, r1, #4
   28532:	f000 f8c4 	bl	286be <sys_notify_validate>
	if ((rv == 0)
   28536:	b910      	cbnz	r0, 2853e <validate_args+0x16>
	    && ((cli->notify.flags
   28538:	68a3      	ldr	r3, [r4, #8]
   2853a:	2b03      	cmp	r3, #3
   2853c:	d806      	bhi.n	2854c <validate_args+0x24>
}
   2853e:	bd10      	pop	{r4, pc}
		return -EINVAL;
   28540:	f06f 0015 	mvn.w	r0, #21
}
   28544:	4770      	bx	lr
		return -EINVAL;
   28546:	f06f 0015 	mvn.w	r0, #21
   2854a:	e7f8      	b.n	2853e <validate_args+0x16>
		rv = -EINVAL;
   2854c:	f06f 0015 	mvn.w	r0, #21
   28550:	e7f5      	b.n	2853e <validate_args+0x16>

00028552 <notify_one>:
{
   28552:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28556:	4607      	mov	r7, r0
   28558:	460c      	mov	r4, r1
   2855a:	4616      	mov	r6, r2
   2855c:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   2855e:	4619      	mov	r1, r3
   28560:	1d20      	adds	r0, r4, #4
   28562:	f000 f8cb 	bl	286fc <sys_notify_finalize>
	if (cb) {
   28566:	b128      	cbz	r0, 28574 <notify_one+0x22>
   28568:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
   2856a:	462b      	mov	r3, r5
   2856c:	4632      	mov	r2, r6
   2856e:	4621      	mov	r1, r4
   28570:	4638      	mov	r0, r7
   28572:	47c0      	blx	r8
}
   28574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00028578 <notify_all>:
{
   28578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2857c:	4680      	mov	r8, r0
   2857e:	460c      	mov	r4, r1
   28580:	4617      	mov	r7, r2
   28582:	461e      	mov	r6, r3
	while (!sys_slist_is_empty(list)) {
   28584:	e004      	b.n	28590 <notify_all+0x18>
		notify_one(mgr, cli, state, res);
   28586:	4633      	mov	r3, r6
   28588:	463a      	mov	r2, r7
   2858a:	4640      	mov	r0, r8
   2858c:	f7ff ffe1 	bl	28552 <notify_one>
	return list->head;
   28590:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
   28592:	b131      	cbz	r1, 285a2 <notify_all+0x2a>
	return node->next;
   28594:	680d      	ldr	r5, [r1, #0]
	list->head = node;
   28596:	6025      	str	r5, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   28598:	6863      	ldr	r3, [r4, #4]
   2859a:	428b      	cmp	r3, r1
   2859c:	d1f3      	bne.n	28586 <notify_all+0xe>
	list->tail = node;
   2859e:	6065      	str	r5, [r4, #4]
}
   285a0:	e7f1      	b.n	28586 <notify_all+0xe>
}
   285a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000285a6 <transition_complete>:
{
   285a6:	b508      	push	{r3, lr}
	__asm__ volatile(
   285a8:	f04f 0c40 	mov.w	ip, #64	; 0x40
   285ac:	f3ef 8211 	mrs	r2, BASEPRI
   285b0:	f38c 8812 	msr	BASEPRI_MAX, ip
   285b4:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   285b8:	6141      	str	r1, [r0, #20]
	process_event(mgr, EVT_COMPLETE, key);
   285ba:	2101      	movs	r1, #1
   285bc:	f7ea fe1e 	bl	131fc <process_event>
}
   285c0:	bd08      	pop	{r3, pc}

000285c2 <onoff_manager_init>:
	if ((mgr == NULL)
   285c2:	4603      	mov	r3, r0
   285c4:	b170      	cbz	r0, 285e4 <onoff_manager_init+0x22>
	    || (transitions == NULL)
   285c6:	b181      	cbz	r1, 285ea <onoff_manager_init+0x28>
	    || (transitions->start == NULL)
   285c8:	680a      	ldr	r2, [r1, #0]
   285ca:	b18a      	cbz	r2, 285f0 <onoff_manager_init+0x2e>
	    || (transitions->stop == NULL)) {
   285cc:	684a      	ldr	r2, [r1, #4]
   285ce:	b192      	cbz	r2, 285f6 <onoff_manager_init+0x34>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   285d0:	2000      	movs	r0, #0
   285d2:	6018      	str	r0, [r3, #0]
   285d4:	6058      	str	r0, [r3, #4]
   285d6:	6098      	str	r0, [r3, #8]
   285d8:	60d8      	str	r0, [r3, #12]
   285da:	6118      	str	r0, [r3, #16]
   285dc:	6158      	str	r0, [r3, #20]
   285de:	6198      	str	r0, [r3, #24]
   285e0:	6119      	str	r1, [r3, #16]
	return 0;
   285e2:	4770      	bx	lr
		return -EINVAL;
   285e4:	f06f 0015 	mvn.w	r0, #21
   285e8:	4770      	bx	lr
   285ea:	f06f 0015 	mvn.w	r0, #21
   285ee:	4770      	bx	lr
   285f0:	f06f 0015 	mvn.w	r0, #21
   285f4:	4770      	bx	lr
   285f6:	f06f 0015 	mvn.w	r0, #21
}
   285fa:	4770      	bx	lr

000285fc <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   285fc:	b570      	push	{r4, r5, r6, lr}
   285fe:	4605      	mov	r5, r0
   28600:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   28602:	f7ff ff91 	bl	28528 <validate_args>

	if (rv < 0) {
   28606:	1e04      	subs	r4, r0, #0
   28608:	db30      	blt.n	2866c <onoff_request+0x70>
   2860a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2860e:	f3ef 8211 	mrs	r2, BASEPRI
   28612:	f383 8812 	msr	BASEPRI_MAX, r3
   28616:	f3bf 8f6f 	isb	sy
   2861a:	4696      	mov	lr, r2
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2861c:	f8b5 c018 	ldrh.w	ip, [r5, #24]
   28620:	f00c 0c07 	and.w	ip, ip, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   28624:	8b6b      	ldrh	r3, [r5, #26]
   28626:	f64f 71ff 	movw	r1, #65535	; 0xffff
   2862a:	428b      	cmp	r3, r1
   2862c:	d02c      	beq.n	28688 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
   2862e:	4664      	mov	r4, ip
	if (state == ONOFF_STATE_ON) {
   28630:	f1bc 0f02 	cmp.w	ip, #2
   28634:	d008      	beq.n	28648 <onoff_request+0x4c>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
   28636:	f1bc 0f06 	cmp.w	ip, #6
   2863a:	d819      	bhi.n	28670 <onoff_request+0x74>
   2863c:	e8df f00c 	tbb	[pc, ip]
   28640:	1818181e 	.word	0x1818181e
   28644:	2a1e      	.short	0x2a1e
   28646:	1e          	.byte	0x1e
   28647:	00          	.byte	0x00
		mgr->refs += 1U;
   28648:	3301      	adds	r3, #1
   2864a:	836b      	strh	r3, [r5, #26]
		notify = true;
   2864c:	2301      	movs	r3, #1
	bool start = false;             /* trigger a start transition */
   2864e:	2100      	movs	r1, #0
	bool add_client = false;        /* add client to pending list */
   28650:	4608      	mov	r0, r1
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
	}

out:
	if (add_client) {
   28652:	b128      	cbz	r0, 28660 <onoff_request+0x64>
	parent->next = child;
   28654:	2000      	movs	r0, #0
   28656:	6030      	str	r0, [r6, #0]
	return list->tail;
   28658:	6868      	ldr	r0, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   2865a:	b308      	cbz	r0, 286a0 <onoff_request+0xa4>
	parent->next = child;
   2865c:	6006      	str	r6, [r0, #0]
	list->tail = node;
   2865e:	606e      	str	r6, [r5, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
   28660:	bb09      	cbnz	r1, 286a6 <onoff_request+0xaa>
	__asm__ volatile(
   28662:	f38e 8811 	msr	BASEPRI, lr
   28666:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   2866a:	bb0b      	cbnz	r3, 286b0 <onoff_request+0xb4>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   2866c:	4620      	mov	r0, r4
   2866e:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
   28670:	f06f 0404 	mvn.w	r4, #4
   28674:	2300      	movs	r3, #0
   28676:	4619      	mov	r1, r3
   28678:	4618      	mov	r0, r3
   2867a:	e7ea      	b.n	28652 <onoff_request+0x56>
		start = (state == ONOFF_STATE_OFF);
   2867c:	fabc f18c 	clz	r1, ip
   28680:	0949      	lsrs	r1, r1, #5
	bool notify = false;            /* do client notification */
   28682:	2300      	movs	r3, #0
		add_client = true;
   28684:	2001      	movs	r0, #1
   28686:	e7e4      	b.n	28652 <onoff_request+0x56>
		rv = -EAGAIN;
   28688:	f06f 040a 	mvn.w	r4, #10
	bool notify = false;            /* do client notification */
   2868c:	2300      	movs	r3, #0
	bool start = false;             /* trigger a start transition */
   2868e:	4619      	mov	r1, r3
	bool add_client = false;        /* add client to pending list */
   28690:	4618      	mov	r0, r3
   28692:	e7de      	b.n	28652 <onoff_request+0x56>
	if (state == ONOFF_STATE_ON) {
   28694:	f06f 0485 	mvn.w	r4, #133	; 0x85
   28698:	2300      	movs	r3, #0
   2869a:	4619      	mov	r1, r3
   2869c:	4618      	mov	r0, r3
   2869e:	e7d8      	b.n	28652 <onoff_request+0x56>
   286a0:	606e      	str	r6, [r5, #4]
	list->head = node;
   286a2:	602e      	str	r6, [r5, #0]
}
   286a4:	e7dc      	b.n	28660 <onoff_request+0x64>
		process_event(mgr, EVT_RECHECK, key);
   286a6:	2102      	movs	r1, #2
   286a8:	4628      	mov	r0, r5
   286aa:	f7ea fda7 	bl	131fc <process_event>
   286ae:	e7dd      	b.n	2866c <onoff_request+0x70>
			notify_one(mgr, cli, state, 0);
   286b0:	2300      	movs	r3, #0
   286b2:	4662      	mov	r2, ip
   286b4:	4631      	mov	r1, r6
   286b6:	4628      	mov	r0, r5
   286b8:	f7ff ff4b 	bl	28552 <notify_one>
   286bc:	e7d6      	b.n	2866c <onoff_request+0x70>

000286be <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   286be:	4602      	mov	r2, r0
   286c0:	b1b0      	cbz	r0, 286f0 <sys_notify_validate+0x32>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   286c2:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   286c4:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   286c8:	2b02      	cmp	r3, #2
   286ca:	d00b      	beq.n	286e4 <sys_notify_validate+0x26>
   286cc:	2b03      	cmp	r3, #3
   286ce:	d004      	beq.n	286da <sys_notify_validate+0x1c>
   286d0:	2b01      	cmp	r3, #1
   286d2:	d004      	beq.n	286de <sys_notify_validate+0x20>
   286d4:	f06f 0015 	mvn.w	r0, #21
   286d8:	4770      	bx	lr
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
   286da:	6803      	ldr	r3, [r0, #0]
   286dc:	b15b      	cbz	r3, 286f6 <sys_notify_validate+0x38>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
   286de:	2000      	movs	r0, #0
   286e0:	6090      	str	r0, [r2, #8]
   286e2:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   286e4:	6803      	ldr	r3, [r0, #0]
   286e6:	2b00      	cmp	r3, #0
   286e8:	d1f9      	bne.n	286de <sys_notify_validate+0x20>
			rv = -EINVAL;
   286ea:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
   286ee:	4770      	bx	lr
		return -EINVAL;
   286f0:	f06f 0015 	mvn.w	r0, #21
   286f4:	4770      	bx	lr
			rv = -EINVAL;
   286f6:	f06f 0015 	mvn.w	r0, #21
   286fa:	4770      	bx	lr

000286fc <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   286fc:	b510      	push	{r4, lr}
   286fe:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   28700:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   28702:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   28706:	6081      	str	r1, [r0, #8]
	switch (method) {
   28708:	2a02      	cmp	r2, #2
   2870a:	d004      	beq.n	28716 <sys_notify_finalize+0x1a>
   2870c:	2a03      	cmp	r2, #3
   2870e:	d105      	bne.n	2871c <sys_notify_finalize+0x20>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   28710:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   28712:	2000      	movs	r0, #0
		break;
   28714:	e004      	b.n	28720 <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SIGNAL:
		sig = notify->method.signal;
   28716:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   28718:	2400      	movs	r4, #0
		break;
   2871a:	e001      	b.n	28720 <sys_notify_finalize+0x24>
	switch (method) {
   2871c:	2400      	movs	r4, #0
   2871e:	4620      	mov	r0, r4
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   28720:	2200      	movs	r2, #0
   28722:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   28724:	b108      	cbz	r0, 2872a <sys_notify_finalize+0x2e>
	return z_impl_k_poll_signal_raise(sig, result);
   28726:	f7fe ffe5 	bl	276f4 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   2872a:	4620      	mov	r0, r4
   2872c:	bd10      	pop	{r4, pc}

0002872e <crc16_itu_t>:
	return seed;
}

uint16_t crc16_itu_t(uint16_t seed, const uint8_t *src, size_t len)
{
	for (; len > 0; len--) {
   2872e:	e011      	b.n	28754 <crc16_itu_t+0x26>
		seed = (seed >> 8U) | (seed << 8U);
   28730:	0203      	lsls	r3, r0, #8
   28732:	ea43 2310 	orr.w	r3, r3, r0, lsr #8
   28736:	b29b      	uxth	r3, r3
		seed ^= *src++;
   28738:	f811 0b01 	ldrb.w	r0, [r1], #1
   2873c:	4058      	eors	r0, r3
		seed ^= (seed & 0xffU) >> 4U;
   2873e:	f3c0 1303 	ubfx	r3, r0, #4, #4
   28742:	4043      	eors	r3, r0
		seed ^= seed << 12U;
   28744:	ea83 3303 	eor.w	r3, r3, r3, lsl #12
   28748:	b29b      	uxth	r3, r3
		seed ^= (seed & 0xffU) << 5U;
   2874a:	0158      	lsls	r0, r3, #5
   2874c:	f400 50ff 	and.w	r0, r0, #8160	; 0x1fe0
   28750:	4058      	eors	r0, r3
	for (; len > 0; len--) {
   28752:	3a01      	subs	r2, #1
   28754:	2a00      	cmp	r2, #0
   28756:	d1eb      	bne.n	28730 <crc16_itu_t+0x2>
	}

	return seed;
}
   28758:	4770      	bx	lr

0002875a <crc7_be>:

#include <zephyr/sys/crc.h>

uint8_t crc7_be(uint8_t seed, const uint8_t *src, size_t len)
{
	while (len--) {
   2875a:	e00c      	b.n	28776 <crc7_be+0x1c>
		uint8_t e = seed ^ *src++;
   2875c:	f811 3b01 	ldrb.w	r3, [r1], #1
   28760:	4043      	eors	r3, r0
		uint8_t f = e ^ (e >> 4) ^ (e >> 7);
   28762:	ea83 1213 	eor.w	r2, r3, r3, lsr #4
   28766:	ea82 13d3 	eor.w	r3, r2, r3, lsr #7

		seed = (f << 1) ^ (f << 4);
   2876a:	0118      	lsls	r0, r3, #4
   2876c:	ea80 0043 	eor.w	r0, r0, r3, lsl #1
   28770:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	while (len--) {
   28774:	4662      	mov	r2, ip
   28776:	f102 3cff 	add.w	ip, r2, #4294967295
   2877a:	2a00      	cmp	r2, #0
   2877c:	d1ee      	bne.n	2875c <crc7_be+0x2>
	}

	return seed;
}
   2877e:	4770      	bx	lr

00028780 <extract_decimal>:
{
   28780:	4684      	mov	ip, r0
	const char *sp = *str;
   28782:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
   28784:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
   28786:	e006      	b.n	28796 <extract_decimal+0x16>
		val = 10U * val + *sp++ - '0';
   28788:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   2878c:	3201      	adds	r2, #1
   2878e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
   28792:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   28796:	7813      	ldrb	r3, [r2, #0]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   28798:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   2879c:	2909      	cmp	r1, #9
   2879e:	d9f3      	bls.n	28788 <extract_decimal+0x8>
	*str = sp;
   287a0:	f8cc 2000 	str.w	r2, [ip]
}
   287a4:	4770      	bx	lr

000287a6 <extract_width>:
{
   287a6:	b530      	push	{r4, r5, lr}
   287a8:	b083      	sub	sp, #12
   287aa:	4604      	mov	r4, r0
   287ac:	9101      	str	r1, [sp, #4]
	conv->width_present = true;
   287ae:	7803      	ldrb	r3, [r0, #0]
   287b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   287b4:	7003      	strb	r3, [r0, #0]
	if (*sp == '*') {
   287b6:	460d      	mov	r5, r1
   287b8:	780b      	ldrb	r3, [r1, #0]
   287ba:	2b2a      	cmp	r3, #42	; 0x2a
   287bc:	d018      	beq.n	287f0 <extract_width+0x4a>
	size_t width = extract_decimal(&sp);
   287be:	a801      	add	r0, sp, #4
   287c0:	f7ff ffde 	bl	28780 <extract_decimal>
	if (sp != wp) {
   287c4:	9b01      	ldr	r3, [sp, #4]
   287c6:	429d      	cmp	r5, r3
   287c8:	d00f      	beq.n	287ea <extract_width+0x44>
		conv->width_present = true;
   287ca:	7823      	ldrb	r3, [r4, #0]
   287cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   287d0:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
   287d2:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
   287d4:	b2db      	uxtb	r3, r3
   287d6:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
   287da:	2800      	cmp	r0, #0
   287dc:	db10      	blt.n	28800 <extract_width+0x5a>
   287de:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
   287e0:	4313      	orrs	r3, r2
   287e2:	7822      	ldrb	r2, [r4, #0]
   287e4:	f363 0241 	bfi	r2, r3, #1, #1
   287e8:	7022      	strb	r2, [r4, #0]
	return sp;
   287ea:	9801      	ldr	r0, [sp, #4]
}
   287ec:	b003      	add	sp, #12
   287ee:	bd30      	pop	{r4, r5, pc}
		conv->width_star = true;
   287f0:	7843      	ldrb	r3, [r0, #1]
   287f2:	f043 0301 	orr.w	r3, r3, #1
   287f6:	7043      	strb	r3, [r0, #1]
		return ++sp;
   287f8:	4608      	mov	r0, r1
   287fa:	3001      	adds	r0, #1
   287fc:	9001      	str	r0, [sp, #4]
   287fe:	e7f5      	b.n	287ec <extract_width+0x46>
				      || (width != (size_t)conv->width_value));
   28800:	2201      	movs	r2, #1
   28802:	e7ed      	b.n	287e0 <extract_width+0x3a>

00028804 <extract_prec>:
{
   28804:	b510      	push	{r4, lr}
   28806:	b082      	sub	sp, #8
   28808:	9101      	str	r1, [sp, #4]
	conv->prec_present = (*sp == '.');
   2880a:	780b      	ldrb	r3, [r1, #0]
   2880c:	2b2e      	cmp	r3, #46	; 0x2e
   2880e:	bf14      	ite	ne
   28810:	2300      	movne	r3, #0
   28812:	2301      	moveq	r3, #1
   28814:	7842      	ldrb	r2, [r0, #1]
   28816:	f363 0241 	bfi	r2, r3, #1, #1
   2881a:	7042      	strb	r2, [r0, #1]
	if (!conv->prec_present) {
   2881c:	b1c3      	cbz	r3, 28850 <extract_prec+0x4c>
   2881e:	4604      	mov	r4, r0
	++sp;
   28820:	9b01      	ldr	r3, [sp, #4]
   28822:	1c5a      	adds	r2, r3, #1
   28824:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
   28826:	785b      	ldrb	r3, [r3, #1]
   28828:	2b2a      	cmp	r3, #42	; 0x2a
   2882a:	d013      	beq.n	28854 <extract_prec+0x50>
	size_t prec = extract_decimal(&sp);
   2882c:	a801      	add	r0, sp, #4
   2882e:	f7ff ffa7 	bl	28780 <extract_decimal>
	conv->prec_value = prec;
   28832:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
   28834:	7823      	ldrb	r3, [r4, #0]
   28836:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
   2883a:	2800      	cmp	r0, #0
   2883c:	db12      	blt.n	28864 <extract_prec+0x60>
   2883e:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
   28840:	4313      	orrs	r3, r2
   28842:	7822      	ldrb	r2, [r4, #0]
   28844:	f363 0241 	bfi	r2, r3, #1, #1
   28848:	7022      	strb	r2, [r4, #0]
	return sp;
   2884a:	9801      	ldr	r0, [sp, #4]
}
   2884c:	b002      	add	sp, #8
   2884e:	bd10      	pop	{r4, pc}
		return sp;
   28850:	4608      	mov	r0, r1
   28852:	e7fb      	b.n	2884c <extract_prec+0x48>
		conv->prec_star = true;
   28854:	7843      	ldrb	r3, [r0, #1]
   28856:	f043 0304 	orr.w	r3, r3, #4
   2885a:	7043      	strb	r3, [r0, #1]
		return ++sp;
   2885c:	4610      	mov	r0, r2
   2885e:	3001      	adds	r0, #1
   28860:	9001      	str	r0, [sp, #4]
   28862:	e7f3      	b.n	2884c <extract_prec+0x48>
			      || (prec != (size_t)conv->prec_value));
   28864:	2201      	movs	r2, #1
   28866:	e7eb      	b.n	28840 <extract_prec+0x3c>

00028868 <extract_length>:
{
   28868:	4602      	mov	r2, r0
	switch (*sp) {
   2886a:	780b      	ldrb	r3, [r1, #0]
   2886c:	3b4c      	subs	r3, #76	; 0x4c
   2886e:	2b2e      	cmp	r3, #46	; 0x2e
   28870:	d85b      	bhi.n	2892a <extract_length+0xc2>
   28872:	e8df f003 	tbb	[pc, r3]
   28876:	5a4f      	.short	0x5a4f
   28878:	5a5a5a5a 	.word	0x5a5a5a5a
   2887c:	5a5a5a5a 	.word	0x5a5a5a5a
   28880:	5a5a5a5a 	.word	0x5a5a5a5a
   28884:	5a5a5a5a 	.word	0x5a5a5a5a
   28888:	5a5a5a5a 	.word	0x5a5a5a5a
   2888c:	5a5a5a5a 	.word	0x5a5a5a5a
   28890:	5a185a5a 	.word	0x5a185a5a
   28894:	5a295a3a 	.word	0x5a295a3a
   28898:	5a5a5a5a 	.word	0x5a5a5a5a
   2889c:	5a485a5a 	.word	0x5a485a5a
   288a0:	5a5a5a5a 	.word	0x5a5a5a5a
   288a4:	41          	.byte	0x41
   288a5:	00          	.byte	0x00
		if (*++sp == 'h') {
   288a6:	1c48      	adds	r0, r1, #1
   288a8:	784b      	ldrb	r3, [r1, #1]
   288aa:	2b68      	cmp	r3, #104	; 0x68
   288ac:	d005      	beq.n	288ba <extract_length+0x52>
			conv->length_mod = LENGTH_H;
   288ae:	7853      	ldrb	r3, [r2, #1]
   288b0:	2102      	movs	r1, #2
   288b2:	f361 03c6 	bfi	r3, r1, #3, #4
   288b6:	7053      	strb	r3, [r2, #1]
   288b8:	4770      	bx	lr
			conv->length_mod = LENGTH_HH;
   288ba:	7853      	ldrb	r3, [r2, #1]
   288bc:	2001      	movs	r0, #1
   288be:	f360 03c6 	bfi	r3, r0, #3, #4
   288c2:	7053      	strb	r3, [r2, #1]
			++sp;
   288c4:	1c88      	adds	r0, r1, #2
   288c6:	4770      	bx	lr
		if (*++sp == 'l') {
   288c8:	1c48      	adds	r0, r1, #1
   288ca:	784b      	ldrb	r3, [r1, #1]
   288cc:	2b6c      	cmp	r3, #108	; 0x6c
   288ce:	d005      	beq.n	288dc <extract_length+0x74>
			conv->length_mod = LENGTH_L;
   288d0:	7853      	ldrb	r3, [r2, #1]
   288d2:	2103      	movs	r1, #3
   288d4:	f361 03c6 	bfi	r3, r1, #3, #4
   288d8:	7053      	strb	r3, [r2, #1]
   288da:	4770      	bx	lr
			conv->length_mod = LENGTH_LL;
   288dc:	7853      	ldrb	r3, [r2, #1]
   288de:	2004      	movs	r0, #4
   288e0:	f360 03c6 	bfi	r3, r0, #3, #4
   288e4:	7053      	strb	r3, [r2, #1]
			++sp;
   288e6:	1c88      	adds	r0, r1, #2
   288e8:	4770      	bx	lr
		conv->length_mod = LENGTH_J;
   288ea:	7853      	ldrb	r3, [r2, #1]
   288ec:	2005      	movs	r0, #5
   288ee:	f360 03c6 	bfi	r3, r0, #3, #4
   288f2:	7053      	strb	r3, [r2, #1]
		++sp;
   288f4:	1c48      	adds	r0, r1, #1
		break;
   288f6:	4770      	bx	lr
		conv->length_mod = LENGTH_Z;
   288f8:	7853      	ldrb	r3, [r2, #1]
   288fa:	2006      	movs	r0, #6
   288fc:	f360 03c6 	bfi	r3, r0, #3, #4
   28900:	7053      	strb	r3, [r2, #1]
		++sp;
   28902:	1c48      	adds	r0, r1, #1
		break;
   28904:	4770      	bx	lr
		conv->length_mod = LENGTH_T;
   28906:	7853      	ldrb	r3, [r2, #1]
   28908:	2007      	movs	r0, #7
   2890a:	f360 03c6 	bfi	r3, r0, #3, #4
   2890e:	7053      	strb	r3, [r2, #1]
		++sp;
   28910:	1c48      	adds	r0, r1, #1
		break;
   28912:	4770      	bx	lr
		conv->length_mod = LENGTH_UPPER_L;
   28914:	7853      	ldrb	r3, [r2, #1]
   28916:	2008      	movs	r0, #8
   28918:	f360 03c6 	bfi	r3, r0, #3, #4
   2891c:	7053      	strb	r3, [r2, #1]
		++sp;
   2891e:	1c48      	adds	r0, r1, #1
		conv->unsupported = true;
   28920:	7813      	ldrb	r3, [r2, #0]
   28922:	f043 0302 	orr.w	r3, r3, #2
   28926:	7013      	strb	r3, [r2, #0]
		break;
   28928:	4770      	bx	lr
		conv->length_mod = LENGTH_NONE;
   2892a:	7853      	ldrb	r3, [r2, #1]
   2892c:	f36f 03c6 	bfc	r3, #3, #4
   28930:	7053      	strb	r3, [r2, #1]
		break;
   28932:	4608      	mov	r0, r1
}
   28934:	4770      	bx	lr

00028936 <extract_specifier>:
{
   28936:	b500      	push	{lr}
   28938:	4602      	mov	r2, r0
	conv->specifier = *sp++;
   2893a:	4608      	mov	r0, r1
   2893c:	f810 3b01 	ldrb.w	r3, [r0], #1
   28940:	70d3      	strb	r3, [r2, #3]
	switch (conv->specifier) {
   28942:	2b78      	cmp	r3, #120	; 0x78
   28944:	d817      	bhi.n	28976 <extract_specifier+0x40>
   28946:	2b6e      	cmp	r3, #110	; 0x6e
   28948:	d229      	bcs.n	2899e <extract_specifier+0x68>
   2894a:	2b69      	cmp	r3, #105	; 0x69
   2894c:	d813      	bhi.n	28976 <extract_specifier+0x40>
   2894e:	2b58      	cmp	r3, #88	; 0x58
   28950:	d317      	bcc.n	28982 <extract_specifier+0x4c>
   28952:	f1a3 0c58 	sub.w	ip, r3, #88	; 0x58
   28956:	fa5f fc8c 	uxtb.w	ip, ip
   2895a:	2101      	movs	r1, #1
   2895c:	fa01 f10c 	lsl.w	r1, r1, ip
   28960:	f411 4f62 	tst.w	r1, #57856	; 0xe200
   28964:	d114      	bne.n	28990 <extract_specifier+0x5a>
   28966:	f640 0c01 	movw	ip, #2049	; 0x801
   2896a:	ea11 0f0c 	tst.w	r1, ip
   2896e:	d155      	bne.n	28a1c <extract_specifier+0xe6>
   28970:	f411 3f04 	tst.w	r1, #135168	; 0x21000
   28974:	d13a      	bne.n	289ec <extract_specifier+0xb6>
		conv->invalid = true;
   28976:	7813      	ldrb	r3, [r2, #0]
   28978:	f043 0301 	orr.w	r3, r3, #1
   2897c:	7013      	strb	r3, [r2, #0]
	bool unsupported = false;
   2897e:	2100      	movs	r1, #0
		break;
   28980:	e042      	b.n	28a08 <extract_specifier+0xd2>
	switch (conv->specifier) {
   28982:	2b41      	cmp	r3, #65	; 0x41
   28984:	d004      	beq.n	28990 <extract_specifier+0x5a>
   28986:	d3f6      	bcc.n	28976 <extract_specifier+0x40>
   28988:	3b45      	subs	r3, #69	; 0x45
   2898a:	b2db      	uxtb	r3, r3
   2898c:	2b02      	cmp	r3, #2
   2898e:	d8f2      	bhi.n	28976 <extract_specifier+0x40>
		conv->specifier_cat = SPECIFIER_FP;
   28990:	7893      	ldrb	r3, [r2, #2]
   28992:	2104      	movs	r1, #4
   28994:	f361 0302 	bfi	r3, r1, #0, #3
   28998:	7093      	strb	r3, [r2, #2]
			unsupported = true;
   2899a:	2101      	movs	r1, #1
			break;
   2899c:	e034      	b.n	28a08 <extract_specifier+0xd2>
	switch (conv->specifier) {
   2899e:	f1a3 016e 	sub.w	r1, r3, #110	; 0x6e
   289a2:	b2c9      	uxtb	r1, r1
   289a4:	f04f 0c01 	mov.w	ip, #1
   289a8:	fa0c fc01 	lsl.w	ip, ip, r1
   289ac:	f240 4182 	movw	r1, #1154	; 0x482
   289b0:	ea1c 0f01 	tst.w	ip, r1
   289b4:	bf14      	ite	ne
   289b6:	f04f 0e01 	movne.w	lr, #1
   289ba:	f04f 0e00 	moveq.w	lr, #0
   289be:	d12d      	bne.n	28a1c <extract_specifier+0xe6>
   289c0:	f01c 0f24 	tst.w	ip, #36	; 0x24
   289c4:	bf14      	ite	ne
   289c6:	2101      	movne	r1, #1
   289c8:	2100      	moveq	r1, #0
   289ca:	d139      	bne.n	28a40 <extract_specifier+0x10a>
   289cc:	f01c 0c01 	ands.w	ip, ip, #1
   289d0:	d0d1      	beq.n	28976 <extract_specifier+0x40>
		conv->specifier_cat = SPECIFIER_PTR;
   289d2:	7893      	ldrb	r3, [r2, #2]
   289d4:	f04f 0e03 	mov.w	lr, #3
   289d8:	f36e 0302 	bfi	r3, lr, #0, #3
   289dc:	7093      	strb	r3, [r2, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
   289de:	7853      	ldrb	r3, [r2, #1]
   289e0:	f003 0378 	and.w	r3, r3, #120	; 0x78
   289e4:	2b40      	cmp	r3, #64	; 0x40
   289e6:	d10f      	bne.n	28a08 <extract_specifier+0xd2>
			unsupported = true;
   289e8:	4661      	mov	r1, ip
   289ea:	e00d      	b.n	28a08 <extract_specifier+0xd2>
		conv->specifier_cat = SPECIFIER_SINT;
   289ec:	7891      	ldrb	r1, [r2, #2]
   289ee:	f04f 0c01 	mov.w	ip, #1
   289f2:	f36c 0102 	bfi	r1, ip, #0, #3
   289f6:	7091      	strb	r1, [r2, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
   289f8:	7851      	ldrb	r1, [r2, #1]
   289fa:	f001 0178 	and.w	r1, r1, #120	; 0x78
   289fe:	2940      	cmp	r1, #64	; 0x40
   28a00:	d013      	beq.n	28a2a <extract_specifier+0xf4>
		if (conv->specifier == 'c') {
   28a02:	2b63      	cmp	r3, #99	; 0x63
   28a04:	d018      	beq.n	28a38 <extract_specifier+0x102>
	bool unsupported = false;
   28a06:	2100      	movs	r1, #0
	conv->unsupported |= unsupported;
   28a08:	7813      	ldrb	r3, [r2, #0]
   28a0a:	f3c3 0c40 	ubfx	ip, r3, #1, #1
   28a0e:	ea41 010c 	orr.w	r1, r1, ip
   28a12:	f361 0341 	bfi	r3, r1, #1, #1
   28a16:	7013      	strb	r3, [r2, #0]
}
   28a18:	f85d fb04 	ldr.w	pc, [sp], #4
		conv->specifier_cat = SPECIFIER_UINT;
   28a1c:	7891      	ldrb	r1, [r2, #2]
   28a1e:	f04f 0c02 	mov.w	ip, #2
   28a22:	f36c 0102 	bfi	r1, ip, #0, #3
   28a26:	7091      	strb	r1, [r2, #2]
   28a28:	e7e6      	b.n	289f8 <extract_specifier+0xc2>
			conv->invalid = true;
   28a2a:	f892 c000 	ldrb.w	ip, [r2]
   28a2e:	f04c 0c01 	orr.w	ip, ip, #1
   28a32:	f882 c000 	strb.w	ip, [r2]
   28a36:	e7e4      	b.n	28a02 <extract_specifier+0xcc>
			unsupported = (conv->length_mod != LENGTH_NONE);
   28a38:	3900      	subs	r1, #0
   28a3a:	bf18      	it	ne
   28a3c:	2101      	movne	r1, #1
   28a3e:	e7e3      	b.n	28a08 <extract_specifier+0xd2>
		conv->specifier_cat = SPECIFIER_PTR;
   28a40:	7893      	ldrb	r3, [r2, #2]
   28a42:	f04f 0c03 	mov.w	ip, #3
   28a46:	f36c 0302 	bfi	r3, ip, #0, #3
   28a4a:	7093      	strb	r3, [r2, #2]
		if (conv->length_mod != LENGTH_NONE) {
   28a4c:	7853      	ldrb	r3, [r2, #1]
   28a4e:	f013 0f78 	tst.w	r3, #120	; 0x78
   28a52:	d1d9      	bne.n	28a08 <extract_specifier+0xd2>
	bool unsupported = false;
   28a54:	4671      	mov	r1, lr
   28a56:	e7d7      	b.n	28a08 <extract_specifier+0xd2>

00028a58 <extract_conversion>:
{
   28a58:	b510      	push	{r4, lr}
   28a5a:	4604      	mov	r4, r0
   28a5c:	4608      	mov	r0, r1
	*conv = (struct conversion) {
   28a5e:	2300      	movs	r3, #0
   28a60:	6023      	str	r3, [r4, #0]
   28a62:	6063      	str	r3, [r4, #4]
   28a64:	60a3      	str	r3, [r4, #8]
	if (*sp == '%') {
   28a66:	784b      	ldrb	r3, [r1, #1]
   28a68:	2b25      	cmp	r3, #37	; 0x25
   28a6a:	d014      	beq.n	28a96 <extract_conversion+0x3e>
   28a6c:	3101      	adds	r1, #1
	sp = extract_flags(conv, sp);
   28a6e:	4620      	mov	r0, r4
   28a70:	f7ea fc7a 	bl	13368 <extract_flags>
   28a74:	4601      	mov	r1, r0
	sp = extract_width(conv, sp);
   28a76:	4620      	mov	r0, r4
   28a78:	f7ff fe95 	bl	287a6 <extract_width>
   28a7c:	4601      	mov	r1, r0
	sp = extract_prec(conv, sp);
   28a7e:	4620      	mov	r0, r4
   28a80:	f7ff fec0 	bl	28804 <extract_prec>
   28a84:	4601      	mov	r1, r0
	sp = extract_length(conv, sp);
   28a86:	4620      	mov	r0, r4
   28a88:	f7ff feee 	bl	28868 <extract_length>
   28a8c:	4601      	mov	r1, r0
	sp = extract_specifier(conv, sp);
   28a8e:	4620      	mov	r0, r4
   28a90:	f7ff ff51 	bl	28936 <extract_specifier>
}
   28a94:	bd10      	pop	{r4, pc}
		conv->specifier = *sp++;
   28a96:	3002      	adds	r0, #2
   28a98:	70e3      	strb	r3, [r4, #3]
		return sp;
   28a9a:	e7fb      	b.n	28a94 <extract_conversion+0x3c>

00028a9c <conversion_radix>:
	switch (specifier) {
   28a9c:	286f      	cmp	r0, #111	; 0x6f
   28a9e:	d00c      	beq.n	28aba <conversion_radix+0x1e>
   28aa0:	d905      	bls.n	28aae <conversion_radix+0x12>
   28aa2:	2870      	cmp	r0, #112	; 0x70
   28aa4:	d00b      	beq.n	28abe <conversion_radix+0x22>
   28aa6:	2878      	cmp	r0, #120	; 0x78
   28aa8:	d10b      	bne.n	28ac2 <conversion_radix+0x26>
		return 16;
   28aaa:	2010      	movs	r0, #16
   28aac:	4770      	bx	lr
	switch (specifier) {
   28aae:	2858      	cmp	r0, #88	; 0x58
   28ab0:	d001      	beq.n	28ab6 <conversion_radix+0x1a>
   28ab2:	200a      	movs	r0, #10
   28ab4:	4770      	bx	lr
		return 16;
   28ab6:	2010      	movs	r0, #16
   28ab8:	4770      	bx	lr
		return 8;
   28aba:	2008      	movs	r0, #8
   28abc:	4770      	bx	lr
		return 16;
   28abe:	2010      	movs	r0, #16
   28ac0:	4770      	bx	lr
	switch (specifier) {
   28ac2:	200a      	movs	r0, #10
}
   28ac4:	4770      	bx	lr

00028ac6 <encode_uint>:
{
   28ac6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28aca:	4605      	mov	r5, r0
   28acc:	460c      	mov	r4, r1
   28ace:	4693      	mov	fp, r2
   28ad0:	4699      	mov	r9, r3
   28ad2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
	bool upcase = isupper((int)conv->specifier);
   28ad4:	78d0      	ldrb	r0, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   28ad6:	f1a0 0a41 	sub.w	sl, r0, #65	; 0x41
	const unsigned int radix = conversion_radix(conv->specifier);
   28ada:	f7ff ffdf 	bl	28a9c <conversion_radix>
   28ade:	4606      	mov	r6, r0
	char *bp = bps + (bpe - bps);
   28ae0:	e015      	b.n	28b0e <encode_uint+0x48>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   28ae2:	f1ba 0f19 	cmp.w	sl, #25
   28ae6:	d820      	bhi.n	28b2a <encode_uint+0x64>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   28ae8:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   28aea:	3237      	adds	r2, #55	; 0x37
   28aec:	b2d2      	uxtb	r2, r2
   28aee:	f807 2d01 	strb.w	r2, [r7, #-1]!
		value /= radix;
   28af2:	4632      	mov	r2, r6
   28af4:	4643      	mov	r3, r8
   28af6:	4628      	mov	r0, r5
   28af8:	4621      	mov	r1, r4
   28afa:	f7d7 fb01 	bl	100 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
   28afe:	42b5      	cmp	r5, r6
   28b00:	f174 0400 	sbcs.w	r4, r4, #0
   28b04:	d315      	bcc.n	28b32 <encode_uint+0x6c>
   28b06:	454f      	cmp	r7, r9
   28b08:	d913      	bls.n	28b32 <encode_uint+0x6c>
		value /= radix;
   28b0a:	4605      	mov	r5, r0
   28b0c:	460c      	mov	r4, r1
		unsigned int lsv = (unsigned int)(value % radix);
   28b0e:	f04f 0800 	mov.w	r8, #0
   28b12:	4632      	mov	r2, r6
   28b14:	4643      	mov	r3, r8
   28b16:	4628      	mov	r0, r5
   28b18:	4621      	mov	r1, r4
   28b1a:	f7d7 faf1 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   28b1e:	2a09      	cmp	r2, #9
   28b20:	d8df      	bhi.n	28ae2 <encode_uint+0x1c>
   28b22:	b2d2      	uxtb	r2, r2
   28b24:	3230      	adds	r2, #48	; 0x30
   28b26:	b2d2      	uxtb	r2, r2
   28b28:	e7e1      	b.n	28aee <encode_uint+0x28>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   28b2a:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   28b2c:	3257      	adds	r2, #87	; 0x57
   28b2e:	b2d2      	uxtb	r2, r2
   28b30:	e7dd      	b.n	28aee <encode_uint+0x28>
	if (conv->flag_hash) {
   28b32:	f89b 3000 	ldrb.w	r3, [fp]
   28b36:	f013 0f20 	tst.w	r3, #32
   28b3a:	d003      	beq.n	28b44 <encode_uint+0x7e>
		if (radix == 8) {
   28b3c:	2e08      	cmp	r6, #8
   28b3e:	d004      	beq.n	28b4a <encode_uint+0x84>
		} else if (radix == 16) {
   28b40:	2e10      	cmp	r6, #16
   28b42:	d009      	beq.n	28b58 <encode_uint+0x92>
}
   28b44:	4638      	mov	r0, r7
   28b46:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
   28b4a:	f89b 3002 	ldrb.w	r3, [fp, #2]
   28b4e:	f043 0308 	orr.w	r3, r3, #8
   28b52:	f88b 3002 	strb.w	r3, [fp, #2]
   28b56:	e7f5      	b.n	28b44 <encode_uint+0x7e>
			conv->altform_0c = true;
   28b58:	f89b 3002 	ldrb.w	r3, [fp, #2]
   28b5c:	f043 0310 	orr.w	r3, r3, #16
   28b60:	f88b 3002 	strb.w	r3, [fp, #2]
   28b64:	e7ee      	b.n	28b44 <encode_uint+0x7e>

00028b66 <store_count>:
	switch ((enum length_mod_enum)conv->length_mod) {
   28b66:	7843      	ldrb	r3, [r0, #1]
   28b68:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   28b6c:	2b07      	cmp	r3, #7
   28b6e:	d818      	bhi.n	28ba2 <store_count+0x3c>
   28b70:	e8df f003 	tbb	[pc, r3]
   28b74:	0a080604 	.word	0x0a080604
   28b78:	1614100c 	.word	0x1614100c
		*(int *)dp = count;
   28b7c:	600a      	str	r2, [r1, #0]
		break;
   28b7e:	4770      	bx	lr
		*(signed char *)dp = (signed char)count;
   28b80:	700a      	strb	r2, [r1, #0]
		break;
   28b82:	4770      	bx	lr
		*(short *)dp = (short)count;
   28b84:	800a      	strh	r2, [r1, #0]
		break;
   28b86:	4770      	bx	lr
		*(long *)dp = (long)count;
   28b88:	600a      	str	r2, [r1, #0]
		break;
   28b8a:	4770      	bx	lr
		*(long long *)dp = (long long)count;
   28b8c:	17d3      	asrs	r3, r2, #31
   28b8e:	600a      	str	r2, [r1, #0]
   28b90:	604b      	str	r3, [r1, #4]
		break;
   28b92:	4770      	bx	lr
		*(intmax_t *)dp = (intmax_t)count;
   28b94:	17d3      	asrs	r3, r2, #31
   28b96:	600a      	str	r2, [r1, #0]
   28b98:	604b      	str	r3, [r1, #4]
		break;
   28b9a:	4770      	bx	lr
		*(size_t *)dp = (size_t)count;
   28b9c:	600a      	str	r2, [r1, #0]
		break;
   28b9e:	4770      	bx	lr
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   28ba0:	600a      	str	r2, [r1, #0]
}
   28ba2:	4770      	bx	lr

00028ba4 <outs>:
{
   28ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28ba8:	4607      	mov	r7, r0
   28baa:	460e      	mov	r6, r1
   28bac:	4614      	mov	r4, r2
   28bae:	4698      	mov	r8, r3
	size_t count = 0;
   28bb0:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   28bb2:	e006      	b.n	28bc2 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
   28bb4:	4631      	mov	r1, r6
   28bb6:	f814 0b01 	ldrb.w	r0, [r4], #1
   28bba:	47b8      	blx	r7
		if (rc < 0) {
   28bbc:	2800      	cmp	r0, #0
   28bbe:	db09      	blt.n	28bd4 <outs+0x30>
		++count;
   28bc0:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   28bc2:	4544      	cmp	r4, r8
   28bc4:	d3f6      	bcc.n	28bb4 <outs+0x10>
   28bc6:	f1b8 0f00 	cmp.w	r8, #0
   28bca:	d102      	bne.n	28bd2 <outs+0x2e>
   28bcc:	7823      	ldrb	r3, [r4, #0]
   28bce:	2b00      	cmp	r3, #0
   28bd0:	d1f0      	bne.n	28bb4 <outs+0x10>
	return (int)count;
   28bd2:	4628      	mov	r0, r5
}
   28bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00028bd8 <assert_print>:

	k_panic();
}

void assert_print(const char *fmt, ...)
{
   28bd8:	b40f      	push	{r0, r1, r2, r3}
   28bda:	b500      	push	{lr}
   28bdc:	b083      	sub	sp, #12
   28bde:	a904      	add	r1, sp, #16
   28be0:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   28be4:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   28be6:	f7ff f9dc 	bl	27fa2 <vprintk>

	va_end(ap);
}
   28bea:	b003      	add	sp, #12
   28bec:	f85d eb04 	ldr.w	lr, [sp], #4
   28bf0:	b004      	add	sp, #16
   28bf2:	4770      	bx	lr

00028bf4 <free_space>:
	ARG_UNUSED(err);
}

static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
   28bf4:	68c3      	ldr	r3, [r0, #12]
   28bf6:	6802      	ldr	r2, [r0, #0]
   28bf8:	4293      	cmp	r3, r2
   28bfa:	d805      	bhi.n	28c08 <free_space+0x14>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;

		return false;
	} else if (!buffer->rd_idx) {
   28bfc:	b14b      	cbz	r3, 28c12 <free_space+0x1e>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
		return false;
	}

	*res = buffer->size - buffer->tmp_wr_idx;
   28bfe:	6a03      	ldr	r3, [r0, #32]
   28c00:	1a9b      	subs	r3, r3, r2
   28c02:	600b      	str	r3, [r1, #0]

	return true;
   28c04:	2001      	movs	r0, #1
}
   28c06:	4770      	bx	lr
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
   28c08:	1a9b      	subs	r3, r3, r2
   28c0a:	3b01      	subs	r3, #1
   28c0c:	600b      	str	r3, [r1, #0]
		return false;
   28c0e:	2000      	movs	r0, #0
   28c10:	4770      	bx	lr
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   28c12:	6a03      	ldr	r3, [r0, #32]
   28c14:	1a9b      	subs	r3, r3, r2
   28c16:	3b01      	subs	r3, #1
   28c18:	600b      	str	r3, [r1, #0]
		return false;
   28c1a:	2000      	movs	r0, #0
   28c1c:	4770      	bx	lr

00028c1e <get_usage>:

	return true;
}

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
   28c1e:	b510      	push	{r4, lr}
   28c20:	b082      	sub	sp, #8
   28c22:	4604      	mov	r4, r0
	uint32_t f;

	if (free_space(buffer, &f)) {
   28c24:	a901      	add	r1, sp, #4
   28c26:	f7ff ffe5 	bl	28bf4 <free_space>
   28c2a:	b120      	cbz	r0, 28c36 <get_usage+0x18>
		f += (buffer->rd_idx - 1);
   28c2c:	68e3      	ldr	r3, [r4, #12]
   28c2e:	9a01      	ldr	r2, [sp, #4]
   28c30:	4413      	add	r3, r2
   28c32:	3b01      	subs	r3, #1
   28c34:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
   28c36:	6a20      	ldr	r0, [r4, #32]
   28c38:	9b01      	ldr	r3, [sp, #4]
   28c3a:	1ac0      	subs	r0, r0, r3
}
   28c3c:	3801      	subs	r0, #1
   28c3e:	b002      	add	sp, #8
   28c40:	bd10      	pop	{r4, pc}

00028c42 <max_utilization_update>:

static inline void max_utilization_update(struct mpsc_pbuf_buffer *buffer)
{
   28c42:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   28c44:	6903      	ldr	r3, [r0, #16]
   28c46:	f013 0f04 	tst.w	r3, #4
   28c4a:	d100      	bne.n	28c4e <max_utilization_update+0xc>
		return;
	}

	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
}
   28c4c:	bd38      	pop	{r3, r4, r5, pc}
   28c4e:	4604      	mov	r4, r0
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
   28c50:	6a45      	ldr	r5, [r0, #36]	; 0x24
   28c52:	f7ff ffe4 	bl	28c1e <get_usage>
   28c56:	4285      	cmp	r5, r0
   28c58:	d902      	bls.n	28c60 <max_utilization_update+0x1e>
   28c5a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   28c5c:	6260      	str	r0, [r4, #36]	; 0x24
   28c5e:	e7f5      	b.n	28c4c <max_utilization_update+0xa>
   28c60:	4620      	mov	r0, r4
   28c62:	f7ff ffdc 	bl	28c1e <get_usage>
   28c66:	e7f9      	b.n	28c5c <max_utilization_update+0x1a>

00028c68 <add_skip_item>:

	return 0;
}

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
   28c68:	b410      	push	{r4}
	union mpsc_pbuf_generic skip = {
   28c6a:	2300      	movs	r3, #0
   28c6c:	f36f 0300 	bfc	r3, #0, #1
   28c70:	f043 0302 	orr.w	r3, r3, #2
   28c74:	f361 039f 	bfi	r3, r1, #2, #30
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   28c78:	69c2      	ldr	r2, [r0, #28]
   28c7a:	6804      	ldr	r4, [r0, #0]
   28c7c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   28c80:	6803      	ldr	r3, [r0, #0]
	uint32_t i = idx + val;
   28c82:	440b      	add	r3, r1
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   28c84:	6902      	ldr	r2, [r0, #16]
   28c86:	f012 0201 	ands.w	r2, r2, #1
   28c8a:	d104      	bne.n	28c96 <add_skip_item+0x2e>
	return (i >= buffer->size) ? i - buffer->size : i;
   28c8c:	6a04      	ldr	r4, [r0, #32]
   28c8e:	42a3      	cmp	r3, r4
   28c90:	d304      	bcc.n	28c9c <add_skip_item+0x34>
   28c92:	1b1b      	subs	r3, r3, r4
   28c94:	e002      	b.n	28c9c <add_skip_item+0x34>
		return i & (buffer->size - 1);
   28c96:	6a04      	ldr	r4, [r0, #32]
   28c98:	3c01      	subs	r4, #1
   28c9a:	4023      	ands	r3, r4
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   28c9c:	6003      	str	r3, [r0, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   28c9e:	6843      	ldr	r3, [r0, #4]
	uint32_t i = idx + val;
   28ca0:	4419      	add	r1, r3
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   28ca2:	b922      	cbnz	r2, 28cae <add_skip_item+0x46>
	return (i >= buffer->size) ? i - buffer->size : i;
   28ca4:	6a03      	ldr	r3, [r0, #32]
   28ca6:	4299      	cmp	r1, r3
   28ca8:	d304      	bcc.n	28cb4 <add_skip_item+0x4c>
   28caa:	1ac9      	subs	r1, r1, r3
   28cac:	e002      	b.n	28cb4 <add_skip_item+0x4c>
		return i & (buffer->size - 1);
   28cae:	6a03      	ldr	r3, [r0, #32]
   28cb0:	3b01      	subs	r3, #1
   28cb2:	4019      	ands	r1, r3
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   28cb4:	6041      	str	r1, [r0, #4]
}
   28cb6:	bc10      	pop	{r4}
   28cb8:	4770      	bx	lr

00028cba <drop_item_locked>:
 */
static union mpsc_pbuf_generic *drop_item_locked(struct mpsc_pbuf_buffer *buffer,
						 uint32_t free_wlen,
						 bool allow_drop,
						 bool *user_packet)
{
   28cba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28cbe:	b083      	sub	sp, #12
   28cc0:	4604      	mov	r4, r0
   28cc2:	9101      	str	r1, [sp, #4]
   28cc4:	4615      	mov	r5, r2
   28cc6:	461e      	mov	r6, r3
	union mpsc_pbuf_generic *item;
	uint32_t rd_wlen;
	uint32_t skip_wlen;

	*user_packet = false;
   28cc8:	2300      	movs	r3, #0
   28cca:	7033      	strb	r3, [r6, #0]
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   28ccc:	f8d0 801c 	ldr.w	r8, [r0, #28]
   28cd0:	f8d0 900c 	ldr.w	r9, [r0, #12]
   28cd4:	eb08 0a89 	add.w	sl, r8, r9, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   28cd8:	f818 3029 	ldrb.w	r3, [r8, r9, lsl #2]
   28cdc:	f003 0303 	and.w	r3, r3, #3
   28ce0:	2b02      	cmp	r3, #2
   28ce2:	d012      	beq.n	28d0a <drop_item_locked+0x50>
	return 0;
   28ce4:	f04f 0b00 	mov.w	fp, #0
	skip_wlen = get_skip(item);

	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
   28ce8:	69a3      	ldr	r3, [r4, #24]
   28cea:	4650      	mov	r0, sl
   28cec:	4798      	blx	r3
   28cee:	4607      	mov	r7, r0
	if (skip_wlen) {
   28cf0:	f1bb 0f00 	cmp.w	fp, #0
   28cf4:	d152      	bne.n	28d9c <drop_item_locked+0xe2>
		allow_drop = true;
	} else if (allow_drop) {
   28cf6:	2d00      	cmp	r5, #0
   28cf8:	d05d      	beq.n	28db6 <drop_item_locked+0xfc>
		if (item->hdr.busy) {
   28cfa:	f818 3029 	ldrb.w	r3, [r8, r9, lsl #2]
   28cfe:	f013 0f02 	tst.w	r3, #2
   28d02:	d10a      	bne.n	28d1a <drop_item_locked+0x60>
			} else {
				rd_wlen += buffer->get_wlen(item);
				*user_packet = true;
			}
		} else {
			*user_packet = true;
   28d04:	2301      	movs	r3, #1
   28d06:	7033      	strb	r3, [r6, #0]
   28d08:	e049      	b.n	28d9e <drop_item_locked+0xe4>
		return item->skip.len;
   28d0a:	f858 3029 	ldr.w	r3, [r8, r9, lsl #2]
	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
   28d0e:	ea5f 0b93 	movs.w	fp, r3, lsr #2
   28d12:	d0e9      	beq.n	28ce8 <drop_item_locked+0x2e>
		return item->skip.len;
   28d14:	465f      	mov	r7, fp
		allow_drop = true;
   28d16:	2501      	movs	r5, #1
   28d18:	e041      	b.n	28d9e <drop_item_locked+0xe4>
			add_skip_item(buffer, free_wlen + 1);
   28d1a:	9901      	ldr	r1, [sp, #4]
   28d1c:	3101      	adds	r1, #1
   28d1e:	4620      	mov	r0, r4
   28d20:	f7ff ffa2 	bl	28c68 <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   28d24:	6863      	ldr	r3, [r4, #4]
	uint32_t i = idx + val;
   28d26:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   28d28:	6922      	ldr	r2, [r4, #16]
   28d2a:	f012 0201 	ands.w	r2, r2, #1
   28d2e:	d104      	bne.n	28d3a <drop_item_locked+0x80>
	return (i >= buffer->size) ? i - buffer->size : i;
   28d30:	6a21      	ldr	r1, [r4, #32]
   28d32:	428b      	cmp	r3, r1
   28d34:	d304      	bcc.n	28d40 <drop_item_locked+0x86>
   28d36:	1a5b      	subs	r3, r3, r1
   28d38:	e002      	b.n	28d40 <drop_item_locked+0x86>
		return i & (buffer->size - 1);
   28d3a:	6a21      	ldr	r1, [r4, #32]
   28d3c:	3901      	subs	r1, #1
   28d3e:	400b      	ands	r3, r1
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   28d40:	6063      	str	r3, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   28d42:	6823      	ldr	r3, [r4, #0]
	uint32_t i = idx + val;
   28d44:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   28d46:	b922      	cbnz	r2, 28d52 <drop_item_locked+0x98>
	return (i >= buffer->size) ? i - buffer->size : i;
   28d48:	6a21      	ldr	r1, [r4, #32]
   28d4a:	428b      	cmp	r3, r1
   28d4c:	d304      	bcc.n	28d58 <drop_item_locked+0x9e>
   28d4e:	1a5b      	subs	r3, r3, r1
   28d50:	e002      	b.n	28d58 <drop_item_locked+0x9e>
		return i & (buffer->size - 1);
   28d52:	6a21      	ldr	r1, [r4, #32]
   28d54:	3901      	subs	r1, #1
   28d56:	400b      	ands	r3, r1
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   28d58:	6023      	str	r3, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   28d5a:	68e3      	ldr	r3, [r4, #12]
	uint32_t i = idx + val;
   28d5c:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   28d5e:	b922      	cbnz	r2, 28d6a <drop_item_locked+0xb0>
	return (i >= buffer->size) ? i - buffer->size : i;
   28d60:	6a22      	ldr	r2, [r4, #32]
   28d62:	4293      	cmp	r3, r2
   28d64:	d304      	bcc.n	28d70 <drop_item_locked+0xb6>
   28d66:	1a9b      	subs	r3, r3, r2
   28d68:	e002      	b.n	28d70 <drop_item_locked+0xb6>
		return i & (buffer->size - 1);
   28d6a:	6a22      	ldr	r2, [r4, #32]
   28d6c:	3a01      	subs	r2, #1
   28d6e:	4013      	ands	r3, r2
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   28d70:	69e1      	ldr	r1, [r4, #28]
   28d72:	eb01 0a83 	add.w	sl, r1, r3, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   28d76:	f811 2023 	ldrb.w	r2, [r1, r3, lsl #2]
   28d7a:	f002 0203 	and.w	r2, r2, #3
   28d7e:	2a02      	cmp	r2, #2
   28d80:	d006      	beq.n	28d90 <drop_item_locked+0xd6>
				rd_wlen += buffer->get_wlen(item);
   28d82:	69a3      	ldr	r3, [r4, #24]
   28d84:	4650      	mov	r0, sl
   28d86:	4798      	blx	r3
   28d88:	4407      	add	r7, r0
				*user_packet = true;
   28d8a:	2301      	movs	r3, #1
   28d8c:	7033      	strb	r3, [r6, #0]
   28d8e:	e006      	b.n	28d9e <drop_item_locked+0xe4>
		return item->skip.len;
   28d90:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
			if (skip_wlen) {
   28d94:	089b      	lsrs	r3, r3, #2
   28d96:	d0f4      	beq.n	28d82 <drop_item_locked+0xc8>
				rd_wlen += skip_wlen;
   28d98:	441f      	add	r7, r3
   28d9a:	e000      	b.n	28d9e <drop_item_locked+0xe4>
		allow_drop = true;
   28d9c:	2501      	movs	r5, #1
		}
	} else {
		item = NULL;
	}

	if (allow_drop) {
   28d9e:	b195      	cbz	r5, 28dc6 <drop_item_locked+0x10c>
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   28da0:	68e3      	ldr	r3, [r4, #12]
	uint32_t i = idx + val;
   28da2:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   28da4:	6922      	ldr	r2, [r4, #16]
   28da6:	f012 0f01 	tst.w	r2, #1
   28daa:	d107      	bne.n	28dbc <drop_item_locked+0x102>
	return (i >= buffer->size) ? i - buffer->size : i;
   28dac:	6a22      	ldr	r2, [r4, #32]
   28dae:	4293      	cmp	r3, r2
   28db0:	d307      	bcc.n	28dc2 <drop_item_locked+0x108>
   28db2:	1a9b      	subs	r3, r3, r2
   28db4:	e005      	b.n	28dc2 <drop_item_locked+0x108>
		item = NULL;
   28db6:	f04f 0a00 	mov.w	sl, #0
   28dba:	e7f0      	b.n	28d9e <drop_item_locked+0xe4>
		return i & (buffer->size - 1);
   28dbc:	6a22      	ldr	r2, [r4, #32]
   28dbe:	3a01      	subs	r2, #1
   28dc0:	4013      	ands	r3, r2
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   28dc2:	60e3      	str	r3, [r4, #12]
		buffer->tmp_rd_idx = buffer->rd_idx;
   28dc4:	60a3      	str	r3, [r4, #8]
	}

	return item;
}
   28dc6:	4650      	mov	r0, sl
   28dc8:	b003      	add	sp, #12
   28dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00028dce <mpsc_pbuf_init>:
{
   28dce:	b538      	push	{r3, r4, r5, lr}
   28dd0:	4604      	mov	r4, r0
   28dd2:	460d      	mov	r5, r1
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
   28dd4:	221c      	movs	r2, #28
   28dd6:	2100      	movs	r1, #0
   28dd8:	f000 ff1a 	bl	29c10 <memset>
	buffer->get_wlen = cfg->get_wlen;
   28ddc:	68eb      	ldr	r3, [r5, #12]
   28dde:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
   28de0:	68ab      	ldr	r3, [r5, #8]
   28de2:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
   28de4:	682b      	ldr	r3, [r5, #0]
   28de6:	61e3      	str	r3, [r4, #28]
	buffer->size = cfg->size;
   28de8:	686b      	ldr	r3, [r5, #4]
   28dea:	6223      	str	r3, [r4, #32]
	buffer->max_usage = 0;
   28dec:	2200      	movs	r2, #0
   28dee:	6262      	str	r2, [r4, #36]	; 0x24
	buffer->flags = cfg->flags;
   28df0:	692a      	ldr	r2, [r5, #16]
   28df2:	6122      	str	r2, [r4, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
   28df4:	b12b      	cbz	r3, 28e02 <mpsc_pbuf_init+0x34>
   28df6:	1e59      	subs	r1, r3, #1
   28df8:	420b      	tst	r3, r1
   28dfa:	d102      	bne.n	28e02 <mpsc_pbuf_init+0x34>
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
   28dfc:	f042 0201 	orr.w	r2, r2, #1
   28e00:	6122      	str	r2, [r4, #16]
	err = k_sem_init(&buffer->sem, 0, 1);
   28e02:	f104 0028 	add.w	r0, r4, #40	; 0x28
	return z_impl_k_sem_init(sem, initial_count, limit);
   28e06:	2201      	movs	r2, #1
   28e08:	2100      	movs	r1, #0
   28e0a:	f007 fb4a 	bl	304a2 <z_impl_k_sem_init>
}
   28e0e:	bd38      	pop	{r3, r4, r5, pc}

00028e10 <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
   28e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28e14:	b085      	sub	sp, #20
   28e16:	469a      	mov	sl, r3
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
   28e18:	6a03      	ldr	r3, [r0, #32]
   28e1a:	3b01      	subs	r3, #1
   28e1c:	428b      	cmp	r3, r1
   28e1e:	d37f      	bcc.n	28f20 <mpsc_pbuf_alloc+0x110>
   28e20:	4605      	mov	r5, r0
   28e22:	460f      	mov	r7, r1
   28e24:	4691      	mov	r9, r2
	union mpsc_pbuf_generic *dropped_item = NULL;
   28e26:	f04f 0800 	mov.w	r8, #0
	union mpsc_pbuf_generic *item = NULL;
   28e2a:	46c3      	mov	fp, r8
   28e2c:	e019      	b.n	28e62 <mpsc_pbuf_alloc+0x52>
		return i & (buffer->size - 1);
   28e2e:	6a2a      	ldr	r2, [r5, #32]
   28e30:	3a01      	subs	r2, #1
   28e32:	4013      	ands	r3, r2
		if (free_wlen >= wlen) {
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
			item->hdr.valid = 0;
			item->hdr.busy = 0;
			buffer->tmp_wr_idx = idx_inc(buffer,
   28e34:	602b      	str	r3, [r5, #0]
		cont = false;
   28e36:	2400      	movs	r4, #0
   28e38:	f386 8811 	msr	BASEPRI, r6
   28e3c:	f3bf 8f6f 	isb	sy
			cont = dropped_item != NULL;
		}

		k_spin_unlock(&buffer->lock, key);

		if (cont && dropped_item && valid_drop) {
   28e40:	b16c      	cbz	r4, 28e5e <mpsc_pbuf_alloc+0x4e>
   28e42:	f1b8 0f00 	cmp.w	r8, #0
   28e46:	d00a      	beq.n	28e5e <mpsc_pbuf_alloc+0x4e>
   28e48:	f89d 300b 	ldrb.w	r3, [sp, #11]
   28e4c:	b13b      	cbz	r3, 28e5e <mpsc_pbuf_alloc+0x4e>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
   28e4e:	696b      	ldr	r3, [r5, #20]
   28e50:	2b00      	cmp	r3, #0
   28e52:	d062      	beq.n	28f1a <mpsc_pbuf_alloc+0x10a>
				buffer->notify_drop(buffer, dropped_item);
   28e54:	4641      	mov	r1, r8
   28e56:	4628      	mov	r0, r5
   28e58:	4798      	blx	r3
			}
			dropped_item = NULL;
   28e5a:	f04f 0800 	mov.w	r8, #0
		}
	} while (cont);
   28e5e:	2c00      	cmp	r4, #0
   28e60:	d060      	beq.n	28f24 <mpsc_pbuf_alloc+0x114>
	__asm__ volatile(
   28e62:	f04f 0340 	mov.w	r3, #64	; 0x40
   28e66:	f3ef 8611 	mrs	r6, BASEPRI
   28e6a:	f383 8812 	msr	BASEPRI_MAX, r3
   28e6e:	f3bf 8f6f 	isb	sy
   28e72:	9601      	str	r6, [sp, #4]
		wrap = free_space(buffer, &free_wlen);
   28e74:	a903      	add	r1, sp, #12
   28e76:	4628      	mov	r0, r5
   28e78:	f7ff febc 	bl	28bf4 <free_space>
   28e7c:	4604      	mov	r4, r0
		if (free_wlen >= wlen) {
   28e7e:	9903      	ldr	r1, [sp, #12]
   28e80:	42b9      	cmp	r1, r7
   28e82:	d319      	bcc.n	28eb8 <mpsc_pbuf_alloc+0xa8>
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
   28e84:	69eb      	ldr	r3, [r5, #28]
   28e86:	682a      	ldr	r2, [r5, #0]
			item =
   28e88:	eb03 0b82 	add.w	fp, r3, r2, lsl #2
			item->hdr.valid = 0;
   28e8c:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
   28e90:	f36f 0100 	bfc	r1, #0, #1
   28e94:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			item->hdr.busy = 0;
   28e98:	b2c9      	uxtb	r1, r1
   28e9a:	f36f 0141 	bfc	r1, #1, #1
   28e9e:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			buffer->tmp_wr_idx = idx_inc(buffer,
   28ea2:	682b      	ldr	r3, [r5, #0]
	uint32_t i = idx + val;
   28ea4:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   28ea6:	692a      	ldr	r2, [r5, #16]
   28ea8:	f012 0f01 	tst.w	r2, #1
   28eac:	d1bf      	bne.n	28e2e <mpsc_pbuf_alloc+0x1e>
	return (i >= buffer->size) ? i - buffer->size : i;
   28eae:	6a2a      	ldr	r2, [r5, #32]
   28eb0:	4293      	cmp	r3, r2
   28eb2:	d3bf      	bcc.n	28e34 <mpsc_pbuf_alloc+0x24>
   28eb4:	1a9b      	subs	r3, r3, r2
   28eb6:	e7bd      	b.n	28e34 <mpsc_pbuf_alloc+0x24>
		} else if (wrap) {
   28eb8:	b9a0      	cbnz	r0, 28ee4 <mpsc_pbuf_alloc+0xd4>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   28eba:	ea5a 0309 	orrs.w	r3, sl, r9
   28ebe:	d003      	beq.n	28ec8 <mpsc_pbuf_alloc+0xb8>
			   !k_is_in_isr()) {
   28ec0:	f007 f9dd 	bl	3027e <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   28ec4:	4604      	mov	r4, r0
   28ec6:	b188      	cbz	r0, 28eec <mpsc_pbuf_alloc+0xdc>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
   28ec8:	692a      	ldr	r2, [r5, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
   28eca:	f10d 030b 	add.w	r3, sp, #11
   28ece:	f3c2 0240 	ubfx	r2, r2, #1, #1
   28ed2:	9903      	ldr	r1, [sp, #12]
   28ed4:	4628      	mov	r0, r5
   28ed6:	f7ff fef0 	bl	28cba <drop_item_locked>
			cont = dropped_item != NULL;
   28eda:	4680      	mov	r8, r0
   28edc:	1e04      	subs	r4, r0, #0
   28ede:	bf18      	it	ne
   28ee0:	2401      	movne	r4, #1
   28ee2:	e7a9      	b.n	28e38 <mpsc_pbuf_alloc+0x28>
			add_skip_item(buffer, free_wlen);
   28ee4:	4628      	mov	r0, r5
   28ee6:	f7ff febf 	bl	28c68 <add_skip_item>
			cont = true;
   28eea:	e7a5      	b.n	28e38 <mpsc_pbuf_alloc+0x28>
	__asm__ volatile(
   28eec:	9b01      	ldr	r3, [sp, #4]
   28eee:	f383 8811 	msr	BASEPRI, r3
   28ef2:	f3bf 8f6f 	isb	sy
			err = k_sem_take(&buffer->sem, timeout);
   28ef6:	f105 0028 	add.w	r0, r5, #40	; 0x28
	return z_impl_k_sem_take(sem, timeout);
   28efa:	464a      	mov	r2, r9
   28efc:	4653      	mov	r3, sl
   28efe:	f7fd fb81 	bl	26604 <z_impl_k_sem_take>
	__asm__ volatile(
   28f02:	f04f 0340 	mov.w	r3, #64	; 0x40
   28f06:	f3ef 8611 	mrs	r6, BASEPRI
   28f0a:	f383 8812 	msr	BASEPRI_MAX, r3
   28f0e:	f3bf 8f6f 	isb	sy
			if (err == 0) {
   28f12:	2800      	cmp	r0, #0
   28f14:	d190      	bne.n	28e38 <mpsc_pbuf_alloc+0x28>
				cont = true;
   28f16:	2401      	movs	r4, #1
   28f18:	e78e      	b.n	28e38 <mpsc_pbuf_alloc+0x28>
			dropped_item = NULL;
   28f1a:	f04f 0800 	mov.w	r8, #0
   28f1e:	e79e      	b.n	28e5e <mpsc_pbuf_alloc+0x4e>
		return NULL;
   28f20:	f04f 0b00 	mov.w	fp, #0
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
   28f24:	4658      	mov	r0, fp
   28f26:	b005      	add	sp, #20
   28f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00028f2c <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
   28f2c:	b570      	push	{r4, r5, r6, lr}
   28f2e:	4604      	mov	r4, r0
   28f30:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   28f32:	6983      	ldr	r3, [r0, #24]
   28f34:	4608      	mov	r0, r1
   28f36:	4798      	blx	r3
   28f38:	f04f 0340 	mov.w	r3, #64	; 0x40
   28f3c:	f3ef 8611 	mrs	r6, BASEPRI
   28f40:	f383 8812 	msr	BASEPRI_MAX, r3
   28f44:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
   28f48:	782b      	ldrb	r3, [r5, #0]
   28f4a:	f043 0301 	orr.w	r3, r3, #1
   28f4e:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   28f50:	6863      	ldr	r3, [r4, #4]
	uint32_t i = idx + val;
   28f52:	4418      	add	r0, r3
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   28f54:	6923      	ldr	r3, [r4, #16]
   28f56:	f013 0f01 	tst.w	r3, #1
   28f5a:	d104      	bne.n	28f66 <mpsc_pbuf_commit+0x3a>
	return (i >= buffer->size) ? i - buffer->size : i;
   28f5c:	6a23      	ldr	r3, [r4, #32]
   28f5e:	4298      	cmp	r0, r3
   28f60:	d304      	bcc.n	28f6c <mpsc_pbuf_commit+0x40>
   28f62:	1ac0      	subs	r0, r0, r3
   28f64:	e002      	b.n	28f6c <mpsc_pbuf_commit+0x40>
		return i & (buffer->size - 1);
   28f66:	6a23      	ldr	r3, [r4, #32]
   28f68:	3b01      	subs	r3, #1
   28f6a:	4018      	ands	r0, r3
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   28f6c:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
   28f6e:	4620      	mov	r0, r4
   28f70:	f7ff fe67 	bl	28c42 <max_utilization_update>
	__asm__ volatile(
   28f74:	f386 8811 	msr	BASEPRI, r6
   28f78:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
   28f7c:	bd70      	pop	{r4, r5, r6, pc}

00028f7e <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
   28f7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28f80:	4604      	mov	r4, r0
   28f82:	e039      	b.n	28ff8 <mpsc_pbuf_claim+0x7a>
		*res = (buffer->wr_idx - buffer->tmp_rd_idx);
   28f84:	1a9b      	subs	r3, r3, r2
		return false;
   28f86:	e045      	b.n	29014 <mpsc_pbuf_claim+0x96>
		return item->skip.len;
   28f88:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
		if (!a || is_invalid(item)) {
			item = NULL;
		} else {
			uint32_t skip = get_skip(item);

			if (skip || !is_valid(item)) {
   28f8c:	0880      	lsrs	r0, r0, #2
   28f8e:	d157      	bne.n	29040 <mpsc_pbuf_claim+0xc2>
   28f90:	e04d      	b.n	2902e <mpsc_pbuf_claim+0xb0>
		return i & (buffer->size - 1);
   28f92:	6a21      	ldr	r1, [r4, #32]
   28f94:	3901      	subs	r1, #1
   28f96:	400b      	ands	r3, r1
				uint32_t inc =
					skip ? skip : buffer->get_wlen(item);

				buffer->tmp_rd_idx =
   28f98:	60a3      	str	r3, [r4, #8]
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
				buffer->rd_idx =
					idx_inc(buffer, buffer->rd_idx, inc);
   28f9a:	68e3      	ldr	r3, [r4, #12]
	uint32_t i = idx + val;
   28f9c:	4403      	add	r3, r0
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   28f9e:	b922      	cbnz	r2, 28faa <mpsc_pbuf_claim+0x2c>
	return (i >= buffer->size) ? i - buffer->size : i;
   28fa0:	6a22      	ldr	r2, [r4, #32]
   28fa2:	4293      	cmp	r3, r2
   28fa4:	d304      	bcc.n	28fb0 <mpsc_pbuf_claim+0x32>
   28fa6:	1a9b      	subs	r3, r3, r2
   28fa8:	e002      	b.n	28fb0 <mpsc_pbuf_claim+0x32>
		return i & (buffer->size - 1);
   28faa:	6a22      	ldr	r2, [r4, #32]
   28fac:	3a01      	subs	r2, #1
   28fae:	4013      	ands	r3, r2
				buffer->rd_idx =
   28fb0:	60e3      	str	r3, [r4, #12]
				cont = true;
   28fb2:	2301      	movs	r3, #1
			if (skip || !is_valid(item)) {
   28fb4:	e01b      	b.n	28fee <mpsc_pbuf_claim+0x70>
			} else {
				item->hdr.busy = 1;
   28fb6:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
   28fba:	f043 0302 	orr.w	r3, r3, #2
   28fbe:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
				buffer->tmp_rd_idx =
					idx_inc(buffer, buffer->tmp_rd_idx,
   28fc2:	68a7      	ldr	r7, [r4, #8]
						buffer->get_wlen(item));
   28fc4:	69a3      	ldr	r3, [r4, #24]
					idx_inc(buffer, buffer->tmp_rd_idx,
   28fc6:	4630      	mov	r0, r6
   28fc8:	4798      	blx	r3
	uint32_t i = idx + val;
   28fca:	4438      	add	r0, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   28fcc:	6923      	ldr	r3, [r4, #16]
   28fce:	f013 0f01 	tst.w	r3, #1
   28fd2:	d104      	bne.n	28fde <mpsc_pbuf_claim+0x60>
	return (i >= buffer->size) ? i - buffer->size : i;
   28fd4:	6a23      	ldr	r3, [r4, #32]
   28fd6:	4298      	cmp	r0, r3
   28fd8:	d304      	bcc.n	28fe4 <mpsc_pbuf_claim+0x66>
   28fda:	1ac0      	subs	r0, r0, r3
   28fdc:	e002      	b.n	28fe4 <mpsc_pbuf_claim+0x66>
		return i & (buffer->size - 1);
   28fde:	6a23      	ldr	r3, [r4, #32]
   28fe0:	3b01      	subs	r3, #1
   28fe2:	4018      	ands	r0, r3
				buffer->tmp_rd_idx =
   28fe4:	60a0      	str	r0, [r4, #8]
		cont = false;
   28fe6:	2300      	movs	r3, #0
   28fe8:	e001      	b.n	28fee <mpsc_pbuf_claim+0x70>
   28fea:	2300      	movs	r3, #0
			item = NULL;
   28fec:	461e      	mov	r6, r3
   28fee:	f385 8811 	msr	BASEPRI, r5
   28ff2:	f3bf 8f6f 	isb	sy

		if (!cont) {
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);
   28ff6:	b38b      	cbz	r3, 2905c <mpsc_pbuf_claim+0xde>
	__asm__ volatile(
   28ff8:	f04f 0340 	mov.w	r3, #64	; 0x40
   28ffc:	f3ef 8511 	mrs	r5, BASEPRI
   29000:	f383 8812 	msr	BASEPRI_MAX, r3
   29004:	f3bf 8f6f 	isb	sy
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   29008:	68a2      	ldr	r2, [r4, #8]
   2900a:	6863      	ldr	r3, [r4, #4]
   2900c:	429a      	cmp	r2, r3
   2900e:	d9b9      	bls.n	28f84 <mpsc_pbuf_claim+0x6>
	*res = buffer->size - buffer->tmp_rd_idx;
   29010:	6a23      	ldr	r3, [r4, #32]
   29012:	1a9b      	subs	r3, r3, r2
			&buffer->buf[buffer->tmp_rd_idx];
   29014:	69e1      	ldr	r1, [r4, #28]
		item = (union mpsc_pbuf_generic *)
   29016:	eb01 0682 	add.w	r6, r1, r2, lsl #2
		if (!a || is_invalid(item)) {
   2901a:	2b00      	cmp	r3, #0
   2901c:	d0e5      	beq.n	28fea <mpsc_pbuf_claim+0x6c>
	return !item->hdr.valid && !item->hdr.busy;
   2901e:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
		if (!a || is_invalid(item)) {
   29022:	f013 0303 	ands.w	r3, r3, #3
   29026:	d016      	beq.n	29056 <mpsc_pbuf_claim+0xd8>
	if (item->hdr.busy && !item->hdr.valid) {
   29028:	2b02      	cmp	r3, #2
   2902a:	d0ad      	beq.n	28f88 <mpsc_pbuf_claim+0xa>
	return 0;
   2902c:	2000      	movs	r0, #0
	return item->hdr.valid;
   2902e:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
			if (skip || !is_valid(item)) {
   29032:	f013 0f01 	tst.w	r3, #1
   29036:	d1be      	bne.n	28fb6 <mpsc_pbuf_claim+0x38>
					skip ? skip : buffer->get_wlen(item);
   29038:	b910      	cbnz	r0, 29040 <mpsc_pbuf_claim+0xc2>
   2903a:	69a3      	ldr	r3, [r4, #24]
   2903c:	4630      	mov	r0, r6
   2903e:	4798      	blx	r3
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
   29040:	68a3      	ldr	r3, [r4, #8]
	uint32_t i = idx + val;
   29042:	4403      	add	r3, r0
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   29044:	6922      	ldr	r2, [r4, #16]
   29046:	f012 0201 	ands.w	r2, r2, #1
   2904a:	d1a2      	bne.n	28f92 <mpsc_pbuf_claim+0x14>
	return (i >= buffer->size) ? i - buffer->size : i;
   2904c:	6a21      	ldr	r1, [r4, #32]
   2904e:	428b      	cmp	r3, r1
   29050:	d3a2      	bcc.n	28f98 <mpsc_pbuf_claim+0x1a>
   29052:	1a5b      	subs	r3, r3, r1
   29054:	e7a0      	b.n	28f98 <mpsc_pbuf_claim+0x1a>
		cont = false;
   29056:	2300      	movs	r3, #0
			item = NULL;
   29058:	461e      	mov	r6, r3
   2905a:	e7c8      	b.n	28fee <mpsc_pbuf_claim+0x70>

	return item;
}
   2905c:	4630      	mov	r0, r6
   2905e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00029060 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
   29060:	b538      	push	{r3, r4, r5, lr}
   29062:	4604      	mov	r4, r0
   29064:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   29066:	6983      	ldr	r3, [r0, #24]
   29068:	4608      	mov	r0, r1
   2906a:	4798      	blx	r3
   2906c:	f04f 0240 	mov.w	r2, #64	; 0x40
   29070:	f3ef 8311 	mrs	r3, BASEPRI
   29074:	f382 8812 	msr	BASEPRI_MAX, r2
   29078:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
   2907c:	782a      	ldrb	r2, [r5, #0]
   2907e:	f36f 0200 	bfc	r2, #0, #1
   29082:	702a      	strb	r2, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   29084:	6922      	ldr	r2, [r4, #16]
   29086:	f012 0f02 	tst.w	r2, #2
   2908a:	d00a      	beq.n	290a2 <mpsc_pbuf_free+0x42>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
   2908c:	69e2      	ldr	r2, [r4, #28]
   2908e:	68e1      	ldr	r1, [r4, #12]
   29090:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   29094:	42aa      	cmp	r2, r5
   29096:	d004      	beq.n	290a2 <mpsc_pbuf_free+0x42>
		witem->hdr.busy = 0;
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
	} else {
		witem->skip.len = wlen;
   29098:	682a      	ldr	r2, [r5, #0]
   2909a:	f360 029f 	bfi	r2, r0, #2, #30
   2909e:	602a      	str	r2, [r5, #0]
   290a0:	e012      	b.n	290c8 <mpsc_pbuf_free+0x68>
		witem->hdr.busy = 0;
   290a2:	782a      	ldrb	r2, [r5, #0]
   290a4:	f36f 0241 	bfc	r2, #1, #1
   290a8:	702a      	strb	r2, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   290aa:	68e2      	ldr	r2, [r4, #12]
	uint32_t i = idx + val;
   290ac:	4402      	add	r2, r0
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   290ae:	6921      	ldr	r1, [r4, #16]
   290b0:	f011 0f01 	tst.w	r1, #1
   290b4:	d104      	bne.n	290c0 <mpsc_pbuf_free+0x60>
	return (i >= buffer->size) ? i - buffer->size : i;
   290b6:	6a21      	ldr	r1, [r4, #32]
   290b8:	428a      	cmp	r2, r1
   290ba:	d304      	bcc.n	290c6 <mpsc_pbuf_free+0x66>
   290bc:	1a52      	subs	r2, r2, r1
   290be:	e002      	b.n	290c6 <mpsc_pbuf_free+0x66>
		return i & (buffer->size - 1);
   290c0:	6a21      	ldr	r1, [r4, #32]
   290c2:	3901      	subs	r1, #1
   290c4:	400a      	ands	r2, r1
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   290c6:	60e2      	str	r2, [r4, #12]
	__asm__ volatile(
   290c8:	f383 8811 	msr	BASEPRI, r3
   290cc:	f3bf 8f6f 	isb	sy
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
   290d0:	f104 0028 	add.w	r0, r4, #40	; 0x28
	z_impl_k_sem_give(sem);
   290d4:	f7fd fa6e 	bl	265b4 <z_impl_k_sem_give>
}
   290d8:	bd38      	pop	{r3, r4, r5, pc}

000290da <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   290da:	6883      	ldr	r3, [r0, #8]
   290dc:	6842      	ldr	r2, [r0, #4]
   290de:	4293      	cmp	r3, r2
   290e0:	d905      	bls.n	290ee <mpsc_pbuf_is_pending+0x14>
	*res = buffer->size - buffer->tmp_rd_idx;
   290e2:	6a00      	ldr	r0, [r0, #32]
   290e4:	1ac0      	subs	r0, r0, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
   290e6:	3800      	subs	r0, #0
   290e8:	bf18      	it	ne
   290ea:	2001      	movne	r0, #1
   290ec:	4770      	bx	lr
		*res = (buffer->wr_idx - buffer->tmp_rd_idx);
   290ee:	1ad0      	subs	r0, r2, r3
		return false;
   290f0:	e7f9      	b.n	290e6 <mpsc_pbuf_is_pending+0xc>

000290f2 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   290f2:	4770      	bx	lr

000290f4 <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
   290f4:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
   290f6:	f013 0f04 	tst.w	r3, #4
   290fa:	d001      	beq.n	29100 <log_msg_generic_get_wlen+0xc>
	return 0;
   290fc:	2000      	movs	r0, #0
}
   290fe:	4770      	bx	lr
		return log_msg_get_total_wlen(msg->hdr.desc);
   29100:	6803      	ldr	r3, [r0, #0]
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   29102:	f3c3 2049 	ubfx	r0, r3, #9, #10
   29106:	f3c3 43cb 	ubfx	r3, r3, #19, #12
   2910a:	4418      	add	r0, r3
   2910c:	3017      	adds	r0, #23
   2910e:	f020 0007 	bic.w	r0, r0, #7
   29112:	0880      	lsrs	r0, r0, #2
		return log_msg_get_total_wlen(msg->hdr.desc);
   29114:	4770      	bx	lr

00029116 <dummy_timestamp>:
}
   29116:	2000      	movs	r0, #0
   29118:	4770      	bx	lr

0002911a <msg_filter_check>:
}
   2911a:	2001      	movs	r0, #1
   2911c:	4770      	bx	lr

0002911e <default_get_timestamp>:
{
   2911e:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   29120:	f005 f8e9 	bl	2e2f6 <sys_clock_cycle_get_32>
}
   29124:	bd08      	pop	{r3, pc}

00029126 <k_msleep>:
{
   29126:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   29128:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   2912c:	17c1      	asrs	r1, r0, #31
   2912e:	03c9      	lsls	r1, r1, #15
   29130:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   29134:	03c0      	lsls	r0, r0, #15
   29136:	f240 33e7 	movw	r3, #999	; 0x3e7
   2913a:	18c0      	adds	r0, r0, r3
   2913c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   29140:	f04f 0300 	mov.w	r3, #0
   29144:	f141 0100 	adc.w	r1, r1, #0
   29148:	f7d6 ffda 	bl	100 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   2914c:	f7fd ff8e 	bl	2706c <z_impl_k_sleep>
}
   29150:	bd08      	pop	{r3, pc}

00029152 <msg_alloc>:
{
   29152:	b508      	push	{r3, lr}
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
   29154:	2200      	movs	r2, #0
   29156:	2300      	movs	r3, #0
   29158:	f7ff fe5a 	bl	28e10 <mpsc_pbuf_alloc>
}
   2915c:	bd08      	pop	{r3, pc}

0002915e <msg_free>:
{
   2915e:	b508      	push	{r3, lr}
	mpsc_pbuf_free(buffer, &msg->buf);
   29160:	f7ff ff7e 	bl	29060 <mpsc_pbuf_free>
}
   29164:	bd08      	pop	{r3, pc}

00029166 <msg_pending>:
{
   29166:	b508      	push	{r3, lr}
	return mpsc_pbuf_is_pending(buffer);
   29168:	f7ff ffb7 	bl	290da <mpsc_pbuf_is_pending>
}
   2916c:	bd08      	pop	{r3, pc}

0002916e <z_log_vprintk>:
{
   2916e:	b500      	push	{lr}
   29170:	b085      	sub	sp, #20
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
   29172:	9103      	str	r1, [sp, #12]
   29174:	9002      	str	r0, [sp, #8]
   29176:	2000      	movs	r0, #0
   29178:	9001      	str	r0, [sp, #4]
   2917a:	9000      	str	r0, [sp, #0]
   2917c:	4603      	mov	r3, r0
   2917e:	4602      	mov	r2, r0
   29180:	4601      	mov	r1, r0
   29182:	f000 f88b 	bl	2929c <z_impl_z_log_msg_runtime_vcreate>
}
   29186:	b005      	add	sp, #20
   29188:	f85d fb04 	ldr.w	pc, [sp], #4

0002918c <z_log_notify_drop>:
 */
bool z_log_msg_pending(void);

static inline void z_log_notify_drop(const struct mpsc_pbuf_buffer *buffer,
				     const union mpsc_pbuf_generic *item)
{
   2918c:	b508      	push	{r3, lr}
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
   2918e:	2001      	movs	r0, #1
   29190:	f7ea fd40 	bl	13c14 <z_log_dropped>
}
   29194:	bd08      	pop	{r3, pc}

00029196 <z_log_msg_claim>:
{
   29196:	b508      	push	{r3, lr}
	return z_log_msg_local_claim();
   29198:	f7ea fdbe 	bl	13d18 <z_log_msg_local_claim>
}
   2919c:	bd08      	pop	{r3, pc}

0002919e <msg_commit>:
{
   2919e:	b508      	push	{r3, lr}
	mpsc_pbuf_commit(buffer, &m->buf);
   291a0:	f7ff fec4 	bl	28f2c <mpsc_pbuf_commit>
	z_log_msg_post_finalize();
   291a4:	f7ea fe56 	bl	13e54 <z_log_msg_post_finalize>
}
   291a8:	bd08      	pop	{r3, pc}

000291aa <z_log_get_tag>:
}
   291aa:	2000      	movs	r0, #0
   291ac:	4770      	bx	lr

000291ae <z_cbprintf_cpy>:
{
   291ae:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
   291b0:	6853      	ldr	r3, [r2, #4]
   291b2:	6896      	ldr	r6, [r2, #8]
   291b4:	1b9b      	subs	r3, r3, r6
   291b6:	428b      	cmp	r3, r1
   291b8:	d30c      	bcc.n	291d4 <z_cbprintf_cpy+0x26>
   291ba:	460c      	mov	r4, r1
   291bc:	4615      	mov	r5, r2
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
   291be:	6813      	ldr	r3, [r2, #0]
   291c0:	460a      	mov	r2, r1
   291c2:	4601      	mov	r1, r0
   291c4:	1998      	adds	r0, r3, r6
   291c6:	f000 fcf4 	bl	29bb2 <memcpy>
	desc->off += len;
   291ca:	68ab      	ldr	r3, [r5, #8]
   291cc:	4423      	add	r3, r4
   291ce:	60ab      	str	r3, [r5, #8]
	return len;
   291d0:	4620      	mov	r0, r4
}
   291d2:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
   291d4:	f06f 001b 	mvn.w	r0, #27
   291d8:	e7fb      	b.n	291d2 <z_cbprintf_cpy+0x24>

000291da <z_log_msg_finalize>:
	!(IS_ENABLED(CONFIG_LOG_FRONTEND) && \
	 (IS_ENABLED(CONFIG_LOG_FRONTEND_ONLY) || log_backend_count_get() == 0))

void z_log_msg_finalize(struct log_msg *msg, const void *source,
			 const struct log_msg_desc desc, const void *data)
{
   291da:	b570      	push	{r4, r5, r6, lr}
	if (!msg) {
   291dc:	b190      	cbz	r0, 29204 <z_log_msg_finalize+0x2a>
   291de:	460e      	mov	r6, r1
   291e0:	4614      	mov	r4, r2
   291e2:	4619      	mov	r1, r3
   291e4:	4605      	mov	r5, r0
		z_log_dropped(false);

		return;
	}

	if (data) {
   291e6:	b13b      	cbz	r3, 291f8 <z_log_msg_finalize+0x1e>
		uint8_t *d = msg->data + desc.package_len;
   291e8:	3010      	adds	r0, #16
   291ea:	f3c2 2349 	ubfx	r3, r2, #9, #10

		memcpy(d, data, desc.data_len);
   291ee:	f3c2 42cb 	ubfx	r2, r2, #19, #12
   291f2:	4418      	add	r0, r3
   291f4:	f000 fcdd 	bl	29bb2 <memcpy>
	}

	msg->hdr.desc = desc;
   291f8:	602c      	str	r4, [r5, #0]
	msg->hdr.source = source;
   291fa:	606e      	str	r6, [r5, #4]
	z_log_msg_commit(msg);
   291fc:	4628      	mov	r0, r5
   291fe:	f7ea fe6d 	bl	13edc <z_log_msg_commit>
}
   29202:	bd70      	pop	{r4, r5, r6, pc}
		z_log_dropped(false);
   29204:	f7ea fd06 	bl	13c14 <z_log_dropped>
		return;
   29208:	e7fb      	b.n	29202 <z_log_msg_finalize+0x28>

0002920a <z_impl_z_log_msg_static_create>:

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
   2920a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2920e:	b08a      	sub	sp, #40	; 0x28
   29210:	4605      	mov	r5, r0
   29212:	461e      	mov	r6, r3

	if (!BACKENDS_IN_USE()) {
		return;
	}

	struct log_msg_desc out_desc = desc;
   29214:	460f      	mov	r7, r1
	int inlen = desc.package_len;
   29216:	f3c1 2449 	ubfx	r4, r1, #9, #10
	struct log_msg *msg;

	if (inlen > 0) {
   2921a:	b364      	cbz	r4, 29276 <z_impl_z_log_msg_static_create+0x6c>
   2921c:	4690      	mov	r8, r2
	struct z_cbprintf_buf_desc buf_desc = {
   2921e:	2200      	movs	r2, #0
   29220:	9207      	str	r2, [sp, #28]
   29222:	9208      	str	r2, [sp, #32]
   29224:	9209      	str	r2, [sp, #36]	; 0x24
	return cbprintf_package_convert(in_packaged, in_len,
   29226:	2304      	movs	r3, #4
   29228:	9302      	str	r3, [sp, #8]
   2922a:	ab05      	add	r3, sp, #20
   2922c:	9301      	str	r3, [sp, #4]
   2922e:	230a      	movs	r3, #10
   29230:	9300      	str	r3, [sp, #0]
   29232:	ab07      	add	r3, sp, #28
   29234:	4621      	mov	r1, r4
   29236:	4640      	mov	r0, r8
   29238:	f7e9 fd58 	bl	12cec <cbprintf_package_convert>
					    strl, ARRAY_SIZE(strl));

		/* Update package length with calculated value (which may be extended
		 * when strings are copied into the package.
		 */
		out_desc.package_len = len;
   2923c:	f360 2752 	bfi	r7, r0, #9, #10
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   29240:	f3c0 0909 	ubfx	r9, r0, #0, #10
   29244:	f3c7 41cb 	ubfx	r1, r7, #19, #12
   29248:	4449      	add	r1, r9
   2924a:	3117      	adds	r1, #23
   2924c:	f021 0107 	bic.w	r1, r1, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   29250:	0888      	lsrs	r0, r1, #2
   29252:	f7ea fd59 	bl	13d08 <z_log_msg_alloc>
		if (msg) {
   29256:	4682      	mov	sl, r0
   29258:	b1b8      	cbz	r0, 2928a <z_impl_z_log_msg_static_create+0x80>
			len = cbprintf_package_copy(package, inlen,
   2925a:	2304      	movs	r3, #4
   2925c:	9302      	str	r3, [sp, #8]
   2925e:	ab05      	add	r3, sp, #20
   29260:	9301      	str	r3, [sp, #4]
   29262:	230a      	movs	r3, #10
   29264:	9300      	str	r3, [sp, #0]
   29266:	464b      	mov	r3, r9
   29268:	f100 0210 	add.w	r2, r0, #16
   2926c:	4621      	mov	r1, r4
   2926e:	4640      	mov	r0, r8
   29270:	f7ea feaa 	bl	13fc8 <cbprintf_package_copy>
						    msg->data, out_desc.package_len,
						    flags, strl, ARRAY_SIZE(strl));
			__ASSERT_NO_MSG(len >= 0);
   29274:	e009      	b.n	2928a <z_impl_z_log_msg_static_create+0x80>
   29276:	f3c1 41cb 	ubfx	r1, r1, #19, #12
   2927a:	440c      	add	r4, r1
   2927c:	3417      	adds	r4, #23
   2927e:	f024 0407 	bic.w	r4, r4, #7
		}
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   29282:	08a0      	lsrs	r0, r4, #2
   29284:	f7ea fd40 	bl	13d08 <z_log_msg_alloc>
   29288:	4682      	mov	sl, r0
	}

	z_log_msg_finalize(msg, source, out_desc, data);
   2928a:	4633      	mov	r3, r6
   2928c:	463a      	mov	r2, r7
   2928e:	4629      	mov	r1, r5
   29290:	4650      	mov	r0, sl
   29292:	f7ff ffa2 	bl	291da <z_log_msg_finalize>
}
   29296:	b00a      	add	sp, #40	; 0x28
   29298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002929c <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
   2929c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   292a0:	b085      	sub	sp, #20
   292a2:	4681      	mov	r9, r0
   292a4:	460d      	mov	r5, r1
   292a6:	4690      	mov	r8, r2
   292a8:	461e      	mov	r6, r3
   292aa:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
   292ae:	9f10      	ldr	r7, [sp, #64]	; 0x40
	int plen;

	if (fmt) {
   292b0:	b3b7      	cbz	r7, 29320 <z_impl_z_log_msg_runtime_vcreate+0x84>
		va_list ap2;

		va_copy(ap2, ap);
   292b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   292b4:	9303      	str	r3, [sp, #12]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
   292b6:	9300      	str	r3, [sp, #0]
   292b8:	463b      	mov	r3, r7
   292ba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   292bc:	2110      	movs	r1, #16
   292be:	2000      	movs	r0, #0
   292c0:	f7e9 fac2 	bl	12848 <cbvprintf_package>
		va_end(ap2);
	} else {
		plen = 0;
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
   292c4:	4682      	mov	sl, r0
   292c6:	eb00 030b 	add.w	r3, r0, fp
   292ca:	3317      	adds	r3, #23
   292cc:	f023 0307 	bic.w	r3, r3, #7
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
   292d0:	2400      	movs	r4, #0
   292d2:	f36f 0400 	bfc	r4, #0, #1
   292d6:	f36f 0441 	bfc	r4, #1, #1
   292da:	f36f 0482 	bfc	r4, #2, #1
   292de:	f369 04c5 	bfi	r4, r9, #3, #3
   292e2:	f368 1488 	bfi	r4, r8, #6, #3
   292e6:	f360 2452 	bfi	r4, r0, #9, #10
   292ea:	f36b 44de 	bfi	r4, fp, #19, #12
   292ee:	f36f 74df 	bfc	r4, #31, #1
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_DEFERRED) && BACKENDS_IN_USE()) {
		msg = z_log_msg_alloc(msg_wlen);
   292f2:	0898      	lsrs	r0, r3, #2
   292f4:	f7ea fd08 	bl	13d08 <z_log_msg_alloc>
		if (IS_ENABLED(CONFIG_LOG_FRONTEND) && msg == NULL) {
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
   292f8:	4680      	mov	r8, r0
   292fa:	b140      	cbz	r0, 2930e <z_impl_z_log_msg_runtime_vcreate+0x72>
   292fc:	3010      	adds	r0, #16
	} else {
		msg = alloca(msg_wlen * sizeof(int));
		pkg = msg->data;
	}

	if (pkg && fmt) {
   292fe:	b137      	cbz	r7, 2930e <z_impl_z_log_msg_runtime_vcreate+0x72>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
   29300:	9b11      	ldr	r3, [sp, #68]	; 0x44
   29302:	9300      	str	r3, [sp, #0]
   29304:	463b      	mov	r3, r7
   29306:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   29308:	4651      	mov	r1, sl
   2930a:	f7e9 fa9d 	bl	12848 <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
   2930e:	4633      	mov	r3, r6
   29310:	4622      	mov	r2, r4
   29312:	4629      	mov	r1, r5
   29314:	4640      	mov	r0, r8
   29316:	f7ff ff60 	bl	291da <z_log_msg_finalize>
	}
}
   2931a:	b005      	add	sp, #20
   2931c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		plen = 0;
   29320:	2000      	movs	r0, #0
   29322:	e7cf      	b.n	292c4 <z_impl_z_log_msg_runtime_vcreate+0x28>

00029324 <buffer_write>:
{
   29324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29326:	4607      	mov	r7, r0
   29328:	460d      	mov	r5, r1
   2932a:	4614      	mov	r4, r2
   2932c:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
   2932e:	4632      	mov	r2, r6
   29330:	4621      	mov	r1, r4
   29332:	4628      	mov	r0, r5
   29334:	47b8      	blx	r7
		buf += processed;
   29336:	4405      	add	r5, r0
	} while (len != 0);
   29338:	1a24      	subs	r4, r4, r0
   2933a:	d1f8      	bne.n	2932e <buffer_write+0xa>
}
   2933c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002933e <cbvprintf>:
{
   2933e:	b510      	push	{r4, lr}
   29340:	b082      	sub	sp, #8
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   29342:	2400      	movs	r4, #0
   29344:	9400      	str	r4, [sp, #0]
   29346:	f7ea f871 	bl	1342c <z_cbvprintf_impl>
}
   2934a:	b002      	add	sp, #8
   2934c:	bd10      	pop	{r4, pc}

0002934e <color_prefix>:
{
   2934e:	b508      	push	{r3, lr}
   29350:	4613      	mov	r3, r2
	color_print(output, color, true, level);
   29352:	2201      	movs	r2, #1
   29354:	f7ea feaa 	bl	140ac <color_print>
}
   29358:	bd08      	pop	{r3, pc}

0002935a <color_postfix>:
{
   2935a:	b508      	push	{r3, lr}
   2935c:	4613      	mov	r3, r2
	color_print(output, color, false, level);
   2935e:	2200      	movs	r2, #0
   29360:	f7ea fea4 	bl	140ac <color_print>
}
   29364:	bd08      	pop	{r3, pc}

00029366 <postfix_print>:
{
   29366:	b538      	push	{r3, r4, r5, lr}
   29368:	4605      	mov	r5, r0
   2936a:	460c      	mov	r4, r1
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
   2936c:	f001 0101 	and.w	r1, r1, #1
   29370:	f7ff fff3 	bl	2935a <color_postfix>
	newline_print(output, flags);
   29374:	4621      	mov	r1, r4
   29376:	4628      	mov	r0, r5
   29378:	f7ea ff1e 	bl	141b8 <newline_print>
}
   2937c:	bd38      	pop	{r3, r4, r5, pc}

0002937e <log_msg_hexdump>:
{
   2937e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   29382:	b083      	sub	sp, #12
   29384:	4680      	mov	r8, r0
   29386:	460e      	mov	r6, r1
   29388:	4615      	mov	r5, r2
   2938a:	461f      	mov	r7, r3
   2938c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
   29390:	462c      	mov	r4, r5
   29392:	2d10      	cmp	r5, #16
   29394:	bf28      	it	cs
   29396:	2410      	movcs	r4, #16
		hexdump_line_print(output, data, length,
   29398:	f8cd 9000 	str.w	r9, [sp]
   2939c:	463b      	mov	r3, r7
   2939e:	4622      	mov	r2, r4
   293a0:	4631      	mov	r1, r6
   293a2:	4640      	mov	r0, r8
   293a4:	f7ea ff1c 	bl	141e0 <hexdump_line_print>
		data += length;
   293a8:	4426      	add	r6, r4
	} while (len);
   293aa:	1b2d      	subs	r5, r5, r4
   293ac:	d1f0      	bne.n	29390 <log_msg_hexdump+0x12>
}
   293ae:	b003      	add	sp, #12
   293b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000293b4 <log_output_flush>:
{
   293b4:	b510      	push	{r4, lr}
   293b6:	4604      	mov	r4, r0
		     output->control_block->offset,
   293b8:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   293ba:	6853      	ldr	r3, [r2, #4]
   293bc:	6812      	ldr	r2, [r2, #0]
   293be:	6881      	ldr	r1, [r0, #8]
   293c0:	6800      	ldr	r0, [r0, #0]
   293c2:	f7ff ffaf 	bl	29324 <buffer_write>
	output->control_block->offset = 0;
   293c6:	6863      	ldr	r3, [r4, #4]
   293c8:	2200      	movs	r2, #0
   293ca:	601a      	str	r2, [r3, #0]
}
   293cc:	bd10      	pop	{r4, pc}

000293ce <out_func>:
{
   293ce:	b538      	push	{r3, r4, r5, lr}
   293d0:	4605      	mov	r5, r0
   293d2:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   293d4:	684b      	ldr	r3, [r1, #4]
   293d6:	681a      	ldr	r2, [r3, #0]
   293d8:	68cb      	ldr	r3, [r1, #12]
   293da:	429a      	cmp	r2, r3
   293dc:	d00f      	beq.n	293fe <out_func+0x30>
	idx = atomic_inc(&out_ctx->control_block->offset);
   293de:	6863      	ldr	r3, [r4, #4]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   293e0:	f3bf 8f5b 	dmb	ish
   293e4:	e853 2f00 	ldrex	r2, [r3]
   293e8:	1c51      	adds	r1, r2, #1
   293ea:	e843 1000 	strex	r0, r1, [r3]
   293ee:	2800      	cmp	r0, #0
   293f0:	d1f8      	bne.n	293e4 <out_func+0x16>
   293f2:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   293f6:	68a3      	ldr	r3, [r4, #8]
   293f8:	549d      	strb	r5, [r3, r2]
}
   293fa:	2000      	movs	r0, #0
   293fc:	bd38      	pop	{r3, r4, r5, pc}
		log_output_flush(out_ctx);
   293fe:	4608      	mov	r0, r1
   29400:	f7ff ffd8 	bl	293b4 <log_output_flush>
   29404:	e7eb      	b.n	293de <out_func+0x10>

00029406 <cr_out_func>:
{
   29406:	b538      	push	{r3, r4, r5, lr}
   29408:	4604      	mov	r4, r0
   2940a:	460d      	mov	r5, r1
	if (c == '\n') {
   2940c:	280a      	cmp	r0, #10
   2940e:	d005      	beq.n	2941c <cr_out_func+0x16>
	out_func(c, ctx);
   29410:	4629      	mov	r1, r5
   29412:	4620      	mov	r0, r4
   29414:	f7ff ffdb 	bl	293ce <out_func>
}
   29418:	2000      	movs	r0, #0
   2941a:	bd38      	pop	{r3, r4, r5, pc}
		out_func((int)'\r', ctx);
   2941c:	200d      	movs	r0, #13
   2941e:	f7ff ffd6 	bl	293ce <out_func>
   29422:	e7f5      	b.n	29410 <cr_out_func+0xa>

00029424 <k_msleep>:
{
   29424:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   29426:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   2942a:	17c1      	asrs	r1, r0, #31
   2942c:	03c9      	lsls	r1, r1, #15
   2942e:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   29432:	03c0      	lsls	r0, r0, #15
   29434:	f240 33e7 	movw	r3, #999	; 0x3e7
   29438:	18c0      	adds	r0, r0, r3
   2943a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2943e:	f04f 0300 	mov.w	r3, #0
   29442:	f141 0100 	adc.w	r1, r1, #0
   29446:	f7d6 fe5b 	bl	100 <__aeabi_uldivmod>
   2944a:	f7fd fe0f 	bl	2706c <z_impl_k_sleep>
}
   2944e:	bd08      	pop	{r3, pc}

00029450 <disk_access_init>:
{
   29450:	b508      	push	{r3, lr}
	struct disk_info *disk = disk_access_get_di(pdrv);
   29452:	f7eb f88b 	bl	1456c <disk_access_get_di>
	if ((disk != NULL) && (disk->ops != NULL) &&
   29456:	b128      	cbz	r0, 29464 <disk_access_init+0x14>
   29458:	68c2      	ldr	r2, [r0, #12]
   2945a:	b132      	cbz	r2, 2946a <disk_access_init+0x1a>
				(disk->ops->init != NULL)) {
   2945c:	6812      	ldr	r2, [r2, #0]
	if ((disk != NULL) && (disk->ops != NULL) &&
   2945e:	b13a      	cbz	r2, 29470 <disk_access_init+0x20>
		rc = disk->ops->init(disk);
   29460:	4790      	blx	r2
}
   29462:	bd08      	pop	{r3, pc}
	int rc = -EINVAL;
   29464:	f06f 0015 	mvn.w	r0, #21
   29468:	e7fb      	b.n	29462 <disk_access_init+0x12>
   2946a:	f06f 0015 	mvn.w	r0, #21
   2946e:	e7f8      	b.n	29462 <disk_access_init+0x12>
   29470:	f06f 0015 	mvn.w	r0, #21
	return rc;
   29474:	e7f5      	b.n	29462 <disk_access_init+0x12>

00029476 <disk_access_status>:
{
   29476:	b508      	push	{r3, lr}
	struct disk_info *disk = disk_access_get_di(pdrv);
   29478:	f7eb f878 	bl	1456c <disk_access_get_di>
	if ((disk != NULL) && (disk->ops != NULL) &&
   2947c:	b128      	cbz	r0, 2948a <disk_access_status+0x14>
   2947e:	68c2      	ldr	r2, [r0, #12]
   29480:	b132      	cbz	r2, 29490 <disk_access_status+0x1a>
				(disk->ops->status != NULL)) {
   29482:	6852      	ldr	r2, [r2, #4]
	if ((disk != NULL) && (disk->ops != NULL) &&
   29484:	b13a      	cbz	r2, 29496 <disk_access_status+0x20>
		rc = disk->ops->status(disk);
   29486:	4790      	blx	r2
}
   29488:	bd08      	pop	{r3, pc}
	int rc = -EINVAL;
   2948a:	f06f 0015 	mvn.w	r0, #21
   2948e:	e7fb      	b.n	29488 <disk_access_status+0x12>
   29490:	f06f 0015 	mvn.w	r0, #21
   29494:	e7f8      	b.n	29488 <disk_access_status+0x12>
   29496:	f06f 0015 	mvn.w	r0, #21
	return rc;
   2949a:	e7f5      	b.n	29488 <disk_access_status+0x12>

0002949c <disk_access_read>:
{
   2949c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2949e:	460c      	mov	r4, r1
   294a0:	4615      	mov	r5, r2
   294a2:	461e      	mov	r6, r3
	struct disk_info *disk = disk_access_get_di(pdrv);
   294a4:	f7eb f862 	bl	1456c <disk_access_get_di>
	if ((disk != NULL) && (disk->ops != NULL) &&
   294a8:	b140      	cbz	r0, 294bc <disk_access_read+0x20>
   294aa:	68c3      	ldr	r3, [r0, #12]
   294ac:	b14b      	cbz	r3, 294c2 <disk_access_read+0x26>
				(disk->ops->read != NULL)) {
   294ae:	689f      	ldr	r7, [r3, #8]
	if ((disk != NULL) && (disk->ops != NULL) &&
   294b0:	b157      	cbz	r7, 294c8 <disk_access_read+0x2c>
		rc = disk->ops->read(disk, data_buf, start_sector, num_sector);
   294b2:	4633      	mov	r3, r6
   294b4:	462a      	mov	r2, r5
   294b6:	4621      	mov	r1, r4
   294b8:	47b8      	blx	r7
}
   294ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int rc = -EINVAL;
   294bc:	f06f 0015 	mvn.w	r0, #21
   294c0:	e7fb      	b.n	294ba <disk_access_read+0x1e>
   294c2:	f06f 0015 	mvn.w	r0, #21
   294c6:	e7f8      	b.n	294ba <disk_access_read+0x1e>
   294c8:	f06f 0015 	mvn.w	r0, #21
	return rc;
   294cc:	e7f5      	b.n	294ba <disk_access_read+0x1e>

000294ce <disk_access_write>:
{
   294ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   294d0:	460c      	mov	r4, r1
   294d2:	4615      	mov	r5, r2
   294d4:	461e      	mov	r6, r3
	struct disk_info *disk = disk_access_get_di(pdrv);
   294d6:	f7eb f849 	bl	1456c <disk_access_get_di>
	if ((disk != NULL) && (disk->ops != NULL) &&
   294da:	b140      	cbz	r0, 294ee <disk_access_write+0x20>
   294dc:	68c3      	ldr	r3, [r0, #12]
   294de:	b14b      	cbz	r3, 294f4 <disk_access_write+0x26>
				(disk->ops->write != NULL)) {
   294e0:	68df      	ldr	r7, [r3, #12]
	if ((disk != NULL) && (disk->ops != NULL) &&
   294e2:	b157      	cbz	r7, 294fa <disk_access_write+0x2c>
		rc = disk->ops->write(disk, data_buf, start_sector, num_sector);
   294e4:	4633      	mov	r3, r6
   294e6:	462a      	mov	r2, r5
   294e8:	4621      	mov	r1, r4
   294ea:	47b8      	blx	r7
}
   294ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int rc = -EINVAL;
   294ee:	f06f 0015 	mvn.w	r0, #21
   294f2:	e7fb      	b.n	294ec <disk_access_write+0x1e>
   294f4:	f06f 0015 	mvn.w	r0, #21
   294f8:	e7f8      	b.n	294ec <disk_access_write+0x1e>
   294fa:	f06f 0015 	mvn.w	r0, #21
	return rc;
   294fe:	e7f5      	b.n	294ec <disk_access_write+0x1e>

00029500 <disk_access_ioctl>:
{
   29500:	b570      	push	{r4, r5, r6, lr}
   29502:	460c      	mov	r4, r1
   29504:	4615      	mov	r5, r2
	struct disk_info *disk = disk_access_get_di(pdrv);
   29506:	f7eb f831 	bl	1456c <disk_access_get_di>
	if ((disk != NULL) && (disk->ops != NULL) &&
   2950a:	b138      	cbz	r0, 2951c <disk_access_ioctl+0x1c>
   2950c:	68c2      	ldr	r2, [r0, #12]
   2950e:	b142      	cbz	r2, 29522 <disk_access_ioctl+0x22>
				(disk->ops->ioctl != NULL)) {
   29510:	6916      	ldr	r6, [r2, #16]
	if ((disk != NULL) && (disk->ops != NULL) &&
   29512:	b14e      	cbz	r6, 29528 <disk_access_ioctl+0x28>
		rc = disk->ops->ioctl(disk, cmd, buf);
   29514:	462a      	mov	r2, r5
   29516:	4621      	mov	r1, r4
   29518:	47b0      	blx	r6
}
   2951a:	bd70      	pop	{r4, r5, r6, pc}
	int rc = -EINVAL;
   2951c:	f06f 0015 	mvn.w	r0, #21
   29520:	e7fb      	b.n	2951a <disk_access_ioctl+0x1a>
   29522:	f06f 0015 	mvn.w	r0, #21
   29526:	e7f8      	b.n	2951a <disk_access_ioctl+0x1a>
   29528:	f06f 0015 	mvn.w	r0, #21
	return rc;
   2952c:	e7f5      	b.n	2951a <disk_access_ioctl+0x1a>

0002952e <atomic_test_and_clear_bit>:
{
   2952e:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   29530:	f001 021f 	and.w	r2, r1, #31
   29534:	2301      	movs	r3, #1
   29536:	4093      	lsls	r3, r2
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   29538:	0949      	lsrs	r1, r1, #5
   2953a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   2953e:	43d9      	mvns	r1, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   29540:	f3bf 8f5b 	dmb	ish
   29544:	e850 2f00 	ldrex	r2, [r0]
   29548:	ea02 0c01 	and.w	ip, r2, r1
   2954c:	e840 ce00 	strex	lr, ip, [r0]
   29550:	f1be 0f00 	cmp.w	lr, #0
   29554:	d1f6      	bne.n	29544 <atomic_test_and_clear_bit+0x16>
   29556:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   2955a:	4213      	tst	r3, r2
}
   2955c:	bf14      	ite	ne
   2955e:	2001      	movne	r0, #1
   29560:	2000      	moveq	r0, #0
   29562:	f85d fb04 	ldr.w	pc, [sp], #4

00029566 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   29566:	f001 021f 	and.w	r2, r1, #31
   2956a:	2301      	movs	r3, #1
   2956c:	4093      	lsls	r3, r2
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2956e:	0949      	lsrs	r1, r1, #5
   29570:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   29574:	f3bf 8f5b 	dmb	ish
   29578:	e850 2f00 	ldrex	r2, [r0]
   2957c:	431a      	orrs	r2, r3
   2957e:	e840 2100 	strex	r1, r2, [r0]
   29582:	2900      	cmp	r1, #0
   29584:	d1f8      	bne.n	29578 <atomic_set_bit+0x12>
   29586:	f3bf 8f5b 	dmb	ish
}
   2958a:	4770      	bx	lr

0002958c <pm_policy_state_lock_is_active>:
			return (atomic_get(&substate_lock_t[i].lock) != 0);
		}
	}

	return false;
}
   2958c:	2000      	movs	r0, #0
   2958e:	4770      	bx	lr

00029590 <_copy>:
#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
	if (from_len <= to_len) {
   29590:	428b      	cmp	r3, r1
   29592:	d901      	bls.n	29598 <_copy+0x8>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
   29594:	2000      	movs	r0, #0
	}
}
   29596:	4770      	bx	lr
{
   29598:	b510      	push	{r4, lr}
   2959a:	4694      	mov	ip, r2
   2959c:	461c      	mov	r4, r3
		(void)memcpy(to, from, from_len);
   2959e:	461a      	mov	r2, r3
   295a0:	4661      	mov	r1, ip
   295a2:	f000 fb06 	bl	29bb2 <memcpy>
		return from_len;
   295a6:	4620      	mov	r0, r4
}
   295a8:	bd10      	pop	{r4, pc}

000295aa <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
   295aa:	b508      	push	{r3, lr}
	(void)memset(to, val, len);
   295ac:	f000 fb30 	bl	29c10 <memset>
}
   295b0:	bd08      	pop	{r3, pc}

000295b2 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   295b2:	09c3      	lsrs	r3, r0, #7
   295b4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   295b8:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   295bc:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   295c0:	b2c0      	uxtb	r0, r0
   295c2:	4770      	bx	lr

000295c4 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   295c4:	7803      	ldrb	r3, [r0, #0]
   295c6:	78ca      	ldrb	r2, [r1, #3]
   295c8:	4053      	eors	r3, r2
   295ca:	7003      	strb	r3, [r0, #0]
   295cc:	7843      	ldrb	r3, [r0, #1]
   295ce:	788a      	ldrb	r2, [r1, #2]
   295d0:	4053      	eors	r3, r2
   295d2:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   295d4:	7883      	ldrb	r3, [r0, #2]
   295d6:	784a      	ldrb	r2, [r1, #1]
   295d8:	4053      	eors	r3, r2
   295da:	7083      	strb	r3, [r0, #2]
   295dc:	78c3      	ldrb	r3, [r0, #3]
   295de:	780a      	ldrb	r2, [r1, #0]
   295e0:	4053      	eors	r3, r2
   295e2:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   295e4:	7903      	ldrb	r3, [r0, #4]
   295e6:	79ca      	ldrb	r2, [r1, #7]
   295e8:	4053      	eors	r3, r2
   295ea:	7103      	strb	r3, [r0, #4]
   295ec:	7943      	ldrb	r3, [r0, #5]
   295ee:	798a      	ldrb	r2, [r1, #6]
   295f0:	4053      	eors	r3, r2
   295f2:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   295f4:	7983      	ldrb	r3, [r0, #6]
   295f6:	794a      	ldrb	r2, [r1, #5]
   295f8:	4053      	eors	r3, r2
   295fa:	7183      	strb	r3, [r0, #6]
   295fc:	79c3      	ldrb	r3, [r0, #7]
   295fe:	790a      	ldrb	r2, [r1, #4]
   29600:	4053      	eors	r3, r2
   29602:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   29604:	7a03      	ldrb	r3, [r0, #8]
   29606:	7aca      	ldrb	r2, [r1, #11]
   29608:	4053      	eors	r3, r2
   2960a:	7203      	strb	r3, [r0, #8]
   2960c:	7a43      	ldrb	r3, [r0, #9]
   2960e:	7a8a      	ldrb	r2, [r1, #10]
   29610:	4053      	eors	r3, r2
   29612:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   29614:	7a83      	ldrb	r3, [r0, #10]
   29616:	7a4a      	ldrb	r2, [r1, #9]
   29618:	4053      	eors	r3, r2
   2961a:	7283      	strb	r3, [r0, #10]
   2961c:	7ac3      	ldrb	r3, [r0, #11]
   2961e:	7a0a      	ldrb	r2, [r1, #8]
   29620:	4053      	eors	r3, r2
   29622:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   29624:	7b03      	ldrb	r3, [r0, #12]
   29626:	7bca      	ldrb	r2, [r1, #15]
   29628:	4053      	eors	r3, r2
   2962a:	7303      	strb	r3, [r0, #12]
   2962c:	7b43      	ldrb	r3, [r0, #13]
   2962e:	7b8a      	ldrb	r2, [r1, #14]
   29630:	4053      	eors	r3, r2
   29632:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   29634:	7b83      	ldrb	r3, [r0, #14]
   29636:	7b4a      	ldrb	r2, [r1, #13]
   29638:	4053      	eors	r3, r2
   2963a:	7383      	strb	r3, [r0, #14]
   2963c:	7bc3      	ldrb	r3, [r0, #15]
   2963e:	7b0a      	ldrb	r2, [r1, #12]
   29640:	4053      	eors	r3, r2
   29642:	73c3      	strb	r3, [r0, #15]
}
   29644:	4770      	bx	lr

00029646 <shift_rows>:
{
   29646:	b500      	push	{lr}
   29648:	b085      	sub	sp, #20
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   2964a:	7802      	ldrb	r2, [r0, #0]
   2964c:	f88d 2000 	strb.w	r2, [sp]
   29650:	7942      	ldrb	r2, [r0, #5]
   29652:	f88d 2001 	strb.w	r2, [sp, #1]
   29656:	7a82      	ldrb	r2, [r0, #10]
   29658:	f88d 2002 	strb.w	r2, [sp, #2]
   2965c:	7bc2      	ldrb	r2, [r0, #15]
   2965e:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   29662:	7902      	ldrb	r2, [r0, #4]
   29664:	f88d 2004 	strb.w	r2, [sp, #4]
   29668:	7a42      	ldrb	r2, [r0, #9]
   2966a:	f88d 2005 	strb.w	r2, [sp, #5]
   2966e:	7b82      	ldrb	r2, [r0, #14]
   29670:	f88d 2006 	strb.w	r2, [sp, #6]
   29674:	78c2      	ldrb	r2, [r0, #3]
   29676:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   2967a:	7a02      	ldrb	r2, [r0, #8]
   2967c:	f88d 2008 	strb.w	r2, [sp, #8]
   29680:	7b42      	ldrb	r2, [r0, #13]
   29682:	f88d 2009 	strb.w	r2, [sp, #9]
   29686:	7882      	ldrb	r2, [r0, #2]
   29688:	f88d 200a 	strb.w	r2, [sp, #10]
   2968c:	79c2      	ldrb	r2, [r0, #7]
   2968e:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   29692:	7b02      	ldrb	r2, [r0, #12]
   29694:	f88d 200c 	strb.w	r2, [sp, #12]
   29698:	7842      	ldrb	r2, [r0, #1]
   2969a:	f88d 200d 	strb.w	r2, [sp, #13]
   2969e:	7982      	ldrb	r2, [r0, #6]
   296a0:	f88d 200e 	strb.w	r2, [sp, #14]
   296a4:	7ac3      	ldrb	r3, [r0, #11]
   296a6:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   296aa:	2310      	movs	r3, #16
   296ac:	466a      	mov	r2, sp
   296ae:	4619      	mov	r1, r3
   296b0:	f7ff ff6e 	bl	29590 <_copy>
}
   296b4:	b005      	add	sp, #20
   296b6:	f85d fb04 	ldr.w	pc, [sp], #4

000296ba <mult_row_column>:
{
   296ba:	b570      	push	{r4, r5, r6, lr}
   296bc:	4606      	mov	r6, r0
   296be:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   296c0:	7808      	ldrb	r0, [r1, #0]
   296c2:	f7ff ff76 	bl	295b2 <_double_byte>
   296c6:	4605      	mov	r5, r0
   296c8:	7860      	ldrb	r0, [r4, #1]
   296ca:	f7ff ff72 	bl	295b2 <_double_byte>
   296ce:	7861      	ldrb	r1, [r4, #1]
   296d0:	78a2      	ldrb	r2, [r4, #2]
   296d2:	78e3      	ldrb	r3, [r4, #3]
   296d4:	4048      	eors	r0, r1
   296d6:	4045      	eors	r5, r0
   296d8:	406a      	eors	r2, r5
   296da:	4053      	eors	r3, r2
   296dc:	7033      	strb	r3, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   296de:	7825      	ldrb	r5, [r4, #0]
   296e0:	7860      	ldrb	r0, [r4, #1]
   296e2:	f7ff ff66 	bl	295b2 <_double_byte>
   296e6:	4045      	eors	r5, r0
   296e8:	b2ed      	uxtb	r5, r5
   296ea:	78a0      	ldrb	r0, [r4, #2]
   296ec:	f7ff ff61 	bl	295b2 <_double_byte>
   296f0:	78a2      	ldrb	r2, [r4, #2]
   296f2:	78e3      	ldrb	r3, [r4, #3]
   296f4:	4050      	eors	r0, r2
   296f6:	4045      	eors	r5, r0
   296f8:	406b      	eors	r3, r5
   296fa:	7073      	strb	r3, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   296fc:	7825      	ldrb	r5, [r4, #0]
   296fe:	7863      	ldrb	r3, [r4, #1]
   29700:	405d      	eors	r5, r3
   29702:	78a0      	ldrb	r0, [r4, #2]
   29704:	f7ff ff55 	bl	295b2 <_double_byte>
   29708:	4045      	eors	r5, r0
   2970a:	b2ed      	uxtb	r5, r5
   2970c:	78e0      	ldrb	r0, [r4, #3]
   2970e:	f7ff ff50 	bl	295b2 <_double_byte>
   29712:	78e3      	ldrb	r3, [r4, #3]
   29714:	4058      	eors	r0, r3
   29716:	4045      	eors	r5, r0
   29718:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   2971a:	7820      	ldrb	r0, [r4, #0]
   2971c:	f7ff ff49 	bl	295b2 <_double_byte>
   29720:	7822      	ldrb	r2, [r4, #0]
   29722:	7863      	ldrb	r3, [r4, #1]
   29724:	78a5      	ldrb	r5, [r4, #2]
   29726:	4050      	eors	r0, r2
   29728:	4043      	eors	r3, r0
   2972a:	405d      	eors	r5, r3
   2972c:	b2ed      	uxtb	r5, r5
   2972e:	78e0      	ldrb	r0, [r4, #3]
   29730:	f7ff ff3f 	bl	295b2 <_double_byte>
   29734:	4045      	eors	r5, r0
   29736:	70f5      	strb	r5, [r6, #3]
}
   29738:	bd70      	pop	{r4, r5, r6, pc}

0002973a <mix_columns>:
{
   2973a:	b510      	push	{r4, lr}
   2973c:	b084      	sub	sp, #16
   2973e:	4604      	mov	r4, r0
	mult_row_column(t, s);
   29740:	4601      	mov	r1, r0
   29742:	4668      	mov	r0, sp
   29744:	f7ff ffb9 	bl	296ba <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   29748:	1d21      	adds	r1, r4, #4
   2974a:	a801      	add	r0, sp, #4
   2974c:	f7ff ffb5 	bl	296ba <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   29750:	f104 0108 	add.w	r1, r4, #8
   29754:	a802      	add	r0, sp, #8
   29756:	f7ff ffb0 	bl	296ba <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   2975a:	f104 010c 	add.w	r1, r4, #12
   2975e:	a803      	add	r0, sp, #12
   29760:	f7ff ffab 	bl	296ba <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   29764:	2310      	movs	r3, #16
   29766:	466a      	mov	r2, sp
   29768:	4619      	mov	r1, r3
   2976a:	4620      	mov	r0, r4
   2976c:	f7ff ff10 	bl	29590 <_copy>
}
   29770:	b004      	add	sp, #16
   29772:	bd10      	pop	{r4, pc}

00029774 <gf_double>:
 */
void gf_double(uint8_t *out, uint8_t *in)
{

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);
   29774:	460b      	mov	r3, r1

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   29776:	f913 2b0f 	ldrsb.w	r2, [r3], #15
   2977a:	2a00      	cmp	r2, #0
   2977c:	db04      	blt.n	29788 <gf_double+0x14>
   2977e:	f04f 0c00 	mov.w	ip, #0

	out += (TC_AES_BLOCK_SIZE - 1);
   29782:	f100 020f 	add.w	r2, r0, #15
   29786:	e006      	b.n	29796 <gf_double+0x22>
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   29788:	f04f 0c87 	mov.w	ip, #135	; 0x87
   2978c:	e7f9      	b.n	29782 <gf_double+0xe>
	for (;;) {
		*out-- = (*x << 1) ^ carry;
		if (x == in) {
			break;
		}
		carry = *x-- >> 7;
   2978e:	f813 0901 	ldrb.w	r0, [r3], #-1
   29792:	ea4f 1cd0 	mov.w	ip, r0, lsr #7
		*out-- = (*x << 1) ^ carry;
   29796:	7818      	ldrb	r0, [r3, #0]
   29798:	ea8c 0040 	eor.w	r0, ip, r0, lsl #1
   2979c:	f802 0901 	strb.w	r0, [r2], #-1
		if (x == in) {
   297a0:	428b      	cmp	r3, r1
   297a2:	d1f4      	bne.n	2978e <gf_double+0x1a>
	}
}
   297a4:	4770      	bx	lr

000297a6 <tc_cmac_erase>:
	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
	if (s == (TCCmacState_t) 0) {
   297a6:	b130      	cbz	r0, 297b6 <tc_cmac_erase+0x10>
{
   297a8:	b508      	push	{r3, lr}
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   297aa:	2258      	movs	r2, #88	; 0x58
   297ac:	2100      	movs	r1, #0
   297ae:	f7ff fefc 	bl	295aa <_set>

	return TC_CRYPTO_SUCCESS;
   297b2:	2001      	movs	r0, #1
}
   297b4:	bd08      	pop	{r3, pc}
		return TC_CRYPTO_FAIL;
   297b6:	2000      	movs	r0, #0
}
   297b8:	4770      	bx	lr

000297ba <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   297ba:	b1a0      	cbz	r0, 297e6 <tc_cmac_init+0x2c>
{
   297bc:	b510      	push	{r4, lr}
   297be:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   297c0:	2210      	movs	r2, #16
   297c2:	2100      	movs	r1, #0
   297c4:	f7ff fef1 	bl	295aa <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   297c8:	2210      	movs	r2, #16
   297ca:	2100      	movs	r1, #0
   297cc:	f104 0030 	add.w	r0, r4, #48	; 0x30
   297d0:	f7ff feeb 	bl	295aa <_set>
	s->leftover_offset = 0;
   297d4:	2300      	movs	r3, #0
   297d6:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   297d8:	2200      	movs	r2, #0
   297da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   297de:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
   297e2:	2001      	movs	r0, #1
}
   297e4:	bd10      	pop	{r4, pc}
		return TC_CRYPTO_FAIL;
   297e6:	2000      	movs	r0, #0
}
   297e8:	4770      	bx	lr

000297ea <tc_cmac_setup>:
	if (s == (TCCmacState_t) 0 ||
   297ea:	b338      	cbz	r0, 2983c <tc_cmac_setup+0x52>
{
   297ec:	b570      	push	{r4, r5, r6, lr}
   297ee:	460d      	mov	r5, r1
   297f0:	4616      	mov	r6, r2
   297f2:	4604      	mov	r4, r0
	if (s == (TCCmacState_t) 0 ||
   297f4:	b321      	cbz	r1, 29840 <tc_cmac_setup+0x56>
	_set(s, 0, sizeof(*s));
   297f6:	2258      	movs	r2, #88	; 0x58
   297f8:	2100      	movs	r1, #0
   297fa:	f7ff fed6 	bl	295aa <_set>
	s->sched = sched;
   297fe:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   29800:	4629      	mov	r1, r5
   29802:	4630      	mov	r0, r6
   29804:	f7eb f8a6 	bl	14954 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   29808:	2210      	movs	r2, #16
   2980a:	2100      	movs	r1, #0
   2980c:	4620      	mov	r0, r4
   2980e:	f7ff fecc 	bl	295aa <_set>
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   29812:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   29814:	4621      	mov	r1, r4
   29816:	4620      	mov	r0, r4
   29818:	f7eb f8fe 	bl	14a18 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   2981c:	f104 0510 	add.w	r5, r4, #16
   29820:	4621      	mov	r1, r4
   29822:	4628      	mov	r0, r5
   29824:	f7ff ffa6 	bl	29774 <gf_double>
	gf_double (s->K2, s->K1);
   29828:	4629      	mov	r1, r5
   2982a:	f104 0020 	add.w	r0, r4, #32
   2982e:	f7ff ffa1 	bl	29774 <gf_double>
	tc_cmac_init(s);
   29832:	4620      	mov	r0, r4
   29834:	f7ff ffc1 	bl	297ba <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   29838:	2001      	movs	r0, #1
}
   2983a:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2983c:	2000      	movs	r0, #0
}
   2983e:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   29840:	2000      	movs	r0, #0
   29842:	e7fa      	b.n	2983a <tc_cmac_setup+0x50>

00029844 <tc_cmac_update>:
int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   29844:	2800      	cmp	r0, #0
   29846:	d064      	beq.n	29912 <tc_cmac_update+0xce>
{
   29848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2984c:	460d      	mov	r5, r1
   2984e:	4616      	mov	r6, r2
   29850:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   29852:	2a00      	cmp	r2, #0
   29854:	d05f      	beq.n	29916 <tc_cmac_update+0xd2>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   29856:	2900      	cmp	r1, #0
   29858:	d060      	beq.n	2991c <tc_cmac_update+0xd8>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   2985a:	6d03      	ldr	r3, [r0, #80]	; 0x50
   2985c:	6d42      	ldr	r2, [r0, #84]	; 0x54
   2985e:	ea53 0102 	orrs.w	r1, r3, r2
   29862:	d05d      	beq.n	29920 <tc_cmac_update+0xdc>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   29864:	3b01      	subs	r3, #1
   29866:	f142 32ff 	adc.w	r2, r2, #4294967295
   2986a:	6503      	str	r3, [r0, #80]	; 0x50
   2986c:	6542      	str	r2, [r0, #84]	; 0x54

	if (s->leftover_offset > 0) {
   2986e:	6c47      	ldr	r7, [r0, #68]	; 0x44
   29870:	2f00      	cmp	r7, #0
   29872:	d03d      	beq.n	298f0 <tc_cmac_update+0xac>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   29874:	f1c7 0810 	rsb	r8, r7, #16

		if (data_length < remaining_space) {
   29878:	4546      	cmp	r6, r8
   2987a:	d30d      	bcc.n	29898 <tc_cmac_update+0x54>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
			s->leftover_offset += data_length;
			return TC_CRYPTO_SUCCESS;
		}
		/* leftover block is now full; encrypt it first */
		_copy(&s->leftover[s->leftover_offset],
   2987c:	f107 0030 	add.w	r0, r7, #48	; 0x30
   29880:	4643      	mov	r3, r8
   29882:	462a      	mov	r2, r5
   29884:	4641      	mov	r1, r8
   29886:	4420      	add	r0, r4
   29888:	f7ff fe82 	bl	29590 <_copy>
		      remaining_space,
		      data,
		      remaining_space);
		data_length -= remaining_space;
   2988c:	3f10      	subs	r7, #16
   2988e:	443e      	add	r6, r7
		data += remaining_space;
   29890:	4445      	add	r5, r8
		s->leftover_offset = 0;
   29892:	2300      	movs	r3, #0
   29894:	6463      	str	r3, [r4, #68]	; 0x44

		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   29896:	e013      	b.n	298c0 <tc_cmac_update+0x7c>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   29898:	f107 0030 	add.w	r0, r7, #48	; 0x30
   2989c:	4633      	mov	r3, r6
   2989e:	462a      	mov	r2, r5
   298a0:	4631      	mov	r1, r6
   298a2:	4420      	add	r0, r4
   298a4:	f7ff fe74 	bl	29590 <_copy>
			s->leftover_offset += data_length;
   298a8:	6c63      	ldr	r3, [r4, #68]	; 0x44
   298aa:	4433      	add	r3, r6
   298ac:	6463      	str	r3, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   298ae:	2001      	movs	r0, #1
   298b0:	e032      	b.n	29918 <tc_cmac_update+0xd4>
			s->iv[i] ^= s->leftover[i];
   298b2:	5ce2      	ldrb	r2, [r4, r3]
   298b4:	18e1      	adds	r1, r4, r3
   298b6:	f891 1030 	ldrb.w	r1, [r1, #48]	; 0x30
   298ba:	404a      	eors	r2, r1
   298bc:	54e2      	strb	r2, [r4, r3]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   298be:	3301      	adds	r3, #1
   298c0:	2b0f      	cmp	r3, #15
   298c2:	d9f6      	bls.n	298b2 <tc_cmac_update+0x6e>
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   298c4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   298c6:	4621      	mov	r1, r4
   298c8:	4620      	mov	r0, r4
   298ca:	f7eb f8a5 	bl	14a18 <tc_aes_encrypt>
   298ce:	e00f      	b.n	298f0 <tc_cmac_update+0xac>
	}

	/* CBC encrypt each (except the last) of the data blocks */
	while (data_length > TC_AES_BLOCK_SIZE) {
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
			s->iv[i] ^= data[i];
   298d0:	5ce0      	ldrb	r0, [r4, r3]
   298d2:	f815 c003 	ldrb.w	ip, [r5, r3]
   298d6:	ea80 000c 	eor.w	r0, r0, ip
   298da:	54e0      	strb	r0, [r4, r3]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   298dc:	3301      	adds	r3, #1
   298de:	2b0f      	cmp	r3, #15
   298e0:	d9f6      	bls.n	298d0 <tc_cmac_update+0x8c>
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   298e2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   298e4:	4621      	mov	r1, r4
   298e6:	4620      	mov	r0, r4
   298e8:	f7eb f896 	bl	14a18 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   298ec:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   298ee:	3e10      	subs	r6, #16
	while (data_length > TC_AES_BLOCK_SIZE) {
   298f0:	2e10      	cmp	r6, #16
   298f2:	d901      	bls.n	298f8 <tc_cmac_update+0xb4>
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   298f4:	2300      	movs	r3, #0
   298f6:	e7f2      	b.n	298de <tc_cmac_update+0x9a>
	}

	if (data_length > 0) {
   298f8:	b90e      	cbnz	r6, 298fe <tc_cmac_update+0xba>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   298fa:	2001      	movs	r0, #1
   298fc:	e00c      	b.n	29918 <tc_cmac_update+0xd4>
		_copy(s->leftover, data_length, data, data_length);
   298fe:	4633      	mov	r3, r6
   29900:	462a      	mov	r2, r5
   29902:	4631      	mov	r1, r6
   29904:	f104 0030 	add.w	r0, r4, #48	; 0x30
   29908:	f7ff fe42 	bl	29590 <_copy>
		s->leftover_offset = data_length;
   2990c:	6466      	str	r6, [r4, #68]	; 0x44
	return TC_CRYPTO_SUCCESS;
   2990e:	2001      	movs	r0, #1
   29910:	e002      	b.n	29918 <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
   29912:	2000      	movs	r0, #0
}
   29914:	4770      	bx	lr
		return  TC_CRYPTO_SUCCESS;
   29916:	2001      	movs	r0, #1
}
   29918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TC_CRYPTO_FAIL;
   2991c:	2000      	movs	r0, #0
   2991e:	e7fb      	b.n	29918 <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
   29920:	2000      	movs	r0, #0
   29922:	e7f9      	b.n	29918 <tc_cmac_update+0xd4>

00029924 <tc_cmac_final>:
{
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   29924:	b380      	cbz	r0, 29988 <tc_cmac_final+0x64>
{
   29926:	b538      	push	{r3, r4, r5, lr}
   29928:	460c      	mov	r4, r1
   2992a:	4605      	mov	r5, r0
	if (tag == (uint8_t *) 0 ||
   2992c:	b371      	cbz	r1, 2998c <tc_cmac_final+0x68>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   2992e:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   29930:	2a10      	cmp	r2, #16
   29932:	d103      	bne.n	2993c <tc_cmac_final+0x18>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   29934:	f101 0c10 	add.w	ip, r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   29938:	2300      	movs	r3, #0
   2993a:	e019      	b.n	29970 <tc_cmac_final+0x4c>
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   2993c:	f102 0030 	add.w	r0, r2, #48	; 0x30
   29940:	f1c2 0210 	rsb	r2, r2, #16
   29944:	2100      	movs	r1, #0
   29946:	4420      	add	r0, r4
   29948:	f7ff fe2f 	bl	295aa <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   2994c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   2994e:	4423      	add	r3, r4
   29950:	2280      	movs	r2, #128	; 0x80
   29952:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   29956:	f104 0c20 	add.w	ip, r4, #32
   2995a:	e7ed      	b.n	29938 <tc_cmac_final+0x14>
		s->iv[i] ^= s->leftover[i] ^ k[i];
   2995c:	5ce2      	ldrb	r2, [r4, r3]
   2995e:	18e1      	adds	r1, r4, r3
   29960:	f891 0030 	ldrb.w	r0, [r1, #48]	; 0x30
   29964:	f81c 1003 	ldrb.w	r1, [ip, r3]
   29968:	4048      	eors	r0, r1
   2996a:	4042      	eors	r2, r0
   2996c:	54e2      	strb	r2, [r4, r3]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2996e:	3301      	adds	r3, #1
   29970:	2b0f      	cmp	r3, #15
   29972:	d9f3      	bls.n	2995c <tc_cmac_final+0x38>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   29974:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   29976:	4621      	mov	r1, r4
   29978:	4628      	mov	r0, r5
   2997a:	f7eb f84d 	bl	14a18 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   2997e:	4620      	mov	r0, r4
   29980:	f7ff ff11 	bl	297a6 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   29984:	2001      	movs	r0, #1
}
   29986:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   29988:	2000      	movs	r0, #0
}
   2998a:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   2998c:	2000      	movs	r0, #0
   2998e:	e7fa      	b.n	29986 <tc_cmac_final+0x62>

00029990 <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   29990:	b538      	push	{r3, r4, r5, lr}
   29992:	4604      	mov	r4, r0

	if (esf != NULL) {
   29994:	460d      	mov	r5, r1
   29996:	b111      	cbz	r1, 2999e <z_arm_fatal_error+0xe>
		esf_dump(esf);
   29998:	4608      	mov	r0, r1
   2999a:	f7eb f8b7 	bl	14b0c <esf_dump>
	}
	z_fatal_error(reason, esf);
   2999e:	4629      	mov	r1, r5
   299a0:	4620      	mov	r0, r4
   299a2:	f7fc f95d 	bl	25c60 <z_fatal_error>
}
   299a6:	bd38      	pop	{r3, r4, r5, pc}

000299a8 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   299a8:	b508      	push	{r3, lr}
   299aa:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   299ac:	6800      	ldr	r0, [r0, #0]
   299ae:	f7ff ffef 	bl	29990 <z_arm_fatal_error>
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
   299b2:	bd08      	pop	{r3, pc}

000299b4 <arch_irq_enable>:
{
   299b4:	b508      	push	{r3, lr}
	NVIC_EnableIRQ((IRQn_Type)irq);
   299b6:	b240      	sxtb	r0, r0
   299b8:	f7eb f986 	bl	14cc8 <__NVIC_EnableIRQ>
}
   299bc:	bd08      	pop	{r3, pc}

000299be <arch_irq_disable>:
{
   299be:	b508      	push	{r3, lr}
	NVIC_DisableIRQ((IRQn_Type)irq);
   299c0:	b240      	sxtb	r0, r0
   299c2:	f7eb f98f 	bl	14ce4 <__NVIC_DisableIRQ>
}
   299c6:	bd08      	pop	{r3, pc}

000299c8 <z_arm_irq_priority_set>:
{
   299c8:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   299ca:	f012 0f01 	tst.w	r2, #1
   299ce:	d104      	bne.n	299da <z_arm_irq_priority_set+0x12>
		prio += _IRQ_PRIO_OFFSET;
   299d0:	3102      	adds	r1, #2
	NVIC_SetPriority((IRQn_Type)irq, prio);
   299d2:	b240      	sxtb	r0, r0
   299d4:	f7eb f998 	bl	14d08 <__NVIC_SetPriority>
}
   299d8:	bd08      	pop	{r3, pc}
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   299da:	2100      	movs	r1, #0
   299dc:	e7f9      	b.n	299d2 <z_arm_irq_priority_set+0xa>

000299de <z_irq_spurious>:
{
   299de:	b508      	push	{r3, lr}
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   299e0:	2100      	movs	r1, #0
   299e2:	2001      	movs	r0, #1
   299e4:	f7ff ffd4 	bl	29990 <z_arm_fatal_error>
}
   299e8:	bd08      	pop	{r3, pc}

000299ea <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   299ea:	b508      	push	{r3, lr}
	handler();
   299ec:	f7eb f9be 	bl	14d6c <z_SysNmiOnReset>
	z_arm_int_exit();
   299f0:	f7eb fab0 	bl	14f54 <z_arm_exc_exit>
}
   299f4:	bd08      	pop	{r3, pc}

000299f6 <memory_fault_recoverable>:
}
   299f6:	2000      	movs	r0, #0
   299f8:	4770      	bx	lr

000299fa <fault_handle>:
{
   299fa:	b508      	push	{r3, lr}
	*recoverable = false;
   299fc:	2300      	movs	r3, #0
   299fe:	7013      	strb	r3, [r2, #0]
	switch (fault) {
   29a00:	1ecb      	subs	r3, r1, #3
   29a02:	2b09      	cmp	r3, #9
   29a04:	d81a      	bhi.n	29a3c <fault_handle+0x42>
   29a06:	e8df f003 	tbb	[pc, r3]
   29a0a:	0905      	.short	0x0905
   29a0c:	1919110d 	.word	0x1919110d
   29a10:	14191919 	.word	0x14191919
		reason = hard_fault(esf, recoverable);
   29a14:	4611      	mov	r1, r2
   29a16:	f7ec f905 	bl	15c24 <hard_fault>
}
   29a1a:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   29a1c:	2100      	movs	r1, #0
   29a1e:	f7eb ff33 	bl	15888 <mem_manage_fault>
		break;
   29a22:	e7fa      	b.n	29a1a <fault_handle+0x20>
		reason = bus_fault(esf, 0, recoverable);
   29a24:	2100      	movs	r1, #0
   29a26:	f7eb fb13 	bl	15050 <bus_fault>
		break;
   29a2a:	e7f6      	b.n	29a1a <fault_handle+0x20>
		reason = usage_fault(esf);
   29a2c:	f7eb fcee 	bl	1540c <usage_fault>
		break;
   29a30:	e7f3      	b.n	29a1a <fault_handle+0x20>
		debug_monitor(esf, recoverable);
   29a32:	4611      	mov	r1, r2
   29a34:	f7eb fe80 	bl	15738 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   29a38:	2000      	movs	r0, #0
		break;
   29a3a:	e7ee      	b.n	29a1a <fault_handle+0x20>
		reserved_exception(esf, fault);
   29a3c:	f7eb feb6 	bl	157ac <reserved_exception>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   29a40:	2000      	movs	r0, #0
	return reason;
   29a42:	e7ea      	b.n	29a1a <fault_handle+0x20>

00029a44 <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
   29a44:	6843      	ldr	r3, [r0, #4]
   29a46:	1e5a      	subs	r2, r3, #1
		&&
   29a48:	4213      	tst	r3, r2
   29a4a:	d106      	bne.n	29a5a <mpu_partition_is_valid+0x16>
		&&
   29a4c:	2b1f      	cmp	r3, #31
   29a4e:	d906      	bls.n	29a5e <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
   29a50:	6803      	ldr	r3, [r0, #0]
		&&
   29a52:	421a      	tst	r2, r3
   29a54:	d005      	beq.n	29a62 <mpu_partition_is_valid+0x1e>
   29a56:	2000      	movs	r0, #0
   29a58:	4770      	bx	lr
   29a5a:	2000      	movs	r0, #0
   29a5c:	4770      	bx	lr
   29a5e:	2000      	movs	r0, #0
   29a60:	4770      	bx	lr
   29a62:	2001      	movs	r0, #1
}
   29a64:	4770      	bx	lr

00029a66 <mpu_configure_region>:
{
   29a66:	b500      	push	{lr}
   29a68:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
   29a6a:	680b      	ldr	r3, [r1, #0]
   29a6c:	9301      	str	r3, [sp, #4]
		&new_region->attr, new_region->start, new_region->size);
   29a6e:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   29a70:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
   29a72:	2b20      	cmp	r3, #32
   29a74:	d912      	bls.n	29a9c <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
   29a76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   29a7a:	d811      	bhi.n	29aa0 <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   29a7c:	3b01      	subs	r3, #1
   29a7e:	fab3 f383 	clz	r3, r3
   29a82:	f1c3 031f 	rsb	r3, r3, #31
   29a86:	005b      	lsls	r3, r3, #1
   29a88:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   29a8c:	4313      	orrs	r3, r2
   29a8e:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
   29a90:	a901      	add	r1, sp, #4
   29a92:	f7ec fb27 	bl	160e4 <region_allocate_and_init>
}
   29a96:	b005      	add	sp, #20
   29a98:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
   29a9c:	2308      	movs	r3, #8
   29a9e:	e7f5      	b.n	29a8c <mpu_configure_region+0x26>
		return REGION_4G;
   29aa0:	233e      	movs	r3, #62	; 0x3e
   29aa2:	e7f3      	b.n	29a8c <mpu_configure_region+0x26>

00029aa4 <arm_core_mpu_configure_static_mpu_regions>:
{
   29aa4:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   29aa6:	f7ec fbbd 	bl	16224 <mpu_configure_static_mpu_regions>
}
   29aaa:	bd08      	pop	{r3, pc}

00029aac <arm_core_mpu_configure_dynamic_mpu_regions>:
{
   29aac:	b508      	push	{r3, lr}
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
   29aae:	f7ec fbc3 	bl	16238 <mpu_configure_dynamic_mpu_regions>
}
   29ab2:	bd08      	pop	{r3, pc}

00029ab4 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   29ab4:	4602      	mov	r2, r0
   29ab6:	e002      	b.n	29abe <strcpy+0xa>
		*d = *s;
   29ab8:	f802 3b01 	strb.w	r3, [r2], #1
		d++;
		s++;
   29abc:	3101      	adds	r1, #1
	while (*s != '\0') {
   29abe:	780b      	ldrb	r3, [r1, #0]
   29ac0:	2b00      	cmp	r3, #0
   29ac2:	d1f9      	bne.n	29ab8 <strcpy+0x4>
	}

	*d = '\0';
   29ac4:	7013      	strb	r3, [r2, #0]

	return dest;
}
   29ac6:	4770      	bx	lr

00029ac8 <strncpy>:

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   29ac8:	4603      	mov	r3, r0
   29aca:	b1a2      	cbz	r2, 29af6 <strncpy+0x2e>
{
   29acc:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
   29ace:	780c      	ldrb	r4, [r1, #0]
   29ad0:	b12c      	cbz	r4, 29ade <strncpy+0x16>
		*d = *s;
   29ad2:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
   29ad6:	3101      	adds	r1, #1
		d++;
		n--;
   29ad8:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
   29ada:	2a00      	cmp	r2, #0
   29adc:	d1f7      	bne.n	29ace <strncpy+0x6>
	}

	while (n > 0) {
   29ade:	b122      	cbz	r2, 29aea <strncpy+0x22>
		*d = '\0';
   29ae0:	2100      	movs	r1, #0
   29ae2:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
   29ae6:	3a01      	subs	r2, #1
   29ae8:	e7f9      	b.n	29ade <strncpy+0x16>
	}

	return dest;
}
   29aea:	bc10      	pop	{r4}
   29aec:	4770      	bx	lr
		*d = '\0';
   29aee:	2100      	movs	r1, #0
   29af0:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   29af4:	3a01      	subs	r2, #1
	while (n > 0) {
   29af6:	2a00      	cmp	r2, #0
   29af8:	d1f9      	bne.n	29aee <strncpy+0x26>
   29afa:	4770      	bx	lr

00029afc <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
   29afc:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0')) {
   29afe:	e000      	b.n	29b02 <strchr+0x6>
		s++;
   29b00:	3001      	adds	r0, #1
	while ((*s != tmp) && (*s != '\0')) {
   29b02:	7803      	ldrb	r3, [r0, #0]
   29b04:	428b      	cmp	r3, r1
   29b06:	d001      	beq.n	29b0c <strchr+0x10>
   29b08:	2b00      	cmp	r3, #0
   29b0a:	d1f9      	bne.n	29b00 <strchr+0x4>
	}

	return (*s == tmp) ? (char *) s : NULL;
   29b0c:	428b      	cmp	r3, r1
   29b0e:	d100      	bne.n	29b12 <strchr+0x16>
}
   29b10:	4770      	bx	lr
	return (*s == tmp) ? (char *) s : NULL;
   29b12:	2000      	movs	r0, #0
   29b14:	e7fc      	b.n	29b10 <strchr+0x14>

00029b16 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   29b16:	4603      	mov	r3, r0
	size_t n = 0;
   29b18:	2000      	movs	r0, #0

	while (*s != '\0') {
   29b1a:	e001      	b.n	29b20 <strlen+0xa>
		s++;
   29b1c:	3301      	adds	r3, #1
		n++;
   29b1e:	3001      	adds	r0, #1
	while (*s != '\0') {
   29b20:	781a      	ldrb	r2, [r3, #0]
   29b22:	2a00      	cmp	r2, #0
   29b24:	d1fa      	bne.n	29b1c <strlen+0x6>
	}

	return n;
}
   29b26:	4770      	bx	lr

00029b28 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   29b28:	4603      	mov	r3, r0
	size_t n = 0;
   29b2a:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   29b2c:	e001      	b.n	29b32 <strnlen+0xa>
		s++;
   29b2e:	3301      	adds	r3, #1
		n++;
   29b30:	3001      	adds	r0, #1
	while (*s != '\0' && n < maxlen) {
   29b32:	781a      	ldrb	r2, [r3, #0]
   29b34:	b10a      	cbz	r2, 29b3a <strnlen+0x12>
   29b36:	4288      	cmp	r0, r1
   29b38:	d3f9      	bcc.n	29b2e <strnlen+0x6>
	}

	return n;
}
   29b3a:	4770      	bx	lr

00029b3c <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   29b3c:	e001      	b.n	29b42 <strcmp+0x6>
		s1++;
   29b3e:	3001      	adds	r0, #1
		s2++;
   29b40:	3101      	adds	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
   29b42:	7803      	ldrb	r3, [r0, #0]
   29b44:	780a      	ldrb	r2, [r1, #0]
   29b46:	4293      	cmp	r3, r2
   29b48:	d101      	bne.n	29b4e <strcmp+0x12>
   29b4a:	2b00      	cmp	r3, #0
   29b4c:	d1f7      	bne.n	29b3e <strcmp+0x2>
	}

	return *s1 - *s2;
}
   29b4e:	1a98      	subs	r0, r3, r2
   29b50:	4770      	bx	lr

00029b52 <strncmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   29b52:	e002      	b.n	29b5a <strncmp+0x8>
		s1++;
   29b54:	3001      	adds	r0, #1
		s2++;
   29b56:	3101      	adds	r1, #1
		n--;
   29b58:	3a01      	subs	r2, #1
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   29b5a:	b132      	cbz	r2, 29b6a <strncmp+0x18>
   29b5c:	7803      	ldrb	r3, [r0, #0]
   29b5e:	f891 c000 	ldrb.w	ip, [r1]
   29b62:	4563      	cmp	r3, ip
   29b64:	d101      	bne.n	29b6a <strncmp+0x18>
   29b66:	2b00      	cmp	r3, #0
   29b68:	d1f4      	bne.n	29b54 <strncmp+0x2>
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   29b6a:	b11a      	cbz	r2, 29b74 <strncmp+0x22>
   29b6c:	7800      	ldrb	r0, [r0, #0]
   29b6e:	780b      	ldrb	r3, [r1, #0]
   29b70:	1ac0      	subs	r0, r0, r3
   29b72:	4770      	bx	lr
   29b74:	2000      	movs	r0, #0
}
   29b76:	4770      	bx	lr

00029b78 <strcat>:

	return start;
}

char *strcat(char *ZRESTRICT dest, const char *ZRESTRICT src)
{
   29b78:	b538      	push	{r3, r4, r5, lr}
   29b7a:	4604      	mov	r4, r0
   29b7c:	460d      	mov	r5, r1
	strcpy(dest + strlen(dest), src);
   29b7e:	f7ff ffca 	bl	29b16 <strlen>
   29b82:	4629      	mov	r1, r5
   29b84:	4420      	add	r0, r4
   29b86:	f7ff ff95 	bl	29ab4 <strcpy>
	return dest;
}
   29b8a:	4620      	mov	r0, r4
   29b8c:	bd38      	pop	{r3, r4, r5, pc}

00029b8e <memcmp>:
int memcmp(const void *m1, const void *m2, size_t n)
{
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   29b8e:	4613      	mov	r3, r2
   29b90:	b16a      	cbz	r2, 29bae <memcmp+0x20>
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   29b92:	3b01      	subs	r3, #1
   29b94:	d007      	beq.n	29ba6 <memcmp+0x18>
   29b96:	f890 c000 	ldrb.w	ip, [r0]
   29b9a:	780a      	ldrb	r2, [r1, #0]
   29b9c:	4594      	cmp	ip, r2
   29b9e:	d102      	bne.n	29ba6 <memcmp+0x18>
		c1++;
   29ba0:	3001      	adds	r0, #1
		c2++;
   29ba2:	3101      	adds	r1, #1
   29ba4:	e7f5      	b.n	29b92 <memcmp+0x4>
	}

	return *c1 - *c2;
   29ba6:	7800      	ldrb	r0, [r0, #0]
   29ba8:	780b      	ldrb	r3, [r1, #0]
   29baa:	1ac0      	subs	r0, r0, r3
   29bac:	4770      	bx	lr
		return 0;
   29bae:	2000      	movs	r0, #0
}
   29bb0:	4770      	bx	lr

00029bb2 <memcpy>:
	const unsigned char *s_byte = (const unsigned char *)s;

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   29bb2:	ea80 0301 	eor.w	r3, r0, r1
   29bb6:	f013 0f03 	tst.w	r3, #3
   29bba:	d001      	beq.n	29bc0 <memcpy+0xe>
	unsigned char *d_byte = (unsigned char *)d;
   29bbc:	4603      	mov	r3, r0
   29bbe:	e023      	b.n	29c08 <memcpy+0x56>
   29bc0:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
   29bc2:	f013 0f03 	tst.w	r3, #3
   29bc6:	d00f      	beq.n	29be8 <memcpy+0x36>
			if (n == 0) {
   29bc8:	b30a      	cbz	r2, 29c0e <memcpy+0x5c>
				return d;
			}
			*(d_byte++) = *(s_byte++);
   29bca:	f811 cb01 	ldrb.w	ip, [r1], #1
   29bce:	f803 cb01 	strb.w	ip, [r3], #1
			n--;
   29bd2:	3a01      	subs	r2, #1
   29bd4:	e7f5      	b.n	29bc2 <memcpy+0x10>
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
   29bd6:	f811 cb01 	ldrb.w	ip, [r1], #1
   29bda:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
   29bde:	3a01      	subs	r2, #1
	while (n > 0) {
   29be0:	2a00      	cmp	r2, #0
   29be2:	d1f8      	bne.n	29bd6 <memcpy+0x24>
	}

	return d;
}
   29be4:	bc10      	pop	{r4}
   29be6:	4770      	bx	lr
		while (n >= sizeof(mem_word_t)) {
   29be8:	2a03      	cmp	r2, #3
   29bea:	d90d      	bls.n	29c08 <memcpy+0x56>
{
   29bec:	b410      	push	{r4}
			*(d_word++) = *(s_word++);
   29bee:	f851 4b04 	ldr.w	r4, [r1], #4
   29bf2:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
   29bf6:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
   29bf8:	2a03      	cmp	r2, #3
   29bfa:	d8f8      	bhi.n	29bee <memcpy+0x3c>
   29bfc:	e7f0      	b.n	29be0 <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
   29bfe:	f811 cb01 	ldrb.w	ip, [r1], #1
   29c02:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
   29c06:	3a01      	subs	r2, #1
	while (n > 0) {
   29c08:	2a00      	cmp	r2, #0
   29c0a:	d1f8      	bne.n	29bfe <memcpy+0x4c>
   29c0c:	4770      	bx	lr
}
   29c0e:	4770      	bx	lr

00029c10 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   29c10:	fa5f fc81 	uxtb.w	ip, r1
	unsigned char *d_byte = (unsigned char *)buf;
   29c14:	4603      	mov	r3, r0

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   29c16:	e002      	b.n	29c1e <memset+0xe>
		if (n == 0) {
			return buf;
		}
		*(d_byte++) = c_byte;
   29c18:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
   29c1c:	3a01      	subs	r2, #1
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   29c1e:	f013 0f03 	tst.w	r3, #3
   29c22:	d002      	beq.n	29c2a <memset+0x1a>
		if (n == 0) {
   29c24:	2a00      	cmp	r2, #0
   29c26:	d1f7      	bne.n	29c18 <memset+0x8>
   29c28:	e00f      	b.n	29c4a <memset+0x3a>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
   29c2a:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
   29c2c:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
   29c30:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   29c34:	2a03      	cmp	r2, #3
   29c36:	d906      	bls.n	29c46 <memset+0x36>
		*(d_word++) = c_word;
   29c38:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
   29c3c:	3a04      	subs	r2, #4
   29c3e:	e7f9      	b.n	29c34 <memset+0x24>

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
		*(d_byte++) = c_byte;
   29c40:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
   29c44:	3a01      	subs	r2, #1
	while (n > 0) {
   29c46:	2a00      	cmp	r2, #0
   29c48:	d1fa      	bne.n	29c40 <memset+0x30>
	}

	return buf;
}
   29c4a:	4770      	bx	lr

00029c4c <_stdout_hook_default>:
}
   29c4c:	f04f 30ff 	mov.w	r0, #4294967295
   29c50:	4770      	bx	lr

00029c52 <sys_arch_reboot>:
{
   29c52:	b508      	push	{r3, lr}
    *p_gpregret = val;
   29c54:	b2c0      	uxtb	r0, r0
   29c56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   29c5a:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
	NVIC_SystemReset();
   29c5e:	f7ec fb43 	bl	162e8 <__NVIC_SystemReset>

00029c62 <nrf_power_system_off>:
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   29c62:	2301      	movs	r3, #1
   29c64:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   29c68:	f3bf 8f4f 	dsb	sy
        __WFE();
   29c6c:	bf20      	wfe
    while (true)
   29c6e:	e7fd      	b.n	29c6c <nrf_power_system_off+0xa>

00029c70 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   29c70:	2806      	cmp	r0, #6
   29c72:	d000      	beq.n	29c76 <pm_state_set+0x6>
   29c74:	4770      	bx	lr
{
   29c76:	b508      	push	{r3, lr}
	case PM_STATE_SOFT_OFF:
		nrf_power_system_off(NRF_POWER);
   29c78:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   29c7c:	f7ff fff1 	bl	29c62 <nrf_power_system_off>

00029c80 <pm_state_exit_post_ops>:
   29c80:	2300      	movs	r3, #0
   29c82:	f383 8811 	msr	BASEPRI, r3
   29c86:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   29c8a:	4770      	bx	lr

00029c8c <uuid128_cmp>:

static int uuid128_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   29c8c:	b510      	push	{r4, lr}
   29c8e:	b08a      	sub	sp, #40	; 0x28
   29c90:	460c      	mov	r4, r1
	struct bt_uuid_128 uuid1, uuid2;

	uuid_to_uuid128(u1, &uuid1);
   29c92:	a905      	add	r1, sp, #20
   29c94:	f7ec fc02 	bl	1649c <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   29c98:	4669      	mov	r1, sp
   29c9a:	4620      	mov	r0, r4
   29c9c:	f7ec fbfe 	bl	1649c <uuid_to_uuid128>

	return memcmp(uuid1.val, uuid2.val, 16);
   29ca0:	2210      	movs	r2, #16
   29ca2:	f10d 0101 	add.w	r1, sp, #1
   29ca6:	f10d 0015 	add.w	r0, sp, #21
   29caa:	f7ff ff70 	bl	29b8e <memcmp>
}
   29cae:	b00a      	add	sp, #40	; 0x28
   29cb0:	bd10      	pop	{r4, pc}

00029cb2 <bt_uuid_cmp>:

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   29cb2:	b508      	push	{r3, lr}
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   29cb4:	7803      	ldrb	r3, [r0, #0]
   29cb6:	780a      	ldrb	r2, [r1, #0]
   29cb8:	4293      	cmp	r3, r2
   29cba:	d107      	bne.n	29ccc <bt_uuid_cmp+0x1a>
		return uuid128_cmp(u1, u2);
	}

	switch (u1->type) {
   29cbc:	2b01      	cmp	r3, #1
   29cbe:	d00c      	beq.n	29cda <bt_uuid_cmp+0x28>
   29cc0:	2b02      	cmp	r3, #2
   29cc2:	d00e      	beq.n	29ce2 <bt_uuid_cmp+0x30>
   29cc4:	b12b      	cbz	r3, 29cd2 <bt_uuid_cmp+0x20>
   29cc6:	f06f 0015 	mvn.w	r0, #21
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   29cca:	bd08      	pop	{r3, pc}
		return uuid128_cmp(u1, u2);
   29ccc:	f7ff ffde 	bl	29c8c <uuid128_cmp>
   29cd0:	e7fb      	b.n	29cca <bt_uuid_cmp+0x18>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   29cd2:	8840      	ldrh	r0, [r0, #2]
   29cd4:	884b      	ldrh	r3, [r1, #2]
   29cd6:	1ac0      	subs	r0, r0, r3
   29cd8:	e7f7      	b.n	29cca <bt_uuid_cmp+0x18>
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   29cda:	6840      	ldr	r0, [r0, #4]
   29cdc:	684b      	ldr	r3, [r1, #4]
   29cde:	1ac0      	subs	r0, r0, r3
   29ce0:	e7f3      	b.n	29cca <bt_uuid_cmp+0x18>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   29ce2:	2210      	movs	r2, #16
   29ce4:	3101      	adds	r1, #1
   29ce6:	3001      	adds	r0, #1
   29ce8:	f7ff ff51 	bl	29b8e <memcmp>
   29cec:	e7ed      	b.n	29cca <bt_uuid_cmp+0x18>

00029cee <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
   29cee:	b508      	push	{r3, lr}
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   29cf0:	2a04      	cmp	r2, #4
   29cf2:	d00e      	beq.n	29d12 <bt_uuid_create+0x24>
   29cf4:	2a10      	cmp	r2, #16
   29cf6:	d01d      	beq.n	29d34 <bt_uuid_create+0x46>
   29cf8:	2a02      	cmp	r2, #2
   29cfa:	d001      	beq.n	29d00 <bt_uuid_create+0x12>
   29cfc:	2000      	movs	r0, #0
		break;
	default:
		return false;
	}
	return true;
}
   29cfe:	bd08      	pop	{r3, pc}
		uuid->type = BT_UUID_TYPE_16;
   29d00:	2300      	movs	r3, #0
   29d02:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   29d04:	784a      	ldrb	r2, [r1, #1]
   29d06:	780b      	ldrb	r3, [r1, #0]
   29d08:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   29d0c:	8043      	strh	r3, [r0, #2]
	return true;
   29d0e:	2001      	movs	r0, #1
		break;
   29d10:	e7f5      	b.n	29cfe <bt_uuid_create+0x10>
		uuid->type = BT_UUID_TYPE_32;
   29d12:	2301      	movs	r3, #1
   29d14:	7003      	strb	r3, [r0, #0]
   29d16:	78ca      	ldrb	r2, [r1, #3]
   29d18:	f891 c002 	ldrb.w	ip, [r1, #2]
   29d1c:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8
   29d20:	f891 e001 	ldrb.w	lr, [r1, #1]
   29d24:	780a      	ldrb	r2, [r1, #0]
   29d26:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   29d2a:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   29d2e:	6042      	str	r2, [r0, #4]
	return true;
   29d30:	4618      	mov	r0, r3
		break;
   29d32:	e7e4      	b.n	29cfe <bt_uuid_create+0x10>
		uuid->type = BT_UUID_TYPE_128;
   29d34:	2302      	movs	r3, #2
   29d36:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   29d3a:	2210      	movs	r2, #16
   29d3c:	f7ff ff39 	bl	29bb2 <memcpy>
	return true;
   29d40:	2001      	movs	r0, #1
		break;
   29d42:	e7dc      	b.n	29cfe <bt_uuid_create+0x10>

00029d44 <bt_addr_le_create_static>:

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   29d44:	b510      	push	{r4, lr}
   29d46:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   29d48:	2301      	movs	r3, #1
   29d4a:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   29d4e:	2106      	movs	r1, #6
   29d50:	f7f9 fafc 	bl	2334c <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   29d54:	b918      	cbnz	r0, 29d5e <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   29d56:	79a3      	ldrb	r3, [r4, #6]
   29d58:	f063 033f 	orn	r3, r3, #63	; 0x3f
   29d5c:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   29d5e:	bd10      	pop	{r4, pc}

00029d60 <sys_put_le64>:
	dst[0] = val;
   29d60:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   29d62:	f3c0 2307 	ubfx	r3, r0, #8, #8
   29d66:	7053      	strb	r3, [r2, #1]
	sys_put_le16(val >> 16, &dst[2]);
   29d68:	0c03      	lsrs	r3, r0, #16
	dst[0] = val;
   29d6a:	7093      	strb	r3, [r2, #2]
	dst[1] = val >> 8;
   29d6c:	0e00      	lsrs	r0, r0, #24
   29d6e:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   29d70:	7111      	strb	r1, [r2, #4]
	dst[1] = val >> 8;
   29d72:	f3c1 2307 	ubfx	r3, r1, #8, #8
   29d76:	7153      	strb	r3, [r2, #5]
	sys_put_le16(val >> 16, &dst[2]);
   29d78:	0c0b      	lsrs	r3, r1, #16
	dst[0] = val;
   29d7a:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   29d7c:	0e09      	lsrs	r1, r1, #24
   29d7e:	71d1      	strb	r1, [r2, #7]
}
   29d80:	4770      	bx	lr

00029d82 <sys_get_le64>:
{
   29d82:	b500      	push	{lr}
	return ((uint16_t)src[1] << 8) | src[0];
   29d84:	79c3      	ldrb	r3, [r0, #7]
   29d86:	7981      	ldrb	r1, [r0, #6]
   29d88:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   29d8c:	7942      	ldrb	r2, [r0, #5]
   29d8e:	7903      	ldrb	r3, [r0, #4]
   29d90:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   29d94:	78c2      	ldrb	r2, [r0, #3]
   29d96:	f890 c002 	ldrb.w	ip, [r0, #2]
   29d9a:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8
   29d9e:	f890 e001 	ldrb.w	lr, [r0, #1]
   29da2:	7802      	ldrb	r2, [r0, #0]
   29da4:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
}
   29da8:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
   29dac:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   29db0:	f85d fb04 	ldr.w	pc, [sp], #4

00029db4 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   29db4:	3805      	subs	r0, #5
   29db6:	2815      	cmp	r0, #21
   29db8:	d80e      	bhi.n	29dd8 <bt_hci_evt_get_flags+0x24>
   29dba:	e8df f000 	tbb	[pc, r0]
   29dbe:	0d0b      	.short	0x0d0b
   29dc0:	0d0d0d0d 	.word	0x0d0d0d0d
   29dc4:	0f0d0d0d 	.word	0x0f0d0d0d
   29dc8:	0d0d0d0f 	.word	0x0d0d0d0f
   29dcc:	0d0d0d0f 	.word	0x0d0d0d0f
   29dd0:	0f0d0d0d 	.word	0x0f0d0d0d
   29dd4:	2003      	movs	r0, #3
   29dd6:	4770      	bx	lr
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   29dd8:	2002      	movs	r0, #2
   29dda:	4770      	bx	lr
		return BT_HCI_EVT_FLAG_RECV_PRIO;
   29ddc:	2001      	movs	r0, #1
	}
}
   29dde:	4770      	bx	lr

00029de0 <skip_auto_phy_update_on_conn_establishment>:
}
   29de0:	2000      	movs	r0, #0
   29de2:	4770      	bx	lr

00029de4 <hci_vendor_event>:
}
   29de4:	4770      	bx	lr

00029de6 <atomic_test_bit>:
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   29de6:	094b      	lsrs	r3, r1, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   29de8:	f3bf 8f5b 	dmb	ish
   29dec:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
   29df0:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   29df4:	f001 011f 	and.w	r1, r1, #31
   29df8:	4108      	asrs	r0, r1
}
   29dfa:	f000 0001 	and.w	r0, r0, #1
   29dfe:	4770      	bx	lr

00029e00 <hci_disconn_complete_prio>:
{
   29e00:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   29e02:	68c3      	ldr	r3, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   29e04:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	if (evt->status) {
   29e08:	781b      	ldrb	r3, [r3, #0]
   29e0a:	b103      	cbz	r3, 29e0e <hci_disconn_complete_prio+0xe>
}
   29e0c:	bd38      	pop	{r3, r4, r5, pc}
	conn = bt_conn_lookup_handle(handle);
   29e0e:	4620      	mov	r0, r4
   29e10:	f7ef fd92 	bl	19938 <bt_conn_lookup_handle>
	if (!conn) {
   29e14:	4605      	mov	r5, r0
   29e16:	b130      	cbz	r0, 29e26 <hci_disconn_complete_prio+0x26>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   29e18:	2101      	movs	r1, #1
   29e1a:	f7ef fd97 	bl	1994c <bt_conn_set_state>
	bt_conn_unref(conn);
   29e1e:	4628      	mov	r0, r5
   29e20:	f000 fa78 	bl	2a314 <bt_conn_unref>
   29e24:	e7f2      	b.n	29e0c <hci_disconn_complete_prio+0xc>
		conn_handle_disconnected(handle);
   29e26:	4620      	mov	r0, r4
   29e28:	f7ec fbd8 	bl	165dc <conn_handle_disconnected>
		return;
   29e2c:	e7ee      	b.n	29e0c <hci_disconn_complete_prio+0xc>

00029e2e <atomic_set_bit_to>:
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   29e2e:	f001 0c1f 	and.w	ip, r1, #31
   29e32:	2301      	movs	r3, #1
   29e34:	fa03 f30c 	lsl.w	r3, r3, ip

	if (val) {
   29e38:	b172      	cbz	r2, 29e58 <atomic_set_bit_to+0x2a>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   29e3a:	0949      	lsrs	r1, r1, #5
   29e3c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   29e40:	f3bf 8f5b 	dmb	ish
   29e44:	e850 2f00 	ldrex	r2, [r0]
   29e48:	431a      	orrs	r2, r3
   29e4a:	e840 2100 	strex	r1, r2, [r0]
   29e4e:	2900      	cmp	r1, #0
   29e50:	d1f8      	bne.n	29e44 <atomic_set_bit_to+0x16>
   29e52:	f3bf 8f5b 	dmb	ish
   29e56:	4770      	bx	lr
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   29e58:	0949      	lsrs	r1, r1, #5
   29e5a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   29e5e:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   29e60:	f3bf 8f5b 	dmb	ish
   29e64:	e850 2f00 	ldrex	r2, [r0]
   29e68:	401a      	ands	r2, r3
   29e6a:	e840 2100 	strex	r1, r2, [r0]
   29e6e:	2900      	cmp	r1, #0
   29e70:	d1f8      	bne.n	29e64 <atomic_set_bit_to+0x36>
   29e72:	f3bf 8f5b 	dmb	ish
	}
}
   29e76:	4770      	bx	lr

00029e78 <atomic_test_and_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   29e78:	f001 021f 	and.w	r2, r1, #31
   29e7c:	2301      	movs	r3, #1
   29e7e:	4093      	lsls	r3, r2
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   29e80:	0949      	lsrs	r1, r1, #5
   29e82:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   29e86:	f3bf 8f5b 	dmb	ish
   29e8a:	e850 2f00 	ldrex	r2, [r0]
   29e8e:	ea42 0103 	orr.w	r1, r2, r3
   29e92:	e840 1c00 	strex	ip, r1, [r0]
   29e96:	f1bc 0f00 	cmp.w	ip, #0
   29e9a:	d1f6      	bne.n	29e8a <atomic_test_and_set_bit+0x12>
   29e9c:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   29ea0:	4213      	tst	r3, r2
}
   29ea2:	bf14      	ite	ne
   29ea4:	2001      	movne	r0, #1
   29ea6:	2000      	moveq	r0, #0
   29ea8:	4770      	bx	lr

00029eaa <hci_le_read_remote_features>:
{
   29eaa:	b538      	push	{r3, r4, r5, lr}
   29eac:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   29eae:	2102      	movs	r1, #2
   29eb0:	f242 0016 	movw	r0, #8214	; 0x2016
   29eb4:	f7ed fb0c 	bl	174d0 <bt_hci_cmd_create>
	if (!buf) {
   29eb8:	b168      	cbz	r0, 29ed6 <hci_le_read_remote_features+0x2c>
   29eba:	4605      	mov	r5, r0
   29ebc:	2102      	movs	r1, #2
   29ebe:	300c      	adds	r0, #12
   29ec0:	f002 fbde 	bl	2c680 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   29ec4:	8823      	ldrh	r3, [r4, #0]
   29ec6:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   29ec8:	2200      	movs	r2, #0
   29eca:	4629      	mov	r1, r5
   29ecc:	f242 0016 	movw	r0, #8214	; 0x2016
   29ed0:	f7ed fb3c 	bl	1754c <bt_hci_cmd_send_sync>
}
   29ed4:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   29ed6:	f06f 0068 	mvn.w	r0, #104	; 0x68
   29eda:	e7fb      	b.n	29ed4 <hci_le_read_remote_features+0x2a>

00029edc <bt_le_create_conn>:
{
   29edc:	b508      	push	{r3, lr}
	return bt_le_create_conn_legacy(conn);
   29ede:	f7ed fed9 	bl	17c94 <bt_le_create_conn_legacy>
}
   29ee2:	bd08      	pop	{r3, pc}

00029ee4 <bt_hci_disconnect>:
{
   29ee4:	b570      	push	{r4, r5, r6, lr}
   29ee6:	4605      	mov	r5, r0
   29ee8:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   29eea:	2103      	movs	r1, #3
   29eec:	f240 4006 	movw	r0, #1030	; 0x406
   29ef0:	f7ed faee 	bl	174d0 <bt_hci_cmd_create>
	if (!buf) {
   29ef4:	b168      	cbz	r0, 29f12 <bt_hci_disconnect+0x2e>
   29ef6:	4606      	mov	r6, r0
   29ef8:	2103      	movs	r1, #3
   29efa:	300c      	adds	r0, #12
   29efc:	f002 fbc0 	bl	2c680 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
   29f00:	8005      	strh	r5, [r0, #0]
	disconn->reason = reason;
   29f02:	7084      	strb	r4, [r0, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   29f04:	2200      	movs	r2, #0
   29f06:	4631      	mov	r1, r6
   29f08:	f240 4006 	movw	r0, #1030	; 0x406
   29f0c:	f7ed fb1e 	bl	1754c <bt_hci_cmd_send_sync>
}
   29f10:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   29f12:	f06f 0068 	mvn.w	r0, #104	; 0x68
   29f16:	e7fb      	b.n	29f10 <bt_hci_disconnect+0x2c>

00029f18 <bt_le_set_data_len>:
{
   29f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29f1a:	4606      	mov	r6, r0
   29f1c:	460f      	mov	r7, r1
   29f1e:	4614      	mov	r4, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   29f20:	2106      	movs	r1, #6
   29f22:	f242 0022 	movw	r0, #8226	; 0x2022
   29f26:	f7ed fad3 	bl	174d0 <bt_hci_cmd_create>
	if (!buf) {
   29f2a:	b178      	cbz	r0, 29f4c <bt_le_set_data_len+0x34>
   29f2c:	4605      	mov	r5, r0
   29f2e:	2106      	movs	r1, #6
   29f30:	300c      	adds	r0, #12
   29f32:	f002 fba5 	bl	2c680 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   29f36:	8833      	ldrh	r3, [r6, #0]
   29f38:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   29f3a:	8047      	strh	r7, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   29f3c:	8084      	strh	r4, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   29f3e:	2200      	movs	r2, #0
   29f40:	4629      	mov	r1, r5
   29f42:	f242 0022 	movw	r0, #8226	; 0x2022
   29f46:	f7ed fb01 	bl	1754c <bt_hci_cmd_send_sync>
}
   29f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   29f4c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   29f50:	e7fb      	b.n	29f4a <bt_le_set_data_len+0x32>

00029f52 <bt_le_set_phy>:
{
   29f52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29f56:	4607      	mov	r7, r0
   29f58:	460e      	mov	r6, r1
   29f5a:	4615      	mov	r5, r2
   29f5c:	461c      	mov	r4, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   29f5e:	2107      	movs	r1, #7
   29f60:	f242 0032 	movw	r0, #8242	; 0x2032
   29f64:	f7ed fab4 	bl	174d0 <bt_hci_cmd_create>
	if (!buf) {
   29f68:	b1a8      	cbz	r0, 29f96 <bt_le_set_phy+0x44>
   29f6a:	4680      	mov	r8, r0
   29f6c:	2107      	movs	r1, #7
   29f6e:	300c      	adds	r0, #12
   29f70:	f002 fb86 	bl	2c680 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   29f74:	883b      	ldrh	r3, [r7, #0]
   29f76:	8003      	strh	r3, [r0, #0]
	cp->all_phys = all_phys;
   29f78:	7086      	strb	r6, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   29f7a:	70c5      	strb	r5, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   29f7c:	7104      	strb	r4, [r0, #4]
	cp->phy_opts = phy_opts;
   29f7e:	f89d 3018 	ldrb.w	r3, [sp, #24]
   29f82:	f8a0 3005 	strh.w	r3, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   29f86:	2200      	movs	r2, #0
   29f88:	4641      	mov	r1, r8
   29f8a:	f242 0032 	movw	r0, #8242	; 0x2032
   29f8e:	f7ed fadd 	bl	1754c <bt_hci_cmd_send_sync>
}
   29f92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOBUFS;
   29f96:	f06f 0068 	mvn.w	r0, #104	; 0x68
   29f9a:	e7fa      	b.n	29f92 <bt_le_set_phy+0x40>

00029f9c <enh_conn_complete>:
{
   29f9c:	b508      	push	{r3, lr}
	bt_hci_le_enh_conn_complete(evt);
   29f9e:	f7ee f869 	bl	18074 <bt_hci_le_enh_conn_complete>
}
   29fa2:	bd08      	pop	{r3, pc}

00029fa4 <le_enh_conn_complete>:
{
   29fa4:	b508      	push	{r3, lr}
	enh_conn_complete((void *)buf->data);
   29fa6:	68c0      	ldr	r0, [r0, #12]
   29fa8:	f7ff fff8 	bl	29f9c <enh_conn_complete>
}
   29fac:	bd08      	pop	{r3, pc}

00029fae <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   29fae:	8802      	ldrh	r2, [r0, #0]
   29fb0:	8843      	ldrh	r3, [r0, #2]
   29fb2:	429a      	cmp	r2, r3
   29fb4:	d817      	bhi.n	29fe6 <bt_le_conn_params_valid+0x38>
   29fb6:	2a05      	cmp	r2, #5
   29fb8:	d917      	bls.n	29fea <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
   29fba:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   29fbe:	d816      	bhi.n	29fee <bt_le_conn_params_valid+0x40>
	if (param->latency > 499) {
   29fc0:	8881      	ldrh	r1, [r0, #4]
   29fc2:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
   29fc6:	d214      	bcs.n	29ff2 <bt_le_conn_params_valid+0x44>
	if (param->timeout < 10 || param->timeout > 3200 ||
   29fc8:	88c0      	ldrh	r0, [r0, #6]
   29fca:	f1a0 020a 	sub.w	r2, r0, #10
   29fce:	b292      	uxth	r2, r2
   29fd0:	f640 4c76 	movw	ip, #3190	; 0xc76
   29fd4:	4562      	cmp	r2, ip
   29fd6:	d80e      	bhi.n	29ff6 <bt_le_conn_params_valid+0x48>
	     ((1U + param->latency) * param->interval_max))) {
   29fd8:	fb01 3303 	mla	r3, r1, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   29fdc:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   29fe0:	d20b      	bcs.n	29ffa <bt_le_conn_params_valid+0x4c>
	return true;
   29fe2:	2001      	movs	r0, #1
   29fe4:	4770      	bx	lr
		return false;
   29fe6:	2000      	movs	r0, #0
   29fe8:	4770      	bx	lr
   29fea:	2000      	movs	r0, #0
   29fec:	4770      	bx	lr
   29fee:	2000      	movs	r0, #0
   29ff0:	4770      	bx	lr
		return false;
   29ff2:	2000      	movs	r0, #0
   29ff4:	4770      	bx	lr
		return false;
   29ff6:	2000      	movs	r0, #0
   29ff8:	4770      	bx	lr
   29ffa:	2000      	movs	r0, #0
}
   29ffc:	4770      	bx	lr

00029ffe <le_conn_param_req_reply>:
{
   29ffe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a000:	4606      	mov	r6, r0
   2a002:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   2a004:	210e      	movs	r1, #14
   2a006:	f242 0020 	movw	r0, #8224	; 0x2020
   2a00a:	f7ed fa61 	bl	174d0 <bt_hci_cmd_create>
	if (!buf) {
   2a00e:	b1c0      	cbz	r0, 2a042 <le_conn_param_req_reply+0x44>
   2a010:	4607      	mov	r7, r0
   2a012:	210e      	movs	r1, #14
   2a014:	300c      	adds	r0, #12
   2a016:	f002 fb33 	bl	2c680 <net_buf_simple_add>
   2a01a:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
   2a01c:	220e      	movs	r2, #14
   2a01e:	2100      	movs	r1, #0
   2a020:	f7ff fdf6 	bl	29c10 <memset>
	cp->handle = sys_cpu_to_le16(handle);
   2a024:	8026      	strh	r6, [r4, #0]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   2a026:	882b      	ldrh	r3, [r5, #0]
   2a028:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   2a02a:	886b      	ldrh	r3, [r5, #2]
   2a02c:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   2a02e:	88ab      	ldrh	r3, [r5, #4]
   2a030:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   2a032:	88eb      	ldrh	r3, [r5, #6]
   2a034:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   2a036:	4639      	mov	r1, r7
   2a038:	f242 0020 	movw	r0, #8224	; 0x2020
   2a03c:	f7ee f996 	bl	1836c <bt_hci_cmd_send>
}
   2a040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   2a042:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2a046:	e7fb      	b.n	2a040 <le_conn_param_req_reply+0x42>

0002a048 <bt_init>:
{
   2a048:	b510      	push	{r4, lr}
	err = hci_init();
   2a04a:	f7ed fdbf 	bl	17bcc <hci_init>
	if (err) {
   2a04e:	4604      	mov	r4, r0
   2a050:	b108      	cbz	r0, 2a056 <bt_init+0xe>
}
   2a052:	4620      	mov	r0, r4
   2a054:	bd10      	pop	{r4, pc}
		err = bt_conn_init();
   2a056:	f7f0 f91f 	bl	1a298 <bt_conn_init>
		if (err) {
   2a05a:	4604      	mov	r4, r0
   2a05c:	2800      	cmp	r0, #0
   2a05e:	d1f8      	bne.n	2a052 <bt_init+0xa>
	bt_finalize_init();
   2a060:	f7ee fb5a 	bl	18718 <bt_finalize_init>
	return 0;
   2a064:	e7f5      	b.n	2a052 <bt_init+0xa>

0002a066 <bt_get_appearance>:
#if defined(CONFIG_BT_DEVICE_APPEARANCE_DYNAMIC)
	return bt_dev.appearance;
#else
	return CONFIG_BT_DEVICE_APPEARANCE;
#endif
}
   2a066:	2000      	movs	r0, #0
   2a068:	4770      	bx	lr

0002a06a <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
   2a06a:	2000      	movs	r0, #0
   2a06c:	4770      	bx	lr

0002a06e <is_adv_using_rand_addr>:
}
   2a06e:	2000      	movs	r0, #0
   2a070:	4770      	bx	lr

0002a072 <bt_lookup_id_addr>:
	CHECKIF(id >= CONFIG_BT_ID_MAX || addr == NULL) {
   2a072:	b910      	cbnz	r0, 2a07a <bt_lookup_id_addr+0x8>
   2a074:	b119      	cbz	r1, 2a07e <bt_lookup_id_addr+0xc>
	return addr;
   2a076:	4608      	mov	r0, r1
   2a078:	4770      	bx	lr
		return NULL;
   2a07a:	2000      	movs	r0, #0
   2a07c:	4770      	bx	lr
   2a07e:	2000      	movs	r0, #0
}
   2a080:	4770      	bx	lr

0002a082 <bt_id_set_private_addr>:
	CHECKIF(id >= CONFIG_BT_ID_MAX) {
   2a082:	b998      	cbnz	r0, 2a0ac <bt_id_set_private_addr+0x2a>
{
   2a084:	b500      	push	{lr}
   2a086:	b083      	sub	sp, #12
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   2a088:	2106      	movs	r1, #6
   2a08a:	4668      	mov	r0, sp
   2a08c:	f7f9 f95e 	bl	2334c <bt_rand>
	if (err) {
   2a090:	b110      	cbz	r0, 2a098 <bt_id_set_private_addr+0x16>
}
   2a092:	b003      	add	sp, #12
   2a094:	f85d fb04 	ldr.w	pc, [sp], #4
	BT_ADDR_SET_NRPA(&nrpa);
   2a098:	f89d 3005 	ldrb.w	r3, [sp, #5]
   2a09c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2a0a0:	f88d 3005 	strb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   2a0a4:	4668      	mov	r0, sp
   2a0a6:	f7ee fb81 	bl	187ac <set_random_address>
	if (err)  {
   2a0aa:	e7f2      	b.n	2a092 <bt_id_set_private_addr+0x10>
		return -EINVAL;
   2a0ac:	f06f 0015 	mvn.w	r0, #21
}
   2a0b0:	4770      	bx	lr

0002a0b2 <bt_id_scan_random_addr_check>:
}
   2a0b2:	2001      	movs	r0, #1
   2a0b4:	4770      	bx	lr

0002a0b6 <get_adv_props_legacy>:
	switch (evt_type) {
   2a0b6:	2804      	cmp	r0, #4
   2a0b8:	d80a      	bhi.n	2a0d0 <get_adv_props_legacy+0x1a>
   2a0ba:	e8df f000 	tbb	[pc, r0]
   2a0be:	0b03      	.short	0x0b03
   2a0c0:	050c      	.short	0x050c
   2a0c2:	07          	.byte	0x07
   2a0c3:	00          	.byte	0x00
   2a0c4:	2003      	movs	r0, #3
   2a0c6:	4770      	bx	lr
		return 0;
   2a0c8:	2000      	movs	r0, #0
   2a0ca:	4770      	bx	lr
		return BT_GAP_ADV_PROP_SCAN_RESPONSE |
   2a0cc:	200a      	movs	r0, #10
   2a0ce:	4770      	bx	lr
		return 0;
   2a0d0:	2000      	movs	r0, #0
   2a0d2:	4770      	bx	lr
		return BT_GAP_ADV_PROP_CONNECTABLE |
   2a0d4:	2005      	movs	r0, #5
}
   2a0d6:	4770      	bx	lr

0002a0d8 <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2a0d8:	f001 0c1f 	and.w	ip, r1, #31
   2a0dc:	2301      	movs	r3, #1
   2a0de:	fa03 f30c 	lsl.w	r3, r3, ip
	if (val) {
   2a0e2:	b172      	cbz	r2, 2a102 <atomic_set_bit_to+0x2a>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2a0e4:	0949      	lsrs	r1, r1, #5
   2a0e6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   2a0ea:	f3bf 8f5b 	dmb	ish
   2a0ee:	e850 2f00 	ldrex	r2, [r0]
   2a0f2:	431a      	orrs	r2, r3
   2a0f4:	e840 2100 	strex	r1, r2, [r0]
   2a0f8:	2900      	cmp	r1, #0
   2a0fa:	d1f8      	bne.n	2a0ee <atomic_set_bit_to+0x16>
   2a0fc:	f3bf 8f5b 	dmb	ish
   2a100:	4770      	bx	lr
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2a102:	0949      	lsrs	r1, r1, #5
   2a104:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   2a108:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2a10a:	f3bf 8f5b 	dmb	ish
   2a10e:	e850 2f00 	ldrex	r2, [r0]
   2a112:	401a      	ands	r2, r3
   2a114:	e840 2100 	strex	r1, r2, [r0]
   2a118:	2900      	cmp	r1, #0
   2a11a:	d1f8      	bne.n	2a10e <atomic_set_bit_to+0x36>
   2a11c:	f3bf 8f5b 	dmb	ish
}
   2a120:	4770      	bx	lr

0002a122 <bt_le_scan_set_enable>:
{
   2a122:	b508      	push	{r3, lr}
	return bt_le_scan_set_enable_legacy(enable);
   2a124:	f7ee fec8 	bl	18eb8 <bt_le_scan_set_enable_legacy>
}
   2a128:	bd08      	pop	{r3, pc}

0002a12a <start_passive_scan>:
{
   2a12a:	b508      	push	{r3, lr}
	if (fast_scan) {
   2a12c:	b128      	cbz	r0, 2a13a <start_passive_scan+0x10>
		window = BT_GAP_SCAN_FAST_WINDOW;
   2a12e:	2230      	movs	r2, #48	; 0x30
		interval = BT_GAP_SCAN_FAST_INTERVAL;
   2a130:	2160      	movs	r1, #96	; 0x60
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
   2a132:	2000      	movs	r0, #0
   2a134:	f7ee fefc 	bl	18f30 <start_le_scan_legacy>
}
   2a138:	bd08      	pop	{r3, pc}
		window = CONFIG_BT_BACKGROUND_SCAN_WINDOW;
   2a13a:	2212      	movs	r2, #18
		interval = CONFIG_BT_BACKGROUND_SCAN_INTERVAL;
   2a13c:	f44f 6100 	mov.w	r1, #2048	; 0x800
   2a140:	e7f7      	b.n	2a132 <start_passive_scan+0x8>

0002a142 <bt_conn_set_param_le>:
	conn->le.interval_min = param->interval_min;
   2a142:	880b      	ldrh	r3, [r1, #0]
   2a144:	f8a0 30a0 	strh.w	r3, [r0, #160]	; 0xa0
	conn->le.interval_max = param->interval_max;
   2a148:	884b      	ldrh	r3, [r1, #2]
   2a14a:	f8a0 30a2 	strh.w	r3, [r0, #162]	; 0xa2
	conn->le.latency = param->latency;
   2a14e:	888b      	ldrh	r3, [r1, #4]
   2a150:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
	conn->le.timeout = param->timeout;
   2a154:	88cb      	ldrh	r3, [r1, #6]
   2a156:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
}
   2a15a:	4770      	bx	lr

0002a15c <tx_notify>:
{
   2a15c:	b570      	push	{r4, r5, r6, lr}
   2a15e:	4604      	mov	r4, r0
	LOG_DBG("conn %p", conn);
   2a160:	e00c      	b.n	2a17c <tx_notify+0x20>
   2a162:	f383 8811 	msr	BASEPRI, r3
   2a166:	f3bf 8f6f 	isb	sy
		if (!tx) {
   2a16a:	b1c8      	cbz	r0, 2a1a0 <tx_notify+0x44>
		cb = tx->cb;
   2a16c:	6845      	ldr	r5, [r0, #4]
		user_data = tx->user_data;
   2a16e:	6886      	ldr	r6, [r0, #8]
		tx_free(tx);
   2a170:	f7ef f95c 	bl	1942c <tx_free>
		cb(conn, user_data, 0);
   2a174:	2200      	movs	r2, #0
   2a176:	4631      	mov	r1, r6
   2a178:	4620      	mov	r0, r4
   2a17a:	47a8      	blx	r5
	__asm__ volatile(
   2a17c:	f04f 0240 	mov.w	r2, #64	; 0x40
   2a180:	f3ef 8311 	mrs	r3, BASEPRI
   2a184:	f382 8812 	msr	BASEPRI_MAX, r2
   2a188:	f3bf 8f6f 	isb	sy
	return list->head;
   2a18c:	6a20      	ldr	r0, [r4, #32]
		if (!sys_slist_is_empty(&conn->tx_complete)) {
   2a18e:	2800      	cmp	r0, #0
   2a190:	d0e7      	beq.n	2a162 <tx_notify+0x6>
	return node->next;
   2a192:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   2a194:	6222      	str	r2, [r4, #32]
	return list->tail;
   2a196:	6a61      	ldr	r1, [r4, #36]	; 0x24
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2a198:	4281      	cmp	r1, r0
   2a19a:	d1e2      	bne.n	2a162 <tx_notify+0x6>
	list->tail = node;
   2a19c:	6262      	str	r2, [r4, #36]	; 0x24
}
   2a19e:	e7e0      	b.n	2a162 <tx_notify+0x6>
}
   2a1a0:	bd70      	pop	{r4, r5, r6, pc}

0002a1a2 <tx_complete_work>:
{
   2a1a2:	b508      	push	{r3, lr}
	tx_notify(conn);
   2a1a4:	3828      	subs	r0, #40	; 0x28
   2a1a6:	f7ff ffd9 	bl	2a15c <tx_notify>
}
   2a1aa:	bd08      	pop	{r3, pc}

0002a1ac <conn_tx_destroy>:
{
   2a1ac:	b570      	push	{r4, r5, r6, lr}
   2a1ae:	4604      	mov	r4, r0
   2a1b0:	4608      	mov	r0, r1
	bt_conn_tx_cb_t cb = tx->cb;
   2a1b2:	684d      	ldr	r5, [r1, #4]
	void *user_data = tx->user_data;
   2a1b4:	688e      	ldr	r6, [r1, #8]
	tx_free(tx);
   2a1b6:	f7ef f939 	bl	1942c <tx_free>
	cb(conn, user_data, -ESHUTDOWN);
   2a1ba:	f06f 026d 	mvn.w	r2, #109	; 0x6d
   2a1be:	4631      	mov	r1, r6
   2a1c0:	4620      	mov	r0, r4
   2a1c2:	47a8      	blx	r5
}
   2a1c4:	bd70      	pop	{r4, r5, r6, pc}

0002a1c6 <atomic_test_and_clear_bit>:
{
   2a1c6:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   2a1c8:	f001 021f 	and.w	r2, r1, #31
   2a1cc:	2301      	movs	r3, #1
   2a1ce:	4093      	lsls	r3, r2
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2a1d0:	0949      	lsrs	r1, r1, #5
   2a1d2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   2a1d6:	43d9      	mvns	r1, r3
   2a1d8:	f3bf 8f5b 	dmb	ish
   2a1dc:	e850 2f00 	ldrex	r2, [r0]
   2a1e0:	ea02 0c01 	and.w	ip, r2, r1
   2a1e4:	e840 ce00 	strex	lr, ip, [r0]
   2a1e8:	f1be 0f00 	cmp.w	lr, #0
   2a1ec:	d1f6      	bne.n	2a1dc <atomic_test_and_clear_bit+0x16>
   2a1ee:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   2a1f2:	4213      	tst	r3, r2
}
   2a1f4:	bf14      	ite	ne
   2a1f6:	2001      	movne	r0, #1
   2a1f8:	2000      	moveq	r0, #0
   2a1fa:	f85d fb04 	ldr.w	pc, [sp], #4

0002a1fe <atomic_test_bit>:
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2a1fe:	094b      	lsrs	r3, r1, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2a200:	f3bf 8f5b 	dmb	ish
   2a204:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
   2a208:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2a20c:	f001 011f 	and.w	r1, r1, #31
   2a210:	4108      	asrs	r0, r1
}
   2a212:	f000 0001 	and.w	r0, r0, #1
   2a216:	4770      	bx	lr

0002a218 <process_unack_tx>:
{
   2a218:	b510      	push	{r4, lr}
   2a21a:	4604      	mov	r4, r0
   2a21c:	e028      	b.n	2a270 <process_unack_tx+0x58>
			conn->pending_no_cb--;
   2a21e:	3a01      	subs	r2, #1
   2a220:	61e2      	str	r2, [r4, #28]
	__asm__ volatile(
   2a222:	f383 8811 	msr	BASEPRI, r3
   2a226:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   2a22a:	4620      	mov	r0, r4
   2a22c:	f7ef f922 	bl	19474 <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   2a230:	f7fc f9c0 	bl	265b4 <z_impl_k_sem_give>
			continue;
   2a234:	e01c      	b.n	2a270 <process_unack_tx+0x58>
   2a236:	f383 8811 	msr	BASEPRI, r3
   2a23a:	f3bf 8f6f 	isb	sy
		if (!node) {
   2a23e:	b361      	cbz	r1, 2a29a <process_unack_tx+0x82>
	__asm__ volatile(
   2a240:	f04f 0240 	mov.w	r2, #64	; 0x40
   2a244:	f3ef 8311 	mrs	r3, BASEPRI
   2a248:	f382 8812 	msr	BASEPRI_MAX, r2
   2a24c:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   2a250:	68ca      	ldr	r2, [r1, #12]
   2a252:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   2a254:	2200      	movs	r2, #0
   2a256:	60ca      	str	r2, [r1, #12]
	__asm__ volatile(
   2a258:	f383 8811 	msr	BASEPRI, r3
   2a25c:	f3bf 8f6f 	isb	sy
		conn_tx_destroy(conn, tx);
   2a260:	4620      	mov	r0, r4
   2a262:	f7ff ffa3 	bl	2a1ac <conn_tx_destroy>
		k_sem_give(bt_conn_get_pkts(conn));
   2a266:	4620      	mov	r0, r4
   2a268:	f7ef f904 	bl	19474 <bt_conn_get_pkts>
   2a26c:	f7fc f9a2 	bl	265b4 <z_impl_k_sem_give>
	__asm__ volatile(
   2a270:	f04f 0240 	mov.w	r2, #64	; 0x40
   2a274:	f3ef 8311 	mrs	r3, BASEPRI
   2a278:	f382 8812 	msr	BASEPRI_MAX, r2
   2a27c:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   2a280:	69e2      	ldr	r2, [r4, #28]
   2a282:	2a00      	cmp	r2, #0
   2a284:	d1cb      	bne.n	2a21e <process_unack_tx+0x6>
	return list->head;
   2a286:	6961      	ldr	r1, [r4, #20]
Z_GENLIST_GET(slist, snode)
   2a288:	2900      	cmp	r1, #0
   2a28a:	d0d4      	beq.n	2a236 <process_unack_tx+0x1e>
	return node->next;
   2a28c:	680a      	ldr	r2, [r1, #0]
	list->head = node;
   2a28e:	6162      	str	r2, [r4, #20]
	return list->tail;
   2a290:	69a0      	ldr	r0, [r4, #24]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2a292:	4281      	cmp	r1, r0
   2a294:	d1cf      	bne.n	2a236 <process_unack_tx+0x1e>
	list->tail = node;
   2a296:	61a2      	str	r2, [r4, #24]
}
   2a298:	e7cd      	b.n	2a236 <process_unack_tx+0x1e>
}
   2a29a:	bd10      	pop	{r4, pc}

0002a29c <bt_conn_reset_rx_state>:
{
   2a29c:	b510      	push	{r4, lr}
   2a29e:	4604      	mov	r4, r0
	if (!conn->rx) {
   2a2a0:	6900      	ldr	r0, [r0, #16]
   2a2a2:	b118      	cbz	r0, 2a2ac <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   2a2a4:	f002 f9a5 	bl	2c5f2 <net_buf_unref>
	conn->rx = NULL;
   2a2a8:	2300      	movs	r3, #0
   2a2aa:	6123      	str	r3, [r4, #16]
}
   2a2ac:	bd10      	pop	{r4, pc}

0002a2ae <bt_conn_recv>:
{
   2a2ae:	b570      	push	{r4, r5, r6, lr}
   2a2b0:	4604      	mov	r4, r0
   2a2b2:	460d      	mov	r5, r1
   2a2b4:	4616      	mov	r6, r2
	tx_notify(conn);
   2a2b6:	f7ff ff51 	bl	2a15c <tx_notify>
		bt_acl_recv(conn, buf, flags);
   2a2ba:	4632      	mov	r2, r6
   2a2bc:	4629      	mov	r1, r5
   2a2be:	4620      	mov	r0, r4
   2a2c0:	f7ef f918 	bl	194f4 <bt_acl_recv>
}
   2a2c4:	bd70      	pop	{r4, r5, r6, pc}

0002a2c6 <bt_conn_ref>:
   2a2c6:	f3bf 8f5b 	dmb	ish
   2a2ca:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   2a2ce:	f3bf 8f5b 	dmb	ish
		if (!old) {
   2a2d2:	b1eb      	cbz	r3, 2a310 <bt_conn_ref+0x4a>
{
   2a2d4:	b500      	push	{lr}
   2a2d6:	e006      	b.n	2a2e6 <bt_conn_ref+0x20>
   2a2d8:	f3bf 8f5b 	dmb	ish
   2a2dc:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   2a2e0:	f3bf 8f5b 	dmb	ish
		if (!old) {
   2a2e4:	b193      	cbz	r3, 2a30c <bt_conn_ref+0x46>
   2a2e6:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
	} while (!atomic_cas(&conn->ref, old, old + 1));
   2a2ea:	1c59      	adds	r1, r3, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2a2ec:	f3bf 8f5b 	dmb	ish
   2a2f0:	e852 cf00 	ldrex	ip, [r2]
   2a2f4:	459c      	cmp	ip, r3
   2a2f6:	d104      	bne.n	2a302 <bt_conn_ref+0x3c>
   2a2f8:	e842 1e00 	strex	lr, r1, [r2]
   2a2fc:	f1be 0f00 	cmp.w	lr, #0
   2a300:	d1f6      	bne.n	2a2f0 <bt_conn_ref+0x2a>
   2a302:	f3bf 8f5b 	dmb	ish
   2a306:	d1e7      	bne.n	2a2d8 <bt_conn_ref+0x12>
}
   2a308:	f85d fb04 	ldr.w	pc, [sp], #4
			return NULL;
   2a30c:	2000      	movs	r0, #0
   2a30e:	e7fb      	b.n	2a308 <bt_conn_ref+0x42>
   2a310:	2000      	movs	r0, #0
}
   2a312:	4770      	bx	lr

0002a314 <bt_conn_unref>:
	old = atomic_dec(&conn->ref);
   2a314:	30b8      	adds	r0, #184	; 0xb8
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   2a316:	f3bf 8f5b 	dmb	ish
   2a31a:	e850 3f00 	ldrex	r3, [r0]
   2a31e:	3b01      	subs	r3, #1
   2a320:	e840 3200 	strex	r2, r3, [r0]
   2a324:	2a00      	cmp	r2, #0
   2a326:	d1f8      	bne.n	2a31a <bt_conn_unref+0x6>
   2a328:	f3bf 8f5b 	dmb	ish
}
   2a32c:	4770      	bx	lr

0002a32e <conn_lookup_handle>:
{
   2a32e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a330:	4606      	mov	r6, r0
   2a332:	460d      	mov	r5, r1
   2a334:	4617      	mov	r7, r2
	for (i = 0; i < size; i++) {
   2a336:	2400      	movs	r4, #0
   2a338:	e003      	b.n	2a342 <conn_lookup_handle+0x14>
			bt_conn_unref(conn);
   2a33a:	4660      	mov	r0, ip
   2a33c:	f7ff ffea 	bl	2a314 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   2a340:	3401      	adds	r4, #1
   2a342:	42ac      	cmp	r4, r5
   2a344:	d21c      	bcs.n	2a380 <conn_lookup_handle+0x52>
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   2a346:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   2a34a:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   2a34e:	f7ff ffba 	bl	2a2c6 <bt_conn_ref>
		if (!conn) {
   2a352:	4684      	mov	ip, r0
   2a354:	2800      	cmp	r0, #0
   2a356:	d0f3      	beq.n	2a340 <conn_lookup_handle+0x12>
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   2a358:	7a83      	ldrb	r3, [r0, #10]
   2a35a:	2b01      	cmp	r3, #1
   2a35c:	d006      	beq.n	2a36c <conn_lookup_handle+0x3e>
   2a35e:	b25a      	sxtb	r2, r3
   2a360:	2a00      	cmp	r2, #0
   2a362:	d0ea      	beq.n	2a33a <conn_lookup_handle+0xc>
   2a364:	3b07      	subs	r3, #7
   2a366:	b2db      	uxtb	r3, r3
   2a368:	2b01      	cmp	r3, #1
   2a36a:	d8e6      	bhi.n	2a33a <conn_lookup_handle+0xc>
		if (conn->handle != handle) {
   2a36c:	f8bc 3000 	ldrh.w	r3, [ip]
   2a370:	42bb      	cmp	r3, r7
   2a372:	d101      	bne.n	2a378 <conn_lookup_handle+0x4a>
}
   2a374:	4660      	mov	r0, ip
   2a376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			bt_conn_unref(conn);
   2a378:	4660      	mov	r0, ip
   2a37a:	f7ff ffcb 	bl	2a314 <bt_conn_unref>
			continue;
   2a37e:	e7df      	b.n	2a340 <conn_lookup_handle+0x12>
	return NULL;
   2a380:	f04f 0c00 	mov.w	ip, #0
   2a384:	e7f6      	b.n	2a374 <conn_lookup_handle+0x46>

0002a386 <bt_conn_connected>:
{
   2a386:	b510      	push	{r4, lr}
   2a388:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   2a38a:	f7f0 f8a1 	bl	1a4d0 <bt_l2cap_connected>
	notify_connected(conn);
   2a38e:	4620      	mov	r0, r4
   2a390:	f7ee ffec 	bl	1936c <notify_connected>
}
   2a394:	bd10      	pop	{r4, pc}

0002a396 <bt_conn_get_security>:
}
   2a396:	2001      	movs	r0, #1
   2a398:	4770      	bx	lr

0002a39a <bt_conn_add_le>:
{
   2a39a:	b570      	push	{r4, r5, r6, lr}
   2a39c:	4606      	mov	r6, r0
   2a39e:	460d      	mov	r5, r1
	struct bt_conn *conn = acl_conn_new();
   2a3a0:	f7ef f8a0 	bl	194e4 <acl_conn_new>
	if (!conn) {
   2a3a4:	4604      	mov	r4, r0
   2a3a6:	b168      	cbz	r0, 2a3c4 <bt_conn_add_le+0x2a>
	conn->id = id;
   2a3a8:	7206      	strb	r6, [r0, #8]
	memcpy(dst, src, sizeof(*dst));
   2a3aa:	2207      	movs	r2, #7
   2a3ac:	4629      	mov	r1, r5
   2a3ae:	3088      	adds	r0, #136	; 0x88
   2a3b0:	f7ff fbff 	bl	29bb2 <memcpy>
	conn->type = BT_CONN_TYPE_LE;
   2a3b4:	2301      	movs	r3, #1
   2a3b6:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   2a3b8:	2318      	movs	r3, #24
   2a3ba:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
   2a3be:	2328      	movs	r3, #40	; 0x28
   2a3c0:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
}
   2a3c4:	4620      	mov	r0, r4
   2a3c6:	bd70      	pop	{r4, r5, r6, pc}

0002a3c8 <bt_conn_is_peer_addr_le>:
{
   2a3c8:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   2a3ca:	7a03      	ldrb	r3, [r0, #8]
   2a3cc:	428b      	cmp	r3, r1
   2a3ce:	d001      	beq.n	2a3d4 <bt_conn_is_peer_addr_le+0xc>
		return false;
   2a3d0:	2000      	movs	r0, #0
}
   2a3d2:	bd38      	pop	{r3, r4, r5, pc}
   2a3d4:	4604      	mov	r4, r0
   2a3d6:	4615      	mov	r5, r2
	return memcmp(a, b, sizeof(*a));
   2a3d8:	2207      	movs	r2, #7
   2a3da:	f100 0188 	add.w	r1, r0, #136	; 0x88
   2a3de:	4628      	mov	r0, r5
   2a3e0:	f7ff fbd5 	bl	29b8e <memcmp>
	if (bt_addr_le_eq(peer, &conn->le.dst)) {
   2a3e4:	b1a8      	cbz	r0, 2a412 <bt_conn_is_peer_addr_le+0x4a>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   2a3e6:	78e3      	ldrb	r3, [r4, #3]
   2a3e8:	b14b      	cbz	r3, 2a3fe <bt_conn_is_peer_addr_le+0x36>
   2a3ea:	2207      	movs	r2, #7
   2a3ec:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   2a3f0:	4628      	mov	r0, r5
   2a3f2:	f7ff fbcc 	bl	29b8e <memcmp>
	return bt_addr_le_cmp(a, b) == 0;
   2a3f6:	fab0 f080 	clz	r0, r0
   2a3fa:	0940      	lsrs	r0, r0, #5
	return bt_addr_le_eq(peer, &conn->le.init_addr);
   2a3fc:	e7e9      	b.n	2a3d2 <bt_conn_is_peer_addr_le+0xa>
	return memcmp(a, b, sizeof(*a));
   2a3fe:	2207      	movs	r2, #7
   2a400:	f104 0196 	add.w	r1, r4, #150	; 0x96
   2a404:	4628      	mov	r0, r5
   2a406:	f7ff fbc2 	bl	29b8e <memcmp>
	return bt_addr_le_cmp(a, b) == 0;
   2a40a:	fab0 f080 	clz	r0, r0
   2a40e:	0940      	lsrs	r0, r0, #5
		return bt_addr_le_eq(peer, &conn->le.resp_addr);
   2a410:	e7df      	b.n	2a3d2 <bt_conn_is_peer_addr_le+0xa>
		return true;
   2a412:	2001      	movs	r0, #1
   2a414:	e7dd      	b.n	2a3d2 <bt_conn_is_peer_addr_le+0xa>

0002a416 <bt_conn_get_dst>:
}
   2a416:	3088      	adds	r0, #136	; 0x88
   2a418:	4770      	bx	lr

0002a41a <bt_conn_le_conn_update>:
{
   2a41a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a41c:	4606      	mov	r6, r0
   2a41e:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   2a420:	210e      	movs	r1, #14
   2a422:	f242 0013 	movw	r0, #8211	; 0x2013
   2a426:	f7ed f853 	bl	174d0 <bt_hci_cmd_create>
	if (!buf) {
   2a42a:	b1d0      	cbz	r0, 2a462 <bt_conn_le_conn_update+0x48>
   2a42c:	4607      	mov	r7, r0
   2a42e:	210e      	movs	r1, #14
   2a430:	300c      	adds	r0, #12
   2a432:	f002 f925 	bl	2c680 <net_buf_simple_add>
   2a436:	4604      	mov	r4, r0
	(void)memset(conn_update, 0, sizeof(*conn_update));
   2a438:	220e      	movs	r2, #14
   2a43a:	2100      	movs	r1, #0
   2a43c:	f7ff fbe8 	bl	29c10 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   2a440:	8833      	ldrh	r3, [r6, #0]
   2a442:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   2a444:	882b      	ldrh	r3, [r5, #0]
   2a446:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   2a448:	886b      	ldrh	r3, [r5, #2]
   2a44a:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   2a44c:	88ab      	ldrh	r3, [r5, #4]
   2a44e:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   2a450:	88eb      	ldrh	r3, [r5, #6]
   2a452:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2a454:	2200      	movs	r2, #0
   2a456:	4639      	mov	r1, r7
   2a458:	f242 0013 	movw	r0, #8211	; 0x2013
   2a45c:	f7ed f876 	bl	1754c <bt_hci_cmd_send_sync>
}
   2a460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   2a462:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2a466:	e7fb      	b.n	2a460 <bt_conn_le_conn_update+0x46>

0002a468 <l2cap_connected>:
}
   2a468:	4770      	bx	lr

0002a46a <l2cap_disconnected>:
}
   2a46a:	4770      	bx	lr

0002a46c <l2cap_chan_recv>:
{
   2a46c:	b510      	push	{r4, lr}
   2a46e:	460c      	mov	r4, r1
	chan->ops->recv(chan, buf);
   2a470:	6843      	ldr	r3, [r0, #4]
   2a472:	695b      	ldr	r3, [r3, #20]
   2a474:	4798      	blx	r3
	net_buf_unref(buf);
   2a476:	4620      	mov	r0, r4
   2a478:	f002 f8bb 	bl	2c5f2 <net_buf_unref>
}
   2a47c:	bd10      	pop	{r4, pc}

0002a47e <bt_l2cap_chan_del>:
{
   2a47e:	b538      	push	{r3, r4, r5, lr}
   2a480:	4604      	mov	r4, r0
	const struct bt_l2cap_chan_ops *ops = chan->ops;
   2a482:	6845      	ldr	r5, [r0, #4]
	if (!chan->conn) {
   2a484:	6803      	ldr	r3, [r0, #0]
   2a486:	b123      	cbz	r3, 2a492 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   2a488:	686b      	ldr	r3, [r5, #4]
   2a48a:	b103      	cbz	r3, 2a48e <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   2a48c:	4798      	blx	r3
	chan->conn = NULL;
   2a48e:	2300      	movs	r3, #0
   2a490:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   2a492:	68e3      	ldr	r3, [r4, #12]
   2a494:	b10b      	cbz	r3, 2a49a <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   2a496:	4620      	mov	r0, r4
   2a498:	4798      	blx	r3
	if (ops->released) {
   2a49a:	6a2b      	ldr	r3, [r5, #32]
   2a49c:	b10b      	cbz	r3, 2a4a2 <bt_l2cap_chan_del+0x24>
		ops->released(chan);
   2a49e:	4620      	mov	r0, r4
   2a4a0:	4798      	blx	r3
}
   2a4a2:	bd38      	pop	{r3, r4, r5, pc}

0002a4a4 <bt_l2cap_chan_add>:
{
   2a4a4:	b410      	push	{r4}
	sys_slist_append(&conn->channels, &chan->node);
   2a4a6:	f101 0308 	add.w	r3, r1, #8
	parent->next = child;
   2a4aa:	2400      	movs	r4, #0
   2a4ac:	608c      	str	r4, [r1, #8]
	return list->tail;
   2a4ae:	6d44      	ldr	r4, [r0, #84]	; 0x54
Z_GENLIST_APPEND(slist, snode)
   2a4b0:	b12c      	cbz	r4, 2a4be <bt_l2cap_chan_add+0x1a>
	parent->next = child;
   2a4b2:	6023      	str	r3, [r4, #0]
	list->tail = node;
   2a4b4:	6543      	str	r3, [r0, #84]	; 0x54
	chan->conn = conn;
   2a4b6:	6008      	str	r0, [r1, #0]
	chan->destroy = destroy;
   2a4b8:	60ca      	str	r2, [r1, #12]
}
   2a4ba:	bc10      	pop	{r4}
   2a4bc:	4770      	bx	lr
   2a4be:	6543      	str	r3, [r0, #84]	; 0x54
	list->head = node;
   2a4c0:	6503      	str	r3, [r0, #80]	; 0x50
}
   2a4c2:	e7f8      	b.n	2a4b6 <bt_l2cap_chan_add+0x12>

0002a4c4 <bt_l2cap_disconnected>:
{
   2a4c4:	b510      	push	{r4, lr}
	return list->head;
   2a4c6:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2a4c8:	b138      	cbz	r0, 2a4da <bt_l2cap_disconnected+0x16>
   2a4ca:	3808      	subs	r0, #8
Z_GENLIST_PEEK_NEXT(slist, snode)
   2a4cc:	f110 0408 	adds.w	r4, r0, #8
   2a4d0:	d008      	beq.n	2a4e4 <bt_l2cap_disconnected+0x20>
	return node->next;
   2a4d2:	6884      	ldr	r4, [r0, #8]
   2a4d4:	b134      	cbz	r4, 2a4e4 <bt_l2cap_disconnected+0x20>
   2a4d6:	3c08      	subs	r4, #8
   2a4d8:	e004      	b.n	2a4e4 <bt_l2cap_disconnected+0x20>
   2a4da:	4604      	mov	r4, r0
   2a4dc:	e002      	b.n	2a4e4 <bt_l2cap_disconnected+0x20>
   2a4de:	4623      	mov	r3, r4
   2a4e0:	4620      	mov	r0, r4
   2a4e2:	461c      	mov	r4, r3
   2a4e4:	b140      	cbz	r0, 2a4f8 <bt_l2cap_disconnected+0x34>
		bt_l2cap_chan_del(chan);
   2a4e6:	f7ff ffca 	bl	2a47e <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2a4ea:	2c00      	cmp	r4, #0
   2a4ec:	d0f7      	beq.n	2a4de <bt_l2cap_disconnected+0x1a>
   2a4ee:	68a3      	ldr	r3, [r4, #8]
   2a4f0:	2b00      	cmp	r3, #0
   2a4f2:	d0f5      	beq.n	2a4e0 <bt_l2cap_disconnected+0x1c>
   2a4f4:	3b08      	subs	r3, #8
   2a4f6:	e7f3      	b.n	2a4e0 <bt_l2cap_disconnected+0x1c>
}
   2a4f8:	bd10      	pop	{r4, pc}

0002a4fa <bt_l2cap_create_pdu_timeout>:
{
   2a4fa:	b508      	push	{r3, lr}
	return bt_conn_create_pdu_timeout(pool,
   2a4fc:	3104      	adds	r1, #4
   2a4fe:	f7ef fbbb 	bl	19c78 <bt_conn_create_pdu_timeout>
}
   2a502:	bd08      	pop	{r3, pc}

0002a504 <bt_l2cap_send_cb>:
{
   2a504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a506:	4605      	mov	r5, r0
   2a508:	460f      	mov	r7, r1
   2a50a:	4614      	mov	r4, r2
   2a50c:	461e      	mov	r6, r3
	return net_buf_simple_push(&buf->b, len);
   2a50e:	2104      	movs	r1, #4
   2a510:	f102 000c 	add.w	r0, r2, #12
   2a514:	f002 f8ce 	bl	2c6b4 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2a518:	8a23      	ldrh	r3, [r4, #16]
   2a51a:	3b04      	subs	r3, #4
   2a51c:	8003      	strh	r3, [r0, #0]
	hdr->cid = sys_cpu_to_le16(cid);
   2a51e:	8047      	strh	r7, [r0, #2]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   2a520:	9b06      	ldr	r3, [sp, #24]
   2a522:	4632      	mov	r2, r6
   2a524:	4621      	mov	r1, r4
   2a526:	4628      	mov	r0, r5
   2a528:	f7ef f93e 	bl	197a8 <bt_conn_send_cb>
}
   2a52c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002a52e <l2cap_send>:
{
   2a52e:	b510      	push	{r4, lr}
   2a530:	b082      	sub	sp, #8
   2a532:	4614      	mov	r4, r2
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   2a534:	2300      	movs	r3, #0
   2a536:	9300      	str	r3, [sp, #0]
   2a538:	f7ff ffe4 	bl	2a504 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   2a53c:	b908      	cbnz	r0, 2a542 <l2cap_send+0x14>
}
   2a53e:	b002      	add	sp, #8
   2a540:	bd10      	pop	{r4, pc}
		net_buf_unref(buf);
   2a542:	4620      	mov	r0, r4
   2a544:	f002 f855 	bl	2c5f2 <net_buf_unref>
}
   2a548:	e7f9      	b.n	2a53e <l2cap_send+0x10>

0002a54a <l2cap_send_reject>:
{
   2a54a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2a54e:	4606      	mov	r6, r0
   2a550:	4690      	mov	r8, r2
   2a552:	461c      	mov	r4, r3
   2a554:	f89d 7020 	ldrb.w	r7, [sp, #32]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   2a558:	1cbb      	adds	r3, r7, #2
   2a55a:	460a      	mov	r2, r1
   2a55c:	2101      	movs	r1, #1
   2a55e:	2000      	movs	r0, #0
   2a560:	f7ef fff0 	bl	1a544 <l2cap_create_le_sig_pdu>
	if (!buf) {
   2a564:	b198      	cbz	r0, 2a58e <l2cap_send_reject+0x44>
   2a566:	4605      	mov	r5, r0
	return net_buf_simple_add(&buf->b, len);
   2a568:	f100 090c 	add.w	r9, r0, #12
   2a56c:	2102      	movs	r1, #2
   2a56e:	4648      	mov	r0, r9
   2a570:	f002 f886 	bl	2c680 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   2a574:	f8a0 8000 	strh.w	r8, [r0]
	if (data) {
   2a578:	b124      	cbz	r4, 2a584 <l2cap_send_reject+0x3a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   2a57a:	463a      	mov	r2, r7
   2a57c:	4621      	mov	r1, r4
   2a57e:	4648      	mov	r0, r9
   2a580:	f002 f884 	bl	2c68c <net_buf_simple_add_mem>
	l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
   2a584:	462a      	mov	r2, r5
   2a586:	2105      	movs	r1, #5
   2a588:	4630      	mov	r0, r6
   2a58a:	f7ff ffd0 	bl	2a52e <l2cap_send>
}
   2a58e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002a592 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   2a592:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2a594:	b110      	cbz	r0, 2a59c <bt_l2cap_le_lookup_rx_cid+0xa>
   2a596:	3808      	subs	r0, #8
   2a598:	e000      	b.n	2a59c <bt_l2cap_le_lookup_rx_cid+0xa>
   2a59a:	4618      	mov	r0, r3
   2a59c:	b150      	cbz	r0, 2a5b4 <bt_l2cap_le_lookup_rx_cid+0x22>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   2a59e:	8a83      	ldrh	r3, [r0, #20]
   2a5a0:	428b      	cmp	r3, r1
   2a5a2:	d007      	beq.n	2a5b4 <bt_l2cap_le_lookup_rx_cid+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2a5a4:	f110 0308 	adds.w	r3, r0, #8
   2a5a8:	d0f7      	beq.n	2a59a <bt_l2cap_le_lookup_rx_cid+0x8>
	return node->next;
   2a5aa:	6880      	ldr	r0, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2a5ac:	2800      	cmp	r0, #0
   2a5ae:	d0f5      	beq.n	2a59c <bt_l2cap_le_lookup_rx_cid+0xa>
   2a5b0:	3808      	subs	r0, #8
   2a5b2:	e7f3      	b.n	2a59c <bt_l2cap_le_lookup_rx_cid+0xa>
}
   2a5b4:	4770      	bx	lr

0002a5b6 <bt_l2cap_update_conn_param>:
{
   2a5b6:	b570      	push	{r4, r5, r6, lr}
   2a5b8:	b082      	sub	sp, #8
   2a5ba:	4605      	mov	r5, r0
   2a5bc:	460c      	mov	r4, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   2a5be:	f7ef fe9b 	bl	1a2f8 <get_ident>
   2a5c2:	4602      	mov	r2, r0
   2a5c4:	2308      	movs	r3, #8
   2a5c6:	2112      	movs	r1, #18
   2a5c8:	2000      	movs	r0, #0
   2a5ca:	f7ef ffbb 	bl	1a544 <l2cap_create_le_sig_pdu>
	if (!buf) {
   2a5ce:	b1e0      	cbz	r0, 2a60a <bt_l2cap_update_conn_param+0x54>
   2a5d0:	4606      	mov	r6, r0
	return net_buf_simple_add(&buf->b, len);
   2a5d2:	2108      	movs	r1, #8
   2a5d4:	300c      	adds	r0, #12
   2a5d6:	f002 f853 	bl	2c680 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   2a5da:	8823      	ldrh	r3, [r4, #0]
   2a5dc:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   2a5de:	8863      	ldrh	r3, [r4, #2]
   2a5e0:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   2a5e2:	88a3      	ldrh	r3, [r4, #4]
   2a5e4:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   2a5e6:	88e3      	ldrh	r3, [r4, #6]
   2a5e8:	80c3      	strh	r3, [r0, #6]
   2a5ea:	2300      	movs	r3, #0
   2a5ec:	9300      	str	r3, [sp, #0]
   2a5ee:	4632      	mov	r2, r6
   2a5f0:	2105      	movs	r1, #5
   2a5f2:	4628      	mov	r0, r5
   2a5f4:	f7ff ff86 	bl	2a504 <bt_l2cap_send_cb>
	if (err) {
   2a5f8:	4604      	mov	r4, r0
   2a5fa:	b910      	cbnz	r0, 2a602 <bt_l2cap_update_conn_param+0x4c>
}
   2a5fc:	4620      	mov	r0, r4
   2a5fe:	b002      	add	sp, #8
   2a600:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
   2a602:	4630      	mov	r0, r6
   2a604:	f001 fff5 	bl	2c5f2 <net_buf_unref>
		return err;
   2a608:	e7f8      	b.n	2a5fc <bt_l2cap_update_conn_param+0x46>
		return -ENOMEM;
   2a60a:	f06f 040b 	mvn.w	r4, #11
   2a60e:	e7f5      	b.n	2a5fc <bt_l2cap_update_conn_param+0x46>

0002a610 <bt_l2cap_init>:
		(void)memset(&l2cap_tx_meta_data_storage[i], 0,
					sizeof(l2cap_tx_meta_data_storage[i]));
		k_fifo_put(&free_l2cap_tx_meta_data, &l2cap_tx_meta_data_storage[i]);
	}
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}
   2a610:	4770      	bx	lr

0002a612 <sys_slist_remove>:
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   2a612:	460b      	mov	r3, r1
   2a614:	b139      	cbz	r1, 2a626 <sys_slist_remove+0x14>
	return node->next;
   2a616:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
   2a618:	6019      	str	r1, [r3, #0]
	return list->tail;
   2a61a:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   2a61c:	428a      	cmp	r2, r1
   2a61e:	d009      	beq.n	2a634 <sys_slist_remove+0x22>
	parent->next = child;
   2a620:	2300      	movs	r3, #0
   2a622:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2a624:	4770      	bx	lr
	return node->next;
   2a626:	6813      	ldr	r3, [r2, #0]
	list->head = node;
   2a628:	6003      	str	r3, [r0, #0]
	return list->tail;
   2a62a:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   2a62c:	428a      	cmp	r2, r1
   2a62e:	d1f7      	bne.n	2a620 <sys_slist_remove+0xe>
	list->tail = node;
   2a630:	6043      	str	r3, [r0, #4]
}
   2a632:	e7f5      	b.n	2a620 <sys_slist_remove+0xe>
	list->tail = node;
   2a634:	6043      	str	r3, [r0, #4]
}
   2a636:	e7f3      	b.n	2a620 <sys_slist_remove+0xe>

0002a638 <sys_slist_find_and_remove>:
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2a638:	b508      	push	{r3, lr}
   2a63a:	460a      	mov	r2, r1
	return list->head;
   2a63c:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2a63e:	2100      	movs	r1, #0
   2a640:	e001      	b.n	2a646 <sys_slist_find_and_remove+0xe>
   2a642:	4619      	mov	r1, r3
   2a644:	681b      	ldr	r3, [r3, #0]
   2a646:	b12b      	cbz	r3, 2a654 <sys_slist_find_and_remove+0x1c>
   2a648:	4293      	cmp	r3, r2
   2a64a:	d1fa      	bne.n	2a642 <sys_slist_find_and_remove+0xa>
   2a64c:	f7ff ffe1 	bl	2a612 <sys_slist_remove>
   2a650:	2001      	movs	r0, #1
   2a652:	e000      	b.n	2a656 <sys_slist_find_and_remove+0x1e>
   2a654:	2000      	movs	r0, #0
   2a656:	bd08      	pop	{r3, pc}

0002a658 <get_first_req_matching_chan>:
{
   2a658:	4603      	mov	r3, r0
	return list->head;
   2a65a:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   2a65c:	b120      	cbz	r0, 2a668 <get_first_req_matching_chan+0x10>
	return node->next;
   2a65e:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   2a660:	601a      	str	r2, [r3, #0]
	return list->tail;
   2a662:	6859      	ldr	r1, [r3, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2a664:	4288      	cmp	r0, r1
   2a666:	d000      	beq.n	2a66a <get_first_req_matching_chan+0x12>
}
   2a668:	4770      	bx	lr
	list->tail = node;
   2a66a:	605a      	str	r2, [r3, #4]
		return ATT_REQ(node);
   2a66c:	e7fc      	b.n	2a668 <get_first_req_matching_chan+0x10>

0002a66e <range_is_valid>:
	if (!start || !end) {
   2a66e:	b120      	cbz	r0, 2a67a <range_is_valid+0xc>
   2a670:	b119      	cbz	r1, 2a67a <range_is_valid+0xc>
	if (start > end) {
   2a672:	4288      	cmp	r0, r1
   2a674:	d806      	bhi.n	2a684 <range_is_valid+0x16>
	return true;
   2a676:	2001      	movs	r0, #1
}
   2a678:	4770      	bx	lr
		if (err) {
   2a67a:	b10a      	cbz	r2, 2a680 <range_is_valid+0x12>
			*err = 0U;
   2a67c:	2300      	movs	r3, #0
   2a67e:	8013      	strh	r3, [r2, #0]
		return false;
   2a680:	2000      	movs	r0, #0
   2a682:	4770      	bx	lr
		if (err) {
   2a684:	b102      	cbz	r2, 2a688 <range_is_valid+0x1a>
			*err = start;
   2a686:	8010      	strh	r0, [r2, #0]
		return false;
   2a688:	2000      	movs	r0, #0
   2a68a:	4770      	bx	lr

0002a68c <err_to_att>:
	if (err < 0 && err >= -0xff) {
   2a68c:	f110 0fff 	cmn.w	r0, #255	; 0xff
   2a690:	d201      	bcs.n	2a696 <err_to_att+0xa>
	return BT_ATT_ERR_UNLIKELY;
   2a692:	200e      	movs	r0, #14
}
   2a694:	4770      	bx	lr
		return -err;
   2a696:	4240      	negs	r0, r0
   2a698:	b2c0      	uxtb	r0, r0
   2a69a:	4770      	bx	lr

0002a69c <attr_read_type_cb>:
{
   2a69c:	b410      	push	{r4}
	if (!data->rsp->len) {
   2a69e:	68d4      	ldr	r4, [r2, #12]
   2a6a0:	7823      	ldrb	r3, [r4, #0]
   2a6a2:	b923      	cbnz	r3, 2a6ae <attr_read_type_cb+0x12>
		data->rsp->len = read + sizeof(*data->item);
   2a6a4:	3102      	adds	r1, #2
   2a6a6:	7021      	strb	r1, [r4, #0]
	return true;
   2a6a8:	2001      	movs	r0, #1
}
   2a6aa:	bc10      	pop	{r4}
   2a6ac:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   2a6ae:	3102      	adds	r1, #2
   2a6b0:	428b      	cmp	r3, r1
   2a6b2:	d005      	beq.n	2a6c0 <attr_read_type_cb+0x24>
		frag->len -= sizeof(*data->item);
   2a6b4:	8a03      	ldrh	r3, [r0, #16]
   2a6b6:	3b02      	subs	r3, #2
   2a6b8:	8203      	strh	r3, [r0, #16]
		data->item = NULL;
   2a6ba:	2000      	movs	r0, #0
   2a6bc:	6110      	str	r0, [r2, #16]
		return false;
   2a6be:	e7f4      	b.n	2a6aa <attr_read_type_cb+0xe>
	return true;
   2a6c0:	2001      	movs	r0, #1
   2a6c2:	e7f2      	b.n	2a6aa <attr_read_type_cb+0xe>

0002a6c4 <attr_read_group_cb>:
	if (!data->rsp->len) {
   2a6c4:	68d0      	ldr	r0, [r2, #12]
   2a6c6:	7803      	ldrb	r3, [r0, #0]
   2a6c8:	b91b      	cbnz	r3, 2a6d2 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   2a6ca:	3104      	adds	r1, #4
   2a6cc:	7001      	strb	r1, [r0, #0]
	return true;
   2a6ce:	2001      	movs	r0, #1
   2a6d0:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   2a6d2:	3104      	adds	r1, #4
   2a6d4:	428b      	cmp	r3, r1
   2a6d6:	d006      	beq.n	2a6e6 <attr_read_group_cb+0x22>
		data->buf->len -= sizeof(*data->group);
   2a6d8:	6891      	ldr	r1, [r2, #8]
   2a6da:	8a0b      	ldrh	r3, [r1, #16]
   2a6dc:	3b04      	subs	r3, #4
   2a6de:	820b      	strh	r3, [r1, #16]
		data->group = NULL;
   2a6e0:	2000      	movs	r0, #0
   2a6e2:	6110      	str	r0, [r2, #16]
		return false;
   2a6e4:	4770      	bx	lr
	return true;
   2a6e6:	2001      	movs	r0, #1
}
   2a6e8:	4770      	bx	lr

0002a6ea <att_prepare_write_req>:
}
   2a6ea:	2006      	movs	r0, #6
   2a6ec:	4770      	bx	lr

0002a6ee <att_exec_write_req>:
}
   2a6ee:	2006      	movs	r0, #6
   2a6f0:	4770      	bx	lr

0002a6f2 <att_chan_attach>:
{
   2a6f2:	b538      	push	{r3, r4, r5, lr}
   2a6f4:	4604      	mov	r4, r0
   2a6f6:	460d      	mov	r5, r1
	return list->head;
   2a6f8:	6a43      	ldr	r3, [r0, #36]	; 0x24
	if (sys_slist_is_empty(&att->chans)) {
   2a6fa:	b143      	cbz	r3, 2a70e <att_chan_attach+0x1c>
	sys_slist_prepend(&att->chans, &chan->node);
   2a6fc:	f105 03e0 	add.w	r3, r5, #224	; 0xe0
   2a700:	6a62      	ldr	r2, [r4, #36]	; 0x24
	parent->next = child;
   2a702:	f8c5 20e0 	str.w	r2, [r5, #224]	; 0xe0
	list->head = node;
   2a706:	6263      	str	r3, [r4, #36]	; 0x24
	return list->tail;
   2a708:	6aa2      	ldr	r2, [r4, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
   2a70a:	b122      	cbz	r2, 2a716 <att_chan_attach+0x24>
}
   2a70c:	bd38      	pop	{r3, r4, r5, pc}
		k_fifo_init(&att->tx_queue);
   2a70e:	300c      	adds	r0, #12
	z_impl_k_queue_init(queue);
   2a710:	f005 fea4 	bl	3045c <z_impl_k_queue_init>
}
   2a714:	e7f2      	b.n	2a6fc <att_chan_attach+0xa>
	list->tail = node;
   2a716:	62a3      	str	r3, [r4, #40]	; 0x28
}
   2a718:	e7f8      	b.n	2a70c <att_chan_attach+0x1a>

0002a71a <atomic_test_bit>:
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2a71a:	094b      	lsrs	r3, r1, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2a71c:	f3bf 8f5b 	dmb	ish
   2a720:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
   2a724:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2a728:	f001 011f 	and.w	r1, r1, #31
   2a72c:	4108      	asrs	r0, r1
}
   2a72e:	f000 0001 	and.w	r0, r0, #1
   2a732:	4770      	bx	lr

0002a734 <chan_unknown>:
{
   2a734:	b508      	push	{r3, lr}
	tx_meta_data_free(user_data);
   2a736:	4608      	mov	r0, r1
   2a738:	f7f0 fb74 	bl	1ae24 <tx_meta_data_free>
}
   2a73c:	bd08      	pop	{r3, pc}

0002a73e <chan_tx_complete>:
{
   2a73e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a742:	4605      	mov	r5, r0
   2a744:	4608      	mov	r0, r1
   2a746:	4614      	mov	r4, r2
	bt_gatt_complete_func_t func = data->func;
   2a748:	688e      	ldr	r6, [r1, #8]
	uint16_t attr_count = data->attr_count;
   2a74a:	888f      	ldrh	r7, [r1, #4]
	void *ud = data->user_data;
   2a74c:	f8d1 800c 	ldr.w	r8, [r1, #12]
	tx_meta_data_free(data);
   2a750:	f7f0 fb68 	bl	1ae24 <tx_meta_data_free>
	if (!err && func) {
   2a754:	b94c      	cbnz	r4, 2a76a <chan_tx_complete+0x2c>
   2a756:	b146      	cbz	r6, 2a76a <chan_tx_complete+0x2c>
		for (uint16_t i = 0; i < attr_count; i++) {
   2a758:	2400      	movs	r4, #0
   2a75a:	e004      	b.n	2a766 <chan_tx_complete+0x28>
			func(conn, ud);
   2a75c:	4641      	mov	r1, r8
   2a75e:	4628      	mov	r0, r5
   2a760:	47b0      	blx	r6
		for (uint16_t i = 0; i < attr_count; i++) {
   2a762:	3401      	adds	r4, #1
   2a764:	b2a4      	uxth	r4, r4
   2a766:	42a7      	cmp	r7, r4
   2a768:	d8f8      	bhi.n	2a75c <chan_tx_complete+0x1e>
}
   2a76a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002a76e <bt_att_chan_send>:
{
   2a76e:	b508      	push	{r3, lr}
	return chan_send(chan, buf);
   2a770:	f7f0 fb66 	bl	1ae40 <chan_send>
}
   2a774:	bd08      	pop	{r3, pc}

0002a776 <chan_req_send>:
{
   2a776:	b570      	push	{r4, r5, r6, lr}
   2a778:	4605      	mov	r5, r0
   2a77a:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2a77c:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   2a77e:	68a3      	ldr	r3, [r4, #8]
	size_t bytes = 0;
   2a780:	2200      	movs	r2, #0
	while (buf) {
   2a782:	e003      	b.n	2a78c <chan_req_send+0x16>
		bytes += buf->len;
   2a784:	f8b3 c010 	ldrh.w	ip, [r3, #16]
   2a788:	4462      	add	r2, ip
		buf = buf->frags;
   2a78a:	685b      	ldr	r3, [r3, #4]
	while (buf) {
   2a78c:	2b00      	cmp	r3, #0
   2a78e:	d1f9      	bne.n	2a784 <chan_req_send+0xe>
   2a790:	4291      	cmp	r1, r2
   2a792:	d30d      	bcc.n	2a7b0 <chan_req_send+0x3a>
	chan->req = req;
   2a794:	f8c5 4094 	str.w	r4, [r5, #148]	; 0x94
	buf = req->buf;
   2a798:	68a6      	ldr	r6, [r4, #8]
	req->buf = NULL;
   2a79a:	60a3      	str	r3, [r4, #8]
	err = bt_att_chan_send(chan, buf);
   2a79c:	4631      	mov	r1, r6
   2a79e:	4628      	mov	r0, r5
   2a7a0:	f7ff ffe5 	bl	2a76e <bt_att_chan_send>
	if (err) {
   2a7a4:	b118      	cbz	r0, 2a7ae <chan_req_send+0x38>
		req->buf = buf;
   2a7a6:	60a6      	str	r6, [r4, #8]
		chan->req = NULL;
   2a7a8:	2300      	movs	r3, #0
   2a7aa:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
}
   2a7ae:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   2a7b0:	f06f 0079 	mvn.w	r0, #121	; 0x79
   2a7b4:	e7fb      	b.n	2a7ae <chan_req_send+0x38>

0002a7b6 <bt_att_chan_req_send>:
{
   2a7b6:	b508      	push	{r3, lr}
	return chan_req_send(chan, req);
   2a7b8:	f7ff ffdd 	bl	2a776 <chan_req_send>
}
   2a7bc:	bd08      	pop	{r3, pc}

0002a7be <bt_att_status>:
{
   2a7be:	b570      	push	{r4, r5, r6, lr}
   2a7c0:	4604      	mov	r4, r0
   2a7c2:	4608      	mov	r0, r1
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   2a7c4:	2100      	movs	r1, #0
   2a7c6:	f7ff ffa8 	bl	2a71a <atomic_test_bit>
   2a7ca:	b130      	cbz	r0, 2a7da <bt_att_status+0x1c>
   2a7cc:	1f26      	subs	r6, r4, #4
	if (!chan->att) {
   2a7ce:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2a7d2:	b113      	cbz	r3, 2a7da <bt_att_status+0x1c>
	if (chan->req) {
   2a7d4:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   2a7d8:	b102      	cbz	r2, 2a7dc <bt_att_status+0x1e>
}
   2a7da:	bd70      	pop	{r4, r5, r6, pc}
	return list->head;
   2a7dc:	685d      	ldr	r5, [r3, #4]
Z_GENLIST_GET(slist, snode)
   2a7de:	2d00      	cmp	r5, #0
   2a7e0:	d0fb      	beq.n	2a7da <bt_att_status+0x1c>
	return node->next;
   2a7e2:	682a      	ldr	r2, [r5, #0]
	list->head = node;
   2a7e4:	605a      	str	r2, [r3, #4]
	return list->tail;
   2a7e6:	6899      	ldr	r1, [r3, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2a7e8:	42a9      	cmp	r1, r5
   2a7ea:	d00f      	beq.n	2a80c <bt_att_status+0x4e>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2a7ec:	4629      	mov	r1, r5
   2a7ee:	4630      	mov	r0, r6
   2a7f0:	f7ff ffe1 	bl	2a7b6 <bt_att_chan_req_send>
   2a7f4:	2800      	cmp	r0, #0
   2a7f6:	daf0      	bge.n	2a7da <bt_att_status+0x1c>
	sys_slist_prepend(&chan->att->reqs, node);
   2a7f8:	f854 3c04 	ldr.w	r3, [r4, #-4]
	return list->head;
   2a7fc:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   2a7fe:	602a      	str	r2, [r5, #0]
	list->head = node;
   2a800:	605d      	str	r5, [r3, #4]
	return list->tail;
   2a802:	689a      	ldr	r2, [r3, #8]
Z_GENLIST_PREPEND(slist, snode)
   2a804:	2a00      	cmp	r2, #0
   2a806:	d1e8      	bne.n	2a7da <bt_att_status+0x1c>
	list->tail = node;
   2a808:	609d      	str	r5, [r3, #8]
}
   2a80a:	e7e6      	b.n	2a7da <bt_att_status+0x1c>
	list->tail = node;
   2a80c:	609a      	str	r2, [r3, #8]
	if (!node) {
   2a80e:	e7ed      	b.n	2a7ec <bt_att_status+0x2e>

0002a810 <att_req_send_process>:
{
   2a810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2a814:	4607      	mov	r7, r0
	return list->head;
   2a816:	6a44      	ldr	r4, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2a818:	b3ac      	cbz	r4, 2a886 <att_req_send_process+0x76>
   2a81a:	3ce0      	subs	r4, #224	; 0xe0
Z_GENLIST_PEEK_NEXT(slist, snode)
   2a81c:	f114 05e0 	adds.w	r5, r4, #224	; 0xe0
   2a820:	d003      	beq.n	2a82a <att_req_send_process+0x1a>
	return node->next;
   2a822:	f8d4 50e0 	ldr.w	r5, [r4, #224]	; 0xe0
   2a826:	b105      	cbz	r5, 2a82a <att_req_send_process+0x1a>
   2a828:	3de0      	subs	r5, #224	; 0xe0
   2a82a:	f04f 0800 	mov.w	r8, #0
   2a82e:	4646      	mov	r6, r8
   2a830:	e02e      	b.n	2a890 <att_req_send_process+0x80>
		if (!req && prev &&
   2a832:	b196      	cbz	r6, 2a85a <att_req_send_process+0x4a>
		req = get_first_req_matching_chan(&att->reqs, chan);
   2a834:	4621      	mov	r1, r4
   2a836:	1d38      	adds	r0, r7, #4
   2a838:	f7ff ff0e 	bl	2a658 <get_first_req_matching_chan>
		if (!req) {
   2a83c:	4606      	mov	r6, r0
   2a83e:	b300      	cbz	r0, 2a882 <att_req_send_process+0x72>
		if (bt_att_chan_req_send(chan, req) >= 0) {
   2a840:	4601      	mov	r1, r0
   2a842:	4620      	mov	r0, r4
   2a844:	f7ff ffb7 	bl	2a7b6 <bt_att_chan_req_send>
   2a848:	2800      	cmp	r0, #0
   2a84a:	da2e      	bge.n	2a8aa <att_req_send_process+0x9a>
	return list->head;
   2a84c:	687b      	ldr	r3, [r7, #4]
	parent->next = child;
   2a84e:	6033      	str	r3, [r6, #0]
	list->head = node;
   2a850:	607e      	str	r6, [r7, #4]
	return list->tail;
   2a852:	68bb      	ldr	r3, [r7, #8]
Z_GENLIST_PREPEND(slist, snode)
   2a854:	b193      	cbz	r3, 2a87c <att_req_send_process+0x6c>
		prev = chan;
   2a856:	46a0      	mov	r8, r4
   2a858:	e01f      	b.n	2a89a <att_req_send_process+0x8a>
		if (!req && prev &&
   2a85a:	f1b8 0f00 	cmp.w	r8, #0
   2a85e:	d0e9      	beq.n	2a834 <att_req_send_process+0x24>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   2a860:	2103      	movs	r1, #3
   2a862:	f104 0090 	add.w	r0, r4, #144	; 0x90
   2a866:	f7ff ff58 	bl	2a71a <atomic_test_bit>
   2a86a:	4681      	mov	r9, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   2a86c:	2103      	movs	r1, #3
   2a86e:	f108 0090 	add.w	r0, r8, #144	; 0x90
   2a872:	f7ff ff52 	bl	2a71a <atomic_test_bit>
		if (!req && prev &&
   2a876:	4581      	cmp	r9, r0
   2a878:	d1dc      	bne.n	2a834 <att_req_send_process+0x24>
   2a87a:	e00e      	b.n	2a89a <att_req_send_process+0x8a>
	list->tail = node;
   2a87c:	60be      	str	r6, [r7, #8]
		prev = chan;
   2a87e:	46a0      	mov	r8, r4
}
   2a880:	e00b      	b.n	2a89a <att_req_send_process+0x8a>
   2a882:	46a0      	mov	r8, r4
   2a884:	e009      	b.n	2a89a <att_req_send_process+0x8a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2a886:	4625      	mov	r5, r4
   2a888:	e7cf      	b.n	2a82a <att_req_send_process+0x1a>
   2a88a:	462b      	mov	r3, r5
   2a88c:	462c      	mov	r4, r5
   2a88e:	461d      	mov	r5, r3
   2a890:	b15c      	cbz	r4, 2a8aa <att_req_send_process+0x9a>
		if (chan->req) {
   2a892:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   2a896:	2b00      	cmp	r3, #0
   2a898:	d0cb      	beq.n	2a832 <att_req_send_process+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2a89a:	2d00      	cmp	r5, #0
   2a89c:	d0f5      	beq.n	2a88a <att_req_send_process+0x7a>
	return node->next;
   2a89e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
   2a8a2:	2b00      	cmp	r3, #0
   2a8a4:	d0f2      	beq.n	2a88c <att_req_send_process+0x7c>
   2a8a6:	3be0      	subs	r3, #224	; 0xe0
   2a8a8:	e7f0      	b.n	2a88c <att_req_send_process+0x7c>
}
   2a8aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002a8ae <chan_req_sent>:
{
   2a8ae:	b510      	push	{r4, lr}
   2a8b0:	460c      	mov	r4, r1
	struct bt_att_chan *chan = data->att_chan;
   2a8b2:	6808      	ldr	r0, [r1, #0]
	if (chan->req) {
   2a8b4:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
   2a8b8:	b12b      	cbz	r3, 2a8c6 <chan_req_sent+0x18>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   2a8ba:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2a8be:	2300      	movs	r3, #0
   2a8c0:	30b0      	adds	r0, #176	; 0xb0
   2a8c2:	f7fc f847 	bl	26954 <k_work_reschedule>
	tx_meta_data_free(user_data);
   2a8c6:	4620      	mov	r0, r4
   2a8c8:	f7f0 faac 	bl	1ae24 <tx_meta_data_free>
}
   2a8cc:	bd10      	pop	{r4, pc}

0002a8ce <chan_cfm_sent>:
{
   2a8ce:	b508      	push	{r3, lr}
   2a8d0:	4608      	mov	r0, r1
	struct bt_att_chan *chan = data->att_chan;
   2a8d2:	680b      	ldr	r3, [r1, #0]
		atomic_clear_bit(chan->flags, ATT_PENDING_CFM);
   2a8d4:	3390      	adds	r3, #144	; 0x90
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2a8d6:	f3bf 8f5b 	dmb	ish
   2a8da:	e853 1f00 	ldrex	r1, [r3]
   2a8de:	f021 0102 	bic.w	r1, r1, #2
   2a8e2:	e843 1200 	strex	r2, r1, [r3]
   2a8e6:	2a00      	cmp	r2, #0
   2a8e8:	d1f7      	bne.n	2a8da <chan_cfm_sent+0xc>
   2a8ea:	f3bf 8f5b 	dmb	ish
	tx_meta_data_free(data);
   2a8ee:	f7f0 fa99 	bl	1ae24 <tx_meta_data_free>
}
   2a8f2:	bd08      	pop	{r3, pc}

0002a8f4 <chan_rsp_sent>:
{
   2a8f4:	b508      	push	{r3, lr}
   2a8f6:	4608      	mov	r0, r1
	struct bt_att_chan *chan = data->att_chan;
   2a8f8:	680b      	ldr	r3, [r1, #0]
		atomic_clear_bit(chan->flags, ATT_PENDING_RSP);
   2a8fa:	3390      	adds	r3, #144	; 0x90
   2a8fc:	f3bf 8f5b 	dmb	ish
   2a900:	e853 1f00 	ldrex	r1, [r3]
   2a904:	f021 0101 	bic.w	r1, r1, #1
   2a908:	e843 1200 	strex	r2, r1, [r3]
   2a90c:	2a00      	cmp	r2, #0
   2a90e:	d1f7      	bne.n	2a900 <chan_rsp_sent+0xc>
   2a910:	f3bf 8f5b 	dmb	ish
	tx_meta_data_free(data);
   2a914:	f7f0 fa86 	bl	1ae24 <tx_meta_data_free>
}
   2a918:	bd08      	pop	{r3, pc}

0002a91a <get_first_buf_matching_chan>:
{
   2a91a:	b508      	push	{r3, lr}
		return net_buf_get(fifo, K_NO_WAIT);
   2a91c:	2200      	movs	r2, #0
   2a91e:	2300      	movs	r3, #0
   2a920:	f001 fe27 	bl	2c572 <net_buf_get>
}
   2a924:	bd08      	pop	{r3, pc}

0002a926 <process_queue>:
{
   2a926:	b570      	push	{r4, r5, r6, lr}
   2a928:	4604      	mov	r4, r0
   2a92a:	460d      	mov	r5, r1
	buf = get_first_buf_matching_chan(queue, chan);
   2a92c:	4601      	mov	r1, r0
   2a92e:	4628      	mov	r0, r5
   2a930:	f7ff fff3 	bl	2a91a <get_first_buf_matching_chan>
	if (buf) {
   2a934:	b168      	cbz	r0, 2a952 <process_queue+0x2c>
   2a936:	4606      	mov	r6, r0
		err = bt_att_chan_send(chan, buf);
   2a938:	4601      	mov	r1, r0
   2a93a:	4620      	mov	r0, r4
   2a93c:	f7ff ff17 	bl	2a76e <bt_att_chan_send>
		if (err) {
   2a940:	4604      	mov	r4, r0
   2a942:	b908      	cbnz	r0, 2a948 <process_queue+0x22>
}
   2a944:	4620      	mov	r0, r4
   2a946:	bd70      	pop	{r4, r5, r6, pc}
			k_queue_prepend(&queue->_queue, buf);
   2a948:	4631      	mov	r1, r6
   2a94a:	4628      	mov	r0, r5
   2a94c:	f005 fd9e 	bl	3048c <k_queue_prepend>
			return err;
   2a950:	e7f8      	b.n	2a944 <process_queue+0x1e>
	return -ENOENT;
   2a952:	f06f 0401 	mvn.w	r4, #1
   2a956:	e7f5      	b.n	2a944 <process_queue+0x1e>

0002a958 <bt_att_sent>:
{
   2a958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a95a:	4604      	mov	r4, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   2a95c:	1f06      	subs	r6, r0, #4
	struct bt_att *att = chan->att;
   2a95e:	f850 5c04 	ldr.w	r5, [r0, #-4]
	atomic_clear_bit(chan->flags, ATT_PENDING_SENT);
   2a962:	f100 038c 	add.w	r3, r0, #140	; 0x8c
   2a966:	f3bf 8f5b 	dmb	ish
   2a96a:	e853 1f00 	ldrex	r1, [r3]
   2a96e:	f021 0110 	bic.w	r1, r1, #16
   2a972:	e843 1200 	strex	r2, r1, [r3]
   2a976:	2a00      	cmp	r2, #0
   2a978:	d1f7      	bne.n	2a96a <bt_att_sent+0x12>
   2a97a:	f3bf 8f5b 	dmb	ish
	if (!att) {
   2a97e:	b145      	cbz	r5, 2a992 <bt_att_sent+0x3a>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   2a980:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   2a984:	b133      	cbz	r3, 2a994 <bt_att_sent+0x3c>
	err = process_queue(chan, &chan->tx_queue);
   2a986:	f104 0194 	add.w	r1, r4, #148	; 0x94
   2a98a:	4630      	mov	r0, r6
   2a98c:	f7ff ffcb 	bl	2a926 <process_queue>
	if (!err) {
   2a990:	b9c0      	cbnz	r0, 2a9c4 <bt_att_sent+0x6c>
}
   2a992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return list->head;
   2a994:	686f      	ldr	r7, [r5, #4]
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   2a996:	2f00      	cmp	r7, #0
   2a998:	d0f5      	beq.n	2a986 <bt_att_sent+0x2e>
	return node->next;
   2a99a:	683b      	ldr	r3, [r7, #0]
	list->head = node;
   2a99c:	606b      	str	r3, [r5, #4]
	return list->tail;
   2a99e:	68aa      	ldr	r2, [r5, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2a9a0:	42ba      	cmp	r2, r7
   2a9a2:	d00d      	beq.n	2a9c0 <bt_att_sent+0x68>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2a9a4:	4639      	mov	r1, r7
   2a9a6:	4630      	mov	r0, r6
   2a9a8:	f7ff fee5 	bl	2a776 <chan_req_send>
   2a9ac:	2800      	cmp	r0, #0
   2a9ae:	daf0      	bge.n	2a992 <bt_att_sent+0x3a>
	return list->head;
   2a9b0:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   2a9b2:	603b      	str	r3, [r7, #0]
	list->head = node;
   2a9b4:	606f      	str	r7, [r5, #4]
	return list->tail;
   2a9b6:	68ab      	ldr	r3, [r5, #8]
Z_GENLIST_PREPEND(slist, snode)
   2a9b8:	2b00      	cmp	r3, #0
   2a9ba:	d1e4      	bne.n	2a986 <bt_att_sent+0x2e>
	list->tail = node;
   2a9bc:	60af      	str	r7, [r5, #8]
}
   2a9be:	e7e2      	b.n	2a986 <bt_att_sent+0x2e>
	list->tail = node;
   2a9c0:	60ab      	str	r3, [r5, #8]
}
   2a9c2:	e7ef      	b.n	2a9a4 <bt_att_sent+0x4c>
	(void)process_queue(chan, &att->tx_queue);
   2a9c4:	f105 010c 	add.w	r1, r5, #12
   2a9c8:	4630      	mov	r0, r6
   2a9ca:	f7ff ffac 	bl	2a926 <process_queue>
   2a9ce:	e7e0      	b.n	2a992 <bt_att_sent+0x3a>

0002a9d0 <att_send_process>:
{
   2a9d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2a9d4:	4680      	mov	r8, r0
	return list->head;
   2a9d6:	6a44      	ldr	r4, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2a9d8:	b374      	cbz	r4, 2aa38 <att_send_process+0x68>
   2a9da:	3ce0      	subs	r4, #224	; 0xe0
Z_GENLIST_PEEK_NEXT(slist, snode)
   2a9dc:	f114 05e0 	adds.w	r5, r4, #224	; 0xe0
   2a9e0:	d003      	beq.n	2a9ea <att_send_process+0x1a>
	return node->next;
   2a9e2:	f8d4 50e0 	ldr.w	r5, [r4, #224]	; 0xe0
   2a9e6:	b105      	cbz	r5, 2a9ea <att_send_process+0x1a>
   2a9e8:	3de0      	subs	r5, #224	; 0xe0
   2a9ea:	2600      	movs	r6, #0
   2a9ec:	4637      	mov	r7, r6
   2a9ee:	e00e      	b.n	2aa0e <att_send_process+0x3e>
		err = process_queue(chan, &att->tx_queue);
   2a9f0:	f108 010c 	add.w	r1, r8, #12
   2a9f4:	4620      	mov	r0, r4
   2a9f6:	f7ff ff96 	bl	2a926 <process_queue>
		if (!err) {
   2a9fa:	4606      	mov	r6, r0
   2a9fc:	b300      	cbz	r0, 2aa40 <att_send_process+0x70>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2a9fe:	b1ed      	cbz	r5, 2aa3c <att_send_process+0x6c>
   2aa00:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
   2aa04:	b103      	cbz	r3, 2aa08 <att_send_process+0x38>
   2aa06:	3be0      	subs	r3, #224	; 0xe0
   2aa08:	4627      	mov	r7, r4
   2aa0a:	462c      	mov	r4, r5
   2aa0c:	461d      	mov	r5, r3
   2aa0e:	b1bc      	cbz	r4, 2aa40 <att_send_process+0x70>
		if (err == -ENOENT && prev &&
   2aa10:	f116 0f02 	cmn.w	r6, #2
   2aa14:	d1ec      	bne.n	2a9f0 <att_send_process+0x20>
   2aa16:	2f00      	cmp	r7, #0
   2aa18:	d0ea      	beq.n	2a9f0 <att_send_process+0x20>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   2aa1a:	2103      	movs	r1, #3
   2aa1c:	f104 0090 	add.w	r0, r4, #144	; 0x90
   2aa20:	f7ff fe7b 	bl	2a71a <atomic_test_bit>
   2aa24:	4681      	mov	r9, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   2aa26:	2103      	movs	r1, #3
   2aa28:	f107 0090 	add.w	r0, r7, #144	; 0x90
   2aa2c:	f7ff fe75 	bl	2a71a <atomic_test_bit>
		if (err == -ENOENT && prev &&
   2aa30:	4581      	cmp	r9, r0
   2aa32:	d1dd      	bne.n	2a9f0 <att_send_process+0x20>
   2aa34:	463c      	mov	r4, r7
   2aa36:	e7e2      	b.n	2a9fe <att_send_process+0x2e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2aa38:	4625      	mov	r5, r4
   2aa3a:	e7d6      	b.n	2a9ea <att_send_process+0x1a>
   2aa3c:	462b      	mov	r3, r5
   2aa3e:	e7e3      	b.n	2aa08 <att_send_process+0x38>
}
   2aa40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002aa44 <att_notify_mult>:
{
   2aa44:	b508      	push	{r3, lr}
	bt_gatt_mult_notification(chan->att->conn, buf->data, buf->len);
   2aa46:	6803      	ldr	r3, [r0, #0]
   2aa48:	8a0a      	ldrh	r2, [r1, #16]
   2aa4a:	68c9      	ldr	r1, [r1, #12]
   2aa4c:	6818      	ldr	r0, [r3, #0]
   2aa4e:	f7f2 fd43 	bl	1d4d8 <bt_gatt_mult_notification>
}
   2aa52:	2000      	movs	r0, #0
   2aa54:	bd08      	pop	{r3, pc}

0002aa56 <att_notify>:
{
   2aa56:	b538      	push	{r3, r4, r5, lr}
   2aa58:	4605      	mov	r5, r0
   2aa5a:	460c      	mov	r4, r1
	return net_buf_simple_pull_le16(&buf->b);
   2aa5c:	f101 000c 	add.w	r0, r1, #12
   2aa60:	f001 fe48 	bl	2c6f4 <net_buf_simple_pull_le16>
   2aa64:	4601      	mov	r1, r0
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   2aa66:	682d      	ldr	r5, [r5, #0]
   2aa68:	8a23      	ldrh	r3, [r4, #16]
   2aa6a:	68e2      	ldr	r2, [r4, #12]
   2aa6c:	6828      	ldr	r0, [r5, #0]
   2aa6e:	f001 fa82 	bl	2bf76 <bt_gatt_notification>
}
   2aa72:	2000      	movs	r0, #0
   2aa74:	bd38      	pop	{r3, r4, r5, pc}

0002aa76 <bt_att_chan_send_rsp>:
{
   2aa76:	b538      	push	{r3, r4, r5, lr}
   2aa78:	4604      	mov	r4, r0
   2aa7a:	460d      	mov	r5, r1
	err = chan_send(chan, buf);
   2aa7c:	f7f0 f9e0 	bl	1ae40 <chan_send>
	if (err) {
   2aa80:	b900      	cbnz	r0, 2aa84 <bt_att_chan_send_rsp+0xe>
}
   2aa82:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_put(&chan->tx_queue, buf);
   2aa84:	4629      	mov	r1, r5
   2aa86:	f104 0098 	add.w	r0, r4, #152	; 0x98
   2aa8a:	f001 fdae 	bl	2c5ea <net_buf_put>
}
   2aa8e:	e7f8      	b.n	2aa82 <bt_att_chan_send_rsp+0xc>

0002aa90 <att_chan_mtu_updated>:
{
   2aa90:	b570      	push	{r4, r5, r6, lr}
	struct bt_att *att = updated_chan->att;
   2aa92:	6806      	ldr	r6, [r0, #0]
	return list->head;
   2aa94:	6a73      	ldr	r3, [r6, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2aa96:	b153      	cbz	r3, 2aaae <att_chan_mtu_updated+0x1e>
   2aa98:	3be0      	subs	r3, #224	; 0xe0
Z_GENLIST_PEEK_NEXT(slist, snode)
   2aa9a:	f113 04e0 	adds.w	r4, r3, #224	; 0xe0
   2aa9e:	d003      	beq.n	2aaa8 <att_chan_mtu_updated+0x18>
	return node->next;
   2aaa0:	f8d3 40e0 	ldr.w	r4, [r3, #224]	; 0xe0
   2aaa4:	b104      	cbz	r4, 2aaa8 <att_chan_mtu_updated+0x18>
   2aaa6:	3ce0      	subs	r4, #224	; 0xe0
   2aaa8:	2200      	movs	r2, #0
   2aaaa:	4611      	mov	r1, r2
   2aaac:	e004      	b.n	2aab8 <att_chan_mtu_updated+0x28>
   2aaae:	461c      	mov	r4, r3
   2aab0:	e7fa      	b.n	2aaa8 <att_chan_mtu_updated+0x18>
   2aab2:	4625      	mov	r5, r4
   2aab4:	4623      	mov	r3, r4
   2aab6:	462c      	mov	r4, r5
   2aab8:	b18b      	cbz	r3, 2aade <att_chan_mtu_updated+0x4e>
		if (chan == updated_chan) {
   2aaba:	4283      	cmp	r3, r0
   2aabc:	d007      	beq.n	2aace <att_chan_mtu_updated+0x3e>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   2aabe:	8d5d      	ldrh	r5, [r3, #42]	; 0x2a
   2aac0:	42a9      	cmp	r1, r5
   2aac2:	bf38      	it	cc
   2aac4:	4629      	movcc	r1, r5
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   2aac6:	8b5b      	ldrh	r3, [r3, #26]
   2aac8:	429a      	cmp	r2, r3
   2aaca:	bf38      	it	cc
   2aacc:	461a      	movcc	r2, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2aace:	2c00      	cmp	r4, #0
   2aad0:	d0ef      	beq.n	2aab2 <att_chan_mtu_updated+0x22>
   2aad2:	f8d4 50e0 	ldr.w	r5, [r4, #224]	; 0xe0
   2aad6:	2d00      	cmp	r5, #0
   2aad8:	d0ec      	beq.n	2aab4 <att_chan_mtu_updated+0x24>
   2aada:	3de0      	subs	r5, #224	; 0xe0
   2aadc:	e7ea      	b.n	2aab4 <att_chan_mtu_updated+0x24>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   2aade:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
   2aae0:	428b      	cmp	r3, r1
   2aae2:	d802      	bhi.n	2aaea <att_chan_mtu_updated+0x5a>
	    (updated_chan->chan.rx.mtu > max_rx)) {
   2aae4:	8b44      	ldrh	r4, [r0, #26]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   2aae6:	4294      	cmp	r4, r2
   2aae8:	d909      	bls.n	2aafe <att_chan_mtu_updated+0x6e>
		max_rx = MAX(max_rx, updated_chan->chan.rx.mtu);
   2aaea:	8b40      	ldrh	r0, [r0, #26]
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   2aaec:	4282      	cmp	r2, r0
   2aaee:	bf38      	it	cc
   2aaf0:	4602      	movcc	r2, r0
   2aaf2:	4299      	cmp	r1, r3
   2aaf4:	bf38      	it	cc
   2aaf6:	4619      	movcc	r1, r3
   2aaf8:	6830      	ldr	r0, [r6, #0]
   2aafa:	f7f2 fdcf 	bl	1d69c <bt_gatt_att_max_mtu_changed>
}
   2aafe:	bd70      	pop	{r4, r5, r6, pc}

0002ab00 <write_cb>:
{
   2ab00:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ab02:	b083      	sub	sp, #12
   2ab04:	4606      	mov	r6, r0
   2ab06:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   2ab08:	f44f 7295 	mov.w	r2, #298	; 0x12a
   2ab0c:	4601      	mov	r1, r0
   2ab0e:	6820      	ldr	r0, [r4, #0]
   2ab10:	f001 f8f9 	bl	2bd06 <bt_gatt_check_perm>
   2ab14:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   2ab16:	bb08      	cbnz	r0, 2ab5c <write_cb+0x5c>
   2ab18:	4605      	mov	r5, r0
	if (!data->req) {
   2ab1a:	7a23      	ldrb	r3, [r4, #8]
   2ab1c:	b11b      	cbz	r3, 2ab26 <write_cb+0x26>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   2ab1e:	2b18      	cmp	r3, #24
   2ab20:	d016      	beq.n	2ab50 <write_cb+0x50>
	uint8_t flags = 0U;
   2ab22:	4603      	mov	r3, r0
   2ab24:	e000      	b.n	2ab28 <write_cb+0x28>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   2ab26:	2302      	movs	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   2ab28:	68b7      	ldr	r7, [r6, #8]
   2ab2a:	9301      	str	r3, [sp, #4]
   2ab2c:	8a63      	ldrh	r3, [r4, #18]
   2ab2e:	9300      	str	r3, [sp, #0]
   2ab30:	8a23      	ldrh	r3, [r4, #16]
   2ab32:	68e2      	ldr	r2, [r4, #12]
   2ab34:	4631      	mov	r1, r6
   2ab36:	6820      	ldr	r0, [r4, #0]
   2ab38:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   2ab3a:	2800      	cmp	r0, #0
   2ab3c:	db02      	blt.n	2ab44 <write_cb+0x44>
   2ab3e:	8a23      	ldrh	r3, [r4, #16]
   2ab40:	4298      	cmp	r0, r3
   2ab42:	d007      	beq.n	2ab54 <write_cb+0x54>
		data->err = err_to_att(write);
   2ab44:	f7ff fda2 	bl	2a68c <err_to_att>
   2ab48:	7520      	strb	r0, [r4, #20]
}
   2ab4a:	4628      	mov	r0, r5
   2ab4c:	b003      	add	sp, #12
   2ab4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		flags |= BT_GATT_WRITE_FLAG_EXECUTE;
   2ab50:	2304      	movs	r3, #4
   2ab52:	e7e9      	b.n	2ab28 <write_cb+0x28>
	data->err = 0U;
   2ab54:	2300      	movs	r3, #0
   2ab56:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   2ab58:	2501      	movs	r5, #1
   2ab5a:	e7f6      	b.n	2ab4a <write_cb+0x4a>
		return BT_GATT_ITER_STOP;
   2ab5c:	2500      	movs	r5, #0
   2ab5e:	e7f4      	b.n	2ab4a <write_cb+0x4a>

0002ab60 <att_chan_read>:
{
   2ab60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ab64:	b085      	sub	sp, #20
   2ab66:	4680      	mov	r8, r0
   2ab68:	4689      	mov	r9, r1
   2ab6a:	9202      	str	r2, [sp, #8]
   2ab6c:	461d      	mov	r5, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   2ab6e:	6843      	ldr	r3, [r0, #4]
   2ab70:	9303      	str	r3, [sp, #12]
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2ab72:	8d40      	ldrh	r0, [r0, #42]	; 0x2a
	while (buf) {
   2ab74:	4613      	mov	r3, r2
	size_t bytes = 0;
   2ab76:	2200      	movs	r2, #0
	while (buf) {
   2ab78:	e002      	b.n	2ab80 <att_chan_read+0x20>
		bytes += buf->len;
   2ab7a:	8a19      	ldrh	r1, [r3, #16]
   2ab7c:	440a      	add	r2, r1
		buf = buf->frags;
   2ab7e:	685b      	ldr	r3, [r3, #4]
	while (buf) {
   2ab80:	2b00      	cmp	r3, #0
   2ab82:	d1fa      	bne.n	2ab7a <att_chan_read+0x1a>
   2ab84:	4290      	cmp	r0, r2
   2ab86:	d804      	bhi.n	2ab92 <att_chan_read+0x32>
		return 0;
   2ab88:	2400      	movs	r4, #0
}
   2ab8a:	4620      	mov	r0, r4
   2ab8c:	b005      	add	sp, #20
   2ab8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(buf);
   2ab92:	9802      	ldr	r0, [sp, #8]
   2ab94:	f001 fd54 	bl	2c640 <net_buf_frag_last>
   2ab98:	4607      	mov	r7, r0
	size_t len, total = 0;
   2ab9a:	f04f 0a00 	mov.w	sl, #0
   2ab9e:	e082      	b.n	2aca6 <att_chan_read+0x146>
		bytes += buf->len;
   2aba0:	8a19      	ldrh	r1, [r3, #16]
   2aba2:	440a      	add	r2, r1
		buf = buf->frags;
   2aba4:	685b      	ldr	r3, [r3, #4]
	while (buf) {
   2aba6:	2b00      	cmp	r3, #0
   2aba8:	d1fa      	bne.n	2aba0 <att_chan_read+0x40>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2abaa:	1aa4      	subs	r4, r4, r2
	return net_buf_simple_tailroom(&buf->b);
   2abac:	f107 060c 	add.w	r6, r7, #12
   2abb0:	4630      	mov	r0, r6
   2abb2:	f001 fdab 	bl	2c70c <net_buf_simple_tailroom>
   2abb6:	4284      	cmp	r4, r0
   2abb8:	d326      	bcc.n	2ac08 <att_chan_read+0xa8>
   2abba:	4630      	mov	r0, r6
   2abbc:	f001 fda6 	bl	2c70c <net_buf_simple_tailroom>
   2abc0:	4606      	mov	r6, r0
		if (!len) {
   2abc2:	b36e      	cbz	r6, 2ac20 <att_chan_read+0xc0>
		read = attr->read(conn, attr, frag->data + frag->len, len,
   2abc4:	f8d9 4004 	ldr.w	r4, [r9, #4]
   2abc8:	68f9      	ldr	r1, [r7, #12]
   2abca:	8a3a      	ldrh	r2, [r7, #16]
   2abcc:	9500      	str	r5, [sp, #0]
   2abce:	b2b3      	uxth	r3, r6
   2abd0:	440a      	add	r2, r1
   2abd2:	4649      	mov	r1, r9
   2abd4:	9803      	ldr	r0, [sp, #12]
   2abd6:	47a0      	blx	r4
		if (read < 0) {
   2abd8:	1e04      	subs	r4, r0, #0
   2abda:	db55      	blt.n	2ac88 <att_chan_read+0x128>
		if (cb && !cb(frag, read, user_data)) {
   2abdc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2abde:	b12b      	cbz	r3, 2abec <att_chan_read+0x8c>
   2abe0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2abe2:	4621      	mov	r1, r4
   2abe4:	4638      	mov	r0, r7
   2abe6:	4798      	blx	r3
   2abe8:	2800      	cmp	r0, #0
   2abea:	d061      	beq.n	2acb0 <att_chan_read+0x150>
		net_buf_add(frag, read);
   2abec:	46a3      	mov	fp, r4
	return net_buf_simple_add(&buf->b, len);
   2abee:	4621      	mov	r1, r4
   2abf0:	f107 000c 	add.w	r0, r7, #12
   2abf4:	f001 fd44 	bl	2c680 <net_buf_simple_add>
		total += read;
   2abf8:	44a2      	add	sl, r4
		offset += read;
   2abfa:	442c      	add	r4, r5
   2abfc:	b2a5      	uxth	r5, r4
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2abfe:	f8b8 002a 	ldrh.w	r0, [r8, #42]	; 0x2a
   2ac02:	9b02      	ldr	r3, [sp, #8]
	size_t bytes = 0;
   2ac04:	2200      	movs	r2, #0
   2ac06:	e048      	b.n	2ac9a <att_chan_read+0x13a>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2ac08:	f8b8 602a 	ldrh.w	r6, [r8, #42]	; 0x2a
	while (buf) {
   2ac0c:	9b02      	ldr	r3, [sp, #8]
	size_t bytes = 0;
   2ac0e:	2200      	movs	r2, #0
	while (buf) {
   2ac10:	e002      	b.n	2ac18 <att_chan_read+0xb8>
		bytes += buf->len;
   2ac12:	8a19      	ldrh	r1, [r3, #16]
   2ac14:	440a      	add	r2, r1
		buf = buf->frags;
   2ac16:	685b      	ldr	r3, [r3, #4]
	while (buf) {
   2ac18:	2b00      	cmp	r3, #0
   2ac1a:	d1fa      	bne.n	2ac12 <att_chan_read+0xb2>
   2ac1c:	1ab6      	subs	r6, r6, r2
   2ac1e:	e7d0      	b.n	2abc2 <att_chan_read+0x62>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   2ac20:	9b02      	ldr	r3, [sp, #8]
   2ac22:	7a98      	ldrb	r0, [r3, #10]
   2ac24:	f7f3 fd2c 	bl	1e680 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   2ac28:	2200      	movs	r2, #0
   2ac2a:	2300      	movs	r3, #0
   2ac2c:	f001 fc9a 	bl	2c564 <net_buf_alloc_fixed>
			if (!frag) {
   2ac30:	4607      	mov	r7, r0
   2ac32:	b150      	cbz	r0, 2ac4a <att_chan_read+0xea>
			net_buf_frag_add(buf, frag);
   2ac34:	4601      	mov	r1, r0
   2ac36:	f8dd b008 	ldr.w	fp, [sp, #8]
   2ac3a:	4658      	mov	r0, fp
   2ac3c:	f001 fd11 	bl	2c662 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2ac40:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
	size_t bytes = 0;
   2ac44:	4632      	mov	r2, r6
	while (buf) {
   2ac46:	465b      	mov	r3, fp
   2ac48:	e004      	b.n	2ac54 <att_chan_read+0xf4>
				return total;
   2ac4a:	4654      	mov	r4, sl
   2ac4c:	e79d      	b.n	2ab8a <att_chan_read+0x2a>
		bytes += buf->len;
   2ac4e:	8a19      	ldrh	r1, [r3, #16]
   2ac50:	440a      	add	r2, r1
		buf = buf->frags;
   2ac52:	685b      	ldr	r3, [r3, #4]
	while (buf) {
   2ac54:	2b00      	cmp	r3, #0
   2ac56:	d1fa      	bne.n	2ac4e <att_chan_read+0xee>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2ac58:	1aa4      	subs	r4, r4, r2
	return net_buf_simple_tailroom(&buf->b);
   2ac5a:	f107 0b0c 	add.w	fp, r7, #12
   2ac5e:	4658      	mov	r0, fp
   2ac60:	f001 fd54 	bl	2c70c <net_buf_simple_tailroom>
   2ac64:	4284      	cmp	r4, r0
   2ac66:	d304      	bcc.n	2ac72 <att_chan_read+0x112>
   2ac68:	4658      	mov	r0, fp
   2ac6a:	f001 fd4f 	bl	2c70c <net_buf_simple_tailroom>
   2ac6e:	4606      	mov	r6, r0
   2ac70:	e7a8      	b.n	2abc4 <att_chan_read+0x64>
   2ac72:	f8b8 102a 	ldrh.w	r1, [r8, #42]	; 0x2a
	while (buf) {
   2ac76:	9b02      	ldr	r3, [sp, #8]
   2ac78:	e002      	b.n	2ac80 <att_chan_read+0x120>
		bytes += buf->len;
   2ac7a:	8a1a      	ldrh	r2, [r3, #16]
   2ac7c:	4416      	add	r6, r2
		buf = buf->frags;
   2ac7e:	685b      	ldr	r3, [r3, #4]
	while (buf) {
   2ac80:	2b00      	cmp	r3, #0
   2ac82:	d1fa      	bne.n	2ac7a <att_chan_read+0x11a>
   2ac84:	1b8e      	subs	r6, r1, r6
   2ac86:	e79d      	b.n	2abc4 <att_chan_read+0x64>
			if (total) {
   2ac88:	f1ba 0f00 	cmp.w	sl, #0
   2ac8c:	f43f af7d 	beq.w	2ab8a <att_chan_read+0x2a>
				return total;
   2ac90:	4654      	mov	r4, sl
   2ac92:	e77a      	b.n	2ab8a <att_chan_read+0x2a>
		bytes += buf->len;
   2ac94:	8a19      	ldrh	r1, [r3, #16]
   2ac96:	440a      	add	r2, r1
		buf = buf->frags;
   2ac98:	685b      	ldr	r3, [r3, #4]
	while (buf) {
   2ac9a:	2b00      	cmp	r3, #0
   2ac9c:	d1fa      	bne.n	2ac94 <att_chan_read+0x134>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2ac9e:	4290      	cmp	r0, r2
   2aca0:	d906      	bls.n	2acb0 <att_chan_read+0x150>
   2aca2:	45b3      	cmp	fp, r6
   2aca4:	d104      	bne.n	2acb0 <att_chan_read+0x150>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2aca6:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   2acaa:	9b02      	ldr	r3, [sp, #8]
	size_t bytes = 0;
   2acac:	2200      	movs	r2, #0
	while (buf) {
   2acae:	e77a      	b.n	2aba6 <att_chan_read+0x46>
	return total;
   2acb0:	4654      	mov	r4, sl
   2acb2:	e76a      	b.n	2ab8a <att_chan_read+0x2a>

0002acb4 <read_vl_cb>:
{
   2acb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2acb8:	b082      	sub	sp, #8
   2acba:	4606      	mov	r6, r0
   2acbc:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   2acbe:	6817      	ldr	r7, [r2, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   2acc0:	6878      	ldr	r0, [r7, #4]
	data->err = 0x00;
   2acc2:	2300      	movs	r3, #0
   2acc4:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2acc6:	2295      	movs	r2, #149	; 0x95
   2acc8:	4631      	mov	r1, r6
   2acca:	f001 f81c 	bl	2bd06 <bt_gatt_check_perm>
   2acce:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   2acd0:	b9f0      	cbnz	r0, 2ad10 <read_vl_cb+0x5c>
   2acd2:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu - data->buf->len < 2) {
   2acd4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   2acd6:	68a0      	ldr	r0, [r4, #8]
   2acd8:	8a02      	ldrh	r2, [r0, #16]
   2acda:	1a9b      	subs	r3, r3, r2
   2acdc:	2b01      	cmp	r3, #1
   2acde:	dd18      	ble.n	2ad12 <read_vl_cb+0x5e>
	return net_buf_simple_add(&buf->b, len);
   2ace0:	2102      	movs	r1, #2
   2ace2:	300c      	adds	r0, #12
   2ace4:	f001 fccc 	bl	2c680 <net_buf_simple_add>
   2ace8:	4680      	mov	r8, r0
	read = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   2acea:	2300      	movs	r3, #0
   2acec:	9301      	str	r3, [sp, #4]
   2acee:	9300      	str	r3, [sp, #0]
   2acf0:	88a3      	ldrh	r3, [r4, #4]
   2acf2:	68a2      	ldr	r2, [r4, #8]
   2acf4:	4631      	mov	r1, r6
   2acf6:	4638      	mov	r0, r7
   2acf8:	f7ff ff32 	bl	2ab60 <att_chan_read>
	if (read < 0) {
   2acfc:	2800      	cmp	r0, #0
   2acfe:	db03      	blt.n	2ad08 <read_vl_cb+0x54>
	rsp->len = read;
   2ad00:	f8a8 0000 	strh.w	r0, [r8]
	return BT_GATT_ITER_CONTINUE;
   2ad04:	2501      	movs	r5, #1
   2ad06:	e004      	b.n	2ad12 <read_vl_cb+0x5e>
		data->err = err_to_att(read);
   2ad08:	f7ff fcc0 	bl	2a68c <err_to_att>
   2ad0c:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   2ad0e:	e000      	b.n	2ad12 <read_vl_cb+0x5e>
		return BT_GATT_ITER_STOP;
   2ad10:	2500      	movs	r5, #0
}
   2ad12:	4628      	mov	r0, r5
   2ad14:	b002      	add	sp, #8
   2ad16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002ad1a <read_cb>:
{
   2ad1a:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ad1c:	b083      	sub	sp, #12
   2ad1e:	4606      	mov	r6, r0
   2ad20:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   2ad22:	6817      	ldr	r7, [r2, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   2ad24:	6878      	ldr	r0, [r7, #4]
	data->err = 0x00;
   2ad26:	2300      	movs	r3, #0
   2ad28:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2ad2a:	2295      	movs	r2, #149	; 0x95
   2ad2c:	4631      	mov	r1, r6
   2ad2e:	f000 ffea 	bl	2bd06 <bt_gatt_check_perm>
   2ad32:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   2ad34:	b118      	cbz	r0, 2ad3e <read_cb+0x24>
		return BT_GATT_ITER_STOP;
   2ad36:	2500      	movs	r5, #0
}
   2ad38:	4628      	mov	r0, r5
   2ad3a:	b003      	add	sp, #12
   2ad3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2ad3e:	4605      	mov	r5, r0
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   2ad40:	2300      	movs	r3, #0
   2ad42:	9301      	str	r3, [sp, #4]
   2ad44:	9300      	str	r3, [sp, #0]
   2ad46:	88a3      	ldrh	r3, [r4, #4]
   2ad48:	68a2      	ldr	r2, [r4, #8]
   2ad4a:	4631      	mov	r1, r6
   2ad4c:	4638      	mov	r0, r7
   2ad4e:	f7ff ff07 	bl	2ab60 <att_chan_read>
	if (ret < 0) {
   2ad52:	2800      	cmp	r0, #0
   2ad54:	db01      	blt.n	2ad5a <read_cb+0x40>
	return BT_GATT_ITER_CONTINUE;
   2ad56:	2501      	movs	r5, #1
   2ad58:	e7ee      	b.n	2ad38 <read_cb+0x1e>
		data->err = err_to_att(ret);
   2ad5a:	f7ff fc97 	bl	2a68c <err_to_att>
   2ad5e:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   2ad60:	e7ea      	b.n	2ad38 <read_cb+0x1e>

0002ad62 <find_info_cb>:
{
   2ad62:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2ad66:	4606      	mov	r6, r0
   2ad68:	460f      	mov	r7, r1
   2ad6a:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   2ad6c:	f8d2 8000 	ldr.w	r8, [r2]
	if (!data->rsp) {
   2ad70:	6893      	ldr	r3, [r2, #8]
   2ad72:	b14b      	cbz	r3, 2ad88 <find_info_cb+0x26>
	switch (data->rsp->format) {
   2ad74:	68a3      	ldr	r3, [r4, #8]
   2ad76:	781d      	ldrb	r5, [r3, #0]
   2ad78:	2d01      	cmp	r5, #1
   2ad7a:	d013      	beq.n	2ada4 <find_info_cb+0x42>
   2ad7c:	2d02      	cmp	r5, #2
   2ad7e:	d02d      	beq.n	2addc <find_info_cb+0x7a>
   2ad80:	2500      	movs	r5, #0
}
   2ad82:	4628      	mov	r0, r5
   2ad84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   2ad88:	6850      	ldr	r0, [r2, #4]
   2ad8a:	2101      	movs	r1, #1
   2ad8c:	300c      	adds	r0, #12
   2ad8e:	f001 fc77 	bl	2c680 <net_buf_simple_add>
   2ad92:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   2ad94:	6833      	ldr	r3, [r6, #0]
   2ad96:	781b      	ldrb	r3, [r3, #0]
   2ad98:	b913      	cbnz	r3, 2ada0 <find_info_cb+0x3e>
   2ad9a:	2301      	movs	r3, #1
   2ad9c:	7003      	strb	r3, [r0, #0]
   2ad9e:	e7e9      	b.n	2ad74 <find_info_cb+0x12>
   2ada0:	2302      	movs	r3, #2
   2ada2:	e7fb      	b.n	2ad9c <find_info_cb+0x3a>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   2ada4:	6833      	ldr	r3, [r6, #0]
   2ada6:	f893 9000 	ldrb.w	r9, [r3]
   2adaa:	f1b9 0f00 	cmp.w	r9, #0
   2adae:	d001      	beq.n	2adb4 <find_info_cb+0x52>
			return BT_GATT_ITER_STOP;
   2adb0:	2500      	movs	r5, #0
   2adb2:	e7e6      	b.n	2ad82 <find_info_cb+0x20>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   2adb4:	6860      	ldr	r0, [r4, #4]
   2adb6:	2104      	movs	r1, #4
   2adb8:	300c      	adds	r0, #12
   2adba:	f001 fc61 	bl	2c680 <net_buf_simple_add>
   2adbe:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
   2adc0:	8007      	strh	r7, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   2adc2:	6832      	ldr	r2, [r6, #0]
   2adc4:	68e3      	ldr	r3, [r4, #12]
   2adc6:	8852      	ldrh	r2, [r2, #2]
   2adc8:	805a      	strh	r2, [r3, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   2adca:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   2adce:	6862      	ldr	r2, [r4, #4]
   2add0:	8a12      	ldrh	r2, [r2, #16]
   2add2:	1a9b      	subs	r3, r3, r2
   2add4:	2b04      	cmp	r3, #4
   2add6:	d8d4      	bhi.n	2ad82 <find_info_cb+0x20>
	return BT_GATT_ITER_STOP;
   2add8:	464d      	mov	r5, r9
   2adda:	e7d2      	b.n	2ad82 <find_info_cb+0x20>
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   2addc:	6833      	ldr	r3, [r6, #0]
   2adde:	781b      	ldrb	r3, [r3, #0]
   2ade0:	2b02      	cmp	r3, #2
   2ade2:	d001      	beq.n	2ade8 <find_info_cb+0x86>
			return BT_GATT_ITER_STOP;
   2ade4:	2500      	movs	r5, #0
   2ade6:	e7cc      	b.n	2ad82 <find_info_cb+0x20>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   2ade8:	6860      	ldr	r0, [r4, #4]
   2adea:	2112      	movs	r1, #18
   2adec:	300c      	adds	r0, #12
   2adee:	f001 fc47 	bl	2c680 <net_buf_simple_add>
   2adf2:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   2adf4:	8007      	strh	r7, [r0, #0]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   2adf6:	68e0      	ldr	r0, [r4, #12]
   2adf8:	6831      	ldr	r1, [r6, #0]
   2adfa:	2210      	movs	r2, #16
   2adfc:	3101      	adds	r1, #1
   2adfe:	3002      	adds	r0, #2
   2ae00:	f7fe fed7 	bl	29bb2 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   2ae04:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   2ae08:	6862      	ldr	r2, [r4, #4]
   2ae0a:	8a12      	ldrh	r2, [r2, #16]
   2ae0c:	1a9b      	subs	r3, r3, r2
   2ae0e:	2b12      	cmp	r3, #18
   2ae10:	d801      	bhi.n	2ae16 <find_info_cb+0xb4>
	return BT_GATT_ITER_STOP;
   2ae12:	2500      	movs	r5, #0
   2ae14:	e7b5      	b.n	2ad82 <find_info_cb+0x20>
			return BT_GATT_ITER_CONTINUE;
   2ae16:	2501      	movs	r5, #1
   2ae18:	e7b3      	b.n	2ad82 <find_info_cb+0x20>

0002ae1a <atomic_test_and_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2ae1a:	f001 021f 	and.w	r2, r1, #31
   2ae1e:	2301      	movs	r3, #1
   2ae20:	4093      	lsls	r3, r2
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   2ae22:	0949      	lsrs	r1, r1, #5
   2ae24:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2ae28:	f3bf 8f5b 	dmb	ish
   2ae2c:	e850 2f00 	ldrex	r2, [r0]
   2ae30:	ea42 0103 	orr.w	r1, r2, r3
   2ae34:	e840 1c00 	strex	ip, r1, [r0]
   2ae38:	f1bc 0f00 	cmp.w	ip, #0
   2ae3c:	d1f6      	bne.n	2ae2c <atomic_test_and_set_bit+0x12>
   2ae3e:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   2ae42:	4213      	tst	r3, r2
}
   2ae44:	bf14      	ite	ne
   2ae46:	2001      	movne	r0, #1
   2ae48:	2000      	moveq	r0, #0
   2ae4a:	4770      	bx	lr

0002ae4c <att_sent>:
{
   2ae4c:	b508      	push	{r3, lr}
	struct bt_att_chan *att_chan = data->att_chan;
   2ae4e:	680b      	ldr	r3, [r1, #0]
	struct bt_l2cap_chan *chan = &att_chan->chan.chan;
   2ae50:	1d18      	adds	r0, r3, #4
	if (chan->ops->sent) {
   2ae52:	689b      	ldr	r3, [r3, #8]
   2ae54:	699b      	ldr	r3, [r3, #24]
   2ae56:	b103      	cbz	r3, 2ae5a <att_sent+0xe>
		chan->ops->sent(chan);
   2ae58:	4798      	blx	r3
}
   2ae5a:	bd08      	pop	{r3, pc}

0002ae5c <att_unknown>:
{
   2ae5c:	b570      	push	{r4, r5, r6, lr}
   2ae5e:	4604      	mov	r4, r0
   2ae60:	460d      	mov	r5, r1
	if (!err) {
   2ae62:	4616      	mov	r6, r2
   2ae64:	b12a      	cbz	r2, 2ae72 <att_unknown+0x16>
	chan_unknown(conn, user_data, err);
   2ae66:	4632      	mov	r2, r6
   2ae68:	4629      	mov	r1, r5
   2ae6a:	4620      	mov	r0, r4
   2ae6c:	f7ff fc62 	bl	2a734 <chan_unknown>
}
   2ae70:	bd70      	pop	{r4, r5, r6, pc}
		att_sent(conn, user_data);
   2ae72:	f7ff ffeb 	bl	2ae4c <att_sent>
   2ae76:	e7f6      	b.n	2ae66 <att_unknown+0xa>

0002ae78 <att_tx_complete>:
{
   2ae78:	b570      	push	{r4, r5, r6, lr}
   2ae7a:	4604      	mov	r4, r0
   2ae7c:	460d      	mov	r5, r1
	if (!err) {
   2ae7e:	4616      	mov	r6, r2
   2ae80:	b12a      	cbz	r2, 2ae8e <att_tx_complete+0x16>
	chan_tx_complete(conn, user_data, err);
   2ae82:	4632      	mov	r2, r6
   2ae84:	4629      	mov	r1, r5
   2ae86:	4620      	mov	r0, r4
   2ae88:	f7ff fc59 	bl	2a73e <chan_tx_complete>
}
   2ae8c:	bd70      	pop	{r4, r5, r6, pc}
		att_sent(conn, user_data);
   2ae8e:	f7ff ffdd 	bl	2ae4c <att_sent>
   2ae92:	e7f6      	b.n	2ae82 <att_tx_complete+0xa>

0002ae94 <att_req_sent>:
{
   2ae94:	b570      	push	{r4, r5, r6, lr}
   2ae96:	4604      	mov	r4, r0
   2ae98:	460d      	mov	r5, r1
	if (!err) {
   2ae9a:	4616      	mov	r6, r2
   2ae9c:	b12a      	cbz	r2, 2aeaa <att_req_sent+0x16>
	chan_req_sent(conn, user_data, err);
   2ae9e:	4632      	mov	r2, r6
   2aea0:	4629      	mov	r1, r5
   2aea2:	4620      	mov	r0, r4
   2aea4:	f7ff fd03 	bl	2a8ae <chan_req_sent>
}
   2aea8:	bd70      	pop	{r4, r5, r6, pc}
		att_sent(conn, user_data);
   2aeaa:	f7ff ffcf 	bl	2ae4c <att_sent>
   2aeae:	e7f6      	b.n	2ae9e <att_req_sent+0xa>

0002aeb0 <att_cfm_sent>:
{
   2aeb0:	b570      	push	{r4, r5, r6, lr}
   2aeb2:	4604      	mov	r4, r0
   2aeb4:	460d      	mov	r5, r1
	if (!err) {
   2aeb6:	4616      	mov	r6, r2
   2aeb8:	b12a      	cbz	r2, 2aec6 <att_cfm_sent+0x16>
	chan_cfm_sent(conn, user_data, err);
   2aeba:	4632      	mov	r2, r6
   2aebc:	4629      	mov	r1, r5
   2aebe:	4620      	mov	r0, r4
   2aec0:	f7ff fd05 	bl	2a8ce <chan_cfm_sent>
}
   2aec4:	bd70      	pop	{r4, r5, r6, pc}
		att_sent(conn, user_data);
   2aec6:	f7ff ffc1 	bl	2ae4c <att_sent>
   2aeca:	e7f6      	b.n	2aeba <att_cfm_sent+0xa>

0002aecc <att_rsp_sent>:
{
   2aecc:	b570      	push	{r4, r5, r6, lr}
   2aece:	4604      	mov	r4, r0
   2aed0:	460d      	mov	r5, r1
	if (!err) {
   2aed2:	4616      	mov	r6, r2
   2aed4:	b12a      	cbz	r2, 2aee2 <att_rsp_sent+0x16>
	chan_rsp_sent(conn, user_data, err);
   2aed6:	4632      	mov	r2, r6
   2aed8:	4629      	mov	r1, r5
   2aeda:	4620      	mov	r0, r4
   2aedc:	f7ff fd0a 	bl	2a8f4 <chan_rsp_sent>
}
   2aee0:	bd70      	pop	{r4, r5, r6, pc}
		att_sent(conn, user_data);
   2aee2:	f7ff ffb3 	bl	2ae4c <att_sent>
   2aee6:	e7f6      	b.n	2aed6 <att_rsp_sent+0xa>

0002aee8 <att_indicate>:
{
   2aee8:	b538      	push	{r3, r4, r5, lr}
   2aeea:	4605      	mov	r5, r0
   2aeec:	460c      	mov	r4, r1
	return net_buf_simple_pull_le16(&buf->b);
   2aeee:	f101 000c 	add.w	r0, r1, #12
   2aef2:	f001 fbff 	bl	2c6f4 <net_buf_simple_pull_le16>
   2aef6:	4601      	mov	r1, r0
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   2aef8:	8a23      	ldrh	r3, [r4, #16]
   2aefa:	68e2      	ldr	r2, [r4, #12]
   2aefc:	6828      	ldr	r0, [r5, #0]
   2aefe:	6800      	ldr	r0, [r0, #0]
   2af00:	f001 f839 	bl	2bf76 <bt_gatt_notification>
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_CONFIRM, 0);
   2af04:	2200      	movs	r2, #0
   2af06:	211e      	movs	r1, #30
   2af08:	4628      	mov	r0, r5
   2af0a:	f7f0 f9f7 	bl	1b2fc <bt_att_chan_create_pdu>
	if (!buf) {
   2af0e:	b118      	cbz	r0, 2af18 <att_indicate+0x30>
   2af10:	4601      	mov	r1, r0
	bt_att_chan_send_rsp(chan, buf);
   2af12:	4628      	mov	r0, r5
   2af14:	f7ff fdaf 	bl	2aa76 <bt_att_chan_send_rsp>
}
   2af18:	2000      	movs	r0, #0
   2af1a:	bd38      	pop	{r3, r4, r5, pc}

0002af1c <send_err_rsp>:
	if (!req) {
   2af1c:	b901      	cbnz	r1, 2af20 <send_err_rsp+0x4>
   2af1e:	4770      	bx	lr
{
   2af20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2af24:	4606      	mov	r6, r0
   2af26:	4615      	mov	r5, r2
   2af28:	461c      	mov	r4, r3
   2af2a:	460f      	mov	r7, r1
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   2af2c:	2204      	movs	r2, #4
   2af2e:	2101      	movs	r1, #1
   2af30:	f7f0 f9e4 	bl	1b2fc <bt_att_chan_create_pdu>
	if (!buf) {
   2af34:	4680      	mov	r8, r0
   2af36:	b158      	cbz	r0, 2af50 <send_err_rsp+0x34>
	return net_buf_simple_add(&buf->b, len);
   2af38:	2104      	movs	r1, #4
   2af3a:	300c      	adds	r0, #12
   2af3c:	f001 fba0 	bl	2c680 <net_buf_simple_add>
	rsp->request = req;
   2af40:	7007      	strb	r7, [r0, #0]
	rsp->handle = sys_cpu_to_le16(handle);
   2af42:	f8a0 5001 	strh.w	r5, [r0, #1]
	rsp->error = err;
   2af46:	70c4      	strb	r4, [r0, #3]
	bt_att_chan_send_rsp(chan, buf);
   2af48:	4641      	mov	r1, r8
   2af4a:	4630      	mov	r0, r6
   2af4c:	f7ff fd93 	bl	2aa76 <bt_att_chan_send_rsp>
}
   2af50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002af54 <att_write_cmd>:
{
   2af54:	b530      	push	{r4, r5, lr}
   2af56:	b085      	sub	sp, #20
   2af58:	4605      	mov	r5, r0
   2af5a:	460c      	mov	r4, r1
	return net_buf_simple_pull_le16(&buf->b);
   2af5c:	f101 000c 	add.w	r0, r1, #12
   2af60:	f001 fbc8 	bl	2c6f4 <net_buf_simple_pull_le16>
   2af64:	4603      	mov	r3, r0
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   2af66:	68e2      	ldr	r2, [r4, #12]
   2af68:	8a21      	ldrh	r1, [r4, #16]
   2af6a:	9102      	str	r1, [sp, #8]
   2af6c:	9201      	str	r2, [sp, #4]
   2af6e:	2100      	movs	r1, #0
   2af70:	9100      	str	r1, [sp, #0]
   2af72:	460a      	mov	r2, r1
   2af74:	4628      	mov	r0, r5
   2af76:	f7f0 fbf5 	bl	1b764 <att_write_rsp>
}
   2af7a:	b005      	add	sp, #20
   2af7c:	bd30      	pop	{r4, r5, pc}

0002af7e <att_write_req>:
{
   2af7e:	b530      	push	{r4, r5, lr}
   2af80:	b085      	sub	sp, #20
   2af82:	4605      	mov	r5, r0
   2af84:	460c      	mov	r4, r1
   2af86:	f101 000c 	add.w	r0, r1, #12
   2af8a:	f001 fbb3 	bl	2c6f4 <net_buf_simple_pull_le16>
   2af8e:	4603      	mov	r3, r0
			     handle, 0, buf->data, buf->len);
   2af90:	68e2      	ldr	r2, [r4, #12]
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   2af92:	8a21      	ldrh	r1, [r4, #16]
   2af94:	9102      	str	r1, [sp, #8]
   2af96:	9201      	str	r2, [sp, #4]
   2af98:	2200      	movs	r2, #0
   2af9a:	9200      	str	r2, [sp, #0]
   2af9c:	2213      	movs	r2, #19
   2af9e:	2112      	movs	r1, #18
   2afa0:	4628      	mov	r0, r5
   2afa2:	f7f0 fbdf 	bl	1b764 <att_write_rsp>
}
   2afa6:	b005      	add	sp, #20
   2afa8:	bd30      	pop	{r4, r5, pc}

0002afaa <att_read_group_req>:
{
   2afaa:	b5f0      	push	{r4, r5, r6, r7, lr}
   2afac:	b089      	sub	sp, #36	; 0x24
   2afae:	4605      	mov	r5, r0
   2afb0:	4608      	mov	r0, r1
	uint8_t uuid_len = buf->len - sizeof(*req);
   2afb2:	7c0c      	ldrb	r4, [r1, #16]
   2afb4:	3c04      	subs	r4, #4
   2afb6:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   2afb8:	2c02      	cmp	r4, #2
   2afba:	d001      	beq.n	2afc0 <att_read_group_req+0x16>
   2afbc:	2c10      	cmp	r4, #16
   2afbe:	d142      	bne.n	2b046 <att_read_group_req+0x9c>
	return net_buf_simple_pull_mem(&buf->b, len);
   2afc0:	2104      	movs	r1, #4
   2afc2:	300c      	adds	r0, #12
   2afc4:	f001 fb86 	bl	2c6d4 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   2afc8:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   2afca:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   2afcc:	4622      	mov	r2, r4
   2afce:	1d01      	adds	r1, r0, #4
   2afd0:	a801      	add	r0, sp, #4
   2afd2:	f7fe fe8c 	bl	29cee <bt_uuid_create>
   2afd6:	b3c8      	cbz	r0, 2b04c <att_read_group_req+0xa2>
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   2afd8:	f10d 0216 	add.w	r2, sp, #22
   2afdc:	4639      	mov	r1, r7
   2afde:	4630      	mov	r0, r6
   2afe0:	f7ff fb45 	bl	2a66e <range_is_valid>
   2afe4:	b1f0      	cbz	r0, 2b024 <att_read_group_req+0x7a>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   2afe6:	2300      	movs	r3, #0
   2afe8:	f88d 3018 	strb.w	r3, [sp, #24]
   2afec:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   2aff0:	f8ad 301a 	strh.w	r3, [sp, #26]
   2aff4:	a906      	add	r1, sp, #24
   2aff6:	a801      	add	r0, sp, #4
   2aff8:	f7fe fe5b 	bl	29cb2 <bt_uuid_cmp>
   2affc:	b158      	cbz	r0, 2b016 <att_read_group_req+0x6c>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   2affe:	2300      	movs	r3, #0
   2b000:	f88d 301c 	strb.w	r3, [sp, #28]
   2b004:	f642 0301 	movw	r3, #10241	; 0x2801
   2b008:	f8ad 301e 	strh.w	r3, [sp, #30]
   2b00c:	a907      	add	r1, sp, #28
   2b00e:	a801      	add	r0, sp, #4
   2b010:	f7fe fe4f 	bl	29cb2 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   2b014:	b978      	cbnz	r0, 2b036 <att_read_group_req+0x8c>
	return att_read_group_rsp(chan, &u.uuid, start_handle, end_handle);
   2b016:	463b      	mov	r3, r7
   2b018:	4632      	mov	r2, r6
   2b01a:	a901      	add	r1, sp, #4
   2b01c:	4628      	mov	r0, r5
   2b01e:	f7f0 fc75 	bl	1b90c <att_read_group_rsp>
   2b022:	e011      	b.n	2b048 <att_read_group_req+0x9e>
		send_err_rsp(chan, BT_ATT_OP_READ_GROUP_REQ, err_handle,
   2b024:	2301      	movs	r3, #1
   2b026:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   2b02a:	2110      	movs	r1, #16
   2b02c:	4628      	mov	r0, r5
   2b02e:	f7ff ff75 	bl	2af1c <send_err_rsp>
		return 0;
   2b032:	2000      	movs	r0, #0
   2b034:	e008      	b.n	2b048 <att_read_group_req+0x9e>
		send_err_rsp(chan, BT_ATT_OP_READ_GROUP_REQ, start_handle,
   2b036:	2310      	movs	r3, #16
   2b038:	4632      	mov	r2, r6
   2b03a:	4619      	mov	r1, r3
   2b03c:	4628      	mov	r0, r5
   2b03e:	f7ff ff6d 	bl	2af1c <send_err_rsp>
		return 0;
   2b042:	2000      	movs	r0, #0
   2b044:	e000      	b.n	2b048 <att_read_group_req+0x9e>
		return BT_ATT_ERR_INVALID_PDU;
   2b046:	2004      	movs	r0, #4
}
   2b048:	b009      	add	sp, #36	; 0x24
   2b04a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_ATT_ERR_UNLIKELY;
   2b04c:	200e      	movs	r0, #14
   2b04e:	e7fb      	b.n	2b048 <att_read_group_req+0x9e>

0002b050 <att_read_blob_req>:
{
   2b050:	b500      	push	{lr}
   2b052:	b083      	sub	sp, #12
	req = (void *)buf->data;
   2b054:	68ca      	ldr	r2, [r1, #12]
	handle = sys_le16_to_cpu(req->handle);
   2b056:	8813      	ldrh	r3, [r2, #0]
	offset = sys_le16_to_cpu(req->offset);
   2b058:	8852      	ldrh	r2, [r2, #2]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   2b05a:	9200      	str	r2, [sp, #0]
   2b05c:	220d      	movs	r2, #13
   2b05e:	210c      	movs	r1, #12
   2b060:	f7f0 fd48 	bl	1baf4 <att_read_rsp>
}
   2b064:	b003      	add	sp, #12
   2b066:	f85d fb04 	ldr.w	pc, [sp], #4

0002b06a <att_read_req>:
{
   2b06a:	b500      	push	{lr}
   2b06c:	b083      	sub	sp, #12
	req = (void *)buf->data;
   2b06e:	68cb      	ldr	r3, [r1, #12]
	handle = sys_le16_to_cpu(req->handle);
   2b070:	881b      	ldrh	r3, [r3, #0]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   2b072:	2200      	movs	r2, #0
   2b074:	9200      	str	r2, [sp, #0]
   2b076:	220b      	movs	r2, #11
   2b078:	210a      	movs	r1, #10
   2b07a:	f7f0 fd3b 	bl	1baf4 <att_read_rsp>
}
   2b07e:	b003      	add	sp, #12
   2b080:	f85d fb04 	ldr.w	pc, [sp], #4

0002b084 <att_read_type_req>:
{
   2b084:	b5f0      	push	{r4, r5, r6, r7, lr}
   2b086:	b087      	sub	sp, #28
   2b088:	4605      	mov	r5, r0
   2b08a:	4608      	mov	r0, r1
	uint8_t uuid_len = buf->len - sizeof(*req);
   2b08c:	7c0c      	ldrb	r4, [r1, #16]
   2b08e:	3c04      	subs	r4, #4
   2b090:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   2b092:	2c02      	cmp	r4, #2
   2b094:	d001      	beq.n	2b09a <att_read_type_req+0x16>
   2b096:	2c10      	cmp	r4, #16
   2b098:	d123      	bne.n	2b0e2 <att_read_type_req+0x5e>
   2b09a:	2104      	movs	r1, #4
   2b09c:	300c      	adds	r0, #12
   2b09e:	f001 fb19 	bl	2c6d4 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   2b0a2:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   2b0a4:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   2b0a6:	4622      	mov	r2, r4
   2b0a8:	1d01      	adds	r1, r0, #4
   2b0aa:	a801      	add	r0, sp, #4
   2b0ac:	f7fe fe1f 	bl	29cee <bt_uuid_create>
   2b0b0:	b1c8      	cbz	r0, 2b0e6 <att_read_type_req+0x62>
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   2b0b2:	f10d 0216 	add.w	r2, sp, #22
   2b0b6:	4639      	mov	r1, r7
   2b0b8:	4630      	mov	r0, r6
   2b0ba:	f7ff fad8 	bl	2a66e <range_is_valid>
   2b0be:	b138      	cbz	r0, 2b0d0 <att_read_type_req+0x4c>
	return att_read_type_rsp(chan, &u.uuid, start_handle, end_handle);
   2b0c0:	463b      	mov	r3, r7
   2b0c2:	4632      	mov	r2, r6
   2b0c4:	a901      	add	r1, sp, #4
   2b0c6:	4628      	mov	r0, r5
   2b0c8:	f7f0 fd6e 	bl	1bba8 <att_read_type_rsp>
}
   2b0cc:	b007      	add	sp, #28
   2b0ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
		send_err_rsp(chan, BT_ATT_OP_READ_TYPE_REQ, err_handle,
   2b0d0:	2301      	movs	r3, #1
   2b0d2:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   2b0d6:	2108      	movs	r1, #8
   2b0d8:	4628      	mov	r0, r5
   2b0da:	f7ff ff1f 	bl	2af1c <send_err_rsp>
		return 0;
   2b0de:	2000      	movs	r0, #0
   2b0e0:	e7f4      	b.n	2b0cc <att_read_type_req+0x48>
		return BT_ATT_ERR_INVALID_PDU;
   2b0e2:	2004      	movs	r0, #4
   2b0e4:	e7f2      	b.n	2b0cc <att_read_type_req+0x48>
		return BT_ATT_ERR_UNLIKELY;
   2b0e6:	200e      	movs	r0, #14
   2b0e8:	e7f0      	b.n	2b0cc <att_read_type_req+0x48>

0002b0ea <att_find_type_req>:
{
   2b0ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2b0ee:	b087      	sub	sp, #28
   2b0f0:	4607      	mov	r7, r0
   2b0f2:	460c      	mov	r4, r1
   2b0f4:	2106      	movs	r1, #6
   2b0f6:	f104 000c 	add.w	r0, r4, #12
   2b0fa:	f001 faeb 	bl	2c6d4 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   2b0fe:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   2b100:	8846      	ldrh	r6, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   2b102:	f8b0 8004 	ldrh.w	r8, [r0, #4]
	value = buf->data;
   2b106:	f8d4 900c 	ldr.w	r9, [r4, #12]
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   2b10a:	f10d 020e 	add.w	r2, sp, #14
   2b10e:	4631      	mov	r1, r6
   2b110:	4628      	mov	r0, r5
   2b112:	f7ff faac 	bl	2a66e <range_is_valid>
   2b116:	b1d0      	cbz	r0, 2b14e <att_find_type_req+0x64>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   2b118:	2300      	movs	r3, #0
   2b11a:	f88d 3010 	strb.w	r3, [sp, #16]
   2b11e:	f8ad 8012 	strh.w	r8, [sp, #18]
   2b122:	f88d 3014 	strb.w	r3, [sp, #20]
   2b126:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   2b12a:	f8ad 3016 	strh.w	r3, [sp, #22]
   2b12e:	a905      	add	r1, sp, #20
   2b130:	a804      	add	r0, sp, #16
   2b132:	f7fe fdbe 	bl	29cb2 <bt_uuid_cmp>
   2b136:	b998      	cbnz	r0, 2b160 <att_find_type_req+0x76>
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   2b138:	7c23      	ldrb	r3, [r4, #16]
   2b13a:	9300      	str	r3, [sp, #0]
   2b13c:	464b      	mov	r3, r9
   2b13e:	4632      	mov	r2, r6
   2b140:	4629      	mov	r1, r5
   2b142:	4638      	mov	r0, r7
   2b144:	f7f0 fd7a 	bl	1bc3c <att_find_type_rsp>
}
   2b148:	b007      	add	sp, #28
   2b14a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		send_err_rsp(chan, BT_ATT_OP_FIND_TYPE_REQ, err_handle,
   2b14e:	2301      	movs	r3, #1
   2b150:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   2b154:	2106      	movs	r1, #6
   2b156:	4638      	mov	r0, r7
   2b158:	f7ff fee0 	bl	2af1c <send_err_rsp>
		return 0;
   2b15c:	2000      	movs	r0, #0
   2b15e:	e7f3      	b.n	2b148 <att_find_type_req+0x5e>
		send_err_rsp(chan, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
   2b160:	230a      	movs	r3, #10
   2b162:	462a      	mov	r2, r5
   2b164:	2106      	movs	r1, #6
   2b166:	4638      	mov	r0, r7
   2b168:	f7ff fed8 	bl	2af1c <send_err_rsp>
		return 0;
   2b16c:	2000      	movs	r0, #0
   2b16e:	e7eb      	b.n	2b148 <att_find_type_req+0x5e>

0002b170 <att_find_info_req>:
{
   2b170:	b570      	push	{r4, r5, r6, lr}
   2b172:	b082      	sub	sp, #8
   2b174:	4604      	mov	r4, r0
	req = (void *)buf->data;
   2b176:	68cb      	ldr	r3, [r1, #12]
	start_handle = sys_le16_to_cpu(req->start_handle);
   2b178:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   2b17a:	885e      	ldrh	r6, [r3, #2]
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   2b17c:	f10d 0206 	add.w	r2, sp, #6
   2b180:	4631      	mov	r1, r6
   2b182:	4628      	mov	r0, r5
   2b184:	f7ff fa73 	bl	2a66e <range_is_valid>
   2b188:	b130      	cbz	r0, 2b198 <att_find_info_req+0x28>
	return att_find_info_rsp(chan, start_handle, end_handle);
   2b18a:	4632      	mov	r2, r6
   2b18c:	4629      	mov	r1, r5
   2b18e:	4620      	mov	r0, r4
   2b190:	f7f0 fd9e 	bl	1bcd0 <att_find_info_rsp>
}
   2b194:	b002      	add	sp, #8
   2b196:	bd70      	pop	{r4, r5, r6, pc}
		send_err_rsp(chan, BT_ATT_OP_FIND_INFO_REQ, err_handle,
   2b198:	2301      	movs	r3, #1
   2b19a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   2b19e:	2104      	movs	r1, #4
   2b1a0:	4620      	mov	r0, r4
   2b1a2:	f7ff febb 	bl	2af1c <send_err_rsp>
		return 0;
   2b1a6:	2000      	movs	r0, #0
   2b1a8:	e7f4      	b.n	2b194 <att_find_info_req+0x24>

0002b1aa <att_mtu_req>:
{
   2b1aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b1ae:	4604      	mov	r4, r0
   2b1b0:	460d      	mov	r5, r1
	struct bt_conn *conn = chan->att->conn;
   2b1b2:	f850 3b90 	ldr.w	r3, [r0], #144
   2b1b6:	681f      	ldr	r7, [r3, #0]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   2b1b8:	2103      	movs	r1, #3
   2b1ba:	f7ff faae 	bl	2a71a <atomic_test_bit>
   2b1be:	bb78      	cbnz	r0, 2b220 <att_mtu_req+0x76>
	req = (void *)buf->data;
   2b1c0:	68eb      	ldr	r3, [r5, #12]
	mtu_client = sys_le16_to_cpu(req->mtu);
   2b1c2:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   2b1c4:	2e16      	cmp	r6, #22
   2b1c6:	d92d      	bls.n	2b224 <att_mtu_req+0x7a>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   2b1c8:	2202      	movs	r2, #2
   2b1ca:	2103      	movs	r1, #3
   2b1cc:	4638      	mov	r0, r7
   2b1ce:	f7f0 fb39 	bl	1b844 <bt_att_create_pdu>
	if (!pdu) {
   2b1d2:	4680      	mov	r8, r0
   2b1d4:	b340      	cbz	r0, 2b228 <att_mtu_req+0x7e>
	return net_buf_simple_add(&buf->b, len);
   2b1d6:	2102      	movs	r1, #2
   2b1d8:	300c      	adds	r0, #12
   2b1da:	f001 fa51 	bl	2c680 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   2b1de:	2500      	movs	r5, #0
   2b1e0:	f06f 0308 	mvn.w	r3, #8
   2b1e4:	7003      	strb	r3, [r0, #0]
   2b1e6:	7045      	strb	r5, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu);
   2b1e8:	4641      	mov	r1, r8
   2b1ea:	4620      	mov	r0, r4
   2b1ec:	f7ff fc43 	bl	2aa76 <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   2b1f0:	2ef7      	cmp	r6, #247	; 0xf7
   2b1f2:	bf28      	it	cs
   2b1f4:	26f7      	movcs	r6, #247	; 0xf7
   2b1f6:	8366      	strh	r6, [r4, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   2b1f8:	8566      	strh	r6, [r4, #42]	; 0x2a
	atomic_set_bit(conn->flags, BT_CONN_ATT_MTU_EXCHANGED);
   2b1fa:	3704      	adds	r7, #4
   2b1fc:	f3bf 8f5b 	dmb	ish
   2b200:	e857 3f00 	ldrex	r3, [r7]
   2b204:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   2b208:	e847 3200 	strex	r2, r3, [r7]
   2b20c:	2a00      	cmp	r2, #0
   2b20e:	d1f7      	bne.n	2b200 <att_mtu_req+0x56>
   2b210:	f3bf 8f5b 	dmb	ish
	att_chan_mtu_updated(chan);
   2b214:	4620      	mov	r0, r4
   2b216:	f7ff fc3b 	bl	2aa90 <att_chan_mtu_updated>
	return 0;
   2b21a:	4628      	mov	r0, r5
}
   2b21c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   2b220:	2006      	movs	r0, #6
   2b222:	e7fb      	b.n	2b21c <att_mtu_req+0x72>
		return BT_ATT_ERR_INVALID_PDU;
   2b224:	2004      	movs	r0, #4
   2b226:	e7f9      	b.n	2b21c <att_mtu_req+0x72>
		return BT_ATT_ERR_UNLIKELY;
   2b228:	200e      	movs	r0, #14
   2b22a:	e7f7      	b.n	2b21c <att_mtu_req+0x72>

0002b22c <att_handle_exec_write_rsp>:
{
   2b22c:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   2b22e:	2300      	movs	r3, #0
   2b230:	8a0a      	ldrh	r2, [r1, #16]
   2b232:	68c9      	ldr	r1, [r1, #12]
   2b234:	f7f0 fddc 	bl	1bdf0 <att_handle_rsp>
}
   2b238:	bd08      	pop	{r3, pc}

0002b23a <att_handle_prepare_write_rsp>:
{
   2b23a:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   2b23c:	2300      	movs	r3, #0
   2b23e:	8a0a      	ldrh	r2, [r1, #16]
   2b240:	68c9      	ldr	r1, [r1, #12]
   2b242:	f7f0 fdd5 	bl	1bdf0 <att_handle_rsp>
}
   2b246:	bd08      	pop	{r3, pc}

0002b248 <att_handle_write_rsp>:
{
   2b248:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   2b24a:	2300      	movs	r3, #0
   2b24c:	8a0a      	ldrh	r2, [r1, #16]
   2b24e:	68c9      	ldr	r1, [r1, #12]
   2b250:	f7f0 fdce 	bl	1bdf0 <att_handle_rsp>
}
   2b254:	bd08      	pop	{r3, pc}

0002b256 <att_handle_read_group_rsp>:
{
   2b256:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   2b258:	2300      	movs	r3, #0
   2b25a:	8a0a      	ldrh	r2, [r1, #16]
   2b25c:	68c9      	ldr	r1, [r1, #12]
   2b25e:	f7f0 fdc7 	bl	1bdf0 <att_handle_rsp>
}
   2b262:	bd08      	pop	{r3, pc}

0002b264 <att_handle_read_mult_vl_rsp>:
{
   2b264:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   2b266:	2300      	movs	r3, #0
   2b268:	8a0a      	ldrh	r2, [r1, #16]
   2b26a:	68c9      	ldr	r1, [r1, #12]
   2b26c:	f7f0 fdc0 	bl	1bdf0 <att_handle_rsp>
}
   2b270:	bd08      	pop	{r3, pc}

0002b272 <att_handle_read_mult_rsp>:
{
   2b272:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   2b274:	2300      	movs	r3, #0
   2b276:	8a0a      	ldrh	r2, [r1, #16]
   2b278:	68c9      	ldr	r1, [r1, #12]
   2b27a:	f7f0 fdb9 	bl	1bdf0 <att_handle_rsp>
}
   2b27e:	bd08      	pop	{r3, pc}

0002b280 <att_handle_read_blob_rsp>:
{
   2b280:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   2b282:	2300      	movs	r3, #0
   2b284:	8a0a      	ldrh	r2, [r1, #16]
   2b286:	68c9      	ldr	r1, [r1, #12]
   2b288:	f7f0 fdb2 	bl	1bdf0 <att_handle_rsp>
}
   2b28c:	bd08      	pop	{r3, pc}

0002b28e <att_handle_read_rsp>:
{
   2b28e:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   2b290:	2300      	movs	r3, #0
   2b292:	8a0a      	ldrh	r2, [r1, #16]
   2b294:	68c9      	ldr	r1, [r1, #12]
   2b296:	f7f0 fdab 	bl	1bdf0 <att_handle_rsp>
}
   2b29a:	bd08      	pop	{r3, pc}

0002b29c <att_handle_read_type_rsp>:
{
   2b29c:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   2b29e:	2300      	movs	r3, #0
   2b2a0:	8a0a      	ldrh	r2, [r1, #16]
   2b2a2:	68c9      	ldr	r1, [r1, #12]
   2b2a4:	f7f0 fda4 	bl	1bdf0 <att_handle_rsp>
}
   2b2a8:	bd08      	pop	{r3, pc}

0002b2aa <att_handle_find_type_rsp>:
{
   2b2aa:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   2b2ac:	2300      	movs	r3, #0
   2b2ae:	8a0a      	ldrh	r2, [r1, #16]
   2b2b0:	68c9      	ldr	r1, [r1, #12]
   2b2b2:	f7f0 fd9d 	bl	1bdf0 <att_handle_rsp>
}
   2b2b6:	bd08      	pop	{r3, pc}

0002b2b8 <att_handle_find_info_rsp>:
{
   2b2b8:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   2b2ba:	2300      	movs	r3, #0
   2b2bc:	8a0a      	ldrh	r2, [r1, #16]
   2b2be:	68c9      	ldr	r1, [r1, #12]
   2b2c0:	f7f0 fd96 	bl	1bdf0 <att_handle_rsp>
}
   2b2c4:	bd08      	pop	{r3, pc}

0002b2c6 <att_mtu_rsp>:
{
   2b2c6:	b570      	push	{r4, r5, r6, lr}
   2b2c8:	4604      	mov	r4, r0
	rsp = (void *)buf->data;
   2b2ca:	68ce      	ldr	r6, [r1, #12]
	mtu = sys_le16_to_cpu(rsp->mtu);
   2b2cc:	8833      	ldrh	r3, [r6, #0]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   2b2ce:	2b16      	cmp	r3, #22
   2b2d0:	d90e      	bls.n	2b2f0 <att_mtu_rsp+0x2a>
   2b2d2:	460d      	mov	r5, r1
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   2b2d4:	2bf7      	cmp	r3, #247	; 0xf7
   2b2d6:	bf28      	it	cs
   2b2d8:	23f7      	movcs	r3, #247	; 0xf7
   2b2da:	8343      	strh	r3, [r0, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   2b2dc:	8543      	strh	r3, [r0, #42]	; 0x2a
	att_chan_mtu_updated(chan);
   2b2de:	f7ff fbd7 	bl	2aa90 <att_chan_mtu_updated>
	return att_handle_rsp(chan, rsp, buf->len, 0);
   2b2e2:	2300      	movs	r3, #0
   2b2e4:	8a2a      	ldrh	r2, [r5, #16]
   2b2e6:	4631      	mov	r1, r6
   2b2e8:	4620      	mov	r0, r4
   2b2ea:	f7f0 fd81 	bl	1bdf0 <att_handle_rsp>
}
   2b2ee:	bd70      	pop	{r4, r5, r6, pc}
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   2b2f0:	2304      	movs	r3, #4
   2b2f2:	2200      	movs	r2, #0
   2b2f4:	4611      	mov	r1, r2
   2b2f6:	f7f0 fd7b 	bl	1bdf0 <att_handle_rsp>
   2b2fa:	e7f8      	b.n	2b2ee <att_mtu_rsp+0x28>

0002b2fc <att_confirm>:
{
   2b2fc:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   2b2fe:	2300      	movs	r3, #0
   2b300:	8a0a      	ldrh	r2, [r1, #16]
   2b302:	68c9      	ldr	r1, [r1, #12]
   2b304:	f7f0 fd74 	bl	1bdf0 <att_handle_rsp>
}
   2b308:	bd08      	pop	{r3, pc}

0002b30a <att_chan_detach>:
{
   2b30a:	b538      	push	{r3, r4, r5, lr}
   2b30c:	4605      	mov	r5, r0
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   2b30e:	4601      	mov	r1, r0
   2b310:	f851 0be0 	ldr.w	r0, [r1], #224
   2b314:	3024      	adds	r0, #36	; 0x24
   2b316:	f7ff f98f 	bl	2a638 <sys_slist_find_and_remove>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   2b31a:	e005      	b.n	2b328 <att_chan_detach+0x1e>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   2b31c:	69a0      	ldr	r0, [r4, #24]
   2b31e:	f7ef fd81 	bl	1ae24 <tx_meta_data_free>
		net_buf_unref(buf);
   2b322:	4620      	mov	r0, r4
   2b324:	f001 f965 	bl	2c5f2 <net_buf_unref>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   2b328:	2200      	movs	r2, #0
   2b32a:	2300      	movs	r3, #0
   2b32c:	f105 0098 	add.w	r0, r5, #152	; 0x98
   2b330:	f001 f91f 	bl	2c572 <net_buf_get>
   2b334:	4604      	mov	r4, r0
   2b336:	2800      	cmp	r0, #0
   2b338:	d1f0      	bne.n	2b31c <att_chan_detach+0x12>
	if (chan->req) {
   2b33a:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
   2b33e:	b12b      	cbz	r3, 2b34c <att_chan_detach+0x42>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   2b340:	230e      	movs	r3, #14
   2b342:	2200      	movs	r2, #0
   2b344:	4611      	mov	r1, r2
   2b346:	4628      	mov	r0, r5
   2b348:	f7f0 fd52 	bl	1bdf0 <att_handle_rsp>
	chan->att = NULL;
   2b34c:	2300      	movs	r3, #0
   2b34e:	602b      	str	r3, [r5, #0]
}
   2b350:	bd38      	pop	{r3, r4, r5, pc}

0002b352 <bt_att_disconnected>:
{
   2b352:	b538      	push	{r3, r4, r5, lr}
   2b354:	4604      	mov	r4, r0
	struct bt_att *att = att_chan->att;
   2b356:	f850 5c04 	ldr.w	r5, [r0, #-4]
	if (!att_chan->att) {
   2b35a:	b125      	cbz	r5, 2b366 <bt_att_disconnected+0x14>
   2b35c:	3804      	subs	r0, #4
	att_chan_detach(att_chan);
   2b35e:	f7ff ffd4 	bl	2b30a <att_chan_detach>
	return list->head;
   2b362:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (!sys_slist_is_empty(&att->chans)) {
   2b364:	b103      	cbz	r3, 2b368 <bt_att_disconnected+0x16>
}
   2b366:	bd38      	pop	{r3, r4, r5, pc}
	att_reset(att);
   2b368:	4628      	mov	r0, r5
   2b36a:	f7f0 fdc1 	bl	1bef0 <att_reset>
	bt_gatt_disconnected(le_chan->chan.conn);
   2b36e:	6820      	ldr	r0, [r4, #0]
   2b370:	f7f2 f9b0 	bl	1d6d4 <bt_gatt_disconnected>
   2b374:	e7f7      	b.n	2b366 <bt_att_disconnected+0x14>

0002b376 <bt_att_send>:
{
   2b376:	b538      	push	{r3, r4, r5, lr}
   2b378:	460c      	mov	r4, r1
	att = att_get(conn);
   2b37a:	f7ef fbe7 	bl	1ab4c <att_get>
	if (!att) {
   2b37e:	b148      	cbz	r0, 2b394 <bt_att_send+0x1e>
   2b380:	4605      	mov	r5, r0
	net_buf_put(&att->tx_queue, buf);
   2b382:	4621      	mov	r1, r4
   2b384:	300c      	adds	r0, #12
   2b386:	f001 f930 	bl	2c5ea <net_buf_put>
	att_send_process(att);
   2b38a:	4628      	mov	r0, r5
   2b38c:	f7ff fb20 	bl	2a9d0 <att_send_process>
	return 0;
   2b390:	2000      	movs	r0, #0
}
   2b392:	bd38      	pop	{r3, r4, r5, pc}
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   2b394:	69a0      	ldr	r0, [r4, #24]
   2b396:	f7ef fd45 	bl	1ae24 <tx_meta_data_free>
		net_buf_unref(buf);
   2b39a:	4620      	mov	r0, r4
   2b39c:	f001 f929 	bl	2c5f2 <net_buf_unref>
		return -ENOTCONN;
   2b3a0:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2b3a4:	e7f5      	b.n	2b392 <bt_att_send+0x1c>

0002b3a6 <bt_att_req_send>:
{
   2b3a6:	b510      	push	{r4, lr}
   2b3a8:	460c      	mov	r4, r1
	att = att_get(conn);
   2b3aa:	f7ef fbcf 	bl	1ab4c <att_get>
	if (!att) {
   2b3ae:	b170      	cbz	r0, 2b3ce <bt_att_req_send+0x28>
   2b3b0:	4603      	mov	r3, r0
	parent->next = child;
   2b3b2:	2200      	movs	r2, #0
   2b3b4:	6022      	str	r2, [r4, #0]
	return list->tail;
   2b3b6:	6882      	ldr	r2, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   2b3b8:	b132      	cbz	r2, 2b3c8 <bt_att_req_send+0x22>
	parent->next = child;
   2b3ba:	6014      	str	r4, [r2, #0]
	list->tail = node;
   2b3bc:	6084      	str	r4, [r0, #8]
	att_req_send_process(att);
   2b3be:	4618      	mov	r0, r3
   2b3c0:	f7ff fa26 	bl	2a810 <att_req_send_process>
	return 0;
   2b3c4:	2000      	movs	r0, #0
}
   2b3c6:	bd10      	pop	{r4, pc}
   2b3c8:	6084      	str	r4, [r0, #8]
	list->head = node;
   2b3ca:	6044      	str	r4, [r0, #4]
}
   2b3cc:	e7f7      	b.n	2b3be <bt_att_req_send+0x18>
		return -ENOTCONN;
   2b3ce:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2b3d2:	e7f8      	b.n	2b3c6 <bt_att_req_send+0x20>

0002b3d4 <bt_att_req_cancel>:
	struct bt_att *att;
	struct bt_att_chan *chan, *tmp;

	LOG_DBG("req %p", req);

	if (!conn || !req) {
   2b3d4:	b358      	cbz	r0, 2b42e <bt_att_req_cancel+0x5a>
{
   2b3d6:	b570      	push	{r4, r5, r6, lr}
   2b3d8:	460d      	mov	r5, r1
	if (!conn || !req) {
   2b3da:	b339      	cbz	r1, 2b42c <bt_att_req_cancel+0x58>
		return;
	}

	att = att_get(conn);
   2b3dc:	f7ef fbb6 	bl	1ab4c <att_get>
	if (!att) {
   2b3e0:	4606      	mov	r6, r0
   2b3e2:	b318      	cbz	r0, 2b42c <bt_att_req_cancel+0x58>
	return list->head;
   2b3e4:	6a40      	ldr	r0, [r0, #36]	; 0x24
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2b3e6:	b140      	cbz	r0, 2b3fa <bt_att_req_cancel+0x26>
   2b3e8:	38e0      	subs	r0, #224	; 0xe0
Z_GENLIST_PEEK_NEXT(slist, snode)
   2b3ea:	f110 04e0 	adds.w	r4, r0, #224	; 0xe0
   2b3ee:	d009      	beq.n	2b404 <bt_att_req_cancel+0x30>
	return node->next;
   2b3f0:	f8d0 40e0 	ldr.w	r4, [r0, #224]	; 0xe0
   2b3f4:	b134      	cbz	r4, 2b404 <bt_att_req_cancel+0x30>
   2b3f6:	3ce0      	subs	r4, #224	; 0xe0
   2b3f8:	e004      	b.n	2b404 <bt_att_req_cancel+0x30>
   2b3fa:	4604      	mov	r4, r0
   2b3fc:	e002      	b.n	2b404 <bt_att_req_cancel+0x30>
   2b3fe:	4623      	mov	r3, r4
   2b400:	4620      	mov	r0, r4
   2b402:	461c      	mov	r4, r3
   2b404:	b158      	cbz	r0, 2b41e <bt_att_req_cancel+0x4a>
		/* Check if request is outstanding */
		if (bt_att_chan_req_cancel(chan, req)) {
   2b406:	4629      	mov	r1, r5
   2b408:	f7f0 fde6 	bl	1bfd8 <bt_att_chan_req_cancel>
   2b40c:	b970      	cbnz	r0, 2b42c <bt_att_req_cancel+0x58>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2b40e:	2c00      	cmp	r4, #0
   2b410:	d0f5      	beq.n	2b3fe <bt_att_req_cancel+0x2a>
   2b412:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
   2b416:	2b00      	cmp	r3, #0
   2b418:	d0f2      	beq.n	2b400 <bt_att_req_cancel+0x2c>
   2b41a:	3be0      	subs	r3, #224	; 0xe0
   2b41c:	e7f0      	b.n	2b400 <bt_att_req_cancel+0x2c>
			return;
		}
	}

	/* Remove request from the list */
	sys_slist_find_and_remove(&att->reqs, &req->node);
   2b41e:	4629      	mov	r1, r5
   2b420:	1d30      	adds	r0, r6, #4
   2b422:	f7ff f909 	bl	2a638 <sys_slist_find_and_remove>

	bt_att_req_free(req);
   2b426:	4628      	mov	r0, r5
   2b428:	f7f0 fcca 	bl	1bdc0 <bt_att_req_free>
}
   2b42c:	bd70      	pop	{r4, r5, r6, pc}
   2b42e:	4770      	bx	lr

0002b430 <bt_att_find_req_by_user_data>:

struct bt_att_req *bt_att_find_req_by_user_data(struct bt_conn *conn, const void *user_data)
{
   2b430:	b510      	push	{r4, lr}
   2b432:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan;
	struct bt_att_req *req;

	att = att_get(conn);
   2b434:	f7ef fb8a 	bl	1ab4c <att_get>
	if (!att) {
   2b438:	4601      	mov	r1, r0
   2b43a:	b308      	cbz	r0, 2b480 <bt_att_find_req_by_user_data+0x50>
	return list->head;
   2b43c:	6a43      	ldr	r3, [r0, #36]	; 0x24
		return NULL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   2b43e:	b113      	cbz	r3, 2b446 <bt_att_find_req_by_user_data+0x16>
   2b440:	3be0      	subs	r3, #224	; 0xe0
   2b442:	e000      	b.n	2b446 <bt_att_find_req_by_user_data+0x16>
   2b444:	3be0      	subs	r3, #224	; 0xe0
   2b446:	b173      	cbz	r3, 2b466 <bt_att_find_req_by_user_data+0x36>
		if (chan->req->user_data == user_data) {
   2b448:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
   2b44c:	68c2      	ldr	r2, [r0, #12]
   2b44e:	42a2      	cmp	r2, r4
   2b450:	d016      	beq.n	2b480 <bt_att_find_req_by_user_data+0x50>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2b452:	f113 02e0 	adds.w	r2, r3, #224	; 0xe0
   2b456:	d004      	beq.n	2b462 <bt_att_find_req_by_user_data+0x32>
	return node->next;
   2b458:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   2b45c:	2b00      	cmp	r3, #0
   2b45e:	d1f1      	bne.n	2b444 <bt_att_find_req_by_user_data+0x14>
   2b460:	e7f1      	b.n	2b446 <bt_att_find_req_by_user_data+0x16>
   2b462:	4613      	mov	r3, r2
   2b464:	e7ef      	b.n	2b446 <bt_att_find_req_by_user_data+0x16>
	return list->head;
   2b466:	6848      	ldr	r0, [r1, #4]
			return chan->req;
		}
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->reqs, req, node) {
   2b468:	b150      	cbz	r0, 2b480 <bt_att_find_req_by_user_data+0x50>
		if (req->user_data == user_data) {
   2b46a:	68c3      	ldr	r3, [r0, #12]
   2b46c:	42a3      	cmp	r3, r4
   2b46e:	d007      	beq.n	2b480 <bt_att_find_req_by_user_data+0x50>
	SYS_SLIST_FOR_EACH_CONTAINER(&att->reqs, req, node) {
   2b470:	4603      	mov	r3, r0
	return node->next;
   2b472:	6800      	ldr	r0, [r0, #0]
   2b474:	2800      	cmp	r0, #0
   2b476:	d0f7      	beq.n	2b468 <bt_att_find_req_by_user_data+0x38>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2b478:	2b00      	cmp	r3, #0
   2b47a:	d1f5      	bne.n	2b468 <bt_att_find_req_by_user_data+0x38>
   2b47c:	4618      	mov	r0, r3
   2b47e:	e7f3      	b.n	2b468 <bt_att_find_req_by_user_data+0x38>
			return req;
		}
	}

	return NULL;
}
   2b480:	bd10      	pop	{r4, pc}

0002b482 <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   2b482:	2001      	movs	r0, #1
   2b484:	4770      	bx	lr

0002b486 <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   2b486:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
   2b488:	f7ef fb60 	bl	1ab4c <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   2b48c:	b1b8      	cbz	r0, 2b4be <bt_att_clear_out_of_sync_sent+0x38>
	return list->head;
   2b48e:	6a43      	ldr	r3, [r0, #36]	; 0x24
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   2b490:	b103      	cbz	r3, 2b494 <bt_att_clear_out_of_sync_sent+0xe>
   2b492:	3be0      	subs	r3, #224	; 0xe0
   2b494:	b19b      	cbz	r3, 2b4be <bt_att_clear_out_of_sync_sent+0x38>
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
   2b496:	f103 0290 	add.w	r2, r3, #144	; 0x90
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2b49a:	f3bf 8f5b 	dmb	ish
   2b49e:	e852 0f00 	ldrex	r0, [r2]
   2b4a2:	f020 0020 	bic.w	r0, r0, #32
   2b4a6:	e842 0100 	strex	r1, r0, [r2]
   2b4aa:	2900      	cmp	r1, #0
   2b4ac:	d1f7      	bne.n	2b49e <bt_att_clear_out_of_sync_sent+0x18>
   2b4ae:	f3bf 8f5b 	dmb	ish
	return node->next;
   2b4b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   2b4b6:	2b00      	cmp	r3, #0
   2b4b8:	d0ec      	beq.n	2b494 <bt_att_clear_out_of_sync_sent+0xe>
   2b4ba:	3be0      	subs	r3, #224	; 0xe0
   2b4bc:	e7ea      	b.n	2b494 <bt_att_clear_out_of_sync_sent+0xe>
	}
}
   2b4be:	bd08      	pop	{r3, pc}

0002b4c0 <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   2b4c0:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   2b4c2:	2104      	movs	r1, #4
   2b4c4:	f7ff f865 	bl	2a592 <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   2b4c8:	b120      	cbz	r0, 2b4d4 <bt_att_out_of_sync_sent_on_fixed+0x14>
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
   2b4ca:	2105      	movs	r1, #5
   2b4cc:	308c      	adds	r0, #140	; 0x8c
   2b4ce:	f7ff f924 	bl	2a71a <atomic_test_bit>
}
   2b4d2:	bd08      	pop	{r3, pc}
		return false;
   2b4d4:	2000      	movs	r0, #0
   2b4d6:	e7fc      	b.n	2b4d2 <bt_att_out_of_sync_sent_on_fixed+0x12>

0002b4d8 <bt_att_set_tx_meta_data>:

void bt_att_set_tx_meta_data(struct net_buf *buf, bt_gatt_complete_func_t func, void *user_data,
			     enum bt_att_chan_opt chan_opt)
{
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   2b4d8:	6980      	ldr	r0, [r0, #24]

	data->func = func;
   2b4da:	6081      	str	r1, [r0, #8]
	data->user_data = user_data;
   2b4dc:	60c2      	str	r2, [r0, #12]
	data->attr_count = 1;
   2b4de:	2201      	movs	r2, #1
   2b4e0:	8082      	strh	r2, [r0, #4]
	data->chan_opt = chan_opt;
   2b4e2:	7403      	strb	r3, [r0, #16]
}
   2b4e4:	4770      	bx	lr

0002b4e6 <sys_slist_remove>:
Z_GENLIST_REMOVE(slist, snode)
   2b4e6:	460b      	mov	r3, r1
   2b4e8:	b139      	cbz	r1, 2b4fa <sys_slist_remove+0x14>
	return node->next;
   2b4ea:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
   2b4ec:	6019      	str	r1, [r3, #0]
	return list->tail;
   2b4ee:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   2b4f0:	428a      	cmp	r2, r1
   2b4f2:	d009      	beq.n	2b508 <sys_slist_remove+0x22>
	parent->next = child;
   2b4f4:	2300      	movs	r3, #0
   2b4f6:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2b4f8:	4770      	bx	lr
	return node->next;
   2b4fa:	6813      	ldr	r3, [r2, #0]
	list->head = node;
   2b4fc:	6003      	str	r3, [r0, #0]
	return list->tail;
   2b4fe:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   2b500:	428a      	cmp	r2, r1
   2b502:	d1f7      	bne.n	2b4f4 <sys_slist_remove+0xe>
	list->tail = node;
   2b504:	6043      	str	r3, [r0, #4]
}
   2b506:	e7f5      	b.n	2b4f4 <sys_slist_remove+0xe>
	list->tail = node;
   2b508:	6043      	str	r3, [r0, #4]
}
   2b50a:	e7f3      	b.n	2b4f4 <sys_slist_remove+0xe>

0002b50c <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2b50c:	b508      	push	{r3, lr}
   2b50e:	460a      	mov	r2, r1
	return list->head;
   2b510:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2b512:	2100      	movs	r1, #0
   2b514:	e001      	b.n	2b51a <sys_slist_find_and_remove+0xe>
   2b516:	4619      	mov	r1, r3
   2b518:	681b      	ldr	r3, [r3, #0]
   2b51a:	b12b      	cbz	r3, 2b528 <sys_slist_find_and_remove+0x1c>
   2b51c:	4293      	cmp	r3, r2
   2b51e:	d1fa      	bne.n	2b516 <sys_slist_find_and_remove+0xa>
   2b520:	f7ff ffe1 	bl	2b4e6 <sys_slist_remove>
   2b524:	2001      	movs	r0, #1
   2b526:	e000      	b.n	2b52a <sys_slist_find_and_remove+0x1e>
   2b528:	2000      	movs	r0, #0
   2b52a:	bd08      	pop	{r3, pc}

0002b52c <sys_mem_swap>:
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
   2b52c:	2300      	movs	r3, #0
   2b52e:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   2b532:	d210      	bcs.n	2b556 <sys_mem_swap+0x2a>
{
   2b534:	b500      	push	{lr}
		uint8_t tmp = ((uint8_t *)buf)[i];
   2b536:	f810 c003 	ldrb.w	ip, [r0, r3]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   2b53a:	1aca      	subs	r2, r1, r3
   2b53c:	3a01      	subs	r2, #1
   2b53e:	f810 e002 	ldrb.w	lr, [r0, r2]
   2b542:	f800 e003 	strb.w	lr, [r0, r3]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   2b546:	f800 c002 	strb.w	ip, [r0, r2]
	for (i = 0; i < (length/2); i++) {
   2b54a:	3301      	adds	r3, #1
   2b54c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   2b550:	d3f1      	bcc.n	2b536 <sys_mem_swap+0xa>
	}
}
   2b552:	f85d fb04 	ldr.w	pc, [sp], #4
   2b556:	4770      	bx	lr

0002b558 <update_range>:
	if (new_start >= *start && new_end <= *end) {
   2b558:	f8b0 c000 	ldrh.w	ip, [r0]
   2b55c:	4562      	cmp	r2, ip
   2b55e:	d312      	bcc.n	2b586 <update_range+0x2e>
{
   2b560:	b500      	push	{lr}
	if (new_start >= *start && new_end <= *end) {
   2b562:	f8b1 e000 	ldrh.w	lr, [r1]
   2b566:	4573      	cmp	r3, lr
   2b568:	d908      	bls.n	2b57c <update_range+0x24>
	if (*start > new_start) {
   2b56a:	4562      	cmp	r2, ip
   2b56c:	d200      	bcs.n	2b570 <update_range+0x18>
		*start = new_start;
   2b56e:	8002      	strh	r2, [r0, #0]
	if (*end < new_end) {
   2b570:	880a      	ldrh	r2, [r1, #0]
   2b572:	4293      	cmp	r3, r2
   2b574:	d904      	bls.n	2b580 <update_range+0x28>
		*end = new_end;
   2b576:	800b      	strh	r3, [r1, #0]
	return true;
   2b578:	2001      	movs	r0, #1
   2b57a:	e002      	b.n	2b582 <update_range+0x2a>
		return false;
   2b57c:	2000      	movs	r0, #0
   2b57e:	e000      	b.n	2b582 <update_range+0x2a>
	return true;
   2b580:	2001      	movs	r0, #1
}
   2b582:	f85d fb04 	ldr.w	pc, [sp], #4
	if (*start > new_start) {
   2b586:	4562      	cmp	r2, ip
   2b588:	d200      	bcs.n	2b58c <update_range+0x34>
		*start = new_start;
   2b58a:	8002      	strh	r2, [r0, #0]
	if (*end < new_end) {
   2b58c:	880a      	ldrh	r2, [r1, #0]
   2b58e:	4293      	cmp	r3, r2
   2b590:	d902      	bls.n	2b598 <update_range+0x40>
		*end = new_end;
   2b592:	800b      	strh	r3, [r1, #0]
	return true;
   2b594:	2001      	movs	r0, #1
   2b596:	4770      	bx	lr
   2b598:	2001      	movs	r0, #1
}
   2b59a:	4770      	bx	lr

0002b59c <cf_set_value>:
{
   2b59c:	b510      	push	{r4, lr}
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   2b59e:	2300      	movs	r3, #0
   2b5a0:	e001      	b.n	2b5a6 <cf_set_value+0xa>
   2b5a2:	3301      	adds	r3, #1
   2b5a4:	b29b      	uxth	r3, r3
   2b5a6:	2b02      	cmp	r3, #2
   2b5a8:	d819      	bhi.n	2b5de <cf_set_value+0x42>
   2b5aa:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
   2b5ae:	ebb2 0fd3 	cmp.w	r2, r3, lsr #3
   2b5b2:	d912      	bls.n	2b5da <cf_set_value+0x3e>
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   2b5b4:	eb00 040c 	add.w	r4, r0, ip
   2b5b8:	7a24      	ldrb	r4, [r4, #8]
   2b5ba:	f003 0e07 	and.w	lr, r3, #7
   2b5be:	fa24 f40e 	lsr.w	r4, r4, lr
   2b5c2:	f014 0f01 	tst.w	r4, #1
   2b5c6:	d0ec      	beq.n	2b5a2 <cf_set_value+0x6>
		    !(value[i / 8] & BIT(i % 8))) {
   2b5c8:	f811 400c 	ldrb.w	r4, [r1, ip]
   2b5cc:	fa24 f40e 	lsr.w	r4, r4, lr
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   2b5d0:	f014 0f01 	tst.w	r4, #1
   2b5d4:	d1e5      	bne.n	2b5a2 <cf_set_value+0x6>
			return false;
   2b5d6:	2000      	movs	r0, #0
   2b5d8:	e016      	b.n	2b608 <cf_set_value+0x6c>
   2b5da:	2300      	movs	r3, #0
   2b5dc:	e000      	b.n	2b5e0 <cf_set_value+0x44>
   2b5de:	2300      	movs	r3, #0
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   2b5e0:	4293      	cmp	r3, r2
   2b5e2:	d210      	bcs.n	2b606 <cf_set_value+0x6a>
   2b5e4:	b96b      	cbnz	r3, 2b602 <cf_set_value+0x66>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   2b5e6:	18c4      	adds	r4, r0, r3
   2b5e8:	f894 c008 	ldrb.w	ip, [r4, #8]
   2b5ec:	f811 e003 	ldrb.w	lr, [r1, r3]
   2b5f0:	f00e 0e07 	and.w	lr, lr, #7
   2b5f4:	ea4c 0c0e 	orr.w	ip, ip, lr
   2b5f8:	f884 c008 	strb.w	ip, [r4, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   2b5fc:	3301      	adds	r3, #1
   2b5fe:	b29b      	uxth	r3, r3
   2b600:	e7ee      	b.n	2b5e0 <cf_set_value+0x44>
	return true;
   2b602:	2001      	movs	r0, #1
   2b604:	e000      	b.n	2b608 <cf_set_value+0x6c>
   2b606:	2001      	movs	r0, #1
}
   2b608:	bd10      	pop	{r4, pc}

0002b60a <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   2b60a:	6010      	str	r0, [r2, #0]
}
   2b60c:	2000      	movs	r0, #0
   2b60e:	4770      	bx	lr

0002b610 <gatt_ccc_changed>:
{
   2b610:	b508      	push	{r3, lr}
   2b612:	468c      	mov	ip, r1
	uint16_t value = 0x0000;
   2b614:	2100      	movs	r1, #0
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   2b616:	460b      	mov	r3, r1
   2b618:	e000      	b.n	2b61c <gatt_ccc_changed+0xc>
   2b61a:	3301      	adds	r3, #1
   2b61c:	2b07      	cmp	r3, #7
   2b61e:	d808      	bhi.n	2b632 <gatt_ccc_changed+0x22>
		if (ccc->cfg[i].value > value) {
   2b620:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   2b624:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
   2b628:	8912      	ldrh	r2, [r2, #8]
   2b62a:	428a      	cmp	r2, r1
   2b62c:	d9f5      	bls.n	2b61a <gatt_ccc_changed+0xa>
			value = ccc->cfg[i].value;
   2b62e:	4611      	mov	r1, r2
   2b630:	e7f3      	b.n	2b61a <gatt_ccc_changed+0xa>
	if (value != ccc->value) {
   2b632:	f8bc 3050 	ldrh.w	r3, [ip, #80]	; 0x50
   2b636:	4299      	cmp	r1, r3
   2b638:	d005      	beq.n	2b646 <gatt_ccc_changed+0x36>
		ccc->value = value;
   2b63a:	f8ac 1050 	strh.w	r1, [ip, #80]	; 0x50
		if (ccc->cfg_changed) {
   2b63e:	f8dc 3054 	ldr.w	r3, [ip, #84]	; 0x54
   2b642:	b103      	cbz	r3, 2b646 <gatt_ccc_changed+0x36>
			ccc->cfg_changed(attr, value);
   2b644:	4798      	blx	r3
}
   2b646:	bd08      	pop	{r3, pc}

0002b648 <gatt_indicate_rsp>:
{
   2b648:	b510      	push	{r4, lr}
   2b64a:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   2b64c:	68a3      	ldr	r3, [r4, #8]
   2b64e:	b113      	cbz	r3, 2b656 <gatt_indicate_rsp+0xe>
   2b650:	460a      	mov	r2, r1
		params->func(conn, params, err);
   2b652:	4621      	mov	r1, r4
   2b654:	4798      	blx	r3
	params->_ref--;
   2b656:	7da3      	ldrb	r3, [r4, #22]
   2b658:	3b01      	subs	r3, #1
   2b65a:	b2db      	uxtb	r3, r3
   2b65c:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   2b65e:	68e2      	ldr	r2, [r4, #12]
   2b660:	b112      	cbz	r2, 2b668 <gatt_indicate_rsp+0x20>
   2b662:	b90b      	cbnz	r3, 2b668 <gatt_indicate_rsp+0x20>
		params->destroy(params);
   2b664:	4620      	mov	r0, r4
   2b666:	4790      	blx	r2
}
   2b668:	bd10      	pop	{r4, pc}

0002b66a <match_uuid>:
	data->attr = attr;
   2b66a:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   2b66c:	8091      	strh	r1, [r2, #4]
}
   2b66e:	2000      	movs	r0, #0
   2b670:	4770      	bx	lr

0002b672 <gatt_sub_is_empty>:
	return list->head;
   2b672:	6880      	ldr	r0, [r0, #8]
}
   2b674:	fab0 f080 	clz	r0, r0
   2b678:	0940      	lsrs	r0, r0, #5
   2b67a:	4770      	bx	lr

0002b67c <check_subscribe_security_level>:
}
   2b67c:	2001      	movs	r0, #1
   2b67e:	4770      	bx	lr

0002b680 <gatt_mtu_rsp>:
{
   2b680:	b508      	push	{r3, lr}
   2b682:	9a02      	ldr	r2, [sp, #8]
	params->func(conn, err, params);
   2b684:	6813      	ldr	r3, [r2, #0]
   2b686:	4798      	blx	r3
}
   2b688:	bd08      	pop	{r3, pc}

0002b68a <gen_hash_m>:
{
   2b68a:	b5f0      	push	{r4, r5, r6, r7, lr}
   2b68c:	b089      	sub	sp, #36	; 0x24
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2b68e:	6806      	ldr	r6, [r0, #0]
   2b690:	7835      	ldrb	r5, [r6, #0]
   2b692:	2d00      	cmp	r5, #0
   2b694:	d160      	bne.n	2b758 <gen_hash_m+0xce>
   2b696:	4607      	mov	r7, r0
   2b698:	4614      	mov	r4, r2
	switch (u16->val) {
   2b69a:	8873      	ldrh	r3, [r6, #2]
   2b69c:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   2b6a0:	d019      	beq.n	2b6d6 <gen_hash_m+0x4c>
   2b6a2:	d913      	bls.n	2b6cc <gen_hash_m+0x42>
   2b6a4:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   2b6a8:	33ff      	adds	r3, #255	; 0xff
   2b6aa:	b29b      	uxth	r3, r3
   2b6ac:	2b04      	cmp	r3, #4
   2b6ae:	d859      	bhi.n	2b764 <gen_hash_m+0xda>
		value = sys_cpu_to_le16(handle);
   2b6b0:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2b6b4:	2202      	movs	r2, #2
   2b6b6:	f10d 010a 	add.w	r1, sp, #10
   2b6ba:	4620      	mov	r0, r4
   2b6bc:	f7fe f8c2 	bl	29844 <tc_cmac_update>
   2b6c0:	2800      	cmp	r0, #0
   2b6c2:	d139      	bne.n	2b738 <gen_hash_m+0xae>
			state->err = -EINVAL;
   2b6c4:	f06f 0315 	mvn.w	r3, #21
   2b6c8:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   2b6ca:	e046      	b.n	2b75a <gen_hash_m+0xd0>
	switch (u16->val) {
   2b6cc:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   2b6d0:	b29b      	uxth	r3, r3
   2b6d2:	2b03      	cmp	r3, #3
   2b6d4:	d844      	bhi.n	2b760 <gen_hash_m+0xd6>
		value = sys_cpu_to_le16(handle);
   2b6d6:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2b6da:	2202      	movs	r2, #2
   2b6dc:	f10d 010a 	add.w	r1, sp, #10
   2b6e0:	4620      	mov	r0, r4
   2b6e2:	f7fe f8af 	bl	29844 <tc_cmac_update>
   2b6e6:	b918      	cbnz	r0, 2b6f0 <gen_hash_m+0x66>
			state->err = -EINVAL;
   2b6e8:	f06f 0315 	mvn.w	r3, #21
   2b6ec:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   2b6ee:	e034      	b.n	2b75a <gen_hash_m+0xd0>
		value = sys_cpu_to_le16(u16->val);
   2b6f0:	8873      	ldrh	r3, [r6, #2]
   2b6f2:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2b6f6:	2202      	movs	r2, #2
   2b6f8:	f10d 010a 	add.w	r1, sp, #10
   2b6fc:	4620      	mov	r0, r4
   2b6fe:	f7fe f8a1 	bl	29844 <tc_cmac_update>
   2b702:	b178      	cbz	r0, 2b724 <gen_hash_m+0x9a>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   2b704:	687e      	ldr	r6, [r7, #4]
   2b706:	2000      	movs	r0, #0
   2b708:	9000      	str	r0, [sp, #0]
   2b70a:	2313      	movs	r3, #19
   2b70c:	aa03      	add	r2, sp, #12
   2b70e:	4639      	mov	r1, r7
   2b710:	47b0      	blx	r6
		if (len < 0) {
   2b712:	1e02      	subs	r2, r0, #0
   2b714:	db0a      	blt.n	2b72c <gen_hash_m+0xa2>
		if (tc_cmac_update(&state->state, data, len) ==
   2b716:	a903      	add	r1, sp, #12
   2b718:	4620      	mov	r0, r4
   2b71a:	f7fe f893 	bl	29844 <tc_cmac_update>
   2b71e:	b138      	cbz	r0, 2b730 <gen_hash_m+0xa6>
	return BT_GATT_ITER_CONTINUE;
   2b720:	2501      	movs	r5, #1
   2b722:	e01a      	b.n	2b75a <gen_hash_m+0xd0>
			state->err = -EINVAL;
   2b724:	f06f 0315 	mvn.w	r3, #21
   2b728:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   2b72a:	e016      	b.n	2b75a <gen_hash_m+0xd0>
			state->err = len;
   2b72c:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   2b72e:	e014      	b.n	2b75a <gen_hash_m+0xd0>
			state->err = -EINVAL;
   2b730:	f06f 0315 	mvn.w	r3, #21
   2b734:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   2b736:	e010      	b.n	2b75a <gen_hash_m+0xd0>
		value = sys_cpu_to_le16(u16->val);
   2b738:	8873      	ldrh	r3, [r6, #2]
   2b73a:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2b73e:	2202      	movs	r2, #2
   2b740:	f10d 010a 	add.w	r1, sp, #10
   2b744:	4620      	mov	r0, r4
   2b746:	f7fe f87d 	bl	29844 <tc_cmac_update>
   2b74a:	b108      	cbz	r0, 2b750 <gen_hash_m+0xc6>
	return BT_GATT_ITER_CONTINUE;
   2b74c:	2501      	movs	r5, #1
   2b74e:	e004      	b.n	2b75a <gen_hash_m+0xd0>
			state->err = -EINVAL;
   2b750:	f06f 0315 	mvn.w	r3, #21
   2b754:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   2b756:	e000      	b.n	2b75a <gen_hash_m+0xd0>
		return BT_GATT_ITER_CONTINUE;
   2b758:	2501      	movs	r5, #1
}
   2b75a:	4628      	mov	r0, r5
   2b75c:	b009      	add	sp, #36	; 0x24
   2b75e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   2b760:	2501      	movs	r5, #1
   2b762:	e7fa      	b.n	2b75a <gen_hash_m+0xd0>
   2b764:	2501      	movs	r5, #1
   2b766:	e7f8      	b.n	2b75a <gen_hash_m+0xd0>

0002b768 <atomic_test_bit>:
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2b768:	094b      	lsrs	r3, r1, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2b76a:	f3bf 8f5b 	dmb	ish
   2b76e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
   2b772:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2b776:	f001 011f 	and.w	r1, r1, #31
   2b77a:	4108      	asrs	r0, r1
}
   2b77c:	f000 0001 	and.w	r0, r0, #1
   2b780:	4770      	bx	lr

0002b782 <atomic_test_and_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2b782:	f001 021f 	and.w	r2, r1, #31
   2b786:	2301      	movs	r3, #1
   2b788:	4093      	lsls	r3, r2
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   2b78a:	0949      	lsrs	r1, r1, #5
   2b78c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2b790:	f3bf 8f5b 	dmb	ish
   2b794:	e850 2f00 	ldrex	r2, [r0]
   2b798:	ea42 0103 	orr.w	r1, r2, r3
   2b79c:	e840 1c00 	strex	ip, r1, [r0]
   2b7a0:	f1bc 0f00 	cmp.w	ip, #0
   2b7a4:	d1f6      	bne.n	2b794 <atomic_test_and_set_bit+0x12>
   2b7a6:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   2b7aa:	4213      	tst	r3, r2
}
   2b7ac:	bf14      	ite	ne
   2b7ae:	2001      	movne	r0, #1
   2b7b0:	2000      	moveq	r0, #0
   2b7b2:	4770      	bx	lr

0002b7b4 <gatt_sub_remove>:
{
   2b7b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b7b6:	460c      	mov	r4, r1
	if (params) {
   2b7b8:	b173      	cbz	r3, 2b7d8 <gatt_sub_remove+0x24>
   2b7ba:	4605      	mov	r5, r0
   2b7bc:	4611      	mov	r1, r2
   2b7be:	461e      	mov	r6, r3
		sys_slist_remove(&sub->list, prev, &params->node);
   2b7c0:	f103 0218 	add.w	r2, r3, #24
   2b7c4:	f104 0008 	add.w	r0, r4, #8
   2b7c8:	f7ff fe8d 	bl	2b4e6 <sys_slist_remove>
		params->notify(conn, params, NULL, 0);
   2b7cc:	6837      	ldr	r7, [r6, #0]
   2b7ce:	2300      	movs	r3, #0
   2b7d0:	461a      	mov	r2, r3
   2b7d2:	4631      	mov	r1, r6
   2b7d4:	4628      	mov	r0, r5
   2b7d6:	47b8      	blx	r7
	if (gatt_sub_is_empty(sub)) {
   2b7d8:	4620      	mov	r0, r4
   2b7da:	f7ff ff4a 	bl	2b672 <gatt_sub_is_empty>
   2b7de:	b900      	cbnz	r0, 2b7e2 <gatt_sub_remove+0x2e>
}
   2b7e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gatt_sub_free(sub);
   2b7e2:	4620      	mov	r0, r4
   2b7e4:	f7f0 fe7a 	bl	1c4dc <gatt_sub_free>
}
   2b7e8:	e7fa      	b.n	2b7e0 <gatt_sub_remove+0x2c>

0002b7ea <gatt_sub_update>:
	if (sub->peer.type == BT_ADDR_LE_PUBLIC) {
   2b7ea:	784a      	ldrb	r2, [r1, #1]
   2b7ec:	b902      	cbnz	r2, 2b7f0 <gatt_sub_update+0x6>
   2b7ee:	4770      	bx	lr
{
   2b7f0:	b508      	push	{r3, lr}
   2b7f2:	460b      	mov	r3, r1
	memcpy(dst, src, sizeof(*dst));
   2b7f4:	2207      	movs	r2, #7
   2b7f6:	f100 0188 	add.w	r1, r0, #136	; 0x88
   2b7fa:	1c58      	adds	r0, r3, #1
   2b7fc:	f7fe f9d9 	bl	29bb2 <memcpy>
}
   2b800:	bd08      	pop	{r3, pc}

0002b802 <remove_subscriptions>:
{
   2b802:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b806:	4606      	mov	r6, r0
	sub = gatt_sub_find(conn);
   2b808:	f7f0 fccc 	bl	1c1a4 <gatt_sub_find>
	if (!sub) {
   2b80c:	b3a0      	cbz	r0, 2b878 <remove_subscriptions+0x76>
   2b80e:	4607      	mov	r7, r0
   2b810:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   2b812:	b36c      	cbz	r4, 2b870 <remove_subscriptions+0x6e>
   2b814:	3c18      	subs	r4, #24
Z_GENLIST_PEEK_NEXT(slist, snode)
   2b816:	f114 0518 	adds.w	r5, r4, #24
   2b81a:	d002      	beq.n	2b822 <remove_subscriptions+0x20>
	return node->next;
   2b81c:	69a5      	ldr	r5, [r4, #24]
   2b81e:	b105      	cbz	r5, 2b822 <remove_subscriptions+0x20>
   2b820:	3d18      	subs	r5, #24
   2b822:	f04f 0800 	mov.w	r8, #0
   2b826:	e00d      	b.n	2b844 <remove_subscriptions+0x42>
			params->value = 0U;
   2b828:	2300      	movs	r3, #0
   2b82a:	8223      	strh	r3, [r4, #16]
			gatt_sub_remove(conn, sub, prev, params);
   2b82c:	4623      	mov	r3, r4
   2b82e:	4642      	mov	r2, r8
   2b830:	4639      	mov	r1, r7
   2b832:	4630      	mov	r0, r6
   2b834:	f7ff ffbe 	bl	2b7b4 <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   2b838:	b1e5      	cbz	r5, 2b874 <remove_subscriptions+0x72>
   2b83a:	69ab      	ldr	r3, [r5, #24]
   2b83c:	b103      	cbz	r3, 2b840 <remove_subscriptions+0x3e>
   2b83e:	3b18      	subs	r3, #24
   2b840:	462c      	mov	r4, r5
   2b842:	461d      	mov	r5, r3
   2b844:	b1c4      	cbz	r4, 2b878 <remove_subscriptions+0x76>
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   2b846:	f106 0188 	add.w	r1, r6, #136	; 0x88
   2b84a:	7a30      	ldrb	r0, [r6, #8]
   2b84c:	f7fe fc0d 	bl	2a06a <bt_addr_le_is_bonded>
   2b850:	2800      	cmp	r0, #0
   2b852:	d0e9      	beq.n	2b828 <remove_subscriptions+0x26>
		    (atomic_test_bit(params->flags,
   2b854:	2100      	movs	r1, #0
   2b856:	f104 0014 	add.w	r0, r4, #20
   2b85a:	f7ff ff85 	bl	2b768 <atomic_test_bit>
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   2b85e:	2800      	cmp	r0, #0
   2b860:	d1e2      	bne.n	2b828 <remove_subscriptions+0x26>
			gatt_sub_update(conn, sub);
   2b862:	4639      	mov	r1, r7
   2b864:	4630      	mov	r0, r6
   2b866:	f7ff ffc0 	bl	2b7ea <gatt_sub_update>
			prev = &params->node;
   2b86a:	f104 0818 	add.w	r8, r4, #24
   2b86e:	e7e3      	b.n	2b838 <remove_subscriptions+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   2b870:	4625      	mov	r5, r4
   2b872:	e7d6      	b.n	2b822 <remove_subscriptions+0x20>
   2b874:	462b      	mov	r3, r5
   2b876:	e7e3      	b.n	2b840 <remove_subscriptions+0x3e>
}
   2b878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002b87c <clear_sc_cfg>:
{
   2b87c:	b508      	push	{r3, lr}
	memset(cfg, 0, sizeof(*cfg));
   2b87e:	220c      	movs	r2, #12
   2b880:	2100      	movs	r1, #0
   2b882:	f7fe f9c5 	bl	29c10 <memset>
}
   2b886:	bd08      	pop	{r3, pc}

0002b888 <bt_gatt_clear_sc>:
{
   2b888:	b508      	push	{r3, lr}
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   2b88a:	f7f0 fc3f 	bl	1c10c <find_sc_cfg>
	if (!cfg) {
   2b88e:	b108      	cbz	r0, 2b894 <bt_gatt_clear_sc+0xc>
	clear_sc_cfg(cfg);
   2b890:	f7ff fff4 	bl	2b87c <clear_sc_cfg>
}
   2b894:	2000      	movs	r0, #0
   2b896:	bd08      	pop	{r3, pc}

0002b898 <sc_ccc_cfg_write>:
{
   2b898:	b508      	push	{r3, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   2b89a:	2a02      	cmp	r2, #2
   2b89c:	d003      	beq.n	2b8a6 <sc_ccc_cfg_write+0xe>
		sc_clear(conn);
   2b89e:	f7f0 fe27 	bl	1c4f0 <sc_clear>
}
   2b8a2:	2002      	movs	r0, #2
   2b8a4:	bd08      	pop	{r3, pc}
		sc_save(conn->id, &conn->le.dst, 0, 0);
   2b8a6:	2300      	movs	r3, #0
   2b8a8:	461a      	mov	r2, r3
   2b8aa:	f100 0188 	add.w	r1, r0, #136	; 0x88
   2b8ae:	7a00      	ldrb	r0, [r0, #8]
   2b8b0:	f7f0 fd16 	bl	1c2e0 <sc_save>
   2b8b4:	e7f5      	b.n	2b8a2 <sc_ccc_cfg_write+0xa>

0002b8b6 <sc_reset>:
{
   2b8b6:	b508      	push	{r3, lr}
	memset(&cfg->data, 0, sizeof(cfg->data));
   2b8b8:	2204      	movs	r2, #4
   2b8ba:	2100      	movs	r1, #0
   2b8bc:	3008      	adds	r0, #8
   2b8be:	f7fe f9a7 	bl	29c10 <memset>
}
   2b8c2:	bd08      	pop	{r3, pc}

0002b8c4 <sc_restore_rsp>:
{
   2b8c4:	b538      	push	{r3, r4, r5, lr}
   2b8c6:	4605      	mov	r5, r0
   2b8c8:	4614      	mov	r4, r2
	if (bt_att_fixed_chan_only(conn)) {
   2b8ca:	f7ff fdda 	bl	2b482 <bt_att_fixed_chan_only>
   2b8ce:	b908      	cbnz	r0, 2b8d4 <sc_restore_rsp+0x10>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   2b8d0:	b1c4      	cbz	r4, 2b904 <sc_restore_rsp+0x40>
}
   2b8d2:	bd38      	pop	{r3, r4, r5, pc}
		cfg = find_cf_cfg(conn);
   2b8d4:	4628      	mov	r0, r5
   2b8d6:	f7f0 fbf3 	bl	1c0c0 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   2b8da:	4603      	mov	r3, r0
   2b8dc:	2800      	cmp	r0, #0
   2b8de:	d0f7      	beq.n	2b8d0 <sc_restore_rsp+0xc>
   2b8e0:	7a02      	ldrb	r2, [r0, #8]
   2b8e2:	f012 0f01 	tst.w	r2, #1
   2b8e6:	d0f3      	beq.n	2b8d0 <sc_restore_rsp+0xc>
			atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   2b8e8:	330c      	adds	r3, #12
   2b8ea:	f3bf 8f5b 	dmb	ish
   2b8ee:	e853 1f00 	ldrex	r1, [r3]
   2b8f2:	f041 0101 	orr.w	r1, r1, #1
   2b8f6:	e843 1200 	strex	r2, r1, [r3]
   2b8fa:	2a00      	cmp	r2, #0
   2b8fc:	d1f7      	bne.n	2b8ee <sc_restore_rsp+0x2a>
   2b8fe:	f3bf 8f5b 	dmb	ish
			LOG_DBG("%s change-aware", bt_addr_le_str(&cfg->peer));
   2b902:	e7e5      	b.n	2b8d0 <sc_restore_rsp+0xc>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   2b904:	f105 0188 	add.w	r1, r5, #136	; 0x88
   2b908:	7a28      	ldrb	r0, [r5, #8]
   2b90a:	f7f0 fbff 	bl	1c10c <find_sc_cfg>
		if (sc_cfg) {
   2b90e:	2800      	cmp	r0, #0
   2b910:	d0df      	beq.n	2b8d2 <sc_restore_rsp+0xe>
			sc_reset(sc_cfg);
   2b912:	f7ff ffd0 	bl	2b8b6 <sc_reset>
}
   2b916:	e7dc      	b.n	2b8d2 <sc_restore_rsp+0xe>

0002b918 <atomic_test_and_clear_bit>:
{
   2b918:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   2b91a:	f001 021f 	and.w	r2, r1, #31
   2b91e:	2301      	movs	r3, #1
   2b920:	4093      	lsls	r3, r2
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2b922:	0949      	lsrs	r1, r1, #5
   2b924:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   2b928:	43d9      	mvns	r1, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2b92a:	f3bf 8f5b 	dmb	ish
   2b92e:	e850 2f00 	ldrex	r2, [r0]
   2b932:	ea02 0c01 	and.w	ip, r2, r1
   2b936:	e840 ce00 	strex	lr, ip, [r0]
   2b93a:	f1be 0f00 	cmp.w	lr, #0
   2b93e:	d1f6      	bne.n	2b92e <atomic_test_and_clear_bit+0x16>
   2b940:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   2b944:	4213      	tst	r3, r2
}
   2b946:	bf14      	ite	ne
   2b948:	2001      	movne	r0, #1
   2b94a:	2000      	moveq	r0, #0
   2b94c:	f85d fb04 	ldr.w	pc, [sp], #4

0002b950 <gatt_foreach_iter>:
	if (handle > end_handle) {
   2b950:	4299      	cmp	r1, r3
   2b952:	d822      	bhi.n	2b99a <gatt_foreach_iter+0x4a>
{
   2b954:	b538      	push	{r3, r4, r5, lr}
   2b956:	4605      	mov	r5, r0
   2b958:	460c      	mov	r4, r1
	if (handle < start_handle) {
   2b95a:	4291      	cmp	r1, r2
   2b95c:	d31f      	bcc.n	2b99e <gatt_foreach_iter+0x4e>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   2b95e:	9b04      	ldr	r3, [sp, #16]
   2b960:	b123      	cbz	r3, 2b96c <gatt_foreach_iter+0x1c>
   2b962:	6801      	ldr	r1, [r0, #0]
   2b964:	4618      	mov	r0, r3
   2b966:	f7fe f9a4 	bl	29cb2 <bt_uuid_cmp>
   2b96a:	b9d0      	cbnz	r0, 2b9a2 <gatt_foreach_iter+0x52>
	if (attr_data && attr_data != attr->user_data) {
   2b96c:	9b05      	ldr	r3, [sp, #20]
   2b96e:	b12b      	cbz	r3, 2b97c <gatt_foreach_iter+0x2c>
   2b970:	68eb      	ldr	r3, [r5, #12]
   2b972:	9a05      	ldr	r2, [sp, #20]
   2b974:	4293      	cmp	r3, r2
   2b976:	d001      	beq.n	2b97c <gatt_foreach_iter+0x2c>
		return BT_GATT_ITER_CONTINUE;
   2b978:	2001      	movs	r0, #1
   2b97a:	e011      	b.n	2b9a0 <gatt_foreach_iter+0x50>
	*num_matches -= 1;
   2b97c:	9b06      	ldr	r3, [sp, #24]
   2b97e:	881b      	ldrh	r3, [r3, #0]
   2b980:	3b01      	subs	r3, #1
   2b982:	9a06      	ldr	r2, [sp, #24]
   2b984:	8013      	strh	r3, [r2, #0]
	result = func(attr, handle, user_data);
   2b986:	9a08      	ldr	r2, [sp, #32]
   2b988:	4621      	mov	r1, r4
   2b98a:	4628      	mov	r0, r5
   2b98c:	9b07      	ldr	r3, [sp, #28]
   2b98e:	4798      	blx	r3
	if (!*num_matches) {
   2b990:	9b06      	ldr	r3, [sp, #24]
   2b992:	881b      	ldrh	r3, [r3, #0]
   2b994:	b923      	cbnz	r3, 2b9a0 <gatt_foreach_iter+0x50>
		return BT_GATT_ITER_STOP;
   2b996:	2000      	movs	r0, #0
   2b998:	e002      	b.n	2b9a0 <gatt_foreach_iter+0x50>
		return BT_GATT_ITER_STOP;
   2b99a:	2000      	movs	r0, #0
}
   2b99c:	4770      	bx	lr
		return BT_GATT_ITER_CONTINUE;
   2b99e:	2001      	movs	r0, #1
}
   2b9a0:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ITER_CONTINUE;
   2b9a2:	2001      	movs	r0, #1
   2b9a4:	e7fc      	b.n	2b9a0 <gatt_foreach_iter+0x50>

0002b9a6 <gatt_req_alloc>:
{
   2b9a6:	b538      	push	{r3, r4, r5, lr}
   2b9a8:	4605      	mov	r5, r0
   2b9aa:	460c      	mov	r4, r1
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   2b9ac:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   2b9b0:	2100      	movs	r1, #0
   2b9b2:	f7f0 f9e1 	bl	1bd78 <bt_att_req_alloc>
	if (!req) {
   2b9b6:	4603      	mov	r3, r0
   2b9b8:	b108      	cbz	r0, 2b9be <gatt_req_alloc+0x18>
	req->func = func;
   2b9ba:	6045      	str	r5, [r0, #4]
	req->user_data = params;
   2b9bc:	60c4      	str	r4, [r0, #12]
}
   2b9be:	4618      	mov	r0, r3
   2b9c0:	bd38      	pop	{r3, r4, r5, pc}

0002b9c2 <gatt_req_send>:
{
   2b9c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2b9c6:	b083      	sub	sp, #12
   2b9c8:	4606      	mov	r6, r0
   2b9ca:	4608      	mov	r0, r1
   2b9cc:	4615      	mov	r5, r2
   2b9ce:	461c      	mov	r4, r3
   2b9d0:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   2b9d4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
	req = gatt_req_alloc(func, params, encode, op, len);
   2b9d6:	9700      	str	r7, [sp, #0]
   2b9d8:	4643      	mov	r3, r8
   2b9da:	4622      	mov	r2, r4
   2b9dc:	4629      	mov	r1, r5
   2b9de:	f7ff ffe2 	bl	2b9a6 <gatt_req_alloc>
	if (!req) {
   2b9e2:	b368      	cbz	r0, 2ba40 <gatt_req_send+0x7e>
   2b9e4:	4681      	mov	r9, r0
	buf = bt_att_create_pdu(conn, op, len);
   2b9e6:	463a      	mov	r2, r7
   2b9e8:	4641      	mov	r1, r8
   2b9ea:	4630      	mov	r0, r6
   2b9ec:	f7ef ff2a 	bl	1b844 <bt_att_create_pdu>
	if (!buf) {
   2b9f0:	4680      	mov	r8, r0
   2b9f2:	b1b8      	cbz	r0, 2ba24 <gatt_req_send+0x62>
	bt_att_set_tx_meta_data(buf, NULL, NULL, chan_opt);
   2b9f4:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   2b9f8:	2200      	movs	r2, #0
   2b9fa:	4611      	mov	r1, r2
   2b9fc:	f7ff fd6c 	bl	2b4d8 <bt_att_set_tx_meta_data>
	req->buf = buf;
   2ba00:	f8c9 8008 	str.w	r8, [r9, #8]
	err = encode(buf, len, params);
   2ba04:	462a      	mov	r2, r5
   2ba06:	4639      	mov	r1, r7
   2ba08:	4640      	mov	r0, r8
   2ba0a:	47a0      	blx	r4
	if (err) {
   2ba0c:	4604      	mov	r4, r0
   2ba0e:	b978      	cbnz	r0, 2ba30 <gatt_req_send+0x6e>
	err = bt_att_req_send(conn, req);
   2ba10:	4649      	mov	r1, r9
   2ba12:	4630      	mov	r0, r6
   2ba14:	f7ff fcc7 	bl	2b3a6 <bt_att_req_send>
	if (err) {
   2ba18:	4604      	mov	r4, r0
   2ba1a:	b968      	cbnz	r0, 2ba38 <gatt_req_send+0x76>
}
   2ba1c:	4620      	mov	r0, r4
   2ba1e:	b003      	add	sp, #12
   2ba20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bt_att_req_free(req);
   2ba24:	4648      	mov	r0, r9
   2ba26:	f7f0 f9cb 	bl	1bdc0 <bt_att_req_free>
		return -ENOMEM;
   2ba2a:	f06f 040b 	mvn.w	r4, #11
   2ba2e:	e7f5      	b.n	2ba1c <gatt_req_send+0x5a>
		bt_att_req_free(req);
   2ba30:	4648      	mov	r0, r9
   2ba32:	f7f0 f9c5 	bl	1bdc0 <bt_att_req_free>
		return err;
   2ba36:	e7f1      	b.n	2ba1c <gatt_req_send+0x5a>
		bt_att_req_free(req);
   2ba38:	4648      	mov	r0, r9
   2ba3a:	f7f0 f9c1 	bl	1bdc0 <bt_att_req_free>
   2ba3e:	e7ed      	b.n	2ba1c <gatt_req_send+0x5a>
		return -ENOMEM;
   2ba40:	f06f 040b 	mvn.w	r4, #11
   2ba44:	e7ea      	b.n	2ba1c <gatt_req_send+0x5a>

0002ba46 <add_subscriptions>:
{
   2ba46:	b538      	push	{r3, r4, r5, lr}
   2ba48:	4605      	mov	r5, r0
	sub = gatt_sub_find(conn);
   2ba4a:	f7f0 fbab 	bl	1c1a4 <gatt_sub_find>
	if (!sub) {
   2ba4e:	b1d0      	cbz	r0, 2ba86 <add_subscriptions+0x40>
	return list->head;
   2ba50:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
   2ba52:	b124      	cbz	r4, 2ba5e <add_subscriptions+0x18>
   2ba54:	3c18      	subs	r4, #24
   2ba56:	e002      	b.n	2ba5e <add_subscriptions+0x18>
	return node->next;
   2ba58:	69a4      	ldr	r4, [r4, #24]
   2ba5a:	b104      	cbz	r4, 2ba5e <add_subscriptions+0x18>
   2ba5c:	3c18      	subs	r4, #24
   2ba5e:	b194      	cbz	r4, 2ba86 <add_subscriptions+0x40>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
   2ba60:	f105 0188 	add.w	r1, r5, #136	; 0x88
   2ba64:	7a28      	ldrb	r0, [r5, #8]
   2ba66:	f7fe fb00 	bl	2a06a <bt_addr_le_is_bonded>
   2ba6a:	2800      	cmp	r0, #0
   2ba6c:	d0f4      	beq.n	2ba58 <add_subscriptions+0x12>
		    !atomic_test_bit(params->flags,
   2ba6e:	2101      	movs	r1, #1
   2ba70:	f104 0014 	add.w	r0, r4, #20
   2ba74:	f7ff fe78 	bl	2b768 <atomic_test_bit>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
   2ba78:	2800      	cmp	r0, #0
   2ba7a:	d1ed      	bne.n	2ba58 <add_subscriptions+0x12>
			gatt_write_ccc(conn, params);
   2ba7c:	4621      	mov	r1, r4
   2ba7e:	4628      	mov	r0, r5
   2ba80:	f7f0 feaa 	bl	1c7d8 <gatt_write_ccc>
   2ba84:	e7e8      	b.n	2ba58 <add_subscriptions+0x12>
}
   2ba86:	bd38      	pop	{r3, r4, r5, pc}

0002ba88 <gatt_exchange_mtu_encode>:
{
   2ba88:	b508      	push	{r3, lr}
   2ba8a:	2102      	movs	r1, #2
   2ba8c:	300c      	adds	r0, #12
   2ba8e:	f000 fdf7 	bl	2c680 <net_buf_simple_add>
   2ba92:	4603      	mov	r3, r0
	req->mtu = sys_cpu_to_le16(mtu);
   2ba94:	2000      	movs	r0, #0
   2ba96:	f06f 0208 	mvn.w	r2, #8
   2ba9a:	701a      	strb	r2, [r3, #0]
   2ba9c:	7058      	strb	r0, [r3, #1]
}
   2ba9e:	bd08      	pop	{r3, pc}

0002baa0 <gatt_write_ccc_buf>:
{
   2baa0:	b538      	push	{r3, r4, r5, lr}
   2baa2:	4614      	mov	r4, r2
   2baa4:	f100 050c 	add.w	r5, r0, #12
   2baa8:	2102      	movs	r1, #2
   2baaa:	4628      	mov	r0, r5
   2baac:	f000 fde8 	bl	2c680 <net_buf_simple_add>
	write_req->handle = sys_cpu_to_le16(params->ccc_handle);
   2bab0:	89e3      	ldrh	r3, [r4, #14]
   2bab2:	8003      	strh	r3, [r0, #0]
	net_buf_simple_add_le16(&buf->b, val);
   2bab4:	8a21      	ldrh	r1, [r4, #16]
   2bab6:	4628      	mov	r0, r5
   2bab8:	f000 fdf3 	bl	2c6a2 <net_buf_simple_add_le16>
	atomic_set_bit(params->flags, BT_GATT_SUBSCRIBE_FLAG_WRITE_PENDING);
   2babc:	3414      	adds	r4, #20
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2babe:	f3bf 8f5b 	dmb	ish
   2bac2:	e854 3f00 	ldrex	r3, [r4]
   2bac6:	f043 0304 	orr.w	r3, r3, #4
   2baca:	e844 3200 	strex	r2, r3, [r4]
   2bace:	2a00      	cmp	r2, #0
   2bad0:	d1f7      	bne.n	2bac2 <gatt_write_ccc_buf+0x22>
   2bad2:	f3bf 8f5b 	dmb	ish
}
   2bad6:	2000      	movs	r0, #0
   2bad8:	bd38      	pop	{r3, r4, r5, pc}

0002bada <remove_cf_cfg>:
{
   2bada:	b570      	push	{r4, r5, r6, lr}
   2badc:	4604      	mov	r4, r0
	cfg = find_cf_cfg(conn);
   2bade:	f7f0 faef 	bl	1c0c0 <find_cf_cfg>
	if (!cfg) {
   2bae2:	b150      	cbz	r0, 2bafa <remove_cf_cfg+0x20>
   2bae4:	4606      	mov	r6, r0
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2bae6:	f104 0588 	add.w	r5, r4, #136	; 0x88
   2baea:	4629      	mov	r1, r5
   2baec:	7a20      	ldrb	r0, [r4, #8]
   2baee:	f7fe fabc 	bl	2a06a <bt_addr_le_is_bonded>
   2baf2:	b918      	cbnz	r0, 2bafc <remove_cf_cfg+0x22>
		clear_cf_cfg(cfg);
   2baf4:	4630      	mov	r0, r6
   2baf6:	f7f0 fe83 	bl	1c800 <clear_cf_cfg>
}
   2bafa:	bd70      	pop	{r4, r5, r6, pc}
   2bafc:	2207      	movs	r2, #7
   2bafe:	4629      	mov	r1, r5
   2bb00:	1c70      	adds	r0, r6, #1
   2bb02:	f7fe f856 	bl	29bb2 <memcpy>
}
   2bb06:	e7f8      	b.n	2bafa <remove_cf_cfg+0x20>

0002bb08 <bt_gatt_attr_read>:
{
   2bb08:	b510      	push	{r4, lr}
   2bb0a:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   2bb0e:	f8bd 4010 	ldrh.w	r4, [sp, #16]
	if (offset > value_len) {
   2bb12:	42a1      	cmp	r1, r4
   2bb14:	d80c      	bhi.n	2bb30 <bt_gatt_attr_read+0x28>
   2bb16:	4610      	mov	r0, r2
	len = MIN(buf_len, value_len - offset);
   2bb18:	1a64      	subs	r4, r4, r1
   2bb1a:	42a3      	cmp	r3, r4
   2bb1c:	bfa8      	it	ge
   2bb1e:	4623      	movge	r3, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   2bb20:	b29c      	uxth	r4, r3
   2bb22:	4622      	mov	r2, r4
   2bb24:	9b03      	ldr	r3, [sp, #12]
   2bb26:	4419      	add	r1, r3
   2bb28:	f7fe f843 	bl	29bb2 <memcpy>
}
   2bb2c:	4620      	mov	r0, r4
   2bb2e:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2bb30:	f06f 0406 	mvn.w	r4, #6
   2bb34:	e7fa      	b.n	2bb2c <bt_gatt_attr_read+0x24>

0002bb36 <read_appearance>:
{
   2bb36:	b5f0      	push	{r4, r5, r6, r7, lr}
   2bb38:	b087      	sub	sp, #28
   2bb3a:	4604      	mov	r4, r0
   2bb3c:	460d      	mov	r5, r1
   2bb3e:	4616      	mov	r6, r2
   2bb40:	461f      	mov	r7, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   2bb42:	f7fe fa90 	bl	2a066 <bt_get_appearance>
   2bb46:	f8ad 0016 	strh.w	r0, [sp, #22]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   2bb4a:	2302      	movs	r3, #2
   2bb4c:	9302      	str	r3, [sp, #8]
   2bb4e:	f10d 0316 	add.w	r3, sp, #22
   2bb52:	9301      	str	r3, [sp, #4]
   2bb54:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   2bb58:	9300      	str	r3, [sp, #0]
   2bb5a:	463b      	mov	r3, r7
   2bb5c:	4632      	mov	r2, r6
   2bb5e:	4629      	mov	r1, r5
   2bb60:	4620      	mov	r0, r4
   2bb62:	f7ff ffd1 	bl	2bb08 <bt_gatt_attr_read>
}
   2bb66:	b007      	add	sp, #28
   2bb68:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002bb6a <read_name>:
{
   2bb6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2bb6e:	b084      	sub	sp, #16
   2bb70:	4604      	mov	r4, r0
   2bb72:	460d      	mov	r5, r1
   2bb74:	4616      	mov	r6, r2
   2bb76:	461f      	mov	r7, r3
	const char *name = bt_get_name();
   2bb78:	f7ec fdf8 	bl	1876c <bt_get_name>
   2bb7c:	4680      	mov	r8, r0
				 strlen(name));
   2bb7e:	f7fd ffca 	bl	29b16 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   2bb82:	b280      	uxth	r0, r0
   2bb84:	9002      	str	r0, [sp, #8]
   2bb86:	f8cd 8004 	str.w	r8, [sp, #4]
   2bb8a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   2bb8e:	9300      	str	r3, [sp, #0]
   2bb90:	463b      	mov	r3, r7
   2bb92:	4632      	mov	r2, r6
   2bb94:	4629      	mov	r1, r5
   2bb96:	4620      	mov	r0, r4
   2bb98:	f7ff ffb6 	bl	2bb08 <bt_gatt_attr_read>
}
   2bb9c:	b004      	add	sp, #16
   2bb9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002bba2 <cf_read>:
{
   2bba2:	b5f0      	push	{r4, r5, r6, r7, lr}
   2bba4:	b087      	sub	sp, #28
   2bba6:	4604      	mov	r4, r0
   2bba8:	460d      	mov	r5, r1
   2bbaa:	4616      	mov	r6, r2
   2bbac:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   2bbae:	2300      	movs	r3, #0
   2bbb0:	f88d 3014 	strb.w	r3, [sp, #20]
	cfg = find_cf_cfg(conn);
   2bbb4:	f7f0 fa84 	bl	1c0c0 <find_cf_cfg>
	if (cfg) {
   2bbb8:	b128      	cbz	r0, 2bbc6 <cf_read+0x24>
   2bbba:	4601      	mov	r1, r0
		memcpy(data, cfg->data, sizeof(data));
   2bbbc:	2201      	movs	r2, #1
   2bbbe:	3108      	adds	r1, #8
   2bbc0:	a805      	add	r0, sp, #20
   2bbc2:	f7fd fff6 	bl	29bb2 <memcpy>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   2bbc6:	2301      	movs	r3, #1
   2bbc8:	9302      	str	r3, [sp, #8]
   2bbca:	ab05      	add	r3, sp, #20
   2bbcc:	9301      	str	r3, [sp, #4]
   2bbce:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   2bbd2:	9300      	str	r3, [sp, #0]
   2bbd4:	463b      	mov	r3, r7
   2bbd6:	4632      	mov	r2, r6
   2bbd8:	4629      	mov	r1, r5
   2bbda:	4620      	mov	r0, r4
   2bbdc:	f7ff ff94 	bl	2bb08 <bt_gatt_attr_read>
}
   2bbe0:	b007      	add	sp, #28
   2bbe2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002bbe4 <bt_gatt_attr_read_service>:
{
   2bbe4:	b570      	push	{r4, r5, r6, lr}
   2bbe6:	b086      	sub	sp, #24
   2bbe8:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
	struct bt_uuid *uuid = attr->user_data;
   2bbec:	68cc      	ldr	r4, [r1, #12]
	if (uuid->type == BT_UUID_TYPE_16) {
   2bbee:	7826      	ldrb	r6, [r4, #0]
   2bbf0:	b146      	cbz	r6, 2bc04 <bt_gatt_attr_read_service+0x20>
				 BT_UUID_128(uuid)->val, 16);
   2bbf2:	3401      	adds	r4, #1
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   2bbf4:	2610      	movs	r6, #16
   2bbf6:	9602      	str	r6, [sp, #8]
   2bbf8:	9401      	str	r4, [sp, #4]
   2bbfa:	9500      	str	r5, [sp, #0]
   2bbfc:	f7ff ff84 	bl	2bb08 <bt_gatt_attr_read>
}
   2bc00:	b006      	add	sp, #24
   2bc02:	bd70      	pop	{r4, r5, r6, pc}
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   2bc04:	8864      	ldrh	r4, [r4, #2]
   2bc06:	f8ad 4016 	strh.w	r4, [sp, #22]
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
   2bc0a:	2402      	movs	r4, #2
   2bc0c:	9402      	str	r4, [sp, #8]
   2bc0e:	f10d 0416 	add.w	r4, sp, #22
   2bc12:	9401      	str	r4, [sp, #4]
   2bc14:	9500      	str	r5, [sp, #0]
   2bc16:	f7ff ff77 	bl	2bb08 <bt_gatt_attr_read>
   2bc1a:	e7f1      	b.n	2bc00 <bt_gatt_attr_read_service+0x1c>

0002bc1c <bt_gatt_attr_read_ccc>:
{
   2bc1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2bc1e:	b087      	sub	sp, #28
   2bc20:	4605      	mov	r5, r0
   2bc22:	460c      	mov	r4, r1
   2bc24:	4616      	mov	r6, r2
   2bc26:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   2bc28:	68c9      	ldr	r1, [r1, #12]
   2bc2a:	f7f0 fa93 	bl	1c154 <find_ccc_cfg>
	if (cfg) {
   2bc2e:	b190      	cbz	r0, 2bc56 <bt_gatt_attr_read_ccc+0x3a>
		value = sys_cpu_to_le16(cfg->value);
   2bc30:	8903      	ldrh	r3, [r0, #8]
   2bc32:	f8ad 3016 	strh.w	r3, [sp, #22]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   2bc36:	2302      	movs	r3, #2
   2bc38:	9302      	str	r3, [sp, #8]
   2bc3a:	f10d 0316 	add.w	r3, sp, #22
   2bc3e:	9301      	str	r3, [sp, #4]
   2bc40:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   2bc44:	9300      	str	r3, [sp, #0]
   2bc46:	463b      	mov	r3, r7
   2bc48:	4632      	mov	r2, r6
   2bc4a:	4621      	mov	r1, r4
   2bc4c:	4628      	mov	r0, r5
   2bc4e:	f7ff ff5b 	bl	2bb08 <bt_gatt_attr_read>
}
   2bc52:	b007      	add	sp, #28
   2bc54:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = 0x0000;
   2bc56:	2300      	movs	r3, #0
   2bc58:	f8ad 3016 	strh.w	r3, [sp, #22]
   2bc5c:	e7eb      	b.n	2bc36 <bt_gatt_attr_read_ccc+0x1a>

0002bc5e <bt_gatt_attr_value_handle>:
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2bc5e:	b1b8      	cbz	r0, 2bc90 <bt_gatt_attr_value_handle+0x32>
{
   2bc60:	b510      	push	{r4, lr}
   2bc62:	b082      	sub	sp, #8
   2bc64:	4604      	mov	r4, r0
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2bc66:	2300      	movs	r3, #0
   2bc68:	f88d 3004 	strb.w	r3, [sp, #4]
   2bc6c:	f642 0303 	movw	r3, #10243	; 0x2803
   2bc70:	f8ad 3006 	strh.w	r3, [sp, #6]
   2bc74:	a901      	add	r1, sp, #4
   2bc76:	6800      	ldr	r0, [r0, #0]
   2bc78:	f7fe f81b 	bl	29cb2 <bt_uuid_cmp>
   2bc7c:	b950      	cbnz	r0, 2bc94 <bt_gatt_attr_value_handle+0x36>
		struct bt_gatt_chrc *chrc = attr->user_data;
   2bc7e:	68e3      	ldr	r3, [r4, #12]
		handle = chrc->value_handle;
   2bc80:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   2bc82:	b940      	cbnz	r0, 2bc96 <bt_gatt_attr_value_handle+0x38>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   2bc84:	4620      	mov	r0, r4
   2bc86:	f7f0 fe0b 	bl	1c8a0 <bt_gatt_attr_get_handle>
   2bc8a:	3001      	adds	r0, #1
   2bc8c:	b280      	uxth	r0, r0
   2bc8e:	e002      	b.n	2bc96 <bt_gatt_attr_value_handle+0x38>
	uint16_t handle = 0;
   2bc90:	2000      	movs	r0, #0
}
   2bc92:	4770      	bx	lr
	uint16_t handle = 0;
   2bc94:	2000      	movs	r0, #0
}
   2bc96:	b002      	add	sp, #8
   2bc98:	bd10      	pop	{r4, pc}

0002bc9a <bt_gatt_attr_read_chrc>:
{
   2bc9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2bc9e:	b08a      	sub	sp, #40	; 0x28
   2bca0:	4605      	mov	r5, r0
   2bca2:	460c      	mov	r4, r1
   2bca4:	4616      	mov	r6, r2
   2bca6:	461f      	mov	r7, r3
	struct bt_gatt_chrc *chrc = attr->user_data;
   2bca8:	f8d1 800c 	ldr.w	r8, [r1, #12]
	pdu.properties = chrc->properties;
   2bcac:	f898 3006 	ldrb.w	r3, [r8, #6]
   2bcb0:	f88d 3014 	strb.w	r3, [sp, #20]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   2bcb4:	4608      	mov	r0, r1
   2bcb6:	f7ff ffd2 	bl	2bc5e <bt_gatt_attr_value_handle>
   2bcba:	f8ad 0015 	strh.w	r0, [sp, #21]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   2bcbe:	f8d8 1000 	ldr.w	r1, [r8]
   2bcc2:	780b      	ldrb	r3, [r1, #0]
   2bcc4:	b993      	cbnz	r3, 2bcec <bt_gatt_attr_read_chrc+0x52>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   2bcc6:	884b      	ldrh	r3, [r1, #2]
   2bcc8:	f8ad 3017 	strh.w	r3, [sp, #23]
		value_len += 2U;
   2bccc:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   2bcce:	9302      	str	r3, [sp, #8]
   2bcd0:	ab05      	add	r3, sp, #20
   2bcd2:	9301      	str	r3, [sp, #4]
   2bcd4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   2bcd8:	9300      	str	r3, [sp, #0]
   2bcda:	463b      	mov	r3, r7
   2bcdc:	4632      	mov	r2, r6
   2bcde:	4621      	mov	r1, r4
   2bce0:	4628      	mov	r0, r5
   2bce2:	f7ff ff11 	bl	2bb08 <bt_gatt_attr_read>
}
   2bce6:	b00a      	add	sp, #40	; 0x28
   2bce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   2bcec:	2210      	movs	r2, #16
   2bcee:	3101      	adds	r1, #1
   2bcf0:	f10d 0017 	add.w	r0, sp, #23
   2bcf4:	f7fd ff5d 	bl	29bb2 <memcpy>
		value_len += 16U;
   2bcf8:	2313      	movs	r3, #19
   2bcfa:	e7e8      	b.n	2bcce <bt_gatt_attr_read_chrc+0x34>

0002bcfc <db_hash_process>:
{
   2bcfc:	b508      	push	{r3, lr}
	db_hash_gen(true);
   2bcfe:	2001      	movs	r0, #1
   2bd00:	f7f0 fe4e 	bl	1c9a0 <db_hash_gen>
}
   2bd04:	bd08      	pop	{r3, pc}

0002bd06 <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   2bd06:	f012 0f01 	tst.w	r2, #1
   2bd0a:	d005      	beq.n	2bd18 <bt_gatt_check_perm+0x12>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2bd0c:	8a4b      	ldrh	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   2bd0e:	f013 0f95 	tst.w	r3, #149	; 0x95
   2bd12:	d01e      	beq.n	2bd52 <bt_gatt_check_perm+0x4c>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2bd14:	684b      	ldr	r3, [r1, #4]
   2bd16:	b1f3      	cbz	r3, 2bd56 <bt_gatt_check_perm+0x50>
	if ((mask & BT_GATT_PERM_WRITE) &&
   2bd18:	f012 0f02 	tst.w	r2, #2
   2bd1c:	d005      	beq.n	2bd2a <bt_gatt_check_perm+0x24>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   2bd1e:	8a4b      	ldrh	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_WRITE) &&
   2bd20:	f413 7f95 	tst.w	r3, #298	; 0x12a
   2bd24:	d019      	beq.n	2bd5a <bt_gatt_check_perm+0x54>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   2bd26:	688b      	ldr	r3, [r1, #8]
   2bd28:	b1cb      	cbz	r3, 2bd5e <bt_gatt_check_perm+0x58>
{
   2bd2a:	b510      	push	{r4, lr}
	mask &= attr->perm;
   2bd2c:	8a4c      	ldrh	r4, [r1, #18]
   2bd2e:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_LESC_MASK) {
   2bd30:	f414 7fc0 	tst.w	r4, #384	; 0x180
   2bd34:	d115      	bne.n	2bd62 <bt_gatt_check_perm+0x5c>
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   2bd36:	f014 0f30 	tst.w	r4, #48	; 0x30
   2bd3a:	d104      	bne.n	2bd46 <bt_gatt_check_perm+0x40>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   2bd3c:	f014 0f0c 	tst.w	r4, #12
   2bd40:	d111      	bne.n	2bd66 <bt_gatt_check_perm+0x60>
	return 0;
   2bd42:	2000      	movs	r0, #0
}
   2bd44:	bd10      	pop	{r4, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   2bd46:	f7fe fb26 	bl	2a396 <bt_conn_get_security>
   2bd4a:	2802      	cmp	r0, #2
   2bd4c:	d8f6      	bhi.n	2bd3c <bt_gatt_check_perm+0x36>
			return BT_ATT_ERR_AUTHENTICATION;
   2bd4e:	2005      	movs	r0, #5
   2bd50:	e7f8      	b.n	2bd44 <bt_gatt_check_perm+0x3e>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   2bd52:	2002      	movs	r0, #2
   2bd54:	4770      	bx	lr
   2bd56:	2002      	movs	r0, #2
   2bd58:	4770      	bx	lr
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   2bd5a:	2003      	movs	r0, #3
   2bd5c:	4770      	bx	lr
   2bd5e:	2003      	movs	r0, #3
}
   2bd60:	4770      	bx	lr
			return BT_ATT_ERR_AUTHENTICATION;
   2bd62:	2005      	movs	r0, #5
   2bd64:	e7ee      	b.n	2bd44 <bt_gatt_check_perm+0x3e>
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   2bd66:	200f      	movs	r0, #15
   2bd68:	e7ec      	b.n	2bd44 <bt_gatt_check_perm+0x3e>

0002bd6a <bt_gatt_is_subscribed>:
	if (conn->state != BT_CONN_CONNECTED) {
   2bd6a:	7a83      	ldrb	r3, [r0, #10]
   2bd6c:	2b07      	cmp	r3, #7
   2bd6e:	d001      	beq.n	2bd74 <bt_gatt_is_subscribed+0xa>
		return false;
   2bd70:	2000      	movs	r0, #0
}
   2bd72:	4770      	bx	lr
{
   2bd74:	b5f0      	push	{r4, r5, r6, r7, lr}
   2bd76:	b089      	sub	sp, #36	; 0x24
   2bd78:	4605      	mov	r5, r0
   2bd7a:	460c      	mov	r4, r1
   2bd7c:	4616      	mov	r6, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   2bd7e:	6808      	ldr	r0, [r1, #0]
   2bd80:	2300      	movs	r3, #0
   2bd82:	f88d 3004 	strb.w	r3, [sp, #4]
   2bd86:	f642 0303 	movw	r3, #10243	; 0x2803
   2bd8a:	f8ad 3006 	strh.w	r3, [sp, #6]
   2bd8e:	a901      	add	r1, sp, #4
   2bd90:	f7fd ff8f 	bl	29cb2 <bt_uuid_cmp>
   2bd94:	b950      	cbnz	r0, 2bdac <bt_gatt_is_subscribed+0x42>
		struct bt_gatt_chrc *chrc = attr->user_data;
   2bd96:	68e3      	ldr	r3, [r4, #12]
		if (!(chrc->properties &
   2bd98:	799b      	ldrb	r3, [r3, #6]
   2bd9a:	f013 0f30 	tst.w	r3, #48	; 0x30
   2bd9e:	d101      	bne.n	2bda4 <bt_gatt_is_subscribed+0x3a>
}
   2bda0:	b009      	add	sp, #36	; 0x24
   2bda2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		attr = bt_gatt_attr_next(attr);
   2bda4:	4620      	mov	r0, r4
   2bda6:	f7f0 fefd 	bl	1cba4 <bt_gatt_attr_next>
   2bdaa:	4604      	mov	r4, r0
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   2bdac:	6820      	ldr	r0, [r4, #0]
   2bdae:	2300      	movs	r3, #0
   2bdb0:	f88d 3008 	strb.w	r3, [sp, #8]
   2bdb4:	f642 1302 	movw	r3, #10498	; 0x2902
   2bdb8:	f8ad 300a 	strh.w	r3, [sp, #10]
   2bdbc:	a902      	add	r1, sp, #8
   2bdbe:	f7fd ff78 	bl	29cb2 <bt_uuid_cmp>
   2bdc2:	2800      	cmp	r0, #0
   2bdc4:	d136      	bne.n	2be34 <bt_gatt_is_subscribed+0xca>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   2bdc6:	6820      	ldr	r0, [r4, #0]
   2bdc8:	2300      	movs	r3, #0
   2bdca:	f88d 300c 	strb.w	r3, [sp, #12]
   2bdce:	f642 1302 	movw	r3, #10498	; 0x2902
   2bdd2:	f8ad 300e 	strh.w	r3, [sp, #14]
   2bdd6:	a903      	add	r1, sp, #12
   2bdd8:	f7fd ff6b 	bl	29cb2 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   2bddc:	b378      	cbz	r0, 2be3e <bt_gatt_is_subscribed+0xd4>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   2bdde:	6820      	ldr	r0, [r4, #0]
   2bde0:	2300      	movs	r3, #0
   2bde2:	f88d 3010 	strb.w	r3, [sp, #16]
   2bde6:	f642 0303 	movw	r3, #10243	; 0x2803
   2bdea:	f8ad 3012 	strh.w	r3, [sp, #18]
   2bdee:	a904      	add	r1, sp, #16
   2bdf0:	f7fd ff5f 	bl	29cb2 <bt_uuid_cmp>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   2bdf4:	b318      	cbz	r0, 2be3e <bt_gatt_is_subscribed+0xd4>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   2bdf6:	6820      	ldr	r0, [r4, #0]
   2bdf8:	2300      	movs	r3, #0
   2bdfa:	f88d 3014 	strb.w	r3, [sp, #20]
   2bdfe:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   2be02:	f8ad 3016 	strh.w	r3, [sp, #22]
   2be06:	a905      	add	r1, sp, #20
   2be08:	f7fd ff53 	bl	29cb2 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   2be0c:	b1b8      	cbz	r0, 2be3e <bt_gatt_is_subscribed+0xd4>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   2be0e:	6820      	ldr	r0, [r4, #0]
   2be10:	2300      	movs	r3, #0
   2be12:	f88d 3018 	strb.w	r3, [sp, #24]
   2be16:	f642 0301 	movw	r3, #10241	; 0x2801
   2be1a:	f8ad 301a 	strh.w	r3, [sp, #26]
   2be1e:	a906      	add	r1, sp, #24
   2be20:	f7fd ff47 	bl	29cb2 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   2be24:	b158      	cbz	r0, 2be3e <bt_gatt_is_subscribed+0xd4>
		attr = bt_gatt_attr_next(attr);
   2be26:	4620      	mov	r0, r4
   2be28:	f7f0 febc 	bl	1cba4 <bt_gatt_attr_next>
		if (!attr) {
   2be2c:	4604      	mov	r4, r0
   2be2e:	2800      	cmp	r0, #0
   2be30:	d1c9      	bne.n	2bdc6 <bt_gatt_is_subscribed+0x5c>
   2be32:	e7b5      	b.n	2bda0 <bt_gatt_is_subscribed+0x36>
		attr = bt_gatt_attr_next(attr);
   2be34:	4620      	mov	r0, r4
   2be36:	f7f0 feb5 	bl	1cba4 <bt_gatt_attr_next>
   2be3a:	4604      	mov	r4, r0
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   2be3c:	e7c3      	b.n	2bdc6 <bt_gatt_is_subscribed+0x5c>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   2be3e:	6820      	ldr	r0, [r4, #0]
   2be40:	2300      	movs	r3, #0
   2be42:	f88d 301c 	strb.w	r3, [sp, #28]
   2be46:	f642 1302 	movw	r3, #10498	; 0x2902
   2be4a:	f8ad 301e 	strh.w	r3, [sp, #30]
   2be4e:	a907      	add	r1, sp, #28
   2be50:	f7fd ff2f 	bl	29cb2 <bt_uuid_cmp>
   2be54:	b910      	cbnz	r0, 2be5c <bt_gatt_is_subscribed+0xf2>
	ccc = attr->user_data;
   2be56:	68e7      	ldr	r7, [r4, #12]
	for (size_t i = 0; i < BT_GATT_CCC_MAX; i++) {
   2be58:	2400      	movs	r4, #0
   2be5a:	e002      	b.n	2be62 <bt_gatt_is_subscribed+0xf8>
		return false;
   2be5c:	2000      	movs	r0, #0
   2be5e:	e79f      	b.n	2bda0 <bt_gatt_is_subscribed+0x36>
	for (size_t i = 0; i < BT_GATT_CCC_MAX; i++) {
   2be60:	3401      	adds	r4, #1
   2be62:	2c07      	cmp	r4, #7
   2be64:	d813      	bhi.n	2be8e <bt_gatt_is_subscribed+0x124>
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   2be66:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   2be6a:	eb07 0243 	add.w	r2, r7, r3, lsl #1
   2be6e:	3201      	adds	r2, #1
   2be70:	f817 1013 	ldrb.w	r1, [r7, r3, lsl #1]
   2be74:	4628      	mov	r0, r5
   2be76:	f7fe faa7 	bl	2a3c8 <bt_conn_is_peer_addr_le>
   2be7a:	2800      	cmp	r0, #0
   2be7c:	d0f0      	beq.n	2be60 <bt_gatt_is_subscribed+0xf6>
		    (ccc_type & ccc->cfg[i].value)) {
   2be7e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   2be82:	eb07 0343 	add.w	r3, r7, r3, lsl #1
   2be86:	891b      	ldrh	r3, [r3, #8]
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   2be88:	4233      	tst	r3, r6
   2be8a:	d0e9      	beq.n	2be60 <bt_gatt_is_subscribed+0xf6>
   2be8c:	e788      	b.n	2bda0 <bt_gatt_is_subscribed+0x36>
	return false;
   2be8e:	2000      	movs	r0, #0
   2be90:	e786      	b.n	2bda0 <bt_gatt_is_subscribed+0x36>

0002be92 <bt_gatt_cancel>:
{
   2be92:	b570      	push	{r4, r5, r6, lr}
   2be94:	b082      	sub	sp, #8
   2be96:	4604      	mov	r4, r0
   2be98:	460d      	mov	r5, r1
	k_sched_lock();
   2be9a:	f7fa fdf5 	bl	26a88 <k_sched_lock>
	req = bt_att_find_req_by_user_data(conn, params);
   2be9e:	4629      	mov	r1, r5
   2bea0:	4620      	mov	r0, r4
   2bea2:	f7ff fac5 	bl	2b430 <bt_att_find_req_by_user_data>
	if (req) {
   2bea6:	b178      	cbz	r0, 2bec8 <bt_gatt_cancel+0x36>
   2bea8:	4601      	mov	r1, r0
		func = req->func;
   2beaa:	6846      	ldr	r6, [r0, #4]
		bt_att_req_cancel(conn, req);
   2beac:	4620      	mov	r0, r4
   2beae:	f7ff fa91 	bl	2b3d4 <bt_att_req_cancel>
	k_sched_unlock();
   2beb2:	f7fa ffeb 	bl	26e8c <k_sched_unlock>
	if (func) {
   2beb6:	b12e      	cbz	r6, 2bec4 <bt_gatt_cancel+0x32>
		func(conn, BT_ATT_ERR_UNLIKELY, NULL, 0, params);
   2beb8:	9500      	str	r5, [sp, #0]
   2beba:	2300      	movs	r3, #0
   2bebc:	461a      	mov	r2, r3
   2bebe:	210e      	movs	r1, #14
   2bec0:	4620      	mov	r0, r4
   2bec2:	47b0      	blx	r6
}
   2bec4:	b002      	add	sp, #8
   2bec6:	bd70      	pop	{r4, r5, r6, pc}
	k_sched_unlock();
   2bec8:	f7fa ffe0 	bl	26e8c <k_sched_unlock>
	if (func) {
   2becc:	e7fa      	b.n	2bec4 <bt_gatt_cancel+0x32>

0002bece <bt_gatt_unsubscribe>:
{
   2bece:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   2bed0:	7a83      	ldrb	r3, [r0, #10]
   2bed2:	2b07      	cmp	r3, #7
   2bed4:	d144      	bne.n	2bf60 <bt_gatt_unsubscribe+0x92>
   2bed6:	4605      	mov	r5, r0
   2bed8:	460c      	mov	r4, r1
	sub = gatt_sub_find(conn);
   2beda:	f7f0 f963 	bl	1c1a4 <gatt_sub_find>
	if (!sub) {
   2bede:	4607      	mov	r7, r0
   2bee0:	2800      	cmp	r0, #0
   2bee2:	d040      	beq.n	2bf66 <bt_gatt_unsubscribe+0x98>
	return list->head;
   2bee4:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   2bee6:	b103      	cbz	r3, 2beea <bt_gatt_unsubscribe+0x1c>
   2bee8:	3b18      	subs	r3, #24
			has_subscription = true;
   2beea:	2000      	movs	r0, #0
   2beec:	4606      	mov	r6, r0
   2beee:	e003      	b.n	2bef8 <bt_gatt_unsubscribe+0x2a>
			found = true;
   2bef0:	2001      	movs	r0, #1
	return node->next;
   2bef2:	699b      	ldr	r3, [r3, #24]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   2bef4:	b103      	cbz	r3, 2bef8 <bt_gatt_unsubscribe+0x2a>
   2bef6:	3b18      	subs	r3, #24
   2bef8:	b13b      	cbz	r3, 2bf0a <bt_gatt_unsubscribe+0x3c>
		if (params == tmp) {
   2befa:	42a3      	cmp	r3, r4
   2befc:	d0f8      	beq.n	2bef0 <bt_gatt_unsubscribe+0x22>
		if (tmp->value_handle == params->value_handle) {
   2befe:	8999      	ldrh	r1, [r3, #12]
   2bf00:	89a2      	ldrh	r2, [r4, #12]
   2bf02:	4291      	cmp	r1, r2
   2bf04:	d1f5      	bne.n	2bef2 <bt_gatt_unsubscribe+0x24>
			has_subscription = true;
   2bf06:	2601      	movs	r6, #1
   2bf08:	e7f3      	b.n	2bef2 <bt_gatt_unsubscribe+0x24>
	if (!found) {
   2bf0a:	b378      	cbz	r0, 2bf6c <bt_gatt_unsubscribe+0x9e>
	if (atomic_test_bit(params->flags, BT_GATT_SUBSCRIBE_FLAG_WRITE_PENDING)) {
   2bf0c:	2102      	movs	r1, #2
   2bf0e:	f104 0014 	add.w	r0, r4, #20
   2bf12:	f7ff fc29 	bl	2b768 <atomic_test_bit>
   2bf16:	b9d0      	cbnz	r0, 2bf4e <bt_gatt_unsubscribe+0x80>
	if (!has_subscription) {
   2bf18:	b936      	cbnz	r6, 2bf28 <bt_gatt_unsubscribe+0x5a>
		params->value = 0x0000;
   2bf1a:	2300      	movs	r3, #0
   2bf1c:	8223      	strh	r3, [r4, #16]
		err = gatt_write_ccc(conn, params);
   2bf1e:	4621      	mov	r1, r4
   2bf20:	4628      	mov	r0, r5
   2bf22:	f7f0 fc59 	bl	1c7d8 <gatt_write_ccc>
		if (err) {
   2bf26:	b988      	cbnz	r0, 2bf4c <bt_gatt_unsubscribe+0x7e>
	sys_slist_find_and_remove(&sub->list, &params->node);
   2bf28:	f104 0118 	add.w	r1, r4, #24
   2bf2c:	f107 0008 	add.w	r0, r7, #8
   2bf30:	f7ff faec 	bl	2b50c <sys_slist_find_and_remove>
	if (gatt_sub_is_empty(sub)) {
   2bf34:	4638      	mov	r0, r7
   2bf36:	f7ff fb9c 	bl	2b672 <gatt_sub_is_empty>
   2bf3a:	b968      	cbnz	r0, 2bf58 <bt_gatt_unsubscribe+0x8a>
	if (has_subscription) {
   2bf3c:	b1ce      	cbz	r6, 2bf72 <bt_gatt_unsubscribe+0xa4>
		params->notify(conn, params, NULL, 0);
   2bf3e:	6826      	ldr	r6, [r4, #0]
   2bf40:	2300      	movs	r3, #0
   2bf42:	461a      	mov	r2, r3
   2bf44:	4621      	mov	r1, r4
   2bf46:	4628      	mov	r0, r5
   2bf48:	47b0      	blx	r6
	return 0;
   2bf4a:	2000      	movs	r0, #0
}
   2bf4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		bt_gatt_cancel(conn, params);
   2bf4e:	4621      	mov	r1, r4
   2bf50:	4628      	mov	r0, r5
   2bf52:	f7ff ff9e 	bl	2be92 <bt_gatt_cancel>
   2bf56:	e7df      	b.n	2bf18 <bt_gatt_unsubscribe+0x4a>
		gatt_sub_free(sub);
   2bf58:	4638      	mov	r0, r7
   2bf5a:	f7f0 fabf 	bl	1c4dc <gatt_sub_free>
   2bf5e:	e7ed      	b.n	2bf3c <bt_gatt_unsubscribe+0x6e>
		return -ENOTCONN;
   2bf60:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2bf64:	e7f2      	b.n	2bf4c <bt_gatt_unsubscribe+0x7e>
		return -EINVAL;
   2bf66:	f06f 0015 	mvn.w	r0, #21
   2bf6a:	e7ef      	b.n	2bf4c <bt_gatt_unsubscribe+0x7e>
		return -EINVAL;
   2bf6c:	f06f 0015 	mvn.w	r0, #21
   2bf70:	e7ec      	b.n	2bf4c <bt_gatt_unsubscribe+0x7e>
	return 0;
   2bf72:	2000      	movs	r0, #0
   2bf74:	e7ea      	b.n	2bf4c <bt_gatt_unsubscribe+0x7e>

0002bf76 <bt_gatt_notification>:
{
   2bf76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2bf7a:	4680      	mov	r8, r0
   2bf7c:	460f      	mov	r7, r1
   2bf7e:	4691      	mov	r9, r2
   2bf80:	469a      	mov	sl, r3
	sub = gatt_sub_find(conn);
   2bf82:	f7f0 f90f 	bl	1c1a4 <gatt_sub_find>
	if (!sub) {
   2bf86:	b350      	cbz	r0, 2bfde <bt_gatt_notification+0x68>
	return list->head;
   2bf88:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   2bf8a:	b324      	cbz	r4, 2bfd6 <bt_gatt_notification+0x60>
   2bf8c:	3c18      	subs	r4, #24
Z_GENLIST_PEEK_NEXT(slist, snode)
   2bf8e:	f114 0518 	adds.w	r5, r4, #24
   2bf92:	d009      	beq.n	2bfa8 <bt_gatt_notification+0x32>
	return node->next;
   2bf94:	69a5      	ldr	r5, [r4, #24]
   2bf96:	b13d      	cbz	r5, 2bfa8 <bt_gatt_notification+0x32>
   2bf98:	3d18      	subs	r5, #24
   2bf9a:	e005      	b.n	2bfa8 <bt_gatt_notification+0x32>
   2bf9c:	b1ed      	cbz	r5, 2bfda <bt_gatt_notification+0x64>
   2bf9e:	69ae      	ldr	r6, [r5, #24]
   2bfa0:	b106      	cbz	r6, 2bfa4 <bt_gatt_notification+0x2e>
   2bfa2:	3e18      	subs	r6, #24
   2bfa4:	462c      	mov	r4, r5
   2bfa6:	4635      	mov	r5, r6
   2bfa8:	b1cc      	cbz	r4, 2bfde <bt_gatt_notification+0x68>
		if (handle != params->value_handle) {
   2bfaa:	89a3      	ldrh	r3, [r4, #12]
   2bfac:	429f      	cmp	r7, r3
   2bfae:	d1f5      	bne.n	2bf9c <bt_gatt_notification+0x26>
		if (check_subscribe_security_level(conn, params)) {
   2bfb0:	4621      	mov	r1, r4
   2bfb2:	4640      	mov	r0, r8
   2bfb4:	f7ff fb62 	bl	2b67c <check_subscribe_security_level>
   2bfb8:	2800      	cmp	r0, #0
   2bfba:	d0ef      	beq.n	2bf9c <bt_gatt_notification+0x26>
			if (params->notify(conn, params, data, length) ==
   2bfbc:	6826      	ldr	r6, [r4, #0]
   2bfbe:	4653      	mov	r3, sl
   2bfc0:	464a      	mov	r2, r9
   2bfc2:	4621      	mov	r1, r4
   2bfc4:	4640      	mov	r0, r8
   2bfc6:	47b0      	blx	r6
   2bfc8:	2800      	cmp	r0, #0
   2bfca:	d1e7      	bne.n	2bf9c <bt_gatt_notification+0x26>
				bt_gatt_unsubscribe(conn, params);
   2bfcc:	4621      	mov	r1, r4
   2bfce:	4640      	mov	r0, r8
   2bfd0:	f7ff ff7d 	bl	2bece <bt_gatt_unsubscribe>
   2bfd4:	e7e2      	b.n	2bf9c <bt_gatt_notification+0x26>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   2bfd6:	4625      	mov	r5, r4
   2bfd8:	e7e6      	b.n	2bfa8 <bt_gatt_notification+0x32>
   2bfda:	462e      	mov	r6, r5
   2bfdc:	e7e2      	b.n	2bfa4 <bt_gatt_notification+0x2e>
}
   2bfde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002bfe2 <bt_gatt_change_aware>:
{
   2bfe2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2bfe4:	4607      	mov	r7, r0
   2bfe6:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   2bfe8:	f7f0 f86a 	bl	1c0c0 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   2bfec:	2800      	cmp	r0, #0
   2bfee:	d050      	beq.n	2c092 <bt_gatt_change_aware+0xb0>
   2bff0:	7a02      	ldrb	r2, [r0, #8]
   2bff2:	f012 0f01 	tst.w	r2, #1
   2bff6:	d102      	bne.n	2bffe <bt_gatt_change_aware+0x1c>
		return true;
   2bff8:	2601      	movs	r6, #1
}
   2bffa:	4630      	mov	r0, r6
   2bffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   2bffe:	f100 050c 	add.w	r5, r0, #12
   2c002:	2100      	movs	r1, #0
   2c004:	4628      	mov	r0, r5
   2c006:	f7ff fbaf 	bl	2b768 <atomic_test_bit>
   2c00a:	4606      	mov	r6, r0
   2c00c:	2800      	cmp	r0, #0
   2c00e:	d1f4      	bne.n	2bffa <bt_gatt_change_aware+0x18>
	if (!req) {
   2c010:	b90c      	cbnz	r4, 2c016 <bt_gatt_change_aware+0x34>
		return false;
   2c012:	4626      	mov	r6, r4
   2c014:	e7f1      	b.n	2bffa <bt_gatt_change_aware+0x18>
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   2c016:	2101      	movs	r1, #1
   2c018:	4628      	mov	r0, r5
   2c01a:	f7ff fc7d 	bl	2b918 <atomic_test_and_clear_bit>
   2c01e:	4606      	mov	r6, r0
   2c020:	bb38      	cbnz	r0, 2c072 <bt_gatt_change_aware+0x90>
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   2c022:	4638      	mov	r0, r7
   2c024:	f7ff fa2d 	bl	2b482 <bt_att_fixed_chan_only>
   2c028:	4606      	mov	r6, r0
   2c02a:	2800      	cmp	r0, #0
   2c02c:	d0e5      	beq.n	2bffa <bt_gatt_change_aware+0x18>
   2c02e:	4638      	mov	r0, r7
   2c030:	f7ff fa46 	bl	2b4c0 <bt_att_out_of_sync_sent_on_fixed>
   2c034:	4606      	mov	r6, r0
   2c036:	2800      	cmp	r0, #0
   2c038:	d0df      	beq.n	2bffa <bt_gatt_change_aware+0x18>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2c03a:	f3bf 8f5b 	dmb	ish
   2c03e:	e855 3f00 	ldrex	r3, [r5]
   2c042:	f023 0302 	bic.w	r3, r3, #2
   2c046:	e845 3200 	strex	r2, r3, [r5]
   2c04a:	2a00      	cmp	r2, #0
   2c04c:	d1f7      	bne.n	2c03e <bt_gatt_change_aware+0x5c>
   2c04e:	f3bf 8f5b 	dmb	ish
		bt_att_clear_out_of_sync_sent(conn);
   2c052:	4638      	mov	r0, r7
   2c054:	f7ff fa17 	bl	2b486 <bt_att_clear_out_of_sync_sent>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2c058:	f3bf 8f5b 	dmb	ish
   2c05c:	e855 3f00 	ldrex	r3, [r5]
   2c060:	f043 0301 	orr.w	r3, r3, #1
   2c064:	e845 3200 	strex	r2, r3, [r5]
   2c068:	2a00      	cmp	r2, #0
   2c06a:	d1f7      	bne.n	2c05c <bt_gatt_change_aware+0x7a>
   2c06c:	f3bf 8f5b 	dmb	ish
		return true;
   2c070:	e7c3      	b.n	2bffa <bt_gatt_change_aware+0x18>
		bt_att_clear_out_of_sync_sent(conn);
   2c072:	4638      	mov	r0, r7
   2c074:	f7ff fa07 	bl	2b486 <bt_att_clear_out_of_sync_sent>
   2c078:	f3bf 8f5b 	dmb	ish
   2c07c:	e855 3f00 	ldrex	r3, [r5]
   2c080:	f043 0301 	orr.w	r3, r3, #1
   2c084:	e845 3200 	strex	r2, r3, [r5]
   2c088:	2a00      	cmp	r2, #0
   2c08a:	d1f7      	bne.n	2c07c <bt_gatt_change_aware+0x9a>
   2c08c:	f3bf 8f5b 	dmb	ish
		return true;
   2c090:	e7b3      	b.n	2bffa <bt_gatt_change_aware+0x18>
		return true;
   2c092:	2601      	movs	r6, #1
   2c094:	e7b1      	b.n	2bffa <bt_gatt_change_aware+0x18>

0002c096 <bt_smp_recv>:
{
   2c096:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c098:	b083      	sub	sp, #12
	struct bt_conn *conn = chan->conn;
   2c09a:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   2c09c:	f04f 32ff 	mov.w	r2, #4294967295
   2c0a0:	f04f 33ff 	mov.w	r3, #4294967295
   2c0a4:	2100      	movs	r1, #0
   2c0a6:	4608      	mov	r0, r1
   2c0a8:	f7fe fa27 	bl	2a4fa <bt_l2cap_create_pdu_timeout>
   2c0ac:	4604      	mov	r4, r0
	return net_buf_simple_add(&buf->b, len);
   2c0ae:	f100 060c 	add.w	r6, r0, #12
   2c0b2:	2101      	movs	r1, #1
   2c0b4:	4630      	mov	r0, r6
   2c0b6:	f000 fae3 	bl	2c680 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   2c0ba:	2505      	movs	r5, #5
   2c0bc:	7005      	strb	r5, [r0, #0]
   2c0be:	2101      	movs	r1, #1
   2c0c0:	4630      	mov	r0, r6
   2c0c2:	f000 fadd 	bl	2c680 <net_buf_simple_add>
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   2c0c6:	7005      	strb	r5, [r0, #0]
   2c0c8:	2300      	movs	r3, #0
   2c0ca:	9300      	str	r3, [sp, #0]
   2c0cc:	4622      	mov	r2, r4
   2c0ce:	2106      	movs	r1, #6
   2c0d0:	4638      	mov	r0, r7
   2c0d2:	f7fe fa17 	bl	2a504 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf)) {
   2c0d6:	b910      	cbnz	r0, 2c0de <bt_smp_recv+0x48>
}
   2c0d8:	2000      	movs	r0, #0
   2c0da:	b003      	add	sp, #12
   2c0dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(buf);
   2c0de:	4620      	mov	r0, r4
   2c0e0:	f000 fa87 	bl	2c5f2 <net_buf_unref>
   2c0e4:	e7f8      	b.n	2c0d8 <bt_smp_recv+0x42>

0002c0e6 <bt_smp_sign>:
}
   2c0e6:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2c0ea:	4770      	bx	lr

0002c0ec <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   2c0ec:	2000      	movs	r0, #0
   2c0ee:	4770      	bx	lr

0002c0f0 <fs_type_get>:
{
   2c0f0:	b508      	push	{r3, lr}
	struct registry_entry *ep = registry_find(type);
   2c0f2:	f7f1 fb73 	bl	1d7dc <registry_find>
	return (ep != NULL) ? ep->fstp : NULL;
   2c0f6:	4603      	mov	r3, r0
   2c0f8:	b100      	cbz	r0, 2c0fc <fs_type_get+0xc>
   2c0fa:	6843      	ldr	r3, [r0, #4]
}
   2c0fc:	4618      	mov	r0, r3
   2c0fe:	bd08      	pop	{r3, pc}

0002c100 <translate_error>:
	switch (error) {
   2c100:	2813      	cmp	r0, #19
   2c102:	d826      	bhi.n	2c152 <translate_error+0x52>
   2c104:	e8df f000 	tbb	[pc, r0]
   2c108:	2222222a 	.word	0x2222222a
   2c10c:	0a282828 	.word	0x0a282828
   2c110:	1613100d 	.word	0x1613100d
   2c114:	22221616 	.word	0x22221616
   2c118:	1f1c1922 	.word	0x1f1c1922
		return -EACCES;
   2c11c:	f06f 000c 	mvn.w	r0, #12
   2c120:	4770      	bx	lr
		return -EEXIST;
   2c122:	f06f 0010 	mvn.w	r0, #16
   2c126:	4770      	bx	lr
		return -EBADF;
   2c128:	f06f 0008 	mvn.w	r0, #8
   2c12c:	4770      	bx	lr
		return -EROFS;
   2c12e:	f06f 001d 	mvn.w	r0, #29
   2c132:	4770      	bx	lr
		return -ENODEV;
   2c134:	f06f 0012 	mvn.w	r0, #18
   2c138:	4770      	bx	lr
		return -ENOMEM;
   2c13a:	f06f 000b 	mvn.w	r0, #11
   2c13e:	4770      	bx	lr
		return -EMFILE;
   2c140:	f06f 0017 	mvn.w	r0, #23
   2c144:	4770      	bx	lr
		return -EINVAL;
   2c146:	f06f 0015 	mvn.w	r0, #21
   2c14a:	4770      	bx	lr
		return -EIO;
   2c14c:	f06f 0004 	mvn.w	r0, #4
   2c150:	4770      	bx	lr
	return -EIO;
   2c152:	f06f 0004 	mvn.w	r0, #4
   2c156:	4770      	bx	lr
		return -ENOENT;
   2c158:	f06f 0001 	mvn.w	r0, #1
}
   2c15c:	4770      	bx	lr

0002c15e <translate_path>:
}
   2c15e:	3001      	adds	r0, #1
   2c160:	4770      	bx	lr

0002c162 <translate_flags>:
}
   2c162:	f000 0013 	and.w	r0, r0, #19
   2c166:	4770      	bx	lr

0002c168 <fatfs_tell>:
	return f_tell((FIL *)zfp->filep);
   2c168:	6803      	ldr	r3, [r0, #0]
}
   2c16a:	6958      	ldr	r0, [r3, #20]
   2c16c:	4770      	bx	lr

0002c16e <fatfs_statvfs>:
{
   2c16e:	b510      	push	{r4, lr}
   2c170:	b082      	sub	sp, #8
   2c172:	4614      	mov	r4, r2
	DWORD f_bfree = 0;
   2c174:	2300      	movs	r3, #0
   2c176:	9300      	str	r3, [sp, #0]
	res = f_getfree(translate_path(mountp->mnt_point), &f_bfree, &fs);
   2c178:	68c0      	ldr	r0, [r0, #12]
   2c17a:	f7ff fff0 	bl	2c15e <translate_path>
   2c17e:	aa01      	add	r2, sp, #4
   2c180:	4669      	mov	r1, sp
   2c182:	f003 fc7e 	bl	2fa82 <f_getfree>
	if (res != FR_OK) {
   2c186:	b978      	cbnz	r0, 2c1a8 <fatfs_statvfs+0x3a>
	stat->f_bfree = f_bfree;
   2c188:	9b00      	ldr	r3, [sp, #0]
   2c18a:	60e3      	str	r3, [r4, #12]
	stat->f_bsize = FF_MIN_SS;
   2c18c:	f44f 7300 	mov.w	r3, #512	; 0x200
   2c190:	6023      	str	r3, [r4, #0]
	stat->f_frsize = fs->csize * stat->f_bsize;
   2c192:	9a01      	ldr	r2, [sp, #4]
   2c194:	8953      	ldrh	r3, [r2, #10]
   2c196:	025b      	lsls	r3, r3, #9
   2c198:	6063      	str	r3, [r4, #4]
	stat->f_blocks = (fs->n_fatent - 2);
   2c19a:	6953      	ldr	r3, [r2, #20]
   2c19c:	3b02      	subs	r3, #2
   2c19e:	60a3      	str	r3, [r4, #8]
	res = translate_error(res);
   2c1a0:	f7ff ffae 	bl	2c100 <translate_error>
}
   2c1a4:	b002      	add	sp, #8
   2c1a6:	bd10      	pop	{r4, pc}
		return -EIO;
   2c1a8:	f06f 0004 	mvn.w	r0, #4
   2c1ac:	e7fa      	b.n	2c1a4 <fatfs_statvfs+0x36>

0002c1ae <fatfs_stat>:
{
   2c1ae:	b530      	push	{r4, r5, lr}
   2c1b0:	b087      	sub	sp, #28
   2c1b2:	4614      	mov	r4, r2
	res = f_stat(translate_path(path), &fno);
   2c1b4:	4608      	mov	r0, r1
   2c1b6:	f7ff ffd2 	bl	2c15e <translate_path>
   2c1ba:	4669      	mov	r1, sp
   2c1bc:	f003 fc3f 	bl	2fa3e <f_stat>
	if (res == FR_OK) {
   2c1c0:	4605      	mov	r5, r0
   2c1c2:	b120      	cbz	r0, 2c1ce <fatfs_stat+0x20>
	return translate_error(res);
   2c1c4:	4628      	mov	r0, r5
   2c1c6:	f7ff ff9b 	bl	2c100 <translate_error>
}
   2c1ca:	b007      	add	sp, #28
   2c1cc:	bd30      	pop	{r4, r5, pc}
		entry->type = ((fno.fattrib & AM_DIR) ?
   2c1ce:	f89d 3008 	ldrb.w	r3, [sp, #8]
			       FS_DIR_ENTRY_DIR : FS_DIR_ENTRY_FILE);
   2c1d2:	f3c3 1300 	ubfx	r3, r3, #4, #1
		entry->type = ((fno.fattrib & AM_DIR) ?
   2c1d6:	4620      	mov	r0, r4
   2c1d8:	f800 3b01 	strb.w	r3, [r0], #1
		strcpy(entry->name, fno.fname);
   2c1dc:	f10d 0109 	add.w	r1, sp, #9
   2c1e0:	f7fd fc68 	bl	29ab4 <strcpy>
		entry->size = fno.fsize;
   2c1e4:	9b00      	ldr	r3, [sp, #0]
   2c1e6:	6123      	str	r3, [r4, #16]
   2c1e8:	e7ec      	b.n	2c1c4 <fatfs_stat+0x16>

0002c1ea <fatfs_mkdir>:
{
   2c1ea:	b508      	push	{r3, lr}
	res = f_mkdir(translate_path(path));
   2c1ec:	4608      	mov	r0, r1
   2c1ee:	f7ff ffb6 	bl	2c15e <translate_path>
   2c1f2:	f7f8 f867 	bl	242c4 <f_mkdir>
	res = translate_error(res);
   2c1f6:	f7ff ff83 	bl	2c100 <translate_error>
}
   2c1fa:	bd08      	pop	{r3, pc}

0002c1fc <fatfs_unlink>:
{
   2c1fc:	b508      	push	{r3, lr}
	res = f_unlink(translate_path(path));
   2c1fe:	4608      	mov	r0, r1
   2c200:	f7ff ffad 	bl	2c15e <translate_path>
   2c204:	f003 fcee 	bl	2fbe4 <f_unlink>
	res = translate_error(res);
   2c208:	f7ff ff7a 	bl	2c100 <translate_error>
}
   2c20c:	bd08      	pop	{r3, pc}

0002c20e <fatfs_rename>:
{
   2c20e:	b530      	push	{r4, r5, lr}
   2c210:	b087      	sub	sp, #28
   2c212:	460d      	mov	r5, r1
	res = f_stat(translate_path(to), &fno);
   2c214:	4610      	mov	r0, r2
   2c216:	f7ff ffa2 	bl	2c15e <translate_path>
   2c21a:	4604      	mov	r4, r0
   2c21c:	4669      	mov	r1, sp
   2c21e:	f003 fc0e 	bl	2fa3e <f_stat>
	if (FR_OK == res) {
   2c222:	b918      	cbnz	r0, 2c22c <fatfs_rename+0x1e>
		res = f_unlink(translate_path(to));
   2c224:	4620      	mov	r0, r4
   2c226:	f003 fcdd 	bl	2fbe4 <f_unlink>
		if (FR_OK != res)
   2c22a:	b948      	cbnz	r0, 2c240 <fatfs_rename+0x32>
	res = f_rename(translate_path(from), translate_path(to));
   2c22c:	4628      	mov	r0, r5
   2c22e:	f7ff ff96 	bl	2c15e <translate_path>
   2c232:	4621      	mov	r1, r4
   2c234:	f003 fd2d 	bl	2fc92 <f_rename>
	res = translate_error(res);
   2c238:	f7ff ff62 	bl	2c100 <translate_error>
}
   2c23c:	b007      	add	sp, #28
   2c23e:	bd30      	pop	{r4, r5, pc}
			return translate_error(res);
   2c240:	f7ff ff5e 	bl	2c100 <translate_error>
   2c244:	e7fa      	b.n	2c23c <fatfs_rename+0x2e>

0002c246 <fatfs_unmount>:
{
   2c246:	b508      	push	{r3, lr}
	res = f_mount(NULL, translate_path(mountp->mnt_point), 0);
   2c248:	68c0      	ldr	r0, [r0, #12]
   2c24a:	f7ff ff88 	bl	2c15e <translate_path>
   2c24e:	4601      	mov	r1, r0
   2c250:	2200      	movs	r2, #0
   2c252:	4610      	mov	r0, r2
   2c254:	f7f7 feec 	bl	24030 <f_mount>
	return translate_error(res);
   2c258:	f7ff ff52 	bl	2c100 <translate_error>
}
   2c25c:	bd08      	pop	{r3, pc}

0002c25e <fatfs_readdir>:
{
   2c25e:	b530      	push	{r4, r5, lr}
   2c260:	b087      	sub	sp, #28
   2c262:	460c      	mov	r4, r1
	res = f_readdir(zdp->dirp, &fno);
   2c264:	4669      	mov	r1, sp
   2c266:	6800      	ldr	r0, [r0, #0]
   2c268:	f003 fbc2 	bl	2f9f0 <f_readdir>
	if (res == FR_OK) {
   2c26c:	4605      	mov	r5, r0
   2c26e:	b120      	cbz	r0, 2c27a <fatfs_readdir+0x1c>
	return translate_error(res);
   2c270:	4628      	mov	r0, r5
   2c272:	f7ff ff45 	bl	2c100 <translate_error>
}
   2c276:	b007      	add	sp, #28
   2c278:	bd30      	pop	{r4, r5, pc}
		strcpy(entry->name, fno.fname);
   2c27a:	f10d 0109 	add.w	r1, sp, #9
   2c27e:	1c60      	adds	r0, r4, #1
   2c280:	f7fd fc18 	bl	29ab4 <strcpy>
		if (entry->name[0] != 0) {
   2c284:	7863      	ldrb	r3, [r4, #1]
   2c286:	2b00      	cmp	r3, #0
   2c288:	d0f2      	beq.n	2c270 <fatfs_readdir+0x12>
			entry->type = ((fno.fattrib & AM_DIR) ?
   2c28a:	f89d 3008 	ldrb.w	r3, [sp, #8]
			       FS_DIR_ENTRY_DIR : FS_DIR_ENTRY_FILE);
   2c28e:	f3c3 1300 	ubfx	r3, r3, #4, #1
			entry->type = ((fno.fattrib & AM_DIR) ?
   2c292:	7023      	strb	r3, [r4, #0]
			entry->size = fno.fsize;
   2c294:	9b00      	ldr	r3, [sp, #0]
   2c296:	6123      	str	r3, [r4, #16]
   2c298:	e7ea      	b.n	2c270 <fatfs_readdir+0x12>

0002c29a <fatfs_sync>:
{
   2c29a:	b508      	push	{r3, lr}
	res = f_sync(zfp->filep);
   2c29c:	6800      	ldr	r0, [r0, #0]
   2c29e:	f7f7 ffd7 	bl	24250 <f_sync>
	res = translate_error(res);
   2c2a2:	f7ff ff2d 	bl	2c100 <translate_error>
}
   2c2a6:	bd08      	pop	{r3, pc}

0002c2a8 <fatfs_seek>:
{
   2c2a8:	b508      	push	{r3, lr}
	switch (whence) {
   2c2aa:	2a01      	cmp	r2, #1
   2c2ac:	d005      	beq.n	2c2ba <fatfs_seek+0x12>
   2c2ae:	2a02      	cmp	r2, #2
   2c2b0:	d011      	beq.n	2c2d6 <fatfs_seek+0x2e>
   2c2b2:	b12a      	cbz	r2, 2c2c0 <fatfs_seek+0x18>
   2c2b4:	f06f 0015 	mvn.w	r0, #21
   2c2b8:	e00c      	b.n	2c2d4 <fatfs_seek+0x2c>
		pos = f_tell((FIL *)zfp->filep) + offset;
   2c2ba:	6803      	ldr	r3, [r0, #0]
   2c2bc:	695b      	ldr	r3, [r3, #20]
   2c2be:	4419      	add	r1, r3
	if ((pos < 0) || (pos > f_size((FIL *)zfp->filep))) {
   2c2c0:	2900      	cmp	r1, #0
   2c2c2:	db0c      	blt.n	2c2de <fatfs_seek+0x36>
   2c2c4:	6800      	ldr	r0, [r0, #0]
   2c2c6:	68c3      	ldr	r3, [r0, #12]
   2c2c8:	428b      	cmp	r3, r1
   2c2ca:	d30b      	bcc.n	2c2e4 <fatfs_seek+0x3c>
	res = f_lseek(zfp->filep, pos);
   2c2cc:	f003 faae 	bl	2f82c <f_lseek>
	return translate_error(res);
   2c2d0:	f7ff ff16 	bl	2c100 <translate_error>
}
   2c2d4:	bd08      	pop	{r3, pc}
		pos = f_size((FIL *)zfp->filep) + offset;
   2c2d6:	6803      	ldr	r3, [r0, #0]
   2c2d8:	68db      	ldr	r3, [r3, #12]
   2c2da:	4419      	add	r1, r3
		break;
   2c2dc:	e7f0      	b.n	2c2c0 <fatfs_seek+0x18>
		return -EINVAL;
   2c2de:	f06f 0015 	mvn.w	r0, #21
   2c2e2:	e7f7      	b.n	2c2d4 <fatfs_seek+0x2c>
   2c2e4:	f06f 0015 	mvn.w	r0, #21
   2c2e8:	e7f4      	b.n	2c2d4 <fatfs_seek+0x2c>

0002c2ea <fatfs_truncate>:
{
   2c2ea:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c2ec:	b083      	sub	sp, #12
   2c2ee:	4605      	mov	r5, r0
   2c2f0:	460e      	mov	r6, r1
	off_t cur_length = f_size((FIL *)zfp->filep);
   2c2f2:	6800      	ldr	r0, [r0, #0]
   2c2f4:	68c7      	ldr	r7, [r0, #12]
	res = f_lseek(zfp->filep, length);
   2c2f6:	f003 fa99 	bl	2f82c <f_lseek>
	if (res != FR_OK) {
   2c2fa:	b948      	cbnz	r0, 2c310 <fatfs_truncate+0x26>
   2c2fc:	463c      	mov	r4, r7
	if (length < cur_length) {
   2c2fe:	42b7      	cmp	r7, r6
   2c300:	dd09      	ble.n	2c316 <fatfs_truncate+0x2c>
		res = f_truncate(zfp->filep);
   2c302:	6828      	ldr	r0, [r5, #0]
   2c304:	f003 fc2b 	bl	2fb5e <f_truncate>
	res = translate_error(res);
   2c308:	f7ff fefa 	bl	2c100 <translate_error>
}
   2c30c:	b003      	add	sp, #12
   2c30e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return translate_error(res);
   2c310:	f7ff fef6 	bl	2c100 <translate_error>
   2c314:	e7fa      	b.n	2c30c <fatfs_truncate+0x22>
		length = f_tell((FIL *)zfp->filep);
   2c316:	6828      	ldr	r0, [r5, #0]
   2c318:	6946      	ldr	r6, [r0, #20]
		res = f_lseek(zfp->filep, cur_length);
   2c31a:	4639      	mov	r1, r7
   2c31c:	f003 fa86 	bl	2f82c <f_lseek>
		if (res != FR_OK) {
   2c320:	b918      	cbnz	r0, 2c32a <fatfs_truncate+0x40>
		uint8_t c = 0U;
   2c322:	2300      	movs	r3, #0
   2c324:	f88d 3003 	strb.w	r3, [sp, #3]
		for (int i = cur_length; i < length; i++) {
   2c328:	e003      	b.n	2c332 <fatfs_truncate+0x48>
			return translate_error(res);
   2c32a:	f7ff fee9 	bl	2c100 <translate_error>
   2c32e:	e7ed      	b.n	2c30c <fatfs_truncate+0x22>
		for (int i = cur_length; i < length; i++) {
   2c330:	3401      	adds	r4, #1
   2c332:	42b4      	cmp	r4, r6
   2c334:	dae8      	bge.n	2c308 <fatfs_truncate+0x1e>
			res = f_write(zfp->filep, &c, 1, &bw);
   2c336:	ab01      	add	r3, sp, #4
   2c338:	2201      	movs	r2, #1
   2c33a:	f10d 0103 	add.w	r1, sp, #3
   2c33e:	6828      	ldr	r0, [r5, #0]
   2c340:	f003 f979 	bl	2f636 <f_write>
			if (res != FR_OK) {
   2c344:	2800      	cmp	r0, #0
   2c346:	d0f3      	beq.n	2c330 <fatfs_truncate+0x46>
   2c348:	e7de      	b.n	2c308 <fatfs_truncate+0x1e>

0002c34a <fatfs_write>:
{
   2c34a:	b570      	push	{r4, r5, r6, lr}
   2c34c:	b082      	sub	sp, #8
   2c34e:	4604      	mov	r4, r0
   2c350:	460e      	mov	r6, r1
   2c352:	4615      	mov	r5, r2
	off_t pos = f_size((FIL *)zfp->filep);
   2c354:	6800      	ldr	r0, [r0, #0]
   2c356:	68c1      	ldr	r1, [r0, #12]
	if (zfp->flags & FS_O_APPEND) {
   2c358:	7a23      	ldrb	r3, [r4, #8]
   2c35a:	f013 0f20 	tst.w	r3, #32
   2c35e:	d002      	beq.n	2c366 <fatfs_write+0x1c>
		res = f_lseek(zfp->filep, pos);
   2c360:	f003 fa64 	bl	2f82c <f_lseek>
	if (res == FR_OK) {
   2c364:	b930      	cbnz	r0, 2c374 <fatfs_write+0x2a>
		res = f_write(zfp->filep, ptr, size, &bw);
   2c366:	ab01      	add	r3, sp, #4
   2c368:	462a      	mov	r2, r5
   2c36a:	4631      	mov	r1, r6
   2c36c:	6820      	ldr	r0, [r4, #0]
   2c36e:	f003 f962 	bl	2f636 <f_write>
	if (res != FR_OK) {
   2c372:	b118      	cbz	r0, 2c37c <fatfs_write+0x32>
		res = translate_error(res);
   2c374:	f7ff fec4 	bl	2c100 <translate_error>
}
   2c378:	b002      	add	sp, #8
   2c37a:	bd70      	pop	{r4, r5, r6, pc}
		res = bw;
   2c37c:	9801      	ldr	r0, [sp, #4]
	return res;
   2c37e:	e7fb      	b.n	2c378 <fatfs_write+0x2e>

0002c380 <fatfs_read>:
{
   2c380:	b500      	push	{lr}
   2c382:	b083      	sub	sp, #12
	res = f_read(zfp->filep, ptr, size, &br);
   2c384:	ab01      	add	r3, sp, #4
   2c386:	6800      	ldr	r0, [r0, #0]
   2c388:	f003 f8a0 	bl	2f4cc <f_read>
	if (res != FR_OK) {
   2c38c:	b918      	cbnz	r0, 2c396 <fatfs_read+0x16>
	return br;
   2c38e:	9801      	ldr	r0, [sp, #4]
}
   2c390:	b003      	add	sp, #12
   2c392:	f85d fb04 	ldr.w	pc, [sp], #4
		return translate_error(res);
   2c396:	f7ff feb3 	bl	2c100 <translate_error>
   2c39a:	e7f9      	b.n	2c390 <fatfs_read+0x10>

0002c39c <pool_get_uninit>:
	return offset / struct_size;
}

static inline struct net_buf *pool_get_uninit(struct net_buf_pool *pool,
					      uint16_t uninit_count)
{
   2c39c:	b538      	push	{r3, r4, r5, lr}
   2c39e:	4604      	mov	r4, r0
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   2c3a0:	7f03      	ldrb	r3, [r0, #28]
   2c3a2:	331b      	adds	r3, #27
   2c3a4:	f023 0303 	bic.w	r3, r3, #3
				__alignof__(struct net_buf));
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   2c3a8:	8b02      	ldrh	r2, [r0, #24]
   2c3aa:	1a52      	subs	r2, r2, r1
	struct net_buf *buf;

	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   2c3ac:	6a85      	ldr	r5, [r0, #40]	; 0x28
   2c3ae:	fb03 5502 	mla	r5, r3, r2, r5

	buf->pool_id = pool_id(pool);
   2c3b2:	f7f2 f959 	bl	1e668 <pool_id>
   2c3b6:	72a8      	strb	r0, [r5, #10]
	buf->user_data_size = pool->user_data_size;
   2c3b8:	7f23      	ldrb	r3, [r4, #28]
   2c3ba:	72eb      	strb	r3, [r5, #11]

	return buf;
}
   2c3bc:	4628      	mov	r0, r5
   2c3be:	bd38      	pop	{r3, r4, r5, pc}

0002c3c0 <fixed_data_unref>:
}

static void fixed_data_unref(struct net_buf *buf, uint8_t *data)
{
	/* Nothing needed for fixed-size data pools */
}
   2c3c0:	4770      	bx	lr

0002c3c2 <data_alloc>:
};

#endif /* CONFIG_HEAP_MEM_POOL_SIZE > 0 */

static uint8_t *data_alloc(struct net_buf *buf, size_t *size, k_timeout_t timeout)
{
   2c3c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c3c6:	4604      	mov	r4, r0
   2c3c8:	460d      	mov	r5, r1
   2c3ca:	4617      	mov	r7, r2
   2c3cc:	461e      	mov	r6, r3
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   2c3ce:	7a80      	ldrb	r0, [r0, #10]
   2c3d0:	f7f2 f956 	bl	1e680 <net_buf_pool_get>

	return pool->alloc->cb->alloc(buf, size, timeout);
   2c3d4:	6a43      	ldr	r3, [r0, #36]	; 0x24
   2c3d6:	681b      	ldr	r3, [r3, #0]
   2c3d8:	f8d3 8000 	ldr.w	r8, [r3]
   2c3dc:	463a      	mov	r2, r7
   2c3de:	4633      	mov	r3, r6
   2c3e0:	4629      	mov	r1, r5
   2c3e2:	4620      	mov	r0, r4
   2c3e4:	47c0      	blx	r8
}
   2c3e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002c3ea <net_buf_destroy>:
{
   2c3ea:	b510      	push	{r4, lr}
   2c3ec:	4604      	mov	r4, r0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   2c3ee:	7a80      	ldrb	r0, [r0, #10]
   2c3f0:	f7f2 f946 	bl	1e680 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   2c3f4:	4621      	mov	r1, r4
   2c3f6:	f004 f849 	bl	3048c <k_queue_prepend>
}
   2c3fa:	bd10      	pop	{r4, pc}

0002c3fc <data_unref>:

	return pool->alloc->cb->ref(buf, data);
}

static void data_unref(struct net_buf *buf, uint8_t *data)
{
   2c3fc:	b538      	push	{r3, r4, r5, lr}
   2c3fe:	4604      	mov	r4, r0
   2c400:	460d      	mov	r5, r1
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   2c402:	7a80      	ldrb	r0, [r0, #10]
   2c404:	f7f2 f93c 	bl	1e680 <net_buf_pool_get>

	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   2c408:	7a63      	ldrb	r3, [r4, #9]
   2c40a:	f013 0f01 	tst.w	r3, #1
   2c40e:	d105      	bne.n	2c41c <data_unref+0x20>
		return;
	}

	pool->alloc->cb->unref(buf, data);
   2c410:	6a43      	ldr	r3, [r0, #36]	; 0x24
   2c412:	681b      	ldr	r3, [r3, #0]
   2c414:	689b      	ldr	r3, [r3, #8]
   2c416:	4629      	mov	r1, r5
   2c418:	4620      	mov	r0, r4
   2c41a:	4798      	blx	r3
}
   2c41c:	bd38      	pop	{r3, r4, r5, pc}

0002c41e <net_buf_id>:
{
   2c41e:	b510      	push	{r4, lr}
   2c420:	4604      	mov	r4, r0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   2c422:	7a80      	ldrb	r0, [r0, #10]
   2c424:	f7f2 f92c 	bl	1e680 <net_buf_pool_get>
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   2c428:	7f03      	ldrb	r3, [r0, #28]
   2c42a:	331b      	adds	r3, #27
   2c42c:	f023 0303 	bic.w	r3, r3, #3
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   2c430:	6a82      	ldr	r2, [r0, #40]	; 0x28
   2c432:	1aa4      	subs	r4, r4, r2
}
   2c434:	fbb4 f0f3 	udiv	r0, r4, r3
   2c438:	bd10      	pop	{r4, pc}

0002c43a <fixed_data_alloc>:
{
   2c43a:	b570      	push	{r4, r5, r6, lr}
   2c43c:	4604      	mov	r4, r0
   2c43e:	460d      	mov	r5, r1
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   2c440:	7a80      	ldrb	r0, [r0, #10]
   2c442:	f7f2 f91d 	bl	1e680 <net_buf_pool_get>
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2c446:	6a43      	ldr	r3, [r0, #36]	; 0x24
   2c448:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   2c44a:	682a      	ldr	r2, [r5, #0]
   2c44c:	6819      	ldr	r1, [r3, #0]
   2c44e:	428a      	cmp	r2, r1
   2c450:	bf28      	it	cs
   2c452:	460a      	movcs	r2, r1
   2c454:	602a      	str	r2, [r5, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   2c456:	685d      	ldr	r5, [r3, #4]
   2c458:	681e      	ldr	r6, [r3, #0]
   2c45a:	4620      	mov	r0, r4
   2c45c:	f7ff ffdf 	bl	2c41e <net_buf_id>
}
   2c460:	fb00 5006 	mla	r0, r0, r6, r5
   2c464:	bd70      	pop	{r4, r5, r6, pc}

0002c466 <net_buf_reset>:
	buf->len  = 0U;
   2c466:	2300      	movs	r3, #0
   2c468:	8203      	strh	r3, [r0, #16]
	buf->data = buf->__buf;
   2c46a:	6943      	ldr	r3, [r0, #20]
   2c46c:	60c3      	str	r3, [r0, #12]
}
   2c46e:	4770      	bx	lr

0002c470 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   2c470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2c474:	b082      	sub	sp, #8
   2c476:	4605      	mov	r5, r0
   2c478:	9101      	str	r1, [sp, #4]
   2c47a:	4616      	mov	r6, r2
   2c47c:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   2c47e:	4610      	mov	r0, r2
   2c480:	4619      	mov	r1, r3
   2c482:	f004 fbc4 	bl	30c0e <sys_clock_timeout_end_calc>
   2c486:	4681      	mov	r9, r0
   2c488:	468a      	mov	sl, r1
   2c48a:	f04f 0240 	mov.w	r2, #64	; 0x40
   2c48e:	f3ef 8311 	mrs	r3, BASEPRI
   2c492:	f382 8812 	msr	BASEPRI_MAX, r2
   2c496:	f3bf 8f6f 	isb	sy
   2c49a:	461a      	mov	r2, r3
   2c49c:	4698      	mov	r8, r3
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   2c49e:	8b6b      	ldrh	r3, [r5, #26]
   2c4a0:	b393      	cbz	r3, 2c508 <net_buf_alloc_len+0x98>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   2c4a2:	8b2a      	ldrh	r2, [r5, #24]
   2c4a4:	4293      	cmp	r3, r2
   2c4a6:	d20b      	bcs.n	2c4c0 <net_buf_alloc_len+0x50>
	return z_impl_k_queue_get(queue, timeout);
   2c4a8:	2200      	movs	r2, #0
   2c4aa:	2300      	movs	r3, #0
   2c4ac:	4628      	mov	r0, r5
   2c4ae:	f7fa f843 	bl	26538 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   2c4b2:	4604      	mov	r4, r0
   2c4b4:	b120      	cbz	r0, 2c4c0 <net_buf_alloc_len+0x50>
	__asm__ volatile(
   2c4b6:	f388 8811 	msr	BASEPRI, r8
   2c4ba:	f3bf 8f6f 	isb	sy
				k_spin_unlock(&pool->lock, key);
				goto success;
   2c4be:	e00a      	b.n	2c4d6 <net_buf_alloc_len+0x66>
			}
		}

		uninit_count = pool->uninit_count--;
   2c4c0:	8b69      	ldrh	r1, [r5, #26]
   2c4c2:	1e4b      	subs	r3, r1, #1
   2c4c4:	836b      	strh	r3, [r5, #26]
   2c4c6:	f388 8811 	msr	BASEPRI, r8
   2c4ca:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&pool->lock, key);

		buf = pool_get_uninit(pool, uninit_count);
   2c4ce:	4628      	mov	r0, r5
   2c4d0:	f7ff ff64 	bl	2c39c <pool_get_uninit>
   2c4d4:	4604      	mov	r4, r0
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   2c4d6:	9b01      	ldr	r3, [sp, #4]
   2c4d8:	b3a3      	cbz	r3, 2c544 <net_buf_alloc_len+0xd4>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   2c4da:	ea56 0307 	orrs.w	r3, r6, r7
   2c4de:	d005      	beq.n	2c4ec <net_buf_alloc_len+0x7c>
   2c4e0:	f1b7 3fff 	cmp.w	r7, #4294967295
   2c4e4:	bf08      	it	eq
   2c4e6:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   2c4ea:	d11a      	bne.n	2c522 <net_buf_alloc_len+0xb2>
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   2c4ec:	4632      	mov	r2, r6
   2c4ee:	463b      	mov	r3, r7
   2c4f0:	a901      	add	r1, sp, #4
   2c4f2:	4620      	mov	r0, r4
   2c4f4:	f7ff ff65 	bl	2c3c2 <data_alloc>
   2c4f8:	4605      	mov	r5, r0
   2c4fa:	6160      	str	r0, [r4, #20]
		if (!buf->__buf) {
   2c4fc:	bb20      	cbnz	r0, 2c548 <net_buf_alloc_len+0xd8>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
   2c4fe:	4620      	mov	r0, r4
   2c500:	f7ff ff73 	bl	2c3ea <net_buf_destroy>
			return NULL;
   2c504:	462c      	mov	r4, r5
   2c506:	e029      	b.n	2c55c <net_buf_alloc_len+0xec>
   2c508:	f382 8811 	msr	BASEPRI, r2
   2c50c:	f3bf 8f6f 	isb	sy
   2c510:	4632      	mov	r2, r6
   2c512:	463b      	mov	r3, r7
   2c514:	4628      	mov	r0, r5
   2c516:	f7fa f80f 	bl	26538 <z_impl_k_queue_get>
	if (!buf) {
   2c51a:	4604      	mov	r4, r0
   2c51c:	2800      	cmp	r0, #0
   2c51e:	d1da      	bne.n	2c4d6 <net_buf_alloc_len+0x66>
   2c520:	e01c      	b.n	2c55c <net_buf_alloc_len+0xec>
			int64_t remaining = end - sys_clock_tick_get();
   2c522:	f7fa ffa3 	bl	2746c <sys_clock_tick_get>
   2c526:	ebb9 0900 	subs.w	r9, r9, r0
   2c52a:	eb6a 0a01 	sbc.w	sl, sl, r1
			if (remaining <= 0) {
   2c52e:	f1b9 0f01 	cmp.w	r9, #1
   2c532:	f17a 0300 	sbcs.w	r3, sl, #0
   2c536:	db02      	blt.n	2c53e <net_buf_alloc_len+0xce>
				timeout = Z_TIMEOUT_TICKS(remaining);
   2c538:	464e      	mov	r6, r9
   2c53a:	4657      	mov	r7, sl
   2c53c:	e7d6      	b.n	2c4ec <net_buf_alloc_len+0x7c>
				timeout = K_NO_WAIT;
   2c53e:	2600      	movs	r6, #0
   2c540:	4637      	mov	r7, r6
   2c542:	e7d3      	b.n	2c4ec <net_buf_alloc_len+0x7c>

#if __ASSERT_ON
		NET_BUF_ASSERT(req_size <= size);
#endif
	} else {
		buf->__buf = NULL;
   2c544:	2300      	movs	r3, #0
   2c546:	6163      	str	r3, [r4, #20]
	}

	buf->ref   = 1U;
   2c548:	2301      	movs	r3, #1
   2c54a:	7223      	strb	r3, [r4, #8]
	buf->flags = 0U;
   2c54c:	2300      	movs	r3, #0
   2c54e:	7263      	strb	r3, [r4, #9]
	buf->frags = NULL;
   2c550:	6063      	str	r3, [r4, #4]
	buf->size  = size;
   2c552:	9b01      	ldr	r3, [sp, #4]
   2c554:	8263      	strh	r3, [r4, #18]
	net_buf_reset(buf);
   2c556:	4620      	mov	r0, r4
   2c558:	f7ff ff85 	bl	2c466 <net_buf_reset>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   2c55c:	4620      	mov	r0, r4
   2c55e:	b002      	add	sp, #8
   2c560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002c564 <net_buf_alloc_fixed>:
				       line);
}
#else
struct net_buf *net_buf_alloc_fixed(struct net_buf_pool *pool,
				    k_timeout_t timeout)
{
   2c564:	b508      	push	{r3, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2c566:	6a41      	ldr	r1, [r0, #36]	; 0x24
   2c568:	6849      	ldr	r1, [r1, #4]

	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   2c56a:	6809      	ldr	r1, [r1, #0]
   2c56c:	f7ff ff80 	bl	2c470 <net_buf_alloc_len>
}
   2c570:	bd08      	pop	{r3, pc}

0002c572 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
   2c572:	b508      	push	{r3, lr}
   2c574:	f7f9 ffe0 	bl	26538 <z_impl_k_queue_get>
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	return buf;
}
   2c578:	bd08      	pop	{r3, pc}

0002c57a <net_buf_simple_init_with_data>:

void net_buf_simple_init_with_data(struct net_buf_simple *buf,
				   void *data, size_t size)
{
	buf->__buf = data;
   2c57a:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   2c57c:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   2c57e:	b292      	uxth	r2, r2
   2c580:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   2c582:	8082      	strh	r2, [r0, #4]
}
   2c584:	4770      	bx	lr

0002c586 <net_buf_simple_reserve>:
{
	__ASSERT_NO_MSG(buf);
	__ASSERT_NO_MSG(buf->len == 0U);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   2c586:	6883      	ldr	r3, [r0, #8]
   2c588:	440b      	add	r3, r1
   2c58a:	6003      	str	r3, [r0, #0]
}
   2c58c:	4770      	bx	lr

0002c58e <net_buf_slist_put>:
	__asm__ volatile(
   2c58e:	f04f 0240 	mov.w	r2, #64	; 0x40
   2c592:	f3ef 8311 	mrs	r3, BASEPRI
   2c596:	f382 8812 	msr	BASEPRI_MAX, r2
   2c59a:	f3bf 8f6f 	isb	sy
	parent->next = child;
   2c59e:	2200      	movs	r2, #0
   2c5a0:	600a      	str	r2, [r1, #0]
	return list->tail;
   2c5a2:	6842      	ldr	r2, [r0, #4]
Z_GENLIST_APPEND(slist, snode)
   2c5a4:	b132      	cbz	r2, 2c5b4 <net_buf_slist_put+0x26>
	parent->next = child;
   2c5a6:	6011      	str	r1, [r2, #0]
	list->tail = node;
   2c5a8:	6041      	str	r1, [r0, #4]
	__asm__ volatile(
   2c5aa:	f383 8811 	msr	BASEPRI, r3
   2c5ae:	f3bf 8f6f 	isb	sy
	__ASSERT_NO_MSG(buf);

	key = k_spin_lock(&net_buf_slist_lock);
	sys_slist_append(list, &buf->node);
	k_spin_unlock(&net_buf_slist_lock, key);
}
   2c5b2:	4770      	bx	lr
   2c5b4:	6041      	str	r1, [r0, #4]
	list->head = node;
   2c5b6:	6001      	str	r1, [r0, #0]
}
   2c5b8:	e7f7      	b.n	2c5aa <net_buf_slist_put+0x1c>

0002c5ba <net_buf_slist_get>:

struct net_buf *net_buf_slist_get(sys_slist_t *list)
{
   2c5ba:	4603      	mov	r3, r0
	__asm__ volatile(
   2c5bc:	f04f 0140 	mov.w	r1, #64	; 0x40
   2c5c0:	f3ef 8211 	mrs	r2, BASEPRI
   2c5c4:	f381 8812 	msr	BASEPRI_MAX, r1
   2c5c8:	f3bf 8f6f 	isb	sy
	return list->head;
   2c5cc:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   2c5ce:	b128      	cbz	r0, 2c5dc <net_buf_slist_get+0x22>
	return node->next;
   2c5d0:	6801      	ldr	r1, [r0, #0]
	list->head = node;
   2c5d2:	6019      	str	r1, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2c5d4:	f8d3 c004 	ldr.w	ip, [r3, #4]
   2c5d8:	4560      	cmp	r0, ip
   2c5da:	d004      	beq.n	2c5e6 <net_buf_slist_get+0x2c>
	__asm__ volatile(
   2c5dc:	f382 8811 	msr	BASEPRI, r2
   2c5e0:	f3bf 8f6f 	isb	sy
	buf = (void *)sys_slist_get(list);

	k_spin_unlock(&net_buf_slist_lock, key);

	return buf;
}
   2c5e4:	4770      	bx	lr
	list->tail = node;
   2c5e6:	6059      	str	r1, [r3, #4]
}
   2c5e8:	e7f8      	b.n	2c5dc <net_buf_slist_get+0x22>

0002c5ea <net_buf_put>:

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   2c5ea:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(fifo);
	__ASSERT_NO_MSG(buf);

	k_fifo_put(fifo, buf);
   2c5ec:	f003 ff42 	bl	30474 <k_queue_append>
}
   2c5f0:	bd08      	pop	{r3, pc}

0002c5f2 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   2c5f2:	b538      	push	{r3, r4, r5, lr}
   2c5f4:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf);

	while (buf) {
   2c5f6:	e00a      	b.n	2c60e <net_buf_unref+0x1c>
		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
		}

		buf->data = NULL;
   2c5f8:	2300      	movs	r3, #0
   2c5fa:	60e3      	str	r3, [r4, #12]
		buf->frags = NULL;
   2c5fc:	6063      	str	r3, [r4, #4]

		pool = net_buf_pool_get(buf->pool_id);
   2c5fe:	7aa0      	ldrb	r0, [r4, #10]
   2c600:	f7f2 f83e 	bl	1e680 <net_buf_pool_get>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   2c604:	6a03      	ldr	r3, [r0, #32]
   2c606:	b193      	cbz	r3, 2c62e <net_buf_unref+0x3c>
			pool->destroy(buf);
   2c608:	4620      	mov	r0, r4
   2c60a:	4798      	blx	r3
{
   2c60c:	462c      	mov	r4, r5
	while (buf) {
   2c60e:	b194      	cbz	r4, 2c636 <net_buf_unref+0x44>
		struct net_buf *frags = buf->frags;
   2c610:	6865      	ldr	r5, [r4, #4]
		if (--buf->ref > 0) {
   2c612:	7a23      	ldrb	r3, [r4, #8]
   2c614:	3b01      	subs	r3, #1
   2c616:	b2db      	uxtb	r3, r3
   2c618:	7223      	strb	r3, [r4, #8]
   2c61a:	b963      	cbnz	r3, 2c636 <net_buf_unref+0x44>
		if (buf->__buf) {
   2c61c:	6961      	ldr	r1, [r4, #20]
   2c61e:	2900      	cmp	r1, #0
   2c620:	d0ea      	beq.n	2c5f8 <net_buf_unref+0x6>
			data_unref(buf, buf->__buf);
   2c622:	4620      	mov	r0, r4
   2c624:	f7ff feea 	bl	2c3fc <data_unref>
			buf->__buf = NULL;
   2c628:	2300      	movs	r3, #0
   2c62a:	6163      	str	r3, [r4, #20]
   2c62c:	e7e4      	b.n	2c5f8 <net_buf_unref+0x6>
		} else {
			net_buf_destroy(buf);
   2c62e:	4620      	mov	r0, r4
   2c630:	f7ff fedb 	bl	2c3ea <net_buf_destroy>
   2c634:	e7ea      	b.n	2c60c <net_buf_unref+0x1a>
		}

		buf = frags;
	}
}
   2c636:	bd38      	pop	{r3, r4, r5, pc}

0002c638 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   2c638:	7a02      	ldrb	r2, [r0, #8]
   2c63a:	3201      	adds	r2, #1
   2c63c:	7202      	strb	r2, [r0, #8]
	return buf;
}
   2c63e:	4770      	bx	lr

0002c640 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   2c640:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   2c642:	4618      	mov	r0, r3
   2c644:	685b      	ldr	r3, [r3, #4]
   2c646:	2b00      	cmp	r3, #0
   2c648:	d1fb      	bne.n	2c642 <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   2c64a:	4770      	bx	lr

0002c64c <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   2c64c:	b570      	push	{r4, r5, r6, lr}
   2c64e:	4604      	mov	r4, r0
   2c650:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   2c652:	6846      	ldr	r6, [r0, #4]
   2c654:	b11e      	cbz	r6, 2c65e <net_buf_frag_insert+0x12>
		net_buf_frag_last(frag)->frags = parent->frags;
   2c656:	4608      	mov	r0, r1
   2c658:	f7ff fff2 	bl	2c640 <net_buf_frag_last>
   2c65c:	6046      	str	r6, [r0, #4]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   2c65e:	6065      	str	r5, [r4, #4]
}
   2c660:	bd70      	pop	{r4, r5, r6, pc}

0002c662 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   2c662:	b538      	push	{r3, r4, r5, lr}
   2c664:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(frag);

	if (!head) {
   2c666:	b138      	cbz	r0, 2c678 <net_buf_frag_add+0x16>
   2c668:	4604      	mov	r4, r0
		return net_buf_ref(frag);
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);
   2c66a:	f7ff ffe9 	bl	2c640 <net_buf_frag_last>
   2c66e:	4629      	mov	r1, r5
   2c670:	f7ff ffec 	bl	2c64c <net_buf_frag_insert>

	return head;
   2c674:	4620      	mov	r0, r4
}
   2c676:	bd38      	pop	{r3, r4, r5, pc}
		return net_buf_ref(frag);
   2c678:	4608      	mov	r0, r1
   2c67a:	f7ff ffdd 	bl	2c638 <net_buf_ref>
   2c67e:	e7fa      	b.n	2c676 <net_buf_frag_add+0x14>

0002c680 <net_buf_simple_add>:
	return buf->data + buf->len;
   2c680:	6802      	ldr	r2, [r0, #0]
   2c682:	8883      	ldrh	r3, [r0, #4]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   2c684:	4419      	add	r1, r3
   2c686:	8081      	strh	r1, [r0, #4]
	return tail;
}
   2c688:	18d0      	adds	r0, r2, r3
   2c68a:	4770      	bx	lr

0002c68c <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   2c68c:	b538      	push	{r3, r4, r5, lr}
   2c68e:	460d      	mov	r5, r1
   2c690:	4614      	mov	r4, r2
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   2c692:	4611      	mov	r1, r2
   2c694:	f7ff fff4 	bl	2c680 <net_buf_simple_add>
   2c698:	4622      	mov	r2, r4
   2c69a:	4629      	mov	r1, r5
   2c69c:	f7fd fa89 	bl	29bb2 <memcpy>
}
   2c6a0:	bd38      	pop	{r3, r4, r5, pc}

0002c6a2 <net_buf_simple_add_le16>:

	return u8;
}

void net_buf_simple_add_le16(struct net_buf_simple *buf, uint16_t val)
{
   2c6a2:	b510      	push	{r4, lr}
   2c6a4:	460c      	mov	r4, r1
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
   2c6a6:	2102      	movs	r1, #2
   2c6a8:	f7ff ffea 	bl	2c680 <net_buf_simple_add>
	dst[0] = val;
   2c6ac:	7004      	strb	r4, [r0, #0]
	dst[1] = val >> 8;
   2c6ae:	0a24      	lsrs	r4, r4, #8
   2c6b0:	7044      	strb	r4, [r0, #1]
}
   2c6b2:	bd10      	pop	{r4, pc}

0002c6b4 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   2c6b4:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   2c6b6:	6800      	ldr	r0, [r0, #0]
   2c6b8:	1a40      	subs	r0, r0, r1
   2c6ba:	6018      	str	r0, [r3, #0]
	buf->len += len;
   2c6bc:	889a      	ldrh	r2, [r3, #4]
   2c6be:	440a      	add	r2, r1
   2c6c0:	809a      	strh	r2, [r3, #4]
	return buf->data;
}
   2c6c2:	4770      	bx	lr

0002c6c4 <net_buf_simple_pull>:

	sys_put_be64(val, net_buf_simple_push(buf, sizeof(val)));
}

void *net_buf_simple_pull(struct net_buf_simple *buf, size_t len)
{
   2c6c4:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   2c6c6:	8882      	ldrh	r2, [r0, #4]
   2c6c8:	1a52      	subs	r2, r2, r1
   2c6ca:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   2c6cc:	6800      	ldr	r0, [r0, #0]
   2c6ce:	4408      	add	r0, r1
   2c6d0:	6018      	str	r0, [r3, #0]
}
   2c6d2:	4770      	bx	lr

0002c6d4 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   2c6d4:	4603      	mov	r3, r0
	void *data = buf->data;
   2c6d6:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   2c6d8:	889a      	ldrh	r2, [r3, #4]
   2c6da:	1a52      	subs	r2, r2, r1
   2c6dc:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   2c6de:	4401      	add	r1, r0
   2c6e0:	6019      	str	r1, [r3, #0]

	return data;
}
   2c6e2:	4770      	bx	lr

0002c6e4 <net_buf_simple_pull_u8>:

uint8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   2c6e4:	b510      	push	{r4, lr}
	uint8_t val;

	val = buf->data[0];
   2c6e6:	6803      	ldr	r3, [r0, #0]
   2c6e8:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   2c6ea:	2101      	movs	r1, #1
   2c6ec:	f7ff ffea 	bl	2c6c4 <net_buf_simple_pull>

	return val;
}
   2c6f0:	4620      	mov	r0, r4
   2c6f2:	bd10      	pop	{r4, pc}

0002c6f4 <net_buf_simple_pull_le16>:

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   2c6f4:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   2c6f6:	6803      	ldr	r3, [r0, #0]
   2c6f8:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   2c6fa:	2102      	movs	r1, #2
   2c6fc:	f7ff ffe2 	bl	2c6c4 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   2c700:	4620      	mov	r0, r4
   2c702:	bd10      	pop	{r4, pc}

0002c704 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   2c704:	6802      	ldr	r2, [r0, #0]
   2c706:	6880      	ldr	r0, [r0, #8]
}
   2c708:	1a10      	subs	r0, r2, r0
   2c70a:	4770      	bx	lr

0002c70c <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
   2c70c:	b538      	push	{r3, r4, r5, lr}
   2c70e:	4604      	mov	r4, r0
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   2c710:	88c5      	ldrh	r5, [r0, #6]
   2c712:	f7ff fff7 	bl	2c704 <net_buf_simple_headroom>
   2c716:	1a2d      	subs	r5, r5, r0
   2c718:	88a0      	ldrh	r0, [r4, #4]
}
   2c71a:	1a28      	subs	r0, r5, r0
   2c71c:	bd38      	pop	{r3, r4, r5, pc}

0002c71e <sdhc_request>:

extern int z_impl_sdhc_request(const struct device * dev, struct sdhc_command * cmd, struct sdhc_data * data);

__pinned_func
static inline int sdhc_request(const struct device * dev, struct sdhc_command * cmd, struct sdhc_data * data)
{
   2c71e:	b508      	push	{r3, lr}
		struct sdhc_data *data);

static inline int z_impl_sdhc_request(const struct device *dev,
		struct sdhc_command *cmd, struct sdhc_data *data)
{
	const struct sdhc_driver_api *api =
   2c720:	6883      	ldr	r3, [r0, #8]
		(const struct sdhc_driver_api *)dev->api;

	if (!api->request) {
   2c722:	685b      	ldr	r3, [r3, #4]
   2c724:	b10b      	cbz	r3, 2c72a <sdhc_request+0xc>
		return -ENOSYS;
	}

	return api->request(dev, cmd, data);
   2c726:	4798      	blx	r3
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_SDHC_REQUEST);
	}
#endif
	compiler_barrier();
	return z_impl_sdhc_request(dev, cmd, data);
}
   2c728:	bd08      	pop	{r3, pc}
		return -ENOSYS;
   2c72a:	f06f 0057 	mvn.w	r0, #87	; 0x57
	return z_impl_sdhc_request(dev, cmd, data);
   2c72e:	e7fb      	b.n	2c728 <sdhc_request+0xa>

0002c730 <sdhc_set_io>:

extern int z_impl_sdhc_set_io(const struct device * dev, struct sdhc_io * io);

__pinned_func
static inline int sdhc_set_io(const struct device * dev, struct sdhc_io * io)
{
   2c730:	b508      	push	{r3, lr}
__syscall int sdhc_set_io(const struct device *dev, struct sdhc_io *io);

static inline int z_impl_sdhc_set_io(const struct device *dev,
	struct sdhc_io *io)
{
	const struct sdhc_driver_api *api =
   2c732:	6883      	ldr	r3, [r0, #8]
		(const struct sdhc_driver_api *)dev->api;

	if (!api->set_io) {
   2c734:	689b      	ldr	r3, [r3, #8]
   2c736:	b10b      	cbz	r3, 2c73c <sdhc_set_io+0xc>
		return -ENOSYS;
	}

	return api->set_io(dev, io);
   2c738:	4798      	blx	r3
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_SDHC_SET_IO);
	}
#endif
	compiler_barrier();
	return z_impl_sdhc_set_io(dev, io);
}
   2c73a:	bd08      	pop	{r3, pc}
		return -ENOSYS;
   2c73c:	f06f 0057 	mvn.w	r0, #87	; 0x57
	return z_impl_sdhc_set_io(dev, io);
   2c740:	e7fb      	b.n	2c73a <sdhc_set_io+0xa>

0002c742 <sdhc_card_present>:

extern int z_impl_sdhc_card_present(const struct device * dev);

__pinned_func
static inline int sdhc_card_present(const struct device * dev)
{
   2c742:	b508      	push	{r3, lr}
 */
__syscall int sdhc_card_present(const struct device *dev);

static inline int z_impl_sdhc_card_present(const struct device *dev)
{
	const struct sdhc_driver_api *api =
   2c744:	6883      	ldr	r3, [r0, #8]
		(const struct sdhc_driver_api *)dev->api;

	if (!api->get_card_present) {
   2c746:	68db      	ldr	r3, [r3, #12]
   2c748:	b10b      	cbz	r3, 2c74e <sdhc_card_present+0xc>
		return -ENOSYS;
	}

	return api->get_card_present(dev);
   2c74a:	4798      	blx	r3
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_SDHC_CARD_PRESENT);
	}
#endif
	compiler_barrier();
	return z_impl_sdhc_card_present(dev);
}
   2c74c:	bd08      	pop	{r3, pc}
		return -ENOSYS;
   2c74e:	f06f 0057 	mvn.w	r0, #87	; 0x57
	return z_impl_sdhc_card_present(dev);
   2c752:	e7fb      	b.n	2c74c <sdhc_card_present+0xa>

0002c754 <sdhc_get_host_props>:

extern int z_impl_sdhc_get_host_props(const struct device * dev, struct sdhc_host_props * props);

__pinned_func
static inline int sdhc_get_host_props(const struct device * dev, struct sdhc_host_props * props)
{
   2c754:	b508      	push	{r3, lr}
	struct sdhc_host_props *props);

static inline int z_impl_sdhc_get_host_props(const struct device *dev,
	struct sdhc_host_props *props)
{
	const struct sdhc_driver_api *api =
   2c756:	6883      	ldr	r3, [r0, #8]
		(const struct sdhc_driver_api *)dev->api;

	if (!api->get_host_props) {
   2c758:	699b      	ldr	r3, [r3, #24]
   2c75a:	b10b      	cbz	r3, 2c760 <sdhc_get_host_props+0xc>
		return -ENOSYS;
	}

	return api->get_host_props(dev, props);
   2c75c:	4798      	blx	r3
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_SDHC_GET_HOST_PROPS);
	}
#endif
	compiler_barrier();
	return z_impl_sdhc_get_host_props(dev, props);
}
   2c75e:	bd08      	pop	{r3, pc}
		return -ENOSYS;
   2c760:	f06f 0057 	mvn.w	r0, #87	; 0x57
	return z_impl_sdhc_get_host_props(dev, props);
   2c764:	e7fb      	b.n	2c75e <sdhc_get_host_props+0xa>

0002c766 <sd_retry>:
 * Will retry command if return code equals SD_RETRY
 */
static inline int sd_retry(int(*cmd)(struct sd_card *card),
	struct sd_card *card,
	int retries)
{
   2c766:	b570      	push	{r4, r5, r6, lr}
   2c768:	4606      	mov	r6, r0
   2c76a:	460d      	mov	r5, r1
   2c76c:	4614      	mov	r4, r2
	int ret = -ETIMEDOUT;
   2c76e:	f06f 0073 	mvn.w	r0, #115	; 0x73

	while (retries-- >= 0) {
   2c772:	2c00      	cmp	r4, #0
   2c774:	f104 34ff 	add.w	r4, r4, #4294967295
   2c778:	db03      	blt.n	2c782 <sd_retry+0x1c>
		/* Try cmd */
		ret = cmd(card);
   2c77a:	4628      	mov	r0, r5
   2c77c:	47b0      	blx	r6
		 * Functions have 3 possible responses:
		 * 0: success
		 * SD_RETRY: retry command
		 * other: does not retry
		 */
		if (ret != SD_RETRY) {
   2c77e:	2801      	cmp	r0, #1
   2c780:	d0f7      	beq.n	2c772 <sd_retry+0xc>
			break;
		}
	}
	return ret == SD_RETRY ? -ETIMEDOUT : ret;
   2c782:	2801      	cmp	r0, #1
   2c784:	d000      	beq.n	2c788 <sd_retry+0x22>
}
   2c786:	bd70      	pop	{r4, r5, r6, pc}
	return ret == SD_RETRY ? -ETIMEDOUT : ret;
   2c788:	f06f 0073 	mvn.w	r0, #115	; 0x73
   2c78c:	e7fb      	b.n	2c786 <sd_retry+0x20>

0002c78e <sd_idle>:
{
   2c78e:	b510      	push	{r4, lr}
   2c790:	b08a      	sub	sp, #40	; 0x28
   2c792:	4604      	mov	r4, r0
	struct sdhc_command cmd = {0};
   2c794:	2224      	movs	r2, #36	; 0x24
   2c796:	2100      	movs	r1, #0
   2c798:	a801      	add	r0, sp, #4
   2c79a:	f7fd fa39 	bl	29c10 <memset>
	cmd.response_type = (SD_RSP_TYPE_NONE | SD_SPI_RSP_TYPE_R1);
   2c79e:	2310      	movs	r3, #16
   2c7a0:	9307      	str	r3, [sp, #28]
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
   2c7a2:	23c8      	movs	r3, #200	; 0xc8
   2c7a4:	9309      	str	r3, [sp, #36]	; 0x24
	return sdhc_request(card->sdhc, &cmd, NULL);
   2c7a6:	2200      	movs	r2, #0
   2c7a8:	a901      	add	r1, sp, #4
   2c7aa:	6820      	ldr	r0, [r4, #0]
   2c7ac:	f7ff ffb7 	bl	2c71e <sdhc_request>
}
   2c7b0:	b00a      	add	sp, #40	; 0x28
   2c7b2:	bd10      	pop	{r4, pc}

0002c7b4 <sd_enable_crc>:
{
   2c7b4:	b510      	push	{r4, lr}
   2c7b6:	b08a      	sub	sp, #40	; 0x28
   2c7b8:	4604      	mov	r4, r0
	struct sdhc_command cmd = {0};
   2c7ba:	2224      	movs	r2, #36	; 0x24
   2c7bc:	2100      	movs	r1, #0
   2c7be:	a801      	add	r0, sp, #4
   2c7c0:	f7fd fa26 	bl	29c10 <memset>
	cmd.opcode = SD_SPI_CRC_ON_OFF;
   2c7c4:	233b      	movs	r3, #59	; 0x3b
   2c7c6:	9301      	str	r3, [sp, #4]
	cmd.arg = 0x1; /* Enable CRC */
   2c7c8:	2301      	movs	r3, #1
   2c7ca:	9302      	str	r3, [sp, #8]
	cmd.response_type = SD_SPI_RSP_TYPE_R1;
   2c7cc:	2310      	movs	r3, #16
   2c7ce:	9307      	str	r3, [sp, #28]
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
   2c7d0:	23c8      	movs	r3, #200	; 0xc8
   2c7d2:	9309      	str	r3, [sp, #36]	; 0x24
	return sdhc_request(card->sdhc, &cmd, NULL);
   2c7d4:	2200      	movs	r2, #0
   2c7d6:	a901      	add	r1, sp, #4
   2c7d8:	6820      	ldr	r0, [r4, #0]
   2c7da:	f7ff ffa0 	bl	2c71e <sdhc_request>
}
   2c7de:	b00a      	add	sp, #40	; 0x28
   2c7e0:	bd10      	pop	{r4, pc}

0002c7e2 <k_msleep>:
{
   2c7e2:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   2c7e4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   2c7e8:	17c1      	asrs	r1, r0, #31
   2c7ea:	03c9      	lsls	r1, r1, #15
   2c7ec:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   2c7f0:	03c0      	lsls	r0, r0, #15
   2c7f2:	f240 33e7 	movw	r3, #999	; 0x3e7
   2c7f6:	18c0      	adds	r0, r0, r3
   2c7f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2c7fc:	f04f 0300 	mov.w	r3, #0
   2c800:	f141 0100 	adc.w	r1, r1, #0
   2c804:	f7d3 fc7c 	bl	100 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   2c808:	f7fa fc30 	bl	2706c <z_impl_k_sleep>
}
   2c80c:	bd08      	pop	{r3, pc}

0002c80e <sd_test_sdio>:
{
   2c80e:	b510      	push	{r4, lr}
   2c810:	b08a      	sub	sp, #40	; 0x28
   2c812:	4604      	mov	r4, r0
	struct sdhc_command cmd = {0};
   2c814:	2224      	movs	r2, #36	; 0x24
   2c816:	2100      	movs	r1, #0
   2c818:	a801      	add	r0, sp, #4
   2c81a:	f7fd f9f9 	bl	29c10 <memset>
	cmd.opcode = SDIO_SEND_OP_COND;
   2c81e:	2305      	movs	r3, #5
   2c820:	9301      	str	r3, [sp, #4]
	cmd.response_type = (SD_RSP_TYPE_R4 | SD_SPI_RSP_TYPE_R4);
   2c822:	2355      	movs	r3, #85	; 0x55
   2c824:	9307      	str	r3, [sp, #28]
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
   2c826:	23c8      	movs	r3, #200	; 0xc8
   2c828:	9309      	str	r3, [sp, #36]	; 0x24
	ret = sdhc_request(card->sdhc, &cmd, NULL);
   2c82a:	2200      	movs	r2, #0
   2c82c:	a901      	add	r1, sp, #4
   2c82e:	6820      	ldr	r0, [r4, #0]
   2c830:	f7ff ff75 	bl	2c71e <sdhc_request>
	if (ret) {
   2c834:	b9a8      	cbnz	r0, 2c862 <sd_test_sdio+0x54>
	card->num_io = ((cmd.response[0] & SDIO_OCR_IO_NUMBER)
   2c836:	9a03      	ldr	r2, [sp, #12]
			>> SDIO_OCR_IO_NUMBER_SHIFT);
   2c838:	f3c2 7102 	ubfx	r1, r2, #28, #3
	card->num_io = ((cmd.response[0] & SDIO_OCR_IO_NUMBER)
   2c83c:	65e1      	str	r1, [r4, #92]	; 0x5c
	if ((card->num_io == 0) | ((cmd.response[0] & SDIO_IO_OCR_MASK) == 0)) {
   2c83e:	f032 437f 	bics.w	r3, r2, #4278190080	; 0xff000000
   2c842:	bf0c      	ite	eq
   2c844:	2301      	moveq	r3, #1
   2c846:	2300      	movne	r3, #0
   2c848:	2900      	cmp	r1, #0
   2c84a:	bf08      	it	eq
   2c84c:	f043 0301 	orreq.w	r3, r3, #1
   2c850:	b163      	cbz	r3, 2c86c <sd_test_sdio+0x5e>
		if (cmd.response[0] & SDIO_OCR_MEM_PRESENT_FLAG) {
   2c852:	f012 6f00 	tst.w	r2, #134217728	; 0x8000000
   2c856:	d00e      	beq.n	2c876 <sd_test_sdio+0x68>
			card->type = CARD_SDMMC;
   2c858:	2300      	movs	r3, #0
   2c85a:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
			return SD_NOT_SDIO;
   2c85e:	2002      	movs	r0, #2
   2c860:	e007      	b.n	2c872 <sd_test_sdio+0x64>
		card->type = CARD_SDMMC;
   2c862:	2300      	movs	r3, #0
   2c864:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
		return SD_NOT_SDIO;
   2c868:	2002      	movs	r0, #2
   2c86a:	e002      	b.n	2c872 <sd_test_sdio+0x64>
	card->type = CARD_SDIO;
   2c86c:	2301      	movs	r3, #1
   2c86e:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
}
   2c872:	b00a      	add	sp, #40	; 0x28
   2c874:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   2c876:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2c87a:	e7fa      	b.n	2c872 <sd_test_sdio+0x64>

0002c87c <sd_is_card_present>:

/* Return true if card is present, false otherwise */
bool sd_is_card_present(const struct device *sdhc_dev)
{
	if (!sdhc_dev) {
   2c87c:	b138      	cbz	r0, 2c88e <sd_is_card_present+0x12>
{
   2c87e:	b508      	push	{r3, lr}
		return false;
	}
	return sdhc_card_present(sdhc_dev) == 1;
   2c880:	f7ff ff5f 	bl	2c742 <sdhc_card_present>
   2c884:	2801      	cmp	r0, #1
   2c886:	bf14      	ite	ne
   2c888:	2000      	movne	r0, #0
   2c88a:	2001      	moveq	r0, #1
}
   2c88c:	bd08      	pop	{r3, pc}
		return false;
   2c88e:	2000      	movs	r0, #0
}
   2c890:	4770      	bx	lr

0002c892 <sdhc_request>:
{
   2c892:	b508      	push	{r3, lr}
	const struct sdhc_driver_api *api =
   2c894:	6883      	ldr	r3, [r0, #8]
	if (!api->request) {
   2c896:	685b      	ldr	r3, [r3, #4]
   2c898:	b10b      	cbz	r3, 2c89e <sdhc_request+0xc>
	return api->request(dev, cmd, data);
   2c89a:	4798      	blx	r3
}
   2c89c:	bd08      	pop	{r3, pc}
		return -ENOSYS;
   2c89e:	f06f 0057 	mvn.w	r0, #87	; 0x57
	return z_impl_sdhc_request(dev, cmd, data);
   2c8a2:	e7fb      	b.n	2c89c <sdhc_request+0xa>

0002c8a4 <sdhc_set_io>:
{
   2c8a4:	b508      	push	{r3, lr}
	const struct sdhc_driver_api *api =
   2c8a6:	6883      	ldr	r3, [r0, #8]
	if (!api->set_io) {
   2c8a8:	689b      	ldr	r3, [r3, #8]
   2c8aa:	b10b      	cbz	r3, 2c8b0 <sdhc_set_io+0xc>
	return api->set_io(dev, io);
   2c8ac:	4798      	blx	r3
}
   2c8ae:	bd08      	pop	{r3, pc}
		return -ENOSYS;
   2c8b0:	f06f 0057 	mvn.w	r0, #87	; 0x57
	return z_impl_sdhc_set_io(dev, io);
   2c8b4:	e7fb      	b.n	2c8ae <sdhc_set_io+0xa>

0002c8b6 <sdhc_card_busy>:
{
   2c8b6:	b508      	push	{r3, lr}
	const struct sdhc_driver_api *api =
   2c8b8:	6883      	ldr	r3, [r0, #8]
	if (!api->card_busy) {
   2c8ba:	695b      	ldr	r3, [r3, #20]
   2c8bc:	b10b      	cbz	r3, 2c8c2 <sdhc_card_busy+0xc>
	return api->card_busy(dev);
   2c8be:	4798      	blx	r3
}
   2c8c0:	bd08      	pop	{r3, pc}
		return -ENOSYS;
   2c8c2:	f06f 0057 	mvn.w	r0, #87	; 0x57
	return z_impl_sdhc_card_busy(dev);
   2c8c6:	e7fb      	b.n	2c8c0 <sdhc_card_busy+0xa>

0002c8c8 <sd_retry>:
{
   2c8c8:	b570      	push	{r4, r5, r6, lr}
   2c8ca:	4606      	mov	r6, r0
   2c8cc:	460d      	mov	r5, r1
   2c8ce:	4614      	mov	r4, r2
	int ret = -ETIMEDOUT;
   2c8d0:	f06f 0073 	mvn.w	r0, #115	; 0x73
	while (retries-- >= 0) {
   2c8d4:	2c00      	cmp	r4, #0
   2c8d6:	f104 34ff 	add.w	r4, r4, #4294967295
   2c8da:	db03      	blt.n	2c8e4 <sd_retry+0x1c>
		ret = cmd(card);
   2c8dc:	4628      	mov	r0, r5
   2c8de:	47b0      	blx	r6
		if (ret != SD_RETRY) {
   2c8e0:	2801      	cmp	r0, #1
   2c8e2:	d0f7      	beq.n	2c8d4 <sd_retry+0xc>
	return ret == SD_RETRY ? -ETIMEDOUT : ret;
   2c8e4:	2801      	cmp	r0, #1
   2c8e6:	d000      	beq.n	2c8ea <sd_retry+0x22>
}
   2c8e8:	bd70      	pop	{r4, r5, r6, pc}
	return ret == SD_RETRY ? -ETIMEDOUT : ret;
   2c8ea:	f06f 0073 	mvn.w	r0, #115	; 0x73
   2c8ee:	e7fb      	b.n	2c8e8 <sd_retry+0x20>

0002c8f0 <sdmmc_decode_csd>:
{
   2c8f0:	b530      	push	{r4, r5, lr}
	csd->csd_structure = (uint8_t)((raw_csd[3U] &
   2c8f2:	68cc      	ldr	r4, [r1, #12]
   2c8f4:	0fa4      	lsrs	r4, r4, #30
   2c8f6:	7004      	strb	r4, [r0, #0]
	csd->read_time1 = (uint8_t)((raw_csd[3U] &
   2c8f8:	f891 c00e 	ldrb.w	ip, [r1, #14]
   2c8fc:	f880 c001 	strb.w	ip, [r0, #1]
	csd->read_time2 = (uint8_t)((raw_csd[3U] &
   2c900:	f891 c00d 	ldrb.w	ip, [r1, #13]
   2c904:	f880 c002 	strb.w	ip, [r0, #2]
	csd->xfer_rate = (uint8_t)(raw_csd[3U] &
   2c908:	f891 c00c 	ldrb.w	ip, [r1, #12]
   2c90c:	f880 c003 	strb.w	ip, [r0, #3]
	csd->cmd_class = (uint16_t)((raw_csd[2U] &
   2c910:	688d      	ldr	r5, [r1, #8]
   2c912:	ea4f 5c15 	mov.w	ip, r5, lsr #20
   2c916:	f8a0 c004 	strh.w	ip, [r0, #4]
		0xF0000U) >> 16U);
   2c91a:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
	csd->read_blk_len = (uint8_t)((raw_csd[2U] &
   2c91e:	f00c 0c0f 	and.w	ip, ip, #15
   2c922:	f880 c006 	strb.w	ip, [r0, #6]
	if (raw_csd[2U] & 0x8000U) {
   2c926:	688d      	ldr	r5, [r1, #8]
   2c928:	f415 4f00 	tst.w	r5, #32768	; 0x8000
   2c92c:	d005      	beq.n	2c93a <sdmmc_decode_csd+0x4a>
		csd->flags |= SD_CSD_READ_BLK_PARTIAL_FLAG;
   2c92e:	f8b0 e008 	ldrh.w	lr, [r0, #8]
   2c932:	f04e 0e01 	orr.w	lr, lr, #1
   2c936:	f8a0 e008 	strh.w	lr, [r0, #8]
	if (raw_csd[2U] & 0x4000U) {
   2c93a:	688d      	ldr	r5, [r1, #8]
   2c93c:	f415 4f80 	tst.w	r5, #16384	; 0x4000
   2c940:	d005      	beq.n	2c94e <sdmmc_decode_csd+0x5e>
		csd->flags |= SD_CSD_READ_BLK_PARTIAL_FLAG;
   2c942:	f8b0 e008 	ldrh.w	lr, [r0, #8]
   2c946:	f04e 0e01 	orr.w	lr, lr, #1
   2c94a:	f8a0 e008 	strh.w	lr, [r0, #8]
	if (raw_csd[2U] & 0x2000U) {
   2c94e:	688d      	ldr	r5, [r1, #8]
   2c950:	f415 5f00 	tst.w	r5, #8192	; 0x2000
   2c954:	d005      	beq.n	2c962 <sdmmc_decode_csd+0x72>
		csd->flags |= SD_CSD_READ_BLK_MISALIGN_FLAG;
   2c956:	f8b0 e008 	ldrh.w	lr, [r0, #8]
   2c95a:	f04e 0e04 	orr.w	lr, lr, #4
   2c95e:	f8a0 e008 	strh.w	lr, [r0, #8]
	if (raw_csd[2U] & 0x1000U) {
   2c962:	688d      	ldr	r5, [r1, #8]
   2c964:	f415 5f80 	tst.w	r5, #4096	; 0x1000
   2c968:	d005      	beq.n	2c976 <sdmmc_decode_csd+0x86>
		csd->flags |= SD_CSD_DSR_IMPLEMENTED_FLAG;
   2c96a:	f8b0 e008 	ldrh.w	lr, [r0, #8]
   2c96e:	f04e 0e08 	orr.w	lr, lr, #8
   2c972:	f8a0 e008 	strh.w	lr, [r0, #8]
	switch (csd->csd_structure) {
   2c976:	2c00      	cmp	r4, #0
   2c978:	d046      	beq.n	2ca08 <sdmmc_decode_csd+0x118>
   2c97a:	2c01      	cmp	r4, #1
   2c97c:	d07c      	beq.n	2ca78 <sdmmc_decode_csd+0x188>
	if ((uint8_t)((raw_csd[1U] & 0x4000U) >> 14U)) {
   2c97e:	684b      	ldr	r3, [r1, #4]
   2c980:	f413 4f80 	tst.w	r3, #16384	; 0x4000
   2c984:	d003      	beq.n	2c98e <sdmmc_decode_csd+0x9e>
		csd->flags |= SD_CSD_ERASE_BLK_EN_FLAG;
   2c986:	8903      	ldrh	r3, [r0, #8]
   2c988:	f043 0310 	orr.w	r3, r3, #16
   2c98c:	8103      	strh	r3, [r0, #8]
	csd->erase_size = (uint8_t)((raw_csd[1U] &
   2c98e:	684b      	ldr	r3, [r1, #4]
   2c990:	f3c3 13c6 	ubfx	r3, r3, #7, #7
   2c994:	7543      	strb	r3, [r0, #21]
	csd->write_prtect_size = (uint8_t)(raw_csd[1U] &
   2c996:	684b      	ldr	r3, [r1, #4]
   2c998:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2c99c:	7583      	strb	r3, [r0, #22]
	csd->write_speed_factor = (uint8_t)((raw_csd[0U] &
   2c99e:	680b      	ldr	r3, [r1, #0]
   2c9a0:	f3c3 6382 	ubfx	r3, r3, #26, #3
   2c9a4:	75c3      	strb	r3, [r0, #23]
	csd->write_blk_len = (uint8_t)((raw_csd[0U] &
   2c9a6:	680b      	ldr	r3, [r1, #0]
   2c9a8:	f3c3 5383 	ubfx	r3, r3, #22, #4
   2c9ac:	7603      	strb	r3, [r0, #24]
	if ((uint8_t)((raw_csd[0U] & 0x200000U) >> 21U)) {
   2c9ae:	680b      	ldr	r3, [r1, #0]
   2c9b0:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
   2c9b4:	d003      	beq.n	2c9be <sdmmc_decode_csd+0xce>
		csd->flags |= SD_CSD_WRITE_BLK_PARTIAL_FLAG;
   2c9b6:	8903      	ldrh	r3, [r0, #8]
   2c9b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2c9bc:	8103      	strh	r3, [r0, #8]
	if ((uint8_t)((raw_csd[0U] & 0x8000U) >> 15U)) {
   2c9be:	680b      	ldr	r3, [r1, #0]
   2c9c0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   2c9c4:	d003      	beq.n	2c9ce <sdmmc_decode_csd+0xde>
		csd->flags |= SD_CSD_FILE_FMT_GRP_FLAG;
   2c9c6:	8903      	ldrh	r3, [r0, #8]
   2c9c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2c9cc:	8103      	strh	r3, [r0, #8]
	if ((uint8_t)((raw_csd[0U] & 0x4000U) >> 14U)) {
   2c9ce:	680b      	ldr	r3, [r1, #0]
   2c9d0:	f413 4f80 	tst.w	r3, #16384	; 0x4000
   2c9d4:	d003      	beq.n	2c9de <sdmmc_decode_csd+0xee>
		csd->flags |= SD_CSD_COPY_FLAG;
   2c9d6:	8903      	ldrh	r3, [r0, #8]
   2c9d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   2c9dc:	8103      	strh	r3, [r0, #8]
	if ((uint8_t)((raw_csd[0U] & 0x2000U) >> 13U)) {
   2c9de:	680b      	ldr	r3, [r1, #0]
   2c9e0:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   2c9e4:	d003      	beq.n	2c9ee <sdmmc_decode_csd+0xfe>
		csd->flags |= SD_CSD_PERMANENT_WRITE_PROTECT_FLAG;
   2c9e6:	8903      	ldrh	r3, [r0, #8]
   2c9e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   2c9ec:	8103      	strh	r3, [r0, #8]
	if ((uint8_t)((raw_csd[0U] & 0x1000U) >> 12U)) {
   2c9ee:	680b      	ldr	r3, [r1, #0]
   2c9f0:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   2c9f4:	d003      	beq.n	2c9fe <sdmmc_decode_csd+0x10e>
		csd->flags |= SD_CSD_TMP_WRITE_PROTECT_FLAG;
   2c9f6:	8903      	ldrh	r3, [r0, #8]
   2c9f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   2c9fc:	8103      	strh	r3, [r0, #8]
	csd->file_fmt = (uint8_t)((raw_csd[0U] & 0xC00U) >> 10U);
   2c9fe:	680b      	ldr	r3, [r1, #0]
   2ca00:	f3c3 2381 	ubfx	r3, r3, #10, #2
   2ca04:	7643      	strb	r3, [r0, #25]
}
   2ca06:	bd30      	pop	{r4, r5, pc}
		csd->device_size = (uint32_t)((raw_csd[2U] &
   2ca08:	688d      	ldr	r5, [r1, #8]
   2ca0a:	f640 74fc 	movw	r4, #4092	; 0xffc
   2ca0e:	ea04 0485 	and.w	r4, r4, r5, lsl #2
   2ca12:	60c4      	str	r4, [r0, #12]
		csd->device_size |= (uint32_t)((raw_csd[1U] &
   2ca14:	684d      	ldr	r5, [r1, #4]
   2ca16:	ea44 7495 	orr.w	r4, r4, r5, lsr #30
   2ca1a:	60c4      	str	r4, [r0, #12]
		csd->read_current_min = (uint8_t)((raw_csd[1U] &
   2ca1c:	684d      	ldr	r5, [r1, #4]
   2ca1e:	f3c5 65c2 	ubfx	r5, r5, #27, #3
   2ca22:	7405      	strb	r5, [r0, #16]
			0x7000000U) >> 24U);
   2ca24:	79cd      	ldrb	r5, [r1, #7]
		csd->read_current_max = (uint8_t)((raw_csd[1U] &
   2ca26:	f005 0507 	and.w	r5, r5, #7
   2ca2a:	7445      	strb	r5, [r0, #17]
			0xE00000U) >> 20U);
   2ca2c:	684d      	ldr	r5, [r1, #4]
   2ca2e:	ea4f 5e15 	mov.w	lr, r5, lsr #20
		csd->write_current_min = (uint8_t)((raw_csd[1U] &
   2ca32:	f00e 0e0e 	and.w	lr, lr, #14
   2ca36:	f880 e012 	strb.w	lr, [r0, #18]
		csd->write_current_max = (uint8_t)((raw_csd[1U] &
   2ca3a:	684d      	ldr	r5, [r1, #4]
   2ca3c:	f3c5 4582 	ubfx	r5, r5, #18, #3
   2ca40:	74c5      	strb	r5, [r0, #19]
		csd->dev_size_mul = (uint8_t)((raw_csd[1U] &
   2ca42:	684d      	ldr	r5, [r1, #4]
   2ca44:	f3c5 3ec2 	ubfx	lr, r5, #15, #3
   2ca48:	f880 e014 	strb.w	lr, [r0, #20]
		tmp_blk_count = ((csd->device_size + 1U) <<
   2ca4c:	3401      	adds	r4, #1
			(csd->dev_size_mul + 2U));
   2ca4e:	f10e 0e02 	add.w	lr, lr, #2
		tmp_blk_count = ((csd->device_size + 1U) <<
   2ca52:	fa04 f40e 	lsl.w	r4, r4, lr
		tmp_blk_size = (1U << (csd->read_blk_len));
   2ca56:	2501      	movs	r5, #1
   2ca58:	fa05 f50c 	lsl.w	r5, r5, ip
		if (tmp_blk_size != SDMMC_DEFAULT_BLOCK_SIZE) {
   2ca5c:	f1bc 0f09 	cmp.w	ip, #9
   2ca60:	d004      	beq.n	2ca6c <sdmmc_decode_csd+0x17c>
			tmp_blk_count = (tmp_blk_count * tmp_blk_size);
   2ca62:	fa04 f40c 	lsl.w	r4, r4, ip
			tmp_blk_count = (tmp_blk_count / tmp_blk_size);
   2ca66:	0a64      	lsrs	r4, r4, #9
			tmp_blk_size = SDMMC_DEFAULT_BLOCK_SIZE;
   2ca68:	f44f 7500 	mov.w	r5, #512	; 0x200
		if (blk_count) {
   2ca6c:	b102      	cbz	r2, 2ca70 <sdmmc_decode_csd+0x180>
			*blk_count = tmp_blk_count;
   2ca6e:	6014      	str	r4, [r2, #0]
		if (blk_size) {
   2ca70:	2b00      	cmp	r3, #0
   2ca72:	d084      	beq.n	2c97e <sdmmc_decode_csd+0x8e>
			*blk_size = tmp_blk_size;
   2ca74:	601d      	str	r5, [r3, #0]
   2ca76:	e782      	b.n	2c97e <sdmmc_decode_csd+0x8e>
		csd->device_size = (uint32_t)((raw_csd[2U] &
   2ca78:	688c      	ldr	r4, [r1, #8]
			0x3FU) << 16U);
   2ca7a:	0424      	lsls	r4, r4, #16
		csd->device_size = (uint32_t)((raw_csd[2U] &
   2ca7c:	f404 147c 	and.w	r4, r4, #4128768	; 0x3f0000
   2ca80:	60c4      	str	r4, [r0, #12]
			0xFFFF0000U) >> 16U);
   2ca82:	88cd      	ldrh	r5, [r1, #6]
		csd->device_size |= (uint32_t)((raw_csd[1U] &
   2ca84:	432c      	orrs	r4, r5
   2ca86:	60c4      	str	r4, [r0, #12]
		tmp_blk_count = ((csd->device_size + 1U) * 1024U);
   2ca88:	3401      	adds	r4, #1
   2ca8a:	02a4      	lsls	r4, r4, #10
		if (blk_count) {
   2ca8c:	b102      	cbz	r2, 2ca90 <sdmmc_decode_csd+0x1a0>
			*blk_count = tmp_blk_count;
   2ca8e:	6014      	str	r4, [r2, #0]
		if (blk_size) {
   2ca90:	2b00      	cmp	r3, #0
   2ca92:	f43f af74 	beq.w	2c97e <sdmmc_decode_csd+0x8e>
			*blk_size = tmp_blk_size;
   2ca96:	f44f 7200 	mov.w	r2, #512	; 0x200
   2ca9a:	601a      	str	r2, [r3, #0]
   2ca9c:	e76f      	b.n	2c97e <sdmmc_decode_csd+0x8e>

0002ca9e <sdmmc_decode_scr>:
	scr->flags = 0U;
   2ca9e:	2300      	movs	r3, #0
   2caa0:	8043      	strh	r3, [r0, #2]
	scr->scr_structure = (uint8_t)((raw_scr[0U] & 0xF0000000U) >> 28U);
   2caa2:	680b      	ldr	r3, [r1, #0]
   2caa4:	0f1b      	lsrs	r3, r3, #28
   2caa6:	7003      	strb	r3, [r0, #0]
	scr->sd_spec = (uint8_t)((raw_scr[0U] & 0xF000000U) >> 24U);
   2caa8:	78cb      	ldrb	r3, [r1, #3]
   2caaa:	f003 030f 	and.w	r3, r3, #15
   2caae:	7043      	strb	r3, [r0, #1]
	if ((uint8_t)((raw_scr[0U] & 0x800000U) >> 23U)) {
   2cab0:	f8d1 c000 	ldr.w	ip, [r1]
   2cab4:	f41c 0f00 	tst.w	ip, #8388608	; 0x800000
   2cab8:	d003      	beq.n	2cac2 <sdmmc_decode_scr+0x24>
		scr->flags |= SD_SCR_DATA_STATUS_AFTER_ERASE;
   2caba:	f04f 0c01 	mov.w	ip, #1
   2cabe:	f8a0 c002 	strh.w	ip, [r0, #2]
	scr->sd_sec = (uint8_t)((raw_scr[0U] & 0x700000U) >> 20U);
   2cac2:	f8d1 c000 	ldr.w	ip, [r1]
   2cac6:	f3cc 5c02 	ubfx	ip, ip, #20, #3
   2caca:	f880 c004 	strb.w	ip, [r0, #4]
	scr->sd_width = (uint8_t)((raw_scr[0U] & 0xF0000U) >> 16U);
   2cace:	f8b1 c002 	ldrh.w	ip, [r1, #2]
   2cad2:	f00c 0c0f 	and.w	ip, ip, #15
   2cad6:	f880 c005 	strb.w	ip, [r0, #5]
	if ((uint8_t)((raw_scr[0U] & 0x8000U) >> 15U)) {
   2cada:	f8d1 c000 	ldr.w	ip, [r1]
   2cade:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
   2cae2:	d005      	beq.n	2caf0 <sdmmc_decode_scr+0x52>
		scr->flags |= SD_SCR_SPEC3;
   2cae4:	f8b0 c002 	ldrh.w	ip, [r0, #2]
   2cae8:	f04c 0c02 	orr.w	ip, ip, #2
   2caec:	f8a0 c002 	strh.w	ip, [r0, #2]
	scr->sd_ext_sec = (uint8_t)((raw_scr[0U] & 0x7800U) >> 10U);
   2caf0:	f8d1 c000 	ldr.w	ip, [r1]
   2caf4:	ea4f 2c9c 	mov.w	ip, ip, lsr #10
   2caf8:	f00c 0c1e 	and.w	ip, ip, #30
   2cafc:	f880 c006 	strb.w	ip, [r0, #6]
	scr->cmd_support = (uint8_t)(raw_scr[0U] & 0x3U);
   2cb00:	f8d1 c000 	ldr.w	ip, [r1]
   2cb04:	f00c 0c03 	and.w	ip, ip, #3
   2cb08:	f880 c007 	strb.w	ip, [r0, #7]
	scr->rsvd = raw_scr[1U];
   2cb0c:	6849      	ldr	r1, [r1, #4]
   2cb0e:	6081      	str	r1, [r0, #8]
	switch (scr->sd_spec) {
   2cb10:	2b01      	cmp	r3, #1
   2cb12:	d00f      	beq.n	2cb34 <sdmmc_decode_scr+0x96>
   2cb14:	2b02      	cmp	r3, #2
   2cb16:	d007      	beq.n	2cb28 <sdmmc_decode_scr+0x8a>
   2cb18:	b123      	cbz	r3, 2cb24 <sdmmc_decode_scr+0x86>
   2cb1a:	2300      	movs	r3, #0
	if (version && tmp_version) {
   2cb1c:	b10a      	cbz	r2, 2cb22 <sdmmc_decode_scr+0x84>
   2cb1e:	b103      	cbz	r3, 2cb22 <sdmmc_decode_scr+0x84>
		*version = tmp_version;
   2cb20:	6013      	str	r3, [r2, #0]
}
   2cb22:	4770      	bx	lr
		tmp_version = SD_SPEC_VER1_0;
   2cb24:	2301      	movs	r3, #1
   2cb26:	e7f9      	b.n	2cb1c <sdmmc_decode_scr+0x7e>
		if (scr->flags & SD_SCR_SPEC3) {
   2cb28:	8843      	ldrh	r3, [r0, #2]
   2cb2a:	f013 0f02 	tst.w	r3, #2
   2cb2e:	d103      	bne.n	2cb38 <sdmmc_decode_scr+0x9a>
		tmp_version = SD_SPEC_VER2_0;
   2cb30:	2304      	movs	r3, #4
   2cb32:	e7f3      	b.n	2cb1c <sdmmc_decode_scr+0x7e>
		tmp_version = SD_SPEC_VER1_1;
   2cb34:	2302      	movs	r3, #2
   2cb36:	e7f1      	b.n	2cb1c <sdmmc_decode_scr+0x7e>
			tmp_version = SD_SPEC_VER3_0;
   2cb38:	2308      	movs	r3, #8
   2cb3a:	e7ef      	b.n	2cb1c <sdmmc_decode_scr+0x7e>

0002cb3c <sdmmc_decode_cid>:
	cid->manufacturer = (uint8_t)((raw_cid[3U] & 0xFF000000U) >> 24U);
   2cb3c:	7bcb      	ldrb	r3, [r1, #15]
   2cb3e:	7003      	strb	r3, [r0, #0]
	cid->application = (uint16_t)((raw_cid[3U] & 0xFFFF00U) >> 8U);
   2cb40:	68cb      	ldr	r3, [r1, #12]
   2cb42:	f3c3 230f 	ubfx	r3, r3, #8, #16
   2cb46:	8043      	strh	r3, [r0, #2]
	cid->name[0U] = (uint8_t)((raw_cid[3U] & 0xFFU));
   2cb48:	7b0b      	ldrb	r3, [r1, #12]
   2cb4a:	7103      	strb	r3, [r0, #4]
	cid->name[1U] = (uint8_t)((raw_cid[2U] & 0xFF000000U) >> 24U);
   2cb4c:	7acb      	ldrb	r3, [r1, #11]
   2cb4e:	7143      	strb	r3, [r0, #5]
	cid->name[2U] = (uint8_t)((raw_cid[2U] & 0xFF0000U) >> 16U);
   2cb50:	7a8b      	ldrb	r3, [r1, #10]
   2cb52:	7183      	strb	r3, [r0, #6]
	cid->name[3U] = (uint8_t)((raw_cid[2U] & 0xFF00U) >> 8U);
   2cb54:	7a4b      	ldrb	r3, [r1, #9]
   2cb56:	71c3      	strb	r3, [r0, #7]
	cid->name[4U] = (uint8_t)((raw_cid[2U] & 0xFFU));
   2cb58:	7a0b      	ldrb	r3, [r1, #8]
   2cb5a:	7203      	strb	r3, [r0, #8]
	cid->version = (uint8_t)((raw_cid[1U] & 0xFF000000U) >> 24U);
   2cb5c:	79cb      	ldrb	r3, [r1, #7]
   2cb5e:	7243      	strb	r3, [r0, #9]
	cid->ser_num = (uint32_t)((raw_cid[1U] & 0xFFFFFFU) << 8U);
   2cb60:	684b      	ldr	r3, [r1, #4]
   2cb62:	021b      	lsls	r3, r3, #8
   2cb64:	60c3      	str	r3, [r0, #12]
	cid->ser_num |= (uint32_t)((raw_cid[0U] & 0xFF000000U) >> 24U);
   2cb66:	78ca      	ldrb	r2, [r1, #3]
   2cb68:	4313      	orrs	r3, r2
   2cb6a:	60c3      	str	r3, [r0, #12]
	cid->date = (uint16_t)((raw_cid[0U] & 0xFFF00U) >> 8U);
   2cb6c:	680b      	ldr	r3, [r1, #0]
   2cb6e:	f3c3 230b 	ubfx	r3, r3, #8, #12
   2cb72:	8203      	strh	r3, [r0, #16]
}
   2cb74:	4770      	bx	lr

0002cb76 <sdmmc_spi_send_ocr>:
{
   2cb76:	b510      	push	{r4, lr}
   2cb78:	b08a      	sub	sp, #40	; 0x28
   2cb7a:	4604      	mov	r4, r0
	cmd.opcode = SD_SPI_READ_OCR;
   2cb7c:	233a      	movs	r3, #58	; 0x3a
   2cb7e:	9301      	str	r3, [sp, #4]
	cmd.arg = arg;
   2cb80:	9102      	str	r1, [sp, #8]
	cmd.response_type = SD_SPI_RSP_TYPE_R3;
   2cb82:	2340      	movs	r3, #64	; 0x40
   2cb84:	9307      	str	r3, [sp, #28]
	ret = sdhc_request(card->sdhc, &cmd, NULL);
   2cb86:	2200      	movs	r2, #0
   2cb88:	a901      	add	r1, sp, #4
   2cb8a:	6800      	ldr	r0, [r0, #0]
   2cb8c:	f7ff fe81 	bl	2c892 <sdhc_request>
	card->ocr = cmd.response[1];
   2cb90:	9b04      	ldr	r3, [sp, #16]
   2cb92:	64e3      	str	r3, [r4, #76]	; 0x4c
}
   2cb94:	b00a      	add	sp, #40	; 0x28
   2cb96:	bd10      	pop	{r4, pc}

0002cb98 <sdmmc_spi_read_cxd>:
{
   2cb98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2cb9c:	b090      	sub	sp, #64	; 0x40
   2cb9e:	4607      	mov	r7, r0
   2cba0:	4688      	mov	r8, r1
   2cba2:	4614      	mov	r4, r2
	struct sdhc_command cmd = {0};
   2cba4:	2224      	movs	r2, #36	; 0x24
   2cba6:	2100      	movs	r1, #0
   2cba8:	a807      	add	r0, sp, #28
   2cbaa:	f7fd f831 	bl	29c10 <memset>
	struct sdhc_data data = {0};
   2cbae:	2600      	movs	r6, #0
   2cbb0:	9601      	str	r6, [sp, #4]
   2cbb2:	9602      	str	r6, [sp, #8]
   2cbb4:	9603      	str	r6, [sp, #12]
   2cbb6:	9604      	str	r6, [sp, #16]
   2cbb8:	9605      	str	r6, [sp, #20]
   2cbba:	9606      	str	r6, [sp, #24]
	uint32_t *cxd_be = (uint32_t *)card->card_buffer;
   2cbbc:	f107 0578 	add.w	r5, r7, #120	; 0x78
	cmd.opcode = opcode;
   2cbc0:	f8cd 801c 	str.w	r8, [sp, #28]
	cmd.response_type = SD_SPI_RSP_TYPE_R1;
   2cbc4:	2210      	movs	r2, #16
   2cbc6:	920d      	str	r2, [sp, #52]	; 0x34
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
   2cbc8:	23c8      	movs	r3, #200	; 0xc8
   2cbca:	930f      	str	r3, [sp, #60]	; 0x3c
	data.block_size = 16;
   2cbcc:	9202      	str	r2, [sp, #8]
	data.blocks = 1U;
   2cbce:	2201      	movs	r2, #1
   2cbd0:	9203      	str	r2, [sp, #12]
	data.data = cxd_be;
   2cbd2:	9505      	str	r5, [sp, #20]
	data.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
   2cbd4:	9306      	str	r3, [sp, #24]
	ret = sdhc_request(card->sdhc, &cmd, &data);
   2cbd6:	aa01      	add	r2, sp, #4
   2cbd8:	a907      	add	r1, sp, #28
   2cbda:	6838      	ldr	r0, [r7, #0]
   2cbdc:	f7ff fe59 	bl	2c892 <sdhc_request>
   2cbe0:	4631      	mov	r1, r6
   2cbe2:	e011      	b.n	2cc08 <sdmmc_spi_read_cxd+0x70>
		cxd[3-i] = sys_be32_to_cpu(cxd_be[i]);
   2cbe4:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
   2cbe8:	0a13      	lsrs	r3, r2, #8
   2cbea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   2cbee:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   2cbf2:	0210      	lsls	r0, r2, #8
   2cbf4:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
   2cbf8:	4303      	orrs	r3, r0
   2cbfa:	f1c1 0003 	rsb	r0, r1, #3
   2cbfe:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   2cc02:	f844 3020 	str.w	r3, [r4, r0, lsl #2]
	for (i = 0; i < 4; i++) {
   2cc06:	3101      	adds	r1, #1
   2cc08:	2903      	cmp	r1, #3
   2cc0a:	ddeb      	ble.n	2cbe4 <sdmmc_spi_read_cxd+0x4c>
}
   2cc0c:	2000      	movs	r0, #0
   2cc0e:	b010      	add	sp, #64	; 0x40
   2cc10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002cc14 <sdmmc_read_cid>:
{
   2cc14:	b510      	push	{r4, lr}
   2cc16:	b08a      	sub	sp, #40	; 0x28
	if (card->host_props.is_spi && IS_ENABLED(CONFIG_SDHC_SUPPORTS_SPI_MODE)) {
   2cc18:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
   2cc1c:	b16b      	cbz	r3, 2cc3a <sdmmc_read_cid+0x26>
		ret = sdmmc_spi_read_cxd(card, SD_SEND_CID, cid);
   2cc1e:	aa06      	add	r2, sp, #24
   2cc20:	210a      	movs	r1, #10
   2cc22:	f7ff ffb9 	bl	2cb98 <sdmmc_spi_read_cxd>
	if (ret) {
   2cc26:	4604      	mov	r4, r0
   2cc28:	b110      	cbz	r0, 2cc30 <sdmmc_read_cid+0x1c>
}
   2cc2a:	4620      	mov	r0, r4
   2cc2c:	b00a      	add	sp, #40	; 0x28
   2cc2e:	bd10      	pop	{r4, pc}
	sdmmc_decode_cid(&card_cid, cid);
   2cc30:	a906      	add	r1, sp, #24
   2cc32:	a801      	add	r0, sp, #4
   2cc34:	f7ff ff82 	bl	2cb3c <sdmmc_decode_cid>
	return 0;
   2cc38:	e7f7      	b.n	2cc2a <sdmmc_read_cid+0x16>
		return -ENOTSUP;
   2cc3a:	f06f 0485 	mvn.w	r4, #133	; 0x85
   2cc3e:	e7f4      	b.n	2cc2a <sdmmc_read_cid+0x16>

0002cc40 <sdmmc_read_csd>:
{
   2cc40:	b530      	push	{r4, r5, lr}
   2cc42:	b08d      	sub	sp, #52	; 0x34
	if (card->host_props.is_spi && IS_ENABLED(CONFIG_SDHC_SUPPORTS_SPI_MODE)) {
   2cc44:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
   2cc48:	b193      	cbz	r3, 2cc70 <sdmmc_read_csd+0x30>
   2cc4a:	4604      	mov	r4, r0
		ret = sdmmc_spi_read_cxd(card, SD_SEND_CSD, csd);
   2cc4c:	aa08      	add	r2, sp, #32
   2cc4e:	2109      	movs	r1, #9
   2cc50:	f7ff ffa2 	bl	2cb98 <sdmmc_spi_read_cxd>
	if (ret) {
   2cc54:	4605      	mov	r5, r0
   2cc56:	b110      	cbz	r0, 2cc5e <sdmmc_read_csd+0x1e>
}
   2cc58:	4628      	mov	r0, r5
   2cc5a:	b00d      	add	sp, #52	; 0x34
   2cc5c:	bd30      	pop	{r4, r5, pc}
	sdmmc_decode_csd(&card_csd, csd,
   2cc5e:	f104 0368 	add.w	r3, r4, #104	; 0x68
   2cc62:	f104 0264 	add.w	r2, r4, #100	; 0x64
   2cc66:	a908      	add	r1, sp, #32
   2cc68:	a801      	add	r0, sp, #4
   2cc6a:	f7ff fe41 	bl	2c8f0 <sdmmc_decode_csd>
	return 0;
   2cc6e:	e7f3      	b.n	2cc58 <sdmmc_read_csd+0x18>
		return -ENOTSUP;
   2cc70:	f06f 0585 	mvn.w	r5, #133	; 0x85
   2cc74:	e7f0      	b.n	2cc58 <sdmmc_read_csd+0x18>

0002cc76 <sdmmc_set_blocklen>:
{
   2cc76:	b530      	push	{r4, r5, lr}
   2cc78:	b08b      	sub	sp, #44	; 0x2c
   2cc7a:	4604      	mov	r4, r0
   2cc7c:	460d      	mov	r5, r1
	struct sdhc_command cmd = {0};
   2cc7e:	2224      	movs	r2, #36	; 0x24
   2cc80:	2100      	movs	r1, #0
   2cc82:	a801      	add	r0, sp, #4
   2cc84:	f7fc ffc4 	bl	29c10 <memset>
	cmd.opcode = SD_SET_BLOCK_SIZE;
   2cc88:	2310      	movs	r3, #16
   2cc8a:	9301      	str	r3, [sp, #4]
	cmd.arg = block_len;
   2cc8c:	9502      	str	r5, [sp, #8]
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
   2cc8e:	23c8      	movs	r3, #200	; 0xc8
   2cc90:	9309      	str	r3, [sp, #36]	; 0x24
	cmd.response_type =  (SD_RSP_TYPE_R1 | SD_SPI_RSP_TYPE_R1);
   2cc92:	2311      	movs	r3, #17
   2cc94:	9307      	str	r3, [sp, #28]
	return sdhc_request(card->sdhc, &cmd, NULL);
   2cc96:	2200      	movs	r2, #0
   2cc98:	a901      	add	r1, sp, #4
   2cc9a:	6820      	ldr	r0, [r4, #0]
   2cc9c:	f7ff fdf9 	bl	2c892 <sdhc_request>
}
   2cca0:	b00b      	add	sp, #44	; 0x2c
   2cca2:	bd30      	pop	{r4, r5, pc}

0002cca4 <sdmmc_switch>:
{
   2cca4:	b5f0      	push	{r4, r5, r6, r7, lr}
   2cca6:	b091      	sub	sp, #68	; 0x44
   2cca8:	4606      	mov	r6, r0
   2ccaa:	460c      	mov	r4, r1
   2ccac:	4617      	mov	r7, r2
   2ccae:	461d      	mov	r5, r3
	struct sdhc_command cmd = {0};
   2ccb0:	2224      	movs	r2, #36	; 0x24
   2ccb2:	2100      	movs	r1, #0
   2ccb4:	a807      	add	r0, sp, #28
   2ccb6:	f7fc ffab 	bl	29c10 <memset>
	struct sdhc_data data = {0};
   2ccba:	2300      	movs	r3, #0
   2ccbc:	9301      	str	r3, [sp, #4]
   2ccbe:	9302      	str	r3, [sp, #8]
   2ccc0:	9303      	str	r3, [sp, #12]
   2ccc2:	9304      	str	r3, [sp, #16]
   2ccc4:	9305      	str	r3, [sp, #20]
   2ccc6:	9306      	str	r3, [sp, #24]
	cmd.opcode = SD_SWITCH;
   2ccc8:	2306      	movs	r3, #6
   2ccca:	9307      	str	r3, [sp, #28]
	cmd.arg = ((mode & 0x1) << 31) | 0x00FFFFFF;
   2cccc:	07e1      	lsls	r1, r4, #31
   2ccce:	f061 417f 	orn	r1, r1, #4278190080	; 0xff000000
   2ccd2:	9108      	str	r1, [sp, #32]
	cmd.arg &= ~(0xFU << (group * 4));
   2ccd4:	00ba      	lsls	r2, r7, #2
   2ccd6:	230f      	movs	r3, #15
   2ccd8:	4093      	lsls	r3, r2
   2ccda:	ea21 0103 	bic.w	r1, r1, r3
   2ccde:	9108      	str	r1, [sp, #32]
	cmd.arg |= (value & 0xF) << (group * 4);
   2cce0:	f005 050f 	and.w	r5, r5, #15
   2cce4:	4095      	lsls	r5, r2
   2cce6:	4329      	orrs	r1, r5
   2cce8:	9108      	str	r1, [sp, #32]
	cmd.response_type = (SD_RSP_TYPE_R1 | SD_SPI_RSP_TYPE_R1);
   2ccea:	2311      	movs	r3, #17
   2ccec:	930d      	str	r3, [sp, #52]	; 0x34
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
   2ccee:	23c8      	movs	r3, #200	; 0xc8
   2ccf0:	930f      	str	r3, [sp, #60]	; 0x3c
	data.block_size = 64U;
   2ccf2:	2340      	movs	r3, #64	; 0x40
   2ccf4:	9302      	str	r3, [sp, #8]
	data.blocks = 1;
   2ccf6:	2301      	movs	r3, #1
   2ccf8:	9303      	str	r3, [sp, #12]
	data.data = response;
   2ccfa:	9b16      	ldr	r3, [sp, #88]	; 0x58
   2ccfc:	9305      	str	r3, [sp, #20]
	data.timeout_ms = CONFIG_SD_DATA_TIMEOUT;
   2ccfe:	f242 7310 	movw	r3, #10000	; 0x2710
   2cd02:	9306      	str	r3, [sp, #24]
	return sdhc_request(card->sdhc, &cmd, &data);
   2cd04:	aa01      	add	r2, sp, #4
   2cd06:	a907      	add	r1, sp, #28
   2cd08:	6830      	ldr	r0, [r6, #0]
   2cd0a:	f7ff fdc2 	bl	2c892 <sdhc_request>
}
   2cd0e:	b011      	add	sp, #68	; 0x44
   2cd10:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002cd12 <sdmmc_read_status>:
{
   2cd12:	b510      	push	{r4, lr}
   2cd14:	b08a      	sub	sp, #40	; 0x28
   2cd16:	4604      	mov	r4, r0
	struct sdhc_command cmd = {0};
   2cd18:	2224      	movs	r2, #36	; 0x24
   2cd1a:	2100      	movs	r1, #0
   2cd1c:	a801      	add	r0, sp, #4
   2cd1e:	f7fc ff77 	bl	29c10 <memset>
	cmd.opcode = SD_SEND_STATUS;
   2cd22:	230d      	movs	r3, #13
   2cd24:	9301      	str	r3, [sp, #4]
	if (!card->host_props.is_spi) {
   2cd26:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   2cd2a:	b913      	cbnz	r3, 2cd32 <sdmmc_read_status+0x20>
		cmd.arg = (card->relative_addr << 16U);
   2cd2c:	6e23      	ldr	r3, [r4, #96]	; 0x60
   2cd2e:	041b      	lsls	r3, r3, #16
   2cd30:	9302      	str	r3, [sp, #8]
	cmd.response_type = (SD_RSP_TYPE_R1 | SD_SPI_RSP_TYPE_R2);
   2cd32:	2331      	movs	r3, #49	; 0x31
   2cd34:	9307      	str	r3, [sp, #28]
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
   2cd36:	23c8      	movs	r3, #200	; 0xc8
   2cd38:	9309      	str	r3, [sp, #36]	; 0x24
	ret = sdhc_request(card->sdhc, &cmd, NULL);
   2cd3a:	2200      	movs	r2, #0
   2cd3c:	a901      	add	r1, sp, #4
   2cd3e:	6820      	ldr	r0, [r4, #0]
   2cd40:	f7ff fda7 	bl	2c892 <sdhc_request>
	if (ret) {
   2cd44:	b9d0      	cbnz	r0, 2cd7c <sdmmc_read_status+0x6a>
	if (card->host_props.is_spi) {
   2cd46:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   2cd4a:	b163      	cbz	r3, 2cd66 <sdmmc_read_status+0x54>
		if ((cmd.response[0U] & SDHC_SPI_R2_CARD_LOCKED) ||
   2cd4c:	9b03      	ldr	r3, [sp, #12]
   2cd4e:	f413 7f40 	tst.w	r3, #768	; 0x300
   2cd52:	d116      	bne.n	2cd82 <sdmmc_read_status+0x70>
		} else if ((cmd.response[0U] & SDHC_SPI_R2_WP_VIOLATION) ||
   2cd54:	f413 4f60 	tst.w	r3, #57344	; 0xe000
   2cd58:	d116      	bne.n	2cd88 <sdmmc_read_status+0x76>
		} else if ((cmd.response[0U] & SDHC_SPI_R2_ERR) ||
   2cd5a:	f413 5fe0 	tst.w	r3, #7168	; 0x1c00
   2cd5e:	d00e      	beq.n	2cd7e <sdmmc_read_status+0x6c>
			return -EIO;
   2cd60:	f06f 0004 	mvn.w	r0, #4
   2cd64:	e00b      	b.n	2cd7e <sdmmc_read_status+0x6c>
	if ((cmd.response[0U] & SD_R1_RDY_DATA) &&
   2cd66:	9b03      	ldr	r3, [sp, #12]
   2cd68:	f413 7f80 	tst.w	r3, #256	; 0x100
   2cd6c:	d00f      	beq.n	2cd8e <sdmmc_read_status+0x7c>
		(SD_R1_CURRENT_STATE(cmd.response[0U]) == SDMMC_R1_TRANSFER)) {
   2cd6e:	f3c3 2343 	ubfx	r3, r3, #9, #4
	if ((cmd.response[0U] & SD_R1_RDY_DATA) &&
   2cd72:	2b04      	cmp	r3, #4
   2cd74:	d003      	beq.n	2cd7e <sdmmc_read_status+0x6c>
	return -EBUSY;
   2cd76:	f06f 000f 	mvn.w	r0, #15
   2cd7a:	e000      	b.n	2cd7e <sdmmc_read_status+0x6c>
		return SD_RETRY;
   2cd7c:	2001      	movs	r0, #1
}
   2cd7e:	b00a      	add	sp, #40	; 0x28
   2cd80:	bd10      	pop	{r4, pc}
			return -EACCES;
   2cd82:	f06f 000c 	mvn.w	r0, #12
   2cd86:	e7fa      	b.n	2cd7e <sdmmc_read_status+0x6c>
			return -EINVAL;
   2cd88:	f06f 0015 	mvn.w	r0, #21
   2cd8c:	e7f7      	b.n	2cd7e <sdmmc_read_status+0x6c>
	return -EBUSY;
   2cd8e:	f06f 000f 	mvn.w	r0, #15
   2cd92:	e7f4      	b.n	2cd7e <sdmmc_read_status+0x6c>

0002cd94 <sdmmc_read_scr>:
{
   2cd94:	b570      	push	{r4, r5, r6, lr}
   2cd96:	b094      	sub	sp, #80	; 0x50
   2cd98:	4604      	mov	r4, r0
	struct sdhc_command cmd = {0};
   2cd9a:	2224      	movs	r2, #36	; 0x24
   2cd9c:	2100      	movs	r1, #0
   2cd9e:	a80b      	add	r0, sp, #44	; 0x2c
   2cda0:	f7fc ff36 	bl	29c10 <memset>
	struct sdhc_data data = {0};
   2cda4:	2300      	movs	r3, #0
   2cda6:	9305      	str	r3, [sp, #20]
   2cda8:	9306      	str	r3, [sp, #24]
   2cdaa:	9307      	str	r3, [sp, #28]
   2cdac:	9308      	str	r3, [sp, #32]
   2cdae:	9309      	str	r3, [sp, #36]	; 0x24
   2cdb0:	930a      	str	r3, [sp, #40]	; 0x28
	ret = sdmmc_app_command(card, card->relative_addr);
   2cdb2:	6e21      	ldr	r1, [r4, #96]	; 0x60
   2cdb4:	4620      	mov	r0, r4
   2cdb6:	f7f2 f92b 	bl	1f010 <sdmmc_app_command>
	if (ret) {
   2cdba:	4605      	mov	r5, r0
   2cdbc:	b110      	cbz	r0, 2cdc4 <sdmmc_read_scr+0x30>
}
   2cdbe:	4628      	mov	r0, r5
   2cdc0:	b014      	add	sp, #80	; 0x50
   2cdc2:	bd70      	pop	{r4, r5, r6, pc}
   2cdc4:	f104 0678 	add.w	r6, r4, #120	; 0x78
	cmd.opcode = SD_APP_SEND_SCR;
   2cdc8:	2333      	movs	r3, #51	; 0x33
   2cdca:	930b      	str	r3, [sp, #44]	; 0x2c
	cmd.arg = 0;
   2cdcc:	2300      	movs	r3, #0
   2cdce:	930c      	str	r3, [sp, #48]	; 0x30
	cmd.response_type =  (SD_RSP_TYPE_R1 | SD_SPI_RSP_TYPE_R1);
   2cdd0:	2311      	movs	r3, #17
   2cdd2:	9311      	str	r3, [sp, #68]	; 0x44
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
   2cdd4:	23c8      	movs	r3, #200	; 0xc8
   2cdd6:	9313      	str	r3, [sp, #76]	; 0x4c
	data.block_size = 8U;
   2cdd8:	2308      	movs	r3, #8
   2cdda:	9306      	str	r3, [sp, #24]
	data.blocks = 1U;
   2cddc:	2301      	movs	r3, #1
   2cdde:	9307      	str	r3, [sp, #28]
	data.data = scr;
   2cde0:	9609      	str	r6, [sp, #36]	; 0x24
	data.timeout_ms = CONFIG_SD_DATA_TIMEOUT;
   2cde2:	f242 7310 	movw	r3, #10000	; 0x2710
   2cde6:	930a      	str	r3, [sp, #40]	; 0x28
	ret = sdhc_request(card->sdhc, &cmd, &data);
   2cde8:	aa05      	add	r2, sp, #20
   2cdea:	a90b      	add	r1, sp, #44	; 0x2c
   2cdec:	6820      	ldr	r0, [r4, #0]
   2cdee:	f7ff fd50 	bl	2c892 <sdhc_request>
	if (ret) {
   2cdf2:	4605      	mov	r5, r0
   2cdf4:	2800      	cmp	r0, #0
   2cdf6:	d1e2      	bne.n	2cdbe <sdmmc_read_scr+0x2a>
	raw_scr[0] = sys_be32_to_cpu(scr[0]);
   2cdf8:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   2cdfa:	0a13      	lsrs	r3, r2, #8
   2cdfc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   2ce00:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   2ce04:	0211      	lsls	r1, r2, #8
   2ce06:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   2ce0a:	430b      	orrs	r3, r1
   2ce0c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   2ce10:	9300      	str	r3, [sp, #0]
	raw_scr[1] = sys_be32_to_cpu(scr[1]);
   2ce12:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
   2ce14:	0a13      	lsrs	r3, r2, #8
   2ce16:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   2ce1a:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   2ce1e:	0211      	lsls	r1, r2, #8
   2ce20:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   2ce24:	430b      	orrs	r3, r1
   2ce26:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   2ce2a:	9301      	str	r3, [sp, #4]
	sdmmc_decode_scr(&card_scr, raw_scr, &card->sd_version);
   2ce2c:	f104 026c 	add.w	r2, r4, #108	; 0x6c
   2ce30:	4669      	mov	r1, sp
   2ce32:	a802      	add	r0, sp, #8
   2ce34:	f7ff fe33 	bl	2ca9e <sdmmc_decode_scr>
	if (card_scr.sd_width & 0x4U) {
   2ce38:	f89d 300d 	ldrb.w	r3, [sp, #13]
   2ce3c:	f013 0f04 	tst.w	r3, #4
   2ce40:	d003      	beq.n	2ce4a <sdmmc_read_scr+0xb6>
		card->flags |= SD_4BITS_WIDTH;
   2ce42:	6f63      	ldr	r3, [r4, #116]	; 0x74
   2ce44:	f043 0304 	orr.w	r3, r3, #4
   2ce48:	6763      	str	r3, [r4, #116]	; 0x74
	if (card_scr.cmd_support & 0x1U) {
   2ce4a:	f89d 300f 	ldrb.w	r3, [sp, #15]
   2ce4e:	f013 0f01 	tst.w	r3, #1
   2ce52:	d003      	beq.n	2ce5c <sdmmc_read_scr+0xc8>
		card->flags |= SD_SPEED_CLASS_CONTROL_FLAG;
   2ce54:	6f62      	ldr	r2, [r4, #116]	; 0x74
   2ce56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   2ce5a:	6762      	str	r2, [r4, #116]	; 0x74
	if (card_scr.cmd_support & 0x2U) {
   2ce5c:	f013 0f02 	tst.w	r3, #2
   2ce60:	d0ad      	beq.n	2cdbe <sdmmc_read_scr+0x2a>
		card->flags |= SD_CMD23_FLAG;
   2ce62:	6f63      	ldr	r3, [r4, #116]	; 0x74
   2ce64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2ce68:	6763      	str	r3, [r4, #116]	; 0x74
   2ce6a:	e7a8      	b.n	2cdbe <sdmmc_read_scr+0x2a>

0002ce6c <k_msleep>:
{
   2ce6c:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   2ce6e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   2ce72:	17c1      	asrs	r1, r0, #31
   2ce74:	03c9      	lsls	r1, r1, #15
   2ce76:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   2ce7a:	03c0      	lsls	r0, r0, #15
   2ce7c:	f240 33e7 	movw	r3, #999	; 0x3e7
   2ce80:	18c0      	adds	r0, r0, r3
   2ce82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2ce86:	f04f 0300 	mov.w	r3, #0
   2ce8a:	f141 0100 	adc.w	r1, r1, #0
   2ce8e:	f7d3 f937 	bl	100 <__aeabi_uldivmod>
   2ce92:	f7fa f8eb 	bl	2706c <z_impl_k_sleep>
}
   2ce96:	bd08      	pop	{r3, pc}

0002ce98 <sdmmc_ioctl>:


/* IO Control handler for SD MMC */
int sdmmc_ioctl(struct sd_card *card, uint8_t cmd, void *buf)
{
   2ce98:	b508      	push	{r3, lr}
	switch (cmd) {
   2ce9a:	3901      	subs	r1, #1
   2ce9c:	2904      	cmp	r1, #4
   2ce9e:	d80f      	bhi.n	2cec0 <sdmmc_ioctl+0x28>
   2cea0:	e8df f001 	tbb	[pc, r1]
   2cea4:	070e0703 	.word	0x070e0703
   2cea8:	0b          	.byte	0x0b
   2cea9:	00          	.byte	0x00
	case DISK_IOCTL_GET_SECTOR_COUNT:
		(*(uint32_t *)buf) = card->block_count;
   2ceaa:	6e43      	ldr	r3, [r0, #100]	; 0x64
   2ceac:	6013      	str	r3, [r2, #0]
		 */
		return sdmmc_wait_ready(card);
	default:
		return -ENOTSUP;
	}
	return 0;
   2ceae:	2000      	movs	r0, #0
}
   2ceb0:	bd08      	pop	{r3, pc}
		(*(uint32_t *)buf) = card->block_size;
   2ceb2:	6e83      	ldr	r3, [r0, #104]	; 0x68
   2ceb4:	6013      	str	r3, [r2, #0]
	return 0;
   2ceb6:	2000      	movs	r0, #0
		break;
   2ceb8:	e7fa      	b.n	2ceb0 <sdmmc_ioctl+0x18>
		return sdmmc_wait_ready(card);
   2ceba:	f7f2 fb51 	bl	1f560 <sdmmc_wait_ready>
   2cebe:	e7f7      	b.n	2ceb0 <sdmmc_ioctl+0x18>
	switch (cmd) {
   2cec0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2cec4:	e7f4      	b.n	2ceb0 <sdmmc_ioctl+0x18>

0002cec6 <disk_sdmmc_access_ioctl>:
{
   2cec6:	b508      	push	{r3, lr}
	const struct device *dev = disk->dev;
   2cec8:	6903      	ldr	r3, [r0, #16]
	return sdmmc_ioctl(&data->card, cmd, buf);
   2ceca:	6918      	ldr	r0, [r3, #16]
   2cecc:	f7ff ffe4 	bl	2ce98 <sdmmc_ioctl>
}
   2ced0:	bd08      	pop	{r3, pc}

0002ced2 <disk_sdmmc_access_write>:
{
   2ced2:	b508      	push	{r3, lr}
	const struct device *dev = disk->dev;
   2ced4:	6900      	ldr	r0, [r0, #16]
	return sdmmc_write_blocks(&data->card, buf, sector, count);
   2ced6:	6900      	ldr	r0, [r0, #16]
   2ced8:	f7f2 ff1c 	bl	1fd14 <sdmmc_write_blocks>
}
   2cedc:	bd08      	pop	{r3, pc}

0002cede <disk_sdmmc_access_read>:
{
   2cede:	b508      	push	{r3, lr}
	const struct device *dev = disk->dev;
   2cee0:	6900      	ldr	r0, [r0, #16]
	return sdmmc_read_blocks(&data->card, buf, sector, count);
   2cee2:	6900      	ldr	r0, [r0, #16]
   2cee4:	f7f2 fe4a 	bl	1fb7c <sdmmc_read_blocks>
}
   2cee8:	bd08      	pop	{r3, pc}

0002ceea <disk_sdmmc_access_status>:
{
   2ceea:	b510      	push	{r4, lr}
	const struct device *dev = disk->dev;
   2ceec:	6903      	ldr	r3, [r0, #16]
	const struct sdmmc_config *cfg = dev->config;
   2ceee:	685a      	ldr	r2, [r3, #4]
	struct sdmmc_data *data = dev->data;
   2cef0:	691c      	ldr	r4, [r3, #16]
	if (!sd_is_card_present(cfg->host_controller)) {
   2cef2:	6810      	ldr	r0, [r2, #0]
   2cef4:	f7ff fcc2 	bl	2c87c <sd_is_card_present>
   2cef8:	b138      	cbz	r0, 2cf0a <disk_sdmmc_access_status+0x20>
	if (data->status == SD_OK) {
   2cefa:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
   2cefe:	2b02      	cmp	r3, #2
   2cf00:	d001      	beq.n	2cf06 <disk_sdmmc_access_status+0x1c>
		return DISK_STATUS_UNINIT;
   2cf02:	2001      	movs	r0, #1
}
   2cf04:	bd10      	pop	{r4, pc}
		return DISK_STATUS_OK;
   2cf06:	2000      	movs	r0, #0
   2cf08:	e7fc      	b.n	2cf04 <disk_sdmmc_access_status+0x1a>
		return DISK_STATUS_NOMEDIA;
   2cf0a:	2002      	movs	r0, #2
   2cf0c:	e7fa      	b.n	2cf04 <disk_sdmmc_access_status+0x1a>

0002cf0e <disk_sdmmc_access_init>:
{
   2cf0e:	b538      	push	{r3, r4, r5, lr}
	const struct device *dev = disk->dev;
   2cf10:	6903      	ldr	r3, [r0, #16]
	const struct sdmmc_config *cfg = dev->config;
   2cf12:	685d      	ldr	r5, [r3, #4]
	struct sdmmc_data *data = dev->data;
   2cf14:	691c      	ldr	r4, [r3, #16]
	if (data->status == SD_OK) {
   2cf16:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
   2cf1a:	2b02      	cmp	r3, #2
   2cf1c:	d010      	beq.n	2cf40 <disk_sdmmc_access_init+0x32>
	if (!sd_is_card_present(cfg->host_controller)) {
   2cf1e:	6828      	ldr	r0, [r5, #0]
   2cf20:	f7ff fcac 	bl	2c87c <sd_is_card_present>
   2cf24:	b170      	cbz	r0, 2cf44 <disk_sdmmc_access_init+0x36>
	ret = sd_init(cfg->host_controller, &data->card);
   2cf26:	4621      	mov	r1, r4
   2cf28:	6828      	ldr	r0, [r5, #0]
   2cf2a:	f7f1 ff4f 	bl	1edcc <sd_init>
	if (ret) {
   2cf2e:	b918      	cbnz	r0, 2cf38 <disk_sdmmc_access_init+0x2a>
	data->status = SD_OK;
   2cf30:	2302      	movs	r3, #2
   2cf32:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
	return 0;
   2cf36:	e004      	b.n	2cf42 <disk_sdmmc_access_init+0x34>
		data->status = SD_ERROR;
   2cf38:	2301      	movs	r3, #1
   2cf3a:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
		return ret;
   2cf3e:	e000      	b.n	2cf42 <disk_sdmmc_access_init+0x34>
		return 0;
   2cf40:	2000      	movs	r0, #0
}
   2cf42:	bd38      	pop	{r3, r4, r5, pc}
		return DISK_STATUS_NOMEDIA;
   2cf44:	2002      	movs	r0, #2
   2cf46:	e7fc      	b.n	2cf42 <disk_sdmmc_access_init+0x34>

0002cf48 <nrf_clock_is_running>:

NRF_STATIC_INLINE bool nrf_clock_is_running(NRF_CLOCK_Type const * p_reg,
                                            nrf_clock_domain_t     domain,
                                            void *                 p_clk_src)
{
    switch (domain)
   2cf48:	b119      	cbz	r1, 2cf52 <nrf_clock_is_running+0xa>
   2cf4a:	2901      	cmp	r1, #1
   2cf4c:	d00e      	beq.n	2cf6c <nrf_clock_is_running+0x24>
   2cf4e:	2000      	movs	r0, #0
   2cf50:	4770      	bx	lr
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
            if (p_clk_src != NULL)
   2cf52:	b122      	cbz	r2, 2cf5e <nrf_clock_is_running+0x16>
            {
                (*(nrf_clock_lfclk_t *)p_clk_src) =
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   2cf54:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   2cf58:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   2cf5c:	6013      	str	r3, [r2, #0]
            }
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   2cf5e:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
   2cf62:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   2cf66:	d10e      	bne.n	2cf86 <nrf_clock_is_running+0x3e>
#endif
        default:
            NRFX_ASSERT(0);
            return false;
    }
    return false;
   2cf68:	2000      	movs	r0, #0
   2cf6a:	4770      	bx	lr
            if (p_clk_src != NULL)
   2cf6c:	b122      	cbz	r2, 2cf78 <nrf_clock_is_running+0x30>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   2cf6e:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
   2cf72:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   2cf76:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   2cf78:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
   2cf7c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   2cf80:	d103      	bne.n	2cf8a <nrf_clock_is_running+0x42>
    return false;
   2cf82:	2000      	movs	r0, #0
   2cf84:	4770      	bx	lr
                return true;
   2cf86:	2001      	movs	r0, #1
   2cf88:	4770      	bx	lr
                return true;
   2cf8a:	2001      	movs	r0, #1
}
   2cf8c:	4770      	bx	lr

0002cf8e <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
   2cf8e:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   2cf90:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   2cf94:	0089      	lsls	r1, r1, #2
   2cf96:	3138      	adds	r1, #56	; 0x38
}
   2cf98:	4408      	add	r0, r1
   2cf9a:	4770      	bx	lr

0002cf9c <get_sub_config>:
	const struct nrf_clock_control_config *config =
   2cf9c:	6840      	ldr	r0, [r0, #4]
	return &config->subsys[type];
   2cf9e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
   2cfa2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   2cfa6:	4770      	bx	lr

0002cfa8 <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
   2cfa8:	6900      	ldr	r0, [r0, #16]
	return &data->mgr[type];
   2cfaa:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
}
   2cfae:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   2cfb2:	4770      	bx	lr

0002cfb4 <get_status>:
{
   2cfb4:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
   2cfb6:	b2c9      	uxtb	r1, r1
   2cfb8:	f7ff ffe9 	bl	2cf8e <get_sub_data>
   2cfbc:	6880      	ldr	r0, [r0, #8]
}
   2cfbe:	f000 0007 	and.w	r0, r0, #7
   2cfc2:	bd08      	pop	{r3, pc}

0002cfc4 <set_off_state>:
	__asm__ volatile(
   2cfc4:	f04f 0340 	mov.w	r3, #64	; 0x40
   2cfc8:	f3ef 8211 	mrs	r2, BASEPRI
   2cfcc:	f383 8812 	msr	BASEPRI_MAX, r3
   2cfd0:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2cfd4:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   2cfd6:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   2cfda:	d001      	beq.n	2cfe0 <set_off_state+0x1c>
   2cfdc:	428b      	cmp	r3, r1
   2cfde:	d107      	bne.n	2cff0 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   2cfe0:	2301      	movs	r3, #1
   2cfe2:	6003      	str	r3, [r0, #0]
	int err = 0;
   2cfe4:	2000      	movs	r0, #0
	__asm__ volatile(
   2cfe6:	f382 8811 	msr	BASEPRI, r2
   2cfea:	f3bf 8f6f 	isb	sy
}
   2cfee:	4770      	bx	lr
		err = -EPERM;
   2cff0:	f04f 30ff 	mov.w	r0, #4294967295
   2cff4:	e7f7      	b.n	2cfe6 <set_off_state+0x22>

0002cff6 <set_starting_state>:
	__asm__ volatile(
   2cff6:	f04f 0340 	mov.w	r3, #64	; 0x40
   2cffa:	f3ef 8211 	mrs	r2, BASEPRI
   2cffe:	f383 8812 	msr	BASEPRI_MAX, r3
   2d002:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2d006:	6803      	ldr	r3, [r0, #0]
   2d008:	f003 0cc0 	and.w	ip, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   2d00c:	f003 0307 	and.w	r3, r3, #7
   2d010:	2b01      	cmp	r3, #1
   2d012:	d008      	beq.n	2d026 <set_starting_state+0x30>
	} else if (current_ctx != ctx) {
   2d014:	458c      	cmp	ip, r1
   2d016:	d009      	beq.n	2d02c <set_starting_state+0x36>
		err = -EPERM;
   2d018:	f04f 30ff 	mov.w	r0, #4294967295
	__asm__ volatile(
   2d01c:	f382 8811 	msr	BASEPRI, r2
   2d020:	f3bf 8f6f 	isb	sy
}
   2d024:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   2d026:	6001      	str	r1, [r0, #0]
	int err = 0;
   2d028:	2000      	movs	r0, #0
   2d02a:	e7f7      	b.n	2d01c <set_starting_state+0x26>
		err = -EALREADY;
   2d02c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2d030:	e7f4      	b.n	2d01c <set_starting_state+0x26>

0002d032 <set_on_state>:
	__asm__ volatile(
   2d032:	f04f 0340 	mov.w	r3, #64	; 0x40
   2d036:	f3ef 8211 	mrs	r2, BASEPRI
   2d03a:	f383 8812 	msr	BASEPRI_MAX, r3
   2d03e:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   2d042:	6803      	ldr	r3, [r0, #0]
   2d044:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2d048:	f043 0302 	orr.w	r3, r3, #2
   2d04c:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   2d04e:	f382 8811 	msr	BASEPRI, r2
   2d052:	f3bf 8f6f 	isb	sy
}
   2d056:	4770      	bx	lr

0002d058 <clkstarted_handle>:
{
   2d058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d05a:	4606      	mov	r6, r0
   2d05c:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   2d05e:	f7ff ff96 	bl	2cf8e <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
   2d062:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
   2d064:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
   2d066:	2300      	movs	r3, #0
   2d068:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
   2d06c:	f7ff ffe1 	bl	2d032 <set_on_state>
	if (callback) {
   2d070:	b11d      	cbz	r5, 2d07a <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
   2d072:	463a      	mov	r2, r7
   2d074:	4621      	mov	r1, r4
   2d076:	4630      	mov	r0, r6
   2d078:	47a8      	blx	r5
}
   2d07a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002d07c <stop>:
{
   2d07c:	b570      	push	{r4, r5, r6, lr}
   2d07e:	4606      	mov	r6, r0
   2d080:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   2d082:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   2d084:	4621      	mov	r1, r4
   2d086:	f7ff ff82 	bl	2cf8e <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
   2d08a:	4629      	mov	r1, r5
   2d08c:	3008      	adds	r0, #8
   2d08e:	f7ff ff99 	bl	2cfc4 <set_off_state>
	if (err < 0) {
   2d092:	2800      	cmp	r0, #0
   2d094:	db06      	blt.n	2d0a4 <stop+0x28>
	get_sub_config(dev, type)->stop();
   2d096:	4621      	mov	r1, r4
   2d098:	4630      	mov	r0, r6
   2d09a:	f7ff ff7f 	bl	2cf9c <get_sub_config>
   2d09e:	6843      	ldr	r3, [r0, #4]
   2d0a0:	4798      	blx	r3
	return 0;
   2d0a2:	2000      	movs	r0, #0
}
   2d0a4:	bd70      	pop	{r4, r5, r6, pc}

0002d0a6 <api_stop>:
{
   2d0a6:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
   2d0a8:	2280      	movs	r2, #128	; 0x80
   2d0aa:	f7ff ffe7 	bl	2d07c <stop>
}
   2d0ae:	bd08      	pop	{r3, pc}

0002d0b0 <async_start>:
{
   2d0b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d0b4:	4606      	mov	r6, r0
   2d0b6:	4690      	mov	r8, r2
   2d0b8:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   2d0ba:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   2d0bc:	4629      	mov	r1, r5
   2d0be:	f7ff ff66 	bl	2cf8e <get_sub_data>
   2d0c2:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
   2d0c4:	9906      	ldr	r1, [sp, #24]
   2d0c6:	3008      	adds	r0, #8
   2d0c8:	f7ff ff95 	bl	2cff6 <set_starting_state>
	if (err < 0) {
   2d0cc:	2800      	cmp	r0, #0
   2d0ce:	db09      	blt.n	2d0e4 <async_start+0x34>
	subdata->cb = cb;
   2d0d0:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
   2d0d4:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
   2d0d6:	4629      	mov	r1, r5
   2d0d8:	4630      	mov	r0, r6
   2d0da:	f7ff ff5f 	bl	2cf9c <get_sub_config>
   2d0de:	6803      	ldr	r3, [r0, #0]
   2d0e0:	4798      	blx	r3
	return 0;
   2d0e2:	2000      	movs	r0, #0
}
   2d0e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002d0e8 <api_start>:
{
   2d0e8:	b510      	push	{r4, lr}
   2d0ea:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
   2d0ec:	2480      	movs	r4, #128	; 0x80
   2d0ee:	9400      	str	r4, [sp, #0]
   2d0f0:	f7ff ffde 	bl	2d0b0 <async_start>
}
   2d0f4:	b002      	add	sp, #8
   2d0f6:	bd10      	pop	{r4, pc}

0002d0f8 <onoff_started_callback>:
{
   2d0f8:	b510      	push	{r4, lr}
   2d0fa:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
   2d0fc:	b2c9      	uxtb	r1, r1
   2d0fe:	f7ff ff53 	bl	2cfa8 <get_onoff_manager>
	notify(mgr, 0);
   2d102:	2100      	movs	r1, #0
   2d104:	47a0      	blx	r4
}
   2d106:	bd10      	pop	{r4, pc}

0002d108 <hfclk_start>:
{
   2d108:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   2d10a:	2001      	movs	r0, #1
   2d10c:	f7f6 fbf4 	bl	238f8 <nrfx_clock_start>
}
   2d110:	bd08      	pop	{r3, pc}

0002d112 <lfclk_start>:
{
   2d112:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   2d114:	2000      	movs	r0, #0
   2d116:	f7f6 fbef 	bl	238f8 <nrfx_clock_start>
}
   2d11a:	bd08      	pop	{r3, pc}

0002d11c <hfclk_stop>:
{
   2d11c:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   2d11e:	2001      	movs	r0, #1
   2d120:	f001 fd08 	bl	2eb34 <nrfx_clock_stop>
}
   2d124:	bd08      	pop	{r3, pc}

0002d126 <lfclk_stop>:
{
   2d126:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   2d128:	2000      	movs	r0, #0
   2d12a:	f001 fd03 	bl	2eb34 <nrfx_clock_stop>
}
   2d12e:	bd08      	pop	{r3, pc}

0002d130 <k_msleep>:
{
   2d130:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   2d132:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   2d136:	17c1      	asrs	r1, r0, #31
   2d138:	03c9      	lsls	r1, r1, #15
   2d13a:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   2d13e:	03c0      	lsls	r0, r0, #15
   2d140:	f240 33e7 	movw	r3, #999	; 0x3e7
   2d144:	18c0      	adds	r0, r0, r3
   2d146:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2d14a:	f04f 0300 	mov.w	r3, #0
   2d14e:	f141 0100 	adc.w	r1, r1, #0
   2d152:	f7d2 ffd5 	bl	100 <__aeabi_uldivmod>
   2d156:	f7f9 ff89 	bl	2706c <z_impl_k_sleep>
}
   2d15a:	bd08      	pop	{r3, pc}

0002d15c <blocking_start_callback>:
{
   2d15c:	b508      	push	{r3, lr}
   2d15e:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   2d160:	f7f9 fa28 	bl	265b4 <z_impl_k_sem_give>
}
   2d164:	bd08      	pop	{r3, pc}

0002d166 <k_msleep>:
{
   2d166:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   2d168:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   2d16c:	17c1      	asrs	r1, r0, #31
   2d16e:	03c9      	lsls	r1, r1, #15
   2d170:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   2d174:	03c0      	lsls	r0, r0, #15
   2d176:	f240 33e7 	movw	r3, #999	; 0x3e7
   2d17a:	18c0      	adds	r0, r0, r3
   2d17c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2d180:	f04f 0300 	mov.w	r3, #0
   2d184:	f141 0100 	adc.w	r1, r1, #0
   2d188:	f7d2 ffba 	bl	100 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   2d18c:	f7f9 ff6e 	bl	2706c <z_impl_k_sleep>
}
   2d190:	bd08      	pop	{r3, pc}

0002d192 <wait>:
{
   2d192:	b508      	push	{r3, lr}
	if (!IS_ENABLED(CONFIG_MULTITHREADING) || k_is_in_isr()) {
   2d194:	f003 f873 	bl	3027e <k_is_in_isr>
   2d198:	b100      	cbz	r0, 2d19c <wait+0xa>
}
   2d19a:	bd08      	pop	{r3, pc}
		k_msleep(CONFIG_RTT_TX_RETRY_DELAY_MS);
   2d19c:	2002      	movs	r0, #2
   2d19e:	f7ff ffe2 	bl	2d166 <k_msleep>
}
   2d1a2:	e7fa      	b.n	2d19a <wait+0x8>

0002d1a4 <sys_slist_remove>:
Z_GENLIST_REMOVE(slist, snode)
   2d1a4:	460b      	mov	r3, r1
   2d1a6:	b139      	cbz	r1, 2d1b8 <sys_slist_remove+0x14>
	return node->next;
   2d1a8:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
   2d1aa:	6019      	str	r1, [r3, #0]
	return list->tail;
   2d1ac:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   2d1ae:	428a      	cmp	r2, r1
   2d1b0:	d009      	beq.n	2d1c6 <sys_slist_remove+0x22>
	parent->next = child;
   2d1b2:	2300      	movs	r3, #0
   2d1b4:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2d1b6:	4770      	bx	lr
	return node->next;
   2d1b8:	6813      	ldr	r3, [r2, #0]
	list->head = node;
   2d1ba:	6003      	str	r3, [r0, #0]
	return list->tail;
   2d1bc:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   2d1be:	428a      	cmp	r2, r1
   2d1c0:	d1f7      	bne.n	2d1b2 <sys_slist_remove+0xe>
	list->tail = node;
   2d1c2:	6043      	str	r3, [r0, #4]
}
   2d1c4:	e7f5      	b.n	2d1b2 <sys_slist_remove+0xe>
	list->tail = node;
   2d1c6:	6043      	str	r3, [r0, #4]
}
   2d1c8:	e7f3      	b.n	2d1b2 <sys_slist_remove+0xe>

0002d1ca <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2d1ca:	b508      	push	{r3, lr}
   2d1cc:	460a      	mov	r2, r1
	return list->head;
   2d1ce:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2d1d0:	2100      	movs	r1, #0
   2d1d2:	e001      	b.n	2d1d8 <sys_slist_find_and_remove+0xe>
   2d1d4:	4619      	mov	r1, r3
   2d1d6:	681b      	ldr	r3, [r3, #0]
   2d1d8:	b12b      	cbz	r3, 2d1e6 <sys_slist_find_and_remove+0x1c>
   2d1da:	4293      	cmp	r3, r2
   2d1dc:	d1fa      	bne.n	2d1d4 <sys_slist_find_and_remove+0xa>
   2d1de:	f7ff ffe1 	bl	2d1a4 <sys_slist_remove>
   2d1e2:	2001      	movs	r0, #1
   2d1e4:	e000      	b.n	2d1e8 <sys_slist_find_and_remove+0x1e>
   2d1e6:	2000      	movs	r0, #0
   2d1e8:	bd08      	pop	{r3, pc}

0002d1ea <gpio_manage_callback>:
 * @return 0 on success, negative errno otherwise.
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
   2d1ea:	b570      	push	{r4, r5, r6, lr}
   2d1ec:	4604      	mov	r4, r0
   2d1ee:	460d      	mov	r5, r1
   2d1f0:	4616      	mov	r6, r2
	return list->head;
   2d1f2:	6803      	ldr	r3, [r0, #0]
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
   2d1f4:	b133      	cbz	r3, 2d204 <gpio_manage_callback+0x1a>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
   2d1f6:	f7ff ffe8 	bl	2d1ca <sys_slist_find_and_remove>
   2d1fa:	b970      	cbnz	r0, 2d21a <gpio_manage_callback+0x30>
			if (!set) {
   2d1fc:	b91e      	cbnz	r6, 2d206 <gpio_manage_callback+0x1c>
				return -EINVAL;
   2d1fe:	f06f 0015 	mvn.w	r0, #21
   2d202:	e006      	b.n	2d212 <gpio_manage_callback+0x28>
			}
		}
	} else if (!set) {
   2d204:	b132      	cbz	r2, 2d214 <gpio_manage_callback+0x2a>
   2d206:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
   2d208:	602b      	str	r3, [r5, #0]
	list->head = node;
   2d20a:	6025      	str	r5, [r4, #0]
	return list->tail;
   2d20c:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   2d20e:	b143      	cbz	r3, 2d222 <gpio_manage_callback+0x38>

	if (set) {
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   2d210:	2000      	movs	r0, #0
}
   2d212:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   2d214:	f06f 0015 	mvn.w	r0, #21
   2d218:	e7fb      	b.n	2d212 <gpio_manage_callback+0x28>
	if (set) {
   2d21a:	2e00      	cmp	r6, #0
   2d21c:	d1f3      	bne.n	2d206 <gpio_manage_callback+0x1c>
	return 0;
   2d21e:	2000      	movs	r0, #0
   2d220:	e7f7      	b.n	2d212 <gpio_manage_callback+0x28>
	list->tail = node;
   2d222:	6065      	str	r5, [r4, #4]
   2d224:	2000      	movs	r0, #0
}
   2d226:	e7f4      	b.n	2d212 <gpio_manage_callback+0x28>

0002d228 <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					const struct device *port,
					uint32_t pins)
{
   2d228:	b570      	push	{r4, r5, r6, lr}
   2d22a:	460e      	mov	r6, r1
   2d22c:	4615      	mov	r5, r2
	return list->head;
   2d22e:	6801      	ldr	r1, [r0, #0]
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   2d230:	b121      	cbz	r1, 2d23c <gpio_fire_callbacks+0x14>
	return node->next;
   2d232:	680c      	ldr	r4, [r1, #0]
   2d234:	b13c      	cbz	r4, 2d246 <gpio_fire_callbacks+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2d236:	b931      	cbnz	r1, 2d246 <gpio_fire_callbacks+0x1e>
   2d238:	460c      	mov	r4, r1
   2d23a:	e004      	b.n	2d246 <gpio_fire_callbacks+0x1e>
   2d23c:	460c      	mov	r4, r1
   2d23e:	e002      	b.n	2d246 <gpio_fire_callbacks+0x1e>
   2d240:	4623      	mov	r3, r4
   2d242:	4621      	mov	r1, r4
   2d244:	461c      	mov	r4, r3
   2d246:	b171      	cbz	r1, 2d266 <gpio_fire_callbacks+0x3e>
		if (cb->pin_mask & pins) {
   2d248:	688a      	ldr	r2, [r1, #8]
   2d24a:	402a      	ands	r2, r5
   2d24c:	d002      	beq.n	2d254 <gpio_fire_callbacks+0x2c>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   2d24e:	684b      	ldr	r3, [r1, #4]
   2d250:	4630      	mov	r0, r6
   2d252:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   2d254:	2c00      	cmp	r4, #0
   2d256:	d0f3      	beq.n	2d240 <gpio_fire_callbacks+0x18>
	return node->next;
   2d258:	6823      	ldr	r3, [r4, #0]
   2d25a:	2b00      	cmp	r3, #0
   2d25c:	d0f1      	beq.n	2d242 <gpio_fire_callbacks+0x1a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2d25e:	2c00      	cmp	r4, #0
   2d260:	d1ef      	bne.n	2d242 <gpio_fire_callbacks+0x1a>
   2d262:	4623      	mov	r3, r4
   2d264:	e7ed      	b.n	2d242 <gpio_fire_callbacks+0x1a>
		}
	}
}
   2d266:	bd70      	pop	{r4, r5, r6, pc}

0002d268 <get_drive>:
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   2d268:	f020 00f9 	bic.w	r0, r0, #249	; 0xf9
   2d26c:	0580      	lsls	r0, r0, #22
   2d26e:	0d80      	lsrs	r0, r0, #22
   2d270:	f5b0 7f83 	cmp.w	r0, #262	; 0x106
   2d274:	d033      	beq.n	2d2de <get_drive+0x76>
   2d276:	d816      	bhi.n	2d2a6 <get_drive+0x3e>
   2d278:	2806      	cmp	r0, #6
   2d27a:	d02c      	beq.n	2d2d6 <get_drive+0x6e>
   2d27c:	d906      	bls.n	2d28c <get_drive+0x24>
   2d27e:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   2d282:	d10d      	bne.n	2d2a0 <get_drive+0x38>
		*drive = NRF_GPIO_PIN_H0S1;
   2d284:	2301      	movs	r3, #1
   2d286:	700b      	strb	r3, [r1, #0]
	return 0;
   2d288:	2000      	movs	r0, #0
		break;
   2d28a:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   2d28c:	b300      	cbz	r0, 2d2d0 <get_drive+0x68>
   2d28e:	2802      	cmp	r0, #2
   2d290:	d103      	bne.n	2d29a <get_drive+0x32>
		*drive = NRF_GPIO_PIN_D0S1;
   2d292:	2304      	movs	r3, #4
   2d294:	700b      	strb	r3, [r1, #0]
	return 0;
   2d296:	2000      	movs	r0, #0
		break;
   2d298:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   2d29a:	f06f 0015 	mvn.w	r0, #21
   2d29e:	4770      	bx	lr
   2d2a0:	f06f 0015 	mvn.w	r0, #21
   2d2a4:	4770      	bx	lr
   2d2a6:	f240 2302 	movw	r3, #514	; 0x202
   2d2aa:	4298      	cmp	r0, r3
   2d2ac:	d01b      	beq.n	2d2e6 <get_drive+0x7e>
   2d2ae:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
   2d2b2:	d103      	bne.n	2d2bc <get_drive+0x54>
		*drive = NRF_GPIO_PIN_H0H1;
   2d2b4:	2303      	movs	r3, #3
   2d2b6:	700b      	strb	r3, [r1, #0]
	return 0;
   2d2b8:	2000      	movs	r0, #0
		break;
   2d2ba:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   2d2bc:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   2d2c0:	d103      	bne.n	2d2ca <get_drive+0x62>
		*drive = NRF_GPIO_PIN_S0H1;
   2d2c2:	2302      	movs	r3, #2
   2d2c4:	700b      	strb	r3, [r1, #0]
	return 0;
   2d2c6:	2000      	movs	r0, #0
		break;
   2d2c8:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   2d2ca:	f06f 0015 	mvn.w	r0, #21
   2d2ce:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
   2d2d0:	2000      	movs	r0, #0
   2d2d2:	7008      	strb	r0, [r1, #0]
		break;
   2d2d4:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
   2d2d6:	2306      	movs	r3, #6
   2d2d8:	700b      	strb	r3, [r1, #0]
	return 0;
   2d2da:	2000      	movs	r0, #0
		break;
   2d2dc:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
   2d2de:	2307      	movs	r3, #7
   2d2e0:	700b      	strb	r3, [r1, #0]
	return 0;
   2d2e2:	2000      	movs	r0, #0
		break;
   2d2e4:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_D0H1;
   2d2e6:	2305      	movs	r3, #5
   2d2e8:	700b      	strb	r3, [r1, #0]
	return 0;
   2d2ea:	2000      	movs	r0, #0
}
   2d2ec:	4770      	bx	lr

0002d2ee <get_pull>:
	if (flags & GPIO_PULL_UP) {
   2d2ee:	f010 0f10 	tst.w	r0, #16
   2d2f2:	d104      	bne.n	2d2fe <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
   2d2f4:	f010 0f20 	tst.w	r0, #32
   2d2f8:	d103      	bne.n	2d302 <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
   2d2fa:	2000      	movs	r0, #0
   2d2fc:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
   2d2fe:	2003      	movs	r0, #3
   2d300:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
   2d302:	2001      	movs	r0, #1
}
   2d304:	4770      	bx	lr

0002d306 <gpio_nrfx_port_get_raw>:
	return port->config;
   2d306:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2d308:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   2d30a:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   2d30e:	600b      	str	r3, [r1, #0]
}
   2d310:	2000      	movs	r0, #0
   2d312:	4770      	bx	lr

0002d314 <gpio_nrfx_port_set_masked_raw>:
	return port->config;
   2d314:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2d316:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
   2d318:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
   2d31c:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   2d320:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   2d324:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   2d328:	2000      	movs	r0, #0
   2d32a:	4770      	bx	lr

0002d32c <gpio_nrfx_port_set_bits_raw>:
	return port->config;
   2d32c:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2d32e:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   2d330:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
   2d334:	2000      	movs	r0, #0
   2d336:	4770      	bx	lr

0002d338 <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
   2d338:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2d33a:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   2d33c:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   2d340:	2000      	movs	r0, #0
   2d342:	4770      	bx	lr

0002d344 <gpio_nrfx_port_toggle_bits>:
	return port->config;
   2d344:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2d346:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   2d348:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
   2d34c:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   2d350:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   2d352:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   2d356:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   2d35a:	2000      	movs	r0, #0
   2d35c:	4770      	bx	lr

0002d35e <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
   2d35e:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
   2d362:	d007      	beq.n	2d374 <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   2d364:	f1b1 6fc0 	cmp.w	r1, #100663296	; 0x6000000
   2d368:	d00d      	beq.n	2d386 <get_trigger+0x28>
   2d36a:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
   2d36e:	d008      	beq.n	2d382 <get_trigger+0x24>
   2d370:	2001      	movs	r0, #1
}
   2d372:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   2d374:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
   2d378:	d001      	beq.n	2d37e <get_trigger+0x20>
   2d37a:	2005      	movs	r0, #5
   2d37c:	4770      	bx	lr
   2d37e:	2004      	movs	r0, #4
   2d380:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   2d382:	2002      	movs	r0, #2
   2d384:	4770      	bx	lr
   2d386:	2003      	movs	r0, #3
   2d388:	4770      	bx	lr

0002d38a <gpio_nrfx_manage_callback>:
{
   2d38a:	b508      	push	{r3, lr}
	return port->data;
   2d38c:	6900      	ldr	r0, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   2d38e:	3004      	adds	r0, #4
   2d390:	f7ff ff2b 	bl	2d1ea <gpio_manage_callback>
}
   2d394:	bd08      	pop	{r3, pc}

0002d396 <nrfx_gpio_handler>:
{
   2d396:	b510      	push	{r4, lr}
    *p_pin = pin_number & 0x1F;
   2d398:	f000 041f 	and.w	r4, r0, #31
	const struct device *port = get_dev(port_id);
   2d39c:	0940      	lsrs	r0, r0, #5
   2d39e:	f7f2 ff27 	bl	201f0 <get_dev>
	if (port == NULL) {
   2d3a2:	b130      	cbz	r0, 2d3b2 <nrfx_gpio_handler+0x1c>
   2d3a4:	4601      	mov	r1, r0
	return port->data;
   2d3a6:	6900      	ldr	r0, [r0, #16]
	gpio_fire_callbacks(list, port, BIT(pin));
   2d3a8:	2201      	movs	r2, #1
   2d3aa:	40a2      	lsls	r2, r4
   2d3ac:	3004      	adds	r0, #4
   2d3ae:	f7ff ff3b 	bl	2d228 <gpio_fire_callbacks>
}
   2d3b2:	bd10      	pop	{r4, pc}

0002d3b4 <z_impl_gpio_pin_configure>:
{
   2d3b4:	b538      	push	{r3, r4, r5, lr}
   2d3b6:	4613      	mov	r3, r2
	const struct gpio_driver_api *api =
   2d3b8:	6885      	ldr	r5, [r0, #8]
	struct gpio_driver_data *data =
   2d3ba:	6904      	ldr	r4, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   2d3bc:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
   2d3c0:	d007      	beq.n	2d3d2 <z_impl_gpio_pin_configure+0x1e>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
   2d3c2:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
   2d3c6:	d004      	beq.n	2d3d2 <z_impl_gpio_pin_configure+0x1e>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   2d3c8:	f012 0f01 	tst.w	r2, #1
   2d3cc:	d001      	beq.n	2d3d2 <z_impl_gpio_pin_configure+0x1e>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   2d3ce:	f482 2340 	eor.w	r3, r2, #786432	; 0xc0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   2d3d2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   2d3d6:	f013 0f01 	tst.w	r3, #1
   2d3da:	d00a      	beq.n	2d3f2 <z_impl_gpio_pin_configure+0x3e>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   2d3dc:	6823      	ldr	r3, [r4, #0]
   2d3de:	f04f 0c01 	mov.w	ip, #1
   2d3e2:	fa0c fc01 	lsl.w	ip, ip, r1
   2d3e6:	ea43 030c 	orr.w	r3, r3, ip
   2d3ea:	6023      	str	r3, [r4, #0]
	return api->pin_configure(port, pin, flags);
   2d3ec:	682b      	ldr	r3, [r5, #0]
   2d3ee:	4798      	blx	r3
}
   2d3f0:	bd38      	pop	{r3, r4, r5, pc}
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   2d3f2:	6823      	ldr	r3, [r4, #0]
   2d3f4:	f04f 0c01 	mov.w	ip, #1
   2d3f8:	fa0c fc01 	lsl.w	ip, ip, r1
   2d3fc:	ea23 030c 	bic.w	r3, r3, ip
   2d400:	6023      	str	r3, [r4, #0]
   2d402:	e7f3      	b.n	2d3ec <z_impl_gpio_pin_configure+0x38>

0002d404 <gpio_pin_configure_dt>:
{
   2d404:	b508      	push	{r3, lr}
   2d406:	4603      	mov	r3, r0
   2d408:	468c      	mov	ip, r1
	return gpio_pin_configure(spec->port,
   2d40a:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
   2d40c:	7919      	ldrb	r1, [r3, #4]
				  spec->dt_flags | extra_flags);
   2d40e:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
   2d410:	ea42 020c 	orr.w	r2, r2, ip
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
   2d414:	f7ff ffce 	bl	2d3b4 <z_impl_gpio_pin_configure>
}
   2d418:	bd08      	pop	{r3, pc}

0002d41a <gpio_pin_set_raw>:
{
   2d41a:	b508      	push	{r3, lr}
	if (value != 0)	{
   2d41c:	b132      	cbz	r2, 2d42c <gpio_pin_set_raw+0x12>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
   2d41e:	2301      	movs	r3, #1
   2d420:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
   2d424:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
   2d426:	68db      	ldr	r3, [r3, #12]
   2d428:	4798      	blx	r3
}
   2d42a:	bd08      	pop	{r3, pc}
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
   2d42c:	2301      	movs	r3, #1
   2d42e:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
   2d432:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
   2d434:	691b      	ldr	r3, [r3, #16]
   2d436:	4798      	blx	r3
	return ret;
   2d438:	e7f7      	b.n	2d42a <gpio_pin_set_raw+0x10>

0002d43a <gpio_pin_set>:
{
   2d43a:	b510      	push	{r4, lr}
	const struct gpio_driver_data *const data =
   2d43c:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   2d43e:	681c      	ldr	r4, [r3, #0]
   2d440:	2301      	movs	r3, #1
   2d442:	408b      	lsls	r3, r1
   2d444:	421c      	tst	r4, r3
   2d446:	d002      	beq.n	2d44e <gpio_pin_set+0x14>
		value = (value != 0) ? 0 : 1;
   2d448:	fab2 f282 	clz	r2, r2
   2d44c:	0952      	lsrs	r2, r2, #5
	return gpio_pin_set_raw(port, pin, value);
   2d44e:	f7ff ffe4 	bl	2d41a <gpio_pin_set_raw>
}
   2d452:	bd10      	pop	{r4, pc}

0002d454 <spi_context_get_next_buf>:
{
   2d454:	b430      	push	{r4, r5}
	while (*count) {
   2d456:	e004      	b.n	2d462 <spi_context_get_next_buf+0xe>
		++(*current);
   2d458:	3408      	adds	r4, #8
   2d45a:	6004      	str	r4, [r0, #0]
		--(*count);
   2d45c:	680c      	ldr	r4, [r1, #0]
   2d45e:	3c01      	subs	r4, #1
   2d460:	600c      	str	r4, [r1, #0]
	while (*count) {
   2d462:	680c      	ldr	r4, [r1, #0]
   2d464:	b14c      	cbz	r4, 2d47a <spi_context_get_next_buf+0x26>
		if (((*current)->len / dfs) != 0) {
   2d466:	6804      	ldr	r4, [r0, #0]
   2d468:	6865      	ldr	r5, [r4, #4]
   2d46a:	429d      	cmp	r5, r3
   2d46c:	d3f4      	bcc.n	2d458 <spi_context_get_next_buf+0x4>
			*buf_len = (*current)->len / dfs;
   2d46e:	fbb5 f5f3 	udiv	r5, r5, r3
   2d472:	6015      	str	r5, [r2, #0]
			return (*current)->buf;
   2d474:	6803      	ldr	r3, [r0, #0]
   2d476:	6818      	ldr	r0, [r3, #0]
   2d478:	e001      	b.n	2d47e <spi_context_get_next_buf+0x2a>
	*buf_len = 0;
   2d47a:	2000      	movs	r0, #0
   2d47c:	6010      	str	r0, [r2, #0]
}
   2d47e:	bc30      	pop	{r4, r5}
   2d480:	4770      	bx	lr

0002d482 <spi_context_buffers_setup>:
{
   2d482:	b570      	push	{r4, r5, r6, lr}
   2d484:	4604      	mov	r4, r0
   2d486:	4615      	mov	r5, r2
   2d488:	461e      	mov	r6, r3
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   2d48a:	460a      	mov	r2, r1
   2d48c:	b309      	cbz	r1, 2d4d2 <spi_context_buffers_setup+0x50>
   2d48e:	680b      	ldr	r3, [r1, #0]
   2d490:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   2d492:	b303      	cbz	r3, 2d4d6 <spi_context_buffers_setup+0x54>
   2d494:	6853      	ldr	r3, [r2, #4]
   2d496:	64a3      	str	r3, [r4, #72]	; 0x48
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
   2d498:	4633      	mov	r3, r6
   2d49a:	f104 0258 	add.w	r2, r4, #88	; 0x58
   2d49e:	f104 0148 	add.w	r1, r4, #72	; 0x48
   2d4a2:	f104 0044 	add.w	r0, r4, #68	; 0x44
   2d4a6:	f7ff ffd5 	bl	2d454 <spi_context_get_next_buf>
	ctx->tx_buf = (const uint8_t *)
   2d4aa:	6560      	str	r0, [r4, #84]	; 0x54
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   2d4ac:	b1ad      	cbz	r5, 2d4da <spi_context_buffers_setup+0x58>
   2d4ae:	682b      	ldr	r3, [r5, #0]
   2d4b0:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   2d4b2:	b1a3      	cbz	r3, 2d4de <spi_context_buffers_setup+0x5c>
   2d4b4:	686b      	ldr	r3, [r5, #4]
   2d4b6:	6523      	str	r3, [r4, #80]	; 0x50
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
   2d4b8:	4633      	mov	r3, r6
   2d4ba:	f104 0260 	add.w	r2, r4, #96	; 0x60
   2d4be:	f104 0150 	add.w	r1, r4, #80	; 0x50
   2d4c2:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   2d4c6:	f7ff ffc5 	bl	2d454 <spi_context_get_next_buf>
	ctx->rx_buf = (uint8_t *)
   2d4ca:	65e0      	str	r0, [r4, #92]	; 0x5c
	ctx->sync_status = 0;
   2d4cc:	2300      	movs	r3, #0
   2d4ce:	6423      	str	r3, [r4, #64]	; 0x40
}
   2d4d0:	bd70      	pop	{r4, r5, r6, pc}
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   2d4d2:	460b      	mov	r3, r1
   2d4d4:	e7dc      	b.n	2d490 <spi_context_buffers_setup+0xe>
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   2d4d6:	2300      	movs	r3, #0
   2d4d8:	e7dd      	b.n	2d496 <spi_context_buffers_setup+0x14>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   2d4da:	462b      	mov	r3, r5
   2d4dc:	e7e8      	b.n	2d4b0 <spi_context_buffers_setup+0x2e>
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   2d4de:	2300      	movs	r3, #0
   2d4e0:	e7e9      	b.n	2d4b6 <spi_context_buffers_setup+0x34>

0002d4e2 <_spi_context_cs_control>:
{
   2d4e2:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   2d4e4:	6803      	ldr	r3, [r0, #0]
   2d4e6:	b1a3      	cbz	r3, 2d512 <_spi_context_cs_control+0x30>
   2d4e8:	4604      	mov	r4, r0
   2d4ea:	689d      	ldr	r5, [r3, #8]
   2d4ec:	b18d      	cbz	r5, 2d512 <_spi_context_cs_control+0x30>
   2d4ee:	6828      	ldr	r0, [r5, #0]
   2d4f0:	b178      	cbz	r0, 2d512 <_spi_context_cs_control+0x30>
		if (on) {
   2d4f2:	b979      	cbnz	r1, 2d514 <_spi_context_cs_control+0x32>
			if (!force_off &&
   2d4f4:	b91a      	cbnz	r2, 2d4fe <_spi_context_cs_control+0x1c>
			    ctx->config->operation & SPI_HOLD_ON_CS) {
   2d4f6:	889b      	ldrh	r3, [r3, #4]
			if (!force_off &&
   2d4f8:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   2d4fc:	d109      	bne.n	2d512 <_spi_context_cs_control+0x30>
			k_busy_wait(ctx->config->cs->delay);
   2d4fe:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_busy_wait(usec_to_wait);
   2d500:	f003 fb7f 	bl	30c02 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   2d504:	6823      	ldr	r3, [r4, #0]
   2d506:	689b      	ldr	r3, [r3, #8]
	return gpio_pin_set(spec->port, spec->pin, value);
   2d508:	2200      	movs	r2, #0
   2d50a:	7919      	ldrb	r1, [r3, #4]
   2d50c:	6818      	ldr	r0, [r3, #0]
   2d50e:	f7ff ff94 	bl	2d43a <gpio_pin_set>
}
   2d512:	bd38      	pop	{r3, r4, r5, pc}
   2d514:	2201      	movs	r2, #1
   2d516:	7929      	ldrb	r1, [r5, #4]
   2d518:	f7ff ff8f 	bl	2d43a <gpio_pin_set>
			k_busy_wait(ctx->config->cs->delay);
   2d51c:	6823      	ldr	r3, [r4, #0]
   2d51e:	689b      	ldr	r3, [r3, #8]
   2d520:	6898      	ldr	r0, [r3, #8]
   2d522:	f003 fb6e 	bl	30c02 <z_impl_k_busy_wait>
}
   2d526:	e7f4      	b.n	2d512 <_spi_context_cs_control+0x30>

0002d528 <spi_context_unlock_unconditionally>:
{
   2d528:	b510      	push	{r4, lr}
   2d52a:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   2d52c:	2201      	movs	r2, #1
   2d52e:	2100      	movs	r1, #0
   2d530:	f7ff ffd7 	bl	2d4e2 <_spi_context_cs_control>
	return sem->count;
   2d534:	69a3      	ldr	r3, [r4, #24]
	if (!k_sem_count_get(&ctx->lock)) {
   2d536:	b103      	cbz	r3, 2d53a <spi_context_unlock_unconditionally+0x12>
}
   2d538:	bd10      	pop	{r4, pc}
		ctx->owner = NULL;
   2d53a:	6063      	str	r3, [r4, #4]
		k_sem_give(&ctx->lock);
   2d53c:	f104 0010 	add.w	r0, r4, #16
	z_impl_k_sem_give(sem);
   2d540:	f7f9 f838 	bl	265b4 <z_impl_k_sem_give>
}
   2d544:	e7f8      	b.n	2d538 <spi_context_unlock_unconditionally+0x10>

0002d546 <spi_nrfx_release>:
}
#endif /* CONFIG_SPI_ASYNC */

static int spi_nrfx_release(const struct device *dev,
			    const struct spi_config *spi_cfg)
{
   2d546:	b508      	push	{r3, lr}
	struct spi_nrfx_data *dev_data = dev->data;
   2d548:	6900      	ldr	r0, [r0, #16]
	return !!(ctx->config == config);
   2d54a:	6803      	ldr	r3, [r0, #0]

	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   2d54c:	428b      	cmp	r3, r1
   2d54e:	d106      	bne.n	2d55e <spi_nrfx_release+0x18>
		return -EINVAL;
	}

	if (dev_data->busy) {
   2d550:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
   2d554:	b933      	cbnz	r3, 2d564 <spi_nrfx_release+0x1e>
		return -EBUSY;
	}

	spi_context_unlock_unconditionally(&dev_data->ctx);
   2d556:	f7ff ffe7 	bl	2d528 <spi_context_unlock_unconditionally>

	return 0;
   2d55a:	2000      	movs	r0, #0
}
   2d55c:	bd08      	pop	{r3, pc}
		return -EINVAL;
   2d55e:	f06f 0015 	mvn.w	r0, #21
   2d562:	e7fb      	b.n	2d55c <spi_nrfx_release+0x16>
		return -EBUSY;
   2d564:	f06f 000f 	mvn.w	r0, #15
   2d568:	e7f8      	b.n	2d55c <spi_nrfx_release+0x16>

0002d56a <spi_context_release>:
{
   2d56a:	b508      	push	{r3, lr}
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
   2d56c:	6803      	ldr	r3, [r0, #0]
   2d56e:	889b      	ldrh	r3, [r3, #4]
   2d570:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   2d574:	d000      	beq.n	2d578 <spi_context_release+0xe>
}
   2d576:	bd08      	pop	{r3, pc}
		ctx->owner = NULL;
   2d578:	2300      	movs	r3, #0
   2d57a:	6043      	str	r3, [r0, #4]
		k_sem_give(&ctx->lock);
   2d57c:	3010      	adds	r0, #16
   2d57e:	f7f9 f819 	bl	265b4 <z_impl_k_sem_give>
}
   2d582:	e7f8      	b.n	2d576 <spi_context_release+0xc>

0002d584 <spi_context_lock>:
{
   2d584:	b538      	push	{r3, r4, r5, lr}
   2d586:	4604      	mov	r4, r0
   2d588:	9d04      	ldr	r5, [sp, #16]
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   2d58a:	88ab      	ldrh	r3, [r5, #4]
   2d58c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   2d590:	d004      	beq.n	2d59c <spi_context_lock+0x18>
   2d592:	6983      	ldr	r3, [r0, #24]
   2d594:	b913      	cbnz	r3, 2d59c <spi_context_lock+0x18>
		(ctx->owner == spi_cfg)) {
   2d596:	6843      	ldr	r3, [r0, #4]
		(k_sem_count_get(&ctx->lock) == 0) &&
   2d598:	42ab      	cmp	r3, r5
   2d59a:	d008      	beq.n	2d5ae <spi_context_lock+0x2a>
	k_sem_take(&ctx->lock, K_FOREVER);
   2d59c:	f104 0010 	add.w	r0, r4, #16
	return z_impl_k_sem_take(sem, timeout);
   2d5a0:	f04f 32ff 	mov.w	r2, #4294967295
   2d5a4:	f04f 33ff 	mov.w	r3, #4294967295
   2d5a8:	f7f9 f82c 	bl	26604 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
   2d5ac:	6065      	str	r5, [r4, #4]
}
   2d5ae:	bd38      	pop	{r3, r4, r5, pc}

0002d5b0 <transceive>:
{
   2d5b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d5b4:	b082      	sub	sp, #8
   2d5b6:	4604      	mov	r4, r0
   2d5b8:	460d      	mov	r5, r1
   2d5ba:	4690      	mov	r8, r2
   2d5bc:	461f      	mov	r7, r3
	struct spi_nrfx_data *dev_data = dev->data;
   2d5be:	6906      	ldr	r6, [r0, #16]
	spi_context_lock(&dev_data->ctx, asynchronous, cb, userdata, spi_cfg);
   2d5c0:	9100      	str	r1, [sp, #0]
   2d5c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d5c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2d5c6:	f89d 1020 	ldrb.w	r1, [sp, #32]
   2d5ca:	4630      	mov	r0, r6
   2d5cc:	f7ff ffda 	bl	2d584 <spi_context_lock>
	error = configure(dev, spi_cfg);
   2d5d0:	4629      	mov	r1, r5
   2d5d2:	4620      	mov	r0, r4
   2d5d4:	f7f2 ffb8 	bl	20548 <configure>
	if (error == 0) {
   2d5d8:	4605      	mov	r5, r0
   2d5da:	b138      	cbz	r0, 2d5ec <transceive+0x3c>
	spi_context_release(&dev_data->ctx, error);
   2d5dc:	4629      	mov	r1, r5
   2d5de:	4630      	mov	r0, r6
   2d5e0:	f7ff ffc3 	bl	2d56a <spi_context_release>
}
   2d5e4:	4628      	mov	r0, r5
   2d5e6:	b002      	add	sp, #8
   2d5e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		dev_data->busy = true;
   2d5ec:	2501      	movs	r5, #1
   2d5ee:	f886 506c 	strb.w	r5, [r6, #108]	; 0x6c
		spi_context_buffers_setup(&dev_data->ctx, tx_bufs, rx_bufs, 1);
   2d5f2:	462b      	mov	r3, r5
   2d5f4:	463a      	mov	r2, r7
   2d5f6:	4641      	mov	r1, r8
   2d5f8:	4630      	mov	r0, r6
   2d5fa:	f7ff ff42 	bl	2d482 <spi_context_buffers_setup>
	_spi_context_cs_control(ctx, on, false);
   2d5fe:	2200      	movs	r2, #0
   2d600:	4629      	mov	r1, r5
   2d602:	4630      	mov	r0, r6
   2d604:	f7ff ff6d 	bl	2d4e2 <_spi_context_cs_control>
		transfer_next_chunk(dev);
   2d608:	4620      	mov	r0, r4
   2d60a:	f7f3 f965 	bl	208d8 <transfer_next_chunk>
		error = spi_context_wait_for_completion(&dev_data->ctx);
   2d60e:	4630      	mov	r0, r6
   2d610:	f7f2 ff3a 	bl	20488 <spi_context_wait_for_completion>
   2d614:	4605      	mov	r5, r0
   2d616:	e7e1      	b.n	2d5dc <transceive+0x2c>

0002d618 <spi_nrfx_transceive>:
{
   2d618:	b510      	push	{r4, lr}
   2d61a:	b084      	sub	sp, #16
	return transceive(dev, spi_cfg, tx_bufs, rx_bufs, false, NULL, NULL);
   2d61c:	2400      	movs	r4, #0
   2d61e:	9402      	str	r4, [sp, #8]
   2d620:	9401      	str	r4, [sp, #4]
   2d622:	9400      	str	r4, [sp, #0]
   2d624:	f7ff ffc4 	bl	2d5b0 <transceive>
}
   2d628:	b004      	add	sp, #16
   2d62a:	bd10      	pop	{r4, pc}

0002d62c <irq_connect0>:
		      &spi_##idx##z_config,				       \
		      POST_KERNEL, CONFIG_SPI_INIT_PRIORITY,		       \
		      &spi_nrfx_driver_api)

#ifdef CONFIG_SPI_0_NRF_SPI
SPI_NRFX_SPI_DEFINE(0);
   2d62c:	b508      	push	{r3, lr}
   2d62e:	2200      	movs	r2, #0
   2d630:	2101      	movs	r1, #1
   2d632:	2003      	movs	r0, #3
   2d634:	f7fc f9c8 	bl	299c8 <z_arm_irq_priority_set>
   2d638:	bd08      	pop	{r3, pc}

0002d63a <pinctrl_apply_state>:
 * @retval -ENOENT If given state id does not exist.
 * @retval -errno Negative errno for other failures.
 */
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
				      uint8_t id)
{
   2d63a:	b510      	push	{r4, lr}
   2d63c:	b082      	sub	sp, #8
   2d63e:	4604      	mov	r4, r0
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   2d640:	aa01      	add	r2, sp, #4
   2d642:	f000 fe5c 	bl	2e2fe <pinctrl_lookup_state>
	if (ret < 0) {
   2d646:	2800      	cmp	r0, #0
   2d648:	db05      	blt.n	2d656 <pinctrl_apply_state+0x1c>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   2d64a:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   2d64c:	6822      	ldr	r2, [r4, #0]
   2d64e:	7919      	ldrb	r1, [r3, #4]
   2d650:	6818      	ldr	r0, [r3, #0]
   2d652:	f7f5 f93f 	bl	228d4 <pinctrl_configure_pins>
}
   2d656:	b002      	add	sp, #8
   2d658:	bd10      	pop	{r4, pc}

0002d65a <spi_nrfx_init>:
{
   2d65a:	b538      	push	{r3, r4, r5, lr}
	const struct spi_nrfx_config *dev_config = dev->config;
   2d65c:	6844      	ldr	r4, [r0, #4]
	struct spi_nrfx_data *dev_data = dev->data;
   2d65e:	6905      	ldr	r5, [r0, #16]
	err = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   2d660:	2100      	movs	r1, #0
   2d662:	6a20      	ldr	r0, [r4, #32]
   2d664:	f7ff ffe9 	bl	2d63a <pinctrl_apply_state>
	if (err < 0) {
   2d668:	2800      	cmp	r0, #0
   2d66a:	db0a      	blt.n	2d682 <spi_nrfx_init+0x28>
	dev_config->irq_connect();
   2d66c:	69e3      	ldr	r3, [r4, #28]
   2d66e:	4798      	blx	r3
	err = spi_context_cs_configure_all(&dev_data->ctx);
   2d670:	4628      	mov	r0, r5
   2d672:	f7f3 fa1b 	bl	20aac <spi_context_cs_configure_all>
	if (err < 0) {
   2d676:	2800      	cmp	r0, #0
   2d678:	db03      	blt.n	2d682 <spi_nrfx_init+0x28>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   2d67a:	4628      	mov	r0, r5
   2d67c:	f7ff ff54 	bl	2d528 <spi_context_unlock_unconditionally>
	return 0;
   2d680:	2000      	movs	r0, #0
}
   2d682:	bd38      	pop	{r3, r4, r5, pc}

0002d684 <gpio_pin_set_raw>:
{
   2d684:	b508      	push	{r3, lr}
	if (value != 0)	{
   2d686:	b132      	cbz	r2, 2d696 <gpio_pin_set_raw+0x12>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
   2d688:	2301      	movs	r3, #1
   2d68a:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
   2d68e:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
   2d690:	68db      	ldr	r3, [r3, #12]
   2d692:	4798      	blx	r3
}
   2d694:	bd08      	pop	{r3, pc}
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
   2d696:	2301      	movs	r3, #1
   2d698:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
   2d69c:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
   2d69e:	691b      	ldr	r3, [r3, #16]
   2d6a0:	4798      	blx	r3
	return ret;
   2d6a2:	e7f7      	b.n	2d694 <gpio_pin_set_raw+0x10>

0002d6a4 <gpio_pin_set>:
{
   2d6a4:	b510      	push	{r4, lr}
	const struct gpio_driver_data *const data =
   2d6a6:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   2d6a8:	681c      	ldr	r4, [r3, #0]
   2d6aa:	2301      	movs	r3, #1
   2d6ac:	408b      	lsls	r3, r1
   2d6ae:	421c      	tst	r4, r3
   2d6b0:	d002      	beq.n	2d6b8 <gpio_pin_set+0x14>
		value = (value != 0) ? 0 : 1;
   2d6b2:	fab2 f282 	clz	r2, r2
   2d6b6:	0952      	lsrs	r2, r2, #5
	return gpio_pin_set_raw(port, pin, value);
   2d6b8:	f7ff ffe4 	bl	2d684 <gpio_pin_set_raw>
}
   2d6bc:	bd10      	pop	{r4, pc}

0002d6be <sdhc_spi_card_busy>:
{
   2d6be:	b510      	push	{r4, lr}
   2d6c0:	b082      	sub	sp, #8
	const struct sdhc_spi_config *config = dev->config;
   2d6c2:	6844      	ldr	r4, [r0, #4]
	struct sdhc_spi_data *data = dev->data;
   2d6c4:	6901      	ldr	r1, [r0, #16]
	ret = sdhc_spi_rx(config->spi_dev, data->spi_cfg, &response, 1);
   2d6c6:	2301      	movs	r3, #1
   2d6c8:	f10d 0207 	add.w	r2, sp, #7
   2d6cc:	6849      	ldr	r1, [r1, #4]
   2d6ce:	6820      	ldr	r0, [r4, #0]
   2d6d0:	f7f3 fa6c 	bl	20bac <sdhc_spi_rx>
	if (ret) {
   2d6d4:	b930      	cbnz	r0, 2d6e4 <sdhc_spi_card_busy+0x26>
	if (response == 0xFF) {
   2d6d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2d6da:	2bff      	cmp	r3, #255	; 0xff
   2d6dc:	d000      	beq.n	2d6e0 <sdhc_spi_card_busy+0x22>
		return 1;
   2d6de:	2001      	movs	r0, #1
}
   2d6e0:	b002      	add	sp, #8
   2d6e2:	bd10      	pop	{r4, pc}
		return -EIO;
   2d6e4:	f06f 0004 	mvn.w	r0, #4
   2d6e8:	e7fa      	b.n	2d6e0 <sdhc_spi_card_busy+0x22>

0002d6ea <sdhc_spi_get_card_present>:
}
   2d6ea:	2001      	movs	r0, #1
   2d6ec:	4770      	bx	lr

0002d6ee <k_msleep>:
{
   2d6ee:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   2d6f0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   2d6f4:	17c1      	asrs	r1, r0, #31
   2d6f6:	03c9      	lsls	r1, r1, #15
   2d6f8:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   2d6fc:	03c0      	lsls	r0, r0, #15
   2d6fe:	f240 33e7 	movw	r3, #999	; 0x3e7
   2d702:	18c0      	adds	r0, r0, r3
   2d704:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2d708:	f04f 0300 	mov.w	r3, #0
   2d70c:	f141 0100 	adc.w	r1, r1, #0
   2d710:	f7d2 fcf6 	bl	100 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   2d714:	f7f9 fcaa 	bl	2706c <z_impl_k_sleep>
}
   2d718:	bd08      	pop	{r3, pc}

0002d71a <sdhc_spi_wait_unbusy>:
{
   2d71a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d71e:	b082      	sub	sp, #8
   2d720:	460e      	mov	r6, r1
   2d722:	4615      	mov	r5, r2
	const struct sdhc_spi_config *config = dev->config;
   2d724:	f8d0 8004 	ldr.w	r8, [r0, #4]
	struct sdhc_spi_data *data = dev->data;
   2d728:	6907      	ldr	r7, [r0, #16]
	while (timeout_ms > 0) {
   2d72a:	e016      	b.n	2d75a <sdhc_spi_wait_unbusy+0x40>
			return (uint32_t)((t * to_hz + off) / from_hz);
   2d72c:	0eeb      	lsrs	r3, r5, #27
   2d72e:	016c      	lsls	r4, r5, #5
   2d730:	1b64      	subs	r4, r4, r5
   2d732:	f163 0300 	sbc.w	r3, r3, #0
   2d736:	009b      	lsls	r3, r3, #2
   2d738:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
   2d73c:	00a4      	lsls	r4, r4, #2
   2d73e:	1964      	adds	r4, r4, r5
   2d740:	f143 0300 	adc.w	r3, r3, #0
   2d744:	00db      	lsls	r3, r3, #3
   2d746:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
   2d74a:	f3c4 3410 	ubfx	r4, r4, #12, #17
   2d74e:	ea44 4443 	orr.w	r4, r4, r3, lsl #17
		k_msleep(k_ticks_to_ms_floor32(interval_ticks));
   2d752:	4620      	mov	r0, r4
   2d754:	f7ff ffcb 	bl	2d6ee <k_msleep>
		timeout_ms -= k_ticks_to_ms_floor32(interval_ticks);
   2d758:	1b36      	subs	r6, r6, r4
	while (timeout_ms > 0) {
   2d75a:	2e00      	cmp	r6, #0
   2d75c:	dd0e      	ble.n	2d77c <sdhc_spi_wait_unbusy+0x62>
		ret = sdhc_spi_rx(config->spi_dev, data->spi_cfg, &response, 1);
   2d75e:	2301      	movs	r3, #1
   2d760:	f10d 0207 	add.w	r2, sp, #7
   2d764:	6879      	ldr	r1, [r7, #4]
   2d766:	f8d8 0000 	ldr.w	r0, [r8]
   2d76a:	f7f3 fa1f 	bl	20bac <sdhc_spi_rx>
		if (ret) {
   2d76e:	4602      	mov	r2, r0
   2d770:	b930      	cbnz	r0, 2d780 <sdhc_spi_wait_unbusy+0x66>
		if (response == 0xFF) {
   2d772:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2d776:	2bff      	cmp	r3, #255	; 0xff
   2d778:	d1d8      	bne.n	2d72c <sdhc_spi_wait_unbusy+0x12>
   2d77a:	e001      	b.n	2d780 <sdhc_spi_wait_unbusy+0x66>
	return -ETIMEDOUT;
   2d77c:	f06f 0273 	mvn.w	r2, #115	; 0x73
}
   2d780:	4610      	mov	r0, r2
   2d782:	b002      	add	sp, #8
   2d784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002d788 <sdhc_spi_write_data>:
{
   2d788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2d78c:	b08a      	sub	sp, #40	; 0x28
   2d78e:	4681      	mov	r9, r0
   2d790:	460d      	mov	r5, r1
	const struct sdhc_spi_config *config = dev->config;
   2d792:	f8d0 8004 	ldr.w	r8, [r0, #4]
	struct sdhc_spi_data *dev_data = dev->data;
   2d796:	6907      	ldr	r7, [r0, #16]
	uint8_t *write_location = data->data, crc[SD_SPI_CRC16_SIZE];
   2d798:	690c      	ldr	r4, [r1, #16]
	uint32_t remaining = data->blocks;
   2d79a:	688e      	ldr	r6, [r1, #8]
	struct spi_buf tx_bufs[] = {
   2d79c:	f10d 0327 	add.w	r3, sp, #39	; 0x27
   2d7a0:	9303      	str	r3, [sp, #12]
   2d7a2:	2301      	movs	r3, #1
   2d7a4:	9304      	str	r3, [sp, #16]
   2d7a6:	9405      	str	r4, [sp, #20]
			.len = data->block_size,
   2d7a8:	684b      	ldr	r3, [r1, #4]
	struct spi_buf tx_bufs[] = {
   2d7aa:	9306      	str	r3, [sp, #24]
   2d7ac:	ab09      	add	r3, sp, #36	; 0x24
   2d7ae:	9307      	str	r3, [sp, #28]
   2d7b0:	2302      	movs	r3, #2
   2d7b2:	9308      	str	r3, [sp, #32]
	struct spi_buf_set tx = {
   2d7b4:	ab03      	add	r3, sp, #12
   2d7b6:	9301      	str	r3, [sp, #4]
   2d7b8:	2303      	movs	r3, #3
   2d7ba:	9302      	str	r3, [sp, #8]
	if (remaining > 1) {
   2d7bc:	2e01      	cmp	r6, #1
   2d7be:	d937      	bls.n	2d830 <sdhc_spi_write_data+0xa8>
		token = SD_SPI_TOKEN_MULTI_WRITE;
   2d7c0:	23fc      	movs	r3, #252	; 0xfc
   2d7c2:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
	while (remaining--) {
   2d7c6:	4633      	mov	r3, r6
   2d7c8:	3e01      	subs	r6, #1
   2d7ca:	2b00      	cmp	r3, #0
   2d7cc:	d03f      	beq.n	2d84e <sdhc_spi_write_data+0xc6>
		sys_put_be16(crc16_itu_t(0, write_location, data->block_size),
   2d7ce:	686a      	ldr	r2, [r5, #4]
   2d7d0:	4621      	mov	r1, r4
   2d7d2:	2000      	movs	r0, #0
   2d7d4:	f7fa ffab 	bl	2872e <crc16_itu_t>
	dst[0] = val >> 8;
   2d7d8:	0a03      	lsrs	r3, r0, #8
   2d7da:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	dst[1] = val;
   2d7de:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
		ret = spi_write(config->spi_dev, dev_data->spi_cfg, &tx);
   2d7e2:	f8d8 0000 	ldr.w	r0, [r8]
   2d7e6:	6879      	ldr	r1, [r7, #4]
	const struct spi_driver_api *api =
   2d7e8:	6883      	ldr	r3, [r0, #8]
	return api->transceive(dev, config, tx_bufs, rx_bufs);
   2d7ea:	f8d3 a000 	ldr.w	sl, [r3]
   2d7ee:	2300      	movs	r3, #0
   2d7f0:	aa01      	add	r2, sp, #4
   2d7f2:	47d0      	blx	sl
		if (ret) {
   2d7f4:	4603      	mov	r3, r0
   2d7f6:	bb18      	cbnz	r0, 2d840 <sdhc_spi_write_data+0xb8>
		ret = sdhc_spi_rx(config->spi_dev, dev_data->spi_cfg,
   2d7f8:	2301      	movs	r3, #1
   2d7fa:	f10d 0226 	add.w	r2, sp, #38	; 0x26
   2d7fe:	6879      	ldr	r1, [r7, #4]
   2d800:	f8d8 0000 	ldr.w	r0, [r8]
   2d804:	f7f3 f9d2 	bl	20bac <sdhc_spi_rx>
		if (ret) {
   2d808:	4603      	mov	r3, r0
   2d80a:	b9c8      	cbnz	r0, 2d840 <sdhc_spi_write_data+0xb8>
		if ((resp & 0xF) != SD_SPI_RESPONSE_ACCEPTED) {
   2d80c:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   2d810:	f003 030f 	and.w	r3, r3, #15
   2d814:	2b05      	cmp	r3, #5
   2d816:	d10f      	bne.n	2d838 <sdhc_spi_write_data+0xb0>
		write_location += data->block_size;
   2d818:	686b      	ldr	r3, [r5, #4]
   2d81a:	441c      	add	r4, r3
		tx_bufs[1].buf = write_location;
   2d81c:	9405      	str	r4, [sp, #20]
		ret = sdhc_spi_wait_unbusy(dev, data->timeout_ms, 0);
   2d81e:	2200      	movs	r2, #0
   2d820:	6969      	ldr	r1, [r5, #20]
   2d822:	4648      	mov	r0, r9
   2d824:	f7ff ff79 	bl	2d71a <sdhc_spi_wait_unbusy>
		if (ret) {
   2d828:	4603      	mov	r3, r0
   2d82a:	2800      	cmp	r0, #0
   2d82c:	d0cb      	beq.n	2d7c6 <sdhc_spi_write_data+0x3e>
   2d82e:	e007      	b.n	2d840 <sdhc_spi_write_data+0xb8>
		token = SD_SPI_TOKEN_SINGLE;
   2d830:	23fe      	movs	r3, #254	; 0xfe
   2d832:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
   2d836:	e7c6      	b.n	2d7c6 <sdhc_spi_write_data+0x3e>
			if ((resp & 0xF) == SD_SPI_RESPONSE_CRC_ERR) {
   2d838:	2b0b      	cmp	r3, #11
   2d83a:	d005      	beq.n	2d848 <sdhc_spi_write_data+0xc0>
				return -EIO;
   2d83c:	f06f 0304 	mvn.w	r3, #4
}
   2d840:	4618      	mov	r0, r3
   2d842:	b00a      	add	sp, #40	; 0x28
   2d844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				return -EILSEQ;
   2d848:	f06f 0389 	mvn.w	r3, #137	; 0x89
   2d84c:	e7f8      	b.n	2d840 <sdhc_spi_write_data+0xb8>
	if (data->blocks > 1) {
   2d84e:	68ab      	ldr	r3, [r5, #8]
   2d850:	2b01      	cmp	r3, #1
   2d852:	d916      	bls.n	2d882 <sdhc_spi_write_data+0xfa>
		token = SD_SPI_TOKEN_STOP_TRAN;
   2d854:	23fd      	movs	r3, #253	; 0xfd
   2d856:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
		tx.count = 1;
   2d85a:	2301      	movs	r3, #1
   2d85c:	9302      	str	r3, [sp, #8]
		ret = spi_write(config->spi_dev, dev_data->spi_cfg, &tx);
   2d85e:	f8d8 0000 	ldr.w	r0, [r8]
   2d862:	6879      	ldr	r1, [r7, #4]
	const struct spi_driver_api *api =
   2d864:	6883      	ldr	r3, [r0, #8]
	return api->transceive(dev, config, tx_bufs, rx_bufs);
   2d866:	681c      	ldr	r4, [r3, #0]
   2d868:	2300      	movs	r3, #0
   2d86a:	aa01      	add	r2, sp, #4
   2d86c:	47a0      	blx	r4
		if (ret) {
   2d86e:	4603      	mov	r3, r0
   2d870:	2800      	cmp	r0, #0
   2d872:	d1e5      	bne.n	2d840 <sdhc_spi_write_data+0xb8>
		ret = sdhc_spi_wait_unbusy(dev, data->timeout_ms, 0);
   2d874:	2200      	movs	r2, #0
   2d876:	6969      	ldr	r1, [r5, #20]
   2d878:	4648      	mov	r0, r9
   2d87a:	f7ff ff4e 	bl	2d71a <sdhc_spi_wait_unbusy>
   2d87e:	4603      	mov	r3, r0
		if (ret) {
   2d880:	e7de      	b.n	2d840 <sdhc_spi_write_data+0xb8>
	return 0;
   2d882:	2300      	movs	r3, #0
   2d884:	e7dc      	b.n	2d840 <sdhc_spi_write_data+0xb8>

0002d886 <sdhc_spi_response_get>:
{
   2d886:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2d88a:	4607      	mov	r7, r0
   2d88c:	460e      	mov	r6, r1
	const struct sdhc_spi_config *config = dev->config;
   2d88e:	f8d0 9004 	ldr.w	r9, [r0, #4]
	struct sdhc_spi_data *dev_data = dev->data;
   2d892:	6905      	ldr	r5, [r0, #16]
	uint8_t *response = dev_data->scratch;
   2d894:	f105 0820 	add.w	r8, r5, #32
	uint8_t *end = response + rx_len;
   2d898:	eb08 0402 	add.w	r4, r8, r2
	response += 8;
   2d89c:	f105 0328 	add.w	r3, r5, #40	; 0x28
	while (response < end && ((*response & SD_SPI_START) == SD_SPI_START)) {
   2d8a0:	e000      	b.n	2d8a4 <sdhc_spi_response_get+0x1e>
		response++;
   2d8a2:	3301      	adds	r3, #1
	while (response < end && ((*response & SD_SPI_START) == SD_SPI_START)) {
   2d8a4:	42a3      	cmp	r3, r4
   2d8a6:	d203      	bcs.n	2d8b0 <sdhc_spi_response_get+0x2a>
   2d8a8:	f993 2000 	ldrsb.w	r2, [r3]
   2d8ac:	2a00      	cmp	r2, #0
   2d8ae:	dbf8      	blt.n	2d8a2 <sdhc_spi_response_get+0x1c>
	if (response == end) {
   2d8b0:	42a3      	cmp	r3, r4
   2d8b2:	d021      	beq.n	2d8f8 <sdhc_spi_response_get+0x72>
	cmd->response[0] = *response++;
   2d8b4:	f813 2b01 	ldrb.w	r2, [r3], #1
   2d8b8:	60b2      	str	r2, [r6, #8]
	if (cmd->response[0] != 0) {
   2d8ba:	b17a      	cbz	r2, 2d8dc <sdhc_spi_response_get+0x56>
		if (cmd->response[0] &	(SD_SPI_R1PARAMETER_ERR | SD_SPI_R1ADDRESS_ERR)) {
   2d8bc:	f012 0f60 	tst.w	r2, #96	; 0x60
   2d8c0:	f040 8091 	bne.w	2d9e6 <sdhc_spi_response_get+0x160>
		} else if (cmd->response[0] & (SD_SPI_R1ILLEGAL_CMD_ERR)) {
   2d8c4:	f012 0f04 	tst.w	r2, #4
   2d8c8:	f040 8090 	bne.w	2d9ec <sdhc_spi_response_get+0x166>
		} else if (cmd->response[0] & (SD_SPI_R1CMD_CRC_ERR)) {
   2d8cc:	f012 0f08 	tst.w	r2, #8
   2d8d0:	f040 808f 	bne.w	2d9f2 <sdhc_spi_response_get+0x16c>
		} else if (cmd->response[0] & (SD_SPI_R1ERASE_SEQ_ERR | SD_SPI_R1ERASE_RESET)) {
   2d8d4:	f012 0f12 	tst.w	r2, #18
   2d8d8:	f040 808e 	bne.w	2d9f8 <sdhc_spi_response_get+0x172>
	switch ((cmd->response_type & SDHC_SPI_RESPONSE_TYPE_MASK)) {
   2d8dc:	69b2      	ldr	r2, [r6, #24]
   2d8de:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
   2d8e2:	2a30      	cmp	r2, #48	; 0x30
   2d8e4:	d04d      	beq.n	2d982 <sdhc_spi_response_get+0xfc>
   2d8e6:	d826      	bhi.n	2d936 <sdhc_spi_response_get+0xb0>
   2d8e8:	2a10      	cmp	r2, #16
   2d8ea:	f000 8088 	beq.w	2d9fe <sdhc_spi_response_get+0x178>
   2d8ee:	2a20      	cmp	r2, #32
   2d8f0:	d035      	beq.n	2d95e <sdhc_spi_response_get+0xd8>
   2d8f2:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2d8f6:	e025      	b.n	2d944 <sdhc_spi_response_get+0xbe>
		end = response + 1;
   2d8f8:	f105 0421 	add.w	r4, r5, #33	; 0x21
		for (i = 0; i < 16; i++) {
   2d8fc:	f04f 0a00 	mov.w	sl, #0
   2d900:	f1ba 0f0f 	cmp.w	sl, #15
   2d904:	d811      	bhi.n	2d92a <sdhc_spi_response_get+0xa4>
			ret = sdhc_spi_rx(config->spi_dev, dev_data->spi_cfg,
   2d906:	2301      	movs	r3, #1
   2d908:	4642      	mov	r2, r8
   2d90a:	6869      	ldr	r1, [r5, #4]
   2d90c:	f8d9 0000 	ldr.w	r0, [r9]
   2d910:	f7f3 f94c 	bl	20bac <sdhc_spi_rx>
			if (ret < 0) {
   2d914:	2800      	cmp	r0, #0
   2d916:	db15      	blt.n	2d944 <sdhc_spi_response_get+0xbe>
			if (*response != 0xff) {
   2d918:	f895 3020 	ldrb.w	r3, [r5, #32]
   2d91c:	2bff      	cmp	r3, #255	; 0xff
   2d91e:	d104      	bne.n	2d92a <sdhc_spi_response_get+0xa4>
		for (i = 0; i < 16; i++) {
   2d920:	f10a 0a01 	add.w	sl, sl, #1
   2d924:	fa5f fa8a 	uxtb.w	sl, sl
   2d928:	e7ea      	b.n	2d900 <sdhc_spi_response_get+0x7a>
		if (*response == 0xff) {
   2d92a:	f895 3020 	ldrb.w	r3, [r5, #32]
   2d92e:	2bff      	cmp	r3, #255	; 0xff
   2d930:	d056      	beq.n	2d9e0 <sdhc_spi_response_get+0x15a>
		response = dev_data->scratch;
   2d932:	4643      	mov	r3, r8
   2d934:	e7be      	b.n	2d8b4 <sdhc_spi_response_get+0x2e>
	switch ((cmd->response_type & SDHC_SPI_RESPONSE_TYPE_MASK)) {
   2d936:	2a60      	cmp	r2, #96	; 0x60
   2d938:	d023      	beq.n	2d982 <sdhc_spi_response_get+0xfc>
   2d93a:	d905      	bls.n	2d948 <sdhc_spi_response_get+0xc2>
   2d93c:	2a70      	cmp	r2, #112	; 0x70
   2d93e:	d007      	beq.n	2d950 <sdhc_spi_response_get+0xca>
   2d940:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   2d944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	switch ((cmd->response_type & SDHC_SPI_RESPONSE_TYPE_MASK)) {
   2d948:	2a40      	cmp	r2, #64	; 0x40
   2d94a:	d001      	beq.n	2d950 <sdhc_spi_response_get+0xca>
   2d94c:	2a50      	cmp	r2, #80	; 0x50
   2d94e:	d102      	bne.n	2d956 <sdhc_spi_response_get+0xd0>
		cmd->response[1] = 0;
   2d950:	2700      	movs	r7, #0
   2d952:	60f7      	str	r7, [r6, #12]
		for (i = 0; i < 4; i++) {
   2d954:	e02e      	b.n	2d9b4 <sdhc_spi_response_get+0x12e>
	switch ((cmd->response_type & SDHC_SPI_RESPONSE_TYPE_MASK)) {
   2d956:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2d95a:	e7f3      	b.n	2d944 <sdhc_spi_response_get+0xbe>
			response++;
   2d95c:	3301      	adds	r3, #1
		while (response < end && (*response == 0x0)) {
   2d95e:	42a3      	cmp	r3, r4
   2d960:	d202      	bcs.n	2d968 <sdhc_spi_response_get+0xe2>
   2d962:	781a      	ldrb	r2, [r3, #0]
   2d964:	2a00      	cmp	r2, #0
   2d966:	d0f9      	beq.n	2d95c <sdhc_spi_response_get+0xd6>
		if (response == end) {
   2d968:	42a3      	cmp	r3, r4
   2d96a:	d001      	beq.n	2d970 <sdhc_spi_response_get+0xea>
	return 0;
   2d96c:	2000      	movs	r0, #0
   2d96e:	e7e9      	b.n	2d944 <sdhc_spi_response_get+0xbe>
			ret = sdhc_spi_wait_unbusy(dev,
   2d970:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2d974:	f640 31b8 	movw	r1, #3000	; 0xbb8
   2d978:	4638      	mov	r0, r7
   2d97a:	f7ff fece 	bl	2d71a <sdhc_spi_wait_unbusy>
	return 0;
   2d97e:	2000      	movs	r0, #0
   2d980:	e7e0      	b.n	2d944 <sdhc_spi_response_get+0xbe>
		if (response == end) {
   2d982:	429c      	cmp	r4, r3
   2d984:	d004      	beq.n	2d990 <sdhc_spi_response_get+0x10a>
		cmd->response[0] = (*response) << 8;
   2d986:	781b      	ldrb	r3, [r3, #0]
   2d988:	021b      	lsls	r3, r3, #8
   2d98a:	60b3      	str	r3, [r6, #8]
	return 0;
   2d98c:	2000      	movs	r0, #0
		break;
   2d98e:	e7d9      	b.n	2d944 <sdhc_spi_response_get+0xbe>
			ret = sdhc_spi_rx(config->spi_dev,
   2d990:	2301      	movs	r3, #1
   2d992:	4642      	mov	r2, r8
   2d994:	6869      	ldr	r1, [r5, #4]
   2d996:	f8d9 0000 	ldr.w	r0, [r9]
   2d99a:	f7f3 f907 	bl	20bac <sdhc_spi_rx>
			if (ret) {
   2d99e:	2800      	cmp	r0, #0
   2d9a0:	d1d0      	bne.n	2d944 <sdhc_spi_response_get+0xbe>
			response = dev_data->scratch;
   2d9a2:	4643      	mov	r3, r8
   2d9a4:	e7ef      	b.n	2d986 <sdhc_spi_response_get+0x100>
			cmd->response[1] |= *response++;
   2d9a6:	68f2      	ldr	r2, [r6, #12]
   2d9a8:	f813 1b01 	ldrb.w	r1, [r3], #1
   2d9ac:	430a      	orrs	r2, r1
   2d9ae:	60f2      	str	r2, [r6, #12]
		for (i = 0; i < 4; i++) {
   2d9b0:	3701      	adds	r7, #1
   2d9b2:	b2ff      	uxtb	r7, r7
   2d9b4:	2f03      	cmp	r7, #3
   2d9b6:	d811      	bhi.n	2d9dc <sdhc_spi_response_get+0x156>
			cmd->response[1] <<= 8;
   2d9b8:	68f2      	ldr	r2, [r6, #12]
   2d9ba:	0212      	lsls	r2, r2, #8
   2d9bc:	60f2      	str	r2, [r6, #12]
			if (response == end) {
   2d9be:	42a3      	cmp	r3, r4
   2d9c0:	d1f1      	bne.n	2d9a6 <sdhc_spi_response_get+0x120>
				end = response + 1;
   2d9c2:	f105 0421 	add.w	r4, r5, #33	; 0x21
				ret = sdhc_spi_rx(config->spi_dev,
   2d9c6:	2301      	movs	r3, #1
   2d9c8:	4642      	mov	r2, r8
   2d9ca:	6869      	ldr	r1, [r5, #4]
   2d9cc:	f8d9 0000 	ldr.w	r0, [r9]
   2d9d0:	f7f3 f8ec 	bl	20bac <sdhc_spi_rx>
				if (ret) {
   2d9d4:	2800      	cmp	r0, #0
   2d9d6:	d1b5      	bne.n	2d944 <sdhc_spi_response_get+0xbe>
				response = dev_data->scratch;
   2d9d8:	4643      	mov	r3, r8
   2d9da:	e7e4      	b.n	2d9a6 <sdhc_spi_response_get+0x120>
	return 0;
   2d9dc:	2000      	movs	r0, #0
   2d9de:	e7b1      	b.n	2d944 <sdhc_spi_response_get+0xbe>
			return -ETIMEDOUT;
   2d9e0:	f06f 0073 	mvn.w	r0, #115	; 0x73
   2d9e4:	e7ae      	b.n	2d944 <sdhc_spi_response_get+0xbe>
			return -EFAULT; /* Bad address */
   2d9e6:	f06f 000d 	mvn.w	r0, #13
   2d9ea:	e7ab      	b.n	2d944 <sdhc_spi_response_get+0xbe>
			return -EINVAL; /* Invalid command */
   2d9ec:	f06f 0015 	mvn.w	r0, #21
   2d9f0:	e7a8      	b.n	2d944 <sdhc_spi_response_get+0xbe>
			return -EILSEQ; /* Illegal byte sequence */
   2d9f2:	f06f 0089 	mvn.w	r0, #137	; 0x89
   2d9f6:	e7a5      	b.n	2d944 <sdhc_spi_response_get+0xbe>
			return -EIO;
   2d9f8:	f06f 0004 	mvn.w	r0, #4
   2d9fc:	e7a2      	b.n	2d944 <sdhc_spi_response_get+0xbe>
	return 0;
   2d9fe:	2000      	movs	r0, #0
   2da00:	e7a0      	b.n	2d944 <sdhc_spi_response_get+0xbe>

0002da02 <sdhc_spi_send_cmd>:
{
   2da02:	b5f0      	push	{r4, r5, r6, r7, lr}
   2da04:	b085      	sub	sp, #20
   2da06:	4605      	mov	r5, r0
   2da08:	460e      	mov	r6, r1
	const struct sdhc_spi_config *config = dev->config;
   2da0a:	6847      	ldr	r7, [r0, #4]
	struct sdhc_spi_data *dev_data = dev->data;
   2da0c:	6904      	ldr	r4, [r0, #16]
			.buf = dev_data->scratch,
   2da0e:	f104 0020 	add.w	r0, r4, #32
	struct spi_buf bufs[] = {
   2da12:	9002      	str	r0, [sp, #8]
   2da14:	2315      	movs	r3, #21
   2da16:	9303      	str	r3, [sp, #12]
	const struct spi_buf_set buf_set = {
   2da18:	ab02      	add	r3, sp, #8
   2da1a:	9300      	str	r3, [sp, #0]
   2da1c:	2301      	movs	r3, #1
   2da1e:	9301      	str	r3, [sp, #4]
	if (data_present) {
   2da20:	b10a      	cbz	r2, 2da26 <sdhc_spi_send_cmd+0x24>
		bufs[0].len = SD_SPI_CMD_SIZE + 3;
   2da22:	2309      	movs	r3, #9
   2da24:	9303      	str	r3, [sp, #12]
	memset(dev_data->scratch, 0xFF, sizeof(dev_data->scratch));
   2da26:	2215      	movs	r2, #21
   2da28:	21ff      	movs	r1, #255	; 0xff
   2da2a:	f7fc f8f1 	bl	29c10 <memset>
	cmd_buf[0] = (cmd->opcode & SD_SPI_CMD);
   2da2e:	6833      	ldr	r3, [r6, #0]
   2da30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2da34:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmd_buf[0] = ((cmd_buf[0] | SD_SPI_TX) & ~SD_SPI_START);
   2da38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2da3c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	sys_put_be32(cmd->arg, &cmd_buf[1]);
   2da40:	6873      	ldr	r3, [r6, #4]
	sys_put_be16(val >> 16, dst);
   2da42:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val >> 8;
   2da44:	0e19      	lsrs	r1, r3, #24
   2da46:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
	dst[1] = val;
   2da4a:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
	dst[0] = val >> 8;
   2da4e:	f3c3 2207 	ubfx	r2, r3, #8, #8
   2da52:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
	dst[1] = val;
   2da56:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	cmd_buf[SD_SPI_CMD_BODY_SIZE] = crc7_be(0, cmd_buf, SD_SPI_CMD_BODY_SIZE) | 0x1;
   2da5a:	2205      	movs	r2, #5
   2da5c:	f104 0121 	add.w	r1, r4, #33	; 0x21
   2da60:	2000      	movs	r0, #0
   2da62:	f7fa fe7a 	bl	2875a <crc7_be>
   2da66:	f040 0001 	orr.w	r0, r0, #1
   2da6a:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
	err = spi_transceive(config->spi_dev, dev_data->spi_cfg, &buf_set, &buf_set);
   2da6e:	6838      	ldr	r0, [r7, #0]
   2da70:	6861      	ldr	r1, [r4, #4]
	const struct spi_driver_api *api =
   2da72:	6883      	ldr	r3, [r0, #8]
	return api->transceive(dev, config, tx_bufs, rx_bufs);
   2da74:	681c      	ldr	r4, [r3, #0]
   2da76:	466b      	mov	r3, sp
   2da78:	466a      	mov	r2, sp
   2da7a:	47a0      	blx	r4
	if (err != 0) {
   2da7c:	b108      	cbz	r0, 2da82 <sdhc_spi_send_cmd+0x80>
}
   2da7e:	b005      	add	sp, #20
   2da80:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return sdhc_spi_response_get(dev, cmd, bufs[0].len);
   2da82:	9a03      	ldr	r2, [sp, #12]
   2da84:	4631      	mov	r1, r6
   2da86:	4628      	mov	r0, r5
   2da88:	f7ff fefd 	bl	2d886 <sdhc_spi_response_get>
   2da8c:	e7f7      	b.n	2da7e <sdhc_spi_send_cmd+0x7c>

0002da8e <sdhc_spi_request>:
{
   2da8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2da92:	b08a      	sub	sp, #40	; 0x28
   2da94:	4606      	mov	r6, r0
   2da96:	460f      	mov	r7, r1
   2da98:	4690      	mov	r8, r2
	const struct sdhc_spi_config *config = dev->config;
   2da9a:	f8d0 a004 	ldr.w	sl, [r0, #4]
	struct sdhc_spi_data *dev_data = dev->data;
   2da9e:	f8d0 9010 	ldr.w	r9, [r0, #16]
	int ret, retries = cmd->retries;
   2daa2:	69cd      	ldr	r5, [r1, #28]
	const struct sdhc_command stop_cmd = {
   2daa4:	2224      	movs	r2, #36	; 0x24
   2daa6:	2100      	movs	r1, #0
   2daa8:	a801      	add	r0, sp, #4
   2daaa:	f7fc f8b1 	bl	29c10 <memset>
   2daae:	230c      	movs	r3, #12
   2dab0:	9301      	str	r3, [sp, #4]
   2dab2:	2320      	movs	r3, #32
   2dab4:	9307      	str	r3, [sp, #28]
   2dab6:	2301      	movs	r3, #1
   2dab8:	9308      	str	r3, [sp, #32]
   2daba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   2dabe:	9309      	str	r3, [sp, #36]	; 0x24
	if (data == NULL) {
   2dac0:	f1b8 0f00 	cmp.w	r8, #0
   2dac4:	d129      	bne.n	2db1a <sdhc_spi_request+0x8c>
   2dac6:	e000      	b.n	2daca <sdhc_spi_request+0x3c>
		} while ((ret != 0) && (retries-- > 0));
   2dac8:	461d      	mov	r5, r3
			ret = sdhc_spi_send_cmd(dev, cmd, false);
   2daca:	2200      	movs	r2, #0
   2dacc:	4639      	mov	r1, r7
   2dace:	4630      	mov	r0, r6
   2dad0:	f7ff ff97 	bl	2da02 <sdhc_spi_send_cmd>
		} while ((ret != 0) && (retries-- > 0));
   2dad4:	4604      	mov	r4, r0
   2dad6:	b110      	cbz	r0, 2dade <sdhc_spi_request+0x50>
   2dad8:	1e6b      	subs	r3, r5, #1
   2dada:	2d00      	cmp	r5, #0
   2dadc:	dcf4      	bgt.n	2dac8 <sdhc_spi_request+0x3a>
	if (ret) {
   2dade:	b93c      	cbnz	r4, 2daf0 <sdhc_spi_request+0x62>
	return spi_release(config->spi_dev, dev_data->spi_cfg);
   2dae0:	f8da 0000 	ldr.w	r0, [sl]
   2dae4:	f8d9 1004 	ldr.w	r1, [r9, #4]
	const struct spi_driver_api *api =
   2dae8:	6883      	ldr	r3, [r0, #8]
	return api->release(dev, config);
   2daea:	685b      	ldr	r3, [r3, #4]
   2daec:	4798      	blx	r3
   2daee:	4604      	mov	r4, r0
}
   2daf0:	4620      	mov	r0, r4
   2daf2:	b00a      	add	sp, #40	; 0x28
   2daf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				ret = sdhc_spi_write_data(dev, data);
   2daf8:	4641      	mov	r1, r8
   2dafa:	4630      	mov	r0, r6
   2dafc:	f7ff fe44 	bl	2d788 <sdhc_spi_write_data>
   2db00:	4604      	mov	r4, r0
   2db02:	e01b      	b.n	2db3c <sdhc_spi_request+0xae>
				sdhc_spi_send_cmd(dev,
   2db04:	2200      	movs	r2, #0
   2db06:	a901      	add	r1, sp, #4
   2db08:	4630      	mov	r0, r6
   2db0a:	f7ff ff7a 	bl	2da02 <sdhc_spi_send_cmd>
		} while ((ret != 0) && (retries-- > 0));
   2db0e:	2c00      	cmp	r4, #0
   2db10:	d0e5      	beq.n	2dade <sdhc_spi_request+0x50>
   2db12:	1e6b      	subs	r3, r5, #1
   2db14:	2d00      	cmp	r5, #0
   2db16:	dde2      	ble.n	2dade <sdhc_spi_request+0x50>
   2db18:	461d      	mov	r5, r3
			ret = sdhc_spi_send_cmd(dev, cmd, true);
   2db1a:	2201      	movs	r2, #1
   2db1c:	4639      	mov	r1, r7
   2db1e:	4630      	mov	r0, r6
   2db20:	f7ff ff6f 	bl	2da02 <sdhc_spi_send_cmd>
			if (ret) {
   2db24:	4604      	mov	r4, r0
   2db26:	2800      	cmp	r0, #0
   2db28:	d1f3      	bne.n	2db12 <sdhc_spi_request+0x84>
			if ((cmd->opcode == SD_WRITE_SINGLE_BLOCK) ||
   2db2a:	683b      	ldr	r3, [r7, #0]
   2db2c:	3b18      	subs	r3, #24
   2db2e:	2b01      	cmp	r3, #1
   2db30:	d9e2      	bls.n	2daf8 <sdhc_spi_request+0x6a>
				ret = sdhc_spi_read_data(dev, data);
   2db32:	4641      	mov	r1, r8
   2db34:	4630      	mov	r0, r6
   2db36:	f7f3 f957 	bl	20de8 <sdhc_spi_read_data>
   2db3a:	4604      	mov	r4, r0
			if (ret || (cmd->opcode == SD_READ_MULTIPLE_BLOCK)) {
   2db3c:	2c00      	cmp	r4, #0
   2db3e:	d1e1      	bne.n	2db04 <sdhc_spi_request+0x76>
   2db40:	683b      	ldr	r3, [r7, #0]
   2db42:	2b12      	cmp	r3, #18
   2db44:	d1e3      	bne.n	2db0e <sdhc_spi_request+0x80>
   2db46:	e7dd      	b.n	2db04 <sdhc_spi_request+0x76>

0002db48 <sdhc_spi_init>:

static int sdhc_spi_init(const struct device *dev)
{
   2db48:	b510      	push	{r4, lr}
	const struct sdhc_spi_config *cfg = dev->config;
   2db4a:	6843      	ldr	r3, [r0, #4]
	struct sdhc_spi_data *data = dev->data;
   2db4c:	6904      	ldr	r4, [r0, #16]

	if (!device_is_ready(cfg->spi_dev)) {
   2db4e:	6818      	ldr	r0, [r3, #0]
   2db50:	f002 faa9 	bl	300a6 <z_device_is_ready>
   2db54:	b138      	cbz	r0, 2db66 <sdhc_spi_init+0x1e>
		return -ENODEV;
	}
	data->power_mode = SDHC_POWER_OFF;
   2db56:	4623      	mov	r3, r4
   2db58:	2201      	movs	r2, #1
   2db5a:	f803 2b08 	strb.w	r2, [r3], #8
	data->spi_cfg = &data->cfg_a;
   2db5e:	6063      	str	r3, [r4, #4]
	data->spi_cfg->frequency = 0;
   2db60:	2000      	movs	r0, #0
   2db62:	60a0      	str	r0, [r4, #8]
	return 0;
}
   2db64:	bd10      	pop	{r4, pc}
		return -ENODEV;
   2db66:	f06f 0012 	mvn.w	r0, #18
   2db6a:	e7fb      	b.n	2db64 <sdhc_spi_init+0x1c>

0002db6c <can_calc_timing_int>:
{
   2db6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2db70:	b087      	sub	sp, #28
   2db72:	4692      	mov	sl, r2
   2db74:	461e      	mov	r6, r3
   2db76:	9f10      	ldr	r7, [sp, #64]	; 0x40
   2db78:	f8bd b044 	ldrh.w	fp, [sp, #68]	; 0x44
	uint32_t ts = max->prop_seg + max->phase_seg1 + max->phase_seg2 +
   2db7c:	885b      	ldrh	r3, [r3, #2]
   2db7e:	88b2      	ldrh	r2, [r6, #4]
   2db80:	4413      	add	r3, r2
   2db82:	88f2      	ldrh	r2, [r6, #6]
   2db84:	4413      	add	r3, r2
	if (bitrate == 0 || sp >= 1000) {
   2db86:	2f00      	cmp	r7, #0
   2db88:	d045      	beq.n	2dc16 <can_calc_timing_int+0xaa>
   2db8a:	4605      	mov	r5, r0
   2db8c:	4688      	mov	r8, r1
   2db8e:	3301      	adds	r3, #1
   2db90:	f5bb 7f7a 	cmp.w	fp, #1000	; 0x3e8
   2db94:	d242      	bcs.n	2dc1c <can_calc_timing_int+0xb0>
	for (int prescaler = MAX(core_clock / (ts * bitrate), 1);
   2db96:	fb07 f303 	mul.w	r3, r7, r3
   2db9a:	fbb0 f4f3 	udiv	r4, r0, r3
   2db9e:	2c01      	cmp	r4, #1
   2dba0:	bf38      	it	cc
   2dba2:	2401      	movcc	r4, #1
	uint16_t sp_err_min = UINT16_MAX;
   2dba4:	f64f 79ff 	movw	r9, #65535	; 0xffff
	for (int prescaler = MAX(core_clock / (ts * bitrate), 1);
   2dba8:	e000      	b.n	2dbac <can_calc_timing_int+0x40>
	     prescaler <= max->prescaler; ++prescaler) {
   2dbaa:	3401      	adds	r4, #1
   2dbac:	8933      	ldrh	r3, [r6, #8]
   2dbae:	42a3      	cmp	r3, r4
   2dbb0:	db26      	blt.n	2dc00 <can_calc_timing_int+0x94>
		if (core_clock % (prescaler * bitrate)) {
   2dbb2:	fb07 f004 	mul.w	r0, r7, r4
   2dbb6:	fbb5 f3f0 	udiv	r3, r5, r0
   2dbba:	fb00 5313 	mls	r3, r0, r3, r5
   2dbbe:	2b00      	cmp	r3, #0
   2dbc0:	d1f3      	bne.n	2dbaa <can_calc_timing_int+0x3e>
		sp_err = update_sampling_pnt(ts, sp, &tmp_res,
   2dbc2:	f8cd a000 	str.w	sl, [sp]
   2dbc6:	4633      	mov	r3, r6
   2dbc8:	aa03      	add	r2, sp, #12
   2dbca:	4659      	mov	r1, fp
   2dbcc:	fbb5 f0f0 	udiv	r0, r5, r0
   2dbd0:	f7f3 fa0a 	bl	20fe8 <update_sampling_pnt>
		if (sp_err < 0) {
   2dbd4:	2800      	cmp	r0, #0
   2dbd6:	dbe8      	blt.n	2dbaa <can_calc_timing_int+0x3e>
		if (sp_err < sp_err_min) {
   2dbd8:	4581      	cmp	r9, r0
   2dbda:	dde6      	ble.n	2dbaa <can_calc_timing_int+0x3e>
			sp_err_min = sp_err;
   2dbdc:	fa1f f980 	uxth.w	r9, r0
			res->prop_seg = tmp_res.prop_seg;
   2dbe0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   2dbe4:	f8a8 3002 	strh.w	r3, [r8, #2]
			res->phase_seg1 = tmp_res.phase_seg1;
   2dbe8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   2dbec:	f8a8 3004 	strh.w	r3, [r8, #4]
			res->phase_seg2 = tmp_res.phase_seg2;
   2dbf0:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   2dbf4:	f8a8 3006 	strh.w	r3, [r8, #6]
			res->prescaler = (uint16_t)prescaler;
   2dbf8:	f8a8 4008 	strh.w	r4, [r8, #8]
			if (sp_err == 0) {
   2dbfc:	2800      	cmp	r0, #0
   2dbfe:	d1d4      	bne.n	2dbaa <can_calc_timing_int+0x3e>
	if (sp_err_min) {
   2dc00:	f1b9 0f00 	cmp.w	r9, #0
   2dc04:	d003      	beq.n	2dc0e <can_calc_timing_int+0xa2>
	return sp_err_min == UINT16_MAX ? -ENOTSUP : (int)sp_err_min;
   2dc06:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2dc0a:	4599      	cmp	r9, r3
   2dc0c:	d009      	beq.n	2dc22 <can_calc_timing_int+0xb6>
   2dc0e:	4648      	mov	r0, r9
}
   2dc10:	b007      	add	sp, #28
   2dc12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EINVAL;
   2dc16:	f06f 0015 	mvn.w	r0, #21
   2dc1a:	e7f9      	b.n	2dc10 <can_calc_timing_int+0xa4>
   2dc1c:	f06f 0015 	mvn.w	r0, #21
   2dc20:	e7f6      	b.n	2dc10 <can_calc_timing_int+0xa4>
	return sp_err_min == UINT16_MAX ? -ENOTSUP : (int)sp_err_min;
   2dc22:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2dc26:	e7f3      	b.n	2dc10 <can_calc_timing_int+0xa4>

0002dc28 <can_calc_prescaler>:
}
#endif /* CONFIG_CAN_FD_MODE */

int can_calc_prescaler(const struct device *dev, struct can_timing *timing,
		       uint32_t bitrate)
{
   2dc28:	b570      	push	{r4, r5, r6, lr}
   2dc2a:	b082      	sub	sp, #8
   2dc2c:	460e      	mov	r6, r1
   2dc2e:	4615      	mov	r5, r2
	uint32_t ts = timing->prop_seg + timing->phase_seg1 + timing->phase_seg2 +
   2dc30:	884c      	ldrh	r4, [r1, #2]
   2dc32:	888a      	ldrh	r2, [r1, #4]
   2dc34:	4414      	add	r4, r2
   2dc36:	88ca      	ldrh	r2, [r1, #6]
   2dc38:	4414      	add	r4, r2
	const struct can_driver_api *api = (const struct can_driver_api *)dev->api;
   2dc3a:	6883      	ldr	r3, [r0, #8]
	return api->get_core_clock(dev, rate);
   2dc3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2dc3e:	a901      	add	r1, sp, #4
   2dc40:	4798      	blx	r3
		   CAN_SYNC_SEG;
	uint32_t core_clock;
	int ret;

	ret = can_get_core_clock(dev, &core_clock);
	if (ret != 0) {
   2dc42:	b968      	cbnz	r0, 2dc60 <can_calc_prescaler+0x38>
   2dc44:	3401      	adds	r4, #1
		return ret;
	}

	timing->prescaler = core_clock / (bitrate * ts);
   2dc46:	9801      	ldr	r0, [sp, #4]
   2dc48:	fb05 f204 	mul.w	r2, r5, r4
   2dc4c:	fbb0 f2f2 	udiv	r2, r0, r2
   2dc50:	8132      	strh	r2, [r6, #8]

	return core_clock % (ts * timing->prescaler);
   2dc52:	b292      	uxth	r2, r2
   2dc54:	fb04 f202 	mul.w	r2, r4, r2
   2dc58:	fbb0 f3f2 	udiv	r3, r0, r2
   2dc5c:	fb02 0013 	mls	r0, r2, r3, r0
}
   2dc60:	b002      	add	sp, #8
   2dc62:	bd70      	pop	{r4, r5, r6, pc}

0002dc64 <z_impl_gpio_pin_interrupt_configure>:
{
   2dc64:	b538      	push	{r3, r4, r5, lr}
	const struct gpio_driver_api *api =
   2dc66:	6883      	ldr	r3, [r0, #8]
	const struct gpio_driver_data *const data =
   2dc68:	6904      	ldr	r4, [r0, #16]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   2dc6a:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
   2dc6e:	d006      	beq.n	2dc7e <z_impl_gpio_pin_interrupt_configure+0x1a>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   2dc70:	6825      	ldr	r5, [r4, #0]
   2dc72:	2401      	movs	r4, #1
   2dc74:	408c      	lsls	r4, r1
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   2dc76:	4225      	tst	r5, r4
   2dc78:	d001      	beq.n	2dc7e <z_impl_gpio_pin_interrupt_configure+0x1a>
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   2dc7a:	f082 62c0 	eor.w	r2, r2, #100663296	; 0x6000000
	return api->pin_interrupt_configure(port, pin, mode, trig);
   2dc7e:	699c      	ldr	r4, [r3, #24]
   2dc80:	f002 63c0 	and.w	r3, r2, #100663296	; 0x6000000
   2dc84:	f002 72b0 	and.w	r2, r2, #23068672	; 0x1600000
   2dc88:	47a0      	blx	r4
}
   2dc8a:	bd38      	pop	{r3, r4, r5, pc}

0002dc8c <z_impl_gpio_pin_configure>:
{
   2dc8c:	b538      	push	{r3, r4, r5, lr}
   2dc8e:	4613      	mov	r3, r2
	const struct gpio_driver_api *api =
   2dc90:	6885      	ldr	r5, [r0, #8]
	struct gpio_driver_data *data =
   2dc92:	6904      	ldr	r4, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   2dc94:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
   2dc98:	d007      	beq.n	2dcaa <z_impl_gpio_pin_configure+0x1e>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
   2dc9a:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
   2dc9e:	d004      	beq.n	2dcaa <z_impl_gpio_pin_configure+0x1e>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   2dca0:	f012 0f01 	tst.w	r2, #1
   2dca4:	d001      	beq.n	2dcaa <z_impl_gpio_pin_configure+0x1e>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   2dca6:	f482 2340 	eor.w	r3, r2, #786432	; 0xc0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   2dcaa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   2dcae:	f013 0f01 	tst.w	r3, #1
   2dcb2:	d00a      	beq.n	2dcca <z_impl_gpio_pin_configure+0x3e>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   2dcb4:	6823      	ldr	r3, [r4, #0]
   2dcb6:	f04f 0c01 	mov.w	ip, #1
   2dcba:	fa0c fc01 	lsl.w	ip, ip, r1
   2dcbe:	ea43 030c 	orr.w	r3, r3, ip
   2dcc2:	6023      	str	r3, [r4, #0]
	return api->pin_configure(port, pin, flags);
   2dcc4:	682b      	ldr	r3, [r5, #0]
   2dcc6:	4798      	blx	r3
}
   2dcc8:	bd38      	pop	{r3, r4, r5, pc}
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   2dcca:	6823      	ldr	r3, [r4, #0]
   2dccc:	f04f 0c01 	mov.w	ip, #1
   2dcd0:	fa0c fc01 	lsl.w	ip, ip, r1
   2dcd4:	ea23 030c 	bic.w	r3, r3, ip
   2dcd8:	6023      	str	r3, [r4, #0]
   2dcda:	e7f3      	b.n	2dcc4 <z_impl_gpio_pin_configure+0x38>

0002dcdc <gpio_pin_configure_dt>:
{
   2dcdc:	b508      	push	{r3, lr}
   2dcde:	4603      	mov	r3, r0
   2dce0:	468c      	mov	ip, r1
	return gpio_pin_configure(spec->port,
   2dce2:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
   2dce4:	7919      	ldrb	r1, [r3, #4]
				  spec->dt_flags | extra_flags);
   2dce6:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
   2dce8:	ea42 020c 	orr.w	r2, r2, ip
   2dcec:	f7ff ffce 	bl	2dc8c <z_impl_gpio_pin_configure>
}
   2dcf0:	bd08      	pop	{r3, pc}

0002dcf2 <gpio_port_get>:
{
   2dcf2:	b538      	push	{r3, r4, r5, lr}
   2dcf4:	460c      	mov	r4, r1
	const struct gpio_driver_data *const data =
   2dcf6:	6905      	ldr	r5, [r0, #16]
	const struct gpio_driver_api *api =
   2dcf8:	6883      	ldr	r3, [r0, #8]
	return api->port_get_raw(port, value);
   2dcfa:	685b      	ldr	r3, [r3, #4]
   2dcfc:	4798      	blx	r3
	if (ret == 0) {
   2dcfe:	b918      	cbnz	r0, 2dd08 <gpio_port_get+0x16>
		*value ^= data->invert;
   2dd00:	6823      	ldr	r3, [r4, #0]
   2dd02:	682a      	ldr	r2, [r5, #0]
   2dd04:	4053      	eors	r3, r2
   2dd06:	6023      	str	r3, [r4, #0]
}
   2dd08:	bd38      	pop	{r3, r4, r5, pc}

0002dd0a <gpio_pin_get>:
{
   2dd0a:	b510      	push	{r4, lr}
   2dd0c:	b082      	sub	sp, #8
   2dd0e:	460c      	mov	r4, r1
	ret = gpio_port_get(port, &value);
   2dd10:	a901      	add	r1, sp, #4
   2dd12:	f7ff ffee 	bl	2dcf2 <gpio_port_get>
	if (ret == 0) {
   2dd16:	b930      	cbnz	r0, 2dd26 <gpio_pin_get+0x1c>
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   2dd18:	2301      	movs	r3, #1
   2dd1a:	40a3      	lsls	r3, r4
   2dd1c:	9a01      	ldr	r2, [sp, #4]
   2dd1e:	4213      	tst	r3, r2
   2dd20:	bf14      	ite	ne
   2dd22:	2001      	movne	r0, #1
   2dd24:	2000      	moveq	r0, #0
}
   2dd26:	b002      	add	sp, #8
   2dd28:	bd10      	pop	{r4, pc}

0002dd2a <gpio_add_callback>:
 *
 * Note: enables to add as many callback as needed on the same port.
 */
static inline int gpio_add_callback(const struct device *port,
				    struct gpio_callback *callback)
{
   2dd2a:	b508      	push	{r3, lr}
	const struct gpio_driver_api *api =
   2dd2c:	6883      	ldr	r3, [r0, #8]
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   2dd2e:	69db      	ldr	r3, [r3, #28]
   2dd30:	b113      	cbz	r3, 2dd38 <gpio_add_callback+0xe>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   2dd32:	2201      	movs	r2, #1
   2dd34:	4798      	blx	r3
}
   2dd36:	bd08      	pop	{r3, pc}
		return -ENOTSUP;
   2dd38:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2dd3c:	e7fb      	b.n	2dd36 <gpio_add_callback+0xc>

0002dd3e <spi_transceive_dt>:
{
   2dd3e:	b510      	push	{r4, lr}
   2dd40:	468c      	mov	ip, r1
   2dd42:	4613      	mov	r3, r2
	return spi_transceive(spec->bus, &spec->config, tx_bufs, rx_bufs);
   2dd44:	4601      	mov	r1, r0
   2dd46:	f851 0b04 	ldr.w	r0, [r1], #4
	const struct spi_driver_api *api =
   2dd4a:	6882      	ldr	r2, [r0, #8]
	return api->transceive(dev, config, tx_bufs, rx_bufs);
   2dd4c:	6814      	ldr	r4, [r2, #0]
   2dd4e:	4662      	mov	r2, ip
   2dd50:	47a0      	blx	r4
}
   2dd52:	bd10      	pop	{r4, pc}

0002dd54 <spi_write_dt>:
{
   2dd54:	b510      	push	{r4, lr}
   2dd56:	460a      	mov	r2, r1
	return spi_write(spec->bus, &spec->config, tx_bufs);
   2dd58:	4601      	mov	r1, r0
   2dd5a:	f851 0b04 	ldr.w	r0, [r1], #4
	const struct spi_driver_api *api =
   2dd5e:	6883      	ldr	r3, [r0, #8]
	return api->transceive(dev, config, tx_bufs, rx_bufs);
   2dd60:	681c      	ldr	r4, [r3, #0]
   2dd62:	2300      	movs	r3, #0
   2dd64:	47a0      	blx	r4
}
   2dd66:	bd10      	pop	{r4, pc}

0002dd68 <can_utils_filter_match>:
 * @return true if the CAN filter matches the CAN frame, false otherwise
 */
static inline bool can_utils_filter_match(const struct can_frame *frame,
					  struct can_filter *filter)
{
	if (((frame->flags & CAN_FRAME_IDE) != 0) && ((filter->flags & CAN_FILTER_IDE) == 0)) {
   2dd68:	7943      	ldrb	r3, [r0, #5]
   2dd6a:	f013 0f01 	tst.w	r3, #1
   2dd6e:	d003      	beq.n	2dd78 <can_utils_filter_match+0x10>
   2dd70:	79ca      	ldrb	r2, [r1, #7]
   2dd72:	f012 0f20 	tst.w	r2, #32
   2dd76:	d016      	beq.n	2dda6 <can_utils_filter_match+0x3e>
		return false;
	}

	if (((frame->flags & CAN_FRAME_RTR) == 0) && (filter->flags & CAN_FILTER_DATA) == 0) {
   2dd78:	f013 0302 	ands.w	r3, r3, #2
   2dd7c:	d102      	bne.n	2dd84 <can_utils_filter_match+0x1c>
   2dd7e:	79ca      	ldrb	r2, [r1, #7]
   2dd80:	2a7f      	cmp	r2, #127	; 0x7f
   2dd82:	d912      	bls.n	2ddaa <can_utils_filter_match+0x42>
		return false;
	}

	if (((frame->flags & CAN_FRAME_RTR) != 0) && (filter->flags & CAN_FILTER_RTR) == 0) {
   2dd84:	b11b      	cbz	r3, 2dd8e <can_utils_filter_match+0x26>
   2dd86:	79cb      	ldrb	r3, [r1, #7]
   2dd88:	f013 0f40 	tst.w	r3, #64	; 0x40
   2dd8c:	d00f      	beq.n	2ddae <can_utils_filter_match+0x46>
		return false;
	}

	if ((frame->id ^ filter->id) & filter->mask) {
   2dd8e:	6803      	ldr	r3, [r0, #0]
   2dd90:	f3c3 031c 	ubfx	r3, r3, #0, #29
   2dd94:	680a      	ldr	r2, [r1, #0]
   2dd96:	f3c2 021c 	ubfx	r2, r2, #0, #29
   2dd9a:	4053      	eors	r3, r2
   2dd9c:	684a      	ldr	r2, [r1, #4]
   2dd9e:	421a      	tst	r2, r3
   2dda0:	d107      	bne.n	2ddb2 <can_utils_filter_match+0x4a>
		return false;
	}

	return true;
   2dda2:	2001      	movs	r0, #1
   2dda4:	4770      	bx	lr
		return false;
   2dda6:	2000      	movs	r0, #0
   2dda8:	4770      	bx	lr
		return false;
   2ddaa:	2000      	movs	r0, #0
   2ddac:	4770      	bx	lr
		return false;
   2ddae:	2000      	movs	r0, #0
   2ddb0:	4770      	bx	lr
		return false;
   2ddb2:	2000      	movs	r0, #0
}
   2ddb4:	4770      	bx	lr

0002ddb6 <mcp2515_cmd_soft_reset>:
{
   2ddb6:	b500      	push	{lr}
   2ddb8:	b087      	sub	sp, #28
	const struct mcp2515_config *dev_cfg = dev->config;
   2ddba:	6840      	ldr	r0, [r0, #4]
	uint8_t cmd_buf[] = { MCP2515_OPCODE_RESET };
   2ddbc:	23c0      	movs	r3, #192	; 0xc0
   2ddbe:	f88d 3014 	strb.w	r3, [sp, #20]
	const struct spi_buf tx_buf = {
   2ddc2:	ab05      	add	r3, sp, #20
   2ddc4:	9303      	str	r3, [sp, #12]
   2ddc6:	2301      	movs	r3, #1
   2ddc8:	9304      	str	r3, [sp, #16]
	const struct spi_buf_set tx = {
   2ddca:	aa03      	add	r2, sp, #12
   2ddcc:	9201      	str	r2, [sp, #4]
   2ddce:	9302      	str	r3, [sp, #8]
	return spi_write_dt(&dev_cfg->bus, &tx);
   2ddd0:	a901      	add	r1, sp, #4
   2ddd2:	f7ff ffbf 	bl	2dd54 <spi_write_dt>
}
   2ddd6:	b007      	add	sp, #28
   2ddd8:	f85d fb04 	ldr.w	pc, [sp], #4

0002dddc <mcp2515_cmd_bit_modify>:
{
   2dddc:	b500      	push	{lr}
   2ddde:	b087      	sub	sp, #28
	const struct mcp2515_config *dev_cfg = dev->config;
   2dde0:	6840      	ldr	r0, [r0, #4]
	uint8_t cmd_buf[] = { MCP2515_OPCODE_BIT_MODIFY, reg_addr, mask, data };
   2dde2:	f04f 0c05 	mov.w	ip, #5
   2dde6:	f88d c014 	strb.w	ip, [sp, #20]
   2ddea:	f88d 1015 	strb.w	r1, [sp, #21]
   2ddee:	f88d 2016 	strb.w	r2, [sp, #22]
   2ddf2:	f88d 3017 	strb.w	r3, [sp, #23]
	const struct spi_buf tx_buf = {
   2ddf6:	ab05      	add	r3, sp, #20
   2ddf8:	9303      	str	r3, [sp, #12]
   2ddfa:	2304      	movs	r3, #4
   2ddfc:	9304      	str	r3, [sp, #16]
	const struct spi_buf_set tx = {
   2ddfe:	ab03      	add	r3, sp, #12
   2de00:	9301      	str	r3, [sp, #4]
   2de02:	2301      	movs	r3, #1
   2de04:	9302      	str	r3, [sp, #8]
	return spi_write_dt(&dev_cfg->bus, &tx);
   2de06:	a901      	add	r1, sp, #4
   2de08:	f7ff ffa4 	bl	2dd54 <spi_write_dt>
}
   2de0c:	b007      	add	sp, #28
   2de0e:	f85d fb04 	ldr.w	pc, [sp], #4

0002de12 <mcp2515_cmd_write_reg>:
{
   2de12:	b510      	push	{r4, lr}
   2de14:	b088      	sub	sp, #32
	const struct mcp2515_config *dev_cfg = dev->config;
   2de16:	6840      	ldr	r0, [r0, #4]
	uint8_t cmd_buf[] = { MCP2515_OPCODE_WRITE, reg_addr };
   2de18:	2402      	movs	r4, #2
   2de1a:	f88d 401c 	strb.w	r4, [sp, #28]
   2de1e:	f88d 101d 	strb.w	r1, [sp, #29]
	struct spi_buf tx_buf[] = {
   2de22:	a907      	add	r1, sp, #28
   2de24:	9103      	str	r1, [sp, #12]
   2de26:	9404      	str	r4, [sp, #16]
   2de28:	9205      	str	r2, [sp, #20]
   2de2a:	9306      	str	r3, [sp, #24]
	const struct spi_buf_set tx = {
   2de2c:	ab03      	add	r3, sp, #12
   2de2e:	9301      	str	r3, [sp, #4]
   2de30:	9402      	str	r4, [sp, #8]
	return spi_write_dt(&dev_cfg->bus, &tx);
   2de32:	a901      	add	r1, sp, #4
   2de34:	f7ff ff8e 	bl	2dd54 <spi_write_dt>
}
   2de38:	b008      	add	sp, #32
   2de3a:	bd10      	pop	{r4, pc}

0002de3c <mcp2515_cmd_load_tx_buffer>:
{
   2de3c:	b500      	push	{lr}
   2de3e:	b089      	sub	sp, #36	; 0x24
	const struct mcp2515_config *dev_cfg = dev->config;
   2de40:	6840      	ldr	r0, [r0, #4]
	uint8_t cmd_buf[] = { MCP2515_OPCODE_LOAD_TX_BUFFER | abc };
   2de42:	f041 0140 	orr.w	r1, r1, #64	; 0x40
   2de46:	f88d 101c 	strb.w	r1, [sp, #28]
	struct spi_buf tx_buf[] = {
   2de4a:	a907      	add	r1, sp, #28
   2de4c:	9103      	str	r1, [sp, #12]
   2de4e:	2101      	movs	r1, #1
   2de50:	9104      	str	r1, [sp, #16]
   2de52:	9205      	str	r2, [sp, #20]
   2de54:	9306      	str	r3, [sp, #24]
	const struct spi_buf_set tx = {
   2de56:	ab03      	add	r3, sp, #12
   2de58:	9301      	str	r3, [sp, #4]
   2de5a:	2302      	movs	r3, #2
   2de5c:	9302      	str	r3, [sp, #8]
	return spi_write_dt(&dev_cfg->bus, &tx);
   2de5e:	a901      	add	r1, sp, #4
   2de60:	f7ff ff78 	bl	2dd54 <spi_write_dt>
}
   2de64:	b009      	add	sp, #36	; 0x24
   2de66:	f85d fb04 	ldr.w	pc, [sp], #4

0002de6a <mcp2515_cmd_rts>:
{
   2de6a:	b500      	push	{lr}
   2de6c:	b087      	sub	sp, #28
	const struct mcp2515_config *dev_cfg = dev->config;
   2de6e:	6840      	ldr	r0, [r0, #4]
	uint8_t cmd_buf[] = { MCP2515_OPCODE_RTS | nnn };
   2de70:	f061 017f 	orn	r1, r1, #127	; 0x7f
   2de74:	f88d 1014 	strb.w	r1, [sp, #20]
	struct spi_buf tx_buf[] = {
   2de78:	ab05      	add	r3, sp, #20
   2de7a:	9303      	str	r3, [sp, #12]
   2de7c:	2301      	movs	r3, #1
   2de7e:	9304      	str	r3, [sp, #16]
	const struct spi_buf_set tx = {
   2de80:	aa03      	add	r2, sp, #12
   2de82:	9201      	str	r2, [sp, #4]
   2de84:	9302      	str	r3, [sp, #8]
	return spi_write_dt(&dev_cfg->bus, &tx);
   2de86:	a901      	add	r1, sp, #4
   2de88:	f7ff ff64 	bl	2dd54 <spi_write_dt>
}
   2de8c:	b007      	add	sp, #28
   2de8e:	f85d fb04 	ldr.w	pc, [sp], #4

0002de92 <mcp2515_cmd_read_reg>:
{
   2de92:	b530      	push	{r4, r5, lr}
   2de94:	b08f      	sub	sp, #60	; 0x3c
	const struct mcp2515_config *dev_cfg = dev->config;
   2de96:	6840      	ldr	r0, [r0, #4]
	uint8_t cmd_buf[] = { MCP2515_OPCODE_READ, reg_addr };
   2de98:	2403      	movs	r4, #3
   2de9a:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
   2de9e:	f88d 1035 	strb.w	r1, [sp, #53]	; 0x35
	struct spi_buf tx_buf[] = {
   2dea2:	a90d      	add	r1, sp, #52	; 0x34
   2dea4:	9109      	str	r1, [sp, #36]	; 0x24
   2dea6:	2102      	movs	r1, #2
   2dea8:	910a      	str	r1, [sp, #40]	; 0x28
   2deaa:	2400      	movs	r4, #0
   2deac:	940b      	str	r4, [sp, #44]	; 0x2c
   2deae:	930c      	str	r3, [sp, #48]	; 0x30
	const struct spi_buf_set tx = {
   2deb0:	ad09      	add	r5, sp, #36	; 0x24
   2deb2:	9507      	str	r5, [sp, #28]
   2deb4:	9108      	str	r1, [sp, #32]
	struct spi_buf rx_buf[] = {
   2deb6:	9403      	str	r4, [sp, #12]
   2deb8:	9104      	str	r1, [sp, #16]
   2deba:	9205      	str	r2, [sp, #20]
   2debc:	9306      	str	r3, [sp, #24]
	const struct spi_buf_set rx = {
   2debe:	ab03      	add	r3, sp, #12
   2dec0:	9301      	str	r3, [sp, #4]
   2dec2:	9102      	str	r1, [sp, #8]
	return spi_transceive_dt(&dev_cfg->bus, &tx, &rx);
   2dec4:	aa01      	add	r2, sp, #4
   2dec6:	a907      	add	r1, sp, #28
   2dec8:	f7ff ff39 	bl	2dd3e <spi_transceive_dt>
}
   2decc:	b00f      	add	sp, #60	; 0x3c
   2dece:	bd30      	pop	{r4, r5, pc}

0002ded0 <mcp2515_cmd_read_rx_buffer>:
{
   2ded0:	b530      	push	{r4, r5, lr}
   2ded2:	b08f      	sub	sp, #60	; 0x3c
	const struct mcp2515_config *dev_cfg = dev->config;
   2ded4:	6840      	ldr	r0, [r0, #4]
	uint8_t cmd_buf[] = { MCP2515_OPCODE_READ_RX_BUFFER | (nm << 1) };
   2ded6:	0049      	lsls	r1, r1, #1
   2ded8:	f061 016f 	orn	r1, r1, #111	; 0x6f
   2dedc:	f88d 1034 	strb.w	r1, [sp, #52]	; 0x34
	struct spi_buf tx_buf[] = {
   2dee0:	a90d      	add	r1, sp, #52	; 0x34
   2dee2:	9109      	str	r1, [sp, #36]	; 0x24
   2dee4:	2401      	movs	r4, #1
   2dee6:	940a      	str	r4, [sp, #40]	; 0x28
   2dee8:	2500      	movs	r5, #0
   2deea:	950b      	str	r5, [sp, #44]	; 0x2c
   2deec:	930c      	str	r3, [sp, #48]	; 0x30
	const struct spi_buf_set tx = {
   2deee:	a909      	add	r1, sp, #36	; 0x24
   2def0:	9107      	str	r1, [sp, #28]
   2def2:	2102      	movs	r1, #2
   2def4:	9108      	str	r1, [sp, #32]
	struct spi_buf rx_buf[] = {
   2def6:	9503      	str	r5, [sp, #12]
   2def8:	9404      	str	r4, [sp, #16]
   2defa:	9205      	str	r2, [sp, #20]
   2defc:	9306      	str	r3, [sp, #24]
	const struct spi_buf_set rx = {
   2defe:	ab03      	add	r3, sp, #12
   2df00:	9301      	str	r3, [sp, #4]
   2df02:	9102      	str	r1, [sp, #8]
	return spi_transceive_dt(&dev_cfg->bus, &tx, &rx);
   2df04:	aa01      	add	r2, sp, #4
   2df06:	a907      	add	r1, sp, #28
   2df08:	f7ff ff19 	bl	2dd3e <spi_transceive_dt>
}
   2df0c:	b00f      	add	sp, #60	; 0x3c
   2df0e:	bd30      	pop	{r4, r5, pc}

0002df10 <mcp2515_convert_canframe_to_mcp2515frame>:
	if ((source->flags & CAN_FRAME_IDE) != 0) {
   2df10:	7943      	ldrb	r3, [r0, #5]
   2df12:	f013 0f01 	tst.w	r3, #1
   2df16:	d01f      	beq.n	2df58 <mcp2515_convert_canframe_to_mcp2515frame+0x48>
		target[MCP2515_FRAME_OFFSET_SIDH] = source->id >> 21;
   2df18:	6803      	ldr	r3, [r0, #0]
   2df1a:	f3c3 5347 	ubfx	r3, r3, #21, #8
   2df1e:	700b      	strb	r3, [r1, #0]
			(((source->id >> 18) & 0x07) << 5) | (BIT(3)) |
   2df20:	6802      	ldr	r2, [r0, #0]
   2df22:	f3c2 438a 	ubfx	r3, r2, #18, #11
   2df26:	015b      	lsls	r3, r3, #5
   2df28:	b2db      	uxtb	r3, r3
			((source->id >> 16) & 0x03);
   2df2a:	f3c2 4201 	ubfx	r2, r2, #16, #2
			(((source->id >> 18) & 0x07) << 5) | (BIT(3)) |
   2df2e:	4313      	orrs	r3, r2
   2df30:	f043 0308 	orr.w	r3, r3, #8
		target[MCP2515_FRAME_OFFSET_SIDL] =
   2df34:	704b      	strb	r3, [r1, #1]
		target[MCP2515_FRAME_OFFSET_EID8] = source->id >> 8;
   2df36:	6803      	ldr	r3, [r0, #0]
   2df38:	f3c3 2314 	ubfx	r3, r3, #8, #21
   2df3c:	708b      	strb	r3, [r1, #2]
		target[MCP2515_FRAME_OFFSET_EID0] = source->id;
   2df3e:	6803      	ldr	r3, [r0, #0]
   2df40:	70cb      	strb	r3, [r1, #3]
	rtr = (source->flags & CAN_FRAME_RTR) != 0 ? BIT(6) : 0;
   2df42:	7943      	ldrb	r3, [r0, #5]
   2df44:	015b      	lsls	r3, r3, #5
   2df46:	f003 0340 	and.w	r3, r3, #64	; 0x40
	dlc = (source->dlc) & 0x0F;
   2df4a:	7902      	ldrb	r2, [r0, #4]
   2df4c:	f002 020f 	and.w	r2, r2, #15
	target[MCP2515_FRAME_OFFSET_DLC] = rtr | dlc;
   2df50:	4313      	orrs	r3, r2
   2df52:	710b      	strb	r3, [r1, #4]
	uint8_t data_idx = 0U;
   2df54:	2300      	movs	r3, #0
	for (; data_idx < CAN_MAX_DLC; data_idx++) {
   2df56:	e010      	b.n	2df7a <mcp2515_convert_canframe_to_mcp2515frame+0x6a>
		target[MCP2515_FRAME_OFFSET_SIDH] = source->id >> 3;
   2df58:	6803      	ldr	r3, [r0, #0]
   2df5a:	f3c3 03d9 	ubfx	r3, r3, #3, #26
   2df5e:	700b      	strb	r3, [r1, #0]
			(source->id & 0x07) << 5;
   2df60:	6803      	ldr	r3, [r0, #0]
   2df62:	015b      	lsls	r3, r3, #5
		target[MCP2515_FRAME_OFFSET_SIDL] =
   2df64:	704b      	strb	r3, [r1, #1]
   2df66:	e7ec      	b.n	2df42 <mcp2515_convert_canframe_to_mcp2515frame+0x32>
		target[MCP2515_FRAME_OFFSET_D0 + data_idx] =
   2df68:	1d5a      	adds	r2, r3, #5
			source->data[data_idx];
   2df6a:	eb00 0c03 	add.w	ip, r0, r3
   2df6e:	f89c c008 	ldrb.w	ip, [ip, #8]
		target[MCP2515_FRAME_OFFSET_D0 + data_idx] =
   2df72:	f801 c002 	strb.w	ip, [r1, r2]
	for (; data_idx < CAN_MAX_DLC; data_idx++) {
   2df76:	3301      	adds	r3, #1
   2df78:	b2db      	uxtb	r3, r3
   2df7a:	2b07      	cmp	r3, #7
   2df7c:	d9f4      	bls.n	2df68 <mcp2515_convert_canframe_to_mcp2515frame+0x58>
}
   2df7e:	4770      	bx	lr

0002df80 <mcp2515_get_core_clock>:
	const struct mcp2515_config *dev_cfg = dev->config;
   2df80:	6843      	ldr	r3, [r0, #4]
	*rate = dev_cfg->osc_freq / 2;
   2df82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2df84:	085b      	lsrs	r3, r3, #1
   2df86:	600b      	str	r3, [r1, #0]
}
   2df88:	2000      	movs	r0, #0
   2df8a:	4770      	bx	lr

0002df8c <mcp2515_get_max_filters>:
}
   2df8c:	2005      	movs	r0, #5
   2df8e:	4770      	bx	lr

0002df90 <mcp2515_get_max_bitrate>:
	const struct mcp2515_config *dev_cfg = dev->config;
   2df90:	6843      	ldr	r3, [r0, #4]
	*max_bitrate = dev_cfg->max_bitrate;
   2df92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   2df94:	600b      	str	r3, [r1, #0]
}
   2df96:	2000      	movs	r0, #0
   2df98:	4770      	bx	lr

0002df9a <mcp2515_get_capabilities>:
	*cap = CAN_MODE_NORMAL | CAN_MODE_LISTENONLY | CAN_MODE_LOOPBACK;
   2df9a:	2303      	movs	r3, #3
   2df9c:	600b      	str	r3, [r1, #0]
}
   2df9e:	2000      	movs	r0, #0
   2dfa0:	4770      	bx	lr

0002dfa2 <mcp2515_set_state_change_callback>:
	struct mcp2515_data *dev_data = dev->data;
   2dfa2:	6903      	ldr	r3, [r0, #16]
	dev_data->state_change_cb = cb;
   2dfa4:	f8c3 115c 	str.w	r1, [r3, #348]	; 0x15c
	dev_data->state_change_cb_data = user_data;
   2dfa8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
}
   2dfac:	4770      	bx	lr

0002dfae <mcp2515_remove_rx_filter>:
{
   2dfae:	b570      	push	{r4, r5, r6, lr}
   2dfb0:	460d      	mov	r5, r1
	struct mcp2515_data *dev_data = dev->data;
   2dfb2:	6904      	ldr	r4, [r0, #16]
	k_mutex_lock(&dev_data->mutex, K_FOREVER);
   2dfb4:	f504 76b2 	add.w	r6, r4, #356	; 0x164
	return z_impl_k_mutex_lock(mutex, timeout);
   2dfb8:	f04f 32ff 	mov.w	r2, #4294967295
   2dfbc:	f04f 33ff 	mov.w	r3, #4294967295
   2dfc0:	4630      	mov	r0, r6
   2dfc2:	f7f8 f9f7 	bl	263b4 <z_impl_k_mutex_lock>
	dev_data->filter_usage &= ~BIT(filter_id);
   2dfc6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   2dfca:	2201      	movs	r2, #1
   2dfcc:	fa02 f105 	lsl.w	r1, r2, r5
   2dfd0:	ea23 0301 	bic.w	r3, r3, r1
   2dfd4:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
	return z_impl_k_mutex_unlock(mutex);
   2dfd8:	4630      	mov	r0, r6
   2dfda:	f7f8 fa6f 	bl	264bc <z_impl_k_mutex_unlock>
}
   2dfde:	bd70      	pop	{r4, r5, r6, pc}

0002dfe0 <mcp2515_add_rx_filter>:
{
   2dfe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2dfe4:	4688      	mov	r8, r1
   2dfe6:	4617      	mov	r7, r2
   2dfe8:	461e      	mov	r6, r3
	struct mcp2515_data *dev_data = dev->data;
   2dfea:	6905      	ldr	r5, [r0, #16]
	k_mutex_lock(&dev_data->mutex, K_FOREVER);
   2dfec:	f505 79b2 	add.w	r9, r5, #356	; 0x164
	return z_impl_k_mutex_lock(mutex, timeout);
   2dff0:	f04f 32ff 	mov.w	r2, #4294967295
   2dff4:	f04f 33ff 	mov.w	r3, #4294967295
   2dff8:	4648      	mov	r0, r9
   2dffa:	f7f8 f9db 	bl	263b4 <z_impl_k_mutex_lock>
	int filter_id = 0;
   2dffe:	2400      	movs	r4, #0
	while ((BIT(filter_id) & dev_data->filter_usage)
   2e000:	e000      	b.n	2e004 <mcp2515_add_rx_filter+0x24>
		filter_id++;
   2e002:	3401      	adds	r4, #1
	while ((BIT(filter_id) & dev_data->filter_usage)
   2e004:	f8d5 0108 	ldr.w	r0, [r5, #264]	; 0x108
   2e008:	fa20 f304 	lsr.w	r3, r0, r4
	       && (filter_id < CONFIG_CAN_MAX_FILTER)) {
   2e00c:	f013 0f01 	tst.w	r3, #1
   2e010:	d001      	beq.n	2e016 <mcp2515_add_rx_filter+0x36>
   2e012:	2c04      	cmp	r4, #4
   2e014:	ddf5      	ble.n	2e002 <mcp2515_add_rx_filter+0x22>
	if (filter_id < CONFIG_CAN_MAX_FILTER) {
   2e016:	2c04      	cmp	r4, #4
   2e018:	dc1d      	bgt.n	2e056 <mcp2515_add_rx_filter+0x76>
		dev_data->filter_usage |= BIT(filter_id);
   2e01a:	2301      	movs	r3, #1
   2e01c:	40a3      	lsls	r3, r4
   2e01e:	4318      	orrs	r0, r3
   2e020:	f8c5 0108 	str.w	r0, [r5, #264]	; 0x108
		dev_data->filter[filter_id] = *filter;
   2e024:	f104 0326 	add.w	r3, r4, #38	; 0x26
   2e028:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   2e02c:	3304      	adds	r3, #4
   2e02e:	e896 0003 	ldmia.w	r6, {r0, r1}
   2e032:	e883 0003 	stmia.w	r3, {r0, r1}
		dev_data->rx_cb[filter_id] = rx_cb;
   2e036:	f104 0342 	add.w	r3, r4, #66	; 0x42
   2e03a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   2e03e:	f8c3 8004 	str.w	r8, [r3, #4]
		dev_data->cb_arg[filter_id] = cb_arg;
   2e042:	f104 0348 	add.w	r3, r4, #72	; 0x48
   2e046:	f845 7023 	str.w	r7, [r5, r3, lsl #2]
	return z_impl_k_mutex_unlock(mutex);
   2e04a:	4648      	mov	r0, r9
   2e04c:	f7f8 fa36 	bl	264bc <z_impl_k_mutex_unlock>
}
   2e050:	4620      	mov	r0, r4
   2e052:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		filter_id = -ENOSPC;
   2e056:	f06f 041b 	mvn.w	r4, #27
   2e05a:	e7f6      	b.n	2e04a <mcp2515_add_rx_filter+0x6a>

0002e05c <mcp2515_rx_filter>:
{
   2e05c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2e060:	b084      	sub	sp, #16
   2e062:	4680      	mov	r8, r0
   2e064:	460d      	mov	r5, r1
	struct mcp2515_data *dev_data = dev->data;
   2e066:	6906      	ldr	r6, [r0, #16]
	k_mutex_lock(&dev_data->mutex, K_FOREVER);
   2e068:	f506 79b2 	add.w	r9, r6, #356	; 0x164
	return z_impl_k_mutex_lock(mutex, timeout);
   2e06c:	f04f 32ff 	mov.w	r2, #4294967295
   2e070:	f04f 33ff 	mov.w	r3, #4294967295
   2e074:	4648      	mov	r0, r9
   2e076:	f7f8 f99d 	bl	263b4 <z_impl_k_mutex_lock>
	uint8_t filter_id = 0U;
   2e07a:	2400      	movs	r4, #0
	for (; filter_id < CONFIG_CAN_MAX_FILTER; filter_id++) {
   2e07c:	e001      	b.n	2e082 <mcp2515_rx_filter+0x26>
   2e07e:	3401      	adds	r4, #1
   2e080:	b2e4      	uxtb	r4, r4
   2e082:	2c04      	cmp	r4, #4
   2e084:	d822      	bhi.n	2e0cc <mcp2515_rx_filter+0x70>
		if (!(BIT(filter_id) & dev_data->filter_usage)) {
   2e086:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
   2e08a:	4627      	mov	r7, r4
   2e08c:	40e3      	lsrs	r3, r4
   2e08e:	f013 0f01 	tst.w	r3, #1
   2e092:	d0f4      	beq.n	2e07e <mcp2515_rx_filter+0x22>
		if (!can_utils_filter_match(frame,
   2e094:	f104 0126 	add.w	r1, r4, #38	; 0x26
   2e098:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
   2e09c:	3104      	adds	r1, #4
   2e09e:	4628      	mov	r0, r5
   2e0a0:	f7ff fe62 	bl	2dd68 <can_utils_filter_match>
   2e0a4:	2800      	cmp	r0, #0
   2e0a6:	d0ea      	beq.n	2e07e <mcp2515_rx_filter+0x22>
		callback = dev_data->rx_cb[filter_id];
   2e0a8:	f104 0342 	add.w	r3, r4, #66	; 0x42
   2e0ac:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   2e0b0:	f8d3 a004 	ldr.w	sl, [r3, #4]
		tmp_frame = *frame;
   2e0b4:	46ec      	mov	ip, sp
   2e0b6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   2e0ba:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		callback(dev, &tmp_frame, dev_data->cb_arg[filter_id]);
   2e0be:	3748      	adds	r7, #72	; 0x48
   2e0c0:	f856 2027 	ldr.w	r2, [r6, r7, lsl #2]
   2e0c4:	4661      	mov	r1, ip
   2e0c6:	4640      	mov	r0, r8
   2e0c8:	47d0      	blx	sl
   2e0ca:	e7d8      	b.n	2e07e <mcp2515_rx_filter+0x22>
	return z_impl_k_mutex_unlock(mutex);
   2e0cc:	4648      	mov	r0, r9
   2e0ce:	f7f8 f9f5 	bl	264bc <z_impl_k_mutex_unlock>
}
   2e0d2:	b004      	add	sp, #16
   2e0d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002e0d8 <mcp2515_tx_done>:
{
   2e0d8:	b570      	push	{r4, r5, r6, lr}
   2e0da:	460d      	mov	r5, r1
	struct mcp2515_data *dev_data = dev->data;
   2e0dc:	6904      	ldr	r4, [r0, #16]
	can_tx_callback_t callback = dev_data->tx_cb[tx_idx].cb;
   2e0de:	f101 031f 	add.w	r3, r1, #31
   2e0e2:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
   2e0e6:	685b      	ldr	r3, [r3, #4]
	if (callback != NULL) {
   2e0e8:	b303      	cbz	r3, 2e12c <mcp2515_tx_done+0x54>
   2e0ea:	4611      	mov	r1, r2
		callback(dev, status, dev_data->tx_cb[tx_idx].cb_arg);
   2e0ec:	f105 061f 	add.w	r6, r5, #31
   2e0f0:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
   2e0f4:	68b2      	ldr	r2, [r6, #8]
   2e0f6:	4798      	blx	r3
		dev_data->tx_cb[tx_idx].cb = NULL;
   2e0f8:	2300      	movs	r3, #0
   2e0fa:	6073      	str	r3, [r6, #4]
		k_mutex_lock(&dev_data->mutex, K_FOREVER);
   2e0fc:	f504 76b2 	add.w	r6, r4, #356	; 0x164
	return z_impl_k_mutex_lock(mutex, timeout);
   2e100:	f04f 32ff 	mov.w	r2, #4294967295
   2e104:	f04f 33ff 	mov.w	r3, #4294967295
   2e108:	4630      	mov	r0, r6
   2e10a:	f7f8 f953 	bl	263b4 <z_impl_k_mutex_lock>
		dev_data->tx_busy_map &= ~BIT(tx_idx);
   2e10e:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   2e112:	2201      	movs	r2, #1
   2e114:	40aa      	lsls	r2, r5
   2e116:	ea23 0302 	bic.w	r3, r3, r2
   2e11a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
	return z_impl_k_mutex_unlock(mutex);
   2e11e:	4630      	mov	r0, r6
   2e120:	f7f8 f9cc 	bl	264bc <z_impl_k_mutex_unlock>
		k_sem_give(&dev_data->tx_sem);
   2e124:	f104 00e4 	add.w	r0, r4, #228	; 0xe4
	z_impl_k_sem_give(sem);
   2e128:	f7f8 fa44 	bl	265b4 <z_impl_k_sem_give>
}
   2e12c:	bd70      	pop	{r4, r5, r6, pc}

0002e12e <mcp2515_int_gpio_callback>:
{
   2e12e:	b508      	push	{r3, lr}
	k_sem_give(&dev_data->int_sem);
   2e130:	f101 00cc 	add.w	r0, r1, #204	; 0xcc
   2e134:	f7f8 fa3e 	bl	265b4 <z_impl_k_sem_give>
}
   2e138:	bd08      	pop	{r3, pc}

0002e13a <mcp2515_convert_mcp2515frame_to_canframe>:
{
   2e13a:	b538      	push	{r3, r4, r5, lr}
   2e13c:	4605      	mov	r5, r0
   2e13e:	460c      	mov	r4, r1
	memset(target, 0, sizeof(*target));
   2e140:	2210      	movs	r2, #16
   2e142:	2100      	movs	r1, #0
   2e144:	4620      	mov	r0, r4
   2e146:	f7fb fd63 	bl	29c10 <memset>
	if (source[MCP2515_FRAME_OFFSET_SIDL] & BIT(3)) {
   2e14a:	786b      	ldrb	r3, [r5, #1]
   2e14c:	f013 0f08 	tst.w	r3, #8
   2e150:	d024      	beq.n	2e19c <mcp2515_convert_mcp2515frame_to_canframe+0x62>
		target->flags |= CAN_FRAME_IDE;
   2e152:	7963      	ldrb	r3, [r4, #5]
   2e154:	f043 0301 	orr.w	r3, r3, #1
   2e158:	7163      	strb	r3, [r4, #5]
			(source[MCP2515_FRAME_OFFSET_SIDH] << 21) |
   2e15a:	7829      	ldrb	r1, [r5, #0]
			((source[MCP2515_FRAME_OFFSET_SIDL] >> 5) << 18) |
   2e15c:	786a      	ldrb	r2, [r5, #1]
   2e15e:	0953      	lsrs	r3, r2, #5
   2e160:	049b      	lsls	r3, r3, #18
			(source[MCP2515_FRAME_OFFSET_SIDH] << 21) |
   2e162:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
			((source[MCP2515_FRAME_OFFSET_SIDL] & 0x03) << 16) |
   2e166:	0412      	lsls	r2, r2, #16
   2e168:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
			((source[MCP2515_FRAME_OFFSET_SIDL] >> 5) << 18) |
   2e16c:	4313      	orrs	r3, r2
			(source[MCP2515_FRAME_OFFSET_EID8] << 8) |
   2e16e:	78aa      	ldrb	r2, [r5, #2]
			((source[MCP2515_FRAME_OFFSET_SIDL] & 0x03) << 16) |
   2e170:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			source[MCP2515_FRAME_OFFSET_EID0];
   2e174:	78ea      	ldrb	r2, [r5, #3]
			(source[MCP2515_FRAME_OFFSET_EID8] << 8) |
   2e176:	4313      	orrs	r3, r2
		target->id =
   2e178:	6822      	ldr	r2, [r4, #0]
   2e17a:	f363 021c 	bfi	r2, r3, #0, #29
   2e17e:	6022      	str	r2, [r4, #0]
	target->dlc = source[MCP2515_FRAME_OFFSET_DLC] & 0x0F;
   2e180:	792b      	ldrb	r3, [r5, #4]
   2e182:	f003 030f 	and.w	r3, r3, #15
   2e186:	7123      	strb	r3, [r4, #4]
	if ((source[MCP2515_FRAME_OFFSET_DLC] & BIT(6)) != 0) {
   2e188:	792b      	ldrb	r3, [r5, #4]
   2e18a:	f013 0f40 	tst.w	r3, #64	; 0x40
   2e18e:	d003      	beq.n	2e198 <mcp2515_convert_mcp2515frame_to_canframe+0x5e>
		target->flags |= CAN_FRAME_RTR;
   2e190:	7963      	ldrb	r3, [r4, #5]
   2e192:	f043 0302 	orr.w	r3, r3, #2
   2e196:	7163      	strb	r3, [r4, #5]
{
   2e198:	2300      	movs	r3, #0
   2e19a:	e00e      	b.n	2e1ba <mcp2515_convert_mcp2515frame_to_canframe+0x80>
		target->id = (source[MCP2515_FRAME_OFFSET_SIDH] << 3) |
   2e19c:	782a      	ldrb	r2, [r5, #0]
				 (source[MCP2515_FRAME_OFFSET_SIDL] >> 5);
   2e19e:	095b      	lsrs	r3, r3, #5
		target->id = (source[MCP2515_FRAME_OFFSET_SIDH] << 3) |
   2e1a0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   2e1a4:	6822      	ldr	r2, [r4, #0]
   2e1a6:	f363 021c 	bfi	r2, r3, #0, #29
   2e1aa:	6022      	str	r2, [r4, #0]
   2e1ac:	e7e8      	b.n	2e180 <mcp2515_convert_mcp2515frame_to_canframe+0x46>
		target->data[data_idx] = source[MCP2515_FRAME_OFFSET_D0 +
   2e1ae:	1d5a      	adds	r2, r3, #5
   2e1b0:	5ca9      	ldrb	r1, [r5, r2]
   2e1b2:	18e2      	adds	r2, r4, r3
   2e1b4:	7211      	strb	r1, [r2, #8]
	for (; data_idx < CAN_MAX_DLC; data_idx++) {
   2e1b6:	3301      	adds	r3, #1
   2e1b8:	b2db      	uxtb	r3, r3
   2e1ba:	2b07      	cmp	r3, #7
   2e1bc:	d9f7      	bls.n	2e1ae <mcp2515_convert_mcp2515frame_to_canframe+0x74>
}
   2e1be:	bd38      	pop	{r3, r4, r5, pc}

0002e1c0 <mcp2515_rx>:
{
   2e1c0:	b510      	push	{r4, lr}
   2e1c2:	b088      	sub	sp, #32
   2e1c4:	4604      	mov	r4, r0
	nm = 2 * rx_idx;
   2e1c6:	0049      	lsls	r1, r1, #1
	mcp2515_cmd_read_rx_buffer(dev, nm, rx_frame, sizeof(rx_frame));
   2e1c8:	230d      	movs	r3, #13
   2e1ca:	466a      	mov	r2, sp
   2e1cc:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
   2e1d0:	f7ff fe7e 	bl	2ded0 <mcp2515_cmd_read_rx_buffer>
	mcp2515_convert_mcp2515frame_to_canframe(rx_frame, &frame);
   2e1d4:	a904      	add	r1, sp, #16
   2e1d6:	4668      	mov	r0, sp
   2e1d8:	f7ff ffaf 	bl	2e13a <mcp2515_convert_mcp2515frame_to_canframe>
	mcp2515_rx_filter(dev, &frame);
   2e1dc:	a904      	add	r1, sp, #16
   2e1de:	4620      	mov	r0, r4
   2e1e0:	f7ff ff3c 	bl	2e05c <mcp2515_rx_filter>
}
   2e1e4:	b008      	add	sp, #32
   2e1e6:	bd10      	pop	{r4, pc}

0002e1e8 <mcp2515_int_thread>:
{
   2e1e8:	b538      	push	{r3, r4, r5, lr}
   2e1ea:	4604      	mov	r4, r0
	struct mcp2515_data *dev_data = dev->data;
   2e1ec:	6905      	ldr	r5, [r0, #16]
		k_sem_take(&dev_data->int_sem, K_FOREVER);
   2e1ee:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
	return z_impl_k_sem_take(sem, timeout);
   2e1f2:	f04f 32ff 	mov.w	r2, #4294967295
   2e1f6:	f04f 33ff 	mov.w	r3, #4294967295
   2e1fa:	f7f8 fa03 	bl	26604 <z_impl_k_sem_take>
		mcp2515_handle_interrupts(dev);
   2e1fe:	4620      	mov	r0, r4
   2e200:	f7f3 fade 	bl	217c0 <mcp2515_handle_interrupts>
	while (1) {
   2e204:	e7f3      	b.n	2e1ee <mcp2515_int_thread+0x6>

0002e206 <spi_is_ready_dt>:
{
   2e206:	b510      	push	{r4, lr}
   2e208:	4604      	mov	r4, r0
	if (!device_is_ready(spec->bus)) {
   2e20a:	6800      	ldr	r0, [r0, #0]
   2e20c:	f001 ff4b 	bl	300a6 <z_device_is_ready>
   2e210:	b120      	cbz	r0, 2e21c <spi_is_ready_dt+0x16>
	if (spec->config.cs &&
   2e212:	68e3      	ldr	r3, [r4, #12]
   2e214:	b113      	cbz	r3, 2e21c <spi_is_ready_dt+0x16>
	    !device_is_ready(spec->config.cs->gpio.port)) {
   2e216:	6818      	ldr	r0, [r3, #0]
   2e218:	f001 ff45 	bl	300a6 <z_device_is_ready>
}
   2e21c:	bd10      	pop	{r4, pc}

0002e21e <rng_pool_put>:
	uint8_t first = rngp->first_read;
   2e21e:	7842      	ldrb	r2, [r0, #1]
	uint8_t last  = rngp->last;
   2e220:	7883      	ldrb	r3, [r0, #2]
	uint8_t mask  = rngp->mask;
   2e222:	f890 c003 	ldrb.w	ip, [r0, #3]
	if (((last - first) & mask) == mask) {
   2e226:	1a9a      	subs	r2, r3, r2
   2e228:	ea3c 0202 	bics.w	r2, ip, r2
   2e22c:	d007      	beq.n	2e23e <rng_pool_put+0x20>
	rngp->buffer[last] = byte;
   2e22e:	18c2      	adds	r2, r0, r3
   2e230:	7151      	strb	r1, [r2, #5]
	rngp->last = (last + 1) & mask;
   2e232:	3301      	adds	r3, #1
   2e234:	ea03 030c 	and.w	r3, r3, ip
   2e238:	7083      	strb	r3, [r0, #2]
	return 0;
   2e23a:	2000      	movs	r0, #0
   2e23c:	4770      	bx	lr
		return -ENOBUFS;
   2e23e:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   2e242:	4770      	bx	lr

0002e244 <rng_pool_init>:
	rngp->first_alloc = 0U;
   2e244:	2300      	movs	r3, #0
   2e246:	7003      	strb	r3, [r0, #0]
	rngp->first_read  = 0U;
   2e248:	7043      	strb	r3, [r0, #1]
	rngp->last	  = 0U;
   2e24a:	7083      	strb	r3, [r0, #2]
	rngp->mask	  = size - 1;
   2e24c:	3901      	subs	r1, #1
   2e24e:	70c1      	strb	r1, [r0, #3]
	rngp->threshold	  = threshold;
   2e250:	7102      	strb	r2, [r0, #4]
}
   2e252:	4770      	bx	lr

0002e254 <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   2e254:	2000      	movs	r0, #0
   2e256:	4770      	bx	lr

0002e258 <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   2e258:	b538      	push	{r3, r4, r5, lr}
   2e25a:	460c      	mov	r4, r1
   2e25c:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   2e25e:	f7ea fa79 	bl	18754 <bt_is_ready>
   2e262:	b120      	cbz	r0, 2e26e <entropy_bt_get_entropy+0x16>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   2e264:	4629      	mov	r1, r5
   2e266:	4620      	mov	r0, r4
   2e268:	f7e9 fd80 	bl	17d6c <bt_hci_le_rand>
}
   2e26c:	bd38      	pop	{r3, r4, r5, pc}
		return -EAGAIN;
   2e26e:	f06f 000a 	mvn.w	r0, #10
   2e272:	e7fb      	b.n	2e26c <entropy_bt_get_entropy+0x14>

0002e274 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   2e274:	4770      	bx	lr

0002e276 <counter_sub>:
	return (a - b) & COUNTER_MAX;
   2e276:	1a40      	subs	r0, r0, r1
}
   2e278:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   2e27c:	4770      	bx	lr

0002e27e <event_check>:
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   2e27e:	f100 0350 	add.w	r3, r0, #80	; 0x50
   2e282:	009b      	lsls	r3, r3, #2
   2e284:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2e286:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2e28a:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   2e28e:	6818      	ldr	r0, [r3, #0]
}
   2e290:	3800      	subs	r0, #0
   2e292:	bf18      	it	ne
   2e294:	2001      	movne	r0, #1
   2e296:	4770      	bx	lr

0002e298 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   2e298:	f100 0350 	add.w	r3, r0, #80	; 0x50
   2e29c:	009b      	lsls	r3, r3, #2
   2e29e:	b29b      	uxth	r3, r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   2e2a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2e2a4:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   2e2a8:	2200      	movs	r2, #0
   2e2aa:	601a      	str	r2, [r3, #0]
   2e2ac:	681b      	ldr	r3, [r3, #0]
}
   2e2ae:	4770      	bx	lr

0002e2b0 <absolute_time_to_cc>:
}
   2e2b0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   2e2b4:	4770      	bx	lr

0002e2b6 <full_int_lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   2e2b6:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   2e2ba:	b672      	cpsid	i
}
   2e2bc:	4770      	bx	lr

0002e2be <full_int_unlock>:
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   2e2be:	f380 8810 	msr	PRIMASK, r0
}
   2e2c2:	4770      	bx	lr

0002e2c4 <compare_set>:
{
   2e2c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e2c6:	b083      	sub	sp, #12
   2e2c8:	4604      	mov	r4, r0
   2e2ca:	4617      	mov	r7, r2
   2e2cc:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
   2e2ce:	f7f4 f8db 	bl	22488 <compare_int_lock>
   2e2d2:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
   2e2d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2e2d6:	9301      	str	r3, [sp, #4]
   2e2d8:	9b08      	ldr	r3, [sp, #32]
   2e2da:	9300      	str	r3, [sp, #0]
   2e2dc:	463a      	mov	r2, r7
   2e2de:	462b      	mov	r3, r5
   2e2e0:	4620      	mov	r0, r4
   2e2e2:	f7f4 f99f 	bl	22624 <compare_set_nolocks>
   2e2e6:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
   2e2e8:	4631      	mov	r1, r6
   2e2ea:	4620      	mov	r0, r4
   2e2ec:	f7f4 f922 	bl	22534 <compare_int_unlock>
}
   2e2f0:	4628      	mov	r0, r5
   2e2f2:	b003      	add	sp, #12
   2e2f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002e2f6 <sys_clock_cycle_get_32>:
{
   2e2f6:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   2e2f8:	f7f4 f974 	bl	225e4 <z_nrf_rtc_timer_read>
}
   2e2fc:	bd08      	pop	{r3, pc}

0002e2fe <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   2e2fe:	b500      	push	{lr}
	*state = &config->states[0];
   2e300:	6843      	ldr	r3, [r0, #4]
   2e302:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   2e304:	e001      	b.n	2e30a <pinctrl_lookup_state+0xc>
		if (id == (*state)->id) {
			return 0;
		}

		(*state)++;
   2e306:	3308      	adds	r3, #8
   2e308:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   2e30a:	6813      	ldr	r3, [r2, #0]
   2e30c:	f890 c008 	ldrb.w	ip, [r0, #8]
   2e310:	f8d0 e004 	ldr.w	lr, [r0, #4]
   2e314:	eb0e 0ccc 	add.w	ip, lr, ip, lsl #3
   2e318:	4563      	cmp	r3, ip
   2e31a:	d205      	bcs.n	2e328 <pinctrl_lookup_state+0x2a>
		if (id == (*state)->id) {
   2e31c:	f893 c005 	ldrb.w	ip, [r3, #5]
   2e320:	458c      	cmp	ip, r1
   2e322:	d1f0      	bne.n	2e306 <pinctrl_lookup_state+0x8>
			return 0;
   2e324:	2000      	movs	r0, #0
   2e326:	e001      	b.n	2e32c <pinctrl_lookup_state+0x2e>
	}

	return -ENOENT;
   2e328:	f06f 0001 	mvn.w	r0, #1
}
   2e32c:	f85d fb04 	ldr.w	pc, [sp], #4

0002e330 <event_packet_is_discardable>:
	switch (hdr->evt) {
   2e330:	7803      	ldrb	r3, [r0, #0]
   2e332:	2b3e      	cmp	r3, #62	; 0x3e
   2e334:	d003      	beq.n	2e33e <event_packet_is_discardable+0xe>
   2e336:	2bff      	cmp	r3, #255	; 0xff
   2e338:	d008      	beq.n	2e34c <event_packet_is_discardable+0x1c>
   2e33a:	2000      	movs	r0, #0
   2e33c:	4770      	bx	lr
		switch (me->subevent) {
   2e33e:	7883      	ldrb	r3, [r0, #2]
   2e340:	2b02      	cmp	r3, #2
   2e342:	d001      	beq.n	2e348 <event_packet_is_discardable+0x18>
			return false;
   2e344:	2000      	movs	r0, #0
   2e346:	4770      	bx	lr
			return true;
   2e348:	2001      	movs	r0, #1
   2e34a:	4770      	bx	lr
		uint8_t subevent = hci_buf[2];
   2e34c:	7883      	ldrb	r3, [r0, #2]
		switch (subevent) {
   2e34e:	2b80      	cmp	r3, #128	; 0x80
   2e350:	d001      	beq.n	2e356 <event_packet_is_discardable+0x26>
			return false;
   2e352:	2000      	movs	r0, #0
}
   2e354:	4770      	bx	lr
			return true;
   2e356:	2001      	movs	r0, #1
   2e358:	4770      	bx	lr

0002e35a <hci_driver_send>:
{
   2e35a:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   2e35c:	8a03      	ldrh	r3, [r0, #16]
   2e35e:	b183      	cbz	r3, 2e382 <hci_driver_send+0x28>
   2e360:	4604      	mov	r4, r0
   2e362:	7e03      	ldrb	r3, [r0, #24]
	switch (type) {
   2e364:	b14b      	cbz	r3, 2e37a <hci_driver_send+0x20>
   2e366:	2b02      	cmp	r3, #2
   2e368:	d10e      	bne.n	2e388 <hci_driver_send+0x2e>
		err = acl_handle(buf);
   2e36a:	f7f4 fceb 	bl	22d44 <acl_handle>
   2e36e:	4605      	mov	r5, r0
	if (!err) {
   2e370:	b965      	cbnz	r5, 2e38c <hci_driver_send+0x32>
		net_buf_unref(buf);
   2e372:	4620      	mov	r0, r4
   2e374:	f7fe f93d 	bl	2c5f2 <net_buf_unref>
   2e378:	e008      	b.n	2e38c <hci_driver_send+0x32>
		err = cmd_handle(buf);
   2e37a:	f7f4 fd01 	bl	22d80 <cmd_handle>
   2e37e:	4605      	mov	r5, r0
		break;
   2e380:	e7f6      	b.n	2e370 <hci_driver_send+0x16>
		return -EINVAL;
   2e382:	f06f 0515 	mvn.w	r5, #21
   2e386:	e001      	b.n	2e38c <hci_driver_send+0x32>
	switch (type) {
   2e388:	f06f 0515 	mvn.w	r5, #21
}
   2e38c:	4628      	mov	r0, r5
   2e38e:	bd38      	pop	{r3, r4, r5, pc}

0002e390 <hci_driver_close>:
{
   2e390:	b510      	push	{r4, lr}
		hci_ecdh_uninit();
   2e392:	f7f5 f993 	bl	236bc <hci_ecdh_uninit>
	err = MULTITHREADING_LOCK_ACQUIRE();
   2e396:	f04f 30ff 	mov.w	r0, #4294967295
   2e39a:	f04f 31ff 	mov.w	r1, #4294967295
   2e39e:	f7f4 faff 	bl	229a0 <multithreading_lock_acquire>
	if (err) {
   2e3a2:	4604      	mov	r4, r0
   2e3a4:	b108      	cbz	r0, 2e3aa <hci_driver_close+0x1a>
}
   2e3a6:	4620      	mov	r0, r4
   2e3a8:	bd10      	pop	{r4, pc}
	err = sdc_disable();
   2e3aa:	f7d2 fad7 	bl	95c <sdc_disable>
	if (err) {
   2e3ae:	4604      	mov	r4, r0
   2e3b0:	b910      	cbnz	r0, 2e3b8 <hci_driver_close+0x28>
	MULTITHREADING_LOCK_RELEASE();
   2e3b2:	f7f4 faff 	bl	229b4 <multithreading_lock_release>
	return err;
   2e3b6:	e7f6      	b.n	2e3a6 <hci_driver_close+0x16>
		MULTITHREADING_LOCK_RELEASE();
   2e3b8:	f7f4 fafc 	bl	229b4 <multithreading_lock_release>
		return err;
   2e3bc:	e7f3      	b.n	2e3a6 <hci_driver_close+0x16>

0002e3be <configure_supported_features>:
{
   2e3be:	b508      	push	{r3, lr}
			err = sdc_support_central();
   2e3c0:	f7d2 fb84 	bl	acc <sdc_support_central>
			if (err) {
   2e3c4:	b948      	cbnz	r0, 2e3da <configure_supported_features+0x1c>
			err = sdc_support_dle_central();
   2e3c6:	f7d2 fb93 	bl	af0 <sdc_support_dle_central>
			if (err) {
   2e3ca:	b948      	cbnz	r0, 2e3e0 <configure_supported_features+0x22>
		err = sdc_support_le_2m_phy();
   2e3cc:	f7d2 fba0 	bl	b10 <sdc_support_le_2m_phy>
		if (err) {
   2e3d0:	b948      	cbnz	r0, 2e3e6 <configure_supported_features+0x28>
			err = sdc_support_phy_update_central();
   2e3d2:	f7d2 fbad 	bl	b30 <sdc_support_phy_update_central>
			if (err) {
   2e3d6:	b948      	cbnz	r0, 2e3ec <configure_supported_features+0x2e>
}
   2e3d8:	bd08      	pop	{r3, pc}
				return -ENOTSUP;
   2e3da:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2e3de:	e7fb      	b.n	2e3d8 <configure_supported_features+0x1a>
				return -ENOTSUP;
   2e3e0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2e3e4:	e7f8      	b.n	2e3d8 <configure_supported_features+0x1a>
			return -ENOTSUP;
   2e3e6:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2e3ea:	e7f5      	b.n	2e3d8 <configure_supported_features+0x1a>
				return -ENOTSUP;
   2e3ec:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2e3f0:	e7f2      	b.n	2e3d8 <configure_supported_features+0x1a>

0002e3f2 <receive_work_handler>:
{
   2e3f2:	b508      	push	{r3, lr}
	hci_driver_receive_process();
   2e3f4:	f7f4 fe98 	bl	23128 <hci_driver_receive_process>
}
   2e3f8:	bd08      	pop	{r3, pc}

0002e3fa <encode_command_status>:
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   2e3fa:	230f      	movs	r3, #15
   2e3fc:	7003      	strb	r3, [r0, #0]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   2e3fe:	2304      	movs	r3, #4
   2e400:	7043      	strb	r3, [r0, #1]
	evt_data->status = status_code;
   2e402:	7082      	strb	r2, [r0, #2]
	evt_data->ncmd = 1;
   2e404:	2301      	movs	r3, #1
   2e406:	70c3      	strb	r3, [r0, #3]
	evt_data->opcode = hci_opcode;
   2e408:	8081      	strh	r1, [r0, #4]
}
   2e40a:	4770      	bx	lr

0002e40c <encode_command_complete_header>:
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   2e40c:	f04f 0c0e 	mov.w	ip, #14
   2e410:	f880 c000 	strb.w	ip, [r0]
	evt_hdr->len = param_length;
   2e414:	7042      	strb	r2, [r0, #1]
	evt_data->ncmd = 1;
   2e416:	2201      	movs	r2, #1
   2e418:	7082      	strb	r2, [r0, #2]
	evt_data->opcode = hci_opcode;
   2e41a:	f8a0 1003 	strh.w	r1, [r0, #3]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   2e41e:	7143      	strb	r3, [r0, #5]
}
   2e420:	4770      	bx	lr

0002e422 <le_read_supported_states>:
	*buf = states1;
   2e422:	2370      	movs	r3, #112	; 0x70
   2e424:	7003      	strb	r3, [r0, #0]
	*(buf + 4) = states2;
   2e426:	2340      	movs	r3, #64	; 0x40
   2e428:	7103      	strb	r3, [r0, #4]
}
   2e42a:	4770      	bx	lr

0002e42c <status_param_cmd_put>:
}
   2e42c:	2001      	movs	r0, #1
   2e42e:	4770      	bx	lr

0002e430 <link_control_cmd_put>:
{
   2e430:	b508      	push	{r3, lr}
	return ((uint16_t)src[1] << 8) | src[0];
   2e432:	7842      	ldrb	r2, [r0, #1]
   2e434:	f810 3b03 	ldrb.w	r3, [r0], #3
   2e438:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2e43c:	b21b      	sxth	r3, r3
	switch (opcode)	{
   2e43e:	f240 4206 	movw	r2, #1030	; 0x406
   2e442:	4293      	cmp	r3, r2
   2e444:	d005      	beq.n	2e452 <link_control_cmd_put+0x22>
   2e446:	f240 421d 	movw	r2, #1053	; 0x41d
   2e44a:	4293      	cmp	r3, r2
   2e44c:	d004      	beq.n	2e458 <link_control_cmd_put+0x28>
   2e44e:	2001      	movs	r0, #1
}
   2e450:	bd08      	pop	{r3, pc}
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   2e452:	f7de fefb 	bl	d24c <sdc_hci_cmd_lc_disconnect>
   2e456:	e7fb      	b.n	2e450 <link_control_cmd_put+0x20>
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   2e458:	f7de fefa 	bl	d250 <sdc_hci_cmd_lc_read_remote_version_information>
   2e45c:	e7f8      	b.n	2e450 <link_control_cmd_put+0x20>

0002e45e <controller_and_baseband_cmd_put>:
{
   2e45e:	b508      	push	{r3, lr}
   2e460:	4603      	mov	r3, r0
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   2e462:	3003      	adds	r0, #3
   2e464:	f893 c001 	ldrb.w	ip, [r3, #1]
   2e468:	781b      	ldrb	r3, [r3, #0]
   2e46a:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
   2e46e:	b21b      	sxth	r3, r3
	switch (opcode)	{
   2e470:	f640 4c63 	movw	ip, #3171	; 0xc63
   2e474:	4563      	cmp	r3, ip
   2e476:	d02c      	beq.n	2e4d2 <controller_and_baseband_cmd_put+0x74>
   2e478:	f101 0106 	add.w	r1, r1, #6
   2e47c:	dc16      	bgt.n	2e4ac <controller_and_baseband_cmd_put+0x4e>
   2e47e:	f640 4c03 	movw	ip, #3075	; 0xc03
   2e482:	4563      	cmp	r3, ip
   2e484:	d022      	beq.n	2e4cc <controller_and_baseband_cmd_put+0x6e>
   2e486:	f640 4c2d 	movw	ip, #3117	; 0xc2d
   2e48a:	4563      	cmp	r3, ip
   2e48c:	d105      	bne.n	2e49a <controller_and_baseband_cmd_put+0x3c>
		*param_length_out += sizeof(sdc_hci_cmd_cb_read_transmit_power_level_return_t);
   2e48e:	7813      	ldrb	r3, [r2, #0]
   2e490:	3303      	adds	r3, #3
   2e492:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   2e494:	f7de fda4 	bl	cfe0 <sdc_hci_cmd_cb_read_transmit_power_level>
   2e498:	e007      	b.n	2e4aa <controller_and_baseband_cmd_put+0x4c>
	switch (opcode)	{
   2e49a:	f640 4201 	movw	r2, #3073	; 0xc01
   2e49e:	4293      	cmp	r3, r2
   2e4a0:	d102      	bne.n	2e4a8 <controller_and_baseband_cmd_put+0x4a>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   2e4a2:	f7de fd9f 	bl	cfe4 <sdc_hci_cmd_cb_set_event_mask>
   2e4a6:	e000      	b.n	2e4aa <controller_and_baseband_cmd_put+0x4c>
	switch (opcode)	{
   2e4a8:	2001      	movs	r0, #1
}
   2e4aa:	bd08      	pop	{r3, pc}
	switch (opcode)	{
   2e4ac:	f640 4c7b 	movw	ip, #3195	; 0xc7b
   2e4b0:	4563      	cmp	r3, ip
   2e4b2:	d011      	beq.n	2e4d8 <controller_and_baseband_cmd_put+0x7a>
   2e4b4:	f640 4c7c 	movw	ip, #3196	; 0xc7c
   2e4b8:	4563      	cmp	r3, ip
   2e4ba:	d105      	bne.n	2e4c8 <controller_and_baseband_cmd_put+0x6a>
		*param_length_out +=
   2e4bc:	7813      	ldrb	r3, [r2, #0]
   2e4be:	3302      	adds	r3, #2
   2e4c0:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   2e4c2:	f7de fd99 	bl	cff8 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
   2e4c6:	e7f0      	b.n	2e4aa <controller_and_baseband_cmd_put+0x4c>
	switch (opcode)	{
   2e4c8:	2001      	movs	r0, #1
   2e4ca:	e7ee      	b.n	2e4aa <controller_and_baseband_cmd_put+0x4c>
		return sdc_hci_cmd_cb_reset();
   2e4cc:	f7d2 fc86 	bl	ddc <sdc_hci_cmd_cb_reset>
   2e4d0:	e7eb      	b.n	2e4aa <controller_and_baseband_cmd_put+0x4c>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   2e4d2:	f7de fd8c 	bl	cfee <sdc_hci_cmd_cb_set_event_mask_page_2>
   2e4d6:	e7e8      	b.n	2e4aa <controller_and_baseband_cmd_put+0x4c>
		*param_length_out +=
   2e4d8:	7813      	ldrb	r3, [r2, #0]
   2e4da:	3304      	adds	r3, #4
   2e4dc:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   2e4de:	f7de fd7d 	bl	cfdc <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
   2e4e2:	e7e2      	b.n	2e4aa <controller_and_baseband_cmd_put+0x4c>

0002e4e4 <supported_commands>:
{
   2e4e4:	b510      	push	{r4, lr}
   2e4e6:	4604      	mov	r4, r0
	memset(cmds, 0, sizeof(*cmds));
   2e4e8:	2230      	movs	r2, #48	; 0x30
   2e4ea:	2100      	movs	r1, #0
   2e4ec:	f7fb fb90 	bl	29c10 <memset>
	cmds->hci_disconnect = 1;
   2e4f0:	7823      	ldrb	r3, [r4, #0]
   2e4f2:	f043 0320 	orr.w	r3, r3, #32
   2e4f6:	7023      	strb	r3, [r4, #0]
	cmds->hci_read_remote_version_information = 1;
   2e4f8:	78a3      	ldrb	r3, [r4, #2]
   2e4fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2e4fe:	70a3      	strb	r3, [r4, #2]
	cmds->hci_set_event_mask = 1;
   2e500:	7963      	ldrb	r3, [r4, #5]
   2e502:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2e506:	7163      	strb	r3, [r4, #5]
	cmds->hci_reset = 1;
   2e508:	b2db      	uxtb	r3, r3
   2e50a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2e50e:	7163      	strb	r3, [r4, #5]
	cmds->hci_read_transmit_power_level = 1;
   2e510:	7aa3      	ldrb	r3, [r4, #10]
   2e512:	f043 0304 	orr.w	r3, r3, #4
   2e516:	72a3      	strb	r3, [r4, #10]
	cmds->hci_read_local_version_information = 1;
   2e518:	7ba3      	ldrb	r3, [r4, #14]
   2e51a:	f043 0308 	orr.w	r3, r3, #8
   2e51e:	73a3      	strb	r3, [r4, #14]
	cmds->hci_read_local_supported_features = 1;
   2e520:	b2db      	uxtb	r3, r3
   2e522:	f043 0320 	orr.w	r3, r3, #32
   2e526:	73a3      	strb	r3, [r4, #14]
	cmds->hci_read_bd_addr = 1;
   2e528:	7be3      	ldrb	r3, [r4, #15]
   2e52a:	f043 0302 	orr.w	r3, r3, #2
   2e52e:	73e3      	strb	r3, [r4, #15]
	cmds->hci_set_event_mask_page_2 = 1;
   2e530:	7da3      	ldrb	r3, [r4, #22]
   2e532:	f043 0304 	orr.w	r3, r3, #4
   2e536:	75a3      	strb	r3, [r4, #22]
	cmds->hci_le_set_event_mask = 1;
   2e538:	7e63      	ldrb	r3, [r4, #25]
   2e53a:	f043 0301 	orr.w	r3, r3, #1
   2e53e:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_read_buffer_size_v1 = 1;
   2e540:	b2db      	uxtb	r3, r3
   2e542:	f043 0302 	orr.w	r3, r3, #2
   2e546:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_read_local_supported_features = 1;
   2e548:	b2db      	uxtb	r3, r3
   2e54a:	f043 0304 	orr.w	r3, r3, #4
   2e54e:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_set_random_address = 1;
   2e550:	b2db      	uxtb	r3, r3
   2e552:	f043 0310 	orr.w	r3, r3, #16
   2e556:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_set_scan_parameters = 1;
   2e558:	7ea3      	ldrb	r3, [r4, #26]
   2e55a:	f043 0304 	orr.w	r3, r3, #4
   2e55e:	76a3      	strb	r3, [r4, #26]
	cmds->hci_le_set_scan_enable = 1;
   2e560:	b2db      	uxtb	r3, r3
   2e562:	f043 0308 	orr.w	r3, r3, #8
   2e566:	76a3      	strb	r3, [r4, #26]
	cmds->hci_le_create_connection = 1;
   2e568:	b2db      	uxtb	r3, r3
   2e56a:	f043 0310 	orr.w	r3, r3, #16
   2e56e:	76a3      	strb	r3, [r4, #26]
	cmds->hci_le_create_connection_cancel = 1;
   2e570:	b2db      	uxtb	r3, r3
   2e572:	f043 0320 	orr.w	r3, r3, #32
   2e576:	76a3      	strb	r3, [r4, #26]
	cmds->hci_le_read_filter_accept_list_size = 1;
   2e578:	b2db      	uxtb	r3, r3
   2e57a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2e57e:	76a3      	strb	r3, [r4, #26]
	cmds->hci_le_clear_filter_accept_list = 1;
   2e580:	b2db      	uxtb	r3, r3
   2e582:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2e586:	76a3      	strb	r3, [r4, #26]
	cmds->hci_le_add_device_to_filter_accept_list = 1;
   2e588:	7ee3      	ldrb	r3, [r4, #27]
   2e58a:	f043 0301 	orr.w	r3, r3, #1
   2e58e:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_remove_device_from_filter_accept_list = 1;
   2e590:	b2db      	uxtb	r3, r3
   2e592:	f043 0302 	orr.w	r3, r3, #2
   2e596:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_connection_update = 1;
   2e598:	b2db      	uxtb	r3, r3
   2e59a:	f043 0304 	orr.w	r3, r3, #4
   2e59e:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_set_host_channel_classification = 1;
   2e5a0:	b2db      	uxtb	r3, r3
   2e5a2:	f043 0308 	orr.w	r3, r3, #8
   2e5a6:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_read_channel_map = 1;
   2e5a8:	b2db      	uxtb	r3, r3
   2e5aa:	f043 0310 	orr.w	r3, r3, #16
   2e5ae:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_read_remote_features = 1;
   2e5b0:	b2db      	uxtb	r3, r3
   2e5b2:	f043 0320 	orr.w	r3, r3, #32
   2e5b6:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_encrypt = 1;
   2e5b8:	b2db      	uxtb	r3, r3
   2e5ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2e5be:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_rand = 1;
   2e5c0:	b2db      	uxtb	r3, r3
   2e5c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2e5c6:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_enable_encryption = 1;
   2e5c8:	7f23      	ldrb	r3, [r4, #28]
   2e5ca:	f043 0301 	orr.w	r3, r3, #1
   2e5ce:	7723      	strb	r3, [r4, #28]
	cmds->hci_le_read_supported_states = 1;
   2e5d0:	b2db      	uxtb	r3, r3
   2e5d2:	f043 0308 	orr.w	r3, r3, #8
   2e5d6:	7723      	strb	r3, [r4, #28]
	cmds->hci_le_receiver_test_v1 = 1;
   2e5d8:	b2db      	uxtb	r3, r3
   2e5da:	f043 0310 	orr.w	r3, r3, #16
   2e5de:	7723      	strb	r3, [r4, #28]
	cmds->hci_le_transmitter_test_v1 = 1;
   2e5e0:	b2db      	uxtb	r3, r3
   2e5e2:	f043 0320 	orr.w	r3, r3, #32
   2e5e6:	7723      	strb	r3, [r4, #28]
	cmds->hci_le_test_end = 1;
   2e5e8:	b2db      	uxtb	r3, r3
   2e5ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2e5ee:	7723      	strb	r3, [r4, #28]
	cmds->hci_read_authenticated_payload_timeout = 1;
   2e5f0:	f894 3020 	ldrb.w	r3, [r4, #32]
   2e5f4:	f043 0310 	orr.w	r3, r3, #16
   2e5f8:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_write_authenticated_payload_timeout = 1;
   2e5fc:	b2db      	uxtb	r3, r3
   2e5fe:	f043 0320 	orr.w	r3, r3, #32
   2e602:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_data_length = 1;
   2e606:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   2e60a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2e60e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_read_suggested_default_data_length = 1;
   2e612:	b2db      	uxtb	r3, r3
   2e614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2e618:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_write_suggested_default_data_length = 1;
   2e61c:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   2e620:	f043 0301 	orr.w	r3, r3, #1
   2e624:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_read_maximum_data_length = 1;
   2e628:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   2e62c:	f043 0308 	orr.w	r3, r3, #8
   2e630:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_le_read_phy = 1;
   2e634:	b2db      	uxtb	r3, r3
   2e636:	f043 0310 	orr.w	r3, r3, #16
   2e63a:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_le_set_default_phy = 1;
   2e63e:	b2db      	uxtb	r3, r3
   2e640:	f043 0320 	orr.w	r3, r3, #32
   2e644:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_le_set_phy = 1;
   2e648:	b2db      	uxtb	r3, r3
   2e64a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2e64e:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_le_receiver_test_v2 = 1;
   2e652:	b2db      	uxtb	r3, r3
   2e654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2e658:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_le_transmitter_test_v2 = 1;
   2e65c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   2e660:	f043 0301 	orr.w	r3, r3, #1
   2e664:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	cmds->hci_le_read_transmit_power = 1;
   2e668:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   2e66c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2e670:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	cmds->hci_le_read_local_p256_public_key = 1;
   2e674:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   2e678:	f043 0302 	orr.w	r3, r3, #2
   2e67c:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_generate_dhkey_v1 = 1;
   2e680:	b2db      	uxtb	r3, r3
   2e682:	f043 0304 	orr.w	r3, r3, #4
   2e686:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_generate_dhkey_v2 = 1;
   2e68a:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   2e68e:	f043 0304 	orr.w	r3, r3, #4
   2e692:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
}
   2e696:	bd10      	pop	{r4, pc}

0002e698 <supported_features>:
{
   2e698:	b510      	push	{r4, lr}
   2e69a:	4604      	mov	r4, r0
	memset(features, 0, sizeof(*features));
   2e69c:	2208      	movs	r2, #8
   2e69e:	2100      	movs	r1, #0
   2e6a0:	f7fb fab6 	bl	29c10 <memset>
	features->bdedr_not_supported = 1;
   2e6a4:	7923      	ldrb	r3, [r4, #4]
   2e6a6:	f043 0320 	orr.w	r3, r3, #32
   2e6aa:	7123      	strb	r3, [r4, #4]
	features->le_supported = 1;
   2e6ac:	b2db      	uxtb	r3, r3
   2e6ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2e6b2:	7123      	strb	r3, [r4, #4]
}
   2e6b4:	bd10      	pop	{r4, pc}

0002e6b6 <info_param_cmd_put>:
{
   2e6b6:	b508      	push	{r3, lr}
   2e6b8:	4603      	mov	r3, r0
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   2e6ba:	1d88      	adds	r0, r1, #6
   2e6bc:	f893 c001 	ldrb.w	ip, [r3, #1]
   2e6c0:	781b      	ldrb	r3, [r3, #0]
   2e6c2:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
   2e6c6:	b21b      	sxth	r3, r3
	switch (opcode)	{
   2e6c8:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
   2e6cc:	3b01      	subs	r3, #1
   2e6ce:	2b08      	cmp	r3, #8
   2e6d0:	d820      	bhi.n	2e714 <info_param_cmd_put+0x5e>
   2e6d2:	e8df f003 	tbb	[pc, r3]
   2e6d6:	0b05      	.short	0x0b05
   2e6d8:	1f1f1f12 	.word	0x1f1f1f12
   2e6dc:	1f1f      	.short	0x1f1f
   2e6de:	19          	.byte	0x19
   2e6df:	00          	.byte	0x00
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   2e6e0:	7813      	ldrb	r3, [r2, #0]
   2e6e2:	3308      	adds	r3, #8
   2e6e4:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   2e6e6:	f7de fd78 	bl	d1da <sdc_hci_cmd_ip_read_local_version_information>
   2e6ea:	e014      	b.n	2e716 <info_param_cmd_put+0x60>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   2e6ec:	7813      	ldrb	r3, [r2, #0]
   2e6ee:	3340      	adds	r3, #64	; 0x40
   2e6f0:	7013      	strb	r3, [r2, #0]
		supported_commands((void *)event_out_params);
   2e6f2:	f7ff fef7 	bl	2e4e4 <supported_commands>
		return 0;
   2e6f6:	2000      	movs	r0, #0
   2e6f8:	e00d      	b.n	2e716 <info_param_cmd_put+0x60>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   2e6fa:	7813      	ldrb	r3, [r2, #0]
   2e6fc:	3308      	adds	r3, #8
   2e6fe:	7013      	strb	r3, [r2, #0]
		supported_features((void *)event_out_params);
   2e700:	f7ff ffca 	bl	2e698 <supported_features>
		return 0;
   2e704:	2000      	movs	r0, #0
   2e706:	e006      	b.n	2e716 <info_param_cmd_put+0x60>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   2e708:	7813      	ldrb	r3, [r2, #0]
   2e70a:	3306      	adds	r3, #6
   2e70c:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   2e70e:	f7de fd62 	bl	d1d6 <sdc_hci_cmd_ip_read_bd_addr>
   2e712:	e000      	b.n	2e716 <info_param_cmd_put+0x60>
	switch (opcode)	{
   2e714:	2001      	movs	r0, #1
}
   2e716:	bd08      	pop	{r3, pc}

0002e718 <le_supported_features>:
{
   2e718:	b510      	push	{r4, lr}
   2e71a:	4604      	mov	r4, r0
	memset(features, 0, sizeof(*features));
   2e71c:	2208      	movs	r2, #8
   2e71e:	2100      	movs	r1, #0
   2e720:	f7fb fa76 	bl	29c10 <memset>
	features->params.le_encryption = 1;
   2e724:	7823      	ldrb	r3, [r4, #0]
   2e726:	f043 0301 	orr.w	r3, r3, #1
   2e72a:	7023      	strb	r3, [r4, #0]
	features->params.extended_reject_indication = 1;
   2e72c:	b2db      	uxtb	r3, r3
   2e72e:	f043 0304 	orr.w	r3, r3, #4
   2e732:	7023      	strb	r3, [r4, #0]
	features->params.slave_initiated_features_exchange = 1;
   2e734:	b2db      	uxtb	r3, r3
   2e736:	f043 0308 	orr.w	r3, r3, #8
   2e73a:	7023      	strb	r3, [r4, #0]
	features->params.le_ping = 1;
   2e73c:	b2db      	uxtb	r3, r3
   2e73e:	f043 0310 	orr.w	r3, r3, #16
   2e742:	7023      	strb	r3, [r4, #0]
	features->params.le_data_packet_length_extension = 1;
   2e744:	b2db      	uxtb	r3, r3
   2e746:	f043 0320 	orr.w	r3, r3, #32
   2e74a:	7023      	strb	r3, [r4, #0]
	features->params.extended_scanner_filter_policies = 1;
   2e74c:	b2db      	uxtb	r3, r3
   2e74e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2e752:	7023      	strb	r3, [r4, #0]
	features->params.le_2m_phy = 1;
   2e754:	7863      	ldrb	r3, [r4, #1]
   2e756:	f043 0301 	orr.w	r3, r3, #1
   2e75a:	7063      	strb	r3, [r4, #1]
	features->params.channel_selection_algorithm_2 = 1;
   2e75c:	b2db      	uxtb	r3, r3
   2e75e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2e762:	7063      	strb	r3, [r4, #1]
}
   2e764:	bd10      	pop	{r4, pc}

0002e766 <vs_zephyr_supported_commands>:
{
   2e766:	b510      	push	{r4, lr}
   2e768:	4604      	mov	r4, r0
	memset(cmds, 0, sizeof(*cmds));
   2e76a:	2202      	movs	r2, #2
   2e76c:	2100      	movs	r1, #0
   2e76e:	f7fb fa4f 	bl	29c10 <memset>
	cmds->read_version_info = 1;
   2e772:	7823      	ldrb	r3, [r4, #0]
   2e774:	f043 0301 	orr.w	r3, r3, #1
   2e778:	7023      	strb	r3, [r4, #0]
	cmds->read_supported_commands = 1;
   2e77a:	b2db      	uxtb	r3, r3
   2e77c:	f043 0302 	orr.w	r3, r3, #2
   2e780:	7023      	strb	r3, [r4, #0]
	cmds->write_bd_addr = 1;
   2e782:	b2db      	uxtb	r3, r3
   2e784:	f043 0320 	orr.w	r3, r3, #32
   2e788:	7023      	strb	r3, [r4, #0]
	cmds->read_static_addresses = 1;
   2e78a:	7863      	ldrb	r3, [r4, #1]
   2e78c:	f043 0301 	orr.w	r3, r3, #1
   2e790:	7063      	strb	r3, [r4, #1]
	cmds->read_key_hierarchy_roots = 1;
   2e792:	b2db      	uxtb	r3, r3
   2e794:	f043 0302 	orr.w	r3, r3, #2
   2e798:	7063      	strb	r3, [r4, #1]
	cmds->read_chip_temperature = 1;
   2e79a:	b2db      	uxtb	r3, r3
   2e79c:	f043 0304 	orr.w	r3, r3, #4
   2e7a0:	7063      	strb	r3, [r4, #1]
}
   2e7a2:	bd10      	pop	{r4, pc}

0002e7a4 <vs_supported_commands>:
{
   2e7a4:	b510      	push	{r4, lr}
   2e7a6:	4604      	mov	r4, r0
	memset(cmds, 0, sizeof(*cmds));
   2e7a8:	2202      	movs	r2, #2
   2e7aa:	2100      	movs	r1, #0
   2e7ac:	f7fb fa30 	bl	29c10 <memset>
	cmds->read_supported_vs_commands = 1;
   2e7b0:	7823      	ldrb	r3, [r4, #0]
   2e7b2:	f043 0301 	orr.w	r3, r3, #1
   2e7b6:	7023      	strb	r3, [r4, #0]
	cmds->llpm_mode_set = 1;
   2e7b8:	b2db      	uxtb	r3, r3
   2e7ba:	f043 0302 	orr.w	r3, r3, #2
   2e7be:	7023      	strb	r3, [r4, #0]
	cmds->conn_update = 1;
   2e7c0:	b2db      	uxtb	r3, r3
   2e7c2:	f043 0304 	orr.w	r3, r3, #4
   2e7c6:	7023      	strb	r3, [r4, #0]
	cmds->conn_event_extend = 1;
   2e7c8:	b2db      	uxtb	r3, r3
   2e7ca:	f043 0308 	orr.w	r3, r3, #8
   2e7ce:	7023      	strb	r3, [r4, #0]
	cmds->qos_conn_event_report_enable = 1;
   2e7d0:	b2db      	uxtb	r3, r3
   2e7d2:	f043 0310 	orr.w	r3, r3, #16
   2e7d6:	7023      	strb	r3, [r4, #0]
	cmds->event_length_set = 1;
   2e7d8:	b2db      	uxtb	r3, r3
   2e7da:	f043 0320 	orr.w	r3, r3, #32
   2e7de:	7023      	strb	r3, [r4, #0]
}
   2e7e0:	bd10      	pop	{r4, pc}

0002e7e2 <le_controller_cmd_put>:
{
   2e7e2:	b508      	push	{r3, lr}
   2e7e4:	4603      	mov	r3, r0
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   2e7e6:	3003      	adds	r0, #3
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   2e7e8:	3106      	adds	r1, #6
   2e7ea:	f893 c001 	ldrb.w	ip, [r3, #1]
   2e7ee:	781b      	ldrb	r3, [r3, #0]
   2e7f0:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
   2e7f4:	b21b      	sxth	r3, r3
	switch (opcode)	{
   2e7f6:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
   2e7fa:	3b01      	subs	r3, #1
   2e7fc:	2b5d      	cmp	r3, #93	; 0x5d
   2e7fe:	f200 80bc 	bhi.w	2e97a <le_controller_cmd_put+0x198>
   2e802:	e8df f003 	tbb	[pc, r3]
   2e806:	322f      	.short	0x322f
   2e808:	ba41ba39 	.word	0xba41ba39
   2e80c:	babababa 	.word	0xbabababa
   2e810:	4d4a4744 	.word	0x4d4a4744
   2e814:	5d5a5750 	.word	0x5d5a5750
   2e818:	6c666360 	.word	0x6c666360
   2e81c:	ba7c756f 	.word	0xba7c756f
   2e820:	baba7fba 	.word	0xbaba7fba
   2e824:	87bababa 	.word	0x87bababa
   2e828:	9a97948d 	.word	0x9a97948d
   2e82c:	babababa 	.word	0xbabababa
   2e830:	babababa 	.word	0xbabababa
   2e834:	b0ada7a0 	.word	0xb0ada7a0
   2e838:	babababa 	.word	0xbabababa
   2e83c:	babababa 	.word	0xbabababa
   2e840:	babababa 	.word	0xbabababa
   2e844:	babababa 	.word	0xbabababa
   2e848:	babababa 	.word	0xbabababa
   2e84c:	babababa 	.word	0xbabababa
   2e850:	bababab3 	.word	0xbababab3
   2e854:	babababa 	.word	0xbabababa
   2e858:	babababa 	.word	0xbabababa
   2e85c:	babababa 	.word	0xbabababa
   2e860:	9dbababa 	.word	0x9dbababa
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   2e864:	f7de fce1 	bl	d22a <sdc_hci_cmd_le_set_event_mask>
   2e868:	e088      	b.n	2e97c <le_controller_cmd_put+0x19a>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   2e86a:	7813      	ldrb	r3, [r2, #0]
   2e86c:	3303      	adds	r3, #3
   2e86e:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   2e870:	4608      	mov	r0, r1
   2e872:	f7de fcc4 	bl	d1fe <sdc_hci_cmd_le_read_buffer_size>
   2e876:	e081      	b.n	2e97c <le_controller_cmd_put+0x19a>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   2e878:	7813      	ldrb	r3, [r2, #0]
   2e87a:	3308      	adds	r3, #8
   2e87c:	7013      	strb	r3, [r2, #0]
		le_supported_features((void *)event_out_params);
   2e87e:	4608      	mov	r0, r1
   2e880:	f7ff ff4a 	bl	2e718 <le_supported_features>
		return 0;
   2e884:	2000      	movs	r0, #0
   2e886:	e079      	b.n	2e97c <le_controller_cmd_put+0x19a>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   2e888:	f7de fcd8 	bl	d23c <sdc_hci_cmd_le_set_random_address>
   2e88c:	e076      	b.n	2e97c <le_controller_cmd_put+0x19a>
		return sdc_hci_cmd_le_set_scan_params((void *)cmd_params);
   2e88e:	f7de fcd9 	bl	d244 <sdc_hci_cmd_le_set_scan_params>
   2e892:	e073      	b.n	2e97c <le_controller_cmd_put+0x19a>
		return sdc_hci_cmd_le_set_scan_enable((void *)cmd_params);
   2e894:	f7de fcd4 	bl	d240 <sdc_hci_cmd_le_set_scan_enable>
   2e898:	e070      	b.n	2e97c <le_controller_cmd_put+0x19a>
		return sdc_hci_cmd_le_create_conn((void *)cmd_params);
   2e89a:	f7de fca6 	bl	d1ea <sdc_hci_cmd_le_create_conn>
   2e89e:	e06d      	b.n	2e97c <le_controller_cmd_put+0x19a>
		return sdc_hci_cmd_le_create_conn_cancel();
   2e8a0:	f7de fca5 	bl	d1ee <sdc_hci_cmd_le_create_conn_cancel>
   2e8a4:	e06a      	b.n	2e97c <le_controller_cmd_put+0x19a>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_filter_accept_list_size_return_t);
   2e8a6:	7813      	ldrb	r3, [r2, #0]
   2e8a8:	3301      	adds	r3, #1
   2e8aa:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   2e8ac:	4608      	mov	r0, r1
   2e8ae:	f7de fcaa 	bl	d206 <sdc_hci_cmd_le_read_filter_accept_list_size>
   2e8b2:	e063      	b.n	2e97c <le_controller_cmd_put+0x19a>
		return sdc_hci_cmd_le_clear_filter_accept_list();
   2e8b4:	f7de fc95 	bl	d1e2 <sdc_hci_cmd_le_clear_filter_accept_list>
   2e8b8:	e060      	b.n	2e97c <le_controller_cmd_put+0x19a>
		return sdc_hci_cmd_le_add_device_to_filter_accept_list((void *)cmd_params);
   2e8ba:	f7de fc90 	bl	d1de <sdc_hci_cmd_le_add_device_to_filter_accept_list>
   2e8be:	e05d      	b.n	2e97c <le_controller_cmd_put+0x19a>
		return sdc_hci_cmd_le_remove_device_from_filter_accept_list((void *)cmd_params);
   2e8c0:	f7de fcad 	bl	d21e <sdc_hci_cmd_le_remove_device_from_filter_accept_list>
   2e8c4:	e05a      	b.n	2e97c <le_controller_cmd_put+0x19a>
		return sdc_hci_cmd_le_conn_update((void *)cmd_params);
   2e8c6:	f7de fc8e 	bl	d1e6 <sdc_hci_cmd_le_conn_update>
   2e8ca:	e057      	b.n	2e97c <le_controller_cmd_put+0x19a>
		return sdc_hci_cmd_le_set_host_channel_classification((void *)cmd_params);
   2e8cc:	f7de fcb2 	bl	d234 <sdc_hci_cmd_le_set_host_channel_classification>
   2e8d0:	e054      	b.n	2e97c <le_controller_cmd_put+0x19a>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   2e8d2:	7813      	ldrb	r3, [r2, #0]
   2e8d4:	3307      	adds	r3, #7
   2e8d6:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   2e8d8:	f7de fc93 	bl	d202 <sdc_hci_cmd_le_read_channel_map>
   2e8dc:	e04e      	b.n	2e97c <le_controller_cmd_put+0x19a>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   2e8de:	f7de fc98 	bl	d212 <sdc_hci_cmd_le_read_remote_features>
   2e8e2:	e04b      	b.n	2e97c <le_controller_cmd_put+0x19a>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   2e8e4:	7813      	ldrb	r3, [r2, #0]
   2e8e6:	3310      	adds	r3, #16
   2e8e8:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   2e8ea:	f7de fc84 	bl	d1f6 <sdc_hci_cmd_le_encrypt>
   2e8ee:	e045      	b.n	2e97c <le_controller_cmd_put+0x19a>
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   2e8f0:	7813      	ldrb	r3, [r2, #0]
   2e8f2:	3308      	adds	r3, #8
   2e8f4:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   2e8f6:	4608      	mov	r0, r1
   2e8f8:	f7de fc7f 	bl	d1fa <sdc_hci_cmd_le_rand>
   2e8fc:	e03e      	b.n	2e97c <le_controller_cmd_put+0x19a>
		return sdc_hci_cmd_le_enable_encryption((void *)cmd_params);
   2e8fe:	f7de fc78 	bl	d1f2 <sdc_hci_cmd_le_enable_encryption>
   2e902:	e03b      	b.n	2e97c <le_controller_cmd_put+0x19a>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   2e904:	7813      	ldrb	r3, [r2, #0]
   2e906:	3308      	adds	r3, #8
   2e908:	7013      	strb	r3, [r2, #0]
		le_read_supported_states((void *)event_out_params);
   2e90a:	4608      	mov	r0, r1
   2e90c:	f7ff fd89 	bl	2e422 <le_read_supported_states>
		return 0;
   2e910:	2000      	movs	r0, #0
   2e912:	e033      	b.n	2e97c <le_controller_cmd_put+0x19a>
		*param_length_out += sizeof(sdc_hci_cmd_le_set_data_length_return_t);
   2e914:	7813      	ldrb	r3, [r2, #0]
   2e916:	3302      	adds	r3, #2
   2e918:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   2e91a:	f7de fc82 	bl	d222 <sdc_hci_cmd_le_set_data_length>
   2e91e:	e02d      	b.n	2e97c <le_controller_cmd_put+0x19a>
		*param_length_out +=
   2e920:	7813      	ldrb	r3, [r2, #0]
   2e922:	3304      	adds	r3, #4
   2e924:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   2e926:	4608      	mov	r0, r1
   2e928:	f7de fc75 	bl	d216 <sdc_hci_cmd_le_read_suggested_default_data_length>
   2e92c:	e026      	b.n	2e97c <le_controller_cmd_put+0x19a>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   2e92e:	f7de fc8b 	bl	d248 <sdc_hci_cmd_le_write_suggested_default_data_length>
   2e932:	e023      	b.n	2e97c <le_controller_cmd_put+0x19a>
		return hci_cmd_le_read_local_p256_public_key();
   2e934:	f7f4 feca 	bl	236cc <hci_cmd_le_read_local_p256_public_key>
   2e938:	e020      	b.n	2e97c <le_controller_cmd_put+0x19a>
		return hci_cmd_le_generate_dhkey((void *)cmd_params);
   2e93a:	f000 f897 	bl	2ea6c <hci_cmd_le_generate_dhkey>
   2e93e:	e01d      	b.n	2e97c <le_controller_cmd_put+0x19a>
		return hci_cmd_le_generate_dhkey_v2((void *)cmd_params);
   2e940:	f000 f899 	bl	2ea76 <hci_cmd_le_generate_dhkey_v2>
   2e944:	e01a      	b.n	2e97c <le_controller_cmd_put+0x19a>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   2e946:	7813      	ldrb	r3, [r2, #0]
   2e948:	3308      	adds	r3, #8
   2e94a:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   2e94c:	4608      	mov	r0, r1
   2e94e:	f7de fc5c 	bl	d20a <sdc_hci_cmd_le_read_max_data_length>
   2e952:	e013      	b.n	2e97c <le_controller_cmd_put+0x19a>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   2e954:	7813      	ldrb	r3, [r2, #0]
   2e956:	3304      	adds	r3, #4
   2e958:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   2e95a:	f7de fc58 	bl	d20e <sdc_hci_cmd_le_read_phy>
   2e95e:	e00d      	b.n	2e97c <le_controller_cmd_put+0x19a>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   2e960:	f7de fc61 	bl	d226 <sdc_hci_cmd_le_set_default_phy>
   2e964:	e00a      	b.n	2e97c <le_controller_cmd_put+0x19a>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   2e966:	f7de fc67 	bl	d238 <sdc_hci_cmd_le_set_phy>
   2e96a:	e007      	b.n	2e97c <le_controller_cmd_put+0x19a>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   2e96c:	7813      	ldrb	r3, [r2, #0]
   2e96e:	3302      	adds	r3, #2
   2e970:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   2e972:	4608      	mov	r0, r1
   2e974:	f7de fc51 	bl	d21a <sdc_hci_cmd_le_read_transmit_power>
   2e978:	e000      	b.n	2e97c <le_controller_cmd_put+0x19a>
	switch (opcode)	{
   2e97a:	2001      	movs	r0, #1
}
   2e97c:	bd08      	pop	{r3, pc}

0002e97e <vs_cmd_put>:
{
   2e97e:	b508      	push	{r3, lr}
   2e980:	4603      	mov	r3, r0
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   2e982:	3003      	adds	r0, #3
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   2e984:	3106      	adds	r1, #6
   2e986:	f893 c001 	ldrb.w	ip, [r3, #1]
   2e98a:	781b      	ldrb	r3, [r3, #0]
   2e98c:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
	switch (opcode)	{
   2e990:	f64f 4c0b 	movw	ip, #64523	; 0xfc0b
   2e994:	4563      	cmp	r3, ip
   2e996:	d90f      	bls.n	2e9b8 <vs_cmd_put+0x3a>
   2e998:	f64f 5c05 	movw	ip, #64773	; 0xfd05
   2e99c:	4563      	cmp	r3, ip
   2e99e:	d863      	bhi.n	2ea68 <vs_cmd_put+0xea>
   2e9a0:	f5b3 4f7d 	cmp.w	r3, #64768	; 0xfd00
   2e9a4:	d31a      	bcc.n	2e9dc <vs_cmd_put+0x5e>
   2e9a6:	f5a3 437d 	sub.w	r3, r3, #64768	; 0xfd00
   2e9aa:	2b05      	cmp	r3, #5
   2e9ac:	d858      	bhi.n	2ea60 <vs_cmd_put+0xe2>
   2e9ae:	e8df f003 	tbb	[pc, r3]
   2e9b2:	4840      	.short	0x4840
   2e9b4:	54514e4b 	.word	0x54514e4b
   2e9b8:	f5b3 4f7c 	cmp.w	r3, #64512	; 0xfc00
   2e9bc:	d801      	bhi.n	2e9c2 <vs_cmd_put+0x44>
   2e9be:	2001      	movs	r0, #1
}
   2e9c0:	bd08      	pop	{r3, pc}
	switch (opcode)	{
   2e9c2:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
   2e9c6:	3b01      	subs	r3, #1
   2e9c8:	2b0a      	cmp	r3, #10
   2e9ca:	d84b      	bhi.n	2ea64 <vs_cmd_put+0xe6>
   2e9cc:	e8df f003 	tbb	[pc, r3]
   2e9d0:	4a4a0f08 	.word	0x4a4a0f08
   2e9d4:	4a4a274a 	.word	0x4a4a274a
   2e9d8:	2017      	.short	0x2017
   2e9da:	2a          	.byte	0x2a
   2e9db:	00          	.byte	0x00
   2e9dc:	2001      	movs	r0, #1
   2e9de:	e7ef      	b.n	2e9c0 <vs_cmd_put+0x42>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   2e9e0:	7813      	ldrb	r3, [r2, #0]
   2e9e2:	330c      	adds	r3, #12
   2e9e4:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   2e9e6:	4608      	mov	r0, r1
   2e9e8:	f7d2 fa0c 	bl	e04 <sdc_hci_cmd_vs_zephyr_read_version_info>
   2e9ec:	e7e8      	b.n	2e9c0 <vs_cmd_put+0x42>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   2e9ee:	7813      	ldrb	r3, [r2, #0]
   2e9f0:	3340      	adds	r3, #64	; 0x40
   2e9f2:	7013      	strb	r3, [r2, #0]
		vs_zephyr_supported_commands((void *)event_out_params);
   2e9f4:	4608      	mov	r0, r1
   2e9f6:	f7ff feb6 	bl	2e766 <vs_zephyr_supported_commands>
		return 0;
   2e9fa:	2000      	movs	r0, #0
   2e9fc:	e7e0      	b.n	2e9c0 <vs_cmd_put+0x42>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_static_addresses_return_t);
   2e9fe:	7813      	ldrb	r3, [r2, #0]
   2ea00:	1c58      	adds	r0, r3, #1
   2ea02:	7010      	strb	r0, [r2, #0]
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   2ea04:	3317      	adds	r3, #23
   2ea06:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   2ea08:	4608      	mov	r0, r1
   2ea0a:	f7de fb93 	bl	d134 <sdc_hci_cmd_vs_zephyr_read_static_addresses>
   2ea0e:	e7d7      	b.n	2e9c0 <vs_cmd_put+0x42>
		*param_length_out +=
   2ea10:	7813      	ldrb	r3, [r2, #0]
   2ea12:	3320      	adds	r3, #32
   2ea14:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   2ea16:	4608      	mov	r0, r1
   2ea18:	f7de fb3f 	bl	d09a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
   2ea1c:	e7d0      	b.n	2e9c0 <vs_cmd_put+0x42>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   2ea1e:	f7de fbd8 	bl	d1d2 <sdc_hci_cmd_vs_zephyr_write_bd_addr>
   2ea22:	e7cd      	b.n	2e9c0 <vs_cmd_put+0x42>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_chip_temp_return_t);
   2ea24:	7813      	ldrb	r3, [r2, #0]
   2ea26:	3301      	adds	r3, #1
   2ea28:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_chip_temp((void *)event_out_params);
   2ea2a:	4608      	mov	r0, r1
   2ea2c:	f7de fb21 	bl	d072 <sdc_hci_cmd_vs_zephyr_read_chip_temp>
   2ea30:	e7c6      	b.n	2e9c0 <vs_cmd_put+0x42>
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   2ea32:	7813      	ldrb	r3, [r2, #0]
   2ea34:	3340      	adds	r3, #64	; 0x40
   2ea36:	7013      	strb	r3, [r2, #0]
		vs_supported_commands((void *)event_out_params);
   2ea38:	4608      	mov	r0, r1
   2ea3a:	f7ff feb3 	bl	2e7a4 <vs_supported_commands>
		return 0;
   2ea3e:	2000      	movs	r0, #0
   2ea40:	e7be      	b.n	2e9c0 <vs_cmd_put+0x42>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   2ea42:	f7de fb0f 	bl	d064 <sdc_hci_cmd_vs_llpm_mode_set>
   2ea46:	e7bb      	b.n	2e9c0 <vs_cmd_put+0x42>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   2ea48:	f7de fae0 	bl	d00c <sdc_hci_cmd_vs_conn_update>
   2ea4c:	e7b8      	b.n	2e9c0 <vs_cmd_put+0x42>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   2ea4e:	f7de fad5 	bl	cffc <sdc_hci_cmd_vs_conn_event_extend>
   2ea52:	e7b5      	b.n	2e9c0 <vs_cmd_put+0x42>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   2ea54:	f7de fb08 	bl	d068 <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   2ea58:	e7b2      	b.n	2e9c0 <vs_cmd_put+0x42>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   2ea5a:	f7de fb01 	bl	d060 <sdc_hci_cmd_vs_event_length_set>
   2ea5e:	e7af      	b.n	2e9c0 <vs_cmd_put+0x42>
	switch (opcode)	{
   2ea60:	2001      	movs	r0, #1
   2ea62:	e7ad      	b.n	2e9c0 <vs_cmd_put+0x42>
   2ea64:	2001      	movs	r0, #1
   2ea66:	e7ab      	b.n	2e9c0 <vs_cmd_put+0x42>
   2ea68:	2001      	movs	r0, #1
   2ea6a:	e7a9      	b.n	2e9c0 <vs_cmd_put+0x42>

0002ea6c <hci_cmd_le_generate_dhkey>:

uint8_t hci_cmd_le_generate_dhkey(struct bt_hci_cp_le_generate_dhkey *p_params)
{
   2ea6c:	b508      	push	{r3, lr}
	return cmd_le_generate_dhkey(p_params->key,
   2ea6e:	2100      	movs	r1, #0
   2ea70:	f7f4 fe44 	bl	236fc <cmd_le_generate_dhkey>
				     BT_HCI_LE_KEY_TYPE_GENERATED);
}
   2ea74:	bd08      	pop	{r3, pc}

0002ea76 <hci_cmd_le_generate_dhkey_v2>:

uint8_t hci_cmd_le_generate_dhkey_v2(struct bt_hci_cp_le_generate_dhkey_v2 *p_params)
{
	if (p_params->key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
   2ea76:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
   2ea7a:	2901      	cmp	r1, #1
   2ea7c:	d803      	bhi.n	2ea86 <hci_cmd_le_generate_dhkey_v2+0x10>
{
   2ea7e:	b508      	push	{r3, lr}
		return BT_HCI_ERR_INVALID_PARAM;
	}

	return cmd_le_generate_dhkey(p_params->key, p_params->key_type);
   2ea80:	f7f4 fe3c 	bl	236fc <cmd_le_generate_dhkey>
}
   2ea84:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_INVALID_PARAM;
   2ea86:	2012      	movs	r0, #18
}
   2ea88:	4770      	bx	lr

0002ea8a <m_config_clock_source_get>:
}
   2ea8a:	2000      	movs	r0, #0
   2ea8c:	4770      	bx	lr

0002ea8e <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   2ea8e:	4668      	mov	r0, sp
   2ea90:	f020 0107 	bic.w	r1, r0, #7
   2ea94:	468d      	mov	sp, r1
   2ea96:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   2ea98:	f7dc fc60 	bl	b35c <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   2ea9c:	f7e6 f956 	bl	14d4c <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   2eaa0:	f7e6 fa58 	bl	14f54 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   2eaa4:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2eaa8:	4685      	mov	sp, r0
   2eaaa:	4770      	bx	lr

0002eaac <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   2eaac:	4668      	mov	r0, sp
   2eaae:	f020 0107 	bic.w	r1, r0, #7
   2eab2:	468d      	mov	sp, r1
   2eab4:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   2eab6:	f7dc fbc7 	bl	b248 <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   2eaba:	f7e6 f947 	bl	14d4c <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   2eabe:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2eac2:	4685      	mov	sp, r0
   2eac4:	4770      	bx	lr

0002eac6 <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   2eac6:	4668      	mov	r0, sp
   2eac8:	f020 0107 	bic.w	r1, r0, #7
   2eacc:	468d      	mov	sp, r1
   2eace:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   2ead0:	f7da f8fc 	bl	8ccc <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   2ead4:	f7e6 f93a 	bl	14d4c <_arch_isr_direct_pm>
   2ead8:	f7e6 fa3c 	bl	14f54 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   2eadc:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2eae0:	4685      	mov	sp, r0
   2eae2:	4770      	bx	lr

0002eae4 <mpsl_lib_init_sys>:
{
   2eae4:	b510      	push	{r4, lr}
	err = mpsl_lib_init_internal();
   2eae6:	f7f4 fe41 	bl	2376c <mpsl_lib_init_internal>
	if (err) {
   2eaea:	4604      	mov	r4, r0
   2eaec:	b108      	cbz	r0, 2eaf2 <mpsl_lib_init_sys+0xe>
}
   2eaee:	4620      	mov	r0, r4
   2eaf0:	bd10      	pop	{r4, pc}
	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   2eaf2:	2201      	movs	r2, #1
   2eaf4:	2100      	movs	r1, #0
   2eaf6:	2008      	movs	r0, #8
   2eaf8:	f7fa ff66 	bl	299c8 <z_arm_irq_priority_set>
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   2eafc:	2201      	movs	r2, #1
   2eafe:	2100      	movs	r1, #0
   2eb00:	200b      	movs	r0, #11
   2eb02:	f7fa ff61 	bl	299c8 <z_arm_irq_priority_set>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   2eb06:	2201      	movs	r2, #1
   2eb08:	2100      	movs	r1, #0
   2eb0a:	4610      	mov	r0, r2
   2eb0c:	f7fa ff5c 	bl	299c8 <z_arm_irq_priority_set>
	return 0;
   2eb10:	e7ed      	b.n	2eaee <mpsl_lib_init_sys+0xa>

0002eb12 <mpsl_low_prio_work_handler>:
{
   2eb12:	b508      	push	{r3, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   2eb14:	f04f 30ff 	mov.w	r0, #4294967295
   2eb18:	f04f 31ff 	mov.w	r1, #4294967295
   2eb1c:	f7f3 ff40 	bl	229a0 <multithreading_lock_acquire>
	mpsl_low_priority_process();
   2eb20:	f7e1 fcd1 	bl	104c6 <mpsl_low_priority_process>
	MULTITHREADING_LOCK_RELEASE();
   2eb24:	f7f3 ff46 	bl	229b4 <multithreading_lock_release>
}
   2eb28:	bd08      	pop	{r3, pc}

0002eb2a <mpsl_fem_api_init>:

#include <mpsl_fem_init.h>
#include <zephyr/device.h>

static int mpsl_fem_api_init(const struct device *dev)
{
   2eb2a:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	mpsl_fem_init();
   2eb2c:	f7e1 fea4 	bl	10878 <mpsl_fem_init>

	return 0;
}
   2eb30:	2000      	movs	r0, #0
   2eb32:	bd08      	pop	{r3, pc}

0002eb34 <nrfx_clock_stop>:
	switch (domain) {
   2eb34:	2801      	cmp	r0, #1
   2eb36:	d000      	beq.n	2eb3a <nrfx_clock_stop+0x6>
   2eb38:	4770      	bx	lr
{
   2eb3a:	b508      	push	{r3, lr}
		mpsl_clock_hfclk_release();
   2eb3c:	f7dd faa2 	bl	c084 <mpsl_clock_hfclk_release>
}
   2eb40:	bd08      	pop	{r3, pc}

0002eb42 <nrfx_clock_enable>:
}
   2eb42:	4770      	bx	lr

0002eb44 <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
   2eb44:	b508      	push	{r3, lr}
	MPSL_IRQ_CLOCK_Handler();
   2eb46:	f7dd f8a7 	bl	bc98 <MPSL_IRQ_CLOCK_Handler>
}
   2eb4a:	bd08      	pop	{r3, pc}

0002eb4c <ld_word>:
	rv = ptr[1];
   2eb4c:	7842      	ldrb	r2, [r0, #1]
	rv = rv << 8 | ptr[0];
   2eb4e:	7800      	ldrb	r0, [r0, #0]
}
   2eb50:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   2eb54:	4770      	bx	lr

0002eb56 <ld_dword>:
	rv = ptr[3];
   2eb56:	78c3      	ldrb	r3, [r0, #3]
	rv = rv << 8 | ptr[2];
   2eb58:	7882      	ldrb	r2, [r0, #2]
   2eb5a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	rv = rv << 8 | ptr[1];
   2eb5e:	7843      	ldrb	r3, [r0, #1]
   2eb60:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
   2eb64:	7800      	ldrb	r0, [r0, #0]
}
   2eb66:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   2eb6a:	4770      	bx	lr

0002eb6c <st_word>:
	*ptr++ = (BYTE)val; val >>= 8;
   2eb6c:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val;
   2eb6e:	0a09      	lsrs	r1, r1, #8
   2eb70:	7041      	strb	r1, [r0, #1]
}
   2eb72:	4770      	bx	lr

0002eb74 <st_dword>:
	*ptr++ = (BYTE)val; val >>= 8;
   2eb74:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
   2eb76:	f3c1 2307 	ubfx	r3, r1, #8, #8
   2eb7a:	7043      	strb	r3, [r0, #1]
	*ptr++ = (BYTE)val; val >>= 8;
   2eb7c:	f3c1 4307 	ubfx	r3, r1, #16, #8
   2eb80:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
   2eb82:	0e09      	lsrs	r1, r1, #24
   2eb84:	70c1      	strb	r1, [r0, #3]
}
   2eb86:	4770      	bx	lr

0002eb88 <dbc_1st>:
}
   2eb88:	2000      	movs	r0, #0
   2eb8a:	4770      	bx	lr

0002eb8c <dbc_2nd>:
}
   2eb8c:	2000      	movs	r0, #0
   2eb8e:	4770      	bx	lr

0002eb90 <clst2sect>:
	clst -= 2;		/* Cluster number is origin from 2 */
   2eb90:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
   2eb92:	6943      	ldr	r3, [r0, #20]
   2eb94:	3b02      	subs	r3, #2
   2eb96:	428b      	cmp	r3, r1
   2eb98:	d904      	bls.n	2eba4 <clst2sect+0x14>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
   2eb9a:	6a83      	ldr	r3, [r0, #40]	; 0x28
   2eb9c:	8942      	ldrh	r2, [r0, #10]
   2eb9e:	fb01 3002 	mla	r0, r1, r2, r3
   2eba2:	4770      	bx	lr
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
   2eba4:	2000      	movs	r0, #0
}
   2eba6:	4770      	bx	lr

0002eba8 <ld_clust>:
{
   2eba8:	b570      	push	{r4, r5, r6, lr}
   2ebaa:	4606      	mov	r6, r0
   2ebac:	460d      	mov	r5, r1
	cl = ld_word(dir + DIR_FstClusLO);
   2ebae:	f101 001a 	add.w	r0, r1, #26
   2ebb2:	f7ff ffcb 	bl	2eb4c <ld_word>
	if (fs->fs_type == FS_FAT32) {
   2ebb6:	7833      	ldrb	r3, [r6, #0]
   2ebb8:	2b03      	cmp	r3, #3
   2ebba:	d000      	beq.n	2ebbe <ld_clust+0x16>
}
   2ebbc:	bd70      	pop	{r4, r5, r6, pc}
   2ebbe:	4604      	mov	r4, r0
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
   2ebc0:	f105 0014 	add.w	r0, r5, #20
   2ebc4:	f7ff ffc2 	bl	2eb4c <ld_word>
   2ebc8:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
	return cl;
   2ebcc:	e7f6      	b.n	2ebbc <ld_clust+0x14>

0002ebce <st_clust>:
{
   2ebce:	b570      	push	{r4, r5, r6, lr}
   2ebd0:	4606      	mov	r6, r0
   2ebd2:	460c      	mov	r4, r1
   2ebd4:	4615      	mov	r5, r2
	st_word(dir + DIR_FstClusLO, (WORD)cl);
   2ebd6:	b291      	uxth	r1, r2
   2ebd8:	f104 001a 	add.w	r0, r4, #26
   2ebdc:	f7ff ffc6 	bl	2eb6c <st_word>
	if (fs->fs_type == FS_FAT32) {
   2ebe0:	7833      	ldrb	r3, [r6, #0]
   2ebe2:	2b03      	cmp	r3, #3
   2ebe4:	d000      	beq.n	2ebe8 <st_clust+0x1a>
}
   2ebe6:	bd70      	pop	{r4, r5, r6, pc}
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
   2ebe8:	0c29      	lsrs	r1, r5, #16
   2ebea:	f104 0014 	add.w	r0, r4, #20
   2ebee:	f7ff ffbd 	bl	2eb6c <st_word>
}
   2ebf2:	e7f8      	b.n	2ebe6 <st_clust+0x18>

0002ebf4 <get_fileinfo>:
{
   2ebf4:	b538      	push	{r3, r4, r5, lr}
	fno->fname[0] = 0;			/* Invaidate file info */
   2ebf6:	2300      	movs	r3, #0
   2ebf8:	724b      	strb	r3, [r1, #9]
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
   2ebfa:	6983      	ldr	r3, [r0, #24]
   2ebfc:	b39b      	cbz	r3, 2ec66 <get_fileinfo+0x72>
   2ebfe:	4605      	mov	r5, r0
   2ec00:	460c      	mov	r4, r1
	si = di = 0;
   2ec02:	2200      	movs	r2, #0
   2ec04:	4613      	mov	r3, r2
   2ec06:	e006      	b.n	2ec16 <get_fileinfo+0x22>
		if (si == 9) fno->fname[di++] = '.';/* Insert a . if extension is exist */
   2ec08:	f1bc 0f09 	cmp.w	ip, #9
   2ec0c:	d00f      	beq.n	2ec2e <get_fileinfo+0x3a>
		fno->fname[di++] = c;
   2ec0e:	18a1      	adds	r1, r4, r2
   2ec10:	724b      	strb	r3, [r1, #9]
   2ec12:	3201      	adds	r2, #1
   2ec14:	4663      	mov	r3, ip
	while (si < 11) {		/* Copy name body and extension */
   2ec16:	2b0a      	cmp	r3, #10
   2ec18:	d80e      	bhi.n	2ec38 <get_fileinfo+0x44>
		c = (TCHAR)dp->dir[si++];
   2ec1a:	f103 0c01 	add.w	ip, r3, #1
   2ec1e:	69e9      	ldr	r1, [r5, #28]
   2ec20:	5ccb      	ldrb	r3, [r1, r3]
		if (c == ' ') continue;		/* Skip padding spaces */
   2ec22:	2b20      	cmp	r3, #32
   2ec24:	d0f6      	beq.n	2ec14 <get_fileinfo+0x20>
		if (c == RDDEM) c = DDEM;	/* Restore replaced DDEM character */
   2ec26:	2b05      	cmp	r3, #5
   2ec28:	d1ee      	bne.n	2ec08 <get_fileinfo+0x14>
   2ec2a:	23e5      	movs	r3, #229	; 0xe5
   2ec2c:	e7ec      	b.n	2ec08 <get_fileinfo+0x14>
		if (si == 9) fno->fname[di++] = '.';/* Insert a . if extension is exist */
   2ec2e:	18a1      	adds	r1, r4, r2
   2ec30:	202e      	movs	r0, #46	; 0x2e
   2ec32:	7248      	strb	r0, [r1, #9]
   2ec34:	3201      	adds	r2, #1
   2ec36:	e7ea      	b.n	2ec0e <get_fileinfo+0x1a>
	fno->fname[di] = 0;		/* Terminate the SFN */
   2ec38:	4422      	add	r2, r4
   2ec3a:	2300      	movs	r3, #0
   2ec3c:	7253      	strb	r3, [r2, #9]
	fno->fattrib = dp->dir[DIR_Attr] & AM_MASK;			/* Attribute */
   2ec3e:	69eb      	ldr	r3, [r5, #28]
   2ec40:	7adb      	ldrb	r3, [r3, #11]
   2ec42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2ec46:	7223      	strb	r3, [r4, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
   2ec48:	69e8      	ldr	r0, [r5, #28]
   2ec4a:	301c      	adds	r0, #28
   2ec4c:	f7ff ff83 	bl	2eb56 <ld_dword>
   2ec50:	6020      	str	r0, [r4, #0]
	fno->ftime = ld_word(dp->dir + DIR_ModTime + 0);	/* Time */
   2ec52:	69e8      	ldr	r0, [r5, #28]
   2ec54:	3016      	adds	r0, #22
   2ec56:	f7ff ff79 	bl	2eb4c <ld_word>
   2ec5a:	80e0      	strh	r0, [r4, #6]
	fno->fdate = ld_word(dp->dir + DIR_ModTime + 2);	/* Date */
   2ec5c:	69e8      	ldr	r0, [r5, #28]
   2ec5e:	3018      	adds	r0, #24
   2ec60:	f7ff ff74 	bl	2eb4c <ld_word>
   2ec64:	80a0      	strh	r0, [r4, #4]
}
   2ec66:	bd38      	pop	{r3, r4, r5, pc}

0002ec68 <validate>:
{
   2ec68:	b538      	push	{r3, r4, r5, lr}
   2ec6a:	460d      	mov	r5, r1
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
   2ec6c:	4604      	mov	r4, r0
   2ec6e:	b198      	cbz	r0, 2ec98 <validate+0x30>
   2ec70:	6803      	ldr	r3, [r0, #0]
   2ec72:	b19b      	cbz	r3, 2ec9c <validate+0x34>
   2ec74:	781a      	ldrb	r2, [r3, #0]
   2ec76:	b1a2      	cbz	r2, 2eca2 <validate+0x3a>
   2ec78:	8881      	ldrh	r1, [r0, #4]
   2ec7a:	88da      	ldrh	r2, [r3, #6]
   2ec7c:	4291      	cmp	r1, r2
   2ec7e:	d003      	beq.n	2ec88 <validate+0x20>
	FRESULT res = FR_INVALID_OBJECT;
   2ec80:	2009      	movs	r0, #9
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
   2ec82:	2400      	movs	r4, #0
   2ec84:	602c      	str	r4, [r5, #0]
}
   2ec86:	bd38      	pop	{r3, r4, r5, pc}
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
   2ec88:	7858      	ldrb	r0, [r3, #1]
   2ec8a:	f7f5 feb3 	bl	249f4 <disk_status>
   2ec8e:	f010 0001 	ands.w	r0, r0, #1
   2ec92:	d109      	bne.n	2eca8 <validate+0x40>
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
   2ec94:	6824      	ldr	r4, [r4, #0]
   2ec96:	e7f5      	b.n	2ec84 <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
   2ec98:	2009      	movs	r0, #9
   2ec9a:	e7f3      	b.n	2ec84 <validate+0x1c>
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
   2ec9c:	461c      	mov	r4, r3
	FRESULT res = FR_INVALID_OBJECT;
   2ec9e:	2009      	movs	r0, #9
   2eca0:	e7f0      	b.n	2ec84 <validate+0x1c>
   2eca2:	2009      	movs	r0, #9
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
   2eca4:	2400      	movs	r4, #0
   2eca6:	e7ed      	b.n	2ec84 <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
   2eca8:	2009      	movs	r0, #9
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
   2ecaa:	2400      	movs	r4, #0
   2ecac:	e7ea      	b.n	2ec84 <validate+0x1c>

0002ecae <sync_window>:
{
   2ecae:	b570      	push	{r4, r5, r6, lr}
	if (fs->wflag) {	/* Is the disk access window dirty? */
   2ecb0:	78c5      	ldrb	r5, [r0, #3]
   2ecb2:	b90d      	cbnz	r5, 2ecb8 <sync_window+0xa>
}
   2ecb4:	4628      	mov	r0, r5
   2ecb6:	bd70      	pop	{r4, r5, r6, pc}
   2ecb8:	4604      	mov	r4, r0
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
   2ecba:	f100 0630 	add.w	r6, r0, #48	; 0x30
   2ecbe:	2301      	movs	r3, #1
   2ecc0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   2ecc2:	4631      	mov	r1, r6
   2ecc4:	7840      	ldrb	r0, [r0, #1]
   2ecc6:	f7f5 febf 	bl	24a48 <disk_write>
   2ecca:	4605      	mov	r5, r0
   2eccc:	b988      	cbnz	r0, 2ecf2 <sync_window+0x44>
			fs->wflag = 0;	/* Clear window dirty flag */
   2ecce:	2300      	movs	r3, #0
   2ecd0:	70e3      	strb	r3, [r4, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
   2ecd2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   2ecd4:	6a23      	ldr	r3, [r4, #32]
   2ecd6:	1acb      	subs	r3, r1, r3
   2ecd8:	69a2      	ldr	r2, [r4, #24]
   2ecda:	4293      	cmp	r3, r2
   2ecdc:	d2ea      	bcs.n	2ecb4 <sync_window+0x6>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
   2ecde:	78a3      	ldrb	r3, [r4, #2]
   2ece0:	2b02      	cmp	r3, #2
   2ece2:	d1e7      	bne.n	2ecb4 <sync_window+0x6>
   2ece4:	2301      	movs	r3, #1
   2ece6:	440a      	add	r2, r1
   2ece8:	4631      	mov	r1, r6
   2ecea:	7860      	ldrb	r0, [r4, #1]
   2ecec:	f7f5 feac 	bl	24a48 <disk_write>
   2ecf0:	e7e0      	b.n	2ecb4 <sync_window+0x6>
			res = FR_DISK_ERR;
   2ecf2:	2501      	movs	r5, #1
   2ecf4:	e7de      	b.n	2ecb4 <sync_window+0x6>

0002ecf6 <move_window>:
{
   2ecf6:	b570      	push	{r4, r5, r6, lr}
	if (sect != fs->winsect) {	/* Window offset changed? */
   2ecf8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   2ecfa:	428b      	cmp	r3, r1
   2ecfc:	d102      	bne.n	2ed04 <move_window+0xe>
	FRESULT res = FR_OK;
   2ecfe:	2600      	movs	r6, #0
}
   2ed00:	4630      	mov	r0, r6
   2ed02:	bd70      	pop	{r4, r5, r6, pc}
   2ed04:	4604      	mov	r4, r0
   2ed06:	460d      	mov	r5, r1
		res = sync_window(fs);		/* Flush the window */
   2ed08:	f7ff ffd1 	bl	2ecae <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
   2ed0c:	4606      	mov	r6, r0
   2ed0e:	2800      	cmp	r0, #0
   2ed10:	d1f6      	bne.n	2ed00 <move_window+0xa>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
   2ed12:	2301      	movs	r3, #1
   2ed14:	462a      	mov	r2, r5
   2ed16:	f104 0130 	add.w	r1, r4, #48	; 0x30
   2ed1a:	7860      	ldrb	r0, [r4, #1]
   2ed1c:	f7f5 fe86 	bl	24a2c <disk_read>
   2ed20:	b110      	cbz	r0, 2ed28 <move_window+0x32>
				res = FR_DISK_ERR;
   2ed22:	2601      	movs	r6, #1
				sect = (LBA_t)0 - 1;	/* Invalidate window if read data is not valid */
   2ed24:	f04f 35ff 	mov.w	r5, #4294967295
			fs->winsect = sect;
   2ed28:	62e5      	str	r5, [r4, #44]	; 0x2c
   2ed2a:	e7e9      	b.n	2ed00 <move_window+0xa>

0002ed2c <find_volume>:
{
   2ed2c:	b570      	push	{r4, r5, r6, lr}
   2ed2e:	b084      	sub	sp, #16
   2ed30:	4606      	mov	r6, r0
   2ed32:	460d      	mov	r5, r1
	fmt = check_fs(fs, 0);				/* Load sector 0 and check if it is an FAT VBR as SFD format */
   2ed34:	2100      	movs	r1, #0
   2ed36:	f7f4 fe47 	bl	239c8 <check_fs>
	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is an FAT VBR as auto scan, not a BS or disk error */
   2ed3a:	2802      	cmp	r0, #2
   2ed3c:	d003      	beq.n	2ed46 <find_volume+0x1a>
   2ed3e:	d82b      	bhi.n	2ed98 <find_volume+0x6c>
   2ed40:	b355      	cbz	r5, 2ed98 <find_volume+0x6c>
   2ed42:	2400      	movs	r4, #0
   2ed44:	e000      	b.n	2ed48 <find_volume+0x1c>
   2ed46:	2400      	movs	r4, #0
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
   2ed48:	2c03      	cmp	r4, #3
   2ed4a:	d80e      	bhi.n	2ed6a <find_volume+0x3e>
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
   2ed4c:	f106 0030 	add.w	r0, r6, #48	; 0x30
   2ed50:	0123      	lsls	r3, r4, #4
   2ed52:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
   2ed56:	4418      	add	r0, r3
   2ed58:	f7ff fefd 	bl	2eb56 <ld_dword>
   2ed5c:	ab04      	add	r3, sp, #16
   2ed5e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   2ed62:	f843 0c10 	str.w	r0, [r3, #-16]
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
   2ed66:	3401      	adds	r4, #1
   2ed68:	e7ee      	b.n	2ed48 <find_volume+0x1c>
	i = part ? part - 1 : 0;		/* Table index to find first */
   2ed6a:	b10d      	cbz	r5, 2ed70 <find_volume+0x44>
   2ed6c:	1e6c      	subs	r4, r5, #1
   2ed6e:	e00a      	b.n	2ed86 <find_volume+0x5a>
   2ed70:	462c      	mov	r4, r5
   2ed72:	e008      	b.n	2ed86 <find_volume+0x5a>
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
   2ed74:	4630      	mov	r0, r6
   2ed76:	f7f4 fe27 	bl	239c8 <check_fs>
	} while (part == 0 && fmt >= 2 && ++i < 4);
   2ed7a:	b96d      	cbnz	r5, 2ed98 <find_volume+0x6c>
   2ed7c:	2801      	cmp	r0, #1
   2ed7e:	d90b      	bls.n	2ed98 <find_volume+0x6c>
   2ed80:	3401      	adds	r4, #1
   2ed82:	2c03      	cmp	r4, #3
   2ed84:	d808      	bhi.n	2ed98 <find_volume+0x6c>
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
   2ed86:	ab04      	add	r3, sp, #16
   2ed88:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   2ed8c:	f853 1c10 	ldr.w	r1, [r3, #-16]
   2ed90:	2900      	cmp	r1, #0
   2ed92:	d1ef      	bne.n	2ed74 <find_volume+0x48>
   2ed94:	2003      	movs	r0, #3
   2ed96:	e7f0      	b.n	2ed7a <find_volume+0x4e>
}
   2ed98:	b004      	add	sp, #16
   2ed9a:	bd70      	pop	{r4, r5, r6, pc}

0002ed9c <put_fat>:
{
   2ed9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
   2eda0:	2901      	cmp	r1, #1
   2eda2:	d97d      	bls.n	2eea0 <put_fat+0x104>
   2eda4:	4607      	mov	r7, r0
   2eda6:	460c      	mov	r4, r1
   2eda8:	4616      	mov	r6, r2
   2edaa:	6943      	ldr	r3, [r0, #20]
   2edac:	428b      	cmp	r3, r1
   2edae:	d979      	bls.n	2eea4 <put_fat+0x108>
		switch (fs->fs_type) {
   2edb0:	7803      	ldrb	r3, [r0, #0]
   2edb2:	2b02      	cmp	r3, #2
   2edb4:	d044      	beq.n	2ee40 <put_fat+0xa4>
   2edb6:	2b03      	cmp	r3, #3
   2edb8:	d056      	beq.n	2ee68 <put_fat+0xcc>
   2edba:	2b01      	cmp	r3, #1
   2edbc:	d003      	beq.n	2edc6 <put_fat+0x2a>
   2edbe:	2502      	movs	r5, #2
}
   2edc0:	4628      	mov	r0, r5
   2edc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
   2edc6:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   2edca:	6a01      	ldr	r1, [r0, #32]
   2edcc:	eb01 2158 	add.w	r1, r1, r8, lsr #9
   2edd0:	f7ff ff91 	bl	2ecf6 <move_window>
			if (res != FR_OK) break;
   2edd4:	4605      	mov	r5, r0
   2edd6:	2800      	cmp	r0, #0
   2edd8:	d1f2      	bne.n	2edc0 <put_fat+0x24>
			p = fs->win + bc++ % SS(fs);
   2edda:	f107 0a30 	add.w	sl, r7, #48	; 0x30
   2edde:	f108 0901 	add.w	r9, r8, #1
   2ede2:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
   2ede6:	f014 0401 	ands.w	r4, r4, #1
   2edea:	d01f      	beq.n	2ee2c <put_fat+0x90>
   2edec:	f81a 3008 	ldrb.w	r3, [sl, r8]
   2edf0:	0132      	lsls	r2, r6, #4
   2edf2:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
   2edf6:	f003 030f 	and.w	r3, r3, #15
   2edfa:	4313      	orrs	r3, r2
   2edfc:	b2db      	uxtb	r3, r3
   2edfe:	f80a 3008 	strb.w	r3, [sl, r8]
			fs->wflag = 1;
   2ee02:	2301      	movs	r3, #1
   2ee04:	70fb      	strb	r3, [r7, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   2ee06:	6a39      	ldr	r1, [r7, #32]
   2ee08:	eb01 2159 	add.w	r1, r1, r9, lsr #9
   2ee0c:	4638      	mov	r0, r7
   2ee0e:	f7ff ff72 	bl	2ecf6 <move_window>
			if (res != FR_OK) break;
   2ee12:	4605      	mov	r5, r0
   2ee14:	2800      	cmp	r0, #0
   2ee16:	d1d3      	bne.n	2edc0 <put_fat+0x24>
			p = fs->win + bc % SS(fs);
   2ee18:	f3c9 0908 	ubfx	r9, r9, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
   2ee1c:	b144      	cbz	r4, 2ee30 <put_fat+0x94>
   2ee1e:	f3c6 1307 	ubfx	r3, r6, #4, #8
   2ee22:	f80a 3009 	strb.w	r3, [sl, r9]
			fs->wflag = 1;
   2ee26:	2301      	movs	r3, #1
   2ee28:	70fb      	strb	r3, [r7, #3]
			break;
   2ee2a:	e7c9      	b.n	2edc0 <put_fat+0x24>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
   2ee2c:	b2f3      	uxtb	r3, r6
   2ee2e:	e7e6      	b.n	2edfe <put_fat+0x62>
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
   2ee30:	f81a 3009 	ldrb.w	r3, [sl, r9]
   2ee34:	f3c6 2203 	ubfx	r2, r6, #8, #4
   2ee38:	f023 030f 	bic.w	r3, r3, #15
   2ee3c:	4313      	orrs	r3, r2
   2ee3e:	e7f0      	b.n	2ee22 <put_fat+0x86>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
   2ee40:	6a01      	ldr	r1, [r0, #32]
   2ee42:	eb01 2114 	add.w	r1, r1, r4, lsr #8
   2ee46:	f7ff ff56 	bl	2ecf6 <move_window>
			if (res != FR_OK) break;
   2ee4a:	4605      	mov	r5, r0
   2ee4c:	2800      	cmp	r0, #0
   2ee4e:	d1b7      	bne.n	2edc0 <put_fat+0x24>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
   2ee50:	f107 0030 	add.w	r0, r7, #48	; 0x30
   2ee54:	0064      	lsls	r4, r4, #1
   2ee56:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
   2ee5a:	b2b1      	uxth	r1, r6
   2ee5c:	4420      	add	r0, r4
   2ee5e:	f7ff fe85 	bl	2eb6c <st_word>
			fs->wflag = 1;
   2ee62:	2301      	movs	r3, #1
   2ee64:	70fb      	strb	r3, [r7, #3]
			break;
   2ee66:	e7ab      	b.n	2edc0 <put_fat+0x24>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
   2ee68:	6a01      	ldr	r1, [r0, #32]
   2ee6a:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   2ee6e:	f7ff ff42 	bl	2ecf6 <move_window>
			if (res != FR_OK) break;
   2ee72:	4605      	mov	r5, r0
   2ee74:	2800      	cmp	r0, #0
   2ee76:	d1a3      	bne.n	2edc0 <put_fat+0x24>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
   2ee78:	f026 4670 	bic.w	r6, r6, #4026531840	; 0xf0000000
   2ee7c:	f107 0330 	add.w	r3, r7, #48	; 0x30
   2ee80:	00a4      	lsls	r4, r4, #2
   2ee82:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
   2ee86:	441c      	add	r4, r3
   2ee88:	4620      	mov	r0, r4
   2ee8a:	f7ff fe64 	bl	2eb56 <ld_dword>
   2ee8e:	f000 4170 	and.w	r1, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
   2ee92:	4331      	orrs	r1, r6
   2ee94:	4620      	mov	r0, r4
   2ee96:	f7ff fe6d 	bl	2eb74 <st_dword>
			fs->wflag = 1;
   2ee9a:	2301      	movs	r3, #1
   2ee9c:	70fb      	strb	r3, [r7, #3]
			break;
   2ee9e:	e78f      	b.n	2edc0 <put_fat+0x24>
	FRESULT res = FR_INT_ERR;
   2eea0:	2502      	movs	r5, #2
   2eea2:	e78d      	b.n	2edc0 <put_fat+0x24>
   2eea4:	2502      	movs	r5, #2
   2eea6:	e78b      	b.n	2edc0 <put_fat+0x24>

0002eea8 <get_fat>:
{
   2eea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	FATFS *fs = obj->fs;
   2eeaa:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
   2eeac:	2901      	cmp	r1, #1
   2eeae:	d956      	bls.n	2ef5e <get_fat+0xb6>
   2eeb0:	460c      	mov	r4, r1
   2eeb2:	696b      	ldr	r3, [r5, #20]
   2eeb4:	428b      	cmp	r3, r1
   2eeb6:	d954      	bls.n	2ef62 <get_fat+0xba>
		switch (fs->fs_type) {
   2eeb8:	782b      	ldrb	r3, [r5, #0]
   2eeba:	2b02      	cmp	r3, #2
   2eebc:	d02d      	beq.n	2ef1a <get_fat+0x72>
   2eebe:	2b03      	cmp	r3, #3
   2eec0:	d03b      	beq.n	2ef3a <get_fat+0x92>
   2eec2:	2b01      	cmp	r3, #1
   2eec4:	d001      	beq.n	2eeca <get_fat+0x22>
   2eec6:	2001      	movs	r0, #1
   2eec8:	e04a      	b.n	2ef60 <get_fat+0xb8>
			bc = (UINT)clst; bc += bc / 2;
   2eeca:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
   2eece:	6a29      	ldr	r1, [r5, #32]
   2eed0:	eb01 2156 	add.w	r1, r1, r6, lsr #9
   2eed4:	4628      	mov	r0, r5
   2eed6:	f7ff ff0e 	bl	2ecf6 <move_window>
   2eeda:	b110      	cbz	r0, 2eee2 <get_fat+0x3a>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
   2eedc:	f04f 30ff 	mov.w	r0, #4294967295
   2eee0:	e03e      	b.n	2ef60 <get_fat+0xb8>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
   2eee2:	1c77      	adds	r7, r6, #1
   2eee4:	f3c6 0608 	ubfx	r6, r6, #0, #9
   2eee8:	442e      	add	r6, r5
   2eeea:	f896 6030 	ldrb.w	r6, [r6, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
   2eeee:	6a29      	ldr	r1, [r5, #32]
   2eef0:	eb01 2157 	add.w	r1, r1, r7, lsr #9
   2eef4:	4628      	mov	r0, r5
   2eef6:	f7ff fefe 	bl	2ecf6 <move_window>
   2eefa:	bba0      	cbnz	r0, 2ef66 <get_fat+0xbe>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
   2eefc:	f3c7 0708 	ubfx	r7, r7, #0, #9
   2ef00:	442f      	add	r7, r5
   2ef02:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
   2ef06:	ea46 2003 	orr.w	r0, r6, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
   2ef0a:	f014 0f01 	tst.w	r4, #1
   2ef0e:	d001      	beq.n	2ef14 <get_fat+0x6c>
   2ef10:	0900      	lsrs	r0, r0, #4
   2ef12:	e025      	b.n	2ef60 <get_fat+0xb8>
   2ef14:	f3c0 000b 	ubfx	r0, r0, #0, #12
   2ef18:	e022      	b.n	2ef60 <get_fat+0xb8>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
   2ef1a:	6a29      	ldr	r1, [r5, #32]
   2ef1c:	eb01 2114 	add.w	r1, r1, r4, lsr #8
   2ef20:	4628      	mov	r0, r5
   2ef22:	f7ff fee8 	bl	2ecf6 <move_window>
   2ef26:	bb08      	cbnz	r0, 2ef6c <get_fat+0xc4>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
   2ef28:	f105 0030 	add.w	r0, r5, #48	; 0x30
   2ef2c:	0064      	lsls	r4, r4, #1
   2ef2e:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
   2ef32:	4420      	add	r0, r4
   2ef34:	f7ff fe0a 	bl	2eb4c <ld_word>
			break;
   2ef38:	e012      	b.n	2ef60 <get_fat+0xb8>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
   2ef3a:	6a29      	ldr	r1, [r5, #32]
   2ef3c:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   2ef40:	4628      	mov	r0, r5
   2ef42:	f7ff fed8 	bl	2ecf6 <move_window>
   2ef46:	b9a0      	cbnz	r0, 2ef72 <get_fat+0xca>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
   2ef48:	f105 0030 	add.w	r0, r5, #48	; 0x30
   2ef4c:	00a4      	lsls	r4, r4, #2
   2ef4e:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
   2ef52:	4420      	add	r0, r4
   2ef54:	f7ff fdff 	bl	2eb56 <ld_dword>
   2ef58:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
   2ef5c:	e000      	b.n	2ef60 <get_fat+0xb8>
		val = 1;	/* Internal error */
   2ef5e:	2001      	movs	r0, #1
}
   2ef60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
   2ef62:	2001      	movs	r0, #1
   2ef64:	e7fc      	b.n	2ef60 <get_fat+0xb8>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
   2ef66:	f04f 30ff 	mov.w	r0, #4294967295
   2ef6a:	e7f9      	b.n	2ef60 <get_fat+0xb8>
   2ef6c:	f04f 30ff 	mov.w	r0, #4294967295
   2ef70:	e7f6      	b.n	2ef60 <get_fat+0xb8>
   2ef72:	f04f 30ff 	mov.w	r0, #4294967295
	return val;
   2ef76:	e7f3      	b.n	2ef60 <get_fat+0xb8>

0002ef78 <dir_sdi>:
{
   2ef78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
   2ef7c:	f8d0 8000 	ldr.w	r8, [r0]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
   2ef80:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   2ef84:	d23f      	bcs.n	2f006 <dir_sdi+0x8e>
   2ef86:	4607      	mov	r7, r0
   2ef88:	460e      	mov	r6, r1
   2ef8a:	f011 0f1f 	tst.w	r1, #31
   2ef8e:	d13d      	bne.n	2f00c <dir_sdi+0x94>
	dp->dptr = ofs;				/* Set current offset */
   2ef90:	6101      	str	r1, [r0, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
   2ef92:	6884      	ldr	r4, [r0, #8]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
   2ef94:	b9e4      	cbnz	r4, 2efd0 <dir_sdi+0x58>
   2ef96:	f898 3000 	ldrb.w	r3, [r8]
   2ef9a:	2b02      	cmp	r3, #2
   2ef9c:	d901      	bls.n	2efa2 <dir_sdi+0x2a>
		clst = (DWORD)fs->dirbase;
   2ef9e:	f8d8 4024 	ldr.w	r4, [r8, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
   2efa2:	b9ac      	cbnz	r4, 2efd0 <dir_sdi+0x58>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
   2efa4:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   2efa8:	ebb3 1f56 	cmp.w	r3, r6, lsr #5
   2efac:	d930      	bls.n	2f010 <dir_sdi+0x98>
		dp->sect = fs->dirbase;
   2efae:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
   2efb2:	61bb      	str	r3, [r7, #24]
	dp->clust = clst;					/* Current cluster# */
   2efb4:	617c      	str	r4, [r7, #20]
	if (dp->sect == 0) return FR_INT_ERR;
   2efb6:	69bb      	ldr	r3, [r7, #24]
   2efb8:	b393      	cbz	r3, 2f020 <dir_sdi+0xa8>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
   2efba:	eb03 2356 	add.w	r3, r3, r6, lsr #9
   2efbe:	61bb      	str	r3, [r7, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
   2efc0:	f108 0830 	add.w	r8, r8, #48	; 0x30
   2efc4:	f3c6 0108 	ubfx	r1, r6, #0, #9
   2efc8:	4441      	add	r1, r8
   2efca:	61f9      	str	r1, [r7, #28]
	return FR_OK;
   2efcc:	2000      	movs	r0, #0
   2efce:	e01b      	b.n	2f008 <dir_sdi+0x90>
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
   2efd0:	f8b8 500a 	ldrh.w	r5, [r8, #10]
   2efd4:	026d      	lsls	r5, r5, #9
		while (ofs >= csz) {				/* Follow cluster chain */
   2efd6:	42ae      	cmp	r6, r5
   2efd8:	d30f      	bcc.n	2effa <dir_sdi+0x82>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
   2efda:	4621      	mov	r1, r4
   2efdc:	4638      	mov	r0, r7
   2efde:	f7ff ff63 	bl	2eea8 <get_fat>
   2efe2:	4604      	mov	r4, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   2efe4:	f1b0 3fff 	cmp.w	r0, #4294967295
   2efe8:	d014      	beq.n	2f014 <dir_sdi+0x9c>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
   2efea:	2801      	cmp	r0, #1
   2efec:	d914      	bls.n	2f018 <dir_sdi+0xa0>
   2efee:	f8d8 3014 	ldr.w	r3, [r8, #20]
   2eff2:	4283      	cmp	r3, r0
   2eff4:	d912      	bls.n	2f01c <dir_sdi+0xa4>
			ofs -= csz;
   2eff6:	1b76      	subs	r6, r6, r5
   2eff8:	e7ed      	b.n	2efd6 <dir_sdi+0x5e>
		dp->sect = clst2sect(fs, clst);
   2effa:	4621      	mov	r1, r4
   2effc:	4640      	mov	r0, r8
   2effe:	f7ff fdc7 	bl	2eb90 <clst2sect>
   2f002:	61b8      	str	r0, [r7, #24]
   2f004:	e7d6      	b.n	2efb4 <dir_sdi+0x3c>
		return FR_INT_ERR;
   2f006:	2002      	movs	r0, #2
}
   2f008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return FR_INT_ERR;
   2f00c:	2002      	movs	r0, #2
   2f00e:	e7fb      	b.n	2f008 <dir_sdi+0x90>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
   2f010:	2002      	movs	r0, #2
   2f012:	e7f9      	b.n	2f008 <dir_sdi+0x90>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   2f014:	2001      	movs	r0, #1
   2f016:	e7f7      	b.n	2f008 <dir_sdi+0x90>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
   2f018:	2002      	movs	r0, #2
   2f01a:	e7f5      	b.n	2f008 <dir_sdi+0x90>
   2f01c:	2002      	movs	r0, #2
   2f01e:	e7f3      	b.n	2f008 <dir_sdi+0x90>
	if (dp->sect == 0) return FR_INT_ERR;
   2f020:	2002      	movs	r0, #2
   2f022:	e7f1      	b.n	2f008 <dir_sdi+0x90>

0002f024 <create_chain>:
{
   2f024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2f028:	4606      	mov	r6, r0
	FATFS *fs = obj->fs;
   2f02a:	6807      	ldr	r7, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
   2f02c:	4688      	mov	r8, r1
   2f02e:	b931      	cbnz	r1, 2f03e <create_chain+0x1a>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
   2f030:	68fd      	ldr	r5, [r7, #12]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
   2f032:	b18d      	cbz	r5, 2f058 <create_chain+0x34>
   2f034:	697b      	ldr	r3, [r7, #20]
   2f036:	42ab      	cmp	r3, r5
   2f038:	d80f      	bhi.n	2f05a <create_chain+0x36>
   2f03a:	2501      	movs	r5, #1
   2f03c:	e00d      	b.n	2f05a <create_chain+0x36>
		cs = get_fat(obj, clst);			/* Check the cluster status */
   2f03e:	f7ff ff33 	bl	2eea8 <get_fat>
   2f042:	4603      	mov	r3, r0
		if (cs < 2) return 1;				/* Test for insanity */
   2f044:	2801      	cmp	r0, #1
   2f046:	d978      	bls.n	2f13a <create_chain+0x116>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
   2f048:	f1b0 3fff 	cmp.w	r0, #4294967295
   2f04c:	d06f      	beq.n	2f12e <create_chain+0x10a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   2f04e:	697a      	ldr	r2, [r7, #20]
   2f050:	4282      	cmp	r2, r0
   2f052:	d86c      	bhi.n	2f12e <create_chain+0x10a>
		scl = clst;							/* Cluster to start to find */
   2f054:	4645      	mov	r5, r8
   2f056:	e000      	b.n	2f05a <create_chain+0x36>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
   2f058:	2501      	movs	r5, #1
	if (fs->free_clst == 0) return 0;		/* No free cluster */
   2f05a:	693b      	ldr	r3, [r7, #16]
   2f05c:	2b00      	cmp	r3, #0
   2f05e:	d066      	beq.n	2f12e <create_chain+0x10a>
		if (scl == clst) {						/* Stretching an existing chain? */
   2f060:	4545      	cmp	r5, r8
   2f062:	d006      	beq.n	2f072 <create_chain+0x4e>
		ncl = 0;
   2f064:	f04f 0900 	mov.w	r9, #0
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
   2f068:	f1b9 0f00 	cmp.w	r9, #0
   2f06c:	d13a      	bne.n	2f0e4 <create_chain+0xc0>
			ncl = scl;	/* Start cluster */
   2f06e:	462c      	mov	r4, r5
   2f070:	e02f      	b.n	2f0d2 <create_chain+0xae>
			ncl = scl + 1;						/* Test if next cluster is free */
   2f072:	f105 0901 	add.w	r9, r5, #1
			if (ncl >= fs->n_fatent) ncl = 2;
   2f076:	697b      	ldr	r3, [r7, #20]
   2f078:	454b      	cmp	r3, r9
   2f07a:	d801      	bhi.n	2f080 <create_chain+0x5c>
   2f07c:	f04f 0902 	mov.w	r9, #2
			cs = get_fat(obj, ncl);				/* Get next cluster status */
   2f080:	4649      	mov	r1, r9
   2f082:	4630      	mov	r0, r6
   2f084:	f7ff ff10 	bl	2eea8 <get_fat>
   2f088:	4603      	mov	r3, r0
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
   2f08a:	2801      	cmp	r0, #1
   2f08c:	d04f      	beq.n	2f12e <create_chain+0x10a>
   2f08e:	f1b0 3fff 	cmp.w	r0, #4294967295
   2f092:	d04c      	beq.n	2f12e <create_chain+0x10a>
			if (cs != 0) {						/* Not free? */
   2f094:	2800      	cmp	r0, #0
   2f096:	d0e7      	beq.n	2f068 <create_chain+0x44>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
   2f098:	68fb      	ldr	r3, [r7, #12]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
   2f09a:	2b01      	cmp	r3, #1
   2f09c:	d905      	bls.n	2f0aa <create_chain+0x86>
   2f09e:	697a      	ldr	r2, [r7, #20]
   2f0a0:	429a      	cmp	r2, r3
   2f0a2:	d805      	bhi.n	2f0b0 <create_chain+0x8c>
				ncl = 0;
   2f0a4:	f04f 0900 	mov.w	r9, #0
   2f0a8:	e7de      	b.n	2f068 <create_chain+0x44>
   2f0aa:	f04f 0900 	mov.w	r9, #0
   2f0ae:	e7db      	b.n	2f068 <create_chain+0x44>
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
   2f0b0:	461d      	mov	r5, r3
				ncl = 0;
   2f0b2:	f04f 0900 	mov.w	r9, #0
   2f0b6:	e7d7      	b.n	2f068 <create_chain+0x44>
				cs = get_fat(obj, ncl);			/* Get the cluster status */
   2f0b8:	4621      	mov	r1, r4
   2f0ba:	4630      	mov	r0, r6
   2f0bc:	f7ff fef4 	bl	2eea8 <get_fat>
				if (cs == 0) break;				/* Found a free cluster? */
   2f0c0:	4603      	mov	r3, r0
   2f0c2:	b170      	cbz	r0, 2f0e2 <create_chain+0xbe>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
   2f0c4:	2801      	cmp	r0, #1
   2f0c6:	d032      	beq.n	2f12e <create_chain+0x10a>
   2f0c8:	f1b0 3fff 	cmp.w	r0, #4294967295
   2f0cc:	d02f      	beq.n	2f12e <create_chain+0x10a>
				if (ncl == scl) return 0;		/* No free cluster found? */
   2f0ce:	42ac      	cmp	r4, r5
   2f0d0:	d037      	beq.n	2f142 <create_chain+0x11e>
				ncl++;							/* Next cluster */
   2f0d2:	3401      	adds	r4, #1
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
   2f0d4:	697b      	ldr	r3, [r7, #20]
   2f0d6:	42a3      	cmp	r3, r4
   2f0d8:	d8ee      	bhi.n	2f0b8 <create_chain+0x94>
					if (ncl > scl) return 0;	/* No free cluster found? */
   2f0da:	2d01      	cmp	r5, #1
   2f0dc:	d92f      	bls.n	2f13e <create_chain+0x11a>
					ncl = 2;
   2f0de:	2402      	movs	r4, #2
   2f0e0:	e7ea      	b.n	2f0b8 <create_chain+0x94>
   2f0e2:	46a1      	mov	r9, r4
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
   2f0e4:	f04f 32ff 	mov.w	r2, #4294967295
   2f0e8:	4649      	mov	r1, r9
   2f0ea:	4638      	mov	r0, r7
   2f0ec:	f7ff fe56 	bl	2ed9c <put_fat>
		if (res == FR_OK && clst != 0) {
   2f0f0:	4603      	mov	r3, r0
   2f0f2:	b9c8      	cbnz	r0, 2f128 <create_chain+0x104>
   2f0f4:	f1b8 0f00 	cmp.w	r8, #0
   2f0f8:	d10f      	bne.n	2f11a <create_chain+0xf6>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
   2f0fa:	b9ab      	cbnz	r3, 2f128 <create_chain+0x104>
		fs->last_clst = ncl;
   2f0fc:	f8c7 900c 	str.w	r9, [r7, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
   2f100:	693a      	ldr	r2, [r7, #16]
   2f102:	697b      	ldr	r3, [r7, #20]
   2f104:	3b02      	subs	r3, #2
   2f106:	429a      	cmp	r2, r3
   2f108:	d801      	bhi.n	2f10e <create_chain+0xea>
   2f10a:	3a01      	subs	r2, #1
   2f10c:	613a      	str	r2, [r7, #16]
		fs->fsi_flag |= 1;
   2f10e:	793b      	ldrb	r3, [r7, #4]
   2f110:	f043 0301 	orr.w	r3, r3, #1
   2f114:	713b      	strb	r3, [r7, #4]
   2f116:	464b      	mov	r3, r9
   2f118:	e009      	b.n	2f12e <create_chain+0x10a>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
   2f11a:	464a      	mov	r2, r9
   2f11c:	4641      	mov	r1, r8
   2f11e:	4638      	mov	r0, r7
   2f120:	f7ff fe3c 	bl	2ed9c <put_fat>
   2f124:	4603      	mov	r3, r0
   2f126:	e7e8      	b.n	2f0fa <create_chain+0xd6>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
   2f128:	2b01      	cmp	r3, #1
   2f12a:	d003      	beq.n	2f134 <create_chain+0x110>
   2f12c:	2301      	movs	r3, #1
}
   2f12e:	4618      	mov	r0, r3
   2f130:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
   2f134:	f04f 33ff 	mov.w	r3, #4294967295
   2f138:	e7f9      	b.n	2f12e <create_chain+0x10a>
		if (cs < 2) return 1;				/* Test for insanity */
   2f13a:	2301      	movs	r3, #1
   2f13c:	e7f7      	b.n	2f12e <create_chain+0x10a>
					if (ncl > scl) return 0;	/* No free cluster found? */
   2f13e:	464b      	mov	r3, r9
   2f140:	e7f5      	b.n	2f12e <create_chain+0x10a>
				if (ncl == scl) return 0;		/* No free cluster found? */
   2f142:	464b      	mov	r3, r9
   2f144:	e7f3      	b.n	2f12e <create_chain+0x10a>

0002f146 <remove_chain>:
{
   2f146:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2f148:	460c      	mov	r4, r1
	FATFS *fs = obj->fs;
   2f14a:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
   2f14c:	2901      	cmp	r1, #1
   2f14e:	d92e      	bls.n	2f1ae <remove_chain+0x68>
   2f150:	4606      	mov	r6, r0
   2f152:	4611      	mov	r1, r2
   2f154:	696b      	ldr	r3, [r5, #20]
   2f156:	42a3      	cmp	r3, r4
   2f158:	d92b      	bls.n	2f1b2 <remove_chain+0x6c>
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
   2f15a:	b14a      	cbz	r2, 2f170 <remove_chain+0x2a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
   2f15c:	f04f 32ff 	mov.w	r2, #4294967295
   2f160:	4628      	mov	r0, r5
   2f162:	f7ff fe1b 	bl	2ed9c <put_fat>
		if (res != FR_OK) return res;
   2f166:	4607      	mov	r7, r0
   2f168:	b110      	cbz	r0, 2f170 <remove_chain+0x2a>
   2f16a:	e023      	b.n	2f1b4 <remove_chain+0x6e>
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
   2f16c:	42a2      	cmp	r2, r4
   2f16e:	d921      	bls.n	2f1b4 <remove_chain+0x6e>
		nxt = get_fat(obj, clst);			/* Get cluster status */
   2f170:	4627      	mov	r7, r4
   2f172:	4621      	mov	r1, r4
   2f174:	4630      	mov	r0, r6
   2f176:	f7ff fe97 	bl	2eea8 <get_fat>
		if (nxt == 0) break;				/* Empty cluster? */
   2f17a:	4604      	mov	r4, r0
   2f17c:	b1e0      	cbz	r0, 2f1b8 <remove_chain+0x72>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
   2f17e:	2801      	cmp	r0, #1
   2f180:	d01c      	beq.n	2f1bc <remove_chain+0x76>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
   2f182:	f1b0 3fff 	cmp.w	r0, #4294967295
   2f186:	d01b      	beq.n	2f1c0 <remove_chain+0x7a>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
   2f188:	2200      	movs	r2, #0
   2f18a:	4639      	mov	r1, r7
   2f18c:	4628      	mov	r0, r5
   2f18e:	f7ff fe05 	bl	2ed9c <put_fat>
			if (res != FR_OK) return res;
   2f192:	4607      	mov	r7, r0
   2f194:	b970      	cbnz	r0, 2f1b4 <remove_chain+0x6e>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
   2f196:	692b      	ldr	r3, [r5, #16]
   2f198:	696a      	ldr	r2, [r5, #20]
   2f19a:	1e91      	subs	r1, r2, #2
   2f19c:	428b      	cmp	r3, r1
   2f19e:	d2e5      	bcs.n	2f16c <remove_chain+0x26>
			fs->free_clst++;
   2f1a0:	3301      	adds	r3, #1
   2f1a2:	612b      	str	r3, [r5, #16]
			fs->fsi_flag |= 1;
   2f1a4:	792b      	ldrb	r3, [r5, #4]
   2f1a6:	f043 0301 	orr.w	r3, r3, #1
   2f1aa:	712b      	strb	r3, [r5, #4]
   2f1ac:	e7de      	b.n	2f16c <remove_chain+0x26>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
   2f1ae:	2702      	movs	r7, #2
   2f1b0:	e000      	b.n	2f1b4 <remove_chain+0x6e>
   2f1b2:	2702      	movs	r7, #2
}
   2f1b4:	4638      	mov	r0, r7
   2f1b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return FR_OK;
   2f1b8:	2700      	movs	r7, #0
   2f1ba:	e7fb      	b.n	2f1b4 <remove_chain+0x6e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
   2f1bc:	2702      	movs	r7, #2
   2f1be:	e7f9      	b.n	2f1b4 <remove_chain+0x6e>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
   2f1c0:	2701      	movs	r7, #1
   2f1c2:	e7f7      	b.n	2f1b4 <remove_chain+0x6e>

0002f1c4 <dir_remove>:
{
   2f1c4:	b538      	push	{r3, r4, r5, lr}
   2f1c6:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
   2f1c8:	6805      	ldr	r5, [r0, #0]
	res = move_window(fs, dp->sect);
   2f1ca:	6981      	ldr	r1, [r0, #24]
   2f1cc:	4628      	mov	r0, r5
   2f1ce:	f7ff fd92 	bl	2ecf6 <move_window>
	if (res == FR_OK) {
   2f1d2:	b920      	cbnz	r0, 2f1de <dir_remove+0x1a>
		dp->dir[DIR_Name] = DDEM;	/* Mark the entry 'deleted'.*/
   2f1d4:	69e3      	ldr	r3, [r4, #28]
   2f1d6:	22e5      	movs	r2, #229	; 0xe5
   2f1d8:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
   2f1da:	2301      	movs	r3, #1
   2f1dc:	70eb      	strb	r3, [r5, #3]
}
   2f1de:	bd38      	pop	{r3, r4, r5, pc}

0002f1e0 <dir_clear>:
{
   2f1e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2f1e2:	4605      	mov	r5, r0
   2f1e4:	460c      	mov	r4, r1
	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
   2f1e6:	f7ff fd62 	bl	2ecae <sync_window>
   2f1ea:	b108      	cbz	r0, 2f1f0 <dir_clear+0x10>
   2f1ec:	2001      	movs	r0, #1
}
   2f1ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sect = clst2sect(fs, clst);		/* Top of the cluster */
   2f1f0:	4621      	mov	r1, r4
   2f1f2:	4628      	mov	r0, r5
   2f1f4:	f7ff fccc 	bl	2eb90 <clst2sect>
   2f1f8:	4606      	mov	r6, r0
	fs->winsect = sect;				/* Set window to top of the cluster */
   2f1fa:	62e8      	str	r0, [r5, #44]	; 0x2c
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
   2f1fc:	f105 0730 	add.w	r7, r5, #48	; 0x30
   2f200:	f44f 7200 	mov.w	r2, #512	; 0x200
   2f204:	2100      	movs	r1, #0
   2f206:	4638      	mov	r0, r7
   2f208:	f7fa fd02 	bl	29c10 <memset>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
   2f20c:	2400      	movs	r4, #0
   2f20e:	e000      	b.n	2f212 <dir_clear+0x32>
   2f210:	3401      	adds	r4, #1
   2f212:	896b      	ldrh	r3, [r5, #10]
   2f214:	42a3      	cmp	r3, r4
   2f216:	d907      	bls.n	2f228 <dir_clear+0x48>
   2f218:	2301      	movs	r3, #1
   2f21a:	19a2      	adds	r2, r4, r6
   2f21c:	4639      	mov	r1, r7
   2f21e:	7868      	ldrb	r0, [r5, #1]
   2f220:	f7f5 fc12 	bl	24a48 <disk_write>
   2f224:	2800      	cmp	r0, #0
   2f226:	d0f3      	beq.n	2f210 <dir_clear+0x30>
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
   2f228:	8968      	ldrh	r0, [r5, #10]
   2f22a:	1b00      	subs	r0, r0, r4
   2f22c:	bf18      	it	ne
   2f22e:	2001      	movne	r0, #1
   2f230:	e7dd      	b.n	2f1ee <dir_clear+0xe>

0002f232 <dir_next>:
{
   2f232:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2f236:	4604      	mov	r4, r0
   2f238:	4688      	mov	r8, r1
	FATFS *fs = dp->obj.fs;
   2f23a:	6807      	ldr	r7, [r0, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
   2f23c:	6905      	ldr	r5, [r0, #16]
   2f23e:	3520      	adds	r5, #32
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
   2f240:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
   2f244:	d301      	bcc.n	2f24a <dir_next+0x18>
   2f246:	2300      	movs	r3, #0
   2f248:	6183      	str	r3, [r0, #24]
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
   2f24a:	69a3      	ldr	r3, [r4, #24]
   2f24c:	2b00      	cmp	r3, #0
   2f24e:	d046      	beq.n	2f2de <dir_next+0xac>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
   2f250:	f3c5 0608 	ubfx	r6, r5, #0, #9
   2f254:	b93e      	cbnz	r6, 2f266 <dir_next+0x34>
		dp->sect++;				/* Next sector */
   2f256:	3301      	adds	r3, #1
   2f258:	61a3      	str	r3, [r4, #24]
		if (dp->clust == 0) {	/* Static table */
   2f25a:	6961      	ldr	r1, [r4, #20]
   2f25c:	b979      	cbnz	r1, 2f27e <dir_next+0x4c>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
   2f25e:	893b      	ldrh	r3, [r7, #8]
   2f260:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
   2f264:	d907      	bls.n	2f276 <dir_next+0x44>
	dp->dptr = ofs;						/* Current entry */
   2f266:	6125      	str	r5, [r4, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
   2f268:	f107 0330 	add.w	r3, r7, #48	; 0x30
   2f26c:	4433      	add	r3, r6
   2f26e:	61e3      	str	r3, [r4, #28]
	return FR_OK;
   2f270:	2000      	movs	r0, #0
}
   2f272:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				dp->sect = 0; return FR_NO_FILE;
   2f276:	2300      	movs	r3, #0
   2f278:	61a3      	str	r3, [r4, #24]
   2f27a:	2004      	movs	r0, #4
   2f27c:	e7f9      	b.n	2f272 <dir_next+0x40>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
   2f27e:	897b      	ldrh	r3, [r7, #10]
   2f280:	3b01      	subs	r3, #1
   2f282:	ea13 2355 	ands.w	r3, r3, r5, lsr #9
   2f286:	d1ee      	bne.n	2f266 <dir_next+0x34>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
   2f288:	4620      	mov	r0, r4
   2f28a:	f7ff fe0d 	bl	2eea8 <get_fat>
   2f28e:	4681      	mov	r9, r0
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
   2f290:	2801      	cmp	r0, #1
   2f292:	d926      	bls.n	2f2e2 <dir_next+0xb0>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   2f294:	f1b0 3fff 	cmp.w	r0, #4294967295
   2f298:	d025      	beq.n	2f2e6 <dir_next+0xb4>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
   2f29a:	697b      	ldr	r3, [r7, #20]
   2f29c:	4283      	cmp	r3, r0
   2f29e:	d812      	bhi.n	2f2c6 <dir_next+0x94>
					if (!stretch) {								/* If no stretch, report EOT */
   2f2a0:	f1b8 0f00 	cmp.w	r8, #0
   2f2a4:	d017      	beq.n	2f2d6 <dir_next+0xa4>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
   2f2a6:	6961      	ldr	r1, [r4, #20]
   2f2a8:	4620      	mov	r0, r4
   2f2aa:	f7ff febb 	bl	2f024 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
   2f2ae:	4681      	mov	r9, r0
   2f2b0:	b1d8      	cbz	r0, 2f2ea <dir_next+0xb8>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
   2f2b2:	2801      	cmp	r0, #1
   2f2b4:	d01b      	beq.n	2f2ee <dir_next+0xbc>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   2f2b6:	f1b0 3fff 	cmp.w	r0, #4294967295
   2f2ba:	d01a      	beq.n	2f2f2 <dir_next+0xc0>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
   2f2bc:	4601      	mov	r1, r0
   2f2be:	4638      	mov	r0, r7
   2f2c0:	f7ff ff8e 	bl	2f1e0 <dir_clear>
   2f2c4:	b9b8      	cbnz	r0, 2f2f6 <dir_next+0xc4>
				dp->clust = clst;		/* Initialize data for new cluster */
   2f2c6:	f8c4 9014 	str.w	r9, [r4, #20]
				dp->sect = clst2sect(fs, clst);
   2f2ca:	4649      	mov	r1, r9
   2f2cc:	4638      	mov	r0, r7
   2f2ce:	f7ff fc5f 	bl	2eb90 <clst2sect>
   2f2d2:	61a0      	str	r0, [r4, #24]
   2f2d4:	e7c7      	b.n	2f266 <dir_next+0x34>
						dp->sect = 0; return FR_NO_FILE;
   2f2d6:	2300      	movs	r3, #0
   2f2d8:	61a3      	str	r3, [r4, #24]
   2f2da:	2004      	movs	r0, #4
   2f2dc:	e7c9      	b.n	2f272 <dir_next+0x40>
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
   2f2de:	2004      	movs	r0, #4
   2f2e0:	e7c7      	b.n	2f272 <dir_next+0x40>
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
   2f2e2:	2002      	movs	r0, #2
   2f2e4:	e7c5      	b.n	2f272 <dir_next+0x40>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   2f2e6:	2001      	movs	r0, #1
   2f2e8:	e7c3      	b.n	2f272 <dir_next+0x40>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
   2f2ea:	2007      	movs	r0, #7
   2f2ec:	e7c1      	b.n	2f272 <dir_next+0x40>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
   2f2ee:	2002      	movs	r0, #2
   2f2f0:	e7bf      	b.n	2f272 <dir_next+0x40>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   2f2f2:	2001      	movs	r0, #1
   2f2f4:	e7bd      	b.n	2f272 <dir_next+0x40>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
   2f2f6:	2001      	movs	r0, #1
   2f2f8:	e7bb      	b.n	2f272 <dir_next+0x40>

0002f2fa <dir_find>:
{
   2f2fa:	b570      	push	{r4, r5, r6, lr}
   2f2fc:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
   2f2fe:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
   2f300:	2100      	movs	r1, #0
   2f302:	f7ff fe39 	bl	2ef78 <dir_sdi>
	if (res != FR_OK) return res;
   2f306:	4605      	mov	r5, r0
   2f308:	b140      	cbz	r0, 2f31c <dir_find+0x22>
}
   2f30a:	4628      	mov	r0, r5
   2f30c:	bd70      	pop	{r4, r5, r6, pc}
		res = dir_next(dp, 0);	/* Next entry */
   2f30e:	2100      	movs	r1, #0
   2f310:	4620      	mov	r0, r4
   2f312:	f7ff ff8e 	bl	2f232 <dir_next>
	} while (res == FR_OK);
   2f316:	4605      	mov	r5, r0
   2f318:	2800      	cmp	r0, #0
   2f31a:	d1f6      	bne.n	2f30a <dir_find+0x10>
		res = move_window(fs, dp->sect);
   2f31c:	69a1      	ldr	r1, [r4, #24]
   2f31e:	4630      	mov	r0, r6
   2f320:	f7ff fce9 	bl	2ecf6 <move_window>
		if (res != FR_OK) break;
   2f324:	4605      	mov	r5, r0
   2f326:	2800      	cmp	r0, #0
   2f328:	d1ef      	bne.n	2f30a <dir_find+0x10>
		c = dp->dir[DIR_Name];
   2f32a:	69e0      	ldr	r0, [r4, #28]
   2f32c:	7803      	ldrb	r3, [r0, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   2f32e:	b17b      	cbz	r3, 2f350 <dir_find+0x56>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
   2f330:	7ac3      	ldrb	r3, [r0, #11]
   2f332:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2f336:	71a3      	strb	r3, [r4, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
   2f338:	7ac3      	ldrb	r3, [r0, #11]
   2f33a:	f013 0f08 	tst.w	r3, #8
   2f33e:	d1e6      	bne.n	2f30e <dir_find+0x14>
   2f340:	220b      	movs	r2, #11
   2f342:	f104 0120 	add.w	r1, r4, #32
   2f346:	f7fa fc22 	bl	29b8e <memcmp>
   2f34a:	2800      	cmp	r0, #0
   2f34c:	d1df      	bne.n	2f30e <dir_find+0x14>
   2f34e:	e7dc      	b.n	2f30a <dir_find+0x10>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   2f350:	2504      	movs	r5, #4
   2f352:	e7da      	b.n	2f30a <dir_find+0x10>

0002f354 <dir_alloc>:
{
   2f354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2f356:	4604      	mov	r4, r0
   2f358:	460e      	mov	r6, r1
	FATFS *fs = dp->obj.fs;
   2f35a:	6807      	ldr	r7, [r0, #0]
	res = dir_sdi(dp, 0);
   2f35c:	2100      	movs	r1, #0
   2f35e:	f7ff fe0b 	bl	2ef78 <dir_sdi>
	if (res == FR_OK) {
   2f362:	4602      	mov	r2, r0
   2f364:	b9c0      	cbnz	r0, 2f398 <dir_alloc+0x44>
		n = 0;
   2f366:	2500      	movs	r5, #0
   2f368:	e008      	b.n	2f37c <dir_alloc+0x28>
				if (++n == n_ent) break;	/* Is a block of contiguous free entries found? */
   2f36a:	3501      	adds	r5, #1
   2f36c:	42b5      	cmp	r5, r6
   2f36e:	d013      	beq.n	2f398 <dir_alloc+0x44>
			res = dir_next(dp, 1);	/* Next entry with table stretch enabled */
   2f370:	2101      	movs	r1, #1
   2f372:	4620      	mov	r0, r4
   2f374:	f7ff ff5d 	bl	2f232 <dir_next>
		} while (res == FR_OK);
   2f378:	4602      	mov	r2, r0
   2f37a:	b968      	cbnz	r0, 2f398 <dir_alloc+0x44>
			res = move_window(fs, dp->sect);
   2f37c:	69a1      	ldr	r1, [r4, #24]
   2f37e:	4638      	mov	r0, r7
   2f380:	f7ff fcb9 	bl	2ecf6 <move_window>
			if (res != FR_OK) break;
   2f384:	4602      	mov	r2, r0
   2f386:	b938      	cbnz	r0, 2f398 <dir_alloc+0x44>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {	/* Is the entry free? */
   2f388:	69e3      	ldr	r3, [r4, #28]
   2f38a:	781b      	ldrb	r3, [r3, #0]
   2f38c:	2be5      	cmp	r3, #229	; 0xe5
   2f38e:	d0ec      	beq.n	2f36a <dir_alloc+0x16>
   2f390:	2b00      	cmp	r3, #0
   2f392:	d0ea      	beq.n	2f36a <dir_alloc+0x16>
				n = 0;				/* Not a free entry, restart to search */
   2f394:	2500      	movs	r5, #0
   2f396:	e7eb      	b.n	2f370 <dir_alloc+0x1c>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
   2f398:	2a04      	cmp	r2, #4
   2f39a:	d001      	beq.n	2f3a0 <dir_alloc+0x4c>
}
   2f39c:	4610      	mov	r0, r2
   2f39e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
   2f3a0:	2207      	movs	r2, #7
   2f3a2:	e7fb      	b.n	2f39c <dir_alloc+0x48>

0002f3a4 <dir_read>:
{
   2f3a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2f3a6:	4604      	mov	r4, r0
   2f3a8:	460e      	mov	r6, r1
	FATFS *fs = dp->obj.fs;
   2f3aa:	6805      	ldr	r5, [r0, #0]
	FRESULT res = FR_NO_FILE;
   2f3ac:	2704      	movs	r7, #4
	while (dp->sect) {
   2f3ae:	e005      	b.n	2f3bc <dir_read+0x18>
		res = dir_next(dp, 0);		/* Next entry */
   2f3b0:	2100      	movs	r1, #0
   2f3b2:	4620      	mov	r0, r4
   2f3b4:	f7ff ff3d 	bl	2f232 <dir_next>
		if (res != FR_OK) break;
   2f3b8:	4607      	mov	r7, r0
   2f3ba:	b9e8      	cbnz	r0, 2f3f8 <dir_read+0x54>
	while (dp->sect) {
   2f3bc:	69a1      	ldr	r1, [r4, #24]
   2f3be:	b1d9      	cbz	r1, 2f3f8 <dir_read+0x54>
		res = move_window(fs, dp->sect);
   2f3c0:	4628      	mov	r0, r5
   2f3c2:	f7ff fc98 	bl	2ecf6 <move_window>
		if (res != FR_OK) break;
   2f3c6:	4607      	mov	r7, r0
   2f3c8:	b9b0      	cbnz	r0, 2f3f8 <dir_read+0x54>
		b = dp->dir[DIR_Name];	/* Test for the entry type */
   2f3ca:	69e3      	ldr	r3, [r4, #28]
   2f3cc:	781a      	ldrb	r2, [r3, #0]
		if (b == 0) {
   2f3ce:	b192      	cbz	r2, 2f3f6 <dir_read+0x52>
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
   2f3d0:	7adb      	ldrb	r3, [r3, #11]
   2f3d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2f3d6:	71a3      	strb	r3, [r4, #6]
			if (b != DDEM && b != '.' && attr != AM_LFN && (int)((attr & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
   2f3d8:	2ae5      	cmp	r2, #229	; 0xe5
   2f3da:	d0e9      	beq.n	2f3b0 <dir_read+0xc>
   2f3dc:	2a2e      	cmp	r2, #46	; 0x2e
   2f3de:	d0e7      	beq.n	2f3b0 <dir_read+0xc>
   2f3e0:	2b0f      	cmp	r3, #15
   2f3e2:	d0e5      	beq.n	2f3b0 <dir_read+0xc>
   2f3e4:	f023 0320 	bic.w	r3, r3, #32
   2f3e8:	2b08      	cmp	r3, #8
   2f3ea:	bf14      	ite	ne
   2f3ec:	2300      	movne	r3, #0
   2f3ee:	2301      	moveq	r3, #1
   2f3f0:	42b3      	cmp	r3, r6
   2f3f2:	d1dd      	bne.n	2f3b0 <dir_read+0xc>
   2f3f4:	e000      	b.n	2f3f8 <dir_read+0x54>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
   2f3f6:	2704      	movs	r7, #4
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
   2f3f8:	b10f      	cbz	r7, 2f3fe <dir_read+0x5a>
   2f3fa:	2300      	movs	r3, #0
   2f3fc:	61a3      	str	r3, [r4, #24]
}
   2f3fe:	4638      	mov	r0, r7
   2f400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002f402 <follow_path>:
{
   2f402:	b530      	push	{r4, r5, lr}
   2f404:	b083      	sub	sp, #12
   2f406:	4604      	mov	r4, r0
   2f408:	9101      	str	r1, [sp, #4]
	FATFS *fs = dp->obj.fs;
   2f40a:	6805      	ldr	r5, [r0, #0]
		while (IsSeparator(*path)) path++;	/* Strip separators */
   2f40c:	e001      	b.n	2f412 <follow_path+0x10>
   2f40e:	3301      	adds	r3, #1
   2f410:	9301      	str	r3, [sp, #4]
   2f412:	9b01      	ldr	r3, [sp, #4]
   2f414:	781a      	ldrb	r2, [r3, #0]
   2f416:	2a2f      	cmp	r2, #47	; 0x2f
   2f418:	d0f9      	beq.n	2f40e <follow_path+0xc>
   2f41a:	2a5c      	cmp	r2, #92	; 0x5c
   2f41c:	d0f7      	beq.n	2f40e <follow_path+0xc>
		dp->obj.sclust = 0;					/* Start from the root directory */
   2f41e:	2200      	movs	r2, #0
   2f420:	60a2      	str	r2, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
   2f422:	781b      	ldrb	r3, [r3, #0]
   2f424:	2b1f      	cmp	r3, #31
   2f426:	d91e      	bls.n	2f466 <follow_path+0x64>
			res = create_name(dp, &path);	/* Get a segment name of the path */
   2f428:	a901      	add	r1, sp, #4
   2f42a:	4620      	mov	r0, r4
   2f42c:	f7f4 fc8e 	bl	23d4c <create_name>
			if (res != FR_OK) break;
   2f430:	4603      	mov	r3, r0
   2f432:	bb00      	cbnz	r0, 2f476 <follow_path+0x74>
			res = dir_find(dp);				/* Find an object with the segment name */
   2f434:	4620      	mov	r0, r4
   2f436:	f7ff ff60 	bl	2f2fa <dir_find>
			ns = dp->fn[NSFLAG];
   2f43a:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
			if (res != FR_OK) {				/* Failed to find the object */
   2f43e:	4603      	mov	r3, r0
   2f440:	b9e0      	cbnz	r0, 2f47c <follow_path+0x7a>
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
   2f442:	f012 0f04 	tst.w	r2, #4
   2f446:	d116      	bne.n	2f476 <follow_path+0x74>
			if (!(dp->obj.attr & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
   2f448:	79a3      	ldrb	r3, [r4, #6]
   2f44a:	f013 0f10 	tst.w	r3, #16
   2f44e:	d01c      	beq.n	2f48a <follow_path+0x88>
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
   2f450:	f105 0130 	add.w	r1, r5, #48	; 0x30
   2f454:	6923      	ldr	r3, [r4, #16]
   2f456:	f3c3 0308 	ubfx	r3, r3, #0, #9
   2f45a:	4419      	add	r1, r3
   2f45c:	4628      	mov	r0, r5
   2f45e:	f7ff fba3 	bl	2eba8 <ld_clust>
   2f462:	60a0      	str	r0, [r4, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
   2f464:	e7e0      	b.n	2f428 <follow_path+0x26>
		dp->fn[NSFLAG] = NS_NONAME;
   2f466:	2380      	movs	r3, #128	; 0x80
   2f468:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
		res = dir_sdi(dp, 0);
   2f46c:	4611      	mov	r1, r2
   2f46e:	4620      	mov	r0, r4
   2f470:	f7ff fd82 	bl	2ef78 <dir_sdi>
   2f474:	4603      	mov	r3, r0
}
   2f476:	4618      	mov	r0, r3
   2f478:	b003      	add	sp, #12
   2f47a:	bd30      	pop	{r4, r5, pc}
				if (res == FR_NO_FILE) {	/* Object is not found */
   2f47c:	2804      	cmp	r0, #4
   2f47e:	d1fa      	bne.n	2f476 <follow_path+0x74>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
   2f480:	f012 0f04 	tst.w	r2, #4
   2f484:	d1f7      	bne.n	2f476 <follow_path+0x74>
   2f486:	2305      	movs	r3, #5
   2f488:	e7f5      	b.n	2f476 <follow_path+0x74>
				res = FR_NO_PATH; break;
   2f48a:	2305      	movs	r3, #5
   2f48c:	e7f3      	b.n	2f476 <follow_path+0x74>

0002f48e <dir_register>:
{
   2f48e:	b570      	push	{r4, r5, r6, lr}
   2f490:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
   2f492:	6806      	ldr	r6, [r0, #0]
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
   2f494:	2101      	movs	r1, #1
   2f496:	f7ff ff5d 	bl	2f354 <dir_alloc>
	if (res == FR_OK) {
   2f49a:	4605      	mov	r5, r0
   2f49c:	b108      	cbz	r0, 2f4a2 <dir_register+0x14>
}
   2f49e:	4628      	mov	r0, r5
   2f4a0:	bd70      	pop	{r4, r5, r6, pc}
		res = move_window(fs, dp->sect);
   2f4a2:	69a1      	ldr	r1, [r4, #24]
   2f4a4:	4630      	mov	r0, r6
   2f4a6:	f7ff fc26 	bl	2ecf6 <move_window>
		if (res == FR_OK) {
   2f4aa:	4605      	mov	r5, r0
   2f4ac:	2800      	cmp	r0, #0
   2f4ae:	d1f6      	bne.n	2f49e <dir_register+0x10>
			memset(dp->dir, 0, SZDIRE);	/* Clean the entry */
   2f4b0:	2220      	movs	r2, #32
   2f4b2:	2100      	movs	r1, #0
   2f4b4:	69e0      	ldr	r0, [r4, #28]
   2f4b6:	f7fa fbab 	bl	29c10 <memset>
			memcpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
   2f4ba:	220b      	movs	r2, #11
   2f4bc:	f104 0120 	add.w	r1, r4, #32
   2f4c0:	69e0      	ldr	r0, [r4, #28]
   2f4c2:	f7fa fb76 	bl	29bb2 <memcpy>
			fs->wflag = 1;
   2f4c6:	2301      	movs	r3, #1
   2f4c8:	70f3      	strb	r3, [r6, #3]
   2f4ca:	e7e8      	b.n	2f49e <dir_register+0x10>

0002f4cc <f_read>:
{
   2f4cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f4d0:	b085      	sub	sp, #20
   2f4d2:	4605      	mov	r5, r0
   2f4d4:	460f      	mov	r7, r1
   2f4d6:	4614      	mov	r4, r2
   2f4d8:	4699      	mov	r9, r3
	*br = 0;	/* Clear read byte counter */
   2f4da:	2300      	movs	r3, #0
   2f4dc:	f8c9 3000 	str.w	r3, [r9]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
   2f4e0:	a903      	add	r1, sp, #12
   2f4e2:	f7ff fbc1 	bl	2ec68 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
   2f4e6:	4682      	mov	sl, r0
   2f4e8:	2800      	cmp	r0, #0
   2f4ea:	f040 8098 	bne.w	2f61e <f_read+0x152>
   2f4ee:	f895 a011 	ldrb.w	sl, [r5, #17]
   2f4f2:	f1ba 0f00 	cmp.w	sl, #0
   2f4f6:	f040 8092 	bne.w	2f61e <f_read+0x152>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
   2f4fa:	7c2b      	ldrb	r3, [r5, #16]
   2f4fc:	f013 0f01 	tst.w	r3, #1
   2f500:	f000 8096 	beq.w	2f630 <f_read+0x164>
	remain = fp->obj.objsize - fp->fptr;
   2f504:	68ee      	ldr	r6, [r5, #12]
   2f506:	696b      	ldr	r3, [r5, #20]
   2f508:	1af6      	subs	r6, r6, r3
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
   2f50a:	42a6      	cmp	r6, r4
   2f50c:	d34b      	bcc.n	2f5a6 <f_read+0xda>
   2f50e:	4626      	mov	r6, r4
   2f510:	e049      	b.n	2f5a6 <f_read+0xda>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
   2f512:	69a9      	ldr	r1, [r5, #24]
   2f514:	4628      	mov	r0, r5
   2f516:	f7ff fcc7 	bl	2eea8 <get_fat>
   2f51a:	e056      	b.n	2f5ca <f_read+0xfe>
				if (clst < 2) ABORT(fs, FR_INT_ERR);
   2f51c:	f04f 0a02 	mov.w	sl, #2
   2f520:	f885 a011 	strb.w	sl, [r5, #17]
   2f524:	e07b      	b.n	2f61e <f_read+0x152>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
   2f526:	f04f 0a01 	mov.w	sl, #1
   2f52a:	f885 a011 	strb.w	sl, [r5, #17]
   2f52e:	e076      	b.n	2f61e <f_read+0x152>
			if (sect == 0) ABORT(fs, FR_INT_ERR);
   2f530:	f04f 0a02 	mov.w	sl, #2
   2f534:	f885 a011 	strb.w	sl, [r5, #17]
   2f538:	e071      	b.n	2f61e <f_read+0x152>
				if (fs->wflag && fs->winsect - sect < cc) {
   2f53a:	9903      	ldr	r1, [sp, #12]
   2f53c:	78cb      	ldrb	r3, [r1, #3]
   2f53e:	b123      	cbz	r3, 2f54a <f_read+0x7e>
   2f540:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
   2f542:	9b01      	ldr	r3, [sp, #4]
   2f544:	1ac0      	subs	r0, r0, r3
   2f546:	42a0      	cmp	r0, r4
   2f548:	d301      	bcc.n	2f54e <f_read+0x82>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
   2f54a:	0264      	lsls	r4, r4, #9
				continue;
   2f54c:	e021      	b.n	2f592 <f_read+0xc6>
					memcpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
   2f54e:	f44f 7200 	mov.w	r2, #512	; 0x200
   2f552:	3130      	adds	r1, #48	; 0x30
   2f554:	eb07 2040 	add.w	r0, r7, r0, lsl #9
   2f558:	f7fa fb2b 	bl	29bb2 <memcpy>
   2f55c:	e7f5      	b.n	2f54a <f_read+0x7e>
			fp->sect = sect;
   2f55e:	9b01      	ldr	r3, [sp, #4]
   2f560:	61eb      	str	r3, [r5, #28]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
   2f562:	696c      	ldr	r4, [r5, #20]
   2f564:	f3c4 0408 	ubfx	r4, r4, #0, #9
   2f568:	f5c4 7400 	rsb	r4, r4, #512	; 0x200
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
   2f56c:	42a6      	cmp	r6, r4
   2f56e:	d200      	bcs.n	2f572 <f_read+0xa6>
   2f570:	4634      	mov	r4, r6
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
   2f572:	69e9      	ldr	r1, [r5, #28]
   2f574:	9803      	ldr	r0, [sp, #12]
   2f576:	f7ff fbbe 	bl	2ecf6 <move_window>
   2f57a:	2800      	cmp	r0, #0
   2f57c:	d153      	bne.n	2f626 <f_read+0x15a>
		memcpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
   2f57e:	9903      	ldr	r1, [sp, #12]
   2f580:	3130      	adds	r1, #48	; 0x30
   2f582:	696b      	ldr	r3, [r5, #20]
   2f584:	f3c3 0308 	ubfx	r3, r3, #0, #9
   2f588:	4622      	mov	r2, r4
   2f58a:	4419      	add	r1, r3
   2f58c:	4638      	mov	r0, r7
   2f58e:	f7fa fb10 	bl	29bb2 <memcpy>
	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
   2f592:	1b36      	subs	r6, r6, r4
   2f594:	f8d9 3000 	ldr.w	r3, [r9]
   2f598:	4423      	add	r3, r4
   2f59a:	f8c9 3000 	str.w	r3, [r9]
   2f59e:	4427      	add	r7, r4
   2f5a0:	696b      	ldr	r3, [r5, #20]
   2f5a2:	4423      	add	r3, r4
   2f5a4:	616b      	str	r3, [r5, #20]
   2f5a6:	2e00      	cmp	r6, #0
   2f5a8:	d039      	beq.n	2f61e <f_read+0x152>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
   2f5aa:	696b      	ldr	r3, [r5, #20]
   2f5ac:	f3c3 0208 	ubfx	r2, r3, #0, #9
   2f5b0:	2a00      	cmp	r2, #0
   2f5b2:	d1d6      	bne.n	2f562 <f_read+0x96>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
   2f5b4:	9a03      	ldr	r2, [sp, #12]
   2f5b6:	f8b2 800a 	ldrh.w	r8, [r2, #10]
   2f5ba:	f108 38ff 	add.w	r8, r8, #4294967295
			if (csect == 0) {					/* On the cluster boundary? */
   2f5be:	ea18 2853 	ands.w	r8, r8, r3, lsr #9
   2f5c2:	d108      	bne.n	2f5d6 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
   2f5c4:	2b00      	cmp	r3, #0
   2f5c6:	d1a4      	bne.n	2f512 <f_read+0x46>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
   2f5c8:	68a8      	ldr	r0, [r5, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
   2f5ca:	2801      	cmp	r0, #1
   2f5cc:	d9a6      	bls.n	2f51c <f_read+0x50>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
   2f5ce:	f1b0 3fff 	cmp.w	r0, #4294967295
   2f5d2:	d0a8      	beq.n	2f526 <f_read+0x5a>
				fp->clust = clst;				/* Update current cluster */
   2f5d4:	61a8      	str	r0, [r5, #24]
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
   2f5d6:	f8dd b00c 	ldr.w	fp, [sp, #12]
   2f5da:	69a9      	ldr	r1, [r5, #24]
   2f5dc:	4658      	mov	r0, fp
   2f5de:	f7ff fad7 	bl	2eb90 <clst2sect>
			if (sect == 0) ABORT(fs, FR_INT_ERR);
   2f5e2:	2800      	cmp	r0, #0
   2f5e4:	d0a4      	beq.n	2f530 <f_read+0x64>
			sect += csect;
   2f5e6:	eb08 0300 	add.w	r3, r8, r0
   2f5ea:	9301      	str	r3, [sp, #4]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
   2f5ec:	0a74      	lsrs	r4, r6, #9
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
   2f5ee:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   2f5f2:	d3b4      	bcc.n	2f55e <f_read+0x92>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
   2f5f4:	eb08 0304 	add.w	r3, r8, r4
   2f5f8:	f8bb 200a 	ldrh.w	r2, [fp, #10]
   2f5fc:	4293      	cmp	r3, r2
   2f5fe:	d901      	bls.n	2f604 <f_read+0x138>
					cc = fs->csize - csect;
   2f600:	eba2 0408 	sub.w	r4, r2, r8
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
   2f604:	4623      	mov	r3, r4
   2f606:	9a01      	ldr	r2, [sp, #4]
   2f608:	4639      	mov	r1, r7
   2f60a:	f89b 0001 	ldrb.w	r0, [fp, #1]
   2f60e:	f7f5 fa0d 	bl	24a2c <disk_read>
   2f612:	2800      	cmp	r0, #0
   2f614:	d091      	beq.n	2f53a <f_read+0x6e>
   2f616:	f04f 0a01 	mov.w	sl, #1
   2f61a:	f885 a011 	strb.w	sl, [r5, #17]
}
   2f61e:	4650      	mov	r0, sl
   2f620:	b005      	add	sp, #20
   2f622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
   2f626:	f04f 0a01 	mov.w	sl, #1
   2f62a:	f885 a011 	strb.w	sl, [r5, #17]
   2f62e:	e7f6      	b.n	2f61e <f_read+0x152>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
   2f630:	f04f 0a07 	mov.w	sl, #7
   2f634:	e7f3      	b.n	2f61e <f_read+0x152>

0002f636 <f_write>:
{
   2f636:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f63a:	b085      	sub	sp, #20
   2f63c:	4604      	mov	r4, r0
   2f63e:	460f      	mov	r7, r1
   2f640:	4616      	mov	r6, r2
   2f642:	4699      	mov	r9, r3
	*bw = 0;	/* Clear write byte counter */
   2f644:	2300      	movs	r3, #0
   2f646:	f8c9 3000 	str.w	r3, [r9]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
   2f64a:	a903      	add	r1, sp, #12
   2f64c:	f7ff fb0c 	bl	2ec68 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
   2f650:	4682      	mov	sl, r0
   2f652:	2800      	cmp	r0, #0
   2f654:	d146      	bne.n	2f6e4 <f_write+0xae>
   2f656:	f894 a011 	ldrb.w	sl, [r4, #17]
   2f65a:	f1ba 0f00 	cmp.w	sl, #0
   2f65e:	d141      	bne.n	2f6e4 <f_write+0xae>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
   2f660:	7c23      	ldrb	r3, [r4, #16]
   2f662:	f013 0f02 	tst.w	r3, #2
   2f666:	f000 80ce 	beq.w	2f806 <f_write+0x1d0>
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
   2f66a:	6963      	ldr	r3, [r4, #20]
   2f66c:	42f3      	cmn	r3, r6
   2f66e:	f0c0 8098 	bcc.w	2f7a2 <f_write+0x16c>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
   2f672:	43de      	mvns	r6, r3
   2f674:	e095      	b.n	2f7a2 <f_write+0x16c>
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
   2f676:	69a1      	ldr	r1, [r4, #24]
   2f678:	4620      	mov	r0, r4
   2f67a:	f7ff fcd3 	bl	2f024 <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   2f67e:	2800      	cmp	r0, #0
   2f680:	f000 80bc 	beq.w	2f7fc <f_write+0x1c6>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
   2f684:	2801      	cmp	r0, #1
   2f686:	d031      	beq.n	2f6ec <f_write+0xb6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
   2f688:	f1b0 3fff 	cmp.w	r0, #4294967295
   2f68c:	d033      	beq.n	2f6f6 <f_write+0xc0>
				fp->clust = clst;			/* Update current cluster */
   2f68e:	61a0      	str	r0, [r4, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
   2f690:	68a3      	ldr	r3, [r4, #8]
   2f692:	b903      	cbnz	r3, 2f696 <f_write+0x60>
   2f694:	60a0      	str	r0, [r4, #8]
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
   2f696:	9803      	ldr	r0, [sp, #12]
   2f698:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   2f69a:	69e3      	ldr	r3, [r4, #28]
   2f69c:	429a      	cmp	r2, r3
   2f69e:	d02f      	beq.n	2f700 <f_write+0xca>
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
   2f6a0:	f8dd b00c 	ldr.w	fp, [sp, #12]
   2f6a4:	69a1      	ldr	r1, [r4, #24]
   2f6a6:	4658      	mov	r0, fp
   2f6a8:	f7ff fa72 	bl	2eb90 <clst2sect>
			if (sect == 0) ABORT(fs, FR_INT_ERR);
   2f6ac:	b388      	cbz	r0, 2f712 <f_write+0xdc>
			sect += csect;
   2f6ae:	eb08 0300 	add.w	r3, r8, r0
   2f6b2:	9301      	str	r3, [sp, #4]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
   2f6b4:	0a75      	lsrs	r5, r6, #9
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
   2f6b6:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   2f6ba:	d342      	bcc.n	2f742 <f_write+0x10c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
   2f6bc:	eb08 0305 	add.w	r3, r8, r5
   2f6c0:	f8bb 200a 	ldrh.w	r2, [fp, #10]
   2f6c4:	4293      	cmp	r3, r2
   2f6c6:	d901      	bls.n	2f6cc <f_write+0x96>
					cc = fs->csize - csect;
   2f6c8:	eba2 0508 	sub.w	r5, r2, r8
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
   2f6cc:	462b      	mov	r3, r5
   2f6ce:	9a01      	ldr	r2, [sp, #4]
   2f6d0:	4639      	mov	r1, r7
   2f6d2:	f89b 0001 	ldrb.w	r0, [fp, #1]
   2f6d6:	f7f5 f9b7 	bl	24a48 <disk_write>
   2f6da:	b1f8      	cbz	r0, 2f71c <f_write+0xe6>
   2f6dc:	f04f 0a01 	mov.w	sl, #1
   2f6e0:	f884 a011 	strb.w	sl, [r4, #17]
}
   2f6e4:	4650      	mov	r0, sl
   2f6e6:	b005      	add	sp, #20
   2f6e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (clst == 1) ABORT(fs, FR_INT_ERR);
   2f6ec:	f04f 0a02 	mov.w	sl, #2
   2f6f0:	f884 a011 	strb.w	sl, [r4, #17]
   2f6f4:	e7f6      	b.n	2f6e4 <f_write+0xae>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
   2f6f6:	f04f 0a01 	mov.w	sl, #1
   2f6fa:	f884 a011 	strb.w	sl, [r4, #17]
   2f6fe:	e7f1      	b.n	2f6e4 <f_write+0xae>
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
   2f700:	f7ff fad5 	bl	2ecae <sync_window>
   2f704:	2800      	cmp	r0, #0
   2f706:	d0cb      	beq.n	2f6a0 <f_write+0x6a>
   2f708:	f04f 0a01 	mov.w	sl, #1
   2f70c:	f884 a011 	strb.w	sl, [r4, #17]
   2f710:	e7e8      	b.n	2f6e4 <f_write+0xae>
			if (sect == 0) ABORT(fs, FR_INT_ERR);
   2f712:	f04f 0a02 	mov.w	sl, #2
   2f716:	f884 a011 	strb.w	sl, [r4, #17]
   2f71a:	e7e3      	b.n	2f6e4 <f_write+0xae>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
   2f71c:	9803      	ldr	r0, [sp, #12]
   2f71e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   2f720:	9b01      	ldr	r3, [sp, #4]
   2f722:	1ac9      	subs	r1, r1, r3
   2f724:	42a9      	cmp	r1, r5
   2f726:	d301      	bcc.n	2f72c <f_write+0xf6>
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
   2f728:	026d      	lsls	r5, r5, #9
				continue;
   2f72a:	e02b      	b.n	2f784 <f_write+0x14e>
					memcpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
   2f72c:	f44f 7200 	mov.w	r2, #512	; 0x200
   2f730:	eb07 2141 	add.w	r1, r7, r1, lsl #9
   2f734:	3030      	adds	r0, #48	; 0x30
   2f736:	f7fa fa3c 	bl	29bb2 <memcpy>
					fs->wflag = 0;
   2f73a:	9b03      	ldr	r3, [sp, #12]
   2f73c:	2200      	movs	r2, #0
   2f73e:	70da      	strb	r2, [r3, #3]
   2f740:	e7f2      	b.n	2f728 <f_write+0xf2>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
   2f742:	6962      	ldr	r2, [r4, #20]
   2f744:	68e3      	ldr	r3, [r4, #12]
   2f746:	429a      	cmp	r2, r3
   2f748:	d246      	bcs.n	2f7d8 <f_write+0x1a2>
			fp->sect = sect;
   2f74a:	9b01      	ldr	r3, [sp, #4]
   2f74c:	61e3      	str	r3, [r4, #28]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
   2f74e:	6965      	ldr	r5, [r4, #20]
   2f750:	f3c5 0508 	ubfx	r5, r5, #0, #9
   2f754:	f5c5 7500 	rsb	r5, r5, #512	; 0x200
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
   2f758:	42ae      	cmp	r6, r5
   2f75a:	d200      	bcs.n	2f75e <f_write+0x128>
   2f75c:	4635      	mov	r5, r6
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
   2f75e:	69e1      	ldr	r1, [r4, #28]
   2f760:	9803      	ldr	r0, [sp, #12]
   2f762:	f7ff fac8 	bl	2ecf6 <move_window>
   2f766:	2800      	cmp	r0, #0
   2f768:	d143      	bne.n	2f7f2 <f_write+0x1bc>
		memcpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
   2f76a:	9803      	ldr	r0, [sp, #12]
   2f76c:	3030      	adds	r0, #48	; 0x30
   2f76e:	6963      	ldr	r3, [r4, #20]
   2f770:	f3c3 0308 	ubfx	r3, r3, #0, #9
   2f774:	462a      	mov	r2, r5
   2f776:	4639      	mov	r1, r7
   2f778:	4418      	add	r0, r3
   2f77a:	f7fa fa1a 	bl	29bb2 <memcpy>
		fs->wflag = 1;
   2f77e:	9b03      	ldr	r3, [sp, #12]
   2f780:	2201      	movs	r2, #1
   2f782:	70da      	strb	r2, [r3, #3]
	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
   2f784:	1b76      	subs	r6, r6, r5
   2f786:	f8d9 3000 	ldr.w	r3, [r9]
   2f78a:	442b      	add	r3, r5
   2f78c:	f8c9 3000 	str.w	r3, [r9]
   2f790:	442f      	add	r7, r5
   2f792:	6963      	ldr	r3, [r4, #20]
   2f794:	442b      	add	r3, r5
   2f796:	6163      	str	r3, [r4, #20]
   2f798:	68e2      	ldr	r2, [r4, #12]
   2f79a:	4293      	cmp	r3, r2
   2f79c:	bf38      	it	cc
   2f79e:	4613      	movcc	r3, r2
   2f7a0:	60e3      	str	r3, [r4, #12]
   2f7a2:	b35e      	cbz	r6, 2f7fc <f_write+0x1c6>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
   2f7a4:	6963      	ldr	r3, [r4, #20]
   2f7a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
   2f7aa:	2a00      	cmp	r2, #0
   2f7ac:	d1cf      	bne.n	2f74e <f_write+0x118>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
   2f7ae:	9a03      	ldr	r2, [sp, #12]
   2f7b0:	f8b2 800a 	ldrh.w	r8, [r2, #10]
   2f7b4:	f108 38ff 	add.w	r8, r8, #4294967295
			if (csect == 0) {				/* On the cluster boundary? */
   2f7b8:	ea18 2853 	ands.w	r8, r8, r3, lsr #9
   2f7bc:	f47f af6b 	bne.w	2f696 <f_write+0x60>
				if (fp->fptr == 0) {		/* On the top of the file? */
   2f7c0:	2b00      	cmp	r3, #0
   2f7c2:	f47f af58 	bne.w	2f676 <f_write+0x40>
					clst = fp->obj.sclust;	/* Follow from the origin */
   2f7c6:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
   2f7c8:	2800      	cmp	r0, #0
   2f7ca:	f47f af5b 	bne.w	2f684 <f_write+0x4e>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
   2f7ce:	2100      	movs	r1, #0
   2f7d0:	4620      	mov	r0, r4
   2f7d2:	f7ff fc27 	bl	2f024 <create_chain>
   2f7d6:	e752      	b.n	2f67e <f_write+0x48>
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
   2f7d8:	4658      	mov	r0, fp
   2f7da:	f7ff fa68 	bl	2ecae <sync_window>
   2f7de:	b918      	cbnz	r0, 2f7e8 <f_write+0x1b2>
				fs->winsect = sect;
   2f7e0:	9b03      	ldr	r3, [sp, #12]
   2f7e2:	9a01      	ldr	r2, [sp, #4]
   2f7e4:	62da      	str	r2, [r3, #44]	; 0x2c
   2f7e6:	e7b0      	b.n	2f74a <f_write+0x114>
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
   2f7e8:	f04f 0a01 	mov.w	sl, #1
   2f7ec:	f884 a011 	strb.w	sl, [r4, #17]
   2f7f0:	e778      	b.n	2f6e4 <f_write+0xae>
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
   2f7f2:	f04f 0a01 	mov.w	sl, #1
   2f7f6:	f884 a011 	strb.w	sl, [r4, #17]
   2f7fa:	e773      	b.n	2f6e4 <f_write+0xae>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
   2f7fc:	7c23      	ldrb	r3, [r4, #16]
   2f7fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2f802:	7423      	strb	r3, [r4, #16]
	LEAVE_FF(fs, FR_OK);
   2f804:	e76e      	b.n	2f6e4 <f_write+0xae>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
   2f806:	f04f 0a07 	mov.w	sl, #7
   2f80a:	e76b      	b.n	2f6e4 <f_write+0xae>

0002f80c <f_close>:
{
   2f80c:	b510      	push	{r4, lr}
   2f80e:	b082      	sub	sp, #8
   2f810:	4604      	mov	r4, r0
	res = f_sync(fp);					/* Flush cached data */
   2f812:	f7f4 fd1d 	bl	24250 <f_sync>
	if (res == FR_OK)
   2f816:	b108      	cbz	r0, 2f81c <f_close+0x10>
}
   2f818:	b002      	add	sp, #8
   2f81a:	bd10      	pop	{r4, pc}
		res = validate(&fp->obj, &fs);	/* Lock volume */
   2f81c:	a901      	add	r1, sp, #4
   2f81e:	4620      	mov	r0, r4
   2f820:	f7ff fa22 	bl	2ec68 <validate>
		if (res == FR_OK) {
   2f824:	2800      	cmp	r0, #0
   2f826:	d1f7      	bne.n	2f818 <f_close+0xc>
			fp->obj.fs = 0;	/* Invalidate file object */
   2f828:	6020      	str	r0, [r4, #0]
   2f82a:	e7f5      	b.n	2f818 <f_close+0xc>

0002f82c <f_lseek>:
{
   2f82c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2f830:	b082      	sub	sp, #8
   2f832:	4604      	mov	r4, r0
   2f834:	460d      	mov	r5, r1
	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
   2f836:	a901      	add	r1, sp, #4
   2f838:	f7ff fa16 	bl	2ec68 <validate>
	if (res == FR_OK) res = (FRESULT)fp->err;
   2f83c:	4680      	mov	r8, r0
   2f83e:	2800      	cmp	r0, #0
   2f840:	d139      	bne.n	2f8b6 <f_lseek+0x8a>
   2f842:	f894 8011 	ldrb.w	r8, [r4, #17]
	if (res != FR_OK) LEAVE_FF(fs, res);
   2f846:	f1b8 0f00 	cmp.w	r8, #0
   2f84a:	d134      	bne.n	2f8b6 <f_lseek+0x8a>
		if (ofs > fp->obj.objsize && (FF_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
   2f84c:	68e3      	ldr	r3, [r4, #12]
   2f84e:	42ab      	cmp	r3, r5
   2f850:	d204      	bcs.n	2f85c <f_lseek+0x30>
   2f852:	7c22      	ldrb	r2, [r4, #16]
   2f854:	f012 0f02 	tst.w	r2, #2
   2f858:	d100      	bne.n	2f85c <f_lseek+0x30>
			ofs = fp->obj.objsize;
   2f85a:	461d      	mov	r5, r3
		ifptr = fp->fptr;
   2f85c:	6966      	ldr	r6, [r4, #20]
		fp->fptr = nsect = 0;
   2f85e:	2300      	movs	r3, #0
   2f860:	6163      	str	r3, [r4, #20]
		if (ofs > 0) {
   2f862:	b1c5      	cbz	r5, 2f896 <f_lseek+0x6a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
   2f864:	9b01      	ldr	r3, [sp, #4]
   2f866:	895f      	ldrh	r7, [r3, #10]
   2f868:	027f      	lsls	r7, r7, #9
			if (ifptr > 0 &&
   2f86a:	b16e      	cbz	r6, 2f888 <f_lseek+0x5c>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
   2f86c:	1e6b      	subs	r3, r5, #1
   2f86e:	fbb3 f3f7 	udiv	r3, r3, r7
   2f872:	3e01      	subs	r6, #1
   2f874:	fbb6 f2f7 	udiv	r2, r6, r7
			if (ifptr > 0 &&
   2f878:	4293      	cmp	r3, r2
   2f87a:	d305      	bcc.n	2f888 <f_lseek+0x5c>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
   2f87c:	427b      	negs	r3, r7
   2f87e:	401e      	ands	r6, r3
   2f880:	6166      	str	r6, [r4, #20]
				ofs -= fp->fptr;
   2f882:	1bae      	subs	r6, r5, r6
				clst = fp->clust;
   2f884:	69a5      	ldr	r5, [r4, #24]
   2f886:	e004      	b.n	2f892 <f_lseek+0x66>
				clst = fp->obj.sclust;					/* start from the first cluster */
   2f888:	68a0      	ldr	r0, [r4, #8]
				if (clst == 0) {						/* If no cluster chain, create a new chain */
   2f88a:	b1c0      	cbz	r0, 2f8be <f_lseek+0x92>
				fp->clust = clst;
   2f88c:	61a0      	str	r0, [r4, #24]
   2f88e:	462e      	mov	r6, r5
   2f890:	4605      	mov	r5, r0
			if (clst != 0) {
   2f892:	2d00      	cmp	r5, #0
   2f894:	d137      	bne.n	2f906 <f_lseek+0xda>
		if (!FF_FS_READONLY && fp->fptr > fp->obj.objsize) {	/* Set file change flag if the file size is extended */
   2f896:	6963      	ldr	r3, [r4, #20]
   2f898:	68e2      	ldr	r2, [r4, #12]
   2f89a:	4293      	cmp	r3, r2
   2f89c:	d904      	bls.n	2f8a8 <f_lseek+0x7c>
			fp->obj.objsize = fp->fptr;
   2f89e:	60e3      	str	r3, [r4, #12]
			fp->flag |= FA_MODIFIED;
   2f8a0:	7c22      	ldrb	r2, [r4, #16]
   2f8a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   2f8a6:	7422      	strb	r2, [r4, #16]
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
   2f8a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
   2f8ac:	b11b      	cbz	r3, 2f8b6 <f_lseek+0x8a>
   2f8ae:	69e3      	ldr	r3, [r4, #28]
   2f8b0:	42ab      	cmp	r3, r5
   2f8b2:	d000      	beq.n	2f8b6 <f_lseek+0x8a>
			fp->sect = nsect;
   2f8b4:	61e5      	str	r5, [r4, #28]
}
   2f8b6:	4640      	mov	r0, r8
   2f8b8:	b002      	add	sp, #8
   2f8ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					clst = create_chain(&fp->obj, 0);
   2f8be:	2100      	movs	r1, #0
   2f8c0:	4620      	mov	r0, r4
   2f8c2:	f7ff fbaf 	bl	2f024 <create_chain>
					if (clst == 1) ABORT(fs, FR_INT_ERR);
   2f8c6:	2801      	cmp	r0, #1
   2f8c8:	d004      	beq.n	2f8d4 <f_lseek+0xa8>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
   2f8ca:	f1b0 3fff 	cmp.w	r0, #4294967295
   2f8ce:	d006      	beq.n	2f8de <f_lseek+0xb2>
					fp->obj.sclust = clst;
   2f8d0:	60a0      	str	r0, [r4, #8]
   2f8d2:	e7db      	b.n	2f88c <f_lseek+0x60>
					if (clst == 1) ABORT(fs, FR_INT_ERR);
   2f8d4:	f04f 0802 	mov.w	r8, #2
   2f8d8:	f884 8011 	strb.w	r8, [r4, #17]
   2f8dc:	e7eb      	b.n	2f8b6 <f_lseek+0x8a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
   2f8de:	f04f 0801 	mov.w	r8, #1
   2f8e2:	f884 8011 	strb.w	r8, [r4, #17]
   2f8e6:	e7e6      	b.n	2f8b6 <f_lseek+0x8a>
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
   2f8e8:	4629      	mov	r1, r5
   2f8ea:	4620      	mov	r0, r4
   2f8ec:	f7ff fadc 	bl	2eea8 <get_fat>
   2f8f0:	4605      	mov	r5, r0
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
   2f8f2:	f1b5 3fff 	cmp.w	r5, #4294967295
   2f8f6:	d026      	beq.n	2f946 <f_lseek+0x11a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
   2f8f8:	2d01      	cmp	r5, #1
   2f8fa:	d929      	bls.n	2f950 <f_lseek+0x124>
   2f8fc:	9b01      	ldr	r3, [sp, #4]
   2f8fe:	695b      	ldr	r3, [r3, #20]
   2f900:	42ab      	cmp	r3, r5
   2f902:	d925      	bls.n	2f950 <f_lseek+0x124>
					fp->clust = clst;
   2f904:	61a5      	str	r5, [r4, #24]
				while (ofs > bcs) {						/* Cluster following loop */
   2f906:	42be      	cmp	r6, r7
   2f908:	d90f      	bls.n	2f92a <f_lseek+0xfe>
					ofs -= bcs; fp->fptr += bcs;
   2f90a:	1bf6      	subs	r6, r6, r7
   2f90c:	6963      	ldr	r3, [r4, #20]
   2f90e:	443b      	add	r3, r7
   2f910:	6163      	str	r3, [r4, #20]
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
   2f912:	7c23      	ldrb	r3, [r4, #16]
   2f914:	f013 0f02 	tst.w	r3, #2
   2f918:	d0e6      	beq.n	2f8e8 <f_lseek+0xbc>
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
   2f91a:	4629      	mov	r1, r5
   2f91c:	4620      	mov	r0, r4
   2f91e:	f7ff fb81 	bl	2f024 <create_chain>
						if (clst == 0) {				/* Clip file size in case of disk full */
   2f922:	4605      	mov	r5, r0
   2f924:	2800      	cmp	r0, #0
   2f926:	d1e4      	bne.n	2f8f2 <f_lseek+0xc6>
							ofs = 0; break;
   2f928:	4606      	mov	r6, r0
				fp->fptr += ofs;
   2f92a:	6963      	ldr	r3, [r4, #20]
   2f92c:	4433      	add	r3, r6
   2f92e:	6163      	str	r3, [r4, #20]
				if (ofs % SS(fs)) {
   2f930:	f3c6 0308 	ubfx	r3, r6, #0, #9
   2f934:	b1b3      	cbz	r3, 2f964 <f_lseek+0x138>
					nsect = clst2sect(fs, clst);	/* Current sector */
   2f936:	4629      	mov	r1, r5
   2f938:	9801      	ldr	r0, [sp, #4]
   2f93a:	f7ff f929 	bl	2eb90 <clst2sect>
					if (nsect == 0) ABORT(fs, FR_INT_ERR);
   2f93e:	b160      	cbz	r0, 2f95a <f_lseek+0x12e>
					nsect += (DWORD)(ofs / SS(fs));
   2f940:	eb00 2556 	add.w	r5, r0, r6, lsr #9
   2f944:	e7a7      	b.n	2f896 <f_lseek+0x6a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
   2f946:	f04f 0801 	mov.w	r8, #1
   2f94a:	f884 8011 	strb.w	r8, [r4, #17]
   2f94e:	e7b2      	b.n	2f8b6 <f_lseek+0x8a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
   2f950:	f04f 0802 	mov.w	r8, #2
   2f954:	f884 8011 	strb.w	r8, [r4, #17]
   2f958:	e7ad      	b.n	2f8b6 <f_lseek+0x8a>
					if (nsect == 0) ABORT(fs, FR_INT_ERR);
   2f95a:	f04f 0802 	mov.w	r8, #2
   2f95e:	f884 8011 	strb.w	r8, [r4, #17]
   2f962:	e7a8      	b.n	2f8b6 <f_lseek+0x8a>
		fp->fptr = nsect = 0;
   2f964:	461d      	mov	r5, r3
   2f966:	e796      	b.n	2f896 <f_lseek+0x6a>

0002f968 <f_opendir>:
{
   2f968:	b510      	push	{r4, lr}
   2f96a:	b084      	sub	sp, #16
   2f96c:	9101      	str	r1, [sp, #4]
	if (!dp) return FR_INVALID_OBJECT;
   2f96e:	2800      	cmp	r0, #0
   2f970:	d032      	beq.n	2f9d8 <f_opendir+0x70>
   2f972:	4604      	mov	r4, r0
	res = mount_volume(&path, &fs, 0);
   2f974:	2200      	movs	r2, #0
   2f976:	a903      	add	r1, sp, #12
   2f978:	a801      	add	r0, sp, #4
   2f97a:	f7f4 f88f 	bl	23a9c <mount_volume>
	if (res == FR_OK) {
   2f97e:	4603      	mov	r3, r0
   2f980:	b120      	cbz	r0, 2f98c <f_opendir+0x24>
	if (res != FR_OK) dp->obj.fs = 0;		/* Invalidate the directory object if function faild */
   2f982:	2200      	movs	r2, #0
   2f984:	6022      	str	r2, [r4, #0]
}
   2f986:	4618      	mov	r0, r3
   2f988:	b004      	add	sp, #16
   2f98a:	bd10      	pop	{r4, pc}
		dp->obj.fs = fs;
   2f98c:	9b03      	ldr	r3, [sp, #12]
   2f98e:	6023      	str	r3, [r4, #0]
		res = follow_path(dp, path);			/* Follow the path to the directory */
   2f990:	9901      	ldr	r1, [sp, #4]
   2f992:	4620      	mov	r0, r4
   2f994:	f7ff fd35 	bl	2f402 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
   2f998:	4603      	mov	r3, r0
   2f99a:	b9a0      	cbnz	r0, 2f9c6 <f_opendir+0x5e>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
   2f99c:	f994 302b 	ldrsb.w	r3, [r4, #43]	; 0x2b
   2f9a0:	2b00      	cmp	r3, #0
   2f9a2:	db08      	blt.n	2f9b6 <f_opendir+0x4e>
				if (dp->obj.attr & AM_DIR) {		/* This object is a sub-directory */
   2f9a4:	79a3      	ldrb	r3, [r4, #6]
   2f9a6:	f013 0f10 	tst.w	r3, #16
   2f9aa:	d011      	beq.n	2f9d0 <f_opendir+0x68>
						dp->obj.sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
   2f9ac:	69e1      	ldr	r1, [r4, #28]
   2f9ae:	9803      	ldr	r0, [sp, #12]
   2f9b0:	f7ff f8fa 	bl	2eba8 <ld_clust>
   2f9b4:	60a0      	str	r0, [r4, #8]
				dp->obj.id = fs->id;
   2f9b6:	9b03      	ldr	r3, [sp, #12]
   2f9b8:	88db      	ldrh	r3, [r3, #6]
   2f9ba:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
   2f9bc:	2100      	movs	r1, #0
   2f9be:	4620      	mov	r0, r4
   2f9c0:	f7ff fada 	bl	2ef78 <dir_sdi>
   2f9c4:	4603      	mov	r3, r0
		if (res == FR_NO_FILE) res = FR_NO_PATH;
   2f9c6:	2b04      	cmp	r3, #4
   2f9c8:	d004      	beq.n	2f9d4 <f_opendir+0x6c>
	if (res != FR_OK) dp->obj.fs = 0;		/* Invalidate the directory object if function faild */
   2f9ca:	2b00      	cmp	r3, #0
   2f9cc:	d0db      	beq.n	2f986 <f_opendir+0x1e>
   2f9ce:	e7d8      	b.n	2f982 <f_opendir+0x1a>
					res = FR_NO_PATH;
   2f9d0:	2305      	movs	r3, #5
   2f9d2:	e7f8      	b.n	2f9c6 <f_opendir+0x5e>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
   2f9d4:	2305      	movs	r3, #5
   2f9d6:	e7d4      	b.n	2f982 <f_opendir+0x1a>
	if (!dp) return FR_INVALID_OBJECT;
   2f9d8:	2309      	movs	r3, #9
   2f9da:	e7d4      	b.n	2f986 <f_opendir+0x1e>

0002f9dc <f_closedir>:
{
   2f9dc:	b510      	push	{r4, lr}
   2f9de:	b082      	sub	sp, #8
   2f9e0:	4604      	mov	r4, r0
	res = validate(&dp->obj, &fs);	/* Check validity of the file object */
   2f9e2:	a901      	add	r1, sp, #4
   2f9e4:	f7ff f940 	bl	2ec68 <validate>
	if (res == FR_OK) {
   2f9e8:	b900      	cbnz	r0, 2f9ec <f_closedir+0x10>
		dp->obj.fs = 0;	/* Invalidate directory object */
   2f9ea:	6020      	str	r0, [r4, #0]
}
   2f9ec:	b002      	add	sp, #8
   2f9ee:	bd10      	pop	{r4, pc}

0002f9f0 <f_readdir>:
{
   2f9f0:	b570      	push	{r4, r5, r6, lr}
   2f9f2:	b082      	sub	sp, #8
   2f9f4:	4604      	mov	r4, r0
   2f9f6:	460d      	mov	r5, r1
	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
   2f9f8:	a901      	add	r1, sp, #4
   2f9fa:	f7ff f935 	bl	2ec68 <validate>
	if (res == FR_OK) {
   2f9fe:	4606      	mov	r6, r0
   2fa00:	b9c0      	cbnz	r0, 2fa34 <f_readdir+0x44>
		if (!fno) {
   2fa02:	b195      	cbz	r5, 2fa2a <f_readdir+0x3a>
			res = DIR_READ_FILE(dp);		/* Read an item */
   2fa04:	2100      	movs	r1, #0
   2fa06:	4620      	mov	r0, r4
   2fa08:	f7ff fccc 	bl	2f3a4 <dir_read>
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
   2fa0c:	2804      	cmp	r0, #4
   2fa0e:	d000      	beq.n	2fa12 <f_readdir+0x22>
			if (res == FR_OK) {				/* A valid entry is found */
   2fa10:	b998      	cbnz	r0, 2fa3a <f_readdir+0x4a>
				get_fileinfo(dp, fno);		/* Get the object information */
   2fa12:	4629      	mov	r1, r5
   2fa14:	4620      	mov	r0, r4
   2fa16:	f7ff f8ed 	bl	2ebf4 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
   2fa1a:	2100      	movs	r1, #0
   2fa1c:	4620      	mov	r0, r4
   2fa1e:	f7ff fc08 	bl	2f232 <dir_next>
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
   2fa22:	2804      	cmp	r0, #4
   2fa24:	d006      	beq.n	2fa34 <f_readdir+0x44>
				res = dir_next(dp, 0);		/* Increment index for next */
   2fa26:	4606      	mov	r6, r0
   2fa28:	e004      	b.n	2fa34 <f_readdir+0x44>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
   2fa2a:	2100      	movs	r1, #0
   2fa2c:	4620      	mov	r0, r4
   2fa2e:	f7ff faa3 	bl	2ef78 <dir_sdi>
   2fa32:	4606      	mov	r6, r0
}
   2fa34:	4630      	mov	r0, r6
   2fa36:	b002      	add	sp, #8
   2fa38:	bd70      	pop	{r4, r5, r6, pc}
			res = DIR_READ_FILE(dp);		/* Read an item */
   2fa3a:	4606      	mov	r6, r0
   2fa3c:	e7fa      	b.n	2fa34 <f_readdir+0x44>

0002fa3e <f_stat>:
{
   2fa3e:	b530      	push	{r4, r5, lr}
   2fa40:	b08f      	sub	sp, #60	; 0x3c
   2fa42:	9001      	str	r0, [sp, #4]
   2fa44:	460c      	mov	r4, r1
	res = mount_volume(&path, &dj.obj.fs, 0);
   2fa46:	2200      	movs	r2, #0
   2fa48:	a903      	add	r1, sp, #12
   2fa4a:	a801      	add	r0, sp, #4
   2fa4c:	f7f4 f826 	bl	23a9c <mount_volume>
	if (res == FR_OK) {
   2fa50:	4605      	mov	r5, r0
   2fa52:	b110      	cbz	r0, 2fa5a <f_stat+0x1c>
}
   2fa54:	4628      	mov	r0, r5
   2fa56:	b00f      	add	sp, #60	; 0x3c
   2fa58:	bd30      	pop	{r4, r5, pc}
		res = follow_path(&dj, path);	/* Follow the file path */
   2fa5a:	9901      	ldr	r1, [sp, #4]
   2fa5c:	a803      	add	r0, sp, #12
   2fa5e:	f7ff fcd0 	bl	2f402 <follow_path>
		if (res == FR_OK) {				/* Follow completed */
   2fa62:	4605      	mov	r5, r0
   2fa64:	2800      	cmp	r0, #0
   2fa66:	d1f5      	bne.n	2fa54 <f_stat+0x16>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
   2fa68:	f99d 3037 	ldrsb.w	r3, [sp, #55]	; 0x37
   2fa6c:	2b00      	cmp	r3, #0
   2fa6e:	db06      	blt.n	2fa7e <f_stat+0x40>
				if (fno) get_fileinfo(&dj, fno);
   2fa70:	2c00      	cmp	r4, #0
   2fa72:	d0ef      	beq.n	2fa54 <f_stat+0x16>
   2fa74:	4621      	mov	r1, r4
   2fa76:	a803      	add	r0, sp, #12
   2fa78:	f7ff f8bc 	bl	2ebf4 <get_fileinfo>
   2fa7c:	e7ea      	b.n	2fa54 <f_stat+0x16>
				res = FR_INVALID_NAME;
   2fa7e:	2506      	movs	r5, #6
   2fa80:	e7e8      	b.n	2fa54 <f_stat+0x16>

0002fa82 <f_getfree>:
{
   2fa82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2fa86:	b088      	sub	sp, #32
   2fa88:	9001      	str	r0, [sp, #4]
   2fa8a:	460f      	mov	r7, r1
   2fa8c:	4614      	mov	r4, r2
	res = mount_volume(&path, &fs, 0);
   2fa8e:	2200      	movs	r2, #0
   2fa90:	a907      	add	r1, sp, #28
   2fa92:	a801      	add	r0, sp, #4
   2fa94:	f7f4 f802 	bl	23a9c <mount_volume>
	if (res == FR_OK) {
   2fa98:	4680      	mov	r8, r0
   2fa9a:	b938      	cbnz	r0, 2faac <f_getfree+0x2a>
		*fatfs = fs;				/* Return ptr to the fs object */
   2fa9c:	9b07      	ldr	r3, [sp, #28]
   2fa9e:	6023      	str	r3, [r4, #0]
		if (fs->free_clst <= fs->n_fatent - 2) {
   2faa0:	691a      	ldr	r2, [r3, #16]
   2faa2:	695d      	ldr	r5, [r3, #20]
   2faa4:	1ea9      	subs	r1, r5, #2
   2faa6:	428a      	cmp	r2, r1
   2faa8:	d804      	bhi.n	2fab4 <f_getfree+0x32>
			*nclst = fs->free_clst;
   2faaa:	603a      	str	r2, [r7, #0]
}
   2faac:	4640      	mov	r0, r8
   2faae:	b008      	add	sp, #32
   2fab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Scan bit field FAT entries */
   2fab4:	f893 9000 	ldrb.w	r9, [r3]
   2fab8:	f1b9 0f01 	cmp.w	r9, #1
   2fabc:	d004      	beq.n	2fac8 <f_getfree+0x46>
					sect = fs->fatbase;		/* Top of the FAT */
   2fabe:	f8d3 9020 	ldr.w	r9, [r3, #32]
					i = 0;					/* Offset in the sector */
   2fac2:	2400      	movs	r4, #0
			nfree = 0;
   2fac4:	4626      	mov	r6, r4
   2fac6:	e02c      	b.n	2fb22 <f_getfree+0xa0>
				clst = 2; obj.fs = fs;
   2fac8:	9303      	str	r3, [sp, #12]
   2faca:	2402      	movs	r4, #2
			nfree = 0;
   2facc:	2600      	movs	r6, #0
   2face:	e004      	b.n	2fada <f_getfree+0x58>
				} while (++clst < fs->n_fatent);
   2fad0:	3401      	adds	r4, #1
   2fad2:	9b07      	ldr	r3, [sp, #28]
   2fad4:	695b      	ldr	r3, [r3, #20]
   2fad6:	42a3      	cmp	r3, r4
   2fad8:	d933      	bls.n	2fb42 <f_getfree+0xc0>
					stat = get_fat(&obj, clst);
   2fada:	4621      	mov	r1, r4
   2fadc:	a803      	add	r0, sp, #12
   2fade:	f7ff f9e3 	bl	2eea8 <get_fat>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
   2fae2:	f1b0 3fff 	cmp.w	r0, #4294967295
   2fae6:	d02b      	beq.n	2fb40 <f_getfree+0xbe>
					if (stat == 1) { res = FR_INT_ERR; break; }
   2fae8:	2801      	cmp	r0, #1
   2faea:	d035      	beq.n	2fb58 <f_getfree+0xd6>
					if (stat == 0) nfree++;
   2faec:	2800      	cmp	r0, #0
   2faee:	d1ef      	bne.n	2fad0 <f_getfree+0x4e>
   2faf0:	3601      	adds	r6, #1
   2faf2:	e7ed      	b.n	2fad0 <f_getfree+0x4e>
							res = move_window(fs, sect++);
   2faf4:	f109 0a01 	add.w	sl, r9, #1
   2faf8:	4649      	mov	r1, r9
   2fafa:	9807      	ldr	r0, [sp, #28]
   2fafc:	f7ff f8fb 	bl	2ecf6 <move_window>
							if (res != FR_OK) break;
   2fb00:	4680      	mov	r8, r0
   2fb02:	b9f0      	cbnz	r0, 2fb42 <f_getfree+0xc0>
							res = move_window(fs, sect++);
   2fb04:	46d1      	mov	r9, sl
   2fb06:	e00e      	b.n	2fb26 <f_getfree+0xa4>
							if (ld_word(fs->win + i) == 0) nfree++;
   2fb08:	3030      	adds	r0, #48	; 0x30
   2fb0a:	4420      	add	r0, r4
   2fb0c:	f7ff f81e 	bl	2eb4c <ld_word>
   2fb10:	b900      	cbnz	r0, 2fb14 <f_getfree+0x92>
   2fb12:	3601      	adds	r6, #1
							i += 2;
   2fb14:	3402      	adds	r4, #2
   2fb16:	e000      	b.n	2fb1a <f_getfree+0x98>
							i += 4;
   2fb18:	3404      	adds	r4, #4
						i %= SS(fs);
   2fb1a:	f3c4 0408 	ubfx	r4, r4, #0, #9
					} while (--clst);
   2fb1e:	3d01      	subs	r5, #1
   2fb20:	d00f      	beq.n	2fb42 <f_getfree+0xc0>
						if (i == 0) {
   2fb22:	2c00      	cmp	r4, #0
   2fb24:	d0e6      	beq.n	2faf4 <f_getfree+0x72>
						if (fs->fs_type == FS_FAT16) {
   2fb26:	9807      	ldr	r0, [sp, #28]
   2fb28:	7803      	ldrb	r3, [r0, #0]
   2fb2a:	2b02      	cmp	r3, #2
   2fb2c:	d0ec      	beq.n	2fb08 <f_getfree+0x86>
							if ((ld_dword(fs->win + i) & 0x0FFFFFFF) == 0) nfree++;
   2fb2e:	3030      	adds	r0, #48	; 0x30
   2fb30:	4420      	add	r0, r4
   2fb32:	f7ff f810 	bl	2eb56 <ld_dword>
   2fb36:	f030 4370 	bics.w	r3, r0, #4026531840	; 0xf0000000
   2fb3a:	d1ed      	bne.n	2fb18 <f_getfree+0x96>
   2fb3c:	3601      	adds	r6, #1
   2fb3e:	e7eb      	b.n	2fb18 <f_getfree+0x96>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
   2fb40:	46c8      	mov	r8, r9
			if (res == FR_OK) {		/* Update parameters if succeeded */
   2fb42:	f1b8 0f00 	cmp.w	r8, #0
   2fb46:	d1b1      	bne.n	2faac <f_getfree+0x2a>
				*nclst = nfree;			/* Return the free clusters */
   2fb48:	603e      	str	r6, [r7, #0]
				fs->free_clst = nfree;	/* Now free_clst is valid */
   2fb4a:	9b07      	ldr	r3, [sp, #28]
   2fb4c:	611e      	str	r6, [r3, #16]
				fs->fsi_flag |= 1;		/* FAT32: FSInfo is to be updated */
   2fb4e:	791a      	ldrb	r2, [r3, #4]
   2fb50:	f042 0201 	orr.w	r2, r2, #1
   2fb54:	711a      	strb	r2, [r3, #4]
   2fb56:	e7a9      	b.n	2faac <f_getfree+0x2a>
					if (stat == 1) { res = FR_INT_ERR; break; }
   2fb58:	f04f 0802 	mov.w	r8, #2
   2fb5c:	e7f1      	b.n	2fb42 <f_getfree+0xc0>

0002fb5e <f_truncate>:
{
   2fb5e:	b530      	push	{r4, r5, lr}
   2fb60:	b083      	sub	sp, #12
   2fb62:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
   2fb64:	a901      	add	r1, sp, #4
   2fb66:	f7ff f87f 	bl	2ec68 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);
   2fb6a:	4605      	mov	r5, r0
   2fb6c:	b9c8      	cbnz	r0, 2fba2 <f_truncate+0x44>
   2fb6e:	7c65      	ldrb	r5, [r4, #17]
   2fb70:	b9bd      	cbnz	r5, 2fba2 <f_truncate+0x44>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
   2fb72:	7c23      	ldrb	r3, [r4, #16]
   2fb74:	f013 0f02 	tst.w	r3, #2
   2fb78:	d032      	beq.n	2fbe0 <f_truncate+0x82>
	if (fp->fptr < fp->obj.objsize) {	/* Process when fptr is not on the eof */
   2fb7a:	6963      	ldr	r3, [r4, #20]
   2fb7c:	68e2      	ldr	r2, [r4, #12]
   2fb7e:	4293      	cmp	r3, r2
   2fb80:	d20f      	bcs.n	2fba2 <f_truncate+0x44>
		if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
   2fb82:	b98b      	cbnz	r3, 2fba8 <f_truncate+0x4a>
			res = remove_chain(&fp->obj, fp->obj.sclust, 0);
   2fb84:	2200      	movs	r2, #0
   2fb86:	68a1      	ldr	r1, [r4, #8]
   2fb88:	4620      	mov	r0, r4
   2fb8a:	f7ff fadc 	bl	2f146 <remove_chain>
   2fb8e:	4605      	mov	r5, r0
			fp->obj.sclust = 0;
   2fb90:	2300      	movs	r3, #0
   2fb92:	60a3      	str	r3, [r4, #8]
		fp->obj.objsize = fp->fptr;	/* Set file size to current read/write point */
   2fb94:	6963      	ldr	r3, [r4, #20]
   2fb96:	60e3      	str	r3, [r4, #12]
		fp->flag |= FA_MODIFIED;
   2fb98:	7c23      	ldrb	r3, [r4, #16]
   2fb9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2fb9e:	7423      	strb	r3, [r4, #16]
		if (res != FR_OK) ABORT(fs, res);
   2fba0:	b9e5      	cbnz	r5, 2fbdc <f_truncate+0x7e>
}
   2fba2:	4628      	mov	r0, r5
   2fba4:	b003      	add	sp, #12
   2fba6:	bd30      	pop	{r4, r5, pc}
			ncl = get_fat(&fp->obj, fp->clust);
   2fba8:	69a1      	ldr	r1, [r4, #24]
   2fbaa:	4620      	mov	r0, r4
   2fbac:	f7ff f97c 	bl	2eea8 <get_fat>
			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
   2fbb0:	f1b0 3fff 	cmp.w	r0, #4294967295
   2fbb4:	d00e      	beq.n	2fbd4 <f_truncate+0x76>
			if (ncl == 1) res = FR_INT_ERR;
   2fbb6:	2801      	cmp	r0, #1
   2fbb8:	d00e      	beq.n	2fbd8 <f_truncate+0x7a>
			if (res == FR_OK && ncl < fs->n_fatent) {
   2fbba:	2d00      	cmp	r5, #0
   2fbbc:	d1ea      	bne.n	2fb94 <f_truncate+0x36>
   2fbbe:	9b01      	ldr	r3, [sp, #4]
   2fbc0:	695b      	ldr	r3, [r3, #20]
   2fbc2:	4283      	cmp	r3, r0
   2fbc4:	d9e6      	bls.n	2fb94 <f_truncate+0x36>
				res = remove_chain(&fp->obj, ncl, fp->clust);
   2fbc6:	69a2      	ldr	r2, [r4, #24]
   2fbc8:	4601      	mov	r1, r0
   2fbca:	4620      	mov	r0, r4
   2fbcc:	f7ff fabb 	bl	2f146 <remove_chain>
   2fbd0:	4605      	mov	r5, r0
   2fbd2:	e7df      	b.n	2fb94 <f_truncate+0x36>
			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
   2fbd4:	2501      	movs	r5, #1
   2fbd6:	e7f0      	b.n	2fbba <f_truncate+0x5c>
			if (ncl == 1) res = FR_INT_ERR;
   2fbd8:	2502      	movs	r5, #2
   2fbda:	e7db      	b.n	2fb94 <f_truncate+0x36>
		if (res != FR_OK) ABORT(fs, res);
   2fbdc:	7465      	strb	r5, [r4, #17]
   2fbde:	e7e0      	b.n	2fba2 <f_truncate+0x44>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
   2fbe0:	2507      	movs	r5, #7
   2fbe2:	e7de      	b.n	2fba2 <f_truncate+0x44>

0002fbe4 <f_unlink>:
{
   2fbe4:	b5f0      	push	{r4, r5, r6, r7, lr}
   2fbe6:	b09b      	sub	sp, #108	; 0x6c
   2fbe8:	9001      	str	r0, [sp, #4]
	res = mount_volume(&path, &fs, FA_WRITE);
   2fbea:	2202      	movs	r2, #2
   2fbec:	a903      	add	r1, sp, #12
   2fbee:	a801      	add	r0, sp, #4
   2fbf0:	f7f3 ff54 	bl	23a9c <mount_volume>
	if (res == FR_OK) {
   2fbf4:	4604      	mov	r4, r0
   2fbf6:	b110      	cbz	r0, 2fbfe <f_unlink+0x1a>
}
   2fbf8:	4620      	mov	r0, r4
   2fbfa:	b01b      	add	sp, #108	; 0x6c
   2fbfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		dj.obj.fs = fs;
   2fbfe:	9b03      	ldr	r3, [sp, #12]
   2fc00:	930f      	str	r3, [sp, #60]	; 0x3c
		res = follow_path(&dj, path);		/* Follow the file path */
   2fc02:	9901      	ldr	r1, [sp, #4]
   2fc04:	a80f      	add	r0, sp, #60	; 0x3c
   2fc06:	f7ff fbfc 	bl	2f402 <follow_path>
		if (res == FR_OK) {					/* The object is accessible */
   2fc0a:	4604      	mov	r4, r0
   2fc0c:	2800      	cmp	r0, #0
   2fc0e:	d1f3      	bne.n	2fbf8 <f_unlink+0x14>
			if (dj.fn[NSFLAG] & NS_NONAME) {
   2fc10:	f99d 3067 	ldrsb.w	r3, [sp, #103]	; 0x67
   2fc14:	2b00      	cmp	r3, #0
   2fc16:	db1f      	blt.n	2fc58 <f_unlink+0x74>
				if (dj.obj.attr & AM_RDO) {
   2fc18:	f89d 6042 	ldrb.w	r6, [sp, #66]	; 0x42
   2fc1c:	f016 0f01 	tst.w	r6, #1
   2fc20:	d135      	bne.n	2fc8e <f_unlink+0xaa>
					dclst = ld_clust(fs, dj.dir);
   2fc22:	9f03      	ldr	r7, [sp, #12]
   2fc24:	9916      	ldr	r1, [sp, #88]	; 0x58
   2fc26:	4638      	mov	r0, r7
   2fc28:	f7fe ffbe 	bl	2eba8 <ld_clust>
   2fc2c:	4605      	mov	r5, r0
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
   2fc2e:	f016 0f10 	tst.w	r6, #16
   2fc32:	d013      	beq.n	2fc5c <f_unlink+0x78>
						sdj.obj.fs = fs;			/* Open the sub-directory */
   2fc34:	9704      	str	r7, [sp, #16]
						sdj.obj.sclust = dclst;
   2fc36:	9006      	str	r0, [sp, #24]
						res = dir_sdi(&sdj, 0);
   2fc38:	2100      	movs	r1, #0
   2fc3a:	a804      	add	r0, sp, #16
   2fc3c:	f7ff f99c 	bl	2ef78 <dir_sdi>
						if (res == FR_OK) {
   2fc40:	4604      	mov	r4, r0
   2fc42:	2800      	cmp	r0, #0
   2fc44:	d1d8      	bne.n	2fbf8 <f_unlink+0x14>
							res = DIR_READ_FILE(&sdj);			/* Test if the directory is empty */
   2fc46:	2100      	movs	r1, #0
   2fc48:	a804      	add	r0, sp, #16
   2fc4a:	f7ff fbab 	bl	2f3a4 <dir_read>
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
   2fc4e:	4604      	mov	r4, r0
   2fc50:	b1a0      	cbz	r0, 2fc7c <f_unlink+0x98>
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
   2fc52:	2804      	cmp	r0, #4
   2fc54:	d102      	bne.n	2fc5c <f_unlink+0x78>
   2fc56:	e003      	b.n	2fc60 <f_unlink+0x7c>
	DWORD dclst = 0;
   2fc58:	2500      	movs	r5, #0
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
   2fc5a:	2406      	movs	r4, #6
			if (res == FR_OK) {
   2fc5c:	2c00      	cmp	r4, #0
   2fc5e:	d1cb      	bne.n	2fbf8 <f_unlink+0x14>
				res = dir_remove(&dj);			/* Remove the directory entry */
   2fc60:	a80f      	add	r0, sp, #60	; 0x3c
   2fc62:	f7ff faaf 	bl	2f1c4 <dir_remove>
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
   2fc66:	4604      	mov	r4, r0
   2fc68:	2800      	cmp	r0, #0
   2fc6a:	d1c5      	bne.n	2fbf8 <f_unlink+0x14>
   2fc6c:	b945      	cbnz	r5, 2fc80 <f_unlink+0x9c>
				if (res == FR_OK) res = sync_fs(fs);
   2fc6e:	2c00      	cmp	r4, #0
   2fc70:	d1c2      	bne.n	2fbf8 <f_unlink+0x14>
   2fc72:	9803      	ldr	r0, [sp, #12]
   2fc74:	f7f4 f8f8 	bl	23e68 <sync_fs>
   2fc78:	4604      	mov	r4, r0
   2fc7a:	e7bd      	b.n	2fbf8 <f_unlink+0x14>
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
   2fc7c:	2407      	movs	r4, #7
   2fc7e:	e7ed      	b.n	2fc5c <f_unlink+0x78>
					res = remove_chain(&dj.obj, dclst, 0);
   2fc80:	2200      	movs	r2, #0
   2fc82:	4629      	mov	r1, r5
   2fc84:	a80f      	add	r0, sp, #60	; 0x3c
   2fc86:	f7ff fa5e 	bl	2f146 <remove_chain>
   2fc8a:	4604      	mov	r4, r0
   2fc8c:	e7ef      	b.n	2fc6e <f_unlink+0x8a>
   2fc8e:	2407      	movs	r4, #7
   2fc90:	e7b2      	b.n	2fbf8 <f_unlink+0x14>

0002fc92 <f_rename>:
{
   2fc92:	b530      	push	{r4, r5, lr}
   2fc94:	b0a3      	sub	sp, #140	; 0x8c
   2fc96:	9001      	str	r0, [sp, #4]
   2fc98:	9100      	str	r1, [sp, #0]
	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
   2fc9a:	4668      	mov	r0, sp
   2fc9c:	f7f3 fe46 	bl	2392c <get_ldnumber>
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
   2fca0:	2202      	movs	r2, #2
   2fca2:	a90b      	add	r1, sp, #44	; 0x2c
   2fca4:	a801      	add	r0, sp, #4
   2fca6:	f7f3 fef9 	bl	23a9c <mount_volume>
	if (res == FR_OK) {
   2fcaa:	4604      	mov	r4, r0
   2fcac:	b110      	cbz	r0, 2fcb4 <f_rename+0x22>
}
   2fcae:	4620      	mov	r0, r4
   2fcb0:	b023      	add	sp, #140	; 0x8c
   2fcb2:	bd30      	pop	{r4, r5, pc}
		djo.obj.fs = fs;
   2fcb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2fcb6:	9317      	str	r3, [sp, #92]	; 0x5c
		res = follow_path(&djo, path_old);			/* Check old object */
   2fcb8:	9901      	ldr	r1, [sp, #4]
   2fcba:	a817      	add	r0, sp, #92	; 0x5c
   2fcbc:	f7ff fba1 	bl	2f402 <follow_path>
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
   2fcc0:	4604      	mov	r4, r0
   2fcc2:	2800      	cmp	r0, #0
   2fcc4:	d1f3      	bne.n	2fcae <f_rename+0x1c>
   2fcc6:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
   2fcca:	f013 0fa0 	tst.w	r3, #160	; 0xa0
   2fcce:	d001      	beq.n	2fcd4 <f_rename+0x42>
   2fcd0:	2406      	movs	r4, #6
   2fcd2:	e7ec      	b.n	2fcae <f_rename+0x1c>
				memcpy(buf, djo.dir, SZDIRE);			/* Save directory entry of the object */
   2fcd4:	2220      	movs	r2, #32
   2fcd6:	991e      	ldr	r1, [sp, #120]	; 0x78
   2fcd8:	a803      	add	r0, sp, #12
   2fcda:	f7f9 ff6a 	bl	29bb2 <memcpy>
				memcpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
   2fcde:	222c      	movs	r2, #44	; 0x2c
   2fce0:	a917      	add	r1, sp, #92	; 0x5c
   2fce2:	a80c      	add	r0, sp, #48	; 0x30
   2fce4:	f7f9 ff65 	bl	29bb2 <memcpy>
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
   2fce8:	9900      	ldr	r1, [sp, #0]
   2fcea:	a80c      	add	r0, sp, #48	; 0x30
   2fcec:	f7ff fb89 	bl	2f402 <follow_path>
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
   2fcf0:	4604      	mov	r4, r0
   2fcf2:	b958      	cbnz	r0, 2fd0c <f_rename+0x7a>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
   2fcf4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2fcf6:	9b19      	ldr	r3, [sp, #100]	; 0x64
   2fcf8:	429a      	cmp	r2, r3
   2fcfa:	d001      	beq.n	2fd00 <f_rename+0x6e>
   2fcfc:	2408      	movs	r4, #8
   2fcfe:	e007      	b.n	2fd10 <f_rename+0x7e>
   2fd00:	9a10      	ldr	r2, [sp, #64]	; 0x40
   2fd02:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   2fd04:	429a      	cmp	r2, r3
   2fd06:	d010      	beq.n	2fd2a <f_rename+0x98>
   2fd08:	2408      	movs	r4, #8
   2fd0a:	e001      	b.n	2fd10 <f_rename+0x7e>
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
   2fd0c:	2804      	cmp	r0, #4
   2fd0e:	d00c      	beq.n	2fd2a <f_rename+0x98>
			if (res == FR_OK) {
   2fd10:	2c00      	cmp	r4, #0
   2fd12:	d1cc      	bne.n	2fcae <f_rename+0x1c>
				res = dir_remove(&djo);		/* Remove old entry */
   2fd14:	a817      	add	r0, sp, #92	; 0x5c
   2fd16:	f7ff fa55 	bl	2f1c4 <dir_remove>
				if (res == FR_OK) {
   2fd1a:	4604      	mov	r4, r0
   2fd1c:	2800      	cmp	r0, #0
   2fd1e:	d1c6      	bne.n	2fcae <f_rename+0x1c>
					res = sync_fs(fs);
   2fd20:	980b      	ldr	r0, [sp, #44]	; 0x2c
   2fd22:	f7f4 f8a1 	bl	23e68 <sync_fs>
   2fd26:	4604      	mov	r4, r0
   2fd28:	e7c1      	b.n	2fcae <f_rename+0x1c>
					res = dir_register(&djn);			/* Register the new entry */
   2fd2a:	a80c      	add	r0, sp, #48	; 0x30
   2fd2c:	f7ff fbaf 	bl	2f48e <dir_register>
					if (res == FR_OK) {
   2fd30:	4604      	mov	r4, r0
   2fd32:	2800      	cmp	r0, #0
   2fd34:	d1bb      	bne.n	2fcae <f_rename+0x1c>
						dir = djn.dir;					/* Copy directory entry of the object except name */
   2fd36:	9d13      	ldr	r5, [sp, #76]	; 0x4c
						memcpy(dir + 13, buf + 13, SZDIRE - 13);
   2fd38:	2213      	movs	r2, #19
   2fd3a:	f10d 0119 	add.w	r1, sp, #25
   2fd3e:	f105 000d 	add.w	r0, r5, #13
   2fd42:	f7f9 ff36 	bl	29bb2 <memcpy>
						dir[DIR_Attr] = buf[DIR_Attr];
   2fd46:	f89d 3017 	ldrb.w	r3, [sp, #23]
   2fd4a:	72eb      	strb	r3, [r5, #11]
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
   2fd4c:	f013 0f10 	tst.w	r3, #16
   2fd50:	d102      	bne.n	2fd58 <f_rename+0xc6>
   2fd52:	f043 0320 	orr.w	r3, r3, #32
   2fd56:	72eb      	strb	r3, [r5, #11]
						fs->wflag = 1;
   2fd58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2fd5a:	2201      	movs	r2, #1
   2fd5c:	70da      	strb	r2, [r3, #3]
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
   2fd5e:	7aeb      	ldrb	r3, [r5, #11]
   2fd60:	f013 0f10 	tst.w	r3, #16
   2fd64:	d0d4      	beq.n	2fd10 <f_rename+0x7e>
   2fd66:	9a19      	ldr	r2, [sp, #100]	; 0x64
   2fd68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2fd6a:	429a      	cmp	r2, r3
   2fd6c:	d0d0      	beq.n	2fd10 <f_rename+0x7e>
							sect = clst2sect(fs, ld_clust(fs, dir));
   2fd6e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   2fd70:	4629      	mov	r1, r5
   2fd72:	4620      	mov	r0, r4
   2fd74:	f7fe ff18 	bl	2eba8 <ld_clust>
   2fd78:	4601      	mov	r1, r0
   2fd7a:	4620      	mov	r0, r4
   2fd7c:	f7fe ff08 	bl	2eb90 <clst2sect>
							if (sect == 0) {
   2fd80:	4601      	mov	r1, r0
   2fd82:	b908      	cbnz	r0, 2fd88 <f_rename+0xf6>
								res = FR_INT_ERR;
   2fd84:	2402      	movs	r4, #2
   2fd86:	e792      	b.n	2fcae <f_rename+0x1c>
								res = move_window(fs, sect);
   2fd88:	4620      	mov	r0, r4
   2fd8a:	f7fe ffb4 	bl	2ecf6 <move_window>
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
   2fd8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2fd90:	f103 0150 	add.w	r1, r3, #80	; 0x50
								if (res == FR_OK && dir[1] == '.') {
   2fd94:	4604      	mov	r4, r0
   2fd96:	2800      	cmp	r0, #0
   2fd98:	d189      	bne.n	2fcae <f_rename+0x1c>
   2fd9a:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
   2fd9e:	2a2e      	cmp	r2, #46	; 0x2e
   2fda0:	d1b6      	bne.n	2fd10 <f_rename+0x7e>
									st_clust(fs, dir, djn.obj.sclust);
   2fda2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2fda4:	4618      	mov	r0, r3
   2fda6:	f7fe ff12 	bl	2ebce <st_clust>
									fs->wflag = 1;
   2fdaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2fdac:	2201      	movs	r2, #1
   2fdae:	70da      	strb	r2, [r3, #3]
   2fdb0:	e7ae      	b.n	2fd10 <f_rename+0x7e>

0002fdb2 <nrf52_errata_36>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2fdb2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2fdb6:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
                        return true;
                }
            }
        #endif
        #if defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)
            if (var1 == 0x0D)
   2fdba:	2b0d      	cmp	r3, #13
   2fdbc:	d001      	beq.n	2fdc2 <nrf52_errata_36+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   2fdbe:	2000      	movs	r0, #0
   2fdc0:	4770      	bx	lr
                        return true;
   2fdc2:	2001      	movs	r0, #1
    #endif
}
   2fdc4:	4770      	bx	lr

0002fdc6 <nrf52_errata_66>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2fdc6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2fdca:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
                        return true;
                }
            }
        #endif
        #if defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)
            if (var1 == 0x0D)
   2fdce:	2b0d      	cmp	r3, #13
   2fdd0:	d001      	beq.n	2fdd6 <nrf52_errata_66+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   2fdd2:	2000      	movs	r0, #0
   2fdd4:	4770      	bx	lr
                        return true;
   2fdd6:	2001      	movs	r0, #1
    #endif
}
   2fdd8:	4770      	bx	lr

0002fdda <nrf52_errata_136>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2fdda:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2fdde:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
                        return true;
                }
            }
        #endif
        #if defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)
            if (var1 == 0x0D)
   2fde2:	2b0d      	cmp	r3, #13
   2fde4:	d001      	beq.n	2fdea <nrf52_errata_136+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   2fde6:	2000      	movs	r0, #0
   2fde8:	4770      	bx	lr
                        return true;
   2fdea:	2001      	movs	r0, #1
    #endif
}
   2fdec:	4770      	bx	lr

0002fdee <nrf52_configuration_249>:
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2fdee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2fdf2:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   2fdf6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                        return true;
                }
            }
        #endif
        #if defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)
            if (var1 == 0x0D)
   2fdfa:	2a0d      	cmp	r2, #13
   2fdfc:	d001      	beq.n	2fe02 <nrf52_configuration_249+0x14>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   2fdfe:	2000      	movs	r0, #0
   2fe00:	4770      	bx	lr
                switch(var2)
   2fe02:	b10b      	cbz	r3, 2fe08 <nrf52_configuration_249+0x1a>
                        return true;
   2fe04:	2001      	movs	r0, #1
    #endif
}
   2fe06:	4770      	bx	lr
                switch(var2)
   2fe08:	2000      	movs	r0, #0
   2fe0a:	4770      	bx	lr

0002fe0c <nrf52_handle_approtect>:
        Otherwise, the fw branch state is loaded from UICR, emulating the legacy APPROTECT behavior.

         The same mechanism is implemented for SECURE APPROTECT, with the macros
         ENABLE_SECURE_APPROTECT and ENABLE_SECURE_APPROTECT_USER_HANDLING. */
static inline void nrf52_handle_approtect(void)
{
   2fe0c:	b508      	push	{r3, lr}
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   2fe0e:	f7ff ffee 	bl	2fdee <nrf52_configuration_249>
   2fe12:	b138      	cbz	r0, 2fe24 <nrf52_handle_approtect+0x18>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   2fe14:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   2fe18:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   2fe1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2fe20:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
            }
        #endif
    #endif
}
   2fe24:	bd08      	pop	{r3, pc}

0002fe26 <nrfx_isr>:
#include <nrfx.h>
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
   2fe26:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
   2fe28:	4780      	blx	r0
}
   2fe2a:	bd08      	pop	{r3, pc}

0002fe2c <nrf_gpiote_event_configure>:
{
   2fe2c:	b410      	push	{r4}
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   2fe2e:	f501 71a2 	add.w	r1, r1, #324	; 0x144
   2fe32:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   2fe36:	f424 344f 	bic.w	r4, r4, #211968	; 0x33c00
   2fe3a:	f424 7440 	bic.w	r4, r4, #768	; 0x300
   2fe3e:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2fe42:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   2fe46:	0212      	lsls	r2, r2, #8
   2fe48:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
   2fe4c:	041b      	lsls	r3, r3, #16
   2fe4e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2fe52:	431a      	orrs	r2, r3
   2fe54:	4314      	orrs	r4, r2
   2fe56:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
   2fe5a:	bc10      	pop	{r4}
   2fe5c:	4770      	bx	lr

0002fe5e <nrf_gpiote_task_configure>:
{
   2fe5e:	b410      	push	{r4}
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   2fe60:	f501 71a2 	add.w	r1, r1, #324	; 0x144
   2fe64:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   2fe68:	f424 1499 	bic.w	r4, r4, #1253376	; 0x132000
   2fe6c:	f424 54f8 	bic.w	r4, r4, #7936	; 0x1f00
   2fe70:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2fe74:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   2fe78:	0212      	lsls	r2, r2, #8
   2fe7a:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   2fe7e:	041b      	lsls	r3, r3, #16
   2fe80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2fe84:	431a      	orrs	r2, r3
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   2fe86:	f89d 3004 	ldrb.w	r3, [sp, #4]
   2fe8a:	051b      	lsls	r3, r3, #20
   2fe8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   2fe90:	431a      	orrs	r2, r3
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2fe92:	4314      	orrs	r4, r2
   2fe94:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
   2fe98:	bc10      	pop	{r4}
   2fe9a:	4770      	bx	lr

0002fe9c <nrf_gpio_cfg_sense_set>:
{
   2fe9c:	b500      	push	{lr}
   2fe9e:	b085      	sub	sp, #20
   2fea0:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   2fea4:	f10d 030f 	add.w	r3, sp, #15
   2fea8:	9301      	str	r3, [sp, #4]
   2feaa:	2100      	movs	r1, #0
   2feac:	9100      	str	r1, [sp, #0]
   2feae:	460b      	mov	r3, r1
   2feb0:	460a      	mov	r2, r1
   2feb2:	f7f4 ff21 	bl	24cf8 <nrf_gpio_reconfigure>
}
   2feb6:	b005      	add	sp, #20
   2feb8:	f85d fb04 	ldr.w	pc, [sp], #4

0002febc <pin_is_task_output>:
{
   2febc:	b510      	push	{r4, lr}
   2febe:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   2fec0:	f7f4 ffb8 	bl	24e34 <pin_is_output>
   2fec4:	b128      	cbz	r0, 2fed2 <pin_is_task_output+0x16>
   2fec6:	4620      	mov	r0, r4
   2fec8:	f7f4 ff9e 	bl	24e08 <pin_in_use_by_te>
   2fecc:	b118      	cbz	r0, 2fed6 <pin_is_task_output+0x1a>
   2fece:	2001      	movs	r0, #1
   2fed0:	e000      	b.n	2fed4 <pin_is_task_output+0x18>
   2fed2:	2000      	movs	r0, #0
}
   2fed4:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   2fed6:	2000      	movs	r0, #0
   2fed8:	e7fc      	b.n	2fed4 <pin_is_task_output+0x18>

0002feda <pin_is_input>:
{
   2feda:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
   2fedc:	f7f4 ffaa 	bl	24e34 <pin_is_output>
   2fee0:	f080 0001 	eor.w	r0, r0, #1
}
   2fee4:	b2c0      	uxtb	r0, r0
   2fee6:	bd08      	pop	{r3, pc}

0002fee8 <gpiote_polarity_to_trigger>:
}
   2fee8:	4770      	bx	lr

0002feea <gpiote_trigger_to_polarity>:
}
   2feea:	4770      	bx	lr

0002feec <is_level>:
}
   2feec:	2803      	cmp	r0, #3
   2feee:	bf94      	ite	ls
   2fef0:	2000      	movls	r0, #0
   2fef2:	2001      	movhi	r0, #1
   2fef4:	4770      	bx	lr

0002fef6 <latch_pending_read_and_check>:
{
   2fef6:	b510      	push	{r4, lr}
   2fef8:	4604      	mov	r4, r0
    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);
   2fefa:	4602      	mov	r2, r0
   2fefc:	2102      	movs	r1, #2
   2fefe:	2000      	movs	r0, #0
   2ff00:	f7f4 ff56 	bl	24db0 <nrf_gpio_latches_read_and_clear>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   2ff04:	2300      	movs	r3, #0
   2ff06:	2b01      	cmp	r3, #1
   2ff08:	d804      	bhi.n	2ff14 <latch_pending_read_and_check+0x1e>
        if (latch[port_idx])
   2ff0a:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   2ff0e:	b91a      	cbnz	r2, 2ff18 <latch_pending_read_and_check+0x22>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   2ff10:	3301      	adds	r3, #1
   2ff12:	e7f8      	b.n	2ff06 <latch_pending_read_and_check+0x10>
    return false;
   2ff14:	2000      	movs	r0, #0
}
   2ff16:	bd10      	pop	{r4, pc}
            return true;
   2ff18:	2001      	movs	r0, #1
   2ff1a:	e7fc      	b.n	2ff16 <latch_pending_read_and_check+0x20>

0002ff1c <nrf_spi_configure>:
NRF_STATIC_INLINE void nrf_spi_configure(NRF_SPI_Type *      p_reg,
                                         nrf_spi_mode_t      spi_mode,
                                         nrf_spi_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPI_BIT_ORDER_MSB_FIRST ?
        SPI_CONFIG_ORDER_MsbFirst : SPI_CONFIG_ORDER_LsbFirst);
   2ff1c:	3a00      	subs	r2, #0
   2ff1e:	bf18      	it	ne
   2ff20:	2201      	movne	r2, #1
    switch (spi_mode)
   2ff22:	2902      	cmp	r1, #2
   2ff24:	d009      	beq.n	2ff3a <nrf_spi_configure+0x1e>
   2ff26:	2903      	cmp	r1, #3
   2ff28:	d00a      	beq.n	2ff40 <nrf_spi_configure+0x24>
   2ff2a:	2901      	cmp	r1, #1
   2ff2c:	d002      	beq.n	2ff34 <nrf_spi_configure+0x18>
    case NRF_SPI_MODE_3:
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Trailing   << SPI_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
   2ff2e:	f8c0 2554 	str.w	r2, [r0, #1364]	; 0x554
}
   2ff32:	4770      	bx	lr
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
   2ff34:	f042 0202 	orr.w	r2, r2, #2
        break;
   2ff38:	e7f9      	b.n	2ff2e <nrf_spi_configure+0x12>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   2ff3a:	f042 0204 	orr.w	r2, r2, #4
        break;
   2ff3e:	e7f6      	b.n	2ff2e <nrf_spi_configure+0x12>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   2ff40:	f042 0206 	orr.w	r2, r2, #6
        break;
   2ff44:	e7f3      	b.n	2ff2e <nrf_spi_configure+0x12>

0002ff46 <transfer_byte>:
{
   2ff46:	b430      	push	{r4, r5}
   2ff48:	b082      	sub	sp, #8
    return p_reg->RXD;
   2ff4a:	f8d0 3518 	ldr.w	r3, [r0, #1304]	; 0x518
   2ff4e:	b2db      	uxtb	r3, r3
    volatile uint8_t rx_data = nrf_spi_rxd_get(p_spi);
   2ff50:	f88d 3007 	strb.w	r3, [sp, #7]
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
   2ff54:	6a0b      	ldr	r3, [r1, #32]
   2ff56:	698a      	ldr	r2, [r1, #24]
   2ff58:	4293      	cmp	r3, r2
   2ff5a:	d203      	bcs.n	2ff64 <transfer_byte+0x1e>
        p_cb->evt.xfer_desc.p_rx_buffer[p_cb->bytes_transferred] = rx_data;
   2ff5c:	694a      	ldr	r2, [r1, #20]
   2ff5e:	f89d 4007 	ldrb.w	r4, [sp, #7]
   2ff62:	54d4      	strb	r4, [r2, r3]
    ++p_cb->bytes_transferred;
   2ff64:	6a0b      	ldr	r3, [r1, #32]
   2ff66:	1c5a      	adds	r2, r3, #1
   2ff68:	620a      	str	r2, [r1, #32]
    size_t bytes_used = p_cb->bytes_transferred + 1;
   2ff6a:	3302      	adds	r3, #2
    if (p_cb->abort)
   2ff6c:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
   2ff70:	b13c      	cbz	r4, 2ff82 <transfer_byte+0x3c>
        if (bytes_used < p_cb->evt.xfer_desc.tx_length)
   2ff72:	690c      	ldr	r4, [r1, #16]
   2ff74:	429c      	cmp	r4, r3
   2ff76:	d900      	bls.n	2ff7a <transfer_byte+0x34>
            p_cb->evt.xfer_desc.tx_length = bytes_used;
   2ff78:	610b      	str	r3, [r1, #16]
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   2ff7a:	698c      	ldr	r4, [r1, #24]
   2ff7c:	429c      	cmp	r4, r3
   2ff7e:	d900      	bls.n	2ff82 <transfer_byte+0x3c>
            p_cb->evt.xfer_desc.rx_length = bytes_used;
   2ff80:	618b      	str	r3, [r1, #24]
    if (bytes_used < p_cb->evt.xfer_desc.tx_length)
   2ff82:	690c      	ldr	r4, [r1, #16]
   2ff84:	429c      	cmp	r4, r3
   2ff86:	d808      	bhi.n	2ff9a <transfer_byte+0x54>
    else if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   2ff88:	698d      	ldr	r5, [r1, #24]
   2ff8a:	429d      	cmp	r5, r3
   2ff8c:	d80d      	bhi.n	2ffaa <transfer_byte+0x64>
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
   2ff8e:	42a2      	cmp	r2, r4
   2ff90:	d310      	bcc.n	2ffb4 <transfer_byte+0x6e>
   2ff92:	42aa      	cmp	r2, r5
   2ff94:	d210      	bcs.n	2ffb8 <transfer_byte+0x72>
   2ff96:	2001      	movs	r0, #1
   2ff98:	e004      	b.n	2ffa4 <transfer_byte+0x5e>
        nrf_spi_txd_set(p_spi, p_cb->evt.xfer_desc.p_tx_buffer[bytes_used]);
   2ff9a:	68ca      	ldr	r2, [r1, #12]
   2ff9c:	5cd3      	ldrb	r3, [r2, r3]
    p_reg->TXD = data;
   2ff9e:	f8c0 351c 	str.w	r3, [r0, #1308]	; 0x51c
        return true;
   2ffa2:	2001      	movs	r0, #1
}
   2ffa4:	b002      	add	sp, #8
   2ffa6:	bc30      	pop	{r4, r5}
   2ffa8:	4770      	bx	lr
        nrf_spi_txd_set(p_spi, p_cb->orc);
   2ffaa:	7fcb      	ldrb	r3, [r1, #31]
   2ffac:	f8c0 351c 	str.w	r3, [r0, #1308]	; 0x51c
        return true;
   2ffb0:	2001      	movs	r0, #1
   2ffb2:	e7f7      	b.n	2ffa4 <transfer_byte+0x5e>
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
   2ffb4:	2001      	movs	r0, #1
   2ffb6:	e7f5      	b.n	2ffa4 <transfer_byte+0x5e>
   2ffb8:	2000      	movs	r0, #0
   2ffba:	e7f3      	b.n	2ffa4 <transfer_byte+0x5e>

0002ffbc <irq_handler>:
{
   2ffbc:	b510      	push	{r4, lr}
   2ffbe:	460c      	mov	r4, r1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2ffc0:	2200      	movs	r2, #0
   2ffc2:	f8c0 2108 	str.w	r2, [r0, #264]	; 0x108
   2ffc6:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
    if (!transfer_byte(p_spi, p_cb))
   2ffca:	f7ff ffbc 	bl	2ff46 <transfer_byte>
   2ffce:	b100      	cbz	r0, 2ffd2 <irq_handler+0x16>
}
   2ffd0:	bd10      	pop	{r4, pc}
        finish_transfer(p_cb);
   2ffd2:	4620      	mov	r0, r4
   2ffd4:	f7f5 fb96 	bl	25704 <finish_transfer>
}
   2ffd8:	e7fa      	b.n	2ffd0 <irq_handler+0x14>

0002ffda <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
   2ffda:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
   2ffdc:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
   2ffde:	4293      	cmp	r3, r2
   2ffe0:	d804      	bhi.n	2ffec <_GetAvailWriteSpace+0x12>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   2ffe2:	6881      	ldr	r1, [r0, #8]
   2ffe4:	1a8a      	subs	r2, r1, r2
   2ffe6:	4413      	add	r3, r2
   2ffe8:	1e58      	subs	r0, r3, #1
   2ffea:	4770      	bx	lr
    r = RdOff - WrOff - 1u;
   2ffec:	1a98      	subs	r0, r3, r2
   2ffee:	3801      	subs	r0, #1
}
   2fff0:	4770      	bx	lr

0002fff2 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   2fff2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2fff6:	4604      	mov	r4, r0
   2fff8:	4688      	mov	r8, r1
   2fffa:	4616      	mov	r6, r2
  WrOff = pRing->WrOff;
   2fffc:	68c5      	ldr	r5, [r0, #12]
  Rem = pRing->SizeOfBuffer - WrOff;
   2fffe:	6887      	ldr	r7, [r0, #8]
   30000:	eba7 0905 	sub.w	r9, r7, r5
  if (Rem > NumBytes) {
   30004:	4591      	cmp	r9, r2
   30006:	d907      	bls.n	30018 <_WriteNoCheck+0x26>
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   30008:	6840      	ldr	r0, [r0, #4]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
   3000a:	4428      	add	r0, r5
   3000c:	f7f9 fdd1 	bl	29bb2 <memcpy>
    pRing->WrOff = WrOff + NumBytes;
   30010:	4435      	add	r5, r6
   30012:	60e5      	str	r5, [r4, #12]
}
   30014:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   30018:	6840      	ldr	r0, [r0, #4]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
   3001a:	464a      	mov	r2, r9
   3001c:	4428      	add	r0, r5
   3001e:	f7f9 fdc8 	bl	29bb2 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
   30022:	1bed      	subs	r5, r5, r7
   30024:	4435      	add	r5, r6
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
   30026:	462a      	mov	r2, r5
   30028:	eb08 0109 	add.w	r1, r8, r9
   3002c:	6860      	ldr	r0, [r4, #4]
   3002e:	f7f9 fdc0 	bl	29bb2 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   30032:	60e5      	str	r5, [r4, #12]
}
   30034:	e7ee      	b.n	30014 <_WriteNoCheck+0x22>

00030036 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   30036:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3003a:	4606      	mov	r6, r0
   3003c:	4688      	mov	r8, r1
   3003e:	4617      	mov	r7, r2
  WrOff = pRing->WrOff;
   30040:	68c5      	ldr	r5, [r0, #12]
  NumBytesWritten = 0u;
   30042:	f04f 0900 	mov.w	r9, #0
   30046:	e018      	b.n	3007a <_WriteBlocking+0x44>
      NumBytesToWrite = RdOff - WrOff - 1u;
   30048:	1b5b      	subs	r3, r3, r5
   3004a:	1e5a      	subs	r2, r3, #1
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   3004c:	68b3      	ldr	r3, [r6, #8]
   3004e:	1b5c      	subs	r4, r3, r5
   30050:	4294      	cmp	r4, r2
   30052:	bf28      	it	cs
   30054:	4614      	movcs	r4, r2
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   30056:	42bc      	cmp	r4, r7
   30058:	bf28      	it	cs
   3005a:	463c      	movcs	r4, r7
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   3005c:	6870      	ldr	r0, [r6, #4]
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
   3005e:	4622      	mov	r2, r4
   30060:	4641      	mov	r1, r8
   30062:	4428      	add	r0, r5
   30064:	f7f9 fda5 	bl	29bb2 <memcpy>
    NumBytesWritten += NumBytesToWrite;
   30068:	44a1      	add	r9, r4
    pBuffer         += NumBytesToWrite;
   3006a:	44a0      	add	r8, r4
    NumBytes        -= NumBytesToWrite;
   3006c:	1b3f      	subs	r7, r7, r4
    WrOff           += NumBytesToWrite;
   3006e:	4425      	add	r5, r4
    if (WrOff == pRing->SizeOfBuffer) {
   30070:	68b3      	ldr	r3, [r6, #8]
   30072:	42ab      	cmp	r3, r5
   30074:	d009      	beq.n	3008a <_WriteBlocking+0x54>
    pRing->WrOff = WrOff;
   30076:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
   30078:	b14f      	cbz	r7, 3008e <_WriteBlocking+0x58>
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   3007a:	6933      	ldr	r3, [r6, #16]
    if (RdOff > WrOff) {
   3007c:	429d      	cmp	r5, r3
   3007e:	d3e3      	bcc.n	30048 <_WriteBlocking+0x12>
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   30080:	68b2      	ldr	r2, [r6, #8]
   30082:	1b5b      	subs	r3, r3, r5
   30084:	441a      	add	r2, r3
   30086:	3a01      	subs	r2, #1
   30088:	e7e0      	b.n	3004c <_WriteBlocking+0x16>
      WrOff = 0u;
   3008a:	2500      	movs	r5, #0
   3008c:	e7f3      	b.n	30076 <_WriteBlocking+0x40>
}
   3008e:	4648      	mov	r0, r9
   30090:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00030094 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
   30094:	b508      	push	{r3, lr}
  _DoInit();
   30096:	f7f5 fcb9 	bl	25a0c <_DoInit>
}
   3009a:	bd08      	pop	{r3, pc}

0003009c <rtt_init>:
{
   3009c:	b508      	push	{r3, lr}
	SEGGER_RTT_Init();
   3009e:	f7ff fff9 	bl	30094 <SEGGER_RTT_Init>
}
   300a2:	2000      	movs	r0, #0
   300a4:	bd08      	pop	{r3, pc}

000300a6 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   300a6:	b160      	cbz	r0, 300c2 <z_device_is_ready+0x1c>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   300a8:	68c3      	ldr	r3, [r0, #12]
   300aa:	785a      	ldrb	r2, [r3, #1]
   300ac:	f012 0f01 	tst.w	r2, #1
   300b0:	d003      	beq.n	300ba <z_device_is_ready+0x14>
   300b2:	781b      	ldrb	r3, [r3, #0]
   300b4:	b11b      	cbz	r3, 300be <z_device_is_ready+0x18>
   300b6:	2000      	movs	r0, #0
   300b8:	4770      	bx	lr
   300ba:	2000      	movs	r0, #0
   300bc:	4770      	bx	lr
   300be:	2001      	movs	r0, #1
   300c0:	4770      	bx	lr
		return false;
   300c2:	2000      	movs	r0, #0
}
   300c4:	4770      	bx	lr

000300c6 <z_early_memset>:
{
   300c6:	b508      	push	{r3, lr}
	(void) memset(dst, c, n);
   300c8:	f7f9 fda2 	bl	29c10 <memset>
}
   300cc:	bd08      	pop	{r3, pc}

000300ce <z_early_memcpy>:
{
   300ce:	b508      	push	{r3, lr}
	(void) memcpy(dst, src, n);
   300d0:	f7f9 fd6f 	bl	29bb2 <memcpy>
}
   300d4:	bd08      	pop	{r3, pc}

000300d6 <k_heap_init>:
{
   300d6:	b510      	push	{r4, lr}
	sys_dlist_init(&w->waitq);
   300d8:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
   300dc:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
   300de:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
   300e0:	f7f8 f94c 	bl	2837c <sys_heap_init>
}
   300e4:	bd10      	pop	{r4, pc}

000300e6 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   300e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   300ea:	b085      	sub	sp, #20
   300ec:	4607      	mov	r7, r0
   300ee:	9103      	str	r1, [sp, #12]
   300f0:	4692      	mov	sl, r2
   300f2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   300f4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   300f6:	4628      	mov	r0, r5
   300f8:	4621      	mov	r1, r4
   300fa:	f000 fd88 	bl	30c0e <sys_clock_timeout_end_calc>
   300fe:	4606      	mov	r6, r0
   30100:	4689      	mov	r9, r1
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   30102:	f1b4 3fff 	cmp.w	r4, #4294967295
   30106:	bf08      	it	eq
   30108:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   3010c:	d00d      	beq.n	3012a <k_heap_aligned_alloc+0x44>

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   3010e:	f107 0b14 	add.w	fp, r7, #20
	__asm__ volatile(
   30112:	f04f 0340 	mov.w	r3, #64	; 0x40
   30116:	f3ef 8511 	mrs	r5, BASEPRI
   3011a:	f383 8812 	msr	BASEPRI_MAX, r3
   3011e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");

	bool blocked_alloc = false;
   30122:	f04f 0800 	mov.w	r8, #0
	void *ret = NULL;
   30126:	4644      	mov	r4, r8

	while (ret == NULL) {
   30128:	e014      	b.n	30154 <k_heap_aligned_alloc+0x6e>
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   3012a:	f04f 36ff 	mov.w	r6, #4294967295
   3012e:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
   30132:	e7ec      	b.n	3010e <k_heap_aligned_alloc+0x28>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   30134:	9000      	str	r0, [sp, #0]
   30136:	9101      	str	r1, [sp, #4]
   30138:	f107 020c 	add.w	r2, r7, #12
   3013c:	4629      	mov	r1, r5
   3013e:	4658      	mov	r0, fp
   30140:	f7f6 fdf0 	bl	26d24 <z_pend_curr>
   30144:	f04f 0340 	mov.w	r3, #64	; 0x40
   30148:	f3ef 8511 	mrs	r5, BASEPRI
   3014c:	f383 8812 	msr	BASEPRI_MAX, r3
   30150:	f3bf 8f6f 	isb	sy
	while (ret == NULL) {
   30154:	b9ac      	cbnz	r4, 30182 <k_heap_aligned_alloc+0x9c>
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   30156:	4652      	mov	r2, sl
   30158:	9903      	ldr	r1, [sp, #12]
   3015a:	4638      	mov	r0, r7
   3015c:	f7f8 f898 	bl	28290 <sys_heap_aligned_alloc>
   30160:	4604      	mov	r4, r0
		now = sys_clock_tick_get();
   30162:	f7f7 f983 	bl	2746c <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   30166:	b964      	cbnz	r4, 30182 <k_heap_aligned_alloc+0x9c>
		    (ret != NULL) || ((end - now) <= 0)) {
   30168:	1a30      	subs	r0, r6, r0
   3016a:	eb69 0101 	sbc.w	r1, r9, r1
   3016e:	2801      	cmp	r0, #1
   30170:	f171 0300 	sbcs.w	r3, r1, #0
   30174:	db05      	blt.n	30182 <k_heap_aligned_alloc+0x9c>
		if (!blocked_alloc) {
   30176:	f1b8 0f00 	cmp.w	r8, #0
   3017a:	d1db      	bne.n	30134 <k_heap_aligned_alloc+0x4e>
			blocked_alloc = true;
   3017c:	f04f 0801 	mov.w	r8, #1
   30180:	e7d8      	b.n	30134 <k_heap_aligned_alloc+0x4e>
	__asm__ volatile(
   30182:	f385 8811 	msr	BASEPRI, r5
   30186:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   3018a:	4620      	mov	r0, r4
   3018c:	b005      	add	sp, #20
   3018e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00030192 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   30192:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   30194:	4604      	mov	r4, r0
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   30196:	f100 0714 	add.w	r7, r0, #20
	__asm__ volatile(
   3019a:	f04f 0340 	mov.w	r3, #64	; 0x40
   3019e:	f3ef 8511 	mrs	r5, BASEPRI
   301a2:	f383 8812 	msr	BASEPRI_MAX, r3
   301a6:	f3bf 8f6f 	isb	sy

	sys_heap_free(&h->heap, mem);
   301aa:	f7f8 f82d 	bl	28208 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   301ae:	f104 000c 	add.w	r0, r4, #12
   301b2:	f000 fc65 	bl	30a80 <z_unpend_all>
   301b6:	b920      	cbnz	r0, 301c2 <k_heap_free+0x30>
	__asm__ volatile(
   301b8:	f385 8811 	msr	BASEPRI, r5
   301bc:	f3bf 8f6f 	isb	sy
		z_reschedule(&h->lock, key);
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   301c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		z_reschedule(&h->lock, key);
   301c2:	4629      	mov	r1, r5
   301c4:	4638      	mov	r0, r7
   301c6:	f7f6 fc49 	bl	26a5c <z_reschedule>
   301ca:	e7f9      	b.n	301c0 <k_heap_free+0x2e>

000301cc <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   301cc:	68c2      	ldr	r2, [r0, #12]
   301ce:	6903      	ldr	r3, [r0, #16]
   301d0:	431a      	orrs	r2, r3
   301d2:	f012 0203 	ands.w	r2, r2, #3
   301d6:	d10d      	bne.n	301f4 <create_free_list+0x28>
	slab->free_list = NULL;
   301d8:	2100      	movs	r1, #0
   301da:	6141      	str	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   301dc:	e005      	b.n	301ea <create_free_list+0x1e>
		*(char **)p = slab->free_list;
   301de:	6941      	ldr	r1, [r0, #20]
   301e0:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
   301e2:	6143      	str	r3, [r0, #20]
		p += slab->block_size;
   301e4:	68c1      	ldr	r1, [r0, #12]
   301e6:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   301e8:	3201      	adds	r2, #1
   301ea:	6881      	ldr	r1, [r0, #8]
   301ec:	4291      	cmp	r1, r2
   301ee:	d8f6      	bhi.n	301de <create_free_list+0x12>
	return 0;
   301f0:	2000      	movs	r0, #0
   301f2:	4770      	bx	lr
		return -EINVAL;
   301f4:	f06f 0015 	mvn.w	r0, #21
}
   301f8:	4770      	bx	lr

000301fa <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   301fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   301fe:	4604      	mov	r4, r0
   30200:	460d      	mov	r5, r1
	__asm__ volatile(
   30202:	f04f 0340 	mov.w	r3, #64	; 0x40
   30206:	f3ef 8611 	mrs	r6, BASEPRI
   3020a:	f383 8812 	msr	BASEPRI_MAX, r3
   3020e:	f3bf 8f6f 	isb	sy
   30212:	4637      	mov	r7, r6
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   30214:	6943      	ldr	r3, [r0, #20]
   30216:	b16b      	cbz	r3, 30234 <k_mem_slab_free+0x3a>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
   30218:	682b      	ldr	r3, [r5, #0]
   3021a:	6962      	ldr	r2, [r4, #20]
   3021c:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   3021e:	682b      	ldr	r3, [r5, #0]
   30220:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   30222:	69a3      	ldr	r3, [r4, #24]
   30224:	3b01      	subs	r3, #1
   30226:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   30228:	f387 8811 	msr	BASEPRI, r7
   3022c:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   30230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   30234:	f100 0808 	add.w	r8, r0, #8
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   30238:	f000 fc00 	bl	30a3c <z_unpend_first_thread>
		if (pending_thread != NULL) {
   3023c:	2800      	cmp	r0, #0
   3023e:	d0eb      	beq.n	30218 <k_mem_slab_free+0x1e>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   30240:	682a      	ldr	r2, [r5, #0]
   30242:	2100      	movs	r1, #0
   30244:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   30248:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   3024a:	f000 fb42 	bl	308d2 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   3024e:	4631      	mov	r1, r6
   30250:	4640      	mov	r0, r8
   30252:	f7f6 fc03 	bl	26a5c <z_reschedule>
			return;
   30256:	e7eb      	b.n	30230 <k_mem_slab_free+0x36>

00030258 <setup_thread_stack>:
{
   30258:	b410      	push	{r4}
   3025a:	4603      	mov	r3, r0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   3025c:	3207      	adds	r2, #7
   3025e:	f022 0207 	bic.w	r2, r2, #7
   30262:	f102 0040 	add.w	r0, r2, #64	; 0x40

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   30266:	f101 0440 	add.w	r4, r1, #64	; 0x40
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
   3026a:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
	new_thread->stack_info.size = stack_buf_size;
   3026e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	new_thread->stack_info.delta = delta;
   30272:	2200      	movs	r2, #0
   30274:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
   30278:	4408      	add	r0, r1
   3027a:	bc10      	pop	{r4}
   3027c:	4770      	bx	lr

0003027e <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   3027e:	f3ef 8005 	mrs	r0, IPSR
}
   30282:	3800      	subs	r0, #0
   30284:	bf18      	it	ne
   30286:	2001      	movne	r0, #1
   30288:	4770      	bx	lr

0003028a <k_thread_name_get>:
}
   3028a:	3078      	adds	r0, #120	; 0x78
   3028c:	4770      	bx	lr

0003028e <z_impl_k_thread_start>:
{
   3028e:	b508      	push	{r3, lr}
	z_sched_start(thread);
   30290:	f7f6 fd0e 	bl	26cb0 <z_sched_start>
}
   30294:	bd08      	pop	{r3, pc}

00030296 <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
   30296:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
   30298:	2400      	movs	r4, #0
   3029a:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
   3029c:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   3029e:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
   302a0:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
   302a2:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
   302a4:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
   302a6:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
   302a8:	bc10      	pop	{r4}
   302aa:	4770      	bx	lr

000302ac <z_impl_k_thread_create>:
{
   302ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   302ae:	b087      	sub	sp, #28
   302b0:	4604      	mov	r4, r0
   302b2:	9e12      	ldr	r6, [sp, #72]	; 0x48
   302b4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   302b6:	2700      	movs	r7, #0
   302b8:	9705      	str	r7, [sp, #20]
   302ba:	9f10      	ldr	r7, [sp, #64]	; 0x40
   302bc:	9704      	str	r7, [sp, #16]
   302be:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   302c0:	9703      	str	r7, [sp, #12]
   302c2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   302c4:	9702      	str	r7, [sp, #8]
   302c6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   302c8:	9701      	str	r7, [sp, #4]
   302ca:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   302cc:	9700      	str	r7, [sp, #0]
   302ce:	f7f5 ffa5 	bl	2621c <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   302d2:	f1b5 3fff 	cmp.w	r5, #4294967295
   302d6:	bf08      	it	eq
   302d8:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   302dc:	d102      	bne.n	302e4 <z_impl_k_thread_create+0x38>
}
   302de:	4620      	mov	r0, r4
   302e0:	b007      	add	sp, #28
   302e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		schedule_new_thread(new_thread, delay);
   302e4:	4632      	mov	r2, r6
   302e6:	462b      	mov	r3, r5
   302e8:	4620      	mov	r0, r4
   302ea:	f7f5 ff89 	bl	26200 <schedule_new_thread>
   302ee:	e7f6      	b.n	302de <z_impl_k_thread_create+0x32>

000302f0 <z_pm_save_idle_exit>:
{
   302f0:	b508      	push	{r3, lr}
	pm_system_resume();
   302f2:	f7e4 fa35 	bl	14760 <pm_system_resume>
	sys_clock_idle_exit();
   302f6:	f7fd ffbd 	bl	2e274 <sys_clock_idle_exit>
}
   302fa:	bd08      	pop	{r3, pc}

000302fc <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
   302fc:	4288      	cmp	r0, r1
   302fe:	da00      	bge.n	30302 <new_prio_for_inheritance+0x6>
   30300:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   30302:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
   30306:	db01      	blt.n	3030c <new_prio_for_inheritance+0x10>
   30308:	4608      	mov	r0, r1
   3030a:	4770      	bx	lr
   3030c:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
   30310:	4770      	bx	lr

00030312 <adjust_owner_prio>:
{
   30312:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
   30314:	6880      	ldr	r0, [r0, #8]
   30316:	f990 300e 	ldrsb.w	r3, [r0, #14]
   3031a:	428b      	cmp	r3, r1
   3031c:	d101      	bne.n	30322 <adjust_owner_prio+0x10>
	return false;
   3031e:	2000      	movs	r0, #0
}
   30320:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
   30322:	f7f6 fd1b 	bl	26d5c <z_set_prio>
   30326:	e7fb      	b.n	30320 <adjust_owner_prio+0xe>

00030328 <z_impl_k_mutex_init>:
{
   30328:	4603      	mov	r3, r0
	mutex->owner = NULL;
   3032a:	2000      	movs	r0, #0
   3032c:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
   3032e:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
   30330:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   30332:	605b      	str	r3, [r3, #4]
}
   30334:	4770      	bx	lr

00030336 <sys_sflist_append>:
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   30336:	680b      	ldr	r3, [r1, #0]
   30338:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   3033c:	600b      	str	r3, [r1, #0]
	return list->tail;
   3033e:	6842      	ldr	r2, [r0, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   30340:	b132      	cbz	r2, 30350 <sys_sflist_append+0x1a>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   30342:	6813      	ldr	r3, [r2, #0]
   30344:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   30348:	430b      	orrs	r3, r1
   3034a:	6013      	str	r3, [r2, #0]
	list->tail = node;
   3034c:	6041      	str	r1, [r0, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   3034e:	4770      	bx	lr
	list->tail = node;
   30350:	6041      	str	r1, [r0, #4]
	list->head = node;
   30352:	6001      	str	r1, [r0, #0]
}
   30354:	4770      	bx	lr

00030356 <sys_sflist_insert>:
Z_GENLIST_INSERT(sflist, sfnode)
   30356:	b508      	push	{r3, lr}
   30358:	b191      	cbz	r1, 30380 <sys_sflist_insert+0x2a>
   3035a:	468c      	mov	ip, r1
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   3035c:	680b      	ldr	r3, [r1, #0]
   3035e:	f023 0103 	bic.w	r1, r3, #3
Z_GENLIST_INSERT(sflist, sfnode)
   30362:	2b03      	cmp	r3, #3
   30364:	d918      	bls.n	30398 <sys_sflist_insert+0x42>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   30366:	6813      	ldr	r3, [r2, #0]
   30368:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   3036c:	430b      	orrs	r3, r1
   3036e:	6013      	str	r3, [r2, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   30370:	f8dc 3000 	ldr.w	r3, [ip]
   30374:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   30378:	4313      	orrs	r3, r2
   3037a:	f8cc 3000 	str.w	r3, [ip]
Z_GENLIST_INSERT(sflist, sfnode)
   3037e:	bd08      	pop	{r3, pc}
	return list->head;
   30380:	6801      	ldr	r1, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   30382:	6813      	ldr	r3, [r2, #0]
   30384:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   30388:	430b      	orrs	r3, r1
   3038a:	6013      	str	r3, [r2, #0]
	list->head = node;
   3038c:	6002      	str	r2, [r0, #0]
	return list->tail;
   3038e:	6843      	ldr	r3, [r0, #4]
Z_GENLIST_PREPEND(sflist, sfnode)
   30390:	2b00      	cmp	r3, #0
   30392:	d1f4      	bne.n	3037e <sys_sflist_insert+0x28>
	list->tail = node;
   30394:	6042      	str	r2, [r0, #4]
}
   30396:	e7f2      	b.n	3037e <sys_sflist_insert+0x28>
Z_GENLIST_INSERT(sflist, sfnode)
   30398:	4611      	mov	r1, r2
   3039a:	f7ff ffcc 	bl	30336 <sys_sflist_append>
   3039e:	e7ee      	b.n	3037e <sys_sflist_insert+0x28>

000303a0 <prepare_thread_to_run>:
{
   303a0:	b508      	push	{r3, lr}
   303a2:	2200      	movs	r2, #0
   303a4:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
   303a8:	6141      	str	r1, [r0, #20]
	z_ready_thread(thread);
   303aa:	f000 fa92 	bl	308d2 <z_ready_thread>
}
   303ae:	bd08      	pop	{r3, pc}

000303b0 <queue_insert>:
{
   303b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   303b4:	4604      	mov	r4, r0
   303b6:	460e      	mov	r6, r1
   303b8:	4615      	mov	r5, r2
   303ba:	461f      	mov	r7, r3
   303bc:	f89d 3020 	ldrb.w	r3, [sp, #32]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   303c0:	f100 0808 	add.w	r8, r0, #8
	__asm__ volatile(
   303c4:	f04f 0240 	mov.w	r2, #64	; 0x40
   303c8:	f3ef 8911 	mrs	r9, BASEPRI
   303cc:	f382 8812 	msr	BASEPRI_MAX, r2
   303d0:	f3bf 8f6f 	isb	sy
   303d4:	46ca      	mov	sl, r9
	if (is_append) {
   303d6:	b103      	cbz	r3, 303da <queue_insert+0x2a>
	return list->tail;
   303d8:	6846      	ldr	r6, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   303da:	4640      	mov	r0, r8
   303dc:	f000 fb2e 	bl	30a3c <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   303e0:	b998      	cbnz	r0, 3040a <queue_insert+0x5a>
	if (alloc) {
   303e2:	b9df      	cbnz	r7, 3041c <queue_insert+0x6c>
	node->next_and_flags = flags;
   303e4:	2300      	movs	r3, #0
   303e6:	602b      	str	r3, [r5, #0]
	sys_sflist_insert(&queue->data_q, prev, data);
   303e8:	462a      	mov	r2, r5
   303ea:	4631      	mov	r1, r6
   303ec:	4620      	mov	r0, r4
   303ee:	f7ff ffb2 	bl	30356 <sys_sflist_insert>
	z_handle_obj_poll_events(&queue->poll_events, state);
   303f2:	2104      	movs	r1, #4
   303f4:	f104 0010 	add.w	r0, r4, #16
   303f8:	f000 fde5 	bl	30fc6 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   303fc:	4649      	mov	r1, r9
   303fe:	4640      	mov	r0, r8
   30400:	f7f6 fb2c 	bl	26a5c <z_reschedule>
	return 0;
   30404:	2000      	movs	r0, #0
}
   30406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prepare_thread_to_run(first_pending_thread, data);
   3040a:	4629      	mov	r1, r5
   3040c:	f7ff ffc8 	bl	303a0 <prepare_thread_to_run>
		z_reschedule(&queue->lock, key);
   30410:	4649      	mov	r1, r9
   30412:	4640      	mov	r0, r8
   30414:	f7f6 fb22 	bl	26a5c <z_reschedule>
		return 0;
   30418:	2000      	movs	r0, #0
   3041a:	e7f4      	b.n	30406 <queue_insert+0x56>
	return z_thread_aligned_alloc(0, size);
   3041c:	2108      	movs	r1, #8
   3041e:	2000      	movs	r0, #0
   30420:	f7f7 f992 	bl	27748 <z_thread_aligned_alloc>
		if (anode == NULL) {
   30424:	b120      	cbz	r0, 30430 <queue_insert+0x80>
		anode->data = data;
   30426:	6045      	str	r5, [r0, #4]
   30428:	2201      	movs	r2, #1
   3042a:	6002      	str	r2, [r0, #0]
		data = anode;
   3042c:	4605      	mov	r5, r0
   3042e:	e7db      	b.n	303e8 <queue_insert+0x38>
	__asm__ volatile(
   30430:	f38a 8811 	msr	BASEPRI, sl
   30434:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   30438:	f06f 000b 	mvn.w	r0, #11
   3043c:	e7e3      	b.n	30406 <queue_insert+0x56>

0003043e <z_queue_node_peek>:
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   3043e:	b160      	cbz	r0, 3045a <z_queue_node_peek+0x1c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   30440:	6803      	ldr	r3, [r0, #0]
   30442:	f013 0f03 	tst.w	r3, #3
   30446:	d008      	beq.n	3045a <z_queue_node_peek+0x1c>
{
   30448:	b510      	push	{r4, lr}
		ret = anode->data;
   3044a:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   3044c:	b909      	cbnz	r1, 30452 <z_queue_node_peek+0x14>
		ret = anode->data;
   3044e:	4620      	mov	r0, r4
}
   30450:	bd10      	pop	{r4, pc}
			k_free(anode);
   30452:	f000 fde8 	bl	31026 <k_free>
		ret = anode->data;
   30456:	4620      	mov	r0, r4
   30458:	e7fa      	b.n	30450 <z_queue_node_peek+0x12>
}
   3045a:	4770      	bx	lr

0003045c <z_impl_k_queue_init>:
	list->head = NULL;
   3045c:	2300      	movs	r3, #0
   3045e:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
   30460:	6043      	str	r3, [r0, #4]
   30462:	f100 0308 	add.w	r3, r0, #8
	list->head = (sys_dnode_t *)list;
   30466:	6083      	str	r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   30468:	60c3      	str	r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   3046a:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
   3046e:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   30470:	6143      	str	r3, [r0, #20]
}
   30472:	4770      	bx	lr

00030474 <k_queue_append>:
{
   30474:	b500      	push	{lr}
   30476:	b083      	sub	sp, #12
   30478:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   3047a:	2301      	movs	r3, #1
   3047c:	9300      	str	r3, [sp, #0]
   3047e:	2300      	movs	r3, #0
   30480:	4619      	mov	r1, r3
   30482:	f7ff ff95 	bl	303b0 <queue_insert>
}
   30486:	b003      	add	sp, #12
   30488:	f85d fb04 	ldr.w	pc, [sp], #4

0003048c <k_queue_prepend>:
{
   3048c:	b500      	push	{lr}
   3048e:	b083      	sub	sp, #12
   30490:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   30492:	2100      	movs	r1, #0
   30494:	9100      	str	r1, [sp, #0]
   30496:	460b      	mov	r3, r1
   30498:	f7ff ff8a 	bl	303b0 <queue_insert>
}
   3049c:	b003      	add	sp, #12
   3049e:	f85d fb04 	ldr.w	pc, [sp], #4

000304a2 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   304a2:	b15a      	cbz	r2, 304bc <z_impl_k_sem_init+0x1a>
   304a4:	428a      	cmp	r2, r1
   304a6:	d30c      	bcc.n	304c2 <z_impl_k_sem_init+0x20>
	sem->count = initial_count;
   304a8:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   304aa:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   304ac:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   304ae:	6040      	str	r0, [r0, #4]
	sys_dlist_init(&sem->poll_events);
   304b0:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
   304b4:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   304b6:	6143      	str	r3, [r0, #20]
	return 0;
   304b8:	2000      	movs	r0, #0
   304ba:	4770      	bx	lr
		return -EINVAL;
   304bc:	f06f 0015 	mvn.w	r0, #21
   304c0:	4770      	bx	lr
   304c2:	f06f 0015 	mvn.w	r0, #21
}
   304c6:	4770      	bx	lr

000304c8 <sys_slist_remove>:
Z_GENLIST_REMOVE(slist, snode)
   304c8:	460b      	mov	r3, r1
   304ca:	b139      	cbz	r1, 304dc <sys_slist_remove+0x14>
	return node->next;
   304cc:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
   304ce:	6019      	str	r1, [r3, #0]
	return list->tail;
   304d0:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   304d2:	428a      	cmp	r2, r1
   304d4:	d009      	beq.n	304ea <sys_slist_remove+0x22>
	parent->next = child;
   304d6:	2300      	movs	r3, #0
   304d8:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   304da:	4770      	bx	lr
	return node->next;
   304dc:	6813      	ldr	r3, [r2, #0]
	list->head = node;
   304de:	6003      	str	r3, [r0, #0]
	return list->tail;
   304e0:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   304e2:	428a      	cmp	r2, r1
   304e4:	d1f7      	bne.n	304d6 <sys_slist_remove+0xe>
	list->tail = node;
   304e6:	6043      	str	r3, [r0, #4]
}
   304e8:	e7f5      	b.n	304d6 <sys_slist_remove+0xe>
	list->tail = node;
   304ea:	6043      	str	r3, [r0, #4]
}
   304ec:	e7f3      	b.n	304d6 <sys_slist_remove+0xe>

000304ee <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   304ee:	b508      	push	{r3, lr}
   304f0:	460a      	mov	r2, r1
	return list->head;
   304f2:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   304f4:	2100      	movs	r1, #0
   304f6:	e001      	b.n	304fc <sys_slist_find_and_remove+0xe>
   304f8:	4619      	mov	r1, r3
   304fa:	681b      	ldr	r3, [r3, #0]
   304fc:	b12b      	cbz	r3, 3050a <sys_slist_find_and_remove+0x1c>
   304fe:	4293      	cmp	r3, r2
   30500:	d1fa      	bne.n	304f8 <sys_slist_find_and_remove+0xa>
   30502:	f7ff ffe1 	bl	304c8 <sys_slist_remove>
   30506:	2001      	movs	r0, #1
   30508:	e000      	b.n	3050c <sys_slist_find_and_remove+0x1e>
   3050a:	2000      	movs	r0, #0
   3050c:	bd08      	pop	{r3, pc}

0003050e <queue_remove_locked>:
{
   3050e:	b508      	push	{r3, lr}
	return (*flagp & BIT(bit)) != 0U;
   30510:	68cb      	ldr	r3, [r1, #12]
	*flagp &= ~BIT(bit);
   30512:	f023 0204 	bic.w	r2, r3, #4
   30516:	60ca      	str	r2, [r1, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   30518:	f013 0f04 	tst.w	r3, #4
   3051c:	d100      	bne.n	30520 <queue_remove_locked+0x12>
}
   3051e:	bd08      	pop	{r3, pc}
		(void)sys_slist_find_and_remove(&queue->pending, &work->node);
   30520:	30b8      	adds	r0, #184	; 0xb8
   30522:	f7ff ffe4 	bl	304ee <sys_slist_find_and_remove>
}
   30526:	e7fa      	b.n	3051e <queue_remove_locked+0x10>

00030528 <cancel_async_locked>:
{
   30528:	b510      	push	{r4, lr}
   3052a:	4604      	mov	r4, r0
	return (*flagp & BIT(bit)) != 0U;
   3052c:	68c3      	ldr	r3, [r0, #12]
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   3052e:	f013 0f02 	tst.w	r3, #2
   30532:	d009      	beq.n	30548 <cancel_async_locked+0x20>
	return *flagp;
   30534:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   30536:	f013 000f 	ands.w	r0, r3, #15
   3053a:	d004      	beq.n	30546 <cancel_async_locked+0x1e>
	*flagp |= BIT(bit);
   3053c:	f043 0202 	orr.w	r2, r3, #2
   30540:	60e2      	str	r2, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   30542:	f040 0002 	orr.w	r0, r0, #2
}
   30546:	bd10      	pop	{r4, pc}
		queue_remove_locked(work->queue, work);
   30548:	4601      	mov	r1, r0
   3054a:	6880      	ldr	r0, [r0, #8]
   3054c:	f7ff ffdf 	bl	3050e <queue_remove_locked>
   30550:	e7f0      	b.n	30534 <cancel_async_locked+0xc>

00030552 <notify_queue_locked>:
	if (queue != NULL) {
   30552:	b130      	cbz	r0, 30562 <notify_queue_locked+0x10>
{
   30554:	b508      	push	{r3, lr}
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   30556:	2200      	movs	r2, #0
   30558:	4611      	mov	r1, r2
   3055a:	30c0      	adds	r0, #192	; 0xc0
   3055c:	f000 faa4 	bl	30aa8 <z_sched_wake>
}
   30560:	bd08      	pop	{r3, pc}
	bool rv = false;
   30562:	2000      	movs	r0, #0
}
   30564:	4770      	bx	lr

00030566 <submit_to_queue_locked>:
{
   30566:	b570      	push	{r4, r5, r6, lr}
   30568:	460d      	mov	r5, r1
	return (*flagp & BIT(bit)) != 0U;
   3056a:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   3056c:	f013 0f02 	tst.w	r3, #2
   30570:	d122      	bne.n	305b8 <submit_to_queue_locked+0x52>
   30572:	4604      	mov	r4, r0
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   30574:	f013 0f04 	tst.w	r3, #4
   30578:	d123      	bne.n	305c2 <submit_to_queue_locked+0x5c>
		if (*queuep == NULL) {
   3057a:	680b      	ldr	r3, [r1, #0]
   3057c:	b1ab      	cbz	r3, 305aa <submit_to_queue_locked+0x44>
	return (*flagp & BIT(bit)) != 0U;
   3057e:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   30580:	f013 0f01 	tst.w	r3, #1
   30584:	d014      	beq.n	305b0 <submit_to_queue_locked+0x4a>
			*queuep = work->queue;
   30586:	68a3      	ldr	r3, [r4, #8]
   30588:	602b      	str	r3, [r5, #0]
			ret = 2;
   3058a:	2602      	movs	r6, #2
		int rc = queue_submit_locked(*queuep, work);
   3058c:	4621      	mov	r1, r4
   3058e:	6828      	ldr	r0, [r5, #0]
   30590:	f7f6 f87a 	bl	26688 <queue_submit_locked>
		if (rc < 0) {
   30594:	2800      	cmp	r0, #0
   30596:	db11      	blt.n	305bc <submit_to_queue_locked+0x56>
	*flagp |= BIT(bit);
   30598:	68e3      	ldr	r3, [r4, #12]
   3059a:	f043 0304 	orr.w	r3, r3, #4
   3059e:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   305a0:	682b      	ldr	r3, [r5, #0]
   305a2:	60a3      	str	r3, [r4, #8]
	if (ret <= 0) {
   305a4:	b136      	cbz	r6, 305b4 <submit_to_queue_locked+0x4e>
   305a6:	4630      	mov	r0, r6
	return ret;
   305a8:	e00a      	b.n	305c0 <submit_to_queue_locked+0x5a>
			*queuep = work->queue;
   305aa:	6883      	ldr	r3, [r0, #8]
   305ac:	600b      	str	r3, [r1, #0]
   305ae:	e7e6      	b.n	3057e <submit_to_queue_locked+0x18>
		ret = 1;
   305b0:	2601      	movs	r6, #1
   305b2:	e7eb      	b.n	3058c <submit_to_queue_locked+0x26>
   305b4:	4630      	mov	r0, r6
   305b6:	e001      	b.n	305bc <submit_to_queue_locked+0x56>
		ret = -EBUSY;
   305b8:	f06f 000f 	mvn.w	r0, #15
		*queuep = NULL;
   305bc:	2300      	movs	r3, #0
   305be:	602b      	str	r3, [r5, #0]
}
   305c0:	bd70      	pop	{r4, r5, r6, pc}
	int ret = 0;
   305c2:	2000      	movs	r0, #0
   305c4:	e7fa      	b.n	305bc <submit_to_queue_locked+0x56>

000305c6 <work_timeout>:
{
   305c6:	b510      	push	{r4, lr}
   305c8:	b082      	sub	sp, #8
   305ca:	4603      	mov	r3, r0
	__asm__ volatile(
   305cc:	f04f 0240 	mov.w	r2, #64	; 0x40
   305d0:	f3ef 8411 	mrs	r4, BASEPRI
   305d4:	f382 8812 	msr	BASEPRI_MAX, r2
   305d8:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   305dc:	2200      	movs	r2, #0
   305de:	9201      	str	r2, [sp, #4]
	return (*flagp & BIT(bit)) != 0U;
   305e0:	f850 2c04 	ldr.w	r2, [r0, #-4]
	*flagp &= ~BIT(bit);
   305e4:	f022 0108 	bic.w	r1, r2, #8
   305e8:	f840 1c04 	str.w	r1, [r0, #-4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   305ec:	f012 0f08 	tst.w	r2, #8
   305f0:	d105      	bne.n	305fe <work_timeout+0x38>
	__asm__ volatile(
   305f2:	f384 8811 	msr	BASEPRI, r4
   305f6:	f3bf 8f6f 	isb	sy
}
   305fa:	b002      	add	sp, #8
   305fc:	bd10      	pop	{r4, pc}
   305fe:	3810      	subs	r0, #16
		queue = dw->queue;
   30600:	699b      	ldr	r3, [r3, #24]
   30602:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   30604:	a901      	add	r1, sp, #4
   30606:	f7ff ffae 	bl	30566 <submit_to_queue_locked>
   3060a:	e7f2      	b.n	305f2 <work_timeout+0x2c>

0003060c <z_reschedule_unlocked>:
{
   3060c:	b508      	push	{r3, lr}
	__asm__ volatile(
   3060e:	f04f 0340 	mov.w	r3, #64	; 0x40
   30612:	f3ef 8011 	mrs	r0, BASEPRI
   30616:	f383 8812 	msr	BASEPRI_MAX, r3
   3061a:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   3061e:	f000 f906 	bl	3082e <z_reschedule_irqlock>
}
   30622:	bd08      	pop	{r3, pc}

00030624 <cancel_sync_locked>:
{
   30624:	b510      	push	{r4, lr}
   30626:	4602      	mov	r2, r0
	return (*flagp & BIT(bit)) != 0U;
   30628:	68c4      	ldr	r4, [r0, #12]
   3062a:	f014 0f02 	tst.w	r4, #2
   3062e:	f3c4 0440 	ubfx	r4, r4, #1, #1
	if (ret) {
   30632:	d101      	bne.n	30638 <cancel_sync_locked+0x14>
}
   30634:	4620      	mov	r0, r4
   30636:	bd10      	pop	{r4, pc}
   30638:	4608      	mov	r0, r1
		init_work_cancel(canceller, work);
   3063a:	4611      	mov	r1, r2
   3063c:	f7f6 f892 	bl	26764 <init_work_cancel>
   30640:	e7f8      	b.n	30634 <cancel_sync_locked+0x10>

00030642 <unschedule_locked>:
{
   30642:	b508      	push	{r3, lr}
	return (*flagp & BIT(bit)) != 0U;
   30644:	68c3      	ldr	r3, [r0, #12]
	*flagp &= ~BIT(bit);
   30646:	f023 0208 	bic.w	r2, r3, #8
   3064a:	60c2      	str	r2, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   3064c:	f013 0f08 	tst.w	r3, #8
   30650:	d101      	bne.n	30656 <unschedule_locked+0x14>
	bool ret = false;
   30652:	2000      	movs	r0, #0
}
   30654:	bd08      	pop	{r3, pc}
		z_abort_timeout(&dwork->timeout);
   30656:	3010      	adds	r0, #16
   30658:	f000 fa6b 	bl	30b32 <z_abort_timeout>
		ret = true;
   3065c:	2001      	movs	r0, #1
   3065e:	e7f9      	b.n	30654 <unschedule_locked+0x12>

00030660 <cancel_delayable_async_locked>:
{
   30660:	b510      	push	{r4, lr}
   30662:	4604      	mov	r4, r0
	(void)unschedule_locked(dwork);
   30664:	f7ff ffed 	bl	30642 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   30668:	4620      	mov	r0, r4
   3066a:	f7ff ff5d 	bl	30528 <cancel_async_locked>
}
   3066e:	bd10      	pop	{r4, pc}

00030670 <k_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   30670:	2300      	movs	r3, #0
   30672:	6003      	str	r3, [r0, #0]
   30674:	6043      	str	r3, [r0, #4]
   30676:	6083      	str	r3, [r0, #8]
   30678:	60c3      	str	r3, [r0, #12]
   3067a:	6041      	str	r1, [r0, #4]
}
   3067c:	4770      	bx	lr

0003067e <z_work_submit_to_queue>:
{
   3067e:	b510      	push	{r4, lr}
   30680:	b082      	sub	sp, #8
   30682:	9001      	str	r0, [sp, #4]
   30684:	4608      	mov	r0, r1
   30686:	f04f 0340 	mov.w	r3, #64	; 0x40
   3068a:	f3ef 8411 	mrs	r4, BASEPRI
   3068e:	f383 8812 	msr	BASEPRI_MAX, r3
   30692:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   30696:	a901      	add	r1, sp, #4
   30698:	f7ff ff65 	bl	30566 <submit_to_queue_locked>
	__asm__ volatile(
   3069c:	f384 8811 	msr	BASEPRI, r4
   306a0:	f3bf 8f6f 	isb	sy
}
   306a4:	b002      	add	sp, #8
   306a6:	bd10      	pop	{r4, pc}

000306a8 <k_work_submit_to_queue>:
{
   306a8:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   306aa:	f7ff ffe8 	bl	3067e <z_work_submit_to_queue>
	if (ret > 0) {
   306ae:	1e04      	subs	r4, r0, #0
   306b0:	dc01      	bgt.n	306b6 <k_work_submit_to_queue+0xe>
}
   306b2:	4620      	mov	r0, r4
   306b4:	bd10      	pop	{r4, pc}
		z_reschedule_unlocked();
   306b6:	f7ff ffa9 	bl	3060c <z_reschedule_unlocked>
	return ret;
   306ba:	e7fa      	b.n	306b2 <k_work_submit_to_queue+0xa>

000306bc <k_work_queue_init>:
{
   306bc:	b508      	push	{r3, lr}
	*queue = (struct k_work_q) {
   306be:	22d8      	movs	r2, #216	; 0xd8
   306c0:	2100      	movs	r1, #0
   306c2:	f7f9 faa5 	bl	29c10 <memset>
}
   306c6:	bd08      	pop	{r3, pc}

000306c8 <k_work_init_delayable>:
{
   306c8:	b538      	push	{r3, r4, r5, lr}
   306ca:	4604      	mov	r4, r0
   306cc:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   306ce:	2230      	movs	r2, #48	; 0x30
   306d0:	2100      	movs	r1, #0
   306d2:	f7f9 fa9d 	bl	29c10 <memset>
   306d6:	6065      	str	r5, [r4, #4]
   306d8:	f44f 7380 	mov.w	r3, #256	; 0x100
   306dc:	60e3      	str	r3, [r4, #12]
}
   306de:	bd38      	pop	{r3, r4, r5, pc}

000306e0 <k_work_delayable_busy_get>:
	__asm__ volatile(
   306e0:	f04f 0240 	mov.w	r2, #64	; 0x40
   306e4:	f3ef 8311 	mrs	r3, BASEPRI
   306e8:	f382 8812 	msr	BASEPRI_MAX, r2
   306ec:	f3bf 8f6f 	isb	sy
	return *flagp;
   306f0:	68c0      	ldr	r0, [r0, #12]
	return flags_get(&dwork->work.flags) & K_WORK_MASK;
   306f2:	f000 000f 	and.w	r0, r0, #15
	__asm__ volatile(
   306f6:	f383 8811 	msr	BASEPRI, r3
   306fa:	f3bf 8f6f 	isb	sy
}
   306fe:	4770      	bx	lr

00030700 <k_work_schedule_for_queue>:
{
   30700:	b510      	push	{r4, lr}
   30702:	b082      	sub	sp, #8
   30704:	9001      	str	r0, [sp, #4]
	__asm__ volatile(
   30706:	f04f 0040 	mov.w	r0, #64	; 0x40
   3070a:	f3ef 8411 	mrs	r4, BASEPRI
   3070e:	f380 8812 	msr	BASEPRI_MAX, r0
   30712:	f3bf 8f6f 	isb	sy
	return *flagp;
   30716:	68c8      	ldr	r0, [r1, #12]
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   30718:	f010 0f0e 	tst.w	r0, #14
   3071c:	d006      	beq.n	3072c <k_work_schedule_for_queue+0x2c>
	int ret = 0;
   3071e:	2000      	movs	r0, #0
	__asm__ volatile(
   30720:	f384 8811 	msr	BASEPRI, r4
   30724:	f3bf 8f6f 	isb	sy
}
   30728:	b002      	add	sp, #8
   3072a:	bd10      	pop	{r4, pc}
		ret = schedule_for_queue_locked(&queue, dwork, delay);
   3072c:	a801      	add	r0, sp, #4
   3072e:	f7f6 f8a9 	bl	26884 <schedule_for_queue_locked>
   30732:	e7f5      	b.n	30720 <k_work_schedule_for_queue+0x20>

00030734 <k_work_reschedule_for_queue>:
{
   30734:	b5f0      	push	{r4, r5, r6, r7, lr}
   30736:	b083      	sub	sp, #12
   30738:	9001      	str	r0, [sp, #4]
   3073a:	460c      	mov	r4, r1
   3073c:	4616      	mov	r6, r2
   3073e:	461d      	mov	r5, r3
	__asm__ volatile(
   30740:	f04f 0340 	mov.w	r3, #64	; 0x40
   30744:	f3ef 8711 	mrs	r7, BASEPRI
   30748:	f383 8812 	msr	BASEPRI_MAX, r3
   3074c:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   30750:	4608      	mov	r0, r1
   30752:	f7ff ff76 	bl	30642 <unschedule_locked>
	ret = schedule_for_queue_locked(&queue, dwork, delay);
   30756:	4632      	mov	r2, r6
   30758:	462b      	mov	r3, r5
   3075a:	4621      	mov	r1, r4
   3075c:	a801      	add	r0, sp, #4
   3075e:	f7f6 f891 	bl	26884 <schedule_for_queue_locked>
	__asm__ volatile(
   30762:	f387 8811 	msr	BASEPRI, r7
   30766:	f3bf 8f6f 	isb	sy
}
   3076a:	b003      	add	sp, #12
   3076c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0003076e <k_work_cancel_delayable>:

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   3076e:	b510      	push	{r4, lr}
	__asm__ volatile(
   30770:	f04f 0340 	mov.w	r3, #64	; 0x40
   30774:	f3ef 8411 	mrs	r4, BASEPRI
   30778:	f383 8812 	msr	BASEPRI_MAX, r3
   3077c:	f3bf 8f6f 	isb	sy
	__ASSERT_NO_MSG(dwork != NULL);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable, dwork);

	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = cancel_delayable_async_locked(dwork);
   30780:	f7ff ff6e 	bl	30660 <cancel_delayable_async_locked>
	__asm__ volatile(
   30784:	f384 8811 	msr	BASEPRI, r4
   30788:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   3078c:	bd10      	pop	{r4, pc}

0003078e <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   3078e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   30790:	460d      	mov	r5, r1
	__asm__ volatile(
   30792:	f04f 0340 	mov.w	r3, #64	; 0x40
   30796:	f3ef 8611 	mrs	r6, BASEPRI
   3079a:	f383 8812 	msr	BASEPRI_MAX, r3
   3079e:	f3bf 8f6f 	isb	sy
	return *flagp;
   307a2:	68c3      	ldr	r3, [r0, #12]
   307a4:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   307a8:	2b00      	cmp	r3, #0
   307aa:	bf14      	ite	ne
   307ac:	2701      	movne	r7, #1
   307ae:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   307b0:	d107      	bne.n	307c2 <k_work_cancel_delayable_sync+0x34>
	bool need_wait = false;
   307b2:	2000      	movs	r0, #0
	__asm__ volatile(
   307b4:	f386 8811 	msr	BASEPRI, r6
   307b8:	f3bf 8f6f 	isb	sy
		need_wait = cancel_sync_locked(&dwork->work, canceller);
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   307bc:	b948      	cbnz	r0, 307d2 <k_work_cancel_delayable_sync+0x44>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   307be:	4638      	mov	r0, r7
   307c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   307c2:	4604      	mov	r4, r0
		(void)cancel_delayable_async_locked(dwork);
   307c4:	f7ff ff4c 	bl	30660 <cancel_delayable_async_locked>
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   307c8:	4629      	mov	r1, r5
   307ca:	4620      	mov	r0, r4
   307cc:	f7ff ff2a 	bl	30624 <cancel_sync_locked>
   307d0:	e7f0      	b.n	307b4 <k_work_cancel_delayable_sync+0x26>
		k_sem_take(&canceller->sem, K_FOREVER);
   307d2:	f105 0008 	add.w	r0, r5, #8
   307d6:	f04f 32ff 	mov.w	r2, #4294967295
   307da:	f04f 33ff 	mov.w	r3, #4294967295
   307de:	f7f5 ff11 	bl	26604 <z_impl_k_sem_take>
   307e2:	e7ec      	b.n	307be <k_work_cancel_delayable_sync+0x30>

000307e4 <thread_active_elsewhere>:
}
   307e4:	2000      	movs	r0, #0
   307e6:	4770      	bx	lr

000307e8 <pended_on_thread>:
}
   307e8:	6880      	ldr	r0, [r0, #8]
   307ea:	4770      	bx	lr

000307ec <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   307ec:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   307f0:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   307f4:	4283      	cmp	r3, r0
   307f6:	d001      	beq.n	307fc <z_sched_prio_cmp+0x10>
		return b2 - b1;
   307f8:	1ac0      	subs	r0, r0, r3
   307fa:	4770      	bx	lr
	return 0;
   307fc:	2000      	movs	r0, #0
}
   307fe:	4770      	bx	lr

00030800 <z_unpend_thread_no_timeout>:
{
   30800:	b538      	push	{r3, r4, r5, lr}
   30802:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
   30804:	2300      	movs	r3, #0
	__asm__ volatile(
   30806:	f04f 0240 	mov.w	r2, #64	; 0x40
   3080a:	f3ef 8411 	mrs	r4, BASEPRI
   3080e:	f382 8812 	msr	BASEPRI_MAX, r2
   30812:	f3bf 8f6f 	isb	sy
   30816:	e007      	b.n	30828 <z_unpend_thread_no_timeout+0x28>
		unpend_thread_no_timeout(thread);
   30818:	4628      	mov	r0, r5
   3081a:	f000 f82a 	bl	30872 <unpend_thread_no_timeout>
	__asm__ volatile(
   3081e:	f384 8811 	msr	BASEPRI, r4
   30822:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   30826:	2301      	movs	r3, #1
   30828:	2b00      	cmp	r3, #0
   3082a:	d0f5      	beq.n	30818 <z_unpend_thread_no_timeout+0x18>
}
   3082c:	bd38      	pop	{r3, r4, r5, pc}

0003082e <z_reschedule_irqlock>:
{
   3082e:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   30830:	4603      	mov	r3, r0
   30832:	b928      	cbnz	r0, 30840 <z_reschedule_irqlock+0x12>
   30834:	f3ef 8205 	mrs	r2, IPSR
   30838:	b912      	cbnz	r2, 30840 <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
   3083a:	f7e4 fab7 	bl	14dac <arch_swap>
	return ret;
   3083e:	e003      	b.n	30848 <z_reschedule_irqlock+0x1a>
   30840:	f383 8811 	msr	BASEPRI, r3
   30844:	f3bf 8f6f 	isb	sy
}
   30848:	bd08      	pop	{r3, pc}

0003084a <z_reschedule_unlocked>:
{
   3084a:	b508      	push	{r3, lr}
	__asm__ volatile(
   3084c:	f04f 0340 	mov.w	r3, #64	; 0x40
   30850:	f3ef 8011 	mrs	r0, BASEPRI
   30854:	f383 8812 	msr	BASEPRI_MAX, r3
   30858:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   3085c:	f7ff ffe7 	bl	3082e <z_reschedule_irqlock>
}
   30860:	bd08      	pop	{r3, pc}

00030862 <z_priq_dumb_remove>:
	sys_dnode_t *const prev = node->prev;
   30862:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
   30864:	680b      	ldr	r3, [r1, #0]
	prev->next = next;
   30866:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   30868:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   3086a:	2300      	movs	r3, #0
   3086c:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
   3086e:	604b      	str	r3, [r1, #4]
}
   30870:	4770      	bx	lr

00030872 <unpend_thread_no_timeout>:
{
   30872:	b510      	push	{r4, lr}
   30874:	4604      	mov	r4, r0
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   30876:	f7ff ffb7 	bl	307e8 <pended_on_thread>
   3087a:	4621      	mov	r1, r4
   3087c:	f7ff fff1 	bl	30862 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   30880:	7b63      	ldrb	r3, [r4, #13]
   30882:	f023 0302 	bic.w	r3, r3, #2
   30886:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   30888:	2300      	movs	r3, #0
   3088a:	60a3      	str	r3, [r4, #8]
}
   3088c:	bd10      	pop	{r4, pc}

0003088e <z_unpend_thread>:
{
   3088e:	b538      	push	{r3, r4, r5, lr}
   30890:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   30892:	2300      	movs	r3, #0
   30894:	f04f 0240 	mov.w	r2, #64	; 0x40
   30898:	f3ef 8511 	mrs	r5, BASEPRI
   3089c:	f382 8812 	msr	BASEPRI_MAX, r2
   308a0:	f3bf 8f6f 	isb	sy
   308a4:	e007      	b.n	308b6 <z_unpend_thread+0x28>
		unpend_thread_no_timeout(thread);
   308a6:	4620      	mov	r0, r4
   308a8:	f7ff ffe3 	bl	30872 <unpend_thread_no_timeout>
	__asm__ volatile(
   308ac:	f385 8811 	msr	BASEPRI, r5
   308b0:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   308b4:	2301      	movs	r3, #1
   308b6:	2b00      	cmp	r3, #0
   308b8:	d0f5      	beq.n	308a6 <z_unpend_thread+0x18>
	return z_abort_timeout(&thread->base.timeout);
   308ba:	f104 0018 	add.w	r0, r4, #24
   308be:	f000 f938 	bl	30b32 <z_abort_timeout>
}
   308c2:	bd38      	pop	{r3, r4, r5, pc}

000308c4 <z_priq_dumb_best>:
{
   308c4:	4603      	mov	r3, r0
	return list->head == list;
   308c6:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   308c8:	4283      	cmp	r3, r0
   308ca:	d000      	beq.n	308ce <z_priq_dumb_best+0xa>
}
   308cc:	4770      	bx	lr
	struct k_thread *thread = NULL;
   308ce:	2000      	movs	r0, #0
	return thread;
   308d0:	e7fc      	b.n	308cc <z_priq_dumb_best+0x8>

000308d2 <z_ready_thread>:
{
   308d2:	b538      	push	{r3, r4, r5, lr}
   308d4:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   308d6:	2300      	movs	r3, #0
	__asm__ volatile(
   308d8:	f04f 0240 	mov.w	r2, #64	; 0x40
   308dc:	f3ef 8511 	mrs	r5, BASEPRI
   308e0:	f382 8812 	msr	BASEPRI_MAX, r2
   308e4:	f3bf 8f6f 	isb	sy
   308e8:	e004      	b.n	308f4 <z_ready_thread+0x22>
	__asm__ volatile(
   308ea:	f385 8811 	msr	BASEPRI, r5
   308ee:	f3bf 8f6f 	isb	sy
   308f2:	2301      	movs	r3, #1
   308f4:	b943      	cbnz	r3, 30908 <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
   308f6:	4620      	mov	r0, r4
   308f8:	f7ff ff74 	bl	307e4 <thread_active_elsewhere>
   308fc:	2800      	cmp	r0, #0
   308fe:	d1f4      	bne.n	308ea <z_ready_thread+0x18>
			ready_thread(thread);
   30900:	4620      	mov	r0, r4
   30902:	f7f6 f999 	bl	26c38 <ready_thread>
   30906:	e7f0      	b.n	308ea <z_ready_thread+0x18>
}
   30908:	bd38      	pop	{r3, r4, r5, pc}

0003090a <z_thread_timeout>:
{
   3090a:	b570      	push	{r4, r5, r6, lr}
   3090c:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   3090e:	f1a0 0618 	sub.w	r6, r0, #24
	LOCKED(&sched_spinlock) {
   30912:	2300      	movs	r3, #0
	__asm__ volatile(
   30914:	f04f 0240 	mov.w	r2, #64	; 0x40
   30918:	f3ef 8511 	mrs	r5, BASEPRI
   3091c:	f382 8812 	msr	BASEPRI_MAX, r2
   30920:	f3bf 8f6f 	isb	sy
   30924:	e011      	b.n	3094a <z_thread_timeout+0x40>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   30926:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   3092a:	f023 0204 	bic.w	r2, r3, #4
   3092e:	f804 2c0b 	strb.w	r2, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   30932:	f023 0314 	bic.w	r3, r3, #20
   30936:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
   3093a:	4630      	mov	r0, r6
   3093c:	f7f6 f97c 	bl	26c38 <ready_thread>
	__asm__ volatile(
   30940:	f385 8811 	msr	BASEPRI, r5
   30944:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   30948:	2301      	movs	r3, #1
   3094a:	b963      	cbnz	r3, 30966 <z_thread_timeout+0x5c>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
   3094c:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
   30950:	f013 0f28 	tst.w	r3, #40	; 0x28
   30954:	d1f4      	bne.n	30940 <z_thread_timeout+0x36>
			if (thread->base.pended_on != NULL) {
   30956:	f854 3c10 	ldr.w	r3, [r4, #-16]
   3095a:	2b00      	cmp	r3, #0
   3095c:	d0e3      	beq.n	30926 <z_thread_timeout+0x1c>
				unpend_thread_no_timeout(thread);
   3095e:	4630      	mov	r0, r6
   30960:	f7ff ff87 	bl	30872 <unpend_thread_no_timeout>
   30964:	e7df      	b.n	30926 <z_thread_timeout+0x1c>
}
   30966:	bd70      	pop	{r4, r5, r6, pc}

00030968 <unpend_all>:
{
   30968:	b538      	push	{r3, r4, r5, lr}
   3096a:	4605      	mov	r5, r0
	return list->head == list;
   3096c:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3096e:	42a5      	cmp	r5, r4
   30970:	d00e      	beq.n	30990 <unpend_all+0x28>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   30972:	b16c      	cbz	r4, 30990 <unpend_all+0x28>
		unpend_thread_no_timeout(thread);
   30974:	4620      	mov	r0, r4
   30976:	f7ff ff7c 	bl	30872 <unpend_thread_no_timeout>
   3097a:	f104 0018 	add.w	r0, r4, #24
   3097e:	f000 f8d8 	bl	30b32 <z_abort_timeout>
   30982:	2300      	movs	r3, #0
   30984:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
		ready_thread(thread);
   30988:	4620      	mov	r0, r4
   3098a:	f7f6 f955 	bl	26c38 <ready_thread>
   3098e:	e7ed      	b.n	3096c <unpend_all+0x4>
}
   30990:	bd38      	pop	{r3, r4, r5, pc}

00030992 <add_to_waitq_locked>:
{
   30992:	b570      	push	{r4, r5, r6, lr}
   30994:	4605      	mov	r5, r0
   30996:	460e      	mov	r6, r1
	unready_thread(thread);
   30998:	f7f6 f9a8 	bl	26cec <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   3099c:	7b6b      	ldrb	r3, [r5, #13]
   3099e:	f043 0302 	orr.w	r3, r3, #2
   309a2:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
   309a4:	b1fe      	cbz	r6, 309e6 <add_to_waitq_locked+0x54>
		thread->base.pended_on = wait_q;
   309a6:	60ae      	str	r6, [r5, #8]
	return list->head == list;
   309a8:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   309aa:	42a6      	cmp	r6, r4
   309ac:	d108      	bne.n	309c0 <add_to_waitq_locked+0x2e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   309ae:	2400      	movs	r4, #0
   309b0:	e006      	b.n	309c0 <add_to_waitq_locked+0x2e>
	sys_dnode_t *const prev = successor->prev;
   309b2:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   309b4:	606b      	str	r3, [r5, #4]
	node->next = successor;
   309b6:	602c      	str	r4, [r5, #0]
	prev->next = node;
   309b8:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   309ba:	6065      	str	r5, [r4, #4]
}
   309bc:	e013      	b.n	309e6 <add_to_waitq_locked+0x54>
   309be:	2400      	movs	r4, #0
   309c0:	b164      	cbz	r4, 309dc <add_to_waitq_locked+0x4a>
		if (z_sched_prio_cmp(thread, t) > 0) {
   309c2:	4621      	mov	r1, r4
   309c4:	4628      	mov	r0, r5
   309c6:	f7ff ff11 	bl	307ec <z_sched_prio_cmp>
   309ca:	2800      	cmp	r0, #0
   309cc:	dcf1      	bgt.n	309b2 <add_to_waitq_locked+0x20>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   309ce:	2c00      	cmp	r4, #0
   309d0:	d0f6      	beq.n	309c0 <add_to_waitq_locked+0x2e>
	return (node == list->tail) ? NULL : node->next;
   309d2:	6873      	ldr	r3, [r6, #4]
   309d4:	429c      	cmp	r4, r3
   309d6:	d0f2      	beq.n	309be <add_to_waitq_locked+0x2c>
   309d8:	6824      	ldr	r4, [r4, #0]
   309da:	e7f1      	b.n	309c0 <add_to_waitq_locked+0x2e>
	sys_dnode_t *const tail = list->tail;
   309dc:	6873      	ldr	r3, [r6, #4]
	node->next = list;
   309de:	602e      	str	r6, [r5, #0]
	node->prev = tail;
   309e0:	606b      	str	r3, [r5, #4]
	tail->next = node;
   309e2:	601d      	str	r5, [r3, #0]
	list->tail = node;
   309e4:	6075      	str	r5, [r6, #4]
}
   309e6:	bd70      	pop	{r4, r5, r6, pc}

000309e8 <pend_locked>:
{
   309e8:	b570      	push	{r4, r5, r6, lr}
   309ea:	4604      	mov	r4, r0
   309ec:	4616      	mov	r6, r2
   309ee:	461d      	mov	r5, r3
	add_to_waitq_locked(thread, wait_q);
   309f0:	f7ff ffcf 	bl	30992 <add_to_waitq_locked>
	add_thread_timeout(thread, timeout);
   309f4:	4632      	mov	r2, r6
   309f6:	462b      	mov	r3, r5
   309f8:	4620      	mov	r0, r4
   309fa:	f7f5 ffd1 	bl	269a0 <add_thread_timeout>
}
   309fe:	bd70      	pop	{r4, r5, r6, pc}

00030a00 <z_unpend1_no_timeout>:
{
   30a00:	b570      	push	{r4, r5, r6, lr}
   30a02:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
   30a04:	2300      	movs	r3, #0
	__asm__ volatile(
   30a06:	f04f 0240 	mov.w	r2, #64	; 0x40
   30a0a:	f3ef 8511 	mrs	r5, BASEPRI
   30a0e:	f382 8812 	msr	BASEPRI_MAX, r2
   30a12:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
   30a16:	461c      	mov	r4, r3
   30a18:	e004      	b.n	30a24 <z_unpend1_no_timeout+0x24>
	__asm__ volatile(
   30a1a:	f385 8811 	msr	BASEPRI, r5
   30a1e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   30a22:	2301      	movs	r3, #1
   30a24:	b943      	cbnz	r3, 30a38 <z_unpend1_no_timeout+0x38>
		thread = _priq_wait_best(&wait_q->waitq);
   30a26:	4630      	mov	r0, r6
   30a28:	f7ff ff4c 	bl	308c4 <z_priq_dumb_best>
		if (thread != NULL) {
   30a2c:	4604      	mov	r4, r0
   30a2e:	2800      	cmp	r0, #0
   30a30:	d0f3      	beq.n	30a1a <z_unpend1_no_timeout+0x1a>
			unpend_thread_no_timeout(thread);
   30a32:	f7ff ff1e 	bl	30872 <unpend_thread_no_timeout>
   30a36:	e7f0      	b.n	30a1a <z_unpend1_no_timeout+0x1a>
}
   30a38:	4620      	mov	r0, r4
   30a3a:	bd70      	pop	{r4, r5, r6, pc}

00030a3c <z_unpend_first_thread>:
{
   30a3c:	b570      	push	{r4, r5, r6, lr}
   30a3e:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
   30a40:	2300      	movs	r3, #0
	__asm__ volatile(
   30a42:	f04f 0240 	mov.w	r2, #64	; 0x40
   30a46:	f3ef 8511 	mrs	r5, BASEPRI
   30a4a:	f382 8812 	msr	BASEPRI_MAX, r2
   30a4e:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
   30a52:	461c      	mov	r4, r3
   30a54:	e004      	b.n	30a60 <z_unpend_first_thread+0x24>
	__asm__ volatile(
   30a56:	f385 8811 	msr	BASEPRI, r5
   30a5a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   30a5e:	2301      	movs	r3, #1
   30a60:	b963      	cbnz	r3, 30a7c <z_unpend_first_thread+0x40>
		thread = _priq_wait_best(&wait_q->waitq);
   30a62:	4630      	mov	r0, r6
   30a64:	f7ff ff2e 	bl	308c4 <z_priq_dumb_best>
		if (thread != NULL) {
   30a68:	4604      	mov	r4, r0
   30a6a:	2800      	cmp	r0, #0
   30a6c:	d0f3      	beq.n	30a56 <z_unpend_first_thread+0x1a>
			unpend_thread_no_timeout(thread);
   30a6e:	f7ff ff00 	bl	30872 <unpend_thread_no_timeout>
   30a72:	f104 0018 	add.w	r0, r4, #24
   30a76:	f000 f85c 	bl	30b32 <z_abort_timeout>
   30a7a:	e7ec      	b.n	30a56 <z_unpend_first_thread+0x1a>
}
   30a7c:	4620      	mov	r0, r4
   30a7e:	bd70      	pop	{r4, r5, r6, pc}

00030a80 <z_unpend_all>:
{
   30a80:	b538      	push	{r3, r4, r5, lr}
   30a82:	4605      	mov	r5, r0
	int need_sched = 0;
   30a84:	2000      	movs	r0, #0
	return list->head == list;
   30a86:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   30a88:	42a5      	cmp	r5, r4
   30a8a:	d008      	beq.n	30a9e <z_unpend_all+0x1e>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   30a8c:	b13c      	cbz	r4, 30a9e <z_unpend_all+0x1e>
		z_unpend_thread(thread);
   30a8e:	4620      	mov	r0, r4
   30a90:	f7ff fefd 	bl	3088e <z_unpend_thread>
		z_ready_thread(thread);
   30a94:	4620      	mov	r0, r4
   30a96:	f7ff ff1c 	bl	308d2 <z_ready_thread>
		need_sched = 1;
   30a9a:	2001      	movs	r0, #1
   30a9c:	e7f3      	b.n	30a86 <z_unpend_all+0x6>
}
   30a9e:	bd38      	pop	{r3, r4, r5, pc}

00030aa0 <init_ready_q>:
	sys_dlist_init(&rq->runq);
   30aa0:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
   30aa2:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
   30aa4:	6083      	str	r3, [r0, #8]
}
   30aa6:	4770      	bx	lr

00030aa8 <z_sched_wake>:
{
   30aa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   30aac:	4606      	mov	r6, r0
   30aae:	4688      	mov	r8, r1
   30ab0:	4617      	mov	r7, r2
	LOCKED(&sched_spinlock) {
   30ab2:	2300      	movs	r3, #0
	__asm__ volatile(
   30ab4:	f04f 0240 	mov.w	r2, #64	; 0x40
   30ab8:	f3ef 8511 	mrs	r5, BASEPRI
   30abc:	f382 8812 	msr	BASEPRI_MAX, r2
   30ac0:	f3bf 8f6f 	isb	sy
	bool ret = false;
   30ac4:	4699      	mov	r9, r3
   30ac6:	e004      	b.n	30ad2 <z_sched_wake+0x2a>
	__asm__ volatile(
   30ac8:	f385 8811 	msr	BASEPRI, r5
   30acc:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   30ad0:	2301      	movs	r3, #1
   30ad2:	b9a3      	cbnz	r3, 30afe <z_sched_wake+0x56>
		thread = _priq_wait_best(&wait_q->waitq);
   30ad4:	4630      	mov	r0, r6
   30ad6:	f7ff fef5 	bl	308c4 <z_priq_dumb_best>
		if (thread != NULL) {
   30ada:	4604      	mov	r4, r0
   30adc:	2800      	cmp	r0, #0
   30ade:	d0f3      	beq.n	30ac8 <z_sched_wake+0x20>
   30ae0:	f8c0 80b0 	str.w	r8, [r0, #176]	; 0xb0
	thread->base.swap_data = data;
   30ae4:	6147      	str	r7, [r0, #20]
			unpend_thread_no_timeout(thread);
   30ae6:	f7ff fec4 	bl	30872 <unpend_thread_no_timeout>
   30aea:	f104 0018 	add.w	r0, r4, #24
   30aee:	f000 f820 	bl	30b32 <z_abort_timeout>
			ready_thread(thread);
   30af2:	4620      	mov	r0, r4
   30af4:	f7f6 f8a0 	bl	26c38 <ready_thread>
			ret = true;
   30af8:	f04f 0901 	mov.w	r9, #1
   30afc:	e7e4      	b.n	30ac8 <z_sched_wake+0x20>
}
   30afe:	4648      	mov	r0, r9
   30b00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00030b04 <remove_timeout>:
{
   30b04:	b510      	push	{r4, lr}
   30b06:	4604      	mov	r4, r0
	if (next(t) != NULL) {
   30b08:	f7f6 fb86 	bl	27218 <next>
   30b0c:	b148      	cbz	r0, 30b22 <remove_timeout+0x1e>
   30b0e:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
   30b10:	6903      	ldr	r3, [r0, #16]
   30b12:	6941      	ldr	r1, [r0, #20]
   30b14:	6920      	ldr	r0, [r4, #16]
   30b16:	181b      	adds	r3, r3, r0
   30b18:	6960      	ldr	r0, [r4, #20]
   30b1a:	eb41 0100 	adc.w	r1, r1, r0
   30b1e:	6113      	str	r3, [r2, #16]
   30b20:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
   30b22:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
   30b24:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
   30b26:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   30b28:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   30b2a:	2300      	movs	r3, #0
   30b2c:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
   30b2e:	6063      	str	r3, [r4, #4]
}
   30b30:	bd10      	pop	{r4, pc}

00030b32 <z_abort_timeout>:
{
   30b32:	b570      	push	{r4, r5, r6, lr}
   30b34:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
   30b36:	2300      	movs	r3, #0
	__asm__ volatile(
   30b38:	f04f 0240 	mov.w	r2, #64	; 0x40
   30b3c:	f3ef 8611 	mrs	r6, BASEPRI
   30b40:	f382 8812 	msr	BASEPRI_MAX, r2
   30b44:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
   30b48:	f06f 0015 	mvn.w	r0, #21
   30b4c:	e004      	b.n	30b58 <z_abort_timeout+0x26>
	__asm__ volatile(
   30b4e:	f386 8811 	msr	BASEPRI, r6
   30b52:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   30b56:	2301      	movs	r3, #1
   30b58:	461d      	mov	r5, r3
   30b5a:	b93b      	cbnz	r3, 30b6c <z_abort_timeout+0x3a>
	return node->next != NULL;
   30b5c:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
   30b5e:	2b00      	cmp	r3, #0
   30b60:	d0f5      	beq.n	30b4e <z_abort_timeout+0x1c>
			remove_timeout(to);
   30b62:	4620      	mov	r0, r4
   30b64:	f7ff ffce 	bl	30b04 <remove_timeout>
			ret = 0;
   30b68:	4628      	mov	r0, r5
   30b6a:	e7f0      	b.n	30b4e <z_abort_timeout+0x1c>
}
   30b6c:	bd70      	pop	{r4, r5, r6, pc}

00030b6e <z_get_next_timeout_expiry>:
{
   30b6e:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
   30b70:	2300      	movs	r3, #0
	__asm__ volatile(
   30b72:	f04f 0240 	mov.w	r2, #64	; 0x40
   30b76:	f3ef 8411 	mrs	r4, BASEPRI
   30b7a:	f382 8812 	msr	BASEPRI_MAX, r2
   30b7e:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
   30b82:	f04f 30ff 	mov.w	r0, #4294967295
   30b86:	e006      	b.n	30b96 <z_get_next_timeout_expiry+0x28>
		ret = next_timeout();
   30b88:	f7f6 fb5e 	bl	27248 <next_timeout>
	__asm__ volatile(
   30b8c:	f384 8811 	msr	BASEPRI, r4
   30b90:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   30b94:	2301      	movs	r3, #1
   30b96:	2b00      	cmp	r3, #0
   30b98:	d0f6      	beq.n	30b88 <z_get_next_timeout_expiry+0x1a>
}
   30b9a:	bd10      	pop	{r4, pc}

00030b9c <z_set_timeout_expiry>:
{
   30b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   30b9e:	4606      	mov	r6, r0
   30ba0:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
   30ba2:	2300      	movs	r3, #0
	__asm__ volatile(
   30ba4:	f04f 0240 	mov.w	r2, #64	; 0x40
   30ba8:	f3ef 8511 	mrs	r5, BASEPRI
   30bac:	f382 8812 	msr	BASEPRI_MAX, r2
   30bb0:	f3bf 8f6f 	isb	sy
   30bb4:	e00a      	b.n	30bcc <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
   30bb6:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
   30bb8:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   30bbc:	2801      	cmp	r0, #1
   30bbe:	dd00      	ble.n	30bc2 <z_set_timeout_expiry+0x26>
   30bc0:	b97c      	cbnz	r4, 30be2 <z_set_timeout_expiry+0x46>
	__asm__ volatile(
   30bc2:	f385 8811 	msr	BASEPRI, r5
   30bc6:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   30bca:	2301      	movs	r3, #1
   30bcc:	461c      	mov	r4, r3
   30bce:	b97b      	cbnz	r3, 30bf0 <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
   30bd0:	f7f6 fb3a 	bl	27248 <next_timeout>
			      || (ticks <= next_to);
   30bd4:	f1b0 3fff 	cmp.w	r0, #4294967295
   30bd8:	d0ed      	beq.n	30bb6 <z_set_timeout_expiry+0x1a>
   30bda:	42b0      	cmp	r0, r6
   30bdc:	dbec      	blt.n	30bb8 <z_set_timeout_expiry+0x1c>
   30bde:	2401      	movs	r4, #1
   30be0:	e7ea      	b.n	30bb8 <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   30be2:	4639      	mov	r1, r7
   30be4:	42b0      	cmp	r0, r6
   30be6:	bfa8      	it	ge
   30be8:	4630      	movge	r0, r6
   30bea:	f7f1 fe0d 	bl	22808 <sys_clock_set_timeout>
   30bee:	e7e8      	b.n	30bc2 <z_set_timeout_expiry+0x26>
}
   30bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00030bf2 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   30bf2:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   30bf4:	f7f6 fc3a 	bl	2746c <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   30bf8:	bd08      	pop	{r3, pc}

00030bfa <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
   30bfa:	b508      	push	{r3, lr}
	return sys_clock_tick_get();
   30bfc:	f7f6 fc36 	bl	2746c <sys_clock_tick_get>
}
   30c00:	bd08      	pop	{r3, pc}

00030c02 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   30c02:	b900      	cbnz	r0, 30c06 <z_impl_k_busy_wait+0x4>
   30c04:	4770      	bx	lr
{
   30c06:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   30c08:	f7e5 fb98 	bl	1633c <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   30c0c:	bd08      	pop	{r3, pc}

00030c0e <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
   30c0e:	b538      	push	{r3, r4, r5, lr}
   30c10:	460c      	mov	r4, r1
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   30c12:	f1b1 3fff 	cmp.w	r1, #4294967295
   30c16:	bf08      	it	eq
   30c18:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   30c1c:	d020      	beq.n	30c60 <sys_clock_timeout_end_calc+0x52>
   30c1e:	4605      	mov	r5, r0
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   30c20:	ea51 0300 	orrs.w	r3, r1, r0
   30c24:	d009      	beq.n	30c3a <sys_clock_timeout_end_calc+0x2c>
		return sys_clock_tick_get();
	} else {

		dt = timeout.ticks;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   30c26:	f06f 0301 	mvn.w	r3, #1
   30c2a:	1a18      	subs	r0, r3, r0
   30c2c:	f04f 33ff 	mov.w	r3, #4294967295
   30c30:	eb63 0101 	sbc.w	r1, r3, r1
   30c34:	2900      	cmp	r1, #0
   30c36:	db03      	blt.n	30c40 <sys_clock_timeout_end_calc+0x32>
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   30c38:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get();
   30c3a:	f7f6 fc17 	bl	2746c <sys_clock_tick_get>
   30c3e:	e7fb      	b.n	30c38 <sys_clock_timeout_end_calc+0x2a>
		return sys_clock_tick_get() + MAX(1, dt);
   30c40:	f7f6 fc14 	bl	2746c <sys_clock_tick_get>
   30c44:	4603      	mov	r3, r0
   30c46:	462a      	mov	r2, r5
   30c48:	46a4      	mov	ip, r4
   30c4a:	2d01      	cmp	r5, #1
   30c4c:	f174 0400 	sbcs.w	r4, r4, #0
   30c50:	da02      	bge.n	30c58 <sys_clock_timeout_end_calc+0x4a>
   30c52:	2201      	movs	r2, #1
   30c54:	f04f 0c00 	mov.w	ip, #0
   30c58:	1898      	adds	r0, r3, r2
   30c5a:	eb41 010c 	adc.w	r1, r1, ip
   30c5e:	e7eb      	b.n	30c38 <sys_clock_timeout_end_calc+0x2a>
		return UINT64_MAX;
   30c60:	f04f 30ff 	mov.w	r0, #4294967295
   30c64:	4601      	mov	r1, r0
   30c66:	e7e7      	b.n	30c38 <sys_clock_timeout_end_calc+0x2a>

00030c68 <z_reschedule_unlocked>:
{
   30c68:	b508      	push	{r3, lr}
	__asm__ volatile(
   30c6a:	f04f 0340 	mov.w	r3, #64	; 0x40
   30c6e:	f3ef 8011 	mrs	r0, BASEPRI
   30c72:	f383 8812 	msr	BASEPRI_MAX, r3
   30c76:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   30c7a:	f7ff fdd8 	bl	3082e <z_reschedule_irqlock>
}
   30c7e:	bd08      	pop	{r3, pc}

00030c80 <k_timer_init>:
	timer->expiry_fn = expiry_fn;
   30c80:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
   30c82:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0U;
   30c84:	2300      	movs	r3, #0
   30c86:	6303      	str	r3, [r0, #48]	; 0x30
   30c88:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
   30c8c:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
   30c8e:	61c2      	str	r2, [r0, #28]
	node->next = NULL;
   30c90:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   30c92:	6043      	str	r3, [r0, #4]
	timer->user_data = NULL;
   30c94:	6343      	str	r3, [r0, #52]	; 0x34
}
   30c96:	4770      	bx	lr

00030c98 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   30c98:	b510      	push	{r4, lr}
   30c9a:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   30c9c:	f7ff ff49 	bl	30b32 <z_abort_timeout>

	if (inactive) {
   30ca0:	b960      	cbnz	r0, 30cbc <z_impl_k_timer_stop+0x24>
		return;
	}

	if (timer->stop_fn != NULL) {
   30ca2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   30ca4:	b10b      	cbz	r3, 30caa <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   30ca6:	4620      	mov	r0, r4
   30ca8:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   30caa:	f104 0018 	add.w	r0, r4, #24
   30cae:	f7ff fea7 	bl	30a00 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   30cb2:	b118      	cbz	r0, 30cbc <z_impl_k_timer_stop+0x24>
			z_ready_thread(pending_thread);
   30cb4:	f7ff fe0d 	bl	308d2 <z_ready_thread>
			z_reschedule_unlocked();
   30cb8:	f7ff ffd6 	bl	30c68 <z_reschedule_unlocked>
		}
	}
}
   30cbc:	bd10      	pop	{r4, pc}

00030cbe <is_condition_met>:
	switch (event->type) {
   30cbe:	7b43      	ldrb	r3, [r0, #13]
   30cc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   30cc4:	3b01      	subs	r3, #1
   30cc6:	2b07      	cmp	r3, #7
   30cc8:	d826      	bhi.n	30d18 <is_condition_met+0x5a>
   30cca:	e8df f003 	tbb	[pc, r3]
   30cce:	0414      	.short	0x0414
   30cd0:	25250d25 	.word	0x25250d25
   30cd4:	1c25      	.short	0x1c25
		if (k_sem_count_get(event->sem) > 0U) {
   30cd6:	6903      	ldr	r3, [r0, #16]
	return sem->count;
   30cd8:	689b      	ldr	r3, [r3, #8]
   30cda:	b90b      	cbnz	r3, 30ce0 <is_condition_met+0x22>
	return false;
   30cdc:	2000      	movs	r0, #0
   30cde:	4770      	bx	lr
			*state = K_POLL_STATE_SEM_AVAILABLE;
   30ce0:	2302      	movs	r3, #2
   30ce2:	600b      	str	r3, [r1, #0]
			return true;
   30ce4:	2001      	movs	r0, #1
   30ce6:	4770      	bx	lr
		if (!k_queue_is_empty(event->queue)) {
   30ce8:	6903      	ldr	r3, [r0, #16]
	return list->head;
   30cea:	681b      	ldr	r3, [r3, #0]
   30cec:	b1b3      	cbz	r3, 30d1c <is_condition_met+0x5e>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   30cee:	2304      	movs	r3, #4
   30cf0:	600b      	str	r3, [r1, #0]
			return true;
   30cf2:	2001      	movs	r0, #1
   30cf4:	4770      	bx	lr
		if (event->signal->signaled != 0U) {
   30cf6:	6903      	ldr	r3, [r0, #16]
   30cf8:	689b      	ldr	r3, [r3, #8]
   30cfa:	b90b      	cbnz	r3, 30d00 <is_condition_met+0x42>
	return false;
   30cfc:	2000      	movs	r0, #0
   30cfe:	4770      	bx	lr
			*state = K_POLL_STATE_SIGNALED;
   30d00:	2001      	movs	r0, #1
   30d02:	6008      	str	r0, [r1, #0]
			return true;
   30d04:	4770      	bx	lr
		if (event->msgq->used_msgs > 0) {
   30d06:	6903      	ldr	r3, [r0, #16]
   30d08:	6a1b      	ldr	r3, [r3, #32]
   30d0a:	b90b      	cbnz	r3, 30d10 <is_condition_met+0x52>
	return false;
   30d0c:	2000      	movs	r0, #0
}
   30d0e:	4770      	bx	lr
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   30d10:	2310      	movs	r3, #16
   30d12:	600b      	str	r3, [r1, #0]
			return true;
   30d14:	2001      	movs	r0, #1
   30d16:	4770      	bx	lr
	switch (event->type) {
   30d18:	2000      	movs	r0, #0
   30d1a:	4770      	bx	lr
	return false;
   30d1c:	2000      	movs	r0, #0
   30d1e:	4770      	bx	lr

00030d20 <poller_thread>:
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   30d20:	b108      	cbz	r0, 30d26 <poller_thread+0x6>
   30d22:	3860      	subs	r0, #96	; 0x60
   30d24:	4770      	bx	lr
}
   30d26:	4770      	bx	lr

00030d28 <clear_event_registration>:
	event->poller = NULL;
   30d28:	2300      	movs	r3, #0
   30d2a:	6083      	str	r3, [r0, #8]
	switch (event->type) {
   30d2c:	7b43      	ldrb	r3, [r0, #13]
   30d2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   30d32:	2b08      	cmp	r3, #8
   30d34:	d80e      	bhi.n	30d54 <clear_event_registration+0x2c>
   30d36:	f44f 728b 	mov.w	r2, #278	; 0x116
   30d3a:	fa22 f303 	lsr.w	r3, r2, r3
   30d3e:	f013 0f01 	tst.w	r3, #1
   30d42:	d007      	beq.n	30d54 <clear_event_registration+0x2c>
	return node->next != NULL;
   30d44:	6803      	ldr	r3, [r0, #0]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   30d46:	b12b      	cbz	r3, 30d54 <clear_event_registration+0x2c>
	sys_dnode_t *const prev = node->prev;
   30d48:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
   30d4a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   30d4c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   30d4e:	2300      	movs	r3, #0
   30d50:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   30d52:	6043      	str	r3, [r0, #4]
}
   30d54:	4770      	bx	lr

00030d56 <clear_event_registrations>:
{
   30d56:	b570      	push	{r4, r5, r6, lr}
   30d58:	4606      	mov	r6, r0
   30d5a:	4614      	mov	r4, r2
	while (num_events--) {
   30d5c:	e012      	b.n	30d84 <clear_event_registrations+0x2e>
		clear_event_registration(&events[num_events]);
   30d5e:	eb05 0085 	add.w	r0, r5, r5, lsl #2
   30d62:	eb06 0080 	add.w	r0, r6, r0, lsl #2
   30d66:	f7ff ffdf 	bl	30d28 <clear_event_registration>
	__asm__ volatile(
   30d6a:	f384 8811 	msr	BASEPRI, r4
   30d6e:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   30d72:	f04f 0340 	mov.w	r3, #64	; 0x40
   30d76:	f3ef 8411 	mrs	r4, BASEPRI
   30d7a:	f383 8812 	msr	BASEPRI_MAX, r3
   30d7e:	f3bf 8f6f 	isb	sy
	while (num_events--) {
   30d82:	4629      	mov	r1, r5
   30d84:	1e4d      	subs	r5, r1, #1
   30d86:	2900      	cmp	r1, #0
   30d88:	d1e9      	bne.n	30d5e <clear_event_registrations+0x8>
}
   30d8a:	bd70      	pop	{r4, r5, r6, pc}

00030d8c <add_event>:
{
   30d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   30d90:	4605      	mov	r5, r0
   30d92:	460e      	mov	r6, r1
	return list->head == list;
   30d94:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   30d96:	4298      	cmp	r0, r3
   30d98:	d015      	beq.n	30dc6 <add_event+0x3a>
   30d9a:	4614      	mov	r4, r2
   30d9c:	6843      	ldr	r3, [r0, #4]
	if ((pending == NULL) ||
   30d9e:	b193      	cbz	r3, 30dc6 <add_event+0x3a>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   30da0:	6898      	ldr	r0, [r3, #8]
   30da2:	f7ff ffbd 	bl	30d20 <poller_thread>
   30da6:	4680      	mov	r8, r0
   30da8:	4620      	mov	r0, r4
   30daa:	f7ff ffb9 	bl	30d20 <poller_thread>
   30dae:	4607      	mov	r7, r0
   30db0:	4601      	mov	r1, r0
   30db2:	4640      	mov	r0, r8
   30db4:	f7ff fd1a 	bl	307ec <z_sched_prio_cmp>
	if ((pending == NULL) ||
   30db8:	2800      	cmp	r0, #0
   30dba:	dc04      	bgt.n	30dc6 <add_event+0x3a>
	return list->head == list;
   30dbc:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   30dbe:	42a5      	cmp	r5, r4
   30dc0:	d10f      	bne.n	30de2 <add_event+0x56>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   30dc2:	2400      	movs	r4, #0
   30dc4:	e00d      	b.n	30de2 <add_event+0x56>
	sys_dnode_t *const tail = list->tail;
   30dc6:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   30dc8:	6035      	str	r5, [r6, #0]
	node->prev = tail;
   30dca:	6073      	str	r3, [r6, #4]
	tail->next = node;
   30dcc:	601e      	str	r6, [r3, #0]
	list->tail = node;
   30dce:	606e      	str	r6, [r5, #4]
}
   30dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	sys_dnode_t *const prev = successor->prev;
   30dd4:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   30dd6:	6073      	str	r3, [r6, #4]
	node->next = successor;
   30dd8:	6034      	str	r4, [r6, #0]
	prev->next = node;
   30dda:	601e      	str	r6, [r3, #0]
	successor->prev = node;
   30ddc:	6066      	str	r6, [r4, #4]
			return;
   30dde:	e7f7      	b.n	30dd0 <add_event+0x44>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   30de0:	2400      	movs	r4, #0
   30de2:	b19c      	cbz	r4, 30e0c <add_event+0x80>
		if (z_sched_prio_cmp(poller_thread(poller),
   30de4:	68a0      	ldr	r0, [r4, #8]
   30de6:	f7ff ff9b 	bl	30d20 <poller_thread>
   30dea:	4601      	mov	r1, r0
   30dec:	4638      	mov	r0, r7
   30dee:	f7ff fcfd 	bl	307ec <z_sched_prio_cmp>
   30df2:	2800      	cmp	r0, #0
   30df4:	dcee      	bgt.n	30dd4 <add_event+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   30df6:	4622      	mov	r2, r4
	return (node == list->tail) ? NULL : node->next;
   30df8:	686b      	ldr	r3, [r5, #4]
   30dfa:	429c      	cmp	r4, r3
   30dfc:	d0f0      	beq.n	30de0 <add_event+0x54>
   30dfe:	6824      	ldr	r4, [r4, #0]
   30e00:	2c00      	cmp	r4, #0
   30e02:	d0ee      	beq.n	30de2 <add_event+0x56>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   30e04:	2a00      	cmp	r2, #0
   30e06:	d1ec      	bne.n	30de2 <add_event+0x56>
   30e08:	4614      	mov	r4, r2
   30e0a:	e7ea      	b.n	30de2 <add_event+0x56>
	sys_dnode_t *const tail = list->tail;
   30e0c:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   30e0e:	6035      	str	r5, [r6, #0]
	node->prev = tail;
   30e10:	6073      	str	r3, [r6, #4]
	tail->next = node;
   30e12:	601e      	str	r6, [r3, #0]
	list->tail = node;
   30e14:	606e      	str	r6, [r5, #4]
}
   30e16:	e7db      	b.n	30dd0 <add_event+0x44>

00030e18 <register_event>:
{
   30e18:	b538      	push	{r3, r4, r5, lr}
   30e1a:	4604      	mov	r4, r0
   30e1c:	460d      	mov	r5, r1
	switch (event->type) {
   30e1e:	7b43      	ldrb	r3, [r0, #13]
   30e20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   30e24:	3b01      	subs	r3, #1
   30e26:	2b07      	cmp	r3, #7
   30e28:	d80b      	bhi.n	30e42 <register_event+0x2a>
   30e2a:	e8df f003 	tbb	[pc, r3]
   30e2e:	0413      	.short	0x0413
   30e30:	0a0a0c0a 	.word	0x0a0a0c0a
   30e34:	190a      	.short	0x190a
		add_event(&event->sem->poll_events, event, poller);
   30e36:	6900      	ldr	r0, [r0, #16]
   30e38:	460a      	mov	r2, r1
   30e3a:	4621      	mov	r1, r4
   30e3c:	3010      	adds	r0, #16
   30e3e:	f7ff ffa5 	bl	30d8c <add_event>
	event->poller = poller;
   30e42:	60a5      	str	r5, [r4, #8]
}
   30e44:	bd38      	pop	{r3, r4, r5, pc}
		add_event(&event->queue->poll_events, event, poller);
   30e46:	6900      	ldr	r0, [r0, #16]
   30e48:	460a      	mov	r2, r1
   30e4a:	4621      	mov	r1, r4
   30e4c:	3010      	adds	r0, #16
   30e4e:	f7ff ff9d 	bl	30d8c <add_event>
		break;
   30e52:	e7f6      	b.n	30e42 <register_event+0x2a>
		add_event(&event->signal->poll_events, event, poller);
   30e54:	460a      	mov	r2, r1
   30e56:	4601      	mov	r1, r0
   30e58:	6900      	ldr	r0, [r0, #16]
   30e5a:	f7ff ff97 	bl	30d8c <add_event>
		break;
   30e5e:	e7f0      	b.n	30e42 <register_event+0x2a>
		add_event(&event->msgq->poll_events, event, poller);
   30e60:	6900      	ldr	r0, [r0, #16]
   30e62:	460a      	mov	r2, r1
   30e64:	4621      	mov	r1, r4
   30e66:	3024      	adds	r0, #36	; 0x24
   30e68:	f7ff ff90 	bl	30d8c <add_event>
		break;
   30e6c:	e7e9      	b.n	30e42 <register_event+0x2a>

00030e6e <register_events>:
{
   30e6e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30e72:	b083      	sub	sp, #12
   30e74:	4680      	mov	r8, r0
   30e76:	460f      	mov	r7, r1
   30e78:	4691      	mov	r9, r2
   30e7a:	469a      	mov	sl, r3
	for (int ii = 0; ii < num_events; ii++) {
   30e7c:	2500      	movs	r5, #0
	int events_registered = 0;
   30e7e:	46ab      	mov	fp, r5
	for (int ii = 0; ii < num_events; ii++) {
   30e80:	e00a      	b.n	30e98 <register_events+0x2a>
		} else if (!just_check && poller->is_polling) {
   30e82:	f1ba 0f00 	cmp.w	sl, #0
   30e86:	d102      	bne.n	30e8e <register_events+0x20>
   30e88:	f899 3000 	ldrb.w	r3, [r9]
   30e8c:	bb2b      	cbnz	r3, 30eda <register_events+0x6c>
	__asm__ volatile(
   30e8e:	f386 8811 	msr	BASEPRI, r6
   30e92:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   30e96:	3501      	adds	r5, #1
   30e98:	42bd      	cmp	r5, r7
   30e9a:	da25      	bge.n	30ee8 <register_events+0x7a>
	__asm__ volatile(
   30e9c:	f04f 0340 	mov.w	r3, #64	; 0x40
   30ea0:	f3ef 8611 	mrs	r6, BASEPRI
   30ea4:	f383 8812 	msr	BASEPRI_MAX, r3
   30ea8:	f3bf 8f6f 	isb	sy
		if (is_condition_met(&events[ii], &state)) {
   30eac:	eb05 0485 	add.w	r4, r5, r5, lsl #2
   30eb0:	eb08 0484 	add.w	r4, r8, r4, lsl #2
   30eb4:	a901      	add	r1, sp, #4
   30eb6:	4620      	mov	r0, r4
   30eb8:	f7ff ff01 	bl	30cbe <is_condition_met>
   30ebc:	2800      	cmp	r0, #0
   30ebe:	d0e0      	beq.n	30e82 <register_events+0x14>
	event->poller = NULL;
   30ec0:	2100      	movs	r1, #0
   30ec2:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   30ec4:	68e3      	ldr	r3, [r4, #12]
   30ec6:	f3c3 3286 	ubfx	r2, r3, #14, #7
   30eca:	9801      	ldr	r0, [sp, #4]
   30ecc:	4302      	orrs	r2, r0
   30ece:	f362 3394 	bfi	r3, r2, #14, #7
   30ed2:	60e3      	str	r3, [r4, #12]
			poller->is_polling = false;
   30ed4:	f889 1000 	strb.w	r1, [r9]
   30ed8:	e7d9      	b.n	30e8e <register_events+0x20>
			register_event(&events[ii], poller);
   30eda:	4649      	mov	r1, r9
   30edc:	4620      	mov	r0, r4
   30ede:	f7ff ff9b 	bl	30e18 <register_event>
			events_registered += 1;
   30ee2:	f10b 0b01 	add.w	fp, fp, #1
   30ee6:	e7d2      	b.n	30e8e <register_events+0x20>
}
   30ee8:	4658      	mov	r0, fp
   30eea:	b003      	add	sp, #12
   30eec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00030ef0 <signal_poller>:
{
   30ef0:	b538      	push	{r3, r4, r5, lr}
   30ef2:	460d      	mov	r5, r1
	struct k_thread *thread = poller_thread(event->poller);
   30ef4:	6880      	ldr	r0, [r0, #8]
   30ef6:	f7ff ff13 	bl	30d20 <poller_thread>
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
   30efa:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_pending(thread)) {
   30efc:	f013 0f02 	tst.w	r3, #2
   30f00:	d025      	beq.n	30f4e <signal_poller+0x5e>
   30f02:	4604      	mov	r4, r0
	return thread->base.timeout.dticks == _EXPIRED;
   30f04:	6a82      	ldr	r2, [r0, #40]	; 0x28
   30f06:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	if (z_is_thread_timeout_expired(thread)) {
   30f08:	f1b3 3fff 	cmp.w	r3, #4294967295
   30f0c:	bf08      	it	eq
   30f0e:	f112 0f02 	cmneq.w	r2, #2
   30f12:	d01e      	beq.n	30f52 <signal_poller+0x62>
	z_unpend_thread(thread);
   30f14:	f7ff fcbb 	bl	3088e <z_unpend_thread>
	arch_thread_return_value_set(thread,
   30f18:	2d08      	cmp	r5, #8
   30f1a:	d00a      	beq.n	30f32 <signal_poller+0x42>
   30f1c:	2300      	movs	r3, #0
   30f1e:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	uint8_t state = thread->base.thread_state;
   30f22:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   30f24:	f013 0f1f 	tst.w	r3, #31
   30f28:	d108      	bne.n	30f3c <signal_poller+0x4c>
	return node->next != NULL;
   30f2a:	69a3      	ldr	r3, [r4, #24]
   30f2c:	b123      	cbz	r3, 30f38 <signal_poller+0x48>
   30f2e:	2300      	movs	r3, #0
   30f30:	e005      	b.n	30f3e <signal_poller+0x4e>
   30f32:	f06f 0303 	mvn.w	r3, #3
   30f36:	e7f2      	b.n	30f1e <signal_poller+0x2e>
   30f38:	2301      	movs	r3, #1
   30f3a:	e000      	b.n	30f3e <signal_poller+0x4e>
   30f3c:	2300      	movs	r3, #0
	if (!z_is_thread_ready(thread)) {
   30f3e:	b90b      	cbnz	r3, 30f44 <signal_poller+0x54>
		return 0;
   30f40:	2000      	movs	r0, #0
   30f42:	e005      	b.n	30f50 <signal_poller+0x60>
	z_ready_thread(thread);
   30f44:	4620      	mov	r0, r4
   30f46:	f7ff fcc4 	bl	308d2 <z_ready_thread>
	return 0;
   30f4a:	2000      	movs	r0, #0
   30f4c:	e000      	b.n	30f50 <signal_poller+0x60>
		return 0;
   30f4e:	2000      	movs	r0, #0
}
   30f50:	bd38      	pop	{r3, r4, r5, pc}
		return -EAGAIN;
   30f52:	f06f 000a 	mvn.w	r0, #10
   30f56:	e7fb      	b.n	30f50 <signal_poller+0x60>

00030f58 <signal_triggered_work>:

extern int z_work_submit_to_queue(struct k_work_q *queue,
			 struct k_work *work);

static int signal_triggered_work(struct k_poll_event *event, uint32_t status)
{
   30f58:	b570      	push	{r4, r5, r6, lr}
	struct z_poller *poller = event->poller;
   30f5a:	6884      	ldr	r4, [r0, #8]
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   30f5c:	7823      	ldrb	r3, [r4, #0]
   30f5e:	b173      	cbz	r3, 30f7e <signal_triggered_work+0x26>
   30f60:	f854 5c04 	ldr.w	r5, [r4, #-4]
   30f64:	b15d      	cbz	r5, 30f7e <signal_triggered_work+0x26>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
   30f66:	f1a4 0614 	sub.w	r6, r4, #20
   30f6a:	f104 0014 	add.w	r0, r4, #20
   30f6e:	f7ff fde0 	bl	30b32 <z_abort_timeout>
		twork->poll_result = 0;
   30f72:	2300      	movs	r3, #0
   30f74:	62e3      	str	r3, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   30f76:	4631      	mov	r1, r6
   30f78:	4628      	mov	r0, r5
   30f7a:	f7ff fb80 	bl	3067e <z_work_submit_to_queue>
	}

	return 0;
}
   30f7e:	2000      	movs	r0, #0
   30f80:	bd70      	pop	{r4, r5, r6, pc}

00030f82 <signal_poll_event>:
{
   30f82:	b570      	push	{r4, r5, r6, lr}
   30f84:	4604      	mov	r4, r0
   30f86:	460d      	mov	r5, r1
	struct z_poller *poller = event->poller;
   30f88:	6886      	ldr	r6, [r0, #8]
	if (poller != NULL) {
   30f8a:	b1d6      	cbz	r6, 30fc2 <signal_poll_event+0x40>
		if (poller->mode == MODE_POLL) {
   30f8c:	7873      	ldrb	r3, [r6, #1]
   30f8e:	2b01      	cmp	r3, #1
   30f90:	d00d      	beq.n	30fae <signal_poll_event+0x2c>
		} else if (poller->mode == MODE_TRIGGERED) {
   30f92:	2b02      	cmp	r3, #2
   30f94:	d012      	beq.n	30fbc <signal_poll_event+0x3a>
		poller->is_polling = false;
   30f96:	2000      	movs	r0, #0
   30f98:	7030      	strb	r0, [r6, #0]
	event->poller = NULL;
   30f9a:	2300      	movs	r3, #0
   30f9c:	60a3      	str	r3, [r4, #8]
	event->state |= state;
   30f9e:	68e3      	ldr	r3, [r4, #12]
   30fa0:	f3c3 3286 	ubfx	r2, r3, #14, #7
   30fa4:	432a      	orrs	r2, r5
   30fa6:	f362 3394 	bfi	r3, r2, #14, #7
   30faa:	60e3      	str	r3, [r4, #12]
}
   30fac:	bd70      	pop	{r4, r5, r6, pc}
			retcode = signal_poller(event, state);
   30fae:	f7ff ff9f 	bl	30ef0 <signal_poller>
		poller->is_polling = false;
   30fb2:	2300      	movs	r3, #0
   30fb4:	7033      	strb	r3, [r6, #0]
		if (retcode < 0) {
   30fb6:	4298      	cmp	r0, r3
   30fb8:	daef      	bge.n	30f9a <signal_poll_event+0x18>
   30fba:	e7f7      	b.n	30fac <signal_poll_event+0x2a>
			retcode = signal_triggered_work(event, state);
   30fbc:	f7ff ffcc 	bl	30f58 <signal_triggered_work>
   30fc0:	e7f7      	b.n	30fb2 <signal_poll_event+0x30>
	int retcode = 0;
   30fc2:	2000      	movs	r0, #0
   30fc4:	e7e9      	b.n	30f9a <signal_poll_event+0x18>

00030fc6 <z_handle_obj_poll_events>:
{
   30fc6:	b508      	push	{r3, lr}
   30fc8:	4603      	mov	r3, r0
	return list->head == list;
   30fca:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   30fcc:	4283      	cmp	r3, r0
   30fce:	d008      	beq.n	30fe2 <z_handle_obj_poll_events+0x1c>
	sys_dnode_t *const prev = node->prev;
   30fd0:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
   30fd2:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
   30fd4:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   30fd6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   30fd8:	2300      	movs	r3, #0
   30fda:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   30fdc:	6043      	str	r3, [r0, #4]
		(void) signal_poll_event(poll_event, state);
   30fde:	f7ff ffd0 	bl	30f82 <signal_poll_event>
}
   30fe2:	bd08      	pop	{r3, pc}

00030fe4 <z_impl_k_poll_signal_init>:
	list->head = (sys_dnode_t *)list;
   30fe4:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   30fe6:	6040      	str	r0, [r0, #4]
	sig->signaled = 0U;
   30fe8:	2300      	movs	r3, #0
   30fea:	6083      	str	r3, [r0, #8]
}
   30fec:	4770      	bx	lr

00030fee <z_impl_k_poll_signal_reset>:
	sig->signaled = 0U;
   30fee:	2300      	movs	r3, #0
   30ff0:	6083      	str	r3, [r0, #8]
}
   30ff2:	4770      	bx	lr

00030ff4 <z_heap_aligned_alloc>:
{
   30ff4:	b5d0      	push	{r4, r6, r7, lr}
   30ff6:	b082      	sub	sp, #8
   30ff8:	4604      	mov	r4, r0
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   30ffa:	2300      	movs	r3, #0
   30ffc:	3204      	adds	r2, #4
   30ffe:	d20e      	bcs.n	3101e <z_heap_aligned_alloc+0x2a>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
   31000:	b97b      	cbnz	r3, 31022 <z_heap_aligned_alloc+0x2e>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   31002:	2600      	movs	r6, #0
   31004:	2700      	movs	r7, #0
   31006:	e9cd 6700 	strd	r6, r7, [sp]
   3100a:	f041 0104 	orr.w	r1, r1, #4
   3100e:	4620      	mov	r0, r4
   31010:	f7ff f869 	bl	300e6 <k_heap_aligned_alloc>
	if (mem == NULL) {
   31014:	b108      	cbz	r0, 3101a <z_heap_aligned_alloc+0x26>
	*heap_ref = heap;
   31016:	f840 4b04 	str.w	r4, [r0], #4
}
   3101a:	b002      	add	sp, #8
   3101c:	bdd0      	pop	{r4, r6, r7, pc}
   3101e:	2301      	movs	r3, #1
   31020:	e7ee      	b.n	31000 <z_heap_aligned_alloc+0xc>
		return NULL;
   31022:	2000      	movs	r0, #0
   31024:	e7f9      	b.n	3101a <z_heap_aligned_alloc+0x26>

00031026 <k_free>:
	if (ptr != NULL) {
   31026:	b130      	cbz	r0, 31036 <k_free+0x10>
{
   31028:	b508      	push	{r3, lr}
		k_heap_free(*heap_ref, ptr);
   3102a:	1f01      	subs	r1, r0, #4
   3102c:	f850 0c04 	ldr.w	r0, [r0, #-4]
   31030:	f7ff f8af 	bl	30192 <k_heap_free>
}
   31034:	bd08      	pop	{r3, pc}
   31036:	4770      	bx	lr

00031038 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   31038:	4770      	bx	lr
	...
