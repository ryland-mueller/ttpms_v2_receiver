
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	80 bb 00 20 99 7e 01 00 11 85 02 00 51 7e 01 00     ... .~......Q~..
  10:	51 7e 01 00 51 7e 01 00 51 7e 01 00 00 00 00 00     Q~..Q~..Q~......
	...
  2c:	69 6d 01 00 51 7e 01 00 00 00 00 00 11 6d 01 00     im..Q~.......m..
  3c:	51 7e 01 00                                         Q~..

00000040 <_irq_vector_table>:
  40:	41 6e 01 00 d1 c7 02 00 41 6e 01 00 41 6e 01 00     An......An..An..
  50:	41 6e 01 00 41 6e 01 00 41 6e 01 00 41 6e 01 00     An..An..An..An..
  60:	99 c7 02 00 41 6e 01 00 41 6e 01 00 b7 c7 02 00     ....An..An......
  70:	41 6e 01 00 41 6e 01 00 41 6e 01 00 41 6e 01 00     An..An..An..An..
  80:	41 6e 01 00 41 6e 01 00 41 6e 01 00 41 6e 01 00     An..An..An..An..
  90:	41 6e 01 00 41 6e 01 00 41 6e 01 00 41 6e 01 00     An..An..An..An..
  a0:	41 6e 01 00 41 6e 01 00 41 6e 01 00 41 6e 01 00     An..An..An..An..
  b0:	41 6e 01 00 41 6e 01 00 41 6e 01 00 41 6e 01 00     An..An..An..An..
  c0:	41 6e 01 00 41 6e 01 00 41 6e 01 00 41 6e 01 00     An..An..An..An..
  d0:	41 6e 01 00 41 6e 01 00 41 6e 01 00 41 6e 01 00     An..An..An..An..
  e0:	41 6e 01 00 41 6e 01 00 41 6e 01 00 41 6e 01 00     An..An..An..An..
  f0:	41 6e 01 00 41 6e 01 00 41 6e 01 00 41 6e 01 00     An..An..An..An..

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295
     110:	f04f 30ff 	movne.w	r0, #4294967295
     114:	f000 b80c 	b.w	130 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f00c fb0a 	bl	c738 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__aeabi_idiv0>:
     130:	4770      	bx	lr
     132:	bf00      	nop

00000134 <ocrypto_bigint_add256>:
     134:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     138:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     13c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     140:	185b      	adds	r3, r3, r1
     142:	eb54 040c 	adcs.w	r4, r4, ip
     146:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     14a:	414d      	adcs	r5, r1
     14c:	eb56 060c 	adcs.w	r6, r6, ip
     150:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     154:	414f      	adcs	r7, r1
     156:	eb58 080c 	adcs.w	r8, r8, ip
     15a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     15e:	eb59 0901 	adcs.w	r9, r9, r1
     162:	eb5a 0a0c 	adcs.w	sl, sl, ip
     166:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     16a:	4180      	sbcs	r0, r0
     16c:	3001      	adds	r0, #1
     16e:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     172:	4770      	bx	lr

00000174 <ocrypto_bigint_sub256>:
     174:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     178:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     17c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     180:	1a5b      	subs	r3, r3, r1
     182:	eb74 040c 	sbcs.w	r4, r4, ip
     186:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     18a:	418d      	sbcs	r5, r1
     18c:	eb76 060c 	sbcs.w	r6, r6, ip
     190:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     194:	418f      	sbcs	r7, r1
     196:	eb78 080c 	sbcs.w	r8, r8, ip
     19a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     19e:	eb79 0901 	sbcs.w	r9, r9, r1
     1a2:	eb7a 0a0c 	sbcs.w	sl, sl, ip
     1a6:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     1aa:	4180      	sbcs	r0, r0
     1ac:	4240      	negs	r0, r0
     1ae:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     1b2:	4770      	bx	lr

000001b4 <ocrypto_bigint_cadd256>:
     1b4:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     1b8:	4252      	negs	r2, r2
     1ba:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     1be:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     1c2:	4017      	ands	r7, r2
     1c4:	19db      	adds	r3, r3, r7
     1c6:	ea18 0802 	ands.w	r8, r8, r2
     1ca:	eb54 0408 	adcs.w	r4, r4, r8
     1ce:	ea19 0902 	ands.w	r9, r9, r2
     1d2:	eb55 0509 	adcs.w	r5, r5, r9
     1d6:	ea1a 0a02 	ands.w	sl, sl, r2
     1da:	eb56 060a 	adcs.w	r6, r6, sl
     1de:	c078      	stmia	r0!, {r3, r4, r5, r6}
     1e0:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     1e4:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     1e8:	4017      	ands	r7, r2
     1ea:	417b      	adcs	r3, r7
     1ec:	ea18 0802 	ands.w	r8, r8, r2
     1f0:	eb54 0408 	adcs.w	r4, r4, r8
     1f4:	ea19 0902 	ands.w	r9, r9, r2
     1f8:	eb55 0509 	adcs.w	r5, r5, r9
     1fc:	ea1a 0a02 	ands.w	sl, sl, r2
     200:	eb56 060a 	adcs.w	r6, r6, sl
     204:	c078      	stmia	r0!, {r3, r4, r5, r6}
     206:	4180      	sbcs	r0, r0
     208:	3001      	adds	r0, #1
     20a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     20e:	4770      	bx	lr

00000210 <ocrypto_bigint_csub256>:
     210:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     214:	4252      	negs	r2, r2
     216:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     21a:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     21e:	4017      	ands	r7, r2
     220:	1bdb      	subs	r3, r3, r7
     222:	ea18 0802 	ands.w	r8, r8, r2
     226:	eb74 0408 	sbcs.w	r4, r4, r8
     22a:	ea19 0902 	ands.w	r9, r9, r2
     22e:	eb75 0509 	sbcs.w	r5, r5, r9
     232:	ea1a 0a02 	ands.w	sl, sl, r2
     236:	eb76 060a 	sbcs.w	r6, r6, sl
     23a:	c078      	stmia	r0!, {r3, r4, r5, r6}
     23c:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     240:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     244:	4017      	ands	r7, r2
     246:	41bb      	sbcs	r3, r7
     248:	ea18 0802 	ands.w	r8, r8, r2
     24c:	eb74 0408 	sbcs.w	r4, r4, r8
     250:	ea19 0902 	ands.w	r9, r9, r2
     254:	eb75 0509 	sbcs.w	r5, r5, r9
     258:	ea1a 0a02 	ands.w	sl, sl, r2
     25c:	eb76 060a 	sbcs.w	r6, r6, sl
     260:	c078      	stmia	r0!, {r3, r4, r5, r6}
     262:	4180      	sbcs	r0, r0
     264:	4240      	negs	r0, r0
     266:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     26a:	4770      	bx	lr

0000026c <ocrypto_bigint_cswap256>:
     26c:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
     270:	4252      	negs	r2, r2
     272:	f04f 0804 	mov.w	r8, #4

00000276 <cswap256_loop>:
     276:	e890 0030 	ldmia.w	r0, {r4, r5}
     27a:	e891 00c0 	ldmia.w	r1, {r6, r7}
     27e:	1ba3      	subs	r3, r4, r6
     280:	4013      	ands	r3, r2
     282:	1ae4      	subs	r4, r4, r3
     284:	18f6      	adds	r6, r6, r3
     286:	1beb      	subs	r3, r5, r7
     288:	4013      	ands	r3, r2
     28a:	1aed      	subs	r5, r5, r3
     28c:	18ff      	adds	r7, r7, r3
     28e:	c030      	stmia	r0!, {r4, r5}
     290:	c1c0      	stmia	r1!, {r6, r7}
     292:	f1b8 0801 	subs.w	r8, r8, #1
     296:	d1ee      	bne.n	276 <cswap256_loop>
     298:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
     29c:	4770      	bx	lr
     29e:	bf00      	nop

000002a0 <ocrypto_mul256_noframe>:
     2a0:	b500      	push	{lr}
     2a2:	e892 07dc 	ldmia.w	r2, {r2, r3, r4, r6, r7, r8, r9, sl}
     2a6:	e92d 07dc 	stmdb	sp!, {r2, r3, r4, r6, r7, r8, r9, sl}
     2aa:	e8b1 5780 	ldmia.w	r1!, {r7, r8, r9, sl, ip, lr}
     2ae:	b402      	push	{r1}
     2b0:	fba7 5102 	umull	r5, r1, r7, r2
     2b4:	950a      	str	r5, [sp, #40]	; 0x28
     2b6:	fba8 0b02 	umull	r0, fp, r8, r2
     2ba:	fbe7 1063 	umaal	r1, r0, r7, r3
     2be:	fbe9 b062 	umaal	fp, r0, r9, r2
     2c2:	910b      	str	r1, [sp, #44]	; 0x2c
     2c4:	fba8 5103 	umull	r5, r1, r8, r3
     2c8:	fbea 0162 	umaal	r0, r1, sl, r2
     2cc:	fbe7 b564 	umaal	fp, r5, r7, r4
     2d0:	fbe7 0566 	umaal	r0, r5, r7, r6
     2d4:	fbe8 1566 	umaal	r1, r5, r8, r6
     2d8:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
     2dc:	fba9 b603 	umull	fp, r6, r9, r3
     2e0:	fbea 1663 	umaal	r1, r6, sl, r3
     2e4:	fbec 5663 	umaal	r5, r6, ip, r3
     2e8:	fbe8 0b64 	umaal	r0, fp, r8, r4
     2ec:	fbe9 1b64 	umaal	r1, fp, r9, r4
     2f0:	fbea 5b64 	umaal	r5, fp, sl, r4
     2f4:	fbec 6b64 	umaal	r6, fp, ip, r4
     2f8:	900d      	str	r0, [sp, #52]	; 0x34
     2fa:	fbac 3002 	umull	r3, r0, ip, r2
     2fe:	9c05      	ldr	r4, [sp, #20]
     300:	fbee 5062 	umaal	r5, r0, lr, r2
     304:	fbe9 6064 	umaal	r6, r0, r9, r4
     308:	fbea b064 	umaal	fp, r0, sl, r4
     30c:	fbe7 3164 	umaal	r3, r1, r7, r4
     310:	fbe8 5164 	umaal	r5, r1, r8, r4
     314:	9c06      	ldr	r4, [sp, #24]
     316:	fbe8 6164 	umaal	r6, r1, r8, r4
     31a:	fbe9 b164 	umaal	fp, r1, r9, r4
     31e:	fbea 0164 	umaal	r0, r1, sl, r4
     322:	930e      	str	r3, [sp, #56]	; 0x38
     324:	fba7 3204 	umull	r3, r2, r7, r4
     328:	9c07      	ldr	r4, [sp, #28]
     32a:	fbe7 6264 	umaal	r6, r2, r7, r4
     32e:	fbe8 b264 	umaal	fp, r2, r8, r4
     332:	fbe9 0264 	umaal	r0, r2, r9, r4
     336:	fbea 1264 	umaal	r1, r2, sl, r4
     33a:	9c04      	ldr	r4, [sp, #16]
     33c:	fbe9 5364 	umaal	r5, r3, r9, r4
     340:	fbea 6364 	umaal	r6, r3, sl, r4
     344:	9c08      	ldr	r4, [sp, #32]
     346:	fbe7 b364 	umaal	fp, r3, r7, r4
     34a:	fbe8 0364 	umaal	r0, r3, r8, r4
     34e:	fbe9 1364 	umaal	r1, r3, r9, r4
     352:	fbea 2364 	umaal	r2, r3, sl, r4
     356:	950f      	str	r5, [sp, #60]	; 0x3c
     358:	f85d 9b04 	ldr.w	r9, [sp], #4
     35c:	e899 0600 	ldmia.w	r9, {r9, sl}
     360:	f8dd 8000 	ldr.w	r8, [sp]
     364:	fba9 5408 	umull	r5, r4, r9, r8
     368:	fbea b468 	umaal	fp, r4, sl, r8
     36c:	f8dd 8010 	ldr.w	r8, [sp, #16]
     370:	fbec 0468 	umaal	r0, r4, ip, r8
     374:	fbee 1468 	umaal	r1, r4, lr, r8
     378:	fbe9 2468 	umaal	r2, r4, r9, r8
     37c:	fbea 3468 	umaal	r3, r4, sl, r8
     380:	f8dd 8004 	ldr.w	r8, [sp, #4]
     384:	fbee 6568 	umaal	r6, r5, lr, r8
     388:	fbe9 b568 	umaal	fp, r5, r9, r8
     38c:	fbea 0568 	umaal	r0, r5, sl, r8
     390:	f8dd 8014 	ldr.w	r8, [sp, #20]
     394:	fbec 1568 	umaal	r1, r5, ip, r8
     398:	fbee 2568 	umaal	r2, r5, lr, r8
     39c:	fbe9 3568 	umaal	r3, r5, r9, r8
     3a0:	fbea 4568 	umaal	r4, r5, sl, r8
     3a4:	960f      	str	r6, [sp, #60]	; 0x3c
     3a6:	f8dd 8008 	ldr.w	r8, [sp, #8]
     3aa:	fbae 7608 	umull	r7, r6, lr, r8
     3ae:	fbe9 0668 	umaal	r0, r6, r9, r8
     3b2:	fbea 1668 	umaal	r1, r6, sl, r8
     3b6:	f8dd 8018 	ldr.w	r8, [sp, #24]
     3ba:	fbec 2668 	umaal	r2, r6, ip, r8
     3be:	fbee 3668 	umaal	r3, r6, lr, r8
     3c2:	fbe9 4668 	umaal	r4, r6, r9, r8
     3c6:	fbea 5668 	umaal	r5, r6, sl, r8
     3ca:	f8dd 800c 	ldr.w	r8, [sp, #12]
     3ce:	fbec b768 	umaal	fp, r7, ip, r8
     3d2:	fbee 0768 	umaal	r0, r7, lr, r8
     3d6:	fbe9 1768 	umaal	r1, r7, r9, r8
     3da:	fbea 2768 	umaal	r2, r7, sl, r8
     3de:	f8dd 801c 	ldr.w	r8, [sp, #28]
     3e2:	fbec 3768 	umaal	r3, r7, ip, r8
     3e6:	fbee 4768 	umaal	r4, r7, lr, r8
     3ea:	fbe9 5768 	umaal	r5, r7, r9, r8
     3ee:	fbea 6768 	umaal	r6, r7, sl, r8
     3f2:	b008      	add	sp, #32
     3f4:	bd00      	pop	{pc}
     3f6:	bf00      	nop

000003f8 <ocrypto_bigint_mul256>:
     3f8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     3fc:	b087      	sub	sp, #28
     3fe:	f7ff ff4f 	bl	2a0 <ocrypto_mul256_noframe>
     402:	f8dd 801c 	ldr.w	r8, [sp, #28]
     406:	f108 0820 	add.w	r8, r8, #32
     40a:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     40e:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
     410:	e887 087f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5, r6, fp}
     414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000418 <ocrypto_sqr256_noframe>:
     418:	b500      	push	{lr}
     41a:	e891 5798 	ldmia.w	r1, {r3, r4, r7, r8, r9, sl, ip, lr}
     41e:	fba3 5203 	umull	r5, r2, r3, r3
     422:	9501      	str	r5, [sp, #4]
     424:	fba3 0104 	umull	r0, r1, r3, r4
     428:	fbe3 2064 	umaal	r2, r0, r3, r4
     42c:	fbe3 1067 	umaal	r1, r0, r3, r7
     430:	9202      	str	r2, [sp, #8]
     432:	fba3 5207 	umull	r5, r2, r3, r7
     436:	fbe3 0268 	umaal	r0, r2, r3, r8
     43a:	fbe4 1564 	umaal	r1, r5, r4, r4
     43e:	fbe3 0568 	umaal	r0, r5, r3, r8
     442:	fbe3 2569 	umaal	r2, r5, r3, r9
     446:	9103      	str	r1, [sp, #12]
     448:	fba4 b607 	umull	fp, r6, r4, r7
     44c:	fbe3 2669 	umaal	r2, r6, r3, r9
     450:	fbe3 566a 	umaal	r5, r6, r3, sl
     454:	fbe4 0b67 	umaal	r0, fp, r4, r7
     458:	fbe4 2b68 	umaal	r2, fp, r4, r8
     45c:	fbe3 5b6a 	umaal	r5, fp, r3, sl
     460:	fbe3 6b6c 	umaal	r6, fp, r3, ip
     464:	9004      	str	r0, [sp, #16]
     466:	fba4 1008 	umull	r1, r0, r4, r8
     46a:	fbe4 5069 	umaal	r5, r0, r4, r9
     46e:	fbe3 606c 	umaal	r6, r0, r3, ip
     472:	fbe3 b06e 	umaal	fp, r0, r3, lr
     476:	fbe7 2167 	umaal	r2, r1, r7, r7
     47a:	fbe4 5169 	umaal	r5, r1, r4, r9
     47e:	fbe4 616a 	umaal	r6, r1, r4, sl
     482:	fbe3 b16e 	umaal	fp, r1, r3, lr
     486:	fbe4 016e 	umaal	r0, r1, r4, lr
     48a:	9205      	str	r2, [sp, #20]
     48c:	fba7 3208 	umull	r3, r2, r7, r8
     490:	fbe4 626a 	umaal	r6, r2, r4, sl
     494:	fbe4 b26c 	umaal	fp, r2, r4, ip
     498:	fbe4 026e 	umaal	r0, r2, r4, lr
     49c:	fbe7 126e 	umaal	r1, r2, r7, lr
     4a0:	fbe7 5368 	umaal	r5, r3, r7, r8
     4a4:	fbe7 6369 	umaal	r6, r3, r7, r9
     4a8:	fbe4 b36c 	umaal	fp, r3, r4, ip
     4ac:	fbe7 036c 	umaal	r0, r3, r7, ip
     4b0:	fbe7 136e 	umaal	r1, r3, r7, lr
     4b4:	fbe8 236e 	umaal	r2, r3, r8, lr
     4b8:	9506      	str	r5, [sp, #24]
     4ba:	fba7 5409 	umull	r5, r4, r7, r9
     4be:	fbe7 b46a 	umaal	fp, r4, r7, sl
     4c2:	fbe7 046c 	umaal	r0, r4, r7, ip
     4c6:	fbe8 146c 	umaal	r1, r4, r8, ip
     4ca:	fbe8 246e 	umaal	r2, r4, r8, lr
     4ce:	fbe9 346e 	umaal	r3, r4, r9, lr
     4d2:	fbe8 6568 	umaal	r6, r5, r8, r8
     4d6:	fbe7 b56a 	umaal	fp, r5, r7, sl
     4da:	fbe8 056a 	umaal	r0, r5, r8, sl
     4de:	fbe8 156c 	umaal	r1, r5, r8, ip
     4e2:	fbe9 256c 	umaal	r2, r5, r9, ip
     4e6:	fbe9 356e 	umaal	r3, r5, r9, lr
     4ea:	fbea 456e 	umaal	r4, r5, sl, lr
     4ee:	9607      	str	r6, [sp, #28]
     4f0:	fba8 7609 	umull	r7, r6, r8, r9
     4f4:	fbe8 066a 	umaal	r0, r6, r8, sl
     4f8:	fbe9 166a 	umaal	r1, r6, r9, sl
     4fc:	fbe9 266c 	umaal	r2, r6, r9, ip
     500:	fbea 366c 	umaal	r3, r6, sl, ip
     504:	fbea 466e 	umaal	r4, r6, sl, lr
     508:	fbec 566e 	umaal	r5, r6, ip, lr
     50c:	fbe8 b769 	umaal	fp, r7, r8, r9
     510:	fbe9 0769 	umaal	r0, r7, r9, r9
     514:	fbe9 176a 	umaal	r1, r7, r9, sl
     518:	fbea 276a 	umaal	r2, r7, sl, sl
     51c:	fbea 376c 	umaal	r3, r7, sl, ip
     520:	fbec 476c 	umaal	r4, r7, ip, ip
     524:	fbec 576e 	umaal	r5, r7, ip, lr
     528:	fbee 676e 	umaal	r6, r7, lr, lr
     52c:	bd00      	pop	{pc}
     52e:	bf00      	nop

00000530 <ocrypto_bigint_sqr256>:
     530:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     534:	b087      	sub	sp, #28
     536:	f7ff ff6f 	bl	418 <ocrypto_sqr256_noframe>
     53a:	f8dd 801c 	ldr.w	r8, [sp, #28]
     53e:	f108 0820 	add.w	r8, r8, #32
     542:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     546:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
     548:	e887 087f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5, r6, fp}
     54c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000550 <ocrypto_constant_time_equal>:
     550:	b430      	push	{r4, r5}
     552:	f04f 0300 	mov.w	r3, #0

00000556 <constant_time_equal_loop>:
     556:	f810 4b01 	ldrb.w	r4, [r0], #1
     55a:	f811 5b01 	ldrb.w	r5, [r1], #1
     55e:	3a01      	subs	r2, #1
     560:	ea84 0405 	eor.w	r4, r4, r5
     564:	ea43 0304 	orr.w	r3, r3, r4
     568:	d1f5      	bne.n	556 <constant_time_equal_loop>
     56a:	f1a3 0301 	sub.w	r3, r3, #1
     56e:	ea4f 70d3 	mov.w	r0, r3, lsr #31
     572:	bc30      	pop	{r4, r5}
     574:	4770      	bx	lr
     576:	bf00      	nop

00000578 <ocrypto_constant_time_is_zero>:
     578:	f04f 0300 	mov.w	r3, #0

0000057c <constant_time_is_zero_loop>:
     57c:	f810 2b01 	ldrb.w	r2, [r0], #1
     580:	3901      	subs	r1, #1
     582:	ea43 0302 	orr.w	r3, r3, r2
     586:	d1f9      	bne.n	57c <constant_time_is_zero_loop>
     588:	f1a3 0301 	sub.w	r3, r3, #1
     58c:	ea4f 70d3 	mov.w	r0, r3, lsr #31
     590:	4770      	bx	lr
     592:	bf00      	nop

00000594 <ocrypto_constant_time_xor>:
     594:	b430      	push	{r4, r5}

00000596 <constant_time_xor_loop>:
     596:	f811 4b01 	ldrb.w	r4, [r1], #1
     59a:	f812 5b01 	ldrb.w	r5, [r2], #1
     59e:	406c      	eors	r4, r5
     5a0:	f800 4b01 	strb.w	r4, [r0], #1
     5a4:	3b01      	subs	r3, #1
     5a6:	d1f6      	bne.n	596 <constant_time_xor_loop>
     5a8:	bc30      	pop	{r4, r5}
     5aa:	4770      	bx	lr

000005ac <ocrypto_mod_p256_add>:
     5ac:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     5b0:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     5b4:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     5b8:	185b      	adds	r3, r3, r1
     5ba:	eb54 040c 	adcs.w	r4, r4, ip
     5be:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     5c2:	414d      	adcs	r5, r1
     5c4:	eb56 060c 	adcs.w	r6, r6, ip
     5c8:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     5cc:	414f      	adcs	r7, r1
     5ce:	eb58 080c 	adcs.w	r8, r8, ip
     5d2:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     5d6:	eb59 0901 	adcs.w	r9, r9, r1
     5da:	eb5a 0a0c 	adcs.w	sl, sl, ip
     5de:	4189      	sbcs	r1, r1
     5e0:	f1b3 33ff 	subs.w	r3, r3, #4294967295
     5e4:	f174 34ff 	sbcs.w	r4, r4, #4294967295
     5e8:	f175 35ff 	sbcs.w	r5, r5, #4294967295
     5ec:	f176 0600 	sbcs.w	r6, r6, #0
     5f0:	f177 0700 	sbcs.w	r7, r7, #0
     5f4:	f178 0800 	sbcs.w	r8, r8, #0
     5f8:	f179 0901 	sbcs.w	r9, r9, #1
     5fc:	f17a 3aff 	sbcs.w	sl, sl, #4294967295
     600:	f151 0100 	adcs.w	r1, r1, #0
     604:	185b      	adds	r3, r3, r1
     606:	414c      	adcs	r4, r1
     608:	414d      	adcs	r5, r1
     60a:	f156 0600 	adcs.w	r6, r6, #0
     60e:	f157 0700 	adcs.w	r7, r7, #0
     612:	f158 0800 	adcs.w	r8, r8, #0
     616:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
     61a:	eb5a 0a01 	adcs.w	sl, sl, r1
     61e:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     622:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     626:	4770      	bx	lr

00000628 <ocrypto_mod_p256_sub>:
     628:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     62c:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     630:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     634:	1a5b      	subs	r3, r3, r1
     636:	eb74 040c 	sbcs.w	r4, r4, ip
     63a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     63e:	418d      	sbcs	r5, r1
     640:	eb76 060c 	sbcs.w	r6, r6, ip
     644:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     648:	418f      	sbcs	r7, r1
     64a:	eb78 080c 	sbcs.w	r8, r8, ip
     64e:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     652:	eb79 0901 	sbcs.w	r9, r9, r1
     656:	eb7a 0a0c 	sbcs.w	sl, sl, ip
     65a:	4189      	sbcs	r1, r1
     65c:	185b      	adds	r3, r3, r1
     65e:	414c      	adcs	r4, r1
     660:	414d      	adcs	r5, r1
     662:	f156 0600 	adcs.w	r6, r6, #0
     666:	f157 0700 	adcs.w	r7, r7, #0
     66a:	f158 0800 	adcs.w	r8, r8, #0
     66e:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
     672:	eb5a 0a01 	adcs.w	sl, sl, r1
     676:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     67a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     67e:	4770      	bx	lr

00000680 <mul_reduce>:
     680:	eb18 0804 	adds.w	r8, r8, r4
     684:	eb59 0905 	adcs.w	r9, r9, r5
     688:	eb5a 0a06 	adcs.w	sl, sl, r6
     68c:	eb5b 0b07 	adcs.w	fp, fp, r7
     690:	f05f 0c00 	movs.w	ip, #0
     694:	f14c 0c00 	adc.w	ip, ip, #0
     698:	eb18 0805 	adds.w	r8, r8, r5
     69c:	eb59 0906 	adcs.w	r9, r9, r6
     6a0:	eb5a 0a07 	adcs.w	sl, sl, r7
     6a4:	eb5b 0b07 	adcs.w	fp, fp, r7
     6a8:	eb50 000c 	adcs.w	r0, r0, ip
     6ac:	f05f 0c00 	movs.w	ip, #0
     6b0:	eb51 010c 	adcs.w	r1, r1, ip
     6b4:	eb52 020c 	adcs.w	r2, r2, ip
     6b8:	4163      	adcs	r3, r4
     6ba:	f14c 0c00 	adc.w	ip, ip, #0
     6be:	ebb8 0807 	subs.w	r8, r8, r7
     6c2:	f179 0900 	sbcs.w	r9, r9, #0
     6c6:	f17a 0a00 	sbcs.w	sl, sl, #0
     6ca:	eb7b 0b04 	sbcs.w	fp, fp, r4
     6ce:	41a8      	sbcs	r0, r5
     6d0:	41b1      	sbcs	r1, r6
     6d2:	41a2      	sbcs	r2, r4
     6d4:	41b3      	sbcs	r3, r6
     6d6:	f16c 0c00 	sbc.w	ip, ip, #0
     6da:	ebbb 0b05 	subs.w	fp, fp, r5
     6de:	41b0      	sbcs	r0, r6
     6e0:	41b9      	sbcs	r1, r7
     6e2:	41aa      	sbcs	r2, r5
     6e4:	41bb      	sbcs	r3, r7
     6e6:	f16c 0c00 	sbc.w	ip, ip, #0
     6ea:	ea6f 74ec 	mvn.w	r4, ip, asr #31
     6ee:	ebb8 0804 	subs.w	r8, r8, r4
     6f2:	eb79 0904 	sbcs.w	r9, r9, r4
     6f6:	eb7a 0a04 	sbcs.w	sl, sl, r4
     6fa:	f17b 0b00 	sbcs.w	fp, fp, #0
     6fe:	f170 0000 	sbcs.w	r0, r0, #0
     702:	f171 0100 	sbcs.w	r1, r1, #0
     706:	eb72 72d4 	sbcs.w	r2, r2, r4, lsr #31
     70a:	41a3      	sbcs	r3, r4
     70c:	f16c 0c00 	sbc.w	ip, ip, #0
     710:	eb18 78ec 	adds.w	r8, r8, ip, asr #31
     714:	eb59 79ec 	adcs.w	r9, r9, ip, asr #31
     718:	eb5a 7aec 	adcs.w	sl, sl, ip, asr #31
     71c:	f15b 0b00 	adcs.w	fp, fp, #0
     720:	f150 0400 	adcs.w	r4, r0, #0
     724:	f151 0500 	adcs.w	r5, r1, #0
     728:	eb52 76dc 	adcs.w	r6, r2, ip, lsr #31
     72c:	eb53 77ec 	adcs.w	r7, r3, ip, asr #31
     730:	f14c 0c00 	adc.w	ip, ip, #0
     734:	eb18 70ec 	adds.w	r0, r8, ip, asr #31
     738:	eb59 71ec 	adcs.w	r1, r9, ip, asr #31
     73c:	eb5a 72ec 	adcs.w	r2, sl, ip, asr #31
     740:	f15b 0300 	adcs.w	r3, fp, #0
     744:	f154 0400 	adcs.w	r4, r4, #0
     748:	f155 0500 	adcs.w	r5, r5, #0
     74c:	eb56 76dc 	adcs.w	r6, r6, ip, lsr #31
     750:	eb57 77ec 	adcs.w	r7, r7, ip, asr #31
     754:	4770      	bx	lr
     756:	bf00      	nop

00000758 <ocrypto_mod_p256_mul>:
     758:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     75c:	b087      	sub	sp, #28
     75e:	f7ff fd9f 	bl	2a0 <ocrypto_mul256_noframe>
     762:	f8dd 8010 	ldr.w	r8, [sp, #16]
     766:	f8dd 9014 	ldr.w	r9, [sp, #20]
     76a:	f8dd a018 	ldr.w	sl, [sp, #24]
     76e:	f7ff ff87 	bl	680 <mul_reduce>
     772:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
     776:	f7ff ff83 	bl	680 <mul_reduce>
     77a:	b003      	add	sp, #12
     77c:	f85d 8b04 	ldr.w	r8, [sp], #4
     780:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000788 <ocrypto_mod_p256_sqr>:
     788:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     78c:	b087      	sub	sp, #28
     78e:	f7ff fe43 	bl	418 <ocrypto_sqr256_noframe>
     792:	f8dd 8010 	ldr.w	r8, [sp, #16]
     796:	f8dd 9014 	ldr.w	r9, [sp, #20]
     79a:	f8dd a018 	ldr.w	sl, [sp, #24]
     79e:	f7ff ff6f 	bl	680 <mul_reduce>
     7a2:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
     7a6:	f7ff ff6b 	bl	680 <mul_reduce>
     7aa:	b003      	add	sp, #12
     7ac:	f85d 8b04 	ldr.w	r8, [sp], #4
     7b0:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     7b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     7b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
     7ba:	4c14      	ldr	r4, [pc, #80]	; (80c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xc>)
     7bc:	7a20      	ldrb	r0, [r4, #8]
     7be:	f88d 0001 	strb.w	r0, [sp, #1]
     7c2:	79e0      	ldrb	r0, [r4, #7]
     7c4:	f88d 0000 	strb.w	r0, [sp]
     7c8:	79a0      	ldrb	r0, [r4, #6]
     7ca:	f8ad 0004 	strh.w	r0, [sp, #4]
     7ce:	7960      	ldrb	r0, [r4, #5]
     7d0:	f8ad 0002 	strh.w	r0, [sp, #2]
     7d4:	4668      	mov	r0, sp
     7d6:	f006 fcc5 	bl	7164 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
     7da:	b108      	cbz	r0, 7e0 <ocrypto_mod_p256_sqr+0x58>
     7dc:	21a7      	movs	r1, #167	; 0xa7
     7de:	e010      	b.n	802 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2>
     7e0:	68e0      	ldr	r0, [r4, #12]
     7e2:	9002      	str	r0, [sp, #8]
     7e4:	a802      	add	r0, sp, #8
     7e6:	f006 fcd3 	bl	7190 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
     7ea:	b108      	cbz	r0, 7f0 <ocrypto_mod_p256_sqr+0x68>
     7ec:	21ab      	movs	r1, #171	; 0xab
     7ee:	e008      	b.n	802 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2>
     7f0:	4807      	ldr	r0, [pc, #28]	; (810 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x10>)
     7f2:	6800      	ldr	r0, [r0, #0]
     7f4:	9003      	str	r0, [sp, #12]
     7f6:	a803      	add	r0, sp, #12
     7f8:	f00f f936 	bl	fa68 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
     7fc:	2800      	cmp	r0, #0
     7fe:	d003      	beq.n	808 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x8>
     800:	21af      	movs	r1, #175	; 0xaf
     802:	2003      	movs	r0, #3
     804:	f000 f93c 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     808:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
     80a:	0000      	.short	0x0000
     80c:	20000ec8 	.word	0x20000ec8
     810:	00000b6c 	.word	0x00000b6c
     814:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     818:	460d      	mov	r5, r1
     81a:	4681      	mov	r9, r0
     81c:	f04f 0100 	mov.w	r1, #0
     820:	f100 0003 	add.w	r0, r0, #3
     824:	9100      	str	r1, [sp, #0]
     826:	f020 0003 	bic.w	r0, r0, #3
     82a:	7829      	ldrb	r1, [r5, #0]
     82c:	0014      	movs	r4, r2
     82e:	4606      	mov	r6, r0
     830:	f88d 1001 	strb.w	r1, [sp, #1]
     834:	d000      	beq.n	838 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x38>
     836:	2000      	movs	r0, #0
     838:	4669      	mov	r1, sp
     83a:	f000 fb01 	bl	e40 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
     83e:	eb06 0a00 	add.w	sl, r6, r0
     842:	7828      	ldrb	r0, [r5, #0]
     844:	7869      	ldrb	r1, [r5, #1]
     846:	2700      	movs	r7, #0
     848:	4408      	add	r0, r1
     84a:	f000 08ff 	and.w	r8, r0, #255	; 0xff
     84e:	463e      	mov	r6, r7
     850:	e008      	b.n	864 <__z_interrupt_stack_SIZEOF+0x24>
     852:	7a2b      	ldrb	r3, [r5, #8]
     854:	79ea      	ldrb	r2, [r5, #7]
     856:	79a9      	ldrb	r1, [r5, #6]
     858:	7968      	ldrb	r0, [r5, #5]
     85a:	f00c ffc0 	bl	d7de <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
     85e:	1c76      	adds	r6, r6, #1
     860:	4407      	add	r7, r0
     862:	b2f6      	uxtb	r6, r6
     864:	4546      	cmp	r6, r8
     866:	d3f4      	bcc.n	852 <__z_interrupt_stack_SIZEOF+0x12>
     868:	f10a 0003 	add.w	r0, sl, #3
     86c:	f020 0003 	bic.w	r0, r0, #3
     870:	4606      	mov	r6, r0
     872:	b104      	cbz	r4, 876 <__z_interrupt_stack_SIZEOF+0x36>
     874:	2000      	movs	r0, #0
     876:	463a      	mov	r2, r7
     878:	4641      	mov	r1, r8
     87a:	f000 fc87 	bl	118c <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
     87e:	490b      	ldr	r1, [pc, #44]	; (8ac <__z_interrupt_stack_SIZEOF+0x6c>)
     880:	4430      	add	r0, r6
     882:	78c9      	ldrb	r1, [r1, #3]
     884:	b159      	cbz	r1, 89e <__z_interrupt_stack_SIZEOF+0x5e>
     886:	7c29      	ldrb	r1, [r5, #16]
     888:	b149      	cbz	r1, 89e <__z_interrupt_stack_SIZEOF+0x5e>
     88a:	2225      	movs	r2, #37	; 0x25
     88c:	1cc0      	adds	r0, r0, #3
     88e:	f020 0003 	bic.w	r0, r0, #3
     892:	4605      	mov	r5, r0
     894:	b104      	cbz	r4, 898 <__z_interrupt_stack_SIZEOF+0x58>
     896:	2000      	movs	r0, #0
     898:	f000 fcf8 	bl	128c <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>
     89c:	4428      	add	r0, r5
     89e:	1dc0      	adds	r0, r0, #7
     8a0:	f020 0007 	bic.w	r0, r0, #7
     8a4:	eba0 0009 	sub.w	r0, r0, r9
     8a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     8ac:	20000028 	.word	0x20000028

000008b0 <sdc_build_revision_get>:
     8b0:	b510      	push	{r4, lr}
     8b2:	b128      	cbz	r0, 8c0 <sdc_build_revision_get+0x10>
     8b4:	2214      	movs	r2, #20
     8b6:	4904      	ldr	r1, [pc, #16]	; (8c8 <sdc_build_revision_get+0x18>)
     8b8:	f00f fef9 	bl	106ae <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     8bc:	2000      	movs	r0, #0
     8be:	bd10      	pop	{r4, pc}
     8c0:	f06f 0015 	mvn.w	r0, #21
     8c4:	bd10      	pop	{r4, pc}
     8c6:	0000      	.short	0x0000
     8c8:	00000b90 	.word	0x00000b90

000008cc <sdc_cfg_set>:
     8cc:	b570      	push	{r4, r5, r6, lr}
     8ce:	f06f 032c 	mvn.w	r3, #44	; 0x2c
     8d2:	b988      	cbnz	r0, 8f8 <sdc_cfg_set+0x2c>
     8d4:	4c1f      	ldr	r4, [pc, #124]	; (954 <sdc_cfg_set+0x88>)
     8d6:	7860      	ldrb	r0, [r4, #1]
     8d8:	b108      	cbz	r0, 8de <sdc_cfg_set+0x12>
     8da:	1198      	asrs	r0, r3, #6
     8dc:	bd70      	pop	{r4, r5, r6, pc}
     8de:	b301      	cbz	r1, 922 <sdc_cfg_set+0x56>
     8e0:	f06f 0515 	mvn.w	r5, #21
     8e4:	b31a      	cbz	r2, 92e <sdc_cfg_set+0x62>
     8e6:	481c      	ldr	r0, [pc, #112]	; (958 <sdc_cfg_set+0x8c>)
     8e8:	2901      	cmp	r1, #1
     8ea:	d007      	beq.n	8fc <sdc_cfg_set+0x30>
     8ec:	2903      	cmp	r1, #3
     8ee:	d008      	beq.n	902 <sdc_cfg_set+0x36>
     8f0:	2904      	cmp	r1, #4
     8f2:	d014      	beq.n	91e <sdc_cfg_set+0x52>
     8f4:	2906      	cmp	r1, #6
     8f6:	d015      	beq.n	924 <sdc_cfg_set+0x58>
     8f8:	4618      	mov	r0, r3
     8fa:	bd70      	pop	{r4, r5, r6, pc}
     8fc:	7811      	ldrb	r1, [r2, #0]
     8fe:	7001      	strb	r1, [r0, #0]
     900:	e019      	b.n	936 <sdc_cfg_set+0x6a>
     902:	7891      	ldrb	r1, [r2, #2]
     904:	b199      	cbz	r1, 92e <sdc_cfg_set+0x62>
     906:	78d1      	ldrb	r1, [r2, #3]
     908:	b189      	cbz	r1, 92e <sdc_cfg_set+0x62>
     90a:	7811      	ldrb	r1, [r2, #0]
     90c:	291b      	cmp	r1, #27
     90e:	d30e      	bcc.n	92e <sdc_cfg_set+0x62>
     910:	7851      	ldrb	r1, [r2, #1]
     912:	291b      	cmp	r1, #27
     914:	d30b      	bcc.n	92e <sdc_cfg_set+0x62>
     916:	6811      	ldr	r1, [r2, #0]
     918:	f8c0 1005 	str.w	r1, [r0, #5]
     91c:	e00b      	b.n	936 <sdc_cfg_set+0x6a>
     91e:	6811      	ldr	r1, [r2, #0]
     920:	60c1      	str	r1, [r0, #12]
     922:	e008      	b.n	936 <sdc_cfg_set+0x6a>
     924:	78e1      	ldrb	r1, [r4, #3]
     926:	b121      	cbz	r1, 932 <sdc_cfg_set+0x66>
     928:	7811      	ldrb	r1, [r2, #0]
     92a:	2902      	cmp	r1, #2
     92c:	d201      	bcs.n	932 <sdc_cfg_set+0x66>
     92e:	4628      	mov	r0, r5
     930:	bd70      	pop	{r4, r5, r6, pc}
     932:	7811      	ldrb	r1, [r2, #0]
     934:	7401      	strb	r1, [r0, #16]
     936:	2201      	movs	r2, #1
     938:	4907      	ldr	r1, [pc, #28]	; (958 <sdc_cfg_set+0x8c>)
     93a:	2000      	movs	r0, #0
     93c:	f7ff ff6a 	bl	814 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x14>
     940:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
     944:	db02      	blt.n	94c <sdc_cfg_set+0x80>
     946:	f06f 000b 	mvn.w	r0, #11
     94a:	bd70      	pop	{r4, r5, r6, pc}
     94c:	2101      	movs	r1, #1
     94e:	70a1      	strb	r1, [r4, #2]
     950:	bd70      	pop	{r4, r5, r6, pc}
     952:	0000      	.short	0x0000
     954:	20000028 	.word	0x20000028
     958:	20000ec8 	.word	0x20000ec8

0000095c <sdc_default_tx_power_set>:
     95c:	4905      	ldr	r1, [pc, #20]	; (974 <sdc_default_tx_power_set+0x18>)
     95e:	b510      	push	{r4, lr}
     960:	7849      	ldrb	r1, [r1, #1]
     962:	b111      	cbz	r1, 96a <sdc_default_tx_power_set+0xe>
     964:	f04f 30ff 	mov.w	r0, #4294967295
     968:	bd10      	pop	{r4, pc}
     96a:	f006 fc63 	bl	7234 <sym_MCY7RRK5E6T6JDGA7HZL7CCKF7DGHVCG4MOX6PI>
     96e:	2000      	movs	r0, #0
     970:	bd10      	pop	{r4, pc}
     972:	0000      	.short	0x0000
     974:	20000028 	.word	0x20000028

00000978 <sdc_disable>:
     978:	b510      	push	{r4, lr}
     97a:	4c07      	ldr	r4, [pc, #28]	; (998 <sdc_disable+0x20>)
     97c:	7860      	ldrb	r0, [r4, #1]
     97e:	b120      	cbz	r0, 98a <sdc_disable+0x12>
     980:	f006 ff0a 	bl	7798 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
     984:	7820      	ldrb	r0, [r4, #0]
     986:	f00b fdf7 	bl	c578 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
     98a:	f000 fccb 	bl	1324 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>
     98e:	f000 fda3 	bl	14d8 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>
     992:	2000      	movs	r0, #0
     994:	7060      	strb	r0, [r4, #1]
     996:	bd10      	pop	{r4, pc}
     998:	20000028 	.word	0x20000028

0000099c <sdc_enable>:
     99c:	b570      	push	{r4, r5, r6, lr}
     99e:	460c      	mov	r4, r1
     9a0:	0005      	movs	r5, r0
     9a2:	d002      	beq.n	9aa <sdc_enable+0xe>
     9a4:	b10c      	cbz	r4, 9aa <sdc_enable+0xe>
     9a6:	0760      	lsls	r0, r4, #29
     9a8:	d002      	beq.n	9b0 <sdc_enable+0x14>
     9aa:	f06f 0015 	mvn.w	r0, #21
     9ae:	bd70      	pop	{r4, r5, r6, pc}
     9b0:	f000 f914 	bl	bdc <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
     9b4:	b1a8      	cbz	r0, 9e2 <sdc_enable+0x46>
     9b6:	4628      	mov	r0, r5
     9b8:	f00b fda4 	bl	c504 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
     9bc:	4d0a      	ldr	r5, [pc, #40]	; (9e8 <sdc_enable+0x4c>)
     9be:	2200      	movs	r2, #0
     9c0:	490a      	ldr	r1, [pc, #40]	; (9ec <sdc_enable+0x50>)
     9c2:	7028      	strb	r0, [r5, #0]
     9c4:	4620      	mov	r0, r4
     9c6:	f7ff ff25 	bl	814 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x14>
     9ca:	f00f fc40 	bl	1024e <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
     9ce:	2100      	movs	r1, #0
     9d0:	7828      	ldrb	r0, [r5, #0]
     9d2:	f006 fec9 	bl	7768 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
     9d6:	f7ff feef 	bl	7b8 <ocrypto_mod_p256_sqr+0x30>
     9da:	2001      	movs	r0, #1
     9dc:	7068      	strb	r0, [r5, #1]
     9de:	2000      	movs	r0, #0
     9e0:	bd70      	pop	{r4, r5, r6, pc}
     9e2:	f04f 30ff 	mov.w	r0, #4294967295
     9e6:	bd70      	pop	{r4, r5, r6, pc}
     9e8:	20000028 	.word	0x20000028
     9ec:	20000ec8 	.word	0x20000ec8

000009f0 <sdc_init>:
     9f0:	b530      	push	{r4, r5, lr}
     9f2:	b089      	sub	sp, #36	; 0x24
     9f4:	0005      	movs	r5, r0
     9f6:	d00c      	beq.n	a12 <sdc_init+0x22>
     9f8:	f00b fd2a 	bl	c450 <mpsl_is_initialized>
     9fc:	f04f 34ff 	mov.w	r4, #4294967295
     a00:	b120      	cbz	r0, a0c <sdc_init+0x1c>
     a02:	f00b fbdb 	bl	c1bc <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
     a06:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
     a0a:	d905      	bls.n	a18 <sdc_init+0x28>
     a0c:	4620      	mov	r0, r4
     a0e:	b009      	add	sp, #36	; 0x24
     a10:	bd30      	pop	{r4, r5, pc}
     a12:	f06f 0015 	mvn.w	r0, #21
     a16:	e7fa      	b.n	a0e <sdc_init+0x1e>
     a18:	4c14      	ldr	r4, [pc, #80]	; (a6c <sdc_init+0x7c>)
     a1a:	4815      	ldr	r0, [pc, #84]	; (a70 <sdc_init+0x80>)
     a1c:	6065      	str	r5, [r4, #4]
     a1e:	f000 f9f9 	bl	e14 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
     a22:	2000      	movs	r0, #0
     a24:	7060      	strb	r0, [r4, #1]
     a26:	70a0      	strb	r0, [r4, #2]
     a28:	70e0      	strb	r0, [r4, #3]
     a2a:	4601      	mov	r1, r0
     a2c:	2220      	movs	r2, #32
     a2e:	4668      	mov	r0, sp
     a30:	f00f feb7 	bl	107a2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     a34:	2220      	movs	r2, #32
     a36:	490f      	ldr	r1, [pc, #60]	; (a74 <sdc_init+0x84>)
     a38:	4668      	mov	r0, sp
     a3a:	f00f fe38 	bl	106ae <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     a3e:	2220      	movs	r2, #32
     a40:	4669      	mov	r1, sp
     a42:	480d      	ldr	r0, [pc, #52]	; (a78 <sdc_init+0x88>)
     a44:	f00f fe33 	bl	106ae <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     a48:	f3ef 8410 	mrs	r4, PRIMASK
     a4c:	b672      	cpsid	i
     a4e:	f000 fc77 	bl	1340 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
     a52:	480a      	ldr	r0, [pc, #40]	; (a7c <sdc_init+0x8c>)
     a54:	f000 fd4c 	bl	14f0 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
     a58:	b118      	cbz	r0, a62 <sdc_init+0x72>
     a5a:	21c5      	movs	r1, #197	; 0xc5
     a5c:	2003      	movs	r0, #3
     a5e:	f000 f80f 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     a62:	b904      	cbnz	r4, a66 <sdc_init+0x76>
     a64:	b662      	cpsie	i
     a66:	2000      	movs	r0, #0
     a68:	e7d1      	b.n	a0e <sdc_init+0x1e>
     a6a:	0000      	.short	0x0000
     a6c:	20000028 	.word	0x20000028
     a70:	000007b9 	.word	0x000007b9
     a74:	00000b70 	.word	0x00000b70
     a78:	20000ec8 	.word	0x20000ec8
     a7c:	00000c09 	.word	0x00000c09

00000a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
     a80:	b50e      	push	{r1, r2, r3, lr}
     a82:	b672      	cpsid	i
     a84:	4a15      	ldr	r2, [pc, #84]	; (adc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
     a86:	6855      	ldr	r5, [r2, #4]
     a88:	b1dd      	cbz	r5, ac2 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x42>
     a8a:	2200      	movs	r2, #0
     a8c:	4603      	mov	r3, r0
     a8e:	466e      	mov	r6, sp
     a90:	240a      	movs	r4, #10
     a92:	e003      	b.n	a9c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
     a94:	fbb0 f0f4 	udiv	r0, r0, r4
     a98:	1c52      	adds	r2, r2, #1
     a9a:	b2d2      	uxtb	r2, r2
     a9c:	2800      	cmp	r0, #0
     a9e:	d1f9      	bne.n	a94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
     aa0:	54b0      	strb	r0, [r6, r2]
     aa2:	e00a      	b.n	aba <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x3a>
     aa4:	b2d8      	uxtb	r0, r3
     aa6:	fbb0 f7f4 	udiv	r7, r0, r4
     aaa:	fbb3 f3f4 	udiv	r3, r3, r4
     aae:	fb04 0017 	mls	r0, r4, r7, r0
     ab2:	1e52      	subs	r2, r2, #1
     ab4:	b2d2      	uxtb	r2, r2
     ab6:	3030      	adds	r0, #48	; 0x30
     ab8:	54b0      	strb	r0, [r6, r2]
     aba:	2a00      	cmp	r2, #0
     abc:	d1f2      	bne.n	aa4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
     abe:	4630      	mov	r0, r6
     ac0:	47a8      	blx	r5
     ac2:	f3bf 8f4f 	dsb	sy
     ac6:	4806      	ldr	r0, [pc, #24]	; (ae0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
     ac8:	6801      	ldr	r1, [r0, #0]
     aca:	4a06      	ldr	r2, [pc, #24]	; (ae4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
     acc:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
     ad0:	4311      	orrs	r1, r2
     ad2:	6001      	str	r1, [r0, #0]
     ad4:	f3bf 8f4f 	dsb	sy
     ad8:	bf00      	nop
     ada:	e7fd      	b.n	ad8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x58>
     adc:	20000028 	.word	0x20000028
     ae0:	e000ed0c 	.word	0xe000ed0c
     ae4:	05fa0004 	.word	0x05fa0004

00000ae8 <sdc_support_central>:
     ae8:	b510      	push	{r4, lr}
     aea:	4c07      	ldr	r4, [pc, #28]	; (b08 <sdc_support_central+0x20>)
     aec:	78a0      	ldrb	r0, [r4, #2]
     aee:	7861      	ldrb	r1, [r4, #1]
     af0:	4308      	orrs	r0, r1
     af2:	d002      	beq.n	afa <sdc_support_central+0x12>
     af4:	f04f 30ff 	mov.w	r0, #4294967295
     af8:	bd10      	pop	{r4, pc}
     afa:	f006 fe5d 	bl	77b8 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI>
     afe:	2001      	movs	r0, #1
     b00:	70e0      	strb	r0, [r4, #3]
     b02:	2000      	movs	r0, #0
     b04:	bd10      	pop	{r4, pc}
     b06:	0000      	.short	0x0000
     b08:	20000028 	.word	0x20000028

00000b0c <sdc_support_dle_central>:
     b0c:	4806      	ldr	r0, [pc, #24]	; (b28 <sdc_support_dle_central+0x1c>)
     b0e:	b510      	push	{r4, lr}
     b10:	7881      	ldrb	r1, [r0, #2]
     b12:	7840      	ldrb	r0, [r0, #1]
     b14:	4301      	orrs	r1, r0
     b16:	d002      	beq.n	b1e <sdc_support_dle_central+0x12>
     b18:	f04f 30ff 	mov.w	r0, #4294967295
     b1c:	bd10      	pop	{r4, pc}
     b1e:	f006 fbcd 	bl	72bc <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ>
     b22:	2000      	movs	r0, #0
     b24:	bd10      	pop	{r4, pc}
     b26:	0000      	.short	0x0000
     b28:	20000028 	.word	0x20000028

00000b2c <sdc_support_le_2m_phy>:
     b2c:	4806      	ldr	r0, [pc, #24]	; (b48 <sdc_support_le_2m_phy+0x1c>)
     b2e:	b510      	push	{r4, lr}
     b30:	7881      	ldrb	r1, [r0, #2]
     b32:	7840      	ldrb	r0, [r0, #1]
     b34:	4301      	orrs	r1, r0
     b36:	d002      	beq.n	b3e <sdc_support_le_2m_phy+0x12>
     b38:	f04f 30ff 	mov.w	r0, #4294967295
     b3c:	bd10      	pop	{r4, pc}
     b3e:	f00f f877 	bl	fc30 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
     b42:	2000      	movs	r0, #0
     b44:	bd10      	pop	{r4, pc}
     b46:	0000      	.short	0x0000
     b48:	20000028 	.word	0x20000028

00000b4c <sdc_support_phy_update_central>:
     b4c:	4806      	ldr	r0, [pc, #24]	; (b68 <sdc_support_phy_update_central+0x1c>)
     b4e:	b510      	push	{r4, lr}
     b50:	7881      	ldrb	r1, [r0, #2]
     b52:	7840      	ldrb	r0, [r0, #1]
     b54:	4301      	orrs	r1, r0
     b56:	d002      	beq.n	b5e <sdc_support_phy_update_central+0x12>
     b58:	f04f 30ff 	mov.w	r0, #4294967295
     b5c:	bd10      	pop	{r4, pc}
     b5e:	f00f f88b 	bl	fc78 <sym_7ZWRNRN6OJ5G7BJWG232R5QOQBW4NK4HJWYOG5A>
     b62:	2000      	movs	r0, #0
     b64:	bd10      	pop	{r4, pc}
     b66:	0000      	.short	0x0000
     b68:	20000028 	.word	0x20000028
     b6c:	00000001 	.word	0x00000001
     b70:	00000001 	.word	0x00000001
     b74:	031b1b00 	.word	0x031b1b00
     b78:	00000002 	.word	0x00000002
     b7c:	00001d4c 	.word	0x00001d4c
     b80:	00000003 	.word	0x00000003
	...
     b90:	2f2d0cd8 	.word	0x2f2d0cd8
     b94:	5ce2ae36 	.word	0x5ce2ae36
     b98:	4c802680 	.word	0x4c802680
     b9c:	53164d3f 	.word	0x53164d3f
     ba0:	73c79650 	.word	0x73c79650

00000ba4 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
     ba4:	4a05      	ldr	r2, [pc, #20]	; (bbc <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
     ba6:	b510      	push	{r4, lr}
     ba8:	6852      	ldr	r2, [r2, #4]
     baa:	b112      	cbz	r2, bb2 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
     bac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     bb0:	4710      	bx	r2
     bb2:	2192      	movs	r1, #146	; 0x92
     bb4:	2004      	movs	r0, #4
     bb6:	f7ff ff63 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     bba:	0000      	.short	0x0000
     bbc:	20000ee8 	.word	0x20000ee8

00000bc0 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
     bc0:	4a05      	ldr	r2, [pc, #20]	; (bd8 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
     bc2:	b510      	push	{r4, lr}
     bc4:	6892      	ldr	r2, [r2, #8]
     bc6:	b112      	cbz	r2, bce <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
     bc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     bcc:	4710      	bx	r2
     bce:	2198      	movs	r1, #152	; 0x98
     bd0:	2004      	movs	r0, #4
     bd2:	f7ff ff55 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     bd6:	0000      	.short	0x0000
     bd8:	20000ee8 	.word	0x20000ee8

00000bdc <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
     bdc:	4805      	ldr	r0, [pc, #20]	; (bf4 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
     bde:	6801      	ldr	r1, [r0, #0]
     be0:	b129      	cbz	r1, bee <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
     be2:	6841      	ldr	r1, [r0, #4]
     be4:	b119      	cbz	r1, bee <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
     be6:	6880      	ldr	r0, [r0, #8]
     be8:	b108      	cbz	r0, bee <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
     bea:	2001      	movs	r0, #1
     bec:	4770      	bx	lr
     bee:	2000      	movs	r0, #0
     bf0:	4770      	bx	lr
     bf2:	0000      	.short	0x0000
     bf4:	20000ee8 	.word	0x20000ee8

00000bf8 <sdc_rand_source_register>:
     bf8:	4902      	ldr	r1, [pc, #8]	; (c04 <sdc_rand_source_register+0xc>)
     bfa:	c80d      	ldmia	r0, {r0, r2, r3}
     bfc:	e881 000d 	stmia.w	r1, {r0, r2, r3}
     c00:	2000      	movs	r0, #0
     c02:	4770      	bx	lr
     c04:	20000ee8 	.word	0x20000ee8

00000c08 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
     c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     c0a:	4c12      	ldr	r4, [pc, #72]	; (c54 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
     c0c:	2600      	movs	r6, #0
     c0e:	6825      	ldr	r5, [r4, #0]
     c10:	e011      	b.n	c36 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
     c12:	9800      	ldr	r0, [sp, #0]
     c14:	2802      	cmp	r0, #2
     c16:	d002      	beq.n	c1e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
     c18:	2803      	cmp	r0, #3
     c1a:	d10c      	bne.n	c36 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
     c1c:	e006      	b.n	c2c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
     c1e:	6820      	ldr	r0, [r4, #0]
     c20:	b110      	cbz	r0, c28 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
     c22:	2000      	movs	r0, #0
     c24:	6026      	str	r6, [r4, #0]
     c26:	e005      	b.n	c34 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
     c28:	2128      	movs	r1, #40	; 0x28
     c2a:	e00c      	b.n	c46 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
     c2c:	6820      	ldr	r0, [r4, #0]
     c2e:	b168      	cbz	r0, c4c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
     c30:	2001      	movs	r0, #1
     c32:	6026      	str	r6, [r4, #0]
     c34:	47a8      	blx	r5
     c36:	4668      	mov	r0, sp
     c38:	f000 fc20 	bl	147c <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
     c3c:	2800      	cmp	r0, #0
     c3e:	d0e8      	beq.n	c12 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
     c40:	2805      	cmp	r0, #5
     c42:	d005      	beq.n	c50 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
     c44:	2135      	movs	r1, #53	; 0x35
     c46:	2004      	movs	r0, #4
     c48:	f7ff ff1a 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     c4c:	212d      	movs	r1, #45	; 0x2d
     c4e:	e7fa      	b.n	c46 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
     c50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     c52:	0000      	.short	0x0000
     c54:	20000030 	.word	0x20000030

00000c58 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>:
     c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     c5c:	4605      	mov	r5, r0
     c5e:	4922      	ldr	r1, [pc, #136]	; (ce8 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x90>)
     c60:	1d00      	adds	r0, r0, #4
     c62:	f501 7784 	add.w	r7, r1, #264	; 0x108
     c66:	2600      	movs	r6, #0
     c68:	6008      	str	r0, [r1, #0]
     c6a:	7838      	ldrb	r0, [r7, #0]
     c6c:	b150      	cbz	r0, c84 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x2c>
     c6e:	78ba      	ldrb	r2, [r7, #2]
     c70:	463c      	mov	r4, r7
     c72:	1c79      	adds	r1, r7, #1
     c74:	4628      	mov	r0, r5
     c76:	1c92      	adds	r2, r2, #2
     c78:	f00f fd19 	bl	106ae <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     c7c:	7026      	strb	r6, [r4, #0]
     c7e:	2004      	movs	r0, #4
     c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     c84:	4818      	ldr	r0, [pc, #96]	; (ce8 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x90>)
     c86:	f001 fe5b 	bl	2940 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
     c8a:	4604      	mov	r4, r0
     c8c:	2802      	cmp	r0, #2
     c8e:	d004      	beq.n	c9a <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x42>
     c90:	2c04      	cmp	r4, #4
     c92:	d007      	beq.n	ca4 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x4c>
     c94:	2c08      	cmp	r4, #8
     c96:	d020      	beq.n	cda <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x82>
     c98:	e023      	b.n	ce2 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x8a>
     c9a:	4913      	ldr	r1, [pc, #76]	; (ce8 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x90>)
     c9c:	4628      	mov	r0, r5
     c9e:	f00b febe 	bl	ca1e <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
     ca2:	e01e      	b.n	ce2 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x8a>
     ca4:	4910      	ldr	r1, [pc, #64]	; (ce8 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x90>)
     ca6:	4628      	mov	r0, r5
     ca8:	f00b ff1e 	bl	cae8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
     cac:	2800      	cmp	r0, #0
     cae:	d0dc      	beq.n	c6a <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x12>
     cb0:	f895 8000 	ldrb.w	r8, [r5]
     cb4:	f895 9002 	ldrb.w	r9, [r5, #2]
     cb8:	4640      	mov	r0, r8
     cba:	f000 f845 	bl	d48 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
     cbe:	2800      	cmp	r0, #0
     cc0:	d0d3      	beq.n	c6a <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x12>
     cc2:	f1b8 0f3e 	cmp.w	r8, #62	; 0x3e
     cc6:	d10c      	bne.n	ce2 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x8a>
     cc8:	4648      	mov	r0, r9
     cca:	f1b9 0f12 	cmp.w	r9, #18
     cce:	d0cc      	beq.n	c6a <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x12>
     cd0:	f000 f84c 	bl	d6c <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
     cd4:	2800      	cmp	r0, #0
     cd6:	d0c8      	beq.n	c6a <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x12>
     cd8:	e003      	b.n	ce2 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x8a>
     cda:	4903      	ldr	r1, [pc, #12]	; (ce8 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x90>)
     cdc:	4628      	mov	r0, r5
     cde:	f00b fecc 	bl	ca7a <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY>
     ce2:	4620      	mov	r0, r4
     ce4:	e7cc      	b.n	c80 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x28>
     ce6:	0000      	.short	0x0000
     ce8:	20000ef4 	.word	0x20000ef4
     cec:	b570      	push	{r4, r5, r6, lr}
     cee:	780a      	ldrb	r2, [r1, #0]
     cf0:	7082      	strb	r2, [r0, #2]
     cf2:	b33a      	cbz	r2, d44 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xec>
     cf4:	2a01      	cmp	r2, #1
     cf6:	d825      	bhi.n	d44 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xec>
     cf8:	2313      	movs	r3, #19
     cfa:	7003      	strb	r3, [r0, #0]
     cfc:	2300      	movs	r3, #0
     cfe:	e00a      	b.n	d16 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xbe>
     d00:	eb01 0443 	add.w	r4, r1, r3, lsl #1
     d04:	eb00 0543 	add.w	r5, r0, r3, lsl #1
     d08:	78a6      	ldrb	r6, [r4, #2]
     d0a:	70ee      	strb	r6, [r5, #3]
     d0c:	8864      	ldrh	r4, [r4, #2]
     d0e:	0a24      	lsrs	r4, r4, #8
     d10:	1c5b      	adds	r3, r3, #1
     d12:	712c      	strb	r4, [r5, #4]
     d14:	b2db      	uxtb	r3, r3
     d16:	4293      	cmp	r3, r2
     d18:	d3f2      	bcc.n	d00 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa8>
     d1a:	2300      	movs	r3, #0
     d1c:	e00b      	b.n	d36 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xde>
     d1e:	bf00      	nop
     d20:	eb01 0543 	add.w	r5, r1, r3, lsl #1
     d24:	eb00 0443 	add.w	r4, r0, r3, lsl #1
     d28:	792e      	ldrb	r6, [r5, #4]
     d2a:	7166      	strb	r6, [r4, #5]
     d2c:	88ad      	ldrh	r5, [r5, #4]
     d2e:	0a2d      	lsrs	r5, r5, #8
     d30:	1c5b      	adds	r3, r3, #1
     d32:	71a5      	strb	r5, [r4, #6]
     d34:	b2db      	uxtb	r3, r3
     d36:	4293      	cmp	r3, r2
     d38:	d3f2      	bcc.n	d20 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xc8>
     d3a:	2101      	movs	r1, #1
     d3c:	eb01 0082 	add.w	r0, r1, r2, lsl #2
     d40:	b2c0      	uxtb	r0, r0
     d42:	bd70      	pop	{r4, r5, r6, pc}
     d44:	2000      	movs	r0, #0
     d46:	bd70      	pop	{r4, r5, r6, pc}

00000d48 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
     d48:	2840      	cmp	r0, #64	; 0x40
     d4a:	d203      	bcs.n	d54 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0xc>
     d4c:	1e40      	subs	r0, r0, #1
     d4e:	b2c1      	uxtb	r1, r0
     d50:	4805      	ldr	r0, [pc, #20]	; (d68 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
     d52:	e005      	b.n	d60 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x18>
     d54:	28ff      	cmp	r0, #255	; 0xff
     d56:	d005      	beq.n	d64 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1c>
     d58:	3840      	subs	r0, #64	; 0x40
     d5a:	b2c1      	uxtb	r1, r0
     d5c:	4802      	ldr	r0, [pc, #8]	; (d68 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
     d5e:	3008      	adds	r0, #8
     d60:	f00c b938 	b.w	cfd4 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0xba>
     d64:	2001      	movs	r0, #1
     d66:	4770      	bx	lr
     d68:	2000003c 	.word	0x2000003c

00000d6c <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
     d6c:	1e40      	subs	r0, r0, #1
     d6e:	b2c1      	uxtb	r1, r0
     d70:	4801      	ldr	r0, [pc, #4]	; (d78 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0xc>)
     d72:	f00c b92f 	b.w	cfd4 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0xba>
     d76:	0000      	.short	0x0000
     d78:	2000004c 	.word	0x2000004c

00000d7c <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
     d7c:	b510      	push	{r4, lr}
     d7e:	4a07      	ldr	r2, [pc, #28]	; (d9c <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0x20>)
     d80:	6801      	ldr	r1, [r0, #0]
     d82:	4b06      	ldr	r3, [pc, #24]	; (d9c <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0x20>)
     d84:	6191      	str	r1, [r2, #24]
     d86:	6840      	ldr	r0, [r0, #4]
     d88:	61d0      	str	r0, [r2, #28]
     d8a:	681c      	ldr	r4, [r3, #0]
     d8c:	3218      	adds	r2, #24
     d8e:	43a1      	bics	r1, r4
     d90:	6011      	str	r1, [r2, #0]
     d92:	6859      	ldr	r1, [r3, #4]
     d94:	4388      	bics	r0, r1
     d96:	6050      	str	r0, [r2, #4]
     d98:	bd10      	pop	{r4, pc}
     d9a:	0000      	.short	0x0000
     d9c:	20000034 	.word	0x20000034

00000da0 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
     da0:	4a06      	ldr	r2, [pc, #24]	; (dbc <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x1c>)
     da2:	6801      	ldr	r1, [r0, #0]
     da4:	6091      	str	r1, [r2, #8]
     da6:	6840      	ldr	r0, [r0, #4]
     da8:	60d0      	str	r0, [r2, #12]
     daa:	3208      	adds	r2, #8
     dac:	f441 218c 	orr.w	r1, r1, #286720	; 0x46000
     db0:	6011      	str	r1, [r2, #0]
     db2:	4903      	ldr	r1, [pc, #12]	; (dc0 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x20>)
     db4:	4308      	orrs	r0, r1
     db6:	6050      	str	r0, [r2, #4]
     db8:	4770      	bx	lr
     dba:	0000      	.short	0x0000
     dbc:	20000034 	.word	0x20000034
     dc0:	024007f8 	.word	0x024007f8

00000dc4 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
     dc4:	4902      	ldr	r1, [pc, #8]	; (dd0 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0xc>)
     dc6:	6802      	ldr	r2, [r0, #0]
     dc8:	610a      	str	r2, [r1, #16]
     dca:	6840      	ldr	r0, [r0, #4]
     dcc:	6148      	str	r0, [r1, #20]
     dce:	4770      	bx	lr
     dd0:	20000034 	.word	0x20000034

00000dd4 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
     dd4:	4807      	ldr	r0, [pc, #28]	; (df4 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x20>)
     dd6:	f04f 31ff 	mov.w	r1, #4294967295
     dda:	2200      	movs	r2, #0
     ddc:	6001      	str	r1, [r0, #0]
     dde:	0cc9      	lsrs	r1, r1, #19
     de0:	6041      	str	r1, [r0, #4]
     de2:	f100 0108 	add.w	r1, r0, #8
     de6:	201f      	movs	r0, #31
     de8:	600a      	str	r2, [r1, #0]
     dea:	604a      	str	r2, [r1, #4]
     dec:	3108      	adds	r1, #8
     dee:	e9c1 0200 	strd	r0, r2, [r1]
     df2:	4770      	bx	lr
     df4:	2000003c 	.word	0x2000003c

00000df8 <sdc_hci_cmd_cb_reset>:
     df8:	b510      	push	{r4, lr}
     dfa:	f7ff ffeb 	bl	dd4 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
     dfe:	f00e fe90 	bl	fb22 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
     e02:	4604      	mov	r4, r0
     e04:	4802      	ldr	r0, [pc, #8]	; (e10 <sdc_hci_cmd_cb_reset+0x18>)
     e06:	6800      	ldr	r0, [r0, #0]
     e08:	b100      	cbz	r0, e0c <sdc_hci_cmd_cb_reset+0x14>
     e0a:	4780      	blx	r0
     e0c:	4620      	mov	r0, r4
     e0e:	bd10      	pop	{r4, pc}
     e10:	20000054 	.word	0x20000054

00000e14 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
     e14:	4901      	ldr	r1, [pc, #4]	; (e1c <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
     e16:	6008      	str	r0, [r1, #0]
     e18:	4770      	bx	lr
     e1a:	0000      	.short	0x0000
     e1c:	20000054 	.word	0x20000054

00000e20 <sdc_hci_cmd_vs_zephyr_read_version_info>:
     e20:	2102      	movs	r1, #2
     e22:	8001      	strh	r1, [r0, #0]
     e24:	8041      	strh	r1, [r0, #2]
     e26:	2100      	movs	r1, #0
     e28:	7101      	strb	r1, [r0, #4]
     e2a:	21d8      	movs	r1, #216	; 0xd8
     e2c:	7141      	strb	r1, [r0, #5]
     e2e:	f642 510c 	movw	r1, #11532	; 0x2d0c
     e32:	80c1      	strh	r1, [r0, #6]
     e34:	4901      	ldr	r1, [pc, #4]	; (e3c <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
     e36:	6081      	str	r1, [r0, #8]
     e38:	2000      	movs	r0, #0
     e3a:	4770      	bx	lr
     e3c:	e2ae362f 	.word	0xe2ae362f

00000e40 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
     e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     e42:	4605      	mov	r5, r0
     e44:	7808      	ldrb	r0, [r1, #0]
     e46:	784a      	ldrb	r2, [r1, #1]
     e48:	4290      	cmp	r0, r2
     e4a:	d902      	bls.n	e52 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x12>
     e4c:	f240 11b1 	movw	r1, #433	; 0x1b1
     e50:	e007      	b.n	e62 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x22>
     e52:	9500      	str	r5, [sp, #0]
     e54:	b145      	cbz	r5, e68 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x28>
     e56:	2600      	movs	r6, #0
     e58:	784c      	ldrb	r4, [r1, #1]
     e5a:	07a8      	lsls	r0, r5, #30
     e5c:	d006      	beq.n	e6c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2c>
     e5e:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
     e62:	2017      	movs	r0, #23
     e64:	f7ff fe0c 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     e68:	2601      	movs	r6, #1
     e6a:	e7f5      	b.n	e58 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x18>
     e6c:	4f12      	ldr	r7, [pc, #72]	; (eb8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x78>)
     e6e:	4631      	mov	r1, r6
     e70:	4668      	mov	r0, sp
     e72:	703c      	strb	r4, [r7, #0]
     e74:	f000 f8ca 	bl	100c <CONFIG_FPROTECT_BLOCK_SIZE+0xc>
     e78:	2000      	movs	r0, #0
     e7a:	4603      	mov	r3, r0
     e7c:	9900      	ldr	r1, [sp, #0]
     e7e:	1cc9      	adds	r1, r1, #3
     e80:	f021 0103 	bic.w	r1, r1, #3
     e84:	9100      	str	r1, [sp, #0]
     e86:	b96e      	cbnz	r6, ea4 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x64>
     e88:	eb07 0280 	add.w	r2, r7, r0, lsl #2
     e8c:	6091      	str	r1, [r2, #8]
     e8e:	2100      	movs	r1, #0
     e90:	e006      	b.n	ea0 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x60>
     e92:	bf00      	nop
     e94:	f8d2 c008 	ldr.w	ip, [r2, #8]
     e98:	f84c 3021 	str.w	r3, [ip, r1, lsl #2]
     e9c:	1c49      	adds	r1, r1, #1
     e9e:	b2c9      	uxtb	r1, r1
     ea0:	42a1      	cmp	r1, r4
     ea2:	d3f7      	bcc.n	e94 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x54>
     ea4:	9900      	ldr	r1, [sp, #0]
     ea6:	1c40      	adds	r0, r0, #1
     ea8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
     eac:	9100      	str	r1, [sp, #0]
     eae:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
     eb2:	d0e3      	beq.n	e7c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x3c>
     eb4:	1b48      	subs	r0, r1, r5
     eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     eb8:	20001100 	.word	0x20001100

00000ebc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
     ebc:	b570      	push	{r4, r5, r6, lr}
     ebe:	4604      	mov	r4, r0
     ec0:	7985      	ldrb	r5, [r0, #6]
     ec2:	f000 f8df 	bl	1084 <CONFIG_FPROTECT_BLOCK_SIZE+0x84>
     ec6:	4a0c      	ldr	r2, [pc, #48]	; (ef8 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3c>)
     ec8:	79e1      	ldrb	r1, [r4, #7]
     eca:	eb02 0285 	add.w	r2, r2, r5, lsl #2
     ece:	e00e      	b.n	eee <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x32>
     ed0:	6893      	ldr	r3, [r2, #8]
     ed2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
     ed6:	b143      	cbz	r3, eea <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x2e>
     ed8:	1c48      	adds	r0, r1, #1
     eda:	71e0      	strb	r0, [r4, #7]
     edc:	80a1      	strh	r1, [r4, #4]
     ede:	6890      	ldr	r0, [r2, #8]
     ee0:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
     ee4:	6020      	str	r0, [r4, #0]
     ee6:	2000      	movs	r0, #0
     ee8:	bd70      	pop	{r4, r5, r6, pc}
     eea:	1c49      	adds	r1, r1, #1
     eec:	b2c9      	uxtb	r1, r1
     eee:	4281      	cmp	r1, r0
     ef0:	d3ee      	bcc.n	ed0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x14>
     ef2:	71e1      	strb	r1, [r4, #7]
     ef4:	2005      	movs	r0, #5
     ef6:	bd70      	pop	{r4, r5, r6, pc}
     ef8:	20001100 	.word	0x20001100

00000efc <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
     efc:	b4f0      	push	{r4, r5, r6, r7}
     efe:	b941      	cbnz	r1, f12 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x16>
     f00:	4a10      	ldr	r2, [pc, #64]	; (f44 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x48>)
     f02:	2500      	movs	r5, #0
     f04:	462b      	mov	r3, r5
     f06:	f64f 74ff 	movw	r4, #65535	; 0xffff
     f0a:	eb02 0681 	add.w	r6, r2, r1, lsl #2
     f0e:	5c57      	ldrb	r7, [r2, r1]
     f10:	e00d      	b.n	f2e <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x32>
     f12:	bcf0      	pop	{r4, r5, r6, r7}
     f14:	2000      	movs	r0, #0
     f16:	4770      	bx	lr
     f18:	195a      	adds	r2, r3, r5
     f1a:	f8d6 c008 	ldr.w	ip, [r6, #8]
     f1e:	b292      	uxth	r2, r2
     f20:	f85c c022 	ldr.w	ip, [ip, r2, lsl #2]
     f24:	f1bc 0f00 	cmp.w	ip, #0
     f28:	d004      	beq.n	f34 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x38>
     f2a:	1c5b      	adds	r3, r3, #1
     f2c:	b29b      	uxth	r3, r3
     f2e:	429f      	cmp	r7, r3
     f30:	d8f2      	bhi.n	f18 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x1c>
     f32:	4622      	mov	r2, r4
     f34:	8002      	strh	r2, [r0, #0]
     f36:	4610      	mov	r0, r2
     f38:	42a2      	cmp	r2, r4
     f3a:	d0ea      	beq.n	f12 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x16>
     f3c:	bcf0      	pop	{r4, r5, r6, r7}
     f3e:	f000 b82d 	b.w	f9c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x54>
     f42:	0000      	.short	0x0000
     f44:	20001100 	.word	0x20001100

00000f48 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
     f48:	b570      	push	{r4, r5, r6, lr}
     f4a:	4606      	mov	r6, r0
     f4c:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
     f50:	f243 0502 	movw	r5, #12290	; 0x3002
     f54:	38ff      	subs	r0, #255	; 0xff
     f56:	d01a      	beq.n	f8e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x46>
     f58:	b109      	cbz	r1, f5e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x16>
     f5a:	2007      	movs	r0, #7
     f5c:	bd70      	pop	{r4, r5, r6, pc}
     f5e:	4630      	mov	r0, r6
     f60:	f000 f844 	bl	fec <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x4c>
     f64:	0004      	movs	r4, r0
     f66:	d012      	beq.n	f8e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x46>
     f68:	480a      	ldr	r0, [pc, #40]	; (f94 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x4c>)
     f6a:	4621      	mov	r1, r4
     f6c:	6802      	ldr	r2, [r0, #0]
     f6e:	4630      	mov	r0, r6
     f70:	4790      	blx	r2
     f72:	4d09      	ldr	r5, [pc, #36]	; (f98 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x50>)
     f74:	2000      	movs	r0, #0
     f76:	68a9      	ldr	r1, [r5, #8]
     f78:	f841 0026 	str.w	r0, [r1, r6, lsl #2]
     f7c:	f000 f878 	bl	1070 <CONFIG_FPROTECT_BLOCK_SIZE+0x70>
     f80:	4602      	mov	r2, r0
     f82:	4621      	mov	r1, r4
     f84:	6868      	ldr	r0, [r5, #4]
     f86:	f00c fbf1 	bl	d76c <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
     f8a:	2000      	movs	r0, #0
     f8c:	bd70      	pop	{r4, r5, r6, pc}
     f8e:	4628      	mov	r0, r5
     f90:	bd70      	pop	{r4, r5, r6, pc}
     f92:	0000      	.short	0x0000
     f94:	00001094 	.word	0x00001094
     f98:	20001100 	.word	0x20001100
     f9c:	b570      	push	{r4, r5, r6, lr}
     f9e:	460e      	mov	r6, r1
     fa0:	4605      	mov	r5, r0
     fa2:	f00c fc12 	bl	d7ca <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x12>
     fa6:	b158      	cbz	r0, fc0 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x20>
     fa8:	480f      	ldr	r0, [pc, #60]	; (fe8 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x48>)
     faa:	eb00 0486 	add.w	r4, r0, r6, lsl #2
     fae:	68a0      	ldr	r0, [r4, #8]
     fb0:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
     fb4:	b138      	cbz	r0, fc6 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x26>
     fb6:	f44f 71c5 	mov.w	r1, #394	; 0x18a
     fba:	2017      	movs	r0, #23
     fbc:	f7ff fd60 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     fc0:	f240 1189 	movw	r1, #393	; 0x189
     fc4:	e7f9      	b.n	fba <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x1a>
     fc6:	6860      	ldr	r0, [r4, #4]
     fc8:	2800      	cmp	r0, #0
     fca:	d00b      	beq.n	fe4 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x44>
     fcc:	4630      	mov	r0, r6
     fce:	f000 f84f 	bl	1070 <CONFIG_FPROTECT_BLOCK_SIZE+0x70>
     fd2:	4601      	mov	r1, r0
     fd4:	6860      	ldr	r0, [r4, #4]
     fd6:	f00c fb71 	bl	d6bc <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
     fda:	2800      	cmp	r0, #0
     fdc:	d002      	beq.n	fe4 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x44>
     fde:	68a1      	ldr	r1, [r4, #8]
     fe0:	f841 0025 	str.w	r0, [r1, r5, lsl #2]
     fe4:	bd70      	pop	{r4, r5, r6, pc}
     fe6:	0000      	.short	0x0000
     fe8:	20001100 	.word	0x20001100
     fec:	b570      	push	{r4, r5, r6, lr}
     fee:	460c      	mov	r4, r1
     ff0:	4605      	mov	r5, r0
     ff2:	f00c fbea 	bl	d7ca <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x12>
     ff6:	2800      	cmp	r0, #0
     ff8:	d005      	beq.n	1006 <CONFIG_FPROTECT_BLOCK_SIZE+0x6>
     ffa:	4803      	ldr	r0, [pc, #12]	; (1008 <CONFIG_FPROTECT_BLOCK_SIZE+0x8>)
     ffc:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    1000:	6880      	ldr	r0, [r0, #8]
    1002:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    1006:	bd70      	pop	{r4, r5, r6, pc}
    1008:	20001100 	.word	0x20001100
    100c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1010:	4e16      	ldr	r6, [pc, #88]	; (106c <CONFIG_FPROTECT_BLOCK_SIZE+0x6c>)
    1012:	4688      	mov	r8, r1
    1014:	4605      	mov	r5, r0
    1016:	2400      	movs	r4, #0
    1018:	6828      	ldr	r0, [r5, #0]
    101a:	1cc0      	adds	r0, r0, #3
    101c:	f020 0003 	bic.w	r0, r0, #3
    1020:	6028      	str	r0, [r5, #0]
    1022:	4620      	mov	r0, r4
    1024:	f000 f824 	bl	1070 <CONFIG_FPROTECT_BLOCK_SIZE+0x70>
    1028:	5d31      	ldrb	r1, [r6, r4]
    102a:	4348      	muls	r0, r1
    102c:	f1b8 0f00 	cmp.w	r8, #0
    1030:	d001      	beq.n	1036 <CONFIG_FPROTECT_BLOCK_SIZE+0x36>
    1032:	2200      	movs	r2, #0
    1034:	e000      	b.n	1038 <CONFIG_FPROTECT_BLOCK_SIZE+0x38>
    1036:	682a      	ldr	r2, [r5, #0]
    1038:	4601      	mov	r1, r0
    103a:	9200      	str	r2, [sp, #0]
    103c:	b132      	cbz	r2, 104c <CONFIG_FPROTECT_BLOCK_SIZE+0x4c>
    103e:	2700      	movs	r7, #0
    1040:	ea4f 000d 	mov.w	r0, sp
    1044:	f00c fb6b 	bl	d71e <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    1048:	b11f      	cbz	r7, 1052 <CONFIG_FPROTECT_BLOCK_SIZE+0x52>
    104a:	e006      	b.n	105a <CONFIG_FPROTECT_BLOCK_SIZE+0x5a>
    104c:	2701      	movs	r7, #1
    104e:	2000      	movs	r0, #0
    1050:	e7f8      	b.n	1044 <CONFIG_FPROTECT_BLOCK_SIZE+0x44>
    1052:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    1056:	9a00      	ldr	r2, [sp, #0]
    1058:	604a      	str	r2, [r1, #4]
    105a:	6829      	ldr	r1, [r5, #0]
    105c:	1c64      	adds	r4, r4, #1
    105e:	4408      	add	r0, r1
    1060:	6028      	str	r0, [r5, #0]
    1062:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    1066:	d0d7      	beq.n	1018 <CONFIG_FPROTECT_BLOCK_SIZE+0x18>
    1068:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    106c:	20001100 	.word	0x20001100
    1070:	4903      	ldr	r1, [pc, #12]	; (1080 <CONFIG_FPROTECT_BLOCK_SIZE+0x80>)
    1072:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    1076:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    107a:	1cc0      	adds	r0, r0, #3
    107c:	4008      	ands	r0, r1
    107e:	4770      	bx	lr
    1080:	00001090 	.word	0x00001090
    1084:	4801      	ldr	r0, [pc, #4]	; (108c <CONFIG_FPROTECT_BLOCK_SIZE+0x8c>)
    1086:	7800      	ldrb	r0, [r0, #0]
    1088:	4770      	bx	lr
    108a:	0000      	.short	0x0000
    108c:	20001100 	.word	0x20001100
    1090:	000002a8 	.word	0x000002a8
    1094:	0000ee35 	.word	0x0000ee35

00001098 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    1098:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    109c:	4c24      	ldr	r4, [pc, #144]	; (1130 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x98>)
    109e:	4606      	mov	r6, r0
    10a0:	b081      	sub	sp, #4
    10a2:	6820      	ldr	r0, [r4, #0]
    10a4:	469a      	mov	sl, r3
    10a6:	4693      	mov	fp, r2
    10a8:	b158      	cbz	r0, 10c2 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    10aa:	7a01      	ldrb	r1, [r0, #8]
    10ac:	42b1      	cmp	r1, r6
    10ae:	d903      	bls.n	10b8 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    10b0:	6840      	ldr	r0, [r0, #4]
    10b2:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    10b6:	b140      	cbz	r0, 10ca <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    10b8:	f243 0002 	movw	r0, #12290	; 0x3002
    10bc:	b005      	add	sp, #20
    10be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    10c2:	21a5      	movs	r1, #165	; 0xa5
    10c4:	2018      	movs	r0, #24
    10c6:	f7ff fcdb 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    10ca:	4619      	mov	r1, r3
    10cc:	9802      	ldr	r0, [sp, #8]
    10ce:	f00c fb9f 	bl	d810 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    10d2:	4680      	mov	r8, r0
    10d4:	4658      	mov	r0, fp
    10d6:	990e      	ldr	r1, [sp, #56]	; 0x38
    10d8:	f00c fb90 	bl	d7fc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    10dc:	4605      	mov	r5, r0
    10de:	eb08 0005 	add.w	r0, r8, r5
    10e2:	1d00      	adds	r0, r0, #4
    10e4:	b287      	uxth	r7, r0
    10e6:	6820      	ldr	r0, [r4, #0]
    10e8:	46a1      	mov	r9, r4
    10ea:	4639      	mov	r1, r7
    10ec:	6800      	ldr	r0, [r0, #0]
    10ee:	f00c fae5 	bl	d6bc <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    10f2:	0004      	movs	r4, r0
    10f4:	d01a      	beq.n	112c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x94>
    10f6:	8067      	strh	r7, [r4, #2]
    10f8:	8025      	strh	r5, [r4, #0]
    10fa:	4629      	mov	r1, r5
    10fc:	1d20      	adds	r0, r4, #4
    10fe:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    1100:	4607      	mov	r7, r0
    1102:	465a      	mov	r2, fp
    1104:	2309      	movs	r3, #9
    1106:	9500      	str	r5, [sp, #0]
    1108:	f00c fa52 	bl	d5b0 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    110c:	8820      	ldrh	r0, [r4, #0]
    110e:	4641      	mov	r1, r8
    1110:	4438      	add	r0, r7
    1112:	230a      	movs	r3, #10
    1114:	9a02      	ldr	r2, [sp, #8]
    1116:	f8cd a000 	str.w	sl, [sp]
    111a:	f00c fa49 	bl	d5b0 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    111e:	f8d9 0000 	ldr.w	r0, [r9]
    1122:	6840      	ldr	r0, [r0, #4]
    1124:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
    1128:	2000      	movs	r0, #0
    112a:	e7c7      	b.n	10bc <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    112c:	2004      	movs	r0, #4
    112e:	e7c5      	b.n	10bc <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    1130:	20000058 	.word	0x20000058

00001134 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    1134:	b570      	push	{r4, r5, r6, lr}
    1136:	4c14      	ldr	r4, [pc, #80]	; (1188 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    1138:	6823      	ldr	r3, [r4, #0]
    113a:	b18b      	cbz	r3, 1160 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    113c:	7a19      	ldrb	r1, [r3, #8]
    113e:	4281      	cmp	r1, r0
    1140:	d912      	bls.n	1168 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    1142:	685a      	ldr	r2, [r3, #4]
    1144:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    1148:	b171      	cbz	r1, 1168 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    114a:	2500      	movs	r5, #0
    114c:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    1150:	884a      	ldrh	r2, [r1, #2]
    1152:	6818      	ldr	r0, [r3, #0]
    1154:	f00c fb0a 	bl	d76c <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    1158:	6821      	ldr	r1, [r4, #0]
    115a:	2000      	movs	r0, #0
    115c:	7a0a      	ldrb	r2, [r1, #8]
    115e:	e00c      	b.n	117a <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    1160:	21c6      	movs	r1, #198	; 0xc6
    1162:	2018      	movs	r0, #24
    1164:	f7ff fc8c 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1168:	f243 0002 	movw	r0, #12290	; 0x3002
    116c:	bd70      	pop	{r4, r5, r6, pc}
    116e:	684b      	ldr	r3, [r1, #4]
    1170:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    1174:	b933      	cbnz	r3, 1184 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    1176:	1c40      	adds	r0, r0, #1
    1178:	b2c0      	uxtb	r0, r0
    117a:	4282      	cmp	r2, r0
    117c:	d8f7      	bhi.n	116e <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    117e:	6808      	ldr	r0, [r1, #0]
    1180:	f00c fae9 	bl	d756 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    1184:	2000      	movs	r0, #0
    1186:	bd70      	pop	{r4, r5, r6, pc}
    1188:	20000058 	.word	0x20000058

0000118c <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    118c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1190:	460d      	mov	r5, r1
    1192:	0004      	movs	r4, r0
    1194:	4690      	mov	r8, r2
    1196:	f04f 0600 	mov.w	r6, #0
    119a:	d006      	beq.n	11aa <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x1e>
    119c:	2700      	movs	r7, #0
    119e:	07a0      	lsls	r0, r4, #30
    11a0:	d005      	beq.n	11ae <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x22>
    11a2:	2186      	movs	r1, #134	; 0x86
    11a4:	2018      	movs	r0, #24
    11a6:	f7ff fc6b 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    11aa:	2701      	movs	r7, #1
    11ac:	e7f7      	b.n	119e <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    11ae:	b1cd      	cbz	r5, 11e4 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
    11b0:	4611      	mov	r1, r2
    11b2:	2000      	movs	r0, #0
    11b4:	f00c fab3 	bl	d71e <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    11b8:	300c      	adds	r0, #12
    11ba:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    11be:	b98f      	cbnz	r7, 11e4 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
    11c0:	4f0a      	ldr	r7, [pc, #40]	; (11ec <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x60>)
    11c2:	f104 000c 	add.w	r0, r4, #12
    11c6:	00aa      	lsls	r2, r5, #2
    11c8:	603c      	str	r4, [r7, #0]
    11ca:	7225      	strb	r5, [r4, #8]
    11cc:	6060      	str	r0, [r4, #4]
    11ce:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    11d2:	6020      	str	r0, [r4, #0]
    11d4:	2100      	movs	r1, #0
    11d6:	6860      	ldr	r0, [r4, #4]
    11d8:	f00f fae3 	bl	107a2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    11dc:	4641      	mov	r1, r8
    11de:	6838      	ldr	r0, [r7, #0]
    11e0:	f00c fa9d 	bl	d71e <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    11e4:	4630      	mov	r0, r6
    11e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    11ea:	0000      	.short	0x0000
    11ec:	20000058 	.word	0x20000058

000011f0 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    11f0:	b570      	push	{r4, r5, r6, lr}
    11f2:	4d08      	ldr	r5, [pc, #32]	; (1214 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    11f4:	6828      	ldr	r0, [r5, #0]
    11f6:	2800      	cmp	r0, #0
    11f8:	d00a      	beq.n	1210 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    11fa:	2400      	movs	r4, #0
    11fc:	e004      	b.n	1208 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    11fe:	4620      	mov	r0, r4
    1200:	f7ff ff98 	bl	1134 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    1204:	1c64      	adds	r4, r4, #1
    1206:	b2e4      	uxtb	r4, r4
    1208:	6828      	ldr	r0, [r5, #0]
    120a:	7a00      	ldrb	r0, [r0, #8]
    120c:	42a0      	cmp	r0, r4
    120e:	d8f6      	bhi.n	11fe <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    1210:	bd70      	pop	{r4, r5, r6, pc}
    1212:	0000      	.short	0x0000
    1214:	20000058 	.word	0x20000058

00001218 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    1218:	4909      	ldr	r1, [pc, #36]	; (1240 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    121a:	b510      	push	{r4, lr}
    121c:	4602      	mov	r2, r0
    121e:	6809      	ldr	r1, [r1, #0]
    1220:	2000      	movs	r0, #0
    1222:	b149      	cbz	r1, 1238 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    1224:	7a0b      	ldrb	r3, [r1, #8]
    1226:	4293      	cmp	r3, r2
    1228:	d905      	bls.n	1236 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    122a:	6849      	ldr	r1, [r1, #4]
    122c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    1230:	2900      	cmp	r1, #0
    1232:	d000      	beq.n	1236 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    1234:	1d08      	adds	r0, r1, #4
    1236:	bd10      	pop	{r4, pc}
    1238:	21ec      	movs	r1, #236	; 0xec
    123a:	2018      	movs	r0, #24
    123c:	f7ff fc20 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1240:	20000058 	.word	0x20000058

00001244 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    1244:	490a      	ldr	r1, [pc, #40]	; (1270 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    1246:	b510      	push	{r4, lr}
    1248:	4602      	mov	r2, r0
    124a:	6809      	ldr	r1, [r1, #0]
    124c:	2000      	movs	r0, #0
    124e:	b159      	cbz	r1, 1268 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    1250:	7a0b      	ldrb	r3, [r1, #8]
    1252:	4293      	cmp	r3, r2
    1254:	d907      	bls.n	1266 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    1256:	6849      	ldr	r1, [r1, #4]
    1258:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    125c:	2900      	cmp	r1, #0
    125e:	d002      	beq.n	1266 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    1260:	f831 0b04 	ldrh.w	r0, [r1], #4
    1264:	4408      	add	r0, r1
    1266:	bd10      	pop	{r4, pc}
    1268:	21fa      	movs	r1, #250	; 0xfa
    126a:	2018      	movs	r0, #24
    126c:	f7ff fc08 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1270:	20000058 	.word	0x20000058

00001274 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>:
    1274:	4801      	ldr	r0, [pc, #4]	; (127c <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA+0x8>)
    1276:	7840      	ldrb	r0, [r0, #1]
    1278:	4770      	bx	lr
    127a:	0000      	.short	0x0000
    127c:	2000005c 	.word	0x2000005c

00001280 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>:
    1280:	4801      	ldr	r0, [pc, #4]	; (1288 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q+0x8>)
    1282:	6840      	ldr	r0, [r0, #4]
    1284:	4770      	bx	lr
    1286:	0000      	.short	0x0000
    1288:	2000005c 	.word	0x2000005c

0000128c <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>:
    128c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1290:	460c      	mov	r4, r1
    1292:	4607      	mov	r7, r0
    1294:	4616      	mov	r6, r2
    1296:	2125      	movs	r1, #37	; 0x25
    1298:	4610      	mov	r0, r2
    129a:	460d      	mov	r5, r1
    129c:	4622      	mov	r2, r4
    129e:	f00c f9cc 	bl	d63a <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    12a2:	4680      	mov	r8, r0
    12a4:	b157      	cbz	r7, 12bc <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA+0x30>
    12a6:	4638      	mov	r0, r7
    12a8:	4641      	mov	r1, r8
    12aa:	4632      	mov	r2, r6
    12ac:	462b      	mov	r3, r5
    12ae:	9400      	str	r4, [sp, #0]
    12b0:	f00c f97e 	bl	d5b0 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    12b4:	4803      	ldr	r0, [pc, #12]	; (12c4 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA+0x38>)
    12b6:	6047      	str	r7, [r0, #4]
    12b8:	7004      	strb	r4, [r0, #0]
    12ba:	7046      	strb	r6, [r0, #1]
    12bc:	4640      	mov	r0, r8
    12be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    12c2:	0000      	.short	0x0000
    12c4:	2000005c 	.word	0x2000005c

000012c8 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ>:
    12c8:	4802      	ldr	r0, [pc, #8]	; (12d4 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xc>)
    12ca:	7842      	ldrb	r2, [r0, #1]
    12cc:	7801      	ldrb	r1, [r0, #0]
    12ce:	6840      	ldr	r0, [r0, #4]
    12d0:	f7ff bfdc 	b.w	128c <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>
    12d4:	2000005c 	.word	0x2000005c
    12d8:	b530      	push	{r4, r5, lr}
    12da:	490d      	ldr	r1, [pc, #52]	; (1310 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x48>)
    12dc:	2001      	movs	r0, #1
    12de:	6048      	str	r0, [r1, #4]
    12e0:	1e82      	subs	r2, r0, #2
    12e2:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    12e6:	490b      	ldr	r1, [pc, #44]	; (1314 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x4c>)
    12e8:	6088      	str	r0, [r1, #8]
    12ea:	2300      	movs	r3, #0
    12ec:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
    12f0:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    12f4:	4c08      	ldr	r4, [pc, #32]	; (1318 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x50>)
    12f6:	6023      	str	r3, [r4, #0]
    12f8:	1d25      	adds	r5, r4, #4
    12fa:	6028      	str	r0, [r5, #0]
    12fc:	6088      	str	r0, [r1, #8]
    12fe:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    1302:	6023      	str	r3, [r4, #0]
    1304:	6028      	str	r0, [r5, #0]
    1306:	4906      	ldr	r1, [pc, #24]	; (1320 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x58>)
    1308:	4804      	ldr	r0, [pc, #16]	; (131c <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x54>)
    130a:	6008      	str	r0, [r1, #0]
    130c:	bd30      	pop	{r4, r5, pc}
    130e:	0000      	.short	0x0000
    1310:	4000e000 	.word	0x4000e000
    1314:	4000f000 	.word	0x4000f000
    1318:	4000f500 	.word	0x4000f500
    131c:	3ff60000 	.word	0x3ff60000
    1320:	4001f508 	.word	0x4001f508

00001324 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>:
    1324:	b510      	push	{r4, lr}
    1326:	f7ff ffd7 	bl	12d8 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x10>
    132a:	f00c fa99 	bl	d860 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x82>
    132e:	4903      	ldr	r1, [pc, #12]	; (133c <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x18>)
    1330:	4801      	ldr	r0, [pc, #4]	; (1338 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x14>)
    1332:	6008      	str	r0, [r1, #0]
    1334:	bd10      	pop	{r4, pc}
    1336:	0000      	.short	0x0000
    1338:	3ff60000 	.word	0x3ff60000
    133c:	4001f508 	.word	0x4001f508

00001340 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    1340:	b510      	push	{r4, lr}
    1342:	f7ff ffc9 	bl	12d8 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x10>
    1346:	f00c fa8b 	bl	d860 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x82>
    134a:	f000 f887 	bl	145c <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    134e:	4905      	ldr	r1, [pc, #20]	; (1364 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x24>)
    1350:	4803      	ldr	r0, [pc, #12]	; (1360 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x20>)
    1352:	6008      	str	r0, [r1, #0]
    1354:	f000 f8b8 	bl	14c8 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    1358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    135c:	f000 b8dc 	b.w	1518 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    1360:	3ff60000 	.word	0x3ff60000
    1364:	4001f508 	.word	0x4001f508
    1368:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    136c:	4682      	mov	sl, r0
    136e:	4838      	ldr	r0, [pc, #224]	; (1450 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0xc8>)
    1370:	f00f f8a9 	bl	104c6 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    1374:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 1450 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0xc8>
    1378:	b128      	cbz	r0, 1386 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x46>
    137a:	2601      	movs	r6, #1
    137c:	f10b 0001 	add.w	r0, fp, #1
    1380:	21ff      	movs	r1, #255	; 0xff
    1382:	7001      	strb	r1, [r0, #0]
    1384:	e000      	b.n	1388 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT>
    1386:	2600      	movs	r6, #0
    1388:	f44f 7580 	mov.w	r5, #256	; 0x100
    138c:	4c31      	ldr	r4, [pc, #196]	; (1454 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0xcc>)
    138e:	f04f 0800 	mov.w	r8, #0
    1392:	1d2f      	adds	r7, r5, #4
    1394:	2101      	movs	r1, #1
    1396:	6061      	str	r1, [r4, #4]
    1398:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    139c:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    13a0:	f8c4 a504 	str.w	sl, [r4, #1284]	; 0x504
    13a4:	6021      	str	r1, [r4, #0]
    13a6:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 1458 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0xd0>
    13aa:	e01c      	b.n	13e6 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x5e>
    13ac:	f8d9 0000 	ldr.w	r0, [r9]
    13b0:	06c0      	lsls	r0, r0, #27
    13b2:	d518      	bpl.n	13e6 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x5e>
    13b4:	200e      	movs	r0, #14
    13b6:	f00c fa62 	bl	d87e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xa0>
    13ba:	f3ef 8010 	mrs	r0, PRIMASK
    13be:	9000      	str	r0, [sp, #0]
    13c0:	b672      	cpsid	i
    13c2:	2103      	movs	r1, #3
    13c4:	4620      	mov	r0, r4
    13c6:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
    13ca:	4629      	mov	r1, r5
    13cc:	f00c fa64 	bl	d898 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xba>
    13d0:	b930      	cbnz	r0, 13e0 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x58>
    13d2:	4639      	mov	r1, r7
    13d4:	4620      	mov	r0, r4
    13d6:	f00c fa5f 	bl	d898 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xba>
    13da:	b908      	cbnz	r0, 13e0 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x58>
    13dc:	f00f f90a 	bl	105f4 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    13e0:	9800      	ldr	r0, [sp, #0]
    13e2:	b900      	cbnz	r0, 13e6 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x5e>
    13e4:	b662      	cpsie	i
    13e6:	4629      	mov	r1, r5
    13e8:	4620      	mov	r0, r4
    13ea:	f00c fa55 	bl	d898 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xba>
    13ee:	b928      	cbnz	r0, 13fc <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x74>
    13f0:	4639      	mov	r1, r7
    13f2:	4620      	mov	r0, r4
    13f4:	f00c fa50 	bl	d898 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xba>
    13f8:	2800      	cmp	r0, #0
    13fa:	d0d7      	beq.n	13ac <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x24>
    13fc:	4639      	mov	r1, r7
    13fe:	4620      	mov	r0, r4
    1400:	f00c fa4a 	bl	d898 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xba>
    1404:	2800      	cmp	r0, #0
    1406:	d1c5      	bne.n	1394 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0xc>
    1408:	bb06      	cbnz	r6, 144c <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0xc4>
    140a:	f89b 1001 	ldrb.w	r1, [fp, #1]
    140e:	f88d 1000 	strb.w	r1, [sp]
    1412:	9900      	ldr	r1, [sp, #0]
    1414:	9100      	str	r1, [sp, #0]
    1416:	f89d 1000 	ldrb.w	r1, [sp]
    141a:	b109      	cbz	r1, 1420 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x98>
    141c:	2501      	movs	r5, #1
    141e:	e000      	b.n	1422 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x9a>
    1420:	2500      	movs	r5, #0
    1422:	f10b 0001 	add.w	r0, fp, #1
    1426:	f880 8000 	strb.w	r8, [r0]
    142a:	2003      	movs	r0, #3
    142c:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    1430:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    1434:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    1438:	200e      	movs	r0, #14
    143a:	f00c fa20 	bl	d87e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xa0>
    143e:	4804      	ldr	r0, [pc, #16]	; (1450 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0xc8>)
    1440:	f00f f858 	bl	104f4 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    1444:	b115      	cbz	r5, 144c <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0xc4>
    1446:	2011      	movs	r0, #17
    1448:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    144c:	2000      	movs	r0, #0
    144e:	e7fb      	b.n	1448 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0xc0>
    1450:	20000340 	.word	0x20000340
    1454:	4000e000 	.word	0x4000e000
    1458:	e000ed10 	.word	0xe000ed10

0000145c <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    145c:	b510      	push	{r4, lr}
    145e:	4806      	ldr	r0, [pc, #24]	; (1478 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    1460:	f00f f844 	bl	104ec <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    1464:	b118      	cbz	r0, 146e <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x12>
    1466:	2127      	movs	r1, #39	; 0x27
    1468:	201d      	movs	r0, #29
    146a:	f7ff fb09 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    146e:	4802      	ldr	r0, [pc, #8]	; (1478 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    1470:	2100      	movs	r1, #0
    1472:	7041      	strb	r1, [r0, #1]
    1474:	bd10      	pop	{r4, pc}
    1476:	0000      	.short	0x0000
    1478:	20000340 	.word	0x20000340

0000147c <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    147c:	b570      	push	{r4, r5, r6, lr}
    147e:	4911      	ldr	r1, [pc, #68]	; (14c4 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    1480:	680a      	ldr	r2, [r1, #0]
    1482:	b1ea      	cbz	r2, 14c0 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    1484:	2300      	movs	r3, #0
    1486:	461d      	mov	r5, r3
    1488:	2401      	movs	r4, #1
    148a:	684a      	ldr	r2, [r1, #4]
    148c:	1c52      	adds	r2, r2, #1
    148e:	604a      	str	r2, [r1, #4]
    1490:	2a0c      	cmp	r2, #12
    1492:	d300      	bcc.n	1496 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    1494:	604d      	str	r5, [r1, #4]
    1496:	790e      	ldrb	r6, [r1, #4]
    1498:	fa04 f206 	lsl.w	r2, r4, r6
    149c:	680e      	ldr	r6, [r1, #0]
    149e:	4216      	tst	r6, r2
    14a0:	d00b      	beq.n	14ba <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    14a2:	f3ef 8310 	mrs	r3, PRIMASK
    14a6:	b672      	cpsid	i
    14a8:	680c      	ldr	r4, [r1, #0]
    14aa:	4394      	bics	r4, r2
    14ac:	600c      	str	r4, [r1, #0]
    14ae:	b903      	cbnz	r3, 14b2 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    14b0:	b662      	cpsie	i
    14b2:	6849      	ldr	r1, [r1, #4]
    14b4:	6001      	str	r1, [r0, #0]
    14b6:	2000      	movs	r0, #0
    14b8:	bd70      	pop	{r4, r5, r6, pc}
    14ba:	1c5b      	adds	r3, r3, #1
    14bc:	2b0c      	cmp	r3, #12
    14be:	d3e4      	bcc.n	148a <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    14c0:	2005      	movs	r0, #5
    14c2:	bd70      	pop	{r4, r5, r6, pc}
    14c4:	20000064 	.word	0x20000064

000014c8 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    14c8:	4802      	ldr	r0, [pc, #8]	; (14d4 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    14ca:	2100      	movs	r1, #0
    14cc:	6001      	str	r1, [r0, #0]
    14ce:	6041      	str	r1, [r0, #4]
    14d0:	4770      	bx	lr
    14d2:	0000      	.short	0x0000
    14d4:	20000064 	.word	0x20000064

000014d8 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>:
    14d8:	b510      	push	{r4, lr}
    14da:	4c04      	ldr	r4, [pc, #16]	; (14ec <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x14>)
    14dc:	7820      	ldrb	r0, [r4, #0]
    14de:	28ff      	cmp	r0, #255	; 0xff
    14e0:	d003      	beq.n	14ea <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x12>
    14e2:	f00b f849 	bl	c578 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
    14e6:	20ff      	movs	r0, #255	; 0xff
    14e8:	7020      	strb	r0, [r4, #0]
    14ea:	bd10      	pop	{r4, pc}
    14ec:	20000000 	.word	0x20000000

000014f0 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    14f0:	b510      	push	{r4, lr}
    14f2:	4c08      	ldr	r4, [pc, #32]	; (1514 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    14f4:	7861      	ldrb	r1, [r4, #1]
    14f6:	b109      	cbz	r1, 14fc <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    14f8:	200f      	movs	r0, #15
    14fa:	bd10      	pop	{r4, pc}
    14fc:	f00b f802 	bl	c504 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    1500:	7020      	strb	r0, [r4, #0]
    1502:	28ff      	cmp	r0, #255	; 0xff
    1504:	d001      	beq.n	150a <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    1506:	2000      	movs	r0, #0
    1508:	bd10      	pop	{r4, pc}
    150a:	2173      	movs	r1, #115	; 0x73
    150c:	201f      	movs	r0, #31
    150e:	f7ff fab7 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1512:	0000      	.short	0x0000
    1514:	20000000 	.word	0x20000000

00001518 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    1518:	4901      	ldr	r1, [pc, #4]	; (1520 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    151a:	2000      	movs	r0, #0
    151c:	7048      	strb	r0, [r1, #1]
    151e:	4770      	bx	lr
    1520:	20000000 	.word	0x20000000

00001524 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    1524:	4806      	ldr	r0, [pc, #24]	; (1540 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    1526:	4a07      	ldr	r2, [pc, #28]	; (1544 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    1528:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    152a:	8852      	ldrh	r2, [r2, #2]
    152c:	4291      	cmp	r1, r2
    152e:	d104      	bne.n	153a <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    1530:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    1534:	b108      	cbz	r0, 153a <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    1536:	2000      	movs	r0, #0
    1538:	4770      	bx	lr
    153a:	2001      	movs	r0, #1
    153c:	4770      	bx	lr
    153e:	0000      	.short	0x0000
    1540:	20001614 	.word	0x20001614
    1544:	2000032c 	.word	0x2000032c

00001548 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    1548:	4901      	ldr	r1, [pc, #4]	; (1550 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    154a:	8048      	strh	r0, [r1, #2]
    154c:	4770      	bx	lr
    154e:	0000      	.short	0x0000
    1550:	2000032c 	.word	0x2000032c

00001554 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    1554:	4808      	ldr	r0, [pc, #32]	; (1578 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    1556:	4a09      	ldr	r2, [pc, #36]	; (157c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    1558:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    155a:	8852      	ldrh	r2, [r2, #2]
    155c:	4291      	cmp	r1, r2
    155e:	d109      	bne.n	1574 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    1560:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1564:	8481      	strh	r1, [r0, #36]	; 0x24
    1566:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    156a:	b119      	cbz	r1, 1574 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    156c:	2100      	movs	r1, #0
    156e:	7001      	strb	r1, [r0, #0]
    1570:	2001      	movs	r0, #1
    1572:	4770      	bx	lr
    1574:	2000      	movs	r0, #0
    1576:	4770      	bx	lr
    1578:	20001614 	.word	0x20001614
    157c:	2000032c 	.word	0x2000032c

00001580 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    1580:	4807      	ldr	r0, [pc, #28]	; (15a0 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    1582:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    1586:	2901      	cmp	r1, #1
    1588:	d007      	beq.n	159a <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x1a>
    158a:	2101      	movs	r1, #1
    158c:	7001      	strb	r1, [r0, #0]
    158e:	4805      	ldr	r0, [pc, #20]	; (15a4 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    1590:	4903      	ldr	r1, [pc, #12]	; (15a0 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    1592:	8800      	ldrh	r0, [r0, #0]
    1594:	8488      	strh	r0, [r1, #36]	; 0x24
    1596:	2001      	movs	r0, #1
    1598:	4770      	bx	lr
    159a:	2000      	movs	r0, #0
    159c:	4770      	bx	lr
    159e:	0000      	.short	0x0000
    15a0:	20001614 	.word	0x20001614
    15a4:	2000032c 	.word	0x2000032c

000015a8 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    15a8:	4906      	ldr	r1, [pc, #24]	; (15c4 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1c>)
    15aa:	4b07      	ldr	r3, [pc, #28]	; (15c8 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    15ac:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    15ae:	885b      	ldrh	r3, [r3, #2]
    15b0:	429a      	cmp	r2, r3
    15b2:	d105      	bne.n	15c0 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    15b4:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    15b8:	b112      	cbz	r2, 15c0 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    15ba:	6001      	str	r1, [r0, #0]
    15bc:	2001      	movs	r0, #1
    15be:	4770      	bx	lr
    15c0:	2000      	movs	r0, #0
    15c2:	4770      	bx	lr
    15c4:	20001614 	.word	0x20001614
    15c8:	2000032c 	.word	0x2000032c

000015cc <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    15cc:	4909      	ldr	r1, [pc, #36]	; (15f4 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    15ce:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    15d0:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    15d4:	3bff      	subs	r3, #255	; 0xff
    15d6:	d002      	beq.n	15de <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x12>
    15d8:	2100      	movs	r1, #0
    15da:	6001      	str	r1, [r0, #0]
    15dc:	e007      	b.n	15ee <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    15de:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    15e2:	4904      	ldr	r1, [pc, #16]	; (15f4 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    15e4:	2a01      	cmp	r2, #1
    15e6:	d002      	beq.n	15ee <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    15e8:	6001      	str	r1, [r0, #0]
    15ea:	2001      	movs	r0, #1
    15ec:	4770      	bx	lr
    15ee:	2000      	movs	r0, #0
    15f0:	4770      	bx	lr
    15f2:	0000      	.short	0x0000
    15f4:	20001614 	.word	0x20001614

000015f8 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    15f8:	4901      	ldr	r1, [pc, #4]	; (1600 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    15fa:	8008      	strh	r0, [r1, #0]
    15fc:	4770      	bx	lr
    15fe:	0000      	.short	0x0000
    1600:	2000032c 	.word	0x2000032c

00001604 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    1604:	4905      	ldr	r1, [pc, #20]	; (161c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    1606:	2000      	movs	r0, #0
    1608:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    160c:	f64f 70ff 	movw	r0, #65535	; 0xffff
    1610:	8488      	strh	r0, [r1, #36]	; 0x24
    1612:	4903      	ldr	r1, [pc, #12]	; (1620 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    1614:	8008      	strh	r0, [r1, #0]
    1616:	8048      	strh	r0, [r1, #2]
    1618:	4770      	bx	lr
    161a:	0000      	.short	0x0000
    161c:	20001614 	.word	0x20001614
    1620:	2000032c 	.word	0x2000032c
    1624:	4905      	ldr	r1, [pc, #20]	; (163c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x38>)
    1626:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    1628:	4282      	cmp	r2, r0
    162a:	d105      	bne.n	1638 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x34>
    162c:	2000      	movs	r0, #0
    162e:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    1632:	f64f 70ff 	movw	r0, #65535	; 0xffff
    1636:	8488      	strh	r0, [r1, #36]	; 0x24
    1638:	4770      	bx	lr
    163a:	0000      	.short	0x0000
    163c:	20001614 	.word	0x20001614

00001640 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    1640:	4a0a      	ldr	r2, [pc, #40]	; (166c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    1642:	b110      	cbz	r0, 164a <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    1644:	2801      	cmp	r0, #1
    1646:	d007      	beq.n	1658 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    1648:	e00e      	b.n	1668 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    164a:	7850      	ldrb	r0, [r2, #1]
    164c:	b160      	cbz	r0, 1668 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    164e:	f8d2 0002 	ldr.w	r0, [r2, #2]
    1652:	6008      	str	r0, [r1, #0]
    1654:	88d0      	ldrh	r0, [r2, #6]
    1656:	e004      	b.n	1662 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    1658:	7810      	ldrb	r0, [r2, #0]
    165a:	b128      	cbz	r0, 1668 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    165c:	6890      	ldr	r0, [r2, #8]
    165e:	6008      	str	r0, [r1, #0]
    1660:	8990      	ldrh	r0, [r2, #12]
    1662:	8088      	strh	r0, [r1, #4]
    1664:	2001      	movs	r0, #1
    1666:	4770      	bx	lr
    1668:	2000      	movs	r0, #0
    166a:	4770      	bx	lr
    166c:	20000342 	.word	0x20000342

00001670 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    1670:	4a08      	ldr	r2, [pc, #32]	; (1694 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    1672:	2301      	movs	r3, #1
    1674:	b138      	cbz	r0, 1686 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    1676:	2801      	cmp	r0, #1
    1678:	d104      	bne.n	1684 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    167a:	7013      	strb	r3, [r2, #0]
    167c:	6808      	ldr	r0, [r1, #0]
    167e:	6090      	str	r0, [r2, #8]
    1680:	8888      	ldrh	r0, [r1, #4]
    1682:	8190      	strh	r0, [r2, #12]
    1684:	4770      	bx	lr
    1686:	7053      	strb	r3, [r2, #1]
    1688:	6808      	ldr	r0, [r1, #0]
    168a:	f8c2 0002 	str.w	r0, [r2, #2]
    168e:	8888      	ldrh	r0, [r1, #4]
    1690:	80d0      	strh	r0, [r2, #6]
    1692:	4770      	bx	lr
    1694:	20000342 	.word	0x20000342

00001698 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    1698:	4906      	ldr	r1, [pc, #24]	; (16b4 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    169a:	b110      	cbz	r0, 16a2 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    169c:	2801      	cmp	r0, #1
    169e:	d002      	beq.n	16a6 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    16a0:	e005      	b.n	16ae <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    16a2:	7848      	ldrb	r0, [r1, #1]
    16a4:	e000      	b.n	16a8 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    16a6:	7808      	ldrb	r0, [r1, #0]
    16a8:	b108      	cbz	r0, 16ae <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    16aa:	2001      	movs	r0, #1
    16ac:	4770      	bx	lr
    16ae:	2000      	movs	r0, #0
    16b0:	4770      	bx	lr
    16b2:	0000      	.short	0x0000
    16b4:	20000342 	.word	0x20000342

000016b8 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
    16b8:	4901      	ldr	r1, [pc, #4]	; (16c0 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
    16ba:	7708      	strb	r0, [r1, #28]
    16bc:	4770      	bx	lr
    16be:	0000      	.short	0x0000
    16c0:	20000d9a 	.word	0x20000d9a

000016c4 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>:
    16c4:	b570      	push	{r4, r5, r6, lr}
    16c6:	460c      	mov	r4, r1
    16c8:	4605      	mov	r5, r0
    16ca:	f000 f92b 	bl	1924 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    16ce:	b118      	cbz	r0, 16d8 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x14>
    16d0:	21d0      	movs	r1, #208	; 0xd0
    16d2:	2027      	movs	r0, #39	; 0x27
    16d4:	f7ff f9d4 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    16d8:	4803      	ldr	r0, [pc, #12]	; (16e8 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x24>)
    16da:	2101      	movs	r1, #1
    16dc:	f00c fd0c 	bl	e0f8 <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    16e0:	4802      	ldr	r0, [pc, #8]	; (16ec <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x28>)
    16e2:	e9c0 540b 	strd	r5, r4, [r0, #44]	; 0x2c
    16e6:	bd70      	pop	{r4, r5, r6, pc}
    16e8:	20000d78 	.word	0x20000d78
    16ec:	2000006c 	.word	0x2000006c

000016f0 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>:
    16f0:	4901      	ldr	r1, [pc, #4]	; (16f8 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA+0x8>)
    16f2:	2001      	movs	r0, #1
    16f4:	7148      	strb	r0, [r1, #5]
    16f6:	4770      	bx	lr
    16f8:	2000006c 	.word	0x2000006c

000016fc <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>:
    16fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1700:	4e65      	ldr	r6, [pc, #404]	; (1898 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x19c>)
    1702:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    1704:	7835      	ldrb	r5, [r6, #0]
    1706:	bbed      	cbnz	r5, 1784 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    1708:	b3e2      	cbz	r2, 1784 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    170a:	b3db      	cbz	r3, 1784 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    170c:	b3d4      	cbz	r4, 1784 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    170e:	f106 0514 	add.w	r5, r6, #20
    1712:	e9c6 010f 	strd	r0, r1, [r6, #60]	; 0x3c
    1716:	e885 001c 	stmia.w	r5, {r2, r3, r4}
    171a:	2700      	movs	r7, #0
    171c:	7177      	strb	r7, [r6, #5]
    171e:	7137      	strb	r7, [r6, #4]
    1720:	70b7      	strb	r7, [r6, #2]
    1722:	7077      	strb	r7, [r6, #1]
    1724:	70f7      	strb	r7, [r6, #3]
    1726:	81b7      	strh	r7, [r6, #12]
    1728:	81f7      	strh	r7, [r6, #14]
    172a:	f000 f959 	bl	19e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa0>
    172e:	4605      	mov	r5, r0
    1730:	f000 f950 	bl	19d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x94>
    1734:	4604      	mov	r4, r0
    1736:	f006 fc5f 	bl	7ff8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    173a:	f006 f9ff 	bl	7b3c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    173e:	f994 006e 	ldrsb.w	r0, [r4, #110]	; 0x6e
    1742:	f006 fcdd 	bl	8100 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    1746:	69e0      	ldr	r0, [r4, #28]
    1748:	f006 fdc0 	bl	82cc <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    174c:	6960      	ldr	r0, [r4, #20]
    174e:	f006 fdb3 	bl	82b8 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    1752:	f895 0033 	ldrb.w	r0, [r5, #51]	; 0x33
    1756:	f006 fde9 	bl	832c <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    175a:	f04f 0b01 	mov.w	fp, #1
    175e:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    1762:	2000      	movs	r0, #0
    1764:	f006 fb4e 	bl	7e04 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    1768:	2800      	cmp	r0, #0
    176a:	d07d      	beq.n	1868 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x16c>
    176c:	484b      	ldr	r0, [pc, #300]	; (189c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a0>)
    176e:	f006 fbad 	bl	7ecc <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    1772:	8820      	ldrh	r0, [r4, #0]
    1774:	f7ff fd66 	bl	1244 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    1778:	6370      	str	r0, [r6, #52]	; 0x34
    177a:	8820      	ldrh	r0, [r4, #0]
    177c:	f7ff fd4c 	bl	1218 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    1780:	63b0      	str	r0, [r6, #56]	; 0x38
    1782:	e000      	b.n	1786 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x8a>
    1784:	e009      	b.n	179a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x9e>
    1786:	f894 0077 	ldrb.w	r0, [r4, #119]	; 0x77
    178a:	f88d 0000 	strb.w	r0, [sp]
    178e:	9800      	ldr	r0, [sp, #0]
    1790:	9000      	str	r0, [sp, #0]
    1792:	f89d 0000 	ldrb.w	r0, [sp]
    1796:	b9a8      	cbnz	r0, 17c4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xc8>
    1798:	e002      	b.n	17a0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xa4>
    179a:	f240 1145 	movw	r1, #325	; 0x145
    179e:	e077      	b.n	1890 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x194>
    17a0:	6f20      	ldr	r0, [r4, #112]	; 0x70
    17a2:	b178      	cbz	r0, 17c4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xc8>
    17a4:	f8b5 004a 	ldrh.w	r0, [r5, #74]	; 0x4a
    17a8:	8aa9      	ldrh	r1, [r5, #20]
    17aa:	4288      	cmp	r0, r1
    17ac:	d10a      	bne.n	17c4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xc8>
    17ae:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
    17b2:	2201      	movs	r2, #1
    17b4:	4408      	add	r0, r1
    17b6:	f8a5 004a 	strh.w	r0, [r5, #74]	; 0x4a
    17ba:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
    17be:	6f21      	ldr	r1, [r4, #112]	; 0x70
    17c0:	f009 fce8 	bl	b194 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    17c4:	f105 0288 	add.w	r2, r5, #136	; 0x88
    17c8:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 18a0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a4>
    17cc:	e892 110c 	ldmia.w	r2, {r2, r3, r8, ip}
    17d0:	e889 110c 	stmia.w	r9, {r2, r3, r8, ip}
    17d4:	f8d5 2098 	ldr.w	r2, [r5, #152]	; 0x98
    17d8:	f8c9 2019 	str.w	r2, [r9, #25]
    17dc:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
    17e0:	f8c9 101d 	str.w	r1, [r9, #29]
    17e4:	f000 f930 	bl	1a48 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x108>
    17e8:	8f22      	ldrh	r2, [r4, #56]	; 0x38
    17ea:	4601      	mov	r1, r0
    17ec:	46ba      	mov	sl, r7
    17ee:	4610      	mov	r0, r2
    17f0:	f00c fa25 	bl	dc3e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    17f4:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
    17f6:	4281      	cmp	r1, r0
    17f8:	d200      	bcs.n	17fc <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x100>
    17fa:	4608      	mov	r0, r1
    17fc:	71b0      	strb	r0, [r6, #6]
    17fe:	46b0      	mov	r8, r6
    1800:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    1804:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
    1806:	f895 7023 	ldrb.w	r7, [r5, #35]	; 0x23
    180a:	8fa6      	ldrh	r6, [r4, #60]	; 0x3c
    180c:	2908      	cmp	r1, #8
    180e:	d100      	bne.n	1812 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x116>
    1810:	2104      	movs	r1, #4
    1812:	f00c fa14 	bl	dc3e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    1816:	b90f      	cbnz	r7, 181c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x120>
    1818:	1d00      	adds	r0, r0, #4
    181a:	b280      	uxth	r0, r0
    181c:	4286      	cmp	r6, r0
    181e:	d200      	bcs.n	1822 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x126>
    1820:	4630      	mov	r0, r6
    1822:	f888 0007 	strb.w	r0, [r8, #7]
    1826:	f888 0008 	strb.w	r0, [r8, #8]
    182a:	f895 0022 	ldrb.w	r0, [r5, #34]	; 0x22
    182e:	b188      	cbz	r0, 1854 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x158>
    1830:	f889 b018 	strb.w	fp, [r9, #24]
    1834:	e9d5 121e 	ldrd	r1, r2, [r5, #120]	; 0x78
    1838:	e9c9 1204 	strd	r1, r2, [r9, #16]
    183c:	4656      	mov	r6, sl
    183e:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    1842:	f00c f8d9 	bl	d9f8 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    1846:	4603      	mov	r3, r0
    1848:	22fb      	movs	r2, #251	; 0xfb
    184a:	4915      	ldr	r1, [pc, #84]	; (18a0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a4>)
    184c:	4630      	mov	r0, r6
    184e:	9600      	str	r6, [sp, #0]
    1850:	f006 f8e0 	bl	7a14 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    1854:	2001      	movs	r0, #1
    1856:	f000 fb71 	bl	1f3c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1f0>
    185a:	4812      	ldr	r0, [pc, #72]	; (18a4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a8>)
    185c:	6800      	ldr	r0, [r0, #0]
    185e:	2803      	cmp	r0, #3
    1860:	d014      	beq.n	188c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x190>
    1862:	280b      	cmp	r0, #11
    1864:	d012      	beq.n	188c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x190>
    1866:	e000      	b.n	186a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x16e>
    1868:	e00e      	b.n	1888 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x18c>
    186a:	480d      	ldr	r0, [pc, #52]	; (18a0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a4>)
    186c:	220e      	movs	r2, #14
    186e:	2100      	movs	r1, #0
    1870:	304a      	adds	r0, #74	; 0x4a
    1872:	f00e ff96 	bl	107a2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    1876:	480a      	ldr	r0, [pc, #40]	; (18a0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a4>)
    1878:	8aa9      	ldrh	r1, [r5, #20]
    187a:	304a      	adds	r0, #74	; 0x4a
    187c:	8041      	strh	r1, [r0, #2]
    187e:	8821      	ldrh	r1, [r4, #0]
    1880:	8001      	strh	r1, [r0, #0]
    1882:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
    1886:	7101      	strb	r1, [r0, #4]
    1888:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    188c:	f240 2102 	movw	r1, #514	; 0x202
    1890:	2027      	movs	r0, #39	; 0x27
    1892:	f7ff f8f5 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1896:	0000      	.short	0x0000
    1898:	2000006c 	.word	0x2000006c
    189c:	000020c4 	.word	0x000020c4
    18a0:	20000d50 	.word	0x20000d50
    18a4:	40001550 	.word	0x40001550

000018a8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>:
    18a8:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    18ac:	4688      	mov	r8, r1
    18ae:	4607      	mov	r7, r0
    18b0:	f000 f896 	bl	19e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa0>
    18b4:	4c1a      	ldr	r4, [pc, #104]	; (1920 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x78>)
    18b6:	4605      	mov	r5, r0
    18b8:	07b8      	lsls	r0, r7, #30
    18ba:	6a61      	ldr	r1, [r4, #36]	; 0x24
    18bc:	784e      	ldrb	r6, [r1, #1]
    18be:	d516      	bpl.n	18ee <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x46>
    18c0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    18c2:	b330      	cbz	r0, 1912 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x6a>
    18c4:	8962      	ldrh	r2, [r4, #10]
    18c6:	1cd2      	adds	r2, r2, #3
    18c8:	f00e fef1 	bl	106ae <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    18cc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    18ce:	6260      	str	r0, [r4, #36]	; 0x24
    18d0:	4669      	mov	r1, sp
    18d2:	aa01      	add	r2, sp, #4
    18d4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    18d6:	f00b fde8 	bl	d4aa <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    18da:	9800      	ldr	r0, [sp, #0]
    18dc:	f00b fd82 	bl	d3e4 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    18e0:	f8c8 0000 	str.w	r0, [r8]
    18e4:	4631      	mov	r1, r6
    18e6:	2201      	movs	r2, #1
    18e8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    18ea:	f00b fd32 	bl	d352 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    18ee:	07f8      	lsls	r0, r7, #31
    18f0:	d00d      	beq.n	190e <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x66>
    18f2:	e9d5 0120 	ldrd	r0, r1, [r5, #128]	; 0x80
    18f6:	3518      	adds	r5, #24
    18f8:	1c40      	adds	r0, r0, #1
    18fa:	f141 0100 	adc.w	r1, r1, #0
    18fe:	e9c5 011a 	strd	r0, r1, [r5, #104]	; 0x68
    1902:	f815 0918 	ldrb.w	r0, [r5], #-24
    1906:	2801      	cmp	r0, #1
    1908:	d008      	beq.n	191c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x74>
    190a:	2001      	movs	r0, #1
    190c:	7628      	strb	r0, [r5, #24]
    190e:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    1912:	f240 4166 	movw	r1, #1126	; 0x466
    1916:	2027      	movs	r0, #39	; 0x27
    1918:	f7ff f8b2 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    191c:	2000      	movs	r0, #0
    191e:	e7f5      	b.n	190c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x64>
    1920:	2000006c 	.word	0x2000006c

00001924 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>:
    1924:	4804      	ldr	r0, [pc, #16]	; (1938 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x14>)
    1926:	7800      	ldrb	r0, [r0, #0]
    1928:	b108      	cbz	r0, 192e <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0xa>
    192a:	200c      	movs	r0, #12
    192c:	4770      	bx	lr
    192e:	4903      	ldr	r1, [pc, #12]	; (193c <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x18>)
    1930:	2000      	movs	r0, #0
    1932:	7708      	strb	r0, [r1, #28]
    1934:	4770      	bx	lr
    1936:	0000      	.short	0x0000
    1938:	2000006c 	.word	0x2000006c
    193c:	20000d9a 	.word	0x20000d9a

00001940 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>:
    1940:	4812      	ldr	r0, [pc, #72]	; (198c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4c>)
    1942:	b508      	push	{r3, lr}
    1944:	7801      	ldrb	r1, [r0, #0]
    1946:	b139      	cbz	r1, 1958 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x18>
    1948:	7800      	ldrb	r0, [r0, #0]
    194a:	2801      	cmp	r0, #1
    194c:	d006      	beq.n	195c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c>
    194e:	f240 211a 	movw	r1, #538	; 0x21a
    1952:	2027      	movs	r0, #39	; 0x27
    1954:	f7ff f894 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1958:	f000 f9ca 	bl	1cf0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b0>
    195c:	f000 f83a 	bl	19d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x94>
    1960:	f890 1077 	ldrb.w	r1, [r0, #119]	; 0x77
    1964:	f88d 1000 	strb.w	r1, [sp]
    1968:	9900      	ldr	r1, [sp, #0]
    196a:	9100      	str	r1, [sp, #0]
    196c:	f89d 1000 	ldrb.w	r1, [sp]
    1970:	2900      	cmp	r1, #0
    1972:	d10a      	bne.n	198a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a>
    1974:	6f01      	ldr	r1, [r0, #112]	; 0x70
    1976:	2900      	cmp	r1, #0
    1978:	d007      	beq.n	198a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a>
    197a:	f890 0076 	ldrb.w	r0, [r0, #118]	; 0x76
    197e:	2200      	movs	r2, #0
    1980:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    1984:	4611      	mov	r1, r2
    1986:	f009 bc05 	b.w	b194 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    198a:	bd08      	pop	{r3, pc}
    198c:	2000006c 	.word	0x2000006c
    1990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1992:	2600      	movs	r6, #0
    1994:	4605      	mov	r5, r0
    1996:	704e      	strb	r6, [r1, #1]
    1998:	2022      	movs	r0, #34	; 0x22
    199a:	4f09      	ldr	r7, [pc, #36]	; (19c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x80>)
    199c:	460c      	mov	r4, r1
    199e:	7008      	strb	r0, [r1, #0]
    19a0:	722e      	strb	r6, [r5, #8]
    19a2:	220e      	movs	r2, #14
    19a4:	4639      	mov	r1, r7
    19a6:	1d20      	adds	r0, r4, #4
    19a8:	f00e fe81 	bl	106ae <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    19ac:	7a28      	ldrb	r0, [r5, #8]
    19ae:	f88d 0000 	strb.w	r0, [sp]
    19b2:	9800      	ldr	r0, [sp, #0]
    19b4:	9000      	str	r0, [sp, #0]
    19b6:	f89d 0000 	ldrb.w	r0, [sp]
    19ba:	2800      	cmp	r0, #0
    19bc:	d1f0      	bne.n	19a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    19be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    19c0:	20000da8 	.word	0x20000da8
    19c4:	4a02      	ldr	r2, [pc, #8]	; (19d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x90>)
    19c6:	8993      	ldrh	r3, [r2, #12]
    19c8:	4303      	orrs	r3, r0
    19ca:	8193      	strh	r3, [r2, #12]
    19cc:	6952      	ldr	r2, [r2, #20]
    19ce:	4710      	bx	r2
    19d0:	2000006c 	.word	0x2000006c
    19d4:	4801      	ldr	r0, [pc, #4]	; (19dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x9c>)
    19d6:	6840      	ldr	r0, [r0, #4]
    19d8:	4770      	bx	lr
    19da:	0000      	.short	0x0000
    19dc:	200000a8 	.word	0x200000a8
    19e0:	4801      	ldr	r0, [pc, #4]	; (19e8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa8>)
    19e2:	6840      	ldr	r0, [r0, #4]
    19e4:	3088      	adds	r0, #136	; 0x88
    19e6:	4770      	bx	lr
    19e8:	200000a8 	.word	0x200000a8
    19ec:	4a01      	ldr	r2, [pc, #4]	; (19f4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb4>)
    19ee:	2100      	movs	r1, #0
    19f0:	6952      	ldr	r2, [r2, #20]
    19f2:	4710      	bx	r2
    19f4:	2000006c 	.word	0x2000006c
    19f8:	b570      	push	{r4, r5, r6, lr}
    19fa:	4605      	mov	r5, r0
    19fc:	2901      	cmp	r1, #1
    19fe:	d81c      	bhi.n	1a3a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfa>
    1a00:	4c10      	ldr	r4, [pc, #64]	; (1a44 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x104>)
    1a02:	69a1      	ldr	r1, [r4, #24]
    1a04:	4788      	blx	r1
    1a06:	b1c0      	cbz	r0, 1a3a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfa>
    1a08:	7920      	ldrb	r0, [r4, #4]
    1a0a:	b9b0      	cbnz	r0, 1a3a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfa>
    1a0c:	2d01      	cmp	r5, #1
    1a0e:	d116      	bne.n	1a3e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfe>
    1a10:	f104 0010 	add.w	r0, r4, #16
    1a14:	7800      	ldrb	r0, [r0, #0]
    1a16:	06c1      	lsls	r1, r0, #27
    1a18:	d405      	bmi.n	1a26 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe6>
    1a1a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    1a1c:	7809      	ldrb	r1, [r1, #0]
    1a1e:	06c9      	lsls	r1, r1, #27
    1a20:	d401      	bmi.n	1a26 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe6>
    1a22:	2101      	movs	r1, #1
    1a24:	e000      	b.n	1a28 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe8>
    1a26:	2100      	movs	r1, #0
    1a28:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1a2a:	b91a      	cbnz	r2, 1a34 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf4>
    1a2c:	8962      	ldrh	r2, [r4, #10]
    1a2e:	b10a      	cbz	r2, 1a34 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf4>
    1a30:	06c0      	lsls	r0, r0, #27
    1a32:	d502      	bpl.n	1a3a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfa>
    1a34:	89a0      	ldrh	r0, [r4, #12]
    1a36:	4301      	orrs	r1, r0
    1a38:	d001      	beq.n	1a3e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfe>
    1a3a:	2001      	movs	r0, #1
    1a3c:	bd70      	pop	{r4, r5, r6, pc}
    1a3e:	2000      	movs	r0, #0
    1a40:	bd70      	pop	{r4, r5, r6, pc}
    1a42:	0000      	.short	0x0000
    1a44:	2000006c 	.word	0x2000006c
    1a48:	b510      	push	{r4, lr}
    1a4a:	f7ff ffc3 	bl	19d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x94>
    1a4e:	4604      	mov	r4, r0
    1a50:	f7ff ffc6 	bl	19e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa0>
    1a54:	4601      	mov	r1, r0
    1a56:	7f40      	ldrb	r0, [r0, #29]
    1a58:	4a0b      	ldr	r2, [pc, #44]	; (1a88 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x148>)
    1a5a:	2825      	cmp	r0, #37	; 0x25
    1a5c:	d00a      	beq.n	1a74 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x134>
    1a5e:	2826      	cmp	r0, #38	; 0x26
    1a60:	d008      	beq.n	1a74 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x134>
    1a62:	7f89      	ldrb	r1, [r1, #30]
    1a64:	2925      	cmp	r1, #37	; 0x25
    1a66:	d005      	beq.n	1a74 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x134>
    1a68:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    1a6c:	2804      	cmp	r0, #4
    1a6e:	d100      	bne.n	1a72 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x132>
    1a70:	2008      	movs	r0, #8
    1a72:	bd10      	pop	{r4, pc}
    1a74:	6850      	ldr	r0, [r2, #4]
    1a76:	f890 1262 	ldrb.w	r1, [r0, #610]	; 0x262
    1a7a:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    1a7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1a82:	f00b bfc7 	b.w	da14 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x20>
    1a86:	0000      	.short	0x0000
    1a88:	200000a8 	.word	0x200000a8
    1a8c:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    1a90:	468b      	mov	fp, r1
    1a92:	4681      	mov	r9, r0
    1a94:	f7ff ffa4 	bl	19e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa0>
    1a98:	2700      	movs	r7, #0
    1a9a:	4c64      	ldr	r4, [pc, #400]	; (1c2c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ec>)
    1a9c:	4606      	mov	r6, r0
    1a9e:	f88d 7008 	strb.w	r7, [sp, #8]
    1aa2:	9703      	str	r7, [sp, #12]
    1aa4:	9701      	str	r7, [sp, #4]
    1aa6:	7820      	ldrb	r0, [r4, #0]
    1aa8:	463d      	mov	r5, r7
    1aaa:	2802      	cmp	r0, #2
    1aac:	d004      	beq.n	1ab8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x178>
    1aae:	f240 41ea 	movw	r1, #1258	; 0x4ea
    1ab2:	2027      	movs	r0, #39	; 0x27
    1ab4:	f7fe ffe4 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1ab8:	7ba0      	ldrb	r0, [r4, #14]
    1aba:	0640      	lsls	r0, r0, #25
    1abc:	d406      	bmi.n	1acc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x18c>
    1abe:	2040      	movs	r0, #64	; 0x40
    1ac0:	f7ff ff94 	bl	19ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xac>
    1ac4:	89e0      	ldrh	r0, [r4, #14]
    1ac6:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    1aca:	81e0      	strh	r0, [r4, #14]
    1acc:	f896 0023 	ldrb.w	r0, [r6, #35]	; 0x23
    1ad0:	f04f 0801 	mov.w	r8, #1
    1ad4:	f1b9 0f00 	cmp.w	r9, #0
    1ad8:	d03a      	beq.n	1b50 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x210>
    1ada:	b180      	cbz	r0, 1afe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1be>
    1adc:	f006 f868 	bl	7bb0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    1ae0:	f006 f842 	bl	7b68 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    1ae4:	b958      	cbnz	r0, 1afe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1be>
    1ae6:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1ae8:	7841      	ldrb	r1, [r0, #1]
    1aea:	b141      	cbz	r1, 1afe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1be>
    1aec:	7800      	ldrb	r0, [r0, #0]
    1aee:	7e31      	ldrb	r1, [r6, #24]
    1af0:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    1af4:	4288      	cmp	r0, r1
    1af6:	d102      	bne.n	1afe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1be>
    1af8:	f884 8001 	strb.w	r8, [r4, #1]
    1afc:	e092      	b.n	1c24 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2e4>
    1afe:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1b00:	7841      	ldrb	r1, [r0, #1]
    1b02:	8161      	strh	r1, [r4, #10]
    1b04:	b121      	cbz	r1, 1b10 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1d0>
    1b06:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    1b08:	f00b fda5 	bl	d656 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    1b0c:	62a0      	str	r0, [r4, #40]	; 0x28
    1b0e:	e000      	b.n	1b12 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1d2>
    1b10:	62a5      	str	r5, [r4, #40]	; 0x28
    1b12:	89e0      	ldrh	r0, [r4, #14]
    1b14:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    1b18:	81e0      	strh	r0, [r4, #14]
    1b1a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1b1c:	7df1      	ldrb	r1, [r6, #23]
    1b1e:	7800      	ldrb	r0, [r0, #0]
    1b20:	f3c0 0080 	ubfx	r0, r0, #2, #1
    1b24:	4288      	cmp	r0, r1
    1b26:	d007      	beq.n	1b38 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1f8>
    1b28:	a803      	add	r0, sp, #12
    1b2a:	f000 f985 	bl	1e38 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xec>
    1b2e:	89e0      	ldrh	r0, [r4, #14]
    1b30:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    1b34:	81e0      	strh	r0, [r4, #14]
    1b36:	e000      	b.n	1b3a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1fa>
    1b38:	2701      	movs	r7, #1
    1b3a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1b3c:	7e31      	ldrb	r1, [r6, #24]
    1b3e:	7800      	ldrb	r0, [r0, #0]
    1b40:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    1b44:	4288      	cmp	r0, r1
    1b46:	d10d      	bne.n	1b64 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x224>
    1b48:	a802      	add	r0, sp, #8
    1b4a:	f000 f92b 	bl	1da4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x58>
    1b4e:	e009      	b.n	1b64 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x224>
    1b50:	b108      	cbz	r0, 1b56 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x216>
    1b52:	f006 f827 	bl	7ba4 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    1b56:	78a0      	ldrb	r0, [r4, #2]
    1b58:	1c40      	adds	r0, r0, #1
    1b5a:	70a0      	strb	r0, [r4, #2]
    1b5c:	89e0      	ldrh	r0, [r4, #14]
    1b5e:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    1b62:	81e0      	strh	r0, [r4, #14]
    1b64:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 1c2c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ec>
    1b68:	f896 0022 	ldrb.w	r0, [r6, #34]	; 0x22
    1b6c:	f10a 0a3c 	add.w	sl, sl, #60	; 0x3c
    1b70:	b198      	cbz	r0, 1b9a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x25a>
    1b72:	f7ff ff2f 	bl	19d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x94>
    1b76:	492e      	ldr	r1, [pc, #184]	; (1c30 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f0>)
    1b78:	f881 8018 	strb.w	r8, [r1, #24]
    1b7c:	e9d6 231e 	ldrd	r2, r3, [r6, #120]	; 0x78
    1b80:	e9c1 2304 	strd	r2, r3, [r1, #16]
    1b84:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    1b88:	f00b ff36 	bl	d9f8 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    1b8c:	4603      	mov	r3, r0
    1b8e:	22fb      	movs	r2, #251	; 0xfb
    1b90:	4927      	ldr	r1, [pc, #156]	; (1c30 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f0>)
    1b92:	4628      	mov	r0, r5
    1b94:	9500      	str	r5, [sp, #0]
    1b96:	f005 ff3d 	bl	7a14 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    1b9a:	f04f 0800 	mov.w	r8, #0
    1b9e:	f1bb 0f00 	cmp.w	fp, #0
    1ba2:	d104      	bne.n	1bae <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x26e>
    1ba4:	78a1      	ldrb	r1, [r4, #2]
    1ba6:	2001      	movs	r0, #1
    1ba8:	f7ff ff26 	bl	19f8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb8>
    1bac:	b120      	cbz	r0, 1bb8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x278>
    1bae:	f006 fb6f 	bl	8290 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>
    1bb2:	f04f 0801 	mov.w	r8, #1
    1bb6:	e002      	b.n	1bbe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x27e>
    1bb8:	2000      	movs	r0, #0
    1bba:	f000 f9bf 	bl	1f3c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1f0>
    1bbe:	f89d 0008 	ldrb.w	r0, [sp, #8]
    1bc2:	b118      	cbz	r0, 1bcc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x28c>
    1bc4:	a901      	add	r1, sp, #4
    1bc6:	2002      	movs	r0, #2
    1bc8:	f7ff fe6e 	bl	18a8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    1bcc:	4818      	ldr	r0, [pc, #96]	; (1c30 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f0>)
    1bce:	304a      	adds	r0, #74	; 0x4a
    1bd0:	b117      	cbz	r7, 1bd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x298>
    1bd2:	8942      	ldrh	r2, [r0, #10]
    1bd4:	1c52      	adds	r2, r2, #1
    1bd6:	8142      	strh	r2, [r0, #10]
    1bd8:	f1b9 0f00 	cmp.w	r9, #0
    1bdc:	d008      	beq.n	1bf0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b0>
    1bde:	88c1      	ldrh	r1, [r0, #6]
    1be0:	1c49      	adds	r1, r1, #1
    1be2:	80c1      	strh	r1, [r0, #6]
    1be4:	4811      	ldr	r0, [pc, #68]	; (1c2c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ec>)
    1be6:	70a5      	strb	r5, [r4, #2]
    1be8:	303c      	adds	r0, #60	; 0x3c
    1bea:	f001 fa25 	bl	3038 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA>
    1bee:	e002      	b.n	1bf6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b6>
    1bf0:	8901      	ldrh	r1, [r0, #8]
    1bf2:	1c49      	adds	r1, r1, #1
    1bf4:	8101      	strh	r1, [r0, #8]
    1bf6:	9803      	ldr	r0, [sp, #12]
    1bf8:	b140      	cbz	r0, 1c0c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2cc>
    1bfa:	f00b fbf3 	bl	d3e4 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    1bfe:	f8da 1004 	ldr.w	r1, [sl, #4]
    1c02:	1c40      	adds	r0, r0, #1
    1c04:	7205      	strb	r5, [r0, #8]
    1c06:	220e      	movs	r2, #14
    1c08:	f00c faa9 	bl	e15e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    1c0c:	9801      	ldr	r0, [sp, #4]
    1c0e:	b130      	cbz	r0, 1c1e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2de>
    1c10:	f8da 1004 	ldr.w	r1, [sl, #4]
    1c14:	7205      	strb	r5, [r0, #8]
    1c16:	222a      	movs	r2, #42	; 0x2a
    1c18:	9801      	ldr	r0, [sp, #4]
    1c1a:	f00c faa0 	bl	e15e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    1c1e:	f1b8 0f00 	cmp.w	r8, #0
    1c22:	d001      	beq.n	1c28 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2e8>
    1c24:	f000 f864 	bl	1cf0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b0>
    1c28:	e8bd 9fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1c2c:	2000006c 	.word	0x2000006c
    1c30:	20000d50 	.word	0x20000d50
    1c34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1c38:	4688      	mov	r8, r1
    1c3a:	4681      	mov	r9, r0
    1c3c:	f7ff fed0 	bl	19e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa0>
    1c40:	4d29      	ldr	r5, [pc, #164]	; (1ce8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a8>)
    1c42:	4604      	mov	r4, r0
    1c44:	7828      	ldrb	r0, [r5, #0]
    1c46:	2801      	cmp	r0, #1
    1c48:	d004      	beq.n	1c54 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x314>
    1c4a:	f240 4175 	movw	r1, #1141	; 0x475
    1c4e:	2027      	movs	r0, #39	; 0x27
    1c50:	f7fe ff16 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1c54:	7c20      	ldrb	r0, [r4, #16]
    1c56:	2600      	movs	r6, #0
    1c58:	2701      	movs	r7, #1
    1c5a:	b120      	cbz	r0, 1c66 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x326>
    1c5c:	7426      	strb	r6, [r4, #16]
    1c5e:	2100      	movs	r1, #0
    1c60:	2004      	movs	r0, #4
    1c62:	f7ff feaf 	bl	19c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>
    1c66:	6a29      	ldr	r1, [r5, #32]
    1c68:	7808      	ldrb	r0, [r1, #0]
    1c6a:	43c0      	mvns	r0, r0
    1c6c:	0780      	lsls	r0, r0, #30
    1c6e:	d109      	bne.n	1c84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x344>
    1c70:	7da0      	ldrb	r0, [r4, #22]
    1c72:	bb88      	cbnz	r0, 1cd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x398>
    1c74:	2002      	movs	r0, #2
    1c76:	f7ff fea5 	bl	19c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>
    1c7a:	6a28      	ldr	r0, [r5, #32]
    1c7c:	7800      	ldrb	r0, [r0, #0]
    1c7e:	43c0      	mvns	r0, r0
    1c80:	0780      	lsls	r0, r0, #30
    1c82:	d029      	beq.n	1cd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x398>
    1c84:	6a28      	ldr	r0, [r5, #32]
    1c86:	7840      	ldrb	r0, [r0, #1]
    1c88:	b110      	cbz	r0, 1c90 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x350>
    1c8a:	2002      	movs	r0, #2
    1c8c:	75a0      	strb	r0, [r4, #22]
    1c8e:	e000      	b.n	1c92 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x352>
    1c90:	75a7      	strb	r7, [r4, #22]
    1c92:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
    1c96:	b198      	cbz	r0, 1cc0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x380>
    1c98:	f7ff fe9c 	bl	19d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x94>
    1c9c:	4913      	ldr	r1, [pc, #76]	; (1cec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3ac>)
    1c9e:	7a2d      	ldrb	r5, [r5, #8]
    1ca0:	760e      	strb	r6, [r1, #24]
    1ca2:	e9d4 2320 	ldrd	r2, r3, [r4, #128]	; 0x80
    1ca6:	e9c1 2304 	strd	r2, r3, [r1, #16]
    1caa:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    1cae:	f00b fea3 	bl	d9f8 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    1cb2:	4603      	mov	r3, r0
    1cb4:	462a      	mov	r2, r5
    1cb6:	490d      	ldr	r1, [pc, #52]	; (1cec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3ac>)
    1cb8:	4638      	mov	r0, r7
    1cba:	9600      	str	r6, [sp, #0]
    1cbc:	f005 feaa 	bl	7a14 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    1cc0:	ea38 0009 	bics.w	r0, r8, r9
    1cc4:	d004      	beq.n	1cd0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x390>
    1cc6:	2100      	movs	r1, #0
    1cc8:	4608      	mov	r0, r1
    1cca:	f7ff fe95 	bl	19f8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb8>
    1cce:	b128      	cbz	r0, 1cdc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x39c>
    1cd0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1cd4:	f000 b80c 	b.w	1cf0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b0>
    1cd8:	2003      	movs	r0, #3
    1cda:	e7d7      	b.n	1c8c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34c>
    1cdc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1ce0:	2000      	movs	r0, #0
    1ce2:	f000 b8ef 	b.w	1ec4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x178>
    1ce6:	0000      	.short	0x0000
    1ce8:	2000006c 	.word	0x2000006c
    1cec:	20000d50 	.word	0x20000d50
    1cf0:	b510      	push	{r4, lr}
    1cf2:	f005 fffd 	bl	7cf0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    1cf6:	f005 ff21 	bl	7b3c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    1cfa:	4c0d      	ldr	r4, [pc, #52]	; (1d30 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f0>)
    1cfc:	89e0      	ldrh	r0, [r4, #14]
    1cfe:	f7ff fe75 	bl	19ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xac>
    1d02:	480c      	ldr	r0, [pc, #48]	; (1d34 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f4>)
    1d04:	7f00      	ldrb	r0, [r0, #28]
    1d06:	b158      	cbz	r0, 1d20 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3e0>
    1d08:	490a      	ldr	r1, [pc, #40]	; (1d34 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f4>)
    1d0a:	220e      	movs	r2, #14
    1d0c:	f101 000e 	add.w	r0, r1, #14
    1d10:	f00e fccd 	bl	106ae <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1d14:	4807      	ldr	r0, [pc, #28]	; (1d34 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f4>)
    1d16:	2224      	movs	r2, #36	; 0x24
    1d18:	4907      	ldr	r1, [pc, #28]	; (1d38 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f8>)
    1d1a:	301d      	adds	r0, #29
    1d1c:	f00c fa33 	bl	e186 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    1d20:	69e2      	ldr	r2, [r4, #28]
    1d22:	7921      	ldrb	r1, [r4, #4]
    1d24:	7860      	ldrb	r0, [r4, #1]
    1d26:	4790      	blx	r2
    1d28:	2000      	movs	r0, #0
    1d2a:	7020      	strb	r0, [r4, #0]
    1d2c:	bd10      	pop	{r4, pc}
    1d2e:	0000      	.short	0x0000
    1d30:	2000006c 	.word	0x2000006c
    1d34:	20000d9a 	.word	0x20000d9a
    1d38:	00001991 	.word	0x00001991
    1d3c:	4808      	ldr	r0, [pc, #32]	; (1d60 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x14>)
    1d3e:	b510      	push	{r4, lr}
    1d40:	7800      	ldrb	r0, [r0, #0]
    1d42:	2802      	cmp	r0, #2
    1d44:	d004      	beq.n	1d50 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4>
    1d46:	f240 214d 	movw	r1, #589	; 0x24d
    1d4a:	2027      	movs	r0, #39	; 0x27
    1d4c:	f7fe fe98 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1d50:	4904      	ldr	r1, [pc, #16]	; (1d64 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x18>)
    1d52:	2001      	movs	r0, #1
    1d54:	7308      	strb	r0, [r1, #12]
    1d56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1d5a:	f7ff bfc9 	b.w	1cf0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b0>
    1d5e:	0000      	.short	0x0000
    1d60:	2000006c 	.word	0x2000006c
    1d64:	20000d9a 	.word	0x20000d9a
    1d68:	b430      	push	{r4, r5}
    1d6a:	4604      	mov	r4, r0
    1d6c:	480c      	ldr	r0, [pc, #48]	; (1da0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x54>)
    1d6e:	7a00      	ldrb	r0, [r0, #8]
    1d70:	b10b      	cbz	r3, 1d76 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2a>
    1d72:	1d00      	adds	r0, r0, #4
    1d74:	b2c0      	uxtb	r0, r0
    1d76:	b93a      	cbnz	r2, 1d88 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3c>
    1d78:	28ff      	cmp	r0, #255	; 0xff
    1d7a:	d105      	bne.n	1d88 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3c>
    1d7c:	f894 206b 	ldrb.w	r2, [r4, #107]	; 0x6b
    1d80:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
    1d84:	429a      	cmp	r2, r3
    1d86:	d009      	beq.n	1d9c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x50>
    1d88:	b121      	cbz	r1, 1d94 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x48>
    1d8a:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    1d8e:	bc30      	pop	{r4, r5}
    1d90:	f006 baa2 	b.w	82d8 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    1d94:	20ff      	movs	r0, #255	; 0xff
    1d96:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    1d9a:	e7f8      	b.n	1d8e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x42>
    1d9c:	bc30      	pop	{r4, r5}
    1d9e:	4770      	bx	lr
    1da0:	2000006c 	.word	0x2000006c
    1da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1da8:	4607      	mov	r7, r0
    1daa:	f7ff fe19 	bl	19e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa0>
    1dae:	4c21      	ldr	r4, [pc, #132]	; (1e34 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xe8>)
    1db0:	4605      	mov	r5, r0
    1db2:	2601      	movs	r6, #1
    1db4:	6a61      	ldr	r1, [r4, #36]	; 0x24
    1db6:	7808      	ldrb	r0, [r1, #0]
    1db8:	f000 0003 	and.w	r0, r0, #3
    1dbc:	2801      	cmp	r0, #1
    1dbe:	d00c      	beq.n	1dda <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x8e>
    1dc0:	2802      	cmp	r0, #2
    1dc2:	d00a      	beq.n	1dda <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x8e>
    1dc4:	2803      	cmp	r0, #3
    1dc6:	d11b      	bne.n	1e00 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xb4>
    1dc8:	742e      	strb	r6, [r5, #16]
    1dca:	89e0      	ldrh	r0, [r4, #14]
    1dcc:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    1dd0:	81e0      	strh	r0, [r4, #14]
    1dd2:	2001      	movs	r0, #1
    1dd4:	f7ff fdf6 	bl	19c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>
    1dd8:	e012      	b.n	1e00 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xb4>
    1dda:	7848      	ldrb	r0, [r1, #1]
    1ddc:	b180      	cbz	r0, 1e00 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xb4>
    1dde:	89e1      	ldrh	r1, [r4, #14]
    1de0:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    1de4:	81e1      	strh	r1, [r4, #14]
    1de6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    1de8:	2900      	cmp	r1, #0
    1dea:	d018      	beq.n	1e1e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xd2>
    1dec:	28fb      	cmp	r0, #251	; 0xfb
    1dee:	d818      	bhi.n	1e22 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xd6>
    1df0:	7960      	ldrb	r0, [r4, #5]
    1df2:	b120      	cbz	r0, 1dfe <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xb2>
    1df4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    1df8:	2020      	movs	r0, #32
    1dfa:	f7ff bdf7 	b.w	19ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xac>
    1dfe:	703e      	strb	r6, [r7, #0]
    1e00:	7e28      	ldrb	r0, [r5, #24]
    1e02:	2801      	cmp	r0, #1
    1e04:	d012      	beq.n	1e2c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xe0>
    1e06:	762e      	strb	r6, [r5, #24]
    1e08:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1e0a:	7840      	ldrb	r0, [r0, #1]
    1e0c:	2800      	cmp	r0, #0
    1e0e:	d006      	beq.n	1e1e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xd2>
    1e10:	e9f5 0120 	ldrd	r0, r1, [r5, #128]!	; 0x80
    1e14:	1c40      	adds	r0, r0, #1
    1e16:	f141 0100 	adc.w	r1, r1, #0
    1e1a:	e9c5 0100 	strd	r0, r1, [r5]
    1e1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1e22:	7920      	ldrb	r0, [r4, #4]
    1e24:	f040 0010 	orr.w	r0, r0, #16
    1e28:	7120      	strb	r0, [r4, #4]
    1e2a:	e7f8      	b.n	1e1e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xd2>
    1e2c:	2000      	movs	r0, #0
    1e2e:	7628      	strb	r0, [r5, #24]
    1e30:	e7ea      	b.n	1e08 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xbc>
    1e32:	0000      	.short	0x0000
    1e34:	2000006c 	.word	0x2000006c
    1e38:	b570      	push	{r4, r5, r6, lr}
    1e3a:	4605      	mov	r5, r0
    1e3c:	f7ff fdd0 	bl	19e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa0>
    1e40:	4604      	mov	r4, r0
    1e42:	7d80      	ldrb	r0, [r0, #22]
    1e44:	2800      	cmp	r0, #0
    1e46:	d026      	beq.n	1e96 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x14a>
    1e48:	2802      	cmp	r0, #2
    1e4a:	d10c      	bne.n	1e66 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x11a>
    1e4c:	4817      	ldr	r0, [pc, #92]	; (1eac <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x160>)
    1e4e:	4629      	mov	r1, r5
    1e50:	6b40      	ldr	r0, [r0, #52]	; 0x34
    1e52:	f00b fa56 	bl	d302 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    1e56:	b1f8      	cbz	r0, 1e98 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x14c>
    1e58:	e9d4 011e 	ldrd	r0, r1, [r4, #120]	; 0x78
    1e5c:	1c40      	adds	r0, r0, #1
    1e5e:	f141 0100 	adc.w	r1, r1, #0
    1e62:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    1e66:	2500      	movs	r5, #0
    1e68:	75a5      	strb	r5, [r4, #22]
    1e6a:	7c60      	ldrb	r0, [r4, #17]
    1e6c:	2601      	movs	r6, #1
    1e6e:	b170      	cbz	r0, 1e8e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x142>
    1e70:	7465      	strb	r5, [r4, #17]
    1e72:	f7ff fb6f 	bl	1554 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    1e76:	b190      	cbz	r0, 1e9e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x152>
    1e78:	2100      	movs	r1, #0
    1e7a:	2008      	movs	r0, #8
    1e7c:	f7ff fda2 	bl	19c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>
    1e80:	e9d4 011e 	ldrd	r0, r1, [r4, #120]	; 0x78
    1e84:	1c40      	adds	r0, r0, #1
    1e86:	f141 0100 	adc.w	r1, r1, #0
    1e8a:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    1e8e:	7de0      	ldrb	r0, [r4, #23]
    1e90:	2801      	cmp	r0, #1
    1e92:	d009      	beq.n	1ea8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x15c>
    1e94:	75e6      	strb	r6, [r4, #23]
    1e96:	bd70      	pop	{r4, r5, r6, pc}
    1e98:	f240 31e3 	movw	r1, #995	; 0x3e3
    1e9c:	e001      	b.n	1ea2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x156>
    1e9e:	f240 31fa 	movw	r1, #1018	; 0x3fa
    1ea2:	2027      	movs	r0, #39	; 0x27
    1ea4:	f7fe fdec 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1ea8:	75e5      	strb	r5, [r4, #23]
    1eaa:	bd70      	pop	{r4, r5, r6, pc}
    1eac:	2000006c 	.word	0x2000006c
    1eb0:	4803      	ldr	r0, [pc, #12]	; (1ec0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x174>)
    1eb2:	7800      	ldrb	r0, [r0, #0]
    1eb4:	2800      	cmp	r0, #0
    1eb6:	d001      	beq.n	1ebc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x170>
    1eb8:	f7ff bf1a 	b.w	1cf0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b0>
    1ebc:	4770      	bx	lr
    1ebe:	0000      	.short	0x0000
    1ec0:	2000006c 	.word	0x2000006c
    1ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1ec8:	4607      	mov	r7, r0
    1eca:	f7ff fd83 	bl	19d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x94>
    1ece:	4680      	mov	r8, r0
    1ed0:	f7ff fd86 	bl	19e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa0>
    1ed4:	4c17      	ldr	r4, [pc, #92]	; (1f34 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1e8>)
    1ed6:	4605      	mov	r5, r0
    1ed8:	463a      	mov	r2, r7
    1eda:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    1edc:	6260      	str	r0, [r4, #36]	; 0x24
    1ede:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    1ee2:	2101      	movs	r1, #1
    1ee4:	4640      	mov	r0, r8
    1ee6:	f7ff ff3f 	bl	1d68 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1c>
    1eea:	f895 0023 	ldrb.w	r0, [r5, #35]	; 0x23
    1eee:	2600      	movs	r6, #0
    1ef0:	b168      	cbz	r0, 1f0e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1c2>
    1ef2:	6b20      	ldr	r0, [r4, #48]	; 0x30
    1ef4:	f006 f926 	bl	8144 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    1ef8:	480f      	ldr	r0, [pc, #60]	; (1f38 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1ec>)
    1efa:	7606      	strb	r6, [r0, #24]
    1efc:	e9d5 1220 	ldrd	r1, r2, [r5, #128]	; 0x80
    1f00:	e9c0 1204 	strd	r1, r2, [r0, #16]
    1f04:	6b21      	ldr	r1, [r4, #48]	; 0x30
    1f06:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1f08:	f005 fdd6 	bl	7ab8 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    1f0c:	e004      	b.n	1f18 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1cc>
    1f0e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1f10:	f006 f918 	bl	8144 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    1f14:	f005 fe12 	bl	7b3c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    1f18:	b917      	cbnz	r7, 1f20 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1d4>
    1f1a:	4630      	mov	r0, r6
    1f1c:	f005 ffde 	bl	7edc <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    1f20:	2100      	movs	r1, #0
    1f22:	f898 206a 	ldrb.w	r2, [r8, #106]	; 0x6a
    1f26:	4608      	mov	r0, r1
    1f28:	f006 f994 	bl	8254 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    1f2c:	2002      	movs	r0, #2
    1f2e:	7020      	strb	r0, [r4, #0]
    1f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1f34:	2000006c 	.word	0x2000006c
    1f38:	20000d50 	.word	0x20000d50
    1f3c:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    1f40:	4604      	mov	r4, r0
    1f42:	f7ff fd4d 	bl	19e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa0>
    1f46:	4605      	mov	r5, r0
    1f48:	f7ff fd44 	bl	19d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x94>
    1f4c:	f04f 0800 	mov.w	r8, #0
    1f50:	f88d 8000 	strb.w	r8, [sp]
    1f54:	4606      	mov	r6, r0
    1f56:	f8df 9164 	ldr.w	r9, [pc, #356]	; 20bc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x370>
    1f5a:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    1f5e:	4622      	mov	r2, r4
    1f60:	4641      	mov	r1, r8
    1f62:	f7ff ff01 	bl	1d68 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1c>
    1f66:	7da8      	ldrb	r0, [r5, #22]
    1f68:	2701      	movs	r7, #1
    1f6a:	f1a9 0420 	sub.w	r4, r9, #32
    1f6e:	b140      	cbz	r0, 1f82 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x236>
    1f70:	2801      	cmp	r0, #1
    1f72:	d01f      	beq.n	1fb4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x268>
    1f74:	2802      	cmp	r0, #2
    1f76:	d030      	beq.n	1fda <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x28e>
    1f78:	2803      	cmp	r0, #3
    1f7a:	d03c      	beq.n	1ff6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2aa>
    1f7c:	f240 21ff 	movw	r1, #767	; 0x2ff
    1f80:	e058      	b.n	2034 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2e8>
    1f82:	79a0      	ldrb	r0, [r4, #6]
    1f84:	2150      	movs	r1, #80	; 0x50
    1f86:	f8ad 0004 	strh.w	r0, [sp, #4]
    1f8a:	5388      	strh	r0, [r1, r6]
    1f8c:	4648      	mov	r0, r9
    1f8e:	f7ff fb0b 	bl	15a8 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    1f92:	b128      	cbz	r0, 1fa0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x254>
    1f94:	2080      	movs	r0, #128	; 0x80
    1f96:	6a21      	ldr	r1, [r4, #32]
    1f98:	f7ff fd14 	bl	19c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>
    1f9c:	746f      	strb	r7, [r5, #17]
    1f9e:	e02e      	b.n	1ffe <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2b2>
    1fa0:	466a      	mov	r2, sp
    1fa2:	a901      	add	r1, sp, #4
    1fa4:	6b60      	ldr	r0, [r4, #52]	; 0x34
    1fa6:	f00b fd3f 	bl	da28 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    1faa:	6220      	str	r0, [r4, #32]
    1fac:	b110      	cbz	r0, 1fb4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x268>
    1fae:	f895 105d 	ldrb.w	r1, [r5, #93]	; 0x5d
    1fb2:	b111      	cbz	r1, 1fba <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x26e>
    1fb4:	4842      	ldr	r0, [pc, #264]	; (20c0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x374>)
    1fb6:	6220      	str	r0, [r4, #32]
    1fb8:	e021      	b.n	1ffe <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2b2>
    1fba:	f89d 1000 	ldrb.w	r1, [sp]
    1fbe:	b931      	cbnz	r1, 1fce <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x282>
    1fc0:	f8a0 8000 	strh.w	r8, [r0]
    1fc4:	f880 8002 	strb.w	r8, [r0, #2]
    1fc8:	2101      	movs	r1, #1
    1fca:	f00c f895 	bl	e0f8 <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    1fce:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    1fd2:	6a20      	ldr	r0, [r4, #32]
    1fd4:	f00c f82a 	bl	e02c <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI>
    1fd8:	e011      	b.n	1ffe <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2b2>
    1fda:	f8b6 0050 	ldrh.w	r0, [r6, #80]	; 0x50
    1fde:	f8ad 0004 	strh.w	r0, [sp, #4]
    1fe2:	466a      	mov	r2, sp
    1fe4:	a901      	add	r1, sp, #4
    1fe6:	6b60      	ldr	r0, [r4, #52]	; 0x34
    1fe8:	f00b fd1e 	bl	da28 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    1fec:	6220      	str	r0, [r4, #32]
    1fee:	b930      	cbnz	r0, 1ffe <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2b2>
    1ff0:	f240 21e9 	movw	r1, #745	; 0x2e9
    1ff4:	e01e      	b.n	2034 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2e8>
    1ff6:	4648      	mov	r0, r9
    1ff8:	f7ff fad6 	bl	15a8 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    1ffc:	b1c0      	cbz	r0, 2030 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2e4>
    1ffe:	6a20      	ldr	r0, [r4, #32]
    2000:	2308      	movs	r3, #8
    2002:	7801      	ldrb	r1, [r0, #0]
    2004:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
    2008:	7001      	strb	r1, [r0, #0]
    200a:	7dea      	ldrb	r2, [r5, #23]
    200c:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
    2010:	4311      	orrs	r1, r2
    2012:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
    2016:	7001      	strb	r1, [r0, #0]
    2018:	7e2a      	ldrb	r2, [r5, #24]
    201a:	2304      	movs	r3, #4
    201c:	ea03 0282 	and.w	r2, r3, r2, lsl #2
    2020:	4311      	orrs	r1, r2
    2022:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    2026:	7001      	strb	r1, [r0, #0]
    2028:	43c9      	mvns	r1, r1
    202a:	0789      	lsls	r1, r1, #30
    202c:	d005      	beq.n	203a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2ee>
    202e:	e007      	b.n	2040 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2f4>
    2030:	f240 21f2 	movw	r1, #754	; 0x2f2
    2034:	2027      	movs	r0, #39	; 0x27
    2036:	f7fe fd23 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    203a:	78c0      	ldrb	r0, [r0, #3]
    203c:	2802      	cmp	r0, #2
    203e:	d00f      	beq.n	2060 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x314>
    2040:	6b60      	ldr	r0, [r4, #52]	; 0x34
    2042:	f00b fa75 	bl	d530 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    2046:	b108      	cbz	r0, 204c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x300>
    2048:	2101      	movs	r1, #1
    204a:	e00a      	b.n	2062 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x316>
    204c:	6a20      	ldr	r0, [r4, #32]
    204e:	7800      	ldrb	r0, [r0, #0]
    2050:	43c0      	mvns	r0, r0
    2052:	0780      	lsls	r0, r0, #30
    2054:	d004      	beq.n	2060 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x314>
    2056:	f7ff fa65 	bl	1524 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    205a:	f080 0101 	eor.w	r1, r0, #1
    205e:	e000      	b.n	2062 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x316>
    2060:	2100      	movs	r1, #0
    2062:	6a20      	ldr	r0, [r4, #32]
    2064:	7802      	ldrb	r2, [r0, #0]
    2066:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    206a:	7001      	strb	r1, [r0, #0]
    206c:	f895 1022 	ldrb.w	r1, [r5, #34]	; 0x22
    2070:	b181      	cbz	r1, 2094 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x348>
    2072:	7841      	ldrb	r1, [r0, #1]
    2074:	b171      	cbz	r1, 2094 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x348>
    2076:	6b20      	ldr	r0, [r4, #48]	; 0x30
    2078:	f006 f864 	bl	8144 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    207c:	4810      	ldr	r0, [pc, #64]	; (20c0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x374>)
    207e:	3828      	subs	r0, #40	; 0x28
    2080:	7607      	strb	r7, [r0, #24]
    2082:	e9d5 121e 	ldrd	r1, r2, [r5, #120]	; 0x78
    2086:	e9c0 1204 	strd	r1, r2, [r0, #16]
    208a:	6a21      	ldr	r1, [r4, #32]
    208c:	6b20      	ldr	r0, [r4, #48]	; 0x30
    208e:	f005 fd13 	bl	7ab8 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    2092:	e003      	b.n	209c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x350>
    2094:	f006 f856 	bl	8144 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    2098:	f005 fd50 	bl	7b3c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    209c:	f896 206b 	ldrb.w	r2, [r6, #107]	; 0x6b
    20a0:	2101      	movs	r1, #1
    20a2:	2000      	movs	r0, #0
    20a4:	f006 f8d6 	bl	8254 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    20a8:	70e7      	strb	r7, [r4, #3]
    20aa:	6a20      	ldr	r0, [r4, #32]
    20ac:	8801      	ldrh	r1, [r0, #0]
    20ae:	8221      	strh	r1, [r4, #16]
    20b0:	7880      	ldrb	r0, [r0, #2]
    20b2:	74a0      	strb	r0, [r4, #18]
    20b4:	7027      	strb	r7, [r4, #0]
    20b6:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    20ba:	0000      	.short	0x0000
    20bc:	2000008c 	.word	0x2000008c
    20c0:	20000d78 	.word	0x20000d78
    20c4:	00001d3d 	.word	0x00001d3d
    20c8:	00001a8d 	.word	0x00001a8d
    20cc:	00001c35 	.word	0x00001c35
    20d0:	00001eb1 	.word	0x00001eb1

000020d4 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    20d4:	4800      	ldr	r0, [pc, #0]	; (20d8 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    20d6:	4770      	bx	lr
    20d8:	2000180d 	.word	0x2000180d

000020dc <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ>:
    20dc:	b570      	push	{r4, r5, r6, lr}
    20de:	2600      	movs	r6, #0
    20e0:	4635      	mov	r5, r6
    20e2:	4c0f      	ldr	r4, [pc, #60]	; (2120 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x44>)
    20e4:	e018      	b.n	2118 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x3c>
    20e6:	1960      	adds	r0, r4, r5
    20e8:	f890 213b 	ldrb.w	r2, [r0, #315]	; 0x13b
    20ec:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    20f0:	2a01      	cmp	r2, #1
    20f2:	d002      	beq.n	20fa <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x1e>
    20f4:	f890 014b 	ldrb.w	r0, [r0, #331]	; 0x14b
    20f8:	b160      	cbz	r0, 2114 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x38>
    20fa:	480a      	ldr	r0, [pc, #40]	; (2124 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x48>)
    20fc:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    2100:	1c73      	adds	r3, r6, #1
    2102:	5585      	strb	r5, [r0, r6]
    2104:	f891 2153 	ldrb.w	r2, [r1, #339]	; 0x153
    2108:	4630      	mov	r0, r6
    210a:	b2de      	uxtb	r6, r3
    210c:	f501 71aa 	add.w	r1, r1, #340	; 0x154
    2110:	f006 f9c6 	bl	84a0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    2114:	1c6d      	adds	r5, r5, #1
    2116:	b2ed      	uxtb	r5, r5
    2118:	78a0      	ldrb	r0, [r4, #2]
    211a:	42a8      	cmp	r0, r5
    211c:	d8e3      	bhi.n	20e6 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0xa>
    211e:	bd70      	pop	{r4, r5, r6, pc}
    2120:	2000163a 	.word	0x2000163a
    2124:	20000334 	.word	0x20000334

00002128 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    2128:	4904      	ldr	r1, [pc, #16]	; (213c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    212a:	788a      	ldrb	r2, [r1, #2]
    212c:	4282      	cmp	r2, r0
    212e:	d903      	bls.n	2138 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    2130:	4408      	add	r0, r1
    2132:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    2136:	4770      	bx	lr
    2138:	2000      	movs	r0, #0
    213a:	4770      	bx	lr
    213c:	2000163a 	.word	0x2000163a

00002140 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    2140:	4904      	ldr	r1, [pc, #16]	; (2154 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    2142:	788a      	ldrb	r2, [r1, #2]
    2144:	4282      	cmp	r2, r0
    2146:	d903      	bls.n	2150 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    2148:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    214c:	3083      	adds	r0, #131	; 0x83
    214e:	4770      	bx	lr
    2150:	2000      	movs	r0, #0
    2152:	4770      	bx	lr
    2154:	2000163a 	.word	0x2000163a

00002158 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    2158:	4a05      	ldr	r2, [pc, #20]	; (2170 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    215a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    215e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    2162:	6802      	ldr	r2, [r0, #0]
    2164:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
    2168:	8880      	ldrh	r0, [r0, #4]
    216a:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
    216e:	4770      	bx	lr
    2170:	2000163a 	.word	0x2000163a

00002174 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>:
    2174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2178:	4607      	mov	r7, r0
    217a:	2400      	movs	r4, #0
    217c:	4d10      	ldr	r5, [pc, #64]	; (21c0 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x4c>)
    217e:	e019      	b.n	21b4 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x40>
    2180:	4620      	mov	r0, r4
    2182:	f7ff ffdd 	bl	2140 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    2186:	0003      	movs	r3, r0
    2188:	d012      	beq.n	21b0 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x3c>
    218a:	1928      	adds	r0, r5, r4
    218c:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    2190:	b970      	cbnz	r0, 21b0 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x3c>
    2192:	eb04 0044 	add.w	r0, r4, r4, lsl #1
    2196:	eb05 0640 	add.w	r6, r5, r0, lsl #1
    219a:	f206 160b 	addw	r6, r6, #267	; 0x10b
    219e:	463a      	mov	r2, r7
    21a0:	4631      	mov	r1, r6
    21a2:	4618      	mov	r0, r3
    21a4:	f00b fbc3 	bl	d92e <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    21a8:	4630      	mov	r0, r6
    21aa:	4621      	mov	r1, r4
    21ac:	f7ff ffd4 	bl	2158 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    21b0:	1c64      	adds	r4, r4, #1
    21b2:	b2e4      	uxtb	r4, r4
    21b4:	78a8      	ldrb	r0, [r5, #2]
    21b6:	42a0      	cmp	r0, r4
    21b8:	d8e2      	bhi.n	2180 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0xc>
    21ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    21be:	0000      	.short	0x0000
    21c0:	2000163a 	.word	0x2000163a

000021c4 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    21c4:	4904      	ldr	r1, [pc, #16]	; (21d8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    21c6:	788a      	ldrb	r2, [r1, #2]
    21c8:	4282      	cmp	r2, r0
    21ca:	d903      	bls.n	21d4 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    21cc:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    21d0:	1cc0      	adds	r0, r0, #3
    21d2:	4770      	bx	lr
    21d4:	2000      	movs	r0, #0
    21d6:	4770      	bx	lr
    21d8:	2000163a 	.word	0x2000163a

000021dc <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA>:
    21dc:	4908      	ldr	r1, [pc, #32]	; (2200 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x24>)
    21de:	788a      	ldrb	r2, [r1, #2]
    21e0:	4282      	cmp	r2, r0
    21e2:	d903      	bls.n	21ec <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x10>
    21e4:	180a      	adds	r2, r1, r0
    21e6:	f892 2143 	ldrb.w	r2, [r2, #323]	; 0x143
    21ea:	b10a      	cbz	r2, 21f0 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x14>
    21ec:	2000      	movs	r0, #0
    21ee:	4770      	bx	lr
    21f0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    21f4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    21f8:	f200 100b 	addw	r0, r0, #267	; 0x10b
    21fc:	4770      	bx	lr
    21fe:	0000      	.short	0x0000
    2200:	2000163a 	.word	0x2000163a

00002204 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    2204:	b510      	push	{r4, lr}
    2206:	f240 12d3 	movw	r2, #467	; 0x1d3
    220a:	2100      	movs	r1, #0
    220c:	4808      	ldr	r0, [pc, #32]	; (2230 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
    220e:	f00e fac8 	bl	107a2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    2212:	2208      	movs	r2, #8
    2214:	21ff      	movs	r1, #255	; 0xff
    2216:	4807      	ldr	r0, [pc, #28]	; (2234 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    2218:	f00e fac3 	bl	107a2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    221c:	4805      	ldr	r0, [pc, #20]	; (2234 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    221e:	2100      	movs	r1, #0
    2220:	1f00      	subs	r0, r0, #4
    2222:	7001      	strb	r1, [r0, #0]
    2224:	7041      	strb	r1, [r0, #1]
    2226:	f44f 7161 	mov.w	r1, #900	; 0x384
    222a:	8041      	strh	r1, [r0, #2]
    222c:	bd10      	pop	{r4, pc}
    222e:	0000      	.short	0x0000
    2230:	2000163a 	.word	0x2000163a
    2234:	20000334 	.word	0x20000334

00002238 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    2238:	4b0b      	ldr	r3, [pc, #44]	; (2268 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    223a:	b510      	push	{r4, lr}
    223c:	789c      	ldrb	r4, [r3, #2]
    223e:	4284      	cmp	r4, r0
    2240:	d90f      	bls.n	2262 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2a>
    2242:	4418      	add	r0, r3
    2244:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    2248:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    224c:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
    2250:	700b      	strb	r3, [r1, #0]
    2252:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    2256:	6011      	str	r1, [r2, #0]
    2258:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
    225c:	8090      	strh	r0, [r2, #4]
    225e:	2001      	movs	r0, #1
    2260:	bd10      	pop	{r4, pc}
    2262:	2000      	movs	r0, #0
    2264:	bd10      	pop	{r4, pc}
    2266:	0000      	.short	0x0000
    2268:	2000163a 	.word	0x2000163a

0000226c <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
    226c:	4907      	ldr	r1, [pc, #28]	; (228c <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
    226e:	788a      	ldrb	r2, [r1, #2]
    2270:	4282      	cmp	r2, r0
    2272:	d909      	bls.n	2288 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x1c>
    2274:	4408      	add	r0, r1
    2276:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    227a:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    227e:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    2282:	f000 0001 	and.w	r0, r0, #1
    2286:	4770      	bx	lr
    2288:	2000      	movs	r0, #0
    228a:	4770      	bx	lr
    228c:	2000163a 	.word	0x2000163a

00002290 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    2290:	4801      	ldr	r0, [pc, #4]	; (2298 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    2292:	8840      	ldrh	r0, [r0, #2]
    2294:	4770      	bx	lr
    2296:	0000      	.short	0x0000
    2298:	20000330 	.word	0x20000330

0000229c <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A>:
    229c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    22a0:	4614      	mov	r4, r2
    22a2:	2501      	movs	r5, #1
    22a4:	2200      	movs	r2, #0
    22a6:	461f      	mov	r7, r3
    22a8:	462e      	mov	r6, r5
    22aa:	7022      	strb	r2, [r4, #0]
    22ac:	f000 f8f6 	bl	249c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    22b0:	2810      	cmp	r0, #16
    22b2:	d024      	beq.n	22fe <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x62>
    22b4:	f8df 8054 	ldr.w	r8, [pc, #84]	; 230c <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x70>
    22b8:	eb08 01c0 	add.w	r1, r8, r0, lsl #3
    22bc:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    22c0:	f001 0101 	and.w	r1, r1, #1
    22c4:	7021      	strb	r1, [r4, #0]
    22c6:	f000 f8b9 	bl	243c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    22ca:	4604      	mov	r4, r0
    22cc:	2810      	cmp	r0, #16
    22ce:	d016      	beq.n	22fe <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x62>
    22d0:	b107      	cbz	r7, 22d4 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x38>
    22d2:	703c      	strb	r4, [r7, #0]
    22d4:	4620      	mov	r0, r4
    22d6:	f7ff ff75 	bl	21c4 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    22da:	b180      	cbz	r0, 22fe <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x62>
    22dc:	f898 1002 	ldrb.w	r1, [r8, #2]
    22e0:	4640      	mov	r0, r8
    22e2:	42a1      	cmp	r1, r4
    22e4:	d903      	bls.n	22ee <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x52>
    22e6:	1901      	adds	r1, r0, r4
    22e8:	f891 614b 	ldrb.w	r6, [r1, #331]	; 0x14b
    22ec:	e000      	b.n	22f0 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x54>
    22ee:	2600      	movs	r6, #0
    22f0:	eb08 0004 	add.w	r0, r8, r4
    22f4:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    22f8:	2801      	cmp	r0, #1
    22fa:	d004      	beq.n	2306 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x6a>
    22fc:	2500      	movs	r5, #0
    22fe:	ea45 0006 	orr.w	r0, r5, r6
    2302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2306:	2501      	movs	r5, #1
    2308:	e7f9      	b.n	22fe <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x62>
    230a:	0000      	.short	0x0000
    230c:	2000163a 	.word	0x2000163a

00002310 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
    2310:	b570      	push	{r4, r5, r6, lr}
    2312:	460d      	mov	r5, r1
    2314:	4606      	mov	r6, r0
    2316:	f000 f8c1 	bl	249c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    231a:	4c10      	ldr	r4, [pc, #64]	; (235c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x4c>)
    231c:	2810      	cmp	r0, #16
    231e:	d007      	beq.n	2330 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    2320:	eb04 01c0 	add.w	r1, r4, r0, lsl #3
    2324:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    2328:	07c9      	lsls	r1, r1, #31
    232a:	d001      	beq.n	2330 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    232c:	2001      	movs	r0, #1
    232e:	bd70      	pop	{r4, r5, r6, pc}
    2330:	7861      	ldrb	r1, [r4, #1]
    2332:	2908      	cmp	r1, #8
    2334:	d210      	bcs.n	2358 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x48>
    2336:	2810      	cmp	r0, #16
    2338:	d008      	beq.n	234c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3c>
    233a:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    233e:	2101      	movs	r1, #1
    2340:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
    2344:	7860      	ldrb	r0, [r4, #1]
    2346:	1c40      	adds	r0, r0, #1
    2348:	7060      	strb	r0, [r4, #1]
    234a:	e7ef      	b.n	232c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x1c>
    234c:	2201      	movs	r2, #1
    234e:	4629      	mov	r1, r5
    2350:	4630      	mov	r0, r6
    2352:	f000 f887 	bl	2464 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    2356:	e7f5      	b.n	2344 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x34>
    2358:	2000      	movs	r0, #0
    235a:	bd70      	pop	{r4, r5, r6, pc}
    235c:	2000163a 	.word	0x2000163a

00002360 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
    2360:	b570      	push	{r4, r5, r6, lr}
    2362:	4d0b      	ldr	r5, [pc, #44]	; (2390 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x30>)
    2364:	7828      	ldrb	r0, [r5, #0]
    2366:	1e40      	subs	r0, r0, #1
    2368:	b244      	sxtb	r4, r0
    236a:	e00a      	b.n	2382 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x22>
    236c:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    2370:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    2374:	07c0      	lsls	r0, r0, #31
    2376:	d002      	beq.n	237e <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x1e>
    2378:	b2e0      	uxtb	r0, r4
    237a:	f000 f8ed 	bl	2558 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1c0>
    237e:	1e64      	subs	r4, r4, #1
    2380:	b264      	sxtb	r4, r4
    2382:	2c00      	cmp	r4, #0
    2384:	daf2      	bge.n	236c <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xc>
    2386:	4903      	ldr	r1, [pc, #12]	; (2394 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x34>)
    2388:	2000      	movs	r0, #0
    238a:	7048      	strb	r0, [r1, #1]
    238c:	bd70      	pop	{r4, r5, r6, pc}
    238e:	0000      	.short	0x0000
    2390:	2000163a 	.word	0x2000163a
    2394:	20000330 	.word	0x20000330

00002398 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
    2398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    239c:	2400      	movs	r4, #0
    239e:	4625      	mov	r5, r4
    23a0:	4e18      	ldr	r6, [pc, #96]	; (2404 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x6c>)
    23a2:	e029      	b.n	23f8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x60>
    23a4:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
    23a8:	f897 015a 	ldrb.w	r0, [r7, #346]	; 0x15a
    23ac:	07c0      	lsls	r0, r0, #31
    23ae:	d021      	beq.n	23f4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    23b0:	4628      	mov	r0, r5
    23b2:	f000 f843 	bl	243c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    23b6:	4603      	mov	r3, r0
    23b8:	f7ff ff04 	bl	21c4 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    23bc:	4601      	mov	r1, r0
    23be:	2000      	movs	r0, #0
    23c0:	2b10      	cmp	r3, #16
    23c2:	d009      	beq.n	23d8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    23c4:	18f2      	adds	r2, r6, r3
    23c6:	f892 c13b 	ldrb.w	ip, [r2, #315]	; 0x13b
    23ca:	f1bc 0f01 	cmp.w	ip, #1
    23ce:	d002      	beq.n	23d6 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x3e>
    23d0:	f892 214b 	ldrb.w	r2, [r2, #331]	; 0x14b
    23d4:	b102      	cbz	r2, 23d8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    23d6:	2001      	movs	r0, #1
    23d8:	1e40      	subs	r0, r0, #1
    23da:	4201      	tst	r1, r0
    23dc:	d10a      	bne.n	23f4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    23de:	480a      	ldr	r0, [pc, #40]	; (2408 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>)
    23e0:	f507 71aa 	add.w	r1, r7, #340	; 0x154
    23e4:	5503      	strb	r3, [r0, r4]
    23e6:	4620      	mov	r0, r4
    23e8:	1c64      	adds	r4, r4, #1
    23ea:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
    23ee:	b2e4      	uxtb	r4, r4
    23f0:	f006 f856 	bl	84a0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    23f4:	1c6d      	adds	r5, r5, #1
    23f6:	b2ed      	uxtb	r5, r5
    23f8:	7830      	ldrb	r0, [r6, #0]
    23fa:	42a8      	cmp	r0, r5
    23fc:	d8d2      	bhi.n	23a4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc>
    23fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2402:	0000      	.short	0x0000
    2404:	2000163a 	.word	0x2000163a
    2408:	20000334 	.word	0x20000334
    240c:	4602      	mov	r2, r0
    240e:	4809      	ldr	r0, [pc, #36]	; (2434 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9c>)
    2410:	b510      	push	{r4, lr}
    2412:	7800      	ldrb	r0, [r0, #0]
    2414:	460b      	mov	r3, r1
    2416:	b158      	cbz	r0, 2430 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    2418:	4807      	ldr	r0, [pc, #28]	; (2438 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    241a:	7881      	ldrb	r1, [r0, #2]
    241c:	b141      	cbz	r1, 2430 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    241e:	b10b      	cbz	r3, 2424 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    2420:	1cc0      	adds	r0, r0, #3
    2422:	e001      	b.n	2428 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x90>
    2424:	4804      	ldr	r0, [pc, #16]	; (2438 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    2426:	3083      	adds	r0, #131	; 0x83
    2428:	f005 fa4e 	bl	78c8 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    242c:	2001      	movs	r0, #1
    242e:	bd10      	pop	{r4, pc}
    2430:	2000      	movs	r0, #0
    2432:	bd10      	pop	{r4, pc}
    2434:	20000330 	.word	0x20000330
    2438:	2000163a 	.word	0x2000163a
    243c:	4908      	ldr	r1, [pc, #32]	; (2460 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc8>)
    243e:	b510      	push	{r4, lr}
    2440:	4603      	mov	r3, r0
    2442:	2000      	movs	r0, #0
    2444:	788a      	ldrb	r2, [r1, #2]
    2446:	e006      	b.n	2456 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xbe>
    2448:	180c      	adds	r4, r1, r0
    244a:	f894 4103 	ldrb.w	r4, [r4, #259]	; 0x103
    244e:	429c      	cmp	r4, r3
    2450:	d004      	beq.n	245c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc4>
    2452:	1c40      	adds	r0, r0, #1
    2454:	b2c0      	uxtb	r0, r0
    2456:	4282      	cmp	r2, r0
    2458:	d8f6      	bhi.n	2448 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xb0>
    245a:	2010      	movs	r0, #16
    245c:	bd10      	pop	{r4, pc}
    245e:	0000      	.short	0x0000
    2460:	2000163a 	.word	0x2000163a
    2464:	b570      	push	{r4, r5, r6, lr}
    2466:	4b0c      	ldr	r3, [pc, #48]	; (2498 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x100>)
    2468:	4604      	mov	r4, r0
    246a:	7818      	ldrb	r0, [r3, #0]
    246c:	1c45      	adds	r5, r0, #1
    246e:	701d      	strb	r5, [r3, #0]
    2470:	2810      	cmp	r0, #16
    2472:	d303      	bcc.n	247c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe4>
    2474:	2146      	movs	r1, #70	; 0x46
    2476:	2028      	movs	r0, #40	; 0x28
    2478:	f7fe fb02 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    247c:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    2480:	680d      	ldr	r5, [r1, #0]
    2482:	f8c3 5154 	str.w	r5, [r3, #340]	; 0x154
    2486:	8889      	ldrh	r1, [r1, #4]
    2488:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
    248c:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
    2490:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    2494:	bd70      	pop	{r4, r5, r6, pc}
    2496:	0000      	.short	0x0000
    2498:	2000163a 	.word	0x2000163a
    249c:	b5f0      	push	{r4, r5, r6, r7, lr}
    249e:	4c1a      	ldr	r4, [pc, #104]	; (2508 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x170>)
    24a0:	4603      	mov	r3, r0
    24a2:	2000      	movs	r0, #0
    24a4:	7825      	ldrb	r5, [r4, #0]
    24a6:	e02a      	b.n	24fe <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x166>
    24a8:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    24ac:	780f      	ldrb	r7, [r1, #0]
    24ae:	f892 c154 	ldrb.w	ip, [r2, #340]	; 0x154
    24b2:	f892 6153 	ldrb.w	r6, [r2, #339]	; 0x153
    24b6:	ea87 070c 	eor.w	r7, r7, ip
    24ba:	405e      	eors	r6, r3
    24bc:	443e      	add	r6, r7
    24be:	784f      	ldrb	r7, [r1, #1]
    24c0:	f892 c155 	ldrb.w	ip, [r2, #341]	; 0x155
    24c4:	ea87 070c 	eor.w	r7, r7, ip
    24c8:	443e      	add	r6, r7
    24ca:	788f      	ldrb	r7, [r1, #2]
    24cc:	f892 c156 	ldrb.w	ip, [r2, #342]	; 0x156
    24d0:	ea87 070c 	eor.w	r7, r7, ip
    24d4:	443e      	add	r6, r7
    24d6:	78cf      	ldrb	r7, [r1, #3]
    24d8:	f892 c157 	ldrb.w	ip, [r2, #343]	; 0x157
    24dc:	ea87 070c 	eor.w	r7, r7, ip
    24e0:	443e      	add	r6, r7
    24e2:	790f      	ldrb	r7, [r1, #4]
    24e4:	f892 c158 	ldrb.w	ip, [r2, #344]	; 0x158
    24e8:	f892 2159 	ldrb.w	r2, [r2, #345]	; 0x159
    24ec:	ea87 070c 	eor.w	r7, r7, ip
    24f0:	443e      	add	r6, r7
    24f2:	794f      	ldrb	r7, [r1, #5]
    24f4:	4057      	eors	r7, r2
    24f6:	42f7      	cmn	r7, r6
    24f8:	d004      	beq.n	2504 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x16c>
    24fa:	1c40      	adds	r0, r0, #1
    24fc:	b2c0      	uxtb	r0, r0
    24fe:	4285      	cmp	r5, r0
    2500:	d8d2      	bhi.n	24a8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x110>
    2502:	2010      	movs	r0, #16
    2504:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2506:	0000      	.short	0x0000
    2508:	2000163a 	.word	0x2000163a
    250c:	b570      	push	{r4, r5, r6, lr}
    250e:	4605      	mov	r5, r0
    2510:	f7ff ff94 	bl	243c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    2514:	2810      	cmp	r0, #16
    2516:	d11c      	bne.n	2552 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
    2518:	4c0e      	ldr	r4, [pc, #56]	; (2554 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1bc>)
    251a:	7820      	ldrb	r0, [r4, #0]
    251c:	1e40      	subs	r0, r0, #1
    251e:	b2c0      	uxtb	r0, r0
    2520:	7020      	strb	r0, [r4, #0]
    2522:	42a8      	cmp	r0, r5
    2524:	d015      	beq.n	2552 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
    2526:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    252a:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    252e:	f502 7080 	add.w	r0, r2, #256	; 0x100
    2532:	f8d2 2153 	ldr.w	r2, [r2, #339]	; 0x153
    2536:	f8c1 2153 	str.w	r2, [r1, #339]	; 0x153
    253a:	f8d0 0057 	ldr.w	r0, [r0, #87]	; 0x57
    253e:	f8c1 0157 	str.w	r0, [r1, #343]	; 0x157
    2542:	7820      	ldrb	r0, [r4, #0]
    2544:	f7ff ff7a 	bl	243c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    2548:	2810      	cmp	r0, #16
    254a:	d002      	beq.n	2552 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
    254c:	4420      	add	r0, r4
    254e:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
    2552:	bd70      	pop	{r4, r5, r6, pc}
    2554:	2000163a 	.word	0x2000163a
    2558:	4905      	ldr	r1, [pc, #20]	; (2570 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1d8>)
    255a:	784a      	ldrb	r2, [r1, #1]
    255c:	1e52      	subs	r2, r2, #1
    255e:	704a      	strb	r2, [r1, #1]
    2560:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    2564:	2200      	movs	r2, #0
    2566:	f881 215a 	strb.w	r2, [r1, #346]	; 0x15a
    256a:	f7ff bfcf 	b.w	250c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x174>
    256e:	0000      	.short	0x0000
    2570:	2000163a 	.word	0x2000163a

00002574 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>:
    2574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2578:	4604      	mov	r4, r0
    257a:	f100 0788 	add.w	r7, r0, #136	; 0x88
    257e:	b171      	cbz	r1, 259e <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x2a>
    2580:	f104 06ae 	add.w	r6, r4, #174	; 0xae
    2584:	1e75      	subs	r5, r6, #1
    2586:	2901      	cmp	r1, #1
    2588:	d016      	beq.n	25b8 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x44>
    258a:	2902      	cmp	r1, #2
    258c:	d025      	beq.n	25da <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x66>
    258e:	2903      	cmp	r1, #3
    2590:	d110      	bne.n	25b4 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x40>
    2592:	4631      	mov	r1, r6
    2594:	4628      	mov	r0, r5
    2596:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    259a:	f00b bca0 	b.w	dede <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    259e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
    25a2:	2100      	movs	r1, #0
    25a4:	f00e f8fd 	bl	107a2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    25a8:	4638      	mov	r0, r7
    25aa:	f000 f84d 	bl	2648 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0xd4>
    25ae:	2020      	movs	r0, #32
    25b0:	f884 0249 	strb.w	r0, [r4, #585]	; 0x249
    25b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    25b8:	6921      	ldr	r1, [r4, #16]
    25ba:	480d      	ldr	r0, [pc, #52]	; (25f0 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x7c>)
    25bc:	460a      	mov	r2, r1
    25be:	4408      	add	r0, r1
    25c0:	fbb0 f0f1 	udiv	r0, r0, r1
    25c4:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
    25c8:	f640 30b8 	movw	r0, #3000	; 0xbb8
    25cc:	f8a4 00d0 	strh.w	r0, [r4, #208]	; 0xd0
    25d0:	8b63      	ldrh	r3, [r4, #26]
    25d2:	4638      	mov	r0, r7
    25d4:	f000 f80e 	bl	25f4 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x80>
    25d8:	e7db      	b.n	2592 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x1e>
    25da:	6901      	ldr	r1, [r0, #16]
    25dc:	f8b4 3276 	ldrh.w	r3, [r4, #630]	; 0x276
    25e0:	f8d4 2270 	ldr.w	r2, [r4, #624]	; 0x270
    25e4:	4638      	mov	r0, r7
    25e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    25ea:	f000 b803 	b.w	25f4 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x80>
    25ee:	0000      	.short	0x0000
    25f0:	01c9c37f 	.word	0x01c9c37f
    25f4:	b510      	push	{r4, lr}
    25f6:	2400      	movs	r4, #0
    25f8:	f8a0 404e 	strh.w	r4, [r0, #78]	; 0x4e
    25fc:	f830 4f52 	ldrh.w	r4, [r0, #82]!
    2600:	434c      	muls	r4, r1
    2602:	fbb4 f4f2 	udiv	r4, r4, r2
    2606:	f820 4912 	strh.w	r4, [r0], #-18
    260a:	f240 2471 	movw	r4, #625	; 0x271
    260e:	4363      	muls	r3, r4
    2610:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    2614:	1e5b      	subs	r3, r3, #1
    2616:	fbb3 f3f2 	udiv	r3, r3, r2
    261a:	8203      	strh	r3, [r0, #16]
    261c:	4b09      	ldr	r3, [pc, #36]	; (2644 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0xd0>)
    261e:	fbb3 f3f2 	udiv	r3, r3, r2
    2622:	1c5b      	adds	r3, r3, #1
    2624:	82c3      	strh	r3, [r0, #22]
    2626:	8903      	ldrh	r3, [r0, #8]
    2628:	4363      	muls	r3, r4
    262a:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    262e:	1e5b      	subs	r3, r3, #1
    2630:	fbb3 f3f2 	udiv	r3, r3, r2
    2634:	6043      	str	r3, [r0, #4]
    2636:	6803      	ldr	r3, [r0, #0]
    2638:	434b      	muls	r3, r1
    263a:	fbb3 f1f2 	udiv	r1, r3, r2
    263e:	6001      	str	r1, [r0, #0]
    2640:	bd10      	pop	{r4, pc}
    2642:	0000      	.short	0x0000
    2644:	02625a00 	.word	0x02625a00
    2648:	2101      	movs	r1, #1
    264a:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    264e:	490b      	ldr	r1, [pc, #44]	; (267c <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x108>)
    2650:	f8c0 106e 	str.w	r1, [r0, #110]	; 0x6e
    2654:	2107      	movs	r1, #7
    2656:	f8c0 1072 	str.w	r1, [r0, #114]	; 0x72
    265a:	f100 016e 	add.w	r1, r0, #110	; 0x6e
    265e:	780a      	ldrb	r2, [r1, #0]
    2660:	f022 0204 	bic.w	r2, r2, #4
    2664:	700a      	strb	r2, [r1, #0]
    2666:	21fe      	movs	r1, #254	; 0xfe
    2668:	f880 10a6 	strb.w	r1, [r0, #166]	; 0xa6
    266c:	217f      	movs	r1, #127	; 0x7f
    266e:	7641      	strb	r1, [r0, #25]
    2670:	4903      	ldr	r1, [pc, #12]	; (2680 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x10c>)
    2672:	6081      	str	r1, [r0, #8]
    2674:	2100      	movs	r1, #0
    2676:	e9c0 1100 	strd	r1, r1, [r0]
    267a:	4770      	bx	lr
    267c:	3404492f 	.word	0x3404492f
    2680:	fffce000 	.word	0xfffce000

00002684 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>:
    2684:	4902      	ldr	r1, [pc, #8]	; (2690 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ+0xc>)
    2686:	f991 1000 	ldrsb.w	r1, [r1]
    268a:	f00b bbd9 	b.w	de40 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A+0x28>
    268e:	0000      	.short	0x0000
    2690:	20000350 	.word	0x20000350

00002694 <sym_XECBDXJ42XLR262DOTTQGYR47BZ5WSNNCRAJKPI>:
    2694:	4902      	ldr	r1, [pc, #8]	; (26a0 <sym_XECBDXJ42XLR262DOTTQGYR47BZ5WSNNCRAJKPI+0xc>)
    2696:	7809      	ldrb	r1, [r1, #0]
    2698:	4249      	negs	r1, r1
    269a:	b249      	sxtb	r1, r1
    269c:	f00b bbd0 	b.w	de40 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A+0x28>
    26a0:	20000350 	.word	0x20000350

000026a4 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>:
    26a4:	b508      	push	{r3, lr}
    26a6:	207f      	movs	r0, #127	; 0x7f
    26a8:	f88d 0000 	strb.w	r0, [sp]
    26ac:	4668      	mov	r0, sp
    26ae:	f005 fdf7 	bl	82a0 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    26b2:	b140      	cbz	r0, 26c6 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x22>
    26b4:	4805      	ldr	r0, [pc, #20]	; (26cc <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x28>)
    26b6:	7840      	ldrb	r0, [r0, #1]
    26b8:	4240      	negs	r0, r0
    26ba:	b241      	sxtb	r1, r0
    26bc:	f99d 0000 	ldrsb.w	r0, [sp]
    26c0:	f00b fbbe 	bl	de40 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A+0x28>
    26c4:	bd08      	pop	{r3, pc}
    26c6:	f99d 0000 	ldrsb.w	r0, [sp]
    26ca:	bd08      	pop	{r3, pc}
    26cc:	20000350 	.word	0x20000350

000026d0 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ>:
    26d0:	4909      	ldr	r1, [pc, #36]	; (26f8 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x28>)
    26d2:	b508      	push	{r3, lr}
    26d4:	7809      	ldrb	r1, [r1, #0]
    26d6:	f88d 1000 	strb.w	r1, [sp]
    26da:	9900      	ldr	r1, [sp, #0]
    26dc:	9100      	str	r1, [sp, #0]
    26de:	f89d 1000 	ldrb.w	r1, [sp]
    26e2:	b109      	cbz	r1, 26e8 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x18>
    26e4:	2000      	movs	r0, #0
    26e6:	bd08      	pop	{r3, pc}
    26e8:	4903      	ldr	r1, [pc, #12]	; (26f8 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x28>)
    26ea:	f8d1 2001 	ldr.w	r2, [r1, #1]
    26ee:	6002      	str	r2, [r0, #0]
    26f0:	7949      	ldrb	r1, [r1, #5]
    26f2:	7101      	strb	r1, [r0, #4]
    26f4:	2001      	movs	r0, #1
    26f6:	bd08      	pop	{r3, pc}
    26f8:	20000352 	.word	0x20000352

000026fc <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ>:
    26fc:	4905      	ldr	r1, [pc, #20]	; (2714 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x18>)
    26fe:	22ff      	movs	r2, #255	; 0xff
    2700:	700a      	strb	r2, [r1, #0]
    2702:	460a      	mov	r2, r1
    2704:	6803      	ldr	r3, [r0, #0]
    2706:	f8c2 3001 	str.w	r3, [r2, #1]
    270a:	7900      	ldrb	r0, [r0, #4]
    270c:	7150      	strb	r0, [r2, #5]
    270e:	2000      	movs	r0, #0
    2710:	7008      	strb	r0, [r1, #0]
    2712:	4770      	bx	lr
    2714:	20000352 	.word	0x20000352
    2718:	b570      	push	{r4, r5, r6, lr}
    271a:	f890 2032 	ldrb.w	r2, [r0, #50]	; 0x32
    271e:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    2722:	2401      	movs	r4, #1
    2724:	fb03 2101 	mla	r1, r3, r1, r2
    2728:	2225      	movs	r2, #37	; 0x25
    272a:	fbb1 f3f2 	udiv	r3, r1, r2
    272e:	fb02 1113 	mls	r1, r2, r3, r1
    2732:	eb00 02d1 	add.w	r2, r0, r1, lsr #3
    2736:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
    273a:	f001 0307 	and.w	r3, r1, #7
    273e:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
    2742:	fa04 f303 	lsl.w	r3, r4, r3
    2746:	421a      	tst	r2, r3
    2748:	d004      	beq.n	2754 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x58>
    274a:	bf00      	nop
    274c:	f880 1033 	strb.w	r1, [r0, #51]	; 0x33
    2750:	2000      	movs	r0, #0
    2752:	bd70      	pop	{r4, r5, r6, pc}
    2754:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
    2758:	fbb1 f3f2 	udiv	r3, r1, r2
    275c:	fb02 1113 	mls	r1, r2, r3, r1
    2760:	1c49      	adds	r1, r1, #1
    2762:	b2c9      	uxtb	r1, r1
    2764:	2300      	movs	r3, #0
    2766:	18c5      	adds	r5, r0, r3
    2768:	f895 202b 	ldrb.w	r2, [r5, #43]	; 0x2b
    276c:	428a      	cmp	r2, r1
    276e:	d312      	bcc.n	2796 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x9a>
    2770:	f895 5026 	ldrb.w	r5, [r5, #38]	; 0x26
    2774:	2200      	movs	r2, #0
    2776:	bf00      	nop
    2778:	fa04 f602 	lsl.w	r6, r4, r2
    277c:	4235      	tst	r5, r6
    277e:	d001      	beq.n	2784 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x88>
    2780:	1e49      	subs	r1, r1, #1
    2782:	b2c9      	uxtb	r1, r1
    2784:	b121      	cbz	r1, 2790 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x94>
    2786:	1c52      	adds	r2, r2, #1
    2788:	b2d2      	uxtb	r2, r2
    278a:	2a08      	cmp	r2, #8
    278c:	d3f4      	bcc.n	2778 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x7c>
    278e:	e004      	b.n	279a <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x9e>
    2790:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    2794:	e7da      	b.n	274c <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x50>
    2796:	1a89      	subs	r1, r1, r2
    2798:	b2c9      	uxtb	r1, r1
    279a:	1c5b      	adds	r3, r3, #1
    279c:	b2db      	uxtb	r3, r3
    279e:	2b05      	cmp	r3, #5
    27a0:	d3e1      	bcc.n	2766 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x6a>
    27a2:	201f      	movs	r0, #31
    27a4:	bd70      	pop	{r4, r5, r6, pc}
    27a6:	0000      	movs	r0, r0
    27a8:	b570      	push	{r4, r5, r6, lr}
    27aa:	1c49      	adds	r1, r1, #1
    27ac:	2300      	movs	r3, #0
    27ae:	b2c9      	uxtb	r1, r1
    27b0:	2401      	movs	r4, #1
    27b2:	18c5      	adds	r5, r0, r3
    27b4:	79aa      	ldrb	r2, [r5, #6]
    27b6:	428a      	cmp	r2, r1
    27b8:	d312      	bcc.n	27e0 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0xe4>
    27ba:	f895 5001 	ldrb.w	r5, [r5, #1]
    27be:	2200      	movs	r2, #0
    27c0:	fa04 f602 	lsl.w	r6, r4, r2
    27c4:	4235      	tst	r5, r6
    27c6:	d001      	beq.n	27cc <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0xd0>
    27c8:	1e49      	subs	r1, r1, #1
    27ca:	b2c9      	uxtb	r1, r1
    27cc:	b121      	cbz	r1, 27d8 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0xdc>
    27ce:	1c52      	adds	r2, r2, #1
    27d0:	b2d2      	uxtb	r2, r2
    27d2:	2a08      	cmp	r2, #8
    27d4:	d3f4      	bcc.n	27c0 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0xc4>
    27d6:	e005      	b.n	27e4 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0xe8>
    27d8:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
    27dc:	b2c0      	uxtb	r0, r0
    27de:	bd70      	pop	{r4, r5, r6, pc}
    27e0:	1a89      	subs	r1, r1, r2
    27e2:	b2c9      	uxtb	r1, r1
    27e4:	1c5b      	adds	r3, r3, #1
    27e6:	b2db      	uxtb	r3, r3
    27e8:	2b05      	cmp	r3, #5
    27ea:	d3e2      	bcc.n	27b2 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0xb6>
    27ec:	219d      	movs	r1, #157	; 0x9d
    27ee:	2046      	movs	r0, #70	; 0x46
    27f0:	f7fe f946 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

000027f4 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA>:
    27f4:	7841      	ldrb	r1, [r0, #1]
    27f6:	b141      	cbz	r1, 280a <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x16>
    27f8:	78c0      	ldrb	r0, [r0, #3]
    27fa:	282b      	cmp	r0, #43	; 0x2b
    27fc:	d203      	bcs.n	2806 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x12>
    27fe:	4a04      	ldr	r2, [pc, #16]	; (2810 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x1c>)
    2800:	5c10      	ldrb	r0, [r2, r0]
    2802:	4288      	cmp	r0, r1
    2804:	d101      	bne.n	280a <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x16>
    2806:	2001      	movs	r0, #1
    2808:	4770      	bx	lr
    280a:	2000      	movs	r0, #0
    280c:	4770      	bx	lr
    280e:	0000      	.short	0x0000
    2810:	000108ec 	.word	0x000108ec

00002814 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ>:
    2814:	b510      	push	{r4, lr}
    2816:	2201      	movs	r2, #1
    2818:	70c1      	strb	r1, [r0, #3]
    281a:	292b      	cmp	r1, #43	; 0x2b
    281c:	d202      	bcs.n	2824 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x10>
    281e:	4a06      	ldr	r2, [pc, #24]	; (2838 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x24>)
    2820:	5c52      	ldrb	r2, [r2, r1]
    2822:	e006      	b.n	2832 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x1e>
    2824:	29ff      	cmp	r1, #255	; 0xff
    2826:	d004      	beq.n	2832 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x1e>
    2828:	f240 4175 	movw	r1, #1141	; 0x475
    282c:	202a      	movs	r0, #42	; 0x2a
    282e:	f7fe f927 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2832:	7042      	strb	r2, [r0, #1]
    2834:	bd10      	pop	{r4, pc}
    2836:	0000      	.short	0x0000
    2838:	000108ec 	.word	0x000108ec

0000283c <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>:
    283c:	4904      	ldr	r1, [pc, #16]	; (2850 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0x14>)
    283e:	7c89      	ldrb	r1, [r1, #18]
    2840:	0749      	lsls	r1, r1, #29
    2842:	d400      	bmi.n	2846 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0xa>
    2844:	b108      	cbz	r0, 284a <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0xe>
    2846:	2000      	movs	r0, #0
    2848:	4770      	bx	lr
    284a:	2001      	movs	r0, #1
    284c:	4770      	bx	lr
    284e:	0000      	.short	0x0000
    2850:	2000110c 	.word	0x2000110c

00002854 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>:
    2854:	4803      	ldr	r0, [pc, #12]	; (2864 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0x10>)
    2856:	7c80      	ldrb	r0, [r0, #18]
    2858:	0780      	lsls	r0, r0, #30
    285a:	d401      	bmi.n	2860 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0xc>
    285c:	2001      	movs	r0, #1
    285e:	4770      	bx	lr
    2860:	2000      	movs	r0, #0
    2862:	4770      	bx	lr
    2864:	2000110c 	.word	0x2000110c

00002868 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>:
    2868:	4803      	ldr	r0, [pc, #12]	; (2878 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x10>)
    286a:	7c80      	ldrb	r0, [r0, #18]
    286c:	07c0      	lsls	r0, r0, #31
    286e:	d001      	beq.n	2874 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xc>
    2870:	2000      	movs	r0, #0
    2872:	4770      	bx	lr
    2874:	2001      	movs	r0, #1
    2876:	4770      	bx	lr
    2878:	2000110c 	.word	0x2000110c
    287c:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    2880:	4688      	mov	r8, r1
    2882:	4699      	mov	r9, r3
    2884:	4615      	mov	r5, r2
    2886:	4604      	mov	r4, r0
    2888:	a901      	add	r1, sp, #4
    288a:	f00b f92e 	bl	daea <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    288e:	bbb0      	cbnz	r0, 28fe <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x96>
    2890:	9e02      	ldr	r6, [sp, #8]
    2892:	2001      	movs	r0, #1
    2894:	3688      	adds	r6, #136	; 0x88
    2896:	b17d      	cbz	r5, 28b8 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x50>
    2898:	4620      	mov	r0, r4
    289a:	f7fe fcd3 	bl	1244 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    289e:	0004      	movs	r4, r0
    28a0:	d00d      	beq.n	28be <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x56>
    28a2:	4629      	mov	r1, r5
    28a4:	f00a fe16 	bl	d4d4 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    28a8:	b118      	cbz	r0, 28b2 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x4a>
    28aa:	4918      	ldr	r1, [pc, #96]	; (290c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa4>)
    28ac:	8849      	ldrh	r1, [r1, #2]
    28ae:	42a9      	cmp	r1, r5
    28b0:	d207      	bcs.n	28c2 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x5a>
    28b2:	2000      	movs	r0, #0
    28b4:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    28b8:	f886 0024 	strb.w	r0, [r6, #36]	; 0x24
    28bc:	e01f      	b.n	28fe <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x96>
    28be:	2167      	movs	r1, #103	; 0x67
    28c0:	e020      	b.n	2904 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x9c>
    28c2:	4601      	mov	r1, r0
    28c4:	466a      	mov	r2, sp
    28c6:	4620      	mov	r0, r4
    28c8:	f00a fdfd 	bl	d4c6 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    28cc:	9800      	ldr	r0, [sp, #0]
    28ce:	2700      	movs	r7, #0
    28d0:	8007      	strh	r7, [r0, #0]
    28d2:	7087      	strb	r7, [r0, #2]
    28d4:	f896 1024 	ldrb.w	r1, [r6, #36]	; 0x24
    28d8:	b109      	cbz	r1, 28de <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x76>
    28da:	f04f 0802 	mov.w	r8, #2
    28de:	4641      	mov	r1, r8
    28e0:	f00b fc0a 	bl	e0f8 <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    28e4:	9800      	ldr	r0, [sp, #0]
    28e6:	462a      	mov	r2, r5
    28e8:	4649      	mov	r1, r9
    28ea:	1cc0      	adds	r0, r0, #3
    28ec:	f00d fedf 	bl	106ae <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    28f0:	4620      	mov	r0, r4
    28f2:	4629      	mov	r1, r5
    28f4:	f00a fda5 	bl	d442 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    28f8:	b118      	cbz	r0, 2902 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x9a>
    28fa:	f886 7024 	strb.w	r7, [r6, #36]	; 0x24
    28fe:	2001      	movs	r0, #1
    2900:	e7d8      	b.n	28b4 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x4c>
    2902:	217c      	movs	r1, #124	; 0x7c
    2904:	202b      	movs	r0, #43	; 0x2b
    2906:	f7fe f8bb 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    290a:	0000      	.short	0x0000
    290c:	2000110c 	.word	0x2000110c

00002910 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>:
    2910:	4809      	ldr	r0, [pc, #36]	; (2938 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x28>)
    2912:	b082      	sub	sp, #8
    2914:	7a00      	ldrb	r0, [r0, #8]
    2916:	f88d 0000 	strb.w	r0, [sp]
    291a:	9800      	ldr	r0, [sp, #0]
    291c:	9000      	str	r0, [sp, #0]
    291e:	f89d 0000 	ldrb.w	r0, [sp]
    2922:	2800      	cmp	r0, #0
    2924:	d105      	bne.n	2932 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x22>
    2926:	2202      	movs	r2, #2
    2928:	4904      	ldr	r1, [pc, #16]	; (293c <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x2c>)
    292a:	4803      	ldr	r0, [pc, #12]	; (2938 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x28>)
    292c:	b002      	add	sp, #8
    292e:	f00b bc16 	b.w	e15e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    2932:	b002      	add	sp, #8
    2934:	4770      	bx	lr
    2936:	0000      	.short	0x0000
    2938:	20001124 	.word	0x20001124
    293c:	0000e1a5 	.word	0x0000e1a5

00002940 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    2940:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2944:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 2b04 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1c4>
    2948:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 2b08 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1c8>
    294c:	4683      	mov	fp, r0
    294e:	f04f 0901 	mov.w	r9, #1
    2952:	2600      	movs	r6, #0
    2954:	f8d8 0004 	ldr.w	r0, [r8, #4]
    2958:	7a00      	ldrb	r0, [r0, #8]
    295a:	f88d 0000 	strb.w	r0, [sp]
    295e:	9800      	ldr	r0, [sp, #0]
    2960:	9000      	str	r0, [sp, #0]
    2962:	f89d 1000 	ldrb.w	r1, [sp]
    2966:	292a      	cmp	r1, #42	; 0x2a
    2968:	d106      	bne.n	2978 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x38>
    296a:	f89a 1013 	ldrb.w	r1, [sl, #19]
    296e:	b119      	cbz	r1, 2978 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x38>
    2970:	f8ba 0014 	ldrh.w	r0, [sl, #20]
    2974:	2800      	cmp	r0, #0
    2976:	d06f      	beq.n	2a58 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x118>
    2978:	2700      	movs	r7, #0
    297a:	f88d 6000 	strb.w	r6, [sp]
    297e:	4668      	mov	r0, sp
    2980:	f000 f924 	bl	2bcc <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xb0>
    2984:	f89d 1000 	ldrb.w	r1, [sp]
    2988:	2900      	cmp	r1, #0
    298a:	d1f8      	bne.n	297e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3e>
    298c:	2800      	cmp	r0, #0
    298e:	d063      	beq.n	2a58 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x118>
    2990:	4604      	mov	r4, r0
    2992:	7a00      	ldrb	r0, [r0, #8]
    2994:	f88d 0000 	strb.w	r0, [sp]
    2998:	9800      	ldr	r0, [sp, #0]
    299a:	9000      	str	r0, [sp, #0]
    299c:	f89d 5000 	ldrb.w	r5, [sp]
    29a0:	1ea8      	subs	r0, r5, #2
    29a2:	2830      	cmp	r0, #48	; 0x30
    29a4:	d27b      	bcs.n	2a9e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15e>
    29a6:	e8df f000 	tbb	[pc, r0]
    29aa:	3b18      	.short	0x3b18
    29ac:	97359727 	.word	0x97359727
    29b0:	7b977b3b 	.word	0x7b977b3b
    29b4:	7b417b7b 	.word	0x7b417b7b
    29b8:	97359797 	.word	0x97359797
    29bc:	35977b7b 	.word	0x35977b7b
    29c0:	7b979797 	.word	0x7b979797
    29c4:	7b97975a 	.word	0x7b97975a
    29c8:	8f7b7b97 	.word	0x8f7b7b97
    29cc:	2197977b 	.word	0x2197977b
    29d0:	97816963 	.word	0x97816963
    29d4:	97979797 	.word	0x97979797
    29d8:	6397      	.short	0x6397
    29da:	6862      	ldr	r2, [r4, #4]
    29dc:	b912      	cbnz	r2, 29e4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>
    29de:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
    29e2:	e076      	b.n	2ad2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    29e4:	4659      	mov	r1, fp
    29e6:	4620      	mov	r0, r4
    29e8:	4790      	blx	r2
    29ea:	e050      	b.n	2a8e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x14e>
    29ec:	6862      	ldr	r2, [r4, #4]
    29ee:	2a00      	cmp	r2, #0
    29f0:	d1f8      	bne.n	29e4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>
    29f2:	f240 11ad 	movw	r1, #429	; 0x1ad
    29f6:	e06c      	b.n	2ad2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    29f8:	f001 ff70 	bl	48dc <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
    29fc:	b128      	cbz	r0, 2a0a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xca>
    29fe:	6862      	ldr	r2, [r4, #4]
    2a00:	b12a      	cbz	r2, 2a0e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xce>
    2a02:	4659      	mov	r1, fp
    2a04:	4620      	mov	r0, r4
    2a06:	4790      	blx	r2
    2a08:	e07a      	b.n	2b00 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1c0>
    2a0a:	2701      	movs	r7, #1
    2a0c:	e03f      	b.n	2a8e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x14e>
    2a0e:	f240 2133 	movw	r1, #563	; 0x233
    2a12:	e05e      	b.n	2ad2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    2a14:	6862      	ldr	r2, [r4, #4]
    2a16:	2a00      	cmp	r2, #0
    2a18:	d1e4      	bne.n	29e4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>
    2a1a:	f240 213f 	movw	r1, #575	; 0x23f
    2a1e:	e058      	b.n	2ad2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    2a20:	6862      	ldr	r2, [r4, #4]
    2a22:	2a00      	cmp	r2, #0
    2a24:	d1de      	bne.n	29e4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>
    2a26:	f240 214b 	movw	r1, #587	; 0x24b
    2a2a:	e052      	b.n	2ad2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    2a2c:	6860      	ldr	r0, [r4, #4]
    2a2e:	465d      	mov	r5, fp
    2a30:	b180      	cbz	r0, 2a54 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x114>
    2a32:	8804      	ldrh	r4, [r0, #0]
    2a34:	4620      	mov	r0, r4
    2a36:	f7fe fc05 	bl	1244 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    2a3a:	b170      	cbz	r0, 2a5a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11a>
    2a3c:	706e      	strb	r6, [r5, #1]
    2a3e:	220f      	movs	r2, #15
    2a40:	702a      	strb	r2, [r5, #0]
    2a42:	80ec      	strh	r4, [r5, #6]
    2a44:	f8a5 9008 	strh.w	r9, [r5, #8]
    2a48:	4631      	mov	r1, r6
    2a4a:	f885 9004 	strb.w	r9, [r5, #4]
    2a4e:	f00a fdd8 	bl	d602 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    2a52:	e055      	b.n	2b00 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1c0>
    2a54:	21ce      	movs	r1, #206	; 0xce
    2a56:	e03c      	b.n	2ad2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    2a58:	e031      	b.n	2abe <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x17e>
    2a5a:	21ae      	movs	r1, #174	; 0xae
    2a5c:	e039      	b.n	2ad2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    2a5e:	6862      	ldr	r2, [r4, #4]
    2a60:	b11a      	cbz	r2, 2a6a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x12a>
    2a62:	4659      	mov	r1, fp
    2a64:	4620      	mov	r0, r4
    2a66:	4790      	blx	r2
    2a68:	e7cf      	b.n	2a0a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xca>
    2a6a:	f240 2163 	movw	r1, #611	; 0x263
    2a6e:	e030      	b.n	2ad2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    2a70:	6862      	ldr	r2, [r4, #4]
    2a72:	2a00      	cmp	r2, #0
    2a74:	d1b6      	bne.n	29e4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>
    2a76:	f240 216f 	movw	r1, #623	; 0x26f
    2a7a:	e02a      	b.n	2ad2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    2a7c:	f88b 6001 	strb.w	r6, [fp, #1]
    2a80:	211a      	movs	r1, #26
    2a82:	f88b 1000 	strb.w	r1, [fp]
    2a86:	f8d4 1009 	ldr.w	r1, [r4, #9]
    2a8a:	f8cb 1004 	str.w	r1, [fp, #4]
    2a8e:	7226      	strb	r6, [r4, #8]
    2a90:	2d21      	cmp	r5, #33	; 0x21
    2a92:	d024      	beq.n	2ade <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    2a94:	2d14      	cmp	r5, #20
    2a96:	d025      	beq.n	2ae4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1a4>
    2a98:	2d22      	cmp	r5, #34	; 0x22
    2a9a:	d02a      	beq.n	2af2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1b2>
    2a9c:	e02e      	b.n	2afc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1bc>
    2a9e:	e01b      	b.n	2ad8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x198>
    2aa0:	6862      	ldr	r2, [r4, #4]
    2aa2:	2a00      	cmp	r2, #0
    2aa4:	d19e      	bne.n	29e4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>
    2aa6:	f240 2196 	movw	r1, #662	; 0x296
    2aaa:	e012      	b.n	2ad2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    2aac:	4817      	ldr	r0, [pc, #92]	; (2b0c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1cc>)
    2aae:	6802      	ldr	r2, [r0, #0]
    2ab0:	b122      	cbz	r2, 2abc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x17c>
    2ab2:	6860      	ldr	r0, [r4, #4]
    2ab4:	b128      	cbz	r0, 2ac2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x182>
    2ab6:	8800      	ldrh	r0, [r0, #0]
    2ab8:	4659      	mov	r1, fp
    2aba:	4790      	blx	r2
    2abc:	2002      	movs	r0, #2
    2abe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2ac2:	f240 219f 	movw	r1, #671	; 0x29f
    2ac6:	e004      	b.n	2ad2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    2ac8:	6862      	ldr	r2, [r4, #4]
    2aca:	2a00      	cmp	r2, #0
    2acc:	d18a      	bne.n	29e4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>
    2ace:	f44f 712b 	mov.w	r1, #684	; 0x2ac
    2ad2:	2010      	movs	r0, #16
    2ad4:	f7fd ffd4 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2ad8:	f240 21bd 	movw	r1, #701	; 0x2bd
    2adc:	e7f9      	b.n	2ad2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    2ade:	f7ff feb9 	bl	2854 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>
    2ae2:	e008      	b.n	2af6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1b6>
    2ae4:	f89b 000e 	ldrb.w	r0, [fp, #14]
    2ae8:	f000 0001 	and.w	r0, r0, #1
    2aec:	f7ff fea6 	bl	283c <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>
    2af0:	e001      	b.n	2af6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1b6>
    2af2:	f7ff feb9 	bl	2868 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>
    2af6:	2800      	cmp	r0, #0
    2af8:	f47f af2c 	bne.w	2954 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x14>
    2afc:	2f00      	cmp	r7, #0
    2afe:	d1fb      	bne.n	2af8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1b8>
    2b00:	2004      	movs	r0, #4
    2b02:	e7dc      	b.n	2abe <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x17e>
    2b04:	20001138 	.word	0x20001138
    2b08:	2000110c 	.word	0x2000110c
    2b0c:	200000b0 	.word	0x200000b0

00002b10 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    2b10:	4901      	ldr	r1, [pc, #4]	; (2b18 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    2b12:	7008      	strb	r0, [r1, #0]
    2b14:	f000 b8b0 	b.w	2c78 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x15c>
    2b18:	20000358 	.word	0x20000358

00002b1c <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY>:
    2b1c:	4902      	ldr	r1, [pc, #8]	; (2b28 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xc>)
    2b1e:	4801      	ldr	r0, [pc, #4]	; (2b24 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x8>)
    2b20:	6008      	str	r0, [r1, #0]
    2b22:	4770      	bx	lr
    2b24:	00002b2d 	.word	0x00002b2d
    2b28:	200000b0 	.word	0x200000b0
    2b2c:	b538      	push	{r3, r4, r5, lr}
    2b2e:	000d      	movs	r5, r1
    2b30:	d014      	beq.n	2b5c <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x40>
    2b32:	80a8      	strh	r0, [r5, #4]
    2b34:	2100      	movs	r1, #0
    2b36:	7269      	strb	r1, [r5, #9]
    2b38:	f7fe fb6e 	bl	1218 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    2b3c:	4604      	mov	r4, r0
    2b3e:	f00a fca4 	bl	d48a <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    2b42:	b168      	cbz	r0, 2b60 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x44>
    2b44:	4601      	mov	r1, r0
    2b46:	466a      	mov	r2, sp
    2b48:	4620      	mov	r0, r4
    2b4a:	f00a fcbc 	bl	d4c6 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    2b4e:	80e8      	strh	r0, [r5, #6]
    2b50:	b148      	cbz	r0, 2b66 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x4a>
    2b52:	28fb      	cmp	r0, #251	; 0xfb
    2b54:	d90a      	bls.n	2b6c <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x50>
    2b56:	f44f 7186 	mov.w	r1, #268	; 0x10c
    2b5a:	e032      	b.n	2bc2 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xa6>
    2b5c:	21fc      	movs	r1, #252	; 0xfc
    2b5e:	e030      	b.n	2bc2 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xa6>
    2b60:	f240 1105 	movw	r1, #261	; 0x105
    2b64:	e02d      	b.n	2bc2 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xa6>
    2b66:	f44f 7185 	mov.w	r1, #266	; 0x10a
    2b6a:	e02a      	b.n	2bc2 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xa6>
    2b6c:	9800      	ldr	r0, [sp, #0]
    2b6e:	f00b fa81 	bl	e074 <sym_VV6G4PHP6ULWM4Y2LJJIOETDZSUFDXGJCHBQNZI>
    2b72:	2801      	cmp	r0, #1
    2b74:	d004      	beq.n	2b80 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x64>
    2b76:	2802      	cmp	r0, #2
    2b78:	d002      	beq.n	2b80 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x64>
    2b7a:	f44f 718e 	mov.w	r1, #284	; 0x11c
    2b7e:	e020      	b.n	2bc2 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xa6>
    2b80:	7228      	strb	r0, [r5, #8]
    2b82:	6828      	ldr	r0, [r5, #0]
    2b84:	b1a8      	cbz	r0, 2bb2 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x96>
    2b86:	9900      	ldr	r1, [sp, #0]
    2b88:	88ea      	ldrh	r2, [r5, #6]
    2b8a:	1cc9      	adds	r1, r1, #3
    2b8c:	f00d fd8f 	bl	106ae <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2b90:	4620      	mov	r0, r4
    2b92:	f00a fc42 	bl	d41a <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    2b96:	b178      	cbz	r0, 2bb8 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x9c>
    2b98:	4620      	mov	r0, r4
    2b9a:	2100      	movs	r1, #0
    2b9c:	f00a fd31 	bl	d602 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    2ba0:	b168      	cbz	r0, 2bbe <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xa2>
    2ba2:	4809      	ldr	r0, [pc, #36]	; (2bc8 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xac>)
    2ba4:	7cc1      	ldrb	r1, [r0, #19]
    2ba6:	2900      	cmp	r1, #0
    2ba8:	d002      	beq.n	2bb0 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x94>
    2baa:	8a81      	ldrh	r1, [r0, #20]
    2bac:	1e49      	subs	r1, r1, #1
    2bae:	8281      	strh	r1, [r0, #20]
    2bb0:	bd38      	pop	{r3, r4, r5, pc}
    2bb2:	f240 1123 	movw	r1, #291	; 0x123
    2bb6:	e004      	b.n	2bc2 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xa6>
    2bb8:	f44f 7194 	mov.w	r1, #296	; 0x128
    2bbc:	e001      	b.n	2bc2 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xa6>
    2bbe:	f240 112d 	movw	r1, #301	; 0x12d
    2bc2:	2010      	movs	r0, #16
    2bc4:	f7fd ff5c 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2bc8:	2000110c 	.word	0x2000110c
    2bcc:	b538      	push	{r3, r4, r5, lr}
    2bce:	4602      	mov	r2, r0
    2bd0:	4b11      	ldr	r3, [pc, #68]	; (2c18 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xfc>)
    2bd2:	2000      	movs	r0, #0
    2bd4:	7010      	strb	r0, [r2, #0]
    2bd6:	6858      	ldr	r0, [r3, #4]
    2bd8:	7a01      	ldrb	r1, [r0, #8]
    2bda:	f88d 1000 	strb.w	r1, [sp]
    2bde:	9900      	ldr	r1, [sp, #0]
    2be0:	9100      	str	r1, [sp, #0]
    2be2:	f89d 5000 	ldrb.w	r5, [sp]
    2be6:	2401      	movs	r4, #1
    2be8:	2d01      	cmp	r5, #1
    2bea:	d006      	beq.n	2bfa <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xde>
    2bec:	f3ef 8110 	mrs	r1, PRIMASK
    2bf0:	b672      	cpsid	i
    2bf2:	6805      	ldr	r5, [r0, #0]
    2bf4:	605d      	str	r5, [r3, #4]
    2bf6:	b111      	cbz	r1, 2bfe <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xe2>
    2bf8:	e002      	b.n	2c00 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xe4>
    2bfa:	2000      	movs	r0, #0
    2bfc:	bd38      	pop	{r3, r4, r5, pc}
    2bfe:	b662      	cpsie	i
    2c00:	7a01      	ldrb	r1, [r0, #8]
    2c02:	f88d 1000 	strb.w	r1, [sp]
    2c06:	9900      	ldr	r1, [sp, #0]
    2c08:	9100      	str	r1, [sp, #0]
    2c0a:	f89d 3000 	ldrb.w	r3, [sp]
    2c0e:	2b00      	cmp	r3, #0
    2c10:	d1f4      	bne.n	2bfc <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xe0>
    2c12:	7014      	strb	r4, [r2, #0]
    2c14:	bd38      	pop	{r3, r4, r5, pc}
    2c16:	0000      	.short	0x0000
    2c18:	20001138 	.word	0x20001138
    2c1c:	b538      	push	{r3, r4, r5, lr}
    2c1e:	b1d0      	cbz	r0, 2c56 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x13a>
    2c20:	6041      	str	r1, [r0, #4]
    2c22:	f100 0108 	add.w	r1, r0, #8
    2c26:	700a      	strb	r2, [r1, #0]
    2c28:	f3ef 8310 	mrs	r3, PRIMASK
    2c2c:	b672      	cpsid	i
    2c2e:	4c10      	ldr	r4, [pc, #64]	; (2c70 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x154>)
    2c30:	6004      	str	r4, [r0, #0]
    2c32:	1f21      	subs	r1, r4, #4
    2c34:	684a      	ldr	r2, [r1, #4]
    2c36:	b14a      	cbz	r2, 2c4c <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x130>
    2c38:	7a12      	ldrb	r2, [r2, #8]
    2c3a:	f88d 2000 	strb.w	r2, [sp]
    2c3e:	9a00      	ldr	r2, [sp, #0]
    2c40:	9200      	str	r2, [sp, #0]
    2c42:	f89d 5000 	ldrb.w	r5, [sp]
    2c46:	2d01      	cmp	r5, #1
    2c48:	d100      	bne.n	2c4c <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x130>
    2c4a:	600c      	str	r4, [r1, #0]
    2c4c:	680a      	ldr	r2, [r1, #0]
    2c4e:	6010      	str	r0, [r2, #0]
    2c50:	6008      	str	r0, [r1, #0]
    2c52:	b12b      	cbz	r3, 2c60 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x144>
    2c54:	e005      	b.n	2c62 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x146>
    2c56:	f240 21e2 	movw	r1, #738	; 0x2e2
    2c5a:	2010      	movs	r0, #16
    2c5c:	f7fd ff10 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2c60:	b662      	cpsie	i
    2c62:	4804      	ldr	r0, [pc, #16]	; (2c74 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x158>)
    2c64:	7800      	ldrb	r0, [r0, #0]
    2c66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    2c6a:	f009 bc69 	b.w	c540 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2c6e:	0000      	.short	0x0000
    2c70:	2000113c 	.word	0x2000113c
    2c74:	20000358 	.word	0x20000358
    2c78:	4808      	ldr	r0, [pc, #32]	; (2c9c <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x180>)
    2c7a:	b510      	push	{r4, lr}
    2c7c:	2100      	movs	r1, #0
    2c7e:	6141      	str	r1, [r0, #20]
    2c80:	6181      	str	r1, [r0, #24]
    2c82:	61c1      	str	r1, [r0, #28]
    2c84:	6201      	str	r1, [r0, #32]
    2c86:	2212      	movs	r2, #18
    2c88:	f00d fd8b 	bl	107a2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    2c8c:	4803      	ldr	r0, [pc, #12]	; (2c9c <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x180>)
    2c8e:	3014      	adds	r0, #20
    2c90:	2101      	movs	r1, #1
    2c92:	7301      	strb	r1, [r0, #12]
    2c94:	1d01      	adds	r1, r0, #4
    2c96:	6041      	str	r1, [r0, #4]
    2c98:	6001      	str	r1, [r0, #0]
    2c9a:	bd10      	pop	{r4, pc}
    2c9c:	20001124 	.word	0x20001124

00002ca0 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
    2ca0:	b4f0      	push	{r4, r5, r6, r7}
    2ca2:	8150      	strh	r0, [r2, #10]
    2ca4:	890c      	ldrh	r4, [r1, #8]
    2ca6:	4613      	mov	r3, r2
    2ca8:	8194      	strh	r4, [r2, #12]
    2caa:	898a      	ldrh	r2, [r1, #12]
    2cac:	81da      	strh	r2, [r3, #14]
    2cae:	8948      	ldrh	r0, [r1, #10]
    2cb0:	8218      	strh	r0, [r3, #16]
    2cb2:	89cd      	ldrh	r5, [r1, #14]
    2cb4:	825d      	strh	r5, [r3, #18]
    2cb6:	8dce      	ldrh	r6, [r1, #46]	; 0x2e
    2cb8:	42ae      	cmp	r6, r5
    2cba:	d108      	bne.n	2cce <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2e>
    2cbc:	8d4d      	ldrh	r5, [r1, #42]	; 0x2a
    2cbe:	4285      	cmp	r5, r0
    2cc0:	d105      	bne.n	2cce <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2e>
    2cc2:	8e0d      	ldrh	r5, [r1, #48]	; 0x30
    2cc4:	4295      	cmp	r5, r2
    2cc6:	d102      	bne.n	2cce <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2e>
    2cc8:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
    2cca:	42a2      	cmp	r2, r4
    2ccc:	d001      	beq.n	2cd2 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
    2cce:	2201      	movs	r2, #1
    2cd0:	e000      	b.n	2cd4 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x34>
    2cd2:	2200      	movs	r2, #0
    2cd4:	751a      	strb	r2, [r3, #20]
    2cd6:	8548      	strh	r0, [r1, #42]	; 0x2a
    2cd8:	8a58      	ldrh	r0, [r3, #18]
    2cda:	85c8      	strh	r0, [r1, #46]	; 0x2e
    2cdc:	8998      	ldrh	r0, [r3, #12]
    2cde:	8588      	strh	r0, [r1, #44]	; 0x2c
    2ce0:	89d8      	ldrh	r0, [r3, #14]
    2ce2:	8608      	strh	r0, [r1, #48]	; 0x30
    2ce4:	bcf0      	pop	{r4, r5, r6, r7}
    2ce6:	2214      	movs	r2, #20
    2ce8:	4901      	ldr	r1, [pc, #4]	; (2cf0 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x50>)
    2cea:	4618      	mov	r0, r3
    2cec:	f00b ba4b 	b.w	e186 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    2cf0:	0000e363 	.word	0x0000e363

00002cf4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
    2cf4:	8150      	strh	r0, [r2, #10]
    2cf6:	8a88      	ldrh	r0, [r1, #20]
    2cf8:	8190      	strh	r0, [r2, #12]
    2cfa:	8ac8      	ldrh	r0, [r1, #22]
    2cfc:	81d0      	strh	r0, [r2, #14]
    2cfe:	8b08      	ldrh	r0, [r1, #24]
    2d00:	8210      	strh	r0, [r2, #16]
    2d02:	8b48      	ldrh	r0, [r1, #26]
    2d04:	4613      	mov	r3, r2
    2d06:	8250      	strh	r0, [r2, #18]
    2d08:	2221      	movs	r2, #33	; 0x21
    2d0a:	4902      	ldr	r1, [pc, #8]	; (2d14 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x20>)
    2d0c:	4618      	mov	r0, r3
    2d0e:	f00b ba26 	b.w	e15e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    2d12:	0000      	.short	0x0000
    2d14:	0000e399 	.word	0x0000e399

00002d18 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>:
    2d18:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d1a:	f06f 021f 	mvn.w	r2, #31
    2d1e:	0c01      	lsrs	r1, r0, #16
    2d20:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    2d24:	251f      	movs	r5, #31
    2d26:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    2d2a:	3854      	subs	r0, #84	; 0x54
    2d2c:	d00d      	beq.n	2d4a <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    2d2e:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    2d32:	3855      	subs	r0, #85	; 0x55
    2d34:	d009      	beq.n	2d4a <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    2d36:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    2d3a:	38aa      	subs	r0, #170	; 0xaa
    2d3c:	d005      	beq.n	2d4a <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    2d3e:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    2d42:	38aa      	subs	r0, #170	; 0xaa
    2d44:	d001      	beq.n	2d4a <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    2d46:	2001      	movs	r0, #1
    2d48:	e000      	b.n	2d4c <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x34>
    2d4a:	2000      	movs	r0, #0
    2d4c:	2200      	movs	r2, #0
    2d4e:	4613      	mov	r3, r2
    2d50:	ea4f 0402 	mov.w	r4, r2
    2d54:	ea82 0701 	eor.w	r7, r2, r1
    2d58:	43ff      	mvns	r7, r7
    2d5a:	431f      	orrs	r7, r3
    2d5c:	1c7f      	adds	r7, r7, #1
    2d5e:	d00f      	beq.n	2d80 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x68>
    2d60:	f006 0701 	and.w	r7, r6, #1
    2d64:	0852      	lsrs	r2, r2, #1
    2d66:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    2d6a:	f005 0701 	and.w	r7, r5, #1
    2d6e:	085b      	lsrs	r3, r3, #1
    2d70:	0876      	lsrs	r6, r6, #1
    2d72:	086d      	lsrs	r5, r5, #1
    2d74:	1c64      	adds	r4, r4, #1
    2d76:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    2d7a:	2c16      	cmp	r4, #22
    2d7c:	d3ea      	bcc.n	2d54 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x3c>
    2d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2d80:	2000      	movs	r0, #0
    2d82:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002d84 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA>:
    2d84:	b510      	push	{r4, lr}
    2d86:	4604      	mov	r4, r0
    2d88:	f00b fb96 	bl	e4b8 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x58>
    2d8c:	b308      	cbz	r0, 2dd2 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x4e>
    2d8e:	43e0      	mvns	r0, r4
    2d90:	f00b fb92 	bl	e4b8 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x58>
    2d94:	b1e8      	cbz	r0, 2dd2 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x4e>
    2d96:	16a0      	asrs	r0, r4, #26
    2d98:	ea80 0060 	eor.w	r0, r0, r0, asr #1
    2d9c:	1e41      	subs	r1, r0, #1
    2d9e:	4208      	tst	r0, r1
    2da0:	d017      	beq.n	2dd2 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x4e>
    2da2:	4620      	mov	r0, r4
    2da4:	f00b fbd7 	bl	e556 <sym_KX4ODCDF63RBCM4RLVD2FMITN5XCORTH2S6ZQ5A>
    2da8:	2818      	cmp	r0, #24
    2daa:	d812      	bhi.n	2dd2 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x4e>
    2dac:	b2a0      	uxth	r0, r4
    2dae:	ebb0 4f14 	cmp.w	r0, r4, lsr #16
    2db2:	d107      	bne.n	2dc4 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x40>
    2db4:	f04f 11ff 	mov.w	r1, #16711935	; 0xff00ff
    2db8:	ea01 2114 	and.w	r1, r1, r4, lsr #8
    2dbc:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
    2dc0:	4281      	cmp	r1, r0
    2dc2:	d006      	beq.n	2dd2 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x4e>
    2dc4:	4804      	ldr	r0, [pc, #16]	; (2dd8 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x54>)
    2dc6:	4044      	eors	r4, r0
    2dc8:	1e60      	subs	r0, r4, #1
    2dca:	4204      	tst	r4, r0
    2dcc:	d001      	beq.n	2dd2 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x4e>
    2dce:	2001      	movs	r0, #1
    2dd0:	bd10      	pop	{r4, pc}
    2dd2:	2000      	movs	r0, #0
    2dd4:	bd10      	pop	{r4, pc}
    2dd6:	0000      	.short	0x0000
    2dd8:	8e89bed6 	.word	0x8e89bed6

00002ddc <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>:
    2ddc:	b510      	push	{r4, lr}
    2dde:	4804      	ldr	r0, [pc, #16]	; (2df0 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    2de0:	f00b fb7b 	bl	e4da <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x7a>
    2de4:	4802      	ldr	r0, [pc, #8]	; (2df0 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    2de6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2dea:	3008      	adds	r0, #8
    2dec:	f00b bb75 	b.w	e4da <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x7a>
    2df0:	200000b4 	.word	0x200000b4

00002df4 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>:
    2df4:	4801      	ldr	r0, [pc, #4]	; (2dfc <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x8>)
    2df6:	f000 b803 	b.w	2e00 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0xc>
    2dfa:	0000      	.short	0x0000
    2dfc:	200000bc 	.word	0x200000bc
    2e00:	b510      	push	{r4, lr}
    2e02:	e9d0 2100 	ldrd	r2, r1, [r0]
    2e06:	4b09      	ldr	r3, [pc, #36]	; (2e2c <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x38>)
    2e08:	4c09      	ldr	r4, [pc, #36]	; (2e30 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x3c>)
    2e0a:	4353      	muls	r3, r2
    2e0c:	4354      	muls	r4, r2
    2e0e:	4051      	eors	r1, r2
    2e10:	ea81 12b2 	eor.w	r2, r1, r2, ror #6
    2e14:	ea82 2241 	eor.w	r2, r2, r1, lsl #9
    2e18:	ea4f 41f1 	mov.w	r1, r1, ror #19
    2e1c:	e9c0 2100 	strd	r2, r1, [r0]
    2e20:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
    2e24:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2e28:	4618      	mov	r0, r3
    2e2a:	bd10      	pop	{r4, pc}
    2e2c:	c6ef3760 	.word	0xc6ef3760
    2e30:	9e3779bb 	.word	0x9e3779bb

00002e34 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ>:
    2e34:	b570      	push	{r4, r5, r6, lr}
    2e36:	6845      	ldr	r5, [r0, #4]
    2e38:	1d0c      	adds	r4, r1, #4
    2e3a:	2300      	movs	r3, #0
    2e3c:	f895 20a6 	ldrb.w	r2, [r5, #166]	; 0xa6
    2e40:	3588      	adds	r5, #136	; 0x88
    2e42:	2601      	movs	r6, #1
    2e44:	4619      	mov	r1, r3
    2e46:	4628      	mov	r0, r5
    2e48:	f00a fe78 	bl	db3c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    2e4c:	b190      	cbz	r0, 2e74 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ+0x40>
    2e4e:	6820      	ldr	r0, [r4, #0]
    2e50:	4a09      	ldr	r2, [pc, #36]	; (2e78 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ+0x44>)
    2e52:	7921      	ldrb	r1, [r4, #4]
    2e54:	4010      	ands	r0, r2
    2e56:	f8c5 006e 	str.w	r0, [r5, #110]	; 0x6e
    2e5a:	f001 0107 	and.w	r1, r1, #7
    2e5e:	f8c5 1072 	str.w	r1, [r5, #114]	; 0x72
    2e62:	2000      	movs	r0, #0
    2e64:	f8a5 005a 	strh.w	r0, [r5, #90]	; 0x5a
    2e68:	f885 605c 	strb.w	r6, [r5, #92]	; 0x5c
    2e6c:	2004      	movs	r0, #4
    2e6e:	77a8      	strb	r0, [r5, #30]
    2e70:	2000      	movs	r0, #0
    2e72:	bd70      	pop	{r4, r5, r6, pc}
    2e74:	2001      	movs	r0, #1
    2e76:	bd70      	pop	{r4, r5, r6, pc}
    2e78:	3704492f 	.word	0x3704492f

00002e7c <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY>:
    2e7c:	b510      	push	{r4, lr}
    2e7e:	1d04      	adds	r4, r0, #4
    2e80:	f004 fcea 	bl	7858 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    2e84:	4a03      	ldr	r2, [pc, #12]	; (2e94 <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY+0x18>)
    2e86:	f001 0107 	and.w	r1, r1, #7
    2e8a:	4010      	ands	r0, r2
    2e8c:	6020      	str	r0, [r4, #0]
    2e8e:	6061      	str	r1, [r4, #4]
    2e90:	bd10      	pop	{r4, pc}
    2e92:	0000      	.short	0x0000
    2e94:	3704492f 	.word	0x3704492f

00002e98 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI>:
    2e98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2e9c:	4605      	mov	r5, r0
    2e9e:	7803      	ldrb	r3, [r0, #0]
    2ea0:	6840      	ldr	r0, [r0, #4]
    2ea2:	1d0f      	adds	r7, r1, #4
    2ea4:	f100 0688 	add.w	r6, r0, #136	; 0x88
    2ea8:	f500 74a9 	add.w	r4, r0, #338	; 0x152
    2eac:	4680      	mov	r8, r0
    2eae:	7f72      	ldrb	r2, [r6, #29]
    2eb0:	2107      	movs	r1, #7
    2eb2:	4630      	mov	r0, r6
    2eb4:	f00a fe42 	bl	db3c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    2eb8:	b1d0      	cbz	r0, 2ef0 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x58>
    2eba:	6838      	ldr	r0, [r7, #0]
    2ebc:	4a17      	ldr	r2, [pc, #92]	; (2f1c <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x84>)
    2ebe:	7939      	ldrb	r1, [r7, #4]
    2ec0:	4010      	ands	r0, r2
    2ec2:	f8c6 006e 	str.w	r0, [r6, #110]	; 0x6e
    2ec6:	f001 0107 	and.w	r1, r1, #7
    2eca:	f8c6 1072 	str.w	r1, [r6, #114]	; 0x72
    2ece:	2000      	movs	r0, #0
    2ed0:	f886 0058 	strb.w	r0, [r6, #88]	; 0x58
    2ed4:	7770      	strb	r0, [r6, #29]
    2ed6:	6869      	ldr	r1, [r5, #4]
    2ed8:	f881 014b 	strb.w	r0, [r1, #331]	; 0x14b
    2edc:	f894 1068 	ldrb.w	r1, [r4, #104]	; 0x68
    2ee0:	f88d 1000 	strb.w	r1, [sp]
    2ee4:	9900      	ldr	r1, [sp, #0]
    2ee6:	9100      	str	r1, [sp, #0]
    2ee8:	f89d 1000 	ldrb.w	r1, [sp]
    2eec:	b999      	cbnz	r1, 2f16 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x7e>
    2eee:	e002      	b.n	2ef6 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x5e>
    2ef0:	2001      	movs	r0, #1
    2ef2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2ef6:	f8b8 1000 	ldrh.w	r1, [r8]
    2efa:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
    2efe:	f884 0069 	strb.w	r0, [r4, #105]	; 0x69
    2f02:	6839      	ldr	r1, [r7, #0]
    2f04:	66e1      	str	r1, [r4, #108]	; 0x6c
    2f06:	6879      	ldr	r1, [r7, #4]
    2f08:	6721      	str	r1, [r4, #112]	; 0x70
    2f0a:	2208      	movs	r2, #8
    2f0c:	4904      	ldr	r1, [pc, #16]	; (2f20 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x88>)
    2f0e:	f104 0060 	add.w	r0, r4, #96	; 0x60
    2f12:	f00b f924 	bl	e15e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    2f16:	2000      	movs	r0, #0
    2f18:	e7eb      	b.n	2ef2 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x5a>
    2f1a:	0000      	.short	0x0000
    2f1c:	3704492f 	.word	0x3704492f
    2f20:	0000e661 	.word	0x0000e661

00002f24 <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ>:
    2f24:	b570      	push	{r4, r5, r6, lr}
    2f26:	1d0d      	adds	r5, r1, #4
    2f28:	6844      	ldr	r4, [r0, #4]
    2f2a:	f004 fc95 	bl	7858 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    2f2e:	4a06      	ldr	r2, [pc, #24]	; (2f48 <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ+0x24>)
    2f30:	4010      	ands	r0, r2
    2f32:	f001 0207 	and.w	r2, r1, #7
    2f36:	f894 10f6 	ldrb.w	r1, [r4, #246]	; 0xf6
    2f3a:	4001      	ands	r1, r0
    2f3c:	f361 0007 	bfi	r0, r1, #0, #8
    2f40:	6028      	str	r0, [r5, #0]
    2f42:	606a      	str	r2, [r5, #4]
    2f44:	bd70      	pop	{r4, r5, r6, pc}
    2f46:	0000      	.short	0x0000
    2f48:	3704492f 	.word	0x3704492f

00002f4c <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY>:
    2f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2f50:	6844      	ldr	r4, [r0, #4]
    2f52:	460d      	mov	r5, r1
    2f54:	7803      	ldrb	r3, [r0, #0]
    2f56:	f894 20a5 	ldrb.w	r2, [r4, #165]	; 0xa5
    2f5a:	3488      	adds	r4, #136	; 0x88
    2f5c:	2701      	movs	r7, #1
    2f5e:	2108      	movs	r1, #8
    2f60:	4620      	mov	r0, r4
    2f62:	f00a fdeb 	bl	db3c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    2f66:	b930      	cbnz	r0, 2f76 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x2a>
    2f68:	2300      	movs	r3, #0
    2f6a:	7fa2      	ldrb	r2, [r4, #30]
    2f6c:	4619      	mov	r1, r3
    2f6e:	4620      	mov	r0, r4
    2f70:	f00a fde4 	bl	db3c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    2f74:	b320      	cbz	r0, 2fc0 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x74>
    2f76:	f894 005f 	ldrb.w	r0, [r4, #95]	; 0x5f
    2f7a:	f04f 0600 	mov.w	r6, #0
    2f7e:	0780      	lsls	r0, r0, #30
    2f80:	d419      	bmi.n	2fb6 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x6a>
    2f82:	4628      	mov	r0, r5
    2f84:	f00b f8d2 	bl	e12c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI>
    2f88:	f884 0069 	strb.w	r0, [r4, #105]	; 0x69
    2f8c:	f835 0f05 	ldrh.w	r0, [r5, #5]!
    2f90:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
    2f94:	8868      	ldrh	r0, [r5, #2]
    2f96:	f8a4 006c 	strh.w	r0, [r4, #108]	; 0x6c
    2f9a:	f894 005f 	ldrb.w	r0, [r4, #95]	; 0x5f
    2f9e:	f040 0002 	orr.w	r0, r0, #2
    2fa2:	f884 005f 	strb.w	r0, [r4, #95]	; 0x5f
    2fa6:	07c0      	lsls	r0, r0, #31
    2fa8:	d00d      	beq.n	2fc6 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x7a>
    2faa:	2203      	movs	r2, #3
    2fac:	4912      	ldr	r1, [pc, #72]	; (2ff8 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0xac>)
    2fae:	f104 0060 	add.w	r0, r4, #96	; 0x60
    2fb2:	f00b f8e8 	bl	e186 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    2fb6:	f894 005f 	ldrb.w	r0, [r4, #95]	; 0x5f
    2fba:	07c0      	lsls	r0, r0, #31
    2fbc:	d003      	beq.n	2fc6 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x7a>
    2fbe:	e00e      	b.n	2fde <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x92>
    2fc0:	2001      	movs	r0, #1
    2fc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2fc6:	2300      	movs	r3, #0
    2fc8:	7fa2      	ldrb	r2, [r4, #30]
    2fca:	4619      	mov	r1, r3
    2fcc:	4620      	mov	r0, r4
    2fce:	f00a fdb5 	bl	db3c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    2fd2:	b140      	cbz	r0, 2fe6 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x9a>
    2fd4:	77a7      	strb	r7, [r4, #30]
    2fd6:	f884 705c 	strb.w	r7, [r4, #92]	; 0x5c
    2fda:	f8a4 605a 	strh.w	r6, [r4, #90]	; 0x5a
    2fde:	7f60      	ldrb	r0, [r4, #29]
    2fe0:	2801      	cmp	r0, #1
    2fe2:	d004      	beq.n	2fee <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0xa2>
    2fe4:	e006      	b.n	2ff4 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0xa8>
    2fe6:	2148      	movs	r1, #72	; 0x48
    2fe8:	2040      	movs	r0, #64	; 0x40
    2fea:	f7fd fd49 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2fee:	7766      	strb	r6, [r4, #29]
    2ff0:	f884 6058 	strb.w	r6, [r4, #88]	; 0x58
    2ff4:	2000      	movs	r0, #0
    2ff6:	e7e4      	b.n	2fc2 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x76>
    2ff8:	0000e68f 	.word	0x0000e68f

00002ffc <sym_DEQHYPJXYJ4WT7NTOYVXPSGPFEINKR4XQZSCDJY>:
    2ffc:	4907      	ldr	r1, [pc, #28]	; (301c <sym_DEQHYPJXYJ4WT7NTOYVXPSGPFEINKR4XQZSCDJY+0x20>)
    2ffe:	f500 6000 	add.w	r0, r0, #2048	; 0x800
    3002:	1300      	asrs	r0, r0, #12
    3004:	7809      	ldrb	r1, [r1, #0]
    3006:	b240      	sxtb	r0, r0
    3008:	4249      	negs	r1, r1
    300a:	b249      	sxtb	r1, r1
    300c:	4408      	add	r0, r1
    300e:	f300 0007 	ssat	r0, #8, r0
    3012:	2800      	cmp	r0, #0
    3014:	dc00      	bgt.n	3018 <sym_DEQHYPJXYJ4WT7NTOYVXPSGPFEINKR4XQZSCDJY+0x1c>
    3016:	2000      	movs	r0, #0
    3018:	b2c0      	uxtb	r0, r0
    301a:	4770      	bx	lr
    301c:	200000c4 	.word	0x200000c4

00003020 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ>:
    3020:	4a04      	ldr	r2, [pc, #16]	; (3034 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ+0x14>)
    3022:	6892      	ldr	r2, [r2, #8]
    3024:	f5c2 5380 	rsb	r3, r2, #4096	; 0x1000
    3028:	434b      	muls	r3, r1
    302a:	4342      	muls	r2, r0
    302c:	eb03 3022 	add.w	r0, r3, r2, asr #12
    3030:	4770      	bx	lr
    3032:	0000      	.short	0x0000
    3034:	200000c4 	.word	0x200000c4

00003038 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA>:
    3038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    303a:	6844      	ldr	r4, [r0, #4]
    303c:	4606      	mov	r6, r0
    303e:	f104 0588 	add.w	r5, r4, #136	; 0x88
    3042:	f000 f87f 	bl	3144 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x10c>
    3046:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
    304a:	2901      	cmp	r1, #1
    304c:	d11a      	bne.n	3084 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x4c>
    304e:	2800      	cmp	r0, #0
    3050:	d018      	beq.n	3084 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x4c>
    3052:	6870      	ldr	r0, [r6, #4]
    3054:	f890 115a 	ldrb.w	r1, [r0, #346]	; 0x15a
    3058:	f88d 1000 	strb.w	r1, [sp]
    305c:	9900      	ldr	r1, [sp, #0]
    305e:	9100      	str	r1, [sp, #0]
    3060:	f89d 1000 	ldrb.w	r1, [sp]
    3064:	f500 70a9 	add.w	r0, r0, #338	; 0x152
    3068:	2900      	cmp	r1, #0
    306a:	d10b      	bne.n	3084 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x4c>
    306c:	8821      	ldrh	r1, [r4, #0]
    306e:	8141      	strh	r1, [r0, #10]
    3070:	7e69      	ldrb	r1, [r5, #25]
    3072:	7301      	strb	r1, [r0, #12]
    3074:	7ea9      	ldrb	r1, [r5, #26]
    3076:	7341      	strb	r1, [r0, #13]
    3078:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    307c:	221f      	movs	r2, #31
    307e:	4902      	ldr	r1, [pc, #8]	; (3088 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x50>)
    3080:	f00b b86d 	b.w	e15e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    3084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3086:	0000      	.short	0x0000
    3088:	0000e727 	.word	0x0000e727
    308c:	f500 6100 	add.w	r1, r0, #2048	; 0x800
    3090:	4a0d      	ldr	r2, [pc, #52]	; (30c8 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x90>)
    3092:	b510      	push	{r4, lr}
    3094:	f500 6000 	add.w	r0, r0, #2048	; 0x800
    3098:	1309      	asrs	r1, r1, #12
    309a:	1300      	asrs	r0, r0, #12
    309c:	b24b      	sxtb	r3, r1
    309e:	f992 4000 	ldrsb.w	r4, [r2]
    30a2:	4240      	negs	r0, r0
    30a4:	2100      	movs	r1, #0
    30a6:	b240      	sxtb	r0, r0
    30a8:	42a3      	cmp	r3, r4
    30aa:	da02      	bge.n	30b2 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x7a>
    30ac:	f992 1002 	ldrsb.w	r1, [r2, #2]
    30b0:	e005      	b.n	30be <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x86>
    30b2:	f992 4001 	ldrsb.w	r4, [r2, #1]
    30b6:	42a3      	cmp	r3, r4
    30b8:	dd04      	ble.n	30c4 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x8c>
    30ba:	f992 1003 	ldrsb.w	r1, [r2, #3]
    30be:	4408      	add	r0, r1
    30c0:	f300 0107 	ssat	r1, #8, r0
    30c4:	4608      	mov	r0, r1
    30c6:	bd10      	pop	{r4, pc}
    30c8:	200000c4 	.word	0x200000c4
    30cc:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    30d0:	2200      	movs	r2, #0
    30d2:	704a      	strb	r2, [r1, #1]
    30d4:	f5a0 75fe 	sub.w	r5, r0, #508	; 0x1fc
    30d8:	700a      	strb	r2, [r1, #0]
    30da:	f5a0 74ba 	sub.w	r4, r0, #372	; 0x174
    30de:	f895 006b 	ldrb.w	r0, [r5, #107]	; 0x6b
    30e2:	f00c f932 	bl	f34a <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y>
    30e6:	4606      	mov	r6, r0
    30e8:	68a0      	ldr	r0, [r4, #8]
    30ea:	f7ff ffcf 	bl	308c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x54>
    30ee:	0007      	movs	r7, r0
    30f0:	d021      	beq.n	3136 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xfe>
    30f2:	4620      	mov	r0, r4
    30f4:	f00b fb1f 	bl	e736 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x66>
    30f8:	2800      	cmp	r0, #0
    30fa:	d01c      	beq.n	3136 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xfe>
    30fc:	8828      	ldrh	r0, [r5, #0]
    30fe:	4669      	mov	r1, sp
    3100:	f00a fcf3 	bl	daea <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    3104:	b118      	cbz	r0, 310e <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xd6>
    3106:	2189      	movs	r1, #137	; 0x89
    3108:	207a      	movs	r0, #122	; 0x7a
    310a:	f7fd fcb9 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    310e:	1c76      	adds	r6, r6, #1
    3110:	b2f1      	uxtb	r1, r6
    3112:	2302      	movs	r3, #2
    3114:	463a      	mov	r2, r7
    3116:	4668      	mov	r0, sp
    3118:	f00c f936 	bl	f388 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I>
    311c:	2800      	cmp	r0, #0
    311e:	d10a      	bne.n	3136 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xfe>
    3120:	4806      	ldr	r0, [pc, #24]	; (313c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x104>)
    3122:	4907      	ldr	r1, [pc, #28]	; (3140 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x108>)
    3124:	7900      	ldrb	r0, [r0, #4]
    3126:	fba0 6501 	umull	r6, r5, r0, r1
    312a:	f008 f851 	bl	b1d0 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    312e:	1980      	adds	r0, r0, r6
    3130:	4169      	adcs	r1, r5
    3132:	e9c4 0100 	strd	r0, r1, [r4]
    3136:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    313a:	0000      	.short	0x0000
    313c:	200000c4 	.word	0x200000c4
    3140:	000f4240 	.word	0x000f4240
    3144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3148:	4607      	mov	r7, r0
    314a:	f7ff faab 	bl	26a4 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
    314e:	687c      	ldr	r4, [r7, #4]
    3150:	4605      	mov	r5, r0
    3152:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1
    3156:	3488      	adds	r4, #136	; 0x88
    3158:	287f      	cmp	r0, #127	; 0x7f
    315a:	d03c      	beq.n	31d6 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x19e>
    315c:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    3160:	687e      	ldr	r6, [r7, #4]
    3162:	76a0      	strb	r0, [r4, #26]
    3164:	4629      	mov	r1, r5
    3166:	68a0      	ldr	r0, [r4, #8]
    3168:	f7ff ff5a 	bl	3020 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ>
    316c:	60a0      	str	r0, [r4, #8]
    316e:	481b      	ldr	r0, [pc, #108]	; (31dc <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x1a4>)
    3170:	7940      	ldrb	r0, [r0, #5]
    3172:	b190      	cbz	r0, 319a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x162>
    3174:	6878      	ldr	r0, [r7, #4]
    3176:	f100 0888 	add.w	r8, r0, #136	; 0x88
    317a:	f8d0 0090 	ldr.w	r0, [r0, #144]	; 0x90
    317e:	f7ff ff85 	bl	308c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x54>
    3182:	b150      	cbz	r0, 319a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x162>
    3184:	4640      	mov	r0, r8
    3186:	f00b fad6 	bl	e736 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x66>
    318a:	b130      	cbz	r0, 319a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x162>
    318c:	6878      	ldr	r0, [r7, #4]
    318e:	2231      	movs	r2, #49	; 0x31
    3190:	4913      	ldr	r1, [pc, #76]	; (31e0 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x1a8>)
    3192:	f500 70fe 	add.w	r0, r0, #508	; 0x1fc
    3196:	f00a fff6 	bl	e186 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    319a:	f994 001b 	ldrsb.w	r0, [r4, #27]
    319e:	2100      	movs	r1, #0
    31a0:	1a28      	subs	r0, r5, r0
    31a2:	d500      	bpl.n	31a6 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x16e>
    31a4:	4240      	negs	r0, r0
    31a6:	f896 2029 	ldrb.w	r2, [r6, #41]	; 0x29
    31aa:	4282      	cmp	r2, r0
    31ac:	dc10      	bgt.n	31d0 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x198>
    31ae:	2aff      	cmp	r2, #255	; 0xff
    31b0:	d00e      	beq.n	31d0 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x198>
    31b2:	7f20      	ldrb	r0, [r4, #28]
    31b4:	1c40      	adds	r0, r0, #1
    31b6:	b2c0      	uxtb	r0, r0
    31b8:	7720      	strb	r0, [r4, #28]
    31ba:	f896 202a 	ldrb.w	r2, [r6, #42]	; 0x2a
    31be:	4290      	cmp	r0, r2
    31c0:	d802      	bhi.n	31c8 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x190>
    31c2:	7ee0      	ldrb	r0, [r4, #27]
    31c4:	287f      	cmp	r0, #127	; 0x7f
    31c6:	d103      	bne.n	31d0 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x198>
    31c8:	2000      	movs	r0, #0
    31ca:	76e5      	strb	r5, [r4, #27]
    31cc:	7720      	strb	r0, [r4, #28]
    31ce:	2101      	movs	r1, #1
    31d0:	4608      	mov	r0, r1
    31d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    31d6:	2000      	movs	r0, #0
    31d8:	e7fb      	b.n	31d2 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x19a>
    31da:	0000      	.short	0x0000
    31dc:	200000c4 	.word	0x200000c4
    31e0:	000030cd 	.word	0x000030cd

000031e4 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>:
    31e4:	4801      	ldr	r0, [pc, #4]	; (31ec <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY+0x8>)
    31e6:	6840      	ldr	r0, [r0, #4]
    31e8:	30a0      	adds	r0, #160	; 0xa0
    31ea:	4770      	bx	lr
    31ec:	200000d0 	.word	0x200000d0

000031f0 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>:
    31f0:	b510      	push	{r4, lr}
    31f2:	4c21      	ldr	r4, [pc, #132]	; (3278 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x88>)
    31f4:	6860      	ldr	r0, [r4, #4]
    31f6:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
    31fa:	f00b fac5 	bl	e788 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xb8>
    31fe:	6861      	ldr	r1, [r4, #4]
    3200:	f881 0049 	strb.w	r0, [r1, #73]	; 0x49
    3204:	314a      	adds	r1, #74	; 0x4a
    3206:	f7fe fa1b 	bl	1640 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    320a:	6860      	ldr	r0, [r4, #4]
    320c:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
    3210:	f00b fac1 	bl	e796 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xc6>
    3214:	6861      	ldr	r1, [r4, #4]
    3216:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    321a:	f891 0049 	ldrb.w	r0, [r1, #73]	; 0x49
    321e:	314a      	adds	r1, #74	; 0x4a
    3220:	f00b fa9e 	bl	e760 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x90>
    3224:	b930      	cbnz	r0, 3234 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x44>
    3226:	6861      	ldr	r1, [r4, #4]
    3228:	f891 0049 	ldrb.w	r0, [r1, #73]	; 0x49
    322c:	314a      	adds	r1, #74	; 0x4a
    322e:	f00b faa0 	bl	e772 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xa2>
    3232:	b108      	cbz	r0, 3238 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x48>
    3234:	2101      	movs	r1, #1
    3236:	e000      	b.n	323a <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x4a>
    3238:	2100      	movs	r1, #0
    323a:	6860      	ldr	r0, [r4, #4]
    323c:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
    3240:	b919      	cbnz	r1, 324a <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x5a>
    3242:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    3246:	2800      	cmp	r0, #0
    3248:	d014      	beq.n	3274 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x84>
    324a:	f7ff f821 	bl	2290 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    324e:	490b      	ldr	r1, [pc, #44]	; (327c <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x8c>)
    3250:	fba0 2301 	umull	r2, r3, r0, r1
    3254:	6860      	ldr	r0, [r4, #4]
    3256:	3090      	adds	r0, #144	; 0x90
    3258:	f00b faef 	bl	e83a <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x90>
    325c:	6860      	ldr	r0, [r4, #4]
    325e:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    3262:	b110      	cbz	r0, 326a <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x7a>
    3264:	2000      	movs	r0, #0
    3266:	f7fe ff85 	bl	2174 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>
    326a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    326e:	2000      	movs	r0, #0
    3270:	f000 be38 	b.w	3ee4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8e0>
    3274:	bd10      	pop	{r4, pc}
    3276:	0000      	.short	0x0000
    3278:	200000d0 	.word	0x200000d0
    327c:	000f4240 	.word	0x000f4240

00003280 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>:
    3280:	4a04      	ldr	r2, [pc, #16]	; (3294 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY+0x14>)
    3282:	2803      	cmp	r0, #3
    3284:	6852      	ldr	r2, [r2, #4]
    3286:	d100      	bne.n	328a <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY+0xa>
    3288:	6551      	str	r1, [r2, #84]	; 0x54
    328a:	f882 0058 	strb.w	r0, [r2, #88]	; 0x58
    328e:	2000      	movs	r0, #0
    3290:	4770      	bx	lr
    3292:	0000      	.short	0x0000
    3294:	200000d0 	.word	0x200000d0

00003298 <sym_TNTVRUTCX6QDICT5SCWQINK5TBPSWJENFWCYQCI>:
    3298:	4806      	ldr	r0, [pc, #24]	; (32b4 <sym_TNTVRUTCX6QDICT5SCWQINK5TBPSWJENFWCYQCI+0x1c>)
    329a:	b508      	push	{r3, lr}
    329c:	6840      	ldr	r0, [r0, #4]
    329e:	7a00      	ldrb	r0, [r0, #8]
    32a0:	f88d 0000 	strb.w	r0, [sp]
    32a4:	9800      	ldr	r0, [sp, #0]
    32a6:	9000      	str	r0, [sp, #0]
    32a8:	f89d 0000 	ldrb.w	r0, [sp]
    32ac:	2800      	cmp	r0, #0
    32ae:	d000      	beq.n	32b2 <sym_TNTVRUTCX6QDICT5SCWQINK5TBPSWJENFWCYQCI+0x1a>
    32b0:	2001      	movs	r0, #1
    32b2:	bd08      	pop	{r3, pc}
    32b4:	200000d0 	.word	0x200000d0

000032b8 <sym_VK3LYWW654ZNWB44W7VFNFGOUDPRKIGF72NOIJQ>:
    32b8:	4902      	ldr	r1, [pc, #8]	; (32c4 <sym_VK3LYWW654ZNWB44W7VFNFGOUDPRKIGF72NOIJQ+0xc>)
    32ba:	6849      	ldr	r1, [r1, #4]
    32bc:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    32c0:	2000      	movs	r0, #0
    32c2:	4770      	bx	lr
    32c4:	200000d0 	.word	0x200000d0

000032c8 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI>:
    32c8:	480a      	ldr	r0, [pc, #40]	; (32f4 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x2c>)
    32ca:	6841      	ldr	r1, [r0, #4]
    32cc:	6e88      	ldr	r0, [r1, #104]	; 0x68
    32ce:	b170      	cbz	r0, 32ee <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x26>
    32d0:	f101 006d 	add.w	r0, r1, #109	; 0x6d
    32d4:	22ff      	movs	r2, #255	; 0xff
    32d6:	7002      	strb	r2, [r0, #0]
    32d8:	2200      	movs	r2, #0
    32da:	668a      	str	r2, [r1, #104]	; 0x68
    32dc:	7002      	strb	r2, [r0, #0]
    32de:	f891 106c 	ldrb.w	r1, [r1, #108]	; 0x6c
    32e2:	2001      	movs	r0, #1
    32e4:	4088      	lsls	r0, r1
    32e6:	4904      	ldr	r1, [pc, #16]	; (32f8 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x30>)
    32e8:	6008      	str	r0, [r1, #0]
    32ea:	2000      	movs	r0, #0
    32ec:	4770      	bx	lr
    32ee:	200c      	movs	r0, #12
    32f0:	4770      	bx	lr
    32f2:	0000      	.short	0x0000
    32f4:	200000d0 	.word	0x200000d0
    32f8:	4001f508 	.word	0x4001f508

000032fc <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY>:
    32fc:	4602      	mov	r2, r0
    32fe:	480c      	ldr	r0, [pc, #48]	; (3330 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x34>)
    3300:	b510      	push	{r4, lr}
    3302:	6082      	str	r2, [r0, #8]
    3304:	68c0      	ldr	r0, [r0, #12]
    3306:	460c      	mov	r4, r1
    3308:	b168      	cbz	r0, 3326 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x2a>
    330a:	f000 ffe5 	bl	42d8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2d8>
    330e:	f00b fb7a 	bl	ea06 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY>
    3312:	4620      	mov	r0, r4
    3314:	f000 f8c0 	bl	3498 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>
    3318:	2800      	cmp	r0, #0
    331a:	d007      	beq.n	332c <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x30>
    331c:	f640 119d 	movw	r1, #2461	; 0x99d
    3320:	2032      	movs	r0, #50	; 0x32
    3322:	f7fd fbad 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3326:	f640 1197 	movw	r1, #2455	; 0x997
    332a:	e7f9      	b.n	3320 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x24>
    332c:	bd10      	pop	{r4, pc}
    332e:	0000      	.short	0x0000
    3330:	200000d0 	.word	0x200000d0

00003334 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI>:
    3334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3338:	4c0f      	ldr	r4, [pc, #60]	; (3378 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x44>)
    333a:	4605      	mov	r5, r0
    333c:	4616      	mov	r6, r2
    333e:	6860      	ldr	r0, [r4, #4]
    3340:	460f      	mov	r7, r1
    3342:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
    3346:	f00b fa26 	bl	e796 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xc6>
    334a:	b158      	cbz	r0, 3364 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x30>
    334c:	b955      	cbnz	r5, 3364 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x30>
    334e:	4638      	mov	r0, r7
    3350:	f00b fa1a 	bl	e788 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xb8>
    3354:	4631      	mov	r1, r6
    3356:	f00a fb76 	bl	da46 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    335a:	2808      	cmp	r0, #8
    335c:	d002      	beq.n	3364 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x30>
    335e:	2001      	movs	r0, #1
    3360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3364:	6860      	ldr	r0, [r4, #4]
    3366:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
    336a:	f00b fa0d 	bl	e788 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xb8>
    336e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3372:	f7fe b991 	b.w	1698 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    3376:	0000      	.short	0x0000
    3378:	200000d0 	.word	0x200000d0

0000337c <sym_MSYMIWR3PI6HXHUAZX2P7HGFCTCK3HSW5N3BC2A>:
    337c:	b510      	push	{r4, lr}
    337e:	4c0a      	ldr	r4, [pc, #40]	; (33a8 <sym_MSYMIWR3PI6HXHUAZX2P7HGFCTCK3HSW5N3BC2A+0x2c>)
    3380:	6860      	ldr	r0, [r4, #4]
    3382:	6d41      	ldr	r1, [r0, #84]	; 0x54
    3384:	b159      	cbz	r1, 339e <sym_MSYMIWR3PI6HXHUAZX2P7HGFCTCK3HSW5N3BC2A+0x22>
    3386:	2202      	movs	r2, #2
    3388:	7242      	strb	r2, [r0, #9]
    338a:	8809      	ldrh	r1, [r1, #0]
    338c:	8141      	strh	r1, [r0, #10]
    338e:	2212      	movs	r2, #18
    3390:	4906      	ldr	r1, [pc, #24]	; (33ac <sym_MSYMIWR3PI6HXHUAZX2P7HGFCTCK3HSW5N3BC2A+0x30>)
    3392:	f00a fee4 	bl	e15e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    3396:	6861      	ldr	r1, [r4, #4]
    3398:	2000      	movs	r0, #0
    339a:	6548      	str	r0, [r1, #84]	; 0x54
    339c:	bd10      	pop	{r4, pc}
    339e:	f240 4122 	movw	r1, #1058	; 0x422
    33a2:	2032      	movs	r0, #50	; 0x32
    33a4:	f7fd fb6c 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    33a8:	200000d0 	.word	0x200000d0
    33ac:	000036e1 	.word	0x000036e1

000033b0 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY>:
    33b0:	b570      	push	{r4, r5, r6, lr}
    33b2:	4c13      	ldr	r4, [pc, #76]	; (3400 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x50>)
    33b4:	4615      	mov	r5, r2
    33b6:	460e      	mov	r6, r1
    33b8:	2800      	cmp	r0, #0
    33ba:	d016      	beq.n	33ea <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x3a>
    33bc:	f04f 0200 	mov.w	r2, #0
    33c0:	6861      	ldr	r1, [r4, #4]
    33c2:	f801 2f51 	strb.w	r2, [r1, #81]!
    33c6:	7248      	strb	r0, [r1, #9]
    33c8:	f04f 0008 	mov.w	r0, #8
    33cc:	f881 002a 	strb.w	r0, [r1, #42]	; 0x2a
    33d0:	d114      	bne.n	33fc <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x4c>
    33d2:	4630      	mov	r0, r6
    33d4:	f00b f9d8 	bl	e788 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xb8>
    33d8:	4629      	mov	r1, r5
    33da:	f00a fb34 	bl	da46 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    33de:	6861      	ldr	r1, [r4, #4]
    33e0:	2808      	cmp	r0, #8
    33e2:	f881 007b 	strb.w	r0, [r1, #123]	; 0x7b
    33e6:	d003      	beq.n	33f0 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x40>
    33e8:	e008      	b.n	33fc <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x4c>
    33ea:	f04f 0201 	mov.w	r2, #1
    33ee:	e7e7      	b.n	33c0 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x10>
    33f0:	4630      	mov	r0, r6
    33f2:	f00b f9d0 	bl	e796 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xc6>
    33f6:	b108      	cbz	r0, 33fc <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x4c>
    33f8:	2012      	movs	r0, #18
    33fa:	bd70      	pop	{r4, r5, r6, pc}
    33fc:	2000      	movs	r0, #0
    33fe:	bd70      	pop	{r4, r5, r6, pc}
    3400:	200000d0 	.word	0x200000d0

00003404 <sym_IRV7IF6I52F3HYHZNFCDRHHNP7EOMECHNPGJUGI>:
    3404:	b510      	push	{r4, lr}
    3406:	b1b1      	cbz	r1, 3436 <sym_IRV7IF6I52F3HYHZNFCDRHHNP7EOMECHNPGJUGI+0x32>
    3408:	4a0d      	ldr	r2, [pc, #52]	; (3440 <sym_IRV7IF6I52F3HYHZNFCDRHHNP7EOMECHNPGJUGI+0x3c>)
    340a:	6852      	ldr	r2, [r2, #4]
    340c:	f882 005f 	strb.w	r0, [r2, #95]	; 0x5f
    3410:	6808      	ldr	r0, [r1, #0]
    3412:	6610      	str	r0, [r2, #96]	; 0x60
    3414:	8888      	ldrh	r0, [r1, #4]
    3416:	f8a2 0064 	strh.w	r0, [r2, #100]	; 0x64
    341a:	f892 0049 	ldrb.w	r0, [r2, #73]	; 0x49
    341e:	f852 1f54 	ldr.w	r1, [r2, #84]!
    3422:	7248      	strb	r0, [r1, #9]
    3424:	f852 0908 	ldr.w	r0, [r2], #-8
    3428:	f852 1c02 	ldr.w	r1, [r2, #-2]
    342c:	f8c0 100a 	str.w	r1, [r0, #10]
    3430:	8851      	ldrh	r1, [r2, #2]
    3432:	81c1      	strh	r1, [r0, #14]
    3434:	bd10      	pop	{r4, pc}
    3436:	f640 31a7 	movw	r1, #2983	; 0xba7
    343a:	2032      	movs	r0, #50	; 0x32
    343c:	f7fd fb20 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3440:	200000d0 	.word	0x200000d0

00003444 <sym_K7SQKMVWESLZUZE22L4CEOMCL4JSVJET4SYEPLI>:
    3444:	4902      	ldr	r1, [pc, #8]	; (3450 <sym_K7SQKMVWESLZUZE22L4CEOMCL4JSVJET4SYEPLI+0xc>)
    3446:	4801      	ldr	r0, [pc, #4]	; (344c <sym_K7SQKMVWESLZUZE22L4CEOMCL4JSVJET4SYEPLI+0x8>)
    3448:	60c8      	str	r0, [r1, #12]
    344a:	4770      	bx	lr
    344c:	00004514 	.word	0x00004514
    3450:	200000d0 	.word	0x200000d0

00003454 <sym_WYXBJE6NWBKILRWDCM2MMYJSSQVAUS4Y4CIL3JA>:
    3454:	4902      	ldr	r1, [pc, #8]	; (3460 <sym_WYXBJE6NWBKILRWDCM2MMYJSSQVAUS4Y4CIL3JA+0xc>)
    3456:	6849      	ldr	r1, [r1, #4]
    3458:	f881 0048 	strb.w	r0, [r1, #72]	; 0x48
    345c:	4770      	bx	lr
    345e:	0000      	.short	0x0000
    3460:	200000d0 	.word	0x200000d0

00003464 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY>:
    3464:	b570      	push	{r4, r5, r6, lr}
    3466:	4605      	mov	r5, r0
    3468:	f7fd ff04 	bl	1274 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    346c:	4604      	mov	r4, r0
    346e:	f7fd ff07 	bl	1280 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    3472:	4621      	mov	r1, r4
    3474:	f00b f9df 	bl	e836 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x8c>
    3478:	0001      	movs	r1, r0
    347a:	d006      	beq.n	348a <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY+0x26>
    347c:	4805      	ldr	r0, [pc, #20]	; (3494 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY+0x30>)
    347e:	68c0      	ldr	r0, [r0, #12]
    3480:	6802      	ldr	r2, [r0, #0]
    3482:	4628      	mov	r0, r5
    3484:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3488:	4710      	bx	r2
    348a:	f640 21ab 	movw	r1, #2731	; 0xaab
    348e:	2032      	movs	r0, #50	; 0x32
    3490:	f7fd faf6 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3494:	200000d0 	.word	0x200000d0

00003498 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>:
    3498:	b570      	push	{r4, r5, r6, lr}
    349a:	4d19      	ldr	r5, [pc, #100]	; (3500 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x68>)
    349c:	4604      	mov	r4, r0
    349e:	6868      	ldr	r0, [r5, #4]
    34a0:	f890 1070 	ldrb.w	r1, [r0, #112]	; 0x70
    34a4:	2901      	cmp	r1, #1
    34a6:	d004      	beq.n	34b2 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x1a>
    34a8:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    34ac:	b108      	cbz	r0, 34b2 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x1a>
    34ae:	200c      	movs	r0, #12
    34b0:	bd70      	pop	{r4, r5, r6, pc}
    34b2:	f7fd ff09 	bl	12c8 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ>
    34b6:	f00b faa6 	bl	ea06 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY>
    34ba:	f000 f8c1 	bl	3640 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    34be:	2246      	movs	r2, #70	; 0x46
    34c0:	2100      	movs	r1, #0
    34c2:	6868      	ldr	r0, [r5, #4]
    34c4:	f00d f96d 	bl	107a2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    34c8:	6869      	ldr	r1, [r5, #4]
    34ca:	2200      	movs	r2, #0
    34cc:	2001      	movs	r0, #1
    34ce:	f881 205d 	strb.w	r2, [r1, #93]	; 0x5d
    34d2:	f881 0051 	strb.w	r0, [r1, #81]	; 0x51
    34d6:	f881 2058 	strb.w	r2, [r1, #88]	; 0x58
    34da:	f881 207a 	strb.w	r2, [r1, #122]	; 0x7a
    34de:	f881 405e 	strb.w	r4, [r1, #94]	; 0x5e
    34e2:	f881 2098 	strb.w	r2, [r1, #152]	; 0x98
    34e6:	2007      	movs	r0, #7
    34e8:	f881 0050 	strb.w	r0, [r1, #80]	; 0x50
    34ec:	f101 006d 	add.w	r0, r1, #109	; 0x6d
    34f0:	23ff      	movs	r3, #255	; 0xff
    34f2:	7003      	strb	r3, [r0, #0]
    34f4:	f881 206c 	strb.w	r2, [r1, #108]	; 0x6c
    34f8:	668a      	str	r2, [r1, #104]	; 0x68
    34fa:	7002      	strb	r2, [r0, #0]
    34fc:	2000      	movs	r0, #0
    34fe:	bd70      	pop	{r4, r5, r6, pc}
    3500:	200000d0 	.word	0x200000d0

00003504 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ>:
    3504:	4805      	ldr	r0, [pc, #20]	; (351c <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ+0x18>)
    3506:	b510      	push	{r4, lr}
    3508:	6840      	ldr	r0, [r0, #4]
    350a:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
    350e:	f00b f93b 	bl	e788 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xb8>
    3512:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3516:	f7fe b8bf 	b.w	1698 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    351a:	0000      	.short	0x0000
    351c:	200000d0 	.word	0x200000d0

00003520 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q>:
    3520:	b140      	cbz	r0, 3534 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x14>
    3522:	2802      	cmp	r0, #2
    3524:	d006      	beq.n	3534 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x14>
    3526:	2200      	movs	r2, #0
    3528:	4903      	ldr	r1, [pc, #12]	; (3538 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x18>)
    352a:	6849      	ldr	r1, [r1, #4]
    352c:	f801 2f51 	strb.w	r2, [r1, #81]!
    3530:	7208      	strb	r0, [r1, #8]
    3532:	4770      	bx	lr
    3534:	2201      	movs	r2, #1
    3536:	e7f7      	b.n	3528 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x8>
    3538:	200000d0 	.word	0x200000d0

0000353c <sym_2QCSOYKJNF32ZBJORU6CJN7O5NDB7M3GD4LTM7A>:
    353c:	4902      	ldr	r1, [pc, #8]	; (3548 <sym_2QCSOYKJNF32ZBJORU6CJN7O5NDB7M3GD4LTM7A+0xc>)
    353e:	6849      	ldr	r1, [r1, #4]
    3540:	f881 0050 	strb.w	r0, [r1, #80]	; 0x50
    3544:	4770      	bx	lr
    3546:	0000      	.short	0x0000
    3548:	200000d0 	.word	0x200000d0

0000354c <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY>:
    354c:	b510      	push	{r4, lr}
    354e:	4603      	mov	r3, r0
    3550:	7800      	ldrb	r0, [r0, #0]
    3552:	07c0      	lsls	r0, r0, #31
    3554:	d005      	beq.n	3562 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x16>
    3556:	7858      	ldrb	r0, [r3, #1]
    3558:	2100      	movs	r1, #0
    355a:	f7ff fe91 	bl	3280 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>
    355e:	2800      	cmp	r0, #0
    3560:	d10c      	bne.n	357c <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x30>
    3562:	4c07      	ldr	r4, [pc, #28]	; (3580 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x34>)
    3564:	7898      	ldrb	r0, [r3, #2]
    3566:	6861      	ldr	r1, [r4, #4]
    3568:	f881 0048 	strb.w	r0, [r1, #72]	; 0x48
    356c:	78d8      	ldrb	r0, [r3, #3]
    356e:	f7ff ffd7 	bl	3520 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q>
    3572:	6861      	ldr	r1, [r4, #4]
    3574:	7918      	ldrb	r0, [r3, #4]
    3576:	f881 0050 	strb.w	r0, [r1, #80]	; 0x50
    357a:	2000      	movs	r0, #0
    357c:	bd10      	pop	{r4, pc}
    357e:	0000      	.short	0x0000
    3580:	200000d0 	.word	0x200000d0

00003584 <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY>:
    3584:	4801      	ldr	r0, [pc, #4]	; (358c <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY+0x8>)
    3586:	68c0      	ldr	r0, [r0, #12]
    3588:	6840      	ldr	r0, [r0, #4]
    358a:	4700      	bx	r0
    358c:	200000d0 	.word	0x200000d0

00003590 <sym_FLBXO3C2TGTXVEYELOG5B33ZBUVUNXUU6YZL7TY>:
    3590:	4807      	ldr	r0, [pc, #28]	; (35b0 <sym_FLBXO3C2TGTXVEYELOG5B33ZBUVUNXUU6YZL7TY+0x20>)
    3592:	b508      	push	{r3, lr}
    3594:	6840      	ldr	r0, [r0, #4]
    3596:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    359a:	f88d 0000 	strb.w	r0, [sp]
    359e:	9800      	ldr	r0, [sp, #0]
    35a0:	9000      	str	r0, [sp, #0]
    35a2:	f89d 0000 	ldrb.w	r0, [sp]
    35a6:	2800      	cmp	r0, #0
    35a8:	d000      	beq.n	35ac <sym_FLBXO3C2TGTXVEYELOG5B33ZBUVUNXUU6YZL7TY+0x1c>
    35aa:	2001      	movs	r0, #1
    35ac:	bd08      	pop	{r3, pc}
    35ae:	0000      	.short	0x0000
    35b0:	200000d0 	.word	0x200000d0

000035b4 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y>:
    35b4:	b510      	push	{r4, lr}
    35b6:	f000 f951 	bl	385c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x258>
    35ba:	4b0c      	ldr	r3, [pc, #48]	; (35ec <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x38>)
    35bc:	b140      	cbz	r0, 35d0 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x1c>
    35be:	6858      	ldr	r0, [r3, #4]
    35c0:	2101      	movs	r1, #1
    35c2:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
    35c6:	6d41      	ldr	r1, [r0, #84]	; 0x54
    35c8:	8809      	ldrh	r1, [r1, #0]
    35ca:	f8a0 1044 	strh.w	r1, [r0, #68]	; 0x44
    35ce:	e004      	b.n	35da <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x26>
    35d0:	6859      	ldr	r1, [r3, #4]
    35d2:	2000      	movs	r0, #0
    35d4:	f801 0f42 	strb.w	r0, [r1, #66]!
    35d8:	8048      	strh	r0, [r1, #2]
    35da:	6858      	ldr	r0, [r3, #4]
    35dc:	2217      	movs	r2, #23
    35de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    35e2:	4903      	ldr	r1, [pc, #12]	; (35f0 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x3c>)
    35e4:	3038      	adds	r0, #56	; 0x38
    35e6:	f00a bdba 	b.w	e15e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    35ea:	0000      	.short	0x0000
    35ec:	200000d0 	.word	0x200000d0
    35f0:	00004271 	.word	0x00004271

000035f4 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>:
    35f4:	4802      	ldr	r0, [pc, #8]	; (3600 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q+0xc>)
    35f6:	6840      	ldr	r0, [r0, #4]
    35f8:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    35fc:	4770      	bx	lr
    35fe:	0000      	.short	0x0000
    3600:	200000d0 	.word	0x200000d0

00003604 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>:
    3604:	b510      	push	{r4, lr}
    3606:	f000 f929 	bl	385c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x258>
    360a:	490c      	ldr	r1, [pc, #48]	; (363c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x38>)
    360c:	b128      	cbz	r0, 361a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x16>
    360e:	6848      	ldr	r0, [r1, #4]
    3610:	f890 005a 	ldrb.w	r0, [r0, #90]	; 0x5a
    3614:	2801      	cmp	r0, #1
    3616:	d00e      	beq.n	3636 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x32>
    3618:	e00c      	b.n	3634 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x30>
    361a:	6849      	ldr	r1, [r1, #4]
    361c:	f891 0058 	ldrb.w	r0, [r1, #88]	; 0x58
    3620:	2801      	cmp	r0, #1
    3622:	d001      	beq.n	3628 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x24>
    3624:	2802      	cmp	r0, #2
    3626:	d105      	bne.n	3634 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x30>
    3628:	f891 0059 	ldrb.w	r0, [r1, #89]	; 0x59
    362c:	2801      	cmp	r0, #1
    362e:	d003      	beq.n	3638 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x34>
    3630:	2803      	cmp	r0, #3
    3632:	d001      	beq.n	3638 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x34>
    3634:	2000      	movs	r0, #0
    3636:	bd10      	pop	{r4, pc}
    3638:	2001      	movs	r0, #1
    363a:	bd10      	pop	{r4, pc}
    363c:	200000d0 	.word	0x200000d0
    3640:	b510      	push	{r4, lr}
    3642:	4c07      	ldr	r4, [pc, #28]	; (3660 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5c>)
    3644:	6860      	ldr	r0, [r4, #4]
    3646:	f890 007c 	ldrb.w	r0, [r0, #124]	; 0x7c
    364a:	2800      	cmp	r0, #0
    364c:	d007      	beq.n	365e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5a>
    364e:	f004 fb2d 	bl	7cac <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    3652:	f004 f951 	bl	78f8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    3656:	6861      	ldr	r1, [r4, #4]
    3658:	2000      	movs	r0, #0
    365a:	f881 007c 	strb.w	r0, [r1, #124]	; 0x7c
    365e:	bd10      	pop	{r4, pc}
    3660:	200000d0 	.word	0x200000d0
    3664:	b518      	push	{r3, r4, lr}
    3666:	2300      	movs	r3, #0
    3668:	704b      	strb	r3, [r1, #1]
    366a:	2207      	movs	r2, #7
    366c:	700a      	strb	r2, [r1, #0]
    366e:	4a07      	ldr	r2, [pc, #28]	; (368c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x88>)
    3670:	6852      	ldr	r2, [r2, #4]
    3672:	7203      	strb	r3, [r0, #8]
    3674:	6b54      	ldr	r4, [r2, #52]	; 0x34
    3676:	604c      	str	r4, [r1, #4]
    3678:	7a04      	ldrb	r4, [r0, #8]
    367a:	f88d 4000 	strb.w	r4, [sp]
    367e:	9c00      	ldr	r4, [sp, #0]
    3680:	9400      	str	r4, [sp, #0]
    3682:	f89d 4000 	ldrb.w	r4, [sp]
    3686:	2c00      	cmp	r4, #0
    3688:	d1f3      	bne.n	3672 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6e>
    368a:	bd18      	pop	{r3, r4, pc}
    368c:	200000d0 	.word	0x200000d0
    3690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3694:	4d10      	ldr	r5, [pc, #64]	; (36d8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xd4>)
    3696:	4606      	mov	r6, r0
    3698:	460f      	mov	r7, r1
    369a:	6868      	ldr	r0, [r5, #4]
    369c:	490f      	ldr	r1, [pc, #60]	; (36dc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xd8>)
    369e:	f890 007a 	ldrb.w	r0, [r0, #122]	; 0x7a
    36a2:	5c0c      	ldrb	r4, [r1, r0]
    36a4:	4620      	mov	r0, r4
    36a6:	f004 fe41 	bl	832c <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    36aa:	6868      	ldr	r0, [r5, #4]
    36ac:	2101      	movs	r1, #1
    36ae:	f880 4088 	strb.w	r4, [r0, #136]	; 0x88
    36b2:	2025      	movs	r0, #37	; 0x25
    36b4:	f004 fe10 	bl	82d8 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    36b8:	4638      	mov	r0, r7
    36ba:	f004 fd43 	bl	8144 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    36be:	f04f 0101 	mov.w	r1, #1
    36c2:	4608      	mov	r0, r1
    36c4:	b126      	cbz	r6, 36d0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xcc>
    36c6:	f004 fb9d 	bl	7e04 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    36ca:	b918      	cbnz	r0, 36d4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xd0>
    36cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    36d0:	f004 fb5e 	bl	7d90 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    36d4:	2001      	movs	r0, #1
    36d6:	e7f9      	b.n	36cc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc8>
    36d8:	200000d0 	.word	0x200000d0
    36dc:	00010917 	.word	0x00010917
    36e0:	b570      	push	{r4, r5, r6, lr}
    36e2:	4e1a      	ldr	r6, [pc, #104]	; (374c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x148>)
    36e4:	460c      	mov	r4, r1
    36e6:	6870      	ldr	r0, [r6, #4]
    36e8:	7a41      	ldrb	r1, [r0, #9]
    36ea:	b191      	cbz	r1, 3712 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x10e>
    36ec:	8940      	ldrh	r0, [r0, #10]
    36ee:	2100      	movs	r1, #0
    36f0:	f00a f862 	bl	d7b8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    36f4:	0005      	movs	r5, r0
    36f6:	d025      	beq.n	3744 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x140>
    36f8:	8828      	ldrh	r0, [r5, #0]
    36fa:	f00a f8e4 	bl	d8c6 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    36fe:	8828      	ldrh	r0, [r5, #0]
    3700:	2100      	movs	r1, #0
    3702:	f7fd fc21 	bl	f48 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    3706:	b188      	cbz	r0, 372c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x128>
    3708:	f240 31f2 	movw	r1, #1010	; 0x3f2
    370c:	2032      	movs	r0, #50	; 0x32
    370e:	f7fd f9b7 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3712:	6d41      	ldr	r1, [r0, #84]	; 0x54
    3714:	f8d0 200e 	ldr.w	r2, [r0, #14]
    3718:	f841 2f03 	str.w	r2, [r1, #3]!
    371c:	8a42      	ldrh	r2, [r0, #18]
    371e:	808a      	strh	r2, [r1, #4]
    3720:	7b40      	ldrb	r0, [r0, #13]
    3722:	f00b f831 	bl	e788 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xb8>
    3726:	6871      	ldr	r1, [r6, #4]
    3728:	6d49      	ldr	r1, [r1, #84]	; 0x54
    372a:	7088      	strb	r0, [r1, #2]
    372c:	2500      	movs	r5, #0
    372e:	7065      	strb	r5, [r4, #1]
    3730:	2015      	movs	r0, #21
    3732:	7020      	strb	r0, [r4, #0]
    3734:	6871      	ldr	r1, [r6, #4]
    3736:	2221      	movs	r2, #33	; 0x21
    3738:	1d20      	adds	r0, r4, #4
    373a:	3109      	adds	r1, #9
    373c:	f00c ffb7 	bl	106ae <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3740:	71e5      	strb	r5, [r4, #7]
    3742:	bd70      	pop	{r4, r5, r6, pc}
    3744:	f240 31ee 	movw	r1, #1006	; 0x3ee
    3748:	e7e0      	b.n	370c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x108>
    374a:	0000      	.short	0x0000
    374c:	200000d0 	.word	0x200000d0
    3750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3752:	2600      	movs	r6, #0
    3754:	460f      	mov	r7, r1
    3756:	4605      	mov	r5, r0
    3758:	f88d 6000 	strb.w	r6, [sp]
    375c:	466b      	mov	r3, sp
    375e:	f000 f895 	bl	388c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x288>
    3762:	0001      	movs	r1, r0
    3764:	4810      	ldr	r0, [pc, #64]	; (37a8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1a4>)
    3766:	d003      	beq.n	3770 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x16c>
    3768:	6840      	ldr	r0, [r0, #4]
    376a:	f880 6081 	strb.w	r6, [r0, #129]	; 0x81
    376e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3770:	6840      	ldr	r0, [r0, #4]
    3772:	f89d 1000 	ldrb.w	r1, [sp]
    3776:	2f07      	cmp	r7, #7
    3778:	f890 4051 	ldrb.w	r4, [r0, #81]	; 0x51
    377c:	d301      	bcc.n	3782 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x17e>
    377e:	4634      	mov	r4, r6
    3780:	e002      	b.n	3788 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x184>
    3782:	0022      	movs	r2, r4
    3784:	d100      	bne.n	3788 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x184>
    3786:	460c      	mov	r4, r1
    3788:	f880 4081 	strb.w	r4, [r0, #129]	; 0x81
    378c:	6869      	ldr	r1, [r5, #4]
    378e:	2900      	cmp	r1, #0
    3790:	d0ed      	beq.n	376e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x16a>
    3792:	7c69      	ldrb	r1, [r5, #17]
    3794:	f880 1089 	strb.w	r1, [r0, #137]	; 0x89
    3798:	6869      	ldr	r1, [r5, #4]
    379a:	680a      	ldr	r2, [r1, #0]
    379c:	f840 2f82 	str.w	r2, [r0, #130]!
    37a0:	8889      	ldrh	r1, [r1, #4]
    37a2:	8081      	strh	r1, [r0, #4]
    37a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    37a6:	0000      	.short	0x0000
    37a8:	200000d0 	.word	0x200000d0
    37ac:	b510      	push	{r4, lr}
    37ae:	4915      	ldr	r1, [pc, #84]	; (3804 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x200>)
    37b0:	6842      	ldr	r2, [r0, #4]
    37b2:	6849      	ldr	r1, [r1, #4]
    37b4:	7813      	ldrb	r3, [r2, #0]
    37b6:	f891 4082 	ldrb.w	r4, [r1, #130]	; 0x82
    37ba:	42a3      	cmp	r3, r4
    37bc:	d11f      	bne.n	37fe <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1fa>
    37be:	7853      	ldrb	r3, [r2, #1]
    37c0:	f891 4083 	ldrb.w	r4, [r1, #131]	; 0x83
    37c4:	42a3      	cmp	r3, r4
    37c6:	d11a      	bne.n	37fe <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1fa>
    37c8:	7893      	ldrb	r3, [r2, #2]
    37ca:	f891 4084 	ldrb.w	r4, [r1, #132]	; 0x84
    37ce:	42a3      	cmp	r3, r4
    37d0:	d115      	bne.n	37fe <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1fa>
    37d2:	78d3      	ldrb	r3, [r2, #3]
    37d4:	f891 4085 	ldrb.w	r4, [r1, #133]	; 0x85
    37d8:	42a3      	cmp	r3, r4
    37da:	d110      	bne.n	37fe <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1fa>
    37dc:	7913      	ldrb	r3, [r2, #4]
    37de:	f891 4086 	ldrb.w	r4, [r1, #134]	; 0x86
    37e2:	42a3      	cmp	r3, r4
    37e4:	d10b      	bne.n	37fe <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1fa>
    37e6:	7952      	ldrb	r2, [r2, #5]
    37e8:	f891 3087 	ldrb.w	r3, [r1, #135]	; 0x87
    37ec:	429a      	cmp	r2, r3
    37ee:	d106      	bne.n	37fe <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1fa>
    37f0:	7c40      	ldrb	r0, [r0, #17]
    37f2:	f891 1089 	ldrb.w	r1, [r1, #137]	; 0x89
    37f6:	4288      	cmp	r0, r1
    37f8:	d101      	bne.n	37fe <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1fa>
    37fa:	2001      	movs	r0, #1
    37fc:	bd10      	pop	{r4, pc}
    37fe:	2000      	movs	r0, #0
    3800:	bd10      	pop	{r4, pc}
    3802:	0000      	.short	0x0000
    3804:	200000d0 	.word	0x200000d0
    3808:	b510      	push	{r4, lr}
    380a:	7801      	ldrb	r1, [r0, #0]
    380c:	b08c      	sub	sp, #48	; 0x30
    380e:	f001 040f 	and.w	r4, r1, #15
    3812:	4622      	mov	r2, r4
    3814:	a901      	add	r1, sp, #4
    3816:	f000 ff0b 	bl	4630 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    381a:	f004 fa69 	bl	7cf0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    381e:	f000 fba1 	bl	3f64 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x960>
    3822:	2c04      	cmp	r4, #4
    3824:	d114      	bne.n	3850 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x24c>
    3826:	a801      	add	r0, sp, #4
    3828:	f7ff ffc0 	bl	37ac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1a8>
    382c:	b180      	cbz	r0, 3850 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x24c>
    382e:	a80b      	add	r0, sp, #44	; 0x2c
    3830:	f000 fba0 	bl	3f74 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x970>
    3834:	f99d 002c 	ldrsb.w	r0, [sp, #44]	; 0x2c
    3838:	9000      	str	r0, [sp, #0]
    383a:	4807      	ldr	r0, [pc, #28]	; (3858 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x254>)
    383c:	6840      	ldr	r0, [r0, #4]
    383e:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
    3842:	f890 2098 	ldrb.w	r2, [r0, #152]	; 0x98
    3846:	f890 1079 	ldrb.w	r1, [r0, #121]	; 0x79
    384a:	a801      	add	r0, sp, #4
    384c:	f00b f890 	bl	e970 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI>
    3850:	b00c      	add	sp, #48	; 0x30
    3852:	2005      	movs	r0, #5
    3854:	bd10      	pop	{r4, pc}
    3856:	0000      	.short	0x0000
    3858:	200000d0 	.word	0x200000d0
    385c:	4804      	ldr	r0, [pc, #16]	; (3870 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x26c>)
    385e:	6840      	ldr	r0, [r0, #4]
    3860:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    3864:	2803      	cmp	r0, #3
    3866:	d001      	beq.n	386c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x268>
    3868:	2000      	movs	r0, #0
    386a:	4770      	bx	lr
    386c:	2001      	movs	r0, #1
    386e:	4770      	bx	lr
    3870:	200000d0 	.word	0x200000d0
    3874:	7c82      	ldrb	r2, [r0, #18]
    3876:	6883      	ldr	r3, [r0, #8]
    3878:	4803      	ldr	r0, [pc, #12]	; (3888 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x284>)
    387a:	6841      	ldr	r1, [r0, #4]
    387c:	f891 0049 	ldrb.w	r0, [r1, #73]	; 0x49
    3880:	314a      	adds	r1, #74	; 0x4a
    3882:	f00a b824 	b.w	d8ce <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    3886:	0000      	.short	0x0000
    3888:	200000d0 	.word	0x200000d0
    388c:	b570      	push	{r4, r5, r6, lr}
    388e:	6841      	ldr	r1, [r0, #4]
    3890:	461e      	mov	r6, r3
    3892:	4604      	mov	r4, r0
    3894:	b1c1      	cbz	r1, 38c8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2c4>
    3896:	7c60      	ldrb	r0, [r4, #17]
    3898:	f00a ff6b 	bl	e772 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xa2>
    389c:	4d10      	ldr	r5, [pc, #64]	; (38e0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2dc>)
    389e:	6869      	ldr	r1, [r5, #4]
    38a0:	f891 107c 	ldrb.w	r1, [r1, #124]	; 0x7c
    38a4:	b141      	cbz	r1, 38b8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2b4>
    38a6:	b138      	cbz	r0, 38b8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2b4>
    38a8:	f00a f8c3 	bl	da32 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    38ac:	6869      	ldr	r1, [r5, #4]
    38ae:	f801 0f78 	strb.w	r0, [r1, #120]!
    38b2:	7048      	strb	r0, [r1, #1]
    38b4:	2001      	movs	r0, #1
    38b6:	71c8      	strb	r0, [r1, #7]
    38b8:	686b      	ldr	r3, [r5, #4]
    38ba:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
    38be:	28ff      	cmp	r0, #255	; 0xff
    38c0:	d004      	beq.n	38cc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2c8>
    38c2:	f7fe fcd3 	bl	226c <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    38c6:	7030      	strb	r0, [r6, #0]
    38c8:	2000      	movs	r0, #0
    38ca:	bd70      	pop	{r4, r5, r6, pc}
    38cc:	7c60      	ldrb	r0, [r4, #17]
    38ce:	4632      	mov	r2, r6
    38d0:	3378      	adds	r3, #120	; 0x78
    38d2:	6861      	ldr	r1, [r4, #4]
    38d4:	f7fe fce2 	bl	229c <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A>
    38d8:	f080 0001 	eor.w	r0, r0, #1
    38dc:	bd70      	pop	{r4, r5, r6, pc}
    38de:	0000      	.short	0x0000
    38e0:	200000d0 	.word	0x200000d0
    38e4:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    38e8:	4c40      	ldr	r4, [pc, #256]	; (39ec <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3e8>)
    38ea:	2500      	movs	r5, #0
    38ec:	466f      	mov	r7, sp
    38ee:	6860      	ldr	r0, [r4, #4]
    38f0:	7245      	strb	r5, [r0, #9]
    38f2:	6d41      	ldr	r1, [r0, #84]	; 0x54
    38f4:	880a      	ldrh	r2, [r1, #0]
    38f6:	8142      	strh	r2, [r0, #10]
    38f8:	6908      	ldr	r0, [r1, #16]
    38fa:	f00a f906 	bl	db0a <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    38fe:	6861      	ldr	r1, [r4, #4]
    3900:	f821 0f20 	strh.w	r0, [r1, #32]!
    3904:	6b48      	ldr	r0, [r1, #52]	; 0x34
    3906:	8b02      	ldrh	r2, [r0, #24]
    3908:	804a      	strh	r2, [r1, #2]
    390a:	8b40      	ldrh	r0, [r0, #26]
    390c:	8088      	strh	r0, [r1, #4]
    390e:	718d      	strb	r5, [r1, #6]
    3910:	20ff      	movs	r0, #255	; 0xff
    3912:	71c8      	strb	r0, [r1, #7]
    3914:	f64f 70ff 	movw	r0, #65535	; 0xffff
    3918:	8108      	strh	r0, [r1, #8]
    391a:	4669      	mov	r1, sp
    391c:	68a0      	ldr	r0, [r4, #8]
    391e:	f00a fb2e 	bl	df7e <sym_SKY6LLKHYM3MTKIUASL3OKO4LAKLVGGKKAJ3I2Y>
    3922:	68a0      	ldr	r0, [r4, #8]
    3924:	7800      	ldrb	r0, [r0, #0]
    3926:	f3c0 1680 	ubfx	r6, r0, #6, #1
    392a:	6860      	ldr	r0, [r4, #4]
    392c:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    3930:	b120      	cbz	r0, 393c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x338>
    3932:	4639      	mov	r1, r7
    3934:	4630      	mov	r0, r6
    3936:	f00a ff1c 	bl	e772 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xa2>
    393a:	b940      	cbnz	r0, 394e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x34a>
    393c:	6860      	ldr	r0, [r4, #4]
    393e:	f890 005d 	ldrb.w	r0, [r0, #93]	; 0x5d
    3942:	b158      	cbz	r0, 395c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x358>
    3944:	4639      	mov	r1, r7
    3946:	4630      	mov	r0, r6
    3948:	f00a ff0a 	bl	e760 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x90>
    394c:	b130      	cbz	r0, 395c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x358>
    394e:	6860      	ldr	r0, [r4, #4]
    3950:	9900      	ldr	r1, [sp, #0]
    3952:	6141      	str	r1, [r0, #20]
    3954:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    3958:	8301      	strh	r1, [r0, #24]
    395a:	e002      	b.n	3962 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x35e>
    395c:	6860      	ldr	r0, [r4, #4]
    395e:	6145      	str	r5, [r0, #20]
    3960:	8305      	strh	r5, [r0, #24]
    3962:	6861      	ldr	r1, [r4, #4]
    3964:	f891 0079 	ldrb.w	r0, [r1, #121]	; 0x79
    3968:	28ff      	cmp	r0, #255	; 0xff
    396a:	d017      	beq.n	399c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x398>
    396c:	f101 020e 	add.w	r2, r1, #14
    3970:	310d      	adds	r1, #13
    3972:	f7fe fc61 	bl	2238 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    3976:	b160      	cbz	r0, 3992 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x38e>
    3978:	6860      	ldr	r0, [r4, #4]
    397a:	7b41      	ldrb	r1, [r0, #13]
    397c:	f041 0102 	orr.w	r1, r1, #2
    3980:	7341      	strb	r1, [r0, #13]
    3982:	f8d0 1082 	ldr.w	r1, [r0, #130]	; 0x82
    3986:	f8c0 101a 	str.w	r1, [r0, #26]
    398a:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
    398e:	83c1      	strh	r1, [r0, #30]
    3990:	e010      	b.n	39b4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3b0>
    3992:	f241 5197 	movw	r1, #5527	; 0x1597
    3996:	2032      	movs	r0, #50	; 0x32
    3998:	f7fd f872 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    399c:	f891 0089 	ldrb.w	r0, [r1, #137]	; 0x89
    39a0:	7348      	strb	r0, [r1, #13]
    39a2:	f8d1 0082 	ldr.w	r0, [r1, #130]	; 0x82
    39a6:	f841 0f0e 	str.w	r0, [r1, #14]!
    39aa:	f8b1 0078 	ldrh.w	r0, [r1, #120]	; 0x78
    39ae:	8088      	strh	r0, [r1, #4]
    39b0:	60cd      	str	r5, [r1, #12]
    39b2:	820d      	strh	r5, [r1, #16]
    39b4:	6860      	ldr	r0, [r4, #4]
    39b6:	6d42      	ldr	r2, [r0, #84]	; 0x54
    39b8:	f890 105e 	ldrb.w	r1, [r0, #94]	; 0x5e
    39bc:	f882 106e 	strb.w	r1, [r2, #110]	; 0x6e
    39c0:	2212      	movs	r2, #18
    39c2:	490b      	ldr	r1, [pc, #44]	; (39f0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3ec>)
    39c4:	f00a fbcb 	bl	e15e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    39c8:	6860      	ldr	r0, [r4, #4]
    39ca:	6d41      	ldr	r1, [r0, #84]	; 0x54
    39cc:	302a      	adds	r0, #42	; 0x2a
    39ce:	880a      	ldrh	r2, [r1, #0]
    39d0:	4908      	ldr	r1, [pc, #32]	; (39f4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3f0>)
    39d2:	868a      	strh	r2, [r1, #52]	; 0x34
    39d4:	6d4a      	ldr	r2, [r1, #84]	; 0x54
    39d6:	f892 20ad 	ldrb.w	r2, [r2, #173]	; 0xad
    39da:	f881 2036 	strb.w	r2, [r1, #54]	; 0x36
    39de:	2206      	movs	r2, #6
    39e0:	4905      	ldr	r1, [pc, #20]	; (39f8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3f4>)
    39e2:	f00a fbd0 	bl	e186 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    39e6:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    39ea:	0000      	.short	0x0000
    39ec:	200000d0 	.word	0x200000d0
    39f0:	000036e1 	.word	0x000036e1
    39f4:	20000dc0 	.word	0x20000dc0
    39f8:	00003665 	.word	0x00003665
    39fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3a00:	4c4c      	ldr	r4, [pc, #304]	; (3b34 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x530>)
    3a02:	4606      	mov	r6, r0
    3a04:	2100      	movs	r1, #0
    3a06:	e9d4 5001 	ldrd	r5, r0, [r4, #4]
    3a0a:	3570      	adds	r5, #112	; 0x70
    3a0c:	8001      	strh	r1, [r0, #0]
    3a0e:	2e03      	cmp	r6, #3
    3a10:	d002      	beq.n	3a18 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x414>
    3a12:	2e05      	cmp	r6, #5
    3a14:	d004      	beq.n	3a20 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x41c>
    3a16:	e051      	b.n	3abc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4b8>
    3a18:	2103      	movs	r1, #3
    3a1a:	f00a fac7 	bl	dfac <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    3a1e:	e04d      	b.n	3abc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4b8>
    3a20:	2105      	movs	r1, #5
    3a22:	f00a fac3 	bl	dfac <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    3a26:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
    3a2a:	6d41      	ldr	r1, [r0, #84]	; 0x54
    3a2c:	6949      	ldr	r1, [r1, #20]
    3a2e:	f8c7 100f 	str.w	r1, [r7, #15]
    3a32:	6d41      	ldr	r1, [r0, #84]	; 0x54
    3a34:	69c9      	ldr	r1, [r1, #28]
    3a36:	74f9      	strb	r1, [r7, #19]
    3a38:	0a0a      	lsrs	r2, r1, #8
    3a3a:	753a      	strb	r2, [r7, #20]
    3a3c:	0c09      	lsrs	r1, r1, #16
    3a3e:	7579      	strb	r1, [r7, #21]
    3a40:	6d40      	ldr	r0, [r0, #84]	; 0x54
    3a42:	6901      	ldr	r1, [r0, #16]
    3a44:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    3a46:	f00a f9e7 	bl	de18 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>
    3a4a:	75b8      	strb	r0, [r7, #22]
    3a4c:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
    3a50:	6d40      	ldr	r0, [r0, #84]	; 0x54
    3a52:	6901      	ldr	r1, [r0, #16]
    3a54:	6a00      	ldr	r0, [r0, #32]
    3a56:	f00a f9c8 	bl	ddea <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>
    3a5a:	75f8      	strb	r0, [r7, #23]
    3a5c:	0a00      	lsrs	r0, r0, #8
    3a5e:	7638      	strb	r0, [r7, #24]
    3a60:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
    3a64:	6d40      	ldr	r0, [r0, #84]	; 0x54
    3a66:	6900      	ldr	r0, [r0, #16]
    3a68:	f00a f84f 	bl	db0a <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    3a6c:	7678      	strb	r0, [r7, #25]
    3a6e:	0a00      	lsrs	r0, r0, #8
    3a70:	76b8      	strb	r0, [r7, #26]
    3a72:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
    3a76:	6d41      	ldr	r1, [r0, #84]	; 0x54
    3a78:	8b09      	ldrh	r1, [r1, #24]
    3a7a:	f807 1f1b 	strb.w	r1, [r7, #27]!
    3a7e:	0a09      	lsrs	r1, r1, #8
    3a80:	7079      	strb	r1, [r7, #1]
    3a82:	6d41      	ldr	r1, [r0, #84]	; 0x54
    3a84:	8b49      	ldrh	r1, [r1, #26]
    3a86:	70b9      	strb	r1, [r7, #2]
    3a88:	0a09      	lsrs	r1, r1, #8
    3a8a:	70f9      	strb	r1, [r7, #3]
    3a8c:	6d41      	ldr	r1, [r0, #84]	; 0x54
    3a8e:	f851 2fae 	ldr.w	r2, [r1, #174]!
    3a92:	607a      	str	r2, [r7, #4]
    3a94:	7909      	ldrb	r1, [r1, #4]
    3a96:	7239      	strb	r1, [r7, #8]
    3a98:	6d40      	ldr	r0, [r0, #84]	; 0x54
    3a9a:	f890 10b9 	ldrb.w	r1, [r0, #185]	; 0xb9
    3a9e:	7a78      	ldrb	r0, [r7, #9]
    3aa0:	f001 011f 	and.w	r1, r1, #31
    3aa4:	f000 00e0 	and.w	r0, r0, #224	; 0xe0
    3aa8:	4308      	orrs	r0, r1
    3aaa:	7278      	strb	r0, [r7, #9]
    3aac:	f003 ff04 	bl	78b8 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY>
    3ab0:	7a79      	ldrb	r1, [r7, #9]
    3ab2:	f001 011f 	and.w	r1, r1, #31
    3ab6:	ea41 1140 	orr.w	r1, r1, r0, lsl #5
    3aba:	7279      	strb	r1, [r7, #9]
    3abc:	f105 0112 	add.w	r1, r5, #18
    3ac0:	68a0      	ldr	r0, [r4, #8]
    3ac2:	f00a fa8e 	bl	dfe2 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    3ac6:	7e69      	ldrb	r1, [r5, #25]
    3ac8:	68a0      	ldr	r0, [r4, #8]
    3aca:	f00a fa90 	bl	dfee <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
    3ace:	6860      	ldr	r0, [r4, #4]
    3ad0:	f100 054a 	add.w	r5, r0, #74	; 0x4a
    3ad4:	f890 7049 	ldrb.w	r7, [r0, #73]	; 0x49
    3ad8:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    3adc:	b188      	cbz	r0, 3b02 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4fe>
    3ade:	f7ff febd 	bl	385c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x258>
    3ae2:	b130      	cbz	r0, 3af2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4ee>
    3ae4:	6860      	ldr	r0, [r4, #4]
    3ae6:	f890 1051 	ldrb.w	r1, [r0, #81]	; 0x51
    3aea:	b111      	cbz	r1, 3af2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4ee>
    3aec:	f890 007b 	ldrb.w	r0, [r0, #123]	; 0x7b
    3af0:	e002      	b.n	3af8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4f4>
    3af2:	6860      	ldr	r0, [r4, #4]
    3af4:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
    3af8:	f7fe fb70 	bl	21dc <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA>
    3afc:	b108      	cbz	r0, 3b02 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4fe>
    3afe:	2701      	movs	r7, #1
    3b00:	4605      	mov	r5, r0
    3b02:	4629      	mov	r1, r5
    3b04:	68a0      	ldr	r0, [r4, #8]
    3b06:	f00a fa79 	bl	dffc <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>
    3b0a:	4639      	mov	r1, r7
    3b0c:	68a0      	ldr	r0, [r4, #8]
    3b0e:	f00a fa7b 	bl	e008 <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>
    3b12:	68a0      	ldr	r0, [r4, #8]
    3b14:	f004 fb16 	bl	8144 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    3b18:	2e05      	cmp	r6, #5
    3b1a:	d108      	bne.n	3b2e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x52a>
    3b1c:	6860      	ldr	r0, [r4, #4]
    3b1e:	682a      	ldr	r2, [r5, #0]
    3b20:	6d41      	ldr	r1, [r0, #84]	; 0x54
    3b22:	f8c1 200a 	str.w	r2, [r1, #10]
    3b26:	88aa      	ldrh	r2, [r5, #4]
    3b28:	81ca      	strh	r2, [r1, #14]
    3b2a:	6d40      	ldr	r0, [r0, #84]	; 0x54
    3b2c:	7247      	strb	r7, [r0, #9]
    3b2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3b32:	0000      	.short	0x0000
    3b34:	200000d0 	.word	0x200000d0
    3b38:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    3b3c:	4f65      	ldr	r7, [pc, #404]	; (3cd4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6d0>)
    3b3e:	4604      	mov	r4, r0
    3b40:	6878      	ldr	r0, [r7, #4]
    3b42:	f890 8081 	ldrb.w	r8, [r0, #129]	; 0x81
    3b46:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    3b4a:	b180      	cbz	r0, 3b6e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x56a>
    3b4c:	2600      	movs	r6, #0
    3b4e:	2500      	movs	r5, #0
    3b50:	7ca0      	ldrb	r0, [r4, #18]
    3b52:	68a1      	ldr	r1, [r4, #8]
    3b54:	f00a fe0d 	bl	e772 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xa2>
    3b58:	4682      	mov	sl, r0
    3b5a:	f7ff fe7f 	bl	385c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x258>
    3b5e:	b140      	cbz	r0, 3b72 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x56e>
    3b60:	6878      	ldr	r0, [r7, #4]
    3b62:	f890 1051 	ldrb.w	r1, [r0, #81]	; 0x51
    3b66:	b121      	cbz	r1, 3b72 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x56e>
    3b68:	f890 007b 	ldrb.w	r0, [r0, #123]	; 0x7b
    3b6c:	e004      	b.n	3b78 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x574>
    3b6e:	2601      	movs	r6, #1
    3b70:	e7ed      	b.n	3b4e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x54a>
    3b72:	6878      	ldr	r0, [r7, #4]
    3b74:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
    3b78:	4683      	mov	fp, r0
    3b7a:	f7fe fae1 	bl	2140 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    3b7e:	ea5f 0900 	movs.w	r9, r0
    3b82:	d00c      	beq.n	3b9e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x59a>
    3b84:	4658      	mov	r0, fp
    3b86:	f7fe facf 	bl	2128 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    3b8a:	b100      	cbz	r0, 3b8e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x58a>
    3b8c:	2601      	movs	r6, #1
    3b8e:	f1ba 0f00 	cmp.w	sl, #0
    3b92:	d004      	beq.n	3b9e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x59a>
    3b94:	4648      	mov	r0, r9
    3b96:	68a1      	ldr	r1, [r4, #8]
    3b98:	f009 fefe 	bl	d998 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ>
    3b9c:	4605      	mov	r5, r0
    3b9e:	6878      	ldr	r0, [r7, #4]
    3ba0:	46b9      	mov	r9, r7
    3ba2:	f890 7049 	ldrb.w	r7, [r0, #73]	; 0x49
    3ba6:	b10d      	cbz	r5, 3bac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5a8>
    3ba8:	f047 0702 	orr.w	r7, r7, #2
    3bac:	f7ff fe56 	bl	385c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x258>
    3bb0:	b3a0      	cbz	r0, 3c1c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x618>
    3bb2:	6860      	ldr	r0, [r4, #4]
    3bb4:	f8d9 1004 	ldr.w	r1, [r9, #4]
    3bb8:	7802      	ldrb	r2, [r0, #0]
    3bba:	f891 3060 	ldrb.w	r3, [r1, #96]	; 0x60
    3bbe:	429a      	cmp	r2, r3
    3bc0:	d11f      	bne.n	3c02 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5fe>
    3bc2:	7842      	ldrb	r2, [r0, #1]
    3bc4:	f891 3061 	ldrb.w	r3, [r1, #97]	; 0x61
    3bc8:	429a      	cmp	r2, r3
    3bca:	d11a      	bne.n	3c02 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5fe>
    3bcc:	7882      	ldrb	r2, [r0, #2]
    3bce:	f891 3062 	ldrb.w	r3, [r1, #98]	; 0x62
    3bd2:	429a      	cmp	r2, r3
    3bd4:	d115      	bne.n	3c02 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5fe>
    3bd6:	78c2      	ldrb	r2, [r0, #3]
    3bd8:	f891 3063 	ldrb.w	r3, [r1, #99]	; 0x63
    3bdc:	429a      	cmp	r2, r3
    3bde:	d110      	bne.n	3c02 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5fe>
    3be0:	7902      	ldrb	r2, [r0, #4]
    3be2:	f891 3064 	ldrb.w	r3, [r1, #100]	; 0x64
    3be6:	429a      	cmp	r2, r3
    3be8:	d10b      	bne.n	3c02 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5fe>
    3bea:	7940      	ldrb	r0, [r0, #5]
    3bec:	f891 2065 	ldrb.w	r2, [r1, #101]	; 0x65
    3bf0:	4290      	cmp	r0, r2
    3bf2:	d106      	bne.n	3c02 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5fe>
    3bf4:	7c60      	ldrb	r0, [r4, #17]
    3bf6:	f891 105f 	ldrb.w	r1, [r1, #95]	; 0x5f
    3bfa:	4288      	cmp	r0, r1
    3bfc:	d101      	bne.n	3c02 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5fe>
    3bfe:	2001      	movs	r0, #1
    3c00:	e000      	b.n	3c04 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x600>
    3c02:	2000      	movs	r0, #0
    3c04:	4f34      	ldr	r7, [pc, #208]	; (3cd8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6d4>)
    3c06:	4682      	mov	sl, r0
    3c08:	f897 0078 	ldrb.w	r0, [r7, #120]	; 0x78
    3c0c:	2808      	cmp	r0, #8
    3c0e:	d006      	beq.n	3c1e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x61a>
    3c10:	f897 107b 	ldrb.w	r1, [r7, #123]	; 0x7b
    3c14:	4288      	cmp	r0, r1
    3c16:	d102      	bne.n	3c1e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x61a>
    3c18:	2001      	movs	r0, #1
    3c1a:	e001      	b.n	3c20 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x61c>
    3c1c:	e021      	b.n	3c62 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x65e>
    3c1e:	2000      	movs	r0, #0
    3c20:	4681      	mov	r9, r0
    3c22:	b925      	cbnz	r5, 3c2e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x62a>
    3c24:	b12e      	cbz	r6, 3c32 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x62e>
    3c26:	4620      	mov	r0, r4
    3c28:	f7ff fe24 	bl	3874 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x270>
    3c2c:	b108      	cbz	r0, 3c32 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x62e>
    3c2e:	2001      	movs	r0, #1
    3c30:	e000      	b.n	3c34 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x630>
    3c32:	2000      	movs	r0, #0
    3c34:	f1b8 0f00 	cmp.w	r8, #0
    3c38:	d009      	beq.n	3c4e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x64a>
    3c3a:	f897 105a 	ldrb.w	r1, [r7, #90]	; 0x5a
    3c3e:	2901      	cmp	r1, #1
    3c40:	d003      	beq.n	3c4a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x646>
    3c42:	b921      	cbnz	r1, 3c4e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x64a>
    3c44:	ea5a 0109 	orrs.w	r1, sl, r9
    3c48:	d001      	beq.n	3c4e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x64a>
    3c4a:	2101      	movs	r1, #1
    3c4c:	e000      	b.n	3c50 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x64c>
    3c4e:	2100      	movs	r1, #0
    3c50:	4208      	tst	r0, r1
    3c52:	d003      	beq.n	3c5c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x658>
    3c54:	200c      	movs	r0, #12
    3c56:	b004      	add	sp, #16
    3c58:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    3c5c:	f004 f848 	bl	7cf0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    3c60:	e036      	b.n	3cd0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6cc>
    3c62:	f004 f845 	bl	7cf0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    3c66:	f1b8 0f00 	cmp.w	r8, #0
    3c6a:	d031      	beq.n	3cd0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6cc>
    3c6c:	4620      	mov	r0, r4
    3c6e:	f7ff fe01 	bl	3874 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x270>
    3c72:	b900      	cbnz	r0, 3c76 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x672>
    3c74:	b175      	cbz	r5, 3c94 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x690>
    3c76:	a803      	add	r0, sp, #12
    3c78:	f000 f97c 	bl	3f74 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x970>
    3c7c:	f8d9 2004 	ldr.w	r2, [r9, #4]
    3c80:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    3c84:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    3c88:	f892 1088 	ldrb.w	r1, [r2, #136]	; 0x88
    3c8c:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    3c90:	463b      	mov	r3, r7
    3c92:	e018      	b.n	3cc6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6c2>
    3c94:	f8d9 0004 	ldr.w	r0, [r9, #4]
    3c98:	464d      	mov	r5, r9
    3c9a:	f890 0059 	ldrb.w	r0, [r0, #89]	; 0x59
    3c9e:	2803      	cmp	r0, #3
    3ca0:	d001      	beq.n	3ca6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6a2>
    3ca2:	2802      	cmp	r0, #2
    3ca4:	d114      	bne.n	3cd0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6cc>
    3ca6:	f1ba 0f00 	cmp.w	sl, #0
    3caa:	d011      	beq.n	3cd0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6cc>
    3cac:	a803      	add	r0, sp, #12
    3cae:	f000 f961 	bl	3f74 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x970>
    3cb2:	686a      	ldr	r2, [r5, #4]
    3cb4:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    3cb8:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    3cbc:	f892 1088 	ldrb.w	r1, [r2, #136]	; 0x88
    3cc0:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    3cc4:	23fe      	movs	r3, #254	; 0xfe
    3cc6:	2101      	movs	r1, #1
    3cc8:	4620      	mov	r0, r4
    3cca:	324a      	adds	r2, #74	; 0x4a
    3ccc:	f00a fdd8 	bl	e880 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    3cd0:	2005      	movs	r0, #5
    3cd2:	e7c0      	b.n	3c56 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x652>
    3cd4:	200000d0 	.word	0x200000d0
    3cd8:	20000dc0 	.word	0x20000dc0
    3cdc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    3cde:	4c3f      	ldr	r4, [pc, #252]	; (3ddc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7d8>)
    3ce0:	4605      	mov	r5, r0
    3ce2:	6860      	ldr	r0, [r4, #4]
    3ce4:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    3ce8:	2900      	cmp	r1, #0
    3cea:	d06c      	beq.n	3dc6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7c2>
    3cec:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    3cf0:	2802      	cmp	r0, #2
    3cf2:	d02c      	beq.n	3d4e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x74a>
    3cf4:	2801      	cmp	r0, #1
    3cf6:	d043      	beq.n	3d80 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x77c>
    3cf8:	f7ff fdb0 	bl	385c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x258>
    3cfc:	2800      	cmp	r0, #0
    3cfe:	d067      	beq.n	3dd0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7cc>
    3d00:	686a      	ldr	r2, [r5, #4]
    3d02:	6861      	ldr	r1, [r4, #4]
    3d04:	7810      	ldrb	r0, [r2, #0]
    3d06:	f891 3060 	ldrb.w	r3, [r1, #96]	; 0x60
    3d0a:	4298      	cmp	r0, r3
    3d0c:	d14c      	bne.n	3da8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7a4>
    3d0e:	7850      	ldrb	r0, [r2, #1]
    3d10:	f891 3061 	ldrb.w	r3, [r1, #97]	; 0x61
    3d14:	4298      	cmp	r0, r3
    3d16:	d147      	bne.n	3da8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7a4>
    3d18:	7890      	ldrb	r0, [r2, #2]
    3d1a:	f891 3062 	ldrb.w	r3, [r1, #98]	; 0x62
    3d1e:	4298      	cmp	r0, r3
    3d20:	d142      	bne.n	3da8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7a4>
    3d22:	78d0      	ldrb	r0, [r2, #3]
    3d24:	f891 3063 	ldrb.w	r3, [r1, #99]	; 0x63
    3d28:	4298      	cmp	r0, r3
    3d2a:	d13d      	bne.n	3da8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7a4>
    3d2c:	7910      	ldrb	r0, [r2, #4]
    3d2e:	f891 3064 	ldrb.w	r3, [r1, #100]	; 0x64
    3d32:	4298      	cmp	r0, r3
    3d34:	d138      	bne.n	3da8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7a4>
    3d36:	7950      	ldrb	r0, [r2, #5]
    3d38:	f891 2065 	ldrb.w	r2, [r1, #101]	; 0x65
    3d3c:	4290      	cmp	r0, r2
    3d3e:	d133      	bne.n	3da8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7a4>
    3d40:	7c68      	ldrb	r0, [r5, #17]
    3d42:	f891 205f 	ldrb.w	r2, [r1, #95]	; 0x5f
    3d46:	4290      	cmp	r0, r2
    3d48:	d12e      	bne.n	3da8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7a4>
    3d4a:	2001      	movs	r0, #1
    3d4c:	e02d      	b.n	3daa <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7a6>
    3d4e:	a803      	add	r0, sp, #12
    3d50:	f000 f910 	bl	3f74 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x970>
    3d54:	6862      	ldr	r2, [r4, #4]
    3d56:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    3d5a:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    3d5e:	f892 1088 	ldrb.w	r1, [r2, #136]	; 0x88
    3d62:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    3d66:	23ff      	movs	r3, #255	; 0xff
    3d68:	2100      	movs	r1, #0
    3d6a:	4628      	mov	r0, r5
    3d6c:	324a      	adds	r2, #74	; 0x4a
    3d6e:	f00a fd87 	bl	e880 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    3d72:	6861      	ldr	r1, [r4, #4]
    3d74:	2001      	movs	r0, #1
    3d76:	f881 0098 	strb.w	r0, [r1, #152]	; 0x98
    3d7a:	200b      	movs	r0, #11
    3d7c:	b004      	add	sp, #16
    3d7e:	bd70      	pop	{r4, r5, r6, pc}
    3d80:	a803      	add	r0, sp, #12
    3d82:	f000 f8f7 	bl	3f74 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x970>
    3d86:	6862      	ldr	r2, [r4, #4]
    3d88:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    3d8c:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    3d90:	f892 1088 	ldrb.w	r1, [r2, #136]	; 0x88
    3d94:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    3d98:	23ff      	movs	r3, #255	; 0xff
    3d9a:	2100      	movs	r1, #0
    3d9c:	4628      	mov	r0, r5
    3d9e:	324a      	adds	r2, #74	; 0x4a
    3da0:	f00a fd6e 	bl	e880 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    3da4:	2005      	movs	r0, #5
    3da6:	e7e9      	b.n	3d7c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x778>
    3da8:	2000      	movs	r0, #0
    3daa:	f891 105a 	ldrb.w	r1, [r1, #90]	; 0x5a
    3dae:	2901      	cmp	r1, #1
    3db0:	d00c      	beq.n	3dcc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7c8>
    3db2:	b958      	cbnz	r0, 3dcc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7c8>
    3db4:	490a      	ldr	r1, [pc, #40]	; (3de0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7dc>)
    3db6:	f891 007b 	ldrb.w	r0, [r1, #123]	; 0x7b
    3dba:	2808      	cmp	r0, #8
    3dbc:	d003      	beq.n	3dc6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7c2>
    3dbe:	f891 1078 	ldrb.w	r1, [r1, #120]	; 0x78
    3dc2:	4281      	cmp	r1, r0
    3dc4:	d002      	beq.n	3dcc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7c8>
    3dc6:	f003 ff93 	bl	7cf0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    3dca:	e7eb      	b.n	3da4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7a0>
    3dcc:	200c      	movs	r0, #12
    3dce:	e7d5      	b.n	3d7c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x778>
    3dd0:	f640 61df 	movw	r1, #3807	; 0xedf
    3dd4:	2032      	movs	r0, #50	; 0x32
    3dd6:	f7fc fe53 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3dda:	0000      	.short	0x0000
    3ddc:	200000d0 	.word	0x200000d0
    3de0:	20000dc0 	.word	0x20000dc0
    3de4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    3de6:	4c1e      	ldr	r4, [pc, #120]	; (3e60 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x85c>)
    3de8:	4605      	mov	r5, r0
    3dea:	6860      	ldr	r0, [r4, #4]
    3dec:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    3df0:	b129      	cbz	r1, 3dfe <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7fa>
    3df2:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    3df6:	2802      	cmp	r0, #2
    3df8:	d004      	beq.n	3e04 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x800>
    3dfa:	2801      	cmp	r0, #1
    3dfc:	d01b      	beq.n	3e36 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x832>
    3dfe:	f003 ff77 	bl	7cf0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    3e02:	e02a      	b.n	3e5a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x856>
    3e04:	a803      	add	r0, sp, #12
    3e06:	f000 f8b5 	bl	3f74 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x970>
    3e0a:	6862      	ldr	r2, [r4, #4]
    3e0c:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    3e10:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    3e14:	f892 1088 	ldrb.w	r1, [r2, #136]	; 0x88
    3e18:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    3e1c:	23ff      	movs	r3, #255	; 0xff
    3e1e:	2106      	movs	r1, #6
    3e20:	4628      	mov	r0, r5
    3e22:	324a      	adds	r2, #74	; 0x4a
    3e24:	f00a fd2c 	bl	e880 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    3e28:	6862      	ldr	r2, [r4, #4]
    3e2a:	200b      	movs	r0, #11
    3e2c:	2100      	movs	r1, #0
    3e2e:	f882 1098 	strb.w	r1, [r2, #152]	; 0x98
    3e32:	b004      	add	sp, #16
    3e34:	bd70      	pop	{r4, r5, r6, pc}
    3e36:	a803      	add	r0, sp, #12
    3e38:	f000 f89c 	bl	3f74 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x970>
    3e3c:	6862      	ldr	r2, [r4, #4]
    3e3e:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    3e42:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    3e46:	f892 1088 	ldrb.w	r1, [r2, #136]	; 0x88
    3e4a:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    3e4e:	23ff      	movs	r3, #255	; 0xff
    3e50:	2106      	movs	r1, #6
    3e52:	4628      	mov	r0, r5
    3e54:	324a      	adds	r2, #74	; 0x4a
    3e56:	f00a fd13 	bl	e880 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    3e5a:	2005      	movs	r0, #5
    3e5c:	e7e9      	b.n	3e32 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x82e>
    3e5e:	0000      	.short	0x0000
    3e60:	200000d0 	.word	0x200000d0
    3e64:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    3e66:	b389      	cbz	r1, 3ecc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8c8>
    3e68:	2901      	cmp	r1, #1
    3e6a:	d034      	beq.n	3ed6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8d2>
    3e6c:	2505      	movs	r5, #5
    3e6e:	2902      	cmp	r1, #2
    3e70:	d004      	beq.n	3e7c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x878>
    3e72:	2906      	cmp	r1, #6
    3e74:	d025      	beq.n	3ec2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8be>
    3e76:	f003 ff3b 	bl	7cf0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    3e7a:	e01f      	b.n	3ebc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8b8>
    3e7c:	4606      	mov	r6, r0
    3e7e:	f003 ff37 	bl	7cf0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    3e82:	4c17      	ldr	r4, [pc, #92]	; (3ee0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8dc>)
    3e84:	6860      	ldr	r0, [r4, #4]
    3e86:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    3e8a:	b1b9      	cbz	r1, 3ebc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8b8>
    3e8c:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    3e90:	2801      	cmp	r0, #1
    3e92:	d001      	beq.n	3e98 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x894>
    3e94:	2802      	cmp	r0, #2
    3e96:	d111      	bne.n	3ebc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8b8>
    3e98:	a803      	add	r0, sp, #12
    3e9a:	f000 f86b 	bl	3f74 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x970>
    3e9e:	6862      	ldr	r2, [r4, #4]
    3ea0:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    3ea4:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    3ea8:	f892 1088 	ldrb.w	r1, [r2, #136]	; 0x88
    3eac:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    3eb0:	23ff      	movs	r3, #255	; 0xff
    3eb2:	2102      	movs	r1, #2
    3eb4:	4630      	mov	r0, r6
    3eb6:	324a      	adds	r2, #74	; 0x4a
    3eb8:	f00a fce2 	bl	e880 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    3ebc:	b004      	add	sp, #16
    3ebe:	4628      	mov	r0, r5
    3ec0:	bd70      	pop	{r4, r5, r6, pc}
    3ec2:	b004      	add	sp, #16
    3ec4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3ec8:	f7ff bf8c 	b.w	3de4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7e0>
    3ecc:	b004      	add	sp, #16
    3ece:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3ed2:	f7ff bf03 	b.w	3cdc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6d8>
    3ed6:	b004      	add	sp, #16
    3ed8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3edc:	f7ff be2c 	b.w	3b38 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x534>
    3ee0:	200000d0 	.word	0x200000d0
    3ee4:	b570      	push	{r4, r5, r6, lr}
    3ee6:	4c11      	ldr	r4, [pc, #68]	; (3f2c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x928>)
    3ee8:	4605      	mov	r5, r0
    3eea:	6861      	ldr	r1, [r4, #4]
    3eec:	f891 005d 	ldrb.w	r0, [r1, #93]	; 0x5d
    3ef0:	2800      	cmp	r0, #0
    3ef2:	d019      	beq.n	3f28 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x924>
    3ef4:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
    3ef8:	2800      	cmp	r0, #0
    3efa:	d015      	beq.n	3f28 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x924>
    3efc:	f891 0049 	ldrb.w	r0, [r1, #73]	; 0x49
    3f00:	314a      	adds	r1, #74	; 0x4a
    3f02:	f00a fc36 	bl	e772 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xa2>
    3f06:	b140      	cbz	r0, 3f1a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x916>
    3f08:	f7fe f8e4 	bl	20d4 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    3f0c:	6861      	ldr	r1, [r4, #4]
    3f0e:	462a      	mov	r2, r5
    3f10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3f14:	314a      	adds	r1, #74	; 0x4a
    3f16:	f009 bd0a 	b.w	d92e <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    3f1a:	6860      	ldr	r0, [r4, #4]
    3f1c:	4629      	mov	r1, r5
    3f1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3f22:	304a      	adds	r0, #74	; 0x4a
    3f24:	f009 bcf2 	b.w	d90c <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    3f28:	bd70      	pop	{r4, r5, r6, pc}
    3f2a:	0000      	.short	0x0000
    3f2c:	200000d0 	.word	0x200000d0
    3f30:	4602      	mov	r2, r0
    3f32:	480b      	ldr	r0, [pc, #44]	; (3f60 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x95c>)
    3f34:	b082      	sub	sp, #8
    3f36:	6840      	ldr	r0, [r0, #4]
    3f38:	f890 106d 	ldrb.w	r1, [r0, #109]	; 0x6d
    3f3c:	f88d 1000 	strb.w	r1, [sp]
    3f40:	9900      	ldr	r1, [sp, #0]
    3f42:	9100      	str	r1, [sp, #0]
    3f44:	f89d 1000 	ldrb.w	r1, [sp]
    3f48:	2900      	cmp	r1, #0
    3f4a:	d107      	bne.n	3f5c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x958>
    3f4c:	6e81      	ldr	r1, [r0, #104]	; 0x68
    3f4e:	2900      	cmp	r1, #0
    3f50:	d004      	beq.n	3f5c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x958>
    3f52:	f890 006c 	ldrb.w	r0, [r0, #108]	; 0x6c
    3f56:	b002      	add	sp, #8
    3f58:	f007 b91c 	b.w	b194 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    3f5c:	b002      	add	sp, #8
    3f5e:	4770      	bx	lr
    3f60:	200000d0 	.word	0x200000d0
    3f64:	b510      	push	{r4, lr}
    3f66:	f7fe fb9d 	bl	26a4 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
    3f6a:	4901      	ldr	r1, [pc, #4]	; (3f70 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x96c>)
    3f6c:	7008      	strb	r0, [r1, #0]
    3f6e:	bd10      	pop	{r4, pc}
    3f70:	200000d0 	.word	0x200000d0
    3f74:	4a07      	ldr	r2, [pc, #28]	; (3f94 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x990>)
    3f76:	b510      	push	{r4, lr}
    3f78:	f992 1000 	ldrsb.w	r1, [r2]
    3f7c:	297f      	cmp	r1, #127	; 0x7f
    3f7e:	d003      	beq.n	3f88 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x984>
    3f80:	7001      	strb	r1, [r0, #0]
    3f82:	207f      	movs	r0, #127	; 0x7f
    3f84:	7010      	strb	r0, [r2, #0]
    3f86:	bd10      	pop	{r4, pc}
    3f88:	f44f 6189 	mov.w	r1, #1096	; 0x448
    3f8c:	2032      	movs	r0, #50	; 0x32
    3f8e:	f7fc fd77 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3f92:	0000      	.short	0x0000
    3f94:	200000d0 	.word	0x200000d0
    3f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3f9c:	4607      	mov	r7, r0
    3f9e:	f7fd f969 	bl	1274 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    3fa2:	4604      	mov	r4, r0
    3fa4:	f7fd f96c 	bl	1280 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    3fa8:	4621      	mov	r1, r4
    3faa:	f00a fc44 	bl	e836 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x8c>
    3fae:	0005      	movs	r5, r0
    3fb0:	d012      	beq.n	3fd8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9d4>
    3fb2:	4c2d      	ldr	r4, [pc, #180]	; (4068 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x68>)
    3fb4:	6860      	ldr	r0, [r4, #4]
    3fb6:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    3fba:	2801      	cmp	r0, #1
    3fbc:	d004      	beq.n	3fc8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9c4>
    3fbe:	2802      	cmp	r0, #2
    3fc0:	d002      	beq.n	3fc8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9c4>
    3fc2:	f7ff fc4b 	bl	385c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x258>
    3fc6:	b150      	cbz	r0, 3fde <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9da>
    3fc8:	f06f 0613 	mvn.w	r6, #19
    3fcc:	b33f      	cbz	r7, 401e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1e>
    3fce:	4628      	mov	r0, r5
    3fd0:	f009 ffbd 	bl	df4e <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ>
    3fd4:	b950      	cbnz	r0, 3fec <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9e8>
    3fd6:	e005      	b.n	3fe4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9e0>
    3fd8:	f241 5142 	movw	r1, #5442	; 0x1542
    3fdc:	e03a      	b.n	4054 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x54>
    3fde:	f241 5148 	movw	r1, #5448	; 0x1548
    3fe2:	e037      	b.n	4054 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x54>
    3fe4:	4628      	mov	r0, r5
    3fe6:	f009 ffd4 	bl	df92 <sym_GSWR3VMQYTBBLEEXNPYAGKUY5XX24O5ABWIFKUI>
    3fea:	b1c0      	cbz	r0, 401e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1e>
    3fec:	6861      	ldr	r1, [r4, #4]
    3fee:	4628      	mov	r0, r5
    3ff0:	f891 2070 	ldrb.w	r2, [r1, #112]	; 0x70
    3ff4:	2a05      	cmp	r2, #5
    3ff6:	d202      	bcs.n	3ffe <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9fa>
    3ff8:	f241 41cc 	movw	r1, #5324	; 0x14cc
    3ffc:	e02a      	b.n	4054 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x54>
    3ffe:	f891 2070 	ldrb.w	r2, [r1, #112]	; 0x70
    4002:	2a0b      	cmp	r2, #11
    4004:	d302      	bcc.n	400c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xc>
    4006:	f241 41cd 	movw	r1, #5325	; 0x14cd
    400a:	e023      	b.n	4054 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x54>
    400c:	68e2      	ldr	r2, [r4, #12]
    400e:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
    4012:	6952      	ldr	r2, [r2, #20]
    4014:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    4018:	5851      	ldr	r1, [r2, r1]
    401a:	4788      	blx	r1
    401c:	e016      	b.n	404c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4c>
    401e:	6860      	ldr	r0, [r4, #4]
    4020:	f890 1070 	ldrb.w	r1, [r0, #112]	; 0x70
    4024:	2905      	cmp	r1, #5
    4026:	d202      	bcs.n	402e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2e>
    4028:	f241 5138 	movw	r1, #5432	; 0x1538
    402c:	e012      	b.n	4054 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x54>
    402e:	f890 1070 	ldrb.w	r1, [r0, #112]	; 0x70
    4032:	290b      	cmp	r1, #11
    4034:	d302      	bcc.n	403c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3c>
    4036:	f241 5139 	movw	r1, #5433	; 0x1539
    403a:	e00b      	b.n	4054 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x54>
    403c:	68e1      	ldr	r1, [r4, #12]
    403e:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    4042:	6989      	ldr	r1, [r1, #24]
    4044:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    4048:	5808      	ldr	r0, [r1, r0]
    404a:	4780      	blx	r0
    404c:	280f      	cmp	r0, #15
    404e:	d304      	bcc.n	405a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5a>
    4050:	f241 515d 	movw	r1, #5469	; 0x155d
    4054:	2032      	movs	r0, #50	; 0x32
    4056:	f7fc fd13 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    405a:	68e1      	ldr	r1, [r4, #12]
    405c:	6909      	ldr	r1, [r1, #16]
    405e:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    4062:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4066:	4700      	bx	r0
    4068:	200000d0 	.word	0x200000d0
    406c:	b510      	push	{r4, lr}
    406e:	b118      	cbz	r0, 4078 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x78>
    4070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4074:	f000 b922 	b.w	42bc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2bc>
    4078:	2900      	cmp	r1, #0
    407a:	d01d      	beq.n	40b8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xb8>
    407c:	480f      	ldr	r0, [pc, #60]	; (40bc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xbc>)
    407e:	6841      	ldr	r1, [r0, #4]
    4080:	f891 2070 	ldrb.w	r2, [r1, #112]	; 0x70
    4084:	2a0b      	cmp	r2, #11
    4086:	d202      	bcs.n	408e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8e>
    4088:	f241 6118 	movw	r1, #5656	; 0x1618
    408c:	e005      	b.n	409a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x9a>
    408e:	f891 2070 	ldrb.w	r2, [r1, #112]	; 0x70
    4092:	2a0f      	cmp	r2, #15
    4094:	d304      	bcc.n	40a0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xa0>
    4096:	f241 6119 	movw	r1, #5657	; 0x1619
    409a:	2032      	movs	r0, #50	; 0x32
    409c:	f7fc fcf0 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    40a0:	68c0      	ldr	r0, [r0, #12]
    40a2:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
    40a6:	6880      	ldr	r0, [r0, #8]
    40a8:	f06f 022b 	mvn.w	r2, #43	; 0x2b
    40ac:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    40b0:	5840      	ldr	r0, [r0, r1]
    40b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    40b6:	4700      	bx	r0
    40b8:	bd10      	pop	{r4, pc}
    40ba:	0000      	.short	0x0000
    40bc:	200000d0 	.word	0x200000d0
    40c0:	b510      	push	{r4, lr}
    40c2:	f7ff fabd 	bl	3640 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    40c6:	f000 f907 	bl	42d8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2d8>
    40ca:	4805      	ldr	r0, [pc, #20]	; (40e0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xe0>)
    40cc:	6881      	ldr	r1, [r0, #8]
    40ce:	2000      	movs	r0, #0
    40d0:	f7ff fc08 	bl	38e4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2e0>
    40d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    40d8:	2002      	movs	r0, #2
    40da:	f000 bae1 	b.w	46a0 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA>
    40de:	0000      	.short	0x0000
    40e0:	200000d0 	.word	0x200000d0
    40e4:	b510      	push	{r4, lr}
    40e6:	f7fd f8c5 	bl	1274 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    40ea:	4604      	mov	r4, r0
    40ec:	f7fd f8c8 	bl	1280 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    40f0:	4621      	mov	r1, r4
    40f2:	f00a fba0 	bl	e836 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x8c>
    40f6:	b150      	cbz	r0, 410e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x10e>
    40f8:	f004 f824 	bl	8144 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    40fc:	2000      	movs	r0, #0
    40fe:	f003 feed 	bl	7edc <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    4102:	4905      	ldr	r1, [pc, #20]	; (4118 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x118>)
    4104:	2006      	movs	r0, #6
    4106:	6849      	ldr	r1, [r1, #4]
    4108:	f881 0070 	strb.w	r0, [r1, #112]	; 0x70
    410c:	bd10      	pop	{r4, pc}
    410e:	f240 612b 	movw	r1, #1579	; 0x62b
    4112:	2032      	movs	r0, #50	; 0x32
    4114:	f7fc fcb4 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4118:	200000d0 	.word	0x200000d0
    411c:	490f      	ldr	r1, [pc, #60]	; (415c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x15c>)
    411e:	b510      	push	{r4, lr}
    4120:	6848      	ldr	r0, [r1, #4]
    4122:	f890 2070 	ldrb.w	r2, [r0, #112]	; 0x70
    4126:	2a06      	cmp	r2, #6
    4128:	d202      	bcs.n	4130 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x130>
    412a:	f241 6146 	movw	r1, #5702	; 0x1646
    412e:	e005      	b.n	413c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x13c>
    4130:	f890 2070 	ldrb.w	r2, [r0, #112]	; 0x70
    4134:	2a0b      	cmp	r2, #11
    4136:	d304      	bcc.n	4142 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x142>
    4138:	f241 6147 	movw	r1, #5703	; 0x1647
    413c:	2032      	movs	r0, #50	; 0x32
    413e:	f7fc fc9f 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4142:	68c9      	ldr	r1, [r1, #12]
    4144:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    4148:	68c9      	ldr	r1, [r1, #12]
    414a:	f06f 0213 	mvn.w	r2, #19
    414e:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    4152:	5808      	ldr	r0, [r1, r0]
    4154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4158:	4700      	bx	r0
    415a:	0000      	.short	0x0000
    415c:	200000d0 	.word	0x200000d0
    4160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4164:	4c31      	ldr	r4, [pc, #196]	; (422c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x22c>)
    4166:	4605      	mov	r5, r0
    4168:	460e      	mov	r6, r1
    416a:	6860      	ldr	r0, [r4, #4]
    416c:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    4170:	b120      	cbz	r0, 417c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x17c>
    4172:	2801      	cmp	r0, #1
    4174:	d002      	beq.n	417c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x17c>
    4176:	200c      	movs	r0, #12
    4178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    417c:	f003 ff3c 	bl	7ff8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    4180:	f003 fd94 	bl	7cac <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    4184:	f003 fbb8 	bl	78f8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    4188:	f004 f9ba 	bl	8500 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>
    418c:	4828      	ldr	r0, [pc, #160]	; (4230 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x230>)
    418e:	f003 fe9d 	bl	7ecc <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    4192:	4828      	ldr	r0, [pc, #160]	; (4234 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x234>)
    4194:	f004 f89a 	bl	82cc <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    4198:	4827      	ldr	r0, [pc, #156]	; (4238 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x238>)
    419a:	f004 f88d 	bl	82b8 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    419e:	4630      	mov	r0, r6
    41a0:	f003 ffd0 	bl	8144 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    41a4:	7968      	ldrb	r0, [r5, #5]
    41a6:	b110      	cbz	r0, 41ae <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1ae>
    41a8:	2001      	movs	r0, #1
    41aa:	f7ff fec1 	bl	3f30 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x92c>
    41ae:	7928      	ldrb	r0, [r5, #4]
    41b0:	2803      	cmp	r0, #3
    41b2:	d001      	beq.n	41b8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1b8>
    41b4:	b118      	cbz	r0, 41be <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1be>
    41b6:	e018      	b.n	41ea <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1ea>
    41b8:	f640 2141 	movw	r1, #2625	; 0xa41
    41bc:	e033      	b.n	4226 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x226>
    41be:	6861      	ldr	r1, [r4, #4]
    41c0:	2000      	movs	r0, #0
    41c2:	2503      	movs	r5, #3
    41c4:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
    41c8:	f891 207a 	ldrb.w	r2, [r1, #122]	; 0x7a
    41cc:	1c52      	adds	r2, r2, #1
    41ce:	fbb2 f7f5 	udiv	r7, r2, r5
    41d2:	fb05 2217 	mls	r2, r5, r7, r2
    41d6:	f881 207a 	strb.w	r2, [r1, #122]	; 0x7a
    41da:	fa23 f202 	lsr.w	r2, r3, r2
    41de:	07d2      	lsls	r2, r2, #31
    41e0:	d103      	bne.n	41ea <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1ea>
    41e2:	1c40      	adds	r0, r0, #1
    41e4:	b2c0      	uxtb	r0, r0
    41e6:	2803      	cmp	r0, #3
    41e8:	d3ee      	bcc.n	41c8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1c8>
    41ea:	6860      	ldr	r0, [r4, #4]
    41ec:	f990 005e 	ldrsb.w	r0, [r0, #94]	; 0x5e
    41f0:	f003 ff86 	bl	8100 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    41f4:	4631      	mov	r1, r6
    41f6:	2001      	movs	r0, #1
    41f8:	f7ff fa4a 	bl	3690 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8c>
    41fc:	2800      	cmp	r0, #0
    41fe:	d0bb      	beq.n	4178 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x178>
    4200:	f000 f922 	bl	4448 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x448>
    4204:	6860      	ldr	r0, [r4, #4]
    4206:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
    420a:	b138      	cbz	r0, 421c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x21c>
    420c:	f7fd ff66 	bl	20dc <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ>
    4210:	480a      	ldr	r0, [pc, #40]	; (423c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x23c>)
    4212:	6800      	ldr	r0, [r0, #0]
    4214:	2803      	cmp	r0, #3
    4216:	d004      	beq.n	4222 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x222>
    4218:	2000      	movs	r0, #0
    421a:	e7ad      	b.n	4178 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x178>
    421c:	f7fe f8bc 	bl	2398 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    4220:	e7f6      	b.n	4210 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x210>
    4222:	f640 2153 	movw	r1, #2643	; 0xa53
    4226:	2032      	movs	r0, #50	; 0x32
    4228:	f7fc fc2a 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    422c:	200000d0 	.word	0x200000d0
    4230:	00004530 	.word	0x00004530
    4234:	00555555 	.word	0x00555555
    4238:	8e89bed6 	.word	0x8e89bed6
    423c:	40001550 	.word	0x40001550
    4240:	b510      	push	{r4, lr}
    4242:	2000      	movs	r0, #0
    4244:	f7ff fe74 	bl	3f30 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x92c>
    4248:	4808      	ldr	r0, [pc, #32]	; (426c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x26c>)
    424a:	6840      	ldr	r0, [r0, #4]
    424c:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    4250:	b128      	cbz	r0, 425e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x25e>
    4252:	2801      	cmp	r0, #1
    4254:	d003      	beq.n	425e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x25e>
    4256:	2802      	cmp	r0, #2
    4258:	d004      	beq.n	4264 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x264>
    425a:	200c      	movs	r0, #12
    425c:	bd10      	pop	{r4, pc}
    425e:	f000 f82d 	bl	42bc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2bc>
    4262:	e001      	b.n	4268 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x268>
    4264:	f000 f840 	bl	42e8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2e8>
    4268:	2000      	movs	r0, #0
    426a:	bd10      	pop	{r4, pc}
    426c:	200000d0 	.word	0x200000d0
    4270:	b510      	push	{r4, lr}
    4272:	2000      	movs	r0, #0
    4274:	7048      	strb	r0, [r1, #1]
    4276:	2019      	movs	r0, #25
    4278:	7008      	strb	r0, [r1, #0]
    427a:	480f      	ldr	r0, [pc, #60]	; (42b8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2b8>)
    427c:	6840      	ldr	r0, [r0, #4]
    427e:	f8d0 0042 	ldr.w	r0, [r0, #66]	; 0x42
    4282:	6048      	str	r0, [r1, #4]
    4284:	7908      	ldrb	r0, [r1, #4]
    4286:	2801      	cmp	r0, #1
    4288:	d114      	bne.n	42b4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2b4>
    428a:	88cc      	ldrh	r4, [r1, #6]
    428c:	2100      	movs	r1, #0
    428e:	4620      	mov	r0, r4
    4290:	f009 fa92 	bl	d7b8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    4294:	2800      	cmp	r0, #0
    4296:	d00d      	beq.n	42b4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2b4>
    4298:	4620      	mov	r0, r4
    429a:	f009 fb14 	bl	d8c6 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    429e:	2100      	movs	r1, #0
    42a0:	4620      	mov	r0, r4
    42a2:	f7fc fe51 	bl	f48 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    42a6:	2800      	cmp	r0, #0
    42a8:	d004      	beq.n	42b4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2b4>
    42aa:	f44f 6182 	mov.w	r1, #1040	; 0x410
    42ae:	2032      	movs	r0, #50	; 0x32
    42b0:	f7fc fbe6 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    42b4:	bd10      	pop	{r4, pc}
    42b6:	0000      	.short	0x0000
    42b8:	200000d0 	.word	0x200000d0
    42bc:	b510      	push	{r4, lr}
    42be:	f7ff f9bf 	bl	3640 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    42c2:	4904      	ldr	r1, [pc, #16]	; (42d4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2d4>)
    42c4:	2001      	movs	r0, #1
    42c6:	6849      	ldr	r1, [r1, #4]
    42c8:	f881 0070 	strb.w	r0, [r1, #112]	; 0x70
    42cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    42d0:	f000 bb0a 	b.w	48e8 <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ>
    42d4:	200000d0 	.word	0x200000d0
    42d8:	4902      	ldr	r1, [pc, #8]	; (42e4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2e4>)
    42da:	2000      	movs	r0, #0
    42dc:	6849      	ldr	r1, [r1, #4]
    42de:	f881 0070 	strb.w	r0, [r1, #112]	; 0x70
    42e2:	4770      	bx	lr
    42e4:	200000d0 	.word	0x200000d0
    42e8:	b570      	push	{r4, r5, r6, lr}
    42ea:	f7fc ffc3 	bl	1274 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    42ee:	4604      	mov	r4, r0
    42f0:	f7fc ffc6 	bl	1280 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    42f4:	4621      	mov	r1, r4
    42f6:	f00a fa9e 	bl	e836 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x8c>
    42fa:	0004      	movs	r4, r0
    42fc:	d020      	beq.n	4340 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x340>
    42fe:	f00a faa7 	bl	e850 <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>
    4302:	2000      	movs	r0, #0
    4304:	f000 f9fa 	bl	46fc <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    4308:	b1f8      	cbz	r0, 434a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x34a>
    430a:	4d20      	ldr	r5, [pc, #128]	; (438c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x38c>)
    430c:	6868      	ldr	r0, [r5, #4]
    430e:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    4312:	2802      	cmp	r0, #2
    4314:	d003      	beq.n	431e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x31e>
    4316:	4621      	mov	r1, r4
    4318:	2000      	movs	r0, #0
    431a:	f7ff f9b9 	bl	3690 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8c>
    431e:	1ce0      	adds	r0, r4, #3
    4320:	f009 fb84 	bl	da2c <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    4324:	6869      	ldr	r1, [r5, #4]
    4326:	f881 007c 	strb.w	r0, [r1, #124]	; 0x7c
    432a:	b128      	cbz	r0, 4338 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x338>
    432c:	2440      	movs	r4, #64	; 0x40
    432e:	f003 fb03 	bl	7938 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    4332:	4620      	mov	r0, r4
    4334:	f003 fcc8 	bl	7cc8 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    4338:	f7ff fa90 	bl	385c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x258>
    433c:	b970      	cbnz	r0, 435c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x35c>
    433e:	e008      	b.n	4352 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x352>
    4340:	f240 5119 	movw	r1, #1305	; 0x519
    4344:	2032      	movs	r0, #50	; 0x32
    4346:	f7fc fb9b 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    434a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    434e:	f7ff bfb5 	b.w	42bc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2bc>
    4352:	6868      	ldr	r0, [r5, #4]
    4354:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    4358:	2802      	cmp	r0, #2
    435a:	d104      	bne.n	4366 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x366>
    435c:	2100      	movs	r1, #0
    435e:	2201      	movs	r2, #1
    4360:	4608      	mov	r0, r1
    4362:	f003 ff77 	bl	8254 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    4366:	6868      	ldr	r0, [r5, #4]
    4368:	21ff      	movs	r1, #255	; 0xff
    436a:	f880 1078 	strb.w	r1, [r0, #120]	; 0x78
    436e:	f880 1079 	strb.w	r1, [r0, #121]	; 0x79
    4372:	2100      	movs	r1, #0
    4374:	f880 1080 	strb.w	r1, [r0, #128]	; 0x80
    4378:	f880 107f 	strb.w	r1, [r0, #127]	; 0x7f
    437c:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
    4380:	f880 1098 	strb.w	r1, [r0, #152]	; 0x98
    4384:	2105      	movs	r1, #5
    4386:	f880 1070 	strb.w	r1, [r0, #112]	; 0x70
    438a:	bd70      	pop	{r4, r5, r6, pc}
    438c:	200000d0 	.word	0x200000d0
    4390:	b570      	push	{r4, r5, r6, lr}
    4392:	f7fc ff6f 	bl	1274 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    4396:	4604      	mov	r4, r0
    4398:	f7fc ff72 	bl	1280 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    439c:	4621      	mov	r1, r4
    439e:	f00a fa4a 	bl	e836 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x8c>
    43a2:	0005      	movs	r5, r0
    43a4:	d028      	beq.n	43f8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3f8>
    43a6:	4e19      	ldr	r6, [pc, #100]	; (440c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x40c>)
    43a8:	2004      	movs	r0, #4
    43aa:	6874      	ldr	r4, [r6, #4]
    43ac:	3470      	adds	r4, #112	; 0x70
    43ae:	f000 f9a5 	bl	46fc <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    43b2:	b330      	cbz	r0, 4402 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x402>
    43b4:	200c      	movs	r0, #12
    43b6:	7020      	strb	r0, [r4, #0]
    43b8:	2000      	movs	r0, #0
    43ba:	f000 f971 	bl	46a0 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA>
    43be:	7828      	ldrb	r0, [r5, #0]
    43c0:	6871      	ldr	r1, [r6, #4]
    43c2:	f3c0 1040 	ubfx	r0, r0, #5, #1
    43c6:	f881 008a 	strb.w	r0, [r1, #138]	; 0x8a
    43ca:	2005      	movs	r0, #5
    43cc:	f7ff fb16 	bl	39fc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3f8>
    43d0:	4a0f      	ldr	r2, [pc, #60]	; (4410 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x410>)
    43d2:	68b1      	ldr	r1, [r6, #8]
    43d4:	2520      	movs	r5, #32
    43d6:	6d50      	ldr	r0, [r2, #84]	; 0x54
    43d8:	f890 30ad 	ldrb.w	r3, [r0, #173]	; 0xad
    43dc:	7808      	ldrb	r0, [r1, #0]
    43de:	ea05 1343 	and.w	r3, r5, r3, lsl #5
    43e2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
    43e6:	4318      	orrs	r0, r3
    43e8:	7008      	strb	r0, [r1, #0]
    43ea:	6d50      	ldr	r0, [r2, #84]	; 0x54
    43ec:	7ea2      	ldrb	r2, [r4, #26]
    43ee:	f810 1fad 	ldrb.w	r1, [r0, #173]!
    43f2:	4011      	ands	r1, r2
    43f4:	7001      	strb	r1, [r0, #0]
    43f6:	bd70      	pop	{r4, r5, r6, pc}
    43f8:	f240 619a 	movw	r1, #1690	; 0x69a
    43fc:	2032      	movs	r0, #50	; 0x32
    43fe:	f7fc fb3f 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4402:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4406:	f7ff bf59 	b.w	42bc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2bc>
    440a:	0000      	.short	0x0000
    440c:	200000d0 	.word	0x200000d0
    4410:	20000dc0 	.word	0x20000dc0
    4414:	b510      	push	{r4, lr}
    4416:	2003      	movs	r0, #3
    4418:	f000 f970 	bl	46fc <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    441c:	b168      	cbz	r0, 443a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x43a>
    441e:	2003      	movs	r0, #3
    4420:	f7ff faec 	bl	39fc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3f8>
    4424:	2201      	movs	r2, #1
    4426:	4611      	mov	r1, r2
    4428:	2000      	movs	r0, #0
    442a:	f003 ff13 	bl	8254 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    442e:	4905      	ldr	r1, [pc, #20]	; (4444 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x444>)
    4430:	200b      	movs	r0, #11
    4432:	6849      	ldr	r1, [r1, #4]
    4434:	f881 0070 	strb.w	r0, [r1, #112]	; 0x70
    4438:	bd10      	pop	{r4, pc}
    443a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    443e:	f7ff bf3d 	b.w	42bc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2bc>
    4442:	0000      	.short	0x0000
    4444:	200000d0 	.word	0x200000d0
    4448:	b570      	push	{r4, r5, r6, lr}
    444a:	4d19      	ldr	r5, [pc, #100]	; (44b0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4b0>)
    444c:	2000      	movs	r0, #0
    444e:	686c      	ldr	r4, [r5, #4]
    4450:	f884 0098 	strb.w	r0, [r4, #152]	; 0x98
    4454:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
    4458:	b910      	cbnz	r0, 4460 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x460>
    445a:	f894 007d 	ldrb.w	r0, [r4, #125]	; 0x7d
    445e:	b308      	cbz	r0, 44a4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4a4>
    4460:	e9f4 1024 	ldrd	r1, r0, [r4, #144]!	; 0x90
    4464:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    4468:	4050      	eors	r0, r2
    446a:	ea70 0101 	orns	r1, r0, r1
    446e:	d019      	beq.n	44a4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4a4>
    4470:	f006 feae 	bl	b1d0 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    4474:	e9d4 2300 	ldrd	r2, r3, [r4]
    4478:	1a80      	subs	r0, r0, r2
    447a:	4199      	sbcs	r1, r3
    447c:	d312      	bcc.n	44a4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4a4>
    447e:	f7fd ff07 	bl	2290 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    4482:	490c      	ldr	r1, [pc, #48]	; (44b4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4b4>)
    4484:	fba0 2301 	umull	r2, r3, r0, r1
    4488:	6868      	ldr	r0, [r5, #4]
    448a:	3090      	adds	r0, #144	; 0x90
    448c:	f00a f9d5 	bl	e83a <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x90>
    4490:	6868      	ldr	r0, [r5, #4]
    4492:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    4496:	b110      	cbz	r0, 449e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x49e>
    4498:	2001      	movs	r0, #1
    449a:	f7fd fe6b 	bl	2174 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>
    449e:	2001      	movs	r0, #1
    44a0:	f7ff fd20 	bl	3ee4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8e0>
    44a4:	6869      	ldr	r1, [r5, #4]
    44a6:	2002      	movs	r0, #2
    44a8:	f881 0070 	strb.w	r0, [r1, #112]	; 0x70
    44ac:	bd70      	pop	{r4, r5, r6, pc}
    44ae:	0000      	.short	0x0000
    44b0:	200000d0 	.word	0x200000d0
    44b4:	000f4240 	.word	0x000f4240
    44b8:	000042d9 	.word	0x000042d9
    44bc:	000042bd 	.word	0x000042bd
    44c0:	0000e817 	.word	0x0000e817
    44c4:	0000e817 	.word	0x0000e817
    44c8:	0000e817 	.word	0x0000e817
    44cc:	000042e9 	.word	0x000042e9
    44d0:	0000e817 	.word	0x0000e817
    44d4:	0000e817 	.word	0x0000e817
    44d8:	0000e817 	.word	0x0000e817
    44dc:	0000e817 	.word	0x0000e817
    44e0:	0000e817 	.word	0x0000e817
    44e4:	00004415 	.word	0x00004415
    44e8:	00004391 	.word	0x00004391
    44ec:	0000e817 	.word	0x0000e817
    44f0:	0000e817 	.word	0x0000e817
    44f4:	000040e5 	.word	0x000040e5
    44f8:	000040c1 	.word	0x000040c1
    44fc:	00000000 	.word	0x00000000
    4500:	0000e821 	.word	0x0000e821
    4504:	0000e7bf 	.word	0x0000e7bf
    4508:	0000e7d1 	.word	0x0000e7d1
    450c:	0000e7df 	.word	0x0000e7df
    4510:	00003809 	.word	0x00003809
    4514:	00004161 	.word	0x00004161
    4518:	00004241 	.word	0x00004241
    451c:	000044f4 	.word	0x000044f4
    4520:	000044fc 	.word	0x000044fc
    4524:	000044b8 	.word	0x000044b8
    4528:	0000450c 	.word	0x0000450c
    452c:	00004504 	.word	0x00004504
    4530:	0000411d 	.word	0x0000411d
    4534:	00003f99 	.word	0x00003f99
    4538:	0000406d 	.word	0x0000406d
    453c:	0000e833 	.word	0x0000e833
    4540:	b570      	push	{r4, r5, r6, lr}
    4542:	4604      	mov	r4, r0
    4544:	7800      	ldrb	r0, [r0, #0]
    4546:	2805      	cmp	r0, #5
    4548:	d001      	beq.n	454e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x54e>
    454a:	2148      	movs	r1, #72	; 0x48
    454c:	e058      	b.n	4600 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x600>
    454e:	7ba0      	ldrb	r0, [r4, #14]
    4550:	06c0      	lsls	r0, r0, #27
    4552:	d401      	bmi.n	4558 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x558>
    4554:	2149      	movs	r1, #73	; 0x49
    4556:	e053      	b.n	4600 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x600>
    4558:	221c      	movs	r2, #28
    455a:	1d21      	adds	r1, r4, #4
    455c:	482f      	ldr	r0, [pc, #188]	; (461c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x61c>)
    455e:	f00c f8a6 	bl	106ae <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4562:	482e      	ldr	r0, [pc, #184]	; (461c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x61c>)
    4564:	7b22      	ldrb	r2, [r4, #12]
    4566:	f104 0120 	add.w	r1, r4, #32
    456a:	301c      	adds	r0, #28
    456c:	f00c f89f 	bl	106ae <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4570:	482a      	ldr	r0, [pc, #168]	; (461c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x61c>)
    4572:	f04f 0201 	mov.w	r2, #1
    4576:	7a81      	ldrb	r1, [r0, #10]
    4578:	0749      	lsls	r1, r1, #29
    457a:	d502      	bpl.n	4582 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x582>
    457c:	7cc1      	ldrb	r1, [r0, #19]
    457e:	29fe      	cmp	r1, #254	; 0xfe
    4580:	d00c      	beq.n	459c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x59c>
    4582:	2304      	movs	r3, #4
    4584:	7023      	strb	r3, [r4, #0]
    4586:	6801      	ldr	r1, [r0, #0]
    4588:	6061      	str	r1, [r4, #4]
    458a:	6841      	ldr	r1, [r0, #4]
    458c:	60a1      	str	r1, [r4, #8]
    458e:	8901      	ldrh	r1, [r0, #8]
    4590:	81a1      	strh	r1, [r4, #12]
    4592:	7a81      	ldrb	r1, [r0, #10]
    4594:	070d      	lsls	r5, r1, #28
    4596:	d519      	bpl.n	45cc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5cc>
    4598:	73a3      	strb	r3, [r4, #14]
    459a:	e02d      	b.n	45f8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5f8>
    459c:	2113      	movs	r1, #19
    459e:	7021      	strb	r1, [r4, #0]
    45a0:	7801      	ldrb	r1, [r0, #0]
    45a2:	7121      	strb	r1, [r4, #4]
    45a4:	7162      	strb	r2, [r4, #5]
    45a6:	7841      	ldrb	r1, [r0, #1]
    45a8:	71a1      	strb	r1, [r4, #6]
    45aa:	f8d0 1002 	ldr.w	r1, [r0, #2]
    45ae:	f8c4 1007 	str.w	r1, [r4, #7]
    45b2:	88c1      	ldrh	r1, [r0, #6]
    45b4:	f8a4 100b 	strh.w	r1, [r4, #11]
    45b8:	21fe      	movs	r1, #254	; 0xfe
    45ba:	7361      	strb	r1, [r4, #13]
    45bc:	6941      	ldr	r1, [r0, #20]
    45be:	f8c4 100e 	str.w	r1, [r4, #14]
    45c2:	8b01      	ldrh	r1, [r0, #24]
    45c4:	8261      	strh	r1, [r4, #18]
    45c6:	7a40      	ldrb	r0, [r0, #9]
    45c8:	7520      	strb	r0, [r4, #20]
    45ca:	bd70      	pop	{r4, r5, r6, pc}
    45cc:	07cb      	lsls	r3, r1, #31
    45ce:	d003      	beq.n	45d8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5d8>
    45d0:	078b      	lsls	r3, r1, #30
    45d2:	d501      	bpl.n	45d8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5d8>
    45d4:	2100      	movs	r1, #0
    45d6:	e00e      	b.n	45f6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5f6>
    45d8:	074b      	lsls	r3, r1, #29
    45da:	d501      	bpl.n	45e0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5e0>
    45dc:	73a2      	strb	r2, [r4, #14]
    45de:	e00b      	b.n	45f8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5f8>
    45e0:	07ca      	lsls	r2, r1, #31
    45e2:	d110      	bne.n	4606 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x606>
    45e4:	078a      	lsls	r2, r1, #30
    45e6:	d501      	bpl.n	45ec <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5ec>
    45e8:	2102      	movs	r1, #2
    45ea:	e004      	b.n	45f6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5f6>
    45ec:	07ca      	lsls	r2, r1, #31
    45ee:	d10a      	bne.n	4606 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x606>
    45f0:	0789      	lsls	r1, r1, #30
    45f2:	d408      	bmi.n	4606 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x606>
    45f4:	2103      	movs	r1, #3
    45f6:	73a1      	strb	r1, [r4, #14]
    45f8:	7a02      	ldrb	r2, [r0, #8]
    45fa:	2a1f      	cmp	r2, #31
    45fc:	d905      	bls.n	460a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x60a>
    45fe:	218d      	movs	r1, #141	; 0x8d
    4600:	2033      	movs	r0, #51	; 0x33
    4602:	f7fc fa3d 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4606:	218a      	movs	r1, #138	; 0x8a
    4608:	e7fa      	b.n	4600 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x600>
    460a:	f104 000f 	add.w	r0, r4, #15
    460e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4612:	4902      	ldr	r1, [pc, #8]	; (461c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x61c>)
    4614:	311c      	adds	r1, #28
    4616:	f00c b84a 	b.w	106ae <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    461a:	0000      	.short	0x0000
    461c:	2000181d 	.word	0x2000181d
    4620:	2100      	movs	r1, #0
    4622:	7201      	strb	r1, [r0, #8]
    4624:	2204      	movs	r2, #4
    4626:	4901      	ldr	r1, [pc, #4]	; (462c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x62c>)
    4628:	f009 bd99 	b.w	e15e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    462c:	0000ea0b 	.word	0x0000ea0b

00004630 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>:
    4630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4634:	4616      	mov	r6, r2
    4636:	460c      	mov	r4, r1
    4638:	4605      	mov	r5, r0
    463a:	f009 fca6 	bl	df8a <sym_GTN2QTPVJUP6VPTTNNKS6RR7APIHG3FG2T7SNQY>
    463e:	7460      	strb	r0, [r4, #17]
    4640:	4628      	mov	r0, r5
    4642:	f009 fc99 	bl	df78 <sym_2RWLERIIOLMYS4LVQVNNIFLEQSG65A5Q5F2FPLA>
    4646:	74a0      	strb	r0, [r4, #18]
    4648:	1cea      	adds	r2, r5, #3
    464a:	4b14      	ldr	r3, [pc, #80]	; (469c <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x6c>)
    464c:	1d90      	adds	r0, r2, #6
    464e:	2100      	movs	r1, #0
    4650:	2e07      	cmp	r6, #7
    4652:	d21f      	bcs.n	4694 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x64>
    4654:	e8df f006 	tbb	[pc, r6]
    4658:	1e110b04 	.word	0x1e110b04
    465c:	00041e13 	.word	0x00041e13
    4660:	781b      	ldrb	r3, [r3, #0]
    4662:	e00d      	b.n	4680 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x50>
    4664:	60e0      	str	r0, [r4, #12]
    4666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    466a:	60e1      	str	r1, [r4, #12]
    466c:	e7fb      	b.n	4666 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x36>
    466e:	785b      	ldrb	r3, [r3, #1]
    4670:	7063      	strb	r3, [r4, #1]
    4672:	e9c4 2001 	strd	r2, r0, [r4, #4]
    4676:	7421      	strb	r1, [r4, #16]
    4678:	e7f7      	b.n	466a <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x3a>
    467a:	789b      	ldrb	r3, [r3, #2]
    467c:	e000      	b.n	4680 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x50>
    467e:	78db      	ldrb	r3, [r3, #3]
    4680:	7063      	strb	r3, [r4, #1]
    4682:	e9c4 2101 	strd	r2, r1, [r4, #4]
    4686:	786a      	ldrb	r2, [r5, #1]
    4688:	1f92      	subs	r2, r2, #6
    468a:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    468e:	7422      	strb	r2, [r4, #16]
    4690:	d0eb      	beq.n	466a <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x3a>
    4692:	e7e7      	b.n	4664 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x34>
    4694:	7061      	strb	r1, [r4, #1]
    4696:	6061      	str	r1, [r4, #4]
    4698:	60a1      	str	r1, [r4, #8]
    469a:	e7ec      	b.n	4676 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x46>
    469c:	0001091a 	.word	0x0001091a

000046a0 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA>:
    46a0:	b570      	push	{r4, r5, r6, lr}
    46a2:	b140      	cbz	r0, 46b6 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA+0x16>
    46a4:	2801      	cmp	r0, #1
    46a6:	d006      	beq.n	46b6 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA+0x16>
    46a8:	2802      	cmp	r0, #2
    46aa:	d00a      	beq.n	46c2 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA+0x22>
    46ac:	2803      	cmp	r0, #3
    46ae:	d006      	beq.n	46be <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA+0x1e>
    46b0:	f640 01c8 	movw	r1, #2248	; 0x8c8
    46b4:	e015      	b.n	46e2 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA+0x42>
    46b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    46ba:	f000 b97d 	b.w	49b8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x38>
    46be:	2001      	movs	r0, #1
    46c0:	e000      	b.n	46c4 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA+0x24>
    46c2:	2000      	movs	r0, #0
    46c4:	4c0c      	ldr	r4, [pc, #48]	; (46f8 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA+0x58>)
    46c6:	2101      	movs	r1, #1
    46c8:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
    46cc:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    46d0:	6a20      	ldr	r0, [r4, #32]
    46d2:	2500      	movs	r5, #0
    46d4:	f880 5248 	strb.w	r5, [r0, #584]	; 0x248
    46d8:	7821      	ldrb	r1, [r4, #0]
    46da:	2905      	cmp	r1, #5
    46dc:	d004      	beq.n	46e8 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA+0x48>
    46de:	f640 0149 	movw	r1, #2121	; 0x849
    46e2:	2021      	movs	r0, #33	; 0x21
    46e4:	f7fc f9cc 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    46e8:	f000 fd9a 	bl	5220 <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I>
    46ec:	6225      	str	r5, [r4, #32]
    46ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    46f2:	f000 b9c5 	b.w	4a80 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x100>
    46f6:	0000      	.short	0x0000
    46f8:	20000e68 	.word	0x20000e68

000046fc <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>:
    46fc:	b570      	push	{r4, r5, r6, lr}
    46fe:	4605      	mov	r5, r0
    4700:	f006 fd66 	bl	b1d0 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    4704:	4c16      	ldr	r4, [pc, #88]	; (4760 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x64>)
    4706:	6921      	ldr	r1, [r4, #16]
    4708:	1a46      	subs	r6, r0, r1
    470a:	b155      	cbz	r5, 4722 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x26>
    470c:	2d03      	cmp	r5, #3
    470e:	d00d      	beq.n	472c <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x30>
    4710:	2d04      	cmp	r5, #4
    4712:	d00e      	beq.n	4732 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x36>
    4714:	2d06      	cmp	r5, #6
    4716:	d01d      	beq.n	4754 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x58>
    4718:	f240 31d6 	movw	r1, #982	; 0x3d6
    471c:	2021      	movs	r0, #33	; 0x21
    471e:	f7fc f9af 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4722:	2001      	movs	r0, #1
    4724:	f00a fa0f 	bl	eb46 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x16>
    4728:	3098      	adds	r0, #152	; 0x98
    472a:	e004      	b.n	4736 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x3a>
    472c:	f44f 7057 	mov.w	r0, #860	; 0x35c
    4730:	e001      	b.n	4736 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x3a>
    4732:	f44f 70fc 	mov.w	r0, #504	; 0x1f8
    4736:	6b21      	ldr	r1, [r4, #48]	; 0x30
    4738:	1835      	adds	r5, r6, r0
    473a:	39f4      	subs	r1, #244	; 0xf4
    473c:	428d      	cmp	r5, r1
    473e:	d307      	bcc.n	4750 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x54>
    4740:	2600      	movs	r6, #0
    4742:	f000 fac9 	bl	4cd8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x358>
    4746:	b140      	cbz	r0, 475a <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5e>
    4748:	6b20      	ldr	r0, [r4, #48]	; 0x30
    474a:	38f4      	subs	r0, #244	; 0xf4
    474c:	4285      	cmp	r5, r0
    474e:	d203      	bcs.n	4758 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5c>
    4750:	2601      	movs	r6, #1
    4752:	e002      	b.n	475a <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5e>
    4754:	2001      	movs	r0, #1
    4756:	bd70      	pop	{r4, r5, r6, pc}
    4758:	2600      	movs	r6, #0
    475a:	4630      	mov	r0, r6
    475c:	bd70      	pop	{r4, r5, r6, pc}
    475e:	0000      	.short	0x0000
    4760:	20000e68 	.word	0x20000e68

00004764 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI>:
    4764:	b5f0      	push	{r4, r5, r6, r7, lr}
    4766:	4c1e      	ldr	r4, [pc, #120]	; (47e0 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x7c>)
    4768:	4607      	mov	r7, r0
    476a:	b087      	sub	sp, #28
    476c:	7820      	ldrb	r0, [r4, #0]
    476e:	460e      	mov	r6, r1
    4770:	b110      	cbz	r0, 4778 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x14>
    4772:	200c      	movs	r0, #12
    4774:	b007      	add	sp, #28
    4776:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4778:	f7fe fd34 	bl	31e4 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    477c:	4605      	mov	r5, r0
    477e:	6227      	str	r7, [r4, #32]
    4780:	f897 0248 	ldrb.w	r0, [r7, #584]	; 0x248
    4784:	b110      	cbz	r0, 478c <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x28>
    4786:	f44f 713f 	mov.w	r1, #764	; 0x2fc
    478a:	e025      	b.n	47d8 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x74>
    478c:	2005      	movs	r0, #5
    478e:	7020      	strb	r0, [r4, #0]
    4790:	2000      	movs	r0, #0
    4792:	7060      	strb	r0, [r4, #1]
    4794:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
    4798:	f000 fae4 	bl	4d64 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3e4>
    479c:	64a0      	str	r0, [r4, #72]	; 0x48
    479e:	2100      	movs	r1, #0
    47a0:	4810      	ldr	r0, [pc, #64]	; (47e4 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x80>)
    47a2:	f006 fae7 	bl	ad74 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    47a6:	7028      	strb	r0, [r5, #0]
    47a8:	2820      	cmp	r0, #32
    47aa:	d00d      	beq.n	47c8 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x64>
    47ac:	4633      	mov	r3, r6
    47ae:	2200      	movs	r2, #0
    47b0:	2101      	movs	r1, #1
    47b2:	4668      	mov	r0, sp
    47b4:	f000 fb30 	bl	4e18 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x498>
    47b8:	b148      	cbz	r0, 47ce <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x6a>
    47ba:	7828      	ldrb	r0, [r5, #0]
    47bc:	4669      	mov	r1, sp
    47be:	f00a f9ed 	bl	eb9c <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x6c>
    47c2:	b138      	cbz	r0, 47d4 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x70>
    47c4:	2000      	movs	r0, #0
    47c6:	e7d5      	b.n	4774 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x10>
    47c8:	f240 310a 	movw	r1, #778	; 0x30a
    47cc:	e004      	b.n	47d8 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x74>
    47ce:	f240 310d 	movw	r1, #781	; 0x30d
    47d2:	e001      	b.n	47d8 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x74>
    47d4:	f240 310e 	movw	r1, #782	; 0x30e
    47d8:	2021      	movs	r0, #33	; 0x21
    47da:	f7fc f951 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    47de:	0000      	.short	0x0000
    47e0:	20000e68 	.word	0x20000e68
    47e4:	00004aa1 	.word	0x00004aa1

000047e8 <sym_GM7QU7LP6UH4DZPOIR7WHUEKZSOPEOATHYRRTQI>:
    47e8:	4902      	ldr	r1, [pc, #8]	; (47f4 <sym_GM7QU7LP6UH4DZPOIR7WHUEKZSOPEOATHYRRTQI+0xc>)
    47ea:	6a09      	ldr	r1, [r1, #32]
    47ec:	6001      	str	r1, [r0, #0]
    47ee:	f000 b83d 	b.w	486c <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>
    47f2:	0000      	.short	0x0000
    47f4:	20000e68 	.word	0x20000e68

000047f8 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA>:
    47f8:	b570      	push	{r4, r5, r6, lr}
    47fa:	b086      	sub	sp, #24
    47fc:	4606      	mov	r6, r0
    47fe:	b111      	cbz	r1, 4806 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0xe>
    4800:	2011      	movs	r0, #17
    4802:	b006      	add	sp, #24
    4804:	bd70      	pop	{r4, r5, r6, pc}
    4806:	4c17      	ldr	r4, [pc, #92]	; (4864 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x6c>)
    4808:	7820      	ldrb	r0, [r4, #0]
    480a:	b108      	cbz	r0, 4810 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x18>
    480c:	200c      	movs	r0, #12
    480e:	e7f8      	b.n	4802 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0xa>
    4810:	f7fe fce8 	bl	31e4 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    4814:	4605      	mov	r5, r0
    4816:	2000      	movs	r0, #0
    4818:	7060      	strb	r0, [r4, #1]
    481a:	2004      	movs	r0, #4
    481c:	7020      	strb	r0, [r4, #0]
    481e:	f000 faa1 	bl	4d64 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3e4>
    4822:	64a0      	str	r0, [r4, #72]	; 0x48
    4824:	2100      	movs	r1, #0
    4826:	4810      	ldr	r0, [pc, #64]	; (4868 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x70>)
    4828:	f006 faa4 	bl	ad74 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    482c:	7028      	strb	r0, [r5, #0]
    482e:	2820      	cmp	r0, #32
    4830:	d00d      	beq.n	484e <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x56>
    4832:	4633      	mov	r3, r6
    4834:	2200      	movs	r2, #0
    4836:	2101      	movs	r1, #1
    4838:	4668      	mov	r0, sp
    483a:	f000 faed 	bl	4e18 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x498>
    483e:	b148      	cbz	r0, 4854 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x5c>
    4840:	7828      	ldrb	r0, [r5, #0]
    4842:	4669      	mov	r1, sp
    4844:	f00a f9aa 	bl	eb9c <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x6c>
    4848:	b138      	cbz	r0, 485a <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x62>
    484a:	2000      	movs	r0, #0
    484c:	e7d9      	b.n	4802 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0xa>
    484e:	f240 3162 	movw	r1, #866	; 0x362
    4852:	e004      	b.n	485e <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x66>
    4854:	f44f 7159 	mov.w	r1, #868	; 0x364
    4858:	e001      	b.n	485e <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x66>
    485a:	f240 3165 	movw	r1, #869	; 0x365
    485e:	2021      	movs	r0, #33	; 0x21
    4860:	f7fc f90e 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4864:	20000e68 	.word	0x20000e68
    4868:	00004aa1 	.word	0x00004aa1

0000486c <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>:
    486c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4870:	2700      	movs	r7, #0
    4872:	f7fe fcb7 	bl	31e4 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    4876:	4c18      	ldr	r4, [pc, #96]	; (48d8 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x6c>)
    4878:	4605      	mov	r5, r0
    487a:	7820      	ldrb	r0, [r4, #0]
    487c:	2804      	cmp	r0, #4
    487e:	d005      	beq.n	488c <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x20>
    4880:	7820      	ldrb	r0, [r4, #0]
    4882:	2805      	cmp	r0, #5
    4884:	d002      	beq.n	488c <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x20>
    4886:	200c      	movs	r0, #12
    4888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    488c:	2001      	movs	r0, #1
    488e:	7060      	strb	r0, [r4, #1]
    4890:	7b20      	ldrb	r0, [r4, #12]
    4892:	b160      	cbz	r0, 48ae <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x42>
    4894:	f3ef 8610 	mrs	r6, PRIMASK
    4898:	b672      	cpsid	i
    489a:	7b20      	ldrb	r0, [r4, #12]
    489c:	b128      	cbz	r0, 48aa <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x3e>
    489e:	7b60      	ldrb	r0, [r4, #13]
    48a0:	b118      	cbz	r0, 48aa <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x3e>
    48a2:	f009 ff82 	bl	e7aa <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>
    48a6:	f000 f8eb 	bl	4a80 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x100>
    48aa:	b126      	cbz	r6, 48b6 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x4a>
    48ac:	e004      	b.n	48b8 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x4c>
    48ae:	7828      	ldrb	r0, [r5, #0]
    48b0:	f005 fff4 	bl	a89c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    48b4:	e000      	b.n	48b8 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x4c>
    48b6:	b662      	cpsie	i
    48b8:	7828      	ldrb	r0, [r5, #0]
    48ba:	f006 f943 	bl	ab44 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    48be:	f000 fc03 	bl	50c8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x748>
    48c2:	2000      	movs	r0, #0
    48c4:	7060      	strb	r0, [r4, #1]
    48c6:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    48ca:	b100      	cbz	r0, 48ce <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x62>
    48cc:	270c      	movs	r7, #12
    48ce:	f000 fc27 	bl	5120 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7a0>
    48d2:	4638      	mov	r0, r7
    48d4:	e7d8      	b.n	4888 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x1c>
    48d6:	0000      	.short	0x0000
    48d8:	20000e68 	.word	0x20000e68

000048dc <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>:
    48dc:	4801      	ldr	r0, [pc, #4]	; (48e4 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ+0x8>)
    48de:	7800      	ldrb	r0, [r0, #0]
    48e0:	4770      	bx	lr
    48e2:	0000      	.short	0x0000
    48e4:	20000e68 	.word	0x20000e68

000048e8 <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ>:
    48e8:	b510      	push	{r4, lr}
    48ea:	4c10      	ldr	r4, [pc, #64]	; (492c <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ+0x44>)
    48ec:	b086      	sub	sp, #24
    48ee:	7b20      	ldrb	r0, [r4, #12]
    48f0:	b1b0      	cbz	r0, 4920 <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ+0x38>
    48f2:	7860      	ldrb	r0, [r4, #1]
    48f4:	b9a0      	cbnz	r0, 4920 <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ+0x38>
    48f6:	2300      	movs	r3, #0
    48f8:	461a      	mov	r2, r3
    48fa:	4619      	mov	r1, r3
    48fc:	4668      	mov	r0, sp
    48fe:	f000 fa8b 	bl	4e18 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x498>
    4902:	b158      	cbz	r0, 491c <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ+0x34>
    4904:	f7fe fc6e 	bl	31e4 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    4908:	7800      	ldrb	r0, [r0, #0]
    490a:	4669      	mov	r1, sp
    490c:	f00a f946 	bl	eb9c <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x6c>
    4910:	b930      	cbnz	r0, 4920 <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ+0x38>
    4912:	f240 71ae 	movw	r1, #1966	; 0x7ae
    4916:	2021      	movs	r0, #33	; 0x21
    4918:	f7fc f8b2 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    491c:	2001      	movs	r0, #1
    491e:	70a0      	strb	r0, [r4, #2]
    4920:	b006      	add	sp, #24
    4922:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4926:	f000 b8ab 	b.w	4a80 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x100>
    492a:	0000      	.short	0x0000
    492c:	20000e68 	.word	0x20000e68

00004930 <sym_ONCJZGDCVZ7ETEDMUY5VMUUWXXIFFJBUOZSJQ3Q>:
    4930:	b508      	push	{r3, lr}
    4932:	2260      	movs	r2, #96	; 0x60
    4934:	2100      	movs	r1, #0
    4936:	480c      	ldr	r0, [pc, #48]	; (4968 <sym_ONCJZGDCVZ7ETEDMUY5VMUUWXXIFFJBUOZSJQ3Q+0x38>)
    4938:	f00b ff33 	bl	107a2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    493c:	f7fe fc52 	bl	31e4 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    4940:	2120      	movs	r1, #32
    4942:	7001      	strb	r1, [r0, #0]
    4944:	f000 f812 	bl	496c <sym_CEIRMF45E42FC47RKIFGTU36Z7XGQCJUDSF57LQ>
    4948:	b120      	cbz	r0, 4954 <sym_ONCJZGDCVZ7ETEDMUY5VMUUWXXIFFJBUOZSJQ3Q+0x24>
    494a:	f240 2135 	movw	r1, #565	; 0x235
    494e:	2021      	movs	r0, #33	; 0x21
    4950:	f7fc f896 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4954:	f242 7010 	movw	r0, #10000	; 0x2710
    4958:	9000      	str	r0, [sp, #0]
    495a:	2201      	movs	r2, #1
    495c:	4669      	mov	r1, sp
    495e:	1080      	asrs	r0, r0, #2
    4960:	f000 f940 	bl	4be4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x264>
    4964:	bd08      	pop	{r3, pc}
    4966:	0000      	.short	0x0000
    4968:	20000e68 	.word	0x20000e68

0000496c <sym_CEIRMF45E42FC47RKIFGTU36Z7XGQCJUDSF57LQ>:
    496c:	4803      	ldr	r0, [pc, #12]	; (497c <sym_CEIRMF45E42FC47RKIFGTU36Z7XGQCJUDSF57LQ+0x10>)
    496e:	b510      	push	{r4, lr}
    4970:	7800      	ldrb	r0, [r0, #0]
    4972:	b108      	cbz	r0, 4978 <sym_CEIRMF45E42FC47RKIFGTU36Z7XGQCJUDSF57LQ+0xc>
    4974:	f7ff ff7a 	bl	486c <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>
    4978:	2000      	movs	r0, #0
    497a:	bd10      	pop	{r4, pc}
    497c:	20000e68 	.word	0x20000e68

00004980 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ>:
    4980:	490c      	ldr	r1, [pc, #48]	; (49b4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x34>)
    4982:	b508      	push	{r3, lr}
    4984:	7809      	ldrb	r1, [r1, #0]
    4986:	b121      	cbz	r1, 4992 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x12>
    4988:	f44f 7147 	mov.w	r1, #796	; 0x31c
    498c:	2021      	movs	r0, #33	; 0x21
    498e:	f7fc f877 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4992:	2300      	movs	r3, #0
    4994:	9300      	str	r3, [sp, #0]
    4996:	7801      	ldrb	r1, [r0, #0]
    4998:	461a      	mov	r2, r3
    499a:	07c9      	lsls	r1, r1, #31
    499c:	d003      	beq.n	49a6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x26>
    499e:	e9d0 3001 	ldrd	r3, r0, [r0, #4]
    49a2:	2201      	movs	r2, #1
    49a4:	9000      	str	r0, [sp, #0]
    49a6:	4669      	mov	r1, sp
    49a8:	4618      	mov	r0, r3
    49aa:	f000 f91b 	bl	4be4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x264>
    49ae:	2000      	movs	r0, #0
    49b0:	bd08      	pop	{r3, pc}
    49b2:	0000      	.short	0x0000
    49b4:	20000e68 	.word	0x20000e68
    49b8:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    49bc:	4c2e      	ldr	r4, [pc, #184]	; (4a78 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xf8>)
    49be:	4680      	mov	r8, r0
    49c0:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
    49c4:	461e      	mov	r6, r3
    49c6:	f003 fadd 	bl	7f84 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    49ca:	4607      	mov	r7, r0
    49cc:	6a20      	ldr	r0, [r4, #32]
    49ce:	2101      	movs	r1, #1
    49d0:	f880 106a 	strb.w	r1, [r0, #106]	; 0x6a
    49d4:	f880 106b 	strb.w	r1, [r0, #107]	; 0x6b
    49d8:	3062      	adds	r0, #98	; 0x62
    49da:	21ff      	movs	r1, #255	; 0xff
    49dc:	7281      	strb	r1, [r0, #10]
    49de:	6a20      	ldr	r0, [r4, #32]
    49e0:	f04f 0900 	mov.w	r9, #0
    49e4:	4649      	mov	r1, r9
    49e6:	302c      	adds	r0, #44	; 0x2c
    49e8:	f009 fc68 	bl	e2bc <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    49ec:	462a      	mov	r2, r5
    49ee:	4633      	mov	r3, r6
    49f0:	2101      	movs	r1, #1
    49f2:	4640      	mov	r0, r8
    49f4:	9700      	str	r7, [sp, #0]
    49f6:	f00a f8b8 	bl	eb6a <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x3a>
    49fa:	6a27      	ldr	r7, [r4, #32]
    49fc:	4606      	mov	r6, r0
    49fe:	460d      	mov	r5, r1
    4a00:	f8d7 8010 	ldr.w	r8, [r7, #16]
    4a04:	f002 fa5a 	bl	6ebc <sym_KN3K6STNQWQWR2LORBLVX4RFT5RXJO5L5JNKV4I>
    4a08:	f104 0140 	add.w	r1, r4, #64	; 0x40
    4a0c:	4288      	cmp	r0, r1
    4a0e:	d00b      	beq.n	4a28 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa8>
    4a10:	e9cd 6500 	strd	r6, r5, [sp]
    4a14:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
    4a18:	4642      	mov	r2, r8
    4a1a:	f00a fc22 	bl	f262 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>
    4a1e:	4540      	cmp	r0, r8
    4a20:	d903      	bls.n	4a2a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xaa>
    4a22:	f240 410c 	movw	r1, #1036	; 0x40c
    4a26:	e01d      	b.n	4a64 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xe4>
    4a28:	2000      	movs	r0, #0
    4a2a:	4914      	ldr	r1, [pc, #80]	; (4a7c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xfc>)
    4a2c:	4607      	mov	r7, r0
    4a2e:	6809      	ldr	r1, [r1, #0]
    4a30:	4288      	cmp	r0, r1
    4a32:	6a20      	ldr	r0, [r4, #32]
    4a34:	6901      	ldr	r1, [r0, #16]
    4a36:	d202      	bcs.n	4a3e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xbe>
    4a38:	440f      	add	r7, r1
    4a3a:	6201      	str	r1, [r0, #32]
    4a3c:	e004      	b.n	4a48 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xc8>
    4a3e:	4638      	mov	r0, r7
    4a40:	f009 f9d9 	bl	ddf6 <sym_MCZ5ZKWAPWEBLVDHDY2XS3XBNNW7L43ADSWQSTI>
    4a44:	6a21      	ldr	r1, [r4, #32]
    4a46:	6208      	str	r0, [r1, #32]
    4a48:	6a20      	ldr	r0, [r4, #32]
    4a4a:	6901      	ldr	r1, [r0, #16]
    4a4c:	2005      	movs	r0, #5
    4a4e:	f009 f9da 	bl	de06 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    4a52:	6a21      	ldr	r1, [r4, #32]
    4a54:	8488      	strh	r0, [r1, #36]	; 0x24
    4a56:	6a21      	ldr	r1, [r4, #32]
    4a58:	6a0a      	ldr	r2, [r1, #32]
    4a5a:	1aba      	subs	r2, r7, r2
    4a5c:	4290      	cmp	r0, r2
    4a5e:	d804      	bhi.n	4a6a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xea>
    4a60:	f640 0137 	movw	r1, #2103	; 0x837
    4a64:	2021      	movs	r0, #33	; 0x21
    4a66:	f7fc f80b 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4a6a:	19f2      	adds	r2, r6, r7
    4a6c:	eb45 0509 	adc.w	r5, r5, r9
    4a70:	e9c1 258a 	strd	r2, r5, [r1, #552]	; 0x228
    4a74:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    4a78:	20000e68 	.word	0x20000e68
    4a7c:	200000e0 	.word	0x200000e0
    4a80:	b510      	push	{r4, lr}
    4a82:	4c06      	ldr	r4, [pc, #24]	; (4a9c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x11c>)
    4a84:	7b20      	ldrb	r0, [r4, #12]
    4a86:	2800      	cmp	r0, #0
    4a88:	d006      	beq.n	4a98 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x118>
    4a8a:	f003 fa81 	bl	7f90 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    4a8e:	f006 f999 	bl	adc4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    4a92:	2000      	movs	r0, #0
    4a94:	7320      	strb	r0, [r4, #12]
    4a96:	7360      	strb	r0, [r4, #13]
    4a98:	bd10      	pop	{r4, pc}
    4a9a:	0000      	.short	0x0000
    4a9c:	20000e68 	.word	0x20000e68
    4aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
    4aa2:	b087      	sub	sp, #28
    4aa4:	460d      	mov	r5, r1
    4aa6:	f7fe fb9d 	bl	31e4 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    4aaa:	2701      	movs	r7, #1
    4aac:	4c3f      	ldr	r4, [pc, #252]	; (4bac <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x22c>)
    4aae:	2d09      	cmp	r5, #9
    4ab0:	d278      	bcs.n	4ba4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x224>
    4ab2:	e8df f005 	tbb	[pc, r5]
    4ab6:	3905      	.short	0x3905
    4ab8:	774a4f4f 	.word	0x774a4f4f
    4abc:	00726d64 	.word	0x00726d64
    4ac0:	7327      	strb	r7, [r4, #12]
    4ac2:	7861      	ldrb	r1, [r4, #1]
    4ac4:	2900      	cmp	r1, #0
    4ac6:	d12d      	bne.n	4b24 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1a4>
    4ac8:	7800      	ldrb	r0, [r0, #0]
    4aca:	f005 fac5 	bl	a058 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>
    4ace:	4605      	mov	r5, r0
    4ad0:	460e      	mov	r6, r1
    4ad2:	e9c4 0104 	strd	r0, r1, [r4, #16]
    4ad6:	f000 fb3f 	bl	5158 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7d8>
    4ada:	b118      	cbz	r0, 4ae4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x164>
    4adc:	2000      	movs	r0, #0
    4ade:	f88d 0004 	strb.w	r0, [sp, #4]
    4ae2:	e001      	b.n	4ae8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x168>
    4ae4:	f88d 7004 	strb.w	r7, [sp, #4]
    4ae8:	f000 f950 	bl	4d8c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x40c>
    4aec:	4633      	mov	r3, r6
    4aee:	462a      	mov	r2, r5
    4af0:	f00a f856 	bl	eba0 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x70>
    4af4:	6861      	ldr	r1, [r4, #4]
    4af6:	fbb0 f2f1 	udiv	r2, r0, r1
    4afa:	fb01 0012 	mls	r0, r1, r2, r0
    4afe:	b150      	cbz	r0, 4b16 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x196>
    4b00:	f05f 0000 	movs.w	r0, #0
    4b04:	f88d 0005 	strb.w	r0, [sp, #5]
    4b08:	4668      	mov	r0, sp
    4b0a:	f7fe fcab 	bl	3464 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY>
    4b0e:	b120      	cbz	r0, 4b1a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x19a>
    4b10:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
    4b14:	e043      	b.n	4b9e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x21e>
    4b16:	2001      	movs	r0, #1
    4b18:	e7f4      	b.n	4b04 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x184>
    4b1a:	6b20      	ldr	r0, [r4, #48]	; 0x30
    4b1c:	38e3      	subs	r0, #227	; 0xe3
    4b1e:	63a0      	str	r0, [r4, #56]	; 0x38
    4b20:	f006 fa6a 	bl	aff8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    4b24:	b007      	add	sp, #28
    4b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4b28:	7860      	ldrb	r0, [r4, #1]
    4b2a:	b130      	cbz	r0, 4b3a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1ba>
    4b2c:	f009 fe3d 	bl	e7aa <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>
    4b30:	b007      	add	sp, #28
    4b32:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    4b36:	f7ff bfa3 	b.w	4a80 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x100>
    4b3a:	7367      	strb	r7, [r4, #13]
    4b3c:	f7fe fd22 	bl	3584 <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY>
    4b40:	2800      	cmp	r0, #0
    4b42:	d0ef      	beq.n	4b24 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1a4>
    4b44:	f240 11e1 	movw	r1, #481	; 0x1e1
    4b48:	e029      	b.n	4b9e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x21e>
    4b4a:	b007      	add	sp, #28
    4b4c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    4b50:	f003 bbf2 	b.w	8338 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    4b54:	7805      	ldrb	r5, [r0, #0]
    4b56:	2300      	movs	r3, #0
    4b58:	2201      	movs	r2, #1
    4b5a:	4619      	mov	r1, r3
    4b5c:	4668      	mov	r0, sp
    4b5e:	f000 f95b 	bl	4e18 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x498>
    4b62:	b140      	cbz	r0, 4b76 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1f6>
    4b64:	4669      	mov	r1, sp
    4b66:	4628      	mov	r0, r5
    4b68:	f00a f818 	bl	eb9c <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x6c>
    4b6c:	2800      	cmp	r0, #0
    4b6e:	d1d9      	bne.n	4b24 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1a4>
    4b70:	f240 71c9 	movw	r1, #1993	; 0x7c9
    4b74:	e013      	b.n	4b9e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x21e>
    4b76:	70a7      	strb	r7, [r4, #2]
    4b78:	f000 f81a 	bl	4bb0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x230>
    4b7c:	e7d2      	b.n	4b24 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1a4>
    4b7e:	f000 f8ab 	bl	4cd8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x358>
    4b82:	2800      	cmp	r0, #0
    4b84:	d1ce      	bne.n	4b24 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1a4>
    4b86:	b007      	add	sp, #28
    4b88:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    4b8c:	f009 be0b 	b.w	e7a6 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A>
    4b90:	b007      	add	sp, #28
    4b92:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    4b96:	f000 b80b 	b.w	4bb0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x230>
    4b9a:	f240 2113 	movw	r1, #531	; 0x213
    4b9e:	2021      	movs	r0, #33	; 0x21
    4ba0:	f7fb ff6e 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4ba4:	f240 2117 	movw	r1, #535	; 0x217
    4ba8:	e7f9      	b.n	4b9e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x21e>
    4baa:	0000      	.short	0x0000
    4bac:	20000e68 	.word	0x20000e68
    4bb0:	b510      	push	{r4, lr}
    4bb2:	4c0b      	ldr	r4, [pc, #44]	; (4be0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x260>)
    4bb4:	7820      	ldrb	r0, [r4, #0]
    4bb6:	b138      	cbz	r0, 4bc8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x248>
    4bb8:	f000 fa86 	bl	50c8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x748>
    4bbc:	78a0      	ldrb	r0, [r4, #2]
    4bbe:	b150      	cbz	r0, 4bd6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x256>
    4bc0:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    4bc4:	b128      	cbz	r0, 4bd2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x252>
    4bc6:	e006      	b.n	4bd6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x256>
    4bc8:	f240 117b 	movw	r1, #379	; 0x17b
    4bcc:	2021      	movs	r0, #33	; 0x21
    4bce:	f7fb ff57 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4bd2:	f7fe fcef 	bl	35b4 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y>
    4bd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4bda:	f000 baa1 	b.w	5120 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7a0>
    4bde:	0000      	.short	0x0000
    4be0:	20000e68 	.word	0x20000e68
    4be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4be8:	4d11      	ldr	r5, [pc, #68]	; (4c30 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2b0>)
    4bea:	4616      	mov	r6, r2
    4bec:	460f      	mov	r7, r1
    4bee:	2400      	movs	r4, #0
    4bf0:	6068      	str	r0, [r5, #4]
    4bf2:	f009 ff9d 	bl	eb30 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY>
    4bf6:	f8df c03c 	ldr.w	ip, [pc, #60]	; 4c34 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2b4>
    4bfa:	2100      	movs	r1, #0
    4bfc:	f81c 2001 	ldrb.w	r2, [ip, r1]
    4c00:	4232      	tst	r2, r6
    4c02:	d007      	beq.n	4c14 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x294>
    4c04:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    4c08:	eb05 0284 	add.w	r2, r5, r4, lsl #2
    4c0c:	1a1b      	subs	r3, r3, r0
    4c0e:	1c64      	adds	r4, r4, #1
    4c10:	b2e4      	uxtb	r4, r4
    4c12:	6093      	str	r3, [r2, #8]
    4c14:	1c49      	adds	r1, r1, #1
    4c16:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    4c1a:	d0ef      	beq.n	4bfc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x27c>
    4c1c:	f016 0f0e 	tst.w	r6, #14
    4c20:	d004      	beq.n	4c2c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2ac>
    4c22:	f240 7103 	movw	r1, #1795	; 0x703
    4c26:	2021      	movs	r0, #33	; 0x21
    4c28:	f7fb ff2a 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4c30:	20000e68 	.word	0x20000e68
    4c34:	0001091e 	.word	0x0001091e
    4c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4c3c:	b086      	sub	sp, #24
    4c3e:	4692      	mov	sl, r2
    4c40:	4607      	mov	r7, r0
    4c42:	4689      	mov	r9, r1
    4c44:	f000 fa94 	bl	5170 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7f0>
    4c48:	4d22      	ldr	r5, [pc, #136]	; (4cd4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x354>)
    4c4a:	f04f 0800 	mov.w	r8, #0
    4c4e:	686a      	ldr	r2, [r5, #4]
    4c50:	1886      	adds	r6, r0, r2
    4c52:	eb41 0108 	adc.w	r1, r1, r8
    4c56:	460c      	mov	r4, r1
    4c58:	460b      	mov	r3, r1
    4c5a:	4632      	mov	r2, r6
    4c5c:	4638      	mov	r0, r7
    4c5e:	4649      	mov	r1, r9
    4c60:	f009 ff9e 	bl	eba0 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x70>
    4c64:	4607      	mov	r7, r0
    4c66:	f009 ff92 	bl	eb8e <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x5e>
    4c6a:	4287      	cmp	r7, r0
    4c6c:	da13      	bge.n	4c96 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x316>
    4c6e:	e9d5 0106 	ldrd	r0, r1, [r5, #24]
    4c72:	f000 fa7d 	bl	5170 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7f0>
    4c76:	4632      	mov	r2, r6
    4c78:	4623      	mov	r3, r4
    4c7a:	f009 ff91 	bl	eba0 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x70>
    4c7e:	6869      	ldr	r1, [r5, #4]
    4c80:	fbb0 f1f1 	udiv	r1, r0, r1
    4c84:	f8ca 1000 	str.w	r1, [sl]
    4c88:	6868      	ldr	r0, [r5, #4]
    4c8a:	1980      	adds	r0, r0, r6
    4c8c:	eb48 0104 	adc.w	r1, r8, r4
    4c90:	b006      	add	sp, #24
    4c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4c96:	f88d 8000 	strb.w	r8, [sp]
    4c9a:	6b68      	ldr	r0, [r5, #52]	; 0x34
    4c9c:	9001      	str	r0, [sp, #4]
    4c9e:	f009 ff30 	bl	eb02 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>
    4ca2:	f8ad 0008 	strh.w	r0, [sp, #8]
    4ca6:	2001      	movs	r0, #1
    4ca8:	f88d 000b 	strb.w	r0, [sp, #11]
    4cac:	e9d5 0106 	ldrd	r0, r1, [r5, #24]
    4cb0:	f000 fa5e 	bl	5170 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7f0>
    4cb4:	e9cd 0104 	strd	r0, r1, [sp, #16]
    4cb8:	f000 f9ec 	bl	5094 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x714>
    4cbc:	f88d 000a 	strb.w	r0, [sp, #10]
    4cc0:	4668      	mov	r0, sp
    4cc2:	6869      	ldr	r1, [r5, #4]
    4cc4:	f009 f846 	bl	dd54 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    4cc8:	f8ca 0000 	str.w	r0, [sl]
    4ccc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    4cd0:	e7de      	b.n	4c90 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x310>
    4cd2:	0000      	.short	0x0000
    4cd4:	20000e68 	.word	0x20000e68
    4cd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4cdc:	f006 fa78 	bl	b1d0 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    4ce0:	4c1f      	ldr	r4, [pc, #124]	; (4d60 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3e0>)
    4ce2:	4606      	mov	r6, r0
    4ce4:	460d      	mov	r5, r1
    4ce6:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    4cea:	f000 f9d3 	bl	5094 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x714>
    4cee:	4607      	mov	r7, r0
    4cf0:	f005 f956 	bl	9fa0 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>
    4cf4:	4602      	mov	r2, r0
    4cf6:	2865      	cmp	r0, #101	; 0x65
    4cf8:	d323      	bcc.n	4d42 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3c2>
    4cfa:	1c50      	adds	r0, r2, #1
    4cfc:	d024      	beq.n	4d48 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3c8>
    4cfe:	6b21      	ldr	r1, [r4, #48]	; 0x30
    4d00:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4d02:	1888      	adds	r0, r1, r2
    4d04:	4283      	cmp	r3, r0
    4d06:	d800      	bhi.n	4d0a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x38a>
    4d08:	1a5a      	subs	r2, r3, r1
    4d0a:	f06f 0039 	mvn.w	r0, #57	; 0x39
    4d0e:	1830      	adds	r0, r6, r0
    4d10:	f145 31ff 	adc.w	r1, r5, #4294967295
    4d14:	f000 fa42 	bl	519c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x81c>
    4d18:	6b21      	ldr	r1, [r4, #48]	; 0x30
    4d1a:	4408      	add	r0, r1
    4d1c:	6b21      	ldr	r1, [r4, #48]	; 0x30
    4d1e:	1a45      	subs	r5, r0, r1
    4d20:	f241 3088 	movw	r0, #5000	; 0x1388
    4d24:	4285      	cmp	r5, r0
    4d26:	d900      	bls.n	4d2a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3aa>
    4d28:	4605      	mov	r5, r0
    4d2a:	f006 fa51 	bl	b1d0 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    4d2e:	1b80      	subs	r0, r0, r6
    4d30:	f100 009d 	add.w	r0, r0, #157	; 0x9d
    4d34:	4285      	cmp	r5, r0
    4d36:	d304      	bcc.n	4d42 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3c2>
    4d38:	4639      	mov	r1, r7
    4d3a:	4628      	mov	r0, r5
    4d3c:	f005 f852 	bl	9de4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    4d40:	b120      	cbz	r0, 4d4c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3cc>
    4d42:	2000      	movs	r0, #0
    4d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4d48:	6b60      	ldr	r0, [r4, #52]	; 0x34
    4d4a:	e7e7      	b.n	4d1c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x39c>
    4d4c:	6b20      	ldr	r0, [r4, #48]	; 0x30
    4d4e:	4428      	add	r0, r5
    4d50:	6320      	str	r0, [r4, #48]	; 0x30
    4d52:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    4d54:	4428      	add	r0, r5
    4d56:	63a0      	str	r0, [r4, #56]	; 0x38
    4d58:	f006 f94e 	bl	aff8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    4d5c:	2001      	movs	r0, #1
    4d5e:	e7f1      	b.n	4d44 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3c4>
    4d60:	20000e68 	.word	0x20000e68
    4d64:	b510      	push	{r4, lr}
    4d66:	2400      	movs	r4, #0
    4d68:	f009 fee2 	bl	eb30 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY>
    4d6c:	4a06      	ldr	r2, [pc, #24]	; (4d88 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x408>)
    4d6e:	2100      	movs	r1, #0
    4d70:	eb02 0381 	add.w	r3, r2, r1, lsl #2
    4d74:	4404      	add	r4, r0
    4d76:	689b      	ldr	r3, [r3, #8]
    4d78:	1c49      	adds	r1, r1, #1
    4d7a:	441c      	add	r4, r3
    4d7c:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    4d80:	d0f6      	beq.n	4d70 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3f0>
    4d82:	4620      	mov	r0, r4
    4d84:	bd10      	pop	{r4, pc}
    4d86:	0000      	.short	0x0000
    4d88:	20000e68 	.word	0x20000e68
    4d8c:	4901      	ldr	r1, [pc, #4]	; (4d94 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x414>)
    4d8e:	e9d1 0110 	ldrd	r0, r1, [r1, #64]	; 0x40
    4d92:	4770      	bx	lr
    4d94:	20000e68 	.word	0x20000e68
    4d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4d9c:	4606      	mov	r6, r0
    4d9e:	481d      	ldr	r0, [pc, #116]	; (4e14 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x494>)
    4da0:	4688      	mov	r8, r1
    4da2:	4615      	mov	r5, r2
    4da4:	e9d0 100a 	ldrd	r1, r0, [r0, #40]	; 0x28
    4da8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    4dac:	2701      	movs	r7, #1
    4dae:	4050      	eors	r0, r2
    4db0:	b086      	sub	sp, #24
    4db2:	ea70 0101 	orns	r1, r0, r1
    4db6:	d021      	beq.n	4dfc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x47c>
    4db8:	2400      	movs	r4, #0
    4dba:	f88d 4000 	strb.w	r4, [sp]
    4dbe:	9501      	str	r5, [sp, #4]
    4dc0:	f009 fe9f 	bl	eb02 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>
    4dc4:	f8ad 0008 	strh.w	r0, [sp, #8]
    4dc8:	f88d 700b 	strb.w	r7, [sp, #11]
    4dcc:	f009 fedf 	bl	eb8e <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x5e>
    4dd0:	1982      	adds	r2, r0, r6
    4dd2:	eb44 0008 	adc.w	r0, r4, r8
    4dd6:	e9cd 2004 	strd	r2, r0, [sp, #16]
    4dda:	2002      	movs	r0, #2
    4ddc:	f88d 000a 	strb.w	r0, [sp, #10]
    4de0:	4668      	mov	r0, sp
    4de2:	f005 fc2b 	bl	a63c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    4de6:	b168      	cbz	r0, 4e04 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x484>
    4de8:	e9dd 1004 	ldrd	r1, r0, [sp, #16]
    4dec:	194a      	adds	r2, r1, r5
    4dee:	4909      	ldr	r1, [pc, #36]	; (4e14 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x494>)
    4df0:	4160      	adcs	r0, r4
    4df2:	e9d1 310a 	ldrd	r3, r1, [r1, #40]	; 0x28
    4df6:	1a9a      	subs	r2, r3, r2
    4df8:	4181      	sbcs	r1, r0
    4dfa:	d408      	bmi.n	4e0e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x48e>
    4dfc:	2001      	movs	r0, #1
    4dfe:	b006      	add	sp, #24
    4e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4e04:	f240 5135 	movw	r1, #1333	; 0x535
    4e08:	2021      	movs	r0, #33	; 0x21
    4e0a:	f7fb fe39 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4e0e:	2000      	movs	r0, #0
    4e10:	e7f5      	b.n	4dfe <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x47e>
    4e12:	0000      	.short	0x0000
    4e14:	20000e68 	.word	0x20000e68
    4e18:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4e1c:	b087      	sub	sp, #28
    4e1e:	4614      	mov	r4, r2
    4e20:	4606      	mov	r6, r0
    4e22:	f006 f9d5 	bl	b1d0 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    4e26:	4d99      	ldr	r5, [pc, #612]	; (508c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    4e28:	4680      	mov	r8, r0
    4e2a:	4689      	mov	r9, r1
    4e2c:	68a8      	ldr	r0, [r5, #8]
    4e2e:	f04f 0a00 	mov.w	sl, #0
    4e32:	9002      	str	r0, [sp, #8]
    4e34:	f7ff ff96 	bl	4d64 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3e4>
    4e38:	6869      	ldr	r1, [r5, #4]
    4e3a:	4288      	cmp	r0, r1
    4e3c:	d101      	bne.n	4e42 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x4c2>
    4e3e:	2001      	movs	r0, #1
    4e40:	e000      	b.n	4e44 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x4c4>
    4e42:	2000      	movs	r0, #0
    4e44:	9004      	str	r0, [sp, #16]
    4e46:	4020      	ands	r0, r4
    4e48:	9003      	str	r0, [sp, #12]
    4e4a:	9808      	ldr	r0, [sp, #32]
    4e4c:	2800      	cmp	r0, #0
    4e4e:	d07f      	beq.n	4f50 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5d0>
    4e50:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
    4e54:	eb18 0b02 	adds.w	fp, r8, r2
    4e58:	f149 0400 	adc.w	r4, r9, #0
    4e5c:	f002 f834 	bl	6ec8 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ>
    4e60:	9000      	str	r0, [sp, #0]
    4e62:	488a      	ldr	r0, [pc, #552]	; (508c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    4e64:	7800      	ldrb	r0, [r0, #0]
    4e66:	4f89      	ldr	r7, [pc, #548]	; (508c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    4e68:	3740      	adds	r7, #64	; 0x40
    4e6a:	2805      	cmp	r0, #5
    4e6c:	d135      	bne.n	4eda <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x55a>
    4e6e:	4887      	ldr	r0, [pc, #540]	; (508c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    4e70:	6a00      	ldr	r0, [r0, #32]
    4e72:	f8d0 0230 	ldr.w	r0, [r0, #560]	; 0x230
    4e76:	f002 f807 	bl	6e88 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI>
    4e7a:	9900      	ldr	r1, [sp, #0]
    4e7c:	4605      	mov	r5, r0
    4e7e:	4288      	cmp	r0, r1
    4e80:	d009      	beq.n	4e96 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x516>
    4e82:	4882      	ldr	r0, [pc, #520]	; (508c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    4e84:	4629      	mov	r1, r5
    4e86:	6a00      	ldr	r0, [r0, #32]
    4e88:	f500 700a 	add.w	r0, r0, #552	; 0x228
    4e8c:	f001 ffc0 	bl	6e10 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>
    4e90:	2000      	movs	r0, #0
    4e92:	61b8      	str	r0, [r7, #24]
    4e94:	e00c      	b.n	4eb0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x530>
    4e96:	497d      	ldr	r1, [pc, #500]	; (508c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    4e98:	6a08      	ldr	r0, [r1, #32]
    4e9a:	f500 700a 	add.w	r0, r0, #552	; 0x228
    4e9e:	61b8      	str	r0, [r7, #24]
    4ea0:	6a08      	ldr	r0, [r1, #32]
    4ea2:	6c8a      	ldr	r2, [r1, #72]	; 0x48
    4ea4:	f8d0 0230 	ldr.w	r0, [r0, #560]	; 0x230
    4ea8:	4282      	cmp	r2, r0
    4eaa:	d300      	bcc.n	4eae <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x52e>
    4eac:	4610      	mov	r0, r2
    4eae:	6488      	str	r0, [r1, #72]	; 0x48
    4eb0:	4876      	ldr	r0, [pc, #472]	; (508c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    4eb2:	6a00      	ldr	r0, [r0, #32]
    4eb4:	b158      	cbz	r0, 4ece <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x54e>
    4eb6:	b16d      	cbz	r5, 4ed4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x554>
    4eb8:	e9d5 1301 	ldrd	r1, r3, [r5, #4]
    4ebc:	f8d5 c000 	ldr.w	ip, [r5]
    4ec0:	eb1c 0303 	adds.w	r3, ip, r3
    4ec4:	eb41 010a 	adc.w	r1, r1, sl
    4ec8:	e9c0 318a 	strd	r3, r1, [r0, #552]	; 0x228
    4ecc:	e005      	b.n	4eda <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x55a>
    4ece:	f240 7185 	movw	r1, #1925	; 0x785
    4ed2:	e01a      	b.n	4f0a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x58a>
    4ed4:	2100      	movs	r1, #0
    4ed6:	e9c0 118a 	strd	r1, r1, [r0, #552]	; 0x228
    4eda:	4638      	mov	r0, r7
    4edc:	9900      	ldr	r1, [sp, #0]
    4ede:	f001 ff97 	bl	6e10 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>
    4ee2:	486a      	ldr	r0, [pc, #424]	; (508c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    4ee4:	9a00      	ldr	r2, [sp, #0]
    4ee6:	6845      	ldr	r5, [r0, #4]
    4ee8:	b192      	cbz	r2, 4f10 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x590>
    4eea:	e9d2 1301 	ldrd	r1, r3, [r2, #4]
    4eee:	6817      	ldr	r7, [r2, #0]
    4ef0:	e9cd b400 	strd	fp, r4, [sp]
    4ef4:	18f8      	adds	r0, r7, r3
    4ef6:	eb41 010a 	adc.w	r1, r1, sl
    4efa:	462a      	mov	r2, r5
    4efc:	f00a f9b1 	bl	f262 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>
    4f00:	4601      	mov	r1, r0
    4f02:	42a8      	cmp	r0, r5
    4f04:	d905      	bls.n	4f12 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x592>
    4f06:	f240 31f9 	movw	r1, #1017	; 0x3f9
    4f0a:	2021      	movs	r0, #33	; 0x21
    4f0c:	f7fb fdb8 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4f10:	2100      	movs	r1, #0
    4f12:	eb1b 0501 	adds.w	r5, fp, r1
    4f16:	495d      	ldr	r1, [pc, #372]	; (508c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    4f18:	4650      	mov	r0, sl
    4f1a:	4144      	adcs	r4, r0
    4f1c:	684a      	ldr	r2, [r1, #4]
    4f1e:	1aab      	subs	r3, r5, r2
    4f20:	eb64 020a 	sbc.w	r2, r4, sl
    4f24:	e9c1 3210 	strd	r3, r2, [r1, #64]	; 0x40
    4f28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4f2a:	3128      	adds	r1, #40	; 0x28
    4f2c:	b152      	cbz	r2, 4f44 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5c4>
    4f2e:	f242 7310 	movw	r3, #10000	; 0x2710
    4f32:	435a      	muls	r2, r3
    4f34:	18aa      	adds	r2, r5, r2
    4f36:	eb44 000a 	adc.w	r0, r4, sl
    4f3a:	e9c1 2000 	strd	r2, r0, [r1]
    4f3e:	2001      	movs	r0, #1
    4f40:	e051      	b.n	4fe6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x666>
    4f42:	e005      	b.n	4f50 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5d0>
    4f44:	f04f 30ff 	mov.w	r0, #4294967295
    4f48:	0842      	lsrs	r2, r0, #1
    4f4a:	e9c1 0200 	strd	r0, r2, [r1]
    4f4e:	e7f6      	b.n	4f3e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5be>
    4f50:	9803      	ldr	r0, [sp, #12]
    4f52:	b1d8      	cbz	r0, 4f8c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x60c>
    4f54:	2001      	movs	r0, #1
    4f56:	f009 fdf6 	bl	eb46 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x16>
    4f5a:	4604      	mov	r4, r0
    4f5c:	2001      	movs	r0, #1
    4f5e:	f003 f901 	bl	8164 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    4f62:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    4f66:	4401      	add	r1, r0
    4f68:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    4f6c:	fbb1 f0f0 	udiv	r0, r1, r0
    4f70:	1822      	adds	r2, r4, r0
    4f72:	4640      	mov	r0, r8
    4f74:	4649      	mov	r1, r9
    4f76:	32f4      	adds	r2, #244	; 0xf4
    4f78:	f7ff ff0e 	bl	4d98 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x418>
    4f7c:	b908      	cbnz	r0, 4f82 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x602>
    4f7e:	2000      	movs	r0, #0
    4f80:	9002      	str	r0, [sp, #8]
    4f82:	4645      	mov	r5, r8
    4f84:	464c      	mov	r4, r9
    4f86:	f8cd a014 	str.w	sl, [sp, #20]
    4f8a:	e02d      	b.n	4fe8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x668>
    4f8c:	b13c      	cbz	r4, 4f9e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x61e>
    4f8e:	aa05      	add	r2, sp, #20
    4f90:	4640      	mov	r0, r8
    4f92:	4649      	mov	r1, r9
    4f94:	f7ff fe50 	bl	4c38 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2b8>
    4f98:	4605      	mov	r5, r0
    4f9a:	460c      	mov	r4, r1
    4f9c:	e024      	b.n	4fe8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x668>
    4f9e:	4640      	mov	r0, r8
    4fa0:	4649      	mov	r1, r9
    4fa2:	f000 f8e5 	bl	5170 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7f0>
    4fa6:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 508c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>
    4faa:	4602      	mov	r2, r0
    4fac:	4608      	mov	r0, r1
    4fae:	f8db 1008 	ldr.w	r1, [fp, #8]
    4fb2:	9102      	str	r1, [sp, #8]
    4fb4:	f8db 3004 	ldr.w	r3, [fp, #4]
    4fb8:	4657      	mov	r7, sl
    4fba:	189d      	adds	r5, r3, r2
    4fbc:	eb4a 0400 	adc.w	r4, sl, r0
    4fc0:	e9db 0104 	ldrd	r0, r1, [fp, #16]
    4fc4:	f000 f8c8 	bl	5158 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7d8>
    4fc8:	f8db 1004 	ldr.w	r1, [fp, #4]
    4fcc:	4348      	muls	r0, r1
    4fce:	9000      	str	r0, [sp, #0]
    4fd0:	f7ff fedc 	bl	4d8c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x40c>
    4fd4:	9a00      	ldr	r2, [sp, #0]
    4fd6:	1880      	adds	r0, r0, r2
    4fd8:	4179      	adcs	r1, r7
    4fda:	e9cb 0110 	strd	r0, r1, [fp, #64]	; 0x40
    4fde:	4621      	mov	r1, r4
    4fe0:	4628      	mov	r0, r5
    4fe2:	f000 f8b9 	bl	5158 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7d8>
    4fe6:	9005      	str	r0, [sp, #20]
    4fe8:	2001      	movs	r0, #1
    4fea:	f009 fdac 	bl	eb46 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x16>
    4fee:	4607      	mov	r7, r0
    4ff0:	2001      	movs	r0, #1
    4ff2:	f003 f8b7 	bl	8164 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    4ff6:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    4ffa:	4401      	add	r1, r0
    4ffc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    5000:	fbb1 f0f0 	udiv	r0, r1, r0
    5004:	4407      	add	r7, r0
    5006:	4628      	mov	r0, r5
    5008:	4621      	mov	r1, r4
    500a:	37f4      	adds	r7, #244	; 0xf4
    500c:	9a02      	ldr	r2, [sp, #8]
    500e:	f000 f8c5 	bl	519c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x81c>
    5012:	491e      	ldr	r1, [pc, #120]	; (508c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    5014:	eb01 028a 	add.w	r2, r1, sl, lsl #2
    5018:	6892      	ldr	r2, [r2, #8]
    501a:	4282      	cmp	r2, r0
    501c:	d800      	bhi.n	5020 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6a0>
    501e:	4610      	mov	r0, r2
    5020:	6348      	str	r0, [r1, #52]	; 0x34
    5022:	9a08      	ldr	r2, [sp, #32]
    5024:	b10a      	cbz	r2, 502a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6aa>
    5026:	e9c1 5404 	strd	r5, r4, [r1, #16]
    502a:	e9c1 5406 	strd	r5, r4, [r1, #24]
    502e:	468b      	mov	fp, r1
    5030:	9904      	ldr	r1, [sp, #16]
    5032:	b111      	cbz	r1, 503a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6ba>
    5034:	f8cb 7030 	str.w	r7, [fp, #48]	; 0x30
    5038:	e001      	b.n	503e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6be>
    503a:	f8cb 0030 	str.w	r0, [fp, #48]	; 0x30
    503e:	2001      	movs	r0, #1
    5040:	72f0      	strb	r0, [r6, #11]
    5042:	f009 fd5e 	bl	eb02 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>
    5046:	8130      	strh	r0, [r6, #8]
    5048:	4628      	mov	r0, r5
    504a:	4621      	mov	r1, r4
    504c:	f000 f822 	bl	5094 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x714>
    5050:	72b0      	strb	r0, [r6, #10]
    5052:	f8db 0030 	ldr.w	r0, [fp, #48]	; 0x30
    5056:	6070      	str	r0, [r6, #4]
    5058:	9803      	ldr	r0, [sp, #12]
    505a:	b148      	cbz	r0, 5070 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6f0>
    505c:	2001      	movs	r0, #1
    505e:	7030      	strb	r0, [r6, #0]
    5060:	4a0b      	ldr	r2, [pc, #44]	; (5090 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x710>)
    5062:	4640      	mov	r0, r8
    5064:	4649      	mov	r1, r9
    5066:	f000 f899 	bl	519c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x81c>
    506a:	1bc0      	subs	r0, r0, r7
    506c:	6130      	str	r0, [r6, #16]
    506e:	e003      	b.n	5078 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6f8>
    5070:	f886 a000 	strb.w	sl, [r6]
    5074:	e9c6 5404 	strd	r5, r4, [r6, #16]
    5078:	f8db 0034 	ldr.w	r0, [fp, #52]	; 0x34
    507c:	42b8      	cmp	r0, r7
    507e:	d303      	bcc.n	5088 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x708>
    5080:	2001      	movs	r0, #1
    5082:	b00b      	add	sp, #44	; 0x2c
    5084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5088:	2000      	movs	r0, #0
    508a:	e7fa      	b.n	5082 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x702>
    508c:	20000e68 	.word	0x20000e68
    5090:	0f424000 	.word	0x0f424000
    5094:	b570      	push	{r4, r5, r6, lr}
    5096:	4604      	mov	r4, r0
    5098:	480a      	ldr	r0, [pc, #40]	; (50c4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x744>)
    509a:	460d      	mov	r5, r1
    509c:	7801      	ldrb	r1, [r0, #0]
    509e:	2904      	cmp	r1, #4
    50a0:	d10d      	bne.n	50be <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x73e>
    50a2:	6840      	ldr	r0, [r0, #4]
    50a4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    50a8:	0046      	lsls	r6, r0, #1
    50aa:	f7ff fe6f 	bl	4d8c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x40c>
    50ae:	4622      	mov	r2, r4
    50b0:	462b      	mov	r3, r5
    50b2:	f009 fd75 	bl	eba0 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x70>
    50b6:	42b0      	cmp	r0, r6
    50b8:	d201      	bcs.n	50be <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x73e>
    50ba:	2002      	movs	r0, #2
    50bc:	bd70      	pop	{r4, r5, r6, pc}
    50be:	2001      	movs	r0, #1
    50c0:	bd70      	pop	{r4, r5, r6, pc}
    50c2:	0000      	.short	0x0000
    50c4:	20000e68 	.word	0x20000e68
    50c8:	b570      	push	{r4, r5, r6, lr}
    50ca:	4d14      	ldr	r5, [pc, #80]	; (511c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x79c>)
    50cc:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    50d0:	f105 0440 	add.w	r4, r5, #64	; 0x40
    50d4:	2800      	cmp	r0, #0
    50d6:	7828      	ldrb	r0, [r5, #0]
    50d8:	d00f      	beq.n	50fa <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x77a>
    50da:	2805      	cmp	r0, #5
    50dc:	d004      	beq.n	50e8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x768>
    50de:	f240 2157 	movw	r1, #599	; 0x257
    50e2:	2021      	movs	r0, #33	; 0x21
    50e4:	f7fb fccc 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    50e8:	4620      	mov	r0, r4
    50ea:	f009 fd27 	bl	eb3c <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0xc>
    50ee:	b178      	cbz	r0, 5110 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x790>
    50f0:	4620      	mov	r0, r4
    50f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    50f6:	f001 be69 	b.w	6dcc <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ>
    50fa:	2805      	cmp	r0, #5
    50fc:	d108      	bne.n	5110 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x790>
    50fe:	4620      	mov	r0, r4
    5100:	f009 fd1c 	bl	eb3c <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0xc>
    5104:	b920      	cbnz	r0, 5110 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x790>
    5106:	6a28      	ldr	r0, [r5, #32]
    5108:	f500 700a 	add.w	r0, r0, #552	; 0x228
    510c:	f001 fea0 	bl	6e50 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    5110:	4620      	mov	r0, r4
    5112:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5116:	f001 be9b 	b.w	6e50 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    511a:	0000      	.short	0x0000
    511c:	20000e68 	.word	0x20000e68
    5120:	b510      	push	{r4, lr}
    5122:	f7fe f8d1 	bl	32c8 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI>
    5126:	490b      	ldr	r1, [pc, #44]	; (5154 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7d4>)
    5128:	2000      	movs	r0, #0
    512a:	7088      	strb	r0, [r1, #2]
    512c:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
    5130:	6208      	str	r0, [r1, #32]
    5132:	7008      	strb	r0, [r1, #0]
    5134:	f7fe f856 	bl	31e4 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    5138:	4604      	mov	r4, r0
    513a:	7800      	ldrb	r0, [r0, #0]
    513c:	f005 fce0 	bl	ab00 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    5140:	b110      	cbz	r0, 5148 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7c8>
    5142:	2020      	movs	r0, #32
    5144:	7020      	strb	r0, [r4, #0]
    5146:	bd10      	pop	{r4, pc}
    5148:	f240 3192 	movw	r1, #914	; 0x392
    514c:	2021      	movs	r0, #33	; 0x21
    514e:	f7fb fc97 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5152:	0000      	.short	0x0000
    5154:	20000e68 	.word	0x20000e68
    5158:	b510      	push	{r4, lr}
    515a:	4604      	mov	r4, r0
    515c:	f7ff fe16 	bl	4d8c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x40c>
    5160:	4902      	ldr	r1, [pc, #8]	; (516c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7ec>)
    5162:	1a20      	subs	r0, r4, r0
    5164:	6849      	ldr	r1, [r1, #4]
    5166:	fbb0 f0f1 	udiv	r0, r0, r1
    516a:	bd10      	pop	{r4, pc}
    516c:	20000e68 	.word	0x20000e68
    5170:	b570      	push	{r4, r5, r6, lr}
    5172:	4604      	mov	r4, r0
    5174:	460d      	mov	r5, r1
    5176:	f7ff fe09 	bl	4d8c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x40c>
    517a:	4622      	mov	r2, r4
    517c:	462b      	mov	r3, r5
    517e:	f009 fd0f 	bl	eba0 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x70>
    5182:	4905      	ldr	r1, [pc, #20]	; (5198 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x818>)
    5184:	684c      	ldr	r4, [r1, #4]
    5186:	fbb0 f0f4 	udiv	r0, r0, r4
    518a:	4344      	muls	r4, r0
    518c:	f7ff fdfe 	bl	4d8c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x40c>
    5190:	1900      	adds	r0, r0, r4
    5192:	f141 0100 	adc.w	r1, r1, #0
    5196:	bd70      	pop	{r4, r5, r6, pc}
    5198:	20000e68 	.word	0x20000e68
    519c:	4b0a      	ldr	r3, [pc, #40]	; (51c8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x848>)
    519e:	b510      	push	{r4, lr}
    51a0:	e9d3 430a 	ldrd	r4, r3, [r3, #40]	; 0x28
    51a4:	1a20      	subs	r0, r4, r0
    51a6:	eb63 0301 	sbc.w	r3, r3, r1
    51aa:	2400      	movs	r4, #0
    51ac:	4621      	mov	r1, r4
    51ae:	1a24      	subs	r4, r4, r0
    51b0:	4199      	sbcs	r1, r3
    51b2:	da06      	bge.n	51c2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x842>
    51b4:	2100      	movs	r1, #0
    51b6:	1a14      	subs	r4, r2, r0
    51b8:	eb71 0403 	sbcs.w	r4, r1, r3
    51bc:	da00      	bge.n	51c0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x840>
    51be:	4610      	mov	r0, r2
    51c0:	bd10      	pop	{r4, pc}
    51c2:	2000      	movs	r0, #0
    51c4:	bd10      	pop	{r4, pc}
    51c6:	0000      	.short	0x0000
    51c8:	20000e68 	.word	0x20000e68

000051cc <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI>:
    51cc:	b570      	push	{r4, r5, r6, lr}
    51ce:	f002 fed9 	bl	7f84 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    51d2:	4c0d      	ldr	r4, [pc, #52]	; (5208 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x3c>)
    51d4:	4606      	mov	r6, r0
    51d6:	4602      	mov	r2, r0
    51d8:	e9d4 5101 	ldrd	r5, r1, [r4, #4]
    51dc:	4628      	mov	r0, r5
    51de:	f008 fc9a 	bl	db16 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>
    51e2:	6060      	str	r0, [r4, #4]
    51e4:	42a8      	cmp	r0, r5
    51e6:	d005      	beq.n	51f4 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x28>
    51e8:	68e1      	ldr	r1, [r4, #12]
    51ea:	1b40      	subs	r0, r0, r5
    51ec:	4408      	add	r0, r1
    51ee:	60e0      	str	r0, [r4, #12]
    51f0:	f005 ff02 	bl	aff8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    51f4:	6860      	ldr	r0, [r4, #4]
    51f6:	42b0      	cmp	r0, r6
    51f8:	d301      	bcc.n	51fe <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x32>
    51fa:	7820      	ldrb	r0, [r4, #0]
    51fc:	b108      	cbz	r0, 5202 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x36>
    51fe:	2000      	movs	r0, #0
    5200:	bd70      	pop	{r4, r5, r6, pc}
    5202:	2001      	movs	r0, #1
    5204:	bd70      	pop	{r4, r5, r6, pc}
    5206:	0000      	.short	0x0000
    5208:	20001148 	.word	0x20001148

0000520c <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI>:
    520c:	4903      	ldr	r1, [pc, #12]	; (521c <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI+0x10>)
    520e:	2000      	movs	r0, #0
    5210:	6008      	str	r0, [r1, #0]
    5212:	6048      	str	r0, [r1, #4]
    5214:	6088      	str	r0, [r1, #8]
    5216:	60c8      	str	r0, [r1, #12]
    5218:	f000 b856 	b.w	52c8 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x30>
    521c:	20001148 	.word	0x20001148

00005220 <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I>:
    5220:	b510      	push	{r4, lr}
    5222:	b086      	sub	sp, #24
    5224:	0004      	movs	r4, r0
    5226:	d005      	beq.n	5234 <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x14>
    5228:	f894 0248 	ldrb.w	r0, [r4, #584]	; 0x248
    522c:	b128      	cbz	r0, 523a <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x1a>
    522e:	f240 1177 	movw	r1, #375	; 0x177
    5232:	e025      	b.n	5280 <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x60>
    5234:	f44f 71bb 	mov.w	r1, #374	; 0x176
    5238:	e022      	b.n	5280 <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x60>
    523a:	f894 0249 	ldrb.w	r0, [r4, #585]	; 0x249
    523e:	2820      	cmp	r0, #32
    5240:	d002      	beq.n	5248 <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x28>
    5242:	f240 1179 	movw	r1, #377	; 0x179
    5246:	e01b      	b.n	5280 <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x60>
    5248:	4621      	mov	r1, r4
    524a:	480f      	ldr	r0, [pc, #60]	; (5288 <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x68>)
    524c:	f005 fd92 	bl	ad74 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    5250:	f884 0249 	strb.w	r0, [r4, #585]	; 0x249
    5254:	2820      	cmp	r0, #32
    5256:	d00e      	beq.n	5276 <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x56>
    5258:	2300      	movs	r3, #0
    525a:	2201      	movs	r2, #1
    525c:	4621      	mov	r1, r4
    525e:	4668      	mov	r0, sp
    5260:	f009 fcf2 	bl	ec48 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x2e>
    5264:	f894 0249 	ldrb.w	r0, [r4, #585]	; 0x249
    5268:	4669      	mov	r1, sp
    526a:	f009 fdd4 	bl	ee16 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x1fc>
    526e:	b128      	cbz	r0, 527c <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x5c>
    5270:	b006      	add	sp, #24
    5272:	2000      	movs	r0, #0
    5274:	bd10      	pop	{r4, pc}
    5276:	f44f 71be 	mov.w	r1, #380	; 0x17c
    527a:	e001      	b.n	5280 <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x60>
    527c:	f240 117f 	movw	r1, #383	; 0x17f
    5280:	2035      	movs	r0, #53	; 0x35
    5282:	f7fb fbfd 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5286:	0000      	.short	0x0000
    5288:	00005389 	.word	0x00005389

0000528c <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI>:
    528c:	4901      	ldr	r1, [pc, #4]	; (5294 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0x8>)
    528e:	7048      	strb	r0, [r1, #1]
    5290:	4770      	bx	lr
    5292:	0000      	.short	0x0000
    5294:	20001148 	.word	0x20001148

00005298 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI>:
    5298:	b570      	push	{r4, r5, r6, lr}
    529a:	4605      	mov	r5, r0
    529c:	4809      	ldr	r0, [pc, #36]	; (52c4 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x2c>)
    529e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    52a2:	fbb0 f4f1 	udiv	r4, r0, r1
    52a6:	f009 fc43 	bl	eb30 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY>
    52aa:	1901      	adds	r1, r0, r4
    52ac:	4628      	mov	r0, r5
    52ae:	f501 719d 	add.w	r1, r1, #314	; 0x13a
    52b2:	f009 f81c 	bl	e2ee <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    52b6:	f640 0148 	movw	r1, #2120	; 0x848
    52ba:	4288      	cmp	r0, r1
    52bc:	d300      	bcc.n	52c0 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x28>
    52be:	4608      	mov	r0, r1
    52c0:	b280      	uxth	r0, r0
    52c2:	bd70      	pop	{r4, r5, r6, pc}
    52c4:	000122f9 	.word	0x000122f9
    52c8:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    52cc:	4d15      	ldr	r5, [pc, #84]	; (5324 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x8c>)
    52ce:	2001      	movs	r0, #1
    52d0:	7028      	strb	r0, [r5, #0]
    52d2:	2400      	movs	r4, #0
    52d4:	f64f 76ff 	movw	r6, #65535	; 0xffff
    52d8:	e00b      	b.n	52f2 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x5a>
    52da:	2100      	movs	r1, #0
    52dc:	f008 fa6c 	bl	d7b8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    52e0:	0007      	movs	r7, r0
    52e2:	d009      	beq.n	52f8 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x60>
    52e4:	f897 0249 	ldrb.w	r0, [r7, #585]	; 0x249
    52e8:	f005 fc2c 	bl	ab44 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    52ec:	4638      	mov	r0, r7
    52ee:	f009 fd63 	bl	edb8 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x19e>
    52f2:	9400      	str	r4, [sp, #0]
    52f4:	9401      	str	r4, [sp, #4]
    52f6:	e00d      	b.n	5314 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x7c>
    52f8:	f240 1199 	movw	r1, #409	; 0x199
    52fc:	2035      	movs	r0, #53	; 0x35
    52fe:	f7fb fbbf 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5302:	9800      	ldr	r0, [sp, #0]
    5304:	b130      	cbz	r0, 5314 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x7c>
    5306:	f890 1248 	ldrb.w	r1, [r0, #584]	; 0x248
    530a:	b119      	cbz	r1, 5314 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x7c>
    530c:	8800      	ldrh	r0, [r0, #0]
    530e:	42b0      	cmp	r0, r6
    5310:	d1e3      	bne.n	52da <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x42>
    5312:	e004      	b.n	531e <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x86>
    5314:	4668      	mov	r0, sp
    5316:	f7fb fdd1 	bl	ebc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    531a:	2800      	cmp	r0, #0
    531c:	d0f1      	beq.n	5302 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x6a>
    531e:	702c      	strb	r4, [r5, #0]
    5320:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    5324:	20001148 	.word	0x20001148
    5328:	b510      	push	{r4, lr}
    532a:	4604      	mov	r4, r0
    532c:	2901      	cmp	r1, #1
    532e:	d102      	bne.n	5336 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x9e>
    5330:	480a      	ldr	r0, [pc, #40]	; (535c <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0xc4>)
    5332:	7800      	ldrb	r0, [r0, #0]
    5334:	b140      	cbz	r0, 5348 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0xb0>
    5336:	2004      	movs	r0, #4
    5338:	f884 0248 	strb.w	r0, [r4, #584]	; 0x248
    533c:	f002 fe28 	bl	7f90 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    5340:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5344:	f005 bd3e 	b.w	adc4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    5348:	2200      	movs	r2, #0
    534a:	2101      	movs	r1, #1
    534c:	4620      	mov	r0, r4
    534e:	f009 fd4b 	bl	ede8 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x1ce>
    5352:	f834 0f9c 	ldrh.w	r0, [r4, #156]!
    5356:	1c40      	adds	r0, r0, #1
    5358:	8020      	strh	r0, [r4, #0]
    535a:	e7ef      	b.n	533c <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0xa4>
    535c:	20001148 	.word	0x20001148
    5360:	b510      	push	{r4, lr}
    5362:	4604      	mov	r4, r0
    5364:	4608      	mov	r0, r1
    5366:	f002 fefd 	bl	8164 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    536a:	4906      	ldr	r1, [pc, #24]	; (5384 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0xec>)
    536c:	f200 709d 	addw	r0, r0, #1949	; 0x79d
    5370:	f831 1014 	ldrh.w	r1, [r1, r4, lsl #1]
    5374:	4408      	add	r0, r1
    5376:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    537a:	fbb0 f0f1 	udiv	r0, r0, r1
    537e:	f500 709d 	add.w	r0, r0, #314	; 0x13a
    5382:	bd10      	pop	{r4, pc}
    5384:	0000ee1a 	.word	0x0000ee1a
    5388:	b570      	push	{r4, r5, r6, lr}
    538a:	0004      	movs	r4, r0
    538c:	d008      	beq.n	53a0 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x108>
    538e:	2909      	cmp	r1, #9
    5390:	d25f      	bcs.n	5452 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x1ba>
    5392:	e8df f001 	tbb	[pc, r1]
    5396:	3807      	.short	0x3807
    5398:	5e3c4040 	.word	0x5e3c4040
    539c:	00594e47 	.word	0x00594e47
    53a0:	21b7      	movs	r1, #183	; 0xb7
    53a2:	e053      	b.n	544c <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x1b4>
    53a4:	f894 0248 	ldrb.w	r0, [r4, #584]	; 0x248
    53a8:	b358      	cbz	r0, 5402 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x16a>
    53aa:	4620      	mov	r0, r4
    53ac:	f000 f928 	bl	5600 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA>
    53b0:	f009 fbbe 	bl	eb30 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY>
    53b4:	f200 103b 	addw	r0, r0, #315	; 0x13b
    53b8:	b285      	uxth	r5, r0
    53ba:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    53be:	2128      	movs	r1, #40	; 0x28
    53c0:	f009 fc2e 	bl	ec20 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x6>
    53c4:	182e      	adds	r6, r5, r0
    53c6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    53c8:	6920      	ldr	r0, [r4, #16]
    53ca:	4288      	cmp	r0, r1
    53cc:	d200      	bcs.n	53d0 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x138>
    53ce:	4601      	mov	r1, r0
    53d0:	4632      	mov	r2, r6
    53d2:	4620      	mov	r0, r4
    53d4:	f008 fefb 	bl	e1ce <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    53d8:	4d1f      	ldr	r5, [pc, #124]	; (5458 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x1c0>)
    53da:	6068      	str	r0, [r5, #4]
    53dc:	7869      	ldrb	r1, [r5, #1]
    53de:	b121      	cbz	r1, 53ea <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x152>
    53e0:	4632      	mov	r2, r6
    53e2:	4620      	mov	r0, r4
    53e4:	6921      	ldr	r1, [r4, #16]
    53e6:	f008 fef2 	bl	e1ce <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    53ea:	60a8      	str	r0, [r5, #8]
    53ec:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    53f0:	f008 ff4e 	bl	e290 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    53f4:	f5a0 7095 	sub.w	r0, r0, #298	; 0x12a
    53f8:	60e8      	str	r0, [r5, #12]
    53fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    53fe:	f005 bdfb 	b.w	aff8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    5402:	21bf      	movs	r1, #191	; 0xbf
    5404:	e022      	b.n	544c <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x1b4>
    5406:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    540a:	f009 bd17 	b.w	ee3c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ>
    540e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5412:	f002 bf91 	b.w	8338 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    5416:	4620      	mov	r0, r4
    5418:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    541c:	2201      	movs	r2, #1
    541e:	2100      	movs	r1, #0
    5420:	f009 bce2 	b.w	ede8 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x1ce>
    5424:	2001      	movs	r0, #1
    5426:	f004 fccd 	bl	9dc4 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
    542a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    542e:	f008 bae1 	b.w	d9f4 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>
    5432:	f894 0248 	ldrb.w	r0, [r4, #584]	; 0x248
    5436:	2804      	cmp	r0, #4
    5438:	d001      	beq.n	543e <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x1a6>
    543a:	21fe      	movs	r1, #254	; 0xfe
    543c:	e006      	b.n	544c <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x1b4>
    543e:	4620      	mov	r0, r4
    5440:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5444:	f009 bcb8 	b.w	edb8 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x19e>
    5448:	f44f 7183 	mov.w	r1, #262	; 0x106
    544c:	2035      	movs	r0, #53	; 0x35
    544e:	f7fb fb17 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5452:	f44f 7185 	mov.w	r1, #266	; 0x10a
    5456:	e7f9      	b.n	544c <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x1b4>
    5458:	20001148 	.word	0x20001148

0000545c <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ>:
    545c:	4806      	ldr	r0, [pc, #24]	; (5478 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x1c>)
    545e:	4905      	ldr	r1, [pc, #20]	; (5474 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x18>)
    5460:	6501      	str	r1, [r0, #80]	; 0x50
    5462:	4906      	ldr	r1, [pc, #24]	; (547c <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x20>)
    5464:	6541      	str	r1, [r0, #84]	; 0x54
    5466:	4807      	ldr	r0, [pc, #28]	; (5484 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x28>)
    5468:	4905      	ldr	r1, [pc, #20]	; (5480 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x24>)
    546a:	6501      	str	r1, [r0, #80]	; 0x50
    546c:	4906      	ldr	r1, [pc, #24]	; (5488 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x2c>)
    546e:	6541      	str	r1, [r0, #84]	; 0x54
    5470:	4770      	bx	lr
    5472:	0000      	.short	0x0000
    5474:	00006625 	.word	0x00006625
    5478:	200000f8 	.word	0x200000f8
    547c:	000066fd 	.word	0x000066fd
    5480:	0000f00f 	.word	0x0000f00f
    5484:	200001a4 	.word	0x200001a4
    5488:	0000f039 	.word	0x0000f039

0000548c <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA>:
    548c:	b570      	push	{r4, r5, r6, lr}
    548e:	4605      	mov	r5, r0
    5490:	f8b0 00d6 	ldrh.w	r0, [r0, #214]	; 0xd6
    5494:	f895 10a9 	ldrb.w	r1, [r5, #169]	; 0xa9
    5498:	b1c9      	cbz	r1, 54ce <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x42>
    549a:	f8b5 10d8 	ldrh.w	r1, [r5, #216]	; 0xd8
    549e:	1a0c      	subs	r4, r1, r0
    54a0:	f1b4 0404 	subs.w	r4, r4, #4
    54a4:	f895 00d4 	ldrb.w	r0, [r5, #212]	; 0xd4
    54a8:	b140      	cbz	r0, 54bc <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x30>
    54aa:	f895 20a5 	ldrb.w	r2, [r5, #165]	; 0xa5
    54ae:	2300      	movs	r3, #0
    54b0:	2109      	movs	r1, #9
    54b2:	f105 0088 	add.w	r0, r5, #136	; 0x88
    54b6:	f008 fb41 	bl	db3c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    54ba:	b160      	cbz	r0, 54d6 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x4a>
    54bc:	4628      	mov	r0, r5
    54be:	f009 fec1 	bl	f244 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x408>
    54c2:	b138      	cbz	r0, 54d4 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x48>
    54c4:	e9d5 1032 	ldrd	r1, r0, [r5, #200]	; 0xc8
    54c8:	1a40      	subs	r0, r0, r1
    54ca:	1f00      	subs	r0, r0, #4
    54cc:	e003      	b.n	54d6 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x4a>
    54ce:	f1c0 0402 	rsb	r4, r0, #2
    54d2:	e7e7      	b.n	54a4 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x18>
    54d4:	4620      	mov	r0, r4
    54d6:	42a0      	cmp	r0, r4
    54d8:	da00      	bge.n	54dc <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x50>
    54da:	4604      	mov	r4, r0
    54dc:	2c00      	cmp	r4, #0
    54de:	dc01      	bgt.n	54e4 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x58>
    54e0:	2000      	movs	r0, #0
    54e2:	bd70      	pop	{r4, r5, r6, pc}
    54e4:	b2a0      	uxth	r0, r4
    54e6:	bd70      	pop	{r4, r5, r6, pc}

000054e8 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY>:
    54e8:	481d      	ldr	r0, [pc, #116]	; (5560 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x78>)
    54ea:	491c      	ldr	r1, [pc, #112]	; (555c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x74>)
    54ec:	6081      	str	r1, [r0, #8]
    54ee:	491d      	ldr	r1, [pc, #116]	; (5564 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x7c>)
    54f0:	61c1      	str	r1, [r0, #28]
    54f2:	491d      	ldr	r1, [pc, #116]	; (5568 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x80>)
    54f4:	62c1      	str	r1, [r0, #44]	; 0x2c
    54f6:	491d      	ldr	r1, [pc, #116]	; (556c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x84>)
    54f8:	6101      	str	r1, [r0, #16]
    54fa:	491d      	ldr	r1, [pc, #116]	; (5570 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x88>)
    54fc:	6141      	str	r1, [r0, #20]
    54fe:	491d      	ldr	r1, [pc, #116]	; (5574 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x8c>)
    5500:	6441      	str	r1, [r0, #68]	; 0x44
    5502:	491d      	ldr	r1, [pc, #116]	; (5578 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x90>)
    5504:	6181      	str	r1, [r0, #24]
    5506:	491d      	ldr	r1, [pc, #116]	; (557c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x94>)
    5508:	6301      	str	r1, [r0, #48]	; 0x30
    550a:	491d      	ldr	r1, [pc, #116]	; (5580 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x98>)
    550c:	6241      	str	r1, [r0, #36]	; 0x24
    550e:	491d      	ldr	r1, [pc, #116]	; (5584 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x9c>)
    5510:	64c1      	str	r1, [r0, #76]	; 0x4c
    5512:	491d      	ldr	r1, [pc, #116]	; (5588 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xa0>)
    5514:	6481      	str	r1, [r0, #72]	; 0x48
    5516:	491d      	ldr	r1, [pc, #116]	; (558c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xa4>)
    5518:	6341      	str	r1, [r0, #52]	; 0x34
    551a:	491d      	ldr	r1, [pc, #116]	; (5590 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xa8>)
    551c:	6381      	str	r1, [r0, #56]	; 0x38
    551e:	481e      	ldr	r0, [pc, #120]	; (5598 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xb0>)
    5520:	491c      	ldr	r1, [pc, #112]	; (5594 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xac>)
    5522:	6081      	str	r1, [r0, #8]
    5524:	491d      	ldr	r1, [pc, #116]	; (559c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xb4>)
    5526:	61c1      	str	r1, [r0, #28]
    5528:	491d      	ldr	r1, [pc, #116]	; (55a0 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xb8>)
    552a:	6201      	str	r1, [r0, #32]
    552c:	491d      	ldr	r1, [pc, #116]	; (55a4 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xbc>)
    552e:	6041      	str	r1, [r0, #4]
    5530:	491d      	ldr	r1, [pc, #116]	; (55a8 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xc0>)
    5532:	6001      	str	r1, [r0, #0]
    5534:	491d      	ldr	r1, [pc, #116]	; (55ac <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xc4>)
    5536:	6281      	str	r1, [r0, #40]	; 0x28
    5538:	491d      	ldr	r1, [pc, #116]	; (55b0 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xc8>)
    553a:	62c1      	str	r1, [r0, #44]	; 0x2c
    553c:	491d      	ldr	r1, [pc, #116]	; (55b4 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xcc>)
    553e:	60c1      	str	r1, [r0, #12]
    5540:	491d      	ldr	r1, [pc, #116]	; (55b8 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xd0>)
    5542:	6181      	str	r1, [r0, #24]
    5544:	491d      	ldr	r1, [pc, #116]	; (55bc <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xd4>)
    5546:	6301      	str	r1, [r0, #48]	; 0x30
    5548:	491d      	ldr	r1, [pc, #116]	; (55c0 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xd8>)
    554a:	6481      	str	r1, [r0, #72]	; 0x48
    554c:	491d      	ldr	r1, [pc, #116]	; (55c4 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xdc>)
    554e:	64c1      	str	r1, [r0, #76]	; 0x4c
    5550:	491d      	ldr	r1, [pc, #116]	; (55c8 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xe0>)
    5552:	6441      	str	r1, [r0, #68]	; 0x44
    5554:	491d      	ldr	r1, [pc, #116]	; (55cc <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xe4>)
    5556:	6241      	str	r1, [r0, #36]	; 0x24
    5558:	4770      	bx	lr
    555a:	0000      	.short	0x0000
    555c:	00006a2d 	.word	0x00006a2d
    5560:	200000f8 	.word	0x200000f8
    5564:	00006a71 	.word	0x00006a71
    5568:	0000ef1d 	.word	0x0000ef1d
    556c:	00006565 	.word	0x00006565
    5570:	0000ef3d 	.word	0x0000ef3d
    5574:	00006931 	.word	0x00006931
    5578:	000069b1 	.word	0x000069b1
    557c:	00006ab9 	.word	0x00006ab9
    5580:	000065a1 	.word	0x000065a1
    5584:	0000eeef 	.word	0x0000eeef
    5588:	0000eeb9 	.word	0x0000eeb9
    558c:	00006965 	.word	0x00006965
    5590:	0000677d 	.word	0x0000677d
    5594:	0000f1d7 	.word	0x0000f1d7
    5598:	200001a4 	.word	0x200001a4
    559c:	0000f207 	.word	0x0000f207
    55a0:	0000f00b 	.word	0x0000f00b
    55a4:	0000ef7d 	.word	0x0000ef7d
    55a8:	0000efa7 	.word	0x0000efa7
    55ac:	0000f09b 	.word	0x0000f09b
    55b0:	0000f0cd 	.word	0x0000f0cd
    55b4:	0000efd1 	.word	0x0000efd1
    55b8:	0000f1b9 	.word	0x0000f1b9
    55bc:	0000f241 	.word	0x0000f241
    55c0:	0000f067 	.word	0x0000f067
    55c4:	0000f091 	.word	0x0000f091
    55c8:	0000f197 	.word	0x0000f197
    55cc:	0000f063 	.word	0x0000f063

000055d0 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY>:
    55d0:	4806      	ldr	r0, [pc, #24]	; (55ec <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x1c>)
    55d2:	4905      	ldr	r1, [pc, #20]	; (55e8 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x18>)
    55d4:	6581      	str	r1, [r0, #88]	; 0x58
    55d6:	4906      	ldr	r1, [pc, #24]	; (55f0 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x20>)
    55d8:	65c1      	str	r1, [r0, #92]	; 0x5c
    55da:	4807      	ldr	r0, [pc, #28]	; (55f8 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x28>)
    55dc:	4905      	ldr	r1, [pc, #20]	; (55f4 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x24>)
    55de:	6581      	str	r1, [r0, #88]	; 0x58
    55e0:	4906      	ldr	r1, [pc, #24]	; (55fc <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x2c>)
    55e2:	6601      	str	r1, [r0, #96]	; 0x60
    55e4:	4770      	bx	lr
    55e6:	0000      	.short	0x0000
    55e8:	00006789 	.word	0x00006789
    55ec:	200000f8 	.word	0x200000f8
    55f0:	000068c1 	.word	0x000068c1
    55f4:	0000f0f3 	.word	0x0000f0f3
    55f8:	200001a4 	.word	0x200001a4
    55fc:	0000f11d 	.word	0x0000f11d

00005600 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA>:
    5600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5602:	4d39      	ldr	r5, [pc, #228]	; (56e8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe8>)
    5604:	2600      	movs	r6, #0
    5606:	f1a5 070c 	sub.w	r7, r5, #12
    560a:	702e      	strb	r6, [r5, #0]
    560c:	6068      	str	r0, [r5, #4]
    560e:	807e      	strh	r6, [r7, #2]
    5610:	707e      	strb	r6, [r7, #1]
    5612:	4604      	mov	r4, r0
    5614:	703e      	strb	r6, [r7, #0]
    5616:	8800      	ldrh	r0, [r0, #0]
    5618:	f7fb ffee 	bl	15f8 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    561c:	6868      	ldr	r0, [r5, #4]
    561e:	8800      	ldrh	r0, [r0, #0]
    5620:	f7fb ff92 	bl	1548 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    5624:	f8b4 024a 	ldrh.w	r0, [r4, #586]	; 0x24a
    5628:	1c40      	adds	r0, r0, #1
    562a:	b282      	uxth	r2, r0
    562c:	6868      	ldr	r0, [r5, #4]
    562e:	f100 0388 	add.w	r3, r0, #136	; 0x88
    5632:	4601      	mov	r1, r0
    5634:	4618      	mov	r0, r3
    5636:	f008 fc30 	bl	de9a <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>
    563a:	b120      	cbz	r0, 5646 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x46>
    563c:	f240 11c1 	movw	r1, #449	; 0x1c1
    5640:	2036      	movs	r0, #54	; 0x36
    5642:	f7fb fa1d 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5646:	f8a4 624a 	strh.w	r6, [r4, #586]	; 0x24a
    564a:	f894 00a6 	ldrb.w	r0, [r4, #166]	; 0xa6
    564e:	2825      	cmp	r0, #37	; 0x25
    5650:	d10a      	bne.n	5668 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x68>
    5652:	f8b4 009c 	ldrh.w	r0, [r4, #156]	; 0x9c
    5656:	f8b4 1260 	ldrh.w	r1, [r4, #608]	; 0x260
    565a:	1a40      	subs	r0, r0, r1
    565c:	b200      	sxth	r0, r0
    565e:	2800      	cmp	r0, #0
    5660:	db02      	blt.n	5668 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x68>
    5662:	f884 60a6 	strb.w	r6, [r4, #166]	; 0xa6
    5666:	e011      	b.n	568c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8c>
    5668:	f894 00a5 	ldrb.w	r0, [r4, #165]	; 0xa5
    566c:	2825      	cmp	r0, #37	; 0x25
    566e:	d003      	beq.n	5678 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x78>
    5670:	2826      	cmp	r0, #38	; 0x26
    5672:	d001      	beq.n	5678 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x78>
    5674:	2827      	cmp	r0, #39	; 0x27
    5676:	d10c      	bne.n	5692 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x92>
    5678:	f8b4 009c 	ldrh.w	r0, [r4, #156]	; 0x9c
    567c:	f8b4 1260 	ldrh.w	r1, [r4, #608]	; 0x260
    5680:	1a40      	subs	r0, r0, r1
    5682:	b200      	sxth	r0, r0
    5684:	2800      	cmp	r0, #0
    5686:	db04      	blt.n	5692 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x92>
    5688:	f884 60a5 	strb.w	r6, [r4, #165]	; 0xa5
    568c:	f000 febe 	bl	640c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd14>
    5690:	b318      	cbz	r0, 56da <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xda>
    5692:	f000 fd43 	bl	611c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa24>
    5696:	2800      	cmp	r0, #0
    5698:	d125      	bne.n	56e6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe6>
    569a:	6868      	ldr	r0, [r5, #4]
    569c:	3088      	adds	r0, #136	; 0x88
    569e:	f009 fbdb 	bl	ee58 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    56a2:	b120      	cbz	r0, 56ae <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xae>
    56a4:	6868      	ldr	r0, [r5, #4]
    56a6:	f890 012e 	ldrb.w	r0, [r0, #302]	; 0x12e
    56aa:	f000 fbdd 	bl	5e68 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x770>
    56ae:	480f      	ldr	r0, [pc, #60]	; (56ec <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xec>)
    56b0:	9000      	str	r0, [sp, #0]
    56b2:	e9d7 0103 	ldrd	r0, r1, [r7, #12]
    56b6:	4b0e      	ldr	r3, [pc, #56]	; (56f0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf0>)
    56b8:	4a0e      	ldr	r2, [pc, #56]	; (56f4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf4>)
    56ba:	f7fc f81f 	bl	16fc <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>
    56be:	6868      	ldr	r0, [r5, #4]
    56c0:	2300      	movs	r3, #0
    56c2:	2105      	movs	r1, #5
    56c4:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    56c8:	3088      	adds	r0, #136	; 0x88
    56ca:	f008 fa37 	bl	db3c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    56ce:	2800      	cmp	r0, #0
    56d0:	d009      	beq.n	56e6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe6>
    56d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    56d6:	f7fc b80b 	b.w	16f0 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>
    56da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    56de:	2100      	movs	r1, #0
    56e0:	4608      	mov	r0, r1
    56e2:	f000 bcc3 	b.w	606c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x974>
    56e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    56e8:	200000f0 	.word	0x200000f0
    56ec:	0000606d 	.word	0x0000606d
    56f0:	000058d5 	.word	0x000058d5
    56f4:	00006385 	.word	0x00006385

000056f8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI>:
    56f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    56fa:	460d      	mov	r5, r1
    56fc:	4604      	mov	r4, r0
    56fe:	2600      	movs	r6, #0
    5700:	e051      	b.n	57a6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xae>
    5702:	bf00      	nop
    5704:	f8b4 024a 	ldrh.w	r0, [r4, #586]	; 0x24a
    5708:	1c40      	adds	r0, r0, #1
    570a:	f8a4 024a 	strh.w	r0, [r4, #586]	; 0x24a
    570e:	f8b4 00d6 	ldrh.w	r0, [r4, #214]	; 0xd6
    5712:	1c40      	adds	r0, r0, #1
    5714:	f8a4 00d6 	strh.w	r0, [r4, #214]	; 0xd6
    5718:	4620      	mov	r0, r4
    571a:	f009 fd93 	bl	f244 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x408>
    571e:	b198      	cbz	r0, 5748 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x50>
    5720:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
    5724:	1c40      	adds	r0, r0, #1
    5726:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
    572a:	4620      	mov	r0, r4
    572c:	f009 fbb5 	bl	ee9a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5e>
    5730:	e9d4 0132 	ldrd	r0, r1, [r4, #200]	; 0xc8
    5734:	4288      	cmp	r0, r1
    5736:	d307      	bcc.n	5748 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x50>
    5738:	220f      	movs	r2, #15
    573a:	491d      	ldr	r1, [pc, #116]	; (57b0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb8>)
    573c:	f504 70b0 	add.w	r0, r4, #352	; 0x160
    5740:	f8c4 60c8 	str.w	r6, [r4, #200]	; 0xc8
    5744:	f008 fd1f 	bl	e186 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    5748:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
    574c:	b120      	cbz	r0, 5758 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x60>
    574e:	f8b4 00dc 	ldrh.w	r0, [r4, #220]	; 0xdc
    5752:	1c40      	adds	r0, r0, #1
    5754:	f8a4 00dc 	strh.w	r0, [r4, #220]	; 0xdc
    5758:	f894 00e4 	ldrb.w	r0, [r4, #228]	; 0xe4
    575c:	b120      	cbz	r0, 5768 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x70>
    575e:	f8b4 00e2 	ldrh.w	r0, [r4, #226]	; 0xe2
    5762:	1c40      	adds	r0, r0, #1
    5764:	f8a4 00e2 	strh.w	r0, [r4, #226]	; 0xe2
    5768:	f894 0138 	ldrb.w	r0, [r4, #312]	; 0x138
    576c:	f88d 0000 	strb.w	r0, [sp]
    5770:	9800      	ldr	r0, [sp, #0]
    5772:	9000      	str	r0, [sp, #0]
    5774:	f89d 0000 	ldrb.w	r0, [sp]
    5778:	b940      	cbnz	r0, 578c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x94>
    577a:	f894 20a7 	ldrb.w	r2, [r4, #167]	; 0xa7
    577e:	2300      	movs	r3, #0
    5780:	2101      	movs	r1, #1
    5782:	f104 0088 	add.w	r0, r4, #136	; 0x88
    5786:	f008 f9d9 	bl	db3c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    578a:	b120      	cbz	r0, 5796 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9e>
    578c:	f8b4 00da 	ldrh.w	r0, [r4, #218]	; 0xda
    5790:	1c40      	adds	r0, r0, #1
    5792:	f8a4 00da 	strh.w	r0, [r4, #218]	; 0xda
    5796:	4620      	mov	r0, r4
    5798:	f000 fa30 	bl	5bfc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x504>
    579c:	f8b4 009c 	ldrh.w	r0, [r4, #156]	; 0x9c
    57a0:	1c40      	adds	r0, r0, #1
    57a2:	f8a4 009c 	strh.w	r0, [r4, #156]	; 0x9c
    57a6:	1e6d      	subs	r5, r5, #1
    57a8:	b2ad      	uxth	r5, r5
    57aa:	d2ab      	bcs.n	5704 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc>
    57ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    57ae:	0000      	.short	0x0000
    57b0:	0000e67d 	.word	0x0000e67d
    57b4:	4411      	add	r1, r2
    57b6:	78c2      	ldrb	r2, [r0, #3]
    57b8:	480c      	ldr	r0, [pc, #48]	; (57ec <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf4>)
    57ba:	1d89      	adds	r1, r1, #6
    57bc:	b289      	uxth	r1, r1
    57be:	6840      	ldr	r0, [r0, #4]
    57c0:	2a01      	cmp	r2, #1
    57c2:	d006      	beq.n	57d2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xda>
    57c4:	b142      	cbz	r2, 57d8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe0>
    57c6:	2a18      	cmp	r2, #24
    57c8:	d105      	bne.n	57d6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde>
    57ca:	f890 2262 	ldrb.w	r2, [r0, #610]	; 0x262
    57ce:	b132      	cbz	r2, 57de <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe6>
    57d0:	e009      	b.n	57e6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xee>
    57d2:	f8a0 125e 	strh.w	r1, [r0, #606]	; 0x25e
    57d6:	4770      	bx	lr
    57d8:	f8a0 1266 	strh.w	r1, [r0, #614]	; 0x266
    57dc:	4770      	bx	lr
    57de:	f890 2263 	ldrb.w	r2, [r0, #611]	; 0x263
    57e2:	b902      	cbnz	r2, 57e6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xee>
    57e4:	2100      	movs	r1, #0
    57e6:	f8a0 1260 	strh.w	r1, [r0, #608]	; 0x260
    57ea:	4770      	bx	lr
    57ec:	200000f0 	.word	0x200000f0
    57f0:	490b      	ldr	r1, [pc, #44]	; (5820 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x128>)
    57f2:	78c2      	ldrb	r2, [r0, #3]
    57f4:	6849      	ldr	r1, [r1, #4]
    57f6:	2a01      	cmp	r2, #1
    57f8:	d006      	beq.n	5808 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x110>
    57fa:	b15a      	cbz	r2, 5814 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11c>
    57fc:	2a18      	cmp	r2, #24
    57fe:	d108      	bne.n	5812 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11a>
    5800:	f8b1 1260 	ldrh.w	r1, [r1, #608]	; 0x260
    5804:	f008 bc5e 	b.w	e0c4 <sym_AYZTYWE6SD5T6ZDLITENLNSRAVS5VKE23BWONUA>
    5808:	f8b1 125e 	ldrh.w	r1, [r1, #606]	; 0x25e
    580c:	7241      	strb	r1, [r0, #9]
    580e:	0a09      	lsrs	r1, r1, #8
    5810:	7281      	strb	r1, [r0, #10]
    5812:	4770      	bx	lr
    5814:	f8b1 1266 	ldrh.w	r1, [r1, #614]	; 0x266
    5818:	7341      	strb	r1, [r0, #13]
    581a:	0a09      	lsrs	r1, r1, #8
    581c:	7381      	strb	r1, [r0, #14]
    581e:	4770      	bx	lr
    5820:	200000f0 	.word	0x200000f0
    5824:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    5826:	4c2a      	ldr	r4, [pc, #168]	; (58d0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1d8>)
    5828:	2300      	movs	r3, #0
    582a:	4619      	mov	r1, r3
    582c:	6860      	ldr	r0, [r4, #4]
    582e:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    5832:	3088      	adds	r0, #136	; 0x88
    5834:	f008 f982 	bl	db3c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5838:	2800      	cmp	r0, #0
    583a:	d048      	beq.n	58ce <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1d6>
    583c:	6860      	ldr	r0, [r4, #4]
    583e:	f890 125c 	ldrb.w	r1, [r0, #604]	; 0x25c
    5842:	f88d 1000 	strb.w	r1, [sp]
    5846:	9900      	ldr	r1, [sp, #0]
    5848:	9100      	str	r1, [sp, #0]
    584a:	f89d 1000 	ldrb.w	r1, [sp]
    584e:	2500      	movs	r5, #0
    5850:	2900      	cmp	r1, #0
    5852:	d03c      	beq.n	58ce <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1d6>
    5854:	f890 00a6 	ldrb.w	r0, [r0, #166]	; 0xa6
    5858:	f008 f9d3 	bl	dc02 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    585c:	2800      	cmp	r0, #0
    585e:	d136      	bne.n	58ce <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1d6>
    5860:	6860      	ldr	r0, [r4, #4]
    5862:	f8b0 009c 	ldrh.w	r0, [r0, #156]	; 0x9c
    5866:	280a      	cmp	r0, #10
    5868:	d931      	bls.n	58ce <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1d6>
    586a:	4668      	mov	r0, sp
    586c:	f7fc ff30 	bl	26d0 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ>
    5870:	2800      	cmp	r0, #0
    5872:	d02c      	beq.n	58ce <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1d6>
    5874:	6861      	ldr	r1, [r4, #4]
    5876:	2205      	movs	r2, #5
    5878:	4668      	mov	r0, sp
    587a:	31ae      	adds	r1, #174	; 0xae
    587c:	f00a ff05 	bl	1068a <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    5880:	b310      	cbz	r0, 58c8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1d0>
    5882:	6860      	ldr	r0, [r4, #4]
    5884:	f8d0 1258 	ldr.w	r1, [r0, #600]	; 0x258
    5888:	7808      	ldrb	r0, [r1, #0]
    588a:	b158      	cbz	r0, 58a4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1ac>
    588c:	2205      	movs	r2, #5
    588e:	4668      	mov	r0, sp
    5890:	1c49      	adds	r1, r1, #1
    5892:	f00a fefa 	bl	1068a <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    5896:	2800      	cmp	r0, #0
    5898:	d119      	bne.n	58ce <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1d6>
    589a:	6860      	ldr	r0, [r4, #4]
    589c:	f8d0 0258 	ldr.w	r0, [r0, #600]	; 0x258
    58a0:	7800      	ldrb	r0, [r0, #0]
    58a2:	b940      	cbnz	r0, 58b6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1be>
    58a4:	6860      	ldr	r0, [r4, #4]
    58a6:	9900      	ldr	r1, [sp, #0]
    58a8:	f8d0 0258 	ldr.w	r0, [r0, #600]	; 0x258
    58ac:	f8c0 1001 	str.w	r1, [r0, #1]
    58b0:	f89d 1004 	ldrb.w	r1, [sp, #4]
    58b4:	7141      	strb	r1, [r0, #5]
    58b6:	6860      	ldr	r0, [r4, #4]
    58b8:	f8d0 0258 	ldr.w	r0, [r0, #600]	; 0x258
    58bc:	7801      	ldrb	r1, [r0, #0]
    58be:	1c49      	adds	r1, r1, #1
    58c0:	7001      	strb	r1, [r0, #0]
    58c2:	2001      	movs	r0, #1
    58c4:	f000 fe0c 	bl	64e0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    58c8:	6860      	ldr	r0, [r4, #4]
    58ca:	f880 525c 	strb.w	r5, [r0, #604]	; 0x25c
    58ce:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    58d0:	200000f0 	.word	0x200000f0
    58d4:	4a0c      	ldr	r2, [pc, #48]	; (5908 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x210>)
    58d6:	7851      	ldrb	r1, [r2, #1]
    58d8:	b9a1      	cbnz	r1, 5904 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x20c>
    58da:	f102 010c 	add.w	r1, r2, #12
    58de:	2801      	cmp	r0, #1
    58e0:	6849      	ldr	r1, [r1, #4]
    58e2:	d008      	beq.n	58f6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1fe>
    58e4:	7890      	ldrb	r0, [r2, #2]
    58e6:	0740      	lsls	r0, r0, #29
    58e8:	d503      	bpl.n	58f2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1fa>
    58ea:	f891 00a7 	ldrb.w	r0, [r1, #167]	; 0xa7
    58ee:	2806      	cmp	r0, #6
    58f0:	d008      	beq.n	5904 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x20c>
    58f2:	2001      	movs	r0, #1
    58f4:	4770      	bx	lr
    58f6:	f8b1 0050 	ldrh.w	r0, [r1, #80]	; 0x50
    58fa:	8e89      	ldrh	r1, [r1, #52]	; 0x34
    58fc:	4288      	cmp	r0, r1
    58fe:	d801      	bhi.n	5904 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x20c>
    5900:	f7ff bc64 	b.w	51cc <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI>
    5904:	2000      	movs	r0, #0
    5906:	4770      	bx	lr
    5908:	200000e4 	.word	0x200000e4
    590c:	b538      	push	{r3, r4, r5, lr}
    590e:	4c93      	ldr	r4, [pc, #588]	; (5b5c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x464>)
    5910:	6860      	ldr	r0, [r4, #4]
    5912:	3088      	adds	r0, #136	; 0x88
    5914:	f009 faa0 	bl	ee58 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    5918:	2800      	cmp	r0, #0
    591a:	d164      	bne.n	59e6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2ee>
    591c:	6860      	ldr	r0, [r4, #4]
    591e:	2300      	movs	r3, #0
    5920:	2101      	movs	r1, #1
    5922:	f890 20a7 	ldrb.w	r2, [r0, #167]	; 0xa7
    5926:	3088      	adds	r0, #136	; 0x88
    5928:	f008 f908 	bl	db3c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    592c:	2800      	cmp	r0, #0
    592e:	d15a      	bne.n	59e6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2ee>
    5930:	6860      	ldr	r0, [r4, #4]
    5932:	f890 1138 	ldrb.w	r1, [r0, #312]	; 0x138
    5936:	f88d 1000 	strb.w	r1, [sp]
    593a:	9900      	ldr	r1, [sp, #0]
    593c:	9100      	str	r1, [sp, #0]
    593e:	f89d 1000 	ldrb.w	r1, [sp]
    5942:	b109      	cbz	r1, 5948 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x250>
    5944:	2002      	movs	r0, #2
    5946:	e03c      	b.n	59c2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2ca>
    5948:	2500      	movs	r5, #0
    594a:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    594e:	462b      	mov	r3, r5
    5950:	4629      	mov	r1, r5
    5952:	3088      	adds	r0, #136	; 0x88
    5954:	f008 f8f2 	bl	db3c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5958:	b128      	cbz	r0, 5966 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x26e>
    595a:	6860      	ldr	r0, [r4, #4]
    595c:	f890 00d4 	ldrb.w	r0, [r0, #212]	; 0xd4
    5960:	b108      	cbz	r0, 5966 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x26e>
    5962:	2012      	movs	r0, #18
    5964:	e02d      	b.n	59c2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2ca>
    5966:	6860      	ldr	r0, [r4, #4]
    5968:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    596c:	2a19      	cmp	r2, #25
    596e:	d027      	beq.n	59c0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2c8>
    5970:	dc06      	bgt.n	5980 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x288>
    5972:	2a03      	cmp	r2, #3
    5974:	d029      	beq.n	59ca <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2d2>
    5976:	2a12      	cmp	r2, #18
    5978:	d01e      	beq.n	59b8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2c0>
    597a:	2a13      	cmp	r2, #19
    597c:	d104      	bne.n	5988 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x290>
    597e:	e019      	b.n	59b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2bc>
    5980:	2a24      	cmp	r2, #36	; 0x24
    5982:	d02a      	beq.n	59da <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2e2>
    5984:	2a2f      	cmp	r2, #47	; 0x2f
    5986:	d02f      	beq.n	59e8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2f0>
    5988:	2300      	movs	r3, #0
    598a:	2104      	movs	r1, #4
    598c:	3088      	adds	r0, #136	; 0x88
    598e:	f008 f8d5 	bl	db3c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5992:	2800      	cmp	r0, #0
    5994:	d127      	bne.n	59e6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2ee>
    5996:	6860      	ldr	r0, [r4, #4]
    5998:	f890 10a6 	ldrb.w	r1, [r0, #166]	; 0xa6
    599c:	291e      	cmp	r1, #30
    599e:	d048      	beq.n	5a32 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x33a>
    59a0:	dc29      	bgt.n	59f6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2fe>
    59a2:	2901      	cmp	r1, #1
    59a4:	d036      	beq.n	5a14 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x31c>
    59a6:	2902      	cmp	r1, #2
    59a8:	d041      	beq.n	5a2e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x336>
    59aa:	2903      	cmp	r1, #3
    59ac:	d02c      	beq.n	5a08 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x310>
    59ae:	2904      	cmp	r1, #4
    59b0:	d13c      	bne.n	5a2c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x334>
    59b2:	e0b7      	b.n	5b24 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x42c>
    59b4:	200b      	movs	r0, #11
    59b6:	e004      	b.n	59c2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2ca>
    59b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    59bc:	f000 bca2 	b.w	6304 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc0c>
    59c0:	2006      	movs	r0, #6
    59c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    59c6:	f000 bd8b 	b.w	64e0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    59ca:	f890 1129 	ldrb.w	r1, [r0, #297]	; 0x129
    59ce:	f880 1130 	strb.w	r1, [r0, #304]	; 0x130
    59d2:	2007      	movs	r0, #7
    59d4:	f000 fd84 	bl	64e0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    59d8:	e009      	b.n	59ee <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2f6>
    59da:	2018      	movs	r0, #24
    59dc:	f000 fd80 	bl	64e0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    59e0:	6860      	ldr	r0, [r4, #4]
    59e2:	f8a0 50dc 	strh.w	r5, [r0, #220]	; 0xdc
    59e6:	bd38      	pop	{r3, r4, r5, pc}
    59e8:	2001      	movs	r0, #1
    59ea:	f000 fd81 	bl	64f0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xdf8>
    59ee:	6860      	ldr	r0, [r4, #4]
    59f0:	f880 50a5 	strb.w	r5, [r0, #165]	; 0xa5
    59f4:	bd38      	pop	{r3, r4, r5, pc}
    59f6:	291f      	cmp	r1, #31
    59f8:	d01b      	beq.n	5a32 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x33a>
    59fa:	2922      	cmp	r1, #34	; 0x22
    59fc:	d061      	beq.n	5ac2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3ca>
    59fe:	2928      	cmp	r1, #40	; 0x28
    5a00:	d071      	beq.n	5ae6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3ee>
    5a02:	292f      	cmp	r1, #47	; 0x2f
    5a04:	d17d      	bne.n	5b02 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x40a>
    5a06:	e089      	b.n	5b1c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x424>
    5a08:	f890 1128 	ldrb.w	r1, [r0, #296]	; 0x128
    5a0c:	f880 1130 	strb.w	r1, [r0, #304]	; 0x130
    5a10:	2007      	movs	r0, #7
    5a12:	e08a      	b.n	5b2a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x432>
    5a14:	200c      	movs	r0, #12
    5a16:	f000 fd63 	bl	64e0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    5a1a:	6860      	ldr	r0, [r4, #4]
    5a1c:	f820 5fe2 	strh.w	r5, [r0, #226]!
    5a20:	7941      	ldrb	r1, [r0, #5]
    5a22:	f041 0101 	orr.w	r1, r1, #1
    5a26:	7141      	strb	r1, [r0, #5]
    5a28:	f800 5c3c 	strb.w	r5, [r0, #-60]
    5a2c:	e069      	b.n	5b02 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x40a>
    5a2e:	2013      	movs	r0, #19
    5a30:	e039      	b.n	5aa6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3ae>
    5a32:	f890 213b 	ldrb.w	r2, [r0, #315]	; 0x13b
    5a36:	f88d 2000 	strb.w	r2, [sp]
    5a3a:	9a00      	ldr	r2, [sp, #0]
    5a3c:	9200      	str	r2, [sp, #0]
    5a3e:	f89d 2000 	ldrb.w	r2, [sp]
    5a42:	bbba      	cbnz	r2, 5ab4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3bc>
    5a44:	f890 213a 	ldrb.w	r2, [r0, #314]	; 0x13a
    5a48:	f88d 2000 	strb.w	r2, [sp]
    5a4c:	9a00      	ldr	r2, [sp, #0]
    5a4e:	9200      	str	r2, [sp, #0]
    5a50:	f89d 2000 	ldrb.w	r2, [sp]
    5a54:	b37a      	cbz	r2, 5ab6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3be>
    5a56:	2925      	cmp	r1, #37	; 0x25
    5a58:	d031      	beq.n	5abe <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3c6>
    5a5a:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    5a5e:	2925      	cmp	r1, #37	; 0x25
    5a60:	d02d      	beq.n	5abe <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3c6>
    5a62:	2926      	cmp	r1, #38	; 0x26
    5a64:	d02b      	beq.n	5abe <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3c6>
    5a66:	2300      	movs	r3, #0
    5a68:	f200 2262 	addw	r2, r0, #610	; 0x262
    5a6c:	f500 719d 	add.w	r1, r0, #314	; 0x13a
    5a70:	f008 fb9f 	bl	e1b2 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    5a74:	6860      	ldr	r0, [r4, #4]
    5a76:	211f      	movs	r1, #31
    5a78:	f880 10a6 	strb.w	r1, [r0, #166]	; 0xa6
    5a7c:	f880 513a 	strb.w	r5, [r0, #314]	; 0x13a
    5a80:	6860      	ldr	r0, [r4, #4]
    5a82:	f008 fbb1 	bl	e1e8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    5a86:	2104      	movs	r1, #4
    5a88:	6860      	ldr	r0, [r4, #4]
    5a8a:	f009 f88b 	bl	eba4 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    5a8e:	f000 f867 	bl	5b60 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x468>
    5a92:	6861      	ldr	r1, [r4, #4]
    5a94:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    5a98:	8bc2      	ldrh	r2, [r0, #30]
    5a9a:	f8a1 2130 	strh.w	r2, [r1, #304]	; 0x130
    5a9e:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    5aa0:	f8a1 0132 	strh.w	r0, [r1, #306]	; 0x132
    5aa4:	2015      	movs	r0, #21
    5aa6:	f000 fd1b 	bl	64e0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    5aaa:	6860      	ldr	r0, [r4, #4]
    5aac:	f8a0 50e2 	strh.w	r5, [r0, #226]	; 0xe2
    5ab0:	f880 50a6 	strb.w	r5, [r0, #166]	; 0xa6
    5ab4:	e025      	b.n	5b02 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x40a>
    5ab6:	e7ff      	b.n	5ab8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3c0>
    5ab8:	291f      	cmp	r1, #31
    5aba:	d0e1      	beq.n	5a80 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x388>
    5abc:	e021      	b.n	5b02 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x40a>
    5abe:	2301      	movs	r3, #1
    5ac0:	e7d2      	b.n	5a68 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x370>
    5ac2:	f890 1144 	ldrb.w	r1, [r0, #324]	; 0x144
    5ac6:	2901      	cmp	r1, #1
    5ac8:	d108      	bne.n	5adc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3e4>
    5aca:	f890 1145 	ldrb.w	r1, [r0, #325]	; 0x145
    5ace:	f88d 1000 	strb.w	r1, [sp]
    5ad2:	9900      	ldr	r1, [sp, #0]
    5ad4:	9100      	str	r1, [sp, #0]
    5ad6:	f89d 1000 	ldrb.w	r1, [sp]
    5ada:	b129      	cbz	r1, 5ae8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3f0>
    5adc:	f890 1144 	ldrb.w	r1, [r0, #324]	; 0x144
    5ae0:	2902      	cmp	r1, #2
    5ae2:	d006      	beq.n	5af2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3fa>
    5ae4:	e00d      	b.n	5b02 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x40a>
    5ae6:	e01f      	b.n	5b28 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x430>
    5ae8:	f8d0 1062 	ldr.w	r1, [r0, #98]	; 0x62
    5aec:	f8d0 0146 	ldr.w	r0, [r0, #326]	; 0x146
    5af0:	e002      	b.n	5af8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x400>
    5af2:	f850 1f62 	ldr.w	r1, [r0, #98]!
    5af6:	6840      	ldr	r0, [r0, #4]
    5af8:	f000 fd04 	bl	6504 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe0c>
    5afc:	2018      	movs	r0, #24
    5afe:	f000 fcef 	bl	64e0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    5b02:	6860      	ldr	r0, [r4, #4]
    5b04:	3088      	adds	r0, #136	; 0x88
    5b06:	f009 f9a7 	bl	ee58 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    5b0a:	2800      	cmp	r0, #0
    5b0c:	f47f af72 	bne.w	59f4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2fc>
    5b10:	6860      	ldr	r0, [r4, #4]
    5b12:	3088      	adds	r0, #136	; 0x88
    5b14:	f009 f9a0 	bl	ee58 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    5b18:	b158      	cbz	r0, 5b32 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x43a>
    5b1a:	e015      	b.n	5b48 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x450>
    5b1c:	2000      	movs	r0, #0
    5b1e:	f000 fce7 	bl	64f0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xdf8>
    5b22:	e004      	b.n	5b2e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x436>
    5b24:	2009      	movs	r0, #9
    5b26:	e000      	b.n	5b2a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x432>
    5b28:	2024      	movs	r0, #36	; 0x24
    5b2a:	f000 fcd9 	bl	64e0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    5b2e:	6860      	ldr	r0, [r4, #4]
    5b30:	e7be      	b.n	5ab0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3b8>
    5b32:	6860      	ldr	r0, [r4, #4]
    5b34:	2300      	movs	r3, #0
    5b36:	4619      	mov	r1, r3
    5b38:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    5b3c:	3088      	adds	r0, #136	; 0x88
    5b3e:	f007 fffd 	bl	db3c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5b42:	b108      	cbz	r0, 5b48 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x450>
    5b44:	f000 fb14 	bl	6170 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa78>
    5b48:	6860      	ldr	r0, [r4, #4]
    5b4a:	3088      	adds	r0, #136	; 0x88
    5b4c:	f009 f984 	bl	ee58 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    5b50:	2800      	cmp	r0, #0
    5b52:	d1db      	bne.n	5b0c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x414>
    5b54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5b58:	f7ff be64 	b.w	5824 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12c>
    5b5c:	200000f0 	.word	0x200000f0
    5b60:	4808      	ldr	r0, [pc, #32]	; (5b84 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x48c>)
    5b62:	6843      	ldr	r3, [r0, #4]
    5b64:	f893 0060 	ldrb.w	r0, [r3, #96]	; 0x60
    5b68:	2801      	cmp	r0, #1
    5b6a:	d006      	beq.n	5b7a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x482>
    5b6c:	f503 72b5 	add.w	r2, r3, #362	; 0x16a
    5b70:	f103 012c 	add.w	r1, r3, #44	; 0x2c
    5b74:	8818      	ldrh	r0, [r3, #0]
    5b76:	f7fd b893 	b.w	2ca0 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    5b7a:	2002      	movs	r0, #2
    5b7c:	f883 0060 	strb.w	r0, [r3, #96]	; 0x60
    5b80:	4770      	bx	lr
    5b82:	0000      	.short	0x0000
    5b84:	200000f0 	.word	0x200000f0
    5b88:	b538      	push	{r3, r4, r5, lr}
    5b8a:	4d1a      	ldr	r5, [pc, #104]	; (5bf4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4fc>)
    5b8c:	686b      	ldr	r3, [r5, #4]
    5b8e:	f893 10a5 	ldrb.w	r1, [r3, #165]	; 0xa5
    5b92:	2917      	cmp	r1, #23
    5b94:	d001      	beq.n	5b9a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4a2>
    5b96:	2914      	cmp	r1, #20
    5b98:	d102      	bne.n	5ba0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4a8>
    5b9a:	f893 10e6 	ldrb.w	r1, [r3, #230]	; 0xe6
    5b9e:	b109      	cbz	r1, 5ba4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4ac>
    5ba0:	2002      	movs	r0, #2
    5ba2:	bd38      	pop	{r3, r4, r5, pc}
    5ba4:	2400      	movs	r4, #0
    5ba6:	f883 40e5 	strb.w	r4, [r3, #229]	; 0xe5
    5baa:	f883 40e0 	strb.w	r4, [r3, #224]	; 0xe0
    5bae:	f893 121a 	ldrb.w	r1, [r3, #538]	; 0x21a
    5bb2:	f88d 1000 	strb.w	r1, [sp]
    5bb6:	9900      	ldr	r1, [sp, #0]
    5bb8:	9100      	str	r1, [sp, #0]
    5bba:	f89d 1000 	ldrb.w	r1, [sp]
    5bbe:	b121      	cbz	r1, 5bca <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4d2>
    5bc0:	f240 31df 	movw	r1, #991	; 0x3df
    5bc4:	2036      	movs	r0, #54	; 0x36
    5bc6:	f7fa ff5b 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5bca:	8819      	ldrh	r1, [r3, #0]
    5bcc:	f8a3 121e 	strh.w	r1, [r3, #542]	; 0x21e
    5bd0:	f883 021c 	strb.w	r0, [r3, #540]	; 0x21c
    5bd4:	f883 4220 	strb.w	r4, [r3, #544]	; 0x220
    5bd8:	f883 4278 	strb.w	r4, [r3, #632]	; 0x278
    5bdc:	f203 2012 	addw	r0, r3, #530	; 0x212
    5be0:	220c      	movs	r2, #12
    5be2:	4905      	ldr	r1, [pc, #20]	; (5bf8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x500>)
    5be4:	f008 fabb 	bl	e15e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    5be8:	6868      	ldr	r0, [r5, #4]
    5bea:	f880 40a5 	strb.w	r4, [r0, #165]	; 0xa5
    5bee:	2000      	movs	r0, #0
    5bf0:	bd38      	pop	{r3, r4, r5, pc}
    5bf2:	0000      	.short	0x0000
    5bf4:	200000f0 	.word	0x200000f0
    5bf8:	0000e5e1 	.word	0x0000e5e1
    5bfc:	b570      	push	{r4, r5, r6, lr}
    5bfe:	4604      	mov	r4, r0
    5c00:	f890 00a5 	ldrb.w	r0, [r0, #165]	; 0xa5
    5c04:	2500      	movs	r5, #0
    5c06:	280b      	cmp	r0, #11
    5c08:	d001      	beq.n	5c0e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x516>
    5c0a:	280c      	cmp	r0, #12
    5c0c:	d108      	bne.n	5c20 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x528>
    5c0e:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
    5c12:	f8b4 225e 	ldrh.w	r2, [r4, #606]	; 0x25e
    5c16:	1a89      	subs	r1, r1, r2
    5c18:	1c49      	adds	r1, r1, #1
    5c1a:	0409      	lsls	r1, r1, #16
    5c1c:	0c09      	lsrs	r1, r1, #16
    5c1e:	d032      	beq.n	5c86 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x58e>
    5c20:	280d      	cmp	r0, #13
    5c22:	d001      	beq.n	5c28 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x530>
    5c24:	280e      	cmp	r0, #14
    5c26:	d12d      	bne.n	5c84 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x58c>
    5c28:	f8b4 009c 	ldrh.w	r0, [r4, #156]	; 0x9c
    5c2c:	f8b4 1266 	ldrh.w	r1, [r4, #614]	; 0x266
    5c30:	1a40      	subs	r0, r0, r1
    5c32:	1c40      	adds	r0, r0, #1
    5c34:	0400      	lsls	r0, r0, #16
    5c36:	0c00      	lsrs	r0, r0, #16
    5c38:	d124      	bne.n	5c84 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x58c>
    5c3a:	8820      	ldrh	r0, [r4, #0]
    5c3c:	f8a4 01d2 	strh.w	r0, [r4, #466]	; 0x1d2
    5c40:	f8d4 0270 	ldr.w	r0, [r4, #624]	; 0x270
    5c44:	f007 ff61 	bl	db0a <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    5c48:	f8a4 01d4 	strh.w	r0, [r4, #468]	; 0x1d4
    5c4c:	f8b4 0274 	ldrh.w	r0, [r4, #628]	; 0x274
    5c50:	f8a4 01d6 	strh.w	r0, [r4, #470]	; 0x1d6
    5c54:	f8b4 0276 	ldrh.w	r0, [r4, #630]	; 0x276
    5c58:	f8a4 01d8 	strh.w	r0, [r4, #472]	; 0x1d8
    5c5c:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
    5c60:	2209      	movs	r2, #9
    5c62:	4919      	ldr	r1, [pc, #100]	; (5cc8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x5d0>)
    5c64:	f504 70e3 	add.w	r0, r4, #454	; 0x1c6
    5c68:	f008 fa8d 	bl	e186 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    5c6c:	f884 5264 	strb.w	r5, [r4, #612]	; 0x264
    5c70:	2102      	movs	r1, #2
    5c72:	4620      	mov	r0, r4
    5c74:	f7fc fc7e 	bl	2574 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    5c78:	2103      	movs	r1, #3
    5c7a:	4620      	mov	r0, r4
    5c7c:	f008 ff92 	bl	eba4 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    5c80:	f884 50a5 	strb.w	r5, [r4, #165]	; 0xa5
    5c84:	bd70      	pop	{r4, r5, r6, pc}
    5c86:	f8d4 0258 	ldr.w	r0, [r4, #600]	; 0x258
    5c8a:	f8d0 1001 	ldr.w	r1, [r0, #1]
    5c8e:	f8c4 10ae 	str.w	r1, [r4, #174]	; 0xae
    5c92:	7940      	ldrb	r0, [r0, #5]
    5c94:	f884 00b2 	strb.w	r0, [r4, #178]	; 0xb2
    5c98:	2103      	movs	r1, #3
    5c9a:	4620      	mov	r0, r4
    5c9c:	f7fc fc6a 	bl	2574 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    5ca0:	f8d4 0258 	ldr.w	r0, [r4, #600]	; 0x258
    5ca4:	7800      	ldrb	r0, [r0, #0]
    5ca6:	b148      	cbz	r0, 5cbc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x5c4>
    5ca8:	2101      	movs	r1, #1
    5caa:	20fe      	movs	r0, #254	; 0xfe
    5cac:	f001 f858 	bl	6d60 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1668>
    5cb0:	f884 50a5 	strb.w	r5, [r4, #165]	; 0xa5
    5cb4:	20ff      	movs	r0, #255	; 0xff
    5cb6:	f884 00fe 	strb.w	r0, [r4, #254]	; 0xfe
    5cba:	bd70      	pop	{r4, r5, r6, pc}
    5cbc:	f240 2152 	movw	r1, #594	; 0x252
    5cc0:	2036      	movs	r0, #54	; 0x36
    5cc2:	f7fa fedd 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5cc6:	0000      	.short	0x0000
    5cc8:	0000e5a3 	.word	0x0000e5a3
    5ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5cce:	4d28      	ldr	r5, [pc, #160]	; (5d70 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x678>)
    5cd0:	f04f 0600 	mov.w	r6, #0
    5cd4:	f105 040c 	add.w	r4, r5, #12
    5cd8:	8869      	ldrh	r1, [r5, #2]
    5cda:	0748      	lsls	r0, r1, #29
    5cdc:	d510      	bpl.n	5d00 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x608>
    5cde:	6860      	ldr	r0, [r4, #4]
    5ce0:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    5ce4:	2a03      	cmp	r2, #3
    5ce6:	d004      	beq.n	5cf2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x5fa>
    5ce8:	f890 20a7 	ldrb.w	r2, [r0, #167]	; 0xa7
    5cec:	2a06      	cmp	r2, #6
    5cee:	d107      	bne.n	5d00 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x608>
    5cf0:	e002      	b.n	5cf8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x600>
    5cf2:	f240 7109 	movw	r1, #1801	; 0x709
    5cf6:	e025      	b.n	5d44 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x64c>
    5cf8:	2201      	movs	r2, #1
    5cfa:	702a      	strb	r2, [r5, #0]
    5cfc:	f880 60a7 	strb.w	r6, [r0, #167]	; 0xa7
    5d00:	0788      	lsls	r0, r1, #30
    5d02:	d50a      	bpl.n	5d1a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x622>
    5d04:	6868      	ldr	r0, [r5, #4]
    5d06:	78c0      	ldrb	r0, [r0, #3]
    5d08:	282b      	cmp	r0, #43	; 0x2b
    5d0a:	d219      	bcs.n	5d40 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x648>
    5d0c:	4919      	ldr	r1, [pc, #100]	; (5d74 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x67c>)
    5d0e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    5d12:	b1a9      	cbz	r1, 5d40 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x648>
    5d14:	4816      	ldr	r0, [pc, #88]	; (5d70 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x678>)
    5d16:	300c      	adds	r0, #12
    5d18:	4788      	blx	r1
    5d1a:	f000 f86d 	bl	5df8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x700>
    5d1e:	f000 f82b 	bl	5d78 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x680>
    5d22:	4607      	mov	r7, r0
    5d24:	7868      	ldrb	r0, [r5, #1]
    5d26:	0700      	lsls	r0, r0, #28
    5d28:	d51c      	bpl.n	5d64 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x66c>
    5d2a:	6860      	ldr	r0, [r4, #4]
    5d2c:	2300      	movs	r3, #0
    5d2e:	2105      	movs	r1, #5
    5d30:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    5d34:	3088      	adds	r0, #136	; 0x88
    5d36:	f007 ff01 	bl	db3c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5d3a:	b130      	cbz	r0, 5d4a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x652>
    5d3c:	2708      	movs	r7, #8
    5d3e:	e011      	b.n	5d64 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x66c>
    5d40:	f640 0149 	movw	r1, #2121	; 0x849
    5d44:	2036      	movs	r0, #54	; 0x36
    5d46:	f7fa fe9b 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5d4a:	4669      	mov	r1, sp
    5d4c:	2003      	movs	r0, #3
    5d4e:	9600      	str	r6, [sp, #0]
    5d50:	f7fb fdaa 	bl	18a8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    5d54:	9800      	ldr	r0, [sp, #0]
    5d56:	b128      	cbz	r0, 5d64 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x66c>
    5d58:	7206      	strb	r6, [r0, #8]
    5d5a:	222a      	movs	r2, #42	; 0x2a
    5d5c:	6861      	ldr	r1, [r4, #4]
    5d5e:	9800      	ldr	r0, [sp, #0]
    5d60:	f008 f9fd 	bl	e15e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    5d64:	6860      	ldr	r0, [r4, #4]
    5d66:	f7ff ff49 	bl	5bfc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x504>
    5d6a:	4638      	mov	r0, r7
    5d6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5d6e:	0000      	.short	0x0000
    5d70:	200000e4 	.word	0x200000e4
    5d74:	200001a4 	.word	0x200001a4
    5d78:	b570      	push	{r4, r5, r6, lr}
    5d7a:	4c1d      	ldr	r4, [pc, #116]	; (5df0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6f8>)
    5d7c:	2000      	movs	r0, #0
    5d7e:	78a1      	ldrb	r1, [r4, #2]
    5d80:	07c9      	lsls	r1, r1, #31
    5d82:	d01d      	beq.n	5dc0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6c8>
    5d84:	68a0      	ldr	r0, [r4, #8]
    5d86:	2300      	movs	r3, #0
    5d88:	2105      	movs	r1, #5
    5d8a:	78c5      	ldrb	r5, [r0, #3]
    5d8c:	f104 000c 	add.w	r0, r4, #12
    5d90:	6840      	ldr	r0, [r0, #4]
    5d92:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    5d96:	3088      	adds	r0, #136	; 0x88
    5d98:	f007 fed0 	bl	db3c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5d9c:	b188      	cbz	r0, 5dc2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ca>
    5d9e:	2d06      	cmp	r5, #6
    5da0:	d00f      	beq.n	5dc2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ca>
    5da2:	dc06      	bgt.n	5db2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ba>
    5da4:	2d02      	cmp	r5, #2
    5da6:	d00c      	beq.n	5dc2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ca>
    5da8:	2d04      	cmp	r5, #4
    5daa:	d00a      	beq.n	5dc2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ca>
    5dac:	2d05      	cmp	r5, #5
    5dae:	d106      	bne.n	5dbe <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6c6>
    5db0:	e007      	b.n	5dc2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ca>
    5db2:	2d0b      	cmp	r5, #11
    5db4:	d005      	beq.n	5dc2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ca>
    5db6:	2d0d      	cmp	r5, #13
    5db8:	d003      	beq.n	5dc2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ca>
    5dba:	2d11      	cmp	r5, #17
    5dbc:	d001      	beq.n	5dc2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ca>
    5dbe:	2008      	movs	r0, #8
    5dc0:	bd70      	pop	{r4, r5, r6, pc}
    5dc2:	68a0      	ldr	r0, [r4, #8]
    5dc4:	f7fc fd16 	bl	27f4 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA>
    5dc8:	b160      	cbz	r0, 5de4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ec>
    5dca:	68a0      	ldr	r0, [r4, #8]
    5dcc:	78c0      	ldrb	r0, [r0, #3]
    5dce:	282b      	cmp	r0, #43	; 0x2b
    5dd0:	d208      	bcs.n	5de4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ec>
    5dd2:	4908      	ldr	r1, [pc, #32]	; (5df4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6fc>)
    5dd4:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    5dd8:	b121      	cbz	r1, 5de4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ec>
    5dda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5dde:	4804      	ldr	r0, [pc, #16]	; (5df0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6f8>)
    5de0:	300c      	adds	r0, #12
    5de2:	4708      	bx	r1
    5de4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5de8:	2000      	movs	r0, #0
    5dea:	f000 bbdf 	b.w	65ac <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xeb4>
    5dee:	0000      	.short	0x0000
    5df0:	200000e4 	.word	0x200000e4
    5df4:	200000f8 	.word	0x200000f8
    5df8:	b570      	push	{r4, r5, r6, lr}
    5dfa:	4d1a      	ldr	r5, [pc, #104]	; (5e64 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x76c>)
    5dfc:	78a8      	ldrb	r0, [r5, #2]
    5dfe:	0700      	lsls	r0, r0, #28
    5e00:	d52e      	bpl.n	5e60 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x768>
    5e02:	f105 040c 	add.w	r4, r5, #12
    5e06:	2100      	movs	r1, #0
    5e08:	6860      	ldr	r0, [r4, #4]
    5e0a:	f890 012e 	ldrb.w	r0, [r0, #302]	; 0x12e
    5e0e:	f000 ffa7 	bl	6d60 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1668>
    5e12:	6860      	ldr	r0, [r4, #4]
    5e14:	3088      	adds	r0, #136	; 0x88
    5e16:	f009 f81f 	bl	ee58 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    5e1a:	b160      	cbz	r0, 5e36 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x73e>
    5e1c:	6860      	ldr	r0, [r4, #4]
    5e1e:	21fe      	movs	r1, #254	; 0xfe
    5e20:	f880 112e 	strb.w	r1, [r0, #302]	; 0x12e
    5e24:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    5e28:	290b      	cmp	r1, #11
    5e2a:	d009      	beq.n	5e40 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x748>
    5e2c:	290d      	cmp	r1, #13
    5e2e:	d009      	beq.n	5e44 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x74c>
    5e30:	2925      	cmp	r1, #37	; 0x25
    5e32:	d10c      	bne.n	5e4e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x756>
    5e34:	e008      	b.n	5e48 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x750>
    5e36:	f640 0155 	movw	r1, #2133	; 0x855
    5e3a:	2036      	movs	r0, #54	; 0x36
    5e3c:	f7fa fe20 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5e40:	210c      	movs	r1, #12
    5e42:	e002      	b.n	5e4a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x752>
    5e44:	210e      	movs	r1, #14
    5e46:	e000      	b.n	5e4a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x752>
    5e48:	2126      	movs	r1, #38	; 0x26
    5e4a:	f880 10a5 	strb.w	r1, [r0, #165]	; 0xa5
    5e4e:	f890 10a7 	ldrb.w	r1, [r0, #167]	; 0xa7
    5e52:	2907      	cmp	r1, #7
    5e54:	d104      	bne.n	5e60 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x768>
    5e56:	2102      	movs	r1, #2
    5e58:	7029      	strb	r1, [r5, #0]
    5e5a:	2100      	movs	r1, #0
    5e5c:	f880 10a7 	strb.w	r1, [r0, #167]	; 0xa7
    5e60:	bd70      	pop	{r4, r5, r6, pc}
    5e62:	0000      	.short	0x0000
    5e64:	200000e4 	.word	0x200000e4
    5e68:	b538      	push	{r3, r4, r5, lr}
    5e6a:	4605      	mov	r5, r0
    5e6c:	4668      	mov	r0, sp
    5e6e:	f7fb fbad 	bl	15cc <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    5e72:	b348      	cbz	r0, 5ec8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x7d0>
    5e74:	2222      	movs	r2, #34	; 0x22
    5e76:	2100      	movs	r1, #0
    5e78:	9800      	ldr	r0, [sp, #0]
    5e7a:	f00a fc92 	bl	107a2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5e7e:	2103      	movs	r1, #3
    5e80:	9800      	ldr	r0, [sp, #0]
    5e82:	f008 f939 	bl	e0f8 <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    5e86:	9800      	ldr	r0, [sp, #0]
    5e88:	7801      	ldrb	r1, [r0, #0]
    5e8a:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    5e8e:	7001      	strb	r1, [r0, #0]
    5e90:	4629      	mov	r1, r5
    5e92:	f7fc fcbf 	bl	2814 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ>
    5e96:	2100      	movs	r1, #0
    5e98:	4c73      	ldr	r4, [pc, #460]	; (6068 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x970>)
    5e9a:	2d26      	cmp	r5, #38	; 0x26
    5e9c:	d277      	bcs.n	5f8e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x896>
    5e9e:	e8df f005 	tbb	[pc, r5]
    5ea2:	222a      	.short	0x222a
    5ea4:	dbdb5216 	.word	0xdbdb5216
    5ea8:	7b771cd4 	.word	0x7b771cd4
    5eac:	db6bd4d4 	.word	0xdb6bd4d4
    5eb0:	bcdbdbdb 	.word	0xbcdbdbdb
    5eb4:	8080d4d4 	.word	0x8080d4d4
    5eb8:	dba3db99 	.word	0xdba3db99
    5ebc:	dbdbdbdb 	.word	0xdbdbdbdb
    5ec0:	dbdbdbdb 	.word	0xdbdbdbdb
    5ec4:	b6b6b6db 	.word	0xb6b6b6db
    5ec8:	f640 217b 	movw	r1, #2683	; 0xa7b
    5ecc:	e0c9      	b.n	6062 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x96a>
    5ece:	6860      	ldr	r0, [r4, #4]
    5ed0:	9900      	ldr	r1, [sp, #0]
    5ed2:	f890 0139 	ldrb.w	r0, [r0, #313]	; 0x139
    5ed6:	7108      	strb	r0, [r1, #4]
    5ed8:	e0b7      	b.n	604a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    5eda:	6861      	ldr	r1, [r4, #4]
    5edc:	9800      	ldr	r0, [sp, #0]
    5ede:	f891 1130 	ldrb.w	r1, [r1, #304]	; 0x130
    5ee2:	7101      	strb	r1, [r0, #4]
    5ee4:	e0b1      	b.n	604a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    5ee6:	6860      	ldr	r0, [r4, #4]
    5ee8:	f8d0 1258 	ldr.w	r1, [r0, #600]	; 0x258
    5eec:	9800      	ldr	r0, [sp, #0]
    5eee:	1c49      	adds	r1, r1, #1
    5ef0:	f008 f893 	bl	e01a <sym_UODFQA44OAUGQWVRPEK2IIKSCIFD37IIPLUYFSI>
    5ef4:	e0a9      	b.n	604a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    5ef6:	6860      	ldr	r0, [r4, #4]
    5ef8:	9d00      	ldr	r5, [sp, #0]
    5efa:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
    5efe:	f8b0 0268 	ldrh.w	r0, [r0, #616]	; 0x268
    5f02:	f007 ff89 	bl	de18 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>
    5f06:	7128      	strb	r0, [r5, #4]
    5f08:	6860      	ldr	r0, [r4, #4]
    5f0a:	9d00      	ldr	r5, [sp, #0]
    5f0c:	f500 701b 	add.w	r0, r0, #620	; 0x26c
    5f10:	c803      	ldmia	r0, {r0, r1}
    5f12:	f007 ff6a 	bl	ddea <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>
    5f16:	7168      	strb	r0, [r5, #5]
    5f18:	0a00      	lsrs	r0, r0, #8
    5f1a:	71a8      	strb	r0, [r5, #6]
    5f1c:	6860      	ldr	r0, [r4, #4]
    5f1e:	9d00      	ldr	r5, [sp, #0]
    5f20:	f8d0 0270 	ldr.w	r0, [r0, #624]	; 0x270
    5f24:	f007 fdf1 	bl	db0a <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    5f28:	71e8      	strb	r0, [r5, #7]
    5f2a:	0a00      	lsrs	r0, r0, #8
    5f2c:	7228      	strb	r0, [r5, #8]
    5f2e:	6862      	ldr	r2, [r4, #4]
    5f30:	9800      	ldr	r0, [sp, #0]
    5f32:	f8b2 1274 	ldrh.w	r1, [r2, #628]	; 0x274
    5f36:	7241      	strb	r1, [r0, #9]
    5f38:	0a09      	lsrs	r1, r1, #8
    5f3a:	7281      	strb	r1, [r0, #10]
    5f3c:	f8b2 1276 	ldrh.w	r1, [r2, #630]	; 0x276
    5f40:	f008 f870 	bl	e024 <sym_ZZDNF2NNUMTRE4Y6NUTK3CJU3EQI64HKYHSTDAI>
    5f44:	e081      	b.n	604a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    5f46:	6861      	ldr	r1, [r4, #4]
    5f48:	9800      	ldr	r0, [sp, #0]
    5f4a:	f201 2179 	addw	r1, r1, #633	; 0x279
    5f4e:	f008 f87e 	bl	e04e <sym_NSDJKDRKPUUB5EAI3OMDTFOWZBLYJSPI3VQSNXQ>
    5f52:	6861      	ldr	r1, [r4, #4]
    5f54:	9800      	ldr	r0, [sp, #0]
    5f56:	f201 2181 	addw	r1, r1, #641	; 0x281
    5f5a:	f008 f871 	bl	e040 <sym_ZLXXGUFNBKYTUHSDKKKU4A6O7RMXODI4OQA6IUY>
    5f5e:	6861      	ldr	r1, [r4, #4]
    5f60:	9800      	ldr	r0, [sp, #0]
    5f62:	f201 2193 	addw	r1, r1, #659	; 0x293
    5f66:	f008 f877 	bl	e058 <sym_LPOR4PC6XUIXDNEKJLY3JL3BKNV2UZG2OR7FAKQ>
    5f6a:	6861      	ldr	r1, [r4, #4]
    5f6c:	9800      	ldr	r0, [sp, #0]
    5f6e:	f501 7190 	add.w	r1, r1, #288	; 0x120
    5f72:	f008 f868 	bl	e046 <sym_3LF2RG2XP7QRT5FAEZFOPL4L5RIBP3MCQ5PY7XY>
    5f76:	e068      	b.n	604a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    5f78:	9800      	ldr	r0, [sp, #0]
    5f7a:	220c      	movs	r2, #12
    5f7c:	7102      	strb	r2, [r0, #4]
    5f7e:	2259      	movs	r2, #89	; 0x59
    5f80:	7142      	strb	r2, [r0, #5]
    5f82:	7181      	strb	r1, [r0, #6]
    5f84:	214b      	movs	r1, #75	; 0x4b
    5f86:	71c1      	strb	r1, [r0, #7]
    5f88:	2112      	movs	r1, #18
    5f8a:	7201      	strb	r1, [r0, #8]
    5f8c:	e05d      	b.n	604a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    5f8e:	e063      	b.n	6058 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x960>
    5f90:	9800      	ldr	r0, [sp, #0]
    5f92:	f7fc ff73 	bl	2e7c <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY>
    5f96:	e058      	b.n	604a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    5f98:	4833      	ldr	r0, [pc, #204]	; (6068 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x970>)
    5f9a:	9900      	ldr	r1, [sp, #0]
    5f9c:	f7fc ffc2 	bl	2f24 <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ>
    5fa0:	e053      	b.n	604a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    5fa2:	6860      	ldr	r0, [r4, #4]
    5fa4:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
    5fa8:	9800      	ldr	r0, [sp, #0]
    5faa:	f008 f8b5 	bl	e118 <sym_5NOMYYLIL22YATRZCGPQVOYH6BFSDNIEMEEMIZA>
    5fae:	6860      	ldr	r0, [r4, #4]
    5fb0:	f8b0 1130 	ldrh.w	r1, [r0, #304]	; 0x130
    5fb4:	9800      	ldr	r0, [sp, #0]
    5fb6:	f008 f8b3 	bl	e120 <sym_BD2MQHSWE7QNCT7DV5JGZCA5J2QIL2T6RGRVJ3Y>
    5fba:	6860      	ldr	r0, [r4, #4]
    5fbc:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
    5fc0:	9800      	ldr	r0, [sp, #0]
    5fc2:	f008 f8a1 	bl	e108 <sym_XW2AJRDPRGLPOQ7S6SBIDHJSPT737QJRC7LOWOI>
    5fc6:	6860      	ldr	r0, [r4, #4]
    5fc8:	f8b0 1132 	ldrh.w	r1, [r0, #306]	; 0x132
    5fcc:	9800      	ldr	r0, [sp, #0]
    5fce:	f008 f89f 	bl	e110 <sym_LKCMUIZAJSOHIZE54V37DJ4ULJ25HGEY7F7ST5I>
    5fd2:	e03a      	b.n	604a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    5fd4:	6861      	ldr	r1, [r4, #4]
    5fd6:	9800      	ldr	r0, [sp, #0]
    5fd8:	f891 1146 	ldrb.w	r1, [r1, #326]	; 0x146
    5fdc:	7101      	strb	r1, [r0, #4]
    5fde:	6861      	ldr	r1, [r4, #4]
    5fe0:	f891 1147 	ldrb.w	r1, [r1, #327]	; 0x147
    5fe4:	7141      	strb	r1, [r0, #5]
    5fe6:	e030      	b.n	604a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    5fe8:	6860      	ldr	r0, [r4, #4]
    5fea:	f890 0263 	ldrb.w	r0, [r0, #611]	; 0x263
    5fee:	f007 fe5a 	bl	dca6 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ>
    5ff2:	4601      	mov	r1, r0
    5ff4:	9800      	ldr	r0, [sp, #0]
    5ff6:	f008 f86b 	bl	e0d0 <sym_SG4OPFPHWHCVU6FHRG2ZQ5GV7RHUGBHEKN6N55A>
    5ffa:	6860      	ldr	r0, [r4, #4]
    5ffc:	f890 0262 	ldrb.w	r0, [r0, #610]	; 0x262
    6000:	f007 fe51 	bl	dca6 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ>
    6004:	4601      	mov	r1, r0
    6006:	9800      	ldr	r0, [sp, #0]
    6008:	f008 f860 	bl	e0cc <sym_SAWOREXGWRJNX5IOUMHBRACZ6DWRXOAHPPFX4TA>
    600c:	e01d      	b.n	604a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    600e:	4a16      	ldr	r2, [pc, #88]	; (6068 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x970>)
    6010:	4628      	mov	r0, r5
    6012:	9900      	ldr	r1, [sp, #0]
    6014:	f009 f951 	bl	f2ba <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ>
    6018:	e017      	b.n	604a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    601a:	6860      	ldr	r0, [r4, #4]
    601c:	f890 1130 	ldrb.w	r1, [r0, #304]	; 0x130
    6020:	b141      	cbz	r1, 6034 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x93c>
    6022:	f890 112d 	ldrb.w	r1, [r0, #301]	; 0x12d
    6026:	9800      	ldr	r0, [sp, #0]
    6028:	f008 f860 	bl	e0ec <sym_YMBI57OSTLFK65WQKT7WKM26EFMSOHLSMFNNR4I>
    602c:	6860      	ldr	r0, [r4, #4]
    602e:	f890 112c 	ldrb.w	r1, [r0, #300]	; 0x12c
    6032:	e007      	b.n	6044 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x94c>
    6034:	f890 112b 	ldrb.w	r1, [r0, #299]	; 0x12b
    6038:	9800      	ldr	r0, [sp, #0]
    603a:	f008 f857 	bl	e0ec <sym_YMBI57OSTLFK65WQKT7WKM26EFMSOHLSMFNNR4I>
    603e:	6860      	ldr	r0, [r4, #4]
    6040:	f890 112a 	ldrb.w	r1, [r0, #298]	; 0x12a
    6044:	9800      	ldr	r0, [sp, #0]
    6046:	f008 f855 	bl	e0f4 <sym_HAHVMCZ4V2U4G5KM2JOTYBKS4GFM72EJZRT7M3A>
    604a:	f7fb fa99 	bl	1580 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    604e:	b130      	cbz	r0, 605e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x966>
    6050:	9800      	ldr	r0, [sp, #0]
    6052:	f7ff fbcd 	bl	57f0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf8>
    6056:	bd38      	pop	{r3, r4, r5, pc}
    6058:	f640 314e 	movw	r1, #2894	; 0xb4e
    605c:	e001      	b.n	6062 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x96a>
    605e:	f640 3154 	movw	r1, #2900	; 0xb54
    6062:	2036      	movs	r0, #54	; 0x36
    6064:	f7fa fd0c 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6068:	200000f0 	.word	0x200000f0
    606c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6070:	4e28      	ldr	r6, [pc, #160]	; (6114 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa1c>)
    6072:	4680      	mov	r8, r0
    6074:	460d      	mov	r5, r1
    6076:	8870      	ldrh	r0, [r6, #2]
    6078:	f106 040c 	add.w	r4, r6, #12
    607c:	05c1      	lsls	r1, r0, #23
    607e:	6860      	ldr	r0, [r4, #4]
    6080:	f04f 0700 	mov.w	r7, #0
    6084:	d502      	bpl.n	608c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x994>
    6086:	f8a0 70d6 	strh.w	r7, [r0, #214]	; 0xd6
    608a:	e004      	b.n	6096 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x99e>
    608c:	f8b0 10d6 	ldrh.w	r1, [r0, #214]	; 0xd6
    6090:	1c49      	adds	r1, r1, #1
    6092:	f8a0 10d6 	strh.w	r1, [r0, #214]	; 0xd6
    6096:	f009 f8d5 	bl	f244 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x408>
    609a:	b1f0      	cbz	r0, 60da <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9e2>
    609c:	8870      	ldrh	r0, [r6, #2]
    609e:	0500      	lsls	r0, r0, #20
    60a0:	d506      	bpl.n	60b0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9b8>
    60a2:	6860      	ldr	r0, [r4, #4]
    60a4:	f890 10ab 	ldrb.w	r1, [r0, #171]	; 0xab
    60a8:	b111      	cbz	r1, 60b0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9b8>
    60aa:	f8c0 70c8 	str.w	r7, [r0, #200]	; 0xc8
    60ae:	e014      	b.n	60da <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9e2>
    60b0:	6860      	ldr	r0, [r4, #4]
    60b2:	f8d0 10c8 	ldr.w	r1, [r0, #200]	; 0xc8
    60b6:	1c49      	adds	r1, r1, #1
    60b8:	f8c0 10c8 	str.w	r1, [r0, #200]	; 0xc8
    60bc:	f008 feed 	bl	ee9a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5e>
    60c0:	6860      	ldr	r0, [r4, #4]
    60c2:	e9d0 1232 	ldrd	r1, r2, [r0, #200]	; 0xc8
    60c6:	4291      	cmp	r1, r2
    60c8:	d307      	bcc.n	60da <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9e2>
    60ca:	f8c0 70c8 	str.w	r7, [r0, #200]	; 0xc8
    60ce:	220f      	movs	r2, #15
    60d0:	4911      	ldr	r1, [pc, #68]	; (6118 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa20>)
    60d2:	f500 70b0 	add.w	r0, r0, #352	; 0x160
    60d6:	f008 f856 	bl	e186 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    60da:	8870      	ldrh	r0, [r6, #2]
    60dc:	f410 7f40 	tst.w	r0, #768	; 0x300
    60e0:	d008      	beq.n	60f4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9fc>
    60e2:	6860      	ldr	r0, [r4, #4]
    60e4:	f890 10a9 	ldrb.w	r1, [r0, #169]	; 0xa9
    60e8:	b921      	cbnz	r1, 60f4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9fc>
    60ea:	2101      	movs	r1, #1
    60ec:	f880 10a9 	strb.w	r1, [r0, #169]	; 0xa9
    60f0:	f008 fd58 	bl	eba4 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    60f4:	ea58 0005 	orrs.w	r0, r8, r5
    60f8:	d104      	bne.n	6104 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa0c>
    60fa:	f7ff fde7 	bl	5ccc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x5d4>
    60fe:	4605      	mov	r5, r0
    6100:	f7ff fc04 	bl	590c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x214>
    6104:	4629      	mov	r1, r5
    6106:	4640      	mov	r0, r8
    6108:	f000 fd36 	bl	6b78 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1480>
    610c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6110:	f7fb ba20 	b.w	1554 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    6114:	200000e4 	.word	0x200000e4
    6118:	0000e67d 	.word	0x0000e67d
    611c:	4813      	ldr	r0, [pc, #76]	; (616c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa74>)
    611e:	6840      	ldr	r0, [r0, #4]
    6120:	f890 10e0 	ldrb.w	r1, [r0, #224]	; 0xe0
    6124:	b129      	cbz	r1, 6132 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa3a>
    6126:	f8b0 10dc 	ldrh.w	r1, [r0, #220]	; 0xdc
    612a:	f8b0 20de 	ldrh.w	r2, [r0, #222]	; 0xde
    612e:	4291      	cmp	r1, r2
    6130:	d215      	bcs.n	615e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa66>
    6132:	f890 10e4 	ldrb.w	r1, [r0, #228]	; 0xe4
    6136:	b129      	cbz	r1, 6144 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa4c>
    6138:	f8b0 10e2 	ldrh.w	r1, [r0, #226]	; 0xe2
    613c:	f8b0 20de 	ldrh.w	r2, [r0, #222]	; 0xde
    6140:	4291      	cmp	r1, r2
    6142:	d20c      	bcs.n	615e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa66>
    6144:	f8b0 20da 	ldrh.w	r2, [r0, #218]	; 0xda
    6148:	f8b0 10d8 	ldrh.w	r1, [r0, #216]	; 0xd8
    614c:	428a      	cmp	r2, r1
    614e:	d206      	bcs.n	615e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa66>
    6150:	f890 20a9 	ldrb.w	r2, [r0, #169]	; 0xa9
    6154:	f8b0 00d6 	ldrh.w	r0, [r0, #214]	; 0xd6
    6158:	b11a      	cbz	r2, 6162 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa6a>
    615a:	4288      	cmp	r0, r1
    615c:	d303      	bcc.n	6166 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa6e>
    615e:	2001      	movs	r0, #1
    6160:	4770      	bx	lr
    6162:	2806      	cmp	r0, #6
    6164:	d2fb      	bcs.n	615e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa66>
    6166:	2000      	movs	r0, #0
    6168:	4770      	bx	lr
    616a:	0000      	.short	0x0000
    616c:	200000f0 	.word	0x200000f0
    6170:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    6172:	4c63      	ldr	r4, [pc, #396]	; (6300 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc08>)
    6174:	6860      	ldr	r0, [r4, #4]
    6176:	f890 1264 	ldrb.w	r1, [r0, #612]	; 0x264
    617a:	f88d 1000 	strb.w	r1, [sp]
    617e:	9900      	ldr	r1, [sp, #0]
    6180:	9100      	str	r1, [sp, #0]
    6182:	f89d 1000 	ldrb.w	r1, [sp]
    6186:	2500      	movs	r5, #0
    6188:	b129      	cbz	r1, 6196 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa9e>
    618a:	f890 00a6 	ldrb.w	r0, [r0, #166]	; 0xa6
    618e:	f007 fd38 	bl	dc02 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    6192:	2800      	cmp	r0, #0
    6194:	d07d      	beq.n	6292 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb9a>
    6196:	6860      	ldr	r0, [r4, #4]
    6198:	f890 1278 	ldrb.w	r1, [r0, #632]	; 0x278
    619c:	b181      	cbz	r1, 61c0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xac8>
    619e:	f890 10aa 	ldrb.w	r1, [r0, #170]	; 0xaa
    61a2:	b149      	cbz	r1, 61b8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xac0>
    61a4:	f890 00ab 	ldrb.w	r0, [r0, #171]	; 0xab
    61a8:	b108      	cbz	r0, 61ae <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xab6>
    61aa:	200a      	movs	r0, #10
    61ac:	e071      	b.n	6292 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb9a>
    61ae:	f640 01dc 	movw	r1, #2268	; 0x8dc
    61b2:	2036      	movs	r0, #54	; 0x36
    61b4:	f7fa fc64 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    61b8:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    61bc:	f000 b8a2 	b.w	6304 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc0c>
    61c0:	f890 114b 	ldrb.w	r1, [r0, #331]	; 0x14b
    61c4:	b109      	cbz	r1, 61ca <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xad2>
    61c6:	2008      	movs	r0, #8
    61c8:	e063      	b.n	6292 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb9a>
    61ca:	f890 114a 	ldrb.w	r1, [r0, #330]	; 0x14a
    61ce:	b179      	cbz	r1, 61f0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xaf8>
    61d0:	f890 00e7 	ldrb.w	r0, [r0, #231]	; 0xe7
    61d4:	0780      	lsls	r0, r0, #30
    61d6:	d10a      	bne.n	61ee <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xaf6>
    61d8:	200c      	movs	r0, #12
    61da:	f000 f981 	bl	64e0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    61de:	6860      	ldr	r0, [r4, #4]
    61e0:	f810 1fe7 	ldrb.w	r1, [r0, #231]!
    61e4:	f041 0101 	orr.w	r1, r1, #1
    61e8:	7001      	strb	r1, [r0, #0]
    61ea:	f880 5063 	strb.w	r5, [r0, #99]	; 0x63
    61ee:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    61f0:	f890 113a 	ldrb.w	r1, [r0, #314]	; 0x13a
    61f4:	f88d 1004 	strb.w	r1, [sp, #4]
    61f8:	9901      	ldr	r1, [sp, #4]
    61fa:	9101      	str	r1, [sp, #4]
    61fc:	f89d 1004 	ldrb.w	r1, [sp, #4]
    6200:	b141      	cbz	r1, 6214 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb1c>
    6202:	f890 113b 	ldrb.w	r1, [r0, #315]	; 0x13b
    6206:	f88d 1000 	strb.w	r1, [sp]
    620a:	9900      	ldr	r1, [sp, #0]
    620c:	9100      	str	r1, [sp, #0]
    620e:	f89d 1000 	ldrb.w	r1, [sp]
    6212:	b121      	cbz	r1, 621e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb26>
    6214:	f890 1144 	ldrb.w	r1, [r0, #324]	; 0x144
    6218:	2901      	cmp	r1, #1
    621a:	d021      	beq.n	6260 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb68>
    621c:	e02e      	b.n	627c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb84>
    621e:	f890 10a6 	ldrb.w	r1, [r0, #166]	; 0xa6
    6222:	2925      	cmp	r1, #37	; 0x25
    6224:	d01a      	beq.n	625c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb64>
    6226:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    622a:	2925      	cmp	r1, #37	; 0x25
    622c:	d016      	beq.n	625c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb64>
    622e:	2926      	cmp	r1, #38	; 0x26
    6230:	d014      	beq.n	625c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb64>
    6232:	2300      	movs	r3, #0
    6234:	f200 2262 	addw	r2, r0, #610	; 0x262
    6238:	f500 719d 	add.w	r1, r0, #314	; 0x13a
    623c:	f007 ffb9 	bl	e1b2 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    6240:	6860      	ldr	r0, [r4, #4]
    6242:	f880 513a 	strb.w	r5, [r0, #314]	; 0x13a
    6246:	6861      	ldr	r1, [r4, #4]
    6248:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    624c:	8bc2      	ldrh	r2, [r0, #30]
    624e:	f8a1 2130 	strh.w	r2, [r1, #304]	; 0x130
    6252:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    6254:	f8a1 0132 	strh.w	r0, [r1, #306]	; 0x132
    6258:	2014      	movs	r0, #20
    625a:	e01a      	b.n	6292 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb9a>
    625c:	2301      	movs	r3, #1
    625e:	e7e9      	b.n	6234 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb3c>
    6260:	f890 1145 	ldrb.w	r1, [r0, #325]	; 0x145
    6264:	f88d 1000 	strb.w	r1, [sp]
    6268:	9900      	ldr	r1, [sp, #0]
    626a:	9100      	str	r1, [sp, #0]
    626c:	f89d 1000 	ldrb.w	r1, [sp]
    6270:	b921      	cbnz	r1, 627c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb84>
    6272:	f890 00a6 	ldrb.w	r0, [r0, #166]	; 0xa6
    6276:	f007 fcc4 	bl	dc02 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    627a:	b170      	cbz	r0, 629a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xba2>
    627c:	6860      	ldr	r0, [r4, #4]
    627e:	f890 1151 	ldrb.w	r1, [r0, #337]	; 0x151
    6282:	f88d 1000 	strb.w	r1, [sp]
    6286:	9900      	ldr	r1, [sp, #0]
    6288:	9100      	str	r1, [sp, #0]
    628a:	f89d 1000 	ldrb.w	r1, [sp]
    628e:	b329      	cbz	r1, 62dc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xbe4>
    6290:	2023      	movs	r0, #35	; 0x23
    6292:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    6296:	f000 b923 	b.w	64e0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    629a:	6860      	ldr	r0, [r4, #4]
    629c:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    62a0:	f008 fde2 	bl	ee68 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    62a4:	4605      	mov	r5, r0
    62a6:	6860      	ldr	r0, [r4, #4]
    62a8:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    62ac:	f008 fddc 	bl	ee68 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    62b0:	4606      	mov	r6, r0
    62b2:	6860      	ldr	r0, [r4, #4]
    62b4:	f890 1146 	ldrb.w	r1, [r0, #326]	; 0x146
    62b8:	4628      	mov	r0, r5
    62ba:	f008 fde0 	bl	ee7e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x42>
    62be:	b158      	cbz	r0, 62d8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xbe0>
    62c0:	6860      	ldr	r0, [r4, #4]
    62c2:	f890 1147 	ldrb.w	r1, [r0, #327]	; 0x147
    62c6:	4630      	mov	r0, r6
    62c8:	f008 fdd9 	bl	ee7e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x42>
    62cc:	b120      	cbz	r0, 62d8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xbe0>
    62ce:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    62d2:	2000      	movs	r0, #0
    62d4:	f000 b8de 	b.w	6494 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd9c>
    62d8:	2016      	movs	r0, #22
    62da:	e7da      	b.n	6292 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb9a>
    62dc:	f890 014e 	ldrb.w	r0, [r0, #334]	; 0x14e
    62e0:	f88d 0000 	strb.w	r0, [sp]
    62e4:	9800      	ldr	r0, [sp, #0]
    62e6:	9000      	str	r0, [sp, #0]
    62e8:	f89d 0000 	ldrb.w	r0, [sp]
    62ec:	2800      	cmp	r0, #0
    62ee:	f43f af7e 	beq.w	61ee <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xaf6>
    62f2:	2025      	movs	r0, #37	; 0x25
    62f4:	f000 f8f4 	bl	64e0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    62f8:	6860      	ldr	r0, [r4, #4]
    62fa:	f880 514e 	strb.w	r5, [r0, #334]	; 0x14e
    62fe:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    6300:	200000f0 	.word	0x200000f0
    6304:	b510      	push	{r4, lr}
    6306:	4c1e      	ldr	r4, [pc, #120]	; (6380 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc88>)
    6308:	6862      	ldr	r2, [r4, #4]
    630a:	f892 0134 	ldrb.w	r0, [r2, #308]	; 0x134
    630e:	2808      	cmp	r0, #8
    6310:	d20d      	bcs.n	632e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc36>
    6312:	f1c0 0108 	rsb	r1, r0, #8
    6316:	f200 2093 	addw	r0, r0, #659	; 0x293
    631a:	b2c9      	uxtb	r1, r1
    631c:	4410      	add	r0, r2
    631e:	f7fa fc41 	bl	ba4 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    6322:	6861      	ldr	r1, [r4, #4]
    6324:	f891 2134 	ldrb.w	r2, [r1, #308]	; 0x134
    6328:	4410      	add	r0, r2
    632a:	f881 0134 	strb.w	r0, [r1, #308]	; 0x134
    632e:	6862      	ldr	r2, [r4, #4]
    6330:	f892 0134 	ldrb.w	r0, [r2, #308]	; 0x134
    6334:	3808      	subs	r0, #8
    6336:	2804      	cmp	r0, #4
    6338:	d20d      	bcs.n	6356 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc5e>
    633a:	f1c0 0104 	rsb	r1, r0, #4
    633e:	f500 7090 	add.w	r0, r0, #288	; 0x120
    6342:	b2c9      	uxtb	r1, r1
    6344:	4410      	add	r0, r2
    6346:	f7fa fc2d 	bl	ba4 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    634a:	6861      	ldr	r1, [r4, #4]
    634c:	f891 2134 	ldrb.w	r2, [r1, #308]	; 0x134
    6350:	4410      	add	r0, r2
    6352:	f881 0134 	strb.w	r0, [r1, #308]	; 0x134
    6356:	6860      	ldr	r0, [r4, #4]
    6358:	f890 1134 	ldrb.w	r1, [r0, #308]	; 0x134
    635c:	290c      	cmp	r1, #12
    635e:	d30e      	bcc.n	637e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc86>
    6360:	d005      	beq.n	636e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc76>
    6362:	f640 31c5 	movw	r1, #3013	; 0xbc5
    6366:	f04f 0036 	mov.w	r0, #54	; 0x36
    636a:	f7fa fb89 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    636e:	2100      	movs	r1, #0
    6370:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
    6374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6378:	2003      	movs	r0, #3
    637a:	f000 b8b1 	b.w	64e0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    637e:	bd10      	pop	{r4, pc}
    6380:	200000f0 	.word	0x200000f0
    6384:	b570      	push	{r4, r5, r6, lr}
    6386:	4b20      	ldr	r3, [pc, #128]	; (6408 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd10>)
    6388:	4602      	mov	r2, r0
    638a:	460c      	mov	r4, r1
    638c:	8858      	ldrh	r0, [r3, #2]
    638e:	4310      	orrs	r0, r2
    6390:	8058      	strh	r0, [r3, #2]
    6392:	f103 000c 	add.w	r0, r3, #12
    6396:	0791      	lsls	r1, r2, #30
    6398:	6840      	ldr	r0, [r0, #4]
    639a:	ea4f 71c2 	mov.w	r1, r2, lsl #31
    639e:	d507      	bpl.n	63b0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcb8>
    63a0:	b121      	cbz	r1, 63ac <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcb4>
    63a2:	f640 41cc 	movw	r1, #3276	; 0xccc
    63a6:	2036      	movs	r0, #54	; 0x36
    63a8:	f7fa fb6a 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    63ac:	605c      	str	r4, [r3, #4]
    63ae:	e003      	b.n	63b8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcc0>
    63b0:	b101      	cbz	r1, 63b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcbc>
    63b2:	609c      	str	r4, [r3, #8]
    63b4:	0791      	lsls	r1, r2, #30
    63b6:	d515      	bpl.n	63e4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcec>
    63b8:	78e1      	ldrb	r1, [r4, #3]
    63ba:	2906      	cmp	r1, #6
    63bc:	d002      	beq.n	63c4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xccc>
    63be:	290b      	cmp	r1, #11
    63c0:	d110      	bne.n	63e4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcec>
    63c2:	e008      	b.n	63d6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcde>
    63c4:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    63c8:	2919      	cmp	r1, #25
    63ca:	d10b      	bne.n	63e4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcec>
    63cc:	2100      	movs	r1, #0
    63ce:	e9c0 1142 	strd	r1, r1, [r0, #264]	; 0x108
    63d2:	2101      	movs	r1, #1
    63d4:	e004      	b.n	63e0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xce8>
    63d6:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    63da:	2913      	cmp	r1, #19
    63dc:	d102      	bne.n	63e4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcec>
    63de:	2100      	movs	r1, #0
    63e0:	f880 10ab 	strb.w	r1, [r0, #171]	; 0xab
    63e4:	0691      	lsls	r1, r2, #26
    63e6:	d501      	bpl.n	63ec <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcf4>
    63e8:	2108      	movs	r1, #8
    63ea:	7059      	strb	r1, [r3, #1]
    63ec:	0611      	lsls	r1, r2, #24
    63ee:	d50a      	bpl.n	6406 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd0e>
    63f0:	8b02      	ldrh	r2, [r0, #24]
    63f2:	f8b0 109c 	ldrh.w	r1, [r0, #156]	; 0x9c
    63f6:	4620      	mov	r0, r4
    63f8:	f7ff f9dc 	bl	57b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xbc>
    63fc:	4620      	mov	r0, r4
    63fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6402:	f7ff b9f5 	b.w	57f0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf8>
    6406:	bd70      	pop	{r4, r5, r6, pc}
    6408:	200000e4 	.word	0x200000e4
    640c:	b570      	push	{r4, r5, r6, lr}
    640e:	4c20      	ldr	r4, [pc, #128]	; (6490 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd98>)
    6410:	2501      	movs	r5, #1
    6412:	6862      	ldr	r2, [r4, #4]
    6414:	f892 1262 	ldrb.w	r1, [r2, #610]	; 0x262
    6418:	b909      	cbnz	r1, 641e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd26>
    641a:	f892 106a 	ldrb.w	r1, [r2, #106]	; 0x6a
    641e:	f892 0263 	ldrb.w	r0, [r2, #611]	; 0x263
    6422:	b908      	cbnz	r0, 6428 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd30>
    6424:	f892 006b 	ldrb.w	r0, [r2, #107]	; 0x6b
    6428:	f102 0362 	add.w	r3, r2, #98	; 0x62
    642c:	7219      	strb	r1, [r3, #8]
    642e:	7258      	strb	r0, [r3, #9]
    6430:	20ff      	movs	r0, #255	; 0xff
    6432:	7298      	strb	r0, [r3, #10]
    6434:	4610      	mov	r0, r2
    6436:	f009 f804 	bl	f442 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY>
    643a:	2000      	movs	r0, #0
    643c:	f000 f82a 	bl	6494 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd9c>
    6440:	6860      	ldr	r0, [r4, #4]
    6442:	302c      	adds	r0, #44	; 0x2c
    6444:	f007 ff24 	bl	e290 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    6448:	4606      	mov	r6, r0
    644a:	6860      	ldr	r0, [r4, #4]
    644c:	f007 fecc 	bl	e1e8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    6450:	b130      	cbz	r0, 6460 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd68>
    6452:	6861      	ldr	r1, [r4, #4]
    6454:	f501 72b5 	add.w	r2, r1, #362	; 0x16a
    6458:	f831 0b2c 	ldrh.w	r0, [r1], #44
    645c:	f7fc fc20 	bl	2ca0 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    6460:	2104      	movs	r1, #4
    6462:	6860      	ldr	r0, [r4, #4]
    6464:	f008 fb9e 	bl	eba4 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    6468:	6860      	ldr	r0, [r4, #4]
    646a:	302c      	adds	r0, #44	; 0x2c
    646c:	f007 ff10 	bl	e290 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    6470:	4604      	mov	r4, r0
    6472:	42a6      	cmp	r6, r4
    6474:	d20a      	bcs.n	648c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd94>
    6476:	f003 fddf 	bl	a038 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>
    647a:	4601      	mov	r1, r0
    647c:	1ba0      	subs	r0, r4, r6
    647e:	2865      	cmp	r0, #101	; 0x65
    6480:	d200      	bcs.n	6484 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd8c>
    6482:	2065      	movs	r0, #101	; 0x65
    6484:	f003 fcae 	bl	9de4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    6488:	b100      	cbz	r0, 648c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd94>
    648a:	2500      	movs	r5, #0
    648c:	4628      	mov	r0, r5
    648e:	bd70      	pop	{r4, r5, r6, pc}
    6490:	200000f0 	.word	0x200000f0
    6494:	b510      	push	{r4, lr}
    6496:	4c10      	ldr	r4, [pc, #64]	; (64d8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde0>)
    6498:	6861      	ldr	r1, [r4, #4]
    649a:	880a      	ldrh	r2, [r1, #0]
    649c:	f8a1 21ae 	strh.w	r2, [r1, #430]	; 0x1ae
    64a0:	f881 01ac 	strb.w	r0, [r1, #428]	; 0x1ac
    64a4:	f891 006a 	ldrb.w	r0, [r1, #106]	; 0x6a
    64a8:	f008 fcde 	bl	ee68 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    64ac:	6861      	ldr	r1, [r4, #4]
    64ae:	f881 01b0 	strb.w	r0, [r1, #432]	; 0x1b0
    64b2:	f891 006b 	ldrb.w	r0, [r1, #107]	; 0x6b
    64b6:	f008 fcd7 	bl	ee68 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    64ba:	6863      	ldr	r3, [r4, #4]
    64bc:	2215      	movs	r2, #21
    64be:	4907      	ldr	r1, [pc, #28]	; (64dc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde4>)
    64c0:	f883 01b1 	strb.w	r0, [r3, #433]	; 0x1b1
    64c4:	f503 70d1 	add.w	r0, r3, #418	; 0x1a2
    64c8:	f007 fe5d 	bl	e186 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    64cc:	6861      	ldr	r1, [r4, #4]
    64ce:	2000      	movs	r0, #0
    64d0:	f881 0144 	strb.w	r0, [r1, #324]	; 0x144
    64d4:	bd10      	pop	{r4, pc}
    64d6:	0000      	.short	0x0000
    64d8:	200000f0 	.word	0x200000f0
    64dc:	000101c9 	.word	0x000101c9
    64e0:	4902      	ldr	r1, [pc, #8]	; (64ec <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xdf4>)
    64e2:	6849      	ldr	r1, [r1, #4]
    64e4:	f881 012e 	strb.w	r0, [r1, #302]	; 0x12e
    64e8:	f000 bb10 	b.w	6b0c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1414>
    64ec:	200000f0 	.word	0x200000f0
    64f0:	4903      	ldr	r1, [pc, #12]	; (6500 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe08>)
    64f2:	6849      	ldr	r1, [r1, #4]
    64f4:	f881 0130 	strb.w	r0, [r1, #304]	; 0x130
    64f8:	2011      	movs	r0, #17
    64fa:	f7ff bff1 	b.w	64e0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    64fe:	0000      	.short	0x0000
    6500:	200000f0 	.word	0x200000f0
    6504:	b538      	push	{r3, r4, r5, lr}
    6506:	4c11      	ldr	r4, [pc, #68]	; (654c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe54>)
    6508:	6862      	ldr	r2, [r4, #4]
    650a:	f8b2 206a 	ldrh.w	r2, [r2, #106]	; 0x6a
    650e:	f8ad 2000 	strh.w	r2, [sp]
    6512:	f007 fbef 	bl	dcf4 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ>
    6516:	f89d 3000 	ldrb.w	r3, [sp]
    651a:	b2c2      	uxtb	r2, r0
    651c:	2100      	movs	r1, #0
    651e:	4293      	cmp	r3, r2
    6520:	d003      	beq.n	652a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe32>
    6522:	6863      	ldr	r3, [r4, #4]
    6524:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
    6528:	e002      	b.n	6530 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe38>
    652a:	6862      	ldr	r2, [r4, #4]
    652c:	f882 1262 	strb.w	r1, [r2, #610]	; 0x262
    6530:	f89d 2001 	ldrb.w	r2, [sp, #1]
    6534:	f3c0 2007 	ubfx	r0, r0, #8, #8
    6538:	4282      	cmp	r2, r0
    653a:	d003      	beq.n	6544 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe4c>
    653c:	6861      	ldr	r1, [r4, #4]
    653e:	f881 0263 	strb.w	r0, [r1, #611]	; 0x263
    6542:	bd38      	pop	{r3, r4, r5, pc}
    6544:	6860      	ldr	r0, [r4, #4]
    6546:	f880 1263 	strb.w	r1, [r0, #611]	; 0x263
    654a:	bd38      	pop	{r3, r4, r5, pc}
    654c:	200000f0 	.word	0x200000f0
    6550:	4a03      	ldr	r2, [pc, #12]	; (6560 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe68>)
    6552:	6852      	ldr	r2, [r2, #4]
    6554:	f882 012a 	strb.w	r0, [r2, #298]	; 0x12a
    6558:	f882 112b 	strb.w	r1, [r2, #299]	; 0x12b
    655c:	4770      	bx	lr
    655e:	0000      	.short	0x0000
    6560:	200000f0 	.word	0x200000f0
    6564:	b570      	push	{r4, r5, r6, lr}
    6566:	6841      	ldr	r1, [r0, #4]
    6568:	4604      	mov	r4, r0
    656a:	f891 00a5 	ldrb.w	r0, [r1, #165]	; 0xa5
    656e:	2814      	cmp	r0, #20
    6570:	d001      	beq.n	6576 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe7e>
    6572:	2002      	movs	r0, #2
    6574:	bd70      	pop	{r4, r5, r6, pc}
    6576:	4d09      	ldr	r5, [pc, #36]	; (659c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xea4>)
    6578:	f201 219b 	addw	r1, r1, #667	; 0x29b
    657c:	68a8      	ldr	r0, [r5, #8]
    657e:	f007 fd74 	bl	e06a <sym_G3E5J3DBBC3WRZ26KQDVAZEPSZL4FITDNFKJBAY>
    6582:	6861      	ldr	r1, [r4, #4]
    6584:	68a8      	ldr	r0, [r5, #8]
    6586:	f501 7192 	add.w	r1, r1, #292	; 0x124
    658a:	f007 fd6b 	bl	e064 <sym_RHFWG2VAMMSM6HNQIXGIQMU7QUNXB2XIV4NQREY>
    658e:	6861      	ldr	r1, [r4, #4]
    6590:	2017      	movs	r0, #23
    6592:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    6596:	2000      	movs	r0, #0
    6598:	bd70      	pop	{r4, r5, r6, pc}
    659a:	0000      	.short	0x0000
    659c:	200000e4 	.word	0x200000e4
    65a0:	4901      	ldr	r1, [pc, #4]	; (65a8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xeb0>)
    65a2:	6889      	ldr	r1, [r1, #8]
    65a4:	f7fc bc78 	b.w	2e98 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI>
    65a8:	200000e4 	.word	0x200000e4
    65ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    65b0:	4e1b      	ldr	r6, [pc, #108]	; (6620 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf28>)
    65b2:	2500      	movs	r5, #0
    65b4:	f106 010c 	add.w	r1, r6, #12
    65b8:	2703      	movs	r7, #3
    65ba:	f8d1 c004 	ldr.w	ip, [r1, #4]
    65be:	2401      	movs	r4, #1
    65c0:	b1a0      	cbz	r0, 65ec <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xef4>
    65c2:	68b0      	ldr	r0, [r6, #8]
    65c4:	78c0      	ldrb	r0, [r0, #3]
    65c6:	f88c 0129 	strb.w	r0, [ip, #297]	; 0x129
    65ca:	fa04 f000 	lsl.w	r0, r4, r0
    65ce:	f3c0 50c0 	ubfx	r0, r0, #23, #1
    65d2:	b130      	cbz	r0, 65e2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xeea>
    65d4:	f88c 70a5 	strb.w	r7, [ip, #165]	; 0xa5
    65d8:	f8ac 50dc 	strh.w	r5, [ip, #220]	; 0xdc
    65dc:	f88c 40e0 	strb.w	r4, [ip, #224]	; 0xe0
    65e0:	e019      	b.n	6616 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf1e>
    65e2:	f240 6195 	movw	r1, #1685	; 0x695
    65e6:	2036      	movs	r0, #54	; 0x36
    65e8:	f7fa fa4a 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    65ec:	4688      	mov	r8, r1
    65ee:	2300      	movs	r3, #0
    65f0:	f89c 20a6 	ldrb.w	r2, [ip, #166]	; 0xa6
    65f4:	f10c 0088 	add.w	r0, ip, #136	; 0x88
    65f8:	4619      	mov	r1, r3
    65fa:	f007 fa9f 	bl	db3c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    65fe:	b168      	cbz	r0, 661c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf24>
    6600:	68b0      	ldr	r0, [r6, #8]
    6602:	78c1      	ldrb	r1, [r0, #3]
    6604:	f8d8 0004 	ldr.w	r0, [r8, #4]
    6608:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    660c:	f800 7fa6 	strb.w	r7, [r0, #166]!
    6610:	8785      	strh	r5, [r0, #60]	; 0x3c
    6612:	f880 403e 	strb.w	r4, [r0, #62]	; 0x3e
    6616:	2000      	movs	r0, #0
    6618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    661c:	2001      	movs	r0, #1
    661e:	e7fb      	b.n	6618 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf20>
    6620:	200000e4 	.word	0x200000e4
    6624:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    6628:	4604      	mov	r4, r0
    662a:	6840      	ldr	r0, [r0, #4]
    662c:	2300      	movs	r3, #0
    662e:	4619      	mov	r1, r3
    6630:	f890 20a6 	ldrb.w	r2, [r0, #166]	; 0xa6
    6634:	3088      	adds	r0, #136	; 0x88
    6636:	f007 fa81 	bl	db3c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    663a:	b310      	cbz	r0, 6682 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf8a>
    663c:	4d2e      	ldr	r5, [pc, #184]	; (66f8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1000>)
    663e:	68a8      	ldr	r0, [r5, #8]
    6640:	f007 fd24 	bl	e08c <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>
    6644:	b300      	cbz	r0, 6688 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf90>
    6646:	68a8      	ldr	r0, [r5, #8]
    6648:	f007 fd1a 	bl	e080 <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>
    664c:	4607      	mov	r7, r0
    664e:	68a8      	ldr	r0, [r5, #8]
    6650:	f007 fd1a 	bl	e088 <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>
    6654:	4680      	mov	r8, r0
    6656:	68a8      	ldr	r0, [r5, #8]
    6658:	f007 fd10 	bl	e07c <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>
    665c:	4606      	mov	r6, r0
    665e:	68a8      	ldr	r0, [r5, #8]
    6660:	f007 fd10 	bl	e084 <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>
    6664:	4601      	mov	r1, r0
    6666:	9700      	str	r7, [sp, #0]
    6668:	6860      	ldr	r0, [r4, #4]
    666a:	4643      	mov	r3, r8
    666c:	4632      	mov	r2, r6
    666e:	302c      	adds	r0, #44	; 0x2c
    6670:	f007 fe48 	bl	e304 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    6674:	6860      	ldr	r0, [r4, #4]
    6676:	2501      	movs	r5, #1
    6678:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    667c:	291d      	cmp	r1, #29
    667e:	d008      	beq.n	6692 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf9a>
    6680:	e009      	b.n	6696 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf9e>
    6682:	2001      	movs	r0, #1
    6684:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    6688:	e8bd 41fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    668c:	2000      	movs	r0, #0
    668e:	f7ff bf8d 	b.w	65ac <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xeb4>
    6692:	f880 5060 	strb.w	r5, [r0, #96]	; 0x60
    6696:	6860      	ldr	r0, [r4, #4]
    6698:	2600      	movs	r6, #0
    669a:	f890 1060 	ldrb.w	r1, [r0, #96]	; 0x60
    669e:	2901      	cmp	r1, #1
    66a0:	d011      	beq.n	66c6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xfce>
    66a2:	f890 113b 	ldrb.w	r1, [r0, #315]	; 0x13b
    66a6:	f88d 1004 	strb.w	r1, [sp, #4]
    66aa:	9901      	ldr	r1, [sp, #4]
    66ac:	9101      	str	r1, [sp, #4]
    66ae:	f89d 1004 	ldrb.w	r1, [sp, #4]
    66b2:	b941      	cbnz	r1, 66c6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xfce>
    66b4:	f890 113a 	ldrb.w	r1, [r0, #314]	; 0x13a
    66b8:	f88d 1000 	strb.w	r1, [sp]
    66bc:	9900      	ldr	r1, [sp, #0]
    66be:	9100      	str	r1, [sp, #0]
    66c0:	f89d 1000 	ldrb.w	r1, [sp]
    66c4:	b151      	cbz	r1, 66dc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xfe4>
    66c6:	211f      	movs	r1, #31
    66c8:	f880 10a6 	strb.w	r1, [r0, #166]	; 0xa6
    66cc:	6860      	ldr	r0, [r4, #4]
    66ce:	f8a0 60e2 	strh.w	r6, [r0, #226]	; 0xe2
    66d2:	6860      	ldr	r0, [r4, #4]
    66d4:	f880 50e4 	strb.w	r5, [r0, #228]	; 0xe4
    66d8:	2000      	movs	r0, #0
    66da:	e7d3      	b.n	6684 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf8c>
    66dc:	211e      	movs	r1, #30
    66de:	f880 10a6 	strb.w	r1, [r0, #166]	; 0xa6
    66e2:	4805      	ldr	r0, [pc, #20]	; (66f8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1000>)
    66e4:	300c      	adds	r0, #12
    66e6:	6843      	ldr	r3, [r0, #4]
    66e8:	f103 012c 	add.w	r1, r3, #44	; 0x2c
    66ec:	8818      	ldrh	r0, [r3, #0]
    66ee:	f503 72c0 	add.w	r2, r3, #384	; 0x180
    66f2:	f7fc faff 	bl	2cf4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    66f6:	e7e9      	b.n	66cc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xfd4>
    66f8:	200000e4 	.word	0x200000e4
    66fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6700:	4604      	mov	r4, r0
    6702:	6840      	ldr	r0, [r0, #4]
    6704:	2300      	movs	r3, #0
    6706:	210a      	movs	r1, #10
    6708:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    670c:	3088      	adds	r0, #136	; 0x88
    670e:	f007 fa15 	bl	db3c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6712:	b370      	cbz	r0, 6772 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x107a>
    6714:	4d18      	ldr	r5, [pc, #96]	; (6778 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1080>)
    6716:	68a8      	ldr	r0, [r5, #8]
    6718:	f007 fcb8 	bl	e08c <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>
    671c:	b1e8      	cbz	r0, 675a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1062>
    671e:	68a8      	ldr	r0, [r5, #8]
    6720:	f007 fcae 	bl	e080 <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>
    6724:	4607      	mov	r7, r0
    6726:	68a8      	ldr	r0, [r5, #8]
    6728:	f007 fcae 	bl	e088 <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>
    672c:	4680      	mov	r8, r0
    672e:	68a8      	ldr	r0, [r5, #8]
    6730:	f007 fca4 	bl	e07c <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>
    6734:	4606      	mov	r6, r0
    6736:	68a8      	ldr	r0, [r5, #8]
    6738:	f007 fca4 	bl	e084 <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>
    673c:	4601      	mov	r1, r0
    673e:	9700      	str	r7, [sp, #0]
    6740:	6860      	ldr	r0, [r4, #4]
    6742:	4643      	mov	r3, r8
    6744:	4632      	mov	r2, r6
    6746:	302c      	adds	r0, #44	; 0x2c
    6748:	f007 fddc 	bl	e304 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    674c:	6860      	ldr	r0, [r4, #4]
    674e:	f007 fd4b 	bl	e1e8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    6752:	2104      	movs	r1, #4
    6754:	6860      	ldr	r0, [r4, #4]
    6756:	f008 fa25 	bl	eba4 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    675a:	6861      	ldr	r1, [r4, #4]
    675c:	2000      	movs	r0, #0
    675e:	f881 00e0 	strb.w	r0, [r1, #224]	; 0xe0
    6762:	6861      	ldr	r1, [r4, #4]
    6764:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    6768:	f7ff f9fa 	bl	5b60 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x468>
    676c:	2000      	movs	r0, #0
    676e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6772:	e7ff      	b.n	6774 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x107c>
    6774:	2001      	movs	r0, #1
    6776:	e7fa      	b.n	676e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1076>
    6778:	200000e4 	.word	0x200000e4
    677c:	4901      	ldr	r1, [pc, #4]	; (6784 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x108c>)
    677e:	6889      	ldr	r1, [r1, #8]
    6780:	f7fc bb58 	b.w	2e34 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ>
    6784:	200000e4 	.word	0x200000e4
    6788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    678c:	4604      	mov	r4, r0
    678e:	6840      	ldr	r0, [r0, #4]
    6790:	f04f 0800 	mov.w	r8, #0
    6794:	b086      	sub	sp, #24
    6796:	f890 20a6 	ldrb.w	r2, [r0, #166]	; 0xa6
    679a:	4643      	mov	r3, r8
    679c:	4641      	mov	r1, r8
    679e:	3088      	adds	r0, #136	; 0x88
    67a0:	f007 f9cc 	bl	db3c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    67a4:	b190      	cbz	r0, 67cc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10d4>
    67a6:	6860      	ldr	r0, [r4, #4]
    67a8:	f890 00a5 	ldrb.w	r0, [r0, #165]	; 0xa5
    67ac:	2824      	cmp	r0, #36	; 0x24
    67ae:	d011      	beq.n	67d4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10dc>
    67b0:	2825      	cmp	r0, #37	; 0x25
    67b2:	d00f      	beq.n	67d4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10dc>
    67b4:	2826      	cmp	r0, #38	; 0x26
    67b6:	d00d      	beq.n	67d4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10dc>
    67b8:	4668      	mov	r0, sp
    67ba:	f7fa fef5 	bl	15a8 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    67be:	b158      	cbz	r0, 67d8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10e0>
    67c0:	9800      	ldr	r0, [sp, #0]
    67c2:	a903      	add	r1, sp, #12
    67c4:	78c0      	ldrb	r0, [r0, #3]
    67c6:	f88d 000c 	strb.w	r0, [sp, #12]
    67ca:	e006      	b.n	67da <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10e2>
    67cc:	2001      	movs	r0, #1
    67ce:	b006      	add	sp, #24
    67d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    67d4:	2020      	movs	r0, #32
    67d6:	e7fa      	b.n	67ce <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10d6>
    67d8:	2100      	movs	r1, #0
    67da:	6860      	ldr	r0, [r4, #4]
    67dc:	ab02      	add	r3, sp, #8
    67de:	2216      	movs	r2, #22
    67e0:	f890 00a5 	ldrb.w	r0, [r0, #165]	; 0xa5
    67e4:	f007 fa65 	bl	dcb2 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI>
    67e8:	2501      	movs	r5, #1
    67ea:	2600      	movs	r6, #0
    67ec:	b180      	cbz	r0, 6810 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1118>
    67ee:	2116      	movs	r1, #22
    67f0:	f89d 0008 	ldrb.w	r0, [sp, #8]
    67f4:	f7ff feac 	bl	6550 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe58>
    67f8:	6861      	ldr	r1, [r4, #4]
    67fa:	202f      	movs	r0, #47	; 0x2f
    67fc:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    6800:	6860      	ldr	r0, [r4, #4]
    6802:	f880 50e4 	strb.w	r5, [r0, #228]	; 0xe4
    6806:	6860      	ldr	r0, [r4, #4]
    6808:	f8a0 60e2 	strh.w	r6, [r0, #226]	; 0xe2
    680c:	2000      	movs	r0, #0
    680e:	e7de      	b.n	67ce <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10d6>
    6810:	4f29      	ldr	r7, [pc, #164]	; (68b8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11c0>)
    6812:	68b8      	ldr	r0, [r7, #8]
    6814:	f007 fc4c 	bl	e0b0 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y>
    6818:	b1b8      	cbz	r0, 684a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1152>
    681a:	68b8      	ldr	r0, [r7, #8]
    681c:	6862      	ldr	r2, [r4, #4]
    681e:	7901      	ldrb	r1, [r0, #4]
    6820:	f001 0107 	and.w	r1, r1, #7
    6824:	f882 1062 	strb.w	r1, [r2, #98]	; 0x62
    6828:	7940      	ldrb	r0, [r0, #5]
    682a:	f000 0107 	and.w	r1, r0, #7
    682e:	6860      	ldr	r0, [r4, #4]
    6830:	f880 1063 	strb.w	r1, [r0, #99]	; 0x63
    6834:	6860      	ldr	r0, [r4, #4]
    6836:	f890 2145 	ldrb.w	r2, [r0, #325]	; 0x145
    683a:	f88d 200c 	strb.w	r2, [sp, #12]
    683e:	9a03      	ldr	r2, [sp, #12]
    6840:	9203      	str	r2, [sp, #12]
    6842:	f89d 200c 	ldrb.w	r2, [sp, #12]
    6846:	bb5a      	cbnz	r2, 68a0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11a8>
    6848:	e004      	b.n	6854 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x115c>
    684a:	2000      	movs	r0, #0
    684c:	f7ff feae 	bl	65ac <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xeb4>
    6850:	4680      	mov	r8, r0
    6852:	e02f      	b.n	68b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11bc>
    6854:	f890 2144 	ldrb.w	r2, [r0, #324]	; 0x144
    6858:	2a01      	cmp	r2, #1
    685a:	d021      	beq.n	68a0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11a8>
    685c:	f100 026a 	add.w	r2, r0, #106	; 0x6a
    6860:	f890 3062 	ldrb.w	r3, [r0, #98]	; 0x62
    6864:	7857      	ldrb	r7, [r2, #1]
    6866:	429f      	cmp	r7, r3
    6868:	d106      	bne.n	6878 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1180>
    686a:	7812      	ldrb	r2, [r2, #0]
    686c:	428a      	cmp	r2, r1
    686e:	d103      	bne.n	6878 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1180>
    6870:	2102      	movs	r1, #2
    6872:	f880 1144 	strb.w	r1, [r0, #324]	; 0x144
    6876:	e013      	b.n	68a0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11a8>
    6878:	480f      	ldr	r0, [pc, #60]	; (68b8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11c0>)
    687a:	300c      	adds	r0, #12
    687c:	6841      	ldr	r1, [r0, #4]
    687e:	f501 70cf 	add.w	r0, r1, #414	; 0x19e
    6882:	880a      	ldrh	r2, [r1, #0]
    6884:	f820 2b02 	strh.w	r2, [r0], #2
    6888:	f891 2062 	ldrb.w	r2, [r1, #98]	; 0x62
    688c:	f800 2b01 	strb.w	r2, [r0], #1
    6890:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    6894:	f800 190d 	strb.w	r1, [r0], #-13
    6898:	2222      	movs	r2, #34	; 0x22
    689a:	4908      	ldr	r1, [pc, #32]	; (68bc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11c4>)
    689c:	f007 fc5f 	bl	e15e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    68a0:	6861      	ldr	r1, [r4, #4]
    68a2:	2022      	movs	r0, #34	; 0x22
    68a4:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    68a8:	6860      	ldr	r0, [r4, #4]
    68aa:	f880 50e4 	strb.w	r5, [r0, #228]	; 0xe4
    68ae:	6860      	ldr	r0, [r4, #4]
    68b0:	f8a0 60e2 	strh.w	r6, [r0, #226]	; 0xe2
    68b4:	4640      	mov	r0, r8
    68b6:	e78a      	b.n	67ce <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10d6>
    68b8:	200000e4 	.word	0x200000e4
    68bc:	000101f3 	.word	0x000101f3
    68c0:	b570      	push	{r4, r5, r6, lr}
    68c2:	4604      	mov	r4, r0
    68c4:	6840      	ldr	r0, [r0, #4]
    68c6:	f890 00a5 	ldrb.w	r0, [r0, #165]	; 0xa5
    68ca:	2820      	cmp	r0, #32
    68cc:	d001      	beq.n	68d2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11da>
    68ce:	2001      	movs	r0, #1
    68d0:	bd70      	pop	{r4, r5, r6, pc}
    68d2:	4e16      	ldr	r6, [pc, #88]	; (692c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1234>)
    68d4:	68b0      	ldr	r0, [r6, #8]
    68d6:	f007 fbfd 	bl	e0d4 <sym_V2EAB4QFEU4UUAXJWVWPATMDA5XIHPNUG5SNJCQ>
    68da:	b1f0      	cbz	r0, 691a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1222>
    68dc:	68b0      	ldr	r0, [r6, #8]
    68de:	6862      	ldr	r2, [r4, #4]
    68e0:	7901      	ldrb	r1, [r0, #4]
    68e2:	7940      	ldrb	r0, [r0, #5]
    68e4:	f001 0107 	and.w	r1, r1, #7
    68e8:	f361 0507 	bfi	r5, r1, #0, #8
    68ec:	4629      	mov	r1, r5
    68ee:	f000 0007 	and.w	r0, r0, #7
    68f2:	f360 210f 	bfi	r1, r0, #8, #8
    68f6:	2001      	movs	r0, #1
    68f8:	f882 00e0 	strb.w	r0, [r2, #224]	; 0xe0
    68fc:	6862      	ldr	r2, [r4, #4]
    68fe:	2000      	movs	r0, #0
    6900:	f8a2 00dc 	strh.w	r0, [r2, #220]	; 0xdc
    6904:	6862      	ldr	r2, [r4, #4]
    6906:	2024      	movs	r0, #36	; 0x24
    6908:	f882 00a5 	strb.w	r0, [r2, #165]	; 0xa5
    690c:	6860      	ldr	r0, [r4, #4]
    690e:	f8d0 0146 	ldr.w	r0, [r0, #326]	; 0x146
    6912:	f7ff fdf7 	bl	6504 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe0c>
    6916:	2000      	movs	r0, #0
    6918:	bd70      	pop	{r4, r5, r6, pc}
    691a:	2001      	movs	r0, #1
    691c:	f7ff fe46 	bl	65ac <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xeb4>
    6920:	4604      	mov	r4, r0
    6922:	201e      	movs	r0, #30
    6924:	f7ff fdb6 	bl	6494 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd9c>
    6928:	4620      	mov	r0, r4
    692a:	bd70      	pop	{r4, r5, r6, pc}
    692c:	200000e4 	.word	0x200000e4
    6930:	b570      	push	{r4, r5, r6, lr}
    6932:	4604      	mov	r4, r0
    6934:	6840      	ldr	r0, [r0, #4]
    6936:	4d0a      	ldr	r5, [pc, #40]	; (6960 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1268>)
    6938:	f810 1ff6 	ldrb.w	r1, [r0, #246]!
    693c:	f041 0104 	orr.w	r1, r1, #4
    6940:	7001      	strb	r1, [r0, #0]
    6942:	68a8      	ldr	r0, [r5, #8]
    6944:	f007 fbd0 	bl	e0e8 <sym_65MVSHFHYY3W6LGERKUEYJPJ7ENCODZZSM2L7CQ>
    6948:	4606      	mov	r6, r0
    694a:	68a8      	ldr	r0, [r5, #8]
    694c:	f007 fbd0 	bl	e0f0 <sym_MR2HDMT6FMX7P5HJAUSXDTOYNLKDM5AILMXKYDY>
    6950:	4601      	mov	r1, r0
    6952:	4622      	mov	r2, r4
    6954:	4630      	mov	r0, r6
    6956:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    695a:	f000 b8b3 	b.w	6ac4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13cc>
    695e:	0000      	.short	0x0000
    6960:	200000e4 	.word	0x200000e4
    6964:	4a11      	ldr	r2, [pc, #68]	; (69ac <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12b4>)
    6966:	4911      	ldr	r1, [pc, #68]	; (69ac <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12b4>)
    6968:	320c      	adds	r2, #12
    696a:	6852      	ldr	r2, [r2, #4]
    696c:	6889      	ldr	r1, [r1, #8]
    696e:	f892 30a5 	ldrb.w	r3, [r2, #165]	; 0xa5
    6972:	7909      	ldrb	r1, [r1, #4]
    6974:	f1a3 0210 	sub.w	r2, r3, #16
    6978:	2a0c      	cmp	r2, #12
    697a:	d801      	bhi.n	6980 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1288>
    697c:	2303      	movs	r3, #3
    697e:	e008      	b.n	6992 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x129a>
    6980:	2b28      	cmp	r3, #40	; 0x28
    6982:	d00a      	beq.n	699a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12a2>
    6984:	2b1d      	cmp	r3, #29
    6986:	d00a      	beq.n	699e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12a6>
    6988:	2b05      	cmp	r3, #5
    698a:	d00a      	beq.n	69a2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12aa>
    698c:	2b20      	cmp	r3, #32
    698e:	d00a      	beq.n	69a6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12ae>
    6990:	23fe      	movs	r3, #254	; 0xfe
    6992:	4602      	mov	r2, r0
    6994:	4618      	mov	r0, r3
    6996:	f000 b895 	b.w	6ac4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13cc>
    699a:	2323      	movs	r3, #35	; 0x23
    699c:	e7f9      	b.n	6992 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x129a>
    699e:	2314      	movs	r3, #20
    69a0:	e7f7      	b.n	6992 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x129a>
    69a2:	2312      	movs	r3, #18
    69a4:	e7f5      	b.n	6992 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x129a>
    69a6:	2316      	movs	r3, #22
    69a8:	e7f3      	b.n	6992 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x129a>
    69aa:	0000      	.short	0x0000
    69ac:	200000e4 	.word	0x200000e4
    69b0:	b570      	push	{r4, r5, r6, lr}
    69b2:	4604      	mov	r4, r0
    69b4:	6840      	ldr	r0, [r0, #4]
    69b6:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    69ba:	291b      	cmp	r1, #27
    69bc:	d001      	beq.n	69c2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12ca>
    69be:	2002      	movs	r0, #2
    69c0:	bd70      	pop	{r4, r5, r6, pc}
    69c2:	2500      	movs	r5, #0
    69c4:	f880 50e5 	strb.w	r5, [r0, #229]	; 0xe5
    69c8:	6860      	ldr	r0, [r4, #4]
    69ca:	f880 50e0 	strb.w	r5, [r0, #224]	; 0xe0
    69ce:	6860      	ldr	r0, [r4, #4]
    69d0:	f880 5278 	strb.w	r5, [r0, #632]	; 0x278
    69d4:	6860      	ldr	r0, [r4, #4]
    69d6:	f890 10e6 	ldrb.w	r1, [r0, #230]	; 0xe6
    69da:	b161      	cbz	r1, 69f6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12fe>
    69dc:	f880 50e6 	strb.w	r5, [r0, #230]	; 0xe6
    69e0:	6860      	ldr	r0, [r4, #4]
    69e2:	220d      	movs	r2, #13
    69e4:	8801      	ldrh	r1, [r0, #0]
    69e6:	f8a0 121e 	strh.w	r1, [r0, #542]	; 0x21e
    69ea:	6860      	ldr	r0, [r4, #4]
    69ec:	490d      	ldr	r1, [pc, #52]	; (6a24 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x132c>)
    69ee:	f880 521c 	strb.w	r5, [r0, #540]	; 0x21c
    69f2:	6860      	ldr	r0, [r4, #4]
    69f4:	e00c      	b.n	6a10 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1318>
    69f6:	8801      	ldrh	r1, [r0, #0]
    69f8:	f8a0 121e 	strh.w	r1, [r0, #542]	; 0x21e
    69fc:	6860      	ldr	r0, [r4, #4]
    69fe:	f880 521c 	strb.w	r5, [r0, #540]	; 0x21c
    6a02:	6861      	ldr	r1, [r4, #4]
    6a04:	2001      	movs	r0, #1
    6a06:	220c      	movs	r2, #12
    6a08:	f881 0220 	strb.w	r0, [r1, #544]	; 0x220
    6a0c:	4906      	ldr	r1, [pc, #24]	; (6a28 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1330>)
    6a0e:	6860      	ldr	r0, [r4, #4]
    6a10:	f200 2012 	addw	r0, r0, #530	; 0x212
    6a14:	f007 fba3 	bl	e15e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    6a18:	6860      	ldr	r0, [r4, #4]
    6a1a:	f880 50a5 	strb.w	r5, [r0, #165]	; 0xa5
    6a1e:	2000      	movs	r0, #0
    6a20:	bd70      	pop	{r4, r5, r6, pc}
    6a22:	0000      	.short	0x0000
    6a24:	0000e5ff 	.word	0x0000e5ff
    6a28:	0000e5e1 	.word	0x0000e5e1
    6a2c:	b510      	push	{r4, lr}
    6a2e:	4604      	mov	r4, r0
    6a30:	6840      	ldr	r0, [r0, #4]
    6a32:	2300      	movs	r3, #0
    6a34:	2101      	movs	r1, #1
    6a36:	f890 20a7 	ldrb.w	r2, [r0, #167]	; 0xa7
    6a3a:	3088      	adds	r0, #136	; 0x88
    6a3c:	f007 f87e 	bl	db3c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6a40:	b108      	cbz	r0, 6a46 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x134e>
    6a42:	2000      	movs	r0, #0
    6a44:	bd10      	pop	{r4, pc}
    6a46:	4809      	ldr	r0, [pc, #36]	; (6a6c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1374>)
    6a48:	6880      	ldr	r0, [r0, #8]
    6a4a:	f007 fb6d 	bl	e128 <sym_AFBV6ZWWJ5TP5BBQPAY4D2XGGYVLQVI65FY6JPY>
    6a4e:	6861      	ldr	r1, [r4, #4]
    6a50:	f881 00a8 	strb.w	r0, [r1, #168]	; 0xa8
    6a54:	6861      	ldr	r1, [r4, #4]
    6a56:	2006      	movs	r0, #6
    6a58:	f881 00a7 	strb.w	r0, [r1, #167]	; 0xa7
    6a5c:	6861      	ldr	r1, [r4, #4]
    6a5e:	2000      	movs	r0, #0
    6a60:	f881 00e4 	strb.w	r0, [r1, #228]	; 0xe4
    6a64:	6861      	ldr	r1, [r4, #4]
    6a66:	f881 00e0 	strb.w	r0, [r1, #224]	; 0xe0
    6a6a:	e7ea      	b.n	6a42 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x134a>
    6a6c:	200000e4 	.word	0x200000e4
    6a70:	4602      	mov	r2, r0
    6a72:	480f      	ldr	r0, [pc, #60]	; (6ab0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13b8>)
    6a74:	b510      	push	{r4, lr}
    6a76:	6880      	ldr	r0, [r0, #8]
    6a78:	6851      	ldr	r1, [r2, #4]
    6a7a:	2400      	movs	r4, #0
    6a7c:	7900      	ldrb	r0, [r0, #4]
    6a7e:	f891 10a5 	ldrb.w	r1, [r1, #165]	; 0xa5
    6a82:	2812      	cmp	r0, #18
    6a84:	d006      	beq.n	6a94 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x139c>
    6a86:	2814      	cmp	r0, #20
    6a88:	d004      	beq.n	6a94 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x139c>
    6a8a:	2816      	cmp	r0, #22
    6a8c:	d002      	beq.n	6a94 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x139c>
    6a8e:	2823      	cmp	r0, #35	; 0x23
    6a90:	d10c      	bne.n	6aac <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13b4>
    6a92:	e004      	b.n	6a9e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13a6>
    6a94:	2101      	movs	r1, #1
    6a96:	f000 f91d 	bl	6cd4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x15dc>
    6a9a:	4604      	mov	r4, r0
    6a9c:	e006      	b.n	6aac <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13b4>
    6a9e:	2928      	cmp	r1, #40	; 0x28
    6aa0:	d104      	bne.n	6aac <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13b4>
    6aa2:	4804      	ldr	r0, [pc, #16]	; (6ab4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13bc>)
    6aa4:	6801      	ldr	r1, [r0, #0]
    6aa6:	b109      	cbz	r1, 6aac <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13b4>
    6aa8:	4610      	mov	r0, r2
    6aaa:	4788      	blx	r1
    6aac:	4620      	mov	r0, r4
    6aae:	bd10      	pop	{r4, pc}
    6ab0:	200000e4 	.word	0x200000e4
    6ab4:	20000254 	.word	0x20000254
    6ab8:	4901      	ldr	r1, [pc, #4]	; (6ac0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13c8>)
    6aba:	6889      	ldr	r1, [r1, #8]
    6abc:	f7fc ba46 	b.w	2f4c <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY>
    6ac0:	200000e4 	.word	0x200000e4
    6ac4:	4603      	mov	r3, r0
    6ac6:	2000      	movs	r0, #0
    6ac8:	2b23      	cmp	r3, #35	; 0x23
    6aca:	d017      	beq.n	6afc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1404>
    6acc:	dc0b      	bgt.n	6ae6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13ee>
    6ace:	2b03      	cmp	r3, #3
    6ad0:	d011      	beq.n	6af6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13fe>
    6ad2:	2b12      	cmp	r3, #18
    6ad4:	d003      	beq.n	6ade <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13e6>
    6ad6:	2b14      	cmp	r3, #20
    6ad8:	d001      	beq.n	6ade <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13e6>
    6ada:	2b16      	cmp	r3, #22
    6adc:	d10a      	bne.n	6af4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13fc>
    6ade:	2100      	movs	r1, #0
    6ae0:	4618      	mov	r0, r3
    6ae2:	f000 b8f7 	b.w	6cd4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x15dc>
    6ae6:	2b24      	cmp	r3, #36	; 0x24
    6ae8:	d008      	beq.n	6afc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1404>
    6aea:	2b25      	cmp	r3, #37	; 0x25
    6aec:	d006      	beq.n	6afc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1404>
    6aee:	2bfe      	cmp	r3, #254	; 0xfe
    6af0:	d100      	bne.n	6af4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13fc>
    6af2:	2002      	movs	r0, #2
    6af4:	4770      	bx	lr
    6af6:	4608      	mov	r0, r1
    6af8:	f7ff b846 	b.w	5b88 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x490>
    6afc:	4a02      	ldr	r2, [pc, #8]	; (6b08 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1410>)
    6afe:	6812      	ldr	r2, [r2, #0]
    6b00:	2a00      	cmp	r2, #0
    6b02:	d0f7      	beq.n	6af4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13fc>
    6b04:	4618      	mov	r0, r3
    6b06:	4710      	bx	r2
    6b08:	20000250 	.word	0x20000250
    6b0c:	280c      	cmp	r0, #12
    6b0e:	d01a      	beq.n	6b46 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x144e>
    6b10:	2813      	cmp	r0, #19
    6b12:	d018      	beq.n	6b46 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x144e>
    6b14:	2818      	cmp	r0, #24
    6b16:	d016      	beq.n	6b46 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x144e>
    6b18:	4910      	ldr	r1, [pc, #64]	; (6b5c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1464>)
    6b1a:	2200      	movs	r2, #0
    6b1c:	2811      	cmp	r0, #17
    6b1e:	6849      	ldr	r1, [r1, #4]
    6b20:	d012      	beq.n	6b48 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1450>
    6b22:	2807      	cmp	r0, #7
    6b24:	d00f      	beq.n	6b46 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x144e>
    6b26:	2809      	cmp	r0, #9
    6b28:	d00d      	beq.n	6b46 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x144e>
    6b2a:	2815      	cmp	r0, #21
    6b2c:	d012      	beq.n	6b54 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x145c>
    6b2e:	2824      	cmp	r0, #36	; 0x24
    6b30:	d009      	beq.n	6b46 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x144e>
    6b32:	2801      	cmp	r0, #1
    6b34:	d007      	beq.n	6b46 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x144e>
    6b36:	2800      	cmp	r0, #0
    6b38:	d005      	beq.n	6b46 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x144e>
    6b3a:	2802      	cmp	r0, #2
    6b3c:	d003      	beq.n	6b46 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x144e>
    6b3e:	f821 2fdc 	strh.w	r2, [r1, #220]!
    6b42:	2001      	movs	r0, #1
    6b44:	7108      	strb	r0, [r1, #4]
    6b46:	4770      	bx	lr
    6b48:	f891 0130 	ldrb.w	r0, [r1, #304]	; 0x130
    6b4c:	b110      	cbz	r0, 6b54 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x145c>
    6b4e:	f8a1 20dc 	strh.w	r2, [r1, #220]	; 0xdc
    6b52:	4770      	bx	lr
    6b54:	f8a1 20e2 	strh.w	r2, [r1, #226]	; 0xe2
    6b58:	4770      	bx	lr
    6b5a:	0000      	.short	0x0000
    6b5c:	200000f0 	.word	0x200000f0
    6b60:	4904      	ldr	r1, [pc, #16]	; (6b74 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x147c>)
    6b62:	2000      	movs	r0, #0
    6b64:	6849      	ldr	r1, [r1, #4]
    6b66:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    6b6a:	f8a1 00dc 	strh.w	r0, [r1, #220]	; 0xdc
    6b6e:	f881 00e0 	strb.w	r0, [r1, #224]	; 0xe0
    6b72:	4770      	bx	lr
    6b74:	200000f0 	.word	0x200000f0
    6b78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6b7c:	4d53      	ldr	r5, [pc, #332]	; (6ccc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x15d4>)
    6b7e:	4680      	mov	r8, r0
    6b80:	460f      	mov	r7, r1
    6b82:	6868      	ldr	r0, [r5, #4]
    6b84:	f100 0488 	add.w	r4, r0, #136	; 0x88
    6b88:	f890 0138 	ldrb.w	r0, [r0, #312]	; 0x138
    6b8c:	f88d 0000 	strb.w	r0, [sp]
    6b90:	9800      	ldr	r0, [sp, #0]
    6b92:	9000      	str	r0, [sp, #0]
    6b94:	f89d 0000 	ldrb.w	r0, [sp]
    6b98:	2600      	movs	r6, #0
    6b9a:	b930      	cbnz	r0, 6baa <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x14b2>
    6b9c:	7fe2      	ldrb	r2, [r4, #31]
    6b9e:	2300      	movs	r3, #0
    6ba0:	2101      	movs	r1, #1
    6ba2:	4620      	mov	r0, r4
    6ba4:	f006 ffca 	bl	db3c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6ba8:	b120      	cbz	r0, 6bb4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x14bc>
    6baa:	f8b4 0052 	ldrh.w	r0, [r4, #82]	; 0x52
    6bae:	1c40      	adds	r0, r0, #1
    6bb0:	f8a4 0052 	strh.w	r0, [r4, #82]	; 0x52
    6bb4:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
    6bb8:	b121      	cbz	r1, 6bc4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x14cc>
    6bba:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
    6bbe:	1c40      	adds	r0, r0, #1
    6bc0:	f8a4 0054 	strh.w	r0, [r4, #84]	; 0x54
    6bc4:	f994 005c 	ldrsb.w	r0, [r4, #92]	; 0x5c
    6bc8:	b120      	cbz	r0, 6bd4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x14dc>
    6bca:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
    6bce:	1c52      	adds	r2, r2, #1
    6bd0:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
    6bd4:	f1b8 0f00 	cmp.w	r8, #0
    6bd8:	d114      	bne.n	6c04 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x150c>
    6bda:	4a3c      	ldr	r2, [pc, #240]	; (6ccc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x15d4>)
    6bdc:	3a0c      	subs	r2, #12
    6bde:	7812      	ldrb	r2, [r2, #0]
    6be0:	2a02      	cmp	r2, #2
    6be2:	d006      	beq.n	6bf2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x14fa>
    6be4:	2a01      	cmp	r2, #1
    6be6:	d006      	beq.n	6bf6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x14fe>
    6be8:	b1df      	cbz	r7, 6c22 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x152a>
    6bea:	06f8      	lsls	r0, r7, #27
    6bec:	d508      	bpl.n	6c00 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1508>
    6bee:	201e      	movs	r0, #30
    6bf0:	e043      	b.n	6c7a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1582>
    6bf2:	2016      	movs	r0, #22
    6bf4:	e041      	b.n	6c7a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1582>
    6bf6:	6868      	ldr	r0, [r5, #4]
    6bf8:	f890 00a8 	ldrb.w	r0, [r0, #168]	; 0xa8
    6bfc:	bba0      	cbnz	r0, 6c68 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1570>
    6bfe:	e05e      	b.n	6cbe <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x15c6>
    6c00:	0738      	lsls	r0, r7, #28
    6c02:	d501      	bpl.n	6c08 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1510>
    6c04:	203d      	movs	r0, #61	; 0x3d
    6c06:	e038      	b.n	6c7a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1582>
    6c08:	07b8      	lsls	r0, r7, #30
    6c0a:	d001      	beq.n	6c10 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1518>
    6c0c:	202a      	movs	r0, #42	; 0x2a
    6c0e:	e034      	b.n	6c7a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1582>
    6c10:	06b8      	lsls	r0, r7, #26
    6c12:	d404      	bmi.n	6c1e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1526>
    6c14:	f640 515f 	movw	r1, #3423	; 0xd5f
    6c18:	2036      	movs	r0, #54	; 0x36
    6c1a:	f7f9 ff31 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6c1e:	2023      	movs	r0, #35	; 0x23
    6c20:	e02b      	b.n	6c7a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1582>
    6c22:	b129      	cbz	r1, 6c30 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1538>
    6c24:	f8b4 1054 	ldrh.w	r1, [r4, #84]	; 0x54
    6c28:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
    6c2c:	4291      	cmp	r1, r2
    6c2e:	d81a      	bhi.n	6c66 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x156e>
    6c30:	b128      	cbz	r0, 6c3e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1546>
    6c32:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
    6c36:	f8b4 1056 	ldrh.w	r1, [r4, #86]	; 0x56
    6c3a:	4288      	cmp	r0, r1
    6c3c:	d813      	bhi.n	6c66 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x156e>
    6c3e:	f8b4 1052 	ldrh.w	r1, [r4, #82]	; 0x52
    6c42:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
    6c46:	4281      	cmp	r1, r0
    6c48:	d309      	bcc.n	6c5e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1566>
    6c4a:	686a      	ldr	r2, [r5, #4]
    6c4c:	f892 2138 	ldrb.w	r2, [r2, #312]	; 0x138
    6c50:	f88d 2000 	strb.w	r2, [sp]
    6c54:	9a00      	ldr	r2, [sp, #0]
    6c56:	9200      	str	r2, [sp, #0]
    6c58:	f89d 2000 	ldrb.w	r2, [sp]
    6c5c:	b91a      	cbnz	r2, 6c66 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x156e>
    6c5e:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
    6c62:	4291      	cmp	r1, r2
    6c64:	d301      	bcc.n	6c6a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1572>
    6c66:	2022      	movs	r0, #34	; 0x22
    6c68:	e007      	b.n	6c7a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1582>
    6c6a:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
    6c6e:	b301      	cbz	r1, 6cb2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x15ba>
    6c70:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
    6c74:	4281      	cmp	r1, r0
    6c76:	d322      	bcc.n	6cbe <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x15c6>
    6c78:	2008      	movs	r0, #8
    6c7a:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    6c7e:	220b      	movs	r2, #11
    6c80:	4913      	ldr	r1, [pc, #76]	; (6cd0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x15d8>)
    6c82:	f104 0034 	add.w	r0, r4, #52	; 0x34
    6c86:	f007 fa6a 	bl	e15e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    6c8a:	7766      	strb	r6, [r4, #29]
    6c8c:	77a6      	strb	r6, [r4, #30]
    6c8e:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
    6c92:	2102      	movs	r1, #2
    6c94:	6868      	ldr	r0, [r5, #4]
    6c96:	f007 ff85 	bl	eba4 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    6c9a:	6868      	ldr	r0, [r5, #4]
    6c9c:	f890 112e 	ldrb.w	r1, [r0, #302]	; 0x12e
    6ca0:	2901      	cmp	r1, #1
    6ca2:	d104      	bne.n	6cae <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x15b6>
    6ca4:	f8d0 0258 	ldr.w	r0, [r0, #600]	; 0x258
    6ca8:	7801      	ldrb	r1, [r0, #0]
    6caa:	1e49      	subs	r1, r1, #1
    6cac:	7001      	strb	r1, [r0, #0]
    6cae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6cb2:	f8b4 004e 	ldrh.w	r0, [r4, #78]	; 0x4e
    6cb6:	2806      	cmp	r0, #6
    6cb8:	d301      	bcc.n	6cbe <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x15c6>
    6cba:	203e      	movs	r0, #62	; 0x3e
    6cbc:	e7dd      	b.n	6c7a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1582>
    6cbe:	6868      	ldr	r0, [r5, #4]
    6cc0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6cc4:	2100      	movs	r1, #0
    6cc6:	f007 bf6d 	b.w	eba4 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    6cca:	0000      	.short	0x0000
    6ccc:	200000f0 	.word	0x200000f0
    6cd0:	0000e55f 	.word	0x0000e55f
    6cd4:	b570      	push	{r4, r5, r6, lr}
    6cd6:	460e      	mov	r6, r1
    6cd8:	4601      	mov	r1, r0
    6cda:	6850      	ldr	r0, [r2, #4]
    6cdc:	4614      	mov	r4, r2
    6cde:	2500      	movs	r5, #0
    6ce0:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    6ce4:	481d      	ldr	r0, [pc, #116]	; (6d5c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1664>)
    6ce6:	6840      	ldr	r0, [r0, #4]
    6ce8:	3088      	adds	r0, #136	; 0x88
    6cea:	2912      	cmp	r1, #18
    6cec:	d008      	beq.n	6d00 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1608>
    6cee:	2914      	cmp	r1, #20
    6cf0:	d010      	beq.n	6d14 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x161c>
    6cf2:	2916      	cmp	r1, #22
    6cf4:	d01e      	beq.n	6d34 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x163c>
    6cf6:	f240 613e 	movw	r1, #1598	; 0x63e
    6cfa:	2036      	movs	r0, #54	; 0x36
    6cfc:	f7f9 fec0 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6d00:	2109      	movs	r1, #9
    6d02:	2300      	movs	r3, #0
    6d04:	f006 ff1a 	bl	db3c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6d08:	b330      	cbz	r0, 6d58 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1660>
    6d0a:	4620      	mov	r0, r4
    6d0c:	f008 f8ef 	bl	eeee <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xb2>
    6d10:	4605      	mov	r5, r0
    6d12:	e021      	b.n	6d58 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1660>
    6d14:	210a      	movs	r1, #10
    6d16:	2300      	movs	r3, #0
    6d18:	f006 ff10 	bl	db3c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6d1c:	b1e0      	cbz	r0, 6d58 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1660>
    6d1e:	f7ff ff1f 	bl	6b60 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1468>
    6d22:	b126      	cbz	r6, 6d2e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1636>
    6d24:	6860      	ldr	r0, [r4, #4]
    6d26:	2105      	movs	r1, #5
    6d28:	30f6      	adds	r0, #246	; 0xf6
    6d2a:	f008 f879 	bl	ee20 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x206>
    6d2e:	f7fe ff17 	bl	5b60 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x468>
    6d32:	e011      	b.n	6d58 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1660>
    6d34:	2a20      	cmp	r2, #32
    6d36:	d10f      	bne.n	6d58 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1660>
    6d38:	f7ff ff12 	bl	6b60 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1468>
    6d3c:	b14e      	cbz	r6, 6d52 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x165a>
    6d3e:	6860      	ldr	r0, [r4, #4]
    6d40:	2108      	movs	r1, #8
    6d42:	30f6      	adds	r0, #246	; 0xf6
    6d44:	f008 f86c 	bl	ee20 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x206>
    6d48:	6860      	ldr	r0, [r4, #4]
    6d4a:	210b      	movs	r1, #11
    6d4c:	30f6      	adds	r0, #246	; 0xf6
    6d4e:	f008 f867 	bl	ee20 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x206>
    6d52:	201a      	movs	r0, #26
    6d54:	f7ff fb9e 	bl	6494 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd9c>
    6d58:	4628      	mov	r0, r5
    6d5a:	bd70      	pop	{r4, r5, r6, pc}
    6d5c:	200000f0 	.word	0x200000f0
    6d60:	4a19      	ldr	r2, [pc, #100]	; (6dc8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x16d0>)
    6d62:	2901      	cmp	r1, #1
    6d64:	6852      	ldr	r2, [r2, #4]
    6d66:	d010      	beq.n	6d8a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1692>
    6d68:	2100      	movs	r1, #0
    6d6a:	b1c8      	cbz	r0, 6da0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x16a8>
    6d6c:	2801      	cmp	r0, #1
    6d6e:	d022      	beq.n	6db6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x16be>
    6d70:	2803      	cmp	r0, #3
    6d72:	d109      	bne.n	6d88 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1690>
    6d74:	f892 00a5 	ldrb.w	r0, [r2, #165]	; 0xa5
    6d78:	2814      	cmp	r0, #20
    6d7a:	d005      	beq.n	6d88 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1690>
    6d7c:	2817      	cmp	r0, #23
    6d7e:	d003      	beq.n	6d88 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1690>
    6d80:	2819      	cmp	r0, #25
    6d82:	d001      	beq.n	6d88 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1690>
    6d84:	f882 1278 	strb.w	r1, [r2, #632]	; 0x278
    6d88:	4770      	bx	lr
    6d8a:	f892 012e 	ldrb.w	r0, [r2, #302]	; 0x12e
    6d8e:	2801      	cmp	r0, #1
    6d90:	d0fa      	beq.n	6d88 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1690>
    6d92:	bf00      	nop
    6d94:	f8d2 0258 	ldr.w	r0, [r2, #600]	; 0x258
    6d98:	7801      	ldrb	r1, [r0, #0]
    6d9a:	1e49      	subs	r1, r1, #1
    6d9c:	7001      	strb	r1, [r0, #0]
    6d9e:	4770      	bx	lr
    6da0:	f8b2 009c 	ldrh.w	r0, [r2, #156]	; 0x9c
    6da4:	f8b2 3266 	ldrh.w	r3, [r2, #614]	; 0x266
    6da8:	1ac0      	subs	r0, r0, r3
    6daa:	b200      	sxth	r0, r0
    6dac:	2800      	cmp	r0, #0
    6dae:	dbf6      	blt.n	6d9e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x16a6>
    6db0:	f882 1264 	strb.w	r1, [r2, #612]	; 0x264
    6db4:	4770      	bx	lr
    6db6:	f8b2 009c 	ldrh.w	r0, [r2, #156]	; 0x9c
    6dba:	f8b2 125e 	ldrh.w	r1, [r2, #606]	; 0x25e
    6dbe:	1a40      	subs	r0, r0, r1
    6dc0:	b200      	sxth	r0, r0
    6dc2:	2800      	cmp	r0, #0
    6dc4:	dae6      	bge.n	6d94 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x169c>
    6dc6:	4770      	bx	lr
    6dc8:	200000f0 	.word	0x200000f0

00006dcc <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ>:
    6dcc:	b510      	push	{r4, lr}
    6dce:	6981      	ldr	r1, [r0, #24]
    6dd0:	b119      	cbz	r1, 6dda <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0xe>
    6dd2:	6882      	ldr	r2, [r0, #8]
    6dd4:	688b      	ldr	r3, [r1, #8]
    6dd6:	429a      	cmp	r2, r3
    6dd8:	d203      	bcs.n	6de2 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x16>
    6dda:	21c0      	movs	r1, #192	; 0xc0
    6ddc:	2037      	movs	r0, #55	; 0x37
    6dde:	f7f9 fe4f 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6de2:	6942      	ldr	r2, [r0, #20]
    6de4:	614a      	str	r2, [r1, #20]
    6de6:	6903      	ldr	r3, [r0, #16]
    6de8:	610b      	str	r3, [r1, #16]
    6dea:	b10a      	cbz	r2, 6df0 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x24>
    6dec:	6111      	str	r1, [r2, #16]
    6dee:	e001      	b.n	6df4 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x28>
    6df0:	4a06      	ldr	r2, [pc, #24]	; (6e0c <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x40>)
    6df2:	6011      	str	r1, [r2, #0]
    6df4:	690a      	ldr	r2, [r1, #16]
    6df6:	b132      	cbz	r2, 6e06 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x3a>
    6df8:	6151      	str	r1, [r2, #20]
    6dfa:	e9d0 2002 	ldrd	r2, r0, [r0, #8]
    6dfe:	4410      	add	r0, r2
    6e00:	688a      	ldr	r2, [r1, #8]
    6e02:	1a80      	subs	r0, r0, r2
    6e04:	e000      	b.n	6e08 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x3c>
    6e06:	2000      	movs	r0, #0
    6e08:	60c8      	str	r0, [r1, #12]
    6e0a:	bd10      	pop	{r4, pc}
    6e0c:	20000258 	.word	0x20000258

00006e10 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>:
    6e10:	b510      	push	{r4, lr}
    6e12:	2200      	movs	r2, #0
    6e14:	6141      	str	r1, [r0, #20]
    6e16:	b189      	cbz	r1, 6e3c <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x2c>
    6e18:	690b      	ldr	r3, [r1, #16]
    6e1a:	6108      	str	r0, [r1, #16]
    6e1c:	6103      	str	r3, [r0, #16]
    6e1e:	b103      	cbz	r3, 6e22 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x12>
    6e20:	6158      	str	r0, [r3, #20]
    6e22:	6941      	ldr	r1, [r0, #20]
    6e24:	60c2      	str	r2, [r0, #12]
    6e26:	2900      	cmp	r1, #0
    6e28:	d00f      	beq.n	6e4a <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x3a>
    6e2a:	68cb      	ldr	r3, [r1, #12]
    6e2c:	b163      	cbz	r3, 6e48 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x38>
    6e2e:	6884      	ldr	r4, [r0, #8]
    6e30:	42a3      	cmp	r3, r4
    6e32:	d207      	bcs.n	6e44 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x34>
    6e34:	212b      	movs	r1, #43	; 0x2b
    6e36:	2037      	movs	r0, #55	; 0x37
    6e38:	f7f9 fe22 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6e3c:	4903      	ldr	r1, [pc, #12]	; (6e4c <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x3c>)
    6e3e:	6102      	str	r2, [r0, #16]
    6e40:	6008      	str	r0, [r1, #0]
    6e42:	e7ee      	b.n	6e22 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x12>
    6e44:	1b1b      	subs	r3, r3, r4
    6e46:	60c3      	str	r3, [r0, #12]
    6e48:	60ca      	str	r2, [r1, #12]
    6e4a:	bd10      	pop	{r4, pc}
    6e4c:	20000258 	.word	0x20000258

00006e50 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>:
    6e50:	6941      	ldr	r1, [r0, #20]
    6e52:	b149      	cbz	r1, 6e68 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x18>
    6e54:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    6e58:	441a      	add	r2, r3
    6e5a:	68cb      	ldr	r3, [r1, #12]
    6e5c:	441a      	add	r2, r3
    6e5e:	60ca      	str	r2, [r1, #12]
    6e60:	e9d0 1204 	ldrd	r1, r2, [r0, #16]
    6e64:	6111      	str	r1, [r2, #16]
    6e66:	e002      	b.n	6e6e <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x1e>
    6e68:	4a06      	ldr	r2, [pc, #24]	; (6e84 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x34>)
    6e6a:	6901      	ldr	r1, [r0, #16]
    6e6c:	6011      	str	r1, [r2, #0]
    6e6e:	e9d0 1004 	ldrd	r1, r0, [r0, #16]
    6e72:	b109      	cbz	r1, 6e78 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x28>
    6e74:	6148      	str	r0, [r1, #20]
    6e76:	4770      	bx	lr
    6e78:	2800      	cmp	r0, #0
    6e7a:	d0fc      	beq.n	6e76 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x26>
    6e7c:	2100      	movs	r1, #0
    6e7e:	60c1      	str	r1, [r0, #12]
    6e80:	4770      	bx	lr
    6e82:	0000      	.short	0x0000
    6e84:	20000258 	.word	0x20000258

00006e88 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI>:
    6e88:	b510      	push	{r4, lr}
    6e8a:	4604      	mov	r4, r0
    6e8c:	490a      	ldr	r1, [pc, #40]	; (6eb8 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x30>)
    6e8e:	2000      	movs	r0, #0
    6e90:	4602      	mov	r2, r0
    6e92:	6809      	ldr	r1, [r1, #0]
    6e94:	1e43      	subs	r3, r0, #1
    6e96:	e008      	b.n	6eaa <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x22>
    6e98:	68ca      	ldr	r2, [r1, #12]
    6e9a:	42a2      	cmp	r2, r4
    6e9c:	d303      	bcc.n	6ea6 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x1e>
    6e9e:	429a      	cmp	r2, r3
    6ea0:	d201      	bcs.n	6ea6 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x1e>
    6ea2:	4613      	mov	r3, r2
    6ea4:	4608      	mov	r0, r1
    6ea6:	460a      	mov	r2, r1
    6ea8:	6909      	ldr	r1, [r1, #16]
    6eaa:	2900      	cmp	r1, #0
    6eac:	d1f4      	bne.n	6e98 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x10>
    6eae:	2800      	cmp	r0, #0
    6eb0:	d100      	bne.n	6eb4 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x2c>
    6eb2:	4610      	mov	r0, r2
    6eb4:	bd10      	pop	{r4, pc}
    6eb6:	0000      	.short	0x0000
    6eb8:	20000258 	.word	0x20000258

00006ebc <sym_KN3K6STNQWQWR2LORBLVX4RFT5RXJO5L5JNKV4I>:
    6ebc:	4801      	ldr	r0, [pc, #4]	; (6ec4 <sym_KN3K6STNQWQWR2LORBLVX4RFT5RXJO5L5JNKV4I+0x8>)
    6ebe:	6800      	ldr	r0, [r0, #0]
    6ec0:	4770      	bx	lr
    6ec2:	0000      	.short	0x0000
    6ec4:	20000258 	.word	0x20000258

00006ec8 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ>:
    6ec8:	4804      	ldr	r0, [pc, #16]	; (6edc <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0x14>)
    6eca:	6801      	ldr	r1, [r0, #0]
    6ecc:	2000      	movs	r0, #0
    6ece:	e001      	b.n	6ed4 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0xc>
    6ed0:	4608      	mov	r0, r1
    6ed2:	6909      	ldr	r1, [r1, #16]
    6ed4:	2900      	cmp	r1, #0
    6ed6:	d1fb      	bne.n	6ed0 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0x8>
    6ed8:	4770      	bx	lr
    6eda:	0000      	.short	0x0000
    6edc:	20000258 	.word	0x20000258

00006ee0 <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA>:
    6ee0:	4801      	ldr	r0, [pc, #4]	; (6ee8 <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA+0x8>)
    6ee2:	2100      	movs	r1, #0
    6ee4:	6001      	str	r1, [r0, #0]
    6ee6:	4770      	bx	lr
    6ee8:	20000258 	.word	0x20000258

00006eec <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ>:
    6eec:	4903      	ldr	r1, [pc, #12]	; (6efc <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ+0x10>)
    6eee:	2000      	movs	r0, #0
    6ef0:	6809      	ldr	r1, [r1, #0]
    6ef2:	2900      	cmp	r1, #0
    6ef4:	d000      	beq.n	6ef8 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ+0xc>
    6ef6:	200c      	movs	r0, #12
    6ef8:	4770      	bx	lr
    6efa:	0000      	.short	0x0000
    6efc:	20000258 	.word	0x20000258

00006f00 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI>:
    6f00:	b570      	push	{r4, r5, r6, lr}
    6f02:	6844      	ldr	r4, [r0, #4]
    6f04:	220d      	movs	r2, #13
    6f06:	f504 759c 	add.w	r5, r4, #312	; 0x138
    6f0a:	2100      	movs	r1, #0
    6f0c:	f104 0078 	add.w	r0, r4, #120	; 0x78
    6f10:	f009 fc47 	bl	107a2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6f14:	f44f 70a7 	mov.w	r0, #334	; 0x14e
    6f18:	2100      	movs	r1, #0
    6f1a:	f8a4 114c 	strh.w	r1, [r4, #332]	; 0x14c
    6f1e:	5501      	strb	r1, [r0, r4]
    6f20:	f8a5 1017 	strh.w	r1, [r5, #23]
    6f24:	7669      	strb	r1, [r5, #25]
    6f26:	4608      	mov	r0, r1
    6f28:	f05f 017f 	movs.w	r1, #127	; 0x7f
    6f2c:	eb04 0240 	add.w	r2, r4, r0, lsl #1
    6f30:	1c40      	adds	r0, r0, #1
    6f32:	b2c0      	uxtb	r0, r0
    6f34:	f882 107d 	strb.w	r1, [r2, #125]	; 0x7d
    6f38:	2802      	cmp	r0, #2
    6f3a:	d3f7      	bcc.n	6f2c <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI+0x2c>
    6f3c:	f994 106e 	ldrsb.w	r1, [r4, #110]	; 0x6e
    6f40:	4620      	mov	r0, r4
    6f42:	f008 fa58 	bl	f3f6 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>
    6f46:	2000      	movs	r0, #0
    6f48:	21ff      	movs	r1, #255	; 0xff
    6f4a:	1822      	adds	r2, r4, r0
    6f4c:	1c40      	adds	r0, r0, #1
    6f4e:	b2c0      	uxtb	r0, r0
    6f50:	f882 1080 	strb.w	r1, [r2, #128]	; 0x80
    6f54:	2802      	cmp	r0, #2
    6f56:	d3f8      	bcc.n	6f4a <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI+0x4a>
    6f58:	bd70      	pop	{r4, r5, r6, pc}
	...

00006f5c <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA>:
    6f5c:	b500      	push	{lr}
    6f5e:	7941      	ldrb	r1, [r0, #5]
    6f60:	b095      	sub	sp, #84	; 0x54
    6f62:	b141      	cbz	r1, 6f76 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    6f64:	2901      	cmp	r1, #1
    6f66:	d006      	beq.n	6f76 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    6f68:	2902      	cmp	r1, #2
    6f6a:	d004      	beq.n	6f76 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    6f6c:	2903      	cmp	r1, #3
    6f6e:	d002      	beq.n	6f76 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    6f70:	2012      	movs	r0, #18
    6f72:	b015      	add	sp, #84	; 0x54
    6f74:	bd00      	pop	{pc}
    6f76:	7901      	ldrb	r1, [r0, #4]
    6f78:	f88d 1000 	strb.w	r1, [sp]
    6f7c:	7b01      	ldrb	r1, [r0, #12]
    6f7e:	f88d 1001 	strb.w	r1, [sp, #1]
    6f82:	7942      	ldrb	r2, [r0, #5]
    6f84:	2100      	movs	r1, #0
    6f86:	2301      	movs	r3, #1
    6f88:	b3f2      	cbz	r2, 7008 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8>
    6f8a:	2a02      	cmp	r2, #2
    6f8c:	d03d      	beq.n	700a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa>
    6f8e:	f88d 3002 	strb.w	r3, [sp, #2]
    6f92:	bf00      	nop
    6f94:	f8d0 2006 	ldr.w	r2, [r0, #6]
    6f98:	f8cd 2003 	str.w	r2, [sp, #3]
    6f9c:	8942      	ldrh	r2, [r0, #10]
    6f9e:	f8ad 2007 	strh.w	r2, [sp, #7]
    6fa2:	f88d 3009 	strb.w	r3, [sp, #9]
    6fa6:	f830 2b01 	ldrh.w	r2, [r0], #1
    6faa:	f240 2371 	movw	r3, #625	; 0x271
    6fae:	435a      	muls	r2, r3
    6fb0:	9203      	str	r2, [sp, #12]
    6fb2:	f8b0 2001 	ldrh.w	r2, [r0, #1]
    6fb6:	435a      	muls	r2, r3
    6fb8:	9206      	str	r2, [sp, #24]
    6fba:	8982      	ldrh	r2, [r0, #12]
    6fbc:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
    6fc0:	89c2      	ldrh	r2, [r0, #14]
    6fc2:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
    6fc6:	8a02      	ldrh	r2, [r0, #16]
    6fc8:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
    6fcc:	8a42      	ldrh	r2, [r0, #18]
    6fce:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
    6fd2:	8a82      	ldrh	r2, [r0, #20]
    6fd4:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
    6fd8:	8ac0      	ldrh	r0, [r0, #22]
    6fda:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
    6fde:	2007      	movs	r0, #7
    6fe0:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
    6fe4:	f88d 1048 	strb.w	r1, [sp, #72]	; 0x48
    6fe8:	f8ad 104a 	strh.w	r1, [sp, #74]	; 0x4a
    6fec:	f88d 104d 	strb.w	r1, [sp, #77]	; 0x4d
    6ff0:	9806      	ldr	r0, [sp, #24]
    6ff2:	f000 fa17 	bl	7424 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x168>
    6ff6:	b158      	cbz	r0, 7010 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10>
    6ff8:	9803      	ldr	r0, [sp, #12]
    6ffa:	f000 fa07 	bl	740c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x150>
    6ffe:	b138      	cbz	r0, 7010 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10>
    7000:	4668      	mov	r0, sp
    7002:	f008 fc65 	bl	f8d0 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A>
    7006:	e7b4      	b.n	6f72 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x16>
    7008:	e7ff      	b.n	700a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa>
    700a:	f88d 1002 	strb.w	r1, [sp, #2]
    700e:	e7c1      	b.n	6f94 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x38>
    7010:	2030      	movs	r0, #48	; 0x30
    7012:	e7ae      	b.n	6f72 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x16>

00007014 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    7014:	4903      	ldr	r1, [pc, #12]	; (7024 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    7016:	884a      	ldrh	r2, [r1, #2]
    7018:	8002      	strh	r2, [r0, #0]
    701a:	7809      	ldrb	r1, [r1, #0]
    701c:	7081      	strb	r1, [r0, #2]
    701e:	2000      	movs	r0, #0
    7020:	4770      	bx	lr
    7022:	0000      	.short	0x0000
    7024:	2000110c 	.word	0x2000110c

00007028 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
    7028:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    702a:	460c      	mov	r4, r1
    702c:	4605      	mov	r5, r0
    702e:	8800      	ldrh	r0, [r0, #0]
    7030:	4669      	mov	r1, sp
    7032:	f006 fd5a 	bl	daea <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    7036:	2200      	movs	r2, #0
    7038:	b128      	cbz	r0, 7046 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x1e>
    703a:	f8c4 2002 	str.w	r2, [r4, #2]
    703e:	71a2      	strb	r2, [r4, #6]
    7040:	8022      	strh	r2, [r4, #0]
    7042:	2002      	movs	r0, #2
    7044:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    7046:	9901      	ldr	r1, [sp, #4]
    7048:	f111 0188 	adds.w	r1, r1, #136	; 0x88
    704c:	f881 2076 	strb.w	r2, [r1, #118]	; 0x76
    7050:	f8d1 0026 	ldr.w	r0, [r1, #38]	; 0x26
    7054:	f8c4 0002 	str.w	r0, [r4, #2]
    7058:	f891 002a 	ldrb.w	r0, [r1, #42]	; 0x2a
    705c:	71a0      	strb	r0, [r4, #6]
    705e:	8828      	ldrh	r0, [r5, #0]
    7060:	8020      	strh	r0, [r4, #0]
    7062:	f891 0076 	ldrb.w	r0, [r1, #118]	; 0x76
    7066:	f88d 0008 	strb.w	r0, [sp, #8]
    706a:	9802      	ldr	r0, [sp, #8]
    706c:	9002      	str	r0, [sp, #8]
    706e:	f89d 0008 	ldrb.w	r0, [sp, #8]
    7072:	2800      	cmp	r0, #0
    7074:	d1ea      	bne.n	704c <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x24>
    7076:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00007078 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
    7078:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    707a:	460d      	mov	r5, r1
    707c:	4606      	mov	r6, r0
    707e:	8800      	ldrh	r0, [r0, #0]
    7080:	4669      	mov	r1, sp
    7082:	f006 fd32 	bl	daea <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    7086:	2800      	cmp	r0, #0
    7088:	d11a      	bne.n	70c0 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x48>
    708a:	f8dd 4004 	ldr.w	r4, [sp, #4]
    708e:	2700      	movs	r7, #0
    7090:	f884 706c 	strb.w	r7, [r4, #108]	; 0x6c
    7094:	f814 0f6a 	ldrb.w	r0, [r4, #106]!
    7098:	f008 fe12 	bl	fcc0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x44>
    709c:	70a8      	strb	r0, [r5, #2]
    709e:	7860      	ldrb	r0, [r4, #1]
    70a0:	f008 fe0e 	bl	fcc0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x44>
    70a4:	70e8      	strb	r0, [r5, #3]
    70a6:	78a0      	ldrb	r0, [r4, #2]
    70a8:	f88d 0008 	strb.w	r0, [sp, #8]
    70ac:	9802      	ldr	r0, [sp, #8]
    70ae:	9002      	str	r0, [sp, #8]
    70b0:	f89d 0008 	ldrb.w	r0, [sp, #8]
    70b4:	3c6a      	subs	r4, #106	; 0x6a
    70b6:	2800      	cmp	r0, #0
    70b8:	d1ea      	bne.n	7090 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x18>
    70ba:	8830      	ldrh	r0, [r6, #0]
    70bc:	8028      	strh	r0, [r5, #0]
    70be:	2000      	movs	r0, #0
    70c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

000070c4 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
    70c4:	4903      	ldr	r1, [pc, #12]	; (70d4 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x10>)
    70c6:	888a      	ldrh	r2, [r1, #4]
    70c8:	8002      	strh	r2, [r0, #0]
    70ca:	88c9      	ldrh	r1, [r1, #6]
    70cc:	8041      	strh	r1, [r0, #2]
    70ce:	2000      	movs	r0, #0
    70d0:	4770      	bx	lr
    70d2:	0000      	.short	0x0000
    70d4:	2000026a 	.word	0x2000026a

000070d8 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
    70d8:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    70da:	2400      	movs	r4, #0
    70dc:	a902      	add	r1, sp, #8
    70de:	f88d 4004 	strb.w	r4, [sp, #4]
    70e2:	f88d 4008 	strb.w	r4, [sp, #8]
    70e6:	9100      	str	r1, [sp, #0]
    70e8:	7882      	ldrb	r2, [r0, #2]
    70ea:	7841      	ldrb	r1, [r0, #1]
    70ec:	7800      	ldrb	r0, [r0, #0]
    70ee:	ab01      	add	r3, sp, #4
    70f0:	f008 ffe5 	bl	100be <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x442>
    70f4:	2800      	cmp	r0, #0
    70f6:	d112      	bne.n	711e <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x46>
    70f8:	f89d 0004 	ldrb.w	r0, [sp, #4]
    70fc:	f008 fdf7 	bl	fcee <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x72>
    7100:	b170      	cbz	r0, 7120 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x48>
    7102:	f89d 0008 	ldrb.w	r0, [sp, #8]
    7106:	f008 fdf2 	bl	fcee <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x72>
    710a:	b148      	cbz	r0, 7120 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x48>
    710c:	4805      	ldr	r0, [pc, #20]	; (7124 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x4c>)
    710e:	f89d 1004 	ldrb.w	r1, [sp, #4]
    7112:	7381      	strb	r1, [r0, #14]
    7114:	f89d 1008 	ldrb.w	r1, [sp, #8]
    7118:	73c1      	strb	r1, [r0, #15]
    711a:	8204      	strh	r4, [r0, #16]
    711c:	2000      	movs	r0, #0
    711e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    7120:	2011      	movs	r0, #17
    7122:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    7124:	2000110c 	.word	0x2000110c

00007128 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI>:
    7128:	b51c      	push	{r2, r3, r4, lr}
    712a:	4604      	mov	r4, r0
    712c:	f006 fcc7 	bl	dabe <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY>
    7130:	b148      	cbz	r0, 7146 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x1e>
    7132:	4620      	mov	r0, r4
    7134:	f7fb fae2 	bl	26fc <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ>
    7138:	4909      	ldr	r1, [pc, #36]	; (7160 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x38>)
    713a:	24ff      	movs	r4, #255	; 0xff
    713c:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
    7140:	e9cd 0100 	strd	r0, r1, [sp]
    7144:	e004      	b.n	7150 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x28>
    7146:	2012      	movs	r0, #18
    7148:	bd1c      	pop	{r2, r3, r4, pc}
    714a:	9800      	ldr	r0, [sp, #0]
    714c:	f880 425c 	strb.w	r4, [r0, #604]	; 0x25c
    7150:	4668      	mov	r0, sp
    7152:	f7f9 feb3 	bl	ebc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    7156:	2800      	cmp	r0, #0
    7158:	d0f7      	beq.n	714a <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x22>
    715a:	2000      	movs	r0, #0
    715c:	bd1c      	pop	{r2, r3, r4, pc}
    715e:	0000      	.short	0x0000
    7160:	00007758 	.word	0x00007758

00007164 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    7164:	7801      	ldrb	r1, [r0, #0]
    7166:	b171      	cbz	r1, 7186 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    7168:	7841      	ldrb	r1, [r0, #1]
    716a:	b161      	cbz	r1, 7186 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    716c:	8841      	ldrh	r1, [r0, #2]
    716e:	291b      	cmp	r1, #27
    7170:	d309      	bcc.n	7186 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    7172:	8881      	ldrh	r1, [r0, #4]
    7174:	291b      	cmp	r1, #27
    7176:	d306      	bcc.n	7186 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    7178:	4904      	ldr	r1, [pc, #16]	; (718c <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    717a:	6802      	ldr	r2, [r0, #0]
    717c:	600a      	str	r2, [r1, #0]
    717e:	8880      	ldrh	r0, [r0, #4]
    7180:	8088      	strh	r0, [r1, #4]
    7182:	2000      	movs	r0, #0
    7184:	4770      	bx	lr
    7186:	2012      	movs	r0, #18
    7188:	4770      	bx	lr
    718a:	0000      	.short	0x0000
    718c:	2000110c 	.word	0x2000110c

00007190 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    7190:	6800      	ldr	r0, [r0, #0]
    7192:	f240 41e2 	movw	r1, #1250	; 0x4e2
    7196:	4288      	cmp	r0, r1
    7198:	d303      	bcc.n	71a2 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    719a:	4903      	ldr	r1, [pc, #12]	; (71a8 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    719c:	6088      	str	r0, [r1, #8]
    719e:	2000      	movs	r0, #0
    71a0:	4770      	bx	lr
    71a2:	2012      	movs	r0, #18
    71a4:	4770      	bx	lr
    71a6:	0000      	.short	0x0000
    71a8:	2000110c 	.word	0x2000110c

000071ac <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA>:
    71ac:	b510      	push	{r4, lr}
    71ae:	b086      	sub	sp, #24
    71b0:	4604      	mov	r4, r0
    71b2:	f008 fe77 	bl	fea4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x228>
    71b6:	2800      	cmp	r0, #0
    71b8:	d103      	bne.n	71c2 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    71ba:	f008 ff6d 	bl	10098 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x41c>
    71be:	b110      	cbz	r0, 71c6 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x1a>
    71c0:	200c      	movs	r0, #12
    71c2:	b006      	add	sp, #24
    71c4:	bd10      	pop	{r4, pc}
    71c6:	2102      	movs	r1, #2
    71c8:	f104 0010 	add.w	r0, r4, #16
    71cc:	f000 f936 	bl	743c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x180>
    71d0:	78a0      	ldrb	r0, [r4, #2]
    71d2:	f88d 0008 	strb.w	r0, [sp, #8]
    71d6:	78a0      	ldrb	r0, [r4, #2]
    71d8:	f88d 0000 	strb.w	r0, [sp]
    71dc:	7860      	ldrb	r0, [r4, #1]
    71de:	f88d 0003 	strb.w	r0, [sp, #3]
    71e2:	7820      	ldrb	r0, [r4, #0]
    71e4:	f88d 0002 	strb.w	r0, [sp, #2]
    71e8:	7e20      	ldrb	r0, [r4, #24]
    71ea:	f88d 0004 	strb.w	r0, [sp, #4]
    71ee:	78a0      	ldrb	r0, [r4, #2]
    71f0:	07c0      	lsls	r0, r0, #31
    71f2:	d00b      	beq.n	720c <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x60>
    71f4:	78e0      	ldrb	r0, [r4, #3]
    71f6:	2801      	cmp	r0, #1
    71f8:	d011      	beq.n	721e <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x72>
    71fa:	b190      	cbz	r0, 7222 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x76>
    71fc:	f05f 0000 	movs.w	r0, #0
    7200:	f88d 0001 	strb.w	r0, [sp, #1]
    7204:	68a0      	ldr	r0, [r4, #8]
    7206:	9003      	str	r0, [sp, #12]
    7208:	6920      	ldr	r0, [r4, #16]
    720a:	9004      	str	r0, [sp, #16]
    720c:	a802      	add	r0, sp, #8
    720e:	f7fd fbb7 	bl	4980 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ>
    7212:	2800      	cmp	r0, #0
    7214:	d1d5      	bne.n	71c2 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    7216:	4668      	mov	r0, sp
    7218:	f7fc f998 	bl	354c <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY>
    721c:	e7d1      	b.n	71c2 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    721e:	2002      	movs	r0, #2
    7220:	e7ee      	b.n	7200 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x54>
    7222:	2001      	movs	r0, #1
    7224:	e7ec      	b.n	7200 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x54>
	...

00007228 <sym_UY577SX5HIKP7SN7G6RHWTFDXAXFXXF32S4VJUA>:
    7228:	4801      	ldr	r0, [pc, #4]	; (7230 <sym_UY577SX5HIKP7SN7G6RHWTFDXAXFXXF32S4VJUA+0x8>)
    722a:	f990 0000 	ldrsb.w	r0, [r0]
    722e:	4770      	bx	lr
    7230:	2000025c 	.word	0x2000025c

00007234 <sym_MCY7RRK5E6T6JDGA7HZL7CCKF7DGHVCG4MOX6PI>:
    7234:	b510      	push	{r4, lr}
    7236:	f7fb fa2d 	bl	2694 <sym_XECBDXJ42XLR262DOTTQGYR47BZ5WSNNCRAJKPI>
    723a:	f008 ff38 	bl	100ae <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x432>
    723e:	4901      	ldr	r1, [pc, #4]	; (7244 <sym_MCY7RRK5E6T6JDGA7HZL7CCKF7DGHVCG4MOX6PI+0x10>)
    7240:	7008      	strb	r0, [r1, #0]
    7242:	bd10      	pop	{r4, pc}
    7244:	2000025c 	.word	0x2000025c

00007248 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    7248:	4a03      	ldr	r2, [pc, #12]	; (7258 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    724a:	e9d2 1200 	ldrd	r1, r2, [r2]
    724e:	6001      	str	r1, [r0, #0]
    7250:	6042      	str	r2, [r0, #4]
    7252:	2000      	movs	r0, #0
    7254:	4770      	bx	lr
    7256:	0000      	.short	0x0000
    7258:	00007758 	.word	0x00007758

0000725c <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
    725c:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    725e:	8800      	ldrh	r0, [r0, #0]
    7260:	4669      	mov	r1, sp
    7262:	f006 fc42 	bl	daea <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    7266:	b968      	cbnz	r0, 7284 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x28>
    7268:	2401      	movs	r4, #1
    726a:	9801      	ldr	r0, [sp, #4]
    726c:	f008 fefe 	bl	1006c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3f0>
    7270:	b140      	cbz	r0, 7284 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x28>
    7272:	9801      	ldr	r0, [sp, #4]
    7274:	4601      	mov	r1, r0
    7276:	f890 214a 	ldrb.w	r2, [r0, #330]	; 0x14a
    727a:	3088      	adds	r0, #136	; 0x88
    727c:	f501 71a5 	add.w	r1, r1, #330	; 0x14a
    7280:	b95a      	cbnz	r2, 729a <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x3e>
    7282:	e001      	b.n	7288 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2c>
    7284:	2002      	movs	r0, #2
    7286:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    7288:	f890 2068 	ldrb.w	r2, [r0, #104]	; 0x68
    728c:	f88d 2008 	strb.w	r2, [sp, #8]
    7290:	9a02      	ldr	r2, [sp, #8]
    7292:	9202      	str	r2, [sp, #8]
    7294:	f89d 2008 	ldrb.w	r2, [sp, #8]
    7298:	b10a      	cbz	r2, 729e <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x42>
    729a:	203a      	movs	r0, #58	; 0x3a
    729c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    729e:	f890 205f 	ldrb.w	r2, [r0, #95]	; 0x5f
    72a2:	0792      	lsls	r2, r2, #30
    72a4:	d006      	beq.n	72b4 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x58>
    72a6:	2203      	movs	r2, #3
    72a8:	4903      	ldr	r1, [pc, #12]	; (72b8 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x5c>)
    72aa:	3060      	adds	r0, #96	; 0x60
    72ac:	f006 ff6b 	bl	e186 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    72b0:	2000      	movs	r0, #0
    72b2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    72b4:	700c      	strb	r4, [r1, #0]
    72b6:	e7fb      	b.n	72b0 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x54>
    72b8:	0000e68f 	.word	0x0000e68f

000072bc <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ>:
    72bc:	b510      	push	{r4, lr}
    72be:	2005      	movs	r0, #5
    72c0:	f000 fabe 	bl	7840 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    72c4:	f7fe f8ca 	bl	545c <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ>
    72c8:	4902      	ldr	r1, [pc, #8]	; (72d4 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x18>)
    72ca:	4801      	ldr	r0, [pc, #4]	; (72d0 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x14>)
    72cc:	6048      	str	r0, [r1, #4]
    72ce:	bd10      	pop	{r4, pc}
    72d0:	000072d9 	.word	0x000072d9
    72d4:	2000025c 	.word	0x2000025c
    72d8:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    72dc:	4613      	mov	r3, r2
    72de:	4a33      	ldr	r2, [pc, #204]	; (73ac <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xf0>)
    72e0:	460f      	mov	r7, r1
    72e2:	f8b0 1054 	ldrh.w	r1, [r0, #84]	; 0x54
    72e6:	8814      	ldrh	r4, [r2, #0]
    72e8:	f8b0 6052 	ldrh.w	r6, [r0, #82]	; 0x52
    72ec:	428c      	cmp	r4, r1
    72ee:	d200      	bcs.n	72f2 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x36>
    72f0:	4621      	mov	r1, r4
    72f2:	4688      	mov	r8, r1
    72f4:	8891      	ldrh	r1, [r2, #4]
    72f6:	42b1      	cmp	r1, r6
    72f8:	d200      	bcs.n	72fc <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x40>
    72fa:	460e      	mov	r6, r1
    72fc:	8851      	ldrh	r1, [r2, #2]
    72fe:	f640 0448 	movw	r4, #2120	; 0x848
    7302:	42a1      	cmp	r1, r4
    7304:	d300      	bcc.n	7308 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x4c>
    7306:	4621      	mov	r1, r4
    7308:	88d5      	ldrh	r5, [r2, #6]
    730a:	42a5      	cmp	r5, r4
    730c:	d300      	bcc.n	7310 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x54>
    730e:	4625      	mov	r5, r4
    7310:	42a1      	cmp	r1, r4
    7312:	d200      	bcs.n	7316 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x5a>
    7314:	460c      	mov	r4, r1
    7316:	f44f 72a4 	mov.w	r2, #328	; 0x148
    731a:	2e1b      	cmp	r6, #27
    731c:	d001      	beq.n	7322 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x66>
    731e:	4295      	cmp	r5, r2
    7320:	d104      	bne.n	732c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x70>
    7322:	f1b8 0f1b 	cmp.w	r8, #27
    7326:	d03e      	beq.n	73a6 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xea>
    7328:	4294      	cmp	r4, r2
    732a:	d03c      	beq.n	73a6 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xea>
    732c:	466a      	mov	r2, sp
    732e:	4619      	mov	r1, r3
    7330:	f008 fe43 	bl	ffba <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x33e>
    7334:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    7338:	4641      	mov	r1, r8
    733a:	4540      	cmp	r0, r8
    733c:	d900      	bls.n	7340 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x84>
    733e:	4608      	mov	r0, r1
    7340:	80f8      	strh	r0, [r7, #6]
    7342:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    7346:	42a1      	cmp	r1, r4
    7348:	d800      	bhi.n	734c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x90>
    734a:	460c      	mov	r4, r1
    734c:	813c      	strh	r4, [r7, #8]
    734e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    7352:	42b1      	cmp	r1, r6
    7354:	d800      	bhi.n	7358 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x9c>
    7356:	460e      	mov	r6, r1
    7358:	807e      	strh	r6, [r7, #2]
    735a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    735e:	42a9      	cmp	r1, r5
    7360:	d800      	bhi.n	7364 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xa8>
    7362:	460d      	mov	r5, r1
    7364:	80bd      	strh	r5, [r7, #4]
    7366:	21ff      	movs	r1, #255	; 0xff
    7368:	7039      	strb	r1, [r7, #0]
    736a:	381b      	subs	r0, #27
    736c:	28e0      	cmp	r0, #224	; 0xe0
    736e:	d902      	bls.n	7376 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xba>
    7370:	f640 516e 	movw	r1, #3438	; 0xd6e
    7374:	e014      	b.n	73a0 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xe4>
    7376:	3e1b      	subs	r6, #27
    7378:	2ee0      	cmp	r6, #224	; 0xe0
    737a:	d902      	bls.n	7382 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xc6>
    737c:	f44f 6157 	mov.w	r1, #3440	; 0xd70
    7380:	e00e      	b.n	73a0 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xe4>
    7382:	f44f 60e0 	mov.w	r0, #1792	; 0x700
    7386:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
    738a:	4284      	cmp	r4, r0
    738c:	d902      	bls.n	7394 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xd8>
    738e:	f640 5172 	movw	r1, #3442	; 0xd72
    7392:	e005      	b.n	73a0 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xe4>
    7394:	f5a5 75a4 	sub.w	r5, r5, #328	; 0x148
    7398:	4285      	cmp	r5, r0
    739a:	d904      	bls.n	73a6 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xea>
    739c:	f640 5174 	movw	r1, #3444	; 0xd74
    73a0:	2039      	movs	r0, #57	; 0x39
    73a2:	f7f9 fb6d 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    73a6:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    73aa:	0000      	.short	0x0000
    73ac:	2000026a 	.word	0x2000026a
    73b0:	b510      	push	{r4, lr}
    73b2:	480e      	ldr	r0, [pc, #56]	; (73ec <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x130>)
    73b4:	2100      	movs	r1, #0
    73b6:	4b0e      	ldr	r3, [pc, #56]	; (73f0 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x134>)
    73b8:	74c1      	strb	r1, [r0, #19]
    73ba:	8281      	strh	r1, [r0, #20]
    73bc:	221b      	movs	r2, #27
    73be:	801a      	strh	r2, [r3, #0]
    73c0:	f44f 74a4 	mov.w	r4, #328	; 0x148
    73c4:	805c      	strh	r4, [r3, #2]
    73c6:	809a      	strh	r2, [r3, #4]
    73c8:	80dc      	strh	r4, [r3, #6]
    73ca:	7381      	strb	r1, [r0, #14]
    73cc:	73c1      	strb	r1, [r0, #15]
    73ce:	2303      	movs	r3, #3
    73d0:	7003      	strb	r3, [r0, #0]
    73d2:	2302      	movs	r3, #2
    73d4:	7043      	strb	r3, [r0, #1]
    73d6:	8042      	strh	r2, [r0, #2]
    73d8:	8082      	strh	r2, [r0, #4]
    73da:	f640 62a6 	movw	r2, #3750	; 0xea6
    73de:	6082      	str	r2, [r0, #8]
    73e0:	7481      	strb	r1, [r0, #18]
    73e2:	7301      	strb	r1, [r0, #12]
    73e4:	4802      	ldr	r0, [pc, #8]	; (73f0 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x134>)
    73e6:	1f80      	subs	r0, r0, #6
    73e8:	7001      	strb	r1, [r0, #0]
    73ea:	bd10      	pop	{r4, pc}
    73ec:	2000110c 	.word	0x2000110c
    73f0:	2000026a 	.word	0x2000026a
    73f4:	4904      	ldr	r1, [pc, #16]	; (7408 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x14c>)
    73f6:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    73fa:	4288      	cmp	r0, r1
    73fc:	d301      	bcc.n	7402 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x146>
    73fe:	2000      	movs	r0, #0
    7400:	4770      	bx	lr
    7402:	2001      	movs	r0, #1
    7404:	4770      	bx	lr
    7406:	0000      	.short	0x0000
    7408:	0270f3cc 	.word	0x0270f3cc
    740c:	4904      	ldr	r1, [pc, #16]	; (7420 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x164>)
    740e:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    7412:	4288      	cmp	r0, r1
    7414:	d301      	bcc.n	741a <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x15e>
    7416:	2000      	movs	r0, #0
    7418:	4770      	bx	lr
    741a:	2001      	movs	r0, #1
    741c:	4770      	bx	lr
    741e:	0000      	.short	0x0000
    7420:	009c363d 	.word	0x009c363d
    7424:	4904      	ldr	r1, [pc, #16]	; (7438 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x17c>)
    7426:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    742a:	4288      	cmp	r0, r1
    742c:	d301      	bcc.n	7432 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x176>
    742e:	2000      	movs	r0, #0
    7430:	4770      	bx	lr
    7432:	2001      	movs	r0, #1
    7434:	4770      	bx	lr
    7436:	0000      	.short	0x0000
    7438:	009c363d 	.word	0x009c363d
    743c:	b530      	push	{r4, r5, lr}
    743e:	2200      	movs	r2, #0
    7440:	4d07      	ldr	r5, [pc, #28]	; (7460 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x1a4>)
    7442:	e009      	b.n	7458 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x19c>
    7444:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
    7448:	462b      	mov	r3, r5
    744a:	429c      	cmp	r4, r3
    744c:	d800      	bhi.n	7450 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x194>
    744e:	4623      	mov	r3, r4
    7450:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
    7454:	1c52      	adds	r2, r2, #1
    7456:	b2d2      	uxtb	r2, r2
    7458:	428a      	cmp	r2, r1
    745a:	d3f3      	bcc.n	7444 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x188>
    745c:	bd30      	pop	{r4, r5, pc}
    745e:	0000      	.short	0x0000
    7460:	00f42400 	.word	0x00f42400
    7464:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7468:	4604      	mov	r4, r0
    746a:	a05c      	add	r0, pc, #368	; (adr r0, 75dc <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x320>)
    746c:	4688      	mov	r8, r1
    746e:	e9d0 7600 	ldrd	r7, r6, [r0]
    7472:	b087      	sub	sp, #28
    7474:	4699      	mov	r9, r3
    7476:	4615      	mov	r5, r2
    7478:	2100      	movs	r1, #0
    747a:	4620      	mov	r0, r4
    747c:	f7fb f87a 	bl	2574 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    7480:	f8a4 8000 	strh.w	r8, [r4]
    7484:	4857      	ldr	r0, [pc, #348]	; (75e4 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x328>)
    7486:	f8c4 0258 	str.w	r0, [r4, #600]	; 0x258
    748a:	f000 f9e5 	bl	7858 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    748e:	0940      	lsrs	r0, r0, #5
    7490:	ea40 60c1 	orr.w	r0, r0, r1, lsl #27
    7494:	07c1      	lsls	r1, r0, #31
    7496:	f8df 8150 	ldr.w	r8, [pc, #336]	; 75e8 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x32c>
    749a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    749e:	d006      	beq.n	74ae <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x1f2>
    74a0:	f8b8 2002 	ldrh.w	r2, [r8, #2]
    74a4:	f8b8 1004 	ldrh.w	r1, [r8, #4]
    74a8:	84c2      	strh	r2, [r0, #38]	; 0x26
    74aa:	8501      	strh	r1, [r0, #40]	; 0x28
    74ac:	e002      	b.n	74b4 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x1f8>
    74ae:	211b      	movs	r1, #27
    74b0:	84c1      	strh	r1, [r0, #38]	; 0x26
    74b2:	8501      	strh	r1, [r0, #40]	; 0x28
    74b4:	f000 f9d0 	bl	7858 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    74b8:	0788      	lsls	r0, r1, #30
    74ba:	d506      	bpl.n	74ca <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x20e>
    74bc:	2000      	movs	r0, #0
    74be:	f88d 0000 	strb.w	r0, [sp]
    74c2:	4668      	mov	r0, sp
    74c4:	9401      	str	r4, [sp, #4]
    74c6:	f7ff fd1b 	bl	6f00 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI>
    74ca:	f898 1001 	ldrb.w	r1, [r8, #1]
    74ce:	9100      	str	r1, [sp, #0]
    74d0:	f898 3000 	ldrb.w	r3, [r8]
    74d4:	f8b8 2004 	ldrh.w	r2, [r8, #4]
    74d8:	f8b8 1002 	ldrh.w	r1, [r8, #2]
    74dc:	8820      	ldrh	r0, [r4, #0]
    74de:	f7f9 fddb 	bl	1098 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    74e2:	b120      	cbz	r0, 74ee <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x232>
    74e4:	f640 7106 	movw	r1, #3846	; 0xf06
    74e8:	2039      	movs	r0, #57	; 0x39
    74ea:	f7f9 fac9 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    74ee:	f006 ffb7 	bl	e460 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q>
    74f2:	6160      	str	r0, [r4, #20]
    74f4:	f1b9 0f00 	cmp.w	r9, #0
    74f8:	d004      	beq.n	7504 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x248>
    74fa:	f7fb fc7b 	bl	2df4 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    74fe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    7502:	61e0      	str	r0, [r4, #28]
    7504:	f895 004d 	ldrb.w	r0, [r5, #77]	; 0x4d
    7508:	eb05 0040 	add.w	r0, r5, r0, lsl #1
    750c:	8d40      	ldrh	r0, [r0, #42]	; 0x2a
    750e:	f006 faf8 	bl	db02 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    7512:	6120      	str	r0, [r4, #16]
    7514:	f895 004d 	ldrb.w	r0, [r5, #77]	; 0x4d
    7518:	eb05 0040 	add.w	r0, r5, r0, lsl #1
    751c:	8e00      	ldrh	r0, [r0, #48]	; 0x30
    751e:	8320      	strh	r0, [r4, #24]
    7520:	f895 004d 	ldrb.w	r0, [r5, #77]	; 0x4d
    7524:	eb05 0040 	add.w	r0, r5, r0, lsl #1
    7528:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    752a:	8360      	strh	r0, [r4, #26]
    752c:	7a68      	ldrb	r0, [r5, #9]
    752e:	f008 fbbd 	bl	fcac <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x30>
    7532:	f8d8 1008 	ldr.w	r1, [r8, #8]
    7536:	4645      	mov	r5, r8
    7538:	4620      	mov	r0, r4
    753a:	62e1      	str	r1, [r4, #44]	; 0x2c
    753c:	f007 fb6d 	bl	ec1a <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY>
    7540:	f8c4 70ae 	str.w	r7, [r4, #174]	; 0xae
    7544:	f884 60b2 	strb.w	r6, [r4, #178]	; 0xb2
    7548:	20ff      	movs	r0, #255	; 0xff
    754a:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    754e:	4825      	ldr	r0, [pc, #148]	; (75e4 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x328>)
    7550:	3808      	subs	r0, #8
    7552:	6843      	ldr	r3, [r0, #4]
    7554:	b123      	cbz	r3, 7560 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x2a4>
    7556:	2201      	movs	r2, #1
    7558:	f504 719d 	add.w	r1, r4, #314	; 0x13a
    755c:	4620      	mov	r0, r4
    755e:	4798      	blx	r3
    7560:	8821      	ldrh	r1, [r4, #0]
    7562:	f8ad 1004 	strh.w	r1, [sp, #4]
    7566:	7ba9      	ldrb	r1, [r5, #14]
    7568:	f88d 1006 	strb.w	r1, [sp, #6]
    756c:	7be9      	ldrb	r1, [r5, #15]
    756e:	f88d 1007 	strb.w	r1, [sp, #7]
    7572:	8a29      	ldrh	r1, [r5, #16]
    7574:	f8ad 1008 	strh.w	r1, [sp, #8]
    7578:	a904      	add	r1, sp, #16
    757a:	9100      	str	r1, [sp, #0]
    757c:	2000      	movs	r0, #0
    757e:	ab03      	add	r3, sp, #12
    7580:	aa01      	add	r2, sp, #4
    7582:	4621      	mov	r1, r4
    7584:	f008 fd4f 	bl	10026 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3aa>
    7588:	0005      	movs	r5, r0
    758a:	d10f      	bne.n	75ac <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x2f0>
    758c:	f89d 000c 	ldrb.w	r0, [sp, #12]
    7590:	f88d 0014 	strb.w	r0, [sp, #20]
    7594:	f89d 0010 	ldrb.w	r0, [sp, #16]
    7598:	f88d 0015 	strb.w	r0, [sp, #21]
    759c:	f8bd 0008 	ldrh.w	r0, [sp, #8]
    75a0:	f8ad 0016 	strh.w	r0, [sp, #22]
    75a4:	a905      	add	r1, sp, #20
    75a6:	4620      	mov	r0, r4
    75a8:	f006 fb79 	bl	dc9e <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    75ac:	f7fb fc22 	bl	2df4 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    75b0:	210c      	movs	r1, #12
    75b2:	fbb0 f2f1 	udiv	r2, r0, r1
    75b6:	fb01 0012 	mls	r0, r1, r2, r0
    75ba:	1d40      	adds	r0, r0, #5
    75bc:	b2c0      	uxtb	r0, r0
    75be:	f884 00b9 	strb.w	r0, [r4, #185]	; 0xb9
    75c2:	2809      	cmp	r0, #9
    75c4:	d202      	bcs.n	75cc <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x310>
    75c6:	3008      	adds	r0, #8
    75c8:	f884 00b9 	strb.w	r0, [r4, #185]	; 0xb9
    75cc:	2101      	movs	r1, #1
    75ce:	4620      	mov	r0, r4
    75d0:	f7fa ffd0 	bl	2574 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    75d4:	b007      	add	sp, #28
    75d6:	4628      	mov	r0, r5
    75d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    75dc:	ffffffff 	.word	0xffffffff
    75e0:	0000001f 	.word	0x0000001f
    75e4:	20000264 	.word	0x20000264
    75e8:	2000110c 	.word	0x2000110c
    75ec:	4a09      	ldr	r2, [pc, #36]	; (7614 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x358>)
    75ee:	4290      	cmp	r0, r2
    75f0:	d80b      	bhi.n	760a <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x34e>
    75f2:	2901      	cmp	r1, #1
    75f4:	d002      	beq.n	75fc <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x340>
    75f6:	2904      	cmp	r1, #4
    75f8:	d003      	beq.n	7602 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x346>
    75fa:	e008      	b.n	760e <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x352>
    75fc:	f240 7153 	movw	r1, #1875	; 0x753
    7600:	e001      	b.n	7606 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x34a>
    7602:	f640 11c4 	movw	r1, #2500	; 0x9c4
    7606:	4288      	cmp	r0, r1
    7608:	d201      	bcs.n	760e <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x352>
    760a:	2000      	movs	r0, #0
    760c:	4770      	bx	lr
    760e:	2001      	movs	r0, #1
    7610:	4770      	bx	lr
    7612:	0000      	.short	0x0000
    7614:	0270fd8f 	.word	0x0270fd8f
    7618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    761c:	b088      	sub	sp, #32
    761e:	4604      	mov	r4, r0
    7620:	8800      	ldrh	r0, [r0, #0]
    7622:	a906      	add	r1, sp, #24
    7624:	f006 fa61 	bl	daea <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    7628:	2800      	cmp	r0, #0
    762a:	d147      	bne.n	76bc <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x400>
    762c:	9807      	ldr	r0, [sp, #28]
    762e:	f890 1188 	ldrb.w	r1, [r0, #392]	; 0x188
    7632:	f88d 1008 	strb.w	r1, [sp, #8]
    7636:	9902      	ldr	r1, [sp, #8]
    7638:	9102      	str	r1, [sp, #8]
    763a:	f89d 1008 	ldrb.w	r1, [sp, #8]
    763e:	3088      	adds	r0, #136	; 0x88
    7640:	b101      	cbz	r1, 7644 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x388>
    7642:	2101      	movs	r1, #1
    7644:	f88d 100c 	strb.w	r1, [sp, #12]
    7648:	7f81      	ldrb	r1, [r0, #30]
    764a:	f04f 0801 	mov.w	r8, #1
    764e:	291e      	cmp	r1, #30
    7650:	d102      	bne.n	7658 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x39c>
    7652:	f89d 100c 	ldrb.w	r1, [sp, #12]
    7656:	b149      	cbz	r1, 766c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x3b0>
    7658:	f05f 0100 	movs.w	r1, #0
    765c:	f88d 1004 	strb.w	r1, [sp, #4]
    7660:	2105      	movs	r1, #5
    7662:	306e      	adds	r0, #110	; 0x6e
    7664:	f007 ff37 	bl	f4d6 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x94>
    7668:	b110      	cbz	r0, 7670 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x3b4>
    766a:	e004      	b.n	7676 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x3ba>
    766c:	2101      	movs	r1, #1
    766e:	e7f5      	b.n	765c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x3a0>
    7670:	f89d 0004 	ldrb.w	r0, [sp, #4]
    7674:	b308      	cbz	r0, 76ba <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x3fe>
    7676:	8921      	ldrh	r1, [r4, #8]
    7678:	88e0      	ldrh	r0, [r4, #6]
    767a:	f008 fb4d 	bl	fd18 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9c>
    767e:	2800      	cmp	r0, #0
    7680:	d11c      	bne.n	76bc <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x400>
    7682:	88a1      	ldrh	r1, [r4, #4]
    7684:	8860      	ldrh	r0, [r4, #2]
    7686:	f008 fb47 	bl	fd18 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9c>
    768a:	2800      	cmp	r0, #0
    768c:	d116      	bne.n	76bc <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x400>
    768e:	8921      	ldrh	r1, [r4, #8]
    7690:	88e0      	ldrh	r0, [r4, #6]
    7692:	f008 fb37 	bl	fd04 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x88>
    7696:	2800      	cmp	r0, #0
    7698:	d110      	bne.n	76bc <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x400>
    769a:	88a1      	ldrh	r1, [r4, #4]
    769c:	8860      	ldrh	r0, [r4, #2]
    769e:	f008 fb31 	bl	fd04 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x88>
    76a2:	0006      	movs	r6, r0
    76a4:	d10a      	bne.n	76bc <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x400>
    76a6:	9807      	ldr	r0, [sp, #28]
    76a8:	f500 759d 	add.w	r5, r0, #314	; 0x13a
    76ac:	27ff      	movs	r7, #255	; 0xff
    76ae:	706f      	strb	r7, [r5, #1]
    76b0:	f89d 100c 	ldrb.w	r1, [sp, #12]
    76b4:	b129      	cbz	r1, 76c2 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x406>
    76b6:	263a      	movs	r6, #58	; 0x3a
    76b8:	e02e      	b.n	7718 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x45c>
    76ba:	201a      	movs	r0, #26
    76bc:	b008      	add	sp, #32
    76be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    76c2:	4641      	mov	r1, r8
    76c4:	aa03      	add	r2, sp, #12
    76c6:	f008 fc78 	bl	ffba <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x33e>
    76ca:	8861      	ldrh	r1, [r4, #2]
    76cc:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    76d0:	4281      	cmp	r1, r0
    76d2:	d200      	bcs.n	76d6 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x41a>
    76d4:	4608      	mov	r0, r1
    76d6:	80e8      	strh	r0, [r5, #6]
    76d8:	88a1      	ldrh	r1, [r4, #4]
    76da:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    76de:	4281      	cmp	r1, r0
    76e0:	d200      	bcs.n	76e4 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x428>
    76e2:	4608      	mov	r0, r1
    76e4:	8128      	strh	r0, [r5, #8]
    76e6:	88e2      	ldrh	r2, [r4, #6]
    76e8:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    76ec:	428a      	cmp	r2, r1
    76ee:	d200      	bcs.n	76f2 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x436>
    76f0:	4611      	mov	r1, r2
    76f2:	8069      	strh	r1, [r5, #2]
    76f4:	8922      	ldrh	r2, [r4, #8]
    76f6:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    76fa:	428a      	cmp	r2, r1
    76fc:	d200      	bcs.n	7700 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x444>
    76fe:	4611      	mov	r1, r2
    7700:	f640 0248 	movw	r2, #2120	; 0x848
    7704:	80a9      	strh	r1, [r5, #4]
    7706:	4291      	cmp	r1, r2
    7708:	d300      	bcc.n	770c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x450>
    770a:	4611      	mov	r1, r2
    770c:	80a9      	strh	r1, [r5, #4]
    770e:	4290      	cmp	r0, r2
    7710:	d200      	bcs.n	7714 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x458>
    7712:	4602      	mov	r2, r0
    7714:	812a      	strh	r2, [r5, #8]
    7716:	702f      	strb	r7, [r5, #0]
    7718:	2000      	movs	r0, #0
    771a:	7068      	strb	r0, [r5, #1]
    771c:	4630      	mov	r0, r6
    771e:	e7cd      	b.n	76bc <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x400>
    7720:	b510      	push	{r4, lr}
    7722:	4604      	mov	r4, r0
    7724:	88c1      	ldrh	r1, [r0, #6]
    7726:	8880      	ldrh	r0, [r0, #4]
    7728:	f008 faf6 	bl	fd18 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9c>
    772c:	2800      	cmp	r0, #0
    772e:	d10f      	bne.n	7750 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x494>
    7730:	8861      	ldrh	r1, [r4, #2]
    7732:	8820      	ldrh	r0, [r4, #0]
    7734:	f008 faf0 	bl	fd18 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9c>
    7738:	2800      	cmp	r0, #0
    773a:	d109      	bne.n	7750 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x494>
    773c:	4805      	ldr	r0, [pc, #20]	; (7754 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x498>)
    773e:	88a1      	ldrh	r1, [r4, #4]
    7740:	8081      	strh	r1, [r0, #4]
    7742:	8821      	ldrh	r1, [r4, #0]
    7744:	8001      	strh	r1, [r0, #0]
    7746:	88e1      	ldrh	r1, [r4, #6]
    7748:	80c1      	strh	r1, [r0, #6]
    774a:	8861      	ldrh	r1, [r4, #2]
    774c:	8041      	strh	r1, [r0, #2]
    774e:	2000      	movs	r0, #0
    7750:	bd10      	pop	{r4, pc}
    7752:	0000      	.short	0x0000
    7754:	2000026a 	.word	0x2000026a
    7758:	0c124b0c 	.word	0x0c124b0c
    775c:	124b0059 	.word	0x124b0059
	...

00007768 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    7768:	b570      	push	{r4, r5, r6, lr}
    776a:	460d      	mov	r5, r1
    776c:	f7fb f9d0 	bl	2b10 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    7770:	4c05      	ldr	r4, [pc, #20]	; (7788 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x20>)
    7772:	6065      	str	r5, [r4, #4]
    7774:	68a0      	ldr	r0, [r4, #8]
    7776:	f008 fcd1 	bl	1011c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4a0>
    777a:	f008 f9f7 	bl	fb6c <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    777e:	f7fb fb2d 	bl	2ddc <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    7782:	2001      	movs	r0, #1
    7784:	7020      	strb	r0, [r4, #0]
    7786:	bd70      	pop	{r4, r5, r6, pc}
    7788:	20000274 	.word	0x20000274

0000778c <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ>:
    778c:	4801      	ldr	r0, [pc, #4]	; (7794 <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ+0x8>)
    778e:	7800      	ldrb	r0, [r0, #0]
    7790:	4770      	bx	lr
    7792:	0000      	.short	0x0000
    7794:	20000274 	.word	0x20000274

00007798 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    7798:	b510      	push	{r4, lr}
    779a:	4c06      	ldr	r4, [pc, #24]	; (77b4 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x1c>)
    779c:	68e0      	ldr	r0, [r4, #12]
    779e:	f008 fcbd 	bl	1011c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4a0>
    77a2:	6920      	ldr	r0, [r4, #16]
    77a4:	f008 fcba 	bl	1011c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4a0>
    77a8:	f008 fa68 	bl	fc7c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    77ac:	2000      	movs	r0, #0
    77ae:	7020      	strb	r0, [r4, #0]
    77b0:	bd10      	pop	{r4, pc}
    77b2:	0000      	.short	0x0000
    77b4:	20000274 	.word	0x20000274

000077b8 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI>:
    77b8:	b510      	push	{r4, lr}
    77ba:	4908      	ldr	r1, [pc, #32]	; (77dc <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x24>)
    77bc:	4808      	ldr	r0, [pc, #32]	; (77e0 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x28>)
    77be:	f008 fca0 	bl	10102 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x486>
    77c2:	4807      	ldr	r0, [pc, #28]	; (77e0 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x28>)
    77c4:	4907      	ldr	r1, [pc, #28]	; (77e4 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x2c>)
    77c6:	1d00      	adds	r0, r0, #4
    77c8:	f008 fc9b 	bl	10102 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x486>
    77cc:	4804      	ldr	r0, [pc, #16]	; (77e0 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x28>)
    77ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    77d2:	4905      	ldr	r1, [pc, #20]	; (77e8 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x30>)
    77d4:	3008      	adds	r0, #8
    77d6:	f008 bc94 	b.w	10102 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x486>
    77da:	0000      	.short	0x0000
    77dc:	20000290 	.word	0x20000290
    77e0:	2000027c 	.word	0x2000027c
    77e4:	20000298 	.word	0x20000298
    77e8:	20000288 	.word	0x20000288
    77ec:	b510      	push	{r4, lr}
    77ee:	f7fb fe29 	bl	3444 <sym_K7SQKMVWESLZUZE22L4CEOMCL4JSVJET4SYEPLI>
    77f2:	f000 f813 	bl	781c <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x64>
    77f6:	f006 f868 	bl	d8ca <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
    77fa:	4907      	ldr	r1, [pc, #28]	; (7818 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x60>)
    77fc:	f5a1 7081 	sub.w	r0, r1, #258	; 0x102
    7800:	f7f9 ff60 	bl	16c4 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>
    7804:	2000      	movs	r0, #0
    7806:	f005 ffbe 	bl	d786 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    780a:	f7fd fe6d 	bl	54e8 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY>
    780e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7812:	f7fb b983 	b.w	2b1c <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY>
    7816:	0000      	.short	0x0000
    7818:	2000195a 	.word	0x2000195a
    781c:	b510      	push	{r4, lr}
    781e:	f7ff fb5f 	bl	6ee0 <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA>
    7822:	f7fd f885 	bl	4930 <sym_ONCJZGDCVZ7ETEDMUY5VMUUWXXIFFJBUOZSJQ3Q>
    7826:	f7fd fcf1 	bl	520c <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI>
    782a:	f7ff fcfd 	bl	7228 <sym_UY577SX5HIKP7SN7G6RHWTFDXAXFXXF32S4VJUA>
    782e:	4601      	mov	r1, r0
    7830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7834:	4801      	ldr	r0, [pc, #4]	; (783c <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x84>)
    7836:	f7fb bd61 	b.w	32fc <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY>
    783a:	0000      	.short	0x0000
    783c:	20001858 	.word	0x20001858

00007840 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    7840:	4a04      	ldr	r2, [pc, #16]	; (7854 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x14>)
    7842:	08c1      	lsrs	r1, r0, #3
    7844:	f000 0307 	and.w	r3, r0, #7
    7848:	2001      	movs	r0, #1
    784a:	4098      	lsls	r0, r3
    784c:	5c53      	ldrb	r3, [r2, r1]
    784e:	4303      	orrs	r3, r0
    7850:	5453      	strb	r3, [r2, r1]
    7852:	4770      	bx	lr
    7854:	20000020 	.word	0x20000020

00007858 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    7858:	4901      	ldr	r1, [pc, #4]	; (7860 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    785a:	e9d1 0100 	ldrd	r0, r1, [r1]
    785e:	4770      	bx	lr
    7860:	20000020 	.word	0x20000020

00007864 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    7864:	4806      	ldr	r0, [pc, #24]	; (7880 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x1c>)
    7866:	8801      	ldrh	r1, [r0, #0]
    7868:	7900      	ldrb	r0, [r0, #4]
    786a:	0602      	lsls	r2, r0, #24
    786c:	ea42 2011 	orr.w	r0, r2, r1, lsr #8
    7870:	f000 0001 	and.w	r0, r0, #1
    7874:	1800      	adds	r0, r0, r0
    7876:	b2c0      	uxtb	r0, r0
    7878:	f040 0001 	orr.w	r0, r0, #1
    787c:	4770      	bx	lr
    787e:	0000      	.short	0x0000
    7880:	20000020 	.word	0x20000020

00007884 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
    7884:	b510      	push	{r4, lr}
    7886:	f004 fc99 	bl	c1bc <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    788a:	2200      	movs	r2, #0
    788c:	4b08      	ldr	r3, [pc, #32]	; (78b0 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
    788e:	4611      	mov	r1, r2
    7890:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    7894:	4284      	cmp	r4, r0
    7896:	d303      	bcc.n	78a0 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
    7898:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    789c:	7882      	ldrb	r2, [r0, #2]
    789e:	e003      	b.n	78a8 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
    78a0:	1c49      	adds	r1, r1, #1
    78a2:	b2c9      	uxtb	r1, r1
    78a4:	290c      	cmp	r1, #12
    78a6:	d3f3      	bcc.n	7890 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
    78a8:	4802      	ldr	r0, [pc, #8]	; (78b4 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
    78aa:	7002      	strb	r2, [r0, #0]
    78ac:	bd10      	pop	{r4, pc}
    78ae:	0000      	.short	0x0000
    78b0:	00010198 	.word	0x00010198
    78b4:	20000359 	.word	0x20000359

000078b8 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY>:
    78b8:	4802      	ldr	r0, [pc, #8]	; (78c4 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY+0xc>)
    78ba:	7800      	ldrb	r0, [r0, #0]
    78bc:	f000 0007 	and.w	r0, r0, #7
    78c0:	4770      	bx	lr
    78c2:	0000      	.short	0x0000
    78c4:	20000359 	.word	0x20000359

000078c8 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    78c8:	b570      	push	{r4, r5, r6, lr}
    78ca:	4605      	mov	r5, r0
    78cc:	4616      	mov	r6, r2
    78ce:	460c      	mov	r4, r1
    78d0:	2002      	movs	r0, #2
    78d2:	f000 f9b7 	bl	7c44 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    78d6:	4906      	ldr	r1, [pc, #24]	; (78f0 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    78d8:	2001      	movs	r0, #1
    78da:	1ef6      	subs	r6, r6, #3
    78dc:	7008      	strb	r0, [r1, #0]
    78de:	4805      	ldr	r0, [pc, #20]	; (78f4 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    78e0:	6006      	str	r6, [r0, #0]
    78e2:	4804      	ldr	r0, [pc, #16]	; (78f4 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    78e4:	3808      	subs	r0, #8
    78e6:	6005      	str	r5, [r0, #0]
    78e8:	1f00      	subs	r0, r0, #4
    78ea:	6004      	str	r4, [r0, #0]
    78ec:	bd70      	pop	{r4, r5, r6, pc}
    78ee:	0000      	.short	0x0000
    78f0:	2000035a 	.word	0x2000035a
    78f4:	4000f510 	.word	0x4000f510

000078f8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    78f8:	b510      	push	{r4, lr}
    78fa:	4c0c      	ldr	r4, [pc, #48]	; (792c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    78fc:	7820      	ldrb	r0, [r4, #0]
    78fe:	b180      	cbz	r0, 7922 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    7900:	490b      	ldr	r1, [pc, #44]	; (7930 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    7902:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    7906:	6008      	str	r0, [r1, #0]
    7908:	f000 f86a 	bl	79e0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    790c:	2100      	movs	r1, #0
    790e:	b120      	cbz	r0, 791a <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    7910:	2001      	movs	r0, #1
    7912:	7060      	strb	r0, [r4, #1]
    7914:	4807      	ldr	r0, [pc, #28]	; (7934 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    7916:	6800      	ldr	r0, [r0, #0]
    7918:	e001      	b.n	791e <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    791a:	7061      	strb	r1, [r4, #1]
    791c:	2010      	movs	r0, #16
    791e:	70a0      	strb	r0, [r4, #2]
    7920:	7021      	strb	r1, [r4, #0]
    7922:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7926:	2000      	movs	r0, #0
    7928:	f000 b98c 	b.w	7c44 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    792c:	2000035a 	.word	0x2000035a
    7930:	4001f508 	.word	0x4001f508
    7934:	4000f400 	.word	0x4000f400

00007938 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    7938:	b510      	push	{r4, lr}
    793a:	2002      	movs	r0, #2
    793c:	f000 f982 	bl	7c44 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    7940:	4904      	ldr	r1, [pc, #16]	; (7954 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    7942:	2001      	movs	r0, #1
    7944:	7008      	strb	r0, [r1, #0]
    7946:	f000 f859 	bl	79fc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    794a:	4903      	ldr	r1, [pc, #12]	; (7958 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    794c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    7950:	6008      	str	r0, [r1, #0]
    7952:	bd10      	pop	{r4, pc}
    7954:	2000035a 	.word	0x2000035a
    7958:	4001f504 	.word	0x4001f504

0000795c <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    795c:	4803      	ldr	r0, [pc, #12]	; (796c <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    795e:	2100      	movs	r1, #0
    7960:	7001      	strb	r1, [r0, #0]
    7962:	7041      	strb	r1, [r0, #1]
    7964:	2110      	movs	r1, #16
    7966:	7081      	strb	r1, [r0, #2]
    7968:	4770      	bx	lr
    796a:	0000      	.short	0x0000
    796c:	2000035a 	.word	0x2000035a

00007970 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    7970:	4807      	ldr	r0, [pc, #28]	; (7990 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    7972:	b510      	push	{r4, lr}
    7974:	7801      	ldrb	r1, [r0, #0]
    7976:	b141      	cbz	r1, 798a <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    7978:	f000 f832 	bl	79e0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    797c:	b118      	cbz	r0, 7986 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    797e:	4805      	ldr	r0, [pc, #20]	; (7994 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    7980:	6800      	ldr	r0, [r0, #0]
    7982:	b2c0      	uxtb	r0, r0
    7984:	bd10      	pop	{r4, pc}
    7986:	2010      	movs	r0, #16
    7988:	bd10      	pop	{r4, pc}
    798a:	7880      	ldrb	r0, [r0, #2]
    798c:	bd10      	pop	{r4, pc}
    798e:	0000      	.short	0x0000
    7990:	2000035a 	.word	0x2000035a
    7994:	4000f400 	.word	0x4000f400

00007998 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    7998:	4808      	ldr	r0, [pc, #32]	; (79bc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    799a:	b510      	push	{r4, lr}
    799c:	7801      	ldrb	r1, [r0, #0]
    799e:	b159      	cbz	r1, 79b8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    79a0:	4807      	ldr	r0, [pc, #28]	; (79c0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    79a2:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    79a6:	b128      	cbz	r0, 79b4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    79a8:	f000 f80c 	bl	79c4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    79ac:	2800      	cmp	r0, #0
    79ae:	d000      	beq.n	79b2 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    79b0:	2001      	movs	r0, #1
    79b2:	bd10      	pop	{r4, pc}
    79b4:	2002      	movs	r0, #2
    79b6:	bd10      	pop	{r4, pc}
    79b8:	7840      	ldrb	r0, [r0, #1]
    79ba:	bd10      	pop	{r4, pc}
    79bc:	2000035a 	.word	0x2000035a
    79c0:	4000f000 	.word	0x4000f000
    79c4:	4805      	ldr	r0, [pc, #20]	; (79dc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    79c6:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    79ca:	b111      	cbz	r1, 79d2 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    79cc:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    79d0:	b108      	cbz	r0, 79d6 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    79d2:	2000      	movs	r0, #0
    79d4:	4770      	bx	lr
    79d6:	2001      	movs	r0, #1
    79d8:	4770      	bx	lr
    79da:	0000      	.short	0x0000
    79dc:	4000f000 	.word	0x4000f000
    79e0:	4805      	ldr	r0, [pc, #20]	; (79f8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    79e2:	b510      	push	{r4, lr}
    79e4:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    79e8:	b120      	cbz	r0, 79f4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    79ea:	f7ff ffeb 	bl	79c4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    79ee:	b108      	cbz	r0, 79f4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    79f0:	2001      	movs	r0, #1
    79f2:	bd10      	pop	{r4, pc}
    79f4:	2000      	movs	r0, #0
    79f6:	bd10      	pop	{r4, pc}
    79f8:	4000f000 	.word	0x4000f000
    79fc:	4804      	ldr	r0, [pc, #16]	; (7a10 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    79fe:	2100      	movs	r1, #0
    7a00:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    7a04:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    7a08:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    7a0c:	4770      	bx	lr
    7a0e:	0000      	.short	0x0000
    7a10:	4000f000 	.word	0x4000f000

00007a14 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>:
    7a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7a18:	4604      	mov	r4, r0
    7a1a:	461e      	mov	r6, r3
    7a1c:	4690      	mov	r8, r2
    7a1e:	460f      	mov	r7, r1
    7a20:	2001      	movs	r0, #1
    7a22:	f000 f90f 	bl	7c44 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    7a26:	4d1e      	ldr	r5, [pc, #120]	; (7aa0 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x8c>)
    7a28:	481e      	ldr	r0, [pc, #120]	; (7aa4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x90>)
    7a2a:	f004 0103 	and.w	r1, r4, #3
    7a2e:	712e      	strb	r6, [r5, #4]
    7a30:	6800      	ldr	r0, [r0, #0]
    7a32:	0432      	lsls	r2, r6, #16
    7a34:	f361 0007 	bfi	r0, r1, #0, #8
    7a38:	f366 200f 	bfi	r0, r6, #8, #8
    7a3c:	0c00      	lsrs	r0, r0, #16
    7a3e:	4e1a      	ldr	r6, [pc, #104]	; (7aa8 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
    7a40:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
    7a44:	4308      	orrs	r0, r1
    7a46:	f8c6 0504 	str.w	r0, [r6, #1284]	; 0x504
    7a4a:	4818      	ldr	r0, [pc, #96]	; (7aac <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
    7a4c:	6007      	str	r7, [r0, #0]
    7a4e:	f008 fd91 	bl	10574 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    7a52:	b938      	cbnz	r0, 7a64 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x50>
    7a54:	4815      	ldr	r0, [pc, #84]	; (7aac <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
    7a56:	3010      	adds	r0, #16
    7a58:	6801      	ldr	r1, [r0, #0]
    7a5a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    7a5e:	ea41 0108 	orr.w	r1, r1, r8
    7a62:	6001      	str	r1, [r0, #0]
    7a64:	f000 f8e4 	bl	7c30 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
    7a68:	b10c      	cbz	r4, 7a6e <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x5a>
    7a6a:	2c04      	cmp	r4, #4
    7a6c:	d107      	bne.n	7a7e <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x6a>
    7a6e:	4811      	ldr	r0, [pc, #68]	; (7ab4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0xa0>)
    7a70:	490d      	ldr	r1, [pc, #52]	; (7aa8 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
    7a72:	4a0f      	ldr	r2, [pc, #60]	; (7ab0 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x9c>)
    7a74:	1d09      	adds	r1, r1, #4
    7a76:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
    7a7a:	f8c0 1514 	str.w	r1, [r0, #1300]	; 0x514
    7a7e:	2001      	movs	r0, #1
    7a80:	7068      	strb	r0, [r5, #1]
    7a82:	70ec      	strb	r4, [r5, #3]
    7a84:	b11c      	cbz	r4, 7a8e <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    7a86:	2c01      	cmp	r4, #1
    7a88:	d001      	beq.n	7a8e <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    7a8a:	2c02      	cmp	r4, #2
    7a8c:	d106      	bne.n	7a9c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x88>
    7a8e:	7028      	strb	r0, [r5, #0]
    7a90:	2100      	movs	r1, #0
    7a92:	f8c6 1100 	str.w	r1, [r6, #256]	; 0x100
    7a96:	f8c6 1200 	str.w	r1, [r6, #512]	; 0x200
    7a9a:	6030      	str	r0, [r6, #0]
    7a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7aa0:	2000035d 	.word	0x2000035d
    7aa4:	00007c40 	.word	0x00007c40
    7aa8:	4000f000 	.word	0x4000f000
    7aac:	4000f508 	.word	0x4000f508
    7ab0:	4000f100 	.word	0x4000f100
    7ab4:	4001f088 	.word	0x4001f088

00007ab8 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>:
    7ab8:	b570      	push	{r4, r5, r6, lr}
    7aba:	4a1c      	ldr	r2, [pc, #112]	; (7b2c <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x74>)
    7abc:	7853      	ldrb	r3, [r2, #1]
    7abe:	b1a3      	cbz	r3, 7aea <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x32>
    7ac0:	4b1b      	ldr	r3, [pc, #108]	; (7b30 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x78>)
    7ac2:	6019      	str	r1, [r3, #0]
    7ac4:	1d19      	adds	r1, r3, #4
    7ac6:	6008      	str	r0, [r1, #0]
    7ac8:	2501      	movs	r5, #1
    7aca:	7095      	strb	r5, [r2, #2]
    7acc:	4610      	mov	r0, r2
    7ace:	78d6      	ldrb	r6, [r2, #3]
    7ad0:	4b18      	ldr	r3, [pc, #96]	; (7b34 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
    7ad2:	7800      	ldrb	r0, [r0, #0]
    7ad4:	4c18      	ldr	r4, [pc, #96]	; (7b38 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x80>)
    7ad6:	2100      	movs	r1, #0
    7ad8:	b156      	cbz	r6, 7af0 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x38>
    7ada:	2e04      	cmp	r6, #4
    7adc:	d01b      	beq.n	7b16 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5e>
    7ade:	b308      	cbz	r0, 7b24 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6c>
    7ae0:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    7ae4:	0668      	lsls	r0, r5, #25
    7ae6:	6018      	str	r0, [r3, #0]
    7ae8:	bd70      	pop	{r4, r5, r6, pc}
    7aea:	f240 11bd 	movw	r1, #445	; 0x1bd
    7aee:	e01a      	b.n	7b26 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
    7af0:	b178      	cbz	r0, 7b12 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5a>
    7af2:	4620      	mov	r0, r4
    7af4:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    7af8:	f44f 3600 	mov.w	r6, #131072	; 0x20000
    7afc:	601e      	str	r6, [r3, #0]
    7afe:	1271      	asrs	r1, r6, #9
    7b00:	f008 fbc2 	bl	10288 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    7b04:	2800      	cmp	r0, #0
    7b06:	d0ef      	beq.n	7ae8 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x30>
    7b08:	6065      	str	r5, [r4, #4]
    7b0a:	480a      	ldr	r0, [pc, #40]	; (7b34 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
    7b0c:	1d00      	adds	r0, r0, #4
    7b0e:	6006      	str	r6, [r0, #0]
    7b10:	bd70      	pop	{r4, r5, r6, pc}
    7b12:	21b3      	movs	r1, #179	; 0xb3
    7b14:	e007      	b.n	7b26 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
    7b16:	7015      	strb	r5, [r2, #0]
    7b18:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    7b1c:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
    7b20:	6025      	str	r5, [r4, #0]
    7b22:	bd70      	pop	{r4, r5, r6, pc}
    7b24:	21c6      	movs	r1, #198	; 0xc6
    7b26:	203c      	movs	r0, #60	; 0x3c
    7b28:	f7f8 ffaa 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7b2c:	2000035d 	.word	0x2000035d
    7b30:	4000f50c 	.word	0x4000f50c
    7b34:	4001f504 	.word	0x4001f504
    7b38:	4000f000 	.word	0x4000f000

00007b3c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    7b3c:	b570      	push	{r4, r5, r6, lr}
    7b3e:	4d05      	ldr	r5, [pc, #20]	; (7b54 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x18>)
    7b40:	2400      	movs	r4, #0
    7b42:	7828      	ldrb	r0, [r5, #0]
    7b44:	b110      	cbz	r0, 7b4c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x10>
    7b46:	f000 f873 	bl	7c30 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
    7b4a:	702c      	strb	r4, [r5, #0]
    7b4c:	706c      	strb	r4, [r5, #1]
    7b4e:	70ac      	strb	r4, [r5, #2]
    7b50:	bd70      	pop	{r4, r5, r6, pc}
    7b52:	0000      	.short	0x0000
    7b54:	2000035d 	.word	0x2000035d

00007b58 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    7b58:	4802      	ldr	r0, [pc, #8]	; (7b64 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0xc>)
    7b5a:	2100      	movs	r1, #0
    7b5c:	7001      	strb	r1, [r0, #0]
    7b5e:	7041      	strb	r1, [r0, #1]
    7b60:	7081      	strb	r1, [r0, #2]
    7b62:	4770      	bx	lr
    7b64:	2000035d 	.word	0x2000035d

00007b68 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    7b68:	480b      	ldr	r0, [pc, #44]	; (7b98 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x30>)
    7b6a:	b510      	push	{r4, lr}
    7b6c:	7800      	ldrb	r0, [r0, #0]
    7b6e:	b158      	cbz	r0, 7b88 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>
    7b70:	f44f 7182 	mov.w	r1, #260	; 0x104
    7b74:	4809      	ldr	r0, [pc, #36]	; (7b9c <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x34>)
    7b76:	f008 fb87 	bl	10288 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    7b7a:	b140      	cbz	r0, 7b8e <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x26>
    7b7c:	4808      	ldr	r0, [pc, #32]	; (7ba0 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x38>)
    7b7e:	6800      	ldr	r0, [r0, #0]
    7b80:	2800      	cmp	r0, #0
    7b82:	d000      	beq.n	7b86 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1e>
    7b84:	2001      	movs	r0, #1
    7b86:	bd10      	pop	{r4, pc}
    7b88:	f240 2123 	movw	r1, #547	; 0x223
    7b8c:	e001      	b.n	7b92 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x2a>
    7b8e:	f44f 7109 	mov.w	r1, #548	; 0x224
    7b92:	203c      	movs	r0, #60	; 0x3c
    7b94:	f7f8 ff74 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7b98:	2000035d 	.word	0x2000035d
    7b9c:	4000f000 	.word	0x4000f000
    7ba0:	4000f400 	.word	0x4000f400

00007ba4 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    7ba4:	4801      	ldr	r0, [pc, #4]	; (7bac <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    7ba6:	2101      	movs	r1, #1
    7ba8:	6081      	str	r1, [r0, #8]
    7baa:	4770      	bx	lr
    7bac:	4000f000 	.word	0x4000f000

00007bb0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    7bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7bb4:	481b      	ldr	r0, [pc, #108]	; (7c24 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x74>)
    7bb6:	7800      	ldrb	r0, [r0, #0]
    7bb8:	b1d8      	cbz	r0, 7bf2 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x42>
    7bba:	f8df 806c 	ldr.w	r8, [pc, #108]	; 7c28 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    7bbe:	f44f 7682 	mov.w	r6, #260	; 0x104
    7bc2:	4631      	mov	r1, r6
    7bc4:	4640      	mov	r0, r8
    7bc6:	f008 fb5f 	bl	10288 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    7bca:	2800      	cmp	r0, #0
    7bcc:	d128      	bne.n	7c20 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>
    7bce:	2002      	movs	r0, #2
    7bd0:	f8c8 0304 	str.w	r0, [r8, #772]	; 0x304
    7bd4:	4c15      	ldr	r4, [pc, #84]	; (7c2c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x7c>)
    7bd6:	6820      	ldr	r0, [r4, #0]
    7bd8:	43c0      	mvns	r0, r0
    7bda:	f340 1500 	sbfx	r5, r0, #4, #1
    7bde:	6820      	ldr	r0, [r4, #0]
    7be0:	f040 0010 	orr.w	r0, r0, #16
    7be4:	6020      	str	r0, [r4, #0]
    7be6:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    7bea:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    7bee:	1c6d      	adds	r5, r5, #1
    7bf0:	e008      	b.n	7c04 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x54>
    7bf2:	f240 212f 	movw	r1, #559	; 0x22f
    7bf6:	203c      	movs	r0, #60	; 0x3c
    7bf8:	f7f8 ff42 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7bfc:	f8c9 7280 	str.w	r7, [r9, #640]	; 0x280
    7c00:	f008 fcf8 	bl	105f4 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    7c04:	4631      	mov	r1, r6
    7c06:	4640      	mov	r0, r8
    7c08:	f008 fb3e 	bl	10288 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    7c0c:	2800      	cmp	r0, #0
    7c0e:	d0f5      	beq.n	7bfc <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x4c>
    7c10:	b91d      	cbnz	r5, 7c1a <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6a>
    7c12:	6820      	ldr	r0, [r4, #0]
    7c14:	f020 0010 	bic.w	r0, r0, #16
    7c18:	6020      	str	r0, [r4, #0]
    7c1a:	2002      	movs	r0, #2
    7c1c:	f8c8 0308 	str.w	r0, [r8, #776]	; 0x308
    7c20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7c24:	2000035d 	.word	0x2000035d
    7c28:	4000f000 	.word	0x4000f000
    7c2c:	e000ed10 	.word	0xe000ed10
    7c30:	4902      	ldr	r1, [pc, #8]	; (7c3c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x8c>)
    7c32:	4801      	ldr	r0, [pc, #4]	; (7c38 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x88>)
    7c34:	6008      	str	r0, [r1, #0]
    7c36:	4770      	bx	lr
    7c38:	02020000 	.word	0x02020000
    7c3c:	4001f508 	.word	0x4001f508
    7c40:	00010000 	.word	0x00010000

00007c44 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    7c44:	b510      	push	{r4, lr}
    7c46:	4604      	mov	r4, r0
    7c48:	f000 f820 	bl	7c8c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
    7c4c:	2c00      	cmp	r4, #0
    7c4e:	d00e      	beq.n	7c6e <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2a>
    7c50:	4a0b      	ldr	r2, [pc, #44]	; (7c80 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    7c52:	480b      	ldr	r0, [pc, #44]	; (7c80 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    7c54:	490b      	ldr	r1, [pc, #44]	; (7c84 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    7c56:	3214      	adds	r2, #20
    7c58:	2c01      	cmp	r4, #1
    7c5a:	d005      	beq.n	7c68 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x24>
    7c5c:	2c02      	cmp	r4, #2
    7c5e:	d007      	beq.n	7c70 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2c>
    7c60:	2182      	movs	r1, #130	; 0x82
    7c62:	203d      	movs	r0, #61	; 0x3d
    7c64:	f7f8 ff0c 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7c68:	2302      	movs	r3, #2
    7c6a:	6003      	str	r3, [r0, #0]
    7c6c:	6011      	str	r1, [r2, #0]
    7c6e:	bd10      	pop	{r4, pc}
    7c70:	2303      	movs	r3, #3
    7c72:	6003      	str	r3, [r0, #0]
    7c74:	6011      	str	r1, [r2, #0]
    7c76:	4904      	ldr	r1, [pc, #16]	; (7c88 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    7c78:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    7c7c:	6008      	str	r0, [r1, #0]
    7c7e:	bd10      	pop	{r4, pc}
    7c80:	4000f500 	.word	0x4000f500
    7c84:	20001a5c 	.word	0x20001a5c
    7c88:	4001f504 	.word	0x4001f504
    7c8c:	4805      	ldr	r0, [pc, #20]	; (7ca4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    7c8e:	b510      	push	{r4, lr}
    7c90:	2100      	movs	r1, #0
    7c92:	6001      	str	r1, [r0, #0]
    7c94:	6001      	str	r1, [r0, #0]
    7c96:	f7ff ff51 	bl	7b3c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    7c9a:	4903      	ldr	r1, [pc, #12]	; (7ca8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    7c9c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    7ca0:	6008      	str	r0, [r1, #0]
    7ca2:	bd10      	pop	{r4, pc}
    7ca4:	4000f500 	.word	0x4000f500
    7ca8:	4001f508 	.word	0x4001f508

00007cac <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    7cac:	4805      	ldr	r0, [pc, #20]	; (7cc4 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    7cae:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    7cb2:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    7cb6:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    7cba:	2100      	movs	r1, #0
    7cbc:	f8c0 1560 	str.w	r1, [r0, #1376]	; 0x560
    7cc0:	4770      	bx	lr
    7cc2:	0000      	.short	0x0000
    7cc4:	40001000 	.word	0x40001000

00007cc8 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    7cc8:	4904      	ldr	r1, [pc, #16]	; (7cdc <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    7cca:	f8c1 0560 	str.w	r0, [r1, #1376]	; 0x560
    7cce:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
    7cd2:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    7cd6:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    7cda:	4770      	bx	lr
    7cdc:	40001000 	.word	0x40001000

00007ce0 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>:
    7ce0:	4902      	ldr	r1, [pc, #8]	; (7cec <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I+0xc>)
    7ce2:	5c08      	ldrb	r0, [r1, r0]
    7ce4:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    7ce8:	4770      	bx	lr
    7cea:	0000      	.short	0x0000
    7cec:	000089b2 	.word	0x000089b2

00007cf0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    7cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7cf2:	4c24      	ldr	r4, [pc, #144]	; (7d84 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x94>)
    7cf4:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    7cf8:	f010 0f10 	tst.w	r0, #16
    7cfc:	d001      	beq.n	7d02 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x12>
    7cfe:	2701      	movs	r7, #1
    7d00:	e000      	b.n	7d04 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x14>
    7d02:	2700      	movs	r7, #0
    7d04:	2010      	movs	r0, #16
    7d06:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    7d0a:	2002      	movs	r0, #2
    7d0c:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    7d10:	481d      	ldr	r0, [pc, #116]	; (7d88 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x98>)
    7d12:	2500      	movs	r5, #0
    7d14:	491d      	ldr	r1, [pc, #116]	; (7d8c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9c>)
    7d16:	f880 502c 	strb.w	r5, [r0, #44]	; 0x2c
    7d1a:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
    7d1e:	6008      	str	r0, [r1, #0]
    7d20:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
    7d24:	f44f 7688 	mov.w	r6, #272	; 0x110
    7d28:	f010 0fff 	tst.w	r0, #255	; 0xff
    7d2c:	d019      	beq.n	7d62 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x72>
    7d2e:	20ff      	movs	r0, #255	; 0xff
    7d30:	f88d 0000 	strb.w	r0, [sp]
    7d34:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    7d38:	2001      	movs	r0, #1
    7d3a:	6120      	str	r0, [r4, #16]
    7d3c:	e005      	b.n	7d4a <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x5a>
    7d3e:	bf00      	nop
    7d40:	f89d 0000 	ldrb.w	r0, [sp]
    7d44:	1e40      	subs	r0, r0, #1
    7d46:	f88d 0000 	strb.w	r0, [sp]
    7d4a:	f89d 0000 	ldrb.w	r0, [sp]
    7d4e:	b128      	cbz	r0, 7d5c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6c>
    7d50:	4631      	mov	r1, r6
    7d52:	4620      	mov	r0, r4
    7d54:	f008 fac7 	bl	102e6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    7d58:	2800      	cmp	r0, #0
    7d5a:	d0f1      	beq.n	7d40 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x50>
    7d5c:	f89d 0000 	ldrb.w	r0, [sp]
    7d60:	b158      	cbz	r0, 7d7a <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x8a>
    7d62:	f000 fc15 	bl	8590 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x90>
    7d66:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    7d6a:	f000 fda3 	bl	88b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b4>
    7d6e:	2f00      	cmp	r7, #0
    7d70:	d002      	beq.n	7d78 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x88>
    7d72:	2010      	movs	r0, #16
    7d74:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    7d78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7d7a:	f640 01aa 	movw	r1, #2218	; 0x8aa
    7d7e:	203e      	movs	r0, #62	; 0x3e
    7d80:	f7f8 fe7e 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7d84:	40001000 	.word	0x40001000
    7d88:	20001168 	.word	0x20001168
    7d8c:	4001f508 	.word	0x4001f508

00007d90 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    7d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7d94:	4d18      	ldr	r5, [pc, #96]	; (7df8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x68>)
    7d96:	4607      	mov	r7, r0
    7d98:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    7d9c:	07c2      	lsls	r2, r0, #31
    7d9e:	d00f      	beq.n	7dc0 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x30>
    7da0:	4c16      	ldr	r4, [pc, #88]	; (7dfc <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x6c>)
    7da2:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
    7da6:	f042 0201 	orr.w	r2, r2, #1
    7daa:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
    7dae:	f040 0002 	orr.w	r0, r0, #2
    7db2:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
    7db6:	2601      	movs	r6, #1
    7db8:	b13f      	cbz	r7, 7dca <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x3a>
    7dba:	2f01      	cmp	r7, #1
    7dbc:	d00b      	beq.n	7dd6 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x46>
    7dbe:	e010      	b.n	7de2 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    7dc0:	f240 7185 	movw	r1, #1925	; 0x785
    7dc4:	203e      	movs	r0, #62	; 0x3e
    7dc6:	f7f8 fe5b 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7dca:	4608      	mov	r0, r1
    7dcc:	f000 fdcc 	bl	8968 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x468>
    7dd0:	726e      	strb	r6, [r5, #9]
    7dd2:	6026      	str	r6, [r4, #0]
    7dd4:	e005      	b.n	7de2 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    7dd6:	4608      	mov	r0, r1
    7dd8:	f000 fdac 	bl	8934 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x434>
    7ddc:	2002      	movs	r0, #2
    7dde:	7268      	strb	r0, [r5, #9]
    7de0:	6066      	str	r6, [r4, #4]
    7de2:	4807      	ldr	r0, [pc, #28]	; (7e00 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    7de4:	64c6      	str	r6, [r0, #76]	; 0x4c
    7de6:	4806      	ldr	r0, [pc, #24]	; (7e00 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    7de8:	300c      	adds	r0, #12
    7dea:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    7dee:	4638      	mov	r0, r7
    7df0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7df4:	f000 bd30 	b.w	8858 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x358>
    7df8:	20001168 	.word	0x20001168
    7dfc:	40001000 	.word	0x40001000
    7e00:	40008000 	.word	0x40008000

00007e04 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    7e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7e08:	4c2c      	ldr	r4, [pc, #176]	; (7ebc <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb8>)
    7e0a:	0006      	movs	r6, r0
    7e0c:	4d2c      	ldr	r5, [pc, #176]	; (7ec0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xbc>)
    7e0e:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    7e12:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 7ec4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc0>
    7e16:	f040 0002 	orr.w	r0, r0, #2
    7e1a:	4689      	mov	r9, r1
    7e1c:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    7e20:	f04f 0700 	mov.w	r7, #0
    7e24:	d002      	beq.n	7e2c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x28>
    7e26:	2e01      	cmp	r6, #1
    7e28:	d020      	beq.n	7e6c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x68>
    7e2a:	e036      	b.n	7e9a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    7e2c:	4608      	mov	r0, r1
    7e2e:	f000 fd9b 	bl	8968 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x468>
    7e32:	2001      	movs	r0, #1
    7e34:	7260      	strb	r0, [r4, #9]
    7e36:	79e0      	ldrb	r0, [r4, #7]
    7e38:	2801      	cmp	r0, #1
    7e3a:	d105      	bne.n	7e48 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x44>
    7e3c:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    7e40:	f040 0008 	orr.w	r0, r0, #8
    7e44:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    7e48:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    7e4a:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    7e4e:	62a0      	str	r0, [r4, #40]	; 0x28
    7e50:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    7e54:	f8c8 0000 	str.w	r0, [r8]
    7e58:	491b      	ldr	r1, [pc, #108]	; (7ec8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc4>)
    7e5a:	f831 0019 	ldrh.w	r0, [r1, r9, lsl #1]
    7e5e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    7e62:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
    7e66:	fbb0 f7f1 	udiv	r7, r0, r1
    7e6a:	e016      	b.n	7e9a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    7e6c:	4608      	mov	r0, r1
    7e6e:	f000 fd61 	bl	8934 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x434>
    7e72:	2002      	movs	r0, #2
    7e74:	7260      	strb	r0, [r4, #9]
    7e76:	79e0      	ldrb	r0, [r4, #7]
    7e78:	2801      	cmp	r0, #1
    7e7a:	d105      	bne.n	7e88 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    7e7c:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    7e80:	f040 0004 	orr.w	r0, r0, #4
    7e84:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    7e88:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    7e8a:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    7e8e:	62a0      	str	r0, [r4, #40]	; 0x28
    7e90:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    7e94:	f8c8 0000 	str.w	r0, [r8]
    7e98:	2729      	movs	r7, #41	; 0x29
    7e9a:	f000 fbe5 	bl	8668 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x168>
    7e9e:	f008 fa6a 	bl	10376 <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>
    7ea2:	b120      	cbz	r0, 7eae <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xaa>
    7ea4:	f7ff ff24 	bl	7cf0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7ea8:	2000      	movs	r0, #0
    7eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7eae:	2100      	movs	r1, #0
    7eb0:	4630      	mov	r0, r6
    7eb2:	f000 fcd1 	bl	8858 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x358>
    7eb6:	4638      	mov	r0, r7
    7eb8:	e7f7      	b.n	7eaa <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xa6>
    7eba:	0000      	.short	0x0000
    7ebc:	20001168 	.word	0x20001168
    7ec0:	40001000 	.word	0x40001000
    7ec4:	4001f504 	.word	0x4001f504
    7ec8:	000089ac 	.word	0x000089ac

00007ecc <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    7ecc:	b510      	push	{r4, lr}
    7ece:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    7ed0:	4901      	ldr	r1, [pc, #4]	; (7ed8 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    7ed2:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    7ed6:	bd10      	pop	{r4, pc}
    7ed8:	20001158 	.word	0x20001158

00007edc <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    7edc:	b570      	push	{r4, r5, r6, lr}
    7ede:	4c0f      	ldr	r4, [pc, #60]	; (7f1c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x40>)
    7ee0:	4603      	mov	r3, r0
    7ee2:	2002      	movs	r0, #2
    7ee4:	7320      	strb	r0, [r4, #12]
    7ee6:	f894 5021 	ldrb.w	r5, [r4, #33]	; 0x21
    7eea:	2096      	movs	r0, #150	; 0x96
    7eec:	f894 1020 	ldrb.w	r1, [r4, #32]
    7ef0:	7d22      	ldrb	r2, [r4, #20]
    7ef2:	2d01      	cmp	r5, #1
    7ef4:	d00e      	beq.n	7f14 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x38>
    7ef6:	f000 fd95 	bl	8a24 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    7efa:	6120      	str	r0, [r4, #16]
    7efc:	4808      	ldr	r0, [pc, #32]	; (7f20 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    7efe:	2100      	movs	r1, #0
    7f00:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    7f04:	6921      	ldr	r1, [r4, #16]
    7f06:	69e0      	ldr	r0, [r4, #28]
    7f08:	4408      	add	r0, r1
    7f0a:	4905      	ldr	r1, [pc, #20]	; (7f20 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    7f0c:	1d09      	adds	r1, r1, #4
    7f0e:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    7f12:	bd70      	pop	{r4, r5, r6, pc}
    7f14:	f000 fda4 	bl	8a60 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    7f18:	e7ef      	b.n	7efa <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x1e>
    7f1a:	0000      	.short	0x0000
    7f1c:	20001168 	.word	0x20001168
    7f20:	40008000 	.word	0x40008000

00007f24 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    7f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7f28:	2238      	movs	r2, #56	; 0x38
    7f2a:	2100      	movs	r1, #0
    7f2c:	4813      	ldr	r0, [pc, #76]	; (7f7c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    7f2e:	f008 fc38 	bl	107a2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7f32:	f000 fcbf 	bl	88b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b4>
    7f36:	f008 faf2 	bl	1051e <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    7f3a:	4d11      	ldr	r5, [pc, #68]	; (7f80 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    7f3c:	4e10      	ldr	r6, [pc, #64]	; (7f80 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    7f3e:	2400      	movs	r4, #0
    7f40:	4f0f      	ldr	r7, [pc, #60]	; (7f80 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    7f42:	3508      	adds	r5, #8
    7f44:	3610      	adds	r6, #16
    7f46:	b928      	cbnz	r0, 7f54 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    7f48:	f008 fb00 	bl	1054c <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    7f4c:	b910      	cbnz	r0, 7f54 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    7f4e:	f008 fb07 	bl	10560 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    7f52:	b108      	cbz	r0, 7f58 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    7f54:	2224      	movs	r2, #36	; 0x24
    7f56:	e006      	b.n	7f66 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    7f58:	f008 fb42 	bl	105e0 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    7f5c:	b910      	cbnz	r0, 7f64 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    7f5e:	f008 fb35 	bl	105cc <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    7f62:	b140      	cbz	r0, 7f76 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    7f64:	2240      	movs	r2, #64	; 0x40
    7f66:	21ff      	movs	r1, #255	; 0xff
    7f68:	4638      	mov	r0, r7
    7f6a:	f008 fc1a 	bl	107a2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7f6e:	602c      	str	r4, [r5, #0]
    7f70:	6034      	str	r4, [r6, #0]
    7f72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7f76:	2238      	movs	r2, #56	; 0x38
    7f78:	e7f5      	b.n	7f66 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    7f7a:	0000      	.short	0x0000
    7f7c:	20001168 	.word	0x20001168
    7f80:	40000e00 	.word	0x40000e00

00007f84 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>:
    7f84:	4801      	ldr	r0, [pc, #4]	; (7f8c <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x8>)
    7f86:	69c0      	ldr	r0, [r0, #28]
    7f88:	4770      	bx	lr
    7f8a:	0000      	.short	0x0000
    7f8c:	20001168 	.word	0x20001168

00007f90 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    7f90:	b510      	push	{r4, lr}
    7f92:	f000 fc43 	bl	881c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x31c>
    7f96:	f7ff feab 	bl	7cf0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7f9a:	f004 fb8d 	bl	c6b8 <mpsl_fem_disable>
    7f9e:	b130      	cbz	r0, 7fae <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    7fa0:	1c40      	adds	r0, r0, #1
    7fa2:	d004      	beq.n	7fae <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    7fa4:	f240 516d 	movw	r1, #1389	; 0x56d
    7fa8:	203e      	movs	r0, #62	; 0x3e
    7faa:	f7f8 fd69 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7fae:	480f      	ldr	r0, [pc, #60]	; (7fec <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x5c>)
    7fb0:	4a0f      	ldr	r2, [pc, #60]	; (7ff0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x60>)
    7fb2:	6a81      	ldr	r1, [r0, #40]	; 0x28
    7fb4:	f041 6144 	orr.w	r1, r1, #205520896	; 0xc400000
    7fb8:	6011      	str	r1, [r2, #0]
    7fba:	2400      	movs	r4, #0
    7fbc:	6284      	str	r4, [r0, #40]	; 0x28
    7fbe:	7304      	strb	r4, [r0, #12]
    7fc0:	61c4      	str	r4, [r0, #28]
    7fc2:	6184      	str	r4, [r0, #24]
    7fc4:	f000 fc2a 	bl	881c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x31c>
    7fc8:	480a      	ldr	r0, [pc, #40]	; (7ff4 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x64>)
    7fca:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    7fce:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    7fd2:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    7fd6:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    7fda:	2001      	movs	r0, #1
    7fdc:	f008 f972 	bl	102c4 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    7fe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7fe4:	2001      	movs	r0, #1
    7fe6:	f008 b960 	b.w	102aa <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    7fea:	0000      	.short	0x0000
    7fec:	20001168 	.word	0x20001168
    7ff0:	4001f508 	.word	0x4001f508
    7ff4:	40008000 	.word	0x40008000

00007ff8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    7ff8:	b570      	push	{r4, r5, r6, lr}
    7ffa:	2001      	movs	r0, #1
    7ffc:	f008 f962 	bl	102c4 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    8000:	4c37      	ldr	r4, [pc, #220]	; (80e0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe0>)
    8002:	2000      	movs	r0, #0
    8004:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    8008:	2001      	movs	r0, #1
    800a:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    800e:	f008 fabd 	bl	1058c <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    8012:	4d34      	ldr	r5, [pc, #208]	; (80e4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe4>)
    8014:	b118      	cbz	r0, 801e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1e>
    8016:	6828      	ldr	r0, [r5, #0]
    8018:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    801c:	6028      	str	r0, [r5, #0]
    801e:	f008 faa9 	bl	10574 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    8022:	b128      	cbz	r0, 8030 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x30>
    8024:	6828      	ldr	r0, [r5, #0]
    8026:	4930      	ldr	r1, [pc, #192]	; (80e8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe8>)
    8028:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    802c:	4308      	orrs	r0, r1
    802e:	6028      	str	r0, [r5, #0]
    8030:	f008 fabc 	bl	105ac <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    8034:	b138      	cbz	r0, 8046 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x46>
    8036:	482b      	ldr	r0, [pc, #172]	; (80e4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe4>)
    8038:	1d00      	adds	r0, r0, #4
    803a:	6801      	ldr	r1, [r0, #0]
    803c:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    8040:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    8044:	6001      	str	r1, [r0, #0]
    8046:	4927      	ldr	r1, [pc, #156]	; (80e4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe4>)
    8048:	4828      	ldr	r0, [pc, #160]	; (80ec <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xec>)
    804a:	313c      	adds	r1, #60	; 0x3c
    804c:	6008      	str	r0, [r1, #0]
    804e:	f004 fb6d 	bl	c72c <mpsl_fem_device_config_254_apply_get>
    8052:	b140      	cbz	r0, 8066 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x66>
    8054:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    8058:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    805c:	1c41      	adds	r1, r0, #1
    805e:	d002      	beq.n	8066 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x66>
    8060:	4920      	ldr	r1, [pc, #128]	; (80e4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe4>)
    8062:	3110      	adds	r1, #16
    8064:	6008      	str	r0, [r1, #0]
    8066:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    806a:	6e00      	ldr	r0, [r0, #96]	; 0x60
    806c:	1c41      	adds	r1, r0, #1
    806e:	d004      	beq.n	807a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7a>
    8070:	491f      	ldr	r1, [pc, #124]	; (80f0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf0>)
    8072:	680a      	ldr	r2, [r1, #0]
    8074:	f360 4217 	bfi	r2, r0, #16, #8
    8078:	600a      	str	r2, [r1, #0]
    807a:	f240 1103 	movw	r1, #259	; 0x103
    807e:	f240 605b 	movw	r0, #1627	; 0x65b
    8082:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    8086:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    808a:	2001      	movs	r0, #1
    808c:	f8c4 0530 	str.w	r0, [r4, #1328]	; 0x530
    8090:	f000 f842 	bl	8118 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    8094:	f240 2001 	movw	r0, #513	; 0x201
    8098:	f8c4 0650 	str.w	r0, [r4, #1616]	; 0x650
    809c:	2002      	movs	r0, #2
    809e:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    80a2:	4914      	ldr	r1, [pc, #80]	; (80f4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf4>)
    80a4:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    80a8:	6008      	str	r0, [r1, #0]
    80aa:	4913      	ldr	r1, [pc, #76]	; (80f8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf8>)
    80ac:	2000      	movs	r0, #0
    80ae:	4d13      	ldr	r5, [pc, #76]	; (80fc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xfc>)
    80b0:	8608      	strh	r0, [r1, #48]	; 0x30
    80b2:	3110      	adds	r1, #16
    80b4:	61c8      	str	r0, [r1, #28]
    80b6:	f881 002c 	strb.w	r0, [r1, #44]	; 0x2c
    80ba:	7028      	strb	r0, [r5, #0]
    80bc:	2001      	movs	r0, #1
    80be:	f008 f8f4 	bl	102aa <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    80c2:	2010      	movs	r0, #16
    80c4:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    80c8:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    80cc:	2002      	movs	r0, #2
    80ce:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    80d2:	6868      	ldr	r0, [r5, #4]
    80d4:	2800      	cmp	r0, #0
    80d6:	d002      	beq.n	80de <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xde>
    80d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    80dc:	4700      	bx	r0
    80de:	bd70      	pop	{r4, r5, r6, pc}
    80e0:	40001000 	.word	0x40001000
    80e4:	4000173c 	.word	0x4000173c
    80e8:	80000096 	.word	0x80000096
    80ec:	8900002c 	.word	0x8900002c
    80f0:	4000158c 	.word	0x4000158c
    80f4:	4001f504 	.word	0x4001f504
    80f8:	20001158 	.word	0x20001158
    80fc:	200002a0 	.word	0x200002a0

00008100 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    8100:	4901      	ldr	r1, [pc, #4]	; (8108 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    8102:	7548      	strb	r0, [r1, #21]
    8104:	4770      	bx	lr
    8106:	0000      	.short	0x0000
    8108:	20001168 	.word	0x20001168

0000810c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    810c:	4901      	ldr	r1, [pc, #4]	; (8114 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x8>)
    810e:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    8112:	4770      	bx	lr
    8114:	00008a00 	.word	0x00008a00

00008118 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>:
    8118:	4908      	ldr	r1, [pc, #32]	; (813c <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x24>)
    811a:	b510      	push	{r4, lr}
    811c:	7508      	strb	r0, [r1, #20]
    811e:	4908      	ldr	r1, [pc, #32]	; (8140 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x28>)
    8120:	2801      	cmp	r0, #1
    8122:	d006      	beq.n	8132 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1a>
    8124:	2802      	cmp	r0, #2
    8126:	d006      	beq.n	8136 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1e>
    8128:	f640 5186 	movw	r1, #3462	; 0xd86
    812c:	203e      	movs	r0, #62	; 0x3e
    812e:	f7f8 fca7 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8132:	2003      	movs	r0, #3
    8134:	e000      	b.n	8138 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x20>
    8136:	2004      	movs	r0, #4
    8138:	6008      	str	r0, [r1, #0]
    813a:	bd10      	pop	{r4, pc}
    813c:	20001168 	.word	0x20001168
    8140:	40001510 	.word	0x40001510

00008144 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    8144:	4905      	ldr	r1, [pc, #20]	; (815c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    8146:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
    814a:	4805      	ldr	r0, [pc, #20]	; (8160 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x1c>)
    814c:	f810 1f2c 	ldrb.w	r1, [r0, #44]!
    8150:	f041 0101 	orr.w	r1, r1, #1
    8154:	7001      	strb	r1, [r0, #0]
    8156:	f000 ba4d 	b.w	85f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    815a:	0000      	.short	0x0000
    815c:	40001000 	.word	0x40001000
    8160:	20001168 	.word	0x20001168

00008164 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    8164:	4901      	ldr	r1, [pc, #4]	; (816c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x8>)
    8166:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    816a:	4770      	bx	lr
    816c:	00008a0c 	.word	0x00008a0c

00008170 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    8170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8174:	4e30      	ldr	r6, [pc, #192]	; (8238 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>)
    8176:	4c31      	ldr	r4, [pc, #196]	; (823c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xcc>)
    8178:	4688      	mov	r8, r1
    817a:	0007      	movs	r7, r0
    817c:	4615      	mov	r5, r2
    817e:	f04f 0901 	mov.w	r9, #1
    8182:	d006      	beq.n	8192 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x22>
    8184:	2f01      	cmp	r7, #1
    8186:	d012      	beq.n	81ae <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x3e>
    8188:	f640 012d 	movw	r1, #2093	; 0x82d
    818c:	203e      	movs	r0, #62	; 0x3e
    818e:	f7f8 fc77 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8192:	4610      	mov	r0, r2
    8194:	f000 fbe8 	bl	8968 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x468>
    8198:	4829      	ldr	r0, [pc, #164]	; (8240 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd0>)
    819a:	f884 9009 	strb.w	r9, [r4, #9]
    819e:	f830 1015 	ldrh.w	r1, [r0, r5, lsl #1]
    81a2:	4640      	mov	r0, r8
    81a4:	f000 fb8e 	bl	88c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c4>
    81a8:	4605      	mov	r5, r0
    81aa:	4630      	mov	r0, r6
    81ac:	e00c      	b.n	81c8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x58>
    81ae:	4610      	mov	r0, r2
    81b0:	f000 fbc0 	bl	8934 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x434>
    81b4:	2002      	movs	r0, #2
    81b6:	7260      	strb	r0, [r4, #9]
    81b8:	f649 71ba 	movw	r1, #40890	; 0x9fba
    81bc:	4640      	mov	r0, r8
    81be:	f000 fb81 	bl	88c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c4>
    81c2:	4605      	mov	r5, r0
    81c4:	481c      	ldr	r0, [pc, #112]	; (8238 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>)
    81c6:	1d00      	adds	r0, r0, #4
    81c8:	f000 fb3a 	bl	8840 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x340>
    81cc:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8244 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd4>
    81d0:	f8c8 5540 	str.w	r5, [r8, #1344]	; 0x540
    81d4:	f8df a074 	ldr.w	sl, [pc, #116]	; 824c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xdc>
    81d8:	481b      	ldr	r0, [pc, #108]	; (8248 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd8>)
    81da:	f8ca 0510 	str.w	r0, [sl, #1296]	; 0x510
    81de:	2010      	movs	r0, #16
    81e0:	f8c6 0304 	str.w	r0, [r6, #772]	; 0x304
    81e4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    81e6:	f44f 2600 	mov.w	r6, #524288	; 0x80000
    81ea:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    81ee:	62a0      	str	r0, [r4, #40]	; 0x28
    81f0:	4817      	ldr	r0, [pc, #92]	; (8250 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    81f2:	6006      	str	r6, [r0, #0]
    81f4:	f000 fa38 	bl	8668 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x168>
    81f8:	4641      	mov	r1, r8
    81fa:	f8c8 904c 	str.w	r9, [r8, #76]	; 0x4c
    81fe:	4811      	ldr	r0, [pc, #68]	; (8244 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd4>)
    8200:	300c      	adds	r0, #12
    8202:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    8206:	42a8      	cmp	r0, r5
    8208:	d310      	bcc.n	822c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xbc>
    820a:	2000      	movs	r0, #0
    820c:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    8210:	f8ca 0514 	str.w	r0, [sl, #1300]	; 0x514
    8214:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    8216:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
    821a:	62a0      	str	r0, [r4, #40]	; 0x28
    821c:	480c      	ldr	r0, [pc, #48]	; (8250 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    821e:	1d00      	adds	r0, r0, #4
    8220:	6006      	str	r6, [r0, #0]
    8222:	f7ff fd65 	bl	7cf0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    8226:	2000      	movs	r0, #0
    8228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    822c:	4629      	mov	r1, r5
    822e:	4638      	mov	r0, r7
    8230:	f000 fb12 	bl	8858 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x358>
    8234:	2001      	movs	r0, #1
    8236:	e7f7      	b.n	8228 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb8>
    8238:	40001000 	.word	0x40001000
    823c:	20001168 	.word	0x20001168
    8240:	000089ac 	.word	0x000089ac
    8244:	40008000 	.word	0x40008000
    8248:	40008140 	.word	0x40008140
    824c:	4001f098 	.word	0x4001f098
    8250:	4001f504 	.word	0x4001f504

00008254 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    8254:	4b0d      	ldr	r3, [pc, #52]	; (828c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>)
    8256:	b510      	push	{r4, lr}
    8258:	71d8      	strb	r0, [r3, #7]
    825a:	729a      	strb	r2, [r3, #10]
    825c:	b151      	cbz	r1, 8274 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x20>
    825e:	2002      	movs	r0, #2
    8260:	7218      	strb	r0, [r3, #8]
    8262:	2801      	cmp	r0, #1
    8264:	d008      	beq.n	8278 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    8266:	2802      	cmp	r0, #2
    8268:	d00f      	beq.n	828a <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    826a:	f640 2163 	movw	r1, #2659	; 0xa63
    826e:	203e      	movs	r0, #62	; 0x3e
    8270:	f7f8 fc06 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8274:	2001      	movs	r0, #1
    8276:	e7f3      	b.n	8260 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc>
    8278:	7a58      	ldrb	r0, [r3, #9]
    827a:	2802      	cmp	r0, #2
    827c:	d105      	bne.n	828a <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    827e:	f000 f97d 	bl	857c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x7c>
    8282:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8286:	f000 bab1 	b.w	87ec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ec>
    828a:	bd10      	pop	{r4, pc}
    828c:	20001168 	.word	0x20001168

00008290 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>:
    8290:	4902      	ldr	r1, [pc, #8]	; (829c <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ+0xc>)
    8292:	2000      	movs	r0, #0
    8294:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    8298:	4770      	bx	lr
    829a:	0000      	.short	0x0000
    829c:	40008000 	.word	0x40008000

000082a0 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    82a0:	4904      	ldr	r1, [pc, #16]	; (82b4 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x14>)
    82a2:	f8d1 1548 	ldr.w	r1, [r1, #1352]	; 0x548
    82a6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    82aa:	4249      	negs	r1, r1
    82ac:	7001      	strb	r1, [r0, #0]
    82ae:	2001      	movs	r0, #1
    82b0:	4770      	bx	lr
    82b2:	0000      	.short	0x0000
    82b4:	40001000 	.word	0x40001000

000082b8 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    82b8:	4903      	ldr	r1, [pc, #12]	; (82c8 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    82ba:	0e02      	lsrs	r2, r0, #24
    82bc:	f8c1 2524 	str.w	r2, [r1, #1316]	; 0x524
    82c0:	0200      	lsls	r0, r0, #8
    82c2:	f8c1 051c 	str.w	r0, [r1, #1308]	; 0x51c
    82c6:	4770      	bx	lr
    82c8:	40001000 	.word	0x40001000

000082cc <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    82cc:	4901      	ldr	r1, [pc, #4]	; (82d4 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0x8>)
    82ce:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    82d2:	4770      	bx	lr
    82d4:	40001000 	.word	0x40001000

000082d8 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>:
    82d8:	b510      	push	{r4, lr}
    82da:	2200      	movs	r2, #0
    82dc:	2901      	cmp	r1, #1
    82de:	d006      	beq.n	82ee <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x16>
    82e0:	2902      	cmp	r1, #2
    82e2:	d002      	beq.n	82ea <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x12>
    82e4:	f240 21d9 	movw	r1, #729	; 0x2d9
    82e8:	e014      	b.n	8314 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x3c>
    82ea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    82ee:	490b      	ldr	r1, [pc, #44]	; (831c <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x44>)
    82f0:	430a      	orrs	r2, r1
    82f2:	490b      	ldr	r1, [pc, #44]	; (8320 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    82f4:	600a      	str	r2, [r1, #0]
    82f6:	490b      	ldr	r1, [pc, #44]	; (8324 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x4c>)
    82f8:	4308      	orrs	r0, r1
    82fa:	4909      	ldr	r1, [pc, #36]	; (8320 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    82fc:	1d09      	adds	r1, r1, #4
    82fe:	6008      	str	r0, [r1, #0]
    8300:	4809      	ldr	r0, [pc, #36]	; (8328 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x50>)
    8302:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    8306:	b2c0      	uxtb	r0, r0
    8308:	2803      	cmp	r0, #3
    830a:	d001      	beq.n	8310 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x38>
    830c:	280b      	cmp	r0, #11
    830e:	d104      	bne.n	831a <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x42>
    8310:	f240 21f1 	movw	r1, #753	; 0x2f1
    8314:	203e      	movs	r0, #62	; 0x3e
    8316:	f7f8 fbb3 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    831a:	bd10      	pop	{r4, pc}
    831c:	00100108 	.word	0x00100108
    8320:	40001514 	.word	0x40001514
    8324:	02030000 	.word	0x02030000
    8328:	40001000 	.word	0x40001000

0000832c <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    832c:	4901      	ldr	r1, [pc, #4]	; (8334 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    832e:	7588      	strb	r0, [r1, #22]
    8330:	4770      	bx	lr
    8332:	0000      	.short	0x0000
    8334:	20001168 	.word	0x20001168

00008338 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    8338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    833c:	4853      	ldr	r0, [pc, #332]	; (848c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    833e:	f04f 0a01 	mov.w	sl, #1
    8342:	f8c0 a04c 	str.w	sl, [r0, #76]	; 0x4c
    8346:	4851      	ldr	r0, [pc, #324]	; (848c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    8348:	300c      	adds	r0, #12
    834a:	f8d0 7540 	ldr.w	r7, [r0, #1344]	; 0x540
    834e:	f008 f810 	bl	10372 <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>
    8352:	4c4f      	ldr	r4, [pc, #316]	; (8490 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    8354:	e9c4 070c 	strd	r0, r7, [r4, #48]	; 0x30
    8358:	f000 f91a 	bl	8590 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x90>
    835c:	494d      	ldr	r1, [pc, #308]	; (8494 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>)
    835e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    8360:	6008      	str	r0, [r1, #0]
    8362:	f8df 8134 	ldr.w	r8, [pc, #308]	; 8498 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>
    8366:	2000      	movs	r0, #0
    8368:	62a0      	str	r0, [r4, #40]	; 0x28
    836a:	f8d8 2200 	ldr.w	r2, [r8, #512]	; 0x200
    836e:	f240 131d 	movw	r3, #285	; 0x11d
    8372:	439a      	bics	r2, r3
    8374:	f8c8 2200 	str.w	r2, [r8, #512]	; 0x200
    8378:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    837c:	f000 f988 	bl	8690 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x190>
    8380:	4605      	mov	r5, r0
    8382:	4842      	ldr	r0, [pc, #264]	; (848c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    8384:	3008      	adds	r0, #8
    8386:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    838a:	4e40      	ldr	r6, [pc, #256]	; (848c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    838c:	61e0      	str	r0, [r4, #28]
    838e:	1d36      	adds	r6, r6, #4
    8390:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    8394:	61a0      	str	r0, [r4, #24]
    8396:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    839a:	7d21      	ldrb	r1, [r4, #20]
    839c:	f884 1020 	strb.w	r1, [r4, #32]
    83a0:	7a61      	ldrb	r1, [r4, #9]
    83a2:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    83a6:	46a1      	mov	r9, r4
    83a8:	2400      	movs	r4, #0
    83aa:	4639      	mov	r1, r7
    83ac:	4628      	mov	r0, r5
    83ae:	f000 f9e3 	bl	8778 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x278>
    83b2:	b910      	cbnz	r0, 83ba <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x82>
    83b4:	f8c8 a010 	str.w	sl, [r8, #16]
    83b8:	2401      	movs	r4, #1
    83ba:	4f35      	ldr	r7, [pc, #212]	; (8490 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    83bc:	07e8      	lsls	r0, r5, #31
    83be:	f1a7 0710 	sub.w	r7, r7, #16
    83c2:	d002      	beq.n	83ca <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x92>
    83c4:	6838      	ldr	r0, [r7, #0]
    83c6:	4780      	blx	r0
    83c8:	e034      	b.n	8434 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xfc>
    83ca:	07a8      	lsls	r0, r5, #30
    83cc:	d529      	bpl.n	8422 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xea>
    83ce:	0768      	lsls	r0, r5, #29
    83d0:	d421      	bmi.n	8416 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    83d2:	f008 f8eb 	bl	105ac <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    83d6:	b9f0      	cbnz	r0, 8416 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    83d8:	f008 f8d8 	bl	1058c <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    83dc:	b9d8      	cbnz	r0, 8416 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    83de:	482f      	ldr	r0, [pc, #188]	; (849c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x164>)
    83e0:	6800      	ldr	r0, [r0, #0]
    83e2:	f3c0 5242 	ubfx	r2, r0, #21, #3
    83e6:	f3c0 6100 	ubfx	r1, r0, #24, #1
    83ea:	f000 0c0f 	and.w	ip, r0, #15
    83ee:	f3c0 1303 	ubfx	r3, r0, #4, #4
    83f2:	f3c0 2803 	ubfx	r8, r0, #8, #4
    83f6:	b171      	cbz	r1, 8416 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    83f8:	f1bc 0f00 	cmp.w	ip, #0
    83fc:	d003      	beq.n	8406 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xce>
    83fe:	b113      	cbz	r3, 8406 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xce>
    8400:	f1b8 0f00 	cmp.w	r8, #0
    8404:	d107      	bne.n	8416 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    8406:	f3c0 4004 	ubfx	r0, r0, #16, #5
    840a:	2801      	cmp	r0, #1
    840c:	d103      	bne.n	8416 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    840e:	2a03      	cmp	r2, #3
    8410:	d201      	bcs.n	8416 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    8412:	f045 0504 	orr.w	r5, r5, #4
    8416:	f345 0080 	sbfx	r0, r5, #2, #1
    841a:	4621      	mov	r1, r4
    841c:	1c40      	adds	r0, r0, #1
    841e:	687a      	ldr	r2, [r7, #4]
    8420:	e007      	b.n	8432 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xfa>
    8422:	f015 0f28 	tst.w	r5, #40	; 0x28
    8426:	d005      	beq.n	8434 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xfc>
    8428:	f345 1140 	sbfx	r1, r5, #5, #1
    842c:	68ba      	ldr	r2, [r7, #8]
    842e:	4620      	mov	r0, r4
    8430:	1c49      	adds	r1, r1, #1
    8432:	4790      	blx	r2
    8434:	06e8      	lsls	r0, r5, #27
    8436:	d501      	bpl.n	843c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x104>
    8438:	68f8      	ldr	r0, [r7, #12]
    843a:	4780      	blx	r0
    843c:	f899 1009 	ldrb.w	r1, [r9, #9]
    8440:	4648      	mov	r0, r9
    8442:	2902      	cmp	r1, #2
    8444:	d120      	bne.n	8488 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>
    8446:	7b01      	ldrb	r1, [r0, #12]
    8448:	2900      	cmp	r1, #0
    844a:	d01d      	beq.n	8488 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>
    844c:	2902      	cmp	r1, #2
    844e:	d004      	beq.n	845a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x122>
    8450:	2901      	cmp	r1, #1
    8452:	d009      	beq.n	8468 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x130>
    8454:	f640 4166 	movw	r1, #3174	; 0xc66
    8458:	e00d      	b.n	8476 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13e>
    845a:	69c1      	ldr	r1, [r0, #28]
    845c:	f8d9 0010 	ldr.w	r0, [r9, #16]
    8460:	4408      	add	r0, r1
    8462:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
    8466:	e00b      	b.n	8480 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x148>
    8468:	6901      	ldr	r1, [r0, #16]
    846a:	f8d9 001c 	ldr.w	r0, [r9, #28]
    846e:	4281      	cmp	r1, r0
    8470:	d804      	bhi.n	847c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x144>
    8472:	f640 4167 	movw	r1, #3175	; 0xc67
    8476:	203e      	movs	r0, #62	; 0x3e
    8478:	f7f8 fb02 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    847c:	f8c6 1540 	str.w	r1, [r6, #1344]	; 0x540
    8480:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8484:	f000 b9bc 	b.w	8800 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x300>
    8488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    848c:	40008000 	.word	0x40008000
    8490:	20001168 	.word	0x20001168
    8494:	4001f508 	.word	0x4001f508
    8498:	40001000 	.word	0x40001000
    849c:	40001450 	.word	0x40001450

000084a0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
    84a0:	b570      	push	{r4, r5, r6, lr}
    84a2:	4b16      	ldr	r3, [pc, #88]	; (84fc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x5c>)
    84a4:	888c      	ldrh	r4, [r1, #4]
    84a6:	eb03 0580 	add.w	r5, r3, r0, lsl #2
    84aa:	f8c5 4620 	str.w	r4, [r5, #1568]	; 0x620
    84ae:	780c      	ldrb	r4, [r1, #0]
    84b0:	f8d1 1001 	ldr.w	r1, [r1, #1]
    84b4:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    84b8:	f8c5 1600 	str.w	r1, [r5, #1536]	; 0x600
    84bc:	f8d3 1640 	ldr.w	r1, [r3, #1600]	; 0x640
    84c0:	2401      	movs	r4, #1
    84c2:	4084      	lsls	r4, r0
    84c4:	b2c9      	uxtb	r1, r1
    84c6:	b2e5      	uxtb	r5, r4
    84c8:	4329      	orrs	r1, r5
    84ca:	b132      	cbz	r2, 84da <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a>
    84cc:	2a01      	cmp	r2, #1
    84ce:	d00a      	beq.n	84e6 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x46>
    84d0:	f240 51d4 	movw	r1, #1492	; 0x5d4
    84d4:	203e      	movs	r0, #62	; 0x3e
    84d6:	f7f8 fad3 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    84da:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    84de:	f3c0 2007 	ubfx	r0, r0, #8, #8
    84e2:	43a0      	bics	r0, r4
    84e4:	e004      	b.n	84f0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x50>
    84e6:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    84ea:	f3c0 2007 	ubfx	r0, r0, #8, #8
    84ee:	4328      	orrs	r0, r5
    84f0:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    84f4:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
    84f8:	bd70      	pop	{r4, r5, r6, pc}
    84fa:	0000      	.short	0x0000
    84fc:	40001000 	.word	0x40001000

00008500 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>:
    8500:	4901      	ldr	r1, [pc, #4]	; (8508 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8>)
    8502:	2001      	movs	r0, #1
    8504:	7008      	strb	r0, [r1, #0]
    8506:	4770      	bx	lr
    8508:	200002a0 	.word	0x200002a0
    850c:	480b      	ldr	r0, [pc, #44]	; (853c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c>)
    850e:	7d81      	ldrb	r1, [r0, #22]
    8510:	480b      	ldr	r0, [pc, #44]	; (8540 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x40>)
    8512:	5c40      	ldrb	r0, [r0, r1]
    8514:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    8518:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
    851c:	d204      	bcs.n	8528 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x28>
    851e:	f6a0 1038 	subw	r0, r0, #2360	; 0x938
    8522:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    8526:	e001      	b.n	852c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c>
    8528:	f5a0 6016 	sub.w	r0, r0, #2400	; 0x960
    852c:	4a05      	ldr	r2, [pc, #20]	; (8544 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>)
    852e:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    8532:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    8536:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
    853a:	4770      	bx	lr
    853c:	20001168 	.word	0x20001168
    8540:	000089b2 	.word	0x000089b2
    8544:	40001000 	.word	0x40001000
    8548:	b508      	push	{r3, lr}
    854a:	490b      	ldr	r1, [pc, #44]	; (8578 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x78>)
    854c:	466b      	mov	r3, sp
    854e:	f991 2015 	ldrsb.w	r2, [r1, #21]
    8552:	7d89      	ldrb	r1, [r1, #22]
    8554:	f000 fad0 	bl	8af8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>
    8558:	f99d 0000 	ldrsb.w	r0, [sp]
    855c:	f000 faa0 	bl	8aa0 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    8560:	f10d 0001 	add.w	r0, sp, #1
    8564:	f004 f8cc 	bl	c700 <mpsl_fem_pa_gain_set>
    8568:	2800      	cmp	r0, #0
    856a:	d004      	beq.n	8576 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x76>
    856c:	f240 6115 	movw	r1, #1557	; 0x615
    8570:	203e      	movs	r0, #62	; 0x3e
    8572:	f7f8 fa85 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8576:	bd08      	pop	{r3, pc}
    8578:	20001168 	.word	0x20001168
    857c:	4803      	ldr	r0, [pc, #12]	; (858c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8c>)
    857e:	7a01      	ldrb	r1, [r0, #8]
    8580:	2901      	cmp	r1, #1
    8582:	d102      	bne.n	858a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8a>
    8584:	7a80      	ldrb	r0, [r0, #10]
    8586:	f7ff bfdf 	b.w	8548 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x48>
    858a:	4770      	bx	lr
    858c:	20001168 	.word	0x20001168
    8590:	480d      	ldr	r0, [pc, #52]	; (85c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc8>)
    8592:	b510      	push	{r4, lr}
    8594:	7a40      	ldrb	r0, [r0, #9]
    8596:	2801      	cmp	r0, #1
    8598:	d00c      	beq.n	85b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb4>
    859a:	2802      	cmp	r0, #2
    859c:	d113      	bne.n	85c6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    859e:	f004 f891 	bl	c6c4 <mpsl_fem_lna_configuration_clear>
    85a2:	2800      	cmp	r0, #0
    85a4:	d00f      	beq.n	85c6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    85a6:	1c40      	adds	r0, r0, #1
    85a8:	d00d      	beq.n	85c6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    85aa:	f640 01c1 	movw	r1, #2241	; 0x8c1
    85ae:	203e      	movs	r0, #62	; 0x3e
    85b0:	f7f8 fa66 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    85b4:	f004 f898 	bl	c6e8 <mpsl_fem_pa_configuration_clear>
    85b8:	2800      	cmp	r0, #0
    85ba:	d004      	beq.n	85c6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    85bc:	1c40      	adds	r0, r0, #1
    85be:	d002      	beq.n	85c6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    85c0:	f640 01bb 	movw	r1, #2235	; 0x8bb
    85c4:	e7f3      	b.n	85ae <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xae>
    85c6:	bd10      	pop	{r4, pc}
    85c8:	20001168 	.word	0x20001168
    85cc:	4808      	ldr	r0, [pc, #32]	; (85f0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf0>)
    85ce:	2100      	movs	r1, #0
    85d0:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    85d4:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    85d8:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    85dc:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    85e0:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    85e4:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    85e8:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    85ec:	4770      	bx	lr
    85ee:	0000      	.short	0x0000
    85f0:	40001000 	.word	0x40001000
    85f4:	4818      	ldr	r0, [pc, #96]	; (8658 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x158>)
    85f6:	b510      	push	{r4, lr}
    85f8:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    85fc:	07c1      	lsls	r1, r0, #31
    85fe:	d029      	beq.n	8654 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    8600:	0781      	lsls	r1, r0, #30
    8602:	d514      	bpl.n	862e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x12e>
    8604:	4815      	ldr	r0, [pc, #84]	; (865c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x15c>)
    8606:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    860a:	f041 0101 	orr.w	r1, r1, #1
    860e:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    8612:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    8616:	b2c0      	uxtb	r0, r0
    8618:	280b      	cmp	r0, #11
    861a:	d005      	beq.n	8628 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    861c:	280a      	cmp	r0, #10
    861e:	d003      	beq.n	8628 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    8620:	2803      	cmp	r0, #3
    8622:	d001      	beq.n	8628 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    8624:	2802      	cmp	r0, #2
    8626:	d115      	bne.n	8654 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    8628:	f240 613e 	movw	r1, #1598	; 0x63e
    862c:	e00f      	b.n	864e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x14e>
    862e:	0740      	lsls	r0, r0, #29
    8630:	d510      	bpl.n	8654 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    8632:	480a      	ldr	r0, [pc, #40]	; (865c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x15c>)
    8634:	490a      	ldr	r1, [pc, #40]	; (8660 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x160>)
    8636:	3008      	adds	r0, #8
    8638:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    863c:	f44f 71a0 	mov.w	r1, #320	; 0x140
    8640:	4808      	ldr	r0, [pc, #32]	; (8664 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x164>)
    8642:	f007 fe55 	bl	102f0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    8646:	2800      	cmp	r0, #0
    8648:	d004      	beq.n	8654 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    864a:	f240 6146 	movw	r1, #1606	; 0x646
    864e:	203e      	movs	r0, #62	; 0x3e
    8650:	f7f8 fa16 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8654:	bd10      	pop	{r4, pc}
    8656:	0000      	.short	0x0000
    8658:	20001168 	.word	0x20001168
    865c:	40001000 	.word	0x40001000
    8660:	4001f098 	.word	0x4001f098
    8664:	40008000 	.word	0x40008000
    8668:	4808      	ldr	r0, [pc, #32]	; (868c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x18c>)
    866a:	4601      	mov	r1, r0
    866c:	79c2      	ldrb	r2, [r0, #7]
    866e:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
    8672:	b112      	cbz	r2, 867a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17a>
    8674:	2a01      	cmp	r2, #1
    8676:	d003      	beq.n	8680 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x180>
    8678:	e006      	b.n	8688 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x188>
    867a:	f041 0102 	orr.w	r1, r1, #2
    867e:	e001      	b.n	8684 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x184>
    8680:	f041 0104 	orr.w	r1, r1, #4
    8684:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
    8688:	f7ff bfb4 	b.w	85f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    868c:	20001168 	.word	0x20001168
    8690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8694:	4d34      	ldr	r5, [pc, #208]	; (8768 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x268>)
    8696:	2400      	movs	r4, #0
    8698:	7b28      	ldrb	r0, [r5, #12]
    869a:	b138      	cbz	r0, 86ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ac>
    869c:	f44f 71a2 	mov.w	r1, #324	; 0x144
    86a0:	4832      	ldr	r0, [pc, #200]	; (876c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26c>)
    86a2:	f007 fe25 	bl	102f0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    86a6:	b108      	cbz	r0, 86ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ac>
    86a8:	2601      	movs	r6, #1
    86aa:	e000      	b.n	86ae <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ae>
    86ac:	2600      	movs	r6, #0
    86ae:	7a68      	ldrb	r0, [r5, #9]
    86b0:	4f2f      	ldr	r7, [pc, #188]	; (8770 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x270>)
    86b2:	f44f 7186 	mov.w	r1, #268	; 0x10c
    86b6:	2801      	cmp	r0, #1
    86b8:	d002      	beq.n	86c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1c0>
    86ba:	2802      	cmp	r0, #2
    86bc:	d006      	beq.n	86cc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1cc>
    86be:	e016      	b.n	86ee <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    86c0:	4638      	mov	r0, r7
    86c2:	f007 fe10 	bl	102e6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    86c6:	b190      	cbz	r0, 86ee <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    86c8:	2408      	movs	r4, #8
    86ca:	e010      	b.n	86ee <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    86cc:	4638      	mov	r0, r7
    86ce:	f007 fe0a 	bl	102e6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    86d2:	b100      	cbz	r0, 86d6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1d6>
    86d4:	2402      	movs	r4, #2
    86d6:	f8d7 0400 	ldr.w	r0, [r7, #1024]	; 0x400
    86da:	43c0      	mvns	r0, r0
    86dc:	f340 0000 	sbfx	r0, r0, #0, #1
    86e0:	1c40      	adds	r0, r0, #1
    86e2:	d101      	bne.n	86e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e8>
    86e4:	f044 0404 	orr.w	r4, r4, #4
    86e8:	b10e      	cbz	r6, 86ee <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    86ea:	f044 0401 	orr.w	r4, r4, #1
    86ee:	f014 0f0b 	tst.w	r4, #11
    86f2:	d107      	bne.n	8704 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>
    86f4:	f44f 7188 	mov.w	r1, #272	; 0x110
    86f8:	4638      	mov	r0, r7
    86fa:	f007 fdf4 	bl	102e6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    86fe:	b108      	cbz	r0, 8704 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>
    8700:	f044 0410 	orr.w	r4, r4, #16
    8704:	481b      	ldr	r0, [pc, #108]	; (8774 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x274>)
    8706:	7800      	ldrb	r0, [r0, #0]
    8708:	b1f8      	cbz	r0, 874a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x24a>
    870a:	f8d7 0640 	ldr.w	r0, [r7, #1600]	; 0x640
    870e:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
    8712:	d007      	beq.n	8724 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    8714:	f44f 718a 	mov.w	r1, #276	; 0x114
    8718:	4638      	mov	r0, r7
    871a:	f007 fde4 	bl	102e6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    871e:	b108      	cbz	r0, 8724 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    8720:	2001      	movs	r0, #1
    8722:	e000      	b.n	8726 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x226>
    8724:	2000      	movs	r0, #0
    8726:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
    872a:	b13e      	cbz	r6, 873c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23c>
    872c:	f44f 718c 	mov.w	r1, #280	; 0x118
    8730:	4638      	mov	r0, r7
    8732:	f007 fdd8 	bl	102e6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    8736:	b108      	cbz	r0, 873c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23c>
    8738:	2001      	movs	r0, #1
    873a:	e000      	b.n	873e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23e>
    873c:	2000      	movs	r0, #0
    873e:	f885 0023 	strb.w	r0, [r5, #35]	; 0x23
    8742:	f8d7 0410 	ldr.w	r0, [r7, #1040]	; 0x410
    8746:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
    874a:	f7ff ff3f 	bl	85cc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xcc>
    874e:	06e0      	lsls	r0, r4, #27
    8750:	d506      	bpl.n	8760 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    8752:	0720      	lsls	r0, r4, #28
    8754:	d404      	bmi.n	8760 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    8756:	7a68      	ldrb	r0, [r5, #9]
    8758:	2801      	cmp	r0, #1
    875a:	d101      	bne.n	8760 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    875c:	f044 0420 	orr.w	r4, r4, #32
    8760:	4620      	mov	r0, r4
    8762:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8766:	0000      	.short	0x0000
    8768:	20001168 	.word	0x20001168
    876c:	40008000 	.word	0x40008000
    8770:	40001000 	.word	0x40001000
    8774:	200002a0 	.word	0x200002a0
    8778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    877c:	4c1a      	ldr	r4, [pc, #104]	; (87e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2e8>)
    877e:	460d      	mov	r5, r1
    8780:	7a21      	ldrb	r1, [r4, #8]
    8782:	b129      	cbz	r1, 8790 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x290>
    8784:	f010 0f11 	tst.w	r0, #17
    8788:	d007      	beq.n	879a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x29a>
    878a:	f7ff fab1 	bl	7cf0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    878e:	e024      	b.n	87da <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2da>
    8790:	f000 f890 	bl	88b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b4>
    8794:	2000      	movs	r0, #0
    8796:	7320      	strb	r0, [r4, #12]
    8798:	e01f      	b.n	87da <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2da>
    879a:	2901      	cmp	r1, #1
    879c:	d001      	beq.n	87a2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a2>
    879e:	2601      	movs	r6, #1
    87a0:	e000      	b.n	87a4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a4>
    87a2:	2600      	movs	r6, #0
    87a4:	79e0      	ldrb	r0, [r4, #7]
    87a6:	2801      	cmp	r0, #1
    87a8:	d00e      	beq.n	87c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c8>
    87aa:	2700      	movs	r7, #0
    87ac:	f000 f882 	bl	88b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b4>
    87b0:	2196      	movs	r1, #150	; 0x96
    87b2:	4630      	mov	r0, r6
    87b4:	f000 f894 	bl	88e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3e0>
    87b8:	4601      	mov	r1, r0
    87ba:	b14f      	cbz	r7, 87d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d0>
    87bc:	353b      	adds	r5, #59	; 0x3b
    87be:	428d      	cmp	r5, r1
    87c0:	d904      	bls.n	87cc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2cc>
    87c2:	2000      	movs	r0, #0
    87c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    87c8:	2701      	movs	r7, #1
    87ca:	e7ef      	b.n	87ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ac>
    87cc:	2001      	movs	r0, #1
    87ce:	71e0      	strb	r0, [r4, #7]
    87d0:	7aa2      	ldrb	r2, [r4, #10]
    87d2:	4630      	mov	r0, r6
    87d4:	f7ff fccc 	bl	8170 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    87d8:	b108      	cbz	r0, 87de <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2de>
    87da:	2001      	movs	r0, #1
    87dc:	e7f2      	b.n	87c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c4>
    87de:	f640 21c4 	movw	r1, #2756	; 0xac4
    87e2:	203e      	movs	r0, #62	; 0x3e
    87e4:	f7f8 f94c 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    87e8:	20001168 	.word	0x20001168
    87ec:	4803      	ldr	r0, [pc, #12]	; (87fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2fc>)
    87ee:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    87f2:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    87f6:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    87fa:	4770      	bx	lr
    87fc:	40001000 	.word	0x40001000
    8800:	4804      	ldr	r0, [pc, #16]	; (8814 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x314>)
    8802:	6a81      	ldr	r1, [r0, #40]	; 0x28
    8804:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    8808:	6281      	str	r1, [r0, #40]	; 0x28
    880a:	4903      	ldr	r1, [pc, #12]	; (8818 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x318>)
    880c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    8810:	6008      	str	r0, [r1, #0]
    8812:	4770      	bx	lr
    8814:	20001168 	.word	0x20001168
    8818:	4001f504 	.word	0x4001f504
    881c:	4a07      	ldr	r2, [pc, #28]	; (883c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x33c>)
    881e:	2000      	movs	r0, #0
    8820:	3208      	adds	r2, #8
    8822:	4906      	ldr	r1, [pc, #24]	; (883c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x33c>)
    8824:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    8828:	1d0a      	adds	r2, r1, #4
    882a:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    882e:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    8832:	4902      	ldr	r1, [pc, #8]	; (883c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x33c>)
    8834:	310c      	adds	r1, #12
    8836:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    883a:	4770      	bx	lr
    883c:	40008000 	.word	0x40008000
    8840:	4903      	ldr	r1, [pc, #12]	; (8850 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x350>)
    8842:	79c9      	ldrb	r1, [r1, #7]
    8844:	2900      	cmp	r1, #0
    8846:	d102      	bne.n	884e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34e>
    8848:	4902      	ldr	r1, [pc, #8]	; (8854 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x354>)
    884a:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    884e:	4770      	bx	lr
    8850:	20001168 	.word	0x20001168
    8854:	4001f098 	.word	0x4001f098
    8858:	b510      	push	{r4, lr}
    885a:	4a14      	ldr	r2, [pc, #80]	; (88ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ac>)
    885c:	b120      	cbz	r0, 8868 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x368>
    885e:	2801      	cmp	r0, #1
    8860:	d011      	beq.n	8886 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x386>
    8862:	f240 7169 	movw	r1, #1897	; 0x769
    8866:	e01c      	b.n	88a2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a2>
    8868:	f101 0028 	add.w	r0, r1, #40	; 0x28
    886c:	e9c2 1002 	strd	r1, r0, [r2, #8]
    8870:	490f      	ldr	r1, [pc, #60]	; (88b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b0>)
    8872:	480e      	ldr	r0, [pc, #56]	; (88ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ac>)
    8874:	f003 ff3e 	bl	c6f4 <mpsl_fem_pa_configuration_set>
    8878:	2800      	cmp	r0, #0
    887a:	d015      	beq.n	88a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    887c:	1c40      	adds	r0, r0, #1
    887e:	d013      	beq.n	88a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    8880:	f44f 61eb 	mov.w	r1, #1880	; 0x758
    8884:	e00d      	b.n	88a2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a2>
    8886:	f101 0029 	add.w	r0, r1, #41	; 0x29
    888a:	e9c2 1002 	strd	r1, r0, [r2, #8]
    888e:	4908      	ldr	r1, [pc, #32]	; (88b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b0>)
    8890:	4806      	ldr	r0, [pc, #24]	; (88ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ac>)
    8892:	f003 ff1d 	bl	c6d0 <mpsl_fem_lna_configuration_set>
    8896:	2800      	cmp	r0, #0
    8898:	d006      	beq.n	88a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    889a:	1c40      	adds	r0, r0, #1
    889c:	d004      	beq.n	88a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    889e:	f240 7165 	movw	r1, #1893	; 0x765
    88a2:	203e      	movs	r0, #62	; 0x3e
    88a4:	f7f8 f8ec 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    88a8:	bd10      	pop	{r4, pc}
    88aa:	0000      	.short	0x0000
    88ac:	200002a8 	.word	0x200002a8
    88b0:	000089dc 	.word	0x000089dc
    88b4:	4802      	ldr	r0, [pc, #8]	; (88c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c0>)
    88b6:	2100      	movs	r1, #0
    88b8:	71c1      	strb	r1, [r0, #7]
    88ba:	7201      	strb	r1, [r0, #8]
    88bc:	7241      	strb	r1, [r0, #9]
    88be:	4770      	bx	lr
    88c0:	20001168 	.word	0x20001168
    88c4:	4a05      	ldr	r2, [pc, #20]	; (88dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3dc>)
    88c6:	79d2      	ldrb	r2, [r2, #7]
    88c8:	2a01      	cmp	r2, #1
    88ca:	d006      	beq.n	88da <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3da>
    88cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    88d0:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    88d4:	fbb1 f1f2 	udiv	r1, r1, r2
    88d8:	1a40      	subs	r0, r0, r1
    88da:	4770      	bx	lr
    88dc:	20001168 	.word	0x20001168
    88e0:	b570      	push	{r4, r5, r6, lr}
    88e2:	4c13      	ldr	r4, [pc, #76]	; (8930 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x430>)
    88e4:	4603      	mov	r3, r0
    88e6:	460d      	mov	r5, r1
    88e8:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    88ec:	2000      	movs	r0, #0
    88ee:	b15a      	cbz	r2, 8908 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
    88f0:	4621      	mov	r1, r4
    88f2:	f891 1020 	ldrb.w	r1, [r1, #32]
    88f6:	b163      	cbz	r3, 8912 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x412>
    88f8:	2b01      	cmp	r3, #1
    88fa:	d111      	bne.n	8920 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x420>
    88fc:	2a01      	cmp	r2, #1
    88fe:	4628      	mov	r0, r5
    8900:	d012      	beq.n	8928 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x428>
    8902:	f007 fcfa 	bl	102fa <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    8906:	e009      	b.n	891c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x41c>
    8908:	f640 016e 	movw	r1, #2158	; 0x86e
    890c:	203e      	movs	r0, #62	; 0x3e
    890e:	f7f8 f8b7 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8912:	2a01      	cmp	r2, #1
    8914:	4628      	mov	r0, r5
    8916:	d004      	beq.n	8922 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x422>
    8918:	f007 fcfd 	bl	10316 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    891c:	69e1      	ldr	r1, [r4, #28]
    891e:	4408      	add	r0, r1
    8920:	bd70      	pop	{r4, r5, r6, pc}
    8922:	f000 f8d1 	bl	8ac8 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    8926:	e7f9      	b.n	891c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x41c>
    8928:	f000 f8c0 	bl	8aac <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    892c:	e7f6      	b.n	891c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x41c>
    892e:	0000      	.short	0x0000
    8930:	20001168 	.word	0x20001168
    8934:	b510      	push	{r4, lr}
    8936:	f7ff fbef 	bl	8118 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    893a:	f7ff fde7 	bl	850c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    893e:	f7ff fe1d 	bl	857c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x7c>
    8942:	f7ff ff53 	bl	87ec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ec>
    8946:	f007 fe31 	bl	105ac <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    894a:	2800      	cmp	r0, #0
    894c:	d108      	bne.n	8960 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x460>
    894e:	f007 fe1d 	bl	1058c <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    8952:	2800      	cmp	r0, #0
    8954:	d104      	bne.n	8960 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x460>
    8956:	4803      	ldr	r0, [pc, #12]	; (8964 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x464>)
    8958:	6801      	ldr	r1, [r0, #0]
    895a:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    895e:	6001      	str	r1, [r0, #0]
    8960:	bd10      	pop	{r4, pc}
    8962:	0000      	.short	0x0000
    8964:	40001568 	.word	0x40001568
    8968:	b510      	push	{r4, lr}
    896a:	4604      	mov	r4, r0
    896c:	f7ff fbd4 	bl	8118 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    8970:	f7ff fdcc 	bl	850c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    8974:	4620      	mov	r0, r4
    8976:	f7ff fde7 	bl	8548 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x48>
    897a:	f007 fe17 	bl	105ac <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    897e:	2800      	cmp	r0, #0
    8980:	d00d      	beq.n	899e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x49e>
    8982:	4a09      	ldr	r2, [pc, #36]	; (89a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4a8>)
    8984:	6811      	ldr	r1, [r2, #0]
    8986:	0650      	lsls	r0, r2, #25
    8988:	2c02      	cmp	r4, #2
    898a:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    898e:	d007      	beq.n	89a0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4a0>
    8990:	f3c0 2006 	ubfx	r0, r0, #8, #7
    8994:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    8998:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    899c:	6010      	str	r0, [r2, #0]
    899e:	bd10      	pop	{r4, pc}
    89a0:	f3c0 6006 	ubfx	r0, r0, #24, #7
    89a4:	e7f6      	b.n	8994 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x494>
    89a6:	0000      	.short	0x0000
    89a8:	40001588 	.word	0x40001588
    89ac:	a62c0000 	.word	0xa62c0000
    89b0:	0604a1e0 	.word	0x0604a1e0
    89b4:	0e0c0a08 	.word	0x0e0c0a08
    89b8:	16141210 	.word	0x16141210
    89bc:	201e1c18 	.word	0x201e1c18
    89c0:	28262422 	.word	0x28262422
    89c4:	302e2c2a 	.word	0x302e2c2a
    89c8:	38363432 	.word	0x38363432
    89cc:	403e3c3a 	.word	0x403e3c3a
    89d0:	48464442 	.word	0x48464442
    89d4:	024e4c4a 	.word	0x024e4c4a
    89d8:	0000501a 	.word	0x0000501a
    89dc:	00000001 	.word	0x00000001
    89e0:	40001110 	.word	0x40001110
	...
    89f8:	00001e14 	.word	0x00001e14
    89fc:	00001130 	.word	0x00001130
    8a00:	00000000 	.word	0x00000000
    8a04:	00000028 	.word	0x00000028
    8a08:	00000018 	.word	0x00000018
    8a0c:	00000000 	.word	0x00000000
    8a10:	00001e14 	.word	0x00001e14
    8a14:	00001130 	.word	0x00001130
    8a18:	00000000 	.word	0x00000000
    8a1c:	00001770 	.word	0x00001770
    8a20:	00000fa0 	.word	0x00000fa0

00008a24 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
    8a24:	b570      	push	{r4, r5, r6, lr}
    8a26:	4605      	mov	r5, r0
    8a28:	4614      	mov	r4, r2
    8a2a:	4608      	mov	r0, r1
    8a2c:	f7ff fb9a 	bl	8164 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    8a30:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    8a34:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
    8a38:	ebc0 01c1 	rsb	r1, r0, r1, lsl #3
    8a3c:	4807      	ldr	r0, [pc, #28]	; (8a5c <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA+0x38>)
    8a3e:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    8a42:	4408      	add	r0, r1
    8a44:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    8a48:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
    8a4c:	fbb0 f5f1 	udiv	r5, r0, r1
    8a50:	4620      	mov	r0, r4
    8a52:	f7ff fb5b 	bl	810c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8a56:	4428      	add	r0, r5
    8a58:	1d40      	adds	r0, r0, #5
    8a5a:	bd70      	pop	{r4, r5, r6, pc}
    8a5c:	00008aec 	.word	0x00008aec

00008a60 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
    8a60:	b570      	push	{r4, r5, r6, lr}
    8a62:	4d0e      	ldr	r5, [pc, #56]	; (8a9c <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    8a64:	461c      	mov	r4, r3
    8a66:	3d08      	subs	r5, #8
    8a68:	4b0c      	ldr	r3, [pc, #48]	; (8a9c <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    8a6a:	f835 1011 	ldrh.w	r1, [r5, r1, lsl #1]
    8a6e:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    8a72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8a76:	ebc5 10c0 	rsb	r0, r5, r0, lsl #7
    8a7a:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    8a7e:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    8a82:	4418      	add	r0, r3
    8a84:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    8a88:	fbb0 f5f1 	udiv	r5, r0, r1
    8a8c:	4610      	mov	r0, r2
    8a8e:	f7ff fb3d 	bl	810c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8a92:	4428      	add	r0, r5
    8a94:	4420      	add	r0, r4
    8a96:	1d40      	adds	r0, r0, #5
    8a98:	bd70      	pop	{r4, r5, r6, pc}
    8a9a:	0000      	.short	0x0000
    8a9c:	00008aec 	.word	0x00008aec

00008aa0 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    8aa0:	4901      	ldr	r1, [pc, #4]	; (8aa8 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    8aa2:	b2c0      	uxtb	r0, r0
    8aa4:	6008      	str	r0, [r1, #0]
    8aa6:	4770      	bx	lr
    8aa8:	4000150c 	.word	0x4000150c

00008aac <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
    8aac:	4a05      	ldr	r2, [pc, #20]	; (8ac4 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x18>)
    8aae:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    8ab2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8ab6:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    8aba:	fbb1 f1f2 	udiv	r1, r1, r2
    8abe:	4408      	add	r0, r1
    8ac0:	1e80      	subs	r0, r0, #2
    8ac2:	4770      	bx	lr
    8ac4:	00008ae4 	.word	0x00008ae4

00008ac8 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
    8ac8:	4a05      	ldr	r2, [pc, #20]	; (8ae0 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>)
    8aca:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    8ace:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8ad2:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
    8ad6:	fbb1 f1f2 	udiv	r1, r1, r2
    8ada:	4408      	add	r0, r1
    8adc:	4770      	bx	lr
    8ade:	0000      	.short	0x0000
    8ae0:	00008ae4 	.word	0x00008ae4
    8ae4:	05dc0000 	.word	0x05dc0000
    8ae8:	000003e8 	.word	0x000003e8
    8aec:	00000000 	.word	0x00000000
    8af0:	00001e14 	.word	0x00001e14
    8af4:	00001130 	.word	0x00001130

00008af8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>:
    8af8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8afc:	461e      	mov	r6, r3
    8afe:	4617      	mov	r7, r2
    8b00:	460c      	mov	r4, r1
    8b02:	4605      	mov	r5, r0
    8b04:	f000 f856 	bl	8bb4 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>
    8b08:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8bb0 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xb8>
    8b0c:	4680      	mov	r8, r0
    8b0e:	f899 0000 	ldrb.w	r0, [r9]
    8b12:	42a8      	cmp	r0, r5
    8b14:	d110      	bne.n	8b38 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    8b16:	f899 1001 	ldrb.w	r1, [r9, #1]
    8b1a:	4648      	mov	r0, r9
    8b1c:	42a1      	cmp	r1, r4
    8b1e:	d10b      	bne.n	8b38 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    8b20:	f990 1002 	ldrsb.w	r1, [r0, #2]
    8b24:	42b9      	cmp	r1, r7
    8b26:	d107      	bne.n	8b38 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    8b28:	78c2      	ldrb	r2, [r0, #3]
    8b2a:	4542      	cmp	r2, r8
    8b2c:	d104      	bne.n	8b38 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    8b2e:	8881      	ldrh	r1, [r0, #4]
    8b30:	8031      	strh	r1, [r6, #0]
    8b32:	7980      	ldrb	r0, [r0, #6]
    8b34:	70b0      	strb	r0, [r6, #2]
    8b36:	e037      	b.n	8ba8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xb0>
    8b38:	463a      	mov	r2, r7
    8b3a:	4621      	mov	r1, r4
    8b3c:	2d01      	cmp	r5, #1
    8b3e:	d009      	beq.n	8b54 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x5c>
    8b40:	2d02      	cmp	r5, #2
    8b42:	d009      	beq.n	8b58 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x60>
    8b44:	2d04      	cmp	r5, #4
    8b46:	d009      	beq.n	8b5c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x64>
    8b48:	2d08      	cmp	r5, #8
    8b4a:	d009      	beq.n	8b60 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x68>
    8b4c:	f240 4162 	movw	r1, #1122	; 0x462
    8b50:	2006      	movs	r0, #6
    8b52:	e00c      	b.n	8b6e <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x76>
    8b54:	2000      	movs	r0, #0
    8b56:	e004      	b.n	8b62 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    8b58:	2001      	movs	r0, #1
    8b5a:	e002      	b.n	8b62 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    8b5c:	2003      	movs	r0, #3
    8b5e:	e000      	b.n	8b62 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    8b60:	2002      	movs	r0, #2
    8b62:	466b      	mov	r3, sp
    8b64:	f000 f89e 	bl	8ca4 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>
    8b68:	b118      	cbz	r0, 8b72 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x7a>
    8b6a:	213d      	movs	r1, #61	; 0x3d
    8b6c:	2075      	movs	r0, #117	; 0x75
    8b6e:	f7f7 ff87 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8b72:	4620      	mov	r0, r4
    8b74:	f7ff f8b4 	bl	7ce0 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>
    8b78:	4602      	mov	r2, r0
    8b7a:	2300      	movs	r3, #0
    8b7c:	4631      	mov	r1, r6
    8b7e:	f99d 0000 	ldrsb.w	r0, [sp]
    8b82:	f003 fdc9 	bl	c718 <mpsl_fem_tx_power_split>
    8b86:	4601      	mov	r1, r0
    8b88:	f889 1007 	strb.w	r1, [r9, #7]
    8b8c:	8831      	ldrh	r1, [r6, #0]
    8b8e:	f8a9 1004 	strh.w	r1, [r9, #4]
    8b92:	78b1      	ldrb	r1, [r6, #2]
    8b94:	f889 1006 	strb.w	r1, [r9, #6]
    8b98:	f889 5000 	strb.w	r5, [r9]
    8b9c:	f889 4001 	strb.w	r4, [r9, #1]
    8ba0:	f889 7002 	strb.w	r7, [r9, #2]
    8ba4:	f889 8003 	strb.w	r8, [r9, #3]
    8ba8:	f999 0007 	ldrsb.w	r0, [r9, #7]
    8bac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8bb0:	20000362 	.word	0x20000362

00008bb4 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>:
    8bb4:	4801      	ldr	r0, [pc, #4]	; (8bbc <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA+0x8>)
    8bb6:	7800      	ldrb	r0, [r0, #0]
    8bb8:	4770      	bx	lr
    8bba:	0000      	.short	0x0000
    8bbc:	200002c0 	.word	0x200002c0

00008bc0 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>:
    8bc0:	b570      	push	{r4, r5, r6, lr}
    8bc2:	4c17      	ldr	r4, [pc, #92]	; (8c20 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x60>)
    8bc4:	7860      	ldrb	r0, [r4, #1]
    8bc6:	2800      	cmp	r0, #0
    8bc8:	d123      	bne.n	8c12 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x52>
    8bca:	2001      	movs	r0, #1
    8bcc:	7060      	strb	r0, [r4, #1]
    8bce:	f007 fcc7 	bl	10560 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    8bd2:	f06f 0527 	mvn.w	r5, #39	; 0x27
    8bd6:	b928      	cbnz	r0, 8be4 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
    8bd8:	f007 fcf8 	bl	105cc <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    8bdc:	b910      	cbnz	r0, 8be4 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
    8bde:	f007 fcff 	bl	105e0 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    8be2:	b120      	cbz	r0, 8bee <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x2e>
    8be4:	480f      	ldr	r0, [pc, #60]	; (8c24 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x64>)
    8be6:	6060      	str	r0, [r4, #4]
    8be8:	70a5      	strb	r5, [r4, #2]
    8bea:	2008      	movs	r0, #8
    8bec:	e010      	b.n	8c10 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x50>
    8bee:	f007 fc8c 	bl	1050a <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    8bf2:	b940      	cbnz	r0, 8c06 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    8bf4:	f007 fc93 	bl	1051e <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    8bf8:	b928      	cbnz	r0, 8c06 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    8bfa:	f007 fca7 	bl	1054c <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    8bfe:	b910      	cbnz	r0, 8c06 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    8c00:	f007 fcb8 	bl	10574 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    8c04:	b130      	cbz	r0, 8c14 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x54>
    8c06:	4807      	ldr	r0, [pc, #28]	; (8c24 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x64>)
    8c08:	3031      	adds	r0, #49	; 0x31
    8c0a:	6060      	str	r0, [r4, #4]
    8c0c:	70a5      	strb	r5, [r4, #2]
    8c0e:	2004      	movs	r0, #4
    8c10:	70e0      	strb	r0, [r4, #3]
    8c12:	bd70      	pop	{r4, r5, r6, pc}
    8c14:	f240 113f 	movw	r1, #319	; 0x13f
    8c18:	2074      	movs	r0, #116	; 0x74
    8c1a:	f003 fbbd 	bl	c398 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8c1e:	0000      	.short	0x0000
    8c20:	200002c0 	.word	0x200002c0
    8c24:	0001092d 	.word	0x0001092d

00008c28 <mpsl_tx_power_radio_supported_power_adjust>:
    8c28:	4a06      	ldr	r2, [pc, #24]	; (8c44 <mpsl_tx_power_radio_supported_power_adjust+0x1c>)
    8c2a:	b500      	push	{lr}
    8c2c:	f992 2003 	ldrsb.w	r2, [r2, #3]
    8c30:	4290      	cmp	r0, r2
    8c32:	db01      	blt.n	8c38 <mpsl_tx_power_radio_supported_power_adjust+0x10>
    8c34:	4610      	mov	r0, r2
    8c36:	bd00      	pop	{pc}
    8c38:	f000 f808 	bl	8c4c <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ>
    8c3c:	4902      	ldr	r1, [pc, #8]	; (8c48 <mpsl_tx_power_radio_supported_power_adjust+0x20>)
    8c3e:	5608      	ldrsb	r0, [r1, r0]
    8c40:	bd00      	pop	{pc}
    8c42:	0000      	.short	0x0000
    8c44:	200002c0 	.word	0x200002c0
    8c48:	0001091f 	.word	0x0001091f

00008c4c <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ>:
    8c4c:	4602      	mov	r2, r0
    8c4e:	4813      	ldr	r0, [pc, #76]	; (8c9c <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x50>)
    8c50:	b510      	push	{r4, lr}
    8c52:	f990 3003 	ldrsb.w	r3, [r0, #3]
    8c56:	429a      	cmp	r2, r3
    8c58:	db01      	blt.n	8c5e <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x12>
    8c5a:	200d      	movs	r0, #13
    8c5c:	bd10      	pop	{r4, pc}
    8c5e:	f990 3002 	ldrsb.w	r3, [r0, #2]
    8c62:	429a      	cmp	r2, r3
    8c64:	dc01      	bgt.n	8c6a <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1e>
    8c66:	2000      	movs	r0, #0
    8c68:	bd10      	pop	{r4, pc}
    8c6a:	b101      	cbz	r1, 8c6e <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x22>
    8c6c:	2101      	movs	r1, #1
    8c6e:	1ad4      	subs	r4, r2, r3
    8c70:	6843      	ldr	r3, [r0, #4]
    8c72:	5d18      	ldrb	r0, [r3, r4]
    8c74:	4c0a      	ldr	r4, [pc, #40]	; (8ca0 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x54>)
    8c76:	5624      	ldrsb	r4, [r4, r0]
    8c78:	4294      	cmp	r4, r2
    8c7a:	d0f5      	beq.n	8c68 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    8c7c:	4c08      	ldr	r4, [pc, #32]	; (8ca0 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x54>)
    8c7e:	4408      	add	r0, r1
    8c80:	343f      	adds	r4, #63	; 0x3f
    8c82:	b2c0      	uxtb	r0, r0
    8c84:	b2d2      	uxtb	r2, r2
    8c86:	42a3      	cmp	r3, r4
    8c88:	d1ee      	bne.n	8c68 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    8c8a:	2900      	cmp	r1, #0
    8c8c:	d0ec      	beq.n	8c68 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    8c8e:	2a01      	cmp	r2, #1
    8c90:	d001      	beq.n	8c96 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x4a>
    8c92:	2a02      	cmp	r2, #2
    8c94:	d1e8      	bne.n	8c68 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    8c96:	1c40      	adds	r0, r0, #1
    8c98:	b2c0      	uxtb	r0, r0
    8c9a:	bd10      	pop	{r4, pc}
    8c9c:	200002c0 	.word	0x200002c0
    8ca0:	0001091f 	.word	0x0001091f

00008ca4 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>:
    8ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8ca8:	461c      	mov	r4, r3
    8caa:	4690      	mov	r8, r2
    8cac:	460d      	mov	r5, r1
    8cae:	4606      	mov	r6, r0
    8cb0:	f06f 0715 	mvn.w	r7, #21
    8cb4:	2804      	cmp	r0, #4
    8cb6:	d804      	bhi.n	8cc2 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
    8cb8:	b11c      	cbz	r4, 8cc2 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
    8cba:	f007 fb37 	bl	1032c <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x16>
    8cbe:	42a8      	cmp	r0, r5
    8cc0:	d802      	bhi.n	8cc8 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x24>
    8cc2:	4638      	mov	r0, r7
    8cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8cc8:	4805      	ldr	r0, [pc, #20]	; (8ce0 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x3c>)
    8cca:	4642      	mov	r2, r8
    8ccc:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    8cd0:	b118      	cbz	r0, 8cda <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
    8cd2:	5740      	ldrsb	r0, [r0, r5]
    8cd4:	4282      	cmp	r2, r0
    8cd6:	dd00      	ble.n	8cda <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
    8cd8:	4602      	mov	r2, r0
    8cda:	7022      	strb	r2, [r4, #0]
    8cdc:	2000      	movs	r0, #0
    8cde:	e7f1      	b.n	8cc4 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x20>
    8ce0:	200011a0 	.word	0x200011a0

00008ce4 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
    8ce4:	4801      	ldr	r0, [pc, #4]	; (8cec <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
    8ce6:	7800      	ldrb	r0, [r0, #0]
    8ce8:	4770      	bx	lr
    8cea:	0000      	.short	0x0000
    8cec:	200002c8 	.word	0x200002c8

00008cf0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
    8cf0:	4905      	ldr	r1, [pc, #20]	; (8d08 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
    8cf2:	780a      	ldrb	r2, [r1, #0]
    8cf4:	4290      	cmp	r0, r2
    8cf6:	d301      	bcc.n	8cfc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
    8cf8:	2000      	movs	r0, #0
    8cfa:	4770      	bx	lr
    8cfc:	6849      	ldr	r1, [r1, #4]
    8cfe:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    8d02:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    8d06:	4770      	bx	lr
    8d08:	200002c8 	.word	0x200002c8

00008d0c <MPSL_IRQ_RADIO_Handler>:
    8d0c:	490e      	ldr	r1, [pc, #56]	; (8d48 <MPSL_IRQ_RADIO_Handler+0x3c>)
    8d0e:	b510      	push	{r4, lr}
    8d10:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
    8d14:	2820      	cmp	r0, #32
    8d16:	d012      	beq.n	8d3e <MPSL_IRQ_RADIO_Handler+0x32>
    8d18:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
    8d1c:	f5a1 6280 	sub.w	r2, r1, #1024	; 0x400
    8d20:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    8d24:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    8d28:	f891 1032 	ldrb.w	r1, [r1, #50]	; 0x32
    8d2c:	6840      	ldr	r0, [r0, #4]
    8d2e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    8d32:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    8d36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8d3a:	2104      	movs	r1, #4
    8d3c:	4710      	bx	r2
    8d3e:	f640 01bc 	movw	r1, #2236	; 0x8bc
    8d42:	2070      	movs	r0, #112	; 0x70
    8d44:	f003 fb28 	bl	c398 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8d48:	200015b4 	.word	0x200015b4
    8d4c:	b570      	push	{r4, r5, r6, lr}
    8d4e:	4605      	mov	r5, r0
    8d50:	2a20      	cmp	r2, #32
    8d52:	d028      	beq.n	8da6 <MPSL_IRQ_RADIO_Handler+0x9a>
    8d54:	4819      	ldr	r0, [pc, #100]	; (8dbc <MPSL_IRQ_RADIO_Handler+0xb0>)
    8d56:	4c1a      	ldr	r4, [pc, #104]	; (8dc0 <MPSL_IRQ_RADIO_Handler+0xb4>)
    8d58:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
    8d5c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    8d60:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
    8d64:	4423      	add	r3, r4
    8d66:	2920      	cmp	r1, #32
    8d68:	d022      	beq.n	8db0 <MPSL_IRQ_RADIO_Handler+0xa4>
    8d6a:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
    8d6e:	7840      	ldrb	r0, [r0, #1]
    8d70:	784c      	ldrb	r4, [r1, #1]
    8d72:	7048      	strb	r0, [r1, #1]
    8d74:	4620      	mov	r0, r4
    8d76:	4601      	mov	r1, r0
    8d78:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
    8d7c:	4291      	cmp	r1, r2
    8d7e:	7005      	strb	r5, [r0, #0]
    8d80:	7840      	ldrb	r0, [r0, #1]
    8d82:	d1f8      	bne.n	8d76 <MPSL_IRQ_RADIO_Handler+0x6a>
    8d84:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
    8d88:	2a20      	cmp	r2, #32
    8d8a:	bf1a      	itte	ne
    8d8c:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
    8d90:	7054      	strbne	r4, [r2, #1]
    8d92:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
    8d96:	2220      	movs	r2, #32
    8d98:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
    8d9c:	f88c 2001 	strb.w	r2, [ip, #1]
    8da0:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
    8da4:	bd70      	pop	{r4, r5, r6, pc}
    8da6:	f44f 7126 	mov.w	r1, #664	; 0x298
    8daa:	2070      	movs	r0, #112	; 0x70
    8dac:	f003 faf4 	bl	c398 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8db0:	f893 4020 	ldrb.w	r4, [r3, #32]
    8db4:	7840      	ldrb	r0, [r0, #1]
    8db6:	f883 0020 	strb.w	r0, [r3, #32]
    8dba:	e7db      	b.n	8d74 <MPSL_IRQ_RADIO_Handler+0x68>
    8dbc:	20001534 	.word	0x20001534
    8dc0:	200015b4 	.word	0x200015b4
    8dc4:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8dc8:	b08d      	sub	sp, #52	; 0x34
    8dca:	4615      	mov	r5, r2
    8dcc:	460c      	mov	r4, r1
    8dce:	f002 fa11 	bl	b1f4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    8dd2:	4428      	add	r0, r5
    8dd4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    8dd8:	9008      	str	r0, [sp, #32]
    8dda:	6821      	ldr	r1, [r4, #0]
    8ddc:	1a08      	subs	r0, r1, r0
    8dde:	0200      	lsls	r0, r0, #8
    8de0:	17c1      	asrs	r1, r0, #31
    8de2:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    8de6:	1200      	asrs	r0, r0, #8
    8de8:	2800      	cmp	r0, #0
    8dea:	f300 80f0 	bgt.w	8fce <MPSL_IRQ_RADIO_Handler+0x2c2>
    8dee:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    8df2:	48cd      	ldr	r0, [pc, #820]	; (9128 <MPSL_IRQ_RADIO_Handler+0x41c>)
    8df4:	eb08 0148 	add.w	r1, r8, r8, lsl #1
    8df8:	4408      	add	r0, r1
    8dfa:	9009      	str	r0, [sp, #36]	; 0x24
    8dfc:	f890 5020 	ldrb.w	r5, [r0, #32]
    8e00:	2020      	movs	r0, #32
    8e02:	4eca      	ldr	r6, [pc, #808]	; (912c <MPSL_IRQ_RADIO_Handler+0x420>)
    8e04:	f10d 0a18 	add.w	sl, sp, #24
    8e08:	f10d 091c 	add.w	r9, sp, #28
    8e0c:	f88d 0018 	strb.w	r0, [sp, #24]
    8e10:	2d20      	cmp	r5, #32
    8e12:	bf1c      	itt	ne
    8e14:	48c6      	ldrne	r0, [pc, #792]	; (9130 <MPSL_IRQ_RADIO_Handler+0x424>)
    8e16:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
    8e1a:	d038      	beq.n	8e8e <MPSL_IRQ_RADIO_Handler+0x182>
    8e1c:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    8e20:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    8e24:	f100 0108 	add.w	r1, r0, #8
    8e28:	68c0      	ldr	r0, [r0, #12]
    8e2a:	6827      	ldr	r7, [r4, #0]
    8e2c:	1a38      	subs	r0, r7, r0
    8e2e:	0200      	lsls	r0, r0, #8
    8e30:	17c2      	asrs	r2, r0, #31
    8e32:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    8e36:	1200      	asrs	r0, r0, #8
    8e38:	d429      	bmi.n	8e8e <MPSL_IRQ_RADIO_Handler+0x182>
    8e3a:	89e0      	ldrh	r0, [r4, #14]
    8e3c:	b300      	cbz	r0, 8e80 <MPSL_IRQ_RADIO_Handler+0x174>
    8e3e:	89c8      	ldrh	r0, [r1, #14]
    8e40:	b9f0      	cbnz	r0, 8e80 <MPSL_IRQ_RADIO_Handler+0x174>
    8e42:	6808      	ldr	r0, [r1, #0]
    8e44:	9003      	str	r0, [sp, #12]
    8e46:	f003 f907 	bl	c058 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    8e4a:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    8e4e:	bf08      	it	eq
    8e50:	200d      	moveq	r0, #13
    8e52:	d00b      	beq.n	8e6c <MPSL_IRQ_RADIO_Handler+0x160>
    8e54:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    8e58:	3856      	subs	r0, #86	; 0x56
    8e5a:	bf08      	it	eq
    8e5c:	201c      	moveq	r0, #28
    8e5e:	d005      	beq.n	8e6c <MPSL_IRQ_RADIO_Handler+0x160>
    8e60:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    8e64:	389f      	subs	r0, #159	; 0x9f
    8e66:	bf14      	ite	ne
    8e68:	2000      	movne	r0, #0
    8e6a:	2032      	moveq	r0, #50	; 0x32
    8e6c:	1c41      	adds	r1, r0, #1
    8e6e:	9803      	ldr	r0, [sp, #12]
    8e70:	1a38      	subs	r0, r7, r0
    8e72:	0200      	lsls	r0, r0, #8
    8e74:	17c2      	asrs	r2, r0, #31
    8e76:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    8e7a:	1200      	asrs	r0, r0, #8
    8e7c:	4288      	cmp	r0, r1
    8e7e:	db06      	blt.n	8e8e <MPSL_IRQ_RADIO_Handler+0x182>
    8e80:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    8e84:	f88a 5000 	strb.w	r5, [sl]
    8e88:	7845      	ldrb	r5, [r0, #1]
    8e8a:	2d20      	cmp	r5, #32
    8e8c:	d1c6      	bne.n	8e1c <MPSL_IRQ_RADIO_Handler+0x110>
    8e8e:	f89a 0000 	ldrb.w	r0, [sl]
    8e92:	f889 0000 	strb.w	r0, [r9]
    8e96:	2d20      	cmp	r5, #32
    8e98:	bf1c      	itt	ne
    8e9a:	48a5      	ldrne	r0, [pc, #660]	; (9130 <MPSL_IRQ_RADIO_Handler+0x424>)
    8e9c:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
    8ea0:	f000 813e 	beq.w	9120 <MPSL_IRQ_RADIO_Handler+0x414>
    8ea4:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    8ea8:	eb06 0780 	add.w	r7, r6, r0, lsl #2
    8eac:	6861      	ldr	r1, [r4, #4]
    8eae:	f8d7 8008 	ldr.w	r8, [r7, #8]
    8eb2:	f107 0008 	add.w	r0, r7, #8
    8eb6:	eba8 0101 	sub.w	r1, r8, r1
    8eba:	0209      	lsls	r1, r1, #8
    8ebc:	17ca      	asrs	r2, r1, #31
    8ebe:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    8ec2:	1209      	asrs	r1, r1, #8
    8ec4:	d427      	bmi.n	8f16 <MPSL_IRQ_RADIO_Handler+0x20a>
    8ec6:	89c0      	ldrh	r0, [r0, #14]
    8ec8:	2800      	cmp	r0, #0
    8eca:	f000 8129 	beq.w	9120 <MPSL_IRQ_RADIO_Handler+0x414>
    8ece:	89e0      	ldrh	r0, [r4, #14]
    8ed0:	2800      	cmp	r0, #0
    8ed2:	f040 8125 	bne.w	9120 <MPSL_IRQ_RADIO_Handler+0x414>
    8ed6:	f8d4 a000 	ldr.w	sl, [r4]
    8eda:	f003 f8bd 	bl	c058 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    8ede:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    8ee2:	bf08      	it	eq
    8ee4:	200d      	moveq	r0, #13
    8ee6:	d00b      	beq.n	8f00 <MPSL_IRQ_RADIO_Handler+0x1f4>
    8ee8:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    8eec:	3856      	subs	r0, #86	; 0x56
    8eee:	bf08      	it	eq
    8ef0:	201c      	moveq	r0, #28
    8ef2:	d005      	beq.n	8f00 <MPSL_IRQ_RADIO_Handler+0x1f4>
    8ef4:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    8ef8:	389f      	subs	r0, #159	; 0x9f
    8efa:	bf14      	ite	ne
    8efc:	2000      	movne	r0, #0
    8efe:	2032      	moveq	r0, #50	; 0x32
    8f00:	1c41      	adds	r1, r0, #1
    8f02:	eba8 000a 	sub.w	r0, r8, sl
    8f06:	0200      	lsls	r0, r0, #8
    8f08:	17c2      	asrs	r2, r0, #31
    8f0a:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    8f0e:	1200      	asrs	r0, r0, #8
    8f10:	4288      	cmp	r0, r1
    8f12:	f280 8105 	bge.w	9120 <MPSL_IRQ_RADIO_Handler+0x414>
    8f16:	f889 5000 	strb.w	r5, [r9]
    8f1a:	7e38      	ldrb	r0, [r7, #24]
    8f1c:	7c21      	ldrb	r1, [r4, #16]
    8f1e:	4288      	cmp	r0, r1
    8f20:	d906      	bls.n	8f30 <MPSL_IRQ_RADIO_Handler+0x224>
    8f22:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    8f26:	7845      	ldrb	r5, [r0, #1]
    8f28:	2d20      	cmp	r5, #32
    8f2a:	d1bb      	bne.n	8ea4 <MPSL_IRQ_RADIO_Handler+0x198>
    8f2c:	f000 b8f8 	b.w	9120 <MPSL_IRQ_RADIO_Handler+0x414>
    8f30:	f89d 001c 	ldrb.w	r0, [sp, #28]
    8f34:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    8f38:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    8f3c:	8ac1      	ldrh	r1, [r0, #22]
    8f3e:	68c5      	ldr	r5, [r0, #12]
    8f40:	bbe1      	cbnz	r1, 8fbc <MPSL_IRQ_RADIO_Handler+0x2b0>
    8f42:	89e1      	ldrh	r1, [r4, #14]
    8f44:	b3d1      	cbz	r1, 8fbc <MPSL_IRQ_RADIO_Handler+0x2b0>
    8f46:	6887      	ldr	r7, [r0, #8]
    8f48:	f003 f886 	bl	c058 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    8f4c:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    8f50:	bf08      	it	eq
    8f52:	200d      	moveq	r0, #13
    8f54:	d00b      	beq.n	8f6e <MPSL_IRQ_RADIO_Handler+0x262>
    8f56:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    8f5a:	3856      	subs	r0, #86	; 0x56
    8f5c:	bf08      	it	eq
    8f5e:	201c      	moveq	r0, #28
    8f60:	d005      	beq.n	8f6e <MPSL_IRQ_RADIO_Handler+0x262>
    8f62:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    8f66:	389f      	subs	r0, #159	; 0x9f
    8f68:	bf14      	ite	ne
    8f6a:	2000      	movne	r0, #0
    8f6c:	2032      	moveq	r0, #50	; 0x32
    8f6e:	1c41      	adds	r1, r0, #1
    8f70:	1be8      	subs	r0, r5, r7
    8f72:	0200      	lsls	r0, r0, #8
    8f74:	17c2      	asrs	r2, r0, #31
    8f76:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    8f7a:	1200      	asrs	r0, r0, #8
    8f7c:	4288      	cmp	r0, r1
    8f7e:	da1d      	bge.n	8fbc <MPSL_IRQ_RADIO_Handler+0x2b0>
    8f80:	f003 f86a 	bl	c058 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    8f84:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    8f88:	bf08      	it	eq
    8f8a:	200d      	moveq	r0, #13
    8f8c:	d00b      	beq.n	8fa6 <MPSL_IRQ_RADIO_Handler+0x29a>
    8f8e:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    8f92:	3856      	subs	r0, #86	; 0x56
    8f94:	bf08      	it	eq
    8f96:	201c      	moveq	r0, #28
    8f98:	d005      	beq.n	8fa6 <MPSL_IRQ_RADIO_Handler+0x29a>
    8f9a:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    8f9e:	389f      	subs	r0, #159	; 0x9f
    8fa0:	bf14      	ite	ne
    8fa2:	2000      	movne	r0, #0
    8fa4:	2032      	moveq	r0, #50	; 0x32
    8fa6:	f89d 101c 	ldrb.w	r1, [sp, #28]
    8faa:	1c40      	adds	r0, r0, #1
    8fac:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    8fb0:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    8fb4:	6889      	ldr	r1, [r1, #8]
    8fb6:	4408      	add	r0, r1
    8fb8:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
    8fbc:	9808      	ldr	r0, [sp, #32]
    8fbe:	1a28      	subs	r0, r5, r0
    8fc0:	0200      	lsls	r0, r0, #8
    8fc2:	17c1      	asrs	r1, r0, #31
    8fc4:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    8fc8:	1200      	asrs	r0, r0, #8
    8fca:	2800      	cmp	r0, #0
    8fcc:	dd03      	ble.n	8fd6 <MPSL_IRQ_RADIO_Handler+0x2ca>
    8fce:	b011      	add	sp, #68	; 0x44
    8fd0:	2000      	movs	r0, #0
    8fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8fd6:	6820      	ldr	r0, [r4, #0]
    8fd8:	42a8      	cmp	r0, r5
    8fda:	d902      	bls.n	8fe2 <MPSL_IRQ_RADIO_Handler+0x2d6>
    8fdc:	68a1      	ldr	r1, [r4, #8]
    8fde:	1c49      	adds	r1, r1, #1
    8fe0:	60a1      	str	r1, [r4, #8]
    8fe2:	6861      	ldr	r1, [r4, #4]
    8fe4:	f10d 0a18 	add.w	sl, sp, #24
    8fe8:	1a08      	subs	r0, r1, r0
    8fea:	4428      	add	r0, r5
    8fec:	f025 417f 	bic.w	r1, r5, #4278190080	; 0xff000000
    8ff0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    8ff4:	e9c4 1000 	strd	r1, r0, [r4]
    8ff8:	9810      	ldr	r0, [sp, #64]	; 0x40
    8ffa:	900b      	str	r0, [sp, #44]	; 0x2c
    8ffc:	9809      	ldr	r0, [sp, #36]	; 0x24
    8ffe:	f10d 081c 	add.w	r8, sp, #28
    9002:	f890 5020 	ldrb.w	r5, [r0, #32]
    9006:	2020      	movs	r0, #32
    9008:	f88d 0018 	strb.w	r0, [sp, #24]
    900c:	2d20      	cmp	r5, #32
    900e:	d03c      	beq.n	908a <MPSL_IRQ_RADIO_Handler+0x37e>
    9010:	4947      	ldr	r1, [pc, #284]	; (9130 <MPSL_IRQ_RADIO_Handler+0x424>)
    9012:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9014:	eb01 1b80 	add.w	fp, r1, r0, lsl #6
    9018:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    901c:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    9020:	f100 0108 	add.w	r1, r0, #8
    9024:	68c0      	ldr	r0, [r0, #12]
    9026:	6827      	ldr	r7, [r4, #0]
    9028:	1a38      	subs	r0, r7, r0
    902a:	0200      	lsls	r0, r0, #8
    902c:	17c2      	asrs	r2, r0, #31
    902e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    9032:	1200      	asrs	r0, r0, #8
    9034:	d429      	bmi.n	908a <MPSL_IRQ_RADIO_Handler+0x37e>
    9036:	89e0      	ldrh	r0, [r4, #14]
    9038:	b300      	cbz	r0, 907c <MPSL_IRQ_RADIO_Handler+0x370>
    903a:	89c8      	ldrh	r0, [r1, #14]
    903c:	b9f0      	cbnz	r0, 907c <MPSL_IRQ_RADIO_Handler+0x370>
    903e:	f8d1 9000 	ldr.w	r9, [r1]
    9042:	f003 f809 	bl	c058 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9046:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    904a:	bf08      	it	eq
    904c:	200d      	moveq	r0, #13
    904e:	d00b      	beq.n	9068 <MPSL_IRQ_RADIO_Handler+0x35c>
    9050:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9054:	3856      	subs	r0, #86	; 0x56
    9056:	bf08      	it	eq
    9058:	201c      	moveq	r0, #28
    905a:	d005      	beq.n	9068 <MPSL_IRQ_RADIO_Handler+0x35c>
    905c:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9060:	389f      	subs	r0, #159	; 0x9f
    9062:	bf14      	ite	ne
    9064:	2000      	movne	r0, #0
    9066:	2032      	moveq	r0, #50	; 0x32
    9068:	1c41      	adds	r1, r0, #1
    906a:	eba7 0009 	sub.w	r0, r7, r9
    906e:	0200      	lsls	r0, r0, #8
    9070:	17c2      	asrs	r2, r0, #31
    9072:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    9076:	1200      	asrs	r0, r0, #8
    9078:	4288      	cmp	r0, r1
    907a:	db06      	blt.n	908a <MPSL_IRQ_RADIO_Handler+0x37e>
    907c:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    9080:	f88a 5000 	strb.w	r5, [sl]
    9084:	7845      	ldrb	r5, [r0, #1]
    9086:	2d20      	cmp	r5, #32
    9088:	d1c6      	bne.n	9018 <MPSL_IRQ_RADIO_Handler+0x30c>
    908a:	f89a 0000 	ldrb.w	r0, [sl]
    908e:	f888 0000 	strb.w	r0, [r8]
    9092:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9094:	2d20      	cmp	r5, #32
    9096:	bf1c      	itt	ne
    9098:	4925      	ldrne	r1, [pc, #148]	; (9130 <MPSL_IRQ_RADIO_Handler+0x424>)
    909a:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    909e:	d03f      	beq.n	9120 <MPSL_IRQ_RADIO_Handler+0x414>
    90a0:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    90a4:	eb06 0780 	add.w	r7, r6, r0, lsl #2
    90a8:	6860      	ldr	r0, [r4, #4]
    90aa:	f8d7 9008 	ldr.w	r9, [r7, #8]
    90ae:	f107 0108 	add.w	r1, r7, #8
    90b2:	eba9 0000 	sub.w	r0, r9, r0
    90b6:	0200      	lsls	r0, r0, #8
    90b8:	17c2      	asrs	r2, r0, #31
    90ba:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    90be:	1200      	asrs	r0, r0, #8
    90c0:	d422      	bmi.n	9108 <MPSL_IRQ_RADIO_Handler+0x3fc>
    90c2:	89c8      	ldrh	r0, [r1, #14]
    90c4:	b360      	cbz	r0, 9120 <MPSL_IRQ_RADIO_Handler+0x414>
    90c6:	89e0      	ldrh	r0, [r4, #14]
    90c8:	bb50      	cbnz	r0, 9120 <MPSL_IRQ_RADIO_Handler+0x414>
    90ca:	f8d4 a000 	ldr.w	sl, [r4]
    90ce:	f002 ffc3 	bl	c058 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    90d2:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    90d6:	bf08      	it	eq
    90d8:	200d      	moveq	r0, #13
    90da:	d00b      	beq.n	90f4 <MPSL_IRQ_RADIO_Handler+0x3e8>
    90dc:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    90e0:	3856      	subs	r0, #86	; 0x56
    90e2:	bf08      	it	eq
    90e4:	201c      	moveq	r0, #28
    90e6:	d005      	beq.n	90f4 <MPSL_IRQ_RADIO_Handler+0x3e8>
    90e8:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    90ec:	389f      	subs	r0, #159	; 0x9f
    90ee:	bf14      	ite	ne
    90f0:	2000      	movne	r0, #0
    90f2:	2032      	moveq	r0, #50	; 0x32
    90f4:	1c41      	adds	r1, r0, #1
    90f6:	eba9 000a 	sub.w	r0, r9, sl
    90fa:	0200      	lsls	r0, r0, #8
    90fc:	17c2      	asrs	r2, r0, #31
    90fe:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    9102:	1200      	asrs	r0, r0, #8
    9104:	4288      	cmp	r0, r1
    9106:	da0b      	bge.n	9120 <MPSL_IRQ_RADIO_Handler+0x414>
    9108:	f888 5000 	strb.w	r5, [r8]
    910c:	7e38      	ldrb	r0, [r7, #24]
    910e:	7c21      	ldrb	r1, [r4, #16]
    9110:	4288      	cmp	r0, r1
    9112:	f67f af0d 	bls.w	8f30 <MPSL_IRQ_RADIO_Handler+0x224>
    9116:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    911a:	7845      	ldrb	r5, [r0, #1]
    911c:	2d20      	cmp	r5, #32
    911e:	d1bf      	bne.n	90a0 <MPSL_IRQ_RADIO_Handler+0x394>
    9120:	b011      	add	sp, #68	; 0x44
    9122:	2001      	movs	r0, #1
    9124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9128:	200015b4 	.word	0x200015b4
    912c:	200011b4 	.word	0x200011b4
    9130:	20001534 	.word	0x20001534
    9134:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9138:	460f      	mov	r7, r1
    913a:	4606      	mov	r6, r0
    913c:	eb01 0047 	add.w	r0, r1, r7, lsl #1
    9140:	494b      	ldr	r1, [pc, #300]	; (9270 <MPSL_IRQ_RADIO_Handler+0x564>)
    9142:	4699      	mov	r9, r3
    9144:	4408      	add	r0, r1
    9146:	4692      	mov	sl, r2
    9148:	f890 4020 	ldrb.w	r4, [r0, #32]
    914c:	2020      	movs	r0, #32
    914e:	7010      	strb	r0, [r2, #0]
    9150:	f5a1 6880 	sub.w	r8, r1, #1024	; 0x400
    9154:	2c20      	cmp	r4, #32
    9156:	bf1c      	itt	ne
    9158:	4846      	ldrne	r0, [pc, #280]	; (9274 <MPSL_IRQ_RADIO_Handler+0x568>)
    915a:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
    915e:	d038      	beq.n	91d2 <MPSL_IRQ_RADIO_Handler+0x4c6>
    9160:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    9164:	eb08 0080 	add.w	r0, r8, r0, lsl #2
    9168:	f100 0108 	add.w	r1, r0, #8
    916c:	68c0      	ldr	r0, [r0, #12]
    916e:	6835      	ldr	r5, [r6, #0]
    9170:	1a28      	subs	r0, r5, r0
    9172:	0200      	lsls	r0, r0, #8
    9174:	17c2      	asrs	r2, r0, #31
    9176:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    917a:	1200      	asrs	r0, r0, #8
    917c:	d429      	bmi.n	91d2 <MPSL_IRQ_RADIO_Handler+0x4c6>
    917e:	89f0      	ldrh	r0, [r6, #14]
    9180:	b300      	cbz	r0, 91c4 <MPSL_IRQ_RADIO_Handler+0x4b8>
    9182:	89c8      	ldrh	r0, [r1, #14]
    9184:	b9f0      	cbnz	r0, 91c4 <MPSL_IRQ_RADIO_Handler+0x4b8>
    9186:	6808      	ldr	r0, [r1, #0]
    9188:	9000      	str	r0, [sp, #0]
    918a:	f002 ff65 	bl	c058 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    918e:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9192:	bf08      	it	eq
    9194:	200d      	moveq	r0, #13
    9196:	d00b      	beq.n	91b0 <MPSL_IRQ_RADIO_Handler+0x4a4>
    9198:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    919c:	3856      	subs	r0, #86	; 0x56
    919e:	bf08      	it	eq
    91a0:	201c      	moveq	r0, #28
    91a2:	d005      	beq.n	91b0 <MPSL_IRQ_RADIO_Handler+0x4a4>
    91a4:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    91a8:	389f      	subs	r0, #159	; 0x9f
    91aa:	bf14      	ite	ne
    91ac:	2000      	movne	r0, #0
    91ae:	2032      	moveq	r0, #50	; 0x32
    91b0:	1c41      	adds	r1, r0, #1
    91b2:	9800      	ldr	r0, [sp, #0]
    91b4:	1a28      	subs	r0, r5, r0
    91b6:	0200      	lsls	r0, r0, #8
    91b8:	17c2      	asrs	r2, r0, #31
    91ba:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    91be:	1200      	asrs	r0, r0, #8
    91c0:	4288      	cmp	r0, r1
    91c2:	db06      	blt.n	91d2 <MPSL_IRQ_RADIO_Handler+0x4c6>
    91c4:	eb0b 0044 	add.w	r0, fp, r4, lsl #1
    91c8:	f88a 4000 	strb.w	r4, [sl]
    91cc:	7844      	ldrb	r4, [r0, #1]
    91ce:	2c20      	cmp	r4, #32
    91d0:	d1c6      	bne.n	9160 <MPSL_IRQ_RADIO_Handler+0x454>
    91d2:	f89a 0000 	ldrb.w	r0, [sl]
    91d6:	f889 0000 	strb.w	r0, [r9]
    91da:	2c20      	cmp	r4, #32
    91dc:	bf1c      	itt	ne
    91de:	4825      	ldrne	r0, [pc, #148]	; (9274 <MPSL_IRQ_RADIO_Handler+0x568>)
    91e0:	eb00 1a87 	addne.w	sl, r0, r7, lsl #6
    91e4:	d040      	beq.n	9268 <MPSL_IRQ_RADIO_Handler+0x55c>
    91e6:	bf00      	nop
    91e8:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    91ec:	eb08 0780 	add.w	r7, r8, r0, lsl #2
    91f0:	6870      	ldr	r0, [r6, #4]
    91f2:	68bd      	ldr	r5, [r7, #8]
    91f4:	f107 0108 	add.w	r1, r7, #8
    91f8:	1a28      	subs	r0, r5, r0
    91fa:	0200      	lsls	r0, r0, #8
    91fc:	17c2      	asrs	r2, r0, #31
    91fe:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    9202:	1200      	asrs	r0, r0, #8
    9204:	d422      	bmi.n	924c <MPSL_IRQ_RADIO_Handler+0x540>
    9206:	89c8      	ldrh	r0, [r1, #14]
    9208:	b370      	cbz	r0, 9268 <MPSL_IRQ_RADIO_Handler+0x55c>
    920a:	89f0      	ldrh	r0, [r6, #14]
    920c:	bb60      	cbnz	r0, 9268 <MPSL_IRQ_RADIO_Handler+0x55c>
    920e:	f8d6 b000 	ldr.w	fp, [r6]
    9212:	f002 ff21 	bl	c058 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9216:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    921a:	bf08      	it	eq
    921c:	200d      	moveq	r0, #13
    921e:	d00b      	beq.n	9238 <MPSL_IRQ_RADIO_Handler+0x52c>
    9220:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9224:	3856      	subs	r0, #86	; 0x56
    9226:	bf08      	it	eq
    9228:	201c      	moveq	r0, #28
    922a:	d005      	beq.n	9238 <MPSL_IRQ_RADIO_Handler+0x52c>
    922c:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9230:	389f      	subs	r0, #159	; 0x9f
    9232:	bf14      	ite	ne
    9234:	2000      	movne	r0, #0
    9236:	2032      	moveq	r0, #50	; 0x32
    9238:	1c41      	adds	r1, r0, #1
    923a:	eba5 000b 	sub.w	r0, r5, fp
    923e:	0200      	lsls	r0, r0, #8
    9240:	17c2      	asrs	r2, r0, #31
    9242:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    9246:	1200      	asrs	r0, r0, #8
    9248:	4288      	cmp	r0, r1
    924a:	da0d      	bge.n	9268 <MPSL_IRQ_RADIO_Handler+0x55c>
    924c:	f889 4000 	strb.w	r4, [r9]
    9250:	7e38      	ldrb	r0, [r7, #24]
    9252:	7c31      	ldrb	r1, [r6, #16]
    9254:	4288      	cmp	r0, r1
    9256:	d802      	bhi.n	925e <MPSL_IRQ_RADIO_Handler+0x552>
    9258:	2000      	movs	r0, #0
    925a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    925e:	eb0a 0044 	add.w	r0, sl, r4, lsl #1
    9262:	7844      	ldrb	r4, [r0, #1]
    9264:	2c20      	cmp	r4, #32
    9266:	d1bf      	bne.n	91e8 <MPSL_IRQ_RADIO_Handler+0x4dc>
    9268:	2001      	movs	r0, #1
    926a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    926e:	0000      	.short	0x0000
    9270:	200015b4 	.word	0x200015b4
    9274:	20001534 	.word	0x20001534
    9278:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    927c:	b098      	sub	sp, #96	; 0x60
    927e:	4615      	mov	r5, r2
    9280:	f002 fa7a 	bl	b778 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
    9284:	4604      	mov	r4, r0
    9286:	f002 fd0f 	bl	bca8 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    928a:	4606      	mov	r6, r0
    928c:	9819      	ldr	r0, [sp, #100]	; 0x64
    928e:	2801      	cmp	r0, #1
    9290:	bf18      	it	ne
    9292:	2802      	cmpne	r0, #2
    9294:	d005      	beq.n	92a2 <MPSL_IRQ_RADIO_Handler+0x596>
    9296:	f640 1192 	movw	r1, #2450	; 0x992
    929a:	f04f 0070 	mov.w	r0, #112	; 0x70
    929e:	f003 f87b 	bl	c398 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    92a2:	49fa      	ldr	r1, [pc, #1000]	; (968c <MPSL_IRQ_RADIO_Handler+0x980>)
    92a4:	2001      	movs	r0, #1
    92a6:	6008      	str	r0, [r1, #0]
    92a8:	49f9      	ldr	r1, [pc, #996]	; (9690 <MPSL_IRQ_RADIO_Handler+0x984>)
    92aa:	6889      	ldr	r1, [r1, #8]
    92ac:	6008      	str	r0, [r1, #0]
    92ae:	2000      	movs	r0, #0
    92b0:	f88d 0046 	strb.w	r0, [sp, #70]	; 0x46
    92b4:	900a      	str	r0, [sp, #40]	; 0x28
    92b6:	1e40      	subs	r0, r0, #1
    92b8:	900b      	str	r0, [sp, #44]	; 0x2c
    92ba:	49f6      	ldr	r1, [pc, #984]	; (9694 <MPSL_IRQ_RADIO_Handler+0x988>)
    92bc:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    92c0:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    92c4:	e9d1 0302 	ldrd	r0, r3, [r1, #8]
    92c8:	e9d1 c204 	ldrd	ip, r2, [r1, #16]
    92cc:	e9cd 030c 	strd	r0, r3, [sp, #48]	; 0x30
    92d0:	e9cd c20e 	strd	ip, r2, [sp, #56]	; 0x38
    92d4:	6989      	ldr	r1, [r1, #24]
    92d6:	9110      	str	r1, [sp, #64]	; 0x40
    92d8:	f007 f856 	bl	10388 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    92dc:	4602      	mov	r2, r0
    92de:	f8bd 803e 	ldrh.w	r8, [sp, #62]	; 0x3e
    92e2:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    92e6:	4bec      	ldr	r3, [pc, #944]	; (9698 <MPSL_IRQ_RADIO_Handler+0x98c>)
    92e8:	4440      	add	r0, r8
    92ea:	1c41      	adds	r1, r0, #1
    92ec:	1850      	adds	r0, r2, r1
    92ee:	429a      	cmp	r2, r3
    92f0:	d854      	bhi.n	939c <MPSL_IRQ_RADIO_Handler+0x690>
    92f2:	4dea      	ldr	r5, [pc, #936]	; (969c <MPSL_IRQ_RADIO_Handler+0x990>)
    92f4:	42a9      	cmp	r1, r5
    92f6:	dc58      	bgt.n	93aa <MPSL_IRQ_RADIO_Handler+0x69e>
    92f8:	426a      	negs	r2, r5
    92fa:	4291      	cmp	r1, r2
    92fc:	db5d      	blt.n	93ba <MPSL_IRQ_RADIO_Handler+0x6ae>
    92fe:	1c59      	adds	r1, r3, #1
    9300:	4281      	cmp	r1, r0
    9302:	bfdc      	itt	le
    9304:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    9308:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    930c:	dd05      	ble.n	931a <MPSL_IRQ_RADIO_Handler+0x60e>
    930e:	2800      	cmp	r0, #0
    9310:	bfbc      	itt	lt
    9312:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    9316:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    931a:	9014      	str	r0, [sp, #80]	; 0x50
    931c:	48e0      	ldr	r0, [pc, #896]	; (96a0 <MPSL_IRQ_RADIO_Handler+0x994>)
    931e:	f1b8 0f00 	cmp.w	r8, #0
    9322:	8b80      	ldrh	r0, [r0, #28]
    9324:	f8ad 0044 	strh.w	r0, [sp, #68]	; 0x44
    9328:	bf14      	ite	ne
    932a:	f04f 0a01 	movne.w	sl, #1
    932e:	f04f 0a00 	moveq.w	sl, #0
    9332:	f002 ffb9 	bl	c2a8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    9336:	9016      	str	r0, [sp, #88]	; 0x58
    9338:	f1ba 0f00 	cmp.w	sl, #0
    933c:	d008      	beq.n	9350 <MPSL_IRQ_RADIO_Handler+0x644>
    933e:	48d8      	ldr	r0, [pc, #864]	; (96a0 <MPSL_IRQ_RADIO_Handler+0x994>)
    9340:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    9342:	f1b0 3fff 	cmp.w	r0, #4294967295
    9346:	bf02      	ittt	eq
    9348:	9816      	ldreq	r0, [sp, #88]	; 0x58
    934a:	2800      	cmpeq	r0, #0
    934c:	2701      	moveq	r7, #1
    934e:	d001      	beq.n	9354 <MPSL_IRQ_RADIO_Handler+0x648>
    9350:	f04f 0700 	mov.w	r7, #0
    9354:	f002 fe80 	bl	c058 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9358:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    935c:	bf08      	it	eq
    935e:	200d      	moveq	r0, #13
    9360:	d00b      	beq.n	937a <MPSL_IRQ_RADIO_Handler+0x66e>
    9362:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9366:	3856      	subs	r0, #86	; 0x56
    9368:	bf08      	it	eq
    936a:	201c      	moveq	r0, #28
    936c:	d005      	beq.n	937a <MPSL_IRQ_RADIO_Handler+0x66e>
    936e:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9372:	389f      	subs	r0, #159	; 0x9f
    9374:	bf14      	ite	ne
    9376:	2000      	movne	r0, #0
    9378:	2032      	moveq	r0, #50	; 0x32
    937a:	f04f 0900 	mov.w	r9, #0
    937e:	46cb      	mov	fp, r9
    9380:	9013      	str	r0, [sp, #76]	; 0x4c
    9382:	4546      	cmp	r6, r8
    9384:	d936      	bls.n	93f4 <MPSL_IRQ_RADIO_Handler+0x6e8>
    9386:	9b14      	ldr	r3, [sp, #80]	; 0x50
    9388:	f8df 930c 	ldr.w	r9, [pc, #780]	; 9698 <MPSL_IRQ_RADIO_Handler+0x98c>
    938c:	ea6f 0c06 	mvn.w	ip, r6
    9390:	4669      	mov	r1, sp
    9392:	aa17      	add	r2, sp, #92	; 0x5c
    9394:	eb03 000c 	add.w	r0, r3, ip
    9398:	454b      	cmp	r3, r9
    939a:	d904      	bls.n	93a6 <MPSL_IRQ_RADIO_Handler+0x69a>
    939c:	f240 519e 	movw	r1, #1438	; 0x59e
    93a0:	2070      	movs	r0, #112	; 0x70
    93a2:	f002 fff9 	bl	c398 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    93a6:	45ac      	cmp	ip, r5
    93a8:	dd04      	ble.n	93b4 <MPSL_IRQ_RADIO_Handler+0x6a8>
    93aa:	f240 519f 	movw	r1, #1439	; 0x59f
    93ae:	2070      	movs	r0, #112	; 0x70
    93b0:	f002 fff2 	bl	c398 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    93b4:	4bbb      	ldr	r3, [pc, #748]	; (96a4 <MPSL_IRQ_RADIO_Handler+0x998>)
    93b6:	459c      	cmp	ip, r3
    93b8:	da04      	bge.n	93c4 <MPSL_IRQ_RADIO_Handler+0x6b8>
    93ba:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
    93be:	2070      	movs	r0, #112	; 0x70
    93c0:	f002 ffea 	bl	c398 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    93c4:	4bb8      	ldr	r3, [pc, #736]	; (96a8 <MPSL_IRQ_RADIO_Handler+0x99c>)
    93c6:	4283      	cmp	r3, r0
    93c8:	bfdc      	itt	le
    93ca:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    93ce:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    93d2:	dd05      	ble.n	93e0 <MPSL_IRQ_RADIO_Handler+0x6d4>
    93d4:	2800      	cmp	r0, #0
    93d6:	bfbc      	itt	lt
    93d8:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    93dc:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    93e0:	f001 ff24 	bl	b22c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    93e4:	9800      	ldr	r0, [sp, #0]
    93e6:	990c      	ldr	r1, [sp, #48]	; 0x30
    93e8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    93ec:	9000      	str	r0, [sp, #0]
    93ee:	1a08      	subs	r0, r1, r0
    93f0:	f020 497f 	bic.w	r9, r0, #4278190080	; 0xff000000
    93f4:	2f00      	cmp	r7, #0
    93f6:	bf18      	it	ne
    93f8:	f8dd b04c 	ldrne.w	fp, [sp, #76]	; 0x4c
    93fc:	d105      	bne.n	940a <MPSL_IRQ_RADIO_Handler+0x6fe>
    93fe:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    9402:	2800      	cmp	r0, #0
    9404:	bf18      	it	ne
    9406:	f04f 0b02 	movne.w	fp, #2
    940a:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    940e:	d008      	beq.n	9422 <MPSL_IRQ_RADIO_Handler+0x716>
    9410:	980c      	ldr	r0, [sp, #48]	; 0x30
    9412:	1b00      	subs	r0, r0, r4
    9414:	0200      	lsls	r0, r0, #8
    9416:	17c1      	asrs	r1, r0, #31
    9418:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    941c:	1200      	asrs	r0, r0, #8
    941e:	2801      	cmp	r0, #1
    9420:	da02      	bge.n	9428 <MPSL_IRQ_RADIO_Handler+0x71c>
    9422:	2003      	movs	r0, #3
    9424:	9d18      	ldr	r5, [sp, #96]	; 0x60
    9426:	e00d      	b.n	9444 <MPSL_IRQ_RADIO_Handler+0x738>
    9428:	b157      	cbz	r7, 9440 <MPSL_IRQ_RADIO_Handler+0x734>
    942a:	489d      	ldr	r0, [pc, #628]	; (96a0 <MPSL_IRQ_RADIO_Handler+0x994>)
    942c:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    9430:	b130      	cbz	r0, 9440 <MPSL_IRQ_RADIO_Handler+0x734>
    9432:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    9436:	f110 0b00 	adds.w	fp, r0, #0
    943a:	bf18      	it	ne
    943c:	f04f 0b02 	movne.w	fp, #2
    9440:	4625      	mov	r5, r4
    9442:	2000      	movs	r0, #0
    9444:	4483      	add	fp, r0
    9446:	980c      	ldr	r0, [sp, #48]	; 0x30
    9448:	eba0 0009 	sub.w	r0, r0, r9
    944c:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    9450:	1e48      	subs	r0, r1, #1
    9452:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9456:	1b42      	subs	r2, r0, r5
    9458:	0212      	lsls	r2, r2, #8
    945a:	17d3      	asrs	r3, r2, #31
    945c:	eb02 6213 	add.w	r2, r2, r3, lsr #24
    9460:	1212      	asrs	r2, r2, #8
    9462:	455a      	cmp	r2, fp
    9464:	db04      	blt.n	9470 <MPSL_IRQ_RADIO_Handler+0x764>
    9466:	f1b9 0f00 	cmp.w	r9, #0
    946a:	bf18      	it	ne
    946c:	910c      	strne	r1, [sp, #48]	; 0x30
    946e:	e02d      	b.n	94cc <MPSL_IRQ_RADIO_Handler+0x7c0>
    9470:	f1b9 0f00 	cmp.w	r9, #0
    9474:	d005      	beq.n	9482 <MPSL_IRQ_RADIO_Handler+0x776>
    9476:	f89d 0045 	ldrb.w	r0, [sp, #69]	; 0x45
    947a:	b920      	cbnz	r0, 9486 <MPSL_IRQ_RADIO_Handler+0x77a>
    947c:	f002 fc0a 	bl	bc94 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    9480:	b108      	cbz	r0, 9486 <MPSL_IRQ_RADIO_Handler+0x77a>
    9482:	b9af      	cbnz	r7, 94b0 <MPSL_IRQ_RADIO_Handler+0x7a4>
    9484:	e00c      	b.n	94a0 <MPSL_IRQ_RADIO_Handler+0x794>
    9486:	b92f      	cbnz	r7, 9494 <MPSL_IRQ_RADIO_Handler+0x788>
    9488:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    948c:	2800      	cmp	r0, #0
    948e:	bf18      	it	ne
    9490:	f1ab 0b02 	subne.w	fp, fp, #2
    9494:	f04f 0900 	mov.w	r9, #0
    9498:	f88d 9044 	strb.w	r9, [sp, #68]	; 0x44
    949c:	464e      	mov	r6, r9
    949e:	e007      	b.n	94b0 <MPSL_IRQ_RADIO_Handler+0x7a4>
    94a0:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    94a4:	b120      	cbz	r0, 94b0 <MPSL_IRQ_RADIO_Handler+0x7a4>
    94a6:	2000      	movs	r0, #0
    94a8:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
    94ac:	f1ab 0b02 	sub.w	fp, fp, #2
    94b0:	980c      	ldr	r0, [sp, #48]	; 0x30
    94b2:	eba0 0109 	sub.w	r1, r0, r9
    94b6:	1e48      	subs	r0, r1, #1
    94b8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    94bc:	1b42      	subs	r2, r0, r5
    94be:	0212      	lsls	r2, r2, #8
    94c0:	17d3      	asrs	r3, r2, #31
    94c2:	eb02 6213 	add.w	r2, r2, r3, lsr #24
    94c6:	1212      	asrs	r2, r2, #8
    94c8:	455a      	cmp	r2, fp
    94ca:	db7d      	blt.n	95c8 <MPSL_IRQ_RADIO_Handler+0x8bc>
    94cc:	4a74      	ldr	r2, [pc, #464]	; (96a0 <MPSL_IRQ_RADIO_Handler+0x994>)
    94ce:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    94d0:	1a89      	subs	r1, r1, r2
    94d2:	0209      	lsls	r1, r1, #8
    94d4:	17cb      	asrs	r3, r1, #31
    94d6:	eb01 6113 	add.w	r1, r1, r3, lsr #24
    94da:	9b16      	ldr	r3, [sp, #88]	; 0x58
    94dc:	1209      	asrs	r1, r1, #8
    94de:	b93b      	cbnz	r3, 94f0 <MPSL_IRQ_RADIO_Handler+0x7e4>
    94e0:	f1b2 3fff 	cmp.w	r2, #4294967295
    94e4:	bf1c      	itt	ne
    94e6:	9a13      	ldrne	r2, [sp, #76]	; 0x4c
    94e8:	4291      	cmpne	r1, r2
    94ea:	bfb8      	it	lt
    94ec:	2100      	movlt	r1, #0
    94ee:	db00      	blt.n	94f2 <MPSL_IRQ_RADIO_Handler+0x7e6>
    94f0:	2101      	movs	r1, #1
    94f2:	ea3a 0101 	bics.w	r1, sl, r1
    94f6:	d167      	bne.n	95c8 <MPSL_IRQ_RADIO_Handler+0x8bc>
    94f8:	9919      	ldr	r1, [sp, #100]	; 0x64
    94fa:	4605      	mov	r5, r0
    94fc:	f04f 0900 	mov.w	r9, #0
    9500:	9105      	str	r1, [sp, #20]
    9502:	f001 fffd 	bl	b500 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    9506:	1a28      	subs	r0, r5, r0
    9508:	0200      	lsls	r0, r0, #8
    950a:	17c1      	asrs	r1, r0, #31
    950c:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    9510:	ea4f 2b20 	mov.w	fp, r0, asr #8
    9514:	f002 fda0 	bl	c058 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9518:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    951c:	bf08      	it	eq
    951e:	200d      	moveq	r0, #13
    9520:	d00b      	beq.n	953a <MPSL_IRQ_RADIO_Handler+0x82e>
    9522:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9526:	3856      	subs	r0, #86	; 0x56
    9528:	bf08      	it	eq
    952a:	201c      	moveq	r0, #28
    952c:	d005      	beq.n	953a <MPSL_IRQ_RADIO_Handler+0x82e>
    952e:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9532:	389f      	subs	r0, #159	; 0x9f
    9534:	bf14      	ite	ne
    9536:	2000      	movne	r0, #0
    9538:	2032      	moveq	r0, #50	; 0x32
    953a:	300b      	adds	r0, #11
    953c:	4558      	cmp	r0, fp
    953e:	dd1f      	ble.n	9580 <MPSL_IRQ_RADIO_Handler+0x874>
    9540:	9805      	ldr	r0, [sp, #20]
    9542:	2801      	cmp	r0, #1
    9544:	d001      	beq.n	954a <MPSL_IRQ_RADIO_Handler+0x83e>
    9546:	b147      	cbz	r7, 955a <MPSL_IRQ_RADIO_Handler+0x84e>
    9548:	e012      	b.n	9570 <MPSL_IRQ_RADIO_Handler+0x864>
    954a:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    954e:	d11c      	bne.n	958a <MPSL_IRQ_RADIO_Handler+0x87e>
    9550:	f640 1113 	movw	r1, #2323	; 0x913
    9554:	2070      	movs	r0, #112	; 0x70
    9556:	f002 ff1f 	bl	c398 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    955a:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    955e:	d007      	beq.n	9570 <MPSL_IRQ_RADIO_Handler+0x864>
    9560:	1b60      	subs	r0, r4, r5
    9562:	0200      	lsls	r0, r0, #8
    9564:	17c1      	asrs	r1, r0, #31
    9566:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    956a:	1200      	asrs	r0, r0, #8
    956c:	2804      	cmp	r0, #4
    956e:	dd04      	ble.n	957a <MPSL_IRQ_RADIO_Handler+0x86e>
    9570:	462c      	mov	r4, r5
    9572:	4620      	mov	r0, r4
    9574:	f001 ffea 	bl	b54c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    9578:	e007      	b.n	958a <MPSL_IRQ_RADIO_Handler+0x87e>
    957a:	2800      	cmp	r0, #0
    957c:	dc63      	bgt.n	9646 <MPSL_IRQ_RADIO_Handler+0x93a>
    957e:	e004      	b.n	958a <MPSL_IRQ_RADIO_Handler+0x87e>
    9580:	462c      	mov	r4, r5
    9582:	4620      	mov	r0, r4
    9584:	f001 ffe2 	bl	b54c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    9588:	46d1      	mov	r9, sl
    958a:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    958e:	d055      	beq.n	963c <MPSL_IRQ_RADIO_Handler+0x930>
    9590:	980c      	ldr	r0, [sp, #48]	; 0x30
    9592:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    9594:	1b00      	subs	r0, r0, r4
    9596:	1b12      	subs	r2, r2, r4
    9598:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    959c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    95a0:	2801      	cmp	r0, #1
    95a2:	d350      	bcc.n	9646 <MPSL_IRQ_RADIO_Handler+0x93a>
    95a4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    95a8:	bf98      	it	ls
    95aa:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    95ae:	d84a      	bhi.n	9646 <MPSL_IRQ_RADIO_Handler+0x93a>
    95b0:	4620      	mov	r0, r4
    95b2:	f006 fee9 	bl	10388 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    95b6:	9914      	ldr	r1, [sp, #80]	; 0x50
    95b8:	4a38      	ldr	r2, [pc, #224]	; (969c <MPSL_IRQ_RADIO_Handler+0x990>)
    95ba:	1a0d      	subs	r5, r1, r0
    95bc:	f04f 0b00 	mov.w	fp, #0
    95c0:	1aaa      	subs	r2, r5, r2
    95c2:	f17b 0200 	sbcs.w	r2, fp, #0
    95c6:	e000      	b.n	95ca <MPSL_IRQ_RADIO_Handler+0x8be>
    95c8:	e03d      	b.n	9646 <MPSL_IRQ_RADIO_Handler+0x93a>
    95ca:	d316      	bcc.n	95fa <MPSL_IRQ_RADIO_Handler+0x8ee>
    95cc:	4a33      	ldr	r2, [pc, #204]	; (969c <MPSL_IRQ_RADIO_Handler+0x990>)
    95ce:	1a43      	subs	r3, r0, r1
    95d0:	1a9a      	subs	r2, r3, r2
    95d2:	f17b 0200 	sbcs.w	r2, fp, #0
    95d6:	d310      	bcc.n	95fa <MPSL_IRQ_RADIO_Handler+0x8ee>
    95d8:	4a2f      	ldr	r2, [pc, #188]	; (9698 <MPSL_IRQ_RADIO_Handler+0x98c>)
    95da:	42aa      	cmp	r2, r5
    95dc:	bf3e      	ittt	cc
    95de:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
    95e2:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    95e6:	1845      	addcc	r5, r0, r1
    95e8:	d307      	bcc.n	95fa <MPSL_IRQ_RADIO_Handler+0x8ee>
    95ea:	429a      	cmp	r2, r3
    95ec:	d22f      	bcs.n	964e <MPSL_IRQ_RADIO_Handler+0x942>
    95ee:	f5c1 2190 	rsb	r1, r1, #294912	; 0x48000
    95f2:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
    95f6:	4408      	add	r0, r1
    95f8:	4245      	negs	r5, r0
    95fa:	4f29      	ldr	r7, [pc, #164]	; (96a0 <MPSL_IRQ_RADIO_Handler+0x994>)
    95fc:	7fb8      	ldrb	r0, [r7, #30]
    95fe:	b358      	cbz	r0, 9658 <MPSL_IRQ_RADIO_Handler+0x94c>
    9600:	9819      	ldr	r0, [sp, #100]	; 0x64
    9602:	2801      	cmp	r0, #1
    9604:	d005      	beq.n	9612 <MPSL_IRQ_RADIO_Handler+0x906>
    9606:	2002      	movs	r0, #2
    9608:	f002 f9f0 	bl	b9ec <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    960c:	2001      	movs	r0, #1
    960e:	f002 f9ed 	bl	b9ec <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9612:	45b0      	cmp	r8, r6
    9614:	d22c      	bcs.n	9670 <MPSL_IRQ_RADIO_Handler+0x964>
    9616:	eba5 0106 	sub.w	r1, r5, r6
    961a:	f04f 0002 	mov.w	r0, #2
    961e:	f002 f92f 	bl	b880 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    9622:	b390      	cbz	r0, 968a <MPSL_IRQ_RADIO_Handler+0x97e>
    9624:	f1b8 0f00 	cmp.w	r8, #0
    9628:	bf1c      	itt	ne
    962a:	eba5 0108 	subne.w	r1, r5, r8
    962e:	2001      	movne	r0, #1
    9630:	d044      	beq.n	96bc <MPSL_IRQ_RADIO_Handler+0x9b0>
    9632:	bf00      	nop
    9634:	f002 f924 	bl	b880 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    9638:	b338      	cbz	r0, 968a <MPSL_IRQ_RADIO_Handler+0x97e>
    963a:	e03f      	b.n	96bc <MPSL_IRQ_RADIO_Handler+0x9b0>
    963c:	f640 2131 	movw	r1, #2609	; 0xa31
    9640:	2070      	movs	r0, #112	; 0x70
    9642:	f002 fea9 	bl	c398 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9646:	b01b      	add	sp, #108	; 0x6c
    9648:	2000      	movs	r0, #0
    964a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    964e:	f640 3105 	movw	r1, #2821	; 0xb05
    9652:	2070      	movs	r0, #112	; 0x70
    9654:	f002 fea0 	bl	c398 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9658:	45b0      	cmp	r8, r6
    965a:	bf34      	ite	cc
    965c:	4630      	movcc	r0, r6
    965e:	4640      	movcs	r0, r8
    9660:	301e      	adds	r0, #30
    9662:	42a8      	cmp	r0, r5
    9664:	dbcc      	blt.n	9600 <MPSL_IRQ_RADIO_Handler+0x8f4>
    9666:	f640 2145 	movw	r1, #2629	; 0xa45
    966a:	2070      	movs	r0, #112	; 0x70
    966c:	f002 fe94 	bl	c398 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9670:	d91c      	bls.n	96ac <MPSL_IRQ_RADIO_Handler+0x9a0>
    9672:	eba5 0108 	sub.w	r1, r5, r8
    9676:	2001      	movs	r0, #1
    9678:	f002 f902 	bl	b880 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    967c:	b128      	cbz	r0, 968a <MPSL_IRQ_RADIO_Handler+0x97e>
    967e:	2e00      	cmp	r6, #0
    9680:	bf1c      	itt	ne
    9682:	1ba9      	subne	r1, r5, r6
    9684:	2002      	movne	r0, #2
    9686:	d019      	beq.n	96bc <MPSL_IRQ_RADIO_Handler+0x9b0>
    9688:	e7d4      	b.n	9634 <MPSL_IRQ_RADIO_Handler+0x928>
    968a:	e042      	b.n	9712 <MPSL_IRQ_RADIO_Handler+0xa06>
    968c:	40000508 	.word	0x40000508
    9690:	200002d0 	.word	0x200002d0
    9694:	200011b4 	.word	0x200011b4
    9698:	1e847fff 	.word	0x1e847fff
    969c:	0f424000 	.word	0x0f424000
    96a0:	200015b4 	.word	0x200015b4
    96a4:	f0bdc000 	.word	0xf0bdc000
    96a8:	1e848000 	.word	0x1e848000
    96ac:	ea56 0008 	orrs.w	r0, r6, r8
    96b0:	d004      	beq.n	96bc <MPSL_IRQ_RADIO_Handler+0x9b0>
    96b2:	f640 1176 	movw	r1, #2422	; 0x976
    96b6:	2070      	movs	r0, #112	; 0x70
    96b8:	f002 fe6e 	bl	c398 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    96bc:	4629      	mov	r1, r5
    96be:	2000      	movs	r0, #0
    96c0:	f002 f8de 	bl	b880 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    96c4:	b328      	cbz	r0, 9712 <MPSL_IRQ_RADIO_Handler+0xa06>
    96c6:	2601      	movs	r6, #1
    96c8:	f1ba 0f00 	cmp.w	sl, #0
    96cc:	bf04      	itt	eq
    96ce:	f897 0030 	ldrbeq.w	r0, [r7, #48]	; 0x30
    96d2:	2800      	cmpeq	r0, #0
    96d4:	d002      	beq.n	96dc <MPSL_IRQ_RADIO_Handler+0x9d0>
    96d6:	f1b9 0f00 	cmp.w	r9, #0
    96da:	d024      	beq.n	9726 <MPSL_IRQ_RADIO_Handler+0xa1a>
    96dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    96de:	f1b0 3fff 	cmp.w	r0, #4294967295
    96e2:	d004      	beq.n	96ee <MPSL_IRQ_RADIO_Handler+0x9e2>
    96e4:	f002 fcbe 	bl	c064 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    96e8:	f04f 30ff 	mov.w	r0, #4294967295
    96ec:	62f8      	str	r0, [r7, #44]	; 0x2c
    96ee:	f1b9 0f00 	cmp.w	r9, #0
    96f2:	d01c      	beq.n	972e <MPSL_IRQ_RADIO_Handler+0xa22>
    96f4:	9813      	ldr	r0, [sp, #76]	; 0x4c
    96f6:	1a20      	subs	r0, r4, r0
    96f8:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    96fc:	2005      	movs	r0, #5
    96fe:	f002 f8bf 	bl	b880 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    9702:	b360      	cbz	r0, 975e <MPSL_IRQ_RADIO_Handler+0xa52>
    9704:	f897 0030 	ldrb.w	r0, [r7, #48]	; 0x30
    9708:	2800      	cmp	r0, #0
    970a:	bf08      	it	eq
    970c:	f887 6030 	strbeq.w	r6, [r7, #48]	; 0x30
    9710:	e015      	b.n	973e <MPSL_IRQ_RADIO_Handler+0xa32>
    9712:	2002      	movs	r0, #2
    9714:	f002 f96a 	bl	b9ec <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9718:	2001      	movs	r0, #1
    971a:	f002 f967 	bl	b9ec <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    971e:	b01b      	add	sp, #108	; 0x6c
    9720:	2000      	movs	r0, #0
    9722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9726:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    9728:	f1b0 3fff 	cmp.w	r0, #4294967295
    972c:	d012      	beq.n	9754 <MPSL_IRQ_RADIO_Handler+0xa48>
    972e:	f897 0030 	ldrb.w	r0, [r7, #48]	; 0x30
    9732:	b120      	cbz	r0, 973e <MPSL_IRQ_RADIO_Handler+0xa32>
    9734:	2005      	movs	r0, #5
    9736:	f002 f959 	bl	b9ec <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    973a:	f887 b030 	strb.w	fp, [r7, #48]	; 0x30
    973e:	eba5 0008 	sub.w	r0, r5, r8
    9742:	f1a0 0119 	sub.w	r1, r0, #25
    9746:	2900      	cmp	r1, #0
    9748:	dc0e      	bgt.n	9768 <MPSL_IRQ_RADIO_Handler+0xa5c>
    974a:	f640 216e 	movw	r1, #2670	; 0xa6e
    974e:	2070      	movs	r0, #112	; 0x70
    9750:	f002 fe22 	bl	c398 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9754:	f002 fca2 	bl	c09c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    9758:	f001 fed2 	bl	b500 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    975c:	e7c6      	b.n	96ec <MPSL_IRQ_RADIO_Handler+0x9e0>
    975e:	f44f 713e 	mov.w	r1, #760	; 0x2f8
    9762:	2070      	movs	r0, #112	; 0x70
    9764:	f002 fe18 	bl	c398 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9768:	2003      	movs	r0, #3
    976a:	f002 f889 	bl	b880 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    976e:	b1c0      	cbz	r0, 97a2 <MPSL_IRQ_RADIO_Handler+0xa96>
    9770:	480e      	ldr	r0, [pc, #56]	; (97ac <MPSL_IRQ_RADIO_Handler+0xaa0>)
    9772:	6880      	ldr	r0, [r0, #8]
    9774:	f8c0 b000 	str.w	fp, [r0]
    9778:	480d      	ldr	r0, [pc, #52]	; (97b0 <MPSL_IRQ_RADIO_Handler+0xaa4>)
    977a:	f8c0 b000 	str.w	fp, [r0]
    977e:	ac0a      	add	r4, sp, #40	; 0x28
    9780:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    9784:	6038      	str	r0, [r7, #0]
    9786:	6079      	str	r1, [r7, #4]
    9788:	60ba      	str	r2, [r7, #8]
    978a:	60fb      	str	r3, [r7, #12]
    978c:	ac0e      	add	r4, sp, #56	; 0x38
    978e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    9792:	6138      	str	r0, [r7, #16]
    9794:	6179      	str	r1, [r7, #20]
    9796:	61ba      	str	r2, [r7, #24]
    9798:	61fb      	str	r3, [r7, #28]
    979a:	b01b      	add	sp, #108	; 0x6c
    979c:	2001      	movs	r0, #1
    979e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    97a2:	f640 2176 	movw	r1, #2678	; 0xa76
    97a6:	2070      	movs	r0, #112	; 0x70
    97a8:	f002 fdf6 	bl	c398 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    97ac:	200002d0 	.word	0x200002d0
    97b0:	40000508 	.word	0x40000508
    97b4:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    97b8:	4614      	mov	r4, r2
    97ba:	460d      	mov	r5, r1
    97bc:	f04f 0a00 	mov.w	sl, #0
    97c0:	890a      	ldrh	r2, [r1, #8]
    97c2:	4651      	mov	r1, sl
    97c4:	f362 411f 	bfi	r1, r2, #16, #16
    97c8:	7aaa      	ldrb	r2, [r5, #10]
    97ca:	46d1      	mov	r9, sl
    97cc:	f362 0907 	bfi	r9, r2, #0, #8
    97d0:	7aea      	ldrb	r2, [r5, #11]
    97d2:	4606      	mov	r6, r0
    97d4:	f362 290f 	bfi	r9, r2, #8, #8
    97d8:	782a      	ldrb	r2, [r5, #0]
    97da:	b083      	sub	sp, #12
    97dc:	6840      	ldr	r0, [r0, #4]
    97de:	f8c4 a000 	str.w	sl, [r4]
    97e2:	f362 4917 	bfi	r9, r2, #16, #8
    97e6:	f8c4 a004 	str.w	sl, [r4, #4]
    97ea:	f8c4 9010 	str.w	r9, [r4, #16]
    97ee:	e9c4 0102 	strd	r0, r1, [r4, #8]
    97f2:	4f9d      	ldr	r7, [pc, #628]	; (9a68 <MPSL_IRQ_RADIO_Handler+0xd5c>)
    97f4:	6870      	ldr	r0, [r6, #4]
    97f6:	fba0 8907 	umull	r8, r9, r0, r7
    97fa:	6830      	ldr	r0, [r6, #0]
    97fc:	f006 fdc4 	bl	10388 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    9800:	eb10 0108 	adds.w	r1, r0, r8
    9804:	eb4a 0209 	adc.w	r2, sl, r9
    9808:	7828      	ldrb	r0, [r5, #0]
    980a:	ea4f 0967 	mov.w	r9, r7, asr #1
    980e:	f1c9 0b00 	rsb	fp, r9, #0
    9812:	b170      	cbz	r0, 9832 <MPSL_IRQ_RADIO_Handler+0xb26>
    9814:	89e0      	ldrh	r0, [r4, #14]
    9816:	f894 8011 	ldrb.w	r8, [r4, #17]
    981a:	43c0      	mvns	r0, r0
    981c:	f8d5 a004 	ldr.w	sl, [r5, #4]
    9820:	f104 020c 	add.w	r2, r4, #12
    9824:	4548      	cmp	r0, r9
    9826:	dd7c      	ble.n	9922 <MPSL_IRQ_RADIO_Handler+0xc16>
    9828:	f240 519f 	movw	r1, #1439	; 0x59f
    982c:	2070      	movs	r0, #112	; 0x70
    982e:	f002 fdb3 	bl	c398 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9832:	f8df c238 	ldr.w	ip, [pc, #568]	; 9a6c <MPSL_IRQ_RADIO_Handler+0xd60>
    9836:	e9d5 0304 	ldrd	r0, r3, [r5, #16]
    983a:	eb11 0a0c 	adds.w	sl, r1, ip
    983e:	f142 0c00 	adc.w	ip, r2, #0
    9842:	ebb0 0a0a 	subs.w	sl, r0, sl
    9846:	eb73 0c0c 	sbcs.w	ip, r3, ip
    984a:	d272      	bcs.n	9932 <MPSL_IRQ_RADIO_Handler+0xc26>
    984c:	1a41      	subs	r1, r0, r1
    984e:	eb73 0102 	sbcs.w	r1, r3, r2
    9852:	d36e      	bcc.n	9932 <MPSL_IRQ_RADIO_Handler+0xc26>
    9854:	ebb0 0608 	subs.w	r6, r0, r8
    9858:	42b7      	cmp	r7, r6
    985a:	d82b      	bhi.n	98b4 <MPSL_IRQ_RADIO_Handler+0xba8>
    985c:	89e0      	ldrh	r0, [r4, #14]
    985e:	f1a6 58f4 	sub.w	r8, r6, #511705088	; 0x1e800000
    9862:	f5a8 2890 	sub.w	r8, r8, #294912	; 0x48000
    9866:	43c1      	mvns	r1, r0
    9868:	4a81      	ldr	r2, [pc, #516]	; (9a70 <MPSL_IRQ_RADIO_Handler+0xd64>)
    986a:	eb08 0001 	add.w	r0, r8, r1
    986e:	4542      	cmp	r2, r8
    9870:	d32b      	bcc.n	98ca <MPSL_IRQ_RADIO_Handler+0xbbe>
    9872:	4549      	cmp	r1, r9
    9874:	dcd8      	bgt.n	9828 <MPSL_IRQ_RADIO_Handler+0xb1c>
    9876:	4559      	cmp	r1, fp
    9878:	db66      	blt.n	9948 <MPSL_IRQ_RADIO_Handler+0xc3c>
    987a:	4287      	cmp	r7, r0
    987c:	bfdc      	itt	le
    987e:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    9882:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    9886:	dd05      	ble.n	9894 <MPSL_IRQ_RADIO_Handler+0xb88>
    9888:	2800      	cmp	r0, #0
    988a:	bfbc      	itt	lt
    988c:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    9890:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    9894:	466a      	mov	r2, sp
    9896:	a901      	add	r1, sp, #4
    9898:	f001 fcc8 	bl	b22c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    989c:	89e0      	ldrh	r0, [r4, #14]
    989e:	f89d 1000 	ldrb.w	r1, [sp]
    98a2:	1a30      	subs	r0, r6, r0
    98a4:	1a40      	subs	r0, r0, r1
    98a6:	1e40      	subs	r0, r0, #1
    98a8:	42b8      	cmp	r0, r7
    98aa:	d302      	bcc.n	98b2 <MPSL_IRQ_RADIO_Handler+0xba6>
    98ac:	68a0      	ldr	r0, [r4, #8]
    98ae:	1c40      	adds	r0, r0, #1
    98b0:	60a0      	str	r0, [r4, #8]
    98b2:	4646      	mov	r6, r8
    98b4:	89e0      	ldrh	r0, [r4, #14]
    98b6:	4b6e      	ldr	r3, [pc, #440]	; (9a70 <MPSL_IRQ_RADIO_Handler+0xd64>)
    98b8:	43c1      	mvns	r1, r0
    98ba:	686d      	ldr	r5, [r5, #4]
    98bc:	f894 8011 	ldrb.w	r8, [r4, #17]
    98c0:	1870      	adds	r0, r6, r1
    98c2:	f104 020c 	add.w	r2, r4, #12
    98c6:	429e      	cmp	r6, r3
    98c8:	d904      	bls.n	98d4 <MPSL_IRQ_RADIO_Handler+0xbc8>
    98ca:	f240 519e 	movw	r1, #1438	; 0x59e
    98ce:	2070      	movs	r0, #112	; 0x70
    98d0:	f002 fd62 	bl	c398 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    98d4:	4549      	cmp	r1, r9
    98d6:	dca7      	bgt.n	9828 <MPSL_IRQ_RADIO_Handler+0xb1c>
    98d8:	4559      	cmp	r1, fp
    98da:	db35      	blt.n	9948 <MPSL_IRQ_RADIO_Handler+0xc3c>
    98dc:	4287      	cmp	r7, r0
    98de:	bfdc      	itt	le
    98e0:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    98e4:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    98e8:	dd05      	ble.n	98f6 <MPSL_IRQ_RADIO_Handler+0xbea>
    98ea:	2800      	cmp	r0, #0
    98ec:	bfbc      	itt	lt
    98ee:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    98f2:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    98f6:	4621      	mov	r1, r4
    98f8:	f001 fc98 	bl	b22c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    98fc:	6820      	ldr	r0, [r4, #0]
    98fe:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    9902:	1970      	adds	r0, r6, r5
    9904:	1c40      	adds	r0, r0, #1
    9906:	6021      	str	r1, [r4, #0]
    9908:	f1b8 0f00 	cmp.w	r8, #0
    990c:	bf08      	it	eq
    990e:	307a      	addeq	r0, #122	; 0x7a
    9910:	d004      	beq.n	991c <MPSL_IRQ_RADIO_Handler+0xc10>
    9912:	f1b8 0f01 	cmp.w	r8, #1
    9916:	bf08      	it	eq
    9918:	3048      	addeq	r0, #72	; 0x48
    991a:	d13a      	bne.n	9992 <MPSL_IRQ_RADIO_Handler+0xc86>
    991c:	f001 fc6a 	bl	b1f4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    9920:	e001      	b.n	9926 <MPSL_IRQ_RADIO_Handler+0xc1a>
    9922:	e00e      	b.n	9942 <MPSL_IRQ_RADIO_Handler+0xc36>
    9924:	e005      	b.n	9932 <MPSL_IRQ_RADIO_Handler+0xc26>
    9926:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    992a:	6060      	str	r0, [r4, #4]
    992c:	b007      	add	sp, #28
    992e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9932:	6830      	ldr	r0, [r6, #0]
    9934:	1e40      	subs	r0, r0, #1
    9936:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    993a:	6020      	str	r0, [r4, #0]
    993c:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
    9940:	e7f3      	b.n	992a <MPSL_IRQ_RADIO_Handler+0xc1e>
    9942:	4601      	mov	r1, r0
    9944:	4558      	cmp	r0, fp
    9946:	da04      	bge.n	9952 <MPSL_IRQ_RADIO_Handler+0xc46>
    9948:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
    994c:	2070      	movs	r0, #112	; 0x70
    994e:	f002 fd23 	bl	c398 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9952:	4287      	cmp	r7, r0
    9954:	bfdc      	itt	le
    9956:	f1a1 50f4 	suble.w	r0, r1, #511705088	; 0x1e800000
    995a:	f5a0 2090 	suble.w	r0, r0, #294912	; 0x48000
    995e:	dd05      	ble.n	996c <MPSL_IRQ_RADIO_Handler+0xc60>
    9960:	2800      	cmp	r0, #0
    9962:	bfbc      	itt	lt
    9964:	f101 50f4 	addlt.w	r0, r1, #511705088	; 0x1e800000
    9968:	f500 2090 	addlt.w	r0, r0, #294912	; 0x48000
    996c:	4621      	mov	r1, r4
    996e:	f001 fc5d 	bl	b22c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    9972:	6820      	ldr	r0, [r4, #0]
    9974:	f1b8 0f00 	cmp.w	r8, #0
    9978:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    997c:	f10a 0001 	add.w	r0, sl, #1
    9980:	6021      	str	r1, [r4, #0]
    9982:	bf08      	it	eq
    9984:	307a      	addeq	r0, #122	; 0x7a
    9986:	d009      	beq.n	999c <MPSL_IRQ_RADIO_Handler+0xc90>
    9988:	f1b8 0f01 	cmp.w	r8, #1
    998c:	bf08      	it	eq
    998e:	3048      	addeq	r0, #72	; 0x48
    9990:	d004      	beq.n	999c <MPSL_IRQ_RADIO_Handler+0xc90>
    9992:	f240 6139 	movw	r1, #1593	; 0x639
    9996:	2070      	movs	r0, #112	; 0x70
    9998:	f002 fcfe 	bl	c398 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    999c:	f001 fc2a 	bl	b1f4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    99a0:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    99a4:	6061      	str	r1, [r4, #4]
    99a6:	f8b4 900e 	ldrh.w	r9, [r4, #14]
    99aa:	aa01      	add	r2, sp, #4
    99ac:	4669      	mov	r1, sp
    99ae:	4648      	mov	r0, r9
    99b0:	6837      	ldr	r7, [r6, #0]
    99b2:	f001 fc3b 	bl	b22c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    99b6:	f002 f977 	bl	bca8 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    99ba:	f001 fc1b 	bl	b1f4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    99be:	4680      	mov	r8, r0
    99c0:	482c      	ldr	r0, [pc, #176]	; (9a74 <MPSL_IRQ_RADIO_Handler+0xd68>)
    99c2:	f890 1032 	ldrb.w	r1, [r0, #50]	; 0x32
    99c6:	2920      	cmp	r1, #32
    99c8:	d02a      	beq.n	9a20 <MPSL_IRQ_RADIO_Handler+0xd14>
    99ca:	68c0      	ldr	r0, [r0, #12]
    99cc:	1d40      	adds	r0, r0, #5
    99ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    99d2:	bf00      	nop
    99d4:	e9d4 2100 	ldrd	r2, r1, [r4]
    99d8:	1a89      	subs	r1, r1, r2
    99da:	4401      	add	r1, r0
    99dc:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    99e0:	e9c4 0100 	strd	r0, r1, [r4]
    99e4:	6831      	ldr	r1, [r6, #0]
    99e6:	4281      	cmp	r1, r0
    99e8:	d902      	bls.n	99f0 <MPSL_IRQ_RADIO_Handler+0xce4>
    99ea:	68a0      	ldr	r0, [r4, #8]
    99ec:	1c40      	adds	r0, r0, #1
    99ee:	60a0      	str	r0, [r4, #8]
    99f0:	6832      	ldr	r2, [r6, #0]
    99f2:	6928      	ldr	r0, [r5, #16]
    99f4:	4621      	mov	r1, r4
    99f6:	9b06      	ldr	r3, [sp, #24]
    99f8:	f7ff f9e4 	bl	8dc4 <MPSL_IRQ_RADIO_Handler+0xb8>
    99fc:	2800      	cmp	r0, #0
    99fe:	bf1c      	itt	ne
    9a00:	b007      	addne	sp, #28
    9a02:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9a06:	e9d4 1000 	ldrd	r1, r0, [r4]
    9a0a:	1a40      	subs	r0, r0, r1
    9a0c:	6831      	ldr	r1, [r6, #0]
    9a0e:	6021      	str	r1, [r4, #0]
    9a10:	6831      	ldr	r1, [r6, #0]
    9a12:	4408      	add	r0, r1
    9a14:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9a18:	6060      	str	r0, [r4, #4]
    9a1a:	b007      	add	sp, #28
    9a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9a20:	3709      	adds	r7, #9
    9a22:	f1b9 0f00 	cmp.w	r9, #0
    9a26:	d016      	beq.n	9a56 <MPSL_IRQ_RADIO_Handler+0xd4a>
    9a28:	f002 fc3e 	bl	c2a8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    9a2c:	b998      	cbnz	r0, 9a56 <MPSL_IRQ_RADIO_Handler+0xd4a>
    9a2e:	f002 fb13 	bl	c058 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9a32:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9a36:	bf08      	it	eq
    9a38:	200d      	moveq	r0, #13
    9a3a:	d00b      	beq.n	9a54 <MPSL_IRQ_RADIO_Handler+0xd48>
    9a3c:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9a40:	3856      	subs	r0, #86	; 0x56
    9a42:	bf08      	it	eq
    9a44:	201c      	moveq	r0, #28
    9a46:	d005      	beq.n	9a54 <MPSL_IRQ_RADIO_Handler+0xd48>
    9a48:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9a4c:	389f      	subs	r0, #159	; 0x9f
    9a4e:	bf14      	ite	ne
    9a50:	2000      	movne	r0, #0
    9a52:	2032      	moveq	r0, #50	; 0x32
    9a54:	4407      	add	r7, r0
    9a56:	9800      	ldr	r0, [sp, #0]
    9a58:	4580      	cmp	r8, r0
    9a5a:	bf84      	itt	hi
    9a5c:	eba8 0000 	subhi.w	r0, r8, r0
    9a60:	4407      	addhi	r7, r0
    9a62:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
    9a66:	e7b5      	b.n	99d4 <MPSL_IRQ_RADIO_Handler+0xcc8>
    9a68:	1e848000 	.word	0x1e848000
    9a6c:	0f424000 	.word	0x0f424000
    9a70:	1e847fff 	.word	0x1e847fff
    9a74:	200015b4 	.word	0x200015b4
    9a78:	b570      	push	{r4, r5, r6, lr}
    9a7a:	4d1e      	ldr	r5, [pc, #120]	; (9af4 <MPSL_IRQ_RADIO_Handler+0xde8>)
    9a7c:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
    9a80:	2820      	cmp	r0, #32
    9a82:	bf18      	it	ne
    9a84:	bd70      	popne	{r4, r5, r6, pc}
    9a86:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
    9a8a:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    9a8e:	4428      	add	r0, r5
    9a90:	f890 4020 	ldrb.w	r4, [r0, #32]
    9a94:	2c20      	cmp	r4, #32
    9a96:	d027      	beq.n	9ae8 <MPSL_IRQ_RADIO_Handler+0xddc>
    9a98:	4b17      	ldr	r3, [pc, #92]	; (9af8 <MPSL_IRQ_RADIO_Handler+0xdec>)
    9a9a:	eb03 1182 	add.w	r1, r3, r2, lsl #6
    9a9e:	eb01 0144 	add.w	r1, r1, r4, lsl #1
    9aa2:	7849      	ldrb	r1, [r1, #1]
    9aa4:	f880 1020 	strb.w	r1, [r0, #32]
    9aa8:	20ff      	movs	r0, #255	; 0xff
    9aaa:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    9aae:	f885 4032 	strb.w	r4, [r5, #50]	; 0x32
    9ab2:	4621      	mov	r1, r4
    9ab4:	2002      	movs	r0, #2
    9ab6:	f000 f891 	bl	9bdc <MPSL_IRQ_RADIO_Handler+0xed0>
    9aba:	2000      	movs	r0, #0
    9abc:	f885 0028 	strb.w	r0, [r5, #40]	; 0x28
    9ac0:	77a8      	strb	r0, [r5, #30]
    9ac2:	490e      	ldr	r1, [pc, #56]	; (9afc <MPSL_IRQ_RADIO_Handler+0xdf0>)
    9ac4:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    9ac8:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    9acc:	7e00      	ldrb	r0, [r0, #24]
    9ace:	2800      	cmp	r0, #0
    9ad0:	bf08      	it	eq
    9ad2:	f002 fdcb 	bleq	c66c <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>
    9ad6:	2000      	movs	r0, #0
    9ad8:	4909      	ldr	r1, [pc, #36]	; (9b00 <MPSL_IRQ_RADIO_Handler+0xdf4>)
    9ada:	6849      	ldr	r1, [r1, #4]
    9adc:	2900      	cmp	r1, #0
    9ade:	bf08      	it	eq
    9ae0:	bd70      	popeq	{r4, r5, r6, pc}
    9ae2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9ae6:	4708      	bx	r1
    9ae8:	f240 3132 	movw	r1, #818	; 0x332
    9aec:	2070      	movs	r0, #112	; 0x70
    9aee:	f002 fc53 	bl	c398 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9af2:	0000      	.short	0x0000
    9af4:	200015b4 	.word	0x200015b4
    9af8:	20001534 	.word	0x20001534
    9afc:	200011b4 	.word	0x200011b4
    9b00:	200002d0 	.word	0x200002d0
    9b04:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    9b08:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 9bcc <MPSL_IRQ_RADIO_Handler+0xec0>
    9b0c:	f898 5031 	ldrb.w	r5, [r8, #49]	; 0x31
    9b10:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    9b14:	4440      	add	r0, r8
    9b16:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    9b1a:	2c20      	cmp	r4, #32
    9b1c:	bf08      	it	eq
    9b1e:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9b22:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 9bd0 <MPSL_IRQ_RADIO_Handler+0xec4>
    9b26:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 9bd4 <MPSL_IRQ_RADIO_Handler+0xec8>
    9b2a:	f5aa 7960 	sub.w	r9, sl, #896	; 0x380
    9b2e:	eb0a 1785 	add.w	r7, sl, r5, lsl #6
    9b32:	2607      	movs	r6, #7
    9b34:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    9b38:	2801      	cmp	r0, #1
    9b3a:	d00e      	beq.n	9b5a <MPSL_IRQ_RADIO_Handler+0xe4e>
    9b3c:	2804      	cmp	r0, #4
    9b3e:	bf08      	it	eq
    9b40:	2602      	moveq	r6, #2
    9b42:	d00a      	beq.n	9b5a <MPSL_IRQ_RADIO_Handler+0xe4e>
    9b44:	2805      	cmp	r0, #5
    9b46:	bf0c      	ite	eq
    9b48:	2603      	moveq	r6, #3
    9b4a:	2806      	cmpne	r0, #6
    9b4c:	d005      	beq.n	9b5a <MPSL_IRQ_RADIO_Handler+0xe4e>
    9b4e:	f640 01dd 	movw	r1, #2269	; 0x8dd
    9b52:	f04f 0070 	mov.w	r0, #112	; 0x70
    9b56:	f002 fc1f 	bl	c398 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9b5a:	f1bb 0f00 	cmp.w	fp, #0
    9b5e:	bf18      	it	ne
    9b60:	f3af 8000 	nopne.w
    9b64:	f3ef 8010 	mrs	r0, PRIMASK
    9b68:	b672      	cpsid	i
    9b6a:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    9b6e:	784a      	ldrb	r2, [r1, #1]
    9b70:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    9b74:	4441      	add	r1, r8
    9b76:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    9b7a:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    9b7e:	42a2      	cmp	r2, r4
    9b80:	bf04      	itt	eq
    9b82:	2220      	moveq	r2, #32
    9b84:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
    9b88:	b1c0      	cbz	r0, 9bbc <MPSL_IRQ_RADIO_Handler+0xeb0>
    9b8a:	462a      	mov	r2, r5
    9b8c:	4621      	mov	r1, r4
    9b8e:	2001      	movs	r0, #1
    9b90:	f000 f824 	bl	9bdc <MPSL_IRQ_RADIO_Handler+0xed0>
    9b94:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    9b98:	eb09 0081 	add.w	r0, r9, r1, lsl #2
    9b9c:	f859 2021 	ldr.w	r2, [r9, r1, lsl #2]
    9ba0:	6840      	ldr	r0, [r0, #4]
    9ba2:	4631      	mov	r1, r6
    9ba4:	4790      	blx	r2
    9ba6:	f898 5031 	ldrb.w	r5, [r8, #49]	; 0x31
    9baa:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    9bae:	4440      	add	r0, r8
    9bb0:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    9bb4:	2c20      	cmp	r4, #32
    9bb6:	d1ba      	bne.n	9b2e <MPSL_IRQ_RADIO_Handler+0xe22>
    9bb8:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9bbc:	4806      	ldr	r0, [pc, #24]	; (9bd8 <MPSL_IRQ_RADIO_Handler+0xecc>)
    9bbe:	2800      	cmp	r0, #0
    9bc0:	bf18      	it	ne
    9bc2:	f3af 8000 	nopne.w
    9bc6:	b662      	cpsie	i
    9bc8:	e7df      	b.n	9b8a <MPSL_IRQ_RADIO_Handler+0xe7e>
    9bca:	0000      	.short	0x0000
    9bcc:	200015b4 	.word	0x200015b4
    9bd0:	00000000 	.word	0x00000000
    9bd4:	20001534 	.word	0x20001534
    9bd8:	00000000 	.word	0x00000000
    9bdc:	f8df c058 	ldr.w	ip, [pc, #88]	; 9c38 <MPSL_IRQ_RADIO_Handler+0xf2c>
    9be0:	b510      	push	{r4, lr}
    9be2:	2300      	movs	r3, #0
    9be4:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    9be8:	2807      	cmp	r0, #7
    9bea:	d21f      	bcs.n	9c2c <MPSL_IRQ_RADIO_Handler+0xf20>
    9bec:	e8df f000 	tbb	[pc, r0]
    9bf0:	05050505 	.word	0x05050505
    9bf4:	00040404 	.word	0x00040404
    9bf8:	2301      	movs	r3, #1
    9bfa:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    9bfe:	2b00      	cmp	r3, #0
    9c00:	bf08      	it	eq
    9c02:	bd10      	popeq	{r4, pc}
    9c04:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    9c08:	480c      	ldr	r0, [pc, #48]	; (9c3c <MPSL_IRQ_RADIO_Handler+0xf30>)
    9c0a:	4402      	add	r2, r0
    9c0c:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
    9c10:	2820      	cmp	r0, #32
    9c12:	bf0e      	itee	eq
    9c14:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
    9c18:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    9c1c:	7041      	strbne	r1, [r0, #1]
    9c1e:	2020      	movs	r0, #32
    9c20:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    9c24:	7058      	strb	r0, [r3, #1]
    9c26:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    9c2a:	bd10      	pop	{r4, pc}
    9c2c:	f240 216e 	movw	r1, #622	; 0x26e
    9c30:	2070      	movs	r0, #112	; 0x70
    9c32:	f002 fbb1 	bl	c398 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9c36:	0000      	.short	0x0000
    9c38:	20001534 	.word	0x20001534
    9c3c:	200015b4 	.word	0x200015b4
    9c40:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    9c44:	460f      	mov	r7, r1
    9c46:	4680      	mov	r8, r0
    9c48:	f8df a160 	ldr.w	sl, [pc, #352]	; 9dac <MPSL_IRQ_RADIO_Handler+0x10a0>
    9c4c:	eb01 0047 	add.w	r0, r1, r7, lsl #1
    9c50:	4450      	add	r0, sl
    9c52:	f1b8 0f01 	cmp.w	r8, #1
    9c56:	f890 4020 	ldrb.w	r4, [r0, #32]
    9c5a:	4625      	mov	r5, r4
    9c5c:	bf18      	it	ne
    9c5e:	f1b8 0f02 	cmpne.w	r8, #2
    9c62:	d005      	beq.n	9c70 <MPSL_IRQ_RADIO_Handler+0xf64>
    9c64:	f640 21ac 	movw	r1, #2732	; 0xaac
    9c68:	f04f 0070 	mov.w	r0, #112	; 0x70
    9c6c:	f002 fb94 	bl	c398 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9c70:	f04f 0b00 	mov.w	fp, #0
    9c74:	2d20      	cmp	r5, #32
    9c76:	d042      	beq.n	9cfe <MPSL_IRQ_RADIO_Handler+0xff2>
    9c78:	f89a 001e 	ldrb.w	r0, [sl, #30]
    9c7c:	2600      	movs	r6, #0
    9c7e:	2800      	cmp	r0, #0
    9c80:	bf08      	it	eq
    9c82:	2602      	moveq	r6, #2
    9c84:	f001 fc3c 	bl	b500 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    9c88:	f8df c124 	ldr.w	ip, [pc, #292]	; 9db0 <MPSL_IRQ_RADIO_Handler+0x10a4>
    9c8c:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    9c90:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
    9c94:	688a      	ldr	r2, [r1, #8]
    9c96:	68c9      	ldr	r1, [r1, #12]
    9c98:	1a12      	subs	r2, r2, r0
    9c9a:	1a09      	subs	r1, r1, r0
    9c9c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    9ca0:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    9ca4:	4296      	cmp	r6, r2
    9ca6:	bf99      	ittee	ls
    9ca8:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    9cac:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    9cb0:	4a40      	ldrhi	r2, [pc, #256]	; (9db4 <MPSL_IRQ_RADIO_Handler+0x10a8>)
    9cb2:	eb02 1987 	addhi.w	r9, r2, r7, lsl #6
    9cb6:	d920      	bls.n	9cfa <MPSL_IRQ_RADIO_Handler+0xfee>
    9cb8:	4622      	mov	r2, r4
    9cba:	eb09 0142 	add.w	r1, r9, r2, lsl #1
    9cbe:	784c      	ldrb	r4, [r1, #1]
    9cc0:	2c20      	cmp	r4, #32
    9cc2:	d012      	beq.n	9cea <MPSL_IRQ_RADIO_Handler+0xfde>
    9cc4:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    9cc8:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
    9ccc:	688b      	ldr	r3, [r1, #8]
    9cce:	68c9      	ldr	r1, [r1, #12]
    9cd0:	1a1b      	subs	r3, r3, r0
    9cd2:	1a09      	subs	r1, r1, r0
    9cd4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    9cd8:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    9cdc:	429e      	cmp	r6, r3
    9cde:	bf9c      	itt	ls
    9ce0:	f5b3 0f00 	cmpls.w	r3, #8388608	; 0x800000
    9ce4:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    9ce8:	d8e6      	bhi.n	9cb8 <MPSL_IRQ_RADIO_Handler+0xfac>
    9cea:	2a20      	cmp	r2, #32
    9cec:	d005      	beq.n	9cfa <MPSL_IRQ_RADIO_Handler+0xfee>
    9cee:	463b      	mov	r3, r7
    9cf0:	2120      	movs	r1, #32
    9cf2:	2004      	movs	r0, #4
    9cf4:	f7ff f82a 	bl	8d4c <MPSL_IRQ_RADIO_Handler+0x40>
    9cf8:	4604      	mov	r4, r0
    9cfa:	42ac      	cmp	r4, r5
    9cfc:	d116      	bne.n	9d2c <MPSL_IRQ_RADIO_Handler+0x1020>
    9cfe:	482e      	ldr	r0, [pc, #184]	; (9db8 <MPSL_IRQ_RADIO_Handler+0x10ac>)
    9d00:	2800      	cmp	r0, #0
    9d02:	bf18      	it	ne
    9d04:	f3af 8000 	nopne.w
    9d08:	f001 fbfa 	bl	b500 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    9d0c:	4603      	mov	r3, r0
    9d0e:	f89a 0033 	ldrb.w	r0, [sl, #51]	; 0x33
    9d12:	2820      	cmp	r0, #32
    9d14:	d00d      	beq.n	9d32 <MPSL_IRQ_RADIO_Handler+0x1026>
    9d16:	f8da 0008 	ldr.w	r0, [sl, #8]
    9d1a:	1c99      	adds	r1, r3, #2
    9d1c:	1a08      	subs	r0, r1, r0
    9d1e:	0200      	lsls	r0, r0, #8
    9d20:	17c1      	asrs	r1, r0, #31
    9d22:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    9d26:	1200      	asrs	r0, r0, #8
    9d28:	2800      	cmp	r0, #0
    9d2a:	dd02      	ble.n	9d32 <MPSL_IRQ_RADIO_Handler+0x1026>
    9d2c:	2000      	movs	r0, #0
    9d2e:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9d32:	2d20      	cmp	r5, #32
    9d34:	d014      	beq.n	9d60 <MPSL_IRQ_RADIO_Handler+0x1054>
    9d36:	462a      	mov	r2, r5
    9d38:	4641      	mov	r1, r8
    9d3a:	4618      	mov	r0, r3
    9d3c:	f7ff fa9c 	bl	9278 <MPSL_IRQ_RADIO_Handler+0x56c>
    9d40:	2800      	cmp	r0, #0
    9d42:	bf1e      	ittt	ne
    9d44:	f88a 5033 	strbne.w	r5, [sl, #51]	; 0x33
    9d48:	2002      	movne	r0, #2
    9d4a:	e8bd 9ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9d4e:	463b      	mov	r3, r7
    9d50:	462a      	mov	r2, r5
    9d52:	2120      	movs	r1, #32
    9d54:	2004      	movs	r0, #4
    9d56:	f7fe fff9 	bl	8d4c <MPSL_IRQ_RADIO_Handler+0x40>
    9d5a:	2000      	movs	r0, #0
    9d5c:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9d60:	f8da 002c 	ldr.w	r0, [sl, #44]	; 0x2c
    9d64:	f1b0 3fff 	cmp.w	r0, #4294967295
    9d68:	d005      	beq.n	9d76 <MPSL_IRQ_RADIO_Handler+0x106a>
    9d6a:	f002 f97b 	bl	c064 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    9d6e:	f04f 30ff 	mov.w	r0, #4294967295
    9d72:	f8ca 002c 	str.w	r0, [sl, #44]	; 0x2c
    9d76:	f89a 0030 	ldrb.w	r0, [sl, #48]	; 0x30
    9d7a:	b120      	cbz	r0, 9d86 <MPSL_IRQ_RADIO_Handler+0x107a>
    9d7c:	2005      	movs	r0, #5
    9d7e:	f001 fe35 	bl	b9ec <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9d82:	f88a b030 	strb.w	fp, [sl, #48]	; 0x30
    9d86:	2004      	movs	r0, #4
    9d88:	f001 fe30 	bl	b9ec <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9d8c:	f001 fe9e 	bl	bacc <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    9d90:	2020      	movs	r0, #32
    9d92:	f88a 0033 	strb.w	r0, [sl, #51]	; 0x33
    9d96:	4809      	ldr	r0, [pc, #36]	; (9dbc <MPSL_IRQ_RADIO_Handler+0x10b0>)
    9d98:	6880      	ldr	r0, [r0, #8]
    9d9a:	f8c0 b000 	str.w	fp, [r0]
    9d9e:	4808      	ldr	r0, [pc, #32]	; (9dc0 <MPSL_IRQ_RADIO_Handler+0x10b4>)
    9da0:	f8c0 b000 	str.w	fp, [r0]
    9da4:	2001      	movs	r0, #1
    9da6:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9daa:	0000      	.short	0x0000
    9dac:	200015b4 	.word	0x200015b4
    9db0:	200011b4 	.word	0x200011b4
    9db4:	20001534 	.word	0x20001534
    9db8:	00000000 	.word	0x00000000
    9dbc:	200002d0 	.word	0x200002d0
    9dc0:	40000508 	.word	0x40000508

00009dc4 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    9dc4:	4906      	ldr	r1, [pc, #24]	; (9de0 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    9dc6:	b510      	push	{r4, lr}
    9dc8:	f891 2032 	ldrb.w	r2, [r1, #50]	; 0x32
    9dcc:	2a20      	cmp	r2, #32
    9dce:	bf1c      	itt	ne
    9dd0:	7788      	strbne	r0, [r1, #30]
    9dd2:	bd10      	popne	{r4, pc}
    9dd4:	f240 319a 	movw	r1, #922	; 0x39a
    9dd8:	2070      	movs	r0, #112	; 0x70
    9dda:	f002 fadd 	bl	c398 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9dde:	0000      	.short	0x0000
    9de0:	200015b4 	.word	0x200015b4

00009de4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    9de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9de8:	4e69      	ldr	r6, [pc, #420]	; (9f90 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1ac>)
    9dea:	4607      	mov	r7, r0
    9dec:	b08d      	sub	sp, #52	; 0x34
    9dee:	f896 0032 	ldrb.w	r0, [r6, #50]	; 0x32
    9df2:	4688      	mov	r8, r1
    9df4:	2820      	cmp	r0, #32
    9df6:	d055      	beq.n	9ea4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xc0>
    9df8:	f896 0032 	ldrb.w	r0, [r6, #50]	; 0x32
    9dfc:	f106 0408 	add.w	r4, r6, #8
    9e00:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    9e04:	f5a6 6980 	sub.w	r9, r6, #1024	; 0x400
    9e08:	eb09 0a80 	add.w	sl, r9, r0, lsl #2
    9e0c:	2020      	movs	r0, #32
    9e0e:	f88d 0020 	strb.w	r0, [sp, #32]
    9e12:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
    9e16:	aa0a      	add	r2, sp, #40	; 0x28
    9e18:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    9e1c:	4430      	add	r0, r6
    9e1e:	a909      	add	r1, sp, #36	; 0x24
    9e20:	f890 5020 	ldrb.w	r5, [r0, #32]
    9e24:	68f0      	ldr	r0, [r6, #12]
    9e26:	9002      	str	r0, [sp, #8]
    9e28:	6830      	ldr	r0, [r6, #0]
    9e2a:	4438      	add	r0, r7
    9e2c:	f001 f9fe 	bl	b22c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    9e30:	f8da 000c 	ldr.w	r0, [sl, #12]
    9e34:	9909      	ldr	r1, [sp, #36]	; 0x24
    9e36:	2f65      	cmp	r7, #101	; 0x65
    9e38:	4408      	add	r0, r1
    9e3a:	d338      	bcc.n	9eae <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    9e3c:	4a55      	ldr	r2, [pc, #340]	; (9f94 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b0>)
    9e3e:	2100      	movs	r1, #0
    9e40:	1bd2      	subs	r2, r2, r7
    9e42:	eb71 0201 	sbcs.w	r2, r1, r1
    9e46:	d332      	bcc.n	9eae <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    9e48:	6822      	ldr	r2, [r4, #0]
    9e4a:	1a82      	subs	r2, r0, r2
    9e4c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    9e50:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    9e54:	d82b      	bhi.n	9eae <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    9e56:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9e5a:	6060      	str	r0, [r4, #4]
    9e5c:	4630      	mov	r0, r6
    9e5e:	f884 8010 	strb.w	r8, [r4, #16]
    9e62:	f890 0031 	ldrb.w	r0, [r0, #49]	; 0x31
    9e66:	f10d 0a20 	add.w	sl, sp, #32
    9e6a:	2d20      	cmp	r5, #32
    9e6c:	bf1c      	itt	ne
    9e6e:	494a      	ldrne	r1, [pc, #296]	; (9f98 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>)
    9e70:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    9e74:	d050      	beq.n	9f18 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    9e76:	bf00      	nop
    9e78:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    9e7c:	eb09 0880 	add.w	r8, r9, r0, lsl #2
    9e80:	6861      	ldr	r1, [r4, #4]
    9e82:	f8d8 6008 	ldr.w	r6, [r8, #8]
    9e86:	f108 0008 	add.w	r0, r8, #8
    9e8a:	1a71      	subs	r1, r6, r1
    9e8c:	0209      	lsls	r1, r1, #8
    9e8e:	17ca      	asrs	r2, r1, #31
    9e90:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    9e94:	1209      	asrs	r1, r1, #8
    9e96:	d42d      	bmi.n	9ef4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x110>
    9e98:	89c0      	ldrh	r0, [r0, #14]
    9e9a:	2800      	cmp	r0, #0
    9e9c:	d03c      	beq.n	9f18 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    9e9e:	89e0      	ldrh	r0, [r4, #14]
    9ea0:	b148      	cbz	r0, 9eb6 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xd2>
    9ea2:	e039      	b.n	9f18 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    9ea4:	f640 3173 	movw	r1, #2931	; 0xb73
    9ea8:	2070      	movs	r0, #112	; 0x70
    9eaa:	f002 fa75 	bl	c398 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9eae:	b00d      	add	sp, #52	; 0x34
    9eb0:	2001      	movs	r0, #1
    9eb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9eb6:	6820      	ldr	r0, [r4, #0]
    9eb8:	900c      	str	r0, [sp, #48]	; 0x30
    9eba:	f002 f8cd 	bl	c058 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9ebe:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9ec2:	bf08      	it	eq
    9ec4:	200d      	moveq	r0, #13
    9ec6:	d00b      	beq.n	9ee0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xfc>
    9ec8:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9ecc:	3856      	subs	r0, #86	; 0x56
    9ece:	bf08      	it	eq
    9ed0:	201c      	moveq	r0, #28
    9ed2:	d005      	beq.n	9ee0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xfc>
    9ed4:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9ed8:	389f      	subs	r0, #159	; 0x9f
    9eda:	bf14      	ite	ne
    9edc:	2000      	movne	r0, #0
    9ede:	2032      	moveq	r0, #50	; 0x32
    9ee0:	1c41      	adds	r1, r0, #1
    9ee2:	980c      	ldr	r0, [sp, #48]	; 0x30
    9ee4:	1a30      	subs	r0, r6, r0
    9ee6:	0200      	lsls	r0, r0, #8
    9ee8:	17c2      	asrs	r2, r0, #31
    9eea:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    9eee:	1200      	asrs	r0, r0, #8
    9ef0:	4288      	cmp	r0, r1
    9ef2:	da11      	bge.n	9f18 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    9ef4:	f88a 5000 	strb.w	r5, [sl]
    9ef8:	f898 1018 	ldrb.w	r1, [r8, #24]
    9efc:	7c20      	ldrb	r0, [r4, #16]
    9efe:	4281      	cmp	r1, r0
    9f00:	d805      	bhi.n	9f0e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x12a>
    9f02:	9802      	ldr	r0, [sp, #8]
    9f04:	6060      	str	r0, [r4, #4]
    9f06:	b00d      	add	sp, #52	; 0x34
    9f08:	2002      	movs	r0, #2
    9f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9f0e:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    9f12:	7845      	ldrb	r5, [r0, #1]
    9f14:	2d20      	cmp	r5, #32
    9f16:	d1af      	bne.n	9e78 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x94>
    9f18:	2005      	movs	r0, #5
    9f1a:	f001 fd67 	bl	b9ec <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9f1e:	4c1c      	ldr	r4, [pc, #112]	; (9f90 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1ac>)
    9f20:	f04f 30ff 	mov.w	r0, #4294967295
    9f24:	6060      	str	r0, [r4, #4]
    9f26:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
    9f2a:	f89d 2020 	ldrb.w	r2, [sp, #32]
    9f2e:	2120      	movs	r1, #32
    9f30:	2a20      	cmp	r2, #32
    9f32:	d003      	beq.n	9f3c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x158>
    9f34:	2005      	movs	r0, #5
    9f36:	f7fe ff09 	bl	8d4c <MPSL_IRQ_RADIO_Handler+0x40>
    9f3a:	e004      	b.n	9f46 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x162>
    9f3c:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    9f40:	4420      	add	r0, r4
    9f42:	f890 0020 	ldrb.w	r0, [r0, #32]
    9f46:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
    9f4a:	4913      	ldr	r1, [pc, #76]	; (9f98 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>)
    9f4c:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    9f50:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
    9f54:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    9f58:	7048      	strb	r0, [r1, #1]
    9f5a:	6820      	ldr	r0, [r4, #0]
    9f5c:	4438      	add	r0, r7
    9f5e:	6020      	str	r0, [r4, #0]
    9f60:	20ff      	movs	r0, #255	; 0xff
    9f62:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    9f66:	7e60      	ldrb	r0, [r4, #25]
    9f68:	2801      	cmp	r0, #1
    9f6a:	d105      	bne.n	9f78 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x194>
    9f6c:	68e0      	ldr	r0, [r4, #12]
    9f6e:	1e40      	subs	r0, r0, #1
    9f70:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9f74:	f001 fb9e 	bl	b6b4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    9f78:	f89d 0020 	ldrb.w	r0, [sp, #32]
    9f7c:	2820      	cmp	r0, #32
    9f7e:	d003      	beq.n	9f88 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1a4>
    9f80:	4806      	ldr	r0, [pc, #24]	; (9f9c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b8>)
    9f82:	7840      	ldrb	r0, [r0, #1]
    9f84:	f002 fadc 	bl	c540 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    9f88:	b00d      	add	sp, #52	; 0x34
    9f8a:	2000      	movs	r0, #0
    9f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9f90:	200015b4 	.word	0x200015b4
    9f94:	0f424000 	.word	0x0f424000
    9f98:	20001534 	.word	0x20001534
    9f9c:	200002d0 	.word	0x200002d0

00009fa0 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>:
    9fa0:	b570      	push	{r4, r5, r6, lr}
    9fa2:	4a24      	ldr	r2, [pc, #144]	; (a034 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x94>)
    9fa4:	f892 1032 	ldrb.w	r1, [r2, #50]	; 0x32
    9fa8:	2920      	cmp	r1, #32
    9faa:	d03a      	beq.n	a022 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x82>
    9fac:	f892 1032 	ldrb.w	r1, [r2, #50]	; 0x32
    9fb0:	f5a2 6380 	sub.w	r3, r2, #1024	; 0x400
    9fb4:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    9fb8:	eb03 0c81 	add.w	ip, r3, r1, lsl #2
    9fbc:	f892 1031 	ldrb.w	r1, [r2, #49]	; 0x31
    9fc0:	f892 4031 	ldrb.w	r4, [r2, #49]	; 0x31
    9fc4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    9fc8:	4411      	add	r1, r2
    9fca:	f891 1020 	ldrb.w	r1, [r1, #32]
    9fce:	f1a2 0580 	sub.w	r5, r2, #128	; 0x80
    9fd2:	eb05 1484 	add.w	r4, r5, r4, lsl #6
    9fd6:	2920      	cmp	r1, #32
    9fd8:	d028      	beq.n	a02c <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x8c>
    9fda:	ebc1 05c1 	rsb	r5, r1, r1, lsl #3
    9fde:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    9fe2:	7e2d      	ldrb	r5, [r5, #24]
    9fe4:	4285      	cmp	r5, r0
    9fe6:	bf84      	itt	hi
    9fe8:	eb04 0141 	addhi.w	r1, r4, r1, lsl #1
    9fec:	7849      	ldrbhi	r1, [r1, #1]
    9fee:	d8f2      	bhi.n	9fd6 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x36>
    9ff0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    9ff4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    9ff8:	f8dc 000c 	ldr.w	r0, [ip, #12]
    9ffc:	6889      	ldr	r1, [r1, #8]
    9ffe:	6814      	ldr	r4, [r2, #0]
    a000:	1a08      	subs	r0, r1, r0
    a002:	0200      	lsls	r0, r0, #8
    a004:	17c1      	asrs	r1, r0, #31
    a006:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    a00a:	1200      	asrs	r0, r0, #8
    a00c:	d407      	bmi.n	a01e <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x7e>
    a00e:	f006 f9bb 	bl	10388 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    a012:	f104 0165 	add.w	r1, r4, #101	; 0x65
    a016:	4288      	cmp	r0, r1
    a018:	bf24      	itt	cs
    a01a:	1b00      	subcs	r0, r0, r4
    a01c:	bd70      	popcs	{r4, r5, r6, pc}
    a01e:	2000      	movs	r0, #0
    a020:	bd70      	pop	{r4, r5, r6, pc}
    a022:	f640 3145 	movw	r1, #2885	; 0xb45
    a026:	2070      	movs	r0, #112	; 0x70
    a028:	f002 f9b6 	bl	c398 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a02c:	f04f 30ff 	mov.w	r0, #4294967295
    a030:	bd70      	pop	{r4, r5, r6, pc}
    a032:	0000      	.short	0x0000
    a034:	200015b4 	.word	0x200015b4

0000a038 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>:
    a038:	4806      	ldr	r0, [pc, #24]	; (a054 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA+0x1c>)
    a03a:	b510      	push	{r4, lr}
    a03c:	f890 1032 	ldrb.w	r1, [r0, #50]	; 0x32
    a040:	2920      	cmp	r1, #32
    a042:	bf1c      	itt	ne
    a044:	7e00      	ldrbne	r0, [r0, #24]
    a046:	bd10      	popne	{r4, pc}
    a048:	f640 316d 	movw	r1, #2925	; 0xb6d
    a04c:	2070      	movs	r0, #112	; 0x70
    a04e:	f002 f9a3 	bl	c398 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a052:	0000      	.short	0x0000
    a054:	200015b4 	.word	0x200015b4

0000a058 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>:
    a058:	b570      	push	{r4, r5, r6, lr}
    a05a:	ebc0 01c0 	rsb	r1, r0, r0, lsl #3
    a05e:	4809      	ldr	r0, [pc, #36]	; (a084 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x2c>)
    a060:	eb00 0481 	add.w	r4, r0, r1, lsl #2
    a064:	4908      	ldr	r1, [pc, #32]	; (a088 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x30>)
    a066:	6920      	ldr	r0, [r4, #16]
    a068:	fba0 5601 	umull	r5, r6, r0, r1
    a06c:	68a0      	ldr	r0, [r4, #8]
    a06e:	f006 f98b 	bl	10388 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    a072:	8ae1      	ldrh	r1, [r4, #22]
    a074:	7d22      	ldrb	r2, [r4, #20]
    a076:	1c40      	adds	r0, r0, #1
    a078:	4411      	add	r1, r2
    a07a:	4408      	add	r0, r1
    a07c:	1940      	adds	r0, r0, r5
    a07e:	f146 0100 	adc.w	r1, r6, #0
    a082:	bd70      	pop	{r4, r5, r6, pc}
    a084:	200011b4 	.word	0x200011b4
    a088:	1e848000 	.word	0x1e848000

0000a08c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    a08c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a08e:	4d6f      	ldr	r5, [pc, #444]	; (a24c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c0>)
    a090:	2601      	movs	r6, #1
    a092:	f505 6480 	add.w	r4, r5, #1024	; 0x400
    a096:	4a6e      	ldr	r2, [pc, #440]	; (a250 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c4>)
    a098:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    a09a:	2808      	cmp	r0, #8
    a09c:	d272      	bcs.n	a184 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xf8>
    a09e:	e8df f000 	tbb	[pc, r0]
    a0a2:	7704      	.short	0x7704
    a0a4:	44cfb19f 	.word	0x44cfb19f
    a0a8:	bbb6      	.short	0xbbb6
    a0aa:	f1b1 3fff 	cmp.w	r1, #4294967295
    a0ae:	d104      	bne.n	a0ba <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2e>
    a0b0:	f001 fff4 	bl	c09c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    a0b4:	f001 fa24 	bl	b500 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    a0b8:	62e0      	str	r0, [r4, #44]	; 0x2c
    a0ba:	8ae0      	ldrh	r0, [r4, #22]
    a0bc:	b110      	cbz	r0, a0c4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x38>
    a0be:	f002 f8f3 	bl	c2a8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    a0c2:	b180      	cbz	r0, a0e6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x5a>
    a0c4:	f7ff fcd8 	bl	9a78 <MPSL_IRQ_RADIO_Handler+0xd6c>
    a0c8:	20ff      	movs	r0, #255	; 0xff
    a0ca:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    a0ce:	6861      	ldr	r1, [r4, #4]
    a0d0:	f1b1 3fff 	cmp.w	r1, #4294967295
    a0d4:	d003      	beq.n	a0de <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x52>
    a0d6:	2005      	movs	r0, #5
    a0d8:	f001 fbd2 	bl	b880 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    a0dc:	b140      	cbz	r0, a0f0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x64>
    a0de:	7e60      	ldrb	r0, [r4, #25]
    a0e0:	2801      	cmp	r0, #1
    a0e2:	d110      	bne.n	a106 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x7a>
    a0e4:	e009      	b.n	a0fa <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6e>
    a0e6:	f640 0169 	movw	r1, #2153	; 0x869
    a0ea:	2070      	movs	r0, #112	; 0x70
    a0ec:	f002 f954 	bl	c398 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a0f0:	f640 016e 	movw	r1, #2158	; 0x86e
    a0f4:	2070      	movs	r0, #112	; 0x70
    a0f6:	f002 f94f 	bl	c398 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a0fa:	68e0      	ldr	r0, [r4, #12]
    a0fc:	1e40      	subs	r0, r0, #1
    a0fe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a102:	f001 fad7 	bl	b6b4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    a106:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    a10a:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
    a10e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    a112:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    a116:	6840      	ldr	r0, [r0, #4]
    a118:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    a11c:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    a120:	b001      	add	sp, #4
    a122:	2101      	movs	r1, #1
    a124:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a128:	4710      	bx	r2
    a12a:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
    a12e:	b158      	cbz	r0, a148 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xbc>
    a130:	f1b1 3fff 	cmp.w	r1, #4294967295
    a134:	d104      	bne.n	a140 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xb4>
    a136:	f001 ffb1 	bl	c09c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    a13a:	f001 f9e1 	bl	b500 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    a13e:	62e0      	str	r0, [r4, #44]	; 0x2c
    a140:	2000      	movs	r0, #0
    a142:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    a146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a148:	f7ff fc96 	bl	9a78 <MPSL_IRQ_RADIO_Handler+0xd6c>
    a14c:	f04f 30ff 	mov.w	r0, #4294967295
    a150:	6060      	str	r0, [r4, #4]
    a152:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    a156:	f88d 0000 	strb.w	r0, [sp]
    a15a:	f89d 0000 	ldrb.w	r0, [sp]
    a15e:	b190      	cbz	r0, a186 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xfa>
    a160:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    a164:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
    a168:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    a16c:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    a170:	6840      	ldr	r0, [r0, #4]
    a172:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    a176:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    a17a:	b001      	add	sp, #4
    a17c:	2106      	movs	r1, #6
    a17e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a182:	4710      	bx	r2
    a184:	e05c      	b.n	a240 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b4>
    a186:	f640 0185 	movw	r1, #2181	; 0x885
    a18a:	2070      	movs	r0, #112	; 0x70
    a18c:	f002 f904 	bl	c398 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a190:	f7ff fc72 	bl	9a78 <MPSL_IRQ_RADIO_Handler+0xd6c>
    a194:	f884 6026 	strb.w	r6, [r4, #38]	; 0x26
    a198:	f002 f886 	bl	c2a8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    a19c:	b120      	cbz	r0, a1a8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x11c>
    a19e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    a1a0:	f1b0 3fff 	cmp.w	r0, #4294967295
    a1a4:	d005      	beq.n	a1b2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x126>
    a1a6:	e009      	b.n	a1bc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x130>
    a1a8:	f640 0193 	movw	r1, #2195	; 0x893
    a1ac:	2070      	movs	r0, #112	; 0x70
    a1ae:	f002 f8f3 	bl	c398 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a1b2:	f001 ff73 	bl	c09c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    a1b6:	f001 f9a3 	bl	b500 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    a1ba:	62e0      	str	r0, [r4, #44]	; 0x2c
    a1bc:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    a1c0:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
    a1c4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    a1c8:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    a1cc:	6840      	ldr	r0, [r0, #4]
    a1ce:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    a1d2:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    a1d6:	b001      	add	sp, #4
    a1d8:	2100      	movs	r1, #0
    a1da:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a1de:	4710      	bx	r2
    a1e0:	f001 fd44 	bl	bc6c <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    a1e4:	8ae0      	ldrh	r0, [r4, #22]
    a1e6:	b110      	cbz	r0, a1ee <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x162>
    a1e8:	f002 f85e 	bl	c2a8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    a1ec:	b128      	cbz	r0, a1fa <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x16e>
    a1ee:	f001 fd51 	bl	bc94 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    a1f2:	2800      	cmp	r0, #0
    a1f4:	bf18      	it	ne
    a1f6:	7766      	strbne	r6, [r4, #29]
    a1f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a1fa:	f640 019d 	movw	r1, #2205	; 0x89d
    a1fe:	2070      	movs	r0, #112	; 0x70
    a200:	f002 f8ca 	bl	c398 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a204:	4813      	ldr	r0, [pc, #76]	; (a254 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c8>)
    a206:	6006      	str	r6, [r0, #0]
    a208:	6890      	ldr	r0, [r2, #8]
    a20a:	6006      	str	r6, [r0, #0]
    a20c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a20e:	7810      	ldrb	r0, [r2, #0]
    a210:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    a214:	f002 b994 	b.w	c540 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    a218:	f7ff fc2e 	bl	9a78 <MPSL_IRQ_RADIO_Handler+0xd6c>
    a21c:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    a220:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
    a224:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    a228:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    a22c:	6840      	ldr	r0, [r0, #4]
    a22e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    a232:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    a236:	b001      	add	sp, #4
    a238:	2105      	movs	r1, #5
    a23a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a23e:	4710      	bx	r2
    a240:	f44f 610b 	mov.w	r1, #2224	; 0x8b0
    a244:	2070      	movs	r0, #112	; 0x70
    a246:	f002 f8a7 	bl	c398 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a24a:	0000      	.short	0x0000
    a24c:	200011b4 	.word	0x200011b4
    a250:	200002d0 	.word	0x200002d0
    a254:	40000508 	.word	0x40000508

0000a258 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    a258:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a25c:	4682      	mov	sl, r0
    a25e:	48ef      	ldr	r0, [pc, #956]	; (a61c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c4>)
    a260:	b095      	sub	sp, #84	; 0x54
    a262:	6800      	ldr	r0, [r0, #0]
    a264:	4dee      	ldr	r5, [pc, #952]	; (a620 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c8>)
    a266:	05c0      	lsls	r0, r0, #23
    a268:	0dc0      	lsrs	r0, r0, #23
    a26a:	d00e      	beq.n	a28a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    a26c:	3810      	subs	r0, #16
    a26e:	b240      	sxtb	r0, r0
    a270:	2800      	cmp	r0, #0
    a272:	bfb8      	it	lt
    a274:	f000 000f 	andlt.w	r0, r0, #15
    a278:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    a27c:	bfac      	ite	ge
    a27e:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    a282:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    a286:	0940      	lsrs	r0, r0, #5
    a288:	d00d      	beq.n	a2a6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    a28a:	9816      	ldr	r0, [sp, #88]	; 0x58
    a28c:	f04f 0b00 	mov.w	fp, #0
    a290:	7800      	ldrb	r0, [r0, #0]
    a292:	2800      	cmp	r0, #0
    a294:	bf18      	it	ne
    a296:	2801      	cmpne	r0, #1
    a298:	d018      	beq.n	a2cc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    a29a:	f240 713b 	movw	r1, #1851	; 0x73b
    a29e:	f04f 0070 	mov.w	r0, #112	; 0x70
    a2a2:	f002 f879 	bl	c398 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a2a6:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
    a2aa:	f04f 0b01 	mov.w	fp, #1
    a2ae:	2820      	cmp	r0, #32
    a2b0:	d007      	beq.n	a2c2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    a2b2:	9816      	ldr	r0, [sp, #88]	; 0x58
    a2b4:	7800      	ldrb	r0, [r0, #0]
    a2b6:	b148      	cbz	r0, a2cc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    a2b8:	f240 7137 	movw	r1, #1847	; 0x737
    a2bc:	2070      	movs	r0, #112	; 0x70
    a2be:	f002 f86b 	bl	c398 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a2c2:	f240 7134 	movw	r1, #1844	; 0x734
    a2c6:	2070      	movs	r0, #112	; 0x70
    a2c8:	f002 f866 	bl	c398 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a2cc:	4cd5      	ldr	r4, [pc, #852]	; (a624 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3cc>)
    a2ce:	b124      	cbz	r4, a2da <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    a2d0:	2100      	movs	r1, #0
    a2d2:	f240 703e 	movw	r0, #1854	; 0x73e
    a2d6:	f3af 8000 	nop.w
    a2da:	2000      	movs	r0, #0
    a2dc:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
    a2e0:	49d1      	ldr	r1, [pc, #836]	; (a628 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d0>)
    a2e2:	ebca 00ca 	rsb	r0, sl, sl, lsl #3
    a2e6:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    a2ea:	f04f 0901 	mov.w	r9, #1
    a2ee:	9000      	str	r0, [sp, #0]
    a2f0:	b124      	cbz	r4, a2fc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa4>
    a2f2:	2100      	movs	r1, #0
    a2f4:	f240 7049 	movw	r0, #1865	; 0x749
    a2f8:	f3af 8000 	nop.w
    a2fc:	f1b9 0f00 	cmp.w	r9, #0
    a300:	d00a      	beq.n	a318 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc0>
    a302:	bf00      	nop
    a304:	f895 6031 	ldrb.w	r6, [r5, #49]	; 0x31
    a308:	f04f 0800 	mov.w	r8, #0
    a30c:	f885 8029 	strb.w	r8, [r5, #41]	; 0x29
    a310:	f1bb 0f00 	cmp.w	fp, #0
    a314:	d007      	beq.n	a326 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xce>
    a316:	e038      	b.n	a38a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x132>
    a318:	48c4      	ldr	r0, [pc, #784]	; (a62c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d4>)
    a31a:	2800      	cmp	r0, #0
    a31c:	bf18      	it	ne
    a31e:	f3af 8000 	nopne.w
    a322:	b662      	cpsie	i
    a324:	e7ee      	b.n	a304 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xac>
    a326:	4637      	mov	r7, r6
    a328:	2001      	movs	r0, #1
    a32a:	ea20 0607 	bic.w	r6, r0, r7
    a32e:	48c0      	ldr	r0, [pc, #768]	; (a630 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d8>)
    a330:	2240      	movs	r2, #64	; 0x40
    a332:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    a336:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    a33a:	f006 f9b8 	bl	106ae <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    a33e:	b124      	cbz	r4, a34a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xf2>
    a340:	2100      	movs	r1, #0
    a342:	f240 505e 	movw	r0, #1374	; 0x55e
    a346:	f3af 8000 	nop.w
    a34a:	eb07 0147 	add.w	r1, r7, r7, lsl #1
    a34e:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    a352:	4429      	add	r1, r5
    a354:	4428      	add	r0, r5
    a356:	8c0a      	ldrh	r2, [r1, #32]
    a358:	8402      	strh	r2, [r0, #32]
    a35a:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    a35e:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    a362:	b124      	cbz	r4, a36e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x116>
    a364:	2100      	movs	r1, #0
    a366:	f240 5062 	movw	r0, #1378	; 0x562
    a36a:	f3af 8000 	nop.w
    a36e:	b124      	cbz	r4, a37a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x122>
    a370:	2100      	movs	r1, #0
    a372:	f240 7053 	movw	r0, #1875	; 0x753
    a376:	f3af 8000 	nop.w
    a37a:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    a37e:	f88d 0008 	strb.w	r0, [sp, #8]
    a382:	f89d 0008 	ldrb.w	r0, [sp, #8]
    a386:	2800      	cmp	r0, #0
    a388:	d1b2      	bne.n	a2f0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    a38a:	b124      	cbz	r4, a396 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x13e>
    a38c:	2100      	movs	r1, #0
    a38e:	f240 705d 	movw	r0, #1885	; 0x75d
    a392:	f3af 8000 	nop.w
    a396:	a802      	add	r0, sp, #8
    a398:	f001 f8b8 	bl	b50c <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    a39c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    a3a0:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    a3a4:	4633      	mov	r3, r6
    a3a6:	aa09      	add	r2, sp, #36	; 0x24
    a3a8:	a80e      	add	r0, sp, #56	; 0x38
    a3aa:	9916      	ldr	r1, [sp, #88]	; 0x58
    a3ac:	f7ff fa02 	bl	97b4 <MPSL_IRQ_RADIO_Handler+0xaa8>
    a3b0:	b124      	cbz	r4, a3bc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x164>
    a3b2:	2100      	movs	r1, #0
    a3b4:	f240 7064 	movw	r0, #1892	; 0x764
    a3b8:	f3af 8000 	nop.w
    a3bc:	4a9c      	ldr	r2, [pc, #624]	; (a630 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d8>)
    a3be:	990e      	ldr	r1, [sp, #56]	; 0x38
    a3c0:	eb02 1786 	add.w	r7, r2, r6, lsl #6
    a3c4:	a809      	add	r0, sp, #36	; 0x24
    a3c6:	f817 201a 	ldrb.w	r2, [r7, sl, lsl #1]
    a3ca:	2a01      	cmp	r2, #1
    a3cc:	bf18      	it	ne
    a3ce:	2a02      	cmpne	r2, #2
    a3d0:	d138      	bne.n	a444 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1ec>
    a3d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a3d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a3d6:	eba2 0201 	sub.w	r2, r2, r1
    a3da:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    a3de:	eba3 0101 	sub.w	r1, r3, r1
    a3e2:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
    a3e6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    a3ea:	2a02      	cmp	r2, #2
    a3ec:	d364      	bcc.n	a4b8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x260>
    a3ee:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    a3f2:	bf98      	it	ls
    a3f4:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    a3f8:	d85e      	bhi.n	a4b8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x260>
    a3fa:	f04f 0801 	mov.w	r8, #1
    a3fe:	ab14      	add	r3, sp, #80	; 0x50
    a400:	aa13      	add	r2, sp, #76	; 0x4c
    a402:	4631      	mov	r1, r6
    a404:	f7fe fe96 	bl	9134 <MPSL_IRQ_RADIO_Handler+0x428>
    a408:	2800      	cmp	r0, #0
    a40a:	d05d      	beq.n	a4c8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x270>
    a40c:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
    a410:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
    a414:	4633      	mov	r3, r6
    a416:	428a      	cmp	r2, r1
    a418:	d05a      	beq.n	a4d0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x278>
    a41a:	2005      	movs	r0, #5
    a41c:	f7fe fc96 	bl	8d4c <MPSL_IRQ_RADIO_Handler+0x40>
    a420:	eb07 014a 	add.w	r1, r7, sl, lsl #1
    a424:	7048      	strb	r0, [r1, #1]
    a426:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    a42a:	2820      	cmp	r0, #32
    a42c:	bf1c      	itt	ne
    a42e:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    a432:	f880 a001 	strbne.w	sl, [r0, #1]
    a436:	d057      	beq.n	a4e8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x290>
    a438:	4632      	mov	r2, r6
    a43a:	4651      	mov	r1, sl
    a43c:	f05f 0003 	movs.w	r0, #3
    a440:	f7ff fbcc 	bl	9bdc <MPSL_IRQ_RADIO_Handler+0xed0>
    a444:	b124      	cbz	r4, a450 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f8>
    a446:	2100      	movs	r1, #0
    a448:	f240 7069 	movw	r0, #1897	; 0x769
    a44c:	f3af 8000 	nop.w
    a450:	4878      	ldr	r0, [pc, #480]	; (a634 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3dc>)
    a452:	2800      	cmp	r0, #0
    a454:	bf18      	it	ne
    a456:	f3af 8000 	nopne.w
    a45a:	f3ef 8910 	mrs	r9, PRIMASK
    a45e:	b672      	cpsid	i
    a460:	b124      	cbz	r4, a46c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x214>
    a462:	2100      	movs	r1, #0
    a464:	f240 706f 	movw	r0, #1903	; 0x76f
    a468:	f3af 8000 	nop.w
    a46c:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    a470:	f88d 0008 	strb.w	r0, [sp, #8]
    a474:	f89d 0008 	ldrb.w	r0, [sp, #8]
    a478:	2800      	cmp	r0, #0
    a47a:	f47f af39 	bne.w	a2f0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    a47e:	b124      	cbz	r4, a48a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x232>
    a480:	2100      	movs	r1, #0
    a482:	f240 7077 	movw	r0, #1911	; 0x777
    a486:	f3af 8000 	nop.w
    a48a:	af09      	add	r7, sp, #36	; 0x24
    a48c:	9800      	ldr	r0, [sp, #0]
    a48e:	e897 100e 	ldmia.w	r7, {r1, r2, r3, ip}
    a492:	f100 0708 	add.w	r7, r0, #8
    a496:	f1b8 0f00 	cmp.w	r8, #0
    a49a:	e887 100e 	stmia.w	r7, {r1, r2, r3, ip}
    a49e:	990d      	ldr	r1, [sp, #52]	; 0x34
    a4a0:	6181      	str	r1, [r0, #24]
    a4a2:	d051      	beq.n	a548 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f0>
    a4a4:	b124      	cbz	r4, a4b0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    a4a6:	2100      	movs	r1, #0
    a4a8:	f240 7084 	movw	r0, #1924	; 0x784
    a4ac:	f3af 8000 	nop.w
    a4b0:	f1bb 0f00 	cmp.w	fp, #0
    a4b4:	d139      	bne.n	a52a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d2>
    a4b6:	e01f      	b.n	a4f8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2a0>
    a4b8:	4632      	mov	r2, r6
    a4ba:	4651      	mov	r1, sl
    a4bc:	2004      	movs	r0, #4
    a4be:	f7ff fb8d 	bl	9bdc <MPSL_IRQ_RADIO_Handler+0xed0>
    a4c2:	f04f 0801 	mov.w	r8, #1
    a4c6:	e7bd      	b.n	a444 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1ec>
    a4c8:	4632      	mov	r2, r6
    a4ca:	4651      	mov	r1, sl
    a4cc:	2004      	movs	r0, #4
    a4ce:	e7b7      	b.n	a440 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1e8>
    a4d0:	2920      	cmp	r1, #32
    a4d2:	bf19      	ittee	ne
    a4d4:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    a4d8:	7840      	ldrbne	r0, [r0, #1]
    a4da:	eb06 0046 	addeq.w	r0, r6, r6, lsl #1
    a4de:	4428      	addeq	r0, r5
    a4e0:	bf08      	it	eq
    a4e2:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    a4e6:	e79b      	b.n	a420 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1c8>
    a4e8:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    a4ec:	4429      	add	r1, r5
    a4ee:	f881 a020 	strb.w	sl, [r1, #32]
    a4f2:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
    a4f6:	e79f      	b.n	a438 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1e0>
    a4f8:	9811      	ldr	r0, [sp, #68]	; 0x44
    a4fa:	f010 0fff 	tst.w	r0, #255	; 0xff
    a4fe:	d014      	beq.n	a52a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d2>
    a500:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
    a504:	2820      	cmp	r0, #32
    a506:	d110      	bne.n	a52a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d2>
    a508:	b124      	cbz	r4, a514 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2bc>
    a50a:	2100      	movs	r1, #0
    a50c:	f240 7089 	movw	r0, #1929	; 0x789
    a510:	f3af 8000 	nop.w
    a514:	4631      	mov	r1, r6
    a516:	2002      	movs	r0, #2
    a518:	f7ff fb92 	bl	9c40 <MPSL_IRQ_RADIO_Handler+0xf34>
    a51c:	9010      	str	r0, [sp, #64]	; 0x40
    a51e:	b920      	cbnz	r0, a52a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d2>
    a520:	9816      	ldr	r0, [sp, #88]	; 0x58
    a522:	7800      	ldrb	r0, [r0, #0]
    a524:	b1e8      	cbz	r0, a562 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x30a>
    a526:	2801      	cmp	r0, #1
    a528:	d02a      	beq.n	a580 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x328>
    a52a:	b124      	cbz	r4, a536 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2de>
    a52c:	2100      	movs	r1, #0
    a52e:	f240 70a6 	movw	r0, #1958	; 0x7a6
    a532:	f3af 8000 	nop.w
    a536:	20ff      	movs	r0, #255	; 0xff
    a538:	f1bb 0f00 	cmp.w	fp, #0
    a53c:	bf18      	it	ne
    a53e:	f885 0029 	strbne.w	r0, [r5, #41]	; 0x29
    a542:	d026      	beq.n	a592 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x33a>
    a544:	f04f 0801 	mov.w	r8, #1
    a548:	b124      	cbz	r4, a554 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2fc>
    a54a:	2100      	movs	r1, #0
    a54c:	f240 70b7 	movw	r0, #1975	; 0x7b7
    a550:	f3af 8000 	nop.w
    a554:	9810      	ldr	r0, [sp, #64]	; 0x40
    a556:	4e38      	ldr	r6, [pc, #224]	; (a638 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e0>)
    a558:	2802      	cmp	r0, #2
    a55a:	d023      	beq.n	a5a4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x34c>
    a55c:	2801      	cmp	r0, #1
    a55e:	d029      	beq.n	a5b4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35c>
    a560:	e02d      	b.n	a5be <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x366>
    a562:	b124      	cbz	r4, a56e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x316>
    a564:	2100      	movs	r1, #0
    a566:	f240 7091 	movw	r0, #1937	; 0x791
    a56a:	f3af 8000 	nop.w
    a56e:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
    a572:	4651      	mov	r1, sl
    a574:	2004      	movs	r0, #4
    a576:	f7ff fb31 	bl	9bdc <MPSL_IRQ_RADIO_Handler+0xed0>
    a57a:	f04f 0801 	mov.w	r8, #1
    a57e:	e7e3      	b.n	a548 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f0>
    a580:	2c00      	cmp	r4, #0
    a582:	f43f aeb5 	beq.w	a2f0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    a586:	2100      	movs	r1, #0
    a588:	f240 709c 	movw	r0, #1948	; 0x79c
    a58c:	f3af 8000 	nop.w
    a590:	e6ae      	b.n	a2f0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    a592:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
    a596:	2101      	movs	r1, #1
    a598:	4391      	bics	r1, r2
    a59a:	f885 1031 	strb.w	r1, [r5, #49]	; 0x31
    a59e:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    a5a2:	e7cf      	b.n	a544 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ec>
    a5a4:	68a8      	ldr	r0, [r5, #8]
    a5a6:	990e      	ldr	r1, [sp, #56]	; 0x38
    a5a8:	1a40      	subs	r0, r0, r1
    a5aa:	f005 feed 	bl	10388 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    a5ae:	6871      	ldr	r1, [r6, #4]
    a5b0:	b921      	cbnz	r1, a5bc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x364>
    a5b2:	e004      	b.n	a5be <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x366>
    a5b4:	6871      	ldr	r1, [r6, #4]
    a5b6:	f04f 30ff 	mov.w	r0, #4294967295
    a5ba:	b101      	cbz	r1, a5be <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x366>
    a5bc:	4788      	blx	r1
    a5be:	f1b9 0f00 	cmp.w	r9, #0
    a5c2:	d024      	beq.n	a60e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b6>
    a5c4:	b124      	cbz	r4, a5d0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x378>
    a5c6:	2100      	movs	r1, #0
    a5c8:	f240 70c7 	movw	r0, #1991	; 0x7c7
    a5cc:	f3af 8000 	nop.w
    a5d0:	f1b8 0f00 	cmp.w	r8, #0
    a5d4:	d011      	beq.n	a5fa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a2>
    a5d6:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
    a5da:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    a5de:	4428      	add	r0, r5
    a5e0:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    a5e4:	2820      	cmp	r0, #32
    a5e6:	d008      	beq.n	a5fa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a2>
    a5e8:	b124      	cbz	r4, a5f4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x39c>
    a5ea:	2100      	movs	r1, #0
    a5ec:	f240 70ce 	movw	r0, #1998	; 0x7ce
    a5f0:	f3af 8000 	nop.w
    a5f4:	7870      	ldrb	r0, [r6, #1]
    a5f6:	f001 ffa3 	bl	c540 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    a5fa:	b124      	cbz	r4, a606 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3ae>
    a5fc:	2100      	movs	r1, #0
    a5fe:	f240 70d3 	movw	r0, #2003	; 0x7d3
    a602:	f3af 8000 	nop.w
    a606:	b017      	add	sp, #92	; 0x5c
    a608:	4640      	mov	r0, r8
    a60a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a60e:	4807      	ldr	r0, [pc, #28]	; (a62c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d4>)
    a610:	2800      	cmp	r0, #0
    a612:	bf18      	it	ne
    a614:	f3af 8000 	nopne.w
    a618:	b662      	cpsie	i
    a61a:	e7d3      	b.n	a5c4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x36c>
    a61c:	e000ed04 	.word	0xe000ed04
    a620:	200015b4 	.word	0x200015b4
    a624:	00000000 	.word	0x00000000
    a628:	200011b4 	.word	0x200011b4
    a62c:	00000000 	.word	0x00000000
    a630:	20001534 	.word	0x20001534
    a634:	00000000 	.word	0x00000000
    a638:	200002d0 	.word	0x200002d0

0000a63c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    a63c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a640:	4606      	mov	r6, r0
    a642:	7800      	ldrb	r0, [r0, #0]
    a644:	b08d      	sub	sp, #52	; 0x34
    a646:	b118      	cbz	r0, a650 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x14>
    a648:	b00d      	add	sp, #52	; 0x34
    a64a:	2000      	movs	r0, #0
    a64c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a650:	488c      	ldr	r0, [pc, #560]	; (a884 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x248>)
    a652:	6800      	ldr	r0, [r0, #0]
    a654:	05c0      	lsls	r0, r0, #23
    a656:	0dc0      	lsrs	r0, r0, #23
    a658:	d00e      	beq.n	a678 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3c>
    a65a:	3810      	subs	r0, #16
    a65c:	b240      	sxtb	r0, r0
    a65e:	2800      	cmp	r0, #0
    a660:	bfb8      	it	lt
    a662:	f000 000f 	andlt.w	r0, r0, #15
    a666:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    a66a:	bfac      	ite	ge
    a66c:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    a670:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    a674:	0940      	lsrs	r0, r0, #5
    a676:	d0e7      	beq.n	a648 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc>
    a678:	4d83      	ldr	r5, [pc, #524]	; (a888 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x24c>)
    a67a:	4c84      	ldr	r4, [pc, #528]	; (a88c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x250>)
    a67c:	f04f 0b01 	mov.w	fp, #1
    a680:	2700      	movs	r7, #0
    a682:	b125      	cbz	r5, a68e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x52>
    a684:	2100      	movs	r1, #0
    a686:	f240 50e5 	movw	r0, #1509	; 0x5e5
    a68a:	f3af 8000 	nop.w
    a68e:	f894 a031 	ldrb.w	sl, [r4, #49]	; 0x31
    a692:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
    a696:	f04f 0900 	mov.w	r9, #0
    a69a:	b125      	cbz	r5, a6a6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x6a>
    a69c:	2100      	movs	r1, #0
    a69e:	f240 50ea 	movw	r0, #1514	; 0x5ea
    a6a2:	f3af 8000 	nop.w
    a6a6:	487a      	ldr	r0, [pc, #488]	; (a890 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x254>)
    a6a8:	ea2b 080a 	bic.w	r8, fp, sl
    a6ac:	eb00 118a 	add.w	r1, r0, sl, lsl #6
    a6b0:	eb00 1088 	add.w	r0, r0, r8, lsl #6
    a6b4:	2240      	movs	r2, #64	; 0x40
    a6b6:	f005 fffa 	bl	106ae <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    a6ba:	b125      	cbz	r5, a6c6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x8a>
    a6bc:	2100      	movs	r1, #0
    a6be:	f240 505e 	movw	r0, #1374	; 0x55e
    a6c2:	f3af 8000 	nop.w
    a6c6:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    a6ca:	eb08 0048 	add.w	r0, r8, r8, lsl #1
    a6ce:	4421      	add	r1, r4
    a6d0:	4420      	add	r0, r4
    a6d2:	8c0a      	ldrh	r2, [r1, #32]
    a6d4:	8402      	strh	r2, [r0, #32]
    a6d6:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    a6da:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    a6de:	b125      	cbz	r5, a6ea <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xae>
    a6e0:	2100      	movs	r1, #0
    a6e2:	f240 5062 	movw	r0, #1378	; 0x562
    a6e6:	f3af 8000 	nop.w
    a6ea:	b125      	cbz	r5, a6f6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xba>
    a6ec:	2100      	movs	r1, #0
    a6ee:	f240 50ef 	movw	r0, #1519	; 0x5ef
    a6f2:	f3af 8000 	nop.w
    a6f6:	a808      	add	r0, sp, #32
    a6f8:	f000 ff08 	bl	b50c <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    a6fc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    a700:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    a704:	4643      	mov	r3, r8
    a706:	466a      	mov	r2, sp
    a708:	4631      	mov	r1, r6
    a70a:	a80a      	add	r0, sp, #40	; 0x28
    a70c:	f7ff f852 	bl	97b4 <MPSL_IRQ_RADIO_Handler+0xaa8>
    a710:	b125      	cbz	r5, a71c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xe0>
    a712:	2100      	movs	r1, #0
    a714:	f240 50f5 	movw	r0, #1525	; 0x5f5
    a718:	f3af 8000 	nop.w
    a71c:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    a720:	2820      	cmp	r0, #32
    a722:	d01a      	beq.n	a75a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x11e>
    a724:	68e0      	ldr	r0, [r4, #12]
    a726:	9900      	ldr	r1, [sp, #0]
    a728:	1a09      	subs	r1, r1, r0
    a72a:	0209      	lsls	r1, r1, #8
    a72c:	17ca      	asrs	r2, r1, #31
    a72e:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    a732:	1209      	asrs	r1, r1, #8
    a734:	d511      	bpl.n	a75a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x11e>
    a736:	9900      	ldr	r1, [sp, #0]
    a738:	4281      	cmp	r1, r0
    a73a:	d902      	bls.n	a742 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x106>
    a73c:	9902      	ldr	r1, [sp, #8]
    a73e:	1c49      	adds	r1, r1, #1
    a740:	9102      	str	r1, [sp, #8]
    a742:	e9dd 2100 	ldrd	r2, r1, [sp]
    a746:	1a89      	subs	r1, r1, r2
    a748:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    a74c:	4408      	add	r0, r1
    a74e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a752:	e9cd 2000 	strd	r2, r0, [sp]
    a756:	f04f 0901 	mov.w	r9, #1
    a75a:	b125      	cbz	r5, a766 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x12a>
    a75c:	2100      	movs	r1, #0
    a75e:	f240 50ff 	movw	r0, #1535	; 0x5ff
    a762:	f3af 8000 	nop.w
    a766:	9900      	ldr	r1, [sp, #0]
    a768:	980a      	ldr	r0, [sp, #40]	; 0x28
    a76a:	9a01      	ldr	r2, [sp, #4]
    a76c:	1a09      	subs	r1, r1, r0
    a76e:	1a10      	subs	r0, r2, r0
    a770:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    a774:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a778:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    a77c:	bf98      	it	ls
    a77e:	f5b0 0f00 	cmpls.w	r0, #8388608	; 0x800000
    a782:	d809      	bhi.n	a798 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x15c>
    a784:	4643      	mov	r3, r8
    a786:	4669      	mov	r1, sp
    a788:	4842      	ldr	r0, [pc, #264]	; (a894 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x258>)
    a78a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a78c:	f7fe fb1a 	bl	8dc4 <MPSL_IRQ_RADIO_Handler+0xb8>
    a790:	ea59 0000 	orrs.w	r0, r9, r0
    a794:	d129      	bne.n	a7ea <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1ae>
    a796:	e042      	b.n	a81e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1e2>
    a798:	980b      	ldr	r0, [sp, #44]	; 0x2c
    a79a:	f8bd a00e 	ldrh.w	sl, [sp, #14]
    a79e:	9002      	str	r0, [sp, #8]
    a7a0:	aa09      	add	r2, sp, #36	; 0x24
    a7a2:	a907      	add	r1, sp, #28
    a7a4:	4650      	mov	r0, sl
    a7a6:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    a7aa:	f000 fd3f 	bl	b22c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    a7ae:	f001 fa7b 	bl	bca8 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    a7b2:	f000 fd1f 	bl	b1f4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    a7b6:	4681      	mov	r9, r0
    a7b8:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    a7bc:	2820      	cmp	r0, #32
    a7be:	d03b      	beq.n	a838 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1fc>
    a7c0:	68e0      	ldr	r0, [r4, #12]
    a7c2:	1d40      	adds	r0, r0, #5
    a7c4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a7c8:	9900      	ldr	r1, [sp, #0]
    a7ca:	4281      	cmp	r1, r0
    a7cc:	d902      	bls.n	a7d4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x198>
    a7ce:	9902      	ldr	r1, [sp, #8]
    a7d0:	1c49      	adds	r1, r1, #1
    a7d2:	9102      	str	r1, [sp, #8]
    a7d4:	e9dd 2100 	ldrd	r2, r1, [sp]
    a7d8:	1a89      	subs	r1, r1, r2
    a7da:	9000      	str	r0, [sp, #0]
    a7dc:	4408      	add	r0, r1
    a7de:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a7e2:	9001      	str	r0, [sp, #4]
    a7e4:	201f      	movs	r0, #31
    a7e6:	f88d 000c 	strb.w	r0, [sp, #12]
    a7ea:	9800      	ldr	r0, [sp, #0]
    a7ec:	f005 fdcc 	bl	10388 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    a7f0:	1c41      	adds	r1, r0, #1
    a7f2:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    a7f6:	f89d 200c 	ldrb.w	r2, [sp, #12]
    a7fa:	4410      	add	r0, r2
    a7fc:	4408      	add	r0, r1
    a7fe:	e9c6 0704 	strd	r0, r7, [r6, #16]
    a802:	b125      	cbz	r5, a80e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1d2>
    a804:	2100      	movs	r1, #0
    a806:	f240 601a 	movw	r0, #1562	; 0x61a
    a80a:	f3af 8000 	nop.w
    a80e:	e9d6 1004 	ldrd	r1, r0, [r6, #16]
    a812:	4a21      	ldr	r2, [pc, #132]	; (a898 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x25c>)
    a814:	9b02      	ldr	r3, [sp, #8]
    a816:	fbe3 1002 	umlal	r1, r0, r3, r2
    a81a:	e9c6 1004 	strd	r1, r0, [r6, #16]
    a81e:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    a822:	f88d 0014 	strb.w	r0, [sp, #20]
    a826:	f89d 0014 	ldrb.w	r0, [sp, #20]
    a82a:	2800      	cmp	r0, #0
    a82c:	f47f af29 	bne.w	a682 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x46>
    a830:	b00d      	add	sp, #52	; 0x34
    a832:	2001      	movs	r0, #1
    a834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a838:	f108 0809 	add.w	r8, r8, #9
    a83c:	f1ba 0f00 	cmp.w	sl, #0
    a840:	d016      	beq.n	a870 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x234>
    a842:	f001 fd31 	bl	c2a8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    a846:	b998      	cbnz	r0, a870 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x234>
    a848:	f001 fc06 	bl	c058 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    a84c:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    a850:	bf08      	it	eq
    a852:	200d      	moveq	r0, #13
    a854:	d00b      	beq.n	a86e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x232>
    a856:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    a85a:	3856      	subs	r0, #86	; 0x56
    a85c:	bf08      	it	eq
    a85e:	201c      	moveq	r0, #28
    a860:	d005      	beq.n	a86e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x232>
    a862:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    a866:	389f      	subs	r0, #159	; 0x9f
    a868:	bf14      	ite	ne
    a86a:	4638      	movne	r0, r7
    a86c:	2032      	moveq	r0, #50	; 0x32
    a86e:	4480      	add	r8, r0
    a870:	9807      	ldr	r0, [sp, #28]
    a872:	4581      	cmp	r9, r0
    a874:	bf84      	itt	hi
    a876:	eba9 0000 	subhi.w	r0, r9, r0
    a87a:	4480      	addhi	r8, r0
    a87c:	f028 407f 	bic.w	r0, r8, #4278190080	; 0xff000000
    a880:	e7a2      	b.n	a7c8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x18c>
    a882:	0000      	.short	0x0000
    a884:	e000ed04 	.word	0xe000ed04
    a888:	00000000 	.word	0x00000000
    a88c:	200015b4 	.word	0x200015b4
    a890:	20001534 	.word	0x20001534
    a894:	0f424000 	.word	0x0f424000
    a898:	1e848000 	.word	0x1e848000

0000a89c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    a89c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a8a0:	4d92      	ldr	r5, [pc, #584]	; (aaec <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x250>)
    a8a2:	b08c      	sub	sp, #48	; 0x30
    a8a4:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
    a8a8:	2000      	movs	r0, #0
    a8aa:	9008      	str	r0, [sp, #32]
    a8ac:	9006      	str	r0, [sp, #24]
    a8ae:	2001      	movs	r0, #1
    a8b0:	4c8f      	ldr	r4, [pc, #572]	; (aaf0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x254>)
    a8b2:	f1a5 0980 	sub.w	r9, r5, #128	; 0x80
    a8b6:	f04f 0800 	mov.w	r8, #0
    a8ba:	4607      	mov	r7, r0
    a8bc:	9007      	str	r0, [sp, #28]
    a8be:	b124      	cbz	r4, a8ca <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2e>
    a8c0:	2100      	movs	r1, #0
    a8c2:	f240 70e4 	movw	r0, #2020	; 0x7e4
    a8c6:	f3af 8000 	nop.w
    a8ca:	9807      	ldr	r0, [sp, #28]
    a8cc:	2800      	cmp	r0, #0
    a8ce:	d03c      	beq.n	a94a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xae>
    a8d0:	f885 8029 	strb.w	r8, [r5, #41]	; 0x29
    a8d4:	b124      	cbz	r4, a8e0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x44>
    a8d6:	2100      	movs	r1, #0
    a8d8:	f240 70e9 	movw	r0, #2025	; 0x7e9
    a8dc:	f3af 8000 	nop.w
    a8e0:	f895 a031 	ldrb.w	sl, [r5, #49]	; 0x31
    a8e4:	2240      	movs	r2, #64	; 0x40
    a8e6:	ea27 060a 	bic.w	r6, r7, sl
    a8ea:	eb09 1086 	add.w	r0, r9, r6, lsl #6
    a8ee:	eb09 118a 	add.w	r1, r9, sl, lsl #6
    a8f2:	4683      	mov	fp, r0
    a8f4:	f005 fedb 	bl	106ae <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    a8f8:	b124      	cbz	r4, a904 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x68>
    a8fa:	2100      	movs	r1, #0
    a8fc:	f240 505e 	movw	r0, #1374	; 0x55e
    a900:	f3af 8000 	nop.w
    a904:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    a908:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    a90c:	4428      	add	r0, r5
    a90e:	4429      	add	r1, r5
    a910:	9000      	str	r0, [sp, #0]
    a912:	8c0a      	ldrh	r2, [r1, #32]
    a914:	8402      	strh	r2, [r0, #32]
    a916:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    a91a:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    a91e:	b124      	cbz	r4, a92a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x8e>
    a920:	2100      	movs	r1, #0
    a922:	f240 5062 	movw	r0, #1378	; 0x562
    a926:	f3af 8000 	nop.w
    a92a:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    a92e:	f88d 0008 	strb.w	r0, [sp, #8]
    a932:	f89d 0008 	ldrb.w	r0, [sp, #8]
    a936:	b178      	cbz	r0, a958 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xbc>
    a938:	2c00      	cmp	r4, #0
    a93a:	bf1c      	itt	ne
    a93c:	2100      	movne	r1, #0
    a93e:	f240 70ef 	movwne	r0, #2031	; 0x7ef
    a942:	d0bc      	beq.n	a8be <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    a944:	f3af 8000 	nop.w
    a948:	e7b9      	b.n	a8be <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    a94a:	486a      	ldr	r0, [pc, #424]	; (aaf4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x258>)
    a94c:	2800      	cmp	r0, #0
    a94e:	bf18      	it	ne
    a950:	f3af 8000 	nopne.w
    a954:	b662      	cpsie	i
    a956:	e7bb      	b.n	a8d0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x34>
    a958:	b124      	cbz	r4, a964 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xc8>
    a95a:	2100      	movs	r1, #0
    a95c:	f240 70f3 	movw	r0, #2035	; 0x7f3
    a960:	f3af 8000 	nop.w
    a964:	980c      	ldr	r0, [sp, #48]	; 0x30
    a966:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    a96a:	2803      	cmp	r0, #3
    a96c:	d17e      	bne.n	aa6c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d0>
    a96e:	9a00      	ldr	r2, [sp, #0]
    a970:	990c      	ldr	r1, [sp, #48]	; 0x30
    a972:	f892 0020 	ldrb.w	r0, [r2, #32]
    a976:	4288      	cmp	r0, r1
    a978:	bf14      	ite	ne
    a97a:	f04f 0a00 	movne.w	sl, #0
    a97e:	f04f 0a01 	moveq.w	sl, #1
    a982:	f102 0c20 	add.w	ip, r2, #32
    a986:	4683      	mov	fp, r0
    a988:	2220      	movs	r2, #32
    a98a:	eb09 1386 	add.w	r3, r9, r6, lsl #6
    a98e:	e003      	b.n	a998 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xfc>
    a990:	4602      	mov	r2, r0
    a992:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    a996:	7840      	ldrb	r0, [r0, #1]
    a998:	4288      	cmp	r0, r1
    a99a:	d002      	beq.n	a9a2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x106>
    a99c:	2820      	cmp	r0, #32
    a99e:	d00a      	beq.n	a9b6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    a9a0:	e7f6      	b.n	a990 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf4>
    a9a2:	2820      	cmp	r0, #32
    a9a4:	d007      	beq.n	a9b6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    a9a6:	4583      	cmp	fp, r0
    a9a8:	d107      	bne.n	a9ba <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11e>
    a9aa:	eb03 004b 	add.w	r0, r3, fp, lsl #1
    a9ae:	7840      	ldrb	r0, [r0, #1]
    a9b0:	f88c 0000 	strb.w	r0, [ip]
    a9b4:	e007      	b.n	a9c6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x12a>
    a9b6:	4640      	mov	r0, r8
    a9b8:	e00c      	b.n	a9d4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x138>
    a9ba:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    a9be:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    a9c2:	7840      	ldrb	r0, [r0, #1]
    a9c4:	7048      	strb	r0, [r1, #1]
    a9c6:	b124      	cbz	r4, a9d2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x136>
    a9c8:	2100      	movs	r1, #0
    a9ca:	f240 40c9 	movw	r0, #1225	; 0x4c9
    a9ce:	f3af 8000 	nop.w
    a9d2:	4638      	mov	r0, r7
    a9d4:	46c3      	mov	fp, r8
    a9d6:	ea10 0f0a 	tst.w	r0, sl
    a9da:	bf18      	it	ne
    a9dc:	46bb      	movne	fp, r7
    a9de:	2800      	cmp	r0, #0
    a9e0:	d04e      	beq.n	aa80 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
    a9e2:	b124      	cbz	r4, a9ee <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x152>
    a9e4:	2100      	movs	r1, #0
    a9e6:	f44f 60ff 	mov.w	r0, #2040	; 0x7f8
    a9ea:	f3af 8000 	nop.w
    a9ee:	4632      	mov	r2, r6
    a9f0:	2001      	movs	r0, #1
    a9f2:	990c      	ldr	r1, [sp, #48]	; 0x30
    a9f4:	f7ff f8f2 	bl	9bdc <MPSL_IRQ_RADIO_Handler+0xed0>
    a9f8:	b124      	cbz	r4, aa04 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x168>
    a9fa:	2100      	movs	r1, #0
    a9fc:	f640 0001 	movw	r0, #2049	; 0x801
    aa00:	f3af 8000 	nop.w
    aa04:	483c      	ldr	r0, [pc, #240]	; (aaf8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x25c>)
    aa06:	2800      	cmp	r0, #0
    aa08:	bf18      	it	ne
    aa0a:	f3af 8000 	nopne.w
    aa0e:	f3ef 8010 	mrs	r0, PRIMASK
    aa12:	b672      	cpsid	i
    aa14:	9007      	str	r0, [sp, #28]
    aa16:	b124      	cbz	r4, aa22 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x186>
    aa18:	2100      	movs	r1, #0
    aa1a:	f640 0006 	movw	r0, #2054	; 0x806
    aa1e:	f3af 8000 	nop.w
    aa22:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    aa26:	f88d 0008 	strb.w	r0, [sp, #8]
    aa2a:	f89d 0008 	ldrb.w	r0, [sp, #8]
    aa2e:	b138      	cbz	r0, aa40 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1a4>
    aa30:	2c00      	cmp	r4, #0
    aa32:	bf1c      	itt	ne
    aa34:	2100      	movne	r1, #0
    aa36:	f640 000a 	movwne	r0, #2058	; 0x80a
    aa3a:	f43f af40 	beq.w	a8be <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    aa3e:	e781      	b.n	a944 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa8>
    aa40:	f1bb 0f00 	cmp.w	fp, #0
    aa44:	d009      	beq.n	aa5a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
    aa46:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
    aa4a:	2820      	cmp	r0, #32
    aa4c:	d105      	bne.n	aa5a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
    aa4e:	4631      	mov	r1, r6
    aa50:	2002      	movs	r0, #2
    aa52:	f7ff f8f5 	bl	9c40 <MPSL_IRQ_RADIO_Handler+0xf34>
    aa56:	9006      	str	r0, [sp, #24]
    aa58:	b1f8      	cbz	r0, aa9a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1fe>
    aa5a:	b124      	cbz	r4, aa66 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ca>
    aa5c:	2100      	movs	r1, #0
    aa5e:	f640 001e 	movw	r0, #2078	; 0x81e
    aa62:	f3af 8000 	nop.w
    aa66:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
    aa6a:	e000      	b.n	aa6e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d2>
    aa6c:	e008      	b.n	aa80 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
    aa6e:	ea27 0000 	bic.w	r0, r7, r0
    aa72:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
    aa76:	20ff      	movs	r0, #255	; 0xff
    aa78:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    aa7c:	2001      	movs	r0, #1
    aa7e:	9008      	str	r0, [sp, #32]
    aa80:	b124      	cbz	r4, aa8c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f0>
    aa82:	2100      	movs	r1, #0
    aa84:	f640 0027 	movw	r0, #2087	; 0x827
    aa88:	f3af 8000 	nop.w
    aa8c:	9806      	ldr	r0, [sp, #24]
    aa8e:	4e1b      	ldr	r6, [pc, #108]	; (aafc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x260>)
    aa90:	2802      	cmp	r0, #2
    aa92:	d009      	beq.n	aaa8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20c>
    aa94:	2801      	cmp	r0, #1
    aa96:	d010      	beq.n	aaba <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x21e>
    aa98:	e014      	b.n	aac4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    aa9a:	b19c      	cbz	r4, aac4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    aa9c:	2100      	movs	r1, #0
    aa9e:	f640 0019 	movw	r0, #2073	; 0x819
    aaa2:	f3af 8000 	nop.w
    aaa6:	e7ec      	b.n	aa82 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    aaa8:	f000 fd2a 	bl	b500 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    aaac:	68a9      	ldr	r1, [r5, #8]
    aaae:	1a08      	subs	r0, r1, r0
    aab0:	f005 fc6a 	bl	10388 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    aab4:	6871      	ldr	r1, [r6, #4]
    aab6:	b921      	cbnz	r1, aac2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x226>
    aab8:	e004      	b.n	aac4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    aaba:	6871      	ldr	r1, [r6, #4]
    aabc:	f04f 30ff 	mov.w	r0, #4294967295
    aac0:	b101      	cbz	r1, aac4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    aac2:	4788      	blx	r1
    aac4:	9807      	ldr	r0, [sp, #28]
    aac6:	b148      	cbz	r0, aadc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x240>
    aac8:	b124      	cbz	r4, aad4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x238>
    aaca:	2100      	movs	r1, #0
    aacc:	f640 003c 	movw	r0, #2108	; 0x83c
    aad0:	f3af 8000 	nop.w
    aad4:	9808      	ldr	r0, [sp, #32]
    aad6:	b00d      	add	sp, #52	; 0x34
    aad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aadc:	4805      	ldr	r0, [pc, #20]	; (aaf4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x258>)
    aade:	2800      	cmp	r0, #0
    aae0:	bf18      	it	ne
    aae2:	f3af 8000 	nopne.w
    aae6:	b662      	cpsie	i
    aae8:	e7ee      	b.n	aac8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22c>
    aaea:	0000      	.short	0x0000
    aaec:	200015b4 	.word	0x200015b4
	...
    aafc:	200002d0 	.word	0x200002d0

0000ab00 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    ab00:	b510      	push	{r4, lr}
    ab02:	2820      	cmp	r0, #32
    ab04:	d211      	bcs.n	ab2a <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    ab06:	490e      	ldr	r1, [pc, #56]	; (ab40 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    ab08:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    ab0c:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    ab10:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    ab14:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    ab18:	b13b      	cbz	r3, ab2a <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    ab1a:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    ab1e:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    ab22:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    ab26:	2a01      	cmp	r2, #1
    ab28:	d001      	beq.n	ab2e <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    ab2a:	2000      	movs	r0, #0
    ab2c:	bd10      	pop	{r4, pc}
    ab2e:	f891 2031 	ldrb.w	r2, [r1, #49]	; 0x31
    ab32:	4601      	mov	r1, r0
    ab34:	2000      	movs	r0, #0
    ab36:	f7ff f851 	bl	9bdc <MPSL_IRQ_RADIO_Handler+0xed0>
    ab3a:	2001      	movs	r0, #1
    ab3c:	bd10      	pop	{r4, pc}
    ab3e:	0000      	.short	0x0000
    ab40:	200015b4 	.word	0x200015b4

0000ab44 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    ab44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ab48:	4e86      	ldr	r6, [pc, #536]	; (ad64 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x220>)
    ab4a:	4680      	mov	r8, r0
    ab4c:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
    ab50:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    ab54:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    ab58:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    ab5c:	2800      	cmp	r0, #0
    ab5e:	d071      	beq.n	ac44 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    ab60:	f896 9031 	ldrb.w	r9, [r6, #49]	; 0x31
    ab64:	4d80      	ldr	r5, [pc, #512]	; (ad68 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x224>)
    ab66:	b125      	cbz	r5, ab72 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    ab68:	2100      	movs	r1, #0
    ab6a:	f640 30b9 	movw	r0, #3001	; 0xbb9
    ab6e:	f3af 8000 	nop.w
    ab72:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    ab76:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    ab7a:	2801      	cmp	r0, #1
    ab7c:	d018      	beq.n	abb0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    ab7e:	b2c0      	uxtb	r0, r0
    ab80:	2804      	cmp	r0, #4
    ab82:	bf1c      	itt	ne
    ab84:	2805      	cmpne	r0, #5
    ab86:	2806      	cmpne	r0, #6
    ab88:	d061      	beq.n	ac4e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x10a>
    ab8a:	b12d      	cbz	r5, ab98 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    ab8c:	f04f 0100 	mov.w	r1, #0
    ab90:	f640 30c5 	movw	r0, #3013	; 0xbc5
    ab94:	f3af 8000 	nop.w
    ab98:	f005 fd2c 	bl	105f4 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    ab9c:	b125      	cbz	r5, aba8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    ab9e:	2100      	movs	r1, #0
    aba0:	f640 30c9 	movw	r0, #3017	; 0xbc9
    aba4:	f3af 8000 	nop.w
    aba8:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    abac:	2801      	cmp	r0, #1
    abae:	d1e6      	bne.n	ab7e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    abb0:	2401      	movs	r4, #1
    abb2:	b125      	cbz	r5, abbe <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    abb4:	2100      	movs	r1, #0
    abb6:	f44f 603d 	mov.w	r0, #3024	; 0xbd0
    abba:	f3af 8000 	nop.w
    abbe:	2c00      	cmp	r4, #0
    abc0:	d04b      	beq.n	ac5a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x116>
    abc2:	2000      	movs	r0, #0
    abc4:	f886 0029 	strb.w	r0, [r6, #41]	; 0x29
    abc8:	b125      	cbz	r5, abd4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    abca:	2100      	movs	r1, #0
    abcc:	f640 30d5 	movw	r0, #3029	; 0xbd5
    abd0:	f3af 8000 	nop.w
    abd4:	f896 b031 	ldrb.w	fp, [r6, #49]	; 0x31
    abd8:	2001      	movs	r0, #1
    abda:	ea20 090b 	bic.w	r9, r0, fp
    abde:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    abe2:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    abe6:	2240      	movs	r2, #64	; 0x40
    abe8:	f005 fd61 	bl	106ae <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    abec:	b125      	cbz	r5, abf8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    abee:	2100      	movs	r1, #0
    abf0:	f240 505e 	movw	r0, #1374	; 0x55e
    abf4:	f3af 8000 	nop.w
    abf8:	eb09 0049 	add.w	r0, r9, r9, lsl #1
    abfc:	eb00 0a06 	add.w	sl, r0, r6
    ac00:	eb0b 004b 	add.w	r0, fp, fp, lsl #1
    ac04:	4430      	add	r0, r6
    ac06:	8c01      	ldrh	r1, [r0, #32]
    ac08:	f8aa 1020 	strh.w	r1, [sl, #32]
    ac0c:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    ac10:	f88a 0022 	strb.w	r0, [sl, #34]	; 0x22
    ac14:	b125      	cbz	r5, ac20 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xdc>
    ac16:	2100      	movs	r1, #0
    ac18:	f240 5062 	movw	r0, #1378	; 0x562
    ac1c:	f3af 8000 	nop.w
    ac20:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
    ac24:	f88d 0000 	strb.w	r0, [sp]
    ac28:	f89d 0000 	ldrb.w	r0, [sp]
    ac2c:	b1e0      	cbz	r0, ac68 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x124>
    ac2e:	2d00      	cmp	r5, #0
    ac30:	bf1c      	itt	ne
    ac32:	2100      	movne	r1, #0
    ac34:	f640 30db 	movwne	r0, #3035	; 0xbdb
    ac38:	d0bb      	beq.n	abb2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    ac3a:	bf00      	nop
    ac3c:	f3af 8000 	nop.w
    ac40:	e7b7      	b.n	abb2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    ac42:	e7ff      	b.n	ac44 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    ac44:	f44f 613b 	mov.w	r1, #2992	; 0xbb0
    ac48:	2070      	movs	r0, #112	; 0x70
    ac4a:	f001 fba5 	bl	c398 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ac4e:	464a      	mov	r2, r9
    ac50:	4641      	mov	r1, r8
    ac52:	2001      	movs	r0, #1
    ac54:	f7fe ffc2 	bl	9bdc <MPSL_IRQ_RADIO_Handler+0xed0>
    ac58:	e7a0      	b.n	ab9c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    ac5a:	4844      	ldr	r0, [pc, #272]	; (ad6c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    ac5c:	2800      	cmp	r0, #0
    ac5e:	bf18      	it	ne
    ac60:	f3af 8000 	nopne.w
    ac64:	b662      	cpsie	i
    ac66:	e7ac      	b.n	abc2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    ac68:	b125      	cbz	r5, ac74 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x130>
    ac6a:	2100      	movs	r1, #0
    ac6c:	f640 30df 	movw	r0, #3039	; 0xbdf
    ac70:	f3af 8000 	nop.w
    ac74:	f89a 3021 	ldrb.w	r3, [sl, #33]	; 0x21
    ac78:	f10a 0121 	add.w	r1, sl, #33	; 0x21
    ac7c:	4640      	mov	r0, r8
    ac7e:	461c      	mov	r4, r3
    ac80:	f04f 0b20 	mov.w	fp, #32
    ac84:	eb07 1289 	add.w	r2, r7, r9, lsl #6
    ac88:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
    ac8c:	e004      	b.n	ac98 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x154>
    ac8e:	46a3      	mov	fp, r4
    ac90:	eb02 0c4b 	add.w	ip, r2, fp, lsl #1
    ac94:	f89c 4001 	ldrb.w	r4, [ip, #1]
    ac98:	4284      	cmp	r4, r0
    ac9a:	d002      	beq.n	aca2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15e>
    ac9c:	2c20      	cmp	r4, #32
    ac9e:	d02b      	beq.n	acf8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    aca0:	e7f5      	b.n	ac8e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x14a>
    aca2:	2c20      	cmp	r4, #32
    aca4:	d028      	beq.n	acf8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    aca6:	42a3      	cmp	r3, r4
    aca8:	d104      	bne.n	acb4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x170>
    acaa:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    acae:	7840      	ldrb	r0, [r0, #1]
    acb0:	7008      	strb	r0, [r1, #0]
    acb2:	e005      	b.n	acc0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x17c>
    acb4:	eb02 0044 	add.w	r0, r2, r4, lsl #1
    acb8:	eb02 014b 	add.w	r1, r2, fp, lsl #1
    acbc:	7840      	ldrb	r0, [r0, #1]
    acbe:	7048      	strb	r0, [r1, #1]
    acc0:	f1ba 0f00 	cmp.w	sl, #0
    acc4:	d011      	beq.n	acea <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    acc6:	b125      	cbz	r5, acd2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    acc8:	2100      	movs	r1, #0
    acca:	f240 40c1 	movw	r0, #1217	; 0x4c1
    acce:	f3af 8000 	nop.w
    acd2:	f89a 0000 	ldrb.w	r0, [sl]
    acd6:	42a0      	cmp	r0, r4
    acd8:	d107      	bne.n	acea <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    acda:	b125      	cbz	r5, ace6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a2>
    acdc:	2100      	movs	r1, #0
    acde:	f240 40c4 	movw	r0, #1220	; 0x4c4
    ace2:	f3af 8000 	nop.w
    ace6:	f88a b000 	strb.w	fp, [sl]
    acea:	b15d      	cbz	r5, ad04 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    acec:	2100      	movs	r1, #0
    acee:	f240 40c9 	movw	r0, #1225	; 0x4c9
    acf2:	f3af 8000 	nop.w
    acf6:	e000      	b.n	acfa <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b6>
    acf8:	b125      	cbz	r5, ad04 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    acfa:	2100      	movs	r1, #0
    acfc:	f640 30e3 	movw	r0, #3043	; 0xbe3
    ad00:	f3af 8000 	nop.w
    ad04:	481a      	ldr	r0, [pc, #104]	; (ad70 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x22c>)
    ad06:	2800      	cmp	r0, #0
    ad08:	bf18      	it	ne
    ad0a:	f3af 8000 	nopne.w
    ad0e:	f3ef 8410 	mrs	r4, PRIMASK
    ad12:	b672      	cpsid	i
    ad14:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
    ad18:	f88d 0000 	strb.w	r0, [sp]
    ad1c:	f89d 0000 	ldrb.w	r0, [sp]
    ad20:	b138      	cbz	r0, ad32 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1ee>
    ad22:	2d00      	cmp	r5, #0
    ad24:	bf1c      	itt	ne
    ad26:	2100      	movne	r1, #0
    ad28:	f640 30e9 	movwne	r0, #3049	; 0xbe9
    ad2c:	f43f af41 	beq.w	abb2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    ad30:	e784      	b.n	ac3c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    ad32:	f886 9031 	strb.w	r9, [r6, #49]	; 0x31
    ad36:	20ff      	movs	r0, #255	; 0xff
    ad38:	f886 0029 	strb.w	r0, [r6, #41]	; 0x29
    ad3c:	b154      	cbz	r4, ad54 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>
    ad3e:	2d00      	cmp	r5, #0
    ad40:	bf08      	it	eq
    ad42:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ad46:	2100      	movs	r1, #0
    ad48:	f640 30f6 	movw	r0, #3062	; 0xbf6
    ad4c:	f3af 8000 	nop.w
    ad50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ad54:	4805      	ldr	r0, [pc, #20]	; (ad6c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    ad56:	2800      	cmp	r0, #0
    ad58:	bf18      	it	ne
    ad5a:	f3af 8000 	nopne.w
    ad5e:	b662      	cpsie	i
    ad60:	e7ed      	b.n	ad3e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
    ad62:	0000      	.short	0x0000
    ad64:	200015b4 	.word	0x200015b4
	...

0000ad74 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    ad74:	b570      	push	{r4, r5, r6, lr}
    ad76:	460d      	mov	r5, r1
    ad78:	4606      	mov	r6, r0
    ad7a:	f001 fa83 	bl	c284 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    ad7e:	480f      	ldr	r0, [pc, #60]	; (adbc <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x48>)
    ad80:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
    ad84:	2400      	movs	r4, #0
    ad86:	3880      	subs	r0, #128	; 0x80
    ad88:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    ad8c:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    ad90:	b129      	cbz	r1, ad9e <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    ad92:	1c61      	adds	r1, r4, #1
    ad94:	b2cc      	uxtb	r4, r1
    ad96:	2c20      	cmp	r4, #32
    ad98:	d3f8      	bcc.n	ad8c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    ad9a:	2020      	movs	r0, #32
    ad9c:	bd70      	pop	{r4, r5, r6, pc}
    ad9e:	4808      	ldr	r0, [pc, #32]	; (adc0 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x4c>)
    ada0:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    ada4:	f840 6021 	str.w	r6, [r0, r1, lsl #2]
    ada8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    adac:	4621      	mov	r1, r4
    adae:	6045      	str	r5, [r0, #4]
    adb0:	2001      	movs	r0, #1
    adb2:	f7fe ff13 	bl	9bdc <MPSL_IRQ_RADIO_Handler+0xed0>
    adb6:	4620      	mov	r0, r4
    adb8:	bd70      	pop	{r4, r5, r6, pc}
    adba:	0000      	.short	0x0000
    adbc:	200015b4 	.word	0x200015b4
    adc0:	200011b4 	.word	0x200011b4

0000adc4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    adc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    adc8:	b083      	sub	sp, #12
    adca:	f000 fb99 	bl	b500 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    adce:	4605      	mov	r5, r0
    add0:	f000 fe7c 	bl	bacc <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    add4:	4c84      	ldr	r4, [pc, #528]	; (afe8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x224>)
    add6:	6860      	ldr	r0, [r4, #4]
    add8:	f1b0 3fff 	cmp.w	r0, #4294967295
    addc:	bf1c      	itt	ne
    adde:	f04f 30ff 	movne.w	r0, #4294967295
    ade2:	6060      	strne	r0, [r4, #4]
    ade4:	7fa0      	ldrb	r0, [r4, #30]
    ade6:	f8df 9204 	ldr.w	r9, [pc, #516]	; afec <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x228>
    adea:	b990      	cbnz	r0, ae12 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x4e>
    adec:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
    adf0:	1a40      	subs	r0, r0, r1
    adf2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    adf6:	f44f 710c 	mov.w	r1, #560	; 0x230
    adfa:	f001 fa2f 	bl	c25c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    adfe:	68e1      	ldr	r1, [r4, #12]
    ae00:	4408      	add	r0, r1
    ae02:	1a28      	subs	r0, r5, r0
    ae04:	0200      	lsls	r0, r0, #8
    ae06:	17c1      	asrs	r1, r0, #31
    ae08:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    ae0c:	1200      	asrs	r0, r0, #8
    ae0e:	0fc0      	lsrs	r0, r0, #31
    ae10:	d012      	beq.n	ae38 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x74>
    ae12:	7e60      	ldrb	r0, [r4, #25]
    ae14:	b320      	cbz	r0, ae60 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x9c>
    ae16:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    ae1a:	f88d 0000 	strb.w	r0, [sp]
    ae1e:	f89d 0000 	ldrb.w	r0, [sp]
    ae22:	b1e8      	cbz	r0, ae60 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x9c>
    ae24:	f000 fcae 	bl	b784 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    ae28:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    ae2c:	b1f0      	cbz	r0, ae6c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa8>
    ae2e:	f240 31f5 	movw	r1, #1013	; 0x3f5
    ae32:	2070      	movs	r0, #112	; 0x70
    ae34:	f001 fab0 	bl	c398 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ae38:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    ae3c:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
    ae40:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    ae44:	eb09 0080 	add.w	r0, r9, r0, lsl #2
    ae48:	6840      	ldr	r0, [r0, #4]
    ae4a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    ae4e:	f859 2021 	ldr.w	r2, [r9, r1, lsl #2]
    ae52:	2108      	movs	r1, #8
    ae54:	4790      	blx	r2
    ae56:	f240 31dd 	movw	r1, #989	; 0x3dd
    ae5a:	2070      	movs	r0, #112	; 0x70
    ae5c:	f001 fa9c 	bl	c398 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ae60:	1ce8      	adds	r0, r5, #3
    ae62:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    ae66:	f000 fb71 	bl	b54c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    ae6a:	e7dd      	b.n	ae28 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x64>
    ae6c:	2001      	movs	r0, #1
    ae6e:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    ae72:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    ae76:	2820      	cmp	r0, #32
    ae78:	d021      	beq.n	aebe <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xfa>
    ae7a:	f894 8032 	ldrb.w	r8, [r4, #50]	; 0x32
    ae7e:	2020      	movs	r0, #32
    ae80:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
    ae84:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
    ae88:	2000      	movs	r0, #0
    ae8a:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    ae8e:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    ae92:	6020      	str	r0, [r4, #0]
    ae94:	f000 ff0e 	bl	bcb4 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>
    ae98:	7720      	strb	r0, [r4, #28]
    ae9a:	f894 6031 	ldrb.w	r6, [r4, #49]	; 0x31
    ae9e:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    aea2:	1907      	adds	r7, r0, r4
    aea4:	f897 0020 	ldrb.w	r0, [r7, #32]
    aea8:	2820      	cmp	r0, #32
    aeaa:	d058      	beq.n	af5e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    aeac:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    aeb0:	eb09 0980 	add.w	r9, r9, r0, lsl #2
    aeb4:	f899 001a 	ldrb.w	r0, [r9, #26]
    aeb8:	2801      	cmp	r0, #1
    aeba:	d005      	beq.n	aec8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x104>
    aebc:	e04f      	b.n	af5e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    aebe:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    aec2:	2070      	movs	r0, #112	; 0x70
    aec4:	f001 fa68 	bl	c398 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    aec8:	f8b9 b016 	ldrh.w	fp, [r9, #22]
    aecc:	aa01      	add	r2, sp, #4
    aece:	4669      	mov	r1, sp
    aed0:	4658      	mov	r0, fp
    aed2:	f000 f9ab 	bl	b22c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    aed6:	f000 fee7 	bl	bca8 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    aeda:	f000 f98b 	bl	b1f4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    aede:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    aee2:	2820      	cmp	r0, #32
    aee4:	d004      	beq.n	aef0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x12c>
    aee6:	68e0      	ldr	r0, [r4, #12]
    aee8:	1d40      	adds	r0, r0, #5
    aeea:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    aeee:	e01d      	b.n	af2c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x168>
    aef0:	f105 0a09 	add.w	sl, r5, #9
    aef4:	f1bb 0f00 	cmp.w	fp, #0
    aef8:	d016      	beq.n	af28 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x164>
    aefa:	f001 f9d5 	bl	c2a8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    aefe:	b998      	cbnz	r0, af28 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x164>
    af00:	f001 f8aa 	bl	c058 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    af04:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    af08:	bf08      	it	eq
    af0a:	200d      	moveq	r0, #13
    af0c:	d00b      	beq.n	af26 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x162>
    af0e:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    af12:	3856      	subs	r0, #86	; 0x56
    af14:	bf08      	it	eq
    af16:	201c      	moveq	r0, #28
    af18:	d005      	beq.n	af26 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x162>
    af1a:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    af1e:	389f      	subs	r0, #159	; 0x9f
    af20:	bf14      	ite	ne
    af22:	2000      	movne	r0, #0
    af24:	2032      	moveq	r0, #50	; 0x32
    af26:	4482      	add	sl, r0
    af28:	f02a 407f 	bic.w	r0, sl, #4278190080	; 0xff000000
    af2c:	f8d9 2008 	ldr.w	r2, [r9, #8]
    af30:	1a81      	subs	r1, r0, r2
    af32:	0209      	lsls	r1, r1, #8
    af34:	17cb      	asrs	r3, r1, #31
    af36:	eb01 6113 	add.w	r1, r1, r3, lsr #24
    af3a:	1209      	asrs	r1, r1, #8
    af3c:	2900      	cmp	r1, #0
    af3e:	dc0e      	bgt.n	af5e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    af40:	f109 0308 	add.w	r3, r9, #8
    af44:	4282      	cmp	r2, r0
    af46:	d202      	bcs.n	af4e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x18a>
    af48:	6899      	ldr	r1, [r3, #8]
    af4a:	1e49      	subs	r1, r1, #1
    af4c:	6099      	str	r1, [r3, #8]
    af4e:	e9d3 2100 	ldrd	r2, r1, [r3]
    af52:	1a89      	subs	r1, r1, r2
    af54:	6018      	str	r0, [r3, #0]
    af56:	4408      	add	r0, r1
    af58:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    af5c:	6058      	str	r0, [r3, #4]
    af5e:	4631      	mov	r1, r6
    af60:	2001      	movs	r0, #1
    af62:	f7fe fe6d 	bl	9c40 <MPSL_IRQ_RADIO_Handler+0xf34>
    af66:	ea5f 0900 	movs.w	r9, r0
    af6a:	d0f8      	beq.n	af5e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    af6c:	4820      	ldr	r0, [pc, #128]	; (aff0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x22c>)
    af6e:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    af72:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    af76:	2802      	cmp	r0, #2
    af78:	d104      	bne.n	af84 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1c0>
    af7a:	4632      	mov	r2, r6
    af7c:	4641      	mov	r1, r8
    af7e:	2006      	movs	r0, #6
    af80:	f7fe fe2c 	bl	9bdc <MPSL_IRQ_RADIO_Handler+0xed0>
    af84:	20ff      	movs	r0, #255	; 0xff
    af86:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    af8a:	f897 0021 	ldrb.w	r0, [r7, #33]	; 0x21
    af8e:	4e19      	ldr	r6, [pc, #100]	; (aff4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x230>)
    af90:	2820      	cmp	r0, #32
    af92:	bf1c      	itt	ne
    af94:	7870      	ldrbne	r0, [r6, #1]
    af96:	f001 fad3 	blne	c540 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    af9a:	7f20      	ldrb	r0, [r4, #28]
    af9c:	b120      	cbz	r0, afa8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1e4>
    af9e:	f000 fe65 	bl	bc6c <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    afa2:	2000      	movs	r0, #0
    afa4:	7720      	strb	r0, [r4, #28]
    afa6:	7760      	strb	r0, [r4, #29]
    afa8:	f1b9 0f02 	cmp.w	r9, #2
    afac:	d011      	beq.n	afd2 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x20e>
    afae:	f1b9 0f01 	cmp.w	r9, #1
    afb2:	bf1c      	itt	ne
    afb4:	b003      	addne	sp, #12
    afb6:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    afba:	f04f 30ff 	mov.w	r0, #4294967295
    afbe:	6871      	ldr	r1, [r6, #4]
    afc0:	2900      	cmp	r1, #0
    afc2:	bf04      	itt	eq
    afc4:	b003      	addeq	sp, #12
    afc6:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    afca:	b003      	add	sp, #12
    afcc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    afd0:	4708      	bx	r1
    afd2:	68a0      	ldr	r0, [r4, #8]
    afd4:	1b40      	subs	r0, r0, r5
    afd6:	f005 f9d7 	bl	10388 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    afda:	6871      	ldr	r1, [r6, #4]
    afdc:	2900      	cmp	r1, #0
    afde:	d1f4      	bne.n	afca <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x206>
    afe0:	b003      	add	sp, #12
    afe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    afe6:	0000      	.short	0x0000
    afe8:	200015b4 	.word	0x200015b4
    afec:	200011b4 	.word	0x200011b4
    aff0:	20001534 	.word	0x20001534
    aff4:	200002d0 	.word	0x200002d0

0000aff8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    aff8:	b570      	push	{r4, r5, r6, lr}
    affa:	4c42      	ldr	r4, [pc, #264]	; (b104 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x10c>)
    affc:	4605      	mov	r5, r0
    affe:	b082      	sub	sp, #8
    b000:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    b004:	2820      	cmp	r0, #32
    b006:	d008      	beq.n	b01a <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x22>
    b008:	6860      	ldr	r0, [r4, #4]
    b00a:	f1b0 3fff 	cmp.w	r0, #4294967295
    b00e:	d009      	beq.n	b024 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2c>
    b010:	f640 21e4 	movw	r1, #2788	; 0xae4
    b014:	2070      	movs	r0, #112	; 0x70
    b016:	f001 f9bf 	bl	c398 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b01a:	f640 21e3 	movw	r1, #2787	; 0xae3
    b01e:	2070      	movs	r0, #112	; 0x70
    b020:	f001 f9ba 	bl	c398 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b024:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    b028:	4937      	ldr	r1, [pc, #220]	; (b108 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x110>)
    b02a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    b02e:	eb01 0680 	add.w	r6, r1, r0, lsl #2
    b032:	68b0      	ldr	r0, [r6, #8]
    b034:	f005 f9a8 	bl	10388 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    b038:	4602      	mov	r2, r0
    b03a:	8af0      	ldrh	r0, [r6, #22]
    b03c:	7d31      	ldrb	r1, [r6, #20]
    b03e:	4b33      	ldr	r3, [pc, #204]	; (b10c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x114>)
    b040:	4408      	add	r0, r1
    b042:	1c40      	adds	r0, r0, #1
    b044:	1811      	adds	r1, r2, r0
    b046:	429a      	cmp	r2, r3
    b048:	d817      	bhi.n	b07a <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x82>
    b04a:	4a31      	ldr	r2, [pc, #196]	; (b110 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x118>)
    b04c:	4290      	cmp	r0, r2
    b04e:	dc1b      	bgt.n	b088 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x90>
    b050:	f1c2 0c00 	rsb	ip, r2, #0
    b054:	4560      	cmp	r0, ip
    b056:	db1e      	blt.n	b096 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9e>
    b058:	0056      	lsls	r6, r2, #1
    b05a:	428e      	cmp	r6, r1
    b05c:	bfdc      	itt	le
    b05e:	f501 01f7 	addle.w	r1, r1, #8093696	; 0x7b8000
    b062:	f1a1 51f8 	suble.w	r1, r1, #520093696	; 0x1f000000
    b066:	dd05      	ble.n	b074 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    b068:	2900      	cmp	r1, #0
    b06a:	bfbc      	itt	lt
    b06c:	f5a1 01f7 	sublt.w	r1, r1, #8093696	; 0x7b8000
    b070:	f101 51f8 	addlt.w	r1, r1, #520093696	; 0x1f000000
    b074:	1948      	adds	r0, r1, r5
    b076:	4299      	cmp	r1, r3
    b078:	d904      	bls.n	b084 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x8c>
    b07a:	f240 519e 	movw	r1, #1438	; 0x59e
    b07e:	2070      	movs	r0, #112	; 0x70
    b080:	f001 f98a 	bl	c398 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b084:	4295      	cmp	r5, r2
    b086:	dd04      	ble.n	b092 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9a>
    b088:	f240 519f 	movw	r1, #1439	; 0x59f
    b08c:	2070      	movs	r0, #112	; 0x70
    b08e:	f001 f983 	bl	c398 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b092:	4565      	cmp	r5, ip
    b094:	da04      	bge.n	b0a0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xa8>
    b096:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
    b09a:	2070      	movs	r0, #112	; 0x70
    b09c:	f001 f97c 	bl	c398 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b0a0:	4286      	cmp	r6, r0
    b0a2:	bfdc      	itt	le
    b0a4:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    b0a8:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    b0ac:	dd05      	ble.n	b0ba <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc2>
    b0ae:	2800      	cmp	r0, #0
    b0b0:	bfbc      	itt	lt
    b0b2:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    b0b6:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    b0ba:	aa01      	add	r2, sp, #4
    b0bc:	4669      	mov	r1, sp
    b0be:	f000 f8b5 	bl	b22c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    b0c2:	f89d 0004 	ldrb.w	r0, [sp, #4]
    b0c6:	280f      	cmp	r0, #15
    b0c8:	bf8c      	ite	hi
    b0ca:	2001      	movhi	r0, #1
    b0cc:	2000      	movls	r0, #0
    b0ce:	9900      	ldr	r1, [sp, #0]
    b0d0:	4408      	add	r0, r1
    b0d2:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    b0d6:	6061      	str	r1, [r4, #4]
    b0d8:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    b0dc:	f88d 0000 	strb.w	r0, [sp]
    b0e0:	f89d 0000 	ldrb.w	r0, [sp]
    b0e4:	2800      	cmp	r0, #0
    b0e6:	bf04      	itt	eq
    b0e8:	b002      	addeq	sp, #8
    b0ea:	bd70      	popeq	{r4, r5, r6, pc}
    b0ec:	2005      	movs	r0, #5
    b0ee:	f000 fbc7 	bl	b880 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    b0f2:	2800      	cmp	r0, #0
    b0f4:	bf1c      	itt	ne
    b0f6:	b002      	addne	sp, #8
    b0f8:	bd70      	popne	{r4, r5, r6, pc}
    b0fa:	f640 21eb 	movw	r1, #2795	; 0xaeb
    b0fe:	2070      	movs	r0, #112	; 0x70
    b100:	f001 f94a 	bl	c398 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b104:	200015b4 	.word	0x200015b4
    b108:	200011b4 	.word	0x200011b4
    b10c:	1e847fff 	.word	0x1e847fff
    b110:	0f424000 	.word	0x0f424000

0000b114 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    b114:	b570      	push	{r4, r5, r6, lr}
    b116:	4c1c      	ldr	r4, [pc, #112]	; (b188 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x74>)
    b118:	2120      	movs	r1, #32
    b11a:	f884 1020 	strb.w	r1, [r4, #32]
    b11e:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    b122:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    b126:	2000      	movs	r0, #0
    b128:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
    b12c:	f884 1032 	strb.w	r1, [r4, #50]	; 0x32
    b130:	1e42      	subs	r2, r0, #1
    b132:	e9c4 0200 	strd	r0, r2, [r4]
    b136:	77a0      	strb	r0, [r4, #30]
    b138:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    b13c:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    b140:	7720      	strb	r0, [r4, #28]
    b142:	7760      	strb	r0, [r4, #29]
    b144:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
    b148:	62e2      	str	r2, [r4, #44]	; 0x2c
    b14a:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    b14e:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    b152:	2210      	movs	r2, #16
    b154:	7088      	strb	r0, [r1, #2]
    b156:	f801 0f04 	strb.w	r0, [r1, #4]!
    b15a:	1e52      	subs	r2, r2, #1
    b15c:	d1fa      	bne.n	b154 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x40>
    b15e:	f000 fdb3 	bl	bcc8 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>
    b162:	4d0a      	ldr	r5, [pc, #40]	; (b18c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x78>)
    b164:	2601      	movs	r6, #1
    b166:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    b16a:	20ff      	movs	r0, #255	; 0xff
    b16c:	7028      	strb	r0, [r5, #0]
    b16e:	4808      	ldr	r0, [pc, #32]	; (b190 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    b170:	f001 f9c8 	bl	c504 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    b174:	7068      	strb	r0, [r5, #1]
    b176:	f001 fa33 	bl	c5e0 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    b17a:	60a8      	str	r0, [r5, #8]
    b17c:	f000 fd2e 	bl	bbdc <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    b180:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    b184:	bd70      	pop	{r4, r5, r6, pc}
    b186:	0000      	.short	0x0000
    b188:	200015b4 	.word	0x200015b4
    b18c:	200002d0 	.word	0x200002d0
    b190:	00009b05 	.word	0x00009b05

0000b194 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>:
    b194:	b570      	push	{r4, r5, r6, lr}
    b196:	4605      	mov	r5, r0
    b198:	2001      	movs	r0, #1
    b19a:	fa00 f405 	lsl.w	r4, r0, r5
    b19e:	460e      	mov	r6, r1
    b1a0:	2a00      	cmp	r2, #0
    b1a2:	bf08      	it	eq
    b1a4:	4808      	ldreq	r0, [pc, #32]	; (b1c8 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x34>)
    b1a6:	d00c      	beq.n	b1c2 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x2e>
    b1a8:	2000      	movs	r0, #0
    b1aa:	f000 fcfd 	bl	bba8 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
    b1ae:	00e9      	lsls	r1, r5, #3
    b1b0:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    b1b4:	f501 31f8 	add.w	r1, r1, #126976	; 0x1f000
    b1b8:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    b1bc:	f8c1 6514 	str.w	r6, [r1, #1300]	; 0x514
    b1c0:	4802      	ldr	r0, [pc, #8]	; (b1cc <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x38>)
    b1c2:	6004      	str	r4, [r0, #0]
    b1c4:	bd70      	pop	{r4, r5, r6, pc}
    b1c6:	0000      	.short	0x0000
    b1c8:	4001f508 	.word	0x4001f508
    b1cc:	4001f504 	.word	0x4001f504

0000b1d0 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>:
    b1d0:	b500      	push	{lr}
    b1d2:	b083      	sub	sp, #12
    b1d4:	4668      	mov	r0, sp
    b1d6:	f000 f999 	bl	b50c <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    b1da:	9800      	ldr	r0, [sp, #0]
    b1dc:	f005 f8d4 	bl	10388 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    b1e0:	9a01      	ldr	r2, [sp, #4]
    b1e2:	4b03      	ldr	r3, [pc, #12]	; (b1f0 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q+0x20>)
    b1e4:	2100      	movs	r1, #0
    b1e6:	fbe2 0103 	umlal	r0, r1, r2, r3
    b1ea:	b003      	add	sp, #12
    b1ec:	bd00      	pop	{pc}
    b1ee:	0000      	.short	0x0000
    b1f0:	1e848000 	.word	0x1e848000

0000b1f4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    b1f4:	0b41      	lsrs	r1, r0, #13
    b1f6:	f248 6237 	movw	r2, #34359	; 0x8637
    b1fa:	4351      	muls	r1, r2
    b1fc:	0c0a      	lsrs	r2, r1, #16
    b1fe:	4b09      	ldr	r3, [pc, #36]	; (b224 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    b200:	0251      	lsls	r1, r2, #9
    b202:	fb02 0203 	mla	r2, r2, r3, r0
    b206:	4808      	ldr	r0, [pc, #32]	; (b228 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    b208:	4350      	muls	r0, r2
    b20a:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    b20e:	306e      	adds	r0, #110	; 0x6e
    b210:	0d40      	lsrs	r0, r0, #21
    b212:	425b      	negs	r3, r3
    b214:	fb10 f303 	smulbb	r3, r0, r3
    b218:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    b21c:	bf88      	it	hi
    b21e:	1c49      	addhi	r1, r1, #1
    b220:	4408      	add	r0, r1
    b222:	4770      	bx	lr
    b224:	ffffc2f7 	.word	0xffffc2f7
    b228:	00010c6f 	.word	0x00010c6f

0000b22c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    b22c:	0b43      	lsrs	r3, r0, #13
    b22e:	f248 6c37 	movw	ip, #34359	; 0x8637
    b232:	fb03 f30c 	mul.w	r3, r3, ip
    b236:	b430      	push	{r4, r5}
    b238:	0c1b      	lsrs	r3, r3, #16
    b23a:	f8df c044 	ldr.w	ip, [pc, #68]	; b280 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    b23e:	025c      	lsls	r4, r3, #9
    b240:	fb03 030c 	mla	r3, r3, ip, r0
    b244:	480f      	ldr	r0, [pc, #60]	; (b284 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    b246:	4358      	muls	r0, r3
    b248:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    b24c:	eb04 000c 	add.w	r0, r4, ip
    b250:	f643 5409 	movw	r4, #15625	; 0x3d09
    b254:	fb1c f404 	smulbb	r4, ip, r4
    b258:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    b25c:	f643 5508 	movw	r5, #15624	; 0x3d08
    b260:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    b264:	442c      	add	r4, r5
    b266:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    b26a:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    b26e:	bf84      	itt	hi
    b270:	f04f 0c00 	movhi.w	ip, #0
    b274:	1c40      	addhi	r0, r0, #1
    b276:	6008      	str	r0, [r1, #0]
    b278:	f882 c000 	strb.w	ip, [r2]
    b27c:	bc30      	pop	{r4, r5}
    b27e:	4770      	bx	lr
    b280:	ffffc2f7 	.word	0xffffc2f7
    b284:	00010c6f 	.word	0x00010c6f

0000b288 <MPSL_IRQ_RTC0_Handler>:
    b288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b28c:	4d3b      	ldr	r5, [pc, #236]	; (b37c <MPSL_IRQ_RTC0_Handler+0xf4>)
    b28e:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    b292:	f8df 80ec 	ldr.w	r8, [pc, #236]	; b380 <MPSL_IRQ_RTC0_Handler+0xf8>
    b296:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    b29a:	f44f 6600 	mov.w	r6, #2048	; 0x800
    b29e:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    b2a2:	f04f 0400 	mov.w	r4, #0
    b2a6:	d019      	beq.n	b2dc <MPSL_IRQ_RTC0_Handler+0x54>
    b2a8:	4836      	ldr	r0, [pc, #216]	; (b384 <MPSL_IRQ_RTC0_Handler+0xfc>)
    b2aa:	6800      	ldr	r0, [r0, #0]
    b2ac:	b1b0      	cbz	r0, b2dc <MPSL_IRQ_RTC0_Handler+0x54>
    b2ae:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    b2b2:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    b2b6:	f8d5 0540 	ldr.w	r0, [r5, #1344]	; 0x540
    b2ba:	f8d8 1000 	ldr.w	r1, [r8]
    b2be:	1a40      	subs	r0, r0, r1
    b2c0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b2c4:	2802      	cmp	r0, #2
    b2c6:	d302      	bcc.n	b2ce <MPSL_IRQ_RTC0_Handler+0x46>
    b2c8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    b2cc:	d906      	bls.n	b2dc <MPSL_IRQ_RTC0_Handler+0x54>
    b2ce:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    b2d2:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    b2d6:	2004      	movs	r0, #4
    b2d8:	f7fe fed8 	bl	a08c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b2dc:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    b2e0:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    b2e4:	d01a      	beq.n	b31c <MPSL_IRQ_RTC0_Handler+0x94>
    b2e6:	4828      	ldr	r0, [pc, #160]	; (b388 <MPSL_IRQ_RTC0_Handler+0x100>)
    b2e8:	6800      	ldr	r0, [r0, #0]
    b2ea:	b1b8      	cbz	r0, b31c <MPSL_IRQ_RTC0_Handler+0x94>
    b2ec:	f8c5 4144 	str.w	r4, [r5, #324]	; 0x144
    b2f0:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    b2f4:	4825      	ldr	r0, [pc, #148]	; (b38c <MPSL_IRQ_RTC0_Handler+0x104>)
    b2f6:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    b2fa:	f8d8 1000 	ldr.w	r1, [r8]
    b2fe:	1a40      	subs	r0, r0, r1
    b300:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b304:	2802      	cmp	r0, #2
    b306:	d302      	bcc.n	b30e <MPSL_IRQ_RTC0_Handler+0x86>
    b308:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    b30c:	d906      	bls.n	b31c <MPSL_IRQ_RTC0_Handler+0x94>
    b30e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    b312:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    b316:	2005      	movs	r0, #5
    b318:	f7fe feb8 	bl	a08c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b31c:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    b320:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    b324:	d01a      	beq.n	b35c <MPSL_IRQ_RTC0_Handler+0xd4>
    b326:	481a      	ldr	r0, [pc, #104]	; (b390 <MPSL_IRQ_RTC0_Handler+0x108>)
    b328:	6800      	ldr	r0, [r0, #0]
    b32a:	b1b8      	cbz	r0, b35c <MPSL_IRQ_RTC0_Handler+0xd4>
    b32c:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    b330:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    b334:	4817      	ldr	r0, [pc, #92]	; (b394 <MPSL_IRQ_RTC0_Handler+0x10c>)
    b336:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    b33a:	f8d8 1000 	ldr.w	r1, [r8]
    b33e:	1a40      	subs	r0, r0, r1
    b340:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b344:	2802      	cmp	r0, #2
    b346:	d302      	bcc.n	b34e <MPSL_IRQ_RTC0_Handler+0xc6>
    b348:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    b34c:	d906      	bls.n	b35c <MPSL_IRQ_RTC0_Handler+0xd4>
    b34e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    b352:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    b356:	2006      	movs	r0, #6
    b358:	f7fe fe98 	bl	a08c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b35c:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    b360:	2800      	cmp	r0, #0
    b362:	bf08      	it	eq
    b364:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    b368:	f8c5 4104 	str.w	r4, [r5, #260]	; 0x104
    b36c:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    b370:	4809      	ldr	r0, [pc, #36]	; (b398 <MPSL_IRQ_RTC0_Handler+0x110>)
    b372:	68c1      	ldr	r1, [r0, #12]
    b374:	1c49      	adds	r1, r1, #1
    b376:	60c1      	str	r1, [r0, #12]
    b378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b37c:	4000b000 	.word	0x4000b000
    b380:	4000b504 	.word	0x4000b504
    b384:	4000b140 	.word	0x4000b140
    b388:	4000b144 	.word	0x4000b144
    b38c:	4000b004 	.word	0x4000b004
    b390:	4000b148 	.word	0x4000b148
    b394:	4000b008 	.word	0x4000b008
    b398:	200002dc 	.word	0x200002dc

0000b39c <MPSL_IRQ_TIMER0_Handler>:
    b39c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b3a0:	4d38      	ldr	r5, [pc, #224]	; (b484 <MPSL_IRQ_TIMER0_Handler+0xe8>)
    b3a2:	7828      	ldrb	r0, [r5, #0]
    b3a4:	2804      	cmp	r0, #4
    b3a6:	d068      	beq.n	b47a <MPSL_IRQ_TIMER0_Handler+0xde>
    b3a8:	1ca8      	adds	r0, r5, #2
    b3aa:	2201      	movs	r2, #1
    b3ac:	7801      	ldrb	r1, [r0, #0]
    b3ae:	b159      	cbz	r1, b3c8 <MPSL_IRQ_TIMER0_Handler+0x2c>
    b3b0:	2901      	cmp	r1, #1
    b3b2:	bf08      	it	eq
    b3b4:	706a      	strbeq	r2, [r5, #1]
    b3b6:	d002      	beq.n	b3be <MPSL_IRQ_TIMER0_Handler+0x22>
    b3b8:	7869      	ldrb	r1, [r5, #1]
    b3ba:	2900      	cmp	r1, #0
    b3bc:	d058      	beq.n	b470 <MPSL_IRQ_TIMER0_Handler+0xd4>
    b3be:	2102      	movs	r1, #2
    b3c0:	7001      	strb	r1, [r0, #0]
    b3c2:	7840      	ldrb	r0, [r0, #1]
    b3c4:	f000 fb12 	bl	b9ec <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b3c8:	4c2f      	ldr	r4, [pc, #188]	; (b488 <MPSL_IRQ_TIMER0_Handler+0xec>)
    b3ca:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b3ce:	f04f 0800 	mov.w	r8, #0
    b3d2:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    b3d6:	f44f 7780 	mov.w	r7, #256	; 0x100
    b3da:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
    b3de:	d00a      	beq.n	b3f6 <MPSL_IRQ_TIMER0_Handler+0x5a>
    b3e0:	482a      	ldr	r0, [pc, #168]	; (b48c <MPSL_IRQ_TIMER0_Handler+0xf0>)
    b3e2:	6800      	ldr	r0, [r0, #0]
    b3e4:	b138      	cbz	r0, b3f6 <MPSL_IRQ_TIMER0_Handler+0x5a>
    b3e6:	2003      	movs	r0, #3
    b3e8:	f000 fb00 	bl	b9ec <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b3ec:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    b3f0:	2003      	movs	r0, #3
    b3f2:	f7fe fe4b 	bl	a08c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b3f6:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b3fa:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    b3fe:	d00a      	beq.n	b416 <MPSL_IRQ_TIMER0_Handler+0x7a>
    b400:	4823      	ldr	r0, [pc, #140]	; (b490 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    b402:	6800      	ldr	r0, [r0, #0]
    b404:	b138      	cbz	r0, b416 <MPSL_IRQ_TIMER0_Handler+0x7a>
    b406:	2002      	movs	r0, #2
    b408:	f000 faf0 	bl	b9ec <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b40c:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    b410:	2002      	movs	r0, #2
    b412:	f7fe fe3b 	bl	a08c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b416:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b41a:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    b41e:	d00a      	beq.n	b436 <MPSL_IRQ_TIMER0_Handler+0x9a>
    b420:	481c      	ldr	r0, [pc, #112]	; (b494 <MPSL_IRQ_TIMER0_Handler+0xf8>)
    b422:	6800      	ldr	r0, [r0, #0]
    b424:	b138      	cbz	r0, b436 <MPSL_IRQ_TIMER0_Handler+0x9a>
    b426:	2001      	movs	r0, #1
    b428:	f000 fae0 	bl	b9ec <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b42c:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    b430:	2001      	movs	r0, #1
    b432:	f7fe fe2b 	bl	a08c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b436:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b43a:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    b43e:	bf08      	it	eq
    b440:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    b444:	4814      	ldr	r0, [pc, #80]	; (b498 <MPSL_IRQ_TIMER0_Handler+0xfc>)
    b446:	6800      	ldr	r0, [r0, #0]
    b448:	2800      	cmp	r0, #0
    b44a:	bf08      	it	eq
    b44c:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    b450:	2000      	movs	r0, #0
    b452:	f000 facb 	bl	b9ec <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b456:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    b45a:	2004      	movs	r0, #4
    b45c:	7028      	strb	r0, [r5, #0]
    b45e:	f8c5 8004 	str.w	r8, [r5, #4]
    b462:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    b466:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b46a:	2000      	movs	r0, #0
    b46c:	f7fe be0e 	b.w	a08c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b470:	f44f 6195 	mov.w	r1, #1192	; 0x4a8
    b474:	206c      	movs	r0, #108	; 0x6c
    b476:	f000 ff8f 	bl	c398 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b47a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b47e:	2007      	movs	r0, #7
    b480:	f7fe be04 	b.w	a08c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b484:	200002dc 	.word	0x200002dc
    b488:	40008000 	.word	0x40008000
    b48c:	4000814c 	.word	0x4000814c
    b490:	40008148 	.word	0x40008148
    b494:	40008144 	.word	0x40008144
    b498:	40008140 	.word	0x40008140
    b49c:	2201      	movs	r2, #1
    b49e:	0211      	lsls	r1, r2, #8
    b4a0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    b4a4:	2000      	movs	r0, #0
    b4a6:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    b4aa:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    b4ae:	f3bf 8f4f 	dsb	sy
    b4b2:	f3bf 8f6f 	isb	sy
    b4b6:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    b4ba:	490e      	ldr	r1, [pc, #56]	; (b4f4 <MPSL_IRQ_TIMER0_Handler+0x158>)
    b4bc:	f841 2f04 	str.w	r2, [r1, #4]!
    b4c0:	1e43      	subs	r3, r0, #1
    b4c2:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
    b4c6:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    b4ca:	f8c1 013c 	str.w	r0, [r1, #316]	; 0x13c
    b4ce:	4b0a      	ldr	r3, [pc, #40]	; (b4f8 <MPSL_IRQ_TIMER0_Handler+0x15c>)
    b4d0:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    b4d4:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    b4d8:	1d1b      	adds	r3, r3, #4
    b4da:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    b4de:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    b4e2:	1d1b      	adds	r3, r3, #4
    b4e4:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    b4e8:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    b4ec:	60ca      	str	r2, [r1, #12]
    b4ee:	4903      	ldr	r1, [pc, #12]	; (b4fc <MPSL_IRQ_TIMER0_Handler+0x160>)
    b4f0:	7048      	strb	r0, [r1, #1]
    b4f2:	4770      	bx	lr
    b4f4:	40008000 	.word	0x40008000
    b4f8:	40008004 	.word	0x40008004
    b4fc:	200002dc 	.word	0x200002dc

0000b500 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    b500:	4801      	ldr	r0, [pc, #4]	; (b508 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    b502:	6800      	ldr	r0, [r0, #0]
    b504:	4770      	bx	lr
    b506:	0000      	.short	0x0000
    b508:	4000b504 	.word	0x4000b504

0000b50c <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>:
    b50c:	b430      	push	{r4, r5}
    b50e:	f3ef 8c10 	mrs	ip, PRIMASK
    b512:	b672      	cpsid	i
    b514:	2500      	movs	r5, #0
    b516:	4b0b      	ldr	r3, [pc, #44]	; (b544 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x38>)
    b518:	4a0b      	ldr	r2, [pc, #44]	; (b548 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x3c>)
    b51a:	bf00      	nop
    b51c:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
    b520:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
    b524:	b12c      	cbz	r4, b532 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x26>
    b526:	68d1      	ldr	r1, [r2, #12]
    b528:	1c49      	adds	r1, r1, #1
    b52a:	60d1      	str	r1, [r2, #12]
    b52c:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
    b530:	e7f4      	b.n	b51c <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x10>
    b532:	68d2      	ldr	r2, [r2, #12]
    b534:	f1bc 0f00 	cmp.w	ip, #0
    b538:	d100      	bne.n	b53c <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x30>
    b53a:	b662      	cpsie	i
    b53c:	e9c0 1200 	strd	r1, r2, [r0]
    b540:	bc30      	pop	{r4, r5}
    b542:	4770      	bx	lr
    b544:	4000b000 	.word	0x4000b000
    b548:	200002dc 	.word	0x200002dc

0000b54c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    b54c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b550:	f8df 8134 	ldr.w	r8, [pc, #308]	; b688 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x13c>
    b554:	4605      	mov	r5, r0
    b556:	f1a8 0602 	sub.w	r6, r8, #2
    b55a:	f898 3000 	ldrb.w	r3, [r8]
    b55e:	68b0      	ldr	r0, [r6, #8]
    b560:	2b01      	cmp	r3, #1
    b562:	bf04      	itt	eq
    b564:	42a8      	cmpeq	r0, r5
    b566:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b56a:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    b56e:	4a47      	ldr	r2, [pc, #284]	; (b68c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x140>)
    b570:	6011      	str	r1, [r2, #0]
    b572:	4948      	ldr	r1, [pc, #288]	; (b694 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x148>)
    b574:	4a46      	ldr	r2, [pc, #280]	; (b690 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x144>)
    b576:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    b57a:	f101 0c04 	add.w	ip, r1, #4
    b57e:	f04f 0400 	mov.w	r4, #0
    b582:	2b00      	cmp	r3, #0
    b584:	d055      	beq.n	b632 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xe6>
    b586:	4a44      	ldr	r2, [pc, #272]	; (b698 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x14c>)
    b588:	f8c1 2348 	str.w	r2, [r1, #840]	; 0x348
    b58c:	f8cc 4540 	str.w	r4, [ip, #1344]	; 0x540
    b590:	f8c1 4144 	str.w	r4, [r1, #324]	; 0x144
    b594:	f8d1 2148 	ldr.w	r2, [r1, #328]	; 0x148
    b598:	2701      	movs	r7, #1
    b59a:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    b59e:	2a00      	cmp	r2, #0
    b5a0:	bf01      	itttt	eq
    b5a2:	f8d1 2104 	ldreq.w	r2, [r1, #260]	; 0x104
    b5a6:	2a00      	cmpeq	r2, #0
    b5a8:	f44f 6200 	moveq.w	r2, #2048	; 0x800
    b5ac:	f8c9 2280 	streq.w	r2, [r9, #640]	; 0x280
    b5b0:	f04f 0a10 	mov.w	sl, #16
    b5b4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    b5b8:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    b5bc:	f8c1 2348 	str.w	r2, [r1, #840]	; 0x348
    b5c0:	f8c1 4140 	str.w	r4, [r1, #320]	; 0x140
    b5c4:	4a35      	ldr	r2, [pc, #212]	; (b69c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x150>)
    b5c6:	f8d2 c000 	ldr.w	ip, [r2]
    b5ca:	eba5 0c0c 	sub.w	ip, r5, ip
    b5ce:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    b5d2:	f1bc 0f02 	cmp.w	ip, #2
    b5d6:	d337      	bcc.n	b648 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfc>
    b5d8:	f5bc 0f00 	cmp.w	ip, #8388608	; 0x800000
    b5dc:	d834      	bhi.n	b648 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfc>
    b5de:	f8c1 5540 	str.w	r5, [r1, #1344]	; 0x540
    b5e2:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
    b5e6:	f8c1 c344 	str.w	ip, [r1, #836]	; 0x344
    b5ea:	b12b      	cbz	r3, b5f8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xac>
    b5ec:	6811      	ldr	r1, [r2, #0]
    b5ee:	1a41      	subs	r1, r0, r1
    b5f0:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    b5f4:	2902      	cmp	r1, #2
    b5f6:	d3f9      	bcc.n	b5ec <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xa0>
    b5f8:	6077      	str	r7, [r6, #4]
    b5fa:	7034      	strb	r4, [r6, #0]
    b5fc:	f7ff ff4e 	bl	b49c <MPSL_IRQ_TIMER0_Handler+0x100>
    b600:	4827      	ldr	r0, [pc, #156]	; (b6a0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x154>)
    b602:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    b606:	f364 0101 	bfi	r1, r4, #0, #2
    b60a:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    b60e:	f8d0 2508 	ldr.w	r2, [r0, #1288]	; 0x508
    b612:	2102      	movs	r1, #2
    b614:	f361 0201 	bfi	r2, r1, #0, #2
    b618:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    b61c:	fa9a f1aa 	rbit	r1, sl
    b620:	fab1 f181 	clz	r1, r1
    b624:	2909      	cmp	r1, #9
    b626:	d917      	bls.n	b658 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x10c>
    b628:	f240 3155 	movw	r1, #853	; 0x355
    b62c:	a01d      	add	r0, pc, #116	; (adr r0, b6a4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x158>)
    b62e:	f000 fe87 	bl	c340 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    b632:	f8c1 2348 	str.w	r2, [r1, #840]	; 0x348
    b636:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    b63a:	f8c1 4140 	str.w	r4, [r1, #320]	; 0x140
    b63e:	f8cc 4540 	str.w	r4, [ip, #1344]	; 0x540
    b642:	f8c1 4144 	str.w	r4, [r1, #324]	; 0x144
    b646:	e7a5      	b.n	b594 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x48>
    b648:	2000      	movs	r0, #0
    b64a:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    b64e:	f44f 7127 	mov.w	r1, #668	; 0x29c
    b652:	206c      	movs	r0, #108	; 0x6c
    b654:	f000 fea0 	bl	c398 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b658:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    b65c:	60c7      	str	r7, [r0, #12]
    b65e:	6871      	ldr	r1, [r6, #4]
    b660:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b664:	f44f 7080 	mov.w	r0, #256	; 0x100
    b668:	f8c9 0280 	str.w	r0, [r9, #640]	; 0x280
    b66c:	f8c9 0100 	str.w	r0, [r9, #256]	; 0x100
    b670:	490f      	ldr	r1, [pc, #60]	; (b6b0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x164>)
    b672:	05c0      	lsls	r0, r0, #23
    b674:	6008      	str	r0, [r1, #0]
    b676:	2004      	movs	r0, #4
    b678:	60b5      	str	r5, [r6, #8]
    b67a:	f888 0001 	strb.w	r0, [r8, #1]
    b67e:	f888 7000 	strb.w	r7, [r8]
    b682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b686:	0000      	.short	0x0000
    b688:	200002de 	.word	0x200002de
    b68c:	4001f508 	.word	0x4001f508
    b690:	fffbfffd 	.word	0xfffbfffd
    b694:	4000b000 	.word	0x4000b000
    b698:	fffafffd 	.word	0xfffafffd
    b69c:	4000b504 	.word	0x4000b504
    b6a0:	40008000 	.word	0x40008000
    b6a4:	5f66726e 	.word	0x5f66726e
    b6a8:	656d6974 	.word	0x656d6974
    b6ac:	00682e72 	.word	0x00682e72
    b6b0:	4001f504 	.word	0x4001f504

0000b6b4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    b6b4:	b570      	push	{r4, r5, r6, lr}
    b6b6:	4c2a      	ldr	r4, [pc, #168]	; (b760 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xac>)
    b6b8:	68a1      	ldr	r1, [r4, #8]
    b6ba:	4281      	cmp	r1, r0
    b6bc:	bf14      	ite	ne
    b6be:	2201      	movne	r2, #1
    b6c0:	2200      	moveq	r2, #0
    b6c2:	f8df c0a0 	ldr.w	ip, [pc, #160]	; b764 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb0>
    b6c6:	f89c 5000 	ldrb.w	r5, [ip]
    b6ca:	2d02      	cmp	r5, #2
    b6cc:	d002      	beq.n	b6d4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x20>
    b6ce:	2a00      	cmp	r2, #0
    b6d0:	d034      	beq.n	b73c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x88>
    b6d2:	e002      	b.n	b6da <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x26>
    b6d4:	2a00      	cmp	r2, #0
    b6d6:	bf08      	it	eq
    b6d8:	bd70      	popeq	{r4, r5, r6, pc}
    b6da:	7862      	ldrb	r2, [r4, #1]
    b6dc:	b39a      	cbz	r2, b746 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x92>
    b6de:	4b22      	ldr	r3, [pc, #136]	; (b768 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    b6e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    b6e4:	601a      	str	r2, [r3, #0]
    b6e6:	4b21      	ldr	r3, [pc, #132]	; (b76c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>)
    b6e8:	1392      	asrs	r2, r2, #14
    b6ea:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    b6ee:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
    b6f2:	2200      	movs	r2, #0
    b6f4:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    b6f8:	4a1d      	ldr	r2, [pc, #116]	; (b770 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    b6fa:	6816      	ldr	r6, [r2, #0]
    b6fc:	1b86      	subs	r6, r0, r6
    b6fe:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
    b702:	2e02      	cmp	r6, #2
    b704:	d324      	bcc.n	b750 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    b706:	f5b6 0f00 	cmp.w	r6, #8388608	; 0x800000
    b70a:	d821      	bhi.n	b750 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    b70c:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    b710:	f44f 3680 	mov.w	r6, #65536	; 0x10000
    b714:	f8c3 6344 	str.w	r6, [r3, #836]	; 0x344
    b718:	b12d      	cbz	r5, b726 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x72>
    b71a:	6813      	ldr	r3, [r2, #0]
    b71c:	1acb      	subs	r3, r1, r3
    b71e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    b722:	2b02      	cmp	r3, #2
    b724:	d3f9      	bcc.n	b71a <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x66>
    b726:	4b13      	ldr	r3, [pc, #76]	; (b774 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    b728:	2102      	movs	r1, #2
    b72a:	074a      	lsls	r2, r1, #29
    b72c:	601a      	str	r2, [r3, #0]
    b72e:	60a0      	str	r0, [r4, #8]
    b730:	2004      	movs	r0, #4
    b732:	f88c 0001 	strb.w	r0, [ip, #1]
    b736:	f88c 1000 	strb.w	r1, [ip]
    b73a:	bd70      	pop	{r4, r5, r6, pc}
    b73c:	f240 21aa 	movw	r1, #682	; 0x2aa
    b740:	206c      	movs	r0, #108	; 0x6c
    b742:	f000 fe29 	bl	c398 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b746:	f240 21ae 	movw	r1, #686	; 0x2ae
    b74a:	206c      	movs	r0, #108	; 0x6c
    b74c:	f000 fe24 	bl	c398 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b750:	2000      	movs	r0, #0
    b752:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    b756:	f240 21ba 	movw	r1, #698	; 0x2ba
    b75a:	206c      	movs	r0, #108	; 0x6c
    b75c:	f000 fe1c 	bl	c398 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b760:	200002dc 	.word	0x200002dc
    b764:	200002de 	.word	0x200002de
    b768:	4001f508 	.word	0x4001f508
    b76c:	4000b000 	.word	0x4000b000
    b770:	4000b504 	.word	0x4000b504
    b774:	4001f504 	.word	0x4001f504

0000b778 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    b778:	4801      	ldr	r0, [pc, #4]	; (b780 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    b77a:	6880      	ldr	r0, [r0, #8]
    b77c:	4770      	bx	lr
    b77e:	0000      	.short	0x0000
    b780:	200002dc 	.word	0x200002dc

0000b784 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    b784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b788:	4836      	ldr	r0, [pc, #216]	; (b864 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    b78a:	4a35      	ldr	r2, [pc, #212]	; (b860 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xdc>)
    b78c:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    b790:	f8df c0d4 	ldr.w	ip, [pc, #212]	; b868 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>
    b794:	1d03      	adds	r3, r0, #4
    b796:	2100      	movs	r1, #0
    b798:	f89c 4000 	ldrb.w	r4, [ip]
    b79c:	b184      	cbz	r4, b7c0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x3c>
    b79e:	4a33      	ldr	r2, [pc, #204]	; (b86c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    b7a0:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    b7a4:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    b7a8:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    b7ac:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    b7b0:	2301      	movs	r3, #1
    b7b2:	2a00      	cmp	r2, #0
    b7b4:	bf04      	itt	eq
    b7b6:	f8d0 0104 	ldreq.w	r0, [r0, #260]	; 0x104
    b7ba:	2800      	cmpeq	r0, #0
    b7bc:	d111      	bne.n	b7e2 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x5e>
    b7be:	e00a      	b.n	b7d6 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x52>
    b7c0:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    b7c4:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    b7c8:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    b7cc:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    b7d0:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    b7d4:	e7ea      	b.n	b7ac <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x28>
    b7d6:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    b7da:	f44f 6000 	mov.w	r0, #2048	; 0x800
    b7de:	f8c2 0280 	str.w	r0, [r2, #640]	; 0x280
    b7e2:	2c02      	cmp	r4, #2
    b7e4:	d004      	beq.n	b7f0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x6c>
    b7e6:	f240 21c6 	movw	r1, #710	; 0x2c6
    b7ea:	206c      	movs	r0, #108	; 0x6c
    b7ec:	f000 fdd4 	bl	c398 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b7f0:	4e1f      	ldr	r6, [pc, #124]	; (b870 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    b7f2:	6830      	ldr	r0, [r6, #0]
    b7f4:	4c1f      	ldr	r4, [pc, #124]	; (b874 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    b7f6:	1cc0      	adds	r0, r0, #3
    b7f8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b7fc:	68a2      	ldr	r2, [r4, #8]
    b7fe:	4d1e      	ldr	r5, [pc, #120]	; (b878 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf4>)
    b800:	4290      	cmp	r0, r2
    b802:	d00b      	beq.n	b81c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    b804:	6837      	ldr	r7, [r6, #0]
    b806:	1bd7      	subs	r7, r2, r7
    b808:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    b80c:	2f04      	cmp	r7, #4
    b80e:	d305      	bcc.n	b81c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    b810:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
    b814:	d802      	bhi.n	b81c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    b816:	f7ff fe99 	bl	b54c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    b81a:	e01b      	b.n	b854 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    b81c:	6830      	ldr	r0, [r6, #0]
    b81e:	1a10      	subs	r0, r2, r0
    b820:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b824:	2802      	cmp	r0, #2
    b826:	d313      	bcc.n	b850 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xcc>
    b828:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    b82c:	d810      	bhi.n	b850 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xcc>
    b82e:	4a13      	ldr	r2, [pc, #76]	; (b87c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf8>)
    b830:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    b834:	6010      	str	r0, [r2, #0]
    b836:	6063      	str	r3, [r4, #4]
    b838:	7021      	strb	r1, [r4, #0]
    b83a:	606b      	str	r3, [r5, #4]
    b83c:	60eb      	str	r3, [r5, #12]
    b83e:	0040      	lsls	r0, r0, #1
    b840:	1f11      	subs	r1, r2, #4
    b842:	6008      	str	r0, [r1, #0]
    b844:	2004      	movs	r0, #4
    b846:	f88c 0001 	strb.w	r0, [ip, #1]
    b84a:	f88c 3000 	strb.w	r3, [ip]
    b84e:	e001      	b.n	b854 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    b850:	6063      	str	r3, [r4, #4]
    b852:	7021      	strb	r1, [r4, #0]
    b854:	6860      	ldr	r0, [r4, #4]
    b856:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    b85a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b85e:	0000      	.short	0x0000
    b860:	fffbfffd 	.word	0xfffbfffd
    b864:	4000b000 	.word	0x4000b000
    b868:	200002de 	.word	0x200002de
    b86c:	fffafffd 	.word	0xfffafffd
    b870:	4000b504 	.word	0x4000b504
    b874:	200002dc 	.word	0x200002dc
    b878:	40008000 	.word	0x40008000
    b87c:	4001f508 	.word	0x4001f508

0000b880 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    b880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b884:	4a54      	ldr	r2, [pc, #336]	; (b9d8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x158>)
    b886:	2500      	movs	r5, #0
    b888:	2401      	movs	r4, #1
    b88a:	f892 c000 	ldrb.w	ip, [r2]
    b88e:	7853      	ldrb	r3, [r2, #1]
    b890:	f44f 76a0 	mov.w	r6, #320	; 0x140
    b894:	2807      	cmp	r0, #7
    b896:	d27d      	bcs.n	b994 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x114>
    b898:	e8df f000 	tbb	[pc, r0]
    b89c:	04040404 	.word	0x04040404
    b8a0:	00585858 	.word	0x00585858
    b8a4:	4a4d      	ldr	r2, [pc, #308]	; (b9dc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x15c>)
    b8a6:	6897      	ldr	r7, [r2, #8]
    b8a8:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
    b8ac:	bf04      	itt	eq
    b8ae:	7852      	ldrbeq	r2, [r2, #1]
    b8b0:	2a00      	cmpeq	r2, #0
    b8b2:	d003      	beq.n	b8bc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x3c>
    b8b4:	f1bc 0f02 	cmp.w	ip, #2
    b8b8:	d005      	beq.n	b8c6 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
    b8ba:	e026      	b.n	b90a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8a>
    b8bc:	f240 3156 	movw	r1, #854	; 0x356
    b8c0:	206c      	movs	r0, #108	; 0x6c
    b8c2:	f000 fd69 	bl	c398 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b8c6:	1f1a      	subs	r2, r3, #4
    b8c8:	b2d2      	uxtb	r2, r2
    b8ca:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    b8ce:	f102 4680 	add.w	r6, r2, #1073741824	; 0x40000000
    b8d2:	f506 4630 	add.w	r6, r6, #45056	; 0xb000
    b8d6:	2200      	movs	r2, #0
    b8d8:	f1bc 0f01 	cmp.w	ip, #1
    b8dc:	d003      	beq.n	b8e6 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x66>
    b8de:	f1bc 0f02 	cmp.w	ip, #2
    b8e2:	d008      	beq.n	b8f6 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x76>
    b8e4:	e00e      	b.n	b904 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x84>
    b8e6:	2b04      	cmp	r3, #4
    b8e8:	bf24      	itt	cs
    b8ea:	6837      	ldrcs	r7, [r6, #0]
    b8ec:	2f00      	cmpcs	r7, #0
    b8ee:	bf08      	it	eq
    b8f0:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
    b8f4:	e006      	b.n	b904 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x84>
    b8f6:	2b04      	cmp	r3, #4
    b8f8:	bf24      	itt	cs
    b8fa:	6837      	ldrcs	r7, [r6, #0]
    b8fc:	2f00      	cmpcs	r7, #0
    b8fe:	bf08      	it	eq
    b900:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
    b904:	f012 4f80 	tst.w	r2, #1073741824	; 0x40000000
    b908:	d1e5      	bne.n	b8d6 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x56>
    b90a:	f8df c0d4 	ldr.w	ip, [pc, #212]	; b9e0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x160>
    b90e:	f100 0210 	add.w	r2, r0, #16
    b912:	fa04 f202 	lsl.w	r2, r4, r2
    b916:	f8cc 2308 	str.w	r2, [ip, #776]	; 0x308
    b91a:	f04f 0340 	mov.w	r3, #64	; 0x40
    b91e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    b922:	b2db      	uxtb	r3, r3
    b924:	4463      	add	r3, ip
    b926:	601c      	str	r4, [r3, #0]
    b928:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    b92c:	f8d0 3540 	ldr.w	r3, [r0, #1344]	; 0x540
    b930:	eba1 0303 	sub.w	r3, r1, r3
    b934:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    b938:	2b03      	cmp	r3, #3
    b93a:	bf26      	itte	cs
    b93c:	f8c0 1540 	strcs.w	r1, [r0, #1344]	; 0x540
    b940:	f8cc 2304 	strcs.w	r2, [ip, #772]	; 0x304
    b944:	f8c0 5540 	strcc.w	r5, [r0, #1344]	; 0x540
    b948:	d237      	bcs.n	b9ba <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x13a>
    b94a:	e03c      	b.n	b9c6 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x146>
    b94c:	f1bc 0f00 	cmp.w	ip, #0
    b950:	d006      	beq.n	b960 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    b952:	4283      	cmp	r3, r0
    b954:	d104      	bne.n	b960 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    b956:	f240 3176 	movw	r1, #886	; 0x376
    b95a:	206c      	movs	r0, #108	; 0x6c
    b95c:	f000 fd1c 	bl	c398 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b960:	1f02      	subs	r2, r0, #4
    b962:	b2d3      	uxtb	r3, r2
    b964:	2b03      	cmp	r3, #3
    b966:	d304      	bcc.n	b972 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xf2>
    b968:	f240 11d1 	movw	r1, #465	; 0x1d1
    b96c:	206c      	movs	r0, #108	; 0x6c
    b96e:	f000 fd13 	bl	c398 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b972:	f8df c070 	ldr.w	ip, [pc, #112]	; b9e4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x164>
    b976:	f103 0210 	add.w	r2, r3, #16
    b97a:	fa04 f202 	lsl.w	r2, r4, r2
    b97e:	f8cc 2308 	str.w	r2, [ip, #776]	; 0x308
    b982:	f8cc 2348 	str.w	r2, [ip, #840]	; 0x348
    b986:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    b98a:	f84c 5003 	str.w	r5, [ip, r3]
    b98e:	4b16      	ldr	r3, [pc, #88]	; (b9e8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>)
    b990:	681b      	ldr	r3, [r3, #0]
    b992:	e000      	b.n	b996 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x116>
    b994:	e01a      	b.n	b9cc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x14c>
    b996:	1f00      	subs	r0, r0, #4
    b998:	1acb      	subs	r3, r1, r3
    b99a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    b99e:	b2c0      	uxtb	r0, r0
    b9a0:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    b9a4:	2b02      	cmp	r3, #2
    b9a6:	d30b      	bcc.n	b9c0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x140>
    b9a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    b9ac:	d808      	bhi.n	b9c0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x140>
    b9ae:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    b9b2:	f8cc 2304 	str.w	r2, [ip, #772]	; 0x304
    b9b6:	f8cc 2344 	str.w	r2, [ip, #836]	; 0x344
    b9ba:	2001      	movs	r0, #1
    b9bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b9c0:	2100      	movs	r1, #0
    b9c2:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    b9c6:	2000      	movs	r0, #0
    b9c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b9cc:	f240 317a 	movw	r1, #890	; 0x37a
    b9d0:	206c      	movs	r0, #108	; 0x6c
    b9d2:	f000 fce1 	bl	c398 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b9d6:	0000      	.short	0x0000
    b9d8:	200002de 	.word	0x200002de
    b9dc:	200002dc 	.word	0x200002dc
    b9e0:	40008000 	.word	0x40008000
    b9e4:	4000b000 	.word	0x4000b000
    b9e8:	4000b504 	.word	0x4000b504

0000b9ec <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    b9ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b9f0:	2601      	movs	r6, #1
    b9f2:	2700      	movs	r7, #0
    b9f4:	f44f 78a0 	mov.w	r8, #320	; 0x140
    b9f8:	2807      	cmp	r0, #7
    b9fa:	d251      	bcs.n	baa0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>
    b9fc:	e8df f000 	tbb	[pc, r0]
    ba00:	04040404 	.word	0x04040404
    ba04:	00191919 	.word	0x00191919
    ba08:	f100 0110 	add.w	r1, r0, #16
    ba0c:	fa06 f201 	lsl.w	r2, r6, r1
    ba10:	4926      	ldr	r1, [pc, #152]	; (baac <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    ba12:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    ba16:	eb01 0380 	add.w	r3, r1, r0, lsl #2
    ba1a:	2200      	movs	r2, #0
    ba1c:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    ba20:	eb08 0280 	add.w	r2, r8, r0, lsl #2
    ba24:	508f      	str	r7, [r1, r2]
    ba26:	4922      	ldr	r1, [pc, #136]	; (bab0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    ba28:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    ba2c:	9000      	str	r0, [sp, #0]
    ba2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ba32:	4d20      	ldr	r5, [pc, #128]	; (bab4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    ba34:	1f01      	subs	r1, r0, #4
    ba36:	b2cc      	uxtb	r4, r1
    ba38:	7829      	ldrb	r1, [r5, #0]
    ba3a:	b179      	cbz	r1, ba5c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x70>
    ba3c:	786a      	ldrb	r2, [r5, #1]
    ba3e:	4282      	cmp	r2, r0
    ba40:	d10c      	bne.n	ba5c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x70>
    ba42:	4a1d      	ldr	r2, [pc, #116]	; (bab8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    ba44:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    ba48:	6010      	str	r0, [r2, #0]
    ba4a:	2901      	cmp	r1, #1
    ba4c:	bf08      	it	eq
    ba4e:	f7ff fd25 	bleq	b49c <MPSL_IRQ_TIMER0_Handler+0x100>
    ba52:	702f      	strb	r7, [r5, #0]
    ba54:	4919      	ldr	r1, [pc, #100]	; (babc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd0>)
    ba56:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    ba5a:	6088      	str	r0, [r1, #8]
    ba5c:	4918      	ldr	r1, [pc, #96]	; (bac0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd4>)
    ba5e:	f104 0010 	add.w	r0, r4, #16
    ba62:	fa06 f000 	lsl.w	r0, r6, r0
    ba66:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    ba6a:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
    ba6e:	00a0      	lsls	r0, r4, #2
    ba70:	4408      	add	r0, r1
    ba72:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    ba76:	4a13      	ldr	r2, [pc, #76]	; (bac4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd8>)
    ba78:	6812      	ldr	r2, [r2, #0]
    ba7a:	1a80      	subs	r0, r0, r2
    ba7c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    ba80:	2802      	cmp	r0, #2
    ba82:	d307      	bcc.n	ba94 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa8>
    ba84:	eb01 0284 	add.w	r2, r1, r4, lsl #2
    ba88:	2000      	movs	r0, #0
    ba8a:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    ba8e:	eb08 0084 	add.w	r0, r8, r4, lsl #2
    ba92:	500f      	str	r7, [r1, r0]
    ba94:	480c      	ldr	r0, [pc, #48]	; (bac8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xdc>)
    ba96:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    ba9a:	9000      	str	r0, [sp, #0]
    ba9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    baa0:	f240 31fe 	movw	r1, #1022	; 0x3fe
    baa4:	206c      	movs	r0, #108	; 0x6c
    baa6:	f000 fc77 	bl	c398 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    baaa:	0000      	.short	0x0000
    baac:	40008000 	.word	0x40008000
    bab0:	40008140 	.word	0x40008140
    bab4:	200002de 	.word	0x200002de
    bab8:	4001f508 	.word	0x4001f508
    babc:	200002dc 	.word	0x200002dc
    bac0:	4000b000 	.word	0x4000b000
    bac4:	4000b504 	.word	0x4000b504
    bac8:	4000b140 	.word	0x4000b140

0000bacc <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    bacc:	4825      	ldr	r0, [pc, #148]	; (bb64 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x98>)
    bace:	4a24      	ldr	r2, [pc, #144]	; (bb60 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x94>)
    bad0:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    bad4:	4924      	ldr	r1, [pc, #144]	; (bb68 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x9c>)
    bad6:	1d03      	adds	r3, r0, #4
    bad8:	f891 c000 	ldrb.w	ip, [r1]
    badc:	2100      	movs	r1, #0
    bade:	f1bc 0f00 	cmp.w	ip, #0
    bae2:	d010      	beq.n	bb06 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x3a>
    bae4:	4a21      	ldr	r2, [pc, #132]	; (bb6c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0xa0>)
    bae6:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    baea:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    baee:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    baf2:	bf00      	nop
    baf4:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    baf8:	2a00      	cmp	r2, #0
    bafa:	bf04      	itt	eq
    bafc:	f8d0 0104 	ldreq.w	r0, [r0, #260]	; 0x104
    bb00:	2800      	cmpeq	r0, #0
    bb02:	d111      	bne.n	bb28 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x5c>
    bb04:	e00a      	b.n	bb1c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x50>
    bb06:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    bb0a:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    bb0e:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    bb12:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    bb16:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    bb1a:	e7eb      	b.n	baf4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x28>
    bb1c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    bb20:	f44f 6000 	mov.w	r0, #2048	; 0x800
    bb24:	f8c2 0280 	str.w	r0, [r2, #640]	; 0x280
    bb28:	4811      	ldr	r0, [pc, #68]	; (bb70 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0xa4>)
    bb2a:	f04f 32ff 	mov.w	r2, #4294967295
    bb2e:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    bb32:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    bb36:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    bb3a:	f100 0204 	add.w	r2, r0, #4
    bb3e:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    bb42:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    bb46:	f102 0204 	add.w	r2, r2, #4
    bb4a:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    bb4e:	f8c0 1148 	str.w	r1, [r0, #328]	; 0x148
    bb52:	f102 0204 	add.w	r2, r2, #4
    bb56:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    bb5a:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
    bb5e:	4770      	bx	lr
    bb60:	fffbfffd 	.word	0xfffbfffd
    bb64:	4000b000 	.word	0x4000b000
    bb68:	200002de 	.word	0x200002de
    bb6c:	fffafffd 	.word	0xfffafffd
    bb70:	40008000 	.word	0x40008000

0000bb74 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>:
    bb74:	b510      	push	{r4, lr}
    bb76:	2807      	cmp	r0, #7
    bb78:	d20d      	bcs.n	bb96 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x22>
    bb7a:	e8df f000 	tbb	[pc, r0]
    bb7e:	0404      	.short	0x0404
    bb80:	06060404 	.word	0x06060404
    bb84:	0006      	.short	0x0006
    bb86:	4906      	ldr	r1, [pc, #24]	; (bba0 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x2c>)
    bb88:	e002      	b.n	bb90 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x1c>
    bb8a:	1f00      	subs	r0, r0, #4
    bb8c:	4905      	ldr	r1, [pc, #20]	; (bba4 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x30>)
    bb8e:	b2c0      	uxtb	r0, r0
    bb90:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    bb94:	bd10      	pop	{r4, pc}
    bb96:	f240 319e 	movw	r1, #926	; 0x39e
    bb9a:	206c      	movs	r0, #108	; 0x6c
    bb9c:	f000 fbfc 	bl	c398 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bba0:	40008140 	.word	0x40008140
    bba4:	4000b140 	.word	0x4000b140

0000bba8 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>:
    bba8:	b510      	push	{r4, lr}
    bbaa:	2807      	cmp	r0, #7
    bbac:	d20d      	bcs.n	bbca <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x22>
    bbae:	e8df f000 	tbb	[pc, r0]
    bbb2:	0404      	.short	0x0404
    bbb4:	06060404 	.word	0x06060404
    bbb8:	0006      	.short	0x0006
    bbba:	4906      	ldr	r1, [pc, #24]	; (bbd4 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x2c>)
    bbbc:	e002      	b.n	bbc4 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x1c>
    bbbe:	1f00      	subs	r0, r0, #4
    bbc0:	4905      	ldr	r1, [pc, #20]	; (bbd8 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x30>)
    bbc2:	b2c0      	uxtb	r0, r0
    bbc4:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    bbc8:	bd10      	pop	{r4, pc}
    bbca:	f240 319e 	movw	r1, #926	; 0x39e
    bbce:	206c      	movs	r0, #108	; 0x6c
    bbd0:	f000 fbe2 	bl	c398 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bbd4:	40008140 	.word	0x40008140
    bbd8:	4000b140 	.word	0x4000b140

0000bbdc <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    bbdc:	b570      	push	{r4, r5, r6, lr}
    bbde:	481f      	ldr	r0, [pc, #124]	; (bc5c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x80>)
    bbe0:	2400      	movs	r4, #0
    bbe2:	2104      	movs	r1, #4
    bbe4:	7004      	strb	r4, [r0, #0]
    bbe6:	1e80      	subs	r0, r0, #2
    bbe8:	7001      	strb	r1, [r0, #0]
    bbea:	0589      	lsls	r1, r1, #22
    bbec:	60c4      	str	r4, [r0, #12]
    bbee:	6081      	str	r1, [r0, #8]
    bbf0:	f7ff fc54 	bl	b49c <MPSL_IRQ_TIMER0_Handler+0x100>
    bbf4:	2501      	movs	r5, #1
    bbf6:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    bbfa:	02eb      	lsls	r3, r5, #11
    bbfc:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
    bc00:	f3bf 8f4f 	dsb	sy
    bc04:	f3bf 8f6f 	isb	sy
    bc08:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
    bc0c:	4814      	ldr	r0, [pc, #80]	; (bc60 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x84>)
    bc0e:	6045      	str	r5, [r0, #4]
    bc10:	6085      	str	r5, [r0, #8]
    bc12:	4914      	ldr	r1, [pc, #80]	; (bc64 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x88>)
    bc14:	680a      	ldr	r2, [r1, #0]
    bc16:	2a00      	cmp	r2, #0
    bc18:	d1fc      	bne.n	bc14 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x38>
    bc1a:	1e51      	subs	r1, r2, #1
    bc1c:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    bc20:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    bc24:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    bc28:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    bc2c:	490e      	ldr	r1, [pc, #56]	; (bc68 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x8c>)
    bc2e:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    bc32:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    bc36:	1d09      	adds	r1, r1, #4
    bc38:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    bc3c:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    bc40:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
    bc44:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
    bc48:	6005      	str	r5, [r0, #0]
    bc4a:	f44f 7182 	mov.w	r1, #260	; 0x104
    bc4e:	f8c0 1344 	str.w	r1, [r0, #836]	; 0x344
    bc52:	2102      	movs	r1, #2
    bc54:	f8c0 1304 	str.w	r1, [r0, #772]	; 0x304
    bc58:	bd70      	pop	{r4, r5, r6, pc}
    bc5a:	0000      	.short	0x0000
    bc5c:	200002de 	.word	0x200002de
    bc60:	4000b000 	.word	0x4000b000
    bc64:	4000b504 	.word	0x4000b504
    bc68:	4000b004 	.word	0x4000b004

0000bc6c <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>:
    bc6c:	4808      	ldr	r0, [pc, #32]	; (bc90 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ+0x24>)
    bc6e:	f990 0000 	ldrsb.w	r0, [r0]
    bc72:	2800      	cmp	r0, #0
    bc74:	bfb8      	it	lt
    bc76:	4770      	bxlt	lr
    bc78:	f000 011f 	and.w	r1, r0, #31
    bc7c:	2201      	movs	r2, #1
    bc7e:	fa02 f101 	lsl.w	r1, r2, r1
    bc82:	0940      	lsrs	r0, r0, #5
    bc84:	0080      	lsls	r0, r0, #2
    bc86:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    bc8a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    bc8e:	4770      	bx	lr
    bc90:	2000036a 	.word	0x2000036a

0000bc94 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>:
    bc94:	4803      	ldr	r0, [pc, #12]	; (bca4 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI+0x10>)
    bc96:	7800      	ldrb	r0, [r0, #0]
    bc98:	2803      	cmp	r0, #3
    bc9a:	bf0c      	ite	eq
    bc9c:	2001      	moveq	r0, #1
    bc9e:	2000      	movne	r0, #0
    bca0:	4770      	bx	lr
    bca2:	0000      	.short	0x0000
    bca4:	2000033c 	.word	0x2000033c

0000bca8 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>:
    bca8:	4801      	ldr	r0, [pc, #4]	; (bcb0 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII+0x8>)
    bcaa:	8840      	ldrh	r0, [r0, #2]
    bcac:	4770      	bx	lr
    bcae:	0000      	.short	0x0000
    bcb0:	2000033c 	.word	0x2000033c

0000bcb4 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>:
    bcb4:	4803      	ldr	r0, [pc, #12]	; (bcc4 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI+0x10>)
    bcb6:	7800      	ldrb	r0, [r0, #0]
    bcb8:	2802      	cmp	r0, #2
    bcba:	bf16      	itet	ne
    bcbc:	2803      	cmpne	r0, #3
    bcbe:	2001      	moveq	r0, #1
    bcc0:	2000      	movne	r0, #0
    bcc2:	4770      	bx	lr
    bcc4:	2000033c 	.word	0x2000033c

0000bcc8 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>:
    bcc8:	4802      	ldr	r0, [pc, #8]	; (bcd4 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY+0xc>)
    bcca:	2100      	movs	r1, #0
    bccc:	7001      	strb	r1, [r0, #0]
    bcce:	8041      	strh	r1, [r0, #2]
    bcd0:	4770      	bx	lr
    bcd2:	0000      	.short	0x0000
    bcd4:	2000033c 	.word	0x2000033c

0000bcd8 <MPSL_IRQ_CLOCK_Handler>:
    bcd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bcdc:	4c16      	ldr	r4, [pc, #88]	; (bd38 <MPSL_IRQ_CLOCK_Handler+0x60>)
    bcde:	7a60      	ldrb	r0, [r4, #9]
    bce0:	2800      	cmp	r0, #0
    bce2:	d027      	beq.n	bd34 <MPSL_IRQ_CLOCK_Handler+0x5c>
    bce4:	f44f 7180 	mov.w	r1, #256	; 0x100
    bce8:	058d      	lsls	r5, r1, #22
    bcea:	4628      	mov	r0, r5
    bcec:	f004 fb77 	bl	103de <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    bcf0:	4680      	mov	r8, r0
    bcf2:	f44f 7182 	mov.w	r1, #260	; 0x104
    bcf6:	4628      	mov	r0, r5
    bcf8:	f004 fb71 	bl	103de <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    bcfc:	2600      	movs	r6, #0
    bcfe:	4607      	mov	r7, r0
    bd00:	f1b8 0f00 	cmp.w	r8, #0
    bd04:	d009      	beq.n	bd1a <MPSL_IRQ_CLOCK_Handler+0x42>
    bd06:	2001      	movs	r0, #1
    bd08:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    bd0c:	7920      	ldrb	r0, [r4, #4]
    bd0e:	b120      	cbz	r0, bd1a <MPSL_IRQ_CLOCK_Handler+0x42>
    bd10:	7126      	strb	r6, [r4, #4]
    bd12:	69e0      	ldr	r0, [r4, #28]
    bd14:	b108      	cbz	r0, bd1a <MPSL_IRQ_CLOCK_Handler+0x42>
    bd16:	4780      	blx	r0
    bd18:	61e6      	str	r6, [r4, #28]
    bd1a:	b137      	cbz	r7, bd2a <MPSL_IRQ_CLOCK_Handler+0x52>
    bd1c:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    bd20:	2002      	movs	r0, #2
    bd22:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    bd26:	f000 fa57 	bl	c1d8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    bd2a:	4640      	mov	r0, r8
    bd2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    bd30:	f000 b858 	b.w	bde4 <MPSL_IRQ_CLOCK_Handler+0x10c>
    bd34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bd38:	200002ec 	.word	0x200002ec
    bd3c:	b510      	push	{r4, lr}
    bd3e:	f004 fbf8 	bl	10532 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    bd42:	b930      	cbnz	r0, bd52 <MPSL_IRQ_CLOCK_Handler+0x7a>
    bd44:	f004 fc16 	bl	10574 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    bd48:	b918      	cbnz	r0, bd52 <MPSL_IRQ_CLOCK_Handler+0x7a>
    bd4a:	f004 fc49 	bl	105e0 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    bd4e:	2800      	cmp	r0, #0
    bd50:	d002      	beq.n	bd58 <MPSL_IRQ_CLOCK_Handler+0x80>
    bd52:	4902      	ldr	r1, [pc, #8]	; (bd5c <MPSL_IRQ_CLOCK_Handler+0x84>)
    bd54:	2002      	movs	r0, #2
    bd56:	6008      	str	r0, [r1, #0]
    bd58:	bd10      	pop	{r4, pc}
    bd5a:	0000      	.short	0x0000
    bd5c:	40000c34 	.word	0x40000c34
    bd60:	b570      	push	{r4, r5, r6, lr}
    bd62:	f000 f99b 	bl	c09c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    bd66:	f000 fa9f 	bl	c2a8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    bd6a:	4c09      	ldr	r4, [pc, #36]	; (bd90 <MPSL_IRQ_CLOCK_Handler+0xb8>)
    bd6c:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    bd70:	b130      	cbz	r0, bd80 <MPSL_IRQ_CLOCK_Handler+0xa8>
    bd72:	f7ff ffe3 	bl	bd3c <MPSL_IRQ_CLOCK_Handler+0x64>
    bd76:	2001      	movs	r0, #1
    bd78:	6128      	str	r0, [r5, #16]
    bd7a:	2004      	movs	r0, #4
    bd7c:	72a0      	strb	r0, [r4, #10]
    bd7e:	e004      	b.n	bd8a <MPSL_IRQ_CLOCK_Handler+0xb2>
    bd80:	2003      	movs	r0, #3
    bd82:	72a0      	strb	r0, [r4, #10]
    bd84:	2001      	movs	r0, #1
    bd86:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    bd8a:	2000      	movs	r0, #0
    bd8c:	71e0      	strb	r0, [r4, #7]
    bd8e:	bd70      	pop	{r4, r5, r6, pc}
    bd90:	200002ec 	.word	0x200002ec
    bd94:	b570      	push	{r4, r5, r6, lr}
    bd96:	4c12      	ldr	r4, [pc, #72]	; (bde0 <MPSL_IRQ_CLOCK_Handler+0x108>)
    bd98:	79a0      	ldrb	r0, [r4, #6]
    bd9a:	b1e0      	cbz	r0, bdd6 <MPSL_IRQ_CLOCK_Handler+0xfe>
    bd9c:	79e1      	ldrb	r1, [r4, #7]
    bd9e:	1e40      	subs	r0, r0, #1
    bda0:	4281      	cmp	r1, r0
    bda2:	da18      	bge.n	bdd6 <MPSL_IRQ_CLOCK_Handler+0xfe>
    bda4:	f000 fa80 	bl	c2a8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    bda8:	4605      	mov	r5, r0
    bdaa:	f000 fb69 	bl	c480 <mpsl_temperature_get>
    bdae:	79a1      	ldrb	r1, [r4, #6]
    bdb0:	2901      	cmp	r1, #1
    bdb2:	d902      	bls.n	bdba <MPSL_IRQ_CLOCK_Handler+0xe2>
    bdb4:	79e1      	ldrb	r1, [r4, #7]
    bdb6:	1c49      	adds	r1, r1, #1
    bdb8:	71e1      	strb	r1, [r4, #7]
    bdba:	b10d      	cbz	r5, bdc0 <MPSL_IRQ_CLOCK_Handler+0xe8>
    bdbc:	6961      	ldr	r1, [r4, #20]
    bdbe:	e000      	b.n	bdc2 <MPSL_IRQ_CLOCK_Handler+0xea>
    bdc0:	6921      	ldr	r1, [r4, #16]
    bdc2:	1a41      	subs	r1, r0, r1
    bdc4:	2902      	cmp	r1, #2
    bdc6:	da02      	bge.n	bdce <MPSL_IRQ_CLOCK_Handler+0xf6>
    bdc8:	f111 0f02 	cmn.w	r1, #2
    bdcc:	dc07      	bgt.n	bdde <MPSL_IRQ_CLOCK_Handler+0x106>
    bdce:	b10d      	cbz	r5, bdd4 <MPSL_IRQ_CLOCK_Handler+0xfc>
    bdd0:	6160      	str	r0, [r4, #20]
    bdd2:	e000      	b.n	bdd6 <MPSL_IRQ_CLOCK_Handler+0xfe>
    bdd4:	6120      	str	r0, [r4, #16]
    bdd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    bdda:	f7ff bfc1 	b.w	bd60 <MPSL_IRQ_CLOCK_Handler+0x88>
    bdde:	bd70      	pop	{r4, r5, r6, pc}
    bde0:	200002ec 	.word	0x200002ec
    bde4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bde8:	4606      	mov	r6, r0
    bdea:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    bdee:	f44f 7186 	mov.w	r1, #268	; 0x10c
    bdf2:	4628      	mov	r0, r5
    bdf4:	f004 faf3 	bl	103de <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    bdf8:	4680      	mov	r8, r0
    bdfa:	f44f 7188 	mov.w	r1, #272	; 0x110
    bdfe:	4628      	mov	r0, r5
    be00:	f004 faed 	bl	103de <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    be04:	4c27      	ldr	r4, [pc, #156]	; (bea4 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    be06:	4682      	mov	sl, r0
    be08:	7827      	ldrb	r7, [r4, #0]
    be0a:	f104 0008 	add.w	r0, r4, #8
    be0e:	f004 fb5a 	bl	104c6 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    be12:	b110      	cbz	r0, be1a <MPSL_IRQ_CLOCK_Handler+0x142>
    be14:	f44f 71db 	mov.w	r1, #438	; 0x1b6
    be18:	e016      	b.n	be48 <MPSL_IRQ_CLOCK_Handler+0x170>
    be1a:	f04f 0901 	mov.w	r9, #1
    be1e:	b146      	cbz	r6, be32 <MPSL_IRQ_CLOCK_Handler+0x15a>
    be20:	7aa0      	ldrb	r0, [r4, #10]
    be22:	2803      	cmp	r0, #3
    be24:	d105      	bne.n	be32 <MPSL_IRQ_CLOCK_Handler+0x15a>
    be26:	2004      	movs	r0, #4
    be28:	72a0      	strb	r0, [r4, #10]
    be2a:	f7ff ff87 	bl	bd3c <MPSL_IRQ_CLOCK_Handler+0x64>
    be2e:	f8c5 9010 	str.w	r9, [r5, #16]
    be32:	2600      	movs	r6, #0
    be34:	f1b8 0f00 	cmp.w	r8, #0
    be38:	d018      	beq.n	be6c <MPSL_IRQ_CLOCK_Handler+0x194>
    be3a:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    be3e:	7aa0      	ldrb	r0, [r4, #10]
    be40:	2804      	cmp	r0, #4
    be42:	d004      	beq.n	be4e <MPSL_IRQ_CLOCK_Handler+0x176>
    be44:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    be48:	206d      	movs	r0, #109	; 0x6d
    be4a:	f000 faa5 	bl	c398 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    be4e:	f004 fb70 	bl	10532 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    be52:	b928      	cbnz	r0, be60 <MPSL_IRQ_CLOCK_Handler+0x188>
    be54:	f004 fb8e 	bl	10574 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    be58:	b910      	cbnz	r0, be60 <MPSL_IRQ_CLOCK_Handler+0x188>
    be5a:	f004 fbc1 	bl	105e0 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    be5e:	b108      	cbz	r0, be64 <MPSL_IRQ_CLOCK_Handler+0x18c>
    be60:	4811      	ldr	r0, [pc, #68]	; (bea8 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    be62:	6006      	str	r6, [r0, #0]
    be64:	2002      	movs	r0, #2
    be66:	72a0      	strb	r0, [r4, #10]
    be68:	f000 f8fc 	bl	c064 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    be6c:	f1ba 0f00 	cmp.w	sl, #0
    be70:	d008      	beq.n	be84 <MPSL_IRQ_CLOCK_Handler+0x1ac>
    be72:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    be76:	7aa0      	ldrb	r0, [r4, #10]
    be78:	2802      	cmp	r0, #2
    be7a:	d101      	bne.n	be80 <MPSL_IRQ_CLOCK_Handler+0x1a8>
    be7c:	f7ff ff8a 	bl	bd94 <MPSL_IRQ_CLOCK_Handler+0xbc>
    be80:	f8c5 9014 	str.w	r9, [r5, #20]
    be84:	b13f      	cbz	r7, be96 <MPSL_IRQ_CLOCK_Handler+0x1be>
    be86:	7026      	strb	r6, [r4, #0]
    be88:	7aa0      	ldrb	r0, [r4, #10]
    be8a:	2802      	cmp	r0, #2
    be8c:	d101      	bne.n	be92 <MPSL_IRQ_CLOCK_Handler+0x1ba>
    be8e:	f7ff ff67 	bl	bd60 <MPSL_IRQ_CLOCK_Handler+0x88>
    be92:	f000 f8e7 	bl	c064 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    be96:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    be9a:	4802      	ldr	r0, [pc, #8]	; (bea4 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    be9c:	3008      	adds	r0, #8
    be9e:	f004 bb29 	b.w	104f4 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    bea2:	0000      	.short	0x0000
    bea4:	200002ec 	.word	0x200002ec
    bea8:	40000c34 	.word	0x40000c34
    beac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    beb0:	4c49      	ldr	r4, [pc, #292]	; (bfd8 <MPSL_IRQ_CLOCK_Handler+0x300>)
    beb2:	2700      	movs	r7, #0
    beb4:	4606      	mov	r6, r0
    beb6:	61a7      	str	r7, [r4, #24]
    beb8:	7842      	ldrb	r2, [r0, #1]
    beba:	7881      	ldrb	r1, [r0, #2]
    bebc:	7800      	ldrb	r0, [r0, #0]
    bebe:	72e0      	strb	r0, [r4, #11]
    bec0:	7162      	strb	r2, [r4, #5]
    bec2:	71a1      	strb	r1, [r4, #6]
    bec4:	71e7      	strb	r7, [r4, #7]
    bec6:	f04f 0801 	mov.w	r8, #1
    beca:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    bece:	2805      	cmp	r0, #5
    bed0:	d225      	bcs.n	bf1e <MPSL_IRQ_CLOCK_Handler+0x246>
    bed2:	e8df f000 	tbb	[pc, r0]
    bed6:	0310      	.short	0x0310
    bed8:	00222006 	.word	0x00222006
    bedc:	f8c4 8018 	str.w	r8, [r4, #24]
    bee0:	e009      	b.n	bef6 <MPSL_IRQ_CLOCK_Handler+0x21e>
    bee2:	f000 f8db 	bl	c09c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    bee6:	2101      	movs	r1, #1
    bee8:	4628      	mov	r0, r5
    beea:	f004 fa7d 	bl	103e8 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    beee:	2800      	cmp	r0, #0
    bef0:	d0f9      	beq.n	bee6 <MPSL_IRQ_CLOCK_Handler+0x20e>
    bef2:	2002      	movs	r0, #2
    bef4:	61a0      	str	r0, [r4, #24]
    bef6:	f004 faa3 	bl	10440 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    befa:	b1c0      	cbz	r0, bf2e <MPSL_IRQ_CLOCK_Handler+0x256>
    befc:	f000 f9ee 	bl	c2dc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    bf00:	7e21      	ldrb	r1, [r4, #24]
    bf02:	f001 0103 	and.w	r1, r1, #3
    bf06:	4288      	cmp	r0, r1
    bf08:	d111      	bne.n	bf2e <MPSL_IRQ_CLOCK_Handler+0x256>
    bf0a:	79b0      	ldrb	r0, [r6, #6]
    bf0c:	b160      	cbz	r0, bf28 <MPSL_IRQ_CLOCK_Handler+0x250>
    bf0e:	2002      	movs	r0, #2
    bf10:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    bf14:	e044      	b.n	bfa0 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    bf16:	4831      	ldr	r0, [pc, #196]	; (bfdc <MPSL_IRQ_CLOCK_Handler+0x304>)
    bf18:	e7ec      	b.n	bef4 <MPSL_IRQ_CLOCK_Handler+0x21c>
    bf1a:	4831      	ldr	r0, [pc, #196]	; (bfe0 <MPSL_IRQ_CLOCK_Handler+0x308>)
    bf1c:	e7ea      	b.n	bef4 <MPSL_IRQ_CLOCK_Handler+0x21c>
    bf1e:	f240 313d 	movw	r1, #829	; 0x33d
    bf22:	206d      	movs	r0, #109	; 0x6d
    bf24:	f000 fa38 	bl	c398 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bf28:	f000 f9ac 	bl	c284 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    bf2c:	e038      	b.n	bfa0 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    bf2e:	f8c5 800c 	str.w	r8, [r5, #12]
    bf32:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    bf36:	69a0      	ldr	r0, [r4, #24]
    bf38:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    bf3c:	f004 fae5 	bl	1050a <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    bf40:	b940      	cbnz	r0, bf54 <MPSL_IRQ_CLOCK_Handler+0x27c>
    bf42:	f004 faec 	bl	1051e <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    bf46:	b928      	cbnz	r0, bf54 <MPSL_IRQ_CLOCK_Handler+0x27c>
    bf48:	f004 fb00 	bl	1054c <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    bf4c:	b910      	cbnz	r0, bf54 <MPSL_IRQ_CLOCK_Handler+0x27c>
    bf4e:	f004 fb11 	bl	10574 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    bf52:	b138      	cbz	r0, bf64 <MPSL_IRQ_CLOCK_Handler+0x28c>
    bf54:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    bf58:	f8d0 0244 	ldr.w	r0, [r0, #580]	; 0x244
    bf5c:	4921      	ldr	r1, [pc, #132]	; (bfe4 <MPSL_IRQ_CLOCK_Handler+0x30c>)
    bf5e:	f3c0 3042 	ubfx	r0, r0, #13, #3
    bf62:	6008      	str	r0, [r1, #0]
    bf64:	f004 fad1 	bl	1050a <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    bf68:	b940      	cbnz	r0, bf7c <MPSL_IRQ_CLOCK_Handler+0x2a4>
    bf6a:	f004 fad8 	bl	1051e <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    bf6e:	b928      	cbnz	r0, bf7c <MPSL_IRQ_CLOCK_Handler+0x2a4>
    bf70:	f004 faec 	bl	1054c <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    bf74:	b910      	cbnz	r0, bf7c <MPSL_IRQ_CLOCK_Handler+0x2a4>
    bf76:	f004 fafd 	bl	10574 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    bf7a:	b118      	cbz	r0, bf84 <MPSL_IRQ_CLOCK_Handler+0x2ac>
    bf7c:	4919      	ldr	r1, [pc, #100]	; (bfe4 <MPSL_IRQ_CLOCK_Handler+0x30c>)
    bf7e:	3110      	adds	r1, #16
    bf80:	f8c1 8000 	str.w	r8, [r1]
    bf84:	f8c5 8008 	str.w	r8, [r5, #8]
    bf88:	2002      	movs	r0, #2
    bf8a:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    bf8e:	79b0      	ldrb	r0, [r6, #6]
    bf90:	b930      	cbnz	r0, bfa0 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    bf92:	f000 f829 	bl	bfe8 <MPSL_IRQ_CLOCK_Handler+0x310>
    bf96:	2002      	movs	r0, #2
    bf98:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    bf9c:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    bfa0:	79a0      	ldrb	r0, [r4, #6]
    bfa2:	b170      	cbz	r0, bfc2 <MPSL_IRQ_CLOCK_Handler+0x2ea>
    bfa4:	7830      	ldrb	r0, [r6, #0]
    bfa6:	b960      	cbnz	r0, bfc2 <MPSL_IRQ_CLOCK_Handler+0x2ea>
    bfa8:	f000 f97e 	bl	c2a8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    bfac:	4606      	mov	r6, r0
    bfae:	f000 fa67 	bl	c480 <mpsl_temperature_get>
    bfb2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    bfb6:	b116      	cbz	r6, bfbe <MPSL_IRQ_CLOCK_Handler+0x2e6>
    bfb8:	e9c4 1004 	strd	r1, r0, [r4, #16]
    bfbc:	e001      	b.n	bfc2 <MPSL_IRQ_CLOCK_Handler+0x2ea>
    bfbe:	e9c4 0104 	strd	r0, r1, [r4, #16]
    bfc2:	2101      	movs	r1, #1
    bfc4:	4628      	mov	r0, r5
    bfc6:	f004 fa0f 	bl	103e8 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    bfca:	b108      	cbz	r0, bfd0 <MPSL_IRQ_CLOCK_Handler+0x2f8>
    bfcc:	f000 f966 	bl	c29c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    bfd0:	72a7      	strb	r7, [r4, #10]
    bfd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bfd6:	0000      	.short	0x0000
    bfd8:	200002ec 	.word	0x200002ec
    bfdc:	00020001 	.word	0x00020001
    bfe0:	00030001 	.word	0x00030001
    bfe4:	4000053c 	.word	0x4000053c
    bfe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bfec:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    bff0:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    bff4:	f010 0f02 	tst.w	r0, #2
    bff8:	d011      	beq.n	c01e <MPSL_IRQ_CLOCK_Handler+0x346>
    bffa:	4c16      	ldr	r4, [pc, #88]	; (c054 <MPSL_IRQ_CLOCK_Handler+0x37c>)
    bffc:	6820      	ldr	r0, [r4, #0]
    bffe:	43c0      	mvns	r0, r0
    c000:	f340 1600 	sbfx	r6, r0, #4, #1
    c004:	6820      	ldr	r0, [r4, #0]
    c006:	f040 0010 	orr.w	r0, r0, #16
    c00a:	6020      	str	r0, [r4, #0]
    c00c:	f44f 7782 	mov.w	r7, #260	; 0x104
    c010:	4639      	mov	r1, r7
    c012:	4628      	mov	r0, r5
    c014:	1c76      	adds	r6, r6, #1
    c016:	f004 f9e2 	bl	103de <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    c01a:	b128      	cbz	r0, c028 <MPSL_IRQ_CLOCK_Handler+0x350>
    c01c:	e00a      	b.n	c034 <MPSL_IRQ_CLOCK_Handler+0x35c>
    c01e:	f44f 713e 	mov.w	r1, #760	; 0x2f8
    c022:	206d      	movs	r0, #109	; 0x6d
    c024:	f000 f9b8 	bl	c398 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c028:	f004 fae6 	bl	105f8 <sym_PHK7RXLFFTGYQNCW3IEEUVLOAYXWQJQYEN3DT7Y>
    c02c:	e002      	b.n	c034 <MPSL_IRQ_CLOCK_Handler+0x35c>
    c02e:	bf00      	nop
    c030:	f004 fae0 	bl	105f4 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    c034:	4639      	mov	r1, r7
    c036:	4628      	mov	r0, r5
    c038:	f004 f9d1 	bl	103de <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    c03c:	2800      	cmp	r0, #0
    c03e:	d0f7      	beq.n	c030 <MPSL_IRQ_CLOCK_Handler+0x358>
    c040:	f000 f920 	bl	c284 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    c044:	2e00      	cmp	r6, #0
    c046:	d103      	bne.n	c050 <MPSL_IRQ_CLOCK_Handler+0x378>
    c048:	6820      	ldr	r0, [r4, #0]
    c04a:	f020 0010 	bic.w	r0, r0, #16
    c04e:	6020      	str	r0, [r4, #0]
    c050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c054:	e000ed10 	.word	0xe000ed10

0000c058 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>:
    c058:	4801      	ldr	r0, [pc, #4]	; (c060 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q+0x8>)
    c05a:	89c0      	ldrh	r0, [r0, #14]
    c05c:	4770      	bx	lr
    c05e:	0000      	.short	0x0000
    c060:	200002ec 	.word	0x200002ec

0000c064 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    c064:	b510      	push	{r4, lr}
    c066:	f3ef 8410 	mrs	r4, PRIMASK
    c06a:	b672      	cpsid	i
    c06c:	480a      	ldr	r0, [pc, #40]	; (c098 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    c06e:	7841      	ldrb	r1, [r0, #1]
    c070:	b129      	cbz	r1, c07e <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    c072:	7841      	ldrb	r1, [r0, #1]
    c074:	1e49      	subs	r1, r1, #1
    c076:	7041      	strb	r1, [r0, #1]
    c078:	7841      	ldrb	r1, [r0, #1]
    c07a:	b129      	cbz	r1, c088 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    c07c:	e008      	b.n	c090 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    c07e:	f240 1119 	movw	r1, #281	; 0x119
    c082:	206d      	movs	r0, #109	; 0x6d
    c084:	f000 f988 	bl	c398 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c088:	7880      	ldrb	r0, [r0, #2]
    c08a:	b908      	cbnz	r0, c090 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    c08c:	f000 f91a 	bl	c2c4 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    c090:	2c00      	cmp	r4, #0
    c092:	d100      	bne.n	c096 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    c094:	b662      	cpsie	i
    c096:	bd10      	pop	{r4, pc}
    c098:	200002ec 	.word	0x200002ec

0000c09c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    c09c:	b510      	push	{r4, lr}
    c09e:	f3ef 8410 	mrs	r4, PRIMASK
    c0a2:	b672      	cpsid	i
    c0a4:	4806      	ldr	r0, [pc, #24]	; (c0c0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    c0a6:	7841      	ldrb	r1, [r0, #1]
    c0a8:	1c49      	adds	r1, r1, #1
    c0aa:	7041      	strb	r1, [r0, #1]
    c0ac:	7840      	ldrb	r0, [r0, #1]
    c0ae:	2801      	cmp	r0, #1
    c0b0:	d101      	bne.n	c0b6 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    c0b2:	f004 f9b0 	bl	10416 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    c0b6:	2c00      	cmp	r4, #0
    c0b8:	d100      	bne.n	c0bc <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    c0ba:	b662      	cpsie	i
    c0bc:	bd10      	pop	{r4, pc}
    c0be:	0000      	.short	0x0000
    c0c0:	200002ec 	.word	0x200002ec

0000c0c4 <mpsl_clock_hfclk_release>:
    c0c4:	4805      	ldr	r0, [pc, #20]	; (c0dc <mpsl_clock_hfclk_release+0x18>)
    c0c6:	b510      	push	{r4, lr}
    c0c8:	78c1      	ldrb	r1, [r0, #3]
    c0ca:	b121      	cbz	r1, c0d6 <mpsl_clock_hfclk_release+0x12>
    c0cc:	2100      	movs	r1, #0
    c0ce:	7101      	strb	r1, [r0, #4]
    c0d0:	70c1      	strb	r1, [r0, #3]
    c0d2:	f7ff ffc7 	bl	c064 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    c0d6:	2000      	movs	r0, #0
    c0d8:	bd10      	pop	{r4, pc}
    c0da:	0000      	.short	0x0000
    c0dc:	200002ec 	.word	0x200002ec

0000c0e0 <mpsl_clock_hfclk_request>:
    c0e0:	b570      	push	{r4, r5, r6, lr}
    c0e2:	4c0c      	ldr	r4, [pc, #48]	; (c114 <mpsl_clock_hfclk_request+0x34>)
    c0e4:	78e1      	ldrb	r1, [r4, #3]
    c0e6:	b961      	cbnz	r1, c102 <mpsl_clock_hfclk_request+0x22>
    c0e8:	2501      	movs	r5, #1
    c0ea:	70e5      	strb	r5, [r4, #3]
    c0ec:	61e0      	str	r0, [r4, #28]
    c0ee:	f7ff ffd5 	bl	c09c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    c0f2:	f000 f8d9 	bl	c2a8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    c0f6:	b130      	cbz	r0, c106 <mpsl_clock_hfclk_request+0x26>
    c0f8:	69e0      	ldr	r0, [r4, #28]
    c0fa:	b110      	cbz	r0, c102 <mpsl_clock_hfclk_request+0x22>
    c0fc:	4780      	blx	r0
    c0fe:	2000      	movs	r0, #0
    c100:	61e0      	str	r0, [r4, #28]
    c102:	2000      	movs	r0, #0
    c104:	bd70      	pop	{r4, r5, r6, pc}
    c106:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c10a:	7125      	strb	r5, [r4, #4]
    c10c:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    c110:	e7f7      	b.n	c102 <mpsl_clock_hfclk_request+0x22>
    c112:	0000      	.short	0x0000
    c114:	200002ec 	.word	0x200002ec

0000c118 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    c118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c11c:	0005      	movs	r5, r0
    c11e:	f06f 0015 	mvn.w	r0, #21
    c122:	d03f      	beq.n	c1a4 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c124:	7829      	ldrb	r1, [r5, #0]
    c126:	2904      	cmp	r1, #4
    c128:	d83c      	bhi.n	c1a4 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c12a:	2900      	cmp	r1, #0
    c12c:	7869      	ldrb	r1, [r5, #1]
    c12e:	d03b      	beq.n	c1a8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x90>
    c130:	2900      	cmp	r1, #0
    c132:	d137      	bne.n	c1a4 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c134:	78a9      	ldrb	r1, [r5, #2]
    c136:	2900      	cmp	r1, #0
    c138:	d134      	bne.n	c1a4 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c13a:	2000      	movs	r0, #0
    c13c:	f004 f93e 	bl	103bc <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x34>
    c140:	2000      	movs	r0, #0
    c142:	f004 f92e 	bl	103a2 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    c146:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    c14a:	f04f 31ff 	mov.w	r1, #4294967295
    c14e:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    c152:	2600      	movs	r6, #0
    c154:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    c158:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    c15c:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    c160:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    c164:	4c14      	ldr	r4, [pc, #80]	; (c1b8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    c166:	7066      	strb	r6, [r4, #1]
    c168:	88a8      	ldrh	r0, [r5, #4]
    c16a:	81a0      	strh	r0, [r4, #12]
    c16c:	f004 f94a 	bl	10404 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    c170:	2701      	movs	r7, #1
    c172:	b108      	cbz	r0, c178 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    c174:	70e7      	strb	r7, [r4, #3]
    c176:	7067      	strb	r7, [r4, #1]
    c178:	2101      	movs	r1, #1
    c17a:	4640      	mov	r0, r8
    c17c:	f004 f934 	bl	103e8 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    c180:	b108      	cbz	r0, c186 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    c182:	f000 f88b 	bl	c29c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    c186:	f240 50f5 	movw	r0, #1525	; 0x5f5
    c18a:	81e0      	strh	r0, [r4, #14]
    c18c:	4628      	mov	r0, r5
    c18e:	f7ff fe8d 	bl	beac <MPSL_IRQ_CLOCK_Handler+0x1d4>
    c192:	7267      	strb	r7, [r4, #9]
    c194:	2000      	movs	r0, #0
    c196:	f004 f904 	bl	103a2 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    c19a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    c19e:	4630      	mov	r0, r6
    c1a0:	f8c1 7100 	str.w	r7, [r1, #256]	; 0x100
    c1a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c1a8:	2900      	cmp	r1, #0
    c1aa:	d0fb      	beq.n	c1a4 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c1ac:	2920      	cmp	r1, #32
    c1ae:	d8f9      	bhi.n	c1a4 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c1b0:	78a9      	ldrb	r1, [r5, #2]
    c1b2:	2921      	cmp	r1, #33	; 0x21
    c1b4:	d9c1      	bls.n	c13a <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    c1b6:	e7f5      	b.n	c1a4 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c1b8:	200002ec 	.word	0x200002ec

0000c1bc <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    c1bc:	4801      	ldr	r0, [pc, #4]	; (c1c4 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    c1be:	8980      	ldrh	r0, [r0, #12]
    c1c0:	4770      	bx	lr
    c1c2:	0000      	.short	0x0000
    c1c4:	200002ec 	.word	0x200002ec

0000c1c8 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    c1c8:	4802      	ldr	r0, [pc, #8]	; (c1d4 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    c1ca:	7a80      	ldrb	r0, [r0, #10]
    c1cc:	2800      	cmp	r0, #0
    c1ce:	d000      	beq.n	c1d2 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    c1d0:	2001      	movs	r0, #1
    c1d2:	4770      	bx	lr
    c1d4:	200002ec 	.word	0x200002ec

0000c1d8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    c1d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c1da:	4d1f      	ldr	r5, [pc, #124]	; (c258 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    c1dc:	7ae8      	ldrb	r0, [r5, #11]
    c1de:	2800      	cmp	r0, #0
    c1e0:	d10f      	bne.n	c202 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    c1e2:	7e28      	ldrb	r0, [r5, #24]
    c1e4:	f000 0003 	and.w	r0, r0, #3
    c1e8:	f004 f91a 	bl	10420 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    c1ec:	2800      	cmp	r0, #0
    c1ee:	d008      	beq.n	c202 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    c1f0:	f3ef 8110 	mrs	r1, PRIMASK
    c1f4:	b672      	cpsid	i
    c1f6:	f7ff ffe7 	bl	c1c8 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    c1fa:	b118      	cbz	r0, c204 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    c1fc:	2900      	cmp	r1, #0
    c1fe:	d100      	bne.n	c202 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    c200:	b662      	cpsie	i
    c202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c204:	2601      	movs	r6, #1
    c206:	72ae      	strb	r6, [r5, #10]
    c208:	b901      	cbnz	r1, c20c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    c20a:	b662      	cpsie	i
    c20c:	2018      	movs	r0, #24
    c20e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    c212:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    c216:	61a6      	str	r6, [r4, #24]
    c218:	f44f 7020 	mov.w	r0, #640	; 0x280
    c21c:	f8ad 0000 	strh.w	r0, [sp]
    c220:	f8bd 0000 	ldrh.w	r0, [sp]
    c224:	1e41      	subs	r1, r0, #1
    c226:	f8ad 1000 	strh.w	r1, [sp]
    c22a:	d2f9      	bcs.n	c220 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    c22c:	2700      	movs	r7, #0
    c22e:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    c232:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    c236:	4808      	ldr	r0, [pc, #32]	; (c258 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    c238:	3008      	adds	r0, #8
    c23a:	f004 f957 	bl	104ec <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    c23e:	702f      	strb	r7, [r5, #0]
    c240:	f7ff fd8e 	bl	bd60 <MPSL_IRQ_CLOCK_Handler+0x88>
    c244:	6166      	str	r6, [r4, #20]
    c246:	7968      	ldrb	r0, [r5, #5]
    c248:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    c24c:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    c250:	2018      	movs	r0, #24
    c252:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    c256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c258:	200002ec 	.word	0x200002ec

0000c25c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    c25c:	4602      	mov	r2, r0
    c25e:	b510      	push	{r4, lr}
    c260:	2000      	movs	r0, #0
    c262:	2900      	cmp	r1, #0
    c264:	d00a      	beq.n	c27c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x20>
    c266:	2a00      	cmp	r2, #0
    c268:	d008      	beq.n	c27c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x20>
    c26a:	fba2 0101 	umull	r0, r1, r2, r1
    c26e:	1e40      	subs	r0, r0, #1
    c270:	4a03      	ldr	r2, [pc, #12]	; (c280 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x24>)
    c272:	f141 31ff 	adc.w	r1, r1, #4294967295
    c276:	f004 f9c1 	bl	105fc <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>
    c27a:	1c40      	adds	r0, r0, #1
    c27c:	bd10      	pop	{r4, pc}
    c27e:	0000      	.short	0x0000
    c280:	000f4240 	.word	0x000f4240

0000c284 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    c284:	b510      	push	{r4, lr}
    c286:	4c04      	ldr	r4, [pc, #16]	; (c298 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    c288:	7e20      	ldrb	r0, [r4, #24]
    c28a:	f000 0003 	and.w	r0, r0, #3
    c28e:	f004 f8c7 	bl	10420 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    c292:	2800      	cmp	r0, #0
    c294:	d0f8      	beq.n	c288 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    c296:	bd10      	pop	{r4, pc}
    c298:	200002ec 	.word	0x200002ec

0000c29c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    c29c:	4901      	ldr	r1, [pc, #4]	; (c2a4 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    c29e:	2001      	movs	r0, #1
    c2a0:	7008      	strb	r0, [r1, #0]
    c2a2:	4770      	bx	lr
    c2a4:	2000036b 	.word	0x2000036b

0000c2a8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    c2a8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c2ac:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    c2b0:	b918      	cbnz	r0, c2ba <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    c2b2:	4803      	ldr	r0, [pc, #12]	; (c2c0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    c2b4:	7800      	ldrb	r0, [r0, #0]
    c2b6:	2800      	cmp	r0, #0
    c2b8:	d000      	beq.n	c2bc <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    c2ba:	2001      	movs	r0, #1
    c2bc:	4770      	bx	lr
    c2be:	0000      	.short	0x0000
    c2c0:	2000036b 	.word	0x2000036b

0000c2c4 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    c2c4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c2c8:	2101      	movs	r1, #1
    c2ca:	6041      	str	r1, [r0, #4]
    c2cc:	2100      	movs	r1, #0
    c2ce:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    c2d2:	4801      	ldr	r0, [pc, #4]	; (c2d8 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    c2d4:	7001      	strb	r1, [r0, #0]
    c2d6:	4770      	bx	lr
    c2d8:	2000036b 	.word	0x2000036b

0000c2dc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    c2dc:	4802      	ldr	r0, [pc, #8]	; (c2e8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    c2de:	6800      	ldr	r0, [r0, #0]
    c2e0:	f000 0003 	and.w	r0, r0, #3
    c2e4:	4770      	bx	lr
    c2e6:	0000      	.short	0x0000
    c2e8:	4000041c 	.word	0x4000041c
    c2ec:	b510      	push	{r4, lr}
    c2ee:	b131      	cbz	r1, c2fe <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    c2f0:	2901      	cmp	r1, #1
    c2f2:	d007      	beq.n	c304 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    c2f4:	f240 3102 	movw	r1, #770	; 0x302
    c2f8:	a005      	add	r0, pc, #20	; (adr r0, c310 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    c2fa:	f000 f821 	bl	c340 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    c2fe:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    c302:	e001      	b.n	c308 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    c304:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    c308:	f000 0001 	and.w	r0, r0, #1
    c30c:	bd10      	pop	{r4, pc}
    c30e:	0000      	.short	0x0000
    c310:	5f66726e 	.word	0x5f66726e
    c314:	636f6c63 	.word	0x636f6c63
    c318:	00682e6b 	.word	0x00682e6b
    c31c:	f3bf 8f4f 	dsb	sy
    c320:	4805      	ldr	r0, [pc, #20]	; (c338 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x5c>)
    c322:	6801      	ldr	r1, [r0, #0]
    c324:	4a05      	ldr	r2, [pc, #20]	; (c33c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x60>)
    c326:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    c32a:	4311      	orrs	r1, r2
    c32c:	6001      	str	r1, [r0, #0]
    c32e:	f3bf 8f4f 	dsb	sy
    c332:	bf00      	nop
    c334:	e7fd      	b.n	c332 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x56>
    c336:	0000      	.short	0x0000
    c338:	e000ed0c 	.word	0xe000ed0c
    c33c:	05fa0004 	.word	0x05fa0004

0000c340 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    c340:	b672      	cpsid	i
    c342:	4a03      	ldr	r2, [pc, #12]	; (c350 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>)
    c344:	6852      	ldr	r2, [r2, #4]
    c346:	b102      	cbz	r2, c34a <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xa>
    c348:	4790      	blx	r2
    c34a:	f7ff ffe7 	bl	c31c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    c34e:	0000      	.short	0x0000
    c350:	2000030c 	.word	0x2000030c
    c354:	4806      	ldr	r0, [pc, #24]	; (c370 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>)
    c356:	b510      	push	{r4, lr}
    c358:	2100      	movs	r1, #0
    c35a:	6001      	str	r1, [r0, #0]
    c35c:	2101      	movs	r1, #1
    c35e:	6001      	str	r1, [r0, #0]
    c360:	4608      	mov	r0, r1
    c362:	f004 f884 	bl	1046e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    c366:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c36a:	2001      	movs	r0, #1
    c36c:	f004 b872 	b.w	10454 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    c370:	40001ffc 	.word	0x40001ffc
    c374:	4807      	ldr	r0, [pc, #28]	; (c394 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x54>)
    c376:	b510      	push	{r4, lr}
    c378:	2101      	movs	r1, #1
    c37a:	6041      	str	r1, [r0, #4]
    c37c:	1e89      	subs	r1, r1, #2
    c37e:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    c382:	200c      	movs	r0, #12
    c384:	f004 f873 	bl	1046e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    c388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c38c:	200c      	movs	r0, #12
    c38e:	f004 b861 	b.w	10454 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    c392:	0000      	.short	0x0000
    c394:	4000c000 	.word	0x4000c000

0000c398 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    c398:	b50e      	push	{r1, r2, r3, lr}
    c39a:	b672      	cpsid	i
    c39c:	4a0f      	ldr	r2, [pc, #60]	; (c3dc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    c39e:	6855      	ldr	r5, [r2, #4]
    c3a0:	b1d5      	cbz	r5, c3d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x40>
    c3a2:	2200      	movs	r2, #0
    c3a4:	4603      	mov	r3, r0
    c3a6:	466e      	mov	r6, sp
    c3a8:	240a      	movs	r4, #10
    c3aa:	e003      	b.n	c3b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1c>
    c3ac:	fbb0 f0f4 	udiv	r0, r0, r4
    c3b0:	1c52      	adds	r2, r2, #1
    c3b2:	b2d2      	uxtb	r2, r2
    c3b4:	2800      	cmp	r0, #0
    c3b6:	d1f9      	bne.n	c3ac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x14>
    c3b8:	54b0      	strb	r0, [r6, r2]
    c3ba:	e009      	b.n	c3d0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    c3bc:	fbb3 f0f4 	udiv	r0, r3, r4
    c3c0:	fb04 3010 	mls	r0, r4, r0, r3
    c3c4:	fbb3 f3f4 	udiv	r3, r3, r4
    c3c8:	1e52      	subs	r2, r2, #1
    c3ca:	b2d2      	uxtb	r2, r2
    c3cc:	3030      	adds	r0, #48	; 0x30
    c3ce:	54b0      	strb	r0, [r6, r2]
    c3d0:	2a00      	cmp	r2, #0
    c3d2:	d1f3      	bne.n	c3bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    c3d4:	4630      	mov	r0, r6
    c3d6:	47a8      	blx	r5
    c3d8:	f7ff ffa0 	bl	c31c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    c3dc:	2000030c 	.word	0x2000030c

0000c3e0 <mpsl_init>:
    c3e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c3e4:	4c18      	ldr	r4, [pc, #96]	; (c448 <mpsl_init+0x68>)
    c3e6:	4606      	mov	r6, r0
    c3e8:	4617      	mov	r7, r2
    c3ea:	7860      	ldrb	r0, [r4, #1]
    c3ec:	460d      	mov	r5, r1
    c3ee:	b118      	cbz	r0, c3f8 <mpsl_init+0x18>
    c3f0:	f04f 30ff 	mov.w	r0, #4294967295
    c3f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c3f8:	f7fc fbe2 	bl	8bc0 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>
    c3fc:	b906      	cbnz	r6, c400 <mpsl_init+0x20>
    c3fe:	4e13      	ldr	r6, [pc, #76]	; (c44c <mpsl_init+0x6c>)
    c400:	6067      	str	r7, [r4, #4]
    c402:	7025      	strb	r5, [r4, #0]
    c404:	f7ff ffa6 	bl	c354 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x14>
    c408:	f7ff ffb4 	bl	c374 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x34>
    c40c:	4630      	mov	r0, r6
    c40e:	f7ff fe83 	bl	c118 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    c412:	0006      	movs	r6, r0
    c414:	d1ee      	bne.n	c3f4 <mpsl_init+0x14>
    c416:	f7fe fe7d 	bl	b114 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    c41a:	f7ff fedd 	bl	c1d8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    c41e:	f003 ff98 	bl	10352 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    c422:	4628      	mov	r0, r5
    c424:	f004 f816 	bl	10454 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    c428:	2001      	movs	r0, #1
    c42a:	2d00      	cmp	r5, #0
    c42c:	db09      	blt.n	c442 <mpsl_init+0x62>
    c42e:	f005 011f 	and.w	r1, r5, #31
    c432:	fa00 f101 	lsl.w	r1, r0, r1
    c436:	096a      	lsrs	r2, r5, #5
    c438:	0092      	lsls	r2, r2, #2
    c43a:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    c43e:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    c442:	7060      	strb	r0, [r4, #1]
    c444:	4630      	mov	r0, r6
    c446:	e7d5      	b.n	c3f4 <mpsl_init+0x14>
    c448:	2000030c 	.word	0x2000030c
    c44c:	00010490 	.word	0x00010490

0000c450 <mpsl_is_initialized>:
    c450:	4801      	ldr	r0, [pc, #4]	; (c458 <mpsl_is_initialized+0x8>)
    c452:	7840      	ldrb	r0, [r0, #1]
    c454:	4770      	bx	lr
    c456:	0000      	.short	0x0000
    c458:	2000030c 	.word	0x2000030c

0000c45c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    c45c:	4807      	ldr	r0, [pc, #28]	; (c47c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    c45e:	f990 0000 	ldrsb.w	r0, [r0]
    c462:	2800      	cmp	r0, #0
    c464:	db09      	blt.n	c47a <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    c466:	f000 021f 	and.w	r2, r0, #31
    c46a:	2101      	movs	r1, #1
    c46c:	4091      	lsls	r1, r2
    c46e:	0940      	lsrs	r0, r0, #5
    c470:	0080      	lsls	r0, r0, #2
    c472:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c476:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    c47a:	4770      	bx	lr
    c47c:	2000030c 	.word	0x2000030c

0000c480 <mpsl_temperature_get>:
    c480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c484:	2601      	movs	r6, #1
    c486:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    c48a:	0331      	lsls	r1, r6, #12
    c48c:	f04f 0800 	mov.w	r8, #0
    c490:	4640      	mov	r0, r8
    c492:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    c496:	f3bf 8f4f 	dsb	sy
    c49a:	f3bf 8f6f 	isb	sy
    c49e:	4c16      	ldr	r4, [pc, #88]	; (c4f8 <mpsl_temperature_get+0x78>)
    c4a0:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    c4a4:	200c      	movs	r0, #12
    c4a6:	f004 f801 	bl	104ac <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    c4aa:	4d14      	ldr	r5, [pc, #80]	; (c4fc <mpsl_temperature_get+0x7c>)
    c4ac:	6828      	ldr	r0, [r5, #0]
    c4ae:	43c0      	mvns	r0, r0
    c4b0:	f340 1700 	sbfx	r7, r0, #4, #1
    c4b4:	6828      	ldr	r0, [r5, #0]
    c4b6:	f040 0010 	orr.w	r0, r0, #16
    c4ba:	6028      	str	r0, [r5, #0]
    c4bc:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    c4c0:	6026      	str	r6, [r4, #0]
    c4c2:	1c7f      	adds	r7, r7, #1
    c4c4:	e002      	b.n	c4cc <mpsl_temperature_get+0x4c>
    c4c6:	bf00      	nop
    c4c8:	f004 f894 	bl	105f4 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    c4cc:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    c4d0:	2800      	cmp	r0, #0
    c4d2:	d0f9      	beq.n	c4c8 <mpsl_temperature_get+0x48>
    c4d4:	b91f      	cbnz	r7, c4de <mpsl_temperature_get+0x5e>
    c4d6:	6828      	ldr	r0, [r5, #0]
    c4d8:	f020 0010 	bic.w	r0, r0, #16
    c4dc:	6028      	str	r0, [r5, #0]
    c4de:	4808      	ldr	r0, [pc, #32]	; (c500 <mpsl_temperature_get+0x80>)
    c4e0:	6805      	ldr	r5, [r0, #0]
    c4e2:	6066      	str	r6, [r4, #4]
    c4e4:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    c4e8:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    c4ec:	200c      	movs	r0, #12
    c4ee:	f003 ffdd 	bl	104ac <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    c4f2:	4628      	mov	r0, r5
    c4f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c4f8:	4000c000 	.word	0x4000c000
    c4fc:	e000ed10 	.word	0xe000ed10
    c500:	4000c508 	.word	0x4000c508

0000c504 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    c504:	b510      	push	{r4, lr}
    c506:	4602      	mov	r2, r0
    c508:	2005      	movs	r0, #5
    c50a:	490c      	ldr	r1, [pc, #48]	; (c53c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    c50c:	e004      	b.n	c518 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    c50e:	bf00      	nop
    c510:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    c514:	791b      	ldrb	r3, [r3, #4]
    c516:	b133      	cbz	r3, c526 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    c518:	1e40      	subs	r0, r0, #1
    c51a:	b2c0      	uxtb	r0, r0
    c51c:	d2f8      	bcs.n	c510 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    c51e:	2148      	movs	r1, #72	; 0x48
    c520:	2069      	movs	r0, #105	; 0x69
    c522:	f7ff ff39 	bl	c398 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c526:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    c52a:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    c52e:	2200      	movs	r2, #0
    c530:	714a      	strb	r2, [r1, #5]
    c532:	718a      	strb	r2, [r1, #6]
    c534:	2201      	movs	r2, #1
    c536:	710a      	strb	r2, [r1, #4]
    c538:	bd10      	pop	{r4, pc}
    c53a:	0000      	.short	0x0000
    c53c:	200015ec 	.word	0x200015ec

0000c540 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    c540:	b510      	push	{r4, lr}
    c542:	2805      	cmp	r0, #5
    c544:	d301      	bcc.n	c54a <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    c546:	2158      	movs	r1, #88	; 0x58
    c548:	e006      	b.n	c558 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    c54a:	490a      	ldr	r1, [pc, #40]	; (c574 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    c54c:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    c550:	7901      	ldrb	r1, [r0, #4]
    c552:	2901      	cmp	r1, #1
    c554:	d003      	beq.n	c55e <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    c556:	2159      	movs	r1, #89	; 0x59
    c558:	2069      	movs	r0, #105	; 0x69
    c55a:	f7ff ff1d 	bl	c398 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c55e:	7941      	ldrb	r1, [r0, #5]
    c560:	7982      	ldrb	r2, [r0, #6]
    c562:	1c49      	adds	r1, r1, #1
    c564:	b2c9      	uxtb	r1, r1
    c566:	428a      	cmp	r2, r1
    c568:	d000      	beq.n	c56c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    c56a:	7141      	strb	r1, [r0, #5]
    c56c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c570:	f7ff bf74 	b.w	c45c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    c574:	200015ec 	.word	0x200015ec

0000c578 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>:
    c578:	b510      	push	{r4, lr}
    c57a:	2805      	cmp	r0, #5
    c57c:	d303      	bcc.n	c586 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0xe>
    c57e:	214f      	movs	r1, #79	; 0x4f
    c580:	2069      	movs	r0, #105	; 0x69
    c582:	f7ff ff09 	bl	c398 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c586:	4a03      	ldr	r2, [pc, #12]	; (c594 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0x1c>)
    c588:	2100      	movs	r1, #0
    c58a:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    c58e:	7101      	strb	r1, [r0, #4]
    c590:	bd10      	pop	{r4, pc}
    c592:	0000      	.short	0x0000
    c594:	200015ec 	.word	0x200015ec

0000c598 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    c598:	b570      	push	{r4, r5, r6, lr}
    c59a:	2505      	movs	r5, #5
    c59c:	4e0e      	ldr	r6, [pc, #56]	; (c5d8 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    c59e:	4c0f      	ldr	r4, [pc, #60]	; (c5dc <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    c5a0:	e016      	b.n	c5d0 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    c5a2:	7821      	ldrb	r1, [r4, #0]
    c5a4:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    c5a8:	7902      	ldrb	r2, [r0, #4]
    c5aa:	2a01      	cmp	r2, #1
    c5ac:	d108      	bne.n	c5c0 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    c5ae:	7942      	ldrb	r2, [r0, #5]
    c5b0:	7983      	ldrb	r3, [r0, #6]
    c5b2:	429a      	cmp	r2, r3
    c5b4:	d004      	beq.n	c5c0 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    c5b6:	7942      	ldrb	r2, [r0, #5]
    c5b8:	7182      	strb	r2, [r0, #6]
    c5ba:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    c5be:	4780      	blx	r0
    c5c0:	7820      	ldrb	r0, [r4, #0]
    c5c2:	1c40      	adds	r0, r0, #1
    c5c4:	b2c0      	uxtb	r0, r0
    c5c6:	7020      	strb	r0, [r4, #0]
    c5c8:	2805      	cmp	r0, #5
    c5ca:	d301      	bcc.n	c5d0 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    c5cc:	2000      	movs	r0, #0
    c5ce:	7020      	strb	r0, [r4, #0]
    c5d0:	1e6d      	subs	r5, r5, #1
    c5d2:	b2ed      	uxtb	r5, r5
    c5d4:	d2e5      	bcs.n	c5a2 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    c5d6:	bd70      	pop	{r4, r5, r6, pc}
    c5d8:	200015ec 	.word	0x200015ec
    c5dc:	2000036c 	.word	0x2000036c

0000c5e0 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    c5e0:	b500      	push	{lr}
    c5e2:	f003 ff92 	bl	1050a <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    c5e6:	b940      	cbnz	r0, c5fa <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    c5e8:	f003 ff99 	bl	1051e <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    c5ec:	b928      	cbnz	r0, c5fa <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    c5ee:	f003 ffad 	bl	1054c <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    c5f2:	b910      	cbnz	r0, c5fa <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    c5f4:	f003 ffbe 	bl	10574 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c5f8:	b108      	cbz	r0, c5fe <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    c5fa:	4802      	ldr	r0, [pc, #8]	; (c604 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    c5fc:	bd00      	pop	{pc}
    c5fe:	4802      	ldr	r0, [pc, #8]	; (c608 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    c600:	bd00      	pop	{pc}
    c602:	0000      	.short	0x0000
    c604:	4000050c 	.word	0x4000050c
    c608:	4001e700 	.word	0x4001e700
    c60c:	b510      	push	{r4, lr}
    c60e:	f003 ffb1 	bl	10574 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c612:	b330      	cbz	r0, c662 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x82>
    c614:	f3ef 8010 	mrs	r0, PRIMASK
    c618:	b1c8      	cbz	r0, c64e <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x6e>
    c61a:	2100      	movs	r1, #0
    c61c:	b672      	cpsid	i
    c61e:	4812      	ldr	r0, [pc, #72]	; (c668 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x88>)
    c620:	6802      	ldr	r2, [r0, #0]
    c622:	6803      	ldr	r3, [r0, #0]
    c624:	f3c2 1200 	ubfx	r2, r2, #4, #1
    c628:	f043 0310 	orr.w	r3, r3, #16
    c62c:	6003      	str	r3, [r0, #0]
    c62e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    c632:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    c636:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    c63a:	431c      	orrs	r4, r3
    c63c:	d000      	beq.n	c640 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x60>
    c63e:	bf40      	sev
    c640:	bf20      	wfe
    c642:	bf00      	nop
    c644:	bf00      	nop
    c646:	bf00      	nop
    c648:	bf00      	nop
    c64a:	b112      	cbz	r2, c652 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x72>
    c64c:	e005      	b.n	c65a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x7a>
    c64e:	2101      	movs	r1, #1
    c650:	e7e4      	b.n	c61c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x3c>
    c652:	6802      	ldr	r2, [r0, #0]
    c654:	f022 0210 	bic.w	r2, r2, #16
    c658:	6002      	str	r2, [r0, #0]
    c65a:	2900      	cmp	r1, #0
    c65c:	d000      	beq.n	c660 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x80>
    c65e:	b662      	cpsie	i
    c660:	bd10      	pop	{r4, pc}
    c662:	bf20      	wfe
    c664:	bd10      	pop	{r4, pc}
    c666:	0000      	.short	0x0000
    c668:	e000ed10 	.word	0xe000ed10

0000c66c <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>:
    c66c:	4901      	ldr	r1, [pc, #4]	; (c674 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q+0x8>)
    c66e:	2001      	movs	r0, #1
    c670:	7088      	strb	r0, [r1, #2]
    c672:	4770      	bx	lr
    c674:	20000314 	.word	0x20000314

0000c678 <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    c678:	0001087b 000108b3 0001089d 0001088b     {...............
    c688:	00010897 00010885 00010879 00010877     ........y...w...
    c698:	000108af 000108a3 00010891 0001087f     ................
    c6a8:	00010871 00010869 0001086d 00010863     q...i...m...c...

0000c6b8 <mpsl_fem_disable>:
    c6b8:	4801      	ldr	r0, [pc, #4]	; (c6c0 <mpsl_fem_disable+0x8>)
    c6ba:	6800      	ldr	r0, [r0, #0]
    c6bc:	6800      	ldr	r0, [r0, #0]
    c6be:	4700      	bx	r0
    c6c0:	20000328 	.word	0x20000328

0000c6c4 <mpsl_fem_lna_configuration_clear>:
    c6c4:	4801      	ldr	r0, [pc, #4]	; (c6cc <mpsl_fem_lna_configuration_clear+0x8>)
    c6c6:	6800      	ldr	r0, [r0, #0]
    c6c8:	6940      	ldr	r0, [r0, #20]
    c6ca:	4700      	bx	r0
    c6cc:	20000328 	.word	0x20000328

0000c6d0 <mpsl_fem_lna_configuration_set>:
    c6d0:	4a01      	ldr	r2, [pc, #4]	; (c6d8 <mpsl_fem_lna_configuration_set+0x8>)
    c6d2:	6812      	ldr	r2, [r2, #0]
    c6d4:	68d2      	ldr	r2, [r2, #12]
    c6d6:	4710      	bx	r2
    c6d8:	20000328 	.word	0x20000328

0000c6dc <mpsl_fem_lna_is_configured>:
    c6dc:	4901      	ldr	r1, [pc, #4]	; (c6e4 <mpsl_fem_lna_is_configured+0x8>)
    c6de:	6809      	ldr	r1, [r1, #0]
    c6e0:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    c6e2:	4708      	bx	r1
    c6e4:	20000328 	.word	0x20000328

0000c6e8 <mpsl_fem_pa_configuration_clear>:
    c6e8:	4801      	ldr	r0, [pc, #4]	; (c6f0 <mpsl_fem_pa_configuration_clear+0x8>)
    c6ea:	6800      	ldr	r0, [r0, #0]
    c6ec:	6900      	ldr	r0, [r0, #16]
    c6ee:	4700      	bx	r0
    c6f0:	20000328 	.word	0x20000328

0000c6f4 <mpsl_fem_pa_configuration_set>:
    c6f4:	4a01      	ldr	r2, [pc, #4]	; (c6fc <mpsl_fem_pa_configuration_set+0x8>)
    c6f6:	6812      	ldr	r2, [r2, #0]
    c6f8:	6892      	ldr	r2, [r2, #8]
    c6fa:	4710      	bx	r2
    c6fc:	20000328 	.word	0x20000328

0000c700 <mpsl_fem_pa_gain_set>:
    c700:	4901      	ldr	r1, [pc, #4]	; (c708 <mpsl_fem_pa_gain_set+0x8>)
    c702:	6809      	ldr	r1, [r1, #0]
    c704:	6a49      	ldr	r1, [r1, #36]	; 0x24
    c706:	4708      	bx	r1
    c708:	20000328 	.word	0x20000328

0000c70c <mpsl_fem_pa_is_configured>:
    c70c:	4901      	ldr	r1, [pc, #4]	; (c714 <mpsl_fem_pa_is_configured+0x8>)
    c70e:	6809      	ldr	r1, [r1, #0]
    c710:	6a89      	ldr	r1, [r1, #40]	; 0x28
    c712:	4708      	bx	r1
    c714:	20000328 	.word	0x20000328

0000c718 <mpsl_fem_tx_power_split>:
    c718:	b430      	push	{r4, r5}
    c71a:	4c03      	ldr	r4, [pc, #12]	; (c728 <mpsl_fem_tx_power_split+0x10>)
    c71c:	6824      	ldr	r4, [r4, #0]
    c71e:	6864      	ldr	r4, [r4, #4]
    c720:	46a4      	mov	ip, r4
    c722:	bc30      	pop	{r4, r5}
    c724:	4760      	bx	ip
    c726:	0000      	.short	0x0000
    c728:	20000328 	.word	0x20000328

0000c72c <mpsl_fem_device_config_254_apply_get>:
    c72c:	4801      	ldr	r0, [pc, #4]	; (c734 <mpsl_fem_device_config_254_apply_get+0x8>)
    c72e:	7800      	ldrb	r0, [r0, #0]
    c730:	4770      	bx	lr
    c732:	0000      	.short	0x0000
    c734:	2000036d 	.word	0x2000036d

0000c738 <__udivmoddi4>:
    c738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c73c:	4686      	mov	lr, r0
    c73e:	468c      	mov	ip, r1
    c740:	4608      	mov	r0, r1
    c742:	9e08      	ldr	r6, [sp, #32]
    c744:	4615      	mov	r5, r2
    c746:	4674      	mov	r4, lr
    c748:	4619      	mov	r1, r3
    c74a:	2b00      	cmp	r3, #0
    c74c:	f040 80c2 	bne.w	c8d4 <__udivmoddi4+0x19c>
    c750:	4285      	cmp	r5, r0
    c752:	fab2 f282 	clz	r2, r2
    c756:	d945      	bls.n	c7e4 <__udivmoddi4+0xac>
    c758:	b14a      	cbz	r2, c76e <__udivmoddi4+0x36>
    c75a:	f1c2 0320 	rsb	r3, r2, #32
    c75e:	fa00 fc02 	lsl.w	ip, r0, r2
    c762:	fa2e f303 	lsr.w	r3, lr, r3
    c766:	4095      	lsls	r5, r2
    c768:	ea43 0c0c 	orr.w	ip, r3, ip
    c76c:	4094      	lsls	r4, r2
    c76e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c772:	b2a8      	uxth	r0, r5
    c774:	fbbc f8fe 	udiv	r8, ip, lr
    c778:	0c23      	lsrs	r3, r4, #16
    c77a:	fb0e cc18 	mls	ip, lr, r8, ip
    c77e:	fb08 f900 	mul.w	r9, r8, r0
    c782:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    c786:	4599      	cmp	r9, r3
    c788:	d928      	bls.n	c7dc <__udivmoddi4+0xa4>
    c78a:	18eb      	adds	r3, r5, r3
    c78c:	f108 37ff 	add.w	r7, r8, #4294967295
    c790:	d204      	bcs.n	c79c <__udivmoddi4+0x64>
    c792:	4599      	cmp	r9, r3
    c794:	d902      	bls.n	c79c <__udivmoddi4+0x64>
    c796:	f1a8 0702 	sub.w	r7, r8, #2
    c79a:	442b      	add	r3, r5
    c79c:	eba3 0309 	sub.w	r3, r3, r9
    c7a0:	b2a4      	uxth	r4, r4
    c7a2:	fbb3 fcfe 	udiv	ip, r3, lr
    c7a6:	fb0e 331c 	mls	r3, lr, ip, r3
    c7aa:	fb0c f000 	mul.w	r0, ip, r0
    c7ae:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    c7b2:	42a0      	cmp	r0, r4
    c7b4:	d914      	bls.n	c7e0 <__udivmoddi4+0xa8>
    c7b6:	192c      	adds	r4, r5, r4
    c7b8:	f10c 33ff 	add.w	r3, ip, #4294967295
    c7bc:	d204      	bcs.n	c7c8 <__udivmoddi4+0x90>
    c7be:	42a0      	cmp	r0, r4
    c7c0:	d902      	bls.n	c7c8 <__udivmoddi4+0x90>
    c7c2:	f1ac 0302 	sub.w	r3, ip, #2
    c7c6:	442c      	add	r4, r5
    c7c8:	1a24      	subs	r4, r4, r0
    c7ca:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    c7ce:	b11e      	cbz	r6, c7d8 <__udivmoddi4+0xa0>
    c7d0:	40d4      	lsrs	r4, r2
    c7d2:	2300      	movs	r3, #0
    c7d4:	6034      	str	r4, [r6, #0]
    c7d6:	6073      	str	r3, [r6, #4]
    c7d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c7dc:	4647      	mov	r7, r8
    c7de:	e7dd      	b.n	c79c <__udivmoddi4+0x64>
    c7e0:	4663      	mov	r3, ip
    c7e2:	e7f1      	b.n	c7c8 <__udivmoddi4+0x90>
    c7e4:	bb92      	cbnz	r2, c84c <__udivmoddi4+0x114>
    c7e6:	1b43      	subs	r3, r0, r5
    c7e8:	2101      	movs	r1, #1
    c7ea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c7ee:	b2af      	uxth	r7, r5
    c7f0:	fbb3 fcfe 	udiv	ip, r3, lr
    c7f4:	0c20      	lsrs	r0, r4, #16
    c7f6:	fb0e 331c 	mls	r3, lr, ip, r3
    c7fa:	fb0c f807 	mul.w	r8, ip, r7
    c7fe:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    c802:	4598      	cmp	r8, r3
    c804:	d962      	bls.n	c8cc <__udivmoddi4+0x194>
    c806:	18eb      	adds	r3, r5, r3
    c808:	f10c 30ff 	add.w	r0, ip, #4294967295
    c80c:	d204      	bcs.n	c818 <__udivmoddi4+0xe0>
    c80e:	4598      	cmp	r8, r3
    c810:	d902      	bls.n	c818 <__udivmoddi4+0xe0>
    c812:	f1ac 0002 	sub.w	r0, ip, #2
    c816:	442b      	add	r3, r5
    c818:	eba3 0308 	sub.w	r3, r3, r8
    c81c:	b2a4      	uxth	r4, r4
    c81e:	fbb3 fcfe 	udiv	ip, r3, lr
    c822:	fb0e 331c 	mls	r3, lr, ip, r3
    c826:	fb0c f707 	mul.w	r7, ip, r7
    c82a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    c82e:	42a7      	cmp	r7, r4
    c830:	d94e      	bls.n	c8d0 <__udivmoddi4+0x198>
    c832:	192c      	adds	r4, r5, r4
    c834:	f10c 33ff 	add.w	r3, ip, #4294967295
    c838:	d204      	bcs.n	c844 <__udivmoddi4+0x10c>
    c83a:	42a7      	cmp	r7, r4
    c83c:	d902      	bls.n	c844 <__udivmoddi4+0x10c>
    c83e:	f1ac 0302 	sub.w	r3, ip, #2
    c842:	442c      	add	r4, r5
    c844:	1be4      	subs	r4, r4, r7
    c846:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    c84a:	e7c0      	b.n	c7ce <__udivmoddi4+0x96>
    c84c:	f1c2 0320 	rsb	r3, r2, #32
    c850:	fa20 f103 	lsr.w	r1, r0, r3
    c854:	4095      	lsls	r5, r2
    c856:	4090      	lsls	r0, r2
    c858:	fa2e f303 	lsr.w	r3, lr, r3
    c85c:	4303      	orrs	r3, r0
    c85e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c862:	b2af      	uxth	r7, r5
    c864:	fbb1 fcfe 	udiv	ip, r1, lr
    c868:	fb0e 101c 	mls	r0, lr, ip, r1
    c86c:	0c19      	lsrs	r1, r3, #16
    c86e:	fb0c f807 	mul.w	r8, ip, r7
    c872:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    c876:	4588      	cmp	r8, r1
    c878:	fa04 f402 	lsl.w	r4, r4, r2
    c87c:	d922      	bls.n	c8c4 <__udivmoddi4+0x18c>
    c87e:	1869      	adds	r1, r5, r1
    c880:	f10c 30ff 	add.w	r0, ip, #4294967295
    c884:	d204      	bcs.n	c890 <__udivmoddi4+0x158>
    c886:	4588      	cmp	r8, r1
    c888:	d902      	bls.n	c890 <__udivmoddi4+0x158>
    c88a:	f1ac 0002 	sub.w	r0, ip, #2
    c88e:	4429      	add	r1, r5
    c890:	eba1 0108 	sub.w	r1, r1, r8
    c894:	b29b      	uxth	r3, r3
    c896:	fbb1 fcfe 	udiv	ip, r1, lr
    c89a:	fb0e 111c 	mls	r1, lr, ip, r1
    c89e:	fb0c f707 	mul.w	r7, ip, r7
    c8a2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    c8a6:	429f      	cmp	r7, r3
    c8a8:	d90e      	bls.n	c8c8 <__udivmoddi4+0x190>
    c8aa:	18eb      	adds	r3, r5, r3
    c8ac:	f10c 31ff 	add.w	r1, ip, #4294967295
    c8b0:	d204      	bcs.n	c8bc <__udivmoddi4+0x184>
    c8b2:	429f      	cmp	r7, r3
    c8b4:	d902      	bls.n	c8bc <__udivmoddi4+0x184>
    c8b6:	f1ac 0102 	sub.w	r1, ip, #2
    c8ba:	442b      	add	r3, r5
    c8bc:	1bdb      	subs	r3, r3, r7
    c8be:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    c8c2:	e792      	b.n	c7ea <__udivmoddi4+0xb2>
    c8c4:	4660      	mov	r0, ip
    c8c6:	e7e3      	b.n	c890 <__udivmoddi4+0x158>
    c8c8:	4661      	mov	r1, ip
    c8ca:	e7f7      	b.n	c8bc <__udivmoddi4+0x184>
    c8cc:	4660      	mov	r0, ip
    c8ce:	e7a3      	b.n	c818 <__udivmoddi4+0xe0>
    c8d0:	4663      	mov	r3, ip
    c8d2:	e7b7      	b.n	c844 <__udivmoddi4+0x10c>
    c8d4:	4283      	cmp	r3, r0
    c8d6:	d906      	bls.n	c8e6 <__udivmoddi4+0x1ae>
    c8d8:	b916      	cbnz	r6, c8e0 <__udivmoddi4+0x1a8>
    c8da:	2100      	movs	r1, #0
    c8dc:	4608      	mov	r0, r1
    c8de:	e77b      	b.n	c7d8 <__udivmoddi4+0xa0>
    c8e0:	e9c6 e000 	strd	lr, r0, [r6]
    c8e4:	e7f9      	b.n	c8da <__udivmoddi4+0x1a2>
    c8e6:	fab3 f783 	clz	r7, r3
    c8ea:	b98f      	cbnz	r7, c910 <__udivmoddi4+0x1d8>
    c8ec:	4283      	cmp	r3, r0
    c8ee:	d301      	bcc.n	c8f4 <__udivmoddi4+0x1bc>
    c8f0:	4572      	cmp	r2, lr
    c8f2:	d808      	bhi.n	c906 <__udivmoddi4+0x1ce>
    c8f4:	ebbe 0402 	subs.w	r4, lr, r2
    c8f8:	eb60 0303 	sbc.w	r3, r0, r3
    c8fc:	2001      	movs	r0, #1
    c8fe:	469c      	mov	ip, r3
    c900:	b91e      	cbnz	r6, c90a <__udivmoddi4+0x1d2>
    c902:	2100      	movs	r1, #0
    c904:	e768      	b.n	c7d8 <__udivmoddi4+0xa0>
    c906:	4638      	mov	r0, r7
    c908:	e7fa      	b.n	c900 <__udivmoddi4+0x1c8>
    c90a:	e9c6 4c00 	strd	r4, ip, [r6]
    c90e:	e7f8      	b.n	c902 <__udivmoddi4+0x1ca>
    c910:	f1c7 0c20 	rsb	ip, r7, #32
    c914:	40bb      	lsls	r3, r7
    c916:	fa22 f40c 	lsr.w	r4, r2, ip
    c91a:	431c      	orrs	r4, r3
    c91c:	fa2e f10c 	lsr.w	r1, lr, ip
    c920:	fa20 f30c 	lsr.w	r3, r0, ip
    c924:	40b8      	lsls	r0, r7
    c926:	4301      	orrs	r1, r0
    c928:	ea4f 4914 	mov.w	r9, r4, lsr #16
    c92c:	fa0e f507 	lsl.w	r5, lr, r7
    c930:	fbb3 f8f9 	udiv	r8, r3, r9
    c934:	fa1f fe84 	uxth.w	lr, r4
    c938:	fb09 3018 	mls	r0, r9, r8, r3
    c93c:	0c0b      	lsrs	r3, r1, #16
    c93e:	fb08 fa0e 	mul.w	sl, r8, lr
    c942:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    c946:	459a      	cmp	sl, r3
    c948:	fa02 f207 	lsl.w	r2, r2, r7
    c94c:	d940      	bls.n	c9d0 <__udivmoddi4+0x298>
    c94e:	18e3      	adds	r3, r4, r3
    c950:	f108 30ff 	add.w	r0, r8, #4294967295
    c954:	d204      	bcs.n	c960 <__udivmoddi4+0x228>
    c956:	459a      	cmp	sl, r3
    c958:	d902      	bls.n	c960 <__udivmoddi4+0x228>
    c95a:	f1a8 0002 	sub.w	r0, r8, #2
    c95e:	4423      	add	r3, r4
    c960:	eba3 030a 	sub.w	r3, r3, sl
    c964:	b289      	uxth	r1, r1
    c966:	fbb3 f8f9 	udiv	r8, r3, r9
    c96a:	fb09 3318 	mls	r3, r9, r8, r3
    c96e:	fb08 fe0e 	mul.w	lr, r8, lr
    c972:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    c976:	458e      	cmp	lr, r1
    c978:	d92c      	bls.n	c9d4 <__udivmoddi4+0x29c>
    c97a:	1861      	adds	r1, r4, r1
    c97c:	f108 33ff 	add.w	r3, r8, #4294967295
    c980:	d204      	bcs.n	c98c <__udivmoddi4+0x254>
    c982:	458e      	cmp	lr, r1
    c984:	d902      	bls.n	c98c <__udivmoddi4+0x254>
    c986:	f1a8 0302 	sub.w	r3, r8, #2
    c98a:	4421      	add	r1, r4
    c98c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    c990:	fba0 9802 	umull	r9, r8, r0, r2
    c994:	eba1 010e 	sub.w	r1, r1, lr
    c998:	4541      	cmp	r1, r8
    c99a:	46ce      	mov	lr, r9
    c99c:	4643      	mov	r3, r8
    c99e:	d302      	bcc.n	c9a6 <__udivmoddi4+0x26e>
    c9a0:	d106      	bne.n	c9b0 <__udivmoddi4+0x278>
    c9a2:	454d      	cmp	r5, r9
    c9a4:	d204      	bcs.n	c9b0 <__udivmoddi4+0x278>
    c9a6:	ebb9 0e02 	subs.w	lr, r9, r2
    c9aa:	eb68 0304 	sbc.w	r3, r8, r4
    c9ae:	3801      	subs	r0, #1
    c9b0:	2e00      	cmp	r6, #0
    c9b2:	d0a6      	beq.n	c902 <__udivmoddi4+0x1ca>
    c9b4:	ebb5 020e 	subs.w	r2, r5, lr
    c9b8:	eb61 0103 	sbc.w	r1, r1, r3
    c9bc:	fa01 fc0c 	lsl.w	ip, r1, ip
    c9c0:	fa22 f307 	lsr.w	r3, r2, r7
    c9c4:	ea4c 0303 	orr.w	r3, ip, r3
    c9c8:	40f9      	lsrs	r1, r7
    c9ca:	e9c6 3100 	strd	r3, r1, [r6]
    c9ce:	e798      	b.n	c902 <__udivmoddi4+0x1ca>
    c9d0:	4640      	mov	r0, r8
    c9d2:	e7c5      	b.n	c960 <__udivmoddi4+0x228>
    c9d4:	4643      	mov	r3, r8
    c9d6:	e7d9      	b.n	c98c <__udivmoddi4+0x254>

0000c9d8 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
    c9d8:	b50e      	push	{r1, r2, r3, lr}
    c9da:	4601      	mov	r1, r0
    c9dc:	4668      	mov	r0, sp
    c9de:	f000 f804 	bl	c9ea <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
    c9e2:	4668      	mov	r0, sp
    c9e4:	f001 fba4 	bl	e130 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
    c9e8:	bd0e      	pop	{r1, r2, r3, pc}

0000c9ea <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
    c9ea:	880a      	ldrh	r2, [r1, #0]
    c9ec:	f3c2 020b 	ubfx	r2, r2, #0, #12
    c9f0:	8082      	strh	r2, [r0, #4]
    c9f2:	884a      	ldrh	r2, [r1, #2]
    c9f4:	80c2      	strh	r2, [r0, #6]
    c9f6:	784a      	ldrb	r2, [r1, #1]
    c9f8:	0993      	lsrs	r3, r2, #6
    c9fa:	2200      	movs	r2, #0
    c9fc:	7242      	strb	r2, [r0, #9]
    c9fe:	784b      	ldrb	r3, [r1, #1]
    ca00:	f3c3 1301 	ubfx	r3, r3, #4, #2
    ca04:	b11b      	cbz	r3, ca0e <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    ca06:	2b01      	cmp	r3, #1
    ca08:	d005      	beq.n	ca16 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
    ca0a:	2b02      	cmp	r3, #2
    ca0c:	d005      	beq.n	ca1a <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
    ca0e:	7202      	strb	r2, [r0, #8]
    ca10:	1d09      	adds	r1, r1, #4
    ca12:	6001      	str	r1, [r0, #0]
    ca14:	4770      	bx	lr
    ca16:	2201      	movs	r2, #1
    ca18:	e7f9      	b.n	ca0e <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    ca1a:	2202      	movs	r2, #2
    ca1c:	e7f7      	b.n	ca0e <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

0000ca1e <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    ca1e:	b510      	push	{r4, lr}
    ca20:	460c      	mov	r4, r1
    ca22:	7909      	ldrb	r1, [r1, #4]
    ca24:	7001      	strb	r1, [r0, #0]
    ca26:	7841      	ldrb	r1, [r0, #1]
    ca28:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
    ca2c:	7041      	strb	r1, [r0, #1]
    ca2e:	88a2      	ldrh	r2, [r4, #4]
    ca30:	f3c2 2203 	ubfx	r2, r2, #8, #4
    ca34:	4311      	orrs	r1, r2
    ca36:	7041      	strb	r1, [r0, #1]
    ca38:	79a2      	ldrb	r2, [r4, #6]
    ca3a:	7082      	strb	r2, [r0, #2]
    ca3c:	88e2      	ldrh	r2, [r4, #6]
    ca3e:	f001 01cf 	and.w	r1, r1, #207	; 0xcf
    ca42:	0a12      	lsrs	r2, r2, #8
    ca44:	70c2      	strb	r2, [r0, #3]
    ca46:	7041      	strb	r1, [r0, #1]
    ca48:	7a22      	ldrb	r2, [r4, #8]
    ca4a:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    ca4e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    ca52:	7041      	strb	r1, [r0, #1]
    ca54:	7a62      	ldrb	r2, [r4, #9]
    ca56:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    ca5a:	7041      	strb	r1, [r0, #1]
    ca5c:	6821      	ldr	r1, [r4, #0]
    ca5e:	1d02      	adds	r2, r0, #4
    ca60:	4291      	cmp	r1, r2
    ca62:	d006      	beq.n	ca72 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x54>
    ca64:	88e2      	ldrh	r2, [r4, #6]
    ca66:	2afb      	cmp	r2, #251	; 0xfb
    ca68:	d300      	bcc.n	ca6c <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x4e>
    ca6a:	22fb      	movs	r2, #251	; 0xfb
    ca6c:	1d00      	adds	r0, r0, #4
    ca6e:	f003 fe1e 	bl	106ae <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ca72:	79a0      	ldrb	r0, [r4, #6]
    ca74:	1d00      	adds	r0, r0, #4
    ca76:	b2c0      	uxtb	r0, r0
    ca78:	bd10      	pop	{r4, pc}

0000ca7a <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY>:
    ca7a:	b430      	push	{r4, r5}
    ca7c:	790a      	ldrb	r2, [r1, #4]
    ca7e:	7002      	strb	r2, [r0, #0]
    ca80:	7842      	ldrb	r2, [r0, #1]
    ca82:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    ca86:	7042      	strb	r2, [r0, #1]
    ca88:	888b      	ldrh	r3, [r1, #4]
    ca8a:	f3c3 2303 	ubfx	r3, r3, #8, #4
    ca8e:	431a      	orrs	r2, r3
    ca90:	7042      	strb	r2, [r0, #1]
    ca92:	798b      	ldrb	r3, [r1, #6]
    ca94:	7083      	strb	r3, [r0, #2]
    ca96:	78c3      	ldrb	r3, [r0, #3]
    ca98:	f002 02cf 	and.w	r2, r2, #207	; 0xcf
    ca9c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    caa0:	70c3      	strb	r3, [r0, #3]
    caa2:	88cc      	ldrh	r4, [r1, #6]
    caa4:	f3c4 2405 	ubfx	r4, r4, #8, #6
    caa8:	4323      	orrs	r3, r4
    caaa:	70c3      	strb	r3, [r0, #3]
    caac:	7042      	strb	r2, [r0, #1]
    caae:	7a0c      	ldrb	r4, [r1, #8]
    cab0:	f004 0403 	and.w	r4, r4, #3
    cab4:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    cab8:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    cabc:	7042      	strb	r2, [r0, #1]
    cabe:	7a4c      	ldrb	r4, [r1, #9]
    cac0:	ea42 1284 	orr.w	r2, r2, r4, lsl #6
    cac4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    cac8:	7042      	strb	r2, [r0, #1]
    caca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    cace:	70c2      	strb	r2, [r0, #3]
    cad0:	680b      	ldr	r3, [r1, #0]
    cad2:	1d02      	adds	r2, r0, #4
    cad4:	4293      	cmp	r3, r2
    cad6:	d005      	beq.n	cae4 <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY+0x6a>
    cad8:	88ca      	ldrh	r2, [r1, #6]
    cada:	bc30      	pop	{r4, r5}
    cadc:	4619      	mov	r1, r3
    cade:	1d00      	adds	r0, r0, #4
    cae0:	f003 bde5 	b.w	106ae <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cae4:	bc30      	pop	{r4, r5}
    cae6:	4770      	bx	lr

0000cae8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    cae8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    caec:	4604      	mov	r4, r0
    caee:	f891 c000 	ldrb.w	ip, [r1]
    caf2:	460d      	mov	r5, r1
    caf4:	2000      	movs	r0, #0
    caf6:	270c      	movs	r7, #12
    caf8:	263e      	movs	r6, #62	; 0x3e
    cafa:	2312      	movs	r3, #18
    cafc:	22ff      	movs	r2, #255	; 0xff
    cafe:	f04f 0b10 	mov.w	fp, #16
    cb02:	f04f 0905 	mov.w	r9, #5
    cb06:	f104 010d 	add.w	r1, r4, #13
    cb0a:	f04f 0e14 	mov.w	lr, #20
    cb0e:	f04f 0a11 	mov.w	sl, #17
    cb12:	f1bc 0f23 	cmp.w	ip, #35	; 0x23
    cb16:	d271      	bcs.n	cbfc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x114>
    cb18:	e8df f00c 	tbb	[pc, ip]
    cb1c:	2c291270 	.word	0x2c291270
    cb20:	8c70f431 	.word	0x8c70f431
    cb24:	d5c1a796 	.word	0xd5c1a796
    cb28:	f1f2f5d8 	.word	0xf1f2f5d8
    cb2c:	537070f0 	.word	0x537070f0
    cb30:	eeef7170 	.word	0xeeef7170
    cb34:	eaebeced 	.word	0xeaebeced
    cb38:	e6e7e8e9 	.word	0xe6e7e8e9
    cb3c:	00e470e5 	.word	0x00e470e5
    cb40:	7027      	strb	r7, [r4, #0]
    cb42:	7928      	ldrb	r0, [r5, #4]
    cb44:	70a0      	strb	r0, [r4, #2]
    cb46:	7968      	ldrb	r0, [r5, #5]
    cb48:	70e0      	strb	r0, [r4, #3]
    cb4a:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    cb4e:	0a00      	lsrs	r0, r0, #8
    cb50:	7120      	strb	r0, [r4, #4]
    cb52:	79e8      	ldrb	r0, [r5, #7]
    cb54:	7160      	strb	r0, [r4, #5]
    cb56:	7a28      	ldrb	r0, [r5, #8]
    cb58:	71a0      	strb	r0, [r4, #6]
    cb5a:	8928      	ldrh	r0, [r5, #8]
    cb5c:	0a00      	lsrs	r0, r0, #8
    cb5e:	71e0      	strb	r0, [r4, #7]
    cb60:	7aa8      	ldrb	r0, [r5, #10]
    cb62:	7220      	strb	r0, [r4, #8]
    cb64:	8968      	ldrh	r0, [r5, #10]
    cb66:	0a00      	lsrs	r0, r0, #8
    cb68:	7260      	strb	r0, [r4, #9]
    cb6a:	2008      	movs	r0, #8
    cb6c:	e137      	b.n	cdde <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    cb6e:	f884 b000 	strb.w	fp, [r4]
    cb72:	e001      	b.n	cb78 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x90>
    cb74:	201a      	movs	r0, #26
    cb76:	7020      	strb	r0, [r4, #0]
    cb78:	7928      	ldrb	r0, [r5, #4]
    cb7a:	70a0      	strb	r0, [r4, #2]
    cb7c:	e136      	b.n	cdec <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x304>
    cb7e:	7026      	strb	r6, [r4, #0]
    cb80:	2002      	movs	r0, #2
    cb82:	70a0      	strb	r0, [r4, #2]
    cb84:	f815 0f04 	ldrb.w	r0, [r5, #4]!
    cb88:	70e0      	strb	r0, [r4, #3]
    cb8a:	7aa8      	ldrb	r0, [r5, #10]
    cb8c:	7120      	strb	r0, [r4, #4]
    cb8e:	7868      	ldrb	r0, [r5, #1]
    cb90:	7160      	strb	r0, [r4, #5]
    cb92:	f8d5 0002 	ldr.w	r0, [r5, #2]
    cb96:	f8c4 0006 	str.w	r0, [r4, #6]
    cb9a:	88e8      	ldrh	r0, [r5, #6]
    cb9c:	8160      	strh	r0, [r4, #10]
    cb9e:	7a28      	ldrb	r0, [r5, #8]
    cba0:	7320      	strb	r0, [r4, #12]
    cba2:	7a2e      	ldrb	r6, [r5, #8]
    cba4:	2e1f      	cmp	r6, #31
    cba6:	d300      	bcc.n	cbaa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xc2>
    cba8:	261f      	movs	r6, #31
    cbaa:	4608      	mov	r0, r1
    cbac:	4632      	mov	r2, r6
    cbae:	f105 010b 	add.w	r1, r5, #11
    cbb2:	f003 fd7c 	bl	106ae <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cbb6:	360d      	adds	r6, #13
    cbb8:	7a69      	ldrb	r1, [r5, #9]
    cbba:	55a1      	strb	r1, [r4, r6]
    cbbc:	1e76      	subs	r6, r6, #1
    cbbe:	b2f0      	uxtb	r0, r6
    cbc0:	e10b      	b.n	cdda <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f2>
    cbc2:	7026      	strb	r6, [r4, #0]
    cbc4:	200b      	movs	r0, #11
    cbc6:	70a0      	strb	r0, [r4, #2]
    cbc8:	7928      	ldrb	r0, [r5, #4]
    cbca:	70e0      	strb	r0, [r4, #3]
    cbcc:	7968      	ldrb	r0, [r5, #5]
    cbce:	7120      	strb	r0, [r4, #4]
    cbd0:	79a8      	ldrb	r0, [r5, #6]
    cbd2:	7160      	strb	r0, [r4, #5]
    cbd4:	f8d5 0007 	ldr.w	r0, [r5, #7]
    cbd8:	f8c4 0006 	str.w	r0, [r4, #6]
    cbdc:	f8b5 000b 	ldrh.w	r0, [r5, #11]
    cbe0:	8160      	strh	r0, [r4, #10]
    cbe2:	7b68      	ldrb	r0, [r5, #13]
    cbe4:	7320      	strb	r0, [r4, #12]
    cbe6:	f8d5 000e 	ldr.w	r0, [r5, #14]
    cbea:	f8c4 000d 	str.w	r0, [r4, #13]
    cbee:	8a68      	ldrh	r0, [r5, #18]
    cbf0:	f8a4 0011 	strh.w	r0, [r4, #17]
    cbf4:	7d28      	ldrb	r0, [r5, #20]
    cbf6:	74e0      	strb	r0, [r4, #19]
    cbf8:	4618      	mov	r0, r3
    cbfa:	e0f0      	b.n	cdde <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    cbfc:	e0f1      	b.n	cde2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2fa>
    cbfe:	2029      	movs	r0, #41	; 0x29
    cc00:	f7f4 f8b4 	bl	d6c <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    cc04:	b148      	cbz	r0, cc1a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x132>
    cc06:	7026      	strb	r6, [r4, #0]
    cc08:	2029      	movs	r0, #41	; 0x29
    cc0a:	70a0      	strb	r0, [r4, #2]
    cc0c:	2221      	movs	r2, #33	; 0x21
    cc0e:	1d29      	adds	r1, r5, #4
    cc10:	1ce0      	adds	r0, r4, #3
    cc12:	f003 fd4c 	bl	106ae <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cc16:	2022      	movs	r0, #34	; 0x22
    cc18:	e0e1      	b.n	cdde <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    cc1a:	200a      	movs	r0, #10
    cc1c:	f7f4 f8a6 	bl	d6c <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    cc20:	2800      	cmp	r0, #0
    cc22:	4629      	mov	r1, r5
    cc24:	4620      	mov	r0, r4
    cc26:	d002      	beq.n	cc2e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x146>
    cc28:	f000 f9a0 	bl	cf6c <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0x52>
    cc2c:	e0d5      	b.n	cdda <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f2>
    cc2e:	f000 f974 	bl	cf1a <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA>
    cc32:	e0d2      	b.n	cdda <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f2>
    cc34:	7026      	strb	r6, [r4, #0]
    cc36:	f884 e002 	strb.w	lr, [r4, #2]
    cc3a:	7928      	ldrb	r0, [r5, #4]
    cc3c:	70e0      	strb	r0, [r4, #3]
    cc3e:	88a8      	ldrh	r0, [r5, #4]
    cc40:	0a00      	lsrs	r0, r0, #8
    cc42:	7120      	strb	r0, [r4, #4]
    cc44:	79a8      	ldrb	r0, [r5, #6]
    cc46:	e104      	b.n	ce52 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
    cc48:	223e      	movs	r2, #62	; 0x3e
    cc4a:	7022      	strb	r2, [r4, #0]
    cc4c:	2204      	movs	r2, #4
    cc4e:	70a2      	strb	r2, [r4, #2]
    cc50:	6868      	ldr	r0, [r5, #4]
    cc52:	f8c4 0003 	str.w	r0, [r4, #3]
    cc56:	68a8      	ldr	r0, [r5, #8]
    cc58:	f8c4 0007 	str.w	r0, [r4, #7]
    cc5c:	89a8      	ldrh	r0, [r5, #12]
    cc5e:	f8a4 000b 	strh.w	r0, [r4, #11]
    cc62:	7ba8      	ldrb	r0, [r5, #14]
    cc64:	7360      	strb	r0, [r4, #13]
    cc66:	200c      	movs	r0, #12
    cc68:	e0b9      	b.n	cdde <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    cc6a:	7026      	strb	r6, [r4, #0]
    cc6c:	2003      	movs	r0, #3
    cc6e:	70a0      	strb	r0, [r4, #2]
    cc70:	7928      	ldrb	r0, [r5, #4]
    cc72:	70e0      	strb	r0, [r4, #3]
    cc74:	79a8      	ldrb	r0, [r5, #6]
    cc76:	7120      	strb	r0, [r4, #4]
    cc78:	88e8      	ldrh	r0, [r5, #6]
    cc7a:	0a00      	lsrs	r0, r0, #8
    cc7c:	7160      	strb	r0, [r4, #5]
    cc7e:	7a28      	ldrb	r0, [r5, #8]
    cc80:	71a0      	strb	r0, [r4, #6]
    cc82:	8928      	ldrh	r0, [r5, #8]
    cc84:	0a00      	lsrs	r0, r0, #8
    cc86:	71e0      	strb	r0, [r4, #7]
    cc88:	7aa8      	ldrb	r0, [r5, #10]
    cc8a:	7220      	strb	r0, [r4, #8]
    cc8c:	8968      	ldrh	r0, [r5, #10]
    cc8e:	0a00      	lsrs	r0, r0, #8
    cc90:	7260      	strb	r0, [r4, #9]
    cc92:	7b28      	ldrb	r0, [r5, #12]
    cc94:	72a0      	strb	r0, [r4, #10]
    cc96:	89a8      	ldrh	r0, [r5, #12]
    cc98:	0a00      	lsrs	r0, r0, #8
    cc9a:	72e0      	strb	r0, [r4, #11]
    cc9c:	e116      	b.n	cecc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3e4>
    cc9e:	7026      	strb	r6, [r4, #0]
    cca0:	f884 9002 	strb.w	r9, [r4, #2]
    cca4:	7928      	ldrb	r0, [r5, #4]
    cca6:	70e0      	strb	r0, [r4, #3]
    cca8:	88a8      	ldrh	r0, [r5, #4]
    ccaa:	0a00      	lsrs	r0, r0, #8
    ccac:	7120      	strb	r0, [r4, #4]
    ccae:	f8d5 0006 	ldr.w	r0, [r5, #6]
    ccb2:	f8c4 0005 	str.w	r0, [r4, #5]
    ccb6:	f8d5 000a 	ldr.w	r0, [r5, #10]
    ccba:	f8c4 0009 	str.w	r0, [r4, #9]
    ccbe:	89e8      	ldrh	r0, [r5, #14]
    ccc0:	f8a4 000d 	strh.w	r0, [r4, #13]
    ccc4:	e127      	b.n	cf16 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x42e>
    ccc6:	f884 a000 	strb.w	sl, [r4]
    ccca:	e049      	b.n	cd60 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x278>
    cccc:	f884 9000 	strb.w	r9, [r4]
    ccd0:	7928      	ldrb	r0, [r5, #4]
    ccd2:	70a0      	strb	r0, [r4, #2]
    ccd4:	7968      	ldrb	r0, [r5, #5]
    ccd6:	70e0      	strb	r0, [r4, #3]
    ccd8:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    ccdc:	0a00      	lsrs	r0, r0, #8
    ccde:	7120      	strb	r0, [r4, #4]
    cce0:	79e8      	ldrb	r0, [r5, #7]
    cce2:	e0b6      	b.n	ce52 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
    cce4:	e102      	b.n	ceec <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x404>
    cce6:	e0d5      	b.n	ce94 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3ac>
    cce8:	e0b6      	b.n	ce58 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x370>
    ccea:	e0e1      	b.n	ceb0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3c8>
    ccec:	e0f0      	b.n	ced0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3e8>
    ccee:	e0a8      	b.n	ce42 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x35a>
    ccf0:	e090      	b.n	ce14 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32c>
    ccf2:	e08c      	b.n	ce0e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x326>
    ccf4:	e077      	b.n	cde6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2fe>
    ccf6:	e07b      	b.n	cdf0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x308>
    ccf8:	e01e      	b.n	cd38 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x250>
    ccfa:	e01a      	b.n	cd32 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x24a>
    ccfc:	e02e      	b.n	cd5c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x274>
    ccfe:	e028      	b.n	cd52 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x26a>
    cd00:	e00c      	b.n	cd1c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x234>
    cd02:	e000      	b.n	cd06 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x21e>
    cd04:	e033      	b.n	cd6e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x286>
    cd06:	2008      	movs	r0, #8
    cd08:	7020      	strb	r0, [r4, #0]
    cd0a:	7928      	ldrb	r0, [r5, #4]
    cd0c:	70a0      	strb	r0, [r4, #2]
    cd0e:	79a8      	ldrb	r0, [r5, #6]
    cd10:	70e0      	strb	r0, [r4, #3]
    cd12:	88e8      	ldrh	r0, [r5, #6]
    cd14:	0a00      	lsrs	r0, r0, #8
    cd16:	7120      	strb	r0, [r4, #4]
    cd18:	7a28      	ldrb	r0, [r5, #8]
    cd1a:	e09a      	b.n	ce52 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
    cd1c:	2030      	movs	r0, #48	; 0x30
    cd1e:	7020      	strb	r0, [r4, #0]
    cd20:	7928      	ldrb	r0, [r5, #4]
    cd22:	70a0      	strb	r0, [r4, #2]
    cd24:	79a8      	ldrb	r0, [r5, #6]
    cd26:	70e0      	strb	r0, [r4, #3]
    cd28:	88e8      	ldrh	r0, [r5, #6]
    cd2a:	0a00      	lsrs	r0, r0, #8
    cd2c:	7120      	strb	r0, [r4, #4]
    cd2e:	2003      	movs	r0, #3
    cd30:	e055      	b.n	cdde <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    cd32:	7026      	strb	r6, [r4, #0]
    cd34:	2007      	movs	r0, #7
    cd36:	e091      	b.n	ce5c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x374>
    cd38:	7026      	strb	r6, [r4, #0]
    cd3a:	70a7      	strb	r7, [r4, #2]
    cd3c:	7928      	ldrb	r0, [r5, #4]
    cd3e:	70e0      	strb	r0, [r4, #3]
    cd40:	79a8      	ldrb	r0, [r5, #6]
    cd42:	7120      	strb	r0, [r4, #4]
    cd44:	88e8      	ldrh	r0, [r5, #6]
    cd46:	0a00      	lsrs	r0, r0, #8
    cd48:	7160      	strb	r0, [r4, #5]
    cd4a:	7a28      	ldrb	r0, [r5, #8]
    cd4c:	71a0      	strb	r0, [r4, #6]
    cd4e:	7a68      	ldrb	r0, [r5, #9]
    cd50:	e05a      	b.n	ce08 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x320>
    cd52:	1d29      	adds	r1, r5, #4
    cd54:	4620      	mov	r0, r4
    cd56:	f7f3 ffc9 	bl	cec <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x94>
    cd5a:	e03e      	b.n	cdda <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f2>
    cd5c:	2057      	movs	r0, #87	; 0x57
    cd5e:	7020      	strb	r0, [r4, #0]
    cd60:	7928      	ldrb	r0, [r5, #4]
    cd62:	70a0      	strb	r0, [r4, #2]
    cd64:	88a8      	ldrh	r0, [r5, #4]
    cd66:	0a00      	lsrs	r0, r0, #8
    cd68:	70e0      	strb	r0, [r4, #3]
    cd6a:	2002      	movs	r0, #2
    cd6c:	e037      	b.n	cdde <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    cd6e:	7026      	strb	r6, [r4, #0]
    cd70:	220d      	movs	r2, #13
    cd72:	70a2      	strb	r2, [r4, #2]
    cd74:	792a      	ldrb	r2, [r5, #4]
    cd76:	70e2      	strb	r2, [r4, #3]
    cd78:	89ea      	ldrh	r2, [r5, #14]
    cd7a:	80a2      	strh	r2, [r4, #4]
    cd7c:	796a      	ldrb	r2, [r5, #5]
    cd7e:	71a2      	strb	r2, [r4, #6]
    cd80:	f8d5 2006 	ldr.w	r2, [r5, #6]
    cd84:	f8c4 2007 	str.w	r2, [r4, #7]
    cd88:	896a      	ldrh	r2, [r5, #10]
    cd8a:	f8a4 200b 	strh.w	r2, [r4, #11]
    cd8e:	7c2a      	ldrb	r2, [r5, #16]
    cd90:	4620      	mov	r0, r4
    cd92:	7362      	strb	r2, [r4, #13]
    cd94:	1d29      	adds	r1, r5, #4
    cd96:	7c6a      	ldrb	r2, [r5, #17]
    cd98:	7382      	strb	r2, [r0, #14]
    cd9a:	7b8a      	ldrb	r2, [r1, #14]
    cd9c:	73c2      	strb	r2, [r0, #15]
    cd9e:	7e8a      	ldrb	r2, [r1, #26]
    cda0:	7402      	strb	r2, [r0, #16]
    cda2:	7a4a      	ldrb	r2, [r1, #9]
    cda4:	7442      	strb	r2, [r0, #17]
    cda6:	f8b1 2011 	ldrh.w	r2, [r1, #17]
    cdaa:	f8ad 2000 	strh.w	r2, [sp]
    cdae:	8242      	strh	r2, [r0, #18]
    cdb0:	7cca      	ldrb	r2, [r1, #19]
    cdb2:	7502      	strb	r2, [r0, #20]
    cdb4:	694a      	ldr	r2, [r1, #20]
    cdb6:	f8c0 2015 	str.w	r2, [r0, #21]
    cdba:	8b0a      	ldrh	r2, [r1, #24]
    cdbc:	f8a0 2019 	strh.w	r2, [r0, #25]
    cdc0:	7a0a      	ldrb	r2, [r1, #8]
    cdc2:	76c2      	strb	r2, [r0, #27]
    cdc4:	7a0d      	ldrb	r5, [r1, #8]
    cdc6:	2de5      	cmp	r5, #229	; 0xe5
    cdc8:	d300      	bcc.n	cdcc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2e4>
    cdca:	25e5      	movs	r5, #229	; 0xe5
    cdcc:	462a      	mov	r2, r5
    cdce:	301c      	adds	r0, #28
    cdd0:	311c      	adds	r1, #28
    cdd2:	f003 fc6c 	bl	106ae <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cdd6:	351a      	adds	r5, #26
    cdd8:	b2e8      	uxtb	r0, r5
    cdda:	2800      	cmp	r0, #0
    cddc:	d001      	beq.n	cde2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2fa>
    cdde:	7060      	strb	r0, [r4, #1]
    cde0:	1c80      	adds	r0, r0, #2
    cde2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cde6:	7026      	strb	r6, [r4, #0]
    cde8:	f884 a002 	strb.w	sl, [r4, #2]
    cdec:	2001      	movs	r0, #1
    cdee:	e7f6      	b.n	cdde <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    cdf0:	7026      	strb	r6, [r4, #0]
    cdf2:	70a3      	strb	r3, [r4, #2]
    cdf4:	7928      	ldrb	r0, [r5, #4]
    cdf6:	70e0      	strb	r0, [r4, #3]
    cdf8:	7968      	ldrb	r0, [r5, #5]
    cdfa:	7120      	strb	r0, [r4, #4]
    cdfc:	79a8      	ldrb	r0, [r5, #6]
    cdfe:	7160      	strb	r0, [r4, #5]
    ce00:	88e8      	ldrh	r0, [r5, #6]
    ce02:	0a00      	lsrs	r0, r0, #8
    ce04:	71a0      	strb	r0, [r4, #6]
    ce06:	7a28      	ldrb	r0, [r5, #8]
    ce08:	71e0      	strb	r0, [r4, #7]
    ce0a:	2006      	movs	r0, #6
    ce0c:	e7e7      	b.n	cdde <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    ce0e:	7026      	strb	r6, [r4, #0]
    ce10:	2020      	movs	r0, #32
    ce12:	e041      	b.n	ce98 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3b0>
    ce14:	7026      	strb	r6, [r4, #0]
    ce16:	2021      	movs	r0, #33	; 0x21
    ce18:	70a0      	strb	r0, [r4, #2]
    ce1a:	7928      	ldrb	r0, [r5, #4]
    ce1c:	70e0      	strb	r0, [r4, #3]
    ce1e:	7968      	ldrb	r0, [r5, #5]
    ce20:	7120      	strb	r0, [r4, #4]
    ce22:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    ce26:	0a00      	lsrs	r0, r0, #8
    ce28:	7160      	strb	r0, [r4, #5]
    ce2a:	79e8      	ldrb	r0, [r5, #7]
    ce2c:	71a0      	strb	r0, [r4, #6]
    ce2e:	7a28      	ldrb	r0, [r5, #8]
    ce30:	71e0      	strb	r0, [r4, #7]
    ce32:	7a68      	ldrb	r0, [r5, #9]
    ce34:	7220      	strb	r0, [r4, #8]
    ce36:	7aa8      	ldrb	r0, [r5, #10]
    ce38:	7260      	strb	r0, [r4, #9]
    ce3a:	7ae8      	ldrb	r0, [r5, #11]
    ce3c:	72a0      	strb	r0, [r4, #10]
    ce3e:	2009      	movs	r0, #9
    ce40:	e7cd      	b.n	cdde <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    ce42:	7022      	strb	r2, [r4, #0]
    ce44:	20a1      	movs	r0, #161	; 0xa1
    ce46:	70a0      	strb	r0, [r4, #2]
    ce48:	7928      	ldrb	r0, [r5, #4]
    ce4a:	70e0      	strb	r0, [r4, #3]
    ce4c:	7968      	ldrb	r0, [r5, #5]
    ce4e:	7120      	strb	r0, [r4, #4]
    ce50:	2000      	movs	r0, #0
    ce52:	7160      	strb	r0, [r4, #5]
    ce54:	2004      	movs	r0, #4
    ce56:	e7c2      	b.n	cdde <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    ce58:	7022      	strb	r2, [r4, #0]
    ce5a:	20a2      	movs	r0, #162	; 0xa2
    ce5c:	70a0      	strb	r0, [r4, #2]
    ce5e:	7928      	ldrb	r0, [r5, #4]
    ce60:	70e0      	strb	r0, [r4, #3]
    ce62:	88a8      	ldrh	r0, [r5, #4]
    ce64:	0a00      	lsrs	r0, r0, #8
    ce66:	7120      	strb	r0, [r4, #4]
    ce68:	79a8      	ldrb	r0, [r5, #6]
    ce6a:	7160      	strb	r0, [r4, #5]
    ce6c:	88e8      	ldrh	r0, [r5, #6]
    ce6e:	0a00      	lsrs	r0, r0, #8
    ce70:	71a0      	strb	r0, [r4, #6]
    ce72:	7a28      	ldrb	r0, [r5, #8]
    ce74:	71e0      	strb	r0, [r4, #7]
    ce76:	8928      	ldrh	r0, [r5, #8]
    ce78:	0a00      	lsrs	r0, r0, #8
    ce7a:	7220      	strb	r0, [r4, #8]
    ce7c:	7aa8      	ldrb	r0, [r5, #10]
    ce7e:	7260      	strb	r0, [r4, #9]
    ce80:	8968      	ldrh	r0, [r5, #10]
    ce82:	0a00      	lsrs	r0, r0, #8
    ce84:	72a0      	strb	r0, [r4, #10]
    ce86:	7b28      	ldrb	r0, [r5, #12]
    ce88:	72e0      	strb	r0, [r4, #11]
    ce8a:	89a8      	ldrh	r0, [r5, #12]
    ce8c:	0a00      	lsrs	r0, r0, #8
    ce8e:	7320      	strb	r0, [r4, #12]
    ce90:	200b      	movs	r0, #11
    ce92:	e7a4      	b.n	cdde <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    ce94:	7022      	strb	r2, [r4, #0]
    ce96:	20a3      	movs	r0, #163	; 0xa3
    ce98:	70a0      	strb	r0, [r4, #2]
    ce9a:	7928      	ldrb	r0, [r5, #4]
    ce9c:	70e0      	strb	r0, [r4, #3]
    ce9e:	88a8      	ldrh	r0, [r5, #4]
    cea0:	0a00      	lsrs	r0, r0, #8
    cea2:	7120      	strb	r0, [r4, #4]
    cea4:	79a8      	ldrb	r0, [r5, #6]
    cea6:	7160      	strb	r0, [r4, #5]
    cea8:	79e8      	ldrb	r0, [r5, #7]
    ceaa:	71a0      	strb	r0, [r4, #6]
    ceac:	2005      	movs	r0, #5
    ceae:	e796      	b.n	cdde <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    ceb0:	7026      	strb	r6, [r4, #0]
    ceb2:	2013      	movs	r0, #19
    ceb4:	70a0      	strb	r0, [r4, #2]
    ceb6:	7928      	ldrb	r0, [r5, #4]
    ceb8:	70e0      	strb	r0, [r4, #3]
    ceba:	7968      	ldrb	r0, [r5, #5]
    cebc:	7120      	strb	r0, [r4, #4]
    cebe:	f8d5 0006 	ldr.w	r0, [r5, #6]
    cec2:	f8c4 0005 	str.w	r0, [r4, #5]
    cec6:	8968      	ldrh	r0, [r5, #10]
    cec8:	f8a4 0009 	strh.w	r0, [r4, #9]
    cecc:	200a      	movs	r0, #10
    cece:	e786      	b.n	cdde <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    ced0:	7022      	strb	r2, [r4, #0]
    ced2:	20a4      	movs	r0, #164	; 0xa4
    ced4:	70a0      	strb	r0, [r4, #2]
    ced6:	7928      	ldrb	r0, [r5, #4]
    ced8:	70e0      	strb	r0, [r4, #3]
    ceda:	88a8      	ldrh	r0, [r5, #4]
    cedc:	0a00      	lsrs	r0, r0, #8
    cede:	7120      	strb	r0, [r4, #4]
    cee0:	79a8      	ldrb	r0, [r5, #6]
    cee2:	7160      	strb	r0, [r4, #5]
    cee4:	79e8      	ldrb	r0, [r5, #7]
    cee6:	71a0      	strb	r0, [r4, #6]
    cee8:	2007      	movs	r0, #7
    ceea:	e778      	b.n	cdde <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    ceec:	7022      	strb	r2, [r4, #0]
    ceee:	2080      	movs	r0, #128	; 0x80
    cef0:	70a0      	strb	r0, [r4, #2]
    cef2:	88a9      	ldrh	r1, [r5, #4]
    cef4:	f8a4 1003 	strh.w	r1, [r4, #3]
    cef8:	88e9      	ldrh	r1, [r5, #6]
    cefa:	f8a4 1005 	strh.w	r1, [r4, #5]
    cefe:	7a29      	ldrb	r1, [r5, #8]
    cf00:	71e1      	strb	r1, [r4, #7]
    cf02:	8969      	ldrh	r1, [r5, #10]
    cf04:	8121      	strh	r1, [r4, #8]
    cf06:	89a9      	ldrh	r1, [r5, #12]
    cf08:	8161      	strh	r1, [r4, #10]
    cf0a:	89e9      	ldrh	r1, [r5, #14]
    cf0c:	81a1      	strh	r1, [r4, #12]
    cf0e:	7c29      	ldrb	r1, [r5, #16]
    cf10:	f001 0101 	and.w	r1, r1, #1
    cf14:	73a1      	strb	r1, [r4, #14]
    cf16:	200d      	movs	r0, #13
    cf18:	e761      	b.n	cdde <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>

0000cf1a <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA>:
    cf1a:	223e      	movs	r2, #62	; 0x3e
    cf1c:	7002      	strb	r2, [r0, #0]
    cf1e:	2201      	movs	r2, #1
    cf20:	7082      	strb	r2, [r0, #2]
    cf22:	790a      	ldrb	r2, [r1, #4]
    cf24:	70c2      	strb	r2, [r0, #3]
    cf26:	f811 2f05 	ldrb.w	r2, [r1, #5]!
    cf2a:	7102      	strb	r2, [r0, #4]
    cf2c:	880a      	ldrh	r2, [r1, #0]
    cf2e:	0a12      	lsrs	r2, r2, #8
    cf30:	7142      	strb	r2, [r0, #5]
    cf32:	788a      	ldrb	r2, [r1, #2]
    cf34:	7182      	strb	r2, [r0, #6]
    cf36:	78ca      	ldrb	r2, [r1, #3]
    cf38:	71c2      	strb	r2, [r0, #7]
    cf3a:	684a      	ldr	r2, [r1, #4]
    cf3c:	6082      	str	r2, [r0, #8]
    cf3e:	890a      	ldrh	r2, [r1, #8]
    cf40:	8182      	strh	r2, [r0, #12]
    cf42:	7d8a      	ldrb	r2, [r1, #22]
    cf44:	7382      	strb	r2, [r0, #14]
    cf46:	8aca      	ldrh	r2, [r1, #22]
    cf48:	0a12      	lsrs	r2, r2, #8
    cf4a:	73c2      	strb	r2, [r0, #15]
    cf4c:	7e0a      	ldrb	r2, [r1, #24]
    cf4e:	7402      	strb	r2, [r0, #16]
    cf50:	8b0a      	ldrh	r2, [r1, #24]
    cf52:	0a12      	lsrs	r2, r2, #8
    cf54:	7442      	strb	r2, [r0, #17]
    cf56:	7e8a      	ldrb	r2, [r1, #26]
    cf58:	7482      	strb	r2, [r0, #18]
    cf5a:	8b4a      	ldrh	r2, [r1, #26]
    cf5c:	0a12      	lsrs	r2, r2, #8
    cf5e:	74c2      	strb	r2, [r0, #19]
    cf60:	7f09      	ldrb	r1, [r1, #28]
    cf62:	7501      	strb	r1, [r0, #20]
    cf64:	2113      	movs	r1, #19
    cf66:	7041      	strb	r1, [r0, #1]
    cf68:	4608      	mov	r0, r1
    cf6a:	4770      	bx	lr
    cf6c:	223e      	movs	r2, #62	; 0x3e
    cf6e:	7002      	strb	r2, [r0, #0]
    cf70:	220a      	movs	r2, #10
    cf72:	7082      	strb	r2, [r0, #2]
    cf74:	790a      	ldrb	r2, [r1, #4]
    cf76:	70c2      	strb	r2, [r0, #3]
    cf78:	f811 2f05 	ldrb.w	r2, [r1, #5]!
    cf7c:	7102      	strb	r2, [r0, #4]
    cf7e:	880a      	ldrh	r2, [r1, #0]
    cf80:	0a12      	lsrs	r2, r2, #8
    cf82:	7142      	strb	r2, [r0, #5]
    cf84:	788a      	ldrb	r2, [r1, #2]
    cf86:	7182      	strb	r2, [r0, #6]
    cf88:	78ca      	ldrb	r2, [r1, #3]
    cf8a:	71c2      	strb	r2, [r0, #7]
    cf8c:	684a      	ldr	r2, [r1, #4]
    cf8e:	6082      	str	r2, [r0, #8]
    cf90:	890a      	ldrh	r2, [r1, #8]
    cf92:	8182      	strh	r2, [r0, #12]
    cf94:	f8d1 200a 	ldr.w	r2, [r1, #10]
    cf98:	f8c0 200e 	str.w	r2, [r0, #14]
    cf9c:	89ca      	ldrh	r2, [r1, #14]
    cf9e:	8242      	strh	r2, [r0, #18]
    cfa0:	690a      	ldr	r2, [r1, #16]
    cfa2:	6142      	str	r2, [r0, #20]
    cfa4:	8a8a      	ldrh	r2, [r1, #20]
    cfa6:	8302      	strh	r2, [r0, #24]
    cfa8:	7d8a      	ldrb	r2, [r1, #22]
    cfaa:	7682      	strb	r2, [r0, #26]
    cfac:	8aca      	ldrh	r2, [r1, #22]
    cfae:	0a12      	lsrs	r2, r2, #8
    cfb0:	76c2      	strb	r2, [r0, #27]
    cfb2:	7e0a      	ldrb	r2, [r1, #24]
    cfb4:	7702      	strb	r2, [r0, #28]
    cfb6:	8b0a      	ldrh	r2, [r1, #24]
    cfb8:	0a12      	lsrs	r2, r2, #8
    cfba:	7742      	strb	r2, [r0, #29]
    cfbc:	7e8a      	ldrb	r2, [r1, #26]
    cfbe:	7782      	strb	r2, [r0, #30]
    cfc0:	8b4a      	ldrh	r2, [r1, #26]
    cfc2:	0a12      	lsrs	r2, r2, #8
    cfc4:	77c2      	strb	r2, [r0, #31]
    cfc6:	7f09      	ldrb	r1, [r1, #28]
    cfc8:	f880 1020 	strb.w	r1, [r0, #32]
    cfcc:	211f      	movs	r1, #31
    cfce:	7041      	strb	r1, [r0, #1]
    cfd0:	4608      	mov	r0, r1
    cfd2:	4770      	bx	lr
    cfd4:	094a      	lsrs	r2, r1, #5
    cfd6:	f001 011f 	and.w	r1, r1, #31
    cfda:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
    cfde:	40c8      	lsrs	r0, r1
    cfe0:	f000 0001 	and.w	r0, r0, #1
    cfe4:	4770      	bx	lr

0000cfe6 <sdc_hci_data_put>:
    cfe6:	b510      	push	{r4, lr}
    cfe8:	f06f 0415 	mvn.w	r4, #21
    cfec:	b120      	cbz	r0, cff8 <sdc_hci_data_put+0x12>
    cfee:	f7ff fcf3 	bl	c9d8 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
    cff2:	b108      	cbz	r0, cff8 <sdc_hci_data_put+0x12>
    cff4:	2000      	movs	r0, #0
    cff6:	bd10      	pop	{r4, pc}
    cff8:	4620      	mov	r0, r4
    cffa:	bd10      	pop	{r4, pc}

0000cffc <sdc_hci_get>:
    cffc:	b510      	push	{r4, lr}
    cffe:	460c      	mov	r4, r1
    d000:	b130      	cbz	r0, d010 <sdc_hci_get+0x14>
    d002:	b12c      	cbz	r4, d010 <sdc_hci_get+0x14>
    d004:	f7f3 fe28 	bl	c58 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>
    d008:	b128      	cbz	r0, d016 <sdc_hci_get+0x1a>
    d00a:	7020      	strb	r0, [r4, #0]
    d00c:	2000      	movs	r0, #0
    d00e:	bd10      	pop	{r4, pc}
    d010:	f06f 0015 	mvn.w	r0, #21
    d014:	bd10      	pop	{r4, pc}
    d016:	f06f 0022 	mvn.w	r0, #34	; 0x22
    d01a:	bd10      	pop	{r4, pc}

0000d01c <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
    d01c:	f002 bd48 	b.w	fab0 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0000d020 <sdc_hci_cmd_cb_read_transmit_power_level>:
    d020:	f002 bd63 	b.w	faea <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0000d024 <sdc_hci_cmd_cb_set_event_mask>:
    d024:	b510      	push	{r4, lr}
    d026:	f7f3 febb 	bl	da0 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    d02a:	2000      	movs	r0, #0
    d02c:	bd10      	pop	{r4, pc}

0000d02e <sdc_hci_cmd_cb_set_event_mask_page_2>:
    d02e:	b510      	push	{r4, lr}
    d030:	f7f3 fec8 	bl	dc4 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
    d034:	2000      	movs	r0, #0
    d036:	bd10      	pop	{r4, pc}

0000d038 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
    d038:	f002 bd78 	b.w	fb2c <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

0000d03c <sdc_hci_cmd_vs_conn_event_extend>:
    d03c:	b508      	push	{r3, lr}
    d03e:	7800      	ldrb	r0, [r0, #0]
    d040:	f88d 0000 	strb.w	r0, [sp]
    d044:	4668      	mov	r0, sp
    d046:	f002 fd0f 	bl	fa68 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    d04a:	bd08      	pop	{r3, pc}

0000d04c <sdc_hci_cmd_vs_conn_update>:
    d04c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    d04e:	2100      	movs	r1, #0
    d050:	9100      	str	r1, [sp, #0]
    d052:	9101      	str	r1, [sp, #4]
    d054:	9102      	str	r1, [sp, #8]
    d056:	9103      	str	r1, [sp, #12]
    d058:	f8d0 1002 	ldr.w	r1, [r0, #2]
    d05c:	f641 524c 	movw	r2, #7500	; 0x1d4c
    d060:	4291      	cmp	r1, r2
    d062:	d304      	bcc.n	d06e <sdc_hci_cmd_vs_conn_update+0x22>
    d064:	f240 42e2 	movw	r2, #1250	; 0x4e2
    d068:	fbb1 f1f2 	udiv	r1, r1, r2
    d06c:	e005      	b.n	d07a <sdc_hci_cmd_vs_conn_update+0x2e>
    d06e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d072:	fbb1 f1f2 	udiv	r1, r1, r2
    d076:	f501 6150 	add.w	r1, r1, #3328	; 0xd00
    d07a:	8802      	ldrh	r2, [r0, #0]
    d07c:	b289      	uxth	r1, r1
    d07e:	f8ad 2000 	strh.w	r2, [sp]
    d082:	f8ad 1002 	strh.w	r1, [sp, #2]
    d086:	f8ad 1004 	strh.w	r1, [sp, #4]
    d08a:	88c1      	ldrh	r1, [r0, #6]
    d08c:	f8ad 1006 	strh.w	r1, [sp, #6]
    d090:	8900      	ldrh	r0, [r0, #8]
    d092:	f8ad 0008 	strh.w	r0, [sp, #8]
    d096:	4668      	mov	r0, sp
    d098:	f002 fa99 	bl	f5ce <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>
    d09c:	b004      	add	sp, #16
    d09e:	bd10      	pop	{r4, pc}

0000d0a0 <sdc_hci_cmd_vs_event_length_set>:
    d0a0:	f7fa b876 	b.w	7190 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000d0a4 <sdc_hci_cmd_vs_llpm_mode_set>:
    d0a4:	2001      	movs	r0, #1
    d0a6:	4770      	bx	lr

0000d0a8 <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    d0a8:	7800      	ldrb	r0, [r0, #0]
    d0aa:	b100      	cbz	r0, d0ae <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    d0ac:	2001      	movs	r0, #1
    d0ae:	f002 bc0a 	b.w	f8c6 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000d0b2 <sdc_hci_cmd_vs_zephyr_read_chip_temp>:
    d0b2:	b510      	push	{r4, lr}
    d0b4:	4604      	mov	r4, r0
    d0b6:	f7ff f9e3 	bl	c480 <mpsl_temperature_get>
    d0ba:	17c1      	asrs	r1, r0, #31
    d0bc:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    d0c0:	1080      	asrs	r0, r0, #2
    d0c2:	287f      	cmp	r0, #127	; 0x7f
    d0c4:	dd01      	ble.n	d0ca <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x18>
    d0c6:	207f      	movs	r0, #127	; 0x7f
    d0c8:	e004      	b.n	d0d4 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
    d0ca:	f06f 017e 	mvn.w	r1, #126	; 0x7e
    d0ce:	4288      	cmp	r0, r1
    d0d0:	da00      	bge.n	d0d4 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
    d0d2:	4608      	mov	r0, r1
    d0d4:	7020      	strb	r0, [r4, #0]
    d0d6:	2000      	movs	r0, #0
    d0d8:	bd10      	pop	{r4, pc}

0000d0da <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
    d0da:	b570      	push	{r4, r5, r6, lr}
    d0dc:	4605      	mov	r5, r0
    d0de:	2210      	movs	r2, #16
    d0e0:	2100      	movs	r1, #0
    d0e2:	f003 fb5e 	bl	107a2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d0e6:	2210      	movs	r2, #16
    d0e8:	2100      	movs	r1, #0
    d0ea:	f105 0010 	add.w	r0, r5, #16
    d0ee:	f003 fb58 	bl	107a2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d0f2:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    d0f6:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    d0fa:	1c40      	adds	r0, r0, #1
    d0fc:	d10b      	bne.n	d116 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    d0fe:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    d102:	1c40      	adds	r0, r0, #1
    d104:	d107      	bne.n	d116 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    d106:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    d10a:	1c40      	adds	r0, r0, #1
    d10c:	d103      	bne.n	d116 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    d10e:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    d112:	1c40      	adds	r0, r0, #1
    d114:	d00b      	beq.n	d12e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x54>
    d116:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
    d11a:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    d11e:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
    d122:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    d126:	612a      	str	r2, [r5, #16]
    d128:	6168      	str	r0, [r5, #20]
    d12a:	61a9      	str	r1, [r5, #24]
    d12c:	61eb      	str	r3, [r5, #28]
    d12e:	2000      	movs	r0, #0
    d130:	f7f4 fab2 	bl	1698 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    d134:	b918      	cbnz	r0, d13e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x64>
    d136:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    d13a:	07c0      	lsls	r0, r0, #31
    d13c:	d118      	bne.n	d170 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    d13e:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    d142:	1c40      	adds	r0, r0, #1
    d144:	d10b      	bne.n	d15e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    d146:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    d14a:	1c40      	adds	r0, r0, #1
    d14c:	d107      	bne.n	d15e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    d14e:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    d152:	1c40      	adds	r0, r0, #1
    d154:	d103      	bne.n	d15e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    d156:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    d15a:	1c40      	adds	r0, r0, #1
    d15c:	d008      	beq.n	d170 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    d15e:	f854 0f90 	ldr.w	r0, [r4, #144]!
    d162:	6861      	ldr	r1, [r4, #4]
    d164:	68a2      	ldr	r2, [r4, #8]
    d166:	68e3      	ldr	r3, [r4, #12]
    d168:	6028      	str	r0, [r5, #0]
    d16a:	6069      	str	r1, [r5, #4]
    d16c:	60aa      	str	r2, [r5, #8]
    d16e:	60eb      	str	r3, [r5, #12]
    d170:	2000      	movs	r0, #0
    d172:	bd70      	pop	{r4, r5, r6, pc}

0000d174 <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    d174:	b538      	push	{r3, r4, r5, lr}
    d176:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    d17a:	4604      	mov	r4, r0
    d17c:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    d180:	1c40      	adds	r0, r0, #1
    d182:	d105      	bne.n	d190 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
    d184:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    d188:	43c0      	mvns	r0, r0
    d18a:	0400      	lsls	r0, r0, #16
    d18c:	0c00      	lsrs	r0, r0, #16
    d18e:	d03e      	beq.n	d20e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    d190:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    d194:	07c0      	lsls	r0, r0, #31
    d196:	d03a      	beq.n	d20e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    d198:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    d19c:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
    d1a0:	f8ad 1000 	strh.w	r1, [sp]
    d1a4:	f8c4 0001 	str.w	r0, [r4, #1]
    d1a8:	f8bd 0000 	ldrh.w	r0, [sp]
    d1ac:	f8a4 0005 	strh.w	r0, [r4, #5]
    d1b0:	79a0      	ldrb	r0, [r4, #6]
    d1b2:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    d1b6:	71a0      	strb	r0, [r4, #6]
    d1b8:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    d1bc:	1c40      	adds	r0, r0, #1
    d1be:	d00f      	beq.n	d1e0 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d1c0:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    d1c4:	1c40      	adds	r0, r0, #1
    d1c6:	d00b      	beq.n	d1e0 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d1c8:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
    d1cc:	1c40      	adds	r0, r0, #1
    d1ce:	d007      	beq.n	d1e0 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d1d0:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    d1d4:	1c40      	adds	r0, r0, #1
    d1d6:	d003      	beq.n	d1e0 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d1d8:	2000      	movs	r0, #0
    d1da:	f7f4 fa5d 	bl	1698 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    d1de:	b140      	cbz	r0, d1f2 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x7e>
    d1e0:	2210      	movs	r2, #16
    d1e2:	2100      	movs	r1, #0
    d1e4:	1de0      	adds	r0, r4, #7
    d1e6:	f003 fadc 	bl	107a2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d1ea:	2001      	movs	r0, #1
    d1ec:	7020      	strb	r0, [r4, #0]
    d1ee:	2000      	movs	r0, #0
    d1f0:	bd38      	pop	{r3, r4, r5, pc}
    d1f2:	f855 2f90 	ldr.w	r2, [r5, #144]!
    d1f6:	6869      	ldr	r1, [r5, #4]
    d1f8:	68a8      	ldr	r0, [r5, #8]
    d1fa:	68eb      	ldr	r3, [r5, #12]
    d1fc:	f8c4 2007 	str.w	r2, [r4, #7]
    d200:	f8c4 100b 	str.w	r1, [r4, #11]
    d204:	f8c4 000f 	str.w	r0, [r4, #15]
    d208:	f8c4 3013 	str.w	r3, [r4, #19]
    d20c:	e7ed      	b.n	d1ea <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x76>
    d20e:	2000      	movs	r0, #0
    d210:	e7ec      	b.n	d1ec <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>

0000d212 <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    d212:	f002 bc18 	b.w	fa46 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000d216 <sdc_hci_cmd_ip_read_bd_addr>:
    d216:	f002 bc5c 	b.w	fad2 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000d21a <sdc_hci_cmd_ip_read_local_version_information>:
    d21a:	f7fa b815 	b.w	7248 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000d21e <sdc_hci_cmd_le_add_device_to_filter_accept_list>:
    d21e:	f002 b9b5 	b.w	f58c <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000d222 <sdc_hci_cmd_le_clear_filter_accept_list>:
    d222:	f002 b9ca 	b.w	f5ba <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000d226 <sdc_hci_cmd_le_conn_update>:
    d226:	f002 b9d2 	b.w	f5ce <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>

0000d22a <sdc_hci_cmd_le_create_conn>:
    d22a:	f7f9 be97 	b.w	6f5c <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA>

0000d22e <sdc_hci_cmd_le_create_conn_cancel>:
    d22e:	f002 ba11 	b.w	f654 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y>

0000d232 <sdc_hci_cmd_le_enable_encryption>:
    d232:	f002 bb05 	b.w	f840 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ>

0000d236 <sdc_hci_cmd_le_encrypt>:
    d236:	f002 ba1d 	b.w	f674 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000d23a <sdc_hci_cmd_le_rand>:
    d23a:	f002 ba24 	b.w	f686 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000d23e <sdc_hci_cmd_le_read_buffer_size>:
    d23e:	f7f9 bee9 	b.w	7014 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000d242 <sdc_hci_cmd_le_read_channel_map>:
    d242:	f7f9 bef1 	b.w	7028 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0000d246 <sdc_hci_cmd_le_read_filter_accept_list_size>:
    d246:	f002 ba58 	b.w	f6fa <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000d24a <sdc_hci_cmd_le_read_max_data_length>:
    d24a:	f002 ba22 	b.w	f692 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0000d24e <sdc_hci_cmd_le_read_phy>:
    d24e:	f7f9 bf13 	b.w	7078 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0000d252 <sdc_hci_cmd_le_read_remote_features>:
    d252:	f002 ba27 	b.w	f6a4 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0000d256 <sdc_hci_cmd_le_read_suggested_default_data_length>:
    d256:	f7f9 bf35 	b.w	70c4 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0000d25a <sdc_hci_cmd_le_read_transmit_power>:
    d25a:	f002 ba3e 	b.w	f6da <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000d25e <sdc_hci_cmd_le_remove_device_from_filter_accept_list>:
    d25e:	f002 ba50 	b.w	f702 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000d262 <sdc_hci_cmd_le_set_data_length>:
    d262:	f002 ba63 	b.w	f72c <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0000d266 <sdc_hci_cmd_le_set_default_phy>:
    d266:	f7f9 bf37 	b.w	70d8 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0000d26a <sdc_hci_cmd_le_set_event_mask>:
    d26a:	b510      	push	{r4, lr}
    d26c:	f7f3 fd86 	bl	d7c <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    d270:	2000      	movs	r0, #0
    d272:	bd10      	pop	{r4, pc}

0000d274 <sdc_hci_cmd_le_set_host_channel_classification>:
    d274:	f7f9 bf58 	b.w	7128 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI>

0000d278 <sdc_hci_cmd_le_set_phy>:
    d278:	f002 ba78 	b.w	f76c <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0000d27c <sdc_hci_cmd_le_set_random_address>:
    d27c:	f002 ba8f 	b.w	f79e <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000d280 <sdc_hci_cmd_le_set_scan_enable>:
    d280:	f002 ba9b 	b.w	f7ba <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ>

0000d284 <sdc_hci_cmd_le_set_scan_params>:
    d284:	f002 baaf 	b.w	f7e6 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA>

0000d288 <sdc_hci_cmd_le_write_suggested_default_data_length>:
    d288:	f002 bb0c 	b.w	f8a4 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0000d28c <sdc_hci_cmd_lc_disconnect>:
    d28c:	f002 b933 	b.w	f4f6 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0000d290 <sdc_hci_cmd_lc_read_remote_version_information>:
    d290:	f7f9 bfe4 	b.w	725c <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
    d294:	b570      	push	{r4, r5, r6, lr}
    d296:	880b      	ldrh	r3, [r1, #0]
    d298:	7cc4      	ldrb	r4, [r0, #19]
    d29a:	f100 0518 	add.w	r5, r0, #24
    d29e:	f3c3 060e 	ubfx	r6, r3, #0, #15
    d2a2:	8802      	ldrh	r2, [r0, #0]
    d2a4:	4435      	add	r5, r6
    d2a6:	1d64      	adds	r4, r4, #5
    d2a8:	882d      	ldrh	r5, [r5, #0]
    d2aa:	4422      	add	r2, r4
    d2ac:	b292      	uxth	r2, r2
    d2ae:	4425      	add	r5, r4
    d2b0:	1e54      	subs	r4, r2, #1
    d2b2:	442c      	add	r4, r5
    d2b4:	fb94 f4f2 	sdiv	r4, r4, r2
    d2b8:	fb02 6204 	mla	r2, r2, r4, r6
    d2bc:	8840      	ldrh	r0, [r0, #2]
    d2be:	b292      	uxth	r2, r2
    d2c0:	4290      	cmp	r0, r2
    d2c2:	d903      	bls.n	d2cc <sdc_hci_cmd_lc_read_remote_version_information+0x3c>
    d2c4:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    d2c8:	4310      	orrs	r0, r2
    d2ca:	e002      	b.n	d2d2 <sdc_hci_cmd_lc_read_remote_version_information+0x42>
    d2cc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    d2d0:	4398      	bics	r0, r3
    d2d2:	8008      	strh	r0, [r1, #0]
    d2d4:	bd70      	pop	{r4, r5, r6, pc}
    d2d6:	0442      	lsls	r2, r0, #17
    d2d8:	ebb2 4f41 	cmp.w	r2, r1, lsl #17
    d2dc:	d107      	bne.n	d2ee <sdc_hci_cmd_lc_read_remote_version_information+0x5e>
    d2de:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    d2e2:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    d2e6:	4288      	cmp	r0, r1
    d2e8:	d001      	beq.n	d2ee <sdc_hci_cmd_lc_read_remote_version_information+0x5e>
    d2ea:	2001      	movs	r0, #1
    d2ec:	4770      	bx	lr
    d2ee:	2000      	movs	r0, #0
    d2f0:	4770      	bx	lr

0000d2f2 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    d2f2:	8881      	ldrh	r1, [r0, #4]
    d2f4:	88c0      	ldrh	r0, [r0, #6]
    d2f6:	4288      	cmp	r0, r1
    d2f8:	d101      	bne.n	d2fe <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
    d2fa:	2001      	movs	r0, #1
    d2fc:	4770      	bx	lr
    d2fe:	2000      	movs	r0, #0
    d300:	4770      	bx	lr

0000d302 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
    d302:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d306:	460f      	mov	r7, r1
    d308:	4604      	mov	r4, r0
    d30a:	f100 0118 	add.w	r1, r0, #24
    d30e:	8880      	ldrh	r0, [r0, #4]
    d310:	2600      	movs	r6, #0
    d312:	f3c0 000e 	ubfx	r0, r0, #0, #15
    d316:	1845      	adds	r5, r0, r1
    d318:	603e      	str	r6, [r7, #0]
    d31a:	89e0      	ldrh	r0, [r4, #14]
    d31c:	2800      	cmp	r0, #0
    d31e:	d016      	beq.n	d34e <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x4c>
    d320:	8961      	ldrh	r1, [r4, #10]
    d322:	4408      	add	r0, r1
    d324:	b280      	uxth	r0, r0
    d326:	8160      	strh	r0, [r4, #10]
    d328:	8829      	ldrh	r1, [r5, #0]
    d32a:	4288      	cmp	r0, r1
    d32c:	d905      	bls.n	d33a <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x38>
    d32e:	f240 1151 	movw	r1, #337	; 0x151
    d332:	f04f 0014 	mov.w	r0, #20
    d336:	f7f3 fba3 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d33a:	d106      	bne.n	d34a <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x48>
    d33c:	f104 0104 	add.w	r1, r4, #4
    d340:	4620      	mov	r0, r4
    d342:	f7ff ffa7 	bl	d294 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d346:	8166      	strh	r6, [r4, #10]
    d348:	603d      	str	r5, [r7, #0]
    d34a:	81e6      	strh	r6, [r4, #14]
    d34c:	2001      	movs	r0, #1
    d34e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d352 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    d352:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d356:	4604      	mov	r4, r0
    d358:	f100 0318 	add.w	r3, r0, #24
    d35c:	88c0      	ldrh	r0, [r0, #6]
    d35e:	460e      	mov	r6, r1
    d360:	f3c0 070e 	ubfx	r7, r0, #0, #15
    d364:	8a20      	ldrh	r0, [r4, #16]
    d366:	19d9      	adds	r1, r3, r7
    d368:	b108      	cbz	r0, d36e <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1c>
    d36a:	42b0      	cmp	r0, r6
    d36c:	d202      	bcs.n	d374 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x22>
    d36e:	2000      	movs	r0, #0
    d370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d374:	89a0      	ldrh	r0, [r4, #12]
    d376:	2500      	movs	r5, #0
    d378:	b140      	cbz	r0, d38c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3a>
    d37a:	f8b1 c000 	ldrh.w	ip, [r1]
    d37e:	4560      	cmp	r0, ip
    d380:	d006      	beq.n	d390 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3e>
    d382:	f44f 7101 	mov.w	r1, #516	; 0x204
    d386:	2014      	movs	r0, #20
    d388:	f7f3 fb7a 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d38c:	800d      	strh	r5, [r1, #0]
    d38e:	e00e      	b.n	d3ae <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
    d390:	f894 c013 	ldrb.w	ip, [r4, #19]
    d394:	4418      	add	r0, r3
    d396:	f10c 0c05 	add.w	ip, ip, #5
    d39a:	44bc      	add	ip, r7
    d39c:	4460      	add	r0, ip
    d39e:	f8b4 c014 	ldrh.w	ip, [r4, #20]
    d3a2:	f820 cc03 	strh.w	ip, [r0, #-3]
    d3a6:	f894 c016 	ldrb.w	ip, [r4, #22]
    d3aa:	f800 cc01 	strb.w	ip, [r0, #-1]
    d3ae:	89a0      	ldrh	r0, [r4, #12]
    d3b0:	4430      	add	r0, r6
    d3b2:	81a0      	strh	r0, [r4, #12]
    d3b4:	8808      	ldrh	r0, [r1, #0]
    d3b6:	4430      	add	r0, r6
    d3b8:	8008      	strh	r0, [r1, #0]
    d3ba:	b12a      	cbz	r2, d3c8 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x76>
    d3bc:	1da1      	adds	r1, r4, #6
    d3be:	4620      	mov	r0, r4
    d3c0:	f7ff ff68 	bl	d294 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d3c4:	81a5      	strh	r5, [r4, #12]
    d3c6:	e00a      	b.n	d3de <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x8c>
    d3c8:	7ce0      	ldrb	r0, [r4, #19]
    d3ca:	89a1      	ldrh	r1, [r4, #12]
    d3cc:	1d40      	adds	r0, r0, #5
    d3ce:	4438      	add	r0, r7
    d3d0:	4419      	add	r1, r3
    d3d2:	4408      	add	r0, r1
    d3d4:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    d3d8:	82a1      	strh	r1, [r4, #20]
    d3da:	7880      	ldrb	r0, [r0, #2]
    d3dc:	75a0      	strb	r0, [r4, #22]
    d3de:	8225      	strh	r5, [r4, #16]
    d3e0:	2001      	movs	r0, #1
    d3e2:	e7c5      	b.n	d370 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>

0000d3e4 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>:
    d3e4:	1c80      	adds	r0, r0, #2
    d3e6:	4770      	bx	lr

0000d3e8 <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>:
    d3e8:	b510      	push	{r4, lr}
    d3ea:	88c2      	ldrh	r2, [r0, #6]
    d3ec:	8903      	ldrh	r3, [r0, #8]
    d3ee:	f3c2 010e 	ubfx	r1, r2, #0, #15
    d3f2:	f3c3 040e 	ubfx	r4, r3, #0, #15
    d3f6:	1a61      	subs	r1, r4, r1
    d3f8:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
    d3fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    d400:	429a      	cmp	r2, r3
    d402:	d101      	bne.n	d408 <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY+0x20>
    d404:	8842      	ldrh	r2, [r0, #2]
    d406:	4411      	add	r1, r2
    d408:	7cc2      	ldrb	r2, [r0, #19]
    d40a:	8800      	ldrh	r0, [r0, #0]
    d40c:	4410      	add	r0, r2
    d40e:	1d40      	adds	r0, r0, #5
    d410:	b280      	uxth	r0, r0
    d412:	fb91 f0f0 	sdiv	r0, r1, r0
    d416:	b280      	uxth	r0, r0
    d418:	bd10      	pop	{r4, pc}

0000d41a <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    d41a:	b510      	push	{r4, lr}
    d41c:	4604      	mov	r4, r0
    d41e:	88c0      	ldrh	r0, [r0, #6]
    d420:	88a1      	ldrh	r1, [r4, #4]
    d422:	4281      	cmp	r1, r0
    d424:	d003      	beq.n	d42e <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x14>
    d426:	8960      	ldrh	r0, [r4, #10]
    d428:	b908      	cbnz	r0, d42e <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x14>
    d42a:	89e0      	ldrh	r0, [r4, #14]
    d42c:	b108      	cbz	r0, d432 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x18>
    d42e:	2000      	movs	r0, #0
    d430:	bd10      	pop	{r4, pc}
    d432:	1d21      	adds	r1, r4, #4
    d434:	4620      	mov	r0, r4
    d436:	f7ff ff2d 	bl	d294 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d43a:	2000      	movs	r0, #0
    d43c:	81e0      	strh	r0, [r4, #14]
    d43e:	2001      	movs	r0, #1
    d440:	bd10      	pop	{r4, pc}

0000d442 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
    d442:	b510      	push	{r4, lr}
    d444:	4604      	mov	r4, r0
    d446:	f100 0218 	add.w	r2, r0, #24
    d44a:	88c0      	ldrh	r0, [r0, #6]
    d44c:	f3c0 000e 	ubfx	r0, r0, #0, #15
    d450:	4402      	add	r2, r0
    d452:	8820      	ldrh	r0, [r4, #0]
    d454:	2845      	cmp	r0, #69	; 0x45
    d456:	d200      	bcs.n	d45a <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x18>
    d458:	2045      	movs	r0, #69	; 0x45
    d45a:	4288      	cmp	r0, r1
    d45c:	d204      	bcs.n	d468 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x26>
    d45e:	f44f 7182 	mov.w	r1, #260	; 0x104
    d462:	2014      	movs	r0, #20
    d464:	f7f3 fb0c 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d468:	7ca0      	ldrb	r0, [r4, #18]
    d46a:	2800      	cmp	r0, #0
    d46c:	d003      	beq.n	d476 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x34>
    d46e:	8810      	ldrh	r0, [r2, #0]
    d470:	4288      	cmp	r0, r1
    d472:	d201      	bcs.n	d478 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x36>
    d474:	2000      	movs	r0, #0
    d476:	bd10      	pop	{r4, pc}
    d478:	8011      	strh	r1, [r2, #0]
    d47a:	1da1      	adds	r1, r4, #6
    d47c:	4620      	mov	r0, r4
    d47e:	f7ff ff09 	bl	d294 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d482:	2000      	movs	r0, #0
    d484:	74a0      	strb	r0, [r4, #18]
    d486:	2001      	movs	r0, #1
    d488:	bd10      	pop	{r4, pc}

0000d48a <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    d48a:	b510      	push	{r4, lr}
    d48c:	88c4      	ldrh	r4, [r0, #6]
    d48e:	8883      	ldrh	r3, [r0, #4]
    d490:	4601      	mov	r1, r0
    d492:	f100 0218 	add.w	r2, r0, #24
    d496:	f3c3 000e 	ubfx	r0, r3, #0, #15
    d49a:	4410      	add	r0, r2
    d49c:	42a3      	cmp	r3, r4
    d49e:	d002      	beq.n	d4a6 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x1c>
    d4a0:	8949      	ldrh	r1, [r1, #10]
    d4a2:	2900      	cmp	r1, #0
    d4a4:	d000      	beq.n	d4a8 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x1e>
    d4a6:	2000      	movs	r0, #0
    d4a8:	bd10      	pop	{r4, pc}

0000d4aa <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>:
    d4aa:	8803      	ldrh	r3, [r0, #0]
    d4ac:	2b45      	cmp	r3, #69	; 0x45
    d4ae:	d200      	bcs.n	d4b2 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA+0x8>
    d4b0:	2345      	movs	r3, #69	; 0x45
    d4b2:	8013      	strh	r3, [r2, #0]
    d4b4:	88c2      	ldrh	r2, [r0, #6]
    d4b6:	f3c2 030e 	ubfx	r3, r2, #0, #15
    d4ba:	f100 0218 	add.w	r2, r0, #24
    d4be:	441a      	add	r2, r3
    d4c0:	600a      	str	r2, [r1, #0]
    d4c2:	8980      	ldrh	r0, [r0, #12]
    d4c4:	4770      	bx	lr

0000d4c6 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    d4c6:	7cc0      	ldrb	r0, [r0, #19]
    d4c8:	1d40      	adds	r0, r0, #5
    d4ca:	4408      	add	r0, r1
    d4cc:	1ec0      	subs	r0, r0, #3
    d4ce:	6010      	str	r0, [r2, #0]
    d4d0:	8808      	ldrh	r0, [r1, #0]
    d4d2:	4770      	bx	lr

0000d4d4 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
    d4d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d4d8:	460e      	mov	r6, r1
    d4da:	88c1      	ldrh	r1, [r0, #6]
    d4dc:	8902      	ldrh	r2, [r0, #8]
    d4de:	4604      	mov	r4, r0
    d4e0:	f100 0818 	add.w	r8, r0, #24
    d4e4:	8800      	ldrh	r0, [r0, #0]
    d4e6:	f3c1 050e 	ubfx	r5, r1, #0, #15
    d4ea:	f3c2 070e 	ubfx	r7, r2, #0, #15
    d4ee:	2845      	cmp	r0, #69	; 0x45
    d4f0:	d200      	bcs.n	d4f4 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
    d4f2:	2045      	movs	r0, #69	; 0x45
    d4f4:	42b0      	cmp	r0, r6
    d4f6:	d203      	bcs.n	d500 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x2c>
    d4f8:	21c6      	movs	r1, #198	; 0xc6
    d4fa:	2014      	movs	r0, #20
    d4fc:	f7f3 fac0 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d500:	4610      	mov	r0, r2
    d502:	f7ff fee8 	bl	d2d6 <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    d506:	b110      	cbz	r0, d50e <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x3a>
    d508:	2000      	movs	r0, #0
    d50a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d50e:	42af      	cmp	r7, r5
    d510:	d908      	bls.n	d524 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    d512:	7ce1      	ldrb	r1, [r4, #19]
    d514:	1b78      	subs	r0, r7, r5
    d516:	1a40      	subs	r0, r0, r1
    d518:	1f40      	subs	r0, r0, #5
    d51a:	4286      	cmp	r6, r0
    d51c:	dd02      	ble.n	d524 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    d51e:	2000      	movs	r0, #0
    d520:	74a0      	strb	r0, [r4, #18]
    d522:	e7f1      	b.n	d508 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x34>
    d524:	eb08 0005 	add.w	r0, r8, r5
    d528:	2101      	movs	r1, #1
    d52a:	8006      	strh	r6, [r0, #0]
    d52c:	74a1      	strb	r1, [r4, #18]
    d52e:	e7ec      	b.n	d50a <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x36>

0000d530 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
    d530:	b538      	push	{r3, r4, r5, lr}
    d532:	88c4      	ldrh	r4, [r0, #6]
    d534:	8881      	ldrh	r1, [r0, #4]
    d536:	f100 0218 	add.w	r2, r0, #24
    d53a:	f3c1 030e 	ubfx	r3, r1, #0, #15
    d53e:	441a      	add	r2, r3
    d540:	42a1      	cmp	r1, r4
    d542:	d010      	beq.n	d566 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    d544:	8943      	ldrh	r3, [r0, #10]
    d546:	89c5      	ldrh	r5, [r0, #14]
    d548:	8812      	ldrh	r2, [r2, #0]
    d54a:	442b      	add	r3, r5
    d54c:	4293      	cmp	r3, r2
    d54e:	d308      	bcc.n	d562 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x32>
    d550:	f8ad 1000 	strh.w	r1, [sp]
    d554:	4669      	mov	r1, sp
    d556:	f7ff fe9d 	bl	d294 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d55a:	f8bd 0000 	ldrh.w	r0, [sp]
    d55e:	42a0      	cmp	r0, r4
    d560:	d001      	beq.n	d566 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    d562:	2001      	movs	r0, #1
    d564:	bd38      	pop	{r3, r4, r5, pc}
    d566:	2000      	movs	r0, #0
    d568:	bd38      	pop	{r3, r4, r5, pc}

0000d56a <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
    d56a:	b570      	push	{r4, r5, r6, lr}
    d56c:	88c6      	ldrh	r6, [r0, #6]
    d56e:	8885      	ldrh	r5, [r0, #4]
    d570:	4603      	mov	r3, r0
    d572:	f100 0418 	add.w	r4, r0, #24
    d576:	f3c5 000e 	ubfx	r0, r5, #0, #15
    d57a:	4420      	add	r0, r4
    d57c:	42b5      	cmp	r5, r6
    d57e:	d102      	bne.n	d586 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x1c>
    d580:	2000      	movs	r0, #0
    d582:	81d8      	strh	r0, [r3, #14]
    d584:	bd70      	pop	{r4, r5, r6, pc}
    d586:	8804      	ldrh	r4, [r0, #0]
    d588:	895d      	ldrh	r5, [r3, #10]
    d58a:	7cde      	ldrb	r6, [r3, #19]
    d58c:	1b64      	subs	r4, r4, r5
    d58e:	4435      	add	r5, r6
    d590:	4428      	add	r0, r5
    d592:	880d      	ldrh	r5, [r1, #0]
    d594:	b2a4      	uxth	r4, r4
    d596:	1c80      	adds	r0, r0, #2
    d598:	42a5      	cmp	r5, r4
    d59a:	d900      	bls.n	d59e <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x34>
    d59c:	800c      	strh	r4, [r1, #0]
    d59e:	895c      	ldrh	r4, [r3, #10]
    d5a0:	b124      	cbz	r4, d5ac <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x42>
    d5a2:	2400      	movs	r4, #0
    d5a4:	7014      	strb	r4, [r2, #0]
    d5a6:	8809      	ldrh	r1, [r1, #0]
    d5a8:	81d9      	strh	r1, [r3, #14]
    d5aa:	bd70      	pop	{r4, r5, r6, pc}
    d5ac:	2401      	movs	r4, #1
    d5ae:	e7f9      	b.n	d5a4 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3a>

0000d5b0 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    d5b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d5b4:	461d      	mov	r5, r3
    d5b6:	4616      	mov	r6, r2
    d5b8:	9f06      	ldr	r7, [sp, #24]
    d5ba:	460b      	mov	r3, r1
    d5bc:	4604      	mov	r4, r0
    d5be:	463a      	mov	r2, r7
    d5c0:	4629      	mov	r1, r5
    d5c2:	4630      	mov	r0, r6
    d5c4:	f000 f839 	bl	d63a <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d5c8:	4283      	cmp	r3, r0
    d5ca:	d201      	bcs.n	d5d0 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    d5cc:	219e      	movs	r1, #158	; 0x9e
    d5ce:	e012      	b.n	d5f6 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x46>
    d5d0:	07a0      	lsls	r0, r4, #30
    d5d2:	d001      	beq.n	d5d8 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x28>
    d5d4:	219f      	movs	r1, #159	; 0x9f
    d5d6:	e00e      	b.n	d5f6 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x46>
    d5d8:	2218      	movs	r2, #24
    d5da:	2100      	movs	r1, #0
    d5dc:	4620      	mov	r0, r4
    d5de:	f003 f8e0 	bl	107a2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d5e2:	19a8      	adds	r0, r5, r6
    d5e4:	1d40      	adds	r0, r0, #5
    d5e6:	4378      	muls	r0, r7
    d5e8:	b280      	uxth	r0, r0
    d5ea:	74e5      	strb	r5, [r4, #19]
    d5ec:	8060      	strh	r0, [r4, #2]
    d5ee:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    d5f2:	d903      	bls.n	d5fc <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x4c>
    d5f4:	21a4      	movs	r1, #164	; 0xa4
    d5f6:	2014      	movs	r0, #20
    d5f8:	f7f3 fa42 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d5fc:	8026      	strh	r6, [r4, #0]
    d5fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d602 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    d602:	b570      	push	{r4, r5, r6, lr}
    d604:	460b      	mov	r3, r1
    d606:	4604      	mov	r4, r0
    d608:	f100 0118 	add.w	r1, r0, #24
    d60c:	8902      	ldrh	r2, [r0, #8]
    d60e:	8880      	ldrh	r0, [r0, #4]
    d610:	f3c2 050e 	ubfx	r5, r2, #0, #15
    d614:	440d      	add	r5, r1
    d616:	4282      	cmp	r2, r0
    d618:	d101      	bne.n	d61e <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x1c>
    d61a:	2000      	movs	r0, #0
    d61c:	bd70      	pop	{r4, r5, r6, pc}
    d61e:	b123      	cbz	r3, d62a <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x28>
    d620:	7ce2      	ldrb	r2, [r4, #19]
    d622:	1ca9      	adds	r1, r5, #2
    d624:	4618      	mov	r0, r3
    d626:	f003 f842 	bl	106ae <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d62a:	882d      	ldrh	r5, [r5, #0]
    d62c:	f104 0108 	add.w	r1, r4, #8
    d630:	4620      	mov	r0, r4
    d632:	f7ff fe2f 	bl	d294 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d636:	4628      	mov	r0, r5
    d638:	bd70      	pop	{r4, r5, r6, pc}

0000d63a <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    d63a:	4401      	add	r1, r0
    d63c:	1d49      	adds	r1, r1, #5
    d63e:	4351      	muls	r1, r2
    d640:	b28a      	uxth	r2, r1
    d642:	2100      	movs	r1, #0
    d644:	2845      	cmp	r0, #69	; 0x45
    d646:	d202      	bcs.n	d64e <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x14>
    d648:	f1c0 0045 	rsb	r0, r0, #69	; 0x45
    d64c:	b281      	uxth	r1, r0
    d64e:	3218      	adds	r2, #24
    d650:	1850      	adds	r0, r2, r1
    d652:	b280      	uxth	r0, r0
    d654:	4770      	bx	lr

0000d656 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    d656:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d65a:	4688      	mov	r8, r1
    d65c:	88c1      	ldrh	r1, [r0, #6]
    d65e:	4604      	mov	r4, r0
    d660:	8900      	ldrh	r0, [r0, #8]
    d662:	f3c1 060e 	ubfx	r6, r1, #0, #15
    d666:	f104 0518 	add.w	r5, r4, #24
    d66a:	f3c0 070e 	ubfx	r7, r0, #0, #15
    d66e:	eb05 0906 	add.w	r9, r5, r6
    d672:	f7ff fe30 	bl	d2d6 <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    d676:	2200      	movs	r2, #0
    d678:	b998      	cbnz	r0, d6a2 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    d67a:	8820      	ldrh	r0, [r4, #0]
    d67c:	2845      	cmp	r0, #69	; 0x45
    d67e:	d200      	bcs.n	d682 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    d680:	2045      	movs	r0, #69	; 0x45
    d682:	42b7      	cmp	r7, r6
    d684:	d906      	bls.n	d694 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    d686:	7ce3      	ldrb	r3, [r4, #19]
    d688:	1bb9      	subs	r1, r7, r6
    d68a:	1ac9      	subs	r1, r1, r3
    d68c:	1f49      	subs	r1, r1, #5
    d68e:	4281      	cmp	r1, r0
    d690:	da00      	bge.n	d694 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    d692:	4608      	mov	r0, r1
    d694:	89a1      	ldrh	r1, [r4, #12]
    d696:	b111      	cbz	r1, d69e <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    d698:	f8b9 3000 	ldrh.w	r3, [r9]
    d69c:	1ac0      	subs	r0, r0, r3
    d69e:	4540      	cmp	r0, r8
    d6a0:	da03      	bge.n	d6aa <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    d6a2:	8222      	strh	r2, [r4, #16]
    d6a4:	2000      	movs	r0, #0
    d6a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d6aa:	7ce0      	ldrb	r0, [r4, #19]
    d6ac:	4429      	add	r1, r5
    d6ae:	1d40      	adds	r0, r0, #5
    d6b0:	4430      	add	r0, r6
    d6b2:	4408      	add	r0, r1
    d6b4:	f8a4 8010 	strh.w	r8, [r4, #16]
    d6b8:	1ec0      	subs	r0, r0, #3
    d6ba:	e7f4      	b.n	d6a6 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0000d6bc <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    d6bc:	b570      	push	{r4, r5, r6, lr}
    d6be:	2300      	movs	r3, #0
    d6c0:	f1a1 0208 	sub.w	r2, r1, #8
    d6c4:	f64f 74f7 	movw	r4, #65527	; 0xfff7
    d6c8:	42a2      	cmp	r2, r4
    d6ca:	d304      	bcc.n	d6d6 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    d6cc:	f240 11cd 	movw	r1, #461	; 0x1cd
    d6d0:	2015      	movs	r0, #21
    d6d2:	f7f3 f9d5 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d6d6:	6802      	ldr	r2, [r0, #0]
    d6d8:	b90a      	cbnz	r2, d6de <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x22>
    d6da:	e01e      	b.n	d71a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    d6dc:	4610      	mov	r0, r2
    d6de:	6802      	ldr	r2, [r0, #0]
    d6e0:	8893      	ldrh	r3, [r2, #4]
    d6e2:	428b      	cmp	r3, r1
    d6e4:	d002      	beq.n	d6ec <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x30>
    d6e6:	6813      	ldr	r3, [r2, #0]
    d6e8:	2b00      	cmp	r3, #0
    d6ea:	d1f7      	bne.n	d6dc <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x20>
    d6ec:	8894      	ldrh	r4, [r2, #4]
    d6ee:	4613      	mov	r3, r2
    d6f0:	428c      	cmp	r4, r1
    d6f2:	d101      	bne.n	d6f8 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x3c>
    d6f4:	6811      	ldr	r1, [r2, #0]
    d6f6:	e00d      	b.n	d714 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x58>
    d6f8:	f101 0508 	add.w	r5, r1, #8
    d6fc:	b2ae      	uxth	r6, r5
    d6fe:	2500      	movs	r5, #0
    d700:	42b4      	cmp	r4, r6
    d702:	d309      	bcc.n	d718 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5c>
    d704:	1a64      	subs	r4, r4, r1
    d706:	4411      	add	r1, r2
    d708:	600d      	str	r5, [r1, #0]
    d70a:	808c      	strh	r4, [r1, #4]
    d70c:	6802      	ldr	r2, [r0, #0]
    d70e:	6812      	ldr	r2, [r2, #0]
    d710:	6002      	str	r2, [r0, #0]
    d712:	600a      	str	r2, [r1, #0]
    d714:	6001      	str	r1, [r0, #0]
    d716:	e000      	b.n	d71a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    d718:	2300      	movs	r3, #0
    d71a:	4618      	mov	r0, r3
    d71c:	bd70      	pop	{r4, r5, r6, pc}

0000d71e <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    d71e:	b510      	push	{r4, lr}
    d720:	000c      	movs	r4, r1
    d722:	d004      	beq.n	d72e <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x10>
    d724:	2c08      	cmp	r4, #8
    d726:	d207      	bcs.n	d738 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    d728:	f240 1195 	movw	r1, #405	; 0x195
    d72c:	e00a      	b.n	d744 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x26>
    d72e:	b108      	cbz	r0, d734 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x16>
    d730:	2100      	movs	r1, #0
    d732:	6001      	str	r1, [r0, #0]
    d734:	2000      	movs	r0, #0
    d736:	bd10      	pop	{r4, pc}
    d738:	b158      	cbz	r0, d752 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x34>
    d73a:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    d73e:	d304      	bcc.n	d74a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x2c>
    d740:	f240 11a7 	movw	r1, #423	; 0x1a7
    d744:	2015      	movs	r0, #21
    d746:	f7f3 f99b 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d74a:	b2a1      	uxth	r1, r4
    d74c:	6800      	ldr	r0, [r0, #0]
    d74e:	f000 f814 	bl	d77a <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    d752:	1d20      	adds	r0, r4, #4
    d754:	bd10      	pop	{r4, pc}

0000d756 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    d756:	2100      	movs	r1, #0
    d758:	6802      	ldr	r2, [r0, #0]
    d75a:	e003      	b.n	d764 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    d75c:	8893      	ldrh	r3, [r2, #4]
    d75e:	6812      	ldr	r2, [r2, #0]
    d760:	4419      	add	r1, r3
    d762:	b289      	uxth	r1, r1
    d764:	2a00      	cmp	r2, #0
    d766:	d1f9      	bne.n	d75c <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    d768:	f000 b807 	b.w	d77a <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000d76c <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    d76c:	2300      	movs	r3, #0
    d76e:	600b      	str	r3, [r1, #0]
    d770:	808a      	strh	r2, [r1, #4]
    d772:	6802      	ldr	r2, [r0, #0]
    d774:	600a      	str	r2, [r1, #0]
    d776:	6001      	str	r1, [r0, #0]
    d778:	4770      	bx	lr
    d77a:	2300      	movs	r3, #0
    d77c:	6043      	str	r3, [r0, #4]
    d77e:	1d02      	adds	r2, r0, #4
    d780:	8101      	strh	r1, [r0, #8]
    d782:	6002      	str	r2, [r0, #0]
    d784:	4770      	bx	lr

0000d786 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
    d786:	b51c      	push	{r2, r3, r4, lr}
    d788:	4604      	mov	r4, r0
    d78a:	2000      	movs	r0, #0
    d78c:	9001      	str	r0, [sp, #4]
    d78e:	9000      	str	r0, [sp, #0]
    d790:	f88d 4006 	strb.w	r4, [sp, #6]
    d794:	e00a      	b.n	d7ac <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x26>
    d796:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    d79a:	4621      	mov	r1, r4
    d79c:	f7f3 fbd4 	bl	f48 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    d7a0:	b120      	cbz	r0, d7ac <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x26>
    d7a2:	f44f 7129 	mov.w	r1, #676	; 0x2a4
    d7a6:	2017      	movs	r0, #23
    d7a8:	f7f3 f96a 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d7ac:	4668      	mov	r0, sp
    d7ae:	f7f3 fb85 	bl	ebc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    d7b2:	2800      	cmp	r0, #0
    d7b4:	d0ef      	beq.n	d796 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x10>
    d7b6:	bd1c      	pop	{r2, r3, r4, pc}

0000d7b8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    d7b8:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    d7bc:	3aff      	subs	r2, #255	; 0xff
    d7be:	d000      	beq.n	d7c2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xa>
    d7c0:	b109      	cbz	r1, d7c6 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xe>
    d7c2:	2000      	movs	r0, #0
    d7c4:	4770      	bx	lr
    d7c6:	f7f3 bc11 	b.w	fec <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x4c>
    d7ca:	b510      	push	{r4, lr}
    d7cc:	4604      	mov	r4, r0
    d7ce:	f7f3 fc59 	bl	1084 <CONFIG_FPROTECT_BLOCK_SIZE+0x84>
    d7d2:	42a0      	cmp	r0, r4
    d7d4:	d901      	bls.n	d7da <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x22>
    d7d6:	2001      	movs	r0, #1
    d7d8:	bd10      	pop	{r4, pc}
    d7da:	2000      	movs	r0, #0
    d7dc:	bd10      	pop	{r4, pc}

0000d7de <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    d7de:	b570      	push	{r4, r5, r6, lr}
    d7e0:	460e      	mov	r6, r1
    d7e2:	461d      	mov	r5, r3
    d7e4:	4611      	mov	r1, r2
    d7e6:	f000 f813 	bl	d810 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    d7ea:	4604      	mov	r4, r0
    d7ec:	4629      	mov	r1, r5
    d7ee:	4630      	mov	r0, r6
    d7f0:	f000 f804 	bl	d7fc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    d7f4:	4420      	add	r0, r4
    d7f6:	1d00      	adds	r0, r0, #4
    d7f8:	b280      	uxth	r0, r0
    d7fa:	bd70      	pop	{r4, r5, r6, pc}
    d7fc:	b510      	push	{r4, lr}
    d7fe:	460a      	mov	r2, r1
    d800:	2109      	movs	r1, #9
    d802:	f7ff ff1a 	bl	d63a <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d806:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    d80a:	1cc0      	adds	r0, r0, #3
    d80c:	4008      	ands	r0, r1
    d80e:	bd10      	pop	{r4, pc}
    d810:	b510      	push	{r4, lr}
    d812:	460a      	mov	r2, r1
    d814:	210a      	movs	r1, #10
    d816:	f7ff ff10 	bl	d63a <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d81a:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    d81e:	1cc0      	adds	r0, r0, #3
    d820:	4008      	ands	r0, r1
    d822:	bd10      	pop	{r4, pc}
    d824:	2800      	cmp	r0, #0
    d826:	db09      	blt.n	d83c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x5e>
    d828:	f000 021f 	and.w	r2, r0, #31
    d82c:	2101      	movs	r1, #1
    d82e:	4091      	lsls	r1, r2
    d830:	0940      	lsrs	r0, r0, #5
    d832:	0080      	lsls	r0, r0, #2
    d834:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d838:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    d83c:	4770      	bx	lr
    d83e:	2800      	cmp	r0, #0
    d840:	db0d      	blt.n	d85e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x80>
    d842:	f000 021f 	and.w	r2, r0, #31
    d846:	2101      	movs	r1, #1
    d848:	4091      	lsls	r1, r2
    d84a:	0940      	lsrs	r0, r0, #5
    d84c:	0080      	lsls	r0, r0, #2
    d84e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d852:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    d856:	f3bf 8f4f 	dsb	sy
    d85a:	f3bf 8f6f 	isb	sy
    d85e:	4770      	bx	lr
    d860:	b510      	push	{r4, lr}
    d862:	200e      	movs	r0, #14
    d864:	f7ff ffeb 	bl	d83e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x60>
    d868:	200e      	movs	r0, #14
    d86a:	f7ff ffdb 	bl	d824 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
    d86e:	200f      	movs	r0, #15
    d870:	f7ff ffe5 	bl	d83e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x60>
    d874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d878:	200f      	movs	r0, #15
    d87a:	f7ff bfd3 	b.w	d824 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
    d87e:	2800      	cmp	r0, #0
    d880:	db09      	blt.n	d896 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xb8>
    d882:	f000 021f 	and.w	r2, r0, #31
    d886:	2101      	movs	r1, #1
    d888:	4091      	lsls	r1, r2
    d88a:	0940      	lsrs	r0, r0, #5
    d88c:	0080      	lsls	r0, r0, #2
    d88e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d892:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    d896:	4770      	bx	lr
    d898:	5840      	ldr	r0, [r0, r1]
    d89a:	2800      	cmp	r0, #0
    d89c:	d000      	beq.n	d8a0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc2>
    d89e:	2001      	movs	r0, #1
    d8a0:	4770      	bx	lr

0000d8a2 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    d8a2:	b510      	push	{r4, lr}
    d8a4:	4604      	mov	r4, r0
    d8a6:	4620      	mov	r0, r4
    d8a8:	f7f3 fd5e 	bl	1368 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x28>
    d8ac:	2811      	cmp	r0, #17
    d8ae:	d0fa      	beq.n	d8a6 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x4>
    d8b0:	bd10      	pop	{r4, pc}

0000d8b2 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    d8b2:	b510      	push	{r4, lr}
    d8b4:	f7ff fff5 	bl	d8a2 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    d8b8:	2800      	cmp	r0, #0
    d8ba:	d003      	beq.n	d8c4 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x12>
    d8bc:	21a0      	movs	r1, #160	; 0xa0
    d8be:	201d      	movs	r0, #29
    d8c0:	f7f3 f8de 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d8c4:	bd10      	pop	{r4, pc}

0000d8c6 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    d8c6:	f7f3 bead 	b.w	1624 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x20>

0000d8ca <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    d8ca:	f7f3 be9b 	b.w	1604 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>

0000d8ce <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>:
    d8ce:	b510      	push	{r4, lr}
    d8d0:	4050      	eors	r0, r2
    d8d2:	780a      	ldrb	r2, [r1, #0]
    d8d4:	781c      	ldrb	r4, [r3, #0]
    d8d6:	4062      	eors	r2, r4
    d8d8:	4410      	add	r0, r2
    d8da:	784a      	ldrb	r2, [r1, #1]
    d8dc:	785c      	ldrb	r4, [r3, #1]
    d8de:	4062      	eors	r2, r4
    d8e0:	4410      	add	r0, r2
    d8e2:	788a      	ldrb	r2, [r1, #2]
    d8e4:	789c      	ldrb	r4, [r3, #2]
    d8e6:	4062      	eors	r2, r4
    d8e8:	4410      	add	r0, r2
    d8ea:	78ca      	ldrb	r2, [r1, #3]
    d8ec:	78dc      	ldrb	r4, [r3, #3]
    d8ee:	4062      	eors	r2, r4
    d8f0:	4410      	add	r0, r2
    d8f2:	790a      	ldrb	r2, [r1, #4]
    d8f4:	791c      	ldrb	r4, [r3, #4]
    d8f6:	7949      	ldrb	r1, [r1, #5]
    d8f8:	4062      	eors	r2, r4
    d8fa:	4410      	add	r0, r2
    d8fc:	795a      	ldrb	r2, [r3, #5]
    d8fe:	4051      	eors	r1, r2
    d900:	42c1      	cmn	r1, r0
    d902:	d101      	bne.n	d908 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI+0x3a>
    d904:	2001      	movs	r0, #1
    d906:	bd10      	pop	{r4, pc}
    d908:	2000      	movs	r0, #0
    d90a:	bd10      	pop	{r4, pc}

0000d90c <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    d90c:	b510      	push	{r4, lr}
    d90e:	2900      	cmp	r1, #0
    d910:	4604      	mov	r4, r0
    d912:	f04f 0106 	mov.w	r1, #6
    d916:	d002      	beq.n	d91e <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    d918:	f7f3 f944 	bl	ba4 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    d91c:	e001      	b.n	d922 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    d91e:	f7f3 f94f 	bl	bc0 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    d922:	7960      	ldrb	r0, [r4, #5]
    d924:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    d928:	7160      	strb	r0, [r4, #5]
    d92a:	bd10      	pop	{r4, pc}

0000d92c <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    d92c:	4770      	bx	lr

0000d92e <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    d92e:	b530      	push	{r4, r5, lr}
    d930:	460c      	mov	r4, r1
    d932:	4605      	mov	r5, r0
    d934:	b08d      	sub	sp, #52	; 0x34
    d936:	f04f 0103 	mov.w	r1, #3
    d93a:	f104 0003 	add.w	r0, r4, #3
    d93e:	b112      	cbz	r2, d946 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    d940:	f7f3 f930 	bl	ba4 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    d944:	e001      	b.n	d94a <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    d946:	f7f3 f93b 	bl	bc0 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    d94a:	7960      	ldrb	r0, [r4, #5]
    d94c:	220d      	movs	r2, #13
    d94e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    d952:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    d956:	7160      	strb	r0, [r4, #5]
    d958:	2100      	movs	r1, #0
    d95a:	a804      	add	r0, sp, #16
    d95c:	f002 ff21 	bl	107a2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d960:	78e0      	ldrb	r0, [r4, #3]
    d962:	f88d 001f 	strb.w	r0, [sp, #31]
    d966:	7920      	ldrb	r0, [r4, #4]
    d968:	f88d 001e 	strb.w	r0, [sp, #30]
    d96c:	7960      	ldrb	r0, [r4, #5]
    d96e:	f88d 001d 	strb.w	r0, [sp, #29]
    d972:	2210      	movs	r2, #16
    d974:	4629      	mov	r1, r5
    d976:	4668      	mov	r0, sp
    d978:	f002 fe99 	bl	106ae <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d97c:	4668      	mov	r0, sp
    d97e:	f7ff ff98 	bl	d8b2 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    d982:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    d986:	7020      	strb	r0, [r4, #0]
    d988:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    d98c:	7060      	strb	r0, [r4, #1]
    d98e:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    d992:	70a0      	strb	r0, [r4, #2]
    d994:	b00d      	add	sp, #52	; 0x34
    d996:	bd30      	pop	{r4, r5, pc}

0000d998 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ>:
    d998:	b530      	push	{r4, r5, lr}
    d99a:	b08d      	sub	sp, #52	; 0x34
    d99c:	460c      	mov	r4, r1
    d99e:	4605      	mov	r5, r0
    d9a0:	220d      	movs	r2, #13
    d9a2:	2100      	movs	r1, #0
    d9a4:	a804      	add	r0, sp, #16
    d9a6:	f002 fefc 	bl	107a2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d9aa:	78e0      	ldrb	r0, [r4, #3]
    d9ac:	f88d 001f 	strb.w	r0, [sp, #31]
    d9b0:	7920      	ldrb	r0, [r4, #4]
    d9b2:	f88d 001e 	strb.w	r0, [sp, #30]
    d9b6:	7960      	ldrb	r0, [r4, #5]
    d9b8:	f88d 001d 	strb.w	r0, [sp, #29]
    d9bc:	2210      	movs	r2, #16
    d9be:	4629      	mov	r1, r5
    d9c0:	4668      	mov	r0, sp
    d9c2:	f002 fe74 	bl	106ae <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d9c6:	4668      	mov	r0, sp
    d9c8:	f7ff ff73 	bl	d8b2 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    d9cc:	7820      	ldrb	r0, [r4, #0]
    d9ce:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
    d9d2:	4288      	cmp	r0, r1
    d9d4:	d10c      	bne.n	d9f0 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    d9d6:	7860      	ldrb	r0, [r4, #1]
    d9d8:	f89d 102e 	ldrb.w	r1, [sp, #46]	; 0x2e
    d9dc:	4288      	cmp	r0, r1
    d9de:	d107      	bne.n	d9f0 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    d9e0:	78a0      	ldrb	r0, [r4, #2]
    d9e2:	f89d 102d 	ldrb.w	r1, [sp, #45]	; 0x2d
    d9e6:	4288      	cmp	r0, r1
    d9e8:	d102      	bne.n	d9f0 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    d9ea:	2001      	movs	r0, #1
    d9ec:	b00d      	add	sp, #52	; 0x34
    d9ee:	bd30      	pop	{r4, r5, pc}
    d9f0:	2000      	movs	r0, #0
    d9f2:	e7fb      	b.n	d9ec <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x54>

0000d9f4 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>:
    d9f4:	f7f4 b97c 	b.w	1cf0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b0>
    d9f8:	b510      	push	{r4, lr}
    d9fa:	2801      	cmp	r0, #1
    d9fc:	d008      	beq.n	da10 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x1c>
    d9fe:	2802      	cmp	r0, #2
    da00:	d004      	beq.n	da0c <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    da02:	f240 4122 	movw	r1, #1058	; 0x422
    da06:	2006      	movs	r0, #6
    da08:	f7f3 f83a 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    da0c:	2001      	movs	r0, #1
    da0e:	bd10      	pop	{r4, pc}
    da10:	2000      	movs	r0, #0
    da12:	bd10      	pop	{r4, pc}
    da14:	2900      	cmp	r1, #0
    da16:	d004      	beq.n	da22 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x2e>
    da18:	2801      	cmp	r0, #1
    da1a:	d003      	beq.n	da24 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    da1c:	2901      	cmp	r1, #1
    da1e:	d001      	beq.n	da24 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    da20:	2002      	movs	r0, #2
    da22:	4770      	bx	lr
    da24:	2001      	movs	r0, #1
    da26:	4770      	bx	lr
    da28:	f7ff bd9f 	b.w	d56a <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>

0000da2c <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    da2c:	2101      	movs	r1, #1
    da2e:	f7f4 bced 	b.w	240c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x74>

0000da32 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    da32:	b510      	push	{r4, lr}
    da34:	f002 fc16 	bl	10264 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    da38:	b118      	cbz	r0, da42 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    da3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    da3e:	f7f9 bf97 	b.w	7970 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    da42:	20ff      	movs	r0, #255	; 0xff
    da44:	bd10      	pop	{r4, pc}

0000da46 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    da46:	b510      	push	{r4, lr}
    da48:	f7f4 fd28 	bl	249c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    da4c:	2810      	cmp	r0, #16
    da4e:	d003      	beq.n	da58 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    da50:	f7f4 fcf4 	bl	243c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    da54:	2810      	cmp	r0, #16
    da56:	d100      	bne.n	da5a <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x14>
    da58:	2008      	movs	r0, #8
    da5a:	bd10      	pop	{r4, pc}

0000da5c <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
    da5c:	b510      	push	{r4, lr}
    da5e:	f7f4 fd1d 	bl	249c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    da62:	2810      	cmp	r0, #16
    da64:	d003      	beq.n	da6e <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY+0x12>
    da66:	f7f4 fd77 	bl	2558 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1c0>
    da6a:	2001      	movs	r0, #1
    da6c:	bd10      	pop	{r4, pc}
    da6e:	2000      	movs	r0, #0
    da70:	bd10      	pop	{r4, pc}

0000da72 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    da72:	b570      	push	{r4, r5, r6, lr}
    da74:	460e      	mov	r6, r1
    da76:	b08c      	sub	sp, #48	; 0x30
    da78:	4614      	mov	r4, r2
    da7a:	4601      	mov	r1, r0
    da7c:	461d      	mov	r5, r3
    da7e:	2210      	movs	r2, #16
    da80:	4668      	mov	r0, sp
    da82:	f000 f997 	bl	ddb4 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    da86:	2210      	movs	r2, #16
    da88:	4631      	mov	r1, r6
    da8a:	a804      	add	r0, sp, #16
    da8c:	f000 f992 	bl	ddb4 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    da90:	4668      	mov	r0, sp
    da92:	f7ff ff0e 	bl	d8b2 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    da96:	a908      	add	r1, sp, #32
    da98:	f04f 0210 	mov.w	r2, #16
    da9c:	4628      	mov	r0, r5
    da9e:	b11c      	cbz	r4, daa8 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    daa0:	f000 f988 	bl	ddb4 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    daa4:	b00c      	add	sp, #48	; 0x30
    daa6:	bd70      	pop	{r4, r5, r6, pc}
    daa8:	f002 fe01 	bl	106ae <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    daac:	e7fa      	b.n	daa4 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>
    daae:	0781      	lsls	r1, r0, #30
    dab0:	d501      	bpl.n	dab6 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x44>
    dab2:	2002      	movs	r0, #2
    dab4:	4770      	bx	lr
    dab6:	07c0      	lsls	r0, r0, #31
    dab8:	d0fc      	beq.n	dab4 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x42>
    daba:	2001      	movs	r0, #1
    dabc:	4770      	bx	lr

0000dabe <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY>:
    dabe:	b570      	push	{r4, r5, r6, lr}
    dac0:	4606      	mov	r6, r0
    dac2:	7900      	ldrb	r0, [r0, #4]
    dac4:	0940      	lsrs	r0, r0, #5
    dac6:	d10e      	bne.n	dae6 <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY+0x28>
    dac8:	2500      	movs	r5, #0
    daca:	462c      	mov	r4, r5
    dacc:	5d30      	ldrb	r0, [r6, r4]
    dace:	f000 fd31 	bl	e534 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>
    dad2:	1c64      	adds	r4, r4, #1
    dad4:	4428      	add	r0, r5
    dad6:	b2e4      	uxtb	r4, r4
    dad8:	b2c5      	uxtb	r5, r0
    dada:	2c05      	cmp	r4, #5
    dadc:	d3f6      	bcc.n	dacc <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY+0xe>
    dade:	2d01      	cmp	r5, #1
    dae0:	d901      	bls.n	dae6 <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY+0x28>
    dae2:	2001      	movs	r0, #1
    dae4:	bd70      	pop	{r4, r5, r6, pc}
    dae6:	2000      	movs	r0, #0
    dae8:	bd70      	pop	{r4, r5, r6, pc}

0000daea <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    daea:	b510      	push	{r4, lr}
    daec:	460c      	mov	r4, r1
    daee:	2100      	movs	r1, #0
    daf0:	f7ff fe62 	bl	d7b8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    daf4:	6060      	str	r0, [r4, #4]
    daf6:	b110      	cbz	r0, dafe <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x14>
    daf8:	2000      	movs	r0, #0
    dafa:	7020      	strb	r0, [r4, #0]
    dafc:	bd10      	pop	{r4, pc}
    dafe:	2002      	movs	r0, #2
    db00:	bd10      	pop	{r4, pc}

0000db02 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    db02:	f240 41e2 	movw	r1, #1250	; 0x4e2
    db06:	4348      	muls	r0, r1
    db08:	4770      	bx	lr

0000db0a <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    db0a:	f240 41e2 	movw	r1, #1250	; 0x4e2
    db0e:	fbb0 f0f1 	udiv	r0, r0, r1
    db12:	b280      	uxth	r0, r0
    db14:	4770      	bx	lr

0000db16 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>:
    db16:	b570      	push	{r4, r5, r6, lr}
    db18:	4604      	mov	r4, r0
    db1a:	4290      	cmp	r0, r2
    db1c:	d20b      	bcs.n	db36 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x20>
    db1e:	1b10      	subs	r0, r2, r4
    db20:	2865      	cmp	r0, #101	; 0x65
    db22:	d200      	bcs.n	db26 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x10>
    db24:	2065      	movs	r0, #101	; 0x65
    db26:	1825      	adds	r5, r4, r0
    db28:	428d      	cmp	r5, r1
    db2a:	d803      	bhi.n	db34 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x1e>
    db2c:	2103      	movs	r1, #3
    db2e:	f7fc f959 	bl	9de4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    db32:	b108      	cbz	r0, db38 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x22>
    db34:	4620      	mov	r0, r4
    db36:	bd70      	pop	{r4, r5, r6, pc}
    db38:	4628      	mov	r0, r5
    db3a:	bd70      	pop	{r4, r5, r6, pc}

0000db3c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
    db3c:	b510      	push	{r4, lr}
    db3e:	f1a2 0310 	sub.w	r3, r2, #16
    db42:	290d      	cmp	r1, #13
    db44:	d258      	bcs.n	dbf8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    db46:	e8df f001 	tbb	[pc, r1]
    db4a:	0907      	.short	0x0907
    db4c:	1d1a150e 	.word	0x1d1a150e
    db50:	5937342c 	.word	0x5937342c
    db54:	0053423b 	.word	0x0053423b
    db58:	b38a      	cbz	r2, dbbe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x82>
    db5a:	e04d      	b.n	dbf8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    db5c:	2a06      	cmp	r2, #6
    db5e:	d049      	beq.n	dbf4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db60:	2a07      	cmp	r2, #7
    db62:	d047      	beq.n	dbf4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db64:	e048      	b.n	dbf8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    db66:	2a0b      	cmp	r2, #11
    db68:	d044      	beq.n	dbf4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db6a:	2a0c      	cmp	r2, #12
    db6c:	d042      	beq.n	dbf4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db6e:	2a0a      	cmp	r2, #10
    db70:	d040      	beq.n	dbf4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db72:	e041      	b.n	dbf8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    db74:	2a0d      	cmp	r2, #13
    db76:	d03d      	beq.n	dbf4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db78:	2a0e      	cmp	r2, #14
    db7a:	d03b      	beq.n	dbf4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db7c:	e03c      	b.n	dbf8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    db7e:	2b0c      	cmp	r3, #12
    db80:	d938      	bls.n	dbf4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db82:	e039      	b.n	dbf8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    db84:	2a13      	cmp	r2, #19
    db86:	d035      	beq.n	dbf4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db88:	2a12      	cmp	r2, #18
    db8a:	d033      	beq.n	dbf4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db8c:	f890 005e 	ldrb.w	r0, [r0, #94]	; 0x5e
    db90:	b120      	cbz	r0, db9c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x60>
    db92:	2a13      	cmp	r2, #19
    db94:	d330      	bcc.n	dbf8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    db96:	2a1b      	cmp	r2, #27
    db98:	d92c      	bls.n	dbf4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db9a:	e02d      	b.n	dbf8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    db9c:	2a17      	cmp	r2, #23
    db9e:	d2fa      	bcs.n	db96 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x5a>
    dba0:	e02a      	b.n	dbf8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    dba2:	2b03      	cmp	r3, #3
    dba4:	d926      	bls.n	dbf4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    dba6:	f890 005e 	ldrb.w	r0, [r0, #94]	; 0x5e
    dbaa:	b300      	cbz	r0, dbee <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb2>
    dbac:	2a1c      	cmp	r2, #28
    dbae:	d921      	bls.n	dbf4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    dbb0:	e022      	b.n	dbf8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    dbb2:	2a04      	cmp	r2, #4
    dbb4:	d01e      	beq.n	dbf4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    dbb6:	e01f      	b.n	dbf8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    dbb8:	2a01      	cmp	r2, #1
    dbba:	d01b      	beq.n	dbf4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    dbbc:	e01c      	b.n	dbf8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    dbbe:	e019      	b.n	dbf4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    dbc0:	2a1d      	cmp	r2, #29
    dbc2:	d017      	beq.n	dbf4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    dbc4:	2a1e      	cmp	r2, #30
    dbc6:	d015      	beq.n	dbf4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    dbc8:	2a1f      	cmp	r2, #31
    dbca:	d013      	beq.n	dbf4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    dbcc:	e014      	b.n	dbf8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    dbce:	2a20      	cmp	r2, #32
    dbd0:	d010      	beq.n	dbf4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    dbd2:	2a21      	cmp	r2, #33	; 0x21
    dbd4:	d00e      	beq.n	dbf4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    dbd6:	2a22      	cmp	r2, #34	; 0x22
    dbd8:	d00c      	beq.n	dbf4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    dbda:	2a23      	cmp	r2, #35	; 0x23
    dbdc:	d00a      	beq.n	dbf4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    dbde:	2a24      	cmp	r2, #36	; 0x24
    dbe0:	d008      	beq.n	dbf4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    dbe2:	2a25      	cmp	r2, #37	; 0x25
    dbe4:	d006      	beq.n	dbf4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    dbe6:	2a26      	cmp	r2, #38	; 0x26
    dbe8:	d004      	beq.n	dbf4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    dbea:	2a2e      	cmp	r2, #46	; 0x2e
    dbec:	d002      	beq.n	dbf4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    dbee:	e003      	b.n	dbf8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    dbf0:	2a28      	cmp	r2, #40	; 0x28
    dbf2:	d101      	bne.n	dbf8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    dbf4:	2001      	movs	r0, #1
    dbf6:	bd10      	pop	{r4, pc}
    dbf8:	2000      	movs	r0, #0
    dbfa:	bd10      	pop	{r4, pc}
    dbfc:	2a05      	cmp	r2, #5
    dbfe:	d1fb      	bne.n	dbf8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    dc00:	e7f8      	b.n	dbf4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>

0000dc02 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
    dc02:	280b      	cmp	r0, #11
    dc04:	d019      	beq.n	dc3a <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dc06:	280c      	cmp	r0, #12
    dc08:	d017      	beq.n	dc3a <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dc0a:	280a      	cmp	r0, #10
    dc0c:	d015      	beq.n	dc3a <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dc0e:	280d      	cmp	r0, #13
    dc10:	d013      	beq.n	dc3a <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dc12:	280e      	cmp	r0, #14
    dc14:	d011      	beq.n	dc3a <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dc16:	2820      	cmp	r0, #32
    dc18:	d00f      	beq.n	dc3a <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dc1a:	2821      	cmp	r0, #33	; 0x21
    dc1c:	d00d      	beq.n	dc3a <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dc1e:	2822      	cmp	r0, #34	; 0x22
    dc20:	d00b      	beq.n	dc3a <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dc22:	2823      	cmp	r0, #35	; 0x23
    dc24:	d009      	beq.n	dc3a <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dc26:	2824      	cmp	r0, #36	; 0x24
    dc28:	d007      	beq.n	dc3a <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dc2a:	2825      	cmp	r0, #37	; 0x25
    dc2c:	d005      	beq.n	dc3a <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dc2e:	2826      	cmp	r0, #38	; 0x26
    dc30:	d003      	beq.n	dc3a <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dc32:	282e      	cmp	r0, #46	; 0x2e
    dc34:	d001      	beq.n	dc3a <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dc36:	2000      	movs	r0, #0
    dc38:	4770      	bx	lr
    dc3a:	2001      	movs	r0, #1
    dc3c:	4770      	bx	lr

0000dc3e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    dc3e:	f011 0f0c 	tst.w	r1, #12
    dc42:	d018      	beq.n	dc76 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x38>
    dc44:	074a      	lsls	r2, r1, #29
    dc46:	f44f 7116 	mov.w	r1, #600	; 0x258
    dc4a:	2a00      	cmp	r2, #0
    dc4c:	da02      	bge.n	dc54 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
    dc4e:	f04f 0210 	mov.w	r2, #16
    dc52:	e001      	b.n	dc58 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
    dc54:	f04f 0240 	mov.w	r2, #64	; 0x40
    dc58:	da01      	bge.n	dc5e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
    dc5a:	f04f 0196 	mov.w	r1, #150	; 0x96
    dc5e:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    dc62:	eba0 0301 	sub.w	r3, r0, r1
    dc66:	4288      	cmp	r0, r1
    dc68:	d903      	bls.n	dc72 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    dc6a:	fb93 f0f2 	sdiv	r0, r3, r2
    dc6e:	b280      	uxth	r0, r0
    dc70:	4770      	bx	lr
    dc72:	2000      	movs	r0, #0
    dc74:	4770      	bx	lr
    dc76:	2902      	cmp	r1, #2
    dc78:	d008      	beq.n	dc8c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    dc7a:	2870      	cmp	r0, #112	; 0x70
    dc7c:	d9f9      	bls.n	dc72 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    dc7e:	3870      	subs	r0, #112	; 0x70
    dc80:	17c1      	asrs	r1, r0, #31
    dc82:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    dc86:	f3c0 00cf 	ubfx	r0, r0, #3, #16
    dc8a:	4770      	bx	lr
    dc8c:	283c      	cmp	r0, #60	; 0x3c
    dc8e:	d9f0      	bls.n	dc72 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    dc90:	383c      	subs	r0, #60	; 0x3c
    dc92:	17c1      	asrs	r1, r0, #31
    dc94:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    dc98:	f3c0 008f 	ubfx	r0, r0, #2, #16
    dc9c:	4770      	bx	lr

0000dc9e <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    dc9e:	6809      	ldr	r1, [r1, #0]
    dca0:	f8c0 1066 	str.w	r1, [r0, #102]	; 0x66
    dca4:	4770      	bx	lr

0000dca6 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ>:
    dca6:	2801      	cmp	r0, #1
    dca8:	d002      	beq.n	dcb0 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ+0xa>
    dcaa:	2802      	cmp	r0, #2
    dcac:	d000      	beq.n	dcb0 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ+0xa>
    dcae:	2000      	movs	r0, #0
    dcb0:	4770      	bx	lr

0000dcb2 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI>:
    dcb2:	b530      	push	{r4, r5, lr}
    dcb4:	242a      	movs	r4, #42	; 0x2a
    dcb6:	2523      	movs	r5, #35	; 0x23
    dcb8:	2a16      	cmp	r2, #22
    dcba:	d109      	bne.n	dcd0 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x1e>
    dcbc:	280b      	cmp	r0, #11
    dcbe:	d00b      	beq.n	dcd8 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x26>
    dcc0:	280c      	cmp	r0, #12
    dcc2:	d009      	beq.n	dcd8 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x26>
    dcc4:	280d      	cmp	r0, #13
    dcc6:	d007      	beq.n	dcd8 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x26>
    dcc8:	280e      	cmp	r0, #14
    dcca:	d005      	beq.n	dcd8 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x26>
    dccc:	2820      	cmp	r0, #32
    dcce:	d005      	beq.n	dcdc <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x2a>
    dcd0:	b171      	cbz	r1, dcf0 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x3e>
    dcd2:	2a16      	cmp	r2, #22
    dcd4:	d10c      	bne.n	dcf0 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x3e>
    dcd6:	e004      	b.n	dce2 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x30>
    dcd8:	701c      	strb	r4, [r3, #0]
    dcda:	e000      	b.n	dcde <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x2c>
    dcdc:	701d      	strb	r5, [r3, #0]
    dcde:	2001      	movs	r0, #1
    dce0:	bd30      	pop	{r4, r5, pc}
    dce2:	7808      	ldrb	r0, [r1, #0]
    dce4:	2801      	cmp	r0, #1
    dce6:	d0f7      	beq.n	dcd8 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x26>
    dce8:	2800      	cmp	r0, #0
    dcea:	d0f5      	beq.n	dcd8 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x26>
    dcec:	2816      	cmp	r0, #22
    dcee:	d0f5      	beq.n	dcdc <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x2a>
    dcf0:	2000      	movs	r0, #0
    dcf2:	bd30      	pop	{r4, r5, pc}

0000dcf4 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ>:
    dcf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dcf6:	b2cf      	uxtb	r7, r1
    dcf8:	4606      	mov	r6, r0
    dcfa:	f3c1 2407 	ubfx	r4, r1, #8, #8
    dcfe:	4621      	mov	r1, r4
    dd00:	4638      	mov	r0, r7
    dd02:	f000 f88f 	bl	de24 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A+0xc>
    dd06:	b2f5      	uxtb	r5, r6
    dd08:	f3c6 2607 	ubfx	r6, r6, #8, #8
    dd0c:	b920      	cbnz	r0, dd18 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x24>
    dd0e:	4631      	mov	r1, r6
    dd10:	4628      	mov	r0, r5
    dd12:	f000 f887 	bl	de24 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A+0xc>
    dd16:	b140      	cbz	r0, dd2a <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x36>
    dd18:	4027      	ands	r7, r4
    dd1a:	4035      	ands	r5, r6
    dd1c:	403d      	ands	r5, r7
    dd1e:	4644      	mov	r4, r8
    dd20:	f365 0407 	bfi	r4, r5, #0, #8
    dd24:	f365 240f 	bfi	r4, r5, #8, #8
    dd28:	e006      	b.n	dd38 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x44>
    dd2a:	4025      	ands	r5, r4
    dd2c:	4644      	mov	r4, r8
    dd2e:	f365 0407 	bfi	r4, r5, #0, #8
    dd32:	403e      	ands	r6, r7
    dd34:	f366 240f 	bfi	r4, r6, #8, #8
    dd38:	b2e0      	uxtb	r0, r4
    dd3a:	f7ff feb8 	bl	daae <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x3c>
    dd3e:	f88d 0000 	strb.w	r0, [sp]
    dd42:	f3c4 2007 	ubfx	r0, r4, #8, #8
    dd46:	f7ff feb2 	bl	daae <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x3c>
    dd4a:	f88d 0001 	strb.w	r0, [sp, #1]
    dd4e:	f8bd 0000 	ldrh.w	r0, [sp]
    dd52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000dd54 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    dd54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dd58:	4607      	mov	r7, r0
    dd5a:	460e      	mov	r6, r1
    dd5c:	e9d7 5404 	ldrd	r5, r4, [r7, #16]
    dd60:	f7fc fc6c 	bl	a63c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    dd64:	b198      	cbz	r0, dd8e <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x3a>
    dd66:	b31e      	cbz	r6, ddb0 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    dd68:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    dd6c:	1b40      	subs	r0, r0, r5
    dd6e:	2300      	movs	r3, #0
    dd70:	eb61 0104 	sbc.w	r1, r1, r4
    dd74:	461a      	mov	r2, r3
    dd76:	1a1b      	subs	r3, r3, r0
    dd78:	418a      	sbcs	r2, r1
    dd7a:	da19      	bge.n	ddb0 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    dd7c:	1c42      	adds	r2, r0, #1
    dd7e:	f171 0100 	sbcs.w	r1, r1, #0
    dd82:	db07      	blt.n	dd94 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x40>
    dd84:	f240 211b 	movw	r1, #539	; 0x21b
    dd88:	2029      	movs	r0, #41	; 0x29
    dd8a:	f7f2 fe79 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dd8e:	f240 2111 	movw	r1, #529	; 0x211
    dd92:	e7f9      	b.n	dd88 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>
    dd94:	4430      	add	r0, r6
    dd96:	1e40      	subs	r0, r0, #1
    dd98:	fbb0 f1f6 	udiv	r1, r0, r6
    dd9c:	fb01 f006 	mul.w	r0, r1, r6
    dda0:	1828      	adds	r0, r5, r0
    dda2:	f144 0400 	adc.w	r4, r4, #0
    dda6:	e9c7 0404 	strd	r0, r4, [r7, #16]
    ddaa:	4608      	mov	r0, r1
    ddac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ddb0:	2000      	movs	r0, #0
    ddb2:	e7fb      	b.n	ddac <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x58>

0000ddb4 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    ddb4:	b530      	push	{r4, r5, lr}
    ddb6:	4613      	mov	r3, r2
    ddb8:	e006      	b.n	ddc8 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    ddba:	18cc      	adds	r4, r1, r3
    ddbc:	1ad5      	subs	r5, r2, r3
    ddbe:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    ddc2:	1e5b      	subs	r3, r3, #1
    ddc4:	5544      	strb	r4, [r0, r5]
    ddc6:	b2db      	uxtb	r3, r3
    ddc8:	2b00      	cmp	r3, #0
    ddca:	d1f6      	bne.n	ddba <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    ddcc:	bd30      	pop	{r4, r5, pc}

0000ddce <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
    ddce:	2300      	movs	r3, #0
    ddd0:	6403      	str	r3, [r0, #64]	; 0x40
    ddd2:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
    ddd6:	f240 2371 	movw	r3, #625	; 0x271
    ddda:	435a      	muls	r2, r3
    dddc:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    dde0:	1e52      	subs	r2, r2, #1
    dde2:	fbb2 f1f1 	udiv	r1, r2, r1
    dde6:	6441      	str	r1, [r0, #68]	; 0x44
    dde8:	4770      	bx	lr

0000ddea <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>:
    ddea:	f240 41e2 	movw	r1, #1250	; 0x4e2
    ddee:	fbb0 f0f1 	udiv	r0, r0, r1
    ddf2:	b280      	uxth	r0, r0
    ddf4:	4770      	bx	lr

0000ddf6 <sym_MCZ5ZKWAPWEBLVDHDY2XS3XBNNW7L43ADSWQSTI>:
    ddf6:	f240 41e2 	movw	r1, #1250	; 0x4e2
    ddfa:	fbb0 f2f1 	udiv	r2, r0, r1
    ddfe:	fb01 0112 	mls	r1, r1, r2, r0
    de02:	1a40      	subs	r0, r0, r1
    de04:	4770      	bx	lr

0000de06 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    de06:	f240 2171 	movw	r1, #625	; 0x271
    de0a:	fb10 f001 	smulbb	r0, r0, r1
    de0e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    de12:	ea01 0040 	and.w	r0, r1, r0, lsl #1
    de16:	4770      	bx	lr

0000de18 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>:
    de18:	f240 41e2 	movw	r1, #1250	; 0x4e2
    de1c:	fbb0 f0f1 	udiv	r0, r0, r1
    de20:	b2c0      	uxtb	r0, r0
    de22:	4770      	bx	lr
    de24:	2801      	cmp	r0, #1
    de26:	d002      	beq.n	de2e <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A+0x16>
    de28:	2802      	cmp	r0, #2
    de2a:	d003      	beq.n	de34 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A+0x1c>
    de2c:	e004      	b.n	de38 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A+0x20>
    de2e:	2901      	cmp	r1, #1
    de30:	d004      	beq.n	de3c <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A+0x24>
    de32:	e001      	b.n	de38 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A+0x20>
    de34:	2902      	cmp	r1, #2
    de36:	d001      	beq.n	de3c <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A+0x24>
    de38:	2000      	movs	r0, #0
    de3a:	4770      	bx	lr
    de3c:	2001      	movs	r0, #1
    de3e:	4770      	bx	lr
    de40:	4401      	add	r1, r0
    de42:	2914      	cmp	r1, #20
    de44:	dd01      	ble.n	de4a <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A+0x32>
    de46:	2014      	movs	r0, #20
    de48:	4770      	bx	lr
    de4a:	f06f 007e 	mvn.w	r0, #126	; 0x7e
    de4e:	4281      	cmp	r1, r0
    de50:	dbfa      	blt.n	de48 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A+0x30>
    de52:	b248      	sxtb	r0, r1
    de54:	4770      	bx	lr

0000de56 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>:
    de56:	b570      	push	{r4, r5, r6, lr}
    de58:	4605      	mov	r5, r0
    de5a:	ea81 4011 	eor.w	r0, r1, r1, lsr #16
    de5e:	b286      	uxth	r6, r0
    de60:	4610      	mov	r0, r2
    de62:	7aec      	ldrb	r4, [r5, #11]
    de64:	4631      	mov	r1, r6
    de66:	f000 f863 	bl	df30 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x52>
    de6a:	4070      	eors	r0, r6
    de6c:	2125      	movs	r1, #37	; 0x25
    de6e:	fbb0 f2f1 	udiv	r2, r0, r1
    de72:	fb01 0112 	mls	r1, r1, r2, r0
    de76:	eb05 02d1 	add.w	r2, r5, r1, lsr #3
    de7a:	f001 0307 	and.w	r3, r1, #7
    de7e:	7852      	ldrb	r2, [r2, #1]
    de80:	2601      	movs	r6, #1
    de82:	409e      	lsls	r6, r3
    de84:	4232      	tst	r2, r6
    de86:	d001      	beq.n	de8c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x36>
    de88:	4608      	mov	r0, r1
    de8a:	bd70      	pop	{r4, r5, r6, pc}
    de8c:	4344      	muls	r4, r0
    de8e:	0c21      	lsrs	r1, r4, #16
    de90:	4628      	mov	r0, r5
    de92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    de96:	f7f4 bc87 	b.w	27a8 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0xac>

0000de9a <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>:
    de9a:	b510      	push	{r4, lr}
    de9c:	4604      	mov	r4, r0
    de9e:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    dea2:	b108      	cbz	r0, dea8 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xe>
    dea4:	2825      	cmp	r0, #37	; 0x25
    dea6:	d901      	bls.n	deac <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x12>
    dea8:	2012      	movs	r0, #18
    deaa:	bd10      	pop	{r4, pc}
    deac:	b132      	cbz	r2, debc <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x22>
    deae:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
    deb2:	b128      	cbz	r0, dec0 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x26>
    deb4:	2801      	cmp	r0, #1
    deb6:	d009      	beq.n	decc <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x32>
    deb8:	201f      	movs	r0, #31
    deba:	bd10      	pop	{r4, pc}
    debc:	2000      	movs	r0, #0
    debe:	bd10      	pop	{r4, pc}
    dec0:	4620      	mov	r0, r4
    dec2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dec6:	4611      	mov	r1, r2
    dec8:	f7f4 bc26 	b.w	2718 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x1c>
    decc:	8aa2      	ldrh	r2, [r4, #20]
    dece:	6949      	ldr	r1, [r1, #20]
    ded0:	f104 0025 	add.w	r0, r4, #37	; 0x25
    ded4:	f7ff ffbf 	bl	de56 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
    ded8:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
    dedc:	e7ee      	b.n	debc <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x22>

0000dede <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    dede:	b570      	push	{r4, r5, r6, lr}
    dee0:	4604      	mov	r4, r0
    dee2:	1c40      	adds	r0, r0, #1
    dee4:	4288      	cmp	r0, r1
    dee6:	d004      	beq.n	def2 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x14>
    dee8:	6808      	ldr	r0, [r1, #0]
    deea:	f8c4 0001 	str.w	r0, [r4, #1]
    deee:	7908      	ldrb	r0, [r1, #4]
    def0:	7160      	strb	r0, [r4, #5]
    def2:	7960      	ldrb	r0, [r4, #5]
    def4:	f000 001f 	and.w	r0, r0, #31
    def8:	7160      	strb	r0, [r4, #5]
    defa:	2000      	movs	r0, #0
    defc:	72e0      	strb	r0, [r4, #11]
    defe:	4605      	mov	r5, r0
    df00:	1966      	adds	r6, r4, r5
    df02:	7870      	ldrb	r0, [r6, #1]
    df04:	f000 fb16 	bl	e534 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>
    df08:	71b0      	strb	r0, [r6, #6]
    df0a:	7ae1      	ldrb	r1, [r4, #11]
    df0c:	1c6d      	adds	r5, r5, #1
    df0e:	4408      	add	r0, r1
    df10:	b2ed      	uxtb	r5, r5
    df12:	72e0      	strb	r0, [r4, #11]
    df14:	2d05      	cmp	r5, #5
    df16:	d3f3      	bcc.n	df00 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x22>
    df18:	bd70      	pop	{r4, r5, r6, pc}
    df1a:	b2c1      	uxtb	r1, r0
    df1c:	fa91 f1a1 	rbit	r1, r1
    df20:	0a00      	lsrs	r0, r0, #8
    df22:	0e09      	lsrs	r1, r1, #24
    df24:	fa90 f0a0 	rbit	r0, r0
    df28:	0e00      	lsrs	r0, r0, #24
    df2a:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    df2e:	4770      	bx	lr
    df30:	b570      	push	{r4, r5, r6, lr}
    df32:	460d      	mov	r5, r1
    df34:	4048      	eors	r0, r1
    df36:	2400      	movs	r4, #0
    df38:	f7ff ffef 	bl	df1a <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x3c>
    df3c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
    df40:	1c64      	adds	r4, r4, #1
    df42:	4428      	add	r0, r5
    df44:	b2e4      	uxtb	r4, r4
    df46:	b280      	uxth	r0, r0
    df48:	2c03      	cmp	r4, #3
    df4a:	d3f5      	bcc.n	df38 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x5a>
    df4c:	bd70      	pop	{r4, r5, r6, pc}

0000df4e <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ>:
    df4e:	7841      	ldrb	r1, [r0, #1]
    df50:	7800      	ldrb	r0, [r0, #0]
    df52:	f010 000f 	ands.w	r0, r0, #15
    df56:	d005      	beq.n	df64 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x16>
    df58:	2801      	cmp	r0, #1
    df5a:	d007      	beq.n	df6c <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x1e>
    df5c:	2802      	cmp	r0, #2
    df5e:	d001      	beq.n	df64 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x16>
    df60:	2806      	cmp	r0, #6
    df62:	d105      	bne.n	df70 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x22>
    df64:	1f89      	subs	r1, r1, #6
    df66:	291f      	cmp	r1, #31
    df68:	d904      	bls.n	df74 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x26>
    df6a:	e001      	b.n	df70 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x22>
    df6c:	290c      	cmp	r1, #12
    df6e:	d001      	beq.n	df74 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x26>
    df70:	2000      	movs	r0, #0
    df72:	4770      	bx	lr
    df74:	2001      	movs	r0, #1
    df76:	4770      	bx	lr

0000df78 <sym_2RWLERIIOLMYS4LVQVNNIFLEQSG65A5Q5F2FPLA>:
    df78:	7800      	ldrb	r0, [r0, #0]
    df7a:	09c0      	lsrs	r0, r0, #7
    df7c:	4770      	bx	lr

0000df7e <sym_SKY6LLKHYM3MTKIUASL3OKO4LAKLVGGKKAJ3I2Y>:
    df7e:	f850 2f03 	ldr.w	r2, [r0, #3]!
    df82:	600a      	str	r2, [r1, #0]
    df84:	8880      	ldrh	r0, [r0, #4]
    df86:	8088      	strh	r0, [r1, #4]
    df88:	4770      	bx	lr

0000df8a <sym_GTN2QTPVJUP6VPTTNNKS6RR7APIHG3FG2T7SNQY>:
    df8a:	7800      	ldrb	r0, [r0, #0]
    df8c:	f3c0 1080 	ubfx	r0, r0, #6, #1
    df90:	4770      	bx	lr

0000df92 <sym_GSWR3VMQYTBBLEEXNPYAGKUY5XX24O5ABWIFKUI>:
    df92:	7801      	ldrb	r1, [r0, #0]
    df94:	f001 010f 	and.w	r1, r1, #15
    df98:	2904      	cmp	r1, #4
    df9a:	d105      	bne.n	dfa8 <sym_GSWR3VMQYTBBLEEXNPYAGKUY5XX24O5ABWIFKUI+0x16>
    df9c:	7840      	ldrb	r0, [r0, #1]
    df9e:	1f80      	subs	r0, r0, #6
    dfa0:	281f      	cmp	r0, #31
    dfa2:	d801      	bhi.n	dfa8 <sym_GSWR3VMQYTBBLEEXNPYAGKUY5XX24O5ABWIFKUI+0x16>
    dfa4:	2001      	movs	r0, #1
    dfa6:	4770      	bx	lr
    dfa8:	2000      	movs	r0, #0
    dfaa:	4770      	bx	lr

0000dfac <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>:
    dfac:	b510      	push	{r4, lr}
    dfae:	7802      	ldrb	r2, [r0, #0]
    dfb0:	f001 030f 	and.w	r3, r1, #15
    dfb4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    dfb8:	431a      	orrs	r2, r3
    dfba:	7002      	strb	r2, [r0, #0]
    dfbc:	2907      	cmp	r1, #7
    dfbe:	d20c      	bcs.n	dfda <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2e>
    dfc0:	e8df f001 	tbb	[pc, r1]
    dfc4:	06040604 	.word	0x06040604
    dfc8:	00040804 	.word	0x00040804
    dfcc:	2106      	movs	r1, #6
    dfce:	e002      	b.n	dfd6 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2a>
    dfd0:	210c      	movs	r1, #12
    dfd2:	e000      	b.n	dfd6 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2a>
    dfd4:	2122      	movs	r1, #34	; 0x22
    dfd6:	7041      	strb	r1, [r0, #1]
    dfd8:	bd10      	pop	{r4, pc}
    dfda:	21a8      	movs	r1, #168	; 0xa8
    dfdc:	202a      	movs	r0, #42	; 0x2a
    dfde:	f7f2 fd4f 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000dfe2 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>:
    dfe2:	680a      	ldr	r2, [r1, #0]
    dfe4:	f840 2f09 	str.w	r2, [r0, #9]!
    dfe8:	8889      	ldrh	r1, [r1, #4]
    dfea:	8081      	strh	r1, [r0, #4]
    dfec:	4770      	bx	lr

0000dfee <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>:
    dfee:	7802      	ldrb	r2, [r0, #0]
    dff0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    dff4:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    dff8:	7002      	strb	r2, [r0, #0]
    dffa:	4770      	bx	lr

0000dffc <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>:
    dffc:	680a      	ldr	r2, [r1, #0]
    dffe:	f840 2f03 	str.w	r2, [r0, #3]!
    e002:	8889      	ldrh	r1, [r1, #4]
    e004:	8081      	strh	r1, [r0, #4]
    e006:	4770      	bx	lr

0000e008 <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>:
    e008:	7802      	ldrb	r2, [r0, #0]
    e00a:	2340      	movs	r3, #64	; 0x40
    e00c:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    e010:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    e014:	430a      	orrs	r2, r1
    e016:	7002      	strb	r2, [r0, #0]
    e018:	4770      	bx	lr

0000e01a <sym_UODFQA44OAUGQWVRPEK2IIKSCIFD37IIPLUYFSI>:
    e01a:	680a      	ldr	r2, [r1, #0]
    e01c:	6042      	str	r2, [r0, #4]
    e01e:	7909      	ldrb	r1, [r1, #4]
    e020:	7201      	strb	r1, [r0, #8]
    e022:	4770      	bx	lr

0000e024 <sym_ZZDNF2NNUMTRE4Y6NUTK3CJU3EQI64HKYHSTDAI>:
    e024:	72c1      	strb	r1, [r0, #11]
    e026:	0a09      	lsrs	r1, r1, #8
    e028:	7301      	strb	r1, [r0, #12]
    e02a:	4770      	bx	lr

0000e02c <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI>:
    e02c:	b510      	push	{r4, lr}
    e02e:	29fb      	cmp	r1, #251	; 0xfb
    e030:	d904      	bls.n	e03c <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI+0x10>
    e032:	f240 61a9 	movw	r1, #1705	; 0x6a9
    e036:	202a      	movs	r0, #42	; 0x2a
    e038:	f7f2 fd22 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e03c:	7041      	strb	r1, [r0, #1]
    e03e:	bd10      	pop	{r4, pc}

0000e040 <sym_ZLXXGUFNBKYTUHSDKKKU4A6O7RMXODI4OQA6IUY>:
    e040:	8809      	ldrh	r1, [r1, #0]
    e042:	8181      	strh	r1, [r0, #12]
    e044:	4770      	bx	lr

0000e046 <sym_3LF2RG2XP7QRT5FAEZFOPL4L5RIBP3MCQ5PY7XY>:
    e046:	6809      	ldr	r1, [r1, #0]
    e048:	f8c0 1016 	str.w	r1, [r0, #22]
    e04c:	4770      	bx	lr

0000e04e <sym_NSDJKDRKPUUB5EAI3OMDTFOWZBLYJSPI3VQSNXQ>:
    e04e:	680a      	ldr	r2, [r1, #0]
    e050:	6042      	str	r2, [r0, #4]
    e052:	6849      	ldr	r1, [r1, #4]
    e054:	6081      	str	r1, [r0, #8]
    e056:	4770      	bx	lr

0000e058 <sym_LPOR4PC6XUIXDNEKJLY3JL3BKNV2UZG2OR7FAKQ>:
    e058:	680a      	ldr	r2, [r1, #0]
    e05a:	f840 2f0e 	str.w	r2, [r0, #14]!
    e05e:	6849      	ldr	r1, [r1, #4]
    e060:	6041      	str	r1, [r0, #4]
    e062:	4770      	bx	lr

0000e064 <sym_RHFWG2VAMMSM6HNQIXGIQMU7QUNXB2XIV4NQREY>:
    e064:	68c0      	ldr	r0, [r0, #12]
    e066:	6008      	str	r0, [r1, #0]
    e068:	4770      	bx	lr

0000e06a <sym_G3E5J3DBBC3WRZ26KQDVAZEPSZL4FITDNFKJBAY>:
    e06a:	6842      	ldr	r2, [r0, #4]
    e06c:	600a      	str	r2, [r1, #0]
    e06e:	6880      	ldr	r0, [r0, #8]
    e070:	6048      	str	r0, [r1, #4]
    e072:	4770      	bx	lr

0000e074 <sym_VV6G4PHP6ULWM4Y2LJJIOETDZSUFDXGJCHBQNZI>:
    e074:	7800      	ldrb	r0, [r0, #0]
    e076:	f000 0003 	and.w	r0, r0, #3
    e07a:	4770      	bx	lr

0000e07c <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>:
    e07c:	8880      	ldrh	r0, [r0, #4]
    e07e:	4770      	bx	lr

0000e080 <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>:
    e080:	88c0      	ldrh	r0, [r0, #6]
    e082:	4770      	bx	lr

0000e084 <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>:
    e084:	8900      	ldrh	r0, [r0, #8]
    e086:	4770      	bx	lr

0000e088 <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>:
    e088:	8940      	ldrh	r0, [r0, #10]
    e08a:	4770      	bx	lr

0000e08c <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>:
    e08c:	8901      	ldrh	r1, [r0, #8]
    e08e:	291b      	cmp	r1, #27
    e090:	d30c      	bcc.n	e0ac <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    e092:	8941      	ldrh	r1, [r0, #10]
    e094:	f44f 72a4 	mov.w	r2, #328	; 0x148
    e098:	4291      	cmp	r1, r2
    e09a:	d307      	bcc.n	e0ac <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    e09c:	8881      	ldrh	r1, [r0, #4]
    e09e:	291b      	cmp	r1, #27
    e0a0:	d304      	bcc.n	e0ac <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    e0a2:	88c0      	ldrh	r0, [r0, #6]
    e0a4:	4290      	cmp	r0, r2
    e0a6:	d301      	bcc.n	e0ac <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    e0a8:	2001      	movs	r0, #1
    e0aa:	4770      	bx	lr
    e0ac:	2000      	movs	r0, #0
    e0ae:	4770      	bx	lr

0000e0b0 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y>:
    e0b0:	7901      	ldrb	r1, [r0, #4]
    e0b2:	0749      	lsls	r1, r1, #29
    e0b4:	d004      	beq.n	e0c0 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y+0x10>
    e0b6:	7940      	ldrb	r0, [r0, #5]
    e0b8:	0740      	lsls	r0, r0, #29
    e0ba:	d001      	beq.n	e0c0 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y+0x10>
    e0bc:	2001      	movs	r0, #1
    e0be:	4770      	bx	lr
    e0c0:	2000      	movs	r0, #0
    e0c2:	4770      	bx	lr

0000e0c4 <sym_AYZTYWE6SD5T6ZDLITENLNSRAVS5VKE23BWONUA>:
    e0c4:	7181      	strb	r1, [r0, #6]
    e0c6:	0a09      	lsrs	r1, r1, #8
    e0c8:	71c1      	strb	r1, [r0, #7]
    e0ca:	4770      	bx	lr

0000e0cc <sym_SAWOREXGWRJNX5IOUMHBRACZ6DWRXOAHPPFX4TA>:
    e0cc:	7101      	strb	r1, [r0, #4]
    e0ce:	4770      	bx	lr

0000e0d0 <sym_SG4OPFPHWHCVU6FHRG2ZQ5GV7RHUGBHEKN6N55A>:
    e0d0:	7141      	strb	r1, [r0, #5]
    e0d2:	4770      	bx	lr

0000e0d4 <sym_V2EAB4QFEU4UUAXJWVWPATMDA5XIHPNUG5SNJCQ>:
    e0d4:	7901      	ldrb	r1, [r0, #4]
    e0d6:	0749      	lsls	r1, r1, #29
    e0d8:	d004      	beq.n	e0e4 <sym_V2EAB4QFEU4UUAXJWVWPATMDA5XIHPNUG5SNJCQ+0x10>
    e0da:	7940      	ldrb	r0, [r0, #5]
    e0dc:	0740      	lsls	r0, r0, #29
    e0de:	d001      	beq.n	e0e4 <sym_V2EAB4QFEU4UUAXJWVWPATMDA5XIHPNUG5SNJCQ+0x10>
    e0e0:	2001      	movs	r0, #1
    e0e2:	4770      	bx	lr
    e0e4:	2000      	movs	r0, #0
    e0e6:	4770      	bx	lr

0000e0e8 <sym_65MVSHFHYY3W6LGERKUEYJPJ7ENCODZZSM2L7CQ>:
    e0e8:	7900      	ldrb	r0, [r0, #4]
    e0ea:	4770      	bx	lr

0000e0ec <sym_YMBI57OSTLFK65WQKT7WKM26EFMSOHLSMFNNR4I>:
    e0ec:	7101      	strb	r1, [r0, #4]
    e0ee:	4770      	bx	lr

0000e0f0 <sym_MR2HDMT6FMX7P5HJAUSXDTOYNLKDM5AILMXKYDY>:
    e0f0:	7940      	ldrb	r0, [r0, #5]
    e0f2:	4770      	bx	lr

0000e0f4 <sym_HAHVMCZ4V2U4G5KM2JOTYBKS4GFM72EJZRT7M3A>:
    e0f4:	7141      	strb	r1, [r0, #5]
    e0f6:	4770      	bx	lr

0000e0f8 <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>:
    e0f8:	7802      	ldrb	r2, [r0, #0]
    e0fa:	f001 0103 	and.w	r1, r1, #3
    e0fe:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    e102:	430a      	orrs	r2, r1
    e104:	7002      	strb	r2, [r0, #0]
    e106:	4770      	bx	lr

0000e108 <sym_XW2AJRDPRGLPOQ7S6SBIDHJSPT737QJRC7LOWOI>:
    e108:	7101      	strb	r1, [r0, #4]
    e10a:	0a09      	lsrs	r1, r1, #8
    e10c:	7141      	strb	r1, [r0, #5]
    e10e:	4770      	bx	lr

0000e110 <sym_LKCMUIZAJSOHIZE54V37DJ4ULJ25HGEY7F7ST5I>:
    e110:	7181      	strb	r1, [r0, #6]
    e112:	0a09      	lsrs	r1, r1, #8
    e114:	71c1      	strb	r1, [r0, #7]
    e116:	4770      	bx	lr

0000e118 <sym_5NOMYYLIL22YATRZCGPQVOYH6BFSDNIEMEEMIZA>:
    e118:	7201      	strb	r1, [r0, #8]
    e11a:	0a09      	lsrs	r1, r1, #8
    e11c:	7241      	strb	r1, [r0, #9]
    e11e:	4770      	bx	lr

0000e120 <sym_BD2MQHSWE7QNCT7DV5JGZCA5J2QIL2T6RGRVJ3Y>:
    e120:	7281      	strb	r1, [r0, #10]
    e122:	0a09      	lsrs	r1, r1, #8
    e124:	72c1      	strb	r1, [r0, #11]
    e126:	4770      	bx	lr

0000e128 <sym_AFBV6ZWWJ5TP5BBQPAY4D2XGGYVLQVI65FY6JPY>:
    e128:	7900      	ldrb	r0, [r0, #4]
    e12a:	4770      	bx	lr

0000e12c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI>:
    e12c:	7900      	ldrb	r0, [r0, #4]
    e12e:	4770      	bx	lr

0000e130 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    e130:	b510      	push	{r4, lr}
    e132:	7a01      	ldrb	r1, [r0, #8]
    e134:	b119      	cbz	r1, e13e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe>
    e136:	2901      	cmp	r1, #1
    e138:	d006      	beq.n	e148 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    e13a:	2000      	movs	r0, #0
    e13c:	bd10      	pop	{r4, pc}
    e13e:	88c2      	ldrh	r2, [r0, #6]
    e140:	6803      	ldr	r3, [r0, #0]
    e142:	8880      	ldrh	r0, [r0, #4]
    e144:	2102      	movs	r1, #2
    e146:	e003      	b.n	e150 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
    e148:	88c2      	ldrh	r2, [r0, #6]
    e14a:	6803      	ldr	r3, [r0, #0]
    e14c:	8880      	ldrh	r0, [r0, #4]
    e14e:	2101      	movs	r1, #1
    e150:	f7f4 fb94 	bl	287c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x14>
    e154:	b908      	cbnz	r0, e15a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2a>
    e156:	f7f4 fbdb 	bl	2910 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>
    e15a:	2001      	movs	r0, #1
    e15c:	bd10      	pop	{r4, pc}

0000e15e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>:
    e15e:	b508      	push	{r3, lr}
    e160:	7a03      	ldrb	r3, [r0, #8]
    e162:	f88d 3000 	strb.w	r3, [sp]
    e166:	9b00      	ldr	r3, [sp, #0]
    e168:	9300      	str	r3, [sp, #0]
    e16a:	f89d 3000 	ldrb.w	r3, [sp]
    e16e:	b123      	cbz	r3, e17a <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY+0x1c>
    e170:	f240 3117 	movw	r1, #791	; 0x317
    e174:	2010      	movs	r0, #16
    e176:	f7f2 fc83 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e17a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    e17e:	f7f4 bd4d 	b.w	2c1c <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x100>

0000e182 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>:
    e182:	f7f4 bd79 	b.w	2c78 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x15c>

0000e186 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>:
    e186:	7a03      	ldrb	r3, [r0, #8]
    e188:	b082      	sub	sp, #8
    e18a:	f88d 3000 	strb.w	r3, [sp]
    e18e:	9b00      	ldr	r3, [sp, #0]
    e190:	9300      	str	r3, [sp, #0]
    e192:	f89d 3000 	ldrb.w	r3, [sp]
    e196:	2b00      	cmp	r3, #0
    e198:	d102      	bne.n	e1a0 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY+0x1a>
    e19a:	b002      	add	sp, #8
    e19c:	f7f4 bd3e 	b.w	2c1c <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x100>
    e1a0:	b002      	add	sp, #8
    e1a2:	4770      	bx	lr
    e1a4:	2000      	movs	r0, #0
    e1a6:	7048      	strb	r0, [r1, #1]
    e1a8:	2003      	movs	r0, #3
    e1aa:	7008      	strb	r0, [r1, #0]
    e1ac:	2001      	movs	r0, #1
    e1ae:	7108      	strb	r0, [r1, #4]
    e1b0:	4770      	bx	lr

0000e1b2 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
    e1b2:	b510      	push	{r4, lr}
    e1b4:	888c      	ldrh	r4, [r1, #4]
    e1b6:	890a      	ldrh	r2, [r1, #8]
    e1b8:	884b      	ldrh	r3, [r1, #2]
    e1ba:	88c9      	ldrh	r1, [r1, #6]
    e1bc:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
    e1c0:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
    e1c4:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
    e1c8:	f8a0 204e 	strh.w	r2, [r0, #78]	; 0x4e
    e1cc:	bd10      	pop	{r4, pc}

0000e1ce <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
    e1ce:	b570      	push	{r4, r5, r6, lr}
    e1d0:	4615      	mov	r5, r2
    e1d2:	460c      	mov	r4, r1
    e1d4:	f000 f91a 	bl	e40c <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x108>
    e1d8:	3096      	adds	r0, #150	; 0x96
    e1da:	4428      	add	r0, r5
    e1dc:	42a0      	cmp	r0, r4
    e1de:	d801      	bhi.n	e1e4 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI+0x16>
    e1e0:	1a20      	subs	r0, r4, r0
    e1e2:	bd70      	pop	{r4, r5, r6, pc}
    e1e4:	2000      	movs	r0, #0
    e1e6:	bd70      	pop	{r4, r5, r6, pc}

0000e1e8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
    e1e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e1ec:	4604      	mov	r4, r0
    e1ee:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
    e1f0:	8f46      	ldrh	r6, [r0, #58]	; 0x3a
    e1f2:	f8b0 504c 	ldrh.w	r5, [r0, #76]	; 0x4c
    e1f6:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
    e1fa:	4285      	cmp	r5, r0
    e1fc:	d300      	bcc.n	e200 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x18>
    e1fe:	4605      	mov	r5, r0
    e200:	4620      	mov	r0, r4
    e202:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    e206:	f000 f89c 	bl	e342 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x3e>
    e20a:	4601      	mov	r1, r0
    e20c:	86e5      	strh	r5, [r4, #54]	; 0x36
    e20e:	8761      	strh	r1, [r4, #58]	; 0x3a
    e210:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    e212:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    e216:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    e218:	4680      	mov	r8, r0
    e21a:	42aa      	cmp	r2, r5
    e21c:	d200      	bcs.n	e220 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x38>
    e21e:	462a      	mov	r2, r5
    e220:	428b      	cmp	r3, r1
    e222:	d200      	bcs.n	e226 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x3e>
    e224:	460b      	mov	r3, r1
    e226:	8202      	strh	r2, [r0, #16]
    e228:	f8a8 3012 	strh.w	r3, [r8, #18]
    e22c:	42bd      	cmp	r5, r7
    e22e:	d101      	bne.n	e234 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x4c>
    e230:	42b1      	cmp	r1, r6
    e232:	d001      	beq.n	e238 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x50>
    e234:	2001      	movs	r0, #1
    e236:	e000      	b.n	e23a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x52>
    e238:	2000      	movs	r0, #0
    e23a:	4681      	mov	r9, r0
    e23c:	f8b4 5048 	ldrh.w	r5, [r4, #72]	; 0x48
    e240:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
    e244:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
    e246:	8f26      	ldrh	r6, [r4, #56]	; 0x38
    e248:	4285      	cmp	r5, r0
    e24a:	d300      	bcc.n	e24e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x66>
    e24c:	4605      	mov	r5, r0
    e24e:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    e252:	4620      	mov	r0, r4
    e254:	f000 f87d 	bl	e352 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x4e>
    e258:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
    e25c:	2902      	cmp	r1, #2
    e25e:	d108      	bne.n	e272 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x8a>
    e260:	42af      	cmp	r7, r5
    e262:	d200      	bcs.n	e266 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x7e>
    e264:	463d      	mov	r5, r7
    e266:	4286      	cmp	r6, r0
    e268:	d200      	bcs.n	e26c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x84>
    e26a:	4630      	mov	r0, r6
    e26c:	2100      	movs	r1, #0
    e26e:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
    e272:	f8a8 5008 	strh.w	r5, [r8, #8]
    e276:	f8a8 000c 	strh.w	r0, [r8, #12]
    e27a:	42bd      	cmp	r5, r7
    e27c:	d101      	bne.n	e282 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9a>
    e27e:	42b0      	cmp	r0, r6
    e280:	d001      	beq.n	e286 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9e>
    e282:	2001      	movs	r0, #1
    e284:	e000      	b.n	e288 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0xa0>
    e286:	2000      	movs	r0, #0
    e288:	ea40 0009 	orr.w	r0, r0, r9
    e28c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000e290 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>:
    e290:	6840      	ldr	r0, [r0, #4]
    e292:	4770      	bx	lr

0000e294 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>:
    e294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e298:	4616      	mov	r6, r2
    e29a:	460f      	mov	r7, r1
    e29c:	4604      	mov	r4, r0
    e29e:	f000 f8b5 	bl	e40c <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x108>
    e2a2:	4605      	mov	r5, r0
    e2a4:	463a      	mov	r2, r7
    e2a6:	6921      	ldr	r1, [r4, #16]
    e2a8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    e2aa:	f000 f845 	bl	e338 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x34>
    e2ae:	19a9      	adds	r1, r5, r6
    e2b0:	4281      	cmp	r1, r0
    e2b2:	d300      	bcc.n	e2b6 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY+0x22>
    e2b4:	4608      	mov	r0, r1
    e2b6:	6320      	str	r0, [r4, #48]	; 0x30
    e2b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e2bc <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
    e2bc:	221b      	movs	r2, #27
    e2be:	8402      	strh	r2, [r0, #32]
    e2c0:	8382      	strh	r2, [r0, #28]
    e2c2:	82c2      	strh	r2, [r0, #22]
    e2c4:	8282      	strh	r2, [r0, #20]
    e2c6:	8142      	strh	r2, [r0, #10]
    e2c8:	8202      	strh	r2, [r0, #16]
    e2ca:	8102      	strh	r2, [r0, #8]
    e2cc:	8542      	strh	r2, [r0, #42]	; 0x2a
    e2ce:	8582      	strh	r2, [r0, #44]	; 0x2c
    e2d0:	8482      	strh	r2, [r0, #36]	; 0x24
    e2d2:	2900      	cmp	r1, #0
    e2d4:	d10a      	bne.n	e2ec <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
    e2d6:	f44f 71a4 	mov.w	r1, #328	; 0x148
    e2da:	8441      	strh	r1, [r0, #34]	; 0x22
    e2dc:	83c1      	strh	r1, [r0, #30]
    e2de:	8341      	strh	r1, [r0, #26]
    e2e0:	8301      	strh	r1, [r0, #24]
    e2e2:	81c1      	strh	r1, [r0, #14]
    e2e4:	8241      	strh	r1, [r0, #18]
    e2e6:	8181      	strh	r1, [r0, #12]
    e2e8:	85c1      	strh	r1, [r0, #46]	; 0x2e
    e2ea:	8601      	strh	r1, [r0, #48]	; 0x30
    e2ec:	4770      	bx	lr

0000e2ee <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
    e2ee:	6800      	ldr	r0, [r0, #0]
    e2f0:	f101 029c 	add.w	r2, r1, #156	; 0x9c
    e2f4:	4290      	cmp	r0, r2
    e2f6:	d903      	bls.n	e300 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
    e2f8:	1a40      	subs	r0, r0, r1
    e2fa:	389c      	subs	r0, #156	; 0x9c
    e2fc:	0840      	lsrs	r0, r0, #1
    e2fe:	4770      	bx	lr
    e300:	2000      	movs	r0, #0
    e302:	4770      	bx	lr

0000e304 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
    e304:	b510      	push	{r4, lr}
    e306:	9c02      	ldr	r4, [sp, #8]
    e308:	8281      	strh	r1, [r0, #20]
    e30a:	82c2      	strh	r2, [r0, #22]
    e30c:	8303      	strh	r3, [r0, #24]
    e30e:	8344      	strh	r4, [r0, #26]
    e310:	bd10      	pop	{r4, pc}
    e312:	1d00      	adds	r0, r0, #4
    e314:	b510      	push	{r4, lr}
    e316:	b280      	uxth	r0, r0
    e318:	2901      	cmp	r1, #1
    e31a:	d006      	beq.n	e32a <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x26>
    e31c:	2902      	cmp	r1, #2
    e31e:	d007      	beq.n	e330 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x2c>
    e320:	f240 2126 	movw	r1, #550	; 0x226
    e324:	2006      	movs	r0, #6
    e326:	f7f2 fbab 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e32a:	00c0      	lsls	r0, r0, #3
    e32c:	3050      	adds	r0, #80	; 0x50
    e32e:	e001      	b.n	e334 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x30>
    e330:	0080      	lsls	r0, r0, #2
    e332:	302c      	adds	r0, #44	; 0x2c
    e334:	b280      	uxth	r0, r0
    e336:	bd10      	pop	{r4, pc}
    e338:	4288      	cmp	r0, r1
    e33a:	d300      	bcc.n	e33e <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x3a>
    e33c:	4608      	mov	r0, r1
    e33e:	1a80      	subs	r0, r0, r2
    e340:	4770      	bx	lr
    e342:	f8b0 104e 	ldrh.w	r1, [r0, #78]	; 0x4e
    e346:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
    e34a:	4281      	cmp	r1, r0
    e34c:	d200      	bcs.n	e350 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x4c>
    e34e:	4608      	mov	r0, r1
    e350:	4770      	bx	lr
    e352:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    e356:	f8b0 0046 	ldrh.w	r0, [r0, #70]	; 0x46
    e35a:	4281      	cmp	r1, r0
    e35c:	d200      	bcs.n	e360 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x5c>
    e35e:	4608      	mov	r0, r1
    e360:	4770      	bx	lr
    e362:	b538      	push	{r3, r4, r5, lr}
    e364:	2200      	movs	r2, #0
    e366:	f1a0 0318 	sub.w	r3, r0, #24
    e36a:	2416      	movs	r4, #22
    e36c:	7202      	strb	r2, [r0, #8]
    e36e:	704a      	strb	r2, [r1, #1]
    e370:	700c      	strb	r4, [r1, #0]
    e372:	f8d3 5022 	ldr.w	r5, [r3, #34]	; 0x22
    e376:	604d      	str	r5, [r1, #4]
    e378:	f8d3 5026 	ldr.w	r5, [r3, #38]	; 0x26
    e37c:	608d      	str	r5, [r1, #8]
    e37e:	f8d3 502a 	ldr.w	r5, [r3, #42]	; 0x2a
    e382:	60cd      	str	r5, [r1, #12]
    e384:	7a05      	ldrb	r5, [r0, #8]
    e386:	f88d 5000 	strb.w	r5, [sp]
    e38a:	9d00      	ldr	r5, [sp, #0]
    e38c:	9500      	str	r5, [sp, #0]
    e38e:	f89d 5000 	ldrb.w	r5, [sp]
    e392:	2d00      	cmp	r5, #0
    e394:	d1ea      	bne.n	e36c <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x68>
    e396:	bd38      	pop	{r3, r4, r5, pc}
    e398:	b5f0      	push	{r4, r5, r6, r7, lr}
    e39a:	b087      	sub	sp, #28
    e39c:	460d      	mov	r5, r1
    e39e:	4604      	mov	r4, r0
    e3a0:	f7f4 fa58 	bl	2854 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>
    e3a4:	2600      	movs	r6, #0
    e3a6:	b328      	cbz	r0, e3f4 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xf0>
    e3a8:	f5a4 70c0 	sub.w	r0, r4, #384	; 0x180
    e3ac:	7226      	strb	r6, [r4, #8]
    e3ae:	8807      	ldrh	r7, [r0, #0]
    e3b0:	a903      	add	r1, sp, #12
    e3b2:	4638      	mov	r0, r7
    e3b4:	f001 fb39 	bl	fa2a <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    e3b8:	b108      	cbz	r0, e3be <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xba>
    e3ba:	21fd      	movs	r1, #253	; 0xfd
    e3bc:	e017      	b.n	e3ee <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xea>
    e3be:	f8ad 7000 	strh.w	r7, [sp]
    e3c2:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    e3c6:	f8ad 0002 	strh.w	r0, [sp, #2]
    e3ca:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    e3ce:	f8ad 0004 	strh.w	r0, [sp, #4]
    e3d2:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    e3d6:	f8ad 0006 	strh.w	r0, [sp, #6]
    e3da:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    e3de:	f8ad 0008 	strh.w	r0, [sp, #8]
    e3e2:	4668      	mov	r0, sp
    e3e4:	f001 fb48 	bl	fa78 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    e3e8:	b120      	cbz	r0, e3f4 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xf0>
    e3ea:	f44f 7183 	mov.w	r1, #262	; 0x106
    e3ee:	202c      	movs	r0, #44	; 0x2c
    e3f0:	f7f2 fb46 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e3f4:	201f      	movs	r0, #31
    e3f6:	7028      	strb	r0, [r5, #0]
    e3f8:	706e      	strb	r6, [r5, #1]
    e3fa:	f854 0f0a 	ldr.w	r0, [r4, #10]!
    e3fe:	6068      	str	r0, [r5, #4]
    e400:	6860      	ldr	r0, [r4, #4]
    e402:	60a8      	str	r0, [r5, #8]
    e404:	8920      	ldrh	r0, [r4, #8]
    e406:	81a8      	strh	r0, [r5, #12]
    e408:	b007      	add	sp, #28
    e40a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e40c:	2196      	movs	r1, #150	; 0x96
    e40e:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
    e412:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
    e416:	f000 b800 	b.w	e41a <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x116>
    e41a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e41e:	460d      	mov	r5, r1
    e420:	4606      	mov	r6, r0
    e422:	4698      	mov	r8, r3
    e424:	4617      	mov	r7, r2
    e426:	8e80      	ldrh	r0, [r0, #52]	; 0x34
    e428:	4611      	mov	r1, r2
    e42a:	f7ff ff72 	bl	e312 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xe>
    e42e:	4604      	mov	r4, r0
    e430:	4639      	mov	r1, r7
    e432:	4630      	mov	r0, r6
    e434:	f7ff ff8d 	bl	e352 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x4e>
    e438:	42a0      	cmp	r0, r4
    e43a:	d200      	bcs.n	e43e <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x13a>
    e43c:	4604      	mov	r4, r0
    e43e:	8fb0      	ldrh	r0, [r6, #60]	; 0x3c
    e440:	4641      	mov	r1, r8
    e442:	f7ff ff66 	bl	e312 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xe>
    e446:	4607      	mov	r7, r0
    e448:	4641      	mov	r1, r8
    e44a:	4630      	mov	r0, r6
    e44c:	f7ff ff79 	bl	e342 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x3e>
    e450:	42b8      	cmp	r0, r7
    e452:	d300      	bcc.n	e456 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x152>
    e454:	4638      	mov	r0, r7
    e456:	4420      	add	r0, r4
    e458:	4428      	add	r0, r5
    e45a:	1d80      	adds	r0, r0, #6
    e45c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e460 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q>:
    e460:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    e464:	2700      	movs	r7, #0
    e466:	463d      	mov	r5, r7
    e468:	2623      	movs	r6, #35	; 0x23
    e46a:	46b8      	mov	r8, r7
    e46c:	f7f4 fcc2 	bl	2df4 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    e470:	4604      	mov	r4, r0
    e472:	f7f4 fc87 	bl	2d84 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA>
    e476:	b190      	cbz	r0, e49e <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x3e>
    e478:	f8cd 8000 	str.w	r8, [sp]
    e47c:	f8cd 8004 	str.w	r8, [sp, #4]
    e480:	e003      	b.n	e48a <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x2a>
    e482:	9800      	ldr	r0, [sp, #0]
    e484:	6941      	ldr	r1, [r0, #20]
    e486:	42a1      	cmp	r1, r4
    e488:	d009      	beq.n	e49e <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x3e>
    e48a:	4668      	mov	r0, sp
    e48c:	f7f2 fd16 	bl	ebc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    e490:	2800      	cmp	r0, #0
    e492:	d0f6      	beq.n	e482 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x22>
    e494:	4625      	mov	r5, r4
    e496:	4620      	mov	r0, r4
    e498:	f7f4 fc3e 	bl	2d18 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>
    e49c:	4607      	mov	r7, r0
    e49e:	1e76      	subs	r6, r6, #1
    e4a0:	d001      	beq.n	e4a6 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x46>
    e4a2:	2f00      	cmp	r7, #0
    e4a4:	d0e2      	beq.n	e46c <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0xc>
    e4a6:	b115      	cbz	r5, e4ae <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x4e>
    e4a8:	4628      	mov	r0, r5
    e4aa:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    e4ae:	f240 1167 	movw	r1, #359	; 0x167
    e4b2:	200f      	movs	r0, #15
    e4b4:	f7f2 fae4 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e4b8:	ea00 0040 	and.w	r0, r0, r0, lsl #1
    e4bc:	ea00 0040 	and.w	r0, r0, r0, lsl #1
    e4c0:	ea00 0040 	and.w	r0, r0, r0, lsl #1
    e4c4:	ea00 0040 	and.w	r0, r0, r0, lsl #1
    e4c8:	ea00 0040 	and.w	r0, r0, r0, lsl #1
    e4cc:	ea10 0f40 	tst.w	r0, r0, lsl #1
    e4d0:	d001      	beq.n	e4d6 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x76>
    e4d2:	2000      	movs	r0, #0
    e4d4:	4770      	bx	lr
    e4d6:	2001      	movs	r0, #1
    e4d8:	4770      	bx	lr
    e4da:	b510      	push	{r4, lr}
    e4dc:	4604      	mov	r4, r0
    e4de:	2108      	movs	r1, #8
    e4e0:	4620      	mov	r0, r4
    e4e2:	f7f2 fb6d 	bl	bc0 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    e4e6:	6820      	ldr	r0, [r4, #0]
    e4e8:	2800      	cmp	r0, #0
    e4ea:	d102      	bne.n	e4f2 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x92>
    e4ec:	6860      	ldr	r0, [r4, #4]
    e4ee:	2800      	cmp	r0, #0
    e4f0:	d0f5      	beq.n	e4de <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x7e>
    e4f2:	bd10      	pop	{r4, pc}

0000e4f4 <sym_B4SOI7ZERMZJ76YVIJFCACJN3HNVAJYEHZSLSTQ>:
    e4f4:	f000 3155 	and.w	r1, r0, #1431655765	; 0x55555555
    e4f8:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
    e4fc:	ea02 0050 	and.w	r0, r2, r0, lsr #1
    e500:	4408      	add	r0, r1
    e502:	f000 3133 	and.w	r1, r0, #858993459	; 0x33333333
    e506:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
    e50a:	ea02 0090 	and.w	r0, r2, r0, lsr #2
    e50e:	4408      	add	r0, r1
    e510:	f000 310f 	and.w	r1, r0, #252645135	; 0xf0f0f0f
    e514:	f04f 320f 	mov.w	r2, #252645135	; 0xf0f0f0f
    e518:	ea02 1010 	and.w	r0, r2, r0, lsr #4
    e51c:	4408      	add	r0, r1
    e51e:	f000 11ff 	and.w	r1, r0, #16711935	; 0xff00ff
    e522:	f04f 12ff 	mov.w	r2, #16711935	; 0xff00ff
    e526:	ea02 2010 	and.w	r0, r2, r0, lsr #8
    e52a:	4408      	add	r0, r1
    e52c:	eb00 4010 	add.w	r0, r0, r0, lsr #16
    e530:	b2c0      	uxtb	r0, r0
    e532:	4770      	bx	lr

0000e534 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>:
    e534:	f000 0155 	and.w	r1, r0, #85	; 0x55
    e538:	2255      	movs	r2, #85	; 0x55
    e53a:	ea02 0050 	and.w	r0, r2, r0, lsr #1
    e53e:	4408      	add	r0, r1
    e540:	f000 0133 	and.w	r1, r0, #51	; 0x33
    e544:	2233      	movs	r2, #51	; 0x33
    e546:	ea02 0090 	and.w	r0, r2, r0, lsr #2
    e54a:	4408      	add	r0, r1
    e54c:	f000 010f 	and.w	r1, r0, #15
    e550:	eb01 1010 	add.w	r0, r1, r0, lsr #4
    e554:	4770      	bx	lr

0000e556 <sym_KX4ODCDF63RBCM4RLVD2FMITN5XCORTH2S6ZQ5A>:
    e556:	ea80 0060 	eor.w	r0, r0, r0, asr #1
    e55a:	f7ff bfcb 	b.w	e4f4 <sym_B4SOI7ZERMZJ76YVIJFCACJN3HNVAJYEHZSLSTQ>

0000e55e <sym_EROH2ERI6YP4PUJVAMOS4KJ2YDG74D2WAXB2TOI>:
    e55e:	b510      	push	{r4, lr}
    e560:	f1a0 0234 	sub.w	r2, r0, #52	; 0x34
    e564:	f830 4cbc 	ldrh.w	r4, [r0, #-188]
    e568:	2000      	movs	r0, #0
    e56a:	7048      	strb	r0, [r1, #1]
    e56c:	230c      	movs	r3, #12
    e56e:	700b      	strb	r3, [r1, #0]
    e570:	7108      	strb	r0, [r1, #4]
    e572:	f8a1 4005 	strh.w	r4, [r1, #5]
    e576:	f892 003d 	ldrb.w	r0, [r2, #61]	; 0x3d
    e57a:	71c8      	strb	r0, [r1, #7]
    e57c:	4620      	mov	r0, r4
    e57e:	f7f2 fe4b 	bl	1218 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    e582:	f7fe feb6 	bl	d2f2 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    e586:	b140      	cbz	r0, e59a <sym_EROH2ERI6YP4PUJVAMOS4KJ2YDG74D2WAXB2TOI+0x3c>
    e588:	4620      	mov	r0, r4
    e58a:	f7ff f99c 	bl	d8c6 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    e58e:	4620      	mov	r0, r4
    e590:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e594:	2100      	movs	r1, #0
    e596:	f7f2 bcd7 	b.w	f48 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    e59a:	2160      	movs	r1, #96	; 0x60
    e59c:	2063      	movs	r0, #99	; 0x63
    e59e:	f7f2 fa6f 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e5a2 <sym_24PTBIAZ2OKSUMWBHATZCO4EQUFF3BOLAN2QX4Y>:
    e5a2:	b538      	push	{r3, r4, r5, lr}
    e5a4:	2200      	movs	r2, #0
    e5a6:	704a      	strb	r2, [r1, #1]
    e5a8:	2309      	movs	r3, #9
    e5aa:	700b      	strb	r3, [r1, #0]
    e5ac:	f1a0 0474 	sub.w	r4, r0, #116	; 0x74
    e5b0:	f5a0 73e3 	sub.w	r3, r0, #454	; 0x1c6
    e5b4:	7202      	strb	r2, [r0, #8]
    e5b6:	84da      	strh	r2, [r3, #38]	; 0x26
    e5b8:	f8d4 507e 	ldr.w	r5, [r4, #126]	; 0x7e
    e5bc:	604d      	str	r5, [r1, #4]
    e5be:	f8d4 5082 	ldr.w	r5, [r4, #130]	; 0x82
    e5c2:	608d      	str	r5, [r1, #8]
    e5c4:	f8b4 5086 	ldrh.w	r5, [r4, #134]	; 0x86
    e5c8:	818d      	strh	r5, [r1, #12]
    e5ca:	710a      	strb	r2, [r1, #4]
    e5cc:	7a05      	ldrb	r5, [r0, #8]
    e5ce:	f88d 5000 	strb.w	r5, [sp]
    e5d2:	9d00      	ldr	r5, [sp, #0]
    e5d4:	9500      	str	r5, [sp, #0]
    e5d6:	f89d 5000 	ldrb.w	r5, [sp]
    e5da:	2d00      	cmp	r5, #0
    e5dc:	d1ea      	bne.n	e5b4 <sym_24PTBIAZ2OKSUMWBHATZCO4EQUFF3BOLAN2QX4Y+0x12>
    e5de:	bd38      	pop	{r3, r4, r5, pc}

0000e5e0 <sym_2TCPCDAUQ3FXZYG56Z6ZP7VCFNUJTBV3EZJYPGY>:
    e5e0:	2200      	movs	r2, #0
    e5e2:	704a      	strb	r2, [r1, #1]
    e5e4:	220d      	movs	r2, #13
    e5e6:	700a      	strb	r2, [r1, #0]
    e5e8:	f100 020a 	add.w	r2, r0, #10
    e5ec:	7a83      	ldrb	r3, [r0, #10]
    e5ee:	f2a0 2012 	subw	r0, r0, #530	; 0x212
    e5f2:	710b      	strb	r3, [r1, #4]
    e5f4:	8800      	ldrh	r0, [r0, #0]
    e5f6:	80c8      	strh	r0, [r1, #6]
    e5f8:	7910      	ldrb	r0, [r2, #4]
    e5fa:	7208      	strb	r0, [r1, #8]
    e5fc:	4770      	bx	lr

0000e5fe <sym_S6U6ANENQP6QL5TLITNXPOYFSB26Q5AFTW32CXI>:
    e5fe:	2200      	movs	r2, #0
    e600:	704a      	strb	r2, [r1, #1]
    e602:	220e      	movs	r2, #14
    e604:	700a      	strb	r2, [r1, #0]
    e606:	7a82      	ldrb	r2, [r0, #10]
    e608:	f2a0 2012 	subw	r0, r0, #530	; 0x212
    e60c:	710a      	strb	r2, [r1, #4]
    e60e:	8800      	ldrh	r0, [r0, #0]
    e610:	80c8      	strh	r0, [r1, #6]
    e612:	4770      	bx	lr

0000e614 <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY>:
    e614:	b510      	push	{r4, lr}
    e616:	6844      	ldr	r4, [r0, #4]
    e618:	7803      	ldrb	r3, [r0, #0]
    e61a:	2100      	movs	r1, #0
    e61c:	f894 20a5 	ldrb.w	r2, [r4, #165]	; 0xa5
    e620:	3488      	adds	r4, #136	; 0x88
    e622:	4620      	mov	r0, r4
    e624:	f7ff fa8a 	bl	db3c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e628:	b110      	cbz	r0, e630 <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY+0x1c>
    e62a:	2004      	movs	r0, #4
    e62c:	7760      	strb	r0, [r4, #29]
    e62e:	bd10      	pop	{r4, pc}
    e630:	21aa      	movs	r1, #170	; 0xaa
    e632:	201c      	movs	r0, #28
    e634:	f7f2 fa24 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e638 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY>:
    e638:	b510      	push	{r4, lr}
    e63a:	4604      	mov	r4, r0
    e63c:	6840      	ldr	r0, [r0, #4]
    e63e:	2300      	movs	r3, #0
    e640:	4619      	mov	r1, r3
    e642:	f890 20a6 	ldrb.w	r2, [r0, #166]	; 0xa6
    e646:	3088      	adds	r0, #136	; 0x88
    e648:	f7ff fa78 	bl	db3c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e64c:	b120      	cbz	r0, e658 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY+0x20>
    e64e:	6861      	ldr	r1, [r4, #4]
    e650:	2000      	movs	r0, #0
    e652:	f881 00e4 	strb.w	r0, [r1, #228]	; 0xe4
    e656:	bd10      	pop	{r4, pc}
    e658:	21b2      	movs	r1, #178	; 0xb2
    e65a:	201c      	movs	r0, #28
    e65c:	f7f2 fa10 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e660:	2200      	movs	r2, #0
    e662:	704a      	strb	r2, [r1, #1]
    e664:	2208      	movs	r2, #8
    e666:	700a      	strb	r2, [r1, #0]
    e668:	f850 2f09 	ldr.w	r2, [r0, #9]!
    e66c:	604a      	str	r2, [r1, #4]
    e66e:	6842      	ldr	r2, [r0, #4]
    e670:	608a      	str	r2, [r1, #8]
    e672:	8902      	ldrh	r2, [r0, #8]
    e674:	818a      	strh	r2, [r1, #12]
    e676:	7a80      	ldrb	r0, [r0, #10]
    e678:	7388      	strb	r0, [r1, #14]
    e67a:	4770      	bx	lr

0000e67c <sym_NK4HRRKGX3ST3ARVTU6HUEXLOWZFFBMCIDNT3EI>:
    e67c:	2200      	movs	r2, #0
    e67e:	704a      	strb	r2, [r1, #1]
    e680:	2210      	movs	r2, #16
    e682:	f5a0 70b0 	sub.w	r0, r0, #352	; 0x160
    e686:	700a      	strb	r2, [r1, #0]
    e688:	8800      	ldrh	r0, [r0, #0]
    e68a:	8088      	strh	r0, [r1, #4]
    e68c:	4770      	bx	lr

0000e68e <sym_2UKPFKMGRDZ4VV635IPSP7DNWK4DJAJ7LOHQN6A>:
    e68e:	b538      	push	{r3, r4, r5, lr}
    e690:	2400      	movs	r4, #0
    e692:	704c      	strb	r4, [r1, #1]
    e694:	2501      	movs	r5, #1
    e696:	700d      	strb	r5, [r1, #0]
    e698:	f1a0 0260 	sub.w	r2, r0, #96	; 0x60
    e69c:	f1a0 03e8 	sub.w	r3, r0, #232	; 0xe8
    e6a0:	710c      	strb	r4, [r1, #4]
    e6a2:	7204      	strb	r4, [r0, #8]
    e6a4:	881d      	ldrh	r5, [r3, #0]
    e6a6:	f8a1 5005 	strh.w	r5, [r1, #5]
    e6aa:	f892 5069 	ldrb.w	r5, [r2, #105]	; 0x69
    e6ae:	71cd      	strb	r5, [r1, #7]
    e6b0:	f8b2 506a 	ldrh.w	r5, [r2, #106]	; 0x6a
    e6b4:	810d      	strh	r5, [r1, #8]
    e6b6:	f8b2 506c 	ldrh.w	r5, [r2, #108]	; 0x6c
    e6ba:	814d      	strh	r5, [r1, #10]
    e6bc:	7a05      	ldrb	r5, [r0, #8]
    e6be:	f88d 5000 	strb.w	r5, [sp]
    e6c2:	9d00      	ldr	r5, [sp, #0]
    e6c4:	9500      	str	r5, [sp, #0]
    e6c6:	f89d 5000 	ldrb.w	r5, [sp]
    e6ca:	2d00      	cmp	r5, #0
    e6cc:	d1e9      	bne.n	e6a2 <sym_2UKPFKMGRDZ4VV635IPSP7DNWK4DJAJ7LOHQN6A+0x14>
    e6ce:	bd38      	pop	{r3, r4, r5, pc}

0000e6d0 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q>:
    e6d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e6d4:	7803      	ldrb	r3, [r0, #0]
    e6d6:	6840      	ldr	r0, [r0, #4]
    e6d8:	2501      	movs	r5, #1
    e6da:	f100 0488 	add.w	r4, r0, #136	; 0x88
    e6de:	f500 779c 	add.w	r7, r0, #312	; 0x138
    e6e2:	f890 00e7 	ldrb.w	r0, [r0, #231]	; 0xe7
    e6e6:	f04f 0600 	mov.w	r6, #0
    e6ea:	0780      	lsls	r0, r0, #30
    e6ec:	d410      	bmi.n	e710 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x40>
    e6ee:	7f62      	ldrb	r2, [r4, #29]
    e6f0:	2100      	movs	r1, #0
    e6f2:	4620      	mov	r0, r4
    e6f4:	f7ff fa22 	bl	db3c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e6f8:	b130      	cbz	r0, e708 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x38>
    e6fa:	7765      	strb	r5, [r4, #29]
    e6fc:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
    e700:	f8a4 6054 	strh.w	r6, [r4, #84]	; 0x54
    e704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e708:	216e      	movs	r1, #110	; 0x6e
    e70a:	2040      	movs	r0, #64	; 0x40
    e70c:	f7f2 f9b8 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e710:	2300      	movs	r3, #0
    e712:	7fa2      	ldrb	r2, [r4, #30]
    e714:	4619      	mov	r1, r3
    e716:	4620      	mov	r0, r4
    e718:	f7ff fa10 	bl	db3c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e71c:	b108      	cbz	r0, e722 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x52>
    e71e:	f884 605c 	strb.w	r6, [r4, #92]	; 0x5c
    e722:	74be      	strb	r6, [r7, #18]
    e724:	e7ee      	b.n	e704 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x34>
    e726:	2200      	movs	r2, #0
    e728:	704a      	strb	r2, [r1, #1]
    e72a:	221d      	movs	r2, #29
    e72c:	700a      	strb	r2, [r1, #0]
    e72e:	f8d0 000a 	ldr.w	r0, [r0, #10]
    e732:	6048      	str	r0, [r1, #4]
    e734:	4770      	bx	lr
    e736:	b510      	push	{r4, lr}
    e738:	4604      	mov	r4, r0
    e73a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    e73e:	e9d4 1000 	ldrd	r1, r0, [r4]
    e742:	4050      	eors	r0, r2
    e744:	ea70 0101 	orns	r1, r0, r1
    e748:	d008      	beq.n	e75c <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x8c>
    e74a:	f7fc fd41 	bl	b1d0 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    e74e:	e9d4 2300 	ldrd	r2, r3, [r4]
    e752:	1a80      	subs	r0, r0, r2
    e754:	4199      	sbcs	r1, r3
    e756:	d301      	bcc.n	e75c <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x8c>
    e758:	2001      	movs	r0, #1
    e75a:	bd10      	pop	{r4, pc}
    e75c:	2000      	movs	r0, #0
    e75e:	bd10      	pop	{r4, pc}
    e760:	2801      	cmp	r0, #1
    e762:	d102      	bne.n	e76a <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x9a>
    e764:	7948      	ldrb	r0, [r1, #5]
    e766:	0980      	lsrs	r0, r0, #6
    e768:	d001      	beq.n	e76e <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x9e>
    e76a:	2000      	movs	r0, #0
    e76c:	4770      	bx	lr
    e76e:	2001      	movs	r0, #1
    e770:	4770      	bx	lr
    e772:	2801      	cmp	r0, #1
    e774:	d106      	bne.n	e784 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xb4>
    e776:	7948      	ldrb	r0, [r1, #5]
    e778:	2101      	movs	r1, #1
    e77a:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    e77e:	d101      	bne.n	e784 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xb4>
    e780:	2001      	movs	r0, #1
    e782:	4770      	bx	lr
    e784:	2000      	movs	r0, #0
    e786:	4770      	bx	lr
    e788:	b118      	cbz	r0, e792 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xc2>
    e78a:	2802      	cmp	r0, #2
    e78c:	d001      	beq.n	e792 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xc2>
    e78e:	2001      	movs	r0, #1
    e790:	4770      	bx	lr
    e792:	2000      	movs	r0, #0
    e794:	4770      	bx	lr
    e796:	2802      	cmp	r0, #2
    e798:	d003      	beq.n	e7a2 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xd2>
    e79a:	2803      	cmp	r0, #3
    e79c:	d001      	beq.n	e7a2 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xd2>
    e79e:	2000      	movs	r0, #0
    e7a0:	4770      	bx	lr
    e7a2:	2001      	movs	r0, #1
    e7a4:	4770      	bx	lr

0000e7a6 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A>:
    e7a6:	f7f5 bd89 	b.w	42bc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2bc>

0000e7aa <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>:
    e7aa:	b510      	push	{r4, lr}
    e7ac:	2000      	movs	r0, #0
    e7ae:	f7f5 fbbf 	bl	3f30 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x92c>
    e7b2:	f7f4 ff45 	bl	3640 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    e7b6:	f7f5 fd8f 	bl	42d8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2d8>
    e7ba:	2000      	movs	r0, #0
    e7bc:	bd10      	pop	{r4, pc}
    e7be:	b510      	push	{r4, lr}
    e7c0:	f7f5 fbd0 	bl	3f64 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x960>
    e7c4:	f7f4 ff3c 	bl	3640 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    e7c8:	f7f9 fa92 	bl	7cf0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    e7cc:	2005      	movs	r0, #5
    e7ce:	bd10      	pop	{r4, pc}
    e7d0:	b510      	push	{r4, lr}
    e7d2:	f7f5 fbc7 	bl	3f64 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x960>
    e7d6:	f7f9 fa8b 	bl	7cf0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    e7da:	2005      	movs	r0, #5
    e7dc:	bd10      	pop	{r4, pc}
    e7de:	b530      	push	{r4, r5, lr}
    e7e0:	b08b      	sub	sp, #44	; 0x2c
    e7e2:	4605      	mov	r5, r0
    e7e4:	f7f5 fbbe 	bl	3f64 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x960>
    e7e8:	7828      	ldrb	r0, [r5, #0]
    e7ea:	4669      	mov	r1, sp
    e7ec:	f000 040f 	and.w	r4, r0, #15
    e7f0:	4622      	mov	r2, r4
    e7f2:	4628      	mov	r0, r5
    e7f4:	f7f5 ff1c 	bl	4630 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    e7f8:	2200      	movs	r2, #0
    e7fa:	4621      	mov	r1, r4
    e7fc:	4668      	mov	r0, sp
    e7fe:	f7f4 ffa7 	bl	3750 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x14c>
    e802:	4621      	mov	r1, r4
    e804:	4668      	mov	r0, sp
    e806:	f7f5 fb2d 	bl	3e64 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x860>
    e80a:	4604      	mov	r4, r0
    e80c:	f7f4 ff18 	bl	3640 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    e810:	b00b      	add	sp, #44	; 0x2c
    e812:	4620      	mov	r0, r4
    e814:	bd30      	pop	{r4, r5, pc}
    e816:	f240 31a7 	movw	r1, #935	; 0x3a7
    e81a:	2032      	movs	r0, #50	; 0x32
    e81c:	f7f2 f930 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e820:	b510      	push	{r4, lr}
    e822:	f7f5 fb9f 	bl	3f64 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x960>
    e826:	f7f9 fa63 	bl	7cf0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    e82a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e82e:	f7f5 bd5b 	b.w	42e8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2e8>
    e832:	f7f5 bd43 	b.w	42bc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2bc>
    e836:	f7fe bf0e 	b.w	d656 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    e83a:	b570      	push	{r4, r5, r6, lr}
    e83c:	4614      	mov	r4, r2
    e83e:	461d      	mov	r5, r3
    e840:	4606      	mov	r6, r0
    e842:	f7fc fcc5 	bl	b1d0 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    e846:	1900      	adds	r0, r0, r4
    e848:	4169      	adcs	r1, r5
    e84a:	e9c6 0100 	strd	r0, r1, [r6]
    e84e:	bd70      	pop	{r4, r5, r6, pc}

0000e850 <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>:
    e850:	b510      	push	{r4, lr}
    e852:	f7f2 fd15 	bl	1280 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    e856:	f000 f944 	bl	eae2 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xdc>
    e85a:	4604      	mov	r4, r0
    e85c:	221c      	movs	r2, #28
    e85e:	2100      	movs	r1, #0
    e860:	3009      	adds	r0, #9
    e862:	f001 ff9e 	bl	107a2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e866:	207f      	movs	r0, #127	; 0x7f
    e868:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    e86c:	21ff      	movs	r1, #255	; 0xff
    e86e:	75e1      	strb	r1, [r4, #23]
    e870:	72a1      	strb	r1, [r4, #10]
    e872:	7721      	strb	r1, [r4, #28]
    e874:	7ce0      	ldrb	r0, [r4, #19]
    e876:	f020 0060 	bic.w	r0, r0, #96	; 0x60
    e87a:	3020      	adds	r0, #32
    e87c:	74e0      	strb	r0, [r4, #19]
    e87e:	bd10      	pop	{r4, pc}

0000e880 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>:
    e880:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    e884:	461d      	mov	r5, r3
    e886:	e9dd ba0b 	ldrd	fp, sl, [sp, #44]	; 0x2c
    e88a:	4616      	mov	r6, r2
    e88c:	4688      	mov	r8, r1
    e88e:	4681      	mov	r9, r0
    e890:	f7f2 fcf6 	bl	1280 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    e894:	4604      	mov	r4, r0
    e896:	f7fe fda7 	bl	d3e8 <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>
    e89a:	2801      	cmp	r0, #1
    e89c:	d066      	beq.n	e96c <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xec>
    e89e:	4620      	mov	r0, r4
    e8a0:	f000 f91f 	bl	eae2 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xdc>
    e8a4:	4604      	mov	r4, r0
    e8a6:	221c      	movs	r2, #28
    e8a8:	2100      	movs	r1, #0
    e8aa:	3009      	adds	r0, #9
    e8ac:	f001 ff79 	bl	107a2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e8b0:	2701      	movs	r7, #1
    e8b2:	7267      	strb	r7, [r4, #9]
    e8b4:	ea5f 0008 	movs.w	r0, r8
    e8b8:	d009      	beq.n	e8ce <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x4e>
    e8ba:	2801      	cmp	r0, #1
    e8bc:	d00b      	beq.n	e8d6 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x56>
    e8be:	2802      	cmp	r0, #2
    e8c0:	d02d      	beq.n	e91e <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x9e>
    e8c2:	f1b8 0f06 	cmp.w	r8, #6
    e8c6:	d02c      	beq.n	e922 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa2>
    e8c8:	f240 310b 	movw	r1, #779	; 0x30b
    e8cc:	e04b      	b.n	e966 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xe6>
    e8ce:	7ce0      	ldrb	r0, [r4, #19]
    e8d0:	f040 0001 	orr.w	r0, r0, #1
    e8d4:	e026      	b.n	e924 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa4>
    e8d6:	7ce0      	ldrb	r0, [r4, #19]
    e8d8:	f040 0005 	orr.w	r0, r0, #5
    e8dc:	f040 0010 	orr.w	r0, r0, #16
    e8e0:	74e0      	strb	r0, [r4, #19]
    e8e2:	f104 030a 	add.w	r3, r4, #10
    e8e6:	1c5a      	adds	r2, r3, #1
    e8e8:	4648      	mov	r0, r9
    e8ea:	990a      	ldr	r1, [sp, #40]	; 0x28
    e8ec:	f000 f8de 	bl	eaac <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xa6>
    e8f0:	f884 a012 	strb.w	sl, [r4, #18]
    e8f4:	7567      	strb	r7, [r4, #21]
    e8f6:	2000      	movs	r0, #0
    e8f8:	75a0      	strb	r0, [r4, #22]
    e8fa:	20ff      	movs	r0, #255	; 0xff
    e8fc:	75e0      	strb	r0, [r4, #23]
    e8fe:	7ce1      	ldrb	r1, [r4, #19]
    e900:	0749      	lsls	r1, r1, #29
    e902:	d518      	bpl.n	e936 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xb6>
    e904:	f104 001d 	add.w	r0, r4, #29
    e908:	1e41      	subs	r1, r0, #1
    e90a:	2d02      	cmp	r5, #2
    e90c:	d00d      	beq.n	e92a <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xaa>
    e90e:	2d03      	cmp	r5, #3
    e910:	d00b      	beq.n	e92a <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xaa>
    e912:	f8d9 2008 	ldr.w	r2, [r9, #8]
    e916:	6813      	ldr	r3, [r2, #0]
    e918:	6003      	str	r3, [r0, #0]
    e91a:	8892      	ldrh	r2, [r2, #4]
    e91c:	e008      	b.n	e930 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xb0>
    e91e:	7ce0      	ldrb	r0, [r4, #19]
    e920:	e7dc      	b.n	e8dc <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x5c>
    e922:	7ce0      	ldrb	r0, [r4, #19]
    e924:	f040 0002 	orr.w	r0, r0, #2
    e928:	e7d8      	b.n	e8dc <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x5c>
    e92a:	6832      	ldr	r2, [r6, #0]
    e92c:	6002      	str	r2, [r0, #0]
    e92e:	88b2      	ldrh	r2, [r6, #4]
    e930:	8082      	strh	r2, [r0, #4]
    e932:	700d      	strb	r5, [r1, #0]
    e934:	e000      	b.n	e938 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xb8>
    e936:	7720      	strb	r0, [r4, #28]
    e938:	207f      	movs	r0, #127	; 0x7f
    e93a:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    e93e:	f884 b024 	strb.w	fp, [r4, #36]	; 0x24
    e942:	f7f2 fc97 	bl	1274 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    e946:	4605      	mov	r5, r0
    e948:	f7f2 fc9a 	bl	1280 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    e94c:	2201      	movs	r2, #1
    e94e:	4629      	mov	r1, r5
    e950:	f000 f8d0 	bl	eaf4 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xee>
    e954:	b128      	cbz	r0, e962 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xe2>
    e956:	4620      	mov	r0, r4
    e958:	e8bd 5ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    e95c:	2100      	movs	r1, #0
    e95e:	f7f5 be5f 	b.w	4620 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x620>
    e962:	f240 312b 	movw	r1, #811	; 0x32b
    e966:	2033      	movs	r0, #51	; 0x33
    e968:	f7f2 f88a 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e96c:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

0000e970 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI>:
    e970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e974:	461e      	mov	r6, r3
    e976:	4617      	mov	r7, r2
    e978:	4689      	mov	r9, r1
    e97a:	4682      	mov	sl, r0
    e97c:	f8dd 8020 	ldr.w	r8, [sp, #32]
    e980:	f7f2 fc7e 	bl	1280 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    e984:	4604      	mov	r4, r0
    e986:	f7fe fd2f 	bl	d3e8 <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>
    e98a:	2801      	cmp	r0, #1
    e98c:	d039      	beq.n	ea02 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x92>
    e98e:	4620      	mov	r0, r4
    e990:	f000 f8a7 	bl	eae2 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xdc>
    e994:	4604      	mov	r4, r0
    e996:	221c      	movs	r2, #28
    e998:	2100      	movs	r1, #0
    e99a:	3009      	adds	r0, #9
    e99c:	f001 ff01 	bl	107a2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e9a0:	2501      	movs	r5, #1
    e9a2:	f104 030a 	add.w	r3, r4, #10
    e9a6:	7265      	strb	r5, [r4, #9]
    e9a8:	1c5a      	adds	r2, r3, #1
    e9aa:	4649      	mov	r1, r9
    e9ac:	4650      	mov	r0, sl
    e9ae:	f000 f87d 	bl	eaac <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xa6>
    e9b2:	f884 8012 	strb.w	r8, [r4, #18]
    e9b6:	7ce0      	ldrb	r0, [r4, #19]
    e9b8:	21ff      	movs	r1, #255	; 0xff
    e9ba:	f367 0000 	bfi	r0, r7, #0, #1
    e9be:	f040 001a 	orr.w	r0, r0, #26
    e9c2:	74e0      	strb	r0, [r4, #19]
    e9c4:	7565      	strb	r5, [r4, #21]
    e9c6:	2000      	movs	r0, #0
    e9c8:	75a0      	strb	r0, [r4, #22]
    e9ca:	75e1      	strb	r1, [r4, #23]
    e9cc:	7721      	strb	r1, [r4, #28]
    e9ce:	207f      	movs	r0, #127	; 0x7f
    e9d0:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    e9d4:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
    e9d8:	f7f2 fc4c 	bl	1274 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    e9dc:	4605      	mov	r5, r0
    e9de:	f7f2 fc4f 	bl	1280 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    e9e2:	2201      	movs	r2, #1
    e9e4:	4629      	mov	r1, r5
    e9e6:	f000 f885 	bl	eaf4 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xee>
    e9ea:	b128      	cbz	r0, e9f8 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x88>
    e9ec:	4620      	mov	r0, r4
    e9ee:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e9f2:	2100      	movs	r1, #0
    e9f4:	f7f5 be14 	b.w	4620 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x620>
    e9f8:	f44f 7156 	mov.w	r1, #856	; 0x358
    e9fc:	2033      	movs	r0, #51	; 0x33
    e9fe:	f7f2 f83f 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ea02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000ea06 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY>:
    ea06:	f7ff bf23 	b.w	e850 <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>
    ea0a:	b5f0      	push	{r4, r5, r6, r7, lr}
    ea0c:	b08b      	sub	sp, #44	; 0x2c
    ea0e:	460f      	mov	r7, r1
    ea10:	f7f2 fc36 	bl	1280 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    ea14:	4604      	mov	r4, r0
    ea16:	f7fe fd38 	bl	d48a <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    ea1a:	0005      	movs	r5, r0
    ea1c:	d00c      	beq.n	ea38 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x32>
    ea1e:	4620      	mov	r0, r4
    ea20:	4629      	mov	r1, r5
    ea22:	aa0a      	add	r2, sp, #40	; 0x28
    ea24:	f7fe fd4f 	bl	d4c6 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    ea28:	4606      	mov	r6, r0
    ea2a:	f7f2 fc23 	bl	1274 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    ea2e:	42b0      	cmp	r0, r6
    ea30:	d005      	beq.n	ea3e <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x38>
    ea32:	f240 11ab 	movw	r1, #427	; 0x1ab
    ea36:	e036      	b.n	eaa6 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xa0>
    ea38:	f240 11a1 	movw	r1, #417	; 0x1a1
    ea3c:	e033      	b.n	eaa6 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xa0>
    ea3e:	4669      	mov	r1, sp
    ea40:	980a      	ldr	r0, [sp, #40]	; 0x28
    ea42:	f000 f859 	bl	eaf8 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI>
    ea46:	1d3e      	adds	r6, r7, #4
    ea48:	4628      	mov	r0, r5
    ea4a:	f7fe fccb 	bl	d3e4 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    ea4e:	4605      	mov	r5, r0
    ea50:	f100 0109 	add.w	r1, r0, #9
    ea54:	221c      	movs	r2, #28
    ea56:	4630      	mov	r0, r6
    ea58:	f001 fe29 	bl	106ae <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ea5c:	7ce8      	ldrb	r0, [r5, #19]
    ea5e:	f04f 0500 	mov.w	r5, #0
    ea62:	06c1      	lsls	r1, r0, #27
    ea64:	d50d      	bpl.n	ea82 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x7c>
    ea66:	0740      	lsls	r0, r0, #29
    ea68:	d40a      	bmi.n	ea80 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x7a>
    ea6a:	f89d 2010 	ldrb.w	r2, [sp, #16]
    ea6e:	f106 001c 	add.w	r0, r6, #28
    ea72:	9903      	ldr	r1, [sp, #12]
    ea74:	f001 fe1b 	bl	106ae <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ea78:	f89d 0010 	ldrb.w	r0, [sp, #16]
    ea7c:	7230      	strb	r0, [r6, #8]
    ea7e:	e000      	b.n	ea82 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x7c>
    ea80:	7235      	strb	r5, [r6, #8]
    ea82:	707d      	strb	r5, [r7, #1]
    ea84:	2005      	movs	r0, #5
    ea86:	7038      	strb	r0, [r7, #0]
    ea88:	4638      	mov	r0, r7
    ea8a:	f7f5 fd59 	bl	4540 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x540>
    ea8e:	4620      	mov	r0, r4
    ea90:	f7fe fcc3 	bl	d41a <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    ea94:	b128      	cbz	r0, eaa2 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x9c>
    ea96:	4620      	mov	r0, r4
    ea98:	2100      	movs	r1, #0
    ea9a:	f7fe fdb2 	bl	d602 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    ea9e:	b00b      	add	sp, #44	; 0x2c
    eaa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    eaa2:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
    eaa6:	2033      	movs	r0, #51	; 0x33
    eaa8:	f7f1 ffea 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eaac:	b510      	push	{r4, lr}
    eaae:	461c      	mov	r4, r3
    eab0:	460b      	mov	r3, r1
    eab2:	29ff      	cmp	r1, #255	; 0xff
    eab4:	d00d      	beq.n	ead2 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xcc>
    eab6:	4621      	mov	r1, r4
    eab8:	4618      	mov	r0, r3
    eaba:	f7f3 fbbd 	bl	2238 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    eabe:	b120      	cbz	r0, eaca <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xc4>
    eac0:	7820      	ldrb	r0, [r4, #0]
    eac2:	f040 0002 	orr.w	r0, r0, #2
    eac6:	7020      	strb	r0, [r4, #0]
    eac8:	bd10      	pop	{r4, pc}
    eaca:	21dc      	movs	r1, #220	; 0xdc
    eacc:	2033      	movs	r0, #51	; 0x33
    eace:	f7f1 ffd7 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ead2:	7c41      	ldrb	r1, [r0, #17]
    ead4:	7021      	strb	r1, [r4, #0]
    ead6:	6840      	ldr	r0, [r0, #4]
    ead8:	6801      	ldr	r1, [r0, #0]
    eada:	6011      	str	r1, [r2, #0]
    eadc:	8880      	ldrh	r0, [r0, #4]
    eade:	8090      	strh	r0, [r2, #4]
    eae0:	bd10      	pop	{r4, pc}
    eae2:	b51c      	push	{r2, r3, r4, lr}
    eae4:	4669      	mov	r1, sp
    eae6:	aa01      	add	r2, sp, #4
    eae8:	f7fe fcdf 	bl	d4aa <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    eaec:	9800      	ldr	r0, [sp, #0]
    eaee:	f7fe fc79 	bl	d3e4 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    eaf2:	bd1c      	pop	{r2, r3, r4, pc}
    eaf4:	f7fe bc2d 	b.w	d352 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>

0000eaf8 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI>:
    eaf8:	7802      	ldrb	r2, [r0, #0]
    eafa:	f002 020f 	and.w	r2, r2, #15
    eafe:	f7f5 bd97 	b.w	4630 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>

0000eb02 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>:
    eb02:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    eb04:	255e      	movs	r5, #94	; 0x5e
    eb06:	4668      	mov	r0, sp
    eb08:	f7fd fe00 	bl	c70c <mpsl_fem_pa_is_configured>
    eb0c:	f89d 0000 	ldrb.w	r0, [sp]
    eb10:	b108      	cbz	r0, eb16 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA+0x14>
    eb12:	2401      	movs	r4, #1
    eb14:	e000      	b.n	eb18 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA+0x16>
    eb16:	2400      	movs	r4, #0
    eb18:	a801      	add	r0, sp, #4
    eb1a:	f7fd fddf 	bl	c6dc <mpsl_fem_lna_is_configured>
    eb1e:	f89d 0004 	ldrb.w	r0, [sp, #4]
    eb22:	b100      	cbz	r0, eb26 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA+0x24>
    eb24:	2001      	movs	r0, #1
    eb26:	4304      	orrs	r4, r0
    eb28:	d000      	beq.n	eb2c <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA+0x2a>
    eb2a:	2568      	movs	r5, #104	; 0x68
    eb2c:	4628      	mov	r0, r5
    eb2e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000eb30 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY>:
    eb30:	b510      	push	{r4, lr}
    eb32:	f7ff ffe6 	bl	eb02 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>
    eb36:	3069      	adds	r0, #105	; 0x69
    eb38:	b280      	uxth	r0, r0
    eb3a:	bd10      	pop	{r4, pc}
    eb3c:	6980      	ldr	r0, [r0, #24]
    eb3e:	2800      	cmp	r0, #0
    eb40:	d000      	beq.n	eb44 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x14>
    eb42:	2001      	movs	r0, #1
    eb44:	4770      	bx	lr
    eb46:	b510      	push	{r4, lr}
    eb48:	2802      	cmp	r0, #2
    eb4a:	d006      	beq.n	eb5a <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x2a>
    eb4c:	2108      	movs	r1, #8
    eb4e:	2801      	cmp	r0, #1
    eb50:	d005      	beq.n	eb5e <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x2e>
    eb52:	21f5      	movs	r1, #245	; 0xf5
    eb54:	2005      	movs	r0, #5
    eb56:	f7f1 ff93 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eb5a:	2104      	movs	r1, #4
    eb5c:	e7f7      	b.n	eb4e <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x1e>
    eb5e:	202a      	movs	r0, #42	; 0x2a
    eb60:	2228      	movs	r2, #40	; 0x28
    eb62:	fb11 2000 	smlabb	r0, r1, r0, r2
    eb66:	b280      	uxth	r0, r0
    eb68:	bd10      	pop	{r4, pc}
    eb6a:	9800      	ldr	r0, [sp, #0]
    eb6c:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
    eb70:	1810      	adds	r0, r2, r0
    eb72:	f143 0300 	adc.w	r3, r3, #0
    eb76:	1840      	adds	r0, r0, r1
    eb78:	f143 0100 	adc.w	r1, r3, #0
    eb7c:	3833      	subs	r0, #51	; 0x33
    eb7e:	f161 0100 	sbc.w	r1, r1, #0
    eb82:	f240 42e2 	movw	r2, #1250	; 0x4e2
    eb86:	1880      	adds	r0, r0, r2
    eb88:	f141 0100 	adc.w	r1, r1, #0
    eb8c:	4770      	bx	lr
    eb8e:	b510      	push	{r4, lr}
    eb90:	f7ff ffb7 	bl	eb02 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>
    eb94:	f500 7081 	add.w	r0, r0, #258	; 0x102
    eb98:	b280      	uxth	r0, r0
    eb9a:	bd10      	pop	{r4, pc}
    eb9c:	f7fb bb5c 	b.w	a258 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    eba0:	1a10      	subs	r0, r2, r0
    eba2:	4770      	bx	lr

0000eba4 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>:
    eba4:	b510      	push	{r4, lr}
    eba6:	2905      	cmp	r1, #5
    eba8:	d22d      	bcs.n	ec06 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI+0x62>
    ebaa:	e8df f001 	tbb	[pc, r1]
    ebae:	0a05      	.short	0x0a05
    ebb0:	00280e03 	.word	0x00280e03
    ebb4:	2100      	movs	r1, #0
    ebb6:	e000      	b.n	ebba <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI+0x16>
    ebb8:	2101      	movs	r1, #1
    ebba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ebbe:	f7f6 bbb3 	b.w	5328 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x90>
    ebc2:	2103      	movs	r1, #3
    ebc4:	f880 1248 	strb.w	r1, [r0, #584]	; 0x248
    ebc8:	bd10      	pop	{r4, pc}
    ebca:	4604      	mov	r4, r0
    ebcc:	6900      	ldr	r0, [r0, #16]
    ebce:	f8c4 0250 	str.w	r0, [r4, #592]	; 0x250
    ebd2:	f8d4 026c 	ldr.w	r0, [r4, #620]	; 0x26c
    ebd6:	6220      	str	r0, [r4, #32]
    ebd8:	f8b4 0268 	ldrh.w	r0, [r4, #616]	; 0x268
    ebdc:	84a0      	strh	r0, [r4, #36]	; 0x24
    ebde:	f8d4 0270 	ldr.w	r0, [r4, #624]	; 0x270
    ebe2:	6120      	str	r0, [r4, #16]
    ebe4:	f8b4 0274 	ldrh.w	r0, [r4, #628]	; 0x274
    ebe8:	8320      	strh	r0, [r4, #24]
    ebea:	f8b4 0276 	ldrh.w	r0, [r4, #630]	; 0x276
    ebee:	8360      	strh	r0, [r4, #26]
    ebf0:	4620      	mov	r0, r4
    ebf2:	f000 f817 	bl	ec24 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xa>
    ebf6:	2002      	movs	r0, #2
    ebf8:	f884 0248 	strb.w	r0, [r4, #584]	; 0x248
    ebfc:	bd10      	pop	{r4, pc}
    ebfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ec02:	f000 b80f 	b.w	ec24 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xa>
    ec06:	f240 21fd 	movw	r1, #765	; 0x2fd
    ec0a:	2035      	movs	r0, #53	; 0x35
    ec0c:	f7f1 ff38 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000ec10 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY>:
    ec10:	b510      	push	{r4, lr}
    ec12:	f7f6 fb59 	bl	52c8 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x30>
    ec16:	2000      	movs	r0, #0
    ec18:	bd10      	pop	{r4, pc}

0000ec1a <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY>:
    ec1a:	f8c0 1230 	str.w	r1, [r0, #560]	; 0x230
    ec1e:	4770      	bx	lr
    ec20:	2000      	movs	r0, #0
    ec22:	4770      	bx	lr
    ec24:	b570      	push	{r4, r5, r6, lr}
    ec26:	4604      	mov	r4, r0
    ec28:	f890 106b 	ldrb.w	r1, [r0, #107]	; 0x6b
    ec2c:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    ec30:	f7f6 fb96 	bl	5360 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0xc8>
    ec34:	4605      	mov	r5, r0
    ec36:	f7ff ff7b 	bl	eb30 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY>
    ec3a:	4601      	mov	r1, r0
    ec3c:	462a      	mov	r2, r5
    ec3e:	4620      	mov	r0, r4
    ec40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ec44:	f7ff bb26 	b.w	e294 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
    ec48:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    ec4c:	469a      	mov	sl, r3
    ec4e:	4691      	mov	r9, r2
    ec50:	460c      	mov	r4, r1
    ec52:	4606      	mov	r6, r0
    ec54:	2500      	movs	r5, #0
    ec56:	f7ff ff54 	bl	eb02 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>
    ec5a:	4680      	mov	r8, r0
    ec5c:	f894 00a5 	ldrb.w	r0, [r4, #165]	; 0xa5
    ec60:	280d      	cmp	r0, #13
    ec62:	d017      	beq.n	ec94 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x7a>
    ec64:	280e      	cmp	r0, #14
    ec66:	d015      	beq.n	ec94 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x7a>
    ec68:	2000      	movs	r0, #0
    ec6a:	4683      	mov	fp, r0
    ec6c:	f1ba 0f00 	cmp.w	sl, #0
    ec70:	d003      	beq.n	ec7a <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x60>
    ec72:	2101      	movs	r1, #1
    ec74:	4620      	mov	r0, r4
    ec76:	f7f6 fd3f 	bl	56f8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI>
    ec7a:	f894 0248 	ldrb.w	r0, [r4, #584]	; 0x248
    ec7e:	2701      	movs	r7, #1
    ec80:	b150      	cbz	r0, ec98 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x7e>
    ec82:	2801      	cmp	r0, #1
    ec84:	d01a      	beq.n	ecbc <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xa2>
    ec86:	2802      	cmp	r0, #2
    ec88:	d012      	beq.n	ecb0 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x96>
    ec8a:	2803      	cmp	r0, #3
    ec8c:	d016      	beq.n	ecbc <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xa2>
    ec8e:	f240 2136 	movw	r1, #566	; 0x236
    ec92:	e08e      	b.n	edb2 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x198>
    ec94:	2001      	movs	r0, #1
    ec96:	e7e8      	b.n	ec6a <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x50>
    ec98:	f1b9 0f00 	cmp.w	r9, #0
    ec9c:	d005      	beq.n	ecaa <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x90>
    ec9e:	f884 7248 	strb.w	r7, [r4, #584]	; 0x248
    eca2:	4620      	mov	r0, r4
    eca4:	f7ff ffbe 	bl	ec24 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xa>
    eca8:	e009      	b.n	ecbe <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xa4>
    ecaa:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
    ecae:	e080      	b.n	edb2 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x198>
    ecb0:	2003      	movs	r0, #3
    ecb2:	f8d4 5250 	ldr.w	r5, [r4, #592]	; 0x250
    ecb6:	f884 0248 	strb.w	r0, [r4, #584]	; 0x248
    ecba:	e000      	b.n	ecbe <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xa4>
    ecbc:	6925      	ldr	r5, [r4, #16]
    ecbe:	e9d4 108a 	ldrd	r1, r0, [r4, #552]	; 0x228
    ecc2:	f04f 0900 	mov.w	r9, #0
    ecc6:	1949      	adds	r1, r1, r5
    ecc8:	eb40 0009 	adc.w	r0, r0, r9
    eccc:	e9c4 108a 	strd	r1, r0, [r4, #552]	; 0x228
    ecd0:	e9c6 1004 	strd	r1, r0, [r6, #16]
    ecd4:	f886 9000 	strb.w	r9, [r6]
    ecd8:	f8a6 8008 	strh.w	r8, [r6, #8]
    ecdc:	f894 00a5 	ldrb.w	r0, [r4, #165]	; 0xa5
    ece0:	280d      	cmp	r0, #13
    ece2:	d02b      	beq.n	ed3c <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x122>
    ece4:	280b      	cmp	r0, #11
    ece6:	d029      	beq.n	ed3c <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x122>
    ece8:	2825      	cmp	r0, #37	; 0x25
    ecea:	d027      	beq.n	ed3c <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x122>
    ecec:	2000      	movs	r0, #0
    ecee:	4680      	mov	r8, r0
    ecf0:	4620      	mov	r0, r4
    ecf2:	f7f6 fbcb 	bl	548c <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA>
    ecf6:	4601      	mov	r1, r0
    ecf8:	f1a8 0001 	sub.w	r0, r8, #1
    ecfc:	4201      	tst	r1, r0
    ecfe:	d102      	bne.n	ed06 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xec>
    ed00:	f886 900a 	strb.w	r9, [r6, #10]
    ed04:	e005      	b.n	ed12 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xf8>
    ed06:	f894 0248 	ldrb.w	r0, [r4, #584]	; 0x248
    ed0a:	2801      	cmp	r0, #1
    ed0c:	d018      	beq.n	ed40 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x126>
    ed0e:	2002      	movs	r0, #2
    ed10:	72b0      	strb	r0, [r6, #10]
    ed12:	72f7      	strb	r7, [r6, #11]
    ed14:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    ed18:	f7ff faba 	bl	e290 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    ed1c:	6070      	str	r0, [r6, #4]
    ed1e:	ea3a 000b 	bics.w	r0, sl, fp
    ed22:	d042      	beq.n	edaa <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x190>
    ed24:	4629      	mov	r1, r5
    ed26:	4630      	mov	r0, r6
    ed28:	f7ff f814 	bl	dd54 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    ed2c:	b287      	uxth	r7, r0
    ed2e:	4620      	mov	r0, r4
    ed30:	f7f6 fbac 	bl	548c <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA>
    ed34:	f1b8 0f00 	cmp.w	r8, #0
    ed38:	d004      	beq.n	ed44 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x12a>
    ed3a:	e018      	b.n	ed6e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x154>
    ed3c:	2001      	movs	r0, #1
    ed3e:	e7d6      	b.n	ecee <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xd4>
    ed40:	72b7      	strb	r7, [r6, #10]
    ed42:	e7e6      	b.n	ed12 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xf8>
    ed44:	42b8      	cmp	r0, r7
    ed46:	d812      	bhi.n	ed6e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x154>
    ed48:	f886 900a 	strb.w	r9, [r6, #10]
    ed4c:	e9d4 328a 	ldrd	r3, r2, [r4, #552]	; 0x228
    ed50:	4607      	mov	r7, r0
    ed52:	fb05 f107 	mul.w	r1, r5, r7
    ed56:	1859      	adds	r1, r3, r1
    ed58:	eb42 0209 	adc.w	r2, r2, r9
    ed5c:	e9c6 1204 	strd	r1, r2, [r6, #16]
    ed60:	b32d      	cbz	r5, edae <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x194>
    ed62:	4629      	mov	r1, r5
    ed64:	4630      	mov	r0, r6
    ed66:	f7fe fff5 	bl	dd54 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    ed6a:	4438      	add	r0, r7
    ed6c:	b287      	uxth	r7, r0
    ed6e:	4639      	mov	r1, r7
    ed70:	4620      	mov	r0, r4
    ed72:	f7f6 fcc1 	bl	56f8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI>
    ed76:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
    ed7a:	e9c4 018a 	strd	r0, r1, [r4, #552]	; 0x228
    ed7e:	6f20      	ldr	r0, [r4, #112]	; 0x70
    ed80:	2800      	cmp	r0, #0
    ed82:	d012      	beq.n	edaa <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x190>
    ed84:	f8b4 009c 	ldrh.w	r0, [r4, #156]	; 0x9c
    ed88:	f8b4 20d2 	ldrh.w	r2, [r4, #210]	; 0xd2
    ed8c:	1a80      	subs	r0, r0, r2
    ed8e:	b201      	sxth	r1, r0
    ed90:	2900      	cmp	r1, #0
    ed92:	dd0a      	ble.n	edaa <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x190>
    ed94:	f8b4 0074 	ldrh.w	r0, [r4, #116]	; 0x74
    ed98:	4401      	add	r1, r0
    ed9a:	1e49      	subs	r1, r1, #1
    ed9c:	fb91 f1f0 	sdiv	r1, r1, r0
    eda0:	b289      	uxth	r1, r1
    eda2:	fb01 2000 	mla	r0, r1, r0, r2
    eda6:	f8a4 00d2 	strh.w	r0, [r4, #210]	; 0xd2
    edaa:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    edae:	f44f 711e 	mov.w	r1, #632	; 0x278
    edb2:	2035      	movs	r0, #53	; 0x35
    edb4:	f7f1 fe64 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    edb8:	b510      	push	{r4, lr}
    edba:	4604      	mov	r4, r0
    edbc:	2000      	movs	r0, #0
    edbe:	f884 0248 	strb.w	r0, [r4, #584]	; 0x248
    edc2:	f894 0249 	ldrb.w	r0, [r4, #585]	; 0x249
    edc6:	f7fb fe9b 	bl	ab00 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    edca:	b140      	cbz	r0, edde <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x1c4>
    edcc:	2020      	movs	r0, #32
    edce:	f884 0249 	strb.w	r0, [r4, #585]	; 0x249
    edd2:	f504 700a 	add.w	r0, r4, #552	; 0x228
    edd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    edda:	f7f8 b839 	b.w	6e50 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    edde:	f44f 71c4 	mov.w	r1, #392	; 0x188
    ede2:	2035      	movs	r0, #53	; 0x35
    ede4:	f7f1 fe4c 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ede8:	b510      	push	{r4, lr}
    edea:	4613      	mov	r3, r2
    edec:	460a      	mov	r2, r1
    edee:	b086      	sub	sp, #24
    edf0:	4604      	mov	r4, r0
    edf2:	4601      	mov	r1, r0
    edf4:	4668      	mov	r0, sp
    edf6:	f7ff ff27 	bl	ec48 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x2e>
    edfa:	f894 0249 	ldrb.w	r0, [r4, #585]	; 0x249
    edfe:	4669      	mov	r1, sp
    ee00:	f000 f809 	bl	ee16 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x1fc>
    ee04:	2800      	cmp	r0, #0
    ee06:	d104      	bne.n	ee12 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x1f8>
    ee08:	f240 21a6 	movw	r1, #678	; 0x2a6
    ee0c:	2035      	movs	r0, #53	; 0x35
    ee0e:	f7f1 fe37 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ee12:	b006      	add	sp, #24
    ee14:	bd10      	pop	{r4, pc}
    ee16:	f7fb ba1f 	b.w	a258 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    ee1a:	0000      	.short	0x0000
    ee1c:	a1e0a62c 	.word	0xa1e0a62c
    ee20:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    ee24:	f001 0307 	and.w	r3, r1, #7
    ee28:	7802      	ldrb	r2, [r0, #0]
    ee2a:	2101      	movs	r1, #1
    ee2c:	4099      	lsls	r1, r3
    ee2e:	438a      	bics	r2, r1
    ee30:	7002      	strb	r2, [r0, #0]
    ee32:	4770      	bx	lr

0000ee34 <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI>:
    ee34:	f7f2 b97e 	b.w	1134 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

0000ee38 <sym_VJEPN3SDR5AQAFQ3NEQBRQ5LOSN3JDHOXS2M77A>:
    ee38:	2000      	movs	r0, #0
    ee3a:	4770      	bx	lr

0000ee3c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ>:
    ee3c:	b510      	push	{r4, lr}
    ee3e:	f7f7 f96d 	bl	611c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa24>
    ee42:	b128      	cbz	r0, ee50 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x14>
    ee44:	2000      	movs	r0, #0
    ee46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ee4a:	4601      	mov	r1, r0
    ee4c:	f7f7 b90e 	b.w	606c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x974>
    ee50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ee54:	f7f2 bd74 	b.w	1940 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>
    ee58:	f890 00a6 	ldrb.w	r0, [r0, #166]	; 0xa6
    ee5c:	28fe      	cmp	r0, #254	; 0xfe
    ee5e:	d001      	beq.n	ee64 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x28>
    ee60:	2001      	movs	r0, #1
    ee62:	4770      	bx	lr
    ee64:	2000      	movs	r0, #0
    ee66:	4770      	bx	lr
    ee68:	b510      	push	{r4, lr}
    ee6a:	2801      	cmp	r0, #1
    ee6c:	d006      	beq.n	ee7c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x40>
    ee6e:	2802      	cmp	r0, #2
    ee70:	d004      	beq.n	ee7c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x40>
    ee72:	f44f 7136 	mov.w	r1, #728	; 0x2d8
    ee76:	2006      	movs	r0, #6
    ee78:	f7f1 fe02 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ee7c:	bd10      	pop	{r4, pc}
    ee7e:	2801      	cmp	r0, #1
    ee80:	d002      	beq.n	ee88 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x4c>
    ee82:	2802      	cmp	r0, #2
    ee84:	d105      	bne.n	ee92 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x56>
    ee86:	e002      	b.n	ee8e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x52>
    ee88:	2901      	cmp	r1, #1
    ee8a:	d004      	beq.n	ee96 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5a>
    ee8c:	e001      	b.n	ee92 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x56>
    ee8e:	2902      	cmp	r1, #2
    ee90:	d001      	beq.n	ee96 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5a>
    ee92:	2000      	movs	r0, #0
    ee94:	4770      	bx	lr
    ee96:	2001      	movs	r0, #1
    ee98:	4770      	bx	lr
    ee9a:	e9d0 1232 	ldrd	r1, r2, [r0, #200]	; 0xc8
    ee9e:	428a      	cmp	r2, r1
    eea0:	d301      	bcc.n	eea6 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x6a>
    eea2:	1a51      	subs	r1, r2, r1
    eea4:	e000      	b.n	eea8 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x6c>
    eea6:	2100      	movs	r1, #0
    eea8:	8b02      	ldrh	r2, [r0, #24]
    eeaa:	1d52      	adds	r2, r2, #5
    eeac:	428a      	cmp	r2, r1
    eeae:	d302      	bcc.n	eeb6 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x7a>
    eeb0:	2101      	movs	r1, #1
    eeb2:	f880 10d4 	strb.w	r1, [r0, #212]	; 0xd4
    eeb6:	4770      	bx	lr
    eeb8:	b510      	push	{r4, lr}
    eeba:	4604      	mov	r4, r0
    eebc:	6840      	ldr	r0, [r0, #4]
    eebe:	2300      	movs	r3, #0
    eec0:	4619      	mov	r1, r3
    eec2:	f890 20a6 	ldrb.w	r2, [r0, #166]	; 0xa6
    eec6:	3088      	adds	r0, #136	; 0x88
    eec8:	f7fe fe38 	bl	db3c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    eecc:	b168      	cbz	r0, eeea <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xae>
    eece:	6861      	ldr	r1, [r4, #4]
    eed0:	2000      	movs	r0, #0
    eed2:	f8a1 00e2 	strh.w	r0, [r1, #226]	; 0xe2
    eed6:	6861      	ldr	r1, [r4, #4]
    eed8:	2001      	movs	r0, #1
    eeda:	f881 00e4 	strb.w	r0, [r1, #228]	; 0xe4
    eede:	6861      	ldr	r1, [r4, #4]
    eee0:	2002      	movs	r0, #2
    eee2:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    eee6:	2000      	movs	r0, #0
    eee8:	bd10      	pop	{r4, pc}
    eeea:	2001      	movs	r0, #1
    eeec:	bd10      	pop	{r4, pc}
    eeee:	b510      	push	{r4, lr}
    eef0:	4604      	mov	r4, r0
    eef2:	6840      	ldr	r0, [r0, #4]
    eef4:	2300      	movs	r3, #0
    eef6:	2109      	movs	r1, #9
    eef8:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    eefc:	3088      	adds	r0, #136	; 0x88
    eefe:	f7fe fe1d 	bl	db3c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ef02:	2800      	cmp	r0, #0
    ef04:	d009      	beq.n	ef1a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xde>
    ef06:	6861      	ldr	r1, [r4, #4]
    ef08:	2000      	movs	r0, #0
    ef0a:	f881 00d4 	strb.w	r0, [r1, #212]	; 0xd4
    ef0e:	6861      	ldr	r1, [r4, #4]
    ef10:	f881 00e0 	strb.w	r0, [r1, #224]	; 0xe0
    ef14:	6861      	ldr	r1, [r4, #4]
    ef16:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    ef1a:	bd10      	pop	{r4, pc}
    ef1c:	6841      	ldr	r1, [r0, #4]
    ef1e:	f891 20a5 	ldrb.w	r2, [r1, #165]	; 0xa5
    ef22:	2a10      	cmp	r2, #16
    ef24:	d001      	beq.n	ef2a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xee>
    ef26:	2002      	movs	r0, #2
    ef28:	4770      	bx	lr
    ef2a:	2200      	movs	r2, #0
    ef2c:	f881 20aa 	strb.w	r2, [r1, #170]	; 0xaa
    ef30:	6840      	ldr	r0, [r0, #4]
    ef32:	2113      	movs	r1, #19
    ef34:	f880 10a5 	strb.w	r1, [r0, #165]	; 0xa5
    ef38:	4610      	mov	r0, r2
    ef3a:	4770      	bx	lr
    ef3c:	b510      	push	{r4, lr}
    ef3e:	4604      	mov	r4, r0
    ef40:	6840      	ldr	r0, [r0, #4]
    ef42:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    ef46:	2917      	cmp	r1, #23
    ef48:	d001      	beq.n	ef4e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x112>
    ef4a:	2002      	movs	r0, #2
    ef4c:	bd10      	pop	{r4, pc}
    ef4e:	f500 7388 	add.w	r3, r0, #272	; 0x110
    ef52:	f200 2193 	addw	r1, r0, #659	; 0x293
    ef56:	2200      	movs	r2, #0
    ef58:	f200 2083 	addw	r0, r0, #643	; 0x283
    ef5c:	f7fe fd89 	bl	da72 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    ef60:	6862      	ldr	r2, [r4, #4]
    ef62:	2000      	movs	r0, #0
    ef64:	e9c2 0040 	strd	r0, r0, [r2, #256]	; 0x100
    ef68:	6861      	ldr	r1, [r4, #4]
    ef6a:	2001      	movs	r0, #1
    ef6c:	f881 00aa 	strb.w	r0, [r1, #170]	; 0xaa
    ef70:	6861      	ldr	r1, [r4, #4]
    ef72:	2019      	movs	r0, #25
    ef74:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    ef78:	2000      	movs	r0, #0
    ef7a:	bd10      	pop	{r4, pc}
    ef7c:	b510      	push	{r4, lr}
    ef7e:	4604      	mov	r4, r0
    ef80:	6840      	ldr	r0, [r0, #4]
    ef82:	2300      	movs	r3, #0
    ef84:	4619      	mov	r1, r3
    ef86:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    ef8a:	3088      	adds	r0, #136	; 0x88
    ef8c:	f7fe fdd6 	bl	db3c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ef90:	b120      	cbz	r0, ef9c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x160>
    ef92:	6861      	ldr	r1, [r4, #4]
    ef94:	200b      	movs	r0, #11
    ef96:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    ef9a:	bd10      	pop	{r4, pc}
    ef9c:	f240 7156 	movw	r1, #1878	; 0x756
    efa0:	2036      	movs	r0, #54	; 0x36
    efa2:	f7f1 fd6d 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    efa6:	b510      	push	{r4, lr}
    efa8:	4604      	mov	r4, r0
    efaa:	6840      	ldr	r0, [r0, #4]
    efac:	2300      	movs	r3, #0
    efae:	4619      	mov	r1, r3
    efb0:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    efb4:	3088      	adds	r0, #136	; 0x88
    efb6:	f7fe fdc1 	bl	db3c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    efba:	b120      	cbz	r0, efc6 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x18a>
    efbc:	6861      	ldr	r1, [r4, #4]
    efbe:	200d      	movs	r0, #13
    efc0:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    efc4:	bd10      	pop	{r4, pc}
    efc6:	f240 715c 	movw	r1, #1884	; 0x75c
    efca:	2036      	movs	r0, #54	; 0x36
    efcc:	f7f1 fd58 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    efd0:	b510      	push	{r4, lr}
    efd2:	4604      	mov	r4, r0
    efd4:	6840      	ldr	r0, [r0, #4]
    efd6:	2300      	movs	r3, #0
    efd8:	4619      	mov	r1, r3
    efda:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    efde:	3088      	adds	r0, #136	; 0x88
    efe0:	f7fe fdac 	bl	db3c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    efe4:	b918      	cbnz	r0, efee <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1b2>
    efe6:	6860      	ldr	r0, [r4, #4]
    efe8:	f890 00e6 	ldrb.w	r0, [r0, #230]	; 0xe6
    efec:	b140      	cbz	r0, f000 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c4>
    efee:	6861      	ldr	r1, [r4, #4]
    eff0:	2001      	movs	r0, #1
    eff2:	f881 00e5 	strb.w	r0, [r1, #229]	; 0xe5
    eff6:	6861      	ldr	r1, [r4, #4]
    eff8:	2014      	movs	r0, #20
    effa:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    effe:	bd10      	pop	{r4, pc}
    f000:	f240 7171 	movw	r1, #1905	; 0x771
    f004:	2036      	movs	r0, #54	; 0x36
    f006:	f7f1 fd3b 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f00a:	f7ff bb03 	b.w	e614 <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY>
    f00e:	b510      	push	{r4, lr}
    f010:	4604      	mov	r4, r0
    f012:	6840      	ldr	r0, [r0, #4]
    f014:	2300      	movs	r3, #0
    f016:	4619      	mov	r1, r3
    f018:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    f01c:	3088      	adds	r0, #136	; 0x88
    f01e:	f7fe fd8d 	bl	db3c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f022:	b120      	cbz	r0, f02e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1f2>
    f024:	6861      	ldr	r1, [r4, #4]
    f026:	201d      	movs	r0, #29
    f028:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    f02c:	bd10      	pop	{r4, pc}
    f02e:	f240 7192 	movw	r1, #1938	; 0x792
    f032:	2036      	movs	r0, #54	; 0x36
    f034:	f7f1 fd24 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f038:	b510      	push	{r4, lr}
    f03a:	4604      	mov	r4, r0
    f03c:	6840      	ldr	r0, [r0, #4]
    f03e:	2300      	movs	r3, #0
    f040:	4619      	mov	r1, r3
    f042:	f890 20a6 	ldrb.w	r2, [r0, #166]	; 0xa6
    f046:	3088      	adds	r0, #136	; 0x88
    f048:	f7fe fd78 	bl	db3c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f04c:	b120      	cbz	r0, f058 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x21c>
    f04e:	6861      	ldr	r1, [r4, #4]
    f050:	2000      	movs	r0, #0
    f052:	f881 00e4 	strb.w	r0, [r1, #228]	; 0xe4
    f056:	bd10      	pop	{r4, pc}
    f058:	f240 7199 	movw	r1, #1945	; 0x799
    f05c:	2036      	movs	r0, #54	; 0x36
    f05e:	f7f1 fd0f 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f062:	f7ff bae9 	b.w	e638 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY>
    f066:	b510      	push	{r4, lr}
    f068:	4604      	mov	r4, r0
    f06a:	6840      	ldr	r0, [r0, #4]
    f06c:	2300      	movs	r3, #0
    f06e:	4619      	mov	r1, r3
    f070:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    f074:	3088      	adds	r0, #136	; 0x88
    f076:	f7fe fd61 	bl	db3c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f07a:	b120      	cbz	r0, f086 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x24a>
    f07c:	6861      	ldr	r1, [r4, #4]
    f07e:	2005      	movs	r0, #5
    f080:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    f084:	bd10      	pop	{r4, pc}
    f086:	f240 7185 	movw	r1, #1925	; 0x785
    f08a:	2036      	movs	r0, #54	; 0x36
    f08c:	f7f1 fcf8 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f090:	6840      	ldr	r0, [r0, #4]
    f092:	2100      	movs	r1, #0
    f094:	f880 10e4 	strb.w	r1, [r0, #228]	; 0xe4
    f098:	4770      	bx	lr
    f09a:	b510      	push	{r4, lr}
    f09c:	4604      	mov	r4, r0
    f09e:	6840      	ldr	r0, [r0, #4]
    f0a0:	2300      	movs	r3, #0
    f0a2:	4619      	mov	r1, r3
    f0a4:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    f0a8:	3088      	adds	r0, #136	; 0x88
    f0aa:	f7fe fd47 	bl	db3c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f0ae:	b140      	cbz	r0, f0c2 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x286>
    f0b0:	6861      	ldr	r1, [r4, #4]
    f0b2:	2001      	movs	r0, #1
    f0b4:	f881 00e5 	strb.w	r0, [r1, #229]	; 0xe5
    f0b8:	6861      	ldr	r1, [r4, #4]
    f0ba:	2010      	movs	r0, #16
    f0bc:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    f0c0:	bd10      	pop	{r4, pc}
    f0c2:	f240 7162 	movw	r1, #1890	; 0x762
    f0c6:	2036      	movs	r0, #54	; 0x36
    f0c8:	f7f1 fcda 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f0cc:	b510      	push	{r4, lr}
    f0ce:	6841      	ldr	r1, [r0, #4]
    f0d0:	f891 20a5 	ldrb.w	r2, [r1, #165]	; 0xa5
    f0d4:	2a13      	cmp	r2, #19
    f0d6:	d004      	beq.n	f0e2 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2a6>
    f0d8:	f240 716a 	movw	r1, #1898	; 0x76a
    f0dc:	2036      	movs	r0, #54	; 0x36
    f0de:	f7f1 fccf 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f0e2:	2201      	movs	r2, #1
    f0e4:	f881 20e6 	strb.w	r2, [r1, #230]	; 0xe6
    f0e8:	6840      	ldr	r0, [r0, #4]
    f0ea:	2112      	movs	r1, #18
    f0ec:	f880 10a5 	strb.w	r1, [r0, #165]	; 0xa5
    f0f0:	bd10      	pop	{r4, pc}
    f0f2:	b510      	push	{r4, lr}
    f0f4:	4604      	mov	r4, r0
    f0f6:	6840      	ldr	r0, [r0, #4]
    f0f8:	2300      	movs	r3, #0
    f0fa:	4619      	mov	r1, r3
    f0fc:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    f100:	3088      	adds	r0, #136	; 0x88
    f102:	f7fe fd1b 	bl	db3c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f106:	b120      	cbz	r0, f112 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2d6>
    f108:	6861      	ldr	r1, [r4, #4]
    f10a:	2020      	movs	r0, #32
    f10c:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    f110:	bd10      	pop	{r4, pc}
    f112:	f240 71a2 	movw	r1, #1954	; 0x7a2
    f116:	2036      	movs	r0, #54	; 0x36
    f118:	f7f1 fcb2 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f11c:	b570      	push	{r4, r5, r6, lr}
    f11e:	6841      	ldr	r1, [r0, #4]
    f120:	4604      	mov	r4, r0
    f122:	f891 0262 	ldrb.w	r0, [r1, #610]	; 0x262
    f126:	b910      	cbnz	r0, f12e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2f2>
    f128:	f891 0263 	ldrb.w	r0, [r1, #611]	; 0x263
    f12c:	b178      	cbz	r0, f14e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x312>
    f12e:	2000      	movs	r0, #0
    f130:	f891 30a6 	ldrb.w	r3, [r1, #166]	; 0xa6
    f134:	2225      	movs	r2, #37	; 0x25
    f136:	2500      	movs	r5, #0
    f138:	2b22      	cmp	r3, #34	; 0x22
    f13a:	d00a      	beq.n	f152 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x316>
    f13c:	f891 30a5 	ldrb.w	r3, [r1, #165]	; 0xa5
    f140:	2b24      	cmp	r3, #36	; 0x24
    f142:	d01b      	beq.n	f17c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x340>
    f144:	f240 71ce 	movw	r1, #1998	; 0x7ce
    f148:	2036      	movs	r0, #54	; 0x36
    f14a:	f7f1 fc99 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f14e:	2001      	movs	r0, #1
    f150:	e7ee      	b.n	f130 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2f4>
    f152:	b168      	cbz	r0, f170 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x334>
    f154:	f881 50a6 	strb.w	r5, [r1, #166]	; 0xa6
    f158:	6860      	ldr	r0, [r4, #4]
    f15a:	f890 0144 	ldrb.w	r0, [r0, #324]	; 0x144
    f15e:	2801      	cmp	r0, #1
    f160:	d102      	bne.n	f168 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x32c>
    f162:	2000      	movs	r0, #0
    f164:	f7f7 f996 	bl	6494 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd9c>
    f168:	6860      	ldr	r0, [r4, #4]
    f16a:	f880 5144 	strb.w	r5, [r0, #324]	; 0x144
    f16e:	e001      	b.n	f174 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x338>
    f170:	f881 20a6 	strb.w	r2, [r1, #166]	; 0xa6
    f174:	6860      	ldr	r0, [r4, #4]
    f176:	f880 50e4 	strb.w	r5, [r0, #228]	; 0xe4
    f17a:	bd70      	pop	{r4, r5, r6, pc}
    f17c:	b128      	cbz	r0, f18a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x34e>
    f17e:	f881 50a5 	strb.w	r5, [r1, #165]	; 0xa5
    f182:	2000      	movs	r0, #0
    f184:	f7f7 f986 	bl	6494 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd9c>
    f188:	e001      	b.n	f18e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x352>
    f18a:	f881 20a5 	strb.w	r2, [r1, #165]	; 0xa5
    f18e:	6860      	ldr	r0, [r4, #4]
    f190:	f880 50e0 	strb.w	r5, [r0, #224]	; 0xe0
    f194:	bd70      	pop	{r4, r5, r6, pc}
    f196:	6842      	ldr	r2, [r0, #4]
    f198:	2100      	movs	r1, #0
    f19a:	f892 3130 	ldrb.w	r3, [r2, #304]	; 0x130
    f19e:	b12b      	cbz	r3, f1ac <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x370>
    f1a0:	f882 10a5 	strb.w	r1, [r2, #165]	; 0xa5
    f1a4:	6840      	ldr	r0, [r0, #4]
    f1a6:	f880 10e0 	strb.w	r1, [r0, #224]	; 0xe0
    f1aa:	4770      	bx	lr
    f1ac:	f882 10a6 	strb.w	r1, [r2, #166]	; 0xa6
    f1b0:	6840      	ldr	r0, [r0, #4]
    f1b2:	f880 10e4 	strb.w	r1, [r0, #228]	; 0xe4
    f1b6:	4770      	bx	lr
    f1b8:	b510      	push	{r4, lr}
    f1ba:	6840      	ldr	r0, [r0, #4]
    f1bc:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    f1c0:	2919      	cmp	r1, #25
    f1c2:	d004      	beq.n	f1ce <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x392>
    f1c4:	f240 717a 	movw	r1, #1914	; 0x77a
    f1c8:	2036      	movs	r0, #54	; 0x36
    f1ca:	f7f1 fc59 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f1ce:	211b      	movs	r1, #27
    f1d0:	f880 10a5 	strb.w	r1, [r0, #165]	; 0xa5
    f1d4:	bd10      	pop	{r4, pc}
    f1d6:	b510      	push	{r4, lr}
    f1d8:	4604      	mov	r4, r0
    f1da:	6840      	ldr	r0, [r0, #4]
    f1dc:	2300      	movs	r3, #0
    f1de:	2101      	movs	r1, #1
    f1e0:	f890 20a7 	ldrb.w	r2, [r0, #167]	; 0xa7
    f1e4:	3088      	adds	r0, #136	; 0x88
    f1e6:	f7fe fca9 	bl	db3c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f1ea:	2800      	cmp	r0, #0
    f1ec:	d10a      	bne.n	f204 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x3c8>
    f1ee:	6861      	ldr	r1, [r4, #4]
    f1f0:	2007      	movs	r0, #7
    f1f2:	f881 00a7 	strb.w	r0, [r1, #167]	; 0xa7
    f1f6:	6861      	ldr	r1, [r4, #4]
    f1f8:	2000      	movs	r0, #0
    f1fa:	f881 00e0 	strb.w	r0, [r1, #224]	; 0xe0
    f1fe:	6861      	ldr	r1, [r4, #4]
    f200:	f881 00e4 	strb.w	r0, [r1, #228]	; 0xe4
    f204:	bd10      	pop	{r4, pc}
    f206:	b570      	push	{r4, r5, r6, lr}
    f208:	4604      	mov	r4, r0
    f20a:	6840      	ldr	r0, [r0, #4]
    f20c:	2300      	movs	r3, #0
    f20e:	4619      	mov	r1, r3
    f210:	f890 20a6 	ldrb.w	r2, [r0, #166]	; 0xa6
    f214:	3088      	adds	r0, #136	; 0x88
    f216:	f7fe fc91 	bl	db3c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f21a:	2500      	movs	r5, #0
    f21c:	b110      	cbz	r0, f224 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x3e8>
    f21e:	6860      	ldr	r0, [r4, #4]
    f220:	f880 50e4 	strb.w	r5, [r0, #228]	; 0xe4
    f224:	6860      	ldr	r0, [r4, #4]
    f226:	2300      	movs	r3, #0
    f228:	4619      	mov	r1, r3
    f22a:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    f22e:	3088      	adds	r0, #136	; 0x88
    f230:	f7fe fc84 	bl	db3c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f234:	2800      	cmp	r0, #0
    f236:	d002      	beq.n	f23e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x402>
    f238:	6860      	ldr	r0, [r4, #4]
    f23a:	f880 50e0 	strb.w	r5, [r0, #224]	; 0xe0
    f23e:	bd70      	pop	{r4, r5, r6, pc}
    f240:	f7ff ba46 	b.w	e6d0 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q>
    f244:	b510      	push	{r4, lr}
    f246:	f890 10ab 	ldrb.w	r1, [r0, #171]	; 0xab
    f24a:	b941      	cbnz	r1, f25e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x422>
    f24c:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    f250:	2300      	movs	r3, #0
    f252:	2106      	movs	r1, #6
    f254:	3088      	adds	r0, #136	; 0x88
    f256:	f7fe fc71 	bl	db3c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f25a:	2800      	cmp	r0, #0
    f25c:	d000      	beq.n	f260 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x424>
    f25e:	2001      	movs	r0, #1
    f260:	bd10      	pop	{r4, pc}

0000f262 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>:
    f262:	b510      	push	{r4, lr}
    f264:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
    f268:	1ac3      	subs	r3, r0, r3
    f26a:	eb61 0104 	sbc.w	r1, r1, r4
    f26e:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
    f272:	17e0      	asrs	r0, r4, #31
    f274:	1ae4      	subs	r4, r4, r3
    f276:	4188      	sbcs	r0, r1
    f278:	da05      	bge.n	f286 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x24>
    f27a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    f27e:	1a18      	subs	r0, r3, r0
    f280:	f171 0000 	sbcs.w	r0, r1, #0
    f284:	db03      	blt.n	f28e <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x2c>
    f286:	21b0      	movs	r1, #176	; 0xb0
    f288:	2037      	movs	r0, #55	; 0x37
    f28a:	f7f1 fbf9 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f28e:	2900      	cmp	r1, #0
    f290:	da00      	bge.n	f294 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x32>
    f292:	425b      	negs	r3, r3
    f294:	fbb3 f0f2 	udiv	r0, r3, r2
    f298:	fb02 3010 	mls	r0, r2, r0, r3
    f29c:	2900      	cmp	r1, #0
    f29e:	da02      	bge.n	f2a6 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x44>
    f2a0:	2800      	cmp	r0, #0
    f2a2:	d000      	beq.n	f2a6 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x44>
    f2a4:	1a10      	subs	r0, r2, r0
    f2a6:	bd10      	pop	{r4, pc}
    f2a8:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f2ac:	f001 0107 	and.w	r1, r1, #7
    f2b0:	7800      	ldrb	r0, [r0, #0]
    f2b2:	40c8      	lsrs	r0, r1
    f2b4:	f000 0001 	and.w	r0, r0, #1
    f2b8:	4770      	bx	lr

0000f2ba <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ>:
    f2ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f2be:	6856      	ldr	r6, [r2, #4]
    f2c0:	460c      	mov	r4, r1
    f2c2:	f506 759c 	add.w	r5, r6, #312	; 0x138
    f2c6:	f106 0788 	add.w	r7, r6, #136	; 0x88
    f2ca:	2823      	cmp	r0, #35	; 0x23
    f2cc:	d008      	beq.n	f2e0 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x26>
    f2ce:	2824      	cmp	r0, #36	; 0x24
    f2d0:	d014      	beq.n	f2fc <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x42>
    f2d2:	2825      	cmp	r0, #37	; 0x25
    f2d4:	d02a      	beq.n	f32c <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x72>
    f2d6:	f44f 718d 	mov.w	r1, #282	; 0x11a
    f2da:	2078      	movs	r0, #120	; 0x78
    f2dc:	f7f1 fbd0 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f2e0:	7de8      	ldrb	r0, [r5, #23]
    f2e2:	f000 f8d6 	bl	f492 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x50>
    f2e6:	7de9      	ldrb	r1, [r5, #23]
    f2e8:	7121      	strb	r1, [r4, #4]
    f2ea:	7e29      	ldrb	r1, [r5, #24]
    f2ec:	eb06 0040 	add.w	r0, r6, r0, lsl #1
    f2f0:	7161      	strb	r1, [r4, #5]
    f2f2:	f890 0079 	ldrb.w	r0, [r0, #121]	; 0x79
    f2f6:	71a0      	strb	r0, [r4, #6]
    f2f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f2fc:	7d28      	ldrb	r0, [r5, #20]
    f2fe:	f000 f8c8 	bl	f492 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x50>
    f302:	eb06 0640 	add.w	r6, r6, r0, lsl #1
    f306:	7f78      	ldrb	r0, [r7, #29]
    f308:	3678      	adds	r6, #120	; 0x78
    f30a:	2828      	cmp	r0, #40	; 0x28
    f30c:	d00c      	beq.n	f328 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x6e>
    f30e:	68b8      	ldr	r0, [r7, #8]
    f310:	f7f3 fe74 	bl	2ffc <sym_DEQHYPJXYJ4WT7NTOYVXPSGPFEINKR4XQZSCDJY>
    f314:	7831      	ldrb	r1, [r6, #0]
    f316:	7121      	strb	r1, [r4, #4]
    f318:	7d69      	ldrb	r1, [r5, #21]
    f31a:	7161      	strb	r1, [r4, #5]
    f31c:	7871      	ldrb	r1, [r6, #1]
    f31e:	71a1      	strb	r1, [r4, #6]
    f320:	71e0      	strb	r0, [r4, #7]
    f322:	2000      	movs	r0, #0
    f324:	75a8      	strb	r0, [r5, #22]
    f326:	e7e7      	b.n	f2f8 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x3e>
    f328:	20ff      	movs	r0, #255	; 0xff
    f32a:	e7f3      	b.n	f314 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x5a>
    f32c:	7d28      	ldrb	r0, [r5, #20]
    f32e:	f000 f8b0 	bl	f492 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x50>
    f332:	eb06 0040 	add.w	r0, r6, r0, lsl #1
    f336:	7d29      	ldrb	r1, [r5, #20]
    f338:	7121      	strb	r1, [r4, #4]
    f33a:	f810 1f78 	ldrb.w	r1, [r0, #120]!
    f33e:	7161      	strb	r1, [r4, #5]
    f340:	7d69      	ldrb	r1, [r5, #21]
    f342:	71a1      	strb	r1, [r4, #6]
    f344:	7840      	ldrb	r0, [r0, #1]
    f346:	71e0      	strb	r0, [r4, #7]
    f348:	e7d6      	b.n	f2f8 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x3e>

0000f34a <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y>:
    f34a:	b510      	push	{r4, lr}
    f34c:	2801      	cmp	r0, #1
    f34e:	d006      	beq.n	f35e <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y+0x14>
    f350:	2802      	cmp	r0, #2
    f352:	d006      	beq.n	f362 <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y+0x18>
    f354:	f240 2162 	movw	r1, #610	; 0x262
    f358:	2078      	movs	r0, #120	; 0x78
    f35a:	f7f1 fb91 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f35e:	2000      	movs	r0, #0
    f360:	bd10      	pop	{r4, pc}
    f362:	2001      	movs	r0, #1
    f364:	bd10      	pop	{r4, pc}

0000f366 <sym_LC25II2QNYO4QUC4WQAQXNPSFLYYHVIDWHXRWAA>:
    f366:	207f      	movs	r0, #127	; 0x7f
    f368:	f000 b8ad 	b.w	f4c6 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x84>

0000f36c <sym_6E7DB5DGCJDCKNJAQTLQVPITL6JXBGRB3SQGSDY>:
    f36c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    f370:	f000 b8a9 	b.w	f4c6 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x84>

0000f374 <sym_QIMK4SLEK3LSPZFVZAE765G6IOUSE5EWGSEHHUY>:
    f374:	b510      	push	{r4, lr}
    f376:	4604      	mov	r4, r0
    f378:	f7f8 fa6e 	bl	7858 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    f37c:	1e64      	subs	r4, r4, #1
    f37e:	b2e2      	uxtb	r2, r4
    f380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f384:	f000 b86b 	b.w	f45e <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x1c>

0000f388 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I>:
    f388:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f38c:	4607      	mov	r7, r0
    f38e:	461e      	mov	r6, r3
    f390:	4690      	mov	r8, r2
    f392:	460c      	mov	r4, r1
    f394:	4608      	mov	r0, r1
    f396:	f7ff ffed 	bl	f374 <sym_QIMK4SLEK3LSPZFVZAE765G6IOUSE5EWGSEHHUY>
    f39a:	b1f8      	cbz	r0, f3dc <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x54>
    f39c:	687d      	ldr	r5, [r7, #4]
    f39e:	2121      	movs	r1, #33	; 0x21
    f3a0:	f105 00f6 	add.w	r0, r5, #246	; 0xf6
    f3a4:	3588      	adds	r5, #136	; 0x88
    f3a6:	f7ff ff7f 	bl	f2a8 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x46>
    f3aa:	b1c8      	cbz	r0, f3e0 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x58>
    f3ac:	1e64      	subs	r4, r4, #1
    f3ae:	f8d5 1072 	ldr.w	r1, [r5, #114]	; 0x72
    f3b2:	f8d5 006e 	ldr.w	r0, [r5, #110]	; 0x6e
    f3b6:	b2e2      	uxtb	r2, r4
    f3b8:	f000 f851 	bl	f45e <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x1c>
    f3bc:	b180      	cbz	r0, f3e0 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x58>
    f3be:	6878      	ldr	r0, [r7, #4]
    f3c0:	f890 1151 	ldrb.w	r1, [r0, #337]	; 0x151
    f3c4:	f88d 1000 	strb.w	r1, [sp]
    f3c8:	9900      	ldr	r1, [sp, #0]
    f3ca:	9100      	str	r1, [sp, #0]
    f3cc:	f89d 1000 	ldrb.w	r1, [sp]
    f3d0:	f200 104f 	addw	r0, r0, #335	; 0x14f
    f3d4:	b131      	cbz	r1, f3e4 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x5c>
    f3d6:	203a      	movs	r0, #58	; 0x3a
    f3d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f3dc:	2011      	movs	r0, #17
    f3de:	e7fb      	b.n	f3d8 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x50>
    f3e0:	201a      	movs	r0, #26
    f3e2:	e7f9      	b.n	f3d8 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x50>
    f3e4:	1c81      	adds	r1, r0, #2
    f3e6:	700e      	strb	r6, [r1, #0]
    f3e8:	2101      	movs	r1, #1
    f3ea:	40a1      	lsls	r1, r4
    f3ec:	7001      	strb	r1, [r0, #0]
    f3ee:	f880 8001 	strb.w	r8, [r0, #1]
    f3f2:	2000      	movs	r0, #0
    f3f4:	e7f0      	b.n	f3d8 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x50>

0000f3f6 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>:
    f3f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f3fa:	460d      	mov	r5, r1
    f3fc:	4606      	mov	r6, r0
    f3fe:	f7ff ffb2 	bl	f366 <sym_LC25II2QNYO4QUC4WQAQXNPSFLYYHVIDWHXRWAA>
    f402:	4607      	mov	r7, r0
    f404:	f7ff ffb2 	bl	f36c <sym_6E7DB5DGCJDCKNJAQTLQVPITL6JXBGRB3SQGSDY>
    f408:	2400      	movs	r4, #0
    f40a:	4285      	cmp	r5, r0
    f40c:	d100      	bne.n	f410 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x1a>
    f40e:	2401      	movs	r4, #1
    f410:	42bd      	cmp	r5, r7
    f412:	d101      	bne.n	f418 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x22>
    f414:	f044 0402 	orr.w	r4, r4, #2
    f418:	f000 f834 	bl	f484 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x42>
    f41c:	2200      	movs	r2, #0
    f41e:	4601      	mov	r1, r0
    f420:	2301      	movs	r3, #1
    f422:	fa03 f002 	lsl.w	r0, r3, r2
    f426:	4208      	tst	r0, r1
    f428:	d005      	beq.n	f436 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x40>
    f42a:	eb06 0042 	add.w	r0, r6, r2, lsl #1
    f42e:	f880 5079 	strb.w	r5, [r0, #121]	; 0x79
    f432:	f880 4078 	strb.w	r4, [r0, #120]	; 0x78
    f436:	1c52      	adds	r2, r2, #1
    f438:	b2d2      	uxtb	r2, r2
    f43a:	2a02      	cmp	r2, #2
    f43c:	d3f1      	bcc.n	f422 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x2c>
    f43e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f442 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY>:
    f442:	b510      	push	{r4, lr}
    f444:	4604      	mov	r4, r0
    f446:	4608      	mov	r0, r1
    f448:	f7ff ff7f 	bl	f34a <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y>
    f44c:	2802      	cmp	r0, #2
    f44e:	d205      	bcs.n	f45c <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x1a>
    f450:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    f454:	f890 0079 	ldrb.w	r0, [r0, #121]	; 0x79
    f458:	f884 006e 	strb.w	r0, [r4, #110]	; 0x6e
    f45c:	bd10      	pop	{r4, pc}
    f45e:	b510      	push	{r4, lr}
    f460:	4614      	mov	r4, r2
    f462:	4602      	mov	r2, r0
    f464:	2000      	movs	r0, #0
    f466:	4603      	mov	r3, r0
    f468:	2c02      	cmp	r4, #2
    f46a:	d205      	bcs.n	f478 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x36>
    f46c:	4610      	mov	r0, r2
    f46e:	f000 f821 	bl	f4b4 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x72>
    f472:	2101      	movs	r1, #1
    f474:	40a1      	lsls	r1, r4
    f476:	b2cb      	uxtb	r3, r1
    f478:	4203      	tst	r3, r0
    f47a:	d001      	beq.n	f480 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x3e>
    f47c:	2001      	movs	r0, #1
    f47e:	bd10      	pop	{r4, pc}
    f480:	2000      	movs	r0, #0
    f482:	bd10      	pop	{r4, pc}
    f484:	b510      	push	{r4, lr}
    f486:	f7f8 f9e7 	bl	7858 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    f48a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f48e:	f000 b811 	b.w	f4b4 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x72>
    f492:	4601      	mov	r1, r0
    f494:	b510      	push	{r4, lr}
    f496:	2000      	movs	r0, #0
    f498:	2301      	movs	r3, #1
    f49a:	fa03 f200 	lsl.w	r2, r3, r0
    f49e:	420a      	tst	r2, r1
    f4a0:	d107      	bne.n	f4b2 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x70>
    f4a2:	1c40      	adds	r0, r0, #1
    f4a4:	b2c0      	uxtb	r0, r0
    f4a6:	2802      	cmp	r0, #2
    f4a8:	d3f7      	bcc.n	f49a <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x58>
    f4aa:	213c      	movs	r1, #60	; 0x3c
    f4ac:	2078      	movs	r0, #120	; 0x78
    f4ae:	f7f1 fae7 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f4b2:	bd10      	pop	{r4, pc}
    f4b4:	0a00      	lsrs	r0, r0, #8
    f4b6:	2201      	movs	r2, #1
    f4b8:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
    f4bc:	07c0      	lsls	r0, r0, #31
    f4be:	d000      	beq.n	f4c2 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x80>
    f4c0:	2203      	movs	r2, #3
    f4c2:	4610      	mov	r0, r2
    f4c4:	4770      	bx	lr
    f4c6:	b508      	push	{r3, lr}
    f4c8:	2301      	movs	r3, #1
    f4ca:	f640 1288 	movw	r2, #2440	; 0x988
    f4ce:	4669      	mov	r1, sp
    f4d0:	f7fd f922 	bl	c718 <mpsl_fem_tx_power_split>
    f4d4:	bd08      	pop	{r3, pc}
    f4d6:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f4da:	f001 0107 	and.w	r1, r1, #7
    f4de:	7800      	ldrb	r0, [r0, #0]
    f4e0:	40c8      	lsrs	r0, r1
    f4e2:	f000 0001 	and.w	r0, r0, #1
    f4e6:	4770      	bx	lr
    f4e8:	b118      	cbz	r0, f4f2 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0xb0>
    f4ea:	2802      	cmp	r0, #2
    f4ec:	d001      	beq.n	f4f2 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0xb0>
    f4ee:	2001      	movs	r0, #1
    f4f0:	4770      	bx	lr
    f4f2:	2000      	movs	r0, #0
    f4f4:	4770      	bx	lr

0000f4f6 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
    f4f6:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    f4f8:	7881      	ldrb	r1, [r0, #2]
    f4fa:	2500      	movs	r5, #0
    f4fc:	4604      	mov	r4, r0
    f4fe:	291a      	cmp	r1, #26
    f500:	d024      	beq.n	f54c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x56>
    f502:	dc0e      	bgt.n	f522 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2c>
    f504:	2916      	cmp	r1, #22
    f506:	d22b      	bcs.n	f560 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f508:	e8df f001 	tbb	[pc, r1]
    f50c:	2a2a2a2a 	.word	0x2a2a2a2a
    f510:	2a2a202a 	.word	0x2a2a202a
    f514:	2a2a2a2a 	.word	0x2a2a2a2a
    f518:	2a2a2a2a 	.word	0x2a2a2a2a
    f51c:	202a2a2a 	.word	0x202a2a2a
    f520:	2020      	.short	0x2020
    f522:	292a      	cmp	r1, #42	; 0x2a
    f524:	d01c      	beq.n	f560 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f526:	dc0b      	bgt.n	f540 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x4a>
    f528:	f1a1 011e 	sub.w	r1, r1, #30
    f52c:	290c      	cmp	r1, #12
    f52e:	d217      	bcs.n	f560 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f530:	e8df f001 	tbb	[pc, r1]
    f534:	16161616 	.word	0x16161616
    f538:	16161616 	.word	0x16161616
    f53c:	0c161616 	.word	0x0c161616
    f540:	393a      	subs	r1, #58	; 0x3a
    f542:	2902      	cmp	r1, #2
    f544:	d20c      	bcs.n	f560 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f546:	e8df f001 	tbb	[pc, r1]
    f54a:	010b      	.short	0x010b
    f54c:	8820      	ldrh	r0, [r4, #0]
    f54e:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
    f552:	d205      	bcs.n	f560 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f554:	4669      	mov	r1, sp
    f556:	f7fe fac8 	bl	daea <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f55a:	b118      	cbz	r0, f564 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6e>
    f55c:	2002      	movs	r0, #2
    f55e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f560:	2012      	movs	r0, #18
    f562:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f564:	9901      	ldr	r1, [sp, #4]
    f566:	f891 0138 	ldrb.w	r0, [r1, #312]	; 0x138
    f56a:	f88d 0008 	strb.w	r0, [sp, #8]
    f56e:	9802      	ldr	r0, [sp, #8]
    f570:	9002      	str	r0, [sp, #8]
    f572:	f89d 0008 	ldrb.w	r0, [sp, #8]
    f576:	f501 719c 	add.w	r1, r1, #312	; 0x138
    f57a:	b108      	cbz	r0, f580 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x8a>
    f57c:	200c      	movs	r0, #12
    f57e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f580:	78a0      	ldrb	r0, [r4, #2]
    f582:	7048      	strb	r0, [r1, #1]
    f584:	20ff      	movs	r0, #255	; 0xff
    f586:	7008      	strb	r0, [r1, #0]
    f588:	4628      	mov	r0, r5
    f58a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000f58c <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    f58c:	b510      	push	{r4, lr}
    f58e:	4604      	mov	r4, r0
    f590:	f000 fdac 	bl	100ec <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x470>
    f594:	b108      	cbz	r0, f59a <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    f596:	200c      	movs	r0, #12
    f598:	bd10      	pop	{r4, pc}
    f59a:	7820      	ldrb	r0, [r4, #0]
    f59c:	b118      	cbz	r0, f5a6 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    f59e:	2801      	cmp	r0, #1
    f5a0:	d001      	beq.n	f5a6 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    f5a2:	2012      	movs	r0, #18
    f5a4:	bd10      	pop	{r4, pc}
    f5a6:	f7ff ff9f 	bl	f4e8 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0xa6>
    f5aa:	1c61      	adds	r1, r4, #1
    f5ac:	f7f2 feb0 	bl	2310 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
    f5b0:	b108      	cbz	r0, f5b6 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
    f5b2:	2000      	movs	r0, #0
    f5b4:	bd10      	pop	{r4, pc}
    f5b6:	2007      	movs	r0, #7
    f5b8:	bd10      	pop	{r4, pc}

0000f5ba <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    f5ba:	b510      	push	{r4, lr}
    f5bc:	f000 fd96 	bl	100ec <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x470>
    f5c0:	b108      	cbz	r0, f5c6 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    f5c2:	200c      	movs	r0, #12
    f5c4:	bd10      	pop	{r4, pc}
    f5c6:	f7f2 fecb 	bl	2360 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
    f5ca:	2000      	movs	r0, #0
    f5cc:	bd10      	pop	{r4, pc}

0000f5ce <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>:
    f5ce:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f5d2:	4605      	mov	r5, r0
    f5d4:	f000 fb2f 	bl	fc36 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>
    f5d8:	2800      	cmp	r0, #0
    f5da:	d112      	bne.n	f602 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    f5dc:	8828      	ldrh	r0, [r5, #0]
    f5de:	2100      	movs	r1, #0
    f5e0:	f7fe f8ea 	bl	d7b8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f5e4:	0004      	movs	r4, r0
    f5e6:	d00e      	beq.n	f606 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x38>
    f5e8:	f000 fd40 	bl	1006c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3f0>
    f5ec:	b158      	cbz	r0, f606 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x38>
    f5ee:	f894 0264 	ldrb.w	r0, [r4, #612]	; 0x264
    f5f2:	f88d 0000 	strb.w	r0, [sp]
    f5f6:	9800      	ldr	r0, [sp, #0]
    f5f8:	9000      	str	r0, [sp, #0]
    f5fa:	f89d 0000 	ldrb.w	r0, [sp]
    f5fe:	b120      	cbz	r0, f60a <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x3c>
    f600:	203a      	movs	r0, #58	; 0x3a
    f602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f606:	2002      	movs	r0, #2
    f608:	e7fb      	b.n	f602 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    f60a:	f04f 0800 	mov.w	r8, #0
    f60e:	88a8      	ldrh	r0, [r5, #4]
    f610:	f7fe fa77 	bl	db02 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    f614:	4607      	mov	r7, r0
    f616:	4601      	mov	r1, r0
    f618:	2005      	movs	r0, #5
    f61a:	f7fe fbf4 	bl	de06 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    f61e:	4606      	mov	r6, r0
    f620:	4639      	mov	r1, r7
    f622:	2008      	movs	r0, #8
    f624:	f7fe fbef 	bl	de06 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    f628:	42b0      	cmp	r0, r6
    f62a:	d301      	bcc.n	f630 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x62>
    f62c:	42be      	cmp	r6, r7
    f62e:	d301      	bcc.n	f634 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x66>
    f630:	2012      	movs	r0, #18
    f632:	e7e6      	b.n	f602 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    f634:	f8a4 6268 	strh.w	r6, [r4, #616]	; 0x268
    f638:	e9c4 879b 	strd	r8, r7, [r4, #620]	; 0x26c
    f63c:	88e8      	ldrh	r0, [r5, #6]
    f63e:	f8a4 0274 	strh.w	r0, [r4, #628]	; 0x274
    f642:	8928      	ldrh	r0, [r5, #8]
    f644:	f8a4 0276 	strh.w	r0, [r4, #630]	; 0x276
    f648:	f504 7419 	add.w	r4, r4, #612	; 0x264
    f64c:	20ff      	movs	r0, #255	; 0xff
    f64e:	7020      	strb	r0, [r4, #0]
    f650:	2000      	movs	r0, #0
    f652:	e7d6      	b.n	f602 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>

0000f654 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y>:
    f654:	b508      	push	{r3, lr}
    f656:	f7f5 f941 	bl	48dc <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
    f65a:	2805      	cmp	r0, #5
    f65c:	d001      	beq.n	f662 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0xe>
    f65e:	200c      	movs	r0, #12
    f660:	bd08      	pop	{r3, pc}
    f662:	4668      	mov	r0, sp
    f664:	f7f5 f8c0 	bl	47e8 <sym_GM7QU7LP6UH4DZPOIR7WHUEKZSOPEOATHYRRTQI>
    f668:	2800      	cmp	r0, #0
    f66a:	d1f9      	bne.n	f660 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0xc>
    f66c:	f7f3 fe86 	bl	337c <sym_MSYMIWR3PI6HXHUAZX2P7HGFCTCK3HSW5N3BC2A>
    f670:	2000      	movs	r0, #0
    f672:	bd08      	pop	{r3, pc}

0000f674 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
    f674:	b510      	push	{r4, lr}
    f676:	460b      	mov	r3, r1
    f678:	2201      	movs	r2, #1
    f67a:	f100 0110 	add.w	r1, r0, #16
    f67e:	f7fe f9f8 	bl	da72 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    f682:	2000      	movs	r0, #0
    f684:	bd10      	pop	{r4, pc}

0000f686 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
    f686:	b510      	push	{r4, lr}
    f688:	2108      	movs	r1, #8
    f68a:	f7f1 fa99 	bl	bc0 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    f68e:	2000      	movs	r0, #0
    f690:	bd10      	pop	{r4, pc}

0000f692 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
    f692:	21fb      	movs	r1, #251	; 0xfb
    f694:	8001      	strh	r1, [r0, #0]
    f696:	f640 0248 	movw	r2, #2120	; 0x848
    f69a:	8042      	strh	r2, [r0, #2]
    f69c:	8081      	strh	r1, [r0, #4]
    f69e:	80c2      	strh	r2, [r0, #6]
    f6a0:	2000      	movs	r0, #0
    f6a2:	4770      	bx	lr

0000f6a4 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
    f6a4:	b51c      	push	{r2, r3, r4, lr}
    f6a6:	8800      	ldrh	r0, [r0, #0]
    f6a8:	4669      	mov	r1, sp
    f6aa:	f7fe fa1e 	bl	daea <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f6ae:	2800      	cmp	r0, #0
    f6b0:	d10c      	bne.n	f6cc <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x28>
    f6b2:	9c01      	ldr	r4, [sp, #4]
    f6b4:	f89d 0000 	ldrb.w	r0, [sp]
    f6b8:	f504 749c 	add.w	r4, r4, #312	; 0x138
    f6bc:	b918      	cbnz	r0, f6c6 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x22>
    f6be:	9801      	ldr	r0, [sp, #4]
    f6c0:	f000 fcd4 	bl	1006c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3f0>
    f6c4:	b118      	cbz	r0, f6ce <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2a>
    f6c6:	7ce0      	ldrb	r0, [r4, #19]
    f6c8:	b118      	cbz	r0, f6d2 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2e>
    f6ca:	203a      	movs	r0, #58	; 0x3a
    f6cc:	bd1c      	pop	{r2, r3, r4, pc}
    f6ce:	2002      	movs	r0, #2
    f6d0:	bd1c      	pop	{r2, r3, r4, pc}
    f6d2:	2001      	movs	r0, #1
    f6d4:	74e0      	strb	r0, [r4, #19]
    f6d6:	2000      	movs	r0, #0
    f6d8:	bd1c      	pop	{r2, r3, r4, pc}

0000f6da <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
    f6da:	b510      	push	{r4, lr}
    f6dc:	4604      	mov	r4, r0
    f6de:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    f6e2:	f000 fce4 	bl	100ae <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x432>
    f6e6:	f7f2 ffcd 	bl	2684 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    f6ea:	7020      	strb	r0, [r4, #0]
    f6ec:	f000 fcbb 	bl	10066 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3ea>
    f6f0:	f7f2 ffc8 	bl	2684 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    f6f4:	7060      	strb	r0, [r4, #1]
    f6f6:	2000      	movs	r0, #0
    f6f8:	bd10      	pop	{r4, pc}

0000f6fa <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
    f6fa:	2108      	movs	r1, #8
    f6fc:	7001      	strb	r1, [r0, #0]
    f6fe:	2000      	movs	r0, #0
    f700:	4770      	bx	lr

0000f702 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
    f702:	b510      	push	{r4, lr}
    f704:	4604      	mov	r4, r0
    f706:	f000 fcf1 	bl	100ec <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x470>
    f70a:	b108      	cbz	r0, f710 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
    f70c:	200c      	movs	r0, #12
    f70e:	bd10      	pop	{r4, pc}
    f710:	7820      	ldrb	r0, [r4, #0]
    f712:	b108      	cbz	r0, f718 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
    f714:	2801      	cmp	r0, #1
    f716:	d107      	bne.n	f728 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    f718:	f7ff fee6 	bl	f4e8 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0xa6>
    f71c:	1c61      	adds	r1, r4, #1
    f71e:	f7fe f99d 	bl	da5c <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
    f722:	b108      	cbz	r0, f728 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    f724:	2000      	movs	r0, #0
    f726:	bd10      	pop	{r4, pc}
    f728:	2012      	movs	r0, #18
    f72a:	bd10      	pop	{r4, pc}

0000f72c <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
    f72c:	b50e      	push	{r1, r2, r3, lr}
    f72e:	8882      	ldrh	r2, [r0, #4]
    f730:	f244 2390 	movw	r3, #17040	; 0x4290
    f734:	429a      	cmp	r2, r3
    f736:	d901      	bls.n	f73c <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x10>
    f738:	2012      	movs	r0, #18
    f73a:	bd0e      	pop	{r1, r2, r3, pc}
    f73c:	f640 0348 	movw	r3, #2120	; 0x848
    f740:	429a      	cmp	r2, r3
    f742:	d300      	bcc.n	f746 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
    f744:	461a      	mov	r2, r3
    f746:	8803      	ldrh	r3, [r0, #0]
    f748:	f8ad 3000 	strh.w	r3, [sp]
    f74c:	8843      	ldrh	r3, [r0, #2]
    f74e:	f8ad 3002 	strh.w	r3, [sp, #2]
    f752:	f8ad 2004 	strh.w	r2, [sp, #4]
    f756:	8843      	ldrh	r3, [r0, #2]
    f758:	f8ad 3006 	strh.w	r3, [sp, #6]
    f75c:	f8ad 2008 	strh.w	r2, [sp, #8]
    f760:	8800      	ldrh	r0, [r0, #0]
    f762:	8008      	strh	r0, [r1, #0]
    f764:	4668      	mov	r0, sp
    f766:	f7f7 ff57 	bl	7618 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x35c>
    f76a:	bd0e      	pop	{r1, r2, r3, pc}

0000f76c <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
    f76c:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    f76e:	4604      	mov	r4, r0
    f770:	f10d 0007 	add.w	r0, sp, #7
    f774:	9000      	str	r0, [sp, #0]
    f776:	7922      	ldrb	r2, [r4, #4]
    f778:	78e1      	ldrb	r1, [r4, #3]
    f77a:	78a0      	ldrb	r0, [r4, #2]
    f77c:	f10d 0306 	add.w	r3, sp, #6
    f780:	f000 fc9d 	bl	100be <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x442>
    f784:	2800      	cmp	r0, #0
    f786:	d109      	bne.n	f79c <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x30>
    f788:	8820      	ldrh	r0, [r4, #0]
    f78a:	f8ad 0004 	strh.w	r0, [sp, #4]
    f78e:	f8b4 0005 	ldrh.w	r0, [r4, #5]
    f792:	f8ad 0008 	strh.w	r0, [sp, #8]
    f796:	a801      	add	r0, sp, #4
    f798:	f000 f970 	bl	fa7c <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
    f79c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000f79e <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
    f79e:	b510      	push	{r4, lr}
    f7a0:	4604      	mov	r4, r0
    f7a2:	2001      	movs	r0, #1
    f7a4:	f000 fa97 	bl	fcd6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x5a>
    f7a8:	b128      	cbz	r0, f7b6 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
    f7aa:	4621      	mov	r1, r4
    f7ac:	2001      	movs	r0, #1
    f7ae:	f7f1 ff5f 	bl	1670 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    f7b2:	2000      	movs	r0, #0
    f7b4:	bd10      	pop	{r4, pc}
    f7b6:	200c      	movs	r0, #12
    f7b8:	bd10      	pop	{r4, pc}

0000f7ba <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ>:
    f7ba:	b51c      	push	{r2, r3, r4, lr}
    f7bc:	7801      	ldrb	r1, [r0, #0]
    f7be:	f88d 1000 	strb.w	r1, [sp]
    f7c2:	7840      	ldrb	r0, [r0, #1]
    f7c4:	f88d 0001 	strb.w	r0, [sp, #1]
    f7c8:	2000      	movs	r0, #0
    f7ca:	f8ad 0002 	strh.w	r0, [sp, #2]
    f7ce:	f8ad 0004 	strh.w	r0, [sp, #4]
    f7d2:	4601      	mov	r1, r0
    f7d4:	4668      	mov	r0, sp
    f7d6:	f000 face 	bl	fd76 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xfa>
    f7da:	2800      	cmp	r0, #0
    f7dc:	d102      	bne.n	f7e4 <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ+0x2a>
    f7de:	4668      	mov	r0, sp
    f7e0:	f000 faa8 	bl	fd34 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb8>
    f7e4:	bd1c      	pop	{r2, r3, r4, pc}

0000f7e6 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA>:
    f7e6:	b500      	push	{lr}
    f7e8:	b087      	sub	sp, #28
    f7ea:	7941      	ldrb	r1, [r0, #5]
    f7ec:	f88d 1000 	strb.w	r1, [sp]
    f7f0:	7981      	ldrb	r1, [r0, #6]
    f7f2:	f88d 1001 	strb.w	r1, [sp, #1]
    f7f6:	2101      	movs	r1, #1
    f7f8:	f88d 1002 	strb.w	r1, [sp, #2]
    f7fc:	7801      	ldrb	r1, [r0, #0]
    f7fe:	f88d 1003 	strb.w	r1, [sp, #3]
    f802:	f8b0 1001 	ldrh.w	r1, [r0, #1]
    f806:	f240 2271 	movw	r2, #625	; 0x271
    f80a:	4351      	muls	r1, r2
    f80c:	9102      	str	r1, [sp, #8]
    f80e:	f8b0 0003 	ldrh.w	r0, [r0, #3]
    f812:	4350      	muls	r0, r2
    f814:	9004      	str	r0, [sp, #16]
    f816:	2007      	movs	r0, #7
    f818:	f88d 0018 	strb.w	r0, [sp, #24]
    f81c:	2000      	movs	r0, #0
    f81e:	f88d 0019 	strb.w	r0, [sp, #25]
    f822:	9804      	ldr	r0, [sp, #16]
    f824:	f7f7 fdfe 	bl	7424 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x168>
    f828:	b140      	cbz	r0, f83c <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x56>
    f82a:	9802      	ldr	r0, [sp, #8]
    f82c:	f7f7 fdee 	bl	740c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x150>
    f830:	b120      	cbz	r0, f83c <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x56>
    f832:	4668      	mov	r0, sp
    f834:	f7f7 fcba 	bl	71ac <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA>
    f838:	b007      	add	sp, #28
    f83a:	bd00      	pop	{pc}
    f83c:	2030      	movs	r0, #48	; 0x30
    f83e:	e7fb      	b.n	f838 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x52>

0000f840 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ>:
    f840:	b570      	push	{r4, r5, r6, lr}
    f842:	4605      	mov	r5, r0
    f844:	8800      	ldrh	r0, [r0, #0]
    f846:	2100      	movs	r1, #0
    f848:	f7fd ffb6 	bl	d7b8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f84c:	0004      	movs	r4, r0
    f84e:	d007      	beq.n	f860 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x20>
    f850:	f000 fc0c 	bl	1006c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3f0>
    f854:	b120      	cbz	r0, f860 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x20>
    f856:	f894 0278 	ldrb.w	r0, [r4, #632]	; 0x278
    f85a:	b118      	cbz	r0, f864 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x24>
    f85c:	203a      	movs	r0, #58	; 0x3a
    f85e:	bd70      	pop	{r4, r5, r6, pc}
    f860:	2002      	movs	r0, #2
    f862:	bd70      	pop	{r4, r5, r6, pc}
    f864:	2100      	movs	r1, #0
    f866:	f104 00f6 	add.w	r0, r4, #246	; 0xf6
    f86a:	f7ff fe34 	bl	f4d6 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x94>
    f86e:	2801      	cmp	r0, #1
    f870:	d001      	beq.n	f876 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x36>
    f872:	201a      	movs	r0, #26
    f874:	bd70      	pop	{r4, r5, r6, pc}
    f876:	f8d5 0002 	ldr.w	r0, [r5, #2]
    f87a:	f8c4 0279 	str.w	r0, [r4, #633]	; 0x279
    f87e:	f8d5 0006 	ldr.w	r0, [r5, #6]
    f882:	f8c4 027d 	str.w	r0, [r4, #637]	; 0x27d
    f886:	8968      	ldrh	r0, [r5, #10]
    f888:	f8a4 0281 	strh.w	r0, [r4, #641]	; 0x281
    f88c:	2210      	movs	r2, #16
    f88e:	f105 010c 	add.w	r1, r5, #12
    f892:	f204 2083 	addw	r0, r4, #643	; 0x283
    f896:	f000 ff0a 	bl	106ae <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f89a:	2001      	movs	r0, #1
    f89c:	f884 0278 	strb.w	r0, [r4, #632]	; 0x278
    f8a0:	2000      	movs	r0, #0
    f8a2:	bd70      	pop	{r4, r5, r6, pc}

0000f8a4 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
    f8a4:	b51c      	push	{r2, r3, r4, lr}
    f8a6:	8801      	ldrh	r1, [r0, #0]
    f8a8:	f8ad 1000 	strh.w	r1, [sp]
    f8ac:	8841      	ldrh	r1, [r0, #2]
    f8ae:	f8ad 1002 	strh.w	r1, [sp, #2]
    f8b2:	8801      	ldrh	r1, [r0, #0]
    f8b4:	f8ad 1004 	strh.w	r1, [sp, #4]
    f8b8:	8840      	ldrh	r0, [r0, #2]
    f8ba:	f8ad 0006 	strh.w	r0, [sp, #6]
    f8be:	4668      	mov	r0, sp
    f8c0:	f7f7 ff2e 	bl	7720 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x464>
    f8c4:	bd1c      	pop	{r2, r3, r4, pc}

0000f8c6 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
    f8c6:	b510      	push	{r4, lr}
    f8c8:	f7f1 fef6 	bl	16b8 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
    f8cc:	2000      	movs	r0, #0
    f8ce:	bd10      	pop	{r4, pc}

0000f8d0 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A>:
    f8d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    f8d4:	4604      	mov	r4, r0
    f8d6:	7a40      	ldrb	r0, [r0, #9]
    f8d8:	0781      	lsls	r1, r0, #30
    f8da:	d502      	bpl.n	f8e2 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x12>
    f8dc:	f040 0001 	orr.w	r0, r0, #1
    f8e0:	7260      	strb	r0, [r4, #9]
    f8e2:	4620      	mov	r0, r4
    f8e4:	f000 fa67 	bl	fdb6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x13a>
    f8e8:	2800      	cmp	r0, #0
    f8ea:	d103      	bne.n	f8f4 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x24>
    f8ec:	f000 fbd4 	bl	10098 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x41c>
    f8f0:	b118      	cbz	r0, f8fa <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x2a>
    f8f2:	200c      	movs	r0, #12
    f8f4:	b004      	add	sp, #16
    f8f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f8fa:	f7f3 fccd 	bl	3298 <sym_TNTVRUTCX6QDICT5SCWQINK5TBPSWJENFWCYQCI>
    f8fe:	b910      	cbnz	r0, f906 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x36>
    f900:	f7f3 fe46 	bl	3590 <sym_FLBXO3C2TGTXVEYELOG5B33ZBUVUNXUU6YZL7TY>
    f904:	b108      	cbz	r0, f90a <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3a>
    f906:	203a      	movs	r0, #58	; 0x3a
    f908:	e7f4      	b.n	f8f4 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x24>
    f90a:	2103      	movs	r1, #3
    f90c:	f104 0018 	add.w	r0, r4, #24
    f910:	f7f7 fd94 	bl	743c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x180>
    f914:	2100      	movs	r1, #0
    f916:	4668      	mov	r0, sp
    f918:	f7f1 faf0 	bl	efc <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    f91c:	0006      	movs	r6, r0
    f91e:	d008      	beq.n	f932 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x62>
    f920:	2301      	movs	r3, #1
    f922:	4622      	mov	r2, r4
    f924:	f8bd 1000 	ldrh.w	r1, [sp]
    f928:	f7f7 fd9c 	bl	7464 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x1a8>
    f92c:	0005      	movs	r5, r0
    f92e:	d002      	beq.n	f936 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x66>
    f930:	e06c      	b.n	fa0c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x13c>
    f932:	2009      	movs	r0, #9
    f934:	e7de      	b.n	f8f4 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x24>
    f936:	7860      	ldrb	r0, [r4, #1]
    f938:	f7f3 fd8c 	bl	3454 <sym_WYXBJE6NWBKILRWDCM2MMYJSSQVAUS4Y4CIL3JA>
    f93c:	78a1      	ldrb	r1, [r4, #2]
    f93e:	7820      	ldrb	r0, [r4, #0]
    f940:	1ce2      	adds	r2, r4, #3
    f942:	f7f3 fcf7 	bl	3334 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI>
    f946:	b148      	cbz	r0, f95c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x8c>
    f948:	f7f3 fc52 	bl	31f0 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>
    f94c:	78a1      	ldrb	r1, [r4, #2]
    f94e:	7820      	ldrb	r0, [r4, #0]
    f950:	1ce2      	adds	r2, r4, #3
    f952:	f7f3 fd2d 	bl	33b0 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY>
    f956:	0005      	movs	r5, r0
    f958:	d002      	beq.n	f960 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x90>
    f95a:	e057      	b.n	fa0c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x13c>
    f95c:	2512      	movs	r5, #18
    f95e:	e055      	b.n	fa0c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x13c>
    f960:	4631      	mov	r1, r6
    f962:	2003      	movs	r0, #3
    f964:	f7f3 fc8c 	bl	3280 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>
    f968:	4605      	mov	r5, r0
    f96a:	78a0      	ldrb	r0, [r4, #2]
    f96c:	f7ff fdbc 	bl	f4e8 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0xa6>
    f970:	1ce1      	adds	r1, r4, #3
    f972:	f7f3 fd47 	bl	3404 <sym_IRV7IF6I52F3HYHZNFCDRHHNP7EOMECHNPGJUGI>
    f976:	bb1d      	cbnz	r5, f9c0 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xf0>
    f978:	7820      	ldrb	r0, [r4, #0]
    f97a:	f04f 0800 	mov.w	r8, #0
    f97e:	2701      	movs	r7, #1
    f980:	bb20      	cbnz	r0, f9cc <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xfc>
    f982:	f894 a002 	ldrb.w	sl, [r4, #2]
    f986:	f104 0903 	add.w	r9, r4, #3
    f98a:	f8cd 8004 	str.w	r8, [sp, #4]
    f98e:	f8cd 8008 	str.w	r8, [sp, #8]
    f992:	e016      	b.n	f9c2 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xf2>
    f994:	9d01      	ldr	r5, [sp, #4]
    f996:	42ae      	cmp	r6, r5
    f998:	d013      	beq.n	f9c2 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xf2>
    f99a:	4650      	mov	r0, sl
    f99c:	f7ff fda4 	bl	f4e8 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0xa6>
    f9a0:	78aa      	ldrb	r2, [r5, #2]
    f9a2:	1ceb      	adds	r3, r5, #3
    f9a4:	4649      	mov	r1, r9
    f9a6:	f7fd ff92 	bl	d8ce <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    f9aa:	b150      	cbz	r0, f9c2 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xf2>
    f9ac:	7a6a      	ldrb	r2, [r5, #9]
    f9ae:	7a70      	ldrb	r0, [r6, #9]
    f9b0:	f105 030a 	add.w	r3, r5, #10
    f9b4:	f106 010a 	add.w	r1, r6, #10
    f9b8:	f7fd ff89 	bl	d8ce <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    f9bc:	b108      	cbz	r0, f9c2 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xf2>
    f9be:	250b      	movs	r5, #11
    f9c0:	e024      	b.n	fa0c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x13c>
    f9c2:	a801      	add	r0, sp, #4
    f9c4:	f7f1 fa7a 	bl	ebc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    f9c8:	2800      	cmp	r0, #0
    f9ca:	d0e3      	beq.n	f994 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xc4>
    f9cc:	4638      	mov	r0, r7
    f9ce:	f7f3 fc73 	bl	32b8 <sym_VK3LYWW654ZNWB44W7VFNFGOUDPRKIGF72NOIJQ>
    f9d2:	0005      	movs	r5, r0
    f9d4:	d11a      	bne.n	fa0c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x13c>
    f9d6:	f88d 8004 	strb.w	r8, [sp, #4]
    f9da:	7a60      	ldrb	r0, [r4, #9]
    f9dc:	07c0      	lsls	r0, r0, #31
    f9de:	d005      	beq.n	f9ec <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x11c>
    f9e0:	68e0      	ldr	r0, [r4, #12]
    f9e2:	9002      	str	r0, [sp, #8]
    f9e4:	69a0      	ldr	r0, [r4, #24]
    f9e6:	9003      	str	r0, [sp, #12]
    f9e8:	f88d 7004 	strb.w	r7, [sp, #4]
    f9ec:	a801      	add	r0, sp, #4
    f9ee:	f7f4 ffc7 	bl	4980 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ>
    f9f2:	4605      	mov	r5, r0
    f9f4:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
    f9f8:	f7f3 fda0 	bl	353c <sym_2QCSOYKJNF32ZBJORU6CJN7O5NDB7M3GD4LTM7A>
    f9fc:	b935      	cbnz	r5, fa0c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x13c>
    f9fe:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
    fa02:	4630      	mov	r0, r6
    fa04:	f7f4 feae 	bl	4764 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI>
    fa08:	0005      	movs	r5, r0
    fa0a:	d00c      	beq.n	fa26 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x156>
    fa0c:	8830      	ldrh	r0, [r6, #0]
    fa0e:	f7fd ff5a 	bl	d8c6 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    fa12:	8830      	ldrh	r0, [r6, #0]
    fa14:	2100      	movs	r1, #0
    fa16:	f7f1 fa97 	bl	f48 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    fa1a:	b120      	cbz	r0, fa26 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x156>
    fa1c:	f241 1139 	movw	r1, #4409	; 0x1139
    fa20:	2039      	movs	r0, #57	; 0x39
    fa22:	f7f1 f82d 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fa26:	4628      	mov	r0, r5
    fa28:	e764      	b.n	f8f4 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x24>

0000fa2a <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
    fa2a:	b51c      	push	{r2, r3, r4, lr}
    fa2c:	460c      	mov	r4, r1
    fa2e:	4669      	mov	r1, sp
    fa30:	f7fe f85b 	bl	daea <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fa34:	2800      	cmp	r0, #0
    fa36:	d105      	bne.n	fa44 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x1a>
    fa38:	2101      	movs	r1, #1
    fa3a:	4622      	mov	r2, r4
    fa3c:	9801      	ldr	r0, [sp, #4]
    fa3e:	f000 fabc 	bl	ffba <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x33e>
    fa42:	2000      	movs	r0, #0
    fa44:	bd1c      	pop	{r2, r3, r4, pc}

0000fa46 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
    fa46:	b510      	push	{r4, lr}
    fa48:	4604      	mov	r4, r0
    fa4a:	f7f7 fe9f 	bl	778c <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ>
    fa4e:	b118      	cbz	r0, fa58 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x12>
    fa50:	2000      	movs	r0, #0
    fa52:	f000 f940 	bl	fcd6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x5a>
    fa56:	b128      	cbz	r0, fa64 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x1e>
    fa58:	4621      	mov	r1, r4
    fa5a:	2000      	movs	r0, #0
    fa5c:	f7f1 fe08 	bl	1670 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    fa60:	2000      	movs	r0, #0
    fa62:	bd10      	pop	{r4, pc}
    fa64:	200c      	movs	r0, #12
    fa66:	bd10      	pop	{r4, pc}

0000fa68 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
    fa68:	b510      	push	{r4, lr}
    fa6a:	7800      	ldrb	r0, [r0, #0]
    fa6c:	b100      	cbz	r0, fa70 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ+0x8>
    fa6e:	2001      	movs	r0, #1
    fa70:	f7f5 fc0c 	bl	528c <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI>
    fa74:	2000      	movs	r0, #0
    fa76:	bd10      	pop	{r4, pc}

0000fa78 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
    fa78:	f7f7 bdce 	b.w	7618 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x35c>

0000fa7c <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
    fa7c:	b510      	push	{r4, lr}
    fa7e:	4604      	mov	r4, r0
    fa80:	8880      	ldrh	r0, [r0, #4]
    fa82:	b128      	cbz	r0, fa90 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    fa84:	2801      	cmp	r0, #1
    fa86:	d003      	beq.n	fa90 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    fa88:	2802      	cmp	r0, #2
    fa8a:	d001      	beq.n	fa90 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    fa8c:	2012      	movs	r0, #18
    fa8e:	bd10      	pop	{r4, pc}
    fa90:	78e0      	ldrb	r0, [r4, #3]
    fa92:	f000 f92c 	bl	fcee <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x72>
    fa96:	b148      	cbz	r0, faac <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    fa98:	78a0      	ldrb	r0, [r4, #2]
    fa9a:	f000 f928 	bl	fcee <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x72>
    fa9e:	b128      	cbz	r0, faac <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    faa0:	4620      	mov	r0, r4
    faa2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    faa6:	2101      	movs	r1, #1
    faa8:	f000 b862 	b.w	fb70 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    faac:	2011      	movs	r0, #17
    faae:	bd10      	pop	{r4, pc}

0000fab0 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
    fab0:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    fab2:	460c      	mov	r4, r1
    fab4:	4605      	mov	r5, r0
    fab6:	8800      	ldrh	r0, [r0, #0]
    fab8:	4669      	mov	r1, sp
    faba:	f7fe f816 	bl	daea <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fabe:	2800      	cmp	r0, #0
    fac0:	d106      	bne.n	fad0 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
    fac2:	9801      	ldr	r0, [sp, #4]
    fac4:	8829      	ldrh	r1, [r5, #0]
    fac6:	8021      	strh	r1, [r4, #0]
    fac8:	f8b0 00d0 	ldrh.w	r0, [r0, #208]	; 0xd0
    facc:	8060      	strh	r0, [r4, #2]
    face:	2000      	movs	r0, #0
    fad0:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000fad2 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
    fad2:	b510      	push	{r4, lr}
    fad4:	4604      	mov	r4, r0
    fad6:	4601      	mov	r1, r0
    fad8:	2000      	movs	r0, #0
    fada:	f7f1 fdb1 	bl	1640 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    fade:	b910      	cbnz	r0, fae6 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
    fae0:	2000      	movs	r0, #0
    fae2:	6020      	str	r0, [r4, #0]
    fae4:	80a0      	strh	r0, [r4, #4]
    fae6:	2000      	movs	r0, #0
    fae8:	bd10      	pop	{r4, pc}

0000faea <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
    faea:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    faec:	460c      	mov	r4, r1
    faee:	4605      	mov	r5, r0
    faf0:	8800      	ldrh	r0, [r0, #0]
    faf2:	4669      	mov	r1, sp
    faf4:	f7fd fff9 	bl	daea <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    faf8:	b108      	cbz	r0, fafe <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
    fafa:	2002      	movs	r0, #2
    fafc:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    fafe:	78a8      	ldrb	r0, [r5, #2]
    fb00:	b158      	cbz	r0, fb1a <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x30>
    fb02:	f000 fab0 	bl	10066 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3ea>
    fb06:	70a0      	strb	r0, [r4, #2]
    fb08:	8828      	ldrh	r0, [r5, #0]
    fb0a:	8020      	strh	r0, [r4, #0]
    fb0c:	f994 0002 	ldrsb.w	r0, [r4, #2]
    fb10:	f7f2 fdb8 	bl	2684 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    fb14:	70a0      	strb	r0, [r4, #2]
    fb16:	2000      	movs	r0, #0
    fb18:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    fb1a:	9801      	ldr	r0, [sp, #4]
    fb1c:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
    fb20:	e7f1      	b.n	fb06 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1c>

0000fb22 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
    fb22:	b510      	push	{r4, lr}
    fb24:	f7f7 fe38 	bl	7798 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
    fb28:	2000      	movs	r0, #0
    fb2a:	bd10      	pop	{r4, pc}

0000fb2c <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
    fb2c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    fb30:	4604      	mov	r4, r0
    fb32:	8840      	ldrh	r0, [r0, #2]
    fb34:	460d      	mov	r5, r1
    fb36:	b1b8      	cbz	r0, fb68 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3c>
    fb38:	8820      	ldrh	r0, [r4, #0]
    fb3a:	4669      	mov	r1, sp
    fb3c:	f7fd ffd5 	bl	daea <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fb40:	2800      	cmp	r0, #0
    fb42:	d10f      	bne.n	fb64 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>
    fb44:	8820      	ldrh	r0, [r4, #0]
    fb46:	8028      	strh	r0, [r5, #0]
    fb48:	9e01      	ldr	r6, [sp, #4]
    fb4a:	f106 0510 	add.w	r5, r6, #16
    fb4e:	3688      	adds	r6, #136	; 0x88
    fb50:	682f      	ldr	r7, [r5, #0]
    fb52:	8862      	ldrh	r2, [r4, #2]
    fb54:	4639      	mov	r1, r7
    fb56:	4630      	mov	r0, r6
    fb58:	f7fe f939 	bl	ddce <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
    fb5c:	6828      	ldr	r0, [r5, #0]
    fb5e:	42b8      	cmp	r0, r7
    fb60:	d1f6      	bne.n	fb50 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x24>
    fb62:	2000      	movs	r0, #0
    fb64:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    fb68:	2012      	movs	r0, #18
    fb6a:	e7fb      	b.n	fb64 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>

0000fb6c <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
    fb6c:	f000 b886 	b.w	fc7c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

0000fb70 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
    fb70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fb74:	b086      	sub	sp, #24
    fb76:	4689      	mov	r9, r1
    fb78:	4607      	mov	r7, r0
    fb7a:	8800      	ldrh	r0, [r0, #0]
    fb7c:	a901      	add	r1, sp, #4
    fb7e:	f7fd ffb4 	bl	daea <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fb82:	2800      	cmp	r0, #0
    fb84:	d136      	bne.n	fbf4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>
    fb86:	9802      	ldr	r0, [sp, #8]
    fb88:	4601      	mov	r1, r0
    fb8a:	4688      	mov	r8, r1
    fb8c:	f890 119c 	ldrb.w	r1, [r0, #412]	; 0x19c
    fb90:	f500 749c 	add.w	r4, r0, #312	; 0x138
    fb94:	f88d 1000 	strb.w	r1, [sp]
    fb98:	9900      	ldr	r1, [sp, #0]
    fb9a:	9100      	str	r1, [sp, #0]
    fb9c:	f89d 1000 	ldrb.w	r1, [sp]
    fba0:	3088      	adds	r0, #136	; 0x88
    fba2:	b109      	cbz	r1, fba8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x38>
    fba4:	2601      	movs	r6, #1
    fba6:	e000      	b.n	fbaa <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3a>
    fba8:	2600      	movs	r6, #0
    fbaa:	7f81      	ldrb	r1, [r0, #30]
    fbac:	2922      	cmp	r1, #34	; 0x22
    fbae:	d100      	bne.n	fbb2 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x42>
    fbb0:	b13e      	cbz	r6, fbc2 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x52>
    fbb2:	2500      	movs	r5, #0
    fbb4:	306e      	adds	r0, #110	; 0x6e
    fbb6:	2108      	movs	r1, #8
    fbb8:	4682      	mov	sl, r0
    fbba:	f7ff fc8c 	bl	f4d6 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x94>
    fbbe:	b110      	cbz	r0, fbc6 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x56>
    fbc0:	e007      	b.n	fbd2 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x62>
    fbc2:	2501      	movs	r5, #1
    fbc4:	e7f6      	b.n	fbb4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x44>
    fbc6:	210b      	movs	r1, #11
    fbc8:	4650      	mov	r0, sl
    fbca:	f7ff fc84 	bl	f4d6 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x94>
    fbce:	b900      	cbnz	r0, fbd2 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x62>
    fbd0:	b17d      	cbz	r5, fbf2 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x82>
    fbd2:	a804      	add	r0, sp, #16
    fbd4:	9000      	str	r0, [sp, #0]
    fbd6:	f89d 0004 	ldrb.w	r0, [sp, #4]
    fbda:	ab03      	add	r3, sp, #12
    fbdc:	463a      	mov	r2, r7
    fbde:	4641      	mov	r1, r8
    fbe0:	f000 fa21 	bl	10026 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3aa>
    fbe4:	0005      	movs	r5, r0
    fbe6:	d105      	bne.n	fbf4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>
    fbe8:	340c      	adds	r4, #12
    fbea:	20ff      	movs	r0, #255	; 0xff
    fbec:	7060      	strb	r0, [r4, #1]
    fbee:	b936      	cbnz	r6, fbfe <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
    fbf0:	e003      	b.n	fbfa <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8a>
    fbf2:	201a      	movs	r0, #26
    fbf4:	b006      	add	sp, #24
    fbf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    fbfa:	7820      	ldrb	r0, [r4, #0]
    fbfc:	b108      	cbz	r0, fc02 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x92>
    fbfe:	253a      	movs	r5, #58	; 0x3a
    fc00:	e012      	b.n	fc28 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xb8>
    fc02:	f884 9000 	strb.w	r9, [r4]
    fc06:	f89d 000c 	ldrb.w	r0, [sp, #12]
    fc0a:	70a0      	strb	r0, [r4, #2]
    fc0c:	f89d 1010 	ldrb.w	r1, [sp, #16]
    fc10:	70e1      	strb	r1, [r4, #3]
    fc12:	f88d 0000 	strb.w	r0, [sp]
    fc16:	f88d 1001 	strb.w	r1, [sp, #1]
    fc1a:	88b8      	ldrh	r0, [r7, #4]
    fc1c:	f8ad 0002 	strh.w	r0, [sp, #2]
    fc20:	4669      	mov	r1, sp
    fc22:	4640      	mov	r0, r8
    fc24:	f7fe f83b 	bl	dc9e <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    fc28:	2000      	movs	r0, #0
    fc2a:	7060      	strb	r0, [r4, #1]
    fc2c:	4628      	mov	r0, r5
    fc2e:	e7e1      	b.n	fbf4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>

0000fc30 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
    fc30:	2008      	movs	r0, #8
    fc32:	f7f7 be05 	b.w	7840 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>

0000fc36 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>:
    fc36:	b510      	push	{r4, lr}
    fc38:	4604      	mov	r4, r0
    fc3a:	2000      	movs	r0, #0
    fc3c:	8822      	ldrh	r2, [r4, #0]
    fc3e:	b086      	sub	sp, #24
    fc40:	f5a2 417f 	sub.w	r1, r2, #65280	; 0xff00
    fc44:	39ff      	subs	r1, #255	; 0xff
    fc46:	d008      	beq.n	fc5a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x24>
    fc48:	a903      	add	r1, sp, #12
    fc4a:	4610      	mov	r0, r2
    fc4c:	f7fd ff4d 	bl	daea <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fc50:	b110      	cbz	r0, fc58 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x22>
    fc52:	2002      	movs	r0, #2
    fc54:	b006      	add	sp, #24
    fc56:	bd10      	pop	{r4, pc}
    fc58:	9804      	ldr	r0, [sp, #16]
    fc5a:	8921      	ldrh	r1, [r4, #8]
    fc5c:	89a3      	ldrh	r3, [r4, #12]
    fc5e:	8962      	ldrh	r2, [r4, #10]
    fc60:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
    fc64:	88e3      	ldrh	r3, [r4, #6]
    fc66:	88a2      	ldrh	r2, [r4, #4]
    fc68:	8861      	ldrh	r1, [r4, #2]
    fc6a:	f000 f97b 	bl	ff64 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2e8>
    fc6e:	b108      	cbz	r0, fc74 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3e>
    fc70:	2000      	movs	r0, #0
    fc72:	e7ef      	b.n	fc54 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>
    fc74:	2030      	movs	r0, #48	; 0x30
    fc76:	e7ed      	b.n	fc54 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>

0000fc78 <sym_7ZWRNRN6OJ5G7BJWG232R5QOQBW4NK4HJWYOG5A>:
    fc78:	f7f5 bcaa 	b.w	55d0 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY>

0000fc7c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
    fc7c:	b510      	push	{r4, lr}
    fc7e:	f7fd fe55 	bl	d92c <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    fc82:	f7f2 fabf 	bl	2204 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    fc86:	f7f7 fdfd 	bl	7884 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
    fc8a:	f7fe fa7a 	bl	e182 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>
    fc8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fc92:	f7f7 bb8d 	b.w	73b0 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xf4>
    fc96:	f44f 71a4 	mov.w	r1, #328	; 0x148
    fc9a:	4288      	cmp	r0, r1
    fc9c:	d303      	bcc.n	fca6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2a>
    fc9e:	f640 0148 	movw	r1, #2120	; 0x848
    fca2:	4288      	cmp	r0, r1
    fca4:	d300      	bcc.n	fca8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2c>
    fca6:	4608      	mov	r0, r1
    fca8:	b280      	uxth	r0, r0
    fcaa:	4770      	bx	lr
    fcac:	07c1      	lsls	r1, r0, #31
    fcae:	d001      	beq.n	fcb4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x38>
    fcb0:	2001      	movs	r0, #1
    fcb2:	4770      	bx	lr
    fcb4:	0780      	lsls	r0, r0, #30
    fcb6:	d501      	bpl.n	fcbc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x40>
    fcb8:	2002      	movs	r0, #2
    fcba:	4770      	bx	lr
    fcbc:	2000      	movs	r0, #0
    fcbe:	4770      	bx	lr
    fcc0:	b510      	push	{r4, lr}
    fcc2:	2801      	cmp	r0, #1
    fcc4:	d006      	beq.n	fcd4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x58>
    fcc6:	2802      	cmp	r0, #2
    fcc8:	d004      	beq.n	fcd4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x58>
    fcca:	f44f 7136 	mov.w	r1, #728	; 0x2d8
    fcce:	2006      	movs	r0, #6
    fcd0:	f7f0 fed6 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fcd4:	bd10      	pop	{r4, pc}
    fcd6:	b510      	push	{r4, lr}
    fcd8:	f000 f9de 	bl	10098 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x41c>
    fcdc:	b128      	cbz	r0, fcea <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x6e>
    fcde:	f7f3 fc89 	bl	35f4 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>
    fce2:	2801      	cmp	r0, #1
    fce4:	d001      	beq.n	fcea <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x6e>
    fce6:	2000      	movs	r0, #0
    fce8:	bd10      	pop	{r4, pc}
    fcea:	2001      	movs	r0, #1
    fcec:	bd10      	pop	{r4, pc}
    fcee:	b510      	push	{r4, lr}
    fcf0:	0004      	movs	r4, r0
    fcf2:	d005      	beq.n	fd00 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x84>
    fcf4:	f7f7 fdb6 	bl	7864 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    fcf8:	4384      	bics	r4, r0
    fcfa:	d001      	beq.n	fd00 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x84>
    fcfc:	2000      	movs	r0, #0
    fcfe:	bd10      	pop	{r4, pc}
    fd00:	2001      	movs	r0, #1
    fd02:	bd10      	pop	{r4, pc}
    fd04:	28fb      	cmp	r0, #251	; 0xfb
    fd06:	d803      	bhi.n	fd10 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x94>
    fd08:	f640 0048 	movw	r0, #2120	; 0x848
    fd0c:	4281      	cmp	r1, r0
    fd0e:	d901      	bls.n	fd14 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x98>
    fd10:	2011      	movs	r0, #17
    fd12:	4770      	bx	lr
    fd14:	2000      	movs	r0, #0
    fd16:	4770      	bx	lr
    fd18:	381b      	subs	r0, #27
    fd1a:	28e1      	cmp	r0, #225	; 0xe1
    fd1c:	d206      	bcs.n	fd2c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb0>
    fd1e:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
    fd22:	d303      	bcc.n	fd2c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb0>
    fd24:	f244 2090 	movw	r0, #17040	; 0x4290
    fd28:	4281      	cmp	r1, r0
    fd2a:	d901      	bls.n	fd30 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb4>
    fd2c:	2012      	movs	r0, #18
    fd2e:	4770      	bx	lr
    fd30:	2000      	movs	r0, #0
    fd32:	4770      	bx	lr
    fd34:	b510      	push	{r4, lr}
    fd36:	4604      	mov	r4, r0
    fd38:	7800      	ldrb	r0, [r0, #0]
    fd3a:	2801      	cmp	r0, #1
    fd3c:	d009      	beq.n	fd52 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xd6>
    fd3e:	f7f4 fdcd 	bl	48dc <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
    fd42:	2805      	cmp	r0, #5
    fd44:	d003      	beq.n	fd4e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xd2>
    fd46:	f7f4 fd91 	bl	486c <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>
    fd4a:	2800      	cmp	r0, #0
    fd4c:	d000      	beq.n	fd50 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xd4>
    fd4e:	200c      	movs	r0, #12
    fd50:	bd10      	pop	{r4, pc}
    fd52:	f7f3 fc1d 	bl	3590 <sym_FLBXO3C2TGTXVEYELOG5B33ZBUVUNXUU6YZL7TY>
    fd56:	b108      	cbz	r0, fd5c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xe0>
    fd58:	203a      	movs	r0, #58	; 0x3a
    fd5a:	bd10      	pop	{r4, pc}
    fd5c:	f7f3 fbd2 	bl	3504 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ>
    fd60:	b138      	cbz	r0, fd72 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xf6>
    fd62:	f7f3 fa45 	bl	31f0 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>
    fd66:	88a1      	ldrh	r1, [r4, #4]
    fd68:	8860      	ldrh	r0, [r4, #2]
    fd6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fd6e:	f7f4 bd43 	b.w	47f8 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA>
    fd72:	2012      	movs	r0, #18
    fd74:	bd10      	pop	{r4, pc}
    fd76:	7802      	ldrb	r2, [r0, #0]
    fd78:	2a01      	cmp	r2, #1
    fd7a:	d001      	beq.n	fd80 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x104>
    fd7c:	b1ba      	cbz	r2, fdae <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x132>
    fd7e:	e018      	b.n	fdb2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x136>
    fd80:	7842      	ldrb	r2, [r0, #1]
    fd82:	b13a      	cbz	r2, fd94 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x118>
    fd84:	2a01      	cmp	r2, #1
    fd86:	d005      	beq.n	fd94 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x118>
    fd88:	2a02      	cmp	r2, #2
    fd8a:	d112      	bne.n	fdb2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x136>
    fd8c:	b189      	cbz	r1, fdb2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x136>
    fd8e:	8881      	ldrh	r1, [r0, #4]
    fd90:	b179      	cbz	r1, fdb2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x136>
    fd92:	e000      	b.n	fd96 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x11a>
    fd94:	b159      	cbz	r1, fdae <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x132>
    fd96:	8841      	ldrh	r1, [r0, #2]
    fd98:	b149      	cbz	r1, fdae <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x132>
    fd9a:	8880      	ldrh	r0, [r0, #4]
    fd9c:	b138      	cbz	r0, fdae <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x132>
    fd9e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    fda2:	0049      	lsls	r1, r1, #1
    fda4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    fda8:	ebb1 2f00 	cmp.w	r1, r0, lsl #8
    fdac:	d201      	bcs.n	fdb2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x136>
    fdae:	2000      	movs	r0, #0
    fdb0:	4770      	bx	lr
    fdb2:	2012      	movs	r0, #18
    fdb4:	4770      	bx	lr
    fdb6:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    fdba:	7a45      	ldrb	r5, [r0, #9]
    fdbc:	4604      	mov	r4, r0
    fdbe:	0768      	lsls	r0, r5, #29
    fdc0:	d06c      	beq.n	fe9c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
    fdc2:	08e8      	lsrs	r0, r5, #3
    fdc4:	d16a      	bne.n	fe9c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
    fdc6:	2d02      	cmp	r5, #2
    fdc8:	d068      	beq.n	fe9c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
    fdca:	f7f7 fd4b 	bl	7864 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    fdce:	ea25 0000 	bic.w	r0, r5, r0
    fdd2:	0740      	lsls	r0, r0, #29
    fdd4:	d102      	bne.n	fddc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x160>
    fdd6:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    fdda:	b110      	cbz	r0, fde2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x166>
    fddc:	2011      	movs	r0, #17
    fdde:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    fde2:	2d01      	cmp	r5, #1
    fde4:	d15a      	bne.n	fe9c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
    fde6:	27ff      	movs	r7, #255	; 0xff
    fde8:	2101      	movs	r1, #1
    fdea:	69a0      	ldr	r0, [r4, #24]
    fdec:	f7f7 fbfe 	bl	75ec <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x330>
    fdf0:	b3e8      	cbz	r0, fe6e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1f2>
    fdf2:	46a8      	mov	r8, r5
    fdf4:	2600      	movs	r6, #0
    fdf6:	4635      	mov	r5, r6
    fdf8:	42bd      	cmp	r5, r7
    fdfa:	d02f      	beq.n	fe5c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1e0>
    fdfc:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    fe00:	6988      	ldr	r0, [r1, #24]
    fe02:	68c9      	ldr	r1, [r1, #12]
    fe04:	4288      	cmp	r0, r1
    fe06:	d849      	bhi.n	fe9c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
    fe08:	4406      	add	r6, r0
    fe0a:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    fe0e:	4681      	mov	r9, r0
    fe10:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
    fe12:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
    fe16:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
    fe18:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
    fe1c:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    fe1e:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
    fe20:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    fe22:	2000      	movs	r0, #0
    fe24:	f000 f89e 	bl	ff64 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2e8>
    fe28:	b308      	cbz	r0, fe6e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1f2>
    fe2a:	b1bd      	cbz	r5, fe5c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1e0>
    fe2c:	f8b9 1024 	ldrh.w	r1, [r9, #36]	; 0x24
    fe30:	f8b9 0022 	ldrh.w	r0, [r9, #34]	; 0x22
    fe34:	4281      	cmp	r1, r0
    fe36:	d131      	bne.n	fe9c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
    fe38:	f8b9 102a 	ldrh.w	r1, [r9, #42]	; 0x2a
    fe3c:	f8b9 0028 	ldrh.w	r0, [r9, #40]	; 0x28
    fe40:	4281      	cmp	r1, r0
    fe42:	d12b      	bne.n	fe9c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
    fe44:	f8b9 1030 	ldrh.w	r1, [r9, #48]	; 0x30
    fe48:	f8b9 002e 	ldrh.w	r0, [r9, #46]	; 0x2e
    fe4c:	4281      	cmp	r1, r0
    fe4e:	d125      	bne.n	fe9c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
    fe50:	f8b9 1036 	ldrh.w	r1, [r9, #54]	; 0x36
    fe54:	f8b9 0034 	ldrh.w	r0, [r9, #52]	; 0x34
    fe58:	4281      	cmp	r1, r0
    fe5a:	d11f      	bne.n	fe9c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
    fe5c:	1c6d      	adds	r5, r5, #1
    fe5e:	b2ed      	uxtb	r5, r5
    fe60:	4545      	cmp	r5, r8
    fe62:	d3c9      	bcc.n	fdf8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x17c>
    fe64:	68e0      	ldr	r0, [r4, #12]
    fe66:	42b0      	cmp	r0, r6
    fe68:	d318      	bcc.n	fe9c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
    fe6a:	7820      	ldrb	r0, [r4, #0]
    fe6c:	e000      	b.n	fe70 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1f4>
    fe6e:	e003      	b.n	fe78 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1fc>
    fe70:	b120      	cbz	r0, fe7c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x200>
    fe72:	2801      	cmp	r0, #1
    fe74:	d112      	bne.n	fe9c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
    fe76:	e004      	b.n	fe82 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x206>
    fe78:	2030      	movs	r0, #48	; 0x30
    fe7a:	e7b0      	b.n	fdde <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x162>
    fe7c:	78a0      	ldrb	r0, [r4, #2]
    fe7e:	2800      	cmp	r0, #0
    fe80:	d1f7      	bne.n	fe72 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1f6>
    fe82:	7860      	ldrb	r0, [r4, #1]
    fe84:	b128      	cbz	r0, fe92 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x216>
    fe86:	2801      	cmp	r0, #1
    fe88:	d003      	beq.n	fe92 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x216>
    fe8a:	2802      	cmp	r0, #2
    fe8c:	d001      	beq.n	fe92 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x216>
    fe8e:	2803      	cmp	r0, #3
    fe90:	d104      	bne.n	fe9c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
    fe92:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
    fe96:	b108      	cbz	r0, fe9c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
    fe98:	2807      	cmp	r0, #7
    fe9a:	d901      	bls.n	fea0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x224>
    fe9c:	2012      	movs	r0, #18
    fe9e:	e79e      	b.n	fdde <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x162>
    fea0:	2000      	movs	r0, #0
    fea2:	e79c      	b.n	fdde <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x162>
    fea4:	b570      	push	{r4, r5, r6, lr}
    fea6:	4604      	mov	r4, r0
    fea8:	7800      	ldrb	r0, [r0, #0]
    feaa:	2500      	movs	r5, #0
    feac:	2801      	cmp	r0, #1
    feae:	d004      	beq.n	feba <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x23e>
    feb0:	b118      	cbz	r0, feba <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x23e>
    feb2:	2802      	cmp	r0, #2
    feb4:	d001      	beq.n	feba <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x23e>
    feb6:	2803      	cmp	r0, #3
    feb8:	d139      	bne.n	ff2e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2b2>
    feba:	7860      	ldrb	r0, [r4, #1]
    febc:	b128      	cbz	r0, feca <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x24e>
    febe:	2801      	cmp	r0, #1
    fec0:	d003      	beq.n	feca <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x24e>
    fec2:	2802      	cmp	r0, #2
    fec4:	d001      	beq.n	feca <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x24e>
    fec6:	2803      	cmp	r0, #3
    fec8:	d131      	bne.n	ff2e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2b2>
    feca:	7e60      	ldrb	r0, [r4, #25]
    fecc:	b948      	cbnz	r0, fee2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x266>
    fece:	78a0      	ldrb	r0, [r4, #2]
    fed0:	2801      	cmp	r0, #1
    fed2:	d12c      	bne.n	ff2e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2b2>
    fed4:	f7f7 fcc6 	bl	7864 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    fed8:	4601      	mov	r1, r0
    feda:	78a0      	ldrb	r0, [r4, #2]
    fedc:	ea30 0101 	bics.w	r1, r0, r1
    fee0:	d001      	beq.n	fee6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x26a>
    fee2:	2011      	movs	r0, #17
    fee4:	bd70      	pop	{r4, r5, r6, pc}
    fee6:	07c0      	lsls	r0, r0, #31
    fee8:	d006      	beq.n	fef8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x27c>
    feea:	78e0      	ldrb	r0, [r4, #3]
    feec:	2301      	movs	r3, #1
    feee:	6922      	ldr	r2, [r4, #16]
    fef0:	68a1      	ldr	r1, [r4, #8]
    fef2:	f000 f820 	bl	ff36 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2ba>
    fef6:	4605      	mov	r5, r0
    fef8:	78a0      	ldrb	r0, [r4, #2]
    fefa:	0780      	lsls	r0, r0, #30
    fefc:	d506      	bpl.n	ff0c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x290>
    fefe:	78e0      	ldrb	r0, [r4, #3]
    ff00:	2302      	movs	r3, #2
    ff02:	6922      	ldr	r2, [r4, #16]
    ff04:	68a1      	ldr	r1, [r4, #8]
    ff06:	f000 f816 	bl	ff36 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2ba>
    ff0a:	4305      	orrs	r5, r0
    ff0c:	78a0      	ldrb	r0, [r4, #2]
    ff0e:	0740      	lsls	r0, r0, #29
    ff10:	d506      	bpl.n	ff20 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2a4>
    ff12:	78e0      	ldrb	r0, [r4, #3]
    ff14:	2304      	movs	r3, #4
    ff16:	6922      	ldr	r2, [r4, #16]
    ff18:	68a1      	ldr	r1, [r4, #8]
    ff1a:	f000 f80c 	bl	ff36 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2ba>
    ff1e:	4305      	orrs	r5, r0
    ff20:	b10d      	cbz	r5, ff26 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2aa>
    ff22:	4628      	mov	r0, r5
    ff24:	bd70      	pop	{r4, r5, r6, pc}
    ff26:	7e20      	ldrb	r0, [r4, #24]
    ff28:	b108      	cbz	r0, ff2e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2b2>
    ff2a:	2807      	cmp	r0, #7
    ff2c:	d901      	bls.n	ff32 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2b6>
    ff2e:	2012      	movs	r0, #18
    ff30:	bd70      	pop	{r4, r5, r6, pc}
    ff32:	2000      	movs	r0, #0
    ff34:	bd70      	pop	{r4, r5, r6, pc}
    ff36:	b570      	push	{r4, r5, r6, lr}
    ff38:	4614      	mov	r4, r2
    ff3a:	460d      	mov	r5, r1
    ff3c:	b108      	cbz	r0, ff42 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2c6>
    ff3e:	2801      	cmp	r0, #1
    ff40:	d10a      	bne.n	ff58 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2dc>
    ff42:	4619      	mov	r1, r3
    ff44:	4610      	mov	r0, r2
    ff46:	f7f7 fb51 	bl	75ec <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x330>
    ff4a:	b138      	cbz	r0, ff5c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2e0>
    ff4c:	4628      	mov	r0, r5
    ff4e:	f7f7 fa51 	bl	73f4 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x138>
    ff52:	b118      	cbz	r0, ff5c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2e0>
    ff54:	42ac      	cmp	r4, r5
    ff56:	d903      	bls.n	ff60 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2e4>
    ff58:	2012      	movs	r0, #18
    ff5a:	bd70      	pop	{r4, r5, r6, pc}
    ff5c:	2030      	movs	r0, #48	; 0x30
    ff5e:	bd70      	pop	{r4, r5, r6, pc}
    ff60:	2000      	movs	r0, #0
    ff62:	bd70      	pop	{r4, r5, r6, pc}
    ff64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ff68:	461d      	mov	r5, r3
    ff6a:	4610      	mov	r0, r2
    ff6c:	e9dd 4706 	ldrd	r4, r7, [sp, #24]
    ff70:	1f8b      	subs	r3, r1, #6
    ff72:	f640 427a 	movw	r2, #3194	; 0xc7a
    ff76:	9e08      	ldr	r6, [sp, #32]
    ff78:	4293      	cmp	r3, r2
    ff7a:	d81c      	bhi.n	ffb6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x33a>
    ff7c:	1f83      	subs	r3, r0, #6
    ff7e:	4293      	cmp	r3, r2
    ff80:	d819      	bhi.n	ffb6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x33a>
    ff82:	4281      	cmp	r1, r0
    ff84:	d817      	bhi.n	ffb6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x33a>
    ff86:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    ff8a:	d214      	bcs.n	ffb6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x33a>
    ff8c:	f1a4 010a 	sub.w	r1, r4, #10
    ff90:	1f12      	subs	r2, r2, #4
    ff92:	4291      	cmp	r1, r2
    ff94:	d80f      	bhi.n	ffb6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x33a>
    ff96:	f7fd fdb4 	bl	db02 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    ff9a:	1c6d      	adds	r5, r5, #1
    ff9c:	4368      	muls	r0, r5
    ff9e:	f240 2171 	movw	r1, #625	; 0x271
    ffa2:	0040      	lsls	r0, r0, #1
    ffa4:	434c      	muls	r4, r1
    ffa6:	ebb0 1f04 	cmp.w	r0, r4, lsl #4
    ffaa:	d204      	bcs.n	ffb6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x33a>
    ffac:	42b7      	cmp	r7, r6
    ffae:	d802      	bhi.n	ffb6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x33a>
    ffb0:	2001      	movs	r0, #1
    ffb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ffb6:	2000      	movs	r0, #0
    ffb8:	e7fb      	b.n	ffb2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x336>
    ffba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ffbe:	4606      	mov	r6, r0
    ffc0:	f8b0 7052 	ldrh.w	r7, [r0, #82]	; 0x52
    ffc4:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
    ffc8:	4615      	mov	r5, r2
    ffca:	302c      	adds	r0, #44	; 0x2c
    ffcc:	f7f5 f964 	bl	5298 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI>
    ffd0:	4680      	mov	r8, r0
    ffd2:	2102      	movs	r1, #2
    ffd4:	f7fd fe33 	bl	dc3e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    ffd8:	4287      	cmp	r7, r0
    ffda:	d200      	bcs.n	ffde <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x362>
    ffdc:	4638      	mov	r0, r7
    ffde:	4607      	mov	r7, r0
    ffe0:	2102      	movs	r1, #2
    ffe2:	4640      	mov	r0, r8
    ffe4:	f7fd fe2b 	bl	dc3e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    ffe8:	4284      	cmp	r4, r0
    ffea:	d200      	bcs.n	ffee <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x372>
    ffec:	4620      	mov	r0, r4
    ffee:	8831      	ldrh	r1, [r6, #0]
    fff0:	8029      	strh	r1, [r5, #0]
    fff2:	2f1b      	cmp	r7, #27
    fff4:	d913      	bls.n	1001e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3a2>
    fff6:	2ffb      	cmp	r7, #251	; 0xfb
    fff8:	d300      	bcc.n	fffc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x380>
    fffa:	27fb      	movs	r7, #251	; 0xfb
    fffc:	806f      	strh	r7, [r5, #2]
    fffe:	281b      	cmp	r0, #27
   10000:	d90f      	bls.n	10022 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3a6>
   10002:	28fb      	cmp	r0, #251	; 0xfb
   10004:	d300      	bcc.n	10008 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x38c>
   10006:	20fb      	movs	r0, #251	; 0xfb
   10008:	80e8      	strh	r0, [r5, #6]
   1000a:	4640      	mov	r0, r8
   1000c:	f7ff fe43 	bl	fc96 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1a>
   10010:	80a8      	strh	r0, [r5, #4]
   10012:	4640      	mov	r0, r8
   10014:	f7ff fe3f 	bl	fc96 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1a>
   10018:	8128      	strh	r0, [r5, #8]
   1001a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1001e:	271b      	movs	r7, #27
   10020:	e7ec      	b.n	fffc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x380>
   10022:	201b      	movs	r0, #27
   10024:	e7f0      	b.n	10008 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x38c>
   10026:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1002a:	7890      	ldrb	r0, [r2, #2]
   1002c:	9e06      	ldr	r6, [sp, #24]
   1002e:	461d      	mov	r5, r3
   10030:	4614      	mov	r4, r2
   10032:	b908      	cbnz	r0, 10038 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3bc>
   10034:	f7f7 fc16 	bl	7864 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   10038:	78e4      	ldrb	r4, [r4, #3]
   1003a:	4607      	mov	r7, r0
   1003c:	b914      	cbnz	r4, 10044 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3c8>
   1003e:	f7f7 fc11 	bl	7864 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   10042:	4604      	mov	r4, r0
   10044:	b16f      	cbz	r7, 10062 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3e6>
   10046:	b164      	cbz	r4, 10062 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3e6>
   10048:	4638      	mov	r0, r7
   1004a:	f7ff fe2f 	bl	fcac <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x30>
   1004e:	4620      	mov	r0, r4
   10050:	f7ff fe2c 	bl	fcac <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x30>
   10054:	b12f      	cbz	r7, 10062 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3e6>
   10056:	b124      	cbz	r4, 10062 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3e6>
   10058:	702f      	strb	r7, [r5, #0]
   1005a:	7034      	strb	r4, [r6, #0]
   1005c:	2000      	movs	r0, #0
   1005e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10062:	2009      	movs	r0, #9
   10064:	e7fb      	b.n	1005e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3e2>
   10066:	207f      	movs	r0, #127	; 0x7f
   10068:	f000 b821 	b.w	100ae <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x432>
   1006c:	b508      	push	{r3, lr}
   1006e:	f890 1248 	ldrb.w	r1, [r0, #584]	; 0x248
   10072:	f890 00c4 	ldrb.w	r0, [r0, #196]	; 0xc4
   10076:	f88d 0000 	strb.w	r0, [sp]
   1007a:	9800      	ldr	r0, [sp, #0]
   1007c:	9000      	str	r0, [sp, #0]
   1007e:	f89d 0000 	ldrb.w	r0, [sp]
   10082:	b100      	cbz	r0, 10086 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x40a>
   10084:	2001      	movs	r0, #1
   10086:	1e40      	subs	r0, r0, #1
   10088:	4208      	tst	r0, r1
   1008a:	d003      	beq.n	10094 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x418>
   1008c:	2904      	cmp	r1, #4
   1008e:	d001      	beq.n	10094 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x418>
   10090:	2001      	movs	r0, #1
   10092:	bd08      	pop	{r3, pc}
   10094:	2000      	movs	r0, #0
   10096:	bd08      	pop	{r3, pc}
   10098:	b510      	push	{r4, lr}
   1009a:	f7f4 fc1f 	bl	48dc <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
   1009e:	2804      	cmp	r0, #4
   100a0:	d003      	beq.n	100aa <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x42e>
   100a2:	2805      	cmp	r0, #5
   100a4:	d001      	beq.n	100aa <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x42e>
   100a6:	2000      	movs	r0, #0
   100a8:	bd10      	pop	{r4, pc}
   100aa:	2001      	movs	r0, #1
   100ac:	bd10      	pop	{r4, pc}
   100ae:	b508      	push	{r3, lr}
   100b0:	f640 1288 	movw	r2, #2440	; 0x988
   100b4:	2300      	movs	r3, #0
   100b6:	4669      	mov	r1, sp
   100b8:	f7fc fb2e 	bl	c718 <mpsl_fem_tx_power_split>
   100bc:	bd08      	pop	{r3, pc}
   100be:	b530      	push	{r4, r5, lr}
   100c0:	f340 0400 	sbfx	r4, r0, #0, #1
   100c4:	f340 0040 	sbfx	r0, r0, #1, #1
   100c8:	1c40      	adds	r0, r0, #1
   100ca:	9d03      	ldr	r5, [sp, #12]
   100cc:	1c64      	adds	r4, r4, #1
   100ce:	d000      	beq.n	100d2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x456>
   100d0:	b119      	cbz	r1, 100da <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x45e>
   100d2:	b100      	cbz	r0, 100d6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x45a>
   100d4:	b10a      	cbz	r2, 100da <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x45e>
   100d6:	b91c      	cbnz	r4, 100e0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x464>
   100d8:	e001      	b.n	100de <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x462>
   100da:	2011      	movs	r0, #17
   100dc:	bd30      	pop	{r4, r5, pc}
   100de:	2100      	movs	r1, #0
   100e0:	7019      	strb	r1, [r3, #0]
   100e2:	b900      	cbnz	r0, 100e6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x46a>
   100e4:	2200      	movs	r2, #0
   100e6:	702a      	strb	r2, [r5, #0]
   100e8:	2000      	movs	r0, #0
   100ea:	bd30      	pop	{r4, r5, pc}
   100ec:	b510      	push	{r4, lr}
   100ee:	f7ff ffd3 	bl	10098 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x41c>
   100f2:	b120      	cbz	r0, 100fe <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x482>
   100f4:	f7f3 fa86 	bl	3604 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>
   100f8:	b108      	cbz	r0, 100fe <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x482>
   100fa:	2001      	movs	r0, #1
   100fc:	bd10      	pop	{r4, pc}
   100fe:	2000      	movs	r0, #0
   10100:	bd10      	pop	{r4, pc}
   10102:	6802      	ldr	r2, [r0, #0]
   10104:	b912      	cbnz	r2, 1010c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x490>
   10106:	6001      	str	r1, [r0, #0]
   10108:	4770      	bx	lr
   1010a:	4602      	mov	r2, r0
   1010c:	6850      	ldr	r0, [r2, #4]
   1010e:	b108      	cbz	r0, 10114 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x498>
   10110:	428a      	cmp	r2, r1
   10112:	d1fa      	bne.n	1010a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x48e>
   10114:	428a      	cmp	r2, r1
   10116:	d0f7      	beq.n	10108 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x48c>
   10118:	6051      	str	r1, [r2, #4]
   1011a:	4770      	bx	lr
   1011c:	b510      	push	{r4, lr}
   1011e:	4604      	mov	r4, r0
   10120:	e002      	b.n	10128 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4ac>
   10122:	6820      	ldr	r0, [r4, #0]
   10124:	4780      	blx	r0
   10126:	6864      	ldr	r4, [r4, #4]
   10128:	2c00      	cmp	r4, #0
   1012a:	d1fa      	bne.n	10122 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4a6>
   1012c:	bd10      	pop	{r4, pc}
   1012e:	b510      	push	{r4, lr}
   10130:	2000      	movs	r0, #0
   10132:	f7fd fb28 	bl	d786 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   10136:	f7f1 f85b 	bl	11f0 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
   1013a:	f7f1 fa63 	bl	1604 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
   1013e:	f7f1 fbf1 	bl	1924 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
   10142:	2800      	cmp	r0, #0
   10144:	d003      	beq.n	1014e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4d2>
   10146:	21df      	movs	r1, #223	; 0xdf
   10148:	2001      	movs	r0, #1
   1014a:	f7f0 fc99 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1014e:	bd10      	pop	{r4, pc}
   10150:	b510      	push	{r4, lr}
   10152:	f000 f80a 	bl	1016a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4ee>
   10156:	f7fe fe6f 	bl	ee38 <sym_VJEPN3SDR5AQAFQ3NEQBRQ5LOSN3JDHOXS2M77A>
   1015a:	2800      	cmp	r0, #0
   1015c:	d004      	beq.n	10168 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4ec>
   1015e:	f240 1161 	movw	r1, #353	; 0x161
   10162:	2001      	movs	r0, #1
   10164:	f7f0 fc8c 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10168:	bd10      	pop	{r4, pc}
   1016a:	b510      	push	{r4, lr}
   1016c:	f7f4 fbfe 	bl	496c <sym_CEIRMF45E42FC47RKIFGTU36Z7XGQCJUDSF57LQ>
   10170:	b110      	cbz	r0, 10178 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4fc>
   10172:	f240 113b 	movw	r1, #315	; 0x13b
   10176:	e004      	b.n	10182 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x506>
   10178:	f7fe fd4a 	bl	ec10 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY>
   1017c:	b120      	cbz	r0, 10188 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x50c>
   1017e:	f44f 719e 	mov.w	r1, #316	; 0x13c
   10182:	2001      	movs	r0, #1
   10184:	f7f0 fc7c 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10188:	f7f7 f84e 	bl	7228 <sym_UY577SX5HIKP7SN7G6RHWTFDXAXFXXF32S4VJUA>
   1018c:	f7f3 f984 	bl	3498 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>
   10190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10194:	f7f6 beaa 	b.w	6eec <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ>
   10198:	000b0001 	.word	0x000b0001
   1019c:	000a0002 	.word	0x000a0002
   101a0:	00090005 	.word	0x00090005
   101a4:	0008000a 	.word	0x0008000a
   101a8:	00070014 	.word	0x00070014
   101ac:	0006001e 	.word	0x0006001e
   101b0:	00050032 	.word	0x00050032
   101b4:	0004004b 	.word	0x0004004b
   101b8:	00030064 	.word	0x00030064
   101bc:	00020096 	.word	0x00020096
   101c0:	000100fa 	.word	0x000100fa
   101c4:	000001f4 	.word	0x000001f4

000101c8 <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA>:
   101c8:	b518      	push	{r3, r4, lr}
   101ca:	2200      	movs	r2, #0
   101cc:	704a      	strb	r2, [r1, #1]
   101ce:	2317      	movs	r3, #23
   101d0:	700b      	strb	r3, [r1, #0]
   101d2:	7202      	strb	r2, [r0, #8]
   101d4:	f8d0 400a 	ldr.w	r4, [r0, #10]
   101d8:	604c      	str	r4, [r1, #4]
   101da:	89c3      	ldrh	r3, [r0, #14]
   101dc:	810b      	strh	r3, [r1, #8]
   101de:	7a03      	ldrb	r3, [r0, #8]
   101e0:	f88d 3000 	strb.w	r3, [sp]
   101e4:	9b00      	ldr	r3, [sp, #0]
   101e6:	9300      	str	r3, [sp, #0]
   101e8:	f89d 3000 	ldrb.w	r3, [sp]
   101ec:	2b00      	cmp	r3, #0
   101ee:	d1f0      	bne.n	101d2 <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA+0xa>
   101f0:	bd18      	pop	{r3, r4, pc}

000101f2 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY>:
   101f2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   101f4:	460d      	mov	r5, r1
   101f6:	4604      	mov	r4, r0
   101f8:	f7f2 fb36 	bl	2868 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>
   101fc:	2600      	movs	r6, #0
   101fe:	b1f8      	cbz	r0, 10240 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x4e>
   10200:	f5a4 70ca 	sub.w	r0, r4, #404	; 0x194
   10204:	7226      	strb	r6, [r4, #8]
   10206:	8800      	ldrh	r0, [r0, #0]
   10208:	f8ad 0000 	strh.w	r0, [sp]
   1020c:	a902      	add	r1, sp, #8
   1020e:	f7fd fc6c 	bl	daea <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10212:	b108      	cbz	r0, 10218 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x26>
   10214:	2124      	movs	r1, #36	; 0x24
   10216:	e010      	b.n	1023a <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x48>
   10218:	9803      	ldr	r0, [sp, #12]
   1021a:	f810 1f66 	ldrb.w	r1, [r0, #102]!
   1021e:	f88d 1002 	strb.w	r1, [sp, #2]
   10222:	7841      	ldrb	r1, [r0, #1]
   10224:	f88d 1003 	strb.w	r1, [sp, #3]
   10228:	8840      	ldrh	r0, [r0, #2]
   1022a:	f8ad 0004 	strh.w	r0, [sp, #4]
   1022e:	2102      	movs	r1, #2
   10230:	4668      	mov	r0, sp
   10232:	f7ff fc9d 	bl	fb70 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
   10236:	b118      	cbz	r0, 10240 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x4e>
   10238:	213a      	movs	r1, #58	; 0x3a
   1023a:	207e      	movs	r0, #126	; 0x7e
   1023c:	f7f0 fc20 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10240:	2020      	movs	r0, #32
   10242:	7028      	strb	r0, [r5, #0]
   10244:	706e      	strb	r6, [r5, #1]
   10246:	f8d4 000a 	ldr.w	r0, [r4, #10]
   1024a:	6068      	str	r0, [r5, #4]
   1024c:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}

0001024e <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
   1024e:	b510      	push	{r4, lr}
   10250:	f7f7 fe68 	bl	7f24 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
   10254:	f000 f81d 	bl	10292 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
   10258:	f7f7 fb80 	bl	795c <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
   1025c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10260:	f7f7 bc7a 	b.w	7b58 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

00010264 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
   10264:	b510      	push	{r4, lr}
   10266:	24c8      	movs	r4, #200	; 0xc8
   10268:	1e64      	subs	r4, r4, #1
   1026a:	b2e4      	uxtb	r4, r4
   1026c:	f7f7 fb94 	bl	7998 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
   10270:	2802      	cmp	r0, #2
   10272:	d003      	beq.n	1027c <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
   10274:	2801      	cmp	r0, #1
   10276:	d000      	beq.n	1027a <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
   10278:	2000      	movs	r0, #0
   1027a:	bd10      	pop	{r4, pc}
   1027c:	2c00      	cmp	r4, #0
   1027e:	d1f3      	bne.n	10268 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
   10280:	21ca      	movs	r1, #202	; 0xca
   10282:	203b      	movs	r0, #59	; 0x3b
   10284:	f7f0 fbfc 	bl	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10288:	5840      	ldr	r0, [r0, r1]
   1028a:	2800      	cmp	r0, #0
   1028c:	d000      	beq.n	10290 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x2c>
   1028e:	2001      	movs	r0, #1
   10290:	4770      	bx	lr

00010292 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
   10292:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   10296:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1029a:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
   1029e:	f3bf 8f4f 	dsb	sy
   102a2:	f3bf 8f6f 	isb	sy
   102a6:	f7f7 bcf1 	b.w	7c8c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
   102aa:	2800      	cmp	r0, #0
   102ac:	db09      	blt.n	102c2 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
   102ae:	f000 021f 	and.w	r2, r0, #31
   102b2:	2101      	movs	r1, #1
   102b4:	4091      	lsls	r1, r2
   102b6:	0940      	lsrs	r0, r0, #5
   102b8:	0080      	lsls	r0, r0, #2
   102ba:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   102be:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   102c2:	4770      	bx	lr
   102c4:	2800      	cmp	r0, #0
   102c6:	db0d      	blt.n	102e4 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
   102c8:	f000 021f 	and.w	r2, r0, #31
   102cc:	2101      	movs	r1, #1
   102ce:	4091      	lsls	r1, r2
   102d0:	0940      	lsrs	r0, r0, #5
   102d2:	0080      	lsls	r0, r0, #2
   102d4:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   102d8:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   102dc:	f3bf 8f4f 	dsb	sy
   102e0:	f3bf 8f6f 	isb	sy
   102e4:	4770      	bx	lr
   102e6:	5840      	ldr	r0, [r0, r1]
   102e8:	2800      	cmp	r0, #0
   102ea:	d000      	beq.n	102ee <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5c>
   102ec:	2001      	movs	r0, #1
   102ee:	4770      	bx	lr
   102f0:	5840      	ldr	r0, [r0, r1]
   102f2:	2800      	cmp	r0, #0
   102f4:	d000      	beq.n	102f8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x66>
   102f6:	2001      	movs	r0, #1
   102f8:	4770      	bx	lr

000102fa <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
   102fa:	b510      	push	{r4, lr}
   102fc:	4604      	mov	r4, r0
   102fe:	4608      	mov	r0, r1
   10300:	f7f7 ff30 	bl	8164 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10304:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   10308:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   1030c:	fbb0 f0f1 	udiv	r0, r0, r1
   10310:	1a20      	subs	r0, r4, r0
   10312:	1e80      	subs	r0, r0, #2
   10314:	bd10      	pop	{r4, pc}

00010316 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
   10316:	b510      	push	{r4, lr}
   10318:	4604      	mov	r4, r0
   1031a:	4608      	mov	r0, r1
   1031c:	f7f7 ff22 	bl	8164 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10320:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   10324:	fbb0 f0f1 	udiv	r0, r0, r1
   10328:	1a20      	subs	r0, r4, r0
   1032a:	bd10      	pop	{r4, pc}
   1032c:	2804      	cmp	r0, #4
   1032e:	d202      	bcs.n	10336 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x20>
   10330:	f04f 0028 	mov.w	r0, #40	; 0x28
   10334:	4770      	bx	lr
   10336:	d102      	bne.n	1033e <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x28>
   10338:	f04f 0010 	mov.w	r0, #16
   1033c:	4770      	bx	lr
   1033e:	f04f 0000 	mov.w	r0, #0
   10342:	4770      	bx	lr
   10344:	2100      	movs	r1, #0
   10346:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
   1034a:	f800 1f24 	strb.w	r1, [r0, #36]!
   1034e:	7041      	strb	r1, [r0, #1]
   10350:	4770      	bx	lr

00010352 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
   10352:	b570      	push	{r4, r5, r6, lr}
   10354:	f7f8 fcc6 	bl	8ce4 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
   10358:	4605      	mov	r5, r0
   1035a:	2400      	movs	r4, #0
   1035c:	e006      	b.n	1036c <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
   1035e:	4620      	mov	r0, r4
   10360:	f7f8 fcc6 	bl	8cf0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
   10364:	f7ff ffee 	bl	10344 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x2e>
   10368:	1c64      	adds	r4, r4, #1
   1036a:	b2e4      	uxtb	r4, r4
   1036c:	42ac      	cmp	r4, r5
   1036e:	d3f6      	bcc.n	1035e <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
   10370:	bd70      	pop	{r4, r5, r6, pc}

00010372 <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>:
   10372:	f7fb b8c5 	b.w	b500 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>

00010376 <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>:
   10376:	b510      	push	{r4, lr}
   10378:	2000      	movs	r0, #0
   1037a:	f7fb fbfb 	bl	bb74 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>
   1037e:	6800      	ldr	r0, [r0, #0]
   10380:	2800      	cmp	r0, #0
   10382:	bf18      	it	ne
   10384:	2001      	movne	r0, #1
   10386:	bd10      	pop	{r4, pc}

00010388 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
   10388:	0a41      	lsrs	r1, r0, #9
   1038a:	f643 5209 	movw	r2, #15625	; 0x3d09
   1038e:	4351      	muls	r1, r2
   10390:	f3c0 0008 	ubfx	r0, r0, #0, #9
   10394:	fb10 f002 	smulbb	r0, r0, r2
   10398:	f500 7080 	add.w	r0, r0, #256	; 0x100
   1039c:	eb01 2050 	add.w	r0, r1, r0, lsr #9
   103a0:	4770      	bx	lr
   103a2:	2800      	cmp	r0, #0
   103a4:	db09      	blt.n	103ba <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x32>
   103a6:	f000 021f 	and.w	r2, r0, #31
   103aa:	2101      	movs	r1, #1
   103ac:	4091      	lsls	r1, r2
   103ae:	0940      	lsrs	r0, r0, #5
   103b0:	0080      	lsls	r0, r0, #2
   103b2:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   103b6:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   103ba:	4770      	bx	lr
   103bc:	2800      	cmp	r0, #0
   103be:	db0d      	blt.n	103dc <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x54>
   103c0:	f000 021f 	and.w	r2, r0, #31
   103c4:	2101      	movs	r1, #1
   103c6:	4091      	lsls	r1, r2
   103c8:	0940      	lsrs	r0, r0, #5
   103ca:	0080      	lsls	r0, r0, #2
   103cc:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   103d0:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   103d4:	f3bf 8f4f 	dsb	sy
   103d8:	f3bf 8f6f 	isb	sy
   103dc:	4770      	bx	lr
   103de:	5840      	ldr	r0, [r0, r1]
   103e0:	2800      	cmp	r0, #0
   103e2:	d000      	beq.n	103e6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x5e>
   103e4:	2001      	movs	r0, #1
   103e6:	4770      	bx	lr
   103e8:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
   103ec:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
   103f0:	f002 0201 	and.w	r2, r2, #1
   103f4:	03c0      	lsls	r0, r0, #15
   103f6:	d503      	bpl.n	10400 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x78>
   103f8:	428a      	cmp	r2, r1
   103fa:	d101      	bne.n	10400 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x78>
   103fc:	2001      	movs	r0, #1
   103fe:	4770      	bx	lr
   10400:	2000      	movs	r0, #0
   10402:	4770      	bx	lr

00010404 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
   10404:	b510      	push	{r4, lr}
   10406:	2101      	movs	r1, #1
   10408:	0788      	lsls	r0, r1, #30
   1040a:	f7fb ff6f 	bl	c2ec <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
   1040e:	2800      	cmp	r0, #0
   10410:	d000      	beq.n	10414 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
   10412:	2001      	movs	r0, #1
   10414:	bd10      	pop	{r4, pc}

00010416 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
   10416:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   1041a:	2101      	movs	r1, #1
   1041c:	6001      	str	r1, [r0, #0]
   1041e:	4770      	bx	lr

00010420 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
   10420:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   10424:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
   10428:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
   1042c:	f002 0203 	and.w	r2, r2, #3
   10430:	03c9      	lsls	r1, r1, #15
   10432:	d503      	bpl.n	1043c <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
   10434:	4282      	cmp	r2, r0
   10436:	d101      	bne.n	1043c <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
   10438:	2001      	movs	r0, #1
   1043a:	4770      	bx	lr
   1043c:	2000      	movs	r0, #0
   1043e:	4770      	bx	lr

00010440 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
   10440:	b510      	push	{r4, lr}
   10442:	2100      	movs	r1, #0
   10444:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   10448:	f7fb ff50 	bl	c2ec <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
   1044c:	2800      	cmp	r0, #0
   1044e:	d000      	beq.n	10452 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
   10450:	2001      	movs	r0, #1
   10452:	bd10      	pop	{r4, pc}
   10454:	2800      	cmp	r0, #0
   10456:	db09      	blt.n	1046c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
   10458:	f000 021f 	and.w	r2, r0, #31
   1045c:	2101      	movs	r1, #1
   1045e:	4091      	lsls	r1, r2
   10460:	0940      	lsrs	r0, r0, #5
   10462:	0080      	lsls	r0, r0, #2
   10464:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10468:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   1046c:	4770      	bx	lr
   1046e:	2800      	cmp	r0, #0
   10470:	db0d      	blt.n	1048e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
   10472:	f000 021f 	and.w	r2, r0, #31
   10476:	2101      	movs	r1, #1
   10478:	4091      	lsls	r1, r2
   1047a:	0940      	lsrs	r0, r0, #5
   1047c:	0080      	lsls	r0, r0, #2
   1047e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10482:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   10486:	f3bf 8f4f 	dsb	sy
   1048a:	f3bf 8f6f 	isb	sy
   1048e:	4770      	bx	lr
   10490:	00021000 	.word	0x00021000
   10494:	000000fa 	.word	0x000000fa
   10498:	cc9ef18c 	.word	0xcc9ef18c
   1049c:	a7d74134 	.word	0xa7d74134
   104a0:	1459f70e 	.word	0x1459f70e
   104a4:	67d72bbb 	.word	0x67d72bbb
   104a8:	ebbebb7f 	.word	0xebbebb7f
   104ac:	2800      	cmp	r0, #0
   104ae:	db09      	blt.n	104c4 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
   104b0:	f000 021f 	and.w	r2, r0, #31
   104b4:	2101      	movs	r1, #1
   104b6:	4091      	lsls	r1, r2
   104b8:	0940      	lsrs	r0, r0, #5
   104ba:	0080      	lsls	r0, r0, #2
   104bc:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   104c0:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   104c4:	4770      	bx	lr

000104c6 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
   104c6:	f3ef 8110 	mrs	r1, PRIMASK
   104ca:	b672      	cpsid	i
   104cc:	7802      	ldrb	r2, [r0, #0]
   104ce:	2a01      	cmp	r2, #1
   104d0:	d001      	beq.n	104d6 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
   104d2:	2201      	movs	r2, #1
   104d4:	e000      	b.n	104d8 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
   104d6:	2200      	movs	r2, #0
   104d8:	2301      	movs	r3, #1
   104da:	7003      	strb	r3, [r0, #0]
   104dc:	b901      	cbnz	r1, 104e0 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
   104de:	b662      	cpsie	i
   104e0:	b10a      	cbz	r2, 104e6 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
   104e2:	2000      	movs	r0, #0
   104e4:	4770      	bx	lr
   104e6:	f06f 0022 	mvn.w	r0, #34	; 0x22
   104ea:	4770      	bx	lr

000104ec <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
   104ec:	2100      	movs	r1, #0
   104ee:	7001      	strb	r1, [r0, #0]
   104f0:	4608      	mov	r0, r1
   104f2:	4770      	bx	lr

000104f4 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
   104f4:	f3ef 8110 	mrs	r1, PRIMASK
   104f8:	b672      	cpsid	i
   104fa:	2200      	movs	r2, #0
   104fc:	7002      	strb	r2, [r0, #0]
   104fe:	b901      	cbnz	r1, 10502 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
   10500:	b662      	cpsie	i
   10502:	2000      	movs	r0, #0
   10504:	4770      	bx	lr

00010506 <mpsl_low_priority_process>:
   10506:	f7fc b847 	b.w	c598 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

0001050a <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
   1050a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   1050e:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10512:	280f      	cmp	r0, #15
   10514:	d001      	beq.n	1051a <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
   10516:	2000      	movs	r0, #0
   10518:	4770      	bx	lr
   1051a:	2001      	movs	r0, #1
   1051c:	4770      	bx	lr

0001051e <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
   1051e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10522:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10526:	280a      	cmp	r0, #10
   10528:	d001      	beq.n	1052e <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
   1052a:	2000      	movs	r0, #0
   1052c:	4770      	bx	lr
   1052e:	2001      	movs	r0, #1
   10530:	4770      	bx	lr

00010532 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
   10532:	b500      	push	{lr}
   10534:	f7ff fff3 	bl	1051e <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
   10538:	b120      	cbz	r0, 10544 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
   1053a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   1053e:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   10542:	b108      	cbz	r0, 10548 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
   10544:	2000      	movs	r0, #0
   10546:	bd00      	pop	{pc}
   10548:	2001      	movs	r0, #1
   1054a:	bd00      	pop	{pc}

0001054c <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
   1054c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10550:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10554:	280e      	cmp	r0, #14
   10556:	d001      	beq.n	1055c <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
   10558:	2000      	movs	r0, #0
   1055a:	4770      	bx	lr
   1055c:	2001      	movs	r0, #1
   1055e:	4770      	bx	lr

00010560 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
   10560:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10564:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10568:	2810      	cmp	r0, #16
   1056a:	d001      	beq.n	10570 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
   1056c:	2000      	movs	r0, #0
   1056e:	4770      	bx	lr
   10570:	2001      	movs	r0, #1
   10572:	4770      	bx	lr

00010574 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
   10574:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10578:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   1057c:	2806      	cmp	r0, #6
   1057e:	d003      	beq.n	10588 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
   10580:	1c40      	adds	r0, r0, #1
   10582:	d001      	beq.n	10588 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
   10584:	2000      	movs	r0, #0
   10586:	4770      	bx	lr
   10588:	2001      	movs	r0, #1
   1058a:	4770      	bx	lr

0001058c <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
   1058c:	b500      	push	{lr}
   1058e:	f7ff fff1 	bl	10574 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   10592:	b148      	cbz	r0, 105a8 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   10594:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10598:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   1059c:	2806      	cmp	r0, #6
   1059e:	d303      	bcc.n	105a8 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   105a0:	1c40      	adds	r0, r0, #1
   105a2:	d001      	beq.n	105a8 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   105a4:	2001      	movs	r0, #1
   105a6:	bd00      	pop	{pc}
   105a8:	2000      	movs	r0, #0
   105aa:	bd00      	pop	{pc}

000105ac <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
   105ac:	b500      	push	{lr}
   105ae:	f7ff ffe1 	bl	10574 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   105b2:	b138      	cbz	r0, 105c4 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
   105b4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   105b8:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   105bc:	2806      	cmp	r0, #6
   105be:	d303      	bcc.n	105c8 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
   105c0:	1c40      	adds	r0, r0, #1
   105c2:	d001      	beq.n	105c8 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
   105c4:	2000      	movs	r0, #0
   105c6:	bd00      	pop	{pc}
   105c8:	2001      	movs	r0, #1
   105ca:	bd00      	pop	{pc}

000105cc <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
   105cc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   105d0:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   105d4:	280d      	cmp	r0, #13
   105d6:	d001      	beq.n	105dc <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
   105d8:	2000      	movs	r0, #0
   105da:	4770      	bx	lr
   105dc:	2001      	movs	r0, #1
   105de:	4770      	bx	lr

000105e0 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
   105e0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   105e4:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   105e8:	2808      	cmp	r0, #8
   105ea:	d001      	beq.n	105f0 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
   105ec:	2000      	movs	r0, #0
   105ee:	4770      	bx	lr
   105f0:	2001      	movs	r0, #1
   105f2:	4770      	bx	lr

000105f4 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
   105f4:	f7fc b80a 	b.w	c60c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x2c>

000105f8 <sym_PHK7RXLFFTGYQNCW3IEEUVLOAYXWQJQYEN3DT7Y>:
   105f8:	f7fc b808 	b.w	c60c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x2c>

000105fc <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>:
   105fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10600:	428a      	cmp	r2, r1
   10602:	d803      	bhi.n	1060c <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x10>
   10604:	2179      	movs	r1, #121	; 0x79
   10606:	2096      	movs	r0, #150	; 0x96
   10608:	f7fb fec6 	bl	c398 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1060c:	fab2 f382 	clz	r3, r2
   10610:	b13b      	cbz	r3, 10622 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x26>
   10612:	4099      	lsls	r1, r3
   10614:	f1c3 0420 	rsb	r4, r3, #32
   10618:	fa20 f404 	lsr.w	r4, r0, r4
   1061c:	4321      	orrs	r1, r4
   1061e:	4098      	lsls	r0, r3
   10620:	409a      	lsls	r2, r3
   10622:	0c14      	lsrs	r4, r2, #16
   10624:	0c07      	lsrs	r7, r0, #16
   10626:	b286      	uxth	r6, r0
   10628:	fbb1 f0f4 	udiv	r0, r1, r4
   1062c:	fbb1 f3f4 	udiv	r3, r1, r4
   10630:	fb04 1c10 	mls	ip, r4, r0, r1
   10634:	b295      	uxth	r5, r2
   10636:	fb03 f005 	mul.w	r0, r3, r5
   1063a:	eb07 4c0c 	add.w	ip, r7, ip, lsl #16
   1063e:	4560      	cmp	r0, ip
   10640:	d907      	bls.n	10652 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x56>
   10642:	eba0 000c 	sub.w	r0, r0, ip
   10646:	4290      	cmp	r0, r2
   10648:	d901      	bls.n	1064e <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x52>
   1064a:	2002      	movs	r0, #2
   1064c:	e000      	b.n	10650 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x54>
   1064e:	2001      	movs	r0, #1
   10650:	1a1b      	subs	r3, r3, r0
   10652:	0409      	lsls	r1, r1, #16
   10654:	0418      	lsls	r0, r3, #16
   10656:	19c9      	adds	r1, r1, r7
   10658:	fba3 3702 	umull	r3, r7, r3, r2
   1065c:	1acf      	subs	r7, r1, r3
   1065e:	fbb7 f1f4 	udiv	r1, r7, r4
   10662:	fbb7 f3f4 	udiv	r3, r7, r4
   10666:	fb04 7413 	mls	r4, r4, r3, r7
   1066a:	fb01 f305 	mul.w	r3, r1, r5
   1066e:	eb06 4404 	add.w	r4, r6, r4, lsl #16
   10672:	42a3      	cmp	r3, r4
   10674:	d906      	bls.n	10684 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x88>
   10676:	1b1b      	subs	r3, r3, r4
   10678:	4293      	cmp	r3, r2
   1067a:	d901      	bls.n	10680 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x84>
   1067c:	2202      	movs	r2, #2
   1067e:	e000      	b.n	10682 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x86>
   10680:	2201      	movs	r2, #1
   10682:	1a89      	subs	r1, r1, r2
   10684:	4308      	orrs	r0, r1
   10686:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001068a <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>:
   1068a:	2a00      	cmp	r2, #0
   1068c:	bf04      	itt	eq
   1068e:	2000      	moveq	r0, #0
   10690:	4770      	bxeq	lr
   10692:	1e52      	subs	r2, r2, #1
   10694:	d007      	beq.n	106a6 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x1c>
   10696:	7803      	ldrb	r3, [r0, #0]
   10698:	f891 c000 	ldrb.w	ip, [r1]
   1069c:	4563      	cmp	r3, ip
   1069e:	bf04      	itt	eq
   106a0:	1c40      	addeq	r0, r0, #1
   106a2:	1c49      	addeq	r1, r1, #1
   106a4:	d0f5      	beq.n	10692 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x8>
   106a6:	7800      	ldrb	r0, [r0, #0]
   106a8:	7809      	ldrb	r1, [r1, #0]
   106aa:	1a40      	subs	r0, r0, r1
   106ac:	4770      	bx	lr

000106ae <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
   106ae:	b4f0      	push	{r4, r5, r6, r7}
   106b0:	ea80 0c01 	eor.w	ip, r0, r1
   106b4:	4603      	mov	r3, r0
   106b6:	f01c 0f03 	tst.w	ip, #3
   106ba:	d13c      	bne.n	10736 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   106bc:	f013 0f03 	tst.w	r3, #3
   106c0:	d00b      	beq.n	106da <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
   106c2:	2a00      	cmp	r2, #0
   106c4:	bf04      	itt	eq
   106c6:	bcf0      	popeq	{r4, r5, r6, r7}
   106c8:	4770      	bxeq	lr
   106ca:	f811 cb01 	ldrb.w	ip, [r1], #1
   106ce:	f803 cb01 	strb.w	ip, [r3], #1
   106d2:	1e52      	subs	r2, r2, #1
   106d4:	f013 0f03 	tst.w	r3, #3
   106d8:	d1f3      	bne.n	106c2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
   106da:	2a03      	cmp	r2, #3
   106dc:	d94f      	bls.n	1077e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
   106de:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   106e2:	d24c      	bcs.n	1077e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
   106e4:	f1c2 0c00 	rsb	ip, r2, #0
   106e8:	ea4f 74ec 	mov.w	r4, ip, asr #31
   106ec:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
   106f0:	ea4f 0cac 	mov.w	ip, ip, asr #2
   106f4:	f1cc 0c00 	rsb	ip, ip, #0
   106f8:	f1bc 0f00 	cmp.w	ip, #0
   106fc:	dd1b      	ble.n	10736 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   106fe:	1f0d      	subs	r5, r1, #4
   10700:	1f1c      	subs	r4, r3, #4
   10702:	f01c 0f01 	tst.w	ip, #1
   10706:	d003      	beq.n	10710 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
   10708:	f855 6f04 	ldr.w	r6, [r5, #4]!
   1070c:	f844 6f04 	str.w	r6, [r4, #4]!
   10710:	ea5f 066c 	movs.w	r6, ip, asr #1
   10714:	d007      	beq.n	10726 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
   10716:	686f      	ldr	r7, [r5, #4]
   10718:	6067      	str	r7, [r4, #4]
   1071a:	f855 7f08 	ldr.w	r7, [r5, #8]!
   1071e:	f844 7f08 	str.w	r7, [r4, #8]!
   10722:	1e76      	subs	r6, r6, #1
   10724:	d1f7      	bne.n	10716 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
   10726:	eb01 018c 	add.w	r1, r1, ip, lsl #2
   1072a:	eb03 038c 	add.w	r3, r3, ip, lsl #2
   1072e:	f1cc 0c00 	rsb	ip, ip, #0
   10732:	eb02 028c 	add.w	r2, r2, ip, lsl #2
   10736:	2a00      	cmp	r2, #0
   10738:	bf04      	itt	eq
   1073a:	bcf0      	popeq	{r4, r5, r6, r7}
   1073c:	4770      	bxeq	lr
   1073e:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   10742:	d226      	bcs.n	10792 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
   10744:	2a00      	cmp	r2, #0
   10746:	bfdc      	itt	le
   10748:	bcf0      	pople	{r4, r5, r6, r7}
   1074a:	4770      	bxle	lr
   1074c:	1e49      	subs	r1, r1, #1
   1074e:	1e5b      	subs	r3, r3, #1
   10750:	f012 0f01 	tst.w	r2, #1
   10754:	d003      	beq.n	1075e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
   10756:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   1075a:	f803 cf01 	strb.w	ip, [r3, #1]!
   1075e:	1052      	asrs	r2, r2, #1
   10760:	bf04      	itt	eq
   10762:	bcf0      	popeq	{r4, r5, r6, r7}
   10764:	4770      	bxeq	lr
   10766:	f891 c001 	ldrb.w	ip, [r1, #1]
   1076a:	f883 c001 	strb.w	ip, [r3, #1]
   1076e:	f811 cf02 	ldrb.w	ip, [r1, #2]!
   10772:	f803 cf02 	strb.w	ip, [r3, #2]!
   10776:	1e52      	subs	r2, r2, #1
   10778:	d1f5      	bne.n	10766 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
   1077a:	bcf0      	pop	{r4, r5, r6, r7}
   1077c:	4770      	bx	lr
   1077e:	2a04      	cmp	r2, #4
   10780:	d3d9      	bcc.n	10736 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   10782:	f851 cb04 	ldr.w	ip, [r1], #4
   10786:	1f12      	subs	r2, r2, #4
   10788:	f843 cb04 	str.w	ip, [r3], #4
   1078c:	2a04      	cmp	r2, #4
   1078e:	d2f8      	bcs.n	10782 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
   10790:	e7d1      	b.n	10736 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   10792:	f811 cb01 	ldrb.w	ip, [r1], #1
   10796:	f803 cb01 	strb.w	ip, [r3], #1
   1079a:	1e52      	subs	r2, r2, #1
   1079c:	d1f9      	bne.n	10792 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
   1079e:	bcf0      	pop	{r4, r5, r6, r7}
   107a0:	4770      	bx	lr

000107a2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
   107a2:	b470      	push	{r4, r5, r6}
   107a4:	4603      	mov	r3, r0
   107a6:	f001 0cff 	and.w	ip, r1, #255	; 0xff
   107aa:	f010 0f03 	tst.w	r0, #3
   107ae:	d009      	beq.n	107c4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
   107b0:	2a00      	cmp	r2, #0
   107b2:	bf04      	itt	eq
   107b4:	bc70      	popeq	{r4, r5, r6}
   107b6:	4770      	bxeq	lr
   107b8:	f803 cb01 	strb.w	ip, [r3], #1
   107bc:	1e52      	subs	r2, r2, #1
   107be:	f013 0f03 	tst.w	r3, #3
   107c2:	d1f5      	bne.n	107b0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
   107c4:	b2c9      	uxtb	r1, r1
   107c6:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   107ca:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
   107ce:	2a03      	cmp	r2, #3
   107d0:	d939      	bls.n	10846 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
   107d2:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   107d6:	d236      	bcs.n	10846 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
   107d8:	4251      	negs	r1, r2
   107da:	17cc      	asrs	r4, r1, #31
   107dc:	eb01 7194 	add.w	r1, r1, r4, lsr #30
   107e0:	1089      	asrs	r1, r1, #2
   107e2:	424e      	negs	r6, r1
   107e4:	2e00      	cmp	r6, #0
   107e6:	dd11      	ble.n	1080c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   107e8:	1f19      	subs	r1, r3, #4
   107ea:	f016 0f01 	tst.w	r6, #1
   107ee:	bf18      	it	ne
   107f0:	f841 5f04 	strne.w	r5, [r1, #4]!
   107f4:	1074      	asrs	r4, r6, #1
   107f6:	d004      	beq.n	10802 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
   107f8:	604d      	str	r5, [r1, #4]
   107fa:	f841 5f08 	str.w	r5, [r1, #8]!
   107fe:	1e64      	subs	r4, r4, #1
   10800:	d1fa      	bne.n	107f8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
   10802:	4271      	negs	r1, r6
   10804:	eb03 0386 	add.w	r3, r3, r6, lsl #2
   10808:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   1080c:	2a00      	cmp	r2, #0
   1080e:	bf04      	itt	eq
   10810:	bc70      	popeq	{r4, r5, r6}
   10812:	4770      	bxeq	lr
   10814:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   10818:	d21d      	bcs.n	10856 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
   1081a:	2a00      	cmp	r2, #0
   1081c:	bfdc      	itt	le
   1081e:	bc70      	pople	{r4, r5, r6}
   10820:	4770      	bxle	lr
   10822:	1e59      	subs	r1, r3, #1
   10824:	f012 0f01 	tst.w	r2, #1
   10828:	bf18      	it	ne
   1082a:	f801 cf01 	strbne.w	ip, [r1, #1]!
   1082e:	1052      	asrs	r2, r2, #1
   10830:	bf04      	itt	eq
   10832:	bc70      	popeq	{r4, r5, r6}
   10834:	4770      	bxeq	lr
   10836:	f881 c001 	strb.w	ip, [r1, #1]
   1083a:	f801 cf02 	strb.w	ip, [r1, #2]!
   1083e:	1e52      	subs	r2, r2, #1
   10840:	d1f9      	bne.n	10836 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
   10842:	bc70      	pop	{r4, r5, r6}
   10844:	4770      	bx	lr
   10846:	2a04      	cmp	r2, #4
   10848:	d3e0      	bcc.n	1080c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   1084a:	1f12      	subs	r2, r2, #4
   1084c:	f843 5b04 	str.w	r5, [r3], #4
   10850:	2a04      	cmp	r2, #4
   10852:	d2fa      	bcs.n	1084a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
   10854:	e7da      	b.n	1080c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   10856:	f803 cb01 	strb.w	ip, [r3], #1
   1085a:	1e52      	subs	r2, r2, #1
   1085c:	d1fb      	bne.n	10856 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
   1085e:	bc70      	pop	{r4, r5, r6}
   10860:	4770      	bx	lr
   10862:	f04f 30ff 	mov.w	r0, #4294967295
   10866:	4770      	bx	lr
   10868:	2000      	movs	r0, #0
   1086a:	4770      	bx	lr
   1086c:	2000      	movs	r0, #0
   1086e:	4770      	bx	lr
   10870:	f04f 30ff 	mov.w	r0, #4294967295
   10874:	4770      	bx	lr
   10876:	4770      	bx	lr
   10878:	4770      	bx	lr
   1087a:	2000      	movs	r0, #0
   1087c:	4770      	bx	lr
   1087e:	2100      	movs	r1, #0
   10880:	7001      	strb	r1, [r0, #0]
   10882:	4770      	bx	lr
   10884:	f04f 30ff 	mov.w	r0, #4294967295
   10888:	4770      	bx	lr
   1088a:	f04f 30ff 	mov.w	r0, #4294967295
   1088e:	4770      	bx	lr
   10890:	2100      	movs	r1, #0
   10892:	7001      	strb	r1, [r0, #0]
   10894:	4770      	bx	lr
   10896:	f04f 30ff 	mov.w	r0, #4294967295
   1089a:	4770      	bx	lr
   1089c:	f04f 30ff 	mov.w	r0, #4294967295
   108a0:	4770      	bx	lr
   108a2:	7800      	ldrb	r0, [r0, #0]
   108a4:	2800      	cmp	r0, #0
   108a6:	d001      	beq.n	108ac <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x10a>
   108a8:	f06f 0015 	mvn.w	r0, #21
   108ac:	4770      	bx	lr
   108ae:	2000      	movs	r0, #0
   108b0:	4770      	bx	lr
   108b2:	2200      	movs	r2, #0
   108b4:	f000 b802 	b.w	108bc <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>

000108b8 <mpsl_fem_init>:
   108b8:	f7f8 b982 	b.w	8bc0 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>

000108bc <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>:
   108bc:	b570      	push	{r4, r5, r6, lr}
   108be:	4614      	mov	r4, r2
   108c0:	460d      	mov	r5, r1
   108c2:	1b00      	subs	r0, r0, r4
   108c4:	f06f 017f 	mvn.w	r1, #127	; 0x7f
   108c8:	4288      	cmp	r0, r1
   108ca:	da01      	bge.n	108d0 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x14>
   108cc:	4608      	mov	r0, r1
   108ce:	e002      	b.n	108d6 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
   108d0:	287f      	cmp	r0, #127	; 0x7f
   108d2:	dd00      	ble.n	108d6 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
   108d4:	207f      	movs	r0, #127	; 0x7f
   108d6:	4619      	mov	r1, r3
   108d8:	b240      	sxtb	r0, r0
   108da:	f7f8 f9a5 	bl	8c28 <mpsl_tx_power_radio_supported_power_adjust>
   108de:	7028      	strb	r0, [r5, #0]
   108e0:	706c      	strb	r4, [r5, #1]
   108e2:	2100      	movs	r1, #0
   108e4:	4420      	add	r0, r4
   108e6:	70a9      	strb	r1, [r5, #2]
   108e8:	b240      	sxtb	r0, r0
   108ea:	bd70      	pop	{r4, r5, r6, pc}
   108ec:	1702080c 	.word	0x1702080c
   108f0:	0201010d 	.word	0x0201010d
   108f4:	01010909 	.word	0x01010909
   108f8:	18090206 	.word	0x18090206
   108fc:	01010318 	.word	0x01010318
   10900:	03030909 	.word	0x03030909
   10904:	01020305 	.word	0x01020305
   10908:	24020223 	.word	0x24020223
   1090c:	04041009 	.word	0x04041009
   10910:	0b0b0505 	.word	0x0b0b0505
   10914:	0b04      	.short	0x0b04
   10916:	2b          	.byte	0x2b
   10917:	25          	.byte	0x25
   10918:	2726      	.short	0x2726
   1091a:	0301      	.short	0x0301
   1091c:	0101      	.short	0x0101
   1091e:	01          	.byte	0x01
   1091f:	d8          	.byte	0xd8
   10920:	f8f4f0ec 	.word	0xf8f4f0ec
   10924:	030200fc 	.word	0x030200fc
   10928:	07060504 	.word	0x07060504
   1092c:	00000008 	.word	0x00000008
	...
   10940:	01010100 	.word	0x01010100
   10944:	02020201 	.word	0x02020201
   10948:	03030302 	.word	0x03030302
   1094c:	04040403 	.word	0x04040403
   10950:	05050504 	.word	0x05050504
   10954:	07060605 	.word	0x07060605
   10958:	0b0a0908 	.word	0x0b0a0908
   1095c:	00000d0c 	.word	0x00000d0c
	...
   10970:	01010000 	.word	0x01010000
   10974:	02020101 	.word	0x02020101
   10978:	03030202 	.word	0x03030202
   1097c:	04040303 	.word	0x04040303
   10980:	05050404 	.word	0x05050404
   10984:	06060505 	.word	0x06060505
   10988:	00090806 	.word	0x00090806

0001098c <settings_frame_cb>:
        .id = TTPMS_SETTINGS_FRAME_ID,
        .mask = CAN_STD_ID_MASK
};

void settings_frame_cb(const struct device *dev, struct can_frame *frame, void *user_data)
{
   1098c:	b510      	push	{r4, lr}
   1098e:	b082      	sub	sp, #8
   10990:	460c      	mov	r4, r1

    if (frame->data[0] & 0x01) {
   10992:	7a0b      	ldrb	r3, [r1, #8]
   10994:	f013 0f01 	tst.w	r3, #1
   10998:	d057      	beq.n	10a4a <settings_frame_cb+0xbe>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1099a:	4b85      	ldr	r3, [pc, #532]	; (10bb0 <settings_frame_cb+0x224>)
   1099c:	f3bf 8f5b 	dmb	ish
   109a0:	e853 2f00 	ldrex	r2, [r3]
   109a4:	f442 7180 	orr.w	r1, r2, #256	; 0x100
   109a8:	e843 1000 	strex	r0, r1, [r3]
   109ac:	2800      	cmp	r0, #0
   109ae:	d1f7      	bne.n	109a0 <settings_frame_cb+0x14>
   109b0:	f3bf 8f5b 	dmb	ish
		if(!atomic_test_and_set_bit(flags, TEMP_ENABLED_FLAG)) {
   109b4:	f412 7f80 	tst.w	r2, #256	; 0x100
   109b8:	d016      	beq.n	109e8 <settings_frame_cb+0x5c>
		if(atomic_test_and_clear_bit(flags, TEMP_ENABLED_FLAG)) {
			LOG_INF("Temperature DISABLED via CAN");
		}
	}

	if (frame->data[0] & 0x02) {
   109ba:	7a23      	ldrb	r3, [r4, #8]
   109bc:	f013 0f02 	tst.w	r3, #2
   109c0:	f000 80b4 	beq.w	10b2c <settings_frame_cb+0x1a0>
   109c4:	4b7a      	ldr	r3, [pc, #488]	; (10bb0 <settings_frame_cb+0x224>)
   109c6:	f3bf 8f5b 	dmb	ish
   109ca:	e853 2f00 	ldrex	r2, [r3]
   109ce:	f442 7100 	orr.w	r1, r2, #512	; 0x200
   109d2:	e843 1000 	strex	r0, r1, [r3]
   109d6:	2800      	cmp	r0, #0
   109d8:	d1f7      	bne.n	109ca <settings_frame_cb+0x3e>
   109da:	f3bf 8f5b 	dmb	ish
		if(!atomic_test_and_set_bit(flags, PRESSURE_ENABLED_FLAG)) {
   109de:	f412 7f00 	tst.w	r2, #512	; 0x200
   109e2:	d073      	beq.n	10acc <settings_frame_cb+0x140>
	} else {
		if(atomic_test_and_clear_bit(flags, PRESSURE_ENABLED_FLAG)) {
			LOG_INF("Pressure DISABLED via CAN");
		}
	}
}
   109e4:	b002      	add	sp, #8
   109e6:	bd10      	pop	{r4, pc}
			LOG_INF("Temperature ENABLED via CAN");
   109e8:	2006      	movs	r0, #6
   109ea:	f005 f9ed 	bl	15dc8 <z_log_msg_alloc>
   109ee:	2200      	movs	r2, #0
   109f0:	f36f 0200 	bfc	r2, #0, #1
   109f4:	f36f 0241 	bfc	r2, #1, #1
   109f8:	f36f 0282 	bfc	r2, #2, #1
   109fc:	f36f 02c5 	bfc	r2, #3, #3
   10a00:	2303      	movs	r3, #3
   10a02:	f363 1288 	bfi	r2, r3, #6, #3
   10a06:	2308      	movs	r3, #8
   10a08:	f363 2252 	bfi	r2, r3, #9, #10
   10a0c:	f36f 42de 	bfc	r2, #19, #12
   10a10:	f36f 72df 	bfc	r2, #31, #1
   10a14:	4684      	mov	ip, r0
   10a16:	b190      	cbz	r0, 10a3e <settings_frame_cb+0xb2>
   10a18:	f110 0310 	adds.w	r3, r0, #16
   10a1c:	d001      	beq.n	10a22 <settings_frame_cb+0x96>
   10a1e:	4965      	ldr	r1, [pc, #404]	; (10bb4 <settings_frame_cb+0x228>)
   10a20:	6141      	str	r1, [r0, #20]
   10a22:	b163      	cbz	r3, 10a3e <settings_frame_cb+0xb2>
   10a24:	2302      	movs	r3, #2
   10a26:	f88d 3004 	strb.w	r3, [sp, #4]
   10a2a:	2300      	movs	r3, #0
   10a2c:	f88d 3005 	strb.w	r3, [sp, #5]
   10a30:	f88d 3006 	strb.w	r3, [sp, #6]
   10a34:	f88d 3007 	strb.w	r3, [sp, #7]
   10a38:	9801      	ldr	r0, [sp, #4]
   10a3a:	f8cc 0010 	str.w	r0, [ip, #16]
   10a3e:	2300      	movs	r3, #0
   10a40:	495d      	ldr	r1, [pc, #372]	; (10bb8 <settings_frame_cb+0x22c>)
   10a42:	4660      	mov	r0, ip
   10a44:	f017 f9cb 	bl	27dde <z_log_msg_finalize>
   10a48:	e7b7      	b.n	109ba <settings_frame_cb+0x2e>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   10a4a:	4b59      	ldr	r3, [pc, #356]	; (10bb0 <settings_frame_cb+0x224>)
   10a4c:	f3bf 8f5b 	dmb	ish
   10a50:	e853 2f00 	ldrex	r2, [r3]
   10a54:	f422 7180 	bic.w	r1, r2, #256	; 0x100
   10a58:	e843 1000 	strex	r0, r1, [r3]
   10a5c:	2800      	cmp	r0, #0
   10a5e:	d1f7      	bne.n	10a50 <settings_frame_cb+0xc4>
   10a60:	f3bf 8f5b 	dmb	ish
		if(atomic_test_and_clear_bit(flags, TEMP_ENABLED_FLAG)) {
   10a64:	f412 7f80 	tst.w	r2, #256	; 0x100
   10a68:	d0a7      	beq.n	109ba <settings_frame_cb+0x2e>
			LOG_INF("Temperature DISABLED via CAN");
   10a6a:	2006      	movs	r0, #6
   10a6c:	f005 f9ac 	bl	15dc8 <z_log_msg_alloc>
   10a70:	2200      	movs	r2, #0
   10a72:	f36f 0200 	bfc	r2, #0, #1
   10a76:	f36f 0241 	bfc	r2, #1, #1
   10a7a:	f36f 0282 	bfc	r2, #2, #1
   10a7e:	f36f 02c5 	bfc	r2, #3, #3
   10a82:	2303      	movs	r3, #3
   10a84:	f363 1288 	bfi	r2, r3, #6, #3
   10a88:	2308      	movs	r3, #8
   10a8a:	f363 2252 	bfi	r2, r3, #9, #10
   10a8e:	f36f 42de 	bfc	r2, #19, #12
   10a92:	f36f 72df 	bfc	r2, #31, #1
   10a96:	4684      	mov	ip, r0
   10a98:	b190      	cbz	r0, 10ac0 <settings_frame_cb+0x134>
   10a9a:	f110 0310 	adds.w	r3, r0, #16
   10a9e:	d001      	beq.n	10aa4 <settings_frame_cb+0x118>
   10aa0:	4946      	ldr	r1, [pc, #280]	; (10bbc <settings_frame_cb+0x230>)
   10aa2:	6141      	str	r1, [r0, #20]
   10aa4:	b163      	cbz	r3, 10ac0 <settings_frame_cb+0x134>
   10aa6:	2302      	movs	r3, #2
   10aa8:	f88d 3004 	strb.w	r3, [sp, #4]
   10aac:	2300      	movs	r3, #0
   10aae:	f88d 3005 	strb.w	r3, [sp, #5]
   10ab2:	f88d 3006 	strb.w	r3, [sp, #6]
   10ab6:	f88d 3007 	strb.w	r3, [sp, #7]
   10aba:	9801      	ldr	r0, [sp, #4]
   10abc:	f8cc 0010 	str.w	r0, [ip, #16]
   10ac0:	2300      	movs	r3, #0
   10ac2:	493d      	ldr	r1, [pc, #244]	; (10bb8 <settings_frame_cb+0x22c>)
   10ac4:	4660      	mov	r0, ip
   10ac6:	f017 f98a 	bl	27dde <z_log_msg_finalize>
   10aca:	e776      	b.n	109ba <settings_frame_cb+0x2e>
			LOG_INF("Pressure ENABLED via CAN");
   10acc:	2006      	movs	r0, #6
   10ace:	f005 f97b 	bl	15dc8 <z_log_msg_alloc>
   10ad2:	2200      	movs	r2, #0
   10ad4:	f36f 0200 	bfc	r2, #0, #1
   10ad8:	f36f 0241 	bfc	r2, #1, #1
   10adc:	f36f 0282 	bfc	r2, #2, #1
   10ae0:	f36f 02c5 	bfc	r2, #3, #3
   10ae4:	2303      	movs	r3, #3
   10ae6:	f363 1288 	bfi	r2, r3, #6, #3
   10aea:	2308      	movs	r3, #8
   10aec:	f363 2252 	bfi	r2, r3, #9, #10
   10af0:	f36f 42de 	bfc	r2, #19, #12
   10af4:	f36f 72df 	bfc	r2, #31, #1
   10af8:	4604      	mov	r4, r0
   10afa:	b188      	cbz	r0, 10b20 <settings_frame_cb+0x194>
   10afc:	f110 0310 	adds.w	r3, r0, #16
   10b00:	d001      	beq.n	10b06 <settings_frame_cb+0x17a>
   10b02:	492f      	ldr	r1, [pc, #188]	; (10bc0 <settings_frame_cb+0x234>)
   10b04:	6141      	str	r1, [r0, #20]
   10b06:	b15b      	cbz	r3, 10b20 <settings_frame_cb+0x194>
   10b08:	2302      	movs	r3, #2
   10b0a:	f88d 3004 	strb.w	r3, [sp, #4]
   10b0e:	2300      	movs	r3, #0
   10b10:	f88d 3005 	strb.w	r3, [sp, #5]
   10b14:	f88d 3006 	strb.w	r3, [sp, #6]
   10b18:	f88d 3007 	strb.w	r3, [sp, #7]
   10b1c:	9801      	ldr	r0, [sp, #4]
   10b1e:	6120      	str	r0, [r4, #16]
   10b20:	2300      	movs	r3, #0
   10b22:	4925      	ldr	r1, [pc, #148]	; (10bb8 <settings_frame_cb+0x22c>)
   10b24:	4620      	mov	r0, r4
   10b26:	f017 f95a 	bl	27dde <z_log_msg_finalize>
   10b2a:	e75b      	b.n	109e4 <settings_frame_cb+0x58>
   10b2c:	4b20      	ldr	r3, [pc, #128]	; (10bb0 <settings_frame_cb+0x224>)
   10b2e:	f3bf 8f5b 	dmb	ish
   10b32:	e853 2f00 	ldrex	r2, [r3]
   10b36:	f422 7100 	bic.w	r1, r2, #512	; 0x200
   10b3a:	e843 1000 	strex	r0, r1, [r3]
   10b3e:	2800      	cmp	r0, #0
   10b40:	d1f7      	bne.n	10b32 <settings_frame_cb+0x1a6>
   10b42:	f3bf 8f5b 	dmb	ish
		if(atomic_test_and_clear_bit(flags, PRESSURE_ENABLED_FLAG)) {
   10b46:	f412 7f00 	tst.w	r2, #512	; 0x200
   10b4a:	f43f af4b 	beq.w	109e4 <settings_frame_cb+0x58>
			LOG_INF("Pressure DISABLED via CAN");
   10b4e:	2006      	movs	r0, #6
   10b50:	f005 f93a 	bl	15dc8 <z_log_msg_alloc>
   10b54:	2200      	movs	r2, #0
   10b56:	f36f 0200 	bfc	r2, #0, #1
   10b5a:	f36f 0241 	bfc	r2, #1, #1
   10b5e:	f36f 0282 	bfc	r2, #2, #1
   10b62:	f36f 02c5 	bfc	r2, #3, #3
   10b66:	2303      	movs	r3, #3
   10b68:	f363 1288 	bfi	r2, r3, #6, #3
   10b6c:	2308      	movs	r3, #8
   10b6e:	f363 2252 	bfi	r2, r3, #9, #10
   10b72:	f36f 42de 	bfc	r2, #19, #12
   10b76:	f36f 72df 	bfc	r2, #31, #1
   10b7a:	4604      	mov	r4, r0
   10b7c:	b188      	cbz	r0, 10ba2 <settings_frame_cb+0x216>
   10b7e:	f110 0310 	adds.w	r3, r0, #16
   10b82:	d001      	beq.n	10b88 <settings_frame_cb+0x1fc>
   10b84:	490f      	ldr	r1, [pc, #60]	; (10bc4 <settings_frame_cb+0x238>)
   10b86:	6141      	str	r1, [r0, #20]
   10b88:	b15b      	cbz	r3, 10ba2 <settings_frame_cb+0x216>
   10b8a:	2302      	movs	r3, #2
   10b8c:	f88d 3004 	strb.w	r3, [sp, #4]
   10b90:	2300      	movs	r3, #0
   10b92:	f88d 3005 	strb.w	r3, [sp, #5]
   10b96:	f88d 3006 	strb.w	r3, [sp, #6]
   10b9a:	f88d 3007 	strb.w	r3, [sp, #7]
   10b9e:	9801      	ldr	r0, [sp, #4]
   10ba0:	6120      	str	r0, [r4, #16]
   10ba2:	2300      	movs	r3, #0
   10ba4:	4904      	ldr	r1, [pc, #16]	; (10bb8 <settings_frame_cb+0x22c>)
   10ba6:	4620      	mov	r0, r4
   10ba8:	f017 f919 	bl	27dde <z_log_msg_finalize>
}
   10bac:	e71a      	b.n	109e4 <settings_frame_cb+0x58>
   10bae:	bf00      	nop
   10bb0:	20007b0c 	.word	0x20007b0c
   10bb4:	0002dfe8 	.word	0x0002dfe8
   10bb8:	0002df40 	.word	0x0002df40
   10bbc:	0002e004 	.word	0x0002e004
   10bc0:	0002e024 	.word	0x0002e024
   10bc4:	0002e040 	.word	0x0002e040

00010bc8 <IFL_temp_subscribed_cb>:
	.connected = connected,
	.disconnected = disconnected,
};

void IFL_temp_subscribed_cb(struct bt_conn *conn, uint8_t err, struct bt_gatt_subscribe_params *params)
{
   10bc8:	b500      	push	{lr}
   10bca:	b083      	sub	sp, #12
	if(params->value == BT_GATT_CCC_NOTIFY) {
   10bcc:	8a13      	ldrh	r3, [r2, #16]
   10bce:	2b01      	cmp	r3, #1
   10bd0:	d041      	beq.n	10c56 <IFL_temp_subscribed_cb+0x8e>

		atomic_set_bit(flags, IFL_SUBSCRIBED_FLAG);
		LOG_INF("IFL_temp_subscribed_cb: subscribed");

	} else if (params->value == 0) {
   10bd2:	2b00      	cmp	r3, #0
   10bd4:	d17d      	bne.n	10cd2 <IFL_temp_subscribed_cb+0x10a>
   10bd6:	4b57      	ldr	r3, [pc, #348]	; (10d34 <IFL_temp_subscribed_cb+0x16c>)
   10bd8:	f3bf 8f5b 	dmb	ish
   10bdc:	e853 1f00 	ldrex	r1, [r3]
   10be0:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
   10be4:	e843 1200 	strex	r2, r1, [r3]
   10be8:	2a00      	cmp	r2, #0
   10bea:	d1f7      	bne.n	10bdc <IFL_temp_subscribed_cb+0x14>
   10bec:	f3bf 8f5b 	dmb	ish

		atomic_clear_bit(flags, IFL_SUBSCRIBED_FLAG);
		LOG_INF("IFL_temp_subscribed_cb: unsubscribed");
   10bf0:	2006      	movs	r0, #6
   10bf2:	f005 f8e9 	bl	15dc8 <z_log_msg_alloc>
   10bf6:	2200      	movs	r2, #0
   10bf8:	f36f 0200 	bfc	r2, #0, #1
   10bfc:	f36f 0241 	bfc	r2, #1, #1
   10c00:	f36f 0282 	bfc	r2, #2, #1
   10c04:	f36f 02c5 	bfc	r2, #3, #3
   10c08:	2303      	movs	r3, #3
   10c0a:	f363 1288 	bfi	r2, r3, #6, #3
   10c0e:	2308      	movs	r3, #8
   10c10:	f363 2252 	bfi	r2, r3, #9, #10
   10c14:	f36f 42de 	bfc	r2, #19, #12
   10c18:	f36f 72df 	bfc	r2, #31, #1
   10c1c:	4684      	mov	ip, r0
   10c1e:	b190      	cbz	r0, 10c46 <IFL_temp_subscribed_cb+0x7e>
   10c20:	f110 0310 	adds.w	r3, r0, #16
   10c24:	d001      	beq.n	10c2a <IFL_temp_subscribed_cb+0x62>
   10c26:	4944      	ldr	r1, [pc, #272]	; (10d38 <IFL_temp_subscribed_cb+0x170>)
   10c28:	6141      	str	r1, [r0, #20]
   10c2a:	b163      	cbz	r3, 10c46 <IFL_temp_subscribed_cb+0x7e>
   10c2c:	2302      	movs	r3, #2
   10c2e:	f88d 3004 	strb.w	r3, [sp, #4]
   10c32:	2300      	movs	r3, #0
   10c34:	f88d 3005 	strb.w	r3, [sp, #5]
   10c38:	f88d 3006 	strb.w	r3, [sp, #6]
   10c3c:	f88d 3007 	strb.w	r3, [sp, #7]
   10c40:	9801      	ldr	r0, [sp, #4]
   10c42:	f8cc 0010 	str.w	r0, [ip, #16]
   10c46:	2300      	movs	r3, #0
   10c48:	493c      	ldr	r1, [pc, #240]	; (10d3c <IFL_temp_subscribed_cb+0x174>)
   10c4a:	4660      	mov	r0, ip
   10c4c:	f017 f8c7 	bl	27dde <z_log_msg_finalize>

	} else {
		LOG_WRN("IFL_temp_subscribed_cb: unknown CCC value");
	}
}
   10c50:	b003      	add	sp, #12
   10c52:	f85d fb04 	ldr.w	pc, [sp], #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   10c56:	4b37      	ldr	r3, [pc, #220]	; (10d34 <IFL_temp_subscribed_cb+0x16c>)
   10c58:	f3bf 8f5b 	dmb	ish
   10c5c:	e853 1f00 	ldrex	r1, [r3]
   10c60:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
   10c64:	e843 1200 	strex	r2, r1, [r3]
   10c68:	2a00      	cmp	r2, #0
   10c6a:	d1f7      	bne.n	10c5c <IFL_temp_subscribed_cb+0x94>
   10c6c:	f3bf 8f5b 	dmb	ish
		LOG_INF("IFL_temp_subscribed_cb: subscribed");
   10c70:	2006      	movs	r0, #6
   10c72:	f005 f8a9 	bl	15dc8 <z_log_msg_alloc>
   10c76:	2200      	movs	r2, #0
   10c78:	f36f 0200 	bfc	r2, #0, #1
   10c7c:	f36f 0241 	bfc	r2, #1, #1
   10c80:	f36f 0282 	bfc	r2, #2, #1
   10c84:	f36f 02c5 	bfc	r2, #3, #3
   10c88:	2303      	movs	r3, #3
   10c8a:	f363 1288 	bfi	r2, r3, #6, #3
   10c8e:	2308      	movs	r3, #8
   10c90:	f363 2252 	bfi	r2, r3, #9, #10
   10c94:	f36f 42de 	bfc	r2, #19, #12
   10c98:	f36f 72df 	bfc	r2, #31, #1
   10c9c:	4684      	mov	ip, r0
   10c9e:	b190      	cbz	r0, 10cc6 <IFL_temp_subscribed_cb+0xfe>
   10ca0:	f110 0310 	adds.w	r3, r0, #16
   10ca4:	d001      	beq.n	10caa <IFL_temp_subscribed_cb+0xe2>
   10ca6:	4926      	ldr	r1, [pc, #152]	; (10d40 <IFL_temp_subscribed_cb+0x178>)
   10ca8:	6141      	str	r1, [r0, #20]
   10caa:	b163      	cbz	r3, 10cc6 <IFL_temp_subscribed_cb+0xfe>
   10cac:	2302      	movs	r3, #2
   10cae:	f88d 3004 	strb.w	r3, [sp, #4]
   10cb2:	2300      	movs	r3, #0
   10cb4:	f88d 3005 	strb.w	r3, [sp, #5]
   10cb8:	f88d 3006 	strb.w	r3, [sp, #6]
   10cbc:	f88d 3007 	strb.w	r3, [sp, #7]
   10cc0:	9801      	ldr	r0, [sp, #4]
   10cc2:	f8cc 0010 	str.w	r0, [ip, #16]
   10cc6:	2300      	movs	r3, #0
   10cc8:	491c      	ldr	r1, [pc, #112]	; (10d3c <IFL_temp_subscribed_cb+0x174>)
   10cca:	4660      	mov	r0, ip
   10ccc:	f017 f887 	bl	27dde <z_log_msg_finalize>
   10cd0:	e7be      	b.n	10c50 <IFL_temp_subscribed_cb+0x88>
		LOG_WRN("IFL_temp_subscribed_cb: unknown CCC value");
   10cd2:	2006      	movs	r0, #6
   10cd4:	f005 f878 	bl	15dc8 <z_log_msg_alloc>
   10cd8:	2200      	movs	r2, #0
   10cda:	f36f 0200 	bfc	r2, #0, #1
   10cde:	f36f 0241 	bfc	r2, #1, #1
   10ce2:	f36f 0282 	bfc	r2, #2, #1
   10ce6:	f36f 02c5 	bfc	r2, #3, #3
   10cea:	2302      	movs	r3, #2
   10cec:	f363 1288 	bfi	r2, r3, #6, #3
   10cf0:	2308      	movs	r3, #8
   10cf2:	f363 2252 	bfi	r2, r3, #9, #10
   10cf6:	f36f 42de 	bfc	r2, #19, #12
   10cfa:	f36f 72df 	bfc	r2, #31, #1
   10cfe:	4684      	mov	ip, r0
   10d00:	b190      	cbz	r0, 10d28 <IFL_temp_subscribed_cb+0x160>
   10d02:	f110 0310 	adds.w	r3, r0, #16
   10d06:	d001      	beq.n	10d0c <IFL_temp_subscribed_cb+0x144>
   10d08:	490e      	ldr	r1, [pc, #56]	; (10d44 <IFL_temp_subscribed_cb+0x17c>)
   10d0a:	6141      	str	r1, [r0, #20]
   10d0c:	b163      	cbz	r3, 10d28 <IFL_temp_subscribed_cb+0x160>
   10d0e:	2302      	movs	r3, #2
   10d10:	f88d 3004 	strb.w	r3, [sp, #4]
   10d14:	2300      	movs	r3, #0
   10d16:	f88d 3005 	strb.w	r3, [sp, #5]
   10d1a:	f88d 3006 	strb.w	r3, [sp, #6]
   10d1e:	f88d 3007 	strb.w	r3, [sp, #7]
   10d22:	9801      	ldr	r0, [sp, #4]
   10d24:	f8cc 0010 	str.w	r0, [ip, #16]
   10d28:	2300      	movs	r3, #0
   10d2a:	4904      	ldr	r1, [pc, #16]	; (10d3c <IFL_temp_subscribed_cb+0x174>)
   10d2c:	4660      	mov	r0, ip
   10d2e:	f017 f856 	bl	27dde <z_log_msg_finalize>
}
   10d32:	e78d      	b.n	10c50 <IFL_temp_subscribed_cb+0x88>
   10d34:	20007b0c 	.word	0x20007b0c
   10d38:	0002e080 	.word	0x0002e080
   10d3c:	0002df40 	.word	0x0002df40
   10d40:	0002e05c 	.word	0x0002e05c
   10d44:	0002e0a8 	.word	0x0002e0a8

00010d48 <EFL_temp_subscribed_cb>:
		.ccc_handle = TTPMS_GATT_TEMP_HANDLE + 1,	// see note in ttpms_common.h
};


void EFL_temp_subscribed_cb(struct bt_conn *conn, uint8_t err, struct bt_gatt_subscribe_params *params)
{
   10d48:	b500      	push	{lr}
   10d4a:	b083      	sub	sp, #12
	if(params->value == BT_GATT_CCC_NOTIFY) {
   10d4c:	8a13      	ldrh	r3, [r2, #16]
   10d4e:	2b01      	cmp	r3, #1
   10d50:	d041      	beq.n	10dd6 <EFL_temp_subscribed_cb+0x8e>

		atomic_set_bit(flags, EFL_SUBSCRIBED_FLAG);
		LOG_INF("EFL_temp_subscribed_cb: subscribed");

	} else if (params->value == 0) {
   10d52:	2b00      	cmp	r3, #0
   10d54:	d17d      	bne.n	10e52 <EFL_temp_subscribed_cb+0x10a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   10d56:	4b57      	ldr	r3, [pc, #348]	; (10eb4 <EFL_temp_subscribed_cb+0x16c>)
   10d58:	f3bf 8f5b 	dmb	ish
   10d5c:	e853 1f00 	ldrex	r1, [r3]
   10d60:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
   10d64:	e843 1200 	strex	r2, r1, [r3]
   10d68:	2a00      	cmp	r2, #0
   10d6a:	d1f7      	bne.n	10d5c <EFL_temp_subscribed_cb+0x14>
   10d6c:	f3bf 8f5b 	dmb	ish

		atomic_clear_bit(flags, EFL_SUBSCRIBED_FLAG);
		LOG_INF("EFL_temp_subscribed_cb: unsubscribed");
   10d70:	2006      	movs	r0, #6
   10d72:	f005 f829 	bl	15dc8 <z_log_msg_alloc>
   10d76:	2200      	movs	r2, #0
   10d78:	f36f 0200 	bfc	r2, #0, #1
   10d7c:	f36f 0241 	bfc	r2, #1, #1
   10d80:	f36f 0282 	bfc	r2, #2, #1
   10d84:	f36f 02c5 	bfc	r2, #3, #3
   10d88:	2303      	movs	r3, #3
   10d8a:	f363 1288 	bfi	r2, r3, #6, #3
   10d8e:	2308      	movs	r3, #8
   10d90:	f363 2252 	bfi	r2, r3, #9, #10
   10d94:	f36f 42de 	bfc	r2, #19, #12
   10d98:	f36f 72df 	bfc	r2, #31, #1
   10d9c:	4684      	mov	ip, r0
   10d9e:	b190      	cbz	r0, 10dc6 <EFL_temp_subscribed_cb+0x7e>
   10da0:	f110 0310 	adds.w	r3, r0, #16
   10da4:	d001      	beq.n	10daa <EFL_temp_subscribed_cb+0x62>
   10da6:	4944      	ldr	r1, [pc, #272]	; (10eb8 <EFL_temp_subscribed_cb+0x170>)
   10da8:	6141      	str	r1, [r0, #20]
   10daa:	b163      	cbz	r3, 10dc6 <EFL_temp_subscribed_cb+0x7e>
   10dac:	2302      	movs	r3, #2
   10dae:	f88d 3004 	strb.w	r3, [sp, #4]
   10db2:	2300      	movs	r3, #0
   10db4:	f88d 3005 	strb.w	r3, [sp, #5]
   10db8:	f88d 3006 	strb.w	r3, [sp, #6]
   10dbc:	f88d 3007 	strb.w	r3, [sp, #7]
   10dc0:	9801      	ldr	r0, [sp, #4]
   10dc2:	f8cc 0010 	str.w	r0, [ip, #16]
   10dc6:	2300      	movs	r3, #0
   10dc8:	493c      	ldr	r1, [pc, #240]	; (10ebc <EFL_temp_subscribed_cb+0x174>)
   10dca:	4660      	mov	r0, ip
   10dcc:	f017 f807 	bl	27dde <z_log_msg_finalize>

	} else {
		LOG_WRN("EFL_temp_subscribed_cb: unknown CCC value");
	}
}
   10dd0:	b003      	add	sp, #12
   10dd2:	f85d fb04 	ldr.w	pc, [sp], #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   10dd6:	4b37      	ldr	r3, [pc, #220]	; (10eb4 <EFL_temp_subscribed_cb+0x16c>)
   10dd8:	f3bf 8f5b 	dmb	ish
   10ddc:	e853 1f00 	ldrex	r1, [r3]
   10de0:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
   10de4:	e843 1200 	strex	r2, r1, [r3]
   10de8:	2a00      	cmp	r2, #0
   10dea:	d1f7      	bne.n	10ddc <EFL_temp_subscribed_cb+0x94>
   10dec:	f3bf 8f5b 	dmb	ish
		LOG_INF("EFL_temp_subscribed_cb: subscribed");
   10df0:	2006      	movs	r0, #6
   10df2:	f004 ffe9 	bl	15dc8 <z_log_msg_alloc>
   10df6:	2200      	movs	r2, #0
   10df8:	f36f 0200 	bfc	r2, #0, #1
   10dfc:	f36f 0241 	bfc	r2, #1, #1
   10e00:	f36f 0282 	bfc	r2, #2, #1
   10e04:	f36f 02c5 	bfc	r2, #3, #3
   10e08:	2303      	movs	r3, #3
   10e0a:	f363 1288 	bfi	r2, r3, #6, #3
   10e0e:	2308      	movs	r3, #8
   10e10:	f363 2252 	bfi	r2, r3, #9, #10
   10e14:	f36f 42de 	bfc	r2, #19, #12
   10e18:	f36f 72df 	bfc	r2, #31, #1
   10e1c:	4684      	mov	ip, r0
   10e1e:	b190      	cbz	r0, 10e46 <EFL_temp_subscribed_cb+0xfe>
   10e20:	f110 0310 	adds.w	r3, r0, #16
   10e24:	d001      	beq.n	10e2a <EFL_temp_subscribed_cb+0xe2>
   10e26:	4926      	ldr	r1, [pc, #152]	; (10ec0 <EFL_temp_subscribed_cb+0x178>)
   10e28:	6141      	str	r1, [r0, #20]
   10e2a:	b163      	cbz	r3, 10e46 <EFL_temp_subscribed_cb+0xfe>
   10e2c:	2302      	movs	r3, #2
   10e2e:	f88d 3004 	strb.w	r3, [sp, #4]
   10e32:	2300      	movs	r3, #0
   10e34:	f88d 3005 	strb.w	r3, [sp, #5]
   10e38:	f88d 3006 	strb.w	r3, [sp, #6]
   10e3c:	f88d 3007 	strb.w	r3, [sp, #7]
   10e40:	9801      	ldr	r0, [sp, #4]
   10e42:	f8cc 0010 	str.w	r0, [ip, #16]
   10e46:	2300      	movs	r3, #0
   10e48:	491c      	ldr	r1, [pc, #112]	; (10ebc <EFL_temp_subscribed_cb+0x174>)
   10e4a:	4660      	mov	r0, ip
   10e4c:	f016 ffc7 	bl	27dde <z_log_msg_finalize>
   10e50:	e7be      	b.n	10dd0 <EFL_temp_subscribed_cb+0x88>
		LOG_WRN("EFL_temp_subscribed_cb: unknown CCC value");
   10e52:	2006      	movs	r0, #6
   10e54:	f004 ffb8 	bl	15dc8 <z_log_msg_alloc>
   10e58:	2200      	movs	r2, #0
   10e5a:	f36f 0200 	bfc	r2, #0, #1
   10e5e:	f36f 0241 	bfc	r2, #1, #1
   10e62:	f36f 0282 	bfc	r2, #2, #1
   10e66:	f36f 02c5 	bfc	r2, #3, #3
   10e6a:	2302      	movs	r3, #2
   10e6c:	f363 1288 	bfi	r2, r3, #6, #3
   10e70:	2308      	movs	r3, #8
   10e72:	f363 2252 	bfi	r2, r3, #9, #10
   10e76:	f36f 42de 	bfc	r2, #19, #12
   10e7a:	f36f 72df 	bfc	r2, #31, #1
   10e7e:	4684      	mov	ip, r0
   10e80:	b190      	cbz	r0, 10ea8 <EFL_temp_subscribed_cb+0x160>
   10e82:	f110 0310 	adds.w	r3, r0, #16
   10e86:	d001      	beq.n	10e8c <EFL_temp_subscribed_cb+0x144>
   10e88:	490e      	ldr	r1, [pc, #56]	; (10ec4 <EFL_temp_subscribed_cb+0x17c>)
   10e8a:	6141      	str	r1, [r0, #20]
   10e8c:	b163      	cbz	r3, 10ea8 <EFL_temp_subscribed_cb+0x160>
   10e8e:	2302      	movs	r3, #2
   10e90:	f88d 3004 	strb.w	r3, [sp, #4]
   10e94:	2300      	movs	r3, #0
   10e96:	f88d 3005 	strb.w	r3, [sp, #5]
   10e9a:	f88d 3006 	strb.w	r3, [sp, #6]
   10e9e:	f88d 3007 	strb.w	r3, [sp, #7]
   10ea2:	9801      	ldr	r0, [sp, #4]
   10ea4:	f8cc 0010 	str.w	r0, [ip, #16]
   10ea8:	2300      	movs	r3, #0
   10eaa:	4904      	ldr	r1, [pc, #16]	; (10ebc <EFL_temp_subscribed_cb+0x174>)
   10eac:	4660      	mov	r0, ip
   10eae:	f016 ff96 	bl	27dde <z_log_msg_finalize>
}
   10eb2:	e78d      	b.n	10dd0 <EFL_temp_subscribed_cb+0x88>
   10eb4:	20007b0c 	.word	0x20007b0c
   10eb8:	0002e0f8 	.word	0x0002e0f8
   10ebc:	0002df40 	.word	0x0002df40
   10ec0:	0002e0d4 	.word	0x0002e0d4
   10ec4:	0002e120 	.word	0x0002e120

00010ec8 <EFR_temp_subscribed_cb>:
		.ccc_handle = TTPMS_GATT_TEMP_HANDLE + 1,	// see note in ttpms_common.h
};


void EFR_temp_subscribed_cb(struct bt_conn *conn, uint8_t err, struct bt_gatt_subscribe_params *params)
{
   10ec8:	b500      	push	{lr}
   10eca:	b083      	sub	sp, #12
	if(params->value == BT_GATT_CCC_NOTIFY) {
   10ecc:	8a13      	ldrh	r3, [r2, #16]
   10ece:	2b01      	cmp	r3, #1
   10ed0:	d041      	beq.n	10f56 <EFR_temp_subscribed_cb+0x8e>

		atomic_set_bit(flags, EFR_SUBSCRIBED_FLAG);
		LOG_INF("EFR_temp_subscribed_cb: subscribed");

	} else if (params->value == 0) {
   10ed2:	2b00      	cmp	r3, #0
   10ed4:	d17d      	bne.n	10fd2 <EFR_temp_subscribed_cb+0x10a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   10ed6:	4b57      	ldr	r3, [pc, #348]	; (11034 <EFR_temp_subscribed_cb+0x16c>)
   10ed8:	f3bf 8f5b 	dmb	ish
   10edc:	e853 1f00 	ldrex	r1, [r3]
   10ee0:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
   10ee4:	e843 1200 	strex	r2, r1, [r3]
   10ee8:	2a00      	cmp	r2, #0
   10eea:	d1f7      	bne.n	10edc <EFR_temp_subscribed_cb+0x14>
   10eec:	f3bf 8f5b 	dmb	ish

		atomic_clear_bit(flags, EFR_SUBSCRIBED_FLAG);
		LOG_INF("EFR_temp_subscribed_cb: unsubscribed");
   10ef0:	2006      	movs	r0, #6
   10ef2:	f004 ff69 	bl	15dc8 <z_log_msg_alloc>
   10ef6:	2200      	movs	r2, #0
   10ef8:	f36f 0200 	bfc	r2, #0, #1
   10efc:	f36f 0241 	bfc	r2, #1, #1
   10f00:	f36f 0282 	bfc	r2, #2, #1
   10f04:	f36f 02c5 	bfc	r2, #3, #3
   10f08:	2303      	movs	r3, #3
   10f0a:	f363 1288 	bfi	r2, r3, #6, #3
   10f0e:	2308      	movs	r3, #8
   10f10:	f363 2252 	bfi	r2, r3, #9, #10
   10f14:	f36f 42de 	bfc	r2, #19, #12
   10f18:	f36f 72df 	bfc	r2, #31, #1
   10f1c:	4684      	mov	ip, r0
   10f1e:	b190      	cbz	r0, 10f46 <EFR_temp_subscribed_cb+0x7e>
   10f20:	f110 0310 	adds.w	r3, r0, #16
   10f24:	d001      	beq.n	10f2a <EFR_temp_subscribed_cb+0x62>
   10f26:	4944      	ldr	r1, [pc, #272]	; (11038 <EFR_temp_subscribed_cb+0x170>)
   10f28:	6141      	str	r1, [r0, #20]
   10f2a:	b163      	cbz	r3, 10f46 <EFR_temp_subscribed_cb+0x7e>
   10f2c:	2302      	movs	r3, #2
   10f2e:	f88d 3004 	strb.w	r3, [sp, #4]
   10f32:	2300      	movs	r3, #0
   10f34:	f88d 3005 	strb.w	r3, [sp, #5]
   10f38:	f88d 3006 	strb.w	r3, [sp, #6]
   10f3c:	f88d 3007 	strb.w	r3, [sp, #7]
   10f40:	9801      	ldr	r0, [sp, #4]
   10f42:	f8cc 0010 	str.w	r0, [ip, #16]
   10f46:	2300      	movs	r3, #0
   10f48:	493c      	ldr	r1, [pc, #240]	; (1103c <EFR_temp_subscribed_cb+0x174>)
   10f4a:	4660      	mov	r0, ip
   10f4c:	f016 ff47 	bl	27dde <z_log_msg_finalize>

	} else {
		LOG_WRN("EFR_temp_subscribed_cb: unknown CCC value");
	}
}
   10f50:	b003      	add	sp, #12
   10f52:	f85d fb04 	ldr.w	pc, [sp], #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   10f56:	4b37      	ldr	r3, [pc, #220]	; (11034 <EFR_temp_subscribed_cb+0x16c>)
   10f58:	f3bf 8f5b 	dmb	ish
   10f5c:	e853 1f00 	ldrex	r1, [r3]
   10f60:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
   10f64:	e843 1200 	strex	r2, r1, [r3]
   10f68:	2a00      	cmp	r2, #0
   10f6a:	d1f7      	bne.n	10f5c <EFR_temp_subscribed_cb+0x94>
   10f6c:	f3bf 8f5b 	dmb	ish
		LOG_INF("EFR_temp_subscribed_cb: subscribed");
   10f70:	2006      	movs	r0, #6
   10f72:	f004 ff29 	bl	15dc8 <z_log_msg_alloc>
   10f76:	2200      	movs	r2, #0
   10f78:	f36f 0200 	bfc	r2, #0, #1
   10f7c:	f36f 0241 	bfc	r2, #1, #1
   10f80:	f36f 0282 	bfc	r2, #2, #1
   10f84:	f36f 02c5 	bfc	r2, #3, #3
   10f88:	2303      	movs	r3, #3
   10f8a:	f363 1288 	bfi	r2, r3, #6, #3
   10f8e:	2308      	movs	r3, #8
   10f90:	f363 2252 	bfi	r2, r3, #9, #10
   10f94:	f36f 42de 	bfc	r2, #19, #12
   10f98:	f36f 72df 	bfc	r2, #31, #1
   10f9c:	4684      	mov	ip, r0
   10f9e:	b190      	cbz	r0, 10fc6 <EFR_temp_subscribed_cb+0xfe>
   10fa0:	f110 0310 	adds.w	r3, r0, #16
   10fa4:	d001      	beq.n	10faa <EFR_temp_subscribed_cb+0xe2>
   10fa6:	4926      	ldr	r1, [pc, #152]	; (11040 <EFR_temp_subscribed_cb+0x178>)
   10fa8:	6141      	str	r1, [r0, #20]
   10faa:	b163      	cbz	r3, 10fc6 <EFR_temp_subscribed_cb+0xfe>
   10fac:	2302      	movs	r3, #2
   10fae:	f88d 3004 	strb.w	r3, [sp, #4]
   10fb2:	2300      	movs	r3, #0
   10fb4:	f88d 3005 	strb.w	r3, [sp, #5]
   10fb8:	f88d 3006 	strb.w	r3, [sp, #6]
   10fbc:	f88d 3007 	strb.w	r3, [sp, #7]
   10fc0:	9801      	ldr	r0, [sp, #4]
   10fc2:	f8cc 0010 	str.w	r0, [ip, #16]
   10fc6:	2300      	movs	r3, #0
   10fc8:	491c      	ldr	r1, [pc, #112]	; (1103c <EFR_temp_subscribed_cb+0x174>)
   10fca:	4660      	mov	r0, ip
   10fcc:	f016 ff07 	bl	27dde <z_log_msg_finalize>
   10fd0:	e7be      	b.n	10f50 <EFR_temp_subscribed_cb+0x88>
		LOG_WRN("EFR_temp_subscribed_cb: unknown CCC value");
   10fd2:	2006      	movs	r0, #6
   10fd4:	f004 fef8 	bl	15dc8 <z_log_msg_alloc>
   10fd8:	2200      	movs	r2, #0
   10fda:	f36f 0200 	bfc	r2, #0, #1
   10fde:	f36f 0241 	bfc	r2, #1, #1
   10fe2:	f36f 0282 	bfc	r2, #2, #1
   10fe6:	f36f 02c5 	bfc	r2, #3, #3
   10fea:	2302      	movs	r3, #2
   10fec:	f363 1288 	bfi	r2, r3, #6, #3
   10ff0:	2308      	movs	r3, #8
   10ff2:	f363 2252 	bfi	r2, r3, #9, #10
   10ff6:	f36f 42de 	bfc	r2, #19, #12
   10ffa:	f36f 72df 	bfc	r2, #31, #1
   10ffe:	4684      	mov	ip, r0
   11000:	b190      	cbz	r0, 11028 <EFR_temp_subscribed_cb+0x160>
   11002:	f110 0310 	adds.w	r3, r0, #16
   11006:	d001      	beq.n	1100c <EFR_temp_subscribed_cb+0x144>
   11008:	490e      	ldr	r1, [pc, #56]	; (11044 <EFR_temp_subscribed_cb+0x17c>)
   1100a:	6141      	str	r1, [r0, #20]
   1100c:	b163      	cbz	r3, 11028 <EFR_temp_subscribed_cb+0x160>
   1100e:	2302      	movs	r3, #2
   11010:	f88d 3004 	strb.w	r3, [sp, #4]
   11014:	2300      	movs	r3, #0
   11016:	f88d 3005 	strb.w	r3, [sp, #5]
   1101a:	f88d 3006 	strb.w	r3, [sp, #6]
   1101e:	f88d 3007 	strb.w	r3, [sp, #7]
   11022:	9801      	ldr	r0, [sp, #4]
   11024:	f8cc 0010 	str.w	r0, [ip, #16]
   11028:	2300      	movs	r3, #0
   1102a:	4904      	ldr	r1, [pc, #16]	; (1103c <EFR_temp_subscribed_cb+0x174>)
   1102c:	4660      	mov	r0, ip
   1102e:	f016 fed6 	bl	27dde <z_log_msg_finalize>
}
   11032:	e78d      	b.n	10f50 <EFR_temp_subscribed_cb+0x88>
   11034:	20007b0c 	.word	0x20007b0c
   11038:	0002e170 	.word	0x0002e170
   1103c:	0002df40 	.word	0x0002df40
   11040:	0002e14c 	.word	0x0002e14c
   11044:	0002e198 	.word	0x0002e198

00011048 <ERL_temp_subscribed_cb>:
		.value_handle = TTPMS_GATT_TEMP_HANDLE,
		.ccc_handle = TTPMS_GATT_TEMP_HANDLE + 1,	// see note in ttpms_common.h
};

void ERL_temp_subscribed_cb(struct bt_conn *conn, uint8_t err, struct bt_gatt_subscribe_params *params)
{
   11048:	b500      	push	{lr}
   1104a:	b083      	sub	sp, #12
	if(params->value == BT_GATT_CCC_NOTIFY) {
   1104c:	8a13      	ldrh	r3, [r2, #16]
   1104e:	2b01      	cmp	r3, #1
   11050:	d041      	beq.n	110d6 <ERL_temp_subscribed_cb+0x8e>

		atomic_set_bit(flags, ERL_SUBSCRIBED_FLAG);
		LOG_INF("ERL_temp_subscribed_cb: subscribed");

	} else if (params->value == 0) {
   11052:	2b00      	cmp	r3, #0
   11054:	d17d      	bne.n	11152 <ERL_temp_subscribed_cb+0x10a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   11056:	4b57      	ldr	r3, [pc, #348]	; (111b4 <ERL_temp_subscribed_cb+0x16c>)
   11058:	f3bf 8f5b 	dmb	ish
   1105c:	e853 1f00 	ldrex	r1, [r3]
   11060:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
   11064:	e843 1200 	strex	r2, r1, [r3]
   11068:	2a00      	cmp	r2, #0
   1106a:	d1f7      	bne.n	1105c <ERL_temp_subscribed_cb+0x14>
   1106c:	f3bf 8f5b 	dmb	ish

		atomic_clear_bit(flags, ERL_SUBSCRIBED_FLAG);
		LOG_INF("ERL_temp_subscribed_cb: unsubscribed");
   11070:	2006      	movs	r0, #6
   11072:	f004 fea9 	bl	15dc8 <z_log_msg_alloc>
   11076:	2200      	movs	r2, #0
   11078:	f36f 0200 	bfc	r2, #0, #1
   1107c:	f36f 0241 	bfc	r2, #1, #1
   11080:	f36f 0282 	bfc	r2, #2, #1
   11084:	f36f 02c5 	bfc	r2, #3, #3
   11088:	2303      	movs	r3, #3
   1108a:	f363 1288 	bfi	r2, r3, #6, #3
   1108e:	2308      	movs	r3, #8
   11090:	f363 2252 	bfi	r2, r3, #9, #10
   11094:	f36f 42de 	bfc	r2, #19, #12
   11098:	f36f 72df 	bfc	r2, #31, #1
   1109c:	4684      	mov	ip, r0
   1109e:	b190      	cbz	r0, 110c6 <ERL_temp_subscribed_cb+0x7e>
   110a0:	f110 0310 	adds.w	r3, r0, #16
   110a4:	d001      	beq.n	110aa <ERL_temp_subscribed_cb+0x62>
   110a6:	4944      	ldr	r1, [pc, #272]	; (111b8 <ERL_temp_subscribed_cb+0x170>)
   110a8:	6141      	str	r1, [r0, #20]
   110aa:	b163      	cbz	r3, 110c6 <ERL_temp_subscribed_cb+0x7e>
   110ac:	2302      	movs	r3, #2
   110ae:	f88d 3004 	strb.w	r3, [sp, #4]
   110b2:	2300      	movs	r3, #0
   110b4:	f88d 3005 	strb.w	r3, [sp, #5]
   110b8:	f88d 3006 	strb.w	r3, [sp, #6]
   110bc:	f88d 3007 	strb.w	r3, [sp, #7]
   110c0:	9801      	ldr	r0, [sp, #4]
   110c2:	f8cc 0010 	str.w	r0, [ip, #16]
   110c6:	2300      	movs	r3, #0
   110c8:	493c      	ldr	r1, [pc, #240]	; (111bc <ERL_temp_subscribed_cb+0x174>)
   110ca:	4660      	mov	r0, ip
   110cc:	f016 fe87 	bl	27dde <z_log_msg_finalize>

	} else {
		LOG_WRN("ERL_temp_subscribed_cb: unknown CCC value");
	}
}
   110d0:	b003      	add	sp, #12
   110d2:	f85d fb04 	ldr.w	pc, [sp], #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   110d6:	4b37      	ldr	r3, [pc, #220]	; (111b4 <ERL_temp_subscribed_cb+0x16c>)
   110d8:	f3bf 8f5b 	dmb	ish
   110dc:	e853 1f00 	ldrex	r1, [r3]
   110e0:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
   110e4:	e843 1200 	strex	r2, r1, [r3]
   110e8:	2a00      	cmp	r2, #0
   110ea:	d1f7      	bne.n	110dc <ERL_temp_subscribed_cb+0x94>
   110ec:	f3bf 8f5b 	dmb	ish
		LOG_INF("ERL_temp_subscribed_cb: subscribed");
   110f0:	2006      	movs	r0, #6
   110f2:	f004 fe69 	bl	15dc8 <z_log_msg_alloc>
   110f6:	2200      	movs	r2, #0
   110f8:	f36f 0200 	bfc	r2, #0, #1
   110fc:	f36f 0241 	bfc	r2, #1, #1
   11100:	f36f 0282 	bfc	r2, #2, #1
   11104:	f36f 02c5 	bfc	r2, #3, #3
   11108:	2303      	movs	r3, #3
   1110a:	f363 1288 	bfi	r2, r3, #6, #3
   1110e:	2308      	movs	r3, #8
   11110:	f363 2252 	bfi	r2, r3, #9, #10
   11114:	f36f 42de 	bfc	r2, #19, #12
   11118:	f36f 72df 	bfc	r2, #31, #1
   1111c:	4684      	mov	ip, r0
   1111e:	b190      	cbz	r0, 11146 <ERL_temp_subscribed_cb+0xfe>
   11120:	f110 0310 	adds.w	r3, r0, #16
   11124:	d001      	beq.n	1112a <ERL_temp_subscribed_cb+0xe2>
   11126:	4926      	ldr	r1, [pc, #152]	; (111c0 <ERL_temp_subscribed_cb+0x178>)
   11128:	6141      	str	r1, [r0, #20]
   1112a:	b163      	cbz	r3, 11146 <ERL_temp_subscribed_cb+0xfe>
   1112c:	2302      	movs	r3, #2
   1112e:	f88d 3004 	strb.w	r3, [sp, #4]
   11132:	2300      	movs	r3, #0
   11134:	f88d 3005 	strb.w	r3, [sp, #5]
   11138:	f88d 3006 	strb.w	r3, [sp, #6]
   1113c:	f88d 3007 	strb.w	r3, [sp, #7]
   11140:	9801      	ldr	r0, [sp, #4]
   11142:	f8cc 0010 	str.w	r0, [ip, #16]
   11146:	2300      	movs	r3, #0
   11148:	491c      	ldr	r1, [pc, #112]	; (111bc <ERL_temp_subscribed_cb+0x174>)
   1114a:	4660      	mov	r0, ip
   1114c:	f016 fe47 	bl	27dde <z_log_msg_finalize>
   11150:	e7be      	b.n	110d0 <ERL_temp_subscribed_cb+0x88>
		LOG_WRN("ERL_temp_subscribed_cb: unknown CCC value");
   11152:	2006      	movs	r0, #6
   11154:	f004 fe38 	bl	15dc8 <z_log_msg_alloc>
   11158:	2200      	movs	r2, #0
   1115a:	f36f 0200 	bfc	r2, #0, #1
   1115e:	f36f 0241 	bfc	r2, #1, #1
   11162:	f36f 0282 	bfc	r2, #2, #1
   11166:	f36f 02c5 	bfc	r2, #3, #3
   1116a:	2302      	movs	r3, #2
   1116c:	f363 1288 	bfi	r2, r3, #6, #3
   11170:	2308      	movs	r3, #8
   11172:	f363 2252 	bfi	r2, r3, #9, #10
   11176:	f36f 42de 	bfc	r2, #19, #12
   1117a:	f36f 72df 	bfc	r2, #31, #1
   1117e:	4684      	mov	ip, r0
   11180:	b190      	cbz	r0, 111a8 <ERL_temp_subscribed_cb+0x160>
   11182:	f110 0310 	adds.w	r3, r0, #16
   11186:	d001      	beq.n	1118c <ERL_temp_subscribed_cb+0x144>
   11188:	490e      	ldr	r1, [pc, #56]	; (111c4 <ERL_temp_subscribed_cb+0x17c>)
   1118a:	6141      	str	r1, [r0, #20]
   1118c:	b163      	cbz	r3, 111a8 <ERL_temp_subscribed_cb+0x160>
   1118e:	2302      	movs	r3, #2
   11190:	f88d 3004 	strb.w	r3, [sp, #4]
   11194:	2300      	movs	r3, #0
   11196:	f88d 3005 	strb.w	r3, [sp, #5]
   1119a:	f88d 3006 	strb.w	r3, [sp, #6]
   1119e:	f88d 3007 	strb.w	r3, [sp, #7]
   111a2:	9801      	ldr	r0, [sp, #4]
   111a4:	f8cc 0010 	str.w	r0, [ip, #16]
   111a8:	2300      	movs	r3, #0
   111aa:	4904      	ldr	r1, [pc, #16]	; (111bc <ERL_temp_subscribed_cb+0x174>)
   111ac:	4660      	mov	r0, ip
   111ae:	f016 fe16 	bl	27dde <z_log_msg_finalize>
}
   111b2:	e78d      	b.n	110d0 <ERL_temp_subscribed_cb+0x88>
   111b4:	20007b0c 	.word	0x20007b0c
   111b8:	0002e1e8 	.word	0x0002e1e8
   111bc:	0002df40 	.word	0x0002df40
   111c0:	0002e1c4 	.word	0x0002e1c4
   111c4:	0002e210 	.word	0x0002e210

000111c8 <ERR_temp_subscribed_cb>:
		.ccc_handle = TTPMS_GATT_TEMP_HANDLE + 1,	// see note in ttpms_common.h
};


void ERR_temp_subscribed_cb(struct bt_conn *conn, uint8_t err, struct bt_gatt_subscribe_params *params)
{
   111c8:	b500      	push	{lr}
   111ca:	b083      	sub	sp, #12
	if(params->value == BT_GATT_CCC_NOTIFY) {
   111cc:	8a13      	ldrh	r3, [r2, #16]
   111ce:	2b01      	cmp	r3, #1
   111d0:	d041      	beq.n	11256 <ERR_temp_subscribed_cb+0x8e>

		atomic_set_bit(flags, ERR_SUBSCRIBED_FLAG);
		LOG_INF("ERR_temp_subscribed_cb: subscribed");

	} else if (params->value == 0) {
   111d2:	2b00      	cmp	r3, #0
   111d4:	d17d      	bne.n	112d2 <ERR_temp_subscribed_cb+0x10a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   111d6:	4b57      	ldr	r3, [pc, #348]	; (11334 <ERR_temp_subscribed_cb+0x16c>)
   111d8:	f3bf 8f5b 	dmb	ish
   111dc:	e853 1f00 	ldrex	r1, [r3]
   111e0:	f421 3100 	bic.w	r1, r1, #131072	; 0x20000
   111e4:	e843 1200 	strex	r2, r1, [r3]
   111e8:	2a00      	cmp	r2, #0
   111ea:	d1f7      	bne.n	111dc <ERR_temp_subscribed_cb+0x14>
   111ec:	f3bf 8f5b 	dmb	ish

		atomic_clear_bit(flags, ERR_SUBSCRIBED_FLAG);
		LOG_INF("ERR_temp_subscribed_cb: unsubscribed");
   111f0:	2006      	movs	r0, #6
   111f2:	f004 fde9 	bl	15dc8 <z_log_msg_alloc>
   111f6:	2200      	movs	r2, #0
   111f8:	f36f 0200 	bfc	r2, #0, #1
   111fc:	f36f 0241 	bfc	r2, #1, #1
   11200:	f36f 0282 	bfc	r2, #2, #1
   11204:	f36f 02c5 	bfc	r2, #3, #3
   11208:	2303      	movs	r3, #3
   1120a:	f363 1288 	bfi	r2, r3, #6, #3
   1120e:	2308      	movs	r3, #8
   11210:	f363 2252 	bfi	r2, r3, #9, #10
   11214:	f36f 42de 	bfc	r2, #19, #12
   11218:	f36f 72df 	bfc	r2, #31, #1
   1121c:	4684      	mov	ip, r0
   1121e:	b190      	cbz	r0, 11246 <ERR_temp_subscribed_cb+0x7e>
   11220:	f110 0310 	adds.w	r3, r0, #16
   11224:	d001      	beq.n	1122a <ERR_temp_subscribed_cb+0x62>
   11226:	4944      	ldr	r1, [pc, #272]	; (11338 <ERR_temp_subscribed_cb+0x170>)
   11228:	6141      	str	r1, [r0, #20]
   1122a:	b163      	cbz	r3, 11246 <ERR_temp_subscribed_cb+0x7e>
   1122c:	2302      	movs	r3, #2
   1122e:	f88d 3004 	strb.w	r3, [sp, #4]
   11232:	2300      	movs	r3, #0
   11234:	f88d 3005 	strb.w	r3, [sp, #5]
   11238:	f88d 3006 	strb.w	r3, [sp, #6]
   1123c:	f88d 3007 	strb.w	r3, [sp, #7]
   11240:	9801      	ldr	r0, [sp, #4]
   11242:	f8cc 0010 	str.w	r0, [ip, #16]
   11246:	2300      	movs	r3, #0
   11248:	493c      	ldr	r1, [pc, #240]	; (1133c <ERR_temp_subscribed_cb+0x174>)
   1124a:	4660      	mov	r0, ip
   1124c:	f016 fdc7 	bl	27dde <z_log_msg_finalize>

	} else {
		LOG_WRN("ERR_temp_subscribed_cb: unknown CCC value");
	}
}
   11250:	b003      	add	sp, #12
   11252:	f85d fb04 	ldr.w	pc, [sp], #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   11256:	4b37      	ldr	r3, [pc, #220]	; (11334 <ERR_temp_subscribed_cb+0x16c>)
   11258:	f3bf 8f5b 	dmb	ish
   1125c:	e853 1f00 	ldrex	r1, [r3]
   11260:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
   11264:	e843 1200 	strex	r2, r1, [r3]
   11268:	2a00      	cmp	r2, #0
   1126a:	d1f7      	bne.n	1125c <ERR_temp_subscribed_cb+0x94>
   1126c:	f3bf 8f5b 	dmb	ish
		LOG_INF("ERR_temp_subscribed_cb: subscribed");
   11270:	2006      	movs	r0, #6
   11272:	f004 fda9 	bl	15dc8 <z_log_msg_alloc>
   11276:	2200      	movs	r2, #0
   11278:	f36f 0200 	bfc	r2, #0, #1
   1127c:	f36f 0241 	bfc	r2, #1, #1
   11280:	f36f 0282 	bfc	r2, #2, #1
   11284:	f36f 02c5 	bfc	r2, #3, #3
   11288:	2303      	movs	r3, #3
   1128a:	f363 1288 	bfi	r2, r3, #6, #3
   1128e:	2308      	movs	r3, #8
   11290:	f363 2252 	bfi	r2, r3, #9, #10
   11294:	f36f 42de 	bfc	r2, #19, #12
   11298:	f36f 72df 	bfc	r2, #31, #1
   1129c:	4684      	mov	ip, r0
   1129e:	b190      	cbz	r0, 112c6 <ERR_temp_subscribed_cb+0xfe>
   112a0:	f110 0310 	adds.w	r3, r0, #16
   112a4:	d001      	beq.n	112aa <ERR_temp_subscribed_cb+0xe2>
   112a6:	4926      	ldr	r1, [pc, #152]	; (11340 <ERR_temp_subscribed_cb+0x178>)
   112a8:	6141      	str	r1, [r0, #20]
   112aa:	b163      	cbz	r3, 112c6 <ERR_temp_subscribed_cb+0xfe>
   112ac:	2302      	movs	r3, #2
   112ae:	f88d 3004 	strb.w	r3, [sp, #4]
   112b2:	2300      	movs	r3, #0
   112b4:	f88d 3005 	strb.w	r3, [sp, #5]
   112b8:	f88d 3006 	strb.w	r3, [sp, #6]
   112bc:	f88d 3007 	strb.w	r3, [sp, #7]
   112c0:	9801      	ldr	r0, [sp, #4]
   112c2:	f8cc 0010 	str.w	r0, [ip, #16]
   112c6:	2300      	movs	r3, #0
   112c8:	491c      	ldr	r1, [pc, #112]	; (1133c <ERR_temp_subscribed_cb+0x174>)
   112ca:	4660      	mov	r0, ip
   112cc:	f016 fd87 	bl	27dde <z_log_msg_finalize>
   112d0:	e7be      	b.n	11250 <ERR_temp_subscribed_cb+0x88>
		LOG_WRN("ERR_temp_subscribed_cb: unknown CCC value");
   112d2:	2006      	movs	r0, #6
   112d4:	f004 fd78 	bl	15dc8 <z_log_msg_alloc>
   112d8:	2200      	movs	r2, #0
   112da:	f36f 0200 	bfc	r2, #0, #1
   112de:	f36f 0241 	bfc	r2, #1, #1
   112e2:	f36f 0282 	bfc	r2, #2, #1
   112e6:	f36f 02c5 	bfc	r2, #3, #3
   112ea:	2302      	movs	r3, #2
   112ec:	f363 1288 	bfi	r2, r3, #6, #3
   112f0:	2308      	movs	r3, #8
   112f2:	f363 2252 	bfi	r2, r3, #9, #10
   112f6:	f36f 42de 	bfc	r2, #19, #12
   112fa:	f36f 72df 	bfc	r2, #31, #1
   112fe:	4684      	mov	ip, r0
   11300:	b190      	cbz	r0, 11328 <ERR_temp_subscribed_cb+0x160>
   11302:	f110 0310 	adds.w	r3, r0, #16
   11306:	d001      	beq.n	1130c <ERR_temp_subscribed_cb+0x144>
   11308:	490e      	ldr	r1, [pc, #56]	; (11344 <ERR_temp_subscribed_cb+0x17c>)
   1130a:	6141      	str	r1, [r0, #20]
   1130c:	b163      	cbz	r3, 11328 <ERR_temp_subscribed_cb+0x160>
   1130e:	2302      	movs	r3, #2
   11310:	f88d 3004 	strb.w	r3, [sp, #4]
   11314:	2300      	movs	r3, #0
   11316:	f88d 3005 	strb.w	r3, [sp, #5]
   1131a:	f88d 3006 	strb.w	r3, [sp, #6]
   1131e:	f88d 3007 	strb.w	r3, [sp, #7]
   11322:	9801      	ldr	r0, [sp, #4]
   11324:	f8cc 0010 	str.w	r0, [ip, #16]
   11328:	2300      	movs	r3, #0
   1132a:	4904      	ldr	r1, [pc, #16]	; (1133c <ERR_temp_subscribed_cb+0x174>)
   1132c:	4660      	mov	r0, ip
   1132e:	f016 fd56 	bl	27dde <z_log_msg_finalize>
}
   11332:	e78d      	b.n	11250 <ERR_temp_subscribed_cb+0x88>
   11334:	20007b0c 	.word	0x20007b0c
   11338:	0002e260 	.word	0x0002e260
   1133c:	0002df40 	.word	0x0002df40
   11340:	0002e23c 	.word	0x0002e23c
   11344:	0002e288 	.word	0x0002e288

00011348 <bt_addr_le_to_str>:
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
   11348:	b5f0      	push	{r4, r5, r6, r7, lr}
   1134a:	b08b      	sub	sp, #44	; 0x2c
   1134c:	4604      	mov	r4, r0
   1134e:	460d      	mov	r5, r1
   11350:	4616      	mov	r6, r2
	char type[10];

	switch (addr->type) {
   11352:	7803      	ldrb	r3, [r0, #0]
   11354:	2b03      	cmp	r3, #3
   11356:	d82c      	bhi.n	113b2 <bt_addr_le_to_str+0x6a>
   11358:	e8df f003 	tbb	[pc, r3]
   1135c:	26211c02 	.word	0x26211c02
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   11360:	4917      	ldr	r1, [pc, #92]	; (113c0 <bt_addr_le_to_str+0x78>)
   11362:	a807      	add	r0, sp, #28
   11364:	f017 f939 	bl	285da <strcpy>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
   11368:	7963      	ldrb	r3, [r4, #5]
   1136a:	7922      	ldrb	r2, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
   1136c:	78e1      	ldrb	r1, [r4, #3]
   1136e:	78a0      	ldrb	r0, [r4, #2]
   11370:	7867      	ldrb	r7, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   11372:	f10d 0c1c 	add.w	ip, sp, #28
   11376:	f8cd c014 	str.w	ip, [sp, #20]
   1137a:	9704      	str	r7, [sp, #16]
   1137c:	9003      	str	r0, [sp, #12]
   1137e:	9102      	str	r1, [sp, #8]
   11380:	9201      	str	r2, [sp, #4]
   11382:	9300      	str	r3, [sp, #0]
   11384:	79a3      	ldrb	r3, [r4, #6]
   11386:	4a0f      	ldr	r2, [pc, #60]	; (113c4 <bt_addr_le_to_str+0x7c>)
   11388:	4631      	mov	r1, r6
   1138a:	4628      	mov	r0, r5
   1138c:	f015 fc46 	bl	26c1c <snprintk>
}
   11390:	b00b      	add	sp, #44	; 0x2c
   11392:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
   11394:	490c      	ldr	r1, [pc, #48]	; (113c8 <bt_addr_le_to_str+0x80>)
   11396:	a807      	add	r0, sp, #28
   11398:	f017 f91f 	bl	285da <strcpy>
		break;
   1139c:	e7e4      	b.n	11368 <bt_addr_le_to_str+0x20>
		strcpy(type, "public-id");
   1139e:	490b      	ldr	r1, [pc, #44]	; (113cc <bt_addr_le_to_str+0x84>)
   113a0:	a807      	add	r0, sp, #28
   113a2:	f017 f91a 	bl	285da <strcpy>
		break;
   113a6:	e7df      	b.n	11368 <bt_addr_le_to_str+0x20>
		strcpy(type, "random-id");
   113a8:	4909      	ldr	r1, [pc, #36]	; (113d0 <bt_addr_le_to_str+0x88>)
   113aa:	a807      	add	r0, sp, #28
   113ac:	f017 f915 	bl	285da <strcpy>
		break;
   113b0:	e7da      	b.n	11368 <bt_addr_le_to_str+0x20>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   113b2:	4a08      	ldr	r2, [pc, #32]	; (113d4 <bt_addr_le_to_str+0x8c>)
   113b4:	210a      	movs	r1, #10
   113b6:	a807      	add	r0, sp, #28
   113b8:	f015 fc30 	bl	26c1c <snprintk>
		break;
   113bc:	e7d4      	b.n	11368 <bt_addr_le_to_str+0x20>
   113be:	bf00      	nop
   113c0:	0002e2b4 	.word	0x0002e2b4
   113c4:	0002e2dc 	.word	0x0002e2dc
   113c8:	0002e2bc 	.word	0x0002e2bc
   113cc:	0002e2c4 	.word	0x0002e2c4
   113d0:	0002e2d0 	.word	0x0002e2d0
   113d4:	000303b8 	.word	0x000303b8

000113d8 <disconnected>:
{
   113d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   113da:	b08b      	sub	sp, #44	; 0x2c
   113dc:	af00      	add	r7, sp, #0
   113de:	460d      	mov	r5, r1
	const bt_addr_le_t *addr = bt_conn_get_dst(conn);
   113e0:	f017 fe12 	bl	29008 <bt_conn_get_dst>
   113e4:	4604      	mov	r4, r0
	bt_addr_le_to_str(addr, addr_str, sizeof(addr_str));
   113e6:	221e      	movs	r2, #30
   113e8:	f107 0108 	add.w	r1, r7, #8
   113ec:	f7ff ffac 	bl	11348 <bt_addr_le_to_str>
	return memcmp(a, b, sizeof(*a));
   113f0:	2207      	movs	r2, #7
   113f2:	49b1      	ldr	r1, [pc, #708]	; (116b8 <disconnected+0x2e0>)
   113f4:	4620      	mov	r0, r4
   113f6:	f017 f932 	bl	2865e <memcmp>
	if (bt_addr_le_eq(addr, &IFL_bt_addr)) {
   113fa:	2800      	cmp	r0, #0
   113fc:	f040 809d 	bne.w	1153a <disconnected+0x162>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   11400:	4bae      	ldr	r3, [pc, #696]	; (116bc <disconnected+0x2e4>)
   11402:	f3bf 8f5b 	dmb	ish
   11406:	e853 2f00 	ldrex	r2, [r3]
   1140a:	f022 0201 	bic.w	r2, r2, #1
   1140e:	e843 2100 	strex	r1, r2, [r3]
   11412:	2900      	cmp	r1, #0
   11414:	d1f7      	bne.n	11406 <disconnected+0x2e>
   11416:	f3bf 8f5b 	dmb	ish
   1141a:	f3bf 8f5b 	dmb	ish
   1141e:	e853 1f00 	ldrex	r1, [r3]
   11422:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
   11426:	e843 1200 	strex	r2, r1, [r3]
   1142a:	2a00      	cmp	r2, #0
   1142c:	d1f7      	bne.n	1141e <disconnected+0x46>
   1142e:	f3bf 8f5b 	dmb	ish
		LOG_INF("Internal FL disconnected, addr: %s (reason 0x%02x)", addr_str, reason);
   11432:	466c      	mov	r4, sp
   11434:	2300      	movs	r3, #0
   11436:	713b      	strb	r3, [r7, #4]
   11438:	2302      	movs	r3, #2
   1143a:	717b      	strb	r3, [r7, #5]
   1143c:	b08a      	sub	sp, #40	; 0x28
   1143e:	46ec      	mov	ip, sp
   11440:	f11c 0210 	adds.w	r2, ip, #16
   11444:	d01a      	beq.n	1147c <disconnected+0xa4>
   11446:	2012      	movs	r0, #18
   11448:	b122      	cbz	r2, 11454 <disconnected+0x7c>
   1144a:	2804      	cmp	r0, #4
   1144c:	dd02      	ble.n	11454 <disconnected+0x7c>
   1144e:	4b9c      	ldr	r3, [pc, #624]	; (116c0 <disconnected+0x2e8>)
   11450:	f8cc 3014 	str.w	r3, [ip, #20]
   11454:	2300      	movs	r3, #0
   11456:	703b      	strb	r3, [r7, #0]
   11458:	2302      	movs	r3, #2
   1145a:	707b      	strb	r3, [r7, #1]
   1145c:	b1da      	cbz	r2, 11496 <disconnected+0xbe>
   1145e:	4603      	mov	r3, r0
   11460:	2808      	cmp	r0, #8
   11462:	dd03      	ble.n	1146c <disconnected+0x94>
   11464:	f107 0108 	add.w	r1, r7, #8
   11468:	f8cc 1018 	str.w	r1, [ip, #24]
   1146c:	2b0c      	cmp	r3, #12
   1146e:	dd01      	ble.n	11474 <disconnected+0x9c>
   11470:	f8cc 501c 	str.w	r5, [ip, #28]
   11474:	f10c 0320 	add.w	r3, ip, #32
   11478:	2100      	movs	r1, #0
   1147a:	e00a      	b.n	11492 <disconnected+0xba>
   1147c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   11480:	e7e2      	b.n	11448 <disconnected+0x70>
   11482:	f101 0528 	add.w	r5, r1, #40	; 0x28
   11486:	443d      	add	r5, r7
   11488:	f815 5c28 	ldrb.w	r5, [r5, #-40]
   1148c:	f803 5b01 	strb.w	r5, [r3], #1
   11490:	3101      	adds	r1, #1
   11492:	2901      	cmp	r1, #1
   11494:	d9f5      	bls.n	11482 <disconnected+0xaa>
   11496:	2811      	cmp	r0, #17
   11498:	dd4c      	ble.n	11534 <disconnected+0x15c>
   1149a:	2312      	movs	r3, #18
   1149c:	b14a      	cbz	r2, 114b2 <disconnected+0xda>
   1149e:	2104      	movs	r1, #4
   114a0:	7139      	strb	r1, [r7, #4]
   114a2:	2100      	movs	r1, #0
   114a4:	7179      	strb	r1, [r7, #5]
   114a6:	71b9      	strb	r1, [r7, #6]
   114a8:	2101      	movs	r1, #1
   114aa:	71f9      	strb	r1, [r7, #7]
   114ac:	6878      	ldr	r0, [r7, #4]
   114ae:	f8cc 0010 	str.w	r0, [ip, #16]
   114b2:	2100      	movs	r1, #0
   114b4:	f36f 0100 	bfc	r1, #0, #1
   114b8:	f36f 0141 	bfc	r1, #1, #1
   114bc:	f36f 0182 	bfc	r1, #2, #1
   114c0:	f36f 01c5 	bfc	r1, #3, #3
   114c4:	2003      	movs	r0, #3
   114c6:	f360 1188 	bfi	r1, r0, #6, #3
   114ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
   114ce:	f363 2152 	bfi	r1, r3, #9, #10
   114d2:	f36f 41de 	bfc	r1, #19, #12
   114d6:	f36f 71df 	bfc	r1, #31, #1
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
   114da:	2300      	movs	r3, #0
   114dc:	4879      	ldr	r0, [pc, #484]	; (116c4 <disconnected+0x2ec>)
   114de:	f016 fc96 	bl	27e0e <z_impl_z_log_msg_static_create>
   114e2:	46a5      	mov	sp, r4
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   114e4:	f3bf 8f5b 	dmb	ish
   114e8:	4b74      	ldr	r3, [pc, #464]	; (116bc <disconnected+0x2e4>)
   114ea:	681b      	ldr	r3, [r3, #0]
   114ec:	f3bf 8f5b 	dmb	ish
	if (!(atomic_test_bit(flags, EFL_CONNECTED_FLAG) && atomic_test_bit(flags, EFR_CONNECTED_FLAG) && atomic_test_bit(flags, ERL_CONNECTED_FLAG) && atomic_test_bit(flags, ERR_CONNECTED_FLAG))) {
   114f0:	f013 0f10 	tst.w	r3, #16
   114f4:	d009      	beq.n	1150a <disconnected+0x132>
   114f6:	f3bf 8f5b 	dmb	ish
   114fa:	4b70      	ldr	r3, [pc, #448]	; (116bc <disconnected+0x2e4>)
   114fc:	681b      	ldr	r3, [r3, #0]
   114fe:	f3bf 8f5b 	dmb	ish
   11502:	f013 0f20 	tst.w	r3, #32
   11506:	f040 83e8 	bne.w	11cda <disconnected+0x902>
		err = bt_conn_create_auto_stop();
   1150a:	f00b f921 	bl	1c750 <bt_conn_create_auto_stop>
		if (err) {
   1150e:	4605      	mov	r5, r0
   11510:	2800      	cmp	r0, #0
   11512:	f040 8405 	bne.w	11d20 <disconnected+0x948>
		scan_param.interval = BT_GAP_SCAN_FAST_INTERVAL;
   11516:	486c      	ldr	r0, [pc, #432]	; (116c8 <disconnected+0x2f0>)
   11518:	2360      	movs	r3, #96	; 0x60
   1151a:	8083      	strh	r3, [r0, #4]
		scan_param.window = BT_GAP_SCAN_FAST_WINDOW;
   1151c:	2330      	movs	r3, #48	; 0x30
   1151e:	80c3      	strh	r3, [r0, #6]
		err = bt_conn_le_create_auto(&scan_param, &conn_param);
   11520:	496a      	ldr	r1, [pc, #424]	; (116cc <disconnected+0x2f4>)
   11522:	f00b f863 	bl	1c5ec <bt_conn_le_create_auto>
		if (err) {
   11526:	4605      	mov	r5, r0
   11528:	2800      	cmp	r0, #0
   1152a:	f040 8427 	bne.w	11d7c <disconnected+0x9a4>
}
   1152e:	372c      	adds	r7, #44	; 0x2c
   11530:	46bd      	mov	sp, r7
   11532:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_INF("Internal FL disconnected, addr: %s (reason 0x%02x)", addr_str, reason);
   11534:	f06f 031b 	mvn.w	r3, #27
   11538:	e7b0      	b.n	1149c <disconnected+0xc4>
   1153a:	2207      	movs	r2, #7
   1153c:	4964      	ldr	r1, [pc, #400]	; (116d0 <disconnected+0x2f8>)
   1153e:	4620      	mov	r0, r4
   11540:	f017 f88d 	bl	2865e <memcmp>
	} else if (bt_addr_le_eq(addr, &IFR_bt_addr)) {
   11544:	2800      	cmp	r0, #0
   11546:	d171      	bne.n	1162c <disconnected+0x254>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   11548:	4b5c      	ldr	r3, [pc, #368]	; (116bc <disconnected+0x2e4>)
   1154a:	f3bf 8f5b 	dmb	ish
   1154e:	e853 2f00 	ldrex	r2, [r3]
   11552:	f022 0202 	bic.w	r2, r2, #2
   11556:	e843 2100 	strex	r1, r2, [r3]
   1155a:	2900      	cmp	r1, #0
   1155c:	d1f7      	bne.n	1154e <disconnected+0x176>
   1155e:	f3bf 8f5b 	dmb	ish
   11562:	f3bf 8f5b 	dmb	ish
   11566:	e853 1f00 	ldrex	r1, [r3]
   1156a:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
   1156e:	e843 1200 	strex	r2, r1, [r3]
   11572:	2a00      	cmp	r2, #0
   11574:	d1f7      	bne.n	11566 <disconnected+0x18e>
   11576:	f3bf 8f5b 	dmb	ish
		LOG_INF("Internal FR disconnected, addr: %s (reason 0x%02x)", addr_str, reason);
   1157a:	466e      	mov	r6, sp
   1157c:	2300      	movs	r3, #0
   1157e:	713b      	strb	r3, [r7, #4]
   11580:	2302      	movs	r3, #2
   11582:	717b      	strb	r3, [r7, #5]
   11584:	b08a      	sub	sp, #40	; 0x28
   11586:	466c      	mov	r4, sp
   11588:	f114 0210 	adds.w	r2, r4, #16
   1158c:	d021      	beq.n	115d2 <disconnected+0x1fa>
   1158e:	2012      	movs	r0, #18
   11590:	b11a      	cbz	r2, 1159a <disconnected+0x1c2>
   11592:	2804      	cmp	r0, #4
   11594:	dd01      	ble.n	1159a <disconnected+0x1c2>
   11596:	4b4f      	ldr	r3, [pc, #316]	; (116d4 <disconnected+0x2fc>)
   11598:	6163      	str	r3, [r4, #20]
   1159a:	2300      	movs	r3, #0
   1159c:	703b      	strb	r3, [r7, #0]
   1159e:	2302      	movs	r3, #2
   115a0:	707b      	strb	r3, [r7, #1]
   115a2:	b1ca      	cbz	r2, 115d8 <disconnected+0x200>
   115a4:	4603      	mov	r3, r0
   115a6:	2808      	cmp	r0, #8
   115a8:	dd02      	ble.n	115b0 <disconnected+0x1d8>
   115aa:	f107 0108 	add.w	r1, r7, #8
   115ae:	61a1      	str	r1, [r4, #24]
   115b0:	2b0c      	cmp	r3, #12
   115b2:	dd00      	ble.n	115b6 <disconnected+0x1de>
   115b4:	61e5      	str	r5, [r4, #28]
   115b6:	f104 0320 	add.w	r3, r4, #32
   115ba:	2100      	movs	r1, #0
   115bc:	2901      	cmp	r1, #1
   115be:	d80b      	bhi.n	115d8 <disconnected+0x200>
   115c0:	f101 0528 	add.w	r5, r1, #40	; 0x28
   115c4:	443d      	add	r5, r7
   115c6:	f815 5c28 	ldrb.w	r5, [r5, #-40]
   115ca:	f803 5b01 	strb.w	r5, [r3], #1
   115ce:	3101      	adds	r1, #1
   115d0:	e7f4      	b.n	115bc <disconnected+0x1e4>
   115d2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   115d6:	e7db      	b.n	11590 <disconnected+0x1b8>
   115d8:	2811      	cmp	r0, #17
   115da:	dd24      	ble.n	11626 <disconnected+0x24e>
   115dc:	2312      	movs	r3, #18
   115de:	b142      	cbz	r2, 115f2 <disconnected+0x21a>
   115e0:	2104      	movs	r1, #4
   115e2:	7139      	strb	r1, [r7, #4]
   115e4:	2100      	movs	r1, #0
   115e6:	7179      	strb	r1, [r7, #5]
   115e8:	71b9      	strb	r1, [r7, #6]
   115ea:	2101      	movs	r1, #1
   115ec:	71f9      	strb	r1, [r7, #7]
   115ee:	6878      	ldr	r0, [r7, #4]
   115f0:	6120      	str	r0, [r4, #16]
   115f2:	2100      	movs	r1, #0
   115f4:	f36f 0100 	bfc	r1, #0, #1
   115f8:	f36f 0141 	bfc	r1, #1, #1
   115fc:	f36f 0182 	bfc	r1, #2, #1
   11600:	f36f 01c5 	bfc	r1, #3, #3
   11604:	2003      	movs	r0, #3
   11606:	f360 1188 	bfi	r1, r0, #6, #3
   1160a:	f3c3 0309 	ubfx	r3, r3, #0, #10
   1160e:	f363 2152 	bfi	r1, r3, #9, #10
   11612:	f36f 41de 	bfc	r1, #19, #12
   11616:	f36f 71df 	bfc	r1, #31, #1
   1161a:	2300      	movs	r3, #0
   1161c:	4829      	ldr	r0, [pc, #164]	; (116c4 <disconnected+0x2ec>)
   1161e:	f016 fbf6 	bl	27e0e <z_impl_z_log_msg_static_create>
   11622:	46b5      	mov	sp, r6
   11624:	e75e      	b.n	114e4 <disconnected+0x10c>
   11626:	f06f 031b 	mvn.w	r3, #27
   1162a:	e7d8      	b.n	115de <disconnected+0x206>
   1162c:	2207      	movs	r2, #7
   1162e:	492a      	ldr	r1, [pc, #168]	; (116d8 <disconnected+0x300>)
   11630:	4620      	mov	r0, r4
   11632:	f017 f814 	bl	2865e <memcmp>
	} else if (bt_addr_le_eq(addr, &IRL_bt_addr)) {
   11636:	2800      	cmp	r0, #0
   11638:	f040 8086 	bne.w	11748 <disconnected+0x370>
   1163c:	4b1f      	ldr	r3, [pc, #124]	; (116bc <disconnected+0x2e4>)
   1163e:	f3bf 8f5b 	dmb	ish
   11642:	e853 2f00 	ldrex	r2, [r3]
   11646:	f022 0204 	bic.w	r2, r2, #4
   1164a:	e843 2100 	strex	r1, r2, [r3]
   1164e:	2900      	cmp	r1, #0
   11650:	d1f7      	bne.n	11642 <disconnected+0x26a>
   11652:	f3bf 8f5b 	dmb	ish
   11656:	f3bf 8f5b 	dmb	ish
   1165a:	e853 1f00 	ldrex	r1, [r3]
   1165e:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   11662:	e843 1200 	strex	r2, r1, [r3]
   11666:	2a00      	cmp	r2, #0
   11668:	d1f7      	bne.n	1165a <disconnected+0x282>
   1166a:	f3bf 8f5b 	dmb	ish
		LOG_INF("Internal RL disconnected, addr: %s (reason 0x%02x)", addr_str, reason);
   1166e:	466e      	mov	r6, sp
   11670:	2300      	movs	r3, #0
   11672:	713b      	strb	r3, [r7, #4]
   11674:	2302      	movs	r3, #2
   11676:	717b      	strb	r3, [r7, #5]
   11678:	b08a      	sub	sp, #40	; 0x28
   1167a:	466c      	mov	r4, sp
   1167c:	f114 0210 	adds.w	r2, r4, #16
   11680:	d017      	beq.n	116b2 <disconnected+0x2da>
   11682:	2012      	movs	r0, #18
   11684:	b11a      	cbz	r2, 1168e <disconnected+0x2b6>
   11686:	2804      	cmp	r0, #4
   11688:	dd01      	ble.n	1168e <disconnected+0x2b6>
   1168a:	4b14      	ldr	r3, [pc, #80]	; (116dc <disconnected+0x304>)
   1168c:	6163      	str	r3, [r4, #20]
   1168e:	2300      	movs	r3, #0
   11690:	703b      	strb	r3, [r7, #0]
   11692:	2302      	movs	r3, #2
   11694:	707b      	strb	r3, [r7, #1]
   11696:	b36a      	cbz	r2, 116f4 <disconnected+0x31c>
   11698:	4603      	mov	r3, r0
   1169a:	2808      	cmp	r0, #8
   1169c:	dd02      	ble.n	116a4 <disconnected+0x2cc>
   1169e:	f107 0108 	add.w	r1, r7, #8
   116a2:	61a1      	str	r1, [r4, #24]
   116a4:	2b0c      	cmp	r3, #12
   116a6:	dd00      	ble.n	116aa <disconnected+0x2d2>
   116a8:	61e5      	str	r5, [r4, #28]
   116aa:	f104 0320 	add.w	r3, r4, #32
   116ae:	2100      	movs	r1, #0
   116b0:	e01e      	b.n	116f0 <disconnected+0x318>
   116b2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   116b6:	e7e5      	b.n	11684 <disconnected+0x2ac>
   116b8:	20007af4 	.word	0x20007af4
   116bc:	20007b0c 	.word	0x20007b0c
   116c0:	0002e300 	.word	0x0002e300
   116c4:	0002df40 	.word	0x0002df40
   116c8:	20007afc 	.word	0x20007afc
   116cc:	200006d4 	.word	0x200006d4
   116d0:	20007aec 	.word	0x20007aec
   116d4:	0002e334 	.word	0x0002e334
   116d8:	20007ae4 	.word	0x20007ae4
   116dc:	0002e368 	.word	0x0002e368
   116e0:	f101 0528 	add.w	r5, r1, #40	; 0x28
   116e4:	443d      	add	r5, r7
   116e6:	f815 5c28 	ldrb.w	r5, [r5, #-40]
   116ea:	f803 5b01 	strb.w	r5, [r3], #1
   116ee:	3101      	adds	r1, #1
   116f0:	2901      	cmp	r1, #1
   116f2:	d9f5      	bls.n	116e0 <disconnected+0x308>
   116f4:	2811      	cmp	r0, #17
   116f6:	dd24      	ble.n	11742 <disconnected+0x36a>
   116f8:	2312      	movs	r3, #18
   116fa:	b142      	cbz	r2, 1170e <disconnected+0x336>
   116fc:	2104      	movs	r1, #4
   116fe:	7139      	strb	r1, [r7, #4]
   11700:	2100      	movs	r1, #0
   11702:	7179      	strb	r1, [r7, #5]
   11704:	71b9      	strb	r1, [r7, #6]
   11706:	2101      	movs	r1, #1
   11708:	71f9      	strb	r1, [r7, #7]
   1170a:	6878      	ldr	r0, [r7, #4]
   1170c:	6120      	str	r0, [r4, #16]
   1170e:	2100      	movs	r1, #0
   11710:	f36f 0100 	bfc	r1, #0, #1
   11714:	f36f 0141 	bfc	r1, #1, #1
   11718:	f36f 0182 	bfc	r1, #2, #1
   1171c:	f36f 01c5 	bfc	r1, #3, #3
   11720:	2003      	movs	r0, #3
   11722:	f360 1188 	bfi	r1, r0, #6, #3
   11726:	f3c3 0309 	ubfx	r3, r3, #0, #10
   1172a:	f363 2152 	bfi	r1, r3, #9, #10
   1172e:	f36f 41de 	bfc	r1, #19, #12
   11732:	f36f 71df 	bfc	r1, #31, #1
   11736:	2300      	movs	r3, #0
   11738:	48b9      	ldr	r0, [pc, #740]	; (11a20 <disconnected+0x648>)
   1173a:	f016 fb68 	bl	27e0e <z_impl_z_log_msg_static_create>
   1173e:	46b5      	mov	sp, r6
   11740:	e6d0      	b.n	114e4 <disconnected+0x10c>
   11742:	f06f 031b 	mvn.w	r3, #27
   11746:	e7d8      	b.n	116fa <disconnected+0x322>
   11748:	2207      	movs	r2, #7
   1174a:	49b6      	ldr	r1, [pc, #728]	; (11a24 <disconnected+0x64c>)
   1174c:	4620      	mov	r0, r4
   1174e:	f016 ff86 	bl	2865e <memcmp>
	} else if (bt_addr_le_eq(addr, &IRR_bt_addr)) {
   11752:	2800      	cmp	r0, #0
   11754:	d171      	bne.n	1183a <disconnected+0x462>
   11756:	4bb4      	ldr	r3, [pc, #720]	; (11a28 <disconnected+0x650>)
   11758:	f3bf 8f5b 	dmb	ish
   1175c:	e853 2f00 	ldrex	r2, [r3]
   11760:	f022 0208 	bic.w	r2, r2, #8
   11764:	e843 2100 	strex	r1, r2, [r3]
   11768:	2900      	cmp	r1, #0
   1176a:	d1f7      	bne.n	1175c <disconnected+0x384>
   1176c:	f3bf 8f5b 	dmb	ish
   11770:	f3bf 8f5b 	dmb	ish
   11774:	e853 1f00 	ldrex	r1, [r3]
   11778:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   1177c:	e843 1200 	strex	r2, r1, [r3]
   11780:	2a00      	cmp	r2, #0
   11782:	d1f7      	bne.n	11774 <disconnected+0x39c>
   11784:	f3bf 8f5b 	dmb	ish
		LOG_INF("Internal RR disconnected, addr: %s (reason 0x%02x)", addr_str, reason);
   11788:	466e      	mov	r6, sp
   1178a:	2300      	movs	r3, #0
   1178c:	713b      	strb	r3, [r7, #4]
   1178e:	2302      	movs	r3, #2
   11790:	717b      	strb	r3, [r7, #5]
   11792:	b08a      	sub	sp, #40	; 0x28
   11794:	466c      	mov	r4, sp
   11796:	f114 0210 	adds.w	r2, r4, #16
   1179a:	d017      	beq.n	117cc <disconnected+0x3f4>
   1179c:	2012      	movs	r0, #18
   1179e:	b11a      	cbz	r2, 117a8 <disconnected+0x3d0>
   117a0:	2804      	cmp	r0, #4
   117a2:	dd01      	ble.n	117a8 <disconnected+0x3d0>
   117a4:	4ba1      	ldr	r3, [pc, #644]	; (11a2c <disconnected+0x654>)
   117a6:	6163      	str	r3, [r4, #20]
   117a8:	2300      	movs	r3, #0
   117aa:	703b      	strb	r3, [r7, #0]
   117ac:	2302      	movs	r3, #2
   117ae:	707b      	strb	r3, [r7, #1]
   117b0:	b1ca      	cbz	r2, 117e6 <disconnected+0x40e>
   117b2:	4603      	mov	r3, r0
   117b4:	2808      	cmp	r0, #8
   117b6:	dd02      	ble.n	117be <disconnected+0x3e6>
   117b8:	f107 0108 	add.w	r1, r7, #8
   117bc:	61a1      	str	r1, [r4, #24]
   117be:	2b0c      	cmp	r3, #12
   117c0:	dd00      	ble.n	117c4 <disconnected+0x3ec>
   117c2:	61e5      	str	r5, [r4, #28]
   117c4:	f104 0320 	add.w	r3, r4, #32
   117c8:	2100      	movs	r1, #0
   117ca:	e00a      	b.n	117e2 <disconnected+0x40a>
   117cc:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   117d0:	e7e5      	b.n	1179e <disconnected+0x3c6>
   117d2:	f101 0528 	add.w	r5, r1, #40	; 0x28
   117d6:	443d      	add	r5, r7
   117d8:	f815 5c28 	ldrb.w	r5, [r5, #-40]
   117dc:	f803 5b01 	strb.w	r5, [r3], #1
   117e0:	3101      	adds	r1, #1
   117e2:	2901      	cmp	r1, #1
   117e4:	d9f5      	bls.n	117d2 <disconnected+0x3fa>
   117e6:	2811      	cmp	r0, #17
   117e8:	dd24      	ble.n	11834 <disconnected+0x45c>
   117ea:	2312      	movs	r3, #18
   117ec:	b142      	cbz	r2, 11800 <disconnected+0x428>
   117ee:	2104      	movs	r1, #4
   117f0:	7139      	strb	r1, [r7, #4]
   117f2:	2100      	movs	r1, #0
   117f4:	7179      	strb	r1, [r7, #5]
   117f6:	71b9      	strb	r1, [r7, #6]
   117f8:	2101      	movs	r1, #1
   117fa:	71f9      	strb	r1, [r7, #7]
   117fc:	6878      	ldr	r0, [r7, #4]
   117fe:	6120      	str	r0, [r4, #16]
   11800:	2100      	movs	r1, #0
   11802:	f36f 0100 	bfc	r1, #0, #1
   11806:	f36f 0141 	bfc	r1, #1, #1
   1180a:	f36f 0182 	bfc	r1, #2, #1
   1180e:	f36f 01c5 	bfc	r1, #3, #3
   11812:	2003      	movs	r0, #3
   11814:	f360 1188 	bfi	r1, r0, #6, #3
   11818:	f3c3 0309 	ubfx	r3, r3, #0, #10
   1181c:	f363 2152 	bfi	r1, r3, #9, #10
   11820:	f36f 41de 	bfc	r1, #19, #12
   11824:	f36f 71df 	bfc	r1, #31, #1
   11828:	2300      	movs	r3, #0
   1182a:	487d      	ldr	r0, [pc, #500]	; (11a20 <disconnected+0x648>)
   1182c:	f016 faef 	bl	27e0e <z_impl_z_log_msg_static_create>
   11830:	46b5      	mov	sp, r6
   11832:	e657      	b.n	114e4 <disconnected+0x10c>
   11834:	f06f 031b 	mvn.w	r3, #27
   11838:	e7d8      	b.n	117ec <disconnected+0x414>
   1183a:	2207      	movs	r2, #7
   1183c:	497c      	ldr	r1, [pc, #496]	; (11a30 <disconnected+0x658>)
   1183e:	4620      	mov	r0, r4
   11840:	f016 ff0d 	bl	2865e <memcmp>
	} else if (bt_addr_le_eq(addr, &EFL_bt_addr)) {
   11844:	2800      	cmp	r0, #0
   11846:	d171      	bne.n	1192c <disconnected+0x554>
   11848:	4b77      	ldr	r3, [pc, #476]	; (11a28 <disconnected+0x650>)
   1184a:	f3bf 8f5b 	dmb	ish
   1184e:	e853 2f00 	ldrex	r2, [r3]
   11852:	f022 0210 	bic.w	r2, r2, #16
   11856:	e843 2100 	strex	r1, r2, [r3]
   1185a:	2900      	cmp	r1, #0
   1185c:	d1f7      	bne.n	1184e <disconnected+0x476>
   1185e:	f3bf 8f5b 	dmb	ish
   11862:	f3bf 8f5b 	dmb	ish
   11866:	e853 1f00 	ldrex	r1, [r3]
   1186a:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
   1186e:	e843 1200 	strex	r2, r1, [r3]
   11872:	2a00      	cmp	r2, #0
   11874:	d1f7      	bne.n	11866 <disconnected+0x48e>
   11876:	f3bf 8f5b 	dmb	ish
		LOG_INF("External FL disconnected, addr: %s (reason 0x%02x)", addr_str, reason);
   1187a:	466e      	mov	r6, sp
   1187c:	2300      	movs	r3, #0
   1187e:	713b      	strb	r3, [r7, #4]
   11880:	2302      	movs	r3, #2
   11882:	717b      	strb	r3, [r7, #5]
   11884:	b08a      	sub	sp, #40	; 0x28
   11886:	466c      	mov	r4, sp
   11888:	f114 0210 	adds.w	r2, r4, #16
   1188c:	d017      	beq.n	118be <disconnected+0x4e6>
   1188e:	2012      	movs	r0, #18
   11890:	b11a      	cbz	r2, 1189a <disconnected+0x4c2>
   11892:	2804      	cmp	r0, #4
   11894:	dd01      	ble.n	1189a <disconnected+0x4c2>
   11896:	4b67      	ldr	r3, [pc, #412]	; (11a34 <disconnected+0x65c>)
   11898:	6163      	str	r3, [r4, #20]
   1189a:	2300      	movs	r3, #0
   1189c:	703b      	strb	r3, [r7, #0]
   1189e:	2302      	movs	r3, #2
   118a0:	707b      	strb	r3, [r7, #1]
   118a2:	b1ca      	cbz	r2, 118d8 <disconnected+0x500>
   118a4:	4603      	mov	r3, r0
   118a6:	2808      	cmp	r0, #8
   118a8:	dd02      	ble.n	118b0 <disconnected+0x4d8>
   118aa:	f107 0108 	add.w	r1, r7, #8
   118ae:	61a1      	str	r1, [r4, #24]
   118b0:	2b0c      	cmp	r3, #12
   118b2:	dd00      	ble.n	118b6 <disconnected+0x4de>
   118b4:	61e5      	str	r5, [r4, #28]
   118b6:	f104 0320 	add.w	r3, r4, #32
   118ba:	2100      	movs	r1, #0
   118bc:	e00a      	b.n	118d4 <disconnected+0x4fc>
   118be:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   118c2:	e7e5      	b.n	11890 <disconnected+0x4b8>
   118c4:	f101 0528 	add.w	r5, r1, #40	; 0x28
   118c8:	443d      	add	r5, r7
   118ca:	f815 5c28 	ldrb.w	r5, [r5, #-40]
   118ce:	f803 5b01 	strb.w	r5, [r3], #1
   118d2:	3101      	adds	r1, #1
   118d4:	2901      	cmp	r1, #1
   118d6:	d9f5      	bls.n	118c4 <disconnected+0x4ec>
   118d8:	2811      	cmp	r0, #17
   118da:	dd24      	ble.n	11926 <disconnected+0x54e>
   118dc:	2312      	movs	r3, #18
   118de:	b142      	cbz	r2, 118f2 <disconnected+0x51a>
   118e0:	2104      	movs	r1, #4
   118e2:	7139      	strb	r1, [r7, #4]
   118e4:	2100      	movs	r1, #0
   118e6:	7179      	strb	r1, [r7, #5]
   118e8:	71b9      	strb	r1, [r7, #6]
   118ea:	2101      	movs	r1, #1
   118ec:	71f9      	strb	r1, [r7, #7]
   118ee:	6878      	ldr	r0, [r7, #4]
   118f0:	6120      	str	r0, [r4, #16]
   118f2:	2100      	movs	r1, #0
   118f4:	f36f 0100 	bfc	r1, #0, #1
   118f8:	f36f 0141 	bfc	r1, #1, #1
   118fc:	f36f 0182 	bfc	r1, #2, #1
   11900:	f36f 01c5 	bfc	r1, #3, #3
   11904:	2003      	movs	r0, #3
   11906:	f360 1188 	bfi	r1, r0, #6, #3
   1190a:	f3c3 0309 	ubfx	r3, r3, #0, #10
   1190e:	f363 2152 	bfi	r1, r3, #9, #10
   11912:	f36f 41de 	bfc	r1, #19, #12
   11916:	f36f 71df 	bfc	r1, #31, #1
   1191a:	2300      	movs	r3, #0
   1191c:	4840      	ldr	r0, [pc, #256]	; (11a20 <disconnected+0x648>)
   1191e:	f016 fa76 	bl	27e0e <z_impl_z_log_msg_static_create>
   11922:	46b5      	mov	sp, r6
   11924:	e5de      	b.n	114e4 <disconnected+0x10c>
   11926:	f06f 031b 	mvn.w	r3, #27
   1192a:	e7d8      	b.n	118de <disconnected+0x506>
   1192c:	2207      	movs	r2, #7
   1192e:	4942      	ldr	r1, [pc, #264]	; (11a38 <disconnected+0x660>)
   11930:	4620      	mov	r0, r4
   11932:	f016 fe94 	bl	2865e <memcmp>
	} else if (bt_addr_le_eq(addr, &EFR_bt_addr)) {
   11936:	2800      	cmp	r0, #0
   11938:	f040 8082 	bne.w	11a40 <disconnected+0x668>
   1193c:	4b3a      	ldr	r3, [pc, #232]	; (11a28 <disconnected+0x650>)
   1193e:	f3bf 8f5b 	dmb	ish
   11942:	e853 2f00 	ldrex	r2, [r3]
   11946:	f022 0220 	bic.w	r2, r2, #32
   1194a:	e843 2100 	strex	r1, r2, [r3]
   1194e:	2900      	cmp	r1, #0
   11950:	d1f7      	bne.n	11942 <disconnected+0x56a>
   11952:	f3bf 8f5b 	dmb	ish
   11956:	f3bf 8f5b 	dmb	ish
   1195a:	e853 1f00 	ldrex	r1, [r3]
   1195e:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
   11962:	e843 1200 	strex	r2, r1, [r3]
   11966:	2a00      	cmp	r2, #0
   11968:	d1f7      	bne.n	1195a <disconnected+0x582>
   1196a:	f3bf 8f5b 	dmb	ish
		LOG_INF("External FR disconnected, addr: %s (reason 0x%02x)", addr_str, reason);
   1196e:	466e      	mov	r6, sp
   11970:	2300      	movs	r3, #0
   11972:	713b      	strb	r3, [r7, #4]
   11974:	2302      	movs	r3, #2
   11976:	717b      	strb	r3, [r7, #5]
   11978:	b08a      	sub	sp, #40	; 0x28
   1197a:	466c      	mov	r4, sp
   1197c:	f114 0210 	adds.w	r2, r4, #16
   11980:	d017      	beq.n	119b2 <disconnected+0x5da>
   11982:	2012      	movs	r0, #18
   11984:	b11a      	cbz	r2, 1198e <disconnected+0x5b6>
   11986:	2804      	cmp	r0, #4
   11988:	dd01      	ble.n	1198e <disconnected+0x5b6>
   1198a:	4b2c      	ldr	r3, [pc, #176]	; (11a3c <disconnected+0x664>)
   1198c:	6163      	str	r3, [r4, #20]
   1198e:	2300      	movs	r3, #0
   11990:	703b      	strb	r3, [r7, #0]
   11992:	2302      	movs	r3, #2
   11994:	707b      	strb	r3, [r7, #1]
   11996:	b1ca      	cbz	r2, 119cc <disconnected+0x5f4>
   11998:	4603      	mov	r3, r0
   1199a:	2808      	cmp	r0, #8
   1199c:	dd02      	ble.n	119a4 <disconnected+0x5cc>
   1199e:	f107 0108 	add.w	r1, r7, #8
   119a2:	61a1      	str	r1, [r4, #24]
   119a4:	2b0c      	cmp	r3, #12
   119a6:	dd00      	ble.n	119aa <disconnected+0x5d2>
   119a8:	61e5      	str	r5, [r4, #28]
   119aa:	f104 0320 	add.w	r3, r4, #32
   119ae:	2100      	movs	r1, #0
   119b0:	e00a      	b.n	119c8 <disconnected+0x5f0>
   119b2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   119b6:	e7e5      	b.n	11984 <disconnected+0x5ac>
   119b8:	f101 0528 	add.w	r5, r1, #40	; 0x28
   119bc:	443d      	add	r5, r7
   119be:	f815 5c28 	ldrb.w	r5, [r5, #-40]
   119c2:	f803 5b01 	strb.w	r5, [r3], #1
   119c6:	3101      	adds	r1, #1
   119c8:	2901      	cmp	r1, #1
   119ca:	d9f5      	bls.n	119b8 <disconnected+0x5e0>
   119cc:	2811      	cmp	r0, #17
   119ce:	dd24      	ble.n	11a1a <disconnected+0x642>
   119d0:	2312      	movs	r3, #18
   119d2:	b142      	cbz	r2, 119e6 <disconnected+0x60e>
   119d4:	2104      	movs	r1, #4
   119d6:	7139      	strb	r1, [r7, #4]
   119d8:	2100      	movs	r1, #0
   119da:	7179      	strb	r1, [r7, #5]
   119dc:	71b9      	strb	r1, [r7, #6]
   119de:	2101      	movs	r1, #1
   119e0:	71f9      	strb	r1, [r7, #7]
   119e2:	6878      	ldr	r0, [r7, #4]
   119e4:	6120      	str	r0, [r4, #16]
   119e6:	2100      	movs	r1, #0
   119e8:	f36f 0100 	bfc	r1, #0, #1
   119ec:	f36f 0141 	bfc	r1, #1, #1
   119f0:	f36f 0182 	bfc	r1, #2, #1
   119f4:	f36f 01c5 	bfc	r1, #3, #3
   119f8:	2003      	movs	r0, #3
   119fa:	f360 1188 	bfi	r1, r0, #6, #3
   119fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
   11a02:	f363 2152 	bfi	r1, r3, #9, #10
   11a06:	f36f 41de 	bfc	r1, #19, #12
   11a0a:	f36f 71df 	bfc	r1, #31, #1
   11a0e:	2300      	movs	r3, #0
   11a10:	4803      	ldr	r0, [pc, #12]	; (11a20 <disconnected+0x648>)
   11a12:	f016 f9fc 	bl	27e0e <z_impl_z_log_msg_static_create>
   11a16:	46b5      	mov	sp, r6
   11a18:	e564      	b.n	114e4 <disconnected+0x10c>
   11a1a:	f06f 031b 	mvn.w	r3, #27
   11a1e:	e7d8      	b.n	119d2 <disconnected+0x5fa>
   11a20:	0002df40 	.word	0x0002df40
   11a24:	20007adc 	.word	0x20007adc
   11a28:	20007b0c 	.word	0x20007b0c
   11a2c:	0002e39c 	.word	0x0002e39c
   11a30:	20007ad4 	.word	0x20007ad4
   11a34:	0002e3d0 	.word	0x0002e3d0
   11a38:	20007acc 	.word	0x20007acc
   11a3c:	0002e404 	.word	0x0002e404
   11a40:	2207      	movs	r2, #7
   11a42:	49b0      	ldr	r1, [pc, #704]	; (11d04 <disconnected+0x92c>)
   11a44:	4620      	mov	r0, r4
   11a46:	f016 fe0a 	bl	2865e <memcmp>
	} else if (bt_addr_le_eq(addr, &ERL_bt_addr)) {
   11a4a:	2800      	cmp	r0, #0
   11a4c:	d171      	bne.n	11b32 <disconnected+0x75a>
   11a4e:	4bae      	ldr	r3, [pc, #696]	; (11d08 <disconnected+0x930>)
   11a50:	f3bf 8f5b 	dmb	ish
   11a54:	e853 2f00 	ldrex	r2, [r3]
   11a58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   11a5c:	e843 2100 	strex	r1, r2, [r3]
   11a60:	2900      	cmp	r1, #0
   11a62:	d1f7      	bne.n	11a54 <disconnected+0x67c>
   11a64:	f3bf 8f5b 	dmb	ish
   11a68:	f3bf 8f5b 	dmb	ish
   11a6c:	e853 1f00 	ldrex	r1, [r3]
   11a70:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
   11a74:	e843 1200 	strex	r2, r1, [r3]
   11a78:	2a00      	cmp	r2, #0
   11a7a:	d1f7      	bne.n	11a6c <disconnected+0x694>
   11a7c:	f3bf 8f5b 	dmb	ish
		LOG_INF("External RL disconnected, addr: %s (reason 0x%02x)", addr_str, reason);
   11a80:	466e      	mov	r6, sp
   11a82:	2300      	movs	r3, #0
   11a84:	713b      	strb	r3, [r7, #4]
   11a86:	2302      	movs	r3, #2
   11a88:	717b      	strb	r3, [r7, #5]
   11a8a:	b08a      	sub	sp, #40	; 0x28
   11a8c:	466c      	mov	r4, sp
   11a8e:	f114 0210 	adds.w	r2, r4, #16
   11a92:	d017      	beq.n	11ac4 <disconnected+0x6ec>
   11a94:	2012      	movs	r0, #18
   11a96:	b11a      	cbz	r2, 11aa0 <disconnected+0x6c8>
   11a98:	2804      	cmp	r0, #4
   11a9a:	dd01      	ble.n	11aa0 <disconnected+0x6c8>
   11a9c:	4b9b      	ldr	r3, [pc, #620]	; (11d0c <disconnected+0x934>)
   11a9e:	6163      	str	r3, [r4, #20]
   11aa0:	2300      	movs	r3, #0
   11aa2:	703b      	strb	r3, [r7, #0]
   11aa4:	2302      	movs	r3, #2
   11aa6:	707b      	strb	r3, [r7, #1]
   11aa8:	b1ca      	cbz	r2, 11ade <disconnected+0x706>
   11aaa:	4603      	mov	r3, r0
   11aac:	2808      	cmp	r0, #8
   11aae:	dd02      	ble.n	11ab6 <disconnected+0x6de>
   11ab0:	f107 0108 	add.w	r1, r7, #8
   11ab4:	61a1      	str	r1, [r4, #24]
   11ab6:	2b0c      	cmp	r3, #12
   11ab8:	dd00      	ble.n	11abc <disconnected+0x6e4>
   11aba:	61e5      	str	r5, [r4, #28]
   11abc:	f104 0320 	add.w	r3, r4, #32
   11ac0:	2100      	movs	r1, #0
   11ac2:	e00a      	b.n	11ada <disconnected+0x702>
   11ac4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   11ac8:	e7e5      	b.n	11a96 <disconnected+0x6be>
   11aca:	f101 0528 	add.w	r5, r1, #40	; 0x28
   11ace:	443d      	add	r5, r7
   11ad0:	f815 5c28 	ldrb.w	r5, [r5, #-40]
   11ad4:	f803 5b01 	strb.w	r5, [r3], #1
   11ad8:	3101      	adds	r1, #1
   11ada:	2901      	cmp	r1, #1
   11adc:	d9f5      	bls.n	11aca <disconnected+0x6f2>
   11ade:	2811      	cmp	r0, #17
   11ae0:	dd24      	ble.n	11b2c <disconnected+0x754>
   11ae2:	2312      	movs	r3, #18
   11ae4:	b142      	cbz	r2, 11af8 <disconnected+0x720>
   11ae6:	2104      	movs	r1, #4
   11ae8:	7139      	strb	r1, [r7, #4]
   11aea:	2100      	movs	r1, #0
   11aec:	7179      	strb	r1, [r7, #5]
   11aee:	71b9      	strb	r1, [r7, #6]
   11af0:	2101      	movs	r1, #1
   11af2:	71f9      	strb	r1, [r7, #7]
   11af4:	6878      	ldr	r0, [r7, #4]
   11af6:	6120      	str	r0, [r4, #16]
   11af8:	2100      	movs	r1, #0
   11afa:	f36f 0100 	bfc	r1, #0, #1
   11afe:	f36f 0141 	bfc	r1, #1, #1
   11b02:	f36f 0182 	bfc	r1, #2, #1
   11b06:	f36f 01c5 	bfc	r1, #3, #3
   11b0a:	2003      	movs	r0, #3
   11b0c:	f360 1188 	bfi	r1, r0, #6, #3
   11b10:	f3c3 0309 	ubfx	r3, r3, #0, #10
   11b14:	f363 2152 	bfi	r1, r3, #9, #10
   11b18:	f36f 41de 	bfc	r1, #19, #12
   11b1c:	f36f 71df 	bfc	r1, #31, #1
   11b20:	2300      	movs	r3, #0
   11b22:	487b      	ldr	r0, [pc, #492]	; (11d10 <disconnected+0x938>)
   11b24:	f016 f973 	bl	27e0e <z_impl_z_log_msg_static_create>
   11b28:	46b5      	mov	sp, r6
   11b2a:	e4db      	b.n	114e4 <disconnected+0x10c>
   11b2c:	f06f 031b 	mvn.w	r3, #27
   11b30:	e7d8      	b.n	11ae4 <disconnected+0x70c>
   11b32:	2207      	movs	r2, #7
   11b34:	4977      	ldr	r1, [pc, #476]	; (11d14 <disconnected+0x93c>)
   11b36:	4620      	mov	r0, r4
   11b38:	f016 fd91 	bl	2865e <memcmp>
	} else if (bt_addr_le_eq(addr, &ERR_bt_addr)) {
   11b3c:	b320      	cbz	r0, 11b88 <disconnected+0x7b0>
		LOG_INF("Unknown device disconnected, addr: %s (reason 0x%02x)", addr_str, reason);
   11b3e:	466c      	mov	r4, sp
   11b40:	2300      	movs	r3, #0
   11b42:	713b      	strb	r3, [r7, #4]
   11b44:	2302      	movs	r3, #2
   11b46:	717b      	strb	r3, [r7, #5]
   11b48:	b08a      	sub	sp, #40	; 0x28
   11b4a:	466e      	mov	r6, sp
   11b4c:	f116 0210 	adds.w	r2, r6, #16
   11b50:	f000 808c 	beq.w	11c6c <disconnected+0x894>
   11b54:	2012      	movs	r0, #18
   11b56:	b11a      	cbz	r2, 11b60 <disconnected+0x788>
   11b58:	2804      	cmp	r0, #4
   11b5a:	dd01      	ble.n	11b60 <disconnected+0x788>
   11b5c:	4b6e      	ldr	r3, [pc, #440]	; (11d18 <disconnected+0x940>)
   11b5e:	6173      	str	r3, [r6, #20]
   11b60:	2300      	movs	r3, #0
   11b62:	703b      	strb	r3, [r7, #0]
   11b64:	2302      	movs	r3, #2
   11b66:	707b      	strb	r3, [r7, #1]
   11b68:	2a00      	cmp	r2, #0
   11b6a:	f000 808c 	beq.w	11c86 <disconnected+0x8ae>
   11b6e:	4603      	mov	r3, r0
   11b70:	2808      	cmp	r0, #8
   11b72:	dd02      	ble.n	11b7a <disconnected+0x7a2>
   11b74:	f107 0108 	add.w	r1, r7, #8
   11b78:	61b1      	str	r1, [r6, #24]
   11b7a:	2b0c      	cmp	r3, #12
   11b7c:	dd00      	ble.n	11b80 <disconnected+0x7a8>
   11b7e:	61f5      	str	r5, [r6, #28]
   11b80:	f106 0320 	add.w	r3, r6, #32
   11b84:	2100      	movs	r1, #0
   11b86:	e07c      	b.n	11c82 <disconnected+0x8aa>
   11b88:	4b5f      	ldr	r3, [pc, #380]	; (11d08 <disconnected+0x930>)
   11b8a:	f3bf 8f5b 	dmb	ish
   11b8e:	e853 2f00 	ldrex	r2, [r3]
   11b92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   11b96:	e843 2100 	strex	r1, r2, [r3]
   11b9a:	2900      	cmp	r1, #0
   11b9c:	d1f7      	bne.n	11b8e <disconnected+0x7b6>
   11b9e:	f3bf 8f5b 	dmb	ish
   11ba2:	f3bf 8f5b 	dmb	ish
   11ba6:	e853 1f00 	ldrex	r1, [r3]
   11baa:	f421 3100 	bic.w	r1, r1, #131072	; 0x20000
   11bae:	e843 1200 	strex	r2, r1, [r3]
   11bb2:	2a00      	cmp	r2, #0
   11bb4:	d1f7      	bne.n	11ba6 <disconnected+0x7ce>
   11bb6:	f3bf 8f5b 	dmb	ish
		LOG_INF("External RR disconnected, addr: %s (reason 0x%02x)", addr_str, reason);
   11bba:	466e      	mov	r6, sp
   11bbc:	2300      	movs	r3, #0
   11bbe:	713b      	strb	r3, [r7, #4]
   11bc0:	2302      	movs	r3, #2
   11bc2:	717b      	strb	r3, [r7, #5]
   11bc4:	b08a      	sub	sp, #40	; 0x28
   11bc6:	466c      	mov	r4, sp
   11bc8:	f114 0210 	adds.w	r2, r4, #16
   11bcc:	d017      	beq.n	11bfe <disconnected+0x826>
   11bce:	2012      	movs	r0, #18
   11bd0:	b11a      	cbz	r2, 11bda <disconnected+0x802>
   11bd2:	2804      	cmp	r0, #4
   11bd4:	dd01      	ble.n	11bda <disconnected+0x802>
   11bd6:	4b51      	ldr	r3, [pc, #324]	; (11d1c <disconnected+0x944>)
   11bd8:	6163      	str	r3, [r4, #20]
   11bda:	2300      	movs	r3, #0
   11bdc:	703b      	strb	r3, [r7, #0]
   11bde:	2302      	movs	r3, #2
   11be0:	707b      	strb	r3, [r7, #1]
   11be2:	b1ca      	cbz	r2, 11c18 <disconnected+0x840>
   11be4:	4603      	mov	r3, r0
   11be6:	2808      	cmp	r0, #8
   11be8:	dd02      	ble.n	11bf0 <disconnected+0x818>
   11bea:	f107 0108 	add.w	r1, r7, #8
   11bee:	61a1      	str	r1, [r4, #24]
   11bf0:	2b0c      	cmp	r3, #12
   11bf2:	dd00      	ble.n	11bf6 <disconnected+0x81e>
   11bf4:	61e5      	str	r5, [r4, #28]
   11bf6:	f104 0320 	add.w	r3, r4, #32
   11bfa:	2100      	movs	r1, #0
   11bfc:	e00a      	b.n	11c14 <disconnected+0x83c>
   11bfe:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   11c02:	e7e5      	b.n	11bd0 <disconnected+0x7f8>
   11c04:	f101 0528 	add.w	r5, r1, #40	; 0x28
   11c08:	443d      	add	r5, r7
   11c0a:	f815 5c28 	ldrb.w	r5, [r5, #-40]
   11c0e:	f803 5b01 	strb.w	r5, [r3], #1
   11c12:	3101      	adds	r1, #1
   11c14:	2901      	cmp	r1, #1
   11c16:	d9f5      	bls.n	11c04 <disconnected+0x82c>
   11c18:	2811      	cmp	r0, #17
   11c1a:	dd24      	ble.n	11c66 <disconnected+0x88e>
   11c1c:	2312      	movs	r3, #18
   11c1e:	b142      	cbz	r2, 11c32 <disconnected+0x85a>
   11c20:	2104      	movs	r1, #4
   11c22:	7139      	strb	r1, [r7, #4]
   11c24:	2100      	movs	r1, #0
   11c26:	7179      	strb	r1, [r7, #5]
   11c28:	71b9      	strb	r1, [r7, #6]
   11c2a:	2101      	movs	r1, #1
   11c2c:	71f9      	strb	r1, [r7, #7]
   11c2e:	6878      	ldr	r0, [r7, #4]
   11c30:	6120      	str	r0, [r4, #16]
   11c32:	2100      	movs	r1, #0
   11c34:	f36f 0100 	bfc	r1, #0, #1
   11c38:	f36f 0141 	bfc	r1, #1, #1
   11c3c:	f36f 0182 	bfc	r1, #2, #1
   11c40:	f36f 01c5 	bfc	r1, #3, #3
   11c44:	2003      	movs	r0, #3
   11c46:	f360 1188 	bfi	r1, r0, #6, #3
   11c4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
   11c4e:	f363 2152 	bfi	r1, r3, #9, #10
   11c52:	f36f 41de 	bfc	r1, #19, #12
   11c56:	f36f 71df 	bfc	r1, #31, #1
   11c5a:	2300      	movs	r3, #0
   11c5c:	482c      	ldr	r0, [pc, #176]	; (11d10 <disconnected+0x938>)
   11c5e:	f016 f8d6 	bl	27e0e <z_impl_z_log_msg_static_create>
   11c62:	46b5      	mov	sp, r6
   11c64:	e43e      	b.n	114e4 <disconnected+0x10c>
   11c66:	f06f 031b 	mvn.w	r3, #27
   11c6a:	e7d8      	b.n	11c1e <disconnected+0x846>
		LOG_INF("Unknown device disconnected, addr: %s (reason 0x%02x)", addr_str, reason);
   11c6c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   11c70:	e771      	b.n	11b56 <disconnected+0x77e>
   11c72:	f101 0528 	add.w	r5, r1, #40	; 0x28
   11c76:	443d      	add	r5, r7
   11c78:	f815 5c28 	ldrb.w	r5, [r5, #-40]
   11c7c:	f803 5b01 	strb.w	r5, [r3], #1
   11c80:	3101      	adds	r1, #1
   11c82:	2901      	cmp	r1, #1
   11c84:	d9f5      	bls.n	11c72 <disconnected+0x89a>
   11c86:	2811      	cmp	r0, #17
   11c88:	dd24      	ble.n	11cd4 <disconnected+0x8fc>
   11c8a:	2312      	movs	r3, #18
   11c8c:	b142      	cbz	r2, 11ca0 <disconnected+0x8c8>
   11c8e:	2104      	movs	r1, #4
   11c90:	7139      	strb	r1, [r7, #4]
   11c92:	2100      	movs	r1, #0
   11c94:	7179      	strb	r1, [r7, #5]
   11c96:	71b9      	strb	r1, [r7, #6]
   11c98:	2101      	movs	r1, #1
   11c9a:	71f9      	strb	r1, [r7, #7]
   11c9c:	6878      	ldr	r0, [r7, #4]
   11c9e:	6130      	str	r0, [r6, #16]
   11ca0:	2100      	movs	r1, #0
   11ca2:	f36f 0100 	bfc	r1, #0, #1
   11ca6:	f36f 0141 	bfc	r1, #1, #1
   11caa:	f36f 0182 	bfc	r1, #2, #1
   11cae:	f36f 01c5 	bfc	r1, #3, #3
   11cb2:	2003      	movs	r0, #3
   11cb4:	f360 1188 	bfi	r1, r0, #6, #3
   11cb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
   11cbc:	f363 2152 	bfi	r1, r3, #9, #10
   11cc0:	f36f 41de 	bfc	r1, #19, #12
   11cc4:	f36f 71df 	bfc	r1, #31, #1
   11cc8:	2300      	movs	r3, #0
   11cca:	4811      	ldr	r0, [pc, #68]	; (11d10 <disconnected+0x938>)
   11ccc:	f016 f89f 	bl	27e0e <z_impl_z_log_msg_static_create>
   11cd0:	46a5      	mov	sp, r4
   11cd2:	e407      	b.n	114e4 <disconnected+0x10c>
   11cd4:	f06f 031b 	mvn.w	r3, #27
   11cd8:	e7d8      	b.n	11c8c <disconnected+0x8b4>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   11cda:	f3bf 8f5b 	dmb	ish
   11cde:	4b0a      	ldr	r3, [pc, #40]	; (11d08 <disconnected+0x930>)
   11ce0:	681b      	ldr	r3, [r3, #0]
   11ce2:	f3bf 8f5b 	dmb	ish
	if (!(atomic_test_bit(flags, EFL_CONNECTED_FLAG) && atomic_test_bit(flags, EFR_CONNECTED_FLAG) && atomic_test_bit(flags, ERL_CONNECTED_FLAG) && atomic_test_bit(flags, ERR_CONNECTED_FLAG))) {
   11ce6:	f013 0f40 	tst.w	r3, #64	; 0x40
   11cea:	f43f ac0e 	beq.w	1150a <disconnected+0x132>
   11cee:	f3bf 8f5b 	dmb	ish
   11cf2:	4b05      	ldr	r3, [pc, #20]	; (11d08 <disconnected+0x930>)
   11cf4:	681b      	ldr	r3, [r3, #0]
   11cf6:	f3bf 8f5b 	dmb	ish
   11cfa:	f013 0f80 	tst.w	r3, #128	; 0x80
   11cfe:	f47f ac16 	bne.w	1152e <disconnected+0x156>
   11d02:	e402      	b.n	1150a <disconnected+0x132>
   11d04:	20007ac4 	.word	0x20007ac4
   11d08:	20007b0c 	.word	0x20007b0c
   11d0c:	0002e438 	.word	0x0002e438
   11d10:	0002df40 	.word	0x0002df40
   11d14:	20007abc 	.word	0x20007abc
   11d18:	0002e4a0 	.word	0x0002e4a0
   11d1c:	0002e46c 	.word	0x0002e46c
			LOG_ERR("Failed to stop automatically connecting (err %d)", err);
   11d20:	2008      	movs	r0, #8
   11d22:	f004 f851 	bl	15dc8 <z_log_msg_alloc>
   11d26:	2200      	movs	r2, #0
   11d28:	f36f 0200 	bfc	r2, #0, #1
   11d2c:	f36f 0241 	bfc	r2, #1, #1
   11d30:	f36f 0282 	bfc	r2, #2, #1
   11d34:	f36f 02c5 	bfc	r2, #3, #3
   11d38:	2301      	movs	r3, #1
   11d3a:	f363 1288 	bfi	r2, r3, #6, #3
   11d3e:	230c      	movs	r3, #12
   11d40:	f363 2252 	bfi	r2, r3, #9, #10
   11d44:	f36f 42de 	bfc	r2, #19, #12
   11d48:	f36f 72df 	bfc	r2, #31, #1
   11d4c:	4604      	mov	r4, r0
   11d4e:	b170      	cbz	r0, 11d6e <disconnected+0x996>
   11d50:	f110 0310 	adds.w	r3, r0, #16
   11d54:	d002      	beq.n	11d5c <disconnected+0x984>
   11d56:	4920      	ldr	r1, [pc, #128]	; (11dd8 <disconnected+0xa00>)
   11d58:	6141      	str	r1, [r0, #20]
   11d5a:	6185      	str	r5, [r0, #24]
   11d5c:	b13b      	cbz	r3, 11d6e <disconnected+0x996>
   11d5e:	2303      	movs	r3, #3
   11d60:	713b      	strb	r3, [r7, #4]
   11d62:	2300      	movs	r3, #0
   11d64:	717b      	strb	r3, [r7, #5]
   11d66:	71bb      	strb	r3, [r7, #6]
   11d68:	71fb      	strb	r3, [r7, #7]
   11d6a:	6878      	ldr	r0, [r7, #4]
   11d6c:	6120      	str	r0, [r4, #16]
   11d6e:	2300      	movs	r3, #0
   11d70:	491a      	ldr	r1, [pc, #104]	; (11ddc <disconnected+0xa04>)
   11d72:	4620      	mov	r0, r4
   11d74:	f016 f833 	bl	27dde <z_log_msg_finalize>
   11d78:	f7ff bbcd 	b.w	11516 <disconnected+0x13e>
			LOG_ERR("Failed to start automatically connecting (err %d)", err);
   11d7c:	2008      	movs	r0, #8
   11d7e:	f004 f823 	bl	15dc8 <z_log_msg_alloc>
   11d82:	2200      	movs	r2, #0
   11d84:	f36f 0200 	bfc	r2, #0, #1
   11d88:	f36f 0241 	bfc	r2, #1, #1
   11d8c:	f36f 0282 	bfc	r2, #2, #1
   11d90:	f36f 02c5 	bfc	r2, #3, #3
   11d94:	2301      	movs	r3, #1
   11d96:	f363 1288 	bfi	r2, r3, #6, #3
   11d9a:	230c      	movs	r3, #12
   11d9c:	f363 2252 	bfi	r2, r3, #9, #10
   11da0:	f36f 42de 	bfc	r2, #19, #12
   11da4:	f36f 72df 	bfc	r2, #31, #1
   11da8:	4604      	mov	r4, r0
   11daa:	b170      	cbz	r0, 11dca <disconnected+0x9f2>
   11dac:	f110 0310 	adds.w	r3, r0, #16
   11db0:	d002      	beq.n	11db8 <disconnected+0x9e0>
   11db2:	490b      	ldr	r1, [pc, #44]	; (11de0 <disconnected+0xa08>)
   11db4:	6141      	str	r1, [r0, #20]
   11db6:	6185      	str	r5, [r0, #24]
   11db8:	b13b      	cbz	r3, 11dca <disconnected+0x9f2>
   11dba:	2303      	movs	r3, #3
   11dbc:	713b      	strb	r3, [r7, #4]
   11dbe:	2300      	movs	r3, #0
   11dc0:	717b      	strb	r3, [r7, #5]
   11dc2:	71bb      	strb	r3, [r7, #6]
   11dc4:	71fb      	strb	r3, [r7, #7]
   11dc6:	6878      	ldr	r0, [r7, #4]
   11dc8:	6120      	str	r0, [r4, #16]
   11dca:	2300      	movs	r3, #0
   11dcc:	4903      	ldr	r1, [pc, #12]	; (11ddc <disconnected+0xa04>)
   11dce:	4620      	mov	r0, r4
   11dd0:	f016 f805 	bl	27dde <z_log_msg_finalize>
}
   11dd4:	f7ff bbab 	b.w	1152e <disconnected+0x156>
   11dd8:	0002e4d8 	.word	0x0002e4d8
   11ddc:	0002df40 	.word	0x0002df40
   11de0:	0002e50c 	.word	0x0002e50c

00011de4 <connected>:
{
   11de4:	b5b0      	push	{r4, r5, r7, lr}
   11de6:	b08a      	sub	sp, #40	; 0x28
   11de8:	af00      	add	r7, sp, #0
   11dea:	460c      	mov	r4, r1
	const bt_addr_le_t *addr = bt_conn_get_dst(conn);
   11dec:	f017 f90c 	bl	29008 <bt_conn_get_dst>
   11df0:	4605      	mov	r5, r0
	bt_addr_le_to_str(addr, addr_str, sizeof(addr_str));
   11df2:	221e      	movs	r2, #30
   11df4:	f107 0108 	add.w	r1, r7, #8
   11df8:	f7ff faa6 	bl	11348 <bt_addr_le_to_str>
	if (err) {
   11dfc:	2c00      	cmp	r4, #0
   11dfe:	d07d      	beq.n	11efc <connected+0x118>
		LOG_WRN("Failed to connect to %s (%u)", addr_str, err);
   11e00:	466d      	mov	r5, sp
   11e02:	2300      	movs	r3, #0
   11e04:	713b      	strb	r3, [r7, #4]
   11e06:	2302      	movs	r3, #2
   11e08:	717b      	strb	r3, [r7, #5]
   11e0a:	b08a      	sub	sp, #40	; 0x28
   11e0c:	46ec      	mov	ip, sp
   11e0e:	f11c 0210 	adds.w	r2, ip, #16
   11e12:	d01a      	beq.n	11e4a <connected+0x66>
   11e14:	2012      	movs	r0, #18
   11e16:	b122      	cbz	r2, 11e22 <connected+0x3e>
   11e18:	2804      	cmp	r0, #4
   11e1a:	dd02      	ble.n	11e22 <connected+0x3e>
   11e1c:	4bb7      	ldr	r3, [pc, #732]	; (120fc <connected+0x318>)
   11e1e:	f8cc 3014 	str.w	r3, [ip, #20]
   11e22:	2300      	movs	r3, #0
   11e24:	703b      	strb	r3, [r7, #0]
   11e26:	2302      	movs	r3, #2
   11e28:	707b      	strb	r3, [r7, #1]
   11e2a:	b1da      	cbz	r2, 11e64 <connected+0x80>
   11e2c:	4603      	mov	r3, r0
   11e2e:	2808      	cmp	r0, #8
   11e30:	dd03      	ble.n	11e3a <connected+0x56>
   11e32:	f107 0108 	add.w	r1, r7, #8
   11e36:	f8cc 1018 	str.w	r1, [ip, #24]
   11e3a:	2b0c      	cmp	r3, #12
   11e3c:	dd01      	ble.n	11e42 <connected+0x5e>
   11e3e:	f8cc 401c 	str.w	r4, [ip, #28]
   11e42:	f10c 0320 	add.w	r3, ip, #32
   11e46:	2100      	movs	r1, #0
   11e48:	e00a      	b.n	11e60 <connected+0x7c>
   11e4a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   11e4e:	e7e2      	b.n	11e16 <connected+0x32>
   11e50:	f101 0428 	add.w	r4, r1, #40	; 0x28
   11e54:	443c      	add	r4, r7
   11e56:	f814 4c28 	ldrb.w	r4, [r4, #-40]
   11e5a:	f803 4b01 	strb.w	r4, [r3], #1
   11e5e:	3101      	adds	r1, #1
   11e60:	2901      	cmp	r1, #1
   11e62:	d9f5      	bls.n	11e50 <connected+0x6c>
   11e64:	2811      	cmp	r0, #17
   11e66:	dd46      	ble.n	11ef6 <connected+0x112>
   11e68:	2312      	movs	r3, #18
   11e6a:	b14a      	cbz	r2, 11e80 <connected+0x9c>
   11e6c:	2104      	movs	r1, #4
   11e6e:	7139      	strb	r1, [r7, #4]
   11e70:	2100      	movs	r1, #0
   11e72:	7179      	strb	r1, [r7, #5]
   11e74:	71b9      	strb	r1, [r7, #6]
   11e76:	2101      	movs	r1, #1
   11e78:	71f9      	strb	r1, [r7, #7]
   11e7a:	6878      	ldr	r0, [r7, #4]
   11e7c:	f8cc 0010 	str.w	r0, [ip, #16]
   11e80:	2100      	movs	r1, #0
   11e82:	f36f 0100 	bfc	r1, #0, #1
   11e86:	f36f 0141 	bfc	r1, #1, #1
   11e8a:	f36f 0182 	bfc	r1, #2, #1
   11e8e:	f36f 01c5 	bfc	r1, #3, #3
   11e92:	2002      	movs	r0, #2
   11e94:	f360 1188 	bfi	r1, r0, #6, #3
   11e98:	f3c3 0309 	ubfx	r3, r3, #0, #10
   11e9c:	f363 2152 	bfi	r1, r3, #9, #10
   11ea0:	f36f 41de 	bfc	r1, #19, #12
   11ea4:	f36f 71df 	bfc	r1, #31, #1
   11ea8:	2300      	movs	r3, #0
   11eaa:	4895      	ldr	r0, [pc, #596]	; (12100 <connected+0x31c>)
   11eac:	f015 ffaf 	bl	27e0e <z_impl_z_log_msg_static_create>
   11eb0:	46ad      	mov	sp, r5
   11eb2:	f3bf 8f5b 	dmb	ish
   11eb6:	4b93      	ldr	r3, [pc, #588]	; (12104 <connected+0x320>)
   11eb8:	681b      	ldr	r3, [r3, #0]
   11eba:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, EFL_CONNECTED_FLAG) && atomic_test_bit(flags, EFR_CONNECTED_FLAG) && atomic_test_bit(flags, ERL_CONNECTED_FLAG) && atomic_test_bit(flags, ERR_CONNECTED_FLAG)) {
   11ebe:	f013 0f10 	tst.w	r3, #16
   11ec2:	d009      	beq.n	11ed8 <connected+0xf4>
   11ec4:	f3bf 8f5b 	dmb	ish
   11ec8:	4b8e      	ldr	r3, [pc, #568]	; (12104 <connected+0x320>)
   11eca:	681b      	ldr	r3, [r3, #0]
   11ecc:	f3bf 8f5b 	dmb	ish
   11ed0:	f013 0f20 	tst.w	r3, #32
   11ed4:	f040 8570 	bne.w	129b8 <connected+0xbd4>
		scan_param.interval = BT_GAP_SCAN_FAST_INTERVAL;
   11ed8:	488b      	ldr	r0, [pc, #556]	; (12108 <connected+0x324>)
   11eda:	2360      	movs	r3, #96	; 0x60
   11edc:	8083      	strh	r3, [r0, #4]
		scan_param.window = BT_GAP_SCAN_FAST_WINDOW;
   11ede:	2330      	movs	r3, #48	; 0x30
   11ee0:	80c3      	strh	r3, [r0, #6]
		err = bt_conn_le_create_auto(&scan_param, &conn_param);
   11ee2:	498a      	ldr	r1, [pc, #552]	; (1210c <connected+0x328>)
   11ee4:	f00a fb82 	bl	1c5ec <bt_conn_le_create_auto>
		if (err) {
   11ee8:	f010 0fff 	tst.w	r0, #255	; 0xff
   11eec:	f040 85b4 	bne.w	12a58 <connected+0xc74>
}
   11ef0:	3728      	adds	r7, #40	; 0x28
   11ef2:	46bd      	mov	sp, r7
   11ef4:	bdb0      	pop	{r4, r5, r7, pc}
		LOG_WRN("Failed to connect to %s (%u)", addr_str, err);
   11ef6:	f06f 031b 	mvn.w	r3, #27
   11efa:	e7b6      	b.n	11e6a <connected+0x86>
   11efc:	2207      	movs	r2, #7
   11efe:	4984      	ldr	r1, [pc, #528]	; (12110 <connected+0x32c>)
   11f00:	4628      	mov	r0, r5
   11f02:	f016 fbac 	bl	2865e <memcmp>
		if (bt_addr_le_eq(addr, &IFL_bt_addr)) {
   11f06:	2800      	cmp	r0, #0
   11f08:	f040 8092 	bne.w	12030 <connected+0x24c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   11f0c:	4b7d      	ldr	r3, [pc, #500]	; (12104 <connected+0x320>)
   11f0e:	f3bf 8f5b 	dmb	ish
   11f12:	e853 2f00 	ldrex	r2, [r3]
   11f16:	f042 0101 	orr.w	r1, r2, #1
   11f1a:	e843 1000 	strex	r0, r1, [r3]
   11f1e:	2800      	cmp	r0, #0
   11f20:	d1f7      	bne.n	11f12 <connected+0x12e>
   11f22:	f3bf 8f5b 	dmb	ish
			if(atomic_test_and_set_bit(flags, IFL_CONNECTED_FLAG)) {
   11f26:	f012 0f01 	tst.w	r2, #1
   11f2a:	d11e      	bne.n	11f6a <connected+0x186>
			LOG_INF("Internal FL connected, addr: %s", addr_str);
   11f2c:	466d      	mov	r5, sp
   11f2e:	2300      	movs	r3, #0
   11f30:	713b      	strb	r3, [r7, #4]
   11f32:	2302      	movs	r3, #2
   11f34:	717b      	strb	r3, [r7, #5]
   11f36:	b088      	sub	sp, #32
   11f38:	466c      	mov	r4, sp
   11f3a:	f114 0210 	adds.w	r2, r4, #16
   11f3e:	d040      	beq.n	11fc2 <connected+0x1de>
   11f40:	200e      	movs	r0, #14
   11f42:	b11a      	cbz	r2, 11f4c <connected+0x168>
   11f44:	2804      	cmp	r0, #4
   11f46:	dd01      	ble.n	11f4c <connected+0x168>
   11f48:	4b72      	ldr	r3, [pc, #456]	; (12114 <connected+0x330>)
   11f4a:	6163      	str	r3, [r4, #20]
   11f4c:	2300      	movs	r3, #0
   11f4e:	703b      	strb	r3, [r7, #0]
   11f50:	2302      	movs	r3, #2
   11f52:	707b      	strb	r3, [r7, #1]
   11f54:	2a00      	cmp	r2, #0
   11f56:	d041      	beq.n	11fdc <connected+0x1f8>
   11f58:	2808      	cmp	r0, #8
   11f5a:	dd02      	ble.n	11f62 <connected+0x17e>
   11f5c:	f107 0308 	add.w	r3, r7, #8
   11f60:	61a3      	str	r3, [r4, #24]
   11f62:	f104 031c 	add.w	r3, r4, #28
   11f66:	2100      	movs	r1, #0
   11f68:	e036      	b.n	11fd8 <connected+0x1f4>
				LOG_WRN("WARNING, DUPLICATE CONNECTION:");
   11f6a:	2006      	movs	r0, #6
   11f6c:	f003 ff2c 	bl	15dc8 <z_log_msg_alloc>
   11f70:	2200      	movs	r2, #0
   11f72:	f36f 0200 	bfc	r2, #0, #1
   11f76:	f36f 0241 	bfc	r2, #1, #1
   11f7a:	f36f 0282 	bfc	r2, #2, #1
   11f7e:	f36f 02c5 	bfc	r2, #3, #3
   11f82:	2302      	movs	r3, #2
   11f84:	f363 1288 	bfi	r2, r3, #6, #3
   11f88:	2308      	movs	r3, #8
   11f8a:	f363 2252 	bfi	r2, r3, #9, #10
   11f8e:	f36f 42de 	bfc	r2, #19, #12
   11f92:	f36f 72df 	bfc	r2, #31, #1
   11f96:	4604      	mov	r4, r0
   11f98:	b168      	cbz	r0, 11fb6 <connected+0x1d2>
   11f9a:	f110 0310 	adds.w	r3, r0, #16
   11f9e:	d001      	beq.n	11fa4 <connected+0x1c0>
   11fa0:	495d      	ldr	r1, [pc, #372]	; (12118 <connected+0x334>)
   11fa2:	6141      	str	r1, [r0, #20]
   11fa4:	b13b      	cbz	r3, 11fb6 <connected+0x1d2>
   11fa6:	2302      	movs	r3, #2
   11fa8:	713b      	strb	r3, [r7, #4]
   11faa:	2300      	movs	r3, #0
   11fac:	717b      	strb	r3, [r7, #5]
   11fae:	71bb      	strb	r3, [r7, #6]
   11fb0:	71fb      	strb	r3, [r7, #7]
   11fb2:	6878      	ldr	r0, [r7, #4]
   11fb4:	6120      	str	r0, [r4, #16]
   11fb6:	2300      	movs	r3, #0
   11fb8:	4951      	ldr	r1, [pc, #324]	; (12100 <connected+0x31c>)
   11fba:	4620      	mov	r0, r4
   11fbc:	f015 ff0f 	bl	27dde <z_log_msg_finalize>
   11fc0:	e7b4      	b.n	11f2c <connected+0x148>
			LOG_INF("Internal FL connected, addr: %s", addr_str);
   11fc2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   11fc6:	e7bc      	b.n	11f42 <connected+0x15e>
   11fc8:	f101 0c28 	add.w	ip, r1, #40	; 0x28
   11fcc:	44bc      	add	ip, r7
   11fce:	f81c cc28 	ldrb.w	ip, [ip, #-40]
   11fd2:	f803 cb01 	strb.w	ip, [r3], #1
   11fd6:	3101      	adds	r1, #1
   11fd8:	2901      	cmp	r1, #1
   11fda:	d9f5      	bls.n	11fc8 <connected+0x1e4>
   11fdc:	280d      	cmp	r0, #13
   11fde:	dd24      	ble.n	1202a <connected+0x246>
   11fe0:	230e      	movs	r3, #14
   11fe2:	b142      	cbz	r2, 11ff6 <connected+0x212>
   11fe4:	2103      	movs	r1, #3
   11fe6:	7139      	strb	r1, [r7, #4]
   11fe8:	2100      	movs	r1, #0
   11fea:	7179      	strb	r1, [r7, #5]
   11fec:	71b9      	strb	r1, [r7, #6]
   11fee:	2101      	movs	r1, #1
   11ff0:	71f9      	strb	r1, [r7, #7]
   11ff2:	6878      	ldr	r0, [r7, #4]
   11ff4:	6120      	str	r0, [r4, #16]
   11ff6:	2100      	movs	r1, #0
   11ff8:	f36f 0100 	bfc	r1, #0, #1
   11ffc:	f36f 0141 	bfc	r1, #1, #1
   12000:	f36f 0182 	bfc	r1, #2, #1
   12004:	f36f 01c5 	bfc	r1, #3, #3
   12008:	2003      	movs	r0, #3
   1200a:	f360 1188 	bfi	r1, r0, #6, #3
   1200e:	f3c3 0309 	ubfx	r3, r3, #0, #10
   12012:	f363 2152 	bfi	r1, r3, #9, #10
   12016:	f36f 41de 	bfc	r1, #19, #12
   1201a:	f36f 71df 	bfc	r1, #31, #1
   1201e:	2300      	movs	r3, #0
   12020:	4837      	ldr	r0, [pc, #220]	; (12100 <connected+0x31c>)
   12022:	f015 fef4 	bl	27e0e <z_impl_z_log_msg_static_create>
   12026:	46ad      	mov	sp, r5
   12028:	e743      	b.n	11eb2 <connected+0xce>
   1202a:	f06f 031b 	mvn.w	r3, #27
   1202e:	e7d8      	b.n	11fe2 <connected+0x1fe>
   12030:	2207      	movs	r2, #7
   12032:	493a      	ldr	r1, [pc, #232]	; (1211c <connected+0x338>)
   12034:	4628      	mov	r0, r5
   12036:	f016 fb12 	bl	2865e <memcmp>
		} else if (bt_addr_le_eq(addr, &IFR_bt_addr)) {
   1203a:	2800      	cmp	r0, #0
   1203c:	f040 80a6 	bne.w	1218c <connected+0x3a8>
   12040:	4b30      	ldr	r3, [pc, #192]	; (12104 <connected+0x320>)
   12042:	f3bf 8f5b 	dmb	ish
   12046:	e853 2f00 	ldrex	r2, [r3]
   1204a:	f042 0102 	orr.w	r1, r2, #2
   1204e:	e843 1000 	strex	r0, r1, [r3]
   12052:	2800      	cmp	r0, #0
   12054:	d1f7      	bne.n	12046 <connected+0x262>
   12056:	f3bf 8f5b 	dmb	ish
			if(atomic_test_and_set_bit(flags, IFR_CONNECTED_FLAG)) {
   1205a:	f012 0f02 	tst.w	r2, #2
   1205e:	d11e      	bne.n	1209e <connected+0x2ba>
			LOG_INF("Internal FR connected, addr: %s", addr_str);
   12060:	466d      	mov	r5, sp
   12062:	2300      	movs	r3, #0
   12064:	713b      	strb	r3, [r7, #4]
   12066:	2302      	movs	r3, #2
   12068:	717b      	strb	r3, [r7, #5]
   1206a:	b088      	sub	sp, #32
   1206c:	466c      	mov	r4, sp
   1206e:	f114 0210 	adds.w	r2, r4, #16
   12072:	d040      	beq.n	120f6 <connected+0x312>
   12074:	200e      	movs	r0, #14
   12076:	b11a      	cbz	r2, 12080 <connected+0x29c>
   12078:	2804      	cmp	r0, #4
   1207a:	dd01      	ble.n	12080 <connected+0x29c>
   1207c:	4b28      	ldr	r3, [pc, #160]	; (12120 <connected+0x33c>)
   1207e:	6163      	str	r3, [r4, #20]
   12080:	2300      	movs	r3, #0
   12082:	703b      	strb	r3, [r7, #0]
   12084:	2302      	movs	r3, #2
   12086:	707b      	strb	r3, [r7, #1]
   12088:	2a00      	cmp	r2, #0
   1208a:	d055      	beq.n	12138 <connected+0x354>
   1208c:	2808      	cmp	r0, #8
   1208e:	dd02      	ble.n	12096 <connected+0x2b2>
   12090:	f107 0308 	add.w	r3, r7, #8
   12094:	61a3      	str	r3, [r4, #24]
   12096:	f104 031c 	add.w	r3, r4, #28
   1209a:	2100      	movs	r1, #0
   1209c:	e04a      	b.n	12134 <connected+0x350>
				LOG_WRN("WARNING, DUPLICATE CONNECTION:");
   1209e:	2006      	movs	r0, #6
   120a0:	f003 fe92 	bl	15dc8 <z_log_msg_alloc>
   120a4:	2200      	movs	r2, #0
   120a6:	f36f 0200 	bfc	r2, #0, #1
   120aa:	f36f 0241 	bfc	r2, #1, #1
   120ae:	f36f 0282 	bfc	r2, #2, #1
   120b2:	f36f 02c5 	bfc	r2, #3, #3
   120b6:	2302      	movs	r3, #2
   120b8:	f363 1288 	bfi	r2, r3, #6, #3
   120bc:	2308      	movs	r3, #8
   120be:	f363 2252 	bfi	r2, r3, #9, #10
   120c2:	f36f 42de 	bfc	r2, #19, #12
   120c6:	f36f 72df 	bfc	r2, #31, #1
   120ca:	4604      	mov	r4, r0
   120cc:	b168      	cbz	r0, 120ea <connected+0x306>
   120ce:	f110 0310 	adds.w	r3, r0, #16
   120d2:	d001      	beq.n	120d8 <connected+0x2f4>
   120d4:	4910      	ldr	r1, [pc, #64]	; (12118 <connected+0x334>)
   120d6:	6141      	str	r1, [r0, #20]
   120d8:	b13b      	cbz	r3, 120ea <connected+0x306>
   120da:	2302      	movs	r3, #2
   120dc:	713b      	strb	r3, [r7, #4]
   120de:	2300      	movs	r3, #0
   120e0:	717b      	strb	r3, [r7, #5]
   120e2:	71bb      	strb	r3, [r7, #6]
   120e4:	71fb      	strb	r3, [r7, #7]
   120e6:	6878      	ldr	r0, [r7, #4]
   120e8:	6120      	str	r0, [r4, #16]
   120ea:	2300      	movs	r3, #0
   120ec:	4904      	ldr	r1, [pc, #16]	; (12100 <connected+0x31c>)
   120ee:	4620      	mov	r0, r4
   120f0:	f015 fe75 	bl	27dde <z_log_msg_finalize>
   120f4:	e7b4      	b.n	12060 <connected+0x27c>
			LOG_INF("Internal FR connected, addr: %s", addr_str);
   120f6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   120fa:	e7bc      	b.n	12076 <connected+0x292>
   120fc:	0002e540 	.word	0x0002e540
   12100:	0002df40 	.word	0x0002df40
   12104:	20007b0c 	.word	0x20007b0c
   12108:	20007afc 	.word	0x20007afc
   1210c:	200006d4 	.word	0x200006d4
   12110:	20007af4 	.word	0x20007af4
   12114:	0002e580 	.word	0x0002e580
   12118:	0002e560 	.word	0x0002e560
   1211c:	20007aec 	.word	0x20007aec
   12120:	0002e5a0 	.word	0x0002e5a0
   12124:	f101 0c28 	add.w	ip, r1, #40	; 0x28
   12128:	44bc      	add	ip, r7
   1212a:	f81c cc28 	ldrb.w	ip, [ip, #-40]
   1212e:	f803 cb01 	strb.w	ip, [r3], #1
   12132:	3101      	adds	r1, #1
   12134:	2901      	cmp	r1, #1
   12136:	d9f5      	bls.n	12124 <connected+0x340>
   12138:	280d      	cmp	r0, #13
   1213a:	dd24      	ble.n	12186 <connected+0x3a2>
   1213c:	230e      	movs	r3, #14
   1213e:	b142      	cbz	r2, 12152 <connected+0x36e>
   12140:	2103      	movs	r1, #3
   12142:	7139      	strb	r1, [r7, #4]
   12144:	2100      	movs	r1, #0
   12146:	7179      	strb	r1, [r7, #5]
   12148:	71b9      	strb	r1, [r7, #6]
   1214a:	2101      	movs	r1, #1
   1214c:	71f9      	strb	r1, [r7, #7]
   1214e:	6878      	ldr	r0, [r7, #4]
   12150:	6120      	str	r0, [r4, #16]
   12152:	2100      	movs	r1, #0
   12154:	f36f 0100 	bfc	r1, #0, #1
   12158:	f36f 0141 	bfc	r1, #1, #1
   1215c:	f36f 0182 	bfc	r1, #2, #1
   12160:	f36f 01c5 	bfc	r1, #3, #3
   12164:	2003      	movs	r0, #3
   12166:	f360 1188 	bfi	r1, r0, #6, #3
   1216a:	f3c3 0309 	ubfx	r3, r3, #0, #10
   1216e:	f363 2152 	bfi	r1, r3, #9, #10
   12172:	f36f 41de 	bfc	r1, #19, #12
   12176:	f36f 71df 	bfc	r1, #31, #1
   1217a:	2300      	movs	r3, #0
   1217c:	48b9      	ldr	r0, [pc, #740]	; (12464 <connected+0x680>)
   1217e:	f015 fe46 	bl	27e0e <z_impl_z_log_msg_static_create>
   12182:	46ad      	mov	sp, r5
   12184:	e695      	b.n	11eb2 <connected+0xce>
   12186:	f06f 031b 	mvn.w	r3, #27
   1218a:	e7d8      	b.n	1213e <connected+0x35a>
   1218c:	2207      	movs	r2, #7
   1218e:	49b6      	ldr	r1, [pc, #728]	; (12468 <connected+0x684>)
   12190:	4628      	mov	r0, r5
   12192:	f016 fa64 	bl	2865e <memcmp>
		} else if (bt_addr_le_eq(addr, &IRL_bt_addr)) {
   12196:	2800      	cmp	r0, #0
   12198:	f040 8092 	bne.w	122c0 <connected+0x4dc>
   1219c:	4bb3      	ldr	r3, [pc, #716]	; (1246c <connected+0x688>)
   1219e:	f3bf 8f5b 	dmb	ish
   121a2:	e853 2f00 	ldrex	r2, [r3]
   121a6:	f042 0104 	orr.w	r1, r2, #4
   121aa:	e843 1000 	strex	r0, r1, [r3]
   121ae:	2800      	cmp	r0, #0
   121b0:	d1f7      	bne.n	121a2 <connected+0x3be>
   121b2:	f3bf 8f5b 	dmb	ish
			if(atomic_test_and_set_bit(flags, IRL_CONNECTED_FLAG)) {
   121b6:	f012 0f04 	tst.w	r2, #4
   121ba:	d11e      	bne.n	121fa <connected+0x416>
			LOG_INF("Internal RL connected, addr: %s", addr_str);
   121bc:	466d      	mov	r5, sp
   121be:	2300      	movs	r3, #0
   121c0:	713b      	strb	r3, [r7, #4]
   121c2:	2302      	movs	r3, #2
   121c4:	717b      	strb	r3, [r7, #5]
   121c6:	b088      	sub	sp, #32
   121c8:	466c      	mov	r4, sp
   121ca:	f114 0210 	adds.w	r2, r4, #16
   121ce:	d040      	beq.n	12252 <connected+0x46e>
   121d0:	200e      	movs	r0, #14
   121d2:	b11a      	cbz	r2, 121dc <connected+0x3f8>
   121d4:	2804      	cmp	r0, #4
   121d6:	dd01      	ble.n	121dc <connected+0x3f8>
   121d8:	4ba5      	ldr	r3, [pc, #660]	; (12470 <connected+0x68c>)
   121da:	6163      	str	r3, [r4, #20]
   121dc:	2300      	movs	r3, #0
   121de:	703b      	strb	r3, [r7, #0]
   121e0:	2302      	movs	r3, #2
   121e2:	707b      	strb	r3, [r7, #1]
   121e4:	2a00      	cmp	r2, #0
   121e6:	d041      	beq.n	1226c <connected+0x488>
   121e8:	2808      	cmp	r0, #8
   121ea:	dd02      	ble.n	121f2 <connected+0x40e>
   121ec:	f107 0308 	add.w	r3, r7, #8
   121f0:	61a3      	str	r3, [r4, #24]
   121f2:	f104 031c 	add.w	r3, r4, #28
   121f6:	2100      	movs	r1, #0
   121f8:	e036      	b.n	12268 <connected+0x484>
				LOG_WRN("WARNING, DUPLICATE CONNECTION:");
   121fa:	2006      	movs	r0, #6
   121fc:	f003 fde4 	bl	15dc8 <z_log_msg_alloc>
   12200:	2200      	movs	r2, #0
   12202:	f36f 0200 	bfc	r2, #0, #1
   12206:	f36f 0241 	bfc	r2, #1, #1
   1220a:	f36f 0282 	bfc	r2, #2, #1
   1220e:	f36f 02c5 	bfc	r2, #3, #3
   12212:	2302      	movs	r3, #2
   12214:	f363 1288 	bfi	r2, r3, #6, #3
   12218:	2308      	movs	r3, #8
   1221a:	f363 2252 	bfi	r2, r3, #9, #10
   1221e:	f36f 42de 	bfc	r2, #19, #12
   12222:	f36f 72df 	bfc	r2, #31, #1
   12226:	4604      	mov	r4, r0
   12228:	b168      	cbz	r0, 12246 <connected+0x462>
   1222a:	f110 0310 	adds.w	r3, r0, #16
   1222e:	d001      	beq.n	12234 <connected+0x450>
   12230:	4990      	ldr	r1, [pc, #576]	; (12474 <connected+0x690>)
   12232:	6141      	str	r1, [r0, #20]
   12234:	b13b      	cbz	r3, 12246 <connected+0x462>
   12236:	2302      	movs	r3, #2
   12238:	713b      	strb	r3, [r7, #4]
   1223a:	2300      	movs	r3, #0
   1223c:	717b      	strb	r3, [r7, #5]
   1223e:	71bb      	strb	r3, [r7, #6]
   12240:	71fb      	strb	r3, [r7, #7]
   12242:	6878      	ldr	r0, [r7, #4]
   12244:	6120      	str	r0, [r4, #16]
   12246:	2300      	movs	r3, #0
   12248:	4986      	ldr	r1, [pc, #536]	; (12464 <connected+0x680>)
   1224a:	4620      	mov	r0, r4
   1224c:	f015 fdc7 	bl	27dde <z_log_msg_finalize>
   12250:	e7b4      	b.n	121bc <connected+0x3d8>
			LOG_INF("Internal RL connected, addr: %s", addr_str);
   12252:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   12256:	e7bc      	b.n	121d2 <connected+0x3ee>
   12258:	f101 0c28 	add.w	ip, r1, #40	; 0x28
   1225c:	44bc      	add	ip, r7
   1225e:	f81c cc28 	ldrb.w	ip, [ip, #-40]
   12262:	f803 cb01 	strb.w	ip, [r3], #1
   12266:	3101      	adds	r1, #1
   12268:	2901      	cmp	r1, #1
   1226a:	d9f5      	bls.n	12258 <connected+0x474>
   1226c:	280d      	cmp	r0, #13
   1226e:	dd24      	ble.n	122ba <connected+0x4d6>
   12270:	230e      	movs	r3, #14
   12272:	b142      	cbz	r2, 12286 <connected+0x4a2>
   12274:	2103      	movs	r1, #3
   12276:	7139      	strb	r1, [r7, #4]
   12278:	2100      	movs	r1, #0
   1227a:	7179      	strb	r1, [r7, #5]
   1227c:	71b9      	strb	r1, [r7, #6]
   1227e:	2101      	movs	r1, #1
   12280:	71f9      	strb	r1, [r7, #7]
   12282:	6878      	ldr	r0, [r7, #4]
   12284:	6120      	str	r0, [r4, #16]
   12286:	2100      	movs	r1, #0
   12288:	f36f 0100 	bfc	r1, #0, #1
   1228c:	f36f 0141 	bfc	r1, #1, #1
   12290:	f36f 0182 	bfc	r1, #2, #1
   12294:	f36f 01c5 	bfc	r1, #3, #3
   12298:	2003      	movs	r0, #3
   1229a:	f360 1188 	bfi	r1, r0, #6, #3
   1229e:	f3c3 0309 	ubfx	r3, r3, #0, #10
   122a2:	f363 2152 	bfi	r1, r3, #9, #10
   122a6:	f36f 41de 	bfc	r1, #19, #12
   122aa:	f36f 71df 	bfc	r1, #31, #1
   122ae:	2300      	movs	r3, #0
   122b0:	486c      	ldr	r0, [pc, #432]	; (12464 <connected+0x680>)
   122b2:	f015 fdac 	bl	27e0e <z_impl_z_log_msg_static_create>
   122b6:	46ad      	mov	sp, r5
   122b8:	e5fb      	b.n	11eb2 <connected+0xce>
   122ba:	f06f 031b 	mvn.w	r3, #27
   122be:	e7d8      	b.n	12272 <connected+0x48e>
   122c0:	2207      	movs	r2, #7
   122c2:	496d      	ldr	r1, [pc, #436]	; (12478 <connected+0x694>)
   122c4:	4628      	mov	r0, r5
   122c6:	f016 f9ca 	bl	2865e <memcmp>
		} else if (bt_addr_le_eq(addr, &IRR_bt_addr)) {
   122ca:	2800      	cmp	r0, #0
   122cc:	f040 8092 	bne.w	123f4 <connected+0x610>
   122d0:	4b66      	ldr	r3, [pc, #408]	; (1246c <connected+0x688>)
   122d2:	f3bf 8f5b 	dmb	ish
   122d6:	e853 2f00 	ldrex	r2, [r3]
   122da:	f042 0108 	orr.w	r1, r2, #8
   122de:	e843 1000 	strex	r0, r1, [r3]
   122e2:	2800      	cmp	r0, #0
   122e4:	d1f7      	bne.n	122d6 <connected+0x4f2>
   122e6:	f3bf 8f5b 	dmb	ish
			if(atomic_test_and_set_bit(flags, IRR_CONNECTED_FLAG)) {
   122ea:	f012 0f08 	tst.w	r2, #8
   122ee:	d11e      	bne.n	1232e <connected+0x54a>
			LOG_INF("Internal RR connected, addr: %s", addr_str);
   122f0:	466d      	mov	r5, sp
   122f2:	2300      	movs	r3, #0
   122f4:	713b      	strb	r3, [r7, #4]
   122f6:	2302      	movs	r3, #2
   122f8:	717b      	strb	r3, [r7, #5]
   122fa:	b088      	sub	sp, #32
   122fc:	466c      	mov	r4, sp
   122fe:	f114 0210 	adds.w	r2, r4, #16
   12302:	d040      	beq.n	12386 <connected+0x5a2>
   12304:	200e      	movs	r0, #14
   12306:	b11a      	cbz	r2, 12310 <connected+0x52c>
   12308:	2804      	cmp	r0, #4
   1230a:	dd01      	ble.n	12310 <connected+0x52c>
   1230c:	4b5b      	ldr	r3, [pc, #364]	; (1247c <connected+0x698>)
   1230e:	6163      	str	r3, [r4, #20]
   12310:	2300      	movs	r3, #0
   12312:	703b      	strb	r3, [r7, #0]
   12314:	2302      	movs	r3, #2
   12316:	707b      	strb	r3, [r7, #1]
   12318:	2a00      	cmp	r2, #0
   1231a:	d041      	beq.n	123a0 <connected+0x5bc>
   1231c:	2808      	cmp	r0, #8
   1231e:	dd02      	ble.n	12326 <connected+0x542>
   12320:	f107 0308 	add.w	r3, r7, #8
   12324:	61a3      	str	r3, [r4, #24]
   12326:	f104 031c 	add.w	r3, r4, #28
   1232a:	2100      	movs	r1, #0
   1232c:	e036      	b.n	1239c <connected+0x5b8>
				LOG_WRN("WARNING, DUPLICATE CONNECTION:");
   1232e:	2006      	movs	r0, #6
   12330:	f003 fd4a 	bl	15dc8 <z_log_msg_alloc>
   12334:	2200      	movs	r2, #0
   12336:	f36f 0200 	bfc	r2, #0, #1
   1233a:	f36f 0241 	bfc	r2, #1, #1
   1233e:	f36f 0282 	bfc	r2, #2, #1
   12342:	f36f 02c5 	bfc	r2, #3, #3
   12346:	2302      	movs	r3, #2
   12348:	f363 1288 	bfi	r2, r3, #6, #3
   1234c:	2308      	movs	r3, #8
   1234e:	f363 2252 	bfi	r2, r3, #9, #10
   12352:	f36f 42de 	bfc	r2, #19, #12
   12356:	f36f 72df 	bfc	r2, #31, #1
   1235a:	4604      	mov	r4, r0
   1235c:	b168      	cbz	r0, 1237a <connected+0x596>
   1235e:	f110 0310 	adds.w	r3, r0, #16
   12362:	d001      	beq.n	12368 <connected+0x584>
   12364:	4943      	ldr	r1, [pc, #268]	; (12474 <connected+0x690>)
   12366:	6141      	str	r1, [r0, #20]
   12368:	b13b      	cbz	r3, 1237a <connected+0x596>
   1236a:	2302      	movs	r3, #2
   1236c:	713b      	strb	r3, [r7, #4]
   1236e:	2300      	movs	r3, #0
   12370:	717b      	strb	r3, [r7, #5]
   12372:	71bb      	strb	r3, [r7, #6]
   12374:	71fb      	strb	r3, [r7, #7]
   12376:	6878      	ldr	r0, [r7, #4]
   12378:	6120      	str	r0, [r4, #16]
   1237a:	2300      	movs	r3, #0
   1237c:	4939      	ldr	r1, [pc, #228]	; (12464 <connected+0x680>)
   1237e:	4620      	mov	r0, r4
   12380:	f015 fd2d 	bl	27dde <z_log_msg_finalize>
   12384:	e7b4      	b.n	122f0 <connected+0x50c>
			LOG_INF("Internal RR connected, addr: %s", addr_str);
   12386:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1238a:	e7bc      	b.n	12306 <connected+0x522>
   1238c:	f101 0c28 	add.w	ip, r1, #40	; 0x28
   12390:	44bc      	add	ip, r7
   12392:	f81c cc28 	ldrb.w	ip, [ip, #-40]
   12396:	f803 cb01 	strb.w	ip, [r3], #1
   1239a:	3101      	adds	r1, #1
   1239c:	2901      	cmp	r1, #1
   1239e:	d9f5      	bls.n	1238c <connected+0x5a8>
   123a0:	280d      	cmp	r0, #13
   123a2:	dd24      	ble.n	123ee <connected+0x60a>
   123a4:	230e      	movs	r3, #14
   123a6:	b142      	cbz	r2, 123ba <connected+0x5d6>
   123a8:	2103      	movs	r1, #3
   123aa:	7139      	strb	r1, [r7, #4]
   123ac:	2100      	movs	r1, #0
   123ae:	7179      	strb	r1, [r7, #5]
   123b0:	71b9      	strb	r1, [r7, #6]
   123b2:	2101      	movs	r1, #1
   123b4:	71f9      	strb	r1, [r7, #7]
   123b6:	6878      	ldr	r0, [r7, #4]
   123b8:	6120      	str	r0, [r4, #16]
   123ba:	2100      	movs	r1, #0
   123bc:	f36f 0100 	bfc	r1, #0, #1
   123c0:	f36f 0141 	bfc	r1, #1, #1
   123c4:	f36f 0182 	bfc	r1, #2, #1
   123c8:	f36f 01c5 	bfc	r1, #3, #3
   123cc:	2003      	movs	r0, #3
   123ce:	f360 1188 	bfi	r1, r0, #6, #3
   123d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
   123d6:	f363 2152 	bfi	r1, r3, #9, #10
   123da:	f36f 41de 	bfc	r1, #19, #12
   123de:	f36f 71df 	bfc	r1, #31, #1
   123e2:	2300      	movs	r3, #0
   123e4:	481f      	ldr	r0, [pc, #124]	; (12464 <connected+0x680>)
   123e6:	f015 fd12 	bl	27e0e <z_impl_z_log_msg_static_create>
   123ea:	46ad      	mov	sp, r5
   123ec:	e561      	b.n	11eb2 <connected+0xce>
   123ee:	f06f 031b 	mvn.w	r3, #27
   123f2:	e7d8      	b.n	123a6 <connected+0x5c2>
   123f4:	2207      	movs	r2, #7
   123f6:	4922      	ldr	r1, [pc, #136]	; (12480 <connected+0x69c>)
   123f8:	4628      	mov	r0, r5
   123fa:	f016 f930 	bl	2865e <memcmp>
		} else if (bt_addr_le_eq(addr, &EFL_bt_addr)) {
   123fe:	2800      	cmp	r0, #0
   12400:	f040 80a5 	bne.w	1254e <connected+0x76a>
   12404:	4b19      	ldr	r3, [pc, #100]	; (1246c <connected+0x688>)
   12406:	f3bf 8f5b 	dmb	ish
   1240a:	e853 2f00 	ldrex	r2, [r3]
   1240e:	f042 0110 	orr.w	r1, r2, #16
   12412:	e843 1000 	strex	r0, r1, [r3]
   12416:	2800      	cmp	r0, #0
   12418:	d1f7      	bne.n	1240a <connected+0x626>
   1241a:	f3bf 8f5b 	dmb	ish
			if(atomic_test_and_set_bit(flags, EFL_CONNECTED_FLAG)) {
   1241e:	f012 0f10 	tst.w	r2, #16
   12422:	d131      	bne.n	12488 <connected+0x6a4>
			LOG_INF("External FL connected, addr: %s", addr_str);
   12424:	466d      	mov	r5, sp
   12426:	2300      	movs	r3, #0
   12428:	713b      	strb	r3, [r7, #4]
   1242a:	2302      	movs	r3, #2
   1242c:	717b      	strb	r3, [r7, #5]
   1242e:	b088      	sub	sp, #32
   12430:	466c      	mov	r4, sp
   12432:	f114 0210 	adds.w	r2, r4, #16
   12436:	d053      	beq.n	124e0 <connected+0x6fc>
   12438:	200e      	movs	r0, #14
   1243a:	b11a      	cbz	r2, 12444 <connected+0x660>
   1243c:	2804      	cmp	r0, #4
   1243e:	dd01      	ble.n	12444 <connected+0x660>
   12440:	4b10      	ldr	r3, [pc, #64]	; (12484 <connected+0x6a0>)
   12442:	6163      	str	r3, [r4, #20]
   12444:	2300      	movs	r3, #0
   12446:	703b      	strb	r3, [r7, #0]
   12448:	2302      	movs	r3, #2
   1244a:	707b      	strb	r3, [r7, #1]
   1244c:	2a00      	cmp	r2, #0
   1244e:	d054      	beq.n	124fa <connected+0x716>
   12450:	2808      	cmp	r0, #8
   12452:	dd02      	ble.n	1245a <connected+0x676>
   12454:	f107 0308 	add.w	r3, r7, #8
   12458:	61a3      	str	r3, [r4, #24]
   1245a:	f104 031c 	add.w	r3, r4, #28
   1245e:	2100      	movs	r1, #0
   12460:	e049      	b.n	124f6 <connected+0x712>
   12462:	bf00      	nop
   12464:	0002df40 	.word	0x0002df40
   12468:	20007ae4 	.word	0x20007ae4
   1246c:	20007b0c 	.word	0x20007b0c
   12470:	0002e5c0 	.word	0x0002e5c0
   12474:	0002e560 	.word	0x0002e560
   12478:	20007adc 	.word	0x20007adc
   1247c:	0002e5e0 	.word	0x0002e5e0
   12480:	20007ad4 	.word	0x20007ad4
   12484:	0002e600 	.word	0x0002e600
				LOG_WRN("WARNING, DUPLICATE CONNECTION:");
   12488:	2006      	movs	r0, #6
   1248a:	f003 fc9d 	bl	15dc8 <z_log_msg_alloc>
   1248e:	2200      	movs	r2, #0
   12490:	f36f 0200 	bfc	r2, #0, #1
   12494:	f36f 0241 	bfc	r2, #1, #1
   12498:	f36f 0282 	bfc	r2, #2, #1
   1249c:	f36f 02c5 	bfc	r2, #3, #3
   124a0:	2302      	movs	r3, #2
   124a2:	f363 1288 	bfi	r2, r3, #6, #3
   124a6:	2308      	movs	r3, #8
   124a8:	f363 2252 	bfi	r2, r3, #9, #10
   124ac:	f36f 42de 	bfc	r2, #19, #12
   124b0:	f36f 72df 	bfc	r2, #31, #1
   124b4:	4604      	mov	r4, r0
   124b6:	b168      	cbz	r0, 124d4 <connected+0x6f0>
   124b8:	f110 0310 	adds.w	r3, r0, #16
   124bc:	d001      	beq.n	124c2 <connected+0x6de>
   124be:	49be      	ldr	r1, [pc, #760]	; (127b8 <connected+0x9d4>)
   124c0:	6141      	str	r1, [r0, #20]
   124c2:	b13b      	cbz	r3, 124d4 <connected+0x6f0>
   124c4:	2302      	movs	r3, #2
   124c6:	713b      	strb	r3, [r7, #4]
   124c8:	2300      	movs	r3, #0
   124ca:	717b      	strb	r3, [r7, #5]
   124cc:	71bb      	strb	r3, [r7, #6]
   124ce:	71fb      	strb	r3, [r7, #7]
   124d0:	6878      	ldr	r0, [r7, #4]
   124d2:	6120      	str	r0, [r4, #16]
   124d4:	2300      	movs	r3, #0
   124d6:	49b9      	ldr	r1, [pc, #740]	; (127bc <connected+0x9d8>)
   124d8:	4620      	mov	r0, r4
   124da:	f015 fc80 	bl	27dde <z_log_msg_finalize>
   124de:	e7a1      	b.n	12424 <connected+0x640>
			LOG_INF("External FL connected, addr: %s", addr_str);
   124e0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   124e4:	e7a9      	b.n	1243a <connected+0x656>
   124e6:	f101 0c28 	add.w	ip, r1, #40	; 0x28
   124ea:	44bc      	add	ip, r7
   124ec:	f81c cc28 	ldrb.w	ip, [ip, #-40]
   124f0:	f803 cb01 	strb.w	ip, [r3], #1
   124f4:	3101      	adds	r1, #1
   124f6:	2901      	cmp	r1, #1
   124f8:	d9f5      	bls.n	124e6 <connected+0x702>
   124fa:	280d      	cmp	r0, #13
   124fc:	dd24      	ble.n	12548 <connected+0x764>
   124fe:	230e      	movs	r3, #14
   12500:	b142      	cbz	r2, 12514 <connected+0x730>
   12502:	2103      	movs	r1, #3
   12504:	7139      	strb	r1, [r7, #4]
   12506:	2100      	movs	r1, #0
   12508:	7179      	strb	r1, [r7, #5]
   1250a:	71b9      	strb	r1, [r7, #6]
   1250c:	2101      	movs	r1, #1
   1250e:	71f9      	strb	r1, [r7, #7]
   12510:	6878      	ldr	r0, [r7, #4]
   12512:	6120      	str	r0, [r4, #16]
   12514:	2100      	movs	r1, #0
   12516:	f36f 0100 	bfc	r1, #0, #1
   1251a:	f36f 0141 	bfc	r1, #1, #1
   1251e:	f36f 0182 	bfc	r1, #2, #1
   12522:	f36f 01c5 	bfc	r1, #3, #3
   12526:	2003      	movs	r0, #3
   12528:	f360 1188 	bfi	r1, r0, #6, #3
   1252c:	f3c3 0309 	ubfx	r3, r3, #0, #10
   12530:	f363 2152 	bfi	r1, r3, #9, #10
   12534:	f36f 41de 	bfc	r1, #19, #12
   12538:	f36f 71df 	bfc	r1, #31, #1
   1253c:	2300      	movs	r3, #0
   1253e:	489f      	ldr	r0, [pc, #636]	; (127bc <connected+0x9d8>)
   12540:	f015 fc65 	bl	27e0e <z_impl_z_log_msg_static_create>
   12544:	46ad      	mov	sp, r5
   12546:	e4b4      	b.n	11eb2 <connected+0xce>
   12548:	f06f 031b 	mvn.w	r3, #27
   1254c:	e7d8      	b.n	12500 <connected+0x71c>
   1254e:	2207      	movs	r2, #7
   12550:	499b      	ldr	r1, [pc, #620]	; (127c0 <connected+0x9dc>)
   12552:	4628      	mov	r0, r5
   12554:	f016 f883 	bl	2865e <memcmp>
		} else if (bt_addr_le_eq(addr, &EFR_bt_addr)) {
   12558:	2800      	cmp	r0, #0
   1255a:	f040 8092 	bne.w	12682 <connected+0x89e>
   1255e:	4b99      	ldr	r3, [pc, #612]	; (127c4 <connected+0x9e0>)
   12560:	f3bf 8f5b 	dmb	ish
   12564:	e853 2f00 	ldrex	r2, [r3]
   12568:	f042 0120 	orr.w	r1, r2, #32
   1256c:	e843 1000 	strex	r0, r1, [r3]
   12570:	2800      	cmp	r0, #0
   12572:	d1f7      	bne.n	12564 <connected+0x780>
   12574:	f3bf 8f5b 	dmb	ish
			if(atomic_test_and_set_bit(flags, EFR_CONNECTED_FLAG)) {
   12578:	f012 0f20 	tst.w	r2, #32
   1257c:	d11e      	bne.n	125bc <connected+0x7d8>
			LOG_INF("External FR connected, addr: %s", addr_str);
   1257e:	466d      	mov	r5, sp
   12580:	2300      	movs	r3, #0
   12582:	713b      	strb	r3, [r7, #4]
   12584:	2302      	movs	r3, #2
   12586:	717b      	strb	r3, [r7, #5]
   12588:	b088      	sub	sp, #32
   1258a:	466c      	mov	r4, sp
   1258c:	f114 0210 	adds.w	r2, r4, #16
   12590:	d040      	beq.n	12614 <connected+0x830>
   12592:	200e      	movs	r0, #14
   12594:	b11a      	cbz	r2, 1259e <connected+0x7ba>
   12596:	2804      	cmp	r0, #4
   12598:	dd01      	ble.n	1259e <connected+0x7ba>
   1259a:	4b8b      	ldr	r3, [pc, #556]	; (127c8 <connected+0x9e4>)
   1259c:	6163      	str	r3, [r4, #20]
   1259e:	2300      	movs	r3, #0
   125a0:	703b      	strb	r3, [r7, #0]
   125a2:	2302      	movs	r3, #2
   125a4:	707b      	strb	r3, [r7, #1]
   125a6:	2a00      	cmp	r2, #0
   125a8:	d041      	beq.n	1262e <connected+0x84a>
   125aa:	2808      	cmp	r0, #8
   125ac:	dd02      	ble.n	125b4 <connected+0x7d0>
   125ae:	f107 0308 	add.w	r3, r7, #8
   125b2:	61a3      	str	r3, [r4, #24]
   125b4:	f104 031c 	add.w	r3, r4, #28
   125b8:	2100      	movs	r1, #0
   125ba:	e036      	b.n	1262a <connected+0x846>
				LOG_WRN("WARNING, DUPLICATE CONNECTION:");
   125bc:	2006      	movs	r0, #6
   125be:	f003 fc03 	bl	15dc8 <z_log_msg_alloc>
   125c2:	2200      	movs	r2, #0
   125c4:	f36f 0200 	bfc	r2, #0, #1
   125c8:	f36f 0241 	bfc	r2, #1, #1
   125cc:	f36f 0282 	bfc	r2, #2, #1
   125d0:	f36f 02c5 	bfc	r2, #3, #3
   125d4:	2302      	movs	r3, #2
   125d6:	f363 1288 	bfi	r2, r3, #6, #3
   125da:	2308      	movs	r3, #8
   125dc:	f363 2252 	bfi	r2, r3, #9, #10
   125e0:	f36f 42de 	bfc	r2, #19, #12
   125e4:	f36f 72df 	bfc	r2, #31, #1
   125e8:	4604      	mov	r4, r0
   125ea:	b168      	cbz	r0, 12608 <connected+0x824>
   125ec:	f110 0310 	adds.w	r3, r0, #16
   125f0:	d001      	beq.n	125f6 <connected+0x812>
   125f2:	4971      	ldr	r1, [pc, #452]	; (127b8 <connected+0x9d4>)
   125f4:	6141      	str	r1, [r0, #20]
   125f6:	b13b      	cbz	r3, 12608 <connected+0x824>
   125f8:	2302      	movs	r3, #2
   125fa:	713b      	strb	r3, [r7, #4]
   125fc:	2300      	movs	r3, #0
   125fe:	717b      	strb	r3, [r7, #5]
   12600:	71bb      	strb	r3, [r7, #6]
   12602:	71fb      	strb	r3, [r7, #7]
   12604:	6878      	ldr	r0, [r7, #4]
   12606:	6120      	str	r0, [r4, #16]
   12608:	2300      	movs	r3, #0
   1260a:	496c      	ldr	r1, [pc, #432]	; (127bc <connected+0x9d8>)
   1260c:	4620      	mov	r0, r4
   1260e:	f015 fbe6 	bl	27dde <z_log_msg_finalize>
   12612:	e7b4      	b.n	1257e <connected+0x79a>
			LOG_INF("External FR connected, addr: %s", addr_str);
   12614:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   12618:	e7bc      	b.n	12594 <connected+0x7b0>
   1261a:	f101 0c28 	add.w	ip, r1, #40	; 0x28
   1261e:	44bc      	add	ip, r7
   12620:	f81c cc28 	ldrb.w	ip, [ip, #-40]
   12624:	f803 cb01 	strb.w	ip, [r3], #1
   12628:	3101      	adds	r1, #1
   1262a:	2901      	cmp	r1, #1
   1262c:	d9f5      	bls.n	1261a <connected+0x836>
   1262e:	280d      	cmp	r0, #13
   12630:	dd24      	ble.n	1267c <connected+0x898>
   12632:	230e      	movs	r3, #14
   12634:	b142      	cbz	r2, 12648 <connected+0x864>
   12636:	2103      	movs	r1, #3
   12638:	7139      	strb	r1, [r7, #4]
   1263a:	2100      	movs	r1, #0
   1263c:	7179      	strb	r1, [r7, #5]
   1263e:	71b9      	strb	r1, [r7, #6]
   12640:	2101      	movs	r1, #1
   12642:	71f9      	strb	r1, [r7, #7]
   12644:	6878      	ldr	r0, [r7, #4]
   12646:	6120      	str	r0, [r4, #16]
   12648:	2100      	movs	r1, #0
   1264a:	f36f 0100 	bfc	r1, #0, #1
   1264e:	f36f 0141 	bfc	r1, #1, #1
   12652:	f36f 0182 	bfc	r1, #2, #1
   12656:	f36f 01c5 	bfc	r1, #3, #3
   1265a:	2003      	movs	r0, #3
   1265c:	f360 1188 	bfi	r1, r0, #6, #3
   12660:	f3c3 0309 	ubfx	r3, r3, #0, #10
   12664:	f363 2152 	bfi	r1, r3, #9, #10
   12668:	f36f 41de 	bfc	r1, #19, #12
   1266c:	f36f 71df 	bfc	r1, #31, #1
   12670:	2300      	movs	r3, #0
   12672:	4852      	ldr	r0, [pc, #328]	; (127bc <connected+0x9d8>)
   12674:	f015 fbcb 	bl	27e0e <z_impl_z_log_msg_static_create>
   12678:	46ad      	mov	sp, r5
   1267a:	e41a      	b.n	11eb2 <connected+0xce>
   1267c:	f06f 031b 	mvn.w	r3, #27
   12680:	e7d8      	b.n	12634 <connected+0x850>
   12682:	2207      	movs	r2, #7
   12684:	4951      	ldr	r1, [pc, #324]	; (127cc <connected+0x9e8>)
   12686:	4628      	mov	r0, r5
   12688:	f015 ffe9 	bl	2865e <memcmp>
		} else if (bt_addr_le_eq(addr, &ERL_bt_addr)) {
   1268c:	2800      	cmp	r0, #0
   1268e:	f040 80a1 	bne.w	127d4 <connected+0x9f0>
   12692:	4b4c      	ldr	r3, [pc, #304]	; (127c4 <connected+0x9e0>)
   12694:	f3bf 8f5b 	dmb	ish
   12698:	e853 2f00 	ldrex	r2, [r3]
   1269c:	f042 0140 	orr.w	r1, r2, #64	; 0x40
   126a0:	e843 1000 	strex	r0, r1, [r3]
   126a4:	2800      	cmp	r0, #0
   126a6:	d1f7      	bne.n	12698 <connected+0x8b4>
   126a8:	f3bf 8f5b 	dmb	ish
			if(atomic_test_and_set_bit(flags, ERL_CONNECTED_FLAG)) {
   126ac:	f012 0f40 	tst.w	r2, #64	; 0x40
   126b0:	d11e      	bne.n	126f0 <connected+0x90c>
			LOG_INF("External RL connected, addr: %s", addr_str);
   126b2:	466d      	mov	r5, sp
   126b4:	2300      	movs	r3, #0
   126b6:	713b      	strb	r3, [r7, #4]
   126b8:	2302      	movs	r3, #2
   126ba:	717b      	strb	r3, [r7, #5]
   126bc:	b088      	sub	sp, #32
   126be:	466c      	mov	r4, sp
   126c0:	f114 0210 	adds.w	r2, r4, #16
   126c4:	d040      	beq.n	12748 <connected+0x964>
   126c6:	200e      	movs	r0, #14
   126c8:	b11a      	cbz	r2, 126d2 <connected+0x8ee>
   126ca:	2804      	cmp	r0, #4
   126cc:	dd01      	ble.n	126d2 <connected+0x8ee>
   126ce:	4b40      	ldr	r3, [pc, #256]	; (127d0 <connected+0x9ec>)
   126d0:	6163      	str	r3, [r4, #20]
   126d2:	2300      	movs	r3, #0
   126d4:	703b      	strb	r3, [r7, #0]
   126d6:	2302      	movs	r3, #2
   126d8:	707b      	strb	r3, [r7, #1]
   126da:	2a00      	cmp	r2, #0
   126dc:	d041      	beq.n	12762 <connected+0x97e>
   126de:	2808      	cmp	r0, #8
   126e0:	dd02      	ble.n	126e8 <connected+0x904>
   126e2:	f107 0308 	add.w	r3, r7, #8
   126e6:	61a3      	str	r3, [r4, #24]
   126e8:	f104 031c 	add.w	r3, r4, #28
   126ec:	2100      	movs	r1, #0
   126ee:	e036      	b.n	1275e <connected+0x97a>
				LOG_WRN("WARNING, DUPLICATE CONNECTION:");
   126f0:	2006      	movs	r0, #6
   126f2:	f003 fb69 	bl	15dc8 <z_log_msg_alloc>
   126f6:	2200      	movs	r2, #0
   126f8:	f36f 0200 	bfc	r2, #0, #1
   126fc:	f36f 0241 	bfc	r2, #1, #1
   12700:	f36f 0282 	bfc	r2, #2, #1
   12704:	f36f 02c5 	bfc	r2, #3, #3
   12708:	2302      	movs	r3, #2
   1270a:	f363 1288 	bfi	r2, r3, #6, #3
   1270e:	2308      	movs	r3, #8
   12710:	f363 2252 	bfi	r2, r3, #9, #10
   12714:	f36f 42de 	bfc	r2, #19, #12
   12718:	f36f 72df 	bfc	r2, #31, #1
   1271c:	4604      	mov	r4, r0
   1271e:	b168      	cbz	r0, 1273c <connected+0x958>
   12720:	f110 0310 	adds.w	r3, r0, #16
   12724:	d001      	beq.n	1272a <connected+0x946>
   12726:	4924      	ldr	r1, [pc, #144]	; (127b8 <connected+0x9d4>)
   12728:	6141      	str	r1, [r0, #20]
   1272a:	b13b      	cbz	r3, 1273c <connected+0x958>
   1272c:	2302      	movs	r3, #2
   1272e:	713b      	strb	r3, [r7, #4]
   12730:	2300      	movs	r3, #0
   12732:	717b      	strb	r3, [r7, #5]
   12734:	71bb      	strb	r3, [r7, #6]
   12736:	71fb      	strb	r3, [r7, #7]
   12738:	6878      	ldr	r0, [r7, #4]
   1273a:	6120      	str	r0, [r4, #16]
   1273c:	2300      	movs	r3, #0
   1273e:	491f      	ldr	r1, [pc, #124]	; (127bc <connected+0x9d8>)
   12740:	4620      	mov	r0, r4
   12742:	f015 fb4c 	bl	27dde <z_log_msg_finalize>
   12746:	e7b4      	b.n	126b2 <connected+0x8ce>
			LOG_INF("External RL connected, addr: %s", addr_str);
   12748:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1274c:	e7bc      	b.n	126c8 <connected+0x8e4>
   1274e:	f101 0c28 	add.w	ip, r1, #40	; 0x28
   12752:	44bc      	add	ip, r7
   12754:	f81c cc28 	ldrb.w	ip, [ip, #-40]
   12758:	f803 cb01 	strb.w	ip, [r3], #1
   1275c:	3101      	adds	r1, #1
   1275e:	2901      	cmp	r1, #1
   12760:	d9f5      	bls.n	1274e <connected+0x96a>
   12762:	280d      	cmp	r0, #13
   12764:	dd25      	ble.n	127b2 <connected+0x9ce>
   12766:	230e      	movs	r3, #14
   12768:	b142      	cbz	r2, 1277c <connected+0x998>
   1276a:	2103      	movs	r1, #3
   1276c:	7139      	strb	r1, [r7, #4]
   1276e:	2100      	movs	r1, #0
   12770:	7179      	strb	r1, [r7, #5]
   12772:	71b9      	strb	r1, [r7, #6]
   12774:	2101      	movs	r1, #1
   12776:	71f9      	strb	r1, [r7, #7]
   12778:	6878      	ldr	r0, [r7, #4]
   1277a:	6120      	str	r0, [r4, #16]
   1277c:	2100      	movs	r1, #0
   1277e:	f36f 0100 	bfc	r1, #0, #1
   12782:	f36f 0141 	bfc	r1, #1, #1
   12786:	f36f 0182 	bfc	r1, #2, #1
   1278a:	f36f 01c5 	bfc	r1, #3, #3
   1278e:	2003      	movs	r0, #3
   12790:	f360 1188 	bfi	r1, r0, #6, #3
   12794:	f3c3 0309 	ubfx	r3, r3, #0, #10
   12798:	f363 2152 	bfi	r1, r3, #9, #10
   1279c:	f36f 41de 	bfc	r1, #19, #12
   127a0:	f36f 71df 	bfc	r1, #31, #1
   127a4:	2300      	movs	r3, #0
   127a6:	4805      	ldr	r0, [pc, #20]	; (127bc <connected+0x9d8>)
   127a8:	f015 fb31 	bl	27e0e <z_impl_z_log_msg_static_create>
   127ac:	46ad      	mov	sp, r5
   127ae:	f7ff bb80 	b.w	11eb2 <connected+0xce>
   127b2:	f06f 031b 	mvn.w	r3, #27
   127b6:	e7d7      	b.n	12768 <connected+0x984>
   127b8:	0002e560 	.word	0x0002e560
   127bc:	0002df40 	.word	0x0002df40
   127c0:	20007acc 	.word	0x20007acc
   127c4:	20007b0c 	.word	0x20007b0c
   127c8:	0002e620 	.word	0x0002e620
   127cc:	20007ac4 	.word	0x20007ac4
   127d0:	0002e640 	.word	0x0002e640
   127d4:	2207      	movs	r2, #7
   127d6:	49b8      	ldr	r1, [pc, #736]	; (12ab8 <connected+0xcd4>)
   127d8:	4628      	mov	r0, r5
   127da:	f015 ff40 	bl	2865e <memcmp>
		} else if (bt_addr_le_eq(addr, &ERR_bt_addr)) {
   127de:	b300      	cbz	r0, 12822 <connected+0xa3e>
			LOG_INF("Unrecognized device connected, addr: %s", addr_str);
   127e0:	466c      	mov	r4, sp
   127e2:	2300      	movs	r3, #0
   127e4:	713b      	strb	r3, [r7, #4]
   127e6:	2302      	movs	r3, #2
   127e8:	717b      	strb	r3, [r7, #5]
   127ea:	b088      	sub	sp, #32
   127ec:	466b      	mov	r3, sp
   127ee:	f113 0210 	adds.w	r2, r3, #16
   127f2:	f000 80a9 	beq.w	12948 <connected+0xb64>
   127f6:	250e      	movs	r5, #14
   127f8:	b11a      	cbz	r2, 12802 <connected+0xa1e>
   127fa:	2d04      	cmp	r5, #4
   127fc:	dd01      	ble.n	12802 <connected+0xa1e>
   127fe:	49af      	ldr	r1, [pc, #700]	; (12abc <connected+0xcd8>)
   12800:	6159      	str	r1, [r3, #20]
   12802:	2100      	movs	r1, #0
   12804:	7039      	strb	r1, [r7, #0]
   12806:	2102      	movs	r1, #2
   12808:	7079      	strb	r1, [r7, #1]
   1280a:	2a00      	cmp	r2, #0
   1280c:	f000 80a9 	beq.w	12962 <connected+0xb7e>
   12810:	2d08      	cmp	r5, #8
   12812:	dd02      	ble.n	1281a <connected+0xa36>
   12814:	f107 0108 	add.w	r1, r7, #8
   12818:	6199      	str	r1, [r3, #24]
   1281a:	f103 011c 	add.w	r1, r3, #28
   1281e:	2000      	movs	r0, #0
   12820:	e09d      	b.n	1295e <connected+0xb7a>
   12822:	4ba7      	ldr	r3, [pc, #668]	; (12ac0 <connected+0xcdc>)
   12824:	f3bf 8f5b 	dmb	ish
   12828:	e853 2f00 	ldrex	r2, [r3]
   1282c:	f042 0180 	orr.w	r1, r2, #128	; 0x80
   12830:	e843 1000 	strex	r0, r1, [r3]
   12834:	2800      	cmp	r0, #0
   12836:	d1f7      	bne.n	12828 <connected+0xa44>
   12838:	f3bf 8f5b 	dmb	ish
			if(atomic_test_and_set_bit(flags, ERR_CONNECTED_FLAG)) {
   1283c:	f012 0f80 	tst.w	r2, #128	; 0x80
   12840:	d11e      	bne.n	12880 <connected+0xa9c>
			LOG_INF("External RR connected, addr: %s", addr_str);
   12842:	466d      	mov	r5, sp
   12844:	2300      	movs	r3, #0
   12846:	713b      	strb	r3, [r7, #4]
   12848:	2302      	movs	r3, #2
   1284a:	717b      	strb	r3, [r7, #5]
   1284c:	b088      	sub	sp, #32
   1284e:	466b      	mov	r3, sp
   12850:	f113 0210 	adds.w	r2, r3, #16
   12854:	d040      	beq.n	128d8 <connected+0xaf4>
   12856:	200e      	movs	r0, #14
   12858:	b11a      	cbz	r2, 12862 <connected+0xa7e>
   1285a:	2804      	cmp	r0, #4
   1285c:	dd01      	ble.n	12862 <connected+0xa7e>
   1285e:	4999      	ldr	r1, [pc, #612]	; (12ac4 <connected+0xce0>)
   12860:	6159      	str	r1, [r3, #20]
   12862:	2100      	movs	r1, #0
   12864:	7039      	strb	r1, [r7, #0]
   12866:	2102      	movs	r1, #2
   12868:	7079      	strb	r1, [r7, #1]
   1286a:	2a00      	cmp	r2, #0
   1286c:	d041      	beq.n	128f2 <connected+0xb0e>
   1286e:	2808      	cmp	r0, #8
   12870:	dd02      	ble.n	12878 <connected+0xa94>
   12872:	f107 0108 	add.w	r1, r7, #8
   12876:	6199      	str	r1, [r3, #24]
   12878:	f103 011c 	add.w	r1, r3, #28
   1287c:	2400      	movs	r4, #0
   1287e:	e036      	b.n	128ee <connected+0xb0a>
				LOG_WRN("WARNING, DUPLICATE CONNECTION:");
   12880:	2006      	movs	r0, #6
   12882:	f003 faa1 	bl	15dc8 <z_log_msg_alloc>
   12886:	2200      	movs	r2, #0
   12888:	f36f 0200 	bfc	r2, #0, #1
   1288c:	f36f 0241 	bfc	r2, #1, #1
   12890:	f36f 0282 	bfc	r2, #2, #1
   12894:	f36f 02c5 	bfc	r2, #3, #3
   12898:	2302      	movs	r3, #2
   1289a:	f363 1288 	bfi	r2, r3, #6, #3
   1289e:	2308      	movs	r3, #8
   128a0:	f363 2252 	bfi	r2, r3, #9, #10
   128a4:	f36f 42de 	bfc	r2, #19, #12
   128a8:	f36f 72df 	bfc	r2, #31, #1
   128ac:	4604      	mov	r4, r0
   128ae:	b168      	cbz	r0, 128cc <connected+0xae8>
   128b0:	f110 0310 	adds.w	r3, r0, #16
   128b4:	d001      	beq.n	128ba <connected+0xad6>
   128b6:	4984      	ldr	r1, [pc, #528]	; (12ac8 <connected+0xce4>)
   128b8:	6141      	str	r1, [r0, #20]
   128ba:	b13b      	cbz	r3, 128cc <connected+0xae8>
   128bc:	2302      	movs	r3, #2
   128be:	713b      	strb	r3, [r7, #4]
   128c0:	2300      	movs	r3, #0
   128c2:	717b      	strb	r3, [r7, #5]
   128c4:	71bb      	strb	r3, [r7, #6]
   128c6:	71fb      	strb	r3, [r7, #7]
   128c8:	6878      	ldr	r0, [r7, #4]
   128ca:	6120      	str	r0, [r4, #16]
   128cc:	2300      	movs	r3, #0
   128ce:	497f      	ldr	r1, [pc, #508]	; (12acc <connected+0xce8>)
   128d0:	4620      	mov	r0, r4
   128d2:	f015 fa84 	bl	27dde <z_log_msg_finalize>
   128d6:	e7b4      	b.n	12842 <connected+0xa5e>
			LOG_INF("External RR connected, addr: %s", addr_str);
   128d8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   128dc:	e7bc      	b.n	12858 <connected+0xa74>
   128de:	f104 0c28 	add.w	ip, r4, #40	; 0x28
   128e2:	44bc      	add	ip, r7
   128e4:	f81c cc28 	ldrb.w	ip, [ip, #-40]
   128e8:	f801 cb01 	strb.w	ip, [r1], #1
   128ec:	3401      	adds	r4, #1
   128ee:	2c01      	cmp	r4, #1
   128f0:	d9f5      	bls.n	128de <connected+0xafa>
   128f2:	280d      	cmp	r0, #13
   128f4:	dd25      	ble.n	12942 <connected+0xb5e>
   128f6:	240e      	movs	r4, #14
   128f8:	b142      	cbz	r2, 1290c <connected+0xb28>
   128fa:	2103      	movs	r1, #3
   128fc:	7139      	strb	r1, [r7, #4]
   128fe:	2100      	movs	r1, #0
   12900:	7179      	strb	r1, [r7, #5]
   12902:	71b9      	strb	r1, [r7, #6]
   12904:	2101      	movs	r1, #1
   12906:	71f9      	strb	r1, [r7, #7]
   12908:	6878      	ldr	r0, [r7, #4]
   1290a:	6118      	str	r0, [r3, #16]
   1290c:	2100      	movs	r1, #0
   1290e:	f36f 0100 	bfc	r1, #0, #1
   12912:	f36f 0141 	bfc	r1, #1, #1
   12916:	f36f 0182 	bfc	r1, #2, #1
   1291a:	f36f 01c5 	bfc	r1, #3, #3
   1291e:	2303      	movs	r3, #3
   12920:	f363 1188 	bfi	r1, r3, #6, #3
   12924:	f3c4 0409 	ubfx	r4, r4, #0, #10
   12928:	f364 2152 	bfi	r1, r4, #9, #10
   1292c:	f36f 41de 	bfc	r1, #19, #12
   12930:	f36f 71df 	bfc	r1, #31, #1
   12934:	2300      	movs	r3, #0
   12936:	4865      	ldr	r0, [pc, #404]	; (12acc <connected+0xce8>)
   12938:	f015 fa69 	bl	27e0e <z_impl_z_log_msg_static_create>
   1293c:	46ad      	mov	sp, r5
   1293e:	f7ff bab8 	b.w	11eb2 <connected+0xce>
   12942:	f06f 041b 	mvn.w	r4, #27
   12946:	e7d7      	b.n	128f8 <connected+0xb14>
			LOG_INF("Unrecognized device connected, addr: %s", addr_str);
   12948:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   1294c:	e754      	b.n	127f8 <connected+0xa14>
   1294e:	f100 0c28 	add.w	ip, r0, #40	; 0x28
   12952:	44bc      	add	ip, r7
   12954:	f81c cc28 	ldrb.w	ip, [ip, #-40]
   12958:	f801 cb01 	strb.w	ip, [r1], #1
   1295c:	3001      	adds	r0, #1
   1295e:	2801      	cmp	r0, #1
   12960:	d9f5      	bls.n	1294e <connected+0xb6a>
   12962:	2d0d      	cmp	r5, #13
   12964:	dd25      	ble.n	129b2 <connected+0xbce>
   12966:	250e      	movs	r5, #14
   12968:	b142      	cbz	r2, 1297c <connected+0xb98>
   1296a:	2103      	movs	r1, #3
   1296c:	7139      	strb	r1, [r7, #4]
   1296e:	2100      	movs	r1, #0
   12970:	7179      	strb	r1, [r7, #5]
   12972:	71b9      	strb	r1, [r7, #6]
   12974:	2101      	movs	r1, #1
   12976:	71f9      	strb	r1, [r7, #7]
   12978:	6878      	ldr	r0, [r7, #4]
   1297a:	6118      	str	r0, [r3, #16]
   1297c:	2100      	movs	r1, #0
   1297e:	f36f 0100 	bfc	r1, #0, #1
   12982:	f36f 0141 	bfc	r1, #1, #1
   12986:	f36f 0182 	bfc	r1, #2, #1
   1298a:	f36f 01c5 	bfc	r1, #3, #3
   1298e:	2303      	movs	r3, #3
   12990:	f363 1188 	bfi	r1, r3, #6, #3
   12994:	f3c5 0509 	ubfx	r5, r5, #0, #10
   12998:	f365 2152 	bfi	r1, r5, #9, #10
   1299c:	f36f 41de 	bfc	r1, #19, #12
   129a0:	f36f 71df 	bfc	r1, #31, #1
   129a4:	2300      	movs	r3, #0
   129a6:	4849      	ldr	r0, [pc, #292]	; (12acc <connected+0xce8>)
   129a8:	f015 fa31 	bl	27e0e <z_impl_z_log_msg_static_create>
   129ac:	46a5      	mov	sp, r4
   129ae:	f7ff ba80 	b.w	11eb2 <connected+0xce>
   129b2:	f06f 051b 	mvn.w	r5, #27
   129b6:	e7d7      	b.n	12968 <connected+0xb84>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   129b8:	f3bf 8f5b 	dmb	ish
   129bc:	4b40      	ldr	r3, [pc, #256]	; (12ac0 <connected+0xcdc>)
   129be:	681b      	ldr	r3, [r3, #0]
   129c0:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, EFL_CONNECTED_FLAG) && atomic_test_bit(flags, EFR_CONNECTED_FLAG) && atomic_test_bit(flags, ERL_CONNECTED_FLAG) && atomic_test_bit(flags, ERR_CONNECTED_FLAG)) {
   129c4:	f013 0f40 	tst.w	r3, #64	; 0x40
   129c8:	f43f aa86 	beq.w	11ed8 <connected+0xf4>
   129cc:	f3bf 8f5b 	dmb	ish
   129d0:	4b3b      	ldr	r3, [pc, #236]	; (12ac0 <connected+0xcdc>)
   129d2:	681b      	ldr	r3, [r3, #0]
   129d4:	f3bf 8f5b 	dmb	ish
   129d8:	f013 0f80 	tst.w	r3, #128	; 0x80
   129dc:	f43f aa7c 	beq.w	11ed8 <connected+0xf4>
		scan_param.interval = BT_GAP_SCAN_SLOW_INTERVAL_1;
   129e0:	483b      	ldr	r0, [pc, #236]	; (12ad0 <connected+0xcec>)
   129e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
   129e6:	8083      	strh	r3, [r0, #4]
		scan_param.window = BT_GAP_SCAN_SLOW_WINDOW_1;
   129e8:	2312      	movs	r3, #18
   129ea:	80c3      	strh	r3, [r0, #6]
		err = bt_conn_le_create_auto(&scan_param, &conn_param);
   129ec:	4939      	ldr	r1, [pc, #228]	; (12ad4 <connected+0xcf0>)
   129ee:	f009 fdfd 	bl	1c5ec <bt_conn_le_create_auto>
		if (err) {
   129f2:	f010 0fff 	tst.w	r0, #255	; 0xff
   129f6:	f43f aa7b 	beq.w	11ef0 <connected+0x10c>
			LOG_ERR("Failed to start automatically connecting (err %d)", err);
   129fa:	b2c4      	uxtb	r4, r0
   129fc:	2008      	movs	r0, #8
   129fe:	f003 f9e3 	bl	15dc8 <z_log_msg_alloc>
   12a02:	2200      	movs	r2, #0
   12a04:	f36f 0200 	bfc	r2, #0, #1
   12a08:	f36f 0241 	bfc	r2, #1, #1
   12a0c:	f36f 0282 	bfc	r2, #2, #1
   12a10:	f36f 02c5 	bfc	r2, #3, #3
   12a14:	2301      	movs	r3, #1
   12a16:	f363 1288 	bfi	r2, r3, #6, #3
   12a1a:	230c      	movs	r3, #12
   12a1c:	f363 2252 	bfi	r2, r3, #9, #10
   12a20:	f36f 42de 	bfc	r2, #19, #12
   12a24:	f36f 72df 	bfc	r2, #31, #1
   12a28:	4605      	mov	r5, r0
   12a2a:	b170      	cbz	r0, 12a4a <connected+0xc66>
   12a2c:	f110 0310 	adds.w	r3, r0, #16
   12a30:	d002      	beq.n	12a38 <connected+0xc54>
   12a32:	4929      	ldr	r1, [pc, #164]	; (12ad8 <connected+0xcf4>)
   12a34:	6141      	str	r1, [r0, #20]
   12a36:	6184      	str	r4, [r0, #24]
   12a38:	b13b      	cbz	r3, 12a4a <connected+0xc66>
   12a3a:	2303      	movs	r3, #3
   12a3c:	713b      	strb	r3, [r7, #4]
   12a3e:	2300      	movs	r3, #0
   12a40:	717b      	strb	r3, [r7, #5]
   12a42:	71bb      	strb	r3, [r7, #6]
   12a44:	71fb      	strb	r3, [r7, #7]
   12a46:	6878      	ldr	r0, [r7, #4]
   12a48:	6128      	str	r0, [r5, #16]
   12a4a:	2300      	movs	r3, #0
   12a4c:	491f      	ldr	r1, [pc, #124]	; (12acc <connected+0xce8>)
   12a4e:	4628      	mov	r0, r5
   12a50:	f015 f9c5 	bl	27dde <z_log_msg_finalize>
   12a54:	f7ff ba4c 	b.w	11ef0 <connected+0x10c>
			LOG_ERR("Failed to start automatically connecting (err %d)", err);
   12a58:	b2c4      	uxtb	r4, r0
   12a5a:	2008      	movs	r0, #8
   12a5c:	f003 f9b4 	bl	15dc8 <z_log_msg_alloc>
   12a60:	2200      	movs	r2, #0
   12a62:	f36f 0200 	bfc	r2, #0, #1
   12a66:	f36f 0241 	bfc	r2, #1, #1
   12a6a:	f36f 0282 	bfc	r2, #2, #1
   12a6e:	f36f 02c5 	bfc	r2, #3, #3
   12a72:	2301      	movs	r3, #1
   12a74:	f363 1288 	bfi	r2, r3, #6, #3
   12a78:	230c      	movs	r3, #12
   12a7a:	f363 2252 	bfi	r2, r3, #9, #10
   12a7e:	f36f 42de 	bfc	r2, #19, #12
   12a82:	f36f 72df 	bfc	r2, #31, #1
   12a86:	4605      	mov	r5, r0
   12a88:	b170      	cbz	r0, 12aa8 <connected+0xcc4>
   12a8a:	f110 0310 	adds.w	r3, r0, #16
   12a8e:	d002      	beq.n	12a96 <connected+0xcb2>
   12a90:	4911      	ldr	r1, [pc, #68]	; (12ad8 <connected+0xcf4>)
   12a92:	6141      	str	r1, [r0, #20]
   12a94:	6184      	str	r4, [r0, #24]
   12a96:	b13b      	cbz	r3, 12aa8 <connected+0xcc4>
   12a98:	2303      	movs	r3, #3
   12a9a:	713b      	strb	r3, [r7, #4]
   12a9c:	2300      	movs	r3, #0
   12a9e:	717b      	strb	r3, [r7, #5]
   12aa0:	71bb      	strb	r3, [r7, #6]
   12aa2:	71fb      	strb	r3, [r7, #7]
   12aa4:	6878      	ldr	r0, [r7, #4]
   12aa6:	6128      	str	r0, [r5, #16]
   12aa8:	2300      	movs	r3, #0
   12aaa:	4908      	ldr	r1, [pc, #32]	; (12acc <connected+0xce8>)
   12aac:	4628      	mov	r0, r5
   12aae:	f015 f996 	bl	27dde <z_log_msg_finalize>
}
   12ab2:	f7ff ba1d 	b.w	11ef0 <connected+0x10c>
   12ab6:	bf00      	nop
   12ab8:	20007abc 	.word	0x20007abc
   12abc:	0002e680 	.word	0x0002e680
   12ac0:	20007b0c 	.word	0x20007b0c
   12ac4:	0002e660 	.word	0x0002e660
   12ac8:	0002e560 	.word	0x0002e560
   12acc:	0002df40 	.word	0x0002df40
   12ad0:	20007afc 	.word	0x20007afc
   12ad4:	200006d4 	.word	0x200006d4
   12ad8:	0002e50c 	.word	0x0002e50c

00012adc <IFL_temp_notify_cb>:
{
   12adc:	b500      	push	{lr}
   12ade:	b083      	sub	sp, #12
	if (data == NULL){	// When successfully unsubscribed, (or if unpurposefully unsubscribed?), notify callback is called one last time with data set to NULL (from Zephyr docs)
   12ae0:	b16a      	cbz	r2, 12afe <IFL_temp_notify_cb+0x22>
   12ae2:	4611      	mov	r1, r2
   12ae4:	f3bf 8f5b 	dmb	ish
   12ae8:	4a63      	ldr	r2, [pc, #396]	; (12c78 <IFL_temp_notify_cb+0x19c>)
   12aea:	6812      	ldr	r2, [r2, #0]
   12aec:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(flags, TEMP_ENABLED_FLAG)) {	// if temp is not enabled, we need to unsubscribe
   12af0:	f412 7f80 	tst.w	r2, #256	; 0x100
   12af4:	d044      	beq.n	12b80 <IFL_temp_notify_cb+0xa4>
	if (length != 16) {
   12af6:	2b10      	cmp	r3, #16
   12af8:	d174      	bne.n	12be4 <IFL_temp_notify_cb+0x108>
	for (int i = 0; i < 8; i++)
   12afa:	2300      	movs	r3, #0
   12afc:	e0a9      	b.n	12c52 <IFL_temp_notify_cb+0x176>
		LOG_INF("IFL_temp_notify_cb: unsubscribed");
   12afe:	2006      	movs	r0, #6
   12b00:	f003 f962 	bl	15dc8 <z_log_msg_alloc>
   12b04:	2200      	movs	r2, #0
   12b06:	f36f 0200 	bfc	r2, #0, #1
   12b0a:	f36f 0241 	bfc	r2, #1, #1
   12b0e:	f36f 0282 	bfc	r2, #2, #1
   12b12:	f36f 02c5 	bfc	r2, #3, #3
   12b16:	2303      	movs	r3, #3
   12b18:	f363 1288 	bfi	r2, r3, #6, #3
   12b1c:	2308      	movs	r3, #8
   12b1e:	f363 2252 	bfi	r2, r3, #9, #10
   12b22:	f36f 42de 	bfc	r2, #19, #12
   12b26:	f36f 72df 	bfc	r2, #31, #1
   12b2a:	4684      	mov	ip, r0
   12b2c:	b190      	cbz	r0, 12b54 <IFL_temp_notify_cb+0x78>
   12b2e:	f110 0310 	adds.w	r3, r0, #16
   12b32:	d001      	beq.n	12b38 <IFL_temp_notify_cb+0x5c>
   12b34:	4951      	ldr	r1, [pc, #324]	; (12c7c <IFL_temp_notify_cb+0x1a0>)
   12b36:	6141      	str	r1, [r0, #20]
   12b38:	b163      	cbz	r3, 12b54 <IFL_temp_notify_cb+0x78>
   12b3a:	2302      	movs	r3, #2
   12b3c:	f88d 3004 	strb.w	r3, [sp, #4]
   12b40:	2300      	movs	r3, #0
   12b42:	f88d 3005 	strb.w	r3, [sp, #5]
   12b46:	f88d 3006 	strb.w	r3, [sp, #6]
   12b4a:	f88d 3007 	strb.w	r3, [sp, #7]
   12b4e:	9801      	ldr	r0, [sp, #4]
   12b50:	f8cc 0010 	str.w	r0, [ip, #16]
   12b54:	2300      	movs	r3, #0
   12b56:	494a      	ldr	r1, [pc, #296]	; (12c80 <IFL_temp_notify_cb+0x1a4>)
   12b58:	4660      	mov	r0, ip
   12b5a:	f015 f940 	bl	27dde <z_log_msg_finalize>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   12b5e:	4b46      	ldr	r3, [pc, #280]	; (12c78 <IFL_temp_notify_cb+0x19c>)
   12b60:	f3bf 8f5b 	dmb	ish
   12b64:	e853 1f00 	ldrex	r1, [r3]
   12b68:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
   12b6c:	e843 1200 	strex	r2, r1, [r3]
   12b70:	2a00      	cmp	r2, #0
   12b72:	d1f7      	bne.n	12b64 <IFL_temp_notify_cb+0x88>
   12b74:	f3bf 8f5b 	dmb	ish
		return BT_GATT_ITER_STOP;
   12b78:	2000      	movs	r0, #0
}
   12b7a:	b003      	add	sp, #12
   12b7c:	f85d fb04 	ldr.w	pc, [sp], #4
		LOG_INF("IFL_temp_notify_cb: attempting to unsubscribe");
   12b80:	2006      	movs	r0, #6
   12b82:	f003 f921 	bl	15dc8 <z_log_msg_alloc>
   12b86:	2200      	movs	r2, #0
   12b88:	f36f 0200 	bfc	r2, #0, #1
   12b8c:	f36f 0241 	bfc	r2, #1, #1
   12b90:	f36f 0282 	bfc	r2, #2, #1
   12b94:	f36f 02c5 	bfc	r2, #3, #3
   12b98:	2303      	movs	r3, #3
   12b9a:	f363 1288 	bfi	r2, r3, #6, #3
   12b9e:	2308      	movs	r3, #8
   12ba0:	f363 2252 	bfi	r2, r3, #9, #10
   12ba4:	f36f 42de 	bfc	r2, #19, #12
   12ba8:	f36f 72df 	bfc	r2, #31, #1
   12bac:	4684      	mov	ip, r0
   12bae:	b190      	cbz	r0, 12bd6 <IFL_temp_notify_cb+0xfa>
   12bb0:	f110 0310 	adds.w	r3, r0, #16
   12bb4:	d001      	beq.n	12bba <IFL_temp_notify_cb+0xde>
   12bb6:	4933      	ldr	r1, [pc, #204]	; (12c84 <IFL_temp_notify_cb+0x1a8>)
   12bb8:	6141      	str	r1, [r0, #20]
   12bba:	b163      	cbz	r3, 12bd6 <IFL_temp_notify_cb+0xfa>
   12bbc:	2302      	movs	r3, #2
   12bbe:	f88d 3004 	strb.w	r3, [sp, #4]
   12bc2:	2300      	movs	r3, #0
   12bc4:	f88d 3005 	strb.w	r3, [sp, #5]
   12bc8:	f88d 3006 	strb.w	r3, [sp, #6]
   12bcc:	f88d 3007 	strb.w	r3, [sp, #7]
   12bd0:	9801      	ldr	r0, [sp, #4]
   12bd2:	f8cc 0010 	str.w	r0, [ip, #16]
   12bd6:	2300      	movs	r3, #0
   12bd8:	4929      	ldr	r1, [pc, #164]	; (12c80 <IFL_temp_notify_cb+0x1a4>)
   12bda:	4660      	mov	r0, ip
   12bdc:	f015 f8ff 	bl	27dde <z_log_msg_finalize>
		return BT_GATT_ITER_STOP;	// returning this tells the BT Host to unsubscribe us
   12be0:	2000      	movs	r0, #0
   12be2:	e7ca      	b.n	12b7a <IFL_temp_notify_cb+0x9e>
		LOG_ERR("IFL_temp_notify_cb: Invalid data received from notification");
   12be4:	2006      	movs	r0, #6
   12be6:	f003 f8ef 	bl	15dc8 <z_log_msg_alloc>
   12bea:	2200      	movs	r2, #0
   12bec:	f36f 0200 	bfc	r2, #0, #1
   12bf0:	f36f 0241 	bfc	r2, #1, #1
   12bf4:	f36f 0282 	bfc	r2, #2, #1
   12bf8:	f36f 02c5 	bfc	r2, #3, #3
   12bfc:	2301      	movs	r3, #1
   12bfe:	f363 1288 	bfi	r2, r3, #6, #3
   12c02:	2308      	movs	r3, #8
   12c04:	f363 2252 	bfi	r2, r3, #9, #10
   12c08:	f36f 42de 	bfc	r2, #19, #12
   12c0c:	f36f 72df 	bfc	r2, #31, #1
   12c10:	4684      	mov	ip, r0
   12c12:	b190      	cbz	r0, 12c3a <IFL_temp_notify_cb+0x15e>
   12c14:	f110 0310 	adds.w	r3, r0, #16
   12c18:	d001      	beq.n	12c1e <IFL_temp_notify_cb+0x142>
   12c1a:	491b      	ldr	r1, [pc, #108]	; (12c88 <IFL_temp_notify_cb+0x1ac>)
   12c1c:	6141      	str	r1, [r0, #20]
   12c1e:	b163      	cbz	r3, 12c3a <IFL_temp_notify_cb+0x15e>
   12c20:	2302      	movs	r3, #2
   12c22:	f88d 3004 	strb.w	r3, [sp, #4]
   12c26:	2300      	movs	r3, #0
   12c28:	f88d 3005 	strb.w	r3, [sp, #5]
   12c2c:	f88d 3006 	strb.w	r3, [sp, #6]
   12c30:	f88d 3007 	strb.w	r3, [sp, #7]
   12c34:	9801      	ldr	r0, [sp, #4]
   12c36:	f8cc 0010 	str.w	r0, [ip, #16]
   12c3a:	2300      	movs	r3, #0
   12c3c:	4910      	ldr	r1, [pc, #64]	; (12c80 <IFL_temp_notify_cb+0x1a4>)
   12c3e:	4660      	mov	r0, ip
   12c40:	f015 f8cd 	bl	27dde <z_log_msg_finalize>
		return BT_GATT_ITER_CONTINUE;
   12c44:	2001      	movs	r0, #1
   12c46:	e798      	b.n	12b7a <IFL_temp_notify_cb+0x9e>
		IFL_temp_1.data[i] = ((uint8_t *)data)[i];
   12c48:	5cc8      	ldrb	r0, [r1, r3]
   12c4a:	4a10      	ldr	r2, [pc, #64]	; (12c8c <IFL_temp_notify_cb+0x1b0>)
   12c4c:	441a      	add	r2, r3
   12c4e:	7210      	strb	r0, [r2, #8]
	for (int i = 0; i < 8; i++)
   12c50:	3301      	adds	r3, #1
   12c52:	2b07      	cmp	r3, #7
   12c54:	ddf8      	ble.n	12c48 <IFL_temp_notify_cb+0x16c>
	for (int i = 0; i < 8; i++)
   12c56:	2300      	movs	r3, #0
   12c58:	e006      	b.n	12c68 <IFL_temp_notify_cb+0x18c>
		IFL_temp_2.data[i] = ((uint8_t *)data)[8 + i];
   12c5a:	f103 0208 	add.w	r2, r3, #8
   12c5e:	5c88      	ldrb	r0, [r1, r2]
   12c60:	4a0b      	ldr	r2, [pc, #44]	; (12c90 <IFL_temp_notify_cb+0x1b4>)
   12c62:	441a      	add	r2, r3
   12c64:	7210      	strb	r0, [r2, #8]
	for (int i = 0; i < 8; i++)
   12c66:	3301      	adds	r3, #1
   12c68:	2b07      	cmp	r3, #7
   12c6a:	ddf6      	ble.n	12c5a <IFL_temp_notify_cb+0x17e>
	k_work_submit(&IFL_temp_CAN_tx_work);
   12c6c:	4809      	ldr	r0, [pc, #36]	; (12c94 <IFL_temp_notify_cb+0x1b8>)
   12c6e:	f012 fc31 	bl	254d4 <k_work_submit>
	return BT_GATT_ITER_CONTINUE;	// stay subscribed
   12c72:	2001      	movs	r0, #1
   12c74:	e781      	b.n	12b7a <IFL_temp_notify_cb+0x9e>
   12c76:	bf00      	nop
   12c78:	20007b0c 	.word	0x20007b0c
   12c7c:	0002e6a8 	.word	0x0002e6a8
   12c80:	0002df40 	.word	0x0002df40
   12c84:	0002e6cc 	.word	0x0002e6cc
   12c88:	0002e6fc 	.word	0x0002e6fc
   12c8c:	20000810 	.word	0x20000810
   12c90:	20000800 	.word	0x20000800
   12c94:	2000071c 	.word	0x2000071c

00012c98 <EFL_temp_notify_cb>:
{
   12c98:	b500      	push	{lr}
   12c9a:	b083      	sub	sp, #12
	if (data == NULL){	// When successfully unsubscribed, (or if unpurposefully unsubscribed?), notify callback is called one last time with data set to NULL (from Zephyr docs)
   12c9c:	b16a      	cbz	r2, 12cba <EFL_temp_notify_cb+0x22>
   12c9e:	4611      	mov	r1, r2
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   12ca0:	f3bf 8f5b 	dmb	ish
   12ca4:	4a6e      	ldr	r2, [pc, #440]	; (12e60 <EFL_temp_notify_cb+0x1c8>)
   12ca6:	6812      	ldr	r2, [r2, #0]
   12ca8:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(flags, TEMP_ENABLED_FLAG)) {	// if temp is not enabled, we need to unsubscribe
   12cac:	f412 7f80 	tst.w	r2, #256	; 0x100
   12cb0:	d044      	beq.n	12d3c <EFL_temp_notify_cb+0xa4>
	if (length != 32) {
   12cb2:	2b20      	cmp	r3, #32
   12cb4:	d174      	bne.n	12da0 <EFL_temp_notify_cb+0x108>
	for (int i = 0; i < 8; i++)
   12cb6:	2300      	movs	r3, #0
   12cb8:	e0a9      	b.n	12e0e <EFL_temp_notify_cb+0x176>
		LOG_INF("EFL_temp_notify_cb: unsubscribed");
   12cba:	2006      	movs	r0, #6
   12cbc:	f003 f884 	bl	15dc8 <z_log_msg_alloc>
   12cc0:	2200      	movs	r2, #0
   12cc2:	f36f 0200 	bfc	r2, #0, #1
   12cc6:	f36f 0241 	bfc	r2, #1, #1
   12cca:	f36f 0282 	bfc	r2, #2, #1
   12cce:	f36f 02c5 	bfc	r2, #3, #3
   12cd2:	2303      	movs	r3, #3
   12cd4:	f363 1288 	bfi	r2, r3, #6, #3
   12cd8:	2308      	movs	r3, #8
   12cda:	f363 2252 	bfi	r2, r3, #9, #10
   12cde:	f36f 42de 	bfc	r2, #19, #12
   12ce2:	f36f 72df 	bfc	r2, #31, #1
   12ce6:	4684      	mov	ip, r0
   12ce8:	b190      	cbz	r0, 12d10 <EFL_temp_notify_cb+0x78>
   12cea:	f110 0310 	adds.w	r3, r0, #16
   12cee:	d001      	beq.n	12cf4 <EFL_temp_notify_cb+0x5c>
   12cf0:	495c      	ldr	r1, [pc, #368]	; (12e64 <EFL_temp_notify_cb+0x1cc>)
   12cf2:	6141      	str	r1, [r0, #20]
   12cf4:	b163      	cbz	r3, 12d10 <EFL_temp_notify_cb+0x78>
   12cf6:	2302      	movs	r3, #2
   12cf8:	f88d 3004 	strb.w	r3, [sp, #4]
   12cfc:	2300      	movs	r3, #0
   12cfe:	f88d 3005 	strb.w	r3, [sp, #5]
   12d02:	f88d 3006 	strb.w	r3, [sp, #6]
   12d06:	f88d 3007 	strb.w	r3, [sp, #7]
   12d0a:	9801      	ldr	r0, [sp, #4]
   12d0c:	f8cc 0010 	str.w	r0, [ip, #16]
   12d10:	2300      	movs	r3, #0
   12d12:	4955      	ldr	r1, [pc, #340]	; (12e68 <EFL_temp_notify_cb+0x1d0>)
   12d14:	4660      	mov	r0, ip
   12d16:	f015 f862 	bl	27dde <z_log_msg_finalize>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   12d1a:	4b51      	ldr	r3, [pc, #324]	; (12e60 <EFL_temp_notify_cb+0x1c8>)
   12d1c:	f3bf 8f5b 	dmb	ish
   12d20:	e853 1f00 	ldrex	r1, [r3]
   12d24:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
   12d28:	e843 1200 	strex	r2, r1, [r3]
   12d2c:	2a00      	cmp	r2, #0
   12d2e:	d1f7      	bne.n	12d20 <EFL_temp_notify_cb+0x88>
   12d30:	f3bf 8f5b 	dmb	ish
		return BT_GATT_ITER_STOP;
   12d34:	2000      	movs	r0, #0
}
   12d36:	b003      	add	sp, #12
   12d38:	f85d fb04 	ldr.w	pc, [sp], #4
		LOG_INF("EFL_temp_notify_cb: attempting to unsubscribe");
   12d3c:	2006      	movs	r0, #6
   12d3e:	f003 f843 	bl	15dc8 <z_log_msg_alloc>
   12d42:	2200      	movs	r2, #0
   12d44:	f36f 0200 	bfc	r2, #0, #1
   12d48:	f36f 0241 	bfc	r2, #1, #1
   12d4c:	f36f 0282 	bfc	r2, #2, #1
   12d50:	f36f 02c5 	bfc	r2, #3, #3
   12d54:	2303      	movs	r3, #3
   12d56:	f363 1288 	bfi	r2, r3, #6, #3
   12d5a:	2308      	movs	r3, #8
   12d5c:	f363 2252 	bfi	r2, r3, #9, #10
   12d60:	f36f 42de 	bfc	r2, #19, #12
   12d64:	f36f 72df 	bfc	r2, #31, #1
   12d68:	4684      	mov	ip, r0
   12d6a:	b190      	cbz	r0, 12d92 <EFL_temp_notify_cb+0xfa>
   12d6c:	f110 0310 	adds.w	r3, r0, #16
   12d70:	d001      	beq.n	12d76 <EFL_temp_notify_cb+0xde>
   12d72:	493e      	ldr	r1, [pc, #248]	; (12e6c <EFL_temp_notify_cb+0x1d4>)
   12d74:	6141      	str	r1, [r0, #20]
   12d76:	b163      	cbz	r3, 12d92 <EFL_temp_notify_cb+0xfa>
   12d78:	2302      	movs	r3, #2
   12d7a:	f88d 3004 	strb.w	r3, [sp, #4]
   12d7e:	2300      	movs	r3, #0
   12d80:	f88d 3005 	strb.w	r3, [sp, #5]
   12d84:	f88d 3006 	strb.w	r3, [sp, #6]
   12d88:	f88d 3007 	strb.w	r3, [sp, #7]
   12d8c:	9801      	ldr	r0, [sp, #4]
   12d8e:	f8cc 0010 	str.w	r0, [ip, #16]
   12d92:	2300      	movs	r3, #0
   12d94:	4934      	ldr	r1, [pc, #208]	; (12e68 <EFL_temp_notify_cb+0x1d0>)
   12d96:	4660      	mov	r0, ip
   12d98:	f015 f821 	bl	27dde <z_log_msg_finalize>
		return BT_GATT_ITER_STOP;	// returning this tells the BT Host to unsubscribe us
   12d9c:	2000      	movs	r0, #0
   12d9e:	e7ca      	b.n	12d36 <EFL_temp_notify_cb+0x9e>
		LOG_ERR("EFL_temp_notify_cb: Invalid data received from notification");
   12da0:	2006      	movs	r0, #6
   12da2:	f003 f811 	bl	15dc8 <z_log_msg_alloc>
   12da6:	2200      	movs	r2, #0
   12da8:	f36f 0200 	bfc	r2, #0, #1
   12dac:	f36f 0241 	bfc	r2, #1, #1
   12db0:	f36f 0282 	bfc	r2, #2, #1
   12db4:	f36f 02c5 	bfc	r2, #3, #3
   12db8:	2301      	movs	r3, #1
   12dba:	f363 1288 	bfi	r2, r3, #6, #3
   12dbe:	2308      	movs	r3, #8
   12dc0:	f363 2252 	bfi	r2, r3, #9, #10
   12dc4:	f36f 42de 	bfc	r2, #19, #12
   12dc8:	f36f 72df 	bfc	r2, #31, #1
   12dcc:	4684      	mov	ip, r0
   12dce:	b190      	cbz	r0, 12df6 <EFL_temp_notify_cb+0x15e>
   12dd0:	f110 0310 	adds.w	r3, r0, #16
   12dd4:	d001      	beq.n	12dda <EFL_temp_notify_cb+0x142>
   12dd6:	4926      	ldr	r1, [pc, #152]	; (12e70 <EFL_temp_notify_cb+0x1d8>)
   12dd8:	6141      	str	r1, [r0, #20]
   12dda:	b163      	cbz	r3, 12df6 <EFL_temp_notify_cb+0x15e>
   12ddc:	2302      	movs	r3, #2
   12dde:	f88d 3004 	strb.w	r3, [sp, #4]
   12de2:	2300      	movs	r3, #0
   12de4:	f88d 3005 	strb.w	r3, [sp, #5]
   12de8:	f88d 3006 	strb.w	r3, [sp, #6]
   12dec:	f88d 3007 	strb.w	r3, [sp, #7]
   12df0:	9801      	ldr	r0, [sp, #4]
   12df2:	f8cc 0010 	str.w	r0, [ip, #16]
   12df6:	2300      	movs	r3, #0
   12df8:	491b      	ldr	r1, [pc, #108]	; (12e68 <EFL_temp_notify_cb+0x1d0>)
   12dfa:	4660      	mov	r0, ip
   12dfc:	f014 ffef 	bl	27dde <z_log_msg_finalize>
		return BT_GATT_ITER_CONTINUE;
   12e00:	2001      	movs	r0, #1
   12e02:	e798      	b.n	12d36 <EFL_temp_notify_cb+0x9e>
		EFL_temp_1.data[i] = ((uint8_t *)data)[i];
   12e04:	5cc8      	ldrb	r0, [r1, r3]
   12e06:	4a1b      	ldr	r2, [pc, #108]	; (12e74 <EFL_temp_notify_cb+0x1dc>)
   12e08:	441a      	add	r2, r3
   12e0a:	7210      	strb	r0, [r2, #8]
	for (int i = 0; i < 8; i++)
   12e0c:	3301      	adds	r3, #1
   12e0e:	2b07      	cmp	r3, #7
   12e10:	ddf8      	ble.n	12e04 <EFL_temp_notify_cb+0x16c>
	for (int i = 0; i < 8; i++)
   12e12:	2300      	movs	r3, #0
   12e14:	e006      	b.n	12e24 <EFL_temp_notify_cb+0x18c>
		EFL_temp_2.data[i] = ((uint8_t *)data)[8 + i];
   12e16:	f103 0208 	add.w	r2, r3, #8
   12e1a:	5c88      	ldrb	r0, [r1, r2]
   12e1c:	4a16      	ldr	r2, [pc, #88]	; (12e78 <EFL_temp_notify_cb+0x1e0>)
   12e1e:	441a      	add	r2, r3
   12e20:	7210      	strb	r0, [r2, #8]
	for (int i = 0; i < 8; i++)
   12e22:	3301      	adds	r3, #1
   12e24:	2b07      	cmp	r3, #7
   12e26:	ddf6      	ble.n	12e16 <EFL_temp_notify_cb+0x17e>
	for (int i = 0; i < 8; i++)
   12e28:	2300      	movs	r3, #0
   12e2a:	e006      	b.n	12e3a <EFL_temp_notify_cb+0x1a2>
		EFL_temp_3.data[i] = ((uint8_t *)data)[16 + i];
   12e2c:	f103 0210 	add.w	r2, r3, #16
   12e30:	5c88      	ldrb	r0, [r1, r2]
   12e32:	4a12      	ldr	r2, [pc, #72]	; (12e7c <EFL_temp_notify_cb+0x1e4>)
   12e34:	441a      	add	r2, r3
   12e36:	7210      	strb	r0, [r2, #8]
	for (int i = 0; i < 8; i++)
   12e38:	3301      	adds	r3, #1
   12e3a:	2b07      	cmp	r3, #7
   12e3c:	ddf6      	ble.n	12e2c <EFL_temp_notify_cb+0x194>
	for (int i = 0; i < 8; i++)
   12e3e:	2300      	movs	r3, #0
   12e40:	e006      	b.n	12e50 <EFL_temp_notify_cb+0x1b8>
		EFL_temp_4.data[i] = ((uint8_t *)data)[24 + i];
   12e42:	f103 0218 	add.w	r2, r3, #24
   12e46:	5c88      	ldrb	r0, [r1, r2]
   12e48:	4a0d      	ldr	r2, [pc, #52]	; (12e80 <EFL_temp_notify_cb+0x1e8>)
   12e4a:	441a      	add	r2, r3
   12e4c:	7210      	strb	r0, [r2, #8]
	for (int i = 0; i < 8; i++)
   12e4e:	3301      	adds	r3, #1
   12e50:	2b07      	cmp	r3, #7
   12e52:	ddf6      	ble.n	12e42 <EFL_temp_notify_cb+0x1aa>
	k_work_submit(&EFL_temp_CAN_tx_work);
   12e54:	480b      	ldr	r0, [pc, #44]	; (12e84 <EFL_temp_notify_cb+0x1ec>)
   12e56:	f012 fb3d 	bl	254d4 <k_work_submit>
	return BT_GATT_ITER_CONTINUE;	// stay subscribed
   12e5a:	2001      	movs	r0, #1
   12e5c:	e76b      	b.n	12d36 <EFL_temp_notify_cb+0x9e>
   12e5e:	bf00      	nop
   12e60:	20007b0c 	.word	0x20007b0c
   12e64:	0002e738 	.word	0x0002e738
   12e68:	0002df40 	.word	0x0002df40
   12e6c:	0002e75c 	.word	0x0002e75c
   12e70:	0002e78c 	.word	0x0002e78c
   12e74:	200007f0 	.word	0x200007f0
   12e78:	200007e0 	.word	0x200007e0
   12e7c:	200007d0 	.word	0x200007d0
   12e80:	200007c0 	.word	0x200007c0
   12e84:	2000070c 	.word	0x2000070c

00012e88 <EFR_temp_notify_cb>:
{
   12e88:	b500      	push	{lr}
   12e8a:	b083      	sub	sp, #12
	if (data == NULL){	// When successfully unsubscribed, (or if unpurposefully unsubscribed?), notify callback is called one last time with data set to NULL (from Zephyr docs)
   12e8c:	b16a      	cbz	r2, 12eaa <EFR_temp_notify_cb+0x22>
   12e8e:	4611      	mov	r1, r2
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   12e90:	f3bf 8f5b 	dmb	ish
   12e94:	4a6e      	ldr	r2, [pc, #440]	; (13050 <EFR_temp_notify_cb+0x1c8>)
   12e96:	6812      	ldr	r2, [r2, #0]
   12e98:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(flags, TEMP_ENABLED_FLAG)) {	// if temp is not enabled, we need to unsubscribe
   12e9c:	f412 7f80 	tst.w	r2, #256	; 0x100
   12ea0:	d044      	beq.n	12f2c <EFR_temp_notify_cb+0xa4>
	if (length != 32) {
   12ea2:	2b20      	cmp	r3, #32
   12ea4:	d174      	bne.n	12f90 <EFR_temp_notify_cb+0x108>
	for (int i = 0; i < 8; i++)
   12ea6:	2300      	movs	r3, #0
   12ea8:	e0a9      	b.n	12ffe <EFR_temp_notify_cb+0x176>
		LOG_INF("EFR_temp_notify_cb: unsubscribed");
   12eaa:	2006      	movs	r0, #6
   12eac:	f002 ff8c 	bl	15dc8 <z_log_msg_alloc>
   12eb0:	2200      	movs	r2, #0
   12eb2:	f36f 0200 	bfc	r2, #0, #1
   12eb6:	f36f 0241 	bfc	r2, #1, #1
   12eba:	f36f 0282 	bfc	r2, #2, #1
   12ebe:	f36f 02c5 	bfc	r2, #3, #3
   12ec2:	2303      	movs	r3, #3
   12ec4:	f363 1288 	bfi	r2, r3, #6, #3
   12ec8:	2308      	movs	r3, #8
   12eca:	f363 2252 	bfi	r2, r3, #9, #10
   12ece:	f36f 42de 	bfc	r2, #19, #12
   12ed2:	f36f 72df 	bfc	r2, #31, #1
   12ed6:	4684      	mov	ip, r0
   12ed8:	b190      	cbz	r0, 12f00 <EFR_temp_notify_cb+0x78>
   12eda:	f110 0310 	adds.w	r3, r0, #16
   12ede:	d001      	beq.n	12ee4 <EFR_temp_notify_cb+0x5c>
   12ee0:	495c      	ldr	r1, [pc, #368]	; (13054 <EFR_temp_notify_cb+0x1cc>)
   12ee2:	6141      	str	r1, [r0, #20]
   12ee4:	b163      	cbz	r3, 12f00 <EFR_temp_notify_cb+0x78>
   12ee6:	2302      	movs	r3, #2
   12ee8:	f88d 3004 	strb.w	r3, [sp, #4]
   12eec:	2300      	movs	r3, #0
   12eee:	f88d 3005 	strb.w	r3, [sp, #5]
   12ef2:	f88d 3006 	strb.w	r3, [sp, #6]
   12ef6:	f88d 3007 	strb.w	r3, [sp, #7]
   12efa:	9801      	ldr	r0, [sp, #4]
   12efc:	f8cc 0010 	str.w	r0, [ip, #16]
   12f00:	2300      	movs	r3, #0
   12f02:	4955      	ldr	r1, [pc, #340]	; (13058 <EFR_temp_notify_cb+0x1d0>)
   12f04:	4660      	mov	r0, ip
   12f06:	f014 ff6a 	bl	27dde <z_log_msg_finalize>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   12f0a:	4b51      	ldr	r3, [pc, #324]	; (13050 <EFR_temp_notify_cb+0x1c8>)
   12f0c:	f3bf 8f5b 	dmb	ish
   12f10:	e853 1f00 	ldrex	r1, [r3]
   12f14:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
   12f18:	e843 1200 	strex	r2, r1, [r3]
   12f1c:	2a00      	cmp	r2, #0
   12f1e:	d1f7      	bne.n	12f10 <EFR_temp_notify_cb+0x88>
   12f20:	f3bf 8f5b 	dmb	ish
		return BT_GATT_ITER_STOP;
   12f24:	2000      	movs	r0, #0
}
   12f26:	b003      	add	sp, #12
   12f28:	f85d fb04 	ldr.w	pc, [sp], #4
		LOG_INF("EFR_temp_notify_cb: attempting to unsubscribe");
   12f2c:	2006      	movs	r0, #6
   12f2e:	f002 ff4b 	bl	15dc8 <z_log_msg_alloc>
   12f32:	2200      	movs	r2, #0
   12f34:	f36f 0200 	bfc	r2, #0, #1
   12f38:	f36f 0241 	bfc	r2, #1, #1
   12f3c:	f36f 0282 	bfc	r2, #2, #1
   12f40:	f36f 02c5 	bfc	r2, #3, #3
   12f44:	2303      	movs	r3, #3
   12f46:	f363 1288 	bfi	r2, r3, #6, #3
   12f4a:	2308      	movs	r3, #8
   12f4c:	f363 2252 	bfi	r2, r3, #9, #10
   12f50:	f36f 42de 	bfc	r2, #19, #12
   12f54:	f36f 72df 	bfc	r2, #31, #1
   12f58:	4684      	mov	ip, r0
   12f5a:	b190      	cbz	r0, 12f82 <EFR_temp_notify_cb+0xfa>
   12f5c:	f110 0310 	adds.w	r3, r0, #16
   12f60:	d001      	beq.n	12f66 <EFR_temp_notify_cb+0xde>
   12f62:	493e      	ldr	r1, [pc, #248]	; (1305c <EFR_temp_notify_cb+0x1d4>)
   12f64:	6141      	str	r1, [r0, #20]
   12f66:	b163      	cbz	r3, 12f82 <EFR_temp_notify_cb+0xfa>
   12f68:	2302      	movs	r3, #2
   12f6a:	f88d 3004 	strb.w	r3, [sp, #4]
   12f6e:	2300      	movs	r3, #0
   12f70:	f88d 3005 	strb.w	r3, [sp, #5]
   12f74:	f88d 3006 	strb.w	r3, [sp, #6]
   12f78:	f88d 3007 	strb.w	r3, [sp, #7]
   12f7c:	9801      	ldr	r0, [sp, #4]
   12f7e:	f8cc 0010 	str.w	r0, [ip, #16]
   12f82:	2300      	movs	r3, #0
   12f84:	4934      	ldr	r1, [pc, #208]	; (13058 <EFR_temp_notify_cb+0x1d0>)
   12f86:	4660      	mov	r0, ip
   12f88:	f014 ff29 	bl	27dde <z_log_msg_finalize>
		return BT_GATT_ITER_STOP;	// returning this tells the BT Host to unsubscribe us
   12f8c:	2000      	movs	r0, #0
   12f8e:	e7ca      	b.n	12f26 <EFR_temp_notify_cb+0x9e>
		LOG_ERR("EFR_temp_notify_cb: Invalid data received from notification");
   12f90:	2006      	movs	r0, #6
   12f92:	f002 ff19 	bl	15dc8 <z_log_msg_alloc>
   12f96:	2200      	movs	r2, #0
   12f98:	f36f 0200 	bfc	r2, #0, #1
   12f9c:	f36f 0241 	bfc	r2, #1, #1
   12fa0:	f36f 0282 	bfc	r2, #2, #1
   12fa4:	f36f 02c5 	bfc	r2, #3, #3
   12fa8:	2301      	movs	r3, #1
   12faa:	f363 1288 	bfi	r2, r3, #6, #3
   12fae:	2308      	movs	r3, #8
   12fb0:	f363 2252 	bfi	r2, r3, #9, #10
   12fb4:	f36f 42de 	bfc	r2, #19, #12
   12fb8:	f36f 72df 	bfc	r2, #31, #1
   12fbc:	4684      	mov	ip, r0
   12fbe:	b190      	cbz	r0, 12fe6 <EFR_temp_notify_cb+0x15e>
   12fc0:	f110 0310 	adds.w	r3, r0, #16
   12fc4:	d001      	beq.n	12fca <EFR_temp_notify_cb+0x142>
   12fc6:	4926      	ldr	r1, [pc, #152]	; (13060 <EFR_temp_notify_cb+0x1d8>)
   12fc8:	6141      	str	r1, [r0, #20]
   12fca:	b163      	cbz	r3, 12fe6 <EFR_temp_notify_cb+0x15e>
   12fcc:	2302      	movs	r3, #2
   12fce:	f88d 3004 	strb.w	r3, [sp, #4]
   12fd2:	2300      	movs	r3, #0
   12fd4:	f88d 3005 	strb.w	r3, [sp, #5]
   12fd8:	f88d 3006 	strb.w	r3, [sp, #6]
   12fdc:	f88d 3007 	strb.w	r3, [sp, #7]
   12fe0:	9801      	ldr	r0, [sp, #4]
   12fe2:	f8cc 0010 	str.w	r0, [ip, #16]
   12fe6:	2300      	movs	r3, #0
   12fe8:	491b      	ldr	r1, [pc, #108]	; (13058 <EFR_temp_notify_cb+0x1d0>)
   12fea:	4660      	mov	r0, ip
   12fec:	f014 fef7 	bl	27dde <z_log_msg_finalize>
		return BT_GATT_ITER_CONTINUE;
   12ff0:	2001      	movs	r0, #1
   12ff2:	e798      	b.n	12f26 <EFR_temp_notify_cb+0x9e>
		EFR_temp_1.data[i] = ((uint8_t *)data)[i];
   12ff4:	5cc8      	ldrb	r0, [r1, r3]
   12ff6:	4a1b      	ldr	r2, [pc, #108]	; (13064 <EFR_temp_notify_cb+0x1dc>)
   12ff8:	441a      	add	r2, r3
   12ffa:	7210      	strb	r0, [r2, #8]
	for (int i = 0; i < 8; i++)
   12ffc:	3301      	adds	r3, #1
   12ffe:	2b07      	cmp	r3, #7
   13000:	ddf8      	ble.n	12ff4 <EFR_temp_notify_cb+0x16c>
	for (int i = 0; i < 8; i++)
   13002:	2300      	movs	r3, #0
   13004:	e006      	b.n	13014 <EFR_temp_notify_cb+0x18c>
		EFR_temp_2.data[i] = ((uint8_t *)data)[8 + i];
   13006:	f103 0208 	add.w	r2, r3, #8
   1300a:	5c88      	ldrb	r0, [r1, r2]
   1300c:	4a16      	ldr	r2, [pc, #88]	; (13068 <EFR_temp_notify_cb+0x1e0>)
   1300e:	441a      	add	r2, r3
   13010:	7210      	strb	r0, [r2, #8]
	for (int i = 0; i < 8; i++)
   13012:	3301      	adds	r3, #1
   13014:	2b07      	cmp	r3, #7
   13016:	ddf6      	ble.n	13006 <EFR_temp_notify_cb+0x17e>
	for (int i = 0; i < 8; i++)
   13018:	2300      	movs	r3, #0
   1301a:	e006      	b.n	1302a <EFR_temp_notify_cb+0x1a2>
		EFR_temp_3.data[i] = ((uint8_t *)data)[16 + i];
   1301c:	f103 0210 	add.w	r2, r3, #16
   13020:	5c88      	ldrb	r0, [r1, r2]
   13022:	4a12      	ldr	r2, [pc, #72]	; (1306c <EFR_temp_notify_cb+0x1e4>)
   13024:	441a      	add	r2, r3
   13026:	7210      	strb	r0, [r2, #8]
	for (int i = 0; i < 8; i++)
   13028:	3301      	adds	r3, #1
   1302a:	2b07      	cmp	r3, #7
   1302c:	ddf6      	ble.n	1301c <EFR_temp_notify_cb+0x194>
	for (int i = 0; i < 8; i++)
   1302e:	2300      	movs	r3, #0
   13030:	e006      	b.n	13040 <EFR_temp_notify_cb+0x1b8>
		EFR_temp_4.data[i] = ((uint8_t *)data)[24 + i];
   13032:	f103 0218 	add.w	r2, r3, #24
   13036:	5c88      	ldrb	r0, [r1, r2]
   13038:	4a0d      	ldr	r2, [pc, #52]	; (13070 <EFR_temp_notify_cb+0x1e8>)
   1303a:	441a      	add	r2, r3
   1303c:	7210      	strb	r0, [r2, #8]
	for (int i = 0; i < 8; i++)
   1303e:	3301      	adds	r3, #1
   13040:	2b07      	cmp	r3, #7
   13042:	ddf6      	ble.n	13032 <EFR_temp_notify_cb+0x1aa>
	k_work_submit(&EFR_temp_CAN_tx_work);
   13044:	480b      	ldr	r0, [pc, #44]	; (13074 <EFR_temp_notify_cb+0x1ec>)
   13046:	f012 fa45 	bl	254d4 <k_work_submit>
	return BT_GATT_ITER_CONTINUE;	// stay subscribed
   1304a:	2001      	movs	r0, #1
   1304c:	e76b      	b.n	12f26 <EFR_temp_notify_cb+0x9e>
   1304e:	bf00      	nop
   13050:	20007b0c 	.word	0x20007b0c
   13054:	0002e7c8 	.word	0x0002e7c8
   13058:	0002df40 	.word	0x0002df40
   1305c:	0002e7ec 	.word	0x0002e7ec
   13060:	0002e81c 	.word	0x0002e81c
   13064:	200007b0 	.word	0x200007b0
   13068:	200007a0 	.word	0x200007a0
   1306c:	20000790 	.word	0x20000790
   13070:	20000780 	.word	0x20000780
   13074:	200006fc 	.word	0x200006fc

00013078 <ERL_temp_notify_cb>:
{
   13078:	b500      	push	{lr}
   1307a:	b083      	sub	sp, #12
	if (data == NULL) {	// When successfully unsubscribed, (or if unpurposefully unsubscribed?), notify callback is called one last time with data set to NULL (from Zephyr docs)
   1307c:	b16a      	cbz	r2, 1309a <ERL_temp_notify_cb+0x22>
   1307e:	4611      	mov	r1, r2
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   13080:	f3bf 8f5b 	dmb	ish
   13084:	4a63      	ldr	r2, [pc, #396]	; (13214 <ERL_temp_notify_cb+0x19c>)
   13086:	6812      	ldr	r2, [r2, #0]
   13088:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(flags, TEMP_ENABLED_FLAG)) {	// if temp is not enabled, we need to unsubscribe
   1308c:	f412 7f80 	tst.w	r2, #256	; 0x100
   13090:	d044      	beq.n	1311c <ERL_temp_notify_cb+0xa4>
	if (length != 16) {
   13092:	2b10      	cmp	r3, #16
   13094:	d174      	bne.n	13180 <ERL_temp_notify_cb+0x108>
	for (int i = 0; i < 8; i++)
   13096:	2300      	movs	r3, #0
   13098:	e0a9      	b.n	131ee <ERL_temp_notify_cb+0x176>
		LOG_INF("ERL_temp_notify_cb: unsubscribed");
   1309a:	2006      	movs	r0, #6
   1309c:	f002 fe94 	bl	15dc8 <z_log_msg_alloc>
   130a0:	2200      	movs	r2, #0
   130a2:	f36f 0200 	bfc	r2, #0, #1
   130a6:	f36f 0241 	bfc	r2, #1, #1
   130aa:	f36f 0282 	bfc	r2, #2, #1
   130ae:	f36f 02c5 	bfc	r2, #3, #3
   130b2:	2303      	movs	r3, #3
   130b4:	f363 1288 	bfi	r2, r3, #6, #3
   130b8:	2308      	movs	r3, #8
   130ba:	f363 2252 	bfi	r2, r3, #9, #10
   130be:	f36f 42de 	bfc	r2, #19, #12
   130c2:	f36f 72df 	bfc	r2, #31, #1
   130c6:	4684      	mov	ip, r0
   130c8:	b190      	cbz	r0, 130f0 <ERL_temp_notify_cb+0x78>
   130ca:	f110 0310 	adds.w	r3, r0, #16
   130ce:	d001      	beq.n	130d4 <ERL_temp_notify_cb+0x5c>
   130d0:	4951      	ldr	r1, [pc, #324]	; (13218 <ERL_temp_notify_cb+0x1a0>)
   130d2:	6141      	str	r1, [r0, #20]
   130d4:	b163      	cbz	r3, 130f0 <ERL_temp_notify_cb+0x78>
   130d6:	2302      	movs	r3, #2
   130d8:	f88d 3004 	strb.w	r3, [sp, #4]
   130dc:	2300      	movs	r3, #0
   130de:	f88d 3005 	strb.w	r3, [sp, #5]
   130e2:	f88d 3006 	strb.w	r3, [sp, #6]
   130e6:	f88d 3007 	strb.w	r3, [sp, #7]
   130ea:	9801      	ldr	r0, [sp, #4]
   130ec:	f8cc 0010 	str.w	r0, [ip, #16]
   130f0:	2300      	movs	r3, #0
   130f2:	494a      	ldr	r1, [pc, #296]	; (1321c <ERL_temp_notify_cb+0x1a4>)
   130f4:	4660      	mov	r0, ip
   130f6:	f014 fe72 	bl	27dde <z_log_msg_finalize>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   130fa:	4b46      	ldr	r3, [pc, #280]	; (13214 <ERL_temp_notify_cb+0x19c>)
   130fc:	f3bf 8f5b 	dmb	ish
   13100:	e853 1f00 	ldrex	r1, [r3]
   13104:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
   13108:	e843 1200 	strex	r2, r1, [r3]
   1310c:	2a00      	cmp	r2, #0
   1310e:	d1f7      	bne.n	13100 <ERL_temp_notify_cb+0x88>
   13110:	f3bf 8f5b 	dmb	ish
		return BT_GATT_ITER_STOP;
   13114:	2000      	movs	r0, #0
}
   13116:	b003      	add	sp, #12
   13118:	f85d fb04 	ldr.w	pc, [sp], #4
		LOG_INF("ERL_temp_notify_cb: attempting to unsubscribe");
   1311c:	2006      	movs	r0, #6
   1311e:	f002 fe53 	bl	15dc8 <z_log_msg_alloc>
   13122:	2200      	movs	r2, #0
   13124:	f36f 0200 	bfc	r2, #0, #1
   13128:	f36f 0241 	bfc	r2, #1, #1
   1312c:	f36f 0282 	bfc	r2, #2, #1
   13130:	f36f 02c5 	bfc	r2, #3, #3
   13134:	2303      	movs	r3, #3
   13136:	f363 1288 	bfi	r2, r3, #6, #3
   1313a:	2308      	movs	r3, #8
   1313c:	f363 2252 	bfi	r2, r3, #9, #10
   13140:	f36f 42de 	bfc	r2, #19, #12
   13144:	f36f 72df 	bfc	r2, #31, #1
   13148:	4684      	mov	ip, r0
   1314a:	b190      	cbz	r0, 13172 <ERL_temp_notify_cb+0xfa>
   1314c:	f110 0310 	adds.w	r3, r0, #16
   13150:	d001      	beq.n	13156 <ERL_temp_notify_cb+0xde>
   13152:	4933      	ldr	r1, [pc, #204]	; (13220 <ERL_temp_notify_cb+0x1a8>)
   13154:	6141      	str	r1, [r0, #20]
   13156:	b163      	cbz	r3, 13172 <ERL_temp_notify_cb+0xfa>
   13158:	2302      	movs	r3, #2
   1315a:	f88d 3004 	strb.w	r3, [sp, #4]
   1315e:	2300      	movs	r3, #0
   13160:	f88d 3005 	strb.w	r3, [sp, #5]
   13164:	f88d 3006 	strb.w	r3, [sp, #6]
   13168:	f88d 3007 	strb.w	r3, [sp, #7]
   1316c:	9801      	ldr	r0, [sp, #4]
   1316e:	f8cc 0010 	str.w	r0, [ip, #16]
   13172:	2300      	movs	r3, #0
   13174:	4929      	ldr	r1, [pc, #164]	; (1321c <ERL_temp_notify_cb+0x1a4>)
   13176:	4660      	mov	r0, ip
   13178:	f014 fe31 	bl	27dde <z_log_msg_finalize>
		return BT_GATT_ITER_STOP;	// returning this tells the BT Host to unsubscribe us
   1317c:	2000      	movs	r0, #0
   1317e:	e7ca      	b.n	13116 <ERL_temp_notify_cb+0x9e>
		LOG_ERR("ERL_temp_notify_cb: Invalid data received from notification");
   13180:	2006      	movs	r0, #6
   13182:	f002 fe21 	bl	15dc8 <z_log_msg_alloc>
   13186:	2200      	movs	r2, #0
   13188:	f36f 0200 	bfc	r2, #0, #1
   1318c:	f36f 0241 	bfc	r2, #1, #1
   13190:	f36f 0282 	bfc	r2, #2, #1
   13194:	f36f 02c5 	bfc	r2, #3, #3
   13198:	2301      	movs	r3, #1
   1319a:	f363 1288 	bfi	r2, r3, #6, #3
   1319e:	2308      	movs	r3, #8
   131a0:	f363 2252 	bfi	r2, r3, #9, #10
   131a4:	f36f 42de 	bfc	r2, #19, #12
   131a8:	f36f 72df 	bfc	r2, #31, #1
   131ac:	4684      	mov	ip, r0
   131ae:	b190      	cbz	r0, 131d6 <ERL_temp_notify_cb+0x15e>
   131b0:	f110 0310 	adds.w	r3, r0, #16
   131b4:	d001      	beq.n	131ba <ERL_temp_notify_cb+0x142>
   131b6:	491b      	ldr	r1, [pc, #108]	; (13224 <ERL_temp_notify_cb+0x1ac>)
   131b8:	6141      	str	r1, [r0, #20]
   131ba:	b163      	cbz	r3, 131d6 <ERL_temp_notify_cb+0x15e>
   131bc:	2302      	movs	r3, #2
   131be:	f88d 3004 	strb.w	r3, [sp, #4]
   131c2:	2300      	movs	r3, #0
   131c4:	f88d 3005 	strb.w	r3, [sp, #5]
   131c8:	f88d 3006 	strb.w	r3, [sp, #6]
   131cc:	f88d 3007 	strb.w	r3, [sp, #7]
   131d0:	9801      	ldr	r0, [sp, #4]
   131d2:	f8cc 0010 	str.w	r0, [ip, #16]
   131d6:	2300      	movs	r3, #0
   131d8:	4910      	ldr	r1, [pc, #64]	; (1321c <ERL_temp_notify_cb+0x1a4>)
   131da:	4660      	mov	r0, ip
   131dc:	f014 fdff 	bl	27dde <z_log_msg_finalize>
		return BT_GATT_ITER_CONTINUE;
   131e0:	2001      	movs	r0, #1
   131e2:	e798      	b.n	13116 <ERL_temp_notify_cb+0x9e>
		ERL_temp_1.data[i] = ((uint8_t *)data)[i];
   131e4:	5cc8      	ldrb	r0, [r1, r3]
   131e6:	4a10      	ldr	r2, [pc, #64]	; (13228 <ERL_temp_notify_cb+0x1b0>)
   131e8:	441a      	add	r2, r3
   131ea:	7210      	strb	r0, [r2, #8]
	for (int i = 0; i < 8; i++)
   131ec:	3301      	adds	r3, #1
   131ee:	2b07      	cmp	r3, #7
   131f0:	ddf8      	ble.n	131e4 <ERL_temp_notify_cb+0x16c>
	for (int i = 0; i < 8; i++)
   131f2:	2300      	movs	r3, #0
   131f4:	e006      	b.n	13204 <ERL_temp_notify_cb+0x18c>
		ERL_temp_2.data[i] = ((uint8_t *)data)[8 + i];
   131f6:	f103 0208 	add.w	r2, r3, #8
   131fa:	5c88      	ldrb	r0, [r1, r2]
   131fc:	4a0b      	ldr	r2, [pc, #44]	; (1322c <ERL_temp_notify_cb+0x1b4>)
   131fe:	441a      	add	r2, r3
   13200:	7210      	strb	r0, [r2, #8]
	for (int i = 0; i < 8; i++)
   13202:	3301      	adds	r3, #1
   13204:	2b07      	cmp	r3, #7
   13206:	ddf6      	ble.n	131f6 <ERL_temp_notify_cb+0x17e>
	k_work_submit(&ERL_temp_CAN_tx_work);
   13208:	4809      	ldr	r0, [pc, #36]	; (13230 <ERL_temp_notify_cb+0x1b8>)
   1320a:	f012 f963 	bl	254d4 <k_work_submit>
	return BT_GATT_ITER_CONTINUE;	// stay subscribed
   1320e:	2001      	movs	r0, #1
   13210:	e781      	b.n	13116 <ERL_temp_notify_cb+0x9e>
   13212:	bf00      	nop
   13214:	20007b0c 	.word	0x20007b0c
   13218:	0002e858 	.word	0x0002e858
   1321c:	0002df40 	.word	0x0002df40
   13220:	0002e87c 	.word	0x0002e87c
   13224:	0002e8ac 	.word	0x0002e8ac
   13228:	20000770 	.word	0x20000770
   1322c:	20000760 	.word	0x20000760
   13230:	200006ec 	.word	0x200006ec

00013234 <ERR_temp_notify_cb>:

uint8_t ERR_temp_notify_cb(struct bt_conn *conn, struct bt_gatt_subscribe_params *params, const void *data, uint16_t length)
{
   13234:	b500      	push	{lr}
   13236:	b083      	sub	sp, #12
	
	if (data == NULL){	// When successfully unsubscribed, (or if unpurposefully unsubscribed?), notify callback is called one last time with data set to NULL (from Zephyr docs)
   13238:	b16a      	cbz	r2, 13256 <ERR_temp_notify_cb+0x22>
   1323a:	4611      	mov	r1, r2
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1323c:	f3bf 8f5b 	dmb	ish
   13240:	4a63      	ldr	r2, [pc, #396]	; (133d0 <ERR_temp_notify_cb+0x19c>)
   13242:	6812      	ldr	r2, [r2, #0]
   13244:	f3bf 8f5b 	dmb	ish
		LOG_INF("ERR_temp_notify_cb: unsubscribed");
		atomic_clear_bit(flags, ERR_SUBSCRIBED_FLAG);
		return BT_GATT_ITER_STOP;
	}

	if (!atomic_test_bit(flags, TEMP_ENABLED_FLAG)) {	// if temp is not enabled, we need to unsubscribe
   13248:	f412 7f80 	tst.w	r2, #256	; 0x100
   1324c:	d044      	beq.n	132d8 <ERR_temp_notify_cb+0xa4>
		LOG_INF("ERR_temp_notify_cb: attempting to unsubscribe");
		return BT_GATT_ITER_STOP;	// returning this tells the BT Host to unsubscribe us
	}

	if (length != 16) {
   1324e:	2b10      	cmp	r3, #16
   13250:	d174      	bne.n	1333c <ERR_temp_notify_cb+0x108>
	}
	
	//LOG_INF("ERR_temp_notify_cb: Notification received");

	// fill CAN frames with data
	for (int i = 0; i < 8; i++)
   13252:	2300      	movs	r3, #0
   13254:	e0a9      	b.n	133aa <ERR_temp_notify_cb+0x176>
		LOG_INF("ERR_temp_notify_cb: unsubscribed");
   13256:	2006      	movs	r0, #6
   13258:	f002 fdb6 	bl	15dc8 <z_log_msg_alloc>
   1325c:	2200      	movs	r2, #0
   1325e:	f36f 0200 	bfc	r2, #0, #1
   13262:	f36f 0241 	bfc	r2, #1, #1
   13266:	f36f 0282 	bfc	r2, #2, #1
   1326a:	f36f 02c5 	bfc	r2, #3, #3
   1326e:	2303      	movs	r3, #3
   13270:	f363 1288 	bfi	r2, r3, #6, #3
   13274:	2308      	movs	r3, #8
   13276:	f363 2252 	bfi	r2, r3, #9, #10
   1327a:	f36f 42de 	bfc	r2, #19, #12
   1327e:	f36f 72df 	bfc	r2, #31, #1
   13282:	4684      	mov	ip, r0
   13284:	b190      	cbz	r0, 132ac <ERR_temp_notify_cb+0x78>
   13286:	f110 0310 	adds.w	r3, r0, #16
   1328a:	d001      	beq.n	13290 <ERR_temp_notify_cb+0x5c>
   1328c:	4951      	ldr	r1, [pc, #324]	; (133d4 <ERR_temp_notify_cb+0x1a0>)
   1328e:	6141      	str	r1, [r0, #20]
   13290:	b163      	cbz	r3, 132ac <ERR_temp_notify_cb+0x78>
   13292:	2302      	movs	r3, #2
   13294:	f88d 3004 	strb.w	r3, [sp, #4]
   13298:	2300      	movs	r3, #0
   1329a:	f88d 3005 	strb.w	r3, [sp, #5]
   1329e:	f88d 3006 	strb.w	r3, [sp, #6]
   132a2:	f88d 3007 	strb.w	r3, [sp, #7]
   132a6:	9801      	ldr	r0, [sp, #4]
   132a8:	f8cc 0010 	str.w	r0, [ip, #16]
   132ac:	2300      	movs	r3, #0
   132ae:	494a      	ldr	r1, [pc, #296]	; (133d8 <ERR_temp_notify_cb+0x1a4>)
   132b0:	4660      	mov	r0, ip
   132b2:	f014 fd94 	bl	27dde <z_log_msg_finalize>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   132b6:	4b46      	ldr	r3, [pc, #280]	; (133d0 <ERR_temp_notify_cb+0x19c>)
   132b8:	f3bf 8f5b 	dmb	ish
   132bc:	e853 1f00 	ldrex	r1, [r3]
   132c0:	f421 3100 	bic.w	r1, r1, #131072	; 0x20000
   132c4:	e843 1200 	strex	r2, r1, [r3]
   132c8:	2a00      	cmp	r2, #0
   132ca:	d1f7      	bne.n	132bc <ERR_temp_notify_cb+0x88>
   132cc:	f3bf 8f5b 	dmb	ish
		return BT_GATT_ITER_STOP;
   132d0:	2000      	movs	r0, #0

	// let the system workqueue actually send the frames (can_send is blocking)
	k_work_submit(&ERR_temp_CAN_tx_work);

	return BT_GATT_ITER_CONTINUE;	// stay subscribed
}
   132d2:	b003      	add	sp, #12
   132d4:	f85d fb04 	ldr.w	pc, [sp], #4
		LOG_INF("ERR_temp_notify_cb: attempting to unsubscribe");
   132d8:	2006      	movs	r0, #6
   132da:	f002 fd75 	bl	15dc8 <z_log_msg_alloc>
   132de:	2200      	movs	r2, #0
   132e0:	f36f 0200 	bfc	r2, #0, #1
   132e4:	f36f 0241 	bfc	r2, #1, #1
   132e8:	f36f 0282 	bfc	r2, #2, #1
   132ec:	f36f 02c5 	bfc	r2, #3, #3
   132f0:	2303      	movs	r3, #3
   132f2:	f363 1288 	bfi	r2, r3, #6, #3
   132f6:	2308      	movs	r3, #8
   132f8:	f363 2252 	bfi	r2, r3, #9, #10
   132fc:	f36f 42de 	bfc	r2, #19, #12
   13300:	f36f 72df 	bfc	r2, #31, #1
   13304:	4684      	mov	ip, r0
   13306:	b190      	cbz	r0, 1332e <ERR_temp_notify_cb+0xfa>
   13308:	f110 0310 	adds.w	r3, r0, #16
   1330c:	d001      	beq.n	13312 <ERR_temp_notify_cb+0xde>
   1330e:	4933      	ldr	r1, [pc, #204]	; (133dc <ERR_temp_notify_cb+0x1a8>)
   13310:	6141      	str	r1, [r0, #20]
   13312:	b163      	cbz	r3, 1332e <ERR_temp_notify_cb+0xfa>
   13314:	2302      	movs	r3, #2
   13316:	f88d 3004 	strb.w	r3, [sp, #4]
   1331a:	2300      	movs	r3, #0
   1331c:	f88d 3005 	strb.w	r3, [sp, #5]
   13320:	f88d 3006 	strb.w	r3, [sp, #6]
   13324:	f88d 3007 	strb.w	r3, [sp, #7]
   13328:	9801      	ldr	r0, [sp, #4]
   1332a:	f8cc 0010 	str.w	r0, [ip, #16]
   1332e:	2300      	movs	r3, #0
   13330:	4929      	ldr	r1, [pc, #164]	; (133d8 <ERR_temp_notify_cb+0x1a4>)
   13332:	4660      	mov	r0, ip
   13334:	f014 fd53 	bl	27dde <z_log_msg_finalize>
		return BT_GATT_ITER_STOP;	// returning this tells the BT Host to unsubscribe us
   13338:	2000      	movs	r0, #0
   1333a:	e7ca      	b.n	132d2 <ERR_temp_notify_cb+0x9e>
		LOG_ERR("ERR_temp_notify_cb: Invalid data received from notification");
   1333c:	2006      	movs	r0, #6
   1333e:	f002 fd43 	bl	15dc8 <z_log_msg_alloc>
   13342:	2200      	movs	r2, #0
   13344:	f36f 0200 	bfc	r2, #0, #1
   13348:	f36f 0241 	bfc	r2, #1, #1
   1334c:	f36f 0282 	bfc	r2, #2, #1
   13350:	f36f 02c5 	bfc	r2, #3, #3
   13354:	2301      	movs	r3, #1
   13356:	f363 1288 	bfi	r2, r3, #6, #3
   1335a:	2308      	movs	r3, #8
   1335c:	f363 2252 	bfi	r2, r3, #9, #10
   13360:	f36f 42de 	bfc	r2, #19, #12
   13364:	f36f 72df 	bfc	r2, #31, #1
   13368:	4684      	mov	ip, r0
   1336a:	b190      	cbz	r0, 13392 <ERR_temp_notify_cb+0x15e>
   1336c:	f110 0310 	adds.w	r3, r0, #16
   13370:	d001      	beq.n	13376 <ERR_temp_notify_cb+0x142>
   13372:	491b      	ldr	r1, [pc, #108]	; (133e0 <ERR_temp_notify_cb+0x1ac>)
   13374:	6141      	str	r1, [r0, #20]
   13376:	b163      	cbz	r3, 13392 <ERR_temp_notify_cb+0x15e>
   13378:	2302      	movs	r3, #2
   1337a:	f88d 3004 	strb.w	r3, [sp, #4]
   1337e:	2300      	movs	r3, #0
   13380:	f88d 3005 	strb.w	r3, [sp, #5]
   13384:	f88d 3006 	strb.w	r3, [sp, #6]
   13388:	f88d 3007 	strb.w	r3, [sp, #7]
   1338c:	9801      	ldr	r0, [sp, #4]
   1338e:	f8cc 0010 	str.w	r0, [ip, #16]
   13392:	2300      	movs	r3, #0
   13394:	4910      	ldr	r1, [pc, #64]	; (133d8 <ERR_temp_notify_cb+0x1a4>)
   13396:	4660      	mov	r0, ip
   13398:	f014 fd21 	bl	27dde <z_log_msg_finalize>
		return BT_GATT_ITER_CONTINUE;
   1339c:	2001      	movs	r0, #1
   1339e:	e798      	b.n	132d2 <ERR_temp_notify_cb+0x9e>
		ERR_temp_1.data[i] = ((uint8_t *)data)[i];
   133a0:	5cc8      	ldrb	r0, [r1, r3]
   133a2:	4a10      	ldr	r2, [pc, #64]	; (133e4 <ERR_temp_notify_cb+0x1b0>)
   133a4:	441a      	add	r2, r3
   133a6:	7210      	strb	r0, [r2, #8]
	for (int i = 0; i < 8; i++)
   133a8:	3301      	adds	r3, #1
   133aa:	2b07      	cmp	r3, #7
   133ac:	ddf8      	ble.n	133a0 <ERR_temp_notify_cb+0x16c>
	for (int i = 0; i < 8; i++)
   133ae:	2300      	movs	r3, #0
   133b0:	e006      	b.n	133c0 <ERR_temp_notify_cb+0x18c>
		ERR_temp_2.data[i] = ((uint8_t *)data)[8 + i];
   133b2:	f103 0208 	add.w	r2, r3, #8
   133b6:	5c88      	ldrb	r0, [r1, r2]
   133b8:	4a0b      	ldr	r2, [pc, #44]	; (133e8 <ERR_temp_notify_cb+0x1b4>)
   133ba:	441a      	add	r2, r3
   133bc:	7210      	strb	r0, [r2, #8]
	for (int i = 0; i < 8; i++)
   133be:	3301      	adds	r3, #1
   133c0:	2b07      	cmp	r3, #7
   133c2:	ddf6      	ble.n	133b2 <ERR_temp_notify_cb+0x17e>
	k_work_submit(&ERR_temp_CAN_tx_work);
   133c4:	4809      	ldr	r0, [pc, #36]	; (133ec <ERR_temp_notify_cb+0x1b8>)
   133c6:	f012 f885 	bl	254d4 <k_work_submit>
	return BT_GATT_ITER_CONTINUE;	// stay subscribed
   133ca:	2001      	movs	r0, #1
   133cc:	e781      	b.n	132d2 <ERR_temp_notify_cb+0x9e>
   133ce:	bf00      	nop
   133d0:	20007b0c 	.word	0x20007b0c
   133d4:	0002e8e8 	.word	0x0002e8e8
   133d8:	0002df40 	.word	0x0002df40
   133dc:	0002e90c 	.word	0x0002e90c
   133e0:	0002e93c 	.word	0x0002e93c
   133e4:	20000750 	.word	0x20000750
   133e8:	20000740 	.word	0x20000740
   133ec:	200006dc 	.word	0x200006dc

000133f0 <TTPMS_CAN_send>:
{
   133f0:	b510      	push	{r4, lr}
   133f2:	b084      	sub	sp, #16
   133f4:	4601      	mov	r1, r0
	int err = can_send(can_dev, frame, TTPMS_CAN_TX_TIMEOUT, NULL, NULL);
   133f6:	4b39      	ldr	r3, [pc, #228]	; (134dc <TTPMS_CAN_send+0xec>)
   133f8:	6818      	ldr	r0, [r3, #0]
		union { uintptr_t x; void * val; } parm4 = { .val = user_data };
		return (int) arch_syscall_invoke6(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, parm3.x, parm4.x, K_SYSCALL_CAN_SEND);
	}
#endif
	compiler_barrier();
	return z_impl_can_send(dev, frame, timeout, callback, user_data);
   133fa:	2300      	movs	r3, #0
   133fc:	9301      	str	r3, [sp, #4]
   133fe:	9300      	str	r3, [sp, #0]
   13400:	f44f 724d 	mov.w	r2, #820	; 0x334
   13404:	2300      	movs	r3, #0
   13406:	f00d fd07 	bl	20e18 <z_impl_can_send>
	if (err == -11) {
   1340a:	f110 0f0b 	cmn.w	r0, #11
   1340e:	d003      	beq.n	13418 <TTPMS_CAN_send+0x28>
   13410:	4604      	mov	r4, r0
	} else if (err != 0) {
   13412:	bb88      	cbnz	r0, 13478 <TTPMS_CAN_send+0x88>
}
   13414:	b004      	add	sp, #16
   13416:	bd10      	pop	{r4, pc}
		LOG_WRN("Arbitration timeout, frame abandoned");
   13418:	2006      	movs	r0, #6
   1341a:	f002 fcd5 	bl	15dc8 <z_log_msg_alloc>
   1341e:	2200      	movs	r2, #0
   13420:	f36f 0200 	bfc	r2, #0, #1
   13424:	f36f 0241 	bfc	r2, #1, #1
   13428:	f36f 0282 	bfc	r2, #2, #1
   1342c:	f36f 02c5 	bfc	r2, #3, #3
   13430:	2302      	movs	r3, #2
   13432:	f363 1288 	bfi	r2, r3, #6, #3
   13436:	2308      	movs	r3, #8
   13438:	f363 2252 	bfi	r2, r3, #9, #10
   1343c:	f36f 42de 	bfc	r2, #19, #12
   13440:	f36f 72df 	bfc	r2, #31, #1
   13444:	4604      	mov	r4, r0
   13446:	b188      	cbz	r0, 1346c <TTPMS_CAN_send+0x7c>
   13448:	f110 0310 	adds.w	r3, r0, #16
   1344c:	d001      	beq.n	13452 <TTPMS_CAN_send+0x62>
   1344e:	4924      	ldr	r1, [pc, #144]	; (134e0 <TTPMS_CAN_send+0xf0>)
   13450:	6141      	str	r1, [r0, #20]
   13452:	b15b      	cbz	r3, 1346c <TTPMS_CAN_send+0x7c>
   13454:	2302      	movs	r3, #2
   13456:	f88d 300c 	strb.w	r3, [sp, #12]
   1345a:	2300      	movs	r3, #0
   1345c:	f88d 300d 	strb.w	r3, [sp, #13]
   13460:	f88d 300e 	strb.w	r3, [sp, #14]
   13464:	f88d 300f 	strb.w	r3, [sp, #15]
   13468:	9803      	ldr	r0, [sp, #12]
   1346a:	6120      	str	r0, [r4, #16]
   1346c:	2300      	movs	r3, #0
   1346e:	491d      	ldr	r1, [pc, #116]	; (134e4 <TTPMS_CAN_send+0xf4>)
   13470:	4620      	mov	r0, r4
   13472:	f014 fcb4 	bl	27dde <z_log_msg_finalize>
   13476:	e7cd      	b.n	13414 <TTPMS_CAN_send+0x24>
		LOG_ERR("Unknown CAN TX error, can_send returned: %d", err);
   13478:	2008      	movs	r0, #8
   1347a:	f002 fca5 	bl	15dc8 <z_log_msg_alloc>
   1347e:	2200      	movs	r2, #0
   13480:	f36f 0200 	bfc	r2, #0, #1
   13484:	f36f 0241 	bfc	r2, #1, #1
   13488:	f36f 0282 	bfc	r2, #2, #1
   1348c:	f36f 02c5 	bfc	r2, #3, #3
   13490:	2301      	movs	r3, #1
   13492:	f363 1288 	bfi	r2, r3, #6, #3
   13496:	230c      	movs	r3, #12
   13498:	f363 2252 	bfi	r2, r3, #9, #10
   1349c:	f36f 42de 	bfc	r2, #19, #12
   134a0:	f36f 72df 	bfc	r2, #31, #1
   134a4:	4684      	mov	ip, r0
   134a6:	b198      	cbz	r0, 134d0 <TTPMS_CAN_send+0xe0>
   134a8:	f110 0310 	adds.w	r3, r0, #16
   134ac:	d002      	beq.n	134b4 <TTPMS_CAN_send+0xc4>
   134ae:	490e      	ldr	r1, [pc, #56]	; (134e8 <TTPMS_CAN_send+0xf8>)
   134b0:	6141      	str	r1, [r0, #20]
   134b2:	6184      	str	r4, [r0, #24]
   134b4:	b163      	cbz	r3, 134d0 <TTPMS_CAN_send+0xe0>
   134b6:	2303      	movs	r3, #3
   134b8:	f88d 300c 	strb.w	r3, [sp, #12]
   134bc:	2300      	movs	r3, #0
   134be:	f88d 300d 	strb.w	r3, [sp, #13]
   134c2:	f88d 300e 	strb.w	r3, [sp, #14]
   134c6:	f88d 300f 	strb.w	r3, [sp, #15]
   134ca:	9803      	ldr	r0, [sp, #12]
   134cc:	f8cc 0010 	str.w	r0, [ip, #16]
   134d0:	2300      	movs	r3, #0
   134d2:	4904      	ldr	r1, [pc, #16]	; (134e4 <TTPMS_CAN_send+0xf4>)
   134d4:	4660      	mov	r0, ip
   134d6:	f014 fc82 	bl	27dde <z_log_msg_finalize>
   134da:	e79b      	b.n	13414 <TTPMS_CAN_send+0x24>
   134dc:	2000073c 	.word	0x2000073c
   134e0:	0002e978 	.word	0x0002e978
   134e4:	0002df40 	.word	0x0002df40
   134e8:	0002e9a0 	.word	0x0002e9a0

000134ec <status_CAN_tx_work_handler>:
{
   134ec:	b508      	push	{r3, lr}
	TTPMS_CAN_send(&TTPMS_status);
   134ee:	4802      	ldr	r0, [pc, #8]	; (134f8 <status_CAN_tx_work_handler+0xc>)
   134f0:	f7ff ff7e 	bl	133f0 <TTPMS_CAN_send>
}
   134f4:	bd08      	pop	{r3, pc}
   134f6:	bf00      	nop
   134f8:	20000820 	.word	0x20000820

000134fc <IFL_temp_CAN_tx_work_handler>:
{
   134fc:	b508      	push	{r3, lr}
	TTPMS_CAN_send(&IFL_temp_1);
   134fe:	4803      	ldr	r0, [pc, #12]	; (1350c <IFL_temp_CAN_tx_work_handler+0x10>)
   13500:	f7ff ff76 	bl	133f0 <TTPMS_CAN_send>
	TTPMS_CAN_send(&IFL_temp_2);
   13504:	4802      	ldr	r0, [pc, #8]	; (13510 <IFL_temp_CAN_tx_work_handler+0x14>)
   13506:	f7ff ff73 	bl	133f0 <TTPMS_CAN_send>
}
   1350a:	bd08      	pop	{r3, pc}
   1350c:	20000810 	.word	0x20000810
   13510:	20000800 	.word	0x20000800

00013514 <EFL_temp_CAN_tx_work_handler>:
{
   13514:	b508      	push	{r3, lr}
	TTPMS_CAN_send(&EFL_temp_1);
   13516:	4806      	ldr	r0, [pc, #24]	; (13530 <EFL_temp_CAN_tx_work_handler+0x1c>)
   13518:	f7ff ff6a 	bl	133f0 <TTPMS_CAN_send>
	TTPMS_CAN_send(&EFL_temp_2);
   1351c:	4805      	ldr	r0, [pc, #20]	; (13534 <EFL_temp_CAN_tx_work_handler+0x20>)
   1351e:	f7ff ff67 	bl	133f0 <TTPMS_CAN_send>
	TTPMS_CAN_send(&EFL_temp_3);
   13522:	4805      	ldr	r0, [pc, #20]	; (13538 <EFL_temp_CAN_tx_work_handler+0x24>)
   13524:	f7ff ff64 	bl	133f0 <TTPMS_CAN_send>
	TTPMS_CAN_send(&EFL_temp_4);
   13528:	4804      	ldr	r0, [pc, #16]	; (1353c <EFL_temp_CAN_tx_work_handler+0x28>)
   1352a:	f7ff ff61 	bl	133f0 <TTPMS_CAN_send>
}
   1352e:	bd08      	pop	{r3, pc}
   13530:	200007f0 	.word	0x200007f0
   13534:	200007e0 	.word	0x200007e0
   13538:	200007d0 	.word	0x200007d0
   1353c:	200007c0 	.word	0x200007c0

00013540 <EFR_temp_CAN_tx_work_handler>:
{
   13540:	b508      	push	{r3, lr}
	TTPMS_CAN_send(&EFR_temp_1);
   13542:	4806      	ldr	r0, [pc, #24]	; (1355c <EFR_temp_CAN_tx_work_handler+0x1c>)
   13544:	f7ff ff54 	bl	133f0 <TTPMS_CAN_send>
	TTPMS_CAN_send(&EFR_temp_2);
   13548:	4805      	ldr	r0, [pc, #20]	; (13560 <EFR_temp_CAN_tx_work_handler+0x20>)
   1354a:	f7ff ff51 	bl	133f0 <TTPMS_CAN_send>
	TTPMS_CAN_send(&EFR_temp_3);
   1354e:	4805      	ldr	r0, [pc, #20]	; (13564 <EFR_temp_CAN_tx_work_handler+0x24>)
   13550:	f7ff ff4e 	bl	133f0 <TTPMS_CAN_send>
	TTPMS_CAN_send(&EFR_temp_4);
   13554:	4804      	ldr	r0, [pc, #16]	; (13568 <EFR_temp_CAN_tx_work_handler+0x28>)
   13556:	f7ff ff4b 	bl	133f0 <TTPMS_CAN_send>
}
   1355a:	bd08      	pop	{r3, pc}
   1355c:	200007b0 	.word	0x200007b0
   13560:	200007a0 	.word	0x200007a0
   13564:	20000790 	.word	0x20000790
   13568:	20000780 	.word	0x20000780

0001356c <ERL_temp_CAN_tx_work_handler>:
{
   1356c:	b508      	push	{r3, lr}
	TTPMS_CAN_send(&ERL_temp_1);
   1356e:	4803      	ldr	r0, [pc, #12]	; (1357c <ERL_temp_CAN_tx_work_handler+0x10>)
   13570:	f7ff ff3e 	bl	133f0 <TTPMS_CAN_send>
	TTPMS_CAN_send(&ERL_temp_2);
   13574:	4802      	ldr	r0, [pc, #8]	; (13580 <ERL_temp_CAN_tx_work_handler+0x14>)
   13576:	f7ff ff3b 	bl	133f0 <TTPMS_CAN_send>
}
   1357a:	bd08      	pop	{r3, pc}
   1357c:	20000770 	.word	0x20000770
   13580:	20000760 	.word	0x20000760

00013584 <ERR_temp_CAN_tx_work_handler>:
{
   13584:	b508      	push	{r3, lr}
	TTPMS_CAN_send(&ERR_temp_1);
   13586:	4803      	ldr	r0, [pc, #12]	; (13594 <ERR_temp_CAN_tx_work_handler+0x10>)
   13588:	f7ff ff32 	bl	133f0 <TTPMS_CAN_send>
	TTPMS_CAN_send(&ERR_temp_2);
   1358c:	4802      	ldr	r0, [pc, #8]	; (13598 <ERR_temp_CAN_tx_work_handler+0x14>)
   1358e:	f7ff ff2f 	bl	133f0 <TTPMS_CAN_send>
}
   13592:	bd08      	pop	{r3, pc}
   13594:	20000750 	.word	0x20000750
   13598:	20000740 	.word	0x20000740

0001359c <TTPMS_CAN_init>:
{
   1359c:	b510      	push	{r4, lr}
   1359e:	b082      	sub	sp, #8
	if (!device_is_ready(can_dev)) {
   135a0:	4b56      	ldr	r3, [pc, #344]	; (136fc <TTPMS_CAN_init+0x160>)
   135a2:	6818      	ldr	r0, [r3, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   135a4:	f019 fad1 	bl	2cb4a <z_device_is_ready>
   135a8:	b198      	cbz	r0, 135d2 <TTPMS_CAN_init+0x36>
	err = can_start(can_dev);
   135aa:	4b54      	ldr	r3, [pc, #336]	; (136fc <TTPMS_CAN_init+0x160>)
   135ac:	6818      	ldr	r0, [r3, #0]
 */
__syscall int can_start(const struct device *dev);

static inline int z_impl_can_start(const struct device *dev)
{
	const struct can_driver_api *api = (const struct can_driver_api *)dev->api;
   135ae:	6883      	ldr	r3, [r0, #8]

	return api->start(dev);
   135b0:	685b      	ldr	r3, [r3, #4]
   135b2:	4798      	blx	r3
	if (err != 0) {
   135b4:	4604      	mov	r4, r0
   135b6:	2800      	cmp	r0, #0
   135b8:	d13b      	bne.n	13632 <TTPMS_CAN_init+0x96>
	err = can_add_rx_filter(can_dev, settings_frame_cb, NULL, &settings_frame_filter);
   135ba:	4b50      	ldr	r3, [pc, #320]	; (136fc <TTPMS_CAN_init+0x160>)
   135bc:	6818      	ldr	r0, [r3, #0]
 * @retval -ENOTSUP if the requested filter type is not supported.
 */
static inline int can_add_rx_filter(const struct device *dev, can_rx_callback_t callback,
				    void *user_data, const struct can_filter *filter)
{
	const struct can_driver_api *api = (const struct can_driver_api *)dev->api;
   135be:	6883      	ldr	r3, [r0, #8]

	if (filter == NULL || (filter->flags & (CAN_FILTER_DATA | CAN_FILTER_RTR)) == 0) {
		return -EINVAL;
	}

	return api->add_rx_filter(dev, callback, user_data, filter);
   135c0:	699c      	ldr	r4, [r3, #24]
   135c2:	4b4f      	ldr	r3, [pc, #316]	; (13700 <TTPMS_CAN_init+0x164>)
   135c4:	2200      	movs	r2, #0
   135c6:	494f      	ldr	r1, [pc, #316]	; (13704 <TTPMS_CAN_init+0x168>)
   135c8:	47a0      	blx	r4
	if (err < 0) {
   135ca:	1e04      	subs	r4, r0, #0
   135cc:	db63      	blt.n	13696 <TTPMS_CAN_init+0xfa>
}
   135ce:	b002      	add	sp, #8
   135d0:	bd10      	pop	{r4, pc}
		LOG_WRN("CAN device not ready");
   135d2:	2006      	movs	r0, #6
   135d4:	f002 fbf8 	bl	15dc8 <z_log_msg_alloc>
   135d8:	2200      	movs	r2, #0
   135da:	f36f 0200 	bfc	r2, #0, #1
   135de:	f36f 0241 	bfc	r2, #1, #1
   135e2:	f36f 0282 	bfc	r2, #2, #1
   135e6:	f36f 02c5 	bfc	r2, #3, #3
   135ea:	2302      	movs	r3, #2
   135ec:	f363 1288 	bfi	r2, r3, #6, #3
   135f0:	2308      	movs	r3, #8
   135f2:	f363 2252 	bfi	r2, r3, #9, #10
   135f6:	f36f 42de 	bfc	r2, #19, #12
   135fa:	f36f 72df 	bfc	r2, #31, #1
   135fe:	4604      	mov	r4, r0
   13600:	b188      	cbz	r0, 13626 <TTPMS_CAN_init+0x8a>
   13602:	f110 0310 	adds.w	r3, r0, #16
   13606:	d001      	beq.n	1360c <TTPMS_CAN_init+0x70>
   13608:	493f      	ldr	r1, [pc, #252]	; (13708 <TTPMS_CAN_init+0x16c>)
   1360a:	6141      	str	r1, [r0, #20]
   1360c:	b15b      	cbz	r3, 13626 <TTPMS_CAN_init+0x8a>
   1360e:	2302      	movs	r3, #2
   13610:	f88d 3004 	strb.w	r3, [sp, #4]
   13614:	2300      	movs	r3, #0
   13616:	f88d 3005 	strb.w	r3, [sp, #5]
   1361a:	f88d 3006 	strb.w	r3, [sp, #6]
   1361e:	f88d 3007 	strb.w	r3, [sp, #7]
   13622:	9801      	ldr	r0, [sp, #4]
   13624:	6120      	str	r0, [r4, #16]
   13626:	2300      	movs	r3, #0
   13628:	4938      	ldr	r1, [pc, #224]	; (1370c <TTPMS_CAN_init+0x170>)
   1362a:	4620      	mov	r0, r4
   1362c:	f014 fbd7 	bl	27dde <z_log_msg_finalize>
		return;
   13630:	e7cd      	b.n	135ce <TTPMS_CAN_init+0x32>
		LOG_WRN("Error starting CAN controller (err %d)", err);
   13632:	2008      	movs	r0, #8
   13634:	f002 fbc8 	bl	15dc8 <z_log_msg_alloc>
   13638:	2200      	movs	r2, #0
   1363a:	f36f 0200 	bfc	r2, #0, #1
   1363e:	f36f 0241 	bfc	r2, #1, #1
   13642:	f36f 0282 	bfc	r2, #2, #1
   13646:	f36f 02c5 	bfc	r2, #3, #3
   1364a:	2302      	movs	r3, #2
   1364c:	f363 1288 	bfi	r2, r3, #6, #3
   13650:	230c      	movs	r3, #12
   13652:	f363 2252 	bfi	r2, r3, #9, #10
   13656:	f36f 42de 	bfc	r2, #19, #12
   1365a:	f36f 72df 	bfc	r2, #31, #1
   1365e:	4684      	mov	ip, r0
   13660:	b198      	cbz	r0, 1368a <TTPMS_CAN_init+0xee>
   13662:	f110 0310 	adds.w	r3, r0, #16
   13666:	d002      	beq.n	1366e <TTPMS_CAN_init+0xd2>
   13668:	4929      	ldr	r1, [pc, #164]	; (13710 <TTPMS_CAN_init+0x174>)
   1366a:	6141      	str	r1, [r0, #20]
   1366c:	6184      	str	r4, [r0, #24]
   1366e:	b163      	cbz	r3, 1368a <TTPMS_CAN_init+0xee>
   13670:	2303      	movs	r3, #3
   13672:	f88d 3004 	strb.w	r3, [sp, #4]
   13676:	2300      	movs	r3, #0
   13678:	f88d 3005 	strb.w	r3, [sp, #5]
   1367c:	f88d 3006 	strb.w	r3, [sp, #6]
   13680:	f88d 3007 	strb.w	r3, [sp, #7]
   13684:	9801      	ldr	r0, [sp, #4]
   13686:	f8cc 0010 	str.w	r0, [ip, #16]
   1368a:	2300      	movs	r3, #0
   1368c:	491f      	ldr	r1, [pc, #124]	; (1370c <TTPMS_CAN_init+0x170>)
   1368e:	4660      	mov	r0, ip
   13690:	f014 fba5 	bl	27dde <z_log_msg_finalize>
		return;
   13694:	e79b      	b.n	135ce <TTPMS_CAN_init+0x32>
		LOG_ERR("Unable to add CAN RX filter (err %d)", err);
   13696:	2008      	movs	r0, #8
   13698:	f002 fb96 	bl	15dc8 <z_log_msg_alloc>
   1369c:	2200      	movs	r2, #0
   1369e:	f36f 0200 	bfc	r2, #0, #1
   136a2:	f36f 0241 	bfc	r2, #1, #1
   136a6:	f36f 0282 	bfc	r2, #2, #1
   136aa:	f36f 02c5 	bfc	r2, #3, #3
   136ae:	2301      	movs	r3, #1
   136b0:	f363 1288 	bfi	r2, r3, #6, #3
   136b4:	230c      	movs	r3, #12
   136b6:	f363 2252 	bfi	r2, r3, #9, #10
   136ba:	f36f 42de 	bfc	r2, #19, #12
   136be:	f36f 72df 	bfc	r2, #31, #1
   136c2:	4684      	mov	ip, r0
   136c4:	b198      	cbz	r0, 136ee <TTPMS_CAN_init+0x152>
   136c6:	f110 0310 	adds.w	r3, r0, #16
   136ca:	d002      	beq.n	136d2 <TTPMS_CAN_init+0x136>
   136cc:	4911      	ldr	r1, [pc, #68]	; (13714 <TTPMS_CAN_init+0x178>)
   136ce:	6141      	str	r1, [r0, #20]
   136d0:	6184      	str	r4, [r0, #24]
   136d2:	b163      	cbz	r3, 136ee <TTPMS_CAN_init+0x152>
   136d4:	2303      	movs	r3, #3
   136d6:	f88d 3004 	strb.w	r3, [sp, #4]
   136da:	2300      	movs	r3, #0
   136dc:	f88d 3005 	strb.w	r3, [sp, #5]
   136e0:	f88d 3006 	strb.w	r3, [sp, #6]
   136e4:	f88d 3007 	strb.w	r3, [sp, #7]
   136e8:	9801      	ldr	r0, [sp, #4]
   136ea:	f8cc 0010 	str.w	r0, [ip, #16]
   136ee:	2300      	movs	r3, #0
   136f0:	4906      	ldr	r1, [pc, #24]	; (1370c <TTPMS_CAN_init+0x170>)
   136f2:	4660      	mov	r0, ip
   136f4:	f014 fb73 	bl	27dde <z_log_msg_finalize>
   136f8:	e769      	b.n	135ce <TTPMS_CAN_init+0x32>
   136fa:	bf00      	nop
   136fc:	2000073c 	.word	0x2000073c
   13700:	0002ed80 	.word	0x0002ed80
   13704:	0001098d 	.word	0x0001098d
   13708:	0002e9cc 	.word	0x0002e9cc
   1370c:	0002df40 	.word	0x0002df40
   13710:	0002e9e4 	.word	0x0002e9e4
   13714:	0002ea0c 	.word	0x0002ea0c

00013718 <TTPMS_BLE_init>:
};

// NOTE: each sensor needs to have its own subscribe_params variable since it remains tied to each subscription (from Zephyr docs)

void TTPMS_BLE_init(void)
{
   13718:	b510      	push	{r4, lr}
   1371a:	b084      	sub	sp, #16
	int err;

	bt_addr_le_t addr;

	// create self BT address
	err = bt_addr_le_from_str(TTPMS_RX_BT_ID, "random", &addr);
   1371c:	aa02      	add	r2, sp, #8
   1371e:	49b6      	ldr	r1, [pc, #728]	; (139f8 <TTPMS_BLE_init+0x2e0>)
   13720:	48b6      	ldr	r0, [pc, #728]	; (139fc <TTPMS_BLE_init+0x2e4>)
   13722:	f004 fed1 	bl	184c8 <bt_addr_le_from_str>
	if (err) {
   13726:	4604      	mov	r4, r0
   13728:	2800      	cmp	r0, #0
   1372a:	f040 80cf 	bne.w	138cc <TTPMS_BLE_init+0x1b4>
		LOG_WRN("Invalid BT address (err %d)", err);
	}

	// assign self BT address
	bt_identity = bt_id_create(&addr, NULL);
   1372e:	2100      	movs	r1, #0
   13730:	a802      	add	r0, sp, #8
   13732:	f007 fb5f 	bl	1adf4 <bt_id_create>
   13736:	4bb2      	ldr	r3, [pc, #712]	; (13a00 <TTPMS_BLE_init+0x2e8>)
   13738:	6018      	str	r0, [r3, #0]
	if (bt_identity < 0) {
   1373a:	2800      	cmp	r0, #0
   1373c:	f2c0 80f8 	blt.w	13930 <TTPMS_BLE_init+0x218>
		LOG_WRN("Creating new BT ID failed (err %d)", err);
	}

	err = bt_enable(NULL);
   13740:	2000      	movs	r0, #0
   13742:	f007 f973 	bl	1aa2c <bt_enable>
	if (err) {
   13746:	4604      	mov	r4, r0
   13748:	2800      	cmp	r0, #0
   1374a:	f000 8123 	beq.w	13994 <TTPMS_BLE_init+0x27c>
		LOG_WRN("Bluetooth init failed (err %d)", err);
   1374e:	2008      	movs	r0, #8
   13750:	f002 fb3a 	bl	15dc8 <z_log_msg_alloc>
   13754:	2200      	movs	r2, #0
   13756:	f36f 0200 	bfc	r2, #0, #1
   1375a:	f36f 0241 	bfc	r2, #1, #1
   1375e:	f36f 0282 	bfc	r2, #2, #1
   13762:	f36f 02c5 	bfc	r2, #3, #3
   13766:	2302      	movs	r3, #2
   13768:	f363 1288 	bfi	r2, r3, #6, #3
   1376c:	230c      	movs	r3, #12
   1376e:	f363 2252 	bfi	r2, r3, #9, #10
   13772:	f36f 42de 	bfc	r2, #19, #12
   13776:	f36f 72df 	bfc	r2, #31, #1
   1377a:	4684      	mov	ip, r0
   1377c:	b198      	cbz	r0, 137a6 <TTPMS_BLE_init+0x8e>
   1377e:	f110 0310 	adds.w	r3, r0, #16
   13782:	d002      	beq.n	1378a <TTPMS_BLE_init+0x72>
   13784:	499f      	ldr	r1, [pc, #636]	; (13a04 <TTPMS_BLE_init+0x2ec>)
   13786:	6141      	str	r1, [r0, #20]
   13788:	6184      	str	r4, [r0, #24]
   1378a:	b163      	cbz	r3, 137a6 <TTPMS_BLE_init+0x8e>
   1378c:	2303      	movs	r3, #3
   1378e:	f88d 3004 	strb.w	r3, [sp, #4]
   13792:	2300      	movs	r3, #0
   13794:	f88d 3005 	strb.w	r3, [sp, #5]
   13798:	f88d 3006 	strb.w	r3, [sp, #6]
   1379c:	f88d 3007 	strb.w	r3, [sp, #7]
   137a0:	9801      	ldr	r0, [sp, #4]
   137a2:	f8cc 0010 	str.w	r0, [ip, #16]
   137a6:	2300      	movs	r3, #0
   137a8:	4997      	ldr	r1, [pc, #604]	; (13a08 <TTPMS_BLE_init+0x2f0>)
   137aa:	4660      	mov	r0, ip
   137ac:	f014 fb17 	bl	27dde <z_log_msg_finalize>
	} else {
		LOG_INF("Bluetooth initialized");
	}

	// fill address variables for the devices we want to filter for
	err = bt_addr_le_from_str(TTPMS_IFL_BT_ID, "random", &IFL_bt_addr);
   137b0:	4a96      	ldr	r2, [pc, #600]	; (13a0c <TTPMS_BLE_init+0x2f4>)
   137b2:	4991      	ldr	r1, [pc, #580]	; (139f8 <TTPMS_BLE_init+0x2e0>)
   137b4:	4896      	ldr	r0, [pc, #600]	; (13a10 <TTPMS_BLE_init+0x2f8>)
   137b6:	f004 fe87 	bl	184c8 <bt_addr_le_from_str>
	if (err) { LOG_WRN("Invalid BT address (err %d)", err); }
   137ba:	4604      	mov	r4, r0
   137bc:	2800      	cmp	r0, #0
   137be:	f040 814f 	bne.w	13a60 <TTPMS_BLE_init+0x348>

	err = bt_addr_le_from_str(TTPMS_IFR_BT_ID, "random", &IFR_bt_addr);
   137c2:	4a94      	ldr	r2, [pc, #592]	; (13a14 <TTPMS_BLE_init+0x2fc>)
   137c4:	498c      	ldr	r1, [pc, #560]	; (139f8 <TTPMS_BLE_init+0x2e0>)
   137c6:	4894      	ldr	r0, [pc, #592]	; (13a18 <TTPMS_BLE_init+0x300>)
   137c8:	f004 fe7e 	bl	184c8 <bt_addr_le_from_str>
	if (err) { LOG_WRN("Invalid BT address (err %d)", err); }
   137cc:	4604      	mov	r4, r0
   137ce:	2800      	cmp	r0, #0
   137d0:	f040 8178 	bne.w	13ac4 <TTPMS_BLE_init+0x3ac>

	err = bt_addr_le_from_str(TTPMS_IRL_BT_ID, "random", &IRL_bt_addr);
   137d4:	4a91      	ldr	r2, [pc, #580]	; (13a1c <TTPMS_BLE_init+0x304>)
   137d6:	4988      	ldr	r1, [pc, #544]	; (139f8 <TTPMS_BLE_init+0x2e0>)
   137d8:	4891      	ldr	r0, [pc, #580]	; (13a20 <TTPMS_BLE_init+0x308>)
   137da:	f004 fe75 	bl	184c8 <bt_addr_le_from_str>
	if (err) { LOG_WRN("Invalid BT address (err %d)", err); }
   137de:	4604      	mov	r4, r0
   137e0:	2800      	cmp	r0, #0
   137e2:	f040 81a1 	bne.w	13b28 <TTPMS_BLE_init+0x410>

	err = bt_addr_le_from_str(TTPMS_IRR_BT_ID, "random", &IRR_bt_addr);
   137e6:	4a8f      	ldr	r2, [pc, #572]	; (13a24 <TTPMS_BLE_init+0x30c>)
   137e8:	4983      	ldr	r1, [pc, #524]	; (139f8 <TTPMS_BLE_init+0x2e0>)
   137ea:	488f      	ldr	r0, [pc, #572]	; (13a28 <TTPMS_BLE_init+0x310>)
   137ec:	f004 fe6c 	bl	184c8 <bt_addr_le_from_str>
	if (err) { LOG_WRN("Invalid BT address (err %d)", err); }
   137f0:	4604      	mov	r4, r0
   137f2:	2800      	cmp	r0, #0
   137f4:	f040 81ca 	bne.w	13b8c <TTPMS_BLE_init+0x474>

	err = bt_addr_le_from_str(TTPMS_EFL_BT_ID, "random", &EFL_bt_addr);
   137f8:	4a8c      	ldr	r2, [pc, #560]	; (13a2c <TTPMS_BLE_init+0x314>)
   137fa:	497f      	ldr	r1, [pc, #508]	; (139f8 <TTPMS_BLE_init+0x2e0>)
   137fc:	488c      	ldr	r0, [pc, #560]	; (13a30 <TTPMS_BLE_init+0x318>)
   137fe:	f004 fe63 	bl	184c8 <bt_addr_le_from_str>
	if (err) { LOG_WRN("Invalid BT address (err %d)", err); }
   13802:	4604      	mov	r4, r0
   13804:	2800      	cmp	r0, #0
   13806:	f040 81f3 	bne.w	13bf0 <TTPMS_BLE_init+0x4d8>

	err = bt_addr_le_from_str(TTPMS_EFR_BT_ID, "random", &EFR_bt_addr);
   1380a:	4a8a      	ldr	r2, [pc, #552]	; (13a34 <TTPMS_BLE_init+0x31c>)
   1380c:	497a      	ldr	r1, [pc, #488]	; (139f8 <TTPMS_BLE_init+0x2e0>)
   1380e:	488a      	ldr	r0, [pc, #552]	; (13a38 <TTPMS_BLE_init+0x320>)
   13810:	f004 fe5a 	bl	184c8 <bt_addr_le_from_str>
	if (err) { LOG_WRN("Invalid BT address (err %d)", err); }
   13814:	4604      	mov	r4, r0
   13816:	2800      	cmp	r0, #0
   13818:	f040 821c 	bne.w	13c54 <TTPMS_BLE_init+0x53c>

	err = bt_addr_le_from_str(TTPMS_ERL_BT_ID, "random", &ERL_bt_addr);
   1381c:	4a87      	ldr	r2, [pc, #540]	; (13a3c <TTPMS_BLE_init+0x324>)
   1381e:	4976      	ldr	r1, [pc, #472]	; (139f8 <TTPMS_BLE_init+0x2e0>)
   13820:	4887      	ldr	r0, [pc, #540]	; (13a40 <TTPMS_BLE_init+0x328>)
   13822:	f004 fe51 	bl	184c8 <bt_addr_le_from_str>
	if (err) { LOG_WRN("Invalid BT address (err %d)", err); }
   13826:	4604      	mov	r4, r0
   13828:	2800      	cmp	r0, #0
   1382a:	f040 8245 	bne.w	13cb8 <TTPMS_BLE_init+0x5a0>

	err = bt_addr_le_from_str(TTPMS_ERR_BT_ID, "random", &ERR_bt_addr);
   1382e:	4a85      	ldr	r2, [pc, #532]	; (13a44 <TTPMS_BLE_init+0x32c>)
   13830:	4971      	ldr	r1, [pc, #452]	; (139f8 <TTPMS_BLE_init+0x2e0>)
   13832:	4885      	ldr	r0, [pc, #532]	; (13a48 <TTPMS_BLE_init+0x330>)
   13834:	f004 fe48 	bl	184c8 <bt_addr_le_from_str>
	if (err) { LOG_WRN("Invalid BT address (err %d)", err); }
   13838:	4604      	mov	r4, r0
   1383a:	2800      	cmp	r0, #0
   1383c:	f040 826e 	bne.w	13d1c <TTPMS_BLE_init+0x604>

	
	// Add address of the devices we want to filter accept list
	err = bt_le_filter_accept_list_add(&IFL_bt_addr);
   13840:	4872      	ldr	r0, [pc, #456]	; (13a0c <TTPMS_BLE_init+0x2f4>)
   13842:	f007 f9f3 	bl	1ac2c <bt_le_filter_accept_list_add>
	if (err) { LOG_WRN("Failed to add address to filter accept list (err %d)", err); }
   13846:	4604      	mov	r4, r0
   13848:	2800      	cmp	r0, #0
   1384a:	f040 829d 	bne.w	13d88 <TTPMS_BLE_init+0x670>

	err = bt_le_filter_accept_list_add(&IFR_bt_addr);
   1384e:	4871      	ldr	r0, [pc, #452]	; (13a14 <TTPMS_BLE_init+0x2fc>)
   13850:	f007 f9ec 	bl	1ac2c <bt_le_filter_accept_list_add>
	if (err) { LOG_WRN("Failed to add address to filter accept list (err %d)", err); }
   13854:	4604      	mov	r4, r0
   13856:	2800      	cmp	r0, #0
   13858:	f040 82c8 	bne.w	13dec <TTPMS_BLE_init+0x6d4>

	err = bt_le_filter_accept_list_add(&IRL_bt_addr);
   1385c:	486f      	ldr	r0, [pc, #444]	; (13a1c <TTPMS_BLE_init+0x304>)
   1385e:	f007 f9e5 	bl	1ac2c <bt_le_filter_accept_list_add>
	if (err) { LOG_WRN("Failed to add address to filter accept list (err %d)", err); }
   13862:	4604      	mov	r4, r0
   13864:	2800      	cmp	r0, #0
   13866:	f040 82f3 	bne.w	13e50 <TTPMS_BLE_init+0x738>

	err = bt_le_filter_accept_list_add(&IRR_bt_addr);
   1386a:	486e      	ldr	r0, [pc, #440]	; (13a24 <TTPMS_BLE_init+0x30c>)
   1386c:	f007 f9de 	bl	1ac2c <bt_le_filter_accept_list_add>
	if (err) { LOG_WRN("Failed to add address to filter accept list (err %d)", err); }
   13870:	4604      	mov	r4, r0
   13872:	2800      	cmp	r0, #0
   13874:	f040 831e 	bne.w	13eb4 <TTPMS_BLE_init+0x79c>

	err = bt_le_filter_accept_list_add(&EFL_bt_addr);
   13878:	486c      	ldr	r0, [pc, #432]	; (13a2c <TTPMS_BLE_init+0x314>)
   1387a:	f007 f9d7 	bl	1ac2c <bt_le_filter_accept_list_add>
	if (err) { LOG_WRN("Failed to add address to filter accept list (err %d)", err); }
   1387e:	4604      	mov	r4, r0
   13880:	2800      	cmp	r0, #0
   13882:	f040 8349 	bne.w	13f18 <TTPMS_BLE_init+0x800>

	err = bt_le_filter_accept_list_add(&EFR_bt_addr);
   13886:	486b      	ldr	r0, [pc, #428]	; (13a34 <TTPMS_BLE_init+0x31c>)
   13888:	f007 f9d0 	bl	1ac2c <bt_le_filter_accept_list_add>
	if (err) { LOG_WRN("Failed to add address to filter accept list (err %d)", err); }
   1388c:	4604      	mov	r4, r0
   1388e:	2800      	cmp	r0, #0
   13890:	f040 8374 	bne.w	13f7c <TTPMS_BLE_init+0x864>

	err = bt_le_filter_accept_list_add(&ERL_bt_addr);
   13894:	4869      	ldr	r0, [pc, #420]	; (13a3c <TTPMS_BLE_init+0x324>)
   13896:	f007 f9c9 	bl	1ac2c <bt_le_filter_accept_list_add>
	if (err) { LOG_WRN("Failed to add address to filter accept list (err %d)", err); }
   1389a:	4604      	mov	r4, r0
   1389c:	2800      	cmp	r0, #0
   1389e:	f040 839f 	bne.w	13fe0 <TTPMS_BLE_init+0x8c8>

	err = bt_le_filter_accept_list_add(&ERR_bt_addr);
   138a2:	4868      	ldr	r0, [pc, #416]	; (13a44 <TTPMS_BLE_init+0x32c>)
   138a4:	f007 f9c2 	bl	1ac2c <bt_le_filter_accept_list_add>
	if (err) { LOG_WRN("Failed to add address to filter accept list (err %d)", err); }
   138a8:	4604      	mov	r4, r0
   138aa:	2800      	cmp	r0, #0
   138ac:	f040 83ca 	bne.w	14044 <TTPMS_BLE_init+0x92c>

	scan_param.interval = BT_GAP_SCAN_FAST_INTERVAL;
   138b0:	4866      	ldr	r0, [pc, #408]	; (13a4c <TTPMS_BLE_init+0x334>)
   138b2:	2360      	movs	r3, #96	; 0x60
   138b4:	8083      	strh	r3, [r0, #4]
	scan_param.window = BT_GAP_SCAN_FAST_WINDOW;
   138b6:	2330      	movs	r3, #48	; 0x30
   138b8:	80c3      	strh	r3, [r0, #6]
	err = bt_conn_le_create_auto(&scan_param, &conn_param);
   138ba:	4965      	ldr	r1, [pc, #404]	; (13a50 <TTPMS_BLE_init+0x338>)
   138bc:	f008 fe96 	bl	1c5ec <bt_conn_le_create_auto>
	if (err) {
   138c0:	4604      	mov	r4, r0
   138c2:	2800      	cmp	r0, #0
   138c4:	f040 83f4 	bne.w	140b0 <TTPMS_BLE_init+0x998>
		LOG_ERR("Failed to start automatically connecting (err %d)", err);
	}
}
   138c8:	b004      	add	sp, #16
   138ca:	bd10      	pop	{r4, pc}
		LOG_WRN("Invalid BT address (err %d)", err);
   138cc:	2008      	movs	r0, #8
   138ce:	f002 fa7b 	bl	15dc8 <z_log_msg_alloc>
   138d2:	2200      	movs	r2, #0
   138d4:	f36f 0200 	bfc	r2, #0, #1
   138d8:	f36f 0241 	bfc	r2, #1, #1
   138dc:	f36f 0282 	bfc	r2, #2, #1
   138e0:	f36f 02c5 	bfc	r2, #3, #3
   138e4:	2302      	movs	r3, #2
   138e6:	f363 1288 	bfi	r2, r3, #6, #3
   138ea:	230c      	movs	r3, #12
   138ec:	f363 2252 	bfi	r2, r3, #9, #10
   138f0:	f36f 42de 	bfc	r2, #19, #12
   138f4:	f36f 72df 	bfc	r2, #31, #1
   138f8:	4684      	mov	ip, r0
   138fa:	b198      	cbz	r0, 13924 <TTPMS_BLE_init+0x20c>
   138fc:	f110 0310 	adds.w	r3, r0, #16
   13900:	d002      	beq.n	13908 <TTPMS_BLE_init+0x1f0>
   13902:	4954      	ldr	r1, [pc, #336]	; (13a54 <TTPMS_BLE_init+0x33c>)
   13904:	6141      	str	r1, [r0, #20]
   13906:	6184      	str	r4, [r0, #24]
   13908:	b163      	cbz	r3, 13924 <TTPMS_BLE_init+0x20c>
   1390a:	2303      	movs	r3, #3
   1390c:	f88d 3004 	strb.w	r3, [sp, #4]
   13910:	2300      	movs	r3, #0
   13912:	f88d 3005 	strb.w	r3, [sp, #5]
   13916:	f88d 3006 	strb.w	r3, [sp, #6]
   1391a:	f88d 3007 	strb.w	r3, [sp, #7]
   1391e:	9801      	ldr	r0, [sp, #4]
   13920:	f8cc 0010 	str.w	r0, [ip, #16]
   13924:	2300      	movs	r3, #0
   13926:	4938      	ldr	r1, [pc, #224]	; (13a08 <TTPMS_BLE_init+0x2f0>)
   13928:	4660      	mov	r0, ip
   1392a:	f014 fa58 	bl	27dde <z_log_msg_finalize>
   1392e:	e6fe      	b.n	1372e <TTPMS_BLE_init+0x16>
		LOG_WRN("Creating new BT ID failed (err %d)", err);
   13930:	2008      	movs	r0, #8
   13932:	f002 fa49 	bl	15dc8 <z_log_msg_alloc>
   13936:	2200      	movs	r2, #0
   13938:	f36f 0200 	bfc	r2, #0, #1
   1393c:	f36f 0241 	bfc	r2, #1, #1
   13940:	f36f 0282 	bfc	r2, #2, #1
   13944:	f36f 02c5 	bfc	r2, #3, #3
   13948:	2302      	movs	r3, #2
   1394a:	f363 1288 	bfi	r2, r3, #6, #3
   1394e:	230c      	movs	r3, #12
   13950:	f363 2252 	bfi	r2, r3, #9, #10
   13954:	f36f 42de 	bfc	r2, #19, #12
   13958:	f36f 72df 	bfc	r2, #31, #1
   1395c:	4684      	mov	ip, r0
   1395e:	b198      	cbz	r0, 13988 <TTPMS_BLE_init+0x270>
   13960:	f110 0310 	adds.w	r3, r0, #16
   13964:	d002      	beq.n	1396c <TTPMS_BLE_init+0x254>
   13966:	493c      	ldr	r1, [pc, #240]	; (13a58 <TTPMS_BLE_init+0x340>)
   13968:	6141      	str	r1, [r0, #20]
   1396a:	6184      	str	r4, [r0, #24]
   1396c:	b163      	cbz	r3, 13988 <TTPMS_BLE_init+0x270>
   1396e:	2303      	movs	r3, #3
   13970:	f88d 3004 	strb.w	r3, [sp, #4]
   13974:	2300      	movs	r3, #0
   13976:	f88d 3005 	strb.w	r3, [sp, #5]
   1397a:	f88d 3006 	strb.w	r3, [sp, #6]
   1397e:	f88d 3007 	strb.w	r3, [sp, #7]
   13982:	9801      	ldr	r0, [sp, #4]
   13984:	f8cc 0010 	str.w	r0, [ip, #16]
   13988:	2300      	movs	r3, #0
   1398a:	491f      	ldr	r1, [pc, #124]	; (13a08 <TTPMS_BLE_init+0x2f0>)
   1398c:	4660      	mov	r0, ip
   1398e:	f014 fa26 	bl	27dde <z_log_msg_finalize>
   13992:	e6d5      	b.n	13740 <TTPMS_BLE_init+0x28>
		LOG_INF("Bluetooth initialized");
   13994:	2006      	movs	r0, #6
   13996:	f002 fa17 	bl	15dc8 <z_log_msg_alloc>
   1399a:	2200      	movs	r2, #0
   1399c:	f36f 0200 	bfc	r2, #0, #1
   139a0:	f36f 0241 	bfc	r2, #1, #1
   139a4:	f36f 0282 	bfc	r2, #2, #1
   139a8:	f36f 02c5 	bfc	r2, #3, #3
   139ac:	2303      	movs	r3, #3
   139ae:	f363 1288 	bfi	r2, r3, #6, #3
   139b2:	2308      	movs	r3, #8
   139b4:	f363 2252 	bfi	r2, r3, #9, #10
   139b8:	f36f 42de 	bfc	r2, #19, #12
   139bc:	f36f 72df 	bfc	r2, #31, #1
   139c0:	4684      	mov	ip, r0
   139c2:	b190      	cbz	r0, 139ea <TTPMS_BLE_init+0x2d2>
   139c4:	f110 0310 	adds.w	r3, r0, #16
   139c8:	d001      	beq.n	139ce <TTPMS_BLE_init+0x2b6>
   139ca:	4924      	ldr	r1, [pc, #144]	; (13a5c <TTPMS_BLE_init+0x344>)
   139cc:	6141      	str	r1, [r0, #20]
   139ce:	b163      	cbz	r3, 139ea <TTPMS_BLE_init+0x2d2>
   139d0:	2302      	movs	r3, #2
   139d2:	f88d 3004 	strb.w	r3, [sp, #4]
   139d6:	2300      	movs	r3, #0
   139d8:	f88d 3005 	strb.w	r3, [sp, #5]
   139dc:	f88d 3006 	strb.w	r3, [sp, #6]
   139e0:	f88d 3007 	strb.w	r3, [sp, #7]
   139e4:	9801      	ldr	r0, [sp, #4]
   139e6:	f8cc 0010 	str.w	r0, [ip, #16]
   139ea:	2300      	movs	r3, #0
   139ec:	4906      	ldr	r1, [pc, #24]	; (13a08 <TTPMS_BLE_init+0x2f0>)
   139ee:	4660      	mov	r0, ip
   139f0:	f014 f9f5 	bl	27dde <z_log_msg_finalize>
   139f4:	e6dc      	b.n	137b0 <TTPMS_BLE_init+0x98>
   139f6:	bf00      	nop
   139f8:	0002e2bc 	.word	0x0002e2bc
   139fc:	0002ea34 	.word	0x0002ea34
   13a00:	20007ab8 	.word	0x20007ab8
   13a04:	0002ea88 	.word	0x0002ea88
   13a08:	0002df40 	.word	0x0002df40
   13a0c:	20007af4 	.word	0x20007af4
   13a10:	0002eac0 	.word	0x0002eac0
   13a14:	20007aec 	.word	0x20007aec
   13a18:	0002ead4 	.word	0x0002ead4
   13a1c:	20007ae4 	.word	0x20007ae4
   13a20:	0002eae8 	.word	0x0002eae8
   13a24:	20007adc 	.word	0x20007adc
   13a28:	0002eafc 	.word	0x0002eafc
   13a2c:	20007ad4 	.word	0x20007ad4
   13a30:	0002eb10 	.word	0x0002eb10
   13a34:	20007acc 	.word	0x20007acc
   13a38:	0002eb24 	.word	0x0002eb24
   13a3c:	20007ac4 	.word	0x20007ac4
   13a40:	0002eb38 	.word	0x0002eb38
   13a44:	20007abc 	.word	0x20007abc
   13a48:	0002eb4c 	.word	0x0002eb4c
   13a4c:	20007afc 	.word	0x20007afc
   13a50:	200006d4 	.word	0x200006d4
   13a54:	0002ea48 	.word	0x0002ea48
   13a58:	0002ea64 	.word	0x0002ea64
   13a5c:	0002eaa8 	.word	0x0002eaa8
	if (err) { LOG_WRN("Invalid BT address (err %d)", err); }
   13a60:	2008      	movs	r0, #8
   13a62:	f002 f9b1 	bl	15dc8 <z_log_msg_alloc>
   13a66:	2200      	movs	r2, #0
   13a68:	f36f 0200 	bfc	r2, #0, #1
   13a6c:	f36f 0241 	bfc	r2, #1, #1
   13a70:	f36f 0282 	bfc	r2, #2, #1
   13a74:	f36f 02c5 	bfc	r2, #3, #3
   13a78:	2302      	movs	r3, #2
   13a7a:	f363 1288 	bfi	r2, r3, #6, #3
   13a7e:	230c      	movs	r3, #12
   13a80:	f363 2252 	bfi	r2, r3, #9, #10
   13a84:	f36f 42de 	bfc	r2, #19, #12
   13a88:	f36f 72df 	bfc	r2, #31, #1
   13a8c:	4684      	mov	ip, r0
   13a8e:	b198      	cbz	r0, 13ab8 <TTPMS_BLE_init+0x3a0>
   13a90:	f110 0310 	adds.w	r3, r0, #16
   13a94:	d002      	beq.n	13a9c <TTPMS_BLE_init+0x384>
   13a96:	49ba      	ldr	r1, [pc, #744]	; (13d80 <TTPMS_BLE_init+0x668>)
   13a98:	6141      	str	r1, [r0, #20]
   13a9a:	6184      	str	r4, [r0, #24]
   13a9c:	b163      	cbz	r3, 13ab8 <TTPMS_BLE_init+0x3a0>
   13a9e:	2303      	movs	r3, #3
   13aa0:	f88d 3004 	strb.w	r3, [sp, #4]
   13aa4:	2300      	movs	r3, #0
   13aa6:	f88d 3005 	strb.w	r3, [sp, #5]
   13aaa:	f88d 3006 	strb.w	r3, [sp, #6]
   13aae:	f88d 3007 	strb.w	r3, [sp, #7]
   13ab2:	9801      	ldr	r0, [sp, #4]
   13ab4:	f8cc 0010 	str.w	r0, [ip, #16]
   13ab8:	2300      	movs	r3, #0
   13aba:	49b2      	ldr	r1, [pc, #712]	; (13d84 <TTPMS_BLE_init+0x66c>)
   13abc:	4660      	mov	r0, ip
   13abe:	f014 f98e 	bl	27dde <z_log_msg_finalize>
   13ac2:	e67e      	b.n	137c2 <TTPMS_BLE_init+0xaa>
	if (err) { LOG_WRN("Invalid BT address (err %d)", err); }
   13ac4:	2008      	movs	r0, #8
   13ac6:	f002 f97f 	bl	15dc8 <z_log_msg_alloc>
   13aca:	2200      	movs	r2, #0
   13acc:	f36f 0200 	bfc	r2, #0, #1
   13ad0:	f36f 0241 	bfc	r2, #1, #1
   13ad4:	f36f 0282 	bfc	r2, #2, #1
   13ad8:	f36f 02c5 	bfc	r2, #3, #3
   13adc:	2302      	movs	r3, #2
   13ade:	f363 1288 	bfi	r2, r3, #6, #3
   13ae2:	230c      	movs	r3, #12
   13ae4:	f363 2252 	bfi	r2, r3, #9, #10
   13ae8:	f36f 42de 	bfc	r2, #19, #12
   13aec:	f36f 72df 	bfc	r2, #31, #1
   13af0:	4684      	mov	ip, r0
   13af2:	b198      	cbz	r0, 13b1c <TTPMS_BLE_init+0x404>
   13af4:	f110 0310 	adds.w	r3, r0, #16
   13af8:	d002      	beq.n	13b00 <TTPMS_BLE_init+0x3e8>
   13afa:	49a1      	ldr	r1, [pc, #644]	; (13d80 <TTPMS_BLE_init+0x668>)
   13afc:	6141      	str	r1, [r0, #20]
   13afe:	6184      	str	r4, [r0, #24]
   13b00:	b163      	cbz	r3, 13b1c <TTPMS_BLE_init+0x404>
   13b02:	2303      	movs	r3, #3
   13b04:	f88d 3004 	strb.w	r3, [sp, #4]
   13b08:	2300      	movs	r3, #0
   13b0a:	f88d 3005 	strb.w	r3, [sp, #5]
   13b0e:	f88d 3006 	strb.w	r3, [sp, #6]
   13b12:	f88d 3007 	strb.w	r3, [sp, #7]
   13b16:	9801      	ldr	r0, [sp, #4]
   13b18:	f8cc 0010 	str.w	r0, [ip, #16]
   13b1c:	2300      	movs	r3, #0
   13b1e:	4999      	ldr	r1, [pc, #612]	; (13d84 <TTPMS_BLE_init+0x66c>)
   13b20:	4660      	mov	r0, ip
   13b22:	f014 f95c 	bl	27dde <z_log_msg_finalize>
   13b26:	e655      	b.n	137d4 <TTPMS_BLE_init+0xbc>
	if (err) { LOG_WRN("Invalid BT address (err %d)", err); }
   13b28:	2008      	movs	r0, #8
   13b2a:	f002 f94d 	bl	15dc8 <z_log_msg_alloc>
   13b2e:	2200      	movs	r2, #0
   13b30:	f36f 0200 	bfc	r2, #0, #1
   13b34:	f36f 0241 	bfc	r2, #1, #1
   13b38:	f36f 0282 	bfc	r2, #2, #1
   13b3c:	f36f 02c5 	bfc	r2, #3, #3
   13b40:	2302      	movs	r3, #2
   13b42:	f363 1288 	bfi	r2, r3, #6, #3
   13b46:	230c      	movs	r3, #12
   13b48:	f363 2252 	bfi	r2, r3, #9, #10
   13b4c:	f36f 42de 	bfc	r2, #19, #12
   13b50:	f36f 72df 	bfc	r2, #31, #1
   13b54:	4684      	mov	ip, r0
   13b56:	b198      	cbz	r0, 13b80 <TTPMS_BLE_init+0x468>
   13b58:	f110 0310 	adds.w	r3, r0, #16
   13b5c:	d002      	beq.n	13b64 <TTPMS_BLE_init+0x44c>
   13b5e:	4988      	ldr	r1, [pc, #544]	; (13d80 <TTPMS_BLE_init+0x668>)
   13b60:	6141      	str	r1, [r0, #20]
   13b62:	6184      	str	r4, [r0, #24]
   13b64:	b163      	cbz	r3, 13b80 <TTPMS_BLE_init+0x468>
   13b66:	2303      	movs	r3, #3
   13b68:	f88d 3004 	strb.w	r3, [sp, #4]
   13b6c:	2300      	movs	r3, #0
   13b6e:	f88d 3005 	strb.w	r3, [sp, #5]
   13b72:	f88d 3006 	strb.w	r3, [sp, #6]
   13b76:	f88d 3007 	strb.w	r3, [sp, #7]
   13b7a:	9801      	ldr	r0, [sp, #4]
   13b7c:	f8cc 0010 	str.w	r0, [ip, #16]
   13b80:	2300      	movs	r3, #0
   13b82:	4980      	ldr	r1, [pc, #512]	; (13d84 <TTPMS_BLE_init+0x66c>)
   13b84:	4660      	mov	r0, ip
   13b86:	f014 f92a 	bl	27dde <z_log_msg_finalize>
   13b8a:	e62c      	b.n	137e6 <TTPMS_BLE_init+0xce>
	if (err) { LOG_WRN("Invalid BT address (err %d)", err); }
   13b8c:	2008      	movs	r0, #8
   13b8e:	f002 f91b 	bl	15dc8 <z_log_msg_alloc>
   13b92:	2200      	movs	r2, #0
   13b94:	f36f 0200 	bfc	r2, #0, #1
   13b98:	f36f 0241 	bfc	r2, #1, #1
   13b9c:	f36f 0282 	bfc	r2, #2, #1
   13ba0:	f36f 02c5 	bfc	r2, #3, #3
   13ba4:	2302      	movs	r3, #2
   13ba6:	f363 1288 	bfi	r2, r3, #6, #3
   13baa:	230c      	movs	r3, #12
   13bac:	f363 2252 	bfi	r2, r3, #9, #10
   13bb0:	f36f 42de 	bfc	r2, #19, #12
   13bb4:	f36f 72df 	bfc	r2, #31, #1
   13bb8:	4684      	mov	ip, r0
   13bba:	b198      	cbz	r0, 13be4 <TTPMS_BLE_init+0x4cc>
   13bbc:	f110 0310 	adds.w	r3, r0, #16
   13bc0:	d002      	beq.n	13bc8 <TTPMS_BLE_init+0x4b0>
   13bc2:	496f      	ldr	r1, [pc, #444]	; (13d80 <TTPMS_BLE_init+0x668>)
   13bc4:	6141      	str	r1, [r0, #20]
   13bc6:	6184      	str	r4, [r0, #24]
   13bc8:	b163      	cbz	r3, 13be4 <TTPMS_BLE_init+0x4cc>
   13bca:	2303      	movs	r3, #3
   13bcc:	f88d 3004 	strb.w	r3, [sp, #4]
   13bd0:	2300      	movs	r3, #0
   13bd2:	f88d 3005 	strb.w	r3, [sp, #5]
   13bd6:	f88d 3006 	strb.w	r3, [sp, #6]
   13bda:	f88d 3007 	strb.w	r3, [sp, #7]
   13bde:	9801      	ldr	r0, [sp, #4]
   13be0:	f8cc 0010 	str.w	r0, [ip, #16]
   13be4:	2300      	movs	r3, #0
   13be6:	4967      	ldr	r1, [pc, #412]	; (13d84 <TTPMS_BLE_init+0x66c>)
   13be8:	4660      	mov	r0, ip
   13bea:	f014 f8f8 	bl	27dde <z_log_msg_finalize>
   13bee:	e603      	b.n	137f8 <TTPMS_BLE_init+0xe0>
	if (err) { LOG_WRN("Invalid BT address (err %d)", err); }
   13bf0:	2008      	movs	r0, #8
   13bf2:	f002 f8e9 	bl	15dc8 <z_log_msg_alloc>
   13bf6:	2200      	movs	r2, #0
   13bf8:	f36f 0200 	bfc	r2, #0, #1
   13bfc:	f36f 0241 	bfc	r2, #1, #1
   13c00:	f36f 0282 	bfc	r2, #2, #1
   13c04:	f36f 02c5 	bfc	r2, #3, #3
   13c08:	2302      	movs	r3, #2
   13c0a:	f363 1288 	bfi	r2, r3, #6, #3
   13c0e:	230c      	movs	r3, #12
   13c10:	f363 2252 	bfi	r2, r3, #9, #10
   13c14:	f36f 42de 	bfc	r2, #19, #12
   13c18:	f36f 72df 	bfc	r2, #31, #1
   13c1c:	4684      	mov	ip, r0
   13c1e:	b198      	cbz	r0, 13c48 <TTPMS_BLE_init+0x530>
   13c20:	f110 0310 	adds.w	r3, r0, #16
   13c24:	d002      	beq.n	13c2c <TTPMS_BLE_init+0x514>
   13c26:	4956      	ldr	r1, [pc, #344]	; (13d80 <TTPMS_BLE_init+0x668>)
   13c28:	6141      	str	r1, [r0, #20]
   13c2a:	6184      	str	r4, [r0, #24]
   13c2c:	b163      	cbz	r3, 13c48 <TTPMS_BLE_init+0x530>
   13c2e:	2303      	movs	r3, #3
   13c30:	f88d 3004 	strb.w	r3, [sp, #4]
   13c34:	2300      	movs	r3, #0
   13c36:	f88d 3005 	strb.w	r3, [sp, #5]
   13c3a:	f88d 3006 	strb.w	r3, [sp, #6]
   13c3e:	f88d 3007 	strb.w	r3, [sp, #7]
   13c42:	9801      	ldr	r0, [sp, #4]
   13c44:	f8cc 0010 	str.w	r0, [ip, #16]
   13c48:	2300      	movs	r3, #0
   13c4a:	494e      	ldr	r1, [pc, #312]	; (13d84 <TTPMS_BLE_init+0x66c>)
   13c4c:	4660      	mov	r0, ip
   13c4e:	f014 f8c6 	bl	27dde <z_log_msg_finalize>
   13c52:	e5da      	b.n	1380a <TTPMS_BLE_init+0xf2>
	if (err) { LOG_WRN("Invalid BT address (err %d)", err); }
   13c54:	2008      	movs	r0, #8
   13c56:	f002 f8b7 	bl	15dc8 <z_log_msg_alloc>
   13c5a:	2200      	movs	r2, #0
   13c5c:	f36f 0200 	bfc	r2, #0, #1
   13c60:	f36f 0241 	bfc	r2, #1, #1
   13c64:	f36f 0282 	bfc	r2, #2, #1
   13c68:	f36f 02c5 	bfc	r2, #3, #3
   13c6c:	2302      	movs	r3, #2
   13c6e:	f363 1288 	bfi	r2, r3, #6, #3
   13c72:	230c      	movs	r3, #12
   13c74:	f363 2252 	bfi	r2, r3, #9, #10
   13c78:	f36f 42de 	bfc	r2, #19, #12
   13c7c:	f36f 72df 	bfc	r2, #31, #1
   13c80:	4684      	mov	ip, r0
   13c82:	b198      	cbz	r0, 13cac <TTPMS_BLE_init+0x594>
   13c84:	f110 0310 	adds.w	r3, r0, #16
   13c88:	d002      	beq.n	13c90 <TTPMS_BLE_init+0x578>
   13c8a:	493d      	ldr	r1, [pc, #244]	; (13d80 <TTPMS_BLE_init+0x668>)
   13c8c:	6141      	str	r1, [r0, #20]
   13c8e:	6184      	str	r4, [r0, #24]
   13c90:	b163      	cbz	r3, 13cac <TTPMS_BLE_init+0x594>
   13c92:	2303      	movs	r3, #3
   13c94:	f88d 3004 	strb.w	r3, [sp, #4]
   13c98:	2300      	movs	r3, #0
   13c9a:	f88d 3005 	strb.w	r3, [sp, #5]
   13c9e:	f88d 3006 	strb.w	r3, [sp, #6]
   13ca2:	f88d 3007 	strb.w	r3, [sp, #7]
   13ca6:	9801      	ldr	r0, [sp, #4]
   13ca8:	f8cc 0010 	str.w	r0, [ip, #16]
   13cac:	2300      	movs	r3, #0
   13cae:	4935      	ldr	r1, [pc, #212]	; (13d84 <TTPMS_BLE_init+0x66c>)
   13cb0:	4660      	mov	r0, ip
   13cb2:	f014 f894 	bl	27dde <z_log_msg_finalize>
   13cb6:	e5b1      	b.n	1381c <TTPMS_BLE_init+0x104>
	if (err) { LOG_WRN("Invalid BT address (err %d)", err); }
   13cb8:	2008      	movs	r0, #8
   13cba:	f002 f885 	bl	15dc8 <z_log_msg_alloc>
   13cbe:	2200      	movs	r2, #0
   13cc0:	f36f 0200 	bfc	r2, #0, #1
   13cc4:	f36f 0241 	bfc	r2, #1, #1
   13cc8:	f36f 0282 	bfc	r2, #2, #1
   13ccc:	f36f 02c5 	bfc	r2, #3, #3
   13cd0:	2302      	movs	r3, #2
   13cd2:	f363 1288 	bfi	r2, r3, #6, #3
   13cd6:	230c      	movs	r3, #12
   13cd8:	f363 2252 	bfi	r2, r3, #9, #10
   13cdc:	f36f 42de 	bfc	r2, #19, #12
   13ce0:	f36f 72df 	bfc	r2, #31, #1
   13ce4:	4684      	mov	ip, r0
   13ce6:	b198      	cbz	r0, 13d10 <TTPMS_BLE_init+0x5f8>
   13ce8:	f110 0310 	adds.w	r3, r0, #16
   13cec:	d002      	beq.n	13cf4 <TTPMS_BLE_init+0x5dc>
   13cee:	4924      	ldr	r1, [pc, #144]	; (13d80 <TTPMS_BLE_init+0x668>)
   13cf0:	6141      	str	r1, [r0, #20]
   13cf2:	6184      	str	r4, [r0, #24]
   13cf4:	b163      	cbz	r3, 13d10 <TTPMS_BLE_init+0x5f8>
   13cf6:	2303      	movs	r3, #3
   13cf8:	f88d 3004 	strb.w	r3, [sp, #4]
   13cfc:	2300      	movs	r3, #0
   13cfe:	f88d 3005 	strb.w	r3, [sp, #5]
   13d02:	f88d 3006 	strb.w	r3, [sp, #6]
   13d06:	f88d 3007 	strb.w	r3, [sp, #7]
   13d0a:	9801      	ldr	r0, [sp, #4]
   13d0c:	f8cc 0010 	str.w	r0, [ip, #16]
   13d10:	2300      	movs	r3, #0
   13d12:	491c      	ldr	r1, [pc, #112]	; (13d84 <TTPMS_BLE_init+0x66c>)
   13d14:	4660      	mov	r0, ip
   13d16:	f014 f862 	bl	27dde <z_log_msg_finalize>
   13d1a:	e588      	b.n	1382e <TTPMS_BLE_init+0x116>
	if (err) { LOG_WRN("Invalid BT address (err %d)", err); }
   13d1c:	2008      	movs	r0, #8
   13d1e:	f002 f853 	bl	15dc8 <z_log_msg_alloc>
   13d22:	2200      	movs	r2, #0
   13d24:	f36f 0200 	bfc	r2, #0, #1
   13d28:	f36f 0241 	bfc	r2, #1, #1
   13d2c:	f36f 0282 	bfc	r2, #2, #1
   13d30:	f36f 02c5 	bfc	r2, #3, #3
   13d34:	2302      	movs	r3, #2
   13d36:	f363 1288 	bfi	r2, r3, #6, #3
   13d3a:	230c      	movs	r3, #12
   13d3c:	f363 2252 	bfi	r2, r3, #9, #10
   13d40:	f36f 42de 	bfc	r2, #19, #12
   13d44:	f36f 72df 	bfc	r2, #31, #1
   13d48:	4684      	mov	ip, r0
   13d4a:	b198      	cbz	r0, 13d74 <TTPMS_BLE_init+0x65c>
   13d4c:	f110 0310 	adds.w	r3, r0, #16
   13d50:	d002      	beq.n	13d58 <TTPMS_BLE_init+0x640>
   13d52:	490b      	ldr	r1, [pc, #44]	; (13d80 <TTPMS_BLE_init+0x668>)
   13d54:	6141      	str	r1, [r0, #20]
   13d56:	6184      	str	r4, [r0, #24]
   13d58:	b163      	cbz	r3, 13d74 <TTPMS_BLE_init+0x65c>
   13d5a:	2303      	movs	r3, #3
   13d5c:	f88d 3004 	strb.w	r3, [sp, #4]
   13d60:	2300      	movs	r3, #0
   13d62:	f88d 3005 	strb.w	r3, [sp, #5]
   13d66:	f88d 3006 	strb.w	r3, [sp, #6]
   13d6a:	f88d 3007 	strb.w	r3, [sp, #7]
   13d6e:	9801      	ldr	r0, [sp, #4]
   13d70:	f8cc 0010 	str.w	r0, [ip, #16]
   13d74:	2300      	movs	r3, #0
   13d76:	4903      	ldr	r1, [pc, #12]	; (13d84 <TTPMS_BLE_init+0x66c>)
   13d78:	4660      	mov	r0, ip
   13d7a:	f014 f830 	bl	27dde <z_log_msg_finalize>
   13d7e:	e55f      	b.n	13840 <TTPMS_BLE_init+0x128>
   13d80:	0002ea48 	.word	0x0002ea48
   13d84:	0002df40 	.word	0x0002df40
	if (err) { LOG_WRN("Failed to add address to filter accept list (err %d)", err); }
   13d88:	2008      	movs	r0, #8
   13d8a:	f002 f81d 	bl	15dc8 <z_log_msg_alloc>
   13d8e:	2200      	movs	r2, #0
   13d90:	f36f 0200 	bfc	r2, #0, #1
   13d94:	f36f 0241 	bfc	r2, #1, #1
   13d98:	f36f 0282 	bfc	r2, #2, #1
   13d9c:	f36f 02c5 	bfc	r2, #3, #3
   13da0:	2302      	movs	r3, #2
   13da2:	f363 1288 	bfi	r2, r3, #6, #3
   13da6:	230c      	movs	r3, #12
   13da8:	f363 2252 	bfi	r2, r3, #9, #10
   13dac:	f36f 42de 	bfc	r2, #19, #12
   13db0:	f36f 72df 	bfc	r2, #31, #1
   13db4:	4684      	mov	ip, r0
   13db6:	b198      	cbz	r0, 13de0 <TTPMS_BLE_init+0x6c8>
   13db8:	f110 0310 	adds.w	r3, r0, #16
   13dbc:	d002      	beq.n	13dc4 <TTPMS_BLE_init+0x6ac>
   13dbe:	49ba      	ldr	r1, [pc, #744]	; (140a8 <TTPMS_BLE_init+0x990>)
   13dc0:	6141      	str	r1, [r0, #20]
   13dc2:	6184      	str	r4, [r0, #24]
   13dc4:	b163      	cbz	r3, 13de0 <TTPMS_BLE_init+0x6c8>
   13dc6:	2303      	movs	r3, #3
   13dc8:	f88d 3004 	strb.w	r3, [sp, #4]
   13dcc:	2300      	movs	r3, #0
   13dce:	f88d 3005 	strb.w	r3, [sp, #5]
   13dd2:	f88d 3006 	strb.w	r3, [sp, #6]
   13dd6:	f88d 3007 	strb.w	r3, [sp, #7]
   13dda:	9801      	ldr	r0, [sp, #4]
   13ddc:	f8cc 0010 	str.w	r0, [ip, #16]
   13de0:	2300      	movs	r3, #0
   13de2:	49b2      	ldr	r1, [pc, #712]	; (140ac <TTPMS_BLE_init+0x994>)
   13de4:	4660      	mov	r0, ip
   13de6:	f013 fffa 	bl	27dde <z_log_msg_finalize>
   13dea:	e530      	b.n	1384e <TTPMS_BLE_init+0x136>
	if (err) { LOG_WRN("Failed to add address to filter accept list (err %d)", err); }
   13dec:	2008      	movs	r0, #8
   13dee:	f001 ffeb 	bl	15dc8 <z_log_msg_alloc>
   13df2:	2200      	movs	r2, #0
   13df4:	f36f 0200 	bfc	r2, #0, #1
   13df8:	f36f 0241 	bfc	r2, #1, #1
   13dfc:	f36f 0282 	bfc	r2, #2, #1
   13e00:	f36f 02c5 	bfc	r2, #3, #3
   13e04:	2302      	movs	r3, #2
   13e06:	f363 1288 	bfi	r2, r3, #6, #3
   13e0a:	230c      	movs	r3, #12
   13e0c:	f363 2252 	bfi	r2, r3, #9, #10
   13e10:	f36f 42de 	bfc	r2, #19, #12
   13e14:	f36f 72df 	bfc	r2, #31, #1
   13e18:	4684      	mov	ip, r0
   13e1a:	b198      	cbz	r0, 13e44 <TTPMS_BLE_init+0x72c>
   13e1c:	f110 0310 	adds.w	r3, r0, #16
   13e20:	d002      	beq.n	13e28 <TTPMS_BLE_init+0x710>
   13e22:	49a1      	ldr	r1, [pc, #644]	; (140a8 <TTPMS_BLE_init+0x990>)
   13e24:	6141      	str	r1, [r0, #20]
   13e26:	6184      	str	r4, [r0, #24]
   13e28:	b163      	cbz	r3, 13e44 <TTPMS_BLE_init+0x72c>
   13e2a:	2303      	movs	r3, #3
   13e2c:	f88d 3004 	strb.w	r3, [sp, #4]
   13e30:	2300      	movs	r3, #0
   13e32:	f88d 3005 	strb.w	r3, [sp, #5]
   13e36:	f88d 3006 	strb.w	r3, [sp, #6]
   13e3a:	f88d 3007 	strb.w	r3, [sp, #7]
   13e3e:	9801      	ldr	r0, [sp, #4]
   13e40:	f8cc 0010 	str.w	r0, [ip, #16]
   13e44:	2300      	movs	r3, #0
   13e46:	4999      	ldr	r1, [pc, #612]	; (140ac <TTPMS_BLE_init+0x994>)
   13e48:	4660      	mov	r0, ip
   13e4a:	f013 ffc8 	bl	27dde <z_log_msg_finalize>
   13e4e:	e505      	b.n	1385c <TTPMS_BLE_init+0x144>
	if (err) { LOG_WRN("Failed to add address to filter accept list (err %d)", err); }
   13e50:	2008      	movs	r0, #8
   13e52:	f001 ffb9 	bl	15dc8 <z_log_msg_alloc>
   13e56:	2200      	movs	r2, #0
   13e58:	f36f 0200 	bfc	r2, #0, #1
   13e5c:	f36f 0241 	bfc	r2, #1, #1
   13e60:	f36f 0282 	bfc	r2, #2, #1
   13e64:	f36f 02c5 	bfc	r2, #3, #3
   13e68:	2302      	movs	r3, #2
   13e6a:	f363 1288 	bfi	r2, r3, #6, #3
   13e6e:	230c      	movs	r3, #12
   13e70:	f363 2252 	bfi	r2, r3, #9, #10
   13e74:	f36f 42de 	bfc	r2, #19, #12
   13e78:	f36f 72df 	bfc	r2, #31, #1
   13e7c:	4684      	mov	ip, r0
   13e7e:	b198      	cbz	r0, 13ea8 <TTPMS_BLE_init+0x790>
   13e80:	f110 0310 	adds.w	r3, r0, #16
   13e84:	d002      	beq.n	13e8c <TTPMS_BLE_init+0x774>
   13e86:	4988      	ldr	r1, [pc, #544]	; (140a8 <TTPMS_BLE_init+0x990>)
   13e88:	6141      	str	r1, [r0, #20]
   13e8a:	6184      	str	r4, [r0, #24]
   13e8c:	b163      	cbz	r3, 13ea8 <TTPMS_BLE_init+0x790>
   13e8e:	2303      	movs	r3, #3
   13e90:	f88d 3004 	strb.w	r3, [sp, #4]
   13e94:	2300      	movs	r3, #0
   13e96:	f88d 3005 	strb.w	r3, [sp, #5]
   13e9a:	f88d 3006 	strb.w	r3, [sp, #6]
   13e9e:	f88d 3007 	strb.w	r3, [sp, #7]
   13ea2:	9801      	ldr	r0, [sp, #4]
   13ea4:	f8cc 0010 	str.w	r0, [ip, #16]
   13ea8:	2300      	movs	r3, #0
   13eaa:	4980      	ldr	r1, [pc, #512]	; (140ac <TTPMS_BLE_init+0x994>)
   13eac:	4660      	mov	r0, ip
   13eae:	f013 ff96 	bl	27dde <z_log_msg_finalize>
   13eb2:	e4da      	b.n	1386a <TTPMS_BLE_init+0x152>
	if (err) { LOG_WRN("Failed to add address to filter accept list (err %d)", err); }
   13eb4:	2008      	movs	r0, #8
   13eb6:	f001 ff87 	bl	15dc8 <z_log_msg_alloc>
   13eba:	2200      	movs	r2, #0
   13ebc:	f36f 0200 	bfc	r2, #0, #1
   13ec0:	f36f 0241 	bfc	r2, #1, #1
   13ec4:	f36f 0282 	bfc	r2, #2, #1
   13ec8:	f36f 02c5 	bfc	r2, #3, #3
   13ecc:	2302      	movs	r3, #2
   13ece:	f363 1288 	bfi	r2, r3, #6, #3
   13ed2:	230c      	movs	r3, #12
   13ed4:	f363 2252 	bfi	r2, r3, #9, #10
   13ed8:	f36f 42de 	bfc	r2, #19, #12
   13edc:	f36f 72df 	bfc	r2, #31, #1
   13ee0:	4684      	mov	ip, r0
   13ee2:	b198      	cbz	r0, 13f0c <TTPMS_BLE_init+0x7f4>
   13ee4:	f110 0310 	adds.w	r3, r0, #16
   13ee8:	d002      	beq.n	13ef0 <TTPMS_BLE_init+0x7d8>
   13eea:	496f      	ldr	r1, [pc, #444]	; (140a8 <TTPMS_BLE_init+0x990>)
   13eec:	6141      	str	r1, [r0, #20]
   13eee:	6184      	str	r4, [r0, #24]
   13ef0:	b163      	cbz	r3, 13f0c <TTPMS_BLE_init+0x7f4>
   13ef2:	2303      	movs	r3, #3
   13ef4:	f88d 3004 	strb.w	r3, [sp, #4]
   13ef8:	2300      	movs	r3, #0
   13efa:	f88d 3005 	strb.w	r3, [sp, #5]
   13efe:	f88d 3006 	strb.w	r3, [sp, #6]
   13f02:	f88d 3007 	strb.w	r3, [sp, #7]
   13f06:	9801      	ldr	r0, [sp, #4]
   13f08:	f8cc 0010 	str.w	r0, [ip, #16]
   13f0c:	2300      	movs	r3, #0
   13f0e:	4967      	ldr	r1, [pc, #412]	; (140ac <TTPMS_BLE_init+0x994>)
   13f10:	4660      	mov	r0, ip
   13f12:	f013 ff64 	bl	27dde <z_log_msg_finalize>
   13f16:	e4af      	b.n	13878 <TTPMS_BLE_init+0x160>
	if (err) { LOG_WRN("Failed to add address to filter accept list (err %d)", err); }
   13f18:	2008      	movs	r0, #8
   13f1a:	f001 ff55 	bl	15dc8 <z_log_msg_alloc>
   13f1e:	2200      	movs	r2, #0
   13f20:	f36f 0200 	bfc	r2, #0, #1
   13f24:	f36f 0241 	bfc	r2, #1, #1
   13f28:	f36f 0282 	bfc	r2, #2, #1
   13f2c:	f36f 02c5 	bfc	r2, #3, #3
   13f30:	2302      	movs	r3, #2
   13f32:	f363 1288 	bfi	r2, r3, #6, #3
   13f36:	230c      	movs	r3, #12
   13f38:	f363 2252 	bfi	r2, r3, #9, #10
   13f3c:	f36f 42de 	bfc	r2, #19, #12
   13f40:	f36f 72df 	bfc	r2, #31, #1
   13f44:	4684      	mov	ip, r0
   13f46:	b198      	cbz	r0, 13f70 <TTPMS_BLE_init+0x858>
   13f48:	f110 0310 	adds.w	r3, r0, #16
   13f4c:	d002      	beq.n	13f54 <TTPMS_BLE_init+0x83c>
   13f4e:	4956      	ldr	r1, [pc, #344]	; (140a8 <TTPMS_BLE_init+0x990>)
   13f50:	6141      	str	r1, [r0, #20]
   13f52:	6184      	str	r4, [r0, #24]
   13f54:	b163      	cbz	r3, 13f70 <TTPMS_BLE_init+0x858>
   13f56:	2303      	movs	r3, #3
   13f58:	f88d 3004 	strb.w	r3, [sp, #4]
   13f5c:	2300      	movs	r3, #0
   13f5e:	f88d 3005 	strb.w	r3, [sp, #5]
   13f62:	f88d 3006 	strb.w	r3, [sp, #6]
   13f66:	f88d 3007 	strb.w	r3, [sp, #7]
   13f6a:	9801      	ldr	r0, [sp, #4]
   13f6c:	f8cc 0010 	str.w	r0, [ip, #16]
   13f70:	2300      	movs	r3, #0
   13f72:	494e      	ldr	r1, [pc, #312]	; (140ac <TTPMS_BLE_init+0x994>)
   13f74:	4660      	mov	r0, ip
   13f76:	f013 ff32 	bl	27dde <z_log_msg_finalize>
   13f7a:	e484      	b.n	13886 <TTPMS_BLE_init+0x16e>
	if (err) { LOG_WRN("Failed to add address to filter accept list (err %d)", err); }
   13f7c:	2008      	movs	r0, #8
   13f7e:	f001 ff23 	bl	15dc8 <z_log_msg_alloc>
   13f82:	2200      	movs	r2, #0
   13f84:	f36f 0200 	bfc	r2, #0, #1
   13f88:	f36f 0241 	bfc	r2, #1, #1
   13f8c:	f36f 0282 	bfc	r2, #2, #1
   13f90:	f36f 02c5 	bfc	r2, #3, #3
   13f94:	2302      	movs	r3, #2
   13f96:	f363 1288 	bfi	r2, r3, #6, #3
   13f9a:	230c      	movs	r3, #12
   13f9c:	f363 2252 	bfi	r2, r3, #9, #10
   13fa0:	f36f 42de 	bfc	r2, #19, #12
   13fa4:	f36f 72df 	bfc	r2, #31, #1
   13fa8:	4684      	mov	ip, r0
   13faa:	b198      	cbz	r0, 13fd4 <TTPMS_BLE_init+0x8bc>
   13fac:	f110 0310 	adds.w	r3, r0, #16
   13fb0:	d002      	beq.n	13fb8 <TTPMS_BLE_init+0x8a0>
   13fb2:	493d      	ldr	r1, [pc, #244]	; (140a8 <TTPMS_BLE_init+0x990>)
   13fb4:	6141      	str	r1, [r0, #20]
   13fb6:	6184      	str	r4, [r0, #24]
   13fb8:	b163      	cbz	r3, 13fd4 <TTPMS_BLE_init+0x8bc>
   13fba:	2303      	movs	r3, #3
   13fbc:	f88d 3004 	strb.w	r3, [sp, #4]
   13fc0:	2300      	movs	r3, #0
   13fc2:	f88d 3005 	strb.w	r3, [sp, #5]
   13fc6:	f88d 3006 	strb.w	r3, [sp, #6]
   13fca:	f88d 3007 	strb.w	r3, [sp, #7]
   13fce:	9801      	ldr	r0, [sp, #4]
   13fd0:	f8cc 0010 	str.w	r0, [ip, #16]
   13fd4:	2300      	movs	r3, #0
   13fd6:	4935      	ldr	r1, [pc, #212]	; (140ac <TTPMS_BLE_init+0x994>)
   13fd8:	4660      	mov	r0, ip
   13fda:	f013 ff00 	bl	27dde <z_log_msg_finalize>
   13fde:	e459      	b.n	13894 <TTPMS_BLE_init+0x17c>
	if (err) { LOG_WRN("Failed to add address to filter accept list (err %d)", err); }
   13fe0:	2008      	movs	r0, #8
   13fe2:	f001 fef1 	bl	15dc8 <z_log_msg_alloc>
   13fe6:	2200      	movs	r2, #0
   13fe8:	f36f 0200 	bfc	r2, #0, #1
   13fec:	f36f 0241 	bfc	r2, #1, #1
   13ff0:	f36f 0282 	bfc	r2, #2, #1
   13ff4:	f36f 02c5 	bfc	r2, #3, #3
   13ff8:	2302      	movs	r3, #2
   13ffa:	f363 1288 	bfi	r2, r3, #6, #3
   13ffe:	230c      	movs	r3, #12
   14000:	f363 2252 	bfi	r2, r3, #9, #10
   14004:	f36f 42de 	bfc	r2, #19, #12
   14008:	f36f 72df 	bfc	r2, #31, #1
   1400c:	4684      	mov	ip, r0
   1400e:	b198      	cbz	r0, 14038 <TTPMS_BLE_init+0x920>
   14010:	f110 0310 	adds.w	r3, r0, #16
   14014:	d002      	beq.n	1401c <TTPMS_BLE_init+0x904>
   14016:	4924      	ldr	r1, [pc, #144]	; (140a8 <TTPMS_BLE_init+0x990>)
   14018:	6141      	str	r1, [r0, #20]
   1401a:	6184      	str	r4, [r0, #24]
   1401c:	b163      	cbz	r3, 14038 <TTPMS_BLE_init+0x920>
   1401e:	2303      	movs	r3, #3
   14020:	f88d 3004 	strb.w	r3, [sp, #4]
   14024:	2300      	movs	r3, #0
   14026:	f88d 3005 	strb.w	r3, [sp, #5]
   1402a:	f88d 3006 	strb.w	r3, [sp, #6]
   1402e:	f88d 3007 	strb.w	r3, [sp, #7]
   14032:	9801      	ldr	r0, [sp, #4]
   14034:	f8cc 0010 	str.w	r0, [ip, #16]
   14038:	2300      	movs	r3, #0
   1403a:	491c      	ldr	r1, [pc, #112]	; (140ac <TTPMS_BLE_init+0x994>)
   1403c:	4660      	mov	r0, ip
   1403e:	f013 fece 	bl	27dde <z_log_msg_finalize>
   14042:	e42e      	b.n	138a2 <TTPMS_BLE_init+0x18a>
	if (err) { LOG_WRN("Failed to add address to filter accept list (err %d)", err); }
   14044:	2008      	movs	r0, #8
   14046:	f001 febf 	bl	15dc8 <z_log_msg_alloc>
   1404a:	2200      	movs	r2, #0
   1404c:	f36f 0200 	bfc	r2, #0, #1
   14050:	f36f 0241 	bfc	r2, #1, #1
   14054:	f36f 0282 	bfc	r2, #2, #1
   14058:	f36f 02c5 	bfc	r2, #3, #3
   1405c:	2302      	movs	r3, #2
   1405e:	f363 1288 	bfi	r2, r3, #6, #3
   14062:	230c      	movs	r3, #12
   14064:	f363 2252 	bfi	r2, r3, #9, #10
   14068:	f36f 42de 	bfc	r2, #19, #12
   1406c:	f36f 72df 	bfc	r2, #31, #1
   14070:	4684      	mov	ip, r0
   14072:	b198      	cbz	r0, 1409c <TTPMS_BLE_init+0x984>
   14074:	f110 0310 	adds.w	r3, r0, #16
   14078:	d002      	beq.n	14080 <TTPMS_BLE_init+0x968>
   1407a:	490b      	ldr	r1, [pc, #44]	; (140a8 <TTPMS_BLE_init+0x990>)
   1407c:	6141      	str	r1, [r0, #20]
   1407e:	6184      	str	r4, [r0, #24]
   14080:	b163      	cbz	r3, 1409c <TTPMS_BLE_init+0x984>
   14082:	2303      	movs	r3, #3
   14084:	f88d 3004 	strb.w	r3, [sp, #4]
   14088:	2300      	movs	r3, #0
   1408a:	f88d 3005 	strb.w	r3, [sp, #5]
   1408e:	f88d 3006 	strb.w	r3, [sp, #6]
   14092:	f88d 3007 	strb.w	r3, [sp, #7]
   14096:	9801      	ldr	r0, [sp, #4]
   14098:	f8cc 0010 	str.w	r0, [ip, #16]
   1409c:	2300      	movs	r3, #0
   1409e:	4903      	ldr	r1, [pc, #12]	; (140ac <TTPMS_BLE_init+0x994>)
   140a0:	4660      	mov	r0, ip
   140a2:	f013 fe9c 	bl	27dde <z_log_msg_finalize>
   140a6:	e403      	b.n	138b0 <TTPMS_BLE_init+0x198>
   140a8:	0002eb60 	.word	0x0002eb60
   140ac:	0002df40 	.word	0x0002df40
		LOG_ERR("Failed to start automatically connecting (err %d)", err);
   140b0:	2008      	movs	r0, #8
   140b2:	f001 fe89 	bl	15dc8 <z_log_msg_alloc>
   140b6:	2200      	movs	r2, #0
   140b8:	f36f 0200 	bfc	r2, #0, #1
   140bc:	f36f 0241 	bfc	r2, #1, #1
   140c0:	f36f 0282 	bfc	r2, #2, #1
   140c4:	f36f 02c5 	bfc	r2, #3, #3
   140c8:	2301      	movs	r3, #1
   140ca:	f363 1288 	bfi	r2, r3, #6, #3
   140ce:	230c      	movs	r3, #12
   140d0:	f363 2252 	bfi	r2, r3, #9, #10
   140d4:	f36f 42de 	bfc	r2, #19, #12
   140d8:	f36f 72df 	bfc	r2, #31, #1
   140dc:	4684      	mov	ip, r0
   140de:	b198      	cbz	r0, 14108 <TTPMS_BLE_init+0x9f0>
   140e0:	f110 0310 	adds.w	r3, r0, #16
   140e4:	d002      	beq.n	140ec <TTPMS_BLE_init+0x9d4>
   140e6:	490c      	ldr	r1, [pc, #48]	; (14118 <TTPMS_BLE_init+0xa00>)
   140e8:	6141      	str	r1, [r0, #20]
   140ea:	6184      	str	r4, [r0, #24]
   140ec:	b163      	cbz	r3, 14108 <TTPMS_BLE_init+0x9f0>
   140ee:	2303      	movs	r3, #3
   140f0:	f88d 3004 	strb.w	r3, [sp, #4]
   140f4:	2300      	movs	r3, #0
   140f6:	f88d 3005 	strb.w	r3, [sp, #5]
   140fa:	f88d 3006 	strb.w	r3, [sp, #6]
   140fe:	f88d 3007 	strb.w	r3, [sp, #7]
   14102:	9801      	ldr	r0, [sp, #4]
   14104:	f8cc 0010 	str.w	r0, [ip, #16]
   14108:	2300      	movs	r3, #0
   1410a:	4904      	ldr	r1, [pc, #16]	; (1411c <TTPMS_BLE_init+0xa04>)
   1410c:	4660      	mov	r0, ip
   1410e:	f013 fe66 	bl	27dde <z_log_msg_finalize>
}
   14112:	f7ff bbd9 	b.w	138c8 <TTPMS_BLE_init+0x1b0>
   14116:	bf00      	nop
   14118:	0002e50c 	.word	0x0002e50c
   1411c:	0002df40 	.word	0x0002df40

00014120 <main>:
/* --- BLE STUFF END --- */



void main(void)
{
   14120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14124:	b089      	sub	sp, #36	; 0x24
	LOG_INF("Running ttpms_v2_receiver");
   14126:	2006      	movs	r0, #6
   14128:	f001 fe4e 	bl	15dc8 <z_log_msg_alloc>
   1412c:	2200      	movs	r2, #0
   1412e:	f36f 0200 	bfc	r2, #0, #1
   14132:	f36f 0241 	bfc	r2, #1, #1
   14136:	f36f 0282 	bfc	r2, #2, #1
   1413a:	f36f 02c5 	bfc	r2, #3, #3
   1413e:	2303      	movs	r3, #3
   14140:	f363 1288 	bfi	r2, r3, #6, #3
   14144:	2308      	movs	r3, #8
   14146:	f363 2252 	bfi	r2, r3, #9, #10
   1414a:	f36f 42de 	bfc	r2, #19, #12
   1414e:	f36f 72df 	bfc	r2, #31, #1
   14152:	4604      	mov	r4, r0
   14154:	b188      	cbz	r0, 1417a <main+0x5a>
   14156:	f110 0310 	adds.w	r3, r0, #16
   1415a:	d001      	beq.n	14160 <main+0x40>
   1415c:	49a3      	ldr	r1, [pc, #652]	; (143ec <main+0x2cc>)
   1415e:	6141      	str	r1, [r0, #20]
   14160:	b15b      	cbz	r3, 1417a <main+0x5a>
   14162:	2302      	movs	r3, #2
   14164:	f88d 301c 	strb.w	r3, [sp, #28]
   14168:	2300      	movs	r3, #0
   1416a:	f88d 301d 	strb.w	r3, [sp, #29]
   1416e:	f88d 301e 	strb.w	r3, [sp, #30]
   14172:	f88d 301f 	strb.w	r3, [sp, #31]
   14176:	9807      	ldr	r0, [sp, #28]
   14178:	6120      	str	r0, [r4, #16]
   1417a:	2300      	movs	r3, #0
   1417c:	499c      	ldr	r1, [pc, #624]	; (143f0 <main+0x2d0>)
   1417e:	4620      	mov	r0, r4
   14180:	f013 fe2d 	bl	27dde <z_log_msg_finalize>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
   14184:	2021      	movs	r0, #33	; 0x21
   14186:	2100      	movs	r1, #0
   14188:	f011 fd7e 	bl	25c88 <z_impl_k_sleep>

	k_sleep(K_MSEC(1));

	TTPMS_CAN_init();
   1418c:	f7ff fa06 	bl	1359c <TTPMS_CAN_init>

	TTPMS_BLE_init();
   14190:	f7ff fac2 	bl	13718 <TTPMS_BLE_init>

	int err;

	struct bt_conn *conn;

	int counter = 0;
   14194:	2400      	movs	r4, #0
   14196:	e38f      	b.n	148b8 <main+0x798>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14198:	f3bf 8f5b 	dmb	ish
   1419c:	4b95      	ldr	r3, [pc, #596]	; (143f4 <main+0x2d4>)
   1419e:	681b      	ldr	r3, [r3, #0]
   141a0:	f3bf 8f5b 	dmb	ish
	while(1)
	{
		
		if (atomic_test_bit(flags, TEMP_ENABLED_FLAG))	{ // if temp is enabled, make sure we are subscribed to all connected sensors

			if (atomic_test_bit(flags, IFL_CONNECTED_FLAG) && !atomic_test_bit(flags, IFL_SUBSCRIBED_FLAG)) // if connected and not subscribed, we need to subscribe
   141a4:	f013 0f01 	tst.w	r3, #1
   141a8:	f040 8085 	bne.w	142b6 <main+0x196>
   141ac:	f3bf 8f5b 	dmb	ish
   141b0:	4b90      	ldr	r3, [pc, #576]	; (143f4 <main+0x2d4>)
   141b2:	681b      	ldr	r3, [r3, #0]
   141b4:	f3bf 8f5b 	dmb	ish
					atomic_clear_bit(flags, IFL_SUBSCRIBED_FLAG);	// see note above. must clear if we actually didn't subscribe
				}
				bt_conn_unref(conn);
			}

			if (atomic_test_bit(flags, EFL_CONNECTED_FLAG) && !atomic_test_bit(flags, EFL_SUBSCRIBED_FLAG)) // if connected and not subscribed, we need to subscribe
   141b8:	f013 0f10 	tst.w	r3, #16
   141bc:	f040 812c 	bne.w	14418 <main+0x2f8>
   141c0:	f3bf 8f5b 	dmb	ish
   141c4:	4b8b      	ldr	r3, [pc, #556]	; (143f4 <main+0x2d4>)
   141c6:	681b      	ldr	r3, [r3, #0]
   141c8:	f3bf 8f5b 	dmb	ish
					atomic_clear_bit(flags, EFL_SUBSCRIBED_FLAG);	// see note above. must clear if we actually didn't subscribe
				}
				bt_conn_unref(conn);
			}

			if (atomic_test_bit(flags, EFR_CONNECTED_FLAG) && !atomic_test_bit(flags, EFR_SUBSCRIBED_FLAG)) // if connected and not subscribed, we need to subscribe
   141cc:	f013 0f20 	tst.w	r3, #32
   141d0:	f040 81c0 	bne.w	14554 <main+0x434>
   141d4:	f3bf 8f5b 	dmb	ish
   141d8:	4b86      	ldr	r3, [pc, #536]	; (143f4 <main+0x2d4>)
   141da:	681b      	ldr	r3, [r3, #0]
   141dc:	f3bf 8f5b 	dmb	ish
					atomic_clear_bit(flags, EFR_SUBSCRIBED_FLAG);	// see note above. must clear if we actually didn't subscribe
				}
				bt_conn_unref(conn);
			}

			if (atomic_test_bit(flags, ERL_CONNECTED_FLAG) && !atomic_test_bit(flags, ERL_SUBSCRIBED_FLAG)) // if connected and not subscribed, we need to subscribe
   141e0:	f013 0f40 	tst.w	r3, #64	; 0x40
   141e4:	f040 826a 	bne.w	146bc <main+0x59c>
   141e8:	f3bf 8f5b 	dmb	ish
   141ec:	4b81      	ldr	r3, [pc, #516]	; (143f4 <main+0x2d4>)
   141ee:	681b      	ldr	r3, [r3, #0]
   141f0:	f3bf 8f5b 	dmb	ish
					atomic_clear_bit(flags, ERL_SUBSCRIBED_FLAG);	// see note above. must clear if we actually didn't subscribe
				}
				bt_conn_unref(conn);
			}

			if (atomic_test_bit(flags, ERR_CONNECTED_FLAG) && !atomic_test_bit(flags, ERR_SUBSCRIBED_FLAG)) // if connected and not subscribed, we need to subscribe
   141f4:	f013 0f80 	tst.w	r3, #128	; 0x80
   141f8:	f000 8368 	beq.w	148cc <main+0x7ac>
   141fc:	f3bf 8f5b 	dmb	ish
   14200:	4b7c      	ldr	r3, [pc, #496]	; (143f4 <main+0x2d4>)
   14202:	681b      	ldr	r3, [r3, #0]
   14204:	f3bf 8f5b 	dmb	ish
   14208:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   1420c:	f040 835e 	bne.w	148cc <main+0x7ac>
			{
				LOG_INF("main: Attempting to subscribe to ERR temp");
   14210:	2006      	movs	r0, #6
   14212:	f001 fdd9 	bl	15dc8 <z_log_msg_alloc>
   14216:	f36f 0900 	bfc	r9, #0, #1
   1421a:	f36f 0941 	bfc	r9, #1, #1
   1421e:	f36f 0982 	bfc	r9, #2, #1
   14222:	f36f 09c5 	bfc	r9, #3, #3
   14226:	2303      	movs	r3, #3
   14228:	f363 1988 	bfi	r9, r3, #6, #3
   1422c:	2308      	movs	r3, #8
   1422e:	f363 2952 	bfi	r9, r3, #9, #10
   14232:	f36f 49de 	bfc	r9, #19, #12
   14236:	f36f 79df 	bfc	r9, #31, #1
   1423a:	4684      	mov	ip, r0
   1423c:	b190      	cbz	r0, 14264 <main+0x144>
   1423e:	f110 0310 	adds.w	r3, r0, #16
   14242:	d001      	beq.n	14248 <main+0x128>
   14244:	4a6c      	ldr	r2, [pc, #432]	; (143f8 <main+0x2d8>)
   14246:	6142      	str	r2, [r0, #20]
   14248:	b163      	cbz	r3, 14264 <main+0x144>
   1424a:	2302      	movs	r3, #2
   1424c:	f88d 301c 	strb.w	r3, [sp, #28]
   14250:	2300      	movs	r3, #0
   14252:	f88d 301d 	strb.w	r3, [sp, #29]
   14256:	f88d 301e 	strb.w	r3, [sp, #30]
   1425a:	f88d 301f 	strb.w	r3, [sp, #31]
   1425e:	9807      	ldr	r0, [sp, #28]
   14260:	f8cc 0010 	str.w	r0, [ip, #16]
   14264:	2300      	movs	r3, #0
   14266:	464a      	mov	r2, r9
   14268:	4961      	ldr	r1, [pc, #388]	; (143f0 <main+0x2d0>)
   1426a:	4660      	mov	r0, ip
   1426c:	f013 fdb7 	bl	27dde <z_log_msg_finalize>
				ERR_temp_subscribe_params.value = BT_GATT_CCC_NOTIFY;	// this gets changed to 0 by the BT stack after an unsubscription event, need to set it back
   14270:	f8df b188 	ldr.w	fp, [pc, #392]	; 143fc <main+0x2dc>
   14274:	2301      	movs	r3, #1
   14276:	f8ab 3010 	strh.w	r3, [fp, #16]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1427a:	4b5e      	ldr	r3, [pc, #376]	; (143f4 <main+0x2d4>)
   1427c:	f3bf 8f5b 	dmb	ish
   14280:	e853 1f00 	ldrex	r1, [r3]
   14284:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
   14288:	e843 1200 	strex	r2, r1, [r3]
   1428c:	2a00      	cmp	r2, #0
   1428e:	d1f7      	bne.n	14280 <main+0x160>
   14290:	f3bf 8f5b 	dmb	ish
				atomic_set_bit(flags, ERR_SUBSCRIBED_FLAG);	// bt_gatt_subscribe is not blocking, so if we don't set this here, we may try to subscribe twice!
				conn = bt_conn_lookup_addr_le(bt_identity, &ERR_bt_addr);
   14294:	495a      	ldr	r1, [pc, #360]	; (14400 <main+0x2e0>)
   14296:	4b5b      	ldr	r3, [pc, #364]	; (14404 <main+0x2e4>)
   14298:	7818      	ldrb	r0, [r3, #0]
   1429a:	f008 f94b 	bl	1c534 <bt_conn_lookup_addr_le>
   1429e:	9001      	str	r0, [sp, #4]
				err = bt_gatt_subscribe(conn, &ERR_temp_subscribe_params);
   142a0:	4659      	mov	r1, fp
   142a2:	f016 fc05 	bl	2aab0 <bt_gatt_subscribe>
				if (err) {
   142a6:	4683      	mov	fp, r0
   142a8:	2800      	cmp	r0, #0
   142aa:	f040 82a5 	bne.w	147f8 <main+0x6d8>
					LOG_WRN("main: Failed to subscribe to ERR temp (err %d)", err);
					atomic_clear_bit(flags, ERR_SUBSCRIBED_FLAG);	// see note above. must clear if we actually didn't subscribe
				}
				bt_conn_unref(conn);
   142ae:	9801      	ldr	r0, [sp, #4]
   142b0:	f014 fe29 	bl	28f06 <bt_conn_unref>
   142b4:	e30a      	b.n	148cc <main+0x7ac>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   142b6:	f3bf 8f5b 	dmb	ish
   142ba:	4b4e      	ldr	r3, [pc, #312]	; (143f4 <main+0x2d4>)
   142bc:	681b      	ldr	r3, [r3, #0]
   142be:	f3bf 8f5b 	dmb	ish
			if (atomic_test_bit(flags, IFL_CONNECTED_FLAG) && !atomic_test_bit(flags, IFL_SUBSCRIBED_FLAG)) // if connected and not subscribed, we need to subscribe
   142c2:	f413 6f80 	tst.w	r3, #1024	; 0x400
   142c6:	f47f af71 	bne.w	141ac <main+0x8c>
				LOG_INF("main: Attempting to subscribe to IFL temp");
   142ca:	2006      	movs	r0, #6
   142cc:	f001 fd7c 	bl	15dc8 <z_log_msg_alloc>
   142d0:	f36f 0500 	bfc	r5, #0, #1
   142d4:	f36f 0541 	bfc	r5, #1, #1
   142d8:	f36f 0582 	bfc	r5, #2, #1
   142dc:	f36f 05c5 	bfc	r5, #3, #3
   142e0:	2303      	movs	r3, #3
   142e2:	f363 1588 	bfi	r5, r3, #6, #3
   142e6:	2308      	movs	r3, #8
   142e8:	f363 2552 	bfi	r5, r3, #9, #10
   142ec:	f36f 45de 	bfc	r5, #19, #12
   142f0:	f36f 75df 	bfc	r5, #31, #1
   142f4:	4684      	mov	ip, r0
   142f6:	b190      	cbz	r0, 1431e <main+0x1fe>
   142f8:	f110 0310 	adds.w	r3, r0, #16
   142fc:	d001      	beq.n	14302 <main+0x1e2>
   142fe:	4a42      	ldr	r2, [pc, #264]	; (14408 <main+0x2e8>)
   14300:	6142      	str	r2, [r0, #20]
   14302:	b163      	cbz	r3, 1431e <main+0x1fe>
   14304:	2302      	movs	r3, #2
   14306:	f88d 301c 	strb.w	r3, [sp, #28]
   1430a:	2300      	movs	r3, #0
   1430c:	f88d 301d 	strb.w	r3, [sp, #29]
   14310:	f88d 301e 	strb.w	r3, [sp, #30]
   14314:	f88d 301f 	strb.w	r3, [sp, #31]
   14318:	9807      	ldr	r0, [sp, #28]
   1431a:	f8cc 0010 	str.w	r0, [ip, #16]
   1431e:	2300      	movs	r3, #0
   14320:	462a      	mov	r2, r5
   14322:	4933      	ldr	r1, [pc, #204]	; (143f0 <main+0x2d0>)
   14324:	4660      	mov	r0, ip
   14326:	f013 fd5a 	bl	27dde <z_log_msg_finalize>
				IFL_temp_subscribe_params.value = BT_GATT_CCC_NOTIFY;	// this gets changed to 0 by the BT stack after an unsubscription event, need to set it back
   1432a:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 1440c <main+0x2ec>
   1432e:	2301      	movs	r3, #1
   14330:	f8ab 3010 	strh.w	r3, [fp, #16]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14334:	4b2f      	ldr	r3, [pc, #188]	; (143f4 <main+0x2d4>)
   14336:	f3bf 8f5b 	dmb	ish
   1433a:	e853 1f00 	ldrex	r1, [r3]
   1433e:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
   14342:	e843 1200 	strex	r2, r1, [r3]
   14346:	2a00      	cmp	r2, #0
   14348:	d1f7      	bne.n	1433a <main+0x21a>
   1434a:	f3bf 8f5b 	dmb	ish
				conn = bt_conn_lookup_addr_le(bt_identity, &IFL_bt_addr);
   1434e:	4930      	ldr	r1, [pc, #192]	; (14410 <main+0x2f0>)
   14350:	4b2c      	ldr	r3, [pc, #176]	; (14404 <main+0x2e4>)
   14352:	7818      	ldrb	r0, [r3, #0]
   14354:	f008 f8ee 	bl	1c534 <bt_conn_lookup_addr_le>
   14358:	9001      	str	r0, [sp, #4]
				err = bt_gatt_subscribe(conn, &IFL_temp_subscribe_params);
   1435a:	4659      	mov	r1, fp
   1435c:	f016 fba8 	bl	2aab0 <bt_gatt_subscribe>
				if (err) {
   14360:	4683      	mov	fp, r0
   14362:	b918      	cbnz	r0, 1436c <main+0x24c>
				bt_conn_unref(conn);
   14364:	9801      	ldr	r0, [sp, #4]
   14366:	f014 fdce 	bl	28f06 <bt_conn_unref>
   1436a:	e71f      	b.n	141ac <main+0x8c>
					LOG_WRN("main: Failed to subscribe to IFL temp (err %d)", err);
   1436c:	2008      	movs	r0, #8
   1436e:	f001 fd2b 	bl	15dc8 <z_log_msg_alloc>
   14372:	f36f 0a00 	bfc	sl, #0, #1
   14376:	f36f 0a41 	bfc	sl, #1, #1
   1437a:	f36f 0a82 	bfc	sl, #2, #1
   1437e:	f36f 0ac5 	bfc	sl, #3, #3
   14382:	2302      	movs	r3, #2
   14384:	f363 1a88 	bfi	sl, r3, #6, #3
   14388:	230c      	movs	r3, #12
   1438a:	f363 2a52 	bfi	sl, r3, #9, #10
   1438e:	f36f 4ade 	bfc	sl, #19, #12
   14392:	f36f 7adf 	bfc	sl, #31, #1
   14396:	4684      	mov	ip, r0
   14398:	b1a0      	cbz	r0, 143c4 <main+0x2a4>
   1439a:	f110 0310 	adds.w	r3, r0, #16
   1439e:	d003      	beq.n	143a8 <main+0x288>
   143a0:	4a1c      	ldr	r2, [pc, #112]	; (14414 <main+0x2f4>)
   143a2:	6142      	str	r2, [r0, #20]
   143a4:	f8c0 b018 	str.w	fp, [r0, #24]
   143a8:	b163      	cbz	r3, 143c4 <main+0x2a4>
   143aa:	2303      	movs	r3, #3
   143ac:	f88d 301c 	strb.w	r3, [sp, #28]
   143b0:	2300      	movs	r3, #0
   143b2:	f88d 301d 	strb.w	r3, [sp, #29]
   143b6:	f88d 301e 	strb.w	r3, [sp, #30]
   143ba:	f88d 301f 	strb.w	r3, [sp, #31]
   143be:	9807      	ldr	r0, [sp, #28]
   143c0:	f8cc 0010 	str.w	r0, [ip, #16]
   143c4:	2300      	movs	r3, #0
   143c6:	4652      	mov	r2, sl
   143c8:	4909      	ldr	r1, [pc, #36]	; (143f0 <main+0x2d0>)
   143ca:	4660      	mov	r0, ip
   143cc:	f013 fd07 	bl	27dde <z_log_msg_finalize>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   143d0:	4b08      	ldr	r3, [pc, #32]	; (143f4 <main+0x2d4>)
   143d2:	f3bf 8f5b 	dmb	ish
   143d6:	e853 1f00 	ldrex	r1, [r3]
   143da:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
   143de:	e843 1200 	strex	r2, r1, [r3]
   143e2:	2a00      	cmp	r2, #0
   143e4:	d1f7      	bne.n	143d6 <main+0x2b6>
   143e6:	f3bf 8f5b 	dmb	ish
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
}
   143ea:	e7bb      	b.n	14364 <main+0x244>
   143ec:	0002eb98 	.word	0x0002eb98
   143f0:	0002df40 	.word	0x0002df40
   143f4:	20007b0c 	.word	0x20007b0c
   143f8:	0002ed24 	.word	0x0002ed24
   143fc:	20000648 	.word	0x20000648
   14400:	20007abc 	.word	0x20007abc
   14404:	20007ab8 	.word	0x20007ab8
   14408:	0002ebb4 	.word	0x0002ebb4
   1440c:	200006b8 	.word	0x200006b8
   14410:	20007af4 	.word	0x20007af4
   14414:	0002ebe0 	.word	0x0002ebe0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14418:	f3bf 8f5b 	dmb	ish
   1441c:	4b9c      	ldr	r3, [pc, #624]	; (14690 <main+0x570>)
   1441e:	681b      	ldr	r3, [r3, #0]
   14420:	f3bf 8f5b 	dmb	ish
			if (atomic_test_bit(flags, EFL_CONNECTED_FLAG) && !atomic_test_bit(flags, EFL_SUBSCRIBED_FLAG)) // if connected and not subscribed, we need to subscribe
   14424:	f413 4f80 	tst.w	r3, #16384	; 0x4000
   14428:	f47f aeca 	bne.w	141c0 <main+0xa0>
				LOG_INF("main: Attempting to subscribe to EFL temp");
   1442c:	2006      	movs	r0, #6
   1442e:	f001 fccb 	bl	15dc8 <z_log_msg_alloc>
   14432:	f36f 0600 	bfc	r6, #0, #1
   14436:	f36f 0641 	bfc	r6, #1, #1
   1443a:	f36f 0682 	bfc	r6, #2, #1
   1443e:	f36f 06c5 	bfc	r6, #3, #3
   14442:	2303      	movs	r3, #3
   14444:	f363 1688 	bfi	r6, r3, #6, #3
   14448:	2308      	movs	r3, #8
   1444a:	f363 2652 	bfi	r6, r3, #9, #10
   1444e:	f36f 46de 	bfc	r6, #19, #12
   14452:	f36f 76df 	bfc	r6, #31, #1
   14456:	4684      	mov	ip, r0
   14458:	b190      	cbz	r0, 14480 <main+0x360>
   1445a:	f110 0310 	adds.w	r3, r0, #16
   1445e:	d001      	beq.n	14464 <main+0x344>
   14460:	4a8c      	ldr	r2, [pc, #560]	; (14694 <main+0x574>)
   14462:	6142      	str	r2, [r0, #20]
   14464:	b163      	cbz	r3, 14480 <main+0x360>
   14466:	2302      	movs	r3, #2
   14468:	f88d 301c 	strb.w	r3, [sp, #28]
   1446c:	2300      	movs	r3, #0
   1446e:	f88d 301d 	strb.w	r3, [sp, #29]
   14472:	f88d 301e 	strb.w	r3, [sp, #30]
   14476:	f88d 301f 	strb.w	r3, [sp, #31]
   1447a:	9807      	ldr	r0, [sp, #28]
   1447c:	f8cc 0010 	str.w	r0, [ip, #16]
   14480:	2300      	movs	r3, #0
   14482:	4632      	mov	r2, r6
   14484:	4984      	ldr	r1, [pc, #528]	; (14698 <main+0x578>)
   14486:	4660      	mov	r0, ip
   14488:	f013 fca9 	bl	27dde <z_log_msg_finalize>
				EFL_temp_subscribe_params.value = BT_GATT_CCC_NOTIFY;	// this gets changed to 0 by the BT stack after an unsubscription event, need to set it back
   1448c:	f8df b20c 	ldr.w	fp, [pc, #524]	; 1469c <main+0x57c>
   14490:	2301      	movs	r3, #1
   14492:	f8ab 3010 	strh.w	r3, [fp, #16]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14496:	4b7e      	ldr	r3, [pc, #504]	; (14690 <main+0x570>)
   14498:	f3bf 8f5b 	dmb	ish
   1449c:	e853 1f00 	ldrex	r1, [r3]
   144a0:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
   144a4:	e843 1200 	strex	r2, r1, [r3]
   144a8:	2a00      	cmp	r2, #0
   144aa:	d1f7      	bne.n	1449c <main+0x37c>
   144ac:	f3bf 8f5b 	dmb	ish
				conn = bt_conn_lookup_addr_le(bt_identity, &EFL_bt_addr);
   144b0:	497b      	ldr	r1, [pc, #492]	; (146a0 <main+0x580>)
   144b2:	4b7c      	ldr	r3, [pc, #496]	; (146a4 <main+0x584>)
   144b4:	7818      	ldrb	r0, [r3, #0]
   144b6:	f008 f83d 	bl	1c534 <bt_conn_lookup_addr_le>
   144ba:	9001      	str	r0, [sp, #4]
				err = bt_gatt_subscribe(conn, &EFL_temp_subscribe_params);
   144bc:	4659      	mov	r1, fp
   144be:	f016 faf7 	bl	2aab0 <bt_gatt_subscribe>
				if (err) {
   144c2:	4683      	mov	fp, r0
   144c4:	b918      	cbnz	r0, 144ce <main+0x3ae>
				bt_conn_unref(conn);
   144c6:	9801      	ldr	r0, [sp, #4]
   144c8:	f014 fd1d 	bl	28f06 <bt_conn_unref>
   144cc:	e678      	b.n	141c0 <main+0xa0>
					LOG_WRN("main: Failed to subscribe to EFL temp (err %d)", err);
   144ce:	2008      	movs	r0, #8
   144d0:	f001 fc7a 	bl	15dc8 <z_log_msg_alloc>
   144d4:	9b02      	ldr	r3, [sp, #8]
   144d6:	f36f 0300 	bfc	r3, #0, #1
   144da:	f36f 0341 	bfc	r3, #1, #1
   144de:	f36f 0382 	bfc	r3, #2, #1
   144e2:	f36f 03c5 	bfc	r3, #3, #3
   144e6:	461a      	mov	r2, r3
   144e8:	2302      	movs	r3, #2
   144ea:	f363 1288 	bfi	r2, r3, #6, #3
   144ee:	230c      	movs	r3, #12
   144f0:	f363 2252 	bfi	r2, r3, #9, #10
   144f4:	f36f 42de 	bfc	r2, #19, #12
   144f8:	f36f 72df 	bfc	r2, #31, #1
   144fc:	9202      	str	r2, [sp, #8]
   144fe:	4684      	mov	ip, r0
   14500:	b1a0      	cbz	r0, 1452c <main+0x40c>
   14502:	f110 0310 	adds.w	r3, r0, #16
   14506:	d003      	beq.n	14510 <main+0x3f0>
   14508:	4a67      	ldr	r2, [pc, #412]	; (146a8 <main+0x588>)
   1450a:	6142      	str	r2, [r0, #20]
   1450c:	f8c0 b018 	str.w	fp, [r0, #24]
   14510:	b163      	cbz	r3, 1452c <main+0x40c>
   14512:	2303      	movs	r3, #3
   14514:	f88d 301c 	strb.w	r3, [sp, #28]
   14518:	2300      	movs	r3, #0
   1451a:	f88d 301d 	strb.w	r3, [sp, #29]
   1451e:	f88d 301e 	strb.w	r3, [sp, #30]
   14522:	f88d 301f 	strb.w	r3, [sp, #31]
   14526:	9807      	ldr	r0, [sp, #28]
   14528:	f8cc 0010 	str.w	r0, [ip, #16]
   1452c:	2300      	movs	r3, #0
   1452e:	9a02      	ldr	r2, [sp, #8]
   14530:	4959      	ldr	r1, [pc, #356]	; (14698 <main+0x578>)
   14532:	4660      	mov	r0, ip
   14534:	f013 fc53 	bl	27dde <z_log_msg_finalize>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14538:	4b55      	ldr	r3, [pc, #340]	; (14690 <main+0x570>)
   1453a:	f3bf 8f5b 	dmb	ish
   1453e:	e853 1f00 	ldrex	r1, [r3]
   14542:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
   14546:	e843 1200 	strex	r2, r1, [r3]
   1454a:	2a00      	cmp	r2, #0
   1454c:	d1f7      	bne.n	1453e <main+0x41e>
   1454e:	f3bf 8f5b 	dmb	ish
   14552:	e7b8      	b.n	144c6 <main+0x3a6>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14554:	f3bf 8f5b 	dmb	ish
   14558:	4b4d      	ldr	r3, [pc, #308]	; (14690 <main+0x570>)
   1455a:	681b      	ldr	r3, [r3, #0]
   1455c:	f3bf 8f5b 	dmb	ish
			if (atomic_test_bit(flags, EFR_CONNECTED_FLAG) && !atomic_test_bit(flags, EFR_SUBSCRIBED_FLAG)) // if connected and not subscribed, we need to subscribe
   14560:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   14564:	f47f ae36 	bne.w	141d4 <main+0xb4>
				LOG_INF("main: Attempting to subscribe to EFR temp");
   14568:	2006      	movs	r0, #6
   1456a:	f001 fc2d 	bl	15dc8 <z_log_msg_alloc>
   1456e:	f36f 0700 	bfc	r7, #0, #1
   14572:	f36f 0741 	bfc	r7, #1, #1
   14576:	f36f 0782 	bfc	r7, #2, #1
   1457a:	f36f 07c5 	bfc	r7, #3, #3
   1457e:	2303      	movs	r3, #3
   14580:	f363 1788 	bfi	r7, r3, #6, #3
   14584:	2308      	movs	r3, #8
   14586:	f363 2752 	bfi	r7, r3, #9, #10
   1458a:	f36f 47de 	bfc	r7, #19, #12
   1458e:	f36f 77df 	bfc	r7, #31, #1
   14592:	4684      	mov	ip, r0
   14594:	b190      	cbz	r0, 145bc <main+0x49c>
   14596:	f110 0310 	adds.w	r3, r0, #16
   1459a:	d001      	beq.n	145a0 <main+0x480>
   1459c:	4a43      	ldr	r2, [pc, #268]	; (146ac <main+0x58c>)
   1459e:	6142      	str	r2, [r0, #20]
   145a0:	b163      	cbz	r3, 145bc <main+0x49c>
   145a2:	2302      	movs	r3, #2
   145a4:	f88d 301c 	strb.w	r3, [sp, #28]
   145a8:	2300      	movs	r3, #0
   145aa:	f88d 301d 	strb.w	r3, [sp, #29]
   145ae:	f88d 301e 	strb.w	r3, [sp, #30]
   145b2:	f88d 301f 	strb.w	r3, [sp, #31]
   145b6:	9807      	ldr	r0, [sp, #28]
   145b8:	f8cc 0010 	str.w	r0, [ip, #16]
   145bc:	2300      	movs	r3, #0
   145be:	463a      	mov	r2, r7
   145c0:	4935      	ldr	r1, [pc, #212]	; (14698 <main+0x578>)
   145c2:	4660      	mov	r0, ip
   145c4:	f013 fc0b 	bl	27dde <z_log_msg_finalize>
				EFR_temp_subscribe_params.value = BT_GATT_CCC_NOTIFY;	// this gets changed to 0 by the BT stack after an unsubscription event, need to set it back
   145c8:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 146b0 <main+0x590>
   145cc:	2301      	movs	r3, #1
   145ce:	f8ab 3010 	strh.w	r3, [fp, #16]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   145d2:	4b2f      	ldr	r3, [pc, #188]	; (14690 <main+0x570>)
   145d4:	f3bf 8f5b 	dmb	ish
   145d8:	e853 1f00 	ldrex	r1, [r3]
   145dc:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
   145e0:	e843 1200 	strex	r2, r1, [r3]
   145e4:	2a00      	cmp	r2, #0
   145e6:	d1f7      	bne.n	145d8 <main+0x4b8>
   145e8:	f3bf 8f5b 	dmb	ish
				conn = bt_conn_lookup_addr_le(bt_identity, &EFR_bt_addr);
   145ec:	4931      	ldr	r1, [pc, #196]	; (146b4 <main+0x594>)
   145ee:	4b2d      	ldr	r3, [pc, #180]	; (146a4 <main+0x584>)
   145f0:	7818      	ldrb	r0, [r3, #0]
   145f2:	f007 ff9f 	bl	1c534 <bt_conn_lookup_addr_le>
   145f6:	9001      	str	r0, [sp, #4]
				err = bt_gatt_subscribe(conn, &EFR_temp_subscribe_params);
   145f8:	4659      	mov	r1, fp
   145fa:	f016 fa59 	bl	2aab0 <bt_gatt_subscribe>
				if (err) {
   145fe:	4683      	mov	fp, r0
   14600:	b918      	cbnz	r0, 1460a <main+0x4ea>
				bt_conn_unref(conn);
   14602:	9801      	ldr	r0, [sp, #4]
   14604:	f014 fc7f 	bl	28f06 <bt_conn_unref>
   14608:	e5e4      	b.n	141d4 <main+0xb4>
					LOG_WRN("main: Failed to subscribe to EFR temp (err %d)", err);
   1460a:	2008      	movs	r0, #8
   1460c:	f001 fbdc 	bl	15dc8 <z_log_msg_alloc>
   14610:	9b03      	ldr	r3, [sp, #12]
   14612:	f36f 0300 	bfc	r3, #0, #1
   14616:	f36f 0341 	bfc	r3, #1, #1
   1461a:	f36f 0382 	bfc	r3, #2, #1
   1461e:	f36f 03c5 	bfc	r3, #3, #3
   14622:	461a      	mov	r2, r3
   14624:	2302      	movs	r3, #2
   14626:	f363 1288 	bfi	r2, r3, #6, #3
   1462a:	230c      	movs	r3, #12
   1462c:	f363 2252 	bfi	r2, r3, #9, #10
   14630:	f36f 42de 	bfc	r2, #19, #12
   14634:	f36f 72df 	bfc	r2, #31, #1
   14638:	9203      	str	r2, [sp, #12]
   1463a:	4684      	mov	ip, r0
   1463c:	b1a0      	cbz	r0, 14668 <main+0x548>
   1463e:	f110 0310 	adds.w	r3, r0, #16
   14642:	d003      	beq.n	1464c <main+0x52c>
   14644:	4a1c      	ldr	r2, [pc, #112]	; (146b8 <main+0x598>)
   14646:	6142      	str	r2, [r0, #20]
   14648:	f8c0 b018 	str.w	fp, [r0, #24]
   1464c:	b163      	cbz	r3, 14668 <main+0x548>
   1464e:	2303      	movs	r3, #3
   14650:	f88d 301c 	strb.w	r3, [sp, #28]
   14654:	2300      	movs	r3, #0
   14656:	f88d 301d 	strb.w	r3, [sp, #29]
   1465a:	f88d 301e 	strb.w	r3, [sp, #30]
   1465e:	f88d 301f 	strb.w	r3, [sp, #31]
   14662:	9807      	ldr	r0, [sp, #28]
   14664:	f8cc 0010 	str.w	r0, [ip, #16]
   14668:	2300      	movs	r3, #0
   1466a:	9a03      	ldr	r2, [sp, #12]
   1466c:	490a      	ldr	r1, [pc, #40]	; (14698 <main+0x578>)
   1466e:	4660      	mov	r0, ip
   14670:	f013 fbb5 	bl	27dde <z_log_msg_finalize>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14674:	4b06      	ldr	r3, [pc, #24]	; (14690 <main+0x570>)
   14676:	f3bf 8f5b 	dmb	ish
   1467a:	e853 1f00 	ldrex	r1, [r3]
   1467e:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
   14682:	e843 1200 	strex	r2, r1, [r3]
   14686:	2a00      	cmp	r2, #0
   14688:	d1f7      	bne.n	1467a <main+0x55a>
   1468a:	f3bf 8f5b 	dmb	ish
   1468e:	e7b8      	b.n	14602 <main+0x4e2>
   14690:	20007b0c 	.word	0x20007b0c
   14694:	0002ec10 	.word	0x0002ec10
   14698:	0002df40 	.word	0x0002df40
   1469c:	2000069c 	.word	0x2000069c
   146a0:	20007ad4 	.word	0x20007ad4
   146a4:	20007ab8 	.word	0x20007ab8
   146a8:	0002ec3c 	.word	0x0002ec3c
   146ac:	0002ec6c 	.word	0x0002ec6c
   146b0:	20000680 	.word	0x20000680
   146b4:	20007acc 	.word	0x20007acc
   146b8:	0002ec98 	.word	0x0002ec98
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   146bc:	f3bf 8f5b 	dmb	ish
   146c0:	4b87      	ldr	r3, [pc, #540]	; (148e0 <main+0x7c0>)
   146c2:	681b      	ldr	r3, [r3, #0]
   146c4:	f3bf 8f5b 	dmb	ish
			if (atomic_test_bit(flags, ERL_CONNECTED_FLAG) && !atomic_test_bit(flags, ERL_SUBSCRIBED_FLAG)) // if connected and not subscribed, we need to subscribe
   146c8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   146cc:	f47f ad8c 	bne.w	141e8 <main+0xc8>
				LOG_INF("main: Attempting to subscribe to ERL temp");
   146d0:	2006      	movs	r0, #6
   146d2:	f001 fb79 	bl	15dc8 <z_log_msg_alloc>
   146d6:	f36f 0800 	bfc	r8, #0, #1
   146da:	f36f 0841 	bfc	r8, #1, #1
   146de:	f36f 0882 	bfc	r8, #2, #1
   146e2:	f36f 08c5 	bfc	r8, #3, #3
   146e6:	2303      	movs	r3, #3
   146e8:	f363 1888 	bfi	r8, r3, #6, #3
   146ec:	2308      	movs	r3, #8
   146ee:	f363 2852 	bfi	r8, r3, #9, #10
   146f2:	f36f 48de 	bfc	r8, #19, #12
   146f6:	f36f 78df 	bfc	r8, #31, #1
   146fa:	4684      	mov	ip, r0
   146fc:	b190      	cbz	r0, 14724 <main+0x604>
   146fe:	f110 0310 	adds.w	r3, r0, #16
   14702:	d001      	beq.n	14708 <main+0x5e8>
   14704:	4a77      	ldr	r2, [pc, #476]	; (148e4 <main+0x7c4>)
   14706:	6142      	str	r2, [r0, #20]
   14708:	b163      	cbz	r3, 14724 <main+0x604>
   1470a:	2302      	movs	r3, #2
   1470c:	f88d 301c 	strb.w	r3, [sp, #28]
   14710:	2300      	movs	r3, #0
   14712:	f88d 301d 	strb.w	r3, [sp, #29]
   14716:	f88d 301e 	strb.w	r3, [sp, #30]
   1471a:	f88d 301f 	strb.w	r3, [sp, #31]
   1471e:	9807      	ldr	r0, [sp, #28]
   14720:	f8cc 0010 	str.w	r0, [ip, #16]
   14724:	2300      	movs	r3, #0
   14726:	4642      	mov	r2, r8
   14728:	496f      	ldr	r1, [pc, #444]	; (148e8 <main+0x7c8>)
   1472a:	4660      	mov	r0, ip
   1472c:	f013 fb57 	bl	27dde <z_log_msg_finalize>
				ERL_temp_subscribe_params.value = BT_GATT_CCC_NOTIFY;	// this gets changed to 0 by the BT stack after an unsubscription event, need to set it back
   14730:	f8df b1b8 	ldr.w	fp, [pc, #440]	; 148ec <main+0x7cc>
   14734:	2301      	movs	r3, #1
   14736:	f8ab 3010 	strh.w	r3, [fp, #16]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1473a:	4b69      	ldr	r3, [pc, #420]	; (148e0 <main+0x7c0>)
   1473c:	f3bf 8f5b 	dmb	ish
   14740:	e853 1f00 	ldrex	r1, [r3]
   14744:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
   14748:	e843 1200 	strex	r2, r1, [r3]
   1474c:	2a00      	cmp	r2, #0
   1474e:	d1f7      	bne.n	14740 <main+0x620>
   14750:	f3bf 8f5b 	dmb	ish
				conn = bt_conn_lookup_addr_le(bt_identity, &ERL_bt_addr);
   14754:	4966      	ldr	r1, [pc, #408]	; (148f0 <main+0x7d0>)
   14756:	4b67      	ldr	r3, [pc, #412]	; (148f4 <main+0x7d4>)
   14758:	7818      	ldrb	r0, [r3, #0]
   1475a:	f007 feeb 	bl	1c534 <bt_conn_lookup_addr_le>
   1475e:	9001      	str	r0, [sp, #4]
				err = bt_gatt_subscribe(conn, &ERL_temp_subscribe_params);
   14760:	4659      	mov	r1, fp
   14762:	f016 f9a5 	bl	2aab0 <bt_gatt_subscribe>
				if (err) {
   14766:	4683      	mov	fp, r0
   14768:	b918      	cbnz	r0, 14772 <main+0x652>
				bt_conn_unref(conn);
   1476a:	9801      	ldr	r0, [sp, #4]
   1476c:	f014 fbcb 	bl	28f06 <bt_conn_unref>
   14770:	e53a      	b.n	141e8 <main+0xc8>
					LOG_WRN("main: Failed to subscribe to ERL temp (err %d)", err);
   14772:	2008      	movs	r0, #8
   14774:	f001 fb28 	bl	15dc8 <z_log_msg_alloc>
   14778:	9b04      	ldr	r3, [sp, #16]
   1477a:	f36f 0300 	bfc	r3, #0, #1
   1477e:	f36f 0341 	bfc	r3, #1, #1
   14782:	f36f 0382 	bfc	r3, #2, #1
   14786:	f36f 03c5 	bfc	r3, #3, #3
   1478a:	461a      	mov	r2, r3
   1478c:	2302      	movs	r3, #2
   1478e:	f363 1288 	bfi	r2, r3, #6, #3
   14792:	230c      	movs	r3, #12
   14794:	f363 2252 	bfi	r2, r3, #9, #10
   14798:	f36f 42de 	bfc	r2, #19, #12
   1479c:	f36f 72df 	bfc	r2, #31, #1
   147a0:	9204      	str	r2, [sp, #16]
   147a2:	4684      	mov	ip, r0
   147a4:	b1a0      	cbz	r0, 147d0 <main+0x6b0>
   147a6:	f110 0310 	adds.w	r3, r0, #16
   147aa:	d003      	beq.n	147b4 <main+0x694>
   147ac:	4a52      	ldr	r2, [pc, #328]	; (148f8 <main+0x7d8>)
   147ae:	6142      	str	r2, [r0, #20]
   147b0:	f8c0 b018 	str.w	fp, [r0, #24]
   147b4:	b163      	cbz	r3, 147d0 <main+0x6b0>
   147b6:	2303      	movs	r3, #3
   147b8:	f88d 301c 	strb.w	r3, [sp, #28]
   147bc:	2300      	movs	r3, #0
   147be:	f88d 301d 	strb.w	r3, [sp, #29]
   147c2:	f88d 301e 	strb.w	r3, [sp, #30]
   147c6:	f88d 301f 	strb.w	r3, [sp, #31]
   147ca:	9807      	ldr	r0, [sp, #28]
   147cc:	f8cc 0010 	str.w	r0, [ip, #16]
   147d0:	2300      	movs	r3, #0
   147d2:	9a04      	ldr	r2, [sp, #16]
   147d4:	4944      	ldr	r1, [pc, #272]	; (148e8 <main+0x7c8>)
   147d6:	4660      	mov	r0, ip
   147d8:	f013 fb01 	bl	27dde <z_log_msg_finalize>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   147dc:	4b40      	ldr	r3, [pc, #256]	; (148e0 <main+0x7c0>)
   147de:	f3bf 8f5b 	dmb	ish
   147e2:	e853 1f00 	ldrex	r1, [r3]
   147e6:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
   147ea:	e843 1200 	strex	r2, r1, [r3]
   147ee:	2a00      	cmp	r2, #0
   147f0:	d1f7      	bne.n	147e2 <main+0x6c2>
   147f2:	f3bf 8f5b 	dmb	ish
   147f6:	e7b8      	b.n	1476a <main+0x64a>
					LOG_WRN("main: Failed to subscribe to ERR temp (err %d)", err);
   147f8:	2008      	movs	r0, #8
   147fa:	f001 fae5 	bl	15dc8 <z_log_msg_alloc>
   147fe:	9b05      	ldr	r3, [sp, #20]
   14800:	f36f 0300 	bfc	r3, #0, #1
   14804:	f36f 0341 	bfc	r3, #1, #1
   14808:	f36f 0382 	bfc	r3, #2, #1
   1480c:	f36f 03c5 	bfc	r3, #3, #3
   14810:	461a      	mov	r2, r3
   14812:	2302      	movs	r3, #2
   14814:	f363 1288 	bfi	r2, r3, #6, #3
   14818:	230c      	movs	r3, #12
   1481a:	f363 2252 	bfi	r2, r3, #9, #10
   1481e:	f36f 42de 	bfc	r2, #19, #12
   14822:	f36f 72df 	bfc	r2, #31, #1
   14826:	9205      	str	r2, [sp, #20]
   14828:	4684      	mov	ip, r0
   1482a:	b1a0      	cbz	r0, 14856 <main+0x736>
   1482c:	f110 0310 	adds.w	r3, r0, #16
   14830:	d003      	beq.n	1483a <main+0x71a>
   14832:	4a32      	ldr	r2, [pc, #200]	; (148fc <main+0x7dc>)
   14834:	6142      	str	r2, [r0, #20]
   14836:	f8c0 b018 	str.w	fp, [r0, #24]
   1483a:	b163      	cbz	r3, 14856 <main+0x736>
   1483c:	2303      	movs	r3, #3
   1483e:	f88d 301c 	strb.w	r3, [sp, #28]
   14842:	2300      	movs	r3, #0
   14844:	f88d 301d 	strb.w	r3, [sp, #29]
   14848:	f88d 301e 	strb.w	r3, [sp, #30]
   1484c:	f88d 301f 	strb.w	r3, [sp, #31]
   14850:	9807      	ldr	r0, [sp, #28]
   14852:	f8cc 0010 	str.w	r0, [ip, #16]
   14856:	2300      	movs	r3, #0
   14858:	9a05      	ldr	r2, [sp, #20]
   1485a:	4923      	ldr	r1, [pc, #140]	; (148e8 <main+0x7c8>)
   1485c:	4660      	mov	r0, ip
   1485e:	f013 fabe 	bl	27dde <z_log_msg_finalize>
   14862:	4b1f      	ldr	r3, [pc, #124]	; (148e0 <main+0x7c0>)
   14864:	f3bf 8f5b 	dmb	ish
   14868:	e853 1f00 	ldrex	r1, [r3]
   1486c:	f421 3100 	bic.w	r1, r1, #131072	; 0x20000
   14870:	e843 1200 	strex	r2, r1, [r3]
   14874:	2a00      	cmp	r2, #0
   14876:	d1f7      	bne.n	14868 <main+0x748>
   14878:	f3bf 8f5b 	dmb	ish
   1487c:	e517      	b.n	142ae <main+0x18e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1487e:	4a18      	ldr	r2, [pc, #96]	; (148e0 <main+0x7c0>)
   14880:	f3bf 8f5b 	dmb	ish
   14884:	6813      	ldr	r3, [r2, #0]
   14886:	f3bf 8f5b 	dmb	ish
		k_sleep(K_MSEC(100));

		counter++;
		if (counter >= 5) {		// send out TTPMS status message to dash every 500ms
			counter = 0;
			TTPMS_status.data[0] = (atomic_test_bit(flags, TEMP_ENABLED_FLAG) | (atomic_test_bit(flags, PRESSURE_ENABLED_FLAG) << 1));
   1488a:	f3c3 2300 	ubfx	r3, r3, #8, #1
   1488e:	f3bf 8f5b 	dmb	ish
   14892:	6811      	ldr	r1, [r2, #0]
   14894:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   14898:	f3c1 2140 	ubfx	r1, r1, #9, #1
   1489c:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
   148a0:	4917      	ldr	r1, [pc, #92]	; (14900 <main+0x7e0>)
   148a2:	720b      	strb	r3, [r1, #8]
   148a4:	f3bf 8f5b 	dmb	ish
   148a8:	6813      	ldr	r3, [r2, #0]
   148aa:	f3bf 8f5b 	dmb	ish
			TTPMS_status.data[1] = (atomic_get(flags) & 0xFF);
   148ae:	724b      	strb	r3, [r1, #9]
			k_work_submit(&status_CAN_tx_work);
   148b0:	4814      	ldr	r0, [pc, #80]	; (14904 <main+0x7e4>)
   148b2:	f010 fe0f 	bl	254d4 <k_work_submit>
			counter = 0;
   148b6:	2400      	movs	r4, #0
   148b8:	f3bf 8f5b 	dmb	ish
   148bc:	4b08      	ldr	r3, [pc, #32]	; (148e0 <main+0x7c0>)
   148be:	681b      	ldr	r3, [r3, #0]
   148c0:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(flags, TEMP_ENABLED_FLAG))	{ // if temp is enabled, make sure we are subscribed to all connected sensors
   148c4:	f413 7f80 	tst.w	r3, #256	; 0x100
   148c8:	f47f ac66 	bne.w	14198 <main+0x78>
   148cc:	f640 40cd 	movw	r0, #3277	; 0xccd
   148d0:	2100      	movs	r1, #0
   148d2:	f011 f9d9 	bl	25c88 <z_impl_k_sleep>
		counter++;
   148d6:	3401      	adds	r4, #1
		if (counter >= 5) {		// send out TTPMS status message to dash every 500ms
   148d8:	2c04      	cmp	r4, #4
   148da:	dded      	ble.n	148b8 <main+0x798>
   148dc:	e7cf      	b.n	1487e <main+0x75e>
   148de:	bf00      	nop
   148e0:	20007b0c 	.word	0x20007b0c
   148e4:	0002ecc8 	.word	0x0002ecc8
   148e8:	0002df40 	.word	0x0002df40
   148ec:	20000664 	.word	0x20000664
   148f0:	20007ac4 	.word	0x20007ac4
   148f4:	20007ab8 	.word	0x20007ab8
   148f8:	0002ecf4 	.word	0x0002ecf4
   148fc:	0002ed50 	.word	0x0002ed50
   14900:	20000820 	.word	0x20000820
   14904:	2000072c 	.word	0x2000072c

00014908 <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   14908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1490c:	b091      	sub	sp, #68	; 0x44
   1490e:	9205      	str	r2, [sp, #20]
   14910:	9302      	str	r3, [sp, #8]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
   14912:	4613      	mov	r3, r2
   14914:	f002 0204 	and.w	r2, r2, #4
   14918:	9200      	str	r2, [sp, #0]
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
   1491a:	f3c3 02c2 	ubfx	r2, r3, #3, #3
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
   1491e:	f010 0303 	ands.w	r3, r0, #3
   14922:	9301      	str	r3, [sp, #4]
   14924:	f040 8223 	bne.w	14d6e <cbvprintf_package+0x466>
   14928:	4607      	mov	r7, r0
   1492a:	468a      	mov	sl, r1
   1492c:	3201      	adds	r2, #1
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
   1492e:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
   14930:	2800      	cmp	r0, #0
   14932:	d047      	beq.n	149c4 <cbvprintf_package+0xbc>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
   14934:	b127      	cbz	r7, 14940 <cbvprintf_package+0x38>
   14936:	1be3      	subs	r3, r4, r7
   14938:	3304      	adds	r3, #4
   1493a:	4553      	cmp	r3, sl
   1493c:	f200 821a 	bhi.w	14d74 <cbvprintf_package+0x46c>
	 * Here we branch directly into the code processing strings
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
   14940:	9b02      	ldr	r3, [sp, #8]
   14942:	1e5d      	subs	r5, r3, #1
	unsigned int s_ro_cnt = 0; /* number of ro strings */
   14944:	9b01      	ldr	r3, [sp, #4]
   14946:	9304      	str	r3, [sp, #16]
	unsigned int s_rw_cnt = 0; /* number of rw strings */
   14948:	9306      	str	r3, [sp, #24]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
   1494a:	9303      	str	r3, [sp, #12]
	bool parsing = false;
   1494c:	2600      	movs	r6, #0
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
   1494e:	f04f 3bff 	mov.w	fp, #4294967295
	align = VA_STACK_ALIGN(char *);
   14952:	f04f 0804 	mov.w	r8, #4
	size = sizeof(char *);
   14956:	46c1      	mov	r9, r8

		/* copy va_list data over to our buffer */
		if (is_str_arg) {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
   14958:	b10f      	cbz	r7, 1495e <cbvprintf_package+0x56>
				*(const char **)buf = s;
   1495a:	9b02      	ldr	r3, [sp, #8]
   1495c:	6023      	str	r3, [r4, #0]
			}

			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   1495e:	1e53      	subs	r3, r2, #1
   14960:	9307      	str	r3, [sp, #28]
   14962:	2a00      	cmp	r2, #0
   14964:	f340 815f 	ble.w	14c26 <cbvprintf_package+0x31e>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
   14968:	9b05      	ldr	r3, [sp, #20]
   1496a:	f013 0202 	ands.w	r2, r3, #2
   1496e:	d026      	beq.n	149be <cbvprintf_package+0xb6>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   14970:	2001      	movs	r0, #1
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   14972:	1be1      	subs	r1, r4, r7
   14974:	088b      	lsrs	r3, r1, #2
				 * In the do_ro case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   14976:	b11a      	cbz	r2, 14980 <cbvprintf_package+0x78>
   14978:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   1497c:	f080 8200 	bcs.w	14d80 <cbvprintf_package+0x478>
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
				}

				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
   14980:	9903      	ldr	r1, [sp, #12]
   14982:	290f      	cmp	r1, #15
   14984:	f200 81ff 	bhi.w	14d86 <cbvprintf_package+0x47e>
					__ASSERT(false, "str_ptr_pos[] too small");
					return -EINVAL;
				}

				if (buf0 != NULL) {
   14988:	2f00      	cmp	r7, #0
   1498a:	f000 8164 	beq.w	14c56 <cbvprintf_package+0x34e>
					/*
					 * Remember string pointer location.
					 * We will append non-ro strings later.
					 */
					str_ptr_pos[s_idx] = s_ptr_idx;
   1498e:	b2db      	uxtb	r3, r3
   14990:	f101 0240 	add.w	r2, r1, #64	; 0x40
   14994:	446a      	add	r2, sp
   14996:	f802 3c10 	strb.w	r3, [r2, #-16]
					str_ptr_arg[s_idx] = arg_idx;
   1499a:	f802 bc20 	strb.w	fp, [r2, #-32]
					if (is_ro) {
   1499e:	2800      	cmp	r0, #0
   149a0:	f000 8155 	beq.w	14c4e <cbvprintf_package+0x346>
						/* flag read-only string. */
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
   149a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
   149a8:	f101 0240 	add.w	r2, r1, #64	; 0x40
   149ac:	446a      	add	r2, sp
   149ae:	f802 3c10 	strb.w	r3, [r2, #-16]
						s_ro_cnt++;
   149b2:	9b04      	ldr	r3, [sp, #16]
   149b4:	3301      	adds	r3, #1
   149b6:	9304      	str	r3, [sp, #16]
					 * and size of the pointer position prefix.
					 */
					len += strlen(s) + 1 + 1;
				}

				s_idx++;
   149b8:	9b03      	ldr	r3, [sp, #12]
   149ba:	3301      	adds	r3, #1
   149bc:	9303      	str	r3, [sp, #12]
			}
			buf += sizeof(char *);
   149be:	3404      	adds	r4, #4

			is_str_arg = false;
   149c0:	2200      	movs	r2, #0
   149c2:	e03d      	b.n	14a40 <cbvprintf_package+0x138>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
   149c4:	f001 0a07 	and.w	sl, r1, #7
   149c8:	4454      	add	r4, sl
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
   149ca:	f1ca 0a08 	rsb	sl, sl, #8
   149ce:	e7b1      	b.n	14934 <cbvprintf_package+0x2c>
				parsing = false;
   149d0:	2600      	movs	r6, #0
   149d2:	e034      	b.n	14a3e <cbvprintf_package+0x136>
   149d4:	2600      	movs	r6, #0
   149d6:	e032      	b.n	14a3e <cbvprintf_package+0x136>
   149d8:	2600      	movs	r6, #0
   149da:	e030      	b.n	14a3e <cbvprintf_package+0x136>
				align = VA_STACK_ALIGN(intmax_t);
   149dc:	f04f 0808 	mov.w	r8, #8
				size = sizeof(intmax_t);
   149e0:	46c1      	mov	r9, r8
   149e2:	e02c      	b.n	14a3e <cbvprintf_package+0x136>
				if (*fmt == '%') {
   149e4:	2925      	cmp	r1, #37	; 0x25
   149e6:	d12a      	bne.n	14a3e <cbvprintf_package+0x136>
					arg_idx++;
   149e8:	f10b 0b01 	add.w	fp, fp, #1
					parsing = true;
   149ec:	2601      	movs	r6, #1
					align = VA_STACK_ALIGN(int);
   149ee:	f04f 0804 	mov.w	r8, #4
					size = sizeof(int);
   149f2:	46c1      	mov	r9, r8
				continue;
   149f4:	e023      	b.n	14a3e <cbvprintf_package+0x136>
			switch (*fmt) {
   149f6:	2947      	cmp	r1, #71	; 0x47
   149f8:	d8ec      	bhi.n	149d4 <cbvprintf_package+0xcc>
   149fa:	292a      	cmp	r1, #42	; 0x2a
   149fc:	d312      	bcc.n	14a24 <cbvprintf_package+0x11c>
   149fe:	392a      	subs	r1, #42	; 0x2a
   14a00:	b2c9      	uxtb	r1, r1
   14a02:	2001      	movs	r0, #1
   14a04:	fa00 f101 	lsl.w	r1, r0, r1
   14a08:	f64f 70da 	movw	r0, #65498	; 0xffda
   14a0c:	4201      	tst	r1, r0
   14a0e:	d116      	bne.n	14a3e <cbvprintf_package+0x136>
   14a10:	f011 5f62 	tst.w	r1, #947912704	; 0x38800000
   14a14:	f040 80c4 	bne.w	14ba0 <cbvprintf_package+0x298>
   14a18:	f011 0f01 	tst.w	r1, #1
   14a1c:	f040 808e 	bne.w	14b3c <cbvprintf_package+0x234>
				parsing = false;
   14a20:	2600      	movs	r6, #0
   14a22:	e00c      	b.n	14a3e <cbvprintf_package+0x136>
			switch (*fmt) {
   14a24:	2925      	cmp	r1, #37	; 0x25
   14a26:	d103      	bne.n	14a30 <cbvprintf_package+0x128>
				arg_idx--;
   14a28:	f10b 3bff 	add.w	fp, fp, #4294967295
				parsing = false;
   14a2c:	2600      	movs	r6, #0
				continue;
   14a2e:	e006      	b.n	14a3e <cbvprintf_package+0x136>
			switch (*fmt) {
   14a30:	d901      	bls.n	14a36 <cbvprintf_package+0x12e>
				parsing = false;
   14a32:	2600      	movs	r6, #0
   14a34:	e003      	b.n	14a3e <cbvprintf_package+0x136>
			switch (*fmt) {
   14a36:	2920      	cmp	r1, #32
   14a38:	d001      	beq.n	14a3e <cbvprintf_package+0x136>
   14a3a:	2923      	cmp	r1, #35	; 0x23
   14a3c:	d1cc      	bne.n	149d8 <cbvprintf_package+0xd0>
				parsing = false;
   14a3e:	461d      	mov	r5, r3
			if (*++fmt == '\0') {
   14a40:	1c6b      	adds	r3, r5, #1
   14a42:	7869      	ldrb	r1, [r5, #1]
   14a44:	2900      	cmp	r1, #0
   14a46:	f000 811d 	beq.w	14c84 <cbvprintf_package+0x37c>
			if (!parsing) {
   14a4a:	2e00      	cmp	r6, #0
   14a4c:	d0ca      	beq.n	149e4 <cbvprintf_package+0xdc>
			switch (*fmt) {
   14a4e:	297a      	cmp	r1, #122	; 0x7a
   14a50:	d8be      	bhi.n	149d0 <cbvprintf_package+0xc8>
   14a52:	294c      	cmp	r1, #76	; 0x4c
   14a54:	d3cf      	bcc.n	149f6 <cbvprintf_package+0xee>
   14a56:	394c      	subs	r1, #76	; 0x4c
   14a58:	292e      	cmp	r1, #46	; 0x2e
   14a5a:	d861      	bhi.n	14b20 <cbvprintf_package+0x218>
   14a5c:	a001      	add	r0, pc, #4	; (adr r0, 14a64 <cbvprintf_package+0x15c>)
   14a5e:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
   14a62:	bf00      	nop
   14a64:	00014a3f 	.word	0x00014a3f
   14a68:	00014b21 	.word	0x00014b21
   14a6c:	00014b21 	.word	0x00014b21
   14a70:	00014b21 	.word	0x00014b21
   14a74:	00014b21 	.word	0x00014b21
   14a78:	00014b21 	.word	0x00014b21
   14a7c:	00014b21 	.word	0x00014b21
   14a80:	00014b21 	.word	0x00014b21
   14a84:	00014b21 	.word	0x00014b21
   14a88:	00014b21 	.word	0x00014b21
   14a8c:	00014b21 	.word	0x00014b21
   14a90:	00014b21 	.word	0x00014b21
   14a94:	00014b35 	.word	0x00014b35
   14a98:	00014b21 	.word	0x00014b21
   14a9c:	00014b21 	.word	0x00014b21
   14aa0:	00014b21 	.word	0x00014b21
   14aa4:	00014b21 	.word	0x00014b21
   14aa8:	00014b21 	.word	0x00014b21
   14aac:	00014b21 	.word	0x00014b21
   14ab0:	00014b21 	.word	0x00014b21
   14ab4:	00014b21 	.word	0x00014b21
   14ab8:	00014ba1 	.word	0x00014ba1
   14abc:	00014b21 	.word	0x00014b21
   14ac0:	00014b35 	.word	0x00014b35
   14ac4:	00014b35 	.word	0x00014b35
   14ac8:	00014ba1 	.word	0x00014ba1
   14acc:	00014ba1 	.word	0x00014ba1
   14ad0:	00014ba1 	.word	0x00014ba1
   14ad4:	00014a3f 	.word	0x00014a3f
   14ad8:	00014b35 	.word	0x00014b35
   14adc:	000149dd 	.word	0x000149dd
   14ae0:	00014b21 	.word	0x00014b21
   14ae4:	00014a3f 	.word	0x00014a3f
   14ae8:	00014b21 	.word	0x00014b21
   14aec:	00014bff 	.word	0x00014bff
   14af0:	00014b35 	.word	0x00014b35
   14af4:	00014bff 	.word	0x00014bff
   14af8:	00014b21 	.word	0x00014b21
   14afc:	00014b21 	.word	0x00014b21
   14b00:	00014c09 	.word	0x00014c09
   14b04:	00014b2d 	.word	0x00014b2d
   14b08:	00014b35 	.word	0x00014b35
   14b0c:	00014b21 	.word	0x00014b21
   14b10:	00014b21 	.word	0x00014b21
   14b14:	00014b35 	.word	0x00014b35
   14b18:	00014b21 	.word	0x00014b21
   14b1c:	00014b25 	.word	0x00014b25
				parsing = false;
   14b20:	2600      	movs	r6, #0
   14b22:	e78c      	b.n	14a3e <cbvprintf_package+0x136>
				align = VA_STACK_ALIGN(size_t);
   14b24:	f04f 0804 	mov.w	r8, #4
				size = sizeof(size_t);
   14b28:	46c1      	mov	r9, r8
				continue;
   14b2a:	e788      	b.n	14a3e <cbvprintf_package+0x136>
				align = VA_STACK_ALIGN(ptrdiff_t);
   14b2c:	f04f 0804 	mov.w	r8, #4
				size = sizeof(ptrdiff_t);
   14b30:	46c1      	mov	r9, r8
				continue;
   14b32:	e784      	b.n	14a3e <cbvprintf_package+0x136>
				if (fmt[-1] == 'l') {
   14b34:	7829      	ldrb	r1, [r5, #0]
   14b36:	296c      	cmp	r1, #108	; 0x6c
   14b38:	d024      	beq.n	14b84 <cbvprintf_package+0x27c>
				parsing = false;
   14b3a:	2600      	movs	r6, #0
		buf = (void *) ROUND_UP(buf, align);
   14b3c:	4444      	add	r4, r8
   14b3e:	3c01      	subs	r4, #1
   14b40:	f1c8 0100 	rsb	r1, r8, #0
   14b44:	400c      	ands	r4, r1
   14b46:	4620      	mov	r0, r4
		if (buf0 != NULL && BUF_OFFSET + size > len) {
   14b48:	b127      	cbz	r7, 14b54 <cbvprintf_package+0x24c>
   14b4a:	1be1      	subs	r1, r4, r7
   14b4c:	4449      	add	r1, r9
   14b4e:	4551      	cmp	r1, sl
   14b50:	f200 8113 	bhi.w	14d7a <cbvprintf_package+0x472>
		if (is_str_arg) {
   14b54:	2a00      	cmp	r2, #0
   14b56:	d15d      	bne.n	14c14 <cbvprintf_package+0x30c>
		} else if (size == sizeof(int)) {
   14b58:	f1b9 0f04 	cmp.w	r9, #4
   14b5c:	f000 808a 	beq.w	14c74 <cbvprintf_package+0x36c>

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
   14b60:	f1b9 0f08 	cmp.w	r9, #8
   14b64:	f040 8112 	bne.w	14d8c <cbvprintf_package+0x484>
			long long v = va_arg(ap, long long);
   14b68:	991a      	ldr	r1, [sp, #104]	; 0x68
   14b6a:	3107      	adds	r1, #7
   14b6c:	f021 0107 	bic.w	r1, r1, #7
   14b70:	f101 0008 	add.w	r0, r1, #8
   14b74:	901a      	str	r0, [sp, #104]	; 0x68
   14b76:	e9d1 0100 	ldrd	r0, r1, [r1]

			if (buf0 != NULL) {
   14b7a:	b10f      	cbz	r7, 14b80 <cbvprintf_package+0x278>
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
   14b7c:	e9c4 0100 	strd	r0, r1, [r4]
				}
			}
			buf += sizeof(long long);
   14b80:	3408      	adds	r4, #8
   14b82:	e75c      	b.n	14a3e <cbvprintf_package+0x136>
					if (fmt[-2] == 'l') {
   14b84:	f813 1c02 	ldrb.w	r1, [r3, #-2]
   14b88:	296c      	cmp	r1, #108	; 0x6c
   14b8a:	d004      	beq.n	14b96 <cbvprintf_package+0x28e>
				parsing = false;
   14b8c:	2600      	movs	r6, #0
						align = VA_STACK_ALIGN(long);
   14b8e:	f04f 0804 	mov.w	r8, #4
						size = sizeof(long);
   14b92:	46c1      	mov	r9, r8
   14b94:	e7d2      	b.n	14b3c <cbvprintf_package+0x234>
				parsing = false;
   14b96:	2600      	movs	r6, #0
						align = VA_STACK_ALIGN(long long);
   14b98:	f04f 0808 	mov.w	r8, #8
						size = sizeof(long long);
   14b9c:	46c1      	mov	r9, r8
   14b9e:	e7cd      	b.n	14b3c <cbvprintf_package+0x234>
				if (fmt[-1] == 'L') {
   14ba0:	7829      	ldrb	r1, [r5, #0]
   14ba2:	294c      	cmp	r1, #76	; 0x4c
   14ba4:	d01b      	beq.n	14bde <cbvprintf_package+0x2d6>
					v.d = va_arg(ap, double);
   14ba6:	991a      	ldr	r1, [sp, #104]	; 0x68
   14ba8:	3107      	adds	r1, #7
   14baa:	f021 0107 	bic.w	r1, r1, #7
   14bae:	f101 0008 	add.w	r0, r1, #8
   14bb2:	901a      	str	r0, [sp, #104]	; 0x68
   14bb4:	e9d1 0100 	ldrd	r0, r1, [r1]
				buf = (void *) ROUND_UP(buf, align);
   14bb8:	3407      	adds	r4, #7
   14bba:	f024 0407 	bic.w	r4, r4, #7
				if (buf0 != NULL) {
   14bbe:	b147      	cbz	r7, 14bd2 <cbvprintf_package+0x2ca>
					if (BUF_OFFSET + size > len) {
   14bc0:	1be6      	subs	r6, r4, r7
   14bc2:	3608      	adds	r6, #8
   14bc4:	4556      	cmp	r6, sl
   14bc6:	d814      	bhi.n	14bf2 <cbvprintf_package+0x2ea>
					} else if (fmt[-1] == 'L') {
   14bc8:	782d      	ldrb	r5, [r5, #0]
   14bca:	2d4c      	cmp	r5, #76	; 0x4c
   14bcc:	d014      	beq.n	14bf8 <cbvprintf_package+0x2f0>
						*(double *)buf = v.d;
   14bce:	e9c4 0100 	strd	r0, r1, [r4]
				buf += size;
   14bd2:	3408      	adds	r4, #8
				parsing = false;
   14bd4:	2600      	movs	r6, #0
				continue;
   14bd6:	f04f 0808 	mov.w	r8, #8
   14bda:	46c1      	mov	r9, r8
   14bdc:	e72f      	b.n	14a3e <cbvprintf_package+0x136>
					v.ld = va_arg(ap, long double);
   14bde:	991a      	ldr	r1, [sp, #104]	; 0x68
   14be0:	3107      	adds	r1, #7
   14be2:	f021 0107 	bic.w	r1, r1, #7
   14be6:	f101 0008 	add.w	r0, r1, #8
   14bea:	901a      	str	r0, [sp, #104]	; 0x68
   14bec:	e9d1 0100 	ldrd	r0, r1, [r1]
					size = sizeof(long double);
   14bf0:	e7e2      	b.n	14bb8 <cbvprintf_package+0x2b0>
						return -ENOSPC;
   14bf2:	f06f 001b 	mvn.w	r0, #27
   14bf6:	e0b7      	b.n	14d68 <cbvprintf_package+0x460>
						*(long double *)buf = v.ld;
   14bf8:	e9c4 0100 	strd	r0, r1, [r4]
   14bfc:	e7e9      	b.n	14bd2 <cbvprintf_package+0x2ca>
				parsing = false;
   14bfe:	2600      	movs	r6, #0
				align = VA_STACK_ALIGN(void *);
   14c00:	f04f 0804 	mov.w	r8, #4
				size = sizeof(void *);
   14c04:	46c1      	mov	r9, r8
   14c06:	e799      	b.n	14b3c <cbvprintf_package+0x234>
				is_str_arg = true;
   14c08:	4632      	mov	r2, r6
				parsing = false;
   14c0a:	2600      	movs	r6, #0
				align = VA_STACK_ALIGN(void *);
   14c0c:	f04f 0804 	mov.w	r8, #4
				size = sizeof(void *);
   14c10:	46c1      	mov	r9, r8
   14c12:	e793      	b.n	14b3c <cbvprintf_package+0x234>
			s = va_arg(ap, char *);
   14c14:	4604      	mov	r4, r0
   14c16:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   14c18:	1d11      	adds	r1, r2, #4
   14c1a:	911a      	str	r1, [sp, #104]	; 0x68
   14c1c:	6812      	ldr	r2, [r2, #0]
   14c1e:	9202      	str	r2, [sp, #8]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   14c20:	9a07      	ldr	r2, [sp, #28]
			if (*++fmt == '\0') {
   14c22:	461d      	mov	r5, r3
   14c24:	e698      	b.n	14958 <cbvprintf_package+0x50>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
   14c26:	4b5f      	ldr	r3, [pc, #380]	; (14da4 <cbvprintf_package+0x49c>)
   14c28:	9a02      	ldr	r2, [sp, #8]
   14c2a:	429a      	cmp	r2, r3
   14c2c:	d304      	bcc.n	14c38 <cbvprintf_package+0x330>
   14c2e:	4b5e      	ldr	r3, [pc, #376]	; (14da8 <cbvprintf_package+0x4a0>)
   14c30:	429a      	cmp	r2, r3
   14c32:	d30a      	bcc.n	14c4a <cbvprintf_package+0x342>
   14c34:	2300      	movs	r3, #0
   14c36:	e000      	b.n	14c3a <cbvprintf_package+0x332>
   14c38:	2300      	movs	r3, #0
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   14c3a:	2b00      	cmp	r3, #0
   14c3c:	f47f ae94 	bne.w	14968 <cbvprintf_package+0x60>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
   14c40:	9b05      	ldr	r3, [sp, #20]
   14c42:	f003 0202 	and.w	r2, r3, #2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   14c46:	2000      	movs	r0, #0
   14c48:	e693      	b.n	14972 <cbvprintf_package+0x6a>
   14c4a:	2301      	movs	r3, #1
   14c4c:	e7f5      	b.n	14c3a <cbvprintf_package+0x332>
						s_rw_cnt++;
   14c4e:	9b06      	ldr	r3, [sp, #24]
   14c50:	3301      	adds	r3, #1
   14c52:	9306      	str	r3, [sp, #24]
   14c54:	e6b0      	b.n	149b8 <cbvprintf_package+0xb0>
				} else if (is_ro) {
   14c56:	b110      	cbz	r0, 14c5e <cbvprintf_package+0x356>
					len += 1;
   14c58:	f10a 0a01 	add.w	sl, sl, #1
   14c5c:	e6ac      	b.n	149b8 <cbvprintf_package+0xb0>
				} else if (rws_pos_en) {
   14c5e:	9b00      	ldr	r3, [sp, #0]
   14c60:	b113      	cbz	r3, 14c68 <cbvprintf_package+0x360>
					len += 2;
   14c62:	f10a 0a02 	add.w	sl, sl, #2
   14c66:	e6a7      	b.n	149b8 <cbvprintf_package+0xb0>
					len += strlen(s) + 1 + 1;
   14c68:	9802      	ldr	r0, [sp, #8]
   14c6a:	f013 fcda 	bl	28622 <strlen>
   14c6e:	1c83      	adds	r3, r0, #2
   14c70:	449a      	add	sl, r3
   14c72:	e6a1      	b.n	149b8 <cbvprintf_package+0xb0>
			int v = va_arg(ap, int);
   14c74:	991a      	ldr	r1, [sp, #104]	; 0x68
   14c76:	1d08      	adds	r0, r1, #4
   14c78:	901a      	str	r0, [sp, #104]	; 0x68
   14c7a:	6809      	ldr	r1, [r1, #0]
			if (buf0 != NULL) {
   14c7c:	b107      	cbz	r7, 14c80 <cbvprintf_package+0x378>
				*(int *)buf = v;
   14c7e:	6021      	str	r1, [r4, #0]
			buf += sizeof(int);
   14c80:	3404      	adds	r4, #4
   14c82:	e6dc      	b.n	14a3e <cbvprintf_package+0x136>
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
   14c84:	1be3      	subs	r3, r4, r7
   14c86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   14c8a:	f080 8082 	bcs.w	14d92 <cbvprintf_package+0x48a>

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
   14c8e:	b197      	cbz	r7, 14cb6 <cbvprintf_package+0x3ae>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
	}

	/* Clear our buffer header. We made room for it initially. */
	*(char **)buf0 = NULL;
   14c90:	2200      	movs	r2, #0
   14c92:	603a      	str	r2, [r7, #0]

	/* Record end of argument list. */
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
   14c94:	089b      	lsrs	r3, r3, #2
   14c96:	703b      	strb	r3, [r7, #0]

	if (rws_pos_en) {
   14c98:	9b00      	ldr	r3, [sp, #0]
   14c9a:	b183      	cbz	r3, 14cbe <cbvprintf_package+0x3b6>
		/* Strings are appended, update location counter. */
		pkg_hdr->desc.str_cnt = 0;
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
   14c9c:	9b06      	ldr	r3, [sp, #24]
   14c9e:	70fb      	strb	r3, [r7, #3]
		/* Strings are appended, update append counter. */
		pkg_hdr->desc.str_cnt = s_rw_cnt;
		pkg_hdr->desc.rw_str_cnt = 0;
	}

	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
   14ca0:	9b04      	ldr	r3, [sp, #16]
   14ca2:	70bb      	strb	r3, [r7, #2]
#ifdef CONFIG_CBPRINTF_PACKAGE_HEADER_STORE_CREATION_FLAGS
	pkg_hdr->desc.pkg_flags = flags;
#endif

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
   14ca4:	bb1b      	cbnz	r3, 14cee <cbvprintf_package+0x3e6>
			/* retrieve the string pointer */
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
			/* clear the in-buffer pointer (less entropy if compressed) */
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
			/* find the string length including terminating '\0' */
			size = strlen(s) + 1;
   14ca6:	9d01      	ldr	r5, [sp, #4]
   14ca8:	f8dd 900c 	ldr.w	r9, [sp, #12]
   14cac:	f8dd b010 	ldr.w	fp, [sp, #16]
   14cb0:	f8dd 8008 	ldr.w	r8, [sp, #8]
   14cb4:	e03b      	b.n	14d2e <cbvprintf_package+0x426>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
   14cb6:	4453      	add	r3, sl
   14cb8:	f1a3 0008 	sub.w	r0, r3, #8
   14cbc:	e054      	b.n	14d68 <cbvprintf_package+0x460>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
   14cbe:	9b06      	ldr	r3, [sp, #24]
   14cc0:	707b      	strb	r3, [r7, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
   14cc2:	e7ed      	b.n	14ca0 <cbvprintf_package+0x398>
		for (i = 0; i < s_idx; i++) {
   14cc4:	3301      	adds	r3, #1
   14cc6:	4298      	cmp	r0, r3
   14cc8:	d9ed      	bls.n	14ca6 <cbvprintf_package+0x39e>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
   14cca:	f103 0240 	add.w	r2, r3, #64	; 0x40
   14cce:	446a      	add	r2, sp
   14cd0:	f812 1c10 	ldrb.w	r1, [r2, #-16]
   14cd4:	f912 2c10 	ldrsb.w	r2, [r2, #-16]
   14cd8:	2a00      	cmp	r2, #0
   14cda:	daf3      	bge.n	14cc4 <cbvprintf_package+0x3bc>
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
   14cdc:	f001 017f 	and.w	r1, r1, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
   14ce0:	1be2      	subs	r2, r4, r7
   14ce2:	3201      	adds	r2, #1
   14ce4:	4552      	cmp	r2, sl
   14ce6:	d857      	bhi.n	14d98 <cbvprintf_package+0x490>
			*buf++ = pos;
   14ce8:	f804 1b01 	strb.w	r1, [r4], #1
   14cec:	e7ea      	b.n	14cc4 <cbvprintf_package+0x3bc>
		for (i = 0; i < s_idx; i++) {
   14cee:	9b01      	ldr	r3, [sp, #4]
   14cf0:	9803      	ldr	r0, [sp, #12]
   14cf2:	e7e8      	b.n	14cc6 <cbvprintf_package+0x3be>
		if (rws_pos_en) {
   14cf4:	9b00      	ldr	r3, [sp, #0]
   14cf6:	b33b      	cbz	r3, 14d48 <cbvprintf_package+0x440>
			*buf++ = str_ptr_arg[i];
   14cf8:	f105 0340 	add.w	r3, r5, #64	; 0x40
   14cfc:	446b      	add	r3, sp
   14cfe:	f813 3c20 	ldrb.w	r3, [r3, #-32]
   14d02:	f804 3b01 	strb.w	r3, [r4], #1
			size = 0;
   14d06:	9e01      	ldr	r6, [sp, #4]
		}

		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
   14d08:	1be3      	subs	r3, r4, r7
   14d0a:	4433      	add	r3, r6
   14d0c:	3301      	adds	r3, #1
   14d0e:	4553      	cmp	r3, sl
   14d10:	d845      	bhi.n	14d9e <cbvprintf_package+0x496>
			return -ENOSPC;
		}
		/* store the pointer position prefix */
		*buf++ = str_ptr_pos[i];
   14d12:	f105 0340 	add.w	r3, r5, #64	; 0x40
   14d16:	446b      	add	r3, sp
   14d18:	f813 3c10 	ldrb.w	r3, [r3, #-16]
   14d1c:	f804 3b01 	strb.w	r3, [r4], #1
		/* copy the string with its terminating '\0' */
		memcpy(buf, s, size);
   14d20:	4632      	mov	r2, r6
   14d22:	4641      	mov	r1, r8
   14d24:	4620      	mov	r0, r4
   14d26:	f013 fcac 	bl	28682 <memcpy>
		buf += size;
   14d2a:	4434      	add	r4, r6
	for (i = 0; i < s_idx; i++) {
   14d2c:	3501      	adds	r5, #1
   14d2e:	45a9      	cmp	r9, r5
   14d30:	d919      	bls.n	14d66 <cbvprintf_package+0x45e>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
   14d32:	f1bb 0f00 	cmp.w	fp, #0
   14d36:	d0dd      	beq.n	14cf4 <cbvprintf_package+0x3ec>
   14d38:	f105 0340 	add.w	r3, r5, #64	; 0x40
   14d3c:	446b      	add	r3, sp
   14d3e:	f913 3c10 	ldrsb.w	r3, [r3, #-16]
   14d42:	2b00      	cmp	r3, #0
   14d44:	dad6      	bge.n	14cf4 <cbvprintf_package+0x3ec>
   14d46:	e7f1      	b.n	14d2c <cbvprintf_package+0x424>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
   14d48:	f105 0340 	add.w	r3, r5, #64	; 0x40
   14d4c:	446b      	add	r3, sp
   14d4e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
   14d52:	f857 8023 	ldr.w	r8, [r7, r3, lsl #2]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
   14d56:	2200      	movs	r2, #0
   14d58:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
			size = strlen(s) + 1;
   14d5c:	4640      	mov	r0, r8
   14d5e:	f013 fc60 	bl	28622 <strlen>
   14d62:	1c46      	adds	r6, r0, #1
   14d64:	e7d0      	b.n	14d08 <cbvprintf_package+0x400>
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return BUF_OFFSET;
   14d66:	1be0      	subs	r0, r4, r7

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
   14d68:	b011      	add	sp, #68	; 0x44
   14d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EFAULT;
   14d6e:	f06f 000d 	mvn.w	r0, #13
   14d72:	e7f9      	b.n	14d68 <cbvprintf_package+0x460>
		return -ENOSPC;
   14d74:	f06f 001b 	mvn.w	r0, #27
   14d78:	e7f6      	b.n	14d68 <cbvprintf_package+0x460>
			return -ENOSPC;
   14d7a:	f06f 001b 	mvn.w	r0, #27
   14d7e:	e7f3      	b.n	14d68 <cbvprintf_package+0x460>
					return -EINVAL;
   14d80:	f06f 0015 	mvn.w	r0, #21
   14d84:	e7f0      	b.n	14d68 <cbvprintf_package+0x460>
					return -EINVAL;
   14d86:	f06f 0015 	mvn.w	r0, #21
   14d8a:	e7ed      	b.n	14d68 <cbvprintf_package+0x460>
			return -EINVAL;
   14d8c:	f06f 0015 	mvn.w	r0, #21
   14d90:	e7ea      	b.n	14d68 <cbvprintf_package+0x460>
		return -EINVAL;
   14d92:	f06f 0015 	mvn.w	r0, #21
   14d96:	e7e7      	b.n	14d68 <cbvprintf_package+0x460>
				return -ENOSPC;
   14d98:	f06f 001b 	mvn.w	r0, #27
   14d9c:	e7e4      	b.n	14d68 <cbvprintf_package+0x460>
			return -ENOSPC;
   14d9e:	f06f 001b 	mvn.w	r0, #27
   14da2:	e7e1      	b.n	14d68 <cbvprintf_package+0x460>
   14da4:	0002db18 	.word	0x0002db18
   14da8:	000313b0 	.word	0x000313b0

00014dac <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
   14dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14db0:	b097      	sub	sp, #92	; 0x5c
   14db2:	af00      	add	r7, sp, #0
   14db4:	4683      	mov	fp, r0
   14db6:	61ba      	str	r2, [r7, #24]
   14db8:	613b      	str	r3, [r7, #16]
	__ASSERT_NO_MSG(in_packaged != NULL);

	uint8_t *buf = in_packaged;
	uint32_t *buf32 = in_packaged;
	unsigned int args_size, ros_nbr, rws_nbr;
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
   14dba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   14dbe:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   14dc2:	623b      	str	r3, [r7, #32]
	bool rw_cpy;
	bool ro_cpy;
	struct cbprintf_package_desc *in_desc = in_packaged;

	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
   14dc4:	60f9      	str	r1, [r7, #12]
   14dc6:	b151      	cbz	r1, 14dde <cbprintf_package_convert+0x32>

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = in_desc->ro_str_cnt;
   14dc8:	f89b 6002 	ldrb.w	r6, [fp, #2]
   14dcc:	46b1      	mov	r9, r6
	ro_cpy = ros_nbr &&
   14dce:	b156      	cbz	r6, 14de6 <cbprintf_package_convert+0x3a>
   14dd0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   14dd4:	f013 0f01 	tst.w	r3, #1
   14dd8:	d111      	bne.n	14dfe <cbprintf_package_convert+0x52>
   14dda:	2300      	movs	r3, #0
   14ddc:	e004      	b.n	14de8 <cbprintf_package_convert+0x3c>
	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
   14dde:	f011 fe51 	bl	26a84 <get_package_len>
   14de2:	60f8      	str	r0, [r7, #12]
   14de4:	e7f0      	b.n	14dc8 <cbprintf_package_convert+0x1c>
	ro_cpy = ros_nbr &&
   14de6:	2300      	movs	r3, #0
		(flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) == CBPRINTF_PACKAGE_CONVERT_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = in_desc->rw_str_cnt;
   14de8:	f89b 2003 	ldrb.w	r2, [fp, #3]
   14dec:	627a      	str	r2, [r7, #36]	; 0x24
	rw_cpy = rws_nbr > 0 &&
   14dee:	b142      	cbz	r2, 14e02 <cbprintf_package_convert+0x56>
   14df0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
   14df4:	f012 0f02 	tst.w	r2, #2
   14df8:	d122      	bne.n	14e40 <cbprintf_package_convert+0x94>
   14dfa:	2200      	movs	r2, #0
   14dfc:	e002      	b.n	14e04 <cbprintf_package_convert+0x58>
	ro_cpy = ros_nbr &&
   14dfe:	2301      	movs	r3, #1
   14e00:	e7f2      	b.n	14de8 <cbprintf_package_convert+0x3c>
	rw_cpy = rws_nbr > 0 &&
   14e02:	2200      	movs	r2, #0

	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
   14e04:	b902      	cbnz	r2, 14e08 <cbprintf_package_convert+0x5c>
   14e06:	b1eb      	cbz	r3, 14e44 <cbprintf_package_convert+0x98>

	/* If we got here, it means that coping will be more complex and will be
	 * done with strings appending.
	 * Retrieve the size of the arg list.
	 */
	args_size = in_desc->len * sizeof(int);
   14e08:	f89b 5000 	ldrb.w	r5, [fp]
   14e0c:	00aa      	lsls	r2, r5, #2
   14e0e:	60ba      	str	r2, [r7, #8]
	int out_len;

	/* Pointer to array with string locations. Array starts with read-only
	 * string locations.
	 */
	const char *fmt = *(const char **)(buf + sizeof(void *));
   14e10:	f8db 2004 	ldr.w	r2, [fp, #4]
   14e14:	617a      	str	r2, [r7, #20]
	uint8_t *str_pos = &buf[args_size];
   14e16:	eb0b 0585 	add.w	r5, fp, r5, lsl #2
	size_t strl_cnt = 0;

	/* If null destination, just calculate output length. */
	if (cb == NULL) {
   14e1a:	69ba      	ldr	r2, [r7, #24]
   14e1c:	b1f2      	cbz	r2, 14e5c <cbprintf_package_convert+0xb0>

	/* If read-only strings shall be appended to the output package copy
	 * their indexes to the local array, otherwise indicate that indexes
	 * shall remain in the output package.
	 */
	if (ro_cpy) {
   14e1e:	2b00      	cmp	r3, #0
   14e20:	f040 8112 	bne.w	15048 <cbprintf_package_convert+0x29c>
		scpy_cnt = ros_nbr;
		keep_cnt = 0;
		dst = cpy_str_pos;
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   14e24:	f1b9 0f00 	cmp.w	r9, #0
   14e28:	f000 811d 	beq.w	15066 <cbprintf_package_convert+0x2ba>
   14e2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   14e30:	f013 0f04 	tst.w	r3, #4
   14e34:	f040 811b 	bne.w	1506e <cbprintf_package_convert+0x2c2>
		keep_cnt = ros_nbr;
		dst = keep_str_pos;
	} else {
		scpy_cnt = 0;
		keep_cnt = 0;
		dst = NULL;
   14e38:	2000      	movs	r0, #0
		keep_cnt = 0;
   14e3a:	61f8      	str	r0, [r7, #28]
		scpy_cnt = 0;
   14e3c:	4606      	mov	r6, r0
   14e3e:	e107      	b.n	15050 <cbprintf_package_convert+0x2a4>
	rw_cpy = rws_nbr > 0 &&
   14e40:	2201      	movs	r2, #1
   14e42:	e7df      	b.n	14e04 <cbprintf_package_convert+0x58>
		if (cb) {
   14e44:	69bb      	ldr	r3, [r7, #24]
   14e46:	b11b      	cbz	r3, 14e50 <cbprintf_package_convert+0xa4>
			cb(in_packaged, in_len, ctx);
   14e48:	693a      	ldr	r2, [r7, #16]
   14e4a:	68f9      	ldr	r1, [r7, #12]
   14e4c:	4658      	mov	r0, fp
   14e4e:	4798      	blx	r3
		return in_len;
   14e50:	68fc      	ldr	r4, [r7, #12]

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
   14e52:	4620      	mov	r0, r4
   14e54:	375c      	adds	r7, #92	; 0x5c
   14e56:	46bd      	mov	sp, r7
   14e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		out_len = (int)in_len;
   14e5c:	68fc      	ldr	r4, [r7, #12]
		if (ro_cpy) {
   14e5e:	bb2b      	cbnz	r3, 14eac <cbprintf_package_convert+0x100>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   14e60:	f1b9 0f00 	cmp.w	r9, #0
   14e64:	d038      	beq.n	14ed8 <cbprintf_package_convert+0x12c>
   14e66:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   14e6a:	f013 0304 	ands.w	r3, r3, #4
   14e6e:	613b      	str	r3, [r7, #16]
   14e70:	d027      	beq.n	14ec2 <cbprintf_package_convert+0x116>
				str_pos += ros_nbr;
   14e72:	444d      	add	r5, r9
	size_t strl_cnt = 0;
   14e74:	2300      	movs	r3, #0
   14e76:	613b      	str	r3, [r7, #16]
   14e78:	e023      	b.n	14ec2 <cbprintf_package_convert+0x116>
				out_len += len;
   14e7a:	4404      	add	r4, r0
				str_pos++;
   14e7c:	3501      	adds	r5, #1
			for (int i = 0; i < ros_nbr; i++) {
   14e7e:	3601      	adds	r6, #1
   14e80:	454e      	cmp	r6, r9
   14e82:	d21a      	bcs.n	14eba <cbprintf_package_convert+0x10e>
				const char *str = *(const char **)&buf32[*str_pos];
   14e84:	782a      	ldrb	r2, [r5, #0]
				int len = append_string(cb, NULL, str, 0);
   14e86:	2300      	movs	r3, #0
   14e88:	f85b 2022 	ldr.w	r2, [fp, r2, lsl #2]
   14e8c:	4619      	mov	r1, r3
   14e8e:	69b8      	ldr	r0, [r7, #24]
   14e90:	f011 fe0d 	bl	26aae <append_string>
				if (strl && strl_cnt < strl_len) {
   14e94:	f1ba 0f00 	cmp.w	sl, #0
   14e98:	d0ef      	beq.n	14e7a <cbprintf_package_convert+0xce>
   14e9a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
   14e9e:	4598      	cmp	r8, r3
   14ea0:	d2eb      	bcs.n	14e7a <cbprintf_package_convert+0xce>
					strl[strl_cnt++] = (uint16_t)len;
   14ea2:	f82a 0018 	strh.w	r0, [sl, r8, lsl #1]
   14ea6:	f108 0801 	add.w	r8, r8, #1
   14eaa:	e7e6      	b.n	14e7a <cbprintf_package_convert+0xce>
			for (int i = 0; i < ros_nbr; i++) {
   14eac:	2600      	movs	r6, #0
	size_t strl_cnt = 0;
   14eae:	46b0      	mov	r8, r6
   14eb0:	f8c7 a01c 	str.w	sl, [r7, #28]
   14eb4:	f8d7 a084 	ldr.w	sl, [r7, #132]	; 0x84
   14eb8:	e7e2      	b.n	14e80 <cbprintf_package_convert+0xd4>
   14eba:	f8c7 8010 	str.w	r8, [r7, #16]
   14ebe:	f8d7 a01c 	ldr.w	sl, [r7, #28]
		bool drop_ro_str_pos = !(flags &
   14ec2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   14ec6:	f003 0305 	and.w	r3, r3, #5
   14eca:	60fb      	str	r3, [r7, #12]
		for (int i = 0; i < rws_nbr; i++) {
   14ecc:	f04f 0800 	mov.w	r8, #0
   14ed0:	46a1      	mov	r9, r4
   14ed2:	f8c7 b01c 	str.w	fp, [r7, #28]
   14ed6:	e0a1      	b.n	1501c <cbprintf_package_convert+0x270>
	size_t strl_cnt = 0;
   14ed8:	f8c7 9010 	str.w	r9, [r7, #16]
   14edc:	e7f1      	b.n	14ec2 <cbprintf_package_convert+0x116>
   14ede:	2500      	movs	r5, #0
			if (fmt_present && is_ptr(fmt, arg_idx)) {
   14ee0:	6a3b      	ldr	r3, [r7, #32]
   14ee2:	b97b      	cbnz	r3, 14f04 <cbprintf_package_convert+0x158>
			if (is_ro) {
   14ee4:	2d00      	cmp	r5, #0
   14ee6:	d07b      	beq.n	14fe0 <cbprintf_package_convert+0x234>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
   14ee8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   14eec:	f013 0f01 	tst.w	r3, #1
   14ef0:	d17b      	bne.n	14fea <cbprintf_package_convert+0x23e>
					out_len -= drop_ro_str_pos ? 2 : 1;
   14ef2:	68fb      	ldr	r3, [r7, #12]
   14ef4:	2b00      	cmp	r3, #0
   14ef6:	d171      	bne.n	14fdc <cbprintf_package_convert+0x230>
   14ef8:	2302      	movs	r3, #2
   14efa:	eba9 0903 	sub.w	r9, r9, r3
   14efe:	e08a      	b.n	15016 <cbprintf_package_convert+0x26a>
   14f00:	2501      	movs	r5, #1
   14f02:	e7ed      	b.n	14ee0 <cbprintf_package_convert+0x134>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
   14f04:	4659      	mov	r1, fp
   14f06:	6978      	ldr	r0, [r7, #20]
   14f08:	f011 fe18 	bl	26b3c <is_ptr>
   14f0c:	2800      	cmp	r0, #0
   14f0e:	d0e9      	beq.n	14ee4 <cbprintf_package_convert+0x138>
				LOG_WRN("(unsigned) char * used for %%p argument. "
   14f10:	466c      	mov	r4, sp
   14f12:	2300      	movs	r3, #0
   14f14:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
   14f18:	2302      	movs	r3, #2
   14f1a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
   14f1e:	b08a      	sub	sp, #40	; 0x28
   14f20:	4669      	mov	r1, sp
   14f22:	f111 0210 	adds.w	r2, r1, #16
   14f26:	d039      	beq.n	14f9c <cbprintf_package_convert+0x1f0>
   14f28:	2512      	movs	r5, #18
   14f2a:	b11a      	cbz	r2, 14f34 <cbprintf_package_convert+0x188>
   14f2c:	2d04      	cmp	r5, #4
   14f2e:	dd01      	ble.n	14f34 <cbprintf_package_convert+0x188>
   14f30:	4bb3      	ldr	r3, [pc, #716]	; (15200 <cbprintf_package_convert+0x454>)
   14f32:	614b      	str	r3, [r1, #20]
   14f34:	2300      	movs	r3, #0
   14f36:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
   14f3a:	2302      	movs	r3, #2
   14f3c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
   14f40:	bb7a      	cbnz	r2, 14fa2 <cbprintf_package_convert+0x1f6>
   14f42:	2d11      	cmp	r5, #17
   14f44:	dd47      	ble.n	14fd6 <cbprintf_package_convert+0x22a>
   14f46:	2312      	movs	r3, #18
   14f48:	b162      	cbz	r2, 14f64 <cbprintf_package_convert+0x1b8>
   14f4a:	2004      	movs	r0, #4
   14f4c:	f887 002c 	strb.w	r0, [r7, #44]	; 0x2c
   14f50:	2000      	movs	r0, #0
   14f52:	f887 002d 	strb.w	r0, [r7, #45]	; 0x2d
   14f56:	f887 002e 	strb.w	r0, [r7, #46]	; 0x2e
   14f5a:	2001      	movs	r0, #1
   14f5c:	f887 002f 	strb.w	r0, [r7, #47]	; 0x2f
   14f60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   14f62:	6108      	str	r0, [r1, #16]
   14f64:	f36f 0a00 	bfc	sl, #0, #1
   14f68:	f36f 0a41 	bfc	sl, #1, #1
   14f6c:	f36f 0a82 	bfc	sl, #2, #1
   14f70:	f36f 0ac5 	bfc	sl, #3, #3
   14f74:	2102      	movs	r1, #2
   14f76:	f361 1a88 	bfi	sl, r1, #6, #3
   14f7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
   14f7e:	f363 2a52 	bfi	sl, r3, #9, #10
   14f82:	f36f 4ade 	bfc	sl, #19, #12
   14f86:	f36f 7adf 	bfc	sl, #31, #1
   14f8a:	2300      	movs	r3, #0
   14f8c:	4651      	mov	r1, sl
   14f8e:	489d      	ldr	r0, [pc, #628]	; (15204 <cbprintf_package_convert+0x458>)
   14f90:	f012 ff3d 	bl	27e0e <z_impl_z_log_msg_static_create>
   14f94:	46a5      	mov	sp, r4
				out_len -= 2;
   14f96:	f1a9 0902 	sub.w	r9, r9, #2
				continue;
   14f9a:	e03c      	b.n	15016 <cbprintf_package_convert+0x26a>
				LOG_WRN("(unsigned) char * used for %%p argument. "
   14f9c:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   14fa0:	e7c3      	b.n	14f2a <cbprintf_package_convert+0x17e>
   14fa2:	462b      	mov	r3, r5
   14fa4:	2d08      	cmp	r5, #8
   14fa6:	dd01      	ble.n	14fac <cbprintf_package_convert+0x200>
   14fa8:	6978      	ldr	r0, [r7, #20]
   14faa:	6188      	str	r0, [r1, #24]
   14fac:	2b0c      	cmp	r3, #12
   14fae:	dd01      	ble.n	14fb4 <cbprintf_package_convert+0x208>
   14fb0:	f8c1 b01c 	str.w	fp, [r1, #28]
   14fb4:	f101 0320 	add.w	r3, r1, #32
   14fb8:	2000      	movs	r0, #0
   14fba:	e009      	b.n	14fd0 <cbprintf_package_convert+0x224>
   14fbc:	f100 0c30 	add.w	ip, r0, #48	; 0x30
   14fc0:	f107 0e28 	add.w	lr, r7, #40	; 0x28
   14fc4:	44f4      	add	ip, lr
   14fc6:	f81c cc30 	ldrb.w	ip, [ip, #-48]
   14fca:	f803 cb01 	strb.w	ip, [r3], #1
   14fce:	3001      	adds	r0, #1
   14fd0:	2801      	cmp	r0, #1
   14fd2:	d9f3      	bls.n	14fbc <cbprintf_package_convert+0x210>
   14fd4:	e7b5      	b.n	14f42 <cbprintf_package_convert+0x196>
   14fd6:	f06f 031b 	mvn.w	r3, #27
   14fda:	e7b5      	b.n	14f48 <cbprintf_package_convert+0x19c>
					out_len -= drop_ro_str_pos ? 2 : 1;
   14fdc:	2301      	movs	r3, #1
   14fde:	e78c      	b.n	14efa <cbprintf_package_convert+0x14e>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   14fe0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   14fe4:	f013 0f02 	tst.w	r3, #2
   14fe8:	d015      	beq.n	15016 <cbprintf_package_convert+0x26a>
				len = append_string(cb, NULL, str, 0);
   14fea:	2300      	movs	r3, #0
   14fec:	4622      	mov	r2, r4
   14fee:	4619      	mov	r1, r3
   14ff0:	69b8      	ldr	r0, [r7, #24]
   14ff2:	f011 fd5c 	bl	26aae <append_string>
				if (strl && strl_cnt < strl_len) {
   14ff6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   14ffa:	b153      	cbz	r3, 15012 <cbprintf_package_convert+0x266>
   14ffc:	693b      	ldr	r3, [r7, #16]
   14ffe:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
   15002:	4293      	cmp	r3, r2
   15004:	d205      	bcs.n	15012 <cbprintf_package_convert+0x266>
					strl[strl_cnt++] = (uint16_t)len;
   15006:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
   1500a:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
   1500e:	3301      	adds	r3, #1
   15010:	613b      	str	r3, [r7, #16]
				out_len += (len - 1);
   15012:	3801      	subs	r0, #1
   15014:	4481      	add	r9, r0
		for (int i = 0; i < rws_nbr; i++) {
   15016:	f108 0801 	add.w	r8, r8, #1
			uint8_t arg_pos = *str_pos++;
   1501a:	4635      	mov	r5, r6
		for (int i = 0; i < rws_nbr; i++) {
   1501c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1501e:	4598      	cmp	r8, r3
   15020:	d210      	bcs.n	15044 <cbprintf_package_convert+0x298>
			uint8_t arg_idx = *str_pos++;
   15022:	462e      	mov	r6, r5
   15024:	f816 bb02 	ldrb.w	fp, [r6], #2
			uint8_t arg_pos = *str_pos++;
   15028:	786b      	ldrb	r3, [r5, #1]
			const char *str = *(const char **)&buf32[arg_pos];
   1502a:	69fa      	ldr	r2, [r7, #28]
   1502c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   15030:	4b75      	ldr	r3, [pc, #468]	; (15208 <cbprintf_package_convert+0x45c>)
   15032:	429c      	cmp	r4, r3
   15034:	f4ff af53 	bcc.w	14ede <cbprintf_package_convert+0x132>
   15038:	4b74      	ldr	r3, [pc, #464]	; (1520c <cbprintf_package_convert+0x460>)
   1503a:	429c      	cmp	r4, r3
   1503c:	f4ff af60 	bcc.w	14f00 <cbprintf_package_convert+0x154>
   15040:	2500      	movs	r5, #0
   15042:	e74d      	b.n	14ee0 <cbprintf_package_convert+0x134>
   15044:	464c      	mov	r4, r9
   15046:	e704      	b.n	14e52 <cbprintf_package_convert+0xa6>
		dst = cpy_str_pos;
   15048:	f107 0044 	add.w	r0, r7, #68	; 0x44
		keep_cnt = 0;
   1504c:	2300      	movs	r3, #0
   1504e:	61fb      	str	r3, [r7, #28]
	if (dst) {
   15050:	b118      	cbz	r0, 1505a <cbprintf_package_convert+0x2ae>
		memcpy(dst, str_pos, ros_nbr);
   15052:	464a      	mov	r2, r9
   15054:	4629      	mov	r1, r5
   15056:	f013 fb14 	bl	28682 <memcpy>
	str_pos += ros_nbr;
   1505a:	444d      	add	r5, r9
	for (int i = 0; i < rws_nbr; i++) {
   1505c:	f04f 0800 	mov.w	r8, #0
   15060:	f8c7 9004 	str.w	r9, [r7, #4]
   15064:	e01e      	b.n	150a4 <cbprintf_package_convert+0x2f8>
		dst = NULL;
   15066:	2000      	movs	r0, #0
		keep_cnt = 0;
   15068:	61f8      	str	r0, [r7, #28]
		scpy_cnt = 0;
   1506a:	4606      	mov	r6, r0
   1506c:	e7f0      	b.n	15050 <cbprintf_package_convert+0x2a4>
		keep_cnt = ros_nbr;
   1506e:	61fe      	str	r6, [r7, #28]
		dst = keep_str_pos;
   15070:	f107 0034 	add.w	r0, r7, #52	; 0x34
		scpy_cnt = 0;
   15074:	2600      	movs	r6, #0
   15076:	e7eb      	b.n	15050 <cbprintf_package_convert+0x2a4>
   15078:	2500      	movs	r5, #0
		if (fmt_present && is_ptr(fmt, arg_idx)) {
   1507a:	6a3b      	ldr	r3, [r7, #32]
   1507c:	bb33      	cbnz	r3, 150cc <cbprintf_package_convert+0x320>
		if (is_ro) {
   1507e:	2d00      	cmp	r5, #0
   15080:	d03b      	beq.n	150fa <cbprintf_package_convert+0x34e>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
   15082:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   15086:	f013 0f01 	tst.w	r3, #1
   1508a:	d026      	beq.n	150da <cbprintf_package_convert+0x32e>
				cpy_str_pos[scpy_cnt++] = arg_pos;
   1508c:	1c73      	adds	r3, r6, #1
   1508e:	f106 0230 	add.w	r2, r6, #48	; 0x30
   15092:	f107 0128 	add.w	r1, r7, #40	; 0x28
   15096:	1856      	adds	r6, r2, r1
   15098:	f806 9c14 	strb.w	r9, [r6, #-20]
   1509c:	b2de      	uxtb	r6, r3
	for (int i = 0; i < rws_nbr; i++) {
   1509e:	f108 0801 	add.w	r8, r8, #1
		uint8_t arg_pos = *str_pos++;
   150a2:	4625      	mov	r5, r4
	for (int i = 0; i < rws_nbr; i++) {
   150a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   150a6:	4598      	cmp	r8, r3
   150a8:	d24a      	bcs.n	15140 <cbprintf_package_convert+0x394>
		uint8_t arg_idx = *str_pos++;
   150aa:	462c      	mov	r4, r5
   150ac:	f814 ab02 	ldrb.w	sl, [r4], #2
		uint8_t arg_pos = *str_pos++;
   150b0:	f895 9001 	ldrb.w	r9, [r5, #1]
		const char *str = *(const char **)&buf32[arg_pos];
   150b4:	f85b 3029 	ldr.w	r3, [fp, r9, lsl #2]
   150b8:	4a53      	ldr	r2, [pc, #332]	; (15208 <cbprintf_package_convert+0x45c>)
   150ba:	4293      	cmp	r3, r2
   150bc:	d3dc      	bcc.n	15078 <cbprintf_package_convert+0x2cc>
   150be:	4a53      	ldr	r2, [pc, #332]	; (1520c <cbprintf_package_convert+0x460>)
   150c0:	4293      	cmp	r3, r2
   150c2:	d301      	bcc.n	150c8 <cbprintf_package_convert+0x31c>
   150c4:	2500      	movs	r5, #0
   150c6:	e7d8      	b.n	1507a <cbprintf_package_convert+0x2ce>
   150c8:	2501      	movs	r5, #1
   150ca:	e7d6      	b.n	1507a <cbprintf_package_convert+0x2ce>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
   150cc:	4651      	mov	r1, sl
   150ce:	6978      	ldr	r0, [r7, #20]
   150d0:	f011 fd34 	bl	26b3c <is_ptr>
   150d4:	2800      	cmp	r0, #0
   150d6:	d0d2      	beq.n	1507e <cbprintf_package_convert+0x2d2>
   150d8:	e7e1      	b.n	1509e <cbprintf_package_convert+0x2f2>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   150da:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   150de:	f013 0f04 	tst.w	r3, #4
   150e2:	d0dc      	beq.n	1509e <cbprintf_package_convert+0x2f2>
				keep_str_pos[keep_cnt++] = arg_pos;
   150e4:	69fa      	ldr	r2, [r7, #28]
   150e6:	1c53      	adds	r3, r2, #1
   150e8:	3230      	adds	r2, #48	; 0x30
   150ea:	f107 0128 	add.w	r1, r7, #40	; 0x28
   150ee:	440a      	add	r2, r1
   150f0:	f802 9c24 	strb.w	r9, [r2, #-36]
   150f4:	b2db      	uxtb	r3, r3
   150f6:	61fb      	str	r3, [r7, #28]
   150f8:	e7d1      	b.n	1509e <cbprintf_package_convert+0x2f2>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   150fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   150fe:	f013 0f02 	tst.w	r3, #2
   15102:	d009      	beq.n	15118 <cbprintf_package_convert+0x36c>
				cpy_str_pos[scpy_cnt++] = arg_pos;
   15104:	1c73      	adds	r3, r6, #1
   15106:	f106 0230 	add.w	r2, r6, #48	; 0x30
   1510a:	f107 0128 	add.w	r1, r7, #40	; 0x28
   1510e:	1856      	adds	r6, r2, r1
   15110:	f806 9c14 	strb.w	r9, [r6, #-20]
   15114:	b2de      	uxtb	r6, r3
   15116:	e7c2      	b.n	1509e <cbprintf_package_convert+0x2f2>
				keep_str_pos[keep_cnt++] = arg_idx;
   15118:	69f8      	ldr	r0, [r7, #28]
   1511a:	1c43      	adds	r3, r0, #1
   1511c:	f100 0130 	add.w	r1, r0, #48	; 0x30
   15120:	f107 0228 	add.w	r2, r7, #40	; 0x28
   15124:	188a      	adds	r2, r1, r2
   15126:	f802 ac24 	strb.w	sl, [r2, #-36]
				keep_str_pos[keep_cnt++] = arg_pos;
   1512a:	4602      	mov	r2, r0
   1512c:	3202      	adds	r2, #2
   1512e:	b2d2      	uxtb	r2, r2
   15130:	61fa      	str	r2, [r7, #28]
   15132:	f107 0258 	add.w	r2, r7, #88	; 0x58
   15136:	fa52 f383 	uxtab	r3, r2, r3
   1513a:	f803 9c24 	strb.w	r9, [r3, #-36]
   1513e:	e7ae      	b.n	1509e <cbprintf_package_convert+0x2f2>
	out_desc.len = in_desc->len;
   15140:	f8d7 9004 	ldr.w	r9, [r7, #4]
   15144:	f89b 3000 	ldrb.w	r3, [fp]
   15148:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
   1514c:	f89b 3001 	ldrb.w	r3, [fp, #1]
   15150:	4433      	add	r3, r6
   15152:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
   15156:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   1515a:	f013 0f02 	tst.w	r3, #2
   1515e:	d10e      	bne.n	1517e <cbprintf_package_convert+0x3d2>
   15160:	69fb      	ldr	r3, [r7, #28]
   15162:	f3c3 0347 	ubfx	r3, r3, #1, #8
   15166:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   1516a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   1516e:	f013 0f01 	tst.w	r3, #1
   15172:	d106      	bne.n	15182 <cbprintf_package_convert+0x3d6>
   15174:	f013 0f04 	tst.w	r3, #4
   15178:	d13f      	bne.n	151fa <cbprintf_package_convert+0x44e>
   1517a:	2300      	movs	r3, #0
   1517c:	e002      	b.n	15184 <cbprintf_package_convert+0x3d8>
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
   1517e:	2300      	movs	r3, #0
   15180:	e7f1      	b.n	15166 <cbprintf_package_convert+0x3ba>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   15182:	2300      	movs	r3, #0
   15184:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	struct cbprintf_package_desc in_desc_backup = *in_desc;
   15188:	f8db 0000 	ldr.w	r0, [fp]
   1518c:	6338      	str	r0, [r7, #48]	; 0x30
	*in_desc = out_desc;
   1518e:	6d78      	ldr	r0, [r7, #84]	; 0x54
   15190:	f8cb 0000 	str.w	r0, [fp]
	rv = cb(in_packaged, args_size, ctx);
   15194:	f8d7 8010 	ldr.w	r8, [r7, #16]
   15198:	4642      	mov	r2, r8
   1519a:	68b9      	ldr	r1, [r7, #8]
   1519c:	4658      	mov	r0, fp
   1519e:	f8d7 a018 	ldr.w	sl, [r7, #24]
   151a2:	47d0      	blx	sl
	if (rv < 0) {
   151a4:	1e04      	subs	r4, r0, #0
   151a6:	f6ff ae54 	blt.w	14e52 <cbprintf_package_convert+0xa6>
	*in_desc = in_desc_backup;
   151aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
   151ac:	f8cb 0000 	str.w	r0, [fp]
	rv = cb(keep_str_pos, keep_cnt, ctx);
   151b0:	f8c7 8010 	str.w	r8, [r7, #16]
   151b4:	4642      	mov	r2, r8
   151b6:	69f9      	ldr	r1, [r7, #28]
   151b8:	f107 0034 	add.w	r0, r7, #52	; 0x34
   151bc:	47d0      	blx	sl
	if (rv < 0) {
   151be:	2800      	cmp	r0, #0
   151c0:	db57      	blt.n	15272 <cbprintf_package_convert+0x4c6>
	out_len += rv;
   151c2:	eb04 0800 	add.w	r8, r4, r0
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
   151c6:	68b9      	ldr	r1, [r7, #8]
   151c8:	4449      	add	r1, r9
   151ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   151cc:	eb01 0143 	add.w	r1, r1, r3, lsl #1
	rv = cb(str_pos, strs_len, ctx);
   151d0:	f8d7 9010 	ldr.w	r9, [r7, #16]
   151d4:	464a      	mov	r2, r9
   151d6:	68fb      	ldr	r3, [r7, #12]
   151d8:	1a59      	subs	r1, r3, r1
   151da:	4628      	mov	r0, r5
   151dc:	47d0      	blx	sl
	if (rv < 0) {
   151de:	1e04      	subs	r4, r0, #0
   151e0:	f6ff ae37 	blt.w	14e52 <cbprintf_package_convert+0xa6>
	out_len += rv;
   151e4:	eb08 0504 	add.w	r5, r8, r4
	for (int i = 0; i < scpy_cnt; i++) {
   151e8:	f04f 0800 	mov.w	r8, #0
   151ec:	627e      	str	r6, [r7, #36]	; 0x24
   151ee:	f8c7 b020 	str.w	fp, [r7, #32]
   151f2:	4656      	mov	r6, sl
   151f4:	f8d7 b084 	ldr.w	fp, [r7, #132]	; 0x84
   151f8:	e01f      	b.n	1523a <cbprintf_package_convert+0x48e>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   151fa:	69fb      	ldr	r3, [r7, #28]
   151fc:	e7c2      	b.n	15184 <cbprintf_package_convert+0x3d8>
   151fe:	bf00      	nop
   15200:	0002ed90 	.word	0x0002ed90
   15204:	0002dee0 	.word	0x0002dee0
   15208:	0002db18 	.word	0x0002db18
   1520c:	000313b0 	.word	0x000313b0
		uint16_t str_len = strl ? strl[i] : 0;
   15210:	f04f 0a00 	mov.w	sl, #0
		rv = cb(&loc, 1, ctx);
   15214:	464a      	mov	r2, r9
   15216:	2101      	movs	r1, #1
   15218:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   1521c:	47b0      	blx	r6
		if (rv < 0) {
   1521e:	2800      	cmp	r0, #0
   15220:	db29      	blt.n	15276 <cbprintf_package_convert+0x4ca>
		out_len += rv;
   15222:	4405      	add	r5, r0
		rv = append_string(cb, ctx, str, str_len);
   15224:	4653      	mov	r3, sl
   15226:	4622      	mov	r2, r4
   15228:	4649      	mov	r1, r9
   1522a:	4630      	mov	r0, r6
   1522c:	f011 fc3f 	bl	26aae <append_string>
		if (rv < 0) {
   15230:	2800      	cmp	r0, #0
   15232:	db22      	blt.n	1527a <cbprintf_package_convert+0x4ce>
		out_len += rv;
   15234:	4405      	add	r5, r0
	for (int i = 0; i < scpy_cnt; i++) {
   15236:	f108 0801 	add.w	r8, r8, #1
   1523a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1523c:	4598      	cmp	r8, r3
   1523e:	da11      	bge.n	15264 <cbprintf_package_convert+0x4b8>
		uint8_t loc = cpy_str_pos[i];
   15240:	f108 0330 	add.w	r3, r8, #48	; 0x30
   15244:	f107 0228 	add.w	r2, r7, #40	; 0x28
   15248:	4413      	add	r3, r2
   1524a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   1524e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		const char *str = *(const char **)&buf32[loc];
   15252:	6a3a      	ldr	r2, [r7, #32]
   15254:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
		uint16_t str_len = strl ? strl[i] : 0;
   15258:	f1bb 0f00 	cmp.w	fp, #0
   1525c:	d0d8      	beq.n	15210 <cbprintf_package_convert+0x464>
   1525e:	f83b a018 	ldrh.w	sl, [fp, r8, lsl #1]
   15262:	e7d7      	b.n	15214 <cbprintf_package_convert+0x468>
	(void)cb(NULL, 0, ctx);
   15264:	693a      	ldr	r2, [r7, #16]
   15266:	2100      	movs	r1, #0
   15268:	4608      	mov	r0, r1
   1526a:	69bb      	ldr	r3, [r7, #24]
   1526c:	4798      	blx	r3
	return out_len;
   1526e:	462c      	mov	r4, r5
   15270:	e5ef      	b.n	14e52 <cbprintf_package_convert+0xa6>
		return rv;
   15272:	4604      	mov	r4, r0
   15274:	e5ed      	b.n	14e52 <cbprintf_package_convert+0xa6>
   15276:	4604      	mov	r4, r0
   15278:	e5eb      	b.n	14e52 <cbprintf_package_convert+0xa6>
   1527a:	4604      	mov	r4, r0
   1527c:	e5e9      	b.n	14e52 <cbprintf_package_convert+0xa6>
   1527e:	bf00      	nop

00015280 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
   15280:	4b01      	ldr	r3, [pc, #4]	; (15288 <__printk_hook_install+0x8>)
   15282:	6018      	str	r0, [r3, #0]
}
   15284:	4770      	bx	lr
   15286:	bf00      	nop
   15288:	20000830 	.word	0x20000830

0001528c <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   1528c:	b510      	push	{r4, lr}
   1528e:	b086      	sub	sp, #24
   15290:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
   15292:	9003      	str	r0, [sp, #12]
   15294:	9104      	str	r1, [sp, #16]
   15296:	2100      	movs	r1, #0
   15298:	9105      	str	r1, [sp, #20]
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   1529a:	9100      	str	r1, [sp, #0]
   1529c:	a903      	add	r1, sp, #12
   1529e:	4806      	ldr	r0, [pc, #24]	; (152b8 <vsnprintk+0x2c>)
   152a0:	f000 f924 	bl	154ec <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
   152a4:	9b05      	ldr	r3, [sp, #20]
   152a6:	9a04      	ldr	r2, [sp, #16]
   152a8:	4293      	cmp	r3, r2
   152aa:	da01      	bge.n	152b0 <vsnprintk+0x24>
		str[ctx.count] = '\0';
   152ac:	2200      	movs	r2, #0
   152ae:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
   152b0:	9805      	ldr	r0, [sp, #20]
   152b2:	b006      	add	sp, #24
   152b4:	bd10      	pop	{r4, pc}
   152b6:	bf00      	nop
   152b8:	00026bc9 	.word	0x00026bc9

000152bc <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   152bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   152c0:	b083      	sub	sp, #12
   152c2:	4604      	mov	r4, r0
   152c4:	4608      	mov	r0, r1
   152c6:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   152c8:	8b23      	ldrh	r3, [r4, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   152ca:	f013 0f08 	tst.w	r3, #8
   152ce:	d105      	bne.n	152dc <process_event+0x20>
   152d0:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   152d4:	2300      	movs	r3, #0
   152d6:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
   152d8:	9301      	str	r3, [sp, #4]
}
   152da:	e055      	b.n	15388 <process_event+0xcc>
		if (evt == EVT_COMPLETE) {
   152dc:	2901      	cmp	r1, #1
   152de:	d009      	beq.n	152f4 <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   152e0:	f043 0320 	orr.w	r3, r3, #32
   152e4:	8323      	strh	r3, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   152e6:	f385 8811 	msr	BASEPRI, r5
   152ea:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   152ee:	b003      	add	sp, #12
   152f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   152f4:	f043 0310 	orr.w	r3, r3, #16
   152f8:	8323      	strh	r3, [r4, #24]
   152fa:	e7f4      	b.n	152e6 <process_event+0x2a>
			evt = process_recheck(mgr);
   152fc:	4620      	mov	r0, r4
   152fe:	f011 fed4 	bl	270aa <process_recheck>
   15302:	e043      	b.n	1538c <process_event+0xd0>
			res = mgr->last_res;
   15304:	f8d4 9014 	ldr.w	r9, [r4, #20]
			process_complete(mgr, &clients, res);
   15308:	464a      	mov	r2, r9
   1530a:	4669      	mov	r1, sp
   1530c:	4620      	mov	r0, r4
   1530e:	f011 fee5 	bl	270dc <process_complete>
		onoff_transition_fn transit = NULL;
   15312:	f04f 0800 	mov.w	r8, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   15316:	8b23      	ldrh	r3, [r4, #24]
   15318:	f003 0707 	and.w	r7, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   1531c:	42b7      	cmp	r7, r6
   1531e:	d069      	beq.n	153f4 <process_event+0x138>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   15320:	68a2      	ldr	r2, [r4, #8]
   15322:	2a00      	cmp	r2, #0
   15324:	d066      	beq.n	153f4 <process_event+0x138>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   15326:	2201      	movs	r2, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   15328:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
   1532c:	8323      	strh	r3, [r4, #24]
   1532e:	f385 8811 	msr	BASEPRI, r5
   15332:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   15336:	2a00      	cmp	r2, #0
   15338:	d164      	bne.n	15404 <process_event+0x148>
   1533a:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
   1533c:	b12b      	cbz	r3, 1534a <process_event+0x8e>
				notify_all(mgr, &clients, state, res);
   1533e:	464b      	mov	r3, r9
   15340:	463a      	mov	r2, r7
   15342:	4669      	mov	r1, sp
   15344:	4620      	mov	r0, r4
   15346:	f011 ff42 	bl	271ce <notify_all>
			if (transit != NULL) {
   1534a:	f1b8 0f00 	cmp.w	r8, #0
   1534e:	d002      	beq.n	15356 <process_event+0x9a>
				transit(mgr, transition_complete);
   15350:	4934      	ldr	r1, [pc, #208]	; (15424 <process_event+0x168>)
   15352:	4620      	mov	r0, r4
   15354:	47c0      	blx	r8
	__asm__ volatile(
   15356:	f04f 0340 	mov.w	r3, #64	; 0x40
   1535a:	f3ef 8511 	mrs	r5, BASEPRI
   1535e:	f383 8812 	msr	BASEPRI_MAX, r3
   15362:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   15366:	8b23      	ldrh	r3, [r4, #24]
   15368:	f023 0308 	bic.w	r3, r3, #8
   1536c:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   1536e:	8b23      	ldrh	r3, [r4, #24]
   15370:	f013 0f10 	tst.w	r3, #16
   15374:	d04c      	beq.n	15410 <process_event+0x154>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   15376:	f023 0310 	bic.w	r3, r3, #16
   1537a:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
   1537c:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
   1537e:	8b26      	ldrh	r6, [r4, #24]
   15380:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
   15384:	2800      	cmp	r0, #0
   15386:	d0ae      	beq.n	152e6 <process_event+0x2a>
		if (evt == EVT_RECHECK) {
   15388:	2802      	cmp	r0, #2
   1538a:	d0b7      	beq.n	152fc <process_event+0x40>
		if (evt == EVT_NOP) {
   1538c:	2800      	cmp	r0, #0
   1538e:	d0aa      	beq.n	152e6 <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
   15390:	3801      	subs	r0, #1
   15392:	2804      	cmp	r0, #4
   15394:	d82a      	bhi.n	153ec <process_event+0x130>
   15396:	a301      	add	r3, pc, #4	; (adr r3, 1539c <process_event+0xe0>)
   15398:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
   1539c:	00015305 	.word	0x00015305
   153a0:	000153ed 	.word	0x000153ed
   153a4:	000153b1 	.word	0x000153b1
   153a8:	000153c5 	.word	0x000153c5
   153ac:	000153d9 	.word	0x000153d9
			transit = mgr->transitions->start;
   153b0:	6923      	ldr	r3, [r4, #16]
   153b2:	f8d3 8000 	ldr.w	r8, [r3]
			set_state(mgr, ONOFF_STATE_TO_ON);
   153b6:	2106      	movs	r1, #6
   153b8:	4620      	mov	r0, r4
   153ba:	f011 fe4c 	bl	27056 <set_state>
		res = 0;
   153be:	f04f 0900 	mov.w	r9, #0
   153c2:	e7a8      	b.n	15316 <process_event+0x5a>
			transit = mgr->transitions->stop;
   153c4:	6923      	ldr	r3, [r4, #16]
   153c6:	f8d3 8004 	ldr.w	r8, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
   153ca:	2104      	movs	r1, #4
   153cc:	4620      	mov	r0, r4
   153ce:	f011 fe42 	bl	27056 <set_state>
		res = 0;
   153d2:	f04f 0900 	mov.w	r9, #0
   153d6:	e79e      	b.n	15316 <process_event+0x5a>
			transit = mgr->transitions->reset;
   153d8:	6923      	ldr	r3, [r4, #16]
   153da:	f8d3 8008 	ldr.w	r8, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
   153de:	2105      	movs	r1, #5
   153e0:	4620      	mov	r0, r4
   153e2:	f011 fe38 	bl	27056 <set_state>
		res = 0;
   153e6:	f04f 0900 	mov.w	r9, #0
   153ea:	e794      	b.n	15316 <process_event+0x5a>
		if (evt == EVT_NOP) {
   153ec:	f04f 0800 	mov.w	r8, #0
   153f0:	46c1      	mov	r9, r8
   153f2:	e790      	b.n	15316 <process_event+0x5a>
   153f4:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
   153f6:	b10a      	cbz	r2, 153fc <process_event+0x140>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   153f8:	2200      	movs	r2, #0
   153fa:	e795      	b.n	15328 <process_event+0x6c>
		    || (transit != NULL)) {
   153fc:	f1b8 0f00 	cmp.w	r8, #0
   15400:	d192      	bne.n	15328 <process_event+0x6c>
   15402:	e7b4      	b.n	1536e <process_event+0xb2>
				notify_monitors(mgr, state, res);
   15404:	464a      	mov	r2, r9
   15406:	4639      	mov	r1, r7
   15408:	4620      	mov	r0, r4
   1540a:	f011 fe2c 	bl	27066 <notify_monitors>
   1540e:	e794      	b.n	1533a <process_event+0x7e>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   15410:	f013 0f20 	tst.w	r3, #32
   15414:	d004      	beq.n	15420 <process_event+0x164>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   15416:	f023 0320 	bic.w	r3, r3, #32
   1541a:	8323      	strh	r3, [r4, #24]
			evt = EVT_RECHECK;
   1541c:	2002      	movs	r0, #2
   1541e:	e7ae      	b.n	1537e <process_event+0xc2>
		evt = EVT_NOP;
   15420:	2000      	movs	r0, #0
   15422:	e7ac      	b.n	1537e <process_event+0xc2>
   15424:	000271fd 	.word	0x000271fd

00015428 <extract_flags>:
 *
 * @return a pointer the first character that follows the flags.
 */
static inline const char *extract_flags(struct conversion *conv,
					const char *sp)
{
   15428:	4684      	mov	ip, r0
   1542a:	4608      	mov	r0, r1
	bool loop = true;
   1542c:	2201      	movs	r2, #1
   1542e:	e026      	b.n	1547e <extract_flags+0x56>

	do {
		switch (*sp) {
		case '-':
			conv->flag_dash = true;
   15430:	f89c 3000 	ldrb.w	r3, [ip]
   15434:	f043 0304 	orr.w	r3, r3, #4
   15438:	f88c 3000 	strb.w	r3, [ip]
			conv->flag_zero = true;
			break;
		default:
			loop = false;
		}
		if (loop) {
   1543c:	b1f2      	cbz	r2, 1547c <extract_flags+0x54>
			++sp;
   1543e:	3001      	adds	r0, #1
   15440:	e01c      	b.n	1547c <extract_flags+0x54>
			conv->flag_plus = true;
   15442:	f89c 3000 	ldrb.w	r3, [ip]
   15446:	f043 0308 	orr.w	r3, r3, #8
   1544a:	f88c 3000 	strb.w	r3, [ip]
			break;
   1544e:	e7f5      	b.n	1543c <extract_flags+0x14>
			conv->flag_space = true;
   15450:	f89c 3000 	ldrb.w	r3, [ip]
   15454:	f043 0310 	orr.w	r3, r3, #16
   15458:	f88c 3000 	strb.w	r3, [ip]
			break;
   1545c:	e7ee      	b.n	1543c <extract_flags+0x14>
			conv->flag_hash = true;
   1545e:	f89c 3000 	ldrb.w	r3, [ip]
   15462:	f043 0320 	orr.w	r3, r3, #32
   15466:	f88c 3000 	strb.w	r3, [ip]
			break;
   1546a:	e7e7      	b.n	1543c <extract_flags+0x14>
			conv->flag_zero = true;
   1546c:	f89c 3000 	ldrb.w	r3, [ip]
   15470:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   15474:	f88c 3000 	strb.w	r3, [ip]
			break;
   15478:	e7e0      	b.n	1543c <extract_flags+0x14>
		switch (*sp) {
   1547a:	2200      	movs	r2, #0
		}
	} while (loop);
   1547c:	b342      	cbz	r2, 154d0 <extract_flags+0xa8>
		switch (*sp) {
   1547e:	7803      	ldrb	r3, [r0, #0]
   15480:	3b20      	subs	r3, #32
   15482:	2b10      	cmp	r3, #16
   15484:	d8f9      	bhi.n	1547a <extract_flags+0x52>
   15486:	a101      	add	r1, pc, #4	; (adr r1, 1548c <extract_flags+0x64>)
   15488:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   1548c:	00015451 	.word	0x00015451
   15490:	0001547b 	.word	0x0001547b
   15494:	0001547b 	.word	0x0001547b
   15498:	0001545f 	.word	0x0001545f
   1549c:	0001547b 	.word	0x0001547b
   154a0:	0001547b 	.word	0x0001547b
   154a4:	0001547b 	.word	0x0001547b
   154a8:	0001547b 	.word	0x0001547b
   154ac:	0001547b 	.word	0x0001547b
   154b0:	0001547b 	.word	0x0001547b
   154b4:	0001547b 	.word	0x0001547b
   154b8:	00015443 	.word	0x00015443
   154bc:	0001547b 	.word	0x0001547b
   154c0:	00015431 	.word	0x00015431
   154c4:	0001547b 	.word	0x0001547b
   154c8:	0001547b 	.word	0x0001547b
   154cc:	0001546d 	.word	0x0001546d

	/* zero && dash => !zero */
	if (conv->flag_zero && conv->flag_dash) {
   154d0:	f89c 3000 	ldrb.w	r3, [ip]
   154d4:	f003 0344 	and.w	r3, r3, #68	; 0x44
   154d8:	2b44      	cmp	r3, #68	; 0x44
   154da:	d000      	beq.n	154de <extract_flags+0xb6>
	}

	/* space && plus => !plus, handled in emitter code */

	return sp;
}
   154dc:	4770      	bx	lr
		conv->flag_zero = false;
   154de:	f89c 3000 	ldrb.w	r3, [ip]
   154e2:	f36f 1386 	bfc	r3, #6, #1
   154e6:	f88c 3000 	strb.w	r3, [ip]
   154ea:	e7f7      	b.n	154dc <extract_flags+0xb4>

000154ec <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
   154ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   154f0:	b091      	sub	sp, #68	; 0x44
   154f2:	4606      	mov	r6, r0
   154f4:	460d      	mov	r5, r1
   154f6:	4691      	mov	r9, r2
   154f8:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   154fa:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   154fc:	f899 0000 	ldrb.w	r0, [r9]
   15500:	2800      	cmp	r0, #0
   15502:	f000 82b9 	beq.w	15a78 <z_cbvprintf_impl+0x58c>
		if (*fp != '%') {
   15506:	2825      	cmp	r0, #37	; 0x25
   15508:	d008      	beq.n	1551c <z_cbvprintf_impl+0x30>
			OUTC(*fp++);
   1550a:	f109 0901 	add.w	r9, r9, #1
   1550e:	4629      	mov	r1, r5
   15510:	47b0      	blx	r6
   15512:	2800      	cmp	r0, #0
   15514:	f2c0 82b1 	blt.w	15a7a <z_cbvprintf_impl+0x58e>
   15518:	3401      	adds	r4, #1
			continue;
   1551a:	e7ef      	b.n	154fc <z_cbvprintf_impl+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
   1551c:	2300      	movs	r3, #0
   1551e:	9304      	str	r3, [sp, #16]
   15520:	9305      	str	r3, [sp, #20]
   15522:	9306      	str	r3, [sp, #24]
   15524:	9307      	str	r3, [sp, #28]
   15526:	9308      	str	r3, [sp, #32]
   15528:	9309      	str	r3, [sp, #36]	; 0x24
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
		char sign = 0;

		fp = extract_conversion(conv, sp);
   1552a:	4649      	mov	r1, r9
   1552c:	a806      	add	r0, sp, #24
   1552e:	f012 f895 	bl	2765c <extract_conversion>
   15532:	9002      	str	r0, [sp, #8]

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
   15534:	f89d 3019 	ldrb.w	r3, [sp, #25]
   15538:	f013 0f01 	tst.w	r3, #1
   1553c:	f000 8097 	beq.w	1566e <z_cbvprintf_impl+0x182>
			width = va_arg(ap, int);
   15540:	9b03      	ldr	r3, [sp, #12]
   15542:	1d1a      	adds	r2, r3, #4
   15544:	9203      	str	r2, [sp, #12]
   15546:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
   15548:	2f00      	cmp	r7, #0
   1554a:	f2c0 8088 	blt.w	1565e <z_cbvprintf_impl+0x172>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
   1554e:	f89d 3019 	ldrb.w	r3, [sp, #25]
   15552:	f013 0f04 	tst.w	r3, #4
   15556:	f000 809c 	beq.w	15692 <z_cbvprintf_impl+0x1a6>
			int arg = va_arg(ap, int);
   1555a:	9b03      	ldr	r3, [sp, #12]
   1555c:	1d1a      	adds	r2, r3, #4
   1555e:	9203      	str	r2, [sp, #12]
   15560:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
   15564:	f1ba 0f00 	cmp.w	sl, #0
   15568:	f2c0 808a 	blt.w	15680 <z_cbvprintf_impl+0x194>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
   1556c:	2300      	movs	r3, #0
   1556e:	9307      	str	r3, [sp, #28]
		conv->pad0_pre_exp = 0;
   15570:	9308      	str	r3, [sp, #32]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
   15572:	f89d 301a 	ldrb.w	r3, [sp, #26]
   15576:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
   1557a:	f89d 1019 	ldrb.w	r1, [sp, #25]
   1557e:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
   15582:	2b01      	cmp	r3, #1
   15584:	f000 808e 	beq.w	156a4 <z_cbvprintf_impl+0x1b8>
			if (length_mod == LENGTH_HH) {
				value->sint = (signed char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
   15588:	2b02      	cmp	r3, #2
   1558a:	f000 80d3 	beq.w	15734 <z_cbvprintf_impl+0x248>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
   1558e:	2b04      	cmp	r3, #4
   15590:	f000 8124 	beq.w	157dc <z_cbvprintf_impl+0x2f0>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
   15594:	2b03      	cmp	r3, #3
   15596:	f000 813b 	beq.w	15810 <z_cbvprintf_impl+0x324>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
   1559a:	f89d 8018 	ldrb.w	r8, [sp, #24]
   1559e:	f018 0b03 	ands.w	fp, r8, #3
   155a2:	f040 813b 	bne.w	1581c <z_cbvprintf_impl+0x330>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
   155a6:	f89d 301b 	ldrb.w	r3, [sp, #27]
   155aa:	3b25      	subs	r3, #37	; 0x25
   155ac:	2b53      	cmp	r3, #83	; 0x53
   155ae:	f200 81ca 	bhi.w	15946 <z_cbvprintf_impl+0x45a>
   155b2:	e8df f013 	tbh	[pc, r3, lsl #1]
   155b6:	0140      	.short	0x0140
   155b8:	01c801c8 	.word	0x01c801c8
   155bc:	01c801c8 	.word	0x01c801c8
   155c0:	01c801c8 	.word	0x01c801c8
   155c4:	01c801c8 	.word	0x01c801c8
   155c8:	01c801c8 	.word	0x01c801c8
   155cc:	01c801c8 	.word	0x01c801c8
   155d0:	01c801c8 	.word	0x01c801c8
   155d4:	01c801c8 	.word	0x01c801c8
   155d8:	01c801c8 	.word	0x01c801c8
   155dc:	01c801c8 	.word	0x01c801c8
   155e0:	01c801c8 	.word	0x01c801c8
   155e4:	01c801c8 	.word	0x01c801c8
   155e8:	01c801c8 	.word	0x01c801c8
   155ec:	01c801c8 	.word	0x01c801c8
   155f0:	01c801c8 	.word	0x01c801c8
   155f4:	01c801c8 	.word	0x01c801c8
   155f8:	01c801c8 	.word	0x01c801c8
   155fc:	01c801c8 	.word	0x01c801c8
   15600:	01c801c8 	.word	0x01c801c8
   15604:	01c801c8 	.word	0x01c801c8
   15608:	01c801c8 	.word	0x01c801c8
   1560c:	01c801c8 	.word	0x01c801c8
   15610:	01c801c8 	.word	0x01c801c8
   15614:	01c801c8 	.word	0x01c801c8
   15618:	01c801c8 	.word	0x01c801c8
   1561c:	01c80181 	.word	0x01c80181
   15620:	01c801c8 	.word	0x01c801c8
   15624:	01c801c8 	.word	0x01c801c8
   15628:	01c801c8 	.word	0x01c801c8
   1562c:	01c801c8 	.word	0x01c801c8
   15630:	015e01c8 	.word	0x015e01c8
   15634:	01c80167 	.word	0x01c80167
   15638:	01c801c8 	.word	0x01c801c8
   1563c:	016701c8 	.word	0x016701c8
   15640:	01c801c8 	.word	0x01c801c8
   15644:	01c801c8 	.word	0x01c801c8
   15648:	018101bd 	.word	0x018101bd
   1564c:	01c801a1 	.word	0x01c801a1
   15650:	014d01c8 	.word	0x014d01c8
   15654:	018101c8 	.word	0x018101c8
   15658:	01c801c8 	.word	0x01c801c8
   1565c:	0181      	.short	0x0181
				conv->flag_dash = true;
   1565e:	f89d 3018 	ldrb.w	r3, [sp, #24]
   15662:	f043 0304 	orr.w	r3, r3, #4
   15666:	f88d 3018 	strb.w	r3, [sp, #24]
				width = -width;
   1566a:	427f      	negs	r7, r7
   1566c:	e76f      	b.n	1554e <z_cbvprintf_impl+0x62>
		} else if (conv->width_present) {
   1566e:	f99d 3018 	ldrsb.w	r3, [sp, #24]
   15672:	2b00      	cmp	r3, #0
   15674:	db02      	blt.n	1567c <z_cbvprintf_impl+0x190>
		int width = -1;
   15676:	f04f 37ff 	mov.w	r7, #4294967295
   1567a:	e768      	b.n	1554e <z_cbvprintf_impl+0x62>
			width = conv->width_value;
   1567c:	9f07      	ldr	r7, [sp, #28]
   1567e:	e766      	b.n	1554e <z_cbvprintf_impl+0x62>
				conv->prec_present = false;
   15680:	f89d 3019 	ldrb.w	r3, [sp, #25]
   15684:	f36f 0341 	bfc	r3, #1, #1
   15688:	f88d 3019 	strb.w	r3, [sp, #25]
		int precision = -1;
   1568c:	f04f 3aff 	mov.w	sl, #4294967295
   15690:	e76c      	b.n	1556c <z_cbvprintf_impl+0x80>
		} else if (conv->prec_present) {
   15692:	f013 0f02 	tst.w	r3, #2
   15696:	d002      	beq.n	1569e <z_cbvprintf_impl+0x1b2>
			precision = conv->prec_value;
   15698:	f8dd a020 	ldr.w	sl, [sp, #32]
   1569c:	e766      	b.n	1556c <z_cbvprintf_impl+0x80>
		int precision = -1;
   1569e:	f04f 3aff 	mov.w	sl, #4294967295
   156a2:	e763      	b.n	1556c <z_cbvprintf_impl+0x80>
			switch (length_mod) {
   156a4:	1ecb      	subs	r3, r1, #3
   156a6:	2b04      	cmp	r3, #4
   156a8:	d804      	bhi.n	156b4 <z_cbvprintf_impl+0x1c8>
   156aa:	e8df f003 	tbb	[pc, r3]
   156ae:	1d0b      	.short	0x1d0b
   156b0:	3529      	.short	0x3529
   156b2:	35          	.byte	0x35
   156b3:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
   156b4:	9b03      	ldr	r3, [sp, #12]
   156b6:	1d1a      	adds	r2, r3, #4
   156b8:	9203      	str	r2, [sp, #12]
   156ba:	681b      	ldr	r3, [r3, #0]
   156bc:	17da      	asrs	r2, r3, #31
   156be:	9304      	str	r3, [sp, #16]
   156c0:	9205      	str	r2, [sp, #20]
				break;
   156c2:	e006      	b.n	156d2 <z_cbvprintf_impl+0x1e6>
					value->sint = va_arg(ap, long);
   156c4:	9b03      	ldr	r3, [sp, #12]
   156c6:	1d1a      	adds	r2, r3, #4
   156c8:	9203      	str	r2, [sp, #12]
   156ca:	681b      	ldr	r3, [r3, #0]
   156cc:	17da      	asrs	r2, r3, #31
   156ce:	9304      	str	r3, [sp, #16]
   156d0:	9205      	str	r2, [sp, #20]
			if (length_mod == LENGTH_HH) {
   156d2:	2901      	cmp	r1, #1
   156d4:	d028      	beq.n	15728 <z_cbvprintf_impl+0x23c>
			} else if (length_mod == LENGTH_H) {
   156d6:	2902      	cmp	r1, #2
   156d8:	f47f af5f 	bne.w	1559a <z_cbvprintf_impl+0xae>
				value->sint = (short)value->sint;
   156dc:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
   156e0:	17da      	asrs	r2, r3, #31
   156e2:	9304      	str	r3, [sp, #16]
   156e4:	9205      	str	r2, [sp, #20]
   156e6:	e758      	b.n	1559a <z_cbvprintf_impl+0xae>
					(sint_value_type)va_arg(ap, long long);
   156e8:	9b03      	ldr	r3, [sp, #12]
   156ea:	3307      	adds	r3, #7
   156ec:	f023 0307 	bic.w	r3, r3, #7
   156f0:	f103 0208 	add.w	r2, r3, #8
   156f4:	9203      	str	r2, [sp, #12]
   156f6:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
   156fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
   156fe:	e7e8      	b.n	156d2 <z_cbvprintf_impl+0x1e6>
					(sint_value_type)va_arg(ap, intmax_t);
   15700:	9b03      	ldr	r3, [sp, #12]
   15702:	3307      	adds	r3, #7
   15704:	f023 0307 	bic.w	r3, r3, #7
   15708:	f103 0208 	add.w	r2, r3, #8
   1570c:	9203      	str	r2, [sp, #12]
   1570e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
   15712:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
   15716:	e7dc      	b.n	156d2 <z_cbvprintf_impl+0x1e6>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   15718:	9b03      	ldr	r3, [sp, #12]
   1571a:	1d1a      	adds	r2, r3, #4
   1571c:	9203      	str	r2, [sp, #12]
   1571e:	681b      	ldr	r3, [r3, #0]
   15720:	17da      	asrs	r2, r3, #31
				value->sint =
   15722:	9304      	str	r3, [sp, #16]
   15724:	9205      	str	r2, [sp, #20]
				break;
   15726:	e7d4      	b.n	156d2 <z_cbvprintf_impl+0x1e6>
				value->sint = (signed char)value->sint;
   15728:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   1572c:	17da      	asrs	r2, r3, #31
   1572e:	9304      	str	r3, [sp, #16]
   15730:	9205      	str	r2, [sp, #20]
   15732:	e732      	b.n	1559a <z_cbvprintf_impl+0xae>
			switch (length_mod) {
   15734:	1ecb      	subs	r3, r1, #3
   15736:	2b04      	cmp	r3, #4
   15738:	d804      	bhi.n	15744 <z_cbvprintf_impl+0x258>
   1573a:	e8df f003 	tbb	[pc, r3]
   1573e:	1f0b      	.short	0x1f0b
   15740:	4135      	.short	0x4135
   15742:	41          	.byte	0x41
   15743:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
   15744:	9b03      	ldr	r3, [sp, #12]
   15746:	1d1a      	adds	r2, r3, #4
   15748:	9203      	str	r2, [sp, #12]
   1574a:	681b      	ldr	r3, [r3, #0]
   1574c:	9304      	str	r3, [sp, #16]
   1574e:	2300      	movs	r3, #0
   15750:	9305      	str	r3, [sp, #20]
				break;
   15752:	e01e      	b.n	15792 <z_cbvprintf_impl+0x2a6>
				    && (conv->specifier == 'c')) {
   15754:	f89d 301b 	ldrb.w	r3, [sp, #27]
				if ((!WCHAR_IS_SIGNED)
   15758:	2b63      	cmp	r3, #99	; 0x63
   1575a:	d007      	beq.n	1576c <z_cbvprintf_impl+0x280>
					value->uint = va_arg(ap, unsigned long);
   1575c:	9b03      	ldr	r3, [sp, #12]
   1575e:	1d1a      	adds	r2, r3, #4
   15760:	9203      	str	r2, [sp, #12]
   15762:	681b      	ldr	r3, [r3, #0]
   15764:	9304      	str	r3, [sp, #16]
   15766:	2300      	movs	r3, #0
   15768:	9305      	str	r3, [sp, #20]
   1576a:	e012      	b.n	15792 <z_cbvprintf_impl+0x2a6>
					value->uint = (wchar_t)va_arg(ap,
   1576c:	9b03      	ldr	r3, [sp, #12]
   1576e:	1d1a      	adds	r2, r3, #4
   15770:	9203      	str	r2, [sp, #12]
   15772:	681b      	ldr	r3, [r3, #0]
   15774:	9304      	str	r3, [sp, #16]
   15776:	2300      	movs	r3, #0
   15778:	9305      	str	r3, [sp, #20]
   1577a:	e00a      	b.n	15792 <z_cbvprintf_impl+0x2a6>
					(uint_value_type)va_arg(ap,
   1577c:	9b03      	ldr	r3, [sp, #12]
   1577e:	3307      	adds	r3, #7
   15780:	f023 0307 	bic.w	r3, r3, #7
   15784:	f103 0208 	add.w	r2, r3, #8
   15788:	9203      	str	r2, [sp, #12]
   1578a:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
   1578e:	e9cd 2304 	strd	r2, r3, [sp, #16]
			if (length_mod == LENGTH_HH) {
   15792:	2901      	cmp	r1, #1
   15794:	d01c      	beq.n	157d0 <z_cbvprintf_impl+0x2e4>
			} else if (length_mod == LENGTH_H) {
   15796:	2902      	cmp	r1, #2
   15798:	f47f aeff 	bne.w	1559a <z_cbvprintf_impl+0xae>
				value->uint = (unsigned short)value->uint;
   1579c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   157a0:	9304      	str	r3, [sp, #16]
   157a2:	2300      	movs	r3, #0
   157a4:	9305      	str	r3, [sp, #20]
   157a6:	e6f8      	b.n	1559a <z_cbvprintf_impl+0xae>
					(uint_value_type)va_arg(ap,
   157a8:	9b03      	ldr	r3, [sp, #12]
   157aa:	3307      	adds	r3, #7
   157ac:	f023 0307 	bic.w	r3, r3, #7
   157b0:	f103 0208 	add.w	r2, r3, #8
   157b4:	9203      	str	r2, [sp, #12]
   157b6:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
   157ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
   157be:	e7e8      	b.n	15792 <z_cbvprintf_impl+0x2a6>
					(uint_value_type)va_arg(ap, size_t);
   157c0:	9b03      	ldr	r3, [sp, #12]
   157c2:	1d1a      	adds	r2, r3, #4
   157c4:	9203      	str	r2, [sp, #12]
   157c6:	681b      	ldr	r3, [r3, #0]
				value->uint =
   157c8:	9304      	str	r3, [sp, #16]
   157ca:	2300      	movs	r3, #0
   157cc:	9305      	str	r3, [sp, #20]
				break;
   157ce:	e7e0      	b.n	15792 <z_cbvprintf_impl+0x2a6>
				value->uint = (unsigned char)value->uint;
   157d0:	f89d 3010 	ldrb.w	r3, [sp, #16]
   157d4:	9304      	str	r3, [sp, #16]
   157d6:	2300      	movs	r3, #0
   157d8:	9305      	str	r3, [sp, #20]
   157da:	e6de      	b.n	1559a <z_cbvprintf_impl+0xae>
			if (length_mod == LENGTH_UPPER_L) {
   157dc:	2908      	cmp	r1, #8
   157de:	d00b      	beq.n	157f8 <z_cbvprintf_impl+0x30c>
				value->dbl = va_arg(ap, double);
   157e0:	9b03      	ldr	r3, [sp, #12]
   157e2:	3307      	adds	r3, #7
   157e4:	f023 0307 	bic.w	r3, r3, #7
   157e8:	f103 0208 	add.w	r2, r3, #8
   157ec:	9203      	str	r2, [sp, #12]
   157ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   157f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
   157f6:	e6d0      	b.n	1559a <z_cbvprintf_impl+0xae>
				value->ldbl = va_arg(ap, long double);
   157f8:	9b03      	ldr	r3, [sp, #12]
   157fa:	3307      	adds	r3, #7
   157fc:	f023 0307 	bic.w	r3, r3, #7
   15800:	f103 0208 	add.w	r2, r3, #8
   15804:	9203      	str	r2, [sp, #12]
   15806:	e9d3 2300 	ldrd	r2, r3, [r3]
   1580a:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1580e:	e6c4      	b.n	1559a <z_cbvprintf_impl+0xae>
			value->ptr = va_arg(ap, void *);
   15810:	9b03      	ldr	r3, [sp, #12]
   15812:	1d1a      	adds	r2, r3, #4
   15814:	9203      	str	r2, [sp, #12]
   15816:	681b      	ldr	r3, [r3, #0]
   15818:	9304      	str	r3, [sp, #16]
   1581a:	e6be      	b.n	1559a <z_cbvprintf_impl+0xae>
			OUTS(sp, fp);
   1581c:	9f02      	ldr	r7, [sp, #8]
   1581e:	463b      	mov	r3, r7
   15820:	464a      	mov	r2, r9
   15822:	4629      	mov	r1, r5
   15824:	4630      	mov	r0, r6
   15826:	f011 ffbf 	bl	277a8 <outs>
   1582a:	2800      	cmp	r0, #0
   1582c:	f2c0 8125 	blt.w	15a7a <z_cbvprintf_impl+0x58e>
   15830:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
   15832:	46b9      	mov	r9, r7
			continue;
   15834:	e662      	b.n	154fc <z_cbvprintf_impl+0x10>
		case '%':
			OUTC('%');
   15836:	4629      	mov	r1, r5
   15838:	2025      	movs	r0, #37	; 0x25
   1583a:	47b0      	blx	r6
   1583c:	2800      	cmp	r0, #0
   1583e:	f2c0 811c 	blt.w	15a7a <z_cbvprintf_impl+0x58e>
   15842:	3401      	adds	r4, #1
		char sign = 0;
   15844:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
   15846:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
   1584a:	f04f 0900 	mov.w	r9, #0
			break;
   1584e:	e07f      	b.n	15950 <z_cbvprintf_impl+0x464>
		case 's': {
			bps = (const char *)value->ptr;
   15850:	f8dd 9010 	ldr.w	r9, [sp, #16]

			size_t len;

			if (precision >= 0) {
   15854:	f1ba 0f00 	cmp.w	sl, #0
   15858:	db07      	blt.n	1586a <z_cbvprintf_impl+0x37e>
				len = strnlen(bps, precision);
   1585a:	4651      	mov	r1, sl
   1585c:	4648      	mov	r0, r9
   1585e:	f012 fee9 	bl	28634 <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
   15862:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
   15866:	46d8      	mov	r8, fp
			precision = -1;

			break;
   15868:	e072      	b.n	15950 <z_cbvprintf_impl+0x464>
				len = strlen(bps);
   1586a:	4648      	mov	r0, r9
   1586c:	f012 fed9 	bl	28622 <strlen>
   15870:	e7f7      	b.n	15862 <z_cbvprintf_impl+0x376>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   15872:	9b04      	ldr	r3, [sp, #16]
   15874:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
   15878:	46d8      	mov	r8, fp
			bpe = buf + 1;
   1587a:	f10d 0a29 	add.w	sl, sp, #41	; 0x29
			bps = buf;
   1587e:	f10d 0928 	add.w	r9, sp, #40	; 0x28
			break;
   15882:	e065      	b.n	15950 <z_cbvprintf_impl+0x464>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
   15884:	f018 0f08 	tst.w	r8, #8
   15888:	d105      	bne.n	15896 <z_cbvprintf_impl+0x3aa>
				sign = '+';
			} else if (conv->flag_space) {
   1588a:	f018 0810 	ands.w	r8, r8, #16
   1588e:	d004      	beq.n	1589a <z_cbvprintf_impl+0x3ae>
				sign = ' ';
   15890:	f04f 0820 	mov.w	r8, #32
   15894:	e001      	b.n	1589a <z_cbvprintf_impl+0x3ae>
				sign = '+';
   15896:	f04f 082b 	mov.w	r8, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
   1589a:	9a04      	ldr	r2, [sp, #16]
   1589c:	9b05      	ldr	r3, [sp, #20]
			if (sint < 0) {
   1589e:	2b00      	cmp	r3, #0
   158a0:	db02      	blt.n	158a8 <z_cbvprintf_impl+0x3bc>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
   158a2:	9204      	str	r2, [sp, #16]
   158a4:	9305      	str	r3, [sp, #20]
   158a6:	e008      	b.n	158ba <z_cbvprintf_impl+0x3ce>
				value->uint = (uint_value_type)-sint;
   158a8:	4252      	negs	r2, r2
   158aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   158ae:	9204      	str	r2, [sp, #16]
   158b0:	9305      	str	r3, [sp, #20]
				sign = '-';
   158b2:	f04f 082d 	mov.w	r8, #45	; 0x2d
   158b6:	e000      	b.n	158ba <z_cbvprintf_impl+0x3ce>
		switch (conv->specifier) {
   158b8:	46d8      	mov	r8, fp
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
   158ba:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   158be:	9300      	str	r3, [sp, #0]
   158c0:	ab0a      	add	r3, sp, #40	; 0x28
   158c2:	aa06      	add	r2, sp, #24
   158c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   158c8:	f011 feff 	bl	276ca <encode_uint>
   158cc:	4681      	mov	r9, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
   158ce:	f1ba 0f00 	cmp.w	sl, #0
   158d2:	db6c      	blt.n	159ae <z_cbvprintf_impl+0x4c2>
				size_t len = bpe - bps;
   158d4:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   158d8:	eba3 0309 	sub.w	r3, r3, r9

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
   158dc:	f89d 2018 	ldrb.w	r2, [sp, #24]
   158e0:	f36f 1286 	bfc	r2, #6, #1
   158e4:	f88d 2018 	strb.w	r2, [sp, #24]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
   158e8:	459a      	cmp	sl, r3
   158ea:	d963      	bls.n	159b4 <z_cbvprintf_impl+0x4c8>
					conv->pad0_value = precision - (int)len;
   158ec:	ebaa 0303 	sub.w	r3, sl, r3
   158f0:	9307      	str	r3, [sp, #28]
		const char *bpe = buf + sizeof(buf);
   158f2:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
   158f6:	e02b      	b.n	15950 <z_cbvprintf_impl+0x464>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
   158f8:	9804      	ldr	r0, [sp, #16]
   158fa:	b928      	cbnz	r0, 15908 <z_cbvprintf_impl+0x41c>
		char sign = 0;
   158fc:	46d8      	mov	r8, fp

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
   158fe:	f8df a180 	ldr.w	sl, [pc, #384]	; 15a80 <z_cbvprintf_impl+0x594>
			bps = "(nil)";
   15902:	f1aa 0905 	sub.w	r9, sl, #5
   15906:	e023      	b.n	15950 <z_cbvprintf_impl+0x464>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   15908:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   1590c:	9300      	str	r3, [sp, #0]
   1590e:	ab0a      	add	r3, sp, #40	; 0x28
   15910:	aa06      	add	r2, sp, #24
   15912:	2100      	movs	r1, #0
   15914:	f011 fed9 	bl	276ca <encode_uint>
   15918:	4681      	mov	r9, r0
				conv->altform_0c = true;
   1591a:	f89d 301a 	ldrb.w	r3, [sp, #26]
   1591e:	f043 0310 	orr.w	r3, r3, #16
   15922:	f88d 301a 	strb.w	r3, [sp, #26]
				conv->specifier = 'x';
   15926:	2378      	movs	r3, #120	; 0x78
   15928:	f88d 301b 	strb.w	r3, [sp, #27]
		char sign = 0;
   1592c:	46d8      	mov	r8, fp
				goto prec_int_pad0;
   1592e:	e7ce      	b.n	158ce <z_cbvprintf_impl+0x3e2>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
   15930:	4622      	mov	r2, r4
   15932:	9904      	ldr	r1, [sp, #16]
   15934:	a806      	add	r0, sp, #24
   15936:	f011 ff18 	bl	2776a <store_count>
		char sign = 0;
   1593a:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
   1593c:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
   15940:	f04f 0900 	mov.w	r9, #0
			}

			break;
   15944:	e004      	b.n	15950 <z_cbvprintf_impl+0x464>
		switch (conv->specifier) {
   15946:	46d8      	mov	r8, fp
   15948:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
   1594c:	f04f 0900 	mov.w	r9, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
   15950:	f1b9 0f00 	cmp.w	r9, #0
   15954:	f000 808d 	beq.w	15a72 <z_cbvprintf_impl+0x586>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
   15958:	ebaa 0309 	sub.w	r3, sl, r9
		int pad_len = 0;

		if (sign != 0) {
   1595c:	f1b8 0f00 	cmp.w	r8, #0
   15960:	d000      	beq.n	15964 <z_cbvprintf_impl+0x478>
			nj_len += 1U;
   15962:	3301      	adds	r3, #1
		}

		if (conv->altform_0c) {
   15964:	f89d 201a 	ldrb.w	r2, [sp, #26]
   15968:	f012 0f10 	tst.w	r2, #16
   1596c:	d025      	beq.n	159ba <z_cbvprintf_impl+0x4ce>
			nj_len += 2U;
   1596e:	3302      	adds	r3, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
   15970:	9907      	ldr	r1, [sp, #28]
   15972:	440b      	add	r3, r1
		if (conv->pad_fp) {
   15974:	f012 0f40 	tst.w	r2, #64	; 0x40
   15978:	d001      	beq.n	1597e <z_cbvprintf_impl+0x492>
			nj_len += conv->pad0_pre_exp;
   1597a:	9a08      	ldr	r2, [sp, #32]
   1597c:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
   1597e:	2f00      	cmp	r7, #0
   15980:	dd31      	ble.n	159e6 <z_cbvprintf_impl+0x4fa>
			width -= (int)nj_len;
   15982:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
   15984:	f89d 3018 	ldrb.w	r3, [sp, #24]
   15988:	f013 0f04 	tst.w	r3, #4
   1598c:	d12b      	bne.n	159e6 <z_cbvprintf_impl+0x4fa>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
   1598e:	f013 0f40 	tst.w	r3, #64	; 0x40
   15992:	d017      	beq.n	159c4 <z_cbvprintf_impl+0x4d8>
					if (sign != 0) {
   15994:	f1b8 0f00 	cmp.w	r8, #0
   15998:	d017      	beq.n	159ca <z_cbvprintf_impl+0x4de>
						OUTC(sign);
   1599a:	4629      	mov	r1, r5
   1599c:	4640      	mov	r0, r8
   1599e:	47b0      	blx	r6
   159a0:	2800      	cmp	r0, #0
   159a2:	db6a      	blt.n	15a7a <z_cbvprintf_impl+0x58e>
   159a4:	3401      	adds	r4, #1
						sign = 0;
   159a6:	46d8      	mov	r8, fp
					}
					pad = '0';
   159a8:	f04f 0b30 	mov.w	fp, #48	; 0x30
   159ac:	e00f      	b.n	159ce <z_cbvprintf_impl+0x4e2>
		const char *bpe = buf + sizeof(buf);
   159ae:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
   159b2:	e7cd      	b.n	15950 <z_cbvprintf_impl+0x464>
   159b4:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
   159b8:	e7ca      	b.n	15950 <z_cbvprintf_impl+0x464>
		} else if (conv->altform_0) {
   159ba:	f012 0f08 	tst.w	r2, #8
   159be:	d0d7      	beq.n	15970 <z_cbvprintf_impl+0x484>
			nj_len += 1U;
   159c0:	3301      	adds	r3, #1
   159c2:	e7d5      	b.n	15970 <z_cbvprintf_impl+0x484>
				char pad = ' ';
   159c4:	f04f 0b20 	mov.w	fp, #32
   159c8:	e001      	b.n	159ce <z_cbvprintf_impl+0x4e2>
					pad = '0';
   159ca:	f04f 0b30 	mov.w	fp, #48	; 0x30
   159ce:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
   159d0:	1e5f      	subs	r7, r3, #1
   159d2:	2b00      	cmp	r3, #0
   159d4:	dd07      	ble.n	159e6 <z_cbvprintf_impl+0x4fa>
					OUTC(pad);
   159d6:	4629      	mov	r1, r5
   159d8:	4658      	mov	r0, fp
   159da:	47b0      	blx	r6
   159dc:	2800      	cmp	r0, #0
   159de:	db4c      	blt.n	15a7a <z_cbvprintf_impl+0x58e>
   159e0:	3401      	adds	r4, #1
				while (width-- > 0) {
   159e2:	463b      	mov	r3, r7
   159e4:	e7f4      	b.n	159d0 <z_cbvprintf_impl+0x4e4>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
   159e6:	f1b8 0f00 	cmp.w	r8, #0
   159ea:	d005      	beq.n	159f8 <z_cbvprintf_impl+0x50c>
			OUTC(sign);
   159ec:	4629      	mov	r1, r5
   159ee:	4640      	mov	r0, r8
   159f0:	47b0      	blx	r6
   159f2:	2800      	cmp	r0, #0
   159f4:	db41      	blt.n	15a7a <z_cbvprintf_impl+0x58e>
   159f6:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
   159f8:	f89d 301a 	ldrb.w	r3, [sp, #26]
   159fc:	f3c3 1200 	ubfx	r2, r3, #4, #1
   15a00:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   15a04:	431a      	orrs	r2, r3
   15a06:	d005      	beq.n	15a14 <z_cbvprintf_impl+0x528>
				OUTC('0');
   15a08:	4629      	mov	r1, r5
   15a0a:	2030      	movs	r0, #48	; 0x30
   15a0c:	47b0      	blx	r6
   15a0e:	2800      	cmp	r0, #0
   15a10:	db33      	blt.n	15a7a <z_cbvprintf_impl+0x58e>
   15a12:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
   15a14:	f89d 301a 	ldrb.w	r3, [sp, #26]
   15a18:	f013 0f10 	tst.w	r3, #16
   15a1c:	d006      	beq.n	15a2c <z_cbvprintf_impl+0x540>
				OUTC(conv->specifier);
   15a1e:	4629      	mov	r1, r5
   15a20:	f89d 001b 	ldrb.w	r0, [sp, #27]
   15a24:	47b0      	blx	r6
   15a26:	2800      	cmp	r0, #0
   15a28:	db27      	blt.n	15a7a <z_cbvprintf_impl+0x58e>
   15a2a:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
   15a2c:	9b07      	ldr	r3, [sp, #28]
			while (pad_len-- > 0) {
   15a2e:	f103 38ff 	add.w	r8, r3, #4294967295
   15a32:	2b00      	cmp	r3, #0
   15a34:	dd07      	ble.n	15a46 <z_cbvprintf_impl+0x55a>
				OUTC('0');
   15a36:	4629      	mov	r1, r5
   15a38:	2030      	movs	r0, #48	; 0x30
   15a3a:	47b0      	blx	r6
   15a3c:	2800      	cmp	r0, #0
   15a3e:	db1c      	blt.n	15a7a <z_cbvprintf_impl+0x58e>
   15a40:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
   15a42:	4643      	mov	r3, r8
   15a44:	e7f3      	b.n	15a2e <z_cbvprintf_impl+0x542>
			}

			OUTS(bps, bpe);
   15a46:	4653      	mov	r3, sl
   15a48:	464a      	mov	r2, r9
   15a4a:	4629      	mov	r1, r5
   15a4c:	4630      	mov	r0, r6
   15a4e:	f011 feab 	bl	277a8 <outs>
   15a52:	2800      	cmp	r0, #0
   15a54:	db11      	blt.n	15a7a <z_cbvprintf_impl+0x58e>
   15a56:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
   15a58:	2f00      	cmp	r7, #0
   15a5a:	dd07      	ble.n	15a6c <z_cbvprintf_impl+0x580>
			OUTC(' ');
   15a5c:	4629      	mov	r1, r5
   15a5e:	2020      	movs	r0, #32
   15a60:	47b0      	blx	r6
   15a62:	2800      	cmp	r0, #0
   15a64:	db09      	blt.n	15a7a <z_cbvprintf_impl+0x58e>
   15a66:	3401      	adds	r4, #1
			--width;
   15a68:	3f01      	subs	r7, #1
   15a6a:	e7f5      	b.n	15a58 <z_cbvprintf_impl+0x56c>
		fp = extract_conversion(conv, sp);
   15a6c:	f8dd 9008 	ldr.w	r9, [sp, #8]
   15a70:	e544      	b.n	154fc <z_cbvprintf_impl+0x10>
   15a72:	f8dd 9008 	ldr.w	r9, [sp, #8]
   15a76:	e541      	b.n	154fc <z_cbvprintf_impl+0x10>
		}
	}

	return count;
   15a78:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
   15a7a:	b011      	add	sp, #68	; 0x44
   15a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a80:	0002ee4d 	.word	0x0002ee4d

00015a84 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   15a84:	f00d be6e 	b.w	23764 <SystemInit>

00015a88 <msg_process>:
		return true;
	}
}

static void msg_process(union log_msg_generic *msg)
{
   15a88:	b538      	push	{r3, r4, r5, lr}
   15a8a:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   15a8c:	4c0b      	ldr	r4, [pc, #44]	; (15abc <msg_process+0x34>)
   15a8e:	e000      	b.n	15a92 <msg_process+0xa>
   15a90:	3410      	adds	r4, #16
   15a92:	4b0b      	ldr	r3, [pc, #44]	; (15ac0 <msg_process+0x38>)
   15a94:	429c      	cmp	r4, r3
   15a96:	d20f      	bcs.n	15ab8 <msg_process+0x30>
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   15a98:	6863      	ldr	r3, [r4, #4]
   15a9a:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend) &&
   15a9c:	2b00      	cmp	r3, #0
   15a9e:	d0f7      	beq.n	15a90 <msg_process+0x8>
		    msg_filter_check(backend, msg)) {
   15aa0:	4629      	mov	r1, r5
   15aa2:	4620      	mov	r0, r4
   15aa4:	f012 f93b 	bl	27d1e <msg_filter_check>
		if (log_backend_is_active(backend) &&
   15aa8:	2800      	cmp	r0, #0
   15aaa:	d0f1      	beq.n	15a90 <msg_process+0x8>
	backend->api->process(backend, msg);
   15aac:	6823      	ldr	r3, [r4, #0]
   15aae:	681b      	ldr	r3, [r3, #0]
   15ab0:	4629      	mov	r1, r5
   15ab2:	4620      	mov	r0, r4
   15ab4:	4798      	blx	r3
}
   15ab6:	e7eb      	b.n	15a90 <msg_process+0x8>
			log_backend_msg_process(backend, msg);
		}
	}
}
   15ab8:	bd38      	pop	{r3, r4, r5, pc}
   15aba:	bf00      	nop
   15abc:	0002df48 	.word	0x0002df48
   15ac0:	0002df58 	.word	0x0002df58

00015ac4 <log_backend_notify_all>:
	return mpsc_pbuf_get_max_utilization(&log_buffer, max);
}

static void log_backend_notify_all(enum log_backend_evt event,
				   union log_backend_evt_arg *arg)
{
   15ac4:	b570      	push	{r4, r5, r6, lr}
   15ac6:	4606      	mov	r6, r0
   15ac8:	460d      	mov	r5, r1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   15aca:	4c08      	ldr	r4, [pc, #32]	; (15aec <log_backend_notify_all+0x28>)
   15acc:	e004      	b.n	15ad8 <log_backend_notify_all+0x14>
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
		backend->api->notify(backend, event, arg);
   15ace:	462a      	mov	r2, r5
   15ad0:	4631      	mov	r1, r6
   15ad2:	4620      	mov	r0, r4
   15ad4:	4798      	blx	r3
   15ad6:	3410      	adds	r4, #16
   15ad8:	4b05      	ldr	r3, [pc, #20]	; (15af0 <log_backend_notify_all+0x2c>)
   15ada:	429c      	cmp	r4, r3
   15adc:	d204      	bcs.n	15ae8 <log_backend_notify_all+0x24>
	if (backend->api->notify) {
   15ade:	6823      	ldr	r3, [r4, #0]
   15ae0:	699b      	ldr	r3, [r3, #24]
   15ae2:	2b00      	cmp	r3, #0
   15ae4:	d1f3      	bne.n	15ace <log_backend_notify_all+0xa>
   15ae6:	e7f6      	b.n	15ad6 <log_backend_notify_all+0x12>
		log_backend_notify(backend, event, arg);
	}
}
   15ae8:	bd70      	pop	{r4, r5, r6, pc}
   15aea:	bf00      	nop
   15aec:	0002df48 	.word	0x0002df48
   15af0:	0002df58 	.word	0x0002df58

00015af4 <activate_foreach_backend>:
{
   15af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15af8:	4607      	mov	r7, r0
	uint32_t mask_cpy = mask;
   15afa:	4605      	mov	r5, r0
	while (mask_cpy) {
   15afc:	e00a      	b.n	15b14 <activate_foreach_backend+0x20>
			mask &= ~BIT(i);
   15afe:	ea07 0708 	and.w	r7, r7, r8
					   backend->cb->ctx,
   15b02:	4b14      	ldr	r3, [pc, #80]	; (15b54 <activate_foreach_backend+0x60>)
   15b04:	eb03 1306 	add.w	r3, r3, r6, lsl #4
   15b08:	685b      	ldr	r3, [r3, #4]
			log_backend_enable(backend,
   15b0a:	2204      	movs	r2, #4
   15b0c:	6819      	ldr	r1, [r3, #0]
   15b0e:	4620      	mov	r0, r4
   15b10:	f000 faa4 	bl	1605c <log_backend_enable>
	while (mask_cpy) {
   15b14:	b1d5      	cbz	r5, 15b4c <activate_foreach_backend+0x58>
		uint32_t i = __builtin_ctz(mask_cpy);
   15b16:	fa95 f6a5 	rbit	r6, r5
   15b1a:	fab6 f686 	clz	r6, r6
	STRUCT_SECTION_GET(log_backend, idx, &backend);
   15b1e:	4c0d      	ldr	r4, [pc, #52]	; (15b54 <activate_foreach_backend+0x60>)
   15b20:	eb04 1406 	add.w	r4, r4, r6, lsl #4
		mask_cpy &= ~BIT(i);
   15b24:	2301      	movs	r3, #1
   15b26:	40b3      	lsls	r3, r6
   15b28:	ea6f 0803 	mvn.w	r8, r3
   15b2c:	ea25 0503 	bic.w	r5, r5, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   15b30:	7b23      	ldrb	r3, [r4, #12]
   15b32:	2b00      	cmp	r3, #0
   15b34:	d0ee      	beq.n	15b14 <activate_foreach_backend+0x20>
	if (backend->api->is_ready != NULL) {
   15b36:	0133      	lsls	r3, r6, #4
   15b38:	4a06      	ldr	r2, [pc, #24]	; (15b54 <activate_foreach_backend+0x60>)
   15b3a:	58d3      	ldr	r3, [r2, r3]
   15b3c:	691b      	ldr	r3, [r3, #16]
   15b3e:	2b00      	cmp	r3, #0
   15b40:	d0dd      	beq.n	15afe <activate_foreach_backend+0xa>
		return backend->api->is_ready(backend);
   15b42:	4620      	mov	r0, r4
   15b44:	4798      	blx	r3
   15b46:	2800      	cmp	r0, #0
   15b48:	d1e4      	bne.n	15b14 <activate_foreach_backend+0x20>
   15b4a:	e7d8      	b.n	15afe <activate_foreach_backend+0xa>
}
   15b4c:	4638      	mov	r0, r7
   15b4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15b52:	bf00      	nop
   15b54:	0002df48 	.word	0x0002df48

00015b58 <z_log_init>:
{
   15b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15b5c:	4680      	mov	r8, r0
   15b5e:	460f      	mov	r7, r1
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   15b60:	4b20      	ldr	r3, [pc, #128]	; (15be4 <z_log_init+0x8c>)
   15b62:	f3bf 8f5b 	dmb	ish
   15b66:	e853 5f00 	ldrex	r5, [r3]
   15b6a:	1c6a      	adds	r2, r5, #1
   15b6c:	e843 2100 	strex	r1, r2, [r3]
   15b70:	2900      	cmp	r1, #0
   15b72:	d1f8      	bne.n	15b66 <z_log_init+0xe>
   15b74:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
   15b78:	2d00      	cmp	r5, #0
   15b7a:	d12f      	bne.n	15bdc <z_log_init+0x84>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   15b7c:	4c1a      	ldr	r4, [pc, #104]	; (15be8 <z_log_init+0x90>)
	int i = 0;
   15b7e:	2600      	movs	r6, #0
   15b80:	e007      	b.n	15b92 <z_log_init+0x3a>
						   backend->cb->ctx,
   15b82:	6863      	ldr	r3, [r4, #4]
				log_backend_enable(backend,
   15b84:	2204      	movs	r2, #4
   15b86:	6819      	ldr	r1, [r3, #0]
   15b88:	4620      	mov	r0, r4
   15b8a:	f000 fa67 	bl	1605c <log_backend_enable>
			i++;
   15b8e:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   15b90:	3410      	adds	r4, #16
   15b92:	4b16      	ldr	r3, [pc, #88]	; (15bec <z_log_init+0x94>)
   15b94:	429c      	cmp	r4, r3
   15b96:	d213      	bcs.n	15bc0 <z_log_init+0x68>
		if (backend->autostart) {
   15b98:	7b23      	ldrb	r3, [r4, #12]
   15b9a:	2b00      	cmp	r3, #0
   15b9c:	d0f8      	beq.n	15b90 <z_log_init+0x38>
	if (backend->api->init) {
   15b9e:	6823      	ldr	r3, [r4, #0]
   15ba0:	68db      	ldr	r3, [r3, #12]
   15ba2:	b10b      	cbz	r3, 15ba8 <z_log_init+0x50>
		backend->api->init(backend);
   15ba4:	4620      	mov	r0, r4
   15ba6:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
   15ba8:	6823      	ldr	r3, [r4, #0]
   15baa:	691b      	ldr	r3, [r3, #16]
   15bac:	2b00      	cmp	r3, #0
   15bae:	d0e8      	beq.n	15b82 <z_log_init+0x2a>
		return backend->api->is_ready(backend);
   15bb0:	4620      	mov	r0, r4
   15bb2:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
   15bb4:	2800      	cmp	r0, #0
   15bb6:	d0e4      	beq.n	15b82 <z_log_init+0x2a>
				mask |= BIT(i);
   15bb8:	2301      	movs	r3, #1
   15bba:	40b3      	lsls	r3, r6
   15bbc:	431d      	orrs	r5, r3
   15bbe:	e7e6      	b.n	15b8e <z_log_init+0x36>
	if (blocking) {
   15bc0:	f1b8 0f00 	cmp.w	r8, #0
   15bc4:	d00b      	beq.n	15bde <z_log_init+0x86>
		while (mask) {
   15bc6:	b155      	cbz	r5, 15bde <z_log_init+0x86>
			mask = activate_foreach_backend(mask);
   15bc8:	4628      	mov	r0, r5
   15bca:	f7ff ff93 	bl	15af4 <activate_foreach_backend>
   15bce:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
   15bd0:	2f00      	cmp	r7, #0
   15bd2:	d0f8      	beq.n	15bc6 <z_log_init+0x6e>
				k_msleep(10);
   15bd4:	200a      	movs	r0, #10
   15bd6:	f012 f8a8 	bl	27d2a <k_msleep>
   15bda:	e7f4      	b.n	15bc6 <z_log_init+0x6e>
		return 0;
   15bdc:	2500      	movs	r5, #0
}
   15bde:	4628      	mov	r0, r5
   15be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15be4:	20007b24 	.word	0x20007b24
   15be8:	0002df48 	.word	0x0002df48
   15bec:	0002df58 	.word	0x0002df58

00015bf0 <thread_set>:
{
   15bf0:	b508      	push	{r3, lr}
	proc_tid = process_tid;
   15bf2:	4b06      	ldr	r3, [pc, #24]	; (15c0c <thread_set+0x1c>)
   15bf4:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   15bf6:	b118      	cbz	r0, 15c00 <thread_set+0x10>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   15bf8:	4b05      	ldr	r3, [pc, #20]	; (15c10 <thread_set+0x20>)
   15bfa:	681b      	ldr	r3, [r3, #0]
	    process_tid &&
   15bfc:	2b09      	cmp	r3, #9
   15bfe:	dc00      	bgt.n	15c02 <thread_set+0x12>
}
   15c00:	bd08      	pop	{r3, pc}
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   15c02:	4804      	ldr	r0, [pc, #16]	; (15c14 <thread_set+0x24>)
   15c04:	f00f fae4 	bl	251d0 <z_impl_k_sem_give>
}
   15c08:	e7fa      	b.n	15c00 <thread_set+0x10>
   15c0a:	bf00      	nop
   15c0c:	20007b18 	.word	0x20007b18
   15c10:	20007b20 	.word	0x20007b20
   15c14:	20000bfc 	.word	0x20000bfc

00015c18 <log_process_thread_timer_expiry_fn>:

static void log_process_thread_timer_expiry_fn(struct k_timer *timer)
{
   15c18:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   15c1a:	4802      	ldr	r0, [pc, #8]	; (15c24 <log_process_thread_timer_expiry_fn+0xc>)
   15c1c:	f00f fad8 	bl	251d0 <z_impl_k_sem_give>
	k_sem_give(&log_process_thread_sem);
}
   15c20:	bd08      	pop	{r3, pc}
   15c22:	bf00      	nop
   15c24:	20000bfc 	.word	0x20000bfc

00015c28 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
   15c28:	b530      	push	{r4, r5, lr}
   15c2a:	b089      	sub	sp, #36	; 0x24
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   15c2c:	2200      	movs	r2, #0
   15c2e:	490f      	ldr	r1, [pc, #60]	; (15c6c <enable_logger+0x44>)
   15c30:	480f      	ldr	r0, [pc, #60]	; (15c70 <enable_logger+0x48>)
   15c32:	f017 fd77 	bl	2d724 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   15c36:	4d0f      	ldr	r5, [pc, #60]	; (15c74 <enable_logger+0x4c>)
   15c38:	2200      	movs	r2, #0
   15c3a:	2300      	movs	r3, #0
   15c3c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   15c40:	2400      	movs	r4, #0
   15c42:	9404      	str	r4, [sp, #16]
   15c44:	230e      	movs	r3, #14
   15c46:	9303      	str	r3, [sp, #12]
   15c48:	9402      	str	r4, [sp, #8]
   15c4a:	9401      	str	r4, [sp, #4]
   15c4c:	9400      	str	r4, [sp, #0]
   15c4e:	4b0a      	ldr	r3, [pc, #40]	; (15c78 <enable_logger+0x50>)
   15c50:	f44f 7240 	mov.w	r2, #768	; 0x300
   15c54:	4909      	ldr	r1, [pc, #36]	; (15c7c <enable_logger+0x54>)
   15c56:	4628      	mov	r0, r5
   15c58:	f017 f87a 	bl	2cd50 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   15c5c:	4908      	ldr	r1, [pc, #32]	; (15c80 <enable_logger+0x58>)
   15c5e:	4628      	mov	r0, r5
   15c60:	f00f f8ca 	bl	24df8 <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
   15c64:	4620      	mov	r0, r4
   15c66:	b009      	add	sp, #36	; 0x24
   15c68:	bd30      	pop	{r4, r5, pc}
   15c6a:	bf00      	nop
   15c6c:	00015c19 	.word	0x00015c19
   15c70:	20002028 	.word	0x20002028
   15c74:	20001b68 	.word	0x20001b68
   15c78:	00015fbd 	.word	0x00015fbd
   15c7c:	20009000 	.word	0x20009000
   15c80:	0002ee50 	.word	0x0002ee50

00015c84 <log_format_func_t_get>:
}
   15c84:	4b01      	ldr	r3, [pc, #4]	; (15c8c <log_format_func_t_get+0x8>)
   15c86:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   15c8a:	4770      	bx	lr
   15c8c:	0002ee6c 	.word	0x0002ee6c

00015c90 <log_set_timestamp_func>:
	if (timestamp_getter == NULL) {
   15c90:	b148      	cbz	r0, 15ca6 <log_set_timestamp_func+0x16>
{
   15c92:	b508      	push	{r3, lr}
	timestamp_func = timestamp_getter;
   15c94:	4a05      	ldr	r2, [pc, #20]	; (15cac <log_set_timestamp_func+0x1c>)
   15c96:	6010      	str	r0, [r2, #0]
	timestamp_freq = freq;
   15c98:	4b05      	ldr	r3, [pc, #20]	; (15cb0 <log_set_timestamp_func+0x20>)
   15c9a:	6019      	str	r1, [r3, #0]
		log_output_timestamp_freq_set(freq);
   15c9c:	4608      	mov	r0, r1
   15c9e:	f000 fbff 	bl	164a0 <log_output_timestamp_freq_set>
	return 0;
   15ca2:	2000      	movs	r0, #0
}
   15ca4:	bd08      	pop	{r3, pc}
		return -EINVAL;
   15ca6:	f06f 0015 	mvn.w	r0, #21
}
   15caa:	4770      	bx	lr
   15cac:	20000834 	.word	0x20000834
   15cb0:	20007b14 	.word	0x20007b14

00015cb4 <z_log_notify_backend_enabled>:
{
   15cb4:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
   15cb6:	4b05      	ldr	r3, [pc, #20]	; (15ccc <z_log_notify_backend_enabled+0x18>)
   15cb8:	781b      	ldrb	r3, [r3, #0]
   15cba:	b11b      	cbz	r3, 15cc4 <z_log_notify_backend_enabled+0x10>
	backend_attached = true;
   15cbc:	4b03      	ldr	r3, [pc, #12]	; (15ccc <z_log_notify_backend_enabled+0x18>)
   15cbe:	2201      	movs	r2, #1
   15cc0:	701a      	strb	r2, [r3, #0]
}
   15cc2:	bd08      	pop	{r3, pc}
	z_impl_k_sem_give(sem);
   15cc4:	4802      	ldr	r0, [pc, #8]	; (15cd0 <z_log_notify_backend_enabled+0x1c>)
   15cc6:	f00f fa83 	bl	251d0 <z_impl_k_sem_give>
}
   15cca:	e7f7      	b.n	15cbc <z_log_notify_backend_enabled+0x8>
   15ccc:	20008fde 	.word	0x20008fde
   15cd0:	20000bfc 	.word	0x20000bfc

00015cd4 <z_log_dropped>:
   15cd4:	4b0d      	ldr	r3, [pc, #52]	; (15d0c <z_log_dropped+0x38>)
   15cd6:	f3bf 8f5b 	dmb	ish
   15cda:	e853 1f00 	ldrex	r1, [r3]
   15cde:	3101      	adds	r1, #1
   15ce0:	e843 1200 	strex	r2, r1, [r3]
   15ce4:	2a00      	cmp	r2, #0
   15ce6:	d1f8      	bne.n	15cda <z_log_dropped+0x6>
   15ce8:	f3bf 8f5b 	dmb	ish
	if (buffered) {
   15cec:	b900      	cbnz	r0, 15cf0 <z_log_dropped+0x1c>
}
   15cee:	4770      	bx	lr
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   15cf0:	4b07      	ldr	r3, [pc, #28]	; (15d10 <z_log_dropped+0x3c>)
   15cf2:	f3bf 8f5b 	dmb	ish
   15cf6:	e853 1f00 	ldrex	r1, [r3]
   15cfa:	3901      	subs	r1, #1
   15cfc:	e843 1200 	strex	r2, r1, [r3]
   15d00:	2a00      	cmp	r2, #0
   15d02:	d1f8      	bne.n	15cf6 <z_log_dropped+0x22>
   15d04:	f3bf 8f5b 	dmb	ish
   15d08:	e7f1      	b.n	15cee <z_log_dropped+0x1a>
   15d0a:	bf00      	nop
   15d0c:	20007b1c 	.word	0x20007b1c
   15d10:	20007b20 	.word	0x20007b20

00015d14 <z_log_dropped_read_and_clear>:
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   15d14:	4b06      	ldr	r3, [pc, #24]	; (15d30 <z_log_dropped_read_and_clear+0x1c>)
}
   15d16:	2000      	movs	r0, #0
   15d18:	4601      	mov	r1, r0
   15d1a:	f3bf 8f5b 	dmb	ish
   15d1e:	e853 0f00 	ldrex	r0, [r3]
   15d22:	e843 1200 	strex	r2, r1, [r3]
   15d26:	2a00      	cmp	r2, #0
   15d28:	d1f9      	bne.n	15d1e <z_log_dropped_read_and_clear+0xa>
   15d2a:	f3bf 8f5b 	dmb	ish
   15d2e:	4770      	bx	lr
   15d30:	20007b1c 	.word	0x20007b1c

00015d34 <dropped_notify>:
{
   15d34:	b538      	push	{r3, r4, r5, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
   15d36:	f7ff ffed 	bl	15d14 <z_log_dropped_read_and_clear>
   15d3a:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   15d3c:	4c09      	ldr	r4, [pc, #36]	; (15d64 <dropped_notify+0x30>)
   15d3e:	e000      	b.n	15d42 <dropped_notify+0xe>
   15d40:	3410      	adds	r4, #16
   15d42:	4b09      	ldr	r3, [pc, #36]	; (15d68 <dropped_notify+0x34>)
   15d44:	429c      	cmp	r4, r3
   15d46:	d20b      	bcs.n	15d60 <dropped_notify+0x2c>
	return backend->cb->active;
   15d48:	6863      	ldr	r3, [r4, #4]
   15d4a:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
   15d4c:	2b00      	cmp	r3, #0
   15d4e:	d0f7      	beq.n	15d40 <dropped_notify+0xc>
	if (backend->api->dropped != NULL) {
   15d50:	6823      	ldr	r3, [r4, #0]
   15d52:	685b      	ldr	r3, [r3, #4]
   15d54:	2b00      	cmp	r3, #0
   15d56:	d0f3      	beq.n	15d40 <dropped_notify+0xc>
		backend->api->dropped(backend, cnt);
   15d58:	4629      	mov	r1, r5
   15d5a:	4620      	mov	r0, r4
   15d5c:	4798      	blx	r3
   15d5e:	e7ef      	b.n	15d40 <dropped_notify+0xc>
}
   15d60:	bd38      	pop	{r3, r4, r5, pc}
   15d62:	bf00      	nop
   15d64:	0002df48 	.word	0x0002df48
   15d68:	0002df58 	.word	0x0002df58

00015d6c <z_log_dropped_pending>:
	return dropped_cnt > 0;
   15d6c:	4b03      	ldr	r3, [pc, #12]	; (15d7c <z_log_dropped_pending+0x10>)
   15d6e:	6818      	ldr	r0, [r3, #0]
}
   15d70:	2800      	cmp	r0, #0
   15d72:	bfd4      	ite	le
   15d74:	2000      	movle	r0, #0
   15d76:	2001      	movgt	r0, #1
   15d78:	4770      	bx	lr
   15d7a:	bf00      	nop
   15d7c:	20007b1c 	.word	0x20007b1c

00015d80 <z_log_msg_init>:
{
   15d80:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
   15d82:	4c04      	ldr	r4, [pc, #16]	; (15d94 <z_log_msg_init+0x14>)
   15d84:	4904      	ldr	r1, [pc, #16]	; (15d98 <z_log_msg_init+0x18>)
   15d86:	4620      	mov	r0, r4
   15d88:	f011 fe23 	bl	279d2 <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
   15d8c:	4b03      	ldr	r3, [pc, #12]	; (15d9c <z_log_msg_init+0x1c>)
   15d8e:	601c      	str	r4, [r3, #0]
}
   15d90:	bd10      	pop	{r4, pc}
   15d92:	bf00      	nop
   15d94:	20000b3c 	.word	0x20000b3c
   15d98:	0002ee58 	.word	0x0002ee58
   15d9c:	20007b10 	.word	0x20007b10

00015da0 <log_core_init>:
{
   15da0:	b508      	push	{r3, lr}
	panic_mode = false;
   15da2:	2300      	movs	r3, #0
   15da4:	4a05      	ldr	r2, [pc, #20]	; (15dbc <log_core_init+0x1c>)
   15da6:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
   15da8:	4a05      	ldr	r2, [pc, #20]	; (15dc0 <log_core_init+0x20>)
   15daa:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
   15dac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   15db0:	4804      	ldr	r0, [pc, #16]	; (15dc4 <log_core_init+0x24>)
   15db2:	f7ff ff6d 	bl	15c90 <log_set_timestamp_func>
		z_log_msg_init();
   15db6:	f7ff ffe3 	bl	15d80 <z_log_msg_init>
}
   15dba:	bd08      	pop	{r3, pc}
   15dbc:	20008fdf 	.word	0x20008fdf
   15dc0:	20007b1c 	.word	0x20007b1c
   15dc4:	00027d23 	.word	0x00027d23

00015dc8 <z_log_msg_alloc>:
{
   15dc8:	b508      	push	{r3, lr}
   15dca:	4601      	mov	r1, r0
	return msg_alloc(&log_buffer, wlen);
   15dcc:	4801      	ldr	r0, [pc, #4]	; (15dd4 <z_log_msg_alloc+0xc>)
   15dce:	f011 ffc2 	bl	27d56 <msg_alloc>
}
   15dd2:	bd08      	pop	{r3, pc}
   15dd4:	20000b3c 	.word	0x20000b3c

00015dd8 <z_log_msg_local_claim>:
{
   15dd8:	b508      	push	{r3, lr}
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
   15dda:	4802      	ldr	r0, [pc, #8]	; (15de4 <z_log_msg_local_claim+0xc>)
   15ddc:	f011 fed1 	bl	27b82 <mpsc_pbuf_claim>
}
   15de0:	bd08      	pop	{r3, pc}
   15de2:	bf00      	nop
   15de4:	20000b3c 	.word	0x20000b3c

00015de8 <z_log_msg_free>:
{
   15de8:	b508      	push	{r3, lr}
   15dea:	4601      	mov	r1, r0
	msg_free(curr_log_buffer, msg);
   15dec:	4b02      	ldr	r3, [pc, #8]	; (15df8 <z_log_msg_free+0x10>)
   15dee:	6818      	ldr	r0, [r3, #0]
   15df0:	f011 ffb7 	bl	27d62 <msg_free>
}
   15df4:	bd08      	pop	{r3, pc}
   15df6:	bf00      	nop
   15df8:	20007b10 	.word	0x20007b10

00015dfc <z_log_msg_pending>:
{
   15dfc:	b508      	push	{r3, lr}
		return msg_pending(&log_buffer);
   15dfe:	4802      	ldr	r0, [pc, #8]	; (15e08 <z_log_msg_pending+0xc>)
   15e00:	f011 ffb3 	bl	27d6a <msg_pending>
}
   15e04:	bd08      	pop	{r3, pc}
   15e06:	bf00      	nop
   15e08:	20000b3c 	.word	0x20000b3c

00015e0c <z_impl_log_process>:
{
   15e0c:	b510      	push	{r4, lr}
   15e0e:	b082      	sub	sp, #8
	k_timeout_t backoff = K_NO_WAIT;
   15e10:	2200      	movs	r2, #0
   15e12:	2300      	movs	r3, #0
   15e14:	e9cd 2300 	strd	r2, r3, [sp]
	if (!backend_attached) {
   15e18:	4b28      	ldr	r3, [pc, #160]	; (15ebc <z_impl_log_process+0xb0>)
   15e1a:	7818      	ldrb	r0, [r3, #0]
   15e1c:	b908      	cbnz	r0, 15e22 <z_impl_log_process+0x16>
}
   15e1e:	b002      	add	sp, #8
   15e20:	bd10      	pop	{r4, pc}
	msg = z_log_msg_claim(&backoff);
   15e22:	4668      	mov	r0, sp
   15e24:	f011 ffb9 	bl	27d9a <z_log_msg_claim>
	if (msg) {
   15e28:	4604      	mov	r4, r0
   15e2a:	b188      	cbz	r0, 15e50 <z_impl_log_process+0x44>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   15e2c:	4b24      	ldr	r3, [pc, #144]	; (15ec0 <z_impl_log_process+0xb4>)
   15e2e:	f3bf 8f5b 	dmb	ish
   15e32:	e853 1f00 	ldrex	r1, [r3]
   15e36:	3901      	subs	r1, #1
   15e38:	e843 1200 	strex	r2, r1, [r3]
   15e3c:	2a00      	cmp	r2, #0
   15e3e:	d1f8      	bne.n	15e32 <z_impl_log_process+0x26>
   15e40:	f3bf 8f5b 	dmb	ish
		msg_process(msg);
   15e44:	4620      	mov	r0, r4
   15e46:	f7ff fe1f 	bl	15a88 <msg_process>
		z_log_msg_free(msg);
   15e4a:	4620      	mov	r0, r4
   15e4c:	f7ff ffcc 	bl	15de8 <z_log_msg_free>
		bool dropped_pend = z_log_dropped_pending();
   15e50:	f7ff ff8c 	bl	15d6c <z_log_dropped_pending>
		if ((dropped_pend || unordered_pend) &&
   15e54:	b958      	cbnz	r0, 15e6e <z_impl_log_process+0x62>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
   15e56:	4a1b      	ldr	r2, [pc, #108]	; (15ec4 <z_impl_log_process+0xb8>)
   15e58:	6813      	ldr	r3, [r2, #0]
   15e5a:	6851      	ldr	r1, [r2, #4]
   15e5c:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
   15e60:	f141 0100 	adc.w	r1, r1, #0
   15e64:	6013      	str	r3, [r2, #0]
   15e66:	6051      	str	r1, [r2, #4]
	return z_log_msg_pending();
   15e68:	f7ff ffc8 	bl	15dfc <z_log_msg_pending>
   15e6c:	e7d7      	b.n	15e1e <z_impl_log_process+0x12>
	return z_impl_k_uptime_ticks();
   15e6e:	f017 fc16 	bl	2d69e <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   15e72:	014a      	lsls	r2, r1, #5
   15e74:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
   15e78:	0143      	lsls	r3, r0, #5
   15e7a:	1a1b      	subs	r3, r3, r0
   15e7c:	eb62 0201 	sbc.w	r2, r2, r1
   15e80:	0092      	lsls	r2, r2, #2
   15e82:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
   15e86:	009b      	lsls	r3, r3, #2
   15e88:	181b      	adds	r3, r3, r0
   15e8a:	eb42 0201 	adc.w	r2, r2, r1
   15e8e:	00d2      	lsls	r2, r2, #3
   15e90:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
   15e94:	f3c3 3310 	ubfx	r3, r3, #12, #17
   15e98:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
   15e9c:	0bd2      	lsrs	r2, r2, #15
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
   15e9e:	4809      	ldr	r0, [pc, #36]	; (15ec4 <z_impl_log_process+0xb8>)
   15ea0:	6801      	ldr	r1, [r0, #0]
   15ea2:	6840      	ldr	r0, [r0, #4]
   15ea4:	1a5b      	subs	r3, r3, r1
   15ea6:	eb62 0200 	sbc.w	r2, r2, r0
		if ((dropped_pend || unordered_pend) &&
   15eaa:	f240 31e9 	movw	r1, #1001	; 0x3e9
   15eae:	428b      	cmp	r3, r1
   15eb0:	f172 0200 	sbcs.w	r2, r2, #0
   15eb4:	d3cf      	bcc.n	15e56 <z_impl_log_process+0x4a>
				dropped_notify();
   15eb6:	f7ff ff3d 	bl	15d34 <dropped_notify>
			if (unordered_pend) {
   15eba:	e7cc      	b.n	15e56 <z_impl_log_process+0x4a>
   15ebc:	20008fde 	.word	0x20008fde
   15ec0:	20007b20 	.word	0x20007b20
   15ec4:	20002020 	.word	0x20002020

00015ec8 <z_impl_log_panic>:
	if (panic_mode) {
   15ec8:	4b0f      	ldr	r3, [pc, #60]	; (15f08 <z_impl_log_panic+0x40>)
   15eca:	781b      	ldrb	r3, [r3, #0]
   15ecc:	b103      	cbz	r3, 15ed0 <z_impl_log_panic+0x8>
   15ece:	4770      	bx	lr
{
   15ed0:	b510      	push	{r4, lr}
	(void)z_log_init(true, false);
   15ed2:	2100      	movs	r1, #0
   15ed4:	2001      	movs	r0, #1
   15ed6:	f7ff fe3f 	bl	15b58 <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   15eda:	4c0c      	ldr	r4, [pc, #48]	; (15f0c <z_impl_log_panic+0x44>)
   15edc:	e000      	b.n	15ee0 <z_impl_log_panic+0x18>
   15ede:	3410      	adds	r4, #16
   15ee0:	4b0b      	ldr	r3, [pc, #44]	; (15f10 <z_impl_log_panic+0x48>)
   15ee2:	429c      	cmp	r4, r3
   15ee4:	d208      	bcs.n	15ef8 <z_impl_log_panic+0x30>
	return backend->cb->active;
   15ee6:	6863      	ldr	r3, [r4, #4]
   15ee8:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
   15eea:	2b00      	cmp	r3, #0
   15eec:	d0f7      	beq.n	15ede <z_impl_log_panic+0x16>
	backend->api->panic(backend);
   15eee:	6823      	ldr	r3, [r4, #0]
   15ef0:	689b      	ldr	r3, [r3, #8]
   15ef2:	4620      	mov	r0, r4
   15ef4:	4798      	blx	r3
}
   15ef6:	e7f2      	b.n	15ede <z_impl_log_panic+0x16>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
   15ef8:	f7ff ff88 	bl	15e0c <z_impl_log_process>
		while (log_process() == true) {
   15efc:	2800      	cmp	r0, #0
   15efe:	d1fb      	bne.n	15ef8 <z_impl_log_panic+0x30>
	panic_mode = true;
   15f00:	4b01      	ldr	r3, [pc, #4]	; (15f08 <z_impl_log_panic+0x40>)
   15f02:	2201      	movs	r2, #1
   15f04:	701a      	strb	r2, [r3, #0]
}
   15f06:	bd10      	pop	{r4, pc}
   15f08:	20008fdf 	.word	0x20008fdf
   15f0c:	0002df48 	.word	0x0002df48
   15f10:	0002df58 	.word	0x0002df58

00015f14 <z_log_msg_post_finalize>:
{
   15f14:	b510      	push	{r4, lr}
   15f16:	b082      	sub	sp, #8
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   15f18:	4b1b      	ldr	r3, [pc, #108]	; (15f88 <z_log_msg_post_finalize+0x74>)
   15f1a:	f3bf 8f5b 	dmb	ish
   15f1e:	e853 2f00 	ldrex	r2, [r3]
   15f22:	1c51      	adds	r1, r2, #1
   15f24:	e843 1000 	strex	r0, r1, [r3]
   15f28:	2800      	cmp	r0, #0
   15f2a:	d1f8      	bne.n	15f1e <z_log_msg_post_finalize+0xa>
   15f2c:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
   15f30:	4b16      	ldr	r3, [pc, #88]	; (15f8c <z_log_msg_post_finalize+0x78>)
   15f32:	781b      	ldrb	r3, [r3, #0]
   15f34:	b963      	cbnz	r3, 15f50 <z_log_msg_post_finalize+0x3c>
	} else if (proc_tid != NULL) {
   15f36:	4b16      	ldr	r3, [pc, #88]	; (15f90 <z_log_msg_post_finalize+0x7c>)
   15f38:	681b      	ldr	r3, [r3, #0]
   15f3a:	b1bb      	cbz	r3, 15f6c <z_log_msg_post_finalize+0x58>
		if (cnt == 0) {
   15f3c:	b1c2      	cbz	r2, 15f70 <z_log_msg_post_finalize+0x5c>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   15f3e:	2a0a      	cmp	r2, #10
   15f40:	d114      	bne.n	15f6c <z_log_msg_post_finalize+0x58>
	z_impl_k_timer_stop(timer);
   15f42:	4814      	ldr	r0, [pc, #80]	; (15f94 <z_log_msg_post_finalize+0x80>)
   15f44:	f017 fbfa 	bl	2d73c <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   15f48:	4813      	ldr	r0, [pc, #76]	; (15f98 <z_log_msg_post_finalize+0x84>)
   15f4a:	f00f f941 	bl	251d0 <z_impl_k_sem_give>
}
   15f4e:	e00d      	b.n	15f6c <z_log_msg_post_finalize+0x58>
   15f50:	f04f 0340 	mov.w	r3, #64	; 0x40
   15f54:	f3ef 8411 	mrs	r4, BASEPRI
   15f58:	f383 8812 	msr	BASEPRI_MAX, r3
   15f5c:	f3bf 8f6f 	isb	sy
   15f60:	f7ff ff54 	bl	15e0c <z_impl_log_process>
	__asm__ volatile(
   15f64:	f384 8811 	msr	BASEPRI, r4
   15f68:	f3bf 8f6f 	isb	sy
   15f6c:	b002      	add	sp, #8
   15f6e:	bd10      	pop	{r4, pc}
	z_impl_k_timer_start(timer, duration, period);
   15f70:	2200      	movs	r2, #0
   15f72:	2300      	movs	r3, #0
   15f74:	e9cd 2300 	strd	r2, r3, [sp]
   15f78:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   15f7c:	2300      	movs	r3, #0
   15f7e:	4805      	ldr	r0, [pc, #20]	; (15f94 <z_log_msg_post_finalize+0x80>)
   15f80:	f010 f910 	bl	261a4 <z_impl_k_timer_start>
   15f84:	e7f2      	b.n	15f6c <z_log_msg_post_finalize+0x58>
   15f86:	bf00      	nop
   15f88:	20007b20 	.word	0x20007b20
   15f8c:	20008fdf 	.word	0x20008fdf
   15f90:	20007b18 	.word	0x20007b18
   15f94:	20002028 	.word	0x20002028
   15f98:	20000bfc 	.word	0x20000bfc

00015f9c <z_log_msg_commit>:
{
   15f9c:	b510      	push	{r4, lr}
   15f9e:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
   15fa0:	4b04      	ldr	r3, [pc, #16]	; (15fb4 <z_log_msg_commit+0x18>)
   15fa2:	681b      	ldr	r3, [r3, #0]
   15fa4:	4798      	blx	r3
   15fa6:	60a0      	str	r0, [r4, #8]
	msg_commit(&log_buffer, msg);
   15fa8:	4621      	mov	r1, r4
   15faa:	4803      	ldr	r0, [pc, #12]	; (15fb8 <z_log_msg_commit+0x1c>)
   15fac:	f011 fef9 	bl	27da2 <msg_commit>
}
   15fb0:	bd10      	pop	{r4, pc}
   15fb2:	bf00      	nop
   15fb4:	20000834 	.word	0x20000834
   15fb8:	20000b3c 	.word	0x20000b3c

00015fbc <log_process_thread_func>:
{
   15fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t activate_mask = z_log_init(false, false);
   15fc0:	2100      	movs	r1, #0
   15fc2:	4608      	mov	r0, r1
   15fc4:	f7ff fdc8 	bl	15b58 <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   15fc8:	4680      	mov	r8, r0
   15fca:	b140      	cbz	r0, 15fde <log_process_thread_func+0x22>
   15fcc:	f240 6667 	movw	r6, #1639	; 0x667
   15fd0:	2700      	movs	r7, #0
	return z_impl_z_current_get();
   15fd2:	f00f feb9 	bl	25d48 <z_impl_z_current_get>
	thread_set(k_current_get());
   15fd6:	f7ff fe0b 	bl	15bf0 <thread_set>
	bool processed_any = false;
   15fda:	2500      	movs	r5, #0
   15fdc:	e015      	b.n	1600a <log_process_thread_func+0x4e>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   15fde:	f04f 36ff 	mov.w	r6, #4294967295
   15fe2:	f04f 37ff 	mov.w	r7, #4294967295
   15fe6:	e7f4      	b.n	15fd2 <log_process_thread_func+0x16>
			activate_mask = activate_foreach_backend(activate_mask);
   15fe8:	4640      	mov	r0, r8
   15fea:	f7ff fd83 	bl	15af4 <activate_foreach_backend>
			if (!activate_mask) {
   15fee:	4680      	mov	r8, r0
   15ff0:	b970      	cbnz	r0, 16010 <log_process_thread_func+0x54>
				timeout = K_FOREVER;
   15ff2:	f04f 36ff 	mov.w	r6, #4294967295
   15ff6:	f04f 37ff 	mov.w	r7, #4294967295
   15ffa:	e009      	b.n	16010 <log_process_thread_func+0x54>
   15ffc:	462c      	mov	r4, r5
	return z_impl_k_sem_take(sem, timeout);
   15ffe:	4632      	mov	r2, r6
   16000:	463b      	mov	r3, r7
   16002:	4809      	ldr	r0, [pc, #36]	; (16028 <log_process_thread_func+0x6c>)
   16004:	f00f f90c 	bl	25220 <z_impl_k_sem_take>
{
   16008:	4625      	mov	r5, r4
		if (activate_mask) {
   1600a:	f1b8 0f00 	cmp.w	r8, #0
   1600e:	d1eb      	bne.n	15fe8 <log_process_thread_func+0x2c>
   16010:	f7ff fefc 	bl	15e0c <z_impl_log_process>
		if (log_process() == false) {
   16014:	4604      	mov	r4, r0
   16016:	2800      	cmp	r0, #0
   16018:	d1f6      	bne.n	16008 <log_process_thread_func+0x4c>
			if (processed_any) {
   1601a:	2d00      	cmp	r5, #0
   1601c:	d0ee      	beq.n	15ffc <log_process_thread_func+0x40>
				log_backend_notify_all(LOG_BACKEND_EVT_PROCESS_THREAD_DONE, NULL);
   1601e:	2100      	movs	r1, #0
   16020:	4608      	mov	r0, r1
   16022:	f7ff fd4f 	bl	15ac4 <log_backend_notify_all>
   16026:	e7ea      	b.n	15ffe <log_process_thread_func+0x42>
   16028:	20000bfc 	.word	0x20000bfc

0001602c <log_src_cnt_get>:
	if (z_log_is_local_domain(domain_id)) {
		return log_const_source_id(__log_const_end);
	}

	return link_source_count(domain_id);
}
   1602c:	4802      	ldr	r0, [pc, #8]	; (16038 <log_src_cnt_get+0xc>)
   1602e:	4b03      	ldr	r3, [pc, #12]	; (1603c <log_src_cnt_get+0x10>)
   16030:	1ac0      	subs	r0, r0, r3
   16032:	08c0      	lsrs	r0, r0, #3
   16034:	4770      	bx	lr
   16036:	bf00      	nop
   16038:	0002df48 	.word	0x0002df48
   1603c:	0002de68 	.word	0x0002de68

00016040 <log_source_name_get>:

	return (const char *)cached;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
   16040:	b510      	push	{r4, lr}
   16042:	460c      	mov	r4, r1
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
   16044:	f7ff fff2 	bl	1602c <log_src_cnt_get>
   16048:	42a0      	cmp	r0, r4
   1604a:	d903      	bls.n	16054 <log_source_name_get+0x14>
			return __log_const_start[source_id].name;
   1604c:	4b02      	ldr	r3, [pc, #8]	; (16058 <log_source_name_get+0x18>)
   1604e:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			return NULL;
		}
	}

	return link_source_name_get(domain_id, source_id);
}
   16052:	bd10      	pop	{r4, pc}
			return NULL;
   16054:	2000      	movs	r0, #0
   16056:	e7fc      	b.n	16052 <log_source_name_get+0x12>
   16058:	0002de68 	.word	0x0002de68

0001605c <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
   1605c:	b508      	push	{r3, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
   1605e:	4b09      	ldr	r3, [pc, #36]	; (16084 <log_backend_enable+0x28>)
   16060:	1ac3      	subs	r3, r0, r3
   16062:	111b      	asrs	r3, r3, #4
   16064:	3301      	adds	r3, #1
	backend->cb->id = id;
   16066:	f8d0 c004 	ldr.w	ip, [r0, #4]
   1606a:	f88c 3004 	strb.w	r3, [ip, #4]

	log_backend_id_set(backend, id);
	backend->cb->level = level;
   1606e:	6843      	ldr	r3, [r0, #4]
   16070:	719a      	strb	r2, [r3, #6]
	backend->cb->ctx = ctx;
   16072:	6843      	ldr	r3, [r0, #4]
   16074:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
   16076:	6843      	ldr	r3, [r0, #4]
   16078:	2201      	movs	r2, #1
   1607a:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
   1607c:	f7ff fe1a 	bl	15cb4 <z_log_notify_backend_enabled>
}
   16080:	bd08      	pop	{r3, pc}
   16082:	bf00      	nop
   16084:	0002df48 	.word	0x0002df48

00016088 <cbprintf_package_copy>:
{
   16088:	b500      	push	{lr}
   1608a:	b089      	sub	sp, #36	; 0x24
	struct z_cbprintf_buf_desc buf_desc = {
   1608c:	9205      	str	r2, [sp, #20]
   1608e:	9306      	str	r3, [sp, #24]
   16090:	2300      	movs	r3, #0
   16092:	9307      	str	r3, [sp, #28]
	return cbprintf_package_convert(in_packaged, in_len,
   16094:	b162      	cbz	r2, 160b0 <cbprintf_package_copy+0x28>
   16096:	4a07      	ldr	r2, [pc, #28]	; (160b4 <cbprintf_package_copy+0x2c>)
   16098:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1609a:	9302      	str	r3, [sp, #8]
   1609c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1609e:	9301      	str	r3, [sp, #4]
   160a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   160a2:	9300      	str	r3, [sp, #0]
   160a4:	ab05      	add	r3, sp, #20
   160a6:	f7fe fe81 	bl	14dac <cbprintf_package_convert>
}
   160aa:	b009      	add	sp, #36	; 0x24
   160ac:	f85d fb04 	ldr.w	pc, [sp], #4
	return cbprintf_package_convert(in_packaged, in_len,
   160b0:	2200      	movs	r2, #0
   160b2:	e7f1      	b.n	16098 <cbprintf_package_copy+0x10>
   160b4:	00027db3 	.word	0x00027db3

000160b8 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
   160b8:	b40e      	push	{r1, r2, r3}
   160ba:	b500      	push	{lr}
   160bc:	b084      	sub	sp, #16
   160be:	4601      	mov	r1, r0
   160c0:	ab05      	add	r3, sp, #20
   160c2:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
   160c6:	9303      	str	r3, [sp, #12]
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   160c8:	2000      	movs	r0, #0
   160ca:	9000      	str	r0, [sp, #0]
   160cc:	4803      	ldr	r0, [pc, #12]	; (160dc <print_formatted+0x24>)
   160ce:	f7ff fa0d 	bl	154ec <z_cbvprintf_impl>
	length = cbvprintf(out_func, (void *)output, fmt, args);
	va_end(args);

	return length;
}
   160d2:	b004      	add	sp, #16
   160d4:	f85d eb04 	ldr.w	lr, [sp], #4
   160d8:	b003      	add	sp, #12
   160da:	4770      	bx	lr
   160dc:	00027fd3 	.word	0x00027fd3

000160e0 <timestamp_print>:
	output_date->day += seconds / SECONDS_IN_DAY;
}

static int timestamp_print(const struct log_output *output,
			   uint32_t flags, log_timestamp_t timestamp)
{
   160e0:	b530      	push	{r4, r5, lr}
   160e2:	b085      	sub	sp, #20
		(flags & LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP) |
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) |
		IS_ENABLED(CONFIG_LOG_OUTPUT_FORMAT_LINUX_TIMESTAMP);


	if (!format) {
   160e4:	f011 0f44 	tst.w	r1, #68	; 0x44
   160e8:	d005      	beq.n	160f6 <timestamp_print+0x16>
#ifndef CONFIG_LOG_TIMESTAMP_64BIT
		length = print_formatted(output, "[%08lu] ", timestamp);
#else
		length = print_formatted(output, "[%016llu] ", timestamp);
#endif
	} else if (freq != 0U) {
   160ea:	4b1a      	ldr	r3, [pc, #104]	; (16154 <timestamp_print+0x74>)
   160ec:	681c      	ldr	r4, [r3, #0]
   160ee:	b934      	cbnz	r4, 160fe <timestamp_print+0x1e>
							"[%02u:%02u:%02u.%03u,%03u] ",
							hours, mins, seconds, ms, us);
			}
		}
	} else {
		length = 0;
   160f0:	2000      	movs	r0, #0
	}

	return length;
}
   160f2:	b005      	add	sp, #20
   160f4:	bd30      	pop	{r4, r5, pc}
		length = print_formatted(output, "[%08lu] ", timestamp);
   160f6:	4918      	ldr	r1, [pc, #96]	; (16158 <timestamp_print+0x78>)
   160f8:	f7ff ffde 	bl	160b8 <print_formatted>
   160fc:	e7f9      	b.n	160f2 <timestamp_print+0x12>
		timestamp /= timestamp_div;
   160fe:	4b17      	ldr	r3, [pc, #92]	; (1615c <timestamp_print+0x7c>)
   16100:	6819      	ldr	r1, [r3, #0]
   16102:	fbb2 f1f1 	udiv	r1, r2, r1
		total_seconds = timestamp / freq;
   16106:	fbb1 fcf4 	udiv	ip, r1, r4
		hours = seconds / 3600U;
   1610a:	4a15      	ldr	r2, [pc, #84]	; (16160 <timestamp_print+0x80>)
   1610c:	fba2 320c 	umull	r3, r2, r2, ip
   16110:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
   16112:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
   16116:	fb0e ce12 	mls	lr, lr, r2, ip
		mins = seconds / 60U;
   1611a:	4b12      	ldr	r3, [pc, #72]	; (16164 <timestamp_print+0x84>)
   1611c:	fba3 530e 	umull	r5, r3, r3, lr
   16120:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
   16122:	fb04 111c 	mls	r1, r4, ip, r1
		ms = (remainder * 1000U) / freq;
   16126:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
   1612a:	fb0c f101 	mul.w	r1, ip, r1
   1612e:	fbb1 f5f4 	udiv	r5, r1, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   16132:	fb04 1115 	mls	r1, r4, r5, r1
   16136:	fb0c f101 	mul.w	r1, ip, r1
   1613a:	fbb1 f1f4 	udiv	r1, r1, r4
				length = print_formatted(output,
   1613e:	9102      	str	r1, [sp, #8]
   16140:	9501      	str	r5, [sp, #4]
   16142:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
   16146:	ebae 0181 	sub.w	r1, lr, r1, lsl #2
   1614a:	9100      	str	r1, [sp, #0]
   1614c:	4906      	ldr	r1, [pc, #24]	; (16168 <timestamp_print+0x88>)
   1614e:	f7ff ffb3 	bl	160b8 <print_formatted>
   16152:	e7ce      	b.n	160f2 <timestamp_print+0x12>
   16154:	20007b2c 	.word	0x20007b2c
   16158:	0002ee8c 	.word	0x0002ee8c
   1615c:	20007b28 	.word	0x20007b28
   16160:	91a2b3c5 	.word	0x91a2b3c5
   16164:	88888889 	.word	0x88888889
   16168:	0002ee98 	.word	0x0002ee98

0001616c <color_print>:

static void color_print(const struct log_output *output,
			bool color, bool start, uint32_t level)
{
	if (color) {
   1616c:	b161      	cbz	r1, 16188 <color_print+0x1c>
{
   1616e:	b508      	push	{r3, lr}
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
   16170:	b12a      	cbz	r2, 1617e <color_print+0x12>
		const char *log_color = start && (colors[level] != NULL) ?
   16172:	4a06      	ldr	r2, [pc, #24]	; (1618c <color_print+0x20>)
   16174:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   16178:	b912      	cbnz	r2, 16180 <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
   1617a:	4a05      	ldr	r2, [pc, #20]	; (16190 <color_print+0x24>)
   1617c:	e000      	b.n	16180 <color_print+0x14>
   1617e:	4a04      	ldr	r2, [pc, #16]	; (16190 <color_print+0x24>)
		print_formatted(output, "%s", log_color);
   16180:	4904      	ldr	r1, [pc, #16]	; (16194 <color_print+0x28>)
   16182:	f7ff ff99 	bl	160b8 <print_formatted>
	}
}
   16186:	bd08      	pop	{r3, pc}
   16188:	4770      	bx	lr
   1618a:	bf00      	nop
   1618c:	0002ef3c 	.word	0x0002ef3c
   16190:	0002eeb4 	.word	0x0002eeb4
   16194:	0002eebc 	.word	0x0002eebc

00016198 <ids_print>:
		     bool level_on,
		     bool func_on,
		     const char *domain,
		     const char *source,
		     uint32_t level)
{
   16198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1619c:	4605      	mov	r5, r0
   1619e:	4690      	mov	r8, r2
   161a0:	461e      	mov	r6, r3
   161a2:	9f06      	ldr	r7, [sp, #24]
	int total = 0;

	if (level_on) {
   161a4:	b981      	cbnz	r1, 161c8 <ids_print+0x30>
	int total = 0;
   161a6:	2400      	movs	r4, #0
		total += print_formatted(output, "<%s> ", severity[level]);
	}

	if (domain) {
   161a8:	b12e      	cbz	r6, 161b6 <ids_print+0x1e>
		total += print_formatted(output, "%s/", domain);
   161aa:	4632      	mov	r2, r6
   161ac:	4910      	ldr	r1, [pc, #64]	; (161f0 <ids_print+0x58>)
   161ae:	4628      	mov	r0, r5
   161b0:	f7ff ff82 	bl	160b8 <print_formatted>
   161b4:	4404      	add	r4, r0
	}

	if (source) {
   161b6:	b1b7      	cbz	r7, 161e6 <ids_print+0x4e>
		total += print_formatted(output,
   161b8:	f1b8 0f00 	cmp.w	r8, #0
   161bc:	d00d      	beq.n	161da <ids_print+0x42>
				(func_on &&
   161be:	9b07      	ldr	r3, [sp, #28]
   161c0:	2b04      	cmp	r3, #4
   161c2:	d013      	beq.n	161ec <ids_print+0x54>
		total += print_formatted(output,
   161c4:	490b      	ldr	r1, [pc, #44]	; (161f4 <ids_print+0x5c>)
   161c6:	e009      	b.n	161dc <ids_print+0x44>
		total += print_formatted(output, "<%s> ", severity[level]);
   161c8:	4b0b      	ldr	r3, [pc, #44]	; (161f8 <ids_print+0x60>)
   161ca:	9a07      	ldr	r2, [sp, #28]
   161cc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   161d0:	490a      	ldr	r1, [pc, #40]	; (161fc <ids_print+0x64>)
   161d2:	f7ff ff71 	bl	160b8 <print_formatted>
   161d6:	4604      	mov	r4, r0
   161d8:	e7e6      	b.n	161a8 <ids_print+0x10>
		total += print_formatted(output,
   161da:	4906      	ldr	r1, [pc, #24]	; (161f4 <ids_print+0x5c>)
   161dc:	463a      	mov	r2, r7
   161de:	4628      	mov	r0, r5
   161e0:	f7ff ff6a 	bl	160b8 <print_formatted>
   161e4:	4404      	add	r4, r0
				"%s." : "%s: ",
				source);
	}

	return total;
}
   161e6:	4620      	mov	r0, r4
   161e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total += print_formatted(output,
   161ec:	4904      	ldr	r1, [pc, #16]	; (16200 <ids_print+0x68>)
   161ee:	e7f5      	b.n	161dc <ids_print+0x44>
   161f0:	0002eed4 	.word	0x0002eed4
   161f4:	0002eec4 	.word	0x0002eec4
   161f8:	0002ef50 	.word	0x0002ef50
   161fc:	0002eecc 	.word	0x0002eecc
   16200:	0002eec0 	.word	0x0002eec0

00016204 <prefix_print>:
			     bool func_on,
			     log_timestamp_t timestamp,
			     const char *domain,
			     const char *source,
			     uint8_t level)
{
   16204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16208:	b085      	sub	sp, #20
   1620a:	4605      	mov	r5, r0
   1620c:	460c      	mov	r4, r1
   1620e:	4616      	mov	r6, r2
   16210:	9303      	str	r3, [sp, #12]
   16212:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
   16216:	f001 0b02 	and.w	fp, r1, #2
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   1621a:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   1621e:	f3c1 09c0 	ubfx	r9, r1, #3, #1
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
   16222:	f011 fdc4 	bl	27dae <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
   16226:	b1d8      	cbz	r0, 16260 <prefix_print+0x5c>
   16228:	4602      	mov	r2, r0
		length += print_formatted(output, "%s ", tag);
   1622a:	4912      	ldr	r1, [pc, #72]	; (16274 <prefix_print+0x70>)
   1622c:	4628      	mov	r0, r5
   1622e:	f7ff ff43 	bl	160b8 <print_formatted>
   16232:	4607      	mov	r7, r0
	}

	if (stamp) {
   16234:	f1bb 0f00 	cmp.w	fp, #0
   16238:	d114      	bne.n	16264 <prefix_print+0x60>
			output, "%s - - - - ",
			output->control_block->hostname ?
			output->control_block->hostname :
			"zephyr");
	} else {
		color_prefix(output, colors_on, level);
   1623a:	4642      	mov	r2, r8
   1623c:	4651      	mov	r1, sl
   1623e:	4628      	mov	r0, r5
   16240:	f011 fe87 	bl	27f52 <color_prefix>
	}

	length += ids_print(output, level_on, func_on, domain, source, level);
   16244:	f8cd 8004 	str.w	r8, [sp, #4]
   16248:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1624a:	9300      	str	r3, [sp, #0]
   1624c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1624e:	4632      	mov	r2, r6
   16250:	4649      	mov	r1, r9
   16252:	4628      	mov	r0, r5
   16254:	f7ff ffa0 	bl	16198 <ids_print>

	return length;
}
   16258:	4438      	add	r0, r7
   1625a:	b005      	add	sp, #20
   1625c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
   16260:	2700      	movs	r7, #0
   16262:	e7e7      	b.n	16234 <prefix_print+0x30>
		length += timestamp_print(output, flags, timestamp);
   16264:	9a03      	ldr	r2, [sp, #12]
   16266:	4621      	mov	r1, r4
   16268:	4628      	mov	r0, r5
   1626a:	f7ff ff39 	bl	160e0 <timestamp_print>
   1626e:	4407      	add	r7, r0
   16270:	e7e3      	b.n	1623a <prefix_print+0x36>
   16272:	bf00      	nop
   16274:	0002eed8 	.word	0x0002eed8

00016278 <newline_print>:
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   16278:	f011 0f10 	tst.w	r1, #16
   1627c:	d10b      	bne.n	16296 <newline_print+0x1e>
{
   1627e:	b508      	push	{r3, lr}
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   16280:	f011 0f20 	tst.w	r1, #32
   16284:	d003      	beq.n	1628e <newline_print+0x16>
		print_formatted(ctx, "\n");
   16286:	4904      	ldr	r1, [pc, #16]	; (16298 <newline_print+0x20>)
   16288:	f7ff ff16 	bl	160b8 <print_formatted>
}
   1628c:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
   1628e:	4903      	ldr	r1, [pc, #12]	; (1629c <newline_print+0x24>)
   16290:	f7ff ff12 	bl	160b8 <print_formatted>
   16294:	e7fa      	b.n	1628c <newline_print+0x14>
   16296:	4770      	bx	lr
   16298:	000312ac 	.word	0x000312ac
   1629c:	0002eedc 	.word	0x0002eedc

000162a0 <hexdump_line_print>:
{
   162a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   162a4:	4605      	mov	r5, r0
   162a6:	460f      	mov	r7, r1
   162a8:	4616      	mov	r6, r2
   162aa:	4698      	mov	r8, r3
	newline_print(output, flags);
   162ac:	9906      	ldr	r1, [sp, #24]
   162ae:	f7ff ffe3 	bl	16278 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
   162b2:	2400      	movs	r4, #0
   162b4:	4544      	cmp	r4, r8
   162b6:	da05      	bge.n	162c4 <hexdump_line_print+0x24>
		print_formatted(output, " ");
   162b8:	4923      	ldr	r1, [pc, #140]	; (16348 <hexdump_line_print+0xa8>)
   162ba:	4628      	mov	r0, r5
   162bc:	f7ff fefc 	bl	160b8 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   162c0:	3401      	adds	r4, #1
   162c2:	e7f7      	b.n	162b4 <hexdump_line_print+0x14>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   162c4:	2400      	movs	r4, #0
   162c6:	e009      	b.n	162dc <hexdump_line_print+0x3c>
			print_formatted(output, " ");
   162c8:	491f      	ldr	r1, [pc, #124]	; (16348 <hexdump_line_print+0xa8>)
   162ca:	4628      	mov	r0, r5
   162cc:	f7ff fef4 	bl	160b8 <print_formatted>
   162d0:	e00b      	b.n	162ea <hexdump_line_print+0x4a>
			print_formatted(output, "   ");
   162d2:	491e      	ldr	r1, [pc, #120]	; (1634c <hexdump_line_print+0xac>)
   162d4:	4628      	mov	r0, r5
   162d6:	f7ff feef 	bl	160b8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   162da:	3401      	adds	r4, #1
   162dc:	2c0f      	cmp	r4, #15
   162de:	dc0c      	bgt.n	162fa <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
   162e0:	2c00      	cmp	r4, #0
   162e2:	dd02      	ble.n	162ea <hexdump_line_print+0x4a>
   162e4:	f014 0f07 	tst.w	r4, #7
   162e8:	d0ee      	beq.n	162c8 <hexdump_line_print+0x28>
		if (i < length) {
   162ea:	42b4      	cmp	r4, r6
   162ec:	d2f1      	bcs.n	162d2 <hexdump_line_print+0x32>
			print_formatted(output, "%02x ", data[i]);
   162ee:	5d3a      	ldrb	r2, [r7, r4]
   162f0:	4917      	ldr	r1, [pc, #92]	; (16350 <hexdump_line_print+0xb0>)
   162f2:	4628      	mov	r0, r5
   162f4:	f7ff fee0 	bl	160b8 <print_formatted>
   162f8:	e7ef      	b.n	162da <hexdump_line_print+0x3a>
	print_formatted(output, "|");
   162fa:	4916      	ldr	r1, [pc, #88]	; (16354 <hexdump_line_print+0xb4>)
   162fc:	4628      	mov	r0, r5
   162fe:	f7ff fedb 	bl	160b8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   16302:	2400      	movs	r4, #0
   16304:	e009      	b.n	1631a <hexdump_line_print+0x7a>
			print_formatted(output, " ");
   16306:	4910      	ldr	r1, [pc, #64]	; (16348 <hexdump_line_print+0xa8>)
   16308:	4628      	mov	r0, r5
   1630a:	f7ff fed5 	bl	160b8 <print_formatted>
   1630e:	e00b      	b.n	16328 <hexdump_line_print+0x88>
			print_formatted(output, "%c",
   16310:	4911      	ldr	r1, [pc, #68]	; (16358 <hexdump_line_print+0xb8>)
   16312:	4628      	mov	r0, r5
   16314:	f7ff fed0 	bl	160b8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   16318:	3401      	adds	r4, #1
   1631a:	2c0f      	cmp	r4, #15
   1631c:	dc12      	bgt.n	16344 <hexdump_line_print+0xa4>
		if (i > 0 && !(i % 8)) {
   1631e:	2c00      	cmp	r4, #0
   16320:	dd02      	ble.n	16328 <hexdump_line_print+0x88>
   16322:	f014 0f07 	tst.w	r4, #7
   16326:	d0ee      	beq.n	16306 <hexdump_line_print+0x66>
		if (i < length) {
   16328:	42b4      	cmp	r4, r6
   1632a:	d206      	bcs.n	1633a <hexdump_line_print+0x9a>
			unsigned char c = (unsigned char)data[i];
   1632c:	5d3a      	ldrb	r2, [r7, r4]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
   1632e:	f1a2 0320 	sub.w	r3, r2, #32
			print_formatted(output, "%c",
   16332:	2b5e      	cmp	r3, #94	; 0x5e
   16334:	d9ec      	bls.n	16310 <hexdump_line_print+0x70>
   16336:	222e      	movs	r2, #46	; 0x2e
   16338:	e7ea      	b.n	16310 <hexdump_line_print+0x70>
			print_formatted(output, " ");
   1633a:	4903      	ldr	r1, [pc, #12]	; (16348 <hexdump_line_print+0xa8>)
   1633c:	4628      	mov	r0, r5
   1633e:	f7ff febb 	bl	160b8 <print_formatted>
   16342:	e7e9      	b.n	16318 <hexdump_line_print+0x78>
}
   16344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16348:	0002eed0 	.word	0x0002eed0
   1634c:	0002eee8 	.word	0x0002eee8
   16350:	0002eee0 	.word	0x0002eee0
   16354:	0002eeec 	.word	0x0002eeec
   16358:	0002eef0 	.word	0x0002eef0

0001635c <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
   1635c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16360:	b084      	sub	sp, #16
   16362:	4604      	mov	r4, r0
   16364:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
   16368:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   1636a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
   1636c:	b995      	cbnz	r5, 16394 <log_output_process+0x38>
		prefix_offset = 0;
		/* source set to 1 indicates raw string and contrary to printk
		 * case it should not append anything to the output (printk is
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   1636e:	2b01      	cmp	r3, #1
   16370:	d01b      	beq.n	163aa <log_output_process+0x4e>
   16372:	4817      	ldr	r0, [pc, #92]	; (163d0 <log_output_process+0x74>)
		prefix_offset = 0;
   16374:	f04f 0800 	mov.w	r8, #0
	}

	if (package) {
   16378:	b127      	cbz	r7, 16384 <log_output_process+0x28>
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
   1637a:	463b      	mov	r3, r7
   1637c:	4622      	mov	r2, r4
   1637e:	4915      	ldr	r1, [pc, #84]	; (163d4 <log_output_process+0x78>)
   16380:	f010 fbac 	bl	26adc <cbpprintf_external>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
   16384:	b9ae      	cbnz	r6, 163b2 <log_output_process+0x56>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
   16386:	b9ed      	cbnz	r5, 163c4 <log_output_process+0x68>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
   16388:	4620      	mov	r0, r4
   1638a:	f011 fe15 	bl	27fb8 <log_output_flush>
}
   1638e:	b004      	add	sp, #16
   16390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		prefix_offset = prefix_print(output, flags, 0, timestamp, domain, source, level);
   16394:	9502      	str	r5, [sp, #8]
   16396:	9301      	str	r3, [sp, #4]
   16398:	9200      	str	r2, [sp, #0]
   1639a:	460b      	mov	r3, r1
   1639c:	2200      	movs	r2, #0
   1639e:	990e      	ldr	r1, [sp, #56]	; 0x38
   163a0:	f7ff ff30 	bl	16204 <prefix_print>
   163a4:	4680      	mov	r8, r0
		cb = out_func;
   163a6:	480c      	ldr	r0, [pc, #48]	; (163d8 <log_output_process+0x7c>)
   163a8:	e7e6      	b.n	16378 <log_output_process+0x1c>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   163aa:	480b      	ldr	r0, [pc, #44]	; (163d8 <log_output_process+0x7c>)
		prefix_offset = 0;
   163ac:	f04f 0800 	mov.w	r8, #0
   163b0:	e7e2      	b.n	16378 <log_output_process+0x1c>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
   163b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   163b4:	9300      	str	r3, [sp, #0]
   163b6:	4643      	mov	r3, r8
   163b8:	4632      	mov	r2, r6
   163ba:	990c      	ldr	r1, [sp, #48]	; 0x30
   163bc:	4620      	mov	r0, r4
   163be:	f011 fde0 	bl	27f82 <log_msg_hexdump>
   163c2:	e7e0      	b.n	16386 <log_output_process+0x2a>
		postfix_print(output, flags, level);
   163c4:	462a      	mov	r2, r5
   163c6:	990e      	ldr	r1, [sp, #56]	; 0x38
   163c8:	4620      	mov	r0, r4
   163ca:	f011 fdce 	bl	27f6a <postfix_print>
   163ce:	e7db      	b.n	16388 <log_output_process+0x2c>
   163d0:	0002800b 	.word	0x0002800b
   163d4:	00027f43 	.word	0x00027f43
   163d8:	00027fd3 	.word	0x00027fd3

000163dc <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
   163dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   163e0:	b086      	sub	sp, #24
   163e2:	4605      	mov	r5, r0
   163e4:	460c      	mov	r4, r1
   163e6:	4617      	mov	r7, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
   163e8:	f8d1 8008 	ldr.w	r8, [r1, #8]
	return msg->hdr.desc.level;
   163ec:	880e      	ldrh	r6, [r1, #0]
   163ee:	f3c6 1682 	ubfx	r6, r6, #6, #3
	return msg->hdr.desc.domain;
   163f2:	7808      	ldrb	r0, [r1, #0]
   163f4:	f3c0 00c2 	ubfx	r0, r0, #3, #3
	return msg->hdr.source;
   163f8:	684b      	ldr	r3, [r1, #4]
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
   163fa:	b133      	cbz	r3, 1640a <log_output_msg_process+0x2e>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
   163fc:	4a11      	ldr	r2, [pc, #68]	; (16444 <log_output_msg_process+0x68>)
   163fe:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
   16400:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
   16404:	2900      	cmp	r1, #0
   16406:	da18      	bge.n	1643a <log_output_msg_process+0x5e>
   16408:	2300      	movs	r3, #0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
   1640a:	4622      	mov	r2, r4
   1640c:	f852 1b10 	ldr.w	r1, [r2], #16
   16410:	f3c1 2149 	ubfx	r1, r1, #9, #10
	*len = msg->hdr.desc.data_len;
   16414:	8860      	ldrh	r0, [r4, #2]
   16416:	f3c0 00cb 	ubfx	r0, r0, #3, #12
	return msg->data + msg->hdr.desc.package_len;
   1641a:	1854      	adds	r4, r2, r1
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
   1641c:	b901      	cbnz	r1, 16420 <log_output_msg_process+0x44>
   1641e:	2200      	movs	r2, #0
   16420:	9704      	str	r7, [sp, #16]
   16422:	9003      	str	r0, [sp, #12]
   16424:	9402      	str	r4, [sp, #8]
   16426:	9201      	str	r2, [sp, #4]
   16428:	9600      	str	r6, [sp, #0]
   1642a:	2200      	movs	r2, #0
   1642c:	4641      	mov	r1, r8
   1642e:	4628      	mov	r0, r5
   16430:	f7ff ff94 	bl	1635c <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
   16434:	b006      	add	sp, #24
   16436:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
   1643a:	f7ff fe01 	bl	16040 <log_source_name_get>
   1643e:	4603      	mov	r3, r0
   16440:	e7e3      	b.n	1640a <log_output_msg_process+0x2e>
   16442:	bf00      	nop
   16444:	0002de68 	.word	0x0002de68

00016448 <log_output_dropped_process>:

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
   16448:	b570      	push	{r4, r5, r6, lr}
   1644a:	b082      	sub	sp, #8
   1644c:	4604      	mov	r4, r0
	char buf[5];
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;
   1644e:	6805      	ldr	r5, [r0, #0]

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   16450:	f242 730f 	movw	r3, #9999	; 0x270f
   16454:	428b      	cmp	r3, r1
   16456:	bf28      	it	cs
   16458:	460b      	movcs	r3, r1
   1645a:	4a0e      	ldr	r2, [pc, #56]	; (16494 <log_output_dropped_process+0x4c>)
   1645c:	2105      	movs	r1, #5
   1645e:	4668      	mov	r0, sp
   16460:	f010 fbdc 	bl	26c1c <snprintk>
   16464:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
		     output->control_block->ctx);
   16466:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   16468:	685b      	ldr	r3, [r3, #4]
   1646a:	220b      	movs	r2, #11
   1646c:	490a      	ldr	r1, [pc, #40]	; (16498 <log_output_dropped_process+0x50>)
   1646e:	4628      	mov	r0, r5
   16470:	f011 fd5a 	bl	27f28 <buffer_write>
	buffer_write(outf, buf, len, output->control_block->ctx);
   16474:	6863      	ldr	r3, [r4, #4]
   16476:	685b      	ldr	r3, [r3, #4]
   16478:	4632      	mov	r2, r6
   1647a:	4669      	mov	r1, sp
   1647c:	4628      	mov	r0, r5
   1647e:	f011 fd53 	bl	27f28 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
		     output->control_block->ctx);
   16482:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
   16484:	685b      	ldr	r3, [r3, #4]
   16486:	221b      	movs	r2, #27
   16488:	4904      	ldr	r1, [pc, #16]	; (1649c <log_output_dropped_process+0x54>)
   1648a:	4628      	mov	r0, r5
   1648c:	f011 fd4c 	bl	27f28 <buffer_write>
}
   16490:	b002      	add	sp, #8
   16492:	bd70      	pop	{r4, r5, r6, pc}
   16494:	000302e0 	.word	0x000302e0
   16498:	0002ef10 	.word	0x0002ef10
   1649c:	0002eef4 	.word	0x0002eef4

000164a0 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
   164a0:	4b07      	ldr	r3, [pc, #28]	; (164c0 <log_output_timestamp_freq_set+0x20>)
   164a2:	2201      	movs	r2, #1
   164a4:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   164a6:	e004      	b.n	164b2 <log_output_timestamp_freq_set+0x12>
		frequency /= 2U;
   164a8:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   164aa:	4a05      	ldr	r2, [pc, #20]	; (164c0 <log_output_timestamp_freq_set+0x20>)
   164ac:	6813      	ldr	r3, [r2, #0]
   164ae:	005b      	lsls	r3, r3, #1
   164b0:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
   164b2:	4b04      	ldr	r3, [pc, #16]	; (164c4 <log_output_timestamp_freq_set+0x24>)
   164b4:	4298      	cmp	r0, r3
   164b6:	d8f7      	bhi.n	164a8 <log_output_timestamp_freq_set+0x8>
	}

	freq = frequency;
   164b8:	4b03      	ldr	r3, [pc, #12]	; (164c8 <log_output_timestamp_freq_set+0x28>)
   164ba:	6018      	str	r0, [r3, #0]
}
   164bc:	4770      	bx	lr
   164be:	bf00      	nop
   164c0:	20007b28 	.word	0x20007b28
   164c4:	000f4240 	.word	0x000f4240
   164c8:	20007b2c 	.word	0x20007b2c

000164cc <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
   164cc:	4b03      	ldr	r3, [pc, #12]	; (164dc <log_backend_rtt_init+0x10>)
   164ce:	2201      	movs	r2, #1
   164d0:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
   164d2:	4b03      	ldr	r3, [pc, #12]	; (164e0 <log_backend_rtt_init+0x14>)
   164d4:	4a03      	ldr	r2, [pc, #12]	; (164e4 <log_backend_rtt_init+0x18>)
   164d6:	601a      	str	r2, [r3, #0]
}
   164d8:	4770      	bx	lr
   164da:	bf00      	nop
   164dc:	20008fe0 	.word	0x20008fe0
   164e0:	20007b58 	.word	0x20007b58
   164e4:	20007b5c 	.word	0x20007b5c

000164e8 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
   164e8:	4b01      	ldr	r3, [pc, #4]	; (164f0 <format_set+0x8>)
   164ea:	6019      	str	r1, [r3, #0]
	return 0;
}
   164ec:	2000      	movs	r0, #0
   164ee:	4770      	bx	lr
   164f0:	20007b44 	.word	0x20007b44

000164f4 <on_failed_write>:
{
   164f4:	b508      	push	{r3, lr}
	if (retry_cnt == 0) {
   164f6:	b918      	cbnz	r0, 16500 <on_failed_write+0xc>
		host_present = false;
   164f8:	4b07      	ldr	r3, [pc, #28]	; (16518 <on_failed_write+0x24>)
   164fa:	2200      	movs	r2, #0
   164fc:	701a      	strb	r2, [r3, #0]
}
   164fe:	bd08      	pop	{r3, pc}
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
   16500:	4b06      	ldr	r3, [pc, #24]	; (1651c <on_failed_write+0x28>)
   16502:	781b      	ldrb	r3, [r3, #0]
	} else if (is_sync_mode()) {
   16504:	b123      	cbz	r3, 16510 <on_failed_write+0x1c>
	z_impl_k_busy_wait(usec_to_wait);
   16506:	f241 3088 	movw	r0, #5000	; 0x1388
   1650a:	f017 f8cc 	bl	2d6a6 <z_impl_k_busy_wait>
}
   1650e:	e7f6      	b.n	164fe <on_failed_write+0xa>
		k_msleep(CONFIG_LOG_BACKEND_RTT_RETRY_DELAY_MS);
   16510:	2005      	movs	r0, #5
   16512:	f011 fd89 	bl	28028 <k_msleep>
}
   16516:	e7f2      	b.n	164fe <on_failed_write+0xa>
   16518:	20008fe0 	.word	0x20008fe0
   1651c:	20008fe1 	.word	0x20008fe1

00016520 <on_write>:
{
   16520:	b538      	push	{r3, r4, r5, lr}
   16522:	4604      	mov	r4, r0
	host_present = true;
   16524:	4b0a      	ldr	r3, [pc, #40]	; (16550 <on_write+0x30>)
   16526:	2201      	movs	r2, #1
   16528:	701a      	strb	r2, [r3, #0]
	return panic_mode;
   1652a:	4b0a      	ldr	r3, [pc, #40]	; (16554 <on_write+0x34>)
   1652c:	781b      	ldrb	r3, [r3, #0]
	if (is_panic_mode()) {
   1652e:	b92b      	cbnz	r3, 1653c <on_write+0x1c>
}
   16530:	bd38      	pop	{r3, r4, r5, pc}
			on_failed_write(retry_cnt--);
   16532:	1e65      	subs	r5, r4, #1
   16534:	4620      	mov	r0, r4
   16536:	f7ff ffdd 	bl	164f4 <on_failed_write>
   1653a:	462c      	mov	r4, r5
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
   1653c:	2000      	movs	r0, #0
   1653e:	f00e f93d 	bl	247bc <SEGGER_RTT_HasDataUp>
   16542:	2800      	cmp	r0, #0
   16544:	d0f4      	beq.n	16530 <on_write+0x10>
   16546:	4b02      	ldr	r3, [pc, #8]	; (16550 <on_write+0x30>)
   16548:	781b      	ldrb	r3, [r3, #0]
   1654a:	2b00      	cmp	r3, #0
   1654c:	d1f1      	bne.n	16532 <on_write+0x12>
   1654e:	e7ef      	b.n	16530 <on_write+0x10>
   16550:	20008fe0 	.word	0x20008fe0
   16554:	20008fe1 	.word	0x20008fe1

00016558 <data_out_block_mode>:
{
   16558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1655a:	4606      	mov	r6, r0
   1655c:	460d      	mov	r5, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
   1655e:	2704      	movs	r7, #4
   16560:	e00d      	b.n	1657e <data_out_block_mode+0x26>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   16562:	462a      	mov	r2, r5
   16564:	4631      	mov	r1, r6
   16566:	2000      	movs	r0, #0
   16568:	f00e f88e 	bl	24688 <SEGGER_RTT_WriteSkipNoLock>
   1656c:	4604      	mov	r4, r0
   1656e:	e014      	b.n	1659a <data_out_block_mode+0x42>
			on_write(retry_cnt);
   16570:	4638      	mov	r0, r7
   16572:	f7ff ffd5 	bl	16520 <on_write>
	} while ((ret == 0) && host_present);
   16576:	b9dc      	cbnz	r4, 165b0 <data_out_block_mode+0x58>
   16578:	4b11      	ldr	r3, [pc, #68]	; (165c0 <data_out_block_mode+0x68>)
   1657a:	781b      	ldrb	r3, [r3, #0]
   1657c:	b1c3      	cbz	r3, 165b0 <data_out_block_mode+0x58>
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
   1657e:	4b11      	ldr	r3, [pc, #68]	; (165c4 <data_out_block_mode+0x6c>)
   16580:	781b      	ldrb	r3, [r3, #0]
		if (!is_sync_mode()) {
   16582:	2b00      	cmp	r3, #0
   16584:	d1ed      	bne.n	16562 <data_out_block_mode+0xa>
			RTT_LOCK();
   16586:	f00e f929 	bl	247dc <zephyr_rtt_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   1658a:	462a      	mov	r2, r5
   1658c:	4631      	mov	r1, r6
   1658e:	2000      	movs	r0, #0
   16590:	f00e f87a 	bl	24688 <SEGGER_RTT_WriteSkipNoLock>
   16594:	4604      	mov	r4, r0
			RTT_UNLOCK();
   16596:	f00e f92d 	bl	247f4 <zephyr_rtt_mutex_unlock>
		if (ret) {
   1659a:	2c00      	cmp	r4, #0
   1659c:	d1e8      	bne.n	16570 <data_out_block_mode+0x18>
		} else if (host_present) {
   1659e:	4b08      	ldr	r3, [pc, #32]	; (165c0 <data_out_block_mode+0x68>)
   165a0:	781b      	ldrb	r3, [r3, #0]
   165a2:	2b00      	cmp	r3, #0
   165a4:	d0e7      	beq.n	16576 <data_out_block_mode+0x1e>
			retry_cnt--;
   165a6:	3f01      	subs	r7, #1
			on_failed_write(retry_cnt);
   165a8:	4638      	mov	r0, r7
   165aa:	f7ff ffa3 	bl	164f4 <on_failed_write>
   165ae:	e7e2      	b.n	16576 <data_out_block_mode+0x1e>
	return ((ret == 0) && host_present) ? 0 : length;
   165b0:	b914      	cbnz	r4, 165b8 <data_out_block_mode+0x60>
   165b2:	4b03      	ldr	r3, [pc, #12]	; (165c0 <data_out_block_mode+0x68>)
   165b4:	781b      	ldrb	r3, [r3, #0]
   165b6:	b903      	cbnz	r3, 165ba <data_out_block_mode+0x62>
   165b8:	462c      	mov	r4, r5
}
   165ba:	4620      	mov	r0, r4
   165bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   165be:	bf00      	nop
   165c0:	20008fe0 	.word	0x20008fe0
   165c4:	20008fe1 	.word	0x20008fe1

000165c8 <panic>:
{
   165c8:	b508      	push	{r3, lr}
	panic_mode = true;
   165ca:	4b03      	ldr	r3, [pc, #12]	; (165d8 <panic+0x10>)
   165cc:	2201      	movs	r2, #1
   165ce:	701a      	strb	r2, [r3, #0]
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
   165d0:	4802      	ldr	r0, [pc, #8]	; (165dc <panic+0x14>)
   165d2:	f011 fcf1 	bl	27fb8 <log_output_flush>
}
   165d6:	bd08      	pop	{r3, pc}
   165d8:	20008fe1 	.word	0x20008fe1
   165dc:	0002ef90 	.word	0x0002ef90

000165e0 <dropped>:
{
   165e0:	b508      	push	{r3, lr}
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
   165e2:	4802      	ldr	r0, [pc, #8]	; (165ec <dropped+0xc>)
   165e4:	f7ff ff30 	bl	16448 <log_output_dropped_process>
}
   165e8:	bd08      	pop	{r3, pc}
   165ea:	bf00      	nop
   165ec:	0002ef90 	.word	0x0002ef90

000165f0 <process>:
{
   165f0:	b510      	push	{r4, lr}
   165f2:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   165f4:	4b04      	ldr	r3, [pc, #16]	; (16608 <process+0x18>)
   165f6:	6818      	ldr	r0, [r3, #0]
   165f8:	f7ff fb44 	bl	15c84 <log_format_func_t_get>
   165fc:	4603      	mov	r3, r0
	log_output_func(&log_output_rtt, &msg->log, flags);
   165fe:	220f      	movs	r2, #15
   16600:	4621      	mov	r1, r4
   16602:	4802      	ldr	r0, [pc, #8]	; (1660c <process+0x1c>)
   16604:	4798      	blx	r3
}
   16606:	bd10      	pop	{r4, pc}
   16608:	20007b44 	.word	0x20007b44
   1660c:	0002ef90 	.word	0x0002ef90

00016610 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   16610:	b570      	push	{r4, r5, r6, lr}
   16612:	4605      	mov	r5, r0
	__asm__ volatile(
   16614:	f04f 0340 	mov.w	r3, #64	; 0x40
   16618:	f3ef 8611 	mrs	r6, BASEPRI
   1661c:	f383 8812 	msr	BASEPRI_MAX, r3
   16620:	f3bf 8f6f 	isb	sy
   16624:	4b0e      	ldr	r3, [pc, #56]	; (16660 <pm_state_notify+0x50>)
   16626:	681c      	ldr	r4, [r3, #0]
   16628:	e00d      	b.n	16646 <pm_state_notify+0x36>
	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
		if (entering_state) {
			callback = notifier->state_entry;
		} else {
			callback = notifier->state_exit;
   1662a:	68a2      	ldr	r2, [r4, #8]
		}

		if (callback) {
   1662c:	b13a      	cbz	r2, 1663e <pm_state_notify+0x2e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   1662e:	4b0d      	ldr	r3, [pc, #52]	; (16664 <pm_state_notify+0x54>)
   16630:	7d1b      	ldrb	r3, [r3, #20]
   16632:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   16636:	490c      	ldr	r1, [pc, #48]	; (16668 <pm_state_notify+0x58>)
   16638:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
   1663c:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   1663e:	4623      	mov	r3, r4
	return node->next;
   16640:	6824      	ldr	r4, [r4, #0]
   16642:	b104      	cbz	r4, 16646 <pm_state_notify+0x36>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
   16644:	b123      	cbz	r3, 16650 <pm_state_notify+0x40>
   16646:	b12c      	cbz	r4, 16654 <pm_state_notify+0x44>
		if (entering_state) {
   16648:	2d00      	cmp	r5, #0
   1664a:	d0ee      	beq.n	1662a <pm_state_notify+0x1a>
			callback = notifier->state_entry;
   1664c:	6862      	ldr	r2, [r4, #4]
   1664e:	e7ed      	b.n	1662c <pm_state_notify+0x1c>
   16650:	461c      	mov	r4, r3
   16652:	e7f8      	b.n	16646 <pm_state_notify+0x36>
	__asm__ volatile(
   16654:	f386 8811 	msr	BASEPRI, r6
   16658:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   1665c:	bd70      	pop	{r4, r5, r6, pc}
   1665e:	bf00      	nop
   16660:	20007b8c 	.word	0x20007b8c
   16664:	20008f98 	.word	0x20008f98
   16668:	20007b80 	.word	0x20007b80

0001666c <pm_exit_pos_ops>:
{
   1666c:	b508      	push	{r3, lr}
	if (pm_state_exit_post_ops != NULL) {
   1666e:	4b06      	ldr	r3, [pc, #24]	; (16688 <pm_exit_pos_ops+0x1c>)
   16670:	b123      	cbz	r3, 1667c <pm_exit_pos_ops+0x10>
		pm_state_exit_post_ops(info->state, info->substate_id);
   16672:	7841      	ldrb	r1, [r0, #1]
   16674:	7800      	ldrb	r0, [r0, #0]
   16676:	f012 f86b 	bl	28750 <pm_state_exit_post_ops>
}
   1667a:	bd08      	pop	{r3, pc}
   1667c:	2300      	movs	r3, #0
   1667e:	f383 8811 	msr	BASEPRI, r3
   16682:	f3bf 8f6f 	isb	sy
   16686:	e7f8      	b.n	1667a <pm_exit_pos_ops+0xe>
   16688:	00028751 	.word	0x00028751

0001668c <pm_system_resume>:

void pm_system_resume(void)
{
   1668c:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
   1668e:	4b0e      	ldr	r3, [pc, #56]	; (166c8 <pm_system_resume+0x3c>)
   16690:	7d1c      	ldrb	r4, [r3, #20]
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   16692:	4621      	mov	r1, r4
   16694:	480d      	ldr	r0, [pc, #52]	; (166cc <pm_system_resume+0x40>)
   16696:	f011 fcdd 	bl	28054 <atomic_test_and_clear_bit>
   1669a:	b900      	cbnz	r0, 1669e <pm_system_resume+0x12>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
			0, 0};
	}
}
   1669c:	bd70      	pop	{r4, r5, r6, pc}
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
   1669e:	0065      	lsls	r5, r4, #1
   166a0:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   166a4:	4e0a      	ldr	r6, [pc, #40]	; (166d0 <pm_system_resume+0x44>)
   166a6:	eb06 0080 	add.w	r0, r6, r0, lsl #2
   166aa:	f7ff ffdf 	bl	1666c <pm_exit_pos_ops>
		pm_state_notify(false);
   166ae:	2000      	movs	r0, #0
   166b0:	f7ff ffae 	bl	16610 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   166b4:	192b      	adds	r3, r5, r4
   166b6:	0099      	lsls	r1, r3, #2
   166b8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   166bc:	2200      	movs	r2, #0
   166be:	5072      	str	r2, [r6, r1]
   166c0:	605a      	str	r2, [r3, #4]
   166c2:	609a      	str	r2, [r3, #8]
}
   166c4:	e7ea      	b.n	1669c <pm_system_resume+0x10>
   166c6:	bf00      	nop
   166c8:	20008f98 	.word	0x20008f98
   166cc:	20007b94 	.word	0x20007b94
   166d0:	20007b80 	.word	0x20007b80

000166d4 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
   166d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   166d6:	4605      	mov	r5, r0
	uint8_t id = CURRENT_CPU;
   166d8:	4b38      	ldr	r3, [pc, #224]	; (167bc <pm_system_suspend+0xe8>)
   166da:	7d1c      	ldrb	r4, [r3, #20]
	__asm__ volatile(
   166dc:	f04f 0340 	mov.w	r3, #64	; 0x40
   166e0:	f3ef 8611 	mrs	r6, BASEPRI
   166e4:	f383 8812 	msr	BASEPRI_MAX, r3
   166e8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
   166ec:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   166f0:	4b33      	ldr	r3, [pc, #204]	; (167c0 <pm_system_suspend+0xec>)
   166f2:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   166f6:	2b00      	cmp	r3, #0
   166f8:	d039      	beq.n	1676e <pm_system_suspend+0x9a>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
   166fa:	4b32      	ldr	r3, [pc, #200]	; (167c4 <pm_system_suspend+0xf0>)
   166fc:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
   16700:	4f2f      	ldr	r7, [pc, #188]	; (167c0 <pm_system_suspend+0xec>)
   16702:	ea4f 0e82 	mov.w	lr, r2, lsl #2
   16706:	eb07 0382 	add.w	r3, r7, r2, lsl #2
   1670a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   1670e:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
   16712:	2300      	movs	r3, #0
   16714:	f807 300e 	strb.w	r3, [r7, lr]
	__asm__ volatile(
   16718:	f386 8811 	msr	BASEPRI, r6
   1671c:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   16720:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   16724:	4a27      	ldr	r2, [pc, #156]	; (167c4 <pm_system_suspend+0xf0>)
   16726:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   1672a:	2b00      	cmp	r3, #0
   1672c:	d044      	beq.n	167b8 <pm_system_suspend+0xe4>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
   1672e:	f1b5 3fff 	cmp.w	r5, #4294967295
   16732:	d12b      	bne.n	1678c <pm_system_suspend+0xb8>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   16734:	f00e ffb6 	bl	256a4 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   16738:	2001      	movs	r0, #1
   1673a:	f7ff ff69 	bl	16610 <pm_state_notify>
	atomic_set_bit(z_post_ops_required, id);
   1673e:	4621      	mov	r1, r4
   16740:	4821      	ldr	r0, [pc, #132]	; (167c8 <pm_system_suspend+0xf4>)
   16742:	f011 fca3 	bl	2808c <atomic_set_bit>
	if (pm_state_set != NULL) {
   16746:	4b21      	ldr	r3, [pc, #132]	; (167cc <pm_system_suspend+0xf8>)
   16748:	b15b      	cbz	r3, 16762 <pm_system_suspend+0x8e>
		pm_state_set(info->state, info->substate_id);
   1674a:	4a1e      	ldr	r2, [pc, #120]	; (167c4 <pm_system_suspend+0xf0>)
   1674c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   16750:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   16754:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   16758:	7859      	ldrb	r1, [r3, #1]
   1675a:	f812 0024 	ldrb.w	r0, [r2, r4, lsl #2]
   1675e:	f011 ffef 	bl	28740 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
   16762:	f7ff ff93 	bl	1668c <pm_system_resume>
	k_sched_unlock();
   16766:	f00f f99f 	bl	25aa8 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
   1676a:	2001      	movs	r0, #1
}
   1676c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		info = pm_policy_next_state(id, ticks);
   1676e:	4601      	mov	r1, r0
   16770:	4620      	mov	r0, r4
   16772:	f000 f831 	bl	167d8 <pm_policy_next_state>
		if (info != NULL) {
   16776:	2800      	cmp	r0, #0
   16778:	d0ce      	beq.n	16718 <pm_system_suspend+0x44>
			z_cpus_pm_state[id] = *info;
   1677a:	eb04 0144 	add.w	r1, r4, r4, lsl #1
   1677e:	4b11      	ldr	r3, [pc, #68]	; (167c4 <pm_system_suspend+0xf0>)
   16780:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   16784:	c807      	ldmia	r0, {r0, r1, r2}
   16786:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   1678a:	e7c5      	b.n	16718 <pm_system_suspend+0x44>
		     k_us_to_ticks_ceil32(
   1678c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   16790:	4b0c      	ldr	r3, [pc, #48]	; (167c4 <pm_system_suspend+0xf0>)
   16792:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   16796:	6898      	ldr	r0, [r3, #8]
			return (uint32_t)((t * to_hz + off) / from_hz);
   16798:	0c41      	lsrs	r1, r0, #17
   1679a:	03c0      	lsls	r0, r0, #15
   1679c:	4b0c      	ldr	r3, [pc, #48]	; (167d0 <pm_system_suspend+0xfc>)
   1679e:	18c0      	adds	r0, r0, r3
   167a0:	4a0c      	ldr	r2, [pc, #48]	; (167d4 <pm_system_suspend+0x100>)
   167a2:	f04f 0300 	mov.w	r3, #0
   167a6:	f141 0100 	adc.w	r1, r1, #0
   167aa:	f7e9 fca9 	bl	100 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
   167ae:	2101      	movs	r1, #1
   167b0:	1a28      	subs	r0, r5, r0
   167b2:	f016 ff45 	bl	2d640 <z_set_timeout_expiry>
   167b6:	e7bd      	b.n	16734 <pm_system_suspend+0x60>
		return false;
   167b8:	2000      	movs	r0, #0
   167ba:	e7d7      	b.n	1676c <pm_system_suspend+0x98>
   167bc:	20008f98 	.word	0x20008f98
   167c0:	20007b74 	.word	0x20007b74
   167c4:	20007b80 	.word	0x20007b80
   167c8:	20007b94 	.word	0x20007b94
   167cc:	00028741 	.word	0x00028741
   167d0:	000f423f 	.word	0x000f423f
   167d4:	000f4240 	.word	0x000f4240

000167d8 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   167d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   167dc:	b082      	sub	sp, #8
   167de:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   167e0:	a901      	add	r1, sp, #4
   167e2:	f000 f845 	bl	16870 <pm_state_cpu_get_all>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   167e6:	1e44      	subs	r4, r0, #1
   167e8:	b224      	sxth	r4, r4
   167ea:	e007      	b.n	167fc <pm_policy_next_state+0x24>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
		    (exit_latency >= max_latency_ticks)) {
			continue;
		}

		if ((ticks == K_TICKS_FOREVER) ||
   167ec:	f1b6 3fff 	cmp.w	r6, #4294967295
   167f0:	d033      	beq.n	1685a <pm_policy_next_state+0x82>
		    (ticks >= (min_residency + exit_latency))) {
   167f2:	4480      	add	r8, r0
		if ((ticks == K_TICKS_FOREVER) ||
   167f4:	45b0      	cmp	r8, r6
   167f6:	d930      	bls.n	1685a <pm_policy_next_state+0x82>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   167f8:	3c01      	subs	r4, #1
   167fa:	b224      	sxth	r4, r4
   167fc:	2c00      	cmp	r4, #0
   167fe:	db2b      	blt.n	16858 <pm_policy_next_state+0x80>
		const struct pm_state_info *state = &cpu_states[i];
   16800:	9b01      	ldr	r3, [sp, #4]
   16802:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   16806:	eb03 0582 	add.w	r5, r3, r2, lsl #2
		if (pm_policy_state_lock_is_active(state->state, state->substate_id)) {
   1680a:	7869      	ldrb	r1, [r5, #1]
   1680c:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
   16810:	f011 fc4f 	bl	280b2 <pm_policy_state_lock_is_active>
   16814:	2800      	cmp	r0, #0
   16816:	d1ef      	bne.n	167f8 <pm_policy_next_state+0x20>
		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
   16818:	6868      	ldr	r0, [r5, #4]
   1681a:	0c41      	lsrs	r1, r0, #17
   1681c:	03c0      	lsls	r0, r0, #15
   1681e:	4f11      	ldr	r7, [pc, #68]	; (16864 <pm_policy_next_state+0x8c>)
   16820:	19c0      	adds	r0, r0, r7
   16822:	4a11      	ldr	r2, [pc, #68]	; (16868 <pm_policy_next_state+0x90>)
   16824:	f04f 0300 	mov.w	r3, #0
   16828:	f141 0100 	adc.w	r1, r1, #0
   1682c:	f7e9 fc68 	bl	100 <__aeabi_uldivmod>
   16830:	4680      	mov	r8, r0
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);
   16832:	68ab      	ldr	r3, [r5, #8]
   16834:	0c59      	lsrs	r1, r3, #17
   16836:	03db      	lsls	r3, r3, #15
   16838:	19d8      	adds	r0, r3, r7
   1683a:	4a0b      	ldr	r2, [pc, #44]	; (16868 <pm_policy_next_state+0x90>)
   1683c:	f04f 0300 	mov.w	r3, #0
   16840:	f141 0100 	adc.w	r1, r1, #0
   16844:	f7e9 fc5c 	bl	100 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   16848:	4b08      	ldr	r3, [pc, #32]	; (1686c <pm_policy_next_state+0x94>)
   1684a:	681b      	ldr	r3, [r3, #0]
   1684c:	f1b3 3fff 	cmp.w	r3, #4294967295
   16850:	d0cc      	beq.n	167ec <pm_policy_next_state+0x14>
   16852:	4283      	cmp	r3, r0
   16854:	d8ca      	bhi.n	167ec <pm_policy_next_state+0x14>
   16856:	e7cf      	b.n	167f8 <pm_policy_next_state+0x20>
			return state;
		}
	}

	return NULL;
   16858:	2500      	movs	r5, #0
}
   1685a:	4628      	mov	r0, r5
   1685c:	b002      	add	sp, #8
   1685e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16862:	bf00      	nop
   16864:	000f423f 	.word	0x000f423f
   16868:	000f4240 	.word	0x000f4240
   1686c:	20000838 	.word	0x20000838

00016870 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   16870:	b908      	cbnz	r0, 16876 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   16872:	4b02      	ldr	r3, [pc, #8]	; (1687c <pm_state_cpu_get_all+0xc>)
   16874:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   16876:	2000      	movs	r0, #0
   16878:	4770      	bx	lr
   1687a:	bf00      	nop
   1687c:	0002efa4 	.word	0x0002efa4

00016880 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
   16880:	b470      	push	{r4, r5, r6}
   16882:	b08d      	sub	sp, #52	; 0x34
   16884:	4606      	mov	r6, r0
   16886:	460d      	mov	r5, r1
	const unsigned int rconst[11] = {
   16888:	f10d 0c04 	add.w	ip, sp, #4
   1688c:	4c2b      	ldr	r4, [pc, #172]	; (1693c <tc_aes128_set_encrypt_key+0xbc>)
   1688e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   16890:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   16894:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   16896:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1689a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   1689e:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
   168a2:	2e00      	cmp	r6, #0
   168a4:	d045      	beq.n	16932 <tc_aes128_set_encrypt_key+0xb2>
   168a6:	4630      	mov	r0, r6
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
   168a8:	2d00      	cmp	r5, #0
   168aa:	d044      	beq.n	16936 <tc_aes128_set_encrypt_key+0xb6>
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
   168ac:	2300      	movs	r3, #0
   168ae:	e00f      	b.n	168d0 <tc_aes128_set_encrypt_key+0x50>
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   168b0:	f815 4023 	ldrb.w	r4, [r5, r3, lsl #2]
   168b4:	eb05 0183 	add.w	r1, r5, r3, lsl #2
   168b8:	784a      	ldrb	r2, [r1, #1]
   168ba:	0412      	lsls	r2, r2, #16
   168bc:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   168c0:	788c      	ldrb	r4, [r1, #2]
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   168c2:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   168c6:	78c9      	ldrb	r1, [r1, #3]
   168c8:	430a      	orrs	r2, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   168ca:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	for (i = 0; i < Nk; ++i) {
   168ce:	3301      	adds	r3, #1
   168d0:	2b03      	cmp	r3, #3
   168d2:	d9ed      	bls.n	168b0 <tc_aes128_set_encrypt_key+0x30>
   168d4:	e006      	b.n	168e4 <tc_aes128_set_encrypt_key+0x64>
	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
		}
		s->words[i] = s->words[i-Nk] ^ t;
   168d6:	1f19      	subs	r1, r3, #4
   168d8:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   168dc:	404a      	eors	r2, r1
   168de:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	for (; i < (Nb * (Nr + 1)); ++i) {
   168e2:	3301      	adds	r3, #1
   168e4:	2b2b      	cmp	r3, #43	; 0x2b
   168e6:	d820      	bhi.n	1692a <tc_aes128_set_encrypt_key+0xaa>
		t = s->words[i-1];
   168e8:	1e5a      	subs	r2, r3, #1
   168ea:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
		if ((i % Nk) == 0) {
   168ee:	f013 0f03 	tst.w	r3, #3
   168f2:	d1f0      	bne.n	168d6 <tc_aes128_set_encrypt_key+0x56>
	return (((a) >> 24)|((a) << 8));
   168f4:	ea4f 6232 	mov.w	r2, r2, ror #24
			t = subword(rotword(t)) ^ rconst[i/Nk];
   168f8:	0e11      	lsrs	r1, r2, #24
   168fa:	4c11      	ldr	r4, [pc, #68]	; (16940 <tc_aes128_set_encrypt_key+0xc0>)
   168fc:	5c65      	ldrb	r5, [r4, r1]
   168fe:	f3c2 4107 	ubfx	r1, r2, #16, #8
   16902:	5c61      	ldrb	r1, [r4, r1]
   16904:	0409      	lsls	r1, r1, #16
   16906:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
   1690a:	f3c2 2507 	ubfx	r5, r2, #8, #8
   1690e:	5d65      	ldrb	r5, [r4, r5]
   16910:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
   16914:	b2d2      	uxtb	r2, r2
   16916:	5ca2      	ldrb	r2, [r4, r2]
   16918:	4311      	orrs	r1, r2
   1691a:	f023 0203 	bic.w	r2, r3, #3
   1691e:	3230      	adds	r2, #48	; 0x30
   16920:	446a      	add	r2, sp
   16922:	f852 2c2c 	ldr.w	r2, [r2, #-44]
   16926:	404a      	eors	r2, r1
   16928:	e7d5      	b.n	168d6 <tc_aes128_set_encrypt_key+0x56>
	}

	return TC_CRYPTO_SUCCESS;
   1692a:	2001      	movs	r0, #1
}
   1692c:	b00d      	add	sp, #52	; 0x34
   1692e:	bc70      	pop	{r4, r5, r6}
   16930:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   16932:	2000      	movs	r0, #0
   16934:	e7fa      	b.n	1692c <tc_aes128_set_encrypt_key+0xac>
		return TC_CRYPTO_FAIL;
   16936:	2000      	movs	r0, #0
   16938:	e7f8      	b.n	1692c <tc_aes128_set_encrypt_key+0xac>
   1693a:	bf00      	nop
   1693c:	0002dfa0 	.word	0x0002dfa0
   16940:	0002efa4 	.word	0x0002efa4

00016944 <tc_aes_encrypt>:
int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   16944:	2800      	cmp	r0, #0
   16946:	d04e      	beq.n	169e6 <tc_aes_encrypt+0xa2>
{
   16948:	b570      	push	{r4, r5, r6, lr}
   1694a:	b084      	sub	sp, #16
   1694c:	4615      	mov	r5, r2
   1694e:	4606      	mov	r6, r0
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   16950:	2900      	cmp	r1, #0
   16952:	d04a      	beq.n	169ea <tc_aes_encrypt+0xa6>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   16954:	2a00      	cmp	r2, #0
   16956:	d04a      	beq.n	169ee <tc_aes_encrypt+0xaa>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   16958:	2310      	movs	r3, #16
   1695a:	460a      	mov	r2, r1
   1695c:	4619      	mov	r1, r3
   1695e:	4668      	mov	r0, sp
   16960:	f011 fba9 	bl	280b6 <_copy>
	add_round_key(state, s->words);
   16964:	4629      	mov	r1, r5
   16966:	4668      	mov	r0, sp
   16968:	f011 fbbf 	bl	280ea <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   1696c:	2400      	movs	r4, #0
   1696e:	e014      	b.n	1699a <tc_aes_encrypt+0x56>
		s[i] = sbox[s[i]];
   16970:	f81d 1003 	ldrb.w	r1, [sp, r3]
   16974:	481f      	ldr	r0, [pc, #124]	; (169f4 <tc_aes_encrypt+0xb0>)
   16976:	5c41      	ldrb	r1, [r0, r1]
   16978:	f80d 1003 	strb.w	r1, [sp, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
   1697c:	3301      	adds	r3, #1
   1697e:	2b0f      	cmp	r3, #15
   16980:	d9f6      	bls.n	16970 <tc_aes_encrypt+0x2c>
		sub_bytes(state);
		shift_rows(state);
   16982:	4668      	mov	r0, sp
   16984:	f011 fbf2 	bl	2816c <shift_rows>
		mix_columns(state);
   16988:	4668      	mov	r0, sp
   1698a:	f011 fc69 	bl	28260 <mix_columns>
		add_round_key(state, s->words + Nb*(i+1));
   1698e:	3401      	adds	r4, #1
   16990:	eb05 1104 	add.w	r1, r5, r4, lsl #4
   16994:	4668      	mov	r0, sp
   16996:	f011 fba8 	bl	280ea <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   1699a:	2c08      	cmp	r4, #8
   1699c:	d801      	bhi.n	169a2 <tc_aes_encrypt+0x5e>
	for (i = 0; i < (Nb * Nk); ++i) {
   1699e:	2300      	movs	r3, #0
   169a0:	e7ed      	b.n	1697e <tc_aes_encrypt+0x3a>
   169a2:	2300      	movs	r3, #0
   169a4:	e006      	b.n	169b4 <tc_aes_encrypt+0x70>
		s[i] = sbox[s[i]];
   169a6:	f81d 2003 	ldrb.w	r2, [sp, r3]
   169aa:	4912      	ldr	r1, [pc, #72]	; (169f4 <tc_aes_encrypt+0xb0>)
   169ac:	5c8a      	ldrb	r2, [r1, r2]
   169ae:	f80d 2003 	strb.w	r2, [sp, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
   169b2:	3301      	adds	r3, #1
   169b4:	2b0f      	cmp	r3, #15
   169b6:	d9f6      	bls.n	169a6 <tc_aes_encrypt+0x62>
	}

	sub_bytes(state);
	shift_rows(state);
   169b8:	4668      	mov	r0, sp
   169ba:	f011 fbd7 	bl	2816c <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   169be:	1c61      	adds	r1, r4, #1
   169c0:	eb05 1101 	add.w	r1, r5, r1, lsl #4
   169c4:	4668      	mov	r0, sp
   169c6:	f011 fb90 	bl	280ea <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   169ca:	2310      	movs	r3, #16
   169cc:	466a      	mov	r2, sp
   169ce:	4619      	mov	r1, r3
   169d0:	4630      	mov	r0, r6
   169d2:	f011 fb70 	bl	280b6 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   169d6:	2210      	movs	r2, #16
   169d8:	2100      	movs	r1, #0
   169da:	4668      	mov	r0, sp
   169dc:	f011 fb78 	bl	280d0 <_set>

	return TC_CRYPTO_SUCCESS;
   169e0:	2001      	movs	r0, #1
}
   169e2:	b004      	add	sp, #16
   169e4:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   169e6:	2000      	movs	r0, #0
}
   169e8:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   169ea:	2000      	movs	r0, #0
   169ec:	e7f9      	b.n	169e2 <tc_aes_encrypt+0x9e>
		return TC_CRYPTO_FAIL;
   169ee:	2000      	movs	r0, #0
   169f0:	e7f7      	b.n	169e2 <tc_aes_encrypt+0x9e>
   169f2:	bf00      	nop
   169f4:	0002efa4 	.word	0x0002efa4

000169f8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   169f8:	4901      	ldr	r1, [pc, #4]	; (16a00 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   169fa:	2210      	movs	r2, #16
	str	r2, [r1]
   169fc:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   169fe:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   16a00:	e000ed10 	.word	0xe000ed10

00016a04 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   16a04:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   16a06:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   16a08:	f380 8811 	msr	BASEPRI, r0
	isb
   16a0c:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
   16a10:	f3bf 8f4f 	dsb	sy
   16a14:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   16a16:	b662      	cpsie	i
	isb
   16a18:	f3bf 8f6f 	isb	sy

	bx	lr
   16a1c:	4770      	bx	lr
   16a1e:	bf00      	nop

00016a20 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   16a20:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   16a22:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   16a24:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
   16a28:	f3bf 8f4f 	dsb	sy
   16a2c:	bf20      	wfe

	msr	BASEPRI, r0
   16a2e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   16a32:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   16a34:	4770      	bx	lr
   16a36:	bf00      	nop

00016a38 <esf_dump>:
#include <kernel_arch_data.h>
#include <zephyr/logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
   16a38:	b5f0      	push	{r4, r5, r6, r7, lr}
   16a3a:	b083      	sub	sp, #12
   16a3c:	4604      	mov	r4, r0
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   16a3e:	6807      	ldr	r7, [r0, #0]
   16a40:	6846      	ldr	r6, [r0, #4]
   16a42:	6885      	ldr	r5, [r0, #8]
   16a44:	200a      	movs	r0, #10
   16a46:	f7ff f9bf 	bl	15dc8 <z_log_msg_alloc>
   16a4a:	2200      	movs	r2, #0
   16a4c:	f36f 0200 	bfc	r2, #0, #1
   16a50:	f36f 0241 	bfc	r2, #1, #1
   16a54:	f36f 0282 	bfc	r2, #2, #1
   16a58:	f36f 02c5 	bfc	r2, #3, #3
   16a5c:	2301      	movs	r3, #1
   16a5e:	f363 1288 	bfi	r2, r3, #6, #3
   16a62:	2314      	movs	r3, #20
   16a64:	f363 2252 	bfi	r2, r3, #9, #10
   16a68:	f36f 42de 	bfc	r2, #19, #12
   16a6c:	f36f 72df 	bfc	r2, #31, #1
   16a70:	4684      	mov	ip, r0
   16a72:	b1a8      	cbz	r0, 16aa0 <esf_dump+0x68>
   16a74:	f110 0310 	adds.w	r3, r0, #16
   16a78:	d004      	beq.n	16a84 <esf_dump+0x4c>
   16a7a:	4959      	ldr	r1, [pc, #356]	; (16be0 <esf_dump+0x1a8>)
   16a7c:	6141      	str	r1, [r0, #20]
   16a7e:	6187      	str	r7, [r0, #24]
   16a80:	61c6      	str	r6, [r0, #28]
   16a82:	6205      	str	r5, [r0, #32]
   16a84:	b163      	cbz	r3, 16aa0 <esf_dump+0x68>
   16a86:	2305      	movs	r3, #5
   16a88:	f88d 3004 	strb.w	r3, [sp, #4]
   16a8c:	2300      	movs	r3, #0
   16a8e:	f88d 3005 	strb.w	r3, [sp, #5]
   16a92:	f88d 3006 	strb.w	r3, [sp, #6]
   16a96:	f88d 3007 	strb.w	r3, [sp, #7]
   16a9a:	9801      	ldr	r0, [sp, #4]
   16a9c:	f8cc 0010 	str.w	r0, [ip, #16]
   16aa0:	2300      	movs	r3, #0
   16aa2:	4950      	ldr	r1, [pc, #320]	; (16be4 <esf_dump+0x1ac>)
   16aa4:	4660      	mov	r0, ip
   16aa6:	f011 f99a 	bl	27dde <z_log_msg_finalize>
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   16aaa:	68e7      	ldr	r7, [r4, #12]
   16aac:	6926      	ldr	r6, [r4, #16]
   16aae:	6965      	ldr	r5, [r4, #20]
   16ab0:	200a      	movs	r0, #10
   16ab2:	f7ff f989 	bl	15dc8 <z_log_msg_alloc>
   16ab6:	2200      	movs	r2, #0
   16ab8:	f36f 0200 	bfc	r2, #0, #1
   16abc:	f36f 0241 	bfc	r2, #1, #1
   16ac0:	f36f 0282 	bfc	r2, #2, #1
   16ac4:	f36f 02c5 	bfc	r2, #3, #3
   16ac8:	2301      	movs	r3, #1
   16aca:	f363 1288 	bfi	r2, r3, #6, #3
   16ace:	2314      	movs	r3, #20
   16ad0:	f363 2252 	bfi	r2, r3, #9, #10
   16ad4:	f36f 42de 	bfc	r2, #19, #12
   16ad8:	f36f 72df 	bfc	r2, #31, #1
   16adc:	4684      	mov	ip, r0
   16ade:	b1a8      	cbz	r0, 16b0c <esf_dump+0xd4>
   16ae0:	f110 0310 	adds.w	r3, r0, #16
   16ae4:	d004      	beq.n	16af0 <esf_dump+0xb8>
   16ae6:	4940      	ldr	r1, [pc, #256]	; (16be8 <esf_dump+0x1b0>)
   16ae8:	6141      	str	r1, [r0, #20]
   16aea:	6187      	str	r7, [r0, #24]
   16aec:	61c6      	str	r6, [r0, #28]
   16aee:	6205      	str	r5, [r0, #32]
   16af0:	b163      	cbz	r3, 16b0c <esf_dump+0xd4>
   16af2:	2305      	movs	r3, #5
   16af4:	f88d 3004 	strb.w	r3, [sp, #4]
   16af8:	2300      	movs	r3, #0
   16afa:	f88d 3005 	strb.w	r3, [sp, #5]
   16afe:	f88d 3006 	strb.w	r3, [sp, #6]
   16b02:	f88d 3007 	strb.w	r3, [sp, #7]
   16b06:	9801      	ldr	r0, [sp, #4]
   16b08:	f8cc 0010 	str.w	r0, [ip, #16]
   16b0c:	2300      	movs	r3, #0
   16b0e:	4935      	ldr	r1, [pc, #212]	; (16be4 <esf_dump+0x1ac>)
   16b10:	4660      	mov	r0, ip
   16b12:	f011 f964 	bl	27dde <z_log_msg_finalize>
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   16b16:	69e5      	ldr	r5, [r4, #28]
   16b18:	2008      	movs	r0, #8
   16b1a:	f7ff f955 	bl	15dc8 <z_log_msg_alloc>
   16b1e:	2200      	movs	r2, #0
   16b20:	f36f 0200 	bfc	r2, #0, #1
   16b24:	f36f 0241 	bfc	r2, #1, #1
   16b28:	f36f 0282 	bfc	r2, #2, #1
   16b2c:	f36f 02c5 	bfc	r2, #3, #3
   16b30:	2301      	movs	r3, #1
   16b32:	f363 1288 	bfi	r2, r3, #6, #3
   16b36:	230c      	movs	r3, #12
   16b38:	f363 2252 	bfi	r2, r3, #9, #10
   16b3c:	f36f 42de 	bfc	r2, #19, #12
   16b40:	f36f 72df 	bfc	r2, #31, #1
   16b44:	4684      	mov	ip, r0
   16b46:	b198      	cbz	r0, 16b70 <esf_dump+0x138>
   16b48:	f110 0310 	adds.w	r3, r0, #16
   16b4c:	d002      	beq.n	16b54 <esf_dump+0x11c>
   16b4e:	4927      	ldr	r1, [pc, #156]	; (16bec <esf_dump+0x1b4>)
   16b50:	6141      	str	r1, [r0, #20]
   16b52:	6185      	str	r5, [r0, #24]
   16b54:	b163      	cbz	r3, 16b70 <esf_dump+0x138>
   16b56:	2303      	movs	r3, #3
   16b58:	f88d 3004 	strb.w	r3, [sp, #4]
   16b5c:	2300      	movs	r3, #0
   16b5e:	f88d 3005 	strb.w	r3, [sp, #5]
   16b62:	f88d 3006 	strb.w	r3, [sp, #6]
   16b66:	f88d 3007 	strb.w	r3, [sp, #7]
   16b6a:	9801      	ldr	r0, [sp, #4]
   16b6c:	f8cc 0010 	str.w	r0, [ip, #16]
   16b70:	2300      	movs	r3, #0
   16b72:	491c      	ldr	r1, [pc, #112]	; (16be4 <esf_dump+0x1ac>)
   16b74:	4660      	mov	r0, ip
   16b76:	f011 f932 	bl	27dde <z_log_msg_finalize>
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   16b7a:	69a5      	ldr	r5, [r4, #24]
   16b7c:	2008      	movs	r0, #8
   16b7e:	f7ff f923 	bl	15dc8 <z_log_msg_alloc>
   16b82:	2200      	movs	r2, #0
   16b84:	f36f 0200 	bfc	r2, #0, #1
   16b88:	f36f 0241 	bfc	r2, #1, #1
   16b8c:	f36f 0282 	bfc	r2, #2, #1
   16b90:	f36f 02c5 	bfc	r2, #3, #3
   16b94:	2301      	movs	r3, #1
   16b96:	f363 1288 	bfi	r2, r3, #6, #3
   16b9a:	230c      	movs	r3, #12
   16b9c:	f363 2252 	bfi	r2, r3, #9, #10
   16ba0:	f36f 42de 	bfc	r2, #19, #12
   16ba4:	f36f 72df 	bfc	r2, #31, #1
   16ba8:	4604      	mov	r4, r0
   16baa:	b190      	cbz	r0, 16bd2 <esf_dump+0x19a>
   16bac:	f110 0310 	adds.w	r3, r0, #16
   16bb0:	d002      	beq.n	16bb8 <esf_dump+0x180>
   16bb2:	490f      	ldr	r1, [pc, #60]	; (16bf0 <esf_dump+0x1b8>)
   16bb4:	6141      	str	r1, [r0, #20]
   16bb6:	6185      	str	r5, [r0, #24]
   16bb8:	b15b      	cbz	r3, 16bd2 <esf_dump+0x19a>
   16bba:	2303      	movs	r3, #3
   16bbc:	f88d 3004 	strb.w	r3, [sp, #4]
   16bc0:	2300      	movs	r3, #0
   16bc2:	f88d 3005 	strb.w	r3, [sp, #5]
   16bc6:	f88d 3006 	strb.w	r3, [sp, #6]
   16bca:	f88d 3007 	strb.w	r3, [sp, #7]
   16bce:	9801      	ldr	r0, [sp, #4]
   16bd0:	6120      	str	r0, [r4, #16]
   16bd2:	2300      	movs	r3, #0
   16bd4:	4903      	ldr	r1, [pc, #12]	; (16be4 <esf_dump+0x1ac>)
   16bd6:	4620      	mov	r0, r4
   16bd8:	f011 f901 	bl	27dde <z_log_msg_finalize>
		esf->basic.pc);
}
   16bdc:	b003      	add	sp, #12
   16bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16be0:	0002f0a4 	.word	0x0002f0a4
   16be4:	0002df20 	.word	0x0002df20
   16be8:	0002f0d4 	.word	0x0002f0d4
   16bec:	0002f104 	.word	0x0002f104
   16bf0:	0002f114 	.word	0x0002f114

00016bf4 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   16bf4:	2800      	cmp	r0, #0
   16bf6:	db07      	blt.n	16c08 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   16bf8:	f000 021f 	and.w	r2, r0, #31
   16bfc:	0940      	lsrs	r0, r0, #5
   16bfe:	2301      	movs	r3, #1
   16c00:	4093      	lsls	r3, r2
   16c02:	4a02      	ldr	r2, [pc, #8]	; (16c0c <__NVIC_EnableIRQ+0x18>)
   16c04:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
   16c08:	4770      	bx	lr
   16c0a:	bf00      	nop
   16c0c:	e000e100 	.word	0xe000e100

00016c10 <__NVIC_DisableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   16c10:	2800      	cmp	r0, #0
   16c12:	db0c      	blt.n	16c2e <__NVIC_DisableIRQ+0x1e>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   16c14:	f000 021f 	and.w	r2, r0, #31
   16c18:	0940      	lsrs	r0, r0, #5
   16c1a:	2301      	movs	r3, #1
   16c1c:	4093      	lsls	r3, r2
   16c1e:	3020      	adds	r0, #32
   16c20:	4a03      	ldr	r2, [pc, #12]	; (16c30 <__NVIC_DisableIRQ+0x20>)
   16c22:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   16c26:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   16c2a:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
   16c2e:	4770      	bx	lr
   16c30:	e000e100 	.word	0xe000e100

00016c34 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   16c34:	2800      	cmp	r0, #0
   16c36:	db08      	blt.n	16c4a <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   16c38:	0149      	lsls	r1, r1, #5
   16c3a:	b2c9      	uxtb	r1, r1
   16c3c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
   16c40:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
   16c44:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
   16c48:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   16c4a:	f000 000f 	and.w	r0, r0, #15
   16c4e:	0149      	lsls	r1, r1, #5
   16c50:	b2c9      	uxtb	r1, r1
   16c52:	4b01      	ldr	r3, [pc, #4]	; (16c58 <__NVIC_SetPriority+0x24>)
   16c54:	5419      	strb	r1, [r3, r0]
  }
}
   16c56:	4770      	bx	lr
   16c58:	e000ed14 	.word	0xe000ed14

00016c5c <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   16c5c:	0942      	lsrs	r2, r0, #5
   16c5e:	4b05      	ldr	r3, [pc, #20]	; (16c74 <arch_irq_is_enabled+0x18>)
   16c60:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   16c64:	f000 001f 	and.w	r0, r0, #31
   16c68:	2301      	movs	r3, #1
   16c6a:	fa03 f000 	lsl.w	r0, r3, r0
}
   16c6e:	4010      	ands	r0, r2
   16c70:	4770      	bx	lr
   16c72:	bf00      	nop
   16c74:	e000e100 	.word	0xe000e100

00016c78 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   16c78:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   16c7a:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   16c7c:	4b05      	ldr	r3, [pc, #20]	; (16c94 <_arch_isr_direct_pm+0x1c>)
   16c7e:	699b      	ldr	r3, [r3, #24]
   16c80:	b90b      	cbnz	r3, 16c86 <_arch_isr_direct_pm+0xe>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   16c82:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   16c84:	bd08      	pop	{r3, pc}
		_kernel.idle = 0;
   16c86:	4b03      	ldr	r3, [pc, #12]	; (16c94 <_arch_isr_direct_pm+0x1c>)
   16c88:	2200      	movs	r2, #0
   16c8a:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
   16c8c:	f016 f882 	bl	2cd94 <z_pm_save_idle_exit>
   16c90:	e7f7      	b.n	16c82 <_arch_isr_direct_pm+0xa>
   16c92:	bf00      	nop
   16c94:	20008f98 	.word	0x20008f98

00016c98 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   16c98:	bf30      	wfi
    b z_SysNmiOnReset
   16c9a:	f7ff bffd 	b.w	16c98 <z_SysNmiOnReset>
   16c9e:	bf00      	nop

00016ca0 <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   16ca0:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   16ca2:	4b0b      	ldr	r3, [pc, #44]	; (16cd0 <z_arm_prep_c+0x30>)
   16ca4:	4a0b      	ldr	r2, [pc, #44]	; (16cd4 <z_arm_prep_c+0x34>)
   16ca6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   16caa:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   16cac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   16cb0:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   16cb4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   16cb8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   16cbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   16cc0:	f00d ff7a 	bl	24bb8 <z_bss_zero>
	z_data_copy();
   16cc4:	f00f f892 	bl	25dec <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   16cc8:	f001 f8cc 	bl	17e64 <z_arm_interrupt_init>
	z_cstart();
   16ccc:	f00d ffd2 	bl	24c74 <z_cstart>
   16cd0:	e000ed00 	.word	0xe000ed00
   16cd4:	00000000 	.word	0x00000000

00016cd8 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   16cd8:	4a0a      	ldr	r2, [pc, #40]	; (16d04 <arch_swap+0x2c>)
   16cda:	6893      	ldr	r3, [r2, #8]
   16cdc:	f8c3 00ac 	str.w	r0, [r3, #172]	; 0xac
	_current->arch.swap_return_value = _k_neg_eagain;
   16ce0:	4909      	ldr	r1, [pc, #36]	; (16d08 <arch_swap+0x30>)
   16ce2:	6809      	ldr	r1, [r1, #0]
   16ce4:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   16ce8:	4908      	ldr	r1, [pc, #32]	; (16d0c <arch_swap+0x34>)
   16cea:	684b      	ldr	r3, [r1, #4]
   16cec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   16cf0:	604b      	str	r3, [r1, #4]
   16cf2:	2300      	movs	r3, #0
   16cf4:	f383 8811 	msr	BASEPRI, r3
   16cf8:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   16cfc:	6893      	ldr	r3, [r2, #8]
}
   16cfe:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
   16d02:	4770      	bx	lr
   16d04:	20008f98 	.word	0x20008f98
   16d08:	00031178 	.word	0x00031178
   16d0c:	e000ed00 	.word	0xe000ed00

00016d10 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   16d10:	4913      	ldr	r1, [pc, #76]	; (16d60 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
   16d12:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   16d14:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   16d18:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   16d1a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   16d1e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   16d22:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
   16d24:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   16d28:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   16d2c:	4f0d      	ldr	r7, [pc, #52]	; (16d64 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   16d2e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   16d32:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   16d34:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   16d36:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   16d38:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    movs r3, #0
   16d3c:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   16d3e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   16d42:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   16d46:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   16d48:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   16d4a:	f001 f93b 	bl	17fc4 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   16d4e:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   16d52:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   16d56:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   16d5a:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   16d5e:	4770      	bx	lr
    ldr r1, =_kernel
   16d60:	20008f98 	.word	0x20008f98
    ldr v4, =_SCS_ICSR
   16d64:	e000ed04 	.word	0xe000ed04

00016d68 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   16d68:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   16d6c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   16d6e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   16d72:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   16d76:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   16d78:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   16d7c:	2902      	cmp	r1, #2
    beq _oops
   16d7e:	d0ff      	beq.n	16d80 <_oops>

00016d80 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   16d80:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
   16d82:	f011 fba4 	bl	284ce <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
   16d86:	bd01      	pop	{r0, pc}

00016d88 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
   16d88:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   16d8a:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
   16d8e:	490e      	ldr	r1, [pc, #56]	; (16dc8 <arch_new_thread+0x40>)
   16d90:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
   16d94:	f021 0101 	bic.w	r1, r1, #1
   16d98:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
   16d9c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   16da0:	9b01      	ldr	r3, [sp, #4]
   16da2:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   16da6:	9b02      	ldr	r3, [sp, #8]
   16da8:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   16dac:	9b03      	ldr	r3, [sp, #12]
   16dae:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   16db2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   16db6:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe = (struct __basic_sf *)
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
   16dba:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   16dbc:	2300      	movs	r3, #0
   16dbe:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   16dc2:	bc10      	pop	{r4}
   16dc4:	4770      	bx	lr
   16dc6:	bf00      	nop
   16dc8:	00026c39 	.word	0x00026c39

00016dcc <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   16dcc:	4b10      	ldr	r3, [pc, #64]	; (16e10 <z_check_thread_stack_fail+0x44>)
   16dce:	689b      	ldr	r3, [r3, #8]

	if (thread == NULL) {
   16dd0:	b1bb      	cbz	r3, 16e02 <z_check_thread_stack_fail+0x36>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   16dd2:	f110 0f16 	cmn.w	r0, #22
   16dd6:	d00b      	beq.n	16df0 <z_check_thread_stack_fail+0x24>
   16dd8:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
   16ddc:	f1a2 0c40 	sub.w	ip, r2, #64	; 0x40
   16de0:	4584      	cmp	ip, r0
   16de2:	d810      	bhi.n	16e06 <z_check_thread_stack_fail+0x3a>
   16de4:	4282      	cmp	r2, r0
   16de6:	d910      	bls.n	16e0a <z_check_thread_stack_fail+0x3e>
   16de8:	428a      	cmp	r2, r1
   16dea:	d807      	bhi.n	16dfc <z_check_thread_stack_fail+0x30>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
   16dec:	2000      	movs	r0, #0
   16dee:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   16df0:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
   16df4:	428a      	cmp	r2, r1
   16df6:	d801      	bhi.n	16dfc <z_check_thread_stack_fail+0x30>
	return 0;
   16df8:	2000      	movs	r0, #0
}
   16dfa:	4770      	bx	lr
		return thread->stack_info.start;
   16dfc:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
   16e00:	4770      	bx	lr
		return 0;
   16e02:	2000      	movs	r0, #0
   16e04:	4770      	bx	lr
	return 0;
   16e06:	2000      	movs	r0, #0
   16e08:	4770      	bx	lr
   16e0a:	2000      	movs	r0, #0
   16e0c:	4770      	bx	lr
   16e0e:	bf00      	nop
   16e10:	20008f98 	.word	0x20008f98

00016e14 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   16e14:	b508      	push	{r3, lr}
   16e16:	460d      	mov	r5, r1
   16e18:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   16e1a:	4b08      	ldr	r3, [pc, #32]	; (16e3c <arch_switch_to_main_thread+0x28>)
   16e1c:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   16e1e:	f001 f8d1 	bl	17fc4 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   16e22:	4620      	mov	r0, r4
   16e24:	f385 8809 	msr	PSP, r5
   16e28:	2100      	movs	r1, #0
   16e2a:	b663      	cpsie	if
   16e2c:	f381 8811 	msr	BASEPRI, r1
   16e30:	f3bf 8f6f 	isb	sy
   16e34:	2200      	movs	r2, #0
   16e36:	2300      	movs	r3, #0
   16e38:	f00f fefe 	bl	26c38 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   16e3c:	20008f98 	.word	0x20008f98

00016e40 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   16e40:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   16e42:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   16e44:	4a0b      	ldr	r2, [pc, #44]	; (16e74 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   16e46:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   16e48:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   16e4a:	bf1e      	ittt	ne
	movne	r1, #0
   16e4c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   16e4e:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   16e50:	f015 ffa0 	blne	2cd94 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   16e54:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   16e56:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   16e5a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   16e5e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   16e62:	4905      	ldr	r1, [pc, #20]	; (16e78 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   16e64:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   16e66:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   16e68:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   16e6a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   16e6e:	4903      	ldr	r1, [pc, #12]	; (16e7c <_isr_wrapper+0x3c>)
	bx r1
   16e70:	4708      	bx	r1
   16e72:	0000      	.short	0x0000
	ldr r2, =_kernel
   16e74:	20008f98 	.word	0x20008f98
	ldr r1, =_sw_isr_table
   16e78:	0002dc68 	.word	0x0002dc68
	ldr r1, =z_arm_int_exit
   16e7c:	00016e81 	.word	0x00016e81

00016e80 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   16e80:	4b04      	ldr	r3, [pc, #16]	; (16e94 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   16e82:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   16e84:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   16e86:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   16e88:	d003      	beq.n	16e92 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   16e8a:	4903      	ldr	r1, [pc, #12]	; (16e98 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   16e8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   16e90:	600a      	str	r2, [r1, #0]

00016e92 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   16e92:	4770      	bx	lr
	ldr r3, =_kernel
   16e94:	20008f98 	.word	0x20008f98
	ldr r1, =_SCS_ICSR
   16e98:	e000ed04 	.word	0xe000ed04

00016e9c <z_arm_is_synchronous_svc>:
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

static inline bool z_arm_is_synchronous_svc(z_arch_esf_t *esf)
{
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   16e9c:	6981      	ldr	r1, [r0, #24]
	/* Note: ARMv6-M does not support CCR.BFHFNMIGN so this access
	 * could generate a fault if the pc was invalid.
	 */
	uint16_t fault_insn = *(ret_addr - 1);
#else
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   16e9e:	4b0d      	ldr	r3, [pc, #52]	; (16ed4 <z_arm_is_synchronous_svc+0x38>)
   16ea0:	695a      	ldr	r2, [r3, #20]
   16ea2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   16ea6:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   16ea8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   16eac:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();

	uint16_t fault_insn = *(ret_addr - 1);
   16eb0:	f831 1c02 	ldrh.w	r1, [r1, #-2]

	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   16eb4:	695a      	ldr	r2, [r3, #20]
   16eb6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   16eba:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   16ebc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   16ec0:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
#endif /* ARMV6_M_ARMV8_M_BASELINE && !ARMV8_M_BASELINE */

	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   16ec4:	f64d 7302 	movw	r3, #57090	; 0xdf02
   16ec8:	4299      	cmp	r1, r3
   16eca:	d001      	beq.n	16ed0 <z_arm_is_synchronous_svc+0x34>
		((fault_insn & 0x00ff) == _SVC_CALL_RUNTIME_EXCEPT)) {
		return true;
	}
#undef _SVC_OPCODE
	return false;
   16ecc:	2000      	movs	r0, #0
   16ece:	4770      	bx	lr
		return true;
   16ed0:	2001      	movs	r0, #1
}
   16ed2:	4770      	bx	lr
   16ed4:	e000ed00 	.word	0xe000ed00

00016ed8 <get_esf>:
	bool *nested_exc)
{
	bool alternative_state_exc = false;
	z_arch_esf_t *ptr_esf = NULL;

	*nested_exc = false;
   16ed8:	f04f 0c00 	mov.w	ip, #0
   16edc:	f883 c000 	strb.w	ip, [r3]

	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   16ee0:	f002 4c7f 	and.w	ip, r2, #4278190080	; 0xff000000
   16ee4:	f1bc 4f7f 	cmp.w	ip, #4278190080	; 0xff000000
   16ee8:	d142      	bne.n	16f70 <get_esf+0x98>
	}
#else
	/* The processor has a single execution state.
	 * We verify that the Thread mode is using PSP.
	 */
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   16eea:	f002 0c0c 	and.w	ip, r2, #12
   16eee:	f1bc 0f08 	cmp.w	ip, #8
   16ef2:	d004      	beq.n	16efe <get_esf+0x26>
		return NULL;
	}
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	if (!alternative_state_exc) {
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   16ef4:	f012 0f08 	tst.w	r2, #8
   16ef8:	d037      	beq.n	16f6a <get_esf+0x92>
			/* Returning to thread mode */
			ptr_esf =  (z_arch_esf_t *)psp;
   16efa:	4608      	mov	r0, r1
   16efc:	4770      	bx	lr
{
   16efe:	b500      	push	{lr}
   16f00:	b083      	sub	sp, #12
		PR_EXC("SPSEL in thread mode does not indicate PSP");
   16f02:	2006      	movs	r0, #6
   16f04:	f7fe ff60 	bl	15dc8 <z_log_msg_alloc>
   16f08:	2200      	movs	r2, #0
   16f0a:	f36f 0200 	bfc	r2, #0, #1
   16f0e:	f36f 0241 	bfc	r2, #1, #1
   16f12:	f36f 0282 	bfc	r2, #2, #1
   16f16:	f36f 02c5 	bfc	r2, #3, #3
   16f1a:	2301      	movs	r3, #1
   16f1c:	f363 1288 	bfi	r2, r3, #6, #3
   16f20:	2308      	movs	r3, #8
   16f22:	f363 2252 	bfi	r2, r3, #9, #10
   16f26:	f36f 42de 	bfc	r2, #19, #12
   16f2a:	f36f 72df 	bfc	r2, #31, #1
   16f2e:	4684      	mov	ip, r0
   16f30:	b190      	cbz	r0, 16f58 <get_esf+0x80>
   16f32:	f110 0310 	adds.w	r3, r0, #16
   16f36:	d001      	beq.n	16f3c <get_esf+0x64>
   16f38:	490e      	ldr	r1, [pc, #56]	; (16f74 <get_esf+0x9c>)
   16f3a:	6141      	str	r1, [r0, #20]
   16f3c:	b163      	cbz	r3, 16f58 <get_esf+0x80>
   16f3e:	2302      	movs	r3, #2
   16f40:	f88d 3004 	strb.w	r3, [sp, #4]
   16f44:	2300      	movs	r3, #0
   16f46:	f88d 3005 	strb.w	r3, [sp, #5]
   16f4a:	f88d 3006 	strb.w	r3, [sp, #6]
   16f4e:	f88d 3007 	strb.w	r3, [sp, #7]
   16f52:	9801      	ldr	r0, [sp, #4]
   16f54:	f8cc 0010 	str.w	r0, [ip, #16]
   16f58:	2300      	movs	r3, #0
   16f5a:	4907      	ldr	r1, [pc, #28]	; (16f78 <get_esf+0xa0>)
   16f5c:	4660      	mov	r0, ip
   16f5e:	f010 ff3e 	bl	27dde <z_log_msg_finalize>
		return NULL;
   16f62:	2000      	movs	r0, #0
			*nested_exc = true;
		}
	}

	return ptr_esf;
}
   16f64:	b003      	add	sp, #12
   16f66:	f85d fb04 	ldr.w	pc, [sp], #4
			*nested_exc = true;
   16f6a:	2201      	movs	r2, #1
   16f6c:	701a      	strb	r2, [r3, #0]
   16f6e:	4770      	bx	lr
		return NULL;
   16f70:	2000      	movs	r0, #0
}
   16f72:	4770      	bx	lr
   16f74:	0002f144 	.word	0x0002f144
   16f78:	0002df20 	.word	0x0002df20

00016f7c <bus_fault>:
{
   16f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
   16f7e:	b083      	sub	sp, #12
   16f80:	4605      	mov	r5, r0
   16f82:	460e      	mov	r6, r1
   16f84:	4614      	mov	r4, r2
	PR_FAULT_INFO("***** BUS FAULT *****");
   16f86:	2006      	movs	r0, #6
   16f88:	f7fe ff1e 	bl	15dc8 <z_log_msg_alloc>
   16f8c:	2200      	movs	r2, #0
   16f8e:	f36f 0200 	bfc	r2, #0, #1
   16f92:	f36f 0241 	bfc	r2, #1, #1
   16f96:	f36f 0282 	bfc	r2, #2, #1
   16f9a:	f36f 02c5 	bfc	r2, #3, #3
   16f9e:	2301      	movs	r3, #1
   16fa0:	f363 1288 	bfi	r2, r3, #6, #3
   16fa4:	2308      	movs	r3, #8
   16fa6:	f363 2252 	bfi	r2, r3, #9, #10
   16faa:	f36f 42de 	bfc	r2, #19, #12
   16fae:	f36f 72df 	bfc	r2, #31, #1
   16fb2:	4684      	mov	ip, r0
   16fb4:	b190      	cbz	r0, 16fdc <bus_fault+0x60>
   16fb6:	f110 0310 	adds.w	r3, r0, #16
   16fba:	d001      	beq.n	16fc0 <bus_fault+0x44>
   16fbc:	49bb      	ldr	r1, [pc, #748]	; (172ac <bus_fault+0x330>)
   16fbe:	6141      	str	r1, [r0, #20]
   16fc0:	b163      	cbz	r3, 16fdc <bus_fault+0x60>
   16fc2:	2302      	movs	r3, #2
   16fc4:	f88d 3004 	strb.w	r3, [sp, #4]
   16fc8:	2300      	movs	r3, #0
   16fca:	f88d 3005 	strb.w	r3, [sp, #5]
   16fce:	f88d 3006 	strb.w	r3, [sp, #6]
   16fd2:	f88d 3007 	strb.w	r3, [sp, #7]
   16fd6:	9801      	ldr	r0, [sp, #4]
   16fd8:	f8cc 0010 	str.w	r0, [ip, #16]
   16fdc:	2300      	movs	r3, #0
   16fde:	49b4      	ldr	r1, [pc, #720]	; (172b0 <bus_fault+0x334>)
   16fe0:	4660      	mov	r0, ip
   16fe2:	f010 fefc 	bl	27dde <z_log_msg_finalize>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   16fe6:	4bb3      	ldr	r3, [pc, #716]	; (172b4 <bus_fault+0x338>)
   16fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   16fea:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   16fee:	d129      	bne.n	17044 <bus_fault+0xc8>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   16ff0:	4bb0      	ldr	r3, [pc, #704]	; (172b4 <bus_fault+0x338>)
   16ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   16ff4:	f413 6f00 	tst.w	r3, #2048	; 0x800
   16ff8:	d155      	bne.n	170a6 <bus_fault+0x12a>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   16ffa:	4bae      	ldr	r3, [pc, #696]	; (172b4 <bus_fault+0x338>)
   16ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   16ffe:	f413 7f00 	tst.w	r3, #512	; 0x200
   17002:	f040 8081 	bne.w	17108 <bus_fault+0x18c>
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   17006:	4bab      	ldr	r3, [pc, #684]	; (172b4 <bus_fault+0x338>)
   17008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1700a:	f413 6f80 	tst.w	r3, #1024	; 0x400
   1700e:	f040 80ec 	bne.w	171ea <bus_fault+0x26e>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   17012:	4ba8      	ldr	r3, [pc, #672]	; (172b4 <bus_fault+0x338>)
   17014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   17016:	f413 7f80 	tst.w	r3, #256	; 0x100
   1701a:	f040 8116 	bne.w	1724a <bus_fault+0x2ce>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   1701e:	4ba5      	ldr	r3, [pc, #660]	; (172b4 <bus_fault+0x338>)
   17020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   17022:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   17026:	f040 8153 	bne.w	172d0 <bus_fault+0x354>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   1702a:	4aa2      	ldr	r2, [pc, #648]	; (172b4 <bus_fault+0x338>)
   1702c:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1702e:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   17032:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   17034:	2101      	movs	r1, #1
   17036:	4628      	mov	r0, r5
   17038:	f011 fa70 	bl	2851c <memory_fault_recoverable>
   1703c:	7020      	strb	r0, [r4, #0]
}
   1703e:	2000      	movs	r0, #0
   17040:	b003      	add	sp, #12
   17042:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_FAULT_INFO("  Stacking error");
   17044:	2006      	movs	r0, #6
   17046:	f7fe febf 	bl	15dc8 <z_log_msg_alloc>
   1704a:	2200      	movs	r2, #0
   1704c:	f36f 0200 	bfc	r2, #0, #1
   17050:	f36f 0241 	bfc	r2, #1, #1
   17054:	f36f 0282 	bfc	r2, #2, #1
   17058:	f36f 02c5 	bfc	r2, #3, #3
   1705c:	2301      	movs	r3, #1
   1705e:	f363 1288 	bfi	r2, r3, #6, #3
   17062:	2308      	movs	r3, #8
   17064:	f363 2252 	bfi	r2, r3, #9, #10
   17068:	f36f 42de 	bfc	r2, #19, #12
   1706c:	f36f 72df 	bfc	r2, #31, #1
   17070:	4684      	mov	ip, r0
   17072:	b190      	cbz	r0, 1709a <bus_fault+0x11e>
   17074:	f110 0310 	adds.w	r3, r0, #16
   17078:	d001      	beq.n	1707e <bus_fault+0x102>
   1707a:	498f      	ldr	r1, [pc, #572]	; (172b8 <bus_fault+0x33c>)
   1707c:	6141      	str	r1, [r0, #20]
   1707e:	b163      	cbz	r3, 1709a <bus_fault+0x11e>
   17080:	2302      	movs	r3, #2
   17082:	f88d 3004 	strb.w	r3, [sp, #4]
   17086:	2300      	movs	r3, #0
   17088:	f88d 3005 	strb.w	r3, [sp, #5]
   1708c:	f88d 3006 	strb.w	r3, [sp, #6]
   17090:	f88d 3007 	strb.w	r3, [sp, #7]
   17094:	9801      	ldr	r0, [sp, #4]
   17096:	f8cc 0010 	str.w	r0, [ip, #16]
   1709a:	2300      	movs	r3, #0
   1709c:	4984      	ldr	r1, [pc, #528]	; (172b0 <bus_fault+0x334>)
   1709e:	4660      	mov	r0, ip
   170a0:	f010 fe9d 	bl	27dde <z_log_msg_finalize>
   170a4:	e7a4      	b.n	16ff0 <bus_fault+0x74>
		PR_FAULT_INFO("  Unstacking error");
   170a6:	2006      	movs	r0, #6
   170a8:	f7fe fe8e 	bl	15dc8 <z_log_msg_alloc>
   170ac:	2200      	movs	r2, #0
   170ae:	f36f 0200 	bfc	r2, #0, #1
   170b2:	f36f 0241 	bfc	r2, #1, #1
   170b6:	f36f 0282 	bfc	r2, #2, #1
   170ba:	f36f 02c5 	bfc	r2, #3, #3
   170be:	2301      	movs	r3, #1
   170c0:	f363 1288 	bfi	r2, r3, #6, #3
   170c4:	2308      	movs	r3, #8
   170c6:	f363 2252 	bfi	r2, r3, #9, #10
   170ca:	f36f 42de 	bfc	r2, #19, #12
   170ce:	f36f 72df 	bfc	r2, #31, #1
   170d2:	4684      	mov	ip, r0
   170d4:	b190      	cbz	r0, 170fc <bus_fault+0x180>
   170d6:	f110 0310 	adds.w	r3, r0, #16
   170da:	d001      	beq.n	170e0 <bus_fault+0x164>
   170dc:	4977      	ldr	r1, [pc, #476]	; (172bc <bus_fault+0x340>)
   170de:	6141      	str	r1, [r0, #20]
   170e0:	b163      	cbz	r3, 170fc <bus_fault+0x180>
   170e2:	2302      	movs	r3, #2
   170e4:	f88d 3004 	strb.w	r3, [sp, #4]
   170e8:	2300      	movs	r3, #0
   170ea:	f88d 3005 	strb.w	r3, [sp, #5]
   170ee:	f88d 3006 	strb.w	r3, [sp, #6]
   170f2:	f88d 3007 	strb.w	r3, [sp, #7]
   170f6:	9801      	ldr	r0, [sp, #4]
   170f8:	f8cc 0010 	str.w	r0, [ip, #16]
   170fc:	2300      	movs	r3, #0
   170fe:	496c      	ldr	r1, [pc, #432]	; (172b0 <bus_fault+0x334>)
   17100:	4660      	mov	r0, ip
   17102:	f010 fe6c 	bl	27dde <z_log_msg_finalize>
   17106:	e778      	b.n	16ffa <bus_fault+0x7e>
		PR_FAULT_INFO("  Precise data bus error");
   17108:	2006      	movs	r0, #6
   1710a:	f7fe fe5d 	bl	15dc8 <z_log_msg_alloc>
   1710e:	2200      	movs	r2, #0
   17110:	f36f 0200 	bfc	r2, #0, #1
   17114:	f36f 0241 	bfc	r2, #1, #1
   17118:	f36f 0282 	bfc	r2, #2, #1
   1711c:	f36f 02c5 	bfc	r2, #3, #3
   17120:	2301      	movs	r3, #1
   17122:	f363 1288 	bfi	r2, r3, #6, #3
   17126:	2308      	movs	r3, #8
   17128:	f363 2252 	bfi	r2, r3, #9, #10
   1712c:	f36f 42de 	bfc	r2, #19, #12
   17130:	f36f 72df 	bfc	r2, #31, #1
   17134:	4684      	mov	ip, r0
   17136:	b190      	cbz	r0, 1715e <bus_fault+0x1e2>
   17138:	f110 0310 	adds.w	r3, r0, #16
   1713c:	d001      	beq.n	17142 <bus_fault+0x1c6>
   1713e:	4960      	ldr	r1, [pc, #384]	; (172c0 <bus_fault+0x344>)
   17140:	6141      	str	r1, [r0, #20]
   17142:	b163      	cbz	r3, 1715e <bus_fault+0x1e2>
   17144:	2302      	movs	r3, #2
   17146:	f88d 3004 	strb.w	r3, [sp, #4]
   1714a:	2300      	movs	r3, #0
   1714c:	f88d 3005 	strb.w	r3, [sp, #5]
   17150:	f88d 3006 	strb.w	r3, [sp, #6]
   17154:	f88d 3007 	strb.w	r3, [sp, #7]
   17158:	9801      	ldr	r0, [sp, #4]
   1715a:	f8cc 0010 	str.w	r0, [ip, #16]
   1715e:	2300      	movs	r3, #0
   17160:	4953      	ldr	r1, [pc, #332]	; (172b0 <bus_fault+0x334>)
   17162:	4660      	mov	r0, ip
   17164:	f010 fe3b 	bl	27dde <z_log_msg_finalize>
		STORE_xFAR(bfar, SCB->BFAR);
   17168:	4b52      	ldr	r3, [pc, #328]	; (172b4 <bus_fault+0x338>)
   1716a:	6b9f      	ldr	r7, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   1716c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1716e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   17172:	f43f af48 	beq.w	17006 <bus_fault+0x8a>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   17176:	2008      	movs	r0, #8
   17178:	f7fe fe26 	bl	15dc8 <z_log_msg_alloc>
   1717c:	2200      	movs	r2, #0
   1717e:	f36f 0200 	bfc	r2, #0, #1
   17182:	f36f 0241 	bfc	r2, #1, #1
   17186:	f36f 0282 	bfc	r2, #2, #1
   1718a:	f36f 02c5 	bfc	r2, #3, #3
   1718e:	2301      	movs	r3, #1
   17190:	f363 1288 	bfi	r2, r3, #6, #3
   17194:	230c      	movs	r3, #12
   17196:	f363 2252 	bfi	r2, r3, #9, #10
   1719a:	f36f 42de 	bfc	r2, #19, #12
   1719e:	f36f 72df 	bfc	r2, #31, #1
   171a2:	4684      	mov	ip, r0
   171a4:	b198      	cbz	r0, 171ce <bus_fault+0x252>
   171a6:	f110 0310 	adds.w	r3, r0, #16
   171aa:	d002      	beq.n	171b2 <bus_fault+0x236>
   171ac:	4945      	ldr	r1, [pc, #276]	; (172c4 <bus_fault+0x348>)
   171ae:	6141      	str	r1, [r0, #20]
   171b0:	6187      	str	r7, [r0, #24]
   171b2:	b163      	cbz	r3, 171ce <bus_fault+0x252>
   171b4:	2303      	movs	r3, #3
   171b6:	f88d 3004 	strb.w	r3, [sp, #4]
   171ba:	2300      	movs	r3, #0
   171bc:	f88d 3005 	strb.w	r3, [sp, #5]
   171c0:	f88d 3006 	strb.w	r3, [sp, #6]
   171c4:	f88d 3007 	strb.w	r3, [sp, #7]
   171c8:	9801      	ldr	r0, [sp, #4]
   171ca:	f8cc 0010 	str.w	r0, [ip, #16]
   171ce:	2300      	movs	r3, #0
   171d0:	4937      	ldr	r1, [pc, #220]	; (172b0 <bus_fault+0x334>)
   171d2:	4660      	mov	r0, ip
   171d4:	f010 fe03 	bl	27dde <z_log_msg_finalize>
			if (from_hard_fault != 0) {
   171d8:	2e00      	cmp	r6, #0
   171da:	f43f af14 	beq.w	17006 <bus_fault+0x8a>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   171de:	4a35      	ldr	r2, [pc, #212]	; (172b4 <bus_fault+0x338>)
   171e0:	6a93      	ldr	r3, [r2, #40]	; 0x28
   171e2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   171e6:	6293      	str	r3, [r2, #40]	; 0x28
   171e8:	e70d      	b.n	17006 <bus_fault+0x8a>
		PR_FAULT_INFO("  Imprecise data bus error");
   171ea:	2006      	movs	r0, #6
   171ec:	f7fe fdec 	bl	15dc8 <z_log_msg_alloc>
   171f0:	2200      	movs	r2, #0
   171f2:	f36f 0200 	bfc	r2, #0, #1
   171f6:	f36f 0241 	bfc	r2, #1, #1
   171fa:	f36f 0282 	bfc	r2, #2, #1
   171fe:	f36f 02c5 	bfc	r2, #3, #3
   17202:	2301      	movs	r3, #1
   17204:	f363 1288 	bfi	r2, r3, #6, #3
   17208:	2308      	movs	r3, #8
   1720a:	f363 2252 	bfi	r2, r3, #9, #10
   1720e:	f36f 42de 	bfc	r2, #19, #12
   17212:	f36f 72df 	bfc	r2, #31, #1
   17216:	4606      	mov	r6, r0
   17218:	b188      	cbz	r0, 1723e <bus_fault+0x2c2>
   1721a:	f110 0310 	adds.w	r3, r0, #16
   1721e:	d001      	beq.n	17224 <bus_fault+0x2a8>
   17220:	4929      	ldr	r1, [pc, #164]	; (172c8 <bus_fault+0x34c>)
   17222:	6141      	str	r1, [r0, #20]
   17224:	b15b      	cbz	r3, 1723e <bus_fault+0x2c2>
   17226:	2302      	movs	r3, #2
   17228:	f88d 3004 	strb.w	r3, [sp, #4]
   1722c:	2300      	movs	r3, #0
   1722e:	f88d 3005 	strb.w	r3, [sp, #5]
   17232:	f88d 3006 	strb.w	r3, [sp, #6]
   17236:	f88d 3007 	strb.w	r3, [sp, #7]
   1723a:	9801      	ldr	r0, [sp, #4]
   1723c:	6130      	str	r0, [r6, #16]
   1723e:	2300      	movs	r3, #0
   17240:	491b      	ldr	r1, [pc, #108]	; (172b0 <bus_fault+0x334>)
   17242:	4630      	mov	r0, r6
   17244:	f010 fdcb 	bl	27dde <z_log_msg_finalize>
   17248:	e6e3      	b.n	17012 <bus_fault+0x96>
		PR_FAULT_INFO("  Instruction bus error");
   1724a:	2006      	movs	r0, #6
   1724c:	f7fe fdbc 	bl	15dc8 <z_log_msg_alloc>
   17250:	2200      	movs	r2, #0
   17252:	f36f 0200 	bfc	r2, #0, #1
   17256:	f36f 0241 	bfc	r2, #1, #1
   1725a:	f36f 0282 	bfc	r2, #2, #1
   1725e:	f36f 02c5 	bfc	r2, #3, #3
   17262:	2301      	movs	r3, #1
   17264:	f363 1288 	bfi	r2, r3, #6, #3
   17268:	2308      	movs	r3, #8
   1726a:	f363 2252 	bfi	r2, r3, #9, #10
   1726e:	f36f 42de 	bfc	r2, #19, #12
   17272:	f36f 72df 	bfc	r2, #31, #1
   17276:	4606      	mov	r6, r0
   17278:	b188      	cbz	r0, 1729e <bus_fault+0x322>
   1727a:	f110 0310 	adds.w	r3, r0, #16
   1727e:	d001      	beq.n	17284 <bus_fault+0x308>
   17280:	4912      	ldr	r1, [pc, #72]	; (172cc <bus_fault+0x350>)
   17282:	6141      	str	r1, [r0, #20]
   17284:	b15b      	cbz	r3, 1729e <bus_fault+0x322>
   17286:	2302      	movs	r3, #2
   17288:	f88d 3004 	strb.w	r3, [sp, #4]
   1728c:	2300      	movs	r3, #0
   1728e:	f88d 3005 	strb.w	r3, [sp, #5]
   17292:	f88d 3006 	strb.w	r3, [sp, #6]
   17296:	f88d 3007 	strb.w	r3, [sp, #7]
   1729a:	9801      	ldr	r0, [sp, #4]
   1729c:	6130      	str	r0, [r6, #16]
   1729e:	2300      	movs	r3, #0
   172a0:	4903      	ldr	r1, [pc, #12]	; (172b0 <bus_fault+0x334>)
   172a2:	4630      	mov	r0, r6
   172a4:	f010 fd9b 	bl	27dde <z_log_msg_finalize>
   172a8:	e6bf      	b.n	1702a <bus_fault+0xae>
   172aa:	bf00      	nop
   172ac:	0002f170 	.word	0x0002f170
   172b0:	0002df20 	.word	0x0002df20
   172b4:	e000ed00 	.word	0xe000ed00
   172b8:	0002f188 	.word	0x0002f188
   172bc:	0002f19c 	.word	0x0002f19c
   172c0:	0002f1b0 	.word	0x0002f1b0
   172c4:	0002f1cc 	.word	0x0002f1cc
   172c8:	0002f1e4 	.word	0x0002f1e4
   172cc:	0002f200 	.word	0x0002f200
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   172d0:	2006      	movs	r0, #6
   172d2:	f7fe fd79 	bl	15dc8 <z_log_msg_alloc>
   172d6:	2200      	movs	r2, #0
   172d8:	f36f 0200 	bfc	r2, #0, #1
   172dc:	f36f 0241 	bfc	r2, #1, #1
   172e0:	f36f 0282 	bfc	r2, #2, #1
   172e4:	f36f 02c5 	bfc	r2, #3, #3
   172e8:	2301      	movs	r3, #1
   172ea:	f363 1288 	bfi	r2, r3, #6, #3
   172ee:	2308      	movs	r3, #8
   172f0:	f363 2252 	bfi	r2, r3, #9, #10
   172f4:	f36f 42de 	bfc	r2, #19, #12
   172f8:	f36f 72df 	bfc	r2, #31, #1
   172fc:	4606      	mov	r6, r0
   172fe:	b188      	cbz	r0, 17324 <bus_fault+0x3a8>
   17300:	f110 0310 	adds.w	r3, r0, #16
   17304:	d001      	beq.n	1730a <bus_fault+0x38e>
   17306:	490a      	ldr	r1, [pc, #40]	; (17330 <bus_fault+0x3b4>)
   17308:	6141      	str	r1, [r0, #20]
   1730a:	b15b      	cbz	r3, 17324 <bus_fault+0x3a8>
   1730c:	2302      	movs	r3, #2
   1730e:	f88d 3004 	strb.w	r3, [sp, #4]
   17312:	2300      	movs	r3, #0
   17314:	f88d 3005 	strb.w	r3, [sp, #5]
   17318:	f88d 3006 	strb.w	r3, [sp, #6]
   1731c:	f88d 3007 	strb.w	r3, [sp, #7]
   17320:	9801      	ldr	r0, [sp, #4]
   17322:	6130      	str	r0, [r6, #16]
   17324:	2300      	movs	r3, #0
   17326:	4903      	ldr	r1, [pc, #12]	; (17334 <bus_fault+0x3b8>)
   17328:	4630      	mov	r0, r6
   1732a:	f010 fd58 	bl	27dde <z_log_msg_finalize>
   1732e:	e67c      	b.n	1702a <bus_fault+0xae>
   17330:	0002f218 	.word	0x0002f218
   17334:	0002df20 	.word	0x0002df20

00017338 <usage_fault>:
{
   17338:	b500      	push	{lr}
   1733a:	b083      	sub	sp, #12
	PR_FAULT_INFO("***** USAGE FAULT *****");
   1733c:	2006      	movs	r0, #6
   1733e:	f7fe fd43 	bl	15dc8 <z_log_msg_alloc>
   17342:	2200      	movs	r2, #0
   17344:	f36f 0200 	bfc	r2, #0, #1
   17348:	f36f 0241 	bfc	r2, #1, #1
   1734c:	f36f 0282 	bfc	r2, #2, #1
   17350:	f36f 02c5 	bfc	r2, #3, #3
   17354:	2301      	movs	r3, #1
   17356:	f363 1288 	bfi	r2, r3, #6, #3
   1735a:	2308      	movs	r3, #8
   1735c:	f363 2252 	bfi	r2, r3, #9, #10
   17360:	f36f 42de 	bfc	r2, #19, #12
   17364:	f36f 72df 	bfc	r2, #31, #1
   17368:	4684      	mov	ip, r0
   1736a:	b190      	cbz	r0, 17392 <usage_fault+0x5a>
   1736c:	f110 0310 	adds.w	r3, r0, #16
   17370:	d001      	beq.n	17376 <usage_fault+0x3e>
   17372:	49b3      	ldr	r1, [pc, #716]	; (17640 <usage_fault+0x308>)
   17374:	6141      	str	r1, [r0, #20]
   17376:	b163      	cbz	r3, 17392 <usage_fault+0x5a>
   17378:	2302      	movs	r3, #2
   1737a:	f88d 3004 	strb.w	r3, [sp, #4]
   1737e:	2300      	movs	r3, #0
   17380:	f88d 3005 	strb.w	r3, [sp, #5]
   17384:	f88d 3006 	strb.w	r3, [sp, #6]
   17388:	f88d 3007 	strb.w	r3, [sp, #7]
   1738c:	9801      	ldr	r0, [sp, #4]
   1738e:	f8cc 0010 	str.w	r0, [ip, #16]
   17392:	2300      	movs	r3, #0
   17394:	49ab      	ldr	r1, [pc, #684]	; (17644 <usage_fault+0x30c>)
   17396:	4660      	mov	r0, ip
   17398:	f010 fd21 	bl	27dde <z_log_msg_finalize>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   1739c:	4baa      	ldr	r3, [pc, #680]	; (17648 <usage_fault+0x310>)
   1739e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   173a0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
   173a4:	d126      	bne.n	173f4 <usage_fault+0xbc>
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   173a6:	4ba8      	ldr	r3, [pc, #672]	; (17648 <usage_fault+0x310>)
   173a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   173aa:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   173ae:	d152      	bne.n	17456 <usage_fault+0x11e>
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   173b0:	4ba5      	ldr	r3, [pc, #660]	; (17648 <usage_fault+0x310>)
   173b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   173b4:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   173b8:	d17e      	bne.n	174b8 <usage_fault+0x180>
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   173ba:	4ba3      	ldr	r3, [pc, #652]	; (17648 <usage_fault+0x310>)
   173bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   173be:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   173c2:	f040 80aa 	bne.w	1751a <usage_fault+0x1e2>
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   173c6:	4ba0      	ldr	r3, [pc, #640]	; (17648 <usage_fault+0x310>)
   173c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   173ca:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   173ce:	f040 80d5 	bne.w	1757c <usage_fault+0x244>
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   173d2:	4b9d      	ldr	r3, [pc, #628]	; (17648 <usage_fault+0x310>)
   173d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   173d6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   173da:	f040 8100 	bne.w	175de <usage_fault+0x2a6>
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   173de:	4a9a      	ldr	r2, [pc, #616]	; (17648 <usage_fault+0x310>)
   173e0:	6a93      	ldr	r3, [r2, #40]	; 0x28
   173e2:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   173e6:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   173ea:	6293      	str	r3, [r2, #40]	; 0x28
}
   173ec:	2000      	movs	r0, #0
   173ee:	b003      	add	sp, #12
   173f0:	f85d fb04 	ldr.w	pc, [sp], #4
		PR_FAULT_INFO("  Division by zero");
   173f4:	2006      	movs	r0, #6
   173f6:	f7fe fce7 	bl	15dc8 <z_log_msg_alloc>
   173fa:	2200      	movs	r2, #0
   173fc:	f36f 0200 	bfc	r2, #0, #1
   17400:	f36f 0241 	bfc	r2, #1, #1
   17404:	f36f 0282 	bfc	r2, #2, #1
   17408:	f36f 02c5 	bfc	r2, #3, #3
   1740c:	2301      	movs	r3, #1
   1740e:	f363 1288 	bfi	r2, r3, #6, #3
   17412:	2308      	movs	r3, #8
   17414:	f363 2252 	bfi	r2, r3, #9, #10
   17418:	f36f 42de 	bfc	r2, #19, #12
   1741c:	f36f 72df 	bfc	r2, #31, #1
   17420:	4684      	mov	ip, r0
   17422:	b190      	cbz	r0, 1744a <usage_fault+0x112>
   17424:	f110 0310 	adds.w	r3, r0, #16
   17428:	d001      	beq.n	1742e <usage_fault+0xf6>
   1742a:	4988      	ldr	r1, [pc, #544]	; (1764c <usage_fault+0x314>)
   1742c:	6141      	str	r1, [r0, #20]
   1742e:	b163      	cbz	r3, 1744a <usage_fault+0x112>
   17430:	2302      	movs	r3, #2
   17432:	f88d 3004 	strb.w	r3, [sp, #4]
   17436:	2300      	movs	r3, #0
   17438:	f88d 3005 	strb.w	r3, [sp, #5]
   1743c:	f88d 3006 	strb.w	r3, [sp, #6]
   17440:	f88d 3007 	strb.w	r3, [sp, #7]
   17444:	9801      	ldr	r0, [sp, #4]
   17446:	f8cc 0010 	str.w	r0, [ip, #16]
   1744a:	2300      	movs	r3, #0
   1744c:	497d      	ldr	r1, [pc, #500]	; (17644 <usage_fault+0x30c>)
   1744e:	4660      	mov	r0, ip
   17450:	f010 fcc5 	bl	27dde <z_log_msg_finalize>
   17454:	e7a7      	b.n	173a6 <usage_fault+0x6e>
		PR_FAULT_INFO("  Unaligned memory access");
   17456:	2006      	movs	r0, #6
   17458:	f7fe fcb6 	bl	15dc8 <z_log_msg_alloc>
   1745c:	2200      	movs	r2, #0
   1745e:	f36f 0200 	bfc	r2, #0, #1
   17462:	f36f 0241 	bfc	r2, #1, #1
   17466:	f36f 0282 	bfc	r2, #2, #1
   1746a:	f36f 02c5 	bfc	r2, #3, #3
   1746e:	2301      	movs	r3, #1
   17470:	f363 1288 	bfi	r2, r3, #6, #3
   17474:	2308      	movs	r3, #8
   17476:	f363 2252 	bfi	r2, r3, #9, #10
   1747a:	f36f 42de 	bfc	r2, #19, #12
   1747e:	f36f 72df 	bfc	r2, #31, #1
   17482:	4684      	mov	ip, r0
   17484:	b190      	cbz	r0, 174ac <usage_fault+0x174>
   17486:	f110 0310 	adds.w	r3, r0, #16
   1748a:	d001      	beq.n	17490 <usage_fault+0x158>
   1748c:	4970      	ldr	r1, [pc, #448]	; (17650 <usage_fault+0x318>)
   1748e:	6141      	str	r1, [r0, #20]
   17490:	b163      	cbz	r3, 174ac <usage_fault+0x174>
   17492:	2302      	movs	r3, #2
   17494:	f88d 3004 	strb.w	r3, [sp, #4]
   17498:	2300      	movs	r3, #0
   1749a:	f88d 3005 	strb.w	r3, [sp, #5]
   1749e:	f88d 3006 	strb.w	r3, [sp, #6]
   174a2:	f88d 3007 	strb.w	r3, [sp, #7]
   174a6:	9801      	ldr	r0, [sp, #4]
   174a8:	f8cc 0010 	str.w	r0, [ip, #16]
   174ac:	2300      	movs	r3, #0
   174ae:	4965      	ldr	r1, [pc, #404]	; (17644 <usage_fault+0x30c>)
   174b0:	4660      	mov	r0, ip
   174b2:	f010 fc94 	bl	27dde <z_log_msg_finalize>
   174b6:	e77b      	b.n	173b0 <usage_fault+0x78>
		PR_FAULT_INFO("  No coprocessor instructions");
   174b8:	2006      	movs	r0, #6
   174ba:	f7fe fc85 	bl	15dc8 <z_log_msg_alloc>
   174be:	2200      	movs	r2, #0
   174c0:	f36f 0200 	bfc	r2, #0, #1
   174c4:	f36f 0241 	bfc	r2, #1, #1
   174c8:	f36f 0282 	bfc	r2, #2, #1
   174cc:	f36f 02c5 	bfc	r2, #3, #3
   174d0:	2301      	movs	r3, #1
   174d2:	f363 1288 	bfi	r2, r3, #6, #3
   174d6:	2308      	movs	r3, #8
   174d8:	f363 2252 	bfi	r2, r3, #9, #10
   174dc:	f36f 42de 	bfc	r2, #19, #12
   174e0:	f36f 72df 	bfc	r2, #31, #1
   174e4:	4684      	mov	ip, r0
   174e6:	b190      	cbz	r0, 1750e <usage_fault+0x1d6>
   174e8:	f110 0310 	adds.w	r3, r0, #16
   174ec:	d001      	beq.n	174f2 <usage_fault+0x1ba>
   174ee:	4959      	ldr	r1, [pc, #356]	; (17654 <usage_fault+0x31c>)
   174f0:	6141      	str	r1, [r0, #20]
   174f2:	b163      	cbz	r3, 1750e <usage_fault+0x1d6>
   174f4:	2302      	movs	r3, #2
   174f6:	f88d 3004 	strb.w	r3, [sp, #4]
   174fa:	2300      	movs	r3, #0
   174fc:	f88d 3005 	strb.w	r3, [sp, #5]
   17500:	f88d 3006 	strb.w	r3, [sp, #6]
   17504:	f88d 3007 	strb.w	r3, [sp, #7]
   17508:	9801      	ldr	r0, [sp, #4]
   1750a:	f8cc 0010 	str.w	r0, [ip, #16]
   1750e:	2300      	movs	r3, #0
   17510:	494c      	ldr	r1, [pc, #304]	; (17644 <usage_fault+0x30c>)
   17512:	4660      	mov	r0, ip
   17514:	f010 fc63 	bl	27dde <z_log_msg_finalize>
   17518:	e74f      	b.n	173ba <usage_fault+0x82>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   1751a:	2006      	movs	r0, #6
   1751c:	f7fe fc54 	bl	15dc8 <z_log_msg_alloc>
   17520:	2200      	movs	r2, #0
   17522:	f36f 0200 	bfc	r2, #0, #1
   17526:	f36f 0241 	bfc	r2, #1, #1
   1752a:	f36f 0282 	bfc	r2, #2, #1
   1752e:	f36f 02c5 	bfc	r2, #3, #3
   17532:	2301      	movs	r3, #1
   17534:	f363 1288 	bfi	r2, r3, #6, #3
   17538:	2308      	movs	r3, #8
   1753a:	f363 2252 	bfi	r2, r3, #9, #10
   1753e:	f36f 42de 	bfc	r2, #19, #12
   17542:	f36f 72df 	bfc	r2, #31, #1
   17546:	4684      	mov	ip, r0
   17548:	b190      	cbz	r0, 17570 <usage_fault+0x238>
   1754a:	f110 0310 	adds.w	r3, r0, #16
   1754e:	d001      	beq.n	17554 <usage_fault+0x21c>
   17550:	4941      	ldr	r1, [pc, #260]	; (17658 <usage_fault+0x320>)
   17552:	6141      	str	r1, [r0, #20]
   17554:	b163      	cbz	r3, 17570 <usage_fault+0x238>
   17556:	2302      	movs	r3, #2
   17558:	f88d 3004 	strb.w	r3, [sp, #4]
   1755c:	2300      	movs	r3, #0
   1755e:	f88d 3005 	strb.w	r3, [sp, #5]
   17562:	f88d 3006 	strb.w	r3, [sp, #6]
   17566:	f88d 3007 	strb.w	r3, [sp, #7]
   1756a:	9801      	ldr	r0, [sp, #4]
   1756c:	f8cc 0010 	str.w	r0, [ip, #16]
   17570:	2300      	movs	r3, #0
   17572:	4934      	ldr	r1, [pc, #208]	; (17644 <usage_fault+0x30c>)
   17574:	4660      	mov	r0, ip
   17576:	f010 fc32 	bl	27dde <z_log_msg_finalize>
   1757a:	e724      	b.n	173c6 <usage_fault+0x8e>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   1757c:	2006      	movs	r0, #6
   1757e:	f7fe fc23 	bl	15dc8 <z_log_msg_alloc>
   17582:	2200      	movs	r2, #0
   17584:	f36f 0200 	bfc	r2, #0, #1
   17588:	f36f 0241 	bfc	r2, #1, #1
   1758c:	f36f 0282 	bfc	r2, #2, #1
   17590:	f36f 02c5 	bfc	r2, #3, #3
   17594:	2301      	movs	r3, #1
   17596:	f363 1288 	bfi	r2, r3, #6, #3
   1759a:	2308      	movs	r3, #8
   1759c:	f363 2252 	bfi	r2, r3, #9, #10
   175a0:	f36f 42de 	bfc	r2, #19, #12
   175a4:	f36f 72df 	bfc	r2, #31, #1
   175a8:	4684      	mov	ip, r0
   175aa:	b190      	cbz	r0, 175d2 <usage_fault+0x29a>
   175ac:	f110 0310 	adds.w	r3, r0, #16
   175b0:	d001      	beq.n	175b6 <usage_fault+0x27e>
   175b2:	492a      	ldr	r1, [pc, #168]	; (1765c <usage_fault+0x324>)
   175b4:	6141      	str	r1, [r0, #20]
   175b6:	b163      	cbz	r3, 175d2 <usage_fault+0x29a>
   175b8:	2302      	movs	r3, #2
   175ba:	f88d 3004 	strb.w	r3, [sp, #4]
   175be:	2300      	movs	r3, #0
   175c0:	f88d 3005 	strb.w	r3, [sp, #5]
   175c4:	f88d 3006 	strb.w	r3, [sp, #6]
   175c8:	f88d 3007 	strb.w	r3, [sp, #7]
   175cc:	9801      	ldr	r0, [sp, #4]
   175ce:	f8cc 0010 	str.w	r0, [ip, #16]
   175d2:	2300      	movs	r3, #0
   175d4:	491b      	ldr	r1, [pc, #108]	; (17644 <usage_fault+0x30c>)
   175d6:	4660      	mov	r0, ip
   175d8:	f010 fc01 	bl	27dde <z_log_msg_finalize>
   175dc:	e6f9      	b.n	173d2 <usage_fault+0x9a>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   175de:	2006      	movs	r0, #6
   175e0:	f7fe fbf2 	bl	15dc8 <z_log_msg_alloc>
   175e4:	2200      	movs	r2, #0
   175e6:	f36f 0200 	bfc	r2, #0, #1
   175ea:	f36f 0241 	bfc	r2, #1, #1
   175ee:	f36f 0282 	bfc	r2, #2, #1
   175f2:	f36f 02c5 	bfc	r2, #3, #3
   175f6:	2301      	movs	r3, #1
   175f8:	f363 1288 	bfi	r2, r3, #6, #3
   175fc:	2308      	movs	r3, #8
   175fe:	f363 2252 	bfi	r2, r3, #9, #10
   17602:	f36f 42de 	bfc	r2, #19, #12
   17606:	f36f 72df 	bfc	r2, #31, #1
   1760a:	4684      	mov	ip, r0
   1760c:	b190      	cbz	r0, 17634 <usage_fault+0x2fc>
   1760e:	f110 0310 	adds.w	r3, r0, #16
   17612:	d001      	beq.n	17618 <usage_fault+0x2e0>
   17614:	4912      	ldr	r1, [pc, #72]	; (17660 <usage_fault+0x328>)
   17616:	6141      	str	r1, [r0, #20]
   17618:	b163      	cbz	r3, 17634 <usage_fault+0x2fc>
   1761a:	2302      	movs	r3, #2
   1761c:	f88d 3004 	strb.w	r3, [sp, #4]
   17620:	2300      	movs	r3, #0
   17622:	f88d 3005 	strb.w	r3, [sp, #5]
   17626:	f88d 3006 	strb.w	r3, [sp, #6]
   1762a:	f88d 3007 	strb.w	r3, [sp, #7]
   1762e:	9801      	ldr	r0, [sp, #4]
   17630:	f8cc 0010 	str.w	r0, [ip, #16]
   17634:	2300      	movs	r3, #0
   17636:	4903      	ldr	r1, [pc, #12]	; (17644 <usage_fault+0x30c>)
   17638:	4660      	mov	r0, ip
   1763a:	f010 fbd0 	bl	27dde <z_log_msg_finalize>
   1763e:	e6ce      	b.n	173de <usage_fault+0xa6>
   17640:	0002f248 	.word	0x0002f248
   17644:	0002df20 	.word	0x0002df20
   17648:	e000ed00 	.word	0xe000ed00
   1764c:	0002f260 	.word	0x0002f260
   17650:	0002f274 	.word	0x0002f274
   17654:	0002f290 	.word	0x0002f290
   17658:	0002f2b0 	.word	0x0002f2b0
   1765c:	0002f2d8 	.word	0x0002f2d8
   17660:	0002f2f4 	.word	0x0002f2f4

00017664 <debug_monitor>:
{
   17664:	b510      	push	{r4, lr}
   17666:	b082      	sub	sp, #8
	*recoverable = false;
   17668:	2400      	movs	r4, #0
   1766a:	700c      	strb	r4, [r1, #0]
	PR_FAULT_INFO(
   1766c:	2006      	movs	r0, #6
   1766e:	f7fe fbab 	bl	15dc8 <z_log_msg_alloc>
   17672:	4622      	mov	r2, r4
   17674:	f364 0200 	bfi	r2, r4, #0, #1
   17678:	f364 0241 	bfi	r2, r4, #1, #1
   1767c:	f364 0282 	bfi	r2, r4, #2, #1
   17680:	f364 02c5 	bfi	r2, r4, #3, #3
   17684:	2301      	movs	r3, #1
   17686:	f363 1288 	bfi	r2, r3, #6, #3
   1768a:	2308      	movs	r3, #8
   1768c:	f363 2252 	bfi	r2, r3, #9, #10
   17690:	f364 42de 	bfi	r2, r4, #19, #12
   17694:	f364 72df 	bfi	r2, r4, #31, #1
   17698:	4604      	mov	r4, r0
   1769a:	b188      	cbz	r0, 176c0 <debug_monitor+0x5c>
   1769c:	f110 0310 	adds.w	r3, r0, #16
   176a0:	d001      	beq.n	176a6 <debug_monitor+0x42>
   176a2:	490b      	ldr	r1, [pc, #44]	; (176d0 <debug_monitor+0x6c>)
   176a4:	6141      	str	r1, [r0, #20]
   176a6:	b15b      	cbz	r3, 176c0 <debug_monitor+0x5c>
   176a8:	2302      	movs	r3, #2
   176aa:	f88d 3004 	strb.w	r3, [sp, #4]
   176ae:	2300      	movs	r3, #0
   176b0:	f88d 3005 	strb.w	r3, [sp, #5]
   176b4:	f88d 3006 	strb.w	r3, [sp, #6]
   176b8:	f88d 3007 	strb.w	r3, [sp, #7]
   176bc:	9801      	ldr	r0, [sp, #4]
   176be:	6120      	str	r0, [r4, #16]
   176c0:	2300      	movs	r3, #0
   176c2:	4904      	ldr	r1, [pc, #16]	; (176d4 <debug_monitor+0x70>)
   176c4:	4620      	mov	r0, r4
   176c6:	f010 fb8a 	bl	27dde <z_log_msg_finalize>
}
   176ca:	b002      	add	sp, #8
   176cc:	bd10      	pop	{r4, pc}
   176ce:	bf00      	nop
   176d0:	0002f320 	.word	0x0002f320
   176d4:	0002df20 	.word	0x0002df20

000176d8 <reserved_exception>:
{
   176d8:	b590      	push	{r4, r7, lr}
   176da:	b083      	sub	sp, #12
   176dc:	af00      	add	r7, sp, #0
	PR_FAULT_INFO("***** %s %d) *****",
   176de:	290f      	cmp	r1, #15
   176e0:	dc23      	bgt.n	1772a <reserved_exception+0x52>
   176e2:	4c30      	ldr	r4, [pc, #192]	; (177a4 <reserved_exception+0xcc>)
   176e4:	3910      	subs	r1, #16
   176e6:	2300      	movs	r3, #0
   176e8:	713b      	strb	r3, [r7, #4]
   176ea:	2302      	movs	r3, #2
   176ec:	717b      	strb	r3, [r7, #5]
   176ee:	b08a      	sub	sp, #40	; 0x28
   176f0:	46ec      	mov	ip, sp
   176f2:	f11c 0210 	adds.w	r2, ip, #16
   176f6:	d01a      	beq.n	1772e <reserved_exception+0x56>
   176f8:	2012      	movs	r0, #18
   176fa:	b122      	cbz	r2, 17706 <reserved_exception+0x2e>
   176fc:	2804      	cmp	r0, #4
   176fe:	dd02      	ble.n	17706 <reserved_exception+0x2e>
   17700:	4b29      	ldr	r3, [pc, #164]	; (177a8 <reserved_exception+0xd0>)
   17702:	f8cc 3014 	str.w	r3, [ip, #20]
   17706:	2300      	movs	r3, #0
   17708:	703b      	strb	r3, [r7, #0]
   1770a:	2302      	movs	r3, #2
   1770c:	707b      	strb	r3, [r7, #1]
   1770e:	b1e2      	cbz	r2, 1774a <reserved_exception+0x72>
   17710:	4603      	mov	r3, r0
   17712:	2808      	cmp	r0, #8
   17714:	dd01      	ble.n	1771a <reserved_exception+0x42>
   17716:	f8cc 4018 	str.w	r4, [ip, #24]
   1771a:	2b0c      	cmp	r3, #12
   1771c:	dd01      	ble.n	17722 <reserved_exception+0x4a>
   1771e:	f8cc 101c 	str.w	r1, [ip, #28]
   17722:	f10c 0320 	add.w	r3, ip, #32
   17726:	2100      	movs	r1, #0
   17728:	e00d      	b.n	17746 <reserved_exception+0x6e>
   1772a:	4c20      	ldr	r4, [pc, #128]	; (177ac <reserved_exception+0xd4>)
   1772c:	e7da      	b.n	176e4 <reserved_exception+0xc>
   1772e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   17732:	e7e2      	b.n	176fa <reserved_exception+0x22>
   17734:	f101 0408 	add.w	r4, r1, #8
   17738:	eb04 0e07 	add.w	lr, r4, r7
   1773c:	f81e ec08 	ldrb.w	lr, [lr, #-8]
   17740:	f803 eb01 	strb.w	lr, [r3], #1
   17744:	3101      	adds	r1, #1
   17746:	2901      	cmp	r1, #1
   17748:	d9f4      	bls.n	17734 <reserved_exception+0x5c>
   1774a:	2811      	cmp	r0, #17
   1774c:	dd26      	ble.n	1779c <reserved_exception+0xc4>
   1774e:	2312      	movs	r3, #18
   17750:	b14a      	cbz	r2, 17766 <reserved_exception+0x8e>
   17752:	2104      	movs	r1, #4
   17754:	7139      	strb	r1, [r7, #4]
   17756:	2100      	movs	r1, #0
   17758:	7179      	strb	r1, [r7, #5]
   1775a:	71b9      	strb	r1, [r7, #6]
   1775c:	2101      	movs	r1, #1
   1775e:	71f9      	strb	r1, [r7, #7]
   17760:	6878      	ldr	r0, [r7, #4]
   17762:	f8cc 0010 	str.w	r0, [ip, #16]
   17766:	2100      	movs	r1, #0
   17768:	f36f 0100 	bfc	r1, #0, #1
   1776c:	f36f 0141 	bfc	r1, #1, #1
   17770:	f36f 0182 	bfc	r1, #2, #1
   17774:	f36f 01c5 	bfc	r1, #3, #3
   17778:	2001      	movs	r0, #1
   1777a:	f360 1188 	bfi	r1, r0, #6, #3
   1777e:	f3c3 0309 	ubfx	r3, r3, #0, #10
   17782:	f363 2152 	bfi	r1, r3, #9, #10
   17786:	f36f 41de 	bfc	r1, #19, #12
   1778a:	f36f 71df 	bfc	r1, #31, #1
   1778e:	2300      	movs	r3, #0
   17790:	4807      	ldr	r0, [pc, #28]	; (177b0 <reserved_exception+0xd8>)
   17792:	f010 fb3c 	bl	27e0e <z_impl_z_log_msg_static_create>
}
   17796:	370c      	adds	r7, #12
   17798:	46bd      	mov	sp, r7
   1779a:	bd90      	pop	{r4, r7, pc}
	PR_FAULT_INFO("***** %s %d) *****",
   1779c:	f06f 031b 	mvn.w	r3, #27
   177a0:	e7d6      	b.n	17750 <reserved_exception+0x78>
   177a2:	bf00      	nop
   177a4:	0002f344 	.word	0x0002f344
   177a8:	0002f378 	.word	0x0002f378
   177ac:	0002f35c 	.word	0x0002f35c
   177b0:	0002df20 	.word	0x0002df20

000177b4 <mem_manage_fault>:
{
   177b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   177b8:	b082      	sub	sp, #8
   177ba:	4605      	mov	r5, r0
   177bc:	460f      	mov	r7, r1
   177be:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
   177c0:	2006      	movs	r0, #6
   177c2:	f7fe fb01 	bl	15dc8 <z_log_msg_alloc>
   177c6:	2200      	movs	r2, #0
   177c8:	f36f 0200 	bfc	r2, #0, #1
   177cc:	f36f 0241 	bfc	r2, #1, #1
   177d0:	f36f 0282 	bfc	r2, #2, #1
   177d4:	f36f 02c5 	bfc	r2, #3, #3
   177d8:	2301      	movs	r3, #1
   177da:	f363 1288 	bfi	r2, r3, #6, #3
   177de:	2308      	movs	r3, #8
   177e0:	f363 2252 	bfi	r2, r3, #9, #10
   177e4:	f36f 42de 	bfc	r2, #19, #12
   177e8:	f36f 72df 	bfc	r2, #31, #1
   177ec:	4604      	mov	r4, r0
   177ee:	b188      	cbz	r0, 17814 <mem_manage_fault+0x60>
   177f0:	f110 0310 	adds.w	r3, r0, #16
   177f4:	d001      	beq.n	177fa <mem_manage_fault+0x46>
   177f6:	49ae      	ldr	r1, [pc, #696]	; (17ab0 <mem_manage_fault+0x2fc>)
   177f8:	6141      	str	r1, [r0, #20]
   177fa:	b15b      	cbz	r3, 17814 <mem_manage_fault+0x60>
   177fc:	2302      	movs	r3, #2
   177fe:	f88d 3004 	strb.w	r3, [sp, #4]
   17802:	2300      	movs	r3, #0
   17804:	f88d 3005 	strb.w	r3, [sp, #5]
   17808:	f88d 3006 	strb.w	r3, [sp, #6]
   1780c:	f88d 3007 	strb.w	r3, [sp, #7]
   17810:	9801      	ldr	r0, [sp, #4]
   17812:	6120      	str	r0, [r4, #16]
   17814:	2300      	movs	r3, #0
   17816:	49a7      	ldr	r1, [pc, #668]	; (17ab4 <mem_manage_fault+0x300>)
   17818:	4620      	mov	r0, r4
   1781a:	f010 fae0 	bl	27dde <z_log_msg_finalize>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   1781e:	4ba6      	ldr	r3, [pc, #664]	; (17ab8 <mem_manage_fault+0x304>)
   17820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   17822:	f013 0f10 	tst.w	r3, #16
   17826:	d140      	bne.n	178aa <mem_manage_fault+0xf6>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   17828:	4ba3      	ldr	r3, [pc, #652]	; (17ab8 <mem_manage_fault+0x304>)
   1782a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1782c:	f013 0f08 	tst.w	r3, #8
   17830:	d16b      	bne.n	1790a <mem_manage_fault+0x156>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   17832:	4ba1      	ldr	r3, [pc, #644]	; (17ab8 <mem_manage_fault+0x304>)
   17834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   17836:	f013 0f02 	tst.w	r3, #2
   1783a:	f040 8096 	bne.w	1796a <mem_manage_fault+0x1b6>
	uint32_t mmfar = -EINVAL;
   1783e:	f06f 0815 	mvn.w	r8, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   17842:	4b9d      	ldr	r3, [pc, #628]	; (17ab8 <mem_manage_fault+0x304>)
   17844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   17846:	f013 0f01 	tst.w	r3, #1
   1784a:	f040 8101 	bne.w	17a50 <mem_manage_fault+0x29c>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   1784e:	4b9a      	ldr	r3, [pc, #616]	; (17ab8 <mem_manage_fault+0x304>)
   17850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   17852:	f013 0f20 	tst.w	r3, #32
   17856:	f040 813b 	bne.w	17ad0 <mem_manage_fault+0x31c>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   1785a:	4b97      	ldr	r3, [pc, #604]	; (17ab8 <mem_manage_fault+0x304>)
   1785c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1785e:	f013 0f10 	tst.w	r3, #16
   17862:	d104      	bne.n	1786e <mem_manage_fault+0xba>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   17864:	4b94      	ldr	r3, [pc, #592]	; (17ab8 <mem_manage_fault+0x304>)
   17866:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   17868:	f014 0402 	ands.w	r4, r4, #2
   1786c:	d005      	beq.n	1787a <mem_manage_fault+0xc6>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   1786e:	4b92      	ldr	r3, [pc, #584]	; (17ab8 <mem_manage_fault+0x304>)
   17870:	685c      	ldr	r4, [r3, #4]
   17872:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
   17876:	f040 815b 	bne.w	17b30 <mem_manage_fault+0x37c>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   1787a:	4b8f      	ldr	r3, [pc, #572]	; (17ab8 <mem_manage_fault+0x304>)
   1787c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1787e:	f013 0f20 	tst.w	r3, #32
   17882:	d004      	beq.n	1788e <mem_manage_fault+0xda>
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   17884:	4a8c      	ldr	r2, [pc, #560]	; (17ab8 <mem_manage_fault+0x304>)
   17886:	6a53      	ldr	r3, [r2, #36]	; 0x24
   17888:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   1788c:	6253      	str	r3, [r2, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   1788e:	4a8a      	ldr	r2, [pc, #552]	; (17ab8 <mem_manage_fault+0x304>)
   17890:	6a93      	ldr	r3, [r2, #40]	; 0x28
   17892:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   17896:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   17898:	2101      	movs	r1, #1
   1789a:	4628      	mov	r0, r5
   1789c:	f010 fe3e 	bl	2851c <memory_fault_recoverable>
   178a0:	7030      	strb	r0, [r6, #0]
}
   178a2:	4620      	mov	r0, r4
   178a4:	b002      	add	sp, #8
   178a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		PR_FAULT_INFO("  Stacking error (context area might be"
   178aa:	2006      	movs	r0, #6
   178ac:	f7fe fa8c 	bl	15dc8 <z_log_msg_alloc>
   178b0:	2200      	movs	r2, #0
   178b2:	f36f 0200 	bfc	r2, #0, #1
   178b6:	f36f 0241 	bfc	r2, #1, #1
   178ba:	f36f 0282 	bfc	r2, #2, #1
   178be:	f36f 02c5 	bfc	r2, #3, #3
   178c2:	2301      	movs	r3, #1
   178c4:	f363 1288 	bfi	r2, r3, #6, #3
   178c8:	2308      	movs	r3, #8
   178ca:	f363 2252 	bfi	r2, r3, #9, #10
   178ce:	f36f 42de 	bfc	r2, #19, #12
   178d2:	f36f 72df 	bfc	r2, #31, #1
   178d6:	4604      	mov	r4, r0
   178d8:	b188      	cbz	r0, 178fe <mem_manage_fault+0x14a>
   178da:	f110 0310 	adds.w	r3, r0, #16
   178de:	d001      	beq.n	178e4 <mem_manage_fault+0x130>
   178e0:	4976      	ldr	r1, [pc, #472]	; (17abc <mem_manage_fault+0x308>)
   178e2:	6141      	str	r1, [r0, #20]
   178e4:	b15b      	cbz	r3, 178fe <mem_manage_fault+0x14a>
   178e6:	2302      	movs	r3, #2
   178e8:	f88d 3004 	strb.w	r3, [sp, #4]
   178ec:	2300      	movs	r3, #0
   178ee:	f88d 3005 	strb.w	r3, [sp, #5]
   178f2:	f88d 3006 	strb.w	r3, [sp, #6]
   178f6:	f88d 3007 	strb.w	r3, [sp, #7]
   178fa:	9801      	ldr	r0, [sp, #4]
   178fc:	6120      	str	r0, [r4, #16]
   178fe:	2300      	movs	r3, #0
   17900:	496c      	ldr	r1, [pc, #432]	; (17ab4 <mem_manage_fault+0x300>)
   17902:	4620      	mov	r0, r4
   17904:	f010 fa6b 	bl	27dde <z_log_msg_finalize>
   17908:	e78e      	b.n	17828 <mem_manage_fault+0x74>
		PR_FAULT_INFO("  Unstacking error");
   1790a:	2006      	movs	r0, #6
   1790c:	f7fe fa5c 	bl	15dc8 <z_log_msg_alloc>
   17910:	2200      	movs	r2, #0
   17912:	f36f 0200 	bfc	r2, #0, #1
   17916:	f36f 0241 	bfc	r2, #1, #1
   1791a:	f36f 0282 	bfc	r2, #2, #1
   1791e:	f36f 02c5 	bfc	r2, #3, #3
   17922:	2301      	movs	r3, #1
   17924:	f363 1288 	bfi	r2, r3, #6, #3
   17928:	2308      	movs	r3, #8
   1792a:	f363 2252 	bfi	r2, r3, #9, #10
   1792e:	f36f 42de 	bfc	r2, #19, #12
   17932:	f36f 72df 	bfc	r2, #31, #1
   17936:	4604      	mov	r4, r0
   17938:	b188      	cbz	r0, 1795e <mem_manage_fault+0x1aa>
   1793a:	f110 0310 	adds.w	r3, r0, #16
   1793e:	d001      	beq.n	17944 <mem_manage_fault+0x190>
   17940:	495f      	ldr	r1, [pc, #380]	; (17ac0 <mem_manage_fault+0x30c>)
   17942:	6141      	str	r1, [r0, #20]
   17944:	b15b      	cbz	r3, 1795e <mem_manage_fault+0x1aa>
   17946:	2302      	movs	r3, #2
   17948:	f88d 3004 	strb.w	r3, [sp, #4]
   1794c:	2300      	movs	r3, #0
   1794e:	f88d 3005 	strb.w	r3, [sp, #5]
   17952:	f88d 3006 	strb.w	r3, [sp, #6]
   17956:	f88d 3007 	strb.w	r3, [sp, #7]
   1795a:	9801      	ldr	r0, [sp, #4]
   1795c:	6120      	str	r0, [r4, #16]
   1795e:	2300      	movs	r3, #0
   17960:	4954      	ldr	r1, [pc, #336]	; (17ab4 <mem_manage_fault+0x300>)
   17962:	4620      	mov	r0, r4
   17964:	f010 fa3b 	bl	27dde <z_log_msg_finalize>
   17968:	e763      	b.n	17832 <mem_manage_fault+0x7e>
		PR_FAULT_INFO("  Data Access Violation");
   1796a:	2006      	movs	r0, #6
   1796c:	f7fe fa2c 	bl	15dc8 <z_log_msg_alloc>
   17970:	2200      	movs	r2, #0
   17972:	f36f 0200 	bfc	r2, #0, #1
   17976:	f36f 0241 	bfc	r2, #1, #1
   1797a:	f36f 0282 	bfc	r2, #2, #1
   1797e:	f36f 02c5 	bfc	r2, #3, #3
   17982:	2301      	movs	r3, #1
   17984:	f363 1288 	bfi	r2, r3, #6, #3
   17988:	2308      	movs	r3, #8
   1798a:	f363 2252 	bfi	r2, r3, #9, #10
   1798e:	f36f 42de 	bfc	r2, #19, #12
   17992:	f36f 72df 	bfc	r2, #31, #1
   17996:	4604      	mov	r4, r0
   17998:	b188      	cbz	r0, 179be <mem_manage_fault+0x20a>
   1799a:	f110 0310 	adds.w	r3, r0, #16
   1799e:	d001      	beq.n	179a4 <mem_manage_fault+0x1f0>
   179a0:	4948      	ldr	r1, [pc, #288]	; (17ac4 <mem_manage_fault+0x310>)
   179a2:	6141      	str	r1, [r0, #20]
   179a4:	b15b      	cbz	r3, 179be <mem_manage_fault+0x20a>
   179a6:	2302      	movs	r3, #2
   179a8:	f88d 3004 	strb.w	r3, [sp, #4]
   179ac:	2300      	movs	r3, #0
   179ae:	f88d 3005 	strb.w	r3, [sp, #5]
   179b2:	f88d 3006 	strb.w	r3, [sp, #6]
   179b6:	f88d 3007 	strb.w	r3, [sp, #7]
   179ba:	9801      	ldr	r0, [sp, #4]
   179bc:	6120      	str	r0, [r4, #16]
   179be:	2300      	movs	r3, #0
   179c0:	493c      	ldr	r1, [pc, #240]	; (17ab4 <mem_manage_fault+0x300>)
   179c2:	4620      	mov	r0, r4
   179c4:	f010 fa0b 	bl	27dde <z_log_msg_finalize>
		uint32_t temp = SCB->MMFAR;
   179c8:	4b3b      	ldr	r3, [pc, #236]	; (17ab8 <mem_manage_fault+0x304>)
   179ca:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   179ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   179d0:	f013 0f80 	tst.w	r3, #128	; 0x80
   179d4:	d102      	bne.n	179dc <mem_manage_fault+0x228>
	uint32_t mmfar = -EINVAL;
   179d6:	f06f 0815 	mvn.w	r8, #21
   179da:	e732      	b.n	17842 <mem_manage_fault+0x8e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   179dc:	2008      	movs	r0, #8
   179de:	f7fe f9f3 	bl	15dc8 <z_log_msg_alloc>
   179e2:	2200      	movs	r2, #0
   179e4:	f36f 0200 	bfc	r2, #0, #1
   179e8:	f36f 0241 	bfc	r2, #1, #1
   179ec:	f36f 0282 	bfc	r2, #2, #1
   179f0:	f36f 02c5 	bfc	r2, #3, #3
   179f4:	2301      	movs	r3, #1
   179f6:	f363 1288 	bfi	r2, r3, #6, #3
   179fa:	230c      	movs	r3, #12
   179fc:	f363 2252 	bfi	r2, r3, #9, #10
   17a00:	f36f 42de 	bfc	r2, #19, #12
   17a04:	f36f 72df 	bfc	r2, #31, #1
   17a08:	4604      	mov	r4, r0
   17a0a:	b198      	cbz	r0, 17a34 <mem_manage_fault+0x280>
   17a0c:	f110 0310 	adds.w	r3, r0, #16
   17a10:	d003      	beq.n	17a1a <mem_manage_fault+0x266>
   17a12:	492d      	ldr	r1, [pc, #180]	; (17ac8 <mem_manage_fault+0x314>)
   17a14:	6141      	str	r1, [r0, #20]
   17a16:	f8c0 8018 	str.w	r8, [r0, #24]
   17a1a:	b15b      	cbz	r3, 17a34 <mem_manage_fault+0x280>
   17a1c:	2303      	movs	r3, #3
   17a1e:	f88d 3004 	strb.w	r3, [sp, #4]
   17a22:	2300      	movs	r3, #0
   17a24:	f88d 3005 	strb.w	r3, [sp, #5]
   17a28:	f88d 3006 	strb.w	r3, [sp, #6]
   17a2c:	f88d 3007 	strb.w	r3, [sp, #7]
   17a30:	9801      	ldr	r0, [sp, #4]
   17a32:	6120      	str	r0, [r4, #16]
   17a34:	2300      	movs	r3, #0
   17a36:	491f      	ldr	r1, [pc, #124]	; (17ab4 <mem_manage_fault+0x300>)
   17a38:	4620      	mov	r0, r4
   17a3a:	f010 f9d0 	bl	27dde <z_log_msg_finalize>
			if (from_hard_fault != 0) {
   17a3e:	2f00      	cmp	r7, #0
   17a40:	f43f aeff 	beq.w	17842 <mem_manage_fault+0x8e>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   17a44:	4a1c      	ldr	r2, [pc, #112]	; (17ab8 <mem_manage_fault+0x304>)
   17a46:	6a93      	ldr	r3, [r2, #40]	; 0x28
   17a48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   17a4c:	6293      	str	r3, [r2, #40]	; 0x28
   17a4e:	e6f8      	b.n	17842 <mem_manage_fault+0x8e>
		PR_FAULT_INFO("  Instruction Access Violation");
   17a50:	2006      	movs	r0, #6
   17a52:	f7fe f9b9 	bl	15dc8 <z_log_msg_alloc>
   17a56:	2200      	movs	r2, #0
   17a58:	f36f 0200 	bfc	r2, #0, #1
   17a5c:	f36f 0241 	bfc	r2, #1, #1
   17a60:	f36f 0282 	bfc	r2, #2, #1
   17a64:	f36f 02c5 	bfc	r2, #3, #3
   17a68:	2301      	movs	r3, #1
   17a6a:	f363 1288 	bfi	r2, r3, #6, #3
   17a6e:	2308      	movs	r3, #8
   17a70:	f363 2252 	bfi	r2, r3, #9, #10
   17a74:	f36f 42de 	bfc	r2, #19, #12
   17a78:	f36f 72df 	bfc	r2, #31, #1
   17a7c:	4604      	mov	r4, r0
   17a7e:	b188      	cbz	r0, 17aa4 <mem_manage_fault+0x2f0>
   17a80:	f110 0310 	adds.w	r3, r0, #16
   17a84:	d001      	beq.n	17a8a <mem_manage_fault+0x2d6>
   17a86:	4911      	ldr	r1, [pc, #68]	; (17acc <mem_manage_fault+0x318>)
   17a88:	6141      	str	r1, [r0, #20]
   17a8a:	b15b      	cbz	r3, 17aa4 <mem_manage_fault+0x2f0>
   17a8c:	2302      	movs	r3, #2
   17a8e:	f88d 3004 	strb.w	r3, [sp, #4]
   17a92:	2300      	movs	r3, #0
   17a94:	f88d 3005 	strb.w	r3, [sp, #5]
   17a98:	f88d 3006 	strb.w	r3, [sp, #6]
   17a9c:	f88d 3007 	strb.w	r3, [sp, #7]
   17aa0:	9801      	ldr	r0, [sp, #4]
   17aa2:	6120      	str	r0, [r4, #16]
   17aa4:	2300      	movs	r3, #0
   17aa6:	4903      	ldr	r1, [pc, #12]	; (17ab4 <mem_manage_fault+0x300>)
   17aa8:	4620      	mov	r0, r4
   17aaa:	f010 f998 	bl	27dde <z_log_msg_finalize>
   17aae:	e6ce      	b.n	1784e <mem_manage_fault+0x9a>
   17ab0:	0002f38c 	.word	0x0002f38c
   17ab4:	0002df20 	.word	0x0002df20
   17ab8:	e000ed00 	.word	0xe000ed00
   17abc:	0002f3a4 	.word	0x0002f3a4
   17ac0:	0002f19c 	.word	0x0002f19c
   17ac4:	0002f3d8 	.word	0x0002f3d8
   17ac8:	0002f3f0 	.word	0x0002f3f0
   17acc:	0002f408 	.word	0x0002f408
		PR_FAULT_INFO(
   17ad0:	2006      	movs	r0, #6
   17ad2:	f7fe f979 	bl	15dc8 <z_log_msg_alloc>
   17ad6:	2200      	movs	r2, #0
   17ad8:	f36f 0200 	bfc	r2, #0, #1
   17adc:	f36f 0241 	bfc	r2, #1, #1
   17ae0:	f36f 0282 	bfc	r2, #2, #1
   17ae4:	f36f 02c5 	bfc	r2, #3, #3
   17ae8:	2301      	movs	r3, #1
   17aea:	f363 1288 	bfi	r2, r3, #6, #3
   17aee:	2308      	movs	r3, #8
   17af0:	f363 2252 	bfi	r2, r3, #9, #10
   17af4:	f36f 42de 	bfc	r2, #19, #12
   17af8:	f36f 72df 	bfc	r2, #31, #1
   17afc:	4604      	mov	r4, r0
   17afe:	b188      	cbz	r0, 17b24 <mem_manage_fault+0x370>
   17b00:	f110 0310 	adds.w	r3, r0, #16
   17b04:	d001      	beq.n	17b0a <mem_manage_fault+0x356>
   17b06:	4910      	ldr	r1, [pc, #64]	; (17b48 <mem_manage_fault+0x394>)
   17b08:	6141      	str	r1, [r0, #20]
   17b0a:	b15b      	cbz	r3, 17b24 <mem_manage_fault+0x370>
   17b0c:	2302      	movs	r3, #2
   17b0e:	f88d 3004 	strb.w	r3, [sp, #4]
   17b12:	2300      	movs	r3, #0
   17b14:	f88d 3005 	strb.w	r3, [sp, #5]
   17b18:	f88d 3006 	strb.w	r3, [sp, #6]
   17b1c:	f88d 3007 	strb.w	r3, [sp, #7]
   17b20:	9801      	ldr	r0, [sp, #4]
   17b22:	6120      	str	r0, [r4, #16]
   17b24:	2300      	movs	r3, #0
   17b26:	4909      	ldr	r1, [pc, #36]	; (17b4c <mem_manage_fault+0x398>)
   17b28:	4620      	mov	r0, r4
   17b2a:	f010 f958 	bl	27dde <z_log_msg_finalize>
   17b2e:	e694      	b.n	1785a <mem_manage_fault+0xa6>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   17b30:	4629      	mov	r1, r5
   17b32:	4640      	mov	r0, r8
   17b34:	f7ff f94a 	bl	16dcc <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   17b38:	4604      	mov	r4, r0
   17b3a:	2800      	cmp	r0, #0
   17b3c:	f43f ae9d 	beq.w	1787a <mem_manage_fault+0xc6>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   17b40:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   17b44:	2402      	movs	r4, #2
   17b46:	e698      	b.n	1787a <mem_manage_fault+0xc6>
   17b48:	0002f218 	.word	0x0002f218
   17b4c:	0002df20 	.word	0x0002df20

00017b50 <hard_fault>:
{
   17b50:	b570      	push	{r4, r5, r6, lr}
   17b52:	b082      	sub	sp, #8
   17b54:	4606      	mov	r6, r0
   17b56:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** HARD FAULT *****");
   17b58:	2006      	movs	r0, #6
   17b5a:	f7fe f935 	bl	15dc8 <z_log_msg_alloc>
   17b5e:	2200      	movs	r2, #0
   17b60:	f36f 0200 	bfc	r2, #0, #1
   17b64:	f36f 0241 	bfc	r2, #1, #1
   17b68:	f36f 0282 	bfc	r2, #2, #1
   17b6c:	f36f 02c5 	bfc	r2, #3, #3
   17b70:	2301      	movs	r3, #1
   17b72:	f363 1288 	bfi	r2, r3, #6, #3
   17b76:	2308      	movs	r3, #8
   17b78:	f363 2252 	bfi	r2, r3, #9, #10
   17b7c:	f36f 42de 	bfc	r2, #19, #12
   17b80:	f36f 72df 	bfc	r2, #31, #1
   17b84:	4604      	mov	r4, r0
   17b86:	b188      	cbz	r0, 17bac <hard_fault+0x5c>
   17b88:	f110 0310 	adds.w	r3, r0, #16
   17b8c:	d001      	beq.n	17b92 <hard_fault+0x42>
   17b8e:	4988      	ldr	r1, [pc, #544]	; (17db0 <hard_fault+0x260>)
   17b90:	6141      	str	r1, [r0, #20]
   17b92:	b15b      	cbz	r3, 17bac <hard_fault+0x5c>
   17b94:	2302      	movs	r3, #2
   17b96:	f88d 3004 	strb.w	r3, [sp, #4]
   17b9a:	2300      	movs	r3, #0
   17b9c:	f88d 3005 	strb.w	r3, [sp, #5]
   17ba0:	f88d 3006 	strb.w	r3, [sp, #6]
   17ba4:	f88d 3007 	strb.w	r3, [sp, #7]
   17ba8:	9801      	ldr	r0, [sp, #4]
   17baa:	6120      	str	r0, [r4, #16]
   17bac:	2300      	movs	r3, #0
   17bae:	4981      	ldr	r1, [pc, #516]	; (17db4 <hard_fault+0x264>)
   17bb0:	4620      	mov	r0, r4
   17bb2:	f010 f914 	bl	27dde <z_log_msg_finalize>
	*recoverable = false;
   17bb6:	2300      	movs	r3, #0
   17bb8:	702b      	strb	r3, [r5, #0]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   17bba:	4b7f      	ldr	r3, [pc, #508]	; (17db8 <hard_fault+0x268>)
   17bbc:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   17bbe:	f014 0402 	ands.w	r4, r4, #2
   17bc2:	d10b      	bne.n	17bdc <hard_fault+0x8c>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   17bc4:	4b7c      	ldr	r3, [pc, #496]	; (17db8 <hard_fault+0x268>)
   17bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   17bc8:	2b00      	cmp	r3, #0
   17bca:	db38      	blt.n	17c3e <hard_fault+0xee>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   17bcc:	4b7a      	ldr	r3, [pc, #488]	; (17db8 <hard_fault+0x268>)
   17bce:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   17bd0:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
   17bd4:	d163      	bne.n	17c9e <hard_fault+0x14e>
}
   17bd6:	4620      	mov	r0, r4
   17bd8:	b002      	add	sp, #8
   17bda:	bd70      	pop	{r4, r5, r6, pc}
		PR_EXC("  Bus fault on vector table read");
   17bdc:	2006      	movs	r0, #6
   17bde:	f7fe f8f3 	bl	15dc8 <z_log_msg_alloc>
   17be2:	2200      	movs	r2, #0
   17be4:	f36f 0200 	bfc	r2, #0, #1
   17be8:	f36f 0241 	bfc	r2, #1, #1
   17bec:	f36f 0282 	bfc	r2, #2, #1
   17bf0:	f36f 02c5 	bfc	r2, #3, #3
   17bf4:	2301      	movs	r3, #1
   17bf6:	f363 1288 	bfi	r2, r3, #6, #3
   17bfa:	2308      	movs	r3, #8
   17bfc:	f363 2252 	bfi	r2, r3, #9, #10
   17c00:	f36f 42de 	bfc	r2, #19, #12
   17c04:	f36f 72df 	bfc	r2, #31, #1
   17c08:	4604      	mov	r4, r0
   17c0a:	b188      	cbz	r0, 17c30 <hard_fault+0xe0>
   17c0c:	f110 0310 	adds.w	r3, r0, #16
   17c10:	d001      	beq.n	17c16 <hard_fault+0xc6>
   17c12:	496a      	ldr	r1, [pc, #424]	; (17dbc <hard_fault+0x26c>)
   17c14:	6141      	str	r1, [r0, #20]
   17c16:	b15b      	cbz	r3, 17c30 <hard_fault+0xe0>
   17c18:	2302      	movs	r3, #2
   17c1a:	f88d 3004 	strb.w	r3, [sp, #4]
   17c1e:	2300      	movs	r3, #0
   17c20:	f88d 3005 	strb.w	r3, [sp, #5]
   17c24:	f88d 3006 	strb.w	r3, [sp, #6]
   17c28:	f88d 3007 	strb.w	r3, [sp, #7]
   17c2c:	9801      	ldr	r0, [sp, #4]
   17c2e:	6120      	str	r0, [r4, #16]
   17c30:	2300      	movs	r3, #0
   17c32:	4960      	ldr	r1, [pc, #384]	; (17db4 <hard_fault+0x264>)
   17c34:	4620      	mov	r0, r4
   17c36:	f010 f8d2 	bl	27dde <z_log_msg_finalize>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   17c3a:	2400      	movs	r4, #0
   17c3c:	e7cb      	b.n	17bd6 <hard_fault+0x86>
		PR_EXC("  Debug event");
   17c3e:	2006      	movs	r0, #6
   17c40:	f7fe f8c2 	bl	15dc8 <z_log_msg_alloc>
   17c44:	2200      	movs	r2, #0
   17c46:	f36f 0200 	bfc	r2, #0, #1
   17c4a:	f36f 0241 	bfc	r2, #1, #1
   17c4e:	f36f 0282 	bfc	r2, #2, #1
   17c52:	f36f 02c5 	bfc	r2, #3, #3
   17c56:	2301      	movs	r3, #1
   17c58:	f363 1288 	bfi	r2, r3, #6, #3
   17c5c:	2308      	movs	r3, #8
   17c5e:	f363 2252 	bfi	r2, r3, #9, #10
   17c62:	f36f 42de 	bfc	r2, #19, #12
   17c66:	f36f 72df 	bfc	r2, #31, #1
   17c6a:	4605      	mov	r5, r0
   17c6c:	b188      	cbz	r0, 17c92 <hard_fault+0x142>
   17c6e:	f110 0310 	adds.w	r3, r0, #16
   17c72:	d001      	beq.n	17c78 <hard_fault+0x128>
   17c74:	4952      	ldr	r1, [pc, #328]	; (17dc0 <hard_fault+0x270>)
   17c76:	6141      	str	r1, [r0, #20]
   17c78:	b15b      	cbz	r3, 17c92 <hard_fault+0x142>
   17c7a:	2302      	movs	r3, #2
   17c7c:	f88d 3004 	strb.w	r3, [sp, #4]
   17c80:	2300      	movs	r3, #0
   17c82:	f88d 3005 	strb.w	r3, [sp, #5]
   17c86:	f88d 3006 	strb.w	r3, [sp, #6]
   17c8a:	f88d 3007 	strb.w	r3, [sp, #7]
   17c8e:	9801      	ldr	r0, [sp, #4]
   17c90:	6128      	str	r0, [r5, #16]
   17c92:	2300      	movs	r3, #0
   17c94:	4947      	ldr	r1, [pc, #284]	; (17db4 <hard_fault+0x264>)
   17c96:	4628      	mov	r0, r5
   17c98:	f010 f8a1 	bl	27dde <z_log_msg_finalize>
   17c9c:	e79b      	b.n	17bd6 <hard_fault+0x86>
		PR_EXC("  Fault escalation (see below)");
   17c9e:	2006      	movs	r0, #6
   17ca0:	f7fe f892 	bl	15dc8 <z_log_msg_alloc>
   17ca4:	2200      	movs	r2, #0
   17ca6:	f36f 0200 	bfc	r2, #0, #1
   17caa:	f36f 0241 	bfc	r2, #1, #1
   17cae:	f36f 0282 	bfc	r2, #2, #1
   17cb2:	f36f 02c5 	bfc	r2, #3, #3
   17cb6:	2301      	movs	r3, #1
   17cb8:	f363 1288 	bfi	r2, r3, #6, #3
   17cbc:	2308      	movs	r3, #8
   17cbe:	f363 2252 	bfi	r2, r3, #9, #10
   17cc2:	f36f 42de 	bfc	r2, #19, #12
   17cc6:	f36f 72df 	bfc	r2, #31, #1
   17cca:	4604      	mov	r4, r0
   17ccc:	b188      	cbz	r0, 17cf2 <hard_fault+0x1a2>
   17cce:	f110 0310 	adds.w	r3, r0, #16
   17cd2:	d001      	beq.n	17cd8 <hard_fault+0x188>
   17cd4:	493b      	ldr	r1, [pc, #236]	; (17dc4 <hard_fault+0x274>)
   17cd6:	6141      	str	r1, [r0, #20]
   17cd8:	b15b      	cbz	r3, 17cf2 <hard_fault+0x1a2>
   17cda:	2302      	movs	r3, #2
   17cdc:	f88d 3004 	strb.w	r3, [sp, #4]
   17ce0:	2300      	movs	r3, #0
   17ce2:	f88d 3005 	strb.w	r3, [sp, #5]
   17ce6:	f88d 3006 	strb.w	r3, [sp, #6]
   17cea:	f88d 3007 	strb.w	r3, [sp, #7]
   17cee:	9801      	ldr	r0, [sp, #4]
   17cf0:	6120      	str	r0, [r4, #16]
   17cf2:	2300      	movs	r3, #0
   17cf4:	492f      	ldr	r1, [pc, #188]	; (17db4 <hard_fault+0x264>)
   17cf6:	4620      	mov	r0, r4
   17cf8:	f010 f871 	bl	27dde <z_log_msg_finalize>
		if (z_arm_is_synchronous_svc(esf)) {
   17cfc:	4630      	mov	r0, r6
   17cfe:	f7ff f8cd 	bl	16e9c <z_arm_is_synchronous_svc>
   17d02:	b9a0      	cbnz	r0, 17d2e <hard_fault+0x1de>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
   17d04:	4b2c      	ldr	r3, [pc, #176]	; (17db8 <hard_fault+0x268>)
   17d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   17d08:	f013 0fff 	tst.w	r3, #255	; 0xff
   17d0c:	d142      	bne.n	17d94 <hard_fault+0x244>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
   17d0e:	4b2a      	ldr	r3, [pc, #168]	; (17db8 <hard_fault+0x268>)
   17d10:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   17d12:	f414 447f 	ands.w	r4, r4, #65280	; 0xff00
   17d16:	d144      	bne.n	17da2 <hard_fault+0x252>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
   17d18:	4b27      	ldr	r3, [pc, #156]	; (17db8 <hard_fault+0x268>)
   17d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   17d1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   17d20:	f4ff af59 	bcc.w	17bd6 <hard_fault+0x86>
			reason = usage_fault(esf);
   17d24:	4630      	mov	r0, r6
   17d26:	f7ff fb07 	bl	17338 <usage_fault>
   17d2a:	4604      	mov	r4, r0
	return reason;
   17d2c:	e753      	b.n	17bd6 <hard_fault+0x86>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   17d2e:	6835      	ldr	r5, [r6, #0]
   17d30:	2008      	movs	r0, #8
   17d32:	f7fe f849 	bl	15dc8 <z_log_msg_alloc>
   17d36:	2200      	movs	r2, #0
   17d38:	f36f 0200 	bfc	r2, #0, #1
   17d3c:	f36f 0241 	bfc	r2, #1, #1
   17d40:	f36f 0282 	bfc	r2, #2, #1
   17d44:	f36f 02c5 	bfc	r2, #3, #3
   17d48:	2301      	movs	r3, #1
   17d4a:	f363 1288 	bfi	r2, r3, #6, #3
   17d4e:	230c      	movs	r3, #12
   17d50:	f363 2252 	bfi	r2, r3, #9, #10
   17d54:	f36f 42de 	bfc	r2, #19, #12
   17d58:	f36f 72df 	bfc	r2, #31, #1
   17d5c:	4604      	mov	r4, r0
   17d5e:	b190      	cbz	r0, 17d86 <hard_fault+0x236>
   17d60:	f110 0310 	adds.w	r3, r0, #16
   17d64:	d002      	beq.n	17d6c <hard_fault+0x21c>
   17d66:	4918      	ldr	r1, [pc, #96]	; (17dc8 <hard_fault+0x278>)
   17d68:	6141      	str	r1, [r0, #20]
   17d6a:	6185      	str	r5, [r0, #24]
   17d6c:	b15b      	cbz	r3, 17d86 <hard_fault+0x236>
   17d6e:	2303      	movs	r3, #3
   17d70:	f88d 3004 	strb.w	r3, [sp, #4]
   17d74:	2300      	movs	r3, #0
   17d76:	f88d 3005 	strb.w	r3, [sp, #5]
   17d7a:	f88d 3006 	strb.w	r3, [sp, #6]
   17d7e:	f88d 3007 	strb.w	r3, [sp, #7]
   17d82:	9801      	ldr	r0, [sp, #4]
   17d84:	6120      	str	r0, [r4, #16]
   17d86:	2300      	movs	r3, #0
   17d88:	490a      	ldr	r1, [pc, #40]	; (17db4 <hard_fault+0x264>)
   17d8a:	4620      	mov	r0, r4
   17d8c:	f010 f827 	bl	27dde <z_log_msg_finalize>
			reason = esf->basic.r0;
   17d90:	6834      	ldr	r4, [r6, #0]
   17d92:	e720      	b.n	17bd6 <hard_fault+0x86>
			reason = mem_manage_fault(esf, 1, recoverable);
   17d94:	462a      	mov	r2, r5
   17d96:	2101      	movs	r1, #1
   17d98:	4630      	mov	r0, r6
   17d9a:	f7ff fd0b 	bl	177b4 <mem_manage_fault>
   17d9e:	4604      	mov	r4, r0
   17da0:	e719      	b.n	17bd6 <hard_fault+0x86>
			reason = bus_fault(esf, 1, recoverable);
   17da2:	462a      	mov	r2, r5
   17da4:	2101      	movs	r1, #1
   17da6:	4630      	mov	r0, r6
   17da8:	f7ff f8e8 	bl	16f7c <bus_fault>
   17dac:	4604      	mov	r4, r0
   17dae:	e712      	b.n	17bd6 <hard_fault+0x86>
   17db0:	0002f428 	.word	0x0002f428
   17db4:	0002df20 	.word	0x0002df20
   17db8:	e000ed00 	.word	0xe000ed00
   17dbc:	0002f440 	.word	0x0002f440
   17dc0:	0002f464 	.word	0x0002f464
   17dc4:	0002f474 	.word	0x0002f474
   17dc8:	0002f494 	.word	0x0002f494

00017dcc <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   17dcc:	b530      	push	{r4, r5, lr}
   17dce:	b08b      	sub	sp, #44	; 0x2c
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   17dd0:	4b1a      	ldr	r3, [pc, #104]	; (17e3c <z_arm_fault+0x70>)
   17dd2:	685c      	ldr	r4, [r3, #4]
   17dd4:	f3c4 0408 	ubfx	r4, r4, #0, #9
   17dd8:	2300      	movs	r3, #0
   17dda:	f383 8811 	msr	BASEPRI, r3
   17dde:	f3bf 8f6f 	isb	sy
	arch_irq_unlock(0);

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
   17de2:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   17de6:	f7ff f877 	bl	16ed8 <get_esf>
   17dea:	4605      	mov	r5, r0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
   17dec:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   17df0:	4621      	mov	r1, r4
   17df2:	f010 fb95 	bl	28520 <fault_handle>
	if (recoverable) {
   17df6:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   17dfa:	b10b      	cbz	r3, 17e00 <z_arm_fault+0x34>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
   17dfc:	b00b      	add	sp, #44	; 0x2c
   17dfe:	bd30      	pop	{r4, r5, pc}
   17e00:	4604      	mov	r4, r0
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   17e02:	2220      	movs	r2, #32
   17e04:	4629      	mov	r1, r5
   17e06:	a801      	add	r0, sp, #4
   17e08:	f010 fc3b 	bl	28682 <memcpy>
	if (nested_exc) {
   17e0c:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   17e10:	b14b      	cbz	r3, 17e26 <z_arm_fault+0x5a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   17e12:	9b08      	ldr	r3, [sp, #32]
   17e14:	f3c3 0208 	ubfx	r2, r3, #0, #9
   17e18:	b95a      	cbnz	r2, 17e32 <z_arm_fault+0x66>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   17e1a:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   17e1e:	ea6f 2343 	mvn.w	r3, r3, lsl #9
   17e22:	9308      	str	r3, [sp, #32]
   17e24:	e005      	b.n	17e32 <z_arm_fault+0x66>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   17e26:	9b08      	ldr	r3, [sp, #32]
   17e28:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   17e2c:	f023 0301 	bic.w	r3, r3, #1
   17e30:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
   17e32:	a901      	add	r1, sp, #4
   17e34:	4620      	mov	r0, r4
   17e36:	f010 fb3e 	bl	284b6 <z_arm_fatal_error>
   17e3a:	e7df      	b.n	17dfc <z_arm_fault+0x30>
   17e3c:	e000ed00 	.word	0xe000ed00

00017e40 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   17e40:	4a02      	ldr	r2, [pc, #8]	; (17e4c <z_arm_fault_init+0xc>)
   17e42:	6953      	ldr	r3, [r2, #20]
   17e44:	f043 0310 	orr.w	r3, r3, #16
   17e48:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   17e4a:	4770      	bx	lr
   17e4c:	e000ed00 	.word	0xe000ed00

00017e50 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   17e50:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   17e54:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   17e58:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   17e5a:	4672      	mov	r2, lr
	bl z_arm_fault
   17e5c:	f7ff ffb6 	bl	17dcc <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   17e60:	bd01      	pop	{r0, pc}
   17e62:	bf00      	nop

00017e64 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   17e64:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   17e66:	e006      	b.n	17e76 <z_arm_interrupt_init+0x12>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   17e68:	f003 030f 	and.w	r3, r3, #15
   17e6c:	4909      	ldr	r1, [pc, #36]	; (17e94 <z_arm_interrupt_init+0x30>)
   17e6e:	4419      	add	r1, r3
   17e70:	2340      	movs	r3, #64	; 0x40
   17e72:	760b      	strb	r3, [r1, #24]
   17e74:	3201      	adds	r2, #1
   17e76:	2a2f      	cmp	r2, #47	; 0x2f
   17e78:	dc0a      	bgt.n	17e90 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
   17e7a:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   17e7c:	2b00      	cmp	r3, #0
   17e7e:	dbf3      	blt.n	17e68 <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   17e80:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   17e84:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   17e88:	2140      	movs	r1, #64	; 0x40
   17e8a:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
   17e8e:	e7f1      	b.n	17e74 <z_arm_interrupt_init+0x10>
	}
}
   17e90:	4770      	bx	lr
   17e92:	bf00      	nop
   17e94:	e000ecfc 	.word	0xe000ecfc

00017e98 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_DEBUG_THREAD_INFO)
    /* Clear z_sys_post_kernel flag for RTOS aware debuggers */
    movs.n r0, #0
   17e98:	2000      	movs	r0, #0
    ldr r1, =z_sys_post_kernel
   17e9a:	4913      	ldr	r1, [pc, #76]	; (17ee8 <__start+0x50>)
    strb r0, [r1]
   17e9c:	7008      	strb	r0, [r1, #0]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   17e9e:	2000      	movs	r0, #0
    msr CONTROL, r0
   17ea0:	f380 8814 	msr	CONTROL, r0
    isb
   17ea4:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   17ea8:	f7fd fdec 	bl	15a84 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   17eac:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   17eae:	490f      	ldr	r1, [pc, #60]	; (17eec <__start+0x54>)
    str r0, [r1]
   17eb0:	6008      	str	r0, [r1, #0]
    dsb
   17eb2:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   17eb6:	480e      	ldr	r0, [pc, #56]	; (17ef0 <__start+0x58>)
    msr msp, r0
   17eb8:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   17ebc:	f000 f830 	bl	17f20 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   17ec0:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   17ec2:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   17ec6:	480b      	ldr	r0, [pc, #44]	; (17ef4 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   17ec8:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
   17ecc:	1840      	adds	r0, r0, r1
    msr PSP, r0
   17ece:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   17ed2:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   17ed6:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   17ed8:	4308      	orrs	r0, r1
    msr CONTROL, r0
   17eda:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   17ede:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   17ee2:	f7fe fedd 	bl	16ca0 <z_arm_prep_c>
   17ee6:	0000      	.short	0x0000
    ldr r1, =z_sys_post_kernel
   17ee8:	20008fe6 	.word	0x20008fe6
    ldr r1, =_SCS_MPU_CTRL
   17eec:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   17ef0:	2000bb80 	.word	0x2000bb80
    ldr r0, =z_interrupt_stacks
   17ef4:	2000adc0 	.word	0x2000adc0

00017ef8 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   17ef8:	4b08      	ldr	r3, [pc, #32]	; (17f1c <z_arm_clear_arm_mpu_config+0x24>)
   17efa:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
	int num_regions =
   17efe:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
   17f02:	2300      	movs	r3, #0
   17f04:	e006      	b.n	17f14 <z_arm_clear_arm_mpu_config+0x1c>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
   17f06:	4a05      	ldr	r2, [pc, #20]	; (17f1c <z_arm_clear_arm_mpu_config+0x24>)
   17f08:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
   17f0c:	2100      	movs	r1, #0
   17f0e:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
   17f12:	3301      	adds	r3, #1
   17f14:	4283      	cmp	r3, r0
   17f16:	dbf6      	blt.n	17f06 <z_arm_clear_arm_mpu_config+0xe>
		ARM_MPU_ClrRegion(i);
	}
}
   17f18:	4770      	bx	lr
   17f1a:	bf00      	nop
   17f1c:	e000ed00 	.word	0xe000ed00

00017f20 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   17f20:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   17f22:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   17f24:	2400      	movs	r4, #0
   17f26:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   17f2a:	f7ff ffe5 	bl	17ef8 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   17f2e:	4623      	mov	r3, r4
   17f30:	e008      	b.n	17f44 <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
   17f32:	f103 0120 	add.w	r1, r3, #32
   17f36:	4a0e      	ldr	r2, [pc, #56]	; (17f70 <z_arm_init_arch_hw_at_boot+0x50>)
   17f38:	f04f 30ff 	mov.w	r0, #4294967295
   17f3c:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   17f40:	3301      	adds	r3, #1
   17f42:	b2db      	uxtb	r3, r3
   17f44:	2b07      	cmp	r3, #7
   17f46:	d9f4      	bls.n	17f32 <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   17f48:	2300      	movs	r3, #0
   17f4a:	e008      	b.n	17f5e <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
   17f4c:	f103 0160 	add.w	r1, r3, #96	; 0x60
   17f50:	4a07      	ldr	r2, [pc, #28]	; (17f70 <z_arm_init_arch_hw_at_boot+0x50>)
   17f52:	f04f 30ff 	mov.w	r0, #4294967295
   17f56:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   17f5a:	3301      	adds	r3, #1
   17f5c:	b2db      	uxtb	r3, r3
   17f5e:	2b07      	cmp	r3, #7
   17f60:	d9f4      	bls.n	17f4c <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
   17f62:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   17f64:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   17f68:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   17f6c:	bd10      	pop	{r4, pc}
   17f6e:	bf00      	nop
   17f70:	e000e100 	.word	0xe000e100

00017f74 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
   17f74:	b508      	push	{r3, lr}
	if (_current == thread) {
   17f76:	4b0a      	ldr	r3, [pc, #40]	; (17fa0 <z_impl_k_thread_abort+0x2c>)
   17f78:	689b      	ldr	r3, [r3, #8]
   17f7a:	4283      	cmp	r3, r0
   17f7c:	d002      	beq.n	17f84 <z_impl_k_thread_abort+0x10>
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
		}
	}

	z_thread_abort(thread);
   17f7e:	f00d fee9 	bl	25d54 <z_thread_abort>
}
   17f82:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   17f84:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   17f88:	2b00      	cmp	r3, #0
   17f8a:	d0f8      	beq.n	17f7e <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   17f8c:	4b05      	ldr	r3, [pc, #20]	; (17fa4 <z_impl_k_thread_abort+0x30>)
   17f8e:	685a      	ldr	r2, [r3, #4]
   17f90:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   17f94:	605a      	str	r2, [r3, #4]
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   17f96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   17f98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   17f9c:	625a      	str	r2, [r3, #36]	; 0x24
   17f9e:	e7ee      	b.n	17f7e <z_impl_k_thread_abort+0xa>
   17fa0:	20008f98 	.word	0x20008f98
   17fa4:	e000ed00 	.word	0xe000ed00

00017fa8 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   17fa8:	b508      	push	{r3, lr}
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   17faa:	4b03      	ldr	r3, [pc, #12]	; (17fb8 <z_arm_configure_static_mpu_regions+0x10>)
   17fac:	4a03      	ldr	r2, [pc, #12]	; (17fbc <z_arm_configure_static_mpu_regions+0x14>)
   17fae:	2101      	movs	r1, #1
   17fb0:	4803      	ldr	r0, [pc, #12]	; (17fc0 <z_arm_configure_static_mpu_regions+0x18>)
   17fb2:	f010 fb0a 	bl	285ca <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   17fb6:	bd08      	pop	{r3, pc}
   17fb8:	20020000 	.word	0x20020000
   17fbc:	20000000 	.word	0x20000000
   17fc0:	0002f4b0 	.word	0x0002f4b0

00017fc4 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
   17fc4:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   17fc6:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   17fca:	3b40      	subs	r3, #64	; 0x40
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   17fcc:	4804      	ldr	r0, [pc, #16]	; (17fe0 <z_arm_configure_dynamic_mpu_regions+0x1c>)
   17fce:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
   17fd0:	2340      	movs	r3, #64	; 0x40
   17fd2:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   17fd4:	4b03      	ldr	r3, [pc, #12]	; (17fe4 <z_arm_configure_dynamic_mpu_regions+0x20>)
   17fd6:	6083      	str	r3, [r0, #8]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   17fd8:	2101      	movs	r1, #1
   17fda:	f010 fafa 	bl	285d2 <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_enable();
#endif
}
   17fde:	bd08      	pop	{r3, pc}
   17fe0:	20007b98 	.word	0x20007b98
   17fe4:	150b0000 	.word	0x150b0000

00017fe8 <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   17fe8:	4a08      	ldr	r2, [pc, #32]	; (1800c <region_init+0x24>)
   17fea:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   17fee:	680b      	ldr	r3, [r1, #0]
   17ff0:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   17ff4:	4303      	orrs	r3, r0
   17ff6:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   17ffa:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   17ffe:	688b      	ldr	r3, [r1, #8]
   18000:	f043 0301 	orr.w	r3, r3, #1
   18004:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
   18008:	4770      	bx	lr
   1800a:	bf00      	nop
   1800c:	e000ed00 	.word	0xe000ed00

00018010 <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
   18010:	b510      	push	{r4, lr}
   18012:	b082      	sub	sp, #8
   18014:	4604      	mov	r4, r0
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
   18016:	2807      	cmp	r0, #7
   18018:	d804      	bhi.n	18024 <region_allocate_and_init+0x14>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
   1801a:	f7ff ffe5 	bl	17fe8 <region_init>

	return index;
   1801e:	4620      	mov	r0, r4
}
   18020:	b002      	add	sp, #8
   18022:	bd10      	pop	{r4, pc}
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   18024:	2008      	movs	r0, #8
   18026:	f7fd fecf 	bl	15dc8 <z_log_msg_alloc>
   1802a:	2200      	movs	r2, #0
   1802c:	f36f 0200 	bfc	r2, #0, #1
   18030:	f36f 0241 	bfc	r2, #1, #1
   18034:	f36f 0282 	bfc	r2, #2, #1
   18038:	f36f 02c5 	bfc	r2, #3, #3
   1803c:	2301      	movs	r3, #1
   1803e:	f363 1288 	bfi	r2, r3, #6, #3
   18042:	230c      	movs	r3, #12
   18044:	f363 2252 	bfi	r2, r3, #9, #10
   18048:	f36f 42de 	bfc	r2, #19, #12
   1804c:	f36f 72df 	bfc	r2, #31, #1
   18050:	4684      	mov	ip, r0
   18052:	b198      	cbz	r0, 1807c <region_allocate_and_init+0x6c>
   18054:	f110 0310 	adds.w	r3, r0, #16
   18058:	d002      	beq.n	18060 <region_allocate_and_init+0x50>
   1805a:	490c      	ldr	r1, [pc, #48]	; (1808c <region_allocate_and_init+0x7c>)
   1805c:	6141      	str	r1, [r0, #20]
   1805e:	6184      	str	r4, [r0, #24]
   18060:	b163      	cbz	r3, 1807c <region_allocate_and_init+0x6c>
   18062:	2303      	movs	r3, #3
   18064:	f88d 3004 	strb.w	r3, [sp, #4]
   18068:	2300      	movs	r3, #0
   1806a:	f88d 3005 	strb.w	r3, [sp, #5]
   1806e:	f88d 3006 	strb.w	r3, [sp, #6]
   18072:	f88d 3007 	strb.w	r3, [sp, #7]
   18076:	9801      	ldr	r0, [sp, #4]
   18078:	f8cc 0010 	str.w	r0, [ip, #16]
   1807c:	2300      	movs	r3, #0
   1807e:	4904      	ldr	r1, [pc, #16]	; (18090 <region_allocate_and_init+0x80>)
   18080:	4660      	mov	r0, ip
   18082:	f00f feac 	bl	27dde <z_log_msg_finalize>
		return -EINVAL;
   18086:	f06f 0015 	mvn.w	r0, #21
   1808a:	e7c9      	b.n	18020 <region_allocate_and_init+0x10>
   1808c:	0002f4c0 	.word	0x0002f4c0
   18090:	0002df10 	.word	0x0002df10

00018094 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   18094:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18098:	b083      	sub	sp, #12
   1809a:	4680      	mov	r8, r0
   1809c:	460f      	mov	r7, r1
   1809e:	4699      	mov	r9, r3
	int i;
	int reg_index = start_reg_index;
   180a0:	4616      	mov	r6, r2

	for (i = 0; i < regions_num; i++) {
   180a2:	2500      	movs	r5, #0
   180a4:	e009      	b.n	180ba <mpu_configure_regions+0x26>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
   180a6:	4621      	mov	r1, r4
   180a8:	b2f0      	uxtb	r0, r6
   180aa:	f010 fa6f 	bl	2858c <mpu_configure_region>
   180ae:	4606      	mov	r6, r0

		if (reg_index == -EINVAL) {
   180b0:	f110 0f16 	cmn.w	r0, #22
   180b4:	d044      	beq.n	18140 <mpu_configure_regions+0xac>
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
   180b6:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
   180b8:	3501      	adds	r5, #1
   180ba:	42bd      	cmp	r5, r7
   180bc:	da40      	bge.n	18140 <mpu_configure_regions+0xac>
		if (regions[i].size == 0U) {
   180be:	eb05 0445 	add.w	r4, r5, r5, lsl #1
   180c2:	eb08 0484 	add.w	r4, r8, r4, lsl #2
   180c6:	6862      	ldr	r2, [r4, #4]
   180c8:	2a00      	cmp	r2, #0
   180ca:	d0f5      	beq.n	180b8 <mpu_configure_regions+0x24>
		if (do_sanity_check &&
   180cc:	f1b9 0f00 	cmp.w	r9, #0
   180d0:	d0e9      	beq.n	180a6 <mpu_configure_regions+0x12>
				(!mpu_partition_is_valid(&regions[i]))) {
   180d2:	4620      	mov	r0, r4
   180d4:	f010 fa49 	bl	2856a <mpu_partition_is_valid>
		if (do_sanity_check &&
   180d8:	2800      	cmp	r0, #0
   180da:	d1e4      	bne.n	180a6 <mpu_configure_regions+0x12>
			LOG_ERR("Partition %u: sanity check failed.", i);
   180dc:	2008      	movs	r0, #8
   180de:	f7fd fe73 	bl	15dc8 <z_log_msg_alloc>
   180e2:	2200      	movs	r2, #0
   180e4:	f36f 0200 	bfc	r2, #0, #1
   180e8:	f36f 0241 	bfc	r2, #1, #1
   180ec:	f36f 0282 	bfc	r2, #2, #1
   180f0:	f36f 02c5 	bfc	r2, #3, #3
   180f4:	2301      	movs	r3, #1
   180f6:	f363 1288 	bfi	r2, r3, #6, #3
   180fa:	230c      	movs	r3, #12
   180fc:	f363 2252 	bfi	r2, r3, #9, #10
   18100:	f36f 42de 	bfc	r2, #19, #12
   18104:	f36f 72df 	bfc	r2, #31, #1
   18108:	4604      	mov	r4, r0
   1810a:	b190      	cbz	r0, 18132 <mpu_configure_regions+0x9e>
   1810c:	f110 0310 	adds.w	r3, r0, #16
   18110:	d002      	beq.n	18118 <mpu_configure_regions+0x84>
   18112:	490d      	ldr	r1, [pc, #52]	; (18148 <mpu_configure_regions+0xb4>)
   18114:	6141      	str	r1, [r0, #20]
   18116:	6185      	str	r5, [r0, #24]
   18118:	b15b      	cbz	r3, 18132 <mpu_configure_regions+0x9e>
   1811a:	2303      	movs	r3, #3
   1811c:	f88d 3004 	strb.w	r3, [sp, #4]
   18120:	2300      	movs	r3, #0
   18122:	f88d 3005 	strb.w	r3, [sp, #5]
   18126:	f88d 3006 	strb.w	r3, [sp, #6]
   1812a:	f88d 3007 	strb.w	r3, [sp, #7]
   1812e:	9801      	ldr	r0, [sp, #4]
   18130:	6120      	str	r0, [r4, #16]
   18132:	2300      	movs	r3, #0
   18134:	4905      	ldr	r1, [pc, #20]	; (1814c <mpu_configure_regions+0xb8>)
   18136:	4620      	mov	r0, r4
   18138:	f00f fe51 	bl	27dde <z_log_msg_finalize>
			return -EINVAL;
   1813c:	f06f 0615 	mvn.w	r6, #21
	}

	return reg_index;
}
   18140:	4630      	mov	r0, r6
   18142:	b003      	add	sp, #12
   18144:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   18148:	0002f4e8 	.word	0x0002f4e8
   1814c:	0002df10 	.word	0x0002df10

00018150 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
   18150:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
   18152:	4c03      	ldr	r4, [pc, #12]	; (18160 <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   18154:	2301      	movs	r3, #1
   18156:	7822      	ldrb	r2, [r4, #0]
   18158:	f7ff ff9c 	bl	18094 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   1815c:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
   1815e:	bd10      	pop	{r4, pc}
   18160:	20008fe2 	.word	0x20008fe2

00018164 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
   18164:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   18166:	2300      	movs	r3, #0
   18168:	4a09      	ldr	r2, [pc, #36]	; (18190 <mpu_configure_dynamic_mpu_regions+0x2c>)
   1816a:	7812      	ldrb	r2, [r2, #0]
   1816c:	f7ff ff92 	bl	18094 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   18170:	f110 0f16 	cmn.w	r0, #22
   18174:	d00a      	beq.n	1818c <mpu_configure_dynamic_mpu_regions+0x28>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   18176:	4603      	mov	r3, r0
   18178:	e006      	b.n	18188 <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
   1817a:	4a06      	ldr	r2, [pc, #24]	; (18194 <mpu_configure_dynamic_mpu_regions+0x30>)
   1817c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
   18180:	2100      	movs	r1, #0
   18182:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
   18186:	3301      	adds	r3, #1
   18188:	2b07      	cmp	r3, #7
   1818a:	ddf6      	ble.n	1817a <mpu_configure_dynamic_mpu_regions+0x16>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
   1818c:	bd08      	pop	{r3, pc}
   1818e:	bf00      	nop
   18190:	20008fe2 	.word	0x20008fe2
   18194:	e000ed00 	.word	0xe000ed00

00018198 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   18198:	4b04      	ldr	r3, [pc, #16]	; (181ac <arm_core_mpu_enable+0x14>)
   1819a:	2205      	movs	r2, #5
   1819c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   181a0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   181a4:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   181a8:	4770      	bx	lr
   181aa:	bf00      	nop
   181ac:	e000ed00 	.word	0xe000ed00

000181b0 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   181b0:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   181b4:	4b02      	ldr	r3, [pc, #8]	; (181c0 <arm_core_mpu_disable+0x10>)
   181b6:	2200      	movs	r2, #0
   181b8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   181bc:	4770      	bx	lr
   181be:	bf00      	nop
   181c0:	e000ed00 	.word	0xe000ed00

000181c4 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   181c4:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   181c6:	4b0e      	ldr	r3, [pc, #56]	; (18200 <z_arm_mpu_init+0x3c>)
   181c8:	681d      	ldr	r5, [r3, #0]
   181ca:	2d08      	cmp	r5, #8
   181cc:	d815      	bhi.n	181fa <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   181ce:	f7ff ffef 	bl	181b0 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   181d2:	2400      	movs	r4, #0
   181d4:	e009      	b.n	181ea <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   181d6:	4b0a      	ldr	r3, [pc, #40]	; (18200 <z_arm_mpu_init+0x3c>)
   181d8:	6859      	ldr	r1, [r3, #4]
   181da:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   181de:	0093      	lsls	r3, r2, #2
   181e0:	4419      	add	r1, r3
   181e2:	4620      	mov	r0, r4
   181e4:	f7ff ff00 	bl	17fe8 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   181e8:	3401      	adds	r4, #1
   181ea:	42a5      	cmp	r5, r4
   181ec:	d8f3      	bhi.n	181d6 <z_arm_mpu_init+0x12>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   181ee:	4b05      	ldr	r3, [pc, #20]	; (18204 <z_arm_mpu_init+0x40>)
   181f0:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
   181f2:	f7ff ffd1 	bl	18198 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   181f6:	2000      	movs	r0, #0
}
   181f8:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
   181fa:	f04f 30ff 	mov.w	r0, #4294967295
   181fe:	e7fb      	b.n	181f8 <z_arm_mpu_init+0x34>
   18200:	0002f50c 	.word	0x0002f50c
   18204:	20008fe2 	.word	0x20008fe2

00018208 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
   18208:	4b01      	ldr	r3, [pc, #4]	; (18210 <__stdout_hook_install+0x8>)
   1820a:	6018      	str	r0, [r3, #0]
}
   1820c:	4770      	bx	lr
   1820e:	bf00      	nop
   18210:	2000083c 	.word	0x2000083c

00018214 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
   18214:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   18218:	4905      	ldr	r1, [pc, #20]	; (18230 <__NVIC_SystemReset+0x1c>)
   1821a:	68ca      	ldr	r2, [r1, #12]
   1821c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   18220:	4b04      	ldr	r3, [pc, #16]	; (18234 <__NVIC_SystemReset+0x20>)
   18222:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   18224:	60cb      	str	r3, [r1, #12]
   18226:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   1822a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1822c:	e7fd      	b.n	1822a <__NVIC_SystemReset+0x16>
   1822e:	bf00      	nop
   18230:	e000ed00 	.word	0xe000ed00
   18234:	05fa0004 	.word	0x05fa0004

00018238 <nordicsemi_nrf52_init>:
	__asm__ volatile(
   18238:	f04f 0340 	mov.w	r3, #64	; 0x40
   1823c:	f3ef 8211 	mrs	r2, BASEPRI
   18240:	f383 8812 	msr	BASEPRI_MAX, r3
   18244:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   18248:	2301      	movs	r3, #1
   1824a:	4906      	ldr	r1, [pc, #24]	; (18264 <nordicsemi_nrf52_init+0x2c>)
   1824c:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   18250:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   18254:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
   18258:	f382 8811 	msr	BASEPRI, r2
   1825c:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   18260:	2000      	movs	r0, #0
   18262:	4770      	bx	lr
   18264:	4001e000 	.word	0x4001e000

00018268 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   18268:	b130      	cbz	r0, 18278 <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
   1826a:	b508      	push	{r3, lr}
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   1826c:	4b03      	ldr	r3, [pc, #12]	; (1827c <arch_busy_wait+0x14>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   1826e:	0180      	lsls	r0, r0, #6
   18270:	f043 0301 	orr.w	r3, r3, #1
   18274:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
   18276:	bd08      	pop	{r3, pc}
   18278:	4770      	bx	lr
   1827a:	bf00      	nop
   1827c:	0002dfe0 	.word	0x0002dfe0

00018280 <bt_addr_le_to_str>:
{
   18280:	b5f0      	push	{r4, r5, r6, r7, lr}
   18282:	b08b      	sub	sp, #44	; 0x2c
   18284:	4604      	mov	r4, r0
   18286:	460d      	mov	r5, r1
   18288:	4616      	mov	r6, r2
	switch (addr->type) {
   1828a:	7803      	ldrb	r3, [r0, #0]
   1828c:	2b03      	cmp	r3, #3
   1828e:	d82c      	bhi.n	182ea <bt_addr_le_to_str+0x6a>
   18290:	e8df f003 	tbb	[pc, r3]
   18294:	26211c02 	.word	0x26211c02
		strcpy(type, "public");
   18298:	4917      	ldr	r1, [pc, #92]	; (182f8 <bt_addr_le_to_str+0x78>)
   1829a:	a807      	add	r0, sp, #28
   1829c:	f010 f99d 	bl	285da <strcpy>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
   182a0:	7963      	ldrb	r3, [r4, #5]
   182a2:	7922      	ldrb	r2, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
   182a4:	78e1      	ldrb	r1, [r4, #3]
   182a6:	78a0      	ldrb	r0, [r4, #2]
   182a8:	7867      	ldrb	r7, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   182aa:	f10d 0c1c 	add.w	ip, sp, #28
   182ae:	f8cd c014 	str.w	ip, [sp, #20]
   182b2:	9704      	str	r7, [sp, #16]
   182b4:	9003      	str	r0, [sp, #12]
   182b6:	9102      	str	r1, [sp, #8]
   182b8:	9201      	str	r2, [sp, #4]
   182ba:	9300      	str	r3, [sp, #0]
   182bc:	79a3      	ldrb	r3, [r4, #6]
   182be:	4a0f      	ldr	r2, [pc, #60]	; (182fc <bt_addr_le_to_str+0x7c>)
   182c0:	4631      	mov	r1, r6
   182c2:	4628      	mov	r0, r5
   182c4:	f00e fcaa 	bl	26c1c <snprintk>
}
   182c8:	b00b      	add	sp, #44	; 0x2c
   182ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
   182cc:	490c      	ldr	r1, [pc, #48]	; (18300 <bt_addr_le_to_str+0x80>)
   182ce:	a807      	add	r0, sp, #28
   182d0:	f010 f983 	bl	285da <strcpy>
		break;
   182d4:	e7e4      	b.n	182a0 <bt_addr_le_to_str+0x20>
		strcpy(type, "public-id");
   182d6:	490b      	ldr	r1, [pc, #44]	; (18304 <bt_addr_le_to_str+0x84>)
   182d8:	a807      	add	r0, sp, #28
   182da:	f010 f97e 	bl	285da <strcpy>
		break;
   182de:	e7df      	b.n	182a0 <bt_addr_le_to_str+0x20>
		strcpy(type, "random-id");
   182e0:	4909      	ldr	r1, [pc, #36]	; (18308 <bt_addr_le_to_str+0x88>)
   182e2:	a807      	add	r0, sp, #28
   182e4:	f010 f979 	bl	285da <strcpy>
		break;
   182e8:	e7da      	b.n	182a0 <bt_addr_le_to_str+0x20>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   182ea:	4a08      	ldr	r2, [pc, #32]	; (1830c <bt_addr_le_to_str+0x8c>)
   182ec:	210a      	movs	r1, #10
   182ee:	a807      	add	r0, sp, #28
   182f0:	f00e fc94 	bl	26c1c <snprintk>
		break;
   182f4:	e7d4      	b.n	182a0 <bt_addr_le_to_str+0x20>
   182f6:	bf00      	nop
   182f8:	0002e2b4 	.word	0x0002e2b4
   182fc:	0002e2dc 	.word	0x0002e2dc
   18300:	0002e2bc 	.word	0x0002e2bc
   18304:	0002e2c4 	.word	0x0002e2c4
   18308:	0002e2d0 	.word	0x0002e2d0
   1830c:	000303b8 	.word	0x000303b8

00018310 <bt_hex>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   18310:	2940      	cmp	r1, #64	; 0x40
   18312:	bf28      	it	cs
   18314:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
   18316:	2300      	movs	r3, #0
   18318:	428b      	cmp	r3, r1
   1831a:	d21c      	bcs.n	18356 <bt_hex+0x46>
{
   1831c:	b430      	push	{r4, r5}
		str[i * 2] = hex[b[i] >> 4];
   1831e:	f810 c003 	ldrb.w	ip, [r0, r3]
   18322:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
   18326:	005a      	lsls	r2, r3, #1
   18328:	4d0d      	ldr	r5, [pc, #52]	; (18360 <bt_hex+0x50>)
   1832a:	f815 c00c 	ldrb.w	ip, [r5, ip]
   1832e:	4c0d      	ldr	r4, [pc, #52]	; (18364 <bt_hex+0x54>)
   18330:	f804 c013 	strb.w	ip, [r4, r3, lsl #1]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   18334:	f810 c003 	ldrb.w	ip, [r0, r3]
   18338:	f00c 0c0f 	and.w	ip, ip, #15
   1833c:	3201      	adds	r2, #1
   1833e:	f815 500c 	ldrb.w	r5, [r5, ip]
   18342:	54a5      	strb	r5, [r4, r2]
	for (i = 0; i < len; i++) {
   18344:	3301      	adds	r3, #1
   18346:	428b      	cmp	r3, r1
   18348:	d3e9      	bcc.n	1831e <bt_hex+0xe>
	}

	str[i * 2] = '\0';
   1834a:	4806      	ldr	r0, [pc, #24]	; (18364 <bt_hex+0x54>)
   1834c:	2200      	movs	r2, #0
   1834e:	f800 2013 	strb.w	r2, [r0, r3, lsl #1]

	return str;
}
   18352:	bc30      	pop	{r4, r5}
   18354:	4770      	bx	lr
	str[i * 2] = '\0';
   18356:	4803      	ldr	r0, [pc, #12]	; (18364 <bt_hex+0x54>)
   18358:	2200      	movs	r2, #0
   1835a:	f800 2013 	strb.w	r2, [r0, r3, lsl #1]
}
   1835e:	4770      	bx	lr
   18360:	0002f560 	.word	0x0002f560
   18364:	20007bc4 	.word	0x20007bc4

00018368 <bt_addr_le_str>:

	return str;
}

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
   18368:	b510      	push	{r4, lr}
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));
   1836a:	4c03      	ldr	r4, [pc, #12]	; (18378 <bt_addr_le_str+0x10>)
   1836c:	221e      	movs	r2, #30
   1836e:	4621      	mov	r1, r4
   18370:	f7ff ff86 	bl	18280 <bt_addr_le_to_str>

	return str;
}
   18374:	4620      	mov	r0, r4
   18376:	bd10      	pop	{r4, pc}
   18378:	20007ba4 	.word	0x20007ba4

0001837c <long_wq_init>:
{
	return k_work_submit_to_queue(&bt_long_wq, work);
}

static int long_wq_init(const struct device *d)
{
   1837c:	b570      	push	{r4, r5, r6, lr}
   1837e:	b084      	sub	sp, #16
	ARG_UNUSED(d);

	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   18380:	ae02      	add	r6, sp, #8
   18382:	2400      	movs	r4, #0
   18384:	9402      	str	r4, [sp, #8]
   18386:	9403      	str	r4, [sp, #12]
   18388:	4b08      	ldr	r3, [pc, #32]	; (183ac <long_wq_init+0x30>)
   1838a:	9302      	str	r3, [sp, #8]

	k_work_queue_init(&bt_long_wq);
   1838c:	4d08      	ldr	r5, [pc, #32]	; (183b0 <long_wq_init+0x34>)
   1838e:	4628      	mov	r0, r5
   18390:	f014 fee6 	bl	2d160 <k_work_queue_init>

	k_work_queue_start(&bt_long_wq, bt_lw_stack_area,
   18394:	9600      	str	r6, [sp, #0]
   18396:	230a      	movs	r3, #10
   18398:	f44f 62a3 	mov.w	r2, #1304	; 0x518
   1839c:	4905      	ldr	r1, [pc, #20]	; (183b4 <long_wq_init+0x38>)
   1839e:	4628      	mov	r0, r5
   183a0:	f00d f8a0 	bl	254e4 <k_work_queue_start>
			   K_THREAD_STACK_SIZEOF(bt_lw_stack_area),
			   CONFIG_BT_LONG_WQ_PRIO, &cfg);

	return 0;
}
   183a4:	4620      	mov	r0, r4
   183a6:	b004      	add	sp, #16
   183a8:	bd70      	pop	{r4, r5, r6, pc}
   183aa:	bf00      	nop
   183ac:	0002f574 	.word	0x0002f574
   183b0:	20002060 	.word	0x20002060
   183b4:	20009340 	.word	0x20009340

000183b8 <bt_long_wq_schedule>:
{
   183b8:	b508      	push	{r3, lr}
   183ba:	4601      	mov	r1, r0
	return k_work_schedule_for_queue(&bt_long_wq, dwork, timeout);
   183bc:	4801      	ldr	r0, [pc, #4]	; (183c4 <bt_long_wq_schedule+0xc>)
   183be:	f014 fef1 	bl	2d1a4 <k_work_schedule_for_queue>
}
   183c2:	bd08      	pop	{r3, pc}
   183c4:	20002060 	.word	0x20002060

000183c8 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   183c8:	b510      	push	{r4, lr}
   183ca:	4686      	mov	lr, r0
   183cc:	468c      	mov	ip, r1
	switch (src->type) {
   183ce:	7803      	ldrb	r3, [r0, #0]
   183d0:	2b01      	cmp	r3, #1
   183d2:	d018      	beq.n	18406 <uuid_to_uuid128+0x3e>
   183d4:	2b02      	cmp	r3, #2
   183d6:	d032      	beq.n	1843e <uuid_to_uuid128+0x76>
   183d8:	b103      	cbz	r3, 183dc <uuid_to_uuid128+0x14>
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   183da:	bd10      	pop	{r4, pc}
		*dst = uuid128_base;
   183dc:	4c1b      	ldr	r4, [pc, #108]	; (1844c <uuid_to_uuid128+0x84>)
   183de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   183e0:	f8cc 0000 	str.w	r0, [ip]
   183e4:	f8cc 1004 	str.w	r1, [ip, #4]
   183e8:	f8cc 2008 	str.w	r2, [ip, #8]
   183ec:	f8cc 300c 	str.w	r3, [ip, #12]
   183f0:	7823      	ldrb	r3, [r4, #0]
   183f2:	f88c 3010 	strb.w	r3, [ip, #16]
		sys_put_le16(BT_UUID_16(src)->val,
   183f6:	f8be 3002 	ldrh.w	r3, [lr, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
   183fa:	f88c 300d 	strb.w	r3, [ip, #13]
	dst[1] = val >> 8;
   183fe:	0a1b      	lsrs	r3, r3, #8
   18400:	f88c 300e 	strb.w	r3, [ip, #14]
}
   18404:	e7e9      	b.n	183da <uuid_to_uuid128+0x12>
		*dst = uuid128_base;
   18406:	4c11      	ldr	r4, [pc, #68]	; (1844c <uuid_to_uuid128+0x84>)
   18408:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1840a:	f8cc 0000 	str.w	r0, [ip]
   1840e:	f8cc 1004 	str.w	r1, [ip, #4]
   18412:	f8cc 2008 	str.w	r2, [ip, #8]
   18416:	f8cc 300c 	str.w	r3, [ip, #12]
   1841a:	7823      	ldrb	r3, [r4, #0]
   1841c:	f88c 3010 	strb.w	r3, [ip, #16]
		sys_put_le32(BT_UUID_32(src)->val,
   18420:	f8de 3004 	ldr.w	r3, [lr, #4]
	dst[0] = val;
   18424:	f88c 300d 	strb.w	r3, [ip, #13]
	dst[1] = val >> 8;
   18428:	f3c3 2207 	ubfx	r2, r3, #8, #8
   1842c:	f88c 200e 	strb.w	r2, [ip, #14]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
   18430:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   18432:	f88c 200f 	strb.w	r2, [ip, #15]
	dst[1] = val >> 8;
   18436:	0e1b      	lsrs	r3, r3, #24
   18438:	f88c 3010 	strb.w	r3, [ip, #16]
}
   1843c:	e7cd      	b.n	183da <uuid_to_uuid128+0x12>
		memcpy(dst, src, sizeof(*dst));
   1843e:	2211      	movs	r2, #17
   18440:	4601      	mov	r1, r0
   18442:	4660      	mov	r0, ip
   18444:	f010 f91d 	bl	28682 <memcpy>
		return;
   18448:	e7c7      	b.n	183da <uuid_to_uuid128+0x12>
   1844a:	bf00      	nop
   1844c:	0002f580 	.word	0x0002f580

00018450 <bt_addr_from_str>:

	return 0;
}

int bt_addr_from_str(const char *str, bt_addr_t *addr)
{
   18450:	b5f0      	push	{r4, r5, r6, r7, lr}
   18452:	b083      	sub	sp, #12
   18454:	4605      	mov	r5, r0
   18456:	460f      	mov	r7, r1
	int i, j;
	uint8_t tmp;

	if (strlen(str) != 17U) {
   18458:	f010 f8e3 	bl	28622 <strlen>
   1845c:	2811      	cmp	r0, #17
   1845e:	d12a      	bne.n	184b6 <bt_addr_from_str+0x66>
		return -EINVAL;
	}

	for (i = 5, j = 1; *str != '\0'; str++, j++) {
   18460:	2401      	movs	r4, #1
   18462:	2605      	movs	r6, #5
   18464:	e012      	b.n	1848c <bt_addr_from_str+0x3c>
		if (!(j % 3) && (*str != ':')) {
			return -EINVAL;
		} else if (*str == ':') {
   18466:	2a3a      	cmp	r2, #58	; 0x3a
   18468:	d020      	beq.n	184ac <bt_addr_from_str+0x5c>
			i--;
			continue;
		}

		addr->val[i] = addr->val[i] << 4;
   1846a:	5dbb      	ldrb	r3, [r7, r6]
   1846c:	011b      	lsls	r3, r3, #4
   1846e:	55bb      	strb	r3, [r7, r6]

		if (char2hex(*str, &tmp) < 0) {
   18470:	f10d 0107 	add.w	r1, sp, #7
   18474:	7828      	ldrb	r0, [r5, #0]
   18476:	f00e fb88 	bl	26b8a <char2hex>
   1847a:	2800      	cmp	r0, #0
   1847c:	db1e      	blt.n	184bc <bt_addr_from_str+0x6c>
			return -EINVAL;
		}

		addr->val[i] |= tmp;
   1847e:	5dbb      	ldrb	r3, [r7, r6]
   18480:	f89d 2007 	ldrb.w	r2, [sp, #7]
   18484:	4313      	orrs	r3, r2
   18486:	55bb      	strb	r3, [r7, r6]
	for (i = 5, j = 1; *str != '\0'; str++, j++) {
   18488:	3501      	adds	r5, #1
   1848a:	3401      	adds	r4, #1
   1848c:	782a      	ldrb	r2, [r5, #0]
   1848e:	b17a      	cbz	r2, 184b0 <bt_addr_from_str+0x60>
		if (!(j % 3) && (*str != ':')) {
   18490:	4b0c      	ldr	r3, [pc, #48]	; (184c4 <bt_addr_from_str+0x74>)
   18492:	fb83 1304 	smull	r1, r3, r3, r4
   18496:	eba3 73e4 	sub.w	r3, r3, r4, asr #31
   1849a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1849e:	429c      	cmp	r4, r3
   184a0:	d1e1      	bne.n	18466 <bt_addr_from_str+0x16>
   184a2:	2a3a      	cmp	r2, #58	; 0x3a
   184a4:	d0df      	beq.n	18466 <bt_addr_from_str+0x16>
			return -EINVAL;
   184a6:	f06f 0015 	mvn.w	r0, #21
   184aa:	e002      	b.n	184b2 <bt_addr_from_str+0x62>
			i--;
   184ac:	3e01      	subs	r6, #1
			continue;
   184ae:	e7eb      	b.n	18488 <bt_addr_from_str+0x38>
	}

	return 0;
   184b0:	2000      	movs	r0, #0
}
   184b2:	b003      	add	sp, #12
   184b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EINVAL;
   184b6:	f06f 0015 	mvn.w	r0, #21
   184ba:	e7fa      	b.n	184b2 <bt_addr_from_str+0x62>
			return -EINVAL;
   184bc:	f06f 0015 	mvn.w	r0, #21
   184c0:	e7f7      	b.n	184b2 <bt_addr_from_str+0x62>
   184c2:	bf00      	nop
   184c4:	55555556 	.word	0x55555556

000184c8 <bt_addr_le_from_str>:

int bt_addr_le_from_str(const char *str, const char *type, bt_addr_le_t *addr)
{
   184c8:	b538      	push	{r3, r4, r5, lr}
   184ca:	460d      	mov	r5, r1
   184cc:	4614      	mov	r4, r2
	int err;

	err = bt_addr_from_str(str, &addr->a);
   184ce:	1c51      	adds	r1, r2, #1
   184d0:	f7ff ffbe 	bl	18450 <bt_addr_from_str>
	if (err < 0) {
   184d4:	2800      	cmp	r0, #0
   184d6:	db06      	blt.n	184e6 <bt_addr_le_from_str+0x1e>
		return err;
	}

	if (!strcmp(type, "public") || !strcmp(type, "(public)")) {
   184d8:	491e      	ldr	r1, [pc, #120]	; (18554 <bt_addr_le_from_str+0x8c>)
   184da:	4628      	mov	r0, r5
   184dc:	f010 f8b4 	bl	28648 <strcmp>
   184e0:	b910      	cbnz	r0, 184e8 <bt_addr_le_from_str+0x20>
		addr->type = BT_ADDR_LE_PUBLIC;
   184e2:	2000      	movs	r0, #0
   184e4:	7020      	strb	r0, [r4, #0]
	} else {
		return -EINVAL;
	}

	return 0;
}
   184e6:	bd38      	pop	{r3, r4, r5, pc}
	if (!strcmp(type, "public") || !strcmp(type, "(public)")) {
   184e8:	491b      	ldr	r1, [pc, #108]	; (18558 <bt_addr_le_from_str+0x90>)
   184ea:	4628      	mov	r0, r5
   184ec:	f010 f8ac 	bl	28648 <strcmp>
   184f0:	2800      	cmp	r0, #0
   184f2:	d0f6      	beq.n	184e2 <bt_addr_le_from_str+0x1a>
	} else if (!strcmp(type, "random") || !strcmp(type, "(random)")) {
   184f4:	4919      	ldr	r1, [pc, #100]	; (1855c <bt_addr_le_from_str+0x94>)
   184f6:	4628      	mov	r0, r5
   184f8:	f010 f8a6 	bl	28648 <strcmp>
   184fc:	b918      	cbnz	r0, 18506 <bt_addr_le_from_str+0x3e>
		addr->type = BT_ADDR_LE_RANDOM;
   184fe:	2301      	movs	r3, #1
   18500:	7023      	strb	r3, [r4, #0]
	return 0;
   18502:	2000      	movs	r0, #0
		addr->type = BT_ADDR_LE_RANDOM;
   18504:	e7ef      	b.n	184e6 <bt_addr_le_from_str+0x1e>
	} else if (!strcmp(type, "random") || !strcmp(type, "(random)")) {
   18506:	4916      	ldr	r1, [pc, #88]	; (18560 <bt_addr_le_from_str+0x98>)
   18508:	4628      	mov	r0, r5
   1850a:	f010 f89d 	bl	28648 <strcmp>
   1850e:	2800      	cmp	r0, #0
   18510:	d0f5      	beq.n	184fe <bt_addr_le_from_str+0x36>
	} else if (!strcmp(type, "public-id") || !strcmp(type, "(public-id)")) {
   18512:	4914      	ldr	r1, [pc, #80]	; (18564 <bt_addr_le_from_str+0x9c>)
   18514:	4628      	mov	r0, r5
   18516:	f010 f897 	bl	28648 <strcmp>
   1851a:	b918      	cbnz	r0, 18524 <bt_addr_le_from_str+0x5c>
		addr->type = BT_ADDR_LE_PUBLIC_ID;
   1851c:	2302      	movs	r3, #2
   1851e:	7023      	strb	r3, [r4, #0]
	return 0;
   18520:	2000      	movs	r0, #0
		addr->type = BT_ADDR_LE_PUBLIC_ID;
   18522:	e7e0      	b.n	184e6 <bt_addr_le_from_str+0x1e>
	} else if (!strcmp(type, "public-id") || !strcmp(type, "(public-id)")) {
   18524:	4910      	ldr	r1, [pc, #64]	; (18568 <bt_addr_le_from_str+0xa0>)
   18526:	4628      	mov	r0, r5
   18528:	f010 f88e 	bl	28648 <strcmp>
   1852c:	2800      	cmp	r0, #0
   1852e:	d0f5      	beq.n	1851c <bt_addr_le_from_str+0x54>
	} else if (!strcmp(type, "random-id") || !strcmp(type, "(random-id)")) {
   18530:	490e      	ldr	r1, [pc, #56]	; (1856c <bt_addr_le_from_str+0xa4>)
   18532:	4628      	mov	r0, r5
   18534:	f010 f888 	bl	28648 <strcmp>
   18538:	b918      	cbnz	r0, 18542 <bt_addr_le_from_str+0x7a>
		addr->type = BT_ADDR_LE_RANDOM_ID;
   1853a:	2303      	movs	r3, #3
   1853c:	7023      	strb	r3, [r4, #0]
	return 0;
   1853e:	2000      	movs	r0, #0
		addr->type = BT_ADDR_LE_RANDOM_ID;
   18540:	e7d1      	b.n	184e6 <bt_addr_le_from_str+0x1e>
	} else if (!strcmp(type, "random-id") || !strcmp(type, "(random-id)")) {
   18542:	490b      	ldr	r1, [pc, #44]	; (18570 <bt_addr_le_from_str+0xa8>)
   18544:	4628      	mov	r0, r5
   18546:	f010 f87f 	bl	28648 <strcmp>
   1854a:	2800      	cmp	r0, #0
   1854c:	d0f5      	beq.n	1853a <bt_addr_le_from_str+0x72>
		return -EINVAL;
   1854e:	f06f 0015 	mvn.w	r0, #21
   18552:	e7c8      	b.n	184e6 <bt_addr_le_from_str+0x1e>
   18554:	0002e2b4 	.word	0x0002e2b4
   18558:	0002f594 	.word	0x0002f594
   1855c:	0002e2bc 	.word	0x0002e2bc
   18560:	0002f5a0 	.word	0x0002f5a0
   18564:	0002e2c4 	.word	0x0002e2c4
   18568:	0002f5ac 	.word	0x0002f5ac
   1856c:	0002e2d0 	.word	0x0002e2d0
   18570:	0002f5b8 	.word	0x0002f5b8

00018574 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   18574:	b538      	push	{r3, r4, r5, lr}
   18576:	4604      	mov	r4, r0
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf * __must_check net_buf_alloc(struct net_buf_pool *pool,
							  k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
   18578:	4805      	ldr	r0, [pc, #20]	; (18590 <bt_buf_get_rx+0x1c>)
   1857a:	f012 fcfb 	bl	2af74 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   1857e:	4605      	mov	r5, r0
   18580:	b120      	cbz	r0, 1858c <bt_buf_get_rx+0x18>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
   18582:	2100      	movs	r1, #0
   18584:	300c      	adds	r0, #12
   18586:	f012 fd06 	bl	2af96 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   1858a:	762c      	strb	r4, [r5, #24]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   1858c:	4628      	mov	r0, r5
   1858e:	bd38      	pop	{r3, r4, r5, pc}
   18590:	20000cf4 	.word	0x20000cf4

00018594 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   18594:	b510      	push	{r4, lr}
   18596:	4602      	mov	r2, r0
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   18598:	4b0a      	ldr	r3, [pc, #40]	; (185c4 <bt_buf_get_cmd_complete+0x30>)
   1859a:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
   1859e:	b158      	cbz	r0, 185b8 <bt_buf_get_cmd_complete+0x24>
		buf = net_buf_ref(bt_dev.sent_cmd);
   185a0:	f012 fd52 	bl	2b048 <net_buf_ref>
   185a4:	4604      	mov	r4, r0
   185a6:	2301      	movs	r3, #1
   185a8:	7603      	strb	r3, [r0, #24]

		bt_buf_set_type(buf, BT_BUF_EVT);
		buf->len = 0U;
   185aa:	2100      	movs	r1, #0
   185ac:	8201      	strh	r1, [r0, #16]
   185ae:	300c      	adds	r0, #12
   185b0:	f012 fcf1 	bl	2af96 <net_buf_simple_reserve>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   185b4:	4620      	mov	r0, r4
   185b6:	bd10      	pop	{r4, pc}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   185b8:	460b      	mov	r3, r1
   185ba:	2001      	movs	r0, #1
   185bc:	f7ff ffda 	bl	18574 <bt_buf_get_rx>
   185c0:	4604      	mov	r4, r0
   185c2:	e7f7      	b.n	185b4 <bt_buf_get_cmd_complete+0x20>
   185c4:	20000370 	.word	0x20000370

000185c8 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   185c8:	b510      	push	{r4, lr}
	switch (evt) {
   185ca:	280f      	cmp	r0, #15
   185cc:	d90d      	bls.n	185ea <bt_buf_get_evt+0x22>
   185ce:	2813      	cmp	r0, #19
   185d0:	d10d      	bne.n	185ee <bt_buf_get_evt+0x26>
	return net_buf_alloc_fixed(pool, timeout);
   185d2:	4814      	ldr	r0, [pc, #80]	; (18624 <bt_buf_get_evt+0x5c>)
   185d4:	f012 fcce 	bl	2af74 <net_buf_alloc_fixed>
	case BT_HCI_EVT_NUM_COMPLETED_PACKETS:
		{
			struct net_buf *buf;

			buf = net_buf_alloc(&num_complete_pool, timeout);
			if (buf) {
   185d8:	4604      	mov	r4, r0
   185da:	b198      	cbz	r0, 18604 <bt_buf_get_evt+0x3c>
	net_buf_simple_reserve(&buf->b, reserve);
   185dc:	2100      	movs	r1, #0
   185de:	300c      	adds	r0, #12
   185e0:	f012 fcd9 	bl	2af96 <net_buf_simple_reserve>
   185e4:	2301      	movs	r3, #1
   185e6:	7623      	strb	r3, [r4, #24]
}
   185e8:	e00c      	b.n	18604 <bt_buf_get_evt+0x3c>
	switch (evt) {
   185ea:	280e      	cmp	r0, #14
   185ec:	d205      	bcs.n	185fa <bt_buf_get_evt+0x32>
#endif /* CONFIG_BT_CONN || CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return bt_buf_get_cmd_complete(timeout);
	default:
		if (discardable) {
   185ee:	b959      	cbnz	r1, 18608 <bt_buf_get_evt+0x40>
			}

			return buf;
		}

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   185f0:	2001      	movs	r0, #1
   185f2:	f7ff ffbf 	bl	18574 <bt_buf_get_rx>
   185f6:	4604      	mov	r4, r0
   185f8:	e004      	b.n	18604 <bt_buf_get_evt+0x3c>
		return bt_buf_get_cmd_complete(timeout);
   185fa:	4610      	mov	r0, r2
   185fc:	4619      	mov	r1, r3
   185fe:	f7ff ffc9 	bl	18594 <bt_buf_get_cmd_complete>
   18602:	4604      	mov	r4, r0
	}
}
   18604:	4620      	mov	r0, r4
   18606:	bd10      	pop	{r4, pc}
	return net_buf_alloc_fixed(pool, timeout);
   18608:	4807      	ldr	r0, [pc, #28]	; (18628 <bt_buf_get_evt+0x60>)
   1860a:	f012 fcb3 	bl	2af74 <net_buf_alloc_fixed>
			if (buf) {
   1860e:	4604      	mov	r4, r0
   18610:	2800      	cmp	r0, #0
   18612:	d0f7      	beq.n	18604 <bt_buf_get_evt+0x3c>
	net_buf_simple_reserve(&buf->b, reserve);
   18614:	2100      	movs	r1, #0
   18616:	300c      	adds	r0, #12
   18618:	f012 fcbd 	bl	2af96 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   1861c:	2301      	movs	r3, #1
   1861e:	7623      	strb	r3, [r4, #24]
			return buf;
   18620:	e7f0      	b.n	18604 <bt_buf_get_evt+0x3c>
   18622:	bf00      	nop
   18624:	20000d20 	.word	0x20000d20
   18628:	20000c70 	.word	0x20000c70

0001862c <conn_handle_disconnected>:
	(void)memset(disconnected_handles, 0, sizeof(disconnected_handles));
}

static void conn_handle_disconnected(uint16_t handle)
{
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   1862c:	2300      	movs	r3, #0
   1862e:	e000      	b.n	18632 <conn_handle_disconnected+0x6>
   18630:	3301      	adds	r3, #1
   18632:	2b07      	cmp	r3, #7
   18634:	d80a      	bhi.n	1864c <conn_handle_disconnected+0x20>
		if (!disconnected_handles[i]) {
   18636:	4a06      	ldr	r2, [pc, #24]	; (18650 <conn_handle_disconnected+0x24>)
   18638:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
   1863c:	2a00      	cmp	r2, #0
   1863e:	d1f7      	bne.n	18630 <conn_handle_disconnected+0x4>
			/* Use invalid connection handle bits so that connection
			 * handle 0 can be used as a valid non-zero handle.
			 */
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   18640:	f440 4270 	orr.w	r2, r0, #61440	; 0xf000
   18644:	4902      	ldr	r1, [pc, #8]	; (18650 <conn_handle_disconnected+0x24>)
   18646:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
   1864a:	e7f1      	b.n	18630 <conn_handle_disconnected+0x4>
		}
	}
}
   1864c:	4770      	bx	lr
   1864e:	bf00      	nop
   18650:	20007c48 	.word	0x20007c48

00018654 <conn_handle_is_disconnected>:

static bool conn_handle_is_disconnected(uint16_t handle)
{
	handle |= ~BT_ACL_HANDLE_MASK;
   18654:	f440 4070 	orr.w	r0, r0, #61440	; 0xf000

	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   18658:	2300      	movs	r3, #0
   1865a:	2b07      	cmp	r3, #7
   1865c:	d80c      	bhi.n	18678 <conn_handle_is_disconnected+0x24>
		if (disconnected_handles[i] == handle) {
   1865e:	4a07      	ldr	r2, [pc, #28]	; (1867c <conn_handle_is_disconnected+0x28>)
   18660:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
   18664:	4282      	cmp	r2, r0
   18666:	d001      	beq.n	1866c <conn_handle_is_disconnected+0x18>
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   18668:	3301      	adds	r3, #1
   1866a:	e7f6      	b.n	1865a <conn_handle_is_disconnected+0x6>
			disconnected_handles[i] = 0;
   1866c:	4a03      	ldr	r2, [pc, #12]	; (1867c <conn_handle_is_disconnected+0x28>)
   1866e:	2100      	movs	r1, #0
   18670:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			return true;
   18674:	2001      	movs	r0, #1
   18676:	4770      	bx	lr
		}
	}

	return false;
   18678:	2000      	movs	r0, #0
}
   1867a:	4770      	bx	lr
   1867c:	20007c48 	.word	0x20007c48

00018680 <read_local_ver_complete>:
}


static void read_local_ver_complete(struct net_buf *buf)
{
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   18680:	68c2      	ldr	r2, [r0, #12]

	LOG_DBG("status 0x%02x", rp->status);

	bt_dev.hci_version = rp->hci_version;
   18682:	7851      	ldrb	r1, [r2, #1]
   18684:	4b08      	ldr	r3, [pc, #32]	; (186a8 <read_local_ver_complete+0x28>)
   18686:	f883 1068 	strb.w	r1, [r3, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   1868a:	8851      	ldrh	r1, [r2, #2]
   1868c:	f8a3 106a 	strh.w	r1, [r3, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
   18690:	7911      	ldrb	r1, [r2, #4]
   18692:	f883 1069 	strb.w	r1, [r3, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   18696:	f8b2 1007 	ldrh.w	r1, [r2, #7]
   1869a:	f8a3 106c 	strh.w	r1, [r3, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   1869e:	f8b2 2005 	ldrh.w	r2, [r2, #5]
   186a2:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
}
   186a6:	4770      	bx	lr
   186a8:	20000370 	.word	0x20000370

000186ac <le_read_supp_states_complete>:

	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
}

static void le_read_supp_states_complete(struct net_buf *buf)
{
   186ac:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_supp_states *rp = (void *)buf->data;
   186ae:	68c0      	ldr	r0, [r0, #12]

	LOG_DBG("status 0x%02x", rp->status);

	bt_dev.le.states = sys_get_le64(rp->le_states);
   186b0:	3001      	adds	r0, #1
   186b2:	f010 f8ce 	bl	28852 <sys_get_le64>
   186b6:	4b02      	ldr	r3, [pc, #8]	; (186c0 <le_read_supp_states_complete+0x14>)
   186b8:	e9c3 0136 	strd	r0, r1, [r3, #216]	; 0xd8
}
   186bc:	bd08      	pop	{r3, pc}
   186be:	bf00      	nop
   186c0:	20000370 	.word	0x20000370

000186c4 <hci_data_buf_overflow>:
{
   186c4:	b510      	push	{r4, lr}
   186c6:	b082      	sub	sp, #8
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;
   186c8:	68c3      	ldr	r3, [r0, #12]
	LOG_WRN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   186ca:	781c      	ldrb	r4, [r3, #0]
   186cc:	2008      	movs	r0, #8
   186ce:	f7fd fb7b 	bl	15dc8 <z_log_msg_alloc>
   186d2:	2200      	movs	r2, #0
   186d4:	f36f 0200 	bfc	r2, #0, #1
   186d8:	f36f 0241 	bfc	r2, #1, #1
   186dc:	f36f 0282 	bfc	r2, #2, #1
   186e0:	f36f 02c5 	bfc	r2, #3, #3
   186e4:	2302      	movs	r3, #2
   186e6:	f363 1288 	bfi	r2, r3, #6, #3
   186ea:	230c      	movs	r3, #12
   186ec:	f363 2252 	bfi	r2, r3, #9, #10
   186f0:	f36f 42de 	bfc	r2, #19, #12
   186f4:	f36f 72df 	bfc	r2, #31, #1
   186f8:	4684      	mov	ip, r0
   186fa:	b198      	cbz	r0, 18724 <hci_data_buf_overflow+0x60>
   186fc:	f110 0310 	adds.w	r3, r0, #16
   18700:	d002      	beq.n	18708 <hci_data_buf_overflow+0x44>
   18702:	490c      	ldr	r1, [pc, #48]	; (18734 <hci_data_buf_overflow+0x70>)
   18704:	6141      	str	r1, [r0, #20]
   18706:	6184      	str	r4, [r0, #24]
   18708:	b163      	cbz	r3, 18724 <hci_data_buf_overflow+0x60>
   1870a:	2303      	movs	r3, #3
   1870c:	f88d 3004 	strb.w	r3, [sp, #4]
   18710:	2300      	movs	r3, #0
   18712:	f88d 3005 	strb.w	r3, [sp, #5]
   18716:	f88d 3006 	strb.w	r3, [sp, #6]
   1871a:	f88d 3007 	strb.w	r3, [sp, #7]
   1871e:	9801      	ldr	r0, [sp, #4]
   18720:	f8cc 0010 	str.w	r0, [ip, #16]
   18724:	2300      	movs	r3, #0
   18726:	4904      	ldr	r1, [pc, #16]	; (18738 <hci_data_buf_overflow+0x74>)
   18728:	4660      	mov	r0, ip
   1872a:	f00f fb58 	bl	27dde <z_log_msg_finalize>
}
   1872e:	b002      	add	sp, #8
   18730:	bd10      	pop	{r4, pc}
   18732:	bf00      	nop
   18734:	0002f5f4 	.word	0x0002f5f4
   18738:	0002de90 	.word	0x0002de90

0001873c <handle_event_common>:
{
   1873c:	b530      	push	{r4, r5, lr}
   1873e:	b083      	sub	sp, #12
   18740:	4604      	mov	r4, r0
   18742:	4608      	mov	r0, r1
	for (i = 0; i < num_handlers; i++) {
   18744:	f04f 0c00 	mov.w	ip, #0
   18748:	4563      	cmp	r3, ip
   1874a:	d945      	bls.n	187d8 <handle_event_common+0x9c>
		const struct event_handler *handler = &handlers[i];
   1874c:	eb02 01cc 	add.w	r1, r2, ip, lsl #3
		if (handler->event != event) {
   18750:	f812 e03c 	ldrb.w	lr, [r2, ip, lsl #3]
   18754:	45a6      	cmp	lr, r4
   18756:	d108      	bne.n	1876a <handle_event_common+0x2e>
		if (buf->len < handler->min_len) {
   18758:	8a05      	ldrh	r5, [r0, #16]
   1875a:	784b      	ldrb	r3, [r1, #1]
   1875c:	429d      	cmp	r5, r3
   1875e:	d307      	bcc.n	18770 <handle_event_common+0x34>
		handler->handler(buf);
   18760:	684b      	ldr	r3, [r1, #4]
   18762:	4798      	blx	r3
		return 0;
   18764:	2000      	movs	r0, #0
}
   18766:	b003      	add	sp, #12
   18768:	bd30      	pop	{r4, r5, pc}
	for (i = 0; i < num_handlers; i++) {
   1876a:	f10c 0c01 	add.w	ip, ip, #1
   1876e:	e7eb      	b.n	18748 <handle_event_common+0xc>
			LOG_ERR("Too small (%u bytes) event 0x%02x", buf->len, event);
   18770:	2008      	movs	r0, #8
   18772:	f7fd fb29 	bl	15dc8 <z_log_msg_alloc>
   18776:	2200      	movs	r2, #0
   18778:	f36f 0200 	bfc	r2, #0, #1
   1877c:	f36f 0241 	bfc	r2, #1, #1
   18780:	f36f 0282 	bfc	r2, #2, #1
   18784:	f36f 02c5 	bfc	r2, #3, #3
   18788:	2301      	movs	r3, #1
   1878a:	f363 1288 	bfi	r2, r3, #6, #3
   1878e:	2310      	movs	r3, #16
   18790:	f363 2252 	bfi	r2, r3, #9, #10
   18794:	f36f 42de 	bfc	r2, #19, #12
   18798:	f36f 72df 	bfc	r2, #31, #1
   1879c:	4684      	mov	ip, r0
   1879e:	b198      	cbz	r0, 187c8 <handle_event_common+0x8c>
   187a0:	18c3      	adds	r3, r0, r3
   187a2:	d003      	beq.n	187ac <handle_event_common+0x70>
   187a4:	490e      	ldr	r1, [pc, #56]	; (187e0 <handle_event_common+0xa4>)
   187a6:	6141      	str	r1, [r0, #20]
   187a8:	6185      	str	r5, [r0, #24]
   187aa:	61c4      	str	r4, [r0, #28]
   187ac:	b163      	cbz	r3, 187c8 <handle_event_common+0x8c>
   187ae:	2304      	movs	r3, #4
   187b0:	f88d 3004 	strb.w	r3, [sp, #4]
   187b4:	2300      	movs	r3, #0
   187b6:	f88d 3005 	strb.w	r3, [sp, #5]
   187ba:	f88d 3006 	strb.w	r3, [sp, #6]
   187be:	f88d 3007 	strb.w	r3, [sp, #7]
   187c2:	9801      	ldr	r0, [sp, #4]
   187c4:	f8cc 0010 	str.w	r0, [ip, #16]
   187c8:	2300      	movs	r3, #0
   187ca:	4906      	ldr	r1, [pc, #24]	; (187e4 <handle_event_common+0xa8>)
   187cc:	4660      	mov	r0, ip
   187ce:	f00f fb06 	bl	27dde <z_log_msg_finalize>
			return -EINVAL;
   187d2:	f06f 0015 	mvn.w	r0, #21
   187d6:	e7c6      	b.n	18766 <handle_event_common+0x2a>
	return -EOPNOTSUPP;
   187d8:	f06f 005e 	mvn.w	r0, #94	; 0x5e
   187dc:	e7c3      	b.n	18766 <handle_event_common+0x2a>
   187de:	bf00      	nop
   187e0:	0002f61c 	.word	0x0002f61c
   187e4:	0002de90 	.word	0x0002de90

000187e8 <hci_reset_complete>:
{
   187e8:	b508      	push	{r3, lr}
	uint8_t status = buf->data[0];
   187ea:	68c3      	ldr	r3, [r0, #12]
   187ec:	781b      	ldrb	r3, [r3, #0]
	if (status) {
   187ee:	b99b      	cbnz	r3, 18818 <hci_reset_complete+0x30>
		bt_scan_reset();
   187f0:	f002 fe58 	bl	1b4a4 <bt_scan_reset>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   187f4:	4b09      	ldr	r3, [pc, #36]	; (1881c <hci_reset_complete+0x34>)
   187f6:	f3bf 8f5b 	dmb	ish
   187fa:	681a      	ldr	r2, [r3, #0]
   187fc:	f3bf 8f5b 	dmb	ish
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   18800:	f002 0209 	and.w	r2, r2, #9
   18804:	f3bf 8f5b 	dmb	ish
   18808:	e853 1f00 	ldrex	r1, [r3]
   1880c:	e843 2000 	strex	r0, r2, [r3]
   18810:	2800      	cmp	r0, #0
   18812:	d1f9      	bne.n	18808 <hci_reset_complete+0x20>
   18814:	f3bf 8f5b 	dmb	ish
}
   18818:	bd08      	pop	{r3, pc}
   1881a:	bf00      	nop
   1881c:	2000043c 	.word	0x2000043c

00018820 <read_local_features_complete>:
{
   18820:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
   18822:	68c1      	ldr	r1, [r0, #12]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   18824:	2208      	movs	r2, #8
   18826:	3101      	adds	r1, #1
   18828:	4801      	ldr	r0, [pc, #4]	; (18830 <read_local_features_complete+0x10>)
   1882a:	f00f ff2a 	bl	28682 <memcpy>
}
   1882e:	bd08      	pop	{r3, pc}
   18830:	200003e0 	.word	0x200003e0

00018834 <read_supported_commands_complete>:
{
   18834:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
   18836:	68c1      	ldr	r1, [r0, #12]
	memcpy(bt_dev.supported_commands, rp->commands,
   18838:	2240      	movs	r2, #64	; 0x40
   1883a:	3101      	adds	r1, #1
   1883c:	4801      	ldr	r0, [pc, #4]	; (18844 <read_supported_commands_complete+0x10>)
   1883e:	f00f ff20 	bl	28682 <memcpy>
}
   18842:	bd08      	pop	{r3, pc}
   18844:	200003e8 	.word	0x200003e8

00018848 <read_le_features_complete>:
{
   18848:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
   1884a:	68c1      	ldr	r1, [r0, #12]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   1884c:	2208      	movs	r2, #8
   1884e:	3101      	adds	r1, #1
   18850:	4801      	ldr	r0, [pc, #4]	; (18858 <read_le_features_complete+0x10>)
   18852:	f00f ff16 	bl	28682 <memcpy>
}
   18856:	bd08      	pop	{r3, pc}
   18858:	20000440 	.word	0x20000440

0001885c <le_read_buffer_size_complete>:
{
   1885c:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
   1885e:	68c2      	ldr	r2, [r0, #12]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   18860:	f8b2 3001 	ldrh.w	r3, [r2, #1]
   18864:	b299      	uxth	r1, r3
   18866:	4806      	ldr	r0, [pc, #24]	; (18880 <le_read_buffer_size_complete+0x24>)
   18868:	f8a0 30fc 	strh.w	r3, [r0, #252]	; 0xfc
	if (!bt_dev.le.acl_mtu) {
   1886c:	b901      	cbnz	r1, 18870 <le_read_buffer_size_complete+0x14>
}
   1886e:	bd08      	pop	{r3, pc}
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   18870:	78d1      	ldrb	r1, [r2, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
   18872:	460a      	mov	r2, r1
   18874:	f500 7080 	add.w	r0, r0, #256	; 0x100
   18878:	f014 fb65 	bl	2cf46 <z_impl_k_sem_init>
   1887c:	e7f7      	b.n	1886e <le_read_buffer_size_complete+0x12>
   1887e:	bf00      	nop
   18880:	20000370 	.word	0x20000370

00018884 <read_buffer_size_complete>:
{
   18884:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
   18886:	68c2      	ldr	r2, [r0, #12]
	if (bt_dev.le.acl_mtu) {
   18888:	4b08      	ldr	r3, [pc, #32]	; (188ac <read_buffer_size_complete+0x28>)
   1888a:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
   1888e:	b103      	cbz	r3, 18892 <read_buffer_size_complete+0xe>
}
   18890:	bd08      	pop	{r3, pc}
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   18892:	f8b2 3001 	ldrh.w	r3, [r2, #1]
   18896:	4805      	ldr	r0, [pc, #20]	; (188ac <read_buffer_size_complete+0x28>)
   18898:	f8a0 30fc 	strh.w	r3, [r0, #252]	; 0xfc
	pkts = sys_le16_to_cpu(rp->acl_max_num);
   1889c:	8891      	ldrh	r1, [r2, #4]
   1889e:	460a      	mov	r2, r1
   188a0:	f500 7080 	add.w	r0, r0, #256	; 0x100
   188a4:	f014 fb4f 	bl	2cf46 <z_impl_k_sem_init>
   188a8:	e7f2      	b.n	18890 <read_buffer_size_complete+0xc>
   188aa:	bf00      	nop
   188ac:	20000370 	.word	0x20000370

000188b0 <find_pending_connect>:
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && role == BT_HCI_ROLE_CENTRAL) {
   188b0:	b108      	cbz	r0, 188b6 <find_pending_connect+0x6>
	return NULL;
   188b2:	2000      	movs	r0, #0
}
   188b4:	4770      	bx	lr
{
   188b6:	b508      	push	{r3, lr}
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   188b8:	2206      	movs	r2, #6
   188ba:	f003 fe61 	bl	1c580 <bt_conn_lookup_state_le>
		if (IS_ENABLED(CONFIG_BT_FILTER_ACCEPT_LIST) && !conn) {
   188be:	b100      	cbz	r0, 188c2 <find_pending_connect+0x12>
}
   188c0:	bd08      	pop	{r3, pc}
			conn = bt_conn_lookup_state_le(BT_ID_DEFAULT,
   188c2:	2203      	movs	r2, #3
   188c4:	4902      	ldr	r1, [pc, #8]	; (188d0 <find_pending_connect+0x20>)
   188c6:	2000      	movs	r0, #0
   188c8:	f003 fe5a 	bl	1c580 <bt_conn_lookup_state_le>
		return conn;
   188cc:	e7f8      	b.n	188c0 <find_pending_connect+0x10>
   188ce:	bf00      	nop
   188d0:	0002f540 	.word	0x0002f540

000188d4 <hci_disconn_complete>:
{
   188d4:	b570      	push	{r4, r5, r6, lr}
   188d6:	b082      	sub	sp, #8
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   188d8:	68c4      	ldr	r4, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   188da:	f8b4 6001 	ldrh.w	r6, [r4, #1]
	if (evt->status) {
   188de:	7823      	ldrb	r3, [r4, #0]
   188e0:	b10b      	cbz	r3, 188e6 <hci_disconn_complete+0x12>
}
   188e2:	b002      	add	sp, #8
   188e4:	bd70      	pop	{r4, r5, r6, pc}
	conn = bt_conn_lookup_handle(handle);
   188e6:	4630      	mov	r0, r6
   188e8:	f003 fbb0 	bl	1c04c <bt_conn_lookup_handle>
	if (!conn) {
   188ec:	4605      	mov	r5, r0
   188ee:	b158      	cbz	r0, 18908 <hci_disconn_complete+0x34>
	conn->err = evt->reason;
   188f0:	78e3      	ldrb	r3, [r4, #3]
   188f2:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   188f4:	2100      	movs	r1, #0
   188f6:	f003 fbb3 	bl	1c060 <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
   188fa:	78ab      	ldrb	r3, [r5, #2]
   188fc:	2b01      	cmp	r3, #1
   188fe:	d034      	beq.n	1896a <hci_disconn_complete+0x96>
		bt_conn_unref(conn);
   18900:	4628      	mov	r0, r5
   18902:	f010 fb00 	bl	28f06 <bt_conn_unref>
		return;
   18906:	e7ec      	b.n	188e2 <hci_disconn_complete+0xe>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   18908:	2008      	movs	r0, #8
   1890a:	f7fd fa5d 	bl	15dc8 <z_log_msg_alloc>
   1890e:	2200      	movs	r2, #0
   18910:	f36f 0200 	bfc	r2, #0, #1
   18914:	f36f 0241 	bfc	r2, #1, #1
   18918:	f36f 0282 	bfc	r2, #2, #1
   1891c:	f36f 02c5 	bfc	r2, #3, #3
   18920:	2301      	movs	r3, #1
   18922:	f363 1288 	bfi	r2, r3, #6, #3
   18926:	230c      	movs	r3, #12
   18928:	f363 2252 	bfi	r2, r3, #9, #10
   1892c:	f36f 42de 	bfc	r2, #19, #12
   18930:	f36f 72df 	bfc	r2, #31, #1
   18934:	4604      	mov	r4, r0
   18936:	b190      	cbz	r0, 1895e <hci_disconn_complete+0x8a>
   18938:	f110 0310 	adds.w	r3, r0, #16
   1893c:	d002      	beq.n	18944 <hci_disconn_complete+0x70>
   1893e:	490d      	ldr	r1, [pc, #52]	; (18974 <hci_disconn_complete+0xa0>)
   18940:	6141      	str	r1, [r0, #20]
   18942:	6186      	str	r6, [r0, #24]
   18944:	b15b      	cbz	r3, 1895e <hci_disconn_complete+0x8a>
   18946:	2303      	movs	r3, #3
   18948:	f88d 3004 	strb.w	r3, [sp, #4]
   1894c:	2300      	movs	r3, #0
   1894e:	f88d 3005 	strb.w	r3, [sp, #5]
   18952:	f88d 3006 	strb.w	r3, [sp, #6]
   18956:	f88d 3007 	strb.w	r3, [sp, #7]
   1895a:	9801      	ldr	r0, [sp, #4]
   1895c:	6120      	str	r0, [r4, #16]
   1895e:	2300      	movs	r3, #0
   18960:	4905      	ldr	r1, [pc, #20]	; (18978 <hci_disconn_complete+0xa4>)
   18962:	4620      	mov	r0, r4
   18964:	f00f fa3b 	bl	27dde <z_log_msg_finalize>
		return;
   18968:	e7bb      	b.n	188e2 <hci_disconn_complete+0xe>
	bt_conn_unref(conn);
   1896a:	4628      	mov	r0, r5
   1896c:	f010 facb 	bl	28f06 <bt_conn_unref>
   18970:	e7b7      	b.n	188e2 <hci_disconn_complete+0xe>
   18972:	bf00      	nop
   18974:	0002f640 	.word	0x0002f640
   18978:	0002de90 	.word	0x0002de90

0001897c <le_phy_update_complete>:
{
   1897c:	b510      	push	{r4, lr}
   1897e:	b082      	sub	sp, #8
	struct bt_hci_evt_le_phy_update_complete *evt = (void *)buf->data;
   18980:	68c3      	ldr	r3, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   18982:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   18986:	4620      	mov	r0, r4
   18988:	f003 fb60 	bl	1c04c <bt_conn_lookup_handle>
	if (!conn) {
   1898c:	b118      	cbz	r0, 18996 <le_phy_update_complete+0x1a>
	bt_conn_unref(conn);
   1898e:	f010 faba 	bl	28f06 <bt_conn_unref>
}
   18992:	b002      	add	sp, #8
   18994:	bd10      	pop	{r4, pc}
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   18996:	2008      	movs	r0, #8
   18998:	f7fd fa16 	bl	15dc8 <z_log_msg_alloc>
   1899c:	2200      	movs	r2, #0
   1899e:	f36f 0200 	bfc	r2, #0, #1
   189a2:	f36f 0241 	bfc	r2, #1, #1
   189a6:	f36f 0282 	bfc	r2, #2, #1
   189aa:	f36f 02c5 	bfc	r2, #3, #3
   189ae:	2301      	movs	r3, #1
   189b0:	f363 1288 	bfi	r2, r3, #6, #3
   189b4:	230c      	movs	r3, #12
   189b6:	f363 2252 	bfi	r2, r3, #9, #10
   189ba:	f36f 42de 	bfc	r2, #19, #12
   189be:	f36f 72df 	bfc	r2, #31, #1
   189c2:	4684      	mov	ip, r0
   189c4:	b198      	cbz	r0, 189ee <le_phy_update_complete+0x72>
   189c6:	f110 0310 	adds.w	r3, r0, #16
   189ca:	d002      	beq.n	189d2 <le_phy_update_complete+0x56>
   189cc:	490b      	ldr	r1, [pc, #44]	; (189fc <le_phy_update_complete+0x80>)
   189ce:	6141      	str	r1, [r0, #20]
   189d0:	6184      	str	r4, [r0, #24]
   189d2:	b163      	cbz	r3, 189ee <le_phy_update_complete+0x72>
   189d4:	2303      	movs	r3, #3
   189d6:	f88d 3004 	strb.w	r3, [sp, #4]
   189da:	2300      	movs	r3, #0
   189dc:	f88d 3005 	strb.w	r3, [sp, #5]
   189e0:	f88d 3006 	strb.w	r3, [sp, #6]
   189e4:	f88d 3007 	strb.w	r3, [sp, #7]
   189e8:	9801      	ldr	r0, [sp, #4]
   189ea:	f8cc 0010 	str.w	r0, [ip, #16]
   189ee:	2300      	movs	r3, #0
   189f0:	4903      	ldr	r1, [pc, #12]	; (18a00 <le_phy_update_complete+0x84>)
   189f2:	4660      	mov	r0, ip
   189f4:	f00f f9f3 	bl	27dde <z_log_msg_finalize>
		return;
   189f8:	e7cb      	b.n	18992 <le_phy_update_complete+0x16>
   189fa:	bf00      	nop
   189fc:	0002f668 	.word	0x0002f668
   18a00:	0002de90 	.word	0x0002de90

00018a04 <le_data_len_change>:
{
   18a04:	b510      	push	{r4, lr}
   18a06:	b082      	sub	sp, #8
	struct bt_hci_evt_le_data_len_change *evt = (void *)buf->data;
   18a08:	68c3      	ldr	r3, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   18a0a:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   18a0c:	4620      	mov	r0, r4
   18a0e:	f003 fb1d 	bl	1c04c <bt_conn_lookup_handle>
	if (!conn) {
   18a12:	b118      	cbz	r0, 18a1c <le_data_len_change+0x18>
	bt_conn_unref(conn);
   18a14:	f010 fa77 	bl	28f06 <bt_conn_unref>
}
   18a18:	b002      	add	sp, #8
   18a1a:	bd10      	pop	{r4, pc}
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   18a1c:	2008      	movs	r0, #8
   18a1e:	f7fd f9d3 	bl	15dc8 <z_log_msg_alloc>
   18a22:	2200      	movs	r2, #0
   18a24:	f36f 0200 	bfc	r2, #0, #1
   18a28:	f36f 0241 	bfc	r2, #1, #1
   18a2c:	f36f 0282 	bfc	r2, #2, #1
   18a30:	f36f 02c5 	bfc	r2, #3, #3
   18a34:	2301      	movs	r3, #1
   18a36:	f363 1288 	bfi	r2, r3, #6, #3
   18a3a:	230c      	movs	r3, #12
   18a3c:	f363 2252 	bfi	r2, r3, #9, #10
   18a40:	f36f 42de 	bfc	r2, #19, #12
   18a44:	f36f 72df 	bfc	r2, #31, #1
   18a48:	4684      	mov	ip, r0
   18a4a:	b198      	cbz	r0, 18a74 <le_data_len_change+0x70>
   18a4c:	f110 0310 	adds.w	r3, r0, #16
   18a50:	d002      	beq.n	18a58 <le_data_len_change+0x54>
   18a52:	490b      	ldr	r1, [pc, #44]	; (18a80 <le_data_len_change+0x7c>)
   18a54:	6141      	str	r1, [r0, #20]
   18a56:	6184      	str	r4, [r0, #24]
   18a58:	b163      	cbz	r3, 18a74 <le_data_len_change+0x70>
   18a5a:	2303      	movs	r3, #3
   18a5c:	f88d 3004 	strb.w	r3, [sp, #4]
   18a60:	2300      	movs	r3, #0
   18a62:	f88d 3005 	strb.w	r3, [sp, #5]
   18a66:	f88d 3006 	strb.w	r3, [sp, #6]
   18a6a:	f88d 3007 	strb.w	r3, [sp, #7]
   18a6e:	9801      	ldr	r0, [sp, #4]
   18a70:	f8cc 0010 	str.w	r0, [ip, #16]
   18a74:	2300      	movs	r3, #0
   18a76:	4903      	ldr	r1, [pc, #12]	; (18a84 <le_data_len_change+0x80>)
   18a78:	4660      	mov	r0, ip
   18a7a:	f00f f9b0 	bl	27dde <z_log_msg_finalize>
		return;
   18a7e:	e7cb      	b.n	18a18 <le_data_len_change+0x14>
   18a80:	0002f668 	.word	0x0002f668
   18a84:	0002de90 	.word	0x0002de90

00018a88 <hci_num_completed_packets>:
{
   18a88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18a8c:	b082      	sub	sp, #8
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   18a8e:	f8d0 800c 	ldr.w	r8, [r0, #12]
	for (i = 0; i < evt->num_handles; i++) {
   18a92:	2600      	movs	r6, #0
   18a94:	e081      	b.n	18b9a <hci_num_completed_packets+0x112>
				conn->pending_no_cb--;
   18a96:	3b01      	subs	r3, #1
   18a98:	61e3      	str	r3, [r4, #28]
   18a9a:	f382 8811 	msr	BASEPRI, r2
   18a9e:	f3bf 8f6f 	isb	sy
				k_sem_give(bt_conn_get_pkts(conn));
   18aa2:	4620      	mov	r0, r4
   18aa4:	f002 ffa6 	bl	1b9f4 <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   18aa8:	f00c fb92 	bl	251d0 <z_impl_k_sem_give>
				continue;
   18aac:	e025      	b.n	18afa <hci_num_completed_packets+0x72>
   18aae:	f382 8811 	msr	BASEPRI, r2
   18ab2:	f3bf 8f6f 	isb	sy
			if (!node) {
   18ab6:	2b00      	cmp	r3, #0
   18ab8:	d03c      	beq.n	18b34 <hci_num_completed_packets+0xac>
	__asm__ volatile(
   18aba:	f04f 0140 	mov.w	r1, #64	; 0x40
   18abe:	f3ef 8211 	mrs	r2, BASEPRI
   18ac2:	f381 8812 	msr	BASEPRI_MAX, r1
   18ac6:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   18aca:	68d9      	ldr	r1, [r3, #12]
   18acc:	61e1      	str	r1, [r4, #28]
			tx->pending_no_cb = 0U;
   18ace:	2100      	movs	r1, #0
   18ad0:	60d9      	str	r1, [r3, #12]
	parent->next = child;
   18ad2:	6019      	str	r1, [r3, #0]
	return list->tail;
   18ad4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   18ad6:	2900      	cmp	r1, #0
   18ad8:	f000 80a0 	beq.w	18c1c <hci_num_completed_packets+0x194>
	parent->next = child;
   18adc:	600b      	str	r3, [r1, #0]
	list->tail = node;
   18ade:	6263      	str	r3, [r4, #36]	; 0x24
	__asm__ volatile(
   18ae0:	f382 8811 	msr	BASEPRI, r2
   18ae4:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   18ae8:	f104 0028 	add.w	r0, r4, #40	; 0x28
   18aec:	f00c fcf2 	bl	254d4 <k_work_submit>
			k_sem_give(bt_conn_get_pkts(conn));
   18af0:	4620      	mov	r0, r4
   18af2:	f002 ff7f 	bl	1b9f4 <bt_conn_get_pkts>
   18af6:	f00c fb6b 	bl	251d0 <z_impl_k_sem_give>
{
   18afa:	46aa      	mov	sl, r5
		while (count--) {
   18afc:	f10a 35ff 	add.w	r5, sl, #4294967295
   18b00:	b2ad      	uxth	r5, r5
   18b02:	f1ba 0f00 	cmp.w	sl, #0
   18b06:	d044      	beq.n	18b92 <hci_num_completed_packets+0x10a>
	__asm__ volatile(
   18b08:	f04f 0240 	mov.w	r2, #64	; 0x40
   18b0c:	f3ef 8311 	mrs	r3, BASEPRI
   18b10:	f382 8812 	msr	BASEPRI_MAX, r2
   18b14:	f3bf 8f6f 	isb	sy
   18b18:	461a      	mov	r2, r3
			if (conn->pending_no_cb) {
   18b1a:	69e3      	ldr	r3, [r4, #28]
   18b1c:	2b00      	cmp	r3, #0
   18b1e:	d1ba      	bne.n	18a96 <hci_num_completed_packets+0xe>
	return list->head;
   18b20:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   18b22:	2b00      	cmp	r3, #0
   18b24:	d0c3      	beq.n	18aae <hci_num_completed_packets+0x26>
	return node->next;
   18b26:	6819      	ldr	r1, [r3, #0]
	list->head = node;
   18b28:	6161      	str	r1, [r4, #20]
	return list->tail;
   18b2a:	69a0      	ldr	r0, [r4, #24]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   18b2c:	4298      	cmp	r0, r3
   18b2e:	d1be      	bne.n	18aae <hci_num_completed_packets+0x26>
	list->tail = node;
   18b30:	61a1      	str	r1, [r4, #24]
}
   18b32:	e7bc      	b.n	18aae <hci_num_completed_packets+0x26>
				LOG_ERR("packets count mismatch");
   18b34:	2006      	movs	r0, #6
   18b36:	f7fd f947 	bl	15dc8 <z_log_msg_alloc>
   18b3a:	f36f 0700 	bfc	r7, #0, #1
   18b3e:	f36f 0741 	bfc	r7, #1, #1
   18b42:	f36f 0782 	bfc	r7, #2, #1
   18b46:	f36f 07c5 	bfc	r7, #3, #3
   18b4a:	2301      	movs	r3, #1
   18b4c:	f363 1788 	bfi	r7, r3, #6, #3
   18b50:	2308      	movs	r3, #8
   18b52:	f363 2752 	bfi	r7, r3, #9, #10
   18b56:	f36f 47de 	bfc	r7, #19, #12
   18b5a:	f36f 77df 	bfc	r7, #31, #1
   18b5e:	4605      	mov	r5, r0
   18b60:	b188      	cbz	r0, 18b86 <hci_num_completed_packets+0xfe>
   18b62:	f110 0310 	adds.w	r3, r0, #16
   18b66:	d001      	beq.n	18b6c <hci_num_completed_packets+0xe4>
   18b68:	4a2f      	ldr	r2, [pc, #188]	; (18c28 <hci_num_completed_packets+0x1a0>)
   18b6a:	6142      	str	r2, [r0, #20]
   18b6c:	b15b      	cbz	r3, 18b86 <hci_num_completed_packets+0xfe>
   18b6e:	2302      	movs	r3, #2
   18b70:	f88d 3004 	strb.w	r3, [sp, #4]
   18b74:	2300      	movs	r3, #0
   18b76:	f88d 3005 	strb.w	r3, [sp, #5]
   18b7a:	f88d 3006 	strb.w	r3, [sp, #6]
   18b7e:	f88d 3007 	strb.w	r3, [sp, #7]
   18b82:	9801      	ldr	r0, [sp, #4]
   18b84:	6128      	str	r0, [r5, #16]
   18b86:	2300      	movs	r3, #0
   18b88:	463a      	mov	r2, r7
   18b8a:	4928      	ldr	r1, [pc, #160]	; (18c2c <hci_num_completed_packets+0x1a4>)
   18b8c:	4628      	mov	r0, r5
   18b8e:	f00f f926 	bl	27dde <z_log_msg_finalize>
		bt_conn_unref(conn);
   18b92:	4620      	mov	r0, r4
   18b94:	f010 f9b7 	bl	28f06 <bt_conn_unref>
	for (i = 0; i < evt->num_handles; i++) {
   18b98:	3601      	adds	r6, #1
   18b9a:	f898 3000 	ldrb.w	r3, [r8]
   18b9e:	429e      	cmp	r6, r3
   18ba0:	da3f      	bge.n	18c22 <hci_num_completed_packets+0x19a>
		handle = sys_le16_to_cpu(evt->h[i].handle);
   18ba2:	eb08 0386 	add.w	r3, r8, r6, lsl #2
   18ba6:	f8b3 5001 	ldrh.w	r5, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   18baa:	f8b3 a003 	ldrh.w	sl, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   18bae:	4628      	mov	r0, r5
   18bb0:	f003 fa4c 	bl	1c04c <bt_conn_lookup_handle>
		if (!conn) {
   18bb4:	4604      	mov	r4, r0
   18bb6:	2800      	cmp	r0, #0
   18bb8:	d1a0      	bne.n	18afc <hci_num_completed_packets+0x74>
			LOG_ERR("No connection for handle %u", handle);
   18bba:	2008      	movs	r0, #8
   18bbc:	f7fd f904 	bl	15dc8 <z_log_msg_alloc>
   18bc0:	f36f 0900 	bfc	r9, #0, #1
   18bc4:	f36f 0941 	bfc	r9, #1, #1
   18bc8:	f36f 0982 	bfc	r9, #2, #1
   18bcc:	f36f 09c5 	bfc	r9, #3, #3
   18bd0:	2301      	movs	r3, #1
   18bd2:	f363 1988 	bfi	r9, r3, #6, #3
   18bd6:	230c      	movs	r3, #12
   18bd8:	f363 2952 	bfi	r9, r3, #9, #10
   18bdc:	f36f 49de 	bfc	r9, #19, #12
   18be0:	f36f 79df 	bfc	r9, #31, #1
   18be4:	4604      	mov	r4, r0
   18be6:	b190      	cbz	r0, 18c0e <hci_num_completed_packets+0x186>
   18be8:	f110 0310 	adds.w	r3, r0, #16
   18bec:	d002      	beq.n	18bf4 <hci_num_completed_packets+0x16c>
   18bee:	4a10      	ldr	r2, [pc, #64]	; (18c30 <hci_num_completed_packets+0x1a8>)
   18bf0:	6142      	str	r2, [r0, #20]
   18bf2:	6185      	str	r5, [r0, #24]
   18bf4:	b15b      	cbz	r3, 18c0e <hci_num_completed_packets+0x186>
   18bf6:	2303      	movs	r3, #3
   18bf8:	f88d 3004 	strb.w	r3, [sp, #4]
   18bfc:	2300      	movs	r3, #0
   18bfe:	f88d 3005 	strb.w	r3, [sp, #5]
   18c02:	f88d 3006 	strb.w	r3, [sp, #6]
   18c06:	f88d 3007 	strb.w	r3, [sp, #7]
   18c0a:	9801      	ldr	r0, [sp, #4]
   18c0c:	6120      	str	r0, [r4, #16]
   18c0e:	2300      	movs	r3, #0
   18c10:	464a      	mov	r2, r9
   18c12:	4906      	ldr	r1, [pc, #24]	; (18c2c <hci_num_completed_packets+0x1a4>)
   18c14:	4620      	mov	r0, r4
   18c16:	f00f f8e2 	bl	27dde <z_log_msg_finalize>
			continue;
   18c1a:	e7bd      	b.n	18b98 <hci_num_completed_packets+0x110>
	list->tail = node;
   18c1c:	6263      	str	r3, [r4, #36]	; 0x24
	list->head = node;
   18c1e:	6223      	str	r3, [r4, #32]
}
   18c20:	e75e      	b.n	18ae0 <hci_num_completed_packets+0x58>
}
   18c22:	b002      	add	sp, #8
   18c24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18c28:	0002f6a8 	.word	0x0002f6a8
   18c2c:	0002de90 	.word	0x0002de90
   18c30:	0002f68c 	.word	0x0002f68c

00018c34 <hci_cmd_done>:
{
   18c34:	b5f0      	push	{r4, r5, r6, r7, lr}
   18c36:	b083      	sub	sp, #12
   18c38:	4605      	mov	r5, r0
   18c3a:	460e      	mov	r6, r1
   18c3c:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   18c3e:	7a90      	ldrb	r0, [r2, #10]
   18c40:	f007 fa00 	bl	20044 <net_buf_pool_get>
   18c44:	4b62      	ldr	r3, [pc, #392]	; (18dd0 <hci_cmd_done+0x19c>)
   18c46:	4283      	cmp	r3, r0
   18c48:	d03a      	beq.n	18cc0 <hci_cmd_done+0x8c>
		LOG_WRN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p", opcode,
   18c4a:	7aa6      	ldrb	r6, [r4, #10]
   18c4c:	4630      	mov	r0, r6
   18c4e:	f007 f9f9 	bl	20044 <net_buf_pool_get>
   18c52:	4607      	mov	r7, r0
   18c54:	200a      	movs	r0, #10
   18c56:	f7fd f8b7 	bl	15dc8 <z_log_msg_alloc>
   18c5a:	2200      	movs	r2, #0
   18c5c:	f36f 0200 	bfc	r2, #0, #1
   18c60:	f36f 0241 	bfc	r2, #1, #1
   18c64:	f36f 0282 	bfc	r2, #2, #1
   18c68:	f36f 02c5 	bfc	r2, #3, #3
   18c6c:	2302      	movs	r3, #2
   18c6e:	f363 1288 	bfi	r2, r3, #6, #3
   18c72:	2318      	movs	r3, #24
   18c74:	f363 2252 	bfi	r2, r3, #9, #10
   18c78:	f36f 42de 	bfc	r2, #19, #12
   18c7c:	f36f 72df 	bfc	r2, #31, #1
   18c80:	4604      	mov	r4, r0
   18c82:	b1b0      	cbz	r0, 18cb2 <hci_cmd_done+0x7e>
   18c84:	f110 0310 	adds.w	r3, r0, #16
   18c88:	d006      	beq.n	18c98 <hci_cmd_done+0x64>
   18c8a:	4952      	ldr	r1, [pc, #328]	; (18dd4 <hci_cmd_done+0x1a0>)
   18c8c:	6141      	str	r1, [r0, #20]
   18c8e:	6185      	str	r5, [r0, #24]
   18c90:	61c6      	str	r6, [r0, #28]
   18c92:	6207      	str	r7, [r0, #32]
   18c94:	494e      	ldr	r1, [pc, #312]	; (18dd0 <hci_cmd_done+0x19c>)
   18c96:	6241      	str	r1, [r0, #36]	; 0x24
   18c98:	b15b      	cbz	r3, 18cb2 <hci_cmd_done+0x7e>
   18c9a:	2306      	movs	r3, #6
   18c9c:	f88d 3004 	strb.w	r3, [sp, #4]
   18ca0:	2300      	movs	r3, #0
   18ca2:	f88d 3005 	strb.w	r3, [sp, #5]
   18ca6:	f88d 3006 	strb.w	r3, [sp, #6]
   18caa:	f88d 3007 	strb.w	r3, [sp, #7]
   18cae:	9801      	ldr	r0, [sp, #4]
   18cb0:	6120      	str	r0, [r4, #16]
   18cb2:	2300      	movs	r3, #0
   18cb4:	4948      	ldr	r1, [pc, #288]	; (18dd8 <hci_cmd_done+0x1a4>)
   18cb6:	4620      	mov	r0, r4
   18cb8:	f00f f891 	bl	27dde <z_log_msg_finalize>
}
   18cbc:	b003      	add	sp, #12
   18cbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (cmd(buf)->opcode != opcode) {
   18cc0:	4620      	mov	r0, r4
   18cc2:	f012 f8b4 	bl	2ae2e <net_buf_id>
   18cc6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   18cca:	4b44      	ldr	r3, [pc, #272]	; (18ddc <hci_cmd_done+0x1a8>)
   18ccc:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   18cd0:	885b      	ldrh	r3, [r3, #2]
   18cd2:	429d      	cmp	r5, r3
   18cd4:	d133      	bne.n	18d3e <hci_cmd_done+0x10a>
	if (bt_dev.sent_cmd) {
   18cd6:	4b42      	ldr	r3, [pc, #264]	; (18de0 <hci_cmd_done+0x1ac>)
   18cd8:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
   18cdc:	b128      	cbz	r0, 18cea <hci_cmd_done+0xb6>
		net_buf_unref(bt_dev.sent_cmd);
   18cde:	f012 f990 	bl	2b002 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   18ce2:	4b3f      	ldr	r3, [pc, #252]	; (18de0 <hci_cmd_done+0x1ac>)
   18ce4:	2200      	movs	r2, #0
   18ce6:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	if (cmd(buf)->state && !status) {
   18cea:	4620      	mov	r0, r4
   18cec:	f012 f89f 	bl	2ae2e <net_buf_id>
   18cf0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   18cf4:	4b39      	ldr	r3, [pc, #228]	; (18ddc <hci_cmd_done+0x1a8>)
   18cf6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   18cfa:	685b      	ldr	r3, [r3, #4]
   18cfc:	b10b      	cbz	r3, 18d02 <hci_cmd_done+0xce>
   18cfe:	2e00      	cmp	r6, #0
   18d00:	d057      	beq.n	18db2 <hci_cmd_done+0x17e>
	if (cmd(buf)->sync) {
   18d02:	4620      	mov	r0, r4
   18d04:	f012 f893 	bl	2ae2e <net_buf_id>
   18d08:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   18d0c:	4b33      	ldr	r3, [pc, #204]	; (18ddc <hci_cmd_done+0x1a8>)
   18d0e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   18d12:	689b      	ldr	r3, [r3, #8]
   18d14:	2b00      	cmp	r3, #0
   18d16:	d0d1      	beq.n	18cbc <hci_cmd_done+0x88>
		cmd(buf)->status = status;
   18d18:	4620      	mov	r0, r4
   18d1a:	f012 f888 	bl	2ae2e <net_buf_id>
   18d1e:	4d2f      	ldr	r5, [pc, #188]	; (18ddc <hci_cmd_done+0x1a8>)
   18d20:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   18d24:	f805 6020 	strb.w	r6, [r5, r0, lsl #2]
		k_sem_give(cmd(buf)->sync);
   18d28:	4620      	mov	r0, r4
   18d2a:	f012 f880 	bl	2ae2e <net_buf_id>
   18d2e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   18d32:	eb05 0580 	add.w	r5, r5, r0, lsl #2
   18d36:	68a8      	ldr	r0, [r5, #8]
   18d38:	f00c fa4a 	bl	251d0 <z_impl_k_sem_give>
}
   18d3c:	e7be      	b.n	18cbc <hci_cmd_done+0x88>
		LOG_WRN("OpCode 0x%04x completed instead of expected 0x%04x", opcode,
   18d3e:	4620      	mov	r0, r4
   18d40:	f012 f875 	bl	2ae2e <net_buf_id>
   18d44:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   18d48:	4b24      	ldr	r3, [pc, #144]	; (18ddc <hci_cmd_done+0x1a8>)
   18d4a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   18d4e:	885e      	ldrh	r6, [r3, #2]
   18d50:	2008      	movs	r0, #8
   18d52:	f7fd f839 	bl	15dc8 <z_log_msg_alloc>
   18d56:	2200      	movs	r2, #0
   18d58:	f36f 0200 	bfc	r2, #0, #1
   18d5c:	f36f 0241 	bfc	r2, #1, #1
   18d60:	f36f 0282 	bfc	r2, #2, #1
   18d64:	f36f 02c5 	bfc	r2, #3, #3
   18d68:	2302      	movs	r3, #2
   18d6a:	f363 1288 	bfi	r2, r3, #6, #3
   18d6e:	2310      	movs	r3, #16
   18d70:	f363 2252 	bfi	r2, r3, #9, #10
   18d74:	f36f 42de 	bfc	r2, #19, #12
   18d78:	f36f 72df 	bfc	r2, #31, #1
   18d7c:	4604      	mov	r4, r0
   18d7e:	b190      	cbz	r0, 18da6 <hci_cmd_done+0x172>
   18d80:	18c3      	adds	r3, r0, r3
   18d82:	d003      	beq.n	18d8c <hci_cmd_done+0x158>
   18d84:	4917      	ldr	r1, [pc, #92]	; (18de4 <hci_cmd_done+0x1b0>)
   18d86:	6141      	str	r1, [r0, #20]
   18d88:	6185      	str	r5, [r0, #24]
   18d8a:	61c6      	str	r6, [r0, #28]
   18d8c:	b15b      	cbz	r3, 18da6 <hci_cmd_done+0x172>
   18d8e:	2304      	movs	r3, #4
   18d90:	f88d 3004 	strb.w	r3, [sp, #4]
   18d94:	2300      	movs	r3, #0
   18d96:	f88d 3005 	strb.w	r3, [sp, #5]
   18d9a:	f88d 3006 	strb.w	r3, [sp, #6]
   18d9e:	f88d 3007 	strb.w	r3, [sp, #7]
   18da2:	9801      	ldr	r0, [sp, #4]
   18da4:	6120      	str	r0, [r4, #16]
   18da6:	2300      	movs	r3, #0
   18da8:	490b      	ldr	r1, [pc, #44]	; (18dd8 <hci_cmd_done+0x1a4>)
   18daa:	4620      	mov	r0, r4
   18dac:	f00f f817 	bl	27dde <z_log_msg_finalize>
		return;
   18db0:	e784      	b.n	18cbc <hci_cmd_done+0x88>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   18db2:	4620      	mov	r0, r4
   18db4:	f012 f83b 	bl	2ae2e <net_buf_id>
   18db8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   18dbc:	4b07      	ldr	r3, [pc, #28]	; (18ddc <hci_cmd_done+0x1a8>)
   18dbe:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   18dc2:	685b      	ldr	r3, [r3, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   18dc4:	7a1a      	ldrb	r2, [r3, #8]
   18dc6:	6859      	ldr	r1, [r3, #4]
   18dc8:	6818      	ldr	r0, [r3, #0]
   18dca:	f00f fd98 	bl	288fe <atomic_set_bit_to>
   18dce:	e798      	b.n	18d02 <hci_cmd_done+0xce>
   18dd0:	20000cc8 	.word	0x20000cc8
   18dd4:	0002f6c0 	.word	0x0002f6c0
   18dd8:	0002de90 	.word	0x0002de90
   18ddc:	20007c58 	.word	0x20007c58
   18de0:	20000370 	.word	0x20000370
   18de4:	0002f6f8 	.word	0x0002f6f8

00018de8 <le_remote_feat_complete>:
{
   18de8:	b570      	push	{r4, r5, r6, lr}
   18dea:	b082      	sub	sp, #8
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   18dec:	68c4      	ldr	r4, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   18dee:	f8b4 6001 	ldrh.w	r6, [r4, #1]
	conn = bt_conn_lookup_handle(handle);
   18df2:	4630      	mov	r0, r6
   18df4:	f003 f92a 	bl	1c04c <bt_conn_lookup_handle>
	if (!conn) {
   18df8:	b1a8      	cbz	r0, 18e26 <le_remote_feat_complete+0x3e>
   18dfa:	4605      	mov	r5, r0
	if (!evt->status) {
   18dfc:	7823      	ldrb	r3, [r4, #0]
   18dfe:	2b00      	cmp	r3, #0
   18e00:	d042      	beq.n	18e88 <le_remote_feat_complete+0xa0>
	atomic_set_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH);
   18e02:	1d2b      	adds	r3, r5, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18e04:	f3bf 8f5b 	dmb	ish
   18e08:	e853 1f00 	ldrex	r1, [r3]
   18e0c:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   18e10:	e843 1200 	strex	r2, r1, [r3]
   18e14:	2a00      	cmp	r2, #0
   18e16:	d1f7      	bne.n	18e08 <le_remote_feat_complete+0x20>
   18e18:	f3bf 8f5b 	dmb	ish
	bt_conn_unref(conn);
   18e1c:	4628      	mov	r0, r5
   18e1e:	f010 f872 	bl	28f06 <bt_conn_unref>
}
   18e22:	b002      	add	sp, #8
   18e24:	bd70      	pop	{r4, r5, r6, pc}
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   18e26:	2008      	movs	r0, #8
   18e28:	f7fc ffce 	bl	15dc8 <z_log_msg_alloc>
   18e2c:	2200      	movs	r2, #0
   18e2e:	f36f 0200 	bfc	r2, #0, #1
   18e32:	f36f 0241 	bfc	r2, #1, #1
   18e36:	f36f 0282 	bfc	r2, #2, #1
   18e3a:	f36f 02c5 	bfc	r2, #3, #3
   18e3e:	2301      	movs	r3, #1
   18e40:	f363 1288 	bfi	r2, r3, #6, #3
   18e44:	230c      	movs	r3, #12
   18e46:	f363 2252 	bfi	r2, r3, #9, #10
   18e4a:	f36f 42de 	bfc	r2, #19, #12
   18e4e:	f36f 72df 	bfc	r2, #31, #1
   18e52:	4604      	mov	r4, r0
   18e54:	b190      	cbz	r0, 18e7c <le_remote_feat_complete+0x94>
   18e56:	f110 0310 	adds.w	r3, r0, #16
   18e5a:	d002      	beq.n	18e62 <le_remote_feat_complete+0x7a>
   18e5c:	490d      	ldr	r1, [pc, #52]	; (18e94 <le_remote_feat_complete+0xac>)
   18e5e:	6141      	str	r1, [r0, #20]
   18e60:	6186      	str	r6, [r0, #24]
   18e62:	b15b      	cbz	r3, 18e7c <le_remote_feat_complete+0x94>
   18e64:	2303      	movs	r3, #3
   18e66:	f88d 3004 	strb.w	r3, [sp, #4]
   18e6a:	2300      	movs	r3, #0
   18e6c:	f88d 3005 	strb.w	r3, [sp, #5]
   18e70:	f88d 3006 	strb.w	r3, [sp, #6]
   18e74:	f88d 3007 	strb.w	r3, [sp, #7]
   18e78:	9801      	ldr	r0, [sp, #4]
   18e7a:	6120      	str	r0, [r4, #16]
   18e7c:	2300      	movs	r3, #0
   18e7e:	4906      	ldr	r1, [pc, #24]	; (18e98 <le_remote_feat_complete+0xb0>)
   18e80:	4620      	mov	r0, r4
   18e82:	f00e ffac 	bl	27dde <z_log_msg_finalize>
		return;
   18e86:	e7cc      	b.n	18e22 <le_remote_feat_complete+0x3a>
		memcpy(conn->le.features, evt->features,
   18e88:	2208      	movs	r2, #8
   18e8a:	1ce1      	adds	r1, r4, #3
   18e8c:	30ac      	adds	r0, #172	; 0xac
   18e8e:	f00f fbf8 	bl	28682 <memcpy>
   18e92:	e7b6      	b.n	18e02 <le_remote_feat_complete+0x1a>
   18e94:	0002f668 	.word	0x0002f668
   18e98:	0002de90 	.word	0x0002de90

00018e9c <hci_cmd_status>:
{
   18e9c:	b538      	push	{r3, r4, r5, lr}
   18e9e:	4604      	mov	r4, r0
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   18ea0:	2104      	movs	r1, #4
   18ea2:	300c      	adds	r0, #12
   18ea4:	f012 f91e 	bl	2b0e4 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   18ea8:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   18eaa:	4622      	mov	r2, r4
   18eac:	7801      	ldrb	r1, [r0, #0]
   18eae:	8840      	ldrh	r0, [r0, #2]
   18eb0:	f7ff fec0 	bl	18c34 <hci_cmd_done>
	if (ncmd) {
   18eb4:	b905      	cbnz	r5, 18eb8 <hci_cmd_status+0x1c>
}
   18eb6:	bd38      	pop	{r3, r4, r5, pc}
	z_impl_k_sem_give(sem);
   18eb8:	4801      	ldr	r0, [pc, #4]	; (18ec0 <hci_cmd_status+0x24>)
   18eba:	f00c f989 	bl	251d0 <z_impl_k_sem_give>
   18ebe:	e7fa      	b.n	18eb6 <hci_cmd_status+0x1a>
   18ec0:	20000488 	.word	0x20000488

00018ec4 <hci_cmd_complete>:
{
   18ec4:	b538      	push	{r3, r4, r5, lr}
   18ec6:	4604      	mov	r4, r0
   18ec8:	2103      	movs	r1, #3
   18eca:	300c      	adds	r0, #12
   18ecc:	f012 f90a 	bl	2b0e4 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   18ed0:	7805      	ldrb	r5, [r0, #0]
	status = buf->data[0];
   18ed2:	68e3      	ldr	r3, [r4, #12]
	hci_cmd_done(opcode, status, buf);
   18ed4:	4622      	mov	r2, r4
   18ed6:	7819      	ldrb	r1, [r3, #0]
   18ed8:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   18edc:	f7ff feaa 	bl	18c34 <hci_cmd_done>
	if (ncmd) {
   18ee0:	b905      	cbnz	r5, 18ee4 <hci_cmd_complete+0x20>
}
   18ee2:	bd38      	pop	{r3, r4, r5, pc}
   18ee4:	4801      	ldr	r0, [pc, #4]	; (18eec <hci_cmd_complete+0x28>)
   18ee6:	f00c f973 	bl	251d0 <z_impl_k_sem_give>
   18eea:	e7fa      	b.n	18ee2 <hci_cmd_complete+0x1e>
   18eec:	20000488 	.word	0x20000488

00018ef0 <hci_hardware_error>:
{
   18ef0:	b510      	push	{r4, lr}
   18ef2:	b082      	sub	sp, #8
   18ef4:	2101      	movs	r1, #1
   18ef6:	300c      	adds	r0, #12
   18ef8:	f012 f8f4 	bl	2b0e4 <net_buf_simple_pull_mem>
	LOG_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   18efc:	7804      	ldrb	r4, [r0, #0]
   18efe:	2008      	movs	r0, #8
   18f00:	f7fc ff62 	bl	15dc8 <z_log_msg_alloc>
   18f04:	2200      	movs	r2, #0
   18f06:	f36f 0200 	bfc	r2, #0, #1
   18f0a:	f36f 0241 	bfc	r2, #1, #1
   18f0e:	f36f 0282 	bfc	r2, #2, #1
   18f12:	f36f 02c5 	bfc	r2, #3, #3
   18f16:	2301      	movs	r3, #1
   18f18:	f363 1288 	bfi	r2, r3, #6, #3
   18f1c:	230c      	movs	r3, #12
   18f1e:	f363 2252 	bfi	r2, r3, #9, #10
   18f22:	f36f 42de 	bfc	r2, #19, #12
   18f26:	f36f 72df 	bfc	r2, #31, #1
   18f2a:	4684      	mov	ip, r0
   18f2c:	b198      	cbz	r0, 18f56 <hci_hardware_error+0x66>
   18f2e:	f110 0310 	adds.w	r3, r0, #16
   18f32:	d002      	beq.n	18f3a <hci_hardware_error+0x4a>
   18f34:	490b      	ldr	r1, [pc, #44]	; (18f64 <hci_hardware_error+0x74>)
   18f36:	6141      	str	r1, [r0, #20]
   18f38:	6184      	str	r4, [r0, #24]
   18f3a:	b163      	cbz	r3, 18f56 <hci_hardware_error+0x66>
   18f3c:	2303      	movs	r3, #3
   18f3e:	f88d 3004 	strb.w	r3, [sp, #4]
   18f42:	2300      	movs	r3, #0
   18f44:	f88d 3005 	strb.w	r3, [sp, #5]
   18f48:	f88d 3006 	strb.w	r3, [sp, #6]
   18f4c:	f88d 3007 	strb.w	r3, [sp, #7]
   18f50:	9801      	ldr	r0, [sp, #4]
   18f52:	f8cc 0010 	str.w	r0, [ip, #16]
   18f56:	2300      	movs	r3, #0
   18f58:	4903      	ldr	r1, [pc, #12]	; (18f68 <hci_hardware_error+0x78>)
   18f5a:	4660      	mov	r0, ip
   18f5c:	f00e ff3f 	bl	27dde <z_log_msg_finalize>
}
   18f60:	b002      	add	sp, #8
   18f62:	bd10      	pop	{r4, pc}
   18f64:	0002f72c 	.word	0x0002f72c
   18f68:	0002de90 	.word	0x0002de90

00018f6c <handle_event>:
{
   18f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18f70:	b082      	sub	sp, #8
   18f72:	af00      	add	r7, sp, #0
   18f74:	4605      	mov	r5, r0
   18f76:	460c      	mov	r4, r1
	err = handle_event_common(event, buf, handlers, num_handlers);
   18f78:	f7ff fbe0 	bl	1873c <handle_event_common>
	if (err == -EOPNOTSUPP) {
   18f7c:	f110 0f5f 	cmn.w	r0, #95	; 0x5f
   18f80:	d003      	beq.n	18f8a <handle_event+0x1e>
}
   18f82:	3708      	adds	r7, #8
   18f84:	46bd      	mov	sp, r7
   18f86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   18f8a:	f8b4 8010 	ldrh.w	r8, [r4, #16]
   18f8e:	4641      	mov	r1, r8
   18f90:	68e0      	ldr	r0, [r4, #12]
   18f92:	f7ff f9bd 	bl	18310 <bt_hex>
   18f96:	466e      	mov	r6, sp
   18f98:	2302      	movs	r3, #2
   18f9a:	713b      	strb	r3, [r7, #4]
   18f9c:	2304      	movs	r3, #4
   18f9e:	717b      	strb	r3, [r7, #5]
   18fa0:	b08a      	sub	sp, #40	; 0x28
   18fa2:	466c      	mov	r4, sp
   18fa4:	f114 0210 	adds.w	r2, r4, #16
   18fa8:	d01c      	beq.n	18fe4 <handle_event+0x78>
   18faa:	f04f 0c16 	mov.w	ip, #22
   18fae:	b162      	cbz	r2, 18fca <handle_event+0x5e>
   18fb0:	4663      	mov	r3, ip
   18fb2:	f1bc 0f04 	cmp.w	ip, #4
   18fb6:	dd01      	ble.n	18fbc <handle_event+0x50>
   18fb8:	4926      	ldr	r1, [pc, #152]	; (19054 <handle_event+0xe8>)
   18fba:	6161      	str	r1, [r4, #20]
   18fbc:	2b08      	cmp	r3, #8
   18fbe:	dd00      	ble.n	18fc2 <handle_event+0x56>
   18fc0:	61a5      	str	r5, [r4, #24]
   18fc2:	2b0c      	cmp	r3, #12
   18fc4:	dd01      	ble.n	18fca <handle_event+0x5e>
   18fc6:	f8c4 801c 	str.w	r8, [r4, #28]
   18fca:	2302      	movs	r3, #2
   18fcc:	703b      	strb	r3, [r7, #0]
   18fce:	2304      	movs	r3, #4
   18fd0:	707b      	strb	r3, [r7, #1]
   18fd2:	b1a2      	cbz	r2, 18ffe <handle_event+0x92>
   18fd4:	f1bc 0f10 	cmp.w	ip, #16
   18fd8:	dd00      	ble.n	18fdc <handle_event+0x70>
   18fda:	6220      	str	r0, [r4, #32]
   18fdc:	f104 0324 	add.w	r3, r4, #36	; 0x24
   18fe0:	2100      	movs	r1, #0
   18fe2:	e00a      	b.n	18ffa <handle_event+0x8e>
   18fe4:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
   18fe8:	e7e1      	b.n	18fae <handle_event+0x42>
   18fea:	f101 0008 	add.w	r0, r1, #8
   18fee:	4438      	add	r0, r7
   18ff0:	f810 0c08 	ldrb.w	r0, [r0, #-8]
   18ff4:	f803 0b01 	strb.w	r0, [r3], #1
   18ff8:	3101      	adds	r1, #1
   18ffa:	2901      	cmp	r1, #1
   18ffc:	d9f5      	bls.n	18fea <handle_event+0x7e>
   18ffe:	f1bc 0f15 	cmp.w	ip, #21
   19002:	dd24      	ble.n	1904e <handle_event+0xe2>
   19004:	2316      	movs	r3, #22
   19006:	b142      	cbz	r2, 1901a <handle_event+0xae>
   19008:	2105      	movs	r1, #5
   1900a:	7139      	strb	r1, [r7, #4]
   1900c:	2100      	movs	r1, #0
   1900e:	7179      	strb	r1, [r7, #5]
   19010:	71b9      	strb	r1, [r7, #6]
   19012:	2101      	movs	r1, #1
   19014:	71f9      	strb	r1, [r7, #7]
   19016:	6878      	ldr	r0, [r7, #4]
   19018:	6120      	str	r0, [r4, #16]
   1901a:	2100      	movs	r1, #0
   1901c:	f36f 0100 	bfc	r1, #0, #1
   19020:	f36f 0141 	bfc	r1, #1, #1
   19024:	f36f 0182 	bfc	r1, #2, #1
   19028:	f36f 01c5 	bfc	r1, #3, #3
   1902c:	2002      	movs	r0, #2
   1902e:	f360 1188 	bfi	r1, r0, #6, #3
   19032:	f3c3 0309 	ubfx	r3, r3, #0, #10
   19036:	f363 2152 	bfi	r1, r3, #9, #10
   1903a:	f36f 41de 	bfc	r1, #19, #12
   1903e:	f36f 71df 	bfc	r1, #31, #1
   19042:	2300      	movs	r3, #0
   19044:	4804      	ldr	r0, [pc, #16]	; (19058 <handle_event+0xec>)
   19046:	f00e fee2 	bl	27e0e <z_impl_z_log_msg_static_create>
   1904a:	46b5      	mov	sp, r6
}
   1904c:	e799      	b.n	18f82 <handle_event+0x16>
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   1904e:	f06f 031b 	mvn.w	r3, #27
   19052:	e7d8      	b.n	19006 <handle_event+0x9a>
   19054:	0002f750 	.word	0x0002f750
   19058:	0002de90 	.word	0x0002de90

0001905c <hci_event>:
{
   1905c:	b538      	push	{r3, r4, r5, lr}
   1905e:	4604      	mov	r4, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
   19060:	8a03      	ldrh	r3, [r0, #16]
   19062:	2b01      	cmp	r3, #1
   19064:	d915      	bls.n	19092 <hci_event+0x36>
   19066:	2102      	movs	r1, #2
   19068:	f104 000c 	add.w	r0, r4, #12
   1906c:	f012 f83a 	bl	2b0e4 <net_buf_simple_pull_mem>
   19070:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   19072:	7800      	ldrb	r0, [r0, #0]
   19074:	f00f fc06 	bl	28884 <bt_hci_evt_get_flags>
   19078:	f010 0f02 	tst.w	r0, #2
   1907c:	d017      	beq.n	190ae <hci_event+0x52>
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   1907e:	2304      	movs	r3, #4
   19080:	4a12      	ldr	r2, [pc, #72]	; (190cc <hci_event+0x70>)
   19082:	4621      	mov	r1, r4
   19084:	7828      	ldrb	r0, [r5, #0]
   19086:	f7ff ff71 	bl	18f6c <handle_event>
	net_buf_unref(buf);
   1908a:	4620      	mov	r0, r4
   1908c:	f011 ffb9 	bl	2b002 <net_buf_unref>
}
   19090:	bd38      	pop	{r3, r4, r5, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   19092:	f640 136d 	movw	r3, #2413	; 0x96d
   19096:	4a0e      	ldr	r2, [pc, #56]	; (190d0 <hci_event+0x74>)
   19098:	490e      	ldr	r1, [pc, #56]	; (190d4 <hci_event+0x78>)
   1909a:	480f      	ldr	r0, [pc, #60]	; (190d8 <hci_event+0x7c>)
   1909c:	f00e fb9e 	bl	277dc <assert_print>
   190a0:	4040      	eors	r0, r0
   190a2:	f380 8811 	msr	BASEPRI, r0
   190a6:	f04f 0003 	mov.w	r0, #3
   190aa:	df02      	svc	2
   190ac:	e7db      	b.n	19066 <hci_event+0xa>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   190ae:	f640 1371 	movw	r3, #2417	; 0x971
   190b2:	4a07      	ldr	r2, [pc, #28]	; (190d0 <hci_event+0x74>)
   190b4:	4909      	ldr	r1, [pc, #36]	; (190dc <hci_event+0x80>)
   190b6:	4808      	ldr	r0, [pc, #32]	; (190d8 <hci_event+0x7c>)
   190b8:	f00e fb90 	bl	277dc <assert_print>
   190bc:	4040      	eors	r0, r0
   190be:	f380 8811 	msr	BASEPRI, r0
   190c2:	f04f 0003 	mov.w	r0, #3
   190c6:	df02      	svc	2
   190c8:	e7d9      	b.n	1907e <hci_event+0x22>
   190ca:	bf00      	nop
   190cc:	0002fbc8 	.word	0x0002fbc8
   190d0:	0002f774 	.word	0x0002f774
   190d4:	0002f7a8 	.word	0x0002f7a8
   190d8:	0002f7c4 	.word	0x0002f7c4
   190dc:	0002f7e4 	.word	0x0002f7e4

000190e0 <hci_le_meta_event>:
{
   190e0:	b510      	push	{r4, lr}
   190e2:	4604      	mov	r4, r0
   190e4:	2101      	movs	r1, #1
   190e6:	300c      	adds	r0, #12
   190e8:	f011 fffc 	bl	2b0e4 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   190ec:	2308      	movs	r3, #8
   190ee:	4a03      	ldr	r2, [pc, #12]	; (190fc <hci_le_meta_event+0x1c>)
   190f0:	4621      	mov	r1, r4
   190f2:	7800      	ldrb	r0, [r0, #0]
   190f4:	f7ff ff3a 	bl	18f6c <handle_event>
}
   190f8:	bd10      	pop	{r4, pc}
   190fa:	bf00      	nop
   190fc:	0002fbe8 	.word	0x0002fbe8

00019100 <rx_queue_put>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_queue_put(struct net_buf *buf)
{
   19100:	b510      	push	{r4, lr}
   19102:	b082      	sub	sp, #8
   19104:	4601      	mov	r1, r0
	net_buf_slist_put(&bt_dev.rx_queue, buf);
   19106:	481e      	ldr	r0, [pc, #120]	; (19180 <rx_queue_put+0x80>)
   19108:	f011 ff49 	bl	2af9e <net_buf_slist_put>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
	const int err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
   1910c:	491d      	ldr	r1, [pc, #116]	; (19184 <rx_queue_put+0x84>)
   1910e:	481e      	ldr	r0, [pc, #120]	; (19188 <rx_queue_put+0x88>)
   19110:	f014 f81c 	bl	2d14c <k_work_submit_to_queue>
#endif /* CONFIG_BT_RECV_WORKQ_SYS */
	if (err < 0) {
   19114:	1e04      	subs	r4, r0, #0
   19116:	db01      	blt.n	1911c <rx_queue_put+0x1c>
		LOG_ERR("Could not submit rx_work: %d", err);
	}
}
   19118:	b002      	add	sp, #8
   1911a:	bd10      	pop	{r4, pc}
		LOG_ERR("Could not submit rx_work: %d", err);
   1911c:	2008      	movs	r0, #8
   1911e:	f7fc fe53 	bl	15dc8 <z_log_msg_alloc>
   19122:	2200      	movs	r2, #0
   19124:	f36f 0200 	bfc	r2, #0, #1
   19128:	f36f 0241 	bfc	r2, #1, #1
   1912c:	f36f 0282 	bfc	r2, #2, #1
   19130:	f36f 02c5 	bfc	r2, #3, #3
   19134:	2301      	movs	r3, #1
   19136:	f363 1288 	bfi	r2, r3, #6, #3
   1913a:	230c      	movs	r3, #12
   1913c:	f363 2252 	bfi	r2, r3, #9, #10
   19140:	f36f 42de 	bfc	r2, #19, #12
   19144:	f36f 72df 	bfc	r2, #31, #1
   19148:	4684      	mov	ip, r0
   1914a:	b198      	cbz	r0, 19174 <rx_queue_put+0x74>
   1914c:	f110 0310 	adds.w	r3, r0, #16
   19150:	d002      	beq.n	19158 <rx_queue_put+0x58>
   19152:	490e      	ldr	r1, [pc, #56]	; (1918c <rx_queue_put+0x8c>)
   19154:	6141      	str	r1, [r0, #20]
   19156:	6184      	str	r4, [r0, #24]
   19158:	b163      	cbz	r3, 19174 <rx_queue_put+0x74>
   1915a:	2303      	movs	r3, #3
   1915c:	f88d 3004 	strb.w	r3, [sp, #4]
   19160:	2300      	movs	r3, #0
   19162:	f88d 3005 	strb.w	r3, [sp, #5]
   19166:	f88d 3006 	strb.w	r3, [sp, #6]
   1916a:	f88d 3007 	strb.w	r3, [sp, #7]
   1916e:	9801      	ldr	r0, [sp, #4]
   19170:	f8cc 0010 	str.w	r0, [ip, #16]
   19174:	2300      	movs	r3, #0
   19176:	4906      	ldr	r1, [pc, #24]	; (19190 <rx_queue_put+0x90>)
   19178:	4660      	mov	r0, ip
   1917a:	f00e fe30 	bl	27dde <z_log_msg_finalize>
}
   1917e:	e7cb      	b.n	19118 <rx_queue_put+0x18>
   19180:	200004a4 	.word	0x200004a4
   19184:	20000908 	.word	0x20000908
   19188:	200021f0 	.word	0x200021f0
   1918c:	0002f814 	.word	0x0002f814
   19190:	0002de90 	.word	0x0002de90

00019194 <hci_acl>:
{
   19194:	b5f0      	push	{r4, r5, r6, r7, lr}
   19196:	b083      	sub	sp, #12
   19198:	4604      	mov	r4, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
   1919a:	8a03      	ldrh	r3, [r0, #16]
   1919c:	2b03      	cmp	r3, #3
   1919e:	d945      	bls.n	1922c <hci_acl+0x98>
   191a0:	2104      	movs	r1, #4
   191a2:	f104 000c 	add.w	r0, r4, #12
   191a6:	f011 ff9d 	bl	2b0e4 <net_buf_simple_pull_mem>
	len = sys_le16_to_cpu(hdr->len);
   191aa:	8845      	ldrh	r5, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   191ac:	8800      	ldrh	r0, [r0, #0]
	flags = bt_acl_flags(handle);
   191ae:	0b07      	lsrs	r7, r0, #12
	acl(buf)->handle = bt_acl_handle(handle);
   191b0:	f3c0 000b 	ubfx	r0, r0, #0, #12
   191b4:	8360      	strh	r0, [r4, #26]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   191b6:	23ff      	movs	r3, #255	; 0xff
   191b8:	7663      	strb	r3, [r4, #25]
	if (buf->len != len) {
   191ba:	8a26      	ldrh	r6, [r4, #16]
   191bc:	42ae      	cmp	r6, r5
   191be:	d043      	beq.n	19248 <hci_acl+0xb4>
		LOG_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   191c0:	2008      	movs	r0, #8
   191c2:	f7fc fe01 	bl	15dc8 <z_log_msg_alloc>
   191c6:	2200      	movs	r2, #0
   191c8:	f36f 0200 	bfc	r2, #0, #1
   191cc:	f36f 0241 	bfc	r2, #1, #1
   191d0:	f36f 0282 	bfc	r2, #2, #1
   191d4:	f36f 02c5 	bfc	r2, #3, #3
   191d8:	2301      	movs	r3, #1
   191da:	f363 1288 	bfi	r2, r3, #6, #3
   191de:	2310      	movs	r3, #16
   191e0:	f363 2252 	bfi	r2, r3, #9, #10
   191e4:	f36f 42de 	bfc	r2, #19, #12
   191e8:	f36f 72df 	bfc	r2, #31, #1
   191ec:	4684      	mov	ip, r0
   191ee:	b198      	cbz	r0, 19218 <hci_acl+0x84>
   191f0:	18c3      	adds	r3, r0, r3
   191f2:	d003      	beq.n	191fc <hci_acl+0x68>
   191f4:	4937      	ldr	r1, [pc, #220]	; (192d4 <hci_acl+0x140>)
   191f6:	6141      	str	r1, [r0, #20]
   191f8:	6186      	str	r6, [r0, #24]
   191fa:	61c5      	str	r5, [r0, #28]
   191fc:	b163      	cbz	r3, 19218 <hci_acl+0x84>
   191fe:	2304      	movs	r3, #4
   19200:	f88d 3004 	strb.w	r3, [sp, #4]
   19204:	2300      	movs	r3, #0
   19206:	f88d 3005 	strb.w	r3, [sp, #5]
   1920a:	f88d 3006 	strb.w	r3, [sp, #6]
   1920e:	f88d 3007 	strb.w	r3, [sp, #7]
   19212:	9801      	ldr	r0, [sp, #4]
   19214:	f8cc 0010 	str.w	r0, [ip, #16]
   19218:	2300      	movs	r3, #0
   1921a:	492f      	ldr	r1, [pc, #188]	; (192d8 <hci_acl+0x144>)
   1921c:	4660      	mov	r0, ip
   1921e:	f00e fdde 	bl	27dde <z_log_msg_finalize>
		net_buf_unref(buf);
   19222:	4620      	mov	r0, r4
   19224:	f011 feed 	bl	2b002 <net_buf_unref>
}
   19228:	b003      	add	sp, #12
   1922a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   1922c:	f240 13ed 	movw	r3, #493	; 0x1ed
   19230:	4a2a      	ldr	r2, [pc, #168]	; (192dc <hci_acl+0x148>)
   19232:	492b      	ldr	r1, [pc, #172]	; (192e0 <hci_acl+0x14c>)
   19234:	482b      	ldr	r0, [pc, #172]	; (192e4 <hci_acl+0x150>)
   19236:	f00e fad1 	bl	277dc <assert_print>
   1923a:	4040      	eors	r0, r0
   1923c:	f380 8811 	msr	BASEPRI, r0
   19240:	f04f 0003 	mov.w	r0, #3
   19244:	df02      	svc	2
   19246:	e7ab      	b.n	191a0 <hci_acl+0xc>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   19248:	f002 ff00 	bl	1c04c <bt_conn_lookup_handle>
	if (!conn) {
   1924c:	4605      	mov	r5, r0
   1924e:	b158      	cbz	r0, 19268 <hci_acl+0xd4>
	acl(buf)->index = bt_conn_index(conn);
   19250:	f003 f890 	bl	1c374 <bt_conn_index>
   19254:	7660      	strb	r0, [r4, #25]
	bt_conn_recv(conn, buf, flags);
   19256:	463a      	mov	r2, r7
   19258:	4621      	mov	r1, r4
   1925a:	4628      	mov	r0, r5
   1925c:	f00f fe20 	bl	28ea0 <bt_conn_recv>
	bt_conn_unref(conn);
   19260:	4628      	mov	r0, r5
   19262:	f00f fe50 	bl	28f06 <bt_conn_unref>
   19266:	e7df      	b.n	19228 <hci_acl+0x94>
		LOG_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   19268:	8b66      	ldrh	r6, [r4, #26]
   1926a:	2008      	movs	r0, #8
   1926c:	f7fc fdac 	bl	15dc8 <z_log_msg_alloc>
   19270:	2200      	movs	r2, #0
   19272:	f36f 0200 	bfc	r2, #0, #1
   19276:	f36f 0241 	bfc	r2, #1, #1
   1927a:	f36f 0282 	bfc	r2, #2, #1
   1927e:	f36f 02c5 	bfc	r2, #3, #3
   19282:	2301      	movs	r3, #1
   19284:	f363 1288 	bfi	r2, r3, #6, #3
   19288:	230c      	movs	r3, #12
   1928a:	f363 2252 	bfi	r2, r3, #9, #10
   1928e:	f36f 42de 	bfc	r2, #19, #12
   19292:	f36f 72df 	bfc	r2, #31, #1
   19296:	4605      	mov	r5, r0
   19298:	b190      	cbz	r0, 192c0 <hci_acl+0x12c>
   1929a:	f110 0310 	adds.w	r3, r0, #16
   1929e:	d002      	beq.n	192a6 <hci_acl+0x112>
   192a0:	4911      	ldr	r1, [pc, #68]	; (192e8 <hci_acl+0x154>)
   192a2:	6141      	str	r1, [r0, #20]
   192a4:	6186      	str	r6, [r0, #24]
   192a6:	b15b      	cbz	r3, 192c0 <hci_acl+0x12c>
   192a8:	2303      	movs	r3, #3
   192aa:	f88d 3004 	strb.w	r3, [sp, #4]
   192ae:	2300      	movs	r3, #0
   192b0:	f88d 3005 	strb.w	r3, [sp, #5]
   192b4:	f88d 3006 	strb.w	r3, [sp, #6]
   192b8:	f88d 3007 	strb.w	r3, [sp, #7]
   192bc:	9801      	ldr	r0, [sp, #4]
   192be:	6128      	str	r0, [r5, #16]
   192c0:	2300      	movs	r3, #0
   192c2:	4905      	ldr	r1, [pc, #20]	; (192d8 <hci_acl+0x144>)
   192c4:	4628      	mov	r0, r5
   192c6:	f00e fd8a 	bl	27dde <z_log_msg_finalize>
		net_buf_unref(buf);
   192ca:	4620      	mov	r0, r4
   192cc:	f011 fe99 	bl	2b002 <net_buf_unref>
		return;
   192d0:	e7aa      	b.n	19228 <hci_acl+0x94>
   192d2:	bf00      	nop
   192d4:	0002f834 	.word	0x0002f834
   192d8:	0002de90 	.word	0x0002de90
   192dc:	0002f774 	.word	0x0002f774
   192e0:	0002f7a8 	.word	0x0002f7a8
   192e4:	0002f7c4 	.word	0x0002f7c4
   192e8:	0002f858 	.word	0x0002f858

000192ec <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
   192ec:	b530      	push	{r4, r5, lr}
   192ee:	b083      	sub	sp, #12
	int err;

	struct net_buf *buf;

	LOG_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   192f0:	4840      	ldr	r0, [pc, #256]	; (193f4 <rx_work_handler+0x108>)
   192f2:	f011 fe6a 	bl	2afca <net_buf_slist_get>
	if (!buf) {
   192f6:	b188      	cbz	r0, 1931c <rx_work_handler+0x30>
   192f8:	4604      	mov	r4, r0
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   192fa:	7e05      	ldrb	r5, [r0, #24]
		return;
	}

	LOG_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	switch (bt_buf_get_type(buf)) {
   192fc:	2d01      	cmp	r5, #1
   192fe:	d00f      	beq.n	19320 <rx_work_handler+0x34>
   19300:	2d03      	cmp	r5, #3
   19302:	d110      	bne.n	19326 <rx_work_handler+0x3a>
#if defined(CONFIG_BT_CONN)
	case BT_BUF_ACL_IN:
		hci_acl(buf);
   19304:	f7ff ff46 	bl	19194 <hci_acl>
	return list->head;
   19308:	4b3b      	ldr	r3, [pc, #236]	; (193f8 <rx_work_handler+0x10c>)
   1930a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
   1930e:	b12b      	cbz	r3, 1931c <rx_work_handler+0x30>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
		err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
   19310:	493a      	ldr	r1, [pc, #232]	; (193fc <rx_work_handler+0x110>)
   19312:	483b      	ldr	r0, [pc, #236]	; (19400 <rx_work_handler+0x114>)
   19314:	f013 ff1a 	bl	2d14c <k_work_submit_to_queue>
#endif
		if (err < 0) {
   19318:	1e04      	subs	r4, r0, #0
   1931a:	db39      	blt.n	19390 <rx_work_handler+0xa4>
			LOG_ERR("Could not submit rx_work: %d", err);
		}
	}
}
   1931c:	b003      	add	sp, #12
   1931e:	bd30      	pop	{r4, r5, pc}
		hci_event(buf);
   19320:	f7ff fe9c 	bl	1905c <hci_event>
		break;
   19324:	e7f0      	b.n	19308 <rx_work_handler+0x1c>
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   19326:	2008      	movs	r0, #8
   19328:	f7fc fd4e 	bl	15dc8 <z_log_msg_alloc>
   1932c:	2200      	movs	r2, #0
   1932e:	f36f 0200 	bfc	r2, #0, #1
   19332:	f36f 0241 	bfc	r2, #1, #1
   19336:	f36f 0282 	bfc	r2, #2, #1
   1933a:	f36f 02c5 	bfc	r2, #3, #3
   1933e:	2301      	movs	r3, #1
   19340:	f363 1288 	bfi	r2, r3, #6, #3
   19344:	230c      	movs	r3, #12
   19346:	f363 2252 	bfi	r2, r3, #9, #10
   1934a:	f36f 42de 	bfc	r2, #19, #12
   1934e:	f36f 72df 	bfc	r2, #31, #1
   19352:	4684      	mov	ip, r0
   19354:	b198      	cbz	r0, 1937e <rx_work_handler+0x92>
   19356:	f110 0310 	adds.w	r3, r0, #16
   1935a:	d002      	beq.n	19362 <rx_work_handler+0x76>
   1935c:	4929      	ldr	r1, [pc, #164]	; (19404 <rx_work_handler+0x118>)
   1935e:	6141      	str	r1, [r0, #20]
   19360:	6185      	str	r5, [r0, #24]
   19362:	b163      	cbz	r3, 1937e <rx_work_handler+0x92>
   19364:	2303      	movs	r3, #3
   19366:	f88d 3004 	strb.w	r3, [sp, #4]
   1936a:	2300      	movs	r3, #0
   1936c:	f88d 3005 	strb.w	r3, [sp, #5]
   19370:	f88d 3006 	strb.w	r3, [sp, #6]
   19374:	f88d 3007 	strb.w	r3, [sp, #7]
   19378:	9801      	ldr	r0, [sp, #4]
   1937a:	f8cc 0010 	str.w	r0, [ip, #16]
   1937e:	2300      	movs	r3, #0
   19380:	4921      	ldr	r1, [pc, #132]	; (19408 <rx_work_handler+0x11c>)
   19382:	4660      	mov	r0, ip
   19384:	f00e fd2b 	bl	27dde <z_log_msg_finalize>
		net_buf_unref(buf);
   19388:	4620      	mov	r0, r4
   1938a:	f011 fe3a 	bl	2b002 <net_buf_unref>
		break;
   1938e:	e7bb      	b.n	19308 <rx_work_handler+0x1c>
			LOG_ERR("Could not submit rx_work: %d", err);
   19390:	2008      	movs	r0, #8
   19392:	f7fc fd19 	bl	15dc8 <z_log_msg_alloc>
   19396:	2200      	movs	r2, #0
   19398:	f36f 0200 	bfc	r2, #0, #1
   1939c:	f36f 0241 	bfc	r2, #1, #1
   193a0:	f36f 0282 	bfc	r2, #2, #1
   193a4:	f36f 02c5 	bfc	r2, #3, #3
   193a8:	2301      	movs	r3, #1
   193aa:	f363 1288 	bfi	r2, r3, #6, #3
   193ae:	230c      	movs	r3, #12
   193b0:	f363 2252 	bfi	r2, r3, #9, #10
   193b4:	f36f 42de 	bfc	r2, #19, #12
   193b8:	f36f 72df 	bfc	r2, #31, #1
   193bc:	4605      	mov	r5, r0
   193be:	b190      	cbz	r0, 193e6 <rx_work_handler+0xfa>
   193c0:	f110 0310 	adds.w	r3, r0, #16
   193c4:	d002      	beq.n	193cc <rx_work_handler+0xe0>
   193c6:	4911      	ldr	r1, [pc, #68]	; (1940c <rx_work_handler+0x120>)
   193c8:	6141      	str	r1, [r0, #20]
   193ca:	6184      	str	r4, [r0, #24]
   193cc:	b15b      	cbz	r3, 193e6 <rx_work_handler+0xfa>
   193ce:	2303      	movs	r3, #3
   193d0:	f88d 3004 	strb.w	r3, [sp, #4]
   193d4:	2300      	movs	r3, #0
   193d6:	f88d 3005 	strb.w	r3, [sp, #5]
   193da:	f88d 3006 	strb.w	r3, [sp, #6]
   193de:	f88d 3007 	strb.w	r3, [sp, #7]
   193e2:	9801      	ldr	r0, [sp, #4]
   193e4:	6128      	str	r0, [r5, #16]
   193e6:	2300      	movs	r3, #0
   193e8:	4907      	ldr	r1, [pc, #28]	; (19408 <rx_work_handler+0x11c>)
   193ea:	4628      	mov	r0, r5
   193ec:	f00e fcf7 	bl	27dde <z_log_msg_finalize>
   193f0:	e794      	b.n	1931c <rx_work_handler+0x30>
   193f2:	bf00      	nop
   193f4:	200004a4 	.word	0x200004a4
   193f8:	20000370 	.word	0x20000370
   193fc:	20000908 	.word	0x20000908
   19400:	200021f0 	.word	0x200021f0
   19404:	0002f87c 	.word	0x0002f87c
   19408:	0002de90 	.word	0x0002de90
   1940c:	0002f814 	.word	0x0002f814

00019410 <le_conn_update_complete>:
{
   19410:	b570      	push	{r4, r5, r6, lr}
   19412:	b082      	sub	sp, #8
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   19414:	68c4      	ldr	r4, [r0, #12]
	handle = sys_le16_to_cpu(evt->handle);
   19416:	f8b4 6001 	ldrh.w	r6, [r4, #1]
	conn = bt_conn_lookup_handle(handle);
   1941a:	4630      	mov	r0, r6
   1941c:	f002 fe16 	bl	1c04c <bt_conn_lookup_handle>
	if (!conn) {
   19420:	b1c8      	cbz	r0, 19456 <le_conn_update_complete+0x46>
   19422:	4605      	mov	r5, r0
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   19424:	7823      	ldrb	r3, [r4, #0]
   19426:	2b1a      	cmp	r3, #26
   19428:	d046      	beq.n	194b8 <le_conn_update_complete+0xa8>
		if (!evt->status) {
   1942a:	7823      	ldrb	r3, [r4, #0]
   1942c:	b95b      	cbnz	r3, 19446 <le_conn_update_complete+0x36>
			conn->le.interval = sys_le16_to_cpu(evt->interval);
   1942e:	f8b4 3003 	ldrh.w	r3, [r4, #3]
   19432:	f8a5 309e 	strh.w	r3, [r5, #158]	; 0x9e
			conn->le.latency = sys_le16_to_cpu(evt->latency);
   19436:	f8b4 3005 	ldrh.w	r3, [r4, #5]
   1943a:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
			conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   1943e:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   19442:	f8a5 30a6 	strh.w	r3, [r5, #166]	; 0xa6
		notify_le_param_updated(conn);
   19446:	4628      	mov	r0, r5
   19448:	f002 ffea 	bl	1c420 <notify_le_param_updated>
	bt_conn_unref(conn);
   1944c:	4628      	mov	r0, r5
   1944e:	f00f fd5a 	bl	28f06 <bt_conn_unref>
}
   19452:	b002      	add	sp, #8
   19454:	bd70      	pop	{r4, r5, r6, pc}
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   19456:	2008      	movs	r0, #8
   19458:	f7fc fcb6 	bl	15dc8 <z_log_msg_alloc>
   1945c:	2200      	movs	r2, #0
   1945e:	f36f 0200 	bfc	r2, #0, #1
   19462:	f36f 0241 	bfc	r2, #1, #1
   19466:	f36f 0282 	bfc	r2, #2, #1
   1946a:	f36f 02c5 	bfc	r2, #3, #3
   1946e:	2301      	movs	r3, #1
   19470:	f363 1288 	bfi	r2, r3, #6, #3
   19474:	230c      	movs	r3, #12
   19476:	f363 2252 	bfi	r2, r3, #9, #10
   1947a:	f36f 42de 	bfc	r2, #19, #12
   1947e:	f36f 72df 	bfc	r2, #31, #1
   19482:	4604      	mov	r4, r0
   19484:	b190      	cbz	r0, 194ac <le_conn_update_complete+0x9c>
   19486:	f110 0310 	adds.w	r3, r0, #16
   1948a:	d002      	beq.n	19492 <le_conn_update_complete+0x82>
   1948c:	4919      	ldr	r1, [pc, #100]	; (194f4 <le_conn_update_complete+0xe4>)
   1948e:	6141      	str	r1, [r0, #20]
   19490:	6186      	str	r6, [r0, #24]
   19492:	b15b      	cbz	r3, 194ac <le_conn_update_complete+0x9c>
   19494:	2303      	movs	r3, #3
   19496:	f88d 3000 	strb.w	r3, [sp]
   1949a:	2300      	movs	r3, #0
   1949c:	f88d 3001 	strb.w	r3, [sp, #1]
   194a0:	f88d 3002 	strb.w	r3, [sp, #2]
   194a4:	f88d 3003 	strb.w	r3, [sp, #3]
   194a8:	9800      	ldr	r0, [sp, #0]
   194aa:	6120      	str	r0, [r4, #16]
   194ac:	2300      	movs	r3, #0
   194ae:	4912      	ldr	r1, [pc, #72]	; (194f8 <le_conn_update_complete+0xe8>)
   194b0:	4620      	mov	r0, r4
   194b2:	f00e fc94 	bl	27dde <z_log_msg_finalize>
		return;
   194b6:	e7cc      	b.n	19452 <le_conn_update_complete+0x42>
	    conn->role == BT_HCI_ROLE_PERIPHERAL &&
   194b8:	78c3      	ldrb	r3, [r0, #3]
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   194ba:	2b01      	cmp	r3, #1
   194bc:	d1b5      	bne.n	1942a <le_conn_update_complete+0x1a>
	    !atomic_test_and_set_bit(conn->flags,
   194be:	210a      	movs	r1, #10
   194c0:	3004      	adds	r0, #4
   194c2:	f00f fa41 	bl	28948 <atomic_test_and_set_bit>
	    conn->role == BT_HCI_ROLE_PERIPHERAL &&
   194c6:	2800      	cmp	r0, #0
   194c8:	d1af      	bne.n	1942a <le_conn_update_complete+0x1a>
		param.interval_min = conn->le.interval_min;
   194ca:	f8b5 30a0 	ldrh.w	r3, [r5, #160]	; 0xa0
   194ce:	f8ad 3000 	strh.w	r3, [sp]
		param.interval_max = conn->le.interval_max;
   194d2:	f8b5 30a2 	ldrh.w	r3, [r5, #162]	; 0xa2
   194d6:	f8ad 3002 	strh.w	r3, [sp, #2]
		param.latency = conn->le.pending_latency;
   194da:	f8b5 30a8 	ldrh.w	r3, [r5, #168]	; 0xa8
   194de:	f8ad 3004 	strh.w	r3, [sp, #4]
		param.timeout = conn->le.pending_timeout;
   194e2:	f8b5 30aa 	ldrh.w	r3, [r5, #170]	; 0xaa
   194e6:	f8ad 3006 	strh.w	r3, [sp, #6]
		bt_l2cap_update_conn_param(conn, &param);
   194ea:	4669      	mov	r1, sp
   194ec:	4628      	mov	r0, r5
   194ee:	f00f fe5b 	bl	291a8 <bt_l2cap_update_conn_param>
				     BT_CONN_PERIPHERAL_PARAM_L2CAP)) {
   194f2:	e7ab      	b.n	1944c <le_conn_update_complete+0x3c>
   194f4:	0002f668 	.word	0x0002f668
   194f8:	0002de90 	.word	0x0002de90

000194fc <bt_hci_cmd_state_set_init>:
{
   194fc:	b510      	push	{r4, lr}
   194fe:	460c      	mov	r4, r1
	state->target = target;
   19500:	600a      	str	r2, [r1, #0]
	state->bit = bit;
   19502:	604b      	str	r3, [r1, #4]
	state->val = val;
   19504:	f89d 3008 	ldrb.w	r3, [sp, #8]
   19508:	720b      	strb	r3, [r1, #8]
	cmd(buf)->state = state;
   1950a:	f011 fc90 	bl	2ae2e <net_buf_id>
   1950e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   19512:	4b02      	ldr	r3, [pc, #8]	; (1951c <bt_hci_cmd_state_set_init+0x20>)
   19514:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   19518:	605c      	str	r4, [r3, #4]
}
   1951a:	bd10      	pop	{r4, pc}
   1951c:	20007c58 	.word	0x20007c58

00019520 <bt_hci_cmd_create>:
{
   19520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19524:	4606      	mov	r6, r0
   19526:	460f      	mov	r7, r1
	return net_buf_alloc_fixed(pool, timeout);
   19528:	f04f 32ff 	mov.w	r2, #4294967295
   1952c:	f04f 33ff 	mov.w	r3, #4294967295
   19530:	4818      	ldr	r0, [pc, #96]	; (19594 <bt_hci_cmd_create+0x74>)
   19532:	f011 fd1f 	bl	2af74 <net_buf_alloc_fixed>
   19536:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
   19538:	f100 090c 	add.w	r9, r0, #12
   1953c:	2100      	movs	r1, #0
   1953e:	4648      	mov	r0, r9
   19540:	f011 fd29 	bl	2af96 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   19544:	f04f 0800 	mov.w	r8, #0
   19548:	f884 8018 	strb.w	r8, [r4, #24]
	cmd(buf)->opcode = opcode;
   1954c:	4620      	mov	r0, r4
   1954e:	f011 fc6e 	bl	2ae2e <net_buf_id>
   19552:	4d11      	ldr	r5, [pc, #68]	; (19598 <bt_hci_cmd_create+0x78>)
   19554:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   19558:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   1955c:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   1955e:	4620      	mov	r0, r4
   19560:	f011 fc65 	bl	2ae2e <net_buf_id>
   19564:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   19568:	eb05 0380 	add.w	r3, r5, r0, lsl #2
   1956c:	f8c3 8008 	str.w	r8, [r3, #8]
	cmd(buf)->state = NULL;
   19570:	4620      	mov	r0, r4
   19572:	f011 fc5c 	bl	2ae2e <net_buf_id>
   19576:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1957a:	eb05 0580 	add.w	r5, r5, r0, lsl #2
   1957e:	f8c5 8004 	str.w	r8, [r5, #4]
	return net_buf_simple_add(&buf->b, len);
   19582:	2103      	movs	r1, #3
   19584:	4648      	mov	r0, r9
   19586:	f011 fd83 	bl	2b090 <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
   1958a:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
   1958c:	7087      	strb	r7, [r0, #2]
}
   1958e:	4620      	mov	r0, r4
   19590:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   19594:	20000cc8 	.word	0x20000cc8
   19598:	20007c58 	.word	0x20007c58

0001959c <bt_hci_cmd_send_sync>:
{
   1959c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1959e:	b089      	sub	sp, #36	; 0x24
   195a0:	4607      	mov	r7, r0
   195a2:	4615      	mov	r5, r2
	if (!buf) {
   195a4:	460c      	mov	r4, r1
   195a6:	b361      	cbz	r1, 19602 <bt_hci_cmd_send_sync+0x66>
	return z_impl_k_sem_init(sem, initial_count, limit);
   195a8:	ae02      	add	r6, sp, #8
   195aa:	2201      	movs	r2, #1
   195ac:	2100      	movs	r1, #0
   195ae:	4630      	mov	r0, r6
   195b0:	f013 fcc9 	bl	2cf46 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   195b4:	4620      	mov	r0, r4
   195b6:	f011 fc3a 	bl	2ae2e <net_buf_id>
   195ba:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   195be:	4b3e      	ldr	r3, [pc, #248]	; (196b8 <bt_hci_cmd_send_sync+0x11c>)
   195c0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   195c4:	609e      	str	r6, [r3, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   195c6:	4620      	mov	r0, r4
   195c8:	f011 fd3e 	bl	2b048 <net_buf_ref>
   195cc:	4601      	mov	r1, r0
   195ce:	483b      	ldr	r0, [pc, #236]	; (196bc <bt_hci_cmd_send_sync+0x120>)
   195d0:	f011 fd13 	bl	2affa <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   195d4:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   195d8:	2300      	movs	r3, #0
   195da:	4630      	mov	r0, r6
   195dc:	f00b fe20 	bl	25220 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   195e0:	4606      	mov	r6, r0
   195e2:	b9b0      	cbnz	r0, 19612 <bt_hci_cmd_send_sync+0x76>
	status = cmd(buf)->status;
   195e4:	4620      	mov	r0, r4
   195e6:	f011 fc22 	bl	2ae2e <net_buf_id>
   195ea:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   195ee:	4b32      	ldr	r3, [pc, #200]	; (196b8 <bt_hci_cmd_send_sync+0x11c>)
   195f0:	f813 6020 	ldrb.w	r6, [r3, r0, lsl #2]
	if (status) {
   195f4:	b9fe      	cbnz	r6, 19636 <bt_hci_cmd_send_sync+0x9a>
	if (rsp) {
   195f6:	2d00      	cmp	r5, #0
   195f8:	d058      	beq.n	196ac <bt_hci_cmd_send_sync+0x110>
		*rsp = buf;
   195fa:	602c      	str	r4, [r5, #0]
	return 0;
   195fc:	2000      	movs	r0, #0
}
   195fe:	b009      	add	sp, #36	; 0x24
   19600:	bdf0      	pop	{r4, r5, r6, r7, pc}
		buf = bt_hci_cmd_create(opcode, 0);
   19602:	f7ff ff8d 	bl	19520 <bt_hci_cmd_create>
		if (!buf) {
   19606:	4604      	mov	r4, r0
   19608:	2800      	cmp	r0, #0
   1960a:	d1cd      	bne.n	195a8 <bt_hci_cmd_send_sync+0xc>
			return -ENOBUFS;
   1960c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   19610:	e7f5      	b.n	195fe <bt_hci_cmd_send_sync+0x62>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   19612:	f240 1349 	movw	r3, #329	; 0x149
   19616:	4a2a      	ldr	r2, [pc, #168]	; (196c0 <bt_hci_cmd_send_sync+0x124>)
   19618:	492a      	ldr	r1, [pc, #168]	; (196c4 <bt_hci_cmd_send_sync+0x128>)
   1961a:	482b      	ldr	r0, [pc, #172]	; (196c8 <bt_hci_cmd_send_sync+0x12c>)
   1961c:	f00e f8de 	bl	277dc <assert_print>
   19620:	4631      	mov	r1, r6
   19622:	482a      	ldr	r0, [pc, #168]	; (196cc <bt_hci_cmd_send_sync+0x130>)
   19624:	f00e f8da 	bl	277dc <assert_print>
   19628:	4040      	eors	r0, r0
   1962a:	f380 8811 	msr	BASEPRI, r0
   1962e:	f04f 0003 	mov.w	r0, #3
   19632:	df02      	svc	2
   19634:	e7d6      	b.n	195e4 <bt_hci_cmd_send_sync+0x48>
		LOG_WRN("opcode 0x%04x status 0x%02x", opcode, status);
   19636:	2008      	movs	r0, #8
   19638:	f7fc fbc6 	bl	15dc8 <z_log_msg_alloc>
   1963c:	2200      	movs	r2, #0
   1963e:	f36f 0200 	bfc	r2, #0, #1
   19642:	f36f 0241 	bfc	r2, #1, #1
   19646:	f36f 0282 	bfc	r2, #2, #1
   1964a:	f36f 02c5 	bfc	r2, #3, #3
   1964e:	2302      	movs	r3, #2
   19650:	f363 1288 	bfi	r2, r3, #6, #3
   19654:	2310      	movs	r3, #16
   19656:	f363 2252 	bfi	r2, r3, #9, #10
   1965a:	f36f 42de 	bfc	r2, #19, #12
   1965e:	f36f 72df 	bfc	r2, #31, #1
   19662:	4605      	mov	r5, r0
   19664:	b190      	cbz	r0, 1968c <bt_hci_cmd_send_sync+0xf0>
   19666:	18c3      	adds	r3, r0, r3
   19668:	d003      	beq.n	19672 <bt_hci_cmd_send_sync+0xd6>
   1966a:	4919      	ldr	r1, [pc, #100]	; (196d0 <bt_hci_cmd_send_sync+0x134>)
   1966c:	6141      	str	r1, [r0, #20]
   1966e:	6187      	str	r7, [r0, #24]
   19670:	61c6      	str	r6, [r0, #28]
   19672:	b15b      	cbz	r3, 1968c <bt_hci_cmd_send_sync+0xf0>
   19674:	2304      	movs	r3, #4
   19676:	f88d 3004 	strb.w	r3, [sp, #4]
   1967a:	2300      	movs	r3, #0
   1967c:	f88d 3005 	strb.w	r3, [sp, #5]
   19680:	f88d 3006 	strb.w	r3, [sp, #6]
   19684:	f88d 3007 	strb.w	r3, [sp, #7]
   19688:	9801      	ldr	r0, [sp, #4]
   1968a:	6128      	str	r0, [r5, #16]
   1968c:	2300      	movs	r3, #0
   1968e:	4911      	ldr	r1, [pc, #68]	; (196d4 <bt_hci_cmd_send_sync+0x138>)
   19690:	4628      	mov	r0, r5
   19692:	f00e fba4 	bl	27dde <z_log_msg_finalize>
		net_buf_unref(buf);
   19696:	4620      	mov	r0, r4
   19698:	f011 fcb3 	bl	2b002 <net_buf_unref>
		switch (status) {
   1969c:	2e09      	cmp	r6, #9
   1969e:	d002      	beq.n	196a6 <bt_hci_cmd_send_sync+0x10a>
			return -EIO;
   196a0:	f06f 0004 	mvn.w	r0, #4
   196a4:	e7ab      	b.n	195fe <bt_hci_cmd_send_sync+0x62>
			return -ECONNREFUSED;
   196a6:	f06f 006e 	mvn.w	r0, #110	; 0x6e
   196aa:	e7a8      	b.n	195fe <bt_hci_cmd_send_sync+0x62>
		net_buf_unref(buf);
   196ac:	4620      	mov	r0, r4
   196ae:	f011 fca8 	bl	2b002 <net_buf_unref>
	return 0;
   196b2:	2000      	movs	r0, #0
   196b4:	e7a3      	b.n	195fe <bt_hci_cmd_send_sync+0x62>
   196b6:	bf00      	nop
   196b8:	20007c58 	.word	0x20007c58
   196bc:	200004ac 	.word	0x200004ac
   196c0:	0002f774 	.word	0x0002f774
   196c4:	0002f890 	.word	0x0002f890
   196c8:	0002f7c4 	.word	0x0002f7c4
   196cc:	0002f89c 	.word	0x0002f89c
   196d0:	0002f8bc 	.word	0x0002f8bc
   196d4:	0002de90 	.word	0x0002de90

000196d8 <common_init>:
{
   196d8:	b510      	push	{r4, lr}
   196da:	b082      	sub	sp, #8
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   196dc:	4b22      	ldr	r3, [pc, #136]	; (19768 <common_init+0x90>)
   196de:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
   196e2:	689b      	ldr	r3, [r3, #8]
   196e4:	f013 0f01 	tst.w	r3, #1
   196e8:	d10d      	bne.n	19706 <common_init+0x2e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   196ea:	aa01      	add	r2, sp, #4
   196ec:	2100      	movs	r1, #0
   196ee:	f640 4003 	movw	r0, #3075	; 0xc03
   196f2:	f7ff ff53 	bl	1959c <bt_hci_cmd_send_sync>
		if (err) {
   196f6:	4604      	mov	r4, r0
   196f8:	b968      	cbnz	r0, 19716 <common_init+0x3e>
		hci_reset_complete(rsp);
   196fa:	9801      	ldr	r0, [sp, #4]
   196fc:	f7ff f874 	bl	187e8 <hci_reset_complete>
		net_buf_unref(rsp);
   19700:	9801      	ldr	r0, [sp, #4]
   19702:	f011 fc7e 	bl	2b002 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   19706:	aa01      	add	r2, sp, #4
   19708:	2100      	movs	r1, #0
   1970a:	f241 0003 	movw	r0, #4099	; 0x1003
   1970e:	f7ff ff45 	bl	1959c <bt_hci_cmd_send_sync>
	if (err) {
   19712:	4604      	mov	r4, r0
   19714:	b110      	cbz	r0, 1971c <common_init+0x44>
}
   19716:	4620      	mov	r0, r4
   19718:	b002      	add	sp, #8
   1971a:	bd10      	pop	{r4, pc}
	read_local_features_complete(rsp);
   1971c:	9801      	ldr	r0, [sp, #4]
   1971e:	f7ff f87f 	bl	18820 <read_local_features_complete>
	net_buf_unref(rsp);
   19722:	9801      	ldr	r0, [sp, #4]
   19724:	f011 fc6d 	bl	2b002 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   19728:	aa01      	add	r2, sp, #4
   1972a:	2100      	movs	r1, #0
   1972c:	f241 0001 	movw	r0, #4097	; 0x1001
   19730:	f7ff ff34 	bl	1959c <bt_hci_cmd_send_sync>
	if (err) {
   19734:	4604      	mov	r4, r0
   19736:	2800      	cmp	r0, #0
   19738:	d1ed      	bne.n	19716 <common_init+0x3e>
	read_local_ver_complete(rsp);
   1973a:	9801      	ldr	r0, [sp, #4]
   1973c:	f7fe ffa0 	bl	18680 <read_local_ver_complete>
	net_buf_unref(rsp);
   19740:	9801      	ldr	r0, [sp, #4]
   19742:	f011 fc5e 	bl	2b002 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   19746:	aa01      	add	r2, sp, #4
   19748:	2100      	movs	r1, #0
   1974a:	f241 0002 	movw	r0, #4098	; 0x1002
   1974e:	f7ff ff25 	bl	1959c <bt_hci_cmd_send_sync>
	if (err) {
   19752:	4604      	mov	r4, r0
   19754:	2800      	cmp	r0, #0
   19756:	d1de      	bne.n	19716 <common_init+0x3e>
	read_supported_commands_complete(rsp);
   19758:	9801      	ldr	r0, [sp, #4]
   1975a:	f7ff f86b 	bl	18834 <read_supported_commands_complete>
	net_buf_unref(rsp);
   1975e:	9801      	ldr	r0, [sp, #4]
   19760:	f011 fc4f 	bl	2b002 <net_buf_unref>
	return 0;
   19764:	e7d7      	b.n	19716 <common_init+0x3e>
   19766:	bf00      	nop
   19768:	20000370 	.word	0x20000370

0001976c <hci_le_read_max_data_len>:
{
   1976c:	b570      	push	{r4, r5, r6, lr}
   1976e:	b082      	sub	sp, #8
   19770:	4605      	mov	r5, r0
   19772:	460c      	mov	r4, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   19774:	aa01      	add	r2, sp, #4
   19776:	2100      	movs	r1, #0
   19778:	f242 002f 	movw	r0, #8239	; 0x202f
   1977c:	f7ff ff0e 	bl	1959c <bt_hci_cmd_send_sync>
	if (err) {
   19780:	4606      	mov	r6, r0
   19782:	b960      	cbnz	r0, 1979e <hci_le_read_max_data_len+0x32>
	rp = (void *)rsp->data;
   19784:	9801      	ldr	r0, [sp, #4]
   19786:	68c3      	ldr	r3, [r0, #12]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   19788:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   1978c:	802a      	strh	r2, [r5, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   1978e:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   19792:	8023      	strh	r3, [r4, #0]
	net_buf_unref(rsp);
   19794:	f011 fc35 	bl	2b002 <net_buf_unref>
}
   19798:	4630      	mov	r0, r6
   1979a:	b002      	add	sp, #8
   1979c:	bd70      	pop	{r4, r5, r6, pc}
		LOG_ERR("Failed to read DLE max data len");
   1979e:	2006      	movs	r0, #6
   197a0:	f7fc fb12 	bl	15dc8 <z_log_msg_alloc>
   197a4:	2200      	movs	r2, #0
   197a6:	f36f 0200 	bfc	r2, #0, #1
   197aa:	f36f 0241 	bfc	r2, #1, #1
   197ae:	f36f 0282 	bfc	r2, #2, #1
   197b2:	f36f 02c5 	bfc	r2, #3, #3
   197b6:	2301      	movs	r3, #1
   197b8:	f363 1288 	bfi	r2, r3, #6, #3
   197bc:	2308      	movs	r3, #8
   197be:	f363 2252 	bfi	r2, r3, #9, #10
   197c2:	f36f 42de 	bfc	r2, #19, #12
   197c6:	f36f 72df 	bfc	r2, #31, #1
   197ca:	4604      	mov	r4, r0
   197cc:	b188      	cbz	r0, 197f2 <hci_le_read_max_data_len+0x86>
   197ce:	f110 0310 	adds.w	r3, r0, #16
   197d2:	d001      	beq.n	197d8 <hci_le_read_max_data_len+0x6c>
   197d4:	490a      	ldr	r1, [pc, #40]	; (19800 <hci_le_read_max_data_len+0x94>)
   197d6:	6141      	str	r1, [r0, #20]
   197d8:	b15b      	cbz	r3, 197f2 <hci_le_read_max_data_len+0x86>
   197da:	2302      	movs	r3, #2
   197dc:	f88d 3000 	strb.w	r3, [sp]
   197e0:	2300      	movs	r3, #0
   197e2:	f88d 3001 	strb.w	r3, [sp, #1]
   197e6:	f88d 3002 	strb.w	r3, [sp, #2]
   197ea:	f88d 3003 	strb.w	r3, [sp, #3]
   197ee:	9800      	ldr	r0, [sp, #0]
   197f0:	6120      	str	r0, [r4, #16]
   197f2:	2300      	movs	r3, #0
   197f4:	4903      	ldr	r1, [pc, #12]	; (19804 <hci_le_read_max_data_len+0x98>)
   197f6:	4620      	mov	r0, r4
   197f8:	f00e faf1 	bl	27dde <z_log_msg_finalize>
		return err;
   197fc:	e7cc      	b.n	19798 <hci_le_read_max_data_len+0x2c>
   197fe:	bf00      	nop
   19800:	0002f8d8 	.word	0x0002f8d8
   19804:	0002de90 	.word	0x0002de90

00019808 <le_set_event_mask>:
{
   19808:	b510      	push	{r4, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   1980a:	2108      	movs	r1, #8
   1980c:	f242 0001 	movw	r0, #8193	; 0x2001
   19810:	f7ff fe86 	bl	19520 <bt_hci_cmd_create>
	if (!buf) {
   19814:	b330      	cbz	r0, 19864 <le_set_event_mask+0x5c>
   19816:	4604      	mov	r4, r0
   19818:	2108      	movs	r1, #8
   1981a:	300c      	adds	r0, #12
   1981c:	f011 fc38 	bl	2b090 <net_buf_simple_add>
   19820:	4602      	mov	r2, r0
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   19822:	4b12      	ldr	r3, [pc, #72]	; (1986c <le_set_event_mask+0x64>)
   19824:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   19828:	f013 0f02 	tst.w	r3, #2
   1982c:	d117      	bne.n	1985e <le_set_event_mask+0x56>
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
   1982e:	200f      	movs	r0, #15
   19830:	2100      	movs	r1, #0
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   19832:	f013 0f20 	tst.w	r3, #32
   19836:	d001      	beq.n	1983c <le_set_event_mask+0x34>
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   19838:	f040 0040 	orr.w	r0, r0, #64	; 0x40
		    (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
   1983c:	4b0b      	ldr	r3, [pc, #44]	; (1986c <le_set_event_mask+0x64>)
   1983e:	f893 30d1 	ldrb.w	r3, [r3, #209]	; 0xd1
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   19842:	f013 0f09 	tst.w	r3, #9
   19846:	d001      	beq.n	1984c <le_set_event_mask+0x44>
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   19848:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
	sys_put_le64(mask, cp_mask->events);
   1984c:	f00e fff0 	bl	28830 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   19850:	2200      	movs	r2, #0
   19852:	4621      	mov	r1, r4
   19854:	f242 0001 	movw	r0, #8193	; 0x2001
   19858:	f7ff fea0 	bl	1959c <bt_hci_cmd_send_sync>
}
   1985c:	bd10      	pop	{r4, pc}
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   1985e:	202f      	movs	r0, #47	; 0x2f
   19860:	2100      	movs	r1, #0
   19862:	e7e6      	b.n	19832 <le_set_event_mask+0x2a>
		return -ENOBUFS;
   19864:	f06f 0068 	mvn.w	r0, #104	; 0x68
   19868:	e7f8      	b.n	1985c <le_set_event_mask+0x54>
   1986a:	bf00      	nop
   1986c:	20000370 	.word	0x20000370

00019870 <le_init>:
{
   19870:	b510      	push	{r4, lr}
   19872:	b084      	sub	sp, #16
	if (!BT_FEAT_LE(bt_dev.features)) {
   19874:	4b5f      	ldr	r3, [pc, #380]	; (199f4 <le_init+0x184>)
   19876:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   1987a:	f013 0f40 	tst.w	r3, #64	; 0x40
   1987e:	d00a      	beq.n	19896 <le_init+0x26>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   19880:	aa03      	add	r2, sp, #12
   19882:	2100      	movs	r1, #0
   19884:	f242 0003 	movw	r0, #8195	; 0x2003
   19888:	f7ff fe88 	bl	1959c <bt_hci_cmd_send_sync>
	if (err) {
   1988c:	4603      	mov	r3, r0
   1988e:	b3a0      	cbz	r0, 198fa <le_init+0x8a>
}
   19890:	4618      	mov	r0, r3
   19892:	b004      	add	sp, #16
   19894:	bd10      	pop	{r4, pc}
		LOG_ERR("Non-LE capable controller detected!");
   19896:	2006      	movs	r0, #6
   19898:	f7fc fa96 	bl	15dc8 <z_log_msg_alloc>
   1989c:	2200      	movs	r2, #0
   1989e:	f36f 0200 	bfc	r2, #0, #1
   198a2:	f36f 0241 	bfc	r2, #1, #1
   198a6:	f36f 0282 	bfc	r2, #2, #1
   198aa:	f36f 02c5 	bfc	r2, #3, #3
   198ae:	2301      	movs	r3, #1
   198b0:	f363 1288 	bfi	r2, r3, #6, #3
   198b4:	2308      	movs	r3, #8
   198b6:	f363 2252 	bfi	r2, r3, #9, #10
   198ba:	f36f 42de 	bfc	r2, #19, #12
   198be:	f36f 72df 	bfc	r2, #31, #1
   198c2:	4604      	mov	r4, r0
   198c4:	b188      	cbz	r0, 198ea <le_init+0x7a>
   198c6:	f110 0310 	adds.w	r3, r0, #16
   198ca:	d001      	beq.n	198d0 <le_init+0x60>
   198cc:	494a      	ldr	r1, [pc, #296]	; (199f8 <le_init+0x188>)
   198ce:	6141      	str	r1, [r0, #20]
   198d0:	b15b      	cbz	r3, 198ea <le_init+0x7a>
   198d2:	2302      	movs	r3, #2
   198d4:	f88d 3008 	strb.w	r3, [sp, #8]
   198d8:	2300      	movs	r3, #0
   198da:	f88d 3009 	strb.w	r3, [sp, #9]
   198de:	f88d 300a 	strb.w	r3, [sp, #10]
   198e2:	f88d 300b 	strb.w	r3, [sp, #11]
   198e6:	9802      	ldr	r0, [sp, #8]
   198e8:	6120      	str	r0, [r4, #16]
   198ea:	2300      	movs	r3, #0
   198ec:	4943      	ldr	r1, [pc, #268]	; (199fc <le_init+0x18c>)
   198ee:	4620      	mov	r0, r4
   198f0:	f00e fa75 	bl	27dde <z_log_msg_finalize>
		return -ENODEV;
   198f4:	f06f 0312 	mvn.w	r3, #18
   198f8:	e7ca      	b.n	19890 <le_init+0x20>
	read_le_features_complete(rsp);
   198fa:	9803      	ldr	r0, [sp, #12]
   198fc:	f7fe ffa4 	bl	18848 <read_le_features_complete>
	net_buf_unref(rsp);
   19900:	9803      	ldr	r0, [sp, #12]
   19902:	f011 fb7e 	bl	2b002 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   19906:	aa03      	add	r2, sp, #12
   19908:	2100      	movs	r1, #0
   1990a:	f242 0002 	movw	r0, #8194	; 0x2002
   1990e:	f7ff fe45 	bl	1959c <bt_hci_cmd_send_sync>
		if (err) {
   19912:	4603      	mov	r3, r0
   19914:	2800      	cmp	r0, #0
   19916:	d1bb      	bne.n	19890 <le_init+0x20>
		le_read_buffer_size_complete(rsp);
   19918:	9803      	ldr	r0, [sp, #12]
   1991a:	f7fe ff9f 	bl	1885c <le_read_buffer_size_complete>
		net_buf_unref(rsp);
   1991e:	9803      	ldr	r0, [sp, #12]
   19920:	f011 fb6f 	bl	2b002 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   19924:	4b33      	ldr	r3, [pc, #204]	; (199f4 <le_init+0x184>)
   19926:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   1992a:	f013 0f20 	tst.w	r3, #32
   1992e:	d032      	beq.n	19996 <le_init+0x126>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   19930:	4b30      	ldr	r3, [pc, #192]	; (199f4 <le_init+0x184>)
   19932:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   19936:	f013 0f08 	tst.w	r3, #8
   1993a:	d144      	bne.n	199c6 <le_init+0x156>
	    BT_FEAT_LE_DLE(bt_dev.le.features)) {
   1993c:	4b2d      	ldr	r3, [pc, #180]	; (199f4 <le_init+0x184>)
   1993e:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   19942:	f013 0f20 	tst.w	r3, #32
   19946:	d022      	beq.n	1998e <le_init+0x11e>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   19948:	a902      	add	r1, sp, #8
   1994a:	f10d 0006 	add.w	r0, sp, #6
   1994e:	f7ff ff0d 	bl	1976c <hci_le_read_max_data_len>
		if (err) {
   19952:	4603      	mov	r3, r0
   19954:	2800      	cmp	r0, #0
   19956:	d19b      	bne.n	19890 <le_init+0x20>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   19958:	2104      	movs	r1, #4
   1995a:	f242 0024 	movw	r0, #8228	; 0x2024
   1995e:	f7ff fddf 	bl	19520 <bt_hci_cmd_create>
		if (!buf) {
   19962:	4604      	mov	r4, r0
   19964:	2800      	cmp	r0, #0
   19966:	d03f      	beq.n	199e8 <le_init+0x178>
   19968:	2104      	movs	r1, #4
   1996a:	300c      	adds	r0, #12
   1996c:	f011 fb90 	bl	2b090 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   19970:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   19974:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   19976:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   1997a:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   1997c:	2200      	movs	r2, #0
   1997e:	4621      	mov	r1, r4
   19980:	f242 0024 	movw	r0, #8228	; 0x2024
   19984:	f7ff fe0a 	bl	1959c <bt_hci_cmd_send_sync>
		if (err) {
   19988:	4603      	mov	r3, r0
   1998a:	2800      	cmp	r0, #0
   1998c:	d180      	bne.n	19890 <le_init+0x20>
	return  le_set_event_mask();
   1998e:	f7ff ff3b 	bl	19808 <le_set_event_mask>
   19992:	4603      	mov	r3, r0
   19994:	e77c      	b.n	19890 <le_init+0x20>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   19996:	2102      	movs	r1, #2
   19998:	f640 406d 	movw	r0, #3181	; 0xc6d
   1999c:	f7ff fdc0 	bl	19520 <bt_hci_cmd_create>
		if (!buf) {
   199a0:	4604      	mov	r4, r0
   199a2:	b320      	cbz	r0, 199ee <le_init+0x17e>
   199a4:	2102      	movs	r1, #2
   199a6:	300c      	adds	r0, #12
   199a8:	f011 fb72 	bl	2b090 <net_buf_simple_add>
		cp_le->le = 0x01;
   199ac:	2301      	movs	r3, #1
   199ae:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   199b0:	2200      	movs	r2, #0
   199b2:	7042      	strb	r2, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   199b4:	4621      	mov	r1, r4
   199b6:	f640 406d 	movw	r0, #3181	; 0xc6d
   199ba:	f7ff fdef 	bl	1959c <bt_hci_cmd_send_sync>
		if (err) {
   199be:	4603      	mov	r3, r0
   199c0:	2800      	cmp	r0, #0
   199c2:	d0b5      	beq.n	19930 <le_init+0xc0>
   199c4:	e764      	b.n	19890 <le_init+0x20>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   199c6:	aa03      	add	r2, sp, #12
   199c8:	2100      	movs	r1, #0
   199ca:	f242 001c 	movw	r0, #8220	; 0x201c
   199ce:	f7ff fde5 	bl	1959c <bt_hci_cmd_send_sync>
		if (err) {
   199d2:	4603      	mov	r3, r0
   199d4:	2800      	cmp	r0, #0
   199d6:	f47f af5b 	bne.w	19890 <le_init+0x20>
		le_read_supp_states_complete(rsp);
   199da:	9803      	ldr	r0, [sp, #12]
   199dc:	f7fe fe66 	bl	186ac <le_read_supp_states_complete>
		net_buf_unref(rsp);
   199e0:	9803      	ldr	r0, [sp, #12]
   199e2:	f011 fb0e 	bl	2b002 <net_buf_unref>
   199e6:	e7a9      	b.n	1993c <le_init+0xcc>
			return -ENOBUFS;
   199e8:	f06f 0368 	mvn.w	r3, #104	; 0x68
   199ec:	e750      	b.n	19890 <le_init+0x20>
			return -ENOBUFS;
   199ee:	f06f 0368 	mvn.w	r3, #104	; 0x68
   199f2:	e74d      	b.n	19890 <le_init+0x20>
   199f4:	20000370 	.word	0x20000370
   199f8:	0002f8f8 	.word	0x0002f8f8
   199fc:	0002de90 	.word	0x0002de90

00019a00 <bt_br_init>:
{
   19a00:	b510      	push	{r4, lr}
   19a02:	b082      	sub	sp, #8
	if (bt_dev.le.acl_mtu) {
   19a04:	4b0b      	ldr	r3, [pc, #44]	; (19a34 <bt_br_init+0x34>)
   19a06:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
   19a0a:	b11b      	cbz	r3, 19a14 <bt_br_init+0x14>
		return 0;
   19a0c:	2400      	movs	r4, #0
}
   19a0e:	4620      	mov	r0, r4
   19a10:	b002      	add	sp, #8
   19a12:	bd10      	pop	{r4, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   19a14:	aa01      	add	r2, sp, #4
   19a16:	2100      	movs	r1, #0
   19a18:	f241 0005 	movw	r0, #4101	; 0x1005
   19a1c:	f7ff fdbe 	bl	1959c <bt_hci_cmd_send_sync>
	if (err) {
   19a20:	4604      	mov	r4, r0
   19a22:	2800      	cmp	r0, #0
   19a24:	d1f3      	bne.n	19a0e <bt_br_init+0xe>
	read_buffer_size_complete(rsp);
   19a26:	9801      	ldr	r0, [sp, #4]
   19a28:	f7fe ff2c 	bl	18884 <read_buffer_size_complete>
	net_buf_unref(rsp);
   19a2c:	9801      	ldr	r0, [sp, #4]
   19a2e:	f011 fae8 	bl	2b002 <net_buf_unref>
	return 0;
   19a32:	e7ec      	b.n	19a0e <bt_br_init+0xe>
   19a34:	20000370 	.word	0x20000370

00019a38 <set_event_mask>:
{
   19a38:	b510      	push	{r4, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   19a3a:	2108      	movs	r1, #8
   19a3c:	f640 4001 	movw	r0, #3073	; 0xc01
   19a40:	f7ff fd6e 	bl	19520 <bt_hci_cmd_create>
	if (!buf) {
   19a44:	b188      	cbz	r0, 19a6a <set_event_mask+0x32>
   19a46:	4604      	mov	r4, r0
   19a48:	2108      	movs	r1, #8
   19a4a:	300c      	adds	r0, #12
   19a4c:	f011 fb20 	bl	2b090 <net_buf_simple_add>
   19a50:	4602      	mov	r2, r0
	sys_put_le64(mask, ev->events);
   19a52:	4807      	ldr	r0, [pc, #28]	; (19a70 <set_event_mask+0x38>)
   19a54:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   19a58:	f00e feea 	bl	28830 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   19a5c:	2200      	movs	r2, #0
   19a5e:	4621      	mov	r1, r4
   19a60:	f640 4001 	movw	r0, #3073	; 0xc01
   19a64:	f7ff fd9a 	bl	1959c <bt_hci_cmd_send_sync>
}
   19a68:	bd10      	pop	{r4, pc}
		return -ENOBUFS;
   19a6a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   19a6e:	e7fb      	b.n	19a68 <set_event_mask+0x30>
   19a70:	02008810 	.word	0x02008810

00019a74 <hci_vs_init>:
{
   19a74:	b510      	push	{r4, lr}
   19a76:	b082      	sub	sp, #8
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   19a78:	aa01      	add	r2, sp, #4
   19a7a:	2100      	movs	r1, #0
   19a7c:	f64f 4001 	movw	r0, #64513	; 0xfc01
   19a80:	f7ff fd8c 	bl	1959c <bt_hci_cmd_send_sync>
	if (err) {
   19a84:	bb60      	cbnz	r0, 19ae0 <hci_vs_init+0x6c>
	net_buf_unref(rsp);
   19a86:	9801      	ldr	r0, [sp, #4]
   19a88:	f011 fabb 	bl	2b002 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   19a8c:	aa01      	add	r2, sp, #4
   19a8e:	2100      	movs	r1, #0
   19a90:	f64f 4002 	movw	r0, #64514	; 0xfc02
   19a94:	f7ff fd82 	bl	1959c <bt_hci_cmd_send_sync>
	if (err) {
   19a98:	2800      	cmp	r0, #0
   19a9a:	d153      	bne.n	19b44 <hci_vs_init+0xd0>
	rp.cmds = (void *)rsp->data;
   19a9c:	9b01      	ldr	r3, [sp, #4]
   19a9e:	68d9      	ldr	r1, [r3, #12]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   19aa0:	4c58      	ldr	r4, [pc, #352]	; (19c04 <hci_vs_init+0x190>)
   19aa2:	2202      	movs	r2, #2
   19aa4:	3101      	adds	r1, #1
   19aa6:	4620      	mov	r0, r4
   19aa8:	f00e fdeb 	bl	28682 <memcpy>
	net_buf_unref(rsp);
   19aac:	9801      	ldr	r0, [sp, #4]
   19aae:	f011 faa8 	bl	2b002 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   19ab2:	7823      	ldrb	r3, [r4, #0]
   19ab4:	f013 0f04 	tst.w	r3, #4
   19ab8:	d042      	beq.n	19b40 <hci_vs_init+0xcc>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   19aba:	aa01      	add	r2, sp, #4
   19abc:	2100      	movs	r1, #0
   19abe:	f64f 4003 	movw	r0, #64515	; 0xfc03
   19ac2:	f7ff fd6b 	bl	1959c <bt_hci_cmd_send_sync>
		if (err) {
   19ac6:	2800      	cmp	r0, #0
   19ac8:	d16c      	bne.n	19ba4 <hci_vs_init+0x130>
		rp.feat = (void *)rsp->data;
   19aca:	9b01      	ldr	r3, [sp, #4]
   19acc:	68d9      	ldr	r1, [r3, #12]
		memcpy(bt_dev.vs_features, rp.feat->features,
   19ace:	2201      	movs	r2, #1
   19ad0:	4411      	add	r1, r2
   19ad2:	484d      	ldr	r0, [pc, #308]	; (19c08 <hci_vs_init+0x194>)
   19ad4:	f00e fdd5 	bl	28682 <memcpy>
		net_buf_unref(rsp);
   19ad8:	9801      	ldr	r0, [sp, #4]
   19ada:	f011 fa92 	bl	2b002 <net_buf_unref>
   19ade:	e02f      	b.n	19b40 <hci_vs_init+0xcc>
		LOG_WRN("Vendor HCI extensions not available");
   19ae0:	2006      	movs	r0, #6
   19ae2:	f7fc f971 	bl	15dc8 <z_log_msg_alloc>
   19ae6:	2200      	movs	r2, #0
   19ae8:	f36f 0200 	bfc	r2, #0, #1
   19aec:	f36f 0241 	bfc	r2, #1, #1
   19af0:	f36f 0282 	bfc	r2, #2, #1
   19af4:	f36f 02c5 	bfc	r2, #3, #3
   19af8:	2302      	movs	r3, #2
   19afa:	f363 1288 	bfi	r2, r3, #6, #3
   19afe:	2308      	movs	r3, #8
   19b00:	f363 2252 	bfi	r2, r3, #9, #10
   19b04:	f36f 42de 	bfc	r2, #19, #12
   19b08:	f36f 72df 	bfc	r2, #31, #1
   19b0c:	4684      	mov	ip, r0
   19b0e:	b190      	cbz	r0, 19b36 <hci_vs_init+0xc2>
   19b10:	f110 0310 	adds.w	r3, r0, #16
   19b14:	d001      	beq.n	19b1a <hci_vs_init+0xa6>
   19b16:	493d      	ldr	r1, [pc, #244]	; (19c0c <hci_vs_init+0x198>)
   19b18:	6141      	str	r1, [r0, #20]
   19b1a:	b163      	cbz	r3, 19b36 <hci_vs_init+0xc2>
   19b1c:	2302      	movs	r3, #2
   19b1e:	f88d 3000 	strb.w	r3, [sp]
   19b22:	2300      	movs	r3, #0
   19b24:	f88d 3001 	strb.w	r3, [sp, #1]
   19b28:	f88d 3002 	strb.w	r3, [sp, #2]
   19b2c:	f88d 3003 	strb.w	r3, [sp, #3]
   19b30:	9800      	ldr	r0, [sp, #0]
   19b32:	f8cc 0010 	str.w	r0, [ip, #16]
   19b36:	2300      	movs	r3, #0
   19b38:	4935      	ldr	r1, [pc, #212]	; (19c10 <hci_vs_init+0x19c>)
   19b3a:	4660      	mov	r0, ip
   19b3c:	f00e f94f 	bl	27dde <z_log_msg_finalize>
}
   19b40:	b002      	add	sp, #8
   19b42:	bd10      	pop	{r4, pc}
		LOG_WRN("Failed to read supported vendor commands");
   19b44:	2006      	movs	r0, #6
   19b46:	f7fc f93f 	bl	15dc8 <z_log_msg_alloc>
   19b4a:	2200      	movs	r2, #0
   19b4c:	f36f 0200 	bfc	r2, #0, #1
   19b50:	f36f 0241 	bfc	r2, #1, #1
   19b54:	f36f 0282 	bfc	r2, #2, #1
   19b58:	f36f 02c5 	bfc	r2, #3, #3
   19b5c:	2302      	movs	r3, #2
   19b5e:	f363 1288 	bfi	r2, r3, #6, #3
   19b62:	2308      	movs	r3, #8
   19b64:	f363 2252 	bfi	r2, r3, #9, #10
   19b68:	f36f 42de 	bfc	r2, #19, #12
   19b6c:	f36f 72df 	bfc	r2, #31, #1
   19b70:	4604      	mov	r4, r0
   19b72:	b188      	cbz	r0, 19b98 <hci_vs_init+0x124>
   19b74:	f110 0310 	adds.w	r3, r0, #16
   19b78:	d001      	beq.n	19b7e <hci_vs_init+0x10a>
   19b7a:	4926      	ldr	r1, [pc, #152]	; (19c14 <hci_vs_init+0x1a0>)
   19b7c:	6141      	str	r1, [r0, #20]
   19b7e:	b15b      	cbz	r3, 19b98 <hci_vs_init+0x124>
   19b80:	2302      	movs	r3, #2
   19b82:	f88d 3000 	strb.w	r3, [sp]
   19b86:	2300      	movs	r3, #0
   19b88:	f88d 3001 	strb.w	r3, [sp, #1]
   19b8c:	f88d 3002 	strb.w	r3, [sp, #2]
   19b90:	f88d 3003 	strb.w	r3, [sp, #3]
   19b94:	9800      	ldr	r0, [sp, #0]
   19b96:	6120      	str	r0, [r4, #16]
   19b98:	2300      	movs	r3, #0
   19b9a:	491d      	ldr	r1, [pc, #116]	; (19c10 <hci_vs_init+0x19c>)
   19b9c:	4620      	mov	r0, r4
   19b9e:	f00e f91e 	bl	27dde <z_log_msg_finalize>
		return;
   19ba2:	e7cd      	b.n	19b40 <hci_vs_init+0xcc>
			LOG_WRN("Failed to read supported vendor features");
   19ba4:	2006      	movs	r0, #6
   19ba6:	f7fc f90f 	bl	15dc8 <z_log_msg_alloc>
   19baa:	2200      	movs	r2, #0
   19bac:	f36f 0200 	bfc	r2, #0, #1
   19bb0:	f36f 0241 	bfc	r2, #1, #1
   19bb4:	f36f 0282 	bfc	r2, #2, #1
   19bb8:	f36f 02c5 	bfc	r2, #3, #3
   19bbc:	2302      	movs	r3, #2
   19bbe:	f363 1288 	bfi	r2, r3, #6, #3
   19bc2:	2308      	movs	r3, #8
   19bc4:	f363 2252 	bfi	r2, r3, #9, #10
   19bc8:	f36f 42de 	bfc	r2, #19, #12
   19bcc:	f36f 72df 	bfc	r2, #31, #1
   19bd0:	4604      	mov	r4, r0
   19bd2:	b188      	cbz	r0, 19bf8 <hci_vs_init+0x184>
   19bd4:	f110 0310 	adds.w	r3, r0, #16
   19bd8:	d001      	beq.n	19bde <hci_vs_init+0x16a>
   19bda:	490f      	ldr	r1, [pc, #60]	; (19c18 <hci_vs_init+0x1a4>)
   19bdc:	6141      	str	r1, [r0, #20]
   19bde:	b15b      	cbz	r3, 19bf8 <hci_vs_init+0x184>
   19be0:	2302      	movs	r3, #2
   19be2:	f88d 3000 	strb.w	r3, [sp]
   19be6:	2300      	movs	r3, #0
   19be8:	f88d 3001 	strb.w	r3, [sp, #1]
   19bec:	f88d 3002 	strb.w	r3, [sp, #2]
   19bf0:	f88d 3003 	strb.w	r3, [sp, #3]
   19bf4:	9800      	ldr	r0, [sp, #0]
   19bf6:	6120      	str	r0, [r4, #16]
   19bf8:	2300      	movs	r3, #0
   19bfa:	4905      	ldr	r1, [pc, #20]	; (19c10 <hci_vs_init+0x19c>)
   19bfc:	4620      	mov	r0, r4
   19bfe:	f00e f8ee 	bl	27dde <z_log_msg_finalize>
			return;
   19c02:	e79d      	b.n	19b40 <hci_vs_init+0xcc>
   19c04:	20000429 	.word	0x20000429
   19c08:	20000428 	.word	0x20000428
   19c0c:	0002f91c 	.word	0x0002f91c
   19c10:	0002de90 	.word	0x0002de90
   19c14:	0002f940 	.word	0x0002f940
   19c18:	0002f96c 	.word	0x0002f96c

00019c1c <hci_init>:
{
   19c1c:	b500      	push	{lr}
   19c1e:	b083      	sub	sp, #12
	err = common_init();
   19c20:	f7ff fd5a 	bl	196d8 <common_init>
	if (err) {
   19c24:	4603      	mov	r3, r0
   19c26:	b118      	cbz	r0, 19c30 <hci_init+0x14>
}
   19c28:	4618      	mov	r0, r3
   19c2a:	b003      	add	sp, #12
   19c2c:	f85d fb04 	ldr.w	pc, [sp], #4
	err = le_init();
   19c30:	f7ff fe1e 	bl	19870 <le_init>
	if (err) {
   19c34:	4603      	mov	r3, r0
   19c36:	2800      	cmp	r0, #0
   19c38:	d1f6      	bne.n	19c28 <hci_init+0xc>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   19c3a:	4b27      	ldr	r3, [pc, #156]	; (19cd8 <hci_init+0xbc>)
   19c3c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   19c40:	f013 0f20 	tst.w	r3, #32
   19c44:	d00e      	beq.n	19c64 <hci_init+0x48>
	else if (!bt_dev.le.acl_mtu) {
   19c46:	4b24      	ldr	r3, [pc, #144]	; (19cd8 <hci_init+0xbc>)
   19c48:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
   19c4c:	b183      	cbz	r3, 19c70 <hci_init+0x54>
	err = set_event_mask();
   19c4e:	f7ff fef3 	bl	19a38 <set_event_mask>
	if (err) {
   19c52:	4603      	mov	r3, r0
   19c54:	2800      	cmp	r0, #0
   19c56:	d1e7      	bne.n	19c28 <hci_init+0xc>
	hci_vs_init();
   19c58:	f7ff ff0c 	bl	19a74 <hci_vs_init>
	err = bt_id_init();
   19c5c:	f001 fb32 	bl	1b2c4 <bt_id_init>
   19c60:	4603      	mov	r3, r0
	if (err) {
   19c62:	e7e1      	b.n	19c28 <hci_init+0xc>
		err = bt_br_init();
   19c64:	f7ff fecc 	bl	19a00 <bt_br_init>
		if (err) {
   19c68:	4603      	mov	r3, r0
   19c6a:	2800      	cmp	r0, #0
   19c6c:	d0ef      	beq.n	19c4e <hci_init+0x32>
   19c6e:	e7db      	b.n	19c28 <hci_init+0xc>
		LOG_ERR("ACL BR/EDR buffers not initialized");
   19c70:	2006      	movs	r0, #6
   19c72:	f7fc f8a9 	bl	15dc8 <z_log_msg_alloc>
   19c76:	2200      	movs	r2, #0
   19c78:	f36f 0200 	bfc	r2, #0, #1
   19c7c:	f36f 0241 	bfc	r2, #1, #1
   19c80:	f36f 0282 	bfc	r2, #2, #1
   19c84:	f36f 02c5 	bfc	r2, #3, #3
   19c88:	2301      	movs	r3, #1
   19c8a:	f363 1288 	bfi	r2, r3, #6, #3
   19c8e:	2308      	movs	r3, #8
   19c90:	f363 2252 	bfi	r2, r3, #9, #10
   19c94:	f36f 42de 	bfc	r2, #19, #12
   19c98:	f36f 72df 	bfc	r2, #31, #1
   19c9c:	4684      	mov	ip, r0
   19c9e:	b190      	cbz	r0, 19cc6 <hci_init+0xaa>
   19ca0:	f110 0310 	adds.w	r3, r0, #16
   19ca4:	d001      	beq.n	19caa <hci_init+0x8e>
   19ca6:	490d      	ldr	r1, [pc, #52]	; (19cdc <hci_init+0xc0>)
   19ca8:	6141      	str	r1, [r0, #20]
   19caa:	b163      	cbz	r3, 19cc6 <hci_init+0xaa>
   19cac:	2302      	movs	r3, #2
   19cae:	f88d 3004 	strb.w	r3, [sp, #4]
   19cb2:	2300      	movs	r3, #0
   19cb4:	f88d 3005 	strb.w	r3, [sp, #5]
   19cb8:	f88d 3006 	strb.w	r3, [sp, #6]
   19cbc:	f88d 3007 	strb.w	r3, [sp, #7]
   19cc0:	9801      	ldr	r0, [sp, #4]
   19cc2:	f8cc 0010 	str.w	r0, [ip, #16]
   19cc6:	2300      	movs	r3, #0
   19cc8:	4905      	ldr	r1, [pc, #20]	; (19ce0 <hci_init+0xc4>)
   19cca:	4660      	mov	r0, ip
   19ccc:	f00e f887 	bl	27dde <z_log_msg_finalize>
		return -EIO;
   19cd0:	f06f 0304 	mvn.w	r3, #4
   19cd4:	e7a8      	b.n	19c28 <hci_init+0xc>
   19cd6:	bf00      	nop
   19cd8:	20000370 	.word	0x20000370
   19cdc:	0002f998 	.word	0x0002f998
   19ce0:	0002de90 	.word	0x0002de90

00019ce4 <bt_le_create_conn_legacy>:
{
   19ce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19ce8:	b086      	sub	sp, #24
   19cea:	4604      	mov	r4, r0
		use_filter = atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT);
   19cec:	2100      	movs	r1, #0
   19cee:	3004      	adds	r0, #4
   19cf0:	f00e fde1 	bl	288b6 <atomic_test_bit>
   19cf4:	4606      	mov	r6, r0
	err = bt_id_set_create_conn_own_addr(use_filter, &own_addr_type);
   19cf6:	f10d 010b 	add.w	r1, sp, #11
   19cfa:	f001 fab1 	bl	1b260 <bt_id_set_create_conn_own_addr>
	if (err) {
   19cfe:	b110      	cbz	r0, 19d06 <bt_le_create_conn_legacy+0x22>
}
   19d00:	b006      	add	sp, #24
   19d02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
   19d06:	2119      	movs	r1, #25
   19d08:	f242 000d 	movw	r0, #8205	; 0x200d
   19d0c:	f7ff fc08 	bl	19520 <bt_hci_cmd_create>
	if (!buf) {
   19d10:	4607      	mov	r7, r0
   19d12:	2800      	cmp	r0, #0
   19d14:	d04b      	beq.n	19dae <bt_le_create_conn_legacy+0xca>
   19d16:	2119      	movs	r1, #25
   19d18:	300c      	adds	r0, #12
   19d1a:	f011 f9b9 	bl	2b090 <net_buf_simple_add>
   19d1e:	4605      	mov	r5, r0
	memset(cp, 0, sizeof(*cp));
   19d20:	2219      	movs	r2, #25
   19d22:	2100      	movs	r1, #0
   19d24:	f00e fcdc 	bl	286e0 <memset>
	cp->own_addr_type = own_addr_type;
   19d28:	f89d 300b 	ldrb.w	r3, [sp, #11]
   19d2c:	732b      	strb	r3, [r5, #12]
	if (use_filter) {
   19d2e:	b35e      	cbz	r6, 19d88 <bt_le_create_conn_legacy+0xa4>
	memcpy(dst, src, sizeof(*dst));
   19d30:	2207      	movs	r2, #7
   19d32:	4920      	ldr	r1, [pc, #128]	; (19db4 <bt_le_create_conn_legacy+0xd0>)
   19d34:	1d68      	adds	r0, r5, #5
   19d36:	f00e fca4 	bl	28682 <memcpy>
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_FILTER;
   19d3a:	2301      	movs	r3, #1
   19d3c:	712b      	strb	r3, [r5, #4]
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
   19d3e:	4a1e      	ldr	r2, [pc, #120]	; (19db8 <bt_le_create_conn_legacy+0xd4>)
   19d40:	8993      	ldrh	r3, [r2, #12]
   19d42:	802b      	strh	r3, [r5, #0]
	cp->scan_window = sys_cpu_to_le16(bt_dev.create_param.window);
   19d44:	89d3      	ldrh	r3, [r2, #14]
   19d46:	806b      	strh	r3, [r5, #2]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
   19d48:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
   19d4c:	f8a5 300d 	strh.w	r3, [r5, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
   19d50:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
   19d54:	f8a5 300f 	strh.w	r3, [r5, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
   19d58:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
   19d5c:	f8a5 3011 	strh.w	r3, [r5, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
   19d60:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   19d64:	f8a5 3013 	strh.w	r3, [r5, #19]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
   19d68:	2301      	movs	r3, #1
   19d6a:	9300      	str	r3, [sp, #0]
   19d6c:	230c      	movs	r3, #12
   19d6e:	32cc      	adds	r2, #204	; 0xcc
   19d70:	eb0d 0103 	add.w	r1, sp, r3
   19d74:	4638      	mov	r0, r7
   19d76:	f7ff fbc1 	bl	194fc <bt_hci_cmd_state_set_init>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
   19d7a:	2200      	movs	r2, #0
   19d7c:	4639      	mov	r1, r7
   19d7e:	f242 000d 	movw	r0, #8205	; 0x200d
   19d82:	f7ff fc0b 	bl	1959c <bt_hci_cmd_send_sync>
   19d86:	e7bb      	b.n	19d00 <bt_le_create_conn_legacy+0x1c>
		const bt_addr_le_t *peer_addr = &conn->le.dst;
   19d88:	f104 0888 	add.w	r8, r4, #136	; 0x88
		if (!bt_addr_le_eq(&conn->le.resp_addr, BT_ADDR_LE_ANY)) {
   19d8c:	f104 0696 	add.w	r6, r4, #150	; 0x96
	return memcmp(a, b, sizeof(*a));
   19d90:	2207      	movs	r2, #7
   19d92:	4908      	ldr	r1, [pc, #32]	; (19db4 <bt_le_create_conn_legacy+0xd0>)
   19d94:	4630      	mov	r0, r6
   19d96:	f00e fc62 	bl	2865e <memcmp>
   19d9a:	b900      	cbnz	r0, 19d9e <bt_le_create_conn_legacy+0xba>
		const bt_addr_le_t *peer_addr = &conn->le.dst;
   19d9c:	4646      	mov	r6, r8
	memcpy(dst, src, sizeof(*dst));
   19d9e:	2207      	movs	r2, #7
   19da0:	4631      	mov	r1, r6
   19da2:	1d68      	adds	r0, r5, #5
   19da4:	f00e fc6d 	bl	28682 <memcpy>
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_NO_FILTER;
   19da8:	2300      	movs	r3, #0
   19daa:	712b      	strb	r3, [r5, #4]
   19dac:	e7c7      	b.n	19d3e <bt_le_create_conn_legacy+0x5a>
		return -ENOBUFS;
   19dae:	f06f 0068 	mvn.w	r0, #104	; 0x68
   19db2:	e7a5      	b.n	19d00 <bt_le_create_conn_legacy+0x1c>
   19db4:	0002f548 	.word	0x0002f548
   19db8:	20000370 	.word	0x20000370

00019dbc <bt_hci_le_rand>:
{
   19dbc:	b570      	push	{r4, r5, r6, lr}
   19dbe:	b082      	sub	sp, #8
   19dc0:	4606      	mov	r6, r0
   19dc2:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   19dc4:	4b12      	ldr	r3, [pc, #72]	; (19e10 <bt_hci_le_rand+0x54>)
   19dc6:	f993 3093 	ldrsb.w	r3, [r3, #147]	; 0x93
   19dca:	2b00      	cmp	r3, #0
   19dcc:	da1d      	bge.n	19e0a <bt_hci_le_rand+0x4e>
	while (len > 0) {
   19dce:	b1c4      	cbz	r4, 19e02 <bt_hci_le_rand+0x46>
		count = MIN(len, sizeof(rp->rand));
   19dd0:	4625      	mov	r5, r4
   19dd2:	2c08      	cmp	r4, #8
   19dd4:	bf28      	it	cs
   19dd6:	2508      	movcs	r5, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   19dd8:	aa01      	add	r2, sp, #4
   19dda:	2100      	movs	r1, #0
   19ddc:	f242 0018 	movw	r0, #8216	; 0x2018
   19de0:	f7ff fbdc 	bl	1959c <bt_hci_cmd_send_sync>
		if (err) {
   19de4:	4603      	mov	r3, r0
   19de6:	b968      	cbnz	r0, 19e04 <bt_hci_le_rand+0x48>
		rp = (void *)rsp->data;
   19de8:	9b01      	ldr	r3, [sp, #4]
   19dea:	68d9      	ldr	r1, [r3, #12]
		memcpy(buffer, rp->rand, count);
   19dec:	462a      	mov	r2, r5
   19dee:	3101      	adds	r1, #1
   19df0:	4630      	mov	r0, r6
   19df2:	f00e fc46 	bl	28682 <memcpy>
		net_buf_unref(rsp);
   19df6:	9801      	ldr	r0, [sp, #4]
   19df8:	f011 f903 	bl	2b002 <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
   19dfc:	442e      	add	r6, r5
		len -= count;
   19dfe:	1b64      	subs	r4, r4, r5
   19e00:	e7e5      	b.n	19dce <bt_hci_le_rand+0x12>
	return 0;
   19e02:	2300      	movs	r3, #0
}
   19e04:	4618      	mov	r0, r3
   19e06:	b002      	add	sp, #8
   19e08:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTSUP;
   19e0a:	f06f 0385 	mvn.w	r3, #133	; 0x85
   19e0e:	e7f9      	b.n	19e04 <bt_hci_le_rand+0x48>
   19e10:	20000370 	.word	0x20000370

00019e14 <le_conn_complete_cancel>:
{
   19e14:	b510      	push	{r4, lr}
   19e16:	b082      	sub	sp, #8
	conn = find_pending_connect(BT_HCI_ROLE_CENTRAL, NULL);
   19e18:	2100      	movs	r1, #0
   19e1a:	4608      	mov	r0, r1
   19e1c:	f7fe fd48 	bl	188b0 <find_pending_connect>
	if (!conn) {
   19e20:	b178      	cbz	r0, 19e42 <le_conn_complete_cancel+0x2e>
   19e22:	4604      	mov	r4, r0
	conn->err = BT_HCI_ERR_UNKNOWN_CONN_ID;
   19e24:	2302      	movs	r3, #2
   19e26:	7243      	strb	r3, [r0, #9]
		if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
   19e28:	2100      	movs	r1, #0
   19e2a:	3004      	adds	r0, #4
   19e2c:	f00e fd43 	bl	288b6 <atomic_test_bit>
   19e30:	b3b8      	cbz	r0, 19ea2 <le_conn_complete_cancel+0x8e>
			bt_le_create_conn(conn);
   19e32:	4620      	mov	r0, r4
   19e34:	f00e fdba 	bl	289ac <bt_le_create_conn>
	bt_conn_unref(conn);
   19e38:	4620      	mov	r0, r4
   19e3a:	f00f f864 	bl	28f06 <bt_conn_unref>
}
   19e3e:	b002      	add	sp, #8
   19e40:	bd10      	pop	{r4, pc}
		LOG_ERR("No pending central connection");
   19e42:	2006      	movs	r0, #6
   19e44:	f7fb ffc0 	bl	15dc8 <z_log_msg_alloc>
   19e48:	2200      	movs	r2, #0
   19e4a:	f36f 0200 	bfc	r2, #0, #1
   19e4e:	f36f 0241 	bfc	r2, #1, #1
   19e52:	f36f 0282 	bfc	r2, #2, #1
   19e56:	f36f 02c5 	bfc	r2, #3, #3
   19e5a:	2301      	movs	r3, #1
   19e5c:	f363 1288 	bfi	r2, r3, #6, #3
   19e60:	2308      	movs	r3, #8
   19e62:	f363 2252 	bfi	r2, r3, #9, #10
   19e66:	f36f 42de 	bfc	r2, #19, #12
   19e6a:	f36f 72df 	bfc	r2, #31, #1
   19e6e:	4604      	mov	r4, r0
   19e70:	b188      	cbz	r0, 19e96 <le_conn_complete_cancel+0x82>
   19e72:	f110 0310 	adds.w	r3, r0, #16
   19e76:	d001      	beq.n	19e7c <le_conn_complete_cancel+0x68>
   19e78:	490c      	ldr	r1, [pc, #48]	; (19eac <le_conn_complete_cancel+0x98>)
   19e7a:	6141      	str	r1, [r0, #20]
   19e7c:	b15b      	cbz	r3, 19e96 <le_conn_complete_cancel+0x82>
   19e7e:	2302      	movs	r3, #2
   19e80:	f88d 3004 	strb.w	r3, [sp, #4]
   19e84:	2300      	movs	r3, #0
   19e86:	f88d 3005 	strb.w	r3, [sp, #5]
   19e8a:	f88d 3006 	strb.w	r3, [sp, #6]
   19e8e:	f88d 3007 	strb.w	r3, [sp, #7]
   19e92:	9801      	ldr	r0, [sp, #4]
   19e94:	6120      	str	r0, [r4, #16]
   19e96:	2300      	movs	r3, #0
   19e98:	4905      	ldr	r1, [pc, #20]	; (19eb0 <le_conn_complete_cancel+0x9c>)
   19e9a:	4620      	mov	r0, r4
   19e9c:	f00d ff9f 	bl	27dde <z_log_msg_finalize>
		return;
   19ea0:	e7cd      	b.n	19e3e <le_conn_complete_cancel+0x2a>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   19ea2:	2100      	movs	r1, #0
   19ea4:	4620      	mov	r0, r4
   19ea6:	f002 f8db 	bl	1c060 <bt_conn_set_state>
   19eaa:	e7c5      	b.n	19e38 <le_conn_complete_cancel+0x24>
   19eac:	0002f9bc 	.word	0x0002f9bc
   19eb0:	0002de90 	.word	0x0002de90

00019eb4 <bt_le_create_conn_cancel>:
{
   19eb4:	b530      	push	{r4, r5, lr}
   19eb6:	b087      	sub	sp, #28
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
   19eb8:	2100      	movs	r1, #0
   19eba:	f242 000e 	movw	r0, #8206	; 0x200e
   19ebe:	f7ff fb2f 	bl	19520 <bt_hci_cmd_create>
   19ec2:	4604      	mov	r4, r0
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
   19ec4:	2500      	movs	r5, #0
   19ec6:	9500      	str	r5, [sp, #0]
   19ec8:	230c      	movs	r3, #12
   19eca:	4a06      	ldr	r2, [pc, #24]	; (19ee4 <bt_le_create_conn_cancel+0x30>)
   19ecc:	eb0d 0103 	add.w	r1, sp, r3
   19ed0:	f7ff fb14 	bl	194fc <bt_hci_cmd_state_set_init>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN_CANCEL, buf, NULL);
   19ed4:	462a      	mov	r2, r5
   19ed6:	4621      	mov	r1, r4
   19ed8:	f242 000e 	movw	r0, #8206	; 0x200e
   19edc:	f7ff fb5e 	bl	1959c <bt_hci_cmd_send_sync>
}
   19ee0:	b007      	add	sp, #28
   19ee2:	bd30      	pop	{r4, r5, pc}
   19ee4:	2000043c 	.word	0x2000043c

00019ee8 <conn_auto_initiate>:
	if (conn->state != BT_CONN_CONNECTED) {
   19ee8:	7a83      	ldrb	r3, [r0, #10]
   19eea:	2b07      	cmp	r3, #7
   19eec:	d000      	beq.n	19ef0 <conn_auto_initiate+0x8>
   19eee:	4770      	bx	lr
{
   19ef0:	b570      	push	{r4, r5, r6, lr}
   19ef2:	b084      	sub	sp, #16
   19ef4:	4604      	mov	r4, r0
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   19ef6:	210d      	movs	r1, #13
   19ef8:	3004      	adds	r0, #4
   19efa:	f00e fcdc 	bl	288b6 <atomic_test_bit>
   19efe:	b960      	cbnz	r0, 19f1a <conn_auto_initiate+0x32>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   19f00:	78e3      	ldrb	r3, [r4, #3]
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   19f02:	b12b      	cbz	r3, 19f10 <conn_auto_initiate+0x28>
	     BT_FEAT_LE_PER_INIT_FEAT_XCHG(bt_dev.le.features))) {
   19f04:	4b6a      	ldr	r3, [pc, #424]	; (1a0b0 <conn_auto_initiate+0x1c8>)
   19f06:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   19f0a:	f013 0f08 	tst.w	r3, #8
   19f0e:	d004      	beq.n	19f1a <conn_auto_initiate+0x32>
		err = hci_le_read_remote_features(conn);
   19f10:	4620      	mov	r0, r4
   19f12:	f00e fd32 	bl	2897a <hci_le_read_remote_features>
		if (err) {
   19f16:	4605      	mov	r5, r0
   19f18:	b9c8      	cbnz	r0, 19f4e <conn_auto_initiate+0x66>
	    BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
   19f1a:	4b65      	ldr	r3, [pc, #404]	; (1a0b0 <conn_auto_initiate+0x1c8>)
   19f1c:	f893 30d1 	ldrb.w	r3, [r3, #209]	; 0xd1
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   19f20:	f013 0f01 	tst.w	r3, #1
   19f24:	d004      	beq.n	19f30 <conn_auto_initiate+0x48>
	    !skip_auto_phy_update_on_conn_establishment(conn)) {
   19f26:	4620      	mov	r0, r4
   19f28:	f00e fcc2 	bl	288b0 <skip_auto_phy_update_on_conn_establishment>
	    BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
   19f2c:	2800      	cmp	r0, #0
   19f2e:	d040      	beq.n	19fb2 <conn_auto_initiate+0xca>
	    BT_FEAT_LE_DLE(bt_dev.le.features)) {
   19f30:	4b5f      	ldr	r3, [pc, #380]	; (1a0b0 <conn_auto_initiate+0x1c8>)
   19f32:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   19f36:	f013 0f20 	tst.w	r3, #32
   19f3a:	d006      	beq.n	19f4a <conn_auto_initiate+0x62>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   19f3c:	4b5c      	ldr	r3, [pc, #368]	; (1a0b0 <conn_auto_initiate+0x1c8>)
   19f3e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
   19f42:	689b      	ldr	r3, [r3, #8]
   19f44:	f013 0f02 	tst.w	r3, #2
   19f48:	d16e      	bne.n	1a028 <conn_auto_initiate+0x140>
}
   19f4a:	b004      	add	sp, #16
   19f4c:	bd70      	pop	{r4, r5, r6, pc}
			LOG_ERR("Failed read remote features (%d)", err);
   19f4e:	2008      	movs	r0, #8
   19f50:	f7fb ff3a 	bl	15dc8 <z_log_msg_alloc>
   19f54:	2200      	movs	r2, #0
   19f56:	f36f 0200 	bfc	r2, #0, #1
   19f5a:	f36f 0241 	bfc	r2, #1, #1
   19f5e:	f36f 0282 	bfc	r2, #2, #1
   19f62:	f36f 02c5 	bfc	r2, #3, #3
   19f66:	2301      	movs	r3, #1
   19f68:	f363 1288 	bfi	r2, r3, #6, #3
   19f6c:	230c      	movs	r3, #12
   19f6e:	f363 2252 	bfi	r2, r3, #9, #10
   19f72:	f36f 42de 	bfc	r2, #19, #12
   19f76:	f36f 72df 	bfc	r2, #31, #1
   19f7a:	4684      	mov	ip, r0
   19f7c:	b198      	cbz	r0, 19fa6 <conn_auto_initiate+0xbe>
   19f7e:	f110 0310 	adds.w	r3, r0, #16
   19f82:	d002      	beq.n	19f8a <conn_auto_initiate+0xa2>
   19f84:	494b      	ldr	r1, [pc, #300]	; (1a0b4 <conn_auto_initiate+0x1cc>)
   19f86:	6141      	str	r1, [r0, #20]
   19f88:	6185      	str	r5, [r0, #24]
   19f8a:	b163      	cbz	r3, 19fa6 <conn_auto_initiate+0xbe>
   19f8c:	2303      	movs	r3, #3
   19f8e:	f88d 300c 	strb.w	r3, [sp, #12]
   19f92:	2300      	movs	r3, #0
   19f94:	f88d 300d 	strb.w	r3, [sp, #13]
   19f98:	f88d 300e 	strb.w	r3, [sp, #14]
   19f9c:	f88d 300f 	strb.w	r3, [sp, #15]
   19fa0:	9803      	ldr	r0, [sp, #12]
   19fa2:	f8cc 0010 	str.w	r0, [ip, #16]
   19fa6:	2300      	movs	r3, #0
   19fa8:	4943      	ldr	r1, [pc, #268]	; (1a0b8 <conn_auto_initiate+0x1d0>)
   19faa:	4660      	mov	r0, ip
   19fac:	f00d ff17 	bl	27dde <z_log_msg_finalize>
   19fb0:	e7b3      	b.n	19f1a <conn_auto_initiate+0x32>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   19fb2:	2100      	movs	r1, #0
   19fb4:	9100      	str	r1, [sp, #0]
   19fb6:	2302      	movs	r3, #2
   19fb8:	461a      	mov	r2, r3
   19fba:	4620      	mov	r0, r4
   19fbc:	f00e fd31 	bl	28a22 <bt_le_set_phy>
		if (err) {
   19fc0:	4606      	mov	r6, r0
   19fc2:	2800      	cmp	r0, #0
   19fc4:	d0b4      	beq.n	19f30 <conn_auto_initiate+0x48>
			LOG_ERR("Failed LE Set PHY (%d)", err);
   19fc6:	2008      	movs	r0, #8
   19fc8:	f7fb fefe 	bl	15dc8 <z_log_msg_alloc>
   19fcc:	2200      	movs	r2, #0
   19fce:	f36f 0200 	bfc	r2, #0, #1
   19fd2:	f36f 0241 	bfc	r2, #1, #1
   19fd6:	f36f 0282 	bfc	r2, #2, #1
   19fda:	f36f 02c5 	bfc	r2, #3, #3
   19fde:	2301      	movs	r3, #1
   19fe0:	f363 1288 	bfi	r2, r3, #6, #3
   19fe4:	230c      	movs	r3, #12
   19fe6:	f363 2252 	bfi	r2, r3, #9, #10
   19fea:	f36f 42de 	bfc	r2, #19, #12
   19fee:	f36f 72df 	bfc	r2, #31, #1
   19ff2:	4605      	mov	r5, r0
   19ff4:	b190      	cbz	r0, 1a01c <conn_auto_initiate+0x134>
   19ff6:	f110 0310 	adds.w	r3, r0, #16
   19ffa:	d002      	beq.n	1a002 <conn_auto_initiate+0x11a>
   19ffc:	492f      	ldr	r1, [pc, #188]	; (1a0bc <conn_auto_initiate+0x1d4>)
   19ffe:	6141      	str	r1, [r0, #20]
   1a000:	6186      	str	r6, [r0, #24]
   1a002:	b15b      	cbz	r3, 1a01c <conn_auto_initiate+0x134>
   1a004:	2303      	movs	r3, #3
   1a006:	f88d 300c 	strb.w	r3, [sp, #12]
   1a00a:	2300      	movs	r3, #0
   1a00c:	f88d 300d 	strb.w	r3, [sp, #13]
   1a010:	f88d 300e 	strb.w	r3, [sp, #14]
   1a014:	f88d 300f 	strb.w	r3, [sp, #15]
   1a018:	9803      	ldr	r0, [sp, #12]
   1a01a:	6128      	str	r0, [r5, #16]
   1a01c:	2300      	movs	r3, #0
   1a01e:	4926      	ldr	r1, [pc, #152]	; (1a0b8 <conn_auto_initiate+0x1d0>)
   1a020:	4628      	mov	r0, r5
   1a022:	f00d fedc 	bl	27dde <z_log_msg_finalize>
   1a026:	e783      	b.n	19f30 <conn_auto_initiate+0x48>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   1a028:	f10d 010a 	add.w	r1, sp, #10
   1a02c:	a802      	add	r0, sp, #8
   1a02e:	f7ff fb9d 	bl	1976c <hci_le_read_max_data_len>
			if (!err) {
   1a032:	2800      	cmp	r0, #0
   1a034:	d189      	bne.n	19f4a <conn_auto_initiate+0x62>
				err = bt_le_set_data_len(conn,
   1a036:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   1a03a:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   1a03e:	4620      	mov	r0, r4
   1a040:	f00e fcd2 	bl	289e8 <bt_le_set_data_len>
				if (err) {
   1a044:	4605      	mov	r5, r0
   1a046:	2800      	cmp	r0, #0
   1a048:	f43f af7f 	beq.w	19f4a <conn_auto_initiate+0x62>
					LOG_ERR("Failed to set data len (%d)", err);
   1a04c:	2008      	movs	r0, #8
   1a04e:	f7fb febb 	bl	15dc8 <z_log_msg_alloc>
   1a052:	2200      	movs	r2, #0
   1a054:	f36f 0200 	bfc	r2, #0, #1
   1a058:	f36f 0241 	bfc	r2, #1, #1
   1a05c:	f36f 0282 	bfc	r2, #2, #1
   1a060:	f36f 02c5 	bfc	r2, #3, #3
   1a064:	2301      	movs	r3, #1
   1a066:	f363 1288 	bfi	r2, r3, #6, #3
   1a06a:	230c      	movs	r3, #12
   1a06c:	f363 2252 	bfi	r2, r3, #9, #10
   1a070:	f36f 42de 	bfc	r2, #19, #12
   1a074:	f36f 72df 	bfc	r2, #31, #1
   1a078:	4604      	mov	r4, r0
   1a07a:	b190      	cbz	r0, 1a0a2 <conn_auto_initiate+0x1ba>
   1a07c:	f110 0310 	adds.w	r3, r0, #16
   1a080:	d002      	beq.n	1a088 <conn_auto_initiate+0x1a0>
   1a082:	490f      	ldr	r1, [pc, #60]	; (1a0c0 <conn_auto_initiate+0x1d8>)
   1a084:	6141      	str	r1, [r0, #20]
   1a086:	6185      	str	r5, [r0, #24]
   1a088:	b15b      	cbz	r3, 1a0a2 <conn_auto_initiate+0x1ba>
   1a08a:	2303      	movs	r3, #3
   1a08c:	f88d 300c 	strb.w	r3, [sp, #12]
   1a090:	2300      	movs	r3, #0
   1a092:	f88d 300d 	strb.w	r3, [sp, #13]
   1a096:	f88d 300e 	strb.w	r3, [sp, #14]
   1a09a:	f88d 300f 	strb.w	r3, [sp, #15]
   1a09e:	9803      	ldr	r0, [sp, #12]
   1a0a0:	6120      	str	r0, [r4, #16]
   1a0a2:	2300      	movs	r3, #0
   1a0a4:	4904      	ldr	r1, [pc, #16]	; (1a0b8 <conn_auto_initiate+0x1d0>)
   1a0a6:	4620      	mov	r0, r4
   1a0a8:	f00d fe99 	bl	27dde <z_log_msg_finalize>
		}
   1a0ac:	e74d      	b.n	19f4a <conn_auto_initiate+0x62>
   1a0ae:	bf00      	nop
   1a0b0:	20000370 	.word	0x20000370
   1a0b4:	0002f9dc 	.word	0x0002f9dc
   1a0b8:	0002de90 	.word	0x0002de90
   1a0bc:	0002fa00 	.word	0x0002fa00
   1a0c0:	0002fa18 	.word	0x0002fa18

0001a0c4 <bt_hci_le_enh_conn_complete>:
{
   1a0c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a0c8:	b087      	sub	sp, #28
   1a0ca:	af00      	add	r7, sp, #0
   1a0cc:	4604      	mov	r4, r0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1a0ce:	f8b0 8001 	ldrh.w	r8, [r0, #1]
   1a0d2:	fa1f f988 	uxth.w	r9, r8
	bool is_disconnected = conn_handle_is_disconnected(handle);
   1a0d6:	4648      	mov	r0, r9
   1a0d8:	f7fe fabc 	bl	18654 <conn_handle_is_disconnected>
   1a0dc:	4606      	mov	r6, r0
	if (evt->status) {
   1a0de:	7820      	ldrb	r0, [r4, #0]
   1a0e0:	b3c0      	cbz	r0, 1a154 <bt_hci_le_enh_conn_complete+0x90>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1a0e2:	2802      	cmp	r0, #2
   1a0e4:	d030      	beq.n	1a148 <bt_hci_le_enh_conn_complete+0x84>
		LOG_WRN("Unexpected status 0x%02x", evt->status);
   1a0e6:	4604      	mov	r4, r0
   1a0e8:	2008      	movs	r0, #8
   1a0ea:	f7fb fe6d 	bl	15dc8 <z_log_msg_alloc>
   1a0ee:	2200      	movs	r2, #0
   1a0f0:	f36f 0200 	bfc	r2, #0, #1
   1a0f4:	f36f 0241 	bfc	r2, #1, #1
   1a0f8:	f36f 0282 	bfc	r2, #2, #1
   1a0fc:	f36f 02c5 	bfc	r2, #3, #3
   1a100:	2302      	movs	r3, #2
   1a102:	f363 1288 	bfi	r2, r3, #6, #3
   1a106:	230c      	movs	r3, #12
   1a108:	f363 2252 	bfi	r2, r3, #9, #10
   1a10c:	f36f 42de 	bfc	r2, #19, #12
   1a110:	f36f 72df 	bfc	r2, #31, #1
   1a114:	4605      	mov	r5, r0
   1a116:	b170      	cbz	r0, 1a136 <bt_hci_le_enh_conn_complete+0x72>
   1a118:	f110 0310 	adds.w	r3, r0, #16
   1a11c:	d002      	beq.n	1a124 <bt_hci_le_enh_conn_complete+0x60>
   1a11e:	4982      	ldr	r1, [pc, #520]	; (1a328 <bt_hci_le_enh_conn_complete+0x264>)
   1a120:	6141      	str	r1, [r0, #20]
   1a122:	6184      	str	r4, [r0, #24]
   1a124:	b13b      	cbz	r3, 1a136 <bt_hci_le_enh_conn_complete+0x72>
   1a126:	2303      	movs	r3, #3
   1a128:	713b      	strb	r3, [r7, #4]
   1a12a:	2300      	movs	r3, #0
   1a12c:	717b      	strb	r3, [r7, #5]
   1a12e:	71bb      	strb	r3, [r7, #6]
   1a130:	71fb      	strb	r3, [r7, #7]
   1a132:	6878      	ldr	r0, [r7, #4]
   1a134:	6128      	str	r0, [r5, #16]
   1a136:	2300      	movs	r3, #0
   1a138:	497c      	ldr	r1, [pc, #496]	; (1a32c <bt_hci_le_enh_conn_complete+0x268>)
   1a13a:	4628      	mov	r0, r5
   1a13c:	f00d fe4f 	bl	27dde <z_log_msg_finalize>
}
   1a140:	371c      	adds	r7, #28
   1a142:	46bd      	mov	sp, r7
   1a144:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			le_conn_complete_cancel();
   1a148:	f7ff fe64 	bl	19e14 <le_conn_complete_cancel>
			bt_le_scan_update(false);
   1a14c:	2000      	movs	r0, #0
   1a14e:	f001 fa03 	bl	1b558 <bt_le_scan_update>
			return;
   1a152:	e7f5      	b.n	1a140 <bt_hci_le_enh_conn_complete+0x7c>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   1a154:	7923      	ldrb	r3, [r4, #4]
   1a156:	3b02      	subs	r3, #2
   1a158:	b2db      	uxtb	r3, r3
   1a15a:	2b01      	cmp	r3, #1
   1a15c:	d95b      	bls.n	1a216 <bt_hci_le_enh_conn_complete+0x152>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   1a15e:	78e3      	ldrb	r3, [r4, #3]
   1a160:	2b01      	cmp	r3, #1
   1a162:	d06b      	beq.n	1a23c <bt_hci_le_enh_conn_complete+0x178>
				bt_lookup_id_addr(id, &evt->peer_addr));
   1a164:	1d25      	adds	r5, r4, #4
		bt_addr_le_copy(&id_addr,
   1a166:	4629      	mov	r1, r5
   1a168:	f00e fceb 	bl	28b42 <bt_lookup_id_addr>
   1a16c:	4601      	mov	r1, r0
   1a16e:	2207      	movs	r2, #7
   1a170:	f107 0008 	add.w	r0, r7, #8
   1a174:	f00e fa85 	bl	28682 <memcpy>
   1a178:	2207      	movs	r2, #7
   1a17a:	4629      	mov	r1, r5
   1a17c:	f107 0010 	add.w	r0, r7, #16
   1a180:	f00e fa7f 	bl	28682 <memcpy>
	conn = find_pending_connect(evt->role, &id_addr);
   1a184:	f107 0108 	add.w	r1, r7, #8
   1a188:	78e0      	ldrb	r0, [r4, #3]
   1a18a:	f7fe fb91 	bl	188b0 <find_pending_connect>
   1a18e:	4605      	mov	r5, r0
	    evt->role == BT_HCI_ROLE_CENTRAL) {
   1a190:	78e3      	ldrb	r3, [r4, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1a192:	b963      	cbnz	r3, 1a1ae <bt_hci_le_enh_conn_complete+0xea>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1a194:	4b66      	ldr	r3, [pc, #408]	; (1a330 <bt_hci_le_enh_conn_complete+0x26c>)
   1a196:	f3bf 8f5b 	dmb	ish
   1a19a:	e853 1f00 	ldrex	r1, [r3]
   1a19e:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   1a1a2:	e843 1200 	strex	r2, r1, [r3]
   1a1a6:	2a00      	cmp	r2, #0
   1a1a8:	d1f7      	bne.n	1a19a <bt_hci_le_enh_conn_complete+0xd6>
   1a1aa:	f3bf 8f5b 	dmb	ish
	if (!conn) {
   1a1ae:	2d00      	cmp	r5, #0
   1a1b0:	d048      	beq.n	1a244 <bt_hci_le_enh_conn_complete+0x180>
	conn->handle = handle;
   1a1b2:	4628      	mov	r0, r5
   1a1b4:	f820 8b88 	strh.w	r8, [r0], #136
   1a1b8:	2207      	movs	r2, #7
   1a1ba:	f107 0108 	add.w	r1, r7, #8
   1a1be:	f00e fa60 	bl	28682 <memcpy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   1a1c2:	f8b4 3017 	ldrh.w	r3, [r4, #23]
   1a1c6:	f8a5 309e 	strh.w	r3, [r5, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   1a1ca:	f8b4 3019 	ldrh.w	r3, [r4, #25]
   1a1ce:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   1a1d2:	f8b4 301b 	ldrh.w	r3, [r4, #27]
   1a1d6:	f8a5 30a6 	strh.w	r3, [r5, #166]	; 0xa6
	conn->role = evt->role;
   1a1da:	78e3      	ldrb	r3, [r4, #3]
   1a1dc:	70eb      	strb	r3, [r5, #3]
	conn->err = 0U;
   1a1de:	2200      	movs	r2, #0
   1a1e0:	726a      	strb	r2, [r5, #9]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1a1e2:	2b00      	cmp	r3, #0
   1a1e4:	f000 8088 	beq.w	1a2f8 <bt_hci_le_enh_conn_complete+0x234>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   1a1e8:	2107      	movs	r1, #7
   1a1ea:	4628      	mov	r0, r5
   1a1ec:	f001 ff38 	bl	1c060 <bt_conn_set_state>
	if (is_disconnected) {
   1a1f0:	2e00      	cmp	r6, #0
   1a1f2:	f040 8093 	bne.w	1a31c <bt_hci_le_enh_conn_complete+0x258>
	bt_conn_connected(conn);
   1a1f6:	4628      	mov	r0, r5
   1a1f8:	f00e febe 	bl	28f78 <bt_conn_connected>
	conn_auto_initiate(conn);
   1a1fc:	4628      	mov	r0, r5
   1a1fe:	f7ff fe73 	bl	19ee8 <conn_auto_initiate>
	bt_conn_unref(conn);
   1a202:	4628      	mov	r0, r5
   1a204:	f00e fe7f 	bl	28f06 <bt_conn_unref>
	    conn->role == BT_HCI_ROLE_CENTRAL) {
   1a208:	78eb      	ldrb	r3, [r5, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1a20a:	2b00      	cmp	r3, #0
   1a20c:	d198      	bne.n	1a140 <bt_hci_le_enh_conn_complete+0x7c>
		bt_le_scan_update(false);
   1a20e:	2000      	movs	r0, #0
   1a210:	f001 f9a2 	bl	1b558 <bt_le_scan_update>
   1a214:	e794      	b.n	1a140 <bt_hci_le_enh_conn_complete+0x7c>
   1a216:	2207      	movs	r2, #7
   1a218:	1d21      	adds	r1, r4, #4
   1a21a:	f107 0008 	add.w	r0, r7, #8
   1a21e:	f00e fa30 	bl	28682 <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   1a222:	7a3b      	ldrb	r3, [r7, #8]
   1a224:	3b02      	subs	r3, #2
   1a226:	723b      	strb	r3, [r7, #8]
	memcpy(dst, src, sizeof(*dst));
   1a228:	2206      	movs	r2, #6
   1a22a:	f104 0111 	add.w	r1, r4, #17
   1a22e:	f107 0011 	add.w	r0, r7, #17
   1a232:	f00e fa26 	bl	28682 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   1a236:	2301      	movs	r3, #1
   1a238:	743b      	strb	r3, [r7, #16]
   1a23a:	e7a3      	b.n	1a184 <bt_hci_le_enh_conn_complete+0xc0>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   1a23c:	4b3d      	ldr	r3, [pc, #244]	; (1a334 <bt_hci_le_enh_conn_complete+0x270>)
   1a23e:	f893 0067 	ldrb.w	r0, [r3, #103]	; 0x67
   1a242:	e78f      	b.n	1a164 <bt_hci_le_enh_conn_complete+0xa0>
		LOG_ERR("No pending conn for peer %s", bt_addr_le_str(&evt->peer_addr));
   1a244:	1d20      	adds	r0, r4, #4
   1a246:	f7fe f88f 	bl	18368 <bt_addr_le_str>
   1a24a:	466d      	mov	r5, sp
   1a24c:	2300      	movs	r3, #0
   1a24e:	713b      	strb	r3, [r7, #4]
   1a250:	2302      	movs	r3, #2
   1a252:	717b      	strb	r3, [r7, #5]
   1a254:	b088      	sub	sp, #32
   1a256:	466c      	mov	r4, sp
   1a258:	f114 0210 	adds.w	r2, r4, #16
   1a25c:	d011      	beq.n	1a282 <bt_hci_le_enh_conn_complete+0x1be>
   1a25e:	260e      	movs	r6, #14
   1a260:	b11a      	cbz	r2, 1a26a <bt_hci_le_enh_conn_complete+0x1a6>
   1a262:	2e04      	cmp	r6, #4
   1a264:	dd01      	ble.n	1a26a <bt_hci_le_enh_conn_complete+0x1a6>
   1a266:	4b34      	ldr	r3, [pc, #208]	; (1a338 <bt_hci_le_enh_conn_complete+0x274>)
   1a268:	6163      	str	r3, [r4, #20]
   1a26a:	2300      	movs	r3, #0
   1a26c:	703b      	strb	r3, [r7, #0]
   1a26e:	2302      	movs	r3, #2
   1a270:	707b      	strb	r3, [r7, #1]
   1a272:	b19a      	cbz	r2, 1a29c <bt_hci_le_enh_conn_complete+0x1d8>
   1a274:	2e08      	cmp	r6, #8
   1a276:	dd00      	ble.n	1a27a <bt_hci_le_enh_conn_complete+0x1b6>
   1a278:	61a0      	str	r0, [r4, #24]
   1a27a:	f104 031c 	add.w	r3, r4, #28
   1a27e:	2100      	movs	r1, #0
   1a280:	e00a      	b.n	1a298 <bt_hci_le_enh_conn_complete+0x1d4>
   1a282:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   1a286:	e7eb      	b.n	1a260 <bt_hci_le_enh_conn_complete+0x19c>
   1a288:	f101 0018 	add.w	r0, r1, #24
   1a28c:	4438      	add	r0, r7
   1a28e:	f810 0c18 	ldrb.w	r0, [r0, #-24]
   1a292:	f803 0b01 	strb.w	r0, [r3], #1
   1a296:	3101      	adds	r1, #1
   1a298:	2901      	cmp	r1, #1
   1a29a:	d9f5      	bls.n	1a288 <bt_hci_le_enh_conn_complete+0x1c4>
   1a29c:	2e0d      	cmp	r6, #13
   1a29e:	dd28      	ble.n	1a2f2 <bt_hci_le_enh_conn_complete+0x22e>
   1a2a0:	230e      	movs	r3, #14
   1a2a2:	b142      	cbz	r2, 1a2b6 <bt_hci_le_enh_conn_complete+0x1f2>
   1a2a4:	2103      	movs	r1, #3
   1a2a6:	7139      	strb	r1, [r7, #4]
   1a2a8:	2100      	movs	r1, #0
   1a2aa:	7179      	strb	r1, [r7, #5]
   1a2ac:	71b9      	strb	r1, [r7, #6]
   1a2ae:	2101      	movs	r1, #1
   1a2b0:	71f9      	strb	r1, [r7, #7]
   1a2b2:	6878      	ldr	r0, [r7, #4]
   1a2b4:	6120      	str	r0, [r4, #16]
   1a2b6:	2100      	movs	r1, #0
   1a2b8:	f36f 0100 	bfc	r1, #0, #1
   1a2bc:	f36f 0141 	bfc	r1, #1, #1
   1a2c0:	f36f 0182 	bfc	r1, #2, #1
   1a2c4:	f36f 01c5 	bfc	r1, #3, #3
   1a2c8:	2001      	movs	r0, #1
   1a2ca:	f360 1188 	bfi	r1, r0, #6, #3
   1a2ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
   1a2d2:	f363 2152 	bfi	r1, r3, #9, #10
   1a2d6:	f36f 41de 	bfc	r1, #19, #12
   1a2da:	f36f 71df 	bfc	r1, #31, #1
   1a2de:	2300      	movs	r3, #0
   1a2e0:	4812      	ldr	r0, [pc, #72]	; (1a32c <bt_hci_le_enh_conn_complete+0x268>)
   1a2e2:	f00d fd94 	bl	27e0e <z_impl_z_log_msg_static_create>
   1a2e6:	46ad      	mov	sp, r5
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   1a2e8:	211f      	movs	r1, #31
   1a2ea:	4648      	mov	r0, r9
   1a2ec:	f00e fb62 	bl	289b4 <bt_hci_disconnect>
		return;
   1a2f0:	e726      	b.n	1a140 <bt_hci_le_enh_conn_complete+0x7c>
		LOG_ERR("No pending conn for peer %s", bt_addr_le_str(&evt->peer_addr));
   1a2f2:	f06f 031b 	mvn.w	r3, #27
   1a2f6:	e7d4      	b.n	1a2a2 <bt_hci_le_enh_conn_complete+0x1de>
	memcpy(dst, src, sizeof(*dst));
   1a2f8:	2207      	movs	r2, #7
   1a2fa:	f107 0110 	add.w	r1, r7, #16
   1a2fe:	f105 0096 	add.w	r0, r5, #150	; 0x96
   1a302:	f00e f9be 	bl	28682 <memcpy>
					&bt_dev.id_addr[conn->id]);
   1a306:	7a29      	ldrb	r1, [r5, #8]
   1a308:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
   1a30c:	2207      	movs	r2, #7
   1a30e:	4b09      	ldr	r3, [pc, #36]	; (1a334 <bt_hci_le_enh_conn_complete+0x270>)
   1a310:	4419      	add	r1, r3
   1a312:	f105 008f 	add.w	r0, r5, #143	; 0x8f
   1a316:	f00e f9b4 	bl	28682 <memcpy>
}
   1a31a:	e765      	b.n	1a1e8 <bt_hci_le_enh_conn_complete+0x124>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   1a31c:	2101      	movs	r1, #1
   1a31e:	4628      	mov	r0, r5
   1a320:	f001 fe9e 	bl	1c060 <bt_conn_set_state>
   1a324:	e767      	b.n	1a1f6 <bt_hci_le_enh_conn_complete+0x132>
   1a326:	bf00      	nop
   1a328:	0002fa34 	.word	0x0002fa34
   1a32c:	0002de90 	.word	0x0002de90
   1a330:	2000043c 	.word	0x2000043c
   1a334:	20000370 	.word	0x20000370
   1a338:	0002fa50 	.word	0x0002fa50

0001a33c <le_legacy_conn_complete>:
{
   1a33c:	b510      	push	{r4, lr}
   1a33e:	b088      	sub	sp, #32
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   1a340:	68c1      	ldr	r1, [r0, #12]
	enh.status         = evt->status;
   1a342:	780b      	ldrb	r3, [r1, #0]
   1a344:	f88d 3000 	strb.w	r3, [sp]
	enh.handle         = evt->handle;
   1a348:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   1a34c:	f8ad 3001 	strh.w	r3, [sp, #1]
	enh.role           = evt->role;
   1a350:	78cb      	ldrb	r3, [r1, #3]
   1a352:	f88d 3003 	strb.w	r3, [sp, #3]
	enh.interval       = evt->interval;
   1a356:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   1a35a:	f8ad 3017 	strh.w	r3, [sp, #23]
	enh.latency        = evt->latency;
   1a35e:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   1a362:	f8ad 3019 	strh.w	r3, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
   1a366:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   1a36a:	f8ad 301b 	strh.w	r3, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
   1a36e:	7c4b      	ldrb	r3, [r1, #17]
   1a370:	f88d 301d 	strb.w	r3, [sp, #29]
	memcpy(dst, src, sizeof(*dst));
   1a374:	2207      	movs	r2, #7
   1a376:	3104      	adds	r1, #4
   1a378:	a801      	add	r0, sp, #4
   1a37a:	f00e f982 	bl	28682 <memcpy>
	memcpy(dst, src, sizeof(*dst));
   1a37e:	4c09      	ldr	r4, [pc, #36]	; (1a3a4 <le_legacy_conn_complete+0x68>)
   1a380:	2206      	movs	r2, #6
   1a382:	4621      	mov	r1, r4
   1a384:	f10d 000b 	add.w	r0, sp, #11
   1a388:	f00e f97b 	bl	28682 <memcpy>
   1a38c:	2206      	movs	r2, #6
   1a38e:	4621      	mov	r1, r4
   1a390:	f10d 0011 	add.w	r0, sp, #17
   1a394:	f00e f975 	bl	28682 <memcpy>
	enh_conn_complete(&enh);
   1a398:	4668      	mov	r0, sp
   1a39a:	f00e fb67 	bl	28a6c <enh_conn_complete>
}
   1a39e:	b008      	add	sp, #32
   1a3a0:	bd10      	pop	{r4, pc}
   1a3a2:	bf00      	nop
   1a3a4:	0002f558 	.word	0x0002f558

0001a3a8 <bt_send>:
{
   1a3a8:	b508      	push	{r3, lr}
	return bt_dev.drv->send(buf);
   1a3aa:	4b03      	ldr	r3, [pc, #12]	; (1a3b8 <bt_send+0x10>)
   1a3ac:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
   1a3b0:	695b      	ldr	r3, [r3, #20]
   1a3b2:	4798      	blx	r3
}
   1a3b4:	bd08      	pop	{r3, pc}
   1a3b6:	bf00      	nop
   1a3b8:	20000370 	.word	0x20000370

0001a3bc <bt_hci_cmd_send>:
{
   1a3bc:	b530      	push	{r4, r5, lr}
   1a3be:	b083      	sub	sp, #12
   1a3c0:	4604      	mov	r4, r0
	if (!buf) {
   1a3c2:	460d      	mov	r5, r1
   1a3c4:	b159      	cbz	r1, 1a3de <bt_hci_cmd_send+0x22>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   1a3c6:	f640 4335 	movw	r3, #3125	; 0xc35
   1a3ca:	429c      	cmp	r4, r3
   1a3cc:	d00f      	beq.n	1a3ee <bt_hci_cmd_send+0x32>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   1a3ce:	4629      	mov	r1, r5
   1a3d0:	4824      	ldr	r0, [pc, #144]	; (1a464 <bt_hci_cmd_send+0xa8>)
   1a3d2:	f010 fe12 	bl	2affa <net_buf_put>
	return 0;
   1a3d6:	2400      	movs	r4, #0
}
   1a3d8:	4620      	mov	r0, r4
   1a3da:	b003      	add	sp, #12
   1a3dc:	bd30      	pop	{r4, r5, pc}
		buf = bt_hci_cmd_create(opcode, 0);
   1a3de:	f7ff f89f 	bl	19520 <bt_hci_cmd_create>
		if (!buf) {
   1a3e2:	4605      	mov	r5, r0
   1a3e4:	2800      	cmp	r0, #0
   1a3e6:	d1ee      	bne.n	1a3c6 <bt_hci_cmd_send+0xa>
			return -ENOBUFS;
   1a3e8:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1a3ec:	e7f4      	b.n	1a3d8 <bt_hci_cmd_send+0x1c>
		err = bt_send(buf);
   1a3ee:	4628      	mov	r0, r5
   1a3f0:	f7ff ffda 	bl	1a3a8 <bt_send>
		if (err) {
   1a3f4:	4604      	mov	r4, r0
   1a3f6:	2800      	cmp	r0, #0
   1a3f8:	d0ee      	beq.n	1a3d8 <bt_hci_cmd_send+0x1c>
			LOG_ERR("Unable to send to driver (err %d)", err);
   1a3fa:	2008      	movs	r0, #8
   1a3fc:	f7fb fce4 	bl	15dc8 <z_log_msg_alloc>
   1a400:	2200      	movs	r2, #0
   1a402:	f36f 0200 	bfc	r2, #0, #1
   1a406:	f36f 0241 	bfc	r2, #1, #1
   1a40a:	f36f 0282 	bfc	r2, #2, #1
   1a40e:	f36f 02c5 	bfc	r2, #3, #3
   1a412:	2301      	movs	r3, #1
   1a414:	f363 1288 	bfi	r2, r3, #6, #3
   1a418:	230c      	movs	r3, #12
   1a41a:	f363 2252 	bfi	r2, r3, #9, #10
   1a41e:	f36f 42de 	bfc	r2, #19, #12
   1a422:	f36f 72df 	bfc	r2, #31, #1
   1a426:	4684      	mov	ip, r0
   1a428:	b198      	cbz	r0, 1a452 <bt_hci_cmd_send+0x96>
   1a42a:	f110 0310 	adds.w	r3, r0, #16
   1a42e:	d002      	beq.n	1a436 <bt_hci_cmd_send+0x7a>
   1a430:	490d      	ldr	r1, [pc, #52]	; (1a468 <bt_hci_cmd_send+0xac>)
   1a432:	6141      	str	r1, [r0, #20]
   1a434:	6184      	str	r4, [r0, #24]
   1a436:	b163      	cbz	r3, 1a452 <bt_hci_cmd_send+0x96>
   1a438:	2303      	movs	r3, #3
   1a43a:	f88d 3004 	strb.w	r3, [sp, #4]
   1a43e:	2300      	movs	r3, #0
   1a440:	f88d 3005 	strb.w	r3, [sp, #5]
   1a444:	f88d 3006 	strb.w	r3, [sp, #6]
   1a448:	f88d 3007 	strb.w	r3, [sp, #7]
   1a44c:	9801      	ldr	r0, [sp, #4]
   1a44e:	f8cc 0010 	str.w	r0, [ip, #16]
   1a452:	2300      	movs	r3, #0
   1a454:	4905      	ldr	r1, [pc, #20]	; (1a46c <bt_hci_cmd_send+0xb0>)
   1a456:	4660      	mov	r0, ip
   1a458:	f00d fcc1 	bl	27dde <z_log_msg_finalize>
			net_buf_unref(buf);
   1a45c:	4628      	mov	r0, r5
   1a45e:	f010 fdd0 	bl	2b002 <net_buf_unref>
		return err;
   1a462:	e7b9      	b.n	1a3d8 <bt_hci_cmd_send+0x1c>
   1a464:	200004ac 	.word	0x200004ac
   1a468:	0002fa6c 	.word	0x0002fa6c
   1a46c:	0002de90 	.word	0x0002de90

0001a470 <le_conn_param_neg_reply>:
{
   1a470:	b570      	push	{r4, r5, r6, lr}
   1a472:	b082      	sub	sp, #8
   1a474:	4605      	mov	r5, r0
   1a476:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   1a478:	2103      	movs	r1, #3
   1a47a:	f242 0021 	movw	r0, #8225	; 0x2021
   1a47e:	f7ff f84f 	bl	19520 <bt_hci_cmd_create>
	if (!buf) {
   1a482:	b168      	cbz	r0, 1a4a0 <le_conn_param_neg_reply+0x30>
   1a484:	4606      	mov	r6, r0
   1a486:	2103      	movs	r1, #3
   1a488:	300c      	adds	r0, #12
   1a48a:	f010 fe01 	bl	2b090 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   1a48e:	8005      	strh	r5, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
   1a490:	7084      	strb	r4, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1a492:	4631      	mov	r1, r6
   1a494:	f242 0021 	movw	r0, #8225	; 0x2021
   1a498:	f7ff ff90 	bl	1a3bc <bt_hci_cmd_send>
}
   1a49c:	b002      	add	sp, #8
   1a49e:	bd70      	pop	{r4, r5, r6, pc}
		LOG_ERR("Unable to allocate buffer");
   1a4a0:	2006      	movs	r0, #6
   1a4a2:	f7fb fc91 	bl	15dc8 <z_log_msg_alloc>
   1a4a6:	2200      	movs	r2, #0
   1a4a8:	f36f 0200 	bfc	r2, #0, #1
   1a4ac:	f36f 0241 	bfc	r2, #1, #1
   1a4b0:	f36f 0282 	bfc	r2, #2, #1
   1a4b4:	f36f 02c5 	bfc	r2, #3, #3
   1a4b8:	2301      	movs	r3, #1
   1a4ba:	f363 1288 	bfi	r2, r3, #6, #3
   1a4be:	2308      	movs	r3, #8
   1a4c0:	f363 2252 	bfi	r2, r3, #9, #10
   1a4c4:	f36f 42de 	bfc	r2, #19, #12
   1a4c8:	f36f 72df 	bfc	r2, #31, #1
   1a4cc:	4604      	mov	r4, r0
   1a4ce:	b188      	cbz	r0, 1a4f4 <le_conn_param_neg_reply+0x84>
   1a4d0:	f110 0310 	adds.w	r3, r0, #16
   1a4d4:	d001      	beq.n	1a4da <le_conn_param_neg_reply+0x6a>
   1a4d6:	490a      	ldr	r1, [pc, #40]	; (1a500 <le_conn_param_neg_reply+0x90>)
   1a4d8:	6141      	str	r1, [r0, #20]
   1a4da:	b15b      	cbz	r3, 1a4f4 <le_conn_param_neg_reply+0x84>
   1a4dc:	2302      	movs	r3, #2
   1a4de:	f88d 3004 	strb.w	r3, [sp, #4]
   1a4e2:	2300      	movs	r3, #0
   1a4e4:	f88d 3005 	strb.w	r3, [sp, #5]
   1a4e8:	f88d 3006 	strb.w	r3, [sp, #6]
   1a4ec:	f88d 3007 	strb.w	r3, [sp, #7]
   1a4f0:	9801      	ldr	r0, [sp, #4]
   1a4f2:	6120      	str	r0, [r4, #16]
   1a4f4:	2300      	movs	r3, #0
   1a4f6:	4903      	ldr	r1, [pc, #12]	; (1a504 <le_conn_param_neg_reply+0x94>)
   1a4f8:	4620      	mov	r0, r4
   1a4fa:	f00d fc70 	bl	27dde <z_log_msg_finalize>
		return;
   1a4fe:	e7cd      	b.n	1a49c <le_conn_param_neg_reply+0x2c>
   1a500:	0002fa90 	.word	0x0002fa90
   1a504:	0002de90 	.word	0x0002de90

0001a508 <le_conn_param_req>:
{
   1a508:	b530      	push	{r4, r5, lr}
   1a50a:	b085      	sub	sp, #20
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   1a50c:	68c3      	ldr	r3, [r0, #12]
	handle = sys_le16_to_cpu(evt->handle);
   1a50e:	881c      	ldrh	r4, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   1a510:	885a      	ldrh	r2, [r3, #2]
   1a512:	f8ad 2008 	strh.w	r2, [sp, #8]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   1a516:	889a      	ldrh	r2, [r3, #4]
   1a518:	f8ad 200a 	strh.w	r2, [sp, #10]
	param.latency = sys_le16_to_cpu(evt->latency);
   1a51c:	88da      	ldrh	r2, [r3, #6]
   1a51e:	f8ad 200c 	strh.w	r2, [sp, #12]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1a522:	891b      	ldrh	r3, [r3, #8]
   1a524:	f8ad 300e 	strh.w	r3, [sp, #14]
	conn = bt_conn_lookup_handle(handle);
   1a528:	4620      	mov	r0, r4
   1a52a:	f001 fd8f 	bl	1c04c <bt_conn_lookup_handle>
	if (!conn) {
   1a52e:	b170      	cbz	r0, 1a54e <le_conn_param_req+0x46>
   1a530:	4605      	mov	r5, r0
	if (!le_param_req(conn, &param)) {
   1a532:	a902      	add	r1, sp, #8
   1a534:	f001 ffc4 	bl	1c4c0 <le_param_req>
   1a538:	2800      	cmp	r0, #0
   1a53a:	d13d      	bne.n	1a5b8 <le_conn_param_req+0xb0>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   1a53c:	211e      	movs	r1, #30
   1a53e:	4620      	mov	r0, r4
   1a540:	f7ff ff96 	bl	1a470 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   1a544:	4628      	mov	r0, r5
   1a546:	f00e fcde 	bl	28f06 <bt_conn_unref>
}
   1a54a:	b005      	add	sp, #20
   1a54c:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   1a54e:	2008      	movs	r0, #8
   1a550:	f7fb fc3a 	bl	15dc8 <z_log_msg_alloc>
   1a554:	2200      	movs	r2, #0
   1a556:	f36f 0200 	bfc	r2, #0, #1
   1a55a:	f36f 0241 	bfc	r2, #1, #1
   1a55e:	f36f 0282 	bfc	r2, #2, #1
   1a562:	f36f 02c5 	bfc	r2, #3, #3
   1a566:	2301      	movs	r3, #1
   1a568:	f363 1288 	bfi	r2, r3, #6, #3
   1a56c:	230c      	movs	r3, #12
   1a56e:	f363 2252 	bfi	r2, r3, #9, #10
   1a572:	f36f 42de 	bfc	r2, #19, #12
   1a576:	f36f 72df 	bfc	r2, #31, #1
   1a57a:	4605      	mov	r5, r0
   1a57c:	b190      	cbz	r0, 1a5a4 <le_conn_param_req+0x9c>
   1a57e:	f110 0310 	adds.w	r3, r0, #16
   1a582:	d002      	beq.n	1a58a <le_conn_param_req+0x82>
   1a584:	490f      	ldr	r1, [pc, #60]	; (1a5c4 <le_conn_param_req+0xbc>)
   1a586:	6141      	str	r1, [r0, #20]
   1a588:	6184      	str	r4, [r0, #24]
   1a58a:	b15b      	cbz	r3, 1a5a4 <le_conn_param_req+0x9c>
   1a58c:	2303      	movs	r3, #3
   1a58e:	f88d 3004 	strb.w	r3, [sp, #4]
   1a592:	2300      	movs	r3, #0
   1a594:	f88d 3005 	strb.w	r3, [sp, #5]
   1a598:	f88d 3006 	strb.w	r3, [sp, #6]
   1a59c:	f88d 3007 	strb.w	r3, [sp, #7]
   1a5a0:	9801      	ldr	r0, [sp, #4]
   1a5a2:	6128      	str	r0, [r5, #16]
   1a5a4:	2300      	movs	r3, #0
   1a5a6:	4908      	ldr	r1, [pc, #32]	; (1a5c8 <le_conn_param_req+0xc0>)
   1a5a8:	4628      	mov	r0, r5
   1a5aa:	f00d fc18 	bl	27dde <z_log_msg_finalize>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   1a5ae:	2102      	movs	r1, #2
   1a5b0:	4620      	mov	r0, r4
   1a5b2:	f7ff ff5d 	bl	1a470 <le_conn_param_neg_reply>
		return;
   1a5b6:	e7c8      	b.n	1a54a <le_conn_param_req+0x42>
		le_conn_param_req_reply(handle, &param);
   1a5b8:	a902      	add	r1, sp, #8
   1a5ba:	4620      	mov	r0, r4
   1a5bc:	f00e fa87 	bl	28ace <le_conn_param_req_reply>
   1a5c0:	e7c0      	b.n	1a544 <le_conn_param_req+0x3c>
   1a5c2:	bf00      	nop
   1a5c4:	0002f668 	.word	0x0002f668
   1a5c8:	0002de90 	.word	0x0002de90

0001a5cc <send_cmd>:
{
   1a5cc:	b570      	push	{r4, r5, r6, lr}
   1a5ce:	b082      	sub	sp, #8
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   1a5d0:	2200      	movs	r2, #0
   1a5d2:	2300      	movs	r3, #0
   1a5d4:	4852      	ldr	r0, [pc, #328]	; (1a720 <send_cmd+0x154>)
   1a5d6:	f010 fcd4 	bl	2af82 <net_buf_get>
	BT_ASSERT(buf);
   1a5da:	4604      	mov	r4, r0
   1a5dc:	2800      	cmp	r0, #0
   1a5de:	d04d      	beq.n	1a67c <send_cmd+0xb0>
   1a5e0:	4d50      	ldr	r5, [pc, #320]	; (1a724 <send_cmd+0x158>)
   1a5e2:	f04f 32ff 	mov.w	r2, #4294967295
   1a5e6:	f04f 33ff 	mov.w	r3, #4294967295
   1a5ea:	4628      	mov	r0, r5
   1a5ec:	f00a fe18 	bl	25220 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
   1a5f0:	69ab      	ldr	r3, [r5, #24]
   1a5f2:	b3b3      	cbz	r3, 1a662 <send_cmd+0x96>
		LOG_ERR("Uncleared pending sent_cmd");
   1a5f4:	2006      	movs	r0, #6
   1a5f6:	f7fb fbe7 	bl	15dc8 <z_log_msg_alloc>
   1a5fa:	2200      	movs	r2, #0
   1a5fc:	f36f 0200 	bfc	r2, #0, #1
   1a600:	f36f 0241 	bfc	r2, #1, #1
   1a604:	f36f 0282 	bfc	r2, #2, #1
   1a608:	f36f 02c5 	bfc	r2, #3, #3
   1a60c:	2301      	movs	r3, #1
   1a60e:	f363 1288 	bfi	r2, r3, #6, #3
   1a612:	2308      	movs	r3, #8
   1a614:	f363 2252 	bfi	r2, r3, #9, #10
   1a618:	f36f 42de 	bfc	r2, #19, #12
   1a61c:	f36f 72df 	bfc	r2, #31, #1
   1a620:	4605      	mov	r5, r0
   1a622:	b188      	cbz	r0, 1a648 <send_cmd+0x7c>
   1a624:	f110 0310 	adds.w	r3, r0, #16
   1a628:	d001      	beq.n	1a62e <send_cmd+0x62>
   1a62a:	493f      	ldr	r1, [pc, #252]	; (1a728 <send_cmd+0x15c>)
   1a62c:	6141      	str	r1, [r0, #20]
   1a62e:	b15b      	cbz	r3, 1a648 <send_cmd+0x7c>
   1a630:	2302      	movs	r3, #2
   1a632:	f88d 3004 	strb.w	r3, [sp, #4]
   1a636:	2300      	movs	r3, #0
   1a638:	f88d 3005 	strb.w	r3, [sp, #5]
   1a63c:	f88d 3006 	strb.w	r3, [sp, #6]
   1a640:	f88d 3007 	strb.w	r3, [sp, #7]
   1a644:	9801      	ldr	r0, [sp, #4]
   1a646:	6128      	str	r0, [r5, #16]
   1a648:	2300      	movs	r3, #0
   1a64a:	4938      	ldr	r1, [pc, #224]	; (1a72c <send_cmd+0x160>)
   1a64c:	4628      	mov	r0, r5
   1a64e:	f00d fbc6 	bl	27dde <z_log_msg_finalize>
		net_buf_unref(bt_dev.sent_cmd);
   1a652:	4d37      	ldr	r5, [pc, #220]	; (1a730 <send_cmd+0x164>)
   1a654:	f8d5 0130 	ldr.w	r0, [r5, #304]	; 0x130
   1a658:	f010 fcd3 	bl	2b002 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   1a65c:	2300      	movs	r3, #0
   1a65e:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
	bt_dev.sent_cmd = net_buf_ref(buf);
   1a662:	4620      	mov	r0, r4
   1a664:	f010 fcf0 	bl	2b048 <net_buf_ref>
   1a668:	4b31      	ldr	r3, [pc, #196]	; (1a730 <send_cmd+0x164>)
   1a66a:	f8c3 0130 	str.w	r0, [r3, #304]	; 0x130
	err = bt_send(buf);
   1a66e:	4620      	mov	r0, r4
   1a670:	f7ff fe9a 	bl	1a3a8 <bt_send>
	if (err) {
   1a674:	4606      	mov	r6, r0
   1a676:	b978      	cbnz	r0, 1a698 <send_cmd+0xcc>
}
   1a678:	b002      	add	sp, #8
   1a67a:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf);
   1a67c:	f44f 6318 	mov.w	r3, #2432	; 0x980
   1a680:	4a2c      	ldr	r2, [pc, #176]	; (1a734 <send_cmd+0x168>)
   1a682:	492d      	ldr	r1, [pc, #180]	; (1a738 <send_cmd+0x16c>)
   1a684:	482d      	ldr	r0, [pc, #180]	; (1a73c <send_cmd+0x170>)
   1a686:	f00d f8a9 	bl	277dc <assert_print>
   1a68a:	4040      	eors	r0, r0
   1a68c:	f380 8811 	msr	BASEPRI, r0
   1a690:	f04f 0003 	mov.w	r0, #3
   1a694:	df02      	svc	2
   1a696:	e7a3      	b.n	1a5e0 <send_cmd+0x14>
		LOG_ERR("Unable to send to driver (err %d)", err);
   1a698:	2008      	movs	r0, #8
   1a69a:	f7fb fb95 	bl	15dc8 <z_log_msg_alloc>
   1a69e:	2200      	movs	r2, #0
   1a6a0:	f36f 0200 	bfc	r2, #0, #1
   1a6a4:	f36f 0241 	bfc	r2, #1, #1
   1a6a8:	f36f 0282 	bfc	r2, #2, #1
   1a6ac:	f36f 02c5 	bfc	r2, #3, #3
   1a6b0:	2301      	movs	r3, #1
   1a6b2:	f363 1288 	bfi	r2, r3, #6, #3
   1a6b6:	230c      	movs	r3, #12
   1a6b8:	f363 2252 	bfi	r2, r3, #9, #10
   1a6bc:	f36f 42de 	bfc	r2, #19, #12
   1a6c0:	f36f 72df 	bfc	r2, #31, #1
   1a6c4:	4605      	mov	r5, r0
   1a6c6:	b190      	cbz	r0, 1a6ee <send_cmd+0x122>
   1a6c8:	f110 0310 	adds.w	r3, r0, #16
   1a6cc:	d002      	beq.n	1a6d4 <send_cmd+0x108>
   1a6ce:	491c      	ldr	r1, [pc, #112]	; (1a740 <send_cmd+0x174>)
   1a6d0:	6141      	str	r1, [r0, #20]
   1a6d2:	6186      	str	r6, [r0, #24]
   1a6d4:	b15b      	cbz	r3, 1a6ee <send_cmd+0x122>
   1a6d6:	2303      	movs	r3, #3
   1a6d8:	f88d 3004 	strb.w	r3, [sp, #4]
   1a6dc:	2300      	movs	r3, #0
   1a6de:	f88d 3005 	strb.w	r3, [sp, #5]
   1a6e2:	f88d 3006 	strb.w	r3, [sp, #6]
   1a6e6:	f88d 3007 	strb.w	r3, [sp, #7]
   1a6ea:	9801      	ldr	r0, [sp, #4]
   1a6ec:	6128      	str	r0, [r5, #16]
   1a6ee:	2300      	movs	r3, #0
   1a6f0:	490e      	ldr	r1, [pc, #56]	; (1a72c <send_cmd+0x160>)
   1a6f2:	4628      	mov	r0, r5
   1a6f4:	f00d fb73 	bl	27dde <z_log_msg_finalize>
	z_impl_k_sem_give(sem);
   1a6f8:	480a      	ldr	r0, [pc, #40]	; (1a724 <send_cmd+0x158>)
   1a6fa:	f00a fd69 	bl	251d0 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   1a6fe:	4620      	mov	r0, r4
   1a700:	f010 fb95 	bl	2ae2e <net_buf_id>
   1a704:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1a708:	4b0e      	ldr	r3, [pc, #56]	; (1a744 <send_cmd+0x178>)
   1a70a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   1a70e:	4622      	mov	r2, r4
   1a710:	211f      	movs	r1, #31
   1a712:	8858      	ldrh	r0, [r3, #2]
   1a714:	f7fe fa8e 	bl	18c34 <hci_cmd_done>
		net_buf_unref(buf);
   1a718:	4620      	mov	r0, r4
   1a71a:	f010 fc72 	bl	2b002 <net_buf_unref>
   1a71e:	e7ab      	b.n	1a678 <send_cmd+0xac>
   1a720:	200004ac 	.word	0x200004ac
   1a724:	20000488 	.word	0x20000488
   1a728:	0002faac 	.word	0x0002faac
   1a72c:	0002de90 	.word	0x0002de90
   1a730:	20000370 	.word	0x20000370
   1a734:	0002f774 	.word	0x0002f774
   1a738:	00030880 	.word	0x00030880
   1a73c:	0002f7c4 	.word	0x0002f7c4
   1a740:	0002fa6c 	.word	0x0002fa6c
   1a744:	20007c58 	.word	0x20007c58

0001a748 <process_events>:
{
   1a748:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a74a:	b083      	sub	sp, #12
   1a74c:	4605      	mov	r5, r0
   1a74e:	460e      	mov	r6, r1
	LOG_DBG("count %d", count);
   1a750:	e035      	b.n	1a7be <process_events+0x76>
				send_cmd();
   1a752:	f7ff ff3b 	bl	1a5cc <send_cmd>
   1a756:	e030      	b.n	1a7ba <process_events+0x72>
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   1a758:	2008      	movs	r0, #8
   1a75a:	f7fb fb35 	bl	15dc8 <z_log_msg_alloc>
   1a75e:	f36f 0700 	bfc	r7, #0, #1
   1a762:	f36f 0741 	bfc	r7, #1, #1
   1a766:	f36f 0782 	bfc	r7, #2, #1
   1a76a:	f36f 07c5 	bfc	r7, #3, #3
   1a76e:	2302      	movs	r3, #2
   1a770:	f363 1788 	bfi	r7, r3, #6, #3
   1a774:	230c      	movs	r3, #12
   1a776:	f363 2752 	bfi	r7, r3, #9, #10
   1a77a:	f36f 47de 	bfc	r7, #19, #12
   1a77e:	f36f 77df 	bfc	r7, #31, #1
   1a782:	4684      	mov	ip, r0
   1a784:	b198      	cbz	r0, 1a7ae <process_events+0x66>
   1a786:	f110 0310 	adds.w	r3, r0, #16
   1a78a:	d002      	beq.n	1a792 <process_events+0x4a>
   1a78c:	4a16      	ldr	r2, [pc, #88]	; (1a7e8 <process_events+0xa0>)
   1a78e:	6142      	str	r2, [r0, #20]
   1a790:	6184      	str	r4, [r0, #24]
   1a792:	b163      	cbz	r3, 1a7ae <process_events+0x66>
   1a794:	2303      	movs	r3, #3
   1a796:	f88d 3004 	strb.w	r3, [sp, #4]
   1a79a:	2300      	movs	r3, #0
   1a79c:	f88d 3005 	strb.w	r3, [sp, #5]
   1a7a0:	f88d 3006 	strb.w	r3, [sp, #6]
   1a7a4:	f88d 3007 	strb.w	r3, [sp, #7]
   1a7a8:	9801      	ldr	r0, [sp, #4]
   1a7aa:	f8cc 0010 	str.w	r0, [ip, #16]
   1a7ae:	2300      	movs	r3, #0
   1a7b0:	463a      	mov	r2, r7
   1a7b2:	490e      	ldr	r1, [pc, #56]	; (1a7ec <process_events+0xa4>)
   1a7b4:	4660      	mov	r0, ip
   1a7b6:	f00d fb12 	bl	27dde <z_log_msg_finalize>
	for (; count; ev++, count--) {
   1a7ba:	3514      	adds	r5, #20
   1a7bc:	3e01      	subs	r6, #1
   1a7be:	b186      	cbz	r6, 1a7e2 <process_events+0x9a>
		switch (ev->state) {
   1a7c0:	68ec      	ldr	r4, [r5, #12]
   1a7c2:	f3c4 3486 	ubfx	r4, r4, #14, #7
   1a7c6:	2c01      	cmp	r4, #1
   1a7c8:	d9f7      	bls.n	1a7ba <process_events+0x72>
   1a7ca:	2c04      	cmp	r4, #4
   1a7cc:	d1c4      	bne.n	1a758 <process_events+0x10>
			if (ev->tag == BT_EVENT_CMD_TX) {
   1a7ce:	7b2b      	ldrb	r3, [r5, #12]
   1a7d0:	2b00      	cmp	r3, #0
   1a7d2:	d0be      	beq.n	1a752 <process_events+0xa>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   1a7d4:	2b01      	cmp	r3, #1
   1a7d6:	d1f0      	bne.n	1a7ba <process_events+0x72>
					conn = CONTAINER_OF(ev->fifo,
   1a7d8:	6928      	ldr	r0, [r5, #16]
					bt_conn_process_tx(conn);
   1a7da:	3838      	subs	r0, #56	; 0x38
   1a7dc:	f002 f960 	bl	1caa0 <bt_conn_process_tx>
   1a7e0:	e7eb      	b.n	1a7ba <process_events+0x72>
}
   1a7e2:	b003      	add	sp, #12
   1a7e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a7e6:	bf00      	nop
   1a7e8:	0002fac8 	.word	0x0002fac8
   1a7ec:	0002de90 	.word	0x0002de90

0001a7f0 <hci_tx_thread>:
{
   1a7f0:	b538      	push	{r3, r4, r5, lr}
   1a7f2:	e012      	b.n	1a81a <hci_tx_thread+0x2a>
		BT_ASSERT(err == 0);
   1a7f4:	f640 13e6 	movw	r3, #2534	; 0x9e6
   1a7f8:	4a12      	ldr	r2, [pc, #72]	; (1a844 <hci_tx_thread+0x54>)
   1a7fa:	4913      	ldr	r1, [pc, #76]	; (1a848 <hci_tx_thread+0x58>)
   1a7fc:	4813      	ldr	r0, [pc, #76]	; (1a84c <hci_tx_thread+0x5c>)
   1a7fe:	f00c ffed 	bl	277dc <assert_print>
   1a802:	4040      	eors	r0, r0
   1a804:	f380 8811 	msr	BASEPRI, r0
   1a808:	f04f 0003 	mov.w	r0, #3
   1a80c:	df02      	svc	2
		process_events(events, ev_count);
   1a80e:	4621      	mov	r1, r4
   1a810:	480f      	ldr	r0, [pc, #60]	; (1a850 <hci_tx_thread+0x60>)
   1a812:	f7ff ff99 	bl	1a748 <process_events>
	z_impl_k_yield();
   1a816:	f00b f9a5 	bl	25b64 <z_impl_k_yield>
		events[0].state = K_POLL_STATE_NOT_READY;
   1a81a:	4d0d      	ldr	r5, [pc, #52]	; (1a850 <hci_tx_thread+0x60>)
   1a81c:	68eb      	ldr	r3, [r5, #12]
   1a81e:	f36f 3394 	bfc	r3, #14, #7
   1a822:	60eb      	str	r3, [r5, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   1a824:	f105 0014 	add.w	r0, r5, #20
   1a828:	f001 fbe8 	bl	1bffc <bt_conn_prepare_events>
   1a82c:	1c44      	adds	r4, r0, #1
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   1a82e:	f04f 32ff 	mov.w	r2, #4294967295
   1a832:	f04f 33ff 	mov.w	r3, #4294967295
   1a836:	4621      	mov	r1, r4
   1a838:	4628      	mov	r0, r5
   1a83a:	f00b fd0b 	bl	26254 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   1a83e:	2800      	cmp	r0, #0
   1a840:	d1d8      	bne.n	1a7f4 <hci_tx_thread+0x4>
   1a842:	e7e4      	b.n	1a80e <hci_tx_thread+0x1e>
   1a844:	0002f774 	.word	0x0002f774
   1a848:	0002f890 	.word	0x0002f890
   1a84c:	0002f7c4 	.word	0x0002f7c4
   1a850:	20000840 	.word	0x20000840

0001a854 <hci_event_prio>:
{
   1a854:	b570      	push	{r4, r5, r6, lr}
   1a856:	b082      	sub	sp, #8
   1a858:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   1a85a:	f100 050c 	add.w	r5, r0, #12
	state->offset = net_buf_simple_headroom(buf);
   1a85e:	4628      	mov	r0, r5
   1a860:	f010 fc58 	bl	2b114 <net_buf_simple_headroom>
   1a864:	f8ad 0004 	strh.w	r0, [sp, #4]
	state->len = buf->len;
   1a868:	8a23      	ldrh	r3, [r4, #16]
   1a86a:	f8ad 3006 	strh.w	r3, [sp, #6]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   1a86e:	2b01      	cmp	r3, #1
   1a870:	d91e      	bls.n	1a8b0 <hci_event_prio+0x5c>
	return net_buf_simple_pull_mem(&buf->b, len);
   1a872:	2102      	movs	r1, #2
   1a874:	4628      	mov	r0, r5
   1a876:	f010 fc35 	bl	2b0e4 <net_buf_simple_pull_mem>
   1a87a:	4606      	mov	r6, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1a87c:	7800      	ldrb	r0, [r0, #0]
   1a87e:	f00e f801 	bl	28884 <bt_hci_evt_get_flags>
   1a882:	4605      	mov	r5, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   1a884:	f010 0f01 	tst.w	r0, #1
   1a888:	d020      	beq.n	1a8cc <hci_event_prio+0x78>
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   1a88a:	2305      	movs	r3, #5
   1a88c:	4a18      	ldr	r2, [pc, #96]	; (1a8f0 <hci_event_prio+0x9c>)
   1a88e:	4621      	mov	r1, r4
   1a890:	7830      	ldrb	r0, [r6, #0]
   1a892:	f7fe fb6b 	bl	18f6c <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   1a896:	f015 0f02 	tst.w	r5, #2
   1a89a:	d025      	beq.n	1a8e8 <hci_event_prio+0x94>
	buf->data = buf->__buf + state->offset;
   1a89c:	6963      	ldr	r3, [r4, #20]
   1a89e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1a8a2:	4413      	add	r3, r2
   1a8a4:	60e3      	str	r3, [r4, #12]
	buf->len = state->len;
   1a8a6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1a8aa:	8223      	strh	r3, [r4, #16]
}
   1a8ac:	b002      	add	sp, #8
   1a8ae:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   1a8b0:	f640 537b 	movw	r3, #3451	; 0xd7b
   1a8b4:	4a0f      	ldr	r2, [pc, #60]	; (1a8f4 <hci_event_prio+0xa0>)
   1a8b6:	4910      	ldr	r1, [pc, #64]	; (1a8f8 <hci_event_prio+0xa4>)
   1a8b8:	4810      	ldr	r0, [pc, #64]	; (1a8fc <hci_event_prio+0xa8>)
   1a8ba:	f00c ff8f 	bl	277dc <assert_print>
   1a8be:	4040      	eors	r0, r0
   1a8c0:	f380 8811 	msr	BASEPRI, r0
   1a8c4:	f04f 0003 	mov.w	r0, #3
   1a8c8:	df02      	svc	2
   1a8ca:	e7d2      	b.n	1a872 <hci_event_prio+0x1e>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   1a8cc:	f640 537f 	movw	r3, #3455	; 0xd7f
   1a8d0:	4a08      	ldr	r2, [pc, #32]	; (1a8f4 <hci_event_prio+0xa0>)
   1a8d2:	490b      	ldr	r1, [pc, #44]	; (1a900 <hci_event_prio+0xac>)
   1a8d4:	4809      	ldr	r0, [pc, #36]	; (1a8fc <hci_event_prio+0xa8>)
   1a8d6:	f00c ff81 	bl	277dc <assert_print>
   1a8da:	4040      	eors	r0, r0
   1a8dc:	f380 8811 	msr	BASEPRI, r0
   1a8e0:	f04f 0003 	mov.w	r0, #3
   1a8e4:	df02      	svc	2
   1a8e6:	e7d0      	b.n	1a88a <hci_event_prio+0x36>
		net_buf_unref(buf);
   1a8e8:	4620      	mov	r0, r4
   1a8ea:	f010 fb8a 	bl	2b002 <net_buf_unref>
}
   1a8ee:	e7dd      	b.n	1a8ac <hci_event_prio+0x58>
   1a8f0:	0002fba0 	.word	0x0002fba0
   1a8f4:	0002f774 	.word	0x0002f774
   1a8f8:	0002f7a8 	.word	0x0002f7a8
   1a8fc:	0002f7c4 	.word	0x0002f7c4
   1a900:	0002faec 	.word	0x0002faec

0001a904 <bt_recv>:
{
   1a904:	b530      	push	{r4, r5, lr}
   1a906:	b083      	sub	sp, #12
   1a908:	4604      	mov	r4, r0
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   1a90a:	7e05      	ldrb	r5, [r0, #24]
	switch (bt_buf_get_type(buf)) {
   1a90c:	2d01      	cmp	r5, #1
   1a90e:	d006      	beq.n	1a91e <bt_recv+0x1a>
   1a910:	2d03      	cmp	r5, #3
   1a912:	d11a      	bne.n	1a94a <bt_recv+0x46>
		rx_queue_put(buf);
   1a914:	f7fe fbf4 	bl	19100 <rx_queue_put>
		return 0;
   1a918:	2000      	movs	r0, #0
}
   1a91a:	b003      	add	sp, #12
   1a91c:	bd30      	pop	{r4, r5, pc}
		struct bt_hci_evt_hdr *hdr = (void *)buf->data;
   1a91e:	68c3      	ldr	r3, [r0, #12]
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1a920:	7818      	ldrb	r0, [r3, #0]
   1a922:	f00d ffaf 	bl	28884 <bt_hci_evt_get_flags>
   1a926:	4605      	mov	r5, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   1a928:	f010 0f01 	tst.w	r0, #1
   1a92c:	d104      	bne.n	1a938 <bt_recv+0x34>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   1a92e:	f015 0f02 	tst.w	r5, #2
   1a932:	d105      	bne.n	1a940 <bt_recv+0x3c>
		return 0;
   1a934:	2000      	movs	r0, #0
   1a936:	e7f0      	b.n	1a91a <bt_recv+0x16>
			hci_event_prio(buf);
   1a938:	4620      	mov	r0, r4
   1a93a:	f7ff ff8b 	bl	1a854 <hci_event_prio>
   1a93e:	e7f6      	b.n	1a92e <bt_recv+0x2a>
			rx_queue_put(buf);
   1a940:	4620      	mov	r0, r4
   1a942:	f7fe fbdd 	bl	19100 <rx_queue_put>
		return 0;
   1a946:	2000      	movs	r0, #0
   1a948:	e7e7      	b.n	1a91a <bt_recv+0x16>
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   1a94a:	2008      	movs	r0, #8
   1a94c:	f7fb fa3c 	bl	15dc8 <z_log_msg_alloc>
   1a950:	2200      	movs	r2, #0
   1a952:	f36f 0200 	bfc	r2, #0, #1
   1a956:	f36f 0241 	bfc	r2, #1, #1
   1a95a:	f36f 0282 	bfc	r2, #2, #1
   1a95e:	f36f 02c5 	bfc	r2, #3, #3
   1a962:	2301      	movs	r3, #1
   1a964:	f363 1288 	bfi	r2, r3, #6, #3
   1a968:	230c      	movs	r3, #12
   1a96a:	f363 2252 	bfi	r2, r3, #9, #10
   1a96e:	f36f 42de 	bfc	r2, #19, #12
   1a972:	f36f 72df 	bfc	r2, #31, #1
   1a976:	4684      	mov	ip, r0
   1a978:	b198      	cbz	r0, 1a9a2 <bt_recv+0x9e>
   1a97a:	f110 0310 	adds.w	r3, r0, #16
   1a97e:	d002      	beq.n	1a986 <bt_recv+0x82>
   1a980:	490d      	ldr	r1, [pc, #52]	; (1a9b8 <bt_recv+0xb4>)
   1a982:	6141      	str	r1, [r0, #20]
   1a984:	6185      	str	r5, [r0, #24]
   1a986:	b163      	cbz	r3, 1a9a2 <bt_recv+0x9e>
   1a988:	2303      	movs	r3, #3
   1a98a:	f88d 3004 	strb.w	r3, [sp, #4]
   1a98e:	2300      	movs	r3, #0
   1a990:	f88d 3005 	strb.w	r3, [sp, #5]
   1a994:	f88d 3006 	strb.w	r3, [sp, #6]
   1a998:	f88d 3007 	strb.w	r3, [sp, #7]
   1a99c:	9801      	ldr	r0, [sp, #4]
   1a99e:	f8cc 0010 	str.w	r0, [ip, #16]
   1a9a2:	2300      	movs	r3, #0
   1a9a4:	4905      	ldr	r1, [pc, #20]	; (1a9bc <bt_recv+0xb8>)
   1a9a6:	4660      	mov	r0, ip
   1a9a8:	f00d fa19 	bl	27dde <z_log_msg_finalize>
		net_buf_unref(buf);
   1a9ac:	4620      	mov	r0, r4
   1a9ae:	f010 fb28 	bl	2b002 <net_buf_unref>
		return -EINVAL;
   1a9b2:	f06f 0015 	mvn.w	r0, #21
   1a9b6:	e7b0      	b.n	1a91a <bt_recv+0x16>
   1a9b8:	0002fb08 	.word	0x0002fb08
   1a9bc:	0002de90 	.word	0x0002de90

0001a9c0 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   1a9c0:	4b0a      	ldr	r3, [pc, #40]	; (1a9ec <bt_hci_driver_register+0x2c>)
   1a9c2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
   1a9c6:	b943      	cbnz	r3, 1a9da <bt_hci_driver_register+0x1a>
	if (!drv->open || !drv->send) {
   1a9c8:	68c3      	ldr	r3, [r0, #12]
   1a9ca:	b14b      	cbz	r3, 1a9e0 <bt_hci_driver_register+0x20>
   1a9cc:	6943      	ldr	r3, [r0, #20]
   1a9ce:	b153      	cbz	r3, 1a9e6 <bt_hci_driver_register+0x26>
	bt_dev.drv = drv;
   1a9d0:	4b06      	ldr	r3, [pc, #24]	; (1a9ec <bt_hci_driver_register+0x2c>)
   1a9d2:	f8c3 0154 	str.w	r0, [r3, #340]	; 0x154
	return 0;
   1a9d6:	2000      	movs	r0, #0
   1a9d8:	4770      	bx	lr
		return -EALREADY;
   1a9da:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1a9de:	4770      	bx	lr
		return -EINVAL;
   1a9e0:	f06f 0015 	mvn.w	r0, #21
   1a9e4:	4770      	bx	lr
   1a9e6:	f06f 0015 	mvn.w	r0, #21
}
   1a9ea:	4770      	bx	lr
   1a9ec:	20000370 	.word	0x20000370

0001a9f0 <bt_finalize_init>:
{
   1a9f0:	b508      	push	{r3, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1a9f2:	4b08      	ldr	r3, [pc, #32]	; (1aa14 <bt_finalize_init+0x24>)
   1a9f4:	f3bf 8f5b 	dmb	ish
   1a9f8:	e853 1f00 	ldrex	r1, [r3]
   1a9fc:	f041 0104 	orr.w	r1, r1, #4
   1aa00:	e843 1200 	strex	r2, r1, [r3]
   1aa04:	2a00      	cmp	r2, #0
   1aa06:	d1f7      	bne.n	1a9f8 <bt_finalize_init+0x8>
   1aa08:	f3bf 8f5b 	dmb	ish
		bt_le_scan_update(false);
   1aa0c:	2000      	movs	r0, #0
   1aa0e:	f000 fda3 	bl	1b558 <bt_le_scan_update>
}
   1aa12:	bd08      	pop	{r3, pc}
   1aa14:	2000043c 	.word	0x2000043c

0001aa18 <init_work>:
{
   1aa18:	b508      	push	{r3, lr}
	err = bt_init();
   1aa1a:	f00e f87d 	bl	28b18 <bt_init>
	if (ready_cb) {
   1aa1e:	4b02      	ldr	r3, [pc, #8]	; (1aa28 <init_work+0x10>)
   1aa20:	681b      	ldr	r3, [r3, #0]
   1aa22:	b103      	cbz	r3, 1aa26 <init_work+0xe>
		ready_cb(err);
   1aa24:	4798      	blx	r3
}
   1aa26:	bd08      	pop	{r3, pc}
   1aa28:	20007c70 	.word	0x20007c70

0001aa2c <bt_enable>:
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
   1aa2c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1aa2e:	b08b      	sub	sp, #44	; 0x2c
	int err;

	if (!bt_dev.drv) {
   1aa30:	4b67      	ldr	r3, [pc, #412]	; (1abd0 <bt_enable+0x1a4>)
   1aa32:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
   1aa36:	2b00      	cmp	r3, #0
   1aa38:	d060      	beq.n	1aafc <bt_enable+0xd0>
   1aa3a:	4605      	mov	r5, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1aa3c:	4b65      	ldr	r3, [pc, #404]	; (1abd4 <bt_enable+0x1a8>)
   1aa3e:	f3bf 8f5b 	dmb	ish
   1aa42:	e853 2f00 	ldrex	r2, [r3]
   1aa46:	f022 0202 	bic.w	r2, r2, #2
   1aa4a:	e843 2100 	strex	r1, r2, [r3]
   1aa4e:	2900      	cmp	r1, #0
   1aa50:	d1f7      	bne.n	1aa42 <bt_enable+0x16>
   1aa52:	f3bf 8f5b 	dmb	ish
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1aa56:	f3bf 8f5b 	dmb	ish
   1aa5a:	e853 2f00 	ldrex	r2, [r3]
   1aa5e:	f042 0101 	orr.w	r1, r2, #1
   1aa62:	e843 1000 	strex	r0, r1, [r3]
   1aa66:	2800      	cmp	r0, #0
   1aa68:	d1f7      	bne.n	1aa5a <bt_enable+0x2e>
   1aa6a:	f3bf 8f5b 	dmb	ish
		return -ENODEV;
	}

	atomic_clear_bit(bt_dev.flags, BT_DEV_DISABLE);

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   1aa6e:	f012 0f01 	tst.w	r2, #1
   1aa72:	f040 80aa 	bne.w	1abca <bt_enable+0x19e>
		if (err) {
			LOG_WRN("Failed to set device name (%d)", err);
		}
	}

	ready_cb = cb;
   1aa76:	4b58      	ldr	r3, [pc, #352]	; (1abd8 <bt_enable+0x1ac>)
   1aa78:	601d      	str	r5, [r3, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1aa7a:	4e58      	ldr	r6, [pc, #352]	; (1abdc <bt_enable+0x1b0>)
   1aa7c:	2201      	movs	r2, #1
   1aa7e:	4611      	mov	r1, r2
   1aa80:	4630      	mov	r0, r6
   1aa82:	f012 fa60 	bl	2cf46 <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
   1aa86:	f106 0024 	add.w	r0, r6, #36	; 0x24
   1aa8a:	f012 fa39 	bl	2cf00 <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1aa8e:	4f54      	ldr	r7, [pc, #336]	; (1abe0 <bt_enable+0x1b4>)
   1aa90:	2200      	movs	r2, #0
   1aa92:	2300      	movs	r3, #0
   1aa94:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1aa98:	2400      	movs	r4, #0
   1aa9a:	9404      	str	r4, [sp, #16]
   1aa9c:	f06f 0308 	mvn.w	r3, #8
   1aaa0:	9303      	str	r3, [sp, #12]
   1aaa2:	9402      	str	r4, [sp, #8]
   1aaa4:	9401      	str	r4, [sp, #4]
   1aaa6:	9400      	str	r4, [sp, #0]
   1aaa8:	4b4e      	ldr	r3, [pc, #312]	; (1abe4 <bt_enable+0x1b8>)
   1aaaa:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   1aaae:	494e      	ldr	r1, [pc, #312]	; (1abe8 <bt_enable+0x1bc>)
   1aab0:	4638      	mov	r0, r7
   1aab2:	f012 f94d 	bl	2cd50 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1aab6:	494d      	ldr	r1, [pc, #308]	; (1abec <bt_enable+0x1c0>)
   1aab8:	4638      	mov	r0, r7
   1aaba:	f00a f99d 	bl	24df8 <z_impl_k_thread_name_set>
			0, K_NO_WAIT);
	k_thread_name_set(&tx_thread_data, "BT TX");

#if defined(CONFIG_BT_RECV_WORKQ_BT)
	/* RX thread */
	k_work_queue_init(&bt_workq);
   1aabe:	4f4c      	ldr	r7, [pc, #304]	; (1abf0 <bt_enable+0x1c4>)
   1aac0:	4638      	mov	r0, r7
   1aac2:	f012 fb4d 	bl	2d160 <k_work_queue_init>
	k_work_queue_start(&bt_workq, rx_thread_stack,
   1aac6:	9400      	str	r4, [sp, #0]
   1aac8:	f06f 0307 	mvn.w	r3, #7
   1aacc:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1aad0:	4948      	ldr	r1, [pc, #288]	; (1abf4 <bt_enable+0x1c8>)
   1aad2:	4638      	mov	r0, r7
   1aad4:	f00a fd06 	bl	254e4 <k_work_queue_start>
   1aad8:	4947      	ldr	r1, [pc, #284]	; (1abf8 <bt_enable+0x1cc>)
   1aada:	4638      	mov	r0, r7
   1aadc:	f00a f98c 	bl	24df8 <z_impl_k_thread_name_set>
			   CONFIG_BT_RX_STACK_SIZE,
			   K_PRIO_COOP(CONFIG_BT_RX_PRIO), NULL);
	k_thread_name_set(&bt_workq.thread, "BT RX");
#endif

	err = bt_dev.drv->open();
   1aae0:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
   1aae2:	68db      	ldr	r3, [r3, #12]
   1aae4:	4798      	blx	r3
	if (err) {
   1aae6:	4604      	mov	r4, r0
   1aae8:	2800      	cmp	r0, #0
   1aaea:	d139      	bne.n	1ab60 <bt_enable+0x134>
		return err;
	}

	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);

	if (!cb) {
   1aaec:	2d00      	cmp	r5, #0
   1aaee:	d068      	beq.n	1abc2 <bt_enable+0x196>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
   1aaf0:	4842      	ldr	r0, [pc, #264]	; (1abfc <bt_enable+0x1d0>)
   1aaf2:	f00a fcef 	bl	254d4 <k_work_submit>
	return 0;
}
   1aaf6:	4620      	mov	r0, r4
   1aaf8:	b00b      	add	sp, #44	; 0x2c
   1aafa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("No HCI driver registered");
   1aafc:	2006      	movs	r0, #6
   1aafe:	f7fb f963 	bl	15dc8 <z_log_msg_alloc>
   1ab02:	2200      	movs	r2, #0
   1ab04:	f36f 0200 	bfc	r2, #0, #1
   1ab08:	f36f 0241 	bfc	r2, #1, #1
   1ab0c:	f36f 0282 	bfc	r2, #2, #1
   1ab10:	f36f 02c5 	bfc	r2, #3, #3
   1ab14:	2301      	movs	r3, #1
   1ab16:	f363 1288 	bfi	r2, r3, #6, #3
   1ab1a:	2308      	movs	r3, #8
   1ab1c:	f363 2252 	bfi	r2, r3, #9, #10
   1ab20:	f36f 42de 	bfc	r2, #19, #12
   1ab24:	f36f 72df 	bfc	r2, #31, #1
   1ab28:	4604      	mov	r4, r0
   1ab2a:	b188      	cbz	r0, 1ab50 <bt_enable+0x124>
   1ab2c:	f110 0310 	adds.w	r3, r0, #16
   1ab30:	d001      	beq.n	1ab36 <bt_enable+0x10a>
   1ab32:	4933      	ldr	r1, [pc, #204]	; (1ac00 <bt_enable+0x1d4>)
   1ab34:	6141      	str	r1, [r0, #20]
   1ab36:	b15b      	cbz	r3, 1ab50 <bt_enable+0x124>
   1ab38:	2302      	movs	r3, #2
   1ab3a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   1ab3e:	2300      	movs	r3, #0
   1ab40:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   1ab44:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
   1ab48:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
   1ab4c:	9809      	ldr	r0, [sp, #36]	; 0x24
   1ab4e:	6120      	str	r0, [r4, #16]
   1ab50:	2300      	movs	r3, #0
   1ab52:	492c      	ldr	r1, [pc, #176]	; (1ac04 <bt_enable+0x1d8>)
   1ab54:	4620      	mov	r0, r4
   1ab56:	f00d f942 	bl	27dde <z_log_msg_finalize>
		return -ENODEV;
   1ab5a:	f06f 0412 	mvn.w	r4, #18
   1ab5e:	e7ca      	b.n	1aaf6 <bt_enable+0xca>
		LOG_ERR("HCI driver open failed (%d)", err);
   1ab60:	2008      	movs	r0, #8
   1ab62:	f7fb f931 	bl	15dc8 <z_log_msg_alloc>
   1ab66:	2200      	movs	r2, #0
   1ab68:	f36f 0200 	bfc	r2, #0, #1
   1ab6c:	f36f 0241 	bfc	r2, #1, #1
   1ab70:	f36f 0282 	bfc	r2, #2, #1
   1ab74:	f36f 02c5 	bfc	r2, #3, #3
   1ab78:	2301      	movs	r3, #1
   1ab7a:	f363 1288 	bfi	r2, r3, #6, #3
   1ab7e:	230c      	movs	r3, #12
   1ab80:	f363 2252 	bfi	r2, r3, #9, #10
   1ab84:	f36f 42de 	bfc	r2, #19, #12
   1ab88:	f36f 72df 	bfc	r2, #31, #1
   1ab8c:	4605      	mov	r5, r0
   1ab8e:	b190      	cbz	r0, 1abb6 <bt_enable+0x18a>
   1ab90:	f110 0310 	adds.w	r3, r0, #16
   1ab94:	d002      	beq.n	1ab9c <bt_enable+0x170>
   1ab96:	491c      	ldr	r1, [pc, #112]	; (1ac08 <bt_enable+0x1dc>)
   1ab98:	6141      	str	r1, [r0, #20]
   1ab9a:	6184      	str	r4, [r0, #24]
   1ab9c:	b15b      	cbz	r3, 1abb6 <bt_enable+0x18a>
   1ab9e:	2303      	movs	r3, #3
   1aba0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   1aba4:	2300      	movs	r3, #0
   1aba6:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   1abaa:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
   1abae:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
   1abb2:	9809      	ldr	r0, [sp, #36]	; 0x24
   1abb4:	6128      	str	r0, [r5, #16]
   1abb6:	2300      	movs	r3, #0
   1abb8:	4912      	ldr	r1, [pc, #72]	; (1ac04 <bt_enable+0x1d8>)
   1abba:	4628      	mov	r0, r5
   1abbc:	f00d f90f 	bl	27dde <z_log_msg_finalize>
		return err;
   1abc0:	e799      	b.n	1aaf6 <bt_enable+0xca>
		return bt_init();
   1abc2:	f00d ffa9 	bl	28b18 <bt_init>
   1abc6:	4604      	mov	r4, r0
   1abc8:	e795      	b.n	1aaf6 <bt_enable+0xca>
		return -EALREADY;
   1abca:	f06f 0477 	mvn.w	r4, #119	; 0x77
   1abce:	e792      	b.n	1aaf6 <bt_enable+0xca>
   1abd0:	20000370 	.word	0x20000370
   1abd4:	2000043c 	.word	0x2000043c
   1abd8:	20007c70 	.word	0x20007c70
   1abdc:	20000488 	.word	0x20000488
   1abe0:	20002138 	.word	0x20002138
   1abe4:	0001a7f1 	.word	0x0001a7f1
   1abe8:	200098c0 	.word	0x200098c0
   1abec:	0002fb38 	.word	0x0002fb38
   1abf0:	200021f0 	.word	0x200021f0
   1abf4:	20009f00 	.word	0x20009f00
   1abf8:	0002fb40 	.word	0x0002fb40
   1abfc:	2000042c 	.word	0x2000042c
   1ac00:	0002fb1c 	.word	0x0002fb1c
   1ac04:	0002de90 	.word	0x0002de90
   1ac08:	0002fb48 	.word	0x0002fb48

0001ac0c <bt_is_ready>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1ac0c:	f3bf 8f5b 	dmb	ish
   1ac10:	4b03      	ldr	r3, [pc, #12]	; (1ac20 <bt_is_ready+0x14>)
   1ac12:	6818      	ldr	r0, [r3, #0]
   1ac14:	f3bf 8f5b 	dmb	ish
   1ac18:	f3c0 0080 	ubfx	r0, r0, #2, #1
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
   1ac1c:	4770      	bx	lr
   1ac1e:	bf00      	nop
   1ac20:	2000043c 	.word	0x2000043c

0001ac24 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   1ac24:	4800      	ldr	r0, [pc, #0]	; (1ac28 <bt_get_name+0x4>)
   1ac26:	4770      	bx	lr
   1ac28:	0002fb64 	.word	0x0002fb64

0001ac2c <bt_le_filter_accept_list_add>:
	}
}

#if defined(CONFIG_BT_FILTER_ACCEPT_LIST)
int bt_le_filter_accept_list_add(const bt_addr_le_t *addr)
{
   1ac2c:	b530      	push	{r4, r5, lr}
   1ac2e:	b083      	sub	sp, #12
   1ac30:	f3bf 8f5b 	dmb	ish
   1ac34:	4b2c      	ldr	r3, [pc, #176]	; (1ace8 <bt_le_filter_accept_list_add+0xbc>)
   1ac36:	681b      	ldr	r3, [r3, #0]
   1ac38:	f3bf 8f5b 	dmb	ish
	struct bt_hci_cp_le_add_dev_to_fal *cp;
	struct net_buf *buf;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1ac3c:	f013 0f04 	tst.w	r3, #4
   1ac40:	d04b      	beq.n	1acda <bt_le_filter_accept_list_add+0xae>
   1ac42:	4604      	mov	r4, r0
		return -EAGAIN;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_FAL, sizeof(*cp));
   1ac44:	2107      	movs	r1, #7
   1ac46:	f242 0011 	movw	r0, #8209	; 0x2011
   1ac4a:	f7fe fc69 	bl	19520 <bt_hci_cmd_create>
	if (!buf) {
   1ac4e:	4605      	mov	r5, r0
   1ac50:	2800      	cmp	r0, #0
   1ac52:	d045      	beq.n	1ace0 <bt_le_filter_accept_list_add+0xb4>
	return net_buf_simple_add(&buf->b, len);
   1ac54:	2107      	movs	r1, #7
   1ac56:	300c      	adds	r0, #12
   1ac58:	f010 fa1a 	bl	2b090 <net_buf_simple_add>
	memcpy(dst, src, sizeof(*dst));
   1ac5c:	2207      	movs	r2, #7
   1ac5e:	4621      	mov	r1, r4
   1ac60:	f00d fd0f 	bl	28682 <memcpy>
	}

	cp = net_buf_add(buf, sizeof(*cp));
	bt_addr_le_copy(&cp->addr, addr);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_FAL, buf, NULL);
   1ac64:	2200      	movs	r2, #0
   1ac66:	4629      	mov	r1, r5
   1ac68:	f242 0011 	movw	r0, #8209	; 0x2011
   1ac6c:	f7fe fc96 	bl	1959c <bt_hci_cmd_send_sync>
	if (err) {
   1ac70:	4604      	mov	r4, r0
   1ac72:	b910      	cbnz	r0, 1ac7a <bt_le_filter_accept_list_add+0x4e>

		return err;
	}

	return 0;
}
   1ac74:	4620      	mov	r0, r4
   1ac76:	b003      	add	sp, #12
   1ac78:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("Failed to add device to filter accept list");
   1ac7a:	2006      	movs	r0, #6
   1ac7c:	f7fb f8a4 	bl	15dc8 <z_log_msg_alloc>
   1ac80:	2200      	movs	r2, #0
   1ac82:	f36f 0200 	bfc	r2, #0, #1
   1ac86:	f36f 0241 	bfc	r2, #1, #1
   1ac8a:	f36f 0282 	bfc	r2, #2, #1
   1ac8e:	f36f 02c5 	bfc	r2, #3, #3
   1ac92:	2301      	movs	r3, #1
   1ac94:	f363 1288 	bfi	r2, r3, #6, #3
   1ac98:	2308      	movs	r3, #8
   1ac9a:	f363 2252 	bfi	r2, r3, #9, #10
   1ac9e:	f36f 42de 	bfc	r2, #19, #12
   1aca2:	f36f 72df 	bfc	r2, #31, #1
   1aca6:	4605      	mov	r5, r0
   1aca8:	b188      	cbz	r0, 1acce <bt_le_filter_accept_list_add+0xa2>
   1acaa:	f110 0310 	adds.w	r3, r0, #16
   1acae:	d001      	beq.n	1acb4 <bt_le_filter_accept_list_add+0x88>
   1acb0:	490e      	ldr	r1, [pc, #56]	; (1acec <bt_le_filter_accept_list_add+0xc0>)
   1acb2:	6141      	str	r1, [r0, #20]
   1acb4:	b15b      	cbz	r3, 1acce <bt_le_filter_accept_list_add+0xa2>
   1acb6:	2302      	movs	r3, #2
   1acb8:	f88d 3004 	strb.w	r3, [sp, #4]
   1acbc:	2300      	movs	r3, #0
   1acbe:	f88d 3005 	strb.w	r3, [sp, #5]
   1acc2:	f88d 3006 	strb.w	r3, [sp, #6]
   1acc6:	f88d 3007 	strb.w	r3, [sp, #7]
   1acca:	9801      	ldr	r0, [sp, #4]
   1accc:	6128      	str	r0, [r5, #16]
   1acce:	2300      	movs	r3, #0
   1acd0:	4907      	ldr	r1, [pc, #28]	; (1acf0 <bt_le_filter_accept_list_add+0xc4>)
   1acd2:	4628      	mov	r0, r5
   1acd4:	f00d f883 	bl	27dde <z_log_msg_finalize>
		return err;
   1acd8:	e7cc      	b.n	1ac74 <bt_le_filter_accept_list_add+0x48>
		return -EAGAIN;
   1acda:	f06f 040a 	mvn.w	r4, #10
   1acde:	e7c9      	b.n	1ac74 <bt_le_filter_accept_list_add+0x48>
		return -ENOBUFS;
   1ace0:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1ace4:	e7c6      	b.n	1ac74 <bt_le_filter_accept_list_add+0x48>
   1ace6:	bf00      	nop
   1ace8:	2000043c 	.word	0x2000043c
   1acec:	0002fb74 	.word	0x0002fb74
   1acf0:	0002de90 	.word	0x0002de90

0001acf4 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   1acf4:	b570      	push	{r4, r5, r6, lr}
   1acf6:	4605      	mov	r5, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   1acf8:	2400      	movs	r4, #0
   1acfa:	e001      	b.n	1ad00 <id_find+0xc>
   1acfc:	3401      	adds	r4, #1
   1acfe:	b2e4      	uxtb	r4, r4
   1ad00:	4b09      	ldr	r3, [pc, #36]	; (1ad28 <id_find+0x34>)
   1ad02:	79db      	ldrb	r3, [r3, #7]
   1ad04:	42a3      	cmp	r3, r4
   1ad06:	d90b      	bls.n	1ad20 <id_find+0x2c>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
   1ad08:	4626      	mov	r6, r4
   1ad0a:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
   1ad0e:	2207      	movs	r2, #7
   1ad10:	4b05      	ldr	r3, [pc, #20]	; (1ad28 <id_find+0x34>)
   1ad12:	4419      	add	r1, r3
   1ad14:	4628      	mov	r0, r5
   1ad16:	f00d fca2 	bl	2865e <memcmp>
   1ad1a:	2800      	cmp	r0, #0
   1ad1c:	d1ee      	bne.n	1acfc <id_find+0x8>
   1ad1e:	e001      	b.n	1ad24 <id_find+0x30>
			return id;
		}
	}

	return -ENOENT;
   1ad20:	f06f 0601 	mvn.w	r6, #1
}
   1ad24:	4630      	mov	r0, r6
   1ad26:	bd70      	pop	{r4, r5, r6, pc}
   1ad28:	20000370 	.word	0x20000370

0001ad2c <set_random_address>:
{
   1ad2c:	b570      	push	{r4, r5, r6, lr}
   1ad2e:	4604      	mov	r4, r0
	return memcmp(a, b, sizeof(*a));
   1ad30:	2206      	movs	r2, #6
   1ad32:	4914      	ldr	r1, [pc, #80]	; (1ad84 <set_random_address+0x58>)
   1ad34:	f00d fc93 	bl	2865e <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   1ad38:	4605      	mov	r5, r0
   1ad3a:	b908      	cbnz	r0, 1ad40 <set_random_address+0x14>
}
   1ad3c:	4628      	mov	r0, r5
   1ad3e:	bd70      	pop	{r4, r5, r6, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   1ad40:	2106      	movs	r1, #6
   1ad42:	f242 0005 	movw	r0, #8197	; 0x2005
   1ad46:	f7fe fbeb 	bl	19520 <bt_hci_cmd_create>
	if (!buf) {
   1ad4a:	4605      	mov	r5, r0
   1ad4c:	b1b8      	cbz	r0, 1ad7e <set_random_address+0x52>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1ad4e:	2206      	movs	r2, #6
   1ad50:	4621      	mov	r1, r4
   1ad52:	300c      	adds	r0, #12
   1ad54:	f010 f9a2 	bl	2b09c <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   1ad58:	2200      	movs	r2, #0
   1ad5a:	4629      	mov	r1, r5
   1ad5c:	f242 0005 	movw	r0, #8197	; 0x2005
   1ad60:	f7fe fc1c 	bl	1959c <bt_hci_cmd_send_sync>
	if (err) {
   1ad64:	4605      	mov	r5, r0
   1ad66:	2800      	cmp	r0, #0
   1ad68:	d1e8      	bne.n	1ad3c <set_random_address+0x10>
	memcpy(dst, src, sizeof(*dst));
   1ad6a:	4e06      	ldr	r6, [pc, #24]	; (1ad84 <set_random_address+0x58>)
   1ad6c:	2206      	movs	r2, #6
   1ad6e:	4621      	mov	r1, r4
   1ad70:	4630      	mov	r0, r6
   1ad72:	f00d fc86 	bl	28682 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   1ad76:	2301      	movs	r3, #1
   1ad78:	f806 3c01 	strb.w	r3, [r6, #-1]
	return 0;
   1ad7c:	e7de      	b.n	1ad3c <set_random_address+0x10>
		return -ENOBUFS;
   1ad7e:	f06f 0568 	mvn.w	r5, #104	; 0x68
   1ad82:	e7db      	b.n	1ad3c <set_random_address+0x10>
   1ad84:	200003d1 	.word	0x200003d1

0001ad88 <id_create>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
{
   1ad88:	b570      	push	{r4, r5, r6, lr}
   1ad8a:	b082      	sub	sp, #8
   1ad8c:	4605      	mov	r5, r0
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   1ad8e:	460e      	mov	r6, r1
   1ad90:	b129      	cbz	r1, 1ad9e <id_create+0x16>
	return memcmp(a, b, sizeof(*a));
   1ad92:	2207      	movs	r2, #7
   1ad94:	4915      	ldr	r1, [pc, #84]	; (1adec <id_create+0x64>)
   1ad96:	4630      	mov	r0, r6
   1ad98:	f00d fc61 	bl	2865e <memcmp>
   1ad9c:	b9d8      	cbnz	r0, 1add6 <id_create+0x4e>
		bt_addr_le_t new_addr;

		do {
			int err;

			err = bt_addr_le_create_static(&new_addr);
   1ad9e:	4668      	mov	r0, sp
   1ada0:	f00d fd38 	bl	28814 <bt_addr_le_create_static>
			if (err) {
   1ada4:	4604      	mov	r4, r0
   1ada6:	b998      	cbnz	r0, 1add0 <id_create+0x48>
				return err;
			}
			/* Make sure we didn't generate a duplicate */
		} while (id_find(&new_addr) >= 0);
   1ada8:	4668      	mov	r0, sp
   1adaa:	f7ff ffa3 	bl	1acf4 <id_find>
   1adae:	2800      	cmp	r0, #0
   1adb0:	daf5      	bge.n	1ad9e <id_create+0x16>

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   1adb2:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
   1adb6:	4b0e      	ldr	r3, [pc, #56]	; (1adf0 <id_create+0x68>)
   1adb8:	441d      	add	r5, r3
	memcpy(dst, src, sizeof(*dst));
   1adba:	2207      	movs	r2, #7
   1adbc:	4669      	mov	r1, sp
   1adbe:	4628      	mov	r0, r5
   1adc0:	f00d fc5f 	bl	28682 <memcpy>

		if (addr) {
   1adc4:	b126      	cbz	r6, 1add0 <id_create+0x48>
   1adc6:	2207      	movs	r2, #7
   1adc8:	4629      	mov	r1, r5
   1adca:	4630      	mov	r0, r6
   1adcc:	f00d fc59 	bl	28682 <memcpy>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
}
   1add0:	4620      	mov	r0, r4
   1add2:	b002      	add	sp, #8
   1add4:	bd70      	pop	{r4, r5, r6, pc}
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   1add6:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
   1adda:	2207      	movs	r2, #7
   1addc:	4631      	mov	r1, r6
   1adde:	4804      	ldr	r0, [pc, #16]	; (1adf0 <id_create+0x68>)
   1ade0:	4428      	add	r0, r5
   1ade2:	f00d fc4e 	bl	28682 <memcpy>
	return 0;
   1ade6:	2400      	movs	r4, #0
}
   1ade8:	e7f2      	b.n	1add0 <id_create+0x48>
   1adea:	bf00      	nop
   1adec:	0002f548 	.word	0x0002f548
   1adf0:	20000370 	.word	0x20000370

0001adf4 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   1adf4:	b570      	push	{r4, r5, r6, lr}
   1adf6:	b084      	sub	sp, #16
   1adf8:	460c      	mov	r4, r1
	int new_id, err;

	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   1adfa:	4605      	mov	r5, r0
   1adfc:	b188      	cbz	r0, 1ae22 <bt_id_create+0x2e>
	return memcmp(a, b, sizeof(*a));
   1adfe:	2207      	movs	r2, #7
   1ae00:	493d      	ldr	r1, [pc, #244]	; (1aef8 <bt_id_create+0x104>)
   1ae02:	f00d fc2c 	bl	2865e <memcmp>
   1ae06:	b160      	cbz	r0, 1ae22 <bt_id_create+0x2e>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   1ae08:	782b      	ldrb	r3, [r5, #0]
   1ae0a:	2b01      	cmp	r3, #1
   1ae0c:	d135      	bne.n	1ae7a <bt_id_create+0x86>
		    !BT_ADDR_IS_STATIC(&addr->a)) {
   1ae0e:	79ab      	ldrb	r3, [r5, #6]
		if (addr->type != BT_ADDR_LE_RANDOM ||
   1ae10:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1ae14:	2bc0      	cmp	r3, #192	; 0xc0
   1ae16:	d130      	bne.n	1ae7a <bt_id_create+0x86>
			LOG_ERR("Only static random identity address supported");
			return -EINVAL;
		}

		if (id_find(addr) >= 0) {
   1ae18:	4628      	mov	r0, r5
   1ae1a:	f7ff ff6b 	bl	1acf4 <id_find>
   1ae1e:	2800      	cmp	r0, #0
   1ae20:	da60      	bge.n	1aee4 <bt_id_create+0xf0>
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   1ae22:	2c00      	cmp	r4, #0
   1ae24:	d161      	bne.n	1aeea <bt_id_create+0xf6>
		return -EINVAL;
	}

	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   1ae26:	4b35      	ldr	r3, [pc, #212]	; (1aefc <bt_id_create+0x108>)
   1ae28:	79db      	ldrb	r3, [r3, #7]
   1ae2a:	2b01      	cmp	r3, #1
   1ae2c:	d060      	beq.n	1aef0 <bt_id_create+0xfc>
   1ae2e:	f3bf 8f5b 	dmb	ish
   1ae32:	4b33      	ldr	r3, [pc, #204]	; (1af00 <bt_id_create+0x10c>)
   1ae34:	681b      	ldr	r3, [r3, #0]
   1ae36:	f3bf 8f5b 	dmb	ish
		return -ENOMEM;
	}

	/* bt_rand is not available before Bluetooth enable has been called */
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   1ae3a:	f013 0f01 	tst.w	r3, #1
   1ae3e:	d10d      	bne.n	1ae5c <bt_id_create+0x68>
		uint8_t zero_irk[16] = { 0 };
   1ae40:	2300      	movs	r3, #0
   1ae42:	9300      	str	r3, [sp, #0]
   1ae44:	9301      	str	r3, [sp, #4]
   1ae46:	9302      	str	r3, [sp, #8]
   1ae48:	9303      	str	r3, [sp, #12]

		if (!(addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY))) {
   1ae4a:	2d00      	cmp	r5, #0
   1ae4c:	d047      	beq.n	1aede <bt_id_create+0xea>
   1ae4e:	2207      	movs	r2, #7
   1ae50:	4929      	ldr	r1, [pc, #164]	; (1aef8 <bt_id_create+0x104>)
   1ae52:	4628      	mov	r0, r5
   1ae54:	f00d fc03 	bl	2865e <memcmp>
   1ae58:	2800      	cmp	r0, #0
   1ae5a:	d040      	beq.n	1aede <bt_id_create+0xea>
		    !(irk && memcmp(irk, zero_irk, 16))) {
			return -EINVAL;
		}
	}

	new_id = bt_dev.id_count;
   1ae5c:	4b27      	ldr	r3, [pc, #156]	; (1aefc <bt_id_create+0x108>)
   1ae5e:	79de      	ldrb	r6, [r3, #7]
	err = id_create(new_id, addr, irk);
   1ae60:	4622      	mov	r2, r4
   1ae62:	4629      	mov	r1, r5
   1ae64:	4630      	mov	r0, r6
   1ae66:	f7ff ff8f 	bl	1ad88 <id_create>
	if (err) {
   1ae6a:	b920      	cbnz	r0, 1ae76 <bt_id_create+0x82>
		return err;
	} else {
		bt_dev.id_count++;
   1ae6c:	4a23      	ldr	r2, [pc, #140]	; (1aefc <bt_id_create+0x108>)
   1ae6e:	79d3      	ldrb	r3, [r2, #7]
   1ae70:	3301      	adds	r3, #1
   1ae72:	71d3      	strb	r3, [r2, #7]
	}

	return new_id;
   1ae74:	4630      	mov	r0, r6
}
   1ae76:	b004      	add	sp, #16
   1ae78:	bd70      	pop	{r4, r5, r6, pc}
			LOG_ERR("Only static random identity address supported");
   1ae7a:	2006      	movs	r0, #6
   1ae7c:	f7fa ffa4 	bl	15dc8 <z_log_msg_alloc>
   1ae80:	2200      	movs	r2, #0
   1ae82:	f36f 0200 	bfc	r2, #0, #1
   1ae86:	f36f 0241 	bfc	r2, #1, #1
   1ae8a:	f36f 0282 	bfc	r2, #2, #1
   1ae8e:	f36f 02c5 	bfc	r2, #3, #3
   1ae92:	2301      	movs	r3, #1
   1ae94:	f363 1288 	bfi	r2, r3, #6, #3
   1ae98:	2308      	movs	r3, #8
   1ae9a:	f363 2252 	bfi	r2, r3, #9, #10
   1ae9e:	f36f 42de 	bfc	r2, #19, #12
   1aea2:	f36f 72df 	bfc	r2, #31, #1
   1aea6:	4604      	mov	r4, r0
   1aea8:	b188      	cbz	r0, 1aece <bt_id_create+0xda>
   1aeaa:	f110 0310 	adds.w	r3, r0, #16
   1aeae:	d001      	beq.n	1aeb4 <bt_id_create+0xc0>
   1aeb0:	4914      	ldr	r1, [pc, #80]	; (1af04 <bt_id_create+0x110>)
   1aeb2:	6141      	str	r1, [r0, #20]
   1aeb4:	b15b      	cbz	r3, 1aece <bt_id_create+0xda>
   1aeb6:	2302      	movs	r3, #2
   1aeb8:	f88d 3000 	strb.w	r3, [sp]
   1aebc:	2300      	movs	r3, #0
   1aebe:	f88d 3001 	strb.w	r3, [sp, #1]
   1aec2:	f88d 3002 	strb.w	r3, [sp, #2]
   1aec6:	f88d 3003 	strb.w	r3, [sp, #3]
   1aeca:	9800      	ldr	r0, [sp, #0]
   1aecc:	6120      	str	r0, [r4, #16]
   1aece:	2300      	movs	r3, #0
   1aed0:	490d      	ldr	r1, [pc, #52]	; (1af08 <bt_id_create+0x114>)
   1aed2:	4620      	mov	r0, r4
   1aed4:	f00c ff83 	bl	27dde <z_log_msg_finalize>
			return -EINVAL;
   1aed8:	f06f 0015 	mvn.w	r0, #21
   1aedc:	e7cb      	b.n	1ae76 <bt_id_create+0x82>
			return -EINVAL;
   1aede:	f06f 0015 	mvn.w	r0, #21
   1aee2:	e7c8      	b.n	1ae76 <bt_id_create+0x82>
			return -EALREADY;
   1aee4:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1aee8:	e7c5      	b.n	1ae76 <bt_id_create+0x82>
		return -EINVAL;
   1aeea:	f06f 0015 	mvn.w	r0, #21
   1aeee:	e7c2      	b.n	1ae76 <bt_id_create+0x82>
		return -ENOMEM;
   1aef0:	f06f 000b 	mvn.w	r0, #11
   1aef4:	e7bf      	b.n	1ae76 <bt_id_create+0x82>
   1aef6:	bf00      	nop
   1aef8:	0002f548 	.word	0x0002f548
   1aefc:	20000370 	.word	0x20000370
   1af00:	2000043c 	.word	0x2000043c
   1af04:	0002fc44 	.word	0x0002fc44
   1af08:	0002de98 	.word	0x0002de98

0001af0c <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   1af0c:	b530      	push	{r4, r5, lr}
   1af0e:	b083      	sub	sp, #12
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	CHECKIF(addr == NULL) {
   1af10:	b1f0      	cbz	r0, 1af50 <bt_id_read_public_addr+0x44>
   1af12:	4605      	mov	r5, r0
		LOG_WRN("Invalid input parameters");
		return 0U;
	}

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   1af14:	aa01      	add	r2, sp, #4
   1af16:	2100      	movs	r1, #0
   1af18:	f241 0009 	movw	r0, #4105	; 0x1009
   1af1c:	f7fe fb3e 	bl	1959c <bt_hci_cmd_send_sync>
	if (err) {
   1af20:	2800      	cmp	r0, #0
   1af22:	d146      	bne.n	1afb2 <bt_id_read_public_addr+0xa6>
		LOG_WRN("Failed to read public address");
		return 0U;
	}

	rp = (void *)rsp->data;
   1af24:	9b01      	ldr	r3, [sp, #4]
   1af26:	68dc      	ldr	r4, [r3, #12]

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   1af28:	3401      	adds	r4, #1
	return memcmp(a, b, sizeof(*a));
   1af2a:	2206      	movs	r2, #6
   1af2c:	493f      	ldr	r1, [pc, #252]	; (1b02c <bt_id_read_public_addr+0x120>)
   1af2e:	4620      	mov	r0, r4
   1af30:	f00d fb95 	bl	2865e <memcmp>
   1af34:	b130      	cbz	r0, 1af44 <bt_id_read_public_addr+0x38>
   1af36:	2206      	movs	r2, #6
   1af38:	493d      	ldr	r1, [pc, #244]	; (1b030 <bt_id_read_public_addr+0x124>)
   1af3a:	4620      	mov	r0, r4
   1af3c:	f00d fb8f 	bl	2865e <memcmp>
   1af40:	2800      	cmp	r0, #0
   1af42:	d167      	bne.n	1b014 <bt_id_read_public_addr+0x108>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		LOG_DBG("Controller has no public address");
		net_buf_unref(rsp);
   1af44:	9801      	ldr	r0, [sp, #4]
   1af46:	f010 f85c 	bl	2b002 <net_buf_unref>
		return 0U;
   1af4a:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   1af4c:	b003      	add	sp, #12
   1af4e:	bd30      	pop	{r4, r5, pc}
		LOG_WRN("Invalid input parameters");
   1af50:	2006      	movs	r0, #6
   1af52:	f7fa ff39 	bl	15dc8 <z_log_msg_alloc>
   1af56:	2200      	movs	r2, #0
   1af58:	f36f 0200 	bfc	r2, #0, #1
   1af5c:	f36f 0241 	bfc	r2, #1, #1
   1af60:	f36f 0282 	bfc	r2, #2, #1
   1af64:	f36f 02c5 	bfc	r2, #3, #3
   1af68:	2302      	movs	r3, #2
   1af6a:	f363 1288 	bfi	r2, r3, #6, #3
   1af6e:	2308      	movs	r3, #8
   1af70:	f363 2252 	bfi	r2, r3, #9, #10
   1af74:	f36f 42de 	bfc	r2, #19, #12
   1af78:	f36f 72df 	bfc	r2, #31, #1
   1af7c:	4604      	mov	r4, r0
   1af7e:	b188      	cbz	r0, 1afa4 <bt_id_read_public_addr+0x98>
   1af80:	f110 0310 	adds.w	r3, r0, #16
   1af84:	d001      	beq.n	1af8a <bt_id_read_public_addr+0x7e>
   1af86:	492b      	ldr	r1, [pc, #172]	; (1b034 <bt_id_read_public_addr+0x128>)
   1af88:	6141      	str	r1, [r0, #20]
   1af8a:	b15b      	cbz	r3, 1afa4 <bt_id_read_public_addr+0x98>
   1af8c:	2302      	movs	r3, #2
   1af8e:	f88d 3000 	strb.w	r3, [sp]
   1af92:	2300      	movs	r3, #0
   1af94:	f88d 3001 	strb.w	r3, [sp, #1]
   1af98:	f88d 3002 	strb.w	r3, [sp, #2]
   1af9c:	f88d 3003 	strb.w	r3, [sp, #3]
   1afa0:	9800      	ldr	r0, [sp, #0]
   1afa2:	6120      	str	r0, [r4, #16]
   1afa4:	2300      	movs	r3, #0
   1afa6:	4924      	ldr	r1, [pc, #144]	; (1b038 <bt_id_read_public_addr+0x12c>)
   1afa8:	4620      	mov	r0, r4
   1afaa:	f00c ff18 	bl	27dde <z_log_msg_finalize>
		return 0U;
   1afae:	2000      	movs	r0, #0
   1afb0:	e7cc      	b.n	1af4c <bt_id_read_public_addr+0x40>
		LOG_WRN("Failed to read public address");
   1afb2:	2006      	movs	r0, #6
   1afb4:	f7fa ff08 	bl	15dc8 <z_log_msg_alloc>
   1afb8:	2200      	movs	r2, #0
   1afba:	f36f 0200 	bfc	r2, #0, #1
   1afbe:	f36f 0241 	bfc	r2, #1, #1
   1afc2:	f36f 0282 	bfc	r2, #2, #1
   1afc6:	f36f 02c5 	bfc	r2, #3, #3
   1afca:	2302      	movs	r3, #2
   1afcc:	f363 1288 	bfi	r2, r3, #6, #3
   1afd0:	2308      	movs	r3, #8
   1afd2:	f363 2252 	bfi	r2, r3, #9, #10
   1afd6:	f36f 42de 	bfc	r2, #19, #12
   1afda:	f36f 72df 	bfc	r2, #31, #1
   1afde:	4604      	mov	r4, r0
   1afe0:	b188      	cbz	r0, 1b006 <bt_id_read_public_addr+0xfa>
   1afe2:	f110 0310 	adds.w	r3, r0, #16
   1afe6:	d001      	beq.n	1afec <bt_id_read_public_addr+0xe0>
   1afe8:	4914      	ldr	r1, [pc, #80]	; (1b03c <bt_id_read_public_addr+0x130>)
   1afea:	6141      	str	r1, [r0, #20]
   1afec:	b15b      	cbz	r3, 1b006 <bt_id_read_public_addr+0xfa>
   1afee:	2302      	movs	r3, #2
   1aff0:	f88d 3000 	strb.w	r3, [sp]
   1aff4:	2300      	movs	r3, #0
   1aff6:	f88d 3001 	strb.w	r3, [sp, #1]
   1affa:	f88d 3002 	strb.w	r3, [sp, #2]
   1affe:	f88d 3003 	strb.w	r3, [sp, #3]
   1b002:	9800      	ldr	r0, [sp, #0]
   1b004:	6120      	str	r0, [r4, #16]
   1b006:	2300      	movs	r3, #0
   1b008:	490b      	ldr	r1, [pc, #44]	; (1b038 <bt_id_read_public_addr+0x12c>)
   1b00a:	4620      	mov	r0, r4
   1b00c:	f00c fee7 	bl	27dde <z_log_msg_finalize>
		return 0U;
   1b010:	2000      	movs	r0, #0
   1b012:	e79b      	b.n	1af4c <bt_id_read_public_addr+0x40>
	memcpy(dst, src, sizeof(*dst));
   1b014:	2206      	movs	r2, #6
   1b016:	4621      	mov	r1, r4
   1b018:	1c68      	adds	r0, r5, #1
   1b01a:	f00d fb32 	bl	28682 <memcpy>
	addr->type = BT_ADDR_LE_PUBLIC;
   1b01e:	2300      	movs	r3, #0
   1b020:	702b      	strb	r3, [r5, #0]
	net_buf_unref(rsp);
   1b022:	9801      	ldr	r0, [sp, #4]
   1b024:	f00f ffed 	bl	2b002 <net_buf_unref>
	return 1U;
   1b028:	2001      	movs	r0, #1
   1b02a:	e78f      	b.n	1af4c <bt_id_read_public_addr+0x40>
   1b02c:	0002f558 	.word	0x0002f558
   1b030:	0002f550 	.word	0x0002f550
   1b034:	0002fc74 	.word	0x0002fc74
   1b038:	0002de98 	.word	0x0002de98
   1b03c:	0002fc90 	.word	0x0002fc90

0001b040 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   1b040:	b500      	push	{lr}
   1b042:	b083      	sub	sp, #12
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   1b044:	4668      	mov	r0, sp
   1b046:	f7ff ff61 	bl	1af0c <bt_id_read_public_addr>
   1b04a:	4b06      	ldr	r3, [pc, #24]	; (1b064 <bt_setup_public_id_addr+0x24>)
   1b04c:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   1b04e:	b918      	cbnz	r0, 1b058 <bt_setup_public_id_addr+0x18>
		return 0;
   1b050:	2000      	movs	r0, #0
			atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
		}
	}

	return id_create(BT_ID_DEFAULT, &addr, irk);
}
   1b052:	b003      	add	sp, #12
   1b054:	f85d fb04 	ldr.w	pc, [sp], #4
	return id_create(BT_ID_DEFAULT, &addr, irk);
   1b058:	2200      	movs	r2, #0
   1b05a:	4669      	mov	r1, sp
   1b05c:	4610      	mov	r0, r2
   1b05e:	f7ff fe93 	bl	1ad88 <id_create>
   1b062:	e7f6      	b.n	1b052 <bt_setup_public_id_addr+0x12>
   1b064:	20000370 	.word	0x20000370

0001b068 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   1b068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b06c:	b082      	sub	sp, #8
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   1b06e:	4b5d      	ldr	r3, [pc, #372]	; (1b1e4 <bt_read_static_addr+0x17c>)
   1b070:	f893 50ba 	ldrb.w	r5, [r3, #186]	; 0xba
   1b074:	f015 0501 	ands.w	r5, r5, #1
   1b078:	d010      	beq.n	1b09c <bt_read_static_addr+0x34>
   1b07a:	4607      	mov	r7, r0
   1b07c:	4688      	mov	r8, r1
		LOG_WRN("Read Static Addresses command not available");
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   1b07e:	aa01      	add	r2, sp, #4
   1b080:	2100      	movs	r1, #0
   1b082:	f64f 4009 	movw	r0, #64521	; 0xfc09
   1b086:	f7fe fa89 	bl	1959c <bt_hci_cmd_send_sync>
	if (err) {
   1b08a:	4604      	mov	r4, r0
   1b08c:	bbb0      	cbnz	r0, 1b0fc <bt_read_static_addr+0x94>
		LOG_WRN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	rp = (void *)rsp->data;
   1b08e:	9b01      	ldr	r3, [sp, #4]
   1b090:	68de      	ldr	r6, [r3, #12]
	cnt = MIN(rp->num_addrs, size);
   1b092:	7875      	ldrb	r5, [r6, #1]
   1b094:	4545      	cmp	r5, r8
   1b096:	bf28      	it	cs
   1b098:	4645      	movcs	r5, r8
		LOG_WRN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	for (i = 0; i < cnt; i++) {
   1b09a:	e069      	b.n	1b170 <bt_read_static_addr+0x108>
		LOG_WRN("Read Static Addresses command not available");
   1b09c:	2006      	movs	r0, #6
   1b09e:	f7fa fe93 	bl	15dc8 <z_log_msg_alloc>
   1b0a2:	2200      	movs	r2, #0
   1b0a4:	f36f 0200 	bfc	r2, #0, #1
   1b0a8:	f36f 0241 	bfc	r2, #1, #1
   1b0ac:	f36f 0282 	bfc	r2, #2, #1
   1b0b0:	f36f 02c5 	bfc	r2, #3, #3
   1b0b4:	2302      	movs	r3, #2
   1b0b6:	f363 1288 	bfi	r2, r3, #6, #3
   1b0ba:	2308      	movs	r3, #8
   1b0bc:	f363 2252 	bfi	r2, r3, #9, #10
   1b0c0:	f36f 42de 	bfc	r2, #19, #12
   1b0c4:	f36f 72df 	bfc	r2, #31, #1
   1b0c8:	4604      	mov	r4, r0
   1b0ca:	b188      	cbz	r0, 1b0f0 <bt_read_static_addr+0x88>
   1b0cc:	f110 0310 	adds.w	r3, r0, #16
   1b0d0:	d001      	beq.n	1b0d6 <bt_read_static_addr+0x6e>
   1b0d2:	4945      	ldr	r1, [pc, #276]	; (1b1e8 <bt_read_static_addr+0x180>)
   1b0d4:	6141      	str	r1, [r0, #20]
   1b0d6:	b15b      	cbz	r3, 1b0f0 <bt_read_static_addr+0x88>
   1b0d8:	2302      	movs	r3, #2
   1b0da:	f88d 3000 	strb.w	r3, [sp]
   1b0de:	2300      	movs	r3, #0
   1b0e0:	f88d 3001 	strb.w	r3, [sp, #1]
   1b0e4:	f88d 3002 	strb.w	r3, [sp, #2]
   1b0e8:	f88d 3003 	strb.w	r3, [sp, #3]
   1b0ec:	9800      	ldr	r0, [sp, #0]
   1b0ee:	6120      	str	r0, [r4, #16]
   1b0f0:	2300      	movs	r3, #0
   1b0f2:	493e      	ldr	r1, [pc, #248]	; (1b1ec <bt_read_static_addr+0x184>)
   1b0f4:	4620      	mov	r0, r4
   1b0f6:	f00c fe72 	bl	27dde <z_log_msg_finalize>
		return 0;
   1b0fa:	e03f      	b.n	1b17c <bt_read_static_addr+0x114>
		LOG_WRN("Failed to read static addresses");
   1b0fc:	2006      	movs	r0, #6
   1b0fe:	f7fa fe63 	bl	15dc8 <z_log_msg_alloc>
   1b102:	2200      	movs	r2, #0
   1b104:	f36f 0200 	bfc	r2, #0, #1
   1b108:	f36f 0241 	bfc	r2, #1, #1
   1b10c:	f36f 0282 	bfc	r2, #2, #1
   1b110:	f36f 02c5 	bfc	r2, #3, #3
   1b114:	2302      	movs	r3, #2
   1b116:	f363 1288 	bfi	r2, r3, #6, #3
   1b11a:	2308      	movs	r3, #8
   1b11c:	f363 2252 	bfi	r2, r3, #9, #10
   1b120:	f36f 42de 	bfc	r2, #19, #12
   1b124:	f36f 72df 	bfc	r2, #31, #1
   1b128:	4604      	mov	r4, r0
   1b12a:	b188      	cbz	r0, 1b150 <bt_read_static_addr+0xe8>
   1b12c:	f110 0310 	adds.w	r3, r0, #16
   1b130:	d001      	beq.n	1b136 <bt_read_static_addr+0xce>
   1b132:	492f      	ldr	r1, [pc, #188]	; (1b1f0 <bt_read_static_addr+0x188>)
   1b134:	6141      	str	r1, [r0, #20]
   1b136:	b15b      	cbz	r3, 1b150 <bt_read_static_addr+0xe8>
   1b138:	2302      	movs	r3, #2
   1b13a:	f88d 3000 	strb.w	r3, [sp]
   1b13e:	2300      	movs	r3, #0
   1b140:	f88d 3001 	strb.w	r3, [sp, #1]
   1b144:	f88d 3002 	strb.w	r3, [sp, #2]
   1b148:	f88d 3003 	strb.w	r3, [sp, #3]
   1b14c:	9800      	ldr	r0, [sp, #0]
   1b14e:	6120      	str	r0, [r4, #16]
   1b150:	2300      	movs	r3, #0
   1b152:	4926      	ldr	r1, [pc, #152]	; (1b1ec <bt_read_static_addr+0x184>)
   1b154:	4620      	mov	r0, r4
   1b156:	f00c fe42 	bl	27dde <z_log_msg_finalize>
		return 0;
   1b15a:	2500      	movs	r5, #0
   1b15c:	e00e      	b.n	1b17c <bt_read_static_addr+0x114>
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
   1b15e:	2216      	movs	r2, #22
   1b160:	fb02 f004 	mul.w	r0, r2, r4
   1b164:	1831      	adds	r1, r6, r0
   1b166:	3102      	adds	r1, #2
   1b168:	4438      	add	r0, r7
   1b16a:	f00d fa8a 	bl	28682 <memcpy>
	for (i = 0; i < cnt; i++) {
   1b16e:	3401      	adds	r4, #1
   1b170:	42a5      	cmp	r5, r4
   1b172:	dcf4      	bgt.n	1b15e <bt_read_static_addr+0xf6>
	}

	net_buf_unref(rsp);
   1b174:	9801      	ldr	r0, [sp, #4]
   1b176:	f00f ff44 	bl	2b002 <net_buf_unref>
	if (!cnt) {
   1b17a:	b11d      	cbz	r5, 1b184 <bt_read_static_addr+0x11c>
		LOG_WRN("No static addresses stored in controller");
	}

	return cnt;
}
   1b17c:	4628      	mov	r0, r5
   1b17e:	b002      	add	sp, #8
   1b180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_WRN("No static addresses stored in controller");
   1b184:	2006      	movs	r0, #6
   1b186:	f7fa fe1f 	bl	15dc8 <z_log_msg_alloc>
   1b18a:	2200      	movs	r2, #0
   1b18c:	f36f 0200 	bfc	r2, #0, #1
   1b190:	f36f 0241 	bfc	r2, #1, #1
   1b194:	f36f 0282 	bfc	r2, #2, #1
   1b198:	f36f 02c5 	bfc	r2, #3, #3
   1b19c:	2302      	movs	r3, #2
   1b19e:	f363 1288 	bfi	r2, r3, #6, #3
   1b1a2:	2308      	movs	r3, #8
   1b1a4:	f363 2252 	bfi	r2, r3, #9, #10
   1b1a8:	f36f 42de 	bfc	r2, #19, #12
   1b1ac:	f36f 72df 	bfc	r2, #31, #1
   1b1b0:	4604      	mov	r4, r0
   1b1b2:	b188      	cbz	r0, 1b1d8 <bt_read_static_addr+0x170>
   1b1b4:	f110 0310 	adds.w	r3, r0, #16
   1b1b8:	d001      	beq.n	1b1be <bt_read_static_addr+0x156>
   1b1ba:	490e      	ldr	r1, [pc, #56]	; (1b1f4 <bt_read_static_addr+0x18c>)
   1b1bc:	6141      	str	r1, [r0, #20]
   1b1be:	b15b      	cbz	r3, 1b1d8 <bt_read_static_addr+0x170>
   1b1c0:	2302      	movs	r3, #2
   1b1c2:	f88d 3000 	strb.w	r3, [sp]
   1b1c6:	2300      	movs	r3, #0
   1b1c8:	f88d 3001 	strb.w	r3, [sp, #1]
   1b1cc:	f88d 3002 	strb.w	r3, [sp, #2]
   1b1d0:	f88d 3003 	strb.w	r3, [sp, #3]
   1b1d4:	9800      	ldr	r0, [sp, #0]
   1b1d6:	6120      	str	r0, [r4, #16]
   1b1d8:	2300      	movs	r3, #0
   1b1da:	4904      	ldr	r1, [pc, #16]	; (1b1ec <bt_read_static_addr+0x184>)
   1b1dc:	4620      	mov	r0, r4
   1b1de:	f00c fdfe 	bl	27dde <z_log_msg_finalize>
   1b1e2:	e7cb      	b.n	1b17c <bt_read_static_addr+0x114>
   1b1e4:	20000370 	.word	0x20000370
   1b1e8:	0002fcb0 	.word	0x0002fcb0
   1b1ec:	0002de98 	.word	0x0002de98
   1b1f0:	0002fcdc 	.word	0x0002fcdc
   1b1f4:	0002fcfc 	.word	0x0002fcfc

0001b1f8 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   1b1f8:	b510      	push	{r4, lr}
   1b1fa:	b088      	sub	sp, #32
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   1b1fc:	4b17      	ldr	r3, [pc, #92]	; (1b25c <bt_setup_random_id_addr+0x64>)
   1b1fe:	79dc      	ldrb	r4, [r3, #7]
   1b200:	b934      	cbnz	r4, 1b210 <bt_setup_random_id_addr+0x18>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   1b202:	2101      	movs	r1, #1
   1b204:	a802      	add	r0, sp, #8
   1b206:	f7ff ff2f 	bl	1b068 <bt_read_static_addr>
   1b20a:	4b14      	ldr	r3, [pc, #80]	; (1b25c <bt_setup_random_id_addr+0x64>)
   1b20c:	71d8      	strb	r0, [r3, #7]

		if (bt_dev.id_count) {
   1b20e:	b948      	cbnz	r0, 1b224 <bt_setup_random_id_addr+0x2c>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   1b210:	2100      	movs	r1, #0
   1b212:	4608      	mov	r0, r1
   1b214:	f7ff fdee 	bl	1adf4 <bt_id_create>
   1b218:	4603      	mov	r3, r0
}
   1b21a:	4618      	mov	r0, r3
   1b21c:	b008      	add	sp, #32
   1b21e:	bd10      	pop	{r4, pc}
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   1b220:	3401      	adds	r4, #1
   1b222:	b2e4      	uxtb	r4, r4
   1b224:	4b0d      	ldr	r3, [pc, #52]	; (1b25c <bt_setup_random_id_addr+0x64>)
   1b226:	79db      	ldrb	r3, [r3, #7]
   1b228:	42a3      	cmp	r3, r4
   1b22a:	d914      	bls.n	1b256 <bt_setup_random_id_addr+0x5e>
   1b22c:	2206      	movs	r2, #6
   1b22e:	2116      	movs	r1, #22
   1b230:	ab02      	add	r3, sp, #8
   1b232:	fb01 3104 	mla	r1, r1, r4, r3
   1b236:	f10d 0001 	add.w	r0, sp, #1
   1b23a:	f00d fa22 	bl	28682 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   1b23e:	2301      	movs	r3, #1
   1b240:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   1b244:	2200      	movs	r2, #0
   1b246:	4669      	mov	r1, sp
   1b248:	4620      	mov	r0, r4
   1b24a:	f7ff fd9d 	bl	1ad88 <id_create>
				if (err) {
   1b24e:	4603      	mov	r3, r0
   1b250:	2800      	cmp	r0, #0
   1b252:	d0e5      	beq.n	1b220 <bt_setup_random_id_addr+0x28>
   1b254:	e7e1      	b.n	1b21a <bt_setup_random_id_addr+0x22>
			return 0;
   1b256:	2300      	movs	r3, #0
   1b258:	e7df      	b.n	1b21a <bt_setup_random_id_addr+0x22>
   1b25a:	bf00      	nop
   1b25c:	20000370 	.word	0x20000370

0001b260 <bt_id_set_create_conn_own_addr>:

int bt_id_set_create_conn_own_addr(bool use_filter, uint8_t *own_addr_type)
{
	int err;

	CHECKIF(own_addr_type == NULL) {
   1b260:	b181      	cbz	r1, 1b284 <bt_id_set_create_conn_own_addr+0x24>
{
   1b262:	b510      	push	{r4, lr}
   1b264:	460c      	mov	r4, r1

		/* If Static Random address is used as Identity address we
		 * need to restore it before creating connection. Otherwise
		 * NRPA used for active scan could be used for connection.
		 */
		if (addr->type == BT_ADDR_LE_RANDOM) {
   1b266:	4b09      	ldr	r3, [pc, #36]	; (1b28c <bt_id_set_create_conn_own_addr+0x2c>)
   1b268:	781b      	ldrb	r3, [r3, #0]
   1b26a:	2b01      	cmp	r3, #1
   1b26c:	d004      	beq.n	1b278 <bt_id_set_create_conn_own_addr+0x18>
			if (err) {
				return err;
			}
		}

		*own_addr_type = addr->type;
   1b26e:	4b07      	ldr	r3, [pc, #28]	; (1b28c <bt_id_set_create_conn_own_addr+0x2c>)
   1b270:	781b      	ldrb	r3, [r3, #0]
   1b272:	7023      	strb	r3, [r4, #0]
	}

	return 0;
   1b274:	2000      	movs	r0, #0
}
   1b276:	bd10      	pop	{r4, pc}
			err = set_random_address(&addr->a);
   1b278:	4805      	ldr	r0, [pc, #20]	; (1b290 <bt_id_set_create_conn_own_addr+0x30>)
   1b27a:	f7ff fd57 	bl	1ad2c <set_random_address>
			if (err) {
   1b27e:	2800      	cmp	r0, #0
   1b280:	d0f5      	beq.n	1b26e <bt_id_set_create_conn_own_addr+0xe>
   1b282:	e7f8      	b.n	1b276 <bt_id_set_create_conn_own_addr+0x16>
		return -EINVAL;
   1b284:	f06f 0015 	mvn.w	r0, #21
}
   1b288:	4770      	bx	lr
   1b28a:	bf00      	nop
   1b28c:	20000370 	.word	0x20000370
   1b290:	20000371 	.word	0x20000371

0001b294 <bt_id_set_scan_own_addr>:

int bt_id_set_scan_own_addr(bool active_scan, uint8_t *own_addr_type)
{
	int err;

	CHECKIF(own_addr_type == NULL) {
   1b294:	b181      	cbz	r1, 1b2b8 <bt_id_set_scan_own_addr+0x24>
{
   1b296:	b510      	push	{r4, lr}
   1b298:	460c      	mov	r4, r1
			*own_addr_type = BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
		} else {
			*own_addr_type = BT_ADDR_LE_RANDOM;
		}
	} else {
		*own_addr_type = bt_dev.id_addr[0].type;
   1b29a:	4b09      	ldr	r3, [pc, #36]	; (1b2c0 <bt_id_set_scan_own_addr+0x2c>)
   1b29c:	781b      	ldrb	r3, [r3, #0]
   1b29e:	700b      	strb	r3, [r1, #0]
		/* Use NRPA unless identity has been explicitly requested
		 * (through Kconfig).
		 * Use same RPA as legacy advertiser if advertising.
		 */
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
		    !is_adv_using_rand_addr()) {
   1b2a0:	f00d fc4d 	bl	28b3e <is_adv_using_rand_addr>
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
   1b2a4:	b108      	cbz	r0, 1b2aa <bt_id_set_scan_own_addr+0x16>
				return err;
			}
		}
	}

	return 0;
   1b2a6:	2000      	movs	r0, #0
}
   1b2a8:	bd10      	pop	{r4, pc}
			err = bt_id_set_private_addr(BT_ID_DEFAULT);
   1b2aa:	f00d fc52 	bl	28b52 <bt_id_set_private_addr>
			if (err) {
   1b2ae:	2800      	cmp	r0, #0
   1b2b0:	d1fa      	bne.n	1b2a8 <bt_id_set_scan_own_addr+0x14>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   1b2b2:	2301      	movs	r3, #1
   1b2b4:	7023      	strb	r3, [r4, #0]
   1b2b6:	e7f7      	b.n	1b2a8 <bt_id_set_scan_own_addr+0x14>
		return -EINVAL;
   1b2b8:	f06f 0015 	mvn.w	r0, #21
}
   1b2bc:	4770      	bx	lr
   1b2be:	bf00      	nop
   1b2c0:	20000370 	.word	0x20000370

0001b2c4 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   1b2c4:	b510      	push	{r4, lr}
   1b2c6:	b082      	sub	sp, #8
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   1b2c8:	4b56      	ldr	r3, [pc, #344]	; (1b424 <bt_id_init+0x160>)
   1b2ca:	79db      	ldrb	r3, [r3, #7]
   1b2cc:	b13b      	cbz	r3, 1b2de <bt_id_init+0x1a>
			LOG_ERR("Unable to set identity address");
			return err;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   1b2ce:	4b55      	ldr	r3, [pc, #340]	; (1b424 <bt_id_init+0x160>)
   1b2d0:	79db      	ldrb	r3, [r3, #7]
   1b2d2:	2b00      	cmp	r3, #0
   1b2d4:	d039      	beq.n	1b34a <bt_id_init+0x86>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
   1b2d6:	2400      	movs	r4, #0
}
   1b2d8:	4620      	mov	r0, r4
   1b2da:	b002      	add	sp, #8
   1b2dc:	bd10      	pop	{r4, pc}
		err = bt_setup_public_id_addr();
   1b2de:	f7ff feaf 	bl	1b040 <bt_setup_public_id_addr>
		if (err) {
   1b2e2:	4604      	mov	r4, r0
   1b2e4:	2800      	cmp	r0, #0
   1b2e6:	d0f2      	beq.n	1b2ce <bt_id_init+0xa>
			LOG_ERR("Unable to set identity address");
   1b2e8:	2006      	movs	r0, #6
   1b2ea:	f7fa fd6d 	bl	15dc8 <z_log_msg_alloc>
   1b2ee:	2200      	movs	r2, #0
   1b2f0:	f36f 0200 	bfc	r2, #0, #1
   1b2f4:	f36f 0241 	bfc	r2, #1, #1
   1b2f8:	f36f 0282 	bfc	r2, #2, #1
   1b2fc:	f36f 02c5 	bfc	r2, #3, #3
   1b300:	2301      	movs	r3, #1
   1b302:	f363 1288 	bfi	r2, r3, #6, #3
   1b306:	2308      	movs	r3, #8
   1b308:	f363 2252 	bfi	r2, r3, #9, #10
   1b30c:	f36f 42de 	bfc	r2, #19, #12
   1b310:	f36f 72df 	bfc	r2, #31, #1
   1b314:	4684      	mov	ip, r0
   1b316:	b190      	cbz	r0, 1b33e <bt_id_init+0x7a>
   1b318:	f110 0310 	adds.w	r3, r0, #16
   1b31c:	d001      	beq.n	1b322 <bt_id_init+0x5e>
   1b31e:	4942      	ldr	r1, [pc, #264]	; (1b428 <bt_id_init+0x164>)
   1b320:	6141      	str	r1, [r0, #20]
   1b322:	b163      	cbz	r3, 1b33e <bt_id_init+0x7a>
   1b324:	2302      	movs	r3, #2
   1b326:	f88d 3004 	strb.w	r3, [sp, #4]
   1b32a:	2300      	movs	r3, #0
   1b32c:	f88d 3005 	strb.w	r3, [sp, #5]
   1b330:	f88d 3006 	strb.w	r3, [sp, #6]
   1b334:	f88d 3007 	strb.w	r3, [sp, #7]
   1b338:	9801      	ldr	r0, [sp, #4]
   1b33a:	f8cc 0010 	str.w	r0, [ip, #16]
   1b33e:	2300      	movs	r3, #0
   1b340:	493a      	ldr	r1, [pc, #232]	; (1b42c <bt_id_init+0x168>)
   1b342:	4660      	mov	r0, ip
   1b344:	f00c fd4b 	bl	27dde <z_log_msg_finalize>
			return err;
   1b348:	e7c6      	b.n	1b2d8 <bt_id_init+0x14>
		err = bt_setup_random_id_addr();
   1b34a:	f7ff ff55 	bl	1b1f8 <bt_setup_random_id_addr>
		if (err) {
   1b34e:	4604      	mov	r4, r0
   1b350:	bbb0      	cbnz	r0, 1b3c0 <bt_id_init+0xfc>
		err = set_random_address(&bt_dev.id_addr[0].a);
   1b352:	4837      	ldr	r0, [pc, #220]	; (1b430 <bt_id_init+0x16c>)
   1b354:	f7ff fcea 	bl	1ad2c <set_random_address>
		if (err) {
   1b358:	4604      	mov	r4, r0
   1b35a:	2800      	cmp	r0, #0
   1b35c:	d0bc      	beq.n	1b2d8 <bt_id_init+0x14>
			LOG_ERR("Unable to set random address");
   1b35e:	2006      	movs	r0, #6
   1b360:	f7fa fd32 	bl	15dc8 <z_log_msg_alloc>
   1b364:	2200      	movs	r2, #0
   1b366:	f36f 0200 	bfc	r2, #0, #1
   1b36a:	f36f 0241 	bfc	r2, #1, #1
   1b36e:	f36f 0282 	bfc	r2, #2, #1
   1b372:	f36f 02c5 	bfc	r2, #3, #3
   1b376:	2301      	movs	r3, #1
   1b378:	f363 1288 	bfi	r2, r3, #6, #3
   1b37c:	2308      	movs	r3, #8
   1b37e:	f363 2252 	bfi	r2, r3, #9, #10
   1b382:	f36f 42de 	bfc	r2, #19, #12
   1b386:	f36f 72df 	bfc	r2, #31, #1
   1b38a:	4684      	mov	ip, r0
   1b38c:	b190      	cbz	r0, 1b3b4 <bt_id_init+0xf0>
   1b38e:	f110 0310 	adds.w	r3, r0, #16
   1b392:	d001      	beq.n	1b398 <bt_id_init+0xd4>
   1b394:	4927      	ldr	r1, [pc, #156]	; (1b434 <bt_id_init+0x170>)
   1b396:	6141      	str	r1, [r0, #20]
   1b398:	b163      	cbz	r3, 1b3b4 <bt_id_init+0xf0>
   1b39a:	2302      	movs	r3, #2
   1b39c:	f88d 3004 	strb.w	r3, [sp, #4]
   1b3a0:	2300      	movs	r3, #0
   1b3a2:	f88d 3005 	strb.w	r3, [sp, #5]
   1b3a6:	f88d 3006 	strb.w	r3, [sp, #6]
   1b3aa:	f88d 3007 	strb.w	r3, [sp, #7]
   1b3ae:	9801      	ldr	r0, [sp, #4]
   1b3b0:	f8cc 0010 	str.w	r0, [ip, #16]
   1b3b4:	2300      	movs	r3, #0
   1b3b6:	491d      	ldr	r1, [pc, #116]	; (1b42c <bt_id_init+0x168>)
   1b3b8:	4660      	mov	r0, ip
   1b3ba:	f00c fd10 	bl	27dde <z_log_msg_finalize>
			return err;
   1b3be:	e78b      	b.n	1b2d8 <bt_id_init+0x14>
			LOG_ERR("Unable to set identity address");
   1b3c0:	2006      	movs	r0, #6
   1b3c2:	f7fa fd01 	bl	15dc8 <z_log_msg_alloc>
   1b3c6:	2200      	movs	r2, #0
   1b3c8:	f36f 0200 	bfc	r2, #0, #1
   1b3cc:	f36f 0241 	bfc	r2, #1, #1
   1b3d0:	f36f 0282 	bfc	r2, #2, #1
   1b3d4:	f36f 02c5 	bfc	r2, #3, #3
   1b3d8:	2301      	movs	r3, #1
   1b3da:	f363 1288 	bfi	r2, r3, #6, #3
   1b3de:	2308      	movs	r3, #8
   1b3e0:	f363 2252 	bfi	r2, r3, #9, #10
   1b3e4:	f36f 42de 	bfc	r2, #19, #12
   1b3e8:	f36f 72df 	bfc	r2, #31, #1
   1b3ec:	4684      	mov	ip, r0
   1b3ee:	b190      	cbz	r0, 1b416 <bt_id_init+0x152>
   1b3f0:	f110 0310 	adds.w	r3, r0, #16
   1b3f4:	d001      	beq.n	1b3fa <bt_id_init+0x136>
   1b3f6:	490c      	ldr	r1, [pc, #48]	; (1b428 <bt_id_init+0x164>)
   1b3f8:	6141      	str	r1, [r0, #20]
   1b3fa:	b163      	cbz	r3, 1b416 <bt_id_init+0x152>
   1b3fc:	2302      	movs	r3, #2
   1b3fe:	f88d 3004 	strb.w	r3, [sp, #4]
   1b402:	2300      	movs	r3, #0
   1b404:	f88d 3005 	strb.w	r3, [sp, #5]
   1b408:	f88d 3006 	strb.w	r3, [sp, #6]
   1b40c:	f88d 3007 	strb.w	r3, [sp, #7]
   1b410:	9801      	ldr	r0, [sp, #4]
   1b412:	f8cc 0010 	str.w	r0, [ip, #16]
   1b416:	2300      	movs	r3, #0
   1b418:	4904      	ldr	r1, [pc, #16]	; (1b42c <bt_id_init+0x168>)
   1b41a:	4660      	mov	r0, ip
   1b41c:	f00c fcdf 	bl	27dde <z_log_msg_finalize>
			return err;
   1b420:	e75a      	b.n	1b2d8 <bt_id_init+0x14>
   1b422:	bf00      	nop
   1b424:	20000370 	.word	0x20000370
   1b428:	0002fd28 	.word	0x0002fd28
   1b42c:	0002de98 	.word	0x0002de98
   1b430:	20000371 	.word	0x20000371
   1b434:	0002fd48 	.word	0x0002fd48

0001b438 <bt_le_scan_set_enable_legacy>:

	return 0;
}

static int bt_le_scan_set_enable_legacy(uint8_t enable)
{
   1b438:	b530      	push	{r4, r5, lr}
   1b43a:	b087      	sub	sp, #28
   1b43c:	4604      	mov	r4, r0
	struct bt_hci_cp_le_set_scan_enable *cp;
	struct bt_hci_cmd_state_set state;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
   1b43e:	2102      	movs	r1, #2
   1b440:	f242 000c 	movw	r0, #8204	; 0x200c
   1b444:	f7fe f86c 	bl	19520 <bt_hci_cmd_create>
	if (!buf) {
   1b448:	b330      	cbz	r0, 1b498 <bt_le_scan_set_enable_legacy+0x60>
   1b44a:	4605      	mov	r5, r0
	return net_buf_simple_add(&buf->b, len);
   1b44c:	2102      	movs	r1, #2
   1b44e:	300c      	adds	r0, #12
   1b450:	f00f fe1e 	bl	2b090 <net_buf_simple_add>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));

	if (enable == BT_HCI_LE_SCAN_ENABLE) {
   1b454:	2c01      	cmp	r4, #1
   1b456:	d015      	beq.n	1b484 <bt_le_scan_set_enable_legacy+0x4c>
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
						 BT_DEV_SCAN_FILTER_DUP);
	} else {
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
   1b458:	2300      	movs	r3, #0
   1b45a:	7043      	strb	r3, [r0, #1]
	}

	cp->enable = enable;
   1b45c:	7004      	strb	r4, [r0, #0]

	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   1b45e:	2c01      	cmp	r4, #1
   1b460:	bf14      	ite	ne
   1b462:	2400      	movne	r4, #0
   1b464:	2401      	moveq	r4, #1
   1b466:	9400      	str	r4, [sp, #0]
   1b468:	2306      	movs	r3, #6
   1b46a:	4a0d      	ldr	r2, [pc, #52]	; (1b4a0 <bt_le_scan_set_enable_legacy+0x68>)
   1b46c:	a903      	add	r1, sp, #12
   1b46e:	4628      	mov	r0, r5
   1b470:	f7fe f844 	bl	194fc <bt_hci_cmd_state_set_init>
				  enable == BT_HCI_LE_SCAN_ENABLE);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
   1b474:	2200      	movs	r2, #0
   1b476:	4629      	mov	r1, r5
   1b478:	f242 000c 	movw	r0, #8204	; 0x200c
   1b47c:	f7fe f88e 	bl	1959c <bt_hci_cmd_send_sync>
	if (err) {
		return err;
	}

	return 0;
}
   1b480:	b007      	add	sp, #28
   1b482:	bd30      	pop	{r4, r5, pc}
   1b484:	f3bf 8f5b 	dmb	ish
   1b488:	4b05      	ldr	r3, [pc, #20]	; (1b4a0 <bt_le_scan_set_enable_legacy+0x68>)
   1b48a:	681b      	ldr	r3, [r3, #0]
   1b48c:	f3bf 8f5b 	dmb	ish
   1b490:	f3c3 2340 	ubfx	r3, r3, #9, #1
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
   1b494:	7043      	strb	r3, [r0, #1]
   1b496:	e7e1      	b.n	1b45c <bt_le_scan_set_enable_legacy+0x24>
		return -ENOBUFS;
   1b498:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1b49c:	e7f0      	b.n	1b480 <bt_le_scan_set_enable_legacy+0x48>
   1b49e:	bf00      	nop
   1b4a0:	2000043c 	.word	0x2000043c

0001b4a4 <bt_scan_reset>:
	scan_dev_found_cb = NULL;
   1b4a4:	4b01      	ldr	r3, [pc, #4]	; (1b4ac <bt_scan_reset+0x8>)
   1b4a6:	2200      	movs	r2, #0
   1b4a8:	601a      	str	r2, [r3, #0]
}
   1b4aa:	4770      	bx	lr
   1b4ac:	20007c7c 	.word	0x20007c7c

0001b4b0 <start_le_scan_legacy>:

	return 0;
}

static int start_le_scan_legacy(uint8_t scan_type, uint16_t interval, uint16_t window)
{
   1b4b0:	b570      	push	{r4, r5, r6, lr}
   1b4b2:	b082      	sub	sp, #8
   1b4b4:	4604      	mov	r4, r0
   1b4b6:	460e      	mov	r6, r1
   1b4b8:	4615      	mov	r5, r2
	struct bt_hci_cp_le_set_scan_param set_param;
	struct net_buf *buf;
	int err;
	bool active_scan;

	(void)memset(&set_param, 0, sizeof(set_param));
   1b4ba:	2207      	movs	r2, #7
   1b4bc:	2100      	movs	r1, #0
   1b4be:	4668      	mov	r0, sp
   1b4c0:	f00d f90e 	bl	286e0 <memset>

	set_param.scan_type = scan_type;
   1b4c4:	f88d 4000 	strb.w	r4, [sp]

	/* for the rest parameters apply default values according to
	 *  spec 4.2, vol2, part E, 7.8.10
	 */
	set_param.interval = sys_cpu_to_le16(interval);
   1b4c8:	f8ad 6001 	strh.w	r6, [sp, #1]
	set_param.window = sys_cpu_to_le16(window);
   1b4cc:	f8ad 5003 	strh.w	r5, [sp, #3]
   1b4d0:	f3bf 8f5b 	dmb	ish
   1b4d4:	4b1f      	ldr	r3, [pc, #124]	; (1b554 <start_le_scan_legacy+0xa4>)
   1b4d6:	681b      	ldr	r3, [r3, #0]
   1b4d8:	f3bf 8f5b 	dmb	ish

	if (IS_ENABLED(CONFIG_BT_FILTER_ACCEPT_LIST) &&
   1b4dc:	f413 6f80 	tst.w	r3, #1024	; 0x400
   1b4e0:	d010      	beq.n	1b504 <start_le_scan_legacy+0x54>
	    atomic_test_bit(bt_dev.flags, BT_DEV_SCAN_FILTERED)) {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_FILTER;
   1b4e2:	2301      	movs	r3, #1
   1b4e4:	f88d 3006 	strb.w	r3, [sp, #6]
	} else {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_NO_FILTER;
	}

	active_scan = scan_type == BT_HCI_LE_SCAN_ACTIVE;
   1b4e8:	2c01      	cmp	r4, #1
   1b4ea:	bf14      	ite	ne
   1b4ec:	2400      	movne	r4, #0
   1b4ee:	2401      	moveq	r4, #1
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   1b4f0:	f10d 0105 	add.w	r1, sp, #5
   1b4f4:	4620      	mov	r0, r4
   1b4f6:	f7ff fecd 	bl	1b294 <bt_id_set_scan_own_addr>
	if (err) {
   1b4fa:	4605      	mov	r5, r0
   1b4fc:	b130      	cbz	r0, 1b50c <start_le_scan_legacy+0x5c>
	}

	atomic_set_bit_to(bt_dev.flags, BT_DEV_ACTIVE_SCAN, active_scan);

	return 0;
}
   1b4fe:	4628      	mov	r0, r5
   1b500:	b002      	add	sp, #8
   1b502:	bd70      	pop	{r4, r5, r6, pc}
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_NO_FILTER;
   1b504:	2300      	movs	r3, #0
   1b506:	f88d 3006 	strb.w	r3, [sp, #6]
   1b50a:	e7ed      	b.n	1b4e8 <start_le_scan_legacy+0x38>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
   1b50c:	2107      	movs	r1, #7
   1b50e:	f242 000b 	movw	r0, #8203	; 0x200b
   1b512:	f7fe f805 	bl	19520 <bt_hci_cmd_create>
	if (!buf) {
   1b516:	4605      	mov	r5, r0
   1b518:	b1c8      	cbz	r0, 1b54e <start_le_scan_legacy+0x9e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1b51a:	2207      	movs	r2, #7
   1b51c:	4669      	mov	r1, sp
   1b51e:	300c      	adds	r0, #12
   1b520:	f00f fdbc 	bl	2b09c <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
   1b524:	2200      	movs	r2, #0
   1b526:	4629      	mov	r1, r5
   1b528:	f242 000b 	movw	r0, #8203	; 0x200b
   1b52c:	f7fe f836 	bl	1959c <bt_hci_cmd_send_sync>
	if (err) {
   1b530:	4605      	mov	r5, r0
   1b532:	2800      	cmp	r0, #0
   1b534:	d1e3      	bne.n	1b4fe <start_le_scan_legacy+0x4e>
	err = bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
   1b536:	2001      	movs	r0, #1
   1b538:	f00d fb5b 	bl	28bf2 <bt_le_scan_set_enable>
	if (err) {
   1b53c:	4605      	mov	r5, r0
   1b53e:	2800      	cmp	r0, #0
   1b540:	d1dd      	bne.n	1b4fe <start_le_scan_legacy+0x4e>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_ACTIVE_SCAN, active_scan);
   1b542:	4622      	mov	r2, r4
   1b544:	2108      	movs	r1, #8
   1b546:	4803      	ldr	r0, [pc, #12]	; (1b554 <start_le_scan_legacy+0xa4>)
   1b548:	f00d fb2e 	bl	28ba8 <atomic_set_bit_to>
	return 0;
   1b54c:	e7d7      	b.n	1b4fe <start_le_scan_legacy+0x4e>
		return -ENOBUFS;
   1b54e:	f06f 0568 	mvn.w	r5, #104	; 0x68
   1b552:	e7d4      	b.n	1b4fe <start_le_scan_legacy+0x4e>
   1b554:	2000043c 	.word	0x2000043c

0001b558 <bt_le_scan_update>:

	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
}

int bt_le_scan_update(bool fast_scan)
{
   1b558:	b538      	push	{r3, r4, r5, lr}
   1b55a:	f3bf 8f5b 	dmb	ish
   1b55e:	4b21      	ldr	r3, [pc, #132]	; (1b5e4 <bt_le_scan_update+0x8c>)
   1b560:	681b      	ldr	r3, [r3, #0]
   1b562:	f3bf 8f5b 	dmb	ish
   1b566:	f3c3 14c0 	ubfx	r4, r3, #7, #1
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   1b56a:	f013 0f80 	tst.w	r3, #128	; 0x80
   1b56e:	d002      	beq.n	1b576 <bt_le_scan_update+0x1e>
		return 0;
   1b570:	2400      	movs	r4, #0
		return start_passive_scan(fast_scan);
	}
#endif

	return 0;
}
   1b572:	4620      	mov	r0, r4
   1b574:	bd38      	pop	{r3, r4, r5, pc}
   1b576:	4605      	mov	r5, r0
   1b578:	f3bf 8f5b 	dmb	ish
   1b57c:	4b19      	ldr	r3, [pc, #100]	; (1b5e4 <bt_le_scan_update+0x8c>)
   1b57e:	681b      	ldr	r3, [r3, #0]
   1b580:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   1b584:	f013 0f40 	tst.w	r3, #64	; 0x40
   1b588:	d003      	beq.n	1b592 <bt_le_scan_update+0x3a>
		err = bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
   1b58a:	2000      	movs	r0, #0
   1b58c:	f00d fb31 	bl	28bf2 <bt_le_scan_set_enable>
		if (err) {
   1b590:	bb28      	cbnz	r0, 1b5de <bt_le_scan_update+0x86>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
   1b592:	2206      	movs	r2, #6
   1b594:	2100      	movs	r1, #0
   1b596:	4608      	mov	r0, r1
   1b598:	f000 fff2 	bl	1c580 <bt_conn_lookup_state_le>
		if (conn) {
   1b59c:	b110      	cbz	r0, 1b5a4 <bt_le_scan_update+0x4c>
			bt_conn_unref(conn);
   1b59e:	f00d fcb2 	bl	28f06 <bt_conn_unref>
			return 0;
   1b5a2:	e7e6      	b.n	1b572 <bt_le_scan_update+0x1a>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
   1b5a4:	2202      	movs	r2, #2
   1b5a6:	2100      	movs	r1, #0
   1b5a8:	4608      	mov	r0, r1
   1b5aa:	f000 ffe9 	bl	1c580 <bt_conn_lookup_state_le>
		if (conn) {
   1b5ae:	4603      	mov	r3, r0
   1b5b0:	2800      	cmp	r0, #0
   1b5b2:	d0de      	beq.n	1b572 <bt_le_scan_update+0x1a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1b5b4:	4a0b      	ldr	r2, [pc, #44]	; (1b5e4 <bt_le_scan_update+0x8c>)
   1b5b6:	f3bf 8f5b 	dmb	ish
   1b5ba:	e852 0f00 	ldrex	r0, [r2]
   1b5be:	f440 7000 	orr.w	r0, r0, #512	; 0x200
   1b5c2:	e842 0100 	strex	r1, r0, [r2]
   1b5c6:	2900      	cmp	r1, #0
   1b5c8:	d1f7      	bne.n	1b5ba <bt_le_scan_update+0x62>
   1b5ca:	f3bf 8f5b 	dmb	ish
			bt_conn_unref(conn);
   1b5ce:	4618      	mov	r0, r3
   1b5d0:	f00d fc99 	bl	28f06 <bt_conn_unref>
			return start_passive_scan(fast_scan);
   1b5d4:	4628      	mov	r0, r5
   1b5d6:	f00d fb10 	bl	28bfa <start_passive_scan>
   1b5da:	4604      	mov	r4, r0
   1b5dc:	e7c9      	b.n	1b572 <bt_le_scan_update+0x1a>
			return err;
   1b5de:	4604      	mov	r4, r0
   1b5e0:	e7c7      	b.n	1b572 <bt_le_scan_update+0x1a>
   1b5e2:	bf00      	nop
   1b5e4:	2000043c 	.word	0x2000043c

0001b5e8 <check_pending_conn>:

#if defined(CONFIG_BT_CENTRAL)
static void check_pending_conn(const bt_addr_le_t *id_addr,
			       const bt_addr_le_t *addr, uint8_t adv_props)
{
   1b5e8:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1b5ea:	f3bf 8f5b 	dmb	ish
   1b5ee:	4b20      	ldr	r3, [pc, #128]	; (1b670 <check_pending_conn+0x88>)
   1b5f0:	681b      	ldr	r3, [r3, #0]
   1b5f2:	f3bf 8f5b 	dmb	ish
	struct bt_conn *conn;

	/* No connections are allowed during explicit scanning */
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   1b5f6:	f013 0f80 	tst.w	r3, #128	; 0x80
   1b5fa:	d103      	bne.n	1b604 <check_pending_conn+0x1c>
   1b5fc:	460c      	mov	r4, r1
		return;
	}

	/* Return if event is not connectable */
	if (!(adv_props & BT_HCI_LE_ADV_EVT_TYPE_CONN)) {
   1b5fe:	f012 0f01 	tst.w	r2, #1
   1b602:	d100      	bne.n	1b606 <check_pending_conn+0x1e>
failed:
	conn->err = BT_HCI_ERR_UNSPECIFIED;
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
	bt_conn_unref(conn);
	bt_le_scan_update(false);
}
   1b604:	bd38      	pop	{r3, r4, r5, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, id_addr,
   1b606:	2202      	movs	r2, #2
   1b608:	4601      	mov	r1, r0
   1b60a:	2000      	movs	r0, #0
   1b60c:	f000 ffb8 	bl	1c580 <bt_conn_lookup_state_le>
	if (!conn) {
   1b610:	4605      	mov	r5, r0
   1b612:	2800      	cmp	r0, #0
   1b614:	d0f6      	beq.n	1b604 <check_pending_conn+0x1c>
   1b616:	f3bf 8f5b 	dmb	ish
   1b61a:	4b15      	ldr	r3, [pc, #84]	; (1b670 <check_pending_conn+0x88>)
   1b61c:	681b      	ldr	r3, [r3, #0]
   1b61e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   1b622:	f013 0f40 	tst.w	r3, #64	; 0x40
   1b626:	d003      	beq.n	1b630 <check_pending_conn+0x48>
	    bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE)) {
   1b628:	2000      	movs	r0, #0
   1b62a:	f00d fae2 	bl	28bf2 <bt_le_scan_set_enable>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   1b62e:	b948      	cbnz	r0, 1b644 <check_pending_conn+0x5c>
	memcpy(dst, src, sizeof(*dst));
   1b630:	2207      	movs	r2, #7
   1b632:	4621      	mov	r1, r4
   1b634:	f105 0096 	add.w	r0, r5, #150	; 0x96
   1b638:	f00d f823 	bl	28682 <memcpy>
	if (bt_le_create_conn(conn)) {
   1b63c:	4628      	mov	r0, r5
   1b63e:	f00d f9b5 	bl	289ac <bt_le_create_conn>
   1b642:	b160      	cbz	r0, 1b65e <check_pending_conn+0x76>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
   1b644:	231f      	movs	r3, #31
   1b646:	726b      	strb	r3, [r5, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1b648:	2100      	movs	r1, #0
   1b64a:	4628      	mov	r0, r5
   1b64c:	f000 fd08 	bl	1c060 <bt_conn_set_state>
	bt_conn_unref(conn);
   1b650:	4628      	mov	r0, r5
   1b652:	f00d fc58 	bl	28f06 <bt_conn_unref>
	bt_le_scan_update(false);
   1b656:	2000      	movs	r0, #0
   1b658:	f7ff ff7e 	bl	1b558 <bt_le_scan_update>
   1b65c:	e7d2      	b.n	1b604 <check_pending_conn+0x1c>
	bt_conn_set_state(conn, BT_CONN_CONNECTING);
   1b65e:	2106      	movs	r1, #6
   1b660:	4628      	mov	r0, r5
   1b662:	f000 fcfd 	bl	1c060 <bt_conn_set_state>
	bt_conn_unref(conn);
   1b666:	4628      	mov	r0, r5
   1b668:	f00d fc4d 	bl	28f06 <bt_conn_unref>
	return;
   1b66c:	e7ca      	b.n	1b604 <check_pending_conn+0x1c>
   1b66e:	bf00      	nop
   1b670:	2000043c 	.word	0x2000043c

0001b674 <le_adv_recv>:
	}
}

static void le_adv_recv(bt_addr_le_t *addr, struct bt_le_scan_recv_info *info,
			struct net_buf_simple *buf, uint16_t len)
{
   1b674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b678:	b085      	sub	sp, #20
   1b67a:	4682      	mov	sl, r0
   1b67c:	4688      	mov	r8, r1
   1b67e:	4614      	mov	r4, r2
   1b680:	4699      	mov	r9, r3
   1b682:	f3bf 8f5b 	dmb	ish
   1b686:	4b44      	ldr	r3, [pc, #272]	; (1b798 <le_adv_recv+0x124>)
   1b688:	681b      	ldr	r3, [r3, #0]
   1b68a:	f3bf 8f5b 	dmb	ish
	bt_addr_le_t id_addr;

	LOG_DBG("%s event %u, len %u, rssi %d dBm", bt_addr_le_str(addr), info->adv_type, len,
		info->rssi);

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
   1b68e:	f013 0f80 	tst.w	r3, #128	; 0x80
   1b692:	d003      	beq.n	1b69c <le_adv_recv+0x28>
	    !IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
	    (info->adv_props & BT_HCI_LE_ADV_PROP_DIRECT)) {
   1b694:	890b      	ldrh	r3, [r1, #8]
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
   1b696:	f013 0f04 	tst.w	r3, #4
   1b69a:	d179      	bne.n	1b790 <le_adv_recv+0x11c>
		LOG_DBG("Dropped direct adv report");
		return;
	}

	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
   1b69c:	f89a 2000 	ldrb.w	r2, [sl]
   1b6a0:	1e93      	subs	r3, r2, #2
   1b6a2:	b2db      	uxtb	r3, r3
   1b6a4:	2b01      	cmp	r3, #1
   1b6a6:	d934      	bls.n	1b712 <le_adv_recv+0x9e>
	    addr->type == BT_ADDR_LE_RANDOM_ID) {
		bt_addr_le_copy(&id_addr, addr);
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
   1b6a8:	2aff      	cmp	r2, #255	; 0xff
   1b6aa:	d03d      	beq.n	1b728 <le_adv_recv+0xb4>
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
	} else {
		bt_addr_le_copy(&id_addr,
   1b6ac:	4651      	mov	r1, sl
   1b6ae:	2000      	movs	r0, #0
   1b6b0:	f00d fa47 	bl	28b42 <bt_lookup_id_addr>
   1b6b4:	4601      	mov	r1, r0
   1b6b6:	2207      	movs	r2, #7
   1b6b8:	a801      	add	r0, sp, #4
   1b6ba:	f00c ffe2 	bl	28682 <memcpy>
				bt_lookup_id_addr(BT_ID_DEFAULT, addr));
	}

	if (scan_dev_found_cb) {
   1b6be:	4b37      	ldr	r3, [pc, #220]	; (1b79c <le_adv_recv+0x128>)
   1b6c0:	681b      	ldr	r3, [r3, #0]
   1b6c2:	b1c3      	cbz	r3, 1b6f6 <le_adv_recv+0x82>
	state->offset = net_buf_simple_headroom(buf);
   1b6c4:	4620      	mov	r0, r4
   1b6c6:	f00f fd25 	bl	2b114 <net_buf_simple_headroom>
   1b6ca:	4605      	mov	r5, r0
   1b6cc:	f8ad 000c 	strh.w	r0, [sp, #12]
	state->len = buf->len;
   1b6d0:	88a6      	ldrh	r6, [r4, #4]
   1b6d2:	f8ad 600e 	strh.w	r6, [sp, #14]
		net_buf_simple_save(buf, &state);

		buf->len = len;
   1b6d6:	f8a4 9004 	strh.w	r9, [r4, #4]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type, buf);
   1b6da:	4b30      	ldr	r3, [pc, #192]	; (1b79c <le_adv_recv+0x128>)
   1b6dc:	681f      	ldr	r7, [r3, #0]
   1b6de:	4623      	mov	r3, r4
   1b6e0:	f898 2007 	ldrb.w	r2, [r8, #7]
   1b6e4:	f998 1005 	ldrsb.w	r1, [r8, #5]
   1b6e8:	a801      	add	r0, sp, #4
   1b6ea:	47b8      	blx	r7
	buf->data = buf->__buf + state->offset;
   1b6ec:	68a3      	ldr	r3, [r4, #8]
   1b6ee:	fa13 f585 	uxtah	r5, r3, r5
   1b6f2:	6025      	str	r5, [r4, #0]
	buf->len = state->len;
   1b6f4:	80a6      	strh	r6, [r4, #4]

		net_buf_simple_restore(buf, &state);
	}

	info->addr = &id_addr;
   1b6f6:	ab01      	add	r3, sp, #4
   1b6f8:	f8c8 3000 	str.w	r3, [r8]
   1b6fc:	4b28      	ldr	r3, [pc, #160]	; (1b7a0 <le_adv_recv+0x12c>)
   1b6fe:	681e      	ldr	r6, [r3, #0]

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   1b700:	b1c6      	cbz	r6, 1b734 <le_adv_recv+0xc0>
   1b702:	3e08      	subs	r6, #8
Z_GENLIST_PEEK_NEXT(slist, snode)
   1b704:	f116 0508 	adds.w	r5, r6, #8
   1b708:	d019      	beq.n	1b73e <le_adv_recv+0xca>
	return node->next;
   1b70a:	68b5      	ldr	r5, [r6, #8]
   1b70c:	b1bd      	cbz	r5, 1b73e <le_adv_recv+0xca>
   1b70e:	3d08      	subs	r5, #8
   1b710:	e015      	b.n	1b73e <le_adv_recv+0xca>
   1b712:	2207      	movs	r2, #7
   1b714:	4651      	mov	r1, sl
   1b716:	a801      	add	r0, sp, #4
   1b718:	f00c ffb3 	bl	28682 <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   1b71c:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1b720:	3b02      	subs	r3, #2
   1b722:	f88d 3004 	strb.w	r3, [sp, #4]
   1b726:	e7ca      	b.n	1b6be <le_adv_recv+0x4a>
   1b728:	2207      	movs	r2, #7
   1b72a:	491e      	ldr	r1, [pc, #120]	; (1b7a4 <le_adv_recv+0x130>)
   1b72c:	a801      	add	r0, sp, #4
   1b72e:	f00c ffa8 	bl	28682 <memcpy>
}
   1b732:	e7c4      	b.n	1b6be <le_adv_recv+0x4a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   1b734:	4635      	mov	r5, r6
   1b736:	e002      	b.n	1b73e <le_adv_recv+0xca>
   1b738:	462a      	mov	r2, r5
   1b73a:	462e      	mov	r6, r5
   1b73c:	4615      	mov	r5, r2
   1b73e:	b1f6      	cbz	r6, 1b77e <le_adv_recv+0x10a>
		if (listener->recv) {
   1b740:	6833      	ldr	r3, [r6, #0]
   1b742:	b1ab      	cbz	r3, 1b770 <le_adv_recv+0xfc>
	state->offset = net_buf_simple_headroom(buf);
   1b744:	4620      	mov	r0, r4
   1b746:	f00f fce5 	bl	2b114 <net_buf_simple_headroom>
   1b74a:	4607      	mov	r7, r0
   1b74c:	f8ad 000c 	strh.w	r0, [sp, #12]
	state->len = buf->len;
   1b750:	f8b4 b004 	ldrh.w	fp, [r4, #4]
   1b754:	f8ad b00e 	strh.w	fp, [sp, #14]
			net_buf_simple_save(buf, &state);

			buf->len = len;
   1b758:	f8a4 9004 	strh.w	r9, [r4, #4]
			listener->recv(info, buf);
   1b75c:	6833      	ldr	r3, [r6, #0]
   1b75e:	4621      	mov	r1, r4
   1b760:	4640      	mov	r0, r8
   1b762:	4798      	blx	r3
	buf->data = buf->__buf + state->offset;
   1b764:	68a3      	ldr	r3, [r4, #8]
   1b766:	fa13 f787 	uxtah	r7, r3, r7
   1b76a:	6027      	str	r7, [r4, #0]
	buf->len = state->len;
   1b76c:	f8a4 b004 	strh.w	fp, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   1b770:	2d00      	cmp	r5, #0
   1b772:	d0e1      	beq.n	1b738 <le_adv_recv+0xc4>
   1b774:	68aa      	ldr	r2, [r5, #8]
   1b776:	2a00      	cmp	r2, #0
   1b778:	d0df      	beq.n	1b73a <le_adv_recv+0xc6>
   1b77a:	3a08      	subs	r2, #8
   1b77c:	e7dd      	b.n	1b73a <le_adv_recv+0xc6>
			net_buf_simple_restore(buf, &state);
		}
	}

	/* Clear pointer to this stack frame before returning to calling function */
	info->addr = NULL;
   1b77e:	2300      	movs	r3, #0
   1b780:	f8c8 3000 	str.w	r3, [r8]

#if defined(CONFIG_BT_CENTRAL)
	check_pending_conn(&id_addr, addr, info->adv_props);
   1b784:	f898 2008 	ldrb.w	r2, [r8, #8]
   1b788:	4651      	mov	r1, sl
   1b78a:	a801      	add	r0, sp, #4
   1b78c:	f7ff ff2c 	bl	1b5e8 <check_pending_conn>
#endif /* CONFIG_BT_CENTRAL */
}
   1b790:	b005      	add	sp, #20
   1b792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b796:	bf00      	nop
   1b798:	2000043c 	.word	0x2000043c
   1b79c:	20007c7c 	.word	0x20007c7c
   1b7a0:	20007c74 	.word	0x20007c74
   1b7a4:	0002f548 	.word	0x0002f548

0001b7a8 <bt_hci_le_adv_report>:
#endif /* CONFIG_BT_DF_CONNECTIONLESS_CTE_RX */
#endif /* defined(CONFIG_BT_PER_ADV_SYNC) */
#endif /* defined(CONFIG_BT_EXT_ADV) */

void bt_hci_le_adv_report(struct net_buf *buf)
{
   1b7a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b7aa:	b085      	sub	sp, #20
   1b7ac:	4607      	mov	r7, r0
 *
 * @return The 8-bit removed value
 */
static inline uint8_t net_buf_pull_u8(struct net_buf *buf)
{
	return net_buf_simple_pull_u8(&buf->b);
   1b7ae:	f100 060c 	add.w	r6, r0, #12
   1b7b2:	4630      	mov	r0, r6
   1b7b4:	f00f fc9e 	bl	2b0f4 <net_buf_simple_pull_u8>
	uint8_t num_reports = net_buf_pull_u8(buf);
	struct bt_hci_evt_le_advertising_info *evt;

	LOG_DBG("Adv number of reports %u",  num_reports);
   1b7b8:	e02b      	b.n	1b812 <bt_hci_le_adv_report+0x6a>
	return net_buf_simple_pull_mem(&buf->b, len);
   1b7ba:	2109      	movs	r1, #9
   1b7bc:	4630      	mov	r0, r6
   1b7be:	f00f fc91 	bl	2b0e4 <net_buf_simple_pull_mem>
   1b7c2:	4604      	mov	r4, r0
			break;
		}

		evt = net_buf_pull_mem(buf, sizeof(*evt));

		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
   1b7c4:	2301      	movs	r3, #1
   1b7c6:	f88d 300c 	strb.w	r3, [sp, #12]
		adv_info.secondary_phy = 0;
   1b7ca:	2200      	movs	r2, #0
   1b7cc:	f88d 200d 	strb.w	r2, [sp, #13]
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
   1b7d0:	237f      	movs	r3, #127	; 0x7f
   1b7d2:	f88d 3006 	strb.w	r3, [sp, #6]
		adv_info.rssi = evt->data[evt->length];
   1b7d6:	7a03      	ldrb	r3, [r0, #8]
   1b7d8:	4403      	add	r3, r0
   1b7da:	f993 3009 	ldrsb.w	r3, [r3, #9]
   1b7de:	f88d 3005 	strb.w	r3, [sp, #5]
		adv_info.sid = BT_GAP_SID_INVALID;
   1b7e2:	23ff      	movs	r3, #255	; 0xff
   1b7e4:	f88d 3004 	strb.w	r3, [sp, #4]
		adv_info.interval = 0U;
   1b7e8:	f8ad 200a 	strh.w	r2, [sp, #10]

		adv_info.adv_type = evt->evt_type;
   1b7ec:	7800      	ldrb	r0, [r0, #0]
   1b7ee:	f88d 0007 	strb.w	r0, [sp, #7]
		adv_info.adv_props = get_adv_props_legacy(evt->evt_type);
   1b7f2:	f00d f9c8 	bl	28b86 <get_adv_props_legacy>
   1b7f6:	f8ad 0008 	strh.w	r0, [sp, #8]

		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);
   1b7fa:	7a23      	ldrb	r3, [r4, #8]
   1b7fc:	4632      	mov	r2, r6
   1b7fe:	4669      	mov	r1, sp
   1b800:	1c60      	adds	r0, r4, #1
   1b802:	f7ff ff37 	bl	1b674 <le_adv_recv>

		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
   1b806:	7a21      	ldrb	r1, [r4, #8]
	return net_buf_simple_pull(&buf->b, len);
   1b808:	3101      	adds	r1, #1
   1b80a:	4630      	mov	r0, r6
   1b80c:	f00f fc62 	bl	2b0d4 <net_buf_simple_pull>
	while (num_reports--) {
   1b810:	4628      	mov	r0, r5
   1b812:	1e45      	subs	r5, r0, #1
   1b814:	b2ed      	uxtb	r5, r5
   1b816:	b388      	cbz	r0, 1b87c <bt_hci_le_adv_report+0xd4>
		if (buf->len < sizeof(*evt)) {
   1b818:	8a3b      	ldrh	r3, [r7, #16]
   1b81a:	2b08      	cmp	r3, #8
   1b81c:	d8cd      	bhi.n	1b7ba <bt_hci_le_adv_report+0x12>
			LOG_ERR("Unexpected end of buffer");
   1b81e:	2006      	movs	r0, #6
   1b820:	f7fa fad2 	bl	15dc8 <z_log_msg_alloc>
   1b824:	2200      	movs	r2, #0
   1b826:	f36f 0200 	bfc	r2, #0, #1
   1b82a:	f36f 0241 	bfc	r2, #1, #1
   1b82e:	f36f 0282 	bfc	r2, #2, #1
   1b832:	f36f 02c5 	bfc	r2, #3, #3
   1b836:	2301      	movs	r3, #1
   1b838:	f363 1288 	bfi	r2, r3, #6, #3
   1b83c:	2308      	movs	r3, #8
   1b83e:	f363 2252 	bfi	r2, r3, #9, #10
   1b842:	f36f 42de 	bfc	r2, #19, #12
   1b846:	f36f 72df 	bfc	r2, #31, #1
   1b84a:	4604      	mov	r4, r0
   1b84c:	b188      	cbz	r0, 1b872 <bt_hci_le_adv_report+0xca>
   1b84e:	f110 0310 	adds.w	r3, r0, #16
   1b852:	d001      	beq.n	1b858 <bt_hci_le_adv_report+0xb0>
   1b854:	490a      	ldr	r1, [pc, #40]	; (1b880 <bt_hci_le_adv_report+0xd8>)
   1b856:	6141      	str	r1, [r0, #20]
   1b858:	b15b      	cbz	r3, 1b872 <bt_hci_le_adv_report+0xca>
   1b85a:	2302      	movs	r3, #2
   1b85c:	f88d 3000 	strb.w	r3, [sp]
   1b860:	2300      	movs	r3, #0
   1b862:	f88d 3001 	strb.w	r3, [sp, #1]
   1b866:	f88d 3002 	strb.w	r3, [sp, #2]
   1b86a:	f88d 3003 	strb.w	r3, [sp, #3]
   1b86e:	9800      	ldr	r0, [sp, #0]
   1b870:	6120      	str	r0, [r4, #16]
   1b872:	2300      	movs	r3, #0
   1b874:	4903      	ldr	r1, [pc, #12]	; (1b884 <bt_hci_le_adv_report+0xdc>)
   1b876:	4620      	mov	r0, r4
   1b878:	f00c fab1 	bl	27dde <z_log_msg_finalize>
	}
}
   1b87c:	b005      	add	sp, #20
   1b87e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b880:	0002fd70 	.word	0x0002fd70
   1b884:	0002dea8 	.word	0x0002dea8

0001b888 <state2str>:
#endif /* CONFIG_BT_CONN */
}

static inline const char *state2str(bt_conn_state_t state)
{
	switch (state) {
   1b888:	2808      	cmp	r0, #8
   1b88a:	d816      	bhi.n	1b8ba <state2str+0x32>
   1b88c:	e8df f000 	tbb	[pc, r0]
   1b890:	0d071705 	.word	0x0d071705
   1b894:	110f090b 	.word	0x110f090b
   1b898:	13          	.byte	0x13
   1b899:	00          	.byte	0x00
   1b89a:	480a      	ldr	r0, [pc, #40]	; (1b8c4 <state2str+0x3c>)
   1b89c:	4770      	bx	lr
	case BT_CONN_DISCONNECTED:
		return "disconnected";
	case BT_CONN_DISCONNECT_COMPLETE:
		return "disconnect-complete";
	case BT_CONN_CONNECTING_SCAN:
		return "connecting-scan";
   1b89e:	480a      	ldr	r0, [pc, #40]	; (1b8c8 <state2str+0x40>)
   1b8a0:	4770      	bx	lr
	case BT_CONN_CONNECTING_DIR_ADV:
		return "connecting-dir-adv";
   1b8a2:	480a      	ldr	r0, [pc, #40]	; (1b8cc <state2str+0x44>)
   1b8a4:	4770      	bx	lr
	case BT_CONN_CONNECTING_ADV:
		return "connecting-adv";
   1b8a6:	480a      	ldr	r0, [pc, #40]	; (1b8d0 <state2str+0x48>)
   1b8a8:	4770      	bx	lr
	case BT_CONN_CONNECTING_AUTO:
		return "connecting-auto";
   1b8aa:	480a      	ldr	r0, [pc, #40]	; (1b8d4 <state2str+0x4c>)
   1b8ac:	4770      	bx	lr
	case BT_CONN_CONNECTING:
		return "connecting";
   1b8ae:	480a      	ldr	r0, [pc, #40]	; (1b8d8 <state2str+0x50>)
   1b8b0:	4770      	bx	lr
	case BT_CONN_CONNECTED:
		return "connected";
   1b8b2:	480a      	ldr	r0, [pc, #40]	; (1b8dc <state2str+0x54>)
   1b8b4:	4770      	bx	lr
	case BT_CONN_DISCONNECTING:
		return "disconnecting";
   1b8b6:	480a      	ldr	r0, [pc, #40]	; (1b8e0 <state2str+0x58>)
   1b8b8:	4770      	bx	lr
	default:
		return "(unknown)";
   1b8ba:	480a      	ldr	r0, [pc, #40]	; (1b8e4 <state2str+0x5c>)
   1b8bc:	4770      	bx	lr
		return "disconnect-complete";
   1b8be:	480a      	ldr	r0, [pc, #40]	; (1b8e8 <state2str+0x60>)
	}
}
   1b8c0:	4770      	bx	lr
   1b8c2:	bf00      	nop
   1b8c4:	0002fd94 	.word	0x0002fd94
   1b8c8:	0002fdb8 	.word	0x0002fdb8
   1b8cc:	0002fdc8 	.word	0x0002fdc8
   1b8d0:	0002fddc 	.word	0x0002fddc
   1b8d4:	0002fdec 	.word	0x0002fdec
   1b8d8:	0002fdfc 	.word	0x0002fdfc
   1b8dc:	00030108 	.word	0x00030108
   1b8e0:	0002fe08 	.word	0x0002fe08
   1b8e4:	0002fe18 	.word	0x0002fe18
   1b8e8:	0002fda4 	.word	0x0002fda4

0001b8ec <notify_connected>:
		return -ENOTCONN;
	}
}

static void notify_connected(struct bt_conn *conn)
{
   1b8ec:	b538      	push	{r3, r4, r5, lr}
   1b8ee:	4605      	mov	r5, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   1b8f0:	4b0c      	ldr	r3, [pc, #48]	; (1b924 <notify_connected+0x38>)
   1b8f2:	681c      	ldr	r4, [r3, #0]
   1b8f4:	e003      	b.n	1b8fe <notify_connected+0x12>
		if (cb->connected) {
			cb->connected(conn, conn->err);
   1b8f6:	7a69      	ldrb	r1, [r5, #9]
   1b8f8:	4628      	mov	r0, r5
   1b8fa:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1b8fc:	6924      	ldr	r4, [r4, #16]
   1b8fe:	b11c      	cbz	r4, 1b908 <notify_connected+0x1c>
		if (cb->connected) {
   1b900:	6823      	ldr	r3, [r4, #0]
   1b902:	2b00      	cmp	r3, #0
   1b904:	d1f7      	bne.n	1b8f6 <notify_connected+0xa>
   1b906:	e7f9      	b.n	1b8fc <notify_connected+0x10>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1b908:	4c07      	ldr	r4, [pc, #28]	; (1b928 <notify_connected+0x3c>)
   1b90a:	e000      	b.n	1b90e <notify_connected+0x22>
   1b90c:	3414      	adds	r4, #20
   1b90e:	4b07      	ldr	r3, [pc, #28]	; (1b92c <notify_connected+0x40>)
   1b910:	429c      	cmp	r4, r3
   1b912:	d206      	bcs.n	1b922 <notify_connected+0x36>
		if (cb->connected) {
   1b914:	6823      	ldr	r3, [r4, #0]
   1b916:	2b00      	cmp	r3, #0
   1b918:	d0f8      	beq.n	1b90c <notify_connected+0x20>
			cb->connected(conn, conn->err);
   1b91a:	7a69      	ldrb	r1, [r5, #9]
   1b91c:	4628      	mov	r0, r5
   1b91e:	4798      	blx	r3
   1b920:	e7f4      	b.n	1b90c <notify_connected+0x20>
		}
	}
}
   1b922:	bd38      	pop	{r3, r4, r5, pc}
   1b924:	20007cb0 	.word	0x20007cb0
   1b928:	0002de44 	.word	0x0002de44
   1b92c:	0002de58 	.word	0x0002de58

0001b930 <notify_disconnected>:

static void notify_disconnected(struct bt_conn *conn)
{
   1b930:	b538      	push	{r3, r4, r5, lr}
   1b932:	4605      	mov	r5, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   1b934:	4b0c      	ldr	r3, [pc, #48]	; (1b968 <notify_disconnected+0x38>)
   1b936:	681c      	ldr	r4, [r3, #0]
   1b938:	e003      	b.n	1b942 <notify_disconnected+0x12>
		if (cb->disconnected) {
			cb->disconnected(conn, conn->err);
   1b93a:	7a69      	ldrb	r1, [r5, #9]
   1b93c:	4628      	mov	r0, r5
   1b93e:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1b940:	6924      	ldr	r4, [r4, #16]
   1b942:	b11c      	cbz	r4, 1b94c <notify_disconnected+0x1c>
		if (cb->disconnected) {
   1b944:	6863      	ldr	r3, [r4, #4]
   1b946:	2b00      	cmp	r3, #0
   1b948:	d1f7      	bne.n	1b93a <notify_disconnected+0xa>
   1b94a:	e7f9      	b.n	1b940 <notify_disconnected+0x10>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1b94c:	4c07      	ldr	r4, [pc, #28]	; (1b96c <notify_disconnected+0x3c>)
   1b94e:	e000      	b.n	1b952 <notify_disconnected+0x22>
   1b950:	3414      	adds	r4, #20
   1b952:	4b07      	ldr	r3, [pc, #28]	; (1b970 <notify_disconnected+0x40>)
   1b954:	429c      	cmp	r4, r3
   1b956:	d206      	bcs.n	1b966 <notify_disconnected+0x36>
		if (cb->disconnected) {
   1b958:	6863      	ldr	r3, [r4, #4]
   1b95a:	2b00      	cmp	r3, #0
   1b95c:	d0f8      	beq.n	1b950 <notify_disconnected+0x20>
			cb->disconnected(conn, conn->err);
   1b95e:	7a69      	ldrb	r1, [r5, #9]
   1b960:	4628      	mov	r0, r5
   1b962:	4798      	blx	r3
   1b964:	e7f4      	b.n	1b950 <notify_disconnected+0x20>
		}
	}
}
   1b966:	bd38      	pop	{r3, r4, r5, pc}
   1b968:	20007cb0 	.word	0x20007cb0
   1b96c:	0002de44 	.word	0x0002de44
   1b970:	0002de58 	.word	0x0002de58

0001b974 <create_param_setup>:

	return true;
}

static void create_param_setup(const struct bt_conn_le_create_param *param)
{
   1b974:	b410      	push	{r4}
	bt_dev.create_param = *param;
   1b976:	4c0c      	ldr	r4, [pc, #48]	; (1b9a8 <create_param_setup+0x34>)
   1b978:	f104 0c08 	add.w	ip, r4, #8
   1b97c:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   1b97e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	bt_dev.create_param.timeout =
		(bt_dev.create_param.timeout != 0) ?
   1b982:	8aa3      	ldrh	r3, [r4, #20]
	bt_dev.create_param.timeout =
   1b984:	b90b      	cbnz	r3, 1b98a <create_param_setup+0x16>
   1b986:	f44f 7396 	mov.w	r3, #300	; 0x12c
   1b98a:	4a07      	ldr	r2, [pc, #28]	; (1b9a8 <create_param_setup+0x34>)
   1b98c:	8293      	strh	r3, [r2, #20]
		bt_dev.create_param.timeout :
		(MSEC_PER_SEC / 10) * CONFIG_BT_CREATE_CONN_TIMEOUT;

	bt_dev.create_param.interval_coded =
		(bt_dev.create_param.interval_coded != 0) ?
   1b98e:	8a13      	ldrh	r3, [r2, #16]
	bt_dev.create_param.interval_coded =
   1b990:	b903      	cbnz	r3, 1b994 <create_param_setup+0x20>
   1b992:	8993      	ldrh	r3, [r2, #12]
   1b994:	4a04      	ldr	r2, [pc, #16]	; (1b9a8 <create_param_setup+0x34>)
   1b996:	8213      	strh	r3, [r2, #16]
		bt_dev.create_param.interval_coded :
		bt_dev.create_param.interval;

	bt_dev.create_param.window_coded =
		(bt_dev.create_param.window_coded != 0) ?
   1b998:	8a53      	ldrh	r3, [r2, #18]
	bt_dev.create_param.window_coded =
   1b99a:	b903      	cbnz	r3, 1b99e <create_param_setup+0x2a>
   1b99c:	89d3      	ldrh	r3, [r2, #14]
   1b99e:	4a02      	ldr	r2, [pc, #8]	; (1b9a8 <create_param_setup+0x34>)
   1b9a0:	8253      	strh	r3, [r2, #18]
		bt_dev.create_param.window_coded :
		bt_dev.create_param.window;
}
   1b9a2:	bc10      	pop	{r4}
   1b9a4:	4770      	bx	lr
   1b9a6:	bf00      	nop
   1b9a8:	20000370 	.word	0x20000370

0001b9ac <tx_free>:
{
   1b9ac:	b508      	push	{r3, lr}
   1b9ae:	4601      	mov	r1, r0
	tx->cb = NULL;
   1b9b0:	2300      	movs	r3, #0
   1b9b2:	6043      	str	r3, [r0, #4]
	tx->user_data = NULL;
   1b9b4:	6083      	str	r3, [r0, #8]
	tx->pending_no_cb = 0U;
   1b9b6:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   1b9b8:	4801      	ldr	r0, [pc, #4]	; (1b9c0 <tx_free+0x14>)
   1b9ba:	f011 faad 	bl	2cf18 <k_queue_append>
}
   1b9be:	bd08      	pop	{r3, pc}
   1b9c0:	20000c2c 	.word	0x20000c2c

0001b9c4 <conn_tx_alloc>:
{
   1b9c4:	b508      	push	{r3, lr}
	return z_impl_z_current_get();
   1b9c6:	f00a f9bf 	bl	25d48 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   1b9ca:	4b08      	ldr	r3, [pc, #32]	; (1b9ec <conn_tx_alloc+0x28>)
   1b9cc:	4283      	cmp	r3, r0
   1b9ce:	d007      	beq.n	1b9e0 <conn_tx_alloc+0x1c>
	return z_impl_k_queue_get(queue, timeout);
   1b9d0:	f04f 32ff 	mov.w	r2, #4294967295
   1b9d4:	f04f 33ff 	mov.w	r3, #4294967295
   1b9d8:	4805      	ldr	r0, [pc, #20]	; (1b9f0 <conn_tx_alloc+0x2c>)
   1b9da:	f009 fbbb 	bl	25154 <z_impl_k_queue_get>
}
   1b9de:	bd08      	pop	{r3, pc}
   1b9e0:	2200      	movs	r2, #0
   1b9e2:	2300      	movs	r3, #0
   1b9e4:	4802      	ldr	r0, [pc, #8]	; (1b9f0 <conn_tx_alloc+0x2c>)
   1b9e6:	f009 fbb5 	bl	25154 <z_impl_k_queue_get>
		return k_fifo_get(&free_tx, K_NO_WAIT);
   1b9ea:	e7f8      	b.n	1b9de <conn_tx_alloc+0x1a>
   1b9ec:	200079d8 	.word	0x200079d8
   1b9f0:	20000c2c 	.word	0x20000c2c

0001b9f4 <bt_conn_get_pkts>:
}
   1b9f4:	4800      	ldr	r0, [pc, #0]	; (1b9f8 <bt_conn_get_pkts+0x4>)
   1b9f6:	4770      	bx	lr
   1b9f8:	20000470 	.word	0x20000470

0001b9fc <send_frag>:
{
   1b9fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ba00:	b082      	sub	sp, #8
   1ba02:	4605      	mov	r5, r0
   1ba04:	460e      	mov	r6, r1
   1ba06:	4691      	mov	r9, r2
   1ba08:	461c      	mov	r4, r3
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   1ba0a:	698f      	ldr	r7, [r1, #24]
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);
   1ba0c:	f7ff fff2 	bl	1b9f4 <bt_conn_get_pkts>
   1ba10:	4680      	mov	r8, r0
	return z_impl_k_sem_take(sem, timeout);
   1ba12:	f04f 32ff 	mov.w	r2, #4294967295
   1ba16:	f04f 33ff 	mov.w	r3, #4294967295
   1ba1a:	f009 fc01 	bl	25220 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   1ba1e:	7aab      	ldrb	r3, [r5, #10]
   1ba20:	2b07      	cmp	r3, #7
   1ba22:	d16f      	bne.n	1bb04 <send_frag+0x108>
   1ba24:	f04f 0240 	mov.w	r2, #64	; 0x40
   1ba28:	f3ef 8311 	mrs	r3, BASEPRI
   1ba2c:	f382 8812 	msr	BASEPRI_MAX, r2
   1ba30:	f3bf 8f6f 	isb	sy
	if (tx) {
   1ba34:	b1af      	cbz	r7, 1ba62 <send_frag+0x66>
	parent->next = child;
   1ba36:	2200      	movs	r2, #0
   1ba38:	603a      	str	r2, [r7, #0]
	return list->tail;
   1ba3a:	69aa      	ldr	r2, [r5, #24]
Z_GENLIST_APPEND(slist, snode)
   1ba3c:	b172      	cbz	r2, 1ba5c <send_frag+0x60>
	parent->next = child;
   1ba3e:	6017      	str	r7, [r2, #0]
	list->tail = node;
   1ba40:	61af      	str	r7, [r5, #24]
	__asm__ volatile(
   1ba42:	f383 8811 	msr	BASEPRI, r3
   1ba46:	f3bf 8f6f 	isb	sy
		err = send_acl(conn, buf, flags);
   1ba4a:	464a      	mov	r2, r9
   1ba4c:	4631      	mov	r1, r6
   1ba4e:	4628      	mov	r0, r5
   1ba50:	f00d f96d 	bl	28d2e <send_acl>
	if (err) {
   1ba54:	4681      	mov	r9, r0
   1ba56:	b988      	cbnz	r0, 1ba7c <send_frag+0x80>
	return true;
   1ba58:	2001      	movs	r0, #1
   1ba5a:	e05f      	b.n	1bb1c <send_frag+0x120>
   1ba5c:	61af      	str	r7, [r5, #24]
	list->head = node;
   1ba5e:	616f      	str	r7, [r5, #20]
}
   1ba60:	e7ef      	b.n	1ba42 <send_frag+0x46>
	return list->tail;
   1ba62:	69aa      	ldr	r2, [r5, #24]
		if (tail_tx) {
   1ba64:	b13a      	cbz	r2, 1ba76 <send_frag+0x7a>
			pending_no_cb = &tail_tx->pending_no_cb;
   1ba66:	f102 0a0c 	add.w	sl, r2, #12
		(*pending_no_cb)++;
   1ba6a:	f8da 2000 	ldr.w	r2, [sl]
   1ba6e:	3201      	adds	r2, #1
   1ba70:	f8ca 2000 	str.w	r2, [sl]
   1ba74:	e7e5      	b.n	1ba42 <send_frag+0x46>
			pending_no_cb = &conn->pending_no_cb;
   1ba76:	f105 0a1c 	add.w	sl, r5, #28
   1ba7a:	e7f6      	b.n	1ba6a <send_frag+0x6e>
		LOG_ERR("Unable to send to driver (err %d)", err);
   1ba7c:	2008      	movs	r0, #8
   1ba7e:	f7fa f9a3 	bl	15dc8 <z_log_msg_alloc>
   1ba82:	2200      	movs	r2, #0
   1ba84:	f36f 0200 	bfc	r2, #0, #1
   1ba88:	f36f 0241 	bfc	r2, #1, #1
   1ba8c:	f36f 0282 	bfc	r2, #2, #1
   1ba90:	f36f 02c5 	bfc	r2, #3, #3
   1ba94:	2301      	movs	r3, #1
   1ba96:	f363 1288 	bfi	r2, r3, #6, #3
   1ba9a:	230c      	movs	r3, #12
   1ba9c:	f363 2252 	bfi	r2, r3, #9, #10
   1baa0:	f36f 42de 	bfc	r2, #19, #12
   1baa4:	f36f 72df 	bfc	r2, #31, #1
   1baa8:	4684      	mov	ip, r0
   1baaa:	b1a0      	cbz	r0, 1bad6 <send_frag+0xda>
   1baac:	f110 0310 	adds.w	r3, r0, #16
   1bab0:	d003      	beq.n	1baba <send_frag+0xbe>
   1bab2:	4921      	ldr	r1, [pc, #132]	; (1bb38 <send_frag+0x13c>)
   1bab4:	6141      	str	r1, [r0, #20]
   1bab6:	f8c0 9018 	str.w	r9, [r0, #24]
   1baba:	b163      	cbz	r3, 1bad6 <send_frag+0xda>
   1babc:	2303      	movs	r3, #3
   1babe:	f88d 3004 	strb.w	r3, [sp, #4]
   1bac2:	2300      	movs	r3, #0
   1bac4:	f88d 3005 	strb.w	r3, [sp, #5]
   1bac8:	f88d 3006 	strb.w	r3, [sp, #6]
   1bacc:	f88d 3007 	strb.w	r3, [sp, #7]
   1bad0:	9801      	ldr	r0, [sp, #4]
   1bad2:	f8cc 0010 	str.w	r0, [ip, #16]
   1bad6:	2300      	movs	r3, #0
   1bad8:	4918      	ldr	r1, [pc, #96]	; (1bb3c <send_frag+0x140>)
   1bada:	4660      	mov	r0, ip
   1badc:	f00c f97f 	bl	27dde <z_log_msg_finalize>
	__asm__ volatile(
   1bae0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bae4:	f3ef 8911 	mrs	r9, BASEPRI
   1bae8:	f383 8812 	msr	BASEPRI_MAX, r3
   1baec:	f3bf 8f6f 	isb	sy
		if (tx) {
   1baf0:	b1bf      	cbz	r7, 1bb22 <send_frag+0x126>
			sys_slist_find_and_remove(&conn->tx_pending, &tx->node);
   1baf2:	4639      	mov	r1, r7
   1baf4:	f105 0014 	add.w	r0, r5, #20
   1baf8:	f00d f89e 	bl	28c38 <sys_slist_find_and_remove>
	__asm__ volatile(
   1bafc:	f389 8811 	msr	BASEPRI, r9
   1bb00:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   1bb04:	4640      	mov	r0, r8
   1bb06:	f009 fb63 	bl	251d0 <z_impl_k_sem_give>
	if (tx) {
   1bb0a:	b12f      	cbz	r7, 1bb18 <send_frag+0x11c>
		tx_data(buf)->tx = NULL;
   1bb0c:	2300      	movs	r3, #0
   1bb0e:	61b3      	str	r3, [r6, #24]
		conn_tx_destroy(conn, tx);
   1bb10:	4639      	mov	r1, r7
   1bb12:	4628      	mov	r0, r5
   1bb14:	f00d f8d5 	bl	28cc2 <conn_tx_destroy>
	if (always_consume) {
   1bb18:	b94c      	cbnz	r4, 1bb2e <send_frag+0x132>
	return false;
   1bb1a:	4620      	mov	r0, r4
}
   1bb1c:	b002      	add	sp, #8
   1bb1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			(*pending_no_cb)--;
   1bb22:	f8da 3000 	ldr.w	r3, [sl]
   1bb26:	3b01      	subs	r3, #1
   1bb28:	f8ca 3000 	str.w	r3, [sl]
   1bb2c:	e7e6      	b.n	1bafc <send_frag+0x100>
		net_buf_unref(buf);
   1bb2e:	4630      	mov	r0, r6
   1bb30:	f00f fa67 	bl	2b002 <net_buf_unref>
	return false;
   1bb34:	2000      	movs	r0, #0
   1bb36:	e7f1      	b.n	1bb1c <send_frag+0x120>
   1bb38:	0002fa6c 	.word	0x0002fa6c
   1bb3c:	0002de80 	.word	0x0002de80

0001bb40 <bt_conn_new>:
{
   1bb40:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
   1bb42:	2300      	movs	r3, #0
   1bb44:	428b      	cmp	r3, r1
   1bb46:	d229      	bcs.n	1bb9c <bt_conn_new+0x5c>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   1bb48:	eb03 0443 	add.w	r4, r3, r3, lsl #1
   1bb4c:	eb00 1484 	add.w	r4, r0, r4, lsl #6
   1bb50:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1bb54:	f04f 0c01 	mov.w	ip, #1
   1bb58:	f3bf 8f5b 	dmb	ish
   1bb5c:	e852 ef00 	ldrex	lr, [r2]
   1bb60:	f1be 0f00 	cmp.w	lr, #0
   1bb64:	d103      	bne.n	1bb6e <bt_conn_new+0x2e>
   1bb66:	e842 c500 	strex	r5, ip, [r2]
   1bb6a:	2d00      	cmp	r5, #0
   1bb6c:	d1f6      	bne.n	1bb5c <bt_conn_new+0x1c>
   1bb6e:	f3bf 8f5b 	dmb	ish
   1bb72:	d111      	bne.n	1bb98 <bt_conn_new+0x58>
	if (!conn) {
   1bb74:	b174      	cbz	r4, 1bb94 <bt_conn_new+0x54>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   1bb76:	22b8      	movs	r2, #184	; 0xb8
   1bb78:	2100      	movs	r1, #0
   1bb7a:	4620      	mov	r0, r4
   1bb7c:	f00c fdb0 	bl	286e0 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   1bb80:	4907      	ldr	r1, [pc, #28]	; (1bba0 <bt_conn_new+0x60>)
   1bb82:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1bb86:	f011 faf1 	bl	2d16c <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   1bb8a:	4906      	ldr	r1, [pc, #24]	; (1bba4 <bt_conn_new+0x64>)
   1bb8c:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1bb90:	f011 fac0 	bl	2d114 <k_work_init>
}
   1bb94:	4620      	mov	r0, r4
   1bb96:	bd38      	pop	{r3, r4, r5, pc}
	for (i = 0; i < size; i++) {
   1bb98:	4463      	add	r3, ip
   1bb9a:	e7d3      	b.n	1bb44 <bt_conn_new+0x4>
	struct bt_conn *conn = NULL;
   1bb9c:	2400      	movs	r4, #0
   1bb9e:	e7e9      	b.n	1bb74 <bt_conn_new+0x34>
   1bba0:	0001c899 	.word	0x0001c899
   1bba4:	00028cb9 	.word	0x00028cb9

0001bba8 <acl_conn_new>:
{
   1bba8:	b508      	push	{r3, lr}
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   1bbaa:	2108      	movs	r1, #8
   1bbac:	4801      	ldr	r0, [pc, #4]	; (1bbb4 <acl_conn_new+0xc>)
   1bbae:	f7ff ffc7 	bl	1bb40 <bt_conn_new>
}
   1bbb2:	bd08      	pop	{r3, pc}
   1bbb4:	200022c8 	.word	0x200022c8

0001bbb8 <bt_acl_recv>:
{
   1bbb8:	b570      	push	{r4, r5, r6, lr}
   1bbba:	b082      	sub	sp, #8
   1bbbc:	4604      	mov	r4, r0
   1bbbe:	460e      	mov	r6, r1
	switch (flags) {
   1bbc0:	2a01      	cmp	r2, #1
   1bbc2:	d050      	beq.n	1bc66 <bt_acl_recv+0xae>
   1bbc4:	4615      	mov	r5, r2
   1bbc6:	2a02      	cmp	r2, #2
   1bbc8:	f040 80d5 	bne.w	1bd76 <bt_acl_recv+0x1be>
		if (conn->rx) {
   1bbcc:	6903      	ldr	r3, [r0, #16]
   1bbce:	b38b      	cbz	r3, 1bc34 <bt_acl_recv+0x7c>
			LOG_ERR("Unexpected first L2CAP frame");
   1bbd0:	2006      	movs	r0, #6
   1bbd2:	f7fa f8f9 	bl	15dc8 <z_log_msg_alloc>
   1bbd6:	2200      	movs	r2, #0
   1bbd8:	f36f 0200 	bfc	r2, #0, #1
   1bbdc:	f36f 0241 	bfc	r2, #1, #1
   1bbe0:	f36f 0282 	bfc	r2, #2, #1
   1bbe4:	f36f 02c5 	bfc	r2, #3, #3
   1bbe8:	2301      	movs	r3, #1
   1bbea:	f363 1288 	bfi	r2, r3, #6, #3
   1bbee:	2308      	movs	r3, #8
   1bbf0:	f363 2252 	bfi	r2, r3, #9, #10
   1bbf4:	f36f 42de 	bfc	r2, #19, #12
   1bbf8:	f36f 72df 	bfc	r2, #31, #1
   1bbfc:	4605      	mov	r5, r0
   1bbfe:	b188      	cbz	r0, 1bc24 <bt_acl_recv+0x6c>
   1bc00:	f110 0310 	adds.w	r3, r0, #16
   1bc04:	d001      	beq.n	1bc0a <bt_acl_recv+0x52>
   1bc06:	4993      	ldr	r1, [pc, #588]	; (1be54 <bt_acl_recv+0x29c>)
   1bc08:	6141      	str	r1, [r0, #20]
   1bc0a:	b15b      	cbz	r3, 1bc24 <bt_acl_recv+0x6c>
   1bc0c:	2302      	movs	r3, #2
   1bc0e:	f88d 3004 	strb.w	r3, [sp, #4]
   1bc12:	2300      	movs	r3, #0
   1bc14:	f88d 3005 	strb.w	r3, [sp, #5]
   1bc18:	f88d 3006 	strb.w	r3, [sp, #6]
   1bc1c:	f88d 3007 	strb.w	r3, [sp, #7]
   1bc20:	9801      	ldr	r0, [sp, #4]
   1bc22:	6128      	str	r0, [r5, #16]
   1bc24:	2300      	movs	r3, #0
   1bc26:	498c      	ldr	r1, [pc, #560]	; (1be58 <bt_acl_recv+0x2a0>)
   1bc28:	4628      	mov	r0, r5
   1bc2a:	f00c f8d8 	bl	27dde <z_log_msg_finalize>
			bt_conn_reset_rx_state(conn);
   1bc2e:	4620      	mov	r0, r4
   1bc30:	f00d f8e0 	bl	28df4 <bt_conn_reset_rx_state>
		conn->rx = buf;
   1bc34:	6126      	str	r6, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   1bc36:	6921      	ldr	r1, [r4, #16]
   1bc38:	8a0e      	ldrh	r6, [r1, #16]
   1bc3a:	2e01      	cmp	r6, #1
   1bc3c:	f240 80d2 	bls.w	1bde4 <bt_acl_recv+0x22c>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   1bc40:	68cb      	ldr	r3, [r1, #12]
 *
 *  @return 16-bit integer in host endianness.
 */
static inline uint16_t sys_get_le16(const uint8_t src[2])
{
	return ((uint16_t)src[1] << 8) | src[0];
   1bc42:	785a      	ldrb	r2, [r3, #1]
   1bc44:	781d      	ldrb	r5, [r3, #0]
   1bc46:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
   1bc4a:	3504      	adds	r5, #4
   1bc4c:	b2ad      	uxth	r5, r5
	if (conn->rx->len < acl_total_len) {
   1bc4e:	42b5      	cmp	r5, r6
   1bc50:	f200 80c8 	bhi.w	1bde4 <bt_acl_recv+0x22c>
	if (conn->rx->len > acl_total_len) {
   1bc54:	f0c0 80c8 	bcc.w	1bde8 <bt_acl_recv+0x230>
	conn->rx = NULL;
   1bc58:	2300      	movs	r3, #0
   1bc5a:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   1bc5c:	2201      	movs	r2, #1
   1bc5e:	4620      	mov	r0, r4
   1bc60:	f001 fab2 	bl	1d1c8 <bt_l2cap_recv>
   1bc64:	e0be      	b.n	1bde4 <bt_acl_recv+0x22c>
		if (!conn->rx) {
   1bc66:	6900      	ldr	r0, [r0, #16]
   1bc68:	b188      	cbz	r0, 1bc8e <bt_acl_recv+0xd6>
		if (!buf->len) {
   1bc6a:	8a0d      	ldrh	r5, [r1, #16]
   1bc6c:	2d00      	cmp	r5, #0
   1bc6e:	d044      	beq.n	1bcfa <bt_acl_recv+0x142>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   1bc70:	300c      	adds	r0, #12
   1bc72:	f00f fa53 	bl	2b11c <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   1bc76:	42a8      	cmp	r0, r5
   1bc78:	d343      	bcc.n	1bd02 <bt_acl_recv+0x14a>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
   1bc7a:	6920      	ldr	r0, [r4, #16]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1bc7c:	8a32      	ldrh	r2, [r6, #16]
   1bc7e:	68f1      	ldr	r1, [r6, #12]
   1bc80:	300c      	adds	r0, #12
   1bc82:	f00f fa0b 	bl	2b09c <net_buf_simple_add_mem>
		net_buf_unref(buf);
   1bc86:	4630      	mov	r0, r6
   1bc88:	f00f f9bb 	bl	2b002 <net_buf_unref>
		break;
   1bc8c:	e7d3      	b.n	1bc36 <bt_acl_recv+0x7e>
			LOG_ERR("Unexpected L2CAP continuation");
   1bc8e:	2006      	movs	r0, #6
   1bc90:	f7fa f89a 	bl	15dc8 <z_log_msg_alloc>
   1bc94:	2200      	movs	r2, #0
   1bc96:	f36f 0200 	bfc	r2, #0, #1
   1bc9a:	f36f 0241 	bfc	r2, #1, #1
   1bc9e:	f36f 0282 	bfc	r2, #2, #1
   1bca2:	f36f 02c5 	bfc	r2, #3, #3
   1bca6:	2301      	movs	r3, #1
   1bca8:	f363 1288 	bfi	r2, r3, #6, #3
   1bcac:	2308      	movs	r3, #8
   1bcae:	f363 2252 	bfi	r2, r3, #9, #10
   1bcb2:	f36f 42de 	bfc	r2, #19, #12
   1bcb6:	f36f 72df 	bfc	r2, #31, #1
   1bcba:	4605      	mov	r5, r0
   1bcbc:	b188      	cbz	r0, 1bce2 <bt_acl_recv+0x12a>
   1bcbe:	f110 0310 	adds.w	r3, r0, #16
   1bcc2:	d001      	beq.n	1bcc8 <bt_acl_recv+0x110>
   1bcc4:	4965      	ldr	r1, [pc, #404]	; (1be5c <bt_acl_recv+0x2a4>)
   1bcc6:	6141      	str	r1, [r0, #20]
   1bcc8:	b15b      	cbz	r3, 1bce2 <bt_acl_recv+0x12a>
   1bcca:	2302      	movs	r3, #2
   1bccc:	f88d 3004 	strb.w	r3, [sp, #4]
   1bcd0:	2300      	movs	r3, #0
   1bcd2:	f88d 3005 	strb.w	r3, [sp, #5]
   1bcd6:	f88d 3006 	strb.w	r3, [sp, #6]
   1bcda:	f88d 3007 	strb.w	r3, [sp, #7]
   1bcde:	9801      	ldr	r0, [sp, #4]
   1bce0:	6128      	str	r0, [r5, #16]
   1bce2:	2300      	movs	r3, #0
   1bce4:	495c      	ldr	r1, [pc, #368]	; (1be58 <bt_acl_recv+0x2a0>)
   1bce6:	4628      	mov	r0, r5
   1bce8:	f00c f879 	bl	27dde <z_log_msg_finalize>
			bt_conn_reset_rx_state(conn);
   1bcec:	4620      	mov	r0, r4
   1bcee:	f00d f881 	bl	28df4 <bt_conn_reset_rx_state>
			net_buf_unref(buf);
   1bcf2:	4630      	mov	r0, r6
   1bcf4:	f00f f985 	bl	2b002 <net_buf_unref>
			return;
   1bcf8:	e074      	b.n	1bde4 <bt_acl_recv+0x22c>
			net_buf_unref(buf);
   1bcfa:	4608      	mov	r0, r1
   1bcfc:	f00f f981 	bl	2b002 <net_buf_unref>
			return;
   1bd00:	e070      	b.n	1bde4 <bt_acl_recv+0x22c>
			LOG_ERR("Not enough buffer space for L2CAP data");
   1bd02:	2006      	movs	r0, #6
   1bd04:	f7fa f860 	bl	15dc8 <z_log_msg_alloc>
   1bd08:	2200      	movs	r2, #0
   1bd0a:	f36f 0200 	bfc	r2, #0, #1
   1bd0e:	f36f 0241 	bfc	r2, #1, #1
   1bd12:	f36f 0282 	bfc	r2, #2, #1
   1bd16:	f36f 02c5 	bfc	r2, #3, #3
   1bd1a:	2301      	movs	r3, #1
   1bd1c:	f363 1288 	bfi	r2, r3, #6, #3
   1bd20:	2308      	movs	r3, #8
   1bd22:	f363 2252 	bfi	r2, r3, #9, #10
   1bd26:	f36f 42de 	bfc	r2, #19, #12
   1bd2a:	f36f 72df 	bfc	r2, #31, #1
   1bd2e:	4605      	mov	r5, r0
   1bd30:	b188      	cbz	r0, 1bd56 <bt_acl_recv+0x19e>
   1bd32:	f110 0310 	adds.w	r3, r0, #16
   1bd36:	d001      	beq.n	1bd3c <bt_acl_recv+0x184>
   1bd38:	4949      	ldr	r1, [pc, #292]	; (1be60 <bt_acl_recv+0x2a8>)
   1bd3a:	6141      	str	r1, [r0, #20]
   1bd3c:	b15b      	cbz	r3, 1bd56 <bt_acl_recv+0x19e>
   1bd3e:	2302      	movs	r3, #2
   1bd40:	f88d 3004 	strb.w	r3, [sp, #4]
   1bd44:	2300      	movs	r3, #0
   1bd46:	f88d 3005 	strb.w	r3, [sp, #5]
   1bd4a:	f88d 3006 	strb.w	r3, [sp, #6]
   1bd4e:	f88d 3007 	strb.w	r3, [sp, #7]
   1bd52:	9801      	ldr	r0, [sp, #4]
   1bd54:	6128      	str	r0, [r5, #16]
   1bd56:	2300      	movs	r3, #0
   1bd58:	493f      	ldr	r1, [pc, #252]	; (1be58 <bt_acl_recv+0x2a0>)
   1bd5a:	4628      	mov	r0, r5
   1bd5c:	f00c f83f 	bl	27dde <z_log_msg_finalize>
			bt_l2cap_recv(conn, conn->rx, false);
   1bd60:	2200      	movs	r2, #0
   1bd62:	6921      	ldr	r1, [r4, #16]
   1bd64:	4620      	mov	r0, r4
   1bd66:	f001 fa2f 	bl	1d1c8 <bt_l2cap_recv>
			conn->rx = NULL;
   1bd6a:	2300      	movs	r3, #0
   1bd6c:	6123      	str	r3, [r4, #16]
			net_buf_unref(buf);
   1bd6e:	4630      	mov	r0, r6
   1bd70:	f00f f947 	bl	2b002 <net_buf_unref>
			return;
   1bd74:	e036      	b.n	1bde4 <bt_acl_recv+0x22c>
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   1bd76:	2008      	movs	r0, #8
   1bd78:	f7fa f826 	bl	15dc8 <z_log_msg_alloc>
   1bd7c:	2200      	movs	r2, #0
   1bd7e:	f36f 0200 	bfc	r2, #0, #1
   1bd82:	f36f 0241 	bfc	r2, #1, #1
   1bd86:	f36f 0282 	bfc	r2, #2, #1
   1bd8a:	f36f 02c5 	bfc	r2, #3, #3
   1bd8e:	2301      	movs	r3, #1
   1bd90:	f363 1288 	bfi	r2, r3, #6, #3
   1bd94:	230c      	movs	r3, #12
   1bd96:	f363 2252 	bfi	r2, r3, #9, #10
   1bd9a:	f36f 42de 	bfc	r2, #19, #12
   1bd9e:	f36f 72df 	bfc	r2, #31, #1
   1bda2:	4684      	mov	ip, r0
   1bda4:	b198      	cbz	r0, 1bdce <bt_acl_recv+0x216>
   1bda6:	f110 0310 	adds.w	r3, r0, #16
   1bdaa:	d002      	beq.n	1bdb2 <bt_acl_recv+0x1fa>
   1bdac:	492d      	ldr	r1, [pc, #180]	; (1be64 <bt_acl_recv+0x2ac>)
   1bdae:	6141      	str	r1, [r0, #20]
   1bdb0:	6185      	str	r5, [r0, #24]
   1bdb2:	b163      	cbz	r3, 1bdce <bt_acl_recv+0x216>
   1bdb4:	2303      	movs	r3, #3
   1bdb6:	f88d 3004 	strb.w	r3, [sp, #4]
   1bdba:	2300      	movs	r3, #0
   1bdbc:	f88d 3005 	strb.w	r3, [sp, #5]
   1bdc0:	f88d 3006 	strb.w	r3, [sp, #6]
   1bdc4:	f88d 3007 	strb.w	r3, [sp, #7]
   1bdc8:	9801      	ldr	r0, [sp, #4]
   1bdca:	f8cc 0010 	str.w	r0, [ip, #16]
   1bdce:	2300      	movs	r3, #0
   1bdd0:	4921      	ldr	r1, [pc, #132]	; (1be58 <bt_acl_recv+0x2a0>)
   1bdd2:	4660      	mov	r0, ip
   1bdd4:	f00c f803 	bl	27dde <z_log_msg_finalize>
		bt_conn_reset_rx_state(conn);
   1bdd8:	4620      	mov	r0, r4
   1bdda:	f00d f80b 	bl	28df4 <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   1bdde:	4630      	mov	r0, r6
   1bde0:	f00f f90f 	bl	2b002 <net_buf_unref>
}
   1bde4:	b002      	add	sp, #8
   1bde6:	bd70      	pop	{r4, r5, r6, pc}
		LOG_ERR("ACL len mismatch (%u > %u)", conn->rx->len, acl_total_len);
   1bde8:	2008      	movs	r0, #8
   1bdea:	f7f9 ffed 	bl	15dc8 <z_log_msg_alloc>
   1bdee:	2200      	movs	r2, #0
   1bdf0:	f36f 0200 	bfc	r2, #0, #1
   1bdf4:	f36f 0241 	bfc	r2, #1, #1
   1bdf8:	f36f 0282 	bfc	r2, #2, #1
   1bdfc:	f36f 02c5 	bfc	r2, #3, #3
   1be00:	2301      	movs	r3, #1
   1be02:	f363 1288 	bfi	r2, r3, #6, #3
   1be06:	2310      	movs	r3, #16
   1be08:	f363 2252 	bfi	r2, r3, #9, #10
   1be0c:	f36f 42de 	bfc	r2, #19, #12
   1be10:	f36f 72df 	bfc	r2, #31, #1
   1be14:	4684      	mov	ip, r0
   1be16:	b198      	cbz	r0, 1be40 <bt_acl_recv+0x288>
   1be18:	18c3      	adds	r3, r0, r3
   1be1a:	d003      	beq.n	1be24 <bt_acl_recv+0x26c>
   1be1c:	4912      	ldr	r1, [pc, #72]	; (1be68 <bt_acl_recv+0x2b0>)
   1be1e:	6141      	str	r1, [r0, #20]
   1be20:	6186      	str	r6, [r0, #24]
   1be22:	61c5      	str	r5, [r0, #28]
   1be24:	b163      	cbz	r3, 1be40 <bt_acl_recv+0x288>
   1be26:	2304      	movs	r3, #4
   1be28:	f88d 3004 	strb.w	r3, [sp, #4]
   1be2c:	2300      	movs	r3, #0
   1be2e:	f88d 3005 	strb.w	r3, [sp, #5]
   1be32:	f88d 3006 	strb.w	r3, [sp, #6]
   1be36:	f88d 3007 	strb.w	r3, [sp, #7]
   1be3a:	9801      	ldr	r0, [sp, #4]
   1be3c:	f8cc 0010 	str.w	r0, [ip, #16]
   1be40:	2300      	movs	r3, #0
   1be42:	4905      	ldr	r1, [pc, #20]	; (1be58 <bt_acl_recv+0x2a0>)
   1be44:	4660      	mov	r0, ip
   1be46:	f00b ffca 	bl	27dde <z_log_msg_finalize>
		bt_conn_reset_rx_state(conn);
   1be4a:	4620      	mov	r0, r4
   1be4c:	f00c ffd2 	bl	28df4 <bt_conn_reset_rx_state>
		return;
   1be50:	e7c8      	b.n	1bde4 <bt_acl_recv+0x22c>
   1be52:	bf00      	nop
   1be54:	0002fe24 	.word	0x0002fe24
   1be58:	0002de80 	.word	0x0002de80
   1be5c:	0002fe44 	.word	0x0002fe44
   1be60:	0002fe64 	.word	0x0002fe64
   1be64:	0002fe8c 	.word	0x0002fe8c
   1be68:	0002feac 	.word	0x0002feac

0001be6c <bt_conn_send_cb>:
{
   1be6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1be70:	b082      	sub	sp, #8
   1be72:	461f      	mov	r7, r3
	if (conn->state != BT_CONN_CONNECTED) {
   1be74:	7a83      	ldrb	r3, [r0, #10]
   1be76:	2b07      	cmp	r3, #7
   1be78:	d11b      	bne.n	1beb2 <bt_conn_send_cb+0x46>
   1be7a:	4604      	mov	r4, r0
   1be7c:	460d      	mov	r5, r1
   1be7e:	4616      	mov	r6, r2
	if (cb) {
   1be80:	2a00      	cmp	r2, #0
   1be82:	f000 80af 	beq.w	1bfe4 <bt_conn_send_cb+0x178>
		tx = conn_tx_alloc();
   1be86:	f7ff fd9d 	bl	1b9c4 <conn_tx_alloc>
		if (!tx) {
   1be8a:	4680      	mov	r8, r0
   1be8c:	2800      	cmp	r0, #0
   1be8e:	d042      	beq.n	1bf16 <bt_conn_send_cb+0xaa>
		if (conn->state != BT_CONN_CONNECTED) {
   1be90:	7aa3      	ldrb	r3, [r4, #10]
   1be92:	2b07      	cmp	r3, #7
   1be94:	d171      	bne.n	1bf7a <bt_conn_send_cb+0x10e>
		tx->cb = cb;
   1be96:	6046      	str	r6, [r0, #4]
		tx->user_data = user_data;
   1be98:	6087      	str	r7, [r0, #8]
		tx->pending_no_cb = 0U;
   1be9a:	2300      	movs	r3, #0
   1be9c:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   1be9e:	61a8      	str	r0, [r5, #24]
	net_buf_put(&conn->tx_queue, buf);
   1bea0:	4629      	mov	r1, r5
   1bea2:	f104 0038 	add.w	r0, r4, #56	; 0x38
   1bea6:	f00f f8a8 	bl	2affa <net_buf_put>
	return 0;
   1beaa:	2000      	movs	r0, #0
}
   1beac:	b002      	add	sp, #8
   1beae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERR("not connected!");
   1beb2:	2006      	movs	r0, #6
   1beb4:	f7f9 ff88 	bl	15dc8 <z_log_msg_alloc>
   1beb8:	2200      	movs	r2, #0
   1beba:	f36f 0200 	bfc	r2, #0, #1
   1bebe:	f36f 0241 	bfc	r2, #1, #1
   1bec2:	f36f 0282 	bfc	r2, #2, #1
   1bec6:	f36f 02c5 	bfc	r2, #3, #3
   1beca:	2301      	movs	r3, #1
   1becc:	f363 1288 	bfi	r2, r3, #6, #3
   1bed0:	2308      	movs	r3, #8
   1bed2:	f363 2252 	bfi	r2, r3, #9, #10
   1bed6:	f36f 42de 	bfc	r2, #19, #12
   1beda:	f36f 72df 	bfc	r2, #31, #1
   1bede:	4604      	mov	r4, r0
   1bee0:	b188      	cbz	r0, 1bf06 <bt_conn_send_cb+0x9a>
   1bee2:	f110 0310 	adds.w	r3, r0, #16
   1bee6:	d001      	beq.n	1beec <bt_conn_send_cb+0x80>
   1bee8:	4940      	ldr	r1, [pc, #256]	; (1bfec <bt_conn_send_cb+0x180>)
   1beea:	6141      	str	r1, [r0, #20]
   1beec:	b15b      	cbz	r3, 1bf06 <bt_conn_send_cb+0x9a>
   1beee:	2302      	movs	r3, #2
   1bef0:	f88d 3004 	strb.w	r3, [sp, #4]
   1bef4:	2300      	movs	r3, #0
   1bef6:	f88d 3005 	strb.w	r3, [sp, #5]
   1befa:	f88d 3006 	strb.w	r3, [sp, #6]
   1befe:	f88d 3007 	strb.w	r3, [sp, #7]
   1bf02:	9801      	ldr	r0, [sp, #4]
   1bf04:	6120      	str	r0, [r4, #16]
   1bf06:	2300      	movs	r3, #0
   1bf08:	4939      	ldr	r1, [pc, #228]	; (1bff0 <bt_conn_send_cb+0x184>)
   1bf0a:	4620      	mov	r0, r4
   1bf0c:	f00b ff67 	bl	27dde <z_log_msg_finalize>
		return -ENOTCONN;
   1bf10:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1bf14:	e7ca      	b.n	1beac <bt_conn_send_cb+0x40>
			LOG_ERR("Unable to allocate TX context");
   1bf16:	2006      	movs	r0, #6
   1bf18:	f7f9 ff56 	bl	15dc8 <z_log_msg_alloc>
   1bf1c:	2200      	movs	r2, #0
   1bf1e:	f36f 0200 	bfc	r2, #0, #1
   1bf22:	f36f 0241 	bfc	r2, #1, #1
   1bf26:	f36f 0282 	bfc	r2, #2, #1
   1bf2a:	f36f 02c5 	bfc	r2, #3, #3
   1bf2e:	2301      	movs	r3, #1
   1bf30:	f363 1288 	bfi	r2, r3, #6, #3
   1bf34:	2308      	movs	r3, #8
   1bf36:	f363 2252 	bfi	r2, r3, #9, #10
   1bf3a:	f36f 42de 	bfc	r2, #19, #12
   1bf3e:	f36f 72df 	bfc	r2, #31, #1
   1bf42:	4604      	mov	r4, r0
   1bf44:	b188      	cbz	r0, 1bf6a <bt_conn_send_cb+0xfe>
   1bf46:	f110 0310 	adds.w	r3, r0, #16
   1bf4a:	d001      	beq.n	1bf50 <bt_conn_send_cb+0xe4>
   1bf4c:	4929      	ldr	r1, [pc, #164]	; (1bff4 <bt_conn_send_cb+0x188>)
   1bf4e:	6141      	str	r1, [r0, #20]
   1bf50:	b15b      	cbz	r3, 1bf6a <bt_conn_send_cb+0xfe>
   1bf52:	2302      	movs	r3, #2
   1bf54:	f88d 3004 	strb.w	r3, [sp, #4]
   1bf58:	2300      	movs	r3, #0
   1bf5a:	f88d 3005 	strb.w	r3, [sp, #5]
   1bf5e:	f88d 3006 	strb.w	r3, [sp, #6]
   1bf62:	f88d 3007 	strb.w	r3, [sp, #7]
   1bf66:	9801      	ldr	r0, [sp, #4]
   1bf68:	6120      	str	r0, [r4, #16]
   1bf6a:	2300      	movs	r3, #0
   1bf6c:	4920      	ldr	r1, [pc, #128]	; (1bff0 <bt_conn_send_cb+0x184>)
   1bf6e:	4620      	mov	r0, r4
   1bf70:	f00b ff35 	bl	27dde <z_log_msg_finalize>
			return -ENOBUFS;
   1bf74:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1bf78:	e798      	b.n	1beac <bt_conn_send_cb+0x40>
			LOG_WRN("Disconnected while allocating context");
   1bf7a:	2006      	movs	r0, #6
   1bf7c:	f7f9 ff24 	bl	15dc8 <z_log_msg_alloc>
   1bf80:	2200      	movs	r2, #0
   1bf82:	f36f 0200 	bfc	r2, #0, #1
   1bf86:	f36f 0241 	bfc	r2, #1, #1
   1bf8a:	f36f 0282 	bfc	r2, #2, #1
   1bf8e:	f36f 02c5 	bfc	r2, #3, #3
   1bf92:	2302      	movs	r3, #2
   1bf94:	f363 1288 	bfi	r2, r3, #6, #3
   1bf98:	2308      	movs	r3, #8
   1bf9a:	f363 2252 	bfi	r2, r3, #9, #10
   1bf9e:	f36f 42de 	bfc	r2, #19, #12
   1bfa2:	f36f 72df 	bfc	r2, #31, #1
   1bfa6:	4604      	mov	r4, r0
   1bfa8:	b188      	cbz	r0, 1bfce <bt_conn_send_cb+0x162>
   1bfaa:	f110 0310 	adds.w	r3, r0, #16
   1bfae:	d001      	beq.n	1bfb4 <bt_conn_send_cb+0x148>
   1bfb0:	4911      	ldr	r1, [pc, #68]	; (1bff8 <bt_conn_send_cb+0x18c>)
   1bfb2:	6141      	str	r1, [r0, #20]
   1bfb4:	b15b      	cbz	r3, 1bfce <bt_conn_send_cb+0x162>
   1bfb6:	2302      	movs	r3, #2
   1bfb8:	f88d 3004 	strb.w	r3, [sp, #4]
   1bfbc:	2300      	movs	r3, #0
   1bfbe:	f88d 3005 	strb.w	r3, [sp, #5]
   1bfc2:	f88d 3006 	strb.w	r3, [sp, #6]
   1bfc6:	f88d 3007 	strb.w	r3, [sp, #7]
   1bfca:	9801      	ldr	r0, [sp, #4]
   1bfcc:	6120      	str	r0, [r4, #16]
   1bfce:	2300      	movs	r3, #0
   1bfd0:	4907      	ldr	r1, [pc, #28]	; (1bff0 <bt_conn_send_cb+0x184>)
   1bfd2:	4620      	mov	r0, r4
   1bfd4:	f00b ff03 	bl	27dde <z_log_msg_finalize>
			tx_free(tx);
   1bfd8:	4640      	mov	r0, r8
   1bfda:	f7ff fce7 	bl	1b9ac <tx_free>
			return -ENOTCONN;
   1bfde:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1bfe2:	e763      	b.n	1beac <bt_conn_send_cb+0x40>
		tx_data(buf)->tx = NULL;
   1bfe4:	2300      	movs	r3, #0
   1bfe6:	618b      	str	r3, [r1, #24]
   1bfe8:	e75a      	b.n	1bea0 <bt_conn_send_cb+0x34>
   1bfea:	bf00      	nop
   1bfec:	0002fec8 	.word	0x0002fec8
   1bff0:	0002de80 	.word	0x0002de80
   1bff4:	0002fed8 	.word	0x0002fed8
   1bff8:	0002fef8 	.word	0x0002fef8

0001bffc <bt_conn_prepare_events>:
{
   1bffc:	b570      	push	{r4, r5, r6, lr}
   1bffe:	4606      	mov	r6, r0
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_POLL_SIGNAL_INIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_poll_signal_init(sig);
   1c000:	4c10      	ldr	r4, [pc, #64]	; (1c044 <bt_conn_prepare_events+0x48>)
   1c002:	4620      	mov	r0, r4
   1c004:	f011 fd58 	bl	2dab8 <z_impl_k_poll_signal_init>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   1c008:	4623      	mov	r3, r4
   1c00a:	2200      	movs	r2, #0
   1c00c:	2101      	movs	r1, #1
   1c00e:	4630      	mov	r0, r6
   1c010:	f011 fd2b 	bl	2da6a <k_poll_event_init>
   1c014:	2501      	movs	r5, #1
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   1c016:	2400      	movs	r4, #0
   1c018:	e000      	b.n	1c01c <bt_conn_prepare_events+0x20>
   1c01a:	3401      	adds	r4, #1
   1c01c:	2c07      	cmp	r4, #7
   1c01e:	d80e      	bhi.n	1c03e <bt_conn_prepare_events+0x42>
		conn = &acl_conns[i];
   1c020:	eb04 0044 	add.w	r0, r4, r4, lsl #1
		if (!conn_prepare_events(conn, &events[ev_count])) {
   1c024:	eb05 0185 	add.w	r1, r5, r5, lsl #2
   1c028:	eb06 0181 	add.w	r1, r6, r1, lsl #2
   1c02c:	4b06      	ldr	r3, [pc, #24]	; (1c048 <bt_conn_prepare_events+0x4c>)
   1c02e:	eb03 1080 	add.w	r0, r3, r0, lsl #6
   1c032:	f00c ff09 	bl	28e48 <conn_prepare_events>
   1c036:	2800      	cmp	r0, #0
   1c038:	d1ef      	bne.n	1c01a <bt_conn_prepare_events+0x1e>
			ev_count++;
   1c03a:	3501      	adds	r5, #1
   1c03c:	e7ed      	b.n	1c01a <bt_conn_prepare_events+0x1e>
}
   1c03e:	4628      	mov	r0, r5
   1c040:	bd70      	pop	{r4, r5, r6, pc}
   1c042:	bf00      	nop
   1c044:	20000918 	.word	0x20000918
   1c048:	200022c8 	.word	0x200022c8

0001c04c <bt_conn_lookup_handle>:
{
   1c04c:	b508      	push	{r3, lr}
   1c04e:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   1c050:	2108      	movs	r1, #8
   1c052:	4802      	ldr	r0, [pc, #8]	; (1c05c <bt_conn_lookup_handle+0x10>)
   1c054:	f00c ff64 	bl	28f20 <conn_lookup_handle>
}
   1c058:	bd08      	pop	{r3, pc}
   1c05a:	bf00      	nop
   1c05c:	200022c8 	.word	0x200022c8

0001c060 <bt_conn_set_state>:
{
   1c060:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c062:	b083      	sub	sp, #12
   1c064:	af00      	add	r7, sp, #0
   1c066:	460d      	mov	r5, r1
	if (conn->state == state) {
   1c068:	7a86      	ldrb	r6, [r0, #10]
   1c06a:	428e      	cmp	r6, r1
   1c06c:	d014      	beq.n	1c098 <bt_conn_set_state+0x38>
   1c06e:	4604      	mov	r4, r0
	conn->state = state;
   1c070:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
   1c072:	2e00      	cmp	r6, #0
   1c074:	d068      	beq.n	1c148 <bt_conn_set_state+0xe8>
   1c076:	2e06      	cmp	r6, #6
   1c078:	d06c      	beq.n	1c154 <bt_conn_set_state+0xf4>
	switch (conn->state) {
   1c07a:	7aa3      	ldrb	r3, [r4, #10]
   1c07c:	2b08      	cmp	r3, #8
   1c07e:	f200 813f 	bhi.w	1c300 <bt_conn_set_state+0x2a0>
   1c082:	e8df f013 	tbh	[pc, r3, lsl #1]
   1c086:	007d      	.short	0x007d
   1c088:	005b0139 	.word	0x005b0139
   1c08c:	005b005b 	.word	0x005b005b
   1c090:	0112005b 	.word	0x0112005b
   1c094:	005b006e 	.word	0x005b006e
		LOG_WRN("no transition %s", state2str(state));
   1c098:	4608      	mov	r0, r1
   1c09a:	f7ff fbf5 	bl	1b888 <state2str>
   1c09e:	466d      	mov	r5, sp
   1c0a0:	2300      	movs	r3, #0
   1c0a2:	713b      	strb	r3, [r7, #4]
   1c0a4:	2302      	movs	r3, #2
   1c0a6:	717b      	strb	r3, [r7, #5]
   1c0a8:	b088      	sub	sp, #32
   1c0aa:	466c      	mov	r4, sp
   1c0ac:	f114 0210 	adds.w	r2, r4, #16
   1c0b0:	d011      	beq.n	1c0d6 <bt_conn_set_state+0x76>
   1c0b2:	260e      	movs	r6, #14
   1c0b4:	b11a      	cbz	r2, 1c0be <bt_conn_set_state+0x5e>
   1c0b6:	2e04      	cmp	r6, #4
   1c0b8:	dd01      	ble.n	1c0be <bt_conn_set_state+0x5e>
   1c0ba:	4ba8      	ldr	r3, [pc, #672]	; (1c35c <bt_conn_set_state+0x2fc>)
   1c0bc:	6163      	str	r3, [r4, #20]
   1c0be:	2300      	movs	r3, #0
   1c0c0:	703b      	strb	r3, [r7, #0]
   1c0c2:	2302      	movs	r3, #2
   1c0c4:	707b      	strb	r3, [r7, #1]
   1c0c6:	b19a      	cbz	r2, 1c0f0 <bt_conn_set_state+0x90>
   1c0c8:	2e08      	cmp	r6, #8
   1c0ca:	dd00      	ble.n	1c0ce <bt_conn_set_state+0x6e>
   1c0cc:	61a0      	str	r0, [r4, #24]
   1c0ce:	f104 031c 	add.w	r3, r4, #28
   1c0d2:	2100      	movs	r1, #0
   1c0d4:	e00a      	b.n	1c0ec <bt_conn_set_state+0x8c>
   1c0d6:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   1c0da:	e7eb      	b.n	1c0b4 <bt_conn_set_state+0x54>
   1c0dc:	f101 0008 	add.w	r0, r1, #8
   1c0e0:	4438      	add	r0, r7
   1c0e2:	f810 0c08 	ldrb.w	r0, [r0, #-8]
   1c0e6:	f803 0b01 	strb.w	r0, [r3], #1
   1c0ea:	3101      	adds	r1, #1
   1c0ec:	2901      	cmp	r1, #1
   1c0ee:	d9f5      	bls.n	1c0dc <bt_conn_set_state+0x7c>
   1c0f0:	2e0d      	cmp	r6, #13
   1c0f2:	dd26      	ble.n	1c142 <bt_conn_set_state+0xe2>
   1c0f4:	230e      	movs	r3, #14
   1c0f6:	b142      	cbz	r2, 1c10a <bt_conn_set_state+0xaa>
   1c0f8:	2103      	movs	r1, #3
   1c0fa:	7139      	strb	r1, [r7, #4]
   1c0fc:	2100      	movs	r1, #0
   1c0fe:	7179      	strb	r1, [r7, #5]
   1c100:	71b9      	strb	r1, [r7, #6]
   1c102:	2101      	movs	r1, #1
   1c104:	71f9      	strb	r1, [r7, #7]
   1c106:	6878      	ldr	r0, [r7, #4]
   1c108:	6120      	str	r0, [r4, #16]
   1c10a:	2100      	movs	r1, #0
   1c10c:	f36f 0100 	bfc	r1, #0, #1
   1c110:	f36f 0141 	bfc	r1, #1, #1
   1c114:	f36f 0182 	bfc	r1, #2, #1
   1c118:	f36f 01c5 	bfc	r1, #3, #3
   1c11c:	2002      	movs	r0, #2
   1c11e:	f360 1188 	bfi	r1, r0, #6, #3
   1c122:	f3c3 0309 	ubfx	r3, r3, #0, #10
   1c126:	f363 2152 	bfi	r1, r3, #9, #10
   1c12a:	f36f 41de 	bfc	r1, #19, #12
   1c12e:	f36f 71df 	bfc	r1, #31, #1
   1c132:	2300      	movs	r3, #0
   1c134:	488a      	ldr	r0, [pc, #552]	; (1c360 <bt_conn_set_state+0x300>)
   1c136:	f00b fe6a 	bl	27e0e <z_impl_z_log_msg_static_create>
   1c13a:	46ad      	mov	sp, r5
}
   1c13c:	370c      	adds	r7, #12
   1c13e:	46bd      	mov	sp, r7
   1c140:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_WRN("no transition %s", state2str(state));
   1c142:	f06f 031b 	mvn.w	r3, #27
   1c146:	e7d6      	b.n	1c0f6 <bt_conn_set_state+0x96>
		if (conn->type != BT_CONN_TYPE_ISO) {
   1c148:	7883      	ldrb	r3, [r0, #2]
   1c14a:	2b08      	cmp	r3, #8
   1c14c:	d095      	beq.n	1c07a <bt_conn_set_state+0x1a>
			bt_conn_ref(conn);
   1c14e:	f00c feb3 	bl	28eb8 <bt_conn_ref>
   1c152:	e792      	b.n	1c07a <bt_conn_set_state+0x1a>
		    conn->type == BT_CONN_TYPE_LE) {
   1c154:	7883      	ldrb	r3, [r0, #2]
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1c156:	2b01      	cmp	r3, #1
   1c158:	d18f      	bne.n	1c07a <bt_conn_set_state+0x1a>
			k_work_cancel_delayable(&conn->deferred_work);
   1c15a:	3058      	adds	r0, #88	; 0x58
   1c15c:	f011 f859 	bl	2d212 <k_work_cancel_delayable>
   1c160:	e78b      	b.n	1c07a <bt_conn_set_state+0x1a>
		if (conn->type == BT_CONN_TYPE_SCO) {
   1c162:	78a3      	ldrb	r3, [r4, #2]
   1c164:	2b04      	cmp	r3, #4
   1c166:	d0e9      	beq.n	1c13c <bt_conn_set_state+0xdc>
		k_fifo_init(&conn->tx_queue);
   1c168:	f104 0038 	add.w	r0, r4, #56	; 0x38
	z_impl_k_queue_init(queue);
   1c16c:	f010 fec8 	bl	2cf00 <z_impl_k_queue_init>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   1c170:	2100      	movs	r1, #0
   1c172:	487c      	ldr	r0, [pc, #496]	; (1c364 <bt_conn_set_state+0x304>)
   1c174:	f00a f8cc 	bl	26310 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   1c178:	2300      	movs	r3, #0
   1c17a:	6523      	str	r3, [r4, #80]	; 0x50
	list->tail = NULL;
   1c17c:	6563      	str	r3, [r4, #84]	; 0x54
}
   1c17e:	e7dd      	b.n	1c13c <bt_conn_set_state+0xdc>
		if (conn->type == BT_CONN_TYPE_SCO) {
   1c180:	78a3      	ldrb	r3, [r4, #2]
   1c182:	2b04      	cmp	r3, #4
   1c184:	d016      	beq.n	1c1b4 <bt_conn_set_state+0x154>
		switch (old_state) {
   1c186:	2e08      	cmp	r6, #8
   1c188:	d8d8      	bhi.n	1c13c <bt_conn_set_state+0xdc>
   1c18a:	a301      	add	r3, pc, #4	; (adr r3, 1c190 <bt_conn_set_state+0x130>)
   1c18c:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   1c190:	0001c251 	.word	0x0001c251
   1c194:	0001c1bd 	.word	0x0001c1bd
   1c198:	0001c219 	.word	0x0001c219
   1c19c:	0001c241 	.word	0x0001c241
   1c1a0:	0001c249 	.word	0x0001c249
   1c1a4:	0001c22d 	.word	0x0001c22d
   1c1a8:	0001c205 	.word	0x0001c205
   1c1ac:	0001c13d 	.word	0x0001c13d
   1c1b0:	0001c251 	.word	0x0001c251
			bt_conn_unref(conn);
   1c1b4:	4620      	mov	r0, r4
   1c1b6:	f00c fea6 	bl	28f06 <bt_conn_unref>
			break;
   1c1ba:	e7bf      	b.n	1c13c <bt_conn_set_state+0xdc>
			tx_notify(conn);
   1c1bc:	4620      	mov	r0, r4
   1c1be:	f00c fd58 	bl	28c72 <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   1c1c2:	78a3      	ldrb	r3, [r4, #2]
   1c1c4:	2b01      	cmp	r3, #1
   1c1c6:	d011      	beq.n	1c1ec <bt_conn_set_state+0x18c>
			atomic_set_bit(conn->flags, BT_CONN_CLEANUP);
   1c1c8:	3404      	adds	r4, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1c1ca:	f3bf 8f5b 	dmb	ish
   1c1ce:	e854 3f00 	ldrex	r3, [r4]
   1c1d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1c1d6:	e844 3200 	strex	r2, r3, [r4]
   1c1da:	2a00      	cmp	r2, #0
   1c1dc:	d1f7      	bne.n	1c1ce <bt_conn_set_state+0x16e>
   1c1de:	f3bf 8f5b 	dmb	ish
   1c1e2:	2100      	movs	r1, #0
   1c1e4:	485f      	ldr	r0, [pc, #380]	; (1c364 <bt_conn_set_state+0x304>)
   1c1e6:	f00a f893 	bl	26310 <z_impl_k_poll_signal_raise>
   1c1ea:	e7a7      	b.n	1c13c <bt_conn_set_state+0xdc>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
   1c1ec:	f104 0558 	add.w	r5, r4, #88	; 0x58
   1c1f0:	4628      	mov	r0, r5
   1c1f2:	f010 ffc7 	bl	2d184 <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   1c1f6:	f010 0f0c 	tst.w	r0, #12
   1c1fa:	d0e5      	beq.n	1c1c8 <bt_conn_set_state+0x168>
				k_work_cancel_delayable(&conn->deferred_work);
   1c1fc:	4628      	mov	r0, r5
   1c1fe:	f011 f808 	bl	2d212 <k_work_cancel_delayable>
   1c202:	e7e1      	b.n	1c1c8 <bt_conn_set_state+0x168>
			if (conn->err) {
   1c204:	7a63      	ldrb	r3, [r4, #9]
   1c206:	b91b      	cbnz	r3, 1c210 <bt_conn_set_state+0x1b0>
			bt_conn_unref(conn);
   1c208:	4620      	mov	r0, r4
   1c20a:	f00c fe7c 	bl	28f06 <bt_conn_unref>
			break;
   1c20e:	e795      	b.n	1c13c <bt_conn_set_state+0xdc>
				notify_connected(conn);
   1c210:	4620      	mov	r0, r4
   1c212:	f7ff fb6b 	bl	1b8ec <notify_connected>
   1c216:	e7f7      	b.n	1c208 <bt_conn_set_state+0x1a8>
			if (conn->err) {
   1c218:	7a63      	ldrb	r3, [r4, #9]
   1c21a:	b91b      	cbnz	r3, 1c224 <bt_conn_set_state+0x1c4>
			bt_conn_unref(conn);
   1c21c:	4620      	mov	r0, r4
   1c21e:	f00c fe72 	bl	28f06 <bt_conn_unref>
			break;
   1c222:	e78b      	b.n	1c13c <bt_conn_set_state+0xdc>
				notify_connected(conn);
   1c224:	4620      	mov	r0, r4
   1c226:	f7ff fb61 	bl	1b8ec <notify_connected>
   1c22a:	e7f7      	b.n	1c21c <bt_conn_set_state+0x1bc>
			if (conn->err) {
   1c22c:	7a63      	ldrb	r3, [r4, #9]
   1c22e:	b91b      	cbnz	r3, 1c238 <bt_conn_set_state+0x1d8>
			bt_conn_unref(conn);
   1c230:	4620      	mov	r0, r4
   1c232:	f00c fe68 	bl	28f06 <bt_conn_unref>
			break;
   1c236:	e781      	b.n	1c13c <bt_conn_set_state+0xdc>
				notify_connected(conn);
   1c238:	4620      	mov	r0, r4
   1c23a:	f7ff fb57 	bl	1b8ec <notify_connected>
   1c23e:	e7f7      	b.n	1c230 <bt_conn_set_state+0x1d0>
			bt_conn_unref(conn);
   1c240:	4620      	mov	r0, r4
   1c242:	f00c fe60 	bl	28f06 <bt_conn_unref>
			break;
   1c246:	e779      	b.n	1c13c <bt_conn_set_state+0xdc>
			bt_conn_unref(conn);
   1c248:	4620      	mov	r0, r4
   1c24a:	f00c fe5c 	bl	28f06 <bt_conn_unref>
			break;
   1c24e:	e775      	b.n	1c13c <bt_conn_set_state+0xdc>
			LOG_WRN("Invalid (%u) old state", state);
   1c250:	2008      	movs	r0, #8
   1c252:	f7f9 fdb9 	bl	15dc8 <z_log_msg_alloc>
   1c256:	2200      	movs	r2, #0
   1c258:	f36f 0200 	bfc	r2, #0, #1
   1c25c:	f36f 0241 	bfc	r2, #1, #1
   1c260:	f36f 0282 	bfc	r2, #2, #1
   1c264:	f36f 02c5 	bfc	r2, #3, #3
   1c268:	2302      	movs	r3, #2
   1c26a:	f363 1288 	bfi	r2, r3, #6, #3
   1c26e:	230c      	movs	r3, #12
   1c270:	f363 2252 	bfi	r2, r3, #9, #10
   1c274:	f36f 42de 	bfc	r2, #19, #12
   1c278:	f36f 72df 	bfc	r2, #31, #1
   1c27c:	4604      	mov	r4, r0
   1c27e:	b170      	cbz	r0, 1c29e <bt_conn_set_state+0x23e>
   1c280:	f110 0310 	adds.w	r3, r0, #16
   1c284:	d002      	beq.n	1c28c <bt_conn_set_state+0x22c>
   1c286:	4938      	ldr	r1, [pc, #224]	; (1c368 <bt_conn_set_state+0x308>)
   1c288:	6141      	str	r1, [r0, #20]
   1c28a:	6185      	str	r5, [r0, #24]
   1c28c:	b13b      	cbz	r3, 1c29e <bt_conn_set_state+0x23e>
   1c28e:	2303      	movs	r3, #3
   1c290:	713b      	strb	r3, [r7, #4]
   1c292:	2300      	movs	r3, #0
   1c294:	717b      	strb	r3, [r7, #5]
   1c296:	71bb      	strb	r3, [r7, #6]
   1c298:	71fb      	strb	r3, [r7, #7]
   1c29a:	6878      	ldr	r0, [r7, #4]
   1c29c:	6120      	str	r0, [r4, #16]
   1c29e:	2300      	movs	r3, #0
   1c2a0:	492f      	ldr	r1, [pc, #188]	; (1c360 <bt_conn_set_state+0x300>)
   1c2a2:	4620      	mov	r0, r4
   1c2a4:	f00b fd9b 	bl	27dde <z_log_msg_finalize>
			break;
   1c2a8:	e748      	b.n	1c13c <bt_conn_set_state+0xdc>
		if (conn->type == BT_CONN_TYPE_SCO) {
   1c2aa:	78a3      	ldrb	r3, [r4, #2]
   1c2ac:	2b04      	cmp	r3, #4
   1c2ae:	f43f af45 	beq.w	1c13c <bt_conn_set_state+0xdc>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1c2b2:	2b01      	cmp	r3, #1
   1c2b4:	f47f af42 	bne.w	1c13c <bt_conn_set_state+0xdc>
			k_work_schedule(&conn->deferred_work,
   1c2b8:	3458      	adds	r4, #88	; 0x58
					K_MSEC(10 * bt_dev.create_param.timeout));
   1c2ba:	4b2c      	ldr	r3, [pc, #176]	; (1c36c <bt_conn_set_state+0x30c>)
   1c2bc:	8a98      	ldrh	r0, [r3, #20]
   1c2be:	b1c0      	cbz	r0, 1c2f2 <bt_conn_set_state+0x292>
   1c2c0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1c2c4:	0040      	lsls	r0, r0, #1
   1c2c6:	2100      	movs	r1, #0
			return ((t * to_hz + off) / from_hz);
   1c2c8:	03c9      	lsls	r1, r1, #15
   1c2ca:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   1c2ce:	03c0      	lsls	r0, r0, #15
   1c2d0:	f240 33e7 	movw	r3, #999	; 0x3e7
   1c2d4:	18c0      	adds	r0, r0, r3
   1c2d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1c2da:	f04f 0300 	mov.w	r3, #0
   1c2de:	f141 0100 	adc.w	r1, r1, #0
   1c2e2:	f7e3 ff0d 	bl	100 <__aeabi_uldivmod>
   1c2e6:	4602      	mov	r2, r0
   1c2e8:	460b      	mov	r3, r1
			k_work_schedule(&conn->deferred_work,
   1c2ea:	4620      	mov	r0, r4
   1c2ec:	f009 f938 	bl	25560 <k_work_schedule>
   1c2f0:	e724      	b.n	1c13c <bt_conn_set_state+0xdc>
					K_MSEC(10 * bt_dev.create_param.timeout));
   1c2f2:	2000      	movs	r0, #0
   1c2f4:	4601      	mov	r1, r0
   1c2f6:	e7e7      	b.n	1c2c8 <bt_conn_set_state+0x268>
		process_unack_tx(conn);
   1c2f8:	4620      	mov	r0, r4
   1c2fa:	f00c fd39 	bl	28d70 <process_unack_tx>
		break;
   1c2fe:	e71d      	b.n	1c13c <bt_conn_set_state+0xdc>
		LOG_WRN("no valid (%u) state was set", state);
   1c300:	2008      	movs	r0, #8
   1c302:	f7f9 fd61 	bl	15dc8 <z_log_msg_alloc>
   1c306:	2200      	movs	r2, #0
   1c308:	f36f 0200 	bfc	r2, #0, #1
   1c30c:	f36f 0241 	bfc	r2, #1, #1
   1c310:	f36f 0282 	bfc	r2, #2, #1
   1c314:	f36f 02c5 	bfc	r2, #3, #3
   1c318:	2302      	movs	r3, #2
   1c31a:	f363 1288 	bfi	r2, r3, #6, #3
   1c31e:	230c      	movs	r3, #12
   1c320:	f363 2252 	bfi	r2, r3, #9, #10
   1c324:	f36f 42de 	bfc	r2, #19, #12
   1c328:	f36f 72df 	bfc	r2, #31, #1
   1c32c:	4604      	mov	r4, r0
   1c32e:	b170      	cbz	r0, 1c34e <bt_conn_set_state+0x2ee>
   1c330:	f110 0310 	adds.w	r3, r0, #16
   1c334:	d002      	beq.n	1c33c <bt_conn_set_state+0x2dc>
   1c336:	490e      	ldr	r1, [pc, #56]	; (1c370 <bt_conn_set_state+0x310>)
   1c338:	6141      	str	r1, [r0, #20]
   1c33a:	6185      	str	r5, [r0, #24]
   1c33c:	b13b      	cbz	r3, 1c34e <bt_conn_set_state+0x2ee>
   1c33e:	2303      	movs	r3, #3
   1c340:	713b      	strb	r3, [r7, #4]
   1c342:	2300      	movs	r3, #0
   1c344:	717b      	strb	r3, [r7, #5]
   1c346:	71bb      	strb	r3, [r7, #6]
   1c348:	71fb      	strb	r3, [r7, #7]
   1c34a:	6878      	ldr	r0, [r7, #4]
   1c34c:	6120      	str	r0, [r4, #16]
   1c34e:	2300      	movs	r3, #0
   1c350:	4903      	ldr	r1, [pc, #12]	; (1c360 <bt_conn_set_state+0x300>)
   1c352:	4620      	mov	r0, r4
   1c354:	f00b fd43 	bl	27dde <z_log_msg_finalize>
		break;
   1c358:	e6f0      	b.n	1c13c <bt_conn_set_state+0xdc>
   1c35a:	bf00      	nop
   1c35c:	0002ff20 	.word	0x0002ff20
   1c360:	0002de80 	.word	0x0002de80
   1c364:	20000918 	.word	0x20000918
   1c368:	0002ff34 	.word	0x0002ff34
   1c36c:	20000370 	.word	0x20000370
   1c370:	0002ff4c 	.word	0x0002ff4c

0001c374 <bt_conn_index>:
		index = conn - acl_conns;
   1c374:	4b03      	ldr	r3, [pc, #12]	; (1c384 <bt_conn_index+0x10>)
   1c376:	1ac0      	subs	r0, r0, r3
   1c378:	1180      	asrs	r0, r0, #6
   1c37a:	4b03      	ldr	r3, [pc, #12]	; (1c388 <bt_conn_index+0x14>)
   1c37c:	fb03 f000 	mul.w	r0, r3, r0
}
   1c380:	b2c0      	uxtb	r0, r0
   1c382:	4770      	bx	lr
   1c384:	200022c8 	.word	0x200022c8
   1c388:	aaaaaaab 	.word	0xaaaaaaab

0001c38c <bt_conn_create_pdu_timeout>:
{
   1c38c:	b530      	push	{r4, r5, lr}
   1c38e:	b083      	sub	sp, #12
   1c390:	460c      	mov	r4, r1
	if (!pool) {
   1c392:	4601      	mov	r1, r0
   1c394:	b158      	cbz	r0, 1c3ae <bt_conn_create_pdu_timeout+0x22>
	return net_buf_alloc_fixed(pool, timeout);
   1c396:	4608      	mov	r0, r1
   1c398:	f00e fdec 	bl	2af74 <net_buf_alloc_fixed>
	if (!buf) {
   1c39c:	4605      	mov	r5, r0
   1c39e:	b140      	cbz	r0, 1c3b2 <bt_conn_create_pdu_timeout+0x26>
	net_buf_simple_reserve(&buf->b, reserve);
   1c3a0:	1d21      	adds	r1, r4, #4
   1c3a2:	300c      	adds	r0, #12
   1c3a4:	f00e fdf7 	bl	2af96 <net_buf_simple_reserve>
}
   1c3a8:	4628      	mov	r0, r5
   1c3aa:	b003      	add	sp, #12
   1c3ac:	bd30      	pop	{r4, r5, pc}
		pool = &acl_tx_pool;
   1c3ae:	4919      	ldr	r1, [pc, #100]	; (1c414 <bt_conn_create_pdu_timeout+0x88>)
   1c3b0:	e7f1      	b.n	1c396 <bt_conn_create_pdu_timeout+0xa>
		LOG_WRN("Unable to allocate buffer within timeout");
   1c3b2:	2006      	movs	r0, #6
   1c3b4:	f7f9 fd08 	bl	15dc8 <z_log_msg_alloc>
   1c3b8:	2200      	movs	r2, #0
   1c3ba:	f36f 0200 	bfc	r2, #0, #1
   1c3be:	f36f 0241 	bfc	r2, #1, #1
   1c3c2:	f36f 0282 	bfc	r2, #2, #1
   1c3c6:	f36f 02c5 	bfc	r2, #3, #3
   1c3ca:	2302      	movs	r3, #2
   1c3cc:	f363 1288 	bfi	r2, r3, #6, #3
   1c3d0:	2308      	movs	r3, #8
   1c3d2:	f363 2252 	bfi	r2, r3, #9, #10
   1c3d6:	f36f 42de 	bfc	r2, #19, #12
   1c3da:	f36f 72df 	bfc	r2, #31, #1
   1c3de:	4604      	mov	r4, r0
   1c3e0:	b188      	cbz	r0, 1c406 <bt_conn_create_pdu_timeout+0x7a>
   1c3e2:	f110 0310 	adds.w	r3, r0, #16
   1c3e6:	d001      	beq.n	1c3ec <bt_conn_create_pdu_timeout+0x60>
   1c3e8:	490b      	ldr	r1, [pc, #44]	; (1c418 <bt_conn_create_pdu_timeout+0x8c>)
   1c3ea:	6141      	str	r1, [r0, #20]
   1c3ec:	b15b      	cbz	r3, 1c406 <bt_conn_create_pdu_timeout+0x7a>
   1c3ee:	2302      	movs	r3, #2
   1c3f0:	f88d 3004 	strb.w	r3, [sp, #4]
   1c3f4:	2300      	movs	r3, #0
   1c3f6:	f88d 3005 	strb.w	r3, [sp, #5]
   1c3fa:	f88d 3006 	strb.w	r3, [sp, #6]
   1c3fe:	f88d 3007 	strb.w	r3, [sp, #7]
   1c402:	9801      	ldr	r0, [sp, #4]
   1c404:	6120      	str	r0, [r4, #16]
   1c406:	2300      	movs	r3, #0
   1c408:	4904      	ldr	r1, [pc, #16]	; (1c41c <bt_conn_create_pdu_timeout+0x90>)
   1c40a:	4620      	mov	r0, r4
   1c40c:	f00b fce7 	bl	27dde <z_log_msg_finalize>
		return NULL;
   1c410:	e7ca      	b.n	1c3a8 <bt_conn_create_pdu_timeout+0x1c>
   1c412:	bf00      	nop
   1c414:	20000c44 	.word	0x20000c44
   1c418:	0002ff68 	.word	0x0002ff68
   1c41c:	0002de80 	.word	0x0002de80

0001c420 <notify_le_param_updated>:
{
   1c420:	b570      	push	{r4, r5, r6, lr}
   1c422:	4604      	mov	r4, r0
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   1c424:	1d05      	adds	r5, r0, #4
   1c426:	2109      	movs	r1, #9
   1c428:	4628      	mov	r0, r5
   1c42a:	f00c fc73 	bl	28d14 <atomic_test_bit>
   1c42e:	b178      	cbz	r0, 1c450 <notify_le_param_updated+0x30>
	    conn->le.interval >= conn->le.interval_min &&
   1c430:	f8b4 309e 	ldrh.w	r3, [r4, #158]	; 0x9e
   1c434:	f8b4 20a0 	ldrh.w	r2, [r4, #160]	; 0xa0
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   1c438:	4293      	cmp	r3, r2
   1c43a:	d309      	bcc.n	1c450 <notify_le_param_updated+0x30>
	    conn->le.interval <= conn->le.interval_max &&
   1c43c:	f8b4 20a2 	ldrh.w	r2, [r4, #162]	; 0xa2
	    conn->le.interval >= conn->le.interval_min &&
   1c440:	4293      	cmp	r3, r2
   1c442:	d805      	bhi.n	1c450 <notify_le_param_updated+0x30>
	    conn->le.latency == conn->le.pending_latency &&
   1c444:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
   1c448:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   1c44c:	429a      	cmp	r2, r3
   1c44e:	d002      	beq.n	1c456 <notify_le_param_updated+0x36>
	for (cb = callback_list; cb; cb = cb->_next) {
   1c450:	4b18      	ldr	r3, [pc, #96]	; (1c4b4 <notify_le_param_updated+0x94>)
   1c452:	681d      	ldr	r5, [r3, #0]
   1c454:	e015      	b.n	1c482 <notify_le_param_updated+0x62>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1c456:	f3bf 8f5b 	dmb	ish
   1c45a:	e855 3f00 	ldrex	r3, [r5]
   1c45e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
   1c462:	e845 3200 	strex	r2, r3, [r5]
   1c466:	2a00      	cmp	r2, #0
   1c468:	d1f7      	bne.n	1c45a <notify_le_param_updated+0x3a>
   1c46a:	f3bf 8f5b 	dmb	ish
}
   1c46e:	e7ef      	b.n	1c450 <notify_le_param_updated+0x30>
			cb->le_param_updated(conn, conn->le.interval,
   1c470:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   1c474:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   1c478:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   1c47c:	4620      	mov	r0, r4
   1c47e:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   1c480:	692d      	ldr	r5, [r5, #16]
   1c482:	b11d      	cbz	r5, 1c48c <notify_le_param_updated+0x6c>
		if (cb->le_param_updated) {
   1c484:	68ee      	ldr	r6, [r5, #12]
   1c486:	2e00      	cmp	r6, #0
   1c488:	d1f2      	bne.n	1c470 <notify_le_param_updated+0x50>
   1c48a:	e7f9      	b.n	1c480 <notify_le_param_updated+0x60>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1c48c:	4d0a      	ldr	r5, [pc, #40]	; (1c4b8 <notify_le_param_updated+0x98>)
   1c48e:	e000      	b.n	1c492 <notify_le_param_updated+0x72>
   1c490:	3514      	adds	r5, #20
   1c492:	4b0a      	ldr	r3, [pc, #40]	; (1c4bc <notify_le_param_updated+0x9c>)
   1c494:	429d      	cmp	r5, r3
   1c496:	d20b      	bcs.n	1c4b0 <notify_le_param_updated+0x90>
		if (cb->le_param_updated) {
   1c498:	68ee      	ldr	r6, [r5, #12]
   1c49a:	2e00      	cmp	r6, #0
   1c49c:	d0f8      	beq.n	1c490 <notify_le_param_updated+0x70>
			cb->le_param_updated(conn, conn->le.interval,
   1c49e:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   1c4a2:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   1c4a6:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   1c4aa:	4620      	mov	r0, r4
   1c4ac:	47b0      	blx	r6
   1c4ae:	e7ef      	b.n	1c490 <notify_le_param_updated+0x70>
}
   1c4b0:	bd70      	pop	{r4, r5, r6, pc}
   1c4b2:	bf00      	nop
   1c4b4:	20007cb0 	.word	0x20007cb0
   1c4b8:	0002de44 	.word	0x0002de44
   1c4bc:	0002de58 	.word	0x0002de58

0001c4c0 <le_param_req>:
{
   1c4c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c4c2:	4606      	mov	r6, r0
   1c4c4:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   1c4c6:	4608      	mov	r0, r1
   1c4c8:	f00c fad9 	bl	28a7e <bt_le_conn_params_valid>
   1c4cc:	4607      	mov	r7, r0
   1c4ce:	b338      	cbz	r0, 1c520 <le_param_req+0x60>
	for (cb = callback_list; cb; cb = cb->_next) {
   1c4d0:	4b15      	ldr	r3, [pc, #84]	; (1c528 <le_param_req+0x68>)
   1c4d2:	681c      	ldr	r4, [r3, #0]
   1c4d4:	e000      	b.n	1c4d8 <le_param_req+0x18>
   1c4d6:	6924      	ldr	r4, [r4, #16]
   1c4d8:	b16c      	cbz	r4, 1c4f6 <le_param_req+0x36>
		if (!cb->le_param_req) {
   1c4da:	68a3      	ldr	r3, [r4, #8]
   1c4dc:	2b00      	cmp	r3, #0
   1c4de:	d0fa      	beq.n	1c4d6 <le_param_req+0x16>
		if (!cb->le_param_req(conn, param)) {
   1c4e0:	4629      	mov	r1, r5
   1c4e2:	4630      	mov	r0, r6
   1c4e4:	4798      	blx	r3
   1c4e6:	b1d0      	cbz	r0, 1c51e <le_param_req+0x5e>
		if (!bt_le_conn_params_valid(param)) {
   1c4e8:	4628      	mov	r0, r5
   1c4ea:	f00c fac8 	bl	28a7e <bt_le_conn_params_valid>
   1c4ee:	2800      	cmp	r0, #0
   1c4f0:	d1f1      	bne.n	1c4d6 <le_param_req+0x16>
			return false;
   1c4f2:	4607      	mov	r7, r0
   1c4f4:	e014      	b.n	1c520 <le_param_req+0x60>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1c4f6:	4c0d      	ldr	r4, [pc, #52]	; (1c52c <le_param_req+0x6c>)
   1c4f8:	e000      	b.n	1c4fc <le_param_req+0x3c>
   1c4fa:	3414      	adds	r4, #20
   1c4fc:	4b0c      	ldr	r3, [pc, #48]	; (1c530 <le_param_req+0x70>)
   1c4fe:	429c      	cmp	r4, r3
   1c500:	d20e      	bcs.n	1c520 <le_param_req+0x60>
		if (!cb->le_param_req) {
   1c502:	68a3      	ldr	r3, [r4, #8]
   1c504:	2b00      	cmp	r3, #0
   1c506:	d0f8      	beq.n	1c4fa <le_param_req+0x3a>
		if (!cb->le_param_req(conn, param)) {
   1c508:	4629      	mov	r1, r5
   1c50a:	4630      	mov	r0, r6
   1c50c:	4798      	blx	r3
   1c50e:	b148      	cbz	r0, 1c524 <le_param_req+0x64>
		if (!bt_le_conn_params_valid(param)) {
   1c510:	4628      	mov	r0, r5
   1c512:	f00c fab4 	bl	28a7e <bt_le_conn_params_valid>
   1c516:	2800      	cmp	r0, #0
   1c518:	d1ef      	bne.n	1c4fa <le_param_req+0x3a>
			return false;
   1c51a:	4607      	mov	r7, r0
   1c51c:	e000      	b.n	1c520 <le_param_req+0x60>
			return false;
   1c51e:	4607      	mov	r7, r0
}
   1c520:	4638      	mov	r0, r7
   1c522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return false;
   1c524:	4607      	mov	r7, r0
   1c526:	e7fb      	b.n	1c520 <le_param_req+0x60>
   1c528:	20007cb0 	.word	0x20007cb0
   1c52c:	0002de44 	.word	0x0002de44
   1c530:	0002de58 	.word	0x0002de58

0001c534 <bt_conn_lookup_addr_le>:
{
   1c534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c536:	4607      	mov	r7, r0
   1c538:	460e      	mov	r6, r1
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   1c53a:	2400      	movs	r4, #0
   1c53c:	e002      	b.n	1c544 <bt_conn_lookup_addr_le+0x10>
			bt_conn_unref(conn);
   1c53e:	f00c fce2 	bl	28f06 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   1c542:	3401      	adds	r4, #1
   1c544:	2c07      	cmp	r4, #7
   1c546:	d817      	bhi.n	1c578 <bt_conn_lookup_addr_le+0x44>
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1c548:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1c54c:	480b      	ldr	r0, [pc, #44]	; (1c57c <bt_conn_lookup_addr_le+0x48>)
   1c54e:	eb00 1083 	add.w	r0, r0, r3, lsl #6
   1c552:	f00c fcb1 	bl	28eb8 <bt_conn_ref>
		if (!conn) {
   1c556:	4605      	mov	r5, r0
   1c558:	2800      	cmp	r0, #0
   1c55a:	d0f2      	beq.n	1c542 <bt_conn_lookup_addr_le+0xe>
		if (conn->type != BT_CONN_TYPE_LE) {
   1c55c:	7883      	ldrb	r3, [r0, #2]
   1c55e:	2b01      	cmp	r3, #1
   1c560:	d1ed      	bne.n	1c53e <bt_conn_lookup_addr_le+0xa>
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   1c562:	4632      	mov	r2, r6
   1c564:	4639      	mov	r1, r7
   1c566:	f00c fd28 	bl	28fba <bt_conn_is_peer_addr_le>
   1c56a:	b108      	cbz	r0, 1c570 <bt_conn_lookup_addr_le+0x3c>
}
   1c56c:	4628      	mov	r0, r5
   1c56e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			bt_conn_unref(conn);
   1c570:	4628      	mov	r0, r5
   1c572:	f00c fcc8 	bl	28f06 <bt_conn_unref>
			continue;
   1c576:	e7e4      	b.n	1c542 <bt_conn_lookup_addr_le+0xe>
	return NULL;
   1c578:	2500      	movs	r5, #0
   1c57a:	e7f7      	b.n	1c56c <bt_conn_lookup_addr_le+0x38>
   1c57c:	200022c8 	.word	0x200022c8

0001c580 <bt_conn_lookup_state_le>:
{
   1c580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c584:	4607      	mov	r7, r0
   1c586:	460e      	mov	r6, r1
   1c588:	4690      	mov	r8, r2
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   1c58a:	2400      	movs	r4, #0
   1c58c:	e00a      	b.n	1c5a4 <bt_conn_lookup_state_le+0x24>
			bt_conn_unref(conn);
   1c58e:	f00c fcba 	bl	28f06 <bt_conn_unref>
			continue;
   1c592:	e006      	b.n	1c5a2 <bt_conn_lookup_state_le+0x22>
			bt_conn_unref(conn);
   1c594:	4628      	mov	r0, r5
   1c596:	f00c fcb6 	bl	28f06 <bt_conn_unref>
			continue;
   1c59a:	e002      	b.n	1c5a2 <bt_conn_lookup_state_le+0x22>
			bt_conn_unref(conn);
   1c59c:	4628      	mov	r0, r5
   1c59e:	f00c fcb2 	bl	28f06 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   1c5a2:	3401      	adds	r4, #1
   1c5a4:	2c07      	cmp	r4, #7
   1c5a6:	d81c      	bhi.n	1c5e2 <bt_conn_lookup_state_le+0x62>
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1c5a8:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1c5ac:	480e      	ldr	r0, [pc, #56]	; (1c5e8 <bt_conn_lookup_state_le+0x68>)
   1c5ae:	eb00 1083 	add.w	r0, r0, r3, lsl #6
   1c5b2:	f00c fc81 	bl	28eb8 <bt_conn_ref>
		if (!conn) {
   1c5b6:	4605      	mov	r5, r0
   1c5b8:	2800      	cmp	r0, #0
   1c5ba:	d0f2      	beq.n	1c5a2 <bt_conn_lookup_state_le+0x22>
		if (conn->type != BT_CONN_TYPE_LE) {
   1c5bc:	7883      	ldrb	r3, [r0, #2]
   1c5be:	2b01      	cmp	r3, #1
   1c5c0:	d1e5      	bne.n	1c58e <bt_conn_lookup_state_le+0xe>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   1c5c2:	b12e      	cbz	r6, 1c5d0 <bt_conn_lookup_state_le+0x50>
   1c5c4:	4632      	mov	r2, r6
   1c5c6:	4639      	mov	r1, r7
   1c5c8:	f00c fcf7 	bl	28fba <bt_conn_is_peer_addr_le>
   1c5cc:	2800      	cmp	r0, #0
   1c5ce:	d0e1      	beq.n	1c594 <bt_conn_lookup_state_le+0x14>
		if (!(conn->state == state && conn->id == id)) {
   1c5d0:	7aab      	ldrb	r3, [r5, #10]
   1c5d2:	4543      	cmp	r3, r8
   1c5d4:	d1e2      	bne.n	1c59c <bt_conn_lookup_state_le+0x1c>
   1c5d6:	7a2b      	ldrb	r3, [r5, #8]
   1c5d8:	42bb      	cmp	r3, r7
   1c5da:	d1df      	bne.n	1c59c <bt_conn_lookup_state_le+0x1c>
}
   1c5dc:	4628      	mov	r0, r5
   1c5de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return NULL;
   1c5e2:	2500      	movs	r5, #0
   1c5e4:	e7fa      	b.n	1c5dc <bt_conn_lookup_state_le+0x5c>
   1c5e6:	bf00      	nop
   1c5e8:	200022c8 	.word	0x200022c8

0001c5ec <bt_conn_le_create_auto>:

#if defined(CONFIG_BT_FILTER_ACCEPT_LIST)
int bt_conn_le_create_auto(const struct bt_conn_le_create_param *create_param,
			   const struct bt_le_conn_param *param)
{
   1c5ec:	b570      	push	{r4, r5, r6, lr}
   1c5ee:	b082      	sub	sp, #8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c5f0:	f3bf 8f5b 	dmb	ish
   1c5f4:	4b52      	ldr	r3, [pc, #328]	; (1c740 <bt_conn_le_create_auto+0x154>)
   1c5f6:	681b      	ldr	r3, [r3, #0]
   1c5f8:	f3bf 8f5b 	dmb	ish
	struct bt_conn *conn;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1c5fc:	f013 0f04 	tst.w	r3, #4
   1c600:	f000 808b 	beq.w	1c71a <bt_conn_le_create_auto+0x12e>
   1c604:	4606      	mov	r6, r0
   1c606:	460d      	mov	r5, r1
		return -EAGAIN;
	}

	if (!bt_le_conn_params_valid(param)) {
   1c608:	4608      	mov	r0, r1
   1c60a:	f00c fa38 	bl	28a7e <bt_le_conn_params_valid>
   1c60e:	2800      	cmp	r0, #0
   1c610:	f000 8086 	beq.w	1c720 <bt_conn_le_create_auto+0x134>
		return -EINVAL;
	}

	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, BT_ADDR_LE_NONE,
   1c614:	2203      	movs	r2, #3
   1c616:	494b      	ldr	r1, [pc, #300]	; (1c744 <bt_conn_le_create_auto+0x158>)
   1c618:	2000      	movs	r0, #0
   1c61a:	f7ff ffb1 	bl	1c580 <bt_conn_lookup_state_le>
				       BT_CONN_CONNECTING_AUTO);
	if (conn) {
   1c61e:	2800      	cmp	r0, #0
   1c620:	d13e      	bne.n	1c6a0 <bt_conn_le_create_auto+0xb4>
   1c622:	f3bf 8f5b 	dmb	ish
   1c626:	4b46      	ldr	r3, [pc, #280]	; (1c740 <bt_conn_le_create_auto+0x154>)
   1c628:	681b      	ldr	r3, [r3, #0]
   1c62a:	f3bf 8f5b 	dmb	ish
	}

	/* Scanning either to connect or explicit scan, either case scanner was
	 * started by application and should not be stopped.
	 */
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   1c62e:	f013 0f40 	tst.w	r3, #64	; 0x40
   1c632:	d178      	bne.n	1c726 <bt_conn_le_create_auto+0x13a>
   1c634:	f3bf 8f5b 	dmb	ish
   1c638:	4b41      	ldr	r3, [pc, #260]	; (1c740 <bt_conn_le_create_auto+0x154>)
   1c63a:	681b      	ldr	r3, [r3, #0]
   1c63c:	f3bf 8f5b 	dmb	ish
		return -EINVAL;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING)) {
   1c640:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   1c644:	d172      	bne.n	1c72c <bt_conn_le_create_auto+0x140>
		return -EINVAL;
	}

	if (!bt_id_scan_random_addr_check()) {
   1c646:	f00c fa9c 	bl	28b82 <bt_id_scan_random_addr_check>
   1c64a:	2800      	cmp	r0, #0
   1c64c:	d071      	beq.n	1c732 <bt_conn_le_create_auto+0x146>
		return -EINVAL;
	}

	conn = bt_conn_add_le(BT_ID_DEFAULT, BT_ADDR_LE_NONE);
   1c64e:	493d      	ldr	r1, [pc, #244]	; (1c744 <bt_conn_le_create_auto+0x158>)
   1c650:	2000      	movs	r0, #0
   1c652:	f00c fc9b 	bl	28f8c <bt_conn_add_le>
	if (!conn) {
   1c656:	4604      	mov	r4, r0
   1c658:	2800      	cmp	r0, #0
   1c65a:	d06d      	beq.n	1c738 <bt_conn_le_create_auto+0x14c>
		return -ENOMEM;
	}

	bt_conn_set_param_le(conn, param);
   1c65c:	4629      	mov	r1, r5
   1c65e:	f00c fafb 	bl	28c58 <bt_conn_set_param_le>
	create_param_setup(create_param);
   1c662:	4630      	mov	r0, r6
   1c664:	f7ff f986 	bl	1b974 <create_param_setup>

	atomic_set_bit(conn->flags, BT_CONN_AUTO_CONNECT);
   1c668:	1d23      	adds	r3, r4, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1c66a:	f3bf 8f5b 	dmb	ish
   1c66e:	e853 1f00 	ldrex	r1, [r3]
   1c672:	f041 0101 	orr.w	r1, r1, #1
   1c676:	e843 1200 	strex	r2, r1, [r3]
   1c67a:	2a00      	cmp	r2, #0
   1c67c:	d1f7      	bne.n	1c66e <bt_conn_le_create_auto+0x82>
   1c67e:	f3bf 8f5b 	dmb	ish
	bt_conn_set_state(conn, BT_CONN_CONNECTING_AUTO);
   1c682:	2103      	movs	r1, #3
   1c684:	4620      	mov	r0, r4
   1c686:	f7ff fceb 	bl	1c060 <bt_conn_set_state>

	err = bt_le_create_conn(conn);
   1c68a:	4620      	mov	r0, r4
   1c68c:	f00c f98e 	bl	289ac <bt_le_create_conn>
	if (err) {
   1c690:	4605      	mov	r5, r0
   1c692:	b950      	cbnz	r0, 1c6aa <bt_conn_le_create_auto+0xbe>
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
   1c694:	4620      	mov	r0, r4
   1c696:	f00c fc36 	bl	28f06 <bt_conn_unref>
	return 0;
}
   1c69a:	4628      	mov	r0, r5
   1c69c:	b002      	add	sp, #8
   1c69e:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_unref(conn);
   1c6a0:	f00c fc31 	bl	28f06 <bt_conn_unref>
		return -EALREADY;
   1c6a4:	f06f 0577 	mvn.w	r5, #119	; 0x77
   1c6a8:	e7f7      	b.n	1c69a <bt_conn_le_create_auto+0xae>
		LOG_ERR("Failed to start filtered scan");
   1c6aa:	2006      	movs	r0, #6
   1c6ac:	f7f9 fb8c 	bl	15dc8 <z_log_msg_alloc>
   1c6b0:	2200      	movs	r2, #0
   1c6b2:	f36f 0200 	bfc	r2, #0, #1
   1c6b6:	f36f 0241 	bfc	r2, #1, #1
   1c6ba:	f36f 0282 	bfc	r2, #2, #1
   1c6be:	f36f 02c5 	bfc	r2, #3, #3
   1c6c2:	2301      	movs	r3, #1
   1c6c4:	f363 1288 	bfi	r2, r3, #6, #3
   1c6c8:	2308      	movs	r3, #8
   1c6ca:	f363 2252 	bfi	r2, r3, #9, #10
   1c6ce:	f36f 42de 	bfc	r2, #19, #12
   1c6d2:	f36f 72df 	bfc	r2, #31, #1
   1c6d6:	4606      	mov	r6, r0
   1c6d8:	b188      	cbz	r0, 1c6fe <bt_conn_le_create_auto+0x112>
   1c6da:	f110 0310 	adds.w	r3, r0, #16
   1c6de:	d001      	beq.n	1c6e4 <bt_conn_le_create_auto+0xf8>
   1c6e0:	4919      	ldr	r1, [pc, #100]	; (1c748 <bt_conn_le_create_auto+0x15c>)
   1c6e2:	6141      	str	r1, [r0, #20]
   1c6e4:	b15b      	cbz	r3, 1c6fe <bt_conn_le_create_auto+0x112>
   1c6e6:	2302      	movs	r3, #2
   1c6e8:	f88d 3004 	strb.w	r3, [sp, #4]
   1c6ec:	2300      	movs	r3, #0
   1c6ee:	f88d 3005 	strb.w	r3, [sp, #5]
   1c6f2:	f88d 3006 	strb.w	r3, [sp, #6]
   1c6f6:	f88d 3007 	strb.w	r3, [sp, #7]
   1c6fa:	9801      	ldr	r0, [sp, #4]
   1c6fc:	6130      	str	r0, [r6, #16]
   1c6fe:	2300      	movs	r3, #0
   1c700:	4912      	ldr	r1, [pc, #72]	; (1c74c <bt_conn_le_create_auto+0x160>)
   1c702:	4630      	mov	r0, r6
   1c704:	f00b fb6b 	bl	27dde <z_log_msg_finalize>
		conn->err = 0;
   1c708:	2100      	movs	r1, #0
   1c70a:	7261      	strb	r1, [r4, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1c70c:	4620      	mov	r0, r4
   1c70e:	f7ff fca7 	bl	1c060 <bt_conn_set_state>
		bt_conn_unref(conn);
   1c712:	4620      	mov	r0, r4
   1c714:	f00c fbf7 	bl	28f06 <bt_conn_unref>
		return err;
   1c718:	e7bf      	b.n	1c69a <bt_conn_le_create_auto+0xae>
		return -EAGAIN;
   1c71a:	f06f 050a 	mvn.w	r5, #10
   1c71e:	e7bc      	b.n	1c69a <bt_conn_le_create_auto+0xae>
		return -EINVAL;
   1c720:	f06f 0515 	mvn.w	r5, #21
   1c724:	e7b9      	b.n	1c69a <bt_conn_le_create_auto+0xae>
		return -EINVAL;
   1c726:	f06f 0515 	mvn.w	r5, #21
   1c72a:	e7b6      	b.n	1c69a <bt_conn_le_create_auto+0xae>
		return -EINVAL;
   1c72c:	f06f 0515 	mvn.w	r5, #21
   1c730:	e7b3      	b.n	1c69a <bt_conn_le_create_auto+0xae>
		return -EINVAL;
   1c732:	f06f 0515 	mvn.w	r5, #21
   1c736:	e7b0      	b.n	1c69a <bt_conn_le_create_auto+0xae>
		return -ENOMEM;
   1c738:	f06f 050b 	mvn.w	r5, #11
   1c73c:	e7ad      	b.n	1c69a <bt_conn_le_create_auto+0xae>
   1c73e:	bf00      	nop
   1c740:	2000043c 	.word	0x2000043c
   1c744:	0002f540 	.word	0x0002f540
   1c748:	0002ff94 	.word	0x0002ff94
   1c74c:	0002de80 	.word	0x0002de80

0001c750 <bt_conn_create_auto_stop>:

int bt_conn_create_auto_stop(void)
{
   1c750:	b510      	push	{r4, lr}
   1c752:	b082      	sub	sp, #8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c754:	f3bf 8f5b 	dmb	ish
   1c758:	4b2f      	ldr	r3, [pc, #188]	; (1c818 <bt_conn_create_auto_stop+0xc8>)
   1c75a:	681b      	ldr	r3, [r3, #0]
   1c75c:	f3bf 8f5b 	dmb	ish
	struct bt_conn *conn;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1c760:	f013 0f04 	tst.w	r3, #4
   1c764:	d04e      	beq.n	1c804 <bt_conn_create_auto_stop+0xb4>
		return -EINVAL;
	}

	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, BT_ADDR_LE_NONE,
   1c766:	2203      	movs	r2, #3
   1c768:	492c      	ldr	r1, [pc, #176]	; (1c81c <bt_conn_create_auto_stop+0xcc>)
   1c76a:	2000      	movs	r0, #0
   1c76c:	f7ff ff08 	bl	1c580 <bt_conn_lookup_state_le>
				       BT_CONN_CONNECTING_AUTO);
	if (!conn) {
   1c770:	4604      	mov	r4, r0
   1c772:	2800      	cmp	r0, #0
   1c774:	d049      	beq.n	1c80a <bt_conn_create_auto_stop+0xba>
   1c776:	f3bf 8f5b 	dmb	ish
   1c77a:	4b27      	ldr	r3, [pc, #156]	; (1c818 <bt_conn_create_auto_stop+0xc8>)
   1c77c:	681b      	ldr	r3, [r3, #0]
   1c77e:	f3bf 8f5b 	dmb	ish
		return -EINVAL;
	}

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING)) {
   1c782:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   1c786:	d043      	beq.n	1c810 <bt_conn_create_auto_stop+0xc0>
		return -EINVAL;
	}

	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1c788:	2100      	movs	r1, #0
   1c78a:	f7ff fc69 	bl	1c060 <bt_conn_set_state>
	bt_conn_unref(conn);
   1c78e:	4620      	mov	r0, r4
   1c790:	f00c fbb9 	bl	28f06 <bt_conn_unref>

	err = bt_le_create_conn_cancel();
   1c794:	f7fd fb8e 	bl	19eb4 <bt_le_create_conn_cancel>
	if (err) {
   1c798:	4604      	mov	r4, r0
   1c79a:	b910      	cbnz	r0, 1c7a2 <bt_conn_create_auto_stop+0x52>
		LOG_ERR("Failed to stop initiator");
		return err;
	}

	return 0;
}
   1c79c:	4620      	mov	r0, r4
   1c79e:	b002      	add	sp, #8
   1c7a0:	bd10      	pop	{r4, pc}
		LOG_ERR("Failed to stop initiator");
   1c7a2:	2006      	movs	r0, #6
   1c7a4:	f7f9 fb10 	bl	15dc8 <z_log_msg_alloc>
   1c7a8:	2200      	movs	r2, #0
   1c7aa:	f36f 0200 	bfc	r2, #0, #1
   1c7ae:	f36f 0241 	bfc	r2, #1, #1
   1c7b2:	f36f 0282 	bfc	r2, #2, #1
   1c7b6:	f36f 02c5 	bfc	r2, #3, #3
   1c7ba:	2301      	movs	r3, #1
   1c7bc:	f363 1288 	bfi	r2, r3, #6, #3
   1c7c0:	2308      	movs	r3, #8
   1c7c2:	f363 2252 	bfi	r2, r3, #9, #10
   1c7c6:	f36f 42de 	bfc	r2, #19, #12
   1c7ca:	f36f 72df 	bfc	r2, #31, #1
   1c7ce:	4684      	mov	ip, r0
   1c7d0:	b190      	cbz	r0, 1c7f8 <bt_conn_create_auto_stop+0xa8>
   1c7d2:	f110 0310 	adds.w	r3, r0, #16
   1c7d6:	d001      	beq.n	1c7dc <bt_conn_create_auto_stop+0x8c>
   1c7d8:	4911      	ldr	r1, [pc, #68]	; (1c820 <bt_conn_create_auto_stop+0xd0>)
   1c7da:	6141      	str	r1, [r0, #20]
   1c7dc:	b163      	cbz	r3, 1c7f8 <bt_conn_create_auto_stop+0xa8>
   1c7de:	2302      	movs	r3, #2
   1c7e0:	f88d 3004 	strb.w	r3, [sp, #4]
   1c7e4:	2300      	movs	r3, #0
   1c7e6:	f88d 3005 	strb.w	r3, [sp, #5]
   1c7ea:	f88d 3006 	strb.w	r3, [sp, #6]
   1c7ee:	f88d 3007 	strb.w	r3, [sp, #7]
   1c7f2:	9801      	ldr	r0, [sp, #4]
   1c7f4:	f8cc 0010 	str.w	r0, [ip, #16]
   1c7f8:	2300      	movs	r3, #0
   1c7fa:	490a      	ldr	r1, [pc, #40]	; (1c824 <bt_conn_create_auto_stop+0xd4>)
   1c7fc:	4660      	mov	r0, ip
   1c7fe:	f00b faee 	bl	27dde <z_log_msg_finalize>
		return err;
   1c802:	e7cb      	b.n	1c79c <bt_conn_create_auto_stop+0x4c>
		return -EINVAL;
   1c804:	f06f 0415 	mvn.w	r4, #21
   1c808:	e7c8      	b.n	1c79c <bt_conn_create_auto_stop+0x4c>
		return -EINVAL;
   1c80a:	f06f 0415 	mvn.w	r4, #21
   1c80e:	e7c5      	b.n	1c79c <bt_conn_create_auto_stop+0x4c>
		return -EINVAL;
   1c810:	f06f 0415 	mvn.w	r4, #21
   1c814:	e7c2      	b.n	1c79c <bt_conn_create_auto_stop+0x4c>
   1c816:	bf00      	nop
   1c818:	2000043c 	.word	0x2000043c
   1c81c:	0002f540 	.word	0x0002f540
   1c820:	0002ffb4 	.word	0x0002ffb4
   1c824:	0002de80 	.word	0x0002de80

0001c828 <send_conn_le_param_update>:
{
   1c828:	b538      	push	{r3, r4, r5, lr}
   1c82a:	4604      	mov	r4, r0
   1c82c:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   1c82e:	4608      	mov	r0, r1
   1c830:	f00c f925 	bl	28a7e <bt_le_conn_params_valid>
   1c834:	b350      	cbz	r0, 1c88c <send_conn_le_param_update+0x64>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   1c836:	4b17      	ldr	r3, [pc, #92]	; (1c894 <send_conn_le_param_update+0x6c>)
   1c838:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   1c83c:	f013 0f02 	tst.w	r3, #2
   1c840:	d004      	beq.n	1c84c <send_conn_le_param_update+0x24>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   1c842:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   1c846:	f013 0f02 	tst.w	r3, #2
   1c84a:	d113      	bne.n	1c874 <send_conn_le_param_update+0x4c>
	     (conn->role == BT_HCI_ROLE_CENTRAL)) {
   1c84c:	78e3      	ldrb	r3, [r4, #3]
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   1c84e:	b9c3      	cbnz	r3, 1c882 <send_conn_le_param_update+0x5a>
		rc = bt_conn_le_conn_update(conn, param);
   1c850:	4629      	mov	r1, r5
   1c852:	4620      	mov	r0, r4
   1c854:	f00c fbda 	bl	2900c <bt_conn_le_conn_update>
		if (rc == 0) {
   1c858:	b9b8      	cbnz	r0, 1c88a <send_conn_le_param_update+0x62>
			conn->le.interval_min = param->interval_min;
   1c85a:	882b      	ldrh	r3, [r5, #0]
   1c85c:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
			conn->le.interval_max = param->interval_max;
   1c860:	886b      	ldrh	r3, [r5, #2]
   1c862:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
			conn->le.pending_latency = param->latency;
   1c866:	88ab      	ldrh	r3, [r5, #4]
   1c868:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   1c86c:	88eb      	ldrh	r3, [r5, #6]
   1c86e:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
		return rc;
   1c872:	e00a      	b.n	1c88a <send_conn_le_param_update+0x62>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   1c874:	210a      	movs	r1, #10
   1c876:	1d20      	adds	r0, r4, #4
   1c878:	f00c fa4c 	bl	28d14 <atomic_test_bit>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   1c87c:	2800      	cmp	r0, #0
   1c87e:	d1e5      	bne.n	1c84c <send_conn_le_param_update+0x24>
   1c880:	e7e6      	b.n	1c850 <send_conn_le_param_update+0x28>
	return bt_l2cap_update_conn_param(conn, param);
   1c882:	4629      	mov	r1, r5
   1c884:	4620      	mov	r0, r4
   1c886:	f00c fc8f 	bl	291a8 <bt_l2cap_update_conn_param>
}
   1c88a:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1c88c:	f06f 0015 	mvn.w	r0, #21
   1c890:	e7fb      	b.n	1c88a <send_conn_le_param_update+0x62>
   1c892:	bf00      	nop
   1c894:	20000370 	.word	0x20000370

0001c898 <deferred_work>:
{
   1c898:	b570      	push	{r4, r5, r6, lr}
   1c89a:	b084      	sub	sp, #16
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   1c89c:	f1a0 0558 	sub.w	r5, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   1c8a0:	f810 3c4e 	ldrb.w	r3, [r0, #-78]
   1c8a4:	b1e3      	cbz	r3, 1c8e0 <deferred_work+0x48>
   1c8a6:	4604      	mov	r4, r0
	if (conn->type != BT_CONN_TYPE_LE) {
   1c8a8:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   1c8ac:	2b01      	cmp	r3, #1
   1c8ae:	d115      	bne.n	1c8dc <deferred_work+0x44>
	    conn->role == BT_CONN_ROLE_CENTRAL) {
   1c8b0:	f810 3c55 	ldrb.w	r3, [r0, #-85]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1c8b4:	b1f3      	cbz	r3, 1c8f4 <deferred_work+0x5c>
	if (atomic_test_and_clear_bit(conn->flags,
   1c8b6:	f1a0 0654 	sub.w	r6, r0, #84	; 0x54
   1c8ba:	2109      	movs	r1, #9
   1c8bc:	4630      	mov	r0, r6
   1c8be:	f00c fa0d 	bl	28cdc <atomic_test_and_clear_bit>
   1c8c2:	b9d0      	cbnz	r0, 1c8fa <deferred_work+0x62>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1c8c4:	f3bf 8f5b 	dmb	ish
   1c8c8:	e856 3f00 	ldrex	r3, [r6]
   1c8cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1c8d0:	e846 3200 	strex	r2, r3, [r6]
   1c8d4:	2a00      	cmp	r2, #0
   1c8d6:	d1f7      	bne.n	1c8c8 <deferred_work+0x30>
   1c8d8:	f3bf 8f5b 	dmb	ish
}
   1c8dc:	b004      	add	sp, #16
   1c8de:	bd70      	pop	{r4, r5, r6, pc}
		bt_l2cap_disconnected(conn);
   1c8e0:	4628      	mov	r0, r5
   1c8e2:	f00c fbe8 	bl	290b6 <bt_l2cap_disconnected>
		notify_disconnected(conn);
   1c8e6:	4628      	mov	r0, r5
   1c8e8:	f7ff f822 	bl	1b930 <notify_disconnected>
		bt_conn_unref(conn);
   1c8ec:	4628      	mov	r0, r5
   1c8ee:	f00c fb0a 	bl	28f06 <bt_conn_unref>
		return;
   1c8f2:	e7f3      	b.n	1c8dc <deferred_work+0x44>
		bt_le_create_conn_cancel();
   1c8f4:	f7fd fade 	bl	19eb4 <bt_le_create_conn_cancel>
		return;
   1c8f8:	e7f0      	b.n	1c8dc <deferred_work+0x44>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   1c8fa:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   1c8fe:	f8ad 3008 	strh.w	r3, [sp, #8]
   1c902:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
   1c906:	f8ad 300a 	strh.w	r3, [sp, #10]
   1c90a:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
   1c90e:	f8ad 300c 	strh.w	r3, [sp, #12]
   1c912:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
   1c916:	f8ad 300e 	strh.w	r3, [sp, #14]
		err = send_conn_le_param_update(conn, param);
   1c91a:	a902      	add	r1, sp, #8
   1c91c:	4628      	mov	r0, r5
   1c91e:	f7ff ff83 	bl	1c828 <send_conn_le_param_update>
		if (!err) {
   1c922:	4605      	mov	r5, r0
   1c924:	b960      	cbnz	r0, 1c940 <deferred_work+0xa8>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1c926:	f3bf 8f5b 	dmb	ish
   1c92a:	e856 3f00 	ldrex	r3, [r6]
   1c92e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   1c932:	e846 3200 	strex	r2, r3, [r6]
   1c936:	2a00      	cmp	r2, #0
   1c938:	d1f7      	bne.n	1c92a <deferred_work+0x92>
   1c93a:	f3bf 8f5b 	dmb	ish
   1c93e:	e7c1      	b.n	1c8c4 <deferred_work+0x2c>
			LOG_WRN("Send LE param update failed (err %d)", err);
   1c940:	2008      	movs	r0, #8
   1c942:	f7f9 fa41 	bl	15dc8 <z_log_msg_alloc>
   1c946:	2200      	movs	r2, #0
   1c948:	f36f 0200 	bfc	r2, #0, #1
   1c94c:	f36f 0241 	bfc	r2, #1, #1
   1c950:	f36f 0282 	bfc	r2, #2, #1
   1c954:	f36f 02c5 	bfc	r2, #3, #3
   1c958:	2302      	movs	r3, #2
   1c95a:	f363 1288 	bfi	r2, r3, #6, #3
   1c95e:	230c      	movs	r3, #12
   1c960:	f363 2252 	bfi	r2, r3, #9, #10
   1c964:	f36f 42de 	bfc	r2, #19, #12
   1c968:	f36f 72df 	bfc	r2, #31, #1
   1c96c:	4604      	mov	r4, r0
   1c96e:	b190      	cbz	r0, 1c996 <deferred_work+0xfe>
   1c970:	f110 0310 	adds.w	r3, r0, #16
   1c974:	d002      	beq.n	1c97c <deferred_work+0xe4>
   1c976:	490b      	ldr	r1, [pc, #44]	; (1c9a4 <deferred_work+0x10c>)
   1c978:	6141      	str	r1, [r0, #20]
   1c97a:	6185      	str	r5, [r0, #24]
   1c97c:	b15b      	cbz	r3, 1c996 <deferred_work+0xfe>
   1c97e:	2303      	movs	r3, #3
   1c980:	f88d 3004 	strb.w	r3, [sp, #4]
   1c984:	2300      	movs	r3, #0
   1c986:	f88d 3005 	strb.w	r3, [sp, #5]
   1c98a:	f88d 3006 	strb.w	r3, [sp, #6]
   1c98e:	f88d 3007 	strb.w	r3, [sp, #7]
   1c992:	9801      	ldr	r0, [sp, #4]
   1c994:	6120      	str	r0, [r4, #16]
   1c996:	2300      	movs	r3, #0
   1c998:	4903      	ldr	r1, [pc, #12]	; (1c9a8 <deferred_work+0x110>)
   1c99a:	4620      	mov	r0, r4
   1c99c:	f00b fa1f 	bl	27dde <z_log_msg_finalize>
   1c9a0:	e790      	b.n	1c8c4 <deferred_work+0x2c>
   1c9a2:	bf00      	nop
   1c9a4:	0002ffd0 	.word	0x0002ffd0
   1c9a8:	0002de80 	.word	0x0002de80

0001c9ac <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   1c9ac:	b508      	push	{r3, lr}
   1c9ae:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   1c9b0:	4801      	ldr	r0, [pc, #4]	; (1c9b8 <bt_conn_create_frag_timeout+0xc>)
   1c9b2:	f7ff fceb 	bl	1c38c <bt_conn_create_pdu_timeout>
#endif /* CONFIG_NET_BUF_LOG */
}
   1c9b6:	bd08      	pop	{r3, pc}
   1c9b8:	20000c9c 	.word	0x20000c9c

0001c9bc <create_frag>:
{
   1c9bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c9be:	4606      	mov	r6, r0
   1c9c0:	460d      	mov	r5, r1
		frag = bt_conn_create_frag(0);
   1c9c2:	f04f 32ff 	mov.w	r2, #4294967295
   1c9c6:	f04f 33ff 	mov.w	r3, #4294967295
   1c9ca:	2000      	movs	r0, #0
   1c9cc:	f7ff ffee 	bl	1c9ac <bt_conn_create_frag_timeout>
   1c9d0:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   1c9d2:	7ab3      	ldrb	r3, [r6, #10]
   1c9d4:	2b07      	cmp	r3, #7
   1c9d6:	d11a      	bne.n	1ca0e <create_frag+0x52>
	tx_data(frag)->tx = NULL;
   1c9d8:	2300      	movs	r3, #0
   1c9da:	6183      	str	r3, [r0, #24]
	return bt_dev.le.acl_mtu;
   1c9dc:	4b10      	ldr	r3, [pc, #64]	; (1ca20 <create_frag+0x64>)
   1c9de:	f8b3 60fc 	ldrh.w	r6, [r3, #252]	; 0xfc
	return net_buf_simple_tailroom(&buf->b);
   1c9e2:	f100 070c 	add.w	r7, r0, #12
   1c9e6:	4638      	mov	r0, r7
   1c9e8:	f00e fb98 	bl	2b11c <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   1c9ec:	4286      	cmp	r6, r0
   1c9ee:	d212      	bcs.n	1ca16 <create_frag+0x5a>
	return bt_dev.le.acl_mtu;
   1c9f0:	4b0b      	ldr	r3, [pc, #44]	; (1ca20 <create_frag+0x64>)
   1c9f2:	f8b3 60fc 	ldrh.w	r6, [r3, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1c9f6:	4632      	mov	r2, r6
   1c9f8:	f855 1f0c 	ldr.w	r1, [r5, #12]!
   1c9fc:	4638      	mov	r0, r7
   1c9fe:	f00e fb4d 	bl	2b09c <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   1ca02:	4631      	mov	r1, r6
   1ca04:	4628      	mov	r0, r5
   1ca06:	f00e fb65 	bl	2b0d4 <net_buf_simple_pull>
}
   1ca0a:	4620      	mov	r0, r4
   1ca0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		net_buf_unref(frag);
   1ca0e:	f00e faf8 	bl	2b002 <net_buf_unref>
		return NULL;
   1ca12:	2400      	movs	r4, #0
   1ca14:	e7f9      	b.n	1ca0a <create_frag+0x4e>
	return net_buf_simple_tailroom(&buf->b);
   1ca16:	4638      	mov	r0, r7
   1ca18:	f00e fb80 	bl	2b11c <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   1ca1c:	b286      	uxth	r6, r0
   1ca1e:	e7ea      	b.n	1c9f6 <create_frag+0x3a>
   1ca20:	20000370 	.word	0x20000370

0001ca24 <send_buf>:
{
   1ca24:	b538      	push	{r3, r4, r5, lr}
   1ca26:	4605      	mov	r5, r0
   1ca28:	460c      	mov	r4, r1
	if (buf->len <= conn_mtu(conn)) {
   1ca2a:	8a0b      	ldrh	r3, [r1, #16]
	return bt_dev.le.acl_mtu;
   1ca2c:	4a1b      	ldr	r2, [pc, #108]	; (1ca9c <send_buf+0x78>)
   1ca2e:	f8b2 20fc 	ldrh.w	r2, [r2, #252]	; 0xfc
	if (buf->len <= conn_mtu(conn)) {
   1ca32:	429a      	cmp	r2, r3
   1ca34:	d21f      	bcs.n	1ca76 <send_buf+0x52>
	frag = create_frag(conn, buf);
   1ca36:	f7ff ffc1 	bl	1c9bc <create_frag>
	if (!frag) {
   1ca3a:	4601      	mov	r1, r0
   1ca3c:	b350      	cbz	r0, 1ca94 <send_buf+0x70>
	if (!send_frag(conn, frag, FRAG_START, true)) {
   1ca3e:	2301      	movs	r3, #1
   1ca40:	2200      	movs	r2, #0
   1ca42:	4628      	mov	r0, r5
   1ca44:	f7fe ffda 	bl	1b9fc <send_frag>
   1ca48:	4603      	mov	r3, r0
   1ca4a:	b1c8      	cbz	r0, 1ca80 <send_buf+0x5c>
	while (buf->len > conn_mtu(conn)) {
   1ca4c:	8a23      	ldrh	r3, [r4, #16]
	return bt_dev.le.acl_mtu;
   1ca4e:	4a13      	ldr	r2, [pc, #76]	; (1ca9c <send_buf+0x78>)
   1ca50:	f8b2 20fc 	ldrh.w	r2, [r2, #252]	; 0xfc
	while (buf->len > conn_mtu(conn)) {
   1ca54:	429a      	cmp	r2, r3
   1ca56:	d215      	bcs.n	1ca84 <send_buf+0x60>
		frag = create_frag(conn, buf);
   1ca58:	4621      	mov	r1, r4
   1ca5a:	4628      	mov	r0, r5
   1ca5c:	f7ff ffae 	bl	1c9bc <create_frag>
		if (!frag) {
   1ca60:	4601      	mov	r1, r0
   1ca62:	b1c8      	cbz	r0, 1ca98 <send_buf+0x74>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   1ca64:	2301      	movs	r3, #1
   1ca66:	461a      	mov	r2, r3
   1ca68:	4628      	mov	r0, r5
   1ca6a:	f7fe ffc7 	bl	1b9fc <send_frag>
   1ca6e:	4603      	mov	r3, r0
   1ca70:	2800      	cmp	r0, #0
   1ca72:	d1eb      	bne.n	1ca4c <send_buf+0x28>
   1ca74:	e004      	b.n	1ca80 <send_buf+0x5c>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   1ca76:	2300      	movs	r3, #0
   1ca78:	2202      	movs	r2, #2
   1ca7a:	f7fe ffbf 	bl	1b9fc <send_frag>
   1ca7e:	4603      	mov	r3, r0
}
   1ca80:	4618      	mov	r0, r3
   1ca82:	bd38      	pop	{r3, r4, r5, pc}
	return send_frag(conn, buf, FRAG_END, false);
   1ca84:	2300      	movs	r3, #0
   1ca86:	2203      	movs	r2, #3
   1ca88:	4621      	mov	r1, r4
   1ca8a:	4628      	mov	r0, r5
   1ca8c:	f7fe ffb6 	bl	1b9fc <send_frag>
   1ca90:	4603      	mov	r3, r0
   1ca92:	e7f5      	b.n	1ca80 <send_buf+0x5c>
		return false;
   1ca94:	2300      	movs	r3, #0
   1ca96:	e7f3      	b.n	1ca80 <send_buf+0x5c>
			return false;
   1ca98:	2300      	movs	r3, #0
   1ca9a:	e7f1      	b.n	1ca80 <send_buf+0x5c>
   1ca9c:	20000370 	.word	0x20000370

0001caa0 <bt_conn_process_tx>:
{
   1caa0:	b570      	push	{r4, r5, r6, lr}
   1caa2:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   1caa4:	7a83      	ldrb	r3, [r0, #10]
   1caa6:	b923      	cbnz	r3, 1cab2 <bt_conn_process_tx+0x12>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
   1caa8:	2106      	movs	r1, #6
   1caaa:	3004      	adds	r0, #4
   1caac:	f00c f916 	bl	28cdc <atomic_test_and_clear_bit>
	if (conn->state == BT_CONN_DISCONNECTED &&
   1cab0:	b968      	cbnz	r0, 1cace <bt_conn_process_tx+0x2e>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   1cab2:	2200      	movs	r2, #0
   1cab4:	2300      	movs	r3, #0
   1cab6:	f104 0038 	add.w	r0, r4, #56	; 0x38
   1caba:	f00e fa62 	bl	2af82 <net_buf_get>
	BT_ASSERT(buf);
   1cabe:	4605      	mov	r5, r0
   1cac0:	b148      	cbz	r0, 1cad6 <bt_conn_process_tx+0x36>
	if (!send_buf(conn, buf)) {
   1cac2:	4629      	mov	r1, r5
   1cac4:	4620      	mov	r0, r4
   1cac6:	f7ff ffad 	bl	1ca24 <send_buf>
   1caca:	b190      	cbz	r0, 1caf2 <bt_conn_process_tx+0x52>
}
   1cacc:	bd70      	pop	{r4, r5, r6, pc}
		conn_cleanup(conn);
   1cace:	4620      	mov	r0, r4
   1cad0:	f00c f999 	bl	28e06 <conn_cleanup>
		return;
   1cad4:	e7fa      	b.n	1cacc <bt_conn_process_tx+0x2c>
	BT_ASSERT(buf);
   1cad6:	f240 331a 	movw	r3, #794	; 0x31a
   1cada:	4a0c      	ldr	r2, [pc, #48]	; (1cb0c <bt_conn_process_tx+0x6c>)
   1cadc:	490c      	ldr	r1, [pc, #48]	; (1cb10 <bt_conn_process_tx+0x70>)
   1cade:	480d      	ldr	r0, [pc, #52]	; (1cb14 <bt_conn_process_tx+0x74>)
   1cae0:	f00a fe7c 	bl	277dc <assert_print>
   1cae4:	4040      	eors	r0, r0
   1cae6:	f380 8811 	msr	BASEPRI, r0
   1caea:	f04f 0003 	mov.w	r0, #3
   1caee:	df02      	svc	2
   1caf0:	e7e7      	b.n	1cac2 <bt_conn_process_tx+0x22>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   1caf2:	69ae      	ldr	r6, [r5, #24]
		tx_data(buf)->tx = NULL;
   1caf4:	2300      	movs	r3, #0
   1caf6:	61ab      	str	r3, [r5, #24]
		net_buf_unref(buf);
   1caf8:	4628      	mov	r0, r5
   1cafa:	f00e fa82 	bl	2b002 <net_buf_unref>
		if (tx) {
   1cafe:	2e00      	cmp	r6, #0
   1cb00:	d0e4      	beq.n	1cacc <bt_conn_process_tx+0x2c>
			conn_tx_destroy(conn, tx);
   1cb02:	4631      	mov	r1, r6
   1cb04:	4620      	mov	r0, r4
   1cb06:	f00c f8dc 	bl	28cc2 <conn_tx_destroy>
   1cb0a:	e7df      	b.n	1cacc <bt_conn_process_tx+0x2c>
   1cb0c:	0002fff8 	.word	0x0002fff8
   1cb10:	00030880 	.word	0x00030880
   1cb14:	0002f7c4 	.word	0x0002f7c4

0001cb18 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   1cb18:	b538      	push	{r3, r4, r5, lr}
	z_impl_k_queue_init(queue);
   1cb1a:	4814      	ldr	r0, [pc, #80]	; (1cb6c <bt_conn_init+0x54>)
   1cb1c:	f010 f9f0 	bl	2cf00 <z_impl_k_queue_init>
	int err, i;

	k_fifo_init(&free_tx);
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
   1cb20:	2400      	movs	r4, #0
   1cb22:	e006      	b.n	1cb32 <bt_conn_init+0x1a>
		k_fifo_put(&free_tx, &conn_tx[i]);
   1cb24:	4912      	ldr	r1, [pc, #72]	; (1cb70 <bt_conn_init+0x58>)
   1cb26:	eb01 1104 	add.w	r1, r1, r4, lsl #4
   1cb2a:	4810      	ldr	r0, [pc, #64]	; (1cb6c <bt_conn_init+0x54>)
   1cb2c:	f010 f9f4 	bl	2cf18 <k_queue_append>
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
   1cb30:	3401      	adds	r4, #1
   1cb32:	2c02      	cmp	r4, #2
   1cb34:	d9f6      	bls.n	1cb24 <bt_conn_init+0xc>
	}

	bt_att_init();
   1cb36:	f001 fd47 	bl	1e5c8 <bt_att_init>

	err = bt_smp_init();
   1cb3a:	f00e f935 	bl	2ada8 <bt_smp_init>
	if (err) {
   1cb3e:	4605      	mov	r5, r0
   1cb40:	b108      	cbz	r0, 1cb46 <bt_conn_init+0x2e>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   1cb42:	4628      	mov	r0, r5
   1cb44:	bd38      	pop	{r3, r4, r5, pc}
	bt_l2cap_init();
   1cb46:	f00c fb5c 	bl	29202 <bt_l2cap_init>
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   1cb4a:	462c      	mov	r4, r5
   1cb4c:	e002      	b.n	1cb54 <bt_conn_init+0x3c>
			bt_conn_unref(conn);
   1cb4e:	f00c f9da 	bl	28f06 <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   1cb52:	3401      	adds	r4, #1
   1cb54:	2c07      	cmp	r4, #7
   1cb56:	d8f4      	bhi.n	1cb42 <bt_conn_init+0x2a>
			struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1cb58:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   1cb5c:	4b05      	ldr	r3, [pc, #20]	; (1cb74 <bt_conn_init+0x5c>)
   1cb5e:	eb03 1080 	add.w	r0, r3, r0, lsl #6
   1cb62:	f00c f9a9 	bl	28eb8 <bt_conn_ref>
			if (!conn) {
   1cb66:	2800      	cmp	r0, #0
   1cb68:	d1f1      	bne.n	1cb4e <bt_conn_init+0x36>
   1cb6a:	e7f2      	b.n	1cb52 <bt_conn_init+0x3a>
   1cb6c:	20000c2c 	.word	0x20000c2c
   1cb70:	20007c80 	.word	0x20007c80
   1cb74:	200022c8 	.word	0x200022c8

0001cb78 <get_ident>:

static uint8_t get_ident(void)
{
	static uint8_t ident;

	ident++;
   1cb78:	4905      	ldr	r1, [pc, #20]	; (1cb90 <get_ident+0x18>)
   1cb7a:	780a      	ldrb	r2, [r1, #0]
   1cb7c:	1c53      	adds	r3, r2, #1
   1cb7e:	b2db      	uxtb	r3, r3
   1cb80:	700b      	strb	r3, [r1, #0]
	/* handle integer overflow (0 is not valid) */
	if (!ident) {
   1cb82:	b90b      	cbnz	r3, 1cb88 <get_ident+0x10>
		ident++;
   1cb84:	3202      	adds	r2, #2
   1cb86:	700a      	strb	r2, [r1, #0]
	}

	return ident;
}
   1cb88:	4b01      	ldr	r3, [pc, #4]	; (1cb90 <get_ident+0x18>)
   1cb8a:	7818      	ldrb	r0, [r3, #0]
   1cb8c:	4770      	bx	lr
   1cb8e:	bf00      	nop
   1cb90:	20008fe3 	.word	0x20008fe3

0001cb94 <l2cap_accept>:
	(void)k_work_cancel_delayable(&le_chan->rtx_work);
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   1cb94:	b530      	push	{r4, r5, lr}
   1cb96:	b083      	sub	sp, #12
   1cb98:	4605      	mov	r5, r0
		.recv = l2cap_recv,
	};

	LOG_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   1cb9a:	2300      	movs	r3, #0
   1cb9c:	2b07      	cmp	r3, #7
   1cb9e:	d811      	bhi.n	1cbc4 <l2cap_accept+0x30>
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   1cba0:	228c      	movs	r2, #140	; 0x8c
   1cba2:	fb03 f202 	mul.w	r2, r3, r2
   1cba6:	4c21      	ldr	r4, [pc, #132]	; (1cc2c <l2cap_accept+0x98>)
   1cba8:	58a2      	ldr	r2, [r4, r2]
   1cbaa:	b10a      	cbz	r2, 1cbb0 <l2cap_accept+0x1c>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   1cbac:	3301      	adds	r3, #1
   1cbae:	e7f5      	b.n	1cb9c <l2cap_accept+0x8>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
   1cbb0:	4a1e      	ldr	r2, [pc, #120]	; (1cc2c <l2cap_accept+0x98>)
   1cbb2:	208c      	movs	r0, #140	; 0x8c
   1cbb4:	fb00 2303 	mla	r3, r0, r3, r2
   1cbb8:	4a1d      	ldr	r2, [pc, #116]	; (1cc30 <l2cap_accept+0x9c>)
   1cbba:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
   1cbbc:	600b      	str	r3, [r1, #0]

		return 0;
   1cbbe:	2000      	movs	r0, #0
	}

	LOG_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
   1cbc0:	b003      	add	sp, #12
   1cbc2:	bd30      	pop	{r4, r5, pc}
	LOG_ERR("No available L2CAP context for conn %p", conn);
   1cbc4:	2008      	movs	r0, #8
   1cbc6:	f7f9 f8ff 	bl	15dc8 <z_log_msg_alloc>
   1cbca:	2200      	movs	r2, #0
   1cbcc:	f36f 0200 	bfc	r2, #0, #1
   1cbd0:	f36f 0241 	bfc	r2, #1, #1
   1cbd4:	f36f 0282 	bfc	r2, #2, #1
   1cbd8:	f36f 02c5 	bfc	r2, #3, #3
   1cbdc:	2301      	movs	r3, #1
   1cbde:	f363 1288 	bfi	r2, r3, #6, #3
   1cbe2:	230c      	movs	r3, #12
   1cbe4:	f363 2252 	bfi	r2, r3, #9, #10
   1cbe8:	f36f 42de 	bfc	r2, #19, #12
   1cbec:	f36f 72df 	bfc	r2, #31, #1
   1cbf0:	4604      	mov	r4, r0
   1cbf2:	b190      	cbz	r0, 1cc1a <l2cap_accept+0x86>
   1cbf4:	f110 0310 	adds.w	r3, r0, #16
   1cbf8:	d002      	beq.n	1cc00 <l2cap_accept+0x6c>
   1cbfa:	490e      	ldr	r1, [pc, #56]	; (1cc34 <l2cap_accept+0xa0>)
   1cbfc:	6141      	str	r1, [r0, #20]
   1cbfe:	6185      	str	r5, [r0, #24]
   1cc00:	b15b      	cbz	r3, 1cc1a <l2cap_accept+0x86>
   1cc02:	2303      	movs	r3, #3
   1cc04:	f88d 3004 	strb.w	r3, [sp, #4]
   1cc08:	2300      	movs	r3, #0
   1cc0a:	f88d 3005 	strb.w	r3, [sp, #5]
   1cc0e:	f88d 3006 	strb.w	r3, [sp, #6]
   1cc12:	f88d 3007 	strb.w	r3, [sp, #7]
   1cc16:	9801      	ldr	r0, [sp, #4]
   1cc18:	6120      	str	r0, [r4, #16]
   1cc1a:	2300      	movs	r3, #0
   1cc1c:	4906      	ldr	r1, [pc, #24]	; (1cc38 <l2cap_accept+0xa4>)
   1cc1e:	4620      	mov	r0, r4
   1cc20:	f00b f8dd 	bl	27dde <z_log_msg_finalize>
	return -ENOMEM;
   1cc24:	f06f 000b 	mvn.w	r0, #11
   1cc28:	e7ca      	b.n	1cbc0 <l2cap_accept+0x2c>
   1cc2a:	bf00      	nop
   1cc2c:	20007cb4 	.word	0x20007cb4
   1cc30:	000301f0 	.word	0x000301f0
   1cc34:	00030050 	.word	0x00030050
   1cc38:	0002dea0 	.word	0x0002dea0

0001cc3c <le_conn_param_rsp>:
	if (buf->len < sizeof(*rsp)) {
   1cc3c:	8a0b      	ldrh	r3, [r1, #16]
   1cc3e:	2b01      	cmp	r3, #1
   1cc40:	d900      	bls.n	1cc44 <le_conn_param_rsp+0x8>
   1cc42:	4770      	bx	lr
{
   1cc44:	b500      	push	{lr}
   1cc46:	b083      	sub	sp, #12
		LOG_ERR("Too small LE conn param rsp");
   1cc48:	2006      	movs	r0, #6
   1cc4a:	f7f9 f8bd 	bl	15dc8 <z_log_msg_alloc>
   1cc4e:	2200      	movs	r2, #0
   1cc50:	f36f 0200 	bfc	r2, #0, #1
   1cc54:	f36f 0241 	bfc	r2, #1, #1
   1cc58:	f36f 0282 	bfc	r2, #2, #1
   1cc5c:	f36f 02c5 	bfc	r2, #3, #3
   1cc60:	2301      	movs	r3, #1
   1cc62:	f363 1288 	bfi	r2, r3, #6, #3
   1cc66:	2308      	movs	r3, #8
   1cc68:	f363 2252 	bfi	r2, r3, #9, #10
   1cc6c:	f36f 42de 	bfc	r2, #19, #12
   1cc70:	f36f 72df 	bfc	r2, #31, #1
   1cc74:	4684      	mov	ip, r0
   1cc76:	b190      	cbz	r0, 1cc9e <le_conn_param_rsp+0x62>
   1cc78:	f110 0310 	adds.w	r3, r0, #16
   1cc7c:	d001      	beq.n	1cc82 <le_conn_param_rsp+0x46>
   1cc7e:	490c      	ldr	r1, [pc, #48]	; (1ccb0 <le_conn_param_rsp+0x74>)
   1cc80:	6141      	str	r1, [r0, #20]
   1cc82:	b163      	cbz	r3, 1cc9e <le_conn_param_rsp+0x62>
   1cc84:	2302      	movs	r3, #2
   1cc86:	f88d 3004 	strb.w	r3, [sp, #4]
   1cc8a:	2300      	movs	r3, #0
   1cc8c:	f88d 3005 	strb.w	r3, [sp, #5]
   1cc90:	f88d 3006 	strb.w	r3, [sp, #6]
   1cc94:	f88d 3007 	strb.w	r3, [sp, #7]
   1cc98:	9801      	ldr	r0, [sp, #4]
   1cc9a:	f8cc 0010 	str.w	r0, [ip, #16]
   1cc9e:	2300      	movs	r3, #0
   1cca0:	4904      	ldr	r1, [pc, #16]	; (1ccb4 <le_conn_param_rsp+0x78>)
   1cca2:	4660      	mov	r0, ip
   1cca4:	f00b f89b 	bl	27dde <z_log_msg_finalize>
}
   1cca8:	b003      	add	sp, #12
   1ccaa:	f85d fb04 	ldr.w	pc, [sp], #4
   1ccae:	bf00      	nop
   1ccb0:	00030078 	.word	0x00030078
   1ccb4:	0002dea0 	.word	0x0002dea0

0001ccb8 <l2cap_chan_add>:
{
   1ccb8:	b510      	push	{r4, lr}
   1ccba:	b082      	sub	sp, #8
	if (!le_chan) {
   1ccbc:	b199      	cbz	r1, 1cce6 <l2cap_chan_add+0x2e>
   1ccbe:	460b      	mov	r3, r1
	atomic_clear(chan->status);
   1ccc0:	3110      	adds	r1, #16
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1ccc2:	f04f 0c00 	mov.w	ip, #0
   1ccc6:	f3bf 8f5b 	dmb	ish
   1ccca:	e851 ef00 	ldrex	lr, [r1]
   1ccce:	e841 c400 	strex	r4, ip, [r1]
   1ccd2:	2c00      	cmp	r4, #0
   1ccd4:	d1f9      	bne.n	1ccca <l2cap_chan_add+0x12>
   1ccd6:	f3bf 8f5b 	dmb	ish
	bt_l2cap_chan_add(conn, chan, destroy);
   1ccda:	4619      	mov	r1, r3
   1ccdc:	f00c f9db 	bl	29096 <bt_l2cap_chan_add>
	return true;
   1cce0:	2001      	movs	r0, #1
}
   1cce2:	b002      	add	sp, #8
   1cce4:	bd10      	pop	{r4, pc}
		LOG_ERR("Unable to allocate L2CAP channel ID");
   1cce6:	2006      	movs	r0, #6
   1cce8:	f7f9 f86e 	bl	15dc8 <z_log_msg_alloc>
   1ccec:	2200      	movs	r2, #0
   1ccee:	f36f 0200 	bfc	r2, #0, #1
   1ccf2:	f36f 0241 	bfc	r2, #1, #1
   1ccf6:	f36f 0282 	bfc	r2, #2, #1
   1ccfa:	f36f 02c5 	bfc	r2, #3, #3
   1ccfe:	2301      	movs	r3, #1
   1cd00:	f363 1288 	bfi	r2, r3, #6, #3
   1cd04:	2308      	movs	r3, #8
   1cd06:	f363 2252 	bfi	r2, r3, #9, #10
   1cd0a:	f36f 42de 	bfc	r2, #19, #12
   1cd0e:	f36f 72df 	bfc	r2, #31, #1
   1cd12:	4604      	mov	r4, r0
   1cd14:	b188      	cbz	r0, 1cd3a <l2cap_chan_add+0x82>
   1cd16:	f110 0310 	adds.w	r3, r0, #16
   1cd1a:	d001      	beq.n	1cd20 <l2cap_chan_add+0x68>
   1cd1c:	490a      	ldr	r1, [pc, #40]	; (1cd48 <l2cap_chan_add+0x90>)
   1cd1e:	6141      	str	r1, [r0, #20]
   1cd20:	b15b      	cbz	r3, 1cd3a <l2cap_chan_add+0x82>
   1cd22:	2302      	movs	r3, #2
   1cd24:	f88d 3004 	strb.w	r3, [sp, #4]
   1cd28:	2300      	movs	r3, #0
   1cd2a:	f88d 3005 	strb.w	r3, [sp, #5]
   1cd2e:	f88d 3006 	strb.w	r3, [sp, #6]
   1cd32:	f88d 3007 	strb.w	r3, [sp, #7]
   1cd36:	9801      	ldr	r0, [sp, #4]
   1cd38:	6120      	str	r0, [r4, #16]
   1cd3a:	2300      	movs	r3, #0
   1cd3c:	4903      	ldr	r1, [pc, #12]	; (1cd4c <l2cap_chan_add+0x94>)
   1cd3e:	4620      	mov	r0, r4
   1cd40:	f00b f84d 	bl	27dde <z_log_msg_finalize>
		return false;
   1cd44:	2000      	movs	r0, #0
   1cd46:	e7cc      	b.n	1cce2 <l2cap_chan_add+0x2a>
   1cd48:	00030094 	.word	0x00030094
   1cd4c:	0002dea0 	.word	0x0002dea0

0001cd50 <bt_l2cap_connected>:
{
   1cd50:	b530      	push	{r4, r5, lr}
   1cd52:	b083      	sub	sp, #12
   1cd54:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1cd56:	4c19      	ldr	r4, [pc, #100]	; (1cdbc <bt_l2cap_connected+0x6c>)
   1cd58:	e000      	b.n	1cd5c <bt_l2cap_connected+0xc>
   1cd5a:	340c      	adds	r4, #12
   1cd5c:	4b18      	ldr	r3, [pc, #96]	; (1cdc0 <bt_l2cap_connected+0x70>)
   1cd5e:	429c      	cmp	r4, r3
   1cd60:	d22a      	bcs.n	1cdb8 <bt_l2cap_connected+0x68>
		if (fchan->accept(conn, &chan) < 0) {
   1cd62:	6863      	ldr	r3, [r4, #4]
   1cd64:	a901      	add	r1, sp, #4
   1cd66:	4628      	mov	r0, r5
   1cd68:	4798      	blx	r3
   1cd6a:	2800      	cmp	r0, #0
   1cd6c:	dbf5      	blt.n	1cd5a <bt_l2cap_connected+0xa>
		le_chan = BT_L2CAP_LE_CHAN(chan);
   1cd6e:	9901      	ldr	r1, [sp, #4]
		le_chan->rx.cid = fchan->cid;
   1cd70:	8823      	ldrh	r3, [r4, #0]
   1cd72:	828b      	strh	r3, [r1, #20]
		le_chan->tx.cid = fchan->cid;
   1cd74:	848b      	strh	r3, [r1, #36]	; 0x24
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   1cd76:	68a2      	ldr	r2, [r4, #8]
   1cd78:	4628      	mov	r0, r5
   1cd7a:	f7ff ff9d 	bl	1ccb8 <l2cap_chan_add>
   1cd7e:	b1d8      	cbz	r0, 1cdb8 <bt_l2cap_connected+0x68>
		if (chan->ops->connected) {
   1cd80:	9801      	ldr	r0, [sp, #4]
   1cd82:	6843      	ldr	r3, [r0, #4]
   1cd84:	681b      	ldr	r3, [r3, #0]
   1cd86:	b103      	cbz	r3, 1cd8a <bt_l2cap_connected+0x3a>
			chan->ops->connected(chan);
   1cd88:	4798      	blx	r3
		atomic_set_bit(chan->status, BT_L2CAP_STATUS_OUT);
   1cd8a:	9b01      	ldr	r3, [sp, #4]
   1cd8c:	3310      	adds	r3, #16
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1cd8e:	f3bf 8f5b 	dmb	ish
   1cd92:	e853 1f00 	ldrex	r1, [r3]
   1cd96:	f041 0101 	orr.w	r1, r1, #1
   1cd9a:	e843 1200 	strex	r2, r1, [r3]
   1cd9e:	2a00      	cmp	r2, #0
   1cda0:	d1f7      	bne.n	1cd92 <bt_l2cap_connected+0x42>
   1cda2:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   1cda6:	9801      	ldr	r0, [sp, #4]
   1cda8:	6843      	ldr	r3, [r0, #4]
   1cdaa:	69db      	ldr	r3, [r3, #28]
   1cdac:	2b00      	cmp	r3, #0
   1cdae:	d0d4      	beq.n	1cd5a <bt_l2cap_connected+0xa>
			chan->ops->status(chan, chan->status);
   1cdb0:	f100 0110 	add.w	r1, r0, #16
   1cdb4:	4798      	blx	r3
   1cdb6:	e7d0      	b.n	1cd5a <bt_l2cap_connected+0xa>
}
   1cdb8:	b003      	add	sp, #12
   1cdba:	bd30      	pop	{r4, r5, pc}
   1cdbc:	0002de20 	.word	0x0002de20
   1cdc0:	0002de44 	.word	0x0002de44

0001cdc4 <l2cap_create_le_sig_pdu>:
{
   1cdc4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cdc6:	b083      	sub	sp, #12
   1cdc8:	460c      	mov	r4, r1
   1cdca:	4616      	mov	r6, r2
   1cdcc:	461d      	mov	r5, r3
	buf = bt_l2cap_create_pdu_timeout(pool, 0, L2CAP_RTX_TIMEOUT);
   1cdce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1cdd2:	2300      	movs	r3, #0
   1cdd4:	2100      	movs	r1, #0
   1cdd6:	4608      	mov	r0, r1
   1cdd8:	f00c f988 	bl	290ec <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   1cddc:	4607      	mov	r7, r0
   1cdde:	b148      	cbz	r0, 1cdf4 <l2cap_create_le_sig_pdu+0x30>
	return net_buf_simple_add(&buf->b, len);
   1cde0:	2104      	movs	r1, #4
   1cde2:	300c      	adds	r0, #12
   1cde4:	f00e f954 	bl	2b090 <net_buf_simple_add>
	hdr->code = code;
   1cde8:	7004      	strb	r4, [r0, #0]
	hdr->ident = ident;
   1cdea:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   1cdec:	8045      	strh	r5, [r0, #2]
}
   1cdee:	4638      	mov	r0, r7
   1cdf0:	b003      	add	sp, #12
   1cdf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Unable to allocate buffer for op 0x%02x", code);
   1cdf4:	2008      	movs	r0, #8
   1cdf6:	f7f8 ffe7 	bl	15dc8 <z_log_msg_alloc>
   1cdfa:	2200      	movs	r2, #0
   1cdfc:	f36f 0200 	bfc	r2, #0, #1
   1ce00:	f36f 0241 	bfc	r2, #1, #1
   1ce04:	f36f 0282 	bfc	r2, #2, #1
   1ce08:	f36f 02c5 	bfc	r2, #3, #3
   1ce0c:	2301      	movs	r3, #1
   1ce0e:	f363 1288 	bfi	r2, r3, #6, #3
   1ce12:	230c      	movs	r3, #12
   1ce14:	f363 2252 	bfi	r2, r3, #9, #10
   1ce18:	f36f 42de 	bfc	r2, #19, #12
   1ce1c:	f36f 72df 	bfc	r2, #31, #1
   1ce20:	4605      	mov	r5, r0
   1ce22:	b190      	cbz	r0, 1ce4a <l2cap_create_le_sig_pdu+0x86>
   1ce24:	f110 0310 	adds.w	r3, r0, #16
   1ce28:	d002      	beq.n	1ce30 <l2cap_create_le_sig_pdu+0x6c>
   1ce2a:	490b      	ldr	r1, [pc, #44]	; (1ce58 <l2cap_create_le_sig_pdu+0x94>)
   1ce2c:	6141      	str	r1, [r0, #20]
   1ce2e:	6184      	str	r4, [r0, #24]
   1ce30:	b15b      	cbz	r3, 1ce4a <l2cap_create_le_sig_pdu+0x86>
   1ce32:	2303      	movs	r3, #3
   1ce34:	f88d 3004 	strb.w	r3, [sp, #4]
   1ce38:	2300      	movs	r3, #0
   1ce3a:	f88d 3005 	strb.w	r3, [sp, #5]
   1ce3e:	f88d 3006 	strb.w	r3, [sp, #6]
   1ce42:	f88d 3007 	strb.w	r3, [sp, #7]
   1ce46:	9801      	ldr	r0, [sp, #4]
   1ce48:	6128      	str	r0, [r5, #16]
   1ce4a:	2300      	movs	r3, #0
   1ce4c:	4903      	ldr	r1, [pc, #12]	; (1ce5c <l2cap_create_le_sig_pdu+0x98>)
   1ce4e:	4628      	mov	r0, r5
   1ce50:	f00a ffc5 	bl	27dde <z_log_msg_finalize>
		return NULL;
   1ce54:	e7cb      	b.n	1cdee <l2cap_create_le_sig_pdu+0x2a>
   1ce56:	bf00      	nop
   1ce58:	000300b8 	.word	0x000300b8
   1ce5c:	0002dea0 	.word	0x0002dea0

0001ce60 <le_conn_param_update_req>:
{
   1ce60:	b570      	push	{r4, r5, r6, lr}
   1ce62:	b086      	sub	sp, #24
	struct bt_conn *conn = l2cap->chan.chan.conn;
   1ce64:	6804      	ldr	r4, [r0, #0]
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
   1ce66:	68d3      	ldr	r3, [r2, #12]
	if (buf->len < sizeof(*req)) {
   1ce68:	8a10      	ldrh	r0, [r2, #16]
   1ce6a:	2807      	cmp	r0, #7
   1ce6c:	d937      	bls.n	1cede <le_conn_param_update_req+0x7e>
   1ce6e:	4694      	mov	ip, r2
	if (conn->state != BT_CONN_CONNECTED) {
   1ce70:	7aa2      	ldrb	r2, [r4, #10]
   1ce72:	2a07      	cmp	r2, #7
   1ce74:	d163      	bne.n	1cf3e <le_conn_param_update_req+0xde>
	if (conn->role != BT_HCI_ROLE_CENTRAL) {
   1ce76:	78e2      	ldrb	r2, [r4, #3]
   1ce78:	2a00      	cmp	r2, #0
   1ce7a:	f040 8091 	bne.w	1cfa0 <le_conn_param_update_req+0x140>
	param.interval_min = sys_le16_to_cpu(req->min_interval);
   1ce7e:	881a      	ldrh	r2, [r3, #0]
   1ce80:	f8ad 2010 	strh.w	r2, [sp, #16]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
   1ce84:	885a      	ldrh	r2, [r3, #2]
   1ce86:	f8ad 2012 	strh.w	r2, [sp, #18]
	param.latency = sys_le16_to_cpu(req->latency);
   1ce8a:	889a      	ldrh	r2, [r3, #4]
   1ce8c:	f8ad 2014 	strh.w	r2, [sp, #20]
	param.timeout = sys_le16_to_cpu(req->timeout);
   1ce90:	88db      	ldrh	r3, [r3, #6]
   1ce92:	f8ad 3016 	strh.w	r3, [sp, #22]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   1ce96:	2302      	movs	r3, #2
   1ce98:	460a      	mov	r2, r1
   1ce9a:	2113      	movs	r1, #19
   1ce9c:	4660      	mov	r0, ip
   1ce9e:	f7ff ff91 	bl	1cdc4 <l2cap_create_le_sig_pdu>
	if (!buf) {
   1cea2:	4606      	mov	r6, r0
   1cea4:	2800      	cmp	r0, #0
   1cea6:	d079      	beq.n	1cf9c <le_conn_param_update_req+0x13c>
	accepted = le_param_req(conn, &param);
   1cea8:	a904      	add	r1, sp, #16
   1ceaa:	4620      	mov	r0, r4
   1ceac:	f7ff fb08 	bl	1c4c0 <le_param_req>
   1ceb0:	4605      	mov	r5, r0
   1ceb2:	2102      	movs	r1, #2
   1ceb4:	f106 000c 	add.w	r0, r6, #12
   1ceb8:	f00e f8ea 	bl	2b090 <net_buf_simple_add>
	if (accepted) {
   1cebc:	2d00      	cmp	r5, #0
   1cebe:	d076      	beq.n	1cfae <le_conn_param_update_req+0x14e>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
   1cec0:	2300      	movs	r3, #0
   1cec2:	7003      	strb	r3, [r0, #0]
   1cec4:	7043      	strb	r3, [r0, #1]
	l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
   1cec6:	4632      	mov	r2, r6
   1cec8:	2105      	movs	r1, #5
   1ceca:	4620      	mov	r0, r4
   1cecc:	f00c f928 	bl	29120 <l2cap_send>
	if (accepted) {
   1ced0:	2d00      	cmp	r5, #0
   1ced2:	d063      	beq.n	1cf9c <le_conn_param_update_req+0x13c>
		bt_conn_le_conn_update(conn, &param);
   1ced4:	a904      	add	r1, sp, #16
   1ced6:	4620      	mov	r0, r4
   1ced8:	f00c f898 	bl	2900c <bt_conn_le_conn_update>
   1cedc:	e05e      	b.n	1cf9c <le_conn_param_update_req+0x13c>
		LOG_ERR("Too small LE conn update param req");
   1cede:	2006      	movs	r0, #6
   1cee0:	f7f8 ff72 	bl	15dc8 <z_log_msg_alloc>
   1cee4:	2200      	movs	r2, #0
   1cee6:	f36f 0200 	bfc	r2, #0, #1
   1ceea:	f36f 0241 	bfc	r2, #1, #1
   1ceee:	f36f 0282 	bfc	r2, #2, #1
   1cef2:	f36f 02c5 	bfc	r2, #3, #3
   1cef6:	2301      	movs	r3, #1
   1cef8:	f363 1288 	bfi	r2, r3, #6, #3
   1cefc:	2308      	movs	r3, #8
   1cefe:	f363 2252 	bfi	r2, r3, #9, #10
   1cf02:	f36f 42de 	bfc	r2, #19, #12
   1cf06:	f36f 72df 	bfc	r2, #31, #1
   1cf0a:	4604      	mov	r4, r0
   1cf0c:	b188      	cbz	r0, 1cf32 <le_conn_param_update_req+0xd2>
   1cf0e:	f110 0310 	adds.w	r3, r0, #16
   1cf12:	d001      	beq.n	1cf18 <le_conn_param_update_req+0xb8>
   1cf14:	4928      	ldr	r1, [pc, #160]	; (1cfb8 <le_conn_param_update_req+0x158>)
   1cf16:	6141      	str	r1, [r0, #20]
   1cf18:	b15b      	cbz	r3, 1cf32 <le_conn_param_update_req+0xd2>
   1cf1a:	2302      	movs	r3, #2
   1cf1c:	f88d 300c 	strb.w	r3, [sp, #12]
   1cf20:	2300      	movs	r3, #0
   1cf22:	f88d 300d 	strb.w	r3, [sp, #13]
   1cf26:	f88d 300e 	strb.w	r3, [sp, #14]
   1cf2a:	f88d 300f 	strb.w	r3, [sp, #15]
   1cf2e:	9803      	ldr	r0, [sp, #12]
   1cf30:	6120      	str	r0, [r4, #16]
   1cf32:	2300      	movs	r3, #0
   1cf34:	4921      	ldr	r1, [pc, #132]	; (1cfbc <le_conn_param_update_req+0x15c>)
   1cf36:	4620      	mov	r0, r4
   1cf38:	f00a ff51 	bl	27dde <z_log_msg_finalize>
		return;
   1cf3c:	e02e      	b.n	1cf9c <le_conn_param_update_req+0x13c>
		LOG_WRN("Not connected");
   1cf3e:	2006      	movs	r0, #6
   1cf40:	f7f8 ff42 	bl	15dc8 <z_log_msg_alloc>
   1cf44:	2200      	movs	r2, #0
   1cf46:	f36f 0200 	bfc	r2, #0, #1
   1cf4a:	f36f 0241 	bfc	r2, #1, #1
   1cf4e:	f36f 0282 	bfc	r2, #2, #1
   1cf52:	f36f 02c5 	bfc	r2, #3, #3
   1cf56:	2302      	movs	r3, #2
   1cf58:	f363 1288 	bfi	r2, r3, #6, #3
   1cf5c:	2308      	movs	r3, #8
   1cf5e:	f363 2252 	bfi	r2, r3, #9, #10
   1cf62:	f36f 42de 	bfc	r2, #19, #12
   1cf66:	f36f 72df 	bfc	r2, #31, #1
   1cf6a:	4604      	mov	r4, r0
   1cf6c:	b188      	cbz	r0, 1cf92 <le_conn_param_update_req+0x132>
   1cf6e:	f110 0310 	adds.w	r3, r0, #16
   1cf72:	d001      	beq.n	1cf78 <le_conn_param_update_req+0x118>
   1cf74:	4912      	ldr	r1, [pc, #72]	; (1cfc0 <le_conn_param_update_req+0x160>)
   1cf76:	6141      	str	r1, [r0, #20]
   1cf78:	b15b      	cbz	r3, 1cf92 <le_conn_param_update_req+0x132>
   1cf7a:	2302      	movs	r3, #2
   1cf7c:	f88d 300c 	strb.w	r3, [sp, #12]
   1cf80:	2300      	movs	r3, #0
   1cf82:	f88d 300d 	strb.w	r3, [sp, #13]
   1cf86:	f88d 300e 	strb.w	r3, [sp, #14]
   1cf8a:	f88d 300f 	strb.w	r3, [sp, #15]
   1cf8e:	9803      	ldr	r0, [sp, #12]
   1cf90:	6120      	str	r0, [r4, #16]
   1cf92:	2300      	movs	r3, #0
   1cf94:	4909      	ldr	r1, [pc, #36]	; (1cfbc <le_conn_param_update_req+0x15c>)
   1cf96:	4620      	mov	r0, r4
   1cf98:	f00a ff21 	bl	27dde <z_log_msg_finalize>
}
   1cf9c:	b006      	add	sp, #24
   1cf9e:	bd70      	pop	{r4, r5, r6, pc}
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
   1cfa0:	2200      	movs	r2, #0
   1cfa2:	9200      	str	r2, [sp, #0]
   1cfa4:	4613      	mov	r3, r2
   1cfa6:	4620      	mov	r0, r4
   1cfa8:	f00c f8c8 	bl	2913c <l2cap_send_reject>
		return;
   1cfac:	e7f6      	b.n	1cf9c <le_conn_param_update_req+0x13c>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_REJECTED);
   1cfae:	2301      	movs	r3, #1
   1cfb0:	7003      	strb	r3, [r0, #0]
   1cfb2:	2300      	movs	r3, #0
   1cfb4:	7043      	strb	r3, [r0, #1]
   1cfb6:	e786      	b.n	1cec6 <le_conn_param_update_req+0x66>
   1cfb8:	000300e0 	.word	0x000300e0
   1cfbc:	0002dea0 	.word	0x0002dea0
   1cfc0:	00030104 	.word	0x00030104

0001cfc4 <l2cap_recv>:
{
   1cfc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cfc8:	b084      	sub	sp, #16
	if (buf->len < sizeof(*hdr)) {
   1cfca:	8a0b      	ldrh	r3, [r1, #16]
   1cfcc:	2b03      	cmp	r3, #3
   1cfce:	d951      	bls.n	1d074 <l2cap_recv+0xb0>
   1cfd0:	4607      	mov	r7, r0
   1cfd2:	460c      	mov	r4, r1
	return net_buf_simple_pull_mem(&buf->b, len);
   1cfd4:	2104      	movs	r1, #4
   1cfd6:	f104 000c 	add.w	r0, r4, #12
   1cfda:	f00e f883 	bl	2b0e4 <net_buf_simple_pull_mem>
   1cfde:	4605      	mov	r5, r0
	len = sys_le16_to_cpu(hdr->len);
   1cfe0:	8846      	ldrh	r6, [r0, #2]
	if (buf->len != len) {
   1cfe2:	f8b4 8010 	ldrh.w	r8, [r4, #16]
   1cfe6:	45b0      	cmp	r8, r6
   1cfe8:	d177      	bne.n	1d0da <l2cap_recv+0x116>
	if (!hdr->ident) {
   1cfea:	7841      	ldrb	r1, [r0, #1]
   1cfec:	2900      	cmp	r1, #0
   1cfee:	f000 80a6 	beq.w	1d13e <l2cap_recv+0x17a>
	switch (hdr->code) {
   1cff2:	7806      	ldrb	r6, [r0, #0]
   1cff4:	2e12      	cmp	r6, #18
   1cff6:	f000 80d7 	beq.w	1d1a8 <l2cap_recv+0x1e4>
   1cffa:	2e13      	cmp	r6, #19
   1cffc:	f000 80cf 	beq.w	1d19e <l2cap_recv+0x1da>
   1d000:	2e01      	cmp	r6, #1
   1d002:	d066      	beq.n	1d0d2 <l2cap_recv+0x10e>
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   1d004:	2008      	movs	r0, #8
   1d006:	f7f8 fedf 	bl	15dc8 <z_log_msg_alloc>
   1d00a:	2200      	movs	r2, #0
   1d00c:	f36f 0200 	bfc	r2, #0, #1
   1d010:	f36f 0241 	bfc	r2, #1, #1
   1d014:	f36f 0282 	bfc	r2, #2, #1
   1d018:	f36f 02c5 	bfc	r2, #3, #3
   1d01c:	2302      	movs	r3, #2
   1d01e:	f363 1288 	bfi	r2, r3, #6, #3
   1d022:	230c      	movs	r3, #12
   1d024:	f363 2252 	bfi	r2, r3, #9, #10
   1d028:	f36f 42de 	bfc	r2, #19, #12
   1d02c:	f36f 72df 	bfc	r2, #31, #1
   1d030:	4604      	mov	r4, r0
   1d032:	b190      	cbz	r0, 1d05a <l2cap_recv+0x96>
   1d034:	f110 0310 	adds.w	r3, r0, #16
   1d038:	d002      	beq.n	1d040 <l2cap_recv+0x7c>
   1d03a:	495e      	ldr	r1, [pc, #376]	; (1d1b4 <l2cap_recv+0x1f0>)
   1d03c:	6141      	str	r1, [r0, #20]
   1d03e:	6186      	str	r6, [r0, #24]
   1d040:	b15b      	cbz	r3, 1d05a <l2cap_recv+0x96>
   1d042:	2303      	movs	r3, #3
   1d044:	f88d 300c 	strb.w	r3, [sp, #12]
   1d048:	2300      	movs	r3, #0
   1d04a:	f88d 300d 	strb.w	r3, [sp, #13]
   1d04e:	f88d 300e 	strb.w	r3, [sp, #14]
   1d052:	f88d 300f 	strb.w	r3, [sp, #15]
   1d056:	9803      	ldr	r0, [sp, #12]
   1d058:	6120      	str	r0, [r4, #16]
   1d05a:	2300      	movs	r3, #0
   1d05c:	4956      	ldr	r1, [pc, #344]	; (1d1b8 <l2cap_recv+0x1f4>)
   1d05e:	4620      	mov	r0, r4
   1d060:	f00a febd 	bl	27dde <z_log_msg_finalize>
		l2cap_send_reject(chan->conn, hdr->ident,
   1d064:	7869      	ldrb	r1, [r5, #1]
   1d066:	2200      	movs	r2, #0
   1d068:	9200      	str	r2, [sp, #0]
   1d06a:	4613      	mov	r3, r2
   1d06c:	6838      	ldr	r0, [r7, #0]
   1d06e:	f00c f865 	bl	2913c <l2cap_send_reject>
		break;
   1d072:	e02e      	b.n	1d0d2 <l2cap_recv+0x10e>
		LOG_ERR("Too small L2CAP signaling PDU");
   1d074:	2006      	movs	r0, #6
   1d076:	f7f8 fea7 	bl	15dc8 <z_log_msg_alloc>
   1d07a:	2200      	movs	r2, #0
   1d07c:	f36f 0200 	bfc	r2, #0, #1
   1d080:	f36f 0241 	bfc	r2, #1, #1
   1d084:	f36f 0282 	bfc	r2, #2, #1
   1d088:	f36f 02c5 	bfc	r2, #3, #3
   1d08c:	2301      	movs	r3, #1
   1d08e:	f363 1288 	bfi	r2, r3, #6, #3
   1d092:	2308      	movs	r3, #8
   1d094:	f363 2252 	bfi	r2, r3, #9, #10
   1d098:	f36f 42de 	bfc	r2, #19, #12
   1d09c:	f36f 72df 	bfc	r2, #31, #1
   1d0a0:	4604      	mov	r4, r0
   1d0a2:	b188      	cbz	r0, 1d0c8 <l2cap_recv+0x104>
   1d0a4:	f110 0310 	adds.w	r3, r0, #16
   1d0a8:	d001      	beq.n	1d0ae <l2cap_recv+0xea>
   1d0aa:	4944      	ldr	r1, [pc, #272]	; (1d1bc <l2cap_recv+0x1f8>)
   1d0ac:	6141      	str	r1, [r0, #20]
   1d0ae:	b15b      	cbz	r3, 1d0c8 <l2cap_recv+0x104>
   1d0b0:	2302      	movs	r3, #2
   1d0b2:	f88d 300c 	strb.w	r3, [sp, #12]
   1d0b6:	2300      	movs	r3, #0
   1d0b8:	f88d 300d 	strb.w	r3, [sp, #13]
   1d0bc:	f88d 300e 	strb.w	r3, [sp, #14]
   1d0c0:	f88d 300f 	strb.w	r3, [sp, #15]
   1d0c4:	9803      	ldr	r0, [sp, #12]
   1d0c6:	6120      	str	r0, [r4, #16]
   1d0c8:	2300      	movs	r3, #0
   1d0ca:	493b      	ldr	r1, [pc, #236]	; (1d1b8 <l2cap_recv+0x1f4>)
   1d0cc:	4620      	mov	r0, r4
   1d0ce:	f00a fe86 	bl	27dde <z_log_msg_finalize>
}
   1d0d2:	2000      	movs	r0, #0
   1d0d4:	b004      	add	sp, #16
   1d0d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   1d0da:	2008      	movs	r0, #8
   1d0dc:	f7f8 fe74 	bl	15dc8 <z_log_msg_alloc>
   1d0e0:	2200      	movs	r2, #0
   1d0e2:	f36f 0200 	bfc	r2, #0, #1
   1d0e6:	f36f 0241 	bfc	r2, #1, #1
   1d0ea:	f36f 0282 	bfc	r2, #2, #1
   1d0ee:	f36f 02c5 	bfc	r2, #3, #3
   1d0f2:	2301      	movs	r3, #1
   1d0f4:	f363 1288 	bfi	r2, r3, #6, #3
   1d0f8:	2310      	movs	r3, #16
   1d0fa:	f363 2252 	bfi	r2, r3, #9, #10
   1d0fe:	f36f 42de 	bfc	r2, #19, #12
   1d102:	f36f 72df 	bfc	r2, #31, #1
   1d106:	4604      	mov	r4, r0
   1d108:	b198      	cbz	r0, 1d132 <l2cap_recv+0x16e>
   1d10a:	18c3      	adds	r3, r0, r3
   1d10c:	d004      	beq.n	1d118 <l2cap_recv+0x154>
   1d10e:	492c      	ldr	r1, [pc, #176]	; (1d1c0 <l2cap_recv+0x1fc>)
   1d110:	6141      	str	r1, [r0, #20]
   1d112:	f8c0 8018 	str.w	r8, [r0, #24]
   1d116:	61c6      	str	r6, [r0, #28]
   1d118:	b15b      	cbz	r3, 1d132 <l2cap_recv+0x16e>
   1d11a:	2304      	movs	r3, #4
   1d11c:	f88d 300c 	strb.w	r3, [sp, #12]
   1d120:	2300      	movs	r3, #0
   1d122:	f88d 300d 	strb.w	r3, [sp, #13]
   1d126:	f88d 300e 	strb.w	r3, [sp, #14]
   1d12a:	f88d 300f 	strb.w	r3, [sp, #15]
   1d12e:	9803      	ldr	r0, [sp, #12]
   1d130:	6120      	str	r0, [r4, #16]
   1d132:	2300      	movs	r3, #0
   1d134:	4920      	ldr	r1, [pc, #128]	; (1d1b8 <l2cap_recv+0x1f4>)
   1d136:	4620      	mov	r0, r4
   1d138:	f00a fe51 	bl	27dde <z_log_msg_finalize>
		return 0;
   1d13c:	e7c9      	b.n	1d0d2 <l2cap_recv+0x10e>
		LOG_ERR("Invalid ident value in L2CAP PDU");
   1d13e:	2006      	movs	r0, #6
   1d140:	f7f8 fe42 	bl	15dc8 <z_log_msg_alloc>
   1d144:	2200      	movs	r2, #0
   1d146:	f36f 0200 	bfc	r2, #0, #1
   1d14a:	f36f 0241 	bfc	r2, #1, #1
   1d14e:	f36f 0282 	bfc	r2, #2, #1
   1d152:	f36f 02c5 	bfc	r2, #3, #3
   1d156:	2301      	movs	r3, #1
   1d158:	f363 1288 	bfi	r2, r3, #6, #3
   1d15c:	2308      	movs	r3, #8
   1d15e:	f363 2252 	bfi	r2, r3, #9, #10
   1d162:	f36f 42de 	bfc	r2, #19, #12
   1d166:	f36f 72df 	bfc	r2, #31, #1
   1d16a:	4604      	mov	r4, r0
   1d16c:	b188      	cbz	r0, 1d192 <l2cap_recv+0x1ce>
   1d16e:	f110 0310 	adds.w	r3, r0, #16
   1d172:	d001      	beq.n	1d178 <l2cap_recv+0x1b4>
   1d174:	4913      	ldr	r1, [pc, #76]	; (1d1c4 <l2cap_recv+0x200>)
   1d176:	6141      	str	r1, [r0, #20]
   1d178:	b15b      	cbz	r3, 1d192 <l2cap_recv+0x1ce>
   1d17a:	2302      	movs	r3, #2
   1d17c:	f88d 300c 	strb.w	r3, [sp, #12]
   1d180:	2300      	movs	r3, #0
   1d182:	f88d 300d 	strb.w	r3, [sp, #13]
   1d186:	f88d 300e 	strb.w	r3, [sp, #14]
   1d18a:	f88d 300f 	strb.w	r3, [sp, #15]
   1d18e:	9803      	ldr	r0, [sp, #12]
   1d190:	6120      	str	r0, [r4, #16]
   1d192:	2300      	movs	r3, #0
   1d194:	4908      	ldr	r1, [pc, #32]	; (1d1b8 <l2cap_recv+0x1f4>)
   1d196:	4620      	mov	r0, r4
   1d198:	f00a fe21 	bl	27dde <z_log_msg_finalize>
		return 0;
   1d19c:	e799      	b.n	1d0d2 <l2cap_recv+0x10e>
		le_conn_param_rsp(l2cap, buf);
   1d19e:	4621      	mov	r1, r4
   1d1a0:	4638      	mov	r0, r7
   1d1a2:	f7ff fd4b 	bl	1cc3c <le_conn_param_rsp>
		break;
   1d1a6:	e794      	b.n	1d0d2 <l2cap_recv+0x10e>
			le_conn_param_update_req(l2cap, hdr->ident, buf);
   1d1a8:	4622      	mov	r2, r4
   1d1aa:	4638      	mov	r0, r7
   1d1ac:	f7ff fe58 	bl	1ce60 <le_conn_param_update_req>
			break;
   1d1b0:	e78f      	b.n	1d0d2 <l2cap_recv+0x10e>
   1d1b2:	bf00      	nop
   1d1b4:	0003017c 	.word	0x0003017c
   1d1b8:	0002dea0 	.word	0x0002dea0
   1d1bc:	00030114 	.word	0x00030114
   1d1c0:	00030134 	.word	0x00030134
   1d1c4:	00030158 	.word	0x00030158

0001d1c8 <bt_l2cap_recv>:
{
   1d1c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d1ca:	b083      	sub	sp, #12
   1d1cc:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   1d1ce:	8a0b      	ldrh	r3, [r1, #16]
   1d1d0:	2b03      	cmp	r3, #3
   1d1d2:	d912      	bls.n	1d1fa <bt_l2cap_recv+0x32>
   1d1d4:	4605      	mov	r5, r0
   1d1d6:	4616      	mov	r6, r2
   1d1d8:	2104      	movs	r1, #4
   1d1da:	f104 000c 	add.w	r0, r4, #12
   1d1de:	f00d ff81 	bl	2b0e4 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   1d1e2:	8847      	ldrh	r7, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   1d1e4:	4639      	mov	r1, r7
   1d1e6:	4628      	mov	r0, r5
   1d1e8:	f00b ffcc 	bl	29184 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1d1ec:	b3c0      	cbz	r0, 1d260 <bt_l2cap_recv+0x98>
	l2cap_chan_recv(chan, buf, complete);
   1d1ee:	4632      	mov	r2, r6
   1d1f0:	4621      	mov	r1, r4
   1d1f2:	f00b ff34 	bl	2905e <l2cap_chan_recv>
}
   1d1f6:	b003      	add	sp, #12
   1d1f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Too small L2CAP PDU received");
   1d1fa:	2006      	movs	r0, #6
   1d1fc:	f7f8 fde4 	bl	15dc8 <z_log_msg_alloc>
   1d200:	2200      	movs	r2, #0
   1d202:	f36f 0200 	bfc	r2, #0, #1
   1d206:	f36f 0241 	bfc	r2, #1, #1
   1d20a:	f36f 0282 	bfc	r2, #2, #1
   1d20e:	f36f 02c5 	bfc	r2, #3, #3
   1d212:	2301      	movs	r3, #1
   1d214:	f363 1288 	bfi	r2, r3, #6, #3
   1d218:	2308      	movs	r3, #8
   1d21a:	f363 2252 	bfi	r2, r3, #9, #10
   1d21e:	f36f 42de 	bfc	r2, #19, #12
   1d222:	f36f 72df 	bfc	r2, #31, #1
   1d226:	4605      	mov	r5, r0
   1d228:	b188      	cbz	r0, 1d24e <bt_l2cap_recv+0x86>
   1d22a:	f110 0310 	adds.w	r3, r0, #16
   1d22e:	d001      	beq.n	1d234 <bt_l2cap_recv+0x6c>
   1d230:	4925      	ldr	r1, [pc, #148]	; (1d2c8 <bt_l2cap_recv+0x100>)
   1d232:	6141      	str	r1, [r0, #20]
   1d234:	b15b      	cbz	r3, 1d24e <bt_l2cap_recv+0x86>
   1d236:	2302      	movs	r3, #2
   1d238:	f88d 3004 	strb.w	r3, [sp, #4]
   1d23c:	2300      	movs	r3, #0
   1d23e:	f88d 3005 	strb.w	r3, [sp, #5]
   1d242:	f88d 3006 	strb.w	r3, [sp, #6]
   1d246:	f88d 3007 	strb.w	r3, [sp, #7]
   1d24a:	9801      	ldr	r0, [sp, #4]
   1d24c:	6128      	str	r0, [r5, #16]
   1d24e:	2300      	movs	r3, #0
   1d250:	491e      	ldr	r1, [pc, #120]	; (1d2cc <bt_l2cap_recv+0x104>)
   1d252:	4628      	mov	r0, r5
   1d254:	f00a fdc3 	bl	27dde <z_log_msg_finalize>
		net_buf_unref(buf);
   1d258:	4620      	mov	r0, r4
   1d25a:	f00d fed2 	bl	2b002 <net_buf_unref>
		return;
   1d25e:	e7ca      	b.n	1d1f6 <bt_l2cap_recv+0x2e>
		LOG_WRN("Ignoring data for unknown channel ID 0x%04x", cid);
   1d260:	2008      	movs	r0, #8
   1d262:	f7f8 fdb1 	bl	15dc8 <z_log_msg_alloc>
   1d266:	2200      	movs	r2, #0
   1d268:	f36f 0200 	bfc	r2, #0, #1
   1d26c:	f36f 0241 	bfc	r2, #1, #1
   1d270:	f36f 0282 	bfc	r2, #2, #1
   1d274:	f36f 02c5 	bfc	r2, #3, #3
   1d278:	2302      	movs	r3, #2
   1d27a:	f363 1288 	bfi	r2, r3, #6, #3
   1d27e:	230c      	movs	r3, #12
   1d280:	f363 2252 	bfi	r2, r3, #9, #10
   1d284:	f36f 42de 	bfc	r2, #19, #12
   1d288:	f36f 72df 	bfc	r2, #31, #1
   1d28c:	4605      	mov	r5, r0
   1d28e:	b190      	cbz	r0, 1d2b6 <bt_l2cap_recv+0xee>
   1d290:	f110 0310 	adds.w	r3, r0, #16
   1d294:	d002      	beq.n	1d29c <bt_l2cap_recv+0xd4>
   1d296:	490e      	ldr	r1, [pc, #56]	; (1d2d0 <bt_l2cap_recv+0x108>)
   1d298:	6141      	str	r1, [r0, #20]
   1d29a:	6187      	str	r7, [r0, #24]
   1d29c:	b15b      	cbz	r3, 1d2b6 <bt_l2cap_recv+0xee>
   1d29e:	2303      	movs	r3, #3
   1d2a0:	f88d 3004 	strb.w	r3, [sp, #4]
   1d2a4:	2300      	movs	r3, #0
   1d2a6:	f88d 3005 	strb.w	r3, [sp, #5]
   1d2aa:	f88d 3006 	strb.w	r3, [sp, #6]
   1d2ae:	f88d 3007 	strb.w	r3, [sp, #7]
   1d2b2:	9801      	ldr	r0, [sp, #4]
   1d2b4:	6128      	str	r0, [r5, #16]
   1d2b6:	2300      	movs	r3, #0
   1d2b8:	4904      	ldr	r1, [pc, #16]	; (1d2cc <bt_l2cap_recv+0x104>)
   1d2ba:	4628      	mov	r0, r5
   1d2bc:	f00a fd8f 	bl	27dde <z_log_msg_finalize>
		net_buf_unref(buf);
   1d2c0:	4620      	mov	r0, r4
   1d2c2:	f00d fe9e 	bl	2b002 <net_buf_unref>
		return;
   1d2c6:	e796      	b.n	1d1f6 <bt_l2cap_recv+0x2e>
   1d2c8:	000301a4 	.word	0x000301a4
   1d2cc:	0002dea0 	.word	0x0002dea0
   1d2d0:	000301c4 	.word	0x000301c4

0001d2d4 <att_op_get_type>:
#endif /* CONFIG_BT_GATT_CLIENT */
};

static att_type_t att_op_get_type(uint8_t op)
{
	switch (op) {
   1d2d4:	2852      	cmp	r0, #82	; 0x52
   1d2d6:	d833      	bhi.n	1d340 <att_op_get_type+0x6c>
   1d2d8:	281b      	cmp	r0, #27
   1d2da:	d321      	bcc.n	1d320 <att_op_get_type+0x4c>
   1d2dc:	f1a0 031b 	sub.w	r3, r0, #27
   1d2e0:	2b37      	cmp	r3, #55	; 0x37
   1d2e2:	d82f      	bhi.n	1d344 <att_op_get_type+0x70>
   1d2e4:	e8df f003 	tbb	[pc, r3]
   1d2e8:	3b392e37 	.word	0x3b392e37
   1d2ec:	2e352a2e 	.word	0x2e352a2e
   1d2f0:	2e2e2e37 	.word	0x2e2e2e37
   1d2f4:	2e2e2e2e 	.word	0x2e2e2e2e
   1d2f8:	2e2e2e2e 	.word	0x2e2e2e2e
   1d2fc:	2e2e2e2e 	.word	0x2e2e2e2e
   1d300:	2e2e2e2e 	.word	0x2e2e2e2e
   1d304:	2e2e2e2e 	.word	0x2e2e2e2e
   1d308:	2e2e2e2e 	.word	0x2e2e2e2e
   1d30c:	2e2e2e2e 	.word	0x2e2e2e2e
   1d310:	2e2e2e2e 	.word	0x2e2e2e2e
   1d314:	2e2e2e2e 	.word	0x2e2e2e2e
   1d318:	2e2e2e2e 	.word	0x2e2e2e2e
   1d31c:	332e2e2e 	.word	0x332e2e2e
   1d320:	2819      	cmp	r0, #25
   1d322:	d80f      	bhi.n	1d344 <att_op_get_type+0x70>
   1d324:	b243      	sxtb	r3, r0
   1d326:	b16b      	cbz	r3, 1d344 <att_op_get_type+0x70>
   1d328:	2301      	movs	r3, #1
   1d32a:	4083      	lsls	r3, r0
   1d32c:	4a10      	ldr	r2, [pc, #64]	; (1d370 <att_op_get_type+0x9c>)
   1d32e:	401a      	ands	r2, r3
   1d330:	b9ba      	cbnz	r2, 1d362 <att_op_get_type+0x8e>
   1d332:	4a10      	ldr	r2, [pc, #64]	; (1d374 <att_op_get_type+0xa0>)
   1d334:	401a      	ands	r2, r3
   1d336:	b12a      	cbz	r2, 1d344 <att_op_get_type+0x70>
   1d338:	2001      	movs	r0, #1
   1d33a:	4770      	bx	lr
   1d33c:	2001      	movs	r0, #1
   1d33e:	4770      	bx	lr
   1d340:	28d2      	cmp	r0, #210	; 0xd2
   1d342:	d010      	beq.n	1d366 <att_op_get_type+0x92>
		return ATT_NOTIFICATION;
	case BT_ATT_OP_INDICATE:
		return ATT_INDICATION;
	}

	if (op & ATT_CMD_MASK) {
   1d344:	f010 0f40 	tst.w	r0, #64	; 0x40
   1d348:	d10f      	bne.n	1d36a <att_op_get_type+0x96>
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
   1d34a:	2006      	movs	r0, #6
   1d34c:	4770      	bx	lr
		return ATT_COMMAND;
   1d34e:	2000      	movs	r0, #0
   1d350:	4770      	bx	lr
		return ATT_RESPONSE;
   1d352:	2002      	movs	r0, #2
   1d354:	4770      	bx	lr
		return ATT_NOTIFICATION;
   1d356:	2003      	movs	r0, #3
   1d358:	4770      	bx	lr
		return ATT_INDICATION;
   1d35a:	2005      	movs	r0, #5
   1d35c:	4770      	bx	lr
		return ATT_CONFIRMATION;
   1d35e:	2004      	movs	r0, #4
   1d360:	4770      	bx	lr
		return ATT_RESPONSE;
   1d362:	2002      	movs	r0, #2
   1d364:	4770      	bx	lr
		return ATT_COMMAND;
   1d366:	2000      	movs	r0, #0
   1d368:	4770      	bx	lr
		return ATT_COMMAND;
   1d36a:	2000      	movs	r0, #0
}
   1d36c:	4770      	bx	lr
   1d36e:	bf00      	nop
   1d370:	028aaaaa 	.word	0x028aaaaa
   1d374:	01455554 	.word	0x01455554

0001d378 <att_cb>:
{
   1d378:	b508      	push	{r3, lr}
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   1d37a:	68c3      	ldr	r3, [r0, #12]
   1d37c:	7818      	ldrb	r0, [r3, #0]
   1d37e:	f7ff ffa9 	bl	1d2d4 <att_op_get_type>
	switch (op_type) {
   1d382:	2805      	cmp	r0, #5
   1d384:	d80a      	bhi.n	1d39c <att_cb+0x24>
   1d386:	e8df f000 	tbb	[pc, r0]
   1d38a:	0507      	.short	0x0507
   1d38c:	050b0703 	.word	0x050b0703
   1d390:	4804      	ldr	r0, [pc, #16]	; (1d3a4 <att_cb+0x2c>)
   1d392:	e000      	b.n	1d396 <att_cb+0x1e>
		return att_req_sent;
   1d394:	4804      	ldr	r0, [pc, #16]	; (1d3a8 <att_cb+0x30>)
}
   1d396:	bd08      	pop	{r3, pc}
		return att_tx_complete;
   1d398:	4804      	ldr	r0, [pc, #16]	; (1d3ac <att_cb+0x34>)
   1d39a:	e7fc      	b.n	1d396 <att_cb+0x1e>
	return att_unknown;
   1d39c:	4804      	ldr	r0, [pc, #16]	; (1d3b0 <att_cb+0x38>)
   1d39e:	e7fa      	b.n	1d396 <att_cb+0x1e>
		return att_cfm_sent;
   1d3a0:	4804      	ldr	r0, [pc, #16]	; (1d3b4 <att_cb+0x3c>)
   1d3a2:	e7f8      	b.n	1d396 <att_cb+0x1e>
   1d3a4:	00029abf 	.word	0x00029abf
   1d3a8:	00029a87 	.word	0x00029a87
   1d3ac:	00029a6b 	.word	0x00029a6b
   1d3b0:	00029a4f 	.word	0x00029a4f
   1d3b4:	00029aa3 	.word	0x00029aa3

0001d3b8 <tx_meta_data_alloc>:
{
   1d3b8:	b508      	push	{r3, lr}
   1d3ba:	4602      	mov	r2, r0
   1d3bc:	460b      	mov	r3, r1
	return z_impl_k_queue_get(queue, timeout);
   1d3be:	4802      	ldr	r0, [pc, #8]	; (1d3c8 <tx_meta_data_alloc+0x10>)
   1d3c0:	f007 fec8 	bl	25154 <z_impl_k_queue_get>
}
   1d3c4:	bd08      	pop	{r3, pc}
   1d3c6:	bf00      	nop
   1d3c8:	20000c14 	.word	0x20000c14

0001d3cc <att_get>:

	return 0;
}

static struct bt_att *att_get(struct bt_conn *conn)
{
   1d3cc:	b510      	push	{r4, lr}
   1d3ce:	b082      	sub	sp, #8
	struct bt_l2cap_chan *chan;
	struct bt_att_chan *att_chan;

	if (conn->state != BT_CONN_CONNECTED) {
   1d3d0:	7a83      	ldrb	r3, [r0, #10]
   1d3d2:	2b07      	cmp	r3, #7
   1d3d4:	d109      	bne.n	1d3ea <att_get+0x1e>
		LOG_WRN("Not connected");
		return NULL;
	}

	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   1d3d6:	2104      	movs	r1, #4
   1d3d8:	f00b fed4 	bl	29184 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1d3dc:	4604      	mov	r4, r0
   1d3de:	b3a8      	cbz	r0, 1d44c <att_get+0x80>

	att_chan = ATT_CHAN(chan);
	__ASSERT(atomic_test_bit(att_chan->flags, ATT_CONNECTED),
		 "ATT channel not connected");

	return att_chan->att;
   1d3e0:	f850 4c04 	ldr.w	r4, [r0, #-4]
}
   1d3e4:	4620      	mov	r0, r4
   1d3e6:	b002      	add	sp, #8
   1d3e8:	bd10      	pop	{r4, pc}
		LOG_WRN("Not connected");
   1d3ea:	2006      	movs	r0, #6
   1d3ec:	f7f8 fcec 	bl	15dc8 <z_log_msg_alloc>
   1d3f0:	2200      	movs	r2, #0
   1d3f2:	f36f 0200 	bfc	r2, #0, #1
   1d3f6:	f36f 0241 	bfc	r2, #1, #1
   1d3fa:	f36f 0282 	bfc	r2, #2, #1
   1d3fe:	f36f 02c5 	bfc	r2, #3, #3
   1d402:	2302      	movs	r3, #2
   1d404:	f363 1288 	bfi	r2, r3, #6, #3
   1d408:	2308      	movs	r3, #8
   1d40a:	f363 2252 	bfi	r2, r3, #9, #10
   1d40e:	f36f 42de 	bfc	r2, #19, #12
   1d412:	f36f 72df 	bfc	r2, #31, #1
   1d416:	4604      	mov	r4, r0
   1d418:	b188      	cbz	r0, 1d43e <att_get+0x72>
   1d41a:	f110 0310 	adds.w	r3, r0, #16
   1d41e:	d001      	beq.n	1d424 <att_get+0x58>
   1d420:	4923      	ldr	r1, [pc, #140]	; (1d4b0 <att_get+0xe4>)
   1d422:	6141      	str	r1, [r0, #20]
   1d424:	b15b      	cbz	r3, 1d43e <att_get+0x72>
   1d426:	2302      	movs	r3, #2
   1d428:	f88d 3004 	strb.w	r3, [sp, #4]
   1d42c:	2300      	movs	r3, #0
   1d42e:	f88d 3005 	strb.w	r3, [sp, #5]
   1d432:	f88d 3006 	strb.w	r3, [sp, #6]
   1d436:	f88d 3007 	strb.w	r3, [sp, #7]
   1d43a:	9801      	ldr	r0, [sp, #4]
   1d43c:	6120      	str	r0, [r4, #16]
   1d43e:	2300      	movs	r3, #0
   1d440:	491c      	ldr	r1, [pc, #112]	; (1d4b4 <att_get+0xe8>)
   1d442:	4620      	mov	r0, r4
   1d444:	f00a fccb 	bl	27dde <z_log_msg_finalize>
		return NULL;
   1d448:	2400      	movs	r4, #0
   1d44a:	e7cb      	b.n	1d3e4 <att_get+0x18>
		LOG_ERR("Unable to find ATT channel");
   1d44c:	2006      	movs	r0, #6
   1d44e:	f7f8 fcbb 	bl	15dc8 <z_log_msg_alloc>
   1d452:	2200      	movs	r2, #0
   1d454:	f36f 0200 	bfc	r2, #0, #1
   1d458:	f36f 0241 	bfc	r2, #1, #1
   1d45c:	f36f 0282 	bfc	r2, #2, #1
   1d460:	f36f 02c5 	bfc	r2, #3, #3
   1d464:	2301      	movs	r3, #1
   1d466:	f363 1288 	bfi	r2, r3, #6, #3
   1d46a:	2308      	movs	r3, #8
   1d46c:	f363 2252 	bfi	r2, r3, #9, #10
   1d470:	f36f 42de 	bfc	r2, #19, #12
   1d474:	f36f 72df 	bfc	r2, #31, #1
   1d478:	4684      	mov	ip, r0
   1d47a:	b190      	cbz	r0, 1d4a2 <att_get+0xd6>
   1d47c:	f110 0310 	adds.w	r3, r0, #16
   1d480:	d001      	beq.n	1d486 <att_get+0xba>
   1d482:	490d      	ldr	r1, [pc, #52]	; (1d4b8 <att_get+0xec>)
   1d484:	6141      	str	r1, [r0, #20]
   1d486:	b163      	cbz	r3, 1d4a2 <att_get+0xd6>
   1d488:	2302      	movs	r3, #2
   1d48a:	f88d 3004 	strb.w	r3, [sp, #4]
   1d48e:	2300      	movs	r3, #0
   1d490:	f88d 3005 	strb.w	r3, [sp, #5]
   1d494:	f88d 3006 	strb.w	r3, [sp, #6]
   1d498:	f88d 3007 	strb.w	r3, [sp, #7]
   1d49c:	9801      	ldr	r0, [sp, #4]
   1d49e:	f8cc 0010 	str.w	r0, [ip, #16]
   1d4a2:	2300      	movs	r3, #0
   1d4a4:	4903      	ldr	r1, [pc, #12]	; (1d4b4 <att_get+0xe8>)
   1d4a6:	4660      	mov	r0, ip
   1d4a8:	f00a fc99 	bl	27dde <z_log_msg_finalize>
		return NULL;
   1d4ac:	e79a      	b.n	1d3e4 <att_get+0x18>
   1d4ae:	bf00      	nop
   1d4b0:	00030104 	.word	0x00030104
   1d4b4:	0002de78 	.word	0x0002de78
   1d4b8:	00030224 	.word	0x00030224

0001d4bc <att_chan_new>:
	att_chan_mtu_updated(att_chan);
}
#endif /* CONFIG_BT_EATT */

static struct bt_att_chan *att_chan_new(struct bt_att *att, atomic_val_t flags)
{
   1d4bc:	b570      	push	{r4, r5, r6, lr}
   1d4be:	b082      	sub	sp, #8
   1d4c0:	4605      	mov	r5, r0
   1d4c2:	460e      	mov	r6, r1
	return list->head;
   1d4c4:	6a43      	ldr	r3, [r0, #36]	; 0x24
		.reconfigured = bt_att_reconfigured,
	#endif /* CONFIG_BT_EATT */
	};
	struct bt_att_chan *chan;

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1d4c6:	b103      	cbz	r3, 1d4ca <att_chan_new+0xe>
   1d4c8:	3be0      	subs	r3, #224	; 0xe0
   1d4ca:	9301      	str	r3, [sp, #4]
	int quota = 0;
   1d4cc:	2200      	movs	r2, #0
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1d4ce:	e002      	b.n	1d4d6 <att_chan_new+0x1a>
		if (chan->att == att) {
			quota++;
   1d4d0:	3201      	adds	r2, #1
   1d4d2:	e005      	b.n	1d4e0 <att_chan_new+0x24>
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1d4d4:	9301      	str	r3, [sp, #4]
   1d4d6:	9c01      	ldr	r4, [sp, #4]
   1d4d8:	b16c      	cbz	r4, 1d4f6 <att_chan_new+0x3a>
		if (chan->att == att) {
   1d4da:	6823      	ldr	r3, [r4, #0]
   1d4dc:	42ab      	cmp	r3, r5
   1d4de:	d0f7      	beq.n	1d4d0 <att_chan_new+0x14>
		}

		if (quota == ATT_CHAN_MAX) {
   1d4e0:	2a01      	cmp	r2, #1
   1d4e2:	d062      	beq.n	1d5aa <att_chan_new+0xee>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1d4e4:	f114 03e0 	adds.w	r3, r4, #224	; 0xe0
   1d4e8:	d0f4      	beq.n	1d4d4 <att_chan_new+0x18>
	return node->next;
   1d4ea:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1d4ee:	2b00      	cmp	r3, #0
   1d4f0:	d0f0      	beq.n	1d4d4 <att_chan_new+0x18>
   1d4f2:	3be0      	subs	r3, #224	; 0xe0
   1d4f4:	e7ee      	b.n	1d4d4 <att_chan_new+0x18>
			LOG_DBG("Maximum number of channels reached: %d", quota);
			return NULL;
		}
	}

	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   1d4f6:	2200      	movs	r2, #0
   1d4f8:	2300      	movs	r3, #0
   1d4fa:	a901      	add	r1, sp, #4
   1d4fc:	482c      	ldr	r0, [pc, #176]	; (1d5b0 <att_chan_new+0xf4>)
   1d4fe:	f007 fc27 	bl	24d50 <k_mem_slab_alloc>
   1d502:	bb00      	cbnz	r0, 1d546 <att_chan_new+0x8a>
		LOG_WRN("No available ATT channel for conn %p", att->conn);
		return NULL;
	}

	(void)memset(chan, 0, sizeof(*chan));
   1d504:	22e8      	movs	r2, #232	; 0xe8
   1d506:	2100      	movs	r1, #0
   1d508:	9801      	ldr	r0, [sp, #4]
   1d50a:	f00b f8e9 	bl	286e0 <memset>
	chan->chan.chan.ops = &ops;
   1d50e:	9801      	ldr	r0, [sp, #4]
   1d510:	4b28      	ldr	r3, [pc, #160]	; (1d5b4 <att_chan_new+0xf8>)
   1d512:	6083      	str	r3, [r0, #8]
	k_fifo_init(&chan->tx_queue);
   1d514:	3098      	adds	r0, #152	; 0x98
	z_impl_k_queue_init(queue);
   1d516:	f00f fcf3 	bl	2cf00 <z_impl_k_queue_init>
	atomic_set(chan->flags, flags);
   1d51a:	9b01      	ldr	r3, [sp, #4]
   1d51c:	3390      	adds	r3, #144	; 0x90
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1d51e:	f3bf 8f5b 	dmb	ish
   1d522:	e853 2f00 	ldrex	r2, [r3]
   1d526:	e843 6100 	strex	r1, r6, [r3]
   1d52a:	2900      	cmp	r1, #0
   1d52c:	d1f9      	bne.n	1d522 <att_chan_new+0x66>
   1d52e:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   1d532:	9b01      	ldr	r3, [sp, #4]
   1d534:	601d      	str	r5, [r3, #0]
	att_chan_attach(att, chan);
   1d536:	9901      	ldr	r1, [sp, #4]
   1d538:	4628      	mov	r0, r5
   1d53a:	f00b fed3 	bl	292e4 <att_chan_attach>

	return chan;
   1d53e:	9c01      	ldr	r4, [sp, #4]
}
   1d540:	4620      	mov	r0, r4
   1d542:	b002      	add	sp, #8
   1d544:	bd70      	pop	{r4, r5, r6, pc}
		LOG_WRN("No available ATT channel for conn %p", att->conn);
   1d546:	682e      	ldr	r6, [r5, #0]
   1d548:	2008      	movs	r0, #8
   1d54a:	f7f8 fc3d 	bl	15dc8 <z_log_msg_alloc>
   1d54e:	2200      	movs	r2, #0
   1d550:	f36f 0200 	bfc	r2, #0, #1
   1d554:	f36f 0241 	bfc	r2, #1, #1
   1d558:	f36f 0282 	bfc	r2, #2, #1
   1d55c:	f36f 02c5 	bfc	r2, #3, #3
   1d560:	2302      	movs	r3, #2
   1d562:	f363 1288 	bfi	r2, r3, #6, #3
   1d566:	230c      	movs	r3, #12
   1d568:	f363 2252 	bfi	r2, r3, #9, #10
   1d56c:	f36f 42de 	bfc	r2, #19, #12
   1d570:	f36f 72df 	bfc	r2, #31, #1
   1d574:	4605      	mov	r5, r0
   1d576:	b190      	cbz	r0, 1d59e <att_chan_new+0xe2>
   1d578:	f110 0310 	adds.w	r3, r0, #16
   1d57c:	d002      	beq.n	1d584 <att_chan_new+0xc8>
   1d57e:	490e      	ldr	r1, [pc, #56]	; (1d5b8 <att_chan_new+0xfc>)
   1d580:	6141      	str	r1, [r0, #20]
   1d582:	6186      	str	r6, [r0, #24]
   1d584:	b15b      	cbz	r3, 1d59e <att_chan_new+0xe2>
   1d586:	2303      	movs	r3, #3
   1d588:	f88d 3000 	strb.w	r3, [sp]
   1d58c:	2300      	movs	r3, #0
   1d58e:	f88d 3001 	strb.w	r3, [sp, #1]
   1d592:	f88d 3002 	strb.w	r3, [sp, #2]
   1d596:	f88d 3003 	strb.w	r3, [sp, #3]
   1d59a:	9800      	ldr	r0, [sp, #0]
   1d59c:	6128      	str	r0, [r5, #16]
   1d59e:	2300      	movs	r3, #0
   1d5a0:	4906      	ldr	r1, [pc, #24]	; (1d5bc <att_chan_new+0x100>)
   1d5a2:	4628      	mov	r0, r5
   1d5a4:	f00a fc1b 	bl	27dde <z_log_msg_finalize>
		return NULL;
   1d5a8:	e7ca      	b.n	1d540 <att_chan_new+0x84>
			return NULL;
   1d5aa:	2400      	movs	r4, #0
   1d5ac:	e7c8      	b.n	1d540 <att_chan_new+0x84>
   1d5ae:	bf00      	nop
   1d5b0:	20000b9c 	.word	0x20000b9c
   1d5b4:	20000928 	.word	0x20000928
   1d5b8:	00030240 	.word	0x00030240
   1d5bc:	0002de78 	.word	0x0002de78

0001d5c0 <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   1d5c0:	b570      	push	{r4, r5, r6, lr}
   1d5c2:	b082      	sub	sp, #8
   1d5c4:	4606      	mov	r6, r0
   1d5c6:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan;

	LOG_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   1d5c8:	2200      	movs	r2, #0
   1d5ca:	2300      	movs	r3, #0
   1d5cc:	a901      	add	r1, sp, #4
   1d5ce:	482a      	ldr	r0, [pc, #168]	; (1d678 <bt_att_accept+0xb8>)
   1d5d0:	f007 fbbe 	bl	24d50 <k_mem_slab_alloc>
   1d5d4:	b9d0      	cbnz	r0, 1d60c <bt_att_accept+0x4c>
   1d5d6:	4605      	mov	r5, r0
	return z_impl_z_current_get();
   1d5d8:	f008 fbb6 	bl	25d48 <z_impl_z_current_get>
		LOG_ERR("No available ATT context for conn %p", conn);
		return -ENOMEM;
	}

	att_handle_rsp_thread = k_current_get();
   1d5dc:	4b27      	ldr	r3, [pc, #156]	; (1d67c <bt_att_accept+0xbc>)
   1d5de:	6018      	str	r0, [r3, #0]

	(void)memset(att, 0, sizeof(*att));
   1d5e0:	222c      	movs	r2, #44	; 0x2c
   1d5e2:	2100      	movs	r1, #0
   1d5e4:	9801      	ldr	r0, [sp, #4]
   1d5e6:	f00b f87b 	bl	286e0 <memset>
	att->conn = conn;
   1d5ea:	9b01      	ldr	r3, [sp, #4]
   1d5ec:	601e      	str	r6, [r3, #0]
	sys_slist_init(&att->reqs);
   1d5ee:	9801      	ldr	r0, [sp, #4]
	list->head = NULL;
   1d5f0:	2100      	movs	r1, #0
   1d5f2:	6041      	str	r1, [r0, #4]
	list->tail = NULL;
   1d5f4:	6081      	str	r1, [r0, #8]
	list->head = NULL;
   1d5f6:	6241      	str	r1, [r0, #36]	; 0x24
	list->tail = NULL;
   1d5f8:	6281      	str	r1, [r0, #40]	; 0x28
#if defined(CONFIG_BT_EATT)
	k_work_init_delayable(&att->eatt.connection_work,
			      att_enhanced_connection_work_handler);
#endif /* CONFIG_BT_EATT */

	chan = att_chan_new(att, 0);
   1d5fa:	f7ff ff5f 	bl	1d4bc <att_chan_new>
	if (!chan) {
   1d5fe:	4603      	mov	r3, r0
   1d600:	b3b8      	cbz	r0, 1d672 <bt_att_accept+0xb2>
		return -ENOMEM;
	}

	*ch = &chan->chan.chan;
   1d602:	3304      	adds	r3, #4
   1d604:	6023      	str	r3, [r4, #0]

	return 0;
}
   1d606:	4628      	mov	r0, r5
   1d608:	b002      	add	sp, #8
   1d60a:	bd70      	pop	{r4, r5, r6, pc}
		LOG_ERR("No available ATT context for conn %p", conn);
   1d60c:	2008      	movs	r0, #8
   1d60e:	f7f8 fbdb 	bl	15dc8 <z_log_msg_alloc>
   1d612:	2200      	movs	r2, #0
   1d614:	f36f 0200 	bfc	r2, #0, #1
   1d618:	f36f 0241 	bfc	r2, #1, #1
   1d61c:	f36f 0282 	bfc	r2, #2, #1
   1d620:	f36f 02c5 	bfc	r2, #3, #3
   1d624:	2301      	movs	r3, #1
   1d626:	f363 1288 	bfi	r2, r3, #6, #3
   1d62a:	230c      	movs	r3, #12
   1d62c:	f363 2252 	bfi	r2, r3, #9, #10
   1d630:	f36f 42de 	bfc	r2, #19, #12
   1d634:	f36f 72df 	bfc	r2, #31, #1
   1d638:	4604      	mov	r4, r0
   1d63a:	b190      	cbz	r0, 1d662 <bt_att_accept+0xa2>
   1d63c:	f110 0310 	adds.w	r3, r0, #16
   1d640:	d002      	beq.n	1d648 <bt_att_accept+0x88>
   1d642:	490f      	ldr	r1, [pc, #60]	; (1d680 <bt_att_accept+0xc0>)
   1d644:	6141      	str	r1, [r0, #20]
   1d646:	6186      	str	r6, [r0, #24]
   1d648:	b15b      	cbz	r3, 1d662 <bt_att_accept+0xa2>
   1d64a:	2303      	movs	r3, #3
   1d64c:	f88d 3000 	strb.w	r3, [sp]
   1d650:	2300      	movs	r3, #0
   1d652:	f88d 3001 	strb.w	r3, [sp, #1]
   1d656:	f88d 3002 	strb.w	r3, [sp, #2]
   1d65a:	f88d 3003 	strb.w	r3, [sp, #3]
   1d65e:	9800      	ldr	r0, [sp, #0]
   1d660:	6120      	str	r0, [r4, #16]
   1d662:	2300      	movs	r3, #0
   1d664:	4907      	ldr	r1, [pc, #28]	; (1d684 <bt_att_accept+0xc4>)
   1d666:	4620      	mov	r0, r4
   1d668:	f00a fbb9 	bl	27dde <z_log_msg_finalize>
		return -ENOMEM;
   1d66c:	f06f 050b 	mvn.w	r5, #11
   1d670:	e7c9      	b.n	1d606 <bt_att_accept+0x46>
		return -ENOMEM;
   1d672:	f06f 050b 	mvn.w	r5, #11
   1d676:	e7c6      	b.n	1d606 <bt_att_accept+0x46>
   1d678:	20000b80 	.word	0x20000b80
   1d67c:	20008150 	.word	0x20008150
   1d680:	00030268 	.word	0x00030268
   1d684:	0002de78 	.word	0x0002de78

0001d688 <bt_att_released>:
{
   1d688:	b500      	push	{lr}
   1d68a:	b083      	sub	sp, #12
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1d68c:	3804      	subs	r0, #4
   1d68e:	9001      	str	r0, [sp, #4]
	k_mem_slab_free(&chan_slab, (void **)&chan);
   1d690:	a901      	add	r1, sp, #4
   1d692:	4803      	ldr	r0, [pc, #12]	; (1d6a0 <bt_att_released+0x18>)
   1d694:	f00f fb03 	bl	2cc9e <k_mem_slab_free>
}
   1d698:	b003      	add	sp, #12
   1d69a:	f85d fb04 	ldr.w	pc, [sp], #4
   1d69e:	bf00      	nop
   1d6a0:	20000b9c 	.word	0x20000b9c

0001d6a4 <tx_meta_data_free>:
{
   1d6a4:	b510      	push	{r4, lr}
   1d6a6:	4604      	mov	r4, r0
	(void)memset(data, 0, sizeof(*data));
   1d6a8:	2214      	movs	r2, #20
   1d6aa:	2100      	movs	r1, #0
   1d6ac:	f00b f818 	bl	286e0 <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
   1d6b0:	4621      	mov	r1, r4
   1d6b2:	4802      	ldr	r0, [pc, #8]	; (1d6bc <tx_meta_data_free+0x18>)
   1d6b4:	f00f fc30 	bl	2cf18 <k_queue_append>
}
   1d6b8:	bd10      	pop	{r4, pc}
   1d6ba:	bf00      	nop
   1d6bc:	20000c14 	.word	0x20000c14

0001d6c0 <chan_send>:
{
   1d6c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d6c4:	b085      	sub	sp, #20
   1d6c6:	4605      	mov	r5, r0
   1d6c8:	460c      	mov	r4, r1
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   1d6ca:	698f      	ldr	r7, [r1, #24]
	hdr = (void *)buf->data;
   1d6cc:	68ce      	ldr	r6, [r1, #12]
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   1d6ce:	2102      	movs	r1, #2
   1d6d0:	3090      	adds	r0, #144	; 0x90
   1d6d2:	f00b fe1b 	bl	2930c <atomic_test_bit>
   1d6d6:	2800      	cmp	r0, #0
   1d6d8:	d064      	beq.n	1d7a4 <chan_send+0xe4>
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   1d6da:	7833      	ldrb	r3, [r6, #0]
   1d6dc:	2bd2      	cmp	r3, #210	; 0xd2
   1d6de:	d023      	beq.n	1d728 <chan_send+0x68>
	state->offset = net_buf_simple_headroom(buf);
   1d6e0:	f104 000c 	add.w	r0, r4, #12
   1d6e4:	f00d fd16 	bl	2b114 <net_buf_simple_headroom>
   1d6e8:	4606      	mov	r6, r0
   1d6ea:	f8ad 000c 	strh.w	r0, [sp, #12]
	state->len = buf->len;
   1d6ee:	f8b4 8010 	ldrh.w	r8, [r4, #16]
   1d6f2:	f8ad 800e 	strh.w	r8, [sp, #14]
	data->att_chan = chan;
   1d6f6:	603d      	str	r5, [r7, #0]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1d6f8:	682b      	ldr	r3, [r5, #0]
   1d6fa:	681d      	ldr	r5, [r3, #0]
   1d6fc:	4620      	mov	r0, r4
   1d6fe:	f7ff fe3b 	bl	1d378 <att_cb>
   1d702:	4603      	mov	r3, r0
   1d704:	9700      	str	r7, [sp, #0]
   1d706:	4622      	mov	r2, r4
   1d708:	2104      	movs	r1, #4
   1d70a:	4628      	mov	r0, r5
   1d70c:	f00b fcf3 	bl	290f6 <bt_l2cap_send_cb>
	if (err) {
   1d710:	4681      	mov	r9, r0
   1d712:	b128      	cbz	r0, 1d720 <chan_send+0x60>
	buf->data = buf->__buf + state->offset;
   1d714:	6963      	ldr	r3, [r4, #20]
   1d716:	fa13 f686 	uxtah	r6, r3, r6
   1d71a:	60e6      	str	r6, [r4, #12]
	buf->len = state->len;
   1d71c:	f8a4 8010 	strh.w	r8, [r4, #16]
}
   1d720:	4648      	mov	r0, r9
   1d722:	b005      	add	sp, #20
   1d724:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = bt_smp_sign(chan->att->conn, buf);
   1d728:	682b      	ldr	r3, [r5, #0]
   1d72a:	4621      	mov	r1, r4
   1d72c:	6818      	ldr	r0, [r3, #0]
   1d72e:	f00d fb38 	bl	2ada2 <bt_smp_sign>
		if (err) {
   1d732:	4681      	mov	r9, r0
   1d734:	2800      	cmp	r0, #0
   1d736:	d0d3      	beq.n	1d6e0 <chan_send+0x20>
			LOG_ERR("Error signing data");
   1d738:	2006      	movs	r0, #6
   1d73a:	f7f8 fb45 	bl	15dc8 <z_log_msg_alloc>
   1d73e:	2200      	movs	r2, #0
   1d740:	f36f 0200 	bfc	r2, #0, #1
   1d744:	f36f 0241 	bfc	r2, #1, #1
   1d748:	f36f 0282 	bfc	r2, #2, #1
   1d74c:	f36f 02c5 	bfc	r2, #3, #3
   1d750:	2301      	movs	r3, #1
   1d752:	f363 1288 	bfi	r2, r3, #6, #3
   1d756:	2308      	movs	r3, #8
   1d758:	f363 2252 	bfi	r2, r3, #9, #10
   1d75c:	f36f 42de 	bfc	r2, #19, #12
   1d760:	f36f 72df 	bfc	r2, #31, #1
   1d764:	4605      	mov	r5, r0
   1d766:	b188      	cbz	r0, 1d78c <chan_send+0xcc>
   1d768:	f110 0310 	adds.w	r3, r0, #16
   1d76c:	d001      	beq.n	1d772 <chan_send+0xb2>
   1d76e:	490f      	ldr	r1, [pc, #60]	; (1d7ac <chan_send+0xec>)
   1d770:	6141      	str	r1, [r0, #20]
   1d772:	b15b      	cbz	r3, 1d78c <chan_send+0xcc>
   1d774:	2302      	movs	r3, #2
   1d776:	f88d 3008 	strb.w	r3, [sp, #8]
   1d77a:	2300      	movs	r3, #0
   1d77c:	f88d 3009 	strb.w	r3, [sp, #9]
   1d780:	f88d 300a 	strb.w	r3, [sp, #10]
   1d784:	f88d 300b 	strb.w	r3, [sp, #11]
   1d788:	9802      	ldr	r0, [sp, #8]
   1d78a:	6128      	str	r0, [r5, #16]
   1d78c:	2300      	movs	r3, #0
   1d78e:	4908      	ldr	r1, [pc, #32]	; (1d7b0 <chan_send+0xf0>)
   1d790:	4628      	mov	r0, r5
   1d792:	f00a fb24 	bl	27dde <z_log_msg_finalize>
			tx_meta_data_free(bt_att_tx_meta_data(buf));
   1d796:	69a0      	ldr	r0, [r4, #24]
   1d798:	f7ff ff84 	bl	1d6a4 <tx_meta_data_free>
			net_buf_unref(buf);
   1d79c:	4620      	mov	r0, r4
   1d79e:	f00d fc30 	bl	2b002 <net_buf_unref>
			return err;
   1d7a2:	e7bd      	b.n	1d720 <chan_send+0x60>
		return -EINVAL;
   1d7a4:	f06f 0915 	mvn.w	r9, #21
   1d7a8:	e7ba      	b.n	1d720 <chan_send+0x60>
   1d7aa:	bf00      	nop
   1d7ac:	00030290 	.word	0x00030290
   1d7b0:	0002de78 	.word	0x0002de78

0001d7b4 <read_group_cb>:
{
   1d7b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d7b6:	b085      	sub	sp, #20
   1d7b8:	4605      	mov	r5, r0
   1d7ba:	460e      	mov	r6, r1
   1d7bc:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   1d7be:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1d7c0:	2300      	movs	r3, #0
   1d7c2:	f88d 3008 	strb.w	r3, [sp, #8]
   1d7c6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1d7ca:	f8ad 300a 	strh.w	r3, [sp, #10]
   1d7ce:	a902      	add	r1, sp, #8
   1d7d0:	6800      	ldr	r0, [r0, #0]
   1d7d2:	f00a ffd6 	bl	28782 <bt_uuid_cmp>
   1d7d6:	b158      	cbz	r0, 1d7f0 <read_group_cb+0x3c>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1d7d8:	2300      	movs	r3, #0
   1d7da:	f88d 300c 	strb.w	r3, [sp, #12]
   1d7de:	f642 0301 	movw	r3, #10241	; 0x2801
   1d7e2:	f8ad 300e 	strh.w	r3, [sp, #14]
   1d7e6:	a903      	add	r1, sp, #12
   1d7e8:	6828      	ldr	r0, [r5, #0]
   1d7ea:	f00a ffca 	bl	28782 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1d7ee:	bb28      	cbnz	r0, 1d83c <read_group_cb+0x88>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1d7f0:	6861      	ldr	r1, [r4, #4]
   1d7f2:	6828      	ldr	r0, [r5, #0]
   1d7f4:	f00a ffc5 	bl	28782 <bt_uuid_cmp>
   1d7f8:	bb40      	cbnz	r0, 1d84c <read_group_cb+0x98>
	if (data->rsp->len &&
   1d7fa:	68e3      	ldr	r3, [r4, #12]
   1d7fc:	781a      	ldrb	r2, [r3, #0]
   1d7fe:	b12a      	cbz	r2, 1d80c <read_group_cb+0x58>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   1d800:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   1d802:	68a1      	ldr	r1, [r4, #8]
   1d804:	8a09      	ldrh	r1, [r1, #16]
   1d806:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   1d808:	4293      	cmp	r3, r2
   1d80a:	db24      	blt.n	1d856 <read_group_cb+0xa2>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   1d80c:	68a0      	ldr	r0, [r4, #8]
	return net_buf_simple_add(&buf->b, len);
   1d80e:	2104      	movs	r1, #4
   1d810:	300c      	adds	r0, #12
   1d812:	f00d fc3d 	bl	2b090 <net_buf_simple_add>
   1d816:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1d818:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1d81a:	6923      	ldr	r3, [r4, #16]
   1d81c:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   1d81e:	9401      	str	r4, [sp, #4]
   1d820:	4b10      	ldr	r3, [pc, #64]	; (1d864 <read_group_cb+0xb0>)
   1d822:	9300      	str	r3, [sp, #0]
   1d824:	2300      	movs	r3, #0
   1d826:	68a2      	ldr	r2, [r4, #8]
   1d828:	4629      	mov	r1, r5
   1d82a:	4638      	mov	r0, r7
   1d82c:	f00b ff91 	bl	29752 <att_chan_read>
	if (read < 0) {
   1d830:	2800      	cmp	r0, #0
   1d832:	db12      	blt.n	1d85a <read_group_cb+0xa6>
	if (!data->group) {
   1d834:	6923      	ldr	r3, [r4, #16]
   1d836:	b193      	cbz	r3, 1d85e <read_group_cb+0xaa>
	return BT_GATT_ITER_CONTINUE;
   1d838:	2001      	movs	r0, #1
   1d83a:	e00a      	b.n	1d852 <read_group_cb+0x9e>
		if (data->group &&
   1d83c:	6923      	ldr	r3, [r4, #16]
   1d83e:	b11b      	cbz	r3, 1d848 <read_group_cb+0x94>
		    handle > sys_le16_to_cpu(data->group->end_handle)) {
   1d840:	885a      	ldrh	r2, [r3, #2]
		if (data->group &&
   1d842:	42b2      	cmp	r2, r6
   1d844:	d200      	bcs.n	1d848 <read_group_cb+0x94>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1d846:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   1d848:	2001      	movs	r0, #1
   1d84a:	e002      	b.n	1d852 <read_group_cb+0x9e>
		data->group = NULL;
   1d84c:	2300      	movs	r3, #0
   1d84e:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   1d850:	2001      	movs	r0, #1
}
   1d852:	b005      	add	sp, #20
   1d854:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ITER_STOP;
   1d856:	2000      	movs	r0, #0
   1d858:	e7fb      	b.n	1d852 <read_group_cb+0x9e>
		return BT_GATT_ITER_STOP;
   1d85a:	2000      	movs	r0, #0
   1d85c:	e7f9      	b.n	1d852 <read_group_cb+0x9e>
		return BT_GATT_ITER_STOP;
   1d85e:	2000      	movs	r0, #0
   1d860:	e7f7      	b.n	1d852 <read_group_cb+0x9e>
   1d862:	bf00      	nop
   1d864:	000292b7 	.word	0x000292b7

0001d868 <read_type_cb>:
{
   1d868:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d86c:	b083      	sub	sp, #12
   1d86e:	4606      	mov	r6, r0
   1d870:	4688      	mov	r8, r1
   1d872:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   1d874:	6817      	ldr	r7, [r2, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   1d876:	687d      	ldr	r5, [r7, #4]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1d878:	6851      	ldr	r1, [r2, #4]
   1d87a:	6800      	ldr	r0, [r0, #0]
   1d87c:	f00a ff81 	bl	28782 <bt_uuid_cmp>
   1d880:	b120      	cbz	r0, 1d88c <read_type_cb+0x24>
		return BT_GATT_ITER_CONTINUE;
   1d882:	2501      	movs	r5, #1
}
   1d884:	4628      	mov	r0, r5
   1d886:	b003      	add	sp, #12
   1d888:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1d88c:	2295      	movs	r2, #149	; 0x95
   1d88e:	4631      	mov	r1, r6
   1d890:	4628      	mov	r0, r5
   1d892:	f00d f847 	bl	2a924 <bt_gatt_check_perm>
   1d896:	4605      	mov	r5, r0
   1d898:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1d89a:	b130      	cbz	r0, 1d8aa <read_type_cb+0x42>
		if (data->rsp->len) {
   1d89c:	68e3      	ldr	r3, [r4, #12]
   1d89e:	781b      	ldrb	r3, [r3, #0]
   1d8a0:	b10b      	cbz	r3, 1d8a6 <read_type_cb+0x3e>
			data->err = 0x00;
   1d8a2:	2300      	movs	r3, #0
   1d8a4:	7523      	strb	r3, [r4, #20]
		return BT_GATT_ITER_STOP;
   1d8a6:	2500      	movs	r5, #0
   1d8a8:	e7ec      	b.n	1d884 <read_type_cb+0x1c>
	data->err = 0x00;
   1d8aa:	f04f 0900 	mov.w	r9, #0
   1d8ae:	f884 9014 	strb.w	r9, [r4, #20]
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1d8b2:	68a0      	ldr	r0, [r4, #8]
   1d8b4:	f00d fbcc 	bl	2b050 <net_buf_frag_last>
   1d8b8:	2102      	movs	r1, #2
   1d8ba:	300c      	adds	r0, #12
   1d8bc:	f00d fbe8 	bl	2b090 <net_buf_simple_add>
   1d8c0:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
   1d8c2:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1d8c6:	9401      	str	r4, [sp, #4]
   1d8c8:	4b10      	ldr	r3, [pc, #64]	; (1d90c <read_type_cb+0xa4>)
   1d8ca:	9300      	str	r3, [sp, #0]
   1d8cc:	464b      	mov	r3, r9
   1d8ce:	68a2      	ldr	r2, [r4, #8]
   1d8d0:	4631      	mov	r1, r6
   1d8d2:	4638      	mov	r0, r7
   1d8d4:	f00b ff3d 	bl	29752 <att_chan_read>
	if (read < 0) {
   1d8d8:	2800      	cmp	r0, #0
   1d8da:	db06      	blt.n	1d8ea <read_type_cb+0x82>
	if (!data->item) {
   1d8dc:	6923      	ldr	r3, [r4, #16]
   1d8de:	2b00      	cmp	r3, #0
   1d8e0:	d0d0      	beq.n	1d884 <read_type_cb+0x1c>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   1d8e2:	8d7d      	ldrh	r5, [r7, #42]	; 0x2a
   1d8e4:	68a3      	ldr	r3, [r4, #8]
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
	size_t bytes = 0;
   1d8e6:	2200      	movs	r2, #0

	while (buf) {
   1d8e8:	e006      	b.n	1d8f8 <read_type_cb+0x90>
		data->err = err_to_att(read);
   1d8ea:	f00b fcc8 	bl	2927e <err_to_att>
   1d8ee:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   1d8f0:	e7c8      	b.n	1d884 <read_type_cb+0x1c>
		bytes += buf->len;
   1d8f2:	8a19      	ldrh	r1, [r3, #16]
   1d8f4:	440a      	add	r2, r1
		buf = buf->frags;
   1d8f6:	685b      	ldr	r3, [r3, #4]
	while (buf) {
   1d8f8:	2b00      	cmp	r3, #0
   1d8fa:	d1fa      	bne.n	1d8f2 <read_type_cb+0x8a>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   1d8fc:	1aad      	subs	r5, r5, r2
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1d8fe:	68e3      	ldr	r3, [r4, #12]
   1d900:	781b      	ldrb	r3, [r3, #0]
   1d902:	429d      	cmp	r5, r3
   1d904:	bf94      	ite	ls
   1d906:	2500      	movls	r5, #0
   1d908:	2501      	movhi	r5, #1
   1d90a:	e7bb      	b.n	1d884 <read_type_cb+0x1c>
   1d90c:	0002928f 	.word	0x0002928f

0001d910 <find_type_cb>:
{
   1d910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d914:	b095      	sub	sp, #84	; 0x54
   1d916:	4605      	mov	r5, r0
   1d918:	460e      	mov	r6, r1
   1d91a:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   1d91c:	6817      	ldr	r7, [r2, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   1d91e:	f8d7 8004 	ldr.w	r8, [r7, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1d922:	2300      	movs	r3, #0
   1d924:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   1d928:	f642 0301 	movw	r3, #10241	; 0x2801
   1d92c:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
   1d930:	a912      	add	r1, sp, #72	; 0x48
   1d932:	6800      	ldr	r0, [r0, #0]
   1d934:	f00a ff25 	bl	28782 <bt_uuid_cmp>
   1d938:	b928      	cbnz	r0, 1d946 <find_type_cb+0x36>
	data->group = NULL;
   1d93a:	2300      	movs	r3, #0
   1d93c:	60a3      	str	r3, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
   1d93e:	2001      	movs	r0, #1
}
   1d940:	b015      	add	sp, #84	; 0x54
   1d942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   1d946:	2300      	movs	r3, #0
   1d948:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
   1d94c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1d950:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
   1d954:	a913      	add	r1, sp, #76	; 0x4c
   1d956:	6828      	ldr	r0, [r5, #0]
   1d958:	f00a ff13 	bl	28782 <bt_uuid_cmp>
   1d95c:	b928      	cbnz	r0, 1d96a <find_type_cb+0x5a>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   1d95e:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
   1d960:	6860      	ldr	r0, [r4, #4]
   1d962:	4603      	mov	r3, r0
	size_t bytes = 0;
   1d964:	f04f 0c00 	mov.w	ip, #0
	while (buf) {
   1d968:	e00a      	b.n	1d980 <find_type_cb+0x70>
		if (data->group &&
   1d96a:	68a3      	ldr	r3, [r4, #8]
   1d96c:	b11b      	cbz	r3, 1d976 <find_type_cb+0x66>
		    handle > sys_le16_to_cpu(data->group->end_handle)) {
   1d96e:	885a      	ldrh	r2, [r3, #2]
		if (data->group &&
   1d970:	42b2      	cmp	r2, r6
   1d972:	d200      	bcs.n	1d976 <find_type_cb+0x66>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1d974:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   1d976:	2001      	movs	r0, #1
   1d978:	e7e2      	b.n	1d940 <find_type_cb+0x30>
		bytes += buf->len;
   1d97a:	8a1a      	ldrh	r2, [r3, #16]
   1d97c:	4494      	add	ip, r2
		buf = buf->frags;
   1d97e:	685b      	ldr	r3, [r3, #4]
	while (buf) {
   1d980:	2b00      	cmp	r3, #0
   1d982:	d1fa      	bne.n	1d97a <find_type_cb+0x6a>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   1d984:	eba1 030c 	sub.w	r3, r1, ip
   1d988:	2b03      	cmp	r3, #3
   1d98a:	d801      	bhi.n	1d990 <find_type_cb+0x80>
		return BT_GATT_ITER_STOP;
   1d98c:	2000      	movs	r0, #0
   1d98e:	e7d7      	b.n	1d940 <find_type_cb+0x30>
	frag = net_buf_frag_last(data->buf);
   1d990:	f00d fb5e 	bl	2b050 <net_buf_frag_last>
   1d994:	4681      	mov	r9, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   1d996:	f8b7 a02a 	ldrh.w	sl, [r7, #42]	; 0x2a
   1d99a:	6863      	ldr	r3, [r4, #4]
	size_t bytes = 0;
   1d99c:	2200      	movs	r2, #0
	while (buf) {
   1d99e:	e002      	b.n	1d9a6 <find_type_cb+0x96>
		bytes += buf->len;
   1d9a0:	8a19      	ldrh	r1, [r3, #16]
   1d9a2:	440a      	add	r2, r1
		buf = buf->frags;
   1d9a4:	685b      	ldr	r3, [r3, #4]
	while (buf) {
   1d9a6:	2b00      	cmp	r3, #0
   1d9a8:	d1fa      	bne.n	1d9a0 <find_type_cb+0x90>
   1d9aa:	ebaa 0a02 	sub.w	sl, sl, r2
	return net_buf_simple_tailroom(&buf->b);
   1d9ae:	f109 0b0c 	add.w	fp, r9, #12
   1d9b2:	4658      	mov	r0, fp
   1d9b4:	f00d fbb2 	bl	2b11c <net_buf_simple_tailroom>
   1d9b8:	4582      	cmp	sl, r0
   1d9ba:	d22b      	bcs.n	1da14 <find_type_cb+0x104>
   1d9bc:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   1d9be:	6863      	ldr	r3, [r4, #4]
	size_t bytes = 0;
   1d9c0:	2200      	movs	r2, #0
	while (buf) {
   1d9c2:	e002      	b.n	1d9ca <find_type_cb+0xba>
		bytes += buf->len;
   1d9c4:	8a19      	ldrh	r1, [r3, #16]
   1d9c6:	440a      	add	r2, r1
		buf = buf->frags;
   1d9c8:	685b      	ldr	r3, [r3, #4]
	while (buf) {
   1d9ca:	2b00      	cmp	r3, #0
   1d9cc:	d1fa      	bne.n	1d9c4 <find_type_cb+0xb4>
   1d9ce:	1a80      	subs	r0, r0, r2
	if (!len) {
   1d9d0:	b320      	cbz	r0, 1da1c <find_type_cb+0x10c>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   1d9d2:	686f      	ldr	r7, [r5, #4]
   1d9d4:	2300      	movs	r3, #0
   1d9d6:	9300      	str	r3, [sp, #0]
   1d9d8:	2310      	movs	r3, #16
   1d9da:	aa0e      	add	r2, sp, #56	; 0x38
   1d9dc:	4629      	mov	r1, r5
   1d9de:	4640      	mov	r0, r8
   1d9e0:	47b8      	blx	r7
	if (read < 0) {
   1d9e2:	1e05      	subs	r5, r0, #0
   1d9e4:	dba9      	blt.n	1d93a <find_type_cb+0x2a>
	if (read != data->value_len) {
   1d9e6:	7c22      	ldrb	r2, [r4, #16]
   1d9e8:	42aa      	cmp	r2, r5
   1d9ea:	f000 808a 	beq.w	1db02 <find_type_cb+0x1f2>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1d9ee:	68e1      	ldr	r1, [r4, #12]
   1d9f0:	a809      	add	r0, sp, #36	; 0x24
   1d9f2:	f00a fee4 	bl	287be <bt_uuid_create>
   1d9f6:	b308      	cbz	r0, 1da3c <find_type_cb+0x12c>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   1d9f8:	b2ea      	uxtb	r2, r5
   1d9fa:	a90e      	add	r1, sp, #56	; 0x38
   1d9fc:	a804      	add	r0, sp, #16
   1d9fe:	f00a fede 	bl	287be <bt_uuid_create>
   1da02:	2800      	cmp	r0, #0
   1da04:	d04c      	beq.n	1daa0 <find_type_cb+0x190>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   1da06:	a904      	add	r1, sp, #16
   1da08:	a809      	add	r0, sp, #36	; 0x24
   1da0a:	f00a feba 	bl	28782 <bt_uuid_cmp>
   1da0e:	2800      	cmp	r0, #0
   1da10:	d07f      	beq.n	1db12 <find_type_cb+0x202>
   1da12:	e792      	b.n	1d93a <find_type_cb+0x2a>
	return net_buf_simple_tailroom(&buf->b);
   1da14:	4658      	mov	r0, fp
   1da16:	f00d fb81 	bl	2b11c <net_buf_simple_tailroom>
   1da1a:	e7d9      	b.n	1d9d0 <find_type_cb+0xc0>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   1da1c:	6863      	ldr	r3, [r4, #4]
   1da1e:	7a98      	ldrb	r0, [r3, #10]
   1da20:	f002 fb10 	bl	20044 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1da24:	2200      	movs	r2, #0
   1da26:	2300      	movs	r3, #0
   1da28:	f00d faa4 	bl	2af74 <net_buf_alloc_fixed>
		if (!frag) {
   1da2c:	4681      	mov	r9, r0
   1da2e:	2800      	cmp	r0, #0
   1da30:	d086      	beq.n	1d940 <find_type_cb+0x30>
		net_buf_frag_add(data->buf, frag);
   1da32:	4601      	mov	r1, r0
   1da34:	6860      	ldr	r0, [r4, #4]
   1da36:	f00d fb1c 	bl	2b072 <net_buf_frag_add>
   1da3a:	e7ca      	b.n	1d9d2 <find_type_cb+0xc2>
			LOG_WRN("Unable to create UUID: size %u", data->value_len);
   1da3c:	7c26      	ldrb	r6, [r4, #16]
   1da3e:	2008      	movs	r0, #8
   1da40:	f7f8 f9c2 	bl	15dc8 <z_log_msg_alloc>
   1da44:	2200      	movs	r2, #0
   1da46:	f36f 0200 	bfc	r2, #0, #1
   1da4a:	f36f 0241 	bfc	r2, #1, #1
   1da4e:	f36f 0282 	bfc	r2, #2, #1
   1da52:	f36f 02c5 	bfc	r2, #3, #3
   1da56:	2302      	movs	r3, #2
   1da58:	f363 1288 	bfi	r2, r3, #6, #3
   1da5c:	230c      	movs	r3, #12
   1da5e:	f363 2252 	bfi	r2, r3, #9, #10
   1da62:	f36f 42de 	bfc	r2, #19, #12
   1da66:	f36f 72df 	bfc	r2, #31, #1
   1da6a:	4605      	mov	r5, r0
   1da6c:	b190      	cbz	r0, 1da94 <find_type_cb+0x184>
   1da6e:	f110 0310 	adds.w	r3, r0, #16
   1da72:	d002      	beq.n	1da7a <find_type_cb+0x16a>
   1da74:	492d      	ldr	r1, [pc, #180]	; (1db2c <find_type_cb+0x21c>)
   1da76:	6141      	str	r1, [r0, #20]
   1da78:	6186      	str	r6, [r0, #24]
   1da7a:	b15b      	cbz	r3, 1da94 <find_type_cb+0x184>
   1da7c:	2303      	movs	r3, #3
   1da7e:	f88d 3010 	strb.w	r3, [sp, #16]
   1da82:	2300      	movs	r3, #0
   1da84:	f88d 3011 	strb.w	r3, [sp, #17]
   1da88:	f88d 3012 	strb.w	r3, [sp, #18]
   1da8c:	f88d 3013 	strb.w	r3, [sp, #19]
   1da90:	9804      	ldr	r0, [sp, #16]
   1da92:	6128      	str	r0, [r5, #16]
   1da94:	2300      	movs	r3, #0
   1da96:	4926      	ldr	r1, [pc, #152]	; (1db30 <find_type_cb+0x220>)
   1da98:	4628      	mov	r0, r5
   1da9a:	f00a f9a0 	bl	27dde <z_log_msg_finalize>
			goto skip;
   1da9e:	e74c      	b.n	1d93a <find_type_cb+0x2a>
			LOG_WRN("Unable to create UUID: size %d", read);
   1daa0:	2008      	movs	r0, #8
   1daa2:	f7f8 f991 	bl	15dc8 <z_log_msg_alloc>
   1daa6:	2200      	movs	r2, #0
   1daa8:	f36f 0200 	bfc	r2, #0, #1
   1daac:	f36f 0241 	bfc	r2, #1, #1
   1dab0:	f36f 0282 	bfc	r2, #2, #1
   1dab4:	f36f 02c5 	bfc	r2, #3, #3
   1dab8:	2302      	movs	r3, #2
   1daba:	f363 1288 	bfi	r2, r3, #6, #3
   1dabe:	230c      	movs	r3, #12
   1dac0:	f363 2252 	bfi	r2, r3, #9, #10
   1dac4:	f36f 42de 	bfc	r2, #19, #12
   1dac8:	f36f 72df 	bfc	r2, #31, #1
   1dacc:	4606      	mov	r6, r0
   1dace:	b190      	cbz	r0, 1daf6 <find_type_cb+0x1e6>
   1dad0:	f110 0310 	adds.w	r3, r0, #16
   1dad4:	d002      	beq.n	1dadc <find_type_cb+0x1cc>
   1dad6:	4917      	ldr	r1, [pc, #92]	; (1db34 <find_type_cb+0x224>)
   1dad8:	6141      	str	r1, [r0, #20]
   1dada:	6185      	str	r5, [r0, #24]
   1dadc:	b15b      	cbz	r3, 1daf6 <find_type_cb+0x1e6>
   1dade:	2303      	movs	r3, #3
   1dae0:	f88d 300c 	strb.w	r3, [sp, #12]
   1dae4:	2300      	movs	r3, #0
   1dae6:	f88d 300d 	strb.w	r3, [sp, #13]
   1daea:	f88d 300e 	strb.w	r3, [sp, #14]
   1daee:	f88d 300f 	strb.w	r3, [sp, #15]
   1daf2:	9803      	ldr	r0, [sp, #12]
   1daf4:	6130      	str	r0, [r6, #16]
   1daf6:	2300      	movs	r3, #0
   1daf8:	490d      	ldr	r1, [pc, #52]	; (1db30 <find_type_cb+0x220>)
   1dafa:	4630      	mov	r0, r6
   1dafc:	f00a f96f 	bl	27dde <z_log_msg_finalize>
			goto skip;
   1db00:	e71b      	b.n	1d93a <find_type_cb+0x2a>
	} else if (memcmp(data->value, uuid, read)) {
   1db02:	462a      	mov	r2, r5
   1db04:	a90e      	add	r1, sp, #56	; 0x38
   1db06:	68e0      	ldr	r0, [r4, #12]
   1db08:	f00a fda9 	bl	2865e <memcmp>
   1db0c:	2800      	cmp	r0, #0
   1db0e:	f47f af14 	bne.w	1d93a <find_type_cb+0x2a>
	data->err = 0x00;
   1db12:	2300      	movs	r3, #0
   1db14:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   1db16:	2104      	movs	r1, #4
   1db18:	f109 000c 	add.w	r0, r9, #12
   1db1c:	f00d fab8 	bl	2b090 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   1db20:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1db22:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1db24:	68a3      	ldr	r3, [r4, #8]
   1db26:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   1db28:	2001      	movs	r0, #1
   1db2a:	e709      	b.n	1d940 <find_type_cb+0x30>
   1db2c:	000302a4 	.word	0x000302a4
   1db30:	0002de78 	.word	0x0002de78
   1db34:	000302c4 	.word	0x000302c4

0001db38 <bt_att_connected>:
{
   1db38:	b510      	push	{r4, lr}
   1db3a:	4604      	mov	r4, r0
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   1db3c:	3804      	subs	r0, #4
	atomic_set_bit(att_chan->flags, ATT_CONNECTED);
   1db3e:	f104 038c 	add.w	r3, r4, #140	; 0x8c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1db42:	f3bf 8f5b 	dmb	ish
   1db46:	e853 1f00 	ldrex	r1, [r3]
   1db4a:	f041 0104 	orr.w	r1, r1, #4
   1db4e:	e843 1200 	strex	r2, r1, [r3]
   1db52:	2a00      	cmp	r2, #0
   1db54:	d1f7      	bne.n	1db46 <bt_att_connected+0xe>
   1db56:	f3bf 8f5b 	dmb	ish
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1db5a:	2317      	movs	r3, #23
   1db5c:	84e3      	strh	r3, [r4, #38]	; 0x26
		le_chan->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1db5e:	82e3      	strh	r3, [r4, #22]
	att_chan_mtu_updated(att_chan);
   1db60:	f00b fd8f 	bl	29682 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   1db64:	4904      	ldr	r1, [pc, #16]	; (1db78 <bt_att_connected+0x40>)
   1db66:	f104 00ac 	add.w	r0, r4, #172	; 0xac
   1db6a:	f00f faff 	bl	2d16c <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
   1db6e:	6820      	ldr	r0, [r4, #0]
   1db70:	f002 f97e 	bl	1fe70 <bt_gatt_connected>
}
   1db74:	bd10      	pop	{r4, pc}
   1db76:	bf00      	nop
   1db78:	0001e7dd 	.word	0x0001e7dd

0001db7c <bt_att_chan_create_pdu>:
{
   1db7c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1db7e:	b083      	sub	sp, #12
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1db80:	1c55      	adds	r5, r2, #1
   1db82:	8d46      	ldrh	r6, [r0, #42]	; 0x2a
   1db84:	42b5      	cmp	r5, r6
   1db86:	d80c      	bhi.n	1dba2 <bt_att_chan_create_pdu+0x26>
   1db88:	460c      	mov	r4, r1
	switch (att_op_get_type(op)) {
   1db8a:	4608      	mov	r0, r1
   1db8c:	f7ff fba2 	bl	1d2d4 <att_op_get_type>
   1db90:	2802      	cmp	r0, #2
   1db92:	d038      	beq.n	1dc06 <bt_att_chan_create_pdu+0x8a>
   1db94:	2804      	cmp	r0, #4
   1db96:	d036      	beq.n	1dc06 <bt_att_chan_create_pdu+0x8a>
		timeout = K_FOREVER;
   1db98:	f04f 36ff 	mov.w	r6, #4294967295
   1db9c:	f04f 37ff 	mov.w	r7, #4294967295
   1dba0:	e034      	b.n	1dc0c <bt_att_chan_create_pdu+0x90>
		LOG_WRN("ATT MTU exceeded, max %u, wanted %zu", chan->chan.tx.mtu,
   1dba2:	2008      	movs	r0, #8
   1dba4:	f7f8 f910 	bl	15dc8 <z_log_msg_alloc>
   1dba8:	2200      	movs	r2, #0
   1dbaa:	f36f 0200 	bfc	r2, #0, #1
   1dbae:	f36f 0241 	bfc	r2, #1, #1
   1dbb2:	f36f 0282 	bfc	r2, #2, #1
   1dbb6:	f36f 02c5 	bfc	r2, #3, #3
   1dbba:	2302      	movs	r3, #2
   1dbbc:	f363 1288 	bfi	r2, r3, #6, #3
   1dbc0:	2310      	movs	r3, #16
   1dbc2:	f363 2252 	bfi	r2, r3, #9, #10
   1dbc6:	f36f 42de 	bfc	r2, #19, #12
   1dbca:	f36f 72df 	bfc	r2, #31, #1
   1dbce:	4604      	mov	r4, r0
   1dbd0:	b190      	cbz	r0, 1dbf8 <bt_att_chan_create_pdu+0x7c>
   1dbd2:	18c3      	adds	r3, r0, r3
   1dbd4:	d003      	beq.n	1dbde <bt_att_chan_create_pdu+0x62>
   1dbd6:	494c      	ldr	r1, [pc, #304]	; (1dd08 <bt_att_chan_create_pdu+0x18c>)
   1dbd8:	6141      	str	r1, [r0, #20]
   1dbda:	6186      	str	r6, [r0, #24]
   1dbdc:	61c5      	str	r5, [r0, #28]
   1dbde:	b15b      	cbz	r3, 1dbf8 <bt_att_chan_create_pdu+0x7c>
   1dbe0:	2304      	movs	r3, #4
   1dbe2:	f88d 3004 	strb.w	r3, [sp, #4]
   1dbe6:	2300      	movs	r3, #0
   1dbe8:	f88d 3005 	strb.w	r3, [sp, #5]
   1dbec:	f88d 3006 	strb.w	r3, [sp, #6]
   1dbf0:	f88d 3007 	strb.w	r3, [sp, #7]
   1dbf4:	9801      	ldr	r0, [sp, #4]
   1dbf6:	6120      	str	r0, [r4, #16]
   1dbf8:	2300      	movs	r3, #0
   1dbfa:	4944      	ldr	r1, [pc, #272]	; (1dd0c <bt_att_chan_create_pdu+0x190>)
   1dbfc:	4620      	mov	r0, r4
   1dbfe:	f00a f8ee 	bl	27dde <z_log_msg_finalize>
		return NULL;
   1dc02:	2500      	movs	r5, #0
   1dc04:	e018      	b.n	1dc38 <bt_att_chan_create_pdu+0xbc>
		timeout = BT_ATT_TIMEOUT;
   1dc06:	f44f 2670 	mov.w	r6, #983040	; 0xf0000
   1dc0a:	2700      	movs	r7, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   1dc0c:	4632      	mov	r2, r6
   1dc0e:	463b      	mov	r3, r7
   1dc10:	2100      	movs	r1, #0
   1dc12:	4608      	mov	r0, r1
   1dc14:	f00b fa6a 	bl	290ec <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   1dc18:	4605      	mov	r5, r0
   1dc1a:	b180      	cbz	r0, 1dc3e <bt_att_chan_create_pdu+0xc2>
	data = tx_meta_data_alloc(timeout);
   1dc1c:	4630      	mov	r0, r6
   1dc1e:	4639      	mov	r1, r7
   1dc20:	f7ff fbca 	bl	1d3b8 <tx_meta_data_alloc>
	if (!data) {
   1dc24:	4606      	mov	r6, r0
   1dc26:	2800      	cmp	r0, #0
   1dc28:	d03a      	beq.n	1dca0 <bt_att_chan_create_pdu+0x124>
	bt_att_tx_meta_data(buf) = data;
   1dc2a:	61a8      	str	r0, [r5, #24]
   1dc2c:	2101      	movs	r1, #1
   1dc2e:	f105 000c 	add.w	r0, r5, #12
   1dc32:	f00d fa2d 	bl	2b090 <net_buf_simple_add>
	hdr->code = op;
   1dc36:	7004      	strb	r4, [r0, #0]
}
   1dc38:	4628      	mov	r0, r5
   1dc3a:	b003      	add	sp, #12
   1dc3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Unable to allocate buffer for op 0x%02x", op);
   1dc3e:	2008      	movs	r0, #8
   1dc40:	f7f8 f8c2 	bl	15dc8 <z_log_msg_alloc>
   1dc44:	2200      	movs	r2, #0
   1dc46:	f36f 0200 	bfc	r2, #0, #1
   1dc4a:	f36f 0241 	bfc	r2, #1, #1
   1dc4e:	f36f 0282 	bfc	r2, #2, #1
   1dc52:	f36f 02c5 	bfc	r2, #3, #3
   1dc56:	2301      	movs	r3, #1
   1dc58:	f363 1288 	bfi	r2, r3, #6, #3
   1dc5c:	230c      	movs	r3, #12
   1dc5e:	f363 2252 	bfi	r2, r3, #9, #10
   1dc62:	f36f 42de 	bfc	r2, #19, #12
   1dc66:	f36f 72df 	bfc	r2, #31, #1
   1dc6a:	4606      	mov	r6, r0
   1dc6c:	b190      	cbz	r0, 1dc94 <bt_att_chan_create_pdu+0x118>
   1dc6e:	f110 0310 	adds.w	r3, r0, #16
   1dc72:	d002      	beq.n	1dc7a <bt_att_chan_create_pdu+0xfe>
   1dc74:	4926      	ldr	r1, [pc, #152]	; (1dd10 <bt_att_chan_create_pdu+0x194>)
   1dc76:	6141      	str	r1, [r0, #20]
   1dc78:	6184      	str	r4, [r0, #24]
   1dc7a:	b15b      	cbz	r3, 1dc94 <bt_att_chan_create_pdu+0x118>
   1dc7c:	2303      	movs	r3, #3
   1dc7e:	f88d 3004 	strb.w	r3, [sp, #4]
   1dc82:	2300      	movs	r3, #0
   1dc84:	f88d 3005 	strb.w	r3, [sp, #5]
   1dc88:	f88d 3006 	strb.w	r3, [sp, #6]
   1dc8c:	f88d 3007 	strb.w	r3, [sp, #7]
   1dc90:	9801      	ldr	r0, [sp, #4]
   1dc92:	6130      	str	r0, [r6, #16]
   1dc94:	2300      	movs	r3, #0
   1dc96:	491d      	ldr	r1, [pc, #116]	; (1dd0c <bt_att_chan_create_pdu+0x190>)
   1dc98:	4630      	mov	r0, r6
   1dc9a:	f00a f8a0 	bl	27dde <z_log_msg_finalize>
		return NULL;
   1dc9e:	e7cb      	b.n	1dc38 <bt_att_chan_create_pdu+0xbc>
		LOG_WRN("Unable to allocate ATT TX meta");
   1dca0:	2006      	movs	r0, #6
   1dca2:	f7f8 f891 	bl	15dc8 <z_log_msg_alloc>
   1dca6:	2200      	movs	r2, #0
   1dca8:	f36f 0200 	bfc	r2, #0, #1
   1dcac:	f36f 0241 	bfc	r2, #1, #1
   1dcb0:	f36f 0282 	bfc	r2, #2, #1
   1dcb4:	f36f 02c5 	bfc	r2, #3, #3
   1dcb8:	2302      	movs	r3, #2
   1dcba:	f363 1288 	bfi	r2, r3, #6, #3
   1dcbe:	2308      	movs	r3, #8
   1dcc0:	f363 2252 	bfi	r2, r3, #9, #10
   1dcc4:	f36f 42de 	bfc	r2, #19, #12
   1dcc8:	f36f 72df 	bfc	r2, #31, #1
   1dccc:	4604      	mov	r4, r0
   1dcce:	b188      	cbz	r0, 1dcf4 <bt_att_chan_create_pdu+0x178>
   1dcd0:	f110 0310 	adds.w	r3, r0, #16
   1dcd4:	d001      	beq.n	1dcda <bt_att_chan_create_pdu+0x15e>
   1dcd6:	490f      	ldr	r1, [pc, #60]	; (1dd14 <bt_att_chan_create_pdu+0x198>)
   1dcd8:	6141      	str	r1, [r0, #20]
   1dcda:	b15b      	cbz	r3, 1dcf4 <bt_att_chan_create_pdu+0x178>
   1dcdc:	2302      	movs	r3, #2
   1dcde:	f88d 3004 	strb.w	r3, [sp, #4]
   1dce2:	2300      	movs	r3, #0
   1dce4:	f88d 3005 	strb.w	r3, [sp, #5]
   1dce8:	f88d 3006 	strb.w	r3, [sp, #6]
   1dcec:	f88d 3007 	strb.w	r3, [sp, #7]
   1dcf0:	9801      	ldr	r0, [sp, #4]
   1dcf2:	6120      	str	r0, [r4, #16]
   1dcf4:	2300      	movs	r3, #0
   1dcf6:	4905      	ldr	r1, [pc, #20]	; (1dd0c <bt_att_chan_create_pdu+0x190>)
   1dcf8:	4620      	mov	r0, r4
   1dcfa:	f00a f870 	bl	27dde <z_log_msg_finalize>
		net_buf_unref(buf);
   1dcfe:	4628      	mov	r0, r5
   1dd00:	f00d f97f 	bl	2b002 <net_buf_unref>
		return NULL;
   1dd04:	4635      	mov	r5, r6
   1dd06:	e797      	b.n	1dc38 <bt_att_chan_create_pdu+0xbc>
   1dd08:	000302e4 	.word	0x000302e4
   1dd0c:	0002de78 	.word	0x0002de78
   1dd10:	000300b8 	.word	0x000300b8
   1dd14:	0003030c 	.word	0x0003030c

0001dd18 <bt_att_recv>:
{
   1dd18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1dd1c:	b083      	sub	sp, #12
	if (buf->len < sizeof(*hdr)) {
   1dd1e:	8a0b      	ldrh	r3, [r1, #16]
   1dd20:	b16b      	cbz	r3, 1dd3e <bt_att_recv+0x26>
   1dd22:	4606      	mov	r6, r0
   1dd24:	460d      	mov	r5, r1
   1dd26:	1f07      	subs	r7, r0, #4
	return net_buf_simple_pull_mem(&buf->b, len);
   1dd28:	2101      	movs	r1, #1
   1dd2a:	f105 000c 	add.w	r0, r5, #12
   1dd2e:	f00d f9d9 	bl	2b0e4 <net_buf_simple_pull_mem>
   1dd32:	4604      	mov	r4, r0
	if (!att_chan->att) {
   1dd34:	f856 3c04 	ldr.w	r3, [r6, #-4]
   1dd38:	b383      	cbz	r3, 1dd9c <bt_att_recv+0x84>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1dd3a:	2300      	movs	r3, #0
   1dd3c:	e033      	b.n	1dda6 <bt_att_recv+0x8e>
		LOG_ERR("Too small ATT PDU received");
   1dd3e:	2006      	movs	r0, #6
   1dd40:	f7f8 f842 	bl	15dc8 <z_log_msg_alloc>
   1dd44:	2200      	movs	r2, #0
   1dd46:	f36f 0200 	bfc	r2, #0, #1
   1dd4a:	f36f 0241 	bfc	r2, #1, #1
   1dd4e:	f36f 0282 	bfc	r2, #2, #1
   1dd52:	f36f 02c5 	bfc	r2, #3, #3
   1dd56:	2301      	movs	r3, #1
   1dd58:	f363 1288 	bfi	r2, r3, #6, #3
   1dd5c:	2308      	movs	r3, #8
   1dd5e:	f363 2252 	bfi	r2, r3, #9, #10
   1dd62:	f36f 42de 	bfc	r2, #19, #12
   1dd66:	f36f 72df 	bfc	r2, #31, #1
   1dd6a:	4604      	mov	r4, r0
   1dd6c:	b188      	cbz	r0, 1dd92 <bt_att_recv+0x7a>
   1dd6e:	f110 0310 	adds.w	r3, r0, #16
   1dd72:	d001      	beq.n	1dd78 <bt_att_recv+0x60>
   1dd74:	4994      	ldr	r1, [pc, #592]	; (1dfc8 <bt_att_recv+0x2b0>)
   1dd76:	6141      	str	r1, [r0, #20]
   1dd78:	b15b      	cbz	r3, 1dd92 <bt_att_recv+0x7a>
   1dd7a:	2302      	movs	r3, #2
   1dd7c:	f88d 3004 	strb.w	r3, [sp, #4]
   1dd80:	2300      	movs	r3, #0
   1dd82:	f88d 3005 	strb.w	r3, [sp, #5]
   1dd86:	f88d 3006 	strb.w	r3, [sp, #6]
   1dd8a:	f88d 3007 	strb.w	r3, [sp, #7]
   1dd8e:	9801      	ldr	r0, [sp, #4]
   1dd90:	6120      	str	r0, [r4, #16]
   1dd92:	2300      	movs	r3, #0
   1dd94:	498d      	ldr	r1, [pc, #564]	; (1dfcc <bt_att_recv+0x2b4>)
   1dd96:	4620      	mov	r0, r4
   1dd98:	f00a f821 	bl	27dde <z_log_msg_finalize>
}
   1dd9c:	2000      	movs	r0, #0
   1dd9e:	b003      	add	sp, #12
   1dda0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1dda4:	3301      	adds	r3, #1
   1dda6:	2b1d      	cmp	r3, #29
   1dda8:	d829      	bhi.n	1ddfe <bt_att_recv+0xe6>
		if (hdr->code == handlers[i].op) {
   1ddaa:	f894 c000 	ldrb.w	ip, [r4]
   1ddae:	4a88      	ldr	r2, [pc, #544]	; (1dfd0 <bt_att_recv+0x2b8>)
   1ddb0:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   1ddb4:	4594      	cmp	ip, r2
   1ddb6:	d1f5      	bne.n	1dda4 <bt_att_recv+0x8c>
			handler = &handlers[i];
   1ddb8:	4a85      	ldr	r2, [pc, #532]	; (1dfd0 <bt_att_recv+0x2b8>)
   1ddba:	eb02 08c3 	add.w	r8, r2, r3, lsl #3
		if (handler->type == ATT_REQUEST &&
   1ddbe:	f898 9002 	ldrb.w	r9, [r8, #2]
   1ddc2:	f1b9 0f01 	cmp.w	r9, #1
   1ddc6:	d05a      	beq.n	1de7e <bt_att_recv+0x166>
		} else if (handler->type == ATT_INDICATION &&
   1ddc8:	f1b9 0f05 	cmp.w	r9, #5
   1ddcc:	f000 808e 	beq.w	1deec <bt_att_recv+0x1d4>
	if (buf->len < handler->expect_len) {
   1ddd0:	8a2e      	ldrh	r6, [r5, #16]
   1ddd2:	f898 3001 	ldrb.w	r3, [r8, #1]
   1ddd6:	429e      	cmp	r6, r3
   1ddd8:	f0c0 80c0 	bcc.w	1df5c <bt_att_recv+0x244>
		err = handler->func(att_chan, buf);
   1dddc:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1dde0:	4629      	mov	r1, r5
   1dde2:	4638      	mov	r0, r7
   1dde4:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   1dde6:	f1b9 0f01 	cmp.w	r9, #1
   1ddea:	d1d7      	bne.n	1dd9c <bt_att_recv+0x84>
   1ddec:	2800      	cmp	r0, #0
   1ddee:	d0d5      	beq.n	1dd9c <bt_att_recv+0x84>
		send_err_rsp(att_chan, hdr->code, 0, err);
   1ddf0:	4603      	mov	r3, r0
   1ddf2:	2200      	movs	r2, #0
   1ddf4:	7821      	ldrb	r1, [r4, #0]
   1ddf6:	4638      	mov	r0, r7
   1ddf8:	f00b fe89 	bl	29b0e <send_err_rsp>
   1ddfc:	e7ce      	b.n	1dd9c <bt_att_recv+0x84>
		LOG_WRN("Unhandled ATT code 0x%02x", hdr->code);
   1ddfe:	7826      	ldrb	r6, [r4, #0]
   1de00:	2008      	movs	r0, #8
   1de02:	f7f7 ffe1 	bl	15dc8 <z_log_msg_alloc>
   1de06:	2200      	movs	r2, #0
   1de08:	f36f 0200 	bfc	r2, #0, #1
   1de0c:	f36f 0241 	bfc	r2, #1, #1
   1de10:	f36f 0282 	bfc	r2, #2, #1
   1de14:	f36f 02c5 	bfc	r2, #3, #3
   1de18:	2302      	movs	r3, #2
   1de1a:	f363 1288 	bfi	r2, r3, #6, #3
   1de1e:	230c      	movs	r3, #12
   1de20:	f363 2252 	bfi	r2, r3, #9, #10
   1de24:	f36f 42de 	bfc	r2, #19, #12
   1de28:	f36f 72df 	bfc	r2, #31, #1
   1de2c:	4605      	mov	r5, r0
   1de2e:	b190      	cbz	r0, 1de56 <bt_att_recv+0x13e>
   1de30:	f110 0310 	adds.w	r3, r0, #16
   1de34:	d002      	beq.n	1de3c <bt_att_recv+0x124>
   1de36:	4967      	ldr	r1, [pc, #412]	; (1dfd4 <bt_att_recv+0x2bc>)
   1de38:	6141      	str	r1, [r0, #20]
   1de3a:	6186      	str	r6, [r0, #24]
   1de3c:	b15b      	cbz	r3, 1de56 <bt_att_recv+0x13e>
   1de3e:	2303      	movs	r3, #3
   1de40:	f88d 3004 	strb.w	r3, [sp, #4]
   1de44:	2300      	movs	r3, #0
   1de46:	f88d 3005 	strb.w	r3, [sp, #5]
   1de4a:	f88d 3006 	strb.w	r3, [sp, #6]
   1de4e:	f88d 3007 	strb.w	r3, [sp, #7]
   1de52:	9801      	ldr	r0, [sp, #4]
   1de54:	6128      	str	r0, [r5, #16]
   1de56:	2300      	movs	r3, #0
   1de58:	495c      	ldr	r1, [pc, #368]	; (1dfcc <bt_att_recv+0x2b4>)
   1de5a:	4628      	mov	r0, r5
   1de5c:	f009 ffbf 	bl	27dde <z_log_msg_finalize>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   1de60:	7824      	ldrb	r4, [r4, #0]
   1de62:	4620      	mov	r0, r4
   1de64:	f7ff fa36 	bl	1d2d4 <att_op_get_type>
   1de68:	2800      	cmp	r0, #0
   1de6a:	d097      	beq.n	1dd9c <bt_att_recv+0x84>
   1de6c:	2805      	cmp	r0, #5
   1de6e:	d095      	beq.n	1dd9c <bt_att_recv+0x84>
			send_err_rsp(att_chan, hdr->code, 0,
   1de70:	2306      	movs	r3, #6
   1de72:	2200      	movs	r2, #0
   1de74:	4621      	mov	r1, r4
   1de76:	4638      	mov	r0, r7
   1de78:	f00b fe49 	bl	29b0e <send_err_rsp>
		return 0;
   1de7c:	e78e      	b.n	1dd9c <bt_att_recv+0x84>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   1de7e:	2100      	movs	r1, #0
   1de80:	f106 008c 	add.w	r0, r6, #140	; 0x8c
   1de84:	f00b fdc2 	bl	29a0c <atomic_test_and_set_bit>
		if (handler->type == ATT_REQUEST &&
   1de88:	2800      	cmp	r0, #0
   1de8a:	d09d      	beq.n	1ddc8 <bt_att_recv+0xb0>
			LOG_WRN("Ignoring unexpected request");
   1de8c:	2006      	movs	r0, #6
   1de8e:	f7f7 ff9b 	bl	15dc8 <z_log_msg_alloc>
   1de92:	2200      	movs	r2, #0
   1de94:	f36f 0200 	bfc	r2, #0, #1
   1de98:	f36f 0241 	bfc	r2, #1, #1
   1de9c:	f36f 0282 	bfc	r2, #2, #1
   1dea0:	f36f 02c5 	bfc	r2, #3, #3
   1dea4:	2302      	movs	r3, #2
   1dea6:	f363 1288 	bfi	r2, r3, #6, #3
   1deaa:	2308      	movs	r3, #8
   1deac:	f363 2252 	bfi	r2, r3, #9, #10
   1deb0:	f36f 42de 	bfc	r2, #19, #12
   1deb4:	f36f 72df 	bfc	r2, #31, #1
   1deb8:	4604      	mov	r4, r0
   1deba:	b188      	cbz	r0, 1dee0 <bt_att_recv+0x1c8>
   1debc:	f110 0310 	adds.w	r3, r0, #16
   1dec0:	d001      	beq.n	1dec6 <bt_att_recv+0x1ae>
   1dec2:	4945      	ldr	r1, [pc, #276]	; (1dfd8 <bt_att_recv+0x2c0>)
   1dec4:	6141      	str	r1, [r0, #20]
   1dec6:	b15b      	cbz	r3, 1dee0 <bt_att_recv+0x1c8>
   1dec8:	2302      	movs	r3, #2
   1deca:	f88d 3004 	strb.w	r3, [sp, #4]
   1dece:	2300      	movs	r3, #0
   1ded0:	f88d 3005 	strb.w	r3, [sp, #5]
   1ded4:	f88d 3006 	strb.w	r3, [sp, #6]
   1ded8:	f88d 3007 	strb.w	r3, [sp, #7]
   1dedc:	9801      	ldr	r0, [sp, #4]
   1dede:	6120      	str	r0, [r4, #16]
   1dee0:	2300      	movs	r3, #0
   1dee2:	493a      	ldr	r1, [pc, #232]	; (1dfcc <bt_att_recv+0x2b4>)
   1dee4:	4620      	mov	r0, r4
   1dee6:	f009 ff7a 	bl	27dde <z_log_msg_finalize>
			return 0;
   1deea:	e757      	b.n	1dd9c <bt_att_recv+0x84>
			   atomic_test_and_set_bit(att_chan->flags,
   1deec:	2101      	movs	r1, #1
   1deee:	f106 008c 	add.w	r0, r6, #140	; 0x8c
   1def2:	f00b fd8b 	bl	29a0c <atomic_test_and_set_bit>
		} else if (handler->type == ATT_INDICATION &&
   1def6:	2800      	cmp	r0, #0
   1def8:	f43f af6a 	beq.w	1ddd0 <bt_att_recv+0xb8>
			LOG_WRN("Ignoring unexpected indication");
   1defc:	2006      	movs	r0, #6
   1defe:	f7f7 ff63 	bl	15dc8 <z_log_msg_alloc>
   1df02:	2200      	movs	r2, #0
   1df04:	f36f 0200 	bfc	r2, #0, #1
   1df08:	f36f 0241 	bfc	r2, #1, #1
   1df0c:	f36f 0282 	bfc	r2, #2, #1
   1df10:	f36f 02c5 	bfc	r2, #3, #3
   1df14:	2302      	movs	r3, #2
   1df16:	f363 1288 	bfi	r2, r3, #6, #3
   1df1a:	2308      	movs	r3, #8
   1df1c:	f363 2252 	bfi	r2, r3, #9, #10
   1df20:	f36f 42de 	bfc	r2, #19, #12
   1df24:	f36f 72df 	bfc	r2, #31, #1
   1df28:	4604      	mov	r4, r0
   1df2a:	b188      	cbz	r0, 1df50 <bt_att_recv+0x238>
   1df2c:	f110 0310 	adds.w	r3, r0, #16
   1df30:	d001      	beq.n	1df36 <bt_att_recv+0x21e>
   1df32:	492a      	ldr	r1, [pc, #168]	; (1dfdc <bt_att_recv+0x2c4>)
   1df34:	6141      	str	r1, [r0, #20]
   1df36:	b15b      	cbz	r3, 1df50 <bt_att_recv+0x238>
   1df38:	2302      	movs	r3, #2
   1df3a:	f88d 3004 	strb.w	r3, [sp, #4]
   1df3e:	2300      	movs	r3, #0
   1df40:	f88d 3005 	strb.w	r3, [sp, #5]
   1df44:	f88d 3006 	strb.w	r3, [sp, #6]
   1df48:	f88d 3007 	strb.w	r3, [sp, #7]
   1df4c:	9801      	ldr	r0, [sp, #4]
   1df4e:	6120      	str	r0, [r4, #16]
   1df50:	2300      	movs	r3, #0
   1df52:	491e      	ldr	r1, [pc, #120]	; (1dfcc <bt_att_recv+0x2b4>)
   1df54:	4620      	mov	r0, r4
   1df56:	f009 ff42 	bl	27dde <z_log_msg_finalize>
			return 0;
   1df5a:	e71f      	b.n	1dd9c <bt_att_recv+0x84>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1df5c:	f894 8000 	ldrb.w	r8, [r4]
   1df60:	2008      	movs	r0, #8
   1df62:	f7f7 ff31 	bl	15dc8 <z_log_msg_alloc>
   1df66:	2200      	movs	r2, #0
   1df68:	f36f 0200 	bfc	r2, #0, #1
   1df6c:	f36f 0241 	bfc	r2, #1, #1
   1df70:	f36f 0282 	bfc	r2, #2, #1
   1df74:	f36f 02c5 	bfc	r2, #3, #3
   1df78:	2301      	movs	r3, #1
   1df7a:	f363 1288 	bfi	r2, r3, #6, #3
   1df7e:	2310      	movs	r3, #16
   1df80:	f363 2252 	bfi	r2, r3, #9, #10
   1df84:	f36f 42de 	bfc	r2, #19, #12
   1df88:	f36f 72df 	bfc	r2, #31, #1
   1df8c:	4605      	mov	r5, r0
   1df8e:	b198      	cbz	r0, 1dfb8 <bt_att_recv+0x2a0>
   1df90:	18c3      	adds	r3, r0, r3
   1df92:	d004      	beq.n	1df9e <bt_att_recv+0x286>
   1df94:	4912      	ldr	r1, [pc, #72]	; (1dfe0 <bt_att_recv+0x2c8>)
   1df96:	6141      	str	r1, [r0, #20]
   1df98:	6186      	str	r6, [r0, #24]
   1df9a:	f8c0 801c 	str.w	r8, [r0, #28]
   1df9e:	b15b      	cbz	r3, 1dfb8 <bt_att_recv+0x2a0>
   1dfa0:	2304      	movs	r3, #4
   1dfa2:	f88d 3004 	strb.w	r3, [sp, #4]
   1dfa6:	2300      	movs	r3, #0
   1dfa8:	f88d 3005 	strb.w	r3, [sp, #5]
   1dfac:	f88d 3006 	strb.w	r3, [sp, #6]
   1dfb0:	f88d 3007 	strb.w	r3, [sp, #7]
   1dfb4:	9801      	ldr	r0, [sp, #4]
   1dfb6:	6128      	str	r0, [r5, #16]
   1dfb8:	2300      	movs	r3, #0
   1dfba:	4904      	ldr	r1, [pc, #16]	; (1dfcc <bt_att_recv+0x2b4>)
   1dfbc:	4628      	mov	r0, r5
   1dfbe:	f009 ff0e 	bl	27dde <z_log_msg_finalize>
		err = BT_ATT_ERR_INVALID_PDU;
   1dfc2:	2004      	movs	r0, #4
   1dfc4:	e70f      	b.n	1dde6 <bt_att_recv+0xce>
   1dfc6:	bf00      	nop
   1dfc8:	0003032c 	.word	0x0003032c
   1dfcc:	0002de78 	.word	0x0002de78
   1dfd0:	00030400 	.word	0x00030400
   1dfd4:	00030348 	.word	0x00030348
   1dfd8:	00030364 	.word	0x00030364
   1dfdc:	00030380 	.word	0x00030380
   1dfe0:	000303a0 	.word	0x000303a0

0001dfe4 <att_write_rsp>:
{
   1dfe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1dfe8:	b08a      	sub	sp, #40	; 0x28
   1dfea:	4604      	mov	r4, r0
   1dfec:	4617      	mov	r7, r2
   1dfee:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1dff0:	6803      	ldr	r3, [r0, #0]
   1dff2:	4688      	mov	r8, r1
   1dff4:	3900      	subs	r1, #0
   1dff6:	bf18      	it	ne
   1dff8:	2101      	movne	r1, #1
   1dffa:	6818      	ldr	r0, [r3, #0]
   1dffc:	f00c fe4f 	bl	2ac9e <bt_gatt_change_aware>
   1e000:	b128      	cbz	r0, 1e00e <att_write_rsp+0x2a>
	if (!handle) {
   1e002:	b975      	cbnz	r5, 1e022 <att_write_rsp+0x3e>
		return BT_ATT_ERR_INVALID_HANDLE;
   1e004:	2601      	movs	r6, #1
}
   1e006:	4630      	mov	r0, r6
   1e008:	b00a      	add	sp, #40	; 0x28
   1e00a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1e00e:	2105      	movs	r1, #5
   1e010:	f104 0090 	add.w	r0, r4, #144	; 0x90
   1e014:	f00b fcfa 	bl	29a0c <atomic_test_and_set_bit>
   1e018:	b108      	cbz	r0, 1e01e <att_write_rsp+0x3a>
			return 0;
   1e01a:	2600      	movs	r6, #0
   1e01c:	e7f3      	b.n	1e006 <att_write_rsp+0x22>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1e01e:	2612      	movs	r6, #18
   1e020:	e7f1      	b.n	1e006 <att_write_rsp+0x22>
	(void)memset(&data, 0, sizeof(data));
   1e022:	2218      	movs	r2, #24
   1e024:	2100      	movs	r1, #0
   1e026:	a804      	add	r0, sp, #16
   1e028:	f00a fb5a 	bl	286e0 <memset>
	if (rsp) {
   1e02c:	b13f      	cbz	r7, 1e03e <att_write_rsp+0x5a>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   1e02e:	2200      	movs	r2, #0
   1e030:	4639      	mov	r1, r7
   1e032:	4620      	mov	r0, r4
   1e034:	f7ff fda2 	bl	1db7c <bt_att_chan_create_pdu>
   1e038:	9005      	str	r0, [sp, #20]
		if (!data.buf) {
   1e03a:	2800      	cmp	r0, #0
   1e03c:	d03e      	beq.n	1e0bc <att_write_rsp+0xd8>
	data.conn = chan->att->conn;
   1e03e:	6823      	ldr	r3, [r4, #0]
   1e040:	681b      	ldr	r3, [r3, #0]
   1e042:	9304      	str	r3, [sp, #16]
	data.req = req;
   1e044:	f88d 8018 	strb.w	r8, [sp, #24]
	data.offset = offset;
   1e048:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   1e04c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	data.value = value;
   1e050:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1e052:	9307      	str	r3, [sp, #28]
	data.len = len;
   1e054:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   1e058:	f8ad 3020 	strh.w	r3, [sp, #32]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1e05c:	2301      	movs	r3, #1
   1e05e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1e062:	ab04      	add	r3, sp, #16
   1e064:	9302      	str	r3, [sp, #8]
   1e066:	4b16      	ldr	r3, [pc, #88]	; (1e0c0 <att_write_rsp+0xdc>)
   1e068:	9301      	str	r3, [sp, #4]
   1e06a:	2200      	movs	r2, #0
   1e06c:	9200      	str	r2, [sp, #0]
   1e06e:	4613      	mov	r3, r2
   1e070:	4629      	mov	r1, r5
   1e072:	4628      	mov	r0, r5
   1e074:	f001 f886 	bl	1f184 <bt_gatt_foreach_attr_type>
	if (data.err) {
   1e078:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
   1e07c:	b936      	cbnz	r6, 1e08c <att_write_rsp+0xa8>
	if (data.buf) {
   1e07e:	9905      	ldr	r1, [sp, #20]
   1e080:	2900      	cmp	r1, #0
   1e082:	d0c0      	beq.n	1e006 <att_write_rsp+0x22>
		bt_att_chan_send_rsp(chan, data.buf);
   1e084:	4620      	mov	r0, r4
   1e086:	f00b faef 	bl	29668 <bt_att_chan_send_rsp>
   1e08a:	e7bc      	b.n	1e006 <att_write_rsp+0x22>
		if (rsp) {
   1e08c:	b927      	cbnz	r7, 1e098 <att_write_rsp+0xb4>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   1e08e:	f1b8 0f18 	cmp.w	r8, #24
   1e092:	d010      	beq.n	1e0b6 <att_write_rsp+0xd2>
   1e094:	2600      	movs	r6, #0
   1e096:	e7b6      	b.n	1e006 <att_write_rsp+0x22>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1e098:	9b05      	ldr	r3, [sp, #20]
   1e09a:	6998      	ldr	r0, [r3, #24]
   1e09c:	f7ff fb02 	bl	1d6a4 <tx_meta_data_free>
			net_buf_unref(data.buf);
   1e0a0:	9805      	ldr	r0, [sp, #20]
   1e0a2:	f00c ffae 	bl	2b002 <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
   1e0a6:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   1e0aa:	462a      	mov	r2, r5
   1e0ac:	4641      	mov	r1, r8
   1e0ae:	4620      	mov	r0, r4
   1e0b0:	f00b fd2d 	bl	29b0e <send_err_rsp>
   1e0b4:	e7eb      	b.n	1e08e <att_write_rsp+0xaa>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   1e0b6:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
   1e0ba:	e7a4      	b.n	1e006 <att_write_rsp+0x22>
			return BT_ATT_ERR_UNLIKELY;
   1e0bc:	260e      	movs	r6, #14
   1e0be:	e7a2      	b.n	1e006 <att_write_rsp+0x22>
   1e0c0:	000296f3 	.word	0x000296f3

0001e0c4 <bt_att_create_pdu>:
{
   1e0c4:	b570      	push	{r4, r5, r6, lr}
   1e0c6:	b082      	sub	sp, #8
   1e0c8:	460e      	mov	r6, r1
   1e0ca:	4615      	mov	r5, r2
	att = att_get(conn);
   1e0cc:	f7ff f97e 	bl	1d3cc <att_get>
	if (!att) {
   1e0d0:	4604      	mov	r4, r0
   1e0d2:	b300      	cbz	r0, 1e116 <bt_att_create_pdu+0x52>
	return list->head;
   1e0d4:	6a44      	ldr	r4, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1e0d6:	b30c      	cbz	r4, 1e11c <bt_att_create_pdu+0x58>
   1e0d8:	3ce0      	subs	r4, #224	; 0xe0
Z_GENLIST_PEEK_NEXT(slist, snode)
   1e0da:	f114 00e0 	adds.w	r0, r4, #224	; 0xe0
   1e0de:	d007      	beq.n	1e0f0 <bt_att_create_pdu+0x2c>
	return node->next;
   1e0e0:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
   1e0e4:	b120      	cbz	r0, 1e0f0 <bt_att_create_pdu+0x2c>
   1e0e6:	38e0      	subs	r0, #224	; 0xe0
   1e0e8:	e002      	b.n	1e0f0 <bt_att_create_pdu+0x2c>
   1e0ea:	4603      	mov	r3, r0
   1e0ec:	4604      	mov	r4, r0
   1e0ee:	4618      	mov	r0, r3
   1e0f0:	b1b4      	cbz	r4, 1e120 <bt_att_create_pdu+0x5c>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1e0f2:	1c6b      	adds	r3, r5, #1
   1e0f4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
   1e0f6:	4293      	cmp	r3, r2
   1e0f8:	d907      	bls.n	1e10a <bt_att_create_pdu+0x46>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1e0fa:	2800      	cmp	r0, #0
   1e0fc:	d0f5      	beq.n	1e0ea <bt_att_create_pdu+0x26>
   1e0fe:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
   1e102:	2b00      	cmp	r3, #0
   1e104:	d0f2      	beq.n	1e0ec <bt_att_create_pdu+0x28>
   1e106:	3be0      	subs	r3, #224	; 0xe0
   1e108:	e7f0      	b.n	1e0ec <bt_att_create_pdu+0x28>
		return bt_att_chan_create_pdu(chan, op, len);
   1e10a:	462a      	mov	r2, r5
   1e10c:	4631      	mov	r1, r6
   1e10e:	4620      	mov	r0, r4
   1e110:	f7ff fd34 	bl	1db7c <bt_att_chan_create_pdu>
   1e114:	4604      	mov	r4, r0
}
   1e116:	4620      	mov	r0, r4
   1e118:	b002      	add	sp, #8
   1e11a:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1e11c:	4620      	mov	r0, r4
   1e11e:	e7e7      	b.n	1e0f0 <bt_att_create_pdu+0x2c>
	LOG_WRN("No ATT channel for MTU %zu", len + sizeof(op));
   1e120:	3501      	adds	r5, #1
   1e122:	2008      	movs	r0, #8
   1e124:	f7f7 fe50 	bl	15dc8 <z_log_msg_alloc>
   1e128:	2200      	movs	r2, #0
   1e12a:	f36f 0200 	bfc	r2, #0, #1
   1e12e:	f36f 0241 	bfc	r2, #1, #1
   1e132:	f36f 0282 	bfc	r2, #2, #1
   1e136:	f36f 02c5 	bfc	r2, #3, #3
   1e13a:	2302      	movs	r3, #2
   1e13c:	f363 1288 	bfi	r2, r3, #6, #3
   1e140:	230c      	movs	r3, #12
   1e142:	f363 2252 	bfi	r2, r3, #9, #10
   1e146:	f36f 42de 	bfc	r2, #19, #12
   1e14a:	f36f 72df 	bfc	r2, #31, #1
   1e14e:	4606      	mov	r6, r0
   1e150:	b190      	cbz	r0, 1e178 <bt_att_create_pdu+0xb4>
   1e152:	f110 0310 	adds.w	r3, r0, #16
   1e156:	d002      	beq.n	1e15e <bt_att_create_pdu+0x9a>
   1e158:	490a      	ldr	r1, [pc, #40]	; (1e184 <bt_att_create_pdu+0xc0>)
   1e15a:	6141      	str	r1, [r0, #20]
   1e15c:	6185      	str	r5, [r0, #24]
   1e15e:	b15b      	cbz	r3, 1e178 <bt_att_create_pdu+0xb4>
   1e160:	2303      	movs	r3, #3
   1e162:	f88d 3004 	strb.w	r3, [sp, #4]
   1e166:	2300      	movs	r3, #0
   1e168:	f88d 3005 	strb.w	r3, [sp, #5]
   1e16c:	f88d 3006 	strb.w	r3, [sp, #6]
   1e170:	f88d 3007 	strb.w	r3, [sp, #7]
   1e174:	9801      	ldr	r0, [sp, #4]
   1e176:	6130      	str	r0, [r6, #16]
   1e178:	2300      	movs	r3, #0
   1e17a:	4903      	ldr	r1, [pc, #12]	; (1e188 <bt_att_create_pdu+0xc4>)
   1e17c:	4630      	mov	r0, r6
   1e17e:	f009 fe2e 	bl	27dde <z_log_msg_finalize>
	return NULL;
   1e182:	e7c8      	b.n	1e116 <bt_att_create_pdu+0x52>
   1e184:	000303c0 	.word	0x000303c0
   1e188:	0002de78 	.word	0x0002de78

0001e18c <att_read_group_rsp>:
{
   1e18c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e190:	b08a      	sub	sp, #40	; 0x28
   1e192:	4604      	mov	r4, r0
   1e194:	460f      	mov	r7, r1
   1e196:	4615      	mov	r5, r2
   1e198:	461e      	mov	r6, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   1e19a:	f8d0 8004 	ldr.w	r8, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   1e19e:	2214      	movs	r2, #20
   1e1a0:	2100      	movs	r1, #0
   1e1a2:	eb0d 0002 	add.w	r0, sp, r2
   1e1a6:	f00a fa9b 	bl	286e0 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   1e1aa:	2201      	movs	r2, #1
   1e1ac:	2111      	movs	r1, #17
   1e1ae:	4640      	mov	r0, r8
   1e1b0:	f7ff ff88 	bl	1e0c4 <bt_att_create_pdu>
   1e1b4:	9007      	str	r0, [sp, #28]
	if (!data.buf) {
   1e1b6:	b368      	cbz	r0, 1e214 <att_read_group_rsp+0x88>
	data.chan = chan;
   1e1b8:	9405      	str	r4, [sp, #20]
	data.uuid = uuid;
   1e1ba:	9706      	str	r7, [sp, #24]
	return net_buf_simple_add(&buf->b, len);
   1e1bc:	2101      	movs	r1, #1
   1e1be:	300c      	adds	r0, #12
   1e1c0:	f00c ff66 	bl	2b090 <net_buf_simple_add>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1e1c4:	9008      	str	r0, [sp, #32]
	data.rsp->len = 0U;
   1e1c6:	2200      	movs	r2, #0
   1e1c8:	7002      	strb	r2, [r0, #0]
	data.group = NULL;
   1e1ca:	9209      	str	r2, [sp, #36]	; 0x24
   1e1cc:	ab05      	add	r3, sp, #20
   1e1ce:	9302      	str	r3, [sp, #8]
   1e1d0:	4b11      	ldr	r3, [pc, #68]	; (1e218 <att_read_group_rsp+0x8c>)
   1e1d2:	9301      	str	r3, [sp, #4]
   1e1d4:	9200      	str	r2, [sp, #0]
   1e1d6:	4613      	mov	r3, r2
   1e1d8:	4631      	mov	r1, r6
   1e1da:	4628      	mov	r0, r5
   1e1dc:	f000 ffd2 	bl	1f184 <bt_gatt_foreach_attr_type>
	if (!data.rsp->len) {
   1e1e0:	9b08      	ldr	r3, [sp, #32]
   1e1e2:	781e      	ldrb	r6, [r3, #0]
   1e1e4:	b146      	cbz	r6, 1e1f8 <att_read_group_rsp+0x6c>
	bt_att_chan_send_rsp(chan, data.buf);
   1e1e6:	9907      	ldr	r1, [sp, #28]
   1e1e8:	4620      	mov	r0, r4
   1e1ea:	f00b fa3d 	bl	29668 <bt_att_chan_send_rsp>
	return 0;
   1e1ee:	2600      	movs	r6, #0
}
   1e1f0:	4630      	mov	r0, r6
   1e1f2:	b00a      	add	sp, #40	; 0x28
   1e1f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1e1f8:	9b07      	ldr	r3, [sp, #28]
   1e1fa:	6998      	ldr	r0, [r3, #24]
   1e1fc:	f7ff fa52 	bl	1d6a4 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1e200:	9807      	ldr	r0, [sp, #28]
   1e202:	f00c fefe 	bl	2b002 <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_READ_GROUP_REQ, start_handle,
   1e206:	230a      	movs	r3, #10
   1e208:	462a      	mov	r2, r5
   1e20a:	2110      	movs	r1, #16
   1e20c:	4620      	mov	r0, r4
   1e20e:	f00b fc7e 	bl	29b0e <send_err_rsp>
		return 0;
   1e212:	e7ed      	b.n	1e1f0 <att_read_group_rsp+0x64>
		return BT_ATT_ERR_UNLIKELY;
   1e214:	260e      	movs	r6, #14
   1e216:	e7eb      	b.n	1e1f0 <att_read_group_rsp+0x64>
   1e218:	0001d7b5 	.word	0x0001d7b5

0001e21c <att_read_mult_vl_req>:
{
   1e21c:	b570      	push	{r4, r5, r6, lr}
   1e21e:	b088      	sub	sp, #32
   1e220:	4606      	mov	r6, r0
   1e222:	460d      	mov	r5, r1
	struct bt_conn *conn = chan->chan.chan.conn;
   1e224:	6844      	ldr	r4, [r0, #4]
	if (!bt_gatt_change_aware(conn, true)) {
   1e226:	2101      	movs	r1, #1
   1e228:	4620      	mov	r0, r4
   1e22a:	f00c fd38 	bl	2ac9e <bt_gatt_change_aware>
   1e22e:	b950      	cbnz	r0, 1e246 <att_read_mult_vl_req+0x2a>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1e230:	2105      	movs	r1, #5
   1e232:	f106 0090 	add.w	r0, r6, #144	; 0x90
   1e236:	f00b fbe9 	bl	29a0c <atomic_test_and_set_bit>
   1e23a:	b110      	cbz	r0, 1e242 <att_read_mult_vl_req+0x26>
			return 0;
   1e23c:	2000      	movs	r0, #0
}
   1e23e:	b008      	add	sp, #32
   1e240:	bd70      	pop	{r4, r5, r6, pc}
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1e242:	2012      	movs	r0, #18
   1e244:	e7fb      	b.n	1e23e <att_read_mult_vl_req+0x22>
	(void)memset(&data, 0, sizeof(data));
   1e246:	2210      	movs	r2, #16
   1e248:	2100      	movs	r1, #0
   1e24a:	eb0d 0002 	add.w	r0, sp, r2
   1e24e:	f00a fa47 	bl	286e0 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_VL_RSP, 0);
   1e252:	2200      	movs	r2, #0
   1e254:	2121      	movs	r1, #33	; 0x21
   1e256:	4620      	mov	r0, r4
   1e258:	f7ff ff34 	bl	1e0c4 <bt_att_create_pdu>
   1e25c:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   1e25e:	b378      	cbz	r0, 1e2c0 <att_read_mult_vl_req+0xa4>
	data.chan = chan;
   1e260:	9604      	str	r6, [sp, #16]
	while (buf->len >= sizeof(uint16_t)) {
   1e262:	8a2b      	ldrh	r3, [r5, #16]
   1e264:	2b01      	cmp	r3, #1
   1e266:	d925      	bls.n	1e2b4 <att_read_mult_vl_req+0x98>
	return net_buf_simple_pull_le16(&buf->b);
   1e268:	f105 000c 	add.w	r0, r5, #12
   1e26c:	f00c ff4a 	bl	2b104 <net_buf_simple_pull_le16>
   1e270:	4604      	mov	r4, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1e272:	2301      	movs	r3, #1
   1e274:	f88d 301c 	strb.w	r3, [sp, #28]
   1e278:	ab04      	add	r3, sp, #16
   1e27a:	9302      	str	r3, [sp, #8]
   1e27c:	4b11      	ldr	r3, [pc, #68]	; (1e2c4 <att_read_mult_vl_req+0xa8>)
   1e27e:	9301      	str	r3, [sp, #4]
   1e280:	2200      	movs	r2, #0
   1e282:	9200      	str	r2, [sp, #0]
   1e284:	4613      	mov	r3, r2
   1e286:	4601      	mov	r1, r0
   1e288:	f000 ff7c 	bl	1f184 <bt_gatt_foreach_attr_type>
		if (data.err) {
   1e28c:	f89d 301c 	ldrb.w	r3, [sp, #28]
   1e290:	2b00      	cmp	r3, #0
   1e292:	d0e6      	beq.n	1e262 <att_read_mult_vl_req+0x46>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1e294:	9b06      	ldr	r3, [sp, #24]
   1e296:	6998      	ldr	r0, [r3, #24]
   1e298:	f7ff fa04 	bl	1d6a4 <tx_meta_data_free>
			net_buf_unref(data.buf);
   1e29c:	9806      	ldr	r0, [sp, #24]
   1e29e:	f00c feb0 	bl	2b002 <net_buf_unref>
			send_err_rsp(chan, BT_ATT_OP_READ_MULT_VL_REQ, handle,
   1e2a2:	f89d 301c 	ldrb.w	r3, [sp, #28]
   1e2a6:	4622      	mov	r2, r4
   1e2a8:	2120      	movs	r1, #32
   1e2aa:	4630      	mov	r0, r6
   1e2ac:	f00b fc2f 	bl	29b0e <send_err_rsp>
			return 0;
   1e2b0:	2000      	movs	r0, #0
   1e2b2:	e7c4      	b.n	1e23e <att_read_mult_vl_req+0x22>
	bt_att_chan_send_rsp(chan, data.buf);
   1e2b4:	9906      	ldr	r1, [sp, #24]
   1e2b6:	4630      	mov	r0, r6
   1e2b8:	f00b f9d6 	bl	29668 <bt_att_chan_send_rsp>
	return 0;
   1e2bc:	2000      	movs	r0, #0
   1e2be:	e7be      	b.n	1e23e <att_read_mult_vl_req+0x22>
		return BT_ATT_ERR_UNLIKELY;
   1e2c0:	200e      	movs	r0, #14
   1e2c2:	e7bc      	b.n	1e23e <att_read_mult_vl_req+0x22>
   1e2c4:	000298a7 	.word	0x000298a7

0001e2c8 <att_read_mult_req>:
{
   1e2c8:	b570      	push	{r4, r5, r6, lr}
   1e2ca:	b088      	sub	sp, #32
   1e2cc:	4606      	mov	r6, r0
   1e2ce:	460d      	mov	r5, r1
	struct bt_conn *conn = chan->chan.chan.conn;
   1e2d0:	6844      	ldr	r4, [r0, #4]
	if (!bt_gatt_change_aware(conn, true)) {
   1e2d2:	2101      	movs	r1, #1
   1e2d4:	4620      	mov	r0, r4
   1e2d6:	f00c fce2 	bl	2ac9e <bt_gatt_change_aware>
   1e2da:	b950      	cbnz	r0, 1e2f2 <att_read_mult_req+0x2a>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1e2dc:	2105      	movs	r1, #5
   1e2de:	f106 0090 	add.w	r0, r6, #144	; 0x90
   1e2e2:	f00b fb93 	bl	29a0c <atomic_test_and_set_bit>
   1e2e6:	b110      	cbz	r0, 1e2ee <att_read_mult_req+0x26>
			return 0;
   1e2e8:	2000      	movs	r0, #0
}
   1e2ea:	b008      	add	sp, #32
   1e2ec:	bd70      	pop	{r4, r5, r6, pc}
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1e2ee:	2012      	movs	r0, #18
   1e2f0:	e7fb      	b.n	1e2ea <att_read_mult_req+0x22>
	(void)memset(&data, 0, sizeof(data));
   1e2f2:	2210      	movs	r2, #16
   1e2f4:	2100      	movs	r1, #0
   1e2f6:	eb0d 0002 	add.w	r0, sp, r2
   1e2fa:	f00a f9f1 	bl	286e0 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   1e2fe:	2200      	movs	r2, #0
   1e300:	210f      	movs	r1, #15
   1e302:	4620      	mov	r0, r4
   1e304:	f7ff fede 	bl	1e0c4 <bt_att_create_pdu>
   1e308:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   1e30a:	b378      	cbz	r0, 1e36c <att_read_mult_req+0xa4>
	data.chan = chan;
   1e30c:	9604      	str	r6, [sp, #16]
	while (buf->len >= sizeof(uint16_t)) {
   1e30e:	8a2b      	ldrh	r3, [r5, #16]
   1e310:	2b01      	cmp	r3, #1
   1e312:	d925      	bls.n	1e360 <att_read_mult_req+0x98>
   1e314:	f105 000c 	add.w	r0, r5, #12
   1e318:	f00c fef4 	bl	2b104 <net_buf_simple_pull_le16>
   1e31c:	4604      	mov	r4, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1e31e:	2301      	movs	r3, #1
   1e320:	f88d 301c 	strb.w	r3, [sp, #28]
   1e324:	ab04      	add	r3, sp, #16
   1e326:	9302      	str	r3, [sp, #8]
   1e328:	4b11      	ldr	r3, [pc, #68]	; (1e370 <att_read_mult_req+0xa8>)
   1e32a:	9301      	str	r3, [sp, #4]
   1e32c:	2200      	movs	r2, #0
   1e32e:	9200      	str	r2, [sp, #0]
   1e330:	4613      	mov	r3, r2
   1e332:	4601      	mov	r1, r0
   1e334:	f000 ff26 	bl	1f184 <bt_gatt_foreach_attr_type>
		if (data.err) {
   1e338:	f89d 301c 	ldrb.w	r3, [sp, #28]
   1e33c:	2b00      	cmp	r3, #0
   1e33e:	d0e6      	beq.n	1e30e <att_read_mult_req+0x46>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1e340:	9b06      	ldr	r3, [sp, #24]
   1e342:	6998      	ldr	r0, [r3, #24]
   1e344:	f7ff f9ae 	bl	1d6a4 <tx_meta_data_free>
			net_buf_unref(data.buf);
   1e348:	9806      	ldr	r0, [sp, #24]
   1e34a:	f00c fe5a 	bl	2b002 <net_buf_unref>
			send_err_rsp(chan, BT_ATT_OP_READ_MULT_REQ, handle,
   1e34e:	f89d 301c 	ldrb.w	r3, [sp, #28]
   1e352:	4622      	mov	r2, r4
   1e354:	210e      	movs	r1, #14
   1e356:	4630      	mov	r0, r6
   1e358:	f00b fbd9 	bl	29b0e <send_err_rsp>
			return 0;
   1e35c:	2000      	movs	r0, #0
   1e35e:	e7c4      	b.n	1e2ea <att_read_mult_req+0x22>
	bt_att_chan_send_rsp(chan, data.buf);
   1e360:	9906      	ldr	r1, [sp, #24]
   1e362:	4630      	mov	r0, r6
   1e364:	f00b f980 	bl	29668 <bt_att_chan_send_rsp>
	return 0;
   1e368:	2000      	movs	r0, #0
   1e36a:	e7be      	b.n	1e2ea <att_read_mult_req+0x22>
		return BT_ATT_ERR_UNLIKELY;
   1e36c:	200e      	movs	r0, #14
   1e36e:	e7bc      	b.n	1e2ea <att_read_mult_req+0x22>
   1e370:	0002990d 	.word	0x0002990d

0001e374 <att_read_rsp>:
{
   1e374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e378:	b088      	sub	sp, #32
   1e37a:	4604      	mov	r4, r0
   1e37c:	4688      	mov	r8, r1
   1e37e:	4616      	mov	r6, r2
   1e380:	461d      	mov	r5, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   1e382:	6847      	ldr	r7, [r0, #4]
	if (!bt_gatt_change_aware(conn, true)) {
   1e384:	2101      	movs	r1, #1
   1e386:	4638      	mov	r0, r7
   1e388:	f00c fc89 	bl	2ac9e <bt_gatt_change_aware>
   1e38c:	b128      	cbz	r0, 1e39a <att_read_rsp+0x26>
	if (!handle) {
   1e38e:	b975      	cbnz	r5, 1e3ae <att_read_rsp+0x3a>
		return BT_ATT_ERR_INVALID_HANDLE;
   1e390:	2601      	movs	r6, #1
}
   1e392:	4630      	mov	r0, r6
   1e394:	b008      	add	sp, #32
   1e396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1e39a:	2105      	movs	r1, #5
   1e39c:	f104 0090 	add.w	r0, r4, #144	; 0x90
   1e3a0:	f00b fb34 	bl	29a0c <atomic_test_and_set_bit>
   1e3a4:	b108      	cbz	r0, 1e3aa <att_read_rsp+0x36>
			return 0;
   1e3a6:	2600      	movs	r6, #0
   1e3a8:	e7f3      	b.n	1e392 <att_read_rsp+0x1e>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1e3aa:	2612      	movs	r6, #18
   1e3ac:	e7f1      	b.n	1e392 <att_read_rsp+0x1e>
	(void)memset(&data, 0, sizeof(data));
   1e3ae:	2210      	movs	r2, #16
   1e3b0:	2100      	movs	r1, #0
   1e3b2:	eb0d 0002 	add.w	r0, sp, r2
   1e3b6:	f00a f993 	bl	286e0 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   1e3ba:	2200      	movs	r2, #0
   1e3bc:	4631      	mov	r1, r6
   1e3be:	4638      	mov	r0, r7
   1e3c0:	f7ff fe80 	bl	1e0c4 <bt_att_create_pdu>
   1e3c4:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   1e3c6:	b350      	cbz	r0, 1e41e <att_read_rsp+0xaa>
	data.chan = chan;
   1e3c8:	9404      	str	r4, [sp, #16]
	data.offset = offset;
   1e3ca:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   1e3ce:	f8ad 3014 	strh.w	r3, [sp, #20]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1e3d2:	2301      	movs	r3, #1
   1e3d4:	f88d 301c 	strb.w	r3, [sp, #28]
   1e3d8:	ab04      	add	r3, sp, #16
   1e3da:	9302      	str	r3, [sp, #8]
   1e3dc:	4b11      	ldr	r3, [pc, #68]	; (1e424 <att_read_rsp+0xb0>)
   1e3de:	9301      	str	r3, [sp, #4]
   1e3e0:	2200      	movs	r2, #0
   1e3e2:	9200      	str	r2, [sp, #0]
   1e3e4:	4613      	mov	r3, r2
   1e3e6:	4629      	mov	r1, r5
   1e3e8:	4628      	mov	r0, r5
   1e3ea:	f000 fecb 	bl	1f184 <bt_gatt_foreach_attr_type>
	if (data.err) {
   1e3ee:	f89d 601c 	ldrb.w	r6, [sp, #28]
   1e3f2:	b926      	cbnz	r6, 1e3fe <att_read_rsp+0x8a>
	bt_att_chan_send_rsp(chan, data.buf);
   1e3f4:	9906      	ldr	r1, [sp, #24]
   1e3f6:	4620      	mov	r0, r4
   1e3f8:	f00b f936 	bl	29668 <bt_att_chan_send_rsp>
	return 0;
   1e3fc:	e7c9      	b.n	1e392 <att_read_rsp+0x1e>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1e3fe:	9b06      	ldr	r3, [sp, #24]
   1e400:	6998      	ldr	r0, [r3, #24]
   1e402:	f7ff f94f 	bl	1d6a4 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1e406:	9806      	ldr	r0, [sp, #24]
   1e408:	f00c fdfb 	bl	2b002 <net_buf_unref>
		send_err_rsp(chan, op, handle, data.err);
   1e40c:	f89d 301c 	ldrb.w	r3, [sp, #28]
   1e410:	462a      	mov	r2, r5
   1e412:	4641      	mov	r1, r8
   1e414:	4620      	mov	r0, r4
   1e416:	f00b fb7a 	bl	29b0e <send_err_rsp>
		return 0;
   1e41a:	2600      	movs	r6, #0
   1e41c:	e7b9      	b.n	1e392 <att_read_rsp+0x1e>
		return BT_ATT_ERR_UNLIKELY;
   1e41e:	260e      	movs	r6, #14
   1e420:	e7b7      	b.n	1e392 <att_read_rsp+0x1e>
   1e422:	bf00      	nop
   1e424:	0002990d 	.word	0x0002990d

0001e428 <att_read_type_rsp>:
{
   1e428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e42c:	b08a      	sub	sp, #40	; 0x28
   1e42e:	4604      	mov	r4, r0
   1e430:	460f      	mov	r7, r1
   1e432:	4615      	mov	r5, r2
   1e434:	461e      	mov	r6, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   1e436:	f8d0 8004 	ldr.w	r8, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   1e43a:	2218      	movs	r2, #24
   1e43c:	2100      	movs	r1, #0
   1e43e:	a804      	add	r0, sp, #16
   1e440:	f00a f94e 	bl	286e0 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   1e444:	2201      	movs	r2, #1
   1e446:	2109      	movs	r1, #9
   1e448:	4640      	mov	r0, r8
   1e44a:	f7ff fe3b 	bl	1e0c4 <bt_att_create_pdu>
   1e44e:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   1e450:	b380      	cbz	r0, 1e4b4 <att_read_type_rsp+0x8c>
	data.chan = chan;
   1e452:	9404      	str	r4, [sp, #16]
	data.uuid = uuid;
   1e454:	9705      	str	r7, [sp, #20]
	return net_buf_simple_add(&buf->b, len);
   1e456:	2101      	movs	r1, #1
   1e458:	300c      	adds	r0, #12
   1e45a:	f00c fe19 	bl	2b090 <net_buf_simple_add>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1e45e:	9007      	str	r0, [sp, #28]
	data.rsp->len = 0U;
   1e460:	2200      	movs	r2, #0
   1e462:	7002      	strb	r2, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1e464:	230a      	movs	r3, #10
   1e466:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   1e46a:	ab04      	add	r3, sp, #16
   1e46c:	9302      	str	r3, [sp, #8]
   1e46e:	4b12      	ldr	r3, [pc, #72]	; (1e4b8 <att_read_type_rsp+0x90>)
   1e470:	9301      	str	r3, [sp, #4]
   1e472:	9200      	str	r2, [sp, #0]
   1e474:	4613      	mov	r3, r2
   1e476:	4631      	mov	r1, r6
   1e478:	4628      	mov	r0, r5
   1e47a:	f000 fe83 	bl	1f184 <bt_gatt_foreach_attr_type>
	if (data.err) {
   1e47e:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
   1e482:	b93e      	cbnz	r6, 1e494 <att_read_type_rsp+0x6c>
	bt_att_chan_send_rsp(chan, data.buf);
   1e484:	9906      	ldr	r1, [sp, #24]
   1e486:	4620      	mov	r0, r4
   1e488:	f00b f8ee 	bl	29668 <bt_att_chan_send_rsp>
}
   1e48c:	4630      	mov	r0, r6
   1e48e:	b00a      	add	sp, #40	; 0x28
   1e490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1e494:	9b06      	ldr	r3, [sp, #24]
   1e496:	6998      	ldr	r0, [r3, #24]
   1e498:	f7ff f904 	bl	1d6a4 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1e49c:	9806      	ldr	r0, [sp, #24]
   1e49e:	f00c fdb0 	bl	2b002 <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_READ_TYPE_REQ, start_handle,
   1e4a2:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   1e4a6:	462a      	mov	r2, r5
   1e4a8:	2108      	movs	r1, #8
   1e4aa:	4620      	mov	r0, r4
   1e4ac:	f00b fb2f 	bl	29b0e <send_err_rsp>
		return 0;
   1e4b0:	2600      	movs	r6, #0
   1e4b2:	e7eb      	b.n	1e48c <att_read_type_rsp+0x64>
		return BT_ATT_ERR_UNLIKELY;
   1e4b4:	260e      	movs	r6, #14
   1e4b6:	e7e9      	b.n	1e48c <att_read_type_rsp+0x64>
   1e4b8:	0001d869 	.word	0x0001d869

0001e4bc <att_find_type_rsp>:
{
   1e4bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e4c0:	b08a      	sub	sp, #40	; 0x28
   1e4c2:	4604      	mov	r4, r0
   1e4c4:	460d      	mov	r5, r1
   1e4c6:	4616      	mov	r6, r2
   1e4c8:	461f      	mov	r7, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   1e4ca:	f8d0 8004 	ldr.w	r8, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   1e4ce:	2214      	movs	r2, #20
   1e4d0:	2100      	movs	r1, #0
   1e4d2:	eb0d 0002 	add.w	r0, sp, r2
   1e4d6:	f00a f903 	bl	286e0 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   1e4da:	2200      	movs	r2, #0
   1e4dc:	2107      	movs	r1, #7
   1e4de:	4640      	mov	r0, r8
   1e4e0:	f7ff fdf0 	bl	1e0c4 <bt_att_create_pdu>
   1e4e4:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   1e4e6:	b378      	cbz	r0, 1e548 <att_find_type_rsp+0x8c>
	data.chan = chan;
   1e4e8:	9405      	str	r4, [sp, #20]
	data.group = NULL;
   1e4ea:	2200      	movs	r2, #0
   1e4ec:	9207      	str	r2, [sp, #28]
	data.value = value;
   1e4ee:	9708      	str	r7, [sp, #32]
	data.value_len = value_len;
   1e4f0:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   1e4f4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1e4f8:	230a      	movs	r3, #10
   1e4fa:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   1e4fe:	ab05      	add	r3, sp, #20
   1e500:	9302      	str	r3, [sp, #8]
   1e502:	4b12      	ldr	r3, [pc, #72]	; (1e54c <att_find_type_rsp+0x90>)
   1e504:	9301      	str	r3, [sp, #4]
   1e506:	9200      	str	r2, [sp, #0]
   1e508:	4613      	mov	r3, r2
   1e50a:	4631      	mov	r1, r6
   1e50c:	4628      	mov	r0, r5
   1e50e:	f000 fe39 	bl	1f184 <bt_gatt_foreach_attr_type>
	if (data.err) {
   1e512:	f89d 6025 	ldrb.w	r6, [sp, #37]	; 0x25
   1e516:	b93e      	cbnz	r6, 1e528 <att_find_type_rsp+0x6c>
	bt_att_chan_send_rsp(chan, data.buf);
   1e518:	9906      	ldr	r1, [sp, #24]
   1e51a:	4620      	mov	r0, r4
   1e51c:	f00b f8a4 	bl	29668 <bt_att_chan_send_rsp>
}
   1e520:	4630      	mov	r0, r6
   1e522:	b00a      	add	sp, #40	; 0x28
   1e524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1e528:	9b06      	ldr	r3, [sp, #24]
   1e52a:	6998      	ldr	r0, [r3, #24]
   1e52c:	f7ff f8ba 	bl	1d6a4 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1e530:	9806      	ldr	r0, [sp, #24]
   1e532:	f00c fd66 	bl	2b002 <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
   1e536:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   1e53a:	462a      	mov	r2, r5
   1e53c:	2106      	movs	r1, #6
   1e53e:	4620      	mov	r0, r4
   1e540:	f00b fae5 	bl	29b0e <send_err_rsp>
		return 0;
   1e544:	2600      	movs	r6, #0
   1e546:	e7eb      	b.n	1e520 <att_find_type_rsp+0x64>
		return BT_ATT_ERR_UNLIKELY;
   1e548:	260e      	movs	r6, #14
   1e54a:	e7e9      	b.n	1e520 <att_find_type_rsp+0x64>
   1e54c:	0001d911 	.word	0x0001d911

0001e550 <att_find_info_rsp>:
{
   1e550:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e552:	b089      	sub	sp, #36	; 0x24
   1e554:	4604      	mov	r4, r0
   1e556:	460f      	mov	r7, r1
   1e558:	4616      	mov	r6, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   1e55a:	6845      	ldr	r5, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   1e55c:	2210      	movs	r2, #16
   1e55e:	2100      	movs	r1, #0
   1e560:	eb0d 0002 	add.w	r0, sp, r2
   1e564:	f00a f8bc 	bl	286e0 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   1e568:	2200      	movs	r2, #0
   1e56a:	2105      	movs	r1, #5
   1e56c:	4628      	mov	r0, r5
   1e56e:	f7ff fda9 	bl	1e0c4 <bt_att_create_pdu>
   1e572:	9005      	str	r0, [sp, #20]
	if (!data.buf) {
   1e574:	b318      	cbz	r0, 1e5be <att_find_info_rsp+0x6e>
	data.chan = chan;
   1e576:	9404      	str	r4, [sp, #16]
   1e578:	ab04      	add	r3, sp, #16
   1e57a:	9302      	str	r3, [sp, #8]
   1e57c:	4b11      	ldr	r3, [pc, #68]	; (1e5c4 <att_find_info_rsp+0x74>)
   1e57e:	9301      	str	r3, [sp, #4]
   1e580:	2200      	movs	r2, #0
   1e582:	9200      	str	r2, [sp, #0]
   1e584:	4613      	mov	r3, r2
   1e586:	4631      	mov	r1, r6
   1e588:	4638      	mov	r0, r7
   1e58a:	f000 fdfb 	bl	1f184 <bt_gatt_foreach_attr_type>
	if (!data.rsp) {
   1e58e:	9b06      	ldr	r3, [sp, #24]
   1e590:	b133      	cbz	r3, 1e5a0 <att_find_info_rsp+0x50>
	bt_att_chan_send_rsp(chan, data.buf);
   1e592:	9905      	ldr	r1, [sp, #20]
   1e594:	4620      	mov	r0, r4
   1e596:	f00b f867 	bl	29668 <bt_att_chan_send_rsp>
	return 0;
   1e59a:	2000      	movs	r0, #0
}
   1e59c:	b009      	add	sp, #36	; 0x24
   1e59e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1e5a0:	9b05      	ldr	r3, [sp, #20]
   1e5a2:	6998      	ldr	r0, [r3, #24]
   1e5a4:	f7ff f87e 	bl	1d6a4 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1e5a8:	9805      	ldr	r0, [sp, #20]
   1e5aa:	f00c fd2a 	bl	2b002 <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_FIND_INFO_REQ, start_handle,
   1e5ae:	230a      	movs	r3, #10
   1e5b0:	463a      	mov	r2, r7
   1e5b2:	2104      	movs	r1, #4
   1e5b4:	4620      	mov	r0, r4
   1e5b6:	f00b faaa 	bl	29b0e <send_err_rsp>
		return 0;
   1e5ba:	2000      	movs	r0, #0
   1e5bc:	e7ee      	b.n	1e59c <att_find_info_rsp+0x4c>
		return BT_ATT_ERR_UNLIKELY;
   1e5be:	200e      	movs	r0, #14
   1e5c0:	e7ec      	b.n	1e59c <att_find_info_rsp+0x4c>
   1e5c2:	bf00      	nop
   1e5c4:	00029955 	.word	0x00029955

0001e5c8 <bt_att_init>:
	bt_l2cap_register_ecred_cb(&cb);
#endif /* CONFIG_BT_EATT */
}

void bt_att_init(void)
{
   1e5c8:	b510      	push	{r4, lr}
	z_impl_k_queue_init(queue);
   1e5ca:	4809      	ldr	r0, [pc, #36]	; (1e5f0 <bt_att_init+0x28>)
   1e5cc:	f00e fc98 	bl	2cf00 <z_impl_k_queue_init>
	k_fifo_init(&free_att_tx_meta_data);
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
   1e5d0:	2400      	movs	r4, #0
   1e5d2:	e008      	b.n	1e5e6 <bt_att_init+0x1e>
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
   1e5d4:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1e5d8:	0093      	lsls	r3, r2, #2
   1e5da:	4906      	ldr	r1, [pc, #24]	; (1e5f4 <bt_att_init+0x2c>)
   1e5dc:	4419      	add	r1, r3
   1e5de:	4804      	ldr	r0, [pc, #16]	; (1e5f0 <bt_att_init+0x28>)
   1e5e0:	f00e fc9a 	bl	2cf18 <k_queue_append>
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
   1e5e4:	3401      	adds	r4, #1
   1e5e6:	2c02      	cmp	r4, #2
   1e5e8:	d9f4      	bls.n	1e5d4 <bt_att_init+0xc>
	}

	bt_gatt_init();
   1e5ea:	f000 fd65 	bl	1f0b8 <bt_gatt_init>

	if (IS_ENABLED(CONFIG_BT_EATT)) {
		bt_eatt_init();
	}
}
   1e5ee:	bd10      	pop	{r4, pc}
   1e5f0:	20000c14 	.word	0x20000c14
   1e5f4:	20008114 	.word	0x20008114

0001e5f8 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   1e5f8:	b530      	push	{r4, r5, lr}
   1e5fa:	b083      	sub	sp, #12
   1e5fc:	4605      	mov	r5, r0
   1e5fe:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   1e600:	2300      	movs	r3, #0
   1e602:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   1e604:	f007 fba0 	bl	25d48 <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
   1e608:	4b0b      	ldr	r3, [pc, #44]	; (1e638 <bt_att_req_alloc+0x40>)
   1e60a:	681b      	ldr	r3, [r3, #0]
   1e60c:	4283      	cmp	r3, r0
   1e60e:	d00e      	beq.n	1e62e <bt_att_req_alloc+0x36>
		 */
		timeout = K_NO_WAIT;
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   1e610:	462a      	mov	r2, r5
   1e612:	4623      	mov	r3, r4
   1e614:	a901      	add	r1, sp, #4
   1e616:	4809      	ldr	r0, [pc, #36]	; (1e63c <bt_att_req_alloc+0x44>)
   1e618:	f006 fb9a 	bl	24d50 <k_mem_slab_alloc>
   1e61c:	b950      	cbnz	r0, 1e634 <bt_att_req_alloc+0x3c>
		return NULL;
	}

	LOG_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   1e61e:	2210      	movs	r2, #16
   1e620:	2100      	movs	r1, #0
   1e622:	9801      	ldr	r0, [sp, #4]
   1e624:	f00a f85c 	bl	286e0 <memset>

	return req;
   1e628:	9801      	ldr	r0, [sp, #4]
}
   1e62a:	b003      	add	sp, #12
   1e62c:	bd30      	pop	{r4, r5, pc}
		timeout = K_NO_WAIT;
   1e62e:	2500      	movs	r5, #0
   1e630:	462c      	mov	r4, r5
   1e632:	e7ed      	b.n	1e610 <bt_att_req_alloc+0x18>
		return NULL;
   1e634:	2000      	movs	r0, #0
   1e636:	e7f8      	b.n	1e62a <bt_att_req_alloc+0x32>
   1e638:	20008150 	.word	0x20008150
   1e63c:	20000bb8 	.word	0x20000bb8

0001e640 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   1e640:	b500      	push	{lr}
   1e642:	b083      	sub	sp, #12
   1e644:	9001      	str	r0, [sp, #4]
	LOG_DBG("req %p", req);

	if (req->buf) {
   1e646:	6883      	ldr	r3, [r0, #8]
   1e648:	b14b      	cbz	r3, 1e65e <bt_att_req_free+0x1e>
		tx_meta_data_free(bt_att_tx_meta_data(req->buf));
   1e64a:	6998      	ldr	r0, [r3, #24]
   1e64c:	f7ff f82a 	bl	1d6a4 <tx_meta_data_free>
		net_buf_unref(req->buf);
   1e650:	9b01      	ldr	r3, [sp, #4]
   1e652:	6898      	ldr	r0, [r3, #8]
   1e654:	f00c fcd5 	bl	2b002 <net_buf_unref>
		req->buf = NULL;
   1e658:	9b01      	ldr	r3, [sp, #4]
   1e65a:	2200      	movs	r2, #0
   1e65c:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   1e65e:	a901      	add	r1, sp, #4
   1e660:	4802      	ldr	r0, [pc, #8]	; (1e66c <bt_att_req_free+0x2c>)
   1e662:	f00e fb1c 	bl	2cc9e <k_mem_slab_free>
}
   1e666:	b003      	add	sp, #12
   1e668:	f85d fb04 	ldr.w	pc, [sp], #4
   1e66c:	20000bb8 	.word	0x20000bb8

0001e670 <att_handle_rsp>:
{
   1e670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e674:	b084      	sub	sp, #16
   1e676:	4604      	mov	r4, r0
   1e678:	460f      	mov	r7, r1
   1e67a:	4691      	mov	r9, r2
   1e67c:	461e      	mov	r6, r3
	k_work_cancel_delayable(&chan->timeout_work);
   1e67e:	30b0      	adds	r0, #176	; 0xb0
   1e680:	f00e fdc7 	bl	2d212 <k_work_cancel_delayable>
	if (!chan->req) {
   1e684:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
   1e688:	b1f8      	cbz	r0, 1e6ca <att_handle_rsp+0x5a>
	if (chan->req == &cancel) {
   1e68a:	4b2a      	ldr	r3, [pc, #168]	; (1e734 <att_handle_rsp+0xc4>)
   1e68c:	4298      	cmp	r0, r3
   1e68e:	d04d      	beq.n	1e72c <att_handle_rsp+0xbc>
	func = chan->req->func;
   1e690:	6845      	ldr	r5, [r0, #4]
	chan->req->func = NULL;
   1e692:	f04f 0a00 	mov.w	sl, #0
   1e696:	f8c0 a004 	str.w	sl, [r0, #4]
	params = chan->req->user_data;
   1e69a:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
   1e69e:	f8d0 800c 	ldr.w	r8, [r0, #12]
	bt_att_req_free(chan->req);
   1e6a2:	f7ff ffcd 	bl	1e640 <bt_att_req_free>
	chan->req = NULL;
   1e6a6:	f8c4 a094 	str.w	sl, [r4, #148]	; 0x94
	att_req_send_process(chan->att);
   1e6aa:	6820      	ldr	r0, [r4, #0]
   1e6ac:	f00a fea9 	bl	29402 <att_req_send_process>
	if (func) {
   1e6b0:	b13d      	cbz	r5, 1e6c2 <att_handle_rsp+0x52>
		func(chan->att->conn, err, pdu, len, params);
   1e6b2:	6823      	ldr	r3, [r4, #0]
   1e6b4:	6818      	ldr	r0, [r3, #0]
   1e6b6:	f8cd 8000 	str.w	r8, [sp]
   1e6ba:	464b      	mov	r3, r9
   1e6bc:	463a      	mov	r2, r7
   1e6be:	4631      	mov	r1, r6
   1e6c0:	47a8      	blx	r5
}
   1e6c2:	2000      	movs	r0, #0
   1e6c4:	b004      	add	sp, #16
   1e6c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		LOG_WRN("No pending ATT request");
   1e6ca:	2006      	movs	r0, #6
   1e6cc:	f7f7 fb7c 	bl	15dc8 <z_log_msg_alloc>
   1e6d0:	2200      	movs	r2, #0
   1e6d2:	f36f 0200 	bfc	r2, #0, #1
   1e6d6:	f36f 0241 	bfc	r2, #1, #1
   1e6da:	f36f 0282 	bfc	r2, #2, #1
   1e6de:	f36f 02c5 	bfc	r2, #3, #3
   1e6e2:	2302      	movs	r3, #2
   1e6e4:	f363 1288 	bfi	r2, r3, #6, #3
   1e6e8:	2308      	movs	r3, #8
   1e6ea:	f363 2252 	bfi	r2, r3, #9, #10
   1e6ee:	f36f 42de 	bfc	r2, #19, #12
   1e6f2:	f36f 72df 	bfc	r2, #31, #1
   1e6f6:	4605      	mov	r5, r0
   1e6f8:	b188      	cbz	r0, 1e71e <att_handle_rsp+0xae>
   1e6fa:	f110 0310 	adds.w	r3, r0, #16
   1e6fe:	d001      	beq.n	1e704 <att_handle_rsp+0x94>
   1e700:	490d      	ldr	r1, [pc, #52]	; (1e738 <att_handle_rsp+0xc8>)
   1e702:	6141      	str	r1, [r0, #20]
   1e704:	b15b      	cbz	r3, 1e71e <att_handle_rsp+0xae>
   1e706:	2302      	movs	r3, #2
   1e708:	f88d 300c 	strb.w	r3, [sp, #12]
   1e70c:	2300      	movs	r3, #0
   1e70e:	f88d 300d 	strb.w	r3, [sp, #13]
   1e712:	f88d 300e 	strb.w	r3, [sp, #14]
   1e716:	f88d 300f 	strb.w	r3, [sp, #15]
   1e71a:	9803      	ldr	r0, [sp, #12]
   1e71c:	6128      	str	r0, [r5, #16]
   1e71e:	2300      	movs	r3, #0
   1e720:	4906      	ldr	r1, [pc, #24]	; (1e73c <att_handle_rsp+0xcc>)
   1e722:	4628      	mov	r0, r5
   1e724:	f009 fb5b 	bl	27dde <z_log_msg_finalize>
	bt_att_func_t func = NULL;
   1e728:	2500      	movs	r5, #0
		goto process;
   1e72a:	e7be      	b.n	1e6aa <att_handle_rsp+0x3a>
		chan->req = NULL;
   1e72c:	2500      	movs	r5, #0
   1e72e:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
		goto process;
   1e732:	e7ba      	b.n	1e6aa <att_handle_rsp+0x3a>
   1e734:	20008154 	.word	0x20008154
   1e738:	000303dc 	.word	0x000303dc
   1e73c:	0002de78 	.word	0x0002de78

0001e740 <att_error_rsp>:
{
   1e740:	b508      	push	{r3, lr}
	rsp = (void *)buf->data;
   1e742:	68ca      	ldr	r2, [r1, #12]
	if (!chan->req || chan->req == &cancel || !rsp->error) {
   1e744:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
   1e748:	b14b      	cbz	r3, 1e75e <att_error_rsp+0x1e>
   1e74a:	4908      	ldr	r1, [pc, #32]	; (1e76c <att_error_rsp+0x2c>)
   1e74c:	428b      	cmp	r3, r1
   1e74e:	d008      	beq.n	1e762 <att_error_rsp+0x22>
   1e750:	78d3      	ldrb	r3, [r2, #3]
   1e752:	b143      	cbz	r3, 1e766 <att_error_rsp+0x26>
	return att_handle_rsp(chan, NULL, 0, err);
   1e754:	2200      	movs	r2, #0
   1e756:	4611      	mov	r1, r2
   1e758:	f7ff ff8a 	bl	1e670 <att_handle_rsp>
}
   1e75c:	bd08      	pop	{r3, pc}
		err = BT_ATT_ERR_UNLIKELY;
   1e75e:	230e      	movs	r3, #14
   1e760:	e7f8      	b.n	1e754 <att_error_rsp+0x14>
   1e762:	230e      	movs	r3, #14
   1e764:	e7f6      	b.n	1e754 <att_error_rsp+0x14>
   1e766:	230e      	movs	r3, #14
   1e768:	e7f4      	b.n	1e754 <att_error_rsp+0x14>
   1e76a:	bf00      	nop
   1e76c:	20008154 	.word	0x20008154

0001e770 <att_reset>:
{
   1e770:	b530      	push	{r4, r5, lr}
   1e772:	b085      	sub	sp, #20
   1e774:	9003      	str	r0, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   1e776:	e005      	b.n	1e784 <att_reset+0x14>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   1e778:	69a0      	ldr	r0, [r4, #24]
   1e77a:	f7fe ff93 	bl	1d6a4 <tx_meta_data_free>
		net_buf_unref(buf);
   1e77e:	4620      	mov	r0, r4
   1e780:	f00c fc3f 	bl	2b002 <net_buf_unref>
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   1e784:	2200      	movs	r2, #0
   1e786:	2300      	movs	r3, #0
   1e788:	9803      	ldr	r0, [sp, #12]
   1e78a:	300c      	adds	r0, #12
   1e78c:	f00c fbf9 	bl	2af82 <net_buf_get>
   1e790:	4604      	mov	r4, r0
   1e792:	2800      	cmp	r0, #0
   1e794:	d1f0      	bne.n	1e778 <att_reset+0x8>
   1e796:	e00b      	b.n	1e7b0 <att_reset+0x40>
	list->tail = node;
   1e798:	609a      	str	r2, [r3, #8]
}
   1e79a:	e011      	b.n	1e7c0 <att_reset+0x50>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   1e79c:	6818      	ldr	r0, [r3, #0]
   1e79e:	68e3      	ldr	r3, [r4, #12]
   1e7a0:	9300      	str	r3, [sp, #0]
   1e7a2:	2300      	movs	r3, #0
   1e7a4:	461a      	mov	r2, r3
   1e7a6:	210e      	movs	r1, #14
   1e7a8:	47a8      	blx	r5
		bt_att_req_free(req);
   1e7aa:	4620      	mov	r0, r4
   1e7ac:	f7ff ff48 	bl	1e640 <bt_att_req_free>
	while (!sys_slist_is_empty(&att->reqs)) {
   1e7b0:	9b03      	ldr	r3, [sp, #12]
	return list->head;
   1e7b2:	685c      	ldr	r4, [r3, #4]
   1e7b4:	b144      	cbz	r4, 1e7c8 <att_reset+0x58>
	return node->next;
   1e7b6:	6822      	ldr	r2, [r4, #0]
	list->head = node;
   1e7b8:	605a      	str	r2, [r3, #4]
	return list->tail;
   1e7ba:	6899      	ldr	r1, [r3, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1e7bc:	42a1      	cmp	r1, r4
   1e7be:	d0eb      	beq.n	1e798 <att_reset+0x28>
		if (req->func) {
   1e7c0:	6865      	ldr	r5, [r4, #4]
   1e7c2:	2d00      	cmp	r5, #0
   1e7c4:	d1ea      	bne.n	1e79c <att_reset+0x2c>
   1e7c6:	e7f0      	b.n	1e7aa <att_reset+0x3a>
	att->conn = NULL;
   1e7c8:	2200      	movs	r2, #0
   1e7ca:	601a      	str	r2, [r3, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   1e7cc:	a903      	add	r1, sp, #12
   1e7ce:	4802      	ldr	r0, [pc, #8]	; (1e7d8 <att_reset+0x68>)
   1e7d0:	f00e fa65 	bl	2cc9e <k_mem_slab_free>
}
   1e7d4:	b005      	add	sp, #20
   1e7d6:	bd30      	pop	{r4, r5, pc}
   1e7d8:	20000b80 	.word	0x20000b80

0001e7dc <att_timeout>:
{
   1e7dc:	b510      	push	{r4, lr}
   1e7de:	b082      	sub	sp, #8
   1e7e0:	4604      	mov	r4, r0
	LOG_ERR("ATT Timeout");
   1e7e2:	2006      	movs	r0, #6
   1e7e4:	f7f7 faf0 	bl	15dc8 <z_log_msg_alloc>
   1e7e8:	2200      	movs	r2, #0
   1e7ea:	f36f 0200 	bfc	r2, #0, #1
   1e7ee:	f36f 0241 	bfc	r2, #1, #1
   1e7f2:	f36f 0282 	bfc	r2, #2, #1
   1e7f6:	f36f 02c5 	bfc	r2, #3, #3
   1e7fa:	2301      	movs	r3, #1
   1e7fc:	f363 1288 	bfi	r2, r3, #6, #3
   1e800:	2308      	movs	r3, #8
   1e802:	f363 2252 	bfi	r2, r3, #9, #10
   1e806:	f36f 42de 	bfc	r2, #19, #12
   1e80a:	f36f 72df 	bfc	r2, #31, #1
   1e80e:	4684      	mov	ip, r0
   1e810:	b190      	cbz	r0, 1e838 <att_timeout+0x5c>
   1e812:	f110 0310 	adds.w	r3, r0, #16
   1e816:	d001      	beq.n	1e81c <att_timeout+0x40>
   1e818:	490d      	ldr	r1, [pc, #52]	; (1e850 <att_timeout+0x74>)
   1e81a:	6141      	str	r1, [r0, #20]
   1e81c:	b163      	cbz	r3, 1e838 <att_timeout+0x5c>
   1e81e:	2302      	movs	r3, #2
   1e820:	f88d 3004 	strb.w	r3, [sp, #4]
   1e824:	2300      	movs	r3, #0
   1e826:	f88d 3005 	strb.w	r3, [sp, #5]
   1e82a:	f88d 3006 	strb.w	r3, [sp, #6]
   1e82e:	f88d 3007 	strb.w	r3, [sp, #7]
   1e832:	9801      	ldr	r0, [sp, #4]
   1e834:	f8cc 0010 	str.w	r0, [ip, #16]
   1e838:	2300      	movs	r3, #0
   1e83a:	4906      	ldr	r1, [pc, #24]	; (1e854 <att_timeout+0x78>)
   1e83c:	4660      	mov	r0, ip
   1e83e:	f009 face 	bl	27dde <z_log_msg_finalize>
	bt_att_disconnected(&chan->chan.chan);
   1e842:	f1a4 00ac 	sub.w	r0, r4, #172	; 0xac
   1e846:	f00b fb7d 	bl	29f44 <bt_att_disconnected>
}
   1e84a:	b002      	add	sp, #8
   1e84c:	bd10      	pop	{r4, pc}
   1e84e:	bf00      	nop
   1e850:	000303f4 	.word	0x000303f4
   1e854:	0002de78 	.word	0x0002de78

0001e858 <bt_att_chan_req_cancel>:
	return 0;
}

static bool bt_att_chan_req_cancel(struct bt_att_chan *chan,
				   struct bt_att_req *req)
{
   1e858:	b508      	push	{r3, lr}
	if (chan->req != req) {
   1e85a:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
   1e85e:	428b      	cmp	r3, r1
   1e860:	d001      	beq.n	1e866 <bt_att_chan_req_cancel+0xe>
		return false;
   1e862:	2000      	movs	r0, #0
	chan->req = &cancel;

	bt_att_req_free(req);

	return true;
}
   1e864:	bd08      	pop	{r3, pc}
	chan->req = &cancel;
   1e866:	4b04      	ldr	r3, [pc, #16]	; (1e878 <bt_att_chan_req_cancel+0x20>)
   1e868:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
	bt_att_req_free(req);
   1e86c:	4608      	mov	r0, r1
   1e86e:	f7ff fee7 	bl	1e640 <bt_att_req_free>
	return true;
   1e872:	2001      	movs	r0, #1
   1e874:	e7f6      	b.n	1e864 <bt_att_chan_req_cancel+0xc>
   1e876:	bf00      	nop
   1e878:	20008154 	.word	0x20008154

0001e87c <bt_gatt_service_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1e87c:	4b0d      	ldr	r3, [pc, #52]	; (1e8b4 <bt_gatt_service_init+0x38>)
   1e87e:	2201      	movs	r2, #1
   1e880:	f3bf 8f5b 	dmb	ish
   1e884:	e853 1f00 	ldrex	r1, [r3]
   1e888:	2900      	cmp	r1, #0
   1e88a:	d103      	bne.n	1e894 <bt_gatt_service_init+0x18>
   1e88c:	e843 2000 	strex	r0, r2, [r3]
   1e890:	2800      	cmp	r0, #0
   1e892:	d1f7      	bne.n	1e884 <bt_gatt_service_init+0x8>
   1e894:	f3bf 8f5b 	dmb	ish
}
#endif

static void bt_gatt_service_init(void)
{
	if (!atomic_cas(&service_init, 0, 1)) {
   1e898:	d101      	bne.n	1e89e <bt_gatt_service_init+0x22>
		return;
	}

	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1e89a:	4b07      	ldr	r3, [pc, #28]	; (1e8b8 <bt_gatt_service_init+0x3c>)
   1e89c:	e006      	b.n	1e8ac <bt_gatt_service_init+0x30>
   1e89e:	4770      	bx	lr
		last_static_handle += svc->attr_count;
   1e8a0:	685a      	ldr	r2, [r3, #4]
   1e8a2:	4906      	ldr	r1, [pc, #24]	; (1e8bc <bt_gatt_service_init+0x40>)
   1e8a4:	8808      	ldrh	r0, [r1, #0]
   1e8a6:	4402      	add	r2, r0
   1e8a8:	800a      	strh	r2, [r1, #0]
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1e8aa:	3308      	adds	r3, #8
   1e8ac:	4a04      	ldr	r2, [pc, #16]	; (1e8c0 <bt_gatt_service_init+0x44>)
   1e8ae:	4293      	cmp	r3, r2
   1e8b0:	d3f6      	bcc.n	1e8a0 <bt_gatt_service_init+0x24>
	}
}
   1e8b2:	4770      	bx	lr
   1e8b4:	20008304 	.word	0x20008304
   1e8b8:	0002de58 	.word	0x0002de58
   1e8bc:	20008fdc 	.word	0x20008fdc
   1e8c0:	0002de68 	.word	0x0002de68

0001e8c4 <gatt_exchange_mtu_func>:

#if defined(CONFIG_BT_GATT_AUTO_UPDATE_MTU)
static void gatt_exchange_mtu_func(struct bt_conn *conn, uint8_t err,
				   struct bt_gatt_exchange_params *params)
{
	if (err) {
   1e8c4:	b901      	cbnz	r1, 1e8c8 <gatt_exchange_mtu_func+0x4>
   1e8c6:	4770      	bx	lr
{
   1e8c8:	b530      	push	{r4, r5, lr}
   1e8ca:	b083      	sub	sp, #12
   1e8cc:	4604      	mov	r4, r0
   1e8ce:	460d      	mov	r5, r1
		LOG_WRN("conn %p err 0x%02x", conn, err);
   1e8d0:	2008      	movs	r0, #8
   1e8d2:	f7f7 fa79 	bl	15dc8 <z_log_msg_alloc>
   1e8d6:	2200      	movs	r2, #0
   1e8d8:	f36f 0200 	bfc	r2, #0, #1
   1e8dc:	f36f 0241 	bfc	r2, #1, #1
   1e8e0:	f36f 0282 	bfc	r2, #2, #1
   1e8e4:	f36f 02c5 	bfc	r2, #3, #3
   1e8e8:	2302      	movs	r3, #2
   1e8ea:	f363 1288 	bfi	r2, r3, #6, #3
   1e8ee:	2310      	movs	r3, #16
   1e8f0:	f363 2252 	bfi	r2, r3, #9, #10
   1e8f4:	f36f 42de 	bfc	r2, #19, #12
   1e8f8:	f36f 72df 	bfc	r2, #31, #1
   1e8fc:	4684      	mov	ip, r0
   1e8fe:	b198      	cbz	r0, 1e928 <gatt_exchange_mtu_func+0x64>
   1e900:	18c3      	adds	r3, r0, r3
   1e902:	d003      	beq.n	1e90c <gatt_exchange_mtu_func+0x48>
   1e904:	490c      	ldr	r1, [pc, #48]	; (1e938 <gatt_exchange_mtu_func+0x74>)
   1e906:	6141      	str	r1, [r0, #20]
   1e908:	6184      	str	r4, [r0, #24]
   1e90a:	61c5      	str	r5, [r0, #28]
   1e90c:	b163      	cbz	r3, 1e928 <gatt_exchange_mtu_func+0x64>
   1e90e:	2304      	movs	r3, #4
   1e910:	f88d 3004 	strb.w	r3, [sp, #4]
   1e914:	2300      	movs	r3, #0
   1e916:	f88d 3005 	strb.w	r3, [sp, #5]
   1e91a:	f88d 3006 	strb.w	r3, [sp, #6]
   1e91e:	f88d 3007 	strb.w	r3, [sp, #7]
   1e922:	9801      	ldr	r0, [sp, #4]
   1e924:	f8cc 0010 	str.w	r0, [ip, #16]
   1e928:	2300      	movs	r3, #0
   1e92a:	4904      	ldr	r1, [pc, #16]	; (1e93c <gatt_exchange_mtu_func+0x78>)
   1e92c:	4660      	mov	r0, ip
   1e92e:	f009 fa56 	bl	27dde <z_log_msg_finalize>
	}
}
   1e932:	b003      	add	sp, #12
   1e934:	bd30      	pop	{r4, r5, pc}
   1e936:	bf00      	nop
   1e938:	000304f8 	.word	0x000304f8
   1e93c:	0002de88 	.word	0x0002de88

0001e940 <find_cf_cfg>:
{
   1e940:	b570      	push	{r4, r5, r6, lr}
   1e942:	4606      	mov	r6, r0
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   1e944:	2400      	movs	r4, #0
   1e946:	e007      	b.n	1e958 <find_cf_cfg+0x18>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1e948:	4628      	mov	r0, r5
	return memcmp(a, b, sizeof(*a));
   1e94a:	2207      	movs	r2, #7
   1e94c:	490d      	ldr	r1, [pc, #52]	; (1e984 <find_cf_cfg+0x44>)
   1e94e:	3001      	adds	r0, #1
   1e950:	f009 fe85 	bl	2865e <memcmp>
   1e954:	b1a0      	cbz	r0, 1e980 <find_cf_cfg+0x40>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   1e956:	3401      	adds	r4, #1
   1e958:	2c07      	cmp	r4, #7
   1e95a:	d810      	bhi.n	1e97e <find_cf_cfg+0x3e>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1e95c:	4d0a      	ldr	r5, [pc, #40]	; (1e988 <find_cf_cfg+0x48>)
   1e95e:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (!conn) {
   1e962:	2e00      	cmp	r6, #0
   1e964:	d0f0      	beq.n	1e948 <find_cf_cfg+0x8>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1e966:	0123      	lsls	r3, r4, #4
   1e968:	4907      	ldr	r1, [pc, #28]	; (1e988 <find_cf_cfg+0x48>)
   1e96a:	eb01 1204 	add.w	r2, r1, r4, lsl #4
   1e96e:	3201      	adds	r2, #1
   1e970:	5cc9      	ldrb	r1, [r1, r3]
   1e972:	4630      	mov	r0, r6
   1e974:	f00a fb21 	bl	28fba <bt_conn_is_peer_addr_le>
   1e978:	2800      	cmp	r0, #0
   1e97a:	d0ec      	beq.n	1e956 <find_cf_cfg+0x16>
   1e97c:	e000      	b.n	1e980 <find_cf_cfg+0x40>
	return NULL;
   1e97e:	2500      	movs	r5, #0
}
   1e980:	4628      	mov	r0, r5
   1e982:	bd70      	pop	{r4, r5, r6, pc}
   1e984:	0002f548 	.word	0x0002f548
   1e988:	20008224 	.word	0x20008224

0001e98c <find_sc_cfg>:
{
   1e98c:	b570      	push	{r4, r5, r6, lr}
   1e98e:	4605      	mov	r5, r0
   1e990:	460e      	mov	r6, r1
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1e992:	2400      	movs	r4, #0
   1e994:	e000      	b.n	1e998 <find_sc_cfg+0xc>
   1e996:	3401      	adds	r4, #1
   1e998:	2c07      	cmp	r4, #7
   1e99a:	d817      	bhi.n	1e9cc <find_sc_cfg+0x40>
		if (id == sc_cfg[i].id &&
   1e99c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1e9a0:	4a0b      	ldr	r2, [pc, #44]	; (1e9d0 <find_sc_cfg+0x44>)
   1e9a2:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   1e9a6:	429d      	cmp	r5, r3
   1e9a8:	d1f5      	bne.n	1e996 <find_sc_cfg+0xa>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   1e9aa:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1e9ae:	eb02 0083 	add.w	r0, r2, r3, lsl #2
   1e9b2:	2207      	movs	r2, #7
   1e9b4:	4631      	mov	r1, r6
   1e9b6:	3001      	adds	r0, #1
   1e9b8:	f009 fe51 	bl	2865e <memcmp>
		if (id == sc_cfg[i].id &&
   1e9bc:	2800      	cmp	r0, #0
   1e9be:	d1ea      	bne.n	1e996 <find_sc_cfg+0xa>
			return &sc_cfg[i];
   1e9c0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1e9c4:	4802      	ldr	r0, [pc, #8]	; (1e9d0 <find_sc_cfg+0x44>)
   1e9c6:	eb00 0084 	add.w	r0, r0, r4, lsl #2
   1e9ca:	e000      	b.n	1e9ce <find_sc_cfg+0x42>
	return NULL;
   1e9cc:	2000      	movs	r0, #0
}
   1e9ce:	bd70      	pop	{r4, r5, r6, pc}
   1e9d0:	200082a4 	.word	0x200082a4

0001e9d4 <find_ccc_cfg>:
{
   1e9d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e9d6:	4607      	mov	r7, r0
   1e9d8:	460e      	mov	r6, r1
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1e9da:	2400      	movs	r4, #0
   1e9dc:	e00a      	b.n	1e9f4 <find_ccc_cfg+0x20>
		} else if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1e9de:	eb04 0084 	add.w	r0, r4, r4, lsl #2
   1e9e2:	eb06 0040 	add.w	r0, r6, r0, lsl #1
   1e9e6:	2207      	movs	r2, #7
   1e9e8:	490d      	ldr	r1, [pc, #52]	; (1ea20 <find_ccc_cfg+0x4c>)
   1e9ea:	3001      	adds	r0, #1
   1e9ec:	f009 fe37 	bl	2865e <memcmp>
   1e9f0:	b198      	cbz	r0, 1ea1a <find_ccc_cfg+0x46>
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1e9f2:	3401      	adds	r4, #1
   1e9f4:	2c07      	cmp	r4, #7
   1e9f6:	d80f      	bhi.n	1ea18 <find_ccc_cfg+0x44>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   1e9f8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1e9fc:	eb06 0543 	add.w	r5, r6, r3, lsl #1
		if (conn) {
   1ea00:	2f00      	cmp	r7, #0
   1ea02:	d0ec      	beq.n	1e9de <find_ccc_cfg+0xa>
						    &cfg->peer)) {
   1ea04:	462a      	mov	r2, r5
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   1ea06:	3201      	adds	r2, #1
   1ea08:	f816 1013 	ldrb.w	r1, [r6, r3, lsl #1]
   1ea0c:	4638      	mov	r0, r7
   1ea0e:	f00a fad4 	bl	28fba <bt_conn_is_peer_addr_le>
   1ea12:	2800      	cmp	r0, #0
   1ea14:	d0ed      	beq.n	1e9f2 <find_ccc_cfg+0x1e>
   1ea16:	e000      	b.n	1ea1a <find_ccc_cfg+0x46>
	return NULL;
   1ea18:	2500      	movs	r5, #0
}
   1ea1a:	4628      	mov	r0, r5
   1ea1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ea1e:	bf00      	nop
   1ea20:	0002f548 	.word	0x0002f548

0001ea24 <gatt_sub_find>:
{
   1ea24:	b570      	push	{r4, r5, r6, lr}
   1ea26:	4606      	mov	r6, r0
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
   1ea28:	2400      	movs	r4, #0
   1ea2a:	e007      	b.n	1ea3c <gatt_sub_find+0x18>
			if (bt_addr_le_eq(&sub->peer, BT_ADDR_LE_ANY)) {
   1ea2c:	4628      	mov	r0, r5
   1ea2e:	2207      	movs	r2, #7
   1ea30:	490d      	ldr	r1, [pc, #52]	; (1ea68 <gatt_sub_find+0x44>)
   1ea32:	3001      	adds	r0, #1
   1ea34:	f009 fe13 	bl	2865e <memcmp>
   1ea38:	b1a0      	cbz	r0, 1ea64 <gatt_sub_find+0x40>
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
   1ea3a:	3401      	adds	r4, #1
   1ea3c:	2c07      	cmp	r4, #7
   1ea3e:	d810      	bhi.n	1ea62 <gatt_sub_find+0x3e>
		struct gatt_sub *sub = &subscriptions[i];
   1ea40:	4d0a      	ldr	r5, [pc, #40]	; (1ea6c <gatt_sub_find+0x48>)
   1ea42:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (!conn) {
   1ea46:	2e00      	cmp	r6, #0
   1ea48:	d0f0      	beq.n	1ea2c <gatt_sub_find+0x8>
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
   1ea4a:	0123      	lsls	r3, r4, #4
   1ea4c:	4907      	ldr	r1, [pc, #28]	; (1ea6c <gatt_sub_find+0x48>)
   1ea4e:	eb01 1204 	add.w	r2, r1, r4, lsl #4
   1ea52:	3201      	adds	r2, #1
   1ea54:	5cc9      	ldrb	r1, [r1, r3]
   1ea56:	4630      	mov	r0, r6
   1ea58:	f00a faaf 	bl	28fba <bt_conn_is_peer_addr_le>
   1ea5c:	2800      	cmp	r0, #0
   1ea5e:	d0ec      	beq.n	1ea3a <gatt_sub_find+0x16>
   1ea60:	e000      	b.n	1ea64 <gatt_sub_find+0x40>
	return NULL;
   1ea62:	2500      	movs	r5, #0
}
   1ea64:	4628      	mov	r0, r5
   1ea66:	bd70      	pop	{r4, r5, r6, pc}
   1ea68:	0002f548 	.word	0x0002f548
   1ea6c:	20008314 	.word	0x20008314

0001ea70 <cf_write>:
{
   1ea70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ea74:	b082      	sub	sp, #8
   1ea76:	461d      	mov	r5, r3
   1ea78:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	if (offset > sizeof(cfg->data)) {
   1ea7c:	2b01      	cmp	r3, #1
   1ea7e:	d861      	bhi.n	1eb44 <cf_write+0xd4>
   1ea80:	4606      	mov	r6, r0
   1ea82:	4617      	mov	r7, r2
	if (offset + len > sizeof(cfg->data)) {
   1ea84:	46a8      	mov	r8, r5
   1ea86:	442b      	add	r3, r5
   1ea88:	2b01      	cmp	r3, #1
   1ea8a:	d85e      	bhi.n	1eb4a <cf_write+0xda>
	cfg = find_cf_cfg(conn);
   1ea8c:	f7ff ff58 	bl	1e940 <find_cf_cfg>
	if (!cfg) {
   1ea90:	4604      	mov	r4, r0
   1ea92:	b300      	cbz	r0, 1ead6 <cf_write+0x66>
	if (!cf_set_value(cfg, value, len)) {
   1ea94:	462a      	mov	r2, r5
   1ea96:	4639      	mov	r1, r7
   1ea98:	4620      	mov	r0, r4
   1ea9a:	f00b fb78 	bl	2a18e <cf_set_value>
   1ea9e:	2800      	cmp	r0, #0
   1eaa0:	d056      	beq.n	1eb50 <cf_write+0xe0>
	memcpy(dst, src, sizeof(*dst));
   1eaa2:	2207      	movs	r2, #7
   1eaa4:	f106 0188 	add.w	r1, r6, #136	; 0x88
   1eaa8:	1c60      	adds	r0, r4, #1
   1eaaa:	f009 fdea 	bl	28682 <memcpy>
	cfg->id = conn->id;
   1eaae:	7a33      	ldrb	r3, [r6, #8]
   1eab0:	4620      	mov	r0, r4
   1eab2:	f800 3b0c 	strb.w	r3, [r0], #12
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1eab6:	f3bf 8f5b 	dmb	ish
   1eaba:	e850 3f00 	ldrex	r3, [r0]
   1eabe:	f043 0301 	orr.w	r3, r3, #1
   1eac2:	e840 3200 	strex	r2, r3, [r0]
   1eac6:	2a00      	cmp	r2, #0
   1eac8:	d1f7      	bne.n	1eaba <cf_write+0x4a>
   1eaca:	f3bf 8f5b 	dmb	ish
}
   1eace:	4640      	mov	r0, r8
   1ead0:	b002      	add	sp, #8
   1ead2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg = find_cf_cfg(NULL);
   1ead6:	f7ff ff33 	bl	1e940 <find_cf_cfg>
	if (!cfg) {
   1eada:	4604      	mov	r4, r0
   1eadc:	2800      	cmp	r0, #0
   1eade:	d1d9      	bne.n	1ea94 <cf_write+0x24>
		LOG_WRN("No space to store Client Supported Features");
   1eae0:	2006      	movs	r0, #6
   1eae2:	f7f7 f971 	bl	15dc8 <z_log_msg_alloc>
   1eae6:	2200      	movs	r2, #0
   1eae8:	f36f 0200 	bfc	r2, #0, #1
   1eaec:	f36f 0241 	bfc	r2, #1, #1
   1eaf0:	f36f 0282 	bfc	r2, #2, #1
   1eaf4:	f36f 02c5 	bfc	r2, #3, #3
   1eaf8:	2302      	movs	r3, #2
   1eafa:	f363 1288 	bfi	r2, r3, #6, #3
   1eafe:	2308      	movs	r3, #8
   1eb00:	f363 2252 	bfi	r2, r3, #9, #10
   1eb04:	f36f 42de 	bfc	r2, #19, #12
   1eb08:	f36f 72df 	bfc	r2, #31, #1
   1eb0c:	4604      	mov	r4, r0
   1eb0e:	b188      	cbz	r0, 1eb34 <cf_write+0xc4>
   1eb10:	f110 0310 	adds.w	r3, r0, #16
   1eb14:	d001      	beq.n	1eb1a <cf_write+0xaa>
   1eb16:	4910      	ldr	r1, [pc, #64]	; (1eb58 <cf_write+0xe8>)
   1eb18:	6141      	str	r1, [r0, #20]
   1eb1a:	b15b      	cbz	r3, 1eb34 <cf_write+0xc4>
   1eb1c:	2302      	movs	r3, #2
   1eb1e:	f88d 3004 	strb.w	r3, [sp, #4]
   1eb22:	2300      	movs	r3, #0
   1eb24:	f88d 3005 	strb.w	r3, [sp, #5]
   1eb28:	f88d 3006 	strb.w	r3, [sp, #6]
   1eb2c:	f88d 3007 	strb.w	r3, [sp, #7]
   1eb30:	9801      	ldr	r0, [sp, #4]
   1eb32:	6120      	str	r0, [r4, #16]
   1eb34:	2300      	movs	r3, #0
   1eb36:	4909      	ldr	r1, [pc, #36]	; (1eb5c <cf_write+0xec>)
   1eb38:	4620      	mov	r0, r4
   1eb3a:	f009 f950 	bl	27dde <z_log_msg_finalize>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1eb3e:	f06f 0810 	mvn.w	r8, #16
   1eb42:	e7c4      	b.n	1eace <cf_write+0x5e>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1eb44:	f06f 0806 	mvn.w	r8, #6
   1eb48:	e7c1      	b.n	1eace <cf_write+0x5e>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1eb4a:	f06f 080c 	mvn.w	r8, #12
   1eb4e:	e7be      	b.n	1eace <cf_write+0x5e>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   1eb50:	f06f 0812 	mvn.w	r8, #18
   1eb54:	e7bb      	b.n	1eace <cf_write+0x5e>
   1eb56:	bf00      	nop
   1eb58:	0003050c 	.word	0x0003050c
   1eb5c:	0002de88 	.word	0x0002de88

0001eb60 <sc_save>:
{
   1eb60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1eb64:	b082      	sub	sp, #8
   1eb66:	4607      	mov	r7, r0
   1eb68:	4688      	mov	r8, r1
   1eb6a:	4616      	mov	r6, r2
   1eb6c:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   1eb6e:	f7ff ff0d 	bl	1e98c <find_sc_cfg>
	if (!cfg) {
   1eb72:	4604      	mov	r4, r0
   1eb74:	b178      	cbz	r0, 1eb96 <sc_save+0x36>
	if (!(cfg->data.start || cfg->data.end)) {
   1eb76:	8923      	ldrh	r3, [r4, #8]
   1eb78:	b913      	cbnz	r3, 1eb80 <sc_save+0x20>
   1eb7a:	8963      	ldrh	r3, [r4, #10]
   1eb7c:	2b00      	cmp	r3, #0
   1eb7e:	d046      	beq.n	1ec0e <sc_save+0xae>
	modified = update_range(&cfg->data.start, &cfg->data.end, start, end);
   1eb80:	462b      	mov	r3, r5
   1eb82:	4632      	mov	r2, r6
   1eb84:	f104 010a 	add.w	r1, r4, #10
   1eb88:	f104 0008 	add.w	r0, r4, #8
   1eb8c:	f00b fadd 	bl	2a14a <update_range>
}
   1eb90:	b002      	add	sp, #8
   1eb92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1eb96:	491f      	ldr	r1, [pc, #124]	; (1ec14 <sc_save+0xb4>)
   1eb98:	f7ff fef8 	bl	1e98c <find_sc_cfg>
		if (!cfg) {
   1eb9c:	4604      	mov	r4, r0
   1eb9e:	b130      	cbz	r0, 1ebae <sc_save+0x4e>
		cfg->id = id;
   1eba0:	f800 7b01 	strb.w	r7, [r0], #1
   1eba4:	2207      	movs	r2, #7
   1eba6:	4641      	mov	r1, r8
   1eba8:	f009 fd6b 	bl	28682 <memcpy>
}
   1ebac:	e7e3      	b.n	1eb76 <sc_save+0x16>
			LOG_ERR("unable to save SC: no cfg left");
   1ebae:	2006      	movs	r0, #6
   1ebb0:	f7f7 f90a 	bl	15dc8 <z_log_msg_alloc>
   1ebb4:	2200      	movs	r2, #0
   1ebb6:	f36f 0200 	bfc	r2, #0, #1
   1ebba:	f36f 0241 	bfc	r2, #1, #1
   1ebbe:	f36f 0282 	bfc	r2, #2, #1
   1ebc2:	f36f 02c5 	bfc	r2, #3, #3
   1ebc6:	2301      	movs	r3, #1
   1ebc8:	f363 1288 	bfi	r2, r3, #6, #3
   1ebcc:	2308      	movs	r3, #8
   1ebce:	f363 2252 	bfi	r2, r3, #9, #10
   1ebd2:	f36f 42de 	bfc	r2, #19, #12
   1ebd6:	f36f 72df 	bfc	r2, #31, #1
   1ebda:	4604      	mov	r4, r0
   1ebdc:	b188      	cbz	r0, 1ec02 <sc_save+0xa2>
   1ebde:	f110 0310 	adds.w	r3, r0, #16
   1ebe2:	d001      	beq.n	1ebe8 <sc_save+0x88>
   1ebe4:	490c      	ldr	r1, [pc, #48]	; (1ec18 <sc_save+0xb8>)
   1ebe6:	6141      	str	r1, [r0, #20]
   1ebe8:	b15b      	cbz	r3, 1ec02 <sc_save+0xa2>
   1ebea:	2302      	movs	r3, #2
   1ebec:	f88d 3004 	strb.w	r3, [sp, #4]
   1ebf0:	2300      	movs	r3, #0
   1ebf2:	f88d 3005 	strb.w	r3, [sp, #5]
   1ebf6:	f88d 3006 	strb.w	r3, [sp, #6]
   1ebfa:	f88d 3007 	strb.w	r3, [sp, #7]
   1ebfe:	9801      	ldr	r0, [sp, #4]
   1ec00:	6120      	str	r0, [r4, #16]
   1ec02:	2300      	movs	r3, #0
   1ec04:	4905      	ldr	r1, [pc, #20]	; (1ec1c <sc_save+0xbc>)
   1ec06:	4620      	mov	r0, r4
   1ec08:	f009 f8e9 	bl	27dde <z_log_msg_finalize>
			return;
   1ec0c:	e7c0      	b.n	1eb90 <sc_save+0x30>
		cfg->data.start = start;
   1ec0e:	8126      	strh	r6, [r4, #8]
		cfg->data.end = end;
   1ec10:	8165      	strh	r5, [r4, #10]
		goto done;
   1ec12:	e7bd      	b.n	1eb90 <sc_save+0x30>
   1ec14:	0002f548 	.word	0x0002f548
   1ec18:	00030538 	.word	0x00030538
   1ec1c:	0002de88 	.word	0x0002de88

0001ec20 <clear_ccc_cfg>:
{
   1ec20:	b510      	push	{r4, lr}
   1ec22:	4604      	mov	r4, r0
	memcpy(dst, src, sizeof(*dst));
   1ec24:	2207      	movs	r2, #7
   1ec26:	4904      	ldr	r1, [pc, #16]	; (1ec38 <clear_ccc_cfg+0x18>)
   1ec28:	3001      	adds	r0, #1
   1ec2a:	f009 fd2a 	bl	28682 <memcpy>
	cfg->id = 0U;
   1ec2e:	2300      	movs	r3, #0
   1ec30:	7023      	strb	r3, [r4, #0]
	cfg->value = 0U;
   1ec32:	8123      	strh	r3, [r4, #8]
}
   1ec34:	bd10      	pop	{r4, pc}
   1ec36:	bf00      	nop
   1ec38:	0002f548 	.word	0x0002f548

0001ec3c <bt_gatt_attr_write_ccc>:
{
   1ec3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ec40:	b083      	sub	sp, #12
   1ec42:	461c      	mov	r4, r3
   1ec44:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	struct _bt_gatt_ccc *ccc = attr->user_data;
   1ec48:	68cf      	ldr	r7, [r1, #12]
	if (offset) {
   1ec4a:	2b00      	cmp	r3, #0
   1ec4c:	d179      	bne.n	1ed42 <bt_gatt_attr_write_ccc+0x106>
   1ec4e:	4681      	mov	r9, r0
   1ec50:	460e      	mov	r6, r1
	if (!len || len > sizeof(uint16_t)) {
   1ec52:	1e63      	subs	r3, r4, #1
   1ec54:	b29b      	uxth	r3, r3
   1ec56:	2b01      	cmp	r3, #1
   1ec58:	d876      	bhi.n	1ed48 <bt_gatt_attr_write_ccc+0x10c>
	if (len < sizeof(uint16_t)) {
   1ec5a:	2c01      	cmp	r4, #1
   1ec5c:	d920      	bls.n	1eca0 <bt_gatt_attr_write_ccc+0x64>
   1ec5e:	7853      	ldrb	r3, [r2, #1]
   1ec60:	7815      	ldrb	r5, [r2, #0]
   1ec62:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
   1ec66:	4639      	mov	r1, r7
   1ec68:	4648      	mov	r0, r9
   1ec6a:	f7ff feb3 	bl	1e9d4 <find_ccc_cfg>
	if (!cfg) {
   1ec6e:	4680      	mov	r8, r0
   1ec70:	b1c0      	cbz	r0, 1eca4 <bt_gatt_attr_write_ccc+0x68>
	if (ccc->cfg_write) {
   1ec72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1ec74:	b143      	cbz	r3, 1ec88 <bt_gatt_attr_write_ccc+0x4c>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   1ec76:	462a      	mov	r2, r5
   1ec78:	4631      	mov	r1, r6
   1ec7a:	4648      	mov	r0, r9
   1ec7c:	4798      	blx	r3
		if (write < 0) {
   1ec7e:	2800      	cmp	r0, #0
   1ec80:	db0b      	blt.n	1ec9a <bt_gatt_attr_write_ccc+0x5e>
		if (write != sizeof(value) && write != 1) {
   1ec82:	3801      	subs	r0, #1
   1ec84:	2801      	cmp	r0, #1
   1ec86:	d862      	bhi.n	1ed4e <bt_gatt_attr_write_ccc+0x112>
	cfg->value = value;
   1ec88:	f8a8 5008 	strh.w	r5, [r8, #8]
	if (cfg->value != ccc->value) {
   1ec8c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
   1ec90:	429d      	cmp	r5, r3
   1ec92:	d14d      	bne.n	1ed30 <bt_gatt_attr_write_ccc+0xf4>
	if (!value) {
   1ec94:	2d00      	cmp	r5, #0
   1ec96:	d050      	beq.n	1ed3a <bt_gatt_attr_write_ccc+0xfe>
	return len;
   1ec98:	4620      	mov	r0, r4
}
   1ec9a:	b003      	add	sp, #12
   1ec9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		value = *(uint8_t *)buf;
   1eca0:	7815      	ldrb	r5, [r2, #0]
   1eca2:	e7e0      	b.n	1ec66 <bt_gatt_attr_write_ccc+0x2a>
		if (!value) {
   1eca4:	b90d      	cbnz	r5, 1ecaa <bt_gatt_attr_write_ccc+0x6e>
			return len;
   1eca6:	4620      	mov	r0, r4
   1eca8:	e7f7      	b.n	1ec9a <bt_gatt_attr_write_ccc+0x5e>
		cfg = find_ccc_cfg(NULL, ccc);
   1ecaa:	4639      	mov	r1, r7
   1ecac:	2000      	movs	r0, #0
   1ecae:	f7ff fe91 	bl	1e9d4 <find_ccc_cfg>
		if (!cfg) {
   1ecb2:	4680      	mov	r8, r0
   1ecb4:	b150      	cbz	r0, 1eccc <bt_gatt_attr_write_ccc+0x90>
   1ecb6:	2207      	movs	r2, #7
   1ecb8:	f109 0188 	add.w	r1, r9, #136	; 0x88
   1ecbc:	3001      	adds	r0, #1
   1ecbe:	f009 fce0 	bl	28682 <memcpy>
		cfg->id = conn->id;
   1ecc2:	f899 3008 	ldrb.w	r3, [r9, #8]
   1ecc6:	f888 3000 	strb.w	r3, [r8]
   1ecca:	e7d2      	b.n	1ec72 <bt_gatt_attr_write_ccc+0x36>
			LOG_WRN("No space to store CCC cfg");
   1eccc:	2006      	movs	r0, #6
   1ecce:	f7f7 f87b 	bl	15dc8 <z_log_msg_alloc>
   1ecd2:	2200      	movs	r2, #0
   1ecd4:	f36f 0200 	bfc	r2, #0, #1
   1ecd8:	f36f 0241 	bfc	r2, #1, #1
   1ecdc:	f36f 0282 	bfc	r2, #2, #1
   1ece0:	f36f 02c5 	bfc	r2, #3, #3
   1ece4:	2302      	movs	r3, #2
   1ece6:	f363 1288 	bfi	r2, r3, #6, #3
   1ecea:	2308      	movs	r3, #8
   1ecec:	f363 2252 	bfi	r2, r3, #9, #10
   1ecf0:	f36f 42de 	bfc	r2, #19, #12
   1ecf4:	f36f 72df 	bfc	r2, #31, #1
   1ecf8:	4604      	mov	r4, r0
   1ecfa:	b188      	cbz	r0, 1ed20 <bt_gatt_attr_write_ccc+0xe4>
   1ecfc:	f110 0310 	adds.w	r3, r0, #16
   1ed00:	d001      	beq.n	1ed06 <bt_gatt_attr_write_ccc+0xca>
   1ed02:	4914      	ldr	r1, [pc, #80]	; (1ed54 <bt_gatt_attr_write_ccc+0x118>)
   1ed04:	6141      	str	r1, [r0, #20]
   1ed06:	b15b      	cbz	r3, 1ed20 <bt_gatt_attr_write_ccc+0xe4>
   1ed08:	2302      	movs	r3, #2
   1ed0a:	f88d 3004 	strb.w	r3, [sp, #4]
   1ed0e:	2300      	movs	r3, #0
   1ed10:	f88d 3005 	strb.w	r3, [sp, #5]
   1ed14:	f88d 3006 	strb.w	r3, [sp, #6]
   1ed18:	f88d 3007 	strb.w	r3, [sp, #7]
   1ed1c:	9801      	ldr	r0, [sp, #4]
   1ed1e:	6120      	str	r0, [r4, #16]
   1ed20:	2300      	movs	r3, #0
   1ed22:	490d      	ldr	r1, [pc, #52]	; (1ed58 <bt_gatt_attr_write_ccc+0x11c>)
   1ed24:	4620      	mov	r0, r4
   1ed26:	f009 f85a 	bl	27dde <z_log_msg_finalize>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1ed2a:	f06f 0010 	mvn.w	r0, #16
   1ed2e:	e7b4      	b.n	1ec9a <bt_gatt_attr_write_ccc+0x5e>
		gatt_ccc_changed(attr, ccc);
   1ed30:	4639      	mov	r1, r7
   1ed32:	4630      	mov	r0, r6
   1ed34:	f00b fa65 	bl	2a202 <gatt_ccc_changed>
   1ed38:	e7ac      	b.n	1ec94 <bt_gatt_attr_write_ccc+0x58>
		clear_ccc_cfg(cfg);
   1ed3a:	4640      	mov	r0, r8
   1ed3c:	f7ff ff70 	bl	1ec20 <clear_ccc_cfg>
   1ed40:	e7aa      	b.n	1ec98 <bt_gatt_attr_write_ccc+0x5c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1ed42:	f06f 0006 	mvn.w	r0, #6
   1ed46:	e7a8      	b.n	1ec9a <bt_gatt_attr_write_ccc+0x5e>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1ed48:	f06f 000c 	mvn.w	r0, #12
   1ed4c:	e7a5      	b.n	1ec9a <bt_gatt_attr_write_ccc+0x5e>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   1ed4e:	f06f 000d 	mvn.w	r0, #13
   1ed52:	e7a2      	b.n	1ec9a <bt_gatt_attr_write_ccc+0x5e>
   1ed54:	00030558 	.word	0x00030558
   1ed58:	0002de88 	.word	0x0002de88

0001ed5c <gatt_sub_free>:
{
   1ed5c:	b508      	push	{r3, lr}
   1ed5e:	2207      	movs	r2, #7
   1ed60:	4902      	ldr	r1, [pc, #8]	; (1ed6c <gatt_sub_free+0x10>)
   1ed62:	3001      	adds	r0, #1
   1ed64:	f009 fc8d 	bl	28682 <memcpy>
}
   1ed68:	bd08      	pop	{r3, pc}
   1ed6a:	bf00      	nop
   1ed6c:	0002f548 	.word	0x0002f548

0001ed70 <sc_clear>:
{
   1ed70:	b530      	push	{r4, r5, lr}
   1ed72:	b083      	sub	sp, #12
   1ed74:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1ed76:	f100 0588 	add.w	r5, r0, #136	; 0x88
   1ed7a:	4629      	mov	r1, r5
   1ed7c:	7a00      	ldrb	r0, [r0, #8]
   1ed7e:	f009 fedc 	bl	28b3a <bt_addr_le_is_bonded>
   1ed82:	b3c0      	cbz	r0, 1edf6 <sc_clear+0x86>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   1ed84:	4629      	mov	r1, r5
   1ed86:	7a20      	ldrb	r0, [r4, #8]
   1ed88:	f00b fb8d 	bl	2a4a6 <bt_gatt_clear_sc>
		if (err) {
   1ed8c:	4605      	mov	r5, r0
   1ed8e:	b908      	cbnz	r0, 1ed94 <sc_clear+0x24>
}
   1ed90:	b003      	add	sp, #12
   1ed92:	bd30      	pop	{r4, r5, pc}
			LOG_ERR("Failed to clear SC %d", err);
   1ed94:	2008      	movs	r0, #8
   1ed96:	f7f7 f817 	bl	15dc8 <z_log_msg_alloc>
   1ed9a:	2200      	movs	r2, #0
   1ed9c:	f36f 0200 	bfc	r2, #0, #1
   1eda0:	f36f 0241 	bfc	r2, #1, #1
   1eda4:	f36f 0282 	bfc	r2, #2, #1
   1eda8:	f36f 02c5 	bfc	r2, #3, #3
   1edac:	2301      	movs	r3, #1
   1edae:	f363 1288 	bfi	r2, r3, #6, #3
   1edb2:	230c      	movs	r3, #12
   1edb4:	f363 2252 	bfi	r2, r3, #9, #10
   1edb8:	f36f 42de 	bfc	r2, #19, #12
   1edbc:	f36f 72df 	bfc	r2, #31, #1
   1edc0:	4604      	mov	r4, r0
   1edc2:	b190      	cbz	r0, 1edea <sc_clear+0x7a>
   1edc4:	f110 0310 	adds.w	r3, r0, #16
   1edc8:	d002      	beq.n	1edd0 <sc_clear+0x60>
   1edca:	490f      	ldr	r1, [pc, #60]	; (1ee08 <sc_clear+0x98>)
   1edcc:	6141      	str	r1, [r0, #20]
   1edce:	6185      	str	r5, [r0, #24]
   1edd0:	b15b      	cbz	r3, 1edea <sc_clear+0x7a>
   1edd2:	2303      	movs	r3, #3
   1edd4:	f88d 3004 	strb.w	r3, [sp, #4]
   1edd8:	2300      	movs	r3, #0
   1edda:	f88d 3005 	strb.w	r3, [sp, #5]
   1edde:	f88d 3006 	strb.w	r3, [sp, #6]
   1ede2:	f88d 3007 	strb.w	r3, [sp, #7]
   1ede6:	9801      	ldr	r0, [sp, #4]
   1ede8:	6120      	str	r0, [r4, #16]
   1edea:	2300      	movs	r3, #0
   1edec:	4907      	ldr	r1, [pc, #28]	; (1ee0c <sc_clear+0x9c>)
   1edee:	4620      	mov	r0, r4
   1edf0:	f008 fff5 	bl	27dde <z_log_msg_finalize>
   1edf4:	e7cc      	b.n	1ed90 <sc_clear+0x20>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1edf6:	4629      	mov	r1, r5
   1edf8:	7a20      	ldrb	r0, [r4, #8]
   1edfa:	f7ff fdc7 	bl	1e98c <find_sc_cfg>
		if (cfg) {
   1edfe:	2800      	cmp	r0, #0
   1ee00:	d0c6      	beq.n	1ed90 <sc_clear+0x20>
			clear_sc_cfg(cfg);
   1ee02:	f00b fb4a 	bl	2a49a <clear_sc_cfg>
}
   1ee06:	e7c3      	b.n	1ed90 <sc_clear+0x20>
   1ee08:	00030574 	.word	0x00030574
   1ee0c:	0002de88 	.word	0x0002de88

0001ee10 <sc_indicate_rsp>:
{
   1ee10:	b510      	push	{r4, lr}
   1ee12:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1ee14:	4b1b      	ldr	r3, [pc, #108]	; (1ee84 <sc_indicate_rsp+0x74>)
   1ee16:	f3bf 8f5b 	dmb	ish
   1ee1a:	e853 2f00 	ldrex	r2, [r3]
   1ee1e:	f022 0202 	bic.w	r2, r2, #2
   1ee22:	e843 2100 	strex	r1, r2, [r3]
   1ee26:	2900      	cmp	r1, #0
   1ee28:	d1f7      	bne.n	1ee1a <sc_indicate_rsp+0xa>
   1ee2a:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1ee2e:	f3bf 8f5b 	dmb	ish
   1ee32:	681b      	ldr	r3, [r3, #0]
   1ee34:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1ee38:	f013 0f01 	tst.w	r3, #1
   1ee3c:	d104      	bne.n	1ee48 <sc_indicate_rsp+0x38>
	if (bt_att_fixed_chan_only(conn)) {
   1ee3e:	4620      	mov	r0, r4
   1ee40:	f00b f918 	bl	2a074 <bt_att_fixed_chan_only>
   1ee44:	b930      	cbnz	r0, 1ee54 <sc_indicate_rsp+0x44>
}
   1ee46:	bd10      	pop	{r4, pc}
	k_work_reschedule(&gatt_sc.work, timeout);
   1ee48:	2200      	movs	r2, #0
   1ee4a:	2300      	movs	r3, #0
   1ee4c:	480e      	ldr	r0, [pc, #56]	; (1ee88 <sc_indicate_rsp+0x78>)
   1ee4e:	f006 fb8f 	bl	25570 <k_work_reschedule>
   1ee52:	e7f4      	b.n	1ee3e <sc_indicate_rsp+0x2e>
		cfg = find_cf_cfg(conn);
   1ee54:	4620      	mov	r0, r4
   1ee56:	f7ff fd73 	bl	1e940 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   1ee5a:	4603      	mov	r3, r0
   1ee5c:	2800      	cmp	r0, #0
   1ee5e:	d0f2      	beq.n	1ee46 <sc_indicate_rsp+0x36>
   1ee60:	7a02      	ldrb	r2, [r0, #8]
   1ee62:	f012 0f01 	tst.w	r2, #1
   1ee66:	d0ee      	beq.n	1ee46 <sc_indicate_rsp+0x36>
			atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1ee68:	330c      	adds	r3, #12
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1ee6a:	f3bf 8f5b 	dmb	ish
   1ee6e:	e853 1f00 	ldrex	r1, [r3]
   1ee72:	f041 0101 	orr.w	r1, r1, #1
   1ee76:	e843 1200 	strex	r2, r1, [r3]
   1ee7a:	2a00      	cmp	r2, #0
   1ee7c:	d1f7      	bne.n	1ee6e <sc_indicate_rsp+0x5e>
   1ee7e:	f3bf 8f5b 	dmb	ish
}
   1ee82:	e7e0      	b.n	1ee46 <sc_indicate_rsp+0x36>
   1ee84:	20002980 	.word	0x20002980
   1ee88:	20002950 	.word	0x20002950

0001ee8c <gatt_write_ccc_rsp>:
{
   1ee8c:	b570      	push	{r4, r5, r6, lr}
   1ee8e:	b082      	sub	sp, #8
   1ee90:	4606      	mov	r6, r0
   1ee92:	460d      	mov	r5, r1
   1ee94:	9c06      	ldr	r4, [sp, #24]
	atomic_clear_bit(params->flags, BT_GATT_SUBSCRIBE_FLAG_WRITE_PENDING);
   1ee96:	f104 0314 	add.w	r3, r4, #20
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1ee9a:	f3bf 8f5b 	dmb	ish
   1ee9e:	e853 1f00 	ldrex	r1, [r3]
   1eea2:	f021 0104 	bic.w	r1, r1, #4
   1eea6:	e843 1200 	strex	r2, r1, [r3]
   1eeaa:	2a00      	cmp	r2, #0
   1eeac:	d1f7      	bne.n	1ee9e <gatt_write_ccc_rsp+0x12>
   1eeae:	f3bf 8f5b 	dmb	ish
	if (err) {
   1eeb2:	b97d      	cbnz	r5, 1eed4 <gatt_write_ccc_rsp+0x48>
	} else if (!params->value) {
   1eeb4:	8a23      	ldrh	r3, [r4, #16]
   1eeb6:	b92b      	cbnz	r3, 1eec4 <gatt_write_ccc_rsp+0x38>
		params->notify(conn, params, NULL, 0);
   1eeb8:	461a      	mov	r2, r3
   1eeba:	4621      	mov	r1, r4
   1eebc:	4630      	mov	r0, r6
   1eebe:	f8d4 c000 	ldr.w	ip, [r4]
   1eec2:	47e0      	blx	ip
	if (params->subscribe) {
   1eec4:	6863      	ldr	r3, [r4, #4]
   1eec6:	b31b      	cbz	r3, 1ef10 <gatt_write_ccc_rsp+0x84>
		params->subscribe(conn, err, params);
   1eec8:	4622      	mov	r2, r4
   1eeca:	4629      	mov	r1, r5
   1eecc:	4630      	mov	r0, r6
   1eece:	4798      	blx	r3
}
   1eed0:	b002      	add	sp, #8
   1eed2:	bd70      	pop	{r4, r5, r6, pc}
		sub = gatt_sub_find(conn);
   1eed4:	4630      	mov	r0, r6
   1eed6:	f7ff fda5 	bl	1ea24 <gatt_sub_find>
		if (!sub) {
   1eeda:	4601      	mov	r1, r0
   1eedc:	2800      	cmp	r0, #0
   1eede:	d0f7      	beq.n	1eed0 <gatt_write_ccc_rsp+0x44>
	return list->head;
   1eee0:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_PEEK_NEXT(slist, snode)
   1eee2:	b133      	cbz	r3, 1eef2 <gatt_write_ccc_rsp+0x66>
	return node->next;
   1eee4:	681a      	ldr	r2, [r3, #0]
   1eee6:	e009      	b.n	1eefc <gatt_write_ccc_rsp+0x70>
				gatt_sub_remove(conn, sub, tmp, params);
   1eee8:	4623      	mov	r3, r4
   1eeea:	4630      	mov	r0, r6
   1eeec:	f00b fa71 	bl	2a3d2 <gatt_sub_remove>
				break;
   1eef0:	e7e8      	b.n	1eec4 <gatt_write_ccc_rsp+0x38>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1eef2:	461a      	mov	r2, r3
   1eef4:	e002      	b.n	1eefc <gatt_write_ccc_rsp+0x70>
   1eef6:	4610      	mov	r0, r2
   1eef8:	4613      	mov	r3, r2
   1eefa:	4602      	mov	r2, r0
		SYS_SLIST_FOR_EACH_NODE_SAFE(&sub->list, node, tmp) {
   1eefc:	2b00      	cmp	r3, #0
   1eefe:	d0e1      	beq.n	1eec4 <gatt_write_ccc_rsp+0x38>
			if (node == &params->node) {
   1ef00:	f104 0c18 	add.w	ip, r4, #24
   1ef04:	459c      	cmp	ip, r3
   1ef06:	d0ef      	beq.n	1eee8 <gatt_write_ccc_rsp+0x5c>
   1ef08:	2a00      	cmp	r2, #0
   1ef0a:	d0f4      	beq.n	1eef6 <gatt_write_ccc_rsp+0x6a>
	return node->next;
   1ef0c:	6810      	ldr	r0, [r2, #0]
   1ef0e:	e7f3      	b.n	1eef8 <gatt_write_ccc_rsp+0x6c>
	} else if (params->write) {
   1ef10:	68a3      	ldr	r3, [r4, #8]
   1ef12:	2b00      	cmp	r3, #0
   1ef14:	d0dc      	beq.n	1eed0 <gatt_write_ccc_rsp+0x44>
		LOG_WRN("write callback is deprecated, use subscribe cb instead");
   1ef16:	2006      	movs	r0, #6
   1ef18:	f7f6 ff56 	bl	15dc8 <z_log_msg_alloc>
   1ef1c:	2200      	movs	r2, #0
   1ef1e:	f36f 0200 	bfc	r2, #0, #1
   1ef22:	f36f 0241 	bfc	r2, #1, #1
   1ef26:	f36f 0282 	bfc	r2, #2, #1
   1ef2a:	f36f 02c5 	bfc	r2, #3, #3
   1ef2e:	2302      	movs	r3, #2
   1ef30:	f363 1288 	bfi	r2, r3, #6, #3
   1ef34:	2308      	movs	r3, #8
   1ef36:	f363 2252 	bfi	r2, r3, #9, #10
   1ef3a:	f36f 42de 	bfc	r2, #19, #12
   1ef3e:	f36f 72df 	bfc	r2, #31, #1
   1ef42:	4684      	mov	ip, r0
   1ef44:	b190      	cbz	r0, 1ef6c <gatt_write_ccc_rsp+0xe0>
   1ef46:	f110 0310 	adds.w	r3, r0, #16
   1ef4a:	d001      	beq.n	1ef50 <gatt_write_ccc_rsp+0xc4>
   1ef4c:	490d      	ldr	r1, [pc, #52]	; (1ef84 <gatt_write_ccc_rsp+0xf8>)
   1ef4e:	6141      	str	r1, [r0, #20]
   1ef50:	b163      	cbz	r3, 1ef6c <gatt_write_ccc_rsp+0xe0>
   1ef52:	2302      	movs	r3, #2
   1ef54:	f88d 3004 	strb.w	r3, [sp, #4]
   1ef58:	2300      	movs	r3, #0
   1ef5a:	f88d 3005 	strb.w	r3, [sp, #5]
   1ef5e:	f88d 3006 	strb.w	r3, [sp, #6]
   1ef62:	f88d 3007 	strb.w	r3, [sp, #7]
   1ef66:	9801      	ldr	r0, [sp, #4]
   1ef68:	f8cc 0010 	str.w	r0, [ip, #16]
   1ef6c:	2300      	movs	r3, #0
   1ef6e:	4906      	ldr	r1, [pc, #24]	; (1ef88 <gatt_write_ccc_rsp+0xfc>)
   1ef70:	4660      	mov	r0, ip
   1ef72:	f008 ff34 	bl	27dde <z_log_msg_finalize>
		params->write(conn, err, NULL);
   1ef76:	68a3      	ldr	r3, [r4, #8]
   1ef78:	2200      	movs	r2, #0
   1ef7a:	4629      	mov	r1, r5
   1ef7c:	4630      	mov	r0, r6
   1ef7e:	4798      	blx	r3
   1ef80:	e7a6      	b.n	1eed0 <gatt_write_ccc_rsp+0x44>
   1ef82:	bf00      	nop
   1ef84:	0003058c 	.word	0x0003058c
   1ef88:	0002de88 	.word	0x0002de88

0001ef8c <disconnected_cb>:
{
   1ef8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ef90:	4690      	mov	r8, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1ef92:	6882      	ldr	r2, [r0, #8]
   1ef94:	4b2e      	ldr	r3, [pc, #184]	; (1f050 <disconnected_cb+0xc4>)
   1ef96:	429a      	cmp	r2, r3
   1ef98:	d002      	beq.n	1efa0 <disconnected_cb+0x14>
}
   1ef9a:	2001      	movs	r0, #1
   1ef9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1efa0:	4681      	mov	r9, r0
	ccc = attr->user_data;
   1efa2:	68c6      	ldr	r6, [r0, #12]
	if (!ccc->value) {
   1efa4:	f8b6 3050 	ldrh.w	r3, [r6, #80]	; 0x50
   1efa8:	2b00      	cmp	r3, #0
   1efaa:	d0f6      	beq.n	1ef9a <disconnected_cb+0xe>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1efac:	2400      	movs	r4, #0
	value_used = false;
   1efae:	46a2      	mov	sl, r4
   1efb0:	e003      	b.n	1efba <disconnected_cb+0x2e>
				bt_conn_unref(tmp);
   1efb2:	4618      	mov	r0, r3
   1efb4:	f009 ffa7 	bl	28f06 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1efb8:	3401      	adds	r4, #1
   1efba:	2c07      	cmp	r4, #7
   1efbc:	d83a      	bhi.n	1f034 <disconnected_cb+0xa8>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   1efbe:	eb04 0584 	add.w	r5, r4, r4, lsl #2
   1efc2:	eb06 0545 	add.w	r5, r6, r5, lsl #1
		if (!cfg->value) {
   1efc6:	892b      	ldrh	r3, [r5, #8]
   1efc8:	2b00      	cmp	r3, #0
   1efca:	d0f5      	beq.n	1efb8 <disconnected_cb+0x2c>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1efcc:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1efd0:	462f      	mov	r7, r5
   1efd2:	3701      	adds	r7, #1
   1efd4:	463a      	mov	r2, r7
   1efd6:	f816 1013 	ldrb.w	r1, [r6, r3, lsl #1]
   1efda:	4640      	mov	r0, r8
   1efdc:	f009 ffed 	bl	28fba <bt_conn_is_peer_addr_le>
   1efe0:	b978      	cbnz	r0, 1f002 <disconnected_cb+0x76>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1efe2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1efe6:	4639      	mov	r1, r7
   1efe8:	f816 0013 	ldrb.w	r0, [r6, r3, lsl #1]
   1efec:	f7fd faa2 	bl	1c534 <bt_conn_lookup_addr_le>
			if (tmp) {
   1eff0:	4603      	mov	r3, r0
   1eff2:	2800      	cmp	r0, #0
   1eff4:	d0e0      	beq.n	1efb8 <disconnected_cb+0x2c>
				if (tmp->state == BT_CONN_CONNECTED) {
   1eff6:	7a82      	ldrb	r2, [r0, #10]
   1eff8:	2a07      	cmp	r2, #7
   1effa:	d1da      	bne.n	1efb2 <disconnected_cb+0x26>
					value_used = true;
   1effc:	f04f 0a01 	mov.w	sl, #1
   1f000:	e7d7      	b.n	1efb2 <disconnected_cb+0x26>
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1f002:	f108 0b88 	add.w	fp, r8, #136	; 0x88
   1f006:	4659      	mov	r1, fp
   1f008:	f898 0008 	ldrb.w	r0, [r8, #8]
   1f00c:	f009 fd95 	bl	28b3a <bt_addr_le_is_bonded>
   1f010:	b950      	cbnz	r0, 1f028 <disconnected_cb+0x9c>
				if (ccc == &sc_ccc) {
   1f012:	4b10      	ldr	r3, [pc, #64]	; (1f054 <disconnected_cb+0xc8>)
   1f014:	429e      	cmp	r6, r3
   1f016:	d003      	beq.n	1f020 <disconnected_cb+0x94>
				clear_ccc_cfg(cfg);
   1f018:	4628      	mov	r0, r5
   1f01a:	f7ff fe01 	bl	1ec20 <clear_ccc_cfg>
   1f01e:	e7cb      	b.n	1efb8 <disconnected_cb+0x2c>
					sc_clear(conn);
   1f020:	4640      	mov	r0, r8
   1f022:	f7ff fea5 	bl	1ed70 <sc_clear>
   1f026:	e7f7      	b.n	1f018 <disconnected_cb+0x8c>
   1f028:	2207      	movs	r2, #7
   1f02a:	4659      	mov	r1, fp
   1f02c:	4638      	mov	r0, r7
   1f02e:	f009 fb28 	bl	28682 <memcpy>
}
   1f032:	e7c1      	b.n	1efb8 <disconnected_cb+0x2c>
	if (!value_used) {
   1f034:	f1ba 0f00 	cmp.w	sl, #0
   1f038:	d1af      	bne.n	1ef9a <disconnected_cb+0xe>
		ccc->value = 0U;
   1f03a:	2300      	movs	r3, #0
   1f03c:	f8a6 3050 	strh.w	r3, [r6, #80]	; 0x50
		if (ccc->cfg_changed) {
   1f040:	6d73      	ldr	r3, [r6, #84]	; 0x54
   1f042:	2b00      	cmp	r3, #0
   1f044:	d0a9      	beq.n	1ef9a <disconnected_cb+0xe>
			ccc->cfg_changed(attr, ccc->value);
   1f046:	2100      	movs	r1, #0
   1f048:	4648      	mov	r0, r9
   1f04a:	4798      	blx	r3
   1f04c:	e7a5      	b.n	1ef9a <disconnected_cb+0xe>
   1f04e:	bf00      	nop
   1f050:	0001ec3d 	.word	0x0001ec3d
   1f054:	2000099c 	.word	0x2000099c

0001f058 <gatt_write_ccc>:
{
   1f058:	b500      	push	{lr}
   1f05a:	b085      	sub	sp, #20
   1f05c:	460a      	mov	r2, r1
	return gatt_req_send(conn, gatt_write_ccc_rsp, params,
   1f05e:	2301      	movs	r3, #1
   1f060:	9302      	str	r3, [sp, #8]
   1f062:	2304      	movs	r3, #4
   1f064:	9301      	str	r3, [sp, #4]
   1f066:	2312      	movs	r3, #18
   1f068:	9300      	str	r3, [sp, #0]
   1f06a:	4b03      	ldr	r3, [pc, #12]	; (1f078 <gatt_write_ccc+0x20>)
   1f06c:	4903      	ldr	r1, [pc, #12]	; (1f07c <gatt_write_ccc+0x24>)
   1f06e:	f00b fab7 	bl	2a5e0 <gatt_req_send>
}
   1f072:	b005      	add	sp, #20
   1f074:	f85d fb04 	ldr.w	pc, [sp], #4
   1f078:	0002a6bf 	.word	0x0002a6bf
   1f07c:	0001ee8d 	.word	0x0001ee8d

0001f080 <clear_cf_cfg>:
{
   1f080:	b510      	push	{r4, lr}
   1f082:	4604      	mov	r4, r0
	memcpy(dst, src, sizeof(*dst));
   1f084:	2207      	movs	r2, #7
   1f086:	490b      	ldr	r1, [pc, #44]	; (1f0b4 <clear_cf_cfg+0x34>)
   1f088:	3001      	adds	r0, #1
   1f08a:	f009 fafa 	bl	28682 <memcpy>
	memset(cfg->data, 0, sizeof(cfg->data));
   1f08e:	2201      	movs	r2, #1
   1f090:	2100      	movs	r1, #0
   1f092:	f104 0008 	add.w	r0, r4, #8
   1f096:	f009 fb23 	bl	286e0 <memset>
	atomic_set(cfg->flags, 0);
   1f09a:	340c      	adds	r4, #12
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1f09c:	2300      	movs	r3, #0
   1f09e:	f3bf 8f5b 	dmb	ish
   1f0a2:	e854 2f00 	ldrex	r2, [r4]
   1f0a6:	e844 3100 	strex	r1, r3, [r4]
   1f0aa:	2900      	cmp	r1, #0
   1f0ac:	d1f9      	bne.n	1f0a2 <clear_cf_cfg+0x22>
   1f0ae:	f3bf 8f5b 	dmb	ish
}
   1f0b2:	bd10      	pop	{r4, pc}
   1f0b4:	0002f548 	.word	0x0002f548

0001f0b8 <bt_gatt_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1f0b8:	4b13      	ldr	r3, [pc, #76]	; (1f108 <bt_gatt_init+0x50>)
   1f0ba:	2201      	movs	r2, #1
   1f0bc:	f3bf 8f5b 	dmb	ish
   1f0c0:	e853 1f00 	ldrex	r1, [r3]
   1f0c4:	2900      	cmp	r1, #0
   1f0c6:	d103      	bne.n	1f0d0 <bt_gatt_init+0x18>
   1f0c8:	e843 2000 	strex	r0, r2, [r3]
   1f0cc:	2800      	cmp	r0, #0
   1f0ce:	d1f7      	bne.n	1f0c0 <bt_gatt_init+0x8>
   1f0d0:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   1f0d4:	d116      	bne.n	1f104 <bt_gatt_init+0x4c>
{
   1f0d6:	b510      	push	{r4, lr}
	bt_gatt_service_init();
   1f0d8:	f7ff fbd0 	bl	1e87c <bt_gatt_service_init>
	list->head = NULL;
   1f0dc:	4b0b      	ldr	r3, [pc, #44]	; (1f10c <bt_gatt_init+0x54>)
   1f0de:	2200      	movs	r2, #0
   1f0e0:	601a      	str	r2, [r3, #0]
	list->tail = NULL;
   1f0e2:	605a      	str	r2, [r3, #4]
	k_work_init_delayable(&db_hash.work, db_hash_process);
   1f0e4:	4c0a      	ldr	r4, [pc, #40]	; (1f110 <bt_gatt_init+0x58>)
   1f0e6:	490b      	ldr	r1, [pc, #44]	; (1f114 <bt_gatt_init+0x5c>)
   1f0e8:	4620      	mov	r0, r4
   1f0ea:	f00e f83f 	bl	2d16c <k_work_init_delayable>
		bt_long_wq_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   1f0ee:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1f0f2:	2300      	movs	r3, #0
   1f0f4:	4620      	mov	r0, r4
   1f0f6:	f7f9 f95f 	bl	183b8 <bt_long_wq_schedule>
	k_work_init_delayable(&gatt_sc.work, sc_process);
   1f0fa:	4907      	ldr	r1, [pc, #28]	; (1f118 <bt_gatt_init+0x60>)
   1f0fc:	4807      	ldr	r0, [pc, #28]	; (1f11c <bt_gatt_init+0x64>)
   1f0fe:	f00e f835 	bl	2d16c <k_work_init_delayable>
}
   1f102:	bd10      	pop	{r4, pc}
   1f104:	4770      	bx	lr
   1f106:	bf00      	nop
   1f108:	20008308 	.word	0x20008308
   1f10c:	2000830c 	.word	0x2000830c
   1f110:	200028d8 	.word	0x200028d8
   1f114:	0002a91b 	.word	0x0002a91b
   1f118:	0001f731 	.word	0x0001f731
   1f11c:	20002950 	.word	0x20002950

0001f120 <bt_gatt_attr_get_handle>:
	if (!attr) {
   1f120:	b328      	cbz	r0, 1f16e <bt_gatt_attr_get_handle+0x4e>
   1f122:	4684      	mov	ip, r0
	if (attr->handle) {
   1f124:	8a00      	ldrh	r0, [r0, #16]
   1f126:	bb38      	cbnz	r0, 1f178 <bt_gatt_attr_get_handle+0x58>
{
   1f128:	b470      	push	{r4, r5, r6}
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1f12a:	4d14      	ldr	r5, [pc, #80]	; (1f17c <bt_gatt_attr_get_handle+0x5c>)
	uint16_t handle = 1;
   1f12c:	2201      	movs	r2, #1
   1f12e:	e003      	b.n	1f138 <bt_gatt_attr_get_handle+0x18>
			handle += static_svc->attr_count;
   1f130:	686b      	ldr	r3, [r5, #4]
   1f132:	4413      	add	r3, r2
   1f134:	b29a      	uxth	r2, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1f136:	3508      	adds	r5, #8
   1f138:	4b11      	ldr	r3, [pc, #68]	; (1f180 <bt_gatt_attr_get_handle+0x60>)
   1f13a:	429d      	cmp	r5, r3
   1f13c:	d21a      	bcs.n	1f174 <bt_gatt_attr_get_handle+0x54>
		if ((attr < &static_svc->attrs[0]) ||
   1f13e:	682c      	ldr	r4, [r5, #0]
   1f140:	4564      	cmp	r4, ip
   1f142:	d8f5      	bhi.n	1f130 <bt_gatt_attr_get_handle+0x10>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1f144:	686e      	ldr	r6, [r5, #4]
   1f146:	eb06 0386 	add.w	r3, r6, r6, lsl #2
   1f14a:	009b      	lsls	r3, r3, #2
   1f14c:	3b14      	subs	r3, #20
   1f14e:	4423      	add	r3, r4
		if ((attr < &static_svc->attrs[0]) ||
   1f150:	4563      	cmp	r3, ip
   1f152:	d3ed      	bcc.n	1f130 <bt_gatt_attr_get_handle+0x10>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   1f154:	2300      	movs	r3, #0
   1f156:	429e      	cmp	r6, r3
   1f158:	d9ed      	bls.n	1f136 <bt_gatt_attr_get_handle+0x16>
			if (attr == &static_svc->attrs[i]) {
   1f15a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   1f15e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   1f162:	4561      	cmp	r1, ip
   1f164:	d005      	beq.n	1f172 <bt_gatt_attr_get_handle+0x52>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   1f166:	3301      	adds	r3, #1
   1f168:	3201      	adds	r2, #1
   1f16a:	b292      	uxth	r2, r2
   1f16c:	e7f3      	b.n	1f156 <bt_gatt_attr_get_handle+0x36>
		return 0;
   1f16e:	2000      	movs	r0, #0
   1f170:	4770      	bx	lr
				return handle;
   1f172:	4610      	mov	r0, r2
}
   1f174:	bc70      	pop	{r4, r5, r6}
   1f176:	4770      	bx	lr
   1f178:	4770      	bx	lr
   1f17a:	bf00      	nop
   1f17c:	0002de58 	.word	0x0002de58
   1f180:	0002de68 	.word	0x0002de68

0001f184 <bt_gatt_foreach_attr_type>:
{
   1f184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f188:	b089      	sub	sp, #36	; 0x24
   1f18a:	4682      	mov	sl, r0
   1f18c:	9107      	str	r1, [sp, #28]
   1f18e:	4690      	mov	r8, r2
   1f190:	4699      	mov	r9, r3
   1f192:	9f13      	ldr	r7, [sp, #76]	; 0x4c
   1f194:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
	if (!num_matches) {
   1f198:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   1f19c:	b91b      	cbnz	r3, 1f1a6 <bt_gatt_foreach_attr_type+0x22>
		num_matches = UINT16_MAX;
   1f19e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1f1a2:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
	if (start_handle <= last_static_handle) {
   1f1a6:	4b1b      	ldr	r3, [pc, #108]	; (1f214 <bt_gatt_foreach_attr_type+0x90>)
   1f1a8:	881b      	ldrh	r3, [r3, #0]
   1f1aa:	4553      	cmp	r3, sl
   1f1ac:	d22a      	bcs.n	1f204 <bt_gatt_foreach_attr_type+0x80>
}
   1f1ae:	b009      	add	sp, #36	; 0x24
   1f1b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				handle += static_svc->attr_count;
   1f1b4:	b28c      	uxth	r4, r1
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1f1b6:	3608      	adds	r6, #8
   1f1b8:	4b17      	ldr	r3, [pc, #92]	; (1f218 <bt_gatt_foreach_attr_type+0x94>)
   1f1ba:	429e      	cmp	r6, r3
   1f1bc:	d2f7      	bcs.n	1f1ae <bt_gatt_foreach_attr_type+0x2a>
			if (handle + static_svc->attr_count < start_handle) {
   1f1be:	6873      	ldr	r3, [r6, #4]
   1f1c0:	18e1      	adds	r1, r4, r3
   1f1c2:	42b9      	cmp	r1, r7
   1f1c4:	d3f6      	bcc.n	1f1b4 <bt_gatt_foreach_attr_type+0x30>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1f1c6:	2500      	movs	r5, #0
   1f1c8:	6873      	ldr	r3, [r6, #4]
   1f1ca:	42ab      	cmp	r3, r5
   1f1cc:	d9f3      	bls.n	1f1b6 <bt_gatt_foreach_attr_type+0x32>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1f1ce:	eb05 0085 	add.w	r0, r5, r5, lsl #2
   1f1d2:	f8cd b010 	str.w	fp, [sp, #16]
   1f1d6:	f8cd a00c 	str.w	sl, [sp, #12]
   1f1da:	ab12      	add	r3, sp, #72	; 0x48
   1f1dc:	9302      	str	r3, [sp, #8]
   1f1de:	f8cd 9004 	str.w	r9, [sp, #4]
   1f1e2:	f8cd 8000 	str.w	r8, [sp]
   1f1e6:	9b07      	ldr	r3, [sp, #28]
   1f1e8:	463a      	mov	r2, r7
   1f1ea:	4621      	mov	r1, r4
   1f1ec:	f8d6 c000 	ldr.w	ip, [r6]
   1f1f0:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
   1f1f4:	f00b f9bb 	bl	2a56e <gatt_foreach_iter>
   1f1f8:	2800      	cmp	r0, #0
   1f1fa:	d0d8      	beq.n	1f1ae <bt_gatt_foreach_attr_type+0x2a>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1f1fc:	3501      	adds	r5, #1
   1f1fe:	3401      	adds	r4, #1
   1f200:	b2a4      	uxth	r4, r4
   1f202:	e7e1      	b.n	1f1c8 <bt_gatt_foreach_attr_type+0x44>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1f204:	4e05      	ldr	r6, [pc, #20]	; (1f21c <bt_gatt_foreach_attr_type+0x98>)
		uint16_t handle = 1;
   1f206:	2401      	movs	r4, #1
   1f208:	9713      	str	r7, [sp, #76]	; 0x4c
   1f20a:	4657      	mov	r7, sl
   1f20c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
   1f210:	e7d2      	b.n	1f1b8 <bt_gatt_foreach_attr_type+0x34>
   1f212:	bf00      	nop
   1f214:	20008fdc 	.word	0x20008fdc
   1f218:	0002de68 	.word	0x0002de68
   1f21c:	0002de58 	.word	0x0002de58

0001f220 <db_hash_gen>:
{
   1f220:	b510      	push	{r4, lr}
   1f222:	b0ce      	sub	sp, #312	; 0x138
	uint8_t key[16] = {};
   1f224:	2300      	movs	r3, #0
   1f226:	934a      	str	r3, [sp, #296]	; 0x128
   1f228:	934b      	str	r3, [sp, #300]	; 0x12c
   1f22a:	934c      	str	r3, [sp, #304]	; 0x130
   1f22c:	934d      	str	r3, [sp, #308]	; 0x134
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1f22e:	aa1e      	add	r2, sp, #120	; 0x78
   1f230:	a94a      	add	r1, sp, #296	; 0x128
   1f232:	a806      	add	r0, sp, #24
   1f234:	f009 f86c 	bl	28310 <tc_cmac_setup>
   1f238:	b320      	cbz	r0, 1f284 <db_hash_gen+0x64>
   1f23a:	ac06      	add	r4, sp, #24
   1f23c:	9402      	str	r4, [sp, #8]
   1f23e:	4b41      	ldr	r3, [pc, #260]	; (1f344 <__kernel_ram_size+0x94>)
   1f240:	9301      	str	r3, [sp, #4]
   1f242:	2200      	movs	r2, #0
   1f244:	9200      	str	r2, [sp, #0]
   1f246:	4613      	mov	r3, r2
   1f248:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1f24c:	2001      	movs	r0, #1
   1f24e:	f7ff ff99 	bl	1f184 <bt_gatt_foreach_attr_type>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   1f252:	4621      	mov	r1, r4
   1f254:	483c      	ldr	r0, [pc, #240]	; (1f348 <__kernel_ram_size+0x98>)
   1f256:	f009 f8f8 	bl	2844a <tc_cmac_final>
   1f25a:	2800      	cmp	r0, #0
   1f25c:	d042      	beq.n	1f2e4 <__kernel_ram_size+0x34>
	sys_mem_swap(db_hash.hash, sizeof(db_hash.hash));
   1f25e:	2110      	movs	r1, #16
   1f260:	4839      	ldr	r0, [pc, #228]	; (1f348 <__kernel_ram_size+0x98>)
   1f262:	f00a ff5c 	bl	2a11e <sys_mem_swap>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1f266:	4b39      	ldr	r3, [pc, #228]	; (1f34c <__kernel_ram_size+0x9c>)
   1f268:	f3bf 8f5b 	dmb	ish
   1f26c:	e853 1f00 	ldrex	r1, [r3]
   1f270:	f041 0104 	orr.w	r1, r1, #4
   1f274:	e843 1200 	strex	r2, r1, [r3]
   1f278:	2a00      	cmp	r2, #0
   1f27a:	d1f7      	bne.n	1f26c <db_hash_gen+0x4c>
   1f27c:	f3bf 8f5b 	dmb	ish
}
   1f280:	b04e      	add	sp, #312	; 0x138
   1f282:	bd10      	pop	{r4, pc}
		LOG_ERR("Unable to setup AES CMAC");
   1f284:	2006      	movs	r0, #6
   1f286:	f7f6 fd9f 	bl	15dc8 <z_log_msg_alloc>
   1f28a:	2200      	movs	r2, #0
   1f28c:	f36f 0200 	bfc	r2, #0, #1
   1f290:	f36f 0241 	bfc	r2, #1, #1
   1f294:	f36f 0282 	bfc	r2, #2, #1
   1f298:	f36f 02c5 	bfc	r2, #3, #3
   1f29c:	2301      	movs	r3, #1
   1f29e:	f363 1288 	bfi	r2, r3, #6, #3
   1f2a2:	2308      	movs	r3, #8
   1f2a4:	f363 2252 	bfi	r2, r3, #9, #10
   1f2a8:	f36f 42de 	bfc	r2, #19, #12
   1f2ac:	f36f 72df 	bfc	r2, #31, #1
   1f2b0:	4604      	mov	r4, r0
   1f2b2:	b188      	cbz	r0, 1f2d8 <__kernel_ram_size+0x28>
   1f2b4:	f110 0310 	adds.w	r3, r0, #16
   1f2b8:	d001      	beq.n	1f2be <__kernel_ram_size+0xe>
   1f2ba:	4925      	ldr	r1, [pc, #148]	; (1f350 <__kernel_ram_size+0xa0>)
   1f2bc:	6141      	str	r1, [r0, #20]
   1f2be:	b15b      	cbz	r3, 1f2d8 <__kernel_ram_size+0x28>
   1f2c0:	2302      	movs	r3, #2
   1f2c2:	f88d 3014 	strb.w	r3, [sp, #20]
   1f2c6:	2300      	movs	r3, #0
   1f2c8:	f88d 3015 	strb.w	r3, [sp, #21]
   1f2cc:	f88d 3016 	strb.w	r3, [sp, #22]
   1f2d0:	f88d 3017 	strb.w	r3, [sp, #23]
   1f2d4:	9805      	ldr	r0, [sp, #20]
   1f2d6:	6120      	str	r0, [r4, #16]
   1f2d8:	2300      	movs	r3, #0
   1f2da:	491e      	ldr	r1, [pc, #120]	; (1f354 <__kernel_ram_size+0xa4>)
   1f2dc:	4620      	mov	r0, r4
   1f2de:	f008 fd7e 	bl	27dde <z_log_msg_finalize>
		return;
   1f2e2:	e7cd      	b.n	1f280 <db_hash_gen+0x60>
		LOG_ERR("Unable to calculate hash");
   1f2e4:	2006      	movs	r0, #6
   1f2e6:	f7f6 fd6f 	bl	15dc8 <z_log_msg_alloc>
   1f2ea:	2200      	movs	r2, #0
   1f2ec:	f36f 0200 	bfc	r2, #0, #1
   1f2f0:	f36f 0241 	bfc	r2, #1, #1
   1f2f4:	f36f 0282 	bfc	r2, #2, #1
   1f2f8:	f36f 02c5 	bfc	r2, #3, #3
   1f2fc:	2301      	movs	r3, #1
   1f2fe:	f363 1288 	bfi	r2, r3, #6, #3
   1f302:	2308      	movs	r3, #8
   1f304:	f363 2252 	bfi	r2, r3, #9, #10
   1f308:	f36f 42de 	bfc	r2, #19, #12
   1f30c:	f36f 72df 	bfc	r2, #31, #1
   1f310:	4604      	mov	r4, r0
   1f312:	b188      	cbz	r0, 1f338 <__kernel_ram_size+0x88>
   1f314:	f110 0310 	adds.w	r3, r0, #16
   1f318:	d001      	beq.n	1f31e <__kernel_ram_size+0x6e>
   1f31a:	490f      	ldr	r1, [pc, #60]	; (1f358 <__kernel_ram_size+0xa8>)
   1f31c:	6141      	str	r1, [r0, #20]
   1f31e:	b15b      	cbz	r3, 1f338 <__kernel_ram_size+0x88>
   1f320:	2302      	movs	r3, #2
   1f322:	f88d 3014 	strb.w	r3, [sp, #20]
   1f326:	2300      	movs	r3, #0
   1f328:	f88d 3015 	strb.w	r3, [sp, #21]
   1f32c:	f88d 3016 	strb.w	r3, [sp, #22]
   1f330:	f88d 3017 	strb.w	r3, [sp, #23]
   1f334:	9805      	ldr	r0, [sp, #20]
   1f336:	6120      	str	r0, [r4, #16]
   1f338:	2300      	movs	r3, #0
   1f33a:	4906      	ldr	r1, [pc, #24]	; (1f354 <__kernel_ram_size+0xa4>)
   1f33c:	4620      	mov	r0, r4
   1f33e:	f008 fd4e 	bl	27dde <z_log_msg_finalize>
		return;
   1f342:	e79d      	b.n	1f280 <db_hash_gen+0x60>
   1f344:	0002a27d 	.word	0x0002a27d
   1f348:	200028c8 	.word	0x200028c8
   1f34c:	20002980 	.word	0x20002980
   1f350:	000305c4 	.word	0x000305c4
   1f354:	0002de88 	.word	0x0002de88
   1f358:	000305e0 	.word	0x000305e0

0001f35c <db_hash_read>:
{
   1f35c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f360:	b084      	sub	sp, #16
   1f362:	4604      	mov	r4, r0
   1f364:	460d      	mov	r5, r1
   1f366:	4616      	mov	r6, r2
   1f368:	461f      	mov	r7, r3
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1f36a:	491f      	ldr	r1, [pc, #124]	; (1f3e8 <db_hash_read+0x8c>)
   1f36c:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   1f370:	f00d ff5f 	bl	2d232 <k_work_cancel_delayable_sync>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1f374:	f3bf 8f5b 	dmb	ish
   1f378:	4b1c      	ldr	r3, [pc, #112]	; (1f3ec <db_hash_read+0x90>)
   1f37a:	681b      	ldr	r3, [r3, #0]
   1f37c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   1f380:	f013 0f04 	tst.w	r3, #4
   1f384:	d017      	beq.n	1f3b6 <db_hash_read+0x5a>
	cfg = find_cf_cfg(conn);
   1f386:	4620      	mov	r0, r4
   1f388:	f7ff fada 	bl	1e940 <find_cf_cfg>
	if (cfg &&
   1f38c:	b118      	cbz	r0, 1f396 <db_hash_read+0x3a>
	    CF_ROBUST_CACHING(cfg) &&
   1f38e:	7a02      	ldrb	r2, [r0, #8]
	if (cfg &&
   1f390:	f012 0f01 	tst.w	r2, #1
   1f394:	d113      	bne.n	1f3be <db_hash_read+0x62>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   1f396:	2310      	movs	r3, #16
   1f398:	9302      	str	r3, [sp, #8]
   1f39a:	4b15      	ldr	r3, [pc, #84]	; (1f3f0 <db_hash_read+0x94>)
   1f39c:	9301      	str	r3, [sp, #4]
   1f39e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1f3a2:	9300      	str	r3, [sp, #0]
   1f3a4:	463b      	mov	r3, r7
   1f3a6:	4632      	mov	r2, r6
   1f3a8:	4629      	mov	r1, r5
   1f3aa:	4620      	mov	r0, r4
   1f3ac:	f00b f9bb 	bl	2a726 <bt_gatt_attr_read>
}
   1f3b0:	b004      	add	sp, #16
   1f3b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		db_hash_gen(true);
   1f3b6:	2001      	movs	r0, #1
   1f3b8:	f7ff ff32 	bl	1f220 <db_hash_gen>
   1f3bc:	e7e3      	b.n	1f386 <db_hash_read+0x2a>
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1f3be:	f100 080c 	add.w	r8, r0, #12
   1f3c2:	2100      	movs	r1, #0
   1f3c4:	4640      	mov	r0, r8
   1f3c6:	f00a ffc8 	bl	2a35a <atomic_test_bit>
	    CF_ROBUST_CACHING(cfg) &&
   1f3ca:	2800      	cmp	r0, #0
   1f3cc:	d1e3      	bne.n	1f396 <db_hash_read+0x3a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1f3ce:	f3bf 8f5b 	dmb	ish
   1f3d2:	e858 3f00 	ldrex	r3, [r8]
   1f3d6:	f043 0302 	orr.w	r3, r3, #2
   1f3da:	e848 3200 	strex	r2, r3, [r8]
   1f3de:	2a00      	cmp	r2, #0
   1f3e0:	d1f7      	bne.n	1f3d2 <db_hash_read+0x76>
   1f3e2:	f3bf 8f5b 	dmb	ish
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
}
   1f3e6:	e7d6      	b.n	1f396 <db_hash_read+0x3a>
   1f3e8:	20002908 	.word	0x20002908
   1f3ec:	20002980 	.word	0x20002980
   1f3f0:	200028c8 	.word	0x200028c8

0001f3f4 <gatt_find_by_uuid>:
{
   1f3f4:	b510      	push	{r4, lr}
   1f3f6:	b084      	sub	sp, #16
   1f3f8:	4604      	mov	r4, r0
   1f3fa:	460a      	mov	r2, r1
	found->attr = NULL;
   1f3fc:	2300      	movs	r3, #0
   1f3fe:	6003      	str	r3, [r0, #0]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1f400:	9002      	str	r0, [sp, #8]
   1f402:	4907      	ldr	r1, [pc, #28]	; (1f420 <gatt_find_by_uuid+0x2c>)
   1f404:	9101      	str	r1, [sp, #4]
   1f406:	2101      	movs	r1, #1
   1f408:	9100      	str	r1, [sp, #0]
   1f40a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1f40e:	8880      	ldrh	r0, [r0, #4]
   1f410:	f7ff feb8 	bl	1f184 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   1f414:	6820      	ldr	r0, [r4, #0]
}
   1f416:	3800      	subs	r0, #0
   1f418:	bf18      	it	ne
   1f41a:	2001      	movne	r0, #1
   1f41c:	b004      	add	sp, #16
   1f41e:	bd10      	pop	{r4, pc}
   1f420:	0002a25d 	.word	0x0002a25d

0001f424 <bt_gatt_attr_next>:
{
   1f424:	b510      	push	{r4, lr}
   1f426:	b086      	sub	sp, #24
	struct bt_gatt_attr *next = NULL;
   1f428:	2400      	movs	r4, #0
   1f42a:	9405      	str	r4, [sp, #20]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   1f42c:	f7ff fe78 	bl	1f120 <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   1f430:	3001      	adds	r0, #1
   1f432:	b280      	uxth	r0, r0
   1f434:	ab05      	add	r3, sp, #20
   1f436:	9302      	str	r3, [sp, #8]
   1f438:	4b05      	ldr	r3, [pc, #20]	; (1f450 <bt_gatt_attr_next+0x2c>)
   1f43a:	9301      	str	r3, [sp, #4]
   1f43c:	9400      	str	r4, [sp, #0]
   1f43e:	4623      	mov	r3, r4
   1f440:	4622      	mov	r2, r4
   1f442:	4601      	mov	r1, r0
   1f444:	f7ff fe9e 	bl	1f184 <bt_gatt_foreach_attr_type>
}
   1f448:	9805      	ldr	r0, [sp, #20]
   1f44a:	b006      	add	sp, #24
   1f44c:	bd10      	pop	{r4, pc}
   1f44e:	bf00      	nop
   1f450:	0002a1fd 	.word	0x0002a1fd

0001f454 <gatt_indicate>:
{
   1f454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f458:	b084      	sub	sp, #16
   1f45a:	4605      	mov	r5, r0
   1f45c:	460f      	mov	r7, r1
   1f45e:	4614      	mov	r4, r2
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1f460:	2294      	movs	r2, #148	; 0x94
   1f462:	6861      	ldr	r1, [r4, #4]
   1f464:	f00b fa5e 	bl	2a924 <bt_gatt_check_perm>
   1f468:	2800      	cmp	r0, #0
   1f46a:	d141      	bne.n	1f4f0 <gatt_indicate+0x9c>
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_INDICATE)) {
   1f46c:	2202      	movs	r2, #2
   1f46e:	6861      	ldr	r1, [r4, #4]
   1f470:	4628      	mov	r0, r5
   1f472:	f00b fa89 	bl	2a988 <bt_gatt_is_subscribed>
   1f476:	2800      	cmp	r0, #0
   1f478:	d06c      	beq.n	1f554 <gatt_indicate+0x100>
	len = sizeof(*ind) + params->len;
   1f47a:	8aa6      	ldrh	r6, [r4, #20]
   1f47c:	3602      	adds	r6, #2
	req = gatt_req_alloc(gatt_indicate_rsp, params, NULL,
   1f47e:	9600      	str	r6, [sp, #0]
   1f480:	231d      	movs	r3, #29
   1f482:	2200      	movs	r2, #0
   1f484:	4621      	mov	r1, r4
   1f486:	486a      	ldr	r0, [pc, #424]	; (1f630 <gatt_indicate+0x1dc>)
   1f488:	f00b f89c 	bl	2a5c4 <gatt_req_alloc>
	if (!req) {
   1f48c:	4681      	mov	r9, r0
   1f48e:	2800      	cmp	r0, #0
   1f490:	f000 80cb 	beq.w	1f62a <gatt_indicate+0x1d6>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   1f494:	4632      	mov	r2, r6
   1f496:	211d      	movs	r1, #29
   1f498:	4628      	mov	r0, r5
   1f49a:	f7fe fe13 	bl	1e0c4 <bt_att_create_pdu>
	if (!buf) {
   1f49e:	4680      	mov	r8, r0
   1f4a0:	2800      	cmp	r0, #0
   1f4a2:	f000 8089 	beq.w	1f5b8 <gatt_indicate+0x164>
	bt_att_set_tx_meta_data(buf, NULL, NULL, BT_ATT_CHAN_OPT(params));
   1f4a6:	2301      	movs	r3, #1
   1f4a8:	2200      	movs	r2, #0
   1f4aa:	4611      	mov	r1, r2
   1f4ac:	f00a fe0d 	bl	2a0ca <bt_att_set_tx_meta_data>
   1f4b0:	f108 0a0c 	add.w	sl, r8, #12
   1f4b4:	2102      	movs	r1, #2
   1f4b6:	4650      	mov	r0, sl
   1f4b8:	f00b fdea 	bl	2b090 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   1f4bc:	4606      	mov	r6, r0
   1f4be:	f826 7b02 	strh.w	r7, [r6], #2
   1f4c2:	8aa1      	ldrh	r1, [r4, #20]
   1f4c4:	4650      	mov	r0, sl
   1f4c6:	f00b fde3 	bl	2b090 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   1f4ca:	8aa2      	ldrh	r2, [r4, #20]
   1f4cc:	6921      	ldr	r1, [r4, #16]
   1f4ce:	4630      	mov	r0, r6
   1f4d0:	f009 f8d7 	bl	28682 <memcpy>
	req->buf = buf;
   1f4d4:	f8c9 8008 	str.w	r8, [r9, #8]
	err = bt_att_req_send(conn, req);
   1f4d8:	4649      	mov	r1, r9
   1f4da:	4628      	mov	r0, r5
   1f4dc:	f00a fd5c 	bl	29f98 <bt_att_req_send>
	if (err) {
   1f4e0:	4604      	mov	r4, r0
   1f4e2:	2800      	cmp	r0, #0
   1f4e4:	f040 809d 	bne.w	1f622 <gatt_indicate+0x1ce>
}
   1f4e8:	4620      	mov	r0, r4
   1f4ea:	b004      	add	sp, #16
   1f4ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		LOG_WRN("Link is not encrypted");
   1f4f0:	2006      	movs	r0, #6
   1f4f2:	f7f6 fc69 	bl	15dc8 <z_log_msg_alloc>
   1f4f6:	2200      	movs	r2, #0
   1f4f8:	f36f 0200 	bfc	r2, #0, #1
   1f4fc:	f36f 0241 	bfc	r2, #1, #1
   1f500:	f36f 0282 	bfc	r2, #2, #1
   1f504:	f36f 02c5 	bfc	r2, #3, #3
   1f508:	2302      	movs	r3, #2
   1f50a:	f363 1288 	bfi	r2, r3, #6, #3
   1f50e:	2308      	movs	r3, #8
   1f510:	f363 2252 	bfi	r2, r3, #9, #10
   1f514:	f36f 42de 	bfc	r2, #19, #12
   1f518:	f36f 72df 	bfc	r2, #31, #1
   1f51c:	4604      	mov	r4, r0
   1f51e:	b188      	cbz	r0, 1f544 <gatt_indicate+0xf0>
   1f520:	f110 0310 	adds.w	r3, r0, #16
   1f524:	d001      	beq.n	1f52a <gatt_indicate+0xd6>
   1f526:	4943      	ldr	r1, [pc, #268]	; (1f634 <gatt_indicate+0x1e0>)
   1f528:	6141      	str	r1, [r0, #20]
   1f52a:	b15b      	cbz	r3, 1f544 <gatt_indicate+0xf0>
   1f52c:	2302      	movs	r3, #2
   1f52e:	f88d 300c 	strb.w	r3, [sp, #12]
   1f532:	2300      	movs	r3, #0
   1f534:	f88d 300d 	strb.w	r3, [sp, #13]
   1f538:	f88d 300e 	strb.w	r3, [sp, #14]
   1f53c:	f88d 300f 	strb.w	r3, [sp, #15]
   1f540:	9803      	ldr	r0, [sp, #12]
   1f542:	6120      	str	r0, [r4, #16]
   1f544:	2300      	movs	r3, #0
   1f546:	493c      	ldr	r1, [pc, #240]	; (1f638 <gatt_indicate+0x1e4>)
   1f548:	4620      	mov	r0, r4
   1f54a:	f008 fc48 	bl	27dde <z_log_msg_finalize>
		return -EPERM;
   1f54e:	f04f 34ff 	mov.w	r4, #4294967295
   1f552:	e7c9      	b.n	1f4e8 <gatt_indicate+0x94>
			LOG_WRN("Device is not subscribed to characteristic");
   1f554:	2006      	movs	r0, #6
   1f556:	f7f6 fc37 	bl	15dc8 <z_log_msg_alloc>
   1f55a:	2200      	movs	r2, #0
   1f55c:	f36f 0200 	bfc	r2, #0, #1
   1f560:	f36f 0241 	bfc	r2, #1, #1
   1f564:	f36f 0282 	bfc	r2, #2, #1
   1f568:	f36f 02c5 	bfc	r2, #3, #3
   1f56c:	2302      	movs	r3, #2
   1f56e:	f363 1288 	bfi	r2, r3, #6, #3
   1f572:	2308      	movs	r3, #8
   1f574:	f363 2252 	bfi	r2, r3, #9, #10
   1f578:	f36f 42de 	bfc	r2, #19, #12
   1f57c:	f36f 72df 	bfc	r2, #31, #1
   1f580:	4604      	mov	r4, r0
   1f582:	b188      	cbz	r0, 1f5a8 <gatt_indicate+0x154>
   1f584:	f110 0310 	adds.w	r3, r0, #16
   1f588:	d001      	beq.n	1f58e <gatt_indicate+0x13a>
   1f58a:	492c      	ldr	r1, [pc, #176]	; (1f63c <gatt_indicate+0x1e8>)
   1f58c:	6141      	str	r1, [r0, #20]
   1f58e:	b15b      	cbz	r3, 1f5a8 <gatt_indicate+0x154>
   1f590:	2302      	movs	r3, #2
   1f592:	f88d 300c 	strb.w	r3, [sp, #12]
   1f596:	2300      	movs	r3, #0
   1f598:	f88d 300d 	strb.w	r3, [sp, #13]
   1f59c:	f88d 300e 	strb.w	r3, [sp, #14]
   1f5a0:	f88d 300f 	strb.w	r3, [sp, #15]
   1f5a4:	9803      	ldr	r0, [sp, #12]
   1f5a6:	6120      	str	r0, [r4, #16]
   1f5a8:	2300      	movs	r3, #0
   1f5aa:	4923      	ldr	r1, [pc, #140]	; (1f638 <gatt_indicate+0x1e4>)
   1f5ac:	4620      	mov	r0, r4
   1f5ae:	f008 fc16 	bl	27dde <z_log_msg_finalize>
			return -EINVAL;
   1f5b2:	f06f 0415 	mvn.w	r4, #21
   1f5b6:	e797      	b.n	1f4e8 <gatt_indicate+0x94>
		LOG_WRN("No buffer available to send indication");
   1f5b8:	2006      	movs	r0, #6
   1f5ba:	f7f6 fc05 	bl	15dc8 <z_log_msg_alloc>
   1f5be:	2200      	movs	r2, #0
   1f5c0:	f36f 0200 	bfc	r2, #0, #1
   1f5c4:	f36f 0241 	bfc	r2, #1, #1
   1f5c8:	f36f 0282 	bfc	r2, #2, #1
   1f5cc:	f36f 02c5 	bfc	r2, #3, #3
   1f5d0:	2302      	movs	r3, #2
   1f5d2:	f363 1288 	bfi	r2, r3, #6, #3
   1f5d6:	2308      	movs	r3, #8
   1f5d8:	f363 2252 	bfi	r2, r3, #9, #10
   1f5dc:	f36f 42de 	bfc	r2, #19, #12
   1f5e0:	f36f 72df 	bfc	r2, #31, #1
   1f5e4:	4604      	mov	r4, r0
   1f5e6:	b188      	cbz	r0, 1f60c <gatt_indicate+0x1b8>
   1f5e8:	f110 0310 	adds.w	r3, r0, #16
   1f5ec:	d001      	beq.n	1f5f2 <gatt_indicate+0x19e>
   1f5ee:	4914      	ldr	r1, [pc, #80]	; (1f640 <gatt_indicate+0x1ec>)
   1f5f0:	6141      	str	r1, [r0, #20]
   1f5f2:	b15b      	cbz	r3, 1f60c <gatt_indicate+0x1b8>
   1f5f4:	2302      	movs	r3, #2
   1f5f6:	f88d 300c 	strb.w	r3, [sp, #12]
   1f5fa:	2300      	movs	r3, #0
   1f5fc:	f88d 300d 	strb.w	r3, [sp, #13]
   1f600:	f88d 300e 	strb.w	r3, [sp, #14]
   1f604:	f88d 300f 	strb.w	r3, [sp, #15]
   1f608:	9803      	ldr	r0, [sp, #12]
   1f60a:	6120      	str	r0, [r4, #16]
   1f60c:	2300      	movs	r3, #0
   1f60e:	490a      	ldr	r1, [pc, #40]	; (1f638 <gatt_indicate+0x1e4>)
   1f610:	4620      	mov	r0, r4
   1f612:	f008 fbe4 	bl	27dde <z_log_msg_finalize>
		bt_att_req_free(req);
   1f616:	4648      	mov	r0, r9
   1f618:	f7ff f812 	bl	1e640 <bt_att_req_free>
		return -ENOMEM;
   1f61c:	f06f 040b 	mvn.w	r4, #11
   1f620:	e762      	b.n	1f4e8 <gatt_indicate+0x94>
		bt_att_req_free(req);
   1f622:	4648      	mov	r0, r9
   1f624:	f7ff f80c 	bl	1e640 <bt_att_req_free>
   1f628:	e75e      	b.n	1f4e8 <gatt_indicate+0x94>
		return -ENOMEM;
   1f62a:	f06f 040b 	mvn.w	r4, #11
   1f62e:	e75b      	b.n	1f4e8 <gatt_indicate+0x94>
   1f630:	0002a23b 	.word	0x0002a23b
   1f634:	000305fc 	.word	0x000305fc
   1f638:	0002de88 	.word	0x0002de88
   1f63c:	00030614 	.word	0x00030614
   1f640:	00030640 	.word	0x00030640

0001f644 <bt_gatt_indicate>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1f644:	f3bf 8f5b 	dmb	ish
   1f648:	4b37      	ldr	r3, [pc, #220]	; (1f728 <bt_gatt_indicate+0xe4>)
   1f64a:	681b      	ldr	r3, [r3, #0]
   1f64c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1f650:	f013 0f04 	tst.w	r3, #4
   1f654:	d05e      	beq.n	1f714 <bt_gatt_indicate+0xd0>
{
   1f656:	b530      	push	{r4, r5, lr}
   1f658:	b08d      	sub	sp, #52	; 0x34
   1f65a:	4605      	mov	r5, r0
   1f65c:	460c      	mov	r4, r1
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1f65e:	b110      	cbz	r0, 1f666 <bt_gatt_indicate+0x22>
   1f660:	7a83      	ldrb	r3, [r0, #10]
   1f662:	2b07      	cmp	r3, #7
   1f664:	d159      	bne.n	1f71a <bt_gatt_indicate+0xd6>
	data.attr = params->attr;
   1f666:	6860      	ldr	r0, [r4, #4]
   1f668:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1f66a:	f7ff fd59 	bl	1f120 <bt_gatt_attr_get_handle>
   1f66e:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   1f672:	6821      	ldr	r1, [r4, #0]
   1f674:	b341      	cbz	r1, 1f6c8 <bt_gatt_indicate+0x84>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1f676:	a805      	add	r0, sp, #20
   1f678:	f7ff febc 	bl	1f3f4 <gatt_find_by_uuid>
   1f67c:	2800      	cmp	r0, #0
   1f67e:	d04f      	beq.n	1f720 <bt_gatt_indicate+0xdc>
		params->attr = data.attr;
   1f680:	9b05      	ldr	r3, [sp, #20]
   1f682:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1f684:	9b05      	ldr	r3, [sp, #20]
   1f686:	6818      	ldr	r0, [r3, #0]
   1f688:	2300      	movs	r3, #0
   1f68a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   1f68e:	f642 0303 	movw	r3, #10243	; 0x2803
   1f692:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1f696:	a90b      	add	r1, sp, #44	; 0x2c
   1f698:	f009 f873 	bl	28782 <bt_uuid_cmp>
   1f69c:	b948      	cbnz	r0, 1f6b2 <bt_gatt_indicate+0x6e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1f69e:	9805      	ldr	r0, [sp, #20]
   1f6a0:	68c3      	ldr	r3, [r0, #12]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   1f6a2:	799b      	ldrb	r3, [r3, #6]
   1f6a4:	f013 0f20 	tst.w	r3, #32
   1f6a8:	d013      	beq.n	1f6d2 <bt_gatt_indicate+0x8e>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1f6aa:	f00b f8e7 	bl	2a87c <bt_gatt_attr_value_handle>
   1f6ae:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (conn) {
   1f6b2:	b18d      	cbz	r5, 1f6d8 <bt_gatt_indicate+0x94>
		params->_ref = 1;
   1f6b4:	2301      	movs	r3, #1
   1f6b6:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   1f6b8:	4622      	mov	r2, r4
   1f6ba:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   1f6be:	4628      	mov	r0, r5
   1f6c0:	f7ff fec8 	bl	1f454 <gatt_indicate>
}
   1f6c4:	b00d      	add	sp, #52	; 0x34
   1f6c6:	bd30      	pop	{r4, r5, pc}
		if (!data.handle) {
   1f6c8:	2800      	cmp	r0, #0
   1f6ca:	d1db      	bne.n	1f684 <bt_gatt_indicate+0x40>
			return -ENOENT;
   1f6cc:	f06f 0001 	mvn.w	r0, #1
   1f6d0:	e7f8      	b.n	1f6c4 <bt_gatt_indicate+0x80>
			return -EINVAL;
   1f6d2:	f06f 0015 	mvn.w	r0, #21
   1f6d6:	e7f5      	b.n	1f6c4 <bt_gatt_indicate+0x80>
	data.err = -ENOTCONN;
   1f6d8:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1f6dc:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   1f6de:	2302      	movs	r3, #2
   1f6e0:	f8ad 3020 	strh.w	r3, [sp, #32]
	data.ind_params = params;
   1f6e4:	9409      	str	r4, [sp, #36]	; 0x24
	params->_ref = 0;
   1f6e6:	2300      	movs	r3, #0
   1f6e8:	75a3      	strb	r3, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1f6ea:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   1f6ee:	f642 1202 	movw	r2, #10498	; 0x2902
   1f6f2:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
   1f6f6:	aa05      	add	r2, sp, #20
   1f6f8:	9202      	str	r2, [sp, #8]
   1f6fa:	4a0c      	ldr	r2, [pc, #48]	; (1f72c <bt_gatt_indicate+0xe8>)
   1f6fc:	9201      	str	r2, [sp, #4]
   1f6fe:	2201      	movs	r2, #1
   1f700:	9200      	str	r2, [sp, #0]
   1f702:	aa0a      	add	r2, sp, #40	; 0x28
   1f704:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1f708:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   1f70c:	f7ff fd3a 	bl	1f184 <bt_gatt_foreach_attr_type>
	return data.err;
   1f710:	9807      	ldr	r0, [sp, #28]
   1f712:	e7d7      	b.n	1f6c4 <bt_gatt_indicate+0x80>
		return -EAGAIN;
   1f714:	f06f 000a 	mvn.w	r0, #10
}
   1f718:	4770      	bx	lr
		return -ENOTCONN;
   1f71a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1f71e:	e7d1      	b.n	1f6c4 <bt_gatt_indicate+0x80>
			return -ENOENT;
   1f720:	f06f 0001 	mvn.w	r0, #1
   1f724:	e7ce      	b.n	1f6c4 <bt_gatt_indicate+0x80>
   1f726:	bf00      	nop
   1f728:	2000043c 	.word	0x2000043c
   1f72c:	0001fb19 	.word	0x0001fb19

0001f730 <sc_process>:
{
   1f730:	b510      	push	{r4, lr}
   1f732:	b082      	sub	sp, #8
   1f734:	4603      	mov	r3, r0
	sc_range[0] = sys_cpu_to_le16(sc->start);
   1f736:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   1f73a:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(sc->end);
   1f73e:	f830 2c06 	ldrh.w	r2, [r0, #-6]
   1f742:	f8ad 2006 	strh.w	r2, [sp, #6]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   1f746:	f1a0 0120 	sub.w	r1, r0, #32
   1f74a:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1f74e:	f3bf 8f5b 	dmb	ish
   1f752:	e854 2f00 	ldrex	r2, [r4]
   1f756:	f022 0201 	bic.w	r2, r2, #1
   1f75a:	e844 2000 	strex	r0, r2, [r4]
   1f75e:	2800      	cmp	r0, #0
   1f760:	d1f7      	bne.n	1f752 <sc_process+0x22>
   1f762:	f3bf 8f5b 	dmb	ish
	sc->start = 0U;
   1f766:	2000      	movs	r0, #0
   1f768:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->end = 0U;
   1f76c:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.attr = &_1_gatt_svc.attrs[2];
   1f770:	4a0e      	ldr	r2, [pc, #56]	; (1f7ac <sc_process+0x7c>)
   1f772:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
   1f776:	4a0e      	ldr	r2, [pc, #56]	; (1f7b0 <sc_process+0x80>)
   1f778:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
   1f77c:	aa01      	add	r2, sp, #4
   1f77e:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
   1f782:	2204      	movs	r2, #4
   1f784:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   1f788:	f7ff ff5c 	bl	1f644 <bt_gatt_indicate>
   1f78c:	b108      	cbz	r0, 1f792 <sc_process+0x62>
}
   1f78e:	b002      	add	sp, #8
   1f790:	bd10      	pop	{r4, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1f792:	f3bf 8f5b 	dmb	ish
   1f796:	e854 3f00 	ldrex	r3, [r4]
   1f79a:	f043 0302 	orr.w	r3, r3, #2
   1f79e:	e844 3200 	strex	r2, r3, [r4]
   1f7a2:	2a00      	cmp	r2, #0
   1f7a4:	d1f7      	bne.n	1f796 <sc_process+0x66>
   1f7a6:	f3bf 8f5b 	dmb	ish
   1f7aa:	e7f0      	b.n	1f78e <sc_process+0x5e>
   1f7ac:	0003073c 	.word	0x0003073c
   1f7b0:	0001ee11 	.word	0x0001ee11

0001f7b4 <sc_restore>:
{
   1f7b4:	b510      	push	{r4, lr}
   1f7b6:	b082      	sub	sp, #8
   1f7b8:	4604      	mov	r4, r0
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1f7ba:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1f7be:	7a00      	ldrb	r0, [r0, #8]
   1f7c0:	f7ff f8e4 	bl	1e98c <find_sc_cfg>
	if (!cfg) {
   1f7c4:	b1f0      	cbz	r0, 1f804 <sc_restore+0x50>
   1f7c6:	4603      	mov	r3, r0
	if (!(cfg->data.start || cfg->data.end)) {
   1f7c8:	8902      	ldrh	r2, [r0, #8]
   1f7ca:	b90a      	cbnz	r2, 1f7d0 <sc_restore+0x1c>
   1f7cc:	8941      	ldrh	r1, [r0, #10]
   1f7ce:	b1c9      	cbz	r1, 1f804 <sc_restore+0x50>
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   1f7d0:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   1f7d4:	895b      	ldrh	r3, [r3, #10]
   1f7d6:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   1f7da:	4620      	mov	r0, r4
   1f7dc:	f7fc fdca 	bl	1c374 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1f7e0:	4921      	ldr	r1, [pc, #132]	; (1f868 <sc_restore+0xb4>)
   1f7e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   1f7e6:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   1f7ea:	4a20      	ldr	r2, [pc, #128]	; (1f86c <sc_restore+0xb8>)
   1f7ec:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   1f7ee:	4a20      	ldr	r2, [pc, #128]	; (1f870 <sc_restore+0xbc>)
   1f7f0:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   1f7f2:	aa01      	add	r2, sp, #4
   1f7f4:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   1f7f6:	2204      	movs	r2, #4
   1f7f8:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1f7fa:	4619      	mov	r1, r3
   1f7fc:	4620      	mov	r0, r4
   1f7fe:	f7ff ff21 	bl	1f644 <bt_gatt_indicate>
   1f802:	b908      	cbnz	r0, 1f808 <sc_restore+0x54>
}
   1f804:	b002      	add	sp, #8
   1f806:	bd10      	pop	{r4, pc}
		LOG_ERR("SC restore indication failed");
   1f808:	2006      	movs	r0, #6
   1f80a:	f7f6 fadd 	bl	15dc8 <z_log_msg_alloc>
   1f80e:	2200      	movs	r2, #0
   1f810:	f36f 0200 	bfc	r2, #0, #1
   1f814:	f36f 0241 	bfc	r2, #1, #1
   1f818:	f36f 0282 	bfc	r2, #2, #1
   1f81c:	f36f 02c5 	bfc	r2, #3, #3
   1f820:	2301      	movs	r3, #1
   1f822:	f363 1288 	bfi	r2, r3, #6, #3
   1f826:	2308      	movs	r3, #8
   1f828:	f363 2252 	bfi	r2, r3, #9, #10
   1f82c:	f36f 42de 	bfc	r2, #19, #12
   1f830:	f36f 72df 	bfc	r2, #31, #1
   1f834:	4604      	mov	r4, r0
   1f836:	b188      	cbz	r0, 1f85c <sc_restore+0xa8>
   1f838:	f110 0310 	adds.w	r3, r0, #16
   1f83c:	d001      	beq.n	1f842 <sc_restore+0x8e>
   1f83e:	490d      	ldr	r1, [pc, #52]	; (1f874 <sc_restore+0xc0>)
   1f840:	6141      	str	r1, [r0, #20]
   1f842:	b15b      	cbz	r3, 1f85c <sc_restore+0xa8>
   1f844:	2302      	movs	r3, #2
   1f846:	f88d 3000 	strb.w	r3, [sp]
   1f84a:	2300      	movs	r3, #0
   1f84c:	f88d 3001 	strb.w	r3, [sp, #1]
   1f850:	f88d 3002 	strb.w	r3, [sp, #2]
   1f854:	f88d 3003 	strb.w	r3, [sp, #3]
   1f858:	9800      	ldr	r0, [sp, #0]
   1f85a:	6120      	str	r0, [r4, #16]
   1f85c:	2300      	movs	r3, #0
   1f85e:	4906      	ldr	r1, [pc, #24]	; (1f878 <sc_restore+0xc4>)
   1f860:	4620      	mov	r0, r4
   1f862:	f008 fabc 	bl	27dde <z_log_msg_finalize>
   1f866:	e7cd      	b.n	1f804 <sc_restore+0x50>
   1f868:	20008164 	.word	0x20008164
   1f86c:	0003073c 	.word	0x0003073c
   1f870:	0002a4e3 	.word	0x0002a4e3
   1f874:	00030668 	.word	0x00030668
   1f878:	0002de88 	.word	0x0002de88

0001f87c <update_ccc>:
{
   1f87c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f880:	b082      	sub	sp, #8
	struct bt_conn *conn = data->conn;
   1f882:	6817      	ldr	r7, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   1f884:	6882      	ldr	r2, [r0, #8]
   1f886:	4b33      	ldr	r3, [pc, #204]	; (1f954 <update_ccc+0xd8>)
   1f888:	429a      	cmp	r2, r3
   1f88a:	d003      	beq.n	1f894 <update_ccc+0x18>
}
   1f88c:	2001      	movs	r0, #1
   1f88e:	b002      	add	sp, #8
   1f890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f894:	4605      	mov	r5, r0
	ccc = attr->user_data;
   1f896:	68c6      	ldr	r6, [r0, #12]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1f898:	2400      	movs	r4, #0
   1f89a:	e031      	b.n	1f900 <update_ccc+0x84>
				LOG_WRN("CCC %p not writable", attr);
   1f89c:	2008      	movs	r0, #8
   1f89e:	f7f6 fa93 	bl	15dc8 <z_log_msg_alloc>
   1f8a2:	f36f 0800 	bfc	r8, #0, #1
   1f8a6:	f36f 0841 	bfc	r8, #1, #1
   1f8aa:	f36f 0882 	bfc	r8, #2, #1
   1f8ae:	f36f 08c5 	bfc	r8, #3, #3
   1f8b2:	2302      	movs	r3, #2
   1f8b4:	f363 1888 	bfi	r8, r3, #6, #3
   1f8b8:	230c      	movs	r3, #12
   1f8ba:	f363 2852 	bfi	r8, r3, #9, #10
   1f8be:	f36f 48de 	bfc	r8, #19, #12
   1f8c2:	f36f 78df 	bfc	r8, #31, #1
   1f8c6:	4684      	mov	ip, r0
   1f8c8:	b198      	cbz	r0, 1f8f2 <update_ccc+0x76>
   1f8ca:	f110 0310 	adds.w	r3, r0, #16
   1f8ce:	d002      	beq.n	1f8d6 <update_ccc+0x5a>
   1f8d0:	4a21      	ldr	r2, [pc, #132]	; (1f958 <update_ccc+0xdc>)
   1f8d2:	6142      	str	r2, [r0, #20]
   1f8d4:	6185      	str	r5, [r0, #24]
   1f8d6:	b163      	cbz	r3, 1f8f2 <update_ccc+0x76>
   1f8d8:	2303      	movs	r3, #3
   1f8da:	f88d 3004 	strb.w	r3, [sp, #4]
   1f8de:	2300      	movs	r3, #0
   1f8e0:	f88d 3005 	strb.w	r3, [sp, #5]
   1f8e4:	f88d 3006 	strb.w	r3, [sp, #6]
   1f8e8:	f88d 3007 	strb.w	r3, [sp, #7]
   1f8ec:	9801      	ldr	r0, [sp, #4]
   1f8ee:	f8cc 0010 	str.w	r0, [ip, #16]
   1f8f2:	2300      	movs	r3, #0
   1f8f4:	4642      	mov	r2, r8
   1f8f6:	4919      	ldr	r1, [pc, #100]	; (1f95c <update_ccc+0xe0>)
   1f8f8:	4660      	mov	r0, ip
   1f8fa:	f008 fa70 	bl	27dde <z_log_msg_finalize>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1f8fe:	3401      	adds	r4, #1
   1f900:	2c07      	cmp	r4, #7
   1f902:	d8c3      	bhi.n	1f88c <update_ccc+0x10>
		if (!cfg->value ||
   1f904:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1f908:	eb06 0343 	add.w	r3, r6, r3, lsl #1
   1f90c:	891b      	ldrh	r3, [r3, #8]
   1f90e:	2b00      	cmp	r3, #0
   1f910:	d0f5      	beq.n	1f8fe <update_ccc+0x82>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1f912:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1f916:	eb06 0243 	add.w	r2, r6, r3, lsl #1
   1f91a:	3201      	adds	r2, #1
   1f91c:	f816 1013 	ldrb.w	r1, [r6, r3, lsl #1]
   1f920:	4638      	mov	r0, r7
   1f922:	f009 fb4a 	bl	28fba <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   1f926:	2800      	cmp	r0, #0
   1f928:	d0e9      	beq.n	1f8fe <update_ccc+0x82>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   1f92a:	f44f 7295 	mov.w	r2, #298	; 0x12a
   1f92e:	4629      	mov	r1, r5
   1f930:	4638      	mov	r0, r7
   1f932:	f00a fff7 	bl	2a924 <bt_gatt_check_perm>
		if (err) {
   1f936:	b108      	cbz	r0, 1f93c <update_ccc+0xc0>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   1f938:	2803      	cmp	r0, #3
   1f93a:	d0af      	beq.n	1f89c <update_ccc+0x20>
		gatt_ccc_changed(attr, ccc);
   1f93c:	4631      	mov	r1, r6
   1f93e:	4628      	mov	r0, r5
   1f940:	f00a fc5f 	bl	2a202 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   1f944:	4b06      	ldr	r3, [pc, #24]	; (1f960 <update_ccc+0xe4>)
   1f946:	429e      	cmp	r6, r3
   1f948:	d1a0      	bne.n	1f88c <update_ccc+0x10>
			sc_restore(conn);
   1f94a:	4638      	mov	r0, r7
   1f94c:	f7ff ff32 	bl	1f7b4 <sc_restore>
   1f950:	e79c      	b.n	1f88c <update_ccc+0x10>
   1f952:	bf00      	nop
   1f954:	0001ec3d 	.word	0x0001ec3d
   1f958:	00030688 	.word	0x00030688
   1f95c:	0002de88 	.word	0x0002de88
   1f960:	2000099c 	.word	0x2000099c

0001f964 <gatt_notify>:
{
   1f964:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f968:	b083      	sub	sp, #12
   1f96a:	4605      	mov	r5, r0
   1f96c:	460f      	mov	r7, r1
   1f96e:	4614      	mov	r4, r2
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1f970:	2294      	movs	r2, #148	; 0x94
   1f972:	6861      	ldr	r1, [r4, #4]
   1f974:	f00a ffd6 	bl	2a924 <bt_gatt_check_perm>
   1f978:	bb78      	cbnz	r0, 1f9da <gatt_notify+0x76>
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_NOTIFY)) {
   1f97a:	2201      	movs	r2, #1
   1f97c:	6861      	ldr	r1, [r4, #4]
   1f97e:	4628      	mov	r0, r5
   1f980:	f00b f802 	bl	2a988 <bt_gatt_is_subscribed>
   1f984:	2800      	cmp	r0, #0
   1f986:	d05a      	beq.n	1fa3e <gatt_notify+0xda>
				sizeof(*nfy) + params->len);
   1f988:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   1f98a:	3202      	adds	r2, #2
   1f98c:	211b      	movs	r1, #27
   1f98e:	4628      	mov	r0, r5
   1f990:	f7fe fb98 	bl	1e0c4 <bt_att_create_pdu>
	if (!buf) {
   1f994:	4680      	mov	r8, r0
   1f996:	2800      	cmp	r0, #0
   1f998:	f000 8083 	beq.w	1faa2 <gatt_notify+0x13e>
   1f99c:	f100 090c 	add.w	r9, r0, #12
   1f9a0:	2102      	movs	r1, #2
   1f9a2:	4648      	mov	r0, r9
   1f9a4:	f00b fb74 	bl	2b090 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   1f9a8:	4606      	mov	r6, r0
   1f9aa:	f826 7b02 	strh.w	r7, [r6], #2
   1f9ae:	89a1      	ldrh	r1, [r4, #12]
   1f9b0:	4648      	mov	r0, r9
   1f9b2:	f00b fb6d 	bl	2b090 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   1f9b6:	89a2      	ldrh	r2, [r4, #12]
   1f9b8:	68a1      	ldr	r1, [r4, #8]
   1f9ba:	4630      	mov	r0, r6
   1f9bc:	f008 fe61 	bl	28682 <memcpy>
	bt_att_set_tx_meta_data(buf, params->func, params->user_data, BT_ATT_CHAN_OPT(params));
   1f9c0:	2301      	movs	r3, #1
   1f9c2:	6962      	ldr	r2, [r4, #20]
   1f9c4:	6921      	ldr	r1, [r4, #16]
   1f9c6:	4640      	mov	r0, r8
   1f9c8:	f00a fb7f 	bl	2a0ca <bt_att_set_tx_meta_data>
	return bt_att_send(conn, buf);
   1f9cc:	4641      	mov	r1, r8
   1f9ce:	4628      	mov	r0, r5
   1f9d0:	f00a faca 	bl	29f68 <bt_att_send>
}
   1f9d4:	b003      	add	sp, #12
   1f9d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		LOG_WRN("Link is not encrypted");
   1f9da:	2006      	movs	r0, #6
   1f9dc:	f7f6 f9f4 	bl	15dc8 <z_log_msg_alloc>
   1f9e0:	2200      	movs	r2, #0
   1f9e2:	f36f 0200 	bfc	r2, #0, #1
   1f9e6:	f36f 0241 	bfc	r2, #1, #1
   1f9ea:	f36f 0282 	bfc	r2, #2, #1
   1f9ee:	f36f 02c5 	bfc	r2, #3, #3
   1f9f2:	2302      	movs	r3, #2
   1f9f4:	f363 1288 	bfi	r2, r3, #6, #3
   1f9f8:	2308      	movs	r3, #8
   1f9fa:	f363 2252 	bfi	r2, r3, #9, #10
   1f9fe:	f36f 42de 	bfc	r2, #19, #12
   1fa02:	f36f 72df 	bfc	r2, #31, #1
   1fa06:	4604      	mov	r4, r0
   1fa08:	b188      	cbz	r0, 1fa2e <gatt_notify+0xca>
   1fa0a:	f110 0310 	adds.w	r3, r0, #16
   1fa0e:	d001      	beq.n	1fa14 <gatt_notify+0xb0>
   1fa10:	493d      	ldr	r1, [pc, #244]	; (1fb08 <gatt_notify+0x1a4>)
   1fa12:	6141      	str	r1, [r0, #20]
   1fa14:	b15b      	cbz	r3, 1fa2e <gatt_notify+0xca>
   1fa16:	2302      	movs	r3, #2
   1fa18:	f88d 3004 	strb.w	r3, [sp, #4]
   1fa1c:	2300      	movs	r3, #0
   1fa1e:	f88d 3005 	strb.w	r3, [sp, #5]
   1fa22:	f88d 3006 	strb.w	r3, [sp, #6]
   1fa26:	f88d 3007 	strb.w	r3, [sp, #7]
   1fa2a:	9801      	ldr	r0, [sp, #4]
   1fa2c:	6120      	str	r0, [r4, #16]
   1fa2e:	2300      	movs	r3, #0
   1fa30:	4936      	ldr	r1, [pc, #216]	; (1fb0c <gatt_notify+0x1a8>)
   1fa32:	4620      	mov	r0, r4
   1fa34:	f008 f9d3 	bl	27dde <z_log_msg_finalize>
		return -EPERM;
   1fa38:	f04f 30ff 	mov.w	r0, #4294967295
   1fa3c:	e7ca      	b.n	1f9d4 <gatt_notify+0x70>
			LOG_WRN("Device is not subscribed to characteristic");
   1fa3e:	2006      	movs	r0, #6
   1fa40:	f7f6 f9c2 	bl	15dc8 <z_log_msg_alloc>
   1fa44:	2200      	movs	r2, #0
   1fa46:	f36f 0200 	bfc	r2, #0, #1
   1fa4a:	f36f 0241 	bfc	r2, #1, #1
   1fa4e:	f36f 0282 	bfc	r2, #2, #1
   1fa52:	f36f 02c5 	bfc	r2, #3, #3
   1fa56:	2302      	movs	r3, #2
   1fa58:	f363 1288 	bfi	r2, r3, #6, #3
   1fa5c:	2308      	movs	r3, #8
   1fa5e:	f363 2252 	bfi	r2, r3, #9, #10
   1fa62:	f36f 42de 	bfc	r2, #19, #12
   1fa66:	f36f 72df 	bfc	r2, #31, #1
   1fa6a:	4604      	mov	r4, r0
   1fa6c:	b188      	cbz	r0, 1fa92 <gatt_notify+0x12e>
   1fa6e:	f110 0310 	adds.w	r3, r0, #16
   1fa72:	d001      	beq.n	1fa78 <gatt_notify+0x114>
   1fa74:	4926      	ldr	r1, [pc, #152]	; (1fb10 <gatt_notify+0x1ac>)
   1fa76:	6141      	str	r1, [r0, #20]
   1fa78:	b15b      	cbz	r3, 1fa92 <gatt_notify+0x12e>
   1fa7a:	2302      	movs	r3, #2
   1fa7c:	f88d 3004 	strb.w	r3, [sp, #4]
   1fa80:	2300      	movs	r3, #0
   1fa82:	f88d 3005 	strb.w	r3, [sp, #5]
   1fa86:	f88d 3006 	strb.w	r3, [sp, #6]
   1fa8a:	f88d 3007 	strb.w	r3, [sp, #7]
   1fa8e:	9801      	ldr	r0, [sp, #4]
   1fa90:	6120      	str	r0, [r4, #16]
   1fa92:	2300      	movs	r3, #0
   1fa94:	491d      	ldr	r1, [pc, #116]	; (1fb0c <gatt_notify+0x1a8>)
   1fa96:	4620      	mov	r0, r4
   1fa98:	f008 f9a1 	bl	27dde <z_log_msg_finalize>
			return -EINVAL;
   1fa9c:	f06f 0015 	mvn.w	r0, #21
   1faa0:	e798      	b.n	1f9d4 <gatt_notify+0x70>
		LOG_WRN("No buffer available to send notification");
   1faa2:	2006      	movs	r0, #6
   1faa4:	f7f6 f990 	bl	15dc8 <z_log_msg_alloc>
   1faa8:	2200      	movs	r2, #0
   1faaa:	f36f 0200 	bfc	r2, #0, #1
   1faae:	f36f 0241 	bfc	r2, #1, #1
   1fab2:	f36f 0282 	bfc	r2, #2, #1
   1fab6:	f36f 02c5 	bfc	r2, #3, #3
   1faba:	2302      	movs	r3, #2
   1fabc:	f363 1288 	bfi	r2, r3, #6, #3
   1fac0:	2308      	movs	r3, #8
   1fac2:	f363 2252 	bfi	r2, r3, #9, #10
   1fac6:	f36f 42de 	bfc	r2, #19, #12
   1faca:	f36f 72df 	bfc	r2, #31, #1
   1face:	4604      	mov	r4, r0
   1fad0:	b188      	cbz	r0, 1faf6 <gatt_notify+0x192>
   1fad2:	f110 0310 	adds.w	r3, r0, #16
   1fad6:	d001      	beq.n	1fadc <gatt_notify+0x178>
   1fad8:	490e      	ldr	r1, [pc, #56]	; (1fb14 <gatt_notify+0x1b0>)
   1fada:	6141      	str	r1, [r0, #20]
   1fadc:	b15b      	cbz	r3, 1faf6 <gatt_notify+0x192>
   1fade:	2302      	movs	r3, #2
   1fae0:	f88d 3004 	strb.w	r3, [sp, #4]
   1fae4:	2300      	movs	r3, #0
   1fae6:	f88d 3005 	strb.w	r3, [sp, #5]
   1faea:	f88d 3006 	strb.w	r3, [sp, #6]
   1faee:	f88d 3007 	strb.w	r3, [sp, #7]
   1faf2:	9801      	ldr	r0, [sp, #4]
   1faf4:	6120      	str	r0, [r4, #16]
   1faf6:	2300      	movs	r3, #0
   1faf8:	4904      	ldr	r1, [pc, #16]	; (1fb0c <gatt_notify+0x1a8>)
   1fafa:	4620      	mov	r0, r4
   1fafc:	f008 f96f 	bl	27dde <z_log_msg_finalize>
		return -ENOMEM;
   1fb00:	f06f 000b 	mvn.w	r0, #11
   1fb04:	e766      	b.n	1f9d4 <gatt_notify+0x70>
   1fb06:	bf00      	nop
   1fb08:	000305fc 	.word	0x000305fc
   1fb0c:	0002de88 	.word	0x0002de88
   1fb10:	00030614 	.word	0x00030614
   1fb14:	0003069c 	.word	0x0003069c

0001fb18 <notify_cb>:
{
   1fb18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fb1c:	b083      	sub	sp, #12
   1fb1e:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1fb20:	6882      	ldr	r2, [r0, #8]
   1fb22:	4b6e      	ldr	r3, [pc, #440]	; (1fcdc <notify_cb+0x1c4>)
   1fb24:	429a      	cmp	r2, r3
   1fb26:	d005      	beq.n	1fb34 <notify_cb+0x1c>
		return BT_GATT_ITER_CONTINUE;
   1fb28:	f04f 0a01 	mov.w	sl, #1
}
   1fb2c:	4650      	mov	r0, sl
   1fb2e:	b003      	add	sp, #12
   1fb30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fb34:	4607      	mov	r7, r0
	ccc = attr->user_data;
   1fb36:	68c5      	ldr	r5, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   1fb38:	4b69      	ldr	r3, [pc, #420]	; (1fce0 <notify_cb+0x1c8>)
   1fb3a:	429d      	cmp	r5, r3
   1fb3c:	d02d      	beq.n	1fb9a <notify_cb+0x82>
			err = 0;
   1fb3e:	2400      	movs	r4, #0
   1fb40:	e091      	b.n	1fc66 <notify_cb+0x14e>
				sc = (struct sc_data *)data->ind_params->data;
   1fb42:	6933      	ldr	r3, [r6, #16]
   1fb44:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   1fb46:	eb09 0049 	add.w	r0, r9, r9, lsl #1
   1fb4a:	8853      	ldrh	r3, [r2, #2]
   1fb4c:	8812      	ldrh	r2, [r2, #0]
   1fb4e:	4621      	mov	r1, r4
   1fb50:	4c64      	ldr	r4, [pc, #400]	; (1fce4 <notify_cb+0x1cc>)
   1fb52:	f814 0020 	ldrb.w	r0, [r4, r0, lsl #2]
   1fb56:	f7ff f803 	bl	1eb60 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1fb5a:	f109 0901 	add.w	r9, r9, #1
   1fb5e:	f1b9 0f07 	cmp.w	r9, #7
   1fb62:	d8ec      	bhi.n	1fb3e <notify_cb+0x26>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1fb64:	eb09 0349 	add.w	r3, r9, r9, lsl #1
   1fb68:	4c5e      	ldr	r4, [pc, #376]	; (1fce4 <notify_cb+0x1cc>)
   1fb6a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
   1fb6e:	3401      	adds	r4, #1
	return memcmp(a, b, sizeof(*a));
   1fb70:	2207      	movs	r2, #7
   1fb72:	495d      	ldr	r1, [pc, #372]	; (1fce8 <notify_cb+0x1d0>)
   1fb74:	4620      	mov	r0, r4
   1fb76:	f008 fd72 	bl	2865e <memcmp>
   1fb7a:	2800      	cmp	r0, #0
   1fb7c:	d0ed      	beq.n	1fb5a <notify_cb+0x42>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   1fb7e:	eb09 0349 	add.w	r3, r9, r9, lsl #1
   1fb82:	2207      	movs	r2, #7
   1fb84:	4621      	mov	r1, r4
   1fb86:	4857      	ldr	r0, [pc, #348]	; (1fce4 <notify_cb+0x1cc>)
   1fb88:	f810 0023 	ldrb.w	r0, [r0, r3, lsl #2]
   1fb8c:	f7fc fcf8 	bl	1c580 <bt_conn_lookup_state_le>
			if (!conn) {
   1fb90:	2800      	cmp	r0, #0
   1fb92:	d0d6      	beq.n	1fb42 <notify_cb+0x2a>
			bt_conn_unref(conn);
   1fb94:	f009 f9b7 	bl	28f06 <bt_conn_unref>
   1fb98:	e7df      	b.n	1fb5a <notify_cb+0x42>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1fb9a:	f04f 0900 	mov.w	r9, #0
   1fb9e:	e7de      	b.n	1fb5e <notify_cb+0x46>
			bt_conn_unref(conn);
   1fba0:	f009 f9b1 	bl	28f06 <bt_conn_unref>
			continue;
   1fba4:	e05e      	b.n	1fc64 <notify_cb+0x14c>
			bt_conn_unref(conn);
   1fba6:	4648      	mov	r0, r9
   1fba8:	f009 f9ad 	bl	28f06 <bt_conn_unref>
			continue;
   1fbac:	e05a      	b.n	1fc64 <notify_cb+0x14c>
			LOG_WRN("Link is not encrypted");
   1fbae:	2006      	movs	r0, #6
   1fbb0:	f7f6 f90a 	bl	15dc8 <z_log_msg_alloc>
   1fbb4:	f36f 0800 	bfc	r8, #0, #1
   1fbb8:	f36f 0841 	bfc	r8, #1, #1
   1fbbc:	f36f 0882 	bfc	r8, #2, #1
   1fbc0:	f36f 08c5 	bfc	r8, #3, #3
   1fbc4:	2302      	movs	r3, #2
   1fbc6:	f363 1888 	bfi	r8, r3, #6, #3
   1fbca:	2308      	movs	r3, #8
   1fbcc:	f363 2852 	bfi	r8, r3, #9, #10
   1fbd0:	f36f 48de 	bfc	r8, #19, #12
   1fbd4:	f36f 78df 	bfc	r8, #31, #1
   1fbd8:	4684      	mov	ip, r0
   1fbda:	b190      	cbz	r0, 1fc02 <notify_cb+0xea>
   1fbdc:	f110 0310 	adds.w	r3, r0, #16
   1fbe0:	d001      	beq.n	1fbe6 <notify_cb+0xce>
   1fbe2:	4a42      	ldr	r2, [pc, #264]	; (1fcec <notify_cb+0x1d4>)
   1fbe4:	6142      	str	r2, [r0, #20]
   1fbe6:	b163      	cbz	r3, 1fc02 <notify_cb+0xea>
   1fbe8:	2302      	movs	r3, #2
   1fbea:	f88d 3004 	strb.w	r3, [sp, #4]
   1fbee:	2300      	movs	r3, #0
   1fbf0:	f88d 3005 	strb.w	r3, [sp, #5]
   1fbf4:	f88d 3006 	strb.w	r3, [sp, #6]
   1fbf8:	f88d 3007 	strb.w	r3, [sp, #7]
   1fbfc:	9801      	ldr	r0, [sp, #4]
   1fbfe:	f8cc 0010 	str.w	r0, [ip, #16]
   1fc02:	2300      	movs	r3, #0
   1fc04:	4642      	mov	r2, r8
   1fc06:	493a      	ldr	r1, [pc, #232]	; (1fcf0 <notify_cb+0x1d8>)
   1fc08:	4660      	mov	r0, ip
   1fc0a:	f008 f8e8 	bl	27dde <z_log_msg_finalize>
			bt_conn_unref(conn);
   1fc0e:	4648      	mov	r0, r9
   1fc10:	f009 f979 	bl	28f06 <bt_conn_unref>
			continue;
   1fc14:	e026      	b.n	1fc64 <notify_cb+0x14c>
		    (cfg->value & BT_GATT_CCC_INDICATE)) {
   1fc16:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1fc1a:	eb05 0242 	add.w	r2, r5, r2, lsl #1
   1fc1e:	8912      	ldrh	r2, [r2, #8]
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   1fc20:	f012 0f02 	tst.w	r2, #2
   1fc24:	d04a      	beq.n	1fcbc <notify_cb+0x1a4>
			err = gatt_indicate(conn, data->handle, data->ind_params);
   1fc26:	6932      	ldr	r2, [r6, #16]
   1fc28:	88b1      	ldrh	r1, [r6, #4]
   1fc2a:	4648      	mov	r0, r9
   1fc2c:	f7ff fc12 	bl	1f454 <gatt_indicate>
			if (err == 0) {
   1fc30:	4683      	mov	fp, r0
   1fc32:	b970      	cbnz	r0, 1fc52 <notify_cb+0x13a>
				data->ind_params->_ref++;
   1fc34:	6932      	ldr	r2, [r6, #16]
   1fc36:	7d93      	ldrb	r3, [r2, #22]
   1fc38:	3301      	adds	r3, #1
   1fc3a:	7593      	strb	r3, [r2, #22]
   1fc3c:	e009      	b.n	1fc52 <notify_cb+0x13a>
			   (cfg->value & BT_GATT_CCC_NOTIFY)) {
   1fc3e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1fc42:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   1fc46:	891b      	ldrh	r3, [r3, #8]
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   1fc48:	f013 0f01 	tst.w	r3, #1
   1fc4c:	d13b      	bne.n	1fcc6 <notify_cb+0x1ae>
			err = 0;
   1fc4e:	f04f 0b00 	mov.w	fp, #0
		bt_conn_unref(conn);
   1fc52:	4648      	mov	r0, r9
   1fc54:	f009 f957 	bl	28f06 <bt_conn_unref>
		if (err < 0) {
   1fc58:	f1bb 0f00 	cmp.w	fp, #0
   1fc5c:	f6ff af66 	blt.w	1fb2c <notify_cb+0x14>
		data->err = 0;
   1fc60:	2300      	movs	r3, #0
   1fc62:	60b3      	str	r3, [r6, #8]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1fc64:	3401      	adds	r4, #1
   1fc66:	2c07      	cmp	r4, #7
   1fc68:	d834      	bhi.n	1fcd4 <notify_cb+0x1bc>
		if (cfg->value != data->type) {
   1fc6a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1fc6e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   1fc72:	891a      	ldrh	r2, [r3, #8]
   1fc74:	89b3      	ldrh	r3, [r6, #12]
   1fc76:	429a      	cmp	r2, r3
   1fc78:	d1f4      	bne.n	1fc64 <notify_cb+0x14c>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1fc7a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1fc7e:	eb05 0143 	add.w	r1, r5, r3, lsl #1
   1fc82:	3101      	adds	r1, #1
   1fc84:	f815 0013 	ldrb.w	r0, [r5, r3, lsl #1]
   1fc88:	f7fc fc54 	bl	1c534 <bt_conn_lookup_addr_le>
		if (!conn) {
   1fc8c:	4681      	mov	r9, r0
   1fc8e:	2800      	cmp	r0, #0
   1fc90:	d0e8      	beq.n	1fc64 <notify_cb+0x14c>
		if (conn->state != BT_CONN_CONNECTED) {
   1fc92:	7a83      	ldrb	r3, [r0, #10]
   1fc94:	2b07      	cmp	r3, #7
   1fc96:	d183      	bne.n	1fba0 <notify_cb+0x88>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   1fc98:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   1fc9a:	b11b      	cbz	r3, 1fca4 <notify_cb+0x18c>
   1fc9c:	4639      	mov	r1, r7
   1fc9e:	4798      	blx	r3
   1fca0:	2800      	cmp	r0, #0
   1fca2:	d080      	beq.n	1fba6 <notify_cb+0x8e>
		if (bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1fca4:	2294      	movs	r2, #148	; 0x94
   1fca6:	4639      	mov	r1, r7
   1fca8:	4648      	mov	r0, r9
   1fcaa:	f00a fe3b 	bl	2a924 <bt_gatt_check_perm>
   1fcae:	4682      	mov	sl, r0
   1fcb0:	2800      	cmp	r0, #0
   1fcb2:	f47f af7c 	bne.w	1fbae <notify_cb+0x96>
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   1fcb6:	89b3      	ldrh	r3, [r6, #12]
   1fcb8:	2b02      	cmp	r3, #2
   1fcba:	d0ac      	beq.n	1fc16 <notify_cb+0xfe>
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   1fcbc:	2b01      	cmp	r3, #1
   1fcbe:	d0be      	beq.n	1fc3e <notify_cb+0x126>
			err = 0;
   1fcc0:	f04f 0b00 	mov.w	fp, #0
   1fcc4:	e7c5      	b.n	1fc52 <notify_cb+0x13a>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   1fcc6:	6932      	ldr	r2, [r6, #16]
   1fcc8:	88b1      	ldrh	r1, [r6, #4]
   1fcca:	4648      	mov	r0, r9
   1fccc:	f7ff fe4a 	bl	1f964 <gatt_notify>
   1fcd0:	4683      	mov	fp, r0
   1fcd2:	e7be      	b.n	1fc52 <notify_cb+0x13a>
	return BT_GATT_ITER_CONTINUE;
   1fcd4:	f04f 0a01 	mov.w	sl, #1
   1fcd8:	e728      	b.n	1fb2c <notify_cb+0x14>
   1fcda:	bf00      	nop
   1fcdc:	0001ec3d 	.word	0x0001ec3d
   1fce0:	2000099c 	.word	0x2000099c
   1fce4:	200082a4 	.word	0x200082a4
   1fce8:	0002f548 	.word	0x0002f548
   1fcec:	000305fc 	.word	0x000305fc
   1fcf0:	0002de88 	.word	0x0002de88

0001fcf4 <bt_gatt_exchange_mtu>:
	if (conn->state != BT_CONN_CONNECTED) {
   1fcf4:	7a83      	ldrb	r3, [r0, #10]
   1fcf6:	2b07      	cmp	r3, #7
   1fcf8:	d123      	bne.n	1fd42 <bt_gatt_exchange_mtu+0x4e>
{
   1fcfa:	b570      	push	{r4, r5, r6, lr}
   1fcfc:	b084      	sub	sp, #16
   1fcfe:	4604      	mov	r4, r0
   1fd00:	460d      	mov	r5, r1
	if (atomic_test_and_set_bit(conn->flags, BT_CONN_ATT_MTU_EXCHANGED)) {
   1fd02:	1d06      	adds	r6, r0, #4
   1fd04:	210c      	movs	r1, #12
   1fd06:	4630      	mov	r0, r6
   1fd08:	f00a fb34 	bl	2a374 <atomic_test_and_set_bit>
   1fd0c:	b9e0      	cbnz	r0, 1fd48 <bt_gatt_exchange_mtu+0x54>
	err = gatt_req_send(conn, gatt_mtu_rsp, params,
   1fd0e:	2301      	movs	r3, #1
   1fd10:	9302      	str	r3, [sp, #8]
   1fd12:	2302      	movs	r3, #2
   1fd14:	9301      	str	r3, [sp, #4]
   1fd16:	9300      	str	r3, [sp, #0]
   1fd18:	4b0d      	ldr	r3, [pc, #52]	; (1fd50 <bt_gatt_exchange_mtu+0x5c>)
   1fd1a:	462a      	mov	r2, r5
   1fd1c:	490d      	ldr	r1, [pc, #52]	; (1fd54 <bt_gatt_exchange_mtu+0x60>)
   1fd1e:	4620      	mov	r0, r4
   1fd20:	f00a fc5e 	bl	2a5e0 <gatt_req_send>
	if (err) {
   1fd24:	b158      	cbz	r0, 1fd3e <bt_gatt_exchange_mtu+0x4a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1fd26:	f3bf 8f5b 	dmb	ish
   1fd2a:	e856 3f00 	ldrex	r3, [r6]
   1fd2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   1fd32:	e846 3200 	strex	r2, r3, [r6]
   1fd36:	2a00      	cmp	r2, #0
   1fd38:	d1f7      	bne.n	1fd2a <bt_gatt_exchange_mtu+0x36>
   1fd3a:	f3bf 8f5b 	dmb	ish
}
   1fd3e:	b004      	add	sp, #16
   1fd40:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTCONN;
   1fd42:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   1fd46:	4770      	bx	lr
		return -EALREADY;
   1fd48:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1fd4c:	e7f7      	b.n	1fd3e <bt_gatt_exchange_mtu+0x4a>
   1fd4e:	bf00      	nop
   1fd50:	0002a6a7 	.word	0x0002a6a7
   1fd54:	0002a273 	.word	0x0002a273

0001fd58 <bt_gatt_mult_notification>:
{
   1fd58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fd5c:	b085      	sub	sp, #20
   1fd5e:	4606      	mov	r6, r0
   1fd60:	460c      	mov	r4, r1
   1fd62:	4615      	mov	r5, r2
	sub = gatt_sub_find(conn);
   1fd64:	f7fe fe5e 	bl	1ea24 <gatt_sub_find>
	if (!sub) {
   1fd68:	b3b8      	cbz	r0, 1fdda <bt_gatt_mult_notification+0x82>
   1fd6a:	4680      	mov	r8, r0
	net_buf_simple_init_with_data(&buf, (void *)data, length);
   1fd6c:	462a      	mov	r2, r5
   1fd6e:	4621      	mov	r1, r4
   1fd70:	a801      	add	r0, sp, #4
   1fd72:	f00b f90a 	bl	2af8a <net_buf_simple_init_with_data>
	while (buf.len > sizeof(*nfy)) {
   1fd76:	e05a      	b.n	1fe2e <bt_gatt_mult_notification+0xd6>
			LOG_ERR("Invalid data len %u > %u", len, length);
   1fd78:	2008      	movs	r0, #8
   1fd7a:	f7f6 f825 	bl	15dc8 <z_log_msg_alloc>
   1fd7e:	2200      	movs	r2, #0
   1fd80:	f36f 0200 	bfc	r2, #0, #1
   1fd84:	f36f 0241 	bfc	r2, #1, #1
   1fd88:	f36f 0282 	bfc	r2, #2, #1
   1fd8c:	f36f 02c5 	bfc	r2, #3, #3
   1fd90:	2301      	movs	r3, #1
   1fd92:	f363 1288 	bfi	r2, r3, #6, #3
   1fd96:	2310      	movs	r3, #16
   1fd98:	f363 2252 	bfi	r2, r3, #9, #10
   1fd9c:	f36f 42de 	bfc	r2, #19, #12
   1fda0:	f36f 72df 	bfc	r2, #31, #1
   1fda4:	4604      	mov	r4, r0
   1fda6:	b198      	cbz	r0, 1fdd0 <bt_gatt_mult_notification+0x78>
   1fda8:	18c3      	adds	r3, r0, r3
   1fdaa:	d004      	beq.n	1fdb6 <bt_gatt_mult_notification+0x5e>
   1fdac:	492e      	ldr	r1, [pc, #184]	; (1fe68 <bt_gatt_mult_notification+0x110>)
   1fdae:	6141      	str	r1, [r0, #20]
   1fdb0:	f8c4 b018 	str.w	fp, [r4, #24]
   1fdb4:	61c5      	str	r5, [r0, #28]
   1fdb6:	b15b      	cbz	r3, 1fdd0 <bt_gatt_mult_notification+0x78>
   1fdb8:	2304      	movs	r3, #4
   1fdba:	f88d 3000 	strb.w	r3, [sp]
   1fdbe:	2300      	movs	r3, #0
   1fdc0:	f88d 3001 	strb.w	r3, [sp, #1]
   1fdc4:	f88d 3002 	strb.w	r3, [sp, #2]
   1fdc8:	f88d 3003 	strb.w	r3, [sp, #3]
   1fdcc:	9800      	ldr	r0, [sp, #0]
   1fdce:	6120      	str	r0, [r4, #16]
   1fdd0:	2300      	movs	r3, #0
   1fdd2:	4926      	ldr	r1, [pc, #152]	; (1fe6c <bt_gatt_mult_notification+0x114>)
   1fdd4:	4620      	mov	r0, r4
   1fdd6:	f008 f802 	bl	27dde <z_log_msg_finalize>
}
   1fdda:	b005      	add	sp, #20
   1fddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   1fde0:	b1ff      	cbz	r7, 1fe22 <bt_gatt_mult_notification+0xca>
	return node->next;
   1fde2:	69bb      	ldr	r3, [r7, #24]
   1fde4:	b103      	cbz	r3, 1fde8 <bt_gatt_mult_notification+0x90>
   1fde6:	3b18      	subs	r3, #24
   1fde8:	463c      	mov	r4, r7
   1fdea:	461f      	mov	r7, r3
   1fdec:	b1dc      	cbz	r4, 1fe26 <bt_gatt_mult_notification+0xce>
			if (handle != params->value_handle) {
   1fdee:	89a3      	ldrh	r3, [r4, #12]
   1fdf0:	4599      	cmp	r9, r3
   1fdf2:	d1f5      	bne.n	1fde0 <bt_gatt_mult_notification+0x88>
			if (check_subscribe_security_level(conn, params)) {
   1fdf4:	4621      	mov	r1, r4
   1fdf6:	4630      	mov	r0, r6
   1fdf8:	f00a fa39 	bl	2a26e <check_subscribe_security_level>
   1fdfc:	2800      	cmp	r0, #0
   1fdfe:	d0ef      	beq.n	1fde0 <bt_gatt_mult_notification+0x88>
				if (params->notify(conn, params, nfy->value, len) ==
   1fe00:	465b      	mov	r3, fp
   1fe02:	f10a 0204 	add.w	r2, sl, #4
   1fe06:	4621      	mov	r1, r4
   1fe08:	4630      	mov	r0, r6
   1fe0a:	f8d4 c000 	ldr.w	ip, [r4]
   1fe0e:	47e0      	blx	ip
   1fe10:	2800      	cmp	r0, #0
   1fe12:	d1e5      	bne.n	1fde0 <bt_gatt_mult_notification+0x88>
					bt_gatt_unsubscribe(conn, params);
   1fe14:	4621      	mov	r1, r4
   1fe16:	4630      	mov	r0, r6
   1fe18:	f00a feb7 	bl	2ab8a <bt_gatt_unsubscribe>
   1fe1c:	e7e0      	b.n	1fde0 <bt_gatt_mult_notification+0x88>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   1fe1e:	4627      	mov	r7, r4
   1fe20:	e7e4      	b.n	1fdec <bt_gatt_mult_notification+0x94>
   1fe22:	463b      	mov	r3, r7
   1fe24:	e7e0      	b.n	1fde8 <bt_gatt_mult_notification+0x90>
		net_buf_simple_pull_mem(&buf, len);
   1fe26:	4659      	mov	r1, fp
   1fe28:	a801      	add	r0, sp, #4
   1fe2a:	f00b f95b 	bl	2b0e4 <net_buf_simple_pull_mem>
	while (buf.len > sizeof(*nfy)) {
   1fe2e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   1fe32:	2b04      	cmp	r3, #4
   1fe34:	d9d1      	bls.n	1fdda <bt_gatt_mult_notification+0x82>
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   1fe36:	2104      	movs	r1, #4
   1fe38:	eb0d 0001 	add.w	r0, sp, r1
   1fe3c:	f00b f952 	bl	2b0e4 <net_buf_simple_pull_mem>
   1fe40:	4682      	mov	sl, r0
		handle = sys_cpu_to_le16(nfy->handle);
   1fe42:	f8b0 9000 	ldrh.w	r9, [r0]
		len = sys_cpu_to_le16(nfy->len);
   1fe46:	f8b0 b002 	ldrh.w	fp, [r0, #2]
		if (len > buf.len) {
   1fe4a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   1fe4e:	455b      	cmp	r3, fp
   1fe50:	d392      	bcc.n	1fd78 <bt_gatt_mult_notification+0x20>
	return list->head;
   1fe52:	f8d8 4008 	ldr.w	r4, [r8, #8]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   1fe56:	2c00      	cmp	r4, #0
   1fe58:	d0e1      	beq.n	1fe1e <bt_gatt_mult_notification+0xc6>
	return node->next;
   1fe5a:	f854 7918 	ldr.w	r7, [r4], #-24
   1fe5e:	2f00      	cmp	r7, #0
   1fe60:	d0c4      	beq.n	1fdec <bt_gatt_mult_notification+0x94>
   1fe62:	3f18      	subs	r7, #24
   1fe64:	e7c2      	b.n	1fdec <bt_gatt_mult_notification+0x94>
   1fe66:	bf00      	nop
   1fe68:	000306c8 	.word	0x000306c8
   1fe6c:	0002de88 	.word	0x0002de88

0001fe70 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   1fe70:	b530      	push	{r4, r5, lr}
   1fe72:	b089      	sub	sp, #36	; 0x24
   1fe74:	4604      	mov	r4, r0
	struct conn_data data;

	LOG_DBG("conn %p", conn);

	data.conn = conn;
   1fe76:	9006      	str	r0, [sp, #24]
	data.sec = BT_SECURITY_L1;
   1fe78:	2001      	movs	r0, #1
   1fe7a:	f88d 001c 	strb.w	r0, [sp, #28]
   1fe7e:	ab06      	add	r3, sp, #24
   1fe80:	9302      	str	r3, [sp, #8]
   1fe82:	4b22      	ldr	r3, [pc, #136]	; (1ff0c <bt_gatt_connected+0x9c>)
   1fe84:	9301      	str	r3, [sp, #4]
   1fe86:	2200      	movs	r2, #0
   1fe88:	9200      	str	r2, [sp, #0]
   1fe8a:	4613      	mov	r3, r2
   1fe8c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1fe90:	f7ff f978 	bl	1f184 <bt_gatt_foreach_attr_type>
			LOG_WRN("Failed to set security for bonded peer (%d)", err);
		}
	}

#if defined(CONFIG_BT_GATT_CLIENT)
	add_subscriptions(conn);
   1fe94:	4620      	mov	r0, r4
   1fe96:	f00a fbe5 	bl	2a664 <add_subscriptions>
#if defined(CONFIG_BT_GATT_AUTO_UPDATE_MTU)
	int err;

	err = bt_gatt_exchange_mtu(conn, &gatt_exchange_params);
   1fe9a:	491d      	ldr	r1, [pc, #116]	; (1ff10 <bt_gatt_connected+0xa0>)
   1fe9c:	4620      	mov	r0, r4
   1fe9e:	f7ff ff29 	bl	1fcf4 <bt_gatt_exchange_mtu>
	if (err) {
   1fea2:	b908      	cbnz	r0, 1fea8 <bt_gatt_connected+0x38>
		LOG_WRN("MTU Exchange failed (err %d)", err);
	}
#endif /* CONFIG_BT_GATT_AUTO_UPDATE_MTU */
#endif /* CONFIG_BT_GATT_CLIENT */
}
   1fea4:	b009      	add	sp, #36	; 0x24
   1fea6:	bd30      	pop	{r4, r5, pc}
   1fea8:	4605      	mov	r5, r0
		LOG_WRN("MTU Exchange failed (err %d)", err);
   1feaa:	2008      	movs	r0, #8
   1feac:	f7f5 ff8c 	bl	15dc8 <z_log_msg_alloc>
   1feb0:	2200      	movs	r2, #0
   1feb2:	f36f 0200 	bfc	r2, #0, #1
   1feb6:	f36f 0241 	bfc	r2, #1, #1
   1feba:	f36f 0282 	bfc	r2, #2, #1
   1febe:	f36f 02c5 	bfc	r2, #3, #3
   1fec2:	2302      	movs	r3, #2
   1fec4:	f363 1288 	bfi	r2, r3, #6, #3
   1fec8:	230c      	movs	r3, #12
   1feca:	f363 2252 	bfi	r2, r3, #9, #10
   1fece:	f36f 42de 	bfc	r2, #19, #12
   1fed2:	f36f 72df 	bfc	r2, #31, #1
   1fed6:	4604      	mov	r4, r0
   1fed8:	b190      	cbz	r0, 1ff00 <bt_gatt_connected+0x90>
   1feda:	f110 0310 	adds.w	r3, r0, #16
   1fede:	d002      	beq.n	1fee6 <bt_gatt_connected+0x76>
   1fee0:	490c      	ldr	r1, [pc, #48]	; (1ff14 <bt_gatt_connected+0xa4>)
   1fee2:	6141      	str	r1, [r0, #20]
   1fee4:	6185      	str	r5, [r0, #24]
   1fee6:	b15b      	cbz	r3, 1ff00 <bt_gatt_connected+0x90>
   1fee8:	2303      	movs	r3, #3
   1feea:	f88d 3014 	strb.w	r3, [sp, #20]
   1feee:	2300      	movs	r3, #0
   1fef0:	f88d 3015 	strb.w	r3, [sp, #21]
   1fef4:	f88d 3016 	strb.w	r3, [sp, #22]
   1fef8:	f88d 3017 	strb.w	r3, [sp, #23]
   1fefc:	9805      	ldr	r0, [sp, #20]
   1fefe:	6120      	str	r0, [r4, #16]
   1ff00:	2300      	movs	r3, #0
   1ff02:	4905      	ldr	r1, [pc, #20]	; (1ff18 <bt_gatt_connected+0xa8>)
   1ff04:	4620      	mov	r0, r4
   1ff06:	f007 ff6a 	bl	27dde <z_log_msg_finalize>
}
   1ff0a:	e7cb      	b.n	1fea4 <bt_gatt_connected+0x34>
   1ff0c:	0001f87d 	.word	0x0001f87d
   1ff10:	20000950 	.word	0x20000950
   1ff14:	000306e4 	.word	0x000306e4
   1ff18:	0002de88 	.word	0x0002de88

0001ff1c <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
   1ff1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ff1e:	4605      	mov	r5, r0
   1ff20:	460e      	mov	r6, r1
   1ff22:	4617      	mov	r7, r2
	return list->head;
   1ff24:	4b0a      	ldr	r3, [pc, #40]	; (1ff50 <bt_gatt_att_max_mtu_changed+0x34>)
   1ff26:	681c      	ldr	r4, [r3, #0]
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1ff28:	b104      	cbz	r4, 1ff2c <bt_gatt_att_max_mtu_changed+0x10>
   1ff2a:	3c04      	subs	r4, #4
   1ff2c:	b174      	cbz	r4, 1ff4c <bt_gatt_att_max_mtu_changed+0x30>
		if (cb->att_mtu_updated) {
   1ff2e:	6823      	ldr	r3, [r4, #0]
   1ff30:	b143      	cbz	r3, 1ff44 <bt_gatt_att_max_mtu_changed+0x28>
			cb->att_mtu_updated(conn, tx, rx);
   1ff32:	463a      	mov	r2, r7
   1ff34:	4631      	mov	r1, r6
   1ff36:	4628      	mov	r0, r5
   1ff38:	4798      	blx	r3
	return node->next;
   1ff3a:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1ff3c:	2c00      	cmp	r4, #0
   1ff3e:	d0f5      	beq.n	1ff2c <bt_gatt_att_max_mtu_changed+0x10>
   1ff40:	3c04      	subs	r4, #4
   1ff42:	e7f3      	b.n	1ff2c <bt_gatt_att_max_mtu_changed+0x10>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ff44:	1d23      	adds	r3, r4, #4
   1ff46:	d1f8      	bne.n	1ff3a <bt_gatt_att_max_mtu_changed+0x1e>
   1ff48:	461c      	mov	r4, r3
   1ff4a:	e7ef      	b.n	1ff2c <bt_gatt_att_max_mtu_changed+0x10>
		}
	}
}
   1ff4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ff4e:	bf00      	nop
   1ff50:	2000830c 	.word	0x2000830c

0001ff54 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   1ff54:	b510      	push	{r4, lr}
   1ff56:	b084      	sub	sp, #16
   1ff58:	4604      	mov	r4, r0
   1ff5a:	9002      	str	r0, [sp, #8]
   1ff5c:	4b08      	ldr	r3, [pc, #32]	; (1ff80 <bt_gatt_disconnected+0x2c>)
   1ff5e:	9301      	str	r3, [sp, #4]
   1ff60:	2200      	movs	r2, #0
   1ff62:	9200      	str	r2, [sp, #0]
   1ff64:	4613      	mov	r3, r2
   1ff66:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1ff6a:	2001      	movs	r0, #1
   1ff6c:	f7ff f90a 	bl	1f184 <bt_gatt_foreach_attr_type>
				     remove_peer_from_attr,
				     &addr_with_id);
	}

#if defined(CONFIG_BT_GATT_CLIENT)
	remove_subscriptions(conn);
   1ff70:	4620      	mov	r0, r4
   1ff72:	f00a fa55 	bl	2a420 <remove_subscriptions>
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
   1ff76:	4620      	mov	r0, r4
   1ff78:	f00a fbbe 	bl	2a6f8 <remove_cf_cfg>
#endif
}
   1ff7c:	b004      	add	sp, #16
   1ff7e:	bd10      	pop	{r4, pc}
   1ff80:	0001ef8d 	.word	0x0001ef8d

0001ff84 <bt_smp_accept>:

	return 0;
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   1ff84:	b530      	push	{r4, r5, lr}
   1ff86:	b083      	sub	sp, #12
   1ff88:	4605      	mov	r5, r0
		.recv = bt_smp_recv,
	};

	LOG_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1ff8a:	2300      	movs	r3, #0
   1ff8c:	2b07      	cmp	r3, #7
   1ff8e:	d811      	bhi.n	1ffb4 <bt_smp_accept+0x30>
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
   1ff90:	228c      	movs	r2, #140	; 0x8c
   1ff92:	fb03 f202 	mul.w	r2, r3, r2
   1ff96:	4c21      	ldr	r4, [pc, #132]	; (2001c <CONFIG_PM_SRAM_SIZE+0x1c>)
   1ff98:	58a2      	ldr	r2, [r4, r2]
   1ff9a:	b10a      	cbz	r2, 1ffa0 <bt_smp_accept+0x1c>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1ff9c:	3301      	adds	r3, #1
   1ff9e:	e7f5      	b.n	1ff8c <bt_smp_accept+0x8>
			continue;
		}

		smp->chan.ops = &ops;
   1ffa0:	4a1e      	ldr	r2, [pc, #120]	; (2001c <CONFIG_PM_SRAM_SIZE+0x1c>)
   1ffa2:	208c      	movs	r0, #140	; 0x8c
   1ffa4:	fb00 2303 	mla	r3, r0, r3, r2
   1ffa8:	4a1d      	ldr	r2, [pc, #116]	; (20020 <CONFIG_PM_SRAM_SIZE+0x20>)
   1ffaa:	605a      	str	r2, [r3, #4]

		*chan = &smp->chan;
   1ffac:	600b      	str	r3, [r1, #0]

		return 0;
   1ffae:	2000      	movs	r0, #0
	}

	LOG_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
   1ffb0:	b003      	add	sp, #12
   1ffb2:	bd30      	pop	{r4, r5, pc}
	LOG_ERR("No available SMP context for conn %p", conn);
   1ffb4:	2008      	movs	r0, #8
   1ffb6:	f7f5 ff07 	bl	15dc8 <z_log_msg_alloc>
   1ffba:	2200      	movs	r2, #0
   1ffbc:	f36f 0200 	bfc	r2, #0, #1
   1ffc0:	f36f 0241 	bfc	r2, #1, #1
   1ffc4:	f36f 0282 	bfc	r2, #2, #1
   1ffc8:	f36f 02c5 	bfc	r2, #3, #3
   1ffcc:	2301      	movs	r3, #1
   1ffce:	f363 1288 	bfi	r2, r3, #6, #3
   1ffd2:	230c      	movs	r3, #12
   1ffd4:	f363 2252 	bfi	r2, r3, #9, #10
   1ffd8:	f36f 42de 	bfc	r2, #19, #12
   1ffdc:	f36f 72df 	bfc	r2, #31, #1
   1ffe0:	4604      	mov	r4, r0
   1ffe2:	b190      	cbz	r0, 2000a <CONFIG_PM_SRAM_SIZE+0xa>
   1ffe4:	f110 0310 	adds.w	r3, r0, #16
   1ffe8:	d002      	beq.n	1fff0 <bt_smp_accept+0x6c>
   1ffea:	490e      	ldr	r1, [pc, #56]	; (20024 <CONFIG_PM_SRAM_SIZE+0x24>)
   1ffec:	6141      	str	r1, [r0, #20]
   1ffee:	6185      	str	r5, [r0, #24]
   1fff0:	b15b      	cbz	r3, 2000a <CONFIG_PM_SRAM_SIZE+0xa>
   1fff2:	2303      	movs	r3, #3
   1fff4:	f88d 3004 	strb.w	r3, [sp, #4]
   1fff8:	2300      	movs	r3, #0
   1fffa:	f88d 3005 	strb.w	r3, [sp, #5]
   1fffe:	f88d 3006 	strb.w	r3, [sp, #6]
   20002:	f88d 3007 	strb.w	r3, [sp, #7]
   20006:	9801      	ldr	r0, [sp, #4]
   20008:	6120      	str	r0, [r4, #16]
   2000a:	2300      	movs	r3, #0
   2000c:	4906      	ldr	r1, [pc, #24]	; (20028 <CONFIG_PM_SRAM_SIZE+0x28>)
   2000e:	4620      	mov	r0, r4
   20010:	f007 fee5 	bl	27dde <z_log_msg_finalize>
	return -ENOMEM;
   20014:	f06f 000b 	mvn.w	r0, #11
   20018:	e7ca      	b.n	1ffb0 <bt_smp_accept+0x2c>
   2001a:	bf00      	nop
   2001c:	20008394 	.word	0x20008394
   20020:	00030840 	.word	0x00030840
   20024:	00030818 	.word	0x00030818
   20028:	0002dec8 	.word	0x0002dec8

0002002c <pool_id>:
	return &_net_buf_pool_list[id];
}

static int pool_id(struct net_buf_pool *pool)
{
	return pool - _net_buf_pool_list;
   2002c:	4b03      	ldr	r3, [pc, #12]	; (2003c <pool_id+0x10>)
   2002e:	1ac0      	subs	r0, r0, r3
   20030:	1080      	asrs	r0, r0, #2
}
   20032:	4b03      	ldr	r3, [pc, #12]	; (20040 <pool_id+0x14>)
   20034:	fb03 f000 	mul.w	r0, r3, r0
   20038:	4770      	bx	lr
   2003a:	bf00      	nop
   2003c:	20000c44 	.word	0x20000c44
   20040:	ba2e8ba3 	.word	0xba2e8ba3

00020044 <net_buf_pool_get>:
}
   20044:	222c      	movs	r2, #44	; 0x2c
   20046:	4b02      	ldr	r3, [pc, #8]	; (20050 <net_buf_pool_get+0xc>)
   20048:	fb02 3000 	mla	r0, r2, r0, r3
   2004c:	4770      	bx	lr
   2004e:	bf00      	nop
   20050:	20000c44 	.word	0x20000c44

00020054 <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(const struct device *dev)
{
   20054:	b508      	push	{r3, lr}
   20056:	4804      	ldr	r0, [pc, #16]	; (20068 <xoshiro128_initialize+0x14>)
   20058:	f00c fd77 	bl	2cb4a <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
   2005c:	b108      	cbz	r0, 20062 <xoshiro128_initialize+0xe>
		return -ENODEV;
	}
	return 0;
   2005e:	2000      	movs	r0, #0
}
   20060:	bd08      	pop	{r3, pc}
		return -ENODEV;
   20062:	f06f 0012 	mvn.w	r0, #18
   20066:	e7fb      	b.n	20060 <xoshiro128_initialize+0xc>
   20068:	0002dc08 	.word	0x0002dc08

0002006c <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
   2006c:	4800      	ldr	r0, [pc, #0]	; (20070 <get_hf_flags+0x4>)
   2006e:	4770      	bx	lr
   20070:	20008848 	.word	0x20008848

00020074 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   20074:	4b03      	ldr	r3, [pc, #12]	; (20084 <get_subsys+0x10>)
   20076:	1ac0      	subs	r0, r0, r3
   20078:	1080      	asrs	r0, r0, #2

	return (clock_control_subsys_t)offset;
}
   2007a:	4b03      	ldr	r3, [pc, #12]	; (20088 <get_subsys+0x14>)
   2007c:	fb03 f000 	mul.w	r0, r3, r0
   20080:	4770      	bx	lr
   20082:	bf00      	nop
   20084:	20008808 	.word	0x20008808
   20088:	b6db6db7 	.word	0xb6db6db7

0002008c <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   2008c:	b538      	push	{r3, r4, r5, lr}
   2008e:	4605      	mov	r5, r0
   20090:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   20092:	f7ff ffef 	bl	20074 <get_subsys>
   20096:	4601      	mov	r1, r0
   20098:	2240      	movs	r2, #64	; 0x40
   2009a:	4803      	ldr	r0, [pc, #12]	; (200a8 <onoff_stop+0x1c>)
   2009c:	f00b f8e1 	bl	2b262 <stop>
   200a0:	4601      	mov	r1, r0
	notify(mgr, res);
   200a2:	4628      	mov	r0, r5
   200a4:	47a0      	blx	r4
}
   200a6:	bd38      	pop	{r3, r4, r5, pc}
   200a8:	0002dbc0 	.word	0x0002dbc0

000200ac <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   200ac:	b530      	push	{r4, r5, lr}
   200ae:	b083      	sub	sp, #12
   200b0:	4605      	mov	r5, r0
   200b2:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   200b4:	f7ff ffde 	bl	20074 <get_subsys>
   200b8:	4601      	mov	r1, r0
   200ba:	2340      	movs	r3, #64	; 0x40
   200bc:	9300      	str	r3, [sp, #0]
   200be:	4623      	mov	r3, r4
   200c0:	4a05      	ldr	r2, [pc, #20]	; (200d8 <onoff_start+0x2c>)
   200c2:	4806      	ldr	r0, [pc, #24]	; (200dc <onoff_start+0x30>)
   200c4:	f00b f8e7 	bl	2b296 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   200c8:	1e01      	subs	r1, r0, #0
   200ca:	db01      	blt.n	200d0 <onoff_start+0x24>
		notify(mgr, err);
	}
}
   200cc:	b003      	add	sp, #12
   200ce:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
   200d0:	4628      	mov	r0, r5
   200d2:	47a0      	blx	r4
}
   200d4:	e7fa      	b.n	200cc <onoff_start+0x20>
   200d6:	bf00      	nop
   200d8:	0002b2df 	.word	0x0002b2df
   200dc:	0002dbc0 	.word	0x0002dbc0

000200e0 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
   200e0:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
   200e2:	b110      	cbz	r0, 200ea <clock_event_handler+0xa>
   200e4:	2801      	cmp	r0, #1
   200e6:	d00d      	beq.n	20104 <clock_event_handler+0x24>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
   200e8:	bd08      	pop	{r3, pc}
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   200ea:	2100      	movs	r1, #0
   200ec:	4808      	ldr	r0, [pc, #32]	; (20110 <clock_event_handler+0x30>)
   200ee:	f00b f841 	bl	2b174 <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   200f2:	6883      	ldr	r3, [r0, #8]
   200f4:	f013 0f07 	tst.w	r3, #7
   200f8:	d1f6      	bne.n	200e8 <clock_event_handler+0x8>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   200fa:	2100      	movs	r1, #0
   200fc:	4804      	ldr	r0, [pc, #16]	; (20110 <clock_event_handler+0x30>)
   200fe:	f00b f89e 	bl	2b23e <clkstarted_handle>
   20102:	e7f1      	b.n	200e8 <clock_event_handler+0x8>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   20104:	2101      	movs	r1, #1
   20106:	4802      	ldr	r0, [pc, #8]	; (20110 <clock_event_handler+0x30>)
   20108:	f00b f899 	bl	2b23e <clkstarted_handle>
}
   2010c:	e7ec      	b.n	200e8 <clock_event_handler+0x8>
   2010e:	bf00      	nop
   20110:	0002dbc0 	.word	0x0002dbc0

00020114 <generic_hfclk_start>:
{
   20114:	b510      	push	{r4, lr}
   20116:	b082      	sub	sp, #8
	__asm__ volatile(
   20118:	f04f 0340 	mov.w	r3, #64	; 0x40
   2011c:	f3ef 8411 	mrs	r4, BASEPRI
   20120:	f383 8812 	msr	BASEPRI_MAX, r3
   20124:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   20128:	4a14      	ldr	r2, [pc, #80]	; (2017c <generic_hfclk_start+0x68>)
   2012a:	6813      	ldr	r3, [r2, #0]
   2012c:	f043 0102 	orr.w	r1, r3, #2
   20130:	6011      	str	r1, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   20132:	f013 0f01 	tst.w	r3, #1
   20136:	d109      	bne.n	2014c <generic_hfclk_start+0x38>
	bool already_started = false;
   20138:	2300      	movs	r3, #0
	__asm__ volatile(
   2013a:	f384 8811 	msr	BASEPRI, r4
   2013e:	f3bf 8f6f 	isb	sy
	if (already_started) {
   20142:	b9b3      	cbnz	r3, 20172 <generic_hfclk_start+0x5e>
	hfclk_start();
   20144:	f00b f8d3 	bl	2b2ee <hfclk_start>
}
   20148:	b002      	add	sp, #8
   2014a:	bd10      	pop	{r4, pc}
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
   2014c:	f10d 0207 	add.w	r2, sp, #7
   20150:	2101      	movs	r1, #1
   20152:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   20156:	f00a ffea 	bl	2b12e <nrf_clock_is_running>
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   2015a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2015e:	2b01      	cmp	r3, #1
   20160:	d001      	beq.n	20166 <generic_hfclk_start+0x52>
	bool already_started = false;
   20162:	2300      	movs	r3, #0
   20164:	e7e9      	b.n	2013a <generic_hfclk_start+0x26>
			set_on_state(get_hf_flags());
   20166:	f7ff ff81 	bl	2006c <get_hf_flags>
   2016a:	f00b f855 	bl	2b218 <set_on_state>
			already_started = true;
   2016e:	2301      	movs	r3, #1
   20170:	e7e3      	b.n	2013a <generic_hfclk_start+0x26>
		clkstarted_handle(CLOCK_DEVICE,
   20172:	2100      	movs	r1, #0
   20174:	4802      	ldr	r0, [pc, #8]	; (20180 <generic_hfclk_start+0x6c>)
   20176:	f00b f862 	bl	2b23e <clkstarted_handle>
		return;
   2017a:	e7e5      	b.n	20148 <generic_hfclk_start+0x34>
   2017c:	20008858 	.word	0x20008858
   20180:	0002dbc0 	.word	0x0002dbc0

00020184 <generic_hfclk_stop>:
{
   20184:	b510      	push	{r4, lr}
	__asm__ volatile(
   20186:	f04f 0340 	mov.w	r3, #64	; 0x40
   2018a:	f3ef 8411 	mrs	r4, BASEPRI
   2018e:	f383 8812 	msr	BASEPRI_MAX, r3
   20192:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
   20196:	4a08      	ldr	r2, [pc, #32]	; (201b8 <generic_hfclk_stop+0x34>)
   20198:	6813      	ldr	r3, [r2, #0]
   2019a:	f023 0102 	bic.w	r1, r3, #2
   2019e:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
   201a0:	f013 0f01 	tst.w	r3, #1
   201a4:	d004      	beq.n	201b0 <generic_hfclk_stop+0x2c>
	__asm__ volatile(
   201a6:	f384 8811 	msr	BASEPRI, r4
   201aa:	f3bf 8f6f 	isb	sy
}
   201ae:	bd10      	pop	{r4, pc}
		hfclk_stop();
   201b0:	f00b f8a7 	bl	2b302 <hfclk_stop>
   201b4:	e7f7      	b.n	201a6 <generic_hfclk_stop+0x22>
   201b6:	bf00      	nop
   201b8:	20008858 	.word	0x20008858

000201bc <lfclk_spinwait>:
{
   201bc:	b570      	push	{r4, r5, r6, lr}
   201be:	b082      	sub	sp, #8
   201c0:	4606      	mov	r6, r0
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   201c2:	f00c fdae 	bl	2cd22 <k_is_in_isr>
   201c6:	b918      	cbnz	r0, 201d0 <lfclk_spinwait+0x14>
   201c8:	4604      	mov	r4, r0
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
   201ca:	4b1b      	ldr	r3, [pc, #108]	; (20238 <lfclk_spinwait+0x7c>)
   201cc:	781b      	ldrb	r3, [r3, #0]
   201ce:	b97b      	cbnz	r3, 201f0 <lfclk_spinwait+0x34>
	__asm__ volatile(
   201d0:	f04f 0340 	mov.w	r3, #64	; 0x40
   201d4:	f3ef 8511 	mrs	r5, BASEPRI
   201d8:	f383 8812 	msr	BASEPRI_MAX, r3
   201dc:	f3bf 8f6f 	isb	sy
   201e0:	2401      	movs	r4, #1
	if (!isr_mode) {
   201e2:	b95c      	cbnz	r4, 201fc <lfclk_spinwait+0x40>
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_clock_int_disable(NRF_CLOCK_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   201e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   201e8:	2202      	movs	r2, #2
   201ea:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   201ee:	e005      	b.n	201fc <lfclk_spinwait+0x40>
	int key = isr_mode ? irq_lock() : 0;
   201f0:	2500      	movs	r5, #0
   201f2:	e7f6      	b.n	201e2 <lfclk_spinwait+0x26>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   201f4:	b1ac      	cbz	r4, 20222 <lfclk_spinwait+0x66>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   201f6:	4628      	mov	r0, r5
   201f8:	f7f6 fc12 	bl	16a20 <arch_cpu_atomic_idle>
   201fc:	aa01      	add	r2, sp, #4
   201fe:	2100      	movs	r1, #0
   20200:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   20204:	f00a ff93 	bl	2b12e <nrf_clock_is_running>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   20208:	2800      	cmp	r0, #0
   2020a:	d0f3      	beq.n	201f4 <lfclk_spinwait+0x38>
		 && ((type == target_type)
   2020c:	9b01      	ldr	r3, [sp, #4]
	while (!(nrfx_clock_is_running(d, (void *)&type)
   2020e:	b10b      	cbz	r3, 20214 <lfclk_spinwait+0x58>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   20210:	2e01      	cmp	r6, #1
   20212:	d1ef      	bne.n	201f4 <lfclk_spinwait+0x38>
	if (isr_mode) {
   20214:	b14c      	cbz	r4, 2022a <lfclk_spinwait+0x6e>
	__asm__ volatile(
   20216:	f385 8811 	msr	BASEPRI, r5
   2021a:	f3bf 8f6f 	isb	sy
}
   2021e:	b002      	add	sp, #8
   20220:	bd70      	pop	{r4, r5, r6, pc}
				k_msleep(1);
   20222:	2001      	movs	r0, #1
   20224:	f00b f877 	bl	2b316 <k_msleep>
   20228:	e7e8      	b.n	201fc <lfclk_spinwait+0x40>
    p_reg->INTENSET = mask;
   2022a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2022e:	2202      	movs	r2, #2
   20230:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   20234:	e7f3      	b.n	2021e <lfclk_spinwait+0x62>
   20236:	bf00      	nop
   20238:	20008fe6 	.word	0x20008fe6

0002023c <api_blocking_start>:
{
   2023c:	b500      	push	{lr}
   2023e:	b087      	sub	sp, #28
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   20240:	f8cd d000 	str.w	sp, [sp]
   20244:	f8cd d004 	str.w	sp, [sp, #4]
   20248:	2300      	movs	r3, #0
   2024a:	9302      	str	r3, [sp, #8]
   2024c:	2301      	movs	r3, #1
   2024e:	9303      	str	r3, [sp, #12]
   20250:	ab04      	add	r3, sp, #16
   20252:	9304      	str	r3, [sp, #16]
   20254:	9305      	str	r3, [sp, #20]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   20256:	466b      	mov	r3, sp
   20258:	4a06      	ldr	r2, [pc, #24]	; (20274 <api_blocking_start+0x38>)
   2025a:	f00b f838 	bl	2b2ce <api_start>
	if (err < 0) {
   2025e:	2800      	cmp	r0, #0
   20260:	db05      	blt.n	2026e <api_blocking_start+0x32>
	return z_impl_k_sem_take(sem, timeout);
   20262:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   20266:	2300      	movs	r3, #0
   20268:	4668      	mov	r0, sp
   2026a:	f004 ffd9 	bl	25220 <z_impl_k_sem_take>
}
   2026e:	b007      	add	sp, #28
   20270:	f85d fb04 	ldr.w	pc, [sp], #4
   20274:	0002b343 	.word	0x0002b343

00020278 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   20278:	b570      	push	{r4, r5, r6, lr}
   2027a:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   2027c:	2200      	movs	r2, #0
   2027e:	2101      	movs	r1, #1
   20280:	4610      	mov	r0, r2
   20282:	f008 f934 	bl	284ee <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   20286:	4811      	ldr	r0, [pc, #68]	; (202cc <clk_init+0x54>)
   20288:	f003 fa38 	bl	236fc <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   2028c:	4b10      	ldr	r3, [pc, #64]	; (202d0 <clk_init+0x58>)
   2028e:	4298      	cmp	r0, r3
   20290:	d119      	bne.n	202c6 <clk_init+0x4e>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   20292:	f00c fadb 	bl	2c84c <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
   20296:	2400      	movs	r4, #0
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   20298:	2c01      	cmp	r4, #1
   2029a:	d812      	bhi.n	202c2 <clk_init+0x4a>
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
   2029c:	4621      	mov	r1, r4
   2029e:	4630      	mov	r0, r6
   202a0:	f00a ff68 	bl	2b174 <get_sub_data>
   202a4:	4605      	mov	r5, r0

		err = onoff_manager_init(get_onoff_manager(dev, i),
   202a6:	4621      	mov	r1, r4
   202a8:	4630      	mov	r0, r6
   202aa:	f00a ff70 	bl	2b18e <get_onoff_manager>
   202ae:	4909      	ldr	r1, [pc, #36]	; (202d4 <clk_init+0x5c>)
   202b0:	f006 ffb2 	bl	27218 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   202b4:	2800      	cmp	r0, #0
   202b6:	db05      	blt.n	202c4 <clk_init+0x4c>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   202b8:	2301      	movs	r3, #1
   202ba:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   202bc:	441c      	add	r4, r3
   202be:	b2e4      	uxtb	r4, r4
   202c0:	e7ea      	b.n	20298 <clk_init+0x20>
	}

	return 0;
   202c2:	2000      	movs	r0, #0
}
   202c4:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   202c6:	f06f 0004 	mvn.w	r0, #4
   202ca:	e7fb      	b.n	202c4 <clk_init+0x4c>
   202cc:	000200e1 	.word	0x000200e1
   202d0:	0bad0000 	.word	0x0bad0000
   202d4:	00030884 	.word	0x00030884

000202d8 <z_nrf_clock_control_lf_on>:
{
   202d8:	b510      	push	{r4, lr}
   202da:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   202dc:	4b10      	ldr	r3, [pc, #64]	; (20320 <z_nrf_clock_control_lf_on+0x48>)
   202de:	2101      	movs	r1, #1
   202e0:	f3bf 8f5b 	dmb	ish
   202e4:	e853 2f00 	ldrex	r2, [r3]
   202e8:	e843 1000 	strex	r0, r1, [r3]
   202ec:	2800      	cmp	r0, #0
   202ee:	d1f9      	bne.n	202e4 <z_nrf_clock_control_lf_on+0xc>
   202f0:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   202f4:	b11a      	cbz	r2, 202fe <z_nrf_clock_control_lf_on+0x26>
	switch (start_mode) {
   202f6:	1e63      	subs	r3, r4, #1
   202f8:	2b01      	cmp	r3, #1
   202fa:	d90d      	bls.n	20318 <z_nrf_clock_control_lf_on+0x40>
}
   202fc:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
   202fe:	4809      	ldr	r0, [pc, #36]	; (20324 <z_nrf_clock_control_lf_on+0x4c>)
   20300:	f00a ff45 	bl	2b18e <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   20304:	4908      	ldr	r1, [pc, #32]	; (20328 <z_nrf_clock_control_lf_on+0x50>)
   20306:	2300      	movs	r3, #0
   20308:	604b      	str	r3, [r1, #4]
   2030a:	608b      	str	r3, [r1, #8]
   2030c:	60cb      	str	r3, [r1, #12]
   2030e:	2301      	movs	r3, #1
   20310:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
   20312:	f006 ff9e 	bl	27252 <onoff_request>
   20316:	e7ee      	b.n	202f6 <z_nrf_clock_control_lf_on+0x1e>
		lfclk_spinwait(start_mode);
   20318:	4620      	mov	r0, r4
   2031a:	f7ff ff4f 	bl	201bc <lfclk_spinwait>
		break;
   2031e:	e7ed      	b.n	202fc <z_nrf_clock_control_lf_on+0x24>
   20320:	20008804 	.word	0x20008804
   20324:	0002dbc0 	.word	0x0002dbc0
   20328:	200087f4 	.word	0x200087f4

0002032c <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
   2032c:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

#ifdef CONFIG_PRINTK
	__printk_hook_install(rtt_console_out);
   2032e:	4c04      	ldr	r4, [pc, #16]	; (20340 <rtt_console_init+0x14>)
   20330:	4620      	mov	r0, r4
   20332:	f7f4 ffa5 	bl	15280 <__printk_hook_install>
#endif
	__stdout_hook_install(rtt_console_out);
   20336:	4620      	mov	r0, r4
   20338:	f7f7 ff66 	bl	18208 <__stdout_hook_install>

	return 0;
}
   2033c:	2000      	movs	r0, #0
   2033e:	bd10      	pop	{r4, pc}
   20340:	00020345 	.word	0x00020345

00020344 <rtt_console_out>:
{
   20344:	b570      	push	{r4, r5, r6, lr}
   20346:	b082      	sub	sp, #8
   20348:	4606      	mov	r6, r0
	char c = (char)character;
   2034a:	f88d 0007 	strb.w	r0, [sp, #7]
	int max_cnt = CONFIG_RTT_TX_RETRY_CNT;
   2034e:	2502      	movs	r5, #2
		SEGGER_RTT_LOCK();
   20350:	f004 fa44 	bl	247dc <zephyr_rtt_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
   20354:	2201      	movs	r2, #1
   20356:	f10d 0107 	add.w	r1, sp, #7
   2035a:	2000      	movs	r0, #0
   2035c:	f004 f9f8 	bl	24750 <SEGGER_RTT_WriteNoLock>
   20360:	4604      	mov	r4, r0
		SEGGER_RTT_UNLOCK();
   20362:	f004 fa47 	bl	247f4 <zephyr_rtt_mutex_unlock>
		if (cnt) {
   20366:	b93c      	cbnz	r4, 20378 <rtt_console_out+0x34>
		} else if (host_present) {
   20368:	4b08      	ldr	r3, [pc, #32]	; (2038c <rtt_console_out+0x48>)
   2036a:	781b      	ldrb	r3, [r3, #0]
   2036c:	b15b      	cbz	r3, 20386 <rtt_console_out+0x42>
			if (max_cnt) {
   2036e:	b13d      	cbz	r5, 20380 <rtt_console_out+0x3c>
				wait();
   20370:	f00b f802 	bl	2b378 <wait>
				max_cnt--;
   20374:	3d01      	subs	r5, #1
		SEGGER_RTT_LOCK();
   20376:	e7eb      	b.n	20350 <rtt_console_out+0xc>
			host_present = true;
   20378:	4b04      	ldr	r3, [pc, #16]	; (2038c <rtt_console_out+0x48>)
   2037a:	2201      	movs	r2, #1
   2037c:	701a      	strb	r2, [r3, #0]
   2037e:	e002      	b.n	20386 <rtt_console_out+0x42>
				host_present = false;
   20380:	4b02      	ldr	r3, [pc, #8]	; (2038c <rtt_console_out+0x48>)
   20382:	2200      	movs	r2, #0
   20384:	701a      	strb	r2, [r3, #0]
}
   20386:	4630      	mov	r0, r6
   20388:	b002      	add	sp, #8
   2038a:	bd70      	pop	{r4, r5, r6, pc}
   2038c:	20008fe4 	.word	0x20008fe4

00020390 <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   20390:	b128      	cbz	r0, 2039e <get_dev+0xe>
   20392:	2801      	cmp	r0, #1
   20394:	d101      	bne.n	2039a <get_dev+0xa>
   20396:	4803      	ldr	r0, [pc, #12]	; (203a4 <get_dev+0x14>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
   20398:	4770      	bx	lr
	const struct device *dev = NULL;
   2039a:	2000      	movs	r0, #0
   2039c:	4770      	bx	lr
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   2039e:	4802      	ldr	r0, [pc, #8]	; (203a8 <get_dev+0x18>)
   203a0:	4770      	bx	lr
   203a2:	bf00      	nop
   203a4:	0002dbd8 	.word	0x0002dbd8
   203a8:	0002dbf0 	.word	0x0002dbf0

000203ac <gpio_nrfx_pin_interrupt_configure>:
{
   203ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   203ae:	b085      	sub	sp, #20
   203b0:	460e      	mov	r6, r1
   203b2:	4619      	mov	r1, r3
	return port->config;
   203b4:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   203b6:	7b1b      	ldrb	r3, [r3, #12]
   203b8:	f006 051f 	and.w	r5, r6, #31
   203bc:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   203c0:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
   203c4:	d022      	beq.n	2040c <gpio_nrfx_pin_interrupt_configure+0x60>
   203c6:	4607      	mov	r7, r0
   203c8:	4614      	mov	r4, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
   203ca:	2300      	movs	r3, #0
   203cc:	9301      	str	r3, [sp, #4]
   203ce:	9302      	str	r3, [sp, #8]
		.trigger = get_trigger(mode, trig),
   203d0:	4610      	mov	r0, r2
   203d2:	f00b f8b7 	bl	2b544 <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
   203d6:	f88d 0004 	strb.w	r0, [sp, #4]
	return port->config;
   203da:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   203dc:	6899      	ldr	r1, [r3, #8]
   203de:	40f1      	lsrs	r1, r6
   203e0:	f011 0f01 	tst.w	r1, #1
   203e4:	d102      	bne.n	203ec <gpio_nrfx_pin_interrupt_configure+0x40>
   203e6:	f1b4 7fa0 	cmp.w	r4, #20971520	; 0x1400000
   203ea:	d014      	beq.n	20416 <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   203ec:	2300      	movs	r3, #0
   203ee:	aa01      	add	r2, sp, #4
   203f0:	4619      	mov	r1, r3
   203f2:	4628      	mov	r0, r5
   203f4:	f003 fce6 	bl	23dc4 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   203f8:	4b1b      	ldr	r3, [pc, #108]	; (20468 <gpio_nrfx_pin_interrupt_configure+0xbc>)
   203fa:	4298      	cmp	r0, r3
   203fc:	d131      	bne.n	20462 <gpio_nrfx_pin_interrupt_configure+0xb6>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   203fe:	2101      	movs	r1, #1
   20400:	4628      	mov	r0, r5
   20402:	f003 fe3f 	bl	24084 <nrfx_gpiote_trigger_enable>
	return 0;
   20406:	2000      	movs	r0, #0
}
   20408:	b005      	add	sp, #20
   2040a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
   2040c:	4628      	mov	r0, r5
   2040e:	f003 fe6b 	bl	240e8 <nrfx_gpiote_trigger_disable>
		return 0;
   20412:	2000      	movs	r0, #0
   20414:	e7f8      	b.n	20408 <gpio_nrfx_pin_interrupt_configure+0x5c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   20416:	f005 031f 	and.w	r3, r5, #31

    return pin_number >> 5;
   2041a:	096a      	lsrs	r2, r5, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2041c:	2a01      	cmp	r2, #1
   2041e:	d014      	beq.n	2044a <gpio_nrfx_pin_interrupt_configure+0x9e>
        case 0: return NRF_P0;
   20420:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   20424:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   20428:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   2042c:	f013 0f01 	tst.w	r3, #1
   20430:	d1dc      	bne.n	203ec <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   20432:	f10d 010f 	add.w	r1, sp, #15
   20436:	4628      	mov	r0, r5
   20438:	f003 fdc8 	bl	23fcc <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   2043c:	4b0b      	ldr	r3, [pc, #44]	; (2046c <gpio_nrfx_pin_interrupt_configure+0xc0>)
   2043e:	4298      	cmp	r0, r3
   20440:	d005      	beq.n	2044e <gpio_nrfx_pin_interrupt_configure+0xa2>
		trigger_config.p_in_channel = &ch;
   20442:	f10d 030f 	add.w	r3, sp, #15
   20446:	9302      	str	r3, [sp, #8]
   20448:	e7d0      	b.n	203ec <gpio_nrfx_pin_interrupt_configure+0x40>
        case 1: return NRF_P1;
   2044a:	4a09      	ldr	r2, [pc, #36]	; (20470 <gpio_nrfx_pin_interrupt_configure+0xc4>)
   2044c:	e7ea      	b.n	20424 <gpio_nrfx_pin_interrupt_configure+0x78>
			err = nrfx_gpiote_channel_alloc(&ch);
   2044e:	f10d 000f 	add.w	r0, sp, #15
   20452:	f003 fe0f 	bl	24074 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   20456:	4b04      	ldr	r3, [pc, #16]	; (20468 <gpio_nrfx_pin_interrupt_configure+0xbc>)
   20458:	4298      	cmp	r0, r3
   2045a:	d0f2      	beq.n	20442 <gpio_nrfx_pin_interrupt_configure+0x96>
				return -ENOMEM;
   2045c:	f06f 000b 	mvn.w	r0, #11
   20460:	e7d2      	b.n	20408 <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EINVAL;
   20462:	f06f 0015 	mvn.w	r0, #21
   20466:	e7cf      	b.n	20408 <gpio_nrfx_pin_interrupt_configure+0x5c>
   20468:	0bad0000 	.word	0x0bad0000
   2046c:	0bad0004 	.word	0x0bad0004
   20470:	50000300 	.word	0x50000300

00020474 <gpio_nrfx_pin_configure>:
{
   20474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20478:	b086      	sub	sp, #24
   2047a:	460e      	mov	r6, r1
   2047c:	4614      	mov	r4, r2
	return port->config;
   2047e:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   20482:	f898 300c 	ldrb.w	r3, [r8, #12]
   20486:	f001 051f 	and.w	r5, r1, #31
   2048a:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   2048e:	f10d 0117 	add.w	r1, sp, #23
   20492:	4628      	mov	r0, r5
   20494:	f003 fd9a 	bl	23fcc <nrfx_gpiote_channel_get>
   20498:	4607      	mov	r7, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   2049a:	f414 3f40 	tst.w	r4, #196608	; 0x30000
   2049e:	d03a      	beq.n	20516 <gpio_nrfx_pin_configure+0xa2>
	nrfx_gpiote_trigger_config_t trigger_config = {
   204a0:	2100      	movs	r1, #0
   204a2:	9103      	str	r1, [sp, #12]
   204a4:	9104      	str	r1, [sp, #16]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   204a6:	460b      	mov	r3, r1
   204a8:	aa03      	add	r2, sp, #12
   204aa:	4628      	mov	r0, r5
   204ac:	f003 fc8a 	bl	23dc4 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   204b0:	4b33      	ldr	r3, [pc, #204]	; (20580 <gpio_nrfx_pin_configure+0x10c>)
   204b2:	4298      	cmp	r0, r3
   204b4:	d161      	bne.n	2057a <gpio_nrfx_pin_configure+0x106>
	if (free_ch) {
   204b6:	429f      	cmp	r7, r3
   204b8:	d03d      	beq.n	20536 <gpio_nrfx_pin_configure+0xc2>
	if (flags & GPIO_OUTPUT) {
   204ba:	f414 3f00 	tst.w	r4, #131072	; 0x20000
   204be:	d049      	beq.n	20554 <gpio_nrfx_pin_configure+0xe0>
		int rv = get_drive(flags, &drive);
   204c0:	f10d 0103 	add.w	r1, sp, #3
   204c4:	4620      	mov	r0, r4
   204c6:	f00a ffc2 	bl	2b44e <get_drive>
		if (rv != 0) {
   204ca:	4607      	mov	r7, r0
   204cc:	bb50      	cbnz	r0, 20524 <gpio_nrfx_pin_configure+0xb0>
		nrfx_gpiote_output_config_t output_config = {
   204ce:	f89d 3003 	ldrb.w	r3, [sp, #3]
   204d2:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   204d6:	f414 3f80 	tst.w	r4, #65536	; 0x10000
   204da:	bf0c      	ite	eq
   204dc:	2301      	moveq	r3, #1
   204de:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
   204e0:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
   204e4:	4620      	mov	r0, r4
   204e6:	f00a fff5 	bl	2b4d4 <get_pull>
		nrfx_gpiote_output_config_t output_config = {
   204ea:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   204ee:	f414 2f00 	tst.w	r4, #524288	; 0x80000
   204f2:	d025      	beq.n	20540 <gpio_nrfx_pin_configure+0xcc>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   204f4:	f8d8 2004 	ldr.w	r2, [r8, #4]
   204f8:	2301      	movs	r3, #1
   204fa:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
   204fc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   20500:	2200      	movs	r2, #0
   20502:	a901      	add	r1, sp, #4
   20504:	4628      	mov	r0, r5
   20506:	f003 fcf1 	bl	23eec <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   2050a:	4b1d      	ldr	r3, [pc, #116]	; (20580 <gpio_nrfx_pin_configure+0x10c>)
   2050c:	4298      	cmp	r0, r3
   2050e:	d009      	beq.n	20524 <gpio_nrfx_pin_configure+0xb0>
   20510:	f06f 0715 	mvn.w	r7, #21
   20514:	e006      	b.n	20524 <gpio_nrfx_pin_configure+0xb0>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   20516:	4628      	mov	r0, r5
   20518:	f003 fe08 	bl	2412c <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   2051c:	4b18      	ldr	r3, [pc, #96]	; (20580 <gpio_nrfx_pin_configure+0x10c>)
   2051e:	429f      	cmp	r7, r3
   20520:	d004      	beq.n	2052c <gpio_nrfx_pin_configure+0xb8>
		return 0;
   20522:	2700      	movs	r7, #0
}
   20524:	4638      	mov	r0, r7
   20526:	b006      	add	sp, #24
   20528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			err = nrfx_gpiote_channel_free(ch);
   2052c:	f89d 0017 	ldrb.w	r0, [sp, #23]
   20530:	f003 fd98 	bl	24064 <nrfx_gpiote_channel_free>
   20534:	e7f5      	b.n	20522 <gpio_nrfx_pin_configure+0xae>
		err = nrfx_gpiote_channel_free(ch);
   20536:	f89d 0017 	ldrb.w	r0, [sp, #23]
   2053a:	f003 fd93 	bl	24064 <nrfx_gpiote_channel_free>
   2053e:	e7bc      	b.n	204ba <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   20540:	f414 2f80 	tst.w	r4, #262144	; 0x40000
   20544:	d0dc      	beq.n	20500 <gpio_nrfx_pin_configure+0x8c>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   20546:	f8d8 2004 	ldr.w	r2, [r8, #4]
   2054a:	2301      	movs	r3, #1
   2054c:	40b3      	lsls	r3, r6
    p_reg->OUTCLR = clr_mask;
   2054e:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   20552:	e7d5      	b.n	20500 <gpio_nrfx_pin_configure+0x8c>
		.pull = get_pull(flags)
   20554:	4620      	mov	r0, r4
   20556:	f00a ffbd 	bl	2b4d4 <get_pull>
	nrfx_gpiote_input_config_t input_config = {
   2055a:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   2055e:	2300      	movs	r3, #0
   20560:	461a      	mov	r2, r3
   20562:	a902      	add	r1, sp, #8
   20564:	4628      	mov	r0, r5
   20566:	f003 fc2d 	bl	23dc4 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   2056a:	4b05      	ldr	r3, [pc, #20]	; (20580 <gpio_nrfx_pin_configure+0x10c>)
   2056c:	4298      	cmp	r0, r3
   2056e:	d101      	bne.n	20574 <gpio_nrfx_pin_configure+0x100>
   20570:	2700      	movs	r7, #0
   20572:	e7d7      	b.n	20524 <gpio_nrfx_pin_configure+0xb0>
   20574:	f06f 0715 	mvn.w	r7, #21
   20578:	e7d4      	b.n	20524 <gpio_nrfx_pin_configure+0xb0>
		return -EINVAL;
   2057a:	f06f 0715 	mvn.w	r7, #21
   2057e:	e7d1      	b.n	20524 <gpio_nrfx_pin_configure+0xb0>
   20580:	0bad0000 	.word	0x0bad0000

00020584 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   20584:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   20586:	f003 fd63 	bl	24050 <nrfx_gpiote_is_init>
   2058a:	b108      	cbz	r0, 20590 <gpio_nrfx_init+0xc>
		return 0;
   2058c:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   2058e:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
   20590:	f003 fd34 	bl	23ffc <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   20594:	4b08      	ldr	r3, [pc, #32]	; (205b8 <gpio_nrfx_init+0x34>)
   20596:	4298      	cmp	r0, r3
   20598:	d10a      	bne.n	205b0 <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   2059a:	2100      	movs	r1, #0
   2059c:	4807      	ldr	r0, [pc, #28]	; (205bc <gpio_nrfx_init+0x38>)
   2059e:	f003 fd0f 	bl	23fc0 <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   205a2:	2200      	movs	r2, #0
   205a4:	2105      	movs	r1, #5
   205a6:	2006      	movs	r0, #6
   205a8:	f007 ffa1 	bl	284ee <z_arm_irq_priority_set>
	return 0;
   205ac:	2000      	movs	r0, #0
   205ae:	e7ee      	b.n	2058e <gpio_nrfx_init+0xa>
		return -EIO;
   205b0:	f06f 0004 	mvn.w	r0, #4
   205b4:	e7eb      	b.n	2058e <gpio_nrfx_init+0xa>
   205b6:	bf00      	nop
   205b8:	0bad0000 	.word	0x0bad0000
   205bc:	0002b57d 	.word	0x0002b57d

000205c0 <get_nrf_spi_frequency>:

static inline nrf_spi_frequency_t get_nrf_spi_frequency(uint32_t frequency)
{
	/* Get the highest supported frequency not exceeding the requested one.
	 */
	if (frequency < 250000) {
   205c0:	4b13      	ldr	r3, [pc, #76]	; (20610 <get_nrf_spi_frequency+0x50>)
   205c2:	4298      	cmp	r0, r3
   205c4:	d911      	bls.n	205ea <get_nrf_spi_frequency+0x2a>
		return NRF_SPI_FREQ_125K;
	} else if (frequency < 500000) {
   205c6:	4b13      	ldr	r3, [pc, #76]	; (20614 <get_nrf_spi_frequency+0x54>)
   205c8:	4298      	cmp	r0, r3
   205ca:	d911      	bls.n	205f0 <get_nrf_spi_frequency+0x30>
		return NRF_SPI_FREQ_250K;
	} else if (frequency < 1000000) {
   205cc:	4b12      	ldr	r3, [pc, #72]	; (20618 <get_nrf_spi_frequency+0x58>)
   205ce:	4298      	cmp	r0, r3
   205d0:	d911      	bls.n	205f6 <get_nrf_spi_frequency+0x36>
		return NRF_SPI_FREQ_500K;
	} else if (frequency < 2000000) {
   205d2:	4b12      	ldr	r3, [pc, #72]	; (2061c <get_nrf_spi_frequency+0x5c>)
   205d4:	4298      	cmp	r0, r3
   205d6:	d911      	bls.n	205fc <get_nrf_spi_frequency+0x3c>
		return NRF_SPI_FREQ_1M;
	} else if (frequency < 4000000) {
   205d8:	4b11      	ldr	r3, [pc, #68]	; (20620 <get_nrf_spi_frequency+0x60>)
   205da:	4298      	cmp	r0, r3
   205dc:	d911      	bls.n	20602 <get_nrf_spi_frequency+0x42>
		return NRF_SPI_FREQ_2M;
	} else if (frequency < 8000000) {
   205de:	4b11      	ldr	r3, [pc, #68]	; (20624 <get_nrf_spi_frequency+0x64>)
   205e0:	4298      	cmp	r0, r3
   205e2:	d211      	bcs.n	20608 <get_nrf_spi_frequency+0x48>
		return NRF_SPI_FREQ_4M;
   205e4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   205e8:	4770      	bx	lr
		return NRF_SPI_FREQ_125K;
   205ea:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
   205ee:	4770      	bx	lr
		return NRF_SPI_FREQ_250K;
   205f0:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
   205f4:	4770      	bx	lr
		return NRF_SPI_FREQ_500K;
   205f6:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   205fa:	4770      	bx	lr
		return NRF_SPI_FREQ_1M;
   205fc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   20600:	4770      	bx	lr
		return NRF_SPI_FREQ_2M;
   20602:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
   20606:	4770      	bx	lr
	} else {
		return NRF_SPI_FREQ_8M;
   20608:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
	}
}
   2060c:	4770      	bx	lr
   2060e:	bf00      	nop
   20610:	0003d08f 	.word	0x0003d08f
   20614:	0007a11f 	.word	0x0007a11f
   20618:	000f423f 	.word	0x000f423f
   2061c:	001e847f 	.word	0x001e847f
   20620:	003d08ff 	.word	0x003d08ff
   20624:	007a1200 	.word	0x007a1200

00020628 <spi_context_wait_for_completion>:
	}
#endif /* CONFIG_SPI_ASYNC */
}

static inline int spi_context_wait_for_completion(struct spi_context *ctx)
{
   20628:	b530      	push	{r4, r5, lr}
   2062a:	b083      	sub	sp, #12
   2062c:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_SPI_SLAVE) && spi_context_is_slave(ctx)) {
		timeout = K_FOREVER;
	} else {
		uint32_t timeout_ms;

		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   2062e:	6e03      	ldr	r3, [r0, #96]	; 0x60
   20630:	6d82      	ldr	r2, [r0, #88]	; 0x58
   20632:	4293      	cmp	r3, r2
   20634:	bf38      	it	cc
   20636:	4613      	movcc	r3, r2
   20638:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
   2063c:	fb02 f303 	mul.w	r3, r2, r3
			     ctx->config->frequency;
   20640:	4605      	mov	r5, r0
   20642:	f855 2b28 	ldr.w	r2, [r5], #40
   20646:	6812      	ldr	r2, [r2, #0]
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   20648:	fbb3 f3f2 	udiv	r3, r3, r2
		timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
   2064c:	33c8      	adds	r3, #200	; 0xc8
   2064e:	0c59      	lsrs	r1, r3, #17
   20650:	03db      	lsls	r3, r3, #15
   20652:	f240 32e7 	movw	r2, #999	; 0x3e7
   20656:	1898      	adds	r0, r3, r2
   20658:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2065c:	f04f 0300 	mov.w	r3, #0
   20660:	f141 0100 	adc.w	r1, r1, #0
   20664:	f7df fd4c 	bl	100 <__aeabi_uldivmod>
   20668:	4602      	mov	r2, r0
   2066a:	460b      	mov	r3, r1
   2066c:	4628      	mov	r0, r5
   2066e:	f004 fdd7 	bl	25220 <z_impl_k_sem_take>
			return -ETIMEDOUT;
		}
		status = ctx->sync_status;
	}
#else
	if (k_sem_take(&ctx->sync, timeout)) {
   20672:	b910      	cbnz	r0, 2067a <spi_context_wait_for_completion+0x52>
		LOG_ERR("Timeout waiting for transfer complete");
		return -ETIMEDOUT;
	}
	status = ctx->sync_status;
   20674:	6c20      	ldr	r0, [r4, #64]	; 0x40
		return ctx->recv_frames;
	}
#endif /* CONFIG_SPI_SLAVE */

	return status;
}
   20676:	b003      	add	sp, #12
   20678:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("Timeout waiting for transfer complete");
   2067a:	2006      	movs	r0, #6
   2067c:	f7f5 fba4 	bl	15dc8 <z_log_msg_alloc>
   20680:	2200      	movs	r2, #0
   20682:	f36f 0200 	bfc	r2, #0, #1
   20686:	f36f 0241 	bfc	r2, #1, #1
   2068a:	f36f 0282 	bfc	r2, #2, #1
   2068e:	f36f 02c5 	bfc	r2, #3, #3
   20692:	2301      	movs	r3, #1
   20694:	f363 1288 	bfi	r2, r3, #6, #3
   20698:	2308      	movs	r3, #8
   2069a:	f363 2252 	bfi	r2, r3, #9, #10
   2069e:	f36f 42de 	bfc	r2, #19, #12
   206a2:	f36f 72df 	bfc	r2, #31, #1
   206a6:	4604      	mov	r4, r0
   206a8:	b188      	cbz	r0, 206ce <spi_context_wait_for_completion+0xa6>
   206aa:	f110 0310 	adds.w	r3, r0, #16
   206ae:	d001      	beq.n	206b4 <spi_context_wait_for_completion+0x8c>
   206b0:	490b      	ldr	r1, [pc, #44]	; (206e0 <spi_context_wait_for_completion+0xb8>)
   206b2:	6141      	str	r1, [r0, #20]
   206b4:	b15b      	cbz	r3, 206ce <spi_context_wait_for_completion+0xa6>
   206b6:	2302      	movs	r3, #2
   206b8:	f88d 3004 	strb.w	r3, [sp, #4]
   206bc:	2300      	movs	r3, #0
   206be:	f88d 3005 	strb.w	r3, [sp, #5]
   206c2:	f88d 3006 	strb.w	r3, [sp, #6]
   206c6:	f88d 3007 	strb.w	r3, [sp, #7]
   206ca:	9801      	ldr	r0, [sp, #4]
   206cc:	6120      	str	r0, [r4, #16]
   206ce:	2300      	movs	r3, #0
   206d0:	4904      	ldr	r1, [pc, #16]	; (206e4 <spi_context_wait_for_completion+0xbc>)
   206d2:	4620      	mov	r0, r4
   206d4:	f007 fb83 	bl	27dde <z_log_msg_finalize>
		return -ETIMEDOUT;
   206d8:	f06f 0073 	mvn.w	r0, #115	; 0x73
   206dc:	e7cb      	b.n	20676 <spi_context_wait_for_completion+0x4e>
   206de:	bf00      	nop
   206e0:	00030958 	.word	0x00030958
   206e4:	0002df38 	.word	0x0002df38

000206e8 <configure>:
	}
}

static int configure(const struct device *dev,
		     const struct spi_config *spi_cfg)
{
   206e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   206ec:	b088      	sub	sp, #32
   206ee:	af00      	add	r7, sp, #0
   206f0:	460c      	mov	r4, r1
	struct spi_nrfx_data *dev_data = dev->data;
   206f2:	6905      	ldr	r5, [r0, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
   206f4:	6846      	ldr	r6, [r0, #4]
	struct spi_context *ctx = &dev_data->ctx;
	nrfx_spi_config_t config;
	nrfx_err_t result;

	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
   206f6:	f895 806d 	ldrb.w	r8, [r5, #109]	; 0x6d
   206fa:	f1b8 0f00 	cmp.w	r8, #0
   206fe:	d003      	beq.n	20708 <configure+0x20>
	return !!(ctx->config == config);
   20700:	682b      	ldr	r3, [r5, #0]
   20702:	428b      	cmp	r3, r1
   20704:	f000 81b1 	beq.w	20a6a <configure+0x382>
		/* Already configured. No need to do it again. */
		return 0;
	}

	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
   20708:	88a3      	ldrh	r3, [r4, #4]
   2070a:	f413 6f00 	tst.w	r3, #2048	; 0x800
   2070e:	d14b      	bne.n	207a8 <configure+0xc0>
		LOG_ERR("Half-duplex not supported");
		return -ENOTSUP;
	}

	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
   20710:	f013 0f01 	tst.w	r3, #1
   20714:	d176      	bne.n	20804 <configure+0x11c>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
		return -EINVAL;
	}

	if (spi_cfg->operation & SPI_MODE_LOOP) {
   20716:	f013 0f08 	tst.w	r3, #8
   2071a:	f040 80c9 	bne.w	208b0 <configure+0x1c8>
	    (spi_cfg->operation & SPI_LINES_MASK) != SPI_LINES_SINGLE) {
		LOG_ERR("Only single line mode is supported");
		return -EINVAL;
	}

	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
   2071e:	f3c3 1345 	ubfx	r3, r3, #5, #6
   20722:	2b08      	cmp	r3, #8
   20724:	f040 80f2 	bne.w	2090c <configure+0x224>
		LOG_ERR("Word sizes other than 8 bits are not supported");
		return -EINVAL;
	}

	if (spi_cfg->frequency < 125000) {
   20728:	6822      	ldr	r2, [r4, #0]
   2072a:	4baf      	ldr	r3, [pc, #700]	; (209e8 <configure+0x300>)
   2072c:	429a      	cmp	r2, r3
   2072e:	f240 811b 	bls.w	20968 <configure+0x280>
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
		return -EINVAL;
	}

	config = dev_config->def_config;
   20732:	f107 0c0c 	add.w	ip, r7, #12
   20736:	f106 0e08 	add.w	lr, r6, #8
   2073a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   2073e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   20742:	f8de 3000 	ldr.w	r3, [lr]
   20746:	f8cc 3000 	str.w	r3, [ip]

	config.frequency = get_nrf_spi_frequency(spi_cfg->frequency);
   2074a:	6820      	ldr	r0, [r4, #0]
   2074c:	f7ff ff38 	bl	205c0 <get_nrf_spi_frequency>
   20750:	6178      	str	r0, [r7, #20]
	config.mode      = get_nrf_spi_mode(spi_cfg->operation);
   20752:	88a3      	ldrh	r3, [r4, #4]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   20754:	f013 0f02 	tst.w	r3, #2
   20758:	f000 8134 	beq.w	209c4 <configure+0x2dc>
		if (SPI_MODE_GET(operation) & SPI_MODE_CPHA) {
   2075c:	f013 0f04 	tst.w	r3, #4
   20760:	f000 8135 	beq.w	209ce <configure+0x2e6>
			return NRF_SPI_MODE_3;
   20764:	2303      	movs	r3, #3
	config.mode      = get_nrf_spi_mode(spi_cfg->operation);
   20766:	763b      	strb	r3, [r7, #24]
	config.bit_order = get_nrf_spi_bit_order(spi_cfg->operation);
   20768:	88a3      	ldrh	r3, [r4, #4]
	if (operation & SPI_TRANSFER_LSB) {
   2076a:	f013 0f10 	tst.w	r3, #16
   2076e:	f000 8132 	beq.w	209d6 <configure+0x2ee>
		return NRF_SPI_BIT_ORDER_LSB_FIRST;
   20772:	2301      	movs	r3, #1
	config.bit_order = get_nrf_spi_bit_order(spi_cfg->operation);
   20774:	767b      	strb	r3, [r7, #25]

	if (dev_data->initialized) {
   20776:	f1b8 0f00 	cmp.w	r8, #0
   2077a:	f040 812e 	bne.w	209da <configure+0x2f2>
		nrfx_spi_uninit(&dev_config->spi);
		dev_data->initialized = false;
	}

	result = nrfx_spi_init(&dev_config->spi, &config,
   2077e:	462b      	mov	r3, r5
   20780:	4a9a      	ldr	r2, [pc, #616]	; (209ec <configure+0x304>)
   20782:	f107 010c 	add.w	r1, r7, #12
   20786:	4630      	mov	r0, r6
   20788:	f003 fe32 	bl	243f0 <nrfx_spi_init>
   2078c:	4606      	mov	r6, r0
			       event_handler, dev_data);
	if (result != NRFX_SUCCESS) {
   2078e:	4b98      	ldr	r3, [pc, #608]	; (209f0 <configure+0x308>)
   20790:	4298      	cmp	r0, r3
   20792:	f040 813b 	bne.w	20a0c <configure+0x324>
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
		return -EIO;
	}

	dev_data->initialized = true;
   20796:	2301      	movs	r3, #1
   20798:	f885 306d 	strb.w	r3, [r5, #109]	; 0x6d

	ctx->config = spi_cfg;
   2079c:	602c      	str	r4, [r5, #0]

	return 0;
   2079e:	2000      	movs	r0, #0
}
   207a0:	3720      	adds	r7, #32
   207a2:	46bd      	mov	sp, r7
   207a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERR("Half-duplex not supported");
   207a8:	2006      	movs	r0, #6
   207aa:	f7f5 fb0d 	bl	15dc8 <z_log_msg_alloc>
   207ae:	2200      	movs	r2, #0
   207b0:	f36f 0200 	bfc	r2, #0, #1
   207b4:	f36f 0241 	bfc	r2, #1, #1
   207b8:	f36f 0282 	bfc	r2, #2, #1
   207bc:	f36f 02c5 	bfc	r2, #3, #3
   207c0:	2301      	movs	r3, #1
   207c2:	f363 1288 	bfi	r2, r3, #6, #3
   207c6:	2308      	movs	r3, #8
   207c8:	f363 2252 	bfi	r2, r3, #9, #10
   207cc:	f36f 42de 	bfc	r2, #19, #12
   207d0:	f36f 72df 	bfc	r2, #31, #1
   207d4:	4604      	mov	r4, r0
   207d6:	b168      	cbz	r0, 207f4 <configure+0x10c>
   207d8:	f110 0310 	adds.w	r3, r0, #16
   207dc:	d001      	beq.n	207e2 <configure+0xfa>
   207de:	4985      	ldr	r1, [pc, #532]	; (209f4 <configure+0x30c>)
   207e0:	6141      	str	r1, [r0, #20]
   207e2:	b13b      	cbz	r3, 207f4 <configure+0x10c>
   207e4:	2302      	movs	r3, #2
   207e6:	723b      	strb	r3, [r7, #8]
   207e8:	2300      	movs	r3, #0
   207ea:	727b      	strb	r3, [r7, #9]
   207ec:	72bb      	strb	r3, [r7, #10]
   207ee:	72fb      	strb	r3, [r7, #11]
   207f0:	68b8      	ldr	r0, [r7, #8]
   207f2:	6120      	str	r0, [r4, #16]
   207f4:	2300      	movs	r3, #0
   207f6:	4980      	ldr	r1, [pc, #512]	; (209f8 <configure+0x310>)
   207f8:	4620      	mov	r0, r4
   207fa:	f007 faf0 	bl	27dde <z_log_msg_finalize>
		return -ENOTSUP;
   207fe:	f06f 0085 	mvn.w	r0, #133	; 0x85
   20802:	e7cd      	b.n	207a0 <configure+0xb8>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
   20804:	6801      	ldr	r1, [r0, #0]
   20806:	466d      	mov	r5, sp
   20808:	2300      	movs	r3, #0
   2080a:	723b      	strb	r3, [r7, #8]
   2080c:	2302      	movs	r3, #2
   2080e:	727b      	strb	r3, [r7, #9]
   20810:	b088      	sub	sp, #32
   20812:	466c      	mov	r4, sp
   20814:	f114 0210 	adds.w	r2, r4, #16
   20818:	d011      	beq.n	2083e <configure+0x156>
   2081a:	200e      	movs	r0, #14
   2081c:	b11a      	cbz	r2, 20826 <configure+0x13e>
   2081e:	2804      	cmp	r0, #4
   20820:	dd01      	ble.n	20826 <configure+0x13e>
   20822:	4b76      	ldr	r3, [pc, #472]	; (209fc <configure+0x314>)
   20824:	6163      	str	r3, [r4, #20]
   20826:	2300      	movs	r3, #0
   20828:	713b      	strb	r3, [r7, #4]
   2082a:	2302      	movs	r3, #2
   2082c:	717b      	strb	r3, [r7, #5]
   2082e:	b19a      	cbz	r2, 20858 <configure+0x170>
   20830:	2808      	cmp	r0, #8
   20832:	dd00      	ble.n	20836 <configure+0x14e>
   20834:	61a1      	str	r1, [r4, #24]
   20836:	f104 031c 	add.w	r3, r4, #28
   2083a:	2100      	movs	r1, #0
   2083c:	e00a      	b.n	20854 <configure+0x16c>
   2083e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   20842:	e7eb      	b.n	2081c <configure+0x134>
   20844:	f101 0620 	add.w	r6, r1, #32
   20848:	443e      	add	r6, r7
   2084a:	f816 6c1c 	ldrb.w	r6, [r6, #-28]
   2084e:	f803 6b01 	strb.w	r6, [r3], #1
   20852:	3101      	adds	r1, #1
   20854:	2901      	cmp	r1, #1
   20856:	d9f5      	bls.n	20844 <configure+0x15c>
   20858:	280d      	cmp	r0, #13
   2085a:	dd26      	ble.n	208aa <configure+0x1c2>
   2085c:	230e      	movs	r3, #14
   2085e:	b142      	cbz	r2, 20872 <configure+0x18a>
   20860:	2103      	movs	r1, #3
   20862:	7239      	strb	r1, [r7, #8]
   20864:	2100      	movs	r1, #0
   20866:	7279      	strb	r1, [r7, #9]
   20868:	72b9      	strb	r1, [r7, #10]
   2086a:	2101      	movs	r1, #1
   2086c:	72f9      	strb	r1, [r7, #11]
   2086e:	68b8      	ldr	r0, [r7, #8]
   20870:	6120      	str	r0, [r4, #16]
   20872:	2100      	movs	r1, #0
   20874:	f36f 0100 	bfc	r1, #0, #1
   20878:	f36f 0141 	bfc	r1, #1, #1
   2087c:	f36f 0182 	bfc	r1, #2, #1
   20880:	f36f 01c5 	bfc	r1, #3, #3
   20884:	2001      	movs	r0, #1
   20886:	f360 1188 	bfi	r1, r0, #6, #3
   2088a:	f3c3 0309 	ubfx	r3, r3, #0, #10
   2088e:	f363 2152 	bfi	r1, r3, #9, #10
   20892:	f36f 41de 	bfc	r1, #19, #12
   20896:	f36f 71df 	bfc	r1, #31, #1
   2089a:	2300      	movs	r3, #0
   2089c:	4856      	ldr	r0, [pc, #344]	; (209f8 <configure+0x310>)
   2089e:	f007 fab6 	bl	27e0e <z_impl_z_log_msg_static_create>
   208a2:	46ad      	mov	sp, r5
		return -EINVAL;
   208a4:	f06f 0015 	mvn.w	r0, #21
   208a8:	e77a      	b.n	207a0 <configure+0xb8>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
   208aa:	f06f 031b 	mvn.w	r3, #27
   208ae:	e7d6      	b.n	2085e <configure+0x176>
		LOG_ERR("Loopback mode is not supported");
   208b0:	2006      	movs	r0, #6
   208b2:	f7f5 fa89 	bl	15dc8 <z_log_msg_alloc>
   208b6:	2200      	movs	r2, #0
   208b8:	f36f 0200 	bfc	r2, #0, #1
   208bc:	f36f 0241 	bfc	r2, #1, #1
   208c0:	f36f 0282 	bfc	r2, #2, #1
   208c4:	f36f 02c5 	bfc	r2, #3, #3
   208c8:	2301      	movs	r3, #1
   208ca:	f363 1288 	bfi	r2, r3, #6, #3
   208ce:	2308      	movs	r3, #8
   208d0:	f363 2252 	bfi	r2, r3, #9, #10
   208d4:	f36f 42de 	bfc	r2, #19, #12
   208d8:	f36f 72df 	bfc	r2, #31, #1
   208dc:	4604      	mov	r4, r0
   208de:	b168      	cbz	r0, 208fc <configure+0x214>
   208e0:	f110 0310 	adds.w	r3, r0, #16
   208e4:	d001      	beq.n	208ea <configure+0x202>
   208e6:	4946      	ldr	r1, [pc, #280]	; (20a00 <configure+0x318>)
   208e8:	6141      	str	r1, [r0, #20]
   208ea:	b13b      	cbz	r3, 208fc <configure+0x214>
   208ec:	2302      	movs	r3, #2
   208ee:	723b      	strb	r3, [r7, #8]
   208f0:	2300      	movs	r3, #0
   208f2:	727b      	strb	r3, [r7, #9]
   208f4:	72bb      	strb	r3, [r7, #10]
   208f6:	72fb      	strb	r3, [r7, #11]
   208f8:	68b8      	ldr	r0, [r7, #8]
   208fa:	6120      	str	r0, [r4, #16]
   208fc:	2300      	movs	r3, #0
   208fe:	493e      	ldr	r1, [pc, #248]	; (209f8 <configure+0x310>)
   20900:	4620      	mov	r0, r4
   20902:	f007 fa6c 	bl	27dde <z_log_msg_finalize>
		return -EINVAL;
   20906:	f06f 0015 	mvn.w	r0, #21
   2090a:	e749      	b.n	207a0 <configure+0xb8>
		LOG_ERR("Word sizes other than 8 bits are not supported");
   2090c:	2006      	movs	r0, #6
   2090e:	f7f5 fa5b 	bl	15dc8 <z_log_msg_alloc>
   20912:	2200      	movs	r2, #0
   20914:	f36f 0200 	bfc	r2, #0, #1
   20918:	f36f 0241 	bfc	r2, #1, #1
   2091c:	f36f 0282 	bfc	r2, #2, #1
   20920:	f36f 02c5 	bfc	r2, #3, #3
   20924:	2301      	movs	r3, #1
   20926:	f363 1288 	bfi	r2, r3, #6, #3
   2092a:	2308      	movs	r3, #8
   2092c:	f363 2252 	bfi	r2, r3, #9, #10
   20930:	f36f 42de 	bfc	r2, #19, #12
   20934:	f36f 72df 	bfc	r2, #31, #1
   20938:	4604      	mov	r4, r0
   2093a:	b168      	cbz	r0, 20958 <configure+0x270>
   2093c:	f110 0310 	adds.w	r3, r0, #16
   20940:	d001      	beq.n	20946 <configure+0x25e>
   20942:	4930      	ldr	r1, [pc, #192]	; (20a04 <configure+0x31c>)
   20944:	6141      	str	r1, [r0, #20]
   20946:	b13b      	cbz	r3, 20958 <configure+0x270>
   20948:	2302      	movs	r3, #2
   2094a:	723b      	strb	r3, [r7, #8]
   2094c:	2300      	movs	r3, #0
   2094e:	727b      	strb	r3, [r7, #9]
   20950:	72bb      	strb	r3, [r7, #10]
   20952:	72fb      	strb	r3, [r7, #11]
   20954:	68b8      	ldr	r0, [r7, #8]
   20956:	6120      	str	r0, [r4, #16]
   20958:	2300      	movs	r3, #0
   2095a:	4927      	ldr	r1, [pc, #156]	; (209f8 <configure+0x310>)
   2095c:	4620      	mov	r0, r4
   2095e:	f007 fa3e 	bl	27dde <z_log_msg_finalize>
		return -EINVAL;
   20962:	f06f 0015 	mvn.w	r0, #21
   20966:	e71b      	b.n	207a0 <configure+0xb8>
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
   20968:	2006      	movs	r0, #6
   2096a:	f7f5 fa2d 	bl	15dc8 <z_log_msg_alloc>
   2096e:	2200      	movs	r2, #0
   20970:	f36f 0200 	bfc	r2, #0, #1
   20974:	f36f 0241 	bfc	r2, #1, #1
   20978:	f36f 0282 	bfc	r2, #2, #1
   2097c:	f36f 02c5 	bfc	r2, #3, #3
   20980:	2301      	movs	r3, #1
   20982:	f363 1288 	bfi	r2, r3, #6, #3
   20986:	2308      	movs	r3, #8
   20988:	f363 2252 	bfi	r2, r3, #9, #10
   2098c:	f36f 42de 	bfc	r2, #19, #12
   20990:	f36f 72df 	bfc	r2, #31, #1
   20994:	4604      	mov	r4, r0
   20996:	b168      	cbz	r0, 209b4 <configure+0x2cc>
   20998:	f110 0310 	adds.w	r3, r0, #16
   2099c:	d001      	beq.n	209a2 <configure+0x2ba>
   2099e:	491a      	ldr	r1, [pc, #104]	; (20a08 <configure+0x320>)
   209a0:	6141      	str	r1, [r0, #20]
   209a2:	b13b      	cbz	r3, 209b4 <configure+0x2cc>
   209a4:	2302      	movs	r3, #2
   209a6:	723b      	strb	r3, [r7, #8]
   209a8:	2300      	movs	r3, #0
   209aa:	727b      	strb	r3, [r7, #9]
   209ac:	72bb      	strb	r3, [r7, #10]
   209ae:	72fb      	strb	r3, [r7, #11]
   209b0:	68b8      	ldr	r0, [r7, #8]
   209b2:	6120      	str	r0, [r4, #16]
   209b4:	2300      	movs	r3, #0
   209b6:	4910      	ldr	r1, [pc, #64]	; (209f8 <configure+0x310>)
   209b8:	4620      	mov	r0, r4
   209ba:	f007 fa10 	bl	27dde <z_log_msg_finalize>
		return -EINVAL;
   209be:	f06f 0015 	mvn.w	r0, #21
   209c2:	e6ed      	b.n	207a0 <configure+0xb8>
		if (SPI_MODE_GET(operation) & SPI_MODE_CPHA) {
   209c4:	f013 0f04 	tst.w	r3, #4
   209c8:	d003      	beq.n	209d2 <configure+0x2ea>
			return NRF_SPI_MODE_1;
   209ca:	2301      	movs	r3, #1
   209cc:	e6cb      	b.n	20766 <configure+0x7e>
			return NRF_SPI_MODE_2;
   209ce:	2302      	movs	r3, #2
   209d0:	e6c9      	b.n	20766 <configure+0x7e>
			return NRF_SPI_MODE_0;
   209d2:	2300      	movs	r3, #0
   209d4:	e6c7      	b.n	20766 <configure+0x7e>
		return NRF_SPI_BIT_ORDER_MSB_FIRST;
   209d6:	2300      	movs	r3, #0
   209d8:	e6cc      	b.n	20774 <configure+0x8c>
		nrfx_spi_uninit(&dev_config->spi);
   209da:	4630      	mov	r0, r6
   209dc:	f003 fd52 	bl	24484 <nrfx_spi_uninit>
		dev_data->initialized = false;
   209e0:	2300      	movs	r3, #0
   209e2:	f885 306d 	strb.w	r3, [r5, #109]	; 0x6d
   209e6:	e6ca      	b.n	2077e <configure+0x96>
   209e8:	0001e847 	.word	0x0001e847
   209ec:	00020af9 	.word	0x00020af9
   209f0:	0bad0000 	.word	0x0bad0000
   209f4:	00030980 	.word	0x00030980
   209f8:	0002df38 	.word	0x0002df38
   209fc:	0003099c 	.word	0x0003099c
   20a00:	000309c0 	.word	0x000309c0
   20a04:	000309e0 	.word	0x000309e0
   20a08:	00030a10 	.word	0x00030a10
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
   20a0c:	2008      	movs	r0, #8
   20a0e:	f7f5 f9db 	bl	15dc8 <z_log_msg_alloc>
   20a12:	2200      	movs	r2, #0
   20a14:	f36f 0200 	bfc	r2, #0, #1
   20a18:	f36f 0241 	bfc	r2, #1, #1
   20a1c:	f36f 0282 	bfc	r2, #2, #1
   20a20:	f36f 02c5 	bfc	r2, #3, #3
   20a24:	2301      	movs	r3, #1
   20a26:	f363 1288 	bfi	r2, r3, #6, #3
   20a2a:	230c      	movs	r3, #12
   20a2c:	f363 2252 	bfi	r2, r3, #9, #10
   20a30:	f36f 42de 	bfc	r2, #19, #12
   20a34:	f36f 72df 	bfc	r2, #31, #1
   20a38:	4604      	mov	r4, r0
   20a3a:	b170      	cbz	r0, 20a5a <configure+0x372>
   20a3c:	f110 0310 	adds.w	r3, r0, #16
   20a40:	d002      	beq.n	20a48 <configure+0x360>
   20a42:	490b      	ldr	r1, [pc, #44]	; (20a70 <configure+0x388>)
   20a44:	6141      	str	r1, [r0, #20]
   20a46:	6186      	str	r6, [r0, #24]
   20a48:	b13b      	cbz	r3, 20a5a <configure+0x372>
   20a4a:	2303      	movs	r3, #3
   20a4c:	723b      	strb	r3, [r7, #8]
   20a4e:	2300      	movs	r3, #0
   20a50:	727b      	strb	r3, [r7, #9]
   20a52:	72bb      	strb	r3, [r7, #10]
   20a54:	72fb      	strb	r3, [r7, #11]
   20a56:	68b8      	ldr	r0, [r7, #8]
   20a58:	6120      	str	r0, [r4, #16]
   20a5a:	2300      	movs	r3, #0
   20a5c:	4905      	ldr	r1, [pc, #20]	; (20a74 <configure+0x38c>)
   20a5e:	4620      	mov	r0, r4
   20a60:	f007 f9bd 	bl	27dde <z_log_msg_finalize>
		return -EIO;
   20a64:	f06f 0004 	mvn.w	r0, #4
   20a68:	e69a      	b.n	207a0 <configure+0xb8>
		return 0;
   20a6a:	2000      	movs	r0, #0
   20a6c:	e698      	b.n	207a0 <configure+0xb8>
   20a6e:	bf00      	nop
   20a70:	00030a44 	.word	0x00030a44
   20a74:	0002df38 	.word	0x0002df38

00020a78 <transfer_next_chunk>:

static void transfer_next_chunk(const struct device *dev)
{
   20a78:	b530      	push	{r4, r5, lr}
   20a7a:	b085      	sub	sp, #20
   20a7c:	4603      	mov	r3, r0
	const struct spi_nrfx_config *dev_config = dev->config;
   20a7e:	6840      	ldr	r0, [r0, #4]
	struct spi_nrfx_data *dev_data = dev->data;
   20a80:	691c      	ldr	r4, [r3, #16]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
   20a82:	6da2      	ldr	r2, [r4, #88]	; 0x58
   20a84:	b352      	cbz	r2, 20adc <transfer_next_chunk+0x64>
		return ctx->rx_len;
	} else if (!ctx->rx_len) {
   20a86:	6e23      	ldr	r3, [r4, #96]	; 0x60
   20a88:	b353      	cbz	r3, 20ae0 <transfer_next_chunk+0x68>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
   20a8a:	4293      	cmp	r3, r2
   20a8c:	bf28      	it	cs
   20a8e:	4613      	movcs	r3, r2
	struct spi_context *ctx = &dev_data->ctx;
	int error = 0;

	size_t chunk_len = spi_context_max_continuous_chunk(ctx);

	if (chunk_len > 0) {
   20a90:	b373      	cbz	r3, 20af0 <transfer_next_chunk+0x78>
		nrfx_spi_xfer_desc_t xfer;
		nrfx_err_t result;

		dev_data->chunk_len = chunk_len;
   20a92:	66a3      	str	r3, [r4, #104]	; 0x68

		xfer.p_tx_buffer = ctx->tx_buf;
   20a94:	6d61      	ldr	r1, [r4, #84]	; 0x54
   20a96:	9100      	str	r1, [sp, #0]
	return !!(ctx->tx_buf && ctx->tx_len);
   20a98:	b321      	cbz	r1, 20ae4 <transfer_next_chunk+0x6c>
   20a9a:	bb2a      	cbnz	r2, 20ae8 <transfer_next_chunk+0x70>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   20a9c:	9201      	str	r2, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
   20a9e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   20aa0:	9202      	str	r2, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
   20aa2:	b31a      	cbz	r2, 20aec <transfer_next_chunk+0x74>
   20aa4:	6e22      	ldr	r2, [r4, #96]	; 0x60
   20aa6:	b902      	cbnz	r2, 20aaa <transfer_next_chunk+0x32>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   20aa8:	4613      	mov	r3, r2
   20aaa:	9303      	str	r3, [sp, #12]
		result = nrfx_spi_xfer(&dev_config->spi, &xfer, 0);
   20aac:	2200      	movs	r2, #0
   20aae:	4669      	mov	r1, sp
   20ab0:	f003 fd5c 	bl	2456c <nrfx_spi_xfer>
		if (result == NRFX_SUCCESS) {
   20ab4:	4b0f      	ldr	r3, [pc, #60]	; (20af4 <transfer_next_chunk+0x7c>)
   20ab6:	4298      	cmp	r0, r3
   20ab8:	d00e      	beq.n	20ad8 <transfer_next_chunk+0x60>
			return;
		}

		error = -EIO;
   20aba:	f06f 0504 	mvn.w	r5, #4
	_spi_context_cs_control(ctx, on, false);
   20abe:	2200      	movs	r2, #0
   20ac0:	4611      	mov	r1, r2
   20ac2:	4620      	mov	r0, r4
   20ac4:	f00a fe00 	bl	2b6c8 <_spi_context_cs_control>
	ctx->sync_status = status;
   20ac8:	6425      	str	r5, [r4, #64]	; 0x40
	k_sem_give(&ctx->sync);
   20aca:	f104 0028 	add.w	r0, r4, #40	; 0x28
	z_impl_k_sem_give(sem);
   20ace:	f004 fb7f 	bl	251d0 <z_impl_k_sem_give>
	spi_context_cs_control(ctx, false);

	LOG_DBG("Transaction finished with status %d", error);

	spi_context_complete(ctx, dev, error);
	dev_data->busy = false;
   20ad2:	2300      	movs	r3, #0
   20ad4:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
}
   20ad8:	b005      	add	sp, #20
   20ada:	bd30      	pop	{r4, r5, pc}
		return ctx->rx_len;
   20adc:	6e23      	ldr	r3, [r4, #96]	; 0x60
   20ade:	e7d7      	b.n	20a90 <transfer_next_chunk+0x18>
		return ctx->tx_len;
   20ae0:	4613      	mov	r3, r2
   20ae2:	e7d5      	b.n	20a90 <transfer_next_chunk+0x18>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   20ae4:	2200      	movs	r2, #0
   20ae6:	e7d9      	b.n	20a9c <transfer_next_chunk+0x24>
   20ae8:	461a      	mov	r2, r3
   20aea:	e7d7      	b.n	20a9c <transfer_next_chunk+0x24>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   20aec:	2300      	movs	r3, #0
   20aee:	e7dc      	b.n	20aaa <transfer_next_chunk+0x32>
	int error = 0;
   20af0:	2500      	movs	r5, #0
   20af2:	e7e4      	b.n	20abe <transfer_next_chunk+0x46>
   20af4:	0bad0000 	.word	0x0bad0000

00020af8 <event_handler>:

static void event_handler(const nrfx_spi_evt_t *p_event, void *p_context)
{
	struct spi_nrfx_data *dev_data = p_context;

	if (p_event->type == NRFX_SPI_EVENT_DONE) {
   20af8:	7803      	ldrb	r3, [r0, #0]
   20afa:	2b00      	cmp	r3, #0
   20afc:	f040 80a0 	bne.w	20c40 <event_handler+0x148>
{
   20b00:	b510      	push	{r4, lr}
   20b02:	b082      	sub	sp, #8
   20b04:	460c      	mov	r4, r1
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
   20b06:	6e8a      	ldr	r2, [r1, #104]	; 0x68
	if (!ctx->tx_len) {
   20b08:	6d8b      	ldr	r3, [r1, #88]	; 0x58
   20b0a:	b14b      	cbz	r3, 20b20 <event_handler+0x28>
	if (len > ctx->tx_len) {
   20b0c:	429a      	cmp	r2, r3
   20b0e:	d819      	bhi.n	20b44 <event_handler+0x4c>
	ctx->tx_len -= len;
   20b10:	1a9b      	subs	r3, r3, r2
   20b12:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->tx_len) {
   20b14:	2b00      	cmp	r3, #0
   20b16:	d045      	beq.n	20ba4 <event_handler+0xac>
	} else if (ctx->tx_buf) {
   20b18:	6d4b      	ldr	r3, [r1, #84]	; 0x54
   20b1a:	b10b      	cbz	r3, 20b20 <event_handler+0x28>
		ctx->tx_buf += dfs * len;
   20b1c:	4413      	add	r3, r2
   20b1e:	654b      	str	r3, [r1, #84]	; 0x54
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
   20b20:	6ea2      	ldr	r2, [r4, #104]	; 0x68
	if (!ctx->rx_len) {
   20b22:	6e23      	ldr	r3, [r4, #96]	; 0x60
   20b24:	b14b      	cbz	r3, 20b3a <event_handler+0x42>
	if (len > ctx->rx_len) {
   20b26:	429a      	cmp	r2, r3
   20b28:	d84c      	bhi.n	20bc4 <event_handler+0xcc>
	ctx->rx_len -= len;
   20b2a:	1a9b      	subs	r3, r3, r2
   20b2c:	6623      	str	r3, [r4, #96]	; 0x60
	if (!ctx->rx_len) {
   20b2e:	2b00      	cmp	r3, #0
   20b30:	d075      	beq.n	20c1e <event_handler+0x126>
	} else if (ctx->rx_buf) {
   20b32:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   20b34:	b10b      	cbz	r3, 20b3a <event_handler+0x42>
		ctx->rx_buf += dfs * len;
   20b36:	4413      	add	r3, r2
   20b38:	65e3      	str	r3, [r4, #92]	; 0x5c

		transfer_next_chunk(dev_data->dev);
   20b3a:	6e60      	ldr	r0, [r4, #100]	; 0x64
   20b3c:	f7ff ff9c 	bl	20a78 <transfer_next_chunk>
	}
}
   20b40:	b002      	add	sp, #8
   20b42:	bd10      	pop	{r4, pc}
		LOG_ERR("Update exceeds current buffer");
   20b44:	2006      	movs	r0, #6
   20b46:	f7f5 f93f 	bl	15dc8 <z_log_msg_alloc>
   20b4a:	2200      	movs	r2, #0
   20b4c:	f36f 0200 	bfc	r2, #0, #1
   20b50:	f36f 0241 	bfc	r2, #1, #1
   20b54:	f36f 0282 	bfc	r2, #2, #1
   20b58:	f36f 02c5 	bfc	r2, #3, #3
   20b5c:	2301      	movs	r3, #1
   20b5e:	f363 1288 	bfi	r2, r3, #6, #3
   20b62:	2308      	movs	r3, #8
   20b64:	f363 2252 	bfi	r2, r3, #9, #10
   20b68:	f36f 42de 	bfc	r2, #19, #12
   20b6c:	f36f 72df 	bfc	r2, #31, #1
   20b70:	4684      	mov	ip, r0
   20b72:	b188      	cbz	r0, 20b98 <event_handler+0xa0>
   20b74:	4b33      	ldr	r3, [pc, #204]	; (20c44 <event_handler+0x14c>)
   20b76:	6143      	str	r3, [r0, #20]
   20b78:	f110 0f10 	cmn.w	r0, #16
   20b7c:	d00c      	beq.n	20b98 <event_handler+0xa0>
   20b7e:	2302      	movs	r3, #2
   20b80:	f88d 3004 	strb.w	r3, [sp, #4]
   20b84:	2300      	movs	r3, #0
   20b86:	f88d 3005 	strb.w	r3, [sp, #5]
   20b8a:	f88d 3006 	strb.w	r3, [sp, #6]
   20b8e:	f88d 3007 	strb.w	r3, [sp, #7]
   20b92:	9801      	ldr	r0, [sp, #4]
   20b94:	f8cc 0010 	str.w	r0, [ip, #16]
   20b98:	2300      	movs	r3, #0
   20b9a:	492b      	ldr	r1, [pc, #172]	; (20c48 <event_handler+0x150>)
   20b9c:	4660      	mov	r0, ip
   20b9e:	f007 f91e 	bl	27dde <z_log_msg_finalize>
		return;
   20ba2:	e7bd      	b.n	20b20 <event_handler+0x28>
		++ctx->current_tx;
   20ba4:	6c4b      	ldr	r3, [r1, #68]	; 0x44
   20ba6:	3308      	adds	r3, #8
   20ba8:	644b      	str	r3, [r1, #68]	; 0x44
		--ctx->tx_count;
   20baa:	6c8b      	ldr	r3, [r1, #72]	; 0x48
   20bac:	3b01      	subs	r3, #1
   20bae:	648b      	str	r3, [r1, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
   20bb0:	2301      	movs	r3, #1
   20bb2:	f101 0258 	add.w	r2, r1, #88	; 0x58
   20bb6:	3148      	adds	r1, #72	; 0x48
   20bb8:	f104 0044 	add.w	r0, r4, #68	; 0x44
   20bbc:	f00a fd3d 	bl	2b63a <spi_context_get_next_buf>
		ctx->tx_buf = (const uint8_t *)
   20bc0:	6560      	str	r0, [r4, #84]	; 0x54
   20bc2:	e7ad      	b.n	20b20 <event_handler+0x28>
		LOG_ERR("Update exceeds current buffer");
   20bc4:	2006      	movs	r0, #6
   20bc6:	f7f5 f8ff 	bl	15dc8 <z_log_msg_alloc>
   20bca:	2200      	movs	r2, #0
   20bcc:	f36f 0200 	bfc	r2, #0, #1
   20bd0:	f36f 0241 	bfc	r2, #1, #1
   20bd4:	f36f 0282 	bfc	r2, #2, #1
   20bd8:	f36f 02c5 	bfc	r2, #3, #3
   20bdc:	2301      	movs	r3, #1
   20bde:	f363 1288 	bfi	r2, r3, #6, #3
   20be2:	2308      	movs	r3, #8
   20be4:	f363 2252 	bfi	r2, r3, #9, #10
   20be8:	f36f 42de 	bfc	r2, #19, #12
   20bec:	f36f 72df 	bfc	r2, #31, #1
   20bf0:	4684      	mov	ip, r0
   20bf2:	b170      	cbz	r0, 20c12 <event_handler+0x11a>
   20bf4:	4b13      	ldr	r3, [pc, #76]	; (20c44 <event_handler+0x14c>)
   20bf6:	6143      	str	r3, [r0, #20]
   20bf8:	2302      	movs	r3, #2
   20bfa:	f88d 3004 	strb.w	r3, [sp, #4]
   20bfe:	2300      	movs	r3, #0
   20c00:	f88d 3005 	strb.w	r3, [sp, #5]
   20c04:	f88d 3006 	strb.w	r3, [sp, #6]
   20c08:	f88d 3007 	strb.w	r3, [sp, #7]
   20c0c:	9801      	ldr	r0, [sp, #4]
   20c0e:	f8cc 0010 	str.w	r0, [ip, #16]
   20c12:	2300      	movs	r3, #0
   20c14:	490c      	ldr	r1, [pc, #48]	; (20c48 <event_handler+0x150>)
   20c16:	4660      	mov	r0, ip
   20c18:	f007 f8e1 	bl	27dde <z_log_msg_finalize>
		return;
   20c1c:	e78d      	b.n	20b3a <event_handler+0x42>
		++ctx->current_rx;
   20c1e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   20c20:	3308      	adds	r3, #8
   20c22:	64e3      	str	r3, [r4, #76]	; 0x4c
		--ctx->rx_count;
   20c24:	6d23      	ldr	r3, [r4, #80]	; 0x50
   20c26:	3b01      	subs	r3, #1
   20c28:	6523      	str	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
   20c2a:	2301      	movs	r3, #1
   20c2c:	f104 0260 	add.w	r2, r4, #96	; 0x60
   20c30:	f104 0150 	add.w	r1, r4, #80	; 0x50
   20c34:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   20c38:	f00a fcff 	bl	2b63a <spi_context_get_next_buf>
		ctx->rx_buf = (uint8_t *)
   20c3c:	65e0      	str	r0, [r4, #92]	; 0x5c
   20c3e:	e77c      	b.n	20b3a <event_handler+0x42>
   20c40:	4770      	bx	lr
   20c42:	bf00      	nop
   20c44:	00030a6c 	.word	0x00030a6c
   20c48:	0002df38 	.word	0x0002df38

00020c4c <spi_context_cs_configure_all>:
{
   20c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   20c4e:	b083      	sub	sp, #12
   20c50:	af00      	add	r7, sp, #0
   20c52:	4605      	mov	r5, r0
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   20c54:	6884      	ldr	r4, [r0, #8]
   20c56:	e05d      	b.n	20d14 <spi_context_cs_configure_all+0xc8>
			LOG_ERR("CS GPIO port %s pin %d is not ready",
   20c58:	6823      	ldr	r3, [r4, #0]
   20c5a:	681e      	ldr	r6, [r3, #0]
   20c5c:	7921      	ldrb	r1, [r4, #4]
   20c5e:	466d      	mov	r5, sp
   20c60:	2300      	movs	r3, #0
   20c62:	713b      	strb	r3, [r7, #4]
   20c64:	2302      	movs	r3, #2
   20c66:	717b      	strb	r3, [r7, #5]
   20c68:	b08a      	sub	sp, #40	; 0x28
   20c6a:	466c      	mov	r4, sp
   20c6c:	f114 0210 	adds.w	r2, r4, #16
   20c70:	d015      	beq.n	20c9e <spi_context_cs_configure_all+0x52>
   20c72:	2012      	movs	r0, #18
   20c74:	b11a      	cbz	r2, 20c7e <spi_context_cs_configure_all+0x32>
   20c76:	2804      	cmp	r0, #4
   20c78:	dd01      	ble.n	20c7e <spi_context_cs_configure_all+0x32>
   20c7a:	4b32      	ldr	r3, [pc, #200]	; (20d44 <spi_context_cs_configure_all+0xf8>)
   20c7c:	6163      	str	r3, [r4, #20]
   20c7e:	2300      	movs	r3, #0
   20c80:	703b      	strb	r3, [r7, #0]
   20c82:	2302      	movs	r3, #2
   20c84:	707b      	strb	r3, [r7, #1]
   20c86:	b1c2      	cbz	r2, 20cba <spi_context_cs_configure_all+0x6e>
   20c88:	4603      	mov	r3, r0
   20c8a:	2808      	cmp	r0, #8
   20c8c:	dd00      	ble.n	20c90 <spi_context_cs_configure_all+0x44>
   20c8e:	61a6      	str	r6, [r4, #24]
   20c90:	2b0c      	cmp	r3, #12
   20c92:	dd00      	ble.n	20c96 <spi_context_cs_configure_all+0x4a>
   20c94:	61e1      	str	r1, [r4, #28]
   20c96:	f104 0320 	add.w	r3, r4, #32
   20c9a:	2100      	movs	r1, #0
   20c9c:	e00b      	b.n	20cb6 <spi_context_cs_configure_all+0x6a>
   20c9e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   20ca2:	e7e7      	b.n	20c74 <spi_context_cs_configure_all+0x28>
   20ca4:	f101 0608 	add.w	r6, r1, #8
   20ca8:	eb06 0c07 	add.w	ip, r6, r7
   20cac:	f81c cc08 	ldrb.w	ip, [ip, #-8]
   20cb0:	f803 cb01 	strb.w	ip, [r3], #1
   20cb4:	3101      	adds	r1, #1
   20cb6:	2901      	cmp	r1, #1
   20cb8:	d9f4      	bls.n	20ca4 <spi_context_cs_configure_all+0x58>
   20cba:	2811      	cmp	r0, #17
   20cbc:	dd26      	ble.n	20d0c <spi_context_cs_configure_all+0xc0>
   20cbe:	2312      	movs	r3, #18
   20cc0:	b142      	cbz	r2, 20cd4 <spi_context_cs_configure_all+0x88>
   20cc2:	2104      	movs	r1, #4
   20cc4:	7139      	strb	r1, [r7, #4]
   20cc6:	2100      	movs	r1, #0
   20cc8:	7179      	strb	r1, [r7, #5]
   20cca:	71b9      	strb	r1, [r7, #6]
   20ccc:	2101      	movs	r1, #1
   20cce:	71f9      	strb	r1, [r7, #7]
   20cd0:	6878      	ldr	r0, [r7, #4]
   20cd2:	6120      	str	r0, [r4, #16]
   20cd4:	2100      	movs	r1, #0
   20cd6:	f36f 0100 	bfc	r1, #0, #1
   20cda:	f36f 0141 	bfc	r1, #1, #1
   20cde:	f36f 0182 	bfc	r1, #2, #1
   20ce2:	f36f 01c5 	bfc	r1, #3, #3
   20ce6:	2001      	movs	r0, #1
   20ce8:	f360 1188 	bfi	r1, r0, #6, #3
   20cec:	f3c3 0309 	ubfx	r3, r3, #0, #10
   20cf0:	f363 2152 	bfi	r1, r3, #9, #10
   20cf4:	f36f 41de 	bfc	r1, #19, #12
   20cf8:	f36f 71df 	bfc	r1, #31, #1
   20cfc:	2300      	movs	r3, #0
   20cfe:	4812      	ldr	r0, [pc, #72]	; (20d48 <spi_context_cs_configure_all+0xfc>)
   20d00:	f007 f885 	bl	27e0e <z_impl_z_log_msg_static_create>
   20d04:	46ad      	mov	sp, r5
			return -ENODEV;
   20d06:	f06f 0012 	mvn.w	r0, #18
   20d0a:	e017      	b.n	20d3c <spi_context_cs_configure_all+0xf0>
			LOG_ERR("CS GPIO port %s pin %d is not ready",
   20d0c:	f06f 031b 	mvn.w	r3, #27
   20d10:	e7d6      	b.n	20cc0 <spi_context_cs_configure_all+0x74>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   20d12:	3408      	adds	r4, #8
   20d14:	68ab      	ldr	r3, [r5, #8]
   20d16:	68ea      	ldr	r2, [r5, #12]
   20d18:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   20d1c:	429c      	cmp	r4, r3
   20d1e:	d20c      	bcs.n	20d3a <spi_context_cs_configure_all+0xee>
		if (!device_is_ready(cs_gpio->port)) {
   20d20:	6820      	ldr	r0, [r4, #0]
   20d22:	f00b ff12 	bl	2cb4a <z_device_is_ready>
   20d26:	2800      	cmp	r0, #0
   20d28:	d096      	beq.n	20c58 <spi_context_cs_configure_all+0xc>
		ret = gpio_pin_configure_dt(cs_gpio, GPIO_OUTPUT_INACTIVE);
   20d2a:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
   20d2e:	4620      	mov	r0, r4
   20d30:	f00a fc5b 	bl	2b5ea <gpio_pin_configure_dt>
		if (ret < 0) {
   20d34:	2800      	cmp	r0, #0
   20d36:	daec      	bge.n	20d12 <spi_context_cs_configure_all+0xc6>
   20d38:	e000      	b.n	20d3c <spi_context_cs_configure_all+0xf0>
	return 0;
   20d3a:	2000      	movs	r0, #0
}
   20d3c:	370c      	adds	r7, #12
   20d3e:	46bd      	mov	sp, r7
   20d40:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20d42:	bf00      	nop
   20d44:	00030a8c 	.word	0x00030a8c
   20d48:	0002df38 	.word	0x0002df38

00020d4c <update_sampling_pnt>:
}

static int update_sampling_pnt(uint32_t ts, uint32_t sp, struct can_timing *res,
			       const struct can_timing *max,
			       const struct can_timing *min)
{
   20d4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20d50:	9f07      	ldr	r7, [sp, #28]
	uint16_t ts1_max = max->phase_seg1 + max->prop_seg;
   20d52:	f8b3 c004 	ldrh.w	ip, [r3, #4]
   20d56:	f8b3 8002 	ldrh.w	r8, [r3, #2]
   20d5a:	44c4      	add	ip, r8
   20d5c:	fa1f fc8c 	uxth.w	ip, ip
	uint16_t ts1_min = min->phase_seg1 + min->prop_seg;
   20d60:	88bd      	ldrh	r5, [r7, #4]
   20d62:	887c      	ldrh	r4, [r7, #2]
   20d64:	4425      	add	r5, r4
   20d66:	b2ad      	uxth	r5, r5
	uint32_t sp_calc;
	uint16_t ts1, ts2;

	ts2 = ts - (ts * sp) / 1000;
   20d68:	b286      	uxth	r6, r0
   20d6a:	fb01 fe00 	mul.w	lr, r1, r0
   20d6e:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 20e14 <update_sampling_pnt+0xc8>
   20d72:	fba9 9e0e 	umull	r9, lr, r9, lr
   20d76:	f3ce 1e8f 	ubfx	lr, lr, #6, #16
   20d7a:	eba6 0e0e 	sub.w	lr, r6, lr
   20d7e:	fa1f fe8e 	uxth.w	lr, lr
	ts2 = CLAMP(ts2, min->phase_seg2, max->phase_seg2);
   20d82:	f8b7 9006 	ldrh.w	r9, [r7, #6]
   20d86:	45f1      	cmp	r9, lr
   20d88:	d22f      	bcs.n	20dea <update_sampling_pnt+0x9e>
   20d8a:	88df      	ldrh	r7, [r3, #6]
   20d8c:	45be      	cmp	lr, r7
   20d8e:	bf28      	it	cs
   20d90:	46be      	movcs	lr, r7
	ts1 = ts - CAN_SYNC_SEG - ts2;
   20d92:	eba6 070e 	sub.w	r7, r6, lr
   20d96:	b2bf      	uxth	r7, r7
   20d98:	3f01      	subs	r7, #1
   20d9a:	b2bf      	uxth	r7, r7

	if (ts1 > ts1_max) {
   20d9c:	45bc      	cmp	ip, r7
   20d9e:	d226      	bcs.n	20dee <update_sampling_pnt+0xa2>
		ts1 = ts1_max;
		ts2 = ts - CAN_SYNC_SEG - ts1;
   20da0:	eba6 0e0c 	sub.w	lr, r6, ip
   20da4:	fa1f fe8e 	uxth.w	lr, lr
   20da8:	f10e 3eff 	add.w	lr, lr, #4294967295
   20dac:	fa1f fe8e 	uxth.w	lr, lr
		if (ts2 > max->phase_seg2) {
   20db0:	88db      	ldrh	r3, [r3, #6]
   20db2:	4573      	cmp	r3, lr
   20db4:	d328      	bcc.n	20e08 <update_sampling_pnt+0xbc>
		if (ts2 < min->phase_seg2) {
			return -1;
		}
	}

	res->prop_seg = CLAMP(ts1 / 2, min->prop_seg, max->prop_seg);
   20db6:	ea4f 035c 	mov.w	r3, ip, lsr #1
   20dba:	ebb4 0f5c 	cmp.w	r4, ip, lsr #1
   20dbe:	d203      	bcs.n	20dc8 <update_sampling_pnt+0x7c>
   20dc0:	4644      	mov	r4, r8
   20dc2:	4598      	cmp	r8, r3
   20dc4:	bf28      	it	cs
   20dc6:	461c      	movcs	r4, r3
   20dc8:	8054      	strh	r4, [r2, #2]
	res->phase_seg1 = ts1 - res->prop_seg;
   20dca:	ebac 0404 	sub.w	r4, ip, r4
   20dce:	8094      	strh	r4, [r2, #4]
	res->phase_seg2 = ts2;
   20dd0:	f8a2 e006 	strh.w	lr, [r2, #6]

	sp_calc = (CAN_SYNC_SEG + ts1) * 1000 / ts;
   20dd4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   20dd8:	fb0c 3303 	mla	r3, ip, r3, r3
   20ddc:	fbb3 f0f0 	udiv	r0, r3, r0

	return sp_calc > sp ? sp_calc - sp : sp - sp_calc;
   20de0:	4281      	cmp	r1, r0
   20de2:	d20f      	bcs.n	20e04 <update_sampling_pnt+0xb8>
   20de4:	1a40      	subs	r0, r0, r1
}
   20de6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	ts2 = CLAMP(ts2, min->phase_seg2, max->phase_seg2);
   20dea:	46ce      	mov	lr, r9
   20dec:	e7d1      	b.n	20d92 <update_sampling_pnt+0x46>
	} else if (ts1 < ts1_min) {
   20dee:	42bd      	cmp	r5, r7
   20df0:	d906      	bls.n	20e00 <update_sampling_pnt+0xb4>
		ts2 = ts - ts1;
   20df2:	1b76      	subs	r6, r6, r5
   20df4:	fa1f fe86 	uxth.w	lr, r6
		if (ts2 < min->phase_seg2) {
   20df8:	45f1      	cmp	r9, lr
   20dfa:	d808      	bhi.n	20e0e <update_sampling_pnt+0xc2>
		ts1 = ts1_min;
   20dfc:	46ac      	mov	ip, r5
   20dfe:	e7da      	b.n	20db6 <update_sampling_pnt+0x6a>
	ts1 = ts - CAN_SYNC_SEG - ts2;
   20e00:	46bc      	mov	ip, r7
   20e02:	e7d8      	b.n	20db6 <update_sampling_pnt+0x6a>
	return sp_calc > sp ? sp_calc - sp : sp - sp_calc;
   20e04:	1a08      	subs	r0, r1, r0
   20e06:	e7ee      	b.n	20de6 <update_sampling_pnt+0x9a>
			return -1;
   20e08:	f04f 30ff 	mov.w	r0, #4294967295
   20e0c:	e7eb      	b.n	20de6 <update_sampling_pnt+0x9a>
			return -1;
   20e0e:	f04f 30ff 	mov.w	r0, #4294967295
   20e12:	e7e8      	b.n	20de6 <update_sampling_pnt+0x9a>
   20e14:	10624dd3 	.word	0x10624dd3

00020e18 <z_impl_can_send>:
{
   20e18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20e1c:	b08b      	sub	sp, #44	; 0x2c
   20e1e:	4604      	mov	r4, r0
   20e20:	460f      	mov	r7, r1
   20e22:	4616      	mov	r6, r2
   20e24:	461d      	mov	r5, r3
   20e26:	9812      	ldr	r0, [sp, #72]	; 0x48
	const struct can_driver_api *api = (const struct can_driver_api *)dev->api;
   20e28:	f8d4 8008 	ldr.w	r8, [r4, #8]
	if (callback == NULL) {
   20e2c:	b150      	cbz	r0, 20e44 <z_impl_can_send+0x2c>
	return api->send(dev, frame, timeout, callback, user_data);
   20e2e:	f8d8 8014 	ldr.w	r8, [r8, #20]
   20e32:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   20e34:	9301      	str	r3, [sp, #4]
   20e36:	9000      	str	r0, [sp, #0]
   20e38:	462b      	mov	r3, r5
   20e3a:	4620      	mov	r0, r4
   20e3c:	47c0      	blx	r8
}
   20e3e:	b00b      	add	sp, #44	; 0x2c
   20e40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return z_impl_k_sem_init(sem, initial_count, limit);
   20e44:	f10d 090c 	add.w	r9, sp, #12
   20e48:	2201      	movs	r2, #1
   20e4a:	2100      	movs	r1, #0
   20e4c:	4648      	mov	r0, r9
   20e4e:	f00c f87a 	bl	2cf46 <z_impl_k_sem_init>
		err = api->send(dev, frame, timeout, can_tx_default_cb, &ctx);
   20e52:	f8d8 8014 	ldr.w	r8, [r8, #20]
   20e56:	f8cd 9004 	str.w	r9, [sp, #4]
   20e5a:	4b09      	ldr	r3, [pc, #36]	; (20e80 <z_impl_can_send+0x68>)
   20e5c:	9300      	str	r3, [sp, #0]
   20e5e:	4632      	mov	r2, r6
   20e60:	462b      	mov	r3, r5
   20e62:	4639      	mov	r1, r7
   20e64:	4620      	mov	r0, r4
   20e66:	47c0      	blx	r8
		if (err != 0) {
   20e68:	2800      	cmp	r0, #0
   20e6a:	d1e8      	bne.n	20e3e <z_impl_can_send+0x26>
	return z_impl_k_sem_take(sem, timeout);
   20e6c:	f04f 32ff 	mov.w	r2, #4294967295
   20e70:	f04f 33ff 	mov.w	r3, #4294967295
   20e74:	4648      	mov	r0, r9
   20e76:	f004 f9d3 	bl	25220 <z_impl_k_sem_take>
		return ctx.status;
   20e7a:	9809      	ldr	r0, [sp, #36]	; 0x24
   20e7c:	e7df      	b.n	20e3e <z_impl_can_send+0x26>
   20e7e:	bf00      	nop
   20e80:	0002b927 	.word	0x0002b927

00020e84 <z_impl_can_calc_timing>:
	return sp_err_min == UINT16_MAX ? -ENOTSUP : (int)sp_err_min;
}

int z_impl_can_calc_timing(const struct device *dev, struct can_timing *res,
			   uint32_t bitrate, uint16_t sample_pnt)
{
   20e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20e88:	b084      	sub	sp, #16
   20e8a:	4698      	mov	r8, r3
	const struct can_driver_api *api = (const struct can_driver_api *)dev->api;
   20e8c:	6886      	ldr	r6, [r0, #8]
	const struct can_driver_api *api = (const struct can_driver_api *)dev->api;
   20e8e:	6887      	ldr	r7, [r0, #8]
	const struct can_timing *min = can_get_timing_min(dev);
	const struct can_timing *max = can_get_timing_max(dev);
	uint32_t core_clock;
	int ret;

	if (bitrate > 1000000) {
   20e90:	4b0d      	ldr	r3, [pc, #52]	; (20ec8 <z_impl_can_calc_timing+0x44>)
   20e92:	429a      	cmp	r2, r3
   20e94:	d815      	bhi.n	20ec2 <z_impl_can_calc_timing+0x3e>
   20e96:	460d      	mov	r5, r1
   20e98:	4614      	mov	r4, r2
   20e9a:	3634      	adds	r6, #52	; 0x34
   20e9c:	373e      	adds	r7, #62	; 0x3e
	const struct can_driver_api *api = (const struct can_driver_api *)dev->api;
   20e9e:	6883      	ldr	r3, [r0, #8]
	return api->get_core_clock(dev, rate);
   20ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   20ea2:	a903      	add	r1, sp, #12
   20ea4:	4798      	blx	r3
		return -EINVAL;
	}

	ret = can_get_core_clock(dev, &core_clock);
	if (ret != 0) {
   20ea6:	b110      	cbz	r0, 20eae <z_impl_can_calc_timing+0x2a>
		return ret;
	}

	return can_calc_timing_int(core_clock, res, min, max, bitrate, sample_pnt);
}
   20ea8:	b004      	add	sp, #16
   20eaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return can_calc_timing_int(core_clock, res, min, max, bitrate, sample_pnt);
   20eae:	f8cd 8004 	str.w	r8, [sp, #4]
   20eb2:	9400      	str	r4, [sp, #0]
   20eb4:	463b      	mov	r3, r7
   20eb6:	4632      	mov	r2, r6
   20eb8:	4629      	mov	r1, r5
   20eba:	9803      	ldr	r0, [sp, #12]
   20ebc:	f00a fcd5 	bl	2b86a <can_calc_timing_int>
   20ec0:	e7f2      	b.n	20ea8 <z_impl_can_calc_timing+0x24>
		return -EINVAL;
   20ec2:	f06f 0015 	mvn.w	r0, #21
   20ec6:	e7ef      	b.n	20ea8 <z_impl_can_calc_timing+0x24>
   20ec8:	000f4240 	.word	0x000f4240

00020ecc <mcp2515_get_state>:
	mcp2515_rx_filter(dev, &frame);
}

static int mcp2515_get_state(const struct device *dev, enum can_state *state,
			     struct can_bus_err_cnt *err_cnt)
{
   20ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20ed0:	b082      	sub	sp, #8
   20ed2:	4607      	mov	r7, r0
   20ed4:	460d      	mov	r5, r1
   20ed6:	4614      	mov	r4, r2
	struct mcp2515_data *dev_data = dev->data;
   20ed8:	f8d0 8010 	ldr.w	r8, [r0, #16]
	uint8_t eflg;
	uint8_t err_cnt_buf[2];
	int ret;

	ret = mcp2515_cmd_read_reg(dev, MCP2515_ADDR_EFLG, &eflg, sizeof(eflg));
   20edc:	2301      	movs	r3, #1
   20ede:	f10d 0207 	add.w	r2, sp, #7
   20ee2:	212d      	movs	r1, #45	; 0x2d
   20ee4:	f00a fe5a 	bl	2bb9c <mcp2515_cmd_read_reg>
	if (ret < 0) {
   20ee8:	1e06      	subs	r6, r0, #0
   20eea:	db1b      	blt.n	20f24 <mcp2515_get_state+0x58>
		LOG_ERR("Failed to read error register [%d]", ret);
		return -EIO;
	}

	if (state != NULL) {
   20eec:	b12d      	cbz	r5, 20efa <mcp2515_get_state+0x2e>
		if (!dev_data->started) {
   20eee:	f898 317a 	ldrb.w	r3, [r8, #378]	; 0x17a
   20ef2:	2b00      	cmp	r3, #0
   20ef4:	d149      	bne.n	20f8a <mcp2515_get_state+0xbe>
			*state = CAN_STATE_STOPPED;
   20ef6:	2304      	movs	r3, #4
   20ef8:	702b      	strb	r3, [r5, #0]
		} else {
			*state = CAN_STATE_ERROR_ACTIVE;
		}
	}

	if (err_cnt != NULL) {
   20efa:	2c00      	cmp	r4, #0
   20efc:	f000 808f 	beq.w	2101e <mcp2515_get_state+0x152>
		ret = mcp2515_cmd_read_reg(dev, MCP2515_ADDR_TEC, err_cnt_buf,
   20f00:	2302      	movs	r3, #2
   20f02:	aa01      	add	r2, sp, #4
   20f04:	211c      	movs	r1, #28
   20f06:	4638      	mov	r0, r7
   20f08:	f00a fe48 	bl	2bb9c <mcp2515_cmd_read_reg>
					   sizeof(err_cnt_buf));
		if (ret < 0) {
   20f0c:	1e05      	subs	r5, r0, #0
   20f0e:	db53      	blt.n	20fb8 <mcp2515_get_state+0xec>
			LOG_ERR("Failed to read error counters [%d]", ret);
			return -EIO;
		}

		err_cnt->tx_err_cnt = err_cnt_buf[0];
   20f10:	f89d 3004 	ldrb.w	r3, [sp, #4]
   20f14:	7023      	strb	r3, [r4, #0]
		err_cnt->rx_err_cnt = err_cnt_buf[1];
   20f16:	f89d 3005 	ldrb.w	r3, [sp, #5]
   20f1a:	7063      	strb	r3, [r4, #1]
	}

	return 0;
   20f1c:	2000      	movs	r0, #0
}
   20f1e:	b002      	add	sp, #8
   20f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERR("Failed to read error register [%d]", ret);
   20f24:	2008      	movs	r0, #8
   20f26:	f7f4 ff4f 	bl	15dc8 <z_log_msg_alloc>
   20f2a:	2200      	movs	r2, #0
   20f2c:	f36f 0200 	bfc	r2, #0, #1
   20f30:	f36f 0241 	bfc	r2, #1, #1
   20f34:	f36f 0282 	bfc	r2, #2, #1
   20f38:	f36f 02c5 	bfc	r2, #3, #3
   20f3c:	2301      	movs	r3, #1
   20f3e:	f363 1288 	bfi	r2, r3, #6, #3
   20f42:	230c      	movs	r3, #12
   20f44:	f363 2252 	bfi	r2, r3, #9, #10
   20f48:	f36f 42de 	bfc	r2, #19, #12
   20f4c:	f36f 72df 	bfc	r2, #31, #1
   20f50:	4604      	mov	r4, r0
   20f52:	b190      	cbz	r0, 20f7a <mcp2515_get_state+0xae>
   20f54:	f110 0310 	adds.w	r3, r0, #16
   20f58:	d002      	beq.n	20f60 <mcp2515_get_state+0x94>
   20f5a:	4932      	ldr	r1, [pc, #200]	; (21024 <mcp2515_get_state+0x158>)
   20f5c:	6141      	str	r1, [r0, #20]
   20f5e:	6186      	str	r6, [r0, #24]
   20f60:	b15b      	cbz	r3, 20f7a <mcp2515_get_state+0xae>
   20f62:	2303      	movs	r3, #3
   20f64:	f88d 3000 	strb.w	r3, [sp]
   20f68:	2300      	movs	r3, #0
   20f6a:	f88d 3001 	strb.w	r3, [sp, #1]
   20f6e:	f88d 3002 	strb.w	r3, [sp, #2]
   20f72:	f88d 3003 	strb.w	r3, [sp, #3]
   20f76:	9800      	ldr	r0, [sp, #0]
   20f78:	6120      	str	r0, [r4, #16]
   20f7a:	2300      	movs	r3, #0
   20f7c:	492a      	ldr	r1, [pc, #168]	; (21028 <mcp2515_get_state+0x15c>)
   20f7e:	4620      	mov	r0, r4
   20f80:	f006 ff2d 	bl	27dde <z_log_msg_finalize>
		return -EIO;
   20f84:	f06f 0004 	mvn.w	r0, #4
   20f88:	e7c9      	b.n	20f1e <mcp2515_get_state+0x52>
		} else if (eflg & MCP2515_EFLG_TXBO) {
   20f8a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   20f8e:	f013 0f20 	tst.w	r3, #32
   20f92:	d002      	beq.n	20f9a <mcp2515_get_state+0xce>
			*state = CAN_STATE_BUS_OFF;
   20f94:	2303      	movs	r3, #3
   20f96:	702b      	strb	r3, [r5, #0]
   20f98:	e7af      	b.n	20efa <mcp2515_get_state+0x2e>
		} else if ((eflg & MCP2515_EFLG_RXEP) || (eflg & MCP2515_EFLG_TXEP)) {
   20f9a:	f013 0f18 	tst.w	r3, #24
   20f9e:	d002      	beq.n	20fa6 <mcp2515_get_state+0xda>
			*state = CAN_STATE_ERROR_PASSIVE;
   20fa0:	2302      	movs	r3, #2
   20fa2:	702b      	strb	r3, [r5, #0]
   20fa4:	e7a9      	b.n	20efa <mcp2515_get_state+0x2e>
		} else if (eflg & MCP2515_EFLG_EWARN) {
   20fa6:	f013 0f01 	tst.w	r3, #1
   20faa:	d002      	beq.n	20fb2 <mcp2515_get_state+0xe6>
			*state = CAN_STATE_ERROR_WARNING;
   20fac:	2301      	movs	r3, #1
   20fae:	702b      	strb	r3, [r5, #0]
   20fb0:	e7a3      	b.n	20efa <mcp2515_get_state+0x2e>
			*state = CAN_STATE_ERROR_ACTIVE;
   20fb2:	2300      	movs	r3, #0
   20fb4:	702b      	strb	r3, [r5, #0]
   20fb6:	e7a0      	b.n	20efa <mcp2515_get_state+0x2e>
			LOG_ERR("Failed to read error counters [%d]", ret);
   20fb8:	2008      	movs	r0, #8
   20fba:	f7f4 ff05 	bl	15dc8 <z_log_msg_alloc>
   20fbe:	2200      	movs	r2, #0
   20fc0:	f36f 0200 	bfc	r2, #0, #1
   20fc4:	f36f 0241 	bfc	r2, #1, #1
   20fc8:	f36f 0282 	bfc	r2, #2, #1
   20fcc:	f36f 02c5 	bfc	r2, #3, #3
   20fd0:	2301      	movs	r3, #1
   20fd2:	f363 1288 	bfi	r2, r3, #6, #3
   20fd6:	230c      	movs	r3, #12
   20fd8:	f363 2252 	bfi	r2, r3, #9, #10
   20fdc:	f36f 42de 	bfc	r2, #19, #12
   20fe0:	f36f 72df 	bfc	r2, #31, #1
   20fe4:	4604      	mov	r4, r0
   20fe6:	b190      	cbz	r0, 2100e <mcp2515_get_state+0x142>
   20fe8:	f110 0310 	adds.w	r3, r0, #16
   20fec:	d002      	beq.n	20ff4 <mcp2515_get_state+0x128>
   20fee:	490f      	ldr	r1, [pc, #60]	; (2102c <mcp2515_get_state+0x160>)
   20ff0:	6141      	str	r1, [r0, #20]
   20ff2:	6185      	str	r5, [r0, #24]
   20ff4:	b15b      	cbz	r3, 2100e <mcp2515_get_state+0x142>
   20ff6:	2303      	movs	r3, #3
   20ff8:	f88d 3000 	strb.w	r3, [sp]
   20ffc:	2300      	movs	r3, #0
   20ffe:	f88d 3001 	strb.w	r3, [sp, #1]
   21002:	f88d 3002 	strb.w	r3, [sp, #2]
   21006:	f88d 3003 	strb.w	r3, [sp, #3]
   2100a:	9800      	ldr	r0, [sp, #0]
   2100c:	6120      	str	r0, [r4, #16]
   2100e:	2300      	movs	r3, #0
   21010:	4905      	ldr	r1, [pc, #20]	; (21028 <mcp2515_get_state+0x15c>)
   21012:	4620      	mov	r0, r4
   21014:	f006 fee3 	bl	27dde <z_log_msg_finalize>
			return -EIO;
   21018:	f06f 0004 	mvn.w	r0, #4
   2101c:	e77f      	b.n	20f1e <mcp2515_get_state+0x52>
	return 0;
   2101e:	2000      	movs	r0, #0
   21020:	e77d      	b.n	20f1e <mcp2515_get_state+0x52>
   21022:	bf00      	nop
   21024:	00030b38 	.word	0x00030b38
   21028:	0002ded8 	.word	0x0002ded8
   2102c:	00030b5c 	.word	0x00030b5c

00021030 <mcp2515_set_mode>:
	struct mcp2515_data *dev_data = dev->data;
   21030:	6903      	ldr	r3, [r0, #16]
	if (dev_data->started) {
   21032:	f893 217a 	ldrb.w	r2, [r3, #378]	; 0x17a
   21036:	2a00      	cmp	r2, #0
   21038:	d14a      	bne.n	210d0 <mcp2515_set_mode+0xa0>
{
   2103a:	b510      	push	{r4, lr}
   2103c:	b082      	sub	sp, #8
   2103e:	460c      	mov	r4, r1
	switch (mode) {
   21040:	2901      	cmp	r1, #1
   21042:	d040      	beq.n	210c6 <mcp2515_set_mode+0x96>
   21044:	2902      	cmp	r1, #2
   21046:	d039      	beq.n	210bc <mcp2515_set_mode+0x8c>
   21048:	b399      	cbz	r1, 210b2 <mcp2515_set_mode+0x82>
		LOG_ERR("Unsupported CAN Mode %u", mode);
   2104a:	2008      	movs	r0, #8
   2104c:	f7f4 febc 	bl	15dc8 <z_log_msg_alloc>
   21050:	2200      	movs	r2, #0
   21052:	f36f 0200 	bfc	r2, #0, #1
   21056:	f36f 0241 	bfc	r2, #1, #1
   2105a:	f36f 0282 	bfc	r2, #2, #1
   2105e:	f36f 02c5 	bfc	r2, #3, #3
   21062:	2301      	movs	r3, #1
   21064:	f363 1288 	bfi	r2, r3, #6, #3
   21068:	230c      	movs	r3, #12
   2106a:	f363 2252 	bfi	r2, r3, #9, #10
   2106e:	f36f 42de 	bfc	r2, #19, #12
   21072:	f36f 72df 	bfc	r2, #31, #1
   21076:	4684      	mov	ip, r0
   21078:	b198      	cbz	r0, 210a2 <mcp2515_set_mode+0x72>
   2107a:	f110 0310 	adds.w	r3, r0, #16
   2107e:	d002      	beq.n	21086 <mcp2515_set_mode+0x56>
   21080:	4915      	ldr	r1, [pc, #84]	; (210d8 <mcp2515_set_mode+0xa8>)
   21082:	6141      	str	r1, [r0, #20]
   21084:	6184      	str	r4, [r0, #24]
   21086:	b163      	cbz	r3, 210a2 <mcp2515_set_mode+0x72>
   21088:	2303      	movs	r3, #3
   2108a:	f88d 3004 	strb.w	r3, [sp, #4]
   2108e:	2300      	movs	r3, #0
   21090:	f88d 3005 	strb.w	r3, [sp, #5]
   21094:	f88d 3006 	strb.w	r3, [sp, #6]
   21098:	f88d 3007 	strb.w	r3, [sp, #7]
   2109c:	9801      	ldr	r0, [sp, #4]
   2109e:	f8cc 0010 	str.w	r0, [ip, #16]
   210a2:	2300      	movs	r3, #0
   210a4:	490d      	ldr	r1, [pc, #52]	; (210dc <mcp2515_set_mode+0xac>)
   210a6:	4660      	mov	r0, ip
   210a8:	f006 fe99 	bl	27dde <z_log_msg_finalize>
		return -ENOTSUP;
   210ac:	f06f 0085 	mvn.w	r0, #133	; 0x85
   210b0:	e002      	b.n	210b8 <mcp2515_set_mode+0x88>
		dev_data->mcp2515_mode = MCP2515_MODE_NORMAL;
   210b2:	2000      	movs	r0, #0
   210b4:	f883 0179 	strb.w	r0, [r3, #377]	; 0x179
}
   210b8:	b002      	add	sp, #8
   210ba:	bd10      	pop	{r4, pc}
		dev_data->mcp2515_mode = MCP2515_MODE_SILENT;
   210bc:	2203      	movs	r2, #3
   210be:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
	return 0;
   210c2:	2000      	movs	r0, #0
		break;
   210c4:	e7f8      	b.n	210b8 <mcp2515_set_mode+0x88>
		dev_data->mcp2515_mode = MCP2515_MODE_LOOPBACK;
   210c6:	2202      	movs	r2, #2
   210c8:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
	return 0;
   210cc:	2000      	movs	r0, #0
		break;
   210ce:	e7f3      	b.n	210b8 <mcp2515_set_mode+0x88>
		return -EBUSY;
   210d0:	f06f 000f 	mvn.w	r0, #15
}
   210d4:	4770      	bx	lr
   210d6:	bf00      	nop
   210d8:	00030b80 	.word	0x00030b80
   210dc:	0002ded8 	.word	0x0002ded8

000210e0 <mcp2515_handle_errors>:

static void mcp2515_handle_errors(const struct device *dev)
{
   210e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   210e4:	b082      	sub	sp, #8
   210e6:	4604      	mov	r4, r0
	struct mcp2515_data *dev_data = dev->data;
   210e8:	6906      	ldr	r6, [r0, #16]
	can_state_change_callback_t state_change_cb = dev_data->state_change_cb;
   210ea:	f8d6 515c 	ldr.w	r5, [r6, #348]	; 0x15c
	void *state_change_cb_data = dev_data->state_change_cb_data;
   210ee:	f8d6 7160 	ldr.w	r7, [r6, #352]	; 0x160
	enum can_state state;
	struct can_bus_err_cnt err_cnt;
	int err;

	err = mcp2515_get_state(dev, &state, state_change_cb ? &err_cnt : NULL);
   210f2:	b1bd      	cbz	r5, 21124 <mcp2515_handle_errors+0x44>
   210f4:	aa01      	add	r2, sp, #4
   210f6:	f10d 0107 	add.w	r1, sp, #7
   210fa:	4620      	mov	r0, r4
   210fc:	f7ff fee6 	bl	20ecc <mcp2515_get_state>
	if (err != 0) {
   21100:	4680      	mov	r8, r0
   21102:	b988      	cbnz	r0, 21128 <mcp2515_handle_errors+0x48>
		LOG_ERR("Failed to get CAN controller state [%d]", err);
		return;
	}

	if (state_change_cb && dev_data->old_state != state) {
   21104:	b15d      	cbz	r5, 2111e <mcp2515_handle_errors+0x3e>
   21106:	f896 3178 	ldrb.w	r3, [r6, #376]	; 0x178
   2110a:	f89d 1007 	ldrb.w	r1, [sp, #7]
   2110e:	428b      	cmp	r3, r1
   21110:	d005      	beq.n	2111e <mcp2515_handle_errors+0x3e>
		dev_data->old_state = state;
   21112:	f886 1178 	strb.w	r1, [r6, #376]	; 0x178
		state_change_cb(dev, state, err_cnt, state_change_cb_data);
   21116:	463b      	mov	r3, r7
   21118:	9a01      	ldr	r2, [sp, #4]
   2111a:	4620      	mov	r0, r4
   2111c:	47a8      	blx	r5
	}
}
   2111e:	b002      	add	sp, #8
   21120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = mcp2515_get_state(dev, &state, state_change_cb ? &err_cnt : NULL);
   21124:	2200      	movs	r2, #0
   21126:	e7e6      	b.n	210f6 <mcp2515_handle_errors+0x16>
		LOG_ERR("Failed to get CAN controller state [%d]", err);
   21128:	2008      	movs	r0, #8
   2112a:	f7f4 fe4d 	bl	15dc8 <z_log_msg_alloc>
   2112e:	2200      	movs	r2, #0
   21130:	f36f 0200 	bfc	r2, #0, #1
   21134:	f36f 0241 	bfc	r2, #1, #1
   21138:	f36f 0282 	bfc	r2, #2, #1
   2113c:	f36f 02c5 	bfc	r2, #3, #3
   21140:	2301      	movs	r3, #1
   21142:	f363 1288 	bfi	r2, r3, #6, #3
   21146:	230c      	movs	r3, #12
   21148:	f363 2252 	bfi	r2, r3, #9, #10
   2114c:	f36f 42de 	bfc	r2, #19, #12
   21150:	f36f 72df 	bfc	r2, #31, #1
   21154:	4604      	mov	r4, r0
   21156:	b198      	cbz	r0, 21180 <mcp2515_handle_errors+0xa0>
   21158:	f110 0310 	adds.w	r3, r0, #16
   2115c:	d003      	beq.n	21166 <mcp2515_handle_errors+0x86>
   2115e:	490b      	ldr	r1, [pc, #44]	; (2118c <mcp2515_handle_errors+0xac>)
   21160:	6141      	str	r1, [r0, #20]
   21162:	f8c0 8018 	str.w	r8, [r0, #24]
   21166:	b15b      	cbz	r3, 21180 <mcp2515_handle_errors+0xa0>
   21168:	2303      	movs	r3, #3
   2116a:	f88d 3000 	strb.w	r3, [sp]
   2116e:	2300      	movs	r3, #0
   21170:	f88d 3001 	strb.w	r3, [sp, #1]
   21174:	f88d 3002 	strb.w	r3, [sp, #2]
   21178:	f88d 3003 	strb.w	r3, [sp, #3]
   2117c:	9800      	ldr	r0, [sp, #0]
   2117e:	6120      	str	r0, [r4, #16]
   21180:	2300      	movs	r3, #0
   21182:	4903      	ldr	r1, [pc, #12]	; (21190 <mcp2515_handle_errors+0xb0>)
   21184:	4620      	mov	r0, r4
   21186:	f006 fe2a 	bl	27dde <z_log_msg_finalize>
		return;
   2118a:	e7c8      	b.n	2111e <mcp2515_handle_errors+0x3e>
   2118c:	00030b98 	.word	0x00030b98
   21190:	0002ded8 	.word	0x0002ded8

00021194 <mcp2515_set_timing>:
{
   21194:	b570      	push	{r4, r5, r6, lr}
   21196:	b082      	sub	sp, #8
	struct mcp2515_data *dev_data = dev->data;
   21198:	6906      	ldr	r6, [r0, #16]
	if (!timing) {
   2119a:	2900      	cmp	r1, #0
   2119c:	f000 80e5 	beq.w	2136a <mcp2515_set_timing+0x1d6>
   211a0:	4604      	mov	r4, r0
   211a2:	460a      	mov	r2, r1
	if (dev_data->started) {
   211a4:	f896 317a 	ldrb.w	r3, [r6, #378]	; 0x17a
   211a8:	2b00      	cmp	r3, #0
   211aa:	f040 80e1 	bne.w	21370 <mcp2515_set_timing+0x1dc>
	uint8_t brp = timing->prescaler - 1;
   211ae:	7a0b      	ldrb	r3, [r1, #8]
   211b0:	3b01      	subs	r3, #1
   211b2:	b2db      	uxtb	r3, r3
	if (timing->sjw != CAN_SJW_NO_CHANGE) {
   211b4:	8809      	ldrh	r1, [r1, #0]
   211b6:	b121      	cbz	r1, 211c2 <mcp2515_set_timing+0x2e>
		dev_data->sjw = (timing->sjw - 1) << 6;
   211b8:	3901      	subs	r1, #1
   211ba:	b2c9      	uxtb	r1, r1
   211bc:	0189      	lsls	r1, r1, #6
   211be:	f886 117b 	strb.w	r1, [r6, #379]	; 0x17b
	uint8_t cnf1 = dev_data->sjw | brp;
   211c2:	f896 517b 	ldrb.w	r5, [r6, #379]	; 0x17b
   211c6:	431d      	orrs	r5, r3
	const uint8_t phseg1 = (timing->phase_seg1 - 1) << 3;
   211c8:	8893      	ldrh	r3, [r2, #4]
   211ca:	3b01      	subs	r3, #1
   211cc:	b2db      	uxtb	r3, r3
   211ce:	00db      	lsls	r3, r3, #3
   211d0:	b2db      	uxtb	r3, r3
	const uint8_t prseg = (timing->prop_seg - 1);
   211d2:	7891      	ldrb	r1, [r2, #2]
   211d4:	3901      	subs	r1, #1
   211d6:	b2c9      	uxtb	r1, r1
	const uint8_t cnf2 = btlmode | sam | phseg1 | prseg;
   211d8:	430b      	orrs	r3, r1
   211da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
	const uint8_t phseg2 = (timing->phase_seg2 - 1);
   211de:	7992      	ldrb	r2, [r2, #6]
   211e0:	3a01      	subs	r2, #1
	config_buf[0] = cnf3;
   211e2:	f88d 2004 	strb.w	r2, [sp, #4]
	config_buf[1] = cnf2;
   211e6:	f88d 3005 	strb.w	r3, [sp, #5]
	config_buf[2] = cnf1;
   211ea:	f88d 5006 	strb.w	r5, [sp, #6]
	config_buf[3] = caninte;
   211ee:	233f      	movs	r3, #63	; 0x3f
   211f0:	f88d 3007 	strb.w	r3, [sp, #7]
	k_mutex_lock(&dev_data->mutex, K_FOREVER);
   211f4:	f506 76b2 	add.w	r6, r6, #356	; 0x164
	return z_impl_k_mutex_lock(mutex, timeout);
   211f8:	f04f 32ff 	mov.w	r2, #4294967295
   211fc:	f04f 33ff 	mov.w	r3, #4294967295
   21200:	4630      	mov	r0, r6
   21202:	f003 fee5 	bl	24fd0 <z_impl_k_mutex_lock>
	ret = mcp2515_cmd_write_reg(dev, MCP2515_ADDR_CNF3, config_buf,
   21206:	2304      	movs	r3, #4
   21208:	eb0d 0203 	add.w	r2, sp, r3
   2120c:	2128      	movs	r1, #40	; 0x28
   2120e:	4620      	mov	r0, r4
   21210:	f00a fc84 	bl	2bb1c <mcp2515_cmd_write_reg>
	if (ret < 0) {
   21214:	1e05      	subs	r5, r0, #0
   21216:	db15      	blt.n	21244 <mcp2515_set_timing+0xb0>
	ret = mcp2515_cmd_bit_modify(dev, MCP2515_ADDR_RXB0CTRL, rx0_ctrl,
   21218:	2364      	movs	r3, #100	; 0x64
   2121a:	461a      	mov	r2, r3
   2121c:	2160      	movs	r1, #96	; 0x60
   2121e:	4620      	mov	r0, r4
   21220:	f00a fc61 	bl	2bae6 <mcp2515_cmd_bit_modify>
	if (ret < 0) {
   21224:	1e05      	subs	r5, r0, #0
   21226:	db3e      	blt.n	212a6 <mcp2515_set_timing+0x112>
	ret = mcp2515_cmd_bit_modify(dev, MCP2515_ADDR_RXB1CTRL, rx1_ctrl,
   21228:	2360      	movs	r3, #96	; 0x60
   2122a:	461a      	mov	r2, r3
   2122c:	2170      	movs	r1, #112	; 0x70
   2122e:	4620      	mov	r0, r4
   21230:	f00a fc59 	bl	2bae6 <mcp2515_cmd_bit_modify>
	if (ret < 0) {
   21234:	1e05      	subs	r5, r0, #0
   21236:	db67      	blt.n	21308 <mcp2515_set_timing+0x174>
	return z_impl_k_mutex_unlock(mutex);
   21238:	4630      	mov	r0, r6
   2123a:	f003 ff4d 	bl	250d8 <z_impl_k_mutex_unlock>
}
   2123e:	4628      	mov	r0, r5
   21240:	b002      	add	sp, #8
   21242:	bd70      	pop	{r4, r5, r6, pc}
		LOG_ERR("Failed to write the configuration [%d]", ret);
   21244:	2008      	movs	r0, #8
   21246:	f7f4 fdbf 	bl	15dc8 <z_log_msg_alloc>
   2124a:	2200      	movs	r2, #0
   2124c:	f36f 0200 	bfc	r2, #0, #1
   21250:	f36f 0241 	bfc	r2, #1, #1
   21254:	f36f 0282 	bfc	r2, #2, #1
   21258:	f36f 02c5 	bfc	r2, #3, #3
   2125c:	2301      	movs	r3, #1
   2125e:	f363 1288 	bfi	r2, r3, #6, #3
   21262:	230c      	movs	r3, #12
   21264:	f363 2252 	bfi	r2, r3, #9, #10
   21268:	f36f 42de 	bfc	r2, #19, #12
   2126c:	f36f 72df 	bfc	r2, #31, #1
   21270:	4604      	mov	r4, r0
   21272:	b190      	cbz	r0, 2129a <mcp2515_set_timing+0x106>
   21274:	f110 0310 	adds.w	r3, r0, #16
   21278:	d002      	beq.n	21280 <mcp2515_set_timing+0xec>
   2127a:	493f      	ldr	r1, [pc, #252]	; (21378 <mcp2515_set_timing+0x1e4>)
   2127c:	6141      	str	r1, [r0, #20]
   2127e:	6185      	str	r5, [r0, #24]
   21280:	b15b      	cbz	r3, 2129a <mcp2515_set_timing+0x106>
   21282:	2303      	movs	r3, #3
   21284:	f88d 3000 	strb.w	r3, [sp]
   21288:	2300      	movs	r3, #0
   2128a:	f88d 3001 	strb.w	r3, [sp, #1]
   2128e:	f88d 3002 	strb.w	r3, [sp, #2]
   21292:	f88d 3003 	strb.w	r3, [sp, #3]
   21296:	9800      	ldr	r0, [sp, #0]
   21298:	6120      	str	r0, [r4, #16]
   2129a:	2300      	movs	r3, #0
   2129c:	4937      	ldr	r1, [pc, #220]	; (2137c <mcp2515_set_timing+0x1e8>)
   2129e:	4620      	mov	r0, r4
   212a0:	f006 fd9d 	bl	27dde <z_log_msg_finalize>
		goto done;
   212a4:	e7c8      	b.n	21238 <mcp2515_set_timing+0xa4>
		LOG_ERR("Failed to write RXB0CTRL [%d]", ret);
   212a6:	2008      	movs	r0, #8
   212a8:	f7f4 fd8e 	bl	15dc8 <z_log_msg_alloc>
   212ac:	2200      	movs	r2, #0
   212ae:	f36f 0200 	bfc	r2, #0, #1
   212b2:	f36f 0241 	bfc	r2, #1, #1
   212b6:	f36f 0282 	bfc	r2, #2, #1
   212ba:	f36f 02c5 	bfc	r2, #3, #3
   212be:	2301      	movs	r3, #1
   212c0:	f363 1288 	bfi	r2, r3, #6, #3
   212c4:	230c      	movs	r3, #12
   212c6:	f363 2252 	bfi	r2, r3, #9, #10
   212ca:	f36f 42de 	bfc	r2, #19, #12
   212ce:	f36f 72df 	bfc	r2, #31, #1
   212d2:	4604      	mov	r4, r0
   212d4:	b190      	cbz	r0, 212fc <mcp2515_set_timing+0x168>
   212d6:	f110 0310 	adds.w	r3, r0, #16
   212da:	d002      	beq.n	212e2 <mcp2515_set_timing+0x14e>
   212dc:	4928      	ldr	r1, [pc, #160]	; (21380 <mcp2515_set_timing+0x1ec>)
   212de:	6141      	str	r1, [r0, #20]
   212e0:	6185      	str	r5, [r0, #24]
   212e2:	b15b      	cbz	r3, 212fc <mcp2515_set_timing+0x168>
   212e4:	2303      	movs	r3, #3
   212e6:	f88d 3000 	strb.w	r3, [sp]
   212ea:	2300      	movs	r3, #0
   212ec:	f88d 3001 	strb.w	r3, [sp, #1]
   212f0:	f88d 3002 	strb.w	r3, [sp, #2]
   212f4:	f88d 3003 	strb.w	r3, [sp, #3]
   212f8:	9800      	ldr	r0, [sp, #0]
   212fa:	6120      	str	r0, [r4, #16]
   212fc:	2300      	movs	r3, #0
   212fe:	491f      	ldr	r1, [pc, #124]	; (2137c <mcp2515_set_timing+0x1e8>)
   21300:	4620      	mov	r0, r4
   21302:	f006 fd6c 	bl	27dde <z_log_msg_finalize>
		goto done;
   21306:	e797      	b.n	21238 <mcp2515_set_timing+0xa4>
		LOG_ERR("Failed to write RXB1CTRL [%d]", ret);
   21308:	2008      	movs	r0, #8
   2130a:	f7f4 fd5d 	bl	15dc8 <z_log_msg_alloc>
   2130e:	2200      	movs	r2, #0
   21310:	f36f 0200 	bfc	r2, #0, #1
   21314:	f36f 0241 	bfc	r2, #1, #1
   21318:	f36f 0282 	bfc	r2, #2, #1
   2131c:	f36f 02c5 	bfc	r2, #3, #3
   21320:	2301      	movs	r3, #1
   21322:	f363 1288 	bfi	r2, r3, #6, #3
   21326:	230c      	movs	r3, #12
   21328:	f363 2252 	bfi	r2, r3, #9, #10
   2132c:	f36f 42de 	bfc	r2, #19, #12
   21330:	f36f 72df 	bfc	r2, #31, #1
   21334:	4604      	mov	r4, r0
   21336:	b190      	cbz	r0, 2135e <mcp2515_set_timing+0x1ca>
   21338:	f110 0310 	adds.w	r3, r0, #16
   2133c:	d002      	beq.n	21344 <mcp2515_set_timing+0x1b0>
   2133e:	4911      	ldr	r1, [pc, #68]	; (21384 <mcp2515_set_timing+0x1f0>)
   21340:	6141      	str	r1, [r0, #20]
   21342:	6185      	str	r5, [r0, #24]
   21344:	b15b      	cbz	r3, 2135e <mcp2515_set_timing+0x1ca>
   21346:	2303      	movs	r3, #3
   21348:	f88d 3000 	strb.w	r3, [sp]
   2134c:	2300      	movs	r3, #0
   2134e:	f88d 3001 	strb.w	r3, [sp, #1]
   21352:	f88d 3002 	strb.w	r3, [sp, #2]
   21356:	f88d 3003 	strb.w	r3, [sp, #3]
   2135a:	9800      	ldr	r0, [sp, #0]
   2135c:	6120      	str	r0, [r4, #16]
   2135e:	2300      	movs	r3, #0
   21360:	4906      	ldr	r1, [pc, #24]	; (2137c <mcp2515_set_timing+0x1e8>)
   21362:	4620      	mov	r0, r4
   21364:	f006 fd3b 	bl	27dde <z_log_msg_finalize>
		goto done;
   21368:	e766      	b.n	21238 <mcp2515_set_timing+0xa4>
		return -EINVAL;
   2136a:	f06f 0515 	mvn.w	r5, #21
   2136e:	e766      	b.n	2123e <mcp2515_set_timing+0xaa>
		return -EBUSY;
   21370:	f06f 050f 	mvn.w	r5, #15
   21374:	e763      	b.n	2123e <mcp2515_set_timing+0xaa>
   21376:	bf00      	nop
   21378:	00030bc0 	.word	0x00030bc0
   2137c:	0002ded8 	.word	0x0002ded8
   21380:	00030be8 	.word	0x00030be8
   21384:	00030c08 	.word	0x00030c08

00021388 <mcp2515_send>:
{
   21388:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2138c:	b087      	sub	sp, #28
	struct mcp2515_data *dev_data = dev->data;
   2138e:	6905      	ldr	r5, [r0, #16]
	if (frame->dlc > CAN_MAX_DLC) {
   21390:	790c      	ldrb	r4, [r1, #4]
   21392:	2c08      	cmp	r4, #8
   21394:	d844      	bhi.n	21420 <mcp2515_send+0x98>
   21396:	4607      	mov	r7, r0
   21398:	460e      	mov	r6, r1
	if ((frame->flags & ~(CAN_FRAME_IDE | CAN_FRAME_RTR)) != 0) {
   2139a:	794c      	ldrb	r4, [r1, #5]
   2139c:	2c03      	cmp	r4, #3
   2139e:	d873      	bhi.n	21488 <mcp2515_send+0x100>
	if (!dev_data->started) {
   213a0:	f895 117a 	ldrb.w	r1, [r5, #378]	; 0x17a
   213a4:	2900      	cmp	r1, #0
   213a6:	f000 80e4 	beq.w	21572 <mcp2515_send+0x1ea>
	if (k_sem_take(&dev_data->tx_sem, timeout) != 0) {
   213aa:	f105 00e4 	add.w	r0, r5, #228	; 0xe4
	return z_impl_k_sem_take(sem, timeout);
   213ae:	f003 ff37 	bl	25220 <z_impl_k_sem_take>
   213b2:	4680      	mov	r8, r0
   213b4:	2800      	cmp	r0, #0
   213b6:	f040 80df 	bne.w	21578 <mcp2515_send+0x1f0>
	k_mutex_lock(&dev_data->mutex, K_FOREVER);
   213ba:	f505 79b2 	add.w	r9, r5, #356	; 0x164
	return z_impl_k_mutex_lock(mutex, timeout);
   213be:	f04f 32ff 	mov.w	r2, #4294967295
   213c2:	f04f 33ff 	mov.w	r3, #4294967295
   213c6:	4648      	mov	r0, r9
   213c8:	f003 fe02 	bl	24fd0 <z_impl_k_mutex_lock>
	uint8_t tx_idx = 0U;
   213cc:	2400      	movs	r4, #0
	for (; tx_idx < MCP2515_TX_CNT; tx_idx++) {
   213ce:	2c00      	cmp	r4, #0
   213d0:	f000 808d 	beq.w	214ee <mcp2515_send+0x166>
	return z_impl_k_mutex_unlock(mutex);
   213d4:	4648      	mov	r0, r9
   213d6:	f003 fe7f 	bl	250d8 <z_impl_k_mutex_unlock>
	if (tx_idx == MCP2515_TX_CNT) {
   213da:	2c01      	cmp	r4, #1
   213dc:	f000 8097 	beq.w	2150e <mcp2515_send+0x186>
	dev_data->tx_cb[tx_idx].cb = callback;
   213e0:	f104 031f 	add.w	r3, r4, #31
   213e4:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   213e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   213ea:	606b      	str	r3, [r5, #4]
	dev_data->tx_cb[tx_idx].cb_arg = user_data;
   213ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   213ee:	60ab      	str	r3, [r5, #8]
	mcp2515_convert_canframe_to_mcp2515frame(frame, tx_frame);
   213f0:	a902      	add	r1, sp, #8
   213f2:	4630      	mov	r0, r6
   213f4:	f00a fc11 	bl	2bc1a <mcp2515_convert_canframe_to_mcp2515frame>
	abc = 2 * tx_idx;
   213f8:	0061      	lsls	r1, r4, #1
	len = sizeof(tx_frame) - CAN_MAX_DLC + frame->dlc;
   213fa:	7933      	ldrb	r3, [r6, #4]
   213fc:	3305      	adds	r3, #5
	mcp2515_cmd_load_tx_buffer(dev, abc, tx_frame, len);
   213fe:	b2db      	uxtb	r3, r3
   21400:	aa02      	add	r2, sp, #8
   21402:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
   21406:	4638      	mov	r0, r7
   21408:	f00a fb9d 	bl	2bb46 <mcp2515_cmd_load_tx_buffer>
	nnn = BIT(tx_idx);
   2140c:	2101      	movs	r1, #1
   2140e:	40a1      	lsls	r1, r4
	mcp2515_cmd_rts(dev, nnn);
   21410:	b2c9      	uxtb	r1, r1
   21412:	4638      	mov	r0, r7
   21414:	f00a fbae 	bl	2bb74 <mcp2515_cmd_rts>
}
   21418:	4640      	mov	r0, r8
   2141a:	b007      	add	sp, #28
   2141c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		LOG_ERR("DLC of %d exceeds maximum (%d)",
   21420:	2008      	movs	r0, #8
   21422:	f7f4 fcd1 	bl	15dc8 <z_log_msg_alloc>
   21426:	2200      	movs	r2, #0
   21428:	f36f 0200 	bfc	r2, #0, #1
   2142c:	f36f 0241 	bfc	r2, #1, #1
   21430:	f36f 0282 	bfc	r2, #2, #1
   21434:	f36f 02c5 	bfc	r2, #3, #3
   21438:	2301      	movs	r3, #1
   2143a:	f363 1288 	bfi	r2, r3, #6, #3
   2143e:	2310      	movs	r3, #16
   21440:	f363 2252 	bfi	r2, r3, #9, #10
   21444:	f36f 42de 	bfc	r2, #19, #12
   21448:	f36f 72df 	bfc	r2, #31, #1
   2144c:	4605      	mov	r5, r0
   2144e:	b198      	cbz	r0, 21478 <mcp2515_send+0xf0>
   21450:	18c3      	adds	r3, r0, r3
   21452:	d004      	beq.n	2145e <mcp2515_send+0xd6>
   21454:	494a      	ldr	r1, [pc, #296]	; (21580 <mcp2515_send+0x1f8>)
   21456:	6141      	str	r1, [r0, #20]
   21458:	6184      	str	r4, [r0, #24]
   2145a:	2108      	movs	r1, #8
   2145c:	61c1      	str	r1, [r0, #28]
   2145e:	b15b      	cbz	r3, 21478 <mcp2515_send+0xf0>
   21460:	2304      	movs	r3, #4
   21462:	f88d 3004 	strb.w	r3, [sp, #4]
   21466:	2300      	movs	r3, #0
   21468:	f88d 3005 	strb.w	r3, [sp, #5]
   2146c:	f88d 3006 	strb.w	r3, [sp, #6]
   21470:	f88d 3007 	strb.w	r3, [sp, #7]
   21474:	9801      	ldr	r0, [sp, #4]
   21476:	6128      	str	r0, [r5, #16]
   21478:	2300      	movs	r3, #0
   2147a:	4942      	ldr	r1, [pc, #264]	; (21584 <mcp2515_send+0x1fc>)
   2147c:	4628      	mov	r0, r5
   2147e:	f006 fcae 	bl	27dde <z_log_msg_finalize>
		return -EINVAL;
   21482:	f06f 0815 	mvn.w	r8, #21
   21486:	e7c7      	b.n	21418 <mcp2515_send+0x90>
		LOG_ERR("unsupported CAN frame flags 0x%02x", frame->flags);
   21488:	2008      	movs	r0, #8
   2148a:	f7f4 fc9d 	bl	15dc8 <z_log_msg_alloc>
   2148e:	2200      	movs	r2, #0
   21490:	f36f 0200 	bfc	r2, #0, #1
   21494:	f36f 0241 	bfc	r2, #1, #1
   21498:	f36f 0282 	bfc	r2, #2, #1
   2149c:	f36f 02c5 	bfc	r2, #3, #3
   214a0:	2301      	movs	r3, #1
   214a2:	f363 1288 	bfi	r2, r3, #6, #3
   214a6:	230c      	movs	r3, #12
   214a8:	f363 2252 	bfi	r2, r3, #9, #10
   214ac:	f36f 42de 	bfc	r2, #19, #12
   214b0:	f36f 72df 	bfc	r2, #31, #1
   214b4:	4605      	mov	r5, r0
   214b6:	b190      	cbz	r0, 214de <mcp2515_send+0x156>
   214b8:	f110 0310 	adds.w	r3, r0, #16
   214bc:	d002      	beq.n	214c4 <mcp2515_send+0x13c>
   214be:	4932      	ldr	r1, [pc, #200]	; (21588 <mcp2515_send+0x200>)
   214c0:	6141      	str	r1, [r0, #20]
   214c2:	6184      	str	r4, [r0, #24]
   214c4:	b15b      	cbz	r3, 214de <mcp2515_send+0x156>
   214c6:	2303      	movs	r3, #3
   214c8:	f88d 3004 	strb.w	r3, [sp, #4]
   214cc:	2300      	movs	r3, #0
   214ce:	f88d 3005 	strb.w	r3, [sp, #5]
   214d2:	f88d 3006 	strb.w	r3, [sp, #6]
   214d6:	f88d 3007 	strb.w	r3, [sp, #7]
   214da:	9801      	ldr	r0, [sp, #4]
   214dc:	6128      	str	r0, [r5, #16]
   214de:	2300      	movs	r3, #0
   214e0:	4928      	ldr	r1, [pc, #160]	; (21584 <mcp2515_send+0x1fc>)
   214e2:	4628      	mov	r0, r5
   214e4:	f006 fc7b 	bl	27dde <z_log_msg_finalize>
		return -ENOTSUP;
   214e8:	f06f 0885 	mvn.w	r8, #133	; 0x85
   214ec:	e794      	b.n	21418 <mcp2515_send+0x90>
		if ((BIT(tx_idx) & dev_data->tx_busy_map) == 0) {
   214ee:	f895 3104 	ldrb.w	r3, [r5, #260]	; 0x104
   214f2:	fa23 f204 	lsr.w	r2, r3, r4
   214f6:	f012 0f01 	tst.w	r2, #1
   214fa:	d002      	beq.n	21502 <mcp2515_send+0x17a>
	for (; tx_idx < MCP2515_TX_CNT; tx_idx++) {
   214fc:	3401      	adds	r4, #1
   214fe:	b2e4      	uxtb	r4, r4
   21500:	e765      	b.n	213ce <mcp2515_send+0x46>
			dev_data->tx_busy_map |= BIT(tx_idx);
   21502:	2201      	movs	r2, #1
   21504:	40a2      	lsls	r2, r4
   21506:	4313      	orrs	r3, r2
   21508:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
			break;
   2150c:	e762      	b.n	213d4 <mcp2515_send+0x4c>
		LOG_WRN("no free tx slot available");
   2150e:	2006      	movs	r0, #6
   21510:	f7f4 fc5a 	bl	15dc8 <z_log_msg_alloc>
   21514:	2200      	movs	r2, #0
   21516:	f36f 0200 	bfc	r2, #0, #1
   2151a:	f36f 0241 	bfc	r2, #1, #1
   2151e:	f36f 0282 	bfc	r2, #2, #1
   21522:	f36f 02c5 	bfc	r2, #3, #3
   21526:	2302      	movs	r3, #2
   21528:	f363 1288 	bfi	r2, r3, #6, #3
   2152c:	2308      	movs	r3, #8
   2152e:	f363 2252 	bfi	r2, r3, #9, #10
   21532:	f36f 42de 	bfc	r2, #19, #12
   21536:	f36f 72df 	bfc	r2, #31, #1
   2153a:	4604      	mov	r4, r0
   2153c:	b188      	cbz	r0, 21562 <mcp2515_send+0x1da>
   2153e:	f110 0310 	adds.w	r3, r0, #16
   21542:	d001      	beq.n	21548 <mcp2515_send+0x1c0>
   21544:	4911      	ldr	r1, [pc, #68]	; (2158c <mcp2515_send+0x204>)
   21546:	6141      	str	r1, [r0, #20]
   21548:	b15b      	cbz	r3, 21562 <mcp2515_send+0x1da>
   2154a:	2302      	movs	r3, #2
   2154c:	f88d 3004 	strb.w	r3, [sp, #4]
   21550:	2300      	movs	r3, #0
   21552:	f88d 3005 	strb.w	r3, [sp, #5]
   21556:	f88d 3006 	strb.w	r3, [sp, #6]
   2155a:	f88d 3007 	strb.w	r3, [sp, #7]
   2155e:	9801      	ldr	r0, [sp, #4]
   21560:	6120      	str	r0, [r4, #16]
   21562:	2300      	movs	r3, #0
   21564:	4907      	ldr	r1, [pc, #28]	; (21584 <mcp2515_send+0x1fc>)
   21566:	4620      	mov	r0, r4
   21568:	f006 fc39 	bl	27dde <z_log_msg_finalize>
		return -EIO;
   2156c:	f06f 0804 	mvn.w	r8, #4
   21570:	e752      	b.n	21418 <mcp2515_send+0x90>
		return -ENETDOWN;
   21572:	f06f 0872 	mvn.w	r8, #114	; 0x72
   21576:	e74f      	b.n	21418 <mcp2515_send+0x90>
		return -EAGAIN;
   21578:	f06f 080a 	mvn.w	r8, #10
   2157c:	e74c      	b.n	21418 <mcp2515_send+0x90>
   2157e:	bf00      	nop
   21580:	00030c28 	.word	0x00030c28
   21584:	0002ded8 	.word	0x0002ded8
   21588:	00030c48 	.word	0x00030c48
   2158c:	00030c6c 	.word	0x00030c6c

00021590 <mcp2515_handle_interrupts>:
	return -ENOTSUP;
}
#endif

static void mcp2515_handle_interrupts(const struct device *dev)
{
   21590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21594:	b082      	sub	sp, #8
   21596:	4604      	mov	r4, r0
	const struct mcp2515_config *dev_cfg = dev->config;
   21598:	6847      	ldr	r7, [r0, #4]
   2159a:	e066      	b.n	2166a <mcp2515_handle_interrupts+0xda>
	/* Loop until INT pin is inactive (all interrupt flags handled) */
	while (1) {
		ret = mcp2515_cmd_read_reg(dev, MCP2515_ADDR_CANINTF,
				&canintf, 1);
		if (ret != 0) {
			LOG_ERR("Couldn't read INTF register %d", ret);
   2159c:	2008      	movs	r0, #8
   2159e:	f7f4 fc13 	bl	15dc8 <z_log_msg_alloc>
   215a2:	f36f 0500 	bfc	r5, #0, #1
   215a6:	f36f 0541 	bfc	r5, #1, #1
   215aa:	f36f 0582 	bfc	r5, #2, #1
   215ae:	f36f 05c5 	bfc	r5, #3, #3
   215b2:	2301      	movs	r3, #1
   215b4:	f363 1588 	bfi	r5, r3, #6, #3
   215b8:	230c      	movs	r3, #12
   215ba:	f363 2552 	bfi	r5, r3, #9, #10
   215be:	f36f 45de 	bfc	r5, #19, #12
   215c2:	f36f 75df 	bfc	r5, #31, #1
   215c6:	4684      	mov	ip, r0
   215c8:	b1a0      	cbz	r0, 215f4 <mcp2515_handle_interrupts+0x64>
   215ca:	f110 0310 	adds.w	r3, r0, #16
   215ce:	d003      	beq.n	215d8 <mcp2515_handle_interrupts+0x48>
   215d0:	4a5a      	ldr	r2, [pc, #360]	; (2173c <mcp2515_handle_interrupts+0x1ac>)
   215d2:	6142      	str	r2, [r0, #20]
   215d4:	f8c0 8018 	str.w	r8, [r0, #24]
   215d8:	b163      	cbz	r3, 215f4 <mcp2515_handle_interrupts+0x64>
   215da:	2303      	movs	r3, #3
   215dc:	f88d 3000 	strb.w	r3, [sp]
   215e0:	2300      	movs	r3, #0
   215e2:	f88d 3001 	strb.w	r3, [sp, #1]
   215e6:	f88d 3002 	strb.w	r3, [sp, #2]
   215ea:	f88d 3003 	strb.w	r3, [sp, #3]
   215ee:	9800      	ldr	r0, [sp, #0]
   215f0:	f8cc 0010 	str.w	r0, [ip, #16]
   215f4:	2300      	movs	r3, #0
   215f6:	462a      	mov	r2, r5
   215f8:	4951      	ldr	r1, [pc, #324]	; (21740 <mcp2515_handle_interrupts+0x1b0>)
   215fa:	4660      	mov	r0, ip
   215fc:	f006 fbef 	bl	27dde <z_log_msg_finalize>
			continue;
   21600:	e033      	b.n	2166a <mcp2515_handle_interrupts+0xda>
			/* No interrupt flags set */
			break;
		}

		if (canintf & MCP2515_CANINTF_RX0IF) {
			mcp2515_rx(dev, 0);
   21602:	2100      	movs	r1, #0
   21604:	4620      	mov	r0, r4
   21606:	f00a fc60 	bl	2beca <mcp2515_rx>

			/* RX0IF flag cleared automatically during read */
			canintf &= ~MCP2515_CANINTF_RX0IF;
   2160a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2160e:	f023 0301 	bic.w	r3, r3, #1
   21612:	f88d 3007 	strb.w	r3, [sp, #7]
   21616:	e039      	b.n	2168c <mcp2515_handle_interrupts+0xfc>
		}

		if (canintf & MCP2515_CANINTF_RX1IF) {
			mcp2515_rx(dev, 1);
   21618:	2101      	movs	r1, #1
   2161a:	4620      	mov	r0, r4
   2161c:	f00a fc55 	bl	2beca <mcp2515_rx>

			/* RX1IF flag cleared automatically during read */
			canintf &= ~MCP2515_CANINTF_RX1IF;
   21620:	f89d 3007 	ldrb.w	r3, [sp, #7]
   21624:	f023 0302 	bic.w	r3, r3, #2
   21628:	f88d 3007 	strb.w	r3, [sp, #7]
   2162c:	e033      	b.n	21696 <mcp2515_handle_interrupts+0x106>
		}

		if (canintf & MCP2515_CANINTF_TX0IF) {
			mcp2515_tx_done(dev, 0, 0);
   2162e:	2200      	movs	r2, #0
   21630:	4611      	mov	r1, r2
   21632:	4620      	mov	r0, r4
   21634:	f00a fbd5 	bl	2bde2 <mcp2515_tx_done>
   21638:	e032      	b.n	216a0 <mcp2515_handle_interrupts+0x110>
		}

		if (canintf & MCP2515_CANINTF_TX1IF) {
			mcp2515_tx_done(dev, 1, 0);
   2163a:	2200      	movs	r2, #0
   2163c:	2101      	movs	r1, #1
   2163e:	4620      	mov	r0, r4
   21640:	f00a fbcf 	bl	2bde2 <mcp2515_tx_done>
   21644:	e031      	b.n	216aa <mcp2515_handle_interrupts+0x11a>
		}

		if (canintf & MCP2515_CANINTF_TX2IF) {
			mcp2515_tx_done(dev, 2, 0);
   21646:	2200      	movs	r2, #0
   21648:	2102      	movs	r1, #2
   2164a:	4620      	mov	r0, r4
   2164c:	f00a fbc9 	bl	2bde2 <mcp2515_tx_done>
   21650:	e030      	b.n	216b4 <mcp2515_handle_interrupts+0x124>
		}

		if (canintf & MCP2515_CANINTF_ERRIF) {
			mcp2515_handle_errors(dev);
   21652:	4620      	mov	r0, r4
   21654:	f7ff fd44 	bl	210e0 <mcp2515_handle_errors>
   21658:	e031      	b.n	216be <mcp2515_handle_interrupts+0x12e>
 * @param spec GPIO specification from devicetree
 * @return a value from gpio_pin_get()
 */
static inline int gpio_pin_get_dt(const struct gpio_dt_spec *spec)
{
	return gpio_pin_get(spec->port, spec->pin);
   2165a:	7d39      	ldrb	r1, [r7, #20]
   2165c:	6938      	ldr	r0, [r7, #16]
   2165e:	f00a f9d9 	bl	2ba14 <gpio_pin_get>
					canintf, ~canintf);
		}

		/* Break from loop if INT pin is inactive */
		ret = gpio_pin_get_dt(&dev_cfg->int_gpio);
		if (ret < 0) {
   21662:	2800      	cmp	r0, #0
   21664:	db36      	blt.n	216d4 <mcp2515_handle_interrupts+0x144>
			LOG_ERR("Couldn't read INT pin");
		} else if (ret == 0) {
   21666:	2800      	cmp	r0, #0
   21668:	d065      	beq.n	21736 <mcp2515_handle_interrupts+0x1a6>
		ret = mcp2515_cmd_read_reg(dev, MCP2515_ADDR_CANINTF,
   2166a:	2301      	movs	r3, #1
   2166c:	f10d 0207 	add.w	r2, sp, #7
   21670:	212c      	movs	r1, #44	; 0x2c
   21672:	4620      	mov	r0, r4
   21674:	f00a fa92 	bl	2bb9c <mcp2515_cmd_read_reg>
		if (ret != 0) {
   21678:	4680      	mov	r8, r0
   2167a:	2800      	cmp	r0, #0
   2167c:	d18e      	bne.n	2159c <mcp2515_handle_interrupts+0xc>
		if (canintf == 0) {
   2167e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   21682:	2b00      	cmp	r3, #0
   21684:	d057      	beq.n	21736 <mcp2515_handle_interrupts+0x1a6>
		if (canintf & MCP2515_CANINTF_RX0IF) {
   21686:	f013 0f01 	tst.w	r3, #1
   2168a:	d1ba      	bne.n	21602 <mcp2515_handle_interrupts+0x72>
		if (canintf & MCP2515_CANINTF_RX1IF) {
   2168c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   21690:	f013 0f02 	tst.w	r3, #2
   21694:	d1c0      	bne.n	21618 <mcp2515_handle_interrupts+0x88>
		if (canintf & MCP2515_CANINTF_TX0IF) {
   21696:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2169a:	f013 0f04 	tst.w	r3, #4
   2169e:	d1c6      	bne.n	2162e <mcp2515_handle_interrupts+0x9e>
		if (canintf & MCP2515_CANINTF_TX1IF) {
   216a0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   216a4:	f013 0f08 	tst.w	r3, #8
   216a8:	d1c7      	bne.n	2163a <mcp2515_handle_interrupts+0xaa>
		if (canintf & MCP2515_CANINTF_TX2IF) {
   216aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
   216ae:	f013 0f10 	tst.w	r3, #16
   216b2:	d1c8      	bne.n	21646 <mcp2515_handle_interrupts+0xb6>
		if (canintf & MCP2515_CANINTF_ERRIF) {
   216b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   216b8:	f013 0f20 	tst.w	r3, #32
   216bc:	d1c9      	bne.n	21652 <mcp2515_handle_interrupts+0xc2>
		if (canintf != 0) {
   216be:	f89d 2007 	ldrb.w	r2, [sp, #7]
   216c2:	2a00      	cmp	r2, #0
   216c4:	d0c9      	beq.n	2165a <mcp2515_handle_interrupts+0xca>
			mcp2515_cmd_bit_modify(dev, MCP2515_ADDR_CANINTF,
   216c6:	43d3      	mvns	r3, r2
   216c8:	b2db      	uxtb	r3, r3
   216ca:	212c      	movs	r1, #44	; 0x2c
   216cc:	4620      	mov	r0, r4
   216ce:	f00a fa0a 	bl	2bae6 <mcp2515_cmd_bit_modify>
   216d2:	e7c2      	b.n	2165a <mcp2515_handle_interrupts+0xca>
			LOG_ERR("Couldn't read INT pin");
   216d4:	2006      	movs	r0, #6
   216d6:	f7f4 fb77 	bl	15dc8 <z_log_msg_alloc>
   216da:	f36f 0600 	bfc	r6, #0, #1
   216de:	f36f 0641 	bfc	r6, #1, #1
   216e2:	f36f 0682 	bfc	r6, #2, #1
   216e6:	f36f 06c5 	bfc	r6, #3, #3
   216ea:	2301      	movs	r3, #1
   216ec:	f363 1688 	bfi	r6, r3, #6, #3
   216f0:	2308      	movs	r3, #8
   216f2:	f363 2652 	bfi	r6, r3, #9, #10
   216f6:	f36f 46de 	bfc	r6, #19, #12
   216fa:	f36f 76df 	bfc	r6, #31, #1
   216fe:	4684      	mov	ip, r0
   21700:	b190      	cbz	r0, 21728 <mcp2515_handle_interrupts+0x198>
   21702:	f110 0310 	adds.w	r3, r0, #16
   21706:	d001      	beq.n	2170c <mcp2515_handle_interrupts+0x17c>
   21708:	4a0e      	ldr	r2, [pc, #56]	; (21744 <mcp2515_handle_interrupts+0x1b4>)
   2170a:	6142      	str	r2, [r0, #20]
   2170c:	b163      	cbz	r3, 21728 <mcp2515_handle_interrupts+0x198>
   2170e:	2302      	movs	r3, #2
   21710:	f88d 3000 	strb.w	r3, [sp]
   21714:	2300      	movs	r3, #0
   21716:	f88d 3001 	strb.w	r3, [sp, #1]
   2171a:	f88d 3002 	strb.w	r3, [sp, #2]
   2171e:	f88d 3003 	strb.w	r3, [sp, #3]
   21722:	9800      	ldr	r0, [sp, #0]
   21724:	f8cc 0010 	str.w	r0, [ip, #16]
   21728:	2300      	movs	r3, #0
   2172a:	4632      	mov	r2, r6
   2172c:	4904      	ldr	r1, [pc, #16]	; (21740 <mcp2515_handle_interrupts+0x1b0>)
   2172e:	4660      	mov	r0, ip
   21730:	f006 fb55 	bl	27dde <z_log_msg_finalize>
   21734:	e799      	b.n	2166a <mcp2515_handle_interrupts+0xda>
			/* All interrupt flags handled */
			break;
		}
	}
}
   21736:	b002      	add	sp, #8
   21738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2173c:	00030c88 	.word	0x00030c88
   21740:	0002ded8 	.word	0x0002ded8
   21744:	00030ca8 	.word	0x00030ca8

00021748 <mcp2515_init>:
	}
};


static int mcp2515_init(const struct device *dev)
{
   21748:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2174c:	b08f      	sub	sp, #60	; 0x3c
   2174e:	af08      	add	r7, sp, #32
   21750:	4606      	mov	r6, r0
	const struct mcp2515_config *dev_cfg = dev->config;
   21752:	6844      	ldr	r4, [r0, #4]
	struct mcp2515_data *dev_data = dev->data;
   21754:	6905      	ldr	r5, [r0, #16]
	struct can_timing timing;
	int ret;

	k_sem_init(&dev_data->int_sem, 0, 1);
   21756:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
	return z_impl_k_sem_init(sem, initial_count, limit);
   2175a:	2201      	movs	r2, #1
   2175c:	2100      	movs	r1, #0
   2175e:	f00b fbf2 	bl	2cf46 <z_impl_k_sem_init>
	k_mutex_init(&dev_data->mutex);
   21762:	f505 70b2 	add.w	r0, r5, #356	; 0x164
	return z_impl_k_mutex_init(mutex);
   21766:	f00b fb31 	bl	2cdcc <z_impl_k_mutex_init>
	k_sem_init(&dev_data->tx_sem, MCP2515_TX_CNT, MCP2515_TX_CNT);
   2176a:	f105 00e4 	add.w	r0, r5, #228	; 0xe4
	return z_impl_k_sem_init(sem, initial_count, limit);
   2176e:	2201      	movs	r2, #1
   21770:	4611      	mov	r1, r2
   21772:	f00b fbe8 	bl	2cf46 <z_impl_k_sem_init>

	if (dev_cfg->phy != NULL) {
   21776:	6b20      	ldr	r0, [r4, #48]	; 0x30
   21778:	b118      	cbz	r0, 21782 <mcp2515_init+0x3a>
   2177a:	f00b f9e6 	bl	2cb4a <z_device_is_ready>
		if (!device_is_ready(dev_cfg->phy)) {
   2177e:	2800      	cmp	r0, #0
   21780:	d07a      	beq.n	21878 <mcp2515_init+0x130>
			LOG_ERR("CAN transceiver not ready");
			return -ENODEV;
		}
	}

	if (!spi_is_ready_dt(&dev_cfg->bus)) {
   21782:	4620      	mov	r0, r4
   21784:	f00a fbc4 	bl	2bf10 <spi_is_ready_dt>
   21788:	2800      	cmp	r0, #0
   2178a:	f000 80a3 	beq.w	218d4 <mcp2515_init+0x18c>
		LOG_ERR("SPI bus %s not ready", dev_cfg->bus.bus->name);
		return -ENODEV;
	}

	/* Reset MCP2515 */
	if (mcp2515_cmd_soft_reset(dev)) {
   2178e:	4630      	mov	r0, r6
   21790:	f00a f996 	bl	2bac0 <mcp2515_cmd_soft_reset>
   21794:	2800      	cmp	r0, #0
   21796:	f040 80f4 	bne.w	21982 <mcp2515_init+0x23a>
		LOG_ERR("Soft-reset failed");
		return -EIO;
	}

	/* Initialize interrupt handling  */
	if (!device_is_ready(dev_cfg->int_gpio.port)) {
   2179a:	6920      	ldr	r0, [r4, #16]
   2179c:	f00b f9d5 	bl	2cb4a <z_device_is_ready>
   217a0:	2800      	cmp	r0, #0
   217a2:	f000 811c 	beq.w	219de <mcp2515_init+0x296>
		LOG_ERR("Interrupt GPIO port not ready");
		return -ENODEV;
	}

	if (gpio_pin_configure_dt(&dev_cfg->int_gpio, GPIO_INPUT)) {
   217a6:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   217aa:	f104 0010 	add.w	r0, r4, #16
   217ae:	f00a f91a 	bl	2b9e6 <gpio_pin_configure_dt>
   217b2:	2800      	cmp	r0, #0
   217b4:	f040 8141 	bne.w	21a3a <mcp2515_init+0x2f2>
		LOG_ERR("Unable to configure interrupt GPIO");
		return -EINVAL;
	}

	gpio_init_callback(&(dev_data->int_gpio_cb), mcp2515_int_gpio_callback,
			   BIT(dev_cfg->int_gpio.pin));
   217b8:	7d22      	ldrb	r2, [r4, #20]
   217ba:	2301      	movs	r3, #1
   217bc:	4093      	lsls	r3, r2
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   217be:	4ab6      	ldr	r2, [pc, #728]	; (21a98 <mcp2515_init+0x350>)
   217c0:	606a      	str	r2, [r5, #4]
	callback->pin_mask = pin_mask;
   217c2:	60ab      	str	r3, [r5, #8]

	if (gpio_add_callback(dev_cfg->int_gpio.port,
   217c4:	4629      	mov	r1, r5
   217c6:	6920      	ldr	r0, [r4, #16]
   217c8:	f00a f934 	bl	2ba34 <gpio_add_callback>
   217cc:	2800      	cmp	r0, #0
   217ce:	f040 81e1 	bne.w	21b94 <mcp2515_init+0x44c>
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
   217d2:	6920      	ldr	r0, [r4, #16]
   217d4:	7d21      	ldrb	r1, [r4, #20]
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_INTERRUPT_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
   217d6:	f04f 62b8 	mov.w	r2, #96468992	; 0x5c00000
   217da:	f00a f8c8 	bl	2b96e <z_impl_gpio_pin_interrupt_configure>
			      &(dev_data->int_gpio_cb))) {
		return -EINVAL;
	}

	if (gpio_pin_interrupt_configure_dt(&dev_cfg->int_gpio,
   217de:	2800      	cmp	r0, #0
   217e0:	f040 81db 	bne.w	21b9a <mcp2515_init+0x452>
					    GPIO_INT_EDGE_TO_ACTIVE)) {
		return -EINVAL;
	}

	k_thread_create(&dev_data->int_thread, dev_data->int_thread_stack,
   217e4:	f105 0010 	add.w	r0, r5, #16
   217e8:	f8d5 10c8 	ldr.w	r1, [r5, #200]	; 0xc8
			dev_cfg->int_thread_stack_size,
   217ec:	69a2      	ldr	r2, [r4, #24]
			(k_thread_entry_t) mcp2515_int_thread, (void *)dev,
			NULL, NULL, K_PRIO_COOP(dev_cfg->int_thread_priority),
   217ee:	69e3      	ldr	r3, [r4, #28]
	k_thread_create(&dev_data->int_thread, dev_data->int_thread_stack,
   217f0:	3b10      	subs	r3, #16
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   217f2:	f04f 0800 	mov.w	r8, #0
   217f6:	f04f 0900 	mov.w	r9, #0
   217fa:	e9cd 8906 	strd	r8, r9, [sp, #24]
   217fe:	f8cd 8010 	str.w	r8, [sp, #16]
   21802:	9303      	str	r3, [sp, #12]
   21804:	f8cd 8008 	str.w	r8, [sp, #8]
   21808:	f8cd 8004 	str.w	r8, [sp, #4]
   2180c:	9600      	str	r6, [sp, #0]
   2180e:	4ba3      	ldr	r3, [pc, #652]	; (21a9c <mcp2515_init+0x354>)
   21810:	f00b fa9e 	bl	2cd50 <z_impl_k_thread_create>
			0, K_NO_WAIT);

	(void)memset(dev_data->rx_cb, 0, sizeof(dev_data->rx_cb));
   21814:	2214      	movs	r2, #20
   21816:	4641      	mov	r1, r8
   21818:	f505 7086 	add.w	r0, r5, #268	; 0x10c
   2181c:	f006 ff60 	bl	286e0 <memset>
	(void)memset(dev_data->filter, 0, sizeof(dev_data->filter));
   21820:	2228      	movs	r2, #40	; 0x28
   21822:	4641      	mov	r1, r8
   21824:	f505 709a 	add.w	r0, r5, #308	; 0x134
   21828:	f006 ff5a 	bl	286e0 <memset>
	dev_data->old_state = CAN_STATE_ERROR_ACTIVE;
   2182c:	f885 8178 	strb.w	r8, [r5, #376]	; 0x178

	timing.sjw = dev_cfg->tq_sjw;
   21830:	f894 3020 	ldrb.w	r3, [r4, #32]
   21834:	81bb      	strh	r3, [r7, #12]
	if (dev_cfg->sample_point && USE_SP_ALGO) {
   21836:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   21838:	2b00      	cmp	r3, #0
   2183a:	f000 816b 	beq.w	21b14 <mcp2515_init+0x3cc>
		ret = can_calc_timing(dev, &timing, dev_cfg->bus_speed,
   2183e:	6a62      	ldr	r2, [r4, #36]	; 0x24
	return z_impl_can_calc_timing(dev, res, bitrate, sample_pnt);
   21840:	f107 010c 	add.w	r1, r7, #12
   21844:	4630      	mov	r0, r6
   21846:	f7ff fb1d 	bl	20e84 <z_impl_can_calc_timing>
				      dev_cfg->sample_point);
		if (ret == -EINVAL) {
   2184a:	f110 0f16 	cmn.w	r0, #22
   2184e:	f000 8133 	beq.w	21ab8 <mcp2515_init+0x370>
	return z_impl_k_usleep(us);
   21852:	2080      	movs	r0, #128	; 0x80
   21854:	f004 fa42 	bl	25cdc <z_impl_k_usleep>
	const struct can_driver_api *api = (const struct can_driver_api *)dev->api;
   21858:	68b3      	ldr	r3, [r6, #8]
	return api->set_timing(dev, timing);
   2185a:	691b      	ldr	r3, [r3, #16]
   2185c:	f107 010c 	add.w	r1, r7, #12
   21860:	4630      	mov	r0, r6
   21862:	4798      	blx	r3
	}

	k_usleep(MCP2515_OSC_STARTUP_US);

	ret = can_set_timing(dev, &timing);
	if (ret) {
   21864:	b920      	cbnz	r0, 21870 <mcp2515_init+0x128>
	const struct can_driver_api *api = (const struct can_driver_api *)dev->api;
   21866:	68b3      	ldr	r3, [r6, #8]
	return api->set_mode(dev, mode);
   21868:	68db      	ldr	r3, [r3, #12]
   2186a:	2100      	movs	r1, #0
   2186c:	4630      	mov	r0, r6
   2186e:	4798      	blx	r3
	}

	ret = can_set_mode(dev, CAN_MODE_NORMAL);

	return ret;
}
   21870:	371c      	adds	r7, #28
   21872:	46bd      	mov	sp, r7
   21874:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			LOG_ERR("CAN transceiver not ready");
   21878:	2006      	movs	r0, #6
   2187a:	f7f4 faa5 	bl	15dc8 <z_log_msg_alloc>
   2187e:	2200      	movs	r2, #0
   21880:	f36f 0200 	bfc	r2, #0, #1
   21884:	f36f 0241 	bfc	r2, #1, #1
   21888:	f36f 0282 	bfc	r2, #2, #1
   2188c:	f36f 02c5 	bfc	r2, #3, #3
   21890:	2301      	movs	r3, #1
   21892:	f363 1288 	bfi	r2, r3, #6, #3
   21896:	2308      	movs	r3, #8
   21898:	f363 2252 	bfi	r2, r3, #9, #10
   2189c:	f36f 42de 	bfc	r2, #19, #12
   218a0:	f36f 72df 	bfc	r2, #31, #1
   218a4:	4604      	mov	r4, r0
   218a6:	b168      	cbz	r0, 218c4 <mcp2515_init+0x17c>
   218a8:	f110 0310 	adds.w	r3, r0, #16
   218ac:	d001      	beq.n	218b2 <mcp2515_init+0x16a>
   218ae:	497c      	ldr	r1, [pc, #496]	; (21aa0 <mcp2515_init+0x358>)
   218b0:	6141      	str	r1, [r0, #20]
   218b2:	b13b      	cbz	r3, 218c4 <mcp2515_init+0x17c>
   218b4:	2302      	movs	r3, #2
   218b6:	723b      	strb	r3, [r7, #8]
   218b8:	2300      	movs	r3, #0
   218ba:	727b      	strb	r3, [r7, #9]
   218bc:	72bb      	strb	r3, [r7, #10]
   218be:	72fb      	strb	r3, [r7, #11]
   218c0:	68b8      	ldr	r0, [r7, #8]
   218c2:	6120      	str	r0, [r4, #16]
   218c4:	2300      	movs	r3, #0
   218c6:	4977      	ldr	r1, [pc, #476]	; (21aa4 <mcp2515_init+0x35c>)
   218c8:	4620      	mov	r0, r4
   218ca:	f006 fa88 	bl	27dde <z_log_msg_finalize>
			return -ENODEV;
   218ce:	f06f 0012 	mvn.w	r0, #18
   218d2:	e7cd      	b.n	21870 <mcp2515_init+0x128>
		LOG_ERR("SPI bus %s not ready", dev_cfg->bus.bus->name);
   218d4:	6823      	ldr	r3, [r4, #0]
   218d6:	6819      	ldr	r1, [r3, #0]
   218d8:	466d      	mov	r5, sp
   218da:	2300      	movs	r3, #0
   218dc:	723b      	strb	r3, [r7, #8]
   218de:	2302      	movs	r3, #2
   218e0:	727b      	strb	r3, [r7, #9]
   218e2:	b088      	sub	sp, #32
   218e4:	462c      	mov	r4, r5
   218e6:	f115 0210 	adds.w	r2, r5, #16
   218ea:	d011      	beq.n	21910 <mcp2515_init+0x1c8>
   218ec:	200e      	movs	r0, #14
   218ee:	b11a      	cbz	r2, 218f8 <mcp2515_init+0x1b0>
   218f0:	2804      	cmp	r0, #4
   218f2:	dd01      	ble.n	218f8 <mcp2515_init+0x1b0>
   218f4:	4b6c      	ldr	r3, [pc, #432]	; (21aa8 <mcp2515_init+0x360>)
   218f6:	6163      	str	r3, [r4, #20]
   218f8:	2300      	movs	r3, #0
   218fa:	713b      	strb	r3, [r7, #4]
   218fc:	2302      	movs	r3, #2
   218fe:	717b      	strb	r3, [r7, #5]
   21900:	b19a      	cbz	r2, 2192a <mcp2515_init+0x1e2>
   21902:	2808      	cmp	r0, #8
   21904:	dd00      	ble.n	21908 <mcp2515_init+0x1c0>
   21906:	61a1      	str	r1, [r4, #24]
   21908:	f104 031c 	add.w	r3, r4, #28
   2190c:	2100      	movs	r1, #0
   2190e:	e00a      	b.n	21926 <mcp2515_init+0x1de>
   21910:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   21914:	e7eb      	b.n	218ee <mcp2515_init+0x1a6>
   21916:	f101 0618 	add.w	r6, r1, #24
   2191a:	443e      	add	r6, r7
   2191c:	f816 6c14 	ldrb.w	r6, [r6, #-20]
   21920:	f803 6b01 	strb.w	r6, [r3], #1
   21924:	3101      	adds	r1, #1
   21926:	2901      	cmp	r1, #1
   21928:	d9f5      	bls.n	21916 <mcp2515_init+0x1ce>
   2192a:	280d      	cmp	r0, #13
   2192c:	dd26      	ble.n	2197c <mcp2515_init+0x234>
   2192e:	230e      	movs	r3, #14
   21930:	b142      	cbz	r2, 21944 <mcp2515_init+0x1fc>
   21932:	2103      	movs	r1, #3
   21934:	7239      	strb	r1, [r7, #8]
   21936:	2100      	movs	r1, #0
   21938:	7279      	strb	r1, [r7, #9]
   2193a:	72b9      	strb	r1, [r7, #10]
   2193c:	2101      	movs	r1, #1
   2193e:	72f9      	strb	r1, [r7, #11]
   21940:	68b8      	ldr	r0, [r7, #8]
   21942:	6120      	str	r0, [r4, #16]
   21944:	2100      	movs	r1, #0
   21946:	f36f 0100 	bfc	r1, #0, #1
   2194a:	f36f 0141 	bfc	r1, #1, #1
   2194e:	f36f 0182 	bfc	r1, #2, #1
   21952:	f36f 01c5 	bfc	r1, #3, #3
   21956:	2001      	movs	r0, #1
   21958:	f360 1188 	bfi	r1, r0, #6, #3
   2195c:	f3c3 0309 	ubfx	r3, r3, #0, #10
   21960:	f363 2152 	bfi	r1, r3, #9, #10
   21964:	f36f 41de 	bfc	r1, #19, #12
   21968:	f36f 71df 	bfc	r1, #31, #1
   2196c:	2300      	movs	r3, #0
   2196e:	484d      	ldr	r0, [pc, #308]	; (21aa4 <mcp2515_init+0x35c>)
   21970:	f006 fa4d 	bl	27e0e <z_impl_z_log_msg_static_create>
   21974:	46ad      	mov	sp, r5
		return -ENODEV;
   21976:	f06f 0012 	mvn.w	r0, #18
   2197a:	e779      	b.n	21870 <mcp2515_init+0x128>
		LOG_ERR("SPI bus %s not ready", dev_cfg->bus.bus->name);
   2197c:	f06f 031b 	mvn.w	r3, #27
   21980:	e7d6      	b.n	21930 <mcp2515_init+0x1e8>
		LOG_ERR("Soft-reset failed");
   21982:	2006      	movs	r0, #6
   21984:	f7f4 fa20 	bl	15dc8 <z_log_msg_alloc>
   21988:	2200      	movs	r2, #0
   2198a:	f36f 0200 	bfc	r2, #0, #1
   2198e:	f36f 0241 	bfc	r2, #1, #1
   21992:	f36f 0282 	bfc	r2, #2, #1
   21996:	f36f 02c5 	bfc	r2, #3, #3
   2199a:	2301      	movs	r3, #1
   2199c:	f363 1288 	bfi	r2, r3, #6, #3
   219a0:	2308      	movs	r3, #8
   219a2:	f363 2252 	bfi	r2, r3, #9, #10
   219a6:	f36f 42de 	bfc	r2, #19, #12
   219aa:	f36f 72df 	bfc	r2, #31, #1
   219ae:	4604      	mov	r4, r0
   219b0:	b168      	cbz	r0, 219ce <mcp2515_init+0x286>
   219b2:	f110 0310 	adds.w	r3, r0, #16
   219b6:	d001      	beq.n	219bc <mcp2515_init+0x274>
   219b8:	493c      	ldr	r1, [pc, #240]	; (21aac <mcp2515_init+0x364>)
   219ba:	6141      	str	r1, [r0, #20]
   219bc:	b13b      	cbz	r3, 219ce <mcp2515_init+0x286>
   219be:	2302      	movs	r3, #2
   219c0:	723b      	strb	r3, [r7, #8]
   219c2:	2300      	movs	r3, #0
   219c4:	727b      	strb	r3, [r7, #9]
   219c6:	72bb      	strb	r3, [r7, #10]
   219c8:	72fb      	strb	r3, [r7, #11]
   219ca:	68b8      	ldr	r0, [r7, #8]
   219cc:	6120      	str	r0, [r4, #16]
   219ce:	2300      	movs	r3, #0
   219d0:	4934      	ldr	r1, [pc, #208]	; (21aa4 <mcp2515_init+0x35c>)
   219d2:	4620      	mov	r0, r4
   219d4:	f006 fa03 	bl	27dde <z_log_msg_finalize>
		return -EIO;
   219d8:	f06f 0004 	mvn.w	r0, #4
   219dc:	e748      	b.n	21870 <mcp2515_init+0x128>
		LOG_ERR("Interrupt GPIO port not ready");
   219de:	2006      	movs	r0, #6
   219e0:	f7f4 f9f2 	bl	15dc8 <z_log_msg_alloc>
   219e4:	2200      	movs	r2, #0
   219e6:	f36f 0200 	bfc	r2, #0, #1
   219ea:	f36f 0241 	bfc	r2, #1, #1
   219ee:	f36f 0282 	bfc	r2, #2, #1
   219f2:	f36f 02c5 	bfc	r2, #3, #3
   219f6:	2301      	movs	r3, #1
   219f8:	f363 1288 	bfi	r2, r3, #6, #3
   219fc:	2308      	movs	r3, #8
   219fe:	f363 2252 	bfi	r2, r3, #9, #10
   21a02:	f36f 42de 	bfc	r2, #19, #12
   21a06:	f36f 72df 	bfc	r2, #31, #1
   21a0a:	4604      	mov	r4, r0
   21a0c:	b168      	cbz	r0, 21a2a <mcp2515_init+0x2e2>
   21a0e:	f110 0310 	adds.w	r3, r0, #16
   21a12:	d001      	beq.n	21a18 <mcp2515_init+0x2d0>
   21a14:	4926      	ldr	r1, [pc, #152]	; (21ab0 <mcp2515_init+0x368>)
   21a16:	6141      	str	r1, [r0, #20]
   21a18:	b13b      	cbz	r3, 21a2a <mcp2515_init+0x2e2>
   21a1a:	2302      	movs	r3, #2
   21a1c:	723b      	strb	r3, [r7, #8]
   21a1e:	2300      	movs	r3, #0
   21a20:	727b      	strb	r3, [r7, #9]
   21a22:	72bb      	strb	r3, [r7, #10]
   21a24:	72fb      	strb	r3, [r7, #11]
   21a26:	68b8      	ldr	r0, [r7, #8]
   21a28:	6120      	str	r0, [r4, #16]
   21a2a:	2300      	movs	r3, #0
   21a2c:	491d      	ldr	r1, [pc, #116]	; (21aa4 <mcp2515_init+0x35c>)
   21a2e:	4620      	mov	r0, r4
   21a30:	f006 f9d5 	bl	27dde <z_log_msg_finalize>
		return -ENODEV;
   21a34:	f06f 0012 	mvn.w	r0, #18
   21a38:	e71a      	b.n	21870 <mcp2515_init+0x128>
		LOG_ERR("Unable to configure interrupt GPIO");
   21a3a:	2006      	movs	r0, #6
   21a3c:	f7f4 f9c4 	bl	15dc8 <z_log_msg_alloc>
   21a40:	2200      	movs	r2, #0
   21a42:	f36f 0200 	bfc	r2, #0, #1
   21a46:	f36f 0241 	bfc	r2, #1, #1
   21a4a:	f36f 0282 	bfc	r2, #2, #1
   21a4e:	f36f 02c5 	bfc	r2, #3, #3
   21a52:	2301      	movs	r3, #1
   21a54:	f363 1288 	bfi	r2, r3, #6, #3
   21a58:	2308      	movs	r3, #8
   21a5a:	f363 2252 	bfi	r2, r3, #9, #10
   21a5e:	f36f 42de 	bfc	r2, #19, #12
   21a62:	f36f 72df 	bfc	r2, #31, #1
   21a66:	4604      	mov	r4, r0
   21a68:	b168      	cbz	r0, 21a86 <mcp2515_init+0x33e>
   21a6a:	f110 0310 	adds.w	r3, r0, #16
   21a6e:	d001      	beq.n	21a74 <mcp2515_init+0x32c>
   21a70:	4910      	ldr	r1, [pc, #64]	; (21ab4 <mcp2515_init+0x36c>)
   21a72:	6141      	str	r1, [r0, #20]
   21a74:	b13b      	cbz	r3, 21a86 <mcp2515_init+0x33e>
   21a76:	2302      	movs	r3, #2
   21a78:	723b      	strb	r3, [r7, #8]
   21a7a:	2300      	movs	r3, #0
   21a7c:	727b      	strb	r3, [r7, #9]
   21a7e:	72bb      	strb	r3, [r7, #10]
   21a80:	72fb      	strb	r3, [r7, #11]
   21a82:	68b8      	ldr	r0, [r7, #8]
   21a84:	6120      	str	r0, [r4, #16]
   21a86:	2300      	movs	r3, #0
   21a88:	4906      	ldr	r1, [pc, #24]	; (21aa4 <mcp2515_init+0x35c>)
   21a8a:	4620      	mov	r0, r4
   21a8c:	f006 f9a7 	bl	27dde <z_log_msg_finalize>
		return -EINVAL;
   21a90:	f06f 0015 	mvn.w	r0, #21
   21a94:	e6ec      	b.n	21870 <mcp2515_init+0x128>
   21a96:	bf00      	nop
   21a98:	0002be39 	.word	0x0002be39
   21a9c:	0002bef3 	.word	0x0002bef3
   21aa0:	00030cc0 	.word	0x00030cc0
   21aa4:	0002ded8 	.word	0x0002ded8
   21aa8:	00030cdc 	.word	0x00030cdc
   21aac:	00030cf4 	.word	0x00030cf4
   21ab0:	00030d08 	.word	0x00030d08
   21ab4:	00030d28 	.word	0x00030d28
			LOG_ERR("Can't find timing for given param");
   21ab8:	2006      	movs	r0, #6
   21aba:	f7f4 f985 	bl	15dc8 <z_log_msg_alloc>
   21abe:	4642      	mov	r2, r8
   21ac0:	f36f 0200 	bfc	r2, #0, #1
   21ac4:	f36f 0241 	bfc	r2, #1, #1
   21ac8:	f36f 0282 	bfc	r2, #2, #1
   21acc:	f36f 02c5 	bfc	r2, #3, #3
   21ad0:	2301      	movs	r3, #1
   21ad2:	f363 1288 	bfi	r2, r3, #6, #3
   21ad6:	2308      	movs	r3, #8
   21ad8:	f363 2252 	bfi	r2, r3, #9, #10
   21adc:	f36f 42de 	bfc	r2, #19, #12
   21ae0:	f36f 72df 	bfc	r2, #31, #1
   21ae4:	4604      	mov	r4, r0
   21ae6:	b168      	cbz	r0, 21b04 <mcp2515_init+0x3bc>
   21ae8:	f110 0310 	adds.w	r3, r0, #16
   21aec:	d001      	beq.n	21af2 <mcp2515_init+0x3aa>
   21aee:	492c      	ldr	r1, [pc, #176]	; (21ba0 <mcp2515_init+0x458>)
   21af0:	6141      	str	r1, [r0, #20]
   21af2:	b13b      	cbz	r3, 21b04 <mcp2515_init+0x3bc>
   21af4:	2302      	movs	r3, #2
   21af6:	723b      	strb	r3, [r7, #8]
   21af8:	2300      	movs	r3, #0
   21afa:	727b      	strb	r3, [r7, #9]
   21afc:	72bb      	strb	r3, [r7, #10]
   21afe:	72fb      	strb	r3, [r7, #11]
   21b00:	68b8      	ldr	r0, [r7, #8]
   21b02:	6120      	str	r0, [r4, #16]
   21b04:	2300      	movs	r3, #0
   21b06:	4927      	ldr	r1, [pc, #156]	; (21ba4 <mcp2515_init+0x45c>)
   21b08:	4620      	mov	r0, r4
   21b0a:	f006 f968 	bl	27dde <z_log_msg_finalize>
			return -EIO;
   21b0e:	f06f 0004 	mvn.w	r0, #4
   21b12:	e6ad      	b.n	21870 <mcp2515_init+0x128>
		timing.prop_seg = dev_cfg->tq_prop;
   21b14:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   21b18:	81fb      	strh	r3, [r7, #14]
		timing.phase_seg1 = dev_cfg->tq_bs1;
   21b1a:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   21b1e:	823b      	strh	r3, [r7, #16]
		timing.phase_seg2 = dev_cfg->tq_bs2;
   21b20:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   21b24:	827b      	strh	r3, [r7, #18]
		ret = can_calc_prescaler(dev, &timing, dev_cfg->bus_speed);
   21b26:	6a62      	ldr	r2, [r4, #36]	; 0x24
   21b28:	f107 010c 	add.w	r1, r7, #12
   21b2c:	4630      	mov	r0, r6
   21b2e:	f009 ff00 	bl	2b932 <can_calc_prescaler>
		if (ret) {
   21b32:	4605      	mov	r5, r0
   21b34:	2800      	cmp	r0, #0
   21b36:	f43f ae8c 	beq.w	21852 <mcp2515_init+0x10a>
			LOG_WRN("Bitrate error: %d", ret);
   21b3a:	2008      	movs	r0, #8
   21b3c:	f7f4 f944 	bl	15dc8 <z_log_msg_alloc>
   21b40:	2200      	movs	r2, #0
   21b42:	f36f 0200 	bfc	r2, #0, #1
   21b46:	f36f 0241 	bfc	r2, #1, #1
   21b4a:	f36f 0282 	bfc	r2, #2, #1
   21b4e:	f36f 02c5 	bfc	r2, #3, #3
   21b52:	2302      	movs	r3, #2
   21b54:	f363 1288 	bfi	r2, r3, #6, #3
   21b58:	230c      	movs	r3, #12
   21b5a:	f363 2252 	bfi	r2, r3, #9, #10
   21b5e:	f36f 42de 	bfc	r2, #19, #12
   21b62:	f36f 72df 	bfc	r2, #31, #1
   21b66:	4604      	mov	r4, r0
   21b68:	b170      	cbz	r0, 21b88 <mcp2515_init+0x440>
   21b6a:	f110 0310 	adds.w	r3, r0, #16
   21b6e:	d002      	beq.n	21b76 <mcp2515_init+0x42e>
   21b70:	490d      	ldr	r1, [pc, #52]	; (21ba8 <mcp2515_init+0x460>)
   21b72:	6141      	str	r1, [r0, #20]
   21b74:	6185      	str	r5, [r0, #24]
   21b76:	b13b      	cbz	r3, 21b88 <mcp2515_init+0x440>
   21b78:	2303      	movs	r3, #3
   21b7a:	723b      	strb	r3, [r7, #8]
   21b7c:	2300      	movs	r3, #0
   21b7e:	727b      	strb	r3, [r7, #9]
   21b80:	72bb      	strb	r3, [r7, #10]
   21b82:	72fb      	strb	r3, [r7, #11]
   21b84:	68b8      	ldr	r0, [r7, #8]
   21b86:	6120      	str	r0, [r4, #16]
   21b88:	2300      	movs	r3, #0
   21b8a:	4906      	ldr	r1, [pc, #24]	; (21ba4 <mcp2515_init+0x45c>)
   21b8c:	4620      	mov	r0, r4
   21b8e:	f006 f926 	bl	27dde <z_log_msg_finalize>
   21b92:	e65e      	b.n	21852 <mcp2515_init+0x10a>
		return -EINVAL;
   21b94:	f06f 0015 	mvn.w	r0, #21
   21b98:	e66a      	b.n	21870 <mcp2515_init+0x128>
		return -EINVAL;
   21b9a:	f06f 0015 	mvn.w	r0, #21
   21b9e:	e667      	b.n	21870 <mcp2515_init+0x128>
   21ba0:	00030d4c 	.word	0x00030d4c
   21ba4:	0002ded8 	.word	0x0002ded8
   21ba8:	00030d70 	.word	0x00030d70

00021bac <mcp2515_set_mode_int>:
{
   21bac:	b570      	push	{r4, r5, r6, lr}
   21bae:	b082      	sub	sp, #8
   21bb0:	4606      	mov	r6, r0
   21bb2:	460d      	mov	r5, r1
	mcp2515_cmd_bit_modify(dev, MCP2515_ADDR_CANCTRL,
   21bb4:	014b      	lsls	r3, r1, #5
   21bb6:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
   21bba:	22e0      	movs	r2, #224	; 0xe0
   21bbc:	210f      	movs	r1, #15
   21bbe:	f009 ff92 	bl	2bae6 <mcp2515_cmd_bit_modify>
	mcp2515_cmd_read_reg(dev, MCP2515_ADDR_CANSTAT, &canstat, 1);
   21bc2:	2301      	movs	r3, #1
   21bc4:	f10d 0207 	add.w	r2, sp, #7
   21bc8:	210e      	movs	r1, #14
   21bca:	4630      	mov	r0, r6
   21bcc:	f009 ffe6 	bl	2bb9c <mcp2515_cmd_read_reg>
	int retries = MCP2515_MODE_CHANGE_RETRIES;
   21bd0:	2464      	movs	r4, #100	; 0x64
	while (((canstat & MCP2515_CANSTAT_MODE_MASK) >> MCP2515_CANSTAT_MODE_POS)
   21bd2:	f89d 3007 	ldrb.w	r3, [sp, #7]
		!= mcp2515_mode) {
   21bd6:	ebb5 1f53 	cmp.w	r5, r3, lsr #5
   21bda:	d03f      	beq.n	21c5c <mcp2515_set_mode_int+0xb0>
		if (--retries < 0) {
   21bdc:	3c01      	subs	r4, #1
   21bde:	d40b      	bmi.n	21bf8 <mcp2515_set_mode_int+0x4c>
	return z_impl_k_sleep(timeout);
   21be0:	2001      	movs	r0, #1
   21be2:	2100      	movs	r1, #0
   21be4:	f004 f850 	bl	25c88 <z_impl_k_sleep>
		mcp2515_cmd_read_reg(dev, MCP2515_ADDR_CANSTAT, &canstat, 1);
   21be8:	2301      	movs	r3, #1
   21bea:	f10d 0207 	add.w	r2, sp, #7
   21bee:	210e      	movs	r1, #14
   21bf0:	4630      	mov	r0, r6
   21bf2:	f009 ffd3 	bl	2bb9c <mcp2515_cmd_read_reg>
   21bf6:	e7ec      	b.n	21bd2 <mcp2515_set_mode_int+0x26>
			LOG_ERR("Timeout trying to set MCP2515 operation mode");
   21bf8:	2006      	movs	r0, #6
   21bfa:	f7f4 f8e5 	bl	15dc8 <z_log_msg_alloc>
   21bfe:	2200      	movs	r2, #0
   21c00:	f36f 0200 	bfc	r2, #0, #1
   21c04:	f36f 0241 	bfc	r2, #1, #1
   21c08:	f36f 0282 	bfc	r2, #2, #1
   21c0c:	f36f 02c5 	bfc	r2, #3, #3
   21c10:	2301      	movs	r3, #1
   21c12:	f363 1288 	bfi	r2, r3, #6, #3
   21c16:	2308      	movs	r3, #8
   21c18:	f363 2252 	bfi	r2, r3, #9, #10
   21c1c:	f36f 42de 	bfc	r2, #19, #12
   21c20:	f36f 72df 	bfc	r2, #31, #1
   21c24:	4604      	mov	r4, r0
   21c26:	b188      	cbz	r0, 21c4c <mcp2515_set_mode_int+0xa0>
   21c28:	f110 0310 	adds.w	r3, r0, #16
   21c2c:	d001      	beq.n	21c32 <mcp2515_set_mode_int+0x86>
   21c2e:	490d      	ldr	r1, [pc, #52]	; (21c64 <mcp2515_set_mode_int+0xb8>)
   21c30:	6141      	str	r1, [r0, #20]
   21c32:	b15b      	cbz	r3, 21c4c <mcp2515_set_mode_int+0xa0>
   21c34:	2302      	movs	r3, #2
   21c36:	f88d 3000 	strb.w	r3, [sp]
   21c3a:	2300      	movs	r3, #0
   21c3c:	f88d 3001 	strb.w	r3, [sp, #1]
   21c40:	f88d 3002 	strb.w	r3, [sp, #2]
   21c44:	f88d 3003 	strb.w	r3, [sp, #3]
   21c48:	9800      	ldr	r0, [sp, #0]
   21c4a:	6120      	str	r0, [r4, #16]
   21c4c:	2300      	movs	r3, #0
   21c4e:	4906      	ldr	r1, [pc, #24]	; (21c68 <mcp2515_set_mode_int+0xbc>)
   21c50:	4620      	mov	r0, r4
   21c52:	f006 f8c4 	bl	27dde <z_log_msg_finalize>
			return -EIO;
   21c56:	f06f 0004 	mvn.w	r0, #4
   21c5a:	e000      	b.n	21c5e <mcp2515_set_mode_int+0xb2>
	return 0;
   21c5c:	2000      	movs	r0, #0
}
   21c5e:	b002      	add	sp, #8
   21c60:	bd70      	pop	{r4, r5, r6, pc}
   21c62:	bf00      	nop
   21c64:	00030d84 	.word	0x00030d84
   21c68:	0002ded8 	.word	0x0002ded8

00021c6c <mcp2515_stop>:
{
   21c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21c70:	b082      	sub	sp, #8
	const struct mcp2515_config *dev_cfg = dev->config;
   21c72:	f8d0 8004 	ldr.w	r8, [r0, #4]
	struct mcp2515_data *dev_data = dev->data;
   21c76:	6905      	ldr	r5, [r0, #16]
	if (!dev_data->started) {
   21c78:	f895 317a 	ldrb.w	r3, [r5, #378]	; 0x17a
   21c7c:	2b00      	cmp	r3, #0
   21c7e:	f000 8098 	beq.w	21db2 <mcp2515_stop+0x146>
   21c82:	4604      	mov	r4, r0
	k_mutex_lock(&dev_data->mutex, K_FOREVER);
   21c84:	f505 77b2 	add.w	r7, r5, #356	; 0x164
	return z_impl_k_mutex_lock(mutex, timeout);
   21c88:	f04f 32ff 	mov.w	r2, #4294967295
   21c8c:	f04f 33ff 	mov.w	r3, #4294967295
   21c90:	4638      	mov	r0, r7
   21c92:	f003 f99d 	bl	24fd0 <z_impl_k_mutex_lock>
	mcp2515_cmd_bit_modify(dev, MCP2515_ADDR_TXB0CTRL,
   21c96:	2300      	movs	r3, #0
   21c98:	2208      	movs	r2, #8
   21c9a:	2130      	movs	r1, #48	; 0x30
   21c9c:	4620      	mov	r0, r4
   21c9e:	f009 ff22 	bl	2bae6 <mcp2515_cmd_bit_modify>
	ret = mcp2515_set_mode_int(dev, MCP2515_MODE_CONFIGURATION);
   21ca2:	2104      	movs	r1, #4
   21ca4:	4620      	mov	r0, r4
   21ca6:	f7ff ff81 	bl	21bac <mcp2515_set_mode_int>
	if (ret < 0) {
   21caa:	1e06      	subs	r6, r0, #0
   21cac:	da36      	bge.n	21d1c <mcp2515_stop+0xb0>
		LOG_ERR("Failed to enter configuration mode [%d]", ret);
   21cae:	2008      	movs	r0, #8
   21cb0:	f7f4 f88a 	bl	15dc8 <z_log_msg_alloc>
   21cb4:	2200      	movs	r2, #0
   21cb6:	f36f 0200 	bfc	r2, #0, #1
   21cba:	f36f 0241 	bfc	r2, #1, #1
   21cbe:	f36f 0282 	bfc	r2, #2, #1
   21cc2:	f36f 02c5 	bfc	r2, #3, #3
   21cc6:	2301      	movs	r3, #1
   21cc8:	f363 1288 	bfi	r2, r3, #6, #3
   21ccc:	230c      	movs	r3, #12
   21cce:	f363 2252 	bfi	r2, r3, #9, #10
   21cd2:	f36f 42de 	bfc	r2, #19, #12
   21cd6:	f36f 72df 	bfc	r2, #31, #1
   21cda:	4604      	mov	r4, r0
   21cdc:	b190      	cbz	r0, 21d04 <mcp2515_stop+0x98>
   21cde:	f110 0310 	adds.w	r3, r0, #16
   21ce2:	d002      	beq.n	21cea <mcp2515_stop+0x7e>
   21ce4:	4935      	ldr	r1, [pc, #212]	; (21dbc <mcp2515_stop+0x150>)
   21ce6:	6141      	str	r1, [r0, #20]
   21ce8:	6186      	str	r6, [r0, #24]
   21cea:	b15b      	cbz	r3, 21d04 <mcp2515_stop+0x98>
   21cec:	2303      	movs	r3, #3
   21cee:	f88d 3004 	strb.w	r3, [sp, #4]
   21cf2:	2300      	movs	r3, #0
   21cf4:	f88d 3005 	strb.w	r3, [sp, #5]
   21cf8:	f88d 3006 	strb.w	r3, [sp, #6]
   21cfc:	f88d 3007 	strb.w	r3, [sp, #7]
   21d00:	9801      	ldr	r0, [sp, #4]
   21d02:	6120      	str	r0, [r4, #16]
   21d04:	2300      	movs	r3, #0
   21d06:	492e      	ldr	r1, [pc, #184]	; (21dc0 <mcp2515_stop+0x154>)
   21d08:	4620      	mov	r0, r4
   21d0a:	f006 f868 	bl	27dde <z_log_msg_finalize>
	return z_impl_k_mutex_unlock(mutex);
   21d0e:	4638      	mov	r0, r7
   21d10:	f003 f9e2 	bl	250d8 <z_impl_k_mutex_unlock>
}
   21d14:	4630      	mov	r0, r6
   21d16:	b002      	add	sp, #8
   21d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	dev_data->started = false;
   21d1c:	2600      	movs	r6, #0
   21d1e:	f885 617a 	strb.w	r6, [r5, #378]	; 0x17a
   21d22:	4638      	mov	r0, r7
   21d24:	f003 f9d8 	bl	250d8 <z_impl_k_mutex_unlock>
	for (i = 0; i < MCP2515_TX_CNT; i++) {
   21d28:	2e00      	cmp	r6, #0
   21d2a:	dd3a      	ble.n	21da2 <mcp2515_stop+0x136>
	if (dev_cfg->phy != NULL) {
   21d2c:	f8d8 0030 	ldr.w	r0, [r8, #48]	; 0x30
   21d30:	2800      	cmp	r0, #0
   21d32:	d041      	beq.n	21db8 <mcp2515_stop+0x14c>
 * @retval 0 If successful.
 * @retval -EIO General input/output error, failed to disable device.
 */
static inline int can_transceiver_disable(const struct device *dev)
{
	const struct can_transceiver_driver_api *api =
   21d34:	6883      	ldr	r3, [r0, #8]
		(const struct can_transceiver_driver_api *)dev->api;

	return api->disable(dev);
   21d36:	685b      	ldr	r3, [r3, #4]
   21d38:	4798      	blx	r3
		if (ret != 0) {
   21d3a:	4606      	mov	r6, r0
   21d3c:	2800      	cmp	r0, #0
   21d3e:	d0e9      	beq.n	21d14 <mcp2515_stop+0xa8>
			LOG_ERR("Failed to disable CAN transceiver [%d]", ret);
   21d40:	2008      	movs	r0, #8
   21d42:	f7f4 f841 	bl	15dc8 <z_log_msg_alloc>
   21d46:	2200      	movs	r2, #0
   21d48:	f36f 0200 	bfc	r2, #0, #1
   21d4c:	f36f 0241 	bfc	r2, #1, #1
   21d50:	f36f 0282 	bfc	r2, #2, #1
   21d54:	f36f 02c5 	bfc	r2, #3, #3
   21d58:	2301      	movs	r3, #1
   21d5a:	f363 1288 	bfi	r2, r3, #6, #3
   21d5e:	230c      	movs	r3, #12
   21d60:	f363 2252 	bfi	r2, r3, #9, #10
   21d64:	f36f 42de 	bfc	r2, #19, #12
   21d68:	f36f 72df 	bfc	r2, #31, #1
   21d6c:	4604      	mov	r4, r0
   21d6e:	b190      	cbz	r0, 21d96 <mcp2515_stop+0x12a>
   21d70:	f110 0310 	adds.w	r3, r0, #16
   21d74:	d002      	beq.n	21d7c <mcp2515_stop+0x110>
   21d76:	4913      	ldr	r1, [pc, #76]	; (21dc4 <mcp2515_stop+0x158>)
   21d78:	6141      	str	r1, [r0, #20]
   21d7a:	6186      	str	r6, [r0, #24]
   21d7c:	b15b      	cbz	r3, 21d96 <mcp2515_stop+0x12a>
   21d7e:	2303      	movs	r3, #3
   21d80:	f88d 3004 	strb.w	r3, [sp, #4]
   21d84:	2300      	movs	r3, #0
   21d86:	f88d 3005 	strb.w	r3, [sp, #5]
   21d8a:	f88d 3006 	strb.w	r3, [sp, #6]
   21d8e:	f88d 3007 	strb.w	r3, [sp, #7]
   21d92:	9801      	ldr	r0, [sp, #4]
   21d94:	6120      	str	r0, [r4, #16]
   21d96:	2300      	movs	r3, #0
   21d98:	4909      	ldr	r1, [pc, #36]	; (21dc0 <mcp2515_stop+0x154>)
   21d9a:	4620      	mov	r0, r4
   21d9c:	f006 f81f 	bl	27dde <z_log_msg_finalize>
			return ret;
   21da0:	e7b8      	b.n	21d14 <mcp2515_stop+0xa8>
		mcp2515_tx_done(dev, i, -ENETDOWN);
   21da2:	f06f 0272 	mvn.w	r2, #114	; 0x72
   21da6:	b2f1      	uxtb	r1, r6
   21da8:	4620      	mov	r0, r4
   21daa:	f00a f81a 	bl	2bde2 <mcp2515_tx_done>
	for (i = 0; i < MCP2515_TX_CNT; i++) {
   21dae:	3601      	adds	r6, #1
   21db0:	e7ba      	b.n	21d28 <mcp2515_stop+0xbc>
		return -EALREADY;
   21db2:	f06f 0677 	mvn.w	r6, #119	; 0x77
   21db6:	e7ad      	b.n	21d14 <mcp2515_stop+0xa8>
	return 0;
   21db8:	2600      	movs	r6, #0
   21dba:	e7ab      	b.n	21d14 <mcp2515_stop+0xa8>
   21dbc:	00030db4 	.word	0x00030db4
   21dc0:	0002ded8 	.word	0x0002ded8
   21dc4:	00030ddc 	.word	0x00030ddc

00021dc8 <mcp2515_start>:
{
   21dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21dcc:	b082      	sub	sp, #8
	const struct mcp2515_config *dev_cfg = dev->config;
   21dce:	f8d0 8004 	ldr.w	r8, [r0, #4]
	struct mcp2515_data *dev_data = dev->data;
   21dd2:	6907      	ldr	r7, [r0, #16]
	if (dev_data->started) {
   21dd4:	f897 317a 	ldrb.w	r3, [r7, #378]	; 0x17a
   21dd8:	2b00      	cmp	r3, #0
   21dda:	f040 808c 	bne.w	21ef6 <mcp2515_start+0x12e>
   21dde:	4604      	mov	r4, r0
	if (dev_cfg->phy != NULL) {
   21de0:	f8d8 0030 	ldr.w	r0, [r8, #48]	; 0x30
   21de4:	b120      	cbz	r0, 21df0 <mcp2515_start+0x28>
	const struct can_transceiver_driver_api *api =
   21de6:	6883      	ldr	r3, [r0, #8]
	return api->enable(dev);
   21de8:	681b      	ldr	r3, [r3, #0]
   21dea:	4798      	blx	r3
		if (ret != 0) {
   21dec:	4605      	mov	r5, r0
   21dee:	b9c8      	cbnz	r0, 21e24 <mcp2515_start+0x5c>
	k_mutex_lock(&dev_data->mutex, K_FOREVER);
   21df0:	f507 76b2 	add.w	r6, r7, #356	; 0x164
	return z_impl_k_mutex_lock(mutex, timeout);
   21df4:	f04f 32ff 	mov.w	r2, #4294967295
   21df8:	f04f 33ff 	mov.w	r3, #4294967295
   21dfc:	4630      	mov	r0, r6
   21dfe:	f003 f8e7 	bl	24fd0 <z_impl_k_mutex_lock>
	ret = mcp2515_set_mode_int(dev, dev_data->mcp2515_mode);
   21e02:	f897 1179 	ldrb.w	r1, [r7, #377]	; 0x179
   21e06:	4620      	mov	r0, r4
   21e08:	f7ff fed0 	bl	21bac <mcp2515_set_mode_int>
	if (ret < 0) {
   21e0c:	1e05      	subs	r5, r0, #0
   21e0e:	db3a      	blt.n	21e86 <mcp2515_start+0xbe>
		dev_data->started = true;
   21e10:	2301      	movs	r3, #1
   21e12:	f887 317a 	strb.w	r3, [r7, #378]	; 0x17a
	return z_impl_k_mutex_unlock(mutex);
   21e16:	4630      	mov	r0, r6
   21e18:	f003 f95e 	bl	250d8 <z_impl_k_mutex_unlock>
}
   21e1c:	4628      	mov	r0, r5
   21e1e:	b002      	add	sp, #8
   21e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			LOG_ERR("Failed to enable CAN transceiver [%d]", ret);
   21e24:	2008      	movs	r0, #8
   21e26:	f7f3 ffcf 	bl	15dc8 <z_log_msg_alloc>
   21e2a:	2200      	movs	r2, #0
   21e2c:	f36f 0200 	bfc	r2, #0, #1
   21e30:	f36f 0241 	bfc	r2, #1, #1
   21e34:	f36f 0282 	bfc	r2, #2, #1
   21e38:	f36f 02c5 	bfc	r2, #3, #3
   21e3c:	2301      	movs	r3, #1
   21e3e:	f363 1288 	bfi	r2, r3, #6, #3
   21e42:	230c      	movs	r3, #12
   21e44:	f363 2252 	bfi	r2, r3, #9, #10
   21e48:	f36f 42de 	bfc	r2, #19, #12
   21e4c:	f36f 72df 	bfc	r2, #31, #1
   21e50:	4604      	mov	r4, r0
   21e52:	b190      	cbz	r0, 21e7a <mcp2515_start+0xb2>
   21e54:	f110 0310 	adds.w	r3, r0, #16
   21e58:	d002      	beq.n	21e60 <mcp2515_start+0x98>
   21e5a:	4928      	ldr	r1, [pc, #160]	; (21efc <mcp2515_start+0x134>)
   21e5c:	6141      	str	r1, [r0, #20]
   21e5e:	6185      	str	r5, [r0, #24]
   21e60:	b15b      	cbz	r3, 21e7a <mcp2515_start+0xb2>
   21e62:	2303      	movs	r3, #3
   21e64:	f88d 3004 	strb.w	r3, [sp, #4]
   21e68:	2300      	movs	r3, #0
   21e6a:	f88d 3005 	strb.w	r3, [sp, #5]
   21e6e:	f88d 3006 	strb.w	r3, [sp, #6]
   21e72:	f88d 3007 	strb.w	r3, [sp, #7]
   21e76:	9801      	ldr	r0, [sp, #4]
   21e78:	6120      	str	r0, [r4, #16]
   21e7a:	2300      	movs	r3, #0
   21e7c:	4920      	ldr	r1, [pc, #128]	; (21f00 <mcp2515_start+0x138>)
   21e7e:	4620      	mov	r0, r4
   21e80:	f005 ffad 	bl	27dde <z_log_msg_finalize>
			return ret;
   21e84:	e7ca      	b.n	21e1c <mcp2515_start+0x54>
		LOG_ERR("Failed to set the mode [%d]", ret);
   21e86:	2008      	movs	r0, #8
   21e88:	f7f3 ff9e 	bl	15dc8 <z_log_msg_alloc>
   21e8c:	2200      	movs	r2, #0
   21e8e:	f36f 0200 	bfc	r2, #0, #1
   21e92:	f36f 0241 	bfc	r2, #1, #1
   21e96:	f36f 0282 	bfc	r2, #2, #1
   21e9a:	f36f 02c5 	bfc	r2, #3, #3
   21e9e:	2301      	movs	r3, #1
   21ea0:	f363 1288 	bfi	r2, r3, #6, #3
   21ea4:	230c      	movs	r3, #12
   21ea6:	f363 2252 	bfi	r2, r3, #9, #10
   21eaa:	f36f 42de 	bfc	r2, #19, #12
   21eae:	f36f 72df 	bfc	r2, #31, #1
   21eb2:	4604      	mov	r4, r0
   21eb4:	b190      	cbz	r0, 21edc <mcp2515_start+0x114>
   21eb6:	f110 0310 	adds.w	r3, r0, #16
   21eba:	d002      	beq.n	21ec2 <mcp2515_start+0xfa>
   21ebc:	4911      	ldr	r1, [pc, #68]	; (21f04 <mcp2515_start+0x13c>)
   21ebe:	6141      	str	r1, [r0, #20]
   21ec0:	6185      	str	r5, [r0, #24]
   21ec2:	b15b      	cbz	r3, 21edc <mcp2515_start+0x114>
   21ec4:	2303      	movs	r3, #3
   21ec6:	f88d 3004 	strb.w	r3, [sp, #4]
   21eca:	2300      	movs	r3, #0
   21ecc:	f88d 3005 	strb.w	r3, [sp, #5]
   21ed0:	f88d 3006 	strb.w	r3, [sp, #6]
   21ed4:	f88d 3007 	strb.w	r3, [sp, #7]
   21ed8:	9801      	ldr	r0, [sp, #4]
   21eda:	6120      	str	r0, [r4, #16]
   21edc:	2300      	movs	r3, #0
   21ede:	4908      	ldr	r1, [pc, #32]	; (21f00 <mcp2515_start+0x138>)
   21ee0:	4620      	mov	r0, r4
   21ee2:	f005 ff7c 	bl	27dde <z_log_msg_finalize>
		if (dev_cfg->phy != NULL) {
   21ee6:	f8d8 0030 	ldr.w	r0, [r8, #48]	; 0x30
   21eea:	2800      	cmp	r0, #0
   21eec:	d093      	beq.n	21e16 <mcp2515_start+0x4e>
	const struct can_transceiver_driver_api *api =
   21eee:	6883      	ldr	r3, [r0, #8]
	return api->disable(dev);
   21ef0:	685b      	ldr	r3, [r3, #4]
   21ef2:	4798      	blx	r3
   21ef4:	e78f      	b.n	21e16 <mcp2515_start+0x4e>
		return -EALREADY;
   21ef6:	f06f 0577 	mvn.w	r5, #119	; 0x77
   21efa:	e78f      	b.n	21e1c <mcp2515_start+0x54>
   21efc:	00030e04 	.word	0x00030e04
   21f00:	0002ded8 	.word	0x0002ded8
   21f04:	00030e2c 	.word	0x00030e2c

00021f08 <random_byte_get>:
	__asm__ volatile(
   21f08:	f04f 0240 	mov.w	r2, #64	; 0x40
   21f0c:	f3ef 8311 	mrs	r3, BASEPRI
   21f10:	f382 8812 	msr	BASEPRI_MAX, r2
   21f14:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   21f18:	4a0a      	ldr	r2, [pc, #40]	; (21f44 <random_byte_get+0x3c>)
   21f1a:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   21f1e:	b16a      	cbz	r2, 21f3c <random_byte_get+0x34>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   21f20:	4a08      	ldr	r2, [pc, #32]	; (21f44 <random_byte_get+0x3c>)
   21f22:	f8d2 0508 	ldr.w	r0, [r2, #1288]	; 0x508
		retval = nrf_rng_random_value_get(NRF_RNG);
   21f26:	b2c0      	uxtb	r0, r0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   21f28:	2100      	movs	r1, #0
   21f2a:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   21f2e:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
	__asm__ volatile(
   21f32:	f383 8811 	msr	BASEPRI, r3
   21f36:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   21f3a:	4770      	bx	lr
	int retval = -EAGAIN;
   21f3c:	f06f 000a 	mvn.w	r0, #10
   21f40:	e7f7      	b.n	21f32 <random_byte_get+0x2a>
   21f42:	bf00      	nop
   21f44:	4000d000 	.word	0x4000d000

00021f48 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   21f48:	b5f0      	push	{r4, r5, r6, r7, lr}
   21f4a:	4686      	mov	lr, r0
	uint32_t last  = rngp->last;
   21f4c:	7885      	ldrb	r5, [r0, #2]
	uint32_t mask  = rngp->mask;
   21f4e:	78c4      	ldrb	r4, [r0, #3]
	__asm__ volatile(
   21f50:	f04f 0340 	mov.w	r3, #64	; 0x40
   21f54:	f3ef 8011 	mrs	r0, BASEPRI
   21f58:	f383 8812 	msr	BASEPRI_MAX, r3
   21f5c:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   21f60:	f89e 6000 	ldrb.w	r6, [lr]
   21f64:	4633      	mov	r3, r6
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   21f66:	f89e 7001 	ldrb.w	r7, [lr, #1]

	available = (last - first) & mask;
   21f6a:	1bad      	subs	r5, r5, r6
   21f6c:	4025      	ands	r5, r4
	if (available < len) {
   21f6e:	42aa      	cmp	r2, r5
   21f70:	d900      	bls.n	21f74 <rng_pool_get+0x2c>
		len = available;
   21f72:	b2aa      	uxth	r2, r5

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   21f74:	eb06 0c02 	add.w	ip, r6, r2
   21f78:	ea0c 0c04 	and.w	ip, ip, r4
   21f7c:	f88e c000 	strb.w	ip, [lr]
	__asm__ volatile(
   21f80:	f380 8811 	msr	BASEPRI, r0
   21f84:	f3bf 8f6f 	isb	sy
	uint8_t *dst   = buf;
   21f88:	4608      	mov	r0, r1
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   21f8a:	e007      	b.n	21f9c <rng_pool_get+0x54>
	irq_unlock(key);

	while (likely(len--)) {
		*dst++ = rngp->buffer[first];
   21f8c:	eb0e 0203 	add.w	r2, lr, r3
   21f90:	7952      	ldrb	r2, [r2, #5]
   21f92:	f800 2b01 	strb.w	r2, [r0], #1
		first = (first + 1) & mask;
   21f96:	3301      	adds	r3, #1
   21f98:	4023      	ands	r3, r4
	while (likely(len--)) {
   21f9a:	4662      	mov	r2, ip
   21f9c:	f102 3cff 	add.w	ip, r2, #4294967295
   21fa0:	fa1f fc8c 	uxth.w	ip, ip
   21fa4:	2a00      	cmp	r2, #0
   21fa6:	d1f1      	bne.n	21f8c <rng_pool_get+0x44>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   21fa8:	42be      	cmp	r6, r7
   21faa:	d10f      	bne.n	21fcc <rng_pool_get+0x84>
	__asm__ volatile(
   21fac:	f04f 0240 	mov.w	r2, #64	; 0x40
   21fb0:	f3ef 8311 	mrs	r3, BASEPRI
   21fb4:	f382 8812 	msr	BASEPRI_MAX, r2
   21fb8:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   21fbc:	f89e 2000 	ldrb.w	r2, [lr]
   21fc0:	f88e 2001 	strb.w	r2, [lr, #1]
	__asm__ volatile(
   21fc4:	f383 8811 	msr	BASEPRI, r3
   21fc8:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   21fcc:	1a40      	subs	r0, r0, r1
   21fce:	b280      	uxth	r0, r0
	available = available - len;
   21fd0:	1a2d      	subs	r5, r5, r0
	if (available <= rngp->threshold) {
   21fd2:	f89e 3004 	ldrb.w	r3, [lr, #4]
   21fd6:	42ab      	cmp	r3, r5
   21fd8:	d302      	bcc.n	21fe0 <rng_pool_get+0x98>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   21fda:	4b02      	ldr	r3, [pc, #8]	; (21fe4 <rng_pool_get+0x9c>)
   21fdc:	2201      	movs	r2, #1
   21fde:	601a      	str	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   21fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21fe2:	bf00      	nop
   21fe4:	4000d000 	.word	0x4000d000

00021fe8 <entropy_nrf5_get_entropy_isr>:
}

static int entropy_nrf5_get_entropy_isr(const struct device *dev,
					uint8_t *buf, uint16_t len,
					uint32_t flags)
{
   21fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21fea:	460d      	mov	r5, r1
   21fec:	4614      	mov	r4, r2
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   21fee:	f013 0f01 	tst.w	r3, #1
   21ff2:	d103      	bne.n	21ffc <entropy_nrf5_get_entropy_isr+0x14>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   21ff4:	4826      	ldr	r0, [pc, #152]	; (22090 <entropy_nrf5_get_entropy_isr+0xa8>)
   21ff6:	f7ff ffa7 	bl	21f48 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   21ffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len) {
   21ffc:	b90a      	cbnz	r2, 22002 <entropy_nrf5_get_entropy_isr+0x1a>
	return cnt;
   21ffe:	4620      	mov	r0, r4
   22000:	e7fb      	b.n	21ffa <entropy_nrf5_get_entropy_isr+0x12>
	__asm__ volatile(
   22002:	f04f 0340 	mov.w	r3, #64	; 0x40
   22006:	f3ef 8611 	mrs	r6, BASEPRI
   2200a:	f383 8812 	msr	BASEPRI_MAX, r3
   2200e:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   22012:	200d      	movs	r0, #13
   22014:	f7f4 fe22 	bl	16c5c <arch_irq_is_enabled>
   22018:	4607      	mov	r7, r0
		irq_disable(IRQN);
   2201a:	200d      	movs	r0, #13
   2201c:	f006 fa62 	bl	284e4 <arch_irq_disable>
	__asm__ volatile(
   22020:	f386 8811 	msr	BASEPRI, r6
   22024:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   22028:	4b1a      	ldr	r3, [pc, #104]	; (22094 <entropy_nrf5_get_entropy_isr+0xac>)
   2202a:	2200      	movs	r2, #0
   2202c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   22030:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   22034:	2201      	movs	r2, #1
   22036:	601a      	str	r2, [r3, #0]
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   22038:	4b17      	ldr	r3, [pc, #92]	; (22098 <entropy_nrf5_get_entropy_isr+0xb0>)
   2203a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   2203e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   22042:	4626      	mov	r6, r4
   22044:	e00b      	b.n	2205e <entropy_nrf5_get_entropy_isr+0x76>
	__asm__ volatile(
   22046:	f04f 0340 	mov.w	r3, #64	; 0x40
   2204a:	f3ef 8011 	mrs	r0, BASEPRI
   2204e:	f383 8812 	msr	BASEPRI_MAX, r3
   22052:	f3bf 8f6f 	isb	sy
   22056:	f7f4 fce3 	bl	16a20 <arch_cpu_atomic_idle>
}
   2205a:	e000      	b.n	2205e <entropy_nrf5_get_entropy_isr+0x76>
		} while (len);
   2205c:	b18e      	cbz	r6, 22082 <entropy_nrf5_get_entropy_isr+0x9a>
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   2205e:	4b0d      	ldr	r3, [pc, #52]	; (22094 <entropy_nrf5_get_entropy_isr+0xac>)
   22060:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   22064:	2b00      	cmp	r3, #0
   22066:	d0ee      	beq.n	22046 <entropy_nrf5_get_entropy_isr+0x5e>
			byte = random_byte_get();
   22068:	f7ff ff4e 	bl	21f08 <random_byte_get>
   2206c:	4b0a      	ldr	r3, [pc, #40]	; (22098 <entropy_nrf5_get_entropy_isr+0xb0>)
   2206e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   22072:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
			if (byte < 0) {
   22076:	2800      	cmp	r0, #0
   22078:	dbf0      	blt.n	2205c <entropy_nrf5_get_entropy_isr+0x74>
			buf[--len] = byte;
   2207a:	3e01      	subs	r6, #1
   2207c:	b2b6      	uxth	r6, r6
   2207e:	55a8      	strb	r0, [r5, r6]
   22080:	e7ec      	b.n	2205c <entropy_nrf5_get_entropy_isr+0x74>
		if (irq_enabled) {
   22082:	2f00      	cmp	r7, #0
   22084:	d0bb      	beq.n	21ffe <entropy_nrf5_get_entropy_isr+0x16>
			irq_enable(IRQN);
   22086:	200d      	movs	r0, #13
   22088:	f006 fa27 	bl	284da <arch_irq_enable>
   2208c:	e7b7      	b.n	21ffe <entropy_nrf5_get_entropy_isr+0x16>
   2208e:	bf00      	nop
   22090:	200088a4 	.word	0x200088a4
   22094:	4000d000 	.word	0x4000d000
   22098:	e000e100 	.word	0xe000e100

0002209c <isr>:
{
   2209c:	b510      	push	{r4, lr}
	byte = random_byte_get();
   2209e:	f7ff ff33 	bl	21f08 <random_byte_get>
	if (byte < 0) {
   220a2:	2800      	cmp	r0, #0
   220a4:	db06      	blt.n	220b4 <isr+0x18>
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   220a6:	b2c4      	uxtb	r4, r0
   220a8:	4621      	mov	r1, r4
   220aa:	480a      	ldr	r0, [pc, #40]	; (220d4 <isr+0x38>)
   220ac:	f009 ff3c 	bl	2bf28 <rng_pool_put>
	if (ret < 0) {
   220b0:	2800      	cmp	r0, #0
   220b2:	db00      	blt.n	220b6 <isr+0x1a>
}
   220b4:	bd10      	pop	{r4, pc}
		ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.thr),
   220b6:	4621      	mov	r1, r4
   220b8:	4807      	ldr	r0, [pc, #28]	; (220d8 <isr+0x3c>)
   220ba:	f009 ff35 	bl	2bf28 <rng_pool_put>
		if (ret < 0) {
   220be:	2800      	cmp	r0, #0
   220c0:	db03      	blt.n	220ca <isr+0x2e>
	z_impl_k_sem_give(sem);
   220c2:	4806      	ldr	r0, [pc, #24]	; (220dc <isr+0x40>)
   220c4:	f003 f884 	bl	251d0 <z_impl_k_sem_give>
}
   220c8:	e7f4      	b.n	220b4 <isr+0x18>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   220ca:	4b05      	ldr	r3, [pc, #20]	; (220e0 <isr+0x44>)
   220cc:	2201      	movs	r2, #1
   220ce:	605a      	str	r2, [r3, #4]
}
   220d0:	e7f7      	b.n	220c2 <isr+0x26>
   220d2:	bf00      	nop
   220d4:	200088a4 	.word	0x200088a4
   220d8:	200088b9 	.word	0x200088b9
   220dc:	2000888c 	.word	0x2000888c
   220e0:	4000d000 	.word	0x4000d000

000220e4 <entropy_nrf5_get_entropy>:
{
   220e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   220e6:	460f      	mov	r7, r1
   220e8:	4614      	mov	r4, r2
	while (len) {
   220ea:	e007      	b.n	220fc <entropy_nrf5_get_entropy+0x18>
	return z_impl_k_sem_take(sem, timeout);
   220ec:	f04f 32ff 	mov.w	r2, #4294967295
   220f0:	f04f 33ff 	mov.w	r3, #4294967295
   220f4:	f106 0018 	add.w	r0, r6, #24
   220f8:	f003 f892 	bl	25220 <z_impl_k_sem_take>
   220fc:	b1bc      	cbz	r4, 2212e <entropy_nrf5_get_entropy+0x4a>
   220fe:	4e0d      	ldr	r6, [pc, #52]	; (22134 <entropy_nrf5_get_entropy+0x50>)
   22100:	f04f 32ff 	mov.w	r2, #4294967295
   22104:	f04f 33ff 	mov.w	r3, #4294967295
   22108:	4630      	mov	r0, r6
   2210a:	f003 f889 	bl	25220 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   2210e:	4622      	mov	r2, r4
   22110:	4639      	mov	r1, r7
   22112:	f106 0045 	add.w	r0, r6, #69	; 0x45
   22116:	f7ff ff17 	bl	21f48 <rng_pool_get>
   2211a:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
   2211c:	4630      	mov	r0, r6
   2211e:	f003 f857 	bl	251d0 <z_impl_k_sem_give>
		if (bytes == 0U) {
   22122:	2d00      	cmp	r5, #0
   22124:	d0e2      	beq.n	220ec <entropy_nrf5_get_entropy+0x8>
		len -= bytes;
   22126:	1b64      	subs	r4, r4, r5
   22128:	b2a4      	uxth	r4, r4
		buf += bytes;
   2212a:	442f      	add	r7, r5
   2212c:	e7e6      	b.n	220fc <entropy_nrf5_get_entropy+0x18>
}
   2212e:	2000      	movs	r0, #0
   22130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22132:	bf00      	nop
   22134:	20008874 	.word	0x20008874

00022138 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   22138:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   2213a:	4c18      	ldr	r4, [pc, #96]	; (2219c <entropy_nrf5_init+0x64>)
   2213c:	2201      	movs	r2, #1
   2213e:	4611      	mov	r1, r2
   22140:	4620      	mov	r0, r4
   22142:	f00a ff00 	bl	2cf46 <z_impl_k_sem_init>
   22146:	2201      	movs	r2, #1
   22148:	2100      	movs	r1, #0
   2214a:	f104 0018 	add.w	r0, r4, #24
   2214e:	f00a fefa 	bl	2cf46 <z_impl_k_sem_init>
	k_sem_init(&entropy_nrf5_data.sem_lock, 1, 1);

	/* Synching semaphore */
	k_sem_init(&entropy_nrf5_data.sem_sync, 0, 1);

	rng_pool_init((struct rng_pool *)(entropy_nrf5_data.thr),
   22152:	2204      	movs	r2, #4
   22154:	2108      	movs	r1, #8
   22156:	f104 0045 	add.w	r0, r4, #69	; 0x45
   2215a:	f009 fef8 	bl	2bf4e <rng_pool_init>
		      CONFIG_ENTROPY_NRF5_THR_POOL_SIZE,
		      CONFIG_ENTROPY_NRF5_THR_THRESHOLD);
	rng_pool_init((struct rng_pool *)(entropy_nrf5_data.isr),
   2215e:	220c      	movs	r2, #12
   22160:	2110      	movs	r1, #16
   22162:	f104 0030 	add.w	r0, r4, #48	; 0x30
   22166:	f009 fef2 	bl	2bf4e <rng_pool_init>
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   2216a:	4b0d      	ldr	r3, [pc, #52]	; (221a0 <entropy_nrf5_init+0x68>)
   2216c:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   22170:	f022 0201 	bic.w	r2, r2, #1
   22174:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   22178:	2400      	movs	r4, #0
   2217a:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
   2217e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   22182:	2101      	movs	r1, #1
   22184:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   22188:	6019      	str	r1, [r3, #0]

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   2218a:	4622      	mov	r2, r4
   2218c:	200d      	movs	r0, #13
   2218e:	f006 f9ae 	bl	284ee <z_arm_irq_priority_set>
	irq_enable(IRQN);
   22192:	200d      	movs	r0, #13
   22194:	f006 f9a1 	bl	284da <arch_irq_enable>

	return 0;
}
   22198:	4620      	mov	r0, r4
   2219a:	bd10      	pop	{r4, pc}
   2219c:	20008874 	.word	0x20008874
   221a0:	4000d000 	.word	0x4000d000

000221a4 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   221a4:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
   221a8:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   221ac:	4b01      	ldr	r3, [pc, #4]	; (221b4 <set_comparator+0x10>)
   221ae:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
   221b2:	4770      	bx	lr
   221b4:	40011000 	.word	0x40011000

000221b8 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   221b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   221bc:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   221be:	4a02      	ldr	r2, [pc, #8]	; (221c8 <event_enable+0x10>)
   221c0:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
   221c4:	4770      	bx	lr
   221c6:	bf00      	nop
   221c8:	40011000 	.word	0x40011000

000221cc <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   221cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   221d0:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   221d2:	4a02      	ldr	r2, [pc, #8]	; (221dc <event_disable+0x10>)
   221d4:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
   221d8:	4770      	bx	lr
   221da:	bf00      	nop
   221dc:	40011000 	.word	0x40011000

000221e0 <counter>:
     return p_reg->COUNTER;
   221e0:	4b01      	ldr	r3, [pc, #4]	; (221e8 <counter+0x8>)
   221e2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
   221e6:	4770      	bx	lr
   221e8:	40011000 	.word	0x40011000

000221ec <set_alarm>:
 * @param[in] chan A channel for which a new CC value is to be set.
 *
 * @param[in] req_cc Requested CC register value to be set.
 */
static void set_alarm(int32_t chan, uint32_t req_cc)
{
   221ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   221f0:	4606      	mov	r6, r0
   221f2:	4688      	mov	r8, r1
	 * (however, even if such spurious event was generated, it would be
	 * properly filtered out in process_channel(), where the target time
	 * is checked).
	 * Clear also the event as it may already be generated at this point.
	 */
	event_disable(chan);
   221f4:	f7ff ffea 	bl	221cc <event_disable>
	event_clear(chan);
   221f8:	4630      	mov	r0, r6
   221fa:	f009 fed2 	bl	2bfa2 <event_clear>
	uint32_t cc_val = req_cc;
   221fe:	4645      	mov	r5, r8
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
   22200:	2703      	movs	r7, #3
   22202:	e001      	b.n	22208 <set_alarm+0x1c>
				} else {
					break;
				}
			}

			cc_val = now + cc_inc;
   22204:	193d      	adds	r5, r7, r4
			cc_inc++;
   22206:	3701      	adds	r7, #1
		set_comparator(chan, cc_val);
   22208:	4629      	mov	r1, r5
   2220a:	4630      	mov	r0, r6
   2220c:	f7ff ffca 	bl	221a4 <set_comparator>
		event_enable(chan);
   22210:	4630      	mov	r0, r6
   22212:	f7ff ffd1 	bl	221b8 <event_enable>
		now = counter();
   22216:	f7ff ffe3 	bl	221e0 <counter>
   2221a:	4604      	mov	r4, r0
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   2221c:	1cc1      	adds	r1, r0, #3
   2221e:	4628      	mov	r0, r5
   22220:	f009 feae 	bl	2bf80 <counter_sub>
   22224:	4b0b      	ldr	r3, [pc, #44]	; (22254 <set_alarm+0x68>)
   22226:	4298      	cmp	r0, r3
   22228:	d911      	bls.n	2224e <set_alarm+0x62>
			if (event_check(chan)) {
   2222a:	4630      	mov	r0, r6
   2222c:	f009 feac 	bl	2bf88 <event_check>
   22230:	2800      	cmp	r0, #0
   22232:	d0e7      	beq.n	22204 <set_alarm+0x18>
				now = counter();
   22234:	f7ff ffd4 	bl	221e0 <counter>
   22238:	4604      	mov	r4, r0
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
   2223a:	4641      	mov	r1, r8
   2223c:	f009 fea0 	bl	2bf80 <counter_sub>
   22240:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   22244:	d903      	bls.n	2224e <set_alarm+0x62>
					event_clear(chan);
   22246:	4630      	mov	r0, r6
   22248:	f009 feab 	bl	2bfa2 <event_clear>
   2224c:	e7da      	b.n	22204 <set_alarm+0x18>
		} else {
			break;
		}
	}
}
   2224e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22252:	bf00      	nop
   22254:	007ffffd 	.word	0x007ffffd

00022258 <compare_int_lock>:
{
   22258:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   2225a:	2301      	movs	r3, #1
   2225c:	4083      	lsls	r3, r0
   2225e:	ea6f 0c03 	mvn.w	ip, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   22262:	4a0e      	ldr	r2, [pc, #56]	; (2229c <compare_int_lock+0x44>)
   22264:	f3bf 8f5b 	dmb	ish
   22268:	e852 1f00 	ldrex	r1, [r2]
   2226c:	ea01 0e0c 	and.w	lr, r1, ip
   22270:	e842 e400 	strex	r4, lr, [r2]
   22274:	2c00      	cmp	r4, #0
   22276:	d1f7      	bne.n	22268 <compare_int_lock+0x10>
   22278:	f3bf 8f5b 	dmb	ish
	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   2227c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   22280:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
   22282:	4807      	ldr	r0, [pc, #28]	; (222a0 <compare_int_lock+0x48>)
   22284:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   22288:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   2228c:	f3bf 8f6f 	isb	sy
	return prev & BIT(chan);
   22290:	420b      	tst	r3, r1
}
   22292:	bf14      	ite	ne
   22294:	2001      	movne	r0, #1
   22296:	2000      	moveq	r0, #0
   22298:	bd10      	pop	{r4, pc}
   2229a:	bf00      	nop
   2229c:	200088cc 	.word	0x200088cc
   222a0:	40011000 	.word	0x40011000

000222a4 <channel_processing_check_and_clear>:
	sys_clock_announce(dticks);
}

static bool channel_processing_check_and_clear(int32_t chan)
{
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   222a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   222a8:	4083      	lsls	r3, r0
    return p_reg->INTENSET & mask;
   222aa:	4a14      	ldr	r2, [pc, #80]	; (222fc <channel_processing_check_and_clear+0x58>)
   222ac:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   222b0:	4213      	tst	r3, r2
   222b2:	d101      	bne.n	222b8 <channel_processing_check_and_clear+0x14>
			event_clear(chan);
			return true;
		}
	}

	return false;
   222b4:	2000      	movs	r0, #0
}
   222b6:	4770      	bx	lr
{
   222b8:	b510      	push	{r4, lr}
   222ba:	4604      	mov	r4, r0
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
   222bc:	2301      	movs	r3, #1
   222be:	4083      	lsls	r3, r0
   222c0:	43db      	mvns	r3, r3
   222c2:	490f      	ldr	r1, [pc, #60]	; (22300 <channel_processing_check_and_clear+0x5c>)
   222c4:	f3bf 8f5b 	dmb	ish
   222c8:	e851 2f00 	ldrex	r2, [r1]
   222cc:	ea02 0003 	and.w	r0, r2, r3
   222d0:	e841 0c00 	strex	ip, r0, [r1]
   222d4:	f1bc 0f00 	cmp.w	ip, #0
   222d8:	d1f6      	bne.n	222c8 <channel_processing_check_and_clear+0x24>
   222da:	f3bf 8f5b 	dmb	ish
   222de:	fa22 f304 	lsr.w	r3, r2, r4
   222e2:	f013 0f01 	tst.w	r3, #1
   222e6:	d103      	bne.n	222f0 <channel_processing_check_and_clear+0x4c>
		    event_check(chan)) {
   222e8:	4620      	mov	r0, r4
   222ea:	f009 fe4d 	bl	2bf88 <event_check>
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
   222ee:	b118      	cbz	r0, 222f8 <channel_processing_check_and_clear+0x54>
			event_clear(chan);
   222f0:	4620      	mov	r0, r4
   222f2:	f009 fe56 	bl	2bfa2 <event_clear>
			return true;
   222f6:	2001      	movs	r0, #1
}
   222f8:	bd10      	pop	{r4, pc}
   222fa:	bf00      	nop
   222fc:	40011000 	.word	0x40011000
   22300:	200088c8 	.word	0x200088c8

00022304 <compare_int_unlock>:
	if (key) {
   22304:	b901      	cbnz	r1, 22308 <compare_int_unlock+0x4>
}
   22306:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
   22308:	2301      	movs	r3, #1
   2230a:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2230c:	4a11      	ldr	r2, [pc, #68]	; (22354 <compare_int_unlock+0x50>)
   2230e:	f3bf 8f5b 	dmb	ish
   22312:	e852 cf00 	ldrex	ip, [r2]
   22316:	ea4c 0c03 	orr.w	ip, ip, r3
   2231a:	e842 c100 	strex	r1, ip, [r2]
   2231e:	2900      	cmp	r1, #0
   22320:	d1f7      	bne.n	22312 <compare_int_unlock+0xe>
   22322:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   22326:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2232a:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
   2232c:	4a0a      	ldr	r2, [pc, #40]	; (22358 <compare_int_unlock+0x54>)
   2232e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   22332:	f3bf 8f5b 	dmb	ish
   22336:	4b09      	ldr	r3, [pc, #36]	; (2235c <compare_int_unlock+0x58>)
   22338:	681b      	ldr	r3, [r3, #0]
   2233a:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   2233e:	40c3      	lsrs	r3, r0
   22340:	f013 0f01 	tst.w	r3, #1
   22344:	d0df      	beq.n	22306 <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   22346:	4b06      	ldr	r3, [pc, #24]	; (22360 <compare_int_unlock+0x5c>)
   22348:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   2234c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   22350:	e7d9      	b.n	22306 <compare_int_unlock+0x2>
   22352:	bf00      	nop
   22354:	200088cc 	.word	0x200088cc
   22358:	40011000 	.word	0x40011000
   2235c:	200088c8 	.word	0x200088c8
   22360:	e000e100 	.word	0xe000e100

00022364 <sys_clock_timeout_handler>:
{
   22364:	b538      	push	{r3, r4, r5, lr}
   22366:	4614      	mov	r4, r2
	uint32_t cc_value = absolute_time_to_cc(expire_time);
   22368:	4610      	mov	r0, r2
   2236a:	4619      	mov	r1, r3
   2236c:	f009 fe25 	bl	2bfba <absolute_time_to_cc>
   22370:	4602      	mov	r2, r0
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
   22372:	490d      	ldr	r1, [pc, #52]	; (223a8 <sys_clock_timeout_handler+0x44>)
   22374:	680b      	ldr	r3, [r1, #0]
   22376:	1ae0      	subs	r0, r4, r3
	last_count += dticks * CYC_PER_TICK;
   22378:	181b      	adds	r3, r3, r0
   2237a:	684c      	ldr	r4, [r1, #4]
   2237c:	f144 0400 	adc.w	r4, r4, #0
   22380:	600b      	str	r3, [r1, #0]
   22382:	604c      	str	r4, [r1, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   22384:	f5a2 1300 	sub.w	r3, r2, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
   22388:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   2238c:	d209      	bcs.n	223a2 <sys_clock_timeout_handler+0x3e>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   2238e:	4b07      	ldr	r3, [pc, #28]	; (223ac <sys_clock_timeout_handler+0x48>)
   22390:	681b      	ldr	r3, [r3, #0]
   22392:	0a19      	lsrs	r1, r3, #8
   22394:	061b      	lsls	r3, r3, #24
   22396:	18d4      	adds	r4, r2, r3
   22398:	f141 0500 	adc.w	r5, r1, #0
   2239c:	4b04      	ldr	r3, [pc, #16]	; (223b0 <sys_clock_timeout_handler+0x4c>)
   2239e:	e9c3 4500 	strd	r4, r5, [r3]
	sys_clock_announce(dticks);
   223a2:	f003 fe0f 	bl	25fc4 <sys_clock_announce>
}
   223a6:	bd38      	pop	{r3, r4, r5, pc}
   223a8:	20002998 	.word	0x20002998
   223ac:	200088d0 	.word	0x200088d0
   223b0:	200029a0 	.word	0x200029a0

000223b4 <z_nrf_rtc_timer_read>:
{
   223b4:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   223b6:	4b0d      	ldr	r3, [pc, #52]	; (223ec <z_nrf_rtc_timer_read+0x38>)
   223b8:	681c      	ldr	r4, [r3, #0]
   223ba:	0a25      	lsrs	r5, r4, #8
   223bc:	0624      	lsls	r4, r4, #24
  __ASM volatile ("dmb 0xF":::"memory");
   223be:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
   223c2:	f7ff ff0d 	bl	221e0 <counter>
   223c6:	4603      	mov	r3, r0
	val += cntr;
   223c8:	1900      	adds	r0, r0, r4
   223ca:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   223ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   223d2:	d20a      	bcs.n	223ea <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
   223d4:	4b06      	ldr	r3, [pc, #24]	; (223f0 <z_nrf_rtc_timer_read+0x3c>)
   223d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   223da:	4290      	cmp	r0, r2
   223dc:	eb71 0303 	sbcs.w	r3, r1, r3
   223e0:	d203      	bcs.n	223ea <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
   223e2:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   223e6:	f141 0100 	adc.w	r1, r1, #0
}
   223ea:	bd38      	pop	{r3, r4, r5, pc}
   223ec:	200088d0 	.word	0x200088d0
   223f0:	200029a0 	.word	0x200029a0

000223f4 <compare_set_nolocks>:
{
   223f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   223f6:	4606      	mov	r6, r0
   223f8:	4614      	mov	r4, r2
   223fa:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
   223fc:	4610      	mov	r0, r2
   223fe:	4619      	mov	r1, r3
   22400:	f009 fddb 	bl	2bfba <absolute_time_to_cc>
   22404:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
   22406:	f7ff ffd5 	bl	223b4 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   2240a:	42a0      	cmp	r0, r4
   2240c:	eb71 0305 	sbcs.w	r3, r1, r5
   22410:	d215      	bcs.n	2243e <compare_set_nolocks+0x4a>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
   22412:	1a20      	subs	r0, r4, r0
   22414:	eb65 0101 	sbc.w	r1, r5, r1
   22418:	4b17      	ldr	r3, [pc, #92]	; (22478 <compare_set_nolocks+0x84>)
   2241a:	4298      	cmp	r0, r3
   2241c:	f171 0100 	sbcs.w	r1, r1, #0
   22420:	d227      	bcs.n	22472 <compare_set_nolocks+0x7e>
		if (target_time != cc_data[chan].target_time) {
   22422:	4b16      	ldr	r3, [pc, #88]	; (2247c <compare_set_nolocks+0x88>)
   22424:	eb03 1306 	add.w	r3, r3, r6, lsl #4
   22428:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   2242c:	42ab      	cmp	r3, r5
   2242e:	bf08      	it	eq
   22430:	42a2      	cmpeq	r2, r4
   22432:	d012      	beq.n	2245a <compare_set_nolocks+0x66>
			set_alarm(chan, cc_value);
   22434:	4639      	mov	r1, r7
   22436:	4630      	mov	r0, r6
   22438:	f7ff fed8 	bl	221ec <set_alarm>
   2243c:	e00d      	b.n	2245a <compare_set_nolocks+0x66>
		atomic_or(&force_isr_mask, BIT(chan));
   2243e:	2301      	movs	r3, #1
   22440:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   22442:	4a0f      	ldr	r2, [pc, #60]	; (22480 <compare_set_nolocks+0x8c>)
   22444:	f3bf 8f5b 	dmb	ish
   22448:	e852 0f00 	ldrex	r0, [r2]
   2244c:	4318      	orrs	r0, r3
   2244e:	e842 0100 	strex	r1, r0, [r2]
   22452:	2900      	cmp	r1, #0
   22454:	d1f8      	bne.n	22448 <compare_set_nolocks+0x54>
   22456:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
   2245a:	4b08      	ldr	r3, [pc, #32]	; (2247c <compare_set_nolocks+0x88>)
   2245c:	0132      	lsls	r2, r6, #4
   2245e:	eb03 1606 	add.w	r6, r3, r6, lsl #4
   22462:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
   22466:	9906      	ldr	r1, [sp, #24]
   22468:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
   2246a:	9b07      	ldr	r3, [sp, #28]
   2246c:	6073      	str	r3, [r6, #4]
	return ret;
   2246e:	2000      	movs	r0, #0
}
   22470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -EINVAL;
   22472:	f06f 0015 	mvn.w	r0, #21
   22476:	e7fb      	b.n	22470 <compare_set_nolocks+0x7c>
   22478:	00800001 	.word	0x00800001
   2247c:	20002988 	.word	0x20002988
   22480:	200088c8 	.word	0x200088c8

00022484 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   22484:	b530      	push	{r4, r5, lr}
   22486:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
   22488:	2300      	movs	r3, #0
   2248a:	4a1d      	ldr	r2, [pc, #116]	; (22500 <sys_clock_driver_init+0x7c>)
   2248c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   22490:	2b00      	cmp	r3, #0
   22492:	dd24      	ble.n	224de <sys_clock_driver_init+0x5a>
    p_reg->INTENSET = mask;
   22494:	4c1a      	ldr	r4, [pc, #104]	; (22500 <sys_clock_driver_init+0x7c>)
   22496:	2502      	movs	r5, #2
   22498:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2249c:	4b19      	ldr	r3, [pc, #100]	; (22504 <sys_clock_driver_init+0x80>)
   2249e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   224a2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   224a6:	2200      	movs	r2, #0
   224a8:	2101      	movs	r1, #1
   224aa:	2011      	movs	r0, #17
   224ac:	f006 f81f 	bl	284ee <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   224b0:	2011      	movs	r0, #17
   224b2:	f006 f812 	bl	284da <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   224b6:	2301      	movs	r3, #1
   224b8:	60a3      	str	r3, [r4, #8]
   224ba:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   224bc:	4a12      	ldr	r2, [pc, #72]	; (22508 <sys_clock_driver_init+0x84>)
   224be:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   224c0:	2400      	movs	r4, #0
   224c2:	9401      	str	r4, [sp, #4]
   224c4:	4b11      	ldr	r3, [pc, #68]	; (2250c <sys_clock_driver_init+0x88>)
   224c6:	9300      	str	r3, [sp, #0]
   224c8:	4a11      	ldr	r2, [pc, #68]	; (22510 <sys_clock_driver_init+0x8c>)
   224ca:	2300      	movs	r3, #0
   224cc:	4620      	mov	r0, r4
   224ce:	f009 fd7e 	bl	2bfce <compare_set>

	z_nrf_clock_control_lf_on(mode);
   224d2:	4628      	mov	r0, r5
   224d4:	f7fd ff00 	bl	202d8 <z_nrf_clock_control_lf_on>

	return 0;
}
   224d8:	4620      	mov	r0, r4
   224da:	b003      	add	sp, #12
   224dc:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   224de:	4a0d      	ldr	r2, [pc, #52]	; (22514 <sys_clock_driver_init+0x90>)
   224e0:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   224e4:	f04f 30ff 	mov.w	r0, #4294967295
   224e8:	f04f 31ff 	mov.w	r1, #4294967295
   224ec:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   224f0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   224f4:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
   224f6:	4902      	ldr	r1, [pc, #8]	; (22500 <sys_clock_driver_init+0x7c>)
   224f8:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   224fc:	3301      	adds	r3, #1
   224fe:	e7c7      	b.n	22490 <sys_clock_driver_init+0xc>
   22500:	40011000 	.word	0x40011000
   22504:	e000e100 	.word	0xe000e100
   22508:	200088cc 	.word	0x200088cc
   2250c:	00022365 	.word	0x00022365
   22510:	007fffff 	.word	0x007fffff
   22514:	20002988 	.word	0x20002988

00022518 <process_channel>:
{
   22518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2251c:	b082      	sub	sp, #8
   2251e:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
   22520:	f7ff fec0 	bl	222a4 <channel_processing_check_and_clear>
   22524:	b910      	cbnz	r0, 2252c <process_channel+0x14>
}
   22526:	b002      	add	sp, #8
   22528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
   2252c:	f7ff ff42 	bl	223b4 <z_nrf_rtc_timer_read>
   22530:	4682      	mov	sl, r0
   22532:	460d      	mov	r5, r1
		mcu_critical_state = full_int_lock();
   22534:	f009 fd44 	bl	2bfc0 <full_int_lock>
   22538:	4606      	mov	r6, r0
		expire_time = cc_data[chan].target_time;
   2253a:	4b15      	ldr	r3, [pc, #84]	; (22590 <process_channel+0x78>)
   2253c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   22540:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
   22544:	45c2      	cmp	sl, r8
   22546:	eb75 0509 	sbcs.w	r5, r5, r9
   2254a:	d20b      	bcs.n	22564 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   2254c:	2500      	movs	r5, #0
		full_int_unlock(mcu_critical_state);
   2254e:	4630      	mov	r0, r6
   22550:	f009 fd3a 	bl	2bfc8 <full_int_unlock>
		if (handler) {
   22554:	2d00      	cmp	r5, #0
   22556:	d0e6      	beq.n	22526 <process_channel+0xe>
			handler(chan, expire_time, user_context);
   22558:	9700      	str	r7, [sp, #0]
   2255a:	4642      	mov	r2, r8
   2255c:	464b      	mov	r3, r9
   2255e:	4620      	mov	r0, r4
   22560:	47a8      	blx	r5
}
   22562:	e7e0      	b.n	22526 <process_channel+0xe>
			handler = cc_data[chan].callback;
   22564:	4a0a      	ldr	r2, [pc, #40]	; (22590 <process_channel+0x78>)
   22566:	0123      	lsls	r3, r4, #4
   22568:	eb02 1104 	add.w	r1, r2, r4, lsl #4
   2256c:	58d5      	ldr	r5, [r2, r3]
			user_context = cc_data[chan].user_context;
   2256e:	684f      	ldr	r7, [r1, #4]
			cc_data[chan].callback = NULL;
   22570:	2000      	movs	r0, #0
   22572:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   22574:	f04f 32ff 	mov.w	r2, #4294967295
   22578:	f04f 33ff 	mov.w	r3, #4294967295
   2257c:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
   22580:	4620      	mov	r0, r4
   22582:	f7ff fe23 	bl	221cc <event_disable>
			event_clear(chan);
   22586:	4620      	mov	r0, r4
   22588:	f009 fd0b 	bl	2bfa2 <event_clear>
   2258c:	e7df      	b.n	2254e <process_channel+0x36>
   2258e:	bf00      	nop
   22590:	20002988 	.word	0x20002988

00022594 <rtc_nrf_isr>:
{
   22594:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
   22596:	4b0e      	ldr	r3, [pc, #56]	; (225d0 <rtc_nrf_isr+0x3c>)
   22598:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   2259c:	f013 0f02 	tst.w	r3, #2
   225a0:	d00d      	beq.n	225be <rtc_nrf_isr+0x2a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   225a2:	4b0b      	ldr	r3, [pc, #44]	; (225d0 <rtc_nrf_isr+0x3c>)
   225a4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   225a8:	b14b      	cbz	r3, 225be <rtc_nrf_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   225aa:	4b09      	ldr	r3, [pc, #36]	; (225d0 <rtc_nrf_isr+0x3c>)
   225ac:	2200      	movs	r2, #0
   225ae:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   225b2:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		overflow_cnt++;
   225b6:	4a07      	ldr	r2, [pc, #28]	; (225d4 <rtc_nrf_isr+0x40>)
   225b8:	6813      	ldr	r3, [r2, #0]
   225ba:	3301      	adds	r3, #1
   225bc:	6013      	str	r3, [r2, #0]
{
   225be:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   225c0:	2c00      	cmp	r4, #0
   225c2:	dd00      	ble.n	225c6 <rtc_nrf_isr+0x32>
}
   225c4:	bd10      	pop	{r4, pc}
		process_channel(chan);
   225c6:	4620      	mov	r0, r4
   225c8:	f7ff ffa6 	bl	22518 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   225cc:	3401      	adds	r4, #1
   225ce:	e7f7      	b.n	225c0 <rtc_nrf_isr+0x2c>
   225d0:	40011000 	.word	0x40011000
   225d4:	200088d0 	.word	0x200088d0

000225d8 <sys_clock_set_timeout>:
{
   225d8:	b510      	push	{r4, lr}
   225da:	b082      	sub	sp, #8
	if (ticks == K_TICKS_FOREVER) {
   225dc:	f1b0 3fff 	cmp.w	r0, #4294967295
   225e0:	d006      	beq.n	225f0 <sys_clock_set_timeout+0x18>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   225e2:	2801      	cmp	r0, #1
   225e4:	dd09      	ble.n	225fa <sys_clock_set_timeout+0x22>
   225e6:	4b15      	ldr	r3, [pc, #84]	; (2263c <sys_clock_set_timeout+0x64>)
   225e8:	4298      	cmp	r0, r3
   225ea:	dc24      	bgt.n	22636 <sys_clock_set_timeout+0x5e>
   225ec:	4604      	mov	r4, r0
   225ee:	e005      	b.n	225fc <sys_clock_set_timeout+0x24>
		sys_busy = false;
   225f0:	4b13      	ldr	r3, [pc, #76]	; (22640 <sys_clock_set_timeout+0x68>)
   225f2:	2200      	movs	r2, #0
   225f4:	701a      	strb	r2, [r3, #0]
		cyc = MAX_TICKS * CYC_PER_TICK;
   225f6:	4c13      	ldr	r4, [pc, #76]	; (22644 <sys_clock_set_timeout+0x6c>)
   225f8:	e003      	b.n	22602 <sys_clock_set_timeout+0x2a>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   225fa:	2401      	movs	r4, #1
		sys_busy = true;
   225fc:	4b10      	ldr	r3, [pc, #64]	; (22640 <sys_clock_set_timeout+0x68>)
   225fe:	2201      	movs	r2, #1
   22600:	701a      	strb	r2, [r3, #0]
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   22602:	f7ff fed7 	bl	223b4 <z_nrf_rtc_timer_read>
   22606:	4b10      	ldr	r3, [pc, #64]	; (22648 <sys_clock_set_timeout+0x70>)
   22608:	681a      	ldr	r2, [r3, #0]
   2260a:	685b      	ldr	r3, [r3, #4]
   2260c:	1a80      	subs	r0, r0, r2
	if (unannounced >= COUNTER_HALF_SPAN) {
   2260e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   22612:	d300      	bcc.n	22616 <sys_clock_set_timeout+0x3e>
		cyc = 0;
   22614:	2400      	movs	r4, #0
	cyc += unannounced;
   22616:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
   22618:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
   2261c:	d300      	bcc.n	22620 <sys_clock_set_timeout+0x48>
		cyc = MAX_CYCLES;
   2261e:	4c09      	ldr	r4, [pc, #36]	; (22644 <sys_clock_set_timeout+0x6c>)
	uint64_t target_time = cyc + last_count;
   22620:	2000      	movs	r0, #0
   22622:	1912      	adds	r2, r2, r4
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   22624:	9001      	str	r0, [sp, #4]
   22626:	4909      	ldr	r1, [pc, #36]	; (2264c <sys_clock_set_timeout+0x74>)
   22628:	9100      	str	r1, [sp, #0]
   2262a:	f143 0300 	adc.w	r3, r3, #0
   2262e:	f009 fcce 	bl	2bfce <compare_set>
}
   22632:	b002      	add	sp, #8
   22634:	bd10      	pop	{r4, pc}
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   22636:	4c03      	ldr	r4, [pc, #12]	; (22644 <sys_clock_set_timeout+0x6c>)
   22638:	e7e0      	b.n	225fc <sys_clock_set_timeout+0x24>
   2263a:	bf00      	nop
   2263c:	007ffffe 	.word	0x007ffffe
   22640:	20008fe5 	.word	0x20008fe5
   22644:	007fffff 	.word	0x007fffff
   22648:	20002998 	.word	0x20002998
   2264c:	00022365 	.word	0x00022365

00022650 <sys_clock_elapsed>:
{
   22650:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   22652:	f7ff feaf 	bl	223b4 <z_nrf_rtc_timer_read>
   22656:	4b02      	ldr	r3, [pc, #8]	; (22660 <sys_clock_elapsed+0x10>)
   22658:	681b      	ldr	r3, [r3, #0]
}
   2265a:	1ac0      	subs	r0, r0, r3
   2265c:	bd08      	pop	{r3, pc}
   2265e:	bf00      	nop
   22660:	20002998 	.word	0x20002998

00022664 <nrf_gpio_pin_write>:
    if (value == 0)
   22664:	b969      	cbnz	r1, 22682 <nrf_gpio_pin_write+0x1e>
    *p_pin = pin_number & 0x1F;
   22666:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
   2266a:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2266c:	2801      	cmp	r0, #1
   2266e:	d006      	beq.n	2267e <nrf_gpio_pin_write+0x1a>
        case 0: return NRF_P0;
   22670:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   22674:	2301      	movs	r3, #1
   22676:	408b      	lsls	r3, r1
    p_reg->OUTCLR = clr_mask;
   22678:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   2267c:	4770      	bx	lr
        case 1: return NRF_P1;
   2267e:	4a08      	ldr	r2, [pc, #32]	; (226a0 <nrf_gpio_pin_write+0x3c>)
   22680:	e7f8      	b.n	22674 <nrf_gpio_pin_write+0x10>
    *p_pin = pin_number & 0x1F;
   22682:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
   22686:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   22688:	2801      	cmp	r0, #1
   2268a:	d006      	beq.n	2269a <nrf_gpio_pin_write+0x36>
        case 0: return NRF_P0;
   2268c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   22690:	2301      	movs	r3, #1
   22692:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
   22694:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
}
   22698:	4770      	bx	lr
        case 1: return NRF_P1;
   2269a:	4a01      	ldr	r2, [pc, #4]	; (226a0 <nrf_gpio_pin_write+0x3c>)
   2269c:	e7f8      	b.n	22690 <nrf_gpio_pin_write+0x2c>
   2269e:	bf00      	nop
   226a0:	50000300 	.word	0x50000300

000226a4 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   226a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   226a8:	b083      	sub	sp, #12
   226aa:	4607      	mov	r7, r0
   226ac:	4689      	mov	r9, r1
   226ae:	9201      	str	r2, [sp, #4]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   226b0:	2400      	movs	r4, #0
   226b2:	e02a      	b.n	2270a <pinctrl_configure_pins+0x66>
		uint32_t write = NO_WRITE;
		nrf_gpio_pin_dir_t dir;
		nrf_gpio_pin_input_t input;

		if (pin == NRF_PIN_DISCONNECTED) {
			pin = 0xFFFFFFFFU;
   226b4:	f04f 35ff 	mov.w	r5, #4294967295
   226b8:	e033      	b.n	22722 <pinctrl_configure_pins+0x7e>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
			break;
#endif /* defined(NRF_PSEL_UART) */
#if defined(NRF_PSEL_SPIM)
		case NRF_FUN_SPIM_SCK:
			NRF_PSEL_SPIM(reg, SCK) = pin;
   226ba:	9b01      	ldr	r3, [sp, #4]
   226bc:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
			write = 0U;
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   226c0:	f04f 0800 	mov.w	r8, #0
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   226c4:	2601      	movs	r6, #1
			write = 0U;
   226c6:	4641      	mov	r1, r8
		default:
			return -ENOTSUP;
		}

		/* configure GPIO properties */
		if (pin != NRF_PIN_DISCONNECTED) {
   226c8:	2d7f      	cmp	r5, #127	; 0x7f
   226ca:	d01c      	beq.n	22706 <pinctrl_configure_pins+0x62>
			if (write != NO_WRITE) {
   226cc:	2900      	cmp	r1, #0
   226ce:	d045      	beq.n	2275c <pinctrl_configure_pins+0xb8>
				nrf_gpio_pin_write(pin, write);
			}

			/* force input and disconnected buffer for low power */
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   226d0:	f857 300b 	ldr.w	r3, [r7, fp]
   226d4:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   226d8:	d002      	beq.n	226e0 <pinctrl_configure_pins+0x3c>
				dir = NRF_GPIO_PIN_DIR_INPUT;
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   226da:	f04f 0801 	mov.w	r8, #1
				dir = NRF_GPIO_PIN_DIR_INPUT;
   226de:	2600      	movs	r6, #0
			}

			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
   226e0:	f3c3 13c1 	ubfx	r3, r3, #7, #2
    *p_pin = pin_number & 0x1F;
   226e4:	f005 021f 	and.w	r2, r5, #31
    return pin_number >> 5;
   226e8:	096d      	lsrs	r5, r5, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   226ea:	2d01      	cmp	r5, #1
   226ec:	d03a      	beq.n	22764 <pinctrl_configure_pins+0xc0>
        case 0: return NRF_P0;
   226ee:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   226f2:	ea46 0648 	orr.w	r6, r6, r8, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
   226f6:	ea46 0683 	orr.w	r6, r6, r3, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   226fa:	ea46 260a 	orr.w	r6, r6, sl, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
   226fe:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   22702:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   22706:	3401      	adds	r4, #1
   22708:	b2e4      	uxtb	r4, r4
   2270a:	454c      	cmp	r4, r9
   2270c:	d22c      	bcs.n	22768 <pinctrl_configure_pins+0xc4>
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   2270e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
   22712:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   22716:	f3c3 2a43 	ubfx	sl, r3, #9, #4
		uint32_t pin = NRF_GET_PIN(pins[i]);
   2271a:	f003 057f 	and.w	r5, r3, #127	; 0x7f
		if (pin == NRF_PIN_DISCONNECTED) {
   2271e:	2d7f      	cmp	r5, #127	; 0x7f
   22720:	d0c8      	beq.n	226b4 <pinctrl_configure_pins+0x10>
		switch (NRF_GET_FUN(pins[i])) {
   22722:	0c1b      	lsrs	r3, r3, #16
   22724:	2b05      	cmp	r3, #5
   22726:	d008      	beq.n	2273a <pinctrl_configure_pins+0x96>
   22728:	2b06      	cmp	r3, #6
   2272a:	d00e      	beq.n	2274a <pinctrl_configure_pins+0xa6>
   2272c:	2b04      	cmp	r3, #4
   2272e:	d0c4      	beq.n	226ba <pinctrl_configure_pins+0x16>
   22730:	f06f 0085 	mvn.w	r0, #133	; 0x85
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
}
   22734:	b003      	add	sp, #12
   22736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			NRF_PSEL_SPIM(reg, MOSI) = pin;
   2273a:	9b01      	ldr	r3, [sp, #4]
   2273c:	f8c3 550c 	str.w	r5, [r3, #1292]	; 0x50c
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   22740:	f04f 0801 	mov.w	r8, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   22744:	4646      	mov	r6, r8
			write = 0U;
   22746:	2100      	movs	r1, #0
			break;
   22748:	e7be      	b.n	226c8 <pinctrl_configure_pins+0x24>
			NRF_PSEL_SPIM(reg, MISO) = pin;
   2274a:	9b01      	ldr	r3, [sp, #4]
   2274c:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   22750:	f04f 0800 	mov.w	r8, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   22754:	4646      	mov	r6, r8
		uint32_t write = NO_WRITE;
   22756:	f04f 31ff 	mov.w	r1, #4294967295
			break;
   2275a:	e7b5      	b.n	226c8 <pinctrl_configure_pins+0x24>
				nrf_gpio_pin_write(pin, write);
   2275c:	4628      	mov	r0, r5
   2275e:	f7ff ff81 	bl	22664 <nrf_gpio_pin_write>
   22762:	e7b5      	b.n	226d0 <pinctrl_configure_pins+0x2c>
        case 1: return NRF_P1;
   22764:	4901      	ldr	r1, [pc, #4]	; (2276c <pinctrl_configure_pins+0xc8>)
   22766:	e7c4      	b.n	226f2 <pinctrl_configure_pins+0x4e>
	return 0;
   22768:	2000      	movs	r0, #0
   2276a:	e7e3      	b.n	22734 <pinctrl_configure_pins+0x90>
   2276c:	50000300 	.word	0x50000300

00022770 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   22770:	b508      	push	{r3, lr}
   22772:	4602      	mov	r2, r0
   22774:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   22776:	4802      	ldr	r0, [pc, #8]	; (22780 <multithreading_lock_acquire+0x10>)
   22778:	f002 fc2a 	bl	24fd0 <z_impl_k_mutex_lock>
	return k_mutex_lock(&mpsl_lock, timeout);
}
   2277c:	bd08      	pop	{r3, pc}
   2277e:	bf00      	nop
   22780:	20000bd4 	.word	0x20000bd4

00022784 <multithreading_lock_release>:

void multithreading_lock_release(void)
{
   22784:	b508      	push	{r3, lr}
	return z_impl_k_mutex_unlock(mutex);
   22786:	4802      	ldr	r0, [pc, #8]	; (22790 <multithreading_lock_release+0xc>)
   22788:	f002 fca6 	bl	250d8 <z_impl_k_mutex_unlock>
	k_mutex_unlock(&mpsl_lock);
}
   2278c:	bd08      	pop	{r3, pc}
   2278e:	bf00      	nop
   22790:	20000bd4 	.word	0x20000bd4

00022794 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   22794:	b500      	push	{lr}
   22796:	b083      	sub	sp, #12
	z_impl_log_panic();
   22798:	f7f3 fb96 	bl	15ec8 <z_impl_log_panic>
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   2279c:	2006      	movs	r0, #6
   2279e:	f7f3 fb13 	bl	15dc8 <z_log_msg_alloc>
   227a2:	2200      	movs	r2, #0
   227a4:	f36f 0200 	bfc	r2, #0, #1
   227a8:	f36f 0241 	bfc	r2, #1, #1
   227ac:	f36f 0282 	bfc	r2, #2, #1
   227b0:	f36f 02c5 	bfc	r2, #3, #3
   227b4:	2301      	movs	r3, #1
   227b6:	f363 1288 	bfi	r2, r3, #6, #3
   227ba:	2308      	movs	r3, #8
   227bc:	f363 2252 	bfi	r2, r3, #9, #10
   227c0:	f36f 42de 	bfc	r2, #19, #12
   227c4:	f36f 72df 	bfc	r2, #31, #1
   227c8:	4684      	mov	ip, r0
   227ca:	b190      	cbz	r0, 227f2 <k_sys_fatal_error_handler+0x5e>
   227cc:	f110 0310 	adds.w	r3, r0, #16
   227d0:	d001      	beq.n	227d6 <k_sys_fatal_error_handler+0x42>
   227d2:	490c      	ldr	r1, [pc, #48]	; (22804 <k_sys_fatal_error_handler+0x70>)
   227d4:	6141      	str	r1, [r0, #20]
   227d6:	b163      	cbz	r3, 227f2 <k_sys_fatal_error_handler+0x5e>
   227d8:	2302      	movs	r3, #2
   227da:	f88d 3004 	strb.w	r3, [sp, #4]
   227de:	2300      	movs	r3, #0
   227e0:	f88d 3005 	strb.w	r3, [sp, #5]
   227e4:	f88d 3006 	strb.w	r3, [sp, #6]
   227e8:	f88d 3007 	strb.w	r3, [sp, #7]
   227ec:	9801      	ldr	r0, [sp, #4]
   227ee:	f8cc 0010 	str.w	r0, [ip, #16]
   227f2:	2300      	movs	r3, #0
   227f4:	4904      	ldr	r1, [pc, #16]	; (22808 <k_sys_fatal_error_handler+0x74>)
   227f6:	4660      	mov	r0, ip
   227f8:	f005 faf1 	bl	27dde <z_log_msg_finalize>
		sys_arch_reboot(0);
   227fc:	2000      	movs	r0, #0
   227fe:	f005 ff90 	bl	28722 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   22802:	bf00      	nop
   22804:	00030f0c 	.word	0x00030f0c
   22808:	0002def0 	.word	0x0002def0

0002280c <rand_prio_low_vector_get_blocking>:
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
	return ret >= 0 ? ret : 0;
}

static void rand_prio_low_vector_get_blocking(uint8_t *p_buff, uint8_t length)
{
   2280c:	b510      	push	{r4, lr}
   2280e:	4603      	mov	r3, r0
   22810:	460a      	mov	r2, r1

static inline int z_impl_entropy_get_entropy(const struct device *dev,
					     uint8_t *buffer,
					     uint16_t length)
{
	const struct entropy_driver_api *api =
   22812:	4803      	ldr	r0, [pc, #12]	; (22820 <rand_prio_low_vector_get_blocking+0x14>)
   22814:	6881      	ldr	r1, [r0, #8]
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   22816:	680c      	ldr	r4, [r1, #0]
   22818:	4619      	mov	r1, r3
   2281a:	47a0      	blx	r4
	int err = entropy_get_entropy(entropy_source, p_buff, length);

	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
	(void) err;
}
   2281c:	bd10      	pop	{r4, pc}
   2281e:	bf00      	nop
   22820:	0002dc08 	.word	0x0002dc08

00022824 <sdc_assertion_handler>:
{
   22824:	b590      	push	{r4, r7, lr}
   22826:	b083      	sub	sp, #12
   22828:	af00      	add	r7, sp, #0
	LOG_ERR("SoftDevice Controller ASSERT: %s, %d", file, line);
   2282a:	466c      	mov	r4, sp
   2282c:	2300      	movs	r3, #0
   2282e:	713b      	strb	r3, [r7, #4]
   22830:	2302      	movs	r3, #2
   22832:	717b      	strb	r3, [r7, #5]
   22834:	b08a      	sub	sp, #40	; 0x28
   22836:	46ec      	mov	ip, sp
   22838:	f11c 0210 	adds.w	r2, ip, #16
   2283c:	d01b      	beq.n	22876 <sdc_assertion_handler+0x52>
   2283e:	f04f 0e12 	mov.w	lr, #18
   22842:	b12a      	cbz	r2, 22850 <sdc_assertion_handler+0x2c>
   22844:	f1be 0f04 	cmp.w	lr, #4
   22848:	dd02      	ble.n	22850 <sdc_assertion_handler+0x2c>
   2284a:	4b2b      	ldr	r3, [pc, #172]	; (228f8 <sdc_assertion_handler+0xd4>)
   2284c:	f8cc 3014 	str.w	r3, [ip, #20]
   22850:	2300      	movs	r3, #0
   22852:	703b      	strb	r3, [r7, #0]
   22854:	2302      	movs	r3, #2
   22856:	707b      	strb	r3, [r7, #1]
   22858:	b1d2      	cbz	r2, 22890 <sdc_assertion_handler+0x6c>
   2285a:	4673      	mov	r3, lr
   2285c:	f1be 0f08 	cmp.w	lr, #8
   22860:	dd01      	ble.n	22866 <sdc_assertion_handler+0x42>
   22862:	f8cc 0018 	str.w	r0, [ip, #24]
   22866:	2b0c      	cmp	r3, #12
   22868:	dd01      	ble.n	2286e <sdc_assertion_handler+0x4a>
   2286a:	f8cc 101c 	str.w	r1, [ip, #28]
   2286e:	f10c 0320 	add.w	r3, ip, #32
   22872:	2100      	movs	r1, #0
   22874:	e00a      	b.n	2288c <sdc_assertion_handler+0x68>
   22876:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
   2287a:	e7e2      	b.n	22842 <sdc_assertion_handler+0x1e>
   2287c:	f101 0008 	add.w	r0, r1, #8
   22880:	4438      	add	r0, r7
   22882:	f810 0c08 	ldrb.w	r0, [r0, #-8]
   22886:	f803 0b01 	strb.w	r0, [r3], #1
   2288a:	3101      	adds	r1, #1
   2288c:	2901      	cmp	r1, #1
   2288e:	d9f5      	bls.n	2287c <sdc_assertion_handler+0x58>
   22890:	f1be 0f11 	cmp.w	lr, #17
   22894:	dd2d      	ble.n	228f2 <sdc_assertion_handler+0xce>
   22896:	2312      	movs	r3, #18
   22898:	b14a      	cbz	r2, 228ae <sdc_assertion_handler+0x8a>
   2289a:	2104      	movs	r1, #4
   2289c:	7139      	strb	r1, [r7, #4]
   2289e:	2100      	movs	r1, #0
   228a0:	7179      	strb	r1, [r7, #5]
   228a2:	71b9      	strb	r1, [r7, #6]
   228a4:	2101      	movs	r1, #1
   228a6:	71f9      	strb	r1, [r7, #7]
   228a8:	6878      	ldr	r0, [r7, #4]
   228aa:	f8cc 0010 	str.w	r0, [ip, #16]
   228ae:	2100      	movs	r1, #0
   228b0:	f36f 0100 	bfc	r1, #0, #1
   228b4:	f36f 0141 	bfc	r1, #1, #1
   228b8:	f36f 0182 	bfc	r1, #2, #1
   228bc:	f36f 01c5 	bfc	r1, #3, #3
   228c0:	2001      	movs	r0, #1
   228c2:	f360 1188 	bfi	r1, r0, #6, #3
   228c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
   228ca:	f363 2152 	bfi	r1, r3, #9, #10
   228ce:	f36f 41de 	bfc	r1, #19, #12
   228d2:	f36f 71df 	bfc	r1, #31, #1
   228d6:	2300      	movs	r3, #0
   228d8:	4808      	ldr	r0, [pc, #32]	; (228fc <sdc_assertion_handler+0xd8>)
   228da:	f005 fa98 	bl	27e0e <z_impl_z_log_msg_static_create>
   228de:	46a5      	mov	sp, r4
	k_oops();
   228e0:	4040      	eors	r0, r0
   228e2:	f380 8811 	msr	BASEPRI, r0
   228e6:	f04f 0003 	mov.w	r0, #3
   228ea:	df02      	svc	2
}
   228ec:	370c      	adds	r7, #12
   228ee:	46bd      	mov	sp, r7
   228f0:	bd90      	pop	{r4, r7, pc}
	LOG_ERR("SoftDevice Controller ASSERT: %s, %d", file, line);
   228f2:	f06f 031b 	mvn.w	r3, #27
   228f6:	e7cf      	b.n	22898 <sdc_assertion_handler+0x74>
   228f8:	00030f2c 	.word	0x00030f2c
   228fc:	0002dec0 	.word	0x0002dec0

00022900 <event_packet_process>:
{
   22900:	b570      	push	{r4, r5, r6, lr}
   22902:	b082      	sub	sp, #8
   22904:	4604      	mov	r4, r0
	bool discardable = event_packet_is_discardable(hci_buf);
   22906:	f009 fb98 	bl	2c03a <event_packet_is_discardable>
   2290a:	4603      	mov	r3, r0
	if (hdr->evt == BT_HCI_EVT_LE_META_EVENT) {
   2290c:	7820      	ldrb	r0, [r4, #0]
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   2290e:	461d      	mov	r5, r3
   22910:	b18b      	cbz	r3, 22936 <event_packet_process+0x36>
   22912:	2200      	movs	r2, #0
   22914:	2300      	movs	r3, #0
   22916:	4629      	mov	r1, r5
   22918:	f7f5 fe56 	bl	185c8 <bt_buf_get_evt>
	if (!evt_buf) {
   2291c:	4606      	mov	r6, r0
   2291e:	b178      	cbz	r0, 22940 <event_packet_process+0x40>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   22920:	7862      	ldrb	r2, [r4, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   22922:	3202      	adds	r2, #2
   22924:	4621      	mov	r1, r4
   22926:	300c      	adds	r0, #12
   22928:	f008 fbb8 	bl	2b09c <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   2292c:	4630      	mov	r0, r6
   2292e:	f7f7 ffe9 	bl	1a904 <bt_recv>
}
   22932:	b002      	add	sp, #8
   22934:	bd70      	pop	{r4, r5, r6, pc}
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   22936:	f04f 32ff 	mov.w	r2, #4294967295
   2293a:	f04f 33ff 	mov.w	r3, #4294967295
   2293e:	e7ea      	b.n	22916 <event_packet_process+0x16>
		if (discardable) {
   22940:	2d00      	cmp	r5, #0
   22942:	d1f6      	bne.n	22932 <event_packet_process+0x32>
		LOG_ERR("No event buffer available");
   22944:	2006      	movs	r0, #6
   22946:	f7f3 fa3f 	bl	15dc8 <z_log_msg_alloc>
   2294a:	2200      	movs	r2, #0
   2294c:	f36f 0200 	bfc	r2, #0, #1
   22950:	f36f 0241 	bfc	r2, #1, #1
   22954:	f36f 0282 	bfc	r2, #2, #1
   22958:	f36f 02c5 	bfc	r2, #3, #3
   2295c:	2301      	movs	r3, #1
   2295e:	f363 1288 	bfi	r2, r3, #6, #3
   22962:	2308      	movs	r3, #8
   22964:	f363 2252 	bfi	r2, r3, #9, #10
   22968:	f36f 42de 	bfc	r2, #19, #12
   2296c:	f36f 72df 	bfc	r2, #31, #1
   22970:	4604      	mov	r4, r0
   22972:	b188      	cbz	r0, 22998 <event_packet_process+0x98>
   22974:	f110 0310 	adds.w	r3, r0, #16
   22978:	d001      	beq.n	2297e <event_packet_process+0x7e>
   2297a:	490a      	ldr	r1, [pc, #40]	; (229a4 <event_packet_process+0xa4>)
   2297c:	6141      	str	r1, [r0, #20]
   2297e:	b15b      	cbz	r3, 22998 <event_packet_process+0x98>
   22980:	2302      	movs	r3, #2
   22982:	f88d 3004 	strb.w	r3, [sp, #4]
   22986:	2300      	movs	r3, #0
   22988:	f88d 3005 	strb.w	r3, [sp, #5]
   2298c:	f88d 3006 	strb.w	r3, [sp, #6]
   22990:	f88d 3007 	strb.w	r3, [sp, #7]
   22994:	9801      	ldr	r0, [sp, #4]
   22996:	6120      	str	r0, [r4, #16]
   22998:	2300      	movs	r3, #0
   2299a:	4903      	ldr	r1, [pc, #12]	; (229a8 <event_packet_process+0xa8>)
   2299c:	4620      	mov	r0, r4
   2299e:	f005 fa1e 	bl	27dde <z_log_msg_finalize>
		return;
   229a2:	e7c6      	b.n	22932 <event_packet_process+0x32>
   229a4:	00030f54 	.word	0x00030f54
   229a8:	0002dec0 	.word	0x0002dec0

000229ac <data_packet_process>:
{
   229ac:	b530      	push	{r4, r5, lr}
   229ae:	b083      	sub	sp, #12
   229b0:	4604      	mov	r4, r0
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   229b2:	f04f 32ff 	mov.w	r2, #4294967295
   229b6:	f04f 33ff 	mov.w	r3, #4294967295
   229ba:	2003      	movs	r0, #3
   229bc:	f7f5 fdda 	bl	18574 <bt_buf_get_rx>
	if (!data_buf) {
   229c0:	b158      	cbz	r0, 229da <data_packet_process+0x2e>
   229c2:	4605      	mov	r5, r0
	len = sys_le16_to_cpu(hdr->len);
   229c4:	8862      	ldrh	r2, [r4, #2]
   229c6:	3204      	adds	r2, #4
   229c8:	4621      	mov	r1, r4
   229ca:	300c      	adds	r0, #12
   229cc:	f008 fb66 	bl	2b09c <net_buf_simple_add_mem>
	bt_recv(data_buf);
   229d0:	4628      	mov	r0, r5
   229d2:	f7f7 ff97 	bl	1a904 <bt_recv>
}
   229d6:	b003      	add	sp, #12
   229d8:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("No data buffer available");
   229da:	2006      	movs	r0, #6
   229dc:	f7f3 f9f4 	bl	15dc8 <z_log_msg_alloc>
   229e0:	2200      	movs	r2, #0
   229e2:	f36f 0200 	bfc	r2, #0, #1
   229e6:	f36f 0241 	bfc	r2, #1, #1
   229ea:	f36f 0282 	bfc	r2, #2, #1
   229ee:	f36f 02c5 	bfc	r2, #3, #3
   229f2:	2301      	movs	r3, #1
   229f4:	f363 1288 	bfi	r2, r3, #6, #3
   229f8:	2308      	movs	r3, #8
   229fa:	f363 2252 	bfi	r2, r3, #9, #10
   229fe:	f36f 42de 	bfc	r2, #19, #12
   22a02:	f36f 72df 	bfc	r2, #31, #1
   22a06:	4604      	mov	r4, r0
   22a08:	b188      	cbz	r0, 22a2e <data_packet_process+0x82>
   22a0a:	f110 0310 	adds.w	r3, r0, #16
   22a0e:	d001      	beq.n	22a14 <data_packet_process+0x68>
   22a10:	490a      	ldr	r1, [pc, #40]	; (22a3c <data_packet_process+0x90>)
   22a12:	6141      	str	r1, [r0, #20]
   22a14:	b15b      	cbz	r3, 22a2e <data_packet_process+0x82>
   22a16:	2302      	movs	r3, #2
   22a18:	f88d 3004 	strb.w	r3, [sp, #4]
   22a1c:	2300      	movs	r3, #0
   22a1e:	f88d 3005 	strb.w	r3, [sp, #5]
   22a22:	f88d 3006 	strb.w	r3, [sp, #6]
   22a26:	f88d 3007 	strb.w	r3, [sp, #7]
   22a2a:	9801      	ldr	r0, [sp, #4]
   22a2c:	6120      	str	r0, [r4, #16]
   22a2e:	2300      	movs	r3, #0
   22a30:	4903      	ldr	r1, [pc, #12]	; (22a40 <data_packet_process+0x94>)
   22a32:	4620      	mov	r0, r4
   22a34:	f005 f9d3 	bl	27dde <z_log_msg_finalize>
		return;
   22a38:	e7cd      	b.n	229d6 <data_packet_process+0x2a>
   22a3a:	bf00      	nop
   22a3c:	00030f70 	.word	0x00030f70
   22a40:	0002dec0 	.word	0x0002dec0

00022a44 <fetch_and_process_hci_msg>:
{
   22a44:	b530      	push	{r4, r5, lr}
   22a46:	b083      	sub	sp, #12
   22a48:	4604      	mov	r4, r0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   22a4a:	f04f 30ff 	mov.w	r0, #4294967295
   22a4e:	f04f 31ff 	mov.w	r1, #4294967295
   22a52:	f7ff fe8d 	bl	22770 <multithreading_lock_acquire>
	if (!errcode) {
   22a56:	b110      	cbz	r0, 22a5e <fetch_and_process_hci_msg+0x1a>
		return false;
   22a58:	2000      	movs	r0, #0
}
   22a5a:	b003      	add	sp, #12
   22a5c:	bd30      	pop	{r4, r5, pc}
		errcode = hci_internal_msg_get(p_hci_buffer, &msg_type);
   22a5e:	f10d 0107 	add.w	r1, sp, #7
   22a62:	4620      	mov	r0, r4
   22a64:	f000 fb4c 	bl	23100 <hci_internal_msg_get>
   22a68:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   22a6a:	f7ff fe8b 	bl	22784 <multithreading_lock_release>
	if (errcode) {
   22a6e:	2d00      	cmp	r5, #0
   22a70:	d1f2      	bne.n	22a58 <fetch_and_process_hci_msg+0x14>
	if (msg_type == SDC_HCI_MSG_TYPE_EVT) {
   22a72:	f89d 5007 	ldrb.w	r5, [sp, #7]
   22a76:	2d04      	cmp	r5, #4
   22a78:	d033      	beq.n	22ae2 <fetch_and_process_hci_msg+0x9e>
	} else if (msg_type == SDC_HCI_MSG_TYPE_DATA) {
   22a7a:	2d02      	cmp	r5, #2
   22a7c:	d036      	beq.n	22aec <fetch_and_process_hci_msg+0xa8>
		LOG_ERR("Unexpected msg_type: %u. This if-else needs a new branch", msg_type);
   22a7e:	2008      	movs	r0, #8
   22a80:	f7f3 f9a2 	bl	15dc8 <z_log_msg_alloc>
   22a84:	2200      	movs	r2, #0
   22a86:	f36f 0200 	bfc	r2, #0, #1
   22a8a:	f36f 0241 	bfc	r2, #1, #1
   22a8e:	f36f 0282 	bfc	r2, #2, #1
   22a92:	f36f 02c5 	bfc	r2, #3, #3
   22a96:	2301      	movs	r3, #1
   22a98:	f363 1288 	bfi	r2, r3, #6, #3
   22a9c:	230c      	movs	r3, #12
   22a9e:	f363 2252 	bfi	r2, r3, #9, #10
   22aa2:	f36f 42de 	bfc	r2, #19, #12
   22aa6:	f36f 72df 	bfc	r2, #31, #1
   22aaa:	4604      	mov	r4, r0
   22aac:	b190      	cbz	r0, 22ad4 <fetch_and_process_hci_msg+0x90>
   22aae:	f110 0310 	adds.w	r3, r0, #16
   22ab2:	d002      	beq.n	22aba <fetch_and_process_hci_msg+0x76>
   22ab4:	4910      	ldr	r1, [pc, #64]	; (22af8 <fetch_and_process_hci_msg+0xb4>)
   22ab6:	6141      	str	r1, [r0, #20]
   22ab8:	6185      	str	r5, [r0, #24]
   22aba:	b15b      	cbz	r3, 22ad4 <fetch_and_process_hci_msg+0x90>
   22abc:	2303      	movs	r3, #3
   22abe:	f88d 3000 	strb.w	r3, [sp]
   22ac2:	2300      	movs	r3, #0
   22ac4:	f88d 3001 	strb.w	r3, [sp, #1]
   22ac8:	f88d 3002 	strb.w	r3, [sp, #2]
   22acc:	f88d 3003 	strb.w	r3, [sp, #3]
   22ad0:	9800      	ldr	r0, [sp, #0]
   22ad2:	6120      	str	r0, [r4, #16]
   22ad4:	2300      	movs	r3, #0
   22ad6:	4909      	ldr	r1, [pc, #36]	; (22afc <fetch_and_process_hci_msg+0xb8>)
   22ad8:	4620      	mov	r0, r4
   22ada:	f005 f980 	bl	27dde <z_log_msg_finalize>
	return true;
   22ade:	2001      	movs	r0, #1
   22ae0:	e7bb      	b.n	22a5a <fetch_and_process_hci_msg+0x16>
		event_packet_process(p_hci_buffer);
   22ae2:	4620      	mov	r0, r4
   22ae4:	f7ff ff0c 	bl	22900 <event_packet_process>
	return true;
   22ae8:	2001      	movs	r0, #1
   22aea:	e7b6      	b.n	22a5a <fetch_and_process_hci_msg+0x16>
		data_packet_process(p_hci_buffer);
   22aec:	4620      	mov	r0, r4
   22aee:	f7ff ff5d 	bl	229ac <data_packet_process>
	return true;
   22af2:	2001      	movs	r0, #1
   22af4:	e7b1      	b.n	22a5a <fetch_and_process_hci_msg+0x16>
   22af6:	bf00      	nop
   22af8:	00030f8c 	.word	0x00030f8c
   22afc:	0002dec0 	.word	0x0002dec0

00022b00 <receive_signal_raise>:
{
   22b00:	b508      	push	{r3, lr}
 *
 * @return N/A
 */
static inline int mpsl_work_submit(struct k_work *work)
{
	return k_work_submit_to_queue(&mpsl_work_q, work);
   22b02:	4902      	ldr	r1, [pc, #8]	; (22b0c <receive_signal_raise+0xc>)
   22b04:	4802      	ldr	r0, [pc, #8]	; (22b10 <receive_signal_raise+0x10>)
   22b06:	f00a fb21 	bl	2d14c <k_work_submit_to_queue>
}
   22b0a:	bd08      	pop	{r3, pc}
   22b0c:	200089d4 	.word	0x200089d4
   22b10:	20007790 	.word	0x20007790

00022b14 <acl_handle>:
{
   22b14:	b538      	push	{r3, r4, r5, lr}
   22b16:	4604      	mov	r4, r0
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   22b18:	f04f 30ff 	mov.w	r0, #4294967295
   22b1c:	f04f 31ff 	mov.w	r1, #4294967295
   22b20:	f7ff fe26 	bl	22770 <multithreading_lock_acquire>
	if (!errcode) {
   22b24:	4605      	mov	r5, r0
   22b26:	b108      	cbz	r0, 22b2c <acl_handle+0x18>
}
   22b28:	4628      	mov	r0, r5
   22b2a:	bd38      	pop	{r3, r4, r5, pc}
		errcode = sdc_hci_data_put(acl->data);
   22b2c:	68e0      	ldr	r0, [r4, #12]
   22b2e:	f7ea fa5a 	bl	cfe6 <sdc_hci_data_put>
   22b32:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   22b34:	f7ff fe26 	bl	22784 <multithreading_lock_release>
		if (errcode) {
   22b38:	2d00      	cmp	r5, #0
   22b3a:	d0f5      	beq.n	22b28 <acl_handle+0x14>
   22b3c:	4902      	ldr	r1, [pc, #8]	; (22b48 <acl_handle+0x34>)
   22b3e:	4803      	ldr	r0, [pc, #12]	; (22b4c <acl_handle+0x38>)
   22b40:	f00a fb04 	bl	2d14c <k_work_submit_to_queue>
}
   22b44:	e7f0      	b.n	22b28 <acl_handle+0x14>
   22b46:	bf00      	nop
   22b48:	200089d4 	.word	0x200089d4
   22b4c:	20007790 	.word	0x20007790

00022b50 <cmd_handle>:
{
   22b50:	b538      	push	{r3, r4, r5, lr}
   22b52:	4605      	mov	r5, r0
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   22b54:	f04f 30ff 	mov.w	r0, #4294967295
   22b58:	f04f 31ff 	mov.w	r1, #4294967295
   22b5c:	f7ff fe08 	bl	22770 <multithreading_lock_acquire>
	if (!errcode) {
   22b60:	4604      	mov	r4, r0
   22b62:	b108      	cbz	r0, 22b68 <cmd_handle+0x18>
}
   22b64:	4620      	mov	r0, r4
   22b66:	bd38      	pop	{r3, r4, r5, pc}
		errcode = hci_internal_cmd_put(cmd->data);
   22b68:	68e8      	ldr	r0, [r5, #12]
   22b6a:	f000 fab5 	bl	230d8 <hci_internal_cmd_put>
   22b6e:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   22b70:	f7ff fe08 	bl	22784 <multithreading_lock_release>
	if (errcode) {
   22b74:	2c00      	cmp	r4, #0
   22b76:	d1f5      	bne.n	22b64 <cmd_handle+0x14>
   22b78:	4902      	ldr	r1, [pc, #8]	; (22b84 <cmd_handle+0x34>)
   22b7a:	4803      	ldr	r0, [pc, #12]	; (22b88 <cmd_handle+0x38>)
   22b7c:	f00a fae6 	bl	2d14c <k_work_submit_to_queue>
	return 0;
   22b80:	e7f0      	b.n	22b64 <cmd_handle+0x14>
   22b82:	bf00      	nop
   22b84:	200089d4 	.word	0x200089d4
   22b88:	20007790 	.word	0x20007790

00022b8c <rand_prio_high_vector_get>:
{
   22b8c:	b510      	push	{r4, lr}
static inline int entropy_get_entropy_isr(const struct device *dev,
					  uint8_t *buffer,
					  uint16_t length,
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
   22b8e:	4b08      	ldr	r3, [pc, #32]	; (22bb0 <rand_prio_high_vector_get+0x24>)
   22b90:	689b      	ldr	r3, [r3, #8]
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   22b92:	685c      	ldr	r4, [r3, #4]
   22b94:	b144      	cbz	r4, 22ba8 <rand_prio_high_vector_get+0x1c>
   22b96:	460a      	mov	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   22b98:	2300      	movs	r3, #0
   22b9a:	4601      	mov	r1, r0
   22b9c:	4804      	ldr	r0, [pc, #16]	; (22bb0 <rand_prio_high_vector_get+0x24>)
   22b9e:	47a0      	blx	r4
	return ret >= 0 ? ret : 0;
   22ba0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   22ba4:	b2c0      	uxtb	r0, r0
   22ba6:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   22ba8:	f06f 0085 	mvn.w	r0, #133	; 0x85
   22bac:	e7f8      	b.n	22ba0 <rand_prio_high_vector_get+0x14>
   22bae:	bf00      	nop
   22bb0:	0002dc08 	.word	0x0002dc08

00022bb4 <rand_prio_low_vector_get>:
{
   22bb4:	b510      	push	{r4, lr}
	const struct entropy_driver_api *api =
   22bb6:	4b08      	ldr	r3, [pc, #32]	; (22bd8 <rand_prio_low_vector_get+0x24>)
   22bb8:	689b      	ldr	r3, [r3, #8]
	if (unlikely(!api->get_entropy_isr)) {
   22bba:	685c      	ldr	r4, [r3, #4]
   22bbc:	b144      	cbz	r4, 22bd0 <rand_prio_low_vector_get+0x1c>
   22bbe:	460a      	mov	r2, r1
	return api->get_entropy_isr(dev, buffer, length, flags);
   22bc0:	2300      	movs	r3, #0
   22bc2:	4601      	mov	r1, r0
   22bc4:	4804      	ldr	r0, [pc, #16]	; (22bd8 <rand_prio_low_vector_get+0x24>)
   22bc6:	47a0      	blx	r4
	return ret >= 0 ? ret : 0;
   22bc8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   22bcc:	b2c0      	uxtb	r0, r0
   22bce:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   22bd0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   22bd4:	e7f8      	b.n	22bc8 <rand_prio_low_vector_get+0x14>
   22bd6:	bf00      	nop
   22bd8:	0002dc08 	.word	0x0002dc08

00022bdc <hci_driver_open>:

	return 0;
}

static int hci_driver_open(void)
{
   22bdc:	b590      	push	{r4, r7, lr}
   22bde:	b08b      	sub	sp, #44	; 0x2c
   22be0:	af00      	add	r7, sp, #0
	LOG_DBG("Open");

	k_work_init(&receive_work, receive_work_handler);
   22be2:	4978      	ldr	r1, [pc, #480]	; (22dc4 <hci_driver_open+0x1e8>)
   22be4:	4878      	ldr	r0, [pc, #480]	; (22dc8 <hci_driver_open+0x1ec>)
   22be6:	f00a fa95 	bl	2d114 <k_work_init>

	if (IS_ENABLED(CONFIG_BT_CTLR_ECDH)) {
		hci_ecdh_init();
   22bea:	f000 fc2f 	bl	2344c <hci_ecdh_init>
	}

	uint8_t build_revision[SDC_BUILD_REVISION_SIZE];

	sdc_build_revision_get(build_revision);
   22bee:	f107 0014 	add.w	r0, r7, #20
   22bf2:	f7dd fe5d 	bl	8b0 <sdc_build_revision_get>
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   22bf6:	466c      	mov	r4, sp
   22bf8:	2300      	movs	r3, #0
   22bfa:	713b      	strb	r3, [r7, #4]
   22bfc:	2302      	movs	r3, #2
   22bfe:	717b      	strb	r3, [r7, #5]
   22c00:	b088      	sub	sp, #32
   22c02:	46ec      	mov	ip, sp
   22c04:	f11c 0210 	adds.w	r2, ip, #16
   22c08:	d014      	beq.n	22c34 <hci_driver_open+0x58>
   22c0a:	200e      	movs	r0, #14
   22c0c:	b122      	cbz	r2, 22c18 <hci_driver_open+0x3c>
   22c0e:	2804      	cmp	r0, #4
   22c10:	dd02      	ble.n	22c18 <hci_driver_open+0x3c>
   22c12:	4b6e      	ldr	r3, [pc, #440]	; (22dcc <hci_driver_open+0x1f0>)
   22c14:	f8cc 3014 	str.w	r3, [ip, #20]
   22c18:	2300      	movs	r3, #0
   22c1a:	703b      	strb	r3, [r7, #0]
   22c1c:	2302      	movs	r3, #2
   22c1e:	707b      	strb	r3, [r7, #1]
   22c20:	b1aa      	cbz	r2, 22c4e <hci_driver_open+0x72>
   22c22:	2808      	cmp	r0, #8
   22c24:	dd02      	ble.n	22c2c <hci_driver_open+0x50>
   22c26:	4b6a      	ldr	r3, [pc, #424]	; (22dd0 <hci_driver_open+0x1f4>)
   22c28:	f8cc 3018 	str.w	r3, [ip, #24]
   22c2c:	f10c 031c 	add.w	r3, ip, #28
   22c30:	2100      	movs	r1, #0
   22c32:	e00a      	b.n	22c4a <hci_driver_open+0x6e>
   22c34:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   22c38:	e7e8      	b.n	22c0c <hci_driver_open+0x30>
   22c3a:	f101 0e28 	add.w	lr, r1, #40	; 0x28
   22c3e:	44be      	add	lr, r7
   22c40:	f81e ec28 	ldrb.w	lr, [lr, #-40]
   22c44:	f803 eb01 	strb.w	lr, [r3], #1
   22c48:	3101      	adds	r1, #1
   22c4a:	2901      	cmp	r1, #1
   22c4c:	d9f5      	bls.n	22c3a <hci_driver_open+0x5e>
   22c4e:	280d      	cmp	r0, #13
   22c50:	dd42      	ble.n	22cd8 <hci_driver_open+0xfc>
   22c52:	230e      	movs	r3, #14
   22c54:	b14a      	cbz	r2, 22c6a <hci_driver_open+0x8e>
   22c56:	2103      	movs	r1, #3
   22c58:	7139      	strb	r1, [r7, #4]
   22c5a:	2100      	movs	r1, #0
   22c5c:	7179      	strb	r1, [r7, #5]
   22c5e:	71b9      	strb	r1, [r7, #6]
   22c60:	2101      	movs	r1, #1
   22c62:	71f9      	strb	r1, [r7, #7]
   22c64:	6878      	ldr	r0, [r7, #4]
   22c66:	f8cc 0010 	str.w	r0, [ip, #16]
   22c6a:	2100      	movs	r1, #0
   22c6c:	f36f 0100 	bfc	r1, #0, #1
   22c70:	f36f 0141 	bfc	r1, #1, #1
   22c74:	f36f 0182 	bfc	r1, #2, #1
   22c78:	f36f 01c5 	bfc	r1, #3, #3
   22c7c:	2003      	movs	r0, #3
   22c7e:	f360 1188 	bfi	r1, r0, #6, #3
   22c82:	f3c3 0309 	ubfx	r3, r3, #0, #10
   22c86:	f363 2152 	bfi	r1, r3, #9, #10
   22c8a:	2314      	movs	r3, #20
   22c8c:	f363 41de 	bfi	r1, r3, #19, #12
   22c90:	f36f 71df 	bfc	r1, #31, #1
   22c94:	18fb      	adds	r3, r7, r3
   22c96:	484f      	ldr	r0, [pc, #316]	; (22dd4 <hci_driver_open+0x1f8>)
   22c98:	f005 f8b9 	bl	27e0e <z_impl_z_log_msg_static_create>
   22c9c:	46a5      	mov	sp, r4
   22c9e:	484e      	ldr	r0, [pc, #312]	; (22dd8 <hci_driver_open+0x1fc>)
   22ca0:	f009 ff53 	bl	2cb4a <z_device_is_ready>
			"SoftDevice Controller build revision: ");

	int err;

	if (!device_is_ready(entropy_source)) {
   22ca4:	b1d8      	cbz	r0, 22cde <hci_driver_open+0x102>
		LOG_ERR("Entropy source device not ready");
		return -ENODEV;
	}

	sdc_rand_source_t rand_functions = {
   22ca6:	4a4d      	ldr	r2, [pc, #308]	; (22ddc <hci_driver_open+0x200>)
   22ca8:	f107 0308 	add.w	r3, r7, #8
   22cac:	ca07      	ldmia	r2, {r0, r1, r2}
   22cae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		.rand_prio_low_get = rand_prio_low_vector_get,
		.rand_prio_high_get = rand_prio_high_vector_get,
		.rand_poll = rand_prio_low_vector_get_blocking
	};

	err = sdc_rand_source_register(&rand_functions);
   22cb2:	4618      	mov	r0, r3
   22cb4:	f7dd ffa0 	bl	bf8 <sdc_rand_source_register>
	if (err) {
   22cb8:	4604      	mov	r4, r0
   22cba:	2800      	cmp	r0, #0
   22cbc:	d13d      	bne.n	22d3a <hci_driver_open+0x15e>
		LOG_ERR("Failed to register rand source (%d)", err);
		return -EINVAL;
	}

	err = MULTITHREADING_LOCK_ACQUIRE();
   22cbe:	f04f 30ff 	mov.w	r0, #4294967295
   22cc2:	f04f 31ff 	mov.w	r1, #4294967295
   22cc6:	f7ff fd53 	bl	22770 <multithreading_lock_acquire>
	if (err) {
   22cca:	4604      	mov	r4, r0
   22ccc:	2800      	cmp	r0, #0
   22cce:	d064      	beq.n	22d9a <hci_driver_open+0x1be>
	}

	MULTITHREADING_LOCK_RELEASE();

	return 0;
}
   22cd0:	4620      	mov	r0, r4
   22cd2:	372c      	adds	r7, #44	; 0x2c
   22cd4:	46bd      	mov	sp, r7
   22cd6:	bd90      	pop	{r4, r7, pc}
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   22cd8:	f06f 031b 	mvn.w	r3, #27
   22cdc:	e7ba      	b.n	22c54 <hci_driver_open+0x78>
		LOG_ERR("Entropy source device not ready");
   22cde:	2006      	movs	r0, #6
   22ce0:	f7f3 f872 	bl	15dc8 <z_log_msg_alloc>
   22ce4:	2200      	movs	r2, #0
   22ce6:	f36f 0200 	bfc	r2, #0, #1
   22cea:	f36f 0241 	bfc	r2, #1, #1
   22cee:	f36f 0282 	bfc	r2, #2, #1
   22cf2:	f36f 02c5 	bfc	r2, #3, #3
   22cf6:	2301      	movs	r3, #1
   22cf8:	f363 1288 	bfi	r2, r3, #6, #3
   22cfc:	2308      	movs	r3, #8
   22cfe:	f363 2252 	bfi	r2, r3, #9, #10
   22d02:	f36f 42de 	bfc	r2, #19, #12
   22d06:	f36f 72df 	bfc	r2, #31, #1
   22d0a:	4604      	mov	r4, r0
   22d0c:	b168      	cbz	r0, 22d2a <hci_driver_open+0x14e>
   22d0e:	f110 0310 	adds.w	r3, r0, #16
   22d12:	d001      	beq.n	22d18 <hci_driver_open+0x13c>
   22d14:	4932      	ldr	r1, [pc, #200]	; (22de0 <hci_driver_open+0x204>)
   22d16:	6141      	str	r1, [r0, #20]
   22d18:	b13b      	cbz	r3, 22d2a <hci_driver_open+0x14e>
   22d1a:	2302      	movs	r3, #2
   22d1c:	713b      	strb	r3, [r7, #4]
   22d1e:	2300      	movs	r3, #0
   22d20:	717b      	strb	r3, [r7, #5]
   22d22:	71bb      	strb	r3, [r7, #6]
   22d24:	71fb      	strb	r3, [r7, #7]
   22d26:	6878      	ldr	r0, [r7, #4]
   22d28:	6120      	str	r0, [r4, #16]
   22d2a:	2300      	movs	r3, #0
   22d2c:	4929      	ldr	r1, [pc, #164]	; (22dd4 <hci_driver_open+0x1f8>)
   22d2e:	4620      	mov	r0, r4
   22d30:	f005 f855 	bl	27dde <z_log_msg_finalize>
		return -ENODEV;
   22d34:	f06f 0412 	mvn.w	r4, #18
   22d38:	e7ca      	b.n	22cd0 <hci_driver_open+0xf4>
		LOG_ERR("Failed to register rand source (%d)", err);
   22d3a:	2008      	movs	r0, #8
   22d3c:	f7f3 f844 	bl	15dc8 <z_log_msg_alloc>
   22d40:	2200      	movs	r2, #0
   22d42:	f36f 0200 	bfc	r2, #0, #1
   22d46:	f36f 0241 	bfc	r2, #1, #1
   22d4a:	f36f 0282 	bfc	r2, #2, #1
   22d4e:	f36f 02c5 	bfc	r2, #3, #3
   22d52:	2301      	movs	r3, #1
   22d54:	f363 1288 	bfi	r2, r3, #6, #3
   22d58:	230c      	movs	r3, #12
   22d5a:	f363 2252 	bfi	r2, r3, #9, #10
   22d5e:	f36f 42de 	bfc	r2, #19, #12
   22d62:	f36f 72df 	bfc	r2, #31, #1
   22d66:	4684      	mov	ip, r0
   22d68:	b178      	cbz	r0, 22d8a <hci_driver_open+0x1ae>
   22d6a:	f110 0310 	adds.w	r3, r0, #16
   22d6e:	d002      	beq.n	22d76 <hci_driver_open+0x19a>
   22d70:	491c      	ldr	r1, [pc, #112]	; (22de4 <hci_driver_open+0x208>)
   22d72:	6141      	str	r1, [r0, #20]
   22d74:	6184      	str	r4, [r0, #24]
   22d76:	b143      	cbz	r3, 22d8a <hci_driver_open+0x1ae>
   22d78:	2303      	movs	r3, #3
   22d7a:	713b      	strb	r3, [r7, #4]
   22d7c:	2300      	movs	r3, #0
   22d7e:	717b      	strb	r3, [r7, #5]
   22d80:	71bb      	strb	r3, [r7, #6]
   22d82:	71fb      	strb	r3, [r7, #7]
   22d84:	6878      	ldr	r0, [r7, #4]
   22d86:	f8cc 0010 	str.w	r0, [ip, #16]
   22d8a:	2300      	movs	r3, #0
   22d8c:	4911      	ldr	r1, [pc, #68]	; (22dd4 <hci_driver_open+0x1f8>)
   22d8e:	4660      	mov	r0, ip
   22d90:	f005 f825 	bl	27dde <z_log_msg_finalize>
		return -EINVAL;
   22d94:	f06f 0415 	mvn.w	r4, #21
   22d98:	e79a      	b.n	22cd0 <hci_driver_open+0xf4>
	err = sdc_default_tx_power_set(RADIO_TXP_DEFAULT);
   22d9a:	2008      	movs	r0, #8
   22d9c:	f7dd fdde 	bl	95c <sdc_default_tx_power_set>
	if (err) {
   22da0:	b940      	cbnz	r0, 22db4 <hci_driver_open+0x1d8>
	err = sdc_enable(receive_signal_raise, sdc_mempool);
   22da2:	4911      	ldr	r1, [pc, #68]	; (22de8 <hci_driver_open+0x20c>)
   22da4:	4811      	ldr	r0, [pc, #68]	; (22dec <hci_driver_open+0x210>)
   22da6:	f7dd fdf9 	bl	99c <sdc_enable>
	if (err) {
   22daa:	4604      	mov	r4, r0
   22dac:	b938      	cbnz	r0, 22dbe <hci_driver_open+0x1e2>
	MULTITHREADING_LOCK_RELEASE();
   22dae:	f7ff fce9 	bl	22784 <multithreading_lock_release>
	return 0;
   22db2:	e78d      	b.n	22cd0 <hci_driver_open+0xf4>
		MULTITHREADING_LOCK_RELEASE();
   22db4:	f7ff fce6 	bl	22784 <multithreading_lock_release>
		return -ENOTSUP;
   22db8:	f06f 0485 	mvn.w	r4, #133	; 0x85
   22dbc:	e788      	b.n	22cd0 <hci_driver_open+0xf4>
		MULTITHREADING_LOCK_RELEASE();
   22dbe:	f7ff fce1 	bl	22784 <multithreading_lock_release>
		return err;
   22dc2:	e785      	b.n	22cd0 <hci_driver_open+0xf4>
   22dc4:	0002c0fd 	.word	0x0002c0fd
   22dc8:	200089d4 	.word	0x200089d4
   22dcc:	0002eebc 	.word	0x0002eebc
   22dd0:	00030fc8 	.word	0x00030fc8
   22dd4:	0002dec0 	.word	0x0002dec0
   22dd8:	0002dc08 	.word	0x0002dc08
   22ddc:	0002dfcc 	.word	0x0002dfcc
   22de0:	00030ff0 	.word	0x00030ff0
   22de4:	00031010 	.word	0x00031010
   22de8:	200029a8 	.word	0x200029a8
   22dec:	00022b01 	.word	0x00022b01

00022df0 <configure_memory_usage>:
{
   22df0:	b510      	push	{r4, lr}
   22df2:	b082      	sub	sp, #8
	cfg.central_count.count = SDC_CENTRAL_COUNT;
   22df4:	2308      	movs	r3, #8
   22df6:	f88d 3004 	strb.w	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   22dfa:	aa01      	add	r2, sp, #4
   22dfc:	2101      	movs	r1, #1
   22dfe:	2000      	movs	r0, #0
   22e00:	f7dd fd64 	bl	8cc <sdc_cfg_set>
	if (required_memory < 0) {
   22e04:	1e04      	subs	r4, r0, #0
   22e06:	db29      	blt.n	22e5c <configure_memory_usage+0x6c>
	cfg.buffer_cfg.rx_packet_size = MAX_RX_PACKET_SIZE;
   22e08:	23fb      	movs	r3, #251	; 0xfb
   22e0a:	f88d 3005 	strb.w	r3, [sp, #5]
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   22e0e:	f88d 3004 	strb.w	r3, [sp, #4]
	cfg.buffer_cfg.rx_packet_count = CONFIG_BT_CTLR_SDC_RX_PACKET_COUNT;
   22e12:	2302      	movs	r3, #2
   22e14:	f88d 3007 	strb.w	r3, [sp, #7]
	cfg.buffer_cfg.tx_packet_count = CONFIG_BT_CTLR_SDC_TX_PACKET_COUNT;
   22e18:	2103      	movs	r1, #3
   22e1a:	f88d 1006 	strb.w	r1, [sp, #6]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   22e1e:	aa01      	add	r2, sp, #4
   22e20:	2000      	movs	r0, #0
   22e22:	f7dd fd53 	bl	8cc <sdc_cfg_set>
	if (required_memory < 0) {
   22e26:	1e04      	subs	r4, r0, #0
   22e28:	db18      	blt.n	22e5c <configure_memory_usage+0x6c>
	cfg.event_length.event_length_us =
   22e2a:	f641 534c 	movw	r3, #7500	; 0x1d4c
   22e2e:	9301      	str	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   22e30:	aa01      	add	r2, sp, #4
   22e32:	2104      	movs	r1, #4
   22e34:	2000      	movs	r0, #0
   22e36:	f7dd fd49 	bl	8cc <sdc_cfg_set>
	if (required_memory < 0) {
   22e3a:	1e04      	subs	r4, r0, #0
   22e3c:	db0e      	blt.n	22e5c <configure_memory_usage+0x6c>
		cfg.scan_buffer_cfg.count = CONFIG_BT_CTLR_SDC_SCAN_BUFFER_COUNT;
   22e3e:	2303      	movs	r3, #3
   22e40:	f88d 3004 	strb.w	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   22e44:	aa01      	add	r2, sp, #4
   22e46:	2106      	movs	r1, #6
   22e48:	2000      	movs	r0, #0
   22e4a:	f7dd fd3f 	bl	8cc <sdc_cfg_set>
		if (required_memory < 0) {
   22e4e:	1e04      	subs	r4, r0, #0
   22e50:	db04      	blt.n	22e5c <configure_memory_usage+0x6c>
	if (required_memory > sizeof(sdc_mempool)) {
   22e52:	f644 532e 	movw	r3, #19758	; 0x4d2e
   22e56:	429c      	cmp	r4, r3
   22e58:	d803      	bhi.n	22e62 <configure_memory_usage+0x72>
	return 0;
   22e5a:	2400      	movs	r4, #0
}
   22e5c:	4620      	mov	r0, r4
   22e5e:	b002      	add	sp, #8
   22e60:	bd10      	pop	{r4, pc}
		LOG_ERR("Allocated memory too low: %u < %u",
   22e62:	2008      	movs	r0, #8
   22e64:	f7f2 ffb0 	bl	15dc8 <z_log_msg_alloc>
   22e68:	2200      	movs	r2, #0
   22e6a:	f36f 0200 	bfc	r2, #0, #1
   22e6e:	f36f 0241 	bfc	r2, #1, #1
   22e72:	f36f 0282 	bfc	r2, #2, #1
   22e76:	f36f 02c5 	bfc	r2, #3, #3
   22e7a:	2301      	movs	r3, #1
   22e7c:	f363 1288 	bfi	r2, r3, #6, #3
   22e80:	2310      	movs	r3, #16
   22e82:	f363 2252 	bfi	r2, r3, #9, #10
   22e86:	f36f 42de 	bfc	r2, #19, #12
   22e8a:	f36f 72df 	bfc	r2, #31, #1
   22e8e:	4684      	mov	ip, r0
   22e90:	b1a8      	cbz	r0, 22ebe <configure_memory_usage+0xce>
   22e92:	18c3      	adds	r3, r0, r3
   22e94:	d005      	beq.n	22ea2 <configure_memory_usage+0xb2>
   22e96:	4911      	ldr	r1, [pc, #68]	; (22edc <configure_memory_usage+0xec>)
   22e98:	6141      	str	r1, [r0, #20]
   22e9a:	f644 512e 	movw	r1, #19758	; 0x4d2e
   22e9e:	6181      	str	r1, [r0, #24]
   22ea0:	61c4      	str	r4, [r0, #28]
   22ea2:	b163      	cbz	r3, 22ebe <configure_memory_usage+0xce>
   22ea4:	2304      	movs	r3, #4
   22ea6:	f88d 3000 	strb.w	r3, [sp]
   22eaa:	2300      	movs	r3, #0
   22eac:	f88d 3001 	strb.w	r3, [sp, #1]
   22eb0:	f88d 3002 	strb.w	r3, [sp, #2]
   22eb4:	f88d 3003 	strb.w	r3, [sp, #3]
   22eb8:	9800      	ldr	r0, [sp, #0]
   22eba:	f8cc 0010 	str.w	r0, [ip, #16]
   22ebe:	2300      	movs	r3, #0
   22ec0:	4907      	ldr	r1, [pc, #28]	; (22ee0 <configure_memory_usage+0xf0>)
   22ec2:	4660      	mov	r0, ip
   22ec4:	f004 ff8b 	bl	27dde <z_log_msg_finalize>
		k_panic();
   22ec8:	4040      	eors	r0, r0
   22eca:	f380 8811 	msr	BASEPRI, r0
   22ece:	f04f 0004 	mov.w	r0, #4
   22ed2:	df02      	svc	2
		return -ENOMEM;
   22ed4:	f06f 040b 	mvn.w	r4, #11
   22ed8:	e7c0      	b.n	22e5c <configure_memory_usage+0x6c>
   22eda:	bf00      	nop
   22edc:	00031034 	.word	0x00031034
   22ee0:	0002dec0 	.word	0x0002dec0

00022ee4 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
   22ee4:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
   22ee6:	4806      	ldr	r0, [pc, #24]	; (22f00 <hci_driver_init+0x1c>)
   22ee8:	f7f7 fd6a 	bl	1a9c0 <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
   22eec:	4805      	ldr	r0, [pc, #20]	; (22f04 <hci_driver_init+0x20>)
   22eee:	f7dd fd7f 	bl	9f0 <sdc_init>

	err = configure_supported_features();
   22ef2:	f009 f8e9 	bl	2c0c8 <configure_supported_features>
	if (err) {
   22ef6:	b100      	cbz	r0, 22efa <hci_driver_init+0x16>
	if (err) {
		return err;
	}

	return err;
}
   22ef8:	bd08      	pop	{r3, pc}
	err = configure_memory_usage();
   22efa:	f7ff ff79 	bl	22df0 <configure_memory_usage>
	if (err) {
   22efe:	e7fb      	b.n	22ef8 <hci_driver_init+0x14>
   22f00:	00031084 	.word	0x00031084
   22f04:	00022825 	.word	0x00022825

00022f08 <hci_driver_receive_process>:
{
   22f08:	b508      	push	{r3, lr}
	if (fetch_and_process_hci_msg(&hci_buf[0])) {
   22f0a:	4805      	ldr	r0, [pc, #20]	; (22f20 <hci_driver_receive_process+0x18>)
   22f0c:	f7ff fd9a 	bl	22a44 <fetch_and_process_hci_msg>
   22f10:	b900      	cbnz	r0, 22f14 <hci_driver_receive_process+0xc>
}
   22f12:	bd08      	pop	{r3, pc}
   22f14:	4903      	ldr	r1, [pc, #12]	; (22f24 <hci_driver_receive_process+0x1c>)
   22f16:	4804      	ldr	r0, [pc, #16]	; (22f28 <hci_driver_receive_process+0x20>)
   22f18:	f00a f918 	bl	2d14c <k_work_submit_to_queue>
   22f1c:	e7f9      	b.n	22f12 <hci_driver_receive_process+0xa>
   22f1e:	bf00      	nop
   22f20:	200088d4 	.word	0x200088d4
   22f24:	200089d4 	.word	0x200089d4
   22f28:	20007790 	.word	0x20007790

00022f2c <command_generates_command_complete_event>:

static hci_internal_user_cmd_handler_t user_cmd_handler;

static bool command_generates_command_complete_event(uint16_t hci_opcode)
{
	switch (hci_opcode) {
   22f2c:	f242 0332 	movw	r3, #8242	; 0x2032
   22f30:	4298      	cmp	r0, r3
   22f32:	d04a      	beq.n	22fca <command_generates_command_complete_event+0x9e>
   22f34:	d82d      	bhi.n	22f92 <command_generates_command_complete_event+0x66>
   22f36:	f242 0326 	movw	r3, #8230	; 0x2026
   22f3a:	4298      	cmp	r0, r3
   22f3c:	d847      	bhi.n	22fce <command_generates_command_complete_event+0xa2>
   22f3e:	f242 030d 	movw	r3, #8205	; 0x200d
   22f42:	4298      	cmp	r0, r3
   22f44:	d218      	bcs.n	22f78 <command_generates_command_complete_event+0x4c>
   22f46:	f240 4306 	movw	r3, #1030	; 0x406
   22f4a:	4298      	cmp	r0, r3
   22f4c:	d041      	beq.n	22fd2 <command_generates_command_complete_event+0xa6>
   22f4e:	f240 431d 	movw	r3, #1053	; 0x41d
   22f52:	4298      	cmp	r0, r3
   22f54:	d001      	beq.n	22f5a <command_generates_command_complete_event+0x2e>
	case SDC_HCI_OPCODE_CMD_VS_WRITE_REMOTE_TX_POWER:
	case BT_HCI_OP_LE_P256_PUBLIC_KEY:
	case BT_HCI_OP_LE_GENERATE_DHKEY:
		return false;
	default:
		return true;
   22f56:	2001      	movs	r0, #1
   22f58:	4770      	bx	lr
	switch (hci_opcode) {
   22f5a:	2000      	movs	r0, #0
   22f5c:	4770      	bx	lr
   22f5e:	f5a0 5001 	sub.w	r0, r0, #8256	; 0x2040
   22f62:	382d      	subs	r0, #45	; 0x2d
   22f64:	b280      	uxth	r0, r0
   22f66:	4b1e      	ldr	r3, [pc, #120]	; (22fe0 <command_generates_command_complete_event+0xb4>)
   22f68:	40c3      	lsrs	r3, r0
   22f6a:	f013 0f01 	tst.w	r3, #1
   22f6e:	d101      	bne.n	22f74 <command_generates_command_complete_event+0x48>
		return true;
   22f70:	2001      	movs	r0, #1
   22f72:	4770      	bx	lr
	switch (hci_opcode) {
   22f74:	2000      	movs	r0, #0
   22f76:	4770      	bx	lr
   22f78:	f5a0 5000 	sub.w	r0, r0, #8192	; 0x2000
   22f7c:	380d      	subs	r0, #13
   22f7e:	b280      	uxth	r0, r0
   22f80:	4b18      	ldr	r3, [pc, #96]	; (22fe4 <command_generates_command_complete_event+0xb8>)
   22f82:	40c3      	lsrs	r3, r0
   22f84:	f013 0f01 	tst.w	r3, #1
   22f88:	d101      	bne.n	22f8e <command_generates_command_complete_event+0x62>
		return true;
   22f8a:	2001      	movs	r0, #1
   22f8c:	4770      	bx	lr
	switch (hci_opcode) {
   22f8e:	2000      	movs	r0, #0
   22f90:	4770      	bx	lr
   22f92:	f242 0385 	movw	r3, #8325	; 0x2085
   22f96:	4298      	cmp	r0, r3
   22f98:	d80b      	bhi.n	22fb2 <command_generates_command_complete_event+0x86>
   22f9a:	f242 036d 	movw	r3, #8301	; 0x206d
   22f9e:	4298      	cmp	r0, r3
   22fa0:	d2dd      	bcs.n	22f5e <command_generates_command_complete_event+0x32>
   22fa2:	f5a0 5001 	sub.w	r0, r0, #8256	; 0x2040
   22fa6:	3803      	subs	r0, #3
   22fa8:	b280      	uxth	r0, r0
   22faa:	2801      	cmp	r0, #1
   22fac:	d913      	bls.n	22fd6 <command_generates_command_complete_event+0xaa>
		return true;
   22fae:	2001      	movs	r0, #1
   22fb0:	4770      	bx	lr
	switch (hci_opcode) {
   22fb2:	f64f 5302 	movw	r3, #64770	; 0xfd02
   22fb6:	4298      	cmp	r0, r3
   22fb8:	d00f      	beq.n	22fda <command_generates_command_complete_event+0xae>
   22fba:	f64f 530a 	movw	r3, #64778	; 0xfd0a
   22fbe:	4298      	cmp	r0, r3
   22fc0:	d001      	beq.n	22fc6 <command_generates_command_complete_event+0x9a>
		return true;
   22fc2:	2001      	movs	r0, #1
	}
}
   22fc4:	4770      	bx	lr
	switch (hci_opcode) {
   22fc6:	2000      	movs	r0, #0
   22fc8:	4770      	bx	lr
   22fca:	2000      	movs	r0, #0
   22fcc:	4770      	bx	lr
		return true;
   22fce:	2001      	movs	r0, #1
   22fd0:	4770      	bx	lr
	switch (hci_opcode) {
   22fd2:	2000      	movs	r0, #0
   22fd4:	4770      	bx	lr
   22fd6:	2000      	movs	r0, #0
   22fd8:	4770      	bx	lr
   22fda:	2000      	movs	r0, #0
   22fdc:	4770      	bx	lr
   22fde:	bf00      	nop
   22fe0:	01000401 	.word	0x01000401
   22fe4:	03001241 	.word	0x03001241

00022fe8 <cmd_put>:
	}
}
#endif /* CONFIG_BT_HCI_VS */

static void cmd_put(uint8_t *cmd_in, uint8_t * const raw_event_out)
{
   22fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
   22fea:	b083      	sub	sp, #12
   22fec:	4607      	mov	r7, r0
   22fee:	460e      	mov	r6, r1
   22ff0:	7843      	ldrb	r3, [r0, #1]
   22ff2:	7805      	ldrb	r5, [r0, #0]
   22ff4:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	uint8_t status = BT_HCI_ERR_UNKNOWN_CMD;
	uint16_t opcode = sys_get_le16(cmd_in);
	bool generate_command_status_event;

	/* Assume command complete */
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   22ff8:	2304      	movs	r3, #4
   22ffa:	f88d 3006 	strb.w	r3, [sp, #6]
				      + sizeof(struct bt_hci_evt_cc_status);

	if (user_cmd_handler) {
   22ffe:	4b35      	ldr	r3, [pc, #212]	; (230d4 <cmd_put+0xec>)
   23000:	681c      	ldr	r4, [r3, #0]
   23002:	b13c      	cbz	r4, 23014 <cmd_put+0x2c>
		status = user_cmd_handler(cmd_in,
   23004:	f10d 0307 	add.w	r3, sp, #7
   23008:	f10d 0206 	add.w	r2, sp, #6
   2300c:	47a0      	blx	r4
   2300e:	4604      	mov	r4, r0
					  raw_event_out,
					  &return_param_length,
					  &generate_command_status_event);
	}

	if (status == BT_HCI_ERR_UNKNOWN_CMD) {
   23010:	2801      	cmp	r0, #1
   23012:	d121      	bne.n	23058 <cmd_put+0x70>

		switch (BT_OGF(opcode)) {
   23014:	0aab      	lsrs	r3, r5, #10
   23016:	f5b5 5f10 	cmp.w	r5, #9216	; 0x2400
   2301a:	d20b      	bcs.n	23034 <cmd_put+0x4c>
   2301c:	b21a      	sxth	r2, r3
   2301e:	2a00      	cmp	r2, #0
   23020:	d04b      	beq.n	230ba <cmd_put+0xd2>
   23022:	3b01      	subs	r3, #1
   23024:	2b07      	cmp	r3, #7
   23026:	d84a      	bhi.n	230be <cmd_put+0xd6>
   23028:	e8df f003 	tbb	[pc, r3]
   2302c:	2f274922 	.word	0x2f274922
   23030:	3f494937 	.word	0x3f494937
   23034:	2b3f      	cmp	r3, #63	; 0x3f
   23036:	d107      	bne.n	23048 <cmd_put+0x60>
						       raw_event_out,
						       &return_param_length);
			break;
#if defined(CONFIG_BT_HCI_VS)
		case BT_OGF_VS:
			status = vs_cmd_put(cmd_in,
   23038:	f10d 0206 	add.w	r2, sp, #6
   2303c:	4631      	mov	r1, r6
   2303e:	4638      	mov	r0, r7
   23040:	f009 fb22 	bl	2c688 <vs_cmd_put>
   23044:	4604      	mov	r4, r0
					    raw_event_out,
					    &return_param_length);
			break;
   23046:	e000      	b.n	2304a <cmd_put+0x62>
		switch (BT_OGF(opcode)) {
   23048:	2401      	movs	r4, #1
		default:
			status = BT_HCI_ERR_UNKNOWN_CMD;
			break;
		}

		generate_command_status_event = !command_generates_command_complete_event(opcode);
   2304a:	4628      	mov	r0, r5
   2304c:	f7ff ff6e 	bl	22f2c <command_generates_command_complete_event>
   23050:	f080 0001 	eor.w	r0, r0, #1
   23054:	f88d 0007 	strb.w	r0, [sp, #7]
	}

	if (generate_command_status_event ||
   23058:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2305c:	b90b      	cbnz	r3, 23062 <cmd_put+0x7a>
   2305e:	2c01      	cmp	r4, #1
   23060:	d12f      	bne.n	230c2 <cmd_put+0xda>
	    (status == BT_HCI_ERR_UNKNOWN_CMD))	{
		encode_command_status(raw_event_out, opcode, status);
   23062:	4622      	mov	r2, r4
   23064:	4629      	mov	r1, r5
   23066:	4630      	mov	r0, r6
   23068:	f009 f84c 	bl	2c104 <encode_command_status>
	} else {
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}
   2306c:	b003      	add	sp, #12
   2306e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			status = link_control_cmd_put(cmd_in);
   23070:	4638      	mov	r0, r7
   23072:	f009 f862 	bl	2c13a <link_control_cmd_put>
   23076:	4604      	mov	r4, r0
			break;
   23078:	e7e7      	b.n	2304a <cmd_put+0x62>
			status = controller_and_baseband_cmd_put(cmd_in,
   2307a:	f10d 0206 	add.w	r2, sp, #6
   2307e:	4631      	mov	r1, r6
   23080:	4638      	mov	r0, r7
   23082:	f009 f871 	bl	2c168 <controller_and_baseband_cmd_put>
   23086:	4604      	mov	r4, r0
			break;
   23088:	e7df      	b.n	2304a <cmd_put+0x62>
			status = info_param_cmd_put(cmd_in,
   2308a:	f10d 0206 	add.w	r2, sp, #6
   2308e:	4631      	mov	r1, r6
   23090:	4638      	mov	r0, r7
   23092:	f009 f995 	bl	2c3c0 <info_param_cmd_put>
   23096:	4604      	mov	r4, r0
			break;
   23098:	e7d7      	b.n	2304a <cmd_put+0x62>
			status = status_param_cmd_put(cmd_in,
   2309a:	f10d 0206 	add.w	r2, sp, #6
   2309e:	4631      	mov	r1, r6
   230a0:	4638      	mov	r0, r7
   230a2:	f009 f848 	bl	2c136 <status_param_cmd_put>
   230a6:	4604      	mov	r4, r0
			break;
   230a8:	e7cf      	b.n	2304a <cmd_put+0x62>
			status = le_controller_cmd_put(cmd_in,
   230aa:	f10d 0206 	add.w	r2, sp, #6
   230ae:	4631      	mov	r1, r6
   230b0:	4638      	mov	r0, r7
   230b2:	f009 fa1b 	bl	2c4ec <le_controller_cmd_put>
   230b6:	4604      	mov	r4, r0
			break;
   230b8:	e7c7      	b.n	2304a <cmd_put+0x62>
		switch (BT_OGF(opcode)) {
   230ba:	2401      	movs	r4, #1
   230bc:	e7c5      	b.n	2304a <cmd_put+0x62>
   230be:	2401      	movs	r4, #1
   230c0:	e7c3      	b.n	2304a <cmd_put+0x62>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
   230c2:	4623      	mov	r3, r4
   230c4:	f89d 2006 	ldrb.w	r2, [sp, #6]
   230c8:	4629      	mov	r1, r5
   230ca:	4630      	mov	r0, r6
   230cc:	f009 f823 	bl	2c116 <encode_command_complete_header>
}
   230d0:	e7cc      	b.n	2306c <cmd_put+0x84>
   230d2:	bf00      	nop
   230d4:	200089e4 	.word	0x200089e4

000230d8 <hci_internal_cmd_put>:

int hci_internal_cmd_put(uint8_t *cmd_in)
{
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   230d8:	4b07      	ldr	r3, [pc, #28]	; (230f8 <hci_internal_cmd_put+0x20>)
   230da:	781b      	ldrb	r3, [r3, #0]
   230dc:	b94b      	cbnz	r3, 230f2 <hci_internal_cmd_put+0x1a>
{
   230de:	b510      	push	{r4, lr}
		> HCI_CMD_PACKET_MAX_SIZE) {
		return -EINVAL;
	}

	if (!IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT)) {
		cmd_put(cmd_in, &cmd_complete_or_status.raw_event[0]);
   230e0:	4c06      	ldr	r4, [pc, #24]	; (230fc <hci_internal_cmd_put+0x24>)
   230e2:	4621      	mov	r1, r4
   230e4:	f7ff ff80 	bl	22fe8 <cmd_put>
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
   230e8:	2301      	movs	r3, #1
   230ea:	f804 3c01 	strb.w	r3, [r4, #-1]
	}

	return 0;
   230ee:	2000      	movs	r0, #0
}
   230f0:	bd10      	pop	{r4, pc}
		return -NRF_EPERM;
   230f2:	f04f 30ff 	mov.w	r0, #4294967295
}
   230f6:	4770      	bx	lr
   230f8:	200089e8 	.word	0x200089e8
   230fc:	200089e9 	.word	0x200089e9

00023100 <hci_internal_msg_get>:

int hci_internal_msg_get(uint8_t *msg_out, sdc_hci_msg_type_t *msg_type_out)
{
   23100:	b538      	push	{r3, r4, r5, lr}
   23102:	460c      	mov	r4, r1
	if (cmd_complete_or_status.occurred) {
   23104:	4b08      	ldr	r3, [pc, #32]	; (23128 <hci_internal_msg_get+0x28>)
   23106:	781b      	ldrb	r3, [r3, #0]
   23108:	b913      	cbnz	r3, 23110 <hci_internal_msg_get+0x10>
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;

		return 0;
	}

	return sdc_hci_get(msg_out, msg_type_out);
   2310a:	f7e9 ff77 	bl	cffc <sdc_hci_get>
}
   2310e:	bd38      	pop	{r3, r4, r5, pc}
					 evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
   23110:	4d05      	ldr	r5, [pc, #20]	; (23128 <hci_internal_msg_get+0x28>)
   23112:	78aa      	ldrb	r2, [r5, #2]
		memcpy(msg_out,
   23114:	3202      	adds	r2, #2
   23116:	1c69      	adds	r1, r5, #1
   23118:	f005 fab3 	bl	28682 <memcpy>
		cmd_complete_or_status.occurred = false;
   2311c:	2000      	movs	r0, #0
   2311e:	7028      	strb	r0, [r5, #0]
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   23120:	2304      	movs	r3, #4
   23122:	7023      	strb	r3, [r4, #0]
		return 0;
   23124:	e7f3      	b.n	2310e <hci_internal_msg_get+0xe>
   23126:	bf00      	nop
   23128:	200089e8 	.word	0x200089e8

0002312c <bt_rand>:
#define BT_ECB_BLOCK_SIZE 16

static const struct device *dev = DEVICE_DT_GET(DT_NODELABEL(rng));

int bt_rand(void *buf, size_t len)
{
   2312c:	b538      	push	{r3, r4, r5, lr}
   2312e:	4605      	mov	r5, r0
   23130:	460c      	mov	r4, r1
   23132:	4809      	ldr	r0, [pc, #36]	; (23158 <bt_rand+0x2c>)
   23134:	f009 fd09 	bl	2cb4a <z_device_is_ready>
	if (unlikely(!device_is_ready(dev))) {
   23138:	f080 0301 	eor.w	r3, r0, #1
   2313c:	f013 0fff 	tst.w	r3, #255	; 0xff
   23140:	d106      	bne.n	23150 <bt_rand+0x24>
		return -ENODEV;
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
   23142:	b2a2      	uxth	r2, r4
	const struct entropy_driver_api *api =
   23144:	4804      	ldr	r0, [pc, #16]	; (23158 <bt_rand+0x2c>)
   23146:	6883      	ldr	r3, [r0, #8]
	return api->get_entropy(dev, buffer, length);
   23148:	681b      	ldr	r3, [r3, #0]
   2314a:	4629      	mov	r1, r5
   2314c:	4798      	blx	r3
}
   2314e:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
   23150:	f06f 0012 	mvn.w	r0, #18
   23154:	e7fb      	b.n	2314e <bt_rand+0x22>
   23156:	bf00      	nop
   23158:	0002dc08 	.word	0x0002dc08

0002315c <public_key>:

#if defined(CONFIG_BT_CTLR_ECDH_LIB_OBERON)
#include <ocrypto_ecdh_p256.h>

static uint8_t public_key(void)
{
   2315c:	b508      	push	{r3, lr}
   2315e:	e002      	b.n	23166 <public_key+0xa>
		if (err) {
			return BT_HCI_ERR_UNSPECIFIED;
		}

		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
			err = -1;
   23160:	f04f 30ff 	mov.w	r0, #4294967295
			continue;
		}

		err = ocrypto_ecdh_p256_public_key(ecdh.public_key_be,
						   ecdh.private_key_be);
	} while (err);
   23164:	b190      	cbz	r0, 2318c <public_key+0x30>
		err = bt_rand(ecdh.private_key_be, 32);
   23166:	2120      	movs	r1, #32
   23168:	4809      	ldr	r0, [pc, #36]	; (23190 <public_key+0x34>)
   2316a:	f7ff ffdf 	bl	2312c <bt_rand>
		if (err) {
   2316e:	b960      	cbnz	r0, 2318a <public_key+0x2e>
		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
   23170:	2220      	movs	r2, #32
   23172:	4908      	ldr	r1, [pc, #32]	; (23194 <public_key+0x38>)
   23174:	4806      	ldr	r0, [pc, #24]	; (23190 <public_key+0x34>)
   23176:	f005 fa72 	bl	2865e <memcmp>
   2317a:	2800      	cmp	r0, #0
   2317c:	d0f0      	beq.n	23160 <public_key+0x4>
		err = ocrypto_ecdh_p256_public_key(ecdh.public_key_be,
   2317e:	4904      	ldr	r1, [pc, #16]	; (23190 <public_key+0x34>)
   23180:	f101 0020 	add.w	r0, r1, #32
   23184:	f003 f90a 	bl	2639c <ocrypto_ecdh_p256_public_key>
   23188:	e7ec      	b.n	23164 <public_key+0x8>
			return BT_HCI_ERR_UNSPECIFIED;
   2318a:	201f      	movs	r0, #31

	return 0;
}
   2318c:	bd08      	pop	{r3, pc}
   2318e:	bf00      	nop
   23190:	20008a44 	.word	0x20008a44
   23194:	000310f0 	.word	0x000310f0

00023198 <ecdh_p256_public_key>:
	return 0;
}
#endif /* defined(BT_CTLR_ECDH_LIB_TINYCRYPT) */

static struct net_buf *ecdh_p256_public_key(void)
{
   23198:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_meta_event *meta;
	struct bt_hci_evt_hdr *hdr;
	struct net_buf *buf;
	uint8_t status;

	status = public_key();
   2319a:	f7ff ffdf 	bl	2315c <public_key>
   2319e:	4605      	mov	r5, r0

	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   231a0:	f04f 32ff 	mov.w	r2, #4294967295
   231a4:	f04f 33ff 	mov.w	r3, #4294967295
   231a8:	2001      	movs	r0, #1
   231aa:	f7f5 f9e3 	bl	18574 <bt_buf_get_rx>
   231ae:	4604      	mov	r4, r0
	return net_buf_simple_add(&buf->b, len);
   231b0:	f100 060c 	add.w	r6, r0, #12
   231b4:	2102      	movs	r1, #2
   231b6:	4630      	mov	r0, r6
   231b8:	f007 ff6a 	bl	2b090 <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   231bc:	233e      	movs	r3, #62	; 0x3e
   231be:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   231c0:	2342      	movs	r3, #66	; 0x42
   231c2:	7043      	strb	r3, [r0, #1]
   231c4:	2101      	movs	r1, #1
   231c6:	4630      	mov	r0, r6
   231c8:	f007 ff62 	bl	2b090 <net_buf_simple_add>

	meta = net_buf_add(buf, sizeof(*meta));
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
   231cc:	2308      	movs	r3, #8
   231ce:	7003      	strb	r3, [r0, #0]
   231d0:	2141      	movs	r1, #65	; 0x41
   231d2:	4630      	mov	r0, r6
   231d4:	f007 ff5c 	bl	2b090 <net_buf_simple_add>

	evt = net_buf_add(buf, sizeof(*evt));
	evt->status = status;
   231d8:	7005      	strb	r5, [r0, #0]

	if (status) {
   231da:	b91d      	cbnz	r5, 231e4 <ecdh_p256_public_key+0x4c>
		(void)memset(evt->key, 0, sizeof(evt->key));
	} else {
		/* Reverse X */
		sys_memcpy_swap(&evt->key[0], &ecdh.public_key_be[0], 32);
   231dc:	1c42      	adds	r2, r0, #1

	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
		  (psrc > pdst && (pdst + length) <= psrc)),
		 "Source and destination buffers must not overlap");

	psrc += length - 1;
   231de:	4b0e      	ldr	r3, [pc, #56]	; (23218 <ecdh_p256_public_key+0x80>)

	for (; length > 0; length--) {
   231e0:	2120      	movs	r1, #32
   231e2:	e00a      	b.n	231fa <ecdh_p256_public_key+0x62>
		(void)memset(evt->key, 0, sizeof(evt->key));
   231e4:	2240      	movs	r2, #64	; 0x40
   231e6:	2100      	movs	r1, #0
   231e8:	3001      	adds	r0, #1
   231ea:	f005 fa79 	bl	286e0 <memset>
   231ee:	e011      	b.n	23214 <ecdh_p256_public_key+0x7c>
		*pdst++ = *psrc--;
   231f0:	f813 c901 	ldrb.w	ip, [r3], #-1
   231f4:	f802 cb01 	strb.w	ip, [r2], #1
	for (; length > 0; length--) {
   231f8:	3901      	subs	r1, #1
   231fa:	2900      	cmp	r1, #0
   231fc:	d1f8      	bne.n	231f0 <ecdh_p256_public_key+0x58>
		/* Reverse Y */
		sys_memcpy_swap(&evt->key[32], &ecdh.public_key_be[32], 32);
   231fe:	3021      	adds	r0, #33	; 0x21
	psrc += length - 1;
   23200:	4b06      	ldr	r3, [pc, #24]	; (2321c <ecdh_p256_public_key+0x84>)
	for (; length > 0; length--) {
   23202:	2220      	movs	r2, #32
   23204:	e004      	b.n	23210 <ecdh_p256_public_key+0x78>
		*pdst++ = *psrc--;
   23206:	f813 1901 	ldrb.w	r1, [r3], #-1
   2320a:	f800 1b01 	strb.w	r1, [r0], #1
	for (; length > 0; length--) {
   2320e:	3a01      	subs	r2, #1
   23210:	2a00      	cmp	r2, #0
   23212:	d1f8      	bne.n	23206 <ecdh_p256_public_key+0x6e>
	}

	return buf;
}
   23214:	4620      	mov	r0, r4
   23216:	bd70      	pop	{r4, r5, r6, pc}
   23218:	20008a83 	.word	0x20008a83
   2321c:	20008aa3 	.word	0x20008aa3

00023220 <common_secret>:
{
   23220:	b510      	push	{r4, lr}
   23222:	b082      	sub	sp, #8
	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   23224:	b148      	cbz	r0, 2323a <common_secret+0x1a>
   23226:	491f      	ldr	r1, [pc, #124]	; (232a4 <common_secret+0x84>)
   23228:	481f      	ldr	r0, [pc, #124]	; (232a8 <common_secret+0x88>)
   2322a:	4602      	mov	r2, r0
   2322c:	f003 f8ca 	bl	263c4 <ocrypto_ecdh_p256_common_secret>
	if (err) {
   23230:	4604      	mov	r4, r0
   23232:	b920      	cbnz	r0, 2323e <common_secret+0x1e>
	return 0;
   23234:	2000      	movs	r0, #0
}
   23236:	b002      	add	sp, #8
   23238:	bd10      	pop	{r4, pc}
	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   2323a:	491c      	ldr	r1, [pc, #112]	; (232ac <common_secret+0x8c>)
   2323c:	e7f4      	b.n	23228 <common_secret+0x8>
		LOG_ERR("public key is not valid (err %d)", err);
   2323e:	2008      	movs	r0, #8
   23240:	f7f2 fdc2 	bl	15dc8 <z_log_msg_alloc>
   23244:	2200      	movs	r2, #0
   23246:	f36f 0200 	bfc	r2, #0, #1
   2324a:	f36f 0241 	bfc	r2, #1, #1
   2324e:	f36f 0282 	bfc	r2, #2, #1
   23252:	f36f 02c5 	bfc	r2, #3, #3
   23256:	2301      	movs	r3, #1
   23258:	f363 1288 	bfi	r2, r3, #6, #3
   2325c:	230c      	movs	r3, #12
   2325e:	f363 2252 	bfi	r2, r3, #9, #10
   23262:	f36f 42de 	bfc	r2, #19, #12
   23266:	f36f 72df 	bfc	r2, #31, #1
   2326a:	4684      	mov	ip, r0
   2326c:	b198      	cbz	r0, 23296 <common_secret+0x76>
   2326e:	f110 0310 	adds.w	r3, r0, #16
   23272:	d002      	beq.n	2327a <common_secret+0x5a>
   23274:	490e      	ldr	r1, [pc, #56]	; (232b0 <common_secret+0x90>)
   23276:	6141      	str	r1, [r0, #20]
   23278:	6184      	str	r4, [r0, #24]
   2327a:	b163      	cbz	r3, 23296 <common_secret+0x76>
   2327c:	2303      	movs	r3, #3
   2327e:	f88d 3004 	strb.w	r3, [sp, #4]
   23282:	2300      	movs	r3, #0
   23284:	f88d 3005 	strb.w	r3, [sp, #5]
   23288:	f88d 3006 	strb.w	r3, [sp, #6]
   2328c:	f88d 3007 	strb.w	r3, [sp, #7]
   23290:	9801      	ldr	r0, [sp, #4]
   23292:	f8cc 0010 	str.w	r0, [ip, #16]
   23296:	2300      	movs	r3, #0
   23298:	4906      	ldr	r1, [pc, #24]	; (232b4 <common_secret+0x94>)
   2329a:	4660      	mov	r0, ip
   2329c:	f004 fd9f 	bl	27dde <z_log_msg_finalize>
		return BT_HCI_ERR_INVALID_PARAM;
   232a0:	2012      	movs	r0, #18
   232a2:	e7c8      	b.n	23236 <common_secret+0x16>
   232a4:	000310f0 	.word	0x000310f0
   232a8:	20008a64 	.word	0x20008a64
   232ac:	20008a44 	.word	0x20008a44
   232b0:	000310ac 	.word	0x000310ac
   232b4:	0002deb8 	.word	0x0002deb8

000232b8 <ecdh_p256_common_secret>:

static struct net_buf *ecdh_p256_common_secret(bool use_debug)
{
   232b8:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_meta_event *meta;
	struct bt_hci_evt_hdr *hdr;
	struct net_buf *buf;
	uint8_t status;

	status = common_secret(use_debug);
   232ba:	f7ff ffb1 	bl	23220 <common_secret>
   232be:	4605      	mov	r5, r0

	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   232c0:	f04f 32ff 	mov.w	r2, #4294967295
   232c4:	f04f 33ff 	mov.w	r3, #4294967295
   232c8:	2001      	movs	r0, #1
   232ca:	f7f5 f953 	bl	18574 <bt_buf_get_rx>
   232ce:	4604      	mov	r4, r0
   232d0:	f100 060c 	add.w	r6, r0, #12
   232d4:	2102      	movs	r1, #2
   232d6:	4630      	mov	r0, r6
   232d8:	f007 feda 	bl	2b090 <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   232dc:	233e      	movs	r3, #62	; 0x3e
   232de:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   232e0:	2322      	movs	r3, #34	; 0x22
   232e2:	7043      	strb	r3, [r0, #1]
   232e4:	2101      	movs	r1, #1
   232e6:	4630      	mov	r0, r6
   232e8:	f007 fed2 	bl	2b090 <net_buf_simple_add>

	meta = net_buf_add(buf, sizeof(*meta));
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
   232ec:	2309      	movs	r3, #9
   232ee:	7003      	strb	r3, [r0, #0]
   232f0:	2121      	movs	r1, #33	; 0x21
   232f2:	4630      	mov	r0, r6
   232f4:	f007 fecc 	bl	2b090 <net_buf_simple_add>

	evt = net_buf_add(buf, sizeof(*evt));
	evt->status = status;
   232f8:	7005      	strb	r5, [r0, #0]

	if (status) {
   232fa:	b91d      	cbnz	r5, 23304 <ecdh_p256_common_secret+0x4c>
		memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
	} else {
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
   232fc:	3001      	adds	r0, #1
	psrc += length - 1;
   232fe:	4b09      	ldr	r3, [pc, #36]	; (23324 <ecdh_p256_common_secret+0x6c>)
	for (; length > 0; length--) {
   23300:	2220      	movs	r2, #32
   23302:	e00a      	b.n	2331a <ecdh_p256_common_secret+0x62>
		memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
   23304:	2220      	movs	r2, #32
   23306:	21ff      	movs	r1, #255	; 0xff
   23308:	3001      	adds	r0, #1
   2330a:	f005 f9e9 	bl	286e0 <memset>
   2330e:	e006      	b.n	2331e <ecdh_p256_common_secret+0x66>
		*pdst++ = *psrc--;
   23310:	f813 1901 	ldrb.w	r1, [r3], #-1
   23314:	f800 1b01 	strb.w	r1, [r0], #1
	for (; length > 0; length--) {
   23318:	3a01      	subs	r2, #1
   2331a:	2a00      	cmp	r2, #0
   2331c:	d1f8      	bne.n	23310 <ecdh_p256_common_secret+0x58>
				sizeof(ecdh.dhkey_be));
	}

	return buf;
}
   2331e:	4620      	mov	r0, r4
   23320:	bd70      	pop	{r4, r5, r6, pc}
   23322:	bf00      	nop
   23324:	20008a83 	.word	0x20008a83

00023328 <work_submit>:

static struct k_thread ecdh_thread_data;
static K_KERNEL_STACK_DEFINE(ecdh_thread_stack, CONFIG_BT_CTLR_ECDH_STACK_SIZE);

static void work_submit(void)
{
   23328:	b508      	push	{r3, lr}
	return z_impl_k_poll_signal_raise(sig, result);
   2332a:	2100      	movs	r1, #0
   2332c:	4801      	ldr	r0, [pc, #4]	; (23334 <work_submit+0xc>)
   2332e:	f002 ffef 	bl	26310 <z_impl_k_poll_signal_raise>
	k_poll_signal_raise(&ecdh_signal, 0);
}
   23332:	bd08      	pop	{r3, pc}
   23334:	20008a30 	.word	0x20008a30

00023338 <ecdh_cmd_process>:
{
   23338:	b500      	push	{lr}
   2333a:	b083      	sub	sp, #12
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2333c:	f3bf 8f5b 	dmb	ish
   23340:	4b2c      	ldr	r3, [pc, #176]	; (233f4 <ecdh_cmd_process+0xbc>)
   23342:	681b      	ldr	r3, [r3, #0]
   23344:	f3bf 8f5b 	dmb	ish
	switch (atomic_get(&cmd)) {
   23348:	2b02      	cmp	r3, #2
   2334a:	d04a      	beq.n	233e2 <ecdh_cmd_process+0xaa>
   2334c:	2b04      	cmp	r3, #4
   2334e:	d04c      	beq.n	233ea <ecdh_cmd_process+0xb2>
   23350:	2b01      	cmp	r3, #1
   23352:	d031      	beq.n	233b8 <ecdh_cmd_process+0x80>
		LOG_WRN("Unknown command");
   23354:	2006      	movs	r0, #6
   23356:	f7f2 fd37 	bl	15dc8 <z_log_msg_alloc>
   2335a:	2200      	movs	r2, #0
   2335c:	f36f 0200 	bfc	r2, #0, #1
   23360:	f36f 0241 	bfc	r2, #1, #1
   23364:	f36f 0282 	bfc	r2, #2, #1
   23368:	f36f 02c5 	bfc	r2, #3, #3
   2336c:	2302      	movs	r3, #2
   2336e:	f363 1288 	bfi	r2, r3, #6, #3
   23372:	2308      	movs	r3, #8
   23374:	f363 2252 	bfi	r2, r3, #9, #10
   23378:	f36f 42de 	bfc	r2, #19, #12
   2337c:	f36f 72df 	bfc	r2, #31, #1
   23380:	4684      	mov	ip, r0
   23382:	b190      	cbz	r0, 233aa <ecdh_cmd_process+0x72>
   23384:	f110 0310 	adds.w	r3, r0, #16
   23388:	d001      	beq.n	2338e <ecdh_cmd_process+0x56>
   2338a:	491b      	ldr	r1, [pc, #108]	; (233f8 <ecdh_cmd_process+0xc0>)
   2338c:	6141      	str	r1, [r0, #20]
   2338e:	b163      	cbz	r3, 233aa <ecdh_cmd_process+0x72>
   23390:	2302      	movs	r3, #2
   23392:	f88d 3004 	strb.w	r3, [sp, #4]
   23396:	2300      	movs	r3, #0
   23398:	f88d 3005 	strb.w	r3, [sp, #5]
   2339c:	f88d 3006 	strb.w	r3, [sp, #6]
   233a0:	f88d 3007 	strb.w	r3, [sp, #7]
   233a4:	9801      	ldr	r0, [sp, #4]
   233a6:	f8cc 0010 	str.w	r0, [ip, #16]
   233aa:	2300      	movs	r3, #0
   233ac:	4913      	ldr	r1, [pc, #76]	; (233fc <ecdh_cmd_process+0xc4>)
   233ae:	4660      	mov	r0, ip
   233b0:	f004 fd15 	bl	27dde <z_log_msg_finalize>
		buf = NULL;
   233b4:	2000      	movs	r0, #0
		break;
   233b6:	e001      	b.n	233bc <ecdh_cmd_process+0x84>
		buf = ecdh_p256_public_key();
   233b8:	f7ff feee 	bl	23198 <ecdh_p256_public_key>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   233bc:	4b0d      	ldr	r3, [pc, #52]	; (233f4 <ecdh_cmd_process+0xbc>)
   233be:	2200      	movs	r2, #0
   233c0:	f3bf 8f5b 	dmb	ish
   233c4:	e853 1f00 	ldrex	r1, [r3]
   233c8:	e843 2c00 	strex	ip, r2, [r3]
   233cc:	f1bc 0f00 	cmp.w	ip, #0
   233d0:	d1f8      	bne.n	233c4 <ecdh_cmd_process+0x8c>
   233d2:	f3bf 8f5b 	dmb	ish
	if (buf) {
   233d6:	b108      	cbz	r0, 233dc <ecdh_cmd_process+0xa4>
		bt_recv(buf);
   233d8:	f7f7 fa94 	bl	1a904 <bt_recv>
}
   233dc:	b003      	add	sp, #12
   233de:	f85d fb04 	ldr.w	pc, [sp], #4
		buf = ecdh_p256_common_secret(false);
   233e2:	2000      	movs	r0, #0
   233e4:	f7ff ff68 	bl	232b8 <ecdh_p256_common_secret>
		break;
   233e8:	e7e8      	b.n	233bc <ecdh_cmd_process+0x84>
		buf = ecdh_p256_common_secret(true);
   233ea:	2001      	movs	r0, #1
   233ec:	f7ff ff64 	bl	232b8 <ecdh_p256_common_secret>
		break;
   233f0:	e7e4      	b.n	233bc <ecdh_cmd_process+0x84>
   233f2:	bf00      	nop
   233f4:	20008a40 	.word	0x20008a40
   233f8:	000310d0 	.word	0x000310d0
   233fc:	0002deb8 	.word	0x0002deb8

00023400 <ecdh_thread>:

static void ecdh_thread(void *p1, void *p2, void *p3)
{
   23400:	b500      	push	{lr}
   23402:	b087      	sub	sp, #28
	struct k_poll_event events[1] = {
   23404:	2300      	movs	r3, #0
   23406:	9301      	str	r3, [sp, #4]
   23408:	9302      	str	r3, [sp, #8]
   2340a:	9303      	str	r3, [sp, #12]
   2340c:	9304      	str	r3, [sp, #16]
   2340e:	9305      	str	r3, [sp, #20]
   23410:	f89d 3011 	ldrb.w	r3, [sp, #17]
   23414:	2201      	movs	r2, #1
   23416:	f362 0305 	bfi	r3, r2, #0, #6
   2341a:	f88d 3011 	strb.w	r3, [sp, #17]
   2341e:	4b0a      	ldr	r3, [pc, #40]	; (23448 <ecdh_thread+0x48>)
   23420:	9305      	str	r3, [sp, #20]
	return z_impl_k_poll(events, num_events, timeout);
   23422:	f04f 32ff 	mov.w	r2, #4294967295
   23426:	f04f 33ff 	mov.w	r3, #4294967295
   2342a:	2101      	movs	r1, #1
   2342c:	a801      	add	r0, sp, #4
   2342e:	f002 ff11 	bl	26254 <z_impl_k_poll>
	z_impl_k_poll_signal_reset(sig);
   23432:	4805      	ldr	r0, [pc, #20]	; (23448 <ecdh_thread+0x48>)
   23434:	f00a fb45 	bl	2dac2 <z_impl_k_poll_signal_reset>

	while (true) {
		k_poll(events, 1, K_FOREVER);

		k_poll_signal_reset(&ecdh_signal);
		events[0].state = K_POLL_STATE_NOT_READY;
   23438:	9b04      	ldr	r3, [sp, #16]
   2343a:	f36f 3394 	bfc	r3, #14, #7
   2343e:	9304      	str	r3, [sp, #16]

		ecdh_cmd_process();
   23440:	f7ff ff7a 	bl	23338 <ecdh_cmd_process>
	while (true) {
   23444:	e7ed      	b.n	23422 <ecdh_thread+0x22>
   23446:	bf00      	nop
   23448:	20008a30 	.word	0x20008a30

0002344c <hci_ecdh_init>:
	}
}
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */

void hci_ecdh_init(void)
{
   2344c:	b510      	push	{r4, lr}
   2344e:	b088      	sub	sp, #32
	z_impl_k_poll_signal_init(sig);
   23450:	480d      	ldr	r0, [pc, #52]	; (23488 <hci_ecdh_init+0x3c>)
   23452:	f00a fb31 	bl	2dab8 <z_impl_k_poll_signal_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   23456:	4c0d      	ldr	r4, [pc, #52]	; (2348c <hci_ecdh_init+0x40>)
   23458:	2200      	movs	r2, #0
   2345a:	2300      	movs	r3, #0
   2345c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   23460:	2300      	movs	r3, #0
   23462:	9304      	str	r3, [sp, #16]
   23464:	220a      	movs	r2, #10
   23466:	9203      	str	r2, [sp, #12]
   23468:	9302      	str	r3, [sp, #8]
   2346a:	9301      	str	r3, [sp, #4]
   2346c:	9300      	str	r3, [sp, #0]
   2346e:	4b08      	ldr	r3, [pc, #32]	; (23490 <hci_ecdh_init+0x44>)
   23470:	f44f 7262 	mov.w	r2, #904	; 0x388
   23474:	4907      	ldr	r1, [pc, #28]	; (23494 <hci_ecdh_init+0x48>)
   23476:	4620      	mov	r0, r4
   23478:	f009 fc6a 	bl	2cd50 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   2347c:	4906      	ldr	r1, [pc, #24]	; (23498 <hci_ecdh_init+0x4c>)
   2347e:	4620      	mov	r0, r4
   23480:	f001 fcba 	bl	24df8 <z_impl_k_thread_name_set>
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecdh_thread_data, "BT CTLR ECDH");
#else
	k_work_init(&ecdh_work, ecdh_work_handler);
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */
}
   23484:	b008      	add	sp, #32
   23486:	bd10      	pop	{r4, pc}
   23488:	20008a30 	.word	0x20008a30
   2348c:	200076d8 	.word	0x200076d8
   23490:	00023401 	.word	0x00023401
   23494:	2000a580 	.word	0x2000a580
   23498:	000310e0 	.word	0x000310e0

0002349c <hci_ecdh_uninit>:

void hci_ecdh_uninit(void)
{
   2349c:	b508      	push	{r3, lr}
	z_impl_k_thread_abort(thread);
   2349e:	4802      	ldr	r0, [pc, #8]	; (234a8 <hci_ecdh_uninit+0xc>)
   234a0:	f7f4 fd68 	bl	17f74 <z_impl_k_thread_abort>
#if !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK)
	k_thread_abort(&ecdh_thread_data);
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */
}
   234a4:	bd08      	pop	{r3, pc}
   234a6:	bf00      	nop
   234a8:	200076d8 	.word	0x200076d8

000234ac <hci_cmd_le_read_local_p256_public_key>:


uint8_t hci_cmd_le_read_local_p256_public_key(void)
{
   234ac:	b508      	push	{r3, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   234ae:	4b0a      	ldr	r3, [pc, #40]	; (234d8 <hci_cmd_le_read_local_p256_public_key+0x2c>)
   234b0:	2201      	movs	r2, #1
   234b2:	f3bf 8f5b 	dmb	ish
   234b6:	e853 1f00 	ldrex	r1, [r3]
   234ba:	2900      	cmp	r1, #0
   234bc:	d103      	bne.n	234c6 <hci_cmd_le_read_local_p256_public_key+0x1a>
   234be:	e843 2000 	strex	r0, r2, [r3]
   234c2:	2800      	cmp	r0, #0
   234c4:	d1f7      	bne.n	234b6 <hci_cmd_le_read_local_p256_public_key+0xa>
   234c6:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&cmd, 0, GEN_PUBLIC_KEY)) {
   234ca:	d103      	bne.n	234d4 <hci_cmd_le_read_local_p256_public_key+0x28>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	work_submit();
   234cc:	f7ff ff2c 	bl	23328 <work_submit>

	return 0;
   234d0:	2000      	movs	r0, #0
}
   234d2:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   234d4:	200c      	movs	r0, #12
   234d6:	e7fc      	b.n	234d2 <hci_cmd_le_read_local_p256_public_key+0x26>
   234d8:	20008a40 	.word	0x20008a40

000234dc <cmd_le_generate_dhkey>:

uint8_t cmd_le_generate_dhkey(uint8_t *key, uint8_t key_type)
{
   234dc:	b508      	push	{r3, lr}
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   234de:	b1a1      	cbz	r1, 2350a <cmd_le_generate_dhkey+0x2e>
   234e0:	2204      	movs	r2, #4
   234e2:	4b17      	ldr	r3, [pc, #92]	; (23540 <cmd_le_generate_dhkey+0x64>)
   234e4:	f3bf 8f5b 	dmb	ish
   234e8:	e853 1f00 	ldrex	r1, [r3]
   234ec:	2900      	cmp	r1, #0
   234ee:	d104      	bne.n	234fa <cmd_le_generate_dhkey+0x1e>
   234f0:	e843 2c00 	strex	ip, r2, [r3]
   234f4:	f1bc 0f00 	cmp.w	ip, #0
   234f8:	d1f6      	bne.n	234e8 <cmd_le_generate_dhkey+0xc>
   234fa:	f3bf 8f5b 	dmb	ish
   234fe:	d11c      	bne.n	2353a <cmd_le_generate_dhkey+0x5e>
	psrc += length - 1;
   23500:	f100 021f 	add.w	r2, r0, #31
	uint8_t *pdst = (uint8_t *)dst;
   23504:	4b0f      	ldr	r3, [pc, #60]	; (23544 <cmd_le_generate_dhkey+0x68>)
	for (; length > 0; length--) {
   23506:	2120      	movs	r1, #32
   23508:	e006      	b.n	23518 <cmd_le_generate_dhkey+0x3c>
   2350a:	2202      	movs	r2, #2
   2350c:	e7e9      	b.n	234e2 <cmd_le_generate_dhkey+0x6>
		*pdst++ = *psrc--;
   2350e:	f812 c901 	ldrb.w	ip, [r2], #-1
   23512:	f803 cb01 	strb.w	ip, [r3], #1
	for (; length > 0; length--) {
   23516:	3901      	subs	r1, #1
   23518:	2900      	cmp	r1, #0
   2351a:	d1f8      	bne.n	2350e <cmd_le_generate_dhkey+0x32>
	psrc += length - 1;
   2351c:	303f      	adds	r0, #63	; 0x3f
	uint8_t *pdst = (uint8_t *)dst;
   2351e:	4b0a      	ldr	r3, [pc, #40]	; (23548 <cmd_le_generate_dhkey+0x6c>)
	for (; length > 0; length--) {
   23520:	2220      	movs	r2, #32
   23522:	e004      	b.n	2352e <cmd_le_generate_dhkey+0x52>
		*pdst++ = *psrc--;
   23524:	f810 1901 	ldrb.w	r1, [r0], #-1
   23528:	f803 1b01 	strb.w	r1, [r3], #1
	for (; length > 0; length--) {
   2352c:	3a01      	subs	r2, #1
   2352e:	2a00      	cmp	r2, #0
   23530:	d1f8      	bne.n	23524 <cmd_le_generate_dhkey+0x48>
	}

	sys_memcpy_swap(&ecdh.public_key_be[0], &key[0], 32);
	sys_memcpy_swap(&ecdh.public_key_be[32], &key[32], 32);

	work_submit();
   23532:	f7ff fef9 	bl	23328 <work_submit>

	return 0;
   23536:	2000      	movs	r0, #0
}
   23538:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   2353a:	200c      	movs	r0, #12
   2353c:	e7fc      	b.n	23538 <cmd_le_generate_dhkey+0x5c>
   2353e:	bf00      	nop
   23540:	20008a40 	.word	0x20008a40
   23544:	20008a64 	.word	0x20008a64
   23548:	20008a84 	.word	0x20008a84

0002354c <mpsl_lib_init_internal>:
	return 0;
#endif
}

static int32_t mpsl_lib_init_internal(void)
{
   2354c:	b500      	push	{lr}
   2354e:	b083      	sub	sp, #12
	int err = 0;
	mpsl_clock_lfclk_cfg_t clock_cfg;

	clock_cfg.source = m_config_clock_source_get();
   23550:	f009 f920 	bl	2c794 <m_config_clock_source_get>
   23554:	f88d 0000 	strb.w	r0, [sp]
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   23558:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   2355c:	f8ad 3004 	strh.w	r3, [sp, #4]
	clock_cfg.skip_wait_lfclk_started =
   23560:	2300      	movs	r3, #0
   23562:	f88d 3006 	strb.w	r3, [sp, #6]
	BUILD_ASSERT(IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION),
		    "MPSL requires clock calibration to be enabled when RC is used as LFCLK");

	/* clock_cfg.rc_ctiv is given in 1/4 seconds units.
	 * CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD is given in ms. */
	clock_cfg.rc_ctiv = (CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD * 4 / 1000);
   23566:	2310      	movs	r3, #16
   23568:	f88d 3001 	strb.w	r3, [sp, #1]
	clock_cfg.rc_temp_ctiv = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP + 1;
   2356c:	2302      	movs	r3, #2
   2356e:	f88d 3002 	strb.w	r3, [sp, #2]
#else
	clock_cfg.rc_ctiv = 0;
	clock_cfg.rc_temp_ctiv = 0;
#endif

	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   23572:	4a04      	ldr	r2, [pc, #16]	; (23584 <mpsl_lib_init_internal+0x38>)
   23574:	2119      	movs	r1, #25
   23576:	4668      	mov	r0, sp
   23578:	f7e8 ff32 	bl	c3e0 <mpsl_init>
		return err;
	}
#endif

	return 0;
}
   2357c:	b003      	add	sp, #12
   2357e:	f85d fb04 	ldr.w	pc, [sp], #4
   23582:	bf00      	nop
   23584:	00023589 	.word	0x00023589

00023588 <m_assert_handler>:
{
   23588:	b590      	push	{r4, r7, lr}
   2358a:	b083      	sub	sp, #12
   2358c:	af00      	add	r7, sp, #0
	LOG_ERR("MPSL ASSERT: %s, %d", file, line);
   2358e:	466c      	mov	r4, sp
   23590:	2300      	movs	r3, #0
   23592:	713b      	strb	r3, [r7, #4]
   23594:	2302      	movs	r3, #2
   23596:	717b      	strb	r3, [r7, #5]
   23598:	b08a      	sub	sp, #40	; 0x28
   2359a:	46ec      	mov	ip, sp
   2359c:	f11c 0210 	adds.w	r2, ip, #16
   235a0:	d01b      	beq.n	235da <m_assert_handler+0x52>
   235a2:	f04f 0e12 	mov.w	lr, #18
   235a6:	b12a      	cbz	r2, 235b4 <m_assert_handler+0x2c>
   235a8:	f1be 0f04 	cmp.w	lr, #4
   235ac:	dd02      	ble.n	235b4 <m_assert_handler+0x2c>
   235ae:	4b2b      	ldr	r3, [pc, #172]	; (2365c <m_assert_handler+0xd4>)
   235b0:	f8cc 3014 	str.w	r3, [ip, #20]
   235b4:	2300      	movs	r3, #0
   235b6:	703b      	strb	r3, [r7, #0]
   235b8:	2302      	movs	r3, #2
   235ba:	707b      	strb	r3, [r7, #1]
   235bc:	b1d2      	cbz	r2, 235f4 <m_assert_handler+0x6c>
   235be:	4673      	mov	r3, lr
   235c0:	f1be 0f08 	cmp.w	lr, #8
   235c4:	dd01      	ble.n	235ca <m_assert_handler+0x42>
   235c6:	f8cc 0018 	str.w	r0, [ip, #24]
   235ca:	2b0c      	cmp	r3, #12
   235cc:	dd01      	ble.n	235d2 <m_assert_handler+0x4a>
   235ce:	f8cc 101c 	str.w	r1, [ip, #28]
   235d2:	f10c 0320 	add.w	r3, ip, #32
   235d6:	2100      	movs	r1, #0
   235d8:	e00a      	b.n	235f0 <m_assert_handler+0x68>
   235da:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
   235de:	e7e2      	b.n	235a6 <m_assert_handler+0x1e>
   235e0:	f101 0008 	add.w	r0, r1, #8
   235e4:	4438      	add	r0, r7
   235e6:	f810 0c08 	ldrb.w	r0, [r0, #-8]
   235ea:	f803 0b01 	strb.w	r0, [r3], #1
   235ee:	3101      	adds	r1, #1
   235f0:	2901      	cmp	r1, #1
   235f2:	d9f5      	bls.n	235e0 <m_assert_handler+0x58>
   235f4:	f1be 0f11 	cmp.w	lr, #17
   235f8:	dd2d      	ble.n	23656 <m_assert_handler+0xce>
   235fa:	2312      	movs	r3, #18
   235fc:	b14a      	cbz	r2, 23612 <m_assert_handler+0x8a>
   235fe:	2104      	movs	r1, #4
   23600:	7139      	strb	r1, [r7, #4]
   23602:	2100      	movs	r1, #0
   23604:	7179      	strb	r1, [r7, #5]
   23606:	71b9      	strb	r1, [r7, #6]
   23608:	2101      	movs	r1, #1
   2360a:	71f9      	strb	r1, [r7, #7]
   2360c:	6878      	ldr	r0, [r7, #4]
   2360e:	f8cc 0010 	str.w	r0, [ip, #16]
   23612:	2100      	movs	r1, #0
   23614:	f36f 0100 	bfc	r1, #0, #1
   23618:	f36f 0141 	bfc	r1, #1, #1
   2361c:	f36f 0182 	bfc	r1, #2, #1
   23620:	f36f 01c5 	bfc	r1, #3, #3
   23624:	2001      	movs	r0, #1
   23626:	f360 1188 	bfi	r1, r0, #6, #3
   2362a:	f3c3 0309 	ubfx	r3, r3, #0, #10
   2362e:	f363 2152 	bfi	r1, r3, #9, #10
   23632:	f36f 41de 	bfc	r1, #19, #12
   23636:	f36f 71df 	bfc	r1, #31, #1
   2363a:	2300      	movs	r3, #0
   2363c:	4808      	ldr	r0, [pc, #32]	; (23660 <m_assert_handler+0xd8>)
   2363e:	f004 fbe6 	bl	27e0e <z_impl_z_log_msg_static_create>
   23642:	46a5      	mov	sp, r4
	k_oops();
   23644:	4040      	eors	r0, r0
   23646:	f380 8811 	msr	BASEPRI, r0
   2364a:	f04f 0003 	mov.w	r0, #3
   2364e:	df02      	svc	2
}
   23650:	370c      	adds	r7, #12
   23652:	46bd      	mov	sp, r7
   23654:	bd90      	pop	{r4, r7, pc}
	LOG_ERR("MPSL ASSERT: %s, %d", file, line);
   23656:	f06f 031b 	mvn.w	r3, #27
   2365a:	e7cf      	b.n	235fc <m_assert_handler+0x74>
   2365c:	0003111c 	.word	0x0003111c
   23660:	0002df08 	.word	0x0002df08

00023664 <mpsl_low_prio_init>:

	return 0;
}

static int mpsl_low_prio_init(const struct device *dev)
{
   23664:	b530      	push	{r4, r5, lr}
   23666:	b083      	sub	sp, #12
	ARG_UNUSED(dev);

	k_work_queue_start(&mpsl_work_q, mpsl_work_stack,
   23668:	4d0d      	ldr	r5, [pc, #52]	; (236a0 <mpsl_low_prio_init+0x3c>)
   2366a:	2400      	movs	r4, #0
   2366c:	9400      	str	r4, [sp, #0]
   2366e:	f06f 0309 	mvn.w	r3, #9
   23672:	f44f 6280 	mov.w	r2, #1024	; 0x400
   23676:	490b      	ldr	r1, [pc, #44]	; (236a4 <mpsl_low_prio_init+0x40>)
   23678:	4628      	mov	r0, r5
   2367a:	f001 ff33 	bl	254e4 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
   2367e:	490a      	ldr	r1, [pc, #40]	; (236a8 <mpsl_low_prio_init+0x44>)
   23680:	4628      	mov	r0, r5
   23682:	f001 fbb9 	bl	24df8 <z_impl_k_thread_name_set>
			   K_THREAD_STACK_SIZEOF(mpsl_work_stack),
			   K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO), NULL);
	k_thread_name_set(&mpsl_work_q.thread, "MPSL Work");
	k_work_init(&mpsl_low_prio_work, mpsl_low_prio_work_handler);
   23686:	4909      	ldr	r1, [pc, #36]	; (236ac <mpsl_low_prio_init+0x48>)
   23688:	4809      	ldr	r0, [pc, #36]	; (236b0 <mpsl_low_prio_init+0x4c>)
   2368a:	f009 fd43 	bl	2d114 <k_work_init>

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   2368e:	4622      	mov	r2, r4
   23690:	2104      	movs	r1, #4
   23692:	2019      	movs	r0, #25
   23694:	f004 ff2b 	bl	284ee <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   23698:	4620      	mov	r0, r4
   2369a:	b003      	add	sp, #12
   2369c:	bd30      	pop	{r4, r5, pc}
   2369e:	bf00      	nop
   236a0:	20007790 	.word	0x20007790
   236a4:	2000a980 	.word	0x2000a980
   236a8:	00031130 	.word	0x00031130
   236ac:	0002c81d 	.word	0x0002c81d
   236b0:	20008aa4 	.word	0x20008aa4

000236b4 <mpsl_low_prio_irq_handler>:
{
   236b4:	b508      	push	{r3, lr}
	k_work_submit_to_queue(&mpsl_work_q, &mpsl_low_prio_work);
   236b6:	4902      	ldr	r1, [pc, #8]	; (236c0 <mpsl_low_prio_irq_handler+0xc>)
   236b8:	4802      	ldr	r0, [pc, #8]	; (236c4 <mpsl_low_prio_irq_handler+0x10>)
   236ba:	f009 fd47 	bl	2d14c <k_work_submit_to_queue>
}
   236be:	bd08      	pop	{r3, pc}
   236c0:	20008aa4 	.word	0x20008aa4
   236c4:	20007790 	.word	0x20007790

000236c8 <mpsl_hfclk_callback>:
#include <mpsl_clock.h>

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
   236c8:	b508      	push	{r3, lr}
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   236ca:	4b02      	ldr	r3, [pc, #8]	; (236d4 <mpsl_hfclk_callback+0xc>)
   236cc:	681b      	ldr	r3, [r3, #0]
   236ce:	2000      	movs	r0, #0
   236d0:	4798      	blx	r3
}
   236d2:	bd08      	pop	{r3, pc}
   236d4:	20008ab4 	.word	0x20008ab4

000236d8 <nrfx_clock_start>:

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   236d8:	b508      	push	{r3, lr}
	switch (domain) {
   236da:	b128      	cbz	r0, 236e8 <nrfx_clock_start+0x10>
   236dc:	2801      	cmp	r0, #1
   236de:	d102      	bne.n	236e6 <nrfx_clock_start+0xe>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   236e0:	4804      	ldr	r0, [pc, #16]	; (236f4 <nrfx_clock_start+0x1c>)
   236e2:	f7e8 fcfd 	bl	c0e0 <mpsl_clock_hfclk_request>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   236e6:	bd08      	pop	{r3, pc}
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   236e8:	4b03      	ldr	r3, [pc, #12]	; (236f8 <nrfx_clock_start+0x20>)
   236ea:	681b      	ldr	r3, [r3, #0]
   236ec:	2001      	movs	r0, #1
   236ee:	4798      	blx	r3
}
   236f0:	e7f9      	b.n	236e6 <nrfx_clock_start+0xe>
   236f2:	bf00      	nop
   236f4:	000236c9 	.word	0x000236c9
   236f8:	20008ab4 	.word	0x20008ab4

000236fc <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   236fc:	4b01      	ldr	r3, [pc, #4]	; (23704 <nrfx_clock_init+0x8>)
   236fe:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   23700:	4801      	ldr	r0, [pc, #4]	; (23708 <nrfx_clock_init+0xc>)
   23702:	4770      	bx	lr
   23704:	20008ab4 	.word	0x20008ab4
   23708:	0bad0000 	.word	0x0bad0000

0002370c <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
   2370c:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   23710:	4905      	ldr	r1, [pc, #20]	; (23728 <__NVIC_SystemReset+0x1c>)
   23712:	68ca      	ldr	r2, [r1, #12]
   23714:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   23718:	4b04      	ldr	r3, [pc, #16]	; (2372c <__NVIC_SystemReset+0x20>)
   2371a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   2371c:	60cb      	str	r3, [r1, #12]
   2371e:	f3bf 8f4f 	dsb	sy
    __NOP();
   23722:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   23724:	e7fd      	b.n	23722 <__NVIC_SystemReset+0x16>
   23726:	bf00      	nop
   23728:	e000ed00 	.word	0xe000ed00
   2372c:	05fa0004 	.word	0x05fa0004

00023730 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   23730:	4b02      	ldr	r3, [pc, #8]	; (2373c <nvmc_wait+0xc>)
   23732:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   23736:	2b00      	cmp	r3, #0
   23738:	d0fa      	beq.n	23730 <nvmc_wait>
}
   2373a:	4770      	bx	lr
   2373c:	4001e000 	.word	0x4001e000

00023740 <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
   23740:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   23742:	4b03      	ldr	r3, [pc, #12]	; (23750 <nvmc_config+0x10>)
   23744:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
   23748:	f7ff fff2 	bl	23730 <nvmc_wait>
}
   2374c:	bd08      	pop	{r3, pc}
   2374e:	bf00      	nop
   23750:	4001e000 	.word	0x4001e000

00023754 <SystemCoreClockUpdate>:

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   23754:	4b01      	ldr	r3, [pc, #4]	; (2375c <SystemCoreClockUpdate+0x8>)
   23756:	4a02      	ldr	r2, [pc, #8]	; (23760 <SystemCoreClockUpdate+0xc>)
   23758:	601a      	str	r2, [r3, #0]
}
   2375a:	4770      	bx	lr
   2375c:	20000aa8 	.word	0x20000aa8
   23760:	03d09000 	.word	0x03d09000

00023764 <SystemInit>:

void SystemInit(void)
{
   23764:	b538      	push	{r3, r4, r5, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   23766:	f009 f876 	bl	2c856 <nrf52_errata_36>
   2376a:	b140      	cbz	r0, 2377e <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   2376c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   23770:	2200      	movs	r2, #0
   23772:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   23776:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   2377a:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   2377e:	f009 f874 	bl	2c86a <nrf52_errata_66>
   23782:	2800      	cmp	r0, #0
   23784:	d046      	beq.n	23814 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   23786:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   2378a:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   2378e:	4b3b      	ldr	r3, [pc, #236]	; (2387c <SystemInit+0x118>)
   23790:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   23794:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   23798:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   2379c:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   237a0:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   237a4:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   237a8:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   237ac:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   237b0:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   237b4:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   237b8:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   237bc:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   237c0:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   237c4:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   237c8:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   237cc:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   237d0:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   237d4:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   237d8:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   237dc:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   237e0:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   237e4:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   237e8:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   237ec:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   237f0:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   237f4:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   237f8:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   237fc:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   23800:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   23804:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   23808:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   2380c:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   23810:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   23814:	f009 f833 	bl	2c87e <nrf52_errata_136>
   23818:	b160      	cbz	r0, 23834 <SystemInit+0xd0>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   2381a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2381e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   23822:	f013 0f01 	tst.w	r3, #1
   23826:	d005      	beq.n	23834 <SystemInit+0xd0>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   23828:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2382c:	f06f 0201 	mvn.w	r2, #1
   23830:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    nrf52_handle_approtect();
   23834:	f009 f83c 	bl	2c8b0 <nrf52_handle_approtect>

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   23838:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   2383c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   23840:	2b00      	cmp	r3, #0
   23842:	db08      	blt.n	23856 <SystemInit+0xf2>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   23844:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   23848:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   2384c:	2b00      	cmp	r3, #0
   2384e:	db02      	blt.n	23856 <SystemInit+0xf2>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
   23850:	f7ff ff80 	bl	23754 <SystemCoreClockUpdate>
}
   23854:	bd38      	pop	{r3, r4, r5, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
   23856:	2001      	movs	r0, #1
   23858:	f7ff ff72 	bl	23740 <nvmc_config>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   2385c:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
   23860:	2512      	movs	r5, #18
   23862:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
            nvmc_wait();
   23866:	f7ff ff63 	bl	23730 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   2386a:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
            nvmc_wait();
   2386e:	f7ff ff5f 	bl	23730 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
   23872:	2000      	movs	r0, #0
   23874:	f7ff ff64 	bl	23740 <nvmc_config>
            NVIC_SystemReset();
   23878:	f7ff ff48 	bl	2370c <__NVIC_SystemReset>
   2387c:	4000c000 	.word	0x4000c000

00023880 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   23880:	b510      	push	{r4, lr}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
   23882:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   23884:	fab4 f384 	clz	r3, r4
   23888:	f1c3 031f 	rsb	r3, r3, #31
   2388c:	fa5f fc83 	uxtb.w	ip, r3
        if (idx < 0) {
   23890:	2b00      	cmp	r3, #0
   23892:	db16      	blt.n	238c2 <nrfx_flag32_alloc+0x42>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   23894:	2201      	movs	r2, #1
   23896:	fa02 f303 	lsl.w	r3, r2, r3
   2389a:	ea24 0303 	bic.w	r3, r4, r3
   2389e:	f3bf 8f5b 	dmb	ish
   238a2:	e850 2f00 	ldrex	r2, [r0]
   238a6:	42a2      	cmp	r2, r4
   238a8:	d104      	bne.n	238b4 <nrfx_flag32_alloc+0x34>
   238aa:	e840 3e00 	strex	lr, r3, [r0]
   238ae:	f1be 0f00 	cmp.w	lr, #0
   238b2:	d1f6      	bne.n	238a2 <nrfx_flag32_alloc+0x22>
   238b4:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   238b8:	d1e3      	bne.n	23882 <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
   238ba:	f881 c000 	strb.w	ip, [r1]

    return NRFX_SUCCESS;
   238be:	4802      	ldr	r0, [pc, #8]	; (238c8 <nrfx_flag32_alloc+0x48>)
}
   238c0:	bd10      	pop	{r4, pc}
            return NRFX_ERROR_NO_MEM;
   238c2:	4802      	ldr	r0, [pc, #8]	; (238cc <nrfx_flag32_alloc+0x4c>)
   238c4:	e7fc      	b.n	238c0 <nrfx_flag32_alloc+0x40>
   238c6:	bf00      	nop
   238c8:	0bad0000 	.word	0x0bad0000
   238cc:	0bad0002 	.word	0x0bad0002

000238d0 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   238d0:	6803      	ldr	r3, [r0, #0]
   238d2:	40cb      	lsrs	r3, r1
   238d4:	f013 0f01 	tst.w	r3, #1
   238d8:	d115      	bne.n	23906 <nrfx_flag32_free+0x36>
{
   238da:	b500      	push	{lr}
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
   238dc:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
   238de:	2301      	movs	r3, #1
   238e0:	408b      	lsls	r3, r1
   238e2:	4313      	orrs	r3, r2
   238e4:	f3bf 8f5b 	dmb	ish
   238e8:	e850 cf00 	ldrex	ip, [r0]
   238ec:	4594      	cmp	ip, r2
   238ee:	d104      	bne.n	238fa <nrfx_flag32_free+0x2a>
   238f0:	e840 3e00 	strex	lr, r3, [r0]
   238f4:	f1be 0f00 	cmp.w	lr, #0
   238f8:	d1f6      	bne.n	238e8 <nrfx_flag32_free+0x18>
   238fa:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   238fe:	d1ed      	bne.n	238dc <nrfx_flag32_free+0xc>

    return NRFX_SUCCESS;
   23900:	4802      	ldr	r0, [pc, #8]	; (2390c <nrfx_flag32_free+0x3c>)
}
   23902:	f85d fb04 	ldr.w	pc, [sp], #4
        return NRFX_ERROR_INVALID_PARAM;
   23906:	4802      	ldr	r0, [pc, #8]	; (23910 <nrfx_flag32_free+0x40>)
}
   23908:	4770      	bx	lr
   2390a:	bf00      	nop
   2390c:	0bad0000 	.word	0x0bad0000
   23910:	0bad0004 	.word	0x0bad0004

00023914 <nrf_gpio_reconfigure>:
{
   23914:	b5f0      	push	{r4, r5, r6, r7, lr}
   23916:	461c      	mov	r4, r3
   23918:	9f05      	ldr	r7, [sp, #20]
   2391a:	9e06      	ldr	r6, [sp, #24]
    *p_pin = pin_number & 0x1F;
   2391c:	f000 0c1f 	and.w	ip, r0, #31
    return pin_number >> 5;
   23920:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   23922:	2801      	cmp	r0, #1
   23924:	d035      	beq.n	23992 <nrf_gpio_reconfigure+0x7e>
        case 0: return NRF_P0;
   23926:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2392a:	f50c 73e0 	add.w	r3, ip, #448	; 0x1c0
   2392e:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   23932:	b381      	cbz	r1, 23996 <nrf_gpio_reconfigure+0x82>
   23934:	2001      	movs	r0, #1
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   23936:	b382      	cbz	r2, 2399a <nrf_gpio_reconfigure+0x86>
   23938:	f04f 0e02 	mov.w	lr, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2393c:	ea40 000e 	orr.w	r0, r0, lr
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   23940:	b374      	cbz	r4, 239a0 <nrf_gpio_reconfigure+0x8c>
   23942:	f04f 0e0c 	mov.w	lr, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   23946:	ea40 000e 	orr.w	r0, r0, lr
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   2394a:	b367      	cbz	r7, 239a6 <nrf_gpio_reconfigure+0x92>
   2394c:	f44f 6ee0 	mov.w	lr, #1792	; 0x700
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   23950:	ea40 000e 	orr.w	r0, r0, lr
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   23954:	b356      	cbz	r6, 239ac <nrf_gpio_reconfigure+0x98>
   23956:	f44f 3e40 	mov.w	lr, #196608	; 0x30000
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2395a:	ea40 000e 	orr.w	r0, r0, lr
    cnf &= ~to_update;
   2395e:	ea23 0000 	bic.w	r0, r3, r0
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   23962:	b331      	cbz	r1, 239b2 <nrf_gpio_reconfigure+0x9e>
   23964:	780b      	ldrb	r3, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   23966:	b332      	cbz	r2, 239b6 <nrf_gpio_reconfigure+0xa2>
   23968:	7812      	ldrb	r2, [r2, #0]
   2396a:	0052      	lsls	r2, r2, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2396c:	4313      	orrs	r3, r2
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   2396e:	b324      	cbz	r4, 239ba <nrf_gpio_reconfigure+0xa6>
   23970:	7822      	ldrb	r2, [r4, #0]
   23972:	0092      	lsls	r2, r2, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   23974:	4313      	orrs	r3, r2
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   23976:	b317      	cbz	r7, 239be <nrf_gpio_reconfigure+0xaa>
   23978:	783a      	ldrb	r2, [r7, #0]
   2397a:	0212      	lsls	r2, r2, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   2397c:	4313      	orrs	r3, r2
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   2397e:	b306      	cbz	r6, 239c2 <nrf_gpio_reconfigure+0xae>
   23980:	7832      	ldrb	r2, [r6, #0]
   23982:	0412      	lsls	r2, r2, #16
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   23984:	4313      	orrs	r3, r2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   23986:	4303      	orrs	r3, r0
    reg->PIN_CNF[pin_number] = cnf;
   23988:	f50c 7ce0 	add.w	ip, ip, #448	; 0x1c0
   2398c:	f845 302c 	str.w	r3, [r5, ip, lsl #2]
}
   23990:	bdf0      	pop	{r4, r5, r6, r7, pc}
        case 1: return NRF_P1;
   23992:	4d0d      	ldr	r5, [pc, #52]	; (239c8 <nrf_gpio_reconfigure+0xb4>)
   23994:	e7c9      	b.n	2392a <nrf_gpio_reconfigure+0x16>
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   23996:	2000      	movs	r0, #0
   23998:	e7cd      	b.n	23936 <nrf_gpio_reconfigure+0x22>
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   2399a:	f04f 0e00 	mov.w	lr, #0
   2399e:	e7cd      	b.n	2393c <nrf_gpio_reconfigure+0x28>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   239a0:	f04f 0e00 	mov.w	lr, #0
   239a4:	e7cf      	b.n	23946 <nrf_gpio_reconfigure+0x32>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   239a6:	f04f 0e00 	mov.w	lr, #0
   239aa:	e7d1      	b.n	23950 <nrf_gpio_reconfigure+0x3c>
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   239ac:	f04f 0e00 	mov.w	lr, #0
   239b0:	e7d3      	b.n	2395a <nrf_gpio_reconfigure+0x46>
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   239b2:	2300      	movs	r3, #0
   239b4:	e7d7      	b.n	23966 <nrf_gpio_reconfigure+0x52>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   239b6:	2200      	movs	r2, #0
   239b8:	e7d8      	b.n	2396c <nrf_gpio_reconfigure+0x58>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   239ba:	2200      	movs	r2, #0
   239bc:	e7da      	b.n	23974 <nrf_gpio_reconfigure+0x60>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   239be:	2200      	movs	r2, #0
   239c0:	e7dc      	b.n	2397c <nrf_gpio_reconfigure+0x68>
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   239c2:	2200      	movs	r2, #0
   239c4:	e7de      	b.n	23984 <nrf_gpio_reconfigure+0x70>
   239c6:	bf00      	nop
   239c8:	50000300 	.word	0x50000300

000239cc <nrf_gpio_latches_read_and_clear>:
{
   239cc:	b500      	push	{lr}
   239ce:	b083      	sub	sp, #12
   239d0:	4684      	mov	ip, r0
   239d2:	468e      	mov	lr, r1
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
   239d4:	4b0d      	ldr	r3, [pc, #52]	; (23a0c <nrf_gpio_latches_read_and_clear+0x40>)
   239d6:	e893 0003 	ldmia.w	r3, {r0, r1}
   239da:	ab02      	add	r3, sp, #8
   239dc:	e903 0003 	stmdb	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
   239e0:	4663      	mov	r3, ip
   239e2:	e00b      	b.n	239fc <nrf_gpio_latches_read_and_clear+0x30>
        *p_masks = gpio_regs[i]->LATCH;
   239e4:	a902      	add	r1, sp, #8
   239e6:	eb01 0183 	add.w	r1, r1, r3, lsl #2
   239ea:	f851 1c08 	ldr.w	r1, [r1, #-8]
   239ee:	f8d1 0520 	ldr.w	r0, [r1, #1312]	; 0x520
   239f2:	f842 0b04 	str.w	r0, [r2], #4
        gpio_regs[i]->LATCH = *p_masks;
   239f6:	f8c1 0520 	str.w	r0, [r1, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
   239fa:	3301      	adds	r3, #1
   239fc:	eb0c 000e 	add.w	r0, ip, lr
   23a00:	4298      	cmp	r0, r3
   23a02:	d8ef      	bhi.n	239e4 <nrf_gpio_latches_read_and_clear+0x18>
}
   23a04:	b003      	add	sp, #12
   23a06:	f85d fb04 	ldr.w	pc, [sp], #4
   23a0a:	bf00      	nop
   23a0c:	0002dfd8 	.word	0x0002dfd8

00023a10 <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   23a10:	3008      	adds	r0, #8
   23a12:	4b03      	ldr	r3, [pc, #12]	; (23a20 <pin_in_use+0x10>)
   23a14:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   23a18:	f000 0001 	and.w	r0, r0, #1
   23a1c:	4770      	bx	lr
   23a1e:	bf00      	nop
   23a20:	20000aac 	.word	0x20000aac

00023a24 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   23a24:	3008      	adds	r0, #8
   23a26:	4b03      	ldr	r3, [pc, #12]	; (23a34 <pin_in_use_by_te+0x10>)
   23a28:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   23a2c:	f3c0 1040 	ubfx	r0, r0, #5, #1
   23a30:	4770      	bx	lr
   23a32:	bf00      	nop
   23a34:	20000aac 	.word	0x20000aac

00023a38 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   23a38:	3008      	adds	r0, #8
   23a3a:	4b04      	ldr	r3, [pc, #16]	; (23a4c <pin_has_trigger+0x14>)
   23a3c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   23a40:	f010 001c 	ands.w	r0, r0, #28
   23a44:	bf18      	it	ne
   23a46:	2001      	movne	r0, #1
   23a48:	4770      	bx	lr
   23a4a:	bf00      	nop
   23a4c:	20000aac 	.word	0x20000aac

00023a50 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   23a50:	3008      	adds	r0, #8
   23a52:	4b03      	ldr	r3, [pc, #12]	; (23a60 <pin_is_output+0x10>)
   23a54:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   23a58:	f3c0 0040 	ubfx	r0, r0, #1, #1
   23a5c:	4770      	bx	lr
   23a5e:	bf00      	nop
   23a60:	20000aac 	.word	0x20000aac

00023a64 <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   23a64:	3008      	adds	r0, #8
   23a66:	4b02      	ldr	r3, [pc, #8]	; (23a70 <pin_te_get+0xc>)
   23a68:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   23a6c:	0b40      	lsrs	r0, r0, #13
   23a6e:	4770      	bx	lr
   23a70:	20000aac 	.word	0x20000aac

00023a74 <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   23a74:	2200      	movs	r2, #0
   23a76:	e004      	b.n	23a82 <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   23a78:	f04f 33ff 	mov.w	r3, #4294967295
   23a7c:	4283      	cmp	r3, r0
   23a7e:	d00f      	beq.n	23aa0 <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   23a80:	3201      	adds	r2, #1
   23a82:	2a29      	cmp	r2, #41	; 0x29
   23a84:	d80a      	bhi.n	23a9c <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   23a86:	f102 0308 	add.w	r3, r2, #8
   23a8a:	4906      	ldr	r1, [pc, #24]	; (23aa4 <handler_in_use+0x30>)
   23a8c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   23a90:	f413 7f80 	tst.w	r3, #256	; 0x100
   23a94:	d0f0      	beq.n	23a78 <handler_in_use+0x4>
   23a96:	f3c3 2343 	ubfx	r3, r3, #9, #4
   23a9a:	e7ef      	b.n	23a7c <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
   23a9c:	2000      	movs	r0, #0
   23a9e:	4770      	bx	lr
            return true;
   23aa0:	2001      	movs	r0, #1
}
   23aa2:	4770      	bx	lr
   23aa4:	20000aac 	.word	0x20000aac

00023aa8 <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
   23aa8:	2300      	movs	r3, #0
   23aaa:	b113      	cbz	r3, 23ab2 <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
   23aac:	f04f 30ff 	mov.w	r0, #4294967295
}
   23ab0:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   23ab2:	4a07      	ldr	r2, [pc, #28]	; (23ad0 <find_handler+0x28>)
   23ab4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   23ab8:	4282      	cmp	r2, r0
   23aba:	d001      	beq.n	23ac0 <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
   23abc:	3301      	adds	r3, #1
   23abe:	e7f4      	b.n	23aaa <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   23ac0:	4a03      	ldr	r2, [pc, #12]	; (23ad0 <find_handler+0x28>)
   23ac2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   23ac6:	6852      	ldr	r2, [r2, #4]
   23ac8:	428a      	cmp	r2, r1
   23aca:	d1f7      	bne.n	23abc <find_handler+0x14>
            return i;
   23acc:	4618      	mov	r0, r3
   23ace:	4770      	bx	lr
   23ad0:	20000aac 	.word	0x20000aac

00023ad4 <get_initial_sense>:
    return NRFX_SUCCESS;
}

static inline nrf_gpio_pin_sense_t get_initial_sense(nrfx_gpiote_pin_t pin)
{
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   23ad4:	f100 0208 	add.w	r2, r0, #8
   23ad8:	4b0f      	ldr	r3, [pc, #60]	; (23b18 <get_initial_sense+0x44>)
   23ada:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   23ade:	f3c3 0382 	ubfx	r3, r3, #2, #3
    nrf_gpio_pin_sense_t sense;

    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   23ae2:	2b04      	cmp	r3, #4
   23ae4:	d012      	beq.n	23b0c <get_initial_sense+0x38>
    {
        sense = NRF_GPIO_PIN_SENSE_LOW;
    }
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   23ae6:	2b05      	cmp	r3, #5
   23ae8:	d012      	beq.n	23b10 <get_initial_sense+0x3c>
    *p_pin = pin_number & 0x1F;
   23aea:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
   23aee:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   23af0:	2801      	cmp	r0, #1
   23af2:	d009      	beq.n	23b08 <get_initial_sense+0x34>
        case 0: return NRF_P0;
   23af4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    return p_reg->IN;
   23af8:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   23afc:	40d3      	lsrs	r3, r2
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    }
    else
    {
        /* If edge detection start with sensing opposite state. */
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   23afe:	f013 0f01 	tst.w	r3, #1
   23b02:	d007      	beq.n	23b14 <get_initial_sense+0x40>
   23b04:	2003      	movs	r0, #3
   23b06:	4770      	bx	lr
        case 1: return NRF_P1;
   23b08:	4b04      	ldr	r3, [pc, #16]	; (23b1c <get_initial_sense+0x48>)
   23b0a:	e7f5      	b.n	23af8 <get_initial_sense+0x24>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   23b0c:	2003      	movs	r0, #3
   23b0e:	4770      	bx	lr
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   23b10:	2002      	movs	r0, #2
   23b12:	4770      	bx	lr
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   23b14:	2002      	movs	r0, #2
    }

    return sense;
}
   23b16:	4770      	bx	lr
   23b18:	20000aac 	.word	0x20000aac
   23b1c:	50000300 	.word	0x50000300

00023b20 <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   23b20:	3008      	adds	r0, #8
   23b22:	4b06      	ldr	r3, [pc, #24]	; (23b3c <channel_handler_get+0x1c>)
   23b24:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   23b28:	f410 7f80 	tst.w	r0, #256	; 0x100
   23b2c:	d004      	beq.n	23b38 <channel_handler_get+0x18>
   23b2e:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
   23b32:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   23b36:	4770      	bx	lr
        return NULL;
   23b38:	2000      	movs	r0, #0
}
   23b3a:	4770      	bx	lr
   23b3c:	20000aac 	.word	0x20000aac

00023b40 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   23b40:	b570      	push	{r4, r5, r6, lr}
   23b42:	4604      	mov	r4, r0
   23b44:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
   23b46:	f7ff ffeb 	bl	23b20 <channel_handler_get>

    if (handler)
   23b4a:	b120      	cbz	r0, 23b56 <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
   23b4c:	6806      	ldr	r6, [r0, #0]
   23b4e:	6842      	ldr	r2, [r0, #4]
   23b50:	4629      	mov	r1, r5
   23b52:	4620      	mov	r0, r4
   23b54:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
   23b56:	4b04      	ldr	r3, [pc, #16]	; (23b68 <call_handler+0x28>)
   23b58:	689b      	ldr	r3, [r3, #8]
   23b5a:	b123      	cbz	r3, 23b66 <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   23b5c:	4a02      	ldr	r2, [pc, #8]	; (23b68 <call_handler+0x28>)
   23b5e:	68d2      	ldr	r2, [r2, #12]
   23b60:	4629      	mov	r1, r5
   23b62:	4620      	mov	r0, r4
   23b64:	4798      	blx	r3
    }
}
   23b66:	bd70      	pop	{r4, r5, r6, pc}
   23b68:	20000aac 	.word	0x20000aac

00023b6c <next_sense_cond_call_handler>:

static void next_sense_cond_call_handler(nrfx_gpiote_pin_t     pin,
                                         nrfx_gpiote_trigger_t trigger,
                                         nrf_gpio_pin_sense_t  sense)
{
   23b6c:	b570      	push	{r4, r5, r6, lr}
   23b6e:	4606      	mov	r6, r0
   23b70:	460c      	mov	r4, r1
   23b72:	4615      	mov	r5, r2
    if (is_level(trigger))
   23b74:	4608      	mov	r0, r1
   23b76:	f008 ff0b 	bl	2c990 <is_level>
   23b7a:	b960      	cbnz	r0, 23b96 <next_sense_cond_call_handler+0x2a>
    {
        /* Reconfigure sense to the opposite level, so the internal PINx.DETECT signal
         * can be deasserted. Therefore PORT event can be generated again,
         * unless some other PINx.DETECT signal is still active. */
        nrf_gpio_pin_sense_t next_sense = (sense == NRF_GPIO_PIN_SENSE_HIGH) ?
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   23b7c:	2d02      	cmp	r5, #2
   23b7e:	d028      	beq.n	23bd2 <next_sense_cond_call_handler+0x66>
   23b80:	2102      	movs	r1, #2

        nrf_gpio_cfg_sense_set(pin, next_sense);
   23b82:	4630      	mov	r0, r6
   23b84:	f008 fedc 	bl	2c940 <nrf_gpio_cfg_sense_set>

        /* Invoke user handler only if the sensed pin level matches its polarity
         * configuration. Call handler unconditionally in case of toggle trigger or
         * level trigger. */
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   23b88:	2c03      	cmp	r4, #3
   23b8a:	d026      	beq.n	23bda <next_sense_cond_call_handler+0x6e>
   23b8c:	2d02      	cmp	r5, #2
   23b8e:	d022      	beq.n	23bd6 <next_sense_cond_call_handler+0x6a>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   23b90:	2d03      	cmp	r5, #3
   23b92:	d027      	beq.n	23be4 <next_sense_cond_call_handler+0x78>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
        {
            call_handler(pin, trigger);
        }
    }
}
   23b94:	bd70      	pop	{r4, r5, r6, pc}
        call_handler(pin, trigger);
   23b96:	4621      	mov	r1, r4
   23b98:	4630      	mov	r0, r6
   23b9a:	f7ff ffd1 	bl	23b40 <call_handler>
    *p_pin = pin_number & 0x1F;
   23b9e:	f006 031f 	and.w	r3, r6, #31
    return pin_number >> 5;
   23ba2:	0972      	lsrs	r2, r6, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   23ba4:	2a01      	cmp	r2, #1
   23ba6:	d012      	beq.n	23bce <next_sense_cond_call_handler+0x62>
        case 0: return NRF_P0;
   23ba8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   23bac:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   23bb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   23bb4:	f3c3 4301 	ubfx	r3, r3, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
   23bb8:	429d      	cmp	r5, r3
   23bba:	d1eb      	bne.n	23b94 <next_sense_cond_call_handler+0x28>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   23bbc:	2100      	movs	r1, #0
   23bbe:	4630      	mov	r0, r6
   23bc0:	f008 febe 	bl	2c940 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   23bc4:	4629      	mov	r1, r5
   23bc6:	4630      	mov	r0, r6
   23bc8:	f008 feba 	bl	2c940 <nrf_gpio_cfg_sense_set>
   23bcc:	e7e2      	b.n	23b94 <next_sense_cond_call_handler+0x28>
        case 1: return NRF_P1;
   23bce:	4a07      	ldr	r2, [pc, #28]	; (23bec <next_sense_cond_call_handler+0x80>)
   23bd0:	e7ec      	b.n	23bac <next_sense_cond_call_handler+0x40>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   23bd2:	2103      	movs	r1, #3
   23bd4:	e7d5      	b.n	23b82 <next_sense_cond_call_handler+0x16>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   23bd6:	2c01      	cmp	r4, #1
   23bd8:	d1da      	bne.n	23b90 <next_sense_cond_call_handler+0x24>
            call_handler(pin, trigger);
   23bda:	4621      	mov	r1, r4
   23bdc:	4630      	mov	r0, r6
   23bde:	f7ff ffaf 	bl	23b40 <call_handler>
}
   23be2:	e7d7      	b.n	23b94 <next_sense_cond_call_handler+0x28>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   23be4:	2c02      	cmp	r4, #2
   23be6:	d1d5      	bne.n	23b94 <next_sense_cond_call_handler+0x28>
   23be8:	e7f7      	b.n	23bda <next_sense_cond_call_handler+0x6e>
   23bea:	bf00      	nop
   23bec:	50000300 	.word	0x50000300

00023bf0 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   23bf0:	f100 0208 	add.w	r2, r0, #8
   23bf4:	4b0e      	ldr	r3, [pc, #56]	; (23c30 <release_handler+0x40>)
   23bf6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   23bfa:	f413 7f80 	tst.w	r3, #256	; 0x100
   23bfe:	d016      	beq.n	23c2e <release_handler+0x3e>
{
   23c00:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   23c02:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   23c06:	4610      	mov	r0, r2
   23c08:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   23c0c:	4a08      	ldr	r2, [pc, #32]	; (23c30 <release_handler+0x40>)
   23c0e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
   23c12:	4620      	mov	r0, r4
   23c14:	f7ff ff2e 	bl	23a74 <handler_in_use>
   23c18:	b100      	cbz	r0, 23c1c <release_handler+0x2c>
}
   23c1a:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
   23c1c:	4804      	ldr	r0, [pc, #16]	; (23c30 <release_handler+0x40>)
   23c1e:	2300      	movs	r3, #0
   23c20:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   23c24:	4621      	mov	r1, r4
   23c26:	3068      	adds	r0, #104	; 0x68
   23c28:	f7ff fe52 	bl	238d0 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   23c2c:	e7f5      	b.n	23c1a <release_handler+0x2a>
   23c2e:	4770      	bx	lr
   23c30:	20000aac 	.word	0x20000aac

00023c34 <pin_handler_trigger_uninit>:
{
   23c34:	b510      	push	{r4, lr}
   23c36:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
   23c38:	f7ff fef4 	bl	23a24 <pin_in_use_by_te>
   23c3c:	b140      	cbz	r0, 23c50 <pin_handler_trigger_uninit+0x1c>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   23c3e:	4620      	mov	r0, r4
   23c40:	f7ff ff10 	bl	23a64 <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   23c44:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   23c48:	4b06      	ldr	r3, [pc, #24]	; (23c64 <pin_handler_trigger_uninit+0x30>)
   23c4a:	2200      	movs	r2, #0
   23c4c:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
   23c50:	4620      	mov	r0, r4
   23c52:	f7ff ffcd 	bl	23bf0 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   23c56:	3408      	adds	r4, #8
   23c58:	4b03      	ldr	r3, [pc, #12]	; (23c68 <pin_handler_trigger_uninit+0x34>)
   23c5a:	2200      	movs	r2, #0
   23c5c:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
   23c60:	bd10      	pop	{r4, pc}
   23c62:	bf00      	nop
   23c64:	40006000 	.word	0x40006000
   23c68:	20000aac 	.word	0x20000aac

00023c6c <pin_handler_set>:
{
   23c6c:	b570      	push	{r4, r5, r6, lr}
   23c6e:	b082      	sub	sp, #8
   23c70:	4605      	mov	r5, r0
   23c72:	460e      	mov	r6, r1
   23c74:	4614      	mov	r4, r2
    release_handler(pin);
   23c76:	f7ff ffbb 	bl	23bf0 <release_handler>
    if (!handler)
   23c7a:	b326      	cbz	r6, 23cc6 <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
   23c7c:	4621      	mov	r1, r4
   23c7e:	4630      	mov	r0, r6
   23c80:	f7ff ff12 	bl	23aa8 <find_handler>
    if (handler_id < 0)
   23c84:	1e03      	subs	r3, r0, #0
   23c86:	db13      	blt.n	23cb0 <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
   23c88:	4910      	ldr	r1, [pc, #64]	; (23ccc <pin_handler_set+0x60>)
   23c8a:	f841 6033 	str.w	r6, [r1, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   23c8e:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
   23c92:	6054      	str	r4, [r2, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   23c94:	f105 0008 	add.w	r0, r5, #8
   23c98:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
   23c9c:	025b      	lsls	r3, r3, #9
   23c9e:	b29b      	uxth	r3, r3
   23ca0:	4313      	orrs	r3, r2
   23ca2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   23ca6:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
    return NRFX_SUCCESS;
   23caa:	4809      	ldr	r0, [pc, #36]	; (23cd0 <pin_handler_set+0x64>)
}
   23cac:	b002      	add	sp, #8
   23cae:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   23cb0:	f10d 0107 	add.w	r1, sp, #7
   23cb4:	4807      	ldr	r0, [pc, #28]	; (23cd4 <pin_handler_set+0x68>)
   23cb6:	f7ff fde3 	bl	23880 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   23cba:	4b05      	ldr	r3, [pc, #20]	; (23cd0 <pin_handler_set+0x64>)
   23cbc:	4298      	cmp	r0, r3
   23cbe:	d1f5      	bne.n	23cac <pin_handler_set+0x40>
        handler_id = (int32_t)id;
   23cc0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   23cc4:	e7e0      	b.n	23c88 <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
   23cc6:	4802      	ldr	r0, [pc, #8]	; (23cd0 <pin_handler_set+0x64>)
   23cc8:	e7f0      	b.n	23cac <pin_handler_set+0x40>
   23cca:	bf00      	nop
   23ccc:	20000aac 	.word	0x20000aac
   23cd0:	0bad0000 	.word	0x0bad0000
   23cd4:	20000b14 	.word	0x20000b14

00023cd8 <port_event_handle>:
    }
    return false;
}

static void port_event_handle(void)
{
   23cd8:	b570      	push	{r4, r5, r6, lr}
   23cda:	b082      	sub	sp, #8
    uint32_t latch[GPIO_COUNT];

    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);
   23cdc:	466a      	mov	r2, sp
   23cde:	2102      	movs	r1, #2
   23ce0:	2000      	movs	r0, #0
   23ce2:	f7ff fe73 	bl	239cc <nrf_gpio_latches_read_and_clear>
   23ce6:	e040      	b.n	23d6a <port_event_handle+0x92>
   23ce8:	4e22      	ldr	r6, [pc, #136]	; (23d74 <port_event_handle+0x9c>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   23cea:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
   23cee:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);

                nrf_bitmask_bit_clear(pin, latch);
                sense = nrf_gpio_pin_sense_get(pin);

                next_sense_cond_call_handler(pin, trigger, sense);
   23cf2:	f3c2 4201 	ubfx	r2, r2, #16, #2
   23cf6:	f7ff ff39 	bl	23b6c <next_sense_cond_call_handler>
    reg->LATCH = (1 << pin_number);
   23cfa:	2301      	movs	r3, #1
   23cfc:	40ab      	lsls	r3, r5
   23cfe:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
            while (latch[i])
   23d02:	ab02      	add	r3, sp, #8
   23d04:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   23d08:	f853 0c08 	ldr.w	r0, [r3, #-8]
   23d0c:	b300      	cbz	r0, 23d50 <port_event_handle+0x78>
                uint32_t pin = NRF_CTZ(latch[i]);
   23d0e:	fa90 f0a0 	rbit	r0, r0
   23d12:	fab0 f080 	clz	r0, r0
                pin += 32 * i;
   23d16:	eb00 1044 	add.w	r0, r0, r4, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   23d1a:	f100 0208 	add.w	r2, r0, #8
   23d1e:	4b16      	ldr	r3, [pc, #88]	; (23d78 <port_event_handle+0xa0>)
   23d20:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
   23d24:	f3c1 0182 	ubfx	r1, r1, #2, #3
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   23d28:	08c5      	lsrs	r5, r0, #3
    bit = BITMASK_RELBIT_GET(bit);
   23d2a:	f000 0607 	and.w	r6, r0, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   23d2e:	f81d 2005 	ldrb.w	r2, [sp, r5]
   23d32:	2301      	movs	r3, #1
   23d34:	40b3      	lsls	r3, r6
   23d36:	43db      	mvns	r3, r3
   23d38:	b25b      	sxtb	r3, r3
   23d3a:	4013      	ands	r3, r2
   23d3c:	f80d 3005 	strb.w	r3, [sp, r5]
    *p_pin = pin_number & 0x1F;
   23d40:	f000 051f 	and.w	r5, r0, #31
    return pin_number >> 5;
   23d44:	0943      	lsrs	r3, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   23d46:	2b01      	cmp	r3, #1
   23d48:	d0ce      	beq.n	23ce8 <port_event_handle+0x10>
        case 0: return NRF_P0;
   23d4a:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
   23d4e:	e7cc      	b.n	23cea <port_event_handle+0x12>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   23d50:	3401      	adds	r4, #1
   23d52:	2c01      	cmp	r4, #1
   23d54:	d9d5      	bls.n	23d02 <port_event_handle+0x2a>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   23d56:	4b09      	ldr	r3, [pc, #36]	; (23d7c <port_event_handle+0xa4>)
   23d58:	2200      	movs	r2, #0
   23d5a:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
   23d5e:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
        }

        /* All pins have been handled, clear PORT, check latch again in case
         * something came between deciding to exit and clearing PORT event. */
        nrf_gpiote_event_clear(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT);
    } while (latch_pending_read_and_check(latch));
   23d62:	4668      	mov	r0, sp
   23d64:	f008 fe19 	bl	2c99a <latch_pending_read_and_check>
   23d68:	b108      	cbz	r0, 23d6e <port_event_handle+0x96>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   23d6a:	2400      	movs	r4, #0
   23d6c:	e7f1      	b.n	23d52 <port_event_handle+0x7a>
}
   23d6e:	b002      	add	sp, #8
   23d70:	bd70      	pop	{r4, r5, r6, pc}
   23d72:	bf00      	nop
   23d74:	50000300 	.word	0x50000300
   23d78:	20000aac 	.word	0x20000aac
   23d7c:	40006000 	.word	0x40006000

00023d80 <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
   23d80:	b538      	push	{r3, r4, r5, lr}
   23d82:	4604      	mov	r4, r0
    while (mask)
   23d84:	e018      	b.n	23db8 <gpiote_evt_handle+0x38>
    {
        uint32_t ch = NRF_CTZ(mask);
   23d86:	fa94 f3a4 	rbit	r3, r4
   23d8a:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   23d8e:	2201      	movs	r2, #1
   23d90:	409a      	lsls	r2, r3
   23d92:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   23d96:	4a0a      	ldr	r2, [pc, #40]	; (23dc0 <gpiote_evt_handle+0x40>)
   23d98:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   23d9c:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   23da0:	f3c5 2505 	ubfx	r5, r5, #8, #6
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   23da4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   23da8:	f3c0 4001 	ubfx	r0, r0, #16, #2
   23dac:	f008 fdee 	bl	2c98c <gpiote_polarity_to_trigger>
   23db0:	4601      	mov	r1, r0
   23db2:	4628      	mov	r0, r5
   23db4:	f7ff fec4 	bl	23b40 <call_handler>
    while (mask)
   23db8:	2c00      	cmp	r4, #0
   23dba:	d1e4      	bne.n	23d86 <gpiote_evt_handle+0x6>
    }
}
   23dbc:	bd38      	pop	{r3, r4, r5, pc}
   23dbe:	bf00      	nop
   23dc0:	40006000 	.word	0x40006000

00023dc4 <nrfx_gpiote_input_configure>:
{
   23dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23dc8:	b084      	sub	sp, #16
   23dca:	4604      	mov	r4, r0
   23dcc:	4615      	mov	r5, r2
   23dce:	461e      	mov	r6, r3
    if (p_input_config)
   23dd0:	b309      	cbz	r1, 23e16 <nrfx_gpiote_input_configure+0x52>
   23dd2:	460f      	mov	r7, r1
        if (pin_is_task_output(pin))
   23dd4:	f008 fdc4 	bl	2c960 <pin_is_task_output>
   23dd8:	2800      	cmp	r0, #0
   23dda:	d13f      	bne.n	23e5c <nrfx_gpiote_input_configure+0x98>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   23ddc:	2300      	movs	r3, #0
   23dde:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   23de2:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   23de6:	9301      	str	r3, [sp, #4]
   23de8:	9300      	str	r3, [sp, #0]
   23dea:	463b      	mov	r3, r7
   23dec:	f10d 020f 	add.w	r2, sp, #15
   23df0:	f10d 010e 	add.w	r1, sp, #14
   23df4:	4620      	mov	r0, r4
   23df6:	f7ff fd8d 	bl	23914 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   23dfa:	4a38      	ldr	r2, [pc, #224]	; (23edc <nrfx_gpiote_input_configure+0x118>)
   23dfc:	f104 0108 	add.w	r1, r4, #8
   23e00:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   23e04:	f023 0302 	bic.w	r3, r3, #2
   23e08:	b29b      	uxth	r3, r3
   23e0a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   23e0e:	f043 0301 	orr.w	r3, r3, #1
   23e12:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
   23e16:	b1bd      	cbz	r5, 23e48 <nrfx_gpiote_input_configure+0x84>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   23e18:	782f      	ldrb	r7, [r5, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   23e1a:	f8d5 8004 	ldr.w	r8, [r5, #4]
        if (pin_is_output(pin))
   23e1e:	4620      	mov	r0, r4
   23e20:	f7ff fe16 	bl	23a50 <pin_is_output>
   23e24:	b1e0      	cbz	r0, 23e60 <nrfx_gpiote_input_configure+0x9c>
            if (use_evt)
   23e26:	f1b8 0f00 	cmp.w	r8, #0
   23e2a:	d151      	bne.n	23ed0 <nrfx_gpiote_input_configure+0x10c>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   23e2c:	4a2b      	ldr	r2, [pc, #172]	; (23edc <nrfx_gpiote_input_configure+0x118>)
   23e2e:	f104 0108 	add.w	r1, r4, #8
   23e32:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   23e36:	f023 031c 	bic.w	r3, r3, #28
   23e3a:	b29b      	uxth	r3, r3
   23e3c:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   23e40:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
   23e44:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
   23e48:	2e00      	cmp	r6, #0
   23e4a:	d045      	beq.n	23ed8 <nrfx_gpiote_input_configure+0x114>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   23e4c:	6872      	ldr	r2, [r6, #4]
   23e4e:	6831      	ldr	r1, [r6, #0]
   23e50:	4620      	mov	r0, r4
   23e52:	f7ff ff0b 	bl	23c6c <pin_handler_set>
}
   23e56:	b004      	add	sp, #16
   23e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return NRFX_ERROR_INVALID_PARAM;
   23e5c:	4820      	ldr	r0, [pc, #128]	; (23ee0 <nrfx_gpiote_input_configure+0x11c>)
   23e5e:	e7fa      	b.n	23e56 <nrfx_gpiote_input_configure+0x92>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   23e60:	4a1e      	ldr	r2, [pc, #120]	; (23edc <nrfx_gpiote_input_configure+0x118>)
   23e62:	f104 0108 	add.w	r1, r4, #8
   23e66:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   23e6a:	f023 0320 	bic.w	r3, r3, #32
   23e6e:	04db      	lsls	r3, r3, #19
   23e70:	0cdb      	lsrs	r3, r3, #19
   23e72:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            if (use_evt)
   23e76:	f1b8 0f00 	cmp.w	r8, #0
   23e7a:	d0d7      	beq.n	23e2c <nrfx_gpiote_input_configure+0x68>
                if (!edge)
   23e7c:	2f03      	cmp	r7, #3
   23e7e:	d829      	bhi.n	23ed4 <nrfx_gpiote_input_configure+0x110>
                uint8_t ch = *p_trigger_config->p_in_channel;
   23e80:	686b      	ldr	r3, [r5, #4]
   23e82:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   23e84:	b937      	cbnz	r7, 23e94 <nrfx_gpiote_input_configure+0xd0>
    p_reg->CONFIG[idx] = 0;
   23e86:	f505 75a2 	add.w	r5, r5, #324	; 0x144
   23e8a:	4b16      	ldr	r3, [pc, #88]	; (23ee4 <nrfx_gpiote_input_configure+0x120>)
   23e8c:	2200      	movs	r2, #0
   23e8e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
   23e92:	e7cb      	b.n	23e2c <nrfx_gpiote_input_configure+0x68>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
   23e94:	4638      	mov	r0, r7
   23e96:	f008 fd7a 	bl	2c98e <gpiote_trigger_to_polarity>
   23e9a:	4603      	mov	r3, r0
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   23e9c:	4811      	ldr	r0, [pc, #68]	; (23ee4 <nrfx_gpiote_input_configure+0x120>)
   23e9e:	f505 71a2 	add.w	r1, r5, #324	; 0x144
   23ea2:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
   23ea6:	f022 0203 	bic.w	r2, r2, #3
   23eaa:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
                    nrf_gpiote_event_configure(NRF_GPIOTE, ch, pin, polarity);
   23eae:	4622      	mov	r2, r4
   23eb0:	4629      	mov	r1, r5
   23eb2:	f008 fd0d 	bl	2c8d0 <nrf_gpiote_event_configure>
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   23eb6:	4a09      	ldr	r2, [pc, #36]	; (23edc <nrfx_gpiote_input_configure+0x118>)
   23eb8:	f104 0108 	add.w	r1, r4, #8
   23ebc:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   23ec0:	036d      	lsls	r5, r5, #13
   23ec2:	b2ad      	uxth	r5, r5
   23ec4:	432b      	orrs	r3, r5
   23ec6:	f043 0320 	orr.w	r3, r3, #32
   23eca:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
   23ece:	e7ad      	b.n	23e2c <nrfx_gpiote_input_configure+0x68>
                return NRFX_ERROR_INVALID_PARAM;
   23ed0:	4803      	ldr	r0, [pc, #12]	; (23ee0 <nrfx_gpiote_input_configure+0x11c>)
   23ed2:	e7c0      	b.n	23e56 <nrfx_gpiote_input_configure+0x92>
                    return NRFX_ERROR_INVALID_PARAM;
   23ed4:	4802      	ldr	r0, [pc, #8]	; (23ee0 <nrfx_gpiote_input_configure+0x11c>)
   23ed6:	e7be      	b.n	23e56 <nrfx_gpiote_input_configure+0x92>
        err = NRFX_SUCCESS;
   23ed8:	4803      	ldr	r0, [pc, #12]	; (23ee8 <nrfx_gpiote_input_configure+0x124>)
   23eda:	e7bc      	b.n	23e56 <nrfx_gpiote_input_configure+0x92>
   23edc:	20000aac 	.word	0x20000aac
   23ee0:	0bad0004 	.word	0x0bad0004
   23ee4:	40006000 	.word	0x40006000
   23ee8:	0bad0000 	.word	0x0bad0000

00023eec <nrfx_gpiote_output_configure>:
{
   23eec:	b570      	push	{r4, r5, r6, lr}
   23eee:	b084      	sub	sp, #16
   23ef0:	4604      	mov	r4, r0
   23ef2:	4615      	mov	r5, r2
    if (p_config)
   23ef4:	b329      	cbz	r1, 23f42 <nrfx_gpiote_output_configure+0x56>
   23ef6:	460e      	mov	r6, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   23ef8:	f008 fd41 	bl	2c97e <pin_is_input>
   23efc:	b120      	cbz	r0, 23f08 <nrfx_gpiote_output_configure+0x1c>
   23efe:	4620      	mov	r0, r4
   23f00:	f7ff fd90 	bl	23a24 <pin_in_use_by_te>
   23f04:	2800      	cmp	r0, #0
   23f06:	d138      	bne.n	23f7a <nrfx_gpiote_output_configure+0x8e>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   23f08:	4620      	mov	r0, r4
   23f0a:	f7ff fd95 	bl	23a38 <pin_has_trigger>
   23f0e:	b110      	cbz	r0, 23f16 <nrfx_gpiote_output_configure+0x2a>
   23f10:	7873      	ldrb	r3, [r6, #1]
   23f12:	2b01      	cmp	r3, #1
   23f14:	d031      	beq.n	23f7a <nrfx_gpiote_output_configure+0x8e>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   23f16:	2301      	movs	r3, #1
   23f18:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   23f1c:	2300      	movs	r3, #0
   23f1e:	9301      	str	r3, [sp, #4]
   23f20:	9600      	str	r6, [sp, #0]
   23f22:	1cb3      	adds	r3, r6, #2
   23f24:	1c72      	adds	r2, r6, #1
   23f26:	f10d 010f 	add.w	r1, sp, #15
   23f2a:	4620      	mov	r0, r4
   23f2c:	f7ff fcf2 	bl	23914 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   23f30:	4a1f      	ldr	r2, [pc, #124]	; (23fb0 <nrfx_gpiote_output_configure+0xc4>)
   23f32:	f104 0108 	add.w	r1, r4, #8
   23f36:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   23f3a:	f043 0303 	orr.w	r3, r3, #3
   23f3e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
   23f42:	b385      	cbz	r5, 23fa6 <nrfx_gpiote_output_configure+0xba>
        if (pin_is_input(pin))
   23f44:	4620      	mov	r0, r4
   23f46:	f008 fd1a 	bl	2c97e <pin_is_input>
   23f4a:	bb70      	cbnz	r0, 23faa <nrfx_gpiote_output_configure+0xbe>
        uint32_t ch = p_task_config->task_ch;
   23f4c:	782e      	ldrb	r6, [r5, #0]
    p_reg->CONFIG[idx] = 0;
   23f4e:	f506 72a2 	add.w	r2, r6, #324	; 0x144
   23f52:	4b18      	ldr	r3, [pc, #96]	; (23fb4 <nrfx_gpiote_output_configure+0xc8>)
   23f54:	2100      	movs	r1, #0
   23f56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   23f5a:	4a15      	ldr	r2, [pc, #84]	; (23fb0 <nrfx_gpiote_output_configure+0xc4>)
   23f5c:	f104 0108 	add.w	r1, r4, #8
   23f60:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   23f64:	f023 0320 	bic.w	r3, r3, #32
   23f68:	04db      	lsls	r3, r3, #19
   23f6a:	0cdb      	lsrs	r3, r3, #19
   23f6c:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   23f70:	786b      	ldrb	r3, [r5, #1]
   23f72:	b923      	cbnz	r3, 23f7e <nrfx_gpiote_output_configure+0x92>
    return NRFX_SUCCESS;
   23f74:	4810      	ldr	r0, [pc, #64]	; (23fb8 <nrfx_gpiote_output_configure+0xcc>)
}
   23f76:	b004      	add	sp, #16
   23f78:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_INVALID_PARAM;
   23f7a:	4810      	ldr	r0, [pc, #64]	; (23fbc <nrfx_gpiote_output_configure+0xd0>)
   23f7c:	e7fb      	b.n	23f76 <nrfx_gpiote_output_configure+0x8a>
                                      p_task_config->init_val);
   23f7e:	78aa      	ldrb	r2, [r5, #2]
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   23f80:	9200      	str	r2, [sp, #0]
   23f82:	4622      	mov	r2, r4
   23f84:	4631      	mov	r1, r6
   23f86:	480b      	ldr	r0, [pc, #44]	; (23fb4 <nrfx_gpiote_output_configure+0xc8>)
   23f88:	f008 fcbb 	bl	2c902 <nrf_gpiote_task_configure>
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   23f8c:	4a08      	ldr	r2, [pc, #32]	; (23fb0 <nrfx_gpiote_output_configure+0xc4>)
   23f8e:	3408      	adds	r4, #8
   23f90:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
   23f94:	0376      	lsls	r6, r6, #13
   23f96:	b2b6      	uxth	r6, r6
   23f98:	4333      	orrs	r3, r6
   23f9a:	f043 0320 	orr.w	r3, r3, #32
   23f9e:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    return NRFX_SUCCESS;
   23fa2:	4805      	ldr	r0, [pc, #20]	; (23fb8 <nrfx_gpiote_output_configure+0xcc>)
   23fa4:	e7e7      	b.n	23f76 <nrfx_gpiote_output_configure+0x8a>
   23fa6:	4804      	ldr	r0, [pc, #16]	; (23fb8 <nrfx_gpiote_output_configure+0xcc>)
   23fa8:	e7e5      	b.n	23f76 <nrfx_gpiote_output_configure+0x8a>
            return NRFX_ERROR_INVALID_PARAM;
   23faa:	4804      	ldr	r0, [pc, #16]	; (23fbc <nrfx_gpiote_output_configure+0xd0>)
   23fac:	e7e3      	b.n	23f76 <nrfx_gpiote_output_configure+0x8a>
   23fae:	bf00      	nop
   23fb0:	20000aac 	.word	0x20000aac
   23fb4:	40006000 	.word	0x40006000
   23fb8:	0bad0000 	.word	0x0bad0000
   23fbc:	0bad0004 	.word	0x0bad0004

00023fc0 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   23fc0:	4b01      	ldr	r3, [pc, #4]	; (23fc8 <nrfx_gpiote_global_callback_set+0x8>)
   23fc2:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
   23fc4:	60d9      	str	r1, [r3, #12]
}
   23fc6:	4770      	bx	lr
   23fc8:	20000aac 	.word	0x20000aac

00023fcc <nrfx_gpiote_channel_get>:
{
   23fcc:	b538      	push	{r3, r4, r5, lr}
   23fce:	4604      	mov	r4, r0
   23fd0:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin))
   23fd2:	f7ff fd27 	bl	23a24 <pin_in_use_by_te>
   23fd6:	b140      	cbz	r0, 23fea <nrfx_gpiote_channel_get+0x1e>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   23fd8:	f104 0008 	add.w	r0, r4, #8
   23fdc:	4b04      	ldr	r3, [pc, #16]	; (23ff0 <nrfx_gpiote_channel_get+0x24>)
   23fde:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
   23fe2:	0b5b      	lsrs	r3, r3, #13
   23fe4:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
   23fe6:	4803      	ldr	r0, [pc, #12]	; (23ff4 <nrfx_gpiote_channel_get+0x28>)
}
   23fe8:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
   23fea:	4803      	ldr	r0, [pc, #12]	; (23ff8 <nrfx_gpiote_channel_get+0x2c>)
   23fec:	e7fc      	b.n	23fe8 <nrfx_gpiote_channel_get+0x1c>
   23fee:	bf00      	nop
   23ff0:	20000aac 	.word	0x20000aac
   23ff4:	0bad0000 	.word	0x0bad0000
   23ff8:	0bad0004 	.word	0x0bad0004

00023ffc <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   23ffc:	4b0f      	ldr	r3, [pc, #60]	; (2403c <nrfx_gpiote_init+0x40>)
   23ffe:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
   24002:	b10b      	cbz	r3, 24008 <nrfx_gpiote_init+0xc>
        return err_code;
   24004:	480e      	ldr	r0, [pc, #56]	; (24040 <nrfx_gpiote_init+0x44>)
}
   24006:	4770      	bx	lr
{
   24008:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   2400a:	4c0e      	ldr	r4, [pc, #56]	; (24044 <nrfx_gpiote_init+0x48>)
   2400c:	2254      	movs	r2, #84	; 0x54
   2400e:	2100      	movs	r1, #0
   24010:	4620      	mov	r0, r4
   24012:	f004 fb65 	bl	286e0 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   24016:	2006      	movs	r0, #6
   24018:	f004 fa5f 	bl	284da <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   2401c:	4b0a      	ldr	r3, [pc, #40]	; (24048 <nrfx_gpiote_init+0x4c>)
   2401e:	2200      	movs	r2, #0
   24020:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
   24024:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   24028:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   2402c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   24030:	2301      	movs	r3, #1
   24032:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   24036:	65a3      	str	r3, [r4, #88]	; 0x58
    return err_code;
   24038:	4804      	ldr	r0, [pc, #16]	; (2404c <nrfx_gpiote_init+0x50>)
}
   2403a:	bd10      	pop	{r4, pc}
   2403c:	20000aac 	.word	0x20000aac
   24040:	0bad0005 	.word	0x0bad0005
   24044:	20000abc 	.word	0x20000abc
   24048:	40006000 	.word	0x40006000
   2404c:	0bad0000 	.word	0x0bad0000

00024050 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   24050:	4b03      	ldr	r3, [pc, #12]	; (24060 <nrfx_gpiote_is_init+0x10>)
   24052:	f893 006c 	ldrb.w	r0, [r3, #108]	; 0x6c
}
   24056:	3800      	subs	r0, #0
   24058:	bf18      	it	ne
   2405a:	2001      	movne	r0, #1
   2405c:	4770      	bx	lr
   2405e:	bf00      	nop
   24060:	20000aac 	.word	0x20000aac

00024064 <nrfx_gpiote_channel_free>:
{
   24064:	b508      	push	{r3, lr}
   24066:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   24068:	4801      	ldr	r0, [pc, #4]	; (24070 <nrfx_gpiote_channel_free+0xc>)
   2406a:	f7ff fc31 	bl	238d0 <nrfx_flag32_free>
}
   2406e:	bd08      	pop	{r3, pc}
   24070:	20000b10 	.word	0x20000b10

00024074 <nrfx_gpiote_channel_alloc>:
{
   24074:	b508      	push	{r3, lr}
   24076:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   24078:	4801      	ldr	r0, [pc, #4]	; (24080 <nrfx_gpiote_channel_alloc+0xc>)
   2407a:	f7ff fc01 	bl	23880 <nrfx_flag32_alloc>
}
   2407e:	bd08      	pop	{r3, pc}
   24080:	20000b10 	.word	0x20000b10

00024084 <nrfx_gpiote_trigger_enable>:
{
   24084:	b538      	push	{r3, r4, r5, lr}
   24086:	4604      	mov	r4, r0
   24088:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   2408a:	f7ff fccb 	bl	23a24 <pin_in_use_by_te>
   2408e:	b300      	cbz	r0, 240d2 <nrfx_gpiote_trigger_enable+0x4e>
   24090:	4620      	mov	r0, r4
   24092:	f008 fc74 	bl	2c97e <pin_is_input>
   24096:	b1e0      	cbz	r0, 240d2 <nrfx_gpiote_trigger_enable+0x4e>
        uint8_t ch = pin_te_get(pin);
   24098:	4620      	mov	r0, r4
   2409a:	f7ff fce3 	bl	23a64 <pin_te_get>
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   2409e:	0083      	lsls	r3, r0, #2
   240a0:	f503 7380 	add.w	r3, r3, #256	; 0x100
    return ((uint32_t)p_reg + event);
   240a4:	b29b      	uxth	r3, r3
   240a6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   240aa:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   240ae:	2200      	movs	r2, #0
   240b0:	601a      	str	r2, [r3, #0]
   240b2:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   240b4:	4a0b      	ldr	r2, [pc, #44]	; (240e4 <nrfx_gpiote_trigger_enable+0x60>)
   240b6:	f500 71a2 	add.w	r1, r0, #324	; 0x144
   240ba:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   240be:	f043 0301 	orr.w	r3, r3, #1
   240c2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
   240c6:	b15d      	cbz	r5, 240e0 <nrfx_gpiote_trigger_enable+0x5c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   240c8:	2301      	movs	r3, #1
   240ca:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
   240cc:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   240d0:	e006      	b.n	240e0 <nrfx_gpiote_trigger_enable+0x5c>
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   240d2:	4620      	mov	r0, r4
   240d4:	f7ff fcfe 	bl	23ad4 <get_initial_sense>
   240d8:	4601      	mov	r1, r0
   240da:	4620      	mov	r0, r4
   240dc:	f008 fc30 	bl	2c940 <nrf_gpio_cfg_sense_set>
}
   240e0:	bd38      	pop	{r3, r4, r5, pc}
   240e2:	bf00      	nop
   240e4:	40006000 	.word	0x40006000

000240e8 <nrfx_gpiote_trigger_disable>:
{
   240e8:	b510      	push	{r4, lr}
   240ea:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   240ec:	f7ff fc9a 	bl	23a24 <pin_in_use_by_te>
   240f0:	b1a0      	cbz	r0, 2411c <nrfx_gpiote_trigger_disable+0x34>
   240f2:	4620      	mov	r0, r4
   240f4:	f008 fc43 	bl	2c97e <pin_is_input>
   240f8:	b180      	cbz	r0, 2411c <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
   240fa:	4620      	mov	r0, r4
   240fc:	f7ff fcb2 	bl	23a64 <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   24100:	2201      	movs	r2, #1
   24102:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
   24104:	4b08      	ldr	r3, [pc, #32]	; (24128 <nrfx_gpiote_trigger_disable+0x40>)
   24106:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   2410a:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   2410e:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
   24112:	f022 0203 	bic.w	r2, r2, #3
   24116:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
   2411a:	e003      	b.n	24124 <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   2411c:	2100      	movs	r1, #0
   2411e:	4620      	mov	r0, r4
   24120:	f008 fc0e 	bl	2c940 <nrf_gpio_cfg_sense_set>
}
   24124:	bd10      	pop	{r4, pc}
   24126:	bf00      	nop
   24128:	40006000 	.word	0x40006000

0002412c <nrfx_gpiote_pin_uninit>:
{
   2412c:	b510      	push	{r4, lr}
   2412e:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   24130:	f7ff fc6e 	bl	23a10 <pin_in_use>
   24134:	b908      	cbnz	r0, 2413a <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
   24136:	480c      	ldr	r0, [pc, #48]	; (24168 <nrfx_gpiote_pin_uninit+0x3c>)
}
   24138:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_disable(pin);
   2413a:	4620      	mov	r0, r4
   2413c:	f7ff ffd4 	bl	240e8 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   24140:	4620      	mov	r0, r4
   24142:	f7ff fd77 	bl	23c34 <pin_handler_trigger_uninit>
    *p_pin = pin_number & 0x1F;
   24146:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
   2414a:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2414c:	2c01      	cmp	r4, #1
   2414e:	d008      	beq.n	24162 <nrfx_gpiote_pin_uninit+0x36>
        case 0: return NRF_P0;
   24150:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   24154:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   24158:	2102      	movs	r1, #2
   2415a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    return NRFX_SUCCESS;
   2415e:	4803      	ldr	r0, [pc, #12]	; (2416c <nrfx_gpiote_pin_uninit+0x40>)
   24160:	e7ea      	b.n	24138 <nrfx_gpiote_pin_uninit+0xc>
        case 1: return NRF_P1;
   24162:	4a03      	ldr	r2, [pc, #12]	; (24170 <nrfx_gpiote_pin_uninit+0x44>)
   24164:	e7f6      	b.n	24154 <nrfx_gpiote_pin_uninit+0x28>
   24166:	bf00      	nop
   24168:	0bad0004 	.word	0x0bad0004
   2416c:	0bad0000 	.word	0x0bad0000
   24170:	50000300 	.word	0x50000300

00024174 <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
   24174:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   24176:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
   24178:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   2417c:	2100      	movs	r1, #0
    uint32_t status = 0;
   2417e:	460c      	mov	r4, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   24180:	e003      	b.n	2418a <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
   24182:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
   24184:	3304      	adds	r3, #4
   24186:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   24188:	3101      	adds	r1, #1
   2418a:	2907      	cmp	r1, #7
   2418c:	d814      	bhi.n	241b8 <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2418e:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   24192:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
   24196:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   24198:	2a00      	cmp	r2, #0
   2419a:	d0f2      	beq.n	24182 <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
   2419c:	4a0c      	ldr	r2, [pc, #48]	; (241d0 <nrfx_gpiote_irq_handler+0x5c>)
   2419e:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   241a2:	4210      	tst	r0, r2
   241a4:	d0ed      	beq.n	24182 <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
   241a6:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   241aa:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   241ae:	2500      	movs	r5, #0
   241b0:	6015      	str	r5, [r2, #0]
   241b2:	6812      	ldr	r2, [r2, #0]
            status |= mask;
   241b4:	4304      	orrs	r4, r0
   241b6:	e7e4      	b.n	24182 <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   241b8:	4b05      	ldr	r3, [pc, #20]	; (241d0 <nrfx_gpiote_irq_handler+0x5c>)
   241ba:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   241be:	b91b      	cbnz	r3, 241c8 <nrfx_gpiote_irq_handler+0x54>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
   241c0:	4620      	mov	r0, r4
   241c2:	f7ff fddd 	bl	23d80 <gpiote_evt_handle>
}
   241c6:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
   241c8:	f7ff fd86 	bl	23cd8 <port_event_handle>
   241cc:	e7f8      	b.n	241c0 <nrfx_gpiote_irq_handler+0x4c>
   241ce:	bf00      	nop
   241d0:	40006000 	.word	0x40006000

000241d4 <nrf_gpio_pin_write>:
    if (value == 0)
   241d4:	b969      	cbnz	r1, 241f2 <nrf_gpio_pin_write+0x1e>
    *p_pin = pin_number & 0x1F;
   241d6:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
   241da:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   241dc:	2801      	cmp	r0, #1
   241de:	d006      	beq.n	241ee <nrf_gpio_pin_write+0x1a>
        case 0: return NRF_P0;
   241e0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   241e4:	2301      	movs	r3, #1
   241e6:	408b      	lsls	r3, r1
    p_reg->OUTCLR = clr_mask;
   241e8:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   241ec:	4770      	bx	lr
        case 1: return NRF_P1;
   241ee:	4a08      	ldr	r2, [pc, #32]	; (24210 <nrf_gpio_pin_write+0x3c>)
   241f0:	e7f8      	b.n	241e4 <nrf_gpio_pin_write+0x10>
    *p_pin = pin_number & 0x1F;
   241f2:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
   241f6:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   241f8:	2801      	cmp	r0, #1
   241fa:	d006      	beq.n	2420a <nrf_gpio_pin_write+0x36>
        case 0: return NRF_P0;
   241fc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   24200:	2301      	movs	r3, #1
   24202:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
   24204:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
}
   24208:	4770      	bx	lr
        case 1: return NRF_P1;
   2420a:	4a01      	ldr	r2, [pc, #4]	; (24210 <nrf_gpio_pin_write+0x3c>)
   2420c:	e7f8      	b.n	24200 <nrf_gpio_pin_write+0x2c>
   2420e:	bf00      	nop
   24210:	50000300 	.word	0x50000300

00024214 <configure_pins>:
static spi_control_block_t m_cb[NRFX_SPI_ENABLED_COUNT];


static void configure_pins(NRF_SPI_Type *            p_spi,
                           nrfx_spi_config_t const * p_config)
{
   24214:	b538      	push	{r3, r4, r5, lr}
   24216:	4605      	mov	r5, r0
   24218:	460c      	mov	r4, r1
    if (!p_config->skip_gpio_cfg)
   2421a:	7bcb      	ldrb	r3, [r1, #15]
   2421c:	b183      	cbz	r3, 24240 <configure_pins+0x2c>
            nrf_gpio_pin_write(p_config->ss_pin, 1);
            nrf_gpio_cfg_output(p_config->ss_pin);
        }
    }

    if (!p_config->skip_psel_cfg)
   2421e:	7c23      	ldrb	r3, [r4, #16]
   24220:	b96b      	cbnz	r3, 2423e <configure_pins+0x2a>
    {
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
   24222:	7863      	ldrb	r3, [r4, #1]
                            ? p_config->mosi_pin
                            : NRF_SPI_PIN_NOT_CONNECTED;
   24224:	2bff      	cmp	r3, #255	; 0xff
   24226:	d073      	beq.n	24310 <configure_pins+0xfc>
   24228:	461a      	mov	r2, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
   2422a:	78a3      	ldrb	r3, [r4, #2]
                            ? p_config->miso_pin
                            : NRF_SPI_PIN_NOT_CONNECTED;
   2422c:	2bff      	cmp	r3, #255	; 0xff
   2422e:	d072      	beq.n	24316 <configure_pins+0x102>

        nrf_spi_pins_set(p_spi, p_config->sck_pin, mosi_pin, miso_pin);
   24230:	7821      	ldrb	r1, [r4, #0]
                                        uint32_t       sck_pin,
                                        uint32_t       mosi_pin,
                                        uint32_t       miso_pin)
{
#if defined(SPI_PSEL_SCK_CONNECT_Pos)
    p_reg->PSEL.SCK = sck_pin;
   24232:	f8c5 1508 	str.w	r1, [r5, #1288]	; 0x508
#else
    p_reg->PSELSCK  = sck_pin;
#endif

#if defined(SPI_PSEL_MOSI_CONNECT_Pos)
    p_reg->PSEL.MOSI = mosi_pin;
   24236:	f8c5 250c 	str.w	r2, [r5, #1292]	; 0x50c
#else
    p_reg->PSELMOSI = mosi_pin;
#endif

#if defined(SPI_PSEL_MISO_CONNECT_Pos)
    p_reg->PSEL.MISO = miso_pin;
   2423a:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
    }
}
   2423e:	bd38      	pop	{r3, r4, r5, pc}
                           p_config->mode <= NRF_SPI_MODE_1 ? 0 : 1);
   24240:	7b09      	ldrb	r1, [r1, #12]
        nrf_gpio_pin_write(p_config->sck_pin,
   24242:	2901      	cmp	r1, #1
   24244:	bf94      	ite	ls
   24246:	2100      	movls	r1, #0
   24248:	2101      	movhi	r1, #1
   2424a:	7820      	ldrb	r0, [r4, #0]
   2424c:	f7ff ffc2 	bl	241d4 <nrf_gpio_pin_write>
        nrf_gpio_cfg(p_config->sck_pin,
   24250:	7823      	ldrb	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   24252:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   24256:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   24258:	2b01      	cmp	r3, #1
   2425a:	d04d      	beq.n	242f8 <configure_pins+0xe4>
        case 0: return NRF_P0;
   2425c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   24260:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   24264:	2201      	movs	r2, #1
   24266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
   2426a:	7863      	ldrb	r3, [r4, #1]
   2426c:	2bff      	cmp	r3, #255	; 0xff
   2426e:	d017      	beq.n	242a0 <configure_pins+0x8c>
    *p_pin = pin_number & 0x1F;
   24270:	f003 011f 	and.w	r1, r3, #31
    return pin_number >> 5;
   24274:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   24276:	4293      	cmp	r3, r2
   24278:	d040      	beq.n	242fc <configure_pins+0xe8>
        case 0: return NRF_P0;
   2427a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   2427e:	2301      	movs	r3, #1
   24280:	408b      	lsls	r3, r1
    p_reg->OUTCLR = clr_mask;
   24282:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
            nrf_gpio_cfg_output(p_config->mosi_pin);
   24286:	7863      	ldrb	r3, [r4, #1]
    *p_pin = pin_number & 0x1F;
   24288:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   2428c:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2428e:	2b01      	cmp	r3, #1
   24290:	d036      	beq.n	24300 <configure_pins+0xec>
        case 0: return NRF_P0;
   24292:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   24296:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   2429a:	2203      	movs	r2, #3
   2429c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
   242a0:	78a3      	ldrb	r3, [r4, #2]
   242a2:	2bff      	cmp	r3, #255	; 0xff
   242a4:	d00c      	beq.n	242c0 <configure_pins+0xac>
            nrf_gpio_cfg_input(p_config->miso_pin, p_config->miso_pull);
   242a6:	7ba1      	ldrb	r1, [r4, #14]
    *p_pin = pin_number & 0x1F;
   242a8:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   242ac:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   242ae:	2b01      	cmp	r3, #1
   242b0:	d028      	beq.n	24304 <configure_pins+0xf0>
        case 0: return NRF_P0;
   242b2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   242b6:	0089      	lsls	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
   242b8:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   242bc:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
        if (p_config->ss_pin != NRFX_SPI_PIN_NOT_USED)
   242c0:	78e3      	ldrb	r3, [r4, #3]
   242c2:	2bff      	cmp	r3, #255	; 0xff
   242c4:	d0ab      	beq.n	2421e <configure_pins+0xa>
    *p_pin = pin_number & 0x1F;
   242c6:	f003 011f 	and.w	r1, r3, #31
    return pin_number >> 5;
   242ca:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   242cc:	2b01      	cmp	r3, #1
   242ce:	d01b      	beq.n	24308 <configure_pins+0xf4>
        case 0: return NRF_P0;
   242d0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   242d4:	2301      	movs	r3, #1
   242d6:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
   242d8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
            nrf_gpio_cfg_output(p_config->ss_pin);
   242dc:	78e3      	ldrb	r3, [r4, #3]
    *p_pin = pin_number & 0x1F;
   242de:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   242e2:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   242e4:	2b01      	cmp	r3, #1
   242e6:	d011      	beq.n	2430c <configure_pins+0xf8>
        case 0: return NRF_P0;
   242e8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   242ec:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   242f0:	2203      	movs	r2, #3
   242f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   242f6:	e792      	b.n	2421e <configure_pins+0xa>
        case 1: return NRF_P1;
   242f8:	4908      	ldr	r1, [pc, #32]	; (2431c <configure_pins+0x108>)
   242fa:	e7b1      	b.n	24260 <configure_pins+0x4c>
   242fc:	4a07      	ldr	r2, [pc, #28]	; (2431c <configure_pins+0x108>)
   242fe:	e7be      	b.n	2427e <configure_pins+0x6a>
   24300:	4906      	ldr	r1, [pc, #24]	; (2431c <configure_pins+0x108>)
   24302:	e7c8      	b.n	24296 <configure_pins+0x82>
   24304:	4805      	ldr	r0, [pc, #20]	; (2431c <configure_pins+0x108>)
   24306:	e7d6      	b.n	242b6 <configure_pins+0xa2>
   24308:	4a04      	ldr	r2, [pc, #16]	; (2431c <configure_pins+0x108>)
   2430a:	e7e3      	b.n	242d4 <configure_pins+0xc0>
   2430c:	4903      	ldr	r1, [pc, #12]	; (2431c <configure_pins+0x108>)
   2430e:	e7ed      	b.n	242ec <configure_pins+0xd8>
                            : NRF_SPI_PIN_NOT_CONNECTED;
   24310:	f04f 32ff 	mov.w	r2, #4294967295
   24314:	e789      	b.n	2422a <configure_pins+0x16>
                            : NRF_SPI_PIN_NOT_CONNECTED;
   24316:	f04f 33ff 	mov.w	r3, #4294967295
   2431a:	e789      	b.n	24230 <configure_pins+0x1c>
   2431c:	50000300 	.word	0x50000300

00024320 <finish_transfer>:

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
}

static void finish_transfer(spi_control_block_t * p_cb)
{
   24320:	b508      	push	{r3, lr}
   24322:	4603      	mov	r3, r0
    // If Slave Select signal is used, this is the time to deactivate it.
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   24324:	7f82      	ldrb	r2, [r0, #30]
   24326:	2aff      	cmp	r2, #255	; 0xff
   24328:	d00a      	beq.n	24340 <finish_transfer+0x20>
    *p_pin = pin_number & 0x1F;
   2432a:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   2432e:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   24330:	2a01      	cmp	r2, #1
   24332:	d00e      	beq.n	24352 <finish_transfer+0x32>
        case 0: return NRF_P0;
   24334:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   24338:	2201      	movs	r2, #1
   2433a:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
   2433c:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
        nrf_gpio_pin_write(p_cb->ss_pin, 1);
    }

    // By clearing this flag before calling the handler we allow subsequent
    // transfers to be started directly from the handler function.
    p_cb->transfer_in_progress = false;
   24340:	2200      	movs	r2, #0
   24342:	775a      	strb	r2, [r3, #29]

    p_cb->evt.type = NRFX_SPI_EVENT_DONE;
   24344:	721a      	strb	r2, [r3, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   24346:	4618      	mov	r0, r3
   24348:	f850 2b08 	ldr.w	r2, [r0], #8
   2434c:	6859      	ldr	r1, [r3, #4]
   2434e:	4790      	blx	r2
}
   24350:	bd08      	pop	{r3, pc}
        case 1: return NRF_P1;
   24352:	4801      	ldr	r0, [pc, #4]	; (24358 <finish_transfer+0x38>)
   24354:	e7f0      	b.n	24338 <finish_transfer+0x18>
   24356:	bf00      	nop
   24358:	50000300 	.word	0x50000300

0002435c <spi_xfer>:
}

static void spi_xfer(NRF_SPI_Type               * p_spi,
                     spi_control_block_t        * p_cb,
                     nrfx_spi_xfer_desc_t const * p_xfer_desc)
{
   2435c:	b538      	push	{r3, r4, r5, lr}
   2435e:	4604      	mov	r4, r0
   24360:	460d      	mov	r5, r1
    p_cb->bytes_transferred = 0;
   24362:	2300      	movs	r3, #0
   24364:	620b      	str	r3, [r1, #32]
    p_reg->INTENCLR = mask;
   24366:	2104      	movs	r1, #4
   24368:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2436c:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   24370:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108

    // Start the transfer by writing some byte to the TXD register;
    // if TX buffer is not empty, take the first byte from this buffer,
    // otherwise - use over-run character.
    nrf_spi_txd_set(p_spi,
        (p_xfer_desc->tx_length > 0 ? p_xfer_desc->p_tx_buffer[0] : p_cb->orc));
   24374:	6853      	ldr	r3, [r2, #4]
    nrf_spi_txd_set(p_spi,
   24376:	b183      	cbz	r3, 2439a <spi_xfer+0x3e>
        (p_xfer_desc->tx_length > 0 ? p_xfer_desc->p_tx_buffer[0] : p_cb->orc));
   24378:	6813      	ldr	r3, [r2, #0]
    nrf_spi_txd_set(p_spi,
   2437a:	781b      	ldrb	r3, [r3, #0]
#endif
}

NRF_STATIC_INLINE void nrf_spi_txd_set(NRF_SPI_Type * p_reg, uint8_t data)
{
    p_reg->TXD = data;
   2437c:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c

    // TXD register is double buffered, so next byte to be transmitted can
    // be written immediately, if needed, i.e. if TX or RX transfer is to
    // be more that 1 byte long. Again - if there is something more in TX
    // buffer send it, otherwise use over-run character.
    if (p_xfer_desc->tx_length > 1)
   24380:	6853      	ldr	r3, [r2, #4]
   24382:	2b01      	cmp	r3, #1
   24384:	d90b      	bls.n	2439e <spi_xfer+0x42>
    {
        nrf_spi_txd_set(p_spi, p_xfer_desc->p_tx_buffer[1]);
   24386:	6813      	ldr	r3, [r2, #0]
   24388:	785b      	ldrb	r3, [r3, #1]
   2438a:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
    // For blocking mode (user handler not provided) wait here for READY
    // events (indicating that the byte from TXD register was transmitted
    // and a new incoming byte was moved to the RXD register) and continue
    // transaction until all requested bytes are transferred.
    // In non-blocking mode - IRQ service routine will do this stuff.
    if (p_cb->handler)
   2438e:	682b      	ldr	r3, [r5, #0]
   24390:	b163      	cbz	r3, 243ac <spi_xfer+0x50>
    p_reg->INTENSET = mask;
   24392:	2304      	movs	r3, #4
   24394:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
        {
            nrf_gpio_pin_write(p_cb->ss_pin, 1);
        }
    }
}
   24398:	bd38      	pop	{r3, r4, r5, pc}
    nrf_spi_txd_set(p_spi,
   2439a:	7feb      	ldrb	r3, [r5, #31]
   2439c:	e7ee      	b.n	2437c <spi_xfer+0x20>
    else if (p_xfer_desc->rx_length > 1)
   2439e:	68d3      	ldr	r3, [r2, #12]
   243a0:	2b01      	cmp	r3, #1
   243a2:	d9f4      	bls.n	2438e <spi_xfer+0x32>
        nrf_spi_txd_set(p_spi, p_cb->orc);
   243a4:	7feb      	ldrb	r3, [r5, #31]
    p_reg->TXD = data;
   243a6:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
}
   243aa:	e7f0      	b.n	2438e <spi_xfer+0x32>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   243ac:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
            while (!nrf_spi_event_check(p_spi, NRF_SPI_EVENT_READY)) {}
   243b0:	2b00      	cmp	r3, #0
   243b2:	d0fb      	beq.n	243ac <spi_xfer+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   243b4:	2300      	movs	r3, #0
   243b6:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   243ba:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
        } while (transfer_byte(p_spi, p_cb));
   243be:	4629      	mov	r1, r5
   243c0:	4620      	mov	r0, r4
   243c2:	f008 fb12 	bl	2c9ea <transfer_byte>
   243c6:	2800      	cmp	r0, #0
   243c8:	d1f0      	bne.n	243ac <spi_xfer+0x50>
        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   243ca:	7fab      	ldrb	r3, [r5, #30]
   243cc:	2bff      	cmp	r3, #255	; 0xff
   243ce:	d0e3      	beq.n	24398 <spi_xfer+0x3c>
    *p_pin = pin_number & 0x1F;
   243d0:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   243d4:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   243d6:	2b01      	cmp	r3, #1
   243d8:	d006      	beq.n	243e8 <spi_xfer+0x8c>
        case 0: return NRF_P0;
   243da:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   243de:	2301      	movs	r3, #1
   243e0:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   243e2:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
}
   243e6:	e7d7      	b.n	24398 <spi_xfer+0x3c>
        case 1: return NRF_P1;
   243e8:	4900      	ldr	r1, [pc, #0]	; (243ec <spi_xfer+0x90>)
   243ea:	e7f8      	b.n	243de <spi_xfer+0x82>
   243ec:	50000300 	.word	0x50000300

000243f0 <nrfx_spi_init>:
{
   243f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   243f4:	4606      	mov	r6, r0
   243f6:	460d      	mov	r5, r1
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   243f8:	7904      	ldrb	r4, [r0, #4]
    NRF_SPI_Type * p_spi = p_instance->p_reg;
   243fa:	6807      	ldr	r7, [r0, #0]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   243fc:	eb04 0084 	add.w	r0, r4, r4, lsl #2
   24400:	491d      	ldr	r1, [pc, #116]	; (24478 <nrfx_spi_init+0x88>)
   24402:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   24406:	7f09      	ldrb	r1, [r1, #28]
   24408:	b111      	cbz	r1, 24410 <nrfx_spi_init+0x20>
        return err_code;
   2440a:	481c      	ldr	r0, [pc, #112]	; (2447c <nrfx_spi_init+0x8c>)
}
   2440c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    p_cb->handler = handler;
   24410:	f8df 8064 	ldr.w	r8, [pc, #100]	; 24478 <nrfx_spi_init+0x88>
   24414:	ea4f 09c0 	mov.w	r9, r0, lsl #3
   24418:	eb08 01c0 	add.w	r1, r8, r0, lsl #3
   2441c:	f848 2009 	str.w	r2, [r8, r9]
    p_cb->p_context = p_context;
   24420:	604b      	str	r3, [r1, #4]
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
   24422:	7beb      	ldrb	r3, [r5, #15]
   24424:	f881 3025 	strb.w	r3, [r1, #37]	; 0x25
    p_cb->ss_pin = p_config->ss_pin;
   24428:	78eb      	ldrb	r3, [r5, #3]
   2442a:	778b      	strb	r3, [r1, #30]
    p_cb->orc = p_config->orc;
   2442c:	796b      	ldrb	r3, [r5, #5]
   2442e:	77cb      	strb	r3, [r1, #31]
    configure_pins(p_spi, p_config);
   24430:	4629      	mov	r1, r5
   24432:	4638      	mov	r0, r7
   24434:	f7ff feee 	bl	24214 <configure_pins>
    nrf_spi_frequency_set(p_spi, p_config->frequency);
   24438:	68ab      	ldr	r3, [r5, #8]
}

NRF_STATIC_INLINE void nrf_spi_frequency_set(NRF_SPI_Type *      p_reg,
                                             nrf_spi_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
   2443a:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
    nrf_spi_configure(p_spi, p_config->mode, p_config->bit_order);
   2443e:	7b6a      	ldrb	r2, [r5, #13]
   24440:	7b29      	ldrb	r1, [r5, #12]
   24442:	4638      	mov	r0, r7
   24444:	f008 fabc 	bl	2c9c0 <nrf_spi_configure>
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   24448:	2301      	movs	r3, #1
   2444a:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
    if (p_cb->handler)
   2444e:	f858 3009 	ldr.w	r3, [r8, r9]
   24452:	b123      	cbz	r3, 2445e <nrfx_spi_init+0x6e>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   24454:	6830      	ldr	r0, [r6, #0]
   24456:	f340 3007 	sbfx	r0, r0, #12, #8
   2445a:	f004 f83e 	bl	284da <arch_irq_enable>
    p_cb->transfer_in_progress = false;
   2445e:	4b06      	ldr	r3, [pc, #24]	; (24478 <nrfx_spi_init+0x88>)
   24460:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   24464:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   24468:	2100      	movs	r1, #0
   2446a:	7751      	strb	r1, [r2, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   2446c:	4613      	mov	r3, r2
   2446e:	2201      	movs	r2, #1
   24470:	771a      	strb	r2, [r3, #28]
    return err_code;
   24472:	4803      	ldr	r0, [pc, #12]	; (24480 <nrfx_spi_init+0x90>)
   24474:	e7ca      	b.n	2440c <nrfx_spi_init+0x1c>
   24476:	bf00      	nop
   24478:	20008ab8 	.word	0x20008ab8
   2447c:	0bad0005 	.word	0x0bad0005
   24480:	0bad0000 	.word	0x0bad0000

00024484 <nrfx_spi_uninit>:
{
   24484:	b538      	push	{r3, r4, r5, lr}
    spi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   24486:	7904      	ldrb	r4, [r0, #4]
    NRF_SPI_Type * p_spi = p_instance->p_reg;
   24488:	6805      	ldr	r5, [r0, #0]
    if (p_cb->handler)
   2448a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   2448e:	4b35      	ldr	r3, [pc, #212]	; (24564 <nrfx_spi_uninit+0xe0>)
   24490:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
   24494:	b133      	cbz	r3, 244a4 <nrfx_spi_uninit+0x20>
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
   24496:	f345 3007 	sbfx	r0, r5, #12, #8
   2449a:	f004 f823 	bl	284e4 <arch_irq_disable>
    p_reg->INTENCLR = mask;
   2449e:	2304      	movs	r3, #4
   244a0:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Disabled << SPI_ENABLE_ENABLE_Pos);
   244a4:	2300      	movs	r3, #0
   244a6:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
    if (!p_cb->skip_gpio_cfg)
   244aa:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   244ae:	4b2d      	ldr	r3, [pc, #180]	; (24564 <nrfx_spi_uninit+0xe0>)
   244b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   244b4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   244b8:	2b00      	cmp	r3, #0
   244ba:	d143      	bne.n	24544 <nrfx_spi_uninit+0xc0>
    return p_reg->PSEL.SCK;
   244bc:	f8d5 3508 	ldr.w	r3, [r5, #1288]	; 0x508
    *p_pin = pin_number & 0x1F;
   244c0:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   244c4:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   244c6:	2b01      	cmp	r3, #1
   244c8:	d044      	beq.n	24554 <nrfx_spi_uninit+0xd0>
        case 0: return NRF_P0;
   244ca:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   244ce:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   244d2:	2202      	movs	r2, #2
   244d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    return p_reg->PSEL.MISO;
   244d8:	f8d5 3510 	ldr.w	r3, [r5, #1296]	; 0x510
        if (miso_pin != NRF_SPI_PIN_NOT_CONNECTED)
   244dc:	f1b3 3fff 	cmp.w	r3, #4294967295
   244e0:	d00b      	beq.n	244fa <nrfx_spi_uninit+0x76>
    *p_pin = pin_number & 0x1F;
   244e2:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   244e6:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   244e8:	2b01      	cmp	r3, #1
   244ea:	d035      	beq.n	24558 <nrfx_spi_uninit+0xd4>
        case 0: return NRF_P0;
   244ec:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   244f0:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   244f4:	2202      	movs	r2, #2
   244f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    return p_reg->PSEL.MOSI;
   244fa:	f8d5 350c 	ldr.w	r3, [r5, #1292]	; 0x50c
        if (mosi_pin != NRF_SPI_PIN_NOT_CONNECTED)
   244fe:	f1b3 3fff 	cmp.w	r3, #4294967295
   24502:	d00b      	beq.n	2451c <nrfx_spi_uninit+0x98>
    *p_pin = pin_number & 0x1F;
   24504:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   24508:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2450a:	2b01      	cmp	r3, #1
   2450c:	d026      	beq.n	2455c <nrfx_spi_uninit+0xd8>
        case 0: return NRF_P0;
   2450e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   24512:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   24516:	2202      	movs	r2, #2
   24518:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   2451c:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   24520:	4b10      	ldr	r3, [pc, #64]	; (24564 <nrfx_spi_uninit+0xe0>)
   24522:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   24526:	7f9b      	ldrb	r3, [r3, #30]
   24528:	2bff      	cmp	r3, #255	; 0xff
   2452a:	d00b      	beq.n	24544 <nrfx_spi_uninit+0xc0>
    *p_pin = pin_number & 0x1F;
   2452c:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   24530:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   24532:	2b01      	cmp	r3, #1
   24534:	d014      	beq.n	24560 <nrfx_spi_uninit+0xdc>
        case 0: return NRF_P0;
   24536:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   2453a:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   2453e:	2202      	movs	r2, #2
   24540:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
   24544:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   24548:	4b06      	ldr	r3, [pc, #24]	; (24564 <nrfx_spi_uninit+0xe0>)
   2454a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   2454e:	2200      	movs	r2, #0
   24550:	771a      	strb	r2, [r3, #28]
}
   24552:	bd38      	pop	{r3, r4, r5, pc}
        case 1: return NRF_P1;
   24554:	4904      	ldr	r1, [pc, #16]	; (24568 <nrfx_spi_uninit+0xe4>)
   24556:	e7ba      	b.n	244ce <nrfx_spi_uninit+0x4a>
   24558:	4903      	ldr	r1, [pc, #12]	; (24568 <nrfx_spi_uninit+0xe4>)
   2455a:	e7c9      	b.n	244f0 <nrfx_spi_uninit+0x6c>
   2455c:	4902      	ldr	r1, [pc, #8]	; (24568 <nrfx_spi_uninit+0xe4>)
   2455e:	e7d8      	b.n	24512 <nrfx_spi_uninit+0x8e>
   24560:	4901      	ldr	r1, [pc, #4]	; (24568 <nrfx_spi_uninit+0xe4>)
   24562:	e7ea      	b.n	2453a <nrfx_spi_uninit+0xb6>
   24564:	20008ab8 	.word	0x20008ab8
   24568:	50000300 	.word	0x50000300

0002456c <nrfx_spi_xfer>:

nrfx_err_t nrfx_spi_xfer(nrfx_spi_t const *           p_instance,
                         nrfx_spi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
   2456c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   24570:	f890 c004 	ldrb.w	ip, [r0, #4]
   24574:	eb0c 038c 	add.w	r3, ip, ip, lsl #2
   24578:	4d21      	ldr	r5, [pc, #132]	; (24600 <nrfx_spi_xfer+0x94>)
   2457a:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
   2457e:	7f6b      	ldrb	r3, [r5, #29]
   24580:	2b00      	cmp	r3, #0
   24582:	d13a      	bne.n	245fa <nrfx_spi_xfer+0x8e>
   24584:	4604      	mov	r4, r0
   24586:	468e      	mov	lr, r1
   24588:	4617      	mov	r7, r2
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler)
   2458a:	eb0c 038c 	add.w	r3, ip, ip, lsl #2
   2458e:	4a1c      	ldr	r2, [pc, #112]	; (24600 <nrfx_spi_xfer+0x94>)
   24590:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
   24594:	b10b      	cbz	r3, 2459a <nrfx_spi_xfer+0x2e>
        {
            p_cb->transfer_in_progress = true;
   24596:	2201      	movs	r2, #1
   24598:	776a      	strb	r2, [r5, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
   2459a:	eb0c 038c 	add.w	r3, ip, ip, lsl #2
   2459e:	4e18      	ldr	r6, [pc, #96]	; (24600 <nrfx_spi_xfer+0x94>)
   245a0:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
   245a4:	f106 080c 	add.w	r8, r6, #12
   245a8:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
   245ac:	e888 000f 	stmia.w	r8, {r0, r1, r2, r3}
    p_cb->abort = false;
   245b0:	2300      	movs	r3, #0
   245b2:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24

    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   245b6:	7fb3      	ldrb	r3, [r6, #30]
   245b8:	2bff      	cmp	r3, #255	; 0xff
   245ba:	d00a      	beq.n	245d2 <nrfx_spi_xfer+0x66>
    *p_pin = pin_number & 0x1F;
   245bc:	f003 011f 	and.w	r1, r3, #31
    return pin_number >> 5;
   245c0:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   245c2:	2b01      	cmp	r3, #1
   245c4:	d010      	beq.n	245e8 <nrfx_spi_xfer+0x7c>
        case 0: return NRF_P0;
   245c6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   245ca:	2301      	movs	r3, #1
   245cc:	408b      	lsls	r3, r1
    p_reg->OUTCLR = clr_mask;
   245ce:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    {
        nrf_gpio_pin_write(p_cb->ss_pin, 0);
    }
    if (flags)
   245d2:	b15f      	cbz	r7, 245ec <nrfx_spi_xfer+0x80>
    {
        p_cb->transfer_in_progress = false;
   245d4:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
   245d8:	4b09      	ldr	r3, [pc, #36]	; (24600 <nrfx_spi_xfer+0x94>)
   245da:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
   245de:	2200      	movs	r2, #0
   245e0:	775a      	strb	r2, [r3, #29]
        err_code = NRFX_ERROR_NOT_SUPPORTED;
   245e2:	4808      	ldr	r0, [pc, #32]	; (24604 <nrfx_spi_xfer+0x98>)
    }
    NRFX_LOG_INFO("Function: %s, error code: %s.",
                  __func__,
                  NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   245e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        case 1: return NRF_P1;
   245e8:	4a07      	ldr	r2, [pc, #28]	; (24608 <nrfx_spi_xfer+0x9c>)
   245ea:	e7ee      	b.n	245ca <nrfx_spi_xfer+0x5e>
        spi_xfer(p_instance->p_reg, p_cb, p_xfer_desc);
   245ec:	4672      	mov	r2, lr
   245ee:	4629      	mov	r1, r5
   245f0:	6820      	ldr	r0, [r4, #0]
   245f2:	f7ff feb3 	bl	2435c <spi_xfer>
    nrfx_err_t err_code = NRFX_SUCCESS;
   245f6:	4805      	ldr	r0, [pc, #20]	; (2460c <nrfx_spi_xfer+0xa0>)
   245f8:	e7f4      	b.n	245e4 <nrfx_spi_xfer+0x78>
        return err_code;
   245fa:	4805      	ldr	r0, [pc, #20]	; (24610 <nrfx_spi_xfer+0xa4>)
   245fc:	e7f2      	b.n	245e4 <nrfx_spi_xfer+0x78>
   245fe:	bf00      	nop
   24600:	20008ab8 	.word	0x20008ab8
   24604:	0bad0003 	.word	0x0bad0003
   24608:	50000300 	.word	0x50000300
   2460c:	0bad0000 	.word	0x0bad0000
   24610:	0bad000b 	.word	0x0bad000b

00024614 <nrfx_spi_0_irq_handler>:
    }
}

#if NRFX_CHECK(NRFX_SPI0_ENABLED)
void nrfx_spi_0_irq_handler(void)
{
   24614:	b508      	push	{r3, lr}
    irq_handler(NRF_SPI0, &m_cb[NRFX_SPI0_INST_IDX]);
   24616:	4902      	ldr	r1, [pc, #8]	; (24620 <nrfx_spi_0_irq_handler+0xc>)
   24618:	4802      	ldr	r0, [pc, #8]	; (24624 <nrfx_spi_0_irq_handler+0x10>)
   2461a:	f008 fa21 	bl	2ca60 <irq_handler>
}
   2461e:	bd08      	pop	{r3, pc}
   24620:	20008ab8 	.word	0x20008ab8
   24624:	40003000 	.word	0x40003000

00024628 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   24628:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   2462a:	4c11      	ldr	r4, [pc, #68]	; (24670 <_DoInit+0x48>)
   2462c:	2303      	movs	r3, #3
   2462e:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   24630:	6163      	str	r3, [r4, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   24632:	4a10      	ldr	r2, [pc, #64]	; (24674 <_DoInit+0x4c>)
   24634:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   24636:	4b10      	ldr	r3, [pc, #64]	; (24678 <_DoInit+0x50>)
   24638:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   2463a:	f44f 6380 	mov.w	r3, #1024	; 0x400
   2463e:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   24640:	2300      	movs	r3, #0
   24642:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   24644:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   24646:	62e3      	str	r3, [r4, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
   24648:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   2464a:	4a0c      	ldr	r2, [pc, #48]	; (2467c <_DoInit+0x54>)
   2464c:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   2464e:	2210      	movs	r2, #16
   24650:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   24652:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   24654:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   24656:	6763      	str	r3, [r4, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   24658:	4909      	ldr	r1, [pc, #36]	; (24680 <_DoInit+0x58>)
   2465a:	1de0      	adds	r0, r4, #7
   2465c:	f003 ffbd 	bl	285da <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
   24660:	4908      	ldr	r1, [pc, #32]	; (24684 <_DoInit+0x5c>)
   24662:	4620      	mov	r0, r4
   24664:	f003 ffb9 	bl	285da <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
   24668:	2320      	movs	r3, #32
   2466a:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
   2466c:	bd10      	pop	{r4, pc}
   2466e:	bf00      	nop
   24670:	20008ef0 	.word	0x20008ef0
   24674:	00031160 	.word	0x00031160
   24678:	20008af0 	.word	0x20008af0
   2467c:	20008ae0 	.word	0x20008ae0
   24680:	0003116c 	.word	0x0003116c
   24684:	00031170 	.word	0x00031170

00024688 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   24688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2468c:	4604      	mov	r4, r0
   2468e:	460e      	mov	r6, r1
   24690:	4615      	mov	r5, r2
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
   24692:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   24696:	4a2d      	ldr	r2, [pc, #180]	; (2474c <SEGGER_RTT_WriteSkipNoLock+0xc4>)
   24698:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   2469c:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   2469e:	6a57      	ldr	r7, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   246a0:	42bb      	cmp	r3, r7
   246a2:	d84c      	bhi.n	2473e <SEGGER_RTT_WriteSkipNoLock+0xb6>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   246a4:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   246a8:	4a28      	ldr	r2, [pc, #160]	; (2474c <SEGGER_RTT_WriteSkipNoLock+0xc4>)
   246aa:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   246ae:	f8d2 8020 	ldr.w	r8, [r2, #32]
   246b2:	eba8 0907 	sub.w	r9, r8, r7
   246b6:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
   246ba:	4295      	cmp	r5, r2
   246bc:	d904      	bls.n	246c8 <SEGGER_RTT_WriteSkipNoLock+0x40>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
      return 1;
    }
    Avail += RdOff;                                     // Space incl. wrap-around
   246be:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   246c0:	429d      	cmp	r5, r3
   246c2:	d916      	bls.n	246f2 <SEGGER_RTT_WriteSkipNoLock+0x6a>
    Avail = RdOff - WrOff - 1u;
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
   246c4:	2000      	movs	r0, #0
   246c6:	e03f      	b.n	24748 <SEGGER_RTT_WriteSkipNoLock+0xc0>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   246c8:	f8df 8080 	ldr.w	r8, [pc, #128]	; 2474c <SEGGER_RTT_WriteSkipNoLock+0xc4>
   246cc:	1c63      	adds	r3, r4, #1
   246ce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   246d2:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   246d6:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
   246d8:	462a      	mov	r2, r5
   246da:	4631      	mov	r1, r6
   246dc:	4438      	add	r0, r7
   246de:	f003 ffd0 	bl	28682 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
   246e2:	442f      	add	r7, r5
   246e4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   246e8:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
   246ec:	6267      	str	r7, [r4, #36]	; 0x24
      return 1;
   246ee:	2001      	movs	r0, #1
   246f0:	e02a      	b.n	24748 <SEGGER_RTT_WriteSkipNoLock+0xc0>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   246f2:	1c43      	adds	r3, r0, #1
   246f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   246f8:	4a14      	ldr	r2, [pc, #80]	; (2474c <SEGGER_RTT_WriteSkipNoLock+0xc4>)
   246fa:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   246fe:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
   24700:	464a      	mov	r2, r9
   24702:	4631      	mov	r1, r6
   24704:	4438      	add	r0, r7
   24706:	f003 ffbc 	bl	28682 <memcpy>
      NumBytes -= Rem;
   2470a:	eba7 0808 	sub.w	r8, r7, r8
      if (NumBytes) {
   2470e:	eb18 0505 	adds.w	r5, r8, r5
   24712:	d107      	bne.n	24724 <SEGGER_RTT_WriteSkipNoLock+0x9c>
      pRing->WrOff = NumBytes;
   24714:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   24718:	4b0c      	ldr	r3, [pc, #48]	; (2474c <SEGGER_RTT_WriteSkipNoLock+0xc4>)
   2471a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   2471e:	625d      	str	r5, [r3, #36]	; 0x24
      return 1;
   24720:	2001      	movs	r0, #1
   24722:	e011      	b.n	24748 <SEGGER_RTT_WriteSkipNoLock+0xc0>
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
   24724:	1c63      	adds	r3, r4, #1
   24726:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   2472a:	4a08      	ldr	r2, [pc, #32]	; (2474c <SEGGER_RTT_WriteSkipNoLock+0xc4>)
   2472c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
        memcpy((void*)pDst, pData + Rem, NumBytes);
   24730:	462a      	mov	r2, r5
   24732:	eb06 0109 	add.w	r1, r6, r9
   24736:	6858      	ldr	r0, [r3, #4]
   24738:	f003 ffa3 	bl	28682 <memcpy>
   2473c:	e7ea      	b.n	24714 <SEGGER_RTT_WriteSkipNoLock+0x8c>
    Avail = RdOff - WrOff - 1u;
   2473e:	1bdb      	subs	r3, r3, r7
   24740:	3b01      	subs	r3, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   24742:	42ab      	cmp	r3, r5
   24744:	d2c0      	bcs.n	246c8 <SEGGER_RTT_WriteSkipNoLock+0x40>
  return 0;     // No space in buffer
   24746:	2000      	movs	r0, #0
}
   24748:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2474c:	20008ef0 	.word	0x20008ef0

00024750 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   24750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24752:	460f      	mov	r7, r1
   24754:	4616      	mov	r6, r2
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
   24756:	1c45      	adds	r5, r0, #1
   24758:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   2475c:	4b16      	ldr	r3, [pc, #88]	; (247b8 <SEGGER_RTT_WriteNoLock+0x68>)
   2475e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
   24762:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   24766:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   2476a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   2476c:	2c01      	cmp	r4, #1
   2476e:	d011      	beq.n	24794 <SEGGER_RTT_WriteNoLock+0x44>
   24770:	2c02      	cmp	r4, #2
   24772:	d01c      	beq.n	247ae <SEGGER_RTT_WriteNoLock+0x5e>
   24774:	b114      	cbz	r4, 2477c <SEGGER_RTT_WriteNoLock+0x2c>
   24776:	2400      	movs	r4, #0
  }
  //
  // Finish up.
  //
  return Status;
}
   24778:	4620      	mov	r0, r4
   2477a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
   2477c:	4628      	mov	r0, r5
   2477e:	f008 f97e 	bl	2ca7e <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
   24782:	4286      	cmp	r6, r0
   24784:	d8f8      	bhi.n	24778 <SEGGER_RTT_WriteNoLock+0x28>
      _WriteNoCheck(pRing, pData, NumBytes);
   24786:	4632      	mov	r2, r6
   24788:	4639      	mov	r1, r7
   2478a:	4628      	mov	r0, r5
   2478c:	f008 f983 	bl	2ca96 <_WriteNoCheck>
      Status = NumBytes;
   24790:	4634      	mov	r4, r6
   24792:	e7f1      	b.n	24778 <SEGGER_RTT_WriteNoLock+0x28>
    Avail = _GetAvailWriteSpace(pRing);
   24794:	4628      	mov	r0, r5
   24796:	f008 f972 	bl	2ca7e <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
   2479a:	4634      	mov	r4, r6
   2479c:	4286      	cmp	r6, r0
   2479e:	bf28      	it	cs
   247a0:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
   247a2:	4622      	mov	r2, r4
   247a4:	4639      	mov	r1, r7
   247a6:	4628      	mov	r0, r5
   247a8:	f008 f975 	bl	2ca96 <_WriteNoCheck>
    break;
   247ac:	e7e4      	b.n	24778 <SEGGER_RTT_WriteNoLock+0x28>
    Status = _WriteBlocking(pRing, pData, NumBytes);
   247ae:	4628      	mov	r0, r5
   247b0:	f008 f993 	bl	2cada <_WriteBlocking>
   247b4:	4604      	mov	r4, r0
    break;
   247b6:	e7df      	b.n	24778 <SEGGER_RTT_WriteNoLock+0x28>
   247b8:	20008ef0 	.word	0x20008ef0

000247bc <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
   247bc:	4b06      	ldr	r3, [pc, #24]	; (247d8 <SEGGER_RTT_HasDataUp+0x1c>)
   247be:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   247c2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   247c6:	6a92      	ldr	r2, [r2, #40]	; 0x28
  return pRing->WrOff - v;
   247c8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   247cc:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   247d0:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
   247d2:	1a80      	subs	r0, r0, r2
   247d4:	4770      	bx	lr
   247d6:	bf00      	nop
   247d8:	20008ef0 	.word	0x20008ef0

000247dc <zephyr_rtt_mutex_lock>:
}

#ifdef CONFIG_MULTITHREADING

void zephyr_rtt_mutex_lock(void)
{
   247dc:	b508      	push	{r3, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   247de:	f04f 32ff 	mov.w	r2, #4294967295
   247e2:	f04f 33ff 	mov.w	r3, #4294967295
   247e6:	4802      	ldr	r0, [pc, #8]	; (247f0 <zephyr_rtt_mutex_lock+0x14>)
   247e8:	f000 fbf2 	bl	24fd0 <z_impl_k_mutex_lock>
	k_mutex_lock(&rtt_term_mutex, K_FOREVER);
}
   247ec:	bd08      	pop	{r3, pc}
   247ee:	bf00      	nop
   247f0:	20000be8 	.word	0x20000be8

000247f4 <zephyr_rtt_mutex_unlock>:

void zephyr_rtt_mutex_unlock(void)
{
   247f4:	b508      	push	{r3, lr}
	return z_impl_k_mutex_unlock(mutex);
   247f6:	4802      	ldr	r0, [pc, #8]	; (24800 <zephyr_rtt_mutex_unlock+0xc>)
   247f8:	f000 fc6e 	bl	250d8 <z_impl_k_mutex_unlock>
	k_mutex_unlock(&rtt_term_mutex);
}
   247fc:	bd08      	pop	{r3, pc}
   247fe:	bf00      	nop
   24800:	20000be8 	.word	0x20000be8

00024804 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
   24804:	4b03      	ldr	r3, [pc, #12]	; (24814 <z_device_state_init+0x10>)

	while (dev < __device_end) {
   24806:	e000      	b.n	2480a <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
   24808:	3318      	adds	r3, #24
	while (dev < __device_end) {
   2480a:	4a03      	ldr	r2, [pc, #12]	; (24818 <z_device_state_init+0x14>)
   2480c:	4293      	cmp	r3, r2
   2480e:	d3fb      	bcc.n	24808 <z_device_state_init+0x4>
	}
}
   24810:	4770      	bx	lr
   24812:	bf00      	nop
   24814:	0002dbc0 	.word	0x0002dbc0
   24818:	0002dc68 	.word	0x0002dc68

0002481c <reason_to_str>:
	return thread_name;
}

static const char *reason_to_str(unsigned int reason)
{
	switch (reason) {
   2481c:	2804      	cmp	r0, #4
   2481e:	d80c      	bhi.n	2483a <reason_to_str+0x1e>
   24820:	e8df f000 	tbb	[pc, r0]
   24824:	07050d03 	.word	0x07050d03
   24828:	09          	.byte	0x09
   24829:	00          	.byte	0x00
   2482a:	4806      	ldr	r0, [pc, #24]	; (24844 <reason_to_str+0x28>)
   2482c:	4770      	bx	lr
	case K_ERR_CPU_EXCEPTION:
		return "CPU exception";
	case K_ERR_SPURIOUS_IRQ:
		return "Unhandled interrupt";
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
   2482e:	4806      	ldr	r0, [pc, #24]	; (24848 <reason_to_str+0x2c>)
   24830:	4770      	bx	lr
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
   24832:	4806      	ldr	r0, [pc, #24]	; (2484c <reason_to_str+0x30>)
   24834:	4770      	bx	lr
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
   24836:	4806      	ldr	r0, [pc, #24]	; (24850 <reason_to_str+0x34>)
   24838:	4770      	bx	lr
	default:
		return "Unknown error";
   2483a:	4806      	ldr	r0, [pc, #24]	; (24854 <reason_to_str+0x38>)
   2483c:	4770      	bx	lr
		return "Unhandled interrupt";
   2483e:	4806      	ldr	r0, [pc, #24]	; (24858 <reason_to_str+0x3c>)
	}
}
   24840:	4770      	bx	lr
   24842:	bf00      	nop
   24844:	0003117c 	.word	0x0003117c
   24848:	000311a0 	.word	0x000311a0
   2484c:	000311b0 	.word	0x000311b0
   24850:	000311bc 	.word	0x000311bc
   24854:	000311cc 	.word	0x000311cc
   24858:	0003118c 	.word	0x0003118c

0002485c <thread_name_get>:
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   2485c:	b130      	cbz	r0, 2486c <thread_name_get+0x10>
{
   2485e:	b508      	push	{r3, lr}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   24860:	f008 fa65 	bl	2cd2e <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   24864:	b120      	cbz	r0, 24870 <thread_name_get+0x14>
   24866:	7803      	ldrb	r3, [r0, #0]
   24868:	b123      	cbz	r3, 24874 <thread_name_get+0x18>
}
   2486a:	bd08      	pop	{r3, pc}
		thread_name = "unknown";
   2486c:	4802      	ldr	r0, [pc, #8]	; (24878 <thread_name_get+0x1c>)
}
   2486e:	4770      	bx	lr
		thread_name = "unknown";
   24870:	4801      	ldr	r0, [pc, #4]	; (24878 <thread_name_get+0x1c>)
   24872:	e7fa      	b.n	2486a <thread_name_get+0xe>
   24874:	4800      	ldr	r0, [pc, #0]	; (24878 <thread_name_get+0x1c>)
	return thread_name;
   24876:	e7f8      	b.n	2486a <thread_name_get+0xe>
   24878:	000311dc 	.word	0x000311dc

0002487c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   2487c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   24880:	b083      	sub	sp, #12
   24882:	af00      	add	r7, sp, #0
   24884:	4606      	mov	r6, r0
   24886:	460c      	mov	r4, r1
   24888:	f04f 0340 	mov.w	r3, #64	; 0x40
   2488c:	f3ef 8811 	mrs	r8, BASEPRI
   24890:	f383 8812 	msr	BASEPRI_MAX, r3
   24894:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   24898:	f001 fa56 	bl	25d48 <z_impl_z_current_get>
   2489c:	4605      	mov	r5, r0
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   2489e:	4630      	mov	r0, r6
   248a0:	f7ff ffbc 	bl	2481c <reason_to_str>
   248a4:	46e9      	mov	r9, sp
   248a6:	2301      	movs	r3, #1
   248a8:	713b      	strb	r3, [r7, #4]
   248aa:	2303      	movs	r3, #3
   248ac:	717b      	strb	r3, [r7, #5]
   248ae:	b08a      	sub	sp, #40	; 0x28
   248b0:	46ec      	mov	ip, sp
   248b2:	f11c 0210 	adds.w	r2, ip, #16
   248b6:	d021      	beq.n	248fc <z_fatal_error+0x80>
   248b8:	f04f 0e16 	mov.w	lr, #22
   248bc:	b152      	cbz	r2, 248d4 <z_fatal_error+0x58>
   248be:	4673      	mov	r3, lr
   248c0:	f1be 0f04 	cmp.w	lr, #4
   248c4:	dd02      	ble.n	248cc <z_fatal_error+0x50>
   248c6:	497b      	ldr	r1, [pc, #492]	; (24ab4 <z_fatal_error+0x238>)
   248c8:	f8cc 1014 	str.w	r1, [ip, #20]
   248cc:	2b08      	cmp	r3, #8
   248ce:	dd01      	ble.n	248d4 <z_fatal_error+0x58>
   248d0:	f8cc 6018 	str.w	r6, [ip, #24]
   248d4:	2301      	movs	r3, #1
   248d6:	703b      	strb	r3, [r7, #0]
   248d8:	2303      	movs	r3, #3
   248da:	707b      	strb	r3, [r7, #1]
   248dc:	b1da      	cbz	r2, 24916 <z_fatal_error+0x9a>
   248de:	4673      	mov	r3, lr
   248e0:	f1be 0f0c 	cmp.w	lr, #12
   248e4:	dd01      	ble.n	248ea <z_fatal_error+0x6e>
   248e6:	f8cc 001c 	str.w	r0, [ip, #28]
   248ea:	2b10      	cmp	r3, #16
   248ec:	dd02      	ble.n	248f4 <z_fatal_error+0x78>
   248ee:	2300      	movs	r3, #0
   248f0:	f8cc 3020 	str.w	r3, [ip, #32]
   248f4:	f10c 0324 	add.w	r3, ip, #36	; 0x24
   248f8:	2100      	movs	r1, #0
   248fa:	e00a      	b.n	24912 <z_fatal_error+0x96>
   248fc:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
   24900:	e7dc      	b.n	248bc <z_fatal_error+0x40>
   24902:	f101 0008 	add.w	r0, r1, #8
   24906:	4438      	add	r0, r7
   24908:	f810 0c08 	ldrb.w	r0, [r0, #-8]
   2490c:	f803 0b01 	strb.w	r0, [r3], #1
   24910:	3101      	adds	r1, #1
   24912:	2901      	cmp	r1, #1
   24914:	d9f5      	bls.n	24902 <z_fatal_error+0x86>
   24916:	f1be 0f15 	cmp.w	lr, #21
   2491a:	dd53      	ble.n	249c4 <z_fatal_error+0x148>
   2491c:	2316      	movs	r3, #22
   2491e:	b14a      	cbz	r2, 24934 <z_fatal_error+0xb8>
   24920:	2105      	movs	r1, #5
   24922:	7139      	strb	r1, [r7, #4]
   24924:	2100      	movs	r1, #0
   24926:	7179      	strb	r1, [r7, #5]
   24928:	71b9      	strb	r1, [r7, #6]
   2492a:	2101      	movs	r1, #1
   2492c:	71f9      	strb	r1, [r7, #7]
   2492e:	6878      	ldr	r0, [r7, #4]
   24930:	f8cc 0010 	str.w	r0, [ip, #16]
   24934:	2100      	movs	r1, #0
   24936:	f36f 0100 	bfc	r1, #0, #1
   2493a:	f36f 0141 	bfc	r1, #1, #1
   2493e:	f36f 0182 	bfc	r1, #2, #1
   24942:	f36f 01c5 	bfc	r1, #3, #3
   24946:	2001      	movs	r0, #1
   24948:	f360 1188 	bfi	r1, r0, #6, #3
   2494c:	f3c3 0309 	ubfx	r3, r3, #0, #10
   24950:	f363 2152 	bfi	r1, r3, #9, #10
   24954:	f36f 41de 	bfc	r1, #19, #12
   24958:	f36f 71df 	bfc	r1, #31, #1
   2495c:	2300      	movs	r3, #0
   2495e:	4856      	ldr	r0, [pc, #344]	; (24ab8 <z_fatal_error+0x23c>)
   24960:	f003 fa55 	bl	27e0e <z_impl_z_log_msg_static_create>
   24964:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   24966:	b11c      	cbz	r4, 24970 <z_fatal_error+0xf4>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   24968:	69e3      	ldr	r3, [r4, #28]
   2496a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   2496e:	bb63      	cbnz	r3, 249ca <z_fatal_error+0x14e>
		LOG_ERR("Fault during interrupt handling\n");
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   24970:	4628      	mov	r0, r5
   24972:	f7ff ff73 	bl	2485c <thread_name_get>
   24976:	46e9      	mov	r9, sp
   24978:	2301      	movs	r3, #1
   2497a:	713b      	strb	r3, [r7, #4]
   2497c:	2303      	movs	r3, #3
   2497e:	717b      	strb	r3, [r7, #5]
   24980:	b08a      	sub	sp, #40	; 0x28
   24982:	46ec      	mov	ip, sp
   24984:	f11c 0210 	adds.w	r2, ip, #16
   24988:	d04c      	beq.n	24a24 <z_fatal_error+0x1a8>
   2498a:	f04f 0e12 	mov.w	lr, #18
   2498e:	b152      	cbz	r2, 249a6 <z_fatal_error+0x12a>
   24990:	4673      	mov	r3, lr
   24992:	f1be 0f04 	cmp.w	lr, #4
   24996:	dd02      	ble.n	2499e <z_fatal_error+0x122>
   24998:	4948      	ldr	r1, [pc, #288]	; (24abc <z_fatal_error+0x240>)
   2499a:	f8cc 1014 	str.w	r1, [ip, #20]
   2499e:	2b08      	cmp	r3, #8
   249a0:	dd01      	ble.n	249a6 <z_fatal_error+0x12a>
   249a2:	f8cc 5018 	str.w	r5, [ip, #24]
   249a6:	2301      	movs	r3, #1
   249a8:	703b      	strb	r3, [r7, #0]
   249aa:	2303      	movs	r3, #3
   249ac:	707b      	strb	r3, [r7, #1]
   249ae:	2a00      	cmp	r2, #0
   249b0:	d045      	beq.n	24a3e <z_fatal_error+0x1c2>
   249b2:	f1be 0f0c 	cmp.w	lr, #12
   249b6:	dd01      	ble.n	249bc <z_fatal_error+0x140>
   249b8:	f8cc 001c 	str.w	r0, [ip, #28]
   249bc:	f10c 0320 	add.w	r3, ip, #32
   249c0:	2100      	movs	r1, #0
   249c2:	e03a      	b.n	24a3a <z_fatal_error+0x1be>
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   249c4:	f06f 031b 	mvn.w	r3, #27
   249c8:	e7a9      	b.n	2491e <z_fatal_error+0xa2>
		LOG_ERR("Fault during interrupt handling\n");
   249ca:	2006      	movs	r0, #6
   249cc:	f7f1 f9fc 	bl	15dc8 <z_log_msg_alloc>
   249d0:	2200      	movs	r2, #0
   249d2:	f36f 0200 	bfc	r2, #0, #1
   249d6:	f36f 0241 	bfc	r2, #1, #1
   249da:	f36f 0282 	bfc	r2, #2, #1
   249de:	f36f 02c5 	bfc	r2, #3, #3
   249e2:	2301      	movs	r3, #1
   249e4:	f363 1288 	bfi	r2, r3, #6, #3
   249e8:	2308      	movs	r3, #8
   249ea:	f363 2252 	bfi	r2, r3, #9, #10
   249ee:	f36f 42de 	bfc	r2, #19, #12
   249f2:	f36f 72df 	bfc	r2, #31, #1
   249f6:	4684      	mov	ip, r0
   249f8:	b170      	cbz	r0, 24a18 <z_fatal_error+0x19c>
   249fa:	f110 0310 	adds.w	r3, r0, #16
   249fe:	d001      	beq.n	24a04 <z_fatal_error+0x188>
   24a00:	492f      	ldr	r1, [pc, #188]	; (24ac0 <z_fatal_error+0x244>)
   24a02:	6141      	str	r1, [r0, #20]
   24a04:	b143      	cbz	r3, 24a18 <z_fatal_error+0x19c>
   24a06:	2302      	movs	r3, #2
   24a08:	713b      	strb	r3, [r7, #4]
   24a0a:	2300      	movs	r3, #0
   24a0c:	717b      	strb	r3, [r7, #5]
   24a0e:	71bb      	strb	r3, [r7, #6]
   24a10:	71fb      	strb	r3, [r7, #7]
   24a12:	6878      	ldr	r0, [r7, #4]
   24a14:	f8cc 0010 	str.w	r0, [ip, #16]
   24a18:	2300      	movs	r3, #0
   24a1a:	4927      	ldr	r1, [pc, #156]	; (24ab8 <z_fatal_error+0x23c>)
   24a1c:	4660      	mov	r0, ip
   24a1e:	f003 f9de 	bl	27dde <z_log_msg_finalize>
   24a22:	e7a5      	b.n	24970 <z_fatal_error+0xf4>
	LOG_ERR("Current thread: %p (%s)", thread,
   24a24:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
   24a28:	e7b1      	b.n	2498e <z_fatal_error+0x112>
   24a2a:	f101 0008 	add.w	r0, r1, #8
   24a2e:	4438      	add	r0, r7
   24a30:	f810 0c08 	ldrb.w	r0, [r0, #-8]
   24a34:	f803 0b01 	strb.w	r0, [r3], #1
   24a38:	3101      	adds	r1, #1
   24a3a:	2901      	cmp	r1, #1
   24a3c:	d9f5      	bls.n	24a2a <z_fatal_error+0x1ae>
   24a3e:	f1be 0f11 	cmp.w	lr, #17
   24a42:	dd33      	ble.n	24aac <z_fatal_error+0x230>
   24a44:	2312      	movs	r3, #18
   24a46:	b14a      	cbz	r2, 24a5c <z_fatal_error+0x1e0>
   24a48:	2104      	movs	r1, #4
   24a4a:	7139      	strb	r1, [r7, #4]
   24a4c:	2100      	movs	r1, #0
   24a4e:	7179      	strb	r1, [r7, #5]
   24a50:	71b9      	strb	r1, [r7, #6]
   24a52:	2101      	movs	r1, #1
   24a54:	71f9      	strb	r1, [r7, #7]
   24a56:	6878      	ldr	r0, [r7, #4]
   24a58:	f8cc 0010 	str.w	r0, [ip, #16]
   24a5c:	2100      	movs	r1, #0
   24a5e:	f36f 0100 	bfc	r1, #0, #1
   24a62:	f36f 0141 	bfc	r1, #1, #1
   24a66:	f36f 0182 	bfc	r1, #2, #1
   24a6a:	f36f 01c5 	bfc	r1, #3, #3
   24a6e:	2001      	movs	r0, #1
   24a70:	f360 1188 	bfi	r1, r0, #6, #3
   24a74:	f3c3 0309 	ubfx	r3, r3, #0, #10
   24a78:	f363 2152 	bfi	r1, r3, #9, #10
   24a7c:	f36f 41de 	bfc	r1, #19, #12
   24a80:	f36f 71df 	bfc	r1, #31, #1
   24a84:	2300      	movs	r3, #0
   24a86:	480c      	ldr	r0, [pc, #48]	; (24ab8 <z_fatal_error+0x23c>)
   24a88:	f003 f9c1 	bl	27e0e <z_impl_z_log_msg_static_create>
   24a8c:	46cd      	mov	sp, r9

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   24a8e:	4621      	mov	r1, r4
   24a90:	4630      	mov	r0, r6
   24a92:	f7fd fe7f 	bl	22794 <k_sys_fatal_error_handler>
	__asm__ volatile(
   24a96:	f388 8811 	msr	BASEPRI, r8
   24a9a:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   24a9e:	4628      	mov	r0, r5
   24aa0:	f7f3 fa68 	bl	17f74 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   24aa4:	370c      	adds	r7, #12
   24aa6:	46bd      	mov	sp, r7
   24aa8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LOG_ERR("Current thread: %p (%s)", thread,
   24aac:	f06f 031b 	mvn.w	r3, #27
   24ab0:	e7c9      	b.n	24a46 <z_fatal_error+0x1ca>
   24ab2:	bf00      	nop
   24ab4:	000311e4 	.word	0x000311e4
   24ab8:	0002df20 	.word	0x0002df20
   24abc:	00031230 	.word	0x00031230
   24ac0:	0003120c 	.word	0x0003120c

00024ac4 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
static void z_sys_init_run_level(enum init_level level)
{
   24ac4:	b570      	push	{r4, r5, r6, lr}
   24ac6:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   24ac8:	4b11      	ldr	r3, [pc, #68]	; (24b10 <z_sys_init_run_level+0x4c>)
   24aca:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   24ace:	e009      	b.n	24ae4 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
   24ad0:	4240      	negs	r0, r0
   24ad2:	e017      	b.n	24b04 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
   24ad4:	68eb      	ldr	r3, [r5, #12]
   24ad6:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
   24ad8:	68ea      	ldr	r2, [r5, #12]
   24ada:	7853      	ldrb	r3, [r2, #1]
   24adc:	f043 0301 	orr.w	r3, r3, #1
   24ae0:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   24ae2:	3408      	adds	r4, #8
   24ae4:	1c73      	adds	r3, r6, #1
   24ae6:	4a0a      	ldr	r2, [pc, #40]	; (24b10 <z_sys_init_run_level+0x4c>)
   24ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   24aec:	42a3      	cmp	r3, r4
   24aee:	d90d      	bls.n	24b0c <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
   24af0:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
   24af2:	6823      	ldr	r3, [r4, #0]
   24af4:	4628      	mov	r0, r5
   24af6:	4798      	blx	r3
		if (dev != NULL) {
   24af8:	2d00      	cmp	r5, #0
   24afa:	d0f2      	beq.n	24ae2 <z_sys_init_run_level+0x1e>
			if (rc != 0) {
   24afc:	2800      	cmp	r0, #0
   24afe:	d0eb      	beq.n	24ad8 <z_sys_init_run_level+0x14>
				if (rc < 0) {
   24b00:	2800      	cmp	r0, #0
   24b02:	dbe5      	blt.n	24ad0 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
   24b04:	28ff      	cmp	r0, #255	; 0xff
   24b06:	dde5      	ble.n	24ad4 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
   24b08:	20ff      	movs	r0, #255	; 0xff
   24b0a:	e7e3      	b.n	24ad4 <z_sys_init_run_level+0x10>
		}
	}
}
   24b0c:	bd70      	pop	{r4, r5, r6, pc}
   24b0e:	bf00      	nop
   24b10:	00031258 	.word	0x00031258

00024b14 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   24b14:	b510      	push	{r4, lr}
   24b16:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
   24b18:	23b8      	movs	r3, #184	; 0xb8
   24b1a:	4c10      	ldr	r4, [pc, #64]	; (24b5c <init_idle_thread+0x48>)
   24b1c:	fb03 4400 	mla	r4, r3, r0, r4
	k_thread_stack_t *stack = z_idle_stacks[i];
   24b20:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   24b24:	4b0e      	ldr	r3, [pc, #56]	; (24b60 <init_idle_thread+0x4c>)
   24b26:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
	z_setup_new_thread(thread, stack,
   24b2a:	4a0e      	ldr	r2, [pc, #56]	; (24b64 <init_idle_thread+0x50>)
   24b2c:	9205      	str	r2, [sp, #20]
   24b2e:	2201      	movs	r2, #1
   24b30:	9204      	str	r2, [sp, #16]
   24b32:	220f      	movs	r2, #15
   24b34:	9203      	str	r2, [sp, #12]
   24b36:	2200      	movs	r2, #0
   24b38:	9202      	str	r2, [sp, #8]
   24b3a:	9201      	str	r2, [sp, #4]
   24b3c:	9300      	str	r3, [sp, #0]
   24b3e:	4b0a      	ldr	r3, [pc, #40]	; (24b68 <init_idle_thread+0x54>)
   24b40:	f44f 72a0 	mov.w	r2, #320	; 0x140
   24b44:	4909      	ldr	r1, [pc, #36]	; (24b6c <init_idle_thread+0x58>)
   24b46:	eb01 11cc 	add.w	r1, r1, ip, lsl #7
   24b4a:	4620      	mov	r0, r4
   24b4c:	f000 f974 	bl	24e38 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   24b50:	7b63      	ldrb	r3, [r4, #13]
   24b52:	f023 0304 	bic.w	r3, r3, #4
   24b56:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   24b58:	b006      	add	sp, #24
   24b5a:	bd10      	pop	{r4, pc}
   24b5c:	20007868 	.word	0x20007868
   24b60:	20008f98 	.word	0x20008f98
   24b64:	00031248 	.word	0x00031248
   24b68:	00024f95 	.word	0x00024f95
   24b6c:	2000b600 	.word	0x2000b600

00024b70 <bg_thread_main>:
{
   24b70:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   24b72:	4b0a      	ldr	r3, [pc, #40]	; (24b9c <bg_thread_main+0x2c>)
   24b74:	2201      	movs	r2, #1
   24b76:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   24b78:	2003      	movs	r0, #3
   24b7a:	f7ff ffa3 	bl	24ac4 <z_sys_init_run_level>
	boot_banner();
   24b7e:	f001 fc05 	bl	2638c <boot_banner>
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   24b82:	2004      	movs	r0, #4
   24b84:	f7ff ff9e 	bl	24ac4 <z_sys_init_run_level>
	z_init_static_threads();
   24b88:	f000 f9ba 	bl	24f00 <z_init_static_threads>
	(void)main();
   24b8c:	f7ef fac8 	bl	14120 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   24b90:	4a03      	ldr	r2, [pc, #12]	; (24ba0 <bg_thread_main+0x30>)
   24b92:	7b13      	ldrb	r3, [r2, #12]
   24b94:	f023 0301 	bic.w	r3, r3, #1
   24b98:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   24b9a:	bd08      	pop	{r3, pc}
   24b9c:	20008fe6 	.word	0x20008fe6
   24ba0:	20007920 	.word	0x20007920

00024ba4 <switch_to_main_thread>:
	return stack_ptr;
}

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
   24ba4:	b508      	push	{r3, lr}
   24ba6:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   24ba8:	4a01      	ldr	r2, [pc, #4]	; (24bb0 <switch_to_main_thread+0xc>)
   24baa:	4802      	ldr	r0, [pc, #8]	; (24bb4 <switch_to_main_thread+0x10>)
   24bac:	f7f2 f932 	bl	16e14 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   24bb0:	00024b71 	.word	0x00024b71
   24bb4:	20007920 	.word	0x20007920

00024bb8 <z_bss_zero>:
{
   24bb8:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   24bba:	4803      	ldr	r0, [pc, #12]	; (24bc8 <z_bss_zero+0x10>)
   24bbc:	4a03      	ldr	r2, [pc, #12]	; (24bcc <z_bss_zero+0x14>)
   24bbe:	1a12      	subs	r2, r2, r0
   24bc0:	2100      	movs	r1, #0
   24bc2:	f007 ffd2 	bl	2cb6a <z_early_memset>
}
   24bc6:	bd08      	pop	{r3, pc}
   24bc8:	20000d50 	.word	0x20000d50
   24bcc:	20008fe8 	.word	0x20008fe8

00024bd0 <z_init_cpu>:
{
   24bd0:	b510      	push	{r4, lr}
   24bd2:	4604      	mov	r4, r0
	init_idle_thread(id);
   24bd4:	f7ff ff9e 	bl	24b14 <init_idle_thread>
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   24bd8:	23b8      	movs	r3, #184	; 0xb8
   24bda:	490b      	ldr	r1, [pc, #44]	; (24c08 <z_init_cpu+0x38>)
   24bdc:	fb03 1104 	mla	r1, r3, r4, r1
   24be0:	4a0a      	ldr	r2, [pc, #40]	; (24c0c <z_init_cpu+0x3c>)
   24be2:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   24be6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   24bea:	60d9      	str	r1, [r3, #12]
	_kernel.cpus[id].id = id;
   24bec:	751c      	strb	r4, [r3, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   24bee:	eb04 1144 	add.w	r1, r4, r4, lsl #5
   24bf2:	4b07      	ldr	r3, [pc, #28]	; (24c10 <z_init_cpu+0x40>)
   24bf4:	eb03 1381 	add.w	r3, r3, r1, lsl #6
   24bf8:	f503 6304 	add.w	r3, r3, #2112	; 0x840
	_kernel.cpus[id].irq_stack =
   24bfc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   24c00:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
   24c04:	6053      	str	r3, [r2, #4]
}
   24c06:	bd10      	pop	{r4, pc}
   24c08:	20007868 	.word	0x20007868
   24c0c:	20008f98 	.word	0x20008f98
   24c10:	2000adc0 	.word	0x2000adc0

00024c14 <prepare_multithreading>:
{
   24c14:	b570      	push	{r4, r5, r6, lr}
   24c16:	b086      	sub	sp, #24
	z_sched_init();
   24c18:	f000 ff98 	bl	25b4c <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
   24c1c:	4d10      	ldr	r5, [pc, #64]	; (24c60 <prepare_multithreading+0x4c>)
   24c1e:	4b11      	ldr	r3, [pc, #68]	; (24c64 <prepare_multithreading+0x50>)
   24c20:	61dd      	str	r5, [r3, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   24c22:	4b11      	ldr	r3, [pc, #68]	; (24c68 <prepare_multithreading+0x54>)
   24c24:	9305      	str	r3, [sp, #20]
   24c26:	2301      	movs	r3, #1
   24c28:	9304      	str	r3, [sp, #16]
   24c2a:	2400      	movs	r4, #0
   24c2c:	9403      	str	r4, [sp, #12]
   24c2e:	9402      	str	r4, [sp, #8]
   24c30:	9401      	str	r4, [sp, #4]
   24c32:	9400      	str	r4, [sp, #0]
   24c34:	4b0d      	ldr	r3, [pc, #52]	; (24c6c <prepare_multithreading+0x58>)
   24c36:	f44f 6280 	mov.w	r2, #1024	; 0x400
   24c3a:	490d      	ldr	r1, [pc, #52]	; (24c70 <prepare_multithreading+0x5c>)
   24c3c:	4628      	mov	r0, r5
   24c3e:	f000 f8fb 	bl	24e38 <z_setup_new_thread>
   24c42:	4606      	mov	r6, r0
   24c44:	7b6b      	ldrb	r3, [r5, #13]
   24c46:	f023 0304 	bic.w	r3, r3, #4
   24c4a:	736b      	strb	r3, [r5, #13]
	z_ready_thread(&z_main_thread);
   24c4c:	4628      	mov	r0, r5
   24c4e:	f008 fb92 	bl	2d376 <z_ready_thread>
	z_init_cpu(0);
   24c52:	4620      	mov	r0, r4
   24c54:	f7ff ffbc 	bl	24bd0 <z_init_cpu>
}
   24c58:	4630      	mov	r0, r6
   24c5a:	b006      	add	sp, #24
   24c5c:	bd70      	pop	{r4, r5, r6, pc}
   24c5e:	bf00      	nop
   24c60:	20007920 	.word	0x20007920
   24c64:	20008f98 	.word	0x20008f98
   24c68:	00031250 	.word	0x00031250
   24c6c:	00024b71 	.word	0x00024b71
   24c70:	2000b780 	.word	0x2000b780

00024c74 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   24c74:	b500      	push	{lr}
   24c76:	b0af      	sub	sp, #188	; 0xbc
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   24c78:	2000      	movs	r0, #0
   24c7a:	f7ff ff23 	bl	24ac4 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   24c7e:	4b1f      	ldr	r3, [pc, #124]	; (24cfc <z_cstart+0x88>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   24c80:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   24c84:	4c1e      	ldr	r4, [pc, #120]	; (24d00 <z_cstart+0x8c>)
   24c86:	6963      	ldr	r3, [r4, #20]
   24c88:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   24c8c:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   24c8e:	23e0      	movs	r3, #224	; 0xe0
   24c90:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
   24c94:	2320      	movs	r3, #32
   24c96:	77e3      	strb	r3, [r4, #31]
   24c98:	2500      	movs	r5, #0
   24c9a:	7625      	strb	r5, [r4, #24]
   24c9c:	7665      	strb	r5, [r4, #25]
   24c9e:	76a5      	strb	r5, [r4, #26]
   24ca0:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   24ca4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   24ca6:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   24caa:	6263      	str	r3, [r4, #36]	; 0x24
   24cac:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   24cb0:	f7f3 f8c6 	bl	17e40 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   24cb4:	f7f1 fea0 	bl	169f8 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   24cb8:	f04f 33ff 	mov.w	r3, #4294967295
   24cbc:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   24cbe:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   24cc0:	f7f3 fa80 	bl	181c4 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   24cc4:	f7f3 f970 	bl	17fa8 <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   24cc8:	f7f1 f86a 	bl	15da0 <log_core_init>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
   24ccc:	2401      	movs	r4, #1
   24cce:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   24cd2:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
   24cd6:	9527      	str	r5, [sp, #156]	; 0x9c
	dummy_thread->stack_info.size = 0U;
   24cd8:	9528      	str	r5, [sp, #160]	; 0xa0
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
   24cda:	952a      	str	r5, [sp, #168]	; 0xa8

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   24cdc:	4b09      	ldr	r3, [pc, #36]	; (24d04 <z_cstart+0x90>)
   24cde:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   24ce2:	f7ff fd8f 	bl	24804 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   24ce6:	4620      	mov	r0, r4
   24ce8:	f7ff feec 	bl	24ac4 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   24cec:	2002      	movs	r0, #2
   24cee:	f7ff fee9 	bl	24ac4 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
   24cf2:	f7ff ff8f 	bl	24c14 <prepare_multithreading>
   24cf6:	f7ff ff55 	bl	24ba4 <switch_to_main_thread>
   24cfa:	bf00      	nop
   24cfc:	2000b600 	.word	0x2000b600
   24d00:	e000ed00 	.word	0xe000ed00
   24d04:	20008f98 	.word	0x20008f98

00024d08 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   24d08:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   24d0a:	4c06      	ldr	r4, [pc, #24]	; (24d24 <statics_init+0x1c>)
   24d0c:	e005      	b.n	24d1a <statics_init+0x12>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   24d0e:	68a2      	ldr	r2, [r4, #8]
   24d10:	6861      	ldr	r1, [r4, #4]
   24d12:	4620      	mov	r0, r4
   24d14:	f007 ff31 	bl	2cb7a <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   24d18:	3414      	adds	r4, #20
   24d1a:	4b03      	ldr	r3, [pc, #12]	; (24d28 <statics_init+0x20>)
   24d1c:	429c      	cmp	r4, r3
   24d1e:	d3f6      	bcc.n	24d0e <statics_init+0x6>
		}
	}
	return 0;
}
   24d20:	2000      	movs	r0, #0
   24d22:	bd10      	pop	{r4, pc}
   24d24:	20000bd4 	.word	0x20000bd4
   24d28:	20000bd4 	.word	0x20000bd4

00024d2c <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
   24d2c:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   24d2e:	4c06      	ldr	r4, [pc, #24]	; (24d48 <init_mem_slab_module+0x1c>)
	int rc = 0;
   24d30:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   24d32:	e000      	b.n	24d36 <init_mem_slab_module+0xa>
   24d34:	341c      	adds	r4, #28
   24d36:	4b05      	ldr	r3, [pc, #20]	; (24d4c <init_mem_slab_module+0x20>)
   24d38:	429c      	cmp	r4, r3
   24d3a:	d204      	bcs.n	24d46 <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
   24d3c:	4620      	mov	r0, r4
   24d3e:	f007 ff97 	bl	2cc70 <create_free_list>
		if (rc < 0) {
   24d42:	2800      	cmp	r0, #0
   24d44:	daf6      	bge.n	24d34 <init_mem_slab_module+0x8>
		z_object_init(slab);
	}

out:
	return rc;
}
   24d46:	bd10      	pop	{r4, pc}
   24d48:	20000b80 	.word	0x20000b80
   24d4c:	20000bd4 	.word	0x20000bd4

00024d50 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   24d50:	b530      	push	{r4, r5, lr}
   24d52:	b083      	sub	sp, #12
   24d54:	460d      	mov	r5, r1
	__asm__ volatile(
   24d56:	f04f 0140 	mov.w	r1, #64	; 0x40
   24d5a:	f3ef 8c11 	mrs	ip, BASEPRI
   24d5e:	f381 8812 	msr	BASEPRI_MAX, r1
   24d62:	f3bf 8f6f 	isb	sy
   24d66:	4661      	mov	r1, ip
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   24d68:	6944      	ldr	r4, [r0, #20]
   24d6a:	b164      	cbz	r4, 24d86 <k_mem_slab_alloc+0x36>
		/* take a free block */
		*mem = slab->free_list;
   24d6c:	602c      	str	r4, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
   24d6e:	6823      	ldr	r3, [r4, #0]
   24d70:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   24d72:	6983      	ldr	r3, [r0, #24]
   24d74:	3301      	adds	r3, #1
   24d76:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   24d78:	2000      	movs	r0, #0
	__asm__ volatile(
   24d7a:	f381 8811 	msr	BASEPRI, r1
   24d7e:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
   24d82:	b003      	add	sp, #12
   24d84:	bd30      	pop	{r4, r5, pc}
   24d86:	f100 0e08 	add.w	lr, r0, #8
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   24d8a:	ea53 0402 	orrs.w	r4, r3, r2
   24d8e:	d104      	bne.n	24d9a <k_mem_slab_alloc+0x4a>
		*mem = NULL;
   24d90:	2300      	movs	r3, #0
   24d92:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
   24d94:	f06f 000b 	mvn.w	r0, #11
   24d98:	e7ef      	b.n	24d7a <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   24d9a:	9200      	str	r2, [sp, #0]
   24d9c:	9301      	str	r3, [sp, #4]
   24d9e:	4602      	mov	r2, r0
   24da0:	4670      	mov	r0, lr
   24da2:	f000 fdcd 	bl	25940 <z_pend_curr>
		if (result == 0) {
   24da6:	2800      	cmp	r0, #0
   24da8:	d1eb      	bne.n	24d82 <k_mem_slab_alloc+0x32>
			*mem = _current->base.swap_data;
   24daa:	4b02      	ldr	r3, [pc, #8]	; (24db4 <k_mem_slab_alloc+0x64>)
   24dac:	689b      	ldr	r3, [r3, #8]
   24dae:	695b      	ldr	r3, [r3, #20]
   24db0:	602b      	str	r3, [r5, #0]
		return result;
   24db2:	e7e6      	b.n	24d82 <k_mem_slab_alloc+0x32>
   24db4:	20008f98 	.word	0x20008f98

00024db8 <z_thread_monitor_exit>:
	__asm__ volatile(
   24db8:	f04f 0340 	mov.w	r3, #64	; 0x40
   24dbc:	f3ef 8111 	mrs	r1, BASEPRI
   24dc0:	f383 8812 	msr	BASEPRI_MAX, r3
   24dc4:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
   24dc8:	4b0a      	ldr	r3, [pc, #40]	; (24df4 <z_thread_monitor_exit+0x3c>)
   24dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   24dcc:	4283      	cmp	r3, r0
   24dce:	d104      	bne.n	24dda <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
   24dd0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
   24dd2:	4b08      	ldr	r3, [pc, #32]	; (24df4 <z_thread_monitor_exit+0x3c>)
   24dd4:	629a      	str	r2, [r3, #40]	; 0x28
   24dd6:	e007      	b.n	24de8 <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
   24dd8:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
   24dda:	b113      	cbz	r3, 24de2 <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
   24ddc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
		while ((prev_thread != NULL) &&
   24dde:	4282      	cmp	r2, r0
   24de0:	d1fa      	bne.n	24dd8 <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
   24de2:	b10b      	cbz	r3, 24de8 <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
   24de4:	6f42      	ldr	r2, [r0, #116]	; 0x74
   24de6:	675a      	str	r2, [r3, #116]	; 0x74
	__asm__ volatile(
   24de8:	f381 8811 	msr	BASEPRI, r1
   24dec:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
   24df0:	4770      	bx	lr
   24df2:	bf00      	nop
   24df4:	20008f98 	.word	0x20008f98

00024df8 <z_impl_k_thread_name_set>:
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
   24df8:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
   24dfa:	4604      	mov	r4, r0
   24dfc:	b140      	cbz	r0, 24e10 <z_impl_k_thread_name_set+0x18>
		thread = _current;
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN - 1);
   24dfe:	221f      	movs	r2, #31
   24e00:	f104 0078 	add.w	r0, r4, #120	; 0x78
   24e04:	f003 fbf3 	bl	285ee <strncpy>
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   24e08:	2000      	movs	r0, #0
   24e0a:	f884 0097 	strb.w	r0, [r4, #151]	; 0x97

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
   24e0e:	bd10      	pop	{r4, pc}
		thread = _current;
   24e10:	4b01      	ldr	r3, [pc, #4]	; (24e18 <z_impl_k_thread_name_set+0x20>)
   24e12:	689c      	ldr	r4, [r3, #8]
   24e14:	e7f3      	b.n	24dfe <z_impl_k_thread_name_set+0x6>
   24e16:	bf00      	nop
   24e18:	20008f98 	.word	0x20008f98

00024e1c <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
   24e1c:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   24e1e:	ea53 0102 	orrs.w	r1, r3, r2
   24e22:	d102      	bne.n	24e2a <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
   24e24:	f007 ff85 	bl	2cd32 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
   24e28:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   24e2a:	4902      	ldr	r1, [pc, #8]	; (24e34 <schedule_new_thread+0x18>)
   24e2c:	3018      	adds	r0, #24
   24e2e:	f001 f83f 	bl	25eb0 <z_add_timeout>
   24e32:	e7f9      	b.n	24e28 <schedule_new_thread+0xc>
   24e34:	0002d3af 	.word	0x0002d3af

00024e38 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   24e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24e3c:	b085      	sub	sp, #20
   24e3e:	4604      	mov	r4, r0
   24e40:	460f      	mov	r7, r1
   24e42:	4615      	mov	r5, r2
   24e44:	461e      	mov	r6, r3
   24e46:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   24e4a:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   24e4e:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   24e52:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   24e56:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   24e5a:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
   24e5c:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
   24e5e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   24e60:	2204      	movs	r2, #4
   24e62:	9911      	ldr	r1, [sp, #68]	; 0x44
   24e64:	f007 ff69 	bl	2cd3a <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
   24e68:	462a      	mov	r2, r5
   24e6a:	4639      	mov	r1, r7
   24e6c:	4620      	mov	r0, r4
   24e6e:	f007 ff45 	bl	2ccfc <setup_thread_stack>
   24e72:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   24e74:	f8cd 8008 	str.w	r8, [sp, #8]
   24e78:	f8cd 9004 	str.w	r9, [sp, #4]
   24e7c:	f8cd a000 	str.w	sl, [sp]
   24e80:	4633      	mov	r3, r6
   24e82:	4602      	mov	r2, r0
   24e84:	4639      	mov	r1, r7
   24e86:	4620      	mov	r0, r4
   24e88:	f7f1 ff7e 	bl	16d88 <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
   24e8c:	2300      	movs	r3, #0
   24e8e:	6563      	str	r3, [r4, #84]	; 0x54
#ifdef CONFIG_THREAD_CUSTOM_DATA
	/* Initialize custom data field (value is opaque to kernel) */
	new_thread->custom_data = NULL;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
   24e90:	6666      	str	r6, [r4, #100]	; 0x64
	new_thread->entry.parameter1 = p1;
   24e92:	f8c4 a068 	str.w	sl, [r4, #104]	; 0x68
	new_thread->entry.parameter2 = p2;
   24e96:	f8c4 906c 	str.w	r9, [r4, #108]	; 0x6c
	new_thread->entry.parameter3 = p3;
   24e9a:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
	__asm__ volatile(
   24e9e:	f04f 0340 	mov.w	r3, #64	; 0x40
   24ea2:	f3ef 8211 	mrs	r2, BASEPRI
   24ea6:	f383 8812 	msr	BASEPRI_MAX, r3
   24eaa:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
   24eae:	4b13      	ldr	r3, [pc, #76]	; (24efc <z_setup_new_thread+0xc4>)
   24eb0:	6a99      	ldr	r1, [r3, #40]	; 0x28
   24eb2:	6761      	str	r1, [r4, #116]	; 0x74
	_kernel.threads = new_thread;
   24eb4:	629c      	str	r4, [r3, #40]	; 0x28
	__asm__ volatile(
   24eb6:	f382 8811 	msr	BASEPRI, r2
   24eba:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
   24ebe:	f1bb 0f00 	cmp.w	fp, #0
   24ec2:	d013      	beq.n	24eec <z_setup_new_thread+0xb4>
		strncpy(new_thread->name, name,
   24ec4:	221f      	movs	r2, #31
   24ec6:	4659      	mov	r1, fp
   24ec8:	f104 0078 	add.w	r0, r4, #120	; 0x78
   24ecc:	f003 fb8f 	bl	285ee <strncpy>
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   24ed0:	2300      	movs	r3, #0
   24ed2:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
		new_thread->base.cpu_mask = -1; /* allow all cpus */
	}
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   24ed6:	4b09      	ldr	r3, [pc, #36]	; (24efc <z_setup_new_thread+0xc4>)
   24ed8:	689b      	ldr	r3, [r3, #8]
   24eda:	b15b      	cbz	r3, 24ef4 <z_setup_new_thread+0xbc>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   24edc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   24ee0:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
#endif

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, create, new_thread);

	return stack_ptr;
}
   24ee4:	4628      	mov	r0, r5
   24ee6:	b005      	add	sp, #20
   24ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
   24eec:	2300      	movs	r3, #0
   24eee:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   24ef2:	e7f0      	b.n	24ed6 <z_setup_new_thread+0x9e>
		new_thread->resource_pool = NULL;
   24ef4:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
		return stack_ptr;
   24ef8:	e7f4      	b.n	24ee4 <z_setup_new_thread+0xac>
   24efa:	bf00      	nop
   24efc:	20008f98 	.word	0x20008f98

00024f00 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
   24f00:	b530      	push	{r4, r5, lr}
   24f02:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   24f04:	4c21      	ldr	r4, [pc, #132]	; (24f8c <z_init_static_threads+0x8c>)
   24f06:	e014      	b.n	24f32 <z_init_static_threads+0x32>
		z_setup_new_thread(
   24f08:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   24f0a:	9305      	str	r3, [sp, #20]
   24f0c:	6a23      	ldr	r3, [r4, #32]
   24f0e:	9304      	str	r3, [sp, #16]
   24f10:	69e3      	ldr	r3, [r4, #28]
   24f12:	9303      	str	r3, [sp, #12]
   24f14:	69a3      	ldr	r3, [r4, #24]
   24f16:	9302      	str	r3, [sp, #8]
   24f18:	6963      	ldr	r3, [r4, #20]
   24f1a:	9301      	str	r3, [sp, #4]
   24f1c:	6923      	ldr	r3, [r4, #16]
   24f1e:	9300      	str	r3, [sp, #0]
   24f20:	68e3      	ldr	r3, [r4, #12]
   24f22:	68a2      	ldr	r2, [r4, #8]
   24f24:	6861      	ldr	r1, [r4, #4]
   24f26:	6820      	ldr	r0, [r4, #0]
   24f28:	f7ff ff86 	bl	24e38 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
   24f2c:	6823      	ldr	r3, [r4, #0]
   24f2e:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   24f30:	3430      	adds	r4, #48	; 0x30
   24f32:	4b17      	ldr	r3, [pc, #92]	; (24f90 <z_init_static_threads+0x90>)
   24f34:	429c      	cmp	r4, r3
   24f36:	d3e7      	bcc.n	24f08 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
   24f38:	f000 fbb4 	bl	256a4 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   24f3c:	4c13      	ldr	r4, [pc, #76]	; (24f8c <z_init_static_threads+0x8c>)
   24f3e:	e000      	b.n	24f42 <z_init_static_threads+0x42>
   24f40:	3430      	adds	r4, #48	; 0x30
   24f42:	4b13      	ldr	r3, [pc, #76]	; (24f90 <z_init_static_threads+0x90>)
   24f44:	429c      	cmp	r4, r3
   24f46:	d21c      	bcs.n	24f82 <z_init_static_threads+0x82>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   24f48:	6a60      	ldr	r0, [r4, #36]	; 0x24
   24f4a:	f1b0 3fff 	cmp.w	r0, #4294967295
   24f4e:	d0f7      	beq.n	24f40 <z_init_static_threads+0x40>
			schedule_new_thread(thread_data->init_thread,
   24f50:	6825      	ldr	r5, [r4, #0]
					    K_MSEC(thread_data->init_delay));
   24f52:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   24f56:	17c1      	asrs	r1, r0, #31
   24f58:	03c9      	lsls	r1, r1, #15
   24f5a:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   24f5e:	03c0      	lsls	r0, r0, #15
   24f60:	f240 33e7 	movw	r3, #999	; 0x3e7
   24f64:	18c0      	adds	r0, r0, r3
   24f66:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   24f6a:	f04f 0300 	mov.w	r3, #0
   24f6e:	f141 0100 	adc.w	r1, r1, #0
   24f72:	f7db f8c5 	bl	100 <__aeabi_uldivmod>
   24f76:	4602      	mov	r2, r0
   24f78:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
   24f7a:	4628      	mov	r0, r5
   24f7c:	f7ff ff4e 	bl	24e1c <schedule_new_thread>
   24f80:	e7de      	b.n	24f40 <z_init_static_threads+0x40>
		}
	}
	k_sched_unlock();
   24f82:	f000 fd91 	bl	25aa8 <k_sched_unlock>
}
   24f86:	b007      	add	sp, #28
   24f88:	bd30      	pop	{r4, r5, pc}
   24f8a:	bf00      	nop
   24f8c:	0002dde8 	.word	0x0002dde8
   24f90:	0002dde8 	.word	0x0002dde8

00024f94 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   24f94:	b508      	push	{r3, lr}
   24f96:	e001      	b.n	24f9c <idle+0x8>
	arch_cpu_idle();
   24f98:	f7f1 fd34 	bl	16a04 <arch_cpu_idle>
	__asm__ volatile(
   24f9c:	f04f 0240 	mov.w	r2, #64	; 0x40
   24fa0:	f3ef 8311 	mrs	r3, BASEPRI
   24fa4:	f382 8812 	msr	BASEPRI_MAX, r2
   24fa8:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   24fac:	f008 fb31 	bl	2d612 <z_get_next_timeout_expiry>
   24fb0:	4b05      	ldr	r3, [pc, #20]	; (24fc8 <idle+0x34>)
   24fb2:	6198      	str	r0, [r3, #24]
	return !z_sys_post_kernel;
   24fb4:	4b05      	ldr	r3, [pc, #20]	; (24fcc <idle+0x38>)
   24fb6:	781b      	ldrb	r3, [r3, #0]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   24fb8:	2b00      	cmp	r3, #0
   24fba:	d0ed      	beq.n	24f98 <idle+0x4>
   24fbc:	f7f1 fb8a 	bl	166d4 <pm_system_suspend>
   24fc0:	2800      	cmp	r0, #0
   24fc2:	d1eb      	bne.n	24f9c <idle+0x8>
   24fc4:	e7e8      	b.n	24f98 <idle+0x4>
   24fc6:	bf00      	nop
   24fc8:	20008f98 	.word	0x20008f98
   24fcc:	20008fe6 	.word	0x20008fe6

00024fd0 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   24fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24fd4:	b082      	sub	sp, #8
   24fd6:	4604      	mov	r4, r0
   24fd8:	461e      	mov	r6, r3
   24fda:	f04f 0340 	mov.w	r3, #64	; 0x40
   24fde:	f3ef 8511 	mrs	r5, BASEPRI
   24fe2:	f383 8812 	msr	BASEPRI_MAX, r3
   24fe6:	f3bf 8f6f 	isb	sy
   24fea:	462b      	mov	r3, r5

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   24fec:	68c1      	ldr	r1, [r0, #12]
   24fee:	b999      	cbnz	r1, 25018 <z_impl_k_mutex_lock+0x48>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
   24ff0:	2900      	cmp	r1, #0
   24ff2:	d151      	bne.n	25098 <z_impl_k_mutex_lock+0xc8>
   24ff4:	4a36      	ldr	r2, [pc, #216]	; (250d0 <z_impl_k_mutex_lock+0x100>)
   24ff6:	6892      	ldr	r2, [r2, #8]
   24ff8:	f992 200e 	ldrsb.w	r2, [r2, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   24ffc:	6122      	str	r2, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
   24ffe:	3101      	adds	r1, #1
   25000:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
   25002:	4a33      	ldr	r2, [pc, #204]	; (250d0 <z_impl_k_mutex_lock+0x100>)
   25004:	6892      	ldr	r2, [r2, #8]
   25006:	60a2      	str	r2, [r4, #8]
	__asm__ volatile(
   25008:	f383 8811 	msr	BASEPRI, r3
   2500c:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
   25010:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   25012:	b002      	add	sp, #8
   25014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25018:	4617      	mov	r7, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   2501a:	6880      	ldr	r0, [r0, #8]
   2501c:	4a2c      	ldr	r2, [pc, #176]	; (250d0 <z_impl_k_mutex_lock+0x100>)
   2501e:	6892      	ldr	r2, [r2, #8]
   25020:	4290      	cmp	r0, r2
   25022:	d0e5      	beq.n	24ff0 <z_impl_k_mutex_lock+0x20>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   25024:	ea56 0107 	orrs.w	r1, r6, r7
   25028:	d038      	beq.n	2509c <z_impl_k_mutex_lock+0xcc>
					    mutex->owner->base.prio);
   2502a:	f990 800e 	ldrsb.w	r8, [r0, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
   2502e:	4641      	mov	r1, r8
   25030:	f992 000e 	ldrsb.w	r0, [r2, #14]
   25034:	f007 feb4 	bl	2cda0 <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   25038:	4580      	cmp	r8, r0
   2503a:	dc36      	bgt.n	250aa <z_impl_k_mutex_lock+0xda>
	bool resched = false;
   2503c:	f04f 0800 	mov.w	r8, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   25040:	9700      	str	r7, [sp, #0]
   25042:	9601      	str	r6, [sp, #4]
   25044:	4622      	mov	r2, r4
   25046:	4629      	mov	r1, r5
   25048:	4822      	ldr	r0, [pc, #136]	; (250d4 <z_impl_k_mutex_lock+0x104>)
   2504a:	f000 fc79 	bl	25940 <z_pend_curr>
	if (got_mutex == 0) {
   2504e:	2800      	cmp	r0, #0
   25050:	d0df      	beq.n	25012 <z_impl_k_mutex_lock+0x42>
	__asm__ volatile(
   25052:	f04f 0340 	mov.w	r3, #64	; 0x40
   25056:	f3ef 8511 	mrs	r5, BASEPRI
   2505a:	f383 8812 	msr	BASEPRI_MAX, r3
   2505e:	f3bf 8f6f 	isb	sy
   25062:	462e      	mov	r6, r5
	if (likely(mutex->owner != NULL)) {
   25064:	68a3      	ldr	r3, [r4, #8]
   25066:	b343      	cbz	r3, 250ba <z_impl_k_mutex_lock+0xea>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   25068:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2506a:	429c      	cmp	r4, r3
   2506c:	d023      	beq.n	250b6 <z_impl_k_mutex_lock+0xe6>
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   2506e:	b313      	cbz	r3, 250b6 <z_impl_k_mutex_lock+0xe6>
   25070:	6921      	ldr	r1, [r4, #16]
   25072:	f993 000e 	ldrsb.w	r0, [r3, #14]
   25076:	f007 fe93 	bl	2cda0 <new_prio_for_inheritance>
   2507a:	4601      	mov	r1, r0
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   2507c:	4620      	mov	r0, r4
   2507e:	f007 fe9a 	bl	2cdb6 <adjust_owner_prio>
   25082:	b9e8      	cbnz	r0, 250c0 <z_impl_k_mutex_lock+0xf0>
   25084:	f1b8 0f00 	cmp.w	r8, #0
   25088:	d11a      	bne.n	250c0 <z_impl_k_mutex_lock+0xf0>
	__asm__ volatile(
   2508a:	f386 8811 	msr	BASEPRI, r6
   2508e:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
   25092:	f06f 000a 	mvn.w	r0, #10
   25096:	e7bc      	b.n	25012 <z_impl_k_mutex_lock+0x42>
					_current->base.prio :
   25098:	6922      	ldr	r2, [r4, #16]
   2509a:	e7af      	b.n	24ffc <z_impl_k_mutex_lock+0x2c>
   2509c:	f385 8811 	msr	BASEPRI, r5
   250a0:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   250a4:	f06f 000f 	mvn.w	r0, #15
   250a8:	e7b3      	b.n	25012 <z_impl_k_mutex_lock+0x42>
		resched = adjust_owner_prio(mutex, new_prio);
   250aa:	4601      	mov	r1, r0
   250ac:	4620      	mov	r0, r4
   250ae:	f007 fe82 	bl	2cdb6 <adjust_owner_prio>
   250b2:	4680      	mov	r8, r0
   250b4:	e7c4      	b.n	25040 <z_impl_k_mutex_lock+0x70>
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   250b6:	6921      	ldr	r1, [r4, #16]
   250b8:	e7e0      	b.n	2507c <z_impl_k_mutex_lock+0xac>
	if (resched) {
   250ba:	f1b8 0f00 	cmp.w	r8, #0
   250be:	d0e4      	beq.n	2508a <z_impl_k_mutex_lock+0xba>
		z_reschedule(&lock, key);
   250c0:	4629      	mov	r1, r5
   250c2:	4804      	ldr	r0, [pc, #16]	; (250d4 <z_impl_k_mutex_lock+0x104>)
   250c4:	f000 fad8 	bl	25678 <z_reschedule>
	return -EAGAIN;
   250c8:	f06f 000a 	mvn.w	r0, #10
   250cc:	e7a1      	b.n	25012 <z_impl_k_mutex_lock+0x42>
   250ce:	bf00      	nop
   250d0:	20008f98 	.word	0x20008f98
   250d4:	20008fc4 	.word	0x20008fc4

000250d8 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   250d8:	6883      	ldr	r3, [r0, #8]
   250da:	b38b      	cbz	r3, 25140 <z_impl_k_mutex_unlock+0x68>
{
   250dc:	b570      	push	{r4, r5, r6, lr}
   250de:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   250e0:	4a1a      	ldr	r2, [pc, #104]	; (2514c <z_impl_k_mutex_unlock+0x74>)
   250e2:	6892      	ldr	r2, [r2, #8]
   250e4:	4293      	cmp	r3, r2
   250e6:	d12e      	bne.n	25146 <z_impl_k_mutex_unlock+0x6e>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   250e8:	68c3      	ldr	r3, [r0, #12]
   250ea:	2b01      	cmp	r3, #1
   250ec:	d903      	bls.n	250f6 <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
   250ee:	3b01      	subs	r3, #1
   250f0:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   250f2:	2000      	movs	r0, #0
}
   250f4:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   250f6:	f04f 0340 	mov.w	r3, #64	; 0x40
   250fa:	f3ef 8511 	mrs	r5, BASEPRI
   250fe:	f383 8812 	msr	BASEPRI_MAX, r3
   25102:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   25106:	6901      	ldr	r1, [r0, #16]
   25108:	f007 fe55 	bl	2cdb6 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   2510c:	4620      	mov	r0, r4
   2510e:	f008 f9e7 	bl	2d4e0 <z_unpend_first_thread>
	mutex->owner = new_owner;
   25112:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   25114:	b168      	cbz	r0, 25132 <z_impl_k_mutex_unlock+0x5a>
		mutex->owner_orig_prio = new_owner->base.prio;
   25116:	f990 300e 	ldrsb.w	r3, [r0, #14]
   2511a:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   2511c:	2400      	movs	r4, #0
   2511e:	f8c0 40b0 	str.w	r4, [r0, #176]	; 0xb0
		z_ready_thread(new_owner);
   25122:	f008 f928 	bl	2d376 <z_ready_thread>
		z_reschedule(&lock, key);
   25126:	4629      	mov	r1, r5
   25128:	4809      	ldr	r0, [pc, #36]	; (25150 <z_impl_k_mutex_unlock+0x78>)
   2512a:	f000 faa5 	bl	25678 <z_reschedule>
	return 0;
   2512e:	4620      	mov	r0, r4
   25130:	e7e0      	b.n	250f4 <z_impl_k_mutex_unlock+0x1c>
		mutex->lock_count = 0U;
   25132:	2000      	movs	r0, #0
   25134:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   25136:	f385 8811 	msr	BASEPRI, r5
   2513a:	f3bf 8f6f 	isb	sy
   2513e:	e7d9      	b.n	250f4 <z_impl_k_mutex_unlock+0x1c>
		return -EINVAL;
   25140:	f06f 0015 	mvn.w	r0, #21
}
   25144:	4770      	bx	lr
		return -EPERM;
   25146:	f04f 30ff 	mov.w	r0, #4294967295
   2514a:	e7d3      	b.n	250f4 <z_impl_k_mutex_unlock+0x1c>
   2514c:	20008f98 	.word	0x20008f98
   25150:	20008fc4 	.word	0x20008fc4

00025154 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   25154:	b510      	push	{r4, lr}
   25156:	b082      	sub	sp, #8
   25158:	4684      	mov	ip, r0
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2515a:	4686      	mov	lr, r0
	__asm__ volatile(
   2515c:	f04f 0040 	mov.w	r0, #64	; 0x40
   25160:	f3ef 8111 	mrs	r1, BASEPRI
   25164:	f380 8812 	msr	BASEPRI_MAX, r0
   25168:	f3bf 8f6f 	isb	sy
   2516c:	460c      	mov	r4, r1
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   2516e:	f85e 0b08 	ldr.w	r0, [lr], #8
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   25172:	b1a0      	cbz	r0, 2519e <z_impl_k_queue_get+0x4a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   25174:	6803      	ldr	r3, [r0, #0]
   25176:	f023 0303 	bic.w	r3, r3, #3
	list->head = node;
   2517a:	f8cc 3000 	str.w	r3, [ip]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   2517e:	f8dc 2004 	ldr.w	r2, [ip, #4]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   25182:	4290      	cmp	r0, r2
   25184:	d008      	beq.n	25198 <z_impl_k_queue_get+0x44>
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   25186:	2101      	movs	r1, #1
   25188:	f007 feab 	bl	2cee2 <z_queue_node_peek>
	__asm__ volatile(
   2518c:	f384 8811 	msr	BASEPRI, r4
   25190:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   25194:	b002      	add	sp, #8
   25196:	bd10      	pop	{r4, pc}
	list->tail = node;
   25198:	f8cc 3004 	str.w	r3, [ip, #4]
}
   2519c:	e7f3      	b.n	25186 <z_impl_k_queue_get+0x32>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2519e:	ea53 0002 	orrs.w	r0, r3, r2
   251a2:	d00a      	beq.n	251ba <z_impl_k_queue_get+0x66>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   251a4:	9200      	str	r2, [sp, #0]
   251a6:	9301      	str	r3, [sp, #4]
   251a8:	4672      	mov	r2, lr
   251aa:	4670      	mov	r0, lr
   251ac:	f000 fbc8 	bl	25940 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   251b0:	b948      	cbnz	r0, 251c6 <z_impl_k_queue_get+0x72>
   251b2:	4b06      	ldr	r3, [pc, #24]	; (251cc <z_impl_k_queue_get+0x78>)
   251b4:	689b      	ldr	r3, [r3, #8]
   251b6:	6958      	ldr	r0, [r3, #20]
   251b8:	e7ec      	b.n	25194 <z_impl_k_queue_get+0x40>
   251ba:	f381 8811 	msr	BASEPRI, r1
   251be:	f3bf 8f6f 	isb	sy
		return NULL;
   251c2:	2000      	movs	r0, #0
   251c4:	e7e6      	b.n	25194 <z_impl_k_queue_get+0x40>
	return (ret != 0) ? NULL : _current->base.swap_data;
   251c6:	2000      	movs	r0, #0
   251c8:	e7e4      	b.n	25194 <z_impl_k_queue_get+0x40>
   251ca:	bf00      	nop
   251cc:	20008f98 	.word	0x20008f98

000251d0 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   251d0:	b538      	push	{r3, r4, r5, lr}
   251d2:	4604      	mov	r4, r0
	__asm__ volatile(
   251d4:	f04f 0340 	mov.w	r3, #64	; 0x40
   251d8:	f3ef 8511 	mrs	r5, BASEPRI
   251dc:	f383 8812 	msr	BASEPRI_MAX, r3
   251e0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   251e4:	f008 f97c 	bl	2d4e0 <z_unpend_first_thread>

	if (thread != NULL) {
   251e8:	b148      	cbz	r0, 251fe <z_impl_k_sem_give+0x2e>
   251ea:	2200      	movs	r2, #0
   251ec:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   251f0:	f008 f8c1 	bl	2d376 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   251f4:	4629      	mov	r1, r5
   251f6:	4809      	ldr	r0, [pc, #36]	; (2521c <z_impl_k_sem_give+0x4c>)
   251f8:	f000 fa3e 	bl	25678 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   251fc:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   251fe:	68a3      	ldr	r3, [r4, #8]
   25200:	68e2      	ldr	r2, [r4, #12]
   25202:	4293      	cmp	r3, r2
   25204:	d008      	beq.n	25218 <z_impl_k_sem_give+0x48>
   25206:	2201      	movs	r2, #1
   25208:	4413      	add	r3, r2
   2520a:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   2520c:	2102      	movs	r1, #2
   2520e:	f104 0010 	add.w	r0, r4, #16
   25212:	f008 fc42 	bl	2da9a <z_handle_obj_poll_events>
}
   25216:	e7ed      	b.n	251f4 <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   25218:	2200      	movs	r2, #0
   2521a:	e7f5      	b.n	25208 <z_impl_k_sem_give+0x38>
   2521c:	20008fc4 	.word	0x20008fc4

00025220 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   25220:	b510      	push	{r4, lr}
   25222:	b082      	sub	sp, #8
   25224:	f04f 0440 	mov.w	r4, #64	; 0x40
   25228:	f3ef 8111 	mrs	r1, BASEPRI
   2522c:	f384 8812 	msr	BASEPRI_MAX, r4
   25230:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   25234:	6884      	ldr	r4, [r0, #8]
   25236:	b144      	cbz	r4, 2524a <z_impl_k_sem_take+0x2a>
		sem->count--;
   25238:	3c01      	subs	r4, #1
   2523a:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   2523c:	f381 8811 	msr	BASEPRI, r1
   25240:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   25244:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   25246:	b002      	add	sp, #8
   25248:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2524a:	ea53 0402 	orrs.w	r4, r3, r2
   2524e:	d006      	beq.n	2525e <z_impl_k_sem_take+0x3e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   25250:	9200      	str	r2, [sp, #0]
   25252:	9301      	str	r3, [sp, #4]
   25254:	4602      	mov	r2, r0
   25256:	4805      	ldr	r0, [pc, #20]	; (2526c <z_impl_k_sem_take+0x4c>)
   25258:	f000 fb72 	bl	25940 <z_pend_curr>
	return ret;
   2525c:	e7f3      	b.n	25246 <z_impl_k_sem_take+0x26>
   2525e:	f381 8811 	msr	BASEPRI, r1
   25262:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   25266:	f06f 000f 	mvn.w	r0, #15
   2526a:	e7ec      	b.n	25246 <z_impl_k_sem_take+0x26>
   2526c:	20008fc4 	.word	0x20008fc4

00025270 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   25270:	b510      	push	{r4, lr}
   25272:	b084      	sub	sp, #16
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   25274:	4b08      	ldr	r3, [pc, #32]	; (25298 <k_sys_work_q_init+0x28>)
   25276:	9302      	str	r3, [sp, #8]
   25278:	2400      	movs	r4, #0
   2527a:	f88d 400c 	strb.w	r4, [sp, #12]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   2527e:	ab02      	add	r3, sp, #8
   25280:	9300      	str	r3, [sp, #0]
   25282:	f04f 33ff 	mov.w	r3, #4294967295
   25286:	f44f 6200 	mov.w	r2, #2048	; 0x800
   2528a:	4904      	ldr	r1, [pc, #16]	; (2529c <k_sys_work_q_init+0x2c>)
   2528c:	4804      	ldr	r0, [pc, #16]	; (252a0 <k_sys_work_q_init+0x30>)
   2528e:	f000 f929 	bl	254e4 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   25292:	4620      	mov	r0, r4
   25294:	b004      	add	sp, #16
   25296:	bd10      	pop	{r4, pc}
   25298:	00031274 	.word	0x00031274
   2529c:	2000bbc0 	.word	0x2000bbc0
   252a0:	200079d8 	.word	0x200079d8

000252a4 <queue_submit_locked>:
 * @retval -EBUSY if the submission was rejected (draining, plugged)
 */
static inline int queue_submit_locked(struct k_work_q *queue,
				      struct k_work *work)
{
	if (queue == NULL) {
   252a4:	b370      	cbz	r0, 25304 <queue_submit_locked+0x60>
{
   252a6:	b538      	push	{r3, r4, r5, lr}
   252a8:	460d      	mov	r5, r1
   252aa:	4604      	mov	r4, r0
		return -EINVAL;
	}

	int ret = -EBUSY;
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   252ac:	4b1b      	ldr	r3, [pc, #108]	; (2531c <queue_submit_locked+0x78>)
   252ae:	689b      	ldr	r3, [r3, #8]
   252b0:	4283      	cmp	r3, r0
   252b2:	d01b      	beq.n	252ec <queue_submit_locked+0x48>
   252b4:	2300      	movs	r3, #0
   252b6:	461a      	mov	r2, r3
	return (*flagp & BIT(bit)) != 0U;
   252b8:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
   252bc:	f3c3 0180 	ubfx	r1, r3, #2, #1
   252c0:	f3c3 00c0 	ubfx	r0, r3, #3, #1
	 * * -ENODEV if the queue isn't running.
	 * * -EBUSY if draining and not chained
	 * * -EBUSY if plugged and not draining
	 * * otherwise OK
	 */
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   252c4:	f013 0f01 	tst.w	r3, #1
   252c8:	d01f      	beq.n	2530a <queue_submit_locked+0x66>
		ret = -ENODEV;
	} else if (draining && !chained) {
   252ca:	b101      	cbz	r1, 252ce <queue_submit_locked+0x2a>
   252cc:	b302      	cbz	r2, 25310 <queue_submit_locked+0x6c>
		ret = -EBUSY;
	} else if (plugged && !draining) {
   252ce:	b100      	cbz	r0, 252d2 <queue_submit_locked+0x2e>
   252d0:	b309      	cbz	r1, 25316 <queue_submit_locked+0x72>
	parent->next = child;
   252d2:	2300      	movs	r3, #0
   252d4:	602b      	str	r3, [r5, #0]
	return list->tail;
   252d6:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
Z_GENLIST_APPEND(slist, snode)
   252da:	b173      	cbz	r3, 252fa <queue_submit_locked+0x56>
	parent->next = child;
   252dc:	601d      	str	r5, [r3, #0]
	list->tail = node;
   252de:	f8c4 50bc 	str.w	r5, [r4, #188]	; 0xbc
		ret = -EBUSY;
	} else {
		sys_slist_append(&queue->pending, &work->node);
		ret = 1;
		(void)notify_queue_locked(queue);
   252e2:	4620      	mov	r0, r4
   252e4:	f007 fe87 	bl	2cff6 <notify_queue_locked>
		ret = 1;
   252e8:	2001      	movs	r0, #1
	}

	return ret;
}
   252ea:	bd38      	pop	{r3, r4, r5, pc}
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   252ec:	f007 fd19 	bl	2cd22 <k_is_in_isr>
   252f0:	b908      	cbnz	r0, 252f6 <queue_submit_locked+0x52>
   252f2:	2301      	movs	r3, #1
   252f4:	e7df      	b.n	252b6 <queue_submit_locked+0x12>
   252f6:	2300      	movs	r3, #0
   252f8:	e7dd      	b.n	252b6 <queue_submit_locked+0x12>
   252fa:	f8c4 50bc 	str.w	r5, [r4, #188]	; 0xbc
	list->head = node;
   252fe:	f8c4 50b8 	str.w	r5, [r4, #184]	; 0xb8
}
   25302:	e7ee      	b.n	252e2 <queue_submit_locked+0x3e>
		return -EINVAL;
   25304:	f06f 0015 	mvn.w	r0, #21
}
   25308:	4770      	bx	lr
		ret = -ENODEV;
   2530a:	f06f 0012 	mvn.w	r0, #18
   2530e:	e7ec      	b.n	252ea <queue_submit_locked+0x46>
		ret = -EBUSY;
   25310:	f06f 000f 	mvn.w	r0, #15
   25314:	e7e9      	b.n	252ea <queue_submit_locked+0x46>
		ret = -EBUSY;
   25316:	f06f 000f 	mvn.w	r0, #15
   2531a:	e7e6      	b.n	252ea <queue_submit_locked+0x46>
   2531c:	20008f98 	.word	0x20008f98

00025320 <finalize_cancel_locked>:
{
   25320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25322:	4606      	mov	r6, r0
	*flagp &= ~BIT(bit);
   25324:	68c3      	ldr	r3, [r0, #12]
   25326:	f023 0302 	bic.w	r3, r3, #2
   2532a:	60c3      	str	r3, [r0, #12]
	return list->head;
   2532c:	4b13      	ldr	r3, [pc, #76]	; (2537c <finalize_cancel_locked+0x5c>)
   2532e:	681d      	ldr	r5, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   25330:	b185      	cbz	r5, 25354 <finalize_cancel_locked+0x34>
	return node->next;
   25332:	682c      	ldr	r4, [r5, #0]
   25334:	b104      	cbz	r4, 25338 <finalize_cancel_locked+0x18>
Z_GENLIST_PEEK_NEXT(slist, snode)
   25336:	b10d      	cbz	r5, 2533c <finalize_cancel_locked+0x1c>
   25338:	2700      	movs	r7, #0
   2533a:	e010      	b.n	2535e <finalize_cancel_locked+0x3e>
   2533c:	462c      	mov	r4, r5
   2533e:	e7fb      	b.n	25338 <finalize_cancel_locked+0x18>
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   25340:	462a      	mov	r2, r5
   25342:	4639      	mov	r1, r7
   25344:	480d      	ldr	r0, [pc, #52]	; (2537c <finalize_cancel_locked+0x5c>)
   25346:	f007 fe11 	bl	2cf6c <sys_slist_remove>
			k_sem_give(&wc->sem);
   2534a:	f105 0008 	add.w	r0, r5, #8
	z_impl_k_sem_give(sem);
   2534e:	f7ff ff3f 	bl	251d0 <z_impl_k_sem_give>
}
   25352:	e009      	b.n	25368 <finalize_cancel_locked+0x48>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   25354:	462c      	mov	r4, r5
   25356:	e7ef      	b.n	25338 <finalize_cancel_locked+0x18>
   25358:	4623      	mov	r3, r4
   2535a:	4625      	mov	r5, r4
   2535c:	461c      	mov	r4, r3
   2535e:	b165      	cbz	r5, 2537a <finalize_cancel_locked+0x5a>
		if (wc->work == work) {
   25360:	686b      	ldr	r3, [r5, #4]
   25362:	42b3      	cmp	r3, r6
   25364:	d0ec      	beq.n	25340 <finalize_cancel_locked+0x20>
			prev = &wc->node;
   25366:	462f      	mov	r7, r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   25368:	2c00      	cmp	r4, #0
   2536a:	d0f5      	beq.n	25358 <finalize_cancel_locked+0x38>
	return node->next;
   2536c:	6823      	ldr	r3, [r4, #0]
   2536e:	2b00      	cmp	r3, #0
   25370:	d0f3      	beq.n	2535a <finalize_cancel_locked+0x3a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   25372:	2c00      	cmp	r4, #0
   25374:	d1f1      	bne.n	2535a <finalize_cancel_locked+0x3a>
   25376:	4623      	mov	r3, r4
   25378:	e7ef      	b.n	2535a <finalize_cancel_locked+0x3a>
}
   2537a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2537c:	20008fc4 	.word	0x20008fc4

00025380 <init_work_cancel>:
{
   25380:	b538      	push	{r3, r4, r5, lr}
   25382:	4604      	mov	r4, r0
   25384:	460d      	mov	r5, r1
	k_sem_init(&canceler->sem, 0, 1);
   25386:	3008      	adds	r0, #8
	return z_impl_k_sem_init(sem, initial_count, limit);
   25388:	2201      	movs	r2, #1
   2538a:	2100      	movs	r1, #0
   2538c:	f007 fddb 	bl	2cf46 <z_impl_k_sem_init>
	canceler->work = work;
   25390:	6065      	str	r5, [r4, #4]
	parent->next = child;
   25392:	2300      	movs	r3, #0
   25394:	6023      	str	r3, [r4, #0]
	return list->tail;
   25396:	4b05      	ldr	r3, [pc, #20]	; (253ac <init_work_cancel+0x2c>)
   25398:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   2539a:	b11b      	cbz	r3, 253a4 <init_work_cancel+0x24>
	parent->next = child;
   2539c:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2539e:	4b03      	ldr	r3, [pc, #12]	; (253ac <init_work_cancel+0x2c>)
   253a0:	605c      	str	r4, [r3, #4]
}
   253a2:	bd38      	pop	{r3, r4, r5, pc}
   253a4:	4b01      	ldr	r3, [pc, #4]	; (253ac <init_work_cancel+0x2c>)
   253a6:	605c      	str	r4, [r3, #4]
	list->head = node;
   253a8:	601c      	str	r4, [r3, #0]
}
   253aa:	e7fa      	b.n	253a2 <init_work_cancel+0x22>
   253ac:	20008fc4 	.word	0x20008fc4

000253b0 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   253b0:	b570      	push	{r4, r5, r6, lr}
   253b2:	b084      	sub	sp, #16
   253b4:	4605      	mov	r5, r0
	struct k_work_q *queue = (struct k_work_q *)workq_ptr;
   253b6:	e016      	b.n	253e6 <work_queue_main+0x36>
	return (*flagp & BIT(bit)) != 0U;
   253b8:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
	*flagp &= ~BIT(bit);
   253bc:	f023 0204 	bic.w	r2, r3, #4
   253c0:	f8c5 20d0 	str.w	r2, [r5, #208]	; 0xd0
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   253c4:	f013 0f04 	tst.w	r3, #4
   253c8:	d15a      	bne.n	25480 <work_queue_main+0xd0>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   253ca:	2300      	movs	r3, #0
   253cc:	9302      	str	r3, [sp, #8]
   253ce:	f04f 32ff 	mov.w	r2, #4294967295
   253d2:	f04f 33ff 	mov.w	r3, #4294967295
   253d6:	e9cd 2300 	strd	r2, r3, [sp]
   253da:	f105 02c0 	add.w	r2, r5, #192	; 0xc0
   253de:	4631      	mov	r1, r6
   253e0:	482e      	ldr	r0, [pc, #184]	; (2549c <work_queue_main+0xec>)
   253e2:	f000 fcef 	bl	25dc4 <z_sched_wait>
	__asm__ volatile(
   253e6:	f04f 0340 	mov.w	r3, #64	; 0x40
   253ea:	f3ef 8611 	mrs	r6, BASEPRI
   253ee:	f383 8812 	msr	BASEPRI_MAX, r3
   253f2:	f3bf 8f6f 	isb	sy
   253f6:	4632      	mov	r2, r6
	return list->head;
   253f8:	f8d5 40b8 	ldr.w	r4, [r5, #184]	; 0xb8
Z_GENLIST_GET(slist, snode)
   253fc:	2c00      	cmp	r4, #0
   253fe:	d0db      	beq.n	253b8 <work_queue_main+0x8>
	return node->next;
   25400:	6823      	ldr	r3, [r4, #0]
	list->head = node;
   25402:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
	return list->tail;
   25406:	f8d5 10bc 	ldr.w	r1, [r5, #188]	; 0xbc
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2540a:	428c      	cmp	r4, r1
   2540c:	d035      	beq.n	2547a <work_queue_main+0xca>
	*flagp |= BIT(bit);
   2540e:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
   25412:	f043 0302 	orr.w	r3, r3, #2
   25416:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
   2541a:	68e3      	ldr	r3, [r4, #12]
   2541c:	f043 0101 	orr.w	r1, r3, #1
   25420:	60e1      	str	r1, [r4, #12]
	*flagp &= ~BIT(bit);
   25422:	f023 0304 	bic.w	r3, r3, #4
   25426:	f043 0301 	orr.w	r3, r3, #1
   2542a:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
   2542c:	6863      	ldr	r3, [r4, #4]
	__asm__ volatile(
   2542e:	f382 8811 	msr	BASEPRI, r2
   25432:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   25436:	4620      	mov	r0, r4
   25438:	4798      	blx	r3
	__asm__ volatile(
   2543a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2543e:	f3ef 8611 	mrs	r6, BASEPRI
   25442:	f383 8812 	msr	BASEPRI_MAX, r3
   25446:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   2544a:	68e3      	ldr	r3, [r4, #12]
   2544c:	f023 0301 	bic.w	r3, r3, #1
   25450:	60e3      	str	r3, [r4, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   25452:	f013 0f02 	tst.w	r3, #2
   25456:	d11d      	bne.n	25494 <work_queue_main+0xe4>
	*flagp &= ~BIT(bit);
   25458:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
   2545c:	f023 0302 	bic.w	r3, r3, #2
   25460:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
	return (*flagp & BIT(bit)) != 0U;
   25464:	f3c3 2300 	ubfx	r3, r3, #8, #1
	__asm__ volatile(
   25468:	f386 8811 	msr	BASEPRI, r6
   2546c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   25470:	2b00      	cmp	r3, #0
   25472:	d1b8      	bne.n	253e6 <work_queue_main+0x36>
	z_impl_k_yield();
   25474:	f000 fb76 	bl	25b64 <z_impl_k_yield>
}
   25478:	e7b5      	b.n	253e6 <work_queue_main+0x36>
	list->tail = node;
   2547a:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
		if (node != NULL) {
   2547e:	e7c6      	b.n	2540e <work_queue_main+0x5e>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   25480:	f105 04c8 	add.w	r4, r5, #200	; 0xc8
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   25484:	2200      	movs	r2, #0
   25486:	2101      	movs	r1, #1
   25488:	4620      	mov	r0, r4
   2548a:	f008 f85f 	bl	2d54c <z_sched_wake>
   2548e:	2800      	cmp	r0, #0
   25490:	d1f8      	bne.n	25484 <work_queue_main+0xd4>
   25492:	e79a      	b.n	253ca <work_queue_main+0x1a>
			finalize_cancel_locked(work);
   25494:	4620      	mov	r0, r4
   25496:	f7ff ff43 	bl	25320 <finalize_cancel_locked>
   2549a:	e7dd      	b.n	25458 <work_queue_main+0xa8>
   2549c:	20008fcc 	.word	0x20008fcc

000254a0 <schedule_for_queue_locked>:
 * @retval 1 to indicate successfully scheduled.
 */
static int schedule_for_queue_locked(struct k_work_q **queuep,
				     struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   254a0:	b508      	push	{r3, lr}
   254a2:	4684      	mov	ip, r0
   254a4:	4608      	mov	r0, r1
	int ret = 1;
	struct k_work *work = &dwork->work;

	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   254a6:	ea53 0102 	orrs.w	r1, r3, r2
   254aa:	d00c      	beq.n	254c6 <schedule_for_queue_locked+0x26>
	*flagp |= BIT(bit);
   254ac:	68c1      	ldr	r1, [r0, #12]
   254ae:	f041 0108 	orr.w	r1, r1, #8
   254b2:	60c1      	str	r1, [r0, #12]
		return submit_to_queue_locked(work, queuep);
	}

	flag_set(&work->flags, K_WORK_DELAYED_BIT);
	dwork->queue = *queuep;
   254b4:	f8dc 1000 	ldr.w	r1, [ip]
   254b8:	6281      	str	r1, [r0, #40]	; 0x28

	/* Add timeout */
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   254ba:	4905      	ldr	r1, [pc, #20]	; (254d0 <schedule_for_queue_locked+0x30>)
   254bc:	3010      	adds	r0, #16
   254be:	f000 fcf7 	bl	25eb0 <z_add_timeout>

	return ret;
   254c2:	2001      	movs	r0, #1
}
   254c4:	bd08      	pop	{r3, pc}
		return submit_to_queue_locked(work, queuep);
   254c6:	4661      	mov	r1, ip
   254c8:	f007 fd9f 	bl	2d00a <submit_to_queue_locked>
   254cc:	e7fa      	b.n	254c4 <schedule_for_queue_locked+0x24>
   254ce:	bf00      	nop
   254d0:	0002d06b 	.word	0x0002d06b

000254d4 <k_work_submit>:
{
   254d4:	b508      	push	{r3, lr}
   254d6:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   254d8:	4801      	ldr	r0, [pc, #4]	; (254e0 <k_work_submit+0xc>)
   254da:	f007 fe37 	bl	2d14c <k_work_submit_to_queue>
}
   254de:	bd08      	pop	{r3, pc}
   254e0:	200079d8 	.word	0x200079d8

000254e4 <k_work_queue_start>:
{
   254e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   254e6:	b089      	sub	sp, #36	; 0x24
   254e8:	4604      	mov	r4, r0
   254ea:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	list->head = NULL;
   254ec:	2000      	movs	r0, #0
   254ee:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
	list->tail = NULL;
   254f2:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
   254f6:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
	list->head = (sys_dnode_t *)list;
   254fa:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	list->tail = (sys_dnode_t *)list;
   254fe:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
   25502:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
	list->head = (sys_dnode_t *)list;
   25506:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
	list->tail = (sys_dnode_t *)list;
   2550a:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
	if ((cfg != NULL) && cfg->no_yield) {
   2550e:	b1fd      	cbz	r5, 25550 <k_work_queue_start+0x6c>
   25510:	7928      	ldrb	r0, [r5, #4]
   25512:	b9f8      	cbnz	r0, 25554 <k_work_queue_start+0x70>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   25514:	2001      	movs	r0, #1
	*flagp = flags;
   25516:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2551a:	f04f 36ff 	mov.w	r6, #4294967295
   2551e:	f04f 37ff 	mov.w	r7, #4294967295
   25522:	e9cd 6706 	strd	r6, r7, [sp, #24]
   25526:	2000      	movs	r0, #0
   25528:	9004      	str	r0, [sp, #16]
   2552a:	9303      	str	r3, [sp, #12]
   2552c:	9002      	str	r0, [sp, #8]
   2552e:	9001      	str	r0, [sp, #4]
   25530:	9400      	str	r4, [sp, #0]
   25532:	4b0a      	ldr	r3, [pc, #40]	; (2555c <k_work_queue_start+0x78>)
   25534:	4620      	mov	r0, r4
   25536:	f007 fc0b 	bl	2cd50 <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   2553a:	b125      	cbz	r5, 25546 <k_work_queue_start+0x62>
   2553c:	6829      	ldr	r1, [r5, #0]
   2553e:	b111      	cbz	r1, 25546 <k_work_queue_start+0x62>
	return z_impl_k_thread_name_set(thread, str);
   25540:	4620      	mov	r0, r4
   25542:	f7ff fc59 	bl	24df8 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   25546:	4620      	mov	r0, r4
   25548:	f007 fbf3 	bl	2cd32 <z_impl_k_thread_start>
}
   2554c:	b009      	add	sp, #36	; 0x24
   2554e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t flags = K_WORK_QUEUE_STARTED;
   25550:	2001      	movs	r0, #1
   25552:	e7e0      	b.n	25516 <k_work_queue_start+0x32>
		flags |= K_WORK_QUEUE_NO_YIELD;
   25554:	f240 1001 	movw	r0, #257	; 0x101
   25558:	e7dd      	b.n	25516 <k_work_queue_start+0x32>
   2555a:	bf00      	nop
   2555c:	000253b1 	.word	0x000253b1

00025560 <k_work_schedule>:
	return ret;
}

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   25560:	b508      	push	{r3, lr}
   25562:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   25564:	4801      	ldr	r0, [pc, #4]	; (2556c <k_work_schedule+0xc>)
   25566:	f007 fe1d 	bl	2d1a4 <k_work_schedule_for_queue>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule, dwork, delay, ret);

	return ret;
}
   2556a:	bd08      	pop	{r3, pc}
   2556c:	200079d8 	.word	0x200079d8

00025570 <k_work_reschedule>:
	return ret;
}

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   25570:	b508      	push	{r3, lr}
   25572:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   25574:	4801      	ldr	r0, [pc, #4]	; (2557c <k_work_reschedule+0xc>)
   25576:	f007 fe2f 	bl	2d1d8 <k_work_reschedule_for_queue>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule, dwork, delay, ret);

	return ret;
}
   2557a:	bd08      	pop	{r3, pc}
   2557c:	200079d8 	.word	0x200079d8

00025580 <sliceable>:


static inline int is_preempt(struct k_thread *thread)
{
	/* explanation in kernel_struct.h */
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   25580:	89c3      	ldrh	r3, [r0, #14]
static inline bool sliceable(struct k_thread *thread)
{
	bool ret = is_preempt(thread)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_idle_thread_object(thread);
   25582:	2b7f      	cmp	r3, #127	; 0x7f
   25584:	d80e      	bhi.n	255a4 <sliceable+0x24>
	uint8_t state = thread->base.thread_state;
   25586:	7b43      	ldrb	r3, [r0, #13]
		&& !z_is_thread_prevented_from_running(thread)
   25588:	f013 0f1f 	tst.w	r3, #31
   2558c:	d10c      	bne.n	255a8 <sliceable+0x28>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   2558e:	f990 200e 	ldrsb.w	r2, [r0, #14]
   25592:	4b08      	ldr	r3, [pc, #32]	; (255b4 <sliceable+0x34>)
   25594:	681b      	ldr	r3, [r3, #0]
   25596:	429a      	cmp	r2, r3
   25598:	db08      	blt.n	255ac <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
   2559a:	4b07      	ldr	r3, [pc, #28]	; (255b8 <sliceable+0x38>)
   2559c:	4298      	cmp	r0, r3
   2559e:	d007      	beq.n	255b0 <sliceable+0x30>
   255a0:	2001      	movs	r0, #1
   255a2:	4770      	bx	lr
   255a4:	2000      	movs	r0, #0
   255a6:	4770      	bx	lr
   255a8:	2000      	movs	r0, #0
   255aa:	4770      	bx	lr
   255ac:	2000      	movs	r0, #0
   255ae:	4770      	bx	lr
   255b0:	2000      	movs	r0, #0
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
   255b2:	4770      	bx	lr
   255b4:	20008fd0 	.word	0x20008fd0
   255b8:	20007868 	.word	0x20007868

000255bc <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   255bc:	f1b3 3fff 	cmp.w	r3, #4294967295
   255c0:	bf08      	it	eq
   255c2:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   255c6:	d100      	bne.n	255ca <add_thread_timeout+0xe>
   255c8:	4770      	bx	lr
{
   255ca:	b508      	push	{r3, lr}
   255cc:	4902      	ldr	r1, [pc, #8]	; (255d8 <add_thread_timeout+0x1c>)
   255ce:	3018      	adds	r0, #24
   255d0:	f000 fc6e 	bl	25eb0 <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
   255d4:	bd08      	pop	{r3, pc}
   255d6:	bf00      	nop
   255d8:	0002d3af 	.word	0x0002d3af

000255dc <z_reset_time_slice>:
{
   255dc:	b510      	push	{r4, lr}
	int ret = slice_ticks;
   255de:	4b07      	ldr	r3, [pc, #28]	; (255fc <z_reset_time_slice+0x20>)
   255e0:	681c      	ldr	r4, [r3, #0]
	if (slice_time(curr) != 0) {
   255e2:	b904      	cbnz	r4, 255e6 <z_reset_time_slice+0xa>
}
   255e4:	bd10      	pop	{r4, pc}
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   255e6:	f7fd f833 	bl	22650 <sys_clock_elapsed>
   255ea:	4404      	add	r4, r0
   255ec:	4b04      	ldr	r3, [pc, #16]	; (25600 <z_reset_time_slice+0x24>)
   255ee:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   255f0:	2100      	movs	r1, #0
   255f2:	4b02      	ldr	r3, [pc, #8]	; (255fc <z_reset_time_slice+0x20>)
   255f4:	6818      	ldr	r0, [r3, #0]
   255f6:	f008 f823 	bl	2d640 <z_set_timeout_expiry>
}
   255fa:	e7f3      	b.n	255e4 <z_reset_time_slice+0x8>
   255fc:	20008fd4 	.word	0x20008fd4
   25600:	20008f98 	.word	0x20008f98

00025604 <k_sched_time_slice_set>:
{
   25604:	b570      	push	{r4, r5, r6, lr}
   25606:	4604      	mov	r4, r0
   25608:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
   2560a:	2300      	movs	r3, #0
	__asm__ volatile(
   2560c:	f04f 0240 	mov.w	r2, #64	; 0x40
   25610:	f3ef 8511 	mrs	r5, BASEPRI
   25614:	f382 8812 	msr	BASEPRI_MAX, r2
   25618:	f3bf 8f6f 	isb	sy
	z_spin_lock_set_owner(l);
#if defined(CONFIG_SPIN_LOCK_TIME_LIMIT) && (CONFIG_SPIN_LOCK_TIME_LIMIT != 0)
	l->lock_time = sys_clock_cycle_get_32();
#endif /* CONFIG_SPIN_LOCK_TIME_LIMIT */
#endif/* CONFIG_SPIN_VALIDATE */
	return k;
   2561c:	e00e      	b.n	2563c <k_sched_time_slice_set+0x38>
			slice_ticks = MAX(2, slice_ticks);
   2561e:	2802      	cmp	r0, #2
   25620:	bfb8      	it	lt
   25622:	2002      	movlt	r0, #2
   25624:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   25626:	4b11      	ldr	r3, [pc, #68]	; (2566c <k_sched_time_slice_set+0x68>)
   25628:	601e      	str	r6, [r3, #0]
		z_reset_time_slice(_current);
   2562a:	4b11      	ldr	r3, [pc, #68]	; (25670 <k_sched_time_slice_set+0x6c>)
   2562c:	6898      	ldr	r0, [r3, #8]
   2562e:	f7ff ffd5 	bl	255dc <z_reset_time_slice>
	__asm__ volatile(
   25632:	f385 8811 	msr	BASEPRI, r5
   25636:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   2563a:	2301      	movs	r3, #1
   2563c:	b9a3      	cbnz	r3, 25668 <k_sched_time_slice_set+0x64>
		_current_cpu->slice_ticks = 0;
   2563e:	4b0c      	ldr	r3, [pc, #48]	; (25670 <k_sched_time_slice_set+0x6c>)
   25640:	2200      	movs	r2, #0
   25642:	611a      	str	r2, [r3, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
   25644:	0c61      	lsrs	r1, r4, #17
   25646:	03e0      	lsls	r0, r4, #15
   25648:	f240 33e7 	movw	r3, #999	; 0x3e7
   2564c:	18c0      	adds	r0, r0, r3
   2564e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   25652:	f04f 0300 	mov.w	r3, #0
   25656:	f141 0100 	adc.w	r1, r1, #0
   2565a:	f7da fd51 	bl	100 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   2565e:	4b05      	ldr	r3, [pc, #20]	; (25674 <k_sched_time_slice_set+0x70>)
   25660:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   25662:	2c00      	cmp	r4, #0
   25664:	dcdb      	bgt.n	2561e <k_sched_time_slice_set+0x1a>
   25666:	e7de      	b.n	25626 <k_sched_time_slice_set+0x22>
}
   25668:	bd70      	pop	{r4, r5, r6, pc}
   2566a:	bf00      	nop
   2566c:	20008fd0 	.word	0x20008fd0
   25670:	20008f98 	.word	0x20008f98
   25674:	20008fd4 	.word	0x20008fd4

00025678 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   25678:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
   2567a:	460b      	mov	r3, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2567c:	b959      	cbnz	r1, 25696 <z_reschedule+0x1e>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2567e:	f3ef 8205 	mrs	r2, IPSR
   25682:	b942      	cbnz	r2, 25696 <z_reschedule+0x1e>
	new_thread = _kernel.ready_q.cache;
   25684:	4a06      	ldr	r2, [pc, #24]	; (256a0 <z_reschedule+0x28>)
   25686:	69d0      	ldr	r0, [r2, #28]
	return new_thread != _current;
   25688:	6892      	ldr	r2, [r2, #8]
	if (resched(key.key) && need_swap()) {
   2568a:	4290      	cmp	r0, r2
   2568c:	d003      	beq.n	25696 <z_reschedule+0x1e>
	ret = arch_swap(key);
   2568e:	4608      	mov	r0, r1
   25690:	f7f1 fb22 	bl	16cd8 <arch_swap>
		z_swap(lock, key);
   25694:	e003      	b.n	2569e <z_reschedule+0x26>
   25696:	f383 8811 	msr	BASEPRI, r3
   2569a:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
   2569e:	bd08      	pop	{r3, pc}
   256a0:	20008f98 	.word	0x20008f98

000256a4 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
   256a4:	2300      	movs	r3, #0
	__asm__ volatile(
   256a6:	f04f 0240 	mov.w	r2, #64	; 0x40
   256aa:	f3ef 8111 	mrs	r1, BASEPRI
   256ae:	f382 8812 	msr	BASEPRI_MAX, r2
   256b2:	f3bf 8f6f 	isb	sy
   256b6:	e009      	b.n	256cc <k_sched_lock+0x28>
	--_current->base.sched_locked;
   256b8:	4b06      	ldr	r3, [pc, #24]	; (256d4 <k_sched_lock+0x30>)
   256ba:	689a      	ldr	r2, [r3, #8]
   256bc:	7bd3      	ldrb	r3, [r2, #15]
   256be:	3b01      	subs	r3, #1
   256c0:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   256c2:	f381 8811 	msr	BASEPRI, r1
   256c6:	f3bf 8f6f 	isb	sy
   256ca:	2301      	movs	r3, #1
   256cc:	2b00      	cmp	r3, #0
   256ce:	d0f3      	beq.n	256b8 <k_sched_lock+0x14>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   256d0:	4770      	bx	lr
   256d2:	bf00      	nop
   256d4:	20008f98 	.word	0x20008f98

000256d8 <update_cache>:
{
   256d8:	b538      	push	{r3, r4, r5, lr}
   256da:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
   256dc:	4810      	ldr	r0, [pc, #64]	; (25720 <update_cache+0x48>)
   256de:	f007 fe43 	bl	2d368 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   256e2:	4605      	mov	r5, r0
   256e4:	b170      	cbz	r0, 25704 <update_cache+0x2c>
	if (preempt_ok != 0) {
   256e6:	b984      	cbnz	r4, 2570a <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
   256e8:	4b0e      	ldr	r3, [pc, #56]	; (25724 <update_cache+0x4c>)
   256ea:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
   256ec:	7b5a      	ldrb	r2, [r3, #13]
   256ee:	f012 0f1f 	tst.w	r2, #31
   256f2:	d10a      	bne.n	2570a <update_cache+0x32>
	return node->next != NULL;
   256f4:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   256f6:	b942      	cbnz	r2, 2570a <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   256f8:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
   256fa:	2a7f      	cmp	r2, #127	; 0x7f
   256fc:	d905      	bls.n	2570a <update_cache+0x32>
		_kernel.ready_q.cache = _current;
   256fe:	4a09      	ldr	r2, [pc, #36]	; (25724 <update_cache+0x4c>)
   25700:	61d3      	str	r3, [r2, #28]
   25702:	e00b      	b.n	2571c <update_cache+0x44>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   25704:	4b07      	ldr	r3, [pc, #28]	; (25724 <update_cache+0x4c>)
   25706:	68dd      	ldr	r5, [r3, #12]
   25708:	e7ed      	b.n	256e6 <update_cache+0xe>
		if (thread != _current) {
   2570a:	4b06      	ldr	r3, [pc, #24]	; (25724 <update_cache+0x4c>)
   2570c:	689b      	ldr	r3, [r3, #8]
   2570e:	42ab      	cmp	r3, r5
   25710:	d002      	beq.n	25718 <update_cache+0x40>
			z_reset_time_slice(thread);
   25712:	4628      	mov	r0, r5
   25714:	f7ff ff62 	bl	255dc <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   25718:	4b02      	ldr	r3, [pc, #8]	; (25724 <update_cache+0x4c>)
   2571a:	61dd      	str	r5, [r3, #28]
}
   2571c:	bd38      	pop	{r3, r4, r5, pc}
   2571e:	bf00      	nop
   25720:	20008fb8 	.word	0x20008fb8
   25724:	20008f98 	.word	0x20008f98

00025728 <move_thread_to_end_of_prio_q>:
{
   25728:	b538      	push	{r3, r4, r5, lr}
   2572a:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
   2572c:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   2572e:	f990 300d 	ldrsb.w	r3, [r0, #13]
   25732:	2b00      	cmp	r3, #0
   25734:	db0a      	blt.n	2574c <move_thread_to_end_of_prio_q+0x24>
	thread->base.thread_state |= _THREAD_QUEUED;
   25736:	7b6b      	ldrb	r3, [r5, #13]
   25738:	f063 037f 	orn	r3, r3, #127	; 0x7f
   2573c:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   2573e:	4b1b      	ldr	r3, [pc, #108]	; (257ac <move_thread_to_end_of_prio_q+0x84>)
   25740:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25744:	429c      	cmp	r4, r3
   25746:	d110      	bne.n	2576a <move_thread_to_end_of_prio_q+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   25748:	2400      	movs	r4, #0
   2574a:	e00e      	b.n	2576a <move_thread_to_end_of_prio_q+0x42>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2574c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   25750:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   25752:	4601      	mov	r1, r0
   25754:	4816      	ldr	r0, [pc, #88]	; (257b0 <move_thread_to_end_of_prio_q+0x88>)
   25756:	f007 fdd6 	bl	2d306 <z_priq_dumb_remove>
}
   2575a:	e7ec      	b.n	25736 <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   2575c:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
   2575e:	606b      	str	r3, [r5, #4]
	node->next = successor;
   25760:	602c      	str	r4, [r5, #0]
	prev->next = node;
   25762:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   25764:	6065      	str	r5, [r4, #4]
}
   25766:	e017      	b.n	25798 <move_thread_to_end_of_prio_q+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   25768:	2400      	movs	r4, #0
   2576a:	b16c      	cbz	r4, 25788 <move_thread_to_end_of_prio_q+0x60>
		if (z_sched_prio_cmp(thread, t) > 0) {
   2576c:	4621      	mov	r1, r4
   2576e:	4628      	mov	r0, r5
   25770:	f007 fd8e 	bl	2d290 <z_sched_prio_cmp>
   25774:	2800      	cmp	r0, #0
   25776:	dcf1      	bgt.n	2575c <move_thread_to_end_of_prio_q+0x34>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   25778:	2c00      	cmp	r4, #0
   2577a:	d0f6      	beq.n	2576a <move_thread_to_end_of_prio_q+0x42>
	return (node == list->tail) ? NULL : node->next;
   2577c:	4b0b      	ldr	r3, [pc, #44]	; (257ac <move_thread_to_end_of_prio_q+0x84>)
   2577e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   25780:	429c      	cmp	r4, r3
   25782:	d0f1      	beq.n	25768 <move_thread_to_end_of_prio_q+0x40>
   25784:	6824      	ldr	r4, [r4, #0]
   25786:	e7f0      	b.n	2576a <move_thread_to_end_of_prio_q+0x42>
	sys_dnode_t *const tail = list->tail;
   25788:	4b08      	ldr	r3, [pc, #32]	; (257ac <move_thread_to_end_of_prio_q+0x84>)
   2578a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   2578c:	f103 0120 	add.w	r1, r3, #32
   25790:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   25792:	606a      	str	r2, [r5, #4]
	tail->next = node;
   25794:	6015      	str	r5, [r2, #0]
	list->tail = node;
   25796:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
   25798:	4b04      	ldr	r3, [pc, #16]	; (257ac <move_thread_to_end_of_prio_q+0x84>)
   2579a:	6898      	ldr	r0, [r3, #8]
   2579c:	42a8      	cmp	r0, r5
   2579e:	bf14      	ite	ne
   257a0:	2000      	movne	r0, #0
   257a2:	2001      	moveq	r0, #1
   257a4:	f7ff ff98 	bl	256d8 <update_cache>
}
   257a8:	bd38      	pop	{r3, r4, r5, pc}
   257aa:	bf00      	nop
   257ac:	20008f98 	.word	0x20008f98
   257b0:	20008fb8 	.word	0x20008fb8

000257b4 <slice_expired_locked>:
{
   257b4:	b538      	push	{r3, r4, r5, lr}
   257b6:	4604      	mov	r4, r0
	struct k_thread *curr = _current;
   257b8:	4b07      	ldr	r3, [pc, #28]	; (257d8 <slice_expired_locked+0x24>)
   257ba:	689d      	ldr	r5, [r3, #8]
	uint8_t state = thread->base.thread_state;
   257bc:	7b6b      	ldrb	r3, [r5, #13]
	if (!z_is_thread_prevented_from_running(curr)) {
   257be:	f013 0f1f 	tst.w	r3, #31
   257c2:	d004      	beq.n	257ce <slice_expired_locked+0x1a>
	z_reset_time_slice(curr);
   257c4:	4628      	mov	r0, r5
   257c6:	f7ff ff09 	bl	255dc <z_reset_time_slice>
}
   257ca:	4620      	mov	r0, r4
   257cc:	bd38      	pop	{r3, r4, r5, pc}
		move_thread_to_end_of_prio_q(curr);
   257ce:	4628      	mov	r0, r5
   257d0:	f7ff ffaa 	bl	25728 <move_thread_to_end_of_prio_q>
   257d4:	e7f6      	b.n	257c4 <slice_expired_locked+0x10>
   257d6:	bf00      	nop
   257d8:	20008f98 	.word	0x20008f98

000257dc <z_time_slice>:
{
   257dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   257de:	4605      	mov	r5, r0
	__asm__ volatile(
   257e0:	f04f 0340 	mov.w	r3, #64	; 0x40
   257e4:	f3ef 8611 	mrs	r6, BASEPRI
   257e8:	f383 8812 	msr	BASEPRI_MAX, r3
   257ec:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   257f0:	4b15      	ldr	r3, [pc, #84]	; (25848 <z_time_slice+0x6c>)
   257f2:	6898      	ldr	r0, [r3, #8]
   257f4:	4b15      	ldr	r3, [pc, #84]	; (2584c <z_time_slice+0x70>)
   257f6:	681b      	ldr	r3, [r3, #0]
   257f8:	4298      	cmp	r0, r3
   257fa:	d011      	beq.n	25820 <z_time_slice+0x44>
   257fc:	4634      	mov	r4, r6
	pending_current = NULL;
   257fe:	4b13      	ldr	r3, [pc, #76]	; (2584c <z_time_slice+0x70>)
   25800:	2200      	movs	r2, #0
   25802:	601a      	str	r2, [r3, #0]
	int ret = slice_ticks;
   25804:	4b12      	ldr	r3, [pc, #72]	; (25850 <z_time_slice+0x74>)
   25806:	681b      	ldr	r3, [r3, #0]
	if (slice_time(_current) && sliceable(_current)) {
   25808:	b1b3      	cbz	r3, 25838 <z_time_slice+0x5c>
   2580a:	f7ff feb9 	bl	25580 <sliceable>
   2580e:	b198      	cbz	r0, 25838 <z_time_slice+0x5c>
		if (ticks >= _current_cpu->slice_ticks) {
   25810:	4b0d      	ldr	r3, [pc, #52]	; (25848 <z_time_slice+0x6c>)
   25812:	691b      	ldr	r3, [r3, #16]
   25814:	42ab      	cmp	r3, r5
   25816:	dd0a      	ble.n	2582e <z_time_slice+0x52>
			_current_cpu->slice_ticks -= ticks;
   25818:	1b5b      	subs	r3, r3, r5
   2581a:	4a0b      	ldr	r2, [pc, #44]	; (25848 <z_time_slice+0x6c>)
   2581c:	6113      	str	r3, [r2, #16]
   2581e:	e00e      	b.n	2583e <z_time_slice+0x62>
		z_reset_time_slice(_current);
   25820:	f7ff fedc 	bl	255dc <z_reset_time_slice>
	__asm__ volatile(
   25824:	f386 8811 	msr	BASEPRI, r6
   25828:	f3bf 8f6f 	isb	sy
		return;
   2582c:	e00b      	b.n	25846 <z_time_slice+0x6a>
			key = slice_expired_locked(key);
   2582e:	4630      	mov	r0, r6
   25830:	f7ff ffc0 	bl	257b4 <slice_expired_locked>
   25834:	4604      	mov	r4, r0
   25836:	e002      	b.n	2583e <z_time_slice+0x62>
		_current_cpu->slice_ticks = 0;
   25838:	4b03      	ldr	r3, [pc, #12]	; (25848 <z_time_slice+0x6c>)
   2583a:	2200      	movs	r2, #0
   2583c:	611a      	str	r2, [r3, #16]
   2583e:	f384 8811 	msr	BASEPRI, r4
   25842:	f3bf 8f6f 	isb	sy
}
   25846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   25848:	20008f98 	.word	0x20008f98
   2584c:	20008fcc 	.word	0x20008fcc
   25850:	20008fd4 	.word	0x20008fd4

00025854 <ready_thread>:
	return (thread->base.thread_state & state) != 0U;
   25854:	7b42      	ldrb	r2, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   25856:	f990 300d 	ldrsb.w	r3, [r0, #13]
   2585a:	2b00      	cmp	r3, #0
   2585c:	db33      	blt.n	258c6 <ready_thread+0x72>
{
   2585e:	b570      	push	{r4, r5, r6, lr}
   25860:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   25862:	f012 0f1f 	tst.w	r2, #31
   25866:	d101      	bne.n	2586c <ready_thread+0x18>
	return node->next != NULL;
   25868:	6986      	ldr	r6, [r0, #24]
   2586a:	b106      	cbz	r6, 2586e <ready_thread+0x1a>
}
   2586c:	bd70      	pop	{r4, r5, r6, pc}
	thread->base.thread_state |= _THREAD_QUEUED;
   2586e:	f062 027f 	orn	r2, r2, #127	; 0x7f
   25872:	7342      	strb	r2, [r0, #13]
	return list->head == list;
   25874:	4b14      	ldr	r3, [pc, #80]	; (258c8 <ready_thread+0x74>)
   25876:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2587a:	429d      	cmp	r5, r3
   2587c:	d108      	bne.n	25890 <ready_thread+0x3c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2587e:	4635      	mov	r5, r6
   25880:	e006      	b.n	25890 <ready_thread+0x3c>
	sys_dnode_t *const prev = successor->prev;
   25882:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
   25884:	6063      	str	r3, [r4, #4]
	node->next = successor;
   25886:	6025      	str	r5, [r4, #0]
	prev->next = node;
   25888:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   2588a:	606c      	str	r4, [r5, #4]
}
   2588c:	e017      	b.n	258be <ready_thread+0x6a>
   2588e:	4635      	mov	r5, r6
   25890:	b16d      	cbz	r5, 258ae <ready_thread+0x5a>
		if (z_sched_prio_cmp(thread, t) > 0) {
   25892:	4629      	mov	r1, r5
   25894:	4620      	mov	r0, r4
   25896:	f007 fcfb 	bl	2d290 <z_sched_prio_cmp>
   2589a:	2800      	cmp	r0, #0
   2589c:	dcf1      	bgt.n	25882 <ready_thread+0x2e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2589e:	2d00      	cmp	r5, #0
   258a0:	d0f6      	beq.n	25890 <ready_thread+0x3c>
	return (node == list->tail) ? NULL : node->next;
   258a2:	4b09      	ldr	r3, [pc, #36]	; (258c8 <ready_thread+0x74>)
   258a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   258a6:	429d      	cmp	r5, r3
   258a8:	d0f1      	beq.n	2588e <ready_thread+0x3a>
   258aa:	682d      	ldr	r5, [r5, #0]
   258ac:	e7f0      	b.n	25890 <ready_thread+0x3c>
	sys_dnode_t *const tail = list->tail;
   258ae:	4b06      	ldr	r3, [pc, #24]	; (258c8 <ready_thread+0x74>)
   258b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   258b2:	f103 0120 	add.w	r1, r3, #32
   258b6:	6021      	str	r1, [r4, #0]
	node->prev = tail;
   258b8:	6062      	str	r2, [r4, #4]
	tail->next = node;
   258ba:	6014      	str	r4, [r2, #0]
	list->tail = node;
   258bc:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
   258be:	2000      	movs	r0, #0
   258c0:	f7ff ff0a 	bl	256d8 <update_cache>
}
   258c4:	e7d2      	b.n	2586c <ready_thread+0x18>
   258c6:	4770      	bx	lr
   258c8:	20008f98 	.word	0x20008f98

000258cc <z_sched_start>:
{
   258cc:	b510      	push	{r4, lr}
	__asm__ volatile(
   258ce:	f04f 0340 	mov.w	r3, #64	; 0x40
   258d2:	f3ef 8411 	mrs	r4, BASEPRI
   258d6:	f383 8812 	msr	BASEPRI_MAX, r3
   258da:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   258de:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
   258e0:	f013 0f04 	tst.w	r3, #4
   258e4:	d104      	bne.n	258f0 <z_sched_start+0x24>
	__asm__ volatile(
   258e6:	f384 8811 	msr	BASEPRI, r4
   258ea:	f3bf 8f6f 	isb	sy
}
   258ee:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   258f0:	f023 0304 	bic.w	r3, r3, #4
   258f4:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
   258f6:	f7ff ffad 	bl	25854 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   258fa:	4621      	mov	r1, r4
   258fc:	4801      	ldr	r0, [pc, #4]	; (25904 <z_sched_start+0x38>)
   258fe:	f7ff febb 	bl	25678 <z_reschedule>
   25902:	e7f4      	b.n	258ee <z_sched_start+0x22>
   25904:	20008fd8 	.word	0x20008fd8

00025908 <unready_thread>:
{
   25908:	b510      	push	{r4, lr}
   2590a:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
   2590c:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   2590e:	f990 300d 	ldrsb.w	r3, [r0, #13]
   25912:	2b00      	cmp	r3, #0
   25914:	db08      	blt.n	25928 <unready_thread+0x20>
	update_cache(thread == _current);
   25916:	4b08      	ldr	r3, [pc, #32]	; (25938 <unready_thread+0x30>)
   25918:	6898      	ldr	r0, [r3, #8]
   2591a:	42a0      	cmp	r0, r4
   2591c:	bf14      	ite	ne
   2591e:	2000      	movne	r0, #0
   25920:	2001      	moveq	r0, #1
   25922:	f7ff fed9 	bl	256d8 <update_cache>
}
   25926:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   25928:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   2592c:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   2592e:	4601      	mov	r1, r0
   25930:	4802      	ldr	r0, [pc, #8]	; (2593c <unready_thread+0x34>)
   25932:	f007 fce8 	bl	2d306 <z_priq_dumb_remove>
}
   25936:	e7ee      	b.n	25916 <unready_thread+0xe>
   25938:	20008f98 	.word	0x20008f98
   2593c:	20008fb8 	.word	0x20008fb8

00025940 <z_pend_curr>:
{
   25940:	b510      	push	{r4, lr}
   25942:	460c      	mov	r4, r1
   25944:	4611      	mov	r1, r2
	pending_current = _current;
   25946:	480a      	ldr	r0, [pc, #40]	; (25970 <z_pend_curr+0x30>)
   25948:	6882      	ldr	r2, [r0, #8]
   2594a:	4b0a      	ldr	r3, [pc, #40]	; (25974 <z_pend_curr+0x34>)
   2594c:	601a      	str	r2, [r3, #0]
	__asm__ volatile(
   2594e:	f04f 0240 	mov.w	r2, #64	; 0x40
   25952:	f3ef 8311 	mrs	r3, BASEPRI
   25956:	f382 8812 	msr	BASEPRI_MAX, r2
   2595a:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
   2595e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   25962:	6880      	ldr	r0, [r0, #8]
   25964:	f007 fd92 	bl	2d48c <pend_locked>
   25968:	4620      	mov	r0, r4
   2596a:	f7f1 f9b5 	bl	16cd8 <arch_swap>
}
   2596e:	bd10      	pop	{r4, pc}
   25970:	20008f98 	.word	0x20008f98
   25974:	20008fcc 	.word	0x20008fcc

00025978 <z_set_prio>:
{
   25978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2597c:	4605      	mov	r5, r0
   2597e:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
   25980:	2300      	movs	r3, #0
   25982:	f04f 0240 	mov.w	r2, #64	; 0x40
   25986:	f3ef 8611 	mrs	r6, BASEPRI
   2598a:	f382 8812 	msr	BASEPRI_MAX, r2
   2598e:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
   25992:	4618      	mov	r0, r3
   25994:	e029      	b.n	259ea <z_set_prio+0x72>
	sys_dnode_t *const prev = successor->prev;
   25996:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   25998:	606b      	str	r3, [r5, #4]
	node->next = successor;
   2599a:	602c      	str	r4, [r5, #0]
	prev->next = node;
   2599c:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   2599e:	6065      	str	r5, [r4, #4]
}
   259a0:	e017      	b.n	259d2 <z_set_prio+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   259a2:	4644      	mov	r4, r8
   259a4:	b16c      	cbz	r4, 259c2 <z_set_prio+0x4a>
		if (z_sched_prio_cmp(thread, t) > 0) {
   259a6:	4621      	mov	r1, r4
   259a8:	4628      	mov	r0, r5
   259aa:	f007 fc71 	bl	2d290 <z_sched_prio_cmp>
   259ae:	2800      	cmp	r0, #0
   259b0:	dcf1      	bgt.n	25996 <z_set_prio+0x1e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   259b2:	2c00      	cmp	r4, #0
   259b4:	d0f6      	beq.n	259a4 <z_set_prio+0x2c>
	return (node == list->tail) ? NULL : node->next;
   259b6:	4b1d      	ldr	r3, [pc, #116]	; (25a2c <z_set_prio+0xb4>)
   259b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   259ba:	429c      	cmp	r4, r3
   259bc:	d0f1      	beq.n	259a2 <z_set_prio+0x2a>
   259be:	6824      	ldr	r4, [r4, #0]
   259c0:	e7f0      	b.n	259a4 <z_set_prio+0x2c>
	sys_dnode_t *const tail = list->tail;
   259c2:	4b1a      	ldr	r3, [pc, #104]	; (25a2c <z_set_prio+0xb4>)
   259c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   259c6:	f103 0120 	add.w	r1, r3, #32
   259ca:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   259cc:	606a      	str	r2, [r5, #4]
	tail->next = node;
   259ce:	6015      	str	r5, [r2, #0]
	list->tail = node;
   259d0:	625d      	str	r5, [r3, #36]	; 0x24
			update_cache(1);
   259d2:	2001      	movs	r0, #1
   259d4:	f7ff fe80 	bl	256d8 <update_cache>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   259d8:	2001      	movs	r0, #1
   259da:	e001      	b.n	259e0 <z_set_prio+0x68>
			thread->base.prio = prio;
   259dc:	73af      	strb	r7, [r5, #14]
   259de:	2000      	movs	r0, #0
	__asm__ volatile(
   259e0:	f386 8811 	msr	BASEPRI, r6
   259e4:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   259e8:	2301      	movs	r3, #1
   259ea:	b9e3      	cbnz	r3, 25a26 <z_set_prio+0xae>
	uint8_t state = thread->base.thread_state;
   259ec:	7b6b      	ldrb	r3, [r5, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   259ee:	f013 0f1f 	tst.w	r3, #31
   259f2:	d1f3      	bne.n	259dc <z_set_prio+0x64>
	return node->next != NULL;
   259f4:	f8d5 8018 	ldr.w	r8, [r5, #24]
   259f8:	f1b8 0f00 	cmp.w	r8, #0
   259fc:	d1ee      	bne.n	259dc <z_set_prio+0x64>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   259fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   25a02:	736b      	strb	r3, [r5, #13]
	_priq_run_remove(thread_runq(thread), thread);
   25a04:	f8df 9028 	ldr.w	r9, [pc, #40]	; 25a30 <z_set_prio+0xb8>
   25a08:	4629      	mov	r1, r5
   25a0a:	4648      	mov	r0, r9
   25a0c:	f007 fc7b 	bl	2d306 <z_priq_dumb_remove>
				thread->base.prio = prio;
   25a10:	73af      	strb	r7, [r5, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   25a12:	7b6b      	ldrb	r3, [r5, #13]
   25a14:	f063 037f 	orn	r3, r3, #127	; 0x7f
   25a18:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   25a1a:	f8d9 4000 	ldr.w	r4, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25a1e:	454c      	cmp	r4, r9
   25a20:	d1c0      	bne.n	259a4 <z_set_prio+0x2c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   25a22:	4644      	mov	r4, r8
   25a24:	e7be      	b.n	259a4 <z_set_prio+0x2c>
}
   25a26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   25a2a:	bf00      	nop
   25a2c:	20008f98 	.word	0x20008f98
   25a30:	20008fb8 	.word	0x20008fb8

00025a34 <z_impl_k_thread_suspend>:
{
   25a34:	b538      	push	{r3, r4, r5, lr}
   25a36:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   25a38:	3018      	adds	r0, #24
   25a3a:	f007 fdcc 	bl	2d5d6 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
   25a3e:	2300      	movs	r3, #0
	__asm__ volatile(
   25a40:	f04f 0240 	mov.w	r2, #64	; 0x40
   25a44:	f3ef 8511 	mrs	r5, BASEPRI
   25a48:	f382 8812 	msr	BASEPRI_MAX, r2
   25a4c:	f3bf 8f6f 	isb	sy
   25a50:	e010      	b.n	25a74 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
   25a52:	7b63      	ldrb	r3, [r4, #13]
   25a54:	f043 0310 	orr.w	r3, r3, #16
   25a58:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   25a5a:	4b11      	ldr	r3, [pc, #68]	; (25aa0 <z_impl_k_thread_suspend+0x6c>)
   25a5c:	6898      	ldr	r0, [r3, #8]
   25a5e:	42a0      	cmp	r0, r4
   25a60:	bf14      	ite	ne
   25a62:	2000      	movne	r0, #0
   25a64:	2001      	moveq	r0, #1
   25a66:	f7ff fe37 	bl	256d8 <update_cache>
	__asm__ volatile(
   25a6a:	f385 8811 	msr	BASEPRI, r5
   25a6e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   25a72:	2301      	movs	r3, #1
   25a74:	b963      	cbnz	r3, 25a90 <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
   25a76:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
   25a78:	f994 300d 	ldrsb.w	r3, [r4, #13]
   25a7c:	2b00      	cmp	r3, #0
   25a7e:	dae8      	bge.n	25a52 <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   25a80:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   25a84:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   25a86:	4621      	mov	r1, r4
   25a88:	4806      	ldr	r0, [pc, #24]	; (25aa4 <z_impl_k_thread_suspend+0x70>)
   25a8a:	f007 fc3c 	bl	2d306 <z_priq_dumb_remove>
}
   25a8e:	e7e0      	b.n	25a52 <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
   25a90:	4b03      	ldr	r3, [pc, #12]	; (25aa0 <z_impl_k_thread_suspend+0x6c>)
   25a92:	689b      	ldr	r3, [r3, #8]
   25a94:	42a3      	cmp	r3, r4
   25a96:	d000      	beq.n	25a9a <z_impl_k_thread_suspend+0x66>
}
   25a98:	bd38      	pop	{r3, r4, r5, pc}
		z_reschedule_unlocked();
   25a9a:	f007 fc28 	bl	2d2ee <z_reschedule_unlocked>
}
   25a9e:	e7fb      	b.n	25a98 <z_impl_k_thread_suspend+0x64>
   25aa0:	20008f98 	.word	0x20008f98
   25aa4:	20008fb8 	.word	0x20008fb8

00025aa8 <k_sched_unlock>:

void k_sched_unlock(void)
{
   25aa8:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
   25aaa:	2300      	movs	r3, #0
	__asm__ volatile(
   25aac:	f04f 0240 	mov.w	r2, #64	; 0x40
   25ab0:	f3ef 8411 	mrs	r4, BASEPRI
   25ab4:	f382 8812 	msr	BASEPRI_MAX, r2
   25ab8:	f3bf 8f6f 	isb	sy
   25abc:	e00c      	b.n	25ad8 <k_sched_unlock+0x30>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
   25abe:	4b09      	ldr	r3, [pc, #36]	; (25ae4 <k_sched_unlock+0x3c>)
   25ac0:	689a      	ldr	r2, [r3, #8]
   25ac2:	7bd3      	ldrb	r3, [r2, #15]
   25ac4:	3301      	adds	r3, #1
   25ac6:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   25ac8:	2000      	movs	r0, #0
   25aca:	f7ff fe05 	bl	256d8 <update_cache>
	__asm__ volatile(
   25ace:	f384 8811 	msr	BASEPRI, r4
   25ad2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   25ad6:	2301      	movs	r3, #1
   25ad8:	2b00      	cmp	r3, #0
   25ada:	d0f0      	beq.n	25abe <k_sched_unlock+0x16>
	LOG_DBG("scheduler unlocked (%p:%d)",
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
   25adc:	f007 fc07 	bl	2d2ee <z_reschedule_unlocked>
}
   25ae0:	bd10      	pop	{r4, pc}
   25ae2:	bf00      	nop
   25ae4:	20008f98 	.word	0x20008f98

00025ae8 <end_thread>:
static void end_thread(struct k_thread *thread)
{
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
   25ae8:	7b43      	ldrb	r3, [r0, #13]
   25aea:	f013 0f08 	tst.w	r3, #8
   25aee:	d12a      	bne.n	25b46 <end_thread+0x5e>
{
   25af0:	b510      	push	{r4, lr}
   25af2:	4604      	mov	r4, r0
		thread->base.thread_state |= _THREAD_DEAD;
   25af4:	f043 0208 	orr.w	r2, r3, #8
   25af8:	7342      	strb	r2, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
   25afa:	f023 0220 	bic.w	r2, r3, #32
   25afe:	f042 0208 	orr.w	r2, r2, #8
   25b02:	7342      	strb	r2, [r0, #13]
		if (z_is_thread_queued(thread)) {
   25b04:	f012 0f80 	tst.w	r2, #128	; 0x80
   25b08:	d113      	bne.n	25b32 <end_thread+0x4a>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
   25b0a:	68a3      	ldr	r3, [r4, #8]
   25b0c:	b113      	cbz	r3, 25b14 <end_thread+0x2c>
			unpend_thread_no_timeout(thread);
   25b0e:	4620      	mov	r0, r4
   25b10:	f007 fc01 	bl	2d316 <unpend_thread_no_timeout>
   25b14:	f104 0018 	add.w	r0, r4, #24
   25b18:	f007 fd5d 	bl	2d5d6 <z_abort_timeout>
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
   25b1c:	f104 0058 	add.w	r0, r4, #88	; 0x58
   25b20:	f007 fc74 	bl	2d40c <unpend_all>
		update_cache(1);
   25b24:	2001      	movs	r0, #1
   25b26:	f7ff fdd7 	bl	256d8 <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
   25b2a:	4620      	mov	r0, r4
   25b2c:	f7ff f944 	bl	24db8 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
   25b30:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   25b32:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   25b36:	f043 0308 	orr.w	r3, r3, #8
   25b3a:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   25b3c:	4601      	mov	r1, r0
   25b3e:	4802      	ldr	r0, [pc, #8]	; (25b48 <end_thread+0x60>)
   25b40:	f007 fbe1 	bl	2d306 <z_priq_dumb_remove>
}
   25b44:	e7e1      	b.n	25b0a <end_thread+0x22>
   25b46:	4770      	bx	lr
   25b48:	20008fb8 	.word	0x20008fb8

00025b4c <z_sched_init>:
{
   25b4c:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
   25b4e:	4804      	ldr	r0, [pc, #16]	; (25b60 <z_sched_init+0x14>)
   25b50:	f007 fcf8 	bl	2d544 <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   25b54:	2100      	movs	r1, #0
   25b56:	4608      	mov	r0, r1
   25b58:	f7ff fd54 	bl	25604 <k_sched_time_slice_set>
}
   25b5c:	bd08      	pop	{r3, pc}
   25b5e:	bf00      	nop
   25b60:	20008fb4 	.word	0x20008fb4

00025b64 <z_impl_k_yield>:
{
   25b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   25b66:	f04f 0340 	mov.w	r3, #64	; 0x40
   25b6a:	f3ef 8611 	mrs	r6, BASEPRI
   25b6e:	f383 8812 	msr	BASEPRI_MAX, r3
   25b72:	f3bf 8f6f 	isb	sy
		dequeue_thread(_current);
   25b76:	4c1d      	ldr	r4, [pc, #116]	; (25bec <z_impl_k_yield+0x88>)
   25b78:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   25b7a:	7b4b      	ldrb	r3, [r1, #13]
   25b7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   25b80:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   25b82:	f104 0720 	add.w	r7, r4, #32
   25b86:	4638      	mov	r0, r7
   25b88:	f007 fbbd 	bl	2d306 <z_priq_dumb_remove>
	queue_thread(_current);
   25b8c:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   25b8e:	7b6b      	ldrb	r3, [r5, #13]
   25b90:	f063 037f 	orn	r3, r3, #127	; 0x7f
   25b94:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   25b96:	6a24      	ldr	r4, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25b98:	42bc      	cmp	r4, r7
   25b9a:	d108      	bne.n	25bae <z_impl_k_yield+0x4a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   25b9c:	2400      	movs	r4, #0
   25b9e:	e006      	b.n	25bae <z_impl_k_yield+0x4a>
	sys_dnode_t *const prev = successor->prev;
   25ba0:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   25ba2:	606b      	str	r3, [r5, #4]
	node->next = successor;
   25ba4:	602c      	str	r4, [r5, #0]
	prev->next = node;
   25ba6:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   25ba8:	6065      	str	r5, [r4, #4]
}
   25baa:	e017      	b.n	25bdc <z_impl_k_yield+0x78>
   25bac:	2400      	movs	r4, #0
   25bae:	b16c      	cbz	r4, 25bcc <z_impl_k_yield+0x68>
		if (z_sched_prio_cmp(thread, t) > 0) {
   25bb0:	4621      	mov	r1, r4
   25bb2:	4628      	mov	r0, r5
   25bb4:	f007 fb6c 	bl	2d290 <z_sched_prio_cmp>
   25bb8:	2800      	cmp	r0, #0
   25bba:	dcf1      	bgt.n	25ba0 <z_impl_k_yield+0x3c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   25bbc:	2c00      	cmp	r4, #0
   25bbe:	d0f6      	beq.n	25bae <z_impl_k_yield+0x4a>
	return (node == list->tail) ? NULL : node->next;
   25bc0:	4b0a      	ldr	r3, [pc, #40]	; (25bec <z_impl_k_yield+0x88>)
   25bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   25bc4:	429c      	cmp	r4, r3
   25bc6:	d0f1      	beq.n	25bac <z_impl_k_yield+0x48>
   25bc8:	6824      	ldr	r4, [r4, #0]
   25bca:	e7f0      	b.n	25bae <z_impl_k_yield+0x4a>
	sys_dnode_t *const tail = list->tail;
   25bcc:	4b07      	ldr	r3, [pc, #28]	; (25bec <z_impl_k_yield+0x88>)
   25bce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   25bd0:	f103 0120 	add.w	r1, r3, #32
   25bd4:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   25bd6:	606a      	str	r2, [r5, #4]
	tail->next = node;
   25bd8:	6015      	str	r5, [r2, #0]
	list->tail = node;
   25bda:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
   25bdc:	2001      	movs	r0, #1
   25bde:	f7ff fd7b 	bl	256d8 <update_cache>
   25be2:	4630      	mov	r0, r6
   25be4:	f7f1 f878 	bl	16cd8 <arch_swap>
}
   25be8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   25bea:	bf00      	nop
   25bec:	20008f98 	.word	0x20008f98

00025bf0 <z_tick_sleep>:
{
   25bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (ticks == 0) {
   25bf4:	ea50 0301 	orrs.w	r3, r0, r1
   25bf8:	d038      	beq.n	25c6c <z_tick_sleep+0x7c>
   25bfa:	4604      	mov	r4, r0
   25bfc:	460e      	mov	r6, r1
	if (Z_TICK_ABS(ticks) <= 0) {
   25bfe:	f06f 0301 	mvn.w	r3, #1
   25c02:	1a1b      	subs	r3, r3, r0
   25c04:	f04f 32ff 	mov.w	r2, #4294967295
   25c08:	eb62 0201 	sbc.w	r2, r2, r1
   25c0c:	2b01      	cmp	r3, #1
   25c0e:	f172 0200 	sbcs.w	r2, r2, #0
   25c12:	db2f      	blt.n	25c74 <z_tick_sleep+0x84>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   25c14:	f06f 0501 	mvn.w	r5, #1
   25c18:	1a2d      	subs	r5, r5, r0
   25c1a:	f04f 0340 	mov.w	r3, #64	; 0x40
   25c1e:	f3ef 8811 	mrs	r8, BASEPRI
   25c22:	f383 8812 	msr	BASEPRI_MAX, r3
   25c26:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   25c2a:	4f14      	ldr	r7, [pc, #80]	; (25c7c <z_tick_sleep+0x8c>)
   25c2c:	68b8      	ldr	r0, [r7, #8]
   25c2e:	4b14      	ldr	r3, [pc, #80]	; (25c80 <z_tick_sleep+0x90>)
   25c30:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   25c32:	f7ff fe69 	bl	25908 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   25c36:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   25c38:	4622      	mov	r2, r4
   25c3a:	4633      	mov	r3, r6
   25c3c:	4911      	ldr	r1, [pc, #68]	; (25c84 <z_tick_sleep+0x94>)
   25c3e:	3018      	adds	r0, #24
   25c40:	f000 f936 	bl	25eb0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   25c44:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   25c46:	7b53      	ldrb	r3, [r2, #13]
   25c48:	f043 0310 	orr.w	r3, r3, #16
   25c4c:	7353      	strb	r3, [r2, #13]
   25c4e:	4640      	mov	r0, r8
   25c50:	f7f1 f842 	bl	16cd8 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   25c54:	f007 fd1f 	bl	2d696 <sys_clock_tick_get_32>
   25c58:	1a28      	subs	r0, r5, r0
   25c5a:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   25c5e:	2801      	cmp	r0, #1
   25c60:	f173 0300 	sbcs.w	r3, r3, #0
   25c64:	da00      	bge.n	25c68 <z_tick_sleep+0x78>
	return 0;
   25c66:	2000      	movs	r0, #0
}
   25c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
   25c6c:	f7ff ff7a 	bl	25b64 <z_impl_k_yield>
		return 0;
   25c70:	2000      	movs	r0, #0
   25c72:	e7f9      	b.n	25c68 <z_tick_sleep+0x78>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   25c74:	f007 fd0f 	bl	2d696 <sys_clock_tick_get_32>
   25c78:	1905      	adds	r5, r0, r4
   25c7a:	e7ce      	b.n	25c1a <z_tick_sleep+0x2a>
   25c7c:	20008f98 	.word	0x20008f98
   25c80:	20008fcc 	.word	0x20008fcc
   25c84:	0002d3af 	.word	0x0002d3af

00025c88 <z_impl_k_sleep>:
{
   25c88:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   25c8a:	f1b1 3fff 	cmp.w	r1, #4294967295
   25c8e:	bf08      	it	eq
   25c90:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   25c94:	d018      	beq.n	25cc8 <z_impl_k_sleep+0x40>
	ticks = z_tick_sleep(ticks);
   25c96:	f7ff ffab 	bl	25bf0 <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
   25c9a:	17c2      	asrs	r2, r0, #31
			return ((t * to_hz + off) / from_hz);
   25c9c:	0151      	lsls	r1, r2, #5
   25c9e:	ea41 61d0 	orr.w	r1, r1, r0, lsr #27
   25ca2:	0143      	lsls	r3, r0, #5
   25ca4:	1a1b      	subs	r3, r3, r0
   25ca6:	eb61 0102 	sbc.w	r1, r1, r2
   25caa:	0089      	lsls	r1, r1, #2
   25cac:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
   25cb0:	009b      	lsls	r3, r3, #2
   25cb2:	181b      	adds	r3, r3, r0
   25cb4:	eb42 0201 	adc.w	r2, r2, r1
   25cb8:	00d2      	lsls	r2, r2, #3
   25cba:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
   25cbe:	f3c3 3310 	ubfx	r3, r3, #12, #17
   25cc2:	ea43 4042 	orr.w	r0, r3, r2, lsl #17
}
   25cc6:	bd08      	pop	{r3, pc}
		k_thread_suspend(_current);
   25cc8:	4b03      	ldr	r3, [pc, #12]	; (25cd8 <z_impl_k_sleep+0x50>)
   25cca:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   25ccc:	f7ff feb2 	bl	25a34 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   25cd0:	f04f 30ff 	mov.w	r0, #4294967295
   25cd4:	e7f7      	b.n	25cc6 <z_impl_k_sleep+0x3e>
   25cd6:	bf00      	nop
   25cd8:	20008f98 	.word	0x20008f98

00025cdc <z_impl_k_usleep>:
{
   25cdc:	b508      	push	{r3, lr}
	ticks = k_us_to_ticks_ceil64(us);
   25cde:	17c1      	asrs	r1, r0, #31
   25ce0:	03c9      	lsls	r1, r1, #15
   25ce2:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   25ce6:	03c0      	lsls	r0, r0, #15
   25ce8:	4b15      	ldr	r3, [pc, #84]	; (25d40 <z_impl_k_usleep+0x64>)
   25cea:	18c0      	adds	r0, r0, r3
   25cec:	4a15      	ldr	r2, [pc, #84]	; (25d44 <z_impl_k_usleep+0x68>)
   25cee:	f04f 0300 	mov.w	r3, #0
   25cf2:	f141 0100 	adc.w	r1, r1, #0
   25cf6:	f7da fa03 	bl	100 <__aeabi_uldivmod>
	ticks = z_tick_sleep(ticks);
   25cfa:	17c1      	asrs	r1, r0, #31
   25cfc:	f7ff ff78 	bl	25bf0 <z_tick_sleep>
	return k_ticks_to_us_floor64(ticks);
   25d00:	ea4f 7ce0 	mov.w	ip, r0, asr #31
   25d04:	ea4f 124c 	mov.w	r2, ip, lsl #5
   25d08:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
   25d0c:	0143      	lsls	r3, r0, #5
   25d0e:	1a1b      	subs	r3, r3, r0
   25d10:	eb62 020c 	sbc.w	r2, r2, ip
   25d14:	0252      	lsls	r2, r2, #9
   25d16:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
   25d1a:	025b      	lsls	r3, r3, #9
   25d1c:	181b      	adds	r3, r3, r0
   25d1e:	eb4c 0202 	adc.w	r2, ip, r2
   25d22:	ea4f 1e82 	mov.w	lr, r2, lsl #6
   25d26:	ea4e 6e93 	orr.w	lr, lr, r3, lsr #26
   25d2a:	0199      	lsls	r1, r3, #6
   25d2c:	1acb      	subs	r3, r1, r3
   25d2e:	eb6e 0e02 	sbc.w	lr, lr, r2
   25d32:	181b      	adds	r3, r3, r0
   25d34:	eb4c 000e 	adc.w	r0, ip, lr
   25d38:	0bdb      	lsrs	r3, r3, #15
}
   25d3a:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
   25d3e:	bd08      	pop	{r3, pc}
   25d40:	000f423f 	.word	0x000f423f
   25d44:	000f4240 	.word	0x000f4240

00025d48 <z_impl_z_current_get>:
}
   25d48:	4b01      	ldr	r3, [pc, #4]	; (25d50 <z_impl_z_current_get+0x8>)
   25d4a:	6898      	ldr	r0, [r3, #8]
   25d4c:	4770      	bx	lr
   25d4e:	bf00      	nop
   25d50:	20008f98 	.word	0x20008f98

00025d54 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
   25d54:	b570      	push	{r4, r5, r6, lr}
   25d56:	f04f 0340 	mov.w	r3, #64	; 0x40
   25d5a:	f3ef 8511 	mrs	r5, BASEPRI
   25d5e:	f383 8812 	msr	BASEPRI_MAX, r3
   25d62:	f3bf 8f6f 	isb	sy
   25d66:	462e      	mov	r6, r5
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   25d68:	7b03      	ldrb	r3, [r0, #12]
   25d6a:	f013 0f01 	tst.w	r3, #1
   25d6e:	d109      	bne.n	25d84 <z_thread_abort+0x30>
   25d70:	4604      	mov	r4, r0
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
		return;
	}

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   25d72:	7b43      	ldrb	r3, [r0, #13]
   25d74:	f013 0f08 	tst.w	r3, #8
   25d78:	d00f      	beq.n	25d9a <z_thread_abort+0x46>
	__asm__ volatile(
   25d7a:	f385 8811 	msr	BASEPRI, r5
   25d7e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		return;
   25d82:	e009      	b.n	25d98 <z_thread_abort+0x44>
   25d84:	f385 8811 	msr	BASEPRI, r5
   25d88:	f3bf 8f6f 	isb	sy
		k_panic();
   25d8c:	4040      	eors	r0, r0
   25d8e:	f380 8811 	msr	BASEPRI, r0
   25d92:	f04f 0004 	mov.w	r0, #4
   25d96:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   25d98:	bd70      	pop	{r4, r5, r6, pc}
	end_thread(thread);
   25d9a:	f7ff fea5 	bl	25ae8 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
   25d9e:	4b08      	ldr	r3, [pc, #32]	; (25dc0 <z_thread_abort+0x6c>)
   25da0:	689b      	ldr	r3, [r3, #8]
   25da2:	42a3      	cmp	r3, r4
   25da4:	d004      	beq.n	25db0 <z_thread_abort+0x5c>
   25da6:	f386 8811 	msr	BASEPRI, r6
   25daa:	f3bf 8f6f 	isb	sy
   25dae:	e7f3      	b.n	25d98 <z_thread_abort+0x44>
   25db0:	f3ef 8305 	mrs	r3, IPSR
   25db4:	2b00      	cmp	r3, #0
   25db6:	d1f6      	bne.n	25da6 <z_thread_abort+0x52>
   25db8:	4628      	mov	r0, r5
   25dba:	f7f0 ff8d 	bl	16cd8 <arch_swap>
	return ret;
   25dbe:	e7f2      	b.n	25da6 <z_thread_abort+0x52>
   25dc0:	20008f98 	.word	0x20008f98

00025dc4 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   25dc4:	e92d 4810 	stmdb	sp!, {r4, fp, lr}
   25dc8:	b083      	sub	sp, #12
   25dca:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   25dcc:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
   25dd0:	e9cd bc00 	strd	fp, ip, [sp]
   25dd4:	f7ff fdb4 	bl	25940 <z_pend_curr>

	if (data != NULL) {
   25dd8:	b11c      	cbz	r4, 25de2 <z_sched_wait+0x1e>
		*data = _current->base.swap_data;
   25dda:	4b03      	ldr	r3, [pc, #12]	; (25de8 <z_sched_wait+0x24>)
   25ddc:	689b      	ldr	r3, [r3, #8]
   25dde:	695b      	ldr	r3, [r3, #20]
   25de0:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   25de2:	b003      	add	sp, #12
   25de4:	e8bd 8810 	ldmia.w	sp!, {r4, fp, pc}
   25de8:	20008f98 	.word	0x20008f98

00025dec <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   25dec:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   25dee:	4806      	ldr	r0, [pc, #24]	; (25e08 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   25df0:	4a06      	ldr	r2, [pc, #24]	; (25e0c <z_data_copy+0x20>)
   25df2:	1a12      	subs	r2, r2, r0
   25df4:	4906      	ldr	r1, [pc, #24]	; (25e10 <z_data_copy+0x24>)
   25df6:	f006 febc 	bl	2cb72 <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   25dfa:	4a06      	ldr	r2, [pc, #24]	; (25e14 <z_data_copy+0x28>)
   25dfc:	4906      	ldr	r1, [pc, #24]	; (25e18 <z_data_copy+0x2c>)
   25dfe:	4807      	ldr	r0, [pc, #28]	; (25e1c <z_data_copy+0x30>)
   25e00:	f006 feb7 	bl	2cb72 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   25e04:	bd08      	pop	{r3, pc}
   25e06:	bf00      	nop
   25e08:	20000000 	.word	0x20000000
   25e0c:	20000d4c 	.word	0x20000d4c
   25e10:	000313b0 	.word	0x000313b0
   25e14:	00000000 	.word	0x00000000
   25e18:	000313b0 	.word	0x000313b0
   25e1c:	20000000 	.word	0x20000000

00025e20 <first>:
	return list->head == list;
   25e20:	4b03      	ldr	r3, [pc, #12]	; (25e30 <first+0x10>)
   25e22:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25e24:	4298      	cmp	r0, r3
   25e26:	d000      	beq.n	25e2a <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
   25e28:	4770      	bx	lr
   25e2a:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
   25e2c:	e7fc      	b.n	25e28 <first+0x8>
   25e2e:	bf00      	nop
   25e30:	20000b1c 	.word	0x20000b1c

00025e34 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   25e34:	b130      	cbz	r0, 25e44 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
   25e36:	4a04      	ldr	r2, [pc, #16]	; (25e48 <next+0x14>)
   25e38:	6852      	ldr	r2, [r2, #4]
   25e3a:	4290      	cmp	r0, r2
   25e3c:	d001      	beq.n	25e42 <next+0xe>
   25e3e:	6800      	ldr	r0, [r0, #0]
   25e40:	4770      	bx	lr
   25e42:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
   25e44:	4770      	bx	lr
   25e46:	bf00      	nop
   25e48:	20000b1c 	.word	0x20000b1c

00025e4c <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
   25e4c:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   25e4e:	4b04      	ldr	r3, [pc, #16]	; (25e60 <elapsed+0x14>)
   25e50:	681b      	ldr	r3, [r3, #0]
   25e52:	b10b      	cbz	r3, 25e58 <elapsed+0xc>
   25e54:	2000      	movs	r0, #0
}
   25e56:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   25e58:	f7fc fbfa 	bl	22650 <sys_clock_elapsed>
   25e5c:	e7fb      	b.n	25e56 <elapsed+0xa>
   25e5e:	bf00      	nop
   25e60:	20008fd8 	.word	0x20008fd8

00025e64 <next_timeout>:

static int32_t next_timeout(void)
{
   25e64:	b510      	push	{r4, lr}
	struct _timeout *to = first();
   25e66:	f7ff ffdb 	bl	25e20 <first>
   25e6a:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
   25e6c:	f7ff ffee 	bl	25e4c <elapsed>
	int32_t ret;

	if ((to == NULL) ||
   25e70:	b17c      	cbz	r4, 25e92 <next_timeout+0x2e>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   25e72:	6923      	ldr	r3, [r4, #16]
   25e74:	6962      	ldr	r2, [r4, #20]
   25e76:	1a1b      	subs	r3, r3, r0
   25e78:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   25e7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   25e80:	f172 0100 	sbcs.w	r1, r2, #0
   25e84:	da08      	bge.n	25e98 <next_timeout+0x34>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
   25e86:	2a00      	cmp	r2, #0
   25e88:	db01      	blt.n	25e8e <next_timeout+0x2a>
   25e8a:	4618      	mov	r0, r3
   25e8c:	e006      	b.n	25e9c <next_timeout+0x38>
   25e8e:	2300      	movs	r3, #0
   25e90:	e7fb      	b.n	25e8a <next_timeout+0x26>
		ret = MAX_WAIT;
   25e92:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   25e96:	e001      	b.n	25e9c <next_timeout+0x38>
   25e98:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   25e9c:	4b03      	ldr	r3, [pc, #12]	; (25eac <next_timeout+0x48>)
   25e9e:	691b      	ldr	r3, [r3, #16]
   25ea0:	b113      	cbz	r3, 25ea8 <next_timeout+0x44>
   25ea2:	4283      	cmp	r3, r0
   25ea4:	da00      	bge.n	25ea8 <next_timeout+0x44>
		ret = _current_cpu->slice_ticks;
   25ea6:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
   25ea8:	bd10      	pop	{r4, pc}
   25eaa:	bf00      	nop
   25eac:	20008f98 	.word	0x20008f98

00025eb0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   25eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
   25eb4:	bf08      	it	eq
   25eb6:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   25eba:	d07b      	beq.n	25fb4 <z_add_timeout+0x104>
{
   25ebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25ec0:	4604      	mov	r4, r0
   25ec2:	4692      	mov	sl, r2
   25ec4:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   25ec6:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
   25ec8:	2300      	movs	r3, #0
	__asm__ volatile(
   25eca:	f04f 0240 	mov.w	r2, #64	; 0x40
   25ece:	f3ef 8711 	mrs	r7, BASEPRI
   25ed2:	f382 8812 	msr	BASEPRI_MAX, r2
   25ed6:	f3bf 8f6f 	isb	sy
   25eda:	e026      	b.n	25f2a <z_add_timeout+0x7a>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   25edc:	f11a 0801 	adds.w	r8, sl, #1
   25ee0:	f145 0900 	adc.w	r9, r5, #0
   25ee4:	f7ff ffb2 	bl	25e4c <elapsed>
   25ee8:	eb18 0300 	adds.w	r3, r8, r0
   25eec:	eb49 70e0 	adc.w	r0, r9, r0, asr #31
   25ef0:	6123      	str	r3, [r4, #16]
   25ef2:	6160      	str	r0, [r4, #20]
   25ef4:	e03b      	b.n	25f6e <z_add_timeout+0xbe>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
   25ef6:	1a52      	subs	r2, r2, r1
   25ef8:	eb66 0303 	sbc.w	r3, r6, r3
   25efc:	6102      	str	r2, [r0, #16]
   25efe:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
   25f00:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
   25f02:	6063      	str	r3, [r4, #4]
	node->next = successor;
   25f04:	6020      	str	r0, [r4, #0]
	prev->next = node;
   25f06:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   25f08:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
   25f0a:	e005      	b.n	25f18 <z_add_timeout+0x68>
	sys_dnode_t *const tail = list->tail;
   25f0c:	4b2a      	ldr	r3, [pc, #168]	; (25fb8 <z_add_timeout+0x108>)
   25f0e:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   25f10:	6023      	str	r3, [r4, #0]
	node->prev = tail;
   25f12:	6062      	str	r2, [r4, #4]
	tail->next = node;
   25f14:	6014      	str	r4, [r2, #0]
	list->tail = node;
   25f16:	605c      	str	r4, [r3, #4]
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   25f18:	f7ff ff82 	bl	25e20 <first>
   25f1c:	4284      	cmp	r4, r0
   25f1e:	d03a      	beq.n	25f96 <z_add_timeout+0xe6>
	__asm__ volatile(
   25f20:	f387 8811 	msr	BASEPRI, r7
   25f24:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   25f28:	2301      	movs	r3, #1
   25f2a:	2b00      	cmp	r3, #0
   25f2c:	d140      	bne.n	25fb0 <z_add_timeout+0x100>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   25f2e:	4653      	mov	r3, sl
   25f30:	f06f 0101 	mvn.w	r1, #1
   25f34:	ebb1 010a 	subs.w	r1, r1, sl
   25f38:	f04f 30ff 	mov.w	r0, #4294967295
   25f3c:	eb60 0205 	sbc.w	r2, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   25f40:	2a00      	cmp	r2, #0
   25f42:	dbcb      	blt.n	25edc <z_add_timeout+0x2c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   25f44:	4a1d      	ldr	r2, [pc, #116]	; (25fbc <z_add_timeout+0x10c>)
   25f46:	6811      	ldr	r1, [r2, #0]
   25f48:	6852      	ldr	r2, [r2, #4]
   25f4a:	185b      	adds	r3, r3, r1
   25f4c:	eb42 0205 	adc.w	r2, r2, r5
   25f50:	f06f 0101 	mvn.w	r1, #1
   25f54:	1ac9      	subs	r1, r1, r3
   25f56:	eb60 0302 	sbc.w	r3, r0, r2
			to->dticks = MAX(1, ticks);
   25f5a:	4608      	mov	r0, r1
   25f5c:	461a      	mov	r2, r3
   25f5e:	2901      	cmp	r1, #1
   25f60:	f173 0300 	sbcs.w	r3, r3, #0
   25f64:	da01      	bge.n	25f6a <z_add_timeout+0xba>
   25f66:	2001      	movs	r0, #1
   25f68:	2200      	movs	r2, #0
   25f6a:	6120      	str	r0, [r4, #16]
   25f6c:	6162      	str	r2, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
   25f6e:	f7ff ff57 	bl	25e20 <first>
   25f72:	2800      	cmp	r0, #0
   25f74:	d0ca      	beq.n	25f0c <z_add_timeout+0x5c>
			if (t->dticks > to->dticks) {
   25f76:	6902      	ldr	r2, [r0, #16]
   25f78:	6946      	ldr	r6, [r0, #20]
   25f7a:	6921      	ldr	r1, [r4, #16]
   25f7c:	6963      	ldr	r3, [r4, #20]
   25f7e:	4291      	cmp	r1, r2
   25f80:	eb73 0e06 	sbcs.w	lr, r3, r6
   25f84:	dbb7      	blt.n	25ef6 <z_add_timeout+0x46>
			to->dticks -= t->dticks;
   25f86:	1a89      	subs	r1, r1, r2
   25f88:	eb63 0306 	sbc.w	r3, r3, r6
   25f8c:	6121      	str	r1, [r4, #16]
   25f8e:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
   25f90:	f7ff ff50 	bl	25e34 <next>
   25f94:	e7ed      	b.n	25f72 <z_add_timeout+0xc2>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   25f96:	f7ff ff65 	bl	25e64 <next_timeout>

			if (next_time == 0 ||
   25f9a:	4603      	mov	r3, r0
   25f9c:	b118      	cbz	r0, 25fa6 <z_add_timeout+0xf6>
			    _current_cpu->slice_ticks != next_time) {
   25f9e:	4a08      	ldr	r2, [pc, #32]	; (25fc0 <z_add_timeout+0x110>)
   25fa0:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
   25fa2:	4282      	cmp	r2, r0
   25fa4:	d0bc      	beq.n	25f20 <z_add_timeout+0x70>
				sys_clock_set_timeout(next_time, false);
   25fa6:	2100      	movs	r1, #0
   25fa8:	4618      	mov	r0, r3
   25faa:	f7fc fb15 	bl	225d8 <sys_clock_set_timeout>
   25fae:	e7b7      	b.n	25f20 <z_add_timeout+0x70>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   25fb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   25fb4:	4770      	bx	lr
   25fb6:	bf00      	nop
   25fb8:	20000b1c 	.word	0x20000b1c
   25fbc:	20007ab0 	.word	0x20007ab0
   25fc0:	20008f98 	.word	0x20008f98

00025fc4 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   25fc4:	b570      	push	{r4, r5, r6, lr}
   25fc6:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   25fc8:	f7ff fc08 	bl	257dc <z_time_slice>
	__asm__ volatile(
   25fcc:	f04f 0340 	mov.w	r3, #64	; 0x40
   25fd0:	f3ef 8611 	mrs	r6, BASEPRI
   25fd4:	f383 8812 	msr	BASEPRI_MAX, r3
   25fd8:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   25fdc:	4b28      	ldr	r3, [pc, #160]	; (26080 <sys_clock_announce+0xbc>)
   25fde:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   25fe0:	e021      	b.n	26026 <sys_clock_announce+0x62>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   25fe2:	4a28      	ldr	r2, [pc, #160]	; (26084 <sys_clock_announce+0xc0>)
   25fe4:	6813      	ldr	r3, [r2, #0]
   25fe6:	6851      	ldr	r1, [r2, #4]
   25fe8:	195b      	adds	r3, r3, r5
   25fea:	eb41 71e5 	adc.w	r1, r1, r5, asr #31
   25fee:	6013      	str	r3, [r2, #0]
   25ff0:	6051      	str	r1, [r2, #4]
		t->dticks = 0;
   25ff2:	2200      	movs	r2, #0
   25ff4:	2300      	movs	r3, #0
   25ff6:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   25ffa:	4620      	mov	r0, r4
   25ffc:	f007 fad4 	bl	2d5a8 <remove_timeout>
	__asm__ volatile(
   26000:	f386 8811 	msr	BASEPRI, r6
   26004:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
   26008:	68a3      	ldr	r3, [r4, #8]
   2600a:	4620      	mov	r0, r4
   2600c:	4798      	blx	r3
	__asm__ volatile(
   2600e:	f04f 0340 	mov.w	r3, #64	; 0x40
   26012:	f3ef 8611 	mrs	r6, BASEPRI
   26016:	f383 8812 	msr	BASEPRI_MAX, r3
   2601a:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
   2601e:	4a18      	ldr	r2, [pc, #96]	; (26080 <sys_clock_announce+0xbc>)
   26020:	6813      	ldr	r3, [r2, #0]
   26022:	1b5b      	subs	r3, r3, r5
   26024:	6013      	str	r3, [r2, #0]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   26026:	f7ff fefb 	bl	25e20 <first>
   2602a:	4604      	mov	r4, r0
   2602c:	b138      	cbz	r0, 2603e <sys_clock_announce+0x7a>
   2602e:	6905      	ldr	r5, [r0, #16]
   26030:	6941      	ldr	r1, [r0, #20]
   26032:	4b13      	ldr	r3, [pc, #76]	; (26080 <sys_clock_announce+0xbc>)
   26034:	681a      	ldr	r2, [r3, #0]
   26036:	17d3      	asrs	r3, r2, #31
   26038:	42aa      	cmp	r2, r5
   2603a:	418b      	sbcs	r3, r1
   2603c:	dad1      	bge.n	25fe2 <sys_clock_announce+0x1e>
	}

	if (first() != NULL) {
   2603e:	b144      	cbz	r4, 26052 <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
   26040:	6923      	ldr	r3, [r4, #16]
   26042:	6962      	ldr	r2, [r4, #20]
   26044:	490e      	ldr	r1, [pc, #56]	; (26080 <sys_clock_announce+0xbc>)
   26046:	6809      	ldr	r1, [r1, #0]
   26048:	1a5b      	subs	r3, r3, r1
   2604a:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
   2604e:	6123      	str	r3, [r4, #16]
   26050:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
   26052:	4a0c      	ldr	r2, [pc, #48]	; (26084 <sys_clock_announce+0xc0>)
   26054:	4d0a      	ldr	r5, [pc, #40]	; (26080 <sys_clock_announce+0xbc>)
   26056:	6828      	ldr	r0, [r5, #0]
   26058:	6813      	ldr	r3, [r2, #0]
   2605a:	6851      	ldr	r1, [r2, #4]
   2605c:	181b      	adds	r3, r3, r0
   2605e:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
   26062:	6013      	str	r3, [r2, #0]
   26064:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
   26066:	2400      	movs	r4, #0
   26068:	602c      	str	r4, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
   2606a:	f7ff fefb 	bl	25e64 <next_timeout>
   2606e:	4621      	mov	r1, r4
   26070:	f7fc fab2 	bl	225d8 <sys_clock_set_timeout>
	__asm__ volatile(
   26074:	f386 8811 	msr	BASEPRI, r6
   26078:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   2607c:	bd70      	pop	{r4, r5, r6, pc}
   2607e:	bf00      	nop
   26080:	20008fd8 	.word	0x20008fd8
   26084:	20007ab0 	.word	0x20007ab0

00026088 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   26088:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
   2608a:	2200      	movs	r2, #0
	__asm__ volatile(
   2608c:	f04f 0340 	mov.w	r3, #64	; 0x40
   26090:	f3ef 8411 	mrs	r4, BASEPRI
   26094:	f383 8812 	msr	BASEPRI_MAX, r3
   26098:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
   2609c:	4613      	mov	r3, r2
   2609e:	4611      	mov	r1, r2
   260a0:	e00c      	b.n	260bc <sys_clock_tick_get+0x34>
		t = curr_tick + elapsed();
   260a2:	f7ff fed3 	bl	25e4c <elapsed>
   260a6:	4a07      	ldr	r2, [pc, #28]	; (260c4 <sys_clock_tick_get+0x3c>)
   260a8:	6813      	ldr	r3, [r2, #0]
   260aa:	6851      	ldr	r1, [r2, #4]
   260ac:	18c3      	adds	r3, r0, r3
   260ae:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
	__asm__ volatile(
   260b2:	f384 8811 	msr	BASEPRI, r4
   260b6:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   260ba:	2201      	movs	r2, #1
   260bc:	2a00      	cmp	r2, #0
   260be:	d0f0      	beq.n	260a2 <sys_clock_tick_get+0x1a>
	}
	return t;
}
   260c0:	4618      	mov	r0, r3
   260c2:	bd10      	pop	{r4, pc}
   260c4:	20007ab0 	.word	0x20007ab0

000260c8 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   260c8:	b538      	push	{r3, r4, r5, lr}
   260ca:	4604      	mov	r4, r0
	__asm__ volatile(
   260cc:	f04f 0340 	mov.w	r3, #64	; 0x40
   260d0:	f3ef 8511 	mrs	r5, BASEPRI
   260d4:	f383 8812 	msr	BASEPRI_MAX, r3
   260d8:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   260dc:	6a82      	ldr	r2, [r0, #40]	; 0x28
   260de:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   260e0:	ea52 0103 	orrs.w	r1, r2, r3
   260e4:	d005      	beq.n	260f2 <z_timer_expiration_handler+0x2a>
   260e6:	f1b3 3fff 	cmp.w	r3, #4294967295
   260ea:	bf08      	it	eq
   260ec:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   260f0:	d128      	bne.n	26144 <z_timer_expiration_handler+0x7c>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
   260f2:	6b23      	ldr	r3, [r4, #48]	; 0x30
   260f4:	3301      	adds	r3, #1
   260f6:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   260f8:	6a23      	ldr	r3, [r4, #32]
   260fa:	b173      	cbz	r3, 2611a <z_timer_expiration_handler+0x52>
	__asm__ volatile(
   260fc:	f385 8811 	msr	BASEPRI, r5
   26100:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   26104:	6a23      	ldr	r3, [r4, #32]
   26106:	4620      	mov	r0, r4
   26108:	4798      	blx	r3
	__asm__ volatile(
   2610a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2610e:	f3ef 8511 	mrs	r5, BASEPRI
   26112:	f383 8812 	msr	BASEPRI_MAX, r3
   26116:	f3bf 8f6f 	isb	sy
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   2611a:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
   2611e:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26120:	42a3      	cmp	r3, r4
   26122:	d038      	beq.n	26196 <z_timer_expiration_handler+0xce>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   26124:	2c00      	cmp	r4, #0
   26126:	d036      	beq.n	26196 <z_timer_expiration_handler+0xce>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
   26128:	4620      	mov	r0, r4
   2612a:	f007 f8bb 	bl	2d2a4 <z_unpend_thread_no_timeout>
   2612e:	2300      	movs	r3, #0
   26130:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	__asm__ volatile(
   26134:	f385 8811 	msr	BASEPRI, r5
   26138:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
   2613c:	4620      	mov	r0, r4
   2613e:	f007 f91a 	bl	2d376 <z_ready_thread>
}
   26142:	bd38      	pop	{r3, r4, r5, pc}
	return z_impl_k_uptime_ticks();
   26144:	f007 faab 	bl	2d69e <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   26148:	3001      	adds	r0, #1
   2614a:	f141 0100 	adc.w	r1, r1, #0
   2614e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   26150:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   26152:	18c0      	adds	r0, r0, r3
   26154:	eb41 0102 	adc.w	r1, r1, r2
   26158:	2801      	cmp	r0, #1
   2615a:	f171 0100 	sbcs.w	r1, r1, #0
   2615e:	da08      	bge.n	26172 <z_timer_expiration_handler+0xaa>
   26160:	f06f 0201 	mvn.w	r2, #1
   26164:	f04f 33ff 	mov.w	r3, #4294967295
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   26168:	490d      	ldr	r1, [pc, #52]	; (261a0 <z_timer_expiration_handler+0xd8>)
   2616a:	4620      	mov	r0, r4
   2616c:	f7ff fea0 	bl	25eb0 <z_add_timeout>
   26170:	e7bf      	b.n	260f2 <z_timer_expiration_handler+0x2a>
   26172:	f007 fa94 	bl	2d69e <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   26176:	3001      	adds	r0, #1
   26178:	f141 0300 	adc.w	r3, r1, #0
   2617c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   2617e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   26180:	1880      	adds	r0, r0, r2
   26182:	eb43 0301 	adc.w	r3, r3, r1
   26186:	f06f 0201 	mvn.w	r2, #1
   2618a:	1a12      	subs	r2, r2, r0
   2618c:	f04f 31ff 	mov.w	r1, #4294967295
   26190:	eb61 0303 	sbc.w	r3, r1, r3
   26194:	e7e8      	b.n	26168 <z_timer_expiration_handler+0xa0>
   26196:	f385 8811 	msr	BASEPRI, r5
   2619a:	f3bf 8f6f 	isb	sy
		return;
   2619e:	e7d0      	b.n	26142 <z_timer_expiration_handler+0x7a>
   261a0:	000260c9 	.word	0x000260c9

000261a4 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   261a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   261a8:	461e      	mov	r6, r3
   261aa:	9f06      	ldr	r7, [sp, #24]
   261ac:	f8dd 801c 	ldr.w	r8, [sp, #28]
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   261b0:	f1b3 3fff 	cmp.w	r3, #4294967295
   261b4:	bf08      	it	eq
   261b6:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   261ba:	d02f      	beq.n	2621c <z_impl_k_timer_start+0x78>
   261bc:	4605      	mov	r5, r0
   261be:	4614      	mov	r4, r2
   261c0:	4613      	mov	r3, r2
   261c2:	4631      	mov	r1, r6
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   261c4:	4640      	mov	r0, r8
   261c6:	f1b8 3fff 	cmp.w	r8, #4294967295
   261ca:	bf08      	it	eq
   261cc:	f1b7 3fff 	cmpeq.w	r7, #4294967295
   261d0:	d00d      	beq.n	261ee <z_impl_k_timer_start+0x4a>
   261d2:	ea57 0c08 	orrs.w	ip, r7, r8
   261d6:	d00a      	beq.n	261ee <z_impl_k_timer_start+0x4a>
	    Z_TICK_ABS(period.ticks) < 0) {
   261d8:	f06f 0c01 	mvn.w	ip, #1
   261dc:	ebbc 0c07 	subs.w	ip, ip, r7
   261e0:	f04f 3cff 	mov.w	ip, #4294967295
   261e4:	eb6c 0c08 	sbc.w	ip, ip, r8
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   261e8:	f1bc 0f00 	cmp.w	ip, #0
   261ec:	db18      	blt.n	26220 <z_impl_k_timer_start+0x7c>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   261ee:	f06f 0201 	mvn.w	r2, #1
   261f2:	1ad2      	subs	r2, r2, r3
   261f4:	f04f 32ff 	mov.w	r2, #4294967295
   261f8:	eb62 0201 	sbc.w	r2, r2, r1
   261fc:	2a00      	cmp	r2, #0
   261fe:	db1a      	blt.n	26236 <z_impl_k_timer_start+0x92>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
   26200:	4628      	mov	r0, r5
   26202:	f007 f9e8 	bl	2d5d6 <z_abort_timeout>
	timer->period = period;
   26206:	62af      	str	r7, [r5, #40]	; 0x28
   26208:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
	timer->status = 0U;
   2620c:	2300      	movs	r3, #0
   2620e:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   26210:	4622      	mov	r2, r4
   26212:	4633      	mov	r3, r6
   26214:	490e      	ldr	r1, [pc, #56]	; (26250 <z_impl_k_timer_start+0xac>)
   26216:	4628      	mov	r0, r5
   26218:	f7ff fe4a 	bl	25eb0 <z_add_timeout>
		     duration);
}
   2621c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		period.ticks = MAX(period.ticks - 1, 1);
   26220:	2f02      	cmp	r7, #2
   26222:	f170 0000 	sbcs.w	r0, r0, #0
   26226:	da02      	bge.n	2622e <z_impl_k_timer_start+0x8a>
   26228:	2702      	movs	r7, #2
   2622a:	f04f 0800 	mov.w	r8, #0
   2622e:	3f01      	subs	r7, #1
   26230:	f148 38ff 	adc.w	r8, r8, #4294967295
   26234:	e7db      	b.n	261ee <z_impl_k_timer_start+0x4a>
		duration.ticks = MAX(duration.ticks - 1, 0);
   26236:	461c      	mov	r4, r3
   26238:	460e      	mov	r6, r1
   2623a:	2b01      	cmp	r3, #1
   2623c:	f171 0100 	sbcs.w	r1, r1, #0
   26240:	da01      	bge.n	26246 <z_impl_k_timer_start+0xa2>
   26242:	2401      	movs	r4, #1
   26244:	2600      	movs	r6, #0
   26246:	3c01      	subs	r4, #1
   26248:	f146 36ff 	adc.w	r6, r6, #4294967295
   2624c:	e7d8      	b.n	26200 <z_impl_k_timer_start+0x5c>
   2624e:	bf00      	nop
   26250:	000260c9 	.word	0x000260c9

00026254 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   26254:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   26258:	b083      	sub	sp, #12
   2625a:	4607      	mov	r7, r0
   2625c:	4616      	mov	r6, r2
   2625e:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   26260:	4b28      	ldr	r3, [pc, #160]	; (26304 <z_impl_k_poll+0xb0>)
   26262:	689c      	ldr	r4, [r3, #8]

	poller->is_polling = true;
   26264:	2301      	movs	r3, #1
   26266:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	poller->mode = MODE_POLL;
   2626a:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   2626e:	ea55 0302 	orrs.w	r3, r5, r2
   26272:	bf0c      	ite	eq
   26274:	2301      	moveq	r3, #1
   26276:	2300      	movne	r3, #0
   26278:	f104 0260 	add.w	r2, r4, #96	; 0x60
   2627c:	f007 fb49 	bl	2d912 <register_events>
   26280:	4680      	mov	r8, r0
	__asm__ volatile(
   26282:	f04f 0340 	mov.w	r3, #64	; 0x40
   26286:	f3ef 8111 	mrs	r1, BASEPRI
   2628a:	f383 8812 	msr	BASEPRI_MAX, r3
   2628e:	f3bf 8f6f 	isb	sy
   26292:	4689      	mov	r9, r1
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   26294:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   26298:	b30b      	cbz	r3, 262de <z_impl_k_poll+0x8a>
		SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, 0);

		return 0;
	}

	poller->is_polling = false;
   2629a:	2300      	movs	r3, #0
   2629c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   262a0:	ea55 0306 	orrs.w	r3, r5, r6
   262a4:	d026      	beq.n	262f4 <z_impl_k_poll+0xa0>
		return -EAGAIN;
	}

	static _wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);

	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   262a6:	9600      	str	r6, [sp, #0]
   262a8:	9501      	str	r5, [sp, #4]
   262aa:	4a17      	ldr	r2, [pc, #92]	; (26308 <z_impl_k_poll+0xb4>)
   262ac:	4817      	ldr	r0, [pc, #92]	; (2630c <z_impl_k_poll+0xb8>)
   262ae:	f7ff fb47 	bl	25940 <z_pend_curr>
   262b2:	4604      	mov	r4, r0
   262b4:	f04f 0340 	mov.w	r3, #64	; 0x40
   262b8:	f3ef 8211 	mrs	r2, BASEPRI
   262bc:	f383 8812 	msr	BASEPRI_MAX, r3
   262c0:	f3bf 8f6f 	isb	sy
   262c4:	4615      	mov	r5, r2
	 * we've already know the return code (-EAGAIN), and even if they are
	 * added to the list of events that occurred, the user has to check the
	 * return code first, which invalidates the whole list of event states.
	 */
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
   262c6:	4641      	mov	r1, r8
   262c8:	4638      	mov	r0, r7
   262ca:	f007 fa96 	bl	2d7fa <clear_event_registrations>
	__asm__ volatile(
   262ce:	f385 8811 	msr	BASEPRI, r5
   262d2:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   262d6:	4620      	mov	r0, r4
   262d8:	b003      	add	sp, #12
   262da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		clear_event_registrations(events, events_registered, key);
   262de:	460a      	mov	r2, r1
   262e0:	4601      	mov	r1, r0
   262e2:	4638      	mov	r0, r7
   262e4:	f007 fa89 	bl	2d7fa <clear_event_registrations>
   262e8:	f389 8811 	msr	BASEPRI, r9
   262ec:	f3bf 8f6f 	isb	sy
		return 0;
   262f0:	2400      	movs	r4, #0
   262f2:	e7f0      	b.n	262d6 <z_impl_k_poll+0x82>
   262f4:	f381 8811 	msr	BASEPRI, r1
   262f8:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   262fc:	f06f 040a 	mvn.w	r4, #10
   26300:	e7e9      	b.n	262d6 <z_impl_k_poll+0x82>
   26302:	bf00      	nop
   26304:	20008f98 	.word	0x20008f98
   26308:	20000b24 	.word	0x20000b24
   2630c:	20008fdc 	.word	0x20008fdc

00026310 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   26310:	b538      	push	{r3, r4, r5, lr}
   26312:	4603      	mov	r3, r0
	__asm__ volatile(
   26314:	f04f 0240 	mov.w	r2, #64	; 0x40
   26318:	f3ef 8511 	mrs	r5, BASEPRI
   2631c:	f382 8812 	msr	BASEPRI_MAX, r2
   26320:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   26324:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   26326:	2201      	movs	r2, #1
   26328:	6082      	str	r2, [r0, #8]
	return list->head == list;
   2632a:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   2632c:	4283      	cmp	r3, r0
   2632e:	d010      	beq.n	26352 <z_impl_k_poll_signal_raise+0x42>
	sys_dnode_t *const prev = node->prev;
   26330:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
   26332:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
   26334:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   26336:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   26338:	2300      	movs	r3, #0
   2633a:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   2633c:	6043      	str	r3, [r0, #4]
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   2633e:	2101      	movs	r1, #1
   26340:	f007 fb71 	bl	2da26 <signal_poll_event>
   26344:	4604      	mov	r4, r0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
   26346:	4629      	mov	r1, r5
   26348:	4805      	ldr	r0, [pc, #20]	; (26360 <z_impl_k_poll_signal_raise+0x50>)
   2634a:	f7ff f995 	bl	25678 <z_reschedule>
	return rc;
}
   2634e:	4620      	mov	r0, r4
   26350:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   26352:	f385 8811 	msr	BASEPRI, r5
   26356:	f3bf 8f6f 	isb	sy
		return 0;
   2635a:	2400      	movs	r4, #0
   2635c:	e7f7      	b.n	2634e <z_impl_k_poll_signal_raise+0x3e>
   2635e:	bf00      	nop
   26360:	20008fdc 	.word	0x20008fdc

00026364 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   26364:	b538      	push	{r3, r4, r5, lr}
   26366:	4604      	mov	r4, r0
   26368:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   2636a:	f006 fcda 	bl	2cd22 <k_is_in_isr>
   2636e:	b948      	cbnz	r0, 26384 <z_thread_aligned_alloc+0x20>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   26370:	4b05      	ldr	r3, [pc, #20]	; (26388 <z_thread_aligned_alloc+0x24>)
   26372:	689b      	ldr	r3, [r3, #8]
   26374:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
	}

	if (heap != NULL) {
   26378:	b118      	cbz	r0, 26382 <z_thread_aligned_alloc+0x1e>
		ret = z_heap_aligned_alloc(heap, align, size);
   2637a:	462a      	mov	r2, r5
   2637c:	4621      	mov	r1, r4
   2637e:	f007 fba3 	bl	2dac8 <z_heap_aligned_alloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   26382:	bd38      	pop	{r3, r4, r5, pc}
		ret = NULL;
   26384:	2000      	movs	r0, #0
	return ret;
   26386:	e7fc      	b.n	26382 <z_thread_aligned_alloc+0x1e>
   26388:	20008f98 	.word	0x20008f98

0002638c <boot_banner>:
#else
#define BANNER_VERSION KERNEL_VERSION_STRING
#endif

void boot_banner(void)
{
   2638c:	b508      	push	{r3, lr}
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   2638e:	4802      	ldr	r0, [pc, #8]	; (26398 <boot_banner+0xc>)
   26390:	f000 fc36 	bl	26c00 <printk>
#endif /* CONFIG_BOOT_BANNER */
}
   26394:	bd08      	pop	{r3, pc}
   26396:	bf00      	nop
   26398:	00031280 	.word	0x00031280

0002639c <ocrypto_ecdh_p256_public_key>:
   2639c:	b530      	push	{r4, r5, lr}
   2639e:	b099      	sub	sp, #100	; 0x64
   263a0:	4605      	mov	r5, r0
   263a2:	4668      	mov	r0, sp
   263a4:	f000 f828 	bl	263f8 <ocrypto_sc_p256_from32bytes>
   263a8:	4669      	mov	r1, sp
   263aa:	4604      	mov	r4, r0
   263ac:	a808      	add	r0, sp, #32
   263ae:	f000 fa53 	bl	26858 <ocrypto_curve_p256_scalarmult_base>
   263b2:	a908      	add	r1, sp, #32
   263b4:	4304      	orrs	r4, r0
   263b6:	4628      	mov	r0, r5
   263b8:	f000 f98a 	bl	266d0 <ocrypto_curve_p256_to64bytes>
   263bc:	4620      	mov	r0, r4
   263be:	b019      	add	sp, #100	; 0x64
   263c0:	bd30      	pop	{r4, r5, pc}
   263c2:	bf00      	nop

000263c4 <ocrypto_ecdh_p256_common_secret>:
   263c4:	b570      	push	{r4, r5, r6, lr}
   263c6:	b098      	sub	sp, #96	; 0x60
   263c8:	4605      	mov	r5, r0
   263ca:	4668      	mov	r0, sp
   263cc:	4616      	mov	r6, r2
   263ce:	f000 f813 	bl	263f8 <ocrypto_sc_p256_from32bytes>
   263d2:	4631      	mov	r1, r6
   263d4:	4604      	mov	r4, r0
   263d6:	a808      	add	r0, sp, #32
   263d8:	f000 f946 	bl	26668 <ocrypto_curve_p256_from64bytes>
   263dc:	a908      	add	r1, sp, #32
   263de:	466a      	mov	r2, sp
   263e0:	4304      	orrs	r4, r0
   263e2:	4608      	mov	r0, r1
   263e4:	f000 f982 	bl	266ec <ocrypto_curve_p256_scalarmult>
   263e8:	a908      	add	r1, sp, #32
   263ea:	4304      	orrs	r4, r0
   263ec:	4628      	mov	r0, r5
   263ee:	f000 f96d 	bl	266cc <ocrypto_curve_p256_to32bytes>
   263f2:	4620      	mov	r0, r4
   263f4:	b018      	add	sp, #96	; 0x60
   263f6:	bd70      	pop	{r4, r5, r6, pc}

000263f8 <ocrypto_sc_p256_from32bytes>:
   263f8:	b570      	push	{r4, r5, r6, lr}
   263fa:	680b      	ldr	r3, [r1, #0]
   263fc:	4e12      	ldr	r6, [pc, #72]	; (26448 <ocrypto_sc_p256_from32bytes+0x50>)
   263fe:	ba1b      	rev	r3, r3
   26400:	61c3      	str	r3, [r0, #28]
   26402:	684b      	ldr	r3, [r1, #4]
   26404:	ba1b      	rev	r3, r3
   26406:	6183      	str	r3, [r0, #24]
   26408:	688b      	ldr	r3, [r1, #8]
   2640a:	ba1b      	rev	r3, r3
   2640c:	6143      	str	r3, [r0, #20]
   2640e:	68cb      	ldr	r3, [r1, #12]
   26410:	ba1b      	rev	r3, r3
   26412:	6103      	str	r3, [r0, #16]
   26414:	690b      	ldr	r3, [r1, #16]
   26416:	ba1b      	rev	r3, r3
   26418:	60c3      	str	r3, [r0, #12]
   2641a:	694b      	ldr	r3, [r1, #20]
   2641c:	ba1b      	rev	r3, r3
   2641e:	6083      	str	r3, [r0, #8]
   26420:	698b      	ldr	r3, [r1, #24]
   26422:	ba1b      	rev	r3, r3
   26424:	6043      	str	r3, [r0, #4]
   26426:	69cb      	ldr	r3, [r1, #28]
   26428:	ba1b      	rev	r3, r3
   2642a:	4632      	mov	r2, r6
   2642c:	6003      	str	r3, [r0, #0]
   2642e:	4601      	mov	r1, r0
   26430:	4604      	mov	r4, r0
   26432:	f7d9 fe9f 	bl	174 <ocrypto_bigint_sub256>
   26436:	4631      	mov	r1, r6
   26438:	4605      	mov	r5, r0
   2643a:	4602      	mov	r2, r0
   2643c:	4620      	mov	r0, r4
   2643e:	f7d9 feb9 	bl	1b4 <ocrypto_bigint_cadd256>
   26442:	1e68      	subs	r0, r5, #1
   26444:	bd70      	pop	{r4, r5, r6, pc}
   26446:	bf00      	nop
   26448:	000312b0 	.word	0x000312b0

0002644c <p256_zdblu>:
   2644c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26450:	b088      	sub	sp, #32
   26452:	460c      	mov	r4, r1
   26454:	4606      	mov	r6, r0
   26456:	f102 0120 	add.w	r1, r2, #32
   2645a:	4668      	mov	r0, sp
   2645c:	f106 0720 	add.w	r7, r6, #32
   26460:	4690      	mov	r8, r2
   26462:	f7da f991 	bl	788 <ocrypto_mod_p256_sqr>
   26466:	466a      	mov	r2, sp
   26468:	4669      	mov	r1, sp
   2646a:	4668      	mov	r0, sp
   2646c:	f7da f89e 	bl	5ac <ocrypto_mod_p256_add>
   26470:	4669      	mov	r1, sp
   26472:	4638      	mov	r0, r7
   26474:	f7da f988 	bl	788 <ocrypto_mod_p256_sqr>
   26478:	463a      	mov	r2, r7
   2647a:	4639      	mov	r1, r7
   2647c:	4638      	mov	r0, r7
   2647e:	f104 0520 	add.w	r5, r4, #32
   26482:	f7da f893 	bl	5ac <ocrypto_mod_p256_add>
   26486:	466a      	mov	r2, sp
   26488:	4669      	mov	r1, sp
   2648a:	4668      	mov	r0, sp
   2648c:	f7da f88e 	bl	5ac <ocrypto_mod_p256_add>
   26490:	4641      	mov	r1, r8
   26492:	4628      	mov	r0, r5
   26494:	f7da f978 	bl	788 <ocrypto_mod_p256_sqr>
   26498:	466a      	mov	r2, sp
   2649a:	4641      	mov	r1, r8
   2649c:	4630      	mov	r0, r6
   2649e:	f7da f95b 	bl	758 <ocrypto_mod_p256_mul>
   264a2:	462a      	mov	r2, r5
   264a4:	4629      	mov	r1, r5
   264a6:	4668      	mov	r0, sp
   264a8:	f7da f880 	bl	5ac <ocrypto_mod_p256_add>
   264ac:	462a      	mov	r2, r5
   264ae:	4669      	mov	r1, sp
   264b0:	4668      	mov	r0, sp
   264b2:	f7da f87b 	bl	5ac <ocrypto_mod_p256_add>
   264b6:	4a12      	ldr	r2, [pc, #72]	; (26500 <p256_zdblu+0xb4>)
   264b8:	4669      	mov	r1, sp
   264ba:	4668      	mov	r0, sp
   264bc:	f7da f876 	bl	5ac <ocrypto_mod_p256_add>
   264c0:	4669      	mov	r1, sp
   264c2:	4620      	mov	r0, r4
   264c4:	f7da f960 	bl	788 <ocrypto_mod_p256_sqr>
   264c8:	4632      	mov	r2, r6
   264ca:	4621      	mov	r1, r4
   264cc:	4620      	mov	r0, r4
   264ce:	f7da f8ab 	bl	628 <ocrypto_mod_p256_sub>
   264d2:	4632      	mov	r2, r6
   264d4:	4621      	mov	r1, r4
   264d6:	4620      	mov	r0, r4
   264d8:	f7da f8a6 	bl	628 <ocrypto_mod_p256_sub>
   264dc:	4622      	mov	r2, r4
   264de:	4631      	mov	r1, r6
   264e0:	4628      	mov	r0, r5
   264e2:	f7da f8a1 	bl	628 <ocrypto_mod_p256_sub>
   264e6:	466a      	mov	r2, sp
   264e8:	4629      	mov	r1, r5
   264ea:	4628      	mov	r0, r5
   264ec:	f7da f934 	bl	758 <ocrypto_mod_p256_mul>
   264f0:	463a      	mov	r2, r7
   264f2:	4629      	mov	r1, r5
   264f4:	4628      	mov	r0, r5
   264f6:	f7da f897 	bl	628 <ocrypto_mod_p256_sub>
   264fa:	b008      	add	sp, #32
   264fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26500:	00031350 	.word	0x00031350

00026504 <p256_zaddc>:
   26504:	b5f0      	push	{r4, r5, r6, r7, lr}
   26506:	b099      	sub	sp, #100	; 0x64
   26508:	4604      	mov	r4, r0
   2650a:	460d      	mov	r5, r1
   2650c:	460a      	mov	r2, r1
   2650e:	4601      	mov	r1, r0
   26510:	4668      	mov	r0, sp
   26512:	f7da f889 	bl	628 <ocrypto_mod_p256_sub>
   26516:	4669      	mov	r1, sp
   26518:	4668      	mov	r0, sp
   2651a:	f7da f935 	bl	788 <ocrypto_mod_p256_sqr>
   2651e:	466a      	mov	r2, sp
   26520:	4621      	mov	r1, r4
   26522:	a808      	add	r0, sp, #32
   26524:	f105 0620 	add.w	r6, r5, #32
   26528:	f104 0720 	add.w	r7, r4, #32
   2652c:	f7da f914 	bl	758 <ocrypto_mod_p256_mul>
   26530:	466a      	mov	r2, sp
   26532:	4629      	mov	r1, r5
   26534:	4668      	mov	r0, sp
   26536:	f7da f90f 	bl	758 <ocrypto_mod_p256_mul>
   2653a:	4632      	mov	r2, r6
   2653c:	4639      	mov	r1, r7
   2653e:	a810      	add	r0, sp, #64	; 0x40
   26540:	f7da f834 	bl	5ac <ocrypto_mod_p256_add>
   26544:	4632      	mov	r2, r6
   26546:	4639      	mov	r1, r7
   26548:	4630      	mov	r0, r6
   2654a:	f7da f86d 	bl	628 <ocrypto_mod_p256_sub>
   2654e:	4631      	mov	r1, r6
   26550:	4628      	mov	r0, r5
   26552:	f7da f919 	bl	788 <ocrypto_mod_p256_sqr>
   26556:	466a      	mov	r2, sp
   26558:	a908      	add	r1, sp, #32
   2655a:	4620      	mov	r0, r4
   2655c:	f7da f826 	bl	5ac <ocrypto_mod_p256_add>
   26560:	4622      	mov	r2, r4
   26562:	4629      	mov	r1, r5
   26564:	4628      	mov	r0, r5
   26566:	f7da f85f 	bl	628 <ocrypto_mod_p256_sub>
   2656a:	466a      	mov	r2, sp
   2656c:	a908      	add	r1, sp, #32
   2656e:	4668      	mov	r0, sp
   26570:	f7da f85a 	bl	628 <ocrypto_mod_p256_sub>
   26574:	466a      	mov	r2, sp
   26576:	4639      	mov	r1, r7
   26578:	4638      	mov	r0, r7
   2657a:	f7da f8ed 	bl	758 <ocrypto_mod_p256_mul>
   2657e:	462a      	mov	r2, r5
   26580:	a908      	add	r1, sp, #32
   26582:	4668      	mov	r0, sp
   26584:	f7da f850 	bl	628 <ocrypto_mod_p256_sub>
   26588:	466a      	mov	r2, sp
   2658a:	4631      	mov	r1, r6
   2658c:	4630      	mov	r0, r6
   2658e:	f7da f8e3 	bl	758 <ocrypto_mod_p256_mul>
   26592:	463a      	mov	r2, r7
   26594:	4631      	mov	r1, r6
   26596:	4630      	mov	r0, r6
   26598:	f7da f846 	bl	628 <ocrypto_mod_p256_sub>
   2659c:	a910      	add	r1, sp, #64	; 0x40
   2659e:	4668      	mov	r0, sp
   265a0:	f7da f8f2 	bl	788 <ocrypto_mod_p256_sqr>
   265a4:	4622      	mov	r2, r4
   265a6:	4669      	mov	r1, sp
   265a8:	4620      	mov	r0, r4
   265aa:	f7da f83d 	bl	628 <ocrypto_mod_p256_sub>
   265ae:	a908      	add	r1, sp, #32
   265b0:	4622      	mov	r2, r4
   265b2:	4608      	mov	r0, r1
   265b4:	f7da f838 	bl	628 <ocrypto_mod_p256_sub>
   265b8:	a910      	add	r1, sp, #64	; 0x40
   265ba:	aa08      	add	r2, sp, #32
   265bc:	4608      	mov	r0, r1
   265be:	f7da f8cb 	bl	758 <ocrypto_mod_p256_mul>
   265c2:	463a      	mov	r2, r7
   265c4:	a910      	add	r1, sp, #64	; 0x40
   265c6:	4638      	mov	r0, r7
   265c8:	f7da f82e 	bl	628 <ocrypto_mod_p256_sub>
   265cc:	b019      	add	sp, #100	; 0x64
   265ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

000265d0 <p256_zaddu>:
   265d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   265d4:	b088      	sub	sp, #32
   265d6:	460c      	mov	r4, r1
   265d8:	4605      	mov	r5, r0
   265da:	4690      	mov	r8, r2
   265dc:	460a      	mov	r2, r1
   265de:	4601      	mov	r1, r0
   265e0:	4668      	mov	r0, sp
   265e2:	f7da f821 	bl	628 <ocrypto_mod_p256_sub>
   265e6:	4669      	mov	r1, sp
   265e8:	4668      	mov	r0, sp
   265ea:	f7da f8cd 	bl	788 <ocrypto_mod_p256_sqr>
   265ee:	466a      	mov	r2, sp
   265f0:	4629      	mov	r1, r5
   265f2:	4628      	mov	r0, r5
   265f4:	f104 0620 	add.w	r6, r4, #32
   265f8:	f7da f8ae 	bl	758 <ocrypto_mod_p256_mul>
   265fc:	f105 0720 	add.w	r7, r5, #32
   26600:	466a      	mov	r2, sp
   26602:	4621      	mov	r1, r4
   26604:	4668      	mov	r0, sp
   26606:	f7da f8a7 	bl	758 <ocrypto_mod_p256_mul>
   2660a:	4632      	mov	r2, r6
   2660c:	4639      	mov	r1, r7
   2660e:	4630      	mov	r0, r6
   26610:	f7da f80a 	bl	628 <ocrypto_mod_p256_sub>
   26614:	4631      	mov	r1, r6
   26616:	4620      	mov	r0, r4
   26618:	f7da f8b6 	bl	788 <ocrypto_mod_p256_sqr>
   2661c:	462a      	mov	r2, r5
   2661e:	4621      	mov	r1, r4
   26620:	4620      	mov	r0, r4
   26622:	f7da f801 	bl	628 <ocrypto_mod_p256_sub>
   26626:	466a      	mov	r2, sp
   26628:	4621      	mov	r1, r4
   2662a:	4620      	mov	r0, r4
   2662c:	f7d9 fffc 	bl	628 <ocrypto_mod_p256_sub>
   26630:	466a      	mov	r2, sp
   26632:	4629      	mov	r1, r5
   26634:	4640      	mov	r0, r8
   26636:	f7d9 fff7 	bl	628 <ocrypto_mod_p256_sub>
   2663a:	4642      	mov	r2, r8
   2663c:	4639      	mov	r1, r7
   2663e:	4638      	mov	r0, r7
   26640:	f7da f88a 	bl	758 <ocrypto_mod_p256_mul>
   26644:	4622      	mov	r2, r4
   26646:	4629      	mov	r1, r5
   26648:	4668      	mov	r0, sp
   2664a:	f7d9 ffed 	bl	628 <ocrypto_mod_p256_sub>
   2664e:	466a      	mov	r2, sp
   26650:	4631      	mov	r1, r6
   26652:	4630      	mov	r0, r6
   26654:	f7da f880 	bl	758 <ocrypto_mod_p256_mul>
   26658:	463a      	mov	r2, r7
   2665a:	4631      	mov	r1, r6
   2665c:	4630      	mov	r0, r6
   2665e:	f7d9 ffe3 	bl	628 <ocrypto_mod_p256_sub>
   26662:	b008      	add	sp, #32
   26664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00026668 <ocrypto_curve_p256_from64bytes>:
   26668:	b570      	push	{r4, r5, r6, lr}
   2666a:	f100 0620 	add.w	r6, r0, #32
   2666e:	b090      	sub	sp, #64	; 0x40
   26670:	460d      	mov	r5, r1
   26672:	4604      	mov	r4, r0
   26674:	f000 f914 	bl	268a0 <ocrypto_mod_p256_from_bytes>
   26678:	f105 0120 	add.w	r1, r5, #32
   2667c:	4630      	mov	r0, r6
   2667e:	f000 f90f 	bl	268a0 <ocrypto_mod_p256_from_bytes>
   26682:	4621      	mov	r1, r4
   26684:	a808      	add	r0, sp, #32
   26686:	f7da f87f 	bl	788 <ocrypto_mod_p256_sqr>
   2668a:	a908      	add	r1, sp, #32
   2668c:	4608      	mov	r0, r1
   2668e:	4a0d      	ldr	r2, [pc, #52]	; (266c4 <ocrypto_curve_p256_from64bytes+0x5c>)
   26690:	f7d9 ff8c 	bl	5ac <ocrypto_mod_p256_add>
   26694:	a908      	add	r1, sp, #32
   26696:	4622      	mov	r2, r4
   26698:	4608      	mov	r0, r1
   2669a:	f7da f85d 	bl	758 <ocrypto_mod_p256_mul>
   2669e:	a908      	add	r1, sp, #32
   266a0:	4a09      	ldr	r2, [pc, #36]	; (266c8 <ocrypto_curve_p256_from64bytes+0x60>)
   266a2:	4608      	mov	r0, r1
   266a4:	f7d9 ff82 	bl	5ac <ocrypto_mod_p256_add>
   266a8:	4631      	mov	r1, r6
   266aa:	4668      	mov	r0, sp
   266ac:	f7da f86c 	bl	788 <ocrypto_mod_p256_sqr>
   266b0:	2220      	movs	r2, #32
   266b2:	4669      	mov	r1, sp
   266b4:	eb0d 0002 	add.w	r0, sp, r2
   266b8:	f7d9 ff4a 	bl	550 <ocrypto_constant_time_equal>
   266bc:	3801      	subs	r0, #1
   266be:	b010      	add	sp, #64	; 0x40
   266c0:	bd70      	pop	{r4, r5, r6, pc}
   266c2:	bf00      	nop
   266c4:	00031350 	.word	0x00031350
   266c8:	00031370 	.word	0x00031370

000266cc <ocrypto_curve_p256_to32bytes>:
   266cc:	f000 b902 	b.w	268d4 <ocrypto_mod_p256_to_bytes>

000266d0 <ocrypto_curve_p256_to64bytes>:
   266d0:	b538      	push	{r3, r4, r5, lr}
   266d2:	4604      	mov	r4, r0
   266d4:	460d      	mov	r5, r1
   266d6:	f000 f8fd 	bl	268d4 <ocrypto_mod_p256_to_bytes>
   266da:	f105 0120 	add.w	r1, r5, #32
   266de:	f104 0020 	add.w	r0, r4, #32
   266e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   266e6:	f000 b8f5 	b.w	268d4 <ocrypto_mod_p256_to_bytes>
   266ea:	bf00      	nop

000266ec <ocrypto_curve_p256_scalarmult>:
   266ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   266f0:	4613      	mov	r3, r2
   266f2:	b0b8      	sub	sp, #224	; 0xe0
   266f4:	4a54      	ldr	r2, [pc, #336]	; (26848 <ocrypto_curve_p256_scalarmult+0x15c>)
   266f6:	4689      	mov	r9, r1
   266f8:	4680      	mov	r8, r0
   266fa:	4619      	mov	r1, r3
   266fc:	a810      	add	r0, sp, #64	; 0x40
   266fe:	f7d9 fd39 	bl	174 <ocrypto_bigint_sub256>
   26702:	4952      	ldr	r1, [pc, #328]	; (2684c <ocrypto_curve_p256_scalarmult+0x160>)
   26704:	4602      	mov	r2, r0
   26706:	a810      	add	r0, sp, #64	; 0x40
   26708:	f7d9 fd54 	bl	1b4 <ocrypto_bigint_cadd256>
   2670c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   2670e:	494e      	ldr	r1, [pc, #312]	; (26848 <ocrypto_curve_p256_scalarmult+0x15c>)
   26710:	ea00 76d6 	and.w	r6, r0, r6, lsr #31
   26714:	4607      	mov	r7, r0
   26716:	f1c6 0201 	rsb	r2, r6, #1
   2671a:	a810      	add	r0, sp, #64	; 0x40
   2671c:	f7d9 fd4a 	bl	1b4 <ocrypto_bigint_cadd256>
   26720:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   26722:	464a      	mov	r2, r9
   26724:	ea6f 0a03 	mvn.w	sl, r3
   26728:	a928      	add	r1, sp, #160	; 0xa0
   2672a:	a818      	add	r0, sp, #96	; 0x60
   2672c:	f7ff fe8e 	bl	2644c <p256_zdblu>
   26730:	ea4f 7ada 	mov.w	sl, sl, lsr #31
   26734:	a920      	add	r1, sp, #128	; 0x80
   26736:	f1ca 0201 	rsb	r2, sl, #1
   2673a:	4608      	mov	r0, r1
   2673c:	f000 f892 	bl	26864 <ocrypto_mod_p256_cneg>
   26740:	f1c7 0701 	rsb	r7, r7, #1
   26744:	24fe      	movs	r4, #254	; 0xfe
   26746:	466a      	mov	r2, sp
   26748:	a918      	add	r1, sp, #96	; 0x60
   2674a:	a828      	add	r0, sp, #160	; 0xa0
   2674c:	f7ff ff40 	bl	265d0 <p256_zaddu>
   26750:	1162      	asrs	r2, r4, #5
   26752:	ab38      	add	r3, sp, #224	; 0xe0
   26754:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   26758:	f004 011f 	and.w	r1, r4, #31
   2675c:	f852 3ca0 	ldr.w	r3, [r2, #-160]
   26760:	40cb      	lsrs	r3, r1
   26762:	4655      	mov	r5, sl
   26764:	f003 0a01 	and.w	sl, r3, #1
   26768:	ea8a 0505 	eor.w	r5, sl, r5
   2676c:	462a      	mov	r2, r5
   2676e:	a928      	add	r1, sp, #160	; 0xa0
   26770:	a818      	add	r0, sp, #96	; 0x60
   26772:	f7d9 fd7b 	bl	26c <ocrypto_bigint_cswap256>
   26776:	462a      	mov	r2, r5
   26778:	a930      	add	r1, sp, #192	; 0xc0
   2677a:	a820      	add	r0, sp, #128	; 0x80
   2677c:	f7d9 fd76 	bl	26c <ocrypto_bigint_cswap256>
   26780:	3c01      	subs	r4, #1
   26782:	a928      	add	r1, sp, #160	; 0xa0
   26784:	a818      	add	r0, sp, #96	; 0x60
   26786:	f7ff febd 	bl	26504 <p256_zaddc>
   2678a:	1c63      	adds	r3, r4, #1
   2678c:	d1db      	bne.n	26746 <ocrypto_curve_p256_scalarmult+0x5a>
   2678e:	f1ca 0201 	rsb	r2, sl, #1
   26792:	a920      	add	r1, sp, #128	; 0x80
   26794:	a808      	add	r0, sp, #32
   26796:	f000 f865 	bl	26864 <ocrypto_mod_p256_cneg>
   2679a:	ea86 060a 	eor.w	r6, r6, sl
   2679e:	466a      	mov	r2, sp
   267a0:	a918      	add	r1, sp, #96	; 0x60
   267a2:	a828      	add	r0, sp, #160	; 0xa0
   267a4:	f7ff ff14 	bl	265d0 <p256_zaddu>
   267a8:	a928      	add	r1, sp, #160	; 0xa0
   267aa:	4632      	mov	r2, r6
   267ac:	a818      	add	r0, sp, #96	; 0x60
   267ae:	f7d9 fd5d 	bl	26c <ocrypto_bigint_cswap256>
   267b2:	4632      	mov	r2, r6
   267b4:	a930      	add	r1, sp, #192	; 0xc0
   267b6:	a820      	add	r0, sp, #128	; 0x80
   267b8:	f7d9 fd58 	bl	26c <ocrypto_bigint_cswap256>
   267bc:	a908      	add	r1, sp, #32
   267be:	466a      	mov	r2, sp
   267c0:	4608      	mov	r0, r1
   267c2:	f7d9 ffc9 	bl	758 <ocrypto_mod_p256_mul>
   267c6:	a908      	add	r1, sp, #32
   267c8:	4608      	mov	r0, r1
   267ca:	f000 f89d 	bl	26908 <ocrypto_mod_p256_inv>
   267ce:	a908      	add	r1, sp, #32
   267d0:	f108 0420 	add.w	r4, r8, #32
   267d4:	f109 0220 	add.w	r2, r9, #32
   267d8:	4608      	mov	r0, r1
   267da:	f7d9 ffbd 	bl	758 <ocrypto_mod_p256_mul>
   267de:	a920      	add	r1, sp, #128	; 0x80
   267e0:	aa08      	add	r2, sp, #32
   267e2:	4620      	mov	r0, r4
   267e4:	f7d9 ffb8 	bl	758 <ocrypto_mod_p256_mul>
   267e8:	aa08      	add	r2, sp, #32
   267ea:	a918      	add	r1, sp, #96	; 0x60
   267ec:	4668      	mov	r0, sp
   267ee:	f7d9 ffb3 	bl	758 <ocrypto_mod_p256_mul>
   267f2:	4669      	mov	r1, sp
   267f4:	4668      	mov	r0, sp
   267f6:	f7d9 ffc7 	bl	788 <ocrypto_mod_p256_sqr>
   267fa:	aa18      	add	r2, sp, #96	; 0x60
   267fc:	4669      	mov	r1, sp
   267fe:	a808      	add	r0, sp, #32
   26800:	f7d9 ffaa 	bl	758 <ocrypto_mod_p256_mul>
   26804:	4621      	mov	r1, r4
   26806:	4668      	mov	r0, sp
   26808:	f7d9 ffbe 	bl	788 <ocrypto_mod_p256_sqr>
   2680c:	aa08      	add	r2, sp, #32
   2680e:	4669      	mov	r1, sp
   26810:	4610      	mov	r0, r2
   26812:	f7d9 ff09 	bl	628 <ocrypto_mod_p256_sub>
   26816:	4a0e      	ldr	r2, [pc, #56]	; (26850 <ocrypto_curve_p256_scalarmult+0x164>)
   26818:	a908      	add	r1, sp, #32
   2681a:	4668      	mov	r0, sp
   2681c:	f7d9 ff04 	bl	628 <ocrypto_mod_p256_sub>
   26820:	4620      	mov	r0, r4
   26822:	2120      	movs	r1, #32
   26824:	f7d9 fea8 	bl	578 <ocrypto_constant_time_is_zero>
   26828:	a908      	add	r1, sp, #32
   2682a:	4243      	negs	r3, r0
   2682c:	4602      	mov	r2, r0
   2682e:	4668      	mov	r0, sp
   26830:	431f      	orrs	r7, r3
   26832:	f7d9 fd1b 	bl	26c <ocrypto_bigint_cswap256>
   26836:	4640      	mov	r0, r8
   26838:	4a06      	ldr	r2, [pc, #24]	; (26854 <ocrypto_curve_p256_scalarmult+0x168>)
   2683a:	4669      	mov	r1, sp
   2683c:	f7d9 ff8c 	bl	758 <ocrypto_mod_p256_mul>
   26840:	4638      	mov	r0, r7
   26842:	b038      	add	sp, #224	; 0xe0
   26844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   26848:	00031390 	.word	0x00031390
   2684c:	00031310 	.word	0x00031310
   26850:	00031370 	.word	0x00031370
   26854:	00031330 	.word	0x00031330

00026858 <ocrypto_curve_p256_scalarmult_base>:
   26858:	460a      	mov	r2, r1
   2685a:	4901      	ldr	r1, [pc, #4]	; (26860 <ocrypto_curve_p256_scalarmult_base+0x8>)
   2685c:	f7ff bf46 	b.w	266ec <ocrypto_curve_p256_scalarmult>
   26860:	000312d0 	.word	0x000312d0

00026864 <ocrypto_mod_p256_cneg>:
   26864:	b570      	push	{r4, r5, r6, lr}
   26866:	b088      	sub	sp, #32
   26868:	4604      	mov	r4, r0
   2686a:	460d      	mov	r5, r1
   2686c:	4616      	mov	r6, r2
   2686e:	2100      	movs	r1, #0
   26870:	2220      	movs	r2, #32
   26872:	4668      	mov	r0, sp
   26874:	f001 ff34 	bl	286e0 <memset>
   26878:	2300      	movs	r3, #0
   2687a:	4629      	mov	r1, r5
   2687c:	2220      	movs	r2, #32
   2687e:	4620      	mov	r0, r4
   26880:	9300      	str	r3, [sp, #0]
   26882:	f001 fefe 	bl	28682 <memcpy>
   26886:	462a      	mov	r2, r5
   26888:	4669      	mov	r1, sp
   2688a:	4668      	mov	r0, sp
   2688c:	f7d9 fecc 	bl	628 <ocrypto_mod_p256_sub>
   26890:	4632      	mov	r2, r6
   26892:	4669      	mov	r1, sp
   26894:	4620      	mov	r0, r4
   26896:	f7d9 fce9 	bl	26c <ocrypto_bigint_cswap256>
   2689a:	b008      	add	sp, #32
   2689c:	bd70      	pop	{r4, r5, r6, pc}
   2689e:	bf00      	nop

000268a0 <ocrypto_mod_p256_from_bytes>:
   268a0:	680b      	ldr	r3, [r1, #0]
   268a2:	ba1b      	rev	r3, r3
   268a4:	61c3      	str	r3, [r0, #28]
   268a6:	684b      	ldr	r3, [r1, #4]
   268a8:	ba1b      	rev	r3, r3
   268aa:	6183      	str	r3, [r0, #24]
   268ac:	688b      	ldr	r3, [r1, #8]
   268ae:	ba1b      	rev	r3, r3
   268b0:	6143      	str	r3, [r0, #20]
   268b2:	68cb      	ldr	r3, [r1, #12]
   268b4:	ba1b      	rev	r3, r3
   268b6:	6103      	str	r3, [r0, #16]
   268b8:	690b      	ldr	r3, [r1, #16]
   268ba:	ba1b      	rev	r3, r3
   268bc:	60c3      	str	r3, [r0, #12]
   268be:	694b      	ldr	r3, [r1, #20]
   268c0:	ba1b      	rev	r3, r3
   268c2:	6083      	str	r3, [r0, #8]
   268c4:	698b      	ldr	r3, [r1, #24]
   268c6:	ba1b      	rev	r3, r3
   268c8:	6043      	str	r3, [r0, #4]
   268ca:	69cb      	ldr	r3, [r1, #28]
   268cc:	ba1b      	rev	r3, r3
   268ce:	6003      	str	r3, [r0, #0]
   268d0:	4770      	bx	lr
   268d2:	bf00      	nop

000268d4 <ocrypto_mod_p256_to_bytes>:
   268d4:	69cb      	ldr	r3, [r1, #28]
   268d6:	ba1b      	rev	r3, r3
   268d8:	6003      	str	r3, [r0, #0]
   268da:	698b      	ldr	r3, [r1, #24]
   268dc:	ba1b      	rev	r3, r3
   268de:	6043      	str	r3, [r0, #4]
   268e0:	694b      	ldr	r3, [r1, #20]
   268e2:	ba1b      	rev	r3, r3
   268e4:	6083      	str	r3, [r0, #8]
   268e6:	690b      	ldr	r3, [r1, #16]
   268e8:	ba1b      	rev	r3, r3
   268ea:	60c3      	str	r3, [r0, #12]
   268ec:	68cb      	ldr	r3, [r1, #12]
   268ee:	ba1b      	rev	r3, r3
   268f0:	6103      	str	r3, [r0, #16]
   268f2:	688b      	ldr	r3, [r1, #8]
   268f4:	ba1b      	rev	r3, r3
   268f6:	6143      	str	r3, [r0, #20]
   268f8:	684b      	ldr	r3, [r1, #4]
   268fa:	ba1b      	rev	r3, r3
   268fc:	6183      	str	r3, [r0, #24]
   268fe:	680b      	ldr	r3, [r1, #0]
   26900:	ba1b      	rev	r3, r3
   26902:	61c3      	str	r3, [r0, #28]
   26904:	4770      	bx	lr
   26906:	bf00      	nop

00026908 <ocrypto_mod_p256_inv>:
   26908:	b570      	push	{r4, r5, r6, lr}
   2690a:	b098      	sub	sp, #96	; 0x60
   2690c:	460d      	mov	r5, r1
   2690e:	4606      	mov	r6, r0
   26910:	a810      	add	r0, sp, #64	; 0x40
   26912:	f7d9 ff39 	bl	788 <ocrypto_mod_p256_sqr>
   26916:	462a      	mov	r2, r5
   26918:	a910      	add	r1, sp, #64	; 0x40
   2691a:	4668      	mov	r0, sp
   2691c:	f7d9 ff1c 	bl	758 <ocrypto_mod_p256_mul>
   26920:	4669      	mov	r1, sp
   26922:	a810      	add	r0, sp, #64	; 0x40
   26924:	f7d9 ff30 	bl	788 <ocrypto_mod_p256_sqr>
   26928:	a910      	add	r1, sp, #64	; 0x40
   2692a:	4608      	mov	r0, r1
   2692c:	f7d9 ff2c 	bl	788 <ocrypto_mod_p256_sqr>
   26930:	466a      	mov	r2, sp
   26932:	a910      	add	r1, sp, #64	; 0x40
   26934:	a808      	add	r0, sp, #32
   26936:	f7d9 ff0f 	bl	758 <ocrypto_mod_p256_mul>
   2693a:	a908      	add	r1, sp, #32
   2693c:	a810      	add	r0, sp, #64	; 0x40
   2693e:	f7d9 ff23 	bl	788 <ocrypto_mod_p256_sqr>
   26942:	a910      	add	r1, sp, #64	; 0x40
   26944:	4608      	mov	r0, r1
   26946:	f7d9 ff1f 	bl	788 <ocrypto_mod_p256_sqr>
   2694a:	a910      	add	r1, sp, #64	; 0x40
   2694c:	4608      	mov	r0, r1
   2694e:	f7d9 ff1b 	bl	788 <ocrypto_mod_p256_sqr>
   26952:	a910      	add	r1, sp, #64	; 0x40
   26954:	4608      	mov	r0, r1
   26956:	f7d9 ff17 	bl	788 <ocrypto_mod_p256_sqr>
   2695a:	a910      	add	r1, sp, #64	; 0x40
   2695c:	aa08      	add	r2, sp, #32
   2695e:	4608      	mov	r0, r1
   26960:	f7d9 fefa 	bl	758 <ocrypto_mod_p256_mul>
   26964:	a910      	add	r1, sp, #64	; 0x40
   26966:	4608      	mov	r0, r1
   26968:	f7d9 ff0e 	bl	788 <ocrypto_mod_p256_sqr>
   2696c:	a910      	add	r1, sp, #64	; 0x40
   2696e:	4608      	mov	r0, r1
   26970:	f7d9 ff0a 	bl	788 <ocrypto_mod_p256_sqr>
   26974:	a910      	add	r1, sp, #64	; 0x40
   26976:	466a      	mov	r2, sp
   26978:	a808      	add	r0, sp, #32
   2697a:	f7d9 feed 	bl	758 <ocrypto_mod_p256_mul>
   2697e:	2405      	movs	r4, #5
   26980:	a908      	add	r1, sp, #32
   26982:	a810      	add	r0, sp, #64	; 0x40
   26984:	f7d9 ff00 	bl	788 <ocrypto_mod_p256_sqr>
   26988:	a910      	add	r1, sp, #64	; 0x40
   2698a:	4608      	mov	r0, r1
   2698c:	f7d9 fefc 	bl	788 <ocrypto_mod_p256_sqr>
   26990:	3c01      	subs	r4, #1
   26992:	a910      	add	r1, sp, #64	; 0x40
   26994:	d1f5      	bne.n	26982 <ocrypto_mod_p256_inv+0x7a>
   26996:	aa08      	add	r2, sp, #32
   26998:	4608      	mov	r0, r1
   2699a:	f7d9 fedd 	bl	758 <ocrypto_mod_p256_mul>
   2699e:	2405      	movs	r4, #5
   269a0:	a910      	add	r1, sp, #64	; 0x40
   269a2:	4608      	mov	r0, r1
   269a4:	f7d9 fef0 	bl	788 <ocrypto_mod_p256_sqr>
   269a8:	a910      	add	r1, sp, #64	; 0x40
   269aa:	4608      	mov	r0, r1
   269ac:	f7d9 feec 	bl	788 <ocrypto_mod_p256_sqr>
   269b0:	3c01      	subs	r4, #1
   269b2:	d1f5      	bne.n	269a0 <ocrypto_mod_p256_inv+0x98>
   269b4:	a910      	add	r1, sp, #64	; 0x40
   269b6:	aa08      	add	r2, sp, #32
   269b8:	4608      	mov	r0, r1
   269ba:	f7d9 fecd 	bl	758 <ocrypto_mod_p256_mul>
   269be:	a910      	add	r1, sp, #64	; 0x40
   269c0:	a808      	add	r0, sp, #32
   269c2:	f7d9 fee1 	bl	788 <ocrypto_mod_p256_sqr>
   269c6:	a908      	add	r1, sp, #32
   269c8:	4608      	mov	r0, r1
   269ca:	f7d9 fedd 	bl	788 <ocrypto_mod_p256_sqr>
   269ce:	a908      	add	r1, sp, #32
   269d0:	466a      	mov	r2, sp
   269d2:	4668      	mov	r0, sp
   269d4:	f7d9 fec0 	bl	758 <ocrypto_mod_p256_mul>
   269d8:	2410      	movs	r4, #16
   269da:	4669      	mov	r1, sp
   269dc:	a810      	add	r0, sp, #64	; 0x40
   269de:	f7d9 fed3 	bl	788 <ocrypto_mod_p256_sqr>
   269e2:	a910      	add	r1, sp, #64	; 0x40
   269e4:	4608      	mov	r0, r1
   269e6:	f7d9 fecf 	bl	788 <ocrypto_mod_p256_sqr>
   269ea:	3c01      	subs	r4, #1
   269ec:	a910      	add	r1, sp, #64	; 0x40
   269ee:	d1f5      	bne.n	269dc <ocrypto_mod_p256_inv+0xd4>
   269f0:	462a      	mov	r2, r5
   269f2:	4608      	mov	r0, r1
   269f4:	f7d9 feb0 	bl	758 <ocrypto_mod_p256_mul>
   269f8:	2440      	movs	r4, #64	; 0x40
   269fa:	a910      	add	r1, sp, #64	; 0x40
   269fc:	4608      	mov	r0, r1
   269fe:	f7d9 fec3 	bl	788 <ocrypto_mod_p256_sqr>
   26a02:	a910      	add	r1, sp, #64	; 0x40
   26a04:	4608      	mov	r0, r1
   26a06:	f7d9 febf 	bl	788 <ocrypto_mod_p256_sqr>
   26a0a:	3c01      	subs	r4, #1
   26a0c:	d1f5      	bne.n	269fa <ocrypto_mod_p256_inv+0xf2>
   26a0e:	a910      	add	r1, sp, #64	; 0x40
   26a10:	466a      	mov	r2, sp
   26a12:	4608      	mov	r0, r1
   26a14:	f7d9 fea0 	bl	758 <ocrypto_mod_p256_mul>
   26a18:	2410      	movs	r4, #16
   26a1a:	a910      	add	r1, sp, #64	; 0x40
   26a1c:	4608      	mov	r0, r1
   26a1e:	f7d9 feb3 	bl	788 <ocrypto_mod_p256_sqr>
   26a22:	a910      	add	r1, sp, #64	; 0x40
   26a24:	4608      	mov	r0, r1
   26a26:	f7d9 feaf 	bl	788 <ocrypto_mod_p256_sqr>
   26a2a:	3c01      	subs	r4, #1
   26a2c:	d1f5      	bne.n	26a1a <ocrypto_mod_p256_inv+0x112>
   26a2e:	a910      	add	r1, sp, #64	; 0x40
   26a30:	466a      	mov	r2, sp
   26a32:	4608      	mov	r0, r1
   26a34:	f7d9 fe90 	bl	758 <ocrypto_mod_p256_mul>
   26a38:	2410      	movs	r4, #16
   26a3a:	a910      	add	r1, sp, #64	; 0x40
   26a3c:	4608      	mov	r0, r1
   26a3e:	f7d9 fea3 	bl	788 <ocrypto_mod_p256_sqr>
   26a42:	a910      	add	r1, sp, #64	; 0x40
   26a44:	4608      	mov	r0, r1
   26a46:	f7d9 fe9f 	bl	788 <ocrypto_mod_p256_sqr>
   26a4a:	3c01      	subs	r4, #1
   26a4c:	d1f5      	bne.n	26a3a <ocrypto_mod_p256_inv+0x132>
   26a4e:	a910      	add	r1, sp, #64	; 0x40
   26a50:	aa08      	add	r2, sp, #32
   26a52:	4608      	mov	r0, r1
   26a54:	f7d9 fe80 	bl	758 <ocrypto_mod_p256_mul>
   26a58:	462a      	mov	r2, r5
   26a5a:	a910      	add	r1, sp, #64	; 0x40
   26a5c:	4630      	mov	r0, r6
   26a5e:	f7d9 fe7b 	bl	758 <ocrypto_mod_p256_mul>
   26a62:	b018      	add	sp, #96	; 0x60
   26a64:	bd70      	pop	{r4, r5, r6, pc}
   26a66:	bf00      	nop

00026a68 <cbprintf_via_va_list>:
{
   26a68:	b510      	push	{r4, lr}
   26a6a:	460c      	mov	r4, r1
   26a6c:	4611      	mov	r1, r2
   26a6e:	461a      	mov	r2, r3
	return formatter(out, ctx, fmt, u.ap);
   26a70:	9b02      	ldr	r3, [sp, #8]
   26a72:	47a0      	blx	r4
}
   26a74:	bd10      	pop	{r4, pc}

00026a76 <is_fmt_spec>:
	return (c >= 64) && (c <= 122);
   26a76:	3840      	subs	r0, #64	; 0x40
   26a78:	b2c0      	uxtb	r0, r0
}
   26a7a:	283a      	cmp	r0, #58	; 0x3a
   26a7c:	bf8c      	ite	hi
   26a7e:	2000      	movhi	r0, #0
   26a80:	2001      	movls	r0, #1
   26a82:	4770      	bx	lr

00026a84 <get_package_len>:
{
   26a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26a86:	4606      	mov	r6, r0
	args_size = buf[0] * sizeof(int);
   26a88:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
   26a8a:	7845      	ldrb	r5, [r0, #1]
	ros_nbr   = buf[2];
   26a8c:	7884      	ldrb	r4, [r0, #2]
	buf += ros_nbr;
   26a8e:	eb04 0483 	add.w	r4, r4, r3, lsl #2
   26a92:	4404      	add	r4, r0
	for (int i = 0; i < s_nbr; i++) {
   26a94:	2700      	movs	r7, #0
   26a96:	e006      	b.n	26aa6 <get_package_len+0x22>
		buf++;
   26a98:	3401      	adds	r4, #1
		buf += strlen((const char *)buf) + 1;
   26a9a:	4620      	mov	r0, r4
   26a9c:	f001 fdc1 	bl	28622 <strlen>
   26aa0:	3001      	adds	r0, #1
   26aa2:	4404      	add	r4, r0
	for (int i = 0; i < s_nbr; i++) {
   26aa4:	3701      	adds	r7, #1
   26aa6:	42af      	cmp	r7, r5
   26aa8:	d3f6      	bcc.n	26a98 <get_package_len+0x14>
}
   26aaa:	1ba0      	subs	r0, r4, r6
   26aac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00026aae <append_string>:
{
   26aae:	b570      	push	{r4, r5, r6, lr}
   26ab0:	4614      	mov	r4, r2
	if (cb == NULL) {
   26ab2:	b138      	cbz	r0, 26ac4 <append_string+0x16>
   26ab4:	460d      	mov	r5, r1
   26ab6:	4619      	mov	r1, r3
   26ab8:	4606      	mov	r6, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
   26aba:	b143      	cbz	r3, 26ace <append_string+0x20>
	return cb(str, strl, ctx);
   26abc:	462a      	mov	r2, r5
   26abe:	4620      	mov	r0, r4
   26ac0:	47b0      	blx	r6
}
   26ac2:	bd70      	pop	{r4, r5, r6, pc}
		return 1 + strlen(str);
   26ac4:	4610      	mov	r0, r2
   26ac6:	f001 fdac 	bl	28622 <strlen>
   26aca:	3001      	adds	r0, #1
   26acc:	e7f9      	b.n	26ac2 <append_string+0x14>
	strl = strl > 0 ? strl : strlen(str) + 1;
   26ace:	4610      	mov	r0, r2
   26ad0:	f001 fda7 	bl	28622 <strlen>
   26ad4:	b283      	uxth	r3, r0
   26ad6:	3301      	adds	r3, #1
   26ad8:	b299      	uxth	r1, r3
   26ada:	e7ef      	b.n	26abc <append_string+0xe>

00026adc <cbpprintf_external>:
	if (buf == NULL) {
   26adc:	b35b      	cbz	r3, 26b36 <cbpprintf_external+0x5a>
{
   26ade:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26ae2:	b082      	sub	sp, #8
   26ae4:	4607      	mov	r7, r0
   26ae6:	4688      	mov	r8, r1
   26ae8:	4691      	mov	r9, r2
   26aea:	461d      	mov	r5, r3
	args_size = hdr->hdr.desc.len * sizeof(int);
   26aec:	781a      	ldrb	r2, [r3, #0]
	s_nbr     = hdr->hdr.desc.str_cnt;
   26aee:	785e      	ldrb	r6, [r3, #1]
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
   26af0:	789c      	ldrb	r4, [r3, #2]
	rws_nbr   = hdr->hdr.desc.rw_str_cnt;
   26af2:	78db      	ldrb	r3, [r3, #3]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   26af4:	eb04 0482 	add.w	r4, r4, r2, lsl #2
   26af8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
   26afc:	442c      	add	r4, r5
	for (i = 0; i < s_nbr; i++) {
   26afe:	f04f 0a00 	mov.w	sl, #0
   26b02:	e00a      	b.n	26b1a <cbpprintf_external+0x3e>
		s_idx = *(uint8_t *)s++;
   26b04:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
   26b08:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		s += strlen(s) + 1;
   26b0c:	4620      	mov	r0, r4
   26b0e:	f001 fd88 	bl	28622 <strlen>
   26b12:	3001      	adds	r0, #1
   26b14:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   26b16:	f10a 0a01 	add.w	sl, sl, #1
   26b1a:	45b2      	cmp	sl, r6
   26b1c:	d3f2      	bcc.n	26b04 <cbpprintf_external+0x28>
	buf += sizeof(*hdr);
   26b1e:	f105 0308 	add.w	r3, r5, #8
	return cbprintf_via_va_list(out, formatter, ctx, hdr->fmt, buf);
   26b22:	9300      	str	r3, [sp, #0]
   26b24:	686b      	ldr	r3, [r5, #4]
   26b26:	464a      	mov	r2, r9
   26b28:	4641      	mov	r1, r8
   26b2a:	4638      	mov	r0, r7
   26b2c:	f7ff ff9c 	bl	26a68 <cbprintf_via_va_list>
}
   26b30:	b002      	add	sp, #8
   26b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -EINVAL;
   26b36:	f06f 0015 	mvn.w	r0, #21
}
   26b3a:	4770      	bx	lr

00026b3c <is_ptr>:
{
   26b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26b40:	4604      	mov	r4, r0
   26b42:	4688      	mov	r8, r1
	int cnt = 0;
   26b44:	2700      	movs	r7, #0
	bool mod = false;
   26b46:	463e      	mov	r6, r7
	while ((c = *fmt++) != '\0') {
   26b48:	e007      	b.n	26b5a <is_ptr+0x1e>
				if (c == 'p') {
   26b4a:	2d70      	cmp	r5, #112	; 0x70
   26b4c:	d018      	beq.n	26b80 <is_ptr+0x44>
				} else if (is_fmt_spec(c)) {
   26b4e:	4628      	mov	r0, r5
   26b50:	f7ff ff91 	bl	26a76 <is_fmt_spec>
   26b54:	b9b8      	cbnz	r0, 26b86 <is_ptr+0x4a>
		if (c == '%') {
   26b56:	2d25      	cmp	r5, #37	; 0x25
   26b58:	d00e      	beq.n	26b78 <is_ptr+0x3c>
	while ((c = *fmt++) != '\0') {
   26b5a:	f814 5b01 	ldrb.w	r5, [r4], #1
   26b5e:	b175      	cbz	r5, 26b7e <is_ptr+0x42>
		if (mod) {
   26b60:	2e00      	cmp	r6, #0
   26b62:	d0f8      	beq.n	26b56 <is_ptr+0x1a>
			if (cnt == n) {
   26b64:	4547      	cmp	r7, r8
   26b66:	d0f0      	beq.n	26b4a <is_ptr+0xe>
			} else if (is_fmt_spec(c)) {
   26b68:	4628      	mov	r0, r5
   26b6a:	f7ff ff84 	bl	26a76 <is_fmt_spec>
   26b6e:	2800      	cmp	r0, #0
   26b70:	d0f1      	beq.n	26b56 <is_ptr+0x1a>
				cnt++;
   26b72:	3701      	adds	r7, #1
				mod = false;
   26b74:	2600      	movs	r6, #0
   26b76:	e7ee      	b.n	26b56 <is_ptr+0x1a>
			mod = !mod;
   26b78:	f086 0601 	eor.w	r6, r6, #1
   26b7c:	e7ed      	b.n	26b5a <is_ptr+0x1e>
	return false;
   26b7e:	2600      	movs	r6, #0
}
   26b80:	4630      	mov	r0, r6
   26b82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					return false;
   26b86:	2600      	movs	r6, #0
   26b88:	e7fa      	b.n	26b80 <is_ptr+0x44>

00026b8a <char2hex>:
#include <errno.h>
#include <zephyr/sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   26b8a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   26b8e:	b2db      	uxtb	r3, r3
   26b90:	2b09      	cmp	r3, #9
   26b92:	d802      	bhi.n	26b9a <char2hex+0x10>
		*x = c - '0';
   26b94:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   26b96:	2000      	movs	r0, #0
   26b98:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   26b9a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   26b9e:	b2db      	uxtb	r3, r3
   26ba0:	2b05      	cmp	r3, #5
   26ba2:	d803      	bhi.n	26bac <char2hex+0x22>
		*x = c - 'a' + 10;
   26ba4:	3857      	subs	r0, #87	; 0x57
   26ba6:	7008      	strb	r0, [r1, #0]
	return 0;
   26ba8:	2000      	movs	r0, #0
   26baa:	4770      	bx	lr
	} else if (c >= 'A' && c <= 'F') {
   26bac:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   26bb0:	b2db      	uxtb	r3, r3
   26bb2:	2b05      	cmp	r3, #5
   26bb4:	d803      	bhi.n	26bbe <char2hex+0x34>
		*x = c - 'A' + 10;
   26bb6:	3837      	subs	r0, #55	; 0x37
   26bb8:	7008      	strb	r0, [r1, #0]
	return 0;
   26bba:	2000      	movs	r0, #0
   26bbc:	4770      	bx	lr
		return -EINVAL;
   26bbe:	f06f 0015 	mvn.w	r0, #21
}
   26bc2:	4770      	bx	lr

00026bc4 <arch_printk_char_out>:
}
   26bc4:	2000      	movs	r0, #0
   26bc6:	4770      	bx	lr

00026bc8 <str_out>:
{
   26bc8:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   26bca:	680c      	ldr	r4, [r1, #0]
   26bcc:	b154      	cbz	r4, 26be4 <str_out+0x1c>
   26bce:	688a      	ldr	r2, [r1, #8]
   26bd0:	684b      	ldr	r3, [r1, #4]
   26bd2:	429a      	cmp	r2, r3
   26bd4:	da06      	bge.n	26be4 <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
   26bd6:	3b01      	subs	r3, #1
   26bd8:	429a      	cmp	r2, r3
   26bda:	d008      	beq.n	26bee <str_out+0x26>
		ctx->str[ctx->count++] = c;
   26bdc:	1c53      	adds	r3, r2, #1
   26bde:	608b      	str	r3, [r1, #8]
   26be0:	54a0      	strb	r0, [r4, r2]
   26be2:	e002      	b.n	26bea <str_out+0x22>
		ctx->count++;
   26be4:	688b      	ldr	r3, [r1, #8]
   26be6:	3301      	adds	r3, #1
   26be8:	608b      	str	r3, [r1, #8]
}
   26bea:	bc10      	pop	{r4}
   26bec:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
   26bee:	1c53      	adds	r3, r2, #1
   26bf0:	608b      	str	r3, [r1, #8]
   26bf2:	2300      	movs	r3, #0
   26bf4:	54a3      	strb	r3, [r4, r2]
   26bf6:	e7f8      	b.n	26bea <str_out+0x22>

00026bf8 <vprintk>:
{
   26bf8:	b508      	push	{r3, lr}
		z_log_vprintk(fmt, ap);
   26bfa:	f001 f8ba 	bl	27d72 <z_log_vprintk>
}
   26bfe:	bd08      	pop	{r3, pc}

00026c00 <printk>:
{
   26c00:	b40f      	push	{r0, r1, r2, r3}
   26c02:	b500      	push	{lr}
   26c04:	b083      	sub	sp, #12
   26c06:	a904      	add	r1, sp, #16
   26c08:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   26c0c:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   26c0e:	f7ff fff3 	bl	26bf8 <vprintk>
}
   26c12:	b003      	add	sp, #12
   26c14:	f85d eb04 	ldr.w	lr, [sp], #4
   26c18:	b004      	add	sp, #16
   26c1a:	4770      	bx	lr

00026c1c <snprintk>:
{
   26c1c:	b40c      	push	{r2, r3}
   26c1e:	b500      	push	{lr}
   26c20:	b083      	sub	sp, #12
   26c22:	ab04      	add	r3, sp, #16
   26c24:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   26c28:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   26c2a:	f7ee fb2f 	bl	1528c <vsnprintk>
}
   26c2e:	b003      	add	sp, #12
   26c30:	f85d eb04 	ldr.w	lr, [sp], #4
   26c34:	b002      	add	sp, #8
   26c36:	4770      	bx	lr

00026c38 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   26c38:	b508      	push	{r3, lr}
   26c3a:	4604      	mov	r4, r0
   26c3c:	4608      	mov	r0, r1
   26c3e:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   26c40:	461a      	mov	r2, r3
   26c42:	47a0      	blx	r4
	return z_impl_z_current_get();
   26c44:	f7ff f880 	bl	25d48 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   26c48:	f7f1 f994 	bl	17f74 <z_impl_k_thread_abort>

00026c4c <chunk_mem>:
#endif

static void *chunk_mem(struct z_heap *h, chunkid_t c)
{
	chunk_unit_t *buf = chunk_buf(h);
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   26c4c:	00c9      	lsls	r1, r1, #3
   26c4e:	3104      	adds	r1, #4

	CHECK(!(((uintptr_t)ret) & (big_heap(h) ? 7 : 3)));

	return ret;
}
   26c50:	4408      	add	r0, r1
   26c52:	4770      	bx	lr

00026c54 <free_list_remove_bidx>:

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   26c54:	ea4f 0cc1 	mov.w	ip, r1, lsl #3

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   26c58:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   26c5c:	88db      	ldrh	r3, [r3, #6]

	CHECK(!chunk_used(h, c));
	CHECK(b->next != 0);
	CHECK(h->avail_buckets & BIT(bidx));

	if (next_free_chunk(h, c) == c) {
   26c5e:	4299      	cmp	r1, r3
   26c60:	d00c      	beq.n	26c7c <free_list_remove_bidx+0x28>
   26c62:	4484      	add	ip, r0
   26c64:	f8bc 1004 	ldrh.w	r1, [ip, #4]
		b->next = 0;
	} else {
		chunkid_t first = prev_free_chunk(h, c),
			  second = next_free_chunk(h, c);

		b->next = second;
   26c68:	3204      	adds	r2, #4
   26c6a:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   26c6e:	00ca      	lsls	r2, r1, #3
	if (big_heap(h)) {
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   26c70:	3206      	adds	r2, #6
   26c72:	5283      	strh	r3, [r0, r2]
	void *cmem = &buf[c];
   26c74:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
   26c76:	3304      	adds	r3, #4
   26c78:	52c1      	strh	r1, [r0, r3]
	}

#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes -= chunksz_to_bytes(h, chunk_size(h, c));
#endif
}
   26c7a:	4770      	bx	lr
		h->avail_buckets &= ~BIT(bidx);
   26c7c:	68c3      	ldr	r3, [r0, #12]
   26c7e:	2101      	movs	r1, #1
   26c80:	4091      	lsls	r1, r2
   26c82:	ea23 0301 	bic.w	r3, r3, r1
   26c86:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   26c88:	3204      	adds	r2, #4
   26c8a:	2300      	movs	r3, #0
   26c8c:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
   26c90:	4770      	bx	lr

00026c92 <free_list_add_bidx>:
		free_list_remove_bidx(h, c, bidx);
	}
}

static void free_list_add_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
   26c92:	b510      	push	{r4, lr}
	struct z_heap_bucket *b = &h->buckets[bidx];

	if (b->next == 0U) {
   26c94:	1d13      	adds	r3, r2, #4
   26c96:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   26c9a:	b974      	cbnz	r4, 26cba <free_list_add_bidx+0x28>
		CHECK((h->avail_buckets & BIT(bidx)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= BIT(bidx);
   26c9c:	68c3      	ldr	r3, [r0, #12]
   26c9e:	2401      	movs	r4, #1
   26ca0:	4094      	lsls	r4, r2
   26ca2:	4323      	orrs	r3, r4
   26ca4:	60c3      	str	r3, [r0, #12]
		b->next = c;
   26ca6:	3204      	adds	r2, #4
   26ca8:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	void *cmem = &buf[c];
   26cac:	00cb      	lsls	r3, r1, #3
		((uint16_t *)cmem)[f] = val;
   26cae:	1d1a      	adds	r2, r3, #4
   26cb0:	b289      	uxth	r1, r1
   26cb2:	5281      	strh	r1, [r0, r2]
   26cb4:	3306      	adds	r3, #6
   26cb6:	52c1      	strh	r1, [r0, r3]
	}

#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}
   26cb8:	bd10      	pop	{r4, pc}
	void *cmem = &buf[c];
   26cba:	00e2      	lsls	r2, r4, #3
		return ((uint16_t *)cmem)[f];
   26cbc:	3204      	adds	r2, #4
   26cbe:	5a83      	ldrh	r3, [r0, r2]
	void *cmem = &buf[c];
   26cc0:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
		((uint16_t *)cmem)[f] = val;
   26cc4:	f10c 0e04 	add.w	lr, ip, #4
   26cc8:	f820 300e 	strh.w	r3, [r0, lr]
   26ccc:	f10c 0c06 	add.w	ip, ip, #6
   26cd0:	f820 400c 	strh.w	r4, [r0, ip]
	void *cmem = &buf[c];
   26cd4:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
   26cd6:	3306      	adds	r3, #6
   26cd8:	b289      	uxth	r1, r1
   26cda:	52c1      	strh	r1, [r0, r3]
   26cdc:	5281      	strh	r1, [r0, r2]
   26cde:	e7eb      	b.n	26cb8 <free_list_add_bidx+0x26>

00026ce0 <split_chunks>:

/* Splits a chunk "lc" into a left chunk and a right chunk at "rc".
 * Leaves both chunks marked "free"
 */
static void split_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   26ce0:	b500      	push	{lr}
	void *cmem = &buf[c];
   26ce2:	00cb      	lsls	r3, r1, #3
		return ((uint16_t *)cmem)[f];
   26ce4:	3302      	adds	r3, #2
   26ce6:	f830 e003 	ldrh.w	lr, [r0, r3]
	CHECK(rc > lc);
	CHECK(rc - lc < chunk_size(h, lc));

	chunksz_t sz0 = chunk_size(h, lc);
	chunksz_t lsz = rc - lc;
   26cea:	eba2 0c01 	sub.w	ip, r2, r1
	chunksz_t rsz = sz0 - lsz;
   26cee:	1a89      	subs	r1, r1, r2
   26cf0:	eb01 015e 	add.w	r1, r1, lr, lsr #1
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   26cf4:	ea4f 0e4c 	mov.w	lr, ip, lsl #1
		((uint16_t *)cmem)[f] = val;
   26cf8:	f820 e003 	strh.w	lr, [r0, r3]
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   26cfc:	ea4f 0e41 	mov.w	lr, r1, lsl #1
	void *cmem = &buf[c];
   26d00:	00d3      	lsls	r3, r2, #3
		((uint16_t *)cmem)[f] = val;
   26d02:	3302      	adds	r3, #2
   26d04:	f820 e003 	strh.w	lr, [r0, r3]
   26d08:	f820 c032 	strh.w	ip, [r0, r2, lsl #3]
		return ((uint16_t *)cmem)[f];
   26d0c:	5ac3      	ldrh	r3, [r0, r3]
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
   26d0e:	eb02 0253 	add.w	r2, r2, r3, lsr #1
		((uint16_t *)cmem)[f] = val;
   26d12:	f820 1032 	strh.w	r1, [r0, r2, lsl #3]

	set_chunk_size(h, lc, lsz);
	set_chunk_size(h, rc, rsz);
	set_left_chunk_size(h, rc, lsz);
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}
   26d16:	f85d fb04 	ldr.w	pc, [sp], #4

00026d1a <merge_chunks>:

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   26d1a:	b500      	push	{lr}
	void *cmem = &buf[c];
   26d1c:	00c9      	lsls	r1, r1, #3
		return ((uint16_t *)cmem)[f];
   26d1e:	3102      	adds	r1, #2
   26d20:	f830 e001 	ldrh.w	lr, [r0, r1]
	void *cmem = &buf[c];
   26d24:	ea4f 0cc2 	mov.w	ip, r2, lsl #3
		return ((uint16_t *)cmem)[f];
   26d28:	f10c 0c02 	add.w	ip, ip, #2
   26d2c:	f830 300c 	ldrh.w	r3, [r0, ip]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   26d30:	085b      	lsrs	r3, r3, #1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   26d32:	eb03 035e 	add.w	r3, r3, lr, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   26d36:	ea4f 0e43 	mov.w	lr, r3, lsl #1
		((uint16_t *)cmem)[f] = val;
   26d3a:	f820 e001 	strh.w	lr, [r0, r1]
		return ((uint16_t *)cmem)[f];
   26d3e:	f830 100c 	ldrh.w	r1, [r0, ip]
	return c + chunk_size(h, c);
   26d42:	eb02 0251 	add.w	r2, r2, r1, lsr #1
		((uint16_t *)cmem)[f] = val;
   26d46:	f820 3032 	strh.w	r3, [r0, r2, lsl #3]

	set_chunk_size(h, lc, newsz);
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
   26d4a:	f85d fb04 	ldr.w	pc, [sp], #4

00026d4e <mem_to_chunkid>:
 * boundary.
 */
static chunkid_t mem_to_chunkid(struct z_heap *h, void *p)
{
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   26d4e:	3904      	subs	r1, #4
   26d50:	1a08      	subs	r0, r1, r0
}
   26d52:	08c0      	lsrs	r0, r0, #3
   26d54:	4770      	bx	lr

00026d56 <free_list_remove>:
{
   26d56:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
   26d58:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   26d5c:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   26d5e:	0852      	lsrs	r2, r2, #1
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   26d60:	fab2 f282 	clz	r2, r2
		free_list_remove_bidx(h, c, bidx);
   26d64:	f1c2 021f 	rsb	r2, r2, #31
   26d68:	f7ff ff74 	bl	26c54 <free_list_remove_bidx>
}
   26d6c:	bd08      	pop	{r3, pc}

00026d6e <free_list_add>:
{
   26d6e:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
   26d70:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   26d74:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   26d76:	0852      	lsrs	r2, r2, #1
	return 31 - __builtin_clz(usable_sz);
   26d78:	fab2 f282 	clz	r2, r2
		free_list_add_bidx(h, c, bidx);
   26d7c:	f1c2 021f 	rsb	r2, r2, #31
   26d80:	f7ff ff87 	bl	26c92 <free_list_add_bidx>
}
   26d84:	bd08      	pop	{r3, pc}

00026d86 <free_chunk>:
{
   26d86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26d88:	4604      	mov	r4, r0
   26d8a:	460d      	mov	r5, r1
	void *cmem = &buf[c];
   26d8c:	00ce      	lsls	r6, r1, #3
		return ((uint16_t *)cmem)[f];
   26d8e:	1cb7      	adds	r7, r6, #2
   26d90:	5bc1      	ldrh	r1, [r0, r7]
	return c + chunk_size(h, c);
   26d92:	eb05 0151 	add.w	r1, r5, r1, lsr #1
		return ((uint16_t *)cmem)[f];
   26d96:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   26d9a:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   26d9c:	f013 0f01 	tst.w	r3, #1
   26da0:	d00c      	beq.n	26dbc <free_chunk+0x36>
   26da2:	5ba1      	ldrh	r1, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   26da4:	1a69      	subs	r1, r5, r1
		return ((uint16_t *)cmem)[f];
   26da6:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
   26daa:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   26dac:	f013 0f01 	tst.w	r3, #1
   26db0:	d00e      	beq.n	26dd0 <free_chunk+0x4a>
	free_list_add(h, c);
   26db2:	4629      	mov	r1, r5
   26db4:	4620      	mov	r0, r4
   26db6:	f7ff ffda 	bl	26d6e <free_list_add>
}
   26dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		free_list_remove(h, right_chunk(h, c));
   26dbc:	f7ff ffcb 	bl	26d56 <free_list_remove>
   26dc0:	5be2      	ldrh	r2, [r4, r7]
		merge_chunks(h, c, right_chunk(h, c));
   26dc2:	eb05 0252 	add.w	r2, r5, r2, lsr #1
   26dc6:	4629      	mov	r1, r5
   26dc8:	4620      	mov	r0, r4
   26dca:	f7ff ffa6 	bl	26d1a <merge_chunks>
   26dce:	e7e8      	b.n	26da2 <free_chunk+0x1c>
		free_list_remove(h, left_chunk(h, c));
   26dd0:	4620      	mov	r0, r4
   26dd2:	f7ff ffc0 	bl	26d56 <free_list_remove>
   26dd6:	5ba1      	ldrh	r1, [r4, r6]
		merge_chunks(h, left_chunk(h, c), c);
   26dd8:	462a      	mov	r2, r5
   26dda:	1a69      	subs	r1, r5, r1
   26ddc:	4620      	mov	r0, r4
   26dde:	f7ff ff9c 	bl	26d1a <merge_chunks>
   26de2:	5ba3      	ldrh	r3, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   26de4:	1aed      	subs	r5, r5, r3
   26de6:	e7e4      	b.n	26db2 <free_chunk+0x2c>

00026de8 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   26de8:	b570      	push	{r4, r5, r6, lr}
	return 31 - __builtin_clz(usable_sz);
   26dea:	fab1 f381 	clz	r3, r1
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   26dee:	f1c3 0423 	rsb	r4, r3, #35	; 0x23
   26df2:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
   26df6:	b1cd      	cbz	r5, 26e2c <alloc_chunk+0x44>
   26df8:	f1c3 021f 	rsb	r2, r3, #31
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
   26dfc:	f04f 0e03 	mov.w	lr, #3
		do {
			chunkid_t c = b->next;
   26e00:	1d14      	adds	r4, r2, #4
   26e02:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
	void *cmem = &buf[c];
   26e06:	ea4f 0cc4 	mov.w	ip, r4, lsl #3
		return ((uint16_t *)cmem)[f];
   26e0a:	eb00 06c4 	add.w	r6, r0, r4, lsl #3
   26e0e:	8876      	ldrh	r6, [r6, #2]
			if (chunk_size(h, c) >= sz) {
   26e10:	ebb1 0f56 	cmp.w	r1, r6, lsr #1
   26e14:	d914      	bls.n	26e40 <alloc_chunk+0x58>
   26e16:	4484      	add	ip, r0
   26e18:	f8bc 4006 	ldrh.w	r4, [ip, #6]
				free_list_remove_bidx(h, c, bi);
				return c;
			}
			b->next = next_free_chunk(h, c);
   26e1c:	1d16      	adds	r6, r2, #4
   26e1e:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
			CHECK(b->next != 0);
		} while (--i && b->next != first);
   26e22:	f1be 0e01 	subs.w	lr, lr, #1
   26e26:	d001      	beq.n	26e2c <alloc_chunk+0x44>
   26e28:	42a5      	cmp	r5, r4
   26e2a:	d1e9      	bne.n	26e00 <alloc_chunk+0x18>
	}

	/* Otherwise pick the smallest non-empty bucket guaranteed to
	 * fit and use that unconditionally.
	 */
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   26e2c:	68c4      	ldr	r4, [r0, #12]
   26e2e:	f1c3 0220 	rsb	r2, r3, #32
   26e32:	2301      	movs	r3, #1
   26e34:	4093      	lsls	r3, r2
   26e36:	425b      	negs	r3, r3

	if (bmask != 0U) {
   26e38:	401c      	ands	r4, r3
   26e3a:	d105      	bne.n	26e48 <alloc_chunk+0x60>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   26e3c:	4620      	mov	r0, r4
   26e3e:	bd70      	pop	{r4, r5, r6, pc}
				free_list_remove_bidx(h, c, bi);
   26e40:	4621      	mov	r1, r4
   26e42:	f7ff ff07 	bl	26c54 <free_list_remove_bidx>
				return c;
   26e46:	e7f9      	b.n	26e3c <alloc_chunk+0x54>
		int minbucket = __builtin_ctz(bmask);
   26e48:	fa94 f2a4 	rbit	r2, r4
   26e4c:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   26e50:	1d13      	adds	r3, r2, #4
   26e52:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   26e56:	4621      	mov	r1, r4
   26e58:	f7ff fefc 	bl	26c54 <free_list_remove_bidx>
		return c;
   26e5c:	e7ee      	b.n	26e3c <alloc_chunk+0x54>

00026e5e <sys_heap_free>:
	if (mem == NULL) {
   26e5e:	b179      	cbz	r1, 26e80 <sys_heap_free+0x22>
{
   26e60:	b510      	push	{r4, lr}
	struct z_heap *h = heap->heap;
   26e62:	6804      	ldr	r4, [r0, #0]
	chunkid_t c = mem_to_chunkid(h, mem);
   26e64:	4620      	mov	r0, r4
   26e66:	f7ff ff72 	bl	26d4e <mem_to_chunkid>
   26e6a:	4601      	mov	r1, r0
	void *cmem = &buf[c];
   26e6c:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   26e70:	8853      	ldrh	r3, [r2, #2]
   26e72:	f023 0301 	bic.w	r3, r3, #1
   26e76:	8053      	strh	r3, [r2, #2]
	free_chunk(h, c);
   26e78:	4620      	mov	r0, r4
   26e7a:	f7ff ff84 	bl	26d86 <free_chunk>
}
   26e7e:	bd10      	pop	{r4, pc}
   26e80:	4770      	bx	lr

00026e82 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   26e82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct z_heap *h = heap->heap;
   26e84:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   26e86:	b341      	cbz	r1, 26eda <sys_heap_alloc+0x58>
   26e88:	460b      	mov	r3, r1
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   26e8a:	68aa      	ldr	r2, [r5, #8]
   26e8c:	ebb2 0fd1 	cmp.w	r2, r1, lsr #3
   26e90:	d925      	bls.n	26ede <sys_heap_alloc+0x5c>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   26e92:	330b      	adds	r3, #11
   26e94:	08dc      	lsrs	r4, r3, #3
		return NULL;
	}

	chunksz_t chunk_sz = bytes_to_chunksz(h, bytes);
	chunkid_t c = alloc_chunk(h, chunk_sz);
   26e96:	4621      	mov	r1, r4
   26e98:	4628      	mov	r0, r5
   26e9a:	f7ff ffa5 	bl	26de8 <alloc_chunk>
	if (c == 0U) {
   26e9e:	4607      	mov	r7, r0
   26ea0:	b1f8      	cbz	r0, 26ee2 <sys_heap_alloc+0x60>
	void *cmem = &buf[c];
   26ea2:	00c6      	lsls	r6, r0, #3
		return ((uint16_t *)cmem)[f];
   26ea4:	eb05 03c0 	add.w	r3, r5, r0, lsl #3
   26ea8:	885b      	ldrh	r3, [r3, #2]
		return NULL;
	}

	/* Split off remainder if any */
	if (chunk_size(h, c) > chunk_sz) {
   26eaa:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
   26eae:	d309      	bcc.n	26ec4 <sys_heap_alloc+0x42>
	void *cmem = &buf[c];
   26eb0:	19ab      	adds	r3, r5, r6
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   26eb2:	885a      	ldrh	r2, [r3, #2]
   26eb4:	f042 0201 	orr.w	r2, r2, #1
   26eb8:	805a      	strh	r2, [r3, #2]
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);

	mem = chunk_mem(h, c);
   26eba:	4639      	mov	r1, r7
   26ebc:	4628      	mov	r0, r5
   26ebe:	f7ff fec5 	bl	26c4c <chunk_mem>
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   26ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		split_chunks(h, c, c + chunk_sz);
   26ec4:	4404      	add	r4, r0
   26ec6:	4622      	mov	r2, r4
   26ec8:	4601      	mov	r1, r0
   26eca:	4628      	mov	r0, r5
   26ecc:	f7ff ff08 	bl	26ce0 <split_chunks>
		free_list_add(h, c + chunk_sz);
   26ed0:	4621      	mov	r1, r4
   26ed2:	4628      	mov	r0, r5
   26ed4:	f7ff ff4b 	bl	26d6e <free_list_add>
   26ed8:	e7ea      	b.n	26eb0 <sys_heap_alloc+0x2e>
		return NULL;
   26eda:	2000      	movs	r0, #0
   26edc:	e7f1      	b.n	26ec2 <sys_heap_alloc+0x40>
   26ede:	2000      	movs	r0, #0
   26ee0:	e7ef      	b.n	26ec2 <sys_heap_alloc+0x40>
		return NULL;
   26ee2:	2000      	movs	r0, #0
   26ee4:	e7ed      	b.n	26ec2 <sys_heap_alloc+0x40>

00026ee6 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   26ee6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26eea:	4615      	mov	r5, r2
	struct z_heap *h = heap->heap;
   26eec:	6806      	ldr	r6, [r0, #0]
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   26eee:	424b      	negs	r3, r1
   26ef0:	400b      	ands	r3, r1
	if (align != rew) {
   26ef2:	f101 39ff 	add.w	r9, r1, #4294967295
   26ef6:	ea19 0901 	ands.w	r9, r9, r1
   26efa:	d004      	beq.n	26f06 <sys_heap_aligned_alloc+0x20>
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
   26efc:	2b03      	cmp	r3, #3
   26efe:	d847      	bhi.n	26f90 <sys_heap_aligned_alloc+0xaa>
		align -= rew;
   26f00:	464c      	mov	r4, r9
	rew = align & -align;
   26f02:	4699      	mov	r9, r3
   26f04:	e003      	b.n	26f0e <sys_heap_aligned_alloc+0x28>
   26f06:	460c      	mov	r4, r1
	} else {
		if (align <= chunk_header_bytes(h)) {
   26f08:	2904      	cmp	r1, #4
   26f0a:	d93c      	bls.n	26f86 <sys_heap_aligned_alloc+0xa0>
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
   26f0c:	2304      	movs	r3, #4
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   26f0e:	2d00      	cmp	r5, #0
   26f10:	d056      	beq.n	26fc0 <sys_heap_aligned_alloc+0xda>
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   26f12:	68b2      	ldr	r2, [r6, #8]
   26f14:	ebb2 0fd5 	cmp.w	r2, r5, lsr #3
   26f18:	d955      	bls.n	26fc6 <sys_heap_aligned_alloc+0xe0>
	/*
	 * Find a free block that is guaranteed to fit.
	 * We over-allocate to account for alignment and then free
	 * the extra allocations afterwards.
	 */
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   26f1a:	1961      	adds	r1, r4, r5
   26f1c:	1ac9      	subs	r1, r1, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   26f1e:	310b      	adds	r1, #11
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   26f20:	08c9      	lsrs	r1, r1, #3
   26f22:	4630      	mov	r0, r6
   26f24:	f7ff ff60 	bl	26de8 <alloc_chunk>

	if (c0 == 0) {
   26f28:	4607      	mov	r7, r0
   26f2a:	2800      	cmp	r0, #0
   26f2c:	d04e      	beq.n	26fcc <sys_heap_aligned_alloc+0xe6>
		return NULL;
	}
	uint8_t *mem = chunk_mem(h, c0);
   26f2e:	4601      	mov	r1, r0
   26f30:	4630      	mov	r0, r6
   26f32:	f7ff fe8b 	bl	26c4c <chunk_mem>

	/* Align allocated memory */
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   26f36:	eb00 0809 	add.w	r8, r0, r9
   26f3a:	44a0      	add	r8, r4
   26f3c:	f108 38ff 	add.w	r8, r8, #4294967295
   26f40:	4264      	negs	r4, r4
   26f42:	ea08 0804 	and.w	r8, r8, r4
   26f46:	eba8 0809 	sub.w	r8, r8, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   26f4a:	eb08 0405 	add.w	r4, r8, r5
   26f4e:	3407      	adds	r4, #7
   26f50:	f024 0407 	bic.w	r4, r4, #7

	/* Get corresponding chunks */
	chunkid_t c = mem_to_chunkid(h, mem);
   26f54:	4641      	mov	r1, r8
   26f56:	4630      	mov	r0, r6
   26f58:	f7ff fef9 	bl	26d4e <mem_to_chunkid>
   26f5c:	4605      	mov	r5, r0
	chunkid_t c_end = end - chunk_buf(h);
   26f5e:	1ba4      	subs	r4, r4, r6
   26f60:	10e4      	asrs	r4, r4, #3
	CHECK(c >= c0 && c  < c_end && c_end <= c0 + padded_sz);

	/* Split and free unused prefix */
	if (c > c0) {
   26f62:	4287      	cmp	r7, r0
   26f64:	d318      	bcc.n	26f98 <sys_heap_aligned_alloc+0xb2>
	void *cmem = &buf[c];
   26f66:	00ef      	lsls	r7, r5, #3
		return ((uint16_t *)cmem)[f];
   26f68:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
   26f6c:	885b      	ldrh	r3, [r3, #2]
	return c + chunk_size(h, c);
   26f6e:	eb05 0353 	add.w	r3, r5, r3, lsr #1
		split_chunks(h, c0, c);
		free_list_add(h, c0);
	}

	/* Split and free unused suffix */
	if (right_chunk(h, c) > c_end) {
   26f72:	429c      	cmp	r4, r3
   26f74:	d31a      	bcc.n	26fac <sys_heap_aligned_alloc+0xc6>
	void *cmem = &buf[c];
   26f76:	443e      	add	r6, r7
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   26f78:	8873      	ldrh	r3, [r6, #2]
   26f7a:	f043 0301 	orr.w	r3, r3, #1
   26f7e:	8073      	strh	r3, [r6, #2]
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   26f80:	4640      	mov	r0, r8
   26f82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return sys_heap_alloc(heap, bytes);
   26f86:	4611      	mov	r1, r2
   26f88:	f7ff ff7b 	bl	26e82 <sys_heap_alloc>
   26f8c:	4680      	mov	r8, r0
   26f8e:	e7f7      	b.n	26f80 <sys_heap_aligned_alloc+0x9a>
		align -= rew;
   26f90:	464c      	mov	r4, r9
	rew = align & -align;
   26f92:	4699      	mov	r9, r3
		gap = MIN(rew, chunk_header_bytes(h));
   26f94:	2304      	movs	r3, #4
   26f96:	e7ba      	b.n	26f0e <sys_heap_aligned_alloc+0x28>
		split_chunks(h, c0, c);
   26f98:	4602      	mov	r2, r0
   26f9a:	4639      	mov	r1, r7
   26f9c:	4630      	mov	r0, r6
   26f9e:	f7ff fe9f 	bl	26ce0 <split_chunks>
		free_list_add(h, c0);
   26fa2:	4639      	mov	r1, r7
   26fa4:	4630      	mov	r0, r6
   26fa6:	f7ff fee2 	bl	26d6e <free_list_add>
   26faa:	e7dc      	b.n	26f66 <sys_heap_aligned_alloc+0x80>
		split_chunks(h, c, c_end);
   26fac:	4622      	mov	r2, r4
   26fae:	4629      	mov	r1, r5
   26fb0:	4630      	mov	r0, r6
   26fb2:	f7ff fe95 	bl	26ce0 <split_chunks>
		free_list_add(h, c_end);
   26fb6:	4621      	mov	r1, r4
   26fb8:	4630      	mov	r0, r6
   26fba:	f7ff fed8 	bl	26d6e <free_list_add>
   26fbe:	e7da      	b.n	26f76 <sys_heap_aligned_alloc+0x90>
		return NULL;
   26fc0:	f04f 0800 	mov.w	r8, #0
   26fc4:	e7dc      	b.n	26f80 <sys_heap_aligned_alloc+0x9a>
   26fc6:	f04f 0800 	mov.w	r8, #0
   26fca:	e7d9      	b.n	26f80 <sys_heap_aligned_alloc+0x9a>
		return NULL;
   26fcc:	f04f 0800 	mov.w	r8, #0
   26fd0:	e7d6      	b.n	26f80 <sys_heap_aligned_alloc+0x9a>

00026fd2 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   26fd2:	b570      	push	{r4, r5, r6, lr}
   26fd4:	4603      	mov	r3, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   26fd6:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   26fd8:	1dc8      	adds	r0, r1, #7
   26fda:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   26fde:	440a      	add	r2, r1
   26fe0:	f022 0207 	bic.w	r2, r2, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   26fe4:	1a12      	subs	r2, r2, r0
   26fe6:	08d5      	lsrs	r5, r2, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   26fe8:	6018      	str	r0, [r3, #0]
	h->end_chunk = heap_sz;
   26fea:	6085      	str	r5, [r0, #8]
	h->avail_buckets = 0;
   26fec:	2300      	movs	r3, #0
   26fee:	60c3      	str	r3, [r0, #12]
	return 31 - __builtin_clz(usable_sz);
   26ff0:	fab5 f185 	clz	r1, r5
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   26ff4:	f1c1 0e20 	rsb	lr, r1, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   26ff8:	f1c1 0124 	rsb	r1, r1, #36	; 0x24
   26ffc:	0089      	lsls	r1, r1, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   26ffe:	1dce      	adds	r6, r1, #7
   27000:	08f1      	lsrs	r1, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   27002:	e005      	b.n	27010 <sys_heap_init+0x3e>
		h->buckets[i].next = 0;
   27004:	f103 0c04 	add.w	ip, r3, #4
   27008:	2400      	movs	r4, #0
   2700a:	f840 402c 	str.w	r4, [r0, ip, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
   2700e:	3301      	adds	r3, #1
   27010:	4573      	cmp	r3, lr
   27012:	dbf7      	blt.n	27004 <sys_heap_init+0x32>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   27014:	004c      	lsls	r4, r1, #1
		((uint16_t *)cmem)[f] = val;
   27016:	b2a4      	uxth	r4, r4
   27018:	8044      	strh	r4, [r0, #2]
   2701a:	f04f 0c00 	mov.w	ip, #0
   2701e:	f8a0 c000 	strh.w	ip, [r0]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   27022:	f044 0401 	orr.w	r4, r4, #1
   27026:	8044      	strh	r4, [r0, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   27028:	1a6b      	subs	r3, r5, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2702a:	ea4f 0e43 	mov.w	lr, r3, lsl #1
	void *cmem = &buf[c];
   2702e:	f026 0407 	bic.w	r4, r6, #7
		((uint16_t *)cmem)[f] = val;
   27032:	1ca5      	adds	r5, r4, #2
   27034:	f820 e005 	strh.w	lr, [r0, r5]
   27038:	5301      	strh	r1, [r0, r4]
	void *cmem = &buf[c];
   2703a:	f022 0407 	bic.w	r4, r2, #7
		((uint16_t *)cmem)[f] = val;
   2703e:	1c95      	adds	r5, r2, #2
   27040:	f820 c005 	strh.w	ip, [r0, r5]
   27044:	4402      	add	r2, r0
   27046:	5303      	strh	r3, [r0, r4]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   27048:	8853      	ldrh	r3, [r2, #2]
   2704a:	f043 0301 	orr.w	r3, r3, #1
   2704e:	8053      	strh	r3, [r2, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
   27050:	f7ff fe8d 	bl	26d6e <free_list_add>
}
   27054:	bd70      	pop	{r4, r5, r6, pc}

00027056 <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
   27056:	f001 0107 	and.w	r1, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2705a:	8b03      	ldrh	r3, [r0, #24]
   2705c:	f023 0307 	bic.w	r3, r3, #7
   27060:	430b      	orrs	r3, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
   27062:	8303      	strh	r3, [r0, #24]
}
   27064:	4770      	bx	lr

00027066 <notify_monitors>:
{
   27066:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2706a:	4606      	mov	r6, r0
   2706c:	460f      	mov	r7, r1
   2706e:	4690      	mov	r8, r2
	return list->head;
   27070:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   27072:	b121      	cbz	r1, 2707e <notify_monitors+0x18>
	return node->next;
   27074:	680c      	ldr	r4, [r1, #0]
   27076:	b13c      	cbz	r4, 27088 <notify_monitors+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   27078:	b931      	cbnz	r1, 27088 <notify_monitors+0x22>
   2707a:	460c      	mov	r4, r1
   2707c:	e004      	b.n	27088 <notify_monitors+0x22>
   2707e:	460c      	mov	r4, r1
   27080:	e002      	b.n	27088 <notify_monitors+0x22>
   27082:	4623      	mov	r3, r4
   27084:	4621      	mov	r1, r4
   27086:	461c      	mov	r4, r3
   27088:	b169      	cbz	r1, 270a6 <notify_monitors+0x40>
		mon->callback(mgr, mon, state, res);
   2708a:	684d      	ldr	r5, [r1, #4]
   2708c:	4643      	mov	r3, r8
   2708e:	463a      	mov	r2, r7
   27090:	4630      	mov	r0, r6
   27092:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   27094:	2c00      	cmp	r4, #0
   27096:	d0f4      	beq.n	27082 <notify_monitors+0x1c>
	return node->next;
   27098:	6823      	ldr	r3, [r4, #0]
   2709a:	2b00      	cmp	r3, #0
   2709c:	d0f2      	beq.n	27084 <notify_monitors+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2709e:	2c00      	cmp	r4, #0
   270a0:	d1f0      	bne.n	27084 <notify_monitors+0x1e>
   270a2:	4623      	mov	r3, r4
   270a4:	e7ee      	b.n	27084 <notify_monitors+0x1e>
}
   270a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000270aa <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   270aa:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   270ac:	f013 0307 	ands.w	r3, r3, #7
   270b0:	d103      	bne.n	270ba <process_recheck+0x10>
	return list->head;
   270b2:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
   270b4:	b10a      	cbz	r2, 270ba <process_recheck+0x10>
		evt = EVT_START;
   270b6:	2003      	movs	r0, #3
   270b8:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   270ba:	2b02      	cmp	r3, #2
   270bc:	d003      	beq.n	270c6 <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
   270be:	2b01      	cmp	r3, #1
   270c0:	d006      	beq.n	270d0 <process_recheck+0x26>
	int evt = EVT_NOP;
   270c2:	2000      	movs	r0, #0
   270c4:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
   270c6:	8b42      	ldrh	r2, [r0, #26]
   270c8:	2a00      	cmp	r2, #0
   270ca:	d1f8      	bne.n	270be <process_recheck+0x14>
		evt = EVT_STOP;
   270cc:	2004      	movs	r0, #4
   270ce:	4770      	bx	lr
   270d0:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
   270d2:	b10b      	cbz	r3, 270d8 <process_recheck+0x2e>
		evt = EVT_RESET;
   270d4:	2005      	movs	r0, #5
}
   270d6:	4770      	bx	lr
	int evt = EVT_NOP;
   270d8:	2000      	movs	r0, #0
   270da:	4770      	bx	lr

000270dc <process_complete>:
{
   270dc:	b510      	push	{r4, lr}
   270de:	4604      	mov	r4, r0
   270e0:	468c      	mov	ip, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   270e2:	8b03      	ldrh	r3, [r0, #24]
	if (res < 0) {
   270e4:	2a00      	cmp	r2, #0
   270e6:	db07      	blt.n	270f8 <process_complete+0x1c>
   270e8:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   270ec:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   270ee:	2a01      	cmp	r2, #1
   270f0:	d90e      	bls.n	27110 <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
   270f2:	2b04      	cmp	r3, #4
   270f4:	d036      	beq.n	27164 <process_complete+0x88>
}
   270f6:	bd10      	pop	{r4, pc}
		*clients = mgr->clients;
   270f8:	e9d0 0100 	ldrd	r0, r1, [r0]
   270fc:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
   27100:	2300      	movs	r3, #0
   27102:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
   27104:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
   27106:	2101      	movs	r1, #1
   27108:	4620      	mov	r0, r4
   2710a:	f7ff ffa4 	bl	27056 <set_state>
   2710e:	e7f2      	b.n	270f6 <process_complete+0x1a>
		*clients = mgr->clients;
   27110:	e9d0 0100 	ldrd	r0, r1, [r0]
   27114:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
   27118:	2200      	movs	r2, #0
   2711a:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
   2711c:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
   2711e:	2b06      	cmp	r3, #6
   27120:	d11b      	bne.n	2715a <process_complete+0x7e>
	return list->head;
   27122:	f8dc 3000 	ldr.w	r3, [ip]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   27126:	b153      	cbz	r3, 2713e <process_complete+0x62>
				mgr->refs += 1U;
   27128:	8b62      	ldrh	r2, [r4, #26]
   2712a:	3201      	adds	r2, #1
   2712c:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   2712e:	461a      	mov	r2, r3
	return node->next;
   27130:	681b      	ldr	r3, [r3, #0]
   27132:	2b00      	cmp	r3, #0
   27134:	d0f7      	beq.n	27126 <process_complete+0x4a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   27136:	2a00      	cmp	r2, #0
   27138:	d1f5      	bne.n	27126 <process_complete+0x4a>
   2713a:	4613      	mov	r3, r2
   2713c:	e7f3      	b.n	27126 <process_complete+0x4a>
			set_state(mgr, ONOFF_STATE_ON);
   2713e:	2102      	movs	r1, #2
   27140:	4620      	mov	r0, r4
   27142:	f7ff ff88 	bl	27056 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   27146:	4620      	mov	r0, r4
   27148:	f7ff ffaf 	bl	270aa <process_recheck>
   2714c:	2800      	cmp	r0, #0
   2714e:	d0d2      	beq.n	270f6 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   27150:	8b23      	ldrh	r3, [r4, #24]
   27152:	f043 0320 	orr.w	r3, r3, #32
   27156:	8323      	strh	r3, [r4, #24]
   27158:	e7cd      	b.n	270f6 <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
   2715a:	2100      	movs	r1, #0
   2715c:	4620      	mov	r0, r4
   2715e:	f7ff ff7a 	bl	27056 <set_state>
   27162:	e7f0      	b.n	27146 <process_complete+0x6a>
		set_state(mgr, ONOFF_STATE_OFF);
   27164:	2100      	movs	r1, #0
   27166:	f7ff ff76 	bl	27056 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   2716a:	4620      	mov	r0, r4
   2716c:	f7ff ff9d 	bl	270aa <process_recheck>
   27170:	2800      	cmp	r0, #0
   27172:	d0c0      	beq.n	270f6 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   27174:	8b23      	ldrh	r3, [r4, #24]
   27176:	f043 0320 	orr.w	r3, r3, #32
   2717a:	8323      	strh	r3, [r4, #24]
}
   2717c:	e7bb      	b.n	270f6 <process_complete+0x1a>

0002717e <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
   2717e:	b150      	cbz	r0, 27196 <validate_args+0x18>
{
   27180:	b510      	push	{r4, lr}
   27182:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   27184:	b151      	cbz	r1, 2719c <validate_args+0x1e>
	int rv = sys_notify_validate(&cli->notify);
   27186:	1d08      	adds	r0, r1, #4
   27188:	f000 f8c4 	bl	27314 <sys_notify_validate>
	if ((rv == 0)
   2718c:	b910      	cbnz	r0, 27194 <validate_args+0x16>
	    && ((cli->notify.flags
   2718e:	68a3      	ldr	r3, [r4, #8]
   27190:	2b03      	cmp	r3, #3
   27192:	d806      	bhi.n	271a2 <validate_args+0x24>
}
   27194:	bd10      	pop	{r4, pc}
		return -EINVAL;
   27196:	f06f 0015 	mvn.w	r0, #21
}
   2719a:	4770      	bx	lr
		return -EINVAL;
   2719c:	f06f 0015 	mvn.w	r0, #21
   271a0:	e7f8      	b.n	27194 <validate_args+0x16>
		rv = -EINVAL;
   271a2:	f06f 0015 	mvn.w	r0, #21
   271a6:	e7f5      	b.n	27194 <validate_args+0x16>

000271a8 <notify_one>:
{
   271a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   271ac:	4607      	mov	r7, r0
   271ae:	460c      	mov	r4, r1
   271b0:	4616      	mov	r6, r2
   271b2:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   271b4:	4619      	mov	r1, r3
   271b6:	1d20      	adds	r0, r4, #4
   271b8:	f000 f8cb 	bl	27352 <sys_notify_finalize>
	if (cb) {
   271bc:	b128      	cbz	r0, 271ca <notify_one+0x22>
   271be:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
   271c0:	462b      	mov	r3, r5
   271c2:	4632      	mov	r2, r6
   271c4:	4621      	mov	r1, r4
   271c6:	4638      	mov	r0, r7
   271c8:	47c0      	blx	r8
}
   271ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000271ce <notify_all>:
{
   271ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   271d2:	4680      	mov	r8, r0
   271d4:	460c      	mov	r4, r1
   271d6:	4617      	mov	r7, r2
   271d8:	461e      	mov	r6, r3
	while (!sys_slist_is_empty(list)) {
   271da:	e004      	b.n	271e6 <notify_all+0x18>
		notify_one(mgr, cli, state, res);
   271dc:	4633      	mov	r3, r6
   271de:	463a      	mov	r2, r7
   271e0:	4640      	mov	r0, r8
   271e2:	f7ff ffe1 	bl	271a8 <notify_one>
	return list->head;
   271e6:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
   271e8:	b131      	cbz	r1, 271f8 <notify_all+0x2a>
	return node->next;
   271ea:	680d      	ldr	r5, [r1, #0]
	list->head = node;
   271ec:	6025      	str	r5, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   271ee:	6863      	ldr	r3, [r4, #4]
   271f0:	428b      	cmp	r3, r1
   271f2:	d1f3      	bne.n	271dc <notify_all+0xe>
	list->tail = node;
   271f4:	6065      	str	r5, [r4, #4]
}
   271f6:	e7f1      	b.n	271dc <notify_all+0xe>
}
   271f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000271fc <transition_complete>:
{
   271fc:	b508      	push	{r3, lr}
	__asm__ volatile(
   271fe:	f04f 0c40 	mov.w	ip, #64	; 0x40
   27202:	f3ef 8211 	mrs	r2, BASEPRI
   27206:	f38c 8812 	msr	BASEPRI_MAX, ip
   2720a:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   2720e:	6141      	str	r1, [r0, #20]
	process_event(mgr, EVT_COMPLETE, key);
   27210:	2101      	movs	r1, #1
   27212:	f7ee f853 	bl	152bc <process_event>
}
   27216:	bd08      	pop	{r3, pc}

00027218 <onoff_manager_init>:
	if ((mgr == NULL)
   27218:	4603      	mov	r3, r0
   2721a:	b170      	cbz	r0, 2723a <onoff_manager_init+0x22>
	    || (transitions == NULL)
   2721c:	b181      	cbz	r1, 27240 <onoff_manager_init+0x28>
	    || (transitions->start == NULL)
   2721e:	680a      	ldr	r2, [r1, #0]
   27220:	b18a      	cbz	r2, 27246 <onoff_manager_init+0x2e>
	    || (transitions->stop == NULL)) {
   27222:	684a      	ldr	r2, [r1, #4]
   27224:	b192      	cbz	r2, 2724c <onoff_manager_init+0x34>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   27226:	2000      	movs	r0, #0
   27228:	6018      	str	r0, [r3, #0]
   2722a:	6058      	str	r0, [r3, #4]
   2722c:	6098      	str	r0, [r3, #8]
   2722e:	60d8      	str	r0, [r3, #12]
   27230:	6118      	str	r0, [r3, #16]
   27232:	6158      	str	r0, [r3, #20]
   27234:	6198      	str	r0, [r3, #24]
   27236:	6119      	str	r1, [r3, #16]
	return 0;
   27238:	4770      	bx	lr
		return -EINVAL;
   2723a:	f06f 0015 	mvn.w	r0, #21
   2723e:	4770      	bx	lr
   27240:	f06f 0015 	mvn.w	r0, #21
   27244:	4770      	bx	lr
   27246:	f06f 0015 	mvn.w	r0, #21
   2724a:	4770      	bx	lr
   2724c:	f06f 0015 	mvn.w	r0, #21
}
   27250:	4770      	bx	lr

00027252 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   27252:	b570      	push	{r4, r5, r6, lr}
   27254:	4605      	mov	r5, r0
   27256:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   27258:	f7ff ff91 	bl	2717e <validate_args>

	if (rv < 0) {
   2725c:	1e04      	subs	r4, r0, #0
   2725e:	db30      	blt.n	272c2 <onoff_request+0x70>
   27260:	f04f 0340 	mov.w	r3, #64	; 0x40
   27264:	f3ef 8211 	mrs	r2, BASEPRI
   27268:	f383 8812 	msr	BASEPRI_MAX, r3
   2726c:	f3bf 8f6f 	isb	sy
   27270:	4696      	mov	lr, r2
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   27272:	f8b5 c018 	ldrh.w	ip, [r5, #24]
   27276:	f00c 0c07 	and.w	ip, ip, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   2727a:	8b6b      	ldrh	r3, [r5, #26]
   2727c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   27280:	428b      	cmp	r3, r1
   27282:	d02c      	beq.n	272de <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
   27284:	4664      	mov	r4, ip
	if (state == ONOFF_STATE_ON) {
   27286:	f1bc 0f02 	cmp.w	ip, #2
   2728a:	d008      	beq.n	2729e <onoff_request+0x4c>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
   2728c:	f1bc 0f06 	cmp.w	ip, #6
   27290:	d819      	bhi.n	272c6 <onoff_request+0x74>
   27292:	e8df f00c 	tbb	[pc, ip]
   27296:	181e      	.short	0x181e
   27298:	2a1e1818 	.word	0x2a1e1818
   2729c:	1e          	.byte	0x1e
   2729d:	00          	.byte	0x00
		mgr->refs += 1U;
   2729e:	3301      	adds	r3, #1
   272a0:	836b      	strh	r3, [r5, #26]
		notify = true;
   272a2:	2301      	movs	r3, #1
	bool start = false;             /* trigger a start transition */
   272a4:	2100      	movs	r1, #0
	bool add_client = false;        /* add client to pending list */
   272a6:	4608      	mov	r0, r1
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
	}

out:
	if (add_client) {
   272a8:	b128      	cbz	r0, 272b6 <onoff_request+0x64>
	parent->next = child;
   272aa:	2000      	movs	r0, #0
   272ac:	6030      	str	r0, [r6, #0]
	return list->tail;
   272ae:	6868      	ldr	r0, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   272b0:	b308      	cbz	r0, 272f6 <onoff_request+0xa4>
	parent->next = child;
   272b2:	6006      	str	r6, [r0, #0]
	list->tail = node;
   272b4:	606e      	str	r6, [r5, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
   272b6:	bb09      	cbnz	r1, 272fc <onoff_request+0xaa>
	__asm__ volatile(
   272b8:	f38e 8811 	msr	BASEPRI, lr
   272bc:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   272c0:	bb0b      	cbnz	r3, 27306 <onoff_request+0xb4>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   272c2:	4620      	mov	r0, r4
   272c4:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
   272c6:	f06f 0404 	mvn.w	r4, #4
   272ca:	2300      	movs	r3, #0
   272cc:	4619      	mov	r1, r3
   272ce:	4618      	mov	r0, r3
   272d0:	e7ea      	b.n	272a8 <onoff_request+0x56>
		start = (state == ONOFF_STATE_OFF);
   272d2:	fabc f18c 	clz	r1, ip
   272d6:	0949      	lsrs	r1, r1, #5
	bool notify = false;            /* do client notification */
   272d8:	2300      	movs	r3, #0
		add_client = true;
   272da:	2001      	movs	r0, #1
   272dc:	e7e4      	b.n	272a8 <onoff_request+0x56>
		rv = -EAGAIN;
   272de:	f06f 040a 	mvn.w	r4, #10
	bool notify = false;            /* do client notification */
   272e2:	2300      	movs	r3, #0
	bool start = false;             /* trigger a start transition */
   272e4:	4619      	mov	r1, r3
	bool add_client = false;        /* add client to pending list */
   272e6:	4618      	mov	r0, r3
   272e8:	e7de      	b.n	272a8 <onoff_request+0x56>
	if (state == ONOFF_STATE_ON) {
   272ea:	f06f 0485 	mvn.w	r4, #133	; 0x85
   272ee:	2300      	movs	r3, #0
   272f0:	4619      	mov	r1, r3
   272f2:	4618      	mov	r0, r3
   272f4:	e7d8      	b.n	272a8 <onoff_request+0x56>
   272f6:	606e      	str	r6, [r5, #4]
	list->head = node;
   272f8:	602e      	str	r6, [r5, #0]
}
   272fa:	e7dc      	b.n	272b6 <onoff_request+0x64>
		process_event(mgr, EVT_RECHECK, key);
   272fc:	2102      	movs	r1, #2
   272fe:	4628      	mov	r0, r5
   27300:	f7ed ffdc 	bl	152bc <process_event>
   27304:	e7dd      	b.n	272c2 <onoff_request+0x70>
			notify_one(mgr, cli, state, 0);
   27306:	2300      	movs	r3, #0
   27308:	4662      	mov	r2, ip
   2730a:	4631      	mov	r1, r6
   2730c:	4628      	mov	r0, r5
   2730e:	f7ff ff4b 	bl	271a8 <notify_one>
   27312:	e7d6      	b.n	272c2 <onoff_request+0x70>

00027314 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   27314:	4602      	mov	r2, r0
   27316:	b1b0      	cbz	r0, 27346 <sys_notify_validate+0x32>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   27318:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   2731a:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   2731e:	2b02      	cmp	r3, #2
   27320:	d00b      	beq.n	2733a <sys_notify_validate+0x26>
   27322:	2b03      	cmp	r3, #3
   27324:	d004      	beq.n	27330 <sys_notify_validate+0x1c>
   27326:	2b01      	cmp	r3, #1
   27328:	d004      	beq.n	27334 <sys_notify_validate+0x20>
   2732a:	f06f 0015 	mvn.w	r0, #21
   2732e:	4770      	bx	lr
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
   27330:	6803      	ldr	r3, [r0, #0]
   27332:	b15b      	cbz	r3, 2734c <sys_notify_validate+0x38>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
   27334:	2000      	movs	r0, #0
   27336:	6090      	str	r0, [r2, #8]
   27338:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   2733a:	6803      	ldr	r3, [r0, #0]
   2733c:	2b00      	cmp	r3, #0
   2733e:	d1f9      	bne.n	27334 <sys_notify_validate+0x20>
			rv = -EINVAL;
   27340:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
   27344:	4770      	bx	lr
		return -EINVAL;
   27346:	f06f 0015 	mvn.w	r0, #21
   2734a:	4770      	bx	lr
			rv = -EINVAL;
   2734c:	f06f 0015 	mvn.w	r0, #21
   27350:	4770      	bx	lr

00027352 <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   27352:	b510      	push	{r4, lr}
   27354:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   27356:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   27358:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   2735c:	6081      	str	r1, [r0, #8]
	switch (method) {
   2735e:	2a02      	cmp	r2, #2
   27360:	d004      	beq.n	2736c <sys_notify_finalize+0x1a>
   27362:	2a03      	cmp	r2, #3
   27364:	d105      	bne.n	27372 <sys_notify_finalize+0x20>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   27366:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   27368:	2000      	movs	r0, #0
		break;
   2736a:	e004      	b.n	27376 <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SIGNAL:
		sig = notify->method.signal;
   2736c:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   2736e:	2400      	movs	r4, #0
		break;
   27370:	e001      	b.n	27376 <sys_notify_finalize+0x24>
	switch (method) {
   27372:	2400      	movs	r4, #0
   27374:	4620      	mov	r0, r4
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   27376:	2200      	movs	r2, #0
   27378:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   2737a:	b108      	cbz	r0, 27380 <sys_notify_finalize+0x2e>
	return z_impl_k_poll_signal_raise(sig, result);
   2737c:	f7fe ffc8 	bl	26310 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   27380:	4620      	mov	r0, r4
   27382:	bd10      	pop	{r4, pc}

00027384 <extract_decimal>:
{
   27384:	4684      	mov	ip, r0
	const char *sp = *str;
   27386:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
   27388:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
   2738a:	e006      	b.n	2739a <extract_decimal+0x16>
		val = 10U * val + *sp++ - '0';
   2738c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   27390:	3201      	adds	r2, #1
   27392:	eb03 0340 	add.w	r3, r3, r0, lsl #1
   27396:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   2739a:	7813      	ldrb	r3, [r2, #0]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   2739c:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   273a0:	2909      	cmp	r1, #9
   273a2:	d9f3      	bls.n	2738c <extract_decimal+0x8>
	*str = sp;
   273a4:	f8cc 2000 	str.w	r2, [ip]
}
   273a8:	4770      	bx	lr

000273aa <extract_width>:
{
   273aa:	b530      	push	{r4, r5, lr}
   273ac:	b083      	sub	sp, #12
   273ae:	4604      	mov	r4, r0
   273b0:	9101      	str	r1, [sp, #4]
	conv->width_present = true;
   273b2:	7803      	ldrb	r3, [r0, #0]
   273b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   273b8:	7003      	strb	r3, [r0, #0]
	if (*sp == '*') {
   273ba:	460d      	mov	r5, r1
   273bc:	780b      	ldrb	r3, [r1, #0]
   273be:	2b2a      	cmp	r3, #42	; 0x2a
   273c0:	d018      	beq.n	273f4 <extract_width+0x4a>
	size_t width = extract_decimal(&sp);
   273c2:	a801      	add	r0, sp, #4
   273c4:	f7ff ffde 	bl	27384 <extract_decimal>
	if (sp != wp) {
   273c8:	9b01      	ldr	r3, [sp, #4]
   273ca:	429d      	cmp	r5, r3
   273cc:	d00f      	beq.n	273ee <extract_width+0x44>
		conv->width_present = true;
   273ce:	7823      	ldrb	r3, [r4, #0]
   273d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   273d4:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
   273d6:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
   273d8:	b2db      	uxtb	r3, r3
   273da:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
   273de:	2800      	cmp	r0, #0
   273e0:	db10      	blt.n	27404 <extract_width+0x5a>
   273e2:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
   273e4:	4313      	orrs	r3, r2
   273e6:	7822      	ldrb	r2, [r4, #0]
   273e8:	f363 0241 	bfi	r2, r3, #1, #1
   273ec:	7022      	strb	r2, [r4, #0]
	return sp;
   273ee:	9801      	ldr	r0, [sp, #4]
}
   273f0:	b003      	add	sp, #12
   273f2:	bd30      	pop	{r4, r5, pc}
		conv->width_star = true;
   273f4:	7843      	ldrb	r3, [r0, #1]
   273f6:	f043 0301 	orr.w	r3, r3, #1
   273fa:	7043      	strb	r3, [r0, #1]
		return ++sp;
   273fc:	4608      	mov	r0, r1
   273fe:	3001      	adds	r0, #1
   27400:	9001      	str	r0, [sp, #4]
   27402:	e7f5      	b.n	273f0 <extract_width+0x46>
				      || (width != (size_t)conv->width_value));
   27404:	2201      	movs	r2, #1
   27406:	e7ed      	b.n	273e4 <extract_width+0x3a>

00027408 <extract_prec>:
{
   27408:	b510      	push	{r4, lr}
   2740a:	b082      	sub	sp, #8
   2740c:	9101      	str	r1, [sp, #4]
	conv->prec_present = (*sp == '.');
   2740e:	780b      	ldrb	r3, [r1, #0]
   27410:	2b2e      	cmp	r3, #46	; 0x2e
   27412:	bf14      	ite	ne
   27414:	2300      	movne	r3, #0
   27416:	2301      	moveq	r3, #1
   27418:	7842      	ldrb	r2, [r0, #1]
   2741a:	f363 0241 	bfi	r2, r3, #1, #1
   2741e:	7042      	strb	r2, [r0, #1]
	if (!conv->prec_present) {
   27420:	b1c3      	cbz	r3, 27454 <extract_prec+0x4c>
   27422:	4604      	mov	r4, r0
	++sp;
   27424:	9b01      	ldr	r3, [sp, #4]
   27426:	1c5a      	adds	r2, r3, #1
   27428:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
   2742a:	785b      	ldrb	r3, [r3, #1]
   2742c:	2b2a      	cmp	r3, #42	; 0x2a
   2742e:	d013      	beq.n	27458 <extract_prec+0x50>
	size_t prec = extract_decimal(&sp);
   27430:	a801      	add	r0, sp, #4
   27432:	f7ff ffa7 	bl	27384 <extract_decimal>
	conv->prec_value = prec;
   27436:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
   27438:	7823      	ldrb	r3, [r4, #0]
   2743a:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
   2743e:	2800      	cmp	r0, #0
   27440:	db12      	blt.n	27468 <extract_prec+0x60>
   27442:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
   27444:	4313      	orrs	r3, r2
   27446:	7822      	ldrb	r2, [r4, #0]
   27448:	f363 0241 	bfi	r2, r3, #1, #1
   2744c:	7022      	strb	r2, [r4, #0]
	return sp;
   2744e:	9801      	ldr	r0, [sp, #4]
}
   27450:	b002      	add	sp, #8
   27452:	bd10      	pop	{r4, pc}
		return sp;
   27454:	4608      	mov	r0, r1
   27456:	e7fb      	b.n	27450 <extract_prec+0x48>
		conv->prec_star = true;
   27458:	7843      	ldrb	r3, [r0, #1]
   2745a:	f043 0304 	orr.w	r3, r3, #4
   2745e:	7043      	strb	r3, [r0, #1]
		return ++sp;
   27460:	4610      	mov	r0, r2
   27462:	3001      	adds	r0, #1
   27464:	9001      	str	r0, [sp, #4]
   27466:	e7f3      	b.n	27450 <extract_prec+0x48>
			      || (prec != (size_t)conv->prec_value));
   27468:	2201      	movs	r2, #1
   2746a:	e7eb      	b.n	27444 <extract_prec+0x3c>

0002746c <extract_length>:
{
   2746c:	4602      	mov	r2, r0
	switch (*sp) {
   2746e:	780b      	ldrb	r3, [r1, #0]
   27470:	3b4c      	subs	r3, #76	; 0x4c
   27472:	2b2e      	cmp	r3, #46	; 0x2e
   27474:	d85b      	bhi.n	2752e <extract_length+0xc2>
   27476:	e8df f003 	tbb	[pc, r3]
   2747a:	5a4f      	.short	0x5a4f
   2747c:	5a5a5a5a 	.word	0x5a5a5a5a
   27480:	5a5a5a5a 	.word	0x5a5a5a5a
   27484:	5a5a5a5a 	.word	0x5a5a5a5a
   27488:	5a5a5a5a 	.word	0x5a5a5a5a
   2748c:	5a5a5a5a 	.word	0x5a5a5a5a
   27490:	5a5a5a5a 	.word	0x5a5a5a5a
   27494:	5a185a5a 	.word	0x5a185a5a
   27498:	5a295a3a 	.word	0x5a295a3a
   2749c:	5a5a5a5a 	.word	0x5a5a5a5a
   274a0:	5a485a5a 	.word	0x5a485a5a
   274a4:	5a5a5a5a 	.word	0x5a5a5a5a
   274a8:	41          	.byte	0x41
   274a9:	00          	.byte	0x00
		if (*++sp == 'h') {
   274aa:	1c48      	adds	r0, r1, #1
   274ac:	784b      	ldrb	r3, [r1, #1]
   274ae:	2b68      	cmp	r3, #104	; 0x68
   274b0:	d005      	beq.n	274be <extract_length+0x52>
			conv->length_mod = LENGTH_H;
   274b2:	7853      	ldrb	r3, [r2, #1]
   274b4:	2102      	movs	r1, #2
   274b6:	f361 03c6 	bfi	r3, r1, #3, #4
   274ba:	7053      	strb	r3, [r2, #1]
   274bc:	4770      	bx	lr
			conv->length_mod = LENGTH_HH;
   274be:	7853      	ldrb	r3, [r2, #1]
   274c0:	2001      	movs	r0, #1
   274c2:	f360 03c6 	bfi	r3, r0, #3, #4
   274c6:	7053      	strb	r3, [r2, #1]
			++sp;
   274c8:	1c88      	adds	r0, r1, #2
   274ca:	4770      	bx	lr
		if (*++sp == 'l') {
   274cc:	1c48      	adds	r0, r1, #1
   274ce:	784b      	ldrb	r3, [r1, #1]
   274d0:	2b6c      	cmp	r3, #108	; 0x6c
   274d2:	d005      	beq.n	274e0 <extract_length+0x74>
			conv->length_mod = LENGTH_L;
   274d4:	7853      	ldrb	r3, [r2, #1]
   274d6:	2103      	movs	r1, #3
   274d8:	f361 03c6 	bfi	r3, r1, #3, #4
   274dc:	7053      	strb	r3, [r2, #1]
   274de:	4770      	bx	lr
			conv->length_mod = LENGTH_LL;
   274e0:	7853      	ldrb	r3, [r2, #1]
   274e2:	2004      	movs	r0, #4
   274e4:	f360 03c6 	bfi	r3, r0, #3, #4
   274e8:	7053      	strb	r3, [r2, #1]
			++sp;
   274ea:	1c88      	adds	r0, r1, #2
   274ec:	4770      	bx	lr
		conv->length_mod = LENGTH_J;
   274ee:	7853      	ldrb	r3, [r2, #1]
   274f0:	2005      	movs	r0, #5
   274f2:	f360 03c6 	bfi	r3, r0, #3, #4
   274f6:	7053      	strb	r3, [r2, #1]
		++sp;
   274f8:	1c48      	adds	r0, r1, #1
		break;
   274fa:	4770      	bx	lr
		conv->length_mod = LENGTH_Z;
   274fc:	7853      	ldrb	r3, [r2, #1]
   274fe:	2006      	movs	r0, #6
   27500:	f360 03c6 	bfi	r3, r0, #3, #4
   27504:	7053      	strb	r3, [r2, #1]
		++sp;
   27506:	1c48      	adds	r0, r1, #1
		break;
   27508:	4770      	bx	lr
		conv->length_mod = LENGTH_T;
   2750a:	7853      	ldrb	r3, [r2, #1]
   2750c:	2007      	movs	r0, #7
   2750e:	f360 03c6 	bfi	r3, r0, #3, #4
   27512:	7053      	strb	r3, [r2, #1]
		++sp;
   27514:	1c48      	adds	r0, r1, #1
		break;
   27516:	4770      	bx	lr
		conv->length_mod = LENGTH_UPPER_L;
   27518:	7853      	ldrb	r3, [r2, #1]
   2751a:	2008      	movs	r0, #8
   2751c:	f360 03c6 	bfi	r3, r0, #3, #4
   27520:	7053      	strb	r3, [r2, #1]
		++sp;
   27522:	1c48      	adds	r0, r1, #1
		conv->unsupported = true;
   27524:	7813      	ldrb	r3, [r2, #0]
   27526:	f043 0302 	orr.w	r3, r3, #2
   2752a:	7013      	strb	r3, [r2, #0]
		break;
   2752c:	4770      	bx	lr
		conv->length_mod = LENGTH_NONE;
   2752e:	7853      	ldrb	r3, [r2, #1]
   27530:	f36f 03c6 	bfc	r3, #3, #4
   27534:	7053      	strb	r3, [r2, #1]
		break;
   27536:	4608      	mov	r0, r1
}
   27538:	4770      	bx	lr

0002753a <extract_specifier>:
{
   2753a:	b500      	push	{lr}
   2753c:	4602      	mov	r2, r0
	conv->specifier = *sp++;
   2753e:	4608      	mov	r0, r1
   27540:	f810 3b01 	ldrb.w	r3, [r0], #1
   27544:	70d3      	strb	r3, [r2, #3]
	switch (conv->specifier) {
   27546:	2b78      	cmp	r3, #120	; 0x78
   27548:	d817      	bhi.n	2757a <extract_specifier+0x40>
   2754a:	2b6e      	cmp	r3, #110	; 0x6e
   2754c:	d229      	bcs.n	275a2 <extract_specifier+0x68>
   2754e:	2b69      	cmp	r3, #105	; 0x69
   27550:	d813      	bhi.n	2757a <extract_specifier+0x40>
   27552:	2b58      	cmp	r3, #88	; 0x58
   27554:	d317      	bcc.n	27586 <extract_specifier+0x4c>
   27556:	f1a3 0c58 	sub.w	ip, r3, #88	; 0x58
   2755a:	fa5f fc8c 	uxtb.w	ip, ip
   2755e:	2101      	movs	r1, #1
   27560:	fa01 f10c 	lsl.w	r1, r1, ip
   27564:	f411 4f62 	tst.w	r1, #57856	; 0xe200
   27568:	d114      	bne.n	27594 <extract_specifier+0x5a>
   2756a:	f640 0c01 	movw	ip, #2049	; 0x801
   2756e:	ea11 0f0c 	tst.w	r1, ip
   27572:	d155      	bne.n	27620 <extract_specifier+0xe6>
   27574:	f411 3f04 	tst.w	r1, #135168	; 0x21000
   27578:	d13a      	bne.n	275f0 <extract_specifier+0xb6>
		conv->invalid = true;
   2757a:	7813      	ldrb	r3, [r2, #0]
   2757c:	f043 0301 	orr.w	r3, r3, #1
   27580:	7013      	strb	r3, [r2, #0]
	bool unsupported = false;
   27582:	2100      	movs	r1, #0
		break;
   27584:	e042      	b.n	2760c <extract_specifier+0xd2>
	switch (conv->specifier) {
   27586:	2b41      	cmp	r3, #65	; 0x41
   27588:	d004      	beq.n	27594 <extract_specifier+0x5a>
   2758a:	d3f6      	bcc.n	2757a <extract_specifier+0x40>
   2758c:	3b45      	subs	r3, #69	; 0x45
   2758e:	b2db      	uxtb	r3, r3
   27590:	2b02      	cmp	r3, #2
   27592:	d8f2      	bhi.n	2757a <extract_specifier+0x40>
		conv->specifier_cat = SPECIFIER_FP;
   27594:	7893      	ldrb	r3, [r2, #2]
   27596:	2104      	movs	r1, #4
   27598:	f361 0302 	bfi	r3, r1, #0, #3
   2759c:	7093      	strb	r3, [r2, #2]
			unsupported = true;
   2759e:	2101      	movs	r1, #1
			break;
   275a0:	e034      	b.n	2760c <extract_specifier+0xd2>
	switch (conv->specifier) {
   275a2:	f1a3 016e 	sub.w	r1, r3, #110	; 0x6e
   275a6:	b2c9      	uxtb	r1, r1
   275a8:	f04f 0c01 	mov.w	ip, #1
   275ac:	fa0c fc01 	lsl.w	ip, ip, r1
   275b0:	f240 4182 	movw	r1, #1154	; 0x482
   275b4:	ea1c 0f01 	tst.w	ip, r1
   275b8:	bf14      	ite	ne
   275ba:	f04f 0e01 	movne.w	lr, #1
   275be:	f04f 0e00 	moveq.w	lr, #0
   275c2:	d12d      	bne.n	27620 <extract_specifier+0xe6>
   275c4:	f01c 0f24 	tst.w	ip, #36	; 0x24
   275c8:	bf14      	ite	ne
   275ca:	2101      	movne	r1, #1
   275cc:	2100      	moveq	r1, #0
   275ce:	d139      	bne.n	27644 <extract_specifier+0x10a>
   275d0:	f01c 0c01 	ands.w	ip, ip, #1
   275d4:	d0d1      	beq.n	2757a <extract_specifier+0x40>
		conv->specifier_cat = SPECIFIER_PTR;
   275d6:	7893      	ldrb	r3, [r2, #2]
   275d8:	f04f 0e03 	mov.w	lr, #3
   275dc:	f36e 0302 	bfi	r3, lr, #0, #3
   275e0:	7093      	strb	r3, [r2, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
   275e2:	7853      	ldrb	r3, [r2, #1]
   275e4:	f003 0378 	and.w	r3, r3, #120	; 0x78
   275e8:	2b40      	cmp	r3, #64	; 0x40
   275ea:	d10f      	bne.n	2760c <extract_specifier+0xd2>
			unsupported = true;
   275ec:	4661      	mov	r1, ip
   275ee:	e00d      	b.n	2760c <extract_specifier+0xd2>
		conv->specifier_cat = SPECIFIER_SINT;
   275f0:	7891      	ldrb	r1, [r2, #2]
   275f2:	f04f 0c01 	mov.w	ip, #1
   275f6:	f36c 0102 	bfi	r1, ip, #0, #3
   275fa:	7091      	strb	r1, [r2, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
   275fc:	7851      	ldrb	r1, [r2, #1]
   275fe:	f001 0178 	and.w	r1, r1, #120	; 0x78
   27602:	2940      	cmp	r1, #64	; 0x40
   27604:	d013      	beq.n	2762e <extract_specifier+0xf4>
		if (conv->specifier == 'c') {
   27606:	2b63      	cmp	r3, #99	; 0x63
   27608:	d018      	beq.n	2763c <extract_specifier+0x102>
	bool unsupported = false;
   2760a:	2100      	movs	r1, #0
	conv->unsupported |= unsupported;
   2760c:	7813      	ldrb	r3, [r2, #0]
   2760e:	f3c3 0c40 	ubfx	ip, r3, #1, #1
   27612:	ea41 010c 	orr.w	r1, r1, ip
   27616:	f361 0341 	bfi	r3, r1, #1, #1
   2761a:	7013      	strb	r3, [r2, #0]
}
   2761c:	f85d fb04 	ldr.w	pc, [sp], #4
		conv->specifier_cat = SPECIFIER_UINT;
   27620:	7891      	ldrb	r1, [r2, #2]
   27622:	f04f 0c02 	mov.w	ip, #2
   27626:	f36c 0102 	bfi	r1, ip, #0, #3
   2762a:	7091      	strb	r1, [r2, #2]
   2762c:	e7e6      	b.n	275fc <extract_specifier+0xc2>
			conv->invalid = true;
   2762e:	f892 c000 	ldrb.w	ip, [r2]
   27632:	f04c 0c01 	orr.w	ip, ip, #1
   27636:	f882 c000 	strb.w	ip, [r2]
   2763a:	e7e4      	b.n	27606 <extract_specifier+0xcc>
			unsupported = (conv->length_mod != LENGTH_NONE);
   2763c:	3900      	subs	r1, #0
   2763e:	bf18      	it	ne
   27640:	2101      	movne	r1, #1
   27642:	e7e3      	b.n	2760c <extract_specifier+0xd2>
		conv->specifier_cat = SPECIFIER_PTR;
   27644:	7893      	ldrb	r3, [r2, #2]
   27646:	f04f 0c03 	mov.w	ip, #3
   2764a:	f36c 0302 	bfi	r3, ip, #0, #3
   2764e:	7093      	strb	r3, [r2, #2]
		if (conv->length_mod != LENGTH_NONE) {
   27650:	7853      	ldrb	r3, [r2, #1]
   27652:	f013 0f78 	tst.w	r3, #120	; 0x78
   27656:	d1d9      	bne.n	2760c <extract_specifier+0xd2>
	bool unsupported = false;
   27658:	4671      	mov	r1, lr
   2765a:	e7d7      	b.n	2760c <extract_specifier+0xd2>

0002765c <extract_conversion>:
{
   2765c:	b510      	push	{r4, lr}
   2765e:	4604      	mov	r4, r0
   27660:	4608      	mov	r0, r1
	*conv = (struct conversion) {
   27662:	2300      	movs	r3, #0
   27664:	6023      	str	r3, [r4, #0]
   27666:	6063      	str	r3, [r4, #4]
   27668:	60a3      	str	r3, [r4, #8]
	if (*sp == '%') {
   2766a:	784b      	ldrb	r3, [r1, #1]
   2766c:	2b25      	cmp	r3, #37	; 0x25
   2766e:	d014      	beq.n	2769a <extract_conversion+0x3e>
   27670:	3101      	adds	r1, #1
	sp = extract_flags(conv, sp);
   27672:	4620      	mov	r0, r4
   27674:	f7ed fed8 	bl	15428 <extract_flags>
   27678:	4601      	mov	r1, r0
	sp = extract_width(conv, sp);
   2767a:	4620      	mov	r0, r4
   2767c:	f7ff fe95 	bl	273aa <extract_width>
   27680:	4601      	mov	r1, r0
	sp = extract_prec(conv, sp);
   27682:	4620      	mov	r0, r4
   27684:	f7ff fec0 	bl	27408 <extract_prec>
   27688:	4601      	mov	r1, r0
	sp = extract_length(conv, sp);
   2768a:	4620      	mov	r0, r4
   2768c:	f7ff feee 	bl	2746c <extract_length>
   27690:	4601      	mov	r1, r0
	sp = extract_specifier(conv, sp);
   27692:	4620      	mov	r0, r4
   27694:	f7ff ff51 	bl	2753a <extract_specifier>
}
   27698:	bd10      	pop	{r4, pc}
		conv->specifier = *sp++;
   2769a:	3002      	adds	r0, #2
   2769c:	70e3      	strb	r3, [r4, #3]
		return sp;
   2769e:	e7fb      	b.n	27698 <extract_conversion+0x3c>

000276a0 <conversion_radix>:
	switch (specifier) {
   276a0:	286f      	cmp	r0, #111	; 0x6f
   276a2:	d00c      	beq.n	276be <conversion_radix+0x1e>
   276a4:	d905      	bls.n	276b2 <conversion_radix+0x12>
   276a6:	2870      	cmp	r0, #112	; 0x70
   276a8:	d00b      	beq.n	276c2 <conversion_radix+0x22>
   276aa:	2878      	cmp	r0, #120	; 0x78
   276ac:	d10b      	bne.n	276c6 <conversion_radix+0x26>
		return 16;
   276ae:	2010      	movs	r0, #16
   276b0:	4770      	bx	lr
	switch (specifier) {
   276b2:	2858      	cmp	r0, #88	; 0x58
   276b4:	d001      	beq.n	276ba <conversion_radix+0x1a>
   276b6:	200a      	movs	r0, #10
   276b8:	4770      	bx	lr
		return 16;
   276ba:	2010      	movs	r0, #16
   276bc:	4770      	bx	lr
		return 8;
   276be:	2008      	movs	r0, #8
   276c0:	4770      	bx	lr
		return 16;
   276c2:	2010      	movs	r0, #16
   276c4:	4770      	bx	lr
	switch (specifier) {
   276c6:	200a      	movs	r0, #10
}
   276c8:	4770      	bx	lr

000276ca <encode_uint>:
{
   276ca:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   276ce:	4605      	mov	r5, r0
   276d0:	460c      	mov	r4, r1
   276d2:	4693      	mov	fp, r2
   276d4:	4699      	mov	r9, r3
   276d6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
	bool upcase = isupper((int)conv->specifier);
   276d8:	78d0      	ldrb	r0, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   276da:	f1a0 0a41 	sub.w	sl, r0, #65	; 0x41
	const unsigned int radix = conversion_radix(conv->specifier);
   276de:	f7ff ffdf 	bl	276a0 <conversion_radix>
   276e2:	4606      	mov	r6, r0
	char *bp = bps + (bpe - bps);
   276e4:	e015      	b.n	27712 <encode_uint+0x48>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   276e6:	f1ba 0f19 	cmp.w	sl, #25
   276ea:	d820      	bhi.n	2772e <encode_uint+0x64>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   276ec:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   276ee:	3237      	adds	r2, #55	; 0x37
   276f0:	b2d2      	uxtb	r2, r2
   276f2:	f807 2d01 	strb.w	r2, [r7, #-1]!
		value /= radix;
   276f6:	4632      	mov	r2, r6
   276f8:	4643      	mov	r3, r8
   276fa:	4628      	mov	r0, r5
   276fc:	4621      	mov	r1, r4
   276fe:	f7d8 fcff 	bl	100 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
   27702:	42b5      	cmp	r5, r6
   27704:	f174 0400 	sbcs.w	r4, r4, #0
   27708:	d315      	bcc.n	27736 <encode_uint+0x6c>
   2770a:	454f      	cmp	r7, r9
   2770c:	d913      	bls.n	27736 <encode_uint+0x6c>
		value /= radix;
   2770e:	4605      	mov	r5, r0
   27710:	460c      	mov	r4, r1
		unsigned int lsv = (unsigned int)(value % radix);
   27712:	f04f 0800 	mov.w	r8, #0
   27716:	4632      	mov	r2, r6
   27718:	4643      	mov	r3, r8
   2771a:	4628      	mov	r0, r5
   2771c:	4621      	mov	r1, r4
   2771e:	f7d8 fcef 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   27722:	2a09      	cmp	r2, #9
   27724:	d8df      	bhi.n	276e6 <encode_uint+0x1c>
   27726:	b2d2      	uxtb	r2, r2
   27728:	3230      	adds	r2, #48	; 0x30
   2772a:	b2d2      	uxtb	r2, r2
   2772c:	e7e1      	b.n	276f2 <encode_uint+0x28>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   2772e:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   27730:	3257      	adds	r2, #87	; 0x57
   27732:	b2d2      	uxtb	r2, r2
   27734:	e7dd      	b.n	276f2 <encode_uint+0x28>
	if (conv->flag_hash) {
   27736:	f89b 3000 	ldrb.w	r3, [fp]
   2773a:	f013 0f20 	tst.w	r3, #32
   2773e:	d003      	beq.n	27748 <encode_uint+0x7e>
		if (radix == 8) {
   27740:	2e08      	cmp	r6, #8
   27742:	d004      	beq.n	2774e <encode_uint+0x84>
		} else if (radix == 16) {
   27744:	2e10      	cmp	r6, #16
   27746:	d009      	beq.n	2775c <encode_uint+0x92>
}
   27748:	4638      	mov	r0, r7
   2774a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
   2774e:	f89b 3002 	ldrb.w	r3, [fp, #2]
   27752:	f043 0308 	orr.w	r3, r3, #8
   27756:	f88b 3002 	strb.w	r3, [fp, #2]
   2775a:	e7f5      	b.n	27748 <encode_uint+0x7e>
			conv->altform_0c = true;
   2775c:	f89b 3002 	ldrb.w	r3, [fp, #2]
   27760:	f043 0310 	orr.w	r3, r3, #16
   27764:	f88b 3002 	strb.w	r3, [fp, #2]
   27768:	e7ee      	b.n	27748 <encode_uint+0x7e>

0002776a <store_count>:
	switch ((enum length_mod_enum)conv->length_mod) {
   2776a:	7843      	ldrb	r3, [r0, #1]
   2776c:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   27770:	2b07      	cmp	r3, #7
   27772:	d818      	bhi.n	277a6 <store_count+0x3c>
   27774:	e8df f003 	tbb	[pc, r3]
   27778:	0a080604 	.word	0x0a080604
   2777c:	1614100c 	.word	0x1614100c
		*(int *)dp = count;
   27780:	600a      	str	r2, [r1, #0]
		break;
   27782:	4770      	bx	lr
		*(signed char *)dp = (signed char)count;
   27784:	700a      	strb	r2, [r1, #0]
		break;
   27786:	4770      	bx	lr
		*(short *)dp = (short)count;
   27788:	800a      	strh	r2, [r1, #0]
		break;
   2778a:	4770      	bx	lr
		*(long *)dp = (long)count;
   2778c:	600a      	str	r2, [r1, #0]
		break;
   2778e:	4770      	bx	lr
		*(long long *)dp = (long long)count;
   27790:	17d3      	asrs	r3, r2, #31
   27792:	600a      	str	r2, [r1, #0]
   27794:	604b      	str	r3, [r1, #4]
		break;
   27796:	4770      	bx	lr
		*(intmax_t *)dp = (intmax_t)count;
   27798:	17d3      	asrs	r3, r2, #31
   2779a:	600a      	str	r2, [r1, #0]
   2779c:	604b      	str	r3, [r1, #4]
		break;
   2779e:	4770      	bx	lr
		*(size_t *)dp = (size_t)count;
   277a0:	600a      	str	r2, [r1, #0]
		break;
   277a2:	4770      	bx	lr
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   277a4:	600a      	str	r2, [r1, #0]
}
   277a6:	4770      	bx	lr

000277a8 <outs>:
{
   277a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   277ac:	4607      	mov	r7, r0
   277ae:	460e      	mov	r6, r1
   277b0:	4614      	mov	r4, r2
   277b2:	4698      	mov	r8, r3
	size_t count = 0;
   277b4:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   277b6:	e006      	b.n	277c6 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
   277b8:	4631      	mov	r1, r6
   277ba:	f814 0b01 	ldrb.w	r0, [r4], #1
   277be:	47b8      	blx	r7
		if (rc < 0) {
   277c0:	2800      	cmp	r0, #0
   277c2:	db09      	blt.n	277d8 <outs+0x30>
		++count;
   277c4:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   277c6:	4544      	cmp	r4, r8
   277c8:	d3f6      	bcc.n	277b8 <outs+0x10>
   277ca:	f1b8 0f00 	cmp.w	r8, #0
   277ce:	d102      	bne.n	277d6 <outs+0x2e>
   277d0:	7823      	ldrb	r3, [r4, #0]
   277d2:	2b00      	cmp	r3, #0
   277d4:	d1f0      	bne.n	277b8 <outs+0x10>
	return (int)count;
   277d6:	4628      	mov	r0, r5
}
   277d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000277dc <assert_print>:

	k_panic();
}

void assert_print(const char *fmt, ...)
{
   277dc:	b40f      	push	{r0, r1, r2, r3}
   277de:	b500      	push	{lr}
   277e0:	b083      	sub	sp, #12
   277e2:	a904      	add	r1, sp, #16
   277e4:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   277e8:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   277ea:	f7ff fa05 	bl	26bf8 <vprintk>

	va_end(ap);
}
   277ee:	b003      	add	sp, #12
   277f0:	f85d eb04 	ldr.w	lr, [sp], #4
   277f4:	b004      	add	sp, #16
   277f6:	4770      	bx	lr

000277f8 <free_space>:
	ARG_UNUSED(err);
}

static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
   277f8:	68c3      	ldr	r3, [r0, #12]
   277fa:	6802      	ldr	r2, [r0, #0]
   277fc:	4293      	cmp	r3, r2
   277fe:	d805      	bhi.n	2780c <free_space+0x14>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;

		return false;
	} else if (!buffer->rd_idx) {
   27800:	b14b      	cbz	r3, 27816 <free_space+0x1e>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
		return false;
	}

	*res = buffer->size - buffer->tmp_wr_idx;
   27802:	6a03      	ldr	r3, [r0, #32]
   27804:	1a9b      	subs	r3, r3, r2
   27806:	600b      	str	r3, [r1, #0]

	return true;
   27808:	2001      	movs	r0, #1
}
   2780a:	4770      	bx	lr
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
   2780c:	1a9b      	subs	r3, r3, r2
   2780e:	3b01      	subs	r3, #1
   27810:	600b      	str	r3, [r1, #0]
		return false;
   27812:	2000      	movs	r0, #0
   27814:	4770      	bx	lr
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   27816:	6a03      	ldr	r3, [r0, #32]
   27818:	1a9b      	subs	r3, r3, r2
   2781a:	3b01      	subs	r3, #1
   2781c:	600b      	str	r3, [r1, #0]
		return false;
   2781e:	2000      	movs	r0, #0
   27820:	4770      	bx	lr

00027822 <get_usage>:

	return true;
}

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
   27822:	b510      	push	{r4, lr}
   27824:	b082      	sub	sp, #8
   27826:	4604      	mov	r4, r0
	uint32_t f;

	if (free_space(buffer, &f)) {
   27828:	a901      	add	r1, sp, #4
   2782a:	f7ff ffe5 	bl	277f8 <free_space>
   2782e:	b120      	cbz	r0, 2783a <get_usage+0x18>
		f += (buffer->rd_idx - 1);
   27830:	68e3      	ldr	r3, [r4, #12]
   27832:	9a01      	ldr	r2, [sp, #4]
   27834:	4413      	add	r3, r2
   27836:	3b01      	subs	r3, #1
   27838:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
   2783a:	6a20      	ldr	r0, [r4, #32]
   2783c:	9b01      	ldr	r3, [sp, #4]
   2783e:	1ac0      	subs	r0, r0, r3
}
   27840:	3801      	subs	r0, #1
   27842:	b002      	add	sp, #8
   27844:	bd10      	pop	{r4, pc}

00027846 <max_utilization_update>:

static inline void max_utilization_update(struct mpsc_pbuf_buffer *buffer)
{
   27846:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   27848:	6903      	ldr	r3, [r0, #16]
   2784a:	f013 0f04 	tst.w	r3, #4
   2784e:	d100      	bne.n	27852 <max_utilization_update+0xc>
		return;
	}

	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
}
   27850:	bd38      	pop	{r3, r4, r5, pc}
   27852:	4604      	mov	r4, r0
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
   27854:	6a45      	ldr	r5, [r0, #36]	; 0x24
   27856:	f7ff ffe4 	bl	27822 <get_usage>
   2785a:	4285      	cmp	r5, r0
   2785c:	d902      	bls.n	27864 <max_utilization_update+0x1e>
   2785e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   27860:	6260      	str	r0, [r4, #36]	; 0x24
   27862:	e7f5      	b.n	27850 <max_utilization_update+0xa>
   27864:	4620      	mov	r0, r4
   27866:	f7ff ffdc 	bl	27822 <get_usage>
   2786a:	e7f9      	b.n	27860 <max_utilization_update+0x1a>

0002786c <add_skip_item>:

	return 0;
}

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
   2786c:	b410      	push	{r4}
	union mpsc_pbuf_generic skip = {
   2786e:	2300      	movs	r3, #0
   27870:	f36f 0300 	bfc	r3, #0, #1
   27874:	f043 0302 	orr.w	r3, r3, #2
   27878:	f361 039f 	bfi	r3, r1, #2, #30
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   2787c:	69c2      	ldr	r2, [r0, #28]
   2787e:	6804      	ldr	r4, [r0, #0]
   27880:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   27884:	6803      	ldr	r3, [r0, #0]
	uint32_t i = idx + val;
   27886:	440b      	add	r3, r1
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   27888:	6902      	ldr	r2, [r0, #16]
   2788a:	f012 0201 	ands.w	r2, r2, #1
   2788e:	d104      	bne.n	2789a <add_skip_item+0x2e>
	return (i >= buffer->size) ? i - buffer->size : i;
   27890:	6a04      	ldr	r4, [r0, #32]
   27892:	42a3      	cmp	r3, r4
   27894:	d304      	bcc.n	278a0 <add_skip_item+0x34>
   27896:	1b1b      	subs	r3, r3, r4
   27898:	e002      	b.n	278a0 <add_skip_item+0x34>
		return i & (buffer->size - 1);
   2789a:	6a04      	ldr	r4, [r0, #32]
   2789c:	3c01      	subs	r4, #1
   2789e:	4023      	ands	r3, r4
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   278a0:	6003      	str	r3, [r0, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   278a2:	6843      	ldr	r3, [r0, #4]
	uint32_t i = idx + val;
   278a4:	4419      	add	r1, r3
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   278a6:	b922      	cbnz	r2, 278b2 <add_skip_item+0x46>
	return (i >= buffer->size) ? i - buffer->size : i;
   278a8:	6a03      	ldr	r3, [r0, #32]
   278aa:	4299      	cmp	r1, r3
   278ac:	d304      	bcc.n	278b8 <add_skip_item+0x4c>
   278ae:	1ac9      	subs	r1, r1, r3
   278b0:	e002      	b.n	278b8 <add_skip_item+0x4c>
		return i & (buffer->size - 1);
   278b2:	6a03      	ldr	r3, [r0, #32]
   278b4:	3b01      	subs	r3, #1
   278b6:	4019      	ands	r1, r3
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   278b8:	6041      	str	r1, [r0, #4]
}
   278ba:	bc10      	pop	{r4}
   278bc:	4770      	bx	lr

000278be <drop_item_locked>:
 */
static union mpsc_pbuf_generic *drop_item_locked(struct mpsc_pbuf_buffer *buffer,
						 uint32_t free_wlen,
						 bool allow_drop,
						 bool *user_packet)
{
   278be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   278c2:	b083      	sub	sp, #12
   278c4:	4604      	mov	r4, r0
   278c6:	9101      	str	r1, [sp, #4]
   278c8:	4615      	mov	r5, r2
   278ca:	461e      	mov	r6, r3
	union mpsc_pbuf_generic *item;
	uint32_t rd_wlen;
	uint32_t skip_wlen;

	*user_packet = false;
   278cc:	2300      	movs	r3, #0
   278ce:	7033      	strb	r3, [r6, #0]
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   278d0:	f8d0 801c 	ldr.w	r8, [r0, #28]
   278d4:	f8d0 900c 	ldr.w	r9, [r0, #12]
   278d8:	eb08 0a89 	add.w	sl, r8, r9, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   278dc:	f818 3029 	ldrb.w	r3, [r8, r9, lsl #2]
   278e0:	f003 0303 	and.w	r3, r3, #3
   278e4:	2b02      	cmp	r3, #2
   278e6:	d012      	beq.n	2790e <drop_item_locked+0x50>
	return 0;
   278e8:	f04f 0b00 	mov.w	fp, #0
	skip_wlen = get_skip(item);

	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
   278ec:	69a3      	ldr	r3, [r4, #24]
   278ee:	4650      	mov	r0, sl
   278f0:	4798      	blx	r3
   278f2:	4607      	mov	r7, r0
	if (skip_wlen) {
   278f4:	f1bb 0f00 	cmp.w	fp, #0
   278f8:	d152      	bne.n	279a0 <drop_item_locked+0xe2>
		allow_drop = true;
	} else if (allow_drop) {
   278fa:	2d00      	cmp	r5, #0
   278fc:	d05d      	beq.n	279ba <drop_item_locked+0xfc>
		if (item->hdr.busy) {
   278fe:	f818 3029 	ldrb.w	r3, [r8, r9, lsl #2]
   27902:	f013 0f02 	tst.w	r3, #2
   27906:	d10a      	bne.n	2791e <drop_item_locked+0x60>
			} else {
				rd_wlen += buffer->get_wlen(item);
				*user_packet = true;
			}
		} else {
			*user_packet = true;
   27908:	2301      	movs	r3, #1
   2790a:	7033      	strb	r3, [r6, #0]
   2790c:	e049      	b.n	279a2 <drop_item_locked+0xe4>
		return item->skip.len;
   2790e:	f858 3029 	ldr.w	r3, [r8, r9, lsl #2]
	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
   27912:	ea5f 0b93 	movs.w	fp, r3, lsr #2
   27916:	d0e9      	beq.n	278ec <drop_item_locked+0x2e>
		return item->skip.len;
   27918:	465f      	mov	r7, fp
		allow_drop = true;
   2791a:	2501      	movs	r5, #1
   2791c:	e041      	b.n	279a2 <drop_item_locked+0xe4>
			add_skip_item(buffer, free_wlen + 1);
   2791e:	9901      	ldr	r1, [sp, #4]
   27920:	3101      	adds	r1, #1
   27922:	4620      	mov	r0, r4
   27924:	f7ff ffa2 	bl	2786c <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   27928:	6863      	ldr	r3, [r4, #4]
	uint32_t i = idx + val;
   2792a:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   2792c:	6922      	ldr	r2, [r4, #16]
   2792e:	f012 0201 	ands.w	r2, r2, #1
   27932:	d104      	bne.n	2793e <drop_item_locked+0x80>
	return (i >= buffer->size) ? i - buffer->size : i;
   27934:	6a21      	ldr	r1, [r4, #32]
   27936:	428b      	cmp	r3, r1
   27938:	d304      	bcc.n	27944 <drop_item_locked+0x86>
   2793a:	1a5b      	subs	r3, r3, r1
   2793c:	e002      	b.n	27944 <drop_item_locked+0x86>
		return i & (buffer->size - 1);
   2793e:	6a21      	ldr	r1, [r4, #32]
   27940:	3901      	subs	r1, #1
   27942:	400b      	ands	r3, r1
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   27944:	6063      	str	r3, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   27946:	6823      	ldr	r3, [r4, #0]
	uint32_t i = idx + val;
   27948:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   2794a:	b922      	cbnz	r2, 27956 <drop_item_locked+0x98>
	return (i >= buffer->size) ? i - buffer->size : i;
   2794c:	6a21      	ldr	r1, [r4, #32]
   2794e:	428b      	cmp	r3, r1
   27950:	d304      	bcc.n	2795c <drop_item_locked+0x9e>
   27952:	1a5b      	subs	r3, r3, r1
   27954:	e002      	b.n	2795c <drop_item_locked+0x9e>
		return i & (buffer->size - 1);
   27956:	6a21      	ldr	r1, [r4, #32]
   27958:	3901      	subs	r1, #1
   2795a:	400b      	ands	r3, r1
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   2795c:	6023      	str	r3, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   2795e:	68e3      	ldr	r3, [r4, #12]
	uint32_t i = idx + val;
   27960:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   27962:	b922      	cbnz	r2, 2796e <drop_item_locked+0xb0>
	return (i >= buffer->size) ? i - buffer->size : i;
   27964:	6a22      	ldr	r2, [r4, #32]
   27966:	4293      	cmp	r3, r2
   27968:	d304      	bcc.n	27974 <drop_item_locked+0xb6>
   2796a:	1a9b      	subs	r3, r3, r2
   2796c:	e002      	b.n	27974 <drop_item_locked+0xb6>
		return i & (buffer->size - 1);
   2796e:	6a22      	ldr	r2, [r4, #32]
   27970:	3a01      	subs	r2, #1
   27972:	4013      	ands	r3, r2
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   27974:	69e1      	ldr	r1, [r4, #28]
   27976:	eb01 0a83 	add.w	sl, r1, r3, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   2797a:	f811 2023 	ldrb.w	r2, [r1, r3, lsl #2]
   2797e:	f002 0203 	and.w	r2, r2, #3
   27982:	2a02      	cmp	r2, #2
   27984:	d006      	beq.n	27994 <drop_item_locked+0xd6>
				rd_wlen += buffer->get_wlen(item);
   27986:	69a3      	ldr	r3, [r4, #24]
   27988:	4650      	mov	r0, sl
   2798a:	4798      	blx	r3
   2798c:	4407      	add	r7, r0
				*user_packet = true;
   2798e:	2301      	movs	r3, #1
   27990:	7033      	strb	r3, [r6, #0]
   27992:	e006      	b.n	279a2 <drop_item_locked+0xe4>
		return item->skip.len;
   27994:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
			if (skip_wlen) {
   27998:	089b      	lsrs	r3, r3, #2
   2799a:	d0f4      	beq.n	27986 <drop_item_locked+0xc8>
				rd_wlen += skip_wlen;
   2799c:	441f      	add	r7, r3
   2799e:	e000      	b.n	279a2 <drop_item_locked+0xe4>
		allow_drop = true;
   279a0:	2501      	movs	r5, #1
		}
	} else {
		item = NULL;
	}

	if (allow_drop) {
   279a2:	b195      	cbz	r5, 279ca <drop_item_locked+0x10c>
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   279a4:	68e3      	ldr	r3, [r4, #12]
	uint32_t i = idx + val;
   279a6:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   279a8:	6922      	ldr	r2, [r4, #16]
   279aa:	f012 0f01 	tst.w	r2, #1
   279ae:	d107      	bne.n	279c0 <drop_item_locked+0x102>
	return (i >= buffer->size) ? i - buffer->size : i;
   279b0:	6a22      	ldr	r2, [r4, #32]
   279b2:	4293      	cmp	r3, r2
   279b4:	d307      	bcc.n	279c6 <drop_item_locked+0x108>
   279b6:	1a9b      	subs	r3, r3, r2
   279b8:	e005      	b.n	279c6 <drop_item_locked+0x108>
		item = NULL;
   279ba:	f04f 0a00 	mov.w	sl, #0
   279be:	e7f0      	b.n	279a2 <drop_item_locked+0xe4>
		return i & (buffer->size - 1);
   279c0:	6a22      	ldr	r2, [r4, #32]
   279c2:	3a01      	subs	r2, #1
   279c4:	4013      	ands	r3, r2
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   279c6:	60e3      	str	r3, [r4, #12]
		buffer->tmp_rd_idx = buffer->rd_idx;
   279c8:	60a3      	str	r3, [r4, #8]
	}

	return item;
}
   279ca:	4650      	mov	r0, sl
   279cc:	b003      	add	sp, #12
   279ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000279d2 <mpsc_pbuf_init>:
{
   279d2:	b538      	push	{r3, r4, r5, lr}
   279d4:	4604      	mov	r4, r0
   279d6:	460d      	mov	r5, r1
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
   279d8:	221c      	movs	r2, #28
   279da:	2100      	movs	r1, #0
   279dc:	f000 fe80 	bl	286e0 <memset>
	buffer->get_wlen = cfg->get_wlen;
   279e0:	68eb      	ldr	r3, [r5, #12]
   279e2:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
   279e4:	68ab      	ldr	r3, [r5, #8]
   279e6:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
   279e8:	682b      	ldr	r3, [r5, #0]
   279ea:	61e3      	str	r3, [r4, #28]
	buffer->size = cfg->size;
   279ec:	686b      	ldr	r3, [r5, #4]
   279ee:	6223      	str	r3, [r4, #32]
	buffer->max_usage = 0;
   279f0:	2200      	movs	r2, #0
   279f2:	6262      	str	r2, [r4, #36]	; 0x24
	buffer->flags = cfg->flags;
   279f4:	692a      	ldr	r2, [r5, #16]
   279f6:	6122      	str	r2, [r4, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
   279f8:	b12b      	cbz	r3, 27a06 <mpsc_pbuf_init+0x34>
   279fa:	1e59      	subs	r1, r3, #1
   279fc:	420b      	tst	r3, r1
   279fe:	d102      	bne.n	27a06 <mpsc_pbuf_init+0x34>
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
   27a00:	f042 0201 	orr.w	r2, r2, #1
   27a04:	6122      	str	r2, [r4, #16]
	err = k_sem_init(&buffer->sem, 0, 1);
   27a06:	f104 0028 	add.w	r0, r4, #40	; 0x28
	return z_impl_k_sem_init(sem, initial_count, limit);
   27a0a:	2201      	movs	r2, #1
   27a0c:	2100      	movs	r1, #0
   27a0e:	f005 fa9a 	bl	2cf46 <z_impl_k_sem_init>
}
   27a12:	bd38      	pop	{r3, r4, r5, pc}

00027a14 <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
   27a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27a18:	b085      	sub	sp, #20
   27a1a:	469a      	mov	sl, r3
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
   27a1c:	6a03      	ldr	r3, [r0, #32]
   27a1e:	3b01      	subs	r3, #1
   27a20:	428b      	cmp	r3, r1
   27a22:	d37f      	bcc.n	27b24 <mpsc_pbuf_alloc+0x110>
   27a24:	4605      	mov	r5, r0
   27a26:	460f      	mov	r7, r1
   27a28:	4691      	mov	r9, r2
	union mpsc_pbuf_generic *dropped_item = NULL;
   27a2a:	f04f 0800 	mov.w	r8, #0
	union mpsc_pbuf_generic *item = NULL;
   27a2e:	46c3      	mov	fp, r8
   27a30:	e019      	b.n	27a66 <mpsc_pbuf_alloc+0x52>
		return i & (buffer->size - 1);
   27a32:	6a2a      	ldr	r2, [r5, #32]
   27a34:	3a01      	subs	r2, #1
   27a36:	4013      	ands	r3, r2
		if (free_wlen >= wlen) {
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
			item->hdr.valid = 0;
			item->hdr.busy = 0;
			buffer->tmp_wr_idx = idx_inc(buffer,
   27a38:	602b      	str	r3, [r5, #0]
		cont = false;
   27a3a:	2400      	movs	r4, #0
   27a3c:	f386 8811 	msr	BASEPRI, r6
   27a40:	f3bf 8f6f 	isb	sy
			cont = dropped_item != NULL;
		}

		k_spin_unlock(&buffer->lock, key);

		if (cont && dropped_item && valid_drop) {
   27a44:	b16c      	cbz	r4, 27a62 <mpsc_pbuf_alloc+0x4e>
   27a46:	f1b8 0f00 	cmp.w	r8, #0
   27a4a:	d00a      	beq.n	27a62 <mpsc_pbuf_alloc+0x4e>
   27a4c:	f89d 300b 	ldrb.w	r3, [sp, #11]
   27a50:	b13b      	cbz	r3, 27a62 <mpsc_pbuf_alloc+0x4e>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
   27a52:	696b      	ldr	r3, [r5, #20]
   27a54:	2b00      	cmp	r3, #0
   27a56:	d062      	beq.n	27b1e <mpsc_pbuf_alloc+0x10a>
				buffer->notify_drop(buffer, dropped_item);
   27a58:	4641      	mov	r1, r8
   27a5a:	4628      	mov	r0, r5
   27a5c:	4798      	blx	r3
			}
			dropped_item = NULL;
   27a5e:	f04f 0800 	mov.w	r8, #0
		}
	} while (cont);
   27a62:	2c00      	cmp	r4, #0
   27a64:	d060      	beq.n	27b28 <mpsc_pbuf_alloc+0x114>
	__asm__ volatile(
   27a66:	f04f 0340 	mov.w	r3, #64	; 0x40
   27a6a:	f3ef 8611 	mrs	r6, BASEPRI
   27a6e:	f383 8812 	msr	BASEPRI_MAX, r3
   27a72:	f3bf 8f6f 	isb	sy
   27a76:	9601      	str	r6, [sp, #4]
		wrap = free_space(buffer, &free_wlen);
   27a78:	a903      	add	r1, sp, #12
   27a7a:	4628      	mov	r0, r5
   27a7c:	f7ff febc 	bl	277f8 <free_space>
   27a80:	4604      	mov	r4, r0
		if (free_wlen >= wlen) {
   27a82:	9903      	ldr	r1, [sp, #12]
   27a84:	42b9      	cmp	r1, r7
   27a86:	d319      	bcc.n	27abc <mpsc_pbuf_alloc+0xa8>
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
   27a88:	69eb      	ldr	r3, [r5, #28]
   27a8a:	682a      	ldr	r2, [r5, #0]
			item =
   27a8c:	eb03 0b82 	add.w	fp, r3, r2, lsl #2
			item->hdr.valid = 0;
   27a90:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
   27a94:	f36f 0100 	bfc	r1, #0, #1
   27a98:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			item->hdr.busy = 0;
   27a9c:	b2c9      	uxtb	r1, r1
   27a9e:	f36f 0141 	bfc	r1, #1, #1
   27aa2:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			buffer->tmp_wr_idx = idx_inc(buffer,
   27aa6:	682b      	ldr	r3, [r5, #0]
	uint32_t i = idx + val;
   27aa8:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   27aaa:	692a      	ldr	r2, [r5, #16]
   27aac:	f012 0f01 	tst.w	r2, #1
   27ab0:	d1bf      	bne.n	27a32 <mpsc_pbuf_alloc+0x1e>
	return (i >= buffer->size) ? i - buffer->size : i;
   27ab2:	6a2a      	ldr	r2, [r5, #32]
   27ab4:	4293      	cmp	r3, r2
   27ab6:	d3bf      	bcc.n	27a38 <mpsc_pbuf_alloc+0x24>
   27ab8:	1a9b      	subs	r3, r3, r2
   27aba:	e7bd      	b.n	27a38 <mpsc_pbuf_alloc+0x24>
		} else if (wrap) {
   27abc:	b9a0      	cbnz	r0, 27ae8 <mpsc_pbuf_alloc+0xd4>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   27abe:	ea5a 0309 	orrs.w	r3, sl, r9
   27ac2:	d003      	beq.n	27acc <mpsc_pbuf_alloc+0xb8>
			   !k_is_in_isr()) {
   27ac4:	f005 f92d 	bl	2cd22 <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   27ac8:	4604      	mov	r4, r0
   27aca:	b188      	cbz	r0, 27af0 <mpsc_pbuf_alloc+0xdc>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
   27acc:	692a      	ldr	r2, [r5, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
   27ace:	f10d 030b 	add.w	r3, sp, #11
   27ad2:	f3c2 0240 	ubfx	r2, r2, #1, #1
   27ad6:	9903      	ldr	r1, [sp, #12]
   27ad8:	4628      	mov	r0, r5
   27ada:	f7ff fef0 	bl	278be <drop_item_locked>
			cont = dropped_item != NULL;
   27ade:	4680      	mov	r8, r0
   27ae0:	1e04      	subs	r4, r0, #0
   27ae2:	bf18      	it	ne
   27ae4:	2401      	movne	r4, #1
   27ae6:	e7a9      	b.n	27a3c <mpsc_pbuf_alloc+0x28>
			add_skip_item(buffer, free_wlen);
   27ae8:	4628      	mov	r0, r5
   27aea:	f7ff febf 	bl	2786c <add_skip_item>
			cont = true;
   27aee:	e7a5      	b.n	27a3c <mpsc_pbuf_alloc+0x28>
	__asm__ volatile(
   27af0:	9b01      	ldr	r3, [sp, #4]
   27af2:	f383 8811 	msr	BASEPRI, r3
   27af6:	f3bf 8f6f 	isb	sy
			err = k_sem_take(&buffer->sem, timeout);
   27afa:	f105 0028 	add.w	r0, r5, #40	; 0x28
	return z_impl_k_sem_take(sem, timeout);
   27afe:	464a      	mov	r2, r9
   27b00:	4653      	mov	r3, sl
   27b02:	f7fd fb8d 	bl	25220 <z_impl_k_sem_take>
	__asm__ volatile(
   27b06:	f04f 0340 	mov.w	r3, #64	; 0x40
   27b0a:	f3ef 8611 	mrs	r6, BASEPRI
   27b0e:	f383 8812 	msr	BASEPRI_MAX, r3
   27b12:	f3bf 8f6f 	isb	sy
			if (err == 0) {
   27b16:	2800      	cmp	r0, #0
   27b18:	d190      	bne.n	27a3c <mpsc_pbuf_alloc+0x28>
				cont = true;
   27b1a:	2401      	movs	r4, #1
   27b1c:	e78e      	b.n	27a3c <mpsc_pbuf_alloc+0x28>
			dropped_item = NULL;
   27b1e:	f04f 0800 	mov.w	r8, #0
   27b22:	e79e      	b.n	27a62 <mpsc_pbuf_alloc+0x4e>
		return NULL;
   27b24:	f04f 0b00 	mov.w	fp, #0
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
   27b28:	4658      	mov	r0, fp
   27b2a:	b005      	add	sp, #20
   27b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00027b30 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
   27b30:	b570      	push	{r4, r5, r6, lr}
   27b32:	4604      	mov	r4, r0
   27b34:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   27b36:	6983      	ldr	r3, [r0, #24]
   27b38:	4608      	mov	r0, r1
   27b3a:	4798      	blx	r3
   27b3c:	f04f 0340 	mov.w	r3, #64	; 0x40
   27b40:	f3ef 8611 	mrs	r6, BASEPRI
   27b44:	f383 8812 	msr	BASEPRI_MAX, r3
   27b48:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
   27b4c:	782b      	ldrb	r3, [r5, #0]
   27b4e:	f043 0301 	orr.w	r3, r3, #1
   27b52:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   27b54:	6863      	ldr	r3, [r4, #4]
	uint32_t i = idx + val;
   27b56:	4418      	add	r0, r3
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   27b58:	6923      	ldr	r3, [r4, #16]
   27b5a:	f013 0f01 	tst.w	r3, #1
   27b5e:	d104      	bne.n	27b6a <mpsc_pbuf_commit+0x3a>
	return (i >= buffer->size) ? i - buffer->size : i;
   27b60:	6a23      	ldr	r3, [r4, #32]
   27b62:	4298      	cmp	r0, r3
   27b64:	d304      	bcc.n	27b70 <mpsc_pbuf_commit+0x40>
   27b66:	1ac0      	subs	r0, r0, r3
   27b68:	e002      	b.n	27b70 <mpsc_pbuf_commit+0x40>
		return i & (buffer->size - 1);
   27b6a:	6a23      	ldr	r3, [r4, #32]
   27b6c:	3b01      	subs	r3, #1
   27b6e:	4018      	ands	r0, r3
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   27b70:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
   27b72:	4620      	mov	r0, r4
   27b74:	f7ff fe67 	bl	27846 <max_utilization_update>
	__asm__ volatile(
   27b78:	f386 8811 	msr	BASEPRI, r6
   27b7c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
   27b80:	bd70      	pop	{r4, r5, r6, pc}

00027b82 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
   27b82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27b84:	4604      	mov	r4, r0
   27b86:	e039      	b.n	27bfc <mpsc_pbuf_claim+0x7a>
		*res = (buffer->wr_idx - buffer->tmp_rd_idx);
   27b88:	1a9b      	subs	r3, r3, r2
		return false;
   27b8a:	e045      	b.n	27c18 <mpsc_pbuf_claim+0x96>
		return item->skip.len;
   27b8c:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
		if (!a || is_invalid(item)) {
			item = NULL;
		} else {
			uint32_t skip = get_skip(item);

			if (skip || !is_valid(item)) {
   27b90:	0880      	lsrs	r0, r0, #2
   27b92:	d157      	bne.n	27c44 <mpsc_pbuf_claim+0xc2>
   27b94:	e04d      	b.n	27c32 <mpsc_pbuf_claim+0xb0>
		return i & (buffer->size - 1);
   27b96:	6a21      	ldr	r1, [r4, #32]
   27b98:	3901      	subs	r1, #1
   27b9a:	400b      	ands	r3, r1
				uint32_t inc =
					skip ? skip : buffer->get_wlen(item);

				buffer->tmp_rd_idx =
   27b9c:	60a3      	str	r3, [r4, #8]
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
				buffer->rd_idx =
					idx_inc(buffer, buffer->rd_idx, inc);
   27b9e:	68e3      	ldr	r3, [r4, #12]
	uint32_t i = idx + val;
   27ba0:	4403      	add	r3, r0
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   27ba2:	b922      	cbnz	r2, 27bae <mpsc_pbuf_claim+0x2c>
	return (i >= buffer->size) ? i - buffer->size : i;
   27ba4:	6a22      	ldr	r2, [r4, #32]
   27ba6:	4293      	cmp	r3, r2
   27ba8:	d304      	bcc.n	27bb4 <mpsc_pbuf_claim+0x32>
   27baa:	1a9b      	subs	r3, r3, r2
   27bac:	e002      	b.n	27bb4 <mpsc_pbuf_claim+0x32>
		return i & (buffer->size - 1);
   27bae:	6a22      	ldr	r2, [r4, #32]
   27bb0:	3a01      	subs	r2, #1
   27bb2:	4013      	ands	r3, r2
				buffer->rd_idx =
   27bb4:	60e3      	str	r3, [r4, #12]
				cont = true;
   27bb6:	2301      	movs	r3, #1
			if (skip || !is_valid(item)) {
   27bb8:	e01b      	b.n	27bf2 <mpsc_pbuf_claim+0x70>
			} else {
				item->hdr.busy = 1;
   27bba:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
   27bbe:	f043 0302 	orr.w	r3, r3, #2
   27bc2:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
				buffer->tmp_rd_idx =
					idx_inc(buffer, buffer->tmp_rd_idx,
   27bc6:	68a7      	ldr	r7, [r4, #8]
						buffer->get_wlen(item));
   27bc8:	69a3      	ldr	r3, [r4, #24]
					idx_inc(buffer, buffer->tmp_rd_idx,
   27bca:	4630      	mov	r0, r6
   27bcc:	4798      	blx	r3
	uint32_t i = idx + val;
   27bce:	4438      	add	r0, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   27bd0:	6923      	ldr	r3, [r4, #16]
   27bd2:	f013 0f01 	tst.w	r3, #1
   27bd6:	d104      	bne.n	27be2 <mpsc_pbuf_claim+0x60>
	return (i >= buffer->size) ? i - buffer->size : i;
   27bd8:	6a23      	ldr	r3, [r4, #32]
   27bda:	4298      	cmp	r0, r3
   27bdc:	d304      	bcc.n	27be8 <mpsc_pbuf_claim+0x66>
   27bde:	1ac0      	subs	r0, r0, r3
   27be0:	e002      	b.n	27be8 <mpsc_pbuf_claim+0x66>
		return i & (buffer->size - 1);
   27be2:	6a23      	ldr	r3, [r4, #32]
   27be4:	3b01      	subs	r3, #1
   27be6:	4018      	ands	r0, r3
				buffer->tmp_rd_idx =
   27be8:	60a0      	str	r0, [r4, #8]
		cont = false;
   27bea:	2300      	movs	r3, #0
   27bec:	e001      	b.n	27bf2 <mpsc_pbuf_claim+0x70>
   27bee:	2300      	movs	r3, #0
			item = NULL;
   27bf0:	461e      	mov	r6, r3
   27bf2:	f385 8811 	msr	BASEPRI, r5
   27bf6:	f3bf 8f6f 	isb	sy

		if (!cont) {
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);
   27bfa:	b38b      	cbz	r3, 27c60 <mpsc_pbuf_claim+0xde>
	__asm__ volatile(
   27bfc:	f04f 0340 	mov.w	r3, #64	; 0x40
   27c00:	f3ef 8511 	mrs	r5, BASEPRI
   27c04:	f383 8812 	msr	BASEPRI_MAX, r3
   27c08:	f3bf 8f6f 	isb	sy
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   27c0c:	68a2      	ldr	r2, [r4, #8]
   27c0e:	6863      	ldr	r3, [r4, #4]
   27c10:	429a      	cmp	r2, r3
   27c12:	d9b9      	bls.n	27b88 <mpsc_pbuf_claim+0x6>
	*res = buffer->size - buffer->tmp_rd_idx;
   27c14:	6a23      	ldr	r3, [r4, #32]
   27c16:	1a9b      	subs	r3, r3, r2
			&buffer->buf[buffer->tmp_rd_idx];
   27c18:	69e1      	ldr	r1, [r4, #28]
		item = (union mpsc_pbuf_generic *)
   27c1a:	eb01 0682 	add.w	r6, r1, r2, lsl #2
		if (!a || is_invalid(item)) {
   27c1e:	2b00      	cmp	r3, #0
   27c20:	d0e5      	beq.n	27bee <mpsc_pbuf_claim+0x6c>
	return !item->hdr.valid && !item->hdr.busy;
   27c22:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
		if (!a || is_invalid(item)) {
   27c26:	f013 0303 	ands.w	r3, r3, #3
   27c2a:	d016      	beq.n	27c5a <mpsc_pbuf_claim+0xd8>
	if (item->hdr.busy && !item->hdr.valid) {
   27c2c:	2b02      	cmp	r3, #2
   27c2e:	d0ad      	beq.n	27b8c <mpsc_pbuf_claim+0xa>
	return 0;
   27c30:	2000      	movs	r0, #0
	return item->hdr.valid;
   27c32:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
			if (skip || !is_valid(item)) {
   27c36:	f013 0f01 	tst.w	r3, #1
   27c3a:	d1be      	bne.n	27bba <mpsc_pbuf_claim+0x38>
					skip ? skip : buffer->get_wlen(item);
   27c3c:	b910      	cbnz	r0, 27c44 <mpsc_pbuf_claim+0xc2>
   27c3e:	69a3      	ldr	r3, [r4, #24]
   27c40:	4630      	mov	r0, r6
   27c42:	4798      	blx	r3
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
   27c44:	68a3      	ldr	r3, [r4, #8]
	uint32_t i = idx + val;
   27c46:	4403      	add	r3, r0
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   27c48:	6922      	ldr	r2, [r4, #16]
   27c4a:	f012 0201 	ands.w	r2, r2, #1
   27c4e:	d1a2      	bne.n	27b96 <mpsc_pbuf_claim+0x14>
	return (i >= buffer->size) ? i - buffer->size : i;
   27c50:	6a21      	ldr	r1, [r4, #32]
   27c52:	428b      	cmp	r3, r1
   27c54:	d3a2      	bcc.n	27b9c <mpsc_pbuf_claim+0x1a>
   27c56:	1a5b      	subs	r3, r3, r1
   27c58:	e7a0      	b.n	27b9c <mpsc_pbuf_claim+0x1a>
		cont = false;
   27c5a:	2300      	movs	r3, #0
			item = NULL;
   27c5c:	461e      	mov	r6, r3
   27c5e:	e7c8      	b.n	27bf2 <mpsc_pbuf_claim+0x70>

	return item;
}
   27c60:	4630      	mov	r0, r6
   27c62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00027c64 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
   27c64:	b538      	push	{r3, r4, r5, lr}
   27c66:	4604      	mov	r4, r0
   27c68:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   27c6a:	6983      	ldr	r3, [r0, #24]
   27c6c:	4608      	mov	r0, r1
   27c6e:	4798      	blx	r3
   27c70:	f04f 0240 	mov.w	r2, #64	; 0x40
   27c74:	f3ef 8311 	mrs	r3, BASEPRI
   27c78:	f382 8812 	msr	BASEPRI_MAX, r2
   27c7c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
   27c80:	782a      	ldrb	r2, [r5, #0]
   27c82:	f36f 0200 	bfc	r2, #0, #1
   27c86:	702a      	strb	r2, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   27c88:	6922      	ldr	r2, [r4, #16]
   27c8a:	f012 0f02 	tst.w	r2, #2
   27c8e:	d00a      	beq.n	27ca6 <mpsc_pbuf_free+0x42>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
   27c90:	69e2      	ldr	r2, [r4, #28]
   27c92:	68e1      	ldr	r1, [r4, #12]
   27c94:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   27c98:	42aa      	cmp	r2, r5
   27c9a:	d004      	beq.n	27ca6 <mpsc_pbuf_free+0x42>
		witem->hdr.busy = 0;
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
	} else {
		witem->skip.len = wlen;
   27c9c:	682a      	ldr	r2, [r5, #0]
   27c9e:	f360 029f 	bfi	r2, r0, #2, #30
   27ca2:	602a      	str	r2, [r5, #0]
   27ca4:	e012      	b.n	27ccc <mpsc_pbuf_free+0x68>
		witem->hdr.busy = 0;
   27ca6:	782a      	ldrb	r2, [r5, #0]
   27ca8:	f36f 0241 	bfc	r2, #1, #1
   27cac:	702a      	strb	r2, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   27cae:	68e2      	ldr	r2, [r4, #12]
	uint32_t i = idx + val;
   27cb0:	4402      	add	r2, r0
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   27cb2:	6921      	ldr	r1, [r4, #16]
   27cb4:	f011 0f01 	tst.w	r1, #1
   27cb8:	d104      	bne.n	27cc4 <mpsc_pbuf_free+0x60>
	return (i >= buffer->size) ? i - buffer->size : i;
   27cba:	6a21      	ldr	r1, [r4, #32]
   27cbc:	428a      	cmp	r2, r1
   27cbe:	d304      	bcc.n	27cca <mpsc_pbuf_free+0x66>
   27cc0:	1a52      	subs	r2, r2, r1
   27cc2:	e002      	b.n	27cca <mpsc_pbuf_free+0x66>
		return i & (buffer->size - 1);
   27cc4:	6a21      	ldr	r1, [r4, #32]
   27cc6:	3901      	subs	r1, #1
   27cc8:	400a      	ands	r2, r1
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   27cca:	60e2      	str	r2, [r4, #12]
	__asm__ volatile(
   27ccc:	f383 8811 	msr	BASEPRI, r3
   27cd0:	f3bf 8f6f 	isb	sy
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
   27cd4:	f104 0028 	add.w	r0, r4, #40	; 0x28
	z_impl_k_sem_give(sem);
   27cd8:	f7fd fa7a 	bl	251d0 <z_impl_k_sem_give>
}
   27cdc:	bd38      	pop	{r3, r4, r5, pc}

00027cde <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   27cde:	6883      	ldr	r3, [r0, #8]
   27ce0:	6842      	ldr	r2, [r0, #4]
   27ce2:	4293      	cmp	r3, r2
   27ce4:	d905      	bls.n	27cf2 <mpsc_pbuf_is_pending+0x14>
	*res = buffer->size - buffer->tmp_rd_idx;
   27ce6:	6a00      	ldr	r0, [r0, #32]
   27ce8:	1ac0      	subs	r0, r0, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
   27cea:	3800      	subs	r0, #0
   27cec:	bf18      	it	ne
   27cee:	2001      	movne	r0, #1
   27cf0:	4770      	bx	lr
		*res = (buffer->wr_idx - buffer->tmp_rd_idx);
   27cf2:	1ad0      	subs	r0, r2, r3
		return false;
   27cf4:	e7f9      	b.n	27cea <mpsc_pbuf_is_pending+0xc>

00027cf6 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   27cf6:	4770      	bx	lr

00027cf8 <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
   27cf8:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
   27cfa:	f013 0f04 	tst.w	r3, #4
   27cfe:	d001      	beq.n	27d04 <log_msg_generic_get_wlen+0xc>
	return 0;
   27d00:	2000      	movs	r0, #0
}
   27d02:	4770      	bx	lr
		return log_msg_get_total_wlen(msg->hdr.desc);
   27d04:	6803      	ldr	r3, [r0, #0]
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   27d06:	f3c3 2049 	ubfx	r0, r3, #9, #10
   27d0a:	f3c3 43cb 	ubfx	r3, r3, #19, #12
   27d0e:	4418      	add	r0, r3
   27d10:	3017      	adds	r0, #23
   27d12:	f020 0007 	bic.w	r0, r0, #7
   27d16:	0880      	lsrs	r0, r0, #2
		return log_msg_get_total_wlen(msg->hdr.desc);
   27d18:	4770      	bx	lr

00027d1a <dummy_timestamp>:
}
   27d1a:	2000      	movs	r0, #0
   27d1c:	4770      	bx	lr

00027d1e <msg_filter_check>:
}
   27d1e:	2001      	movs	r0, #1
   27d20:	4770      	bx	lr

00027d22 <default_get_timestamp>:
{
   27d22:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   27d24:	f004 f96c 	bl	2c000 <sys_clock_cycle_get_32>
}
   27d28:	bd08      	pop	{r3, pc}

00027d2a <k_msleep>:
{
   27d2a:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   27d2c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   27d30:	17c1      	asrs	r1, r0, #31
   27d32:	03c9      	lsls	r1, r1, #15
   27d34:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   27d38:	03c0      	lsls	r0, r0, #15
   27d3a:	f240 33e7 	movw	r3, #999	; 0x3e7
   27d3e:	18c0      	adds	r0, r0, r3
   27d40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   27d44:	f04f 0300 	mov.w	r3, #0
   27d48:	f141 0100 	adc.w	r1, r1, #0
   27d4c:	f7d8 f9d8 	bl	100 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   27d50:	f7fd ff9a 	bl	25c88 <z_impl_k_sleep>
}
   27d54:	bd08      	pop	{r3, pc}

00027d56 <msg_alloc>:
{
   27d56:	b508      	push	{r3, lr}
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
   27d58:	2200      	movs	r2, #0
   27d5a:	2300      	movs	r3, #0
   27d5c:	f7ff fe5a 	bl	27a14 <mpsc_pbuf_alloc>
}
   27d60:	bd08      	pop	{r3, pc}

00027d62 <msg_free>:
{
   27d62:	b508      	push	{r3, lr}
	mpsc_pbuf_free(buffer, &msg->buf);
   27d64:	f7ff ff7e 	bl	27c64 <mpsc_pbuf_free>
}
   27d68:	bd08      	pop	{r3, pc}

00027d6a <msg_pending>:
{
   27d6a:	b508      	push	{r3, lr}
	return mpsc_pbuf_is_pending(buffer);
   27d6c:	f7ff ffb7 	bl	27cde <mpsc_pbuf_is_pending>
}
   27d70:	bd08      	pop	{r3, pc}

00027d72 <z_log_vprintk>:
{
   27d72:	b500      	push	{lr}
   27d74:	b085      	sub	sp, #20
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
   27d76:	9103      	str	r1, [sp, #12]
   27d78:	9002      	str	r0, [sp, #8]
   27d7a:	2000      	movs	r0, #0
   27d7c:	9001      	str	r0, [sp, #4]
   27d7e:	9000      	str	r0, [sp, #0]
   27d80:	4603      	mov	r3, r0
   27d82:	4602      	mov	r2, r0
   27d84:	4601      	mov	r1, r0
   27d86:	f000 f88b 	bl	27ea0 <z_impl_z_log_msg_runtime_vcreate>
}
   27d8a:	b005      	add	sp, #20
   27d8c:	f85d fb04 	ldr.w	pc, [sp], #4

00027d90 <z_log_notify_drop>:
 */
bool z_log_msg_pending(void);

static inline void z_log_notify_drop(const struct mpsc_pbuf_buffer *buffer,
				     const union mpsc_pbuf_generic *item)
{
   27d90:	b508      	push	{r3, lr}
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
   27d92:	2001      	movs	r0, #1
   27d94:	f7ed ff9e 	bl	15cd4 <z_log_dropped>
}
   27d98:	bd08      	pop	{r3, pc}

00027d9a <z_log_msg_claim>:
{
   27d9a:	b508      	push	{r3, lr}
	return z_log_msg_local_claim();
   27d9c:	f7ee f81c 	bl	15dd8 <z_log_msg_local_claim>
}
   27da0:	bd08      	pop	{r3, pc}

00027da2 <msg_commit>:
{
   27da2:	b508      	push	{r3, lr}
	mpsc_pbuf_commit(buffer, &m->buf);
   27da4:	f7ff fec4 	bl	27b30 <mpsc_pbuf_commit>
	z_log_msg_post_finalize();
   27da8:	f7ee f8b4 	bl	15f14 <z_log_msg_post_finalize>
}
   27dac:	bd08      	pop	{r3, pc}

00027dae <z_log_get_tag>:
}
   27dae:	2000      	movs	r0, #0
   27db0:	4770      	bx	lr

00027db2 <z_cbprintf_cpy>:
{
   27db2:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
   27db4:	6853      	ldr	r3, [r2, #4]
   27db6:	6896      	ldr	r6, [r2, #8]
   27db8:	1b9b      	subs	r3, r3, r6
   27dba:	428b      	cmp	r3, r1
   27dbc:	d30c      	bcc.n	27dd8 <z_cbprintf_cpy+0x26>
   27dbe:	460c      	mov	r4, r1
   27dc0:	4615      	mov	r5, r2
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
   27dc2:	6813      	ldr	r3, [r2, #0]
   27dc4:	460a      	mov	r2, r1
   27dc6:	4601      	mov	r1, r0
   27dc8:	1998      	adds	r0, r3, r6
   27dca:	f000 fc5a 	bl	28682 <memcpy>
	desc->off += len;
   27dce:	68ab      	ldr	r3, [r5, #8]
   27dd0:	4423      	add	r3, r4
   27dd2:	60ab      	str	r3, [r5, #8]
	return len;
   27dd4:	4620      	mov	r0, r4
}
   27dd6:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
   27dd8:	f06f 001b 	mvn.w	r0, #27
   27ddc:	e7fb      	b.n	27dd6 <z_cbprintf_cpy+0x24>

00027dde <z_log_msg_finalize>:
	!(IS_ENABLED(CONFIG_LOG_FRONTEND) && \
	 (IS_ENABLED(CONFIG_LOG_FRONTEND_ONLY) || log_backend_count_get() == 0))

void z_log_msg_finalize(struct log_msg *msg, const void *source,
			 const struct log_msg_desc desc, const void *data)
{
   27dde:	b570      	push	{r4, r5, r6, lr}
	if (!msg) {
   27de0:	b190      	cbz	r0, 27e08 <z_log_msg_finalize+0x2a>
   27de2:	460e      	mov	r6, r1
   27de4:	4614      	mov	r4, r2
   27de6:	4619      	mov	r1, r3
   27de8:	4605      	mov	r5, r0
		z_log_dropped(false);

		return;
	}

	if (data) {
   27dea:	b13b      	cbz	r3, 27dfc <z_log_msg_finalize+0x1e>
		uint8_t *d = msg->data + desc.package_len;
   27dec:	3010      	adds	r0, #16
   27dee:	f3c2 2349 	ubfx	r3, r2, #9, #10

		memcpy(d, data, desc.data_len);
   27df2:	f3c2 42cb 	ubfx	r2, r2, #19, #12
   27df6:	4418      	add	r0, r3
   27df8:	f000 fc43 	bl	28682 <memcpy>
	}

	msg->hdr.desc = desc;
   27dfc:	602c      	str	r4, [r5, #0]
	msg->hdr.source = source;
   27dfe:	606e      	str	r6, [r5, #4]
	z_log_msg_commit(msg);
   27e00:	4628      	mov	r0, r5
   27e02:	f7ee f8cb 	bl	15f9c <z_log_msg_commit>
}
   27e06:	bd70      	pop	{r4, r5, r6, pc}
		z_log_dropped(false);
   27e08:	f7ed ff64 	bl	15cd4 <z_log_dropped>
		return;
   27e0c:	e7fb      	b.n	27e06 <z_log_msg_finalize+0x28>

00027e0e <z_impl_z_log_msg_static_create>:

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
   27e0e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   27e12:	b08a      	sub	sp, #40	; 0x28
   27e14:	4605      	mov	r5, r0
   27e16:	461e      	mov	r6, r3

	if (!BACKENDS_IN_USE()) {
		return;
	}

	struct log_msg_desc out_desc = desc;
   27e18:	460f      	mov	r7, r1
	int inlen = desc.package_len;
   27e1a:	f3c1 2449 	ubfx	r4, r1, #9, #10
	struct log_msg *msg;

	if (inlen > 0) {
   27e1e:	b364      	cbz	r4, 27e7a <z_impl_z_log_msg_static_create+0x6c>
   27e20:	4690      	mov	r8, r2
	struct z_cbprintf_buf_desc buf_desc = {
   27e22:	2200      	movs	r2, #0
   27e24:	9207      	str	r2, [sp, #28]
   27e26:	9208      	str	r2, [sp, #32]
   27e28:	9209      	str	r2, [sp, #36]	; 0x24
	return cbprintf_package_convert(in_packaged, in_len,
   27e2a:	2304      	movs	r3, #4
   27e2c:	9302      	str	r3, [sp, #8]
   27e2e:	ab05      	add	r3, sp, #20
   27e30:	9301      	str	r3, [sp, #4]
   27e32:	230a      	movs	r3, #10
   27e34:	9300      	str	r3, [sp, #0]
   27e36:	ab07      	add	r3, sp, #28
   27e38:	4621      	mov	r1, r4
   27e3a:	4640      	mov	r0, r8
   27e3c:	f7ec ffb6 	bl	14dac <cbprintf_package_convert>
					    strl, ARRAY_SIZE(strl));

		/* Update package length with calculated value (which may be extended
		 * when strings are copied into the package.
		 */
		out_desc.package_len = len;
   27e40:	f360 2752 	bfi	r7, r0, #9, #10
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   27e44:	f3c0 0909 	ubfx	r9, r0, #0, #10
   27e48:	f3c7 41cb 	ubfx	r1, r7, #19, #12
   27e4c:	4449      	add	r1, r9
   27e4e:	3117      	adds	r1, #23
   27e50:	f021 0107 	bic.w	r1, r1, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   27e54:	0888      	lsrs	r0, r1, #2
   27e56:	f7ed ffb7 	bl	15dc8 <z_log_msg_alloc>
		if (msg) {
   27e5a:	4682      	mov	sl, r0
   27e5c:	b1b8      	cbz	r0, 27e8e <z_impl_z_log_msg_static_create+0x80>
			len = cbprintf_package_copy(package, inlen,
   27e5e:	2304      	movs	r3, #4
   27e60:	9302      	str	r3, [sp, #8]
   27e62:	ab05      	add	r3, sp, #20
   27e64:	9301      	str	r3, [sp, #4]
   27e66:	230a      	movs	r3, #10
   27e68:	9300      	str	r3, [sp, #0]
   27e6a:	464b      	mov	r3, r9
   27e6c:	f100 0210 	add.w	r2, r0, #16
   27e70:	4621      	mov	r1, r4
   27e72:	4640      	mov	r0, r8
   27e74:	f7ee f908 	bl	16088 <cbprintf_package_copy>
						    msg->data, out_desc.package_len,
						    flags, strl, ARRAY_SIZE(strl));
			__ASSERT_NO_MSG(len >= 0);
   27e78:	e009      	b.n	27e8e <z_impl_z_log_msg_static_create+0x80>
   27e7a:	f3c1 41cb 	ubfx	r1, r1, #19, #12
   27e7e:	440c      	add	r4, r1
   27e80:	3417      	adds	r4, #23
   27e82:	f024 0407 	bic.w	r4, r4, #7
		}
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   27e86:	08a0      	lsrs	r0, r4, #2
   27e88:	f7ed ff9e 	bl	15dc8 <z_log_msg_alloc>
   27e8c:	4682      	mov	sl, r0
	}

	z_log_msg_finalize(msg, source, out_desc, data);
   27e8e:	4633      	mov	r3, r6
   27e90:	463a      	mov	r2, r7
   27e92:	4629      	mov	r1, r5
   27e94:	4650      	mov	r0, sl
   27e96:	f7ff ffa2 	bl	27dde <z_log_msg_finalize>
}
   27e9a:	b00a      	add	sp, #40	; 0x28
   27e9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00027ea0 <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
   27ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27ea4:	b085      	sub	sp, #20
   27ea6:	4681      	mov	r9, r0
   27ea8:	460d      	mov	r5, r1
   27eaa:	4690      	mov	r8, r2
   27eac:	461e      	mov	r6, r3
   27eae:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
   27eb2:	9f10      	ldr	r7, [sp, #64]	; 0x40
	int plen;

	if (fmt) {
   27eb4:	b3b7      	cbz	r7, 27f24 <z_impl_z_log_msg_runtime_vcreate+0x84>
		va_list ap2;

		va_copy(ap2, ap);
   27eb6:	9b11      	ldr	r3, [sp, #68]	; 0x44
   27eb8:	9303      	str	r3, [sp, #12]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
   27eba:	9300      	str	r3, [sp, #0]
   27ebc:	463b      	mov	r3, r7
   27ebe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   27ec0:	2110      	movs	r1, #16
   27ec2:	2000      	movs	r0, #0
   27ec4:	f7ec fd20 	bl	14908 <cbvprintf_package>
		va_end(ap2);
	} else {
		plen = 0;
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
   27ec8:	4682      	mov	sl, r0
   27eca:	eb00 030b 	add.w	r3, r0, fp
   27ece:	3317      	adds	r3, #23
   27ed0:	f023 0307 	bic.w	r3, r3, #7
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
   27ed4:	2400      	movs	r4, #0
   27ed6:	f36f 0400 	bfc	r4, #0, #1
   27eda:	f36f 0441 	bfc	r4, #1, #1
   27ede:	f36f 0482 	bfc	r4, #2, #1
   27ee2:	f369 04c5 	bfi	r4, r9, #3, #3
   27ee6:	f368 1488 	bfi	r4, r8, #6, #3
   27eea:	f360 2452 	bfi	r4, r0, #9, #10
   27eee:	f36b 44de 	bfi	r4, fp, #19, #12
   27ef2:	f36f 74df 	bfc	r4, #31, #1
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_DEFERRED) && BACKENDS_IN_USE()) {
		msg = z_log_msg_alloc(msg_wlen);
   27ef6:	0898      	lsrs	r0, r3, #2
   27ef8:	f7ed ff66 	bl	15dc8 <z_log_msg_alloc>
		if (IS_ENABLED(CONFIG_LOG_FRONTEND) && msg == NULL) {
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
   27efc:	4680      	mov	r8, r0
   27efe:	b140      	cbz	r0, 27f12 <z_impl_z_log_msg_runtime_vcreate+0x72>
   27f00:	3010      	adds	r0, #16
	} else {
		msg = alloca(msg_wlen * sizeof(int));
		pkg = msg->data;
	}

	if (pkg && fmt) {
   27f02:	b137      	cbz	r7, 27f12 <z_impl_z_log_msg_runtime_vcreate+0x72>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
   27f04:	9b11      	ldr	r3, [sp, #68]	; 0x44
   27f06:	9300      	str	r3, [sp, #0]
   27f08:	463b      	mov	r3, r7
   27f0a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   27f0c:	4651      	mov	r1, sl
   27f0e:	f7ec fcfb 	bl	14908 <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
   27f12:	4633      	mov	r3, r6
   27f14:	4622      	mov	r2, r4
   27f16:	4629      	mov	r1, r5
   27f18:	4640      	mov	r0, r8
   27f1a:	f7ff ff60 	bl	27dde <z_log_msg_finalize>
	}
}
   27f1e:	b005      	add	sp, #20
   27f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		plen = 0;
   27f24:	2000      	movs	r0, #0
   27f26:	e7cf      	b.n	27ec8 <z_impl_z_log_msg_runtime_vcreate+0x28>

00027f28 <buffer_write>:
{
   27f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27f2a:	4607      	mov	r7, r0
   27f2c:	460d      	mov	r5, r1
   27f2e:	4614      	mov	r4, r2
   27f30:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
   27f32:	4632      	mov	r2, r6
   27f34:	4621      	mov	r1, r4
   27f36:	4628      	mov	r0, r5
   27f38:	47b8      	blx	r7
		buf += processed;
   27f3a:	4405      	add	r5, r0
	} while (len != 0);
   27f3c:	1a24      	subs	r4, r4, r0
   27f3e:	d1f8      	bne.n	27f32 <buffer_write+0xa>
}
   27f40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00027f42 <cbvprintf>:
{
   27f42:	b510      	push	{r4, lr}
   27f44:	b082      	sub	sp, #8
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   27f46:	2400      	movs	r4, #0
   27f48:	9400      	str	r4, [sp, #0]
   27f4a:	f7ed facf 	bl	154ec <z_cbvprintf_impl>
}
   27f4e:	b002      	add	sp, #8
   27f50:	bd10      	pop	{r4, pc}

00027f52 <color_prefix>:
{
   27f52:	b508      	push	{r3, lr}
   27f54:	4613      	mov	r3, r2
	color_print(output, color, true, level);
   27f56:	2201      	movs	r2, #1
   27f58:	f7ee f908 	bl	1616c <color_print>
}
   27f5c:	bd08      	pop	{r3, pc}

00027f5e <color_postfix>:
{
   27f5e:	b508      	push	{r3, lr}
   27f60:	4613      	mov	r3, r2
	color_print(output, color, false, level);
   27f62:	2200      	movs	r2, #0
   27f64:	f7ee f902 	bl	1616c <color_print>
}
   27f68:	bd08      	pop	{r3, pc}

00027f6a <postfix_print>:
{
   27f6a:	b538      	push	{r3, r4, r5, lr}
   27f6c:	4605      	mov	r5, r0
   27f6e:	460c      	mov	r4, r1
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
   27f70:	f001 0101 	and.w	r1, r1, #1
   27f74:	f7ff fff3 	bl	27f5e <color_postfix>
	newline_print(output, flags);
   27f78:	4621      	mov	r1, r4
   27f7a:	4628      	mov	r0, r5
   27f7c:	f7ee f97c 	bl	16278 <newline_print>
}
   27f80:	bd38      	pop	{r3, r4, r5, pc}

00027f82 <log_msg_hexdump>:
{
   27f82:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   27f86:	b083      	sub	sp, #12
   27f88:	4680      	mov	r8, r0
   27f8a:	460e      	mov	r6, r1
   27f8c:	4615      	mov	r5, r2
   27f8e:	461f      	mov	r7, r3
   27f90:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
   27f94:	462c      	mov	r4, r5
   27f96:	2d10      	cmp	r5, #16
   27f98:	bf28      	it	cs
   27f9a:	2410      	movcs	r4, #16
		hexdump_line_print(output, data, length,
   27f9c:	f8cd 9000 	str.w	r9, [sp]
   27fa0:	463b      	mov	r3, r7
   27fa2:	4622      	mov	r2, r4
   27fa4:	4631      	mov	r1, r6
   27fa6:	4640      	mov	r0, r8
   27fa8:	f7ee f97a 	bl	162a0 <hexdump_line_print>
		data += length;
   27fac:	4426      	add	r6, r4
	} while (len);
   27fae:	1b2d      	subs	r5, r5, r4
   27fb0:	d1f0      	bne.n	27f94 <log_msg_hexdump+0x12>
}
   27fb2:	b003      	add	sp, #12
   27fb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00027fb8 <log_output_flush>:
{
   27fb8:	b510      	push	{r4, lr}
   27fba:	4604      	mov	r4, r0
		     output->control_block->offset,
   27fbc:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   27fbe:	6853      	ldr	r3, [r2, #4]
   27fc0:	6812      	ldr	r2, [r2, #0]
   27fc2:	6881      	ldr	r1, [r0, #8]
   27fc4:	6800      	ldr	r0, [r0, #0]
   27fc6:	f7ff ffaf 	bl	27f28 <buffer_write>
	output->control_block->offset = 0;
   27fca:	6863      	ldr	r3, [r4, #4]
   27fcc:	2200      	movs	r2, #0
   27fce:	601a      	str	r2, [r3, #0]
}
   27fd0:	bd10      	pop	{r4, pc}

00027fd2 <out_func>:
{
   27fd2:	b538      	push	{r3, r4, r5, lr}
   27fd4:	4605      	mov	r5, r0
   27fd6:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   27fd8:	684b      	ldr	r3, [r1, #4]
   27fda:	681a      	ldr	r2, [r3, #0]
   27fdc:	68cb      	ldr	r3, [r1, #12]
   27fde:	429a      	cmp	r2, r3
   27fe0:	d00f      	beq.n	28002 <out_func+0x30>
	idx = atomic_inc(&out_ctx->control_block->offset);
   27fe2:	6863      	ldr	r3, [r4, #4]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   27fe4:	f3bf 8f5b 	dmb	ish
   27fe8:	e853 2f00 	ldrex	r2, [r3]
   27fec:	1c51      	adds	r1, r2, #1
   27fee:	e843 1000 	strex	r0, r1, [r3]
   27ff2:	2800      	cmp	r0, #0
   27ff4:	d1f8      	bne.n	27fe8 <out_func+0x16>
   27ff6:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   27ffa:	68a3      	ldr	r3, [r4, #8]
   27ffc:	549d      	strb	r5, [r3, r2]
}
   27ffe:	2000      	movs	r0, #0
   28000:	bd38      	pop	{r3, r4, r5, pc}
		log_output_flush(out_ctx);
   28002:	4608      	mov	r0, r1
   28004:	f7ff ffd8 	bl	27fb8 <log_output_flush>
   28008:	e7eb      	b.n	27fe2 <out_func+0x10>

0002800a <cr_out_func>:
{
   2800a:	b538      	push	{r3, r4, r5, lr}
   2800c:	4604      	mov	r4, r0
   2800e:	460d      	mov	r5, r1
	if (c == '\n') {
   28010:	280a      	cmp	r0, #10
   28012:	d005      	beq.n	28020 <cr_out_func+0x16>
	out_func(c, ctx);
   28014:	4629      	mov	r1, r5
   28016:	4620      	mov	r0, r4
   28018:	f7ff ffdb 	bl	27fd2 <out_func>
}
   2801c:	2000      	movs	r0, #0
   2801e:	bd38      	pop	{r3, r4, r5, pc}
		out_func((int)'\r', ctx);
   28020:	200d      	movs	r0, #13
   28022:	f7ff ffd6 	bl	27fd2 <out_func>
   28026:	e7f5      	b.n	28014 <cr_out_func+0xa>

00028028 <k_msleep>:
{
   28028:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   2802a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   2802e:	17c1      	asrs	r1, r0, #31
   28030:	03c9      	lsls	r1, r1, #15
   28032:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   28036:	03c0      	lsls	r0, r0, #15
   28038:	f240 33e7 	movw	r3, #999	; 0x3e7
   2803c:	18c0      	adds	r0, r0, r3
   2803e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   28042:	f04f 0300 	mov.w	r3, #0
   28046:	f141 0100 	adc.w	r1, r1, #0
   2804a:	f7d8 f859 	bl	100 <__aeabi_uldivmod>
   2804e:	f7fd fe1b 	bl	25c88 <z_impl_k_sleep>
}
   28052:	bd08      	pop	{r3, pc}

00028054 <atomic_test_and_clear_bit>:
{
   28054:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   28056:	f001 021f 	and.w	r2, r1, #31
   2805a:	2301      	movs	r3, #1
   2805c:	4093      	lsls	r3, r2
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2805e:	0949      	lsrs	r1, r1, #5
   28060:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   28064:	43d9      	mvns	r1, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   28066:	f3bf 8f5b 	dmb	ish
   2806a:	e850 2f00 	ldrex	r2, [r0]
   2806e:	ea02 0c01 	and.w	ip, r2, r1
   28072:	e840 ce00 	strex	lr, ip, [r0]
   28076:	f1be 0f00 	cmp.w	lr, #0
   2807a:	d1f6      	bne.n	2806a <atomic_test_and_clear_bit+0x16>
   2807c:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   28080:	4213      	tst	r3, r2
}
   28082:	bf14      	ite	ne
   28084:	2001      	movne	r0, #1
   28086:	2000      	moveq	r0, #0
   28088:	f85d fb04 	ldr.w	pc, [sp], #4

0002808c <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2808c:	f001 021f 	and.w	r2, r1, #31
   28090:	2301      	movs	r3, #1
   28092:	4093      	lsls	r3, r2
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   28094:	0949      	lsrs	r1, r1, #5
   28096:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2809a:	f3bf 8f5b 	dmb	ish
   2809e:	e850 2f00 	ldrex	r2, [r0]
   280a2:	431a      	orrs	r2, r3
   280a4:	e840 2100 	strex	r1, r2, [r0]
   280a8:	2900      	cmp	r1, #0
   280aa:	d1f8      	bne.n	2809e <atomic_set_bit+0x12>
   280ac:	f3bf 8f5b 	dmb	ish
}
   280b0:	4770      	bx	lr

000280b2 <pm_policy_state_lock_is_active>:
			return (atomic_get(&substate_lock_t[i].lock) != 0);
		}
	}

	return false;
}
   280b2:	2000      	movs	r0, #0
   280b4:	4770      	bx	lr

000280b6 <_copy>:
#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
	if (from_len <= to_len) {
   280b6:	428b      	cmp	r3, r1
   280b8:	d901      	bls.n	280be <_copy+0x8>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
   280ba:	2000      	movs	r0, #0
	}
}
   280bc:	4770      	bx	lr
{
   280be:	b510      	push	{r4, lr}
   280c0:	4694      	mov	ip, r2
   280c2:	461c      	mov	r4, r3
		(void)memcpy(to, from, from_len);
   280c4:	461a      	mov	r2, r3
   280c6:	4661      	mov	r1, ip
   280c8:	f000 fadb 	bl	28682 <memcpy>
		return from_len;
   280cc:	4620      	mov	r0, r4
}
   280ce:	bd10      	pop	{r4, pc}

000280d0 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
   280d0:	b508      	push	{r3, lr}
	(void)memset(to, val, len);
   280d2:	f000 fb05 	bl	286e0 <memset>
}
   280d6:	bd08      	pop	{r3, pc}

000280d8 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   280d8:	09c3      	lsrs	r3, r0, #7
   280da:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   280de:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   280e2:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   280e6:	b2c0      	uxtb	r0, r0
   280e8:	4770      	bx	lr

000280ea <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   280ea:	7803      	ldrb	r3, [r0, #0]
   280ec:	78ca      	ldrb	r2, [r1, #3]
   280ee:	4053      	eors	r3, r2
   280f0:	7003      	strb	r3, [r0, #0]
   280f2:	7843      	ldrb	r3, [r0, #1]
   280f4:	788a      	ldrb	r2, [r1, #2]
   280f6:	4053      	eors	r3, r2
   280f8:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   280fa:	7883      	ldrb	r3, [r0, #2]
   280fc:	784a      	ldrb	r2, [r1, #1]
   280fe:	4053      	eors	r3, r2
   28100:	7083      	strb	r3, [r0, #2]
   28102:	78c3      	ldrb	r3, [r0, #3]
   28104:	780a      	ldrb	r2, [r1, #0]
   28106:	4053      	eors	r3, r2
   28108:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   2810a:	7903      	ldrb	r3, [r0, #4]
   2810c:	79ca      	ldrb	r2, [r1, #7]
   2810e:	4053      	eors	r3, r2
   28110:	7103      	strb	r3, [r0, #4]
   28112:	7943      	ldrb	r3, [r0, #5]
   28114:	798a      	ldrb	r2, [r1, #6]
   28116:	4053      	eors	r3, r2
   28118:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   2811a:	7983      	ldrb	r3, [r0, #6]
   2811c:	794a      	ldrb	r2, [r1, #5]
   2811e:	4053      	eors	r3, r2
   28120:	7183      	strb	r3, [r0, #6]
   28122:	79c3      	ldrb	r3, [r0, #7]
   28124:	790a      	ldrb	r2, [r1, #4]
   28126:	4053      	eors	r3, r2
   28128:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   2812a:	7a03      	ldrb	r3, [r0, #8]
   2812c:	7aca      	ldrb	r2, [r1, #11]
   2812e:	4053      	eors	r3, r2
   28130:	7203      	strb	r3, [r0, #8]
   28132:	7a43      	ldrb	r3, [r0, #9]
   28134:	7a8a      	ldrb	r2, [r1, #10]
   28136:	4053      	eors	r3, r2
   28138:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   2813a:	7a83      	ldrb	r3, [r0, #10]
   2813c:	7a4a      	ldrb	r2, [r1, #9]
   2813e:	4053      	eors	r3, r2
   28140:	7283      	strb	r3, [r0, #10]
   28142:	7ac3      	ldrb	r3, [r0, #11]
   28144:	7a0a      	ldrb	r2, [r1, #8]
   28146:	4053      	eors	r3, r2
   28148:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   2814a:	7b03      	ldrb	r3, [r0, #12]
   2814c:	7bca      	ldrb	r2, [r1, #15]
   2814e:	4053      	eors	r3, r2
   28150:	7303      	strb	r3, [r0, #12]
   28152:	7b43      	ldrb	r3, [r0, #13]
   28154:	7b8a      	ldrb	r2, [r1, #14]
   28156:	4053      	eors	r3, r2
   28158:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   2815a:	7b83      	ldrb	r3, [r0, #14]
   2815c:	7b4a      	ldrb	r2, [r1, #13]
   2815e:	4053      	eors	r3, r2
   28160:	7383      	strb	r3, [r0, #14]
   28162:	7bc3      	ldrb	r3, [r0, #15]
   28164:	7b0a      	ldrb	r2, [r1, #12]
   28166:	4053      	eors	r3, r2
   28168:	73c3      	strb	r3, [r0, #15]
}
   2816a:	4770      	bx	lr

0002816c <shift_rows>:
{
   2816c:	b500      	push	{lr}
   2816e:	b085      	sub	sp, #20
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   28170:	7802      	ldrb	r2, [r0, #0]
   28172:	f88d 2000 	strb.w	r2, [sp]
   28176:	7942      	ldrb	r2, [r0, #5]
   28178:	f88d 2001 	strb.w	r2, [sp, #1]
   2817c:	7a82      	ldrb	r2, [r0, #10]
   2817e:	f88d 2002 	strb.w	r2, [sp, #2]
   28182:	7bc2      	ldrb	r2, [r0, #15]
   28184:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   28188:	7902      	ldrb	r2, [r0, #4]
   2818a:	f88d 2004 	strb.w	r2, [sp, #4]
   2818e:	7a42      	ldrb	r2, [r0, #9]
   28190:	f88d 2005 	strb.w	r2, [sp, #5]
   28194:	7b82      	ldrb	r2, [r0, #14]
   28196:	f88d 2006 	strb.w	r2, [sp, #6]
   2819a:	78c2      	ldrb	r2, [r0, #3]
   2819c:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   281a0:	7a02      	ldrb	r2, [r0, #8]
   281a2:	f88d 2008 	strb.w	r2, [sp, #8]
   281a6:	7b42      	ldrb	r2, [r0, #13]
   281a8:	f88d 2009 	strb.w	r2, [sp, #9]
   281ac:	7882      	ldrb	r2, [r0, #2]
   281ae:	f88d 200a 	strb.w	r2, [sp, #10]
   281b2:	79c2      	ldrb	r2, [r0, #7]
   281b4:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   281b8:	7b02      	ldrb	r2, [r0, #12]
   281ba:	f88d 200c 	strb.w	r2, [sp, #12]
   281be:	7842      	ldrb	r2, [r0, #1]
   281c0:	f88d 200d 	strb.w	r2, [sp, #13]
   281c4:	7982      	ldrb	r2, [r0, #6]
   281c6:	f88d 200e 	strb.w	r2, [sp, #14]
   281ca:	7ac3      	ldrb	r3, [r0, #11]
   281cc:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   281d0:	2310      	movs	r3, #16
   281d2:	466a      	mov	r2, sp
   281d4:	4619      	mov	r1, r3
   281d6:	f7ff ff6e 	bl	280b6 <_copy>
}
   281da:	b005      	add	sp, #20
   281dc:	f85d fb04 	ldr.w	pc, [sp], #4

000281e0 <mult_row_column>:
{
   281e0:	b570      	push	{r4, r5, r6, lr}
   281e2:	4606      	mov	r6, r0
   281e4:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   281e6:	7808      	ldrb	r0, [r1, #0]
   281e8:	f7ff ff76 	bl	280d8 <_double_byte>
   281ec:	4605      	mov	r5, r0
   281ee:	7860      	ldrb	r0, [r4, #1]
   281f0:	f7ff ff72 	bl	280d8 <_double_byte>
   281f4:	7861      	ldrb	r1, [r4, #1]
   281f6:	78a2      	ldrb	r2, [r4, #2]
   281f8:	78e3      	ldrb	r3, [r4, #3]
   281fa:	4048      	eors	r0, r1
   281fc:	4045      	eors	r5, r0
   281fe:	406a      	eors	r2, r5
   28200:	4053      	eors	r3, r2
   28202:	7033      	strb	r3, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   28204:	7825      	ldrb	r5, [r4, #0]
   28206:	7860      	ldrb	r0, [r4, #1]
   28208:	f7ff ff66 	bl	280d8 <_double_byte>
   2820c:	4045      	eors	r5, r0
   2820e:	b2ed      	uxtb	r5, r5
   28210:	78a0      	ldrb	r0, [r4, #2]
   28212:	f7ff ff61 	bl	280d8 <_double_byte>
   28216:	78a2      	ldrb	r2, [r4, #2]
   28218:	78e3      	ldrb	r3, [r4, #3]
   2821a:	4050      	eors	r0, r2
   2821c:	4045      	eors	r5, r0
   2821e:	406b      	eors	r3, r5
   28220:	7073      	strb	r3, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   28222:	7825      	ldrb	r5, [r4, #0]
   28224:	7863      	ldrb	r3, [r4, #1]
   28226:	405d      	eors	r5, r3
   28228:	78a0      	ldrb	r0, [r4, #2]
   2822a:	f7ff ff55 	bl	280d8 <_double_byte>
   2822e:	4045      	eors	r5, r0
   28230:	b2ed      	uxtb	r5, r5
   28232:	78e0      	ldrb	r0, [r4, #3]
   28234:	f7ff ff50 	bl	280d8 <_double_byte>
   28238:	78e3      	ldrb	r3, [r4, #3]
   2823a:	4058      	eors	r0, r3
   2823c:	4045      	eors	r5, r0
   2823e:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   28240:	7820      	ldrb	r0, [r4, #0]
   28242:	f7ff ff49 	bl	280d8 <_double_byte>
   28246:	7822      	ldrb	r2, [r4, #0]
   28248:	7863      	ldrb	r3, [r4, #1]
   2824a:	78a5      	ldrb	r5, [r4, #2]
   2824c:	4050      	eors	r0, r2
   2824e:	4043      	eors	r3, r0
   28250:	405d      	eors	r5, r3
   28252:	b2ed      	uxtb	r5, r5
   28254:	78e0      	ldrb	r0, [r4, #3]
   28256:	f7ff ff3f 	bl	280d8 <_double_byte>
   2825a:	4045      	eors	r5, r0
   2825c:	70f5      	strb	r5, [r6, #3]
}
   2825e:	bd70      	pop	{r4, r5, r6, pc}

00028260 <mix_columns>:
{
   28260:	b510      	push	{r4, lr}
   28262:	b084      	sub	sp, #16
   28264:	4604      	mov	r4, r0
	mult_row_column(t, s);
   28266:	4601      	mov	r1, r0
   28268:	4668      	mov	r0, sp
   2826a:	f7ff ffb9 	bl	281e0 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   2826e:	1d21      	adds	r1, r4, #4
   28270:	a801      	add	r0, sp, #4
   28272:	f7ff ffb5 	bl	281e0 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   28276:	f104 0108 	add.w	r1, r4, #8
   2827a:	a802      	add	r0, sp, #8
   2827c:	f7ff ffb0 	bl	281e0 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   28280:	f104 010c 	add.w	r1, r4, #12
   28284:	a803      	add	r0, sp, #12
   28286:	f7ff ffab 	bl	281e0 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   2828a:	2310      	movs	r3, #16
   2828c:	466a      	mov	r2, sp
   2828e:	4619      	mov	r1, r3
   28290:	4620      	mov	r0, r4
   28292:	f7ff ff10 	bl	280b6 <_copy>
}
   28296:	b004      	add	sp, #16
   28298:	bd10      	pop	{r4, pc}

0002829a <gf_double>:
 */
void gf_double(uint8_t *out, uint8_t *in)
{

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);
   2829a:	460b      	mov	r3, r1

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2829c:	f913 2b0f 	ldrsb.w	r2, [r3], #15
   282a0:	2a00      	cmp	r2, #0
   282a2:	db04      	blt.n	282ae <gf_double+0x14>
   282a4:	f04f 0c00 	mov.w	ip, #0

	out += (TC_AES_BLOCK_SIZE - 1);
   282a8:	f100 020f 	add.w	r2, r0, #15
   282ac:	e006      	b.n	282bc <gf_double+0x22>
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   282ae:	f04f 0c87 	mov.w	ip, #135	; 0x87
   282b2:	e7f9      	b.n	282a8 <gf_double+0xe>
	for (;;) {
		*out-- = (*x << 1) ^ carry;
		if (x == in) {
			break;
		}
		carry = *x-- >> 7;
   282b4:	f813 0901 	ldrb.w	r0, [r3], #-1
   282b8:	ea4f 1cd0 	mov.w	ip, r0, lsr #7
		*out-- = (*x << 1) ^ carry;
   282bc:	7818      	ldrb	r0, [r3, #0]
   282be:	ea8c 0040 	eor.w	r0, ip, r0, lsl #1
   282c2:	f802 0901 	strb.w	r0, [r2], #-1
		if (x == in) {
   282c6:	428b      	cmp	r3, r1
   282c8:	d1f4      	bne.n	282b4 <gf_double+0x1a>
	}
}
   282ca:	4770      	bx	lr

000282cc <tc_cmac_erase>:
	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
	if (s == (TCCmacState_t) 0) {
   282cc:	b130      	cbz	r0, 282dc <tc_cmac_erase+0x10>
{
   282ce:	b508      	push	{r3, lr}
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   282d0:	2258      	movs	r2, #88	; 0x58
   282d2:	2100      	movs	r1, #0
   282d4:	f7ff fefc 	bl	280d0 <_set>

	return TC_CRYPTO_SUCCESS;
   282d8:	2001      	movs	r0, #1
}
   282da:	bd08      	pop	{r3, pc}
		return TC_CRYPTO_FAIL;
   282dc:	2000      	movs	r0, #0
}
   282de:	4770      	bx	lr

000282e0 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   282e0:	b1a0      	cbz	r0, 2830c <tc_cmac_init+0x2c>
{
   282e2:	b510      	push	{r4, lr}
   282e4:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   282e6:	2210      	movs	r2, #16
   282e8:	2100      	movs	r1, #0
   282ea:	f7ff fef1 	bl	280d0 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   282ee:	2210      	movs	r2, #16
   282f0:	2100      	movs	r1, #0
   282f2:	f104 0030 	add.w	r0, r4, #48	; 0x30
   282f6:	f7ff feeb 	bl	280d0 <_set>
	s->leftover_offset = 0;
   282fa:	2300      	movs	r3, #0
   282fc:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   282fe:	2200      	movs	r2, #0
   28300:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   28304:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
   28308:	2001      	movs	r0, #1
}
   2830a:	bd10      	pop	{r4, pc}
		return TC_CRYPTO_FAIL;
   2830c:	2000      	movs	r0, #0
}
   2830e:	4770      	bx	lr

00028310 <tc_cmac_setup>:
	if (s == (TCCmacState_t) 0 ||
   28310:	b338      	cbz	r0, 28362 <tc_cmac_setup+0x52>
{
   28312:	b570      	push	{r4, r5, r6, lr}
   28314:	460d      	mov	r5, r1
   28316:	4616      	mov	r6, r2
   28318:	4604      	mov	r4, r0
	if (s == (TCCmacState_t) 0 ||
   2831a:	b321      	cbz	r1, 28366 <tc_cmac_setup+0x56>
	_set(s, 0, sizeof(*s));
   2831c:	2258      	movs	r2, #88	; 0x58
   2831e:	2100      	movs	r1, #0
   28320:	f7ff fed6 	bl	280d0 <_set>
	s->sched = sched;
   28324:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   28326:	4629      	mov	r1, r5
   28328:	4630      	mov	r0, r6
   2832a:	f7ee faa9 	bl	16880 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   2832e:	2210      	movs	r2, #16
   28330:	2100      	movs	r1, #0
   28332:	4620      	mov	r0, r4
   28334:	f7ff fecc 	bl	280d0 <_set>
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   28338:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2833a:	4621      	mov	r1, r4
   2833c:	4620      	mov	r0, r4
   2833e:	f7ee fb01 	bl	16944 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   28342:	f104 0510 	add.w	r5, r4, #16
   28346:	4621      	mov	r1, r4
   28348:	4628      	mov	r0, r5
   2834a:	f7ff ffa6 	bl	2829a <gf_double>
	gf_double (s->K2, s->K1);
   2834e:	4629      	mov	r1, r5
   28350:	f104 0020 	add.w	r0, r4, #32
   28354:	f7ff ffa1 	bl	2829a <gf_double>
	tc_cmac_init(s);
   28358:	4620      	mov	r0, r4
   2835a:	f7ff ffc1 	bl	282e0 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   2835e:	2001      	movs	r0, #1
}
   28360:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   28362:	2000      	movs	r0, #0
}
   28364:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   28366:	2000      	movs	r0, #0
   28368:	e7fa      	b.n	28360 <tc_cmac_setup+0x50>

0002836a <tc_cmac_update>:
int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2836a:	2800      	cmp	r0, #0
   2836c:	d064      	beq.n	28438 <tc_cmac_update+0xce>
{
   2836e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28372:	460d      	mov	r5, r1
   28374:	4616      	mov	r6, r2
   28376:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   28378:	2a00      	cmp	r2, #0
   2837a:	d05f      	beq.n	2843c <tc_cmac_update+0xd2>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   2837c:	2900      	cmp	r1, #0
   2837e:	d060      	beq.n	28442 <tc_cmac_update+0xd8>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   28380:	6d03      	ldr	r3, [r0, #80]	; 0x50
   28382:	6d42      	ldr	r2, [r0, #84]	; 0x54
   28384:	ea53 0102 	orrs.w	r1, r3, r2
   28388:	d05d      	beq.n	28446 <tc_cmac_update+0xdc>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   2838a:	3b01      	subs	r3, #1
   2838c:	f142 32ff 	adc.w	r2, r2, #4294967295
   28390:	6503      	str	r3, [r0, #80]	; 0x50
   28392:	6542      	str	r2, [r0, #84]	; 0x54

	if (s->leftover_offset > 0) {
   28394:	6c47      	ldr	r7, [r0, #68]	; 0x44
   28396:	2f00      	cmp	r7, #0
   28398:	d03d      	beq.n	28416 <tc_cmac_update+0xac>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   2839a:	f1c7 0810 	rsb	r8, r7, #16

		if (data_length < remaining_space) {
   2839e:	4546      	cmp	r6, r8
   283a0:	d30d      	bcc.n	283be <tc_cmac_update+0x54>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
			s->leftover_offset += data_length;
			return TC_CRYPTO_SUCCESS;
		}
		/* leftover block is now full; encrypt it first */
		_copy(&s->leftover[s->leftover_offset],
   283a2:	f107 0030 	add.w	r0, r7, #48	; 0x30
   283a6:	4643      	mov	r3, r8
   283a8:	462a      	mov	r2, r5
   283aa:	4641      	mov	r1, r8
   283ac:	4420      	add	r0, r4
   283ae:	f7ff fe82 	bl	280b6 <_copy>
		      remaining_space,
		      data,
		      remaining_space);
		data_length -= remaining_space;
   283b2:	3f10      	subs	r7, #16
   283b4:	443e      	add	r6, r7
		data += remaining_space;
   283b6:	4445      	add	r5, r8
		s->leftover_offset = 0;
   283b8:	2300      	movs	r3, #0
   283ba:	6463      	str	r3, [r4, #68]	; 0x44

		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   283bc:	e013      	b.n	283e6 <tc_cmac_update+0x7c>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   283be:	f107 0030 	add.w	r0, r7, #48	; 0x30
   283c2:	4633      	mov	r3, r6
   283c4:	462a      	mov	r2, r5
   283c6:	4631      	mov	r1, r6
   283c8:	4420      	add	r0, r4
   283ca:	f7ff fe74 	bl	280b6 <_copy>
			s->leftover_offset += data_length;
   283ce:	6c63      	ldr	r3, [r4, #68]	; 0x44
   283d0:	4433      	add	r3, r6
   283d2:	6463      	str	r3, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   283d4:	2001      	movs	r0, #1
   283d6:	e032      	b.n	2843e <tc_cmac_update+0xd4>
			s->iv[i] ^= s->leftover[i];
   283d8:	5ce2      	ldrb	r2, [r4, r3]
   283da:	18e1      	adds	r1, r4, r3
   283dc:	f891 1030 	ldrb.w	r1, [r1, #48]	; 0x30
   283e0:	404a      	eors	r2, r1
   283e2:	54e2      	strb	r2, [r4, r3]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   283e4:	3301      	adds	r3, #1
   283e6:	2b0f      	cmp	r3, #15
   283e8:	d9f6      	bls.n	283d8 <tc_cmac_update+0x6e>
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   283ea:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   283ec:	4621      	mov	r1, r4
   283ee:	4620      	mov	r0, r4
   283f0:	f7ee faa8 	bl	16944 <tc_aes_encrypt>
   283f4:	e00f      	b.n	28416 <tc_cmac_update+0xac>
	}

	/* CBC encrypt each (except the last) of the data blocks */
	while (data_length > TC_AES_BLOCK_SIZE) {
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
			s->iv[i] ^= data[i];
   283f6:	5ce0      	ldrb	r0, [r4, r3]
   283f8:	f815 c003 	ldrb.w	ip, [r5, r3]
   283fc:	ea80 000c 	eor.w	r0, r0, ip
   28400:	54e0      	strb	r0, [r4, r3]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   28402:	3301      	adds	r3, #1
   28404:	2b0f      	cmp	r3, #15
   28406:	d9f6      	bls.n	283f6 <tc_cmac_update+0x8c>
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   28408:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2840a:	4621      	mov	r1, r4
   2840c:	4620      	mov	r0, r4
   2840e:	f7ee fa99 	bl	16944 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   28412:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   28414:	3e10      	subs	r6, #16
	while (data_length > TC_AES_BLOCK_SIZE) {
   28416:	2e10      	cmp	r6, #16
   28418:	d901      	bls.n	2841e <tc_cmac_update+0xb4>
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2841a:	2300      	movs	r3, #0
   2841c:	e7f2      	b.n	28404 <tc_cmac_update+0x9a>
	}

	if (data_length > 0) {
   2841e:	b90e      	cbnz	r6, 28424 <tc_cmac_update+0xba>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   28420:	2001      	movs	r0, #1
   28422:	e00c      	b.n	2843e <tc_cmac_update+0xd4>
		_copy(s->leftover, data_length, data, data_length);
   28424:	4633      	mov	r3, r6
   28426:	462a      	mov	r2, r5
   28428:	4631      	mov	r1, r6
   2842a:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2842e:	f7ff fe42 	bl	280b6 <_copy>
		s->leftover_offset = data_length;
   28432:	6466      	str	r6, [r4, #68]	; 0x44
	return TC_CRYPTO_SUCCESS;
   28434:	2001      	movs	r0, #1
   28436:	e002      	b.n	2843e <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
   28438:	2000      	movs	r0, #0
}
   2843a:	4770      	bx	lr
		return  TC_CRYPTO_SUCCESS;
   2843c:	2001      	movs	r0, #1
}
   2843e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TC_CRYPTO_FAIL;
   28442:	2000      	movs	r0, #0
   28444:	e7fb      	b.n	2843e <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
   28446:	2000      	movs	r0, #0
   28448:	e7f9      	b.n	2843e <tc_cmac_update+0xd4>

0002844a <tc_cmac_final>:
{
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   2844a:	b380      	cbz	r0, 284ae <tc_cmac_final+0x64>
{
   2844c:	b538      	push	{r3, r4, r5, lr}
   2844e:	460c      	mov	r4, r1
   28450:	4605      	mov	r5, r0
	if (tag == (uint8_t *) 0 ||
   28452:	b371      	cbz	r1, 284b2 <tc_cmac_final+0x68>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   28454:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   28456:	2a10      	cmp	r2, #16
   28458:	d103      	bne.n	28462 <tc_cmac_final+0x18>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   2845a:	f101 0c10 	add.w	ip, r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2845e:	2300      	movs	r3, #0
   28460:	e019      	b.n	28496 <tc_cmac_final+0x4c>
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   28462:	f102 0030 	add.w	r0, r2, #48	; 0x30
   28466:	f1c2 0210 	rsb	r2, r2, #16
   2846a:	2100      	movs	r1, #0
   2846c:	4420      	add	r0, r4
   2846e:	f7ff fe2f 	bl	280d0 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   28472:	6c63      	ldr	r3, [r4, #68]	; 0x44
   28474:	4423      	add	r3, r4
   28476:	2280      	movs	r2, #128	; 0x80
   28478:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   2847c:	f104 0c20 	add.w	ip, r4, #32
   28480:	e7ed      	b.n	2845e <tc_cmac_final+0x14>
		s->iv[i] ^= s->leftover[i] ^ k[i];
   28482:	5ce2      	ldrb	r2, [r4, r3]
   28484:	18e1      	adds	r1, r4, r3
   28486:	f891 0030 	ldrb.w	r0, [r1, #48]	; 0x30
   2848a:	f81c 1003 	ldrb.w	r1, [ip, r3]
   2848e:	4048      	eors	r0, r1
   28490:	4042      	eors	r2, r0
   28492:	54e2      	strb	r2, [r4, r3]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   28494:	3301      	adds	r3, #1
   28496:	2b0f      	cmp	r3, #15
   28498:	d9f3      	bls.n	28482 <tc_cmac_final+0x38>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   2849a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2849c:	4621      	mov	r1, r4
   2849e:	4628      	mov	r0, r5
   284a0:	f7ee fa50 	bl	16944 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   284a4:	4620      	mov	r0, r4
   284a6:	f7ff ff11 	bl	282cc <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   284aa:	2001      	movs	r0, #1
}
   284ac:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   284ae:	2000      	movs	r0, #0
}
   284b0:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   284b2:	2000      	movs	r0, #0
   284b4:	e7fa      	b.n	284ac <tc_cmac_final+0x62>

000284b6 <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   284b6:	b538      	push	{r3, r4, r5, lr}
   284b8:	4604      	mov	r4, r0

	if (esf != NULL) {
   284ba:	460d      	mov	r5, r1
   284bc:	b111      	cbz	r1, 284c4 <z_arm_fatal_error+0xe>
		esf_dump(esf);
   284be:	4608      	mov	r0, r1
   284c0:	f7ee faba 	bl	16a38 <esf_dump>
	}
	z_fatal_error(reason, esf);
   284c4:	4629      	mov	r1, r5
   284c6:	4620      	mov	r0, r4
   284c8:	f7fc f9d8 	bl	2487c <z_fatal_error>
}
   284cc:	bd38      	pop	{r3, r4, r5, pc}

000284ce <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   284ce:	b508      	push	{r3, lr}
   284d0:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   284d2:	6800      	ldr	r0, [r0, #0]
   284d4:	f7ff ffef 	bl	284b6 <z_arm_fatal_error>
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
   284d8:	bd08      	pop	{r3, pc}

000284da <arch_irq_enable>:
{
   284da:	b508      	push	{r3, lr}
	NVIC_EnableIRQ((IRQn_Type)irq);
   284dc:	b240      	sxtb	r0, r0
   284de:	f7ee fb89 	bl	16bf4 <__NVIC_EnableIRQ>
}
   284e2:	bd08      	pop	{r3, pc}

000284e4 <arch_irq_disable>:
{
   284e4:	b508      	push	{r3, lr}
	NVIC_DisableIRQ((IRQn_Type)irq);
   284e6:	b240      	sxtb	r0, r0
   284e8:	f7ee fb92 	bl	16c10 <__NVIC_DisableIRQ>
}
   284ec:	bd08      	pop	{r3, pc}

000284ee <z_arm_irq_priority_set>:
{
   284ee:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   284f0:	f012 0f01 	tst.w	r2, #1
   284f4:	d104      	bne.n	28500 <z_arm_irq_priority_set+0x12>
		prio += _IRQ_PRIO_OFFSET;
   284f6:	3102      	adds	r1, #2
	NVIC_SetPriority((IRQn_Type)irq, prio);
   284f8:	b240      	sxtb	r0, r0
   284fa:	f7ee fb9b 	bl	16c34 <__NVIC_SetPriority>
}
   284fe:	bd08      	pop	{r3, pc}
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   28500:	2100      	movs	r1, #0
   28502:	e7f9      	b.n	284f8 <z_arm_irq_priority_set+0xa>

00028504 <z_irq_spurious>:
{
   28504:	b508      	push	{r3, lr}
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   28506:	2100      	movs	r1, #0
   28508:	2001      	movs	r0, #1
   2850a:	f7ff ffd4 	bl	284b6 <z_arm_fatal_error>
}
   2850e:	bd08      	pop	{r3, pc}

00028510 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   28510:	b508      	push	{r3, lr}
	handler();
   28512:	f7ee fbc1 	bl	16c98 <z_SysNmiOnReset>
	z_arm_int_exit();
   28516:	f7ee fcb3 	bl	16e80 <z_arm_exc_exit>
}
   2851a:	bd08      	pop	{r3, pc}

0002851c <memory_fault_recoverable>:
}
   2851c:	2000      	movs	r0, #0
   2851e:	4770      	bx	lr

00028520 <fault_handle>:
{
   28520:	b508      	push	{r3, lr}
	*recoverable = false;
   28522:	2300      	movs	r3, #0
   28524:	7013      	strb	r3, [r2, #0]
	switch (fault) {
   28526:	1ecb      	subs	r3, r1, #3
   28528:	2b09      	cmp	r3, #9
   2852a:	d81a      	bhi.n	28562 <fault_handle+0x42>
   2852c:	e8df f003 	tbb	[pc, r3]
   28530:	110d0905 	.word	0x110d0905
   28534:	19191919 	.word	0x19191919
   28538:	1419      	.short	0x1419
		reason = hard_fault(esf, recoverable);
   2853a:	4611      	mov	r1, r2
   2853c:	f7ef fb08 	bl	17b50 <hard_fault>
}
   28540:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   28542:	2100      	movs	r1, #0
   28544:	f7ef f936 	bl	177b4 <mem_manage_fault>
		break;
   28548:	e7fa      	b.n	28540 <fault_handle+0x20>
		reason = bus_fault(esf, 0, recoverable);
   2854a:	2100      	movs	r1, #0
   2854c:	f7ee fd16 	bl	16f7c <bus_fault>
		break;
   28550:	e7f6      	b.n	28540 <fault_handle+0x20>
		reason = usage_fault(esf);
   28552:	f7ee fef1 	bl	17338 <usage_fault>
		break;
   28556:	e7f3      	b.n	28540 <fault_handle+0x20>
		debug_monitor(esf, recoverable);
   28558:	4611      	mov	r1, r2
   2855a:	f7ef f883 	bl	17664 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   2855e:	2000      	movs	r0, #0
		break;
   28560:	e7ee      	b.n	28540 <fault_handle+0x20>
		reserved_exception(esf, fault);
   28562:	f7ef f8b9 	bl	176d8 <reserved_exception>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   28566:	2000      	movs	r0, #0
	return reason;
   28568:	e7ea      	b.n	28540 <fault_handle+0x20>

0002856a <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
   2856a:	6843      	ldr	r3, [r0, #4]
   2856c:	1e5a      	subs	r2, r3, #1
		&&
   2856e:	4213      	tst	r3, r2
   28570:	d106      	bne.n	28580 <mpu_partition_is_valid+0x16>
		&&
   28572:	2b1f      	cmp	r3, #31
   28574:	d906      	bls.n	28584 <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
   28576:	6803      	ldr	r3, [r0, #0]
		&&
   28578:	421a      	tst	r2, r3
   2857a:	d005      	beq.n	28588 <mpu_partition_is_valid+0x1e>
   2857c:	2000      	movs	r0, #0
   2857e:	4770      	bx	lr
   28580:	2000      	movs	r0, #0
   28582:	4770      	bx	lr
   28584:	2000      	movs	r0, #0
   28586:	4770      	bx	lr
   28588:	2001      	movs	r0, #1
}
   2858a:	4770      	bx	lr

0002858c <mpu_configure_region>:
{
   2858c:	b500      	push	{lr}
   2858e:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
   28590:	680b      	ldr	r3, [r1, #0]
   28592:	9301      	str	r3, [sp, #4]
		&new_region->attr, new_region->start, new_region->size);
   28594:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   28596:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
   28598:	2b20      	cmp	r3, #32
   2859a:	d912      	bls.n	285c2 <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
   2859c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   285a0:	d811      	bhi.n	285c6 <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   285a2:	3b01      	subs	r3, #1
   285a4:	fab3 f383 	clz	r3, r3
   285a8:	f1c3 031f 	rsb	r3, r3, #31
   285ac:	005b      	lsls	r3, r3, #1
   285ae:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   285b2:	4313      	orrs	r3, r2
   285b4:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
   285b6:	a901      	add	r1, sp, #4
   285b8:	f7ef fd2a 	bl	18010 <region_allocate_and_init>
}
   285bc:	b005      	add	sp, #20
   285be:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
   285c2:	2308      	movs	r3, #8
   285c4:	e7f5      	b.n	285b2 <mpu_configure_region+0x26>
		return REGION_4G;
   285c6:	233e      	movs	r3, #62	; 0x3e
   285c8:	e7f3      	b.n	285b2 <mpu_configure_region+0x26>

000285ca <arm_core_mpu_configure_static_mpu_regions>:
{
   285ca:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   285cc:	f7ef fdc0 	bl	18150 <mpu_configure_static_mpu_regions>
}
   285d0:	bd08      	pop	{r3, pc}

000285d2 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
   285d2:	b508      	push	{r3, lr}
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
   285d4:	f7ef fdc6 	bl	18164 <mpu_configure_dynamic_mpu_regions>
}
   285d8:	bd08      	pop	{r3, pc}

000285da <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   285da:	4602      	mov	r2, r0
   285dc:	e002      	b.n	285e4 <strcpy+0xa>
		*d = *s;
   285de:	f802 3b01 	strb.w	r3, [r2], #1
		d++;
		s++;
   285e2:	3101      	adds	r1, #1
	while (*s != '\0') {
   285e4:	780b      	ldrb	r3, [r1, #0]
   285e6:	2b00      	cmp	r3, #0
   285e8:	d1f9      	bne.n	285de <strcpy+0x4>
	}

	*d = '\0';
   285ea:	7013      	strb	r3, [r2, #0]

	return dest;
}
   285ec:	4770      	bx	lr

000285ee <strncpy>:

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   285ee:	4603      	mov	r3, r0
   285f0:	b1a2      	cbz	r2, 2861c <strncpy+0x2e>
{
   285f2:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
   285f4:	780c      	ldrb	r4, [r1, #0]
   285f6:	b12c      	cbz	r4, 28604 <strncpy+0x16>
		*d = *s;
   285f8:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
   285fc:	3101      	adds	r1, #1
		d++;
		n--;
   285fe:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
   28600:	2a00      	cmp	r2, #0
   28602:	d1f7      	bne.n	285f4 <strncpy+0x6>
	}

	while (n > 0) {
   28604:	b122      	cbz	r2, 28610 <strncpy+0x22>
		*d = '\0';
   28606:	2100      	movs	r1, #0
   28608:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
   2860c:	3a01      	subs	r2, #1
   2860e:	e7f9      	b.n	28604 <strncpy+0x16>
	}

	return dest;
}
   28610:	bc10      	pop	{r4}
   28612:	4770      	bx	lr
		*d = '\0';
   28614:	2100      	movs	r1, #0
   28616:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   2861a:	3a01      	subs	r2, #1
	while (n > 0) {
   2861c:	2a00      	cmp	r2, #0
   2861e:	d1f9      	bne.n	28614 <strncpy+0x26>
   28620:	4770      	bx	lr

00028622 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   28622:	4603      	mov	r3, r0
	size_t n = 0;
   28624:	2000      	movs	r0, #0

	while (*s != '\0') {
   28626:	e001      	b.n	2862c <strlen+0xa>
		s++;
   28628:	3301      	adds	r3, #1
		n++;
   2862a:	3001      	adds	r0, #1
	while (*s != '\0') {
   2862c:	781a      	ldrb	r2, [r3, #0]
   2862e:	2a00      	cmp	r2, #0
   28630:	d1fa      	bne.n	28628 <strlen+0x6>
	}

	return n;
}
   28632:	4770      	bx	lr

00028634 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   28634:	4603      	mov	r3, r0
	size_t n = 0;
   28636:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   28638:	e001      	b.n	2863e <strnlen+0xa>
		s++;
   2863a:	3301      	adds	r3, #1
		n++;
   2863c:	3001      	adds	r0, #1
	while (*s != '\0' && n < maxlen) {
   2863e:	781a      	ldrb	r2, [r3, #0]
   28640:	b10a      	cbz	r2, 28646 <strnlen+0x12>
   28642:	4288      	cmp	r0, r1
   28644:	d3f9      	bcc.n	2863a <strnlen+0x6>
	}

	return n;
}
   28646:	4770      	bx	lr

00028648 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   28648:	e001      	b.n	2864e <strcmp+0x6>
		s1++;
   2864a:	3001      	adds	r0, #1
		s2++;
   2864c:	3101      	adds	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
   2864e:	7803      	ldrb	r3, [r0, #0]
   28650:	780a      	ldrb	r2, [r1, #0]
   28652:	4293      	cmp	r3, r2
   28654:	d101      	bne.n	2865a <strcmp+0x12>
   28656:	2b00      	cmp	r3, #0
   28658:	d1f7      	bne.n	2864a <strcmp+0x2>
	}

	return *s1 - *s2;
}
   2865a:	1a98      	subs	r0, r3, r2
   2865c:	4770      	bx	lr

0002865e <memcmp>:
int memcmp(const void *m1, const void *m2, size_t n)
{
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   2865e:	4613      	mov	r3, r2
   28660:	b16a      	cbz	r2, 2867e <memcmp+0x20>
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   28662:	3b01      	subs	r3, #1
   28664:	d007      	beq.n	28676 <memcmp+0x18>
   28666:	f890 c000 	ldrb.w	ip, [r0]
   2866a:	780a      	ldrb	r2, [r1, #0]
   2866c:	4594      	cmp	ip, r2
   2866e:	d102      	bne.n	28676 <memcmp+0x18>
		c1++;
   28670:	3001      	adds	r0, #1
		c2++;
   28672:	3101      	adds	r1, #1
   28674:	e7f5      	b.n	28662 <memcmp+0x4>
	}

	return *c1 - *c2;
   28676:	7800      	ldrb	r0, [r0, #0]
   28678:	780b      	ldrb	r3, [r1, #0]
   2867a:	1ac0      	subs	r0, r0, r3
   2867c:	4770      	bx	lr
		return 0;
   2867e:	2000      	movs	r0, #0
}
   28680:	4770      	bx	lr

00028682 <memcpy>:
	const unsigned char *s_byte = (const unsigned char *)s;

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   28682:	ea80 0301 	eor.w	r3, r0, r1
   28686:	f013 0f03 	tst.w	r3, #3
   2868a:	d001      	beq.n	28690 <memcpy+0xe>
	unsigned char *d_byte = (unsigned char *)d;
   2868c:	4603      	mov	r3, r0
   2868e:	e023      	b.n	286d8 <memcpy+0x56>
   28690:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
   28692:	f013 0f03 	tst.w	r3, #3
   28696:	d00f      	beq.n	286b8 <memcpy+0x36>
			if (n == 0) {
   28698:	b30a      	cbz	r2, 286de <memcpy+0x5c>
				return d;
			}
			*(d_byte++) = *(s_byte++);
   2869a:	f811 cb01 	ldrb.w	ip, [r1], #1
   2869e:	f803 cb01 	strb.w	ip, [r3], #1
			n--;
   286a2:	3a01      	subs	r2, #1
   286a4:	e7f5      	b.n	28692 <memcpy+0x10>
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
   286a6:	f811 cb01 	ldrb.w	ip, [r1], #1
   286aa:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
   286ae:	3a01      	subs	r2, #1
	while (n > 0) {
   286b0:	2a00      	cmp	r2, #0
   286b2:	d1f8      	bne.n	286a6 <memcpy+0x24>
	}

	return d;
}
   286b4:	bc10      	pop	{r4}
   286b6:	4770      	bx	lr
		while (n >= sizeof(mem_word_t)) {
   286b8:	2a03      	cmp	r2, #3
   286ba:	d90d      	bls.n	286d8 <memcpy+0x56>
{
   286bc:	b410      	push	{r4}
			*(d_word++) = *(s_word++);
   286be:	f851 4b04 	ldr.w	r4, [r1], #4
   286c2:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
   286c6:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
   286c8:	2a03      	cmp	r2, #3
   286ca:	d8f8      	bhi.n	286be <memcpy+0x3c>
   286cc:	e7f0      	b.n	286b0 <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
   286ce:	f811 cb01 	ldrb.w	ip, [r1], #1
   286d2:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
   286d6:	3a01      	subs	r2, #1
	while (n > 0) {
   286d8:	2a00      	cmp	r2, #0
   286da:	d1f8      	bne.n	286ce <memcpy+0x4c>
   286dc:	4770      	bx	lr
}
   286de:	4770      	bx	lr

000286e0 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   286e0:	fa5f fc81 	uxtb.w	ip, r1
	unsigned char *d_byte = (unsigned char *)buf;
   286e4:	4603      	mov	r3, r0

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   286e6:	e002      	b.n	286ee <memset+0xe>
		if (n == 0) {
			return buf;
		}
		*(d_byte++) = c_byte;
   286e8:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
   286ec:	3a01      	subs	r2, #1
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   286ee:	f013 0f03 	tst.w	r3, #3
   286f2:	d002      	beq.n	286fa <memset+0x1a>
		if (n == 0) {
   286f4:	2a00      	cmp	r2, #0
   286f6:	d1f7      	bne.n	286e8 <memset+0x8>
   286f8:	e00f      	b.n	2871a <memset+0x3a>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
   286fa:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
   286fc:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
   28700:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   28704:	2a03      	cmp	r2, #3
   28706:	d906      	bls.n	28716 <memset+0x36>
		*(d_word++) = c_word;
   28708:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
   2870c:	3a04      	subs	r2, #4
   2870e:	e7f9      	b.n	28704 <memset+0x24>

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
		*(d_byte++) = c_byte;
   28710:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
   28714:	3a01      	subs	r2, #1
	while (n > 0) {
   28716:	2a00      	cmp	r2, #0
   28718:	d1fa      	bne.n	28710 <memset+0x30>
	}

	return buf;
}
   2871a:	4770      	bx	lr

0002871c <_stdout_hook_default>:
}
   2871c:	f04f 30ff 	mov.w	r0, #4294967295
   28720:	4770      	bx	lr

00028722 <sys_arch_reboot>:
{
   28722:	b508      	push	{r3, lr}
    *p_gpregret = val;
   28724:	b2c0      	uxtb	r0, r0
   28726:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2872a:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
	NVIC_SystemReset();
   2872e:	f7ef fd71 	bl	18214 <__NVIC_SystemReset>

00028732 <nrf_power_system_off>:
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   28732:	2301      	movs	r3, #1
   28734:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   28738:	f3bf 8f4f 	dsb	sy
        __WFE();
   2873c:	bf20      	wfe
    while (true)
   2873e:	e7fd      	b.n	2873c <nrf_power_system_off+0xa>

00028740 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   28740:	2806      	cmp	r0, #6
   28742:	d000      	beq.n	28746 <pm_state_set+0x6>
   28744:	4770      	bx	lr
{
   28746:	b508      	push	{r3, lr}
	case PM_STATE_SOFT_OFF:
		nrf_power_system_off(NRF_POWER);
   28748:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   2874c:	f7ff fff1 	bl	28732 <nrf_power_system_off>

00028750 <pm_state_exit_post_ops>:
   28750:	2300      	movs	r3, #0
   28752:	f383 8811 	msr	BASEPRI, r3
   28756:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   2875a:	4770      	bx	lr

0002875c <uuid128_cmp>:

static int uuid128_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   2875c:	b510      	push	{r4, lr}
   2875e:	b08a      	sub	sp, #40	; 0x28
   28760:	460c      	mov	r4, r1
	struct bt_uuid_128 uuid1, uuid2;

	uuid_to_uuid128(u1, &uuid1);
   28762:	a905      	add	r1, sp, #20
   28764:	f7ef fe30 	bl	183c8 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   28768:	4669      	mov	r1, sp
   2876a:	4620      	mov	r0, r4
   2876c:	f7ef fe2c 	bl	183c8 <uuid_to_uuid128>

	return memcmp(uuid1.val, uuid2.val, 16);
   28770:	2210      	movs	r2, #16
   28772:	f10d 0101 	add.w	r1, sp, #1
   28776:	f10d 0015 	add.w	r0, sp, #21
   2877a:	f7ff ff70 	bl	2865e <memcmp>
}
   2877e:	b00a      	add	sp, #40	; 0x28
   28780:	bd10      	pop	{r4, pc}

00028782 <bt_uuid_cmp>:

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   28782:	b508      	push	{r3, lr}
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   28784:	7803      	ldrb	r3, [r0, #0]
   28786:	780a      	ldrb	r2, [r1, #0]
   28788:	4293      	cmp	r3, r2
   2878a:	d107      	bne.n	2879c <bt_uuid_cmp+0x1a>
		return uuid128_cmp(u1, u2);
	}

	switch (u1->type) {
   2878c:	2b01      	cmp	r3, #1
   2878e:	d00c      	beq.n	287aa <bt_uuid_cmp+0x28>
   28790:	2b02      	cmp	r3, #2
   28792:	d00e      	beq.n	287b2 <bt_uuid_cmp+0x30>
   28794:	b12b      	cbz	r3, 287a2 <bt_uuid_cmp+0x20>
   28796:	f06f 0015 	mvn.w	r0, #21
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   2879a:	bd08      	pop	{r3, pc}
		return uuid128_cmp(u1, u2);
   2879c:	f7ff ffde 	bl	2875c <uuid128_cmp>
   287a0:	e7fb      	b.n	2879a <bt_uuid_cmp+0x18>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   287a2:	8840      	ldrh	r0, [r0, #2]
   287a4:	884b      	ldrh	r3, [r1, #2]
   287a6:	1ac0      	subs	r0, r0, r3
   287a8:	e7f7      	b.n	2879a <bt_uuid_cmp+0x18>
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   287aa:	6840      	ldr	r0, [r0, #4]
   287ac:	684b      	ldr	r3, [r1, #4]
   287ae:	1ac0      	subs	r0, r0, r3
   287b0:	e7f3      	b.n	2879a <bt_uuid_cmp+0x18>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   287b2:	2210      	movs	r2, #16
   287b4:	3101      	adds	r1, #1
   287b6:	3001      	adds	r0, #1
   287b8:	f7ff ff51 	bl	2865e <memcmp>
   287bc:	e7ed      	b.n	2879a <bt_uuid_cmp+0x18>

000287be <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
   287be:	b508      	push	{r3, lr}
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   287c0:	2a04      	cmp	r2, #4
   287c2:	d00e      	beq.n	287e2 <bt_uuid_create+0x24>
   287c4:	2a10      	cmp	r2, #16
   287c6:	d01d      	beq.n	28804 <bt_uuid_create+0x46>
   287c8:	2a02      	cmp	r2, #2
   287ca:	d001      	beq.n	287d0 <bt_uuid_create+0x12>
   287cc:	2000      	movs	r0, #0
		break;
	default:
		return false;
	}
	return true;
}
   287ce:	bd08      	pop	{r3, pc}
		uuid->type = BT_UUID_TYPE_16;
   287d0:	2300      	movs	r3, #0
   287d2:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   287d4:	784a      	ldrb	r2, [r1, #1]
   287d6:	780b      	ldrb	r3, [r1, #0]
   287d8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   287dc:	8043      	strh	r3, [r0, #2]
	return true;
   287de:	2001      	movs	r0, #1
		break;
   287e0:	e7f5      	b.n	287ce <bt_uuid_create+0x10>
		uuid->type = BT_UUID_TYPE_32;
   287e2:	2301      	movs	r3, #1
   287e4:	7003      	strb	r3, [r0, #0]
   287e6:	78ca      	ldrb	r2, [r1, #3]
   287e8:	f891 c002 	ldrb.w	ip, [r1, #2]
   287ec:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8
   287f0:	f891 e001 	ldrb.w	lr, [r1, #1]
   287f4:	780a      	ldrb	r2, [r1, #0]
   287f6:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   287fa:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   287fe:	6042      	str	r2, [r0, #4]
	return true;
   28800:	4618      	mov	r0, r3
		break;
   28802:	e7e4      	b.n	287ce <bt_uuid_create+0x10>
		uuid->type = BT_UUID_TYPE_128;
   28804:	2302      	movs	r3, #2
   28806:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   2880a:	2210      	movs	r2, #16
   2880c:	f7ff ff39 	bl	28682 <memcpy>
	return true;
   28810:	2001      	movs	r0, #1
		break;
   28812:	e7dc      	b.n	287ce <bt_uuid_create+0x10>

00028814 <bt_addr_le_create_static>:
{
   28814:	b510      	push	{r4, lr}
   28816:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   28818:	2301      	movs	r3, #1
   2881a:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   2881e:	2106      	movs	r1, #6
   28820:	f7fa fc84 	bl	2312c <bt_rand>
	if (err) {
   28824:	b918      	cbnz	r0, 2882e <bt_addr_le_create_static+0x1a>
	BT_ADDR_SET_STATIC(&addr->a);
   28826:	79a3      	ldrb	r3, [r4, #6]
   28828:	f063 033f 	orn	r3, r3, #63	; 0x3f
   2882c:	71a3      	strb	r3, [r4, #6]
}
   2882e:	bd10      	pop	{r4, pc}

00028830 <sys_put_le64>:
	dst[0] = val;
   28830:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   28832:	f3c0 2307 	ubfx	r3, r0, #8, #8
   28836:	7053      	strb	r3, [r2, #1]
	sys_put_le16(val >> 16, &dst[2]);
   28838:	0c03      	lsrs	r3, r0, #16
	dst[0] = val;
   2883a:	7093      	strb	r3, [r2, #2]
	dst[1] = val >> 8;
   2883c:	0e00      	lsrs	r0, r0, #24
   2883e:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   28840:	7111      	strb	r1, [r2, #4]
	dst[1] = val >> 8;
   28842:	f3c1 2307 	ubfx	r3, r1, #8, #8
   28846:	7153      	strb	r3, [r2, #5]
	sys_put_le16(val >> 16, &dst[2]);
   28848:	0c0b      	lsrs	r3, r1, #16
	dst[0] = val;
   2884a:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   2884c:	0e09      	lsrs	r1, r1, #24
   2884e:	71d1      	strb	r1, [r2, #7]
}
   28850:	4770      	bx	lr

00028852 <sys_get_le64>:
{
   28852:	b500      	push	{lr}
	return ((uint16_t)src[1] << 8) | src[0];
   28854:	79c3      	ldrb	r3, [r0, #7]
   28856:	7981      	ldrb	r1, [r0, #6]
   28858:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   2885c:	7942      	ldrb	r2, [r0, #5]
   2885e:	7903      	ldrb	r3, [r0, #4]
   28860:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   28864:	78c2      	ldrb	r2, [r0, #3]
   28866:	f890 c002 	ldrb.w	ip, [r0, #2]
   2886a:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8
   2886e:	f890 e001 	ldrb.w	lr, [r0, #1]
   28872:	7802      	ldrb	r2, [r0, #0]
   28874:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
}
   28878:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
   2887c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   28880:	f85d fb04 	ldr.w	pc, [sp], #4

00028884 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   28884:	3805      	subs	r0, #5
   28886:	2815      	cmp	r0, #21
   28888:	d80e      	bhi.n	288a8 <bt_hci_evt_get_flags+0x24>
   2888a:	e8df f000 	tbb	[pc, r0]
   2888e:	0d0b      	.short	0x0d0b
   28890:	0d0d0d0d 	.word	0x0d0d0d0d
   28894:	0f0d0d0d 	.word	0x0f0d0d0d
   28898:	0d0d0d0f 	.word	0x0d0d0d0f
   2889c:	0d0d0d0f 	.word	0x0d0d0d0f
   288a0:	0f0d0d0d 	.word	0x0f0d0d0d
   288a4:	2003      	movs	r0, #3
   288a6:	4770      	bx	lr
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   288a8:	2002      	movs	r0, #2
   288aa:	4770      	bx	lr
		return BT_HCI_EVT_FLAG_RECV_PRIO;
   288ac:	2001      	movs	r0, #1
	}
}
   288ae:	4770      	bx	lr

000288b0 <skip_auto_phy_update_on_conn_establishment>:
}
   288b0:	2000      	movs	r0, #0
   288b2:	4770      	bx	lr

000288b4 <hci_vendor_event>:
}
   288b4:	4770      	bx	lr

000288b6 <atomic_test_bit>:
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   288b6:	094b      	lsrs	r3, r1, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   288b8:	f3bf 8f5b 	dmb	ish
   288bc:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
   288c0:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   288c4:	f001 011f 	and.w	r1, r1, #31
   288c8:	4108      	asrs	r0, r1
}
   288ca:	f000 0001 	and.w	r0, r0, #1
   288ce:	4770      	bx	lr

000288d0 <hci_disconn_complete_prio>:
{
   288d0:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   288d2:	68c3      	ldr	r3, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   288d4:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	if (evt->status) {
   288d8:	781b      	ldrb	r3, [r3, #0]
   288da:	b103      	cbz	r3, 288de <hci_disconn_complete_prio+0xe>
}
   288dc:	bd38      	pop	{r3, r4, r5, pc}
	conn = bt_conn_lookup_handle(handle);
   288de:	4620      	mov	r0, r4
   288e0:	f7f3 fbb4 	bl	1c04c <bt_conn_lookup_handle>
	if (!conn) {
   288e4:	4605      	mov	r5, r0
   288e6:	b130      	cbz	r0, 288f6 <hci_disconn_complete_prio+0x26>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   288e8:	2101      	movs	r1, #1
   288ea:	f7f3 fbb9 	bl	1c060 <bt_conn_set_state>
	bt_conn_unref(conn);
   288ee:	4628      	mov	r0, r5
   288f0:	f000 fb09 	bl	28f06 <bt_conn_unref>
   288f4:	e7f2      	b.n	288dc <hci_disconn_complete_prio+0xc>
		conn_handle_disconnected(handle);
   288f6:	4620      	mov	r0, r4
   288f8:	f7ef fe98 	bl	1862c <conn_handle_disconnected>
		return;
   288fc:	e7ee      	b.n	288dc <hci_disconn_complete_prio+0xc>

000288fe <atomic_set_bit_to>:
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   288fe:	f001 0c1f 	and.w	ip, r1, #31
   28902:	2301      	movs	r3, #1
   28904:	fa03 f30c 	lsl.w	r3, r3, ip

	if (val) {
   28908:	b172      	cbz	r2, 28928 <atomic_set_bit_to+0x2a>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2890a:	0949      	lsrs	r1, r1, #5
   2890c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   28910:	f3bf 8f5b 	dmb	ish
   28914:	e850 2f00 	ldrex	r2, [r0]
   28918:	431a      	orrs	r2, r3
   2891a:	e840 2100 	strex	r1, r2, [r0]
   2891e:	2900      	cmp	r1, #0
   28920:	d1f8      	bne.n	28914 <atomic_set_bit_to+0x16>
   28922:	f3bf 8f5b 	dmb	ish
   28926:	4770      	bx	lr
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   28928:	0949      	lsrs	r1, r1, #5
   2892a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   2892e:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   28930:	f3bf 8f5b 	dmb	ish
   28934:	e850 2f00 	ldrex	r2, [r0]
   28938:	401a      	ands	r2, r3
   2893a:	e840 2100 	strex	r1, r2, [r0]
   2893e:	2900      	cmp	r1, #0
   28940:	d1f8      	bne.n	28934 <atomic_set_bit_to+0x36>
   28942:	f3bf 8f5b 	dmb	ish
	}
}
   28946:	4770      	bx	lr

00028948 <atomic_test_and_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   28948:	f001 021f 	and.w	r2, r1, #31
   2894c:	2301      	movs	r3, #1
   2894e:	4093      	lsls	r3, r2
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   28950:	0949      	lsrs	r1, r1, #5
   28952:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   28956:	f3bf 8f5b 	dmb	ish
   2895a:	e850 2f00 	ldrex	r2, [r0]
   2895e:	ea42 0103 	orr.w	r1, r2, r3
   28962:	e840 1c00 	strex	ip, r1, [r0]
   28966:	f1bc 0f00 	cmp.w	ip, #0
   2896a:	d1f6      	bne.n	2895a <atomic_test_and_set_bit+0x12>
   2896c:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   28970:	4213      	tst	r3, r2
}
   28972:	bf14      	ite	ne
   28974:	2001      	movne	r0, #1
   28976:	2000      	moveq	r0, #0
   28978:	4770      	bx	lr

0002897a <hci_le_read_remote_features>:
{
   2897a:	b538      	push	{r3, r4, r5, lr}
   2897c:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   2897e:	2102      	movs	r1, #2
   28980:	f242 0016 	movw	r0, #8214	; 0x2016
   28984:	f7f0 fdcc 	bl	19520 <bt_hci_cmd_create>
	if (!buf) {
   28988:	b168      	cbz	r0, 289a6 <hci_le_read_remote_features+0x2c>
   2898a:	4605      	mov	r5, r0
   2898c:	2102      	movs	r1, #2
   2898e:	300c      	adds	r0, #12
   28990:	f002 fb7e 	bl	2b090 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   28994:	8823      	ldrh	r3, [r4, #0]
   28996:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   28998:	2200      	movs	r2, #0
   2899a:	4629      	mov	r1, r5
   2899c:	f242 0016 	movw	r0, #8214	; 0x2016
   289a0:	f7f0 fdfc 	bl	1959c <bt_hci_cmd_send_sync>
}
   289a4:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   289a6:	f06f 0068 	mvn.w	r0, #104	; 0x68
   289aa:	e7fb      	b.n	289a4 <hci_le_read_remote_features+0x2a>

000289ac <bt_le_create_conn>:
{
   289ac:	b508      	push	{r3, lr}
	return bt_le_create_conn_legacy(conn);
   289ae:	f7f1 f999 	bl	19ce4 <bt_le_create_conn_legacy>
}
   289b2:	bd08      	pop	{r3, pc}

000289b4 <bt_hci_disconnect>:
{
   289b4:	b570      	push	{r4, r5, r6, lr}
   289b6:	4605      	mov	r5, r0
   289b8:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   289ba:	2103      	movs	r1, #3
   289bc:	f240 4006 	movw	r0, #1030	; 0x406
   289c0:	f7f0 fdae 	bl	19520 <bt_hci_cmd_create>
	if (!buf) {
   289c4:	b168      	cbz	r0, 289e2 <bt_hci_disconnect+0x2e>
   289c6:	4606      	mov	r6, r0
   289c8:	2103      	movs	r1, #3
   289ca:	300c      	adds	r0, #12
   289cc:	f002 fb60 	bl	2b090 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
   289d0:	8005      	strh	r5, [r0, #0]
	disconn->reason = reason;
   289d2:	7084      	strb	r4, [r0, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   289d4:	2200      	movs	r2, #0
   289d6:	4631      	mov	r1, r6
   289d8:	f240 4006 	movw	r0, #1030	; 0x406
   289dc:	f7f0 fdde 	bl	1959c <bt_hci_cmd_send_sync>
}
   289e0:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   289e2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   289e6:	e7fb      	b.n	289e0 <bt_hci_disconnect+0x2c>

000289e8 <bt_le_set_data_len>:
{
   289e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   289ea:	4606      	mov	r6, r0
   289ec:	460f      	mov	r7, r1
   289ee:	4614      	mov	r4, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   289f0:	2106      	movs	r1, #6
   289f2:	f242 0022 	movw	r0, #8226	; 0x2022
   289f6:	f7f0 fd93 	bl	19520 <bt_hci_cmd_create>
	if (!buf) {
   289fa:	b178      	cbz	r0, 28a1c <bt_le_set_data_len+0x34>
   289fc:	4605      	mov	r5, r0
   289fe:	2106      	movs	r1, #6
   28a00:	300c      	adds	r0, #12
   28a02:	f002 fb45 	bl	2b090 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   28a06:	8833      	ldrh	r3, [r6, #0]
   28a08:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   28a0a:	8047      	strh	r7, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   28a0c:	8084      	strh	r4, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   28a0e:	2200      	movs	r2, #0
   28a10:	4629      	mov	r1, r5
   28a12:	f242 0022 	movw	r0, #8226	; 0x2022
   28a16:	f7f0 fdc1 	bl	1959c <bt_hci_cmd_send_sync>
}
   28a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   28a1c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   28a20:	e7fb      	b.n	28a1a <bt_le_set_data_len+0x32>

00028a22 <bt_le_set_phy>:
{
   28a22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28a26:	4607      	mov	r7, r0
   28a28:	460e      	mov	r6, r1
   28a2a:	4615      	mov	r5, r2
   28a2c:	461c      	mov	r4, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   28a2e:	2107      	movs	r1, #7
   28a30:	f242 0032 	movw	r0, #8242	; 0x2032
   28a34:	f7f0 fd74 	bl	19520 <bt_hci_cmd_create>
	if (!buf) {
   28a38:	b1a8      	cbz	r0, 28a66 <bt_le_set_phy+0x44>
   28a3a:	4680      	mov	r8, r0
   28a3c:	2107      	movs	r1, #7
   28a3e:	300c      	adds	r0, #12
   28a40:	f002 fb26 	bl	2b090 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   28a44:	883b      	ldrh	r3, [r7, #0]
   28a46:	8003      	strh	r3, [r0, #0]
	cp->all_phys = all_phys;
   28a48:	7086      	strb	r6, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   28a4a:	70c5      	strb	r5, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   28a4c:	7104      	strb	r4, [r0, #4]
	cp->phy_opts = phy_opts;
   28a4e:	f89d 3018 	ldrb.w	r3, [sp, #24]
   28a52:	f8a0 3005 	strh.w	r3, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   28a56:	2200      	movs	r2, #0
   28a58:	4641      	mov	r1, r8
   28a5a:	f242 0032 	movw	r0, #8242	; 0x2032
   28a5e:	f7f0 fd9d 	bl	1959c <bt_hci_cmd_send_sync>
}
   28a62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOBUFS;
   28a66:	f06f 0068 	mvn.w	r0, #104	; 0x68
   28a6a:	e7fa      	b.n	28a62 <bt_le_set_phy+0x40>

00028a6c <enh_conn_complete>:
{
   28a6c:	b508      	push	{r3, lr}
	bt_hci_le_enh_conn_complete(evt);
   28a6e:	f7f1 fb29 	bl	1a0c4 <bt_hci_le_enh_conn_complete>
}
   28a72:	bd08      	pop	{r3, pc}

00028a74 <le_enh_conn_complete>:
{
   28a74:	b508      	push	{r3, lr}
	enh_conn_complete((void *)buf->data);
   28a76:	68c0      	ldr	r0, [r0, #12]
   28a78:	f7ff fff8 	bl	28a6c <enh_conn_complete>
}
   28a7c:	bd08      	pop	{r3, pc}

00028a7e <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   28a7e:	8802      	ldrh	r2, [r0, #0]
   28a80:	8843      	ldrh	r3, [r0, #2]
   28a82:	429a      	cmp	r2, r3
   28a84:	d817      	bhi.n	28ab6 <bt_le_conn_params_valid+0x38>
   28a86:	2a05      	cmp	r2, #5
   28a88:	d917      	bls.n	28aba <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
   28a8a:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   28a8e:	d816      	bhi.n	28abe <bt_le_conn_params_valid+0x40>
	if (param->latency > 499) {
   28a90:	8881      	ldrh	r1, [r0, #4]
   28a92:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
   28a96:	d214      	bcs.n	28ac2 <bt_le_conn_params_valid+0x44>
	if (param->timeout < 10 || param->timeout > 3200 ||
   28a98:	88c0      	ldrh	r0, [r0, #6]
   28a9a:	f1a0 020a 	sub.w	r2, r0, #10
   28a9e:	b292      	uxth	r2, r2
   28aa0:	f640 4c76 	movw	ip, #3190	; 0xc76
   28aa4:	4562      	cmp	r2, ip
   28aa6:	d80e      	bhi.n	28ac6 <bt_le_conn_params_valid+0x48>
	     ((1U + param->latency) * param->interval_max))) {
   28aa8:	fb01 3303 	mla	r3, r1, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   28aac:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   28ab0:	d20b      	bcs.n	28aca <bt_le_conn_params_valid+0x4c>
	return true;
   28ab2:	2001      	movs	r0, #1
   28ab4:	4770      	bx	lr
		return false;
   28ab6:	2000      	movs	r0, #0
   28ab8:	4770      	bx	lr
   28aba:	2000      	movs	r0, #0
   28abc:	4770      	bx	lr
   28abe:	2000      	movs	r0, #0
   28ac0:	4770      	bx	lr
		return false;
   28ac2:	2000      	movs	r0, #0
   28ac4:	4770      	bx	lr
		return false;
   28ac6:	2000      	movs	r0, #0
   28ac8:	4770      	bx	lr
   28aca:	2000      	movs	r0, #0
}
   28acc:	4770      	bx	lr

00028ace <le_conn_param_req_reply>:
{
   28ace:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28ad0:	4606      	mov	r6, r0
   28ad2:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   28ad4:	210e      	movs	r1, #14
   28ad6:	f242 0020 	movw	r0, #8224	; 0x2020
   28ada:	f7f0 fd21 	bl	19520 <bt_hci_cmd_create>
	if (!buf) {
   28ade:	b1c0      	cbz	r0, 28b12 <le_conn_param_req_reply+0x44>
   28ae0:	4607      	mov	r7, r0
   28ae2:	210e      	movs	r1, #14
   28ae4:	300c      	adds	r0, #12
   28ae6:	f002 fad3 	bl	2b090 <net_buf_simple_add>
   28aea:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
   28aec:	220e      	movs	r2, #14
   28aee:	2100      	movs	r1, #0
   28af0:	f7ff fdf6 	bl	286e0 <memset>
	cp->handle = sys_cpu_to_le16(handle);
   28af4:	8026      	strh	r6, [r4, #0]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   28af6:	882b      	ldrh	r3, [r5, #0]
   28af8:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   28afa:	886b      	ldrh	r3, [r5, #2]
   28afc:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   28afe:	88ab      	ldrh	r3, [r5, #4]
   28b00:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   28b02:	88eb      	ldrh	r3, [r5, #6]
   28b04:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   28b06:	4639      	mov	r1, r7
   28b08:	f242 0020 	movw	r0, #8224	; 0x2020
   28b0c:	f7f1 fc56 	bl	1a3bc <bt_hci_cmd_send>
}
   28b10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   28b12:	f06f 0068 	mvn.w	r0, #104	; 0x68
   28b16:	e7fb      	b.n	28b10 <le_conn_param_req_reply+0x42>

00028b18 <bt_init>:
{
   28b18:	b510      	push	{r4, lr}
	err = hci_init();
   28b1a:	f7f1 f87f 	bl	19c1c <hci_init>
	if (err) {
   28b1e:	4604      	mov	r4, r0
   28b20:	b108      	cbz	r0, 28b26 <bt_init+0xe>
}
   28b22:	4620      	mov	r0, r4
   28b24:	bd10      	pop	{r4, pc}
		err = bt_conn_init();
   28b26:	f7f3 fff7 	bl	1cb18 <bt_conn_init>
		if (err) {
   28b2a:	4604      	mov	r4, r0
   28b2c:	2800      	cmp	r0, #0
   28b2e:	d1f8      	bne.n	28b22 <bt_init+0xa>
	bt_finalize_init();
   28b30:	f7f1 ff5e 	bl	1a9f0 <bt_finalize_init>
	return 0;
   28b34:	e7f5      	b.n	28b22 <bt_init+0xa>

00028b36 <bt_get_appearance>:
}
   28b36:	2000      	movs	r0, #0
   28b38:	4770      	bx	lr

00028b3a <bt_addr_le_is_bonded>:
}
   28b3a:	2000      	movs	r0, #0
   28b3c:	4770      	bx	lr

00028b3e <is_adv_using_rand_addr>:
}
   28b3e:	2000      	movs	r0, #0
   28b40:	4770      	bx	lr

00028b42 <bt_lookup_id_addr>:
	CHECKIF(id >= CONFIG_BT_ID_MAX || addr == NULL) {
   28b42:	b910      	cbnz	r0, 28b4a <bt_lookup_id_addr+0x8>
   28b44:	b119      	cbz	r1, 28b4e <bt_lookup_id_addr+0xc>
	return addr;
   28b46:	4608      	mov	r0, r1
   28b48:	4770      	bx	lr
		return NULL;
   28b4a:	2000      	movs	r0, #0
   28b4c:	4770      	bx	lr
   28b4e:	2000      	movs	r0, #0
}
   28b50:	4770      	bx	lr

00028b52 <bt_id_set_private_addr>:
	CHECKIF(id >= CONFIG_BT_ID_MAX) {
   28b52:	b998      	cbnz	r0, 28b7c <bt_id_set_private_addr+0x2a>
{
   28b54:	b500      	push	{lr}
   28b56:	b083      	sub	sp, #12
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   28b58:	2106      	movs	r1, #6
   28b5a:	4668      	mov	r0, sp
   28b5c:	f7fa fae6 	bl	2312c <bt_rand>
	if (err) {
   28b60:	b110      	cbz	r0, 28b68 <bt_id_set_private_addr+0x16>
}
   28b62:	b003      	add	sp, #12
   28b64:	f85d fb04 	ldr.w	pc, [sp], #4
	BT_ADDR_SET_NRPA(&nrpa);
   28b68:	f89d 3005 	ldrb.w	r3, [sp, #5]
   28b6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   28b70:	f88d 3005 	strb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   28b74:	4668      	mov	r0, sp
   28b76:	f7f2 f8d9 	bl	1ad2c <set_random_address>
	if (err)  {
   28b7a:	e7f2      	b.n	28b62 <bt_id_set_private_addr+0x10>
		return -EINVAL;
   28b7c:	f06f 0015 	mvn.w	r0, #21
}
   28b80:	4770      	bx	lr

00028b82 <bt_id_scan_random_addr_check>:
}
   28b82:	2001      	movs	r0, #1
   28b84:	4770      	bx	lr

00028b86 <get_adv_props_legacy>:
	switch (evt_type) {
   28b86:	2804      	cmp	r0, #4
   28b88:	d80a      	bhi.n	28ba0 <get_adv_props_legacy+0x1a>
   28b8a:	e8df f000 	tbb	[pc, r0]
   28b8e:	0b03      	.short	0x0b03
   28b90:	050c      	.short	0x050c
   28b92:	07          	.byte	0x07
   28b93:	00          	.byte	0x00
   28b94:	2003      	movs	r0, #3
   28b96:	4770      	bx	lr
		return 0;
   28b98:	2000      	movs	r0, #0
   28b9a:	4770      	bx	lr
		return BT_GAP_ADV_PROP_SCAN_RESPONSE |
   28b9c:	200a      	movs	r0, #10
   28b9e:	4770      	bx	lr
		return 0;
   28ba0:	2000      	movs	r0, #0
   28ba2:	4770      	bx	lr
		return BT_GAP_ADV_PROP_CONNECTABLE |
   28ba4:	2005      	movs	r0, #5
}
   28ba6:	4770      	bx	lr

00028ba8 <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   28ba8:	f001 0c1f 	and.w	ip, r1, #31
   28bac:	2301      	movs	r3, #1
   28bae:	fa03 f30c 	lsl.w	r3, r3, ip
	if (val) {
   28bb2:	b172      	cbz	r2, 28bd2 <atomic_set_bit_to+0x2a>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   28bb4:	0949      	lsrs	r1, r1, #5
   28bb6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   28bba:	f3bf 8f5b 	dmb	ish
   28bbe:	e850 2f00 	ldrex	r2, [r0]
   28bc2:	431a      	orrs	r2, r3
   28bc4:	e840 2100 	strex	r1, r2, [r0]
   28bc8:	2900      	cmp	r1, #0
   28bca:	d1f8      	bne.n	28bbe <atomic_set_bit_to+0x16>
   28bcc:	f3bf 8f5b 	dmb	ish
   28bd0:	4770      	bx	lr
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   28bd2:	0949      	lsrs	r1, r1, #5
   28bd4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   28bd8:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   28bda:	f3bf 8f5b 	dmb	ish
   28bde:	e850 2f00 	ldrex	r2, [r0]
   28be2:	401a      	ands	r2, r3
   28be4:	e840 2100 	strex	r1, r2, [r0]
   28be8:	2900      	cmp	r1, #0
   28bea:	d1f8      	bne.n	28bde <atomic_set_bit_to+0x36>
   28bec:	f3bf 8f5b 	dmb	ish
}
   28bf0:	4770      	bx	lr

00028bf2 <bt_le_scan_set_enable>:
{
   28bf2:	b508      	push	{r3, lr}
	return bt_le_scan_set_enable_legacy(enable);
   28bf4:	f7f2 fc20 	bl	1b438 <bt_le_scan_set_enable_legacy>
}
   28bf8:	bd08      	pop	{r3, pc}

00028bfa <start_passive_scan>:
{
   28bfa:	b508      	push	{r3, lr}
	if (fast_scan) {
   28bfc:	b128      	cbz	r0, 28c0a <start_passive_scan+0x10>
		window = BT_GAP_SCAN_FAST_WINDOW;
   28bfe:	2230      	movs	r2, #48	; 0x30
		interval = BT_GAP_SCAN_FAST_INTERVAL;
   28c00:	2160      	movs	r1, #96	; 0x60
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
   28c02:	2000      	movs	r0, #0
   28c04:	f7f2 fc54 	bl	1b4b0 <start_le_scan_legacy>
}
   28c08:	bd08      	pop	{r3, pc}
		window = CONFIG_BT_BACKGROUND_SCAN_WINDOW;
   28c0a:	2212      	movs	r2, #18
		interval = CONFIG_BT_BACKGROUND_SCAN_INTERVAL;
   28c0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
   28c10:	e7f7      	b.n	28c02 <start_passive_scan+0x8>

00028c12 <sys_slist_remove>:
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   28c12:	460b      	mov	r3, r1
   28c14:	b139      	cbz	r1, 28c26 <sys_slist_remove+0x14>
	return node->next;
   28c16:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
   28c18:	6019      	str	r1, [r3, #0]
	return list->tail;
   28c1a:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   28c1c:	428a      	cmp	r2, r1
   28c1e:	d009      	beq.n	28c34 <sys_slist_remove+0x22>
	parent->next = child;
   28c20:	2300      	movs	r3, #0
   28c22:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   28c24:	4770      	bx	lr
	return node->next;
   28c26:	6813      	ldr	r3, [r2, #0]
	list->head = node;
   28c28:	6003      	str	r3, [r0, #0]
	return list->tail;
   28c2a:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   28c2c:	428a      	cmp	r2, r1
   28c2e:	d1f7      	bne.n	28c20 <sys_slist_remove+0xe>
	list->tail = node;
   28c30:	6043      	str	r3, [r0, #4]
}
   28c32:	e7f5      	b.n	28c20 <sys_slist_remove+0xe>
	list->tail = node;
   28c34:	6043      	str	r3, [r0, #4]
}
   28c36:	e7f3      	b.n	28c20 <sys_slist_remove+0xe>

00028c38 <sys_slist_find_and_remove>:
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   28c38:	b508      	push	{r3, lr}
   28c3a:	460a      	mov	r2, r1
	return list->head;
   28c3c:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   28c3e:	2100      	movs	r1, #0
   28c40:	e001      	b.n	28c46 <sys_slist_find_and_remove+0xe>
   28c42:	4619      	mov	r1, r3
   28c44:	681b      	ldr	r3, [r3, #0]
   28c46:	b12b      	cbz	r3, 28c54 <sys_slist_find_and_remove+0x1c>
   28c48:	4293      	cmp	r3, r2
   28c4a:	d1fa      	bne.n	28c42 <sys_slist_find_and_remove+0xa>
   28c4c:	f7ff ffe1 	bl	28c12 <sys_slist_remove>
   28c50:	2001      	movs	r0, #1
   28c52:	e000      	b.n	28c56 <sys_slist_find_and_remove+0x1e>
   28c54:	2000      	movs	r0, #0
   28c56:	bd08      	pop	{r3, pc}

00028c58 <bt_conn_set_param_le>:
	conn->le.interval_min = param->interval_min;
   28c58:	880b      	ldrh	r3, [r1, #0]
   28c5a:	f8a0 30a0 	strh.w	r3, [r0, #160]	; 0xa0
	conn->le.interval_max = param->interval_max;
   28c5e:	884b      	ldrh	r3, [r1, #2]
   28c60:	f8a0 30a2 	strh.w	r3, [r0, #162]	; 0xa2
	conn->le.latency = param->latency;
   28c64:	888b      	ldrh	r3, [r1, #4]
   28c66:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
	conn->le.timeout = param->timeout;
   28c6a:	88cb      	ldrh	r3, [r1, #6]
   28c6c:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
}
   28c70:	4770      	bx	lr

00028c72 <tx_notify>:
{
   28c72:	b570      	push	{r4, r5, r6, lr}
   28c74:	4604      	mov	r4, r0
	LOG_DBG("conn %p", conn);
   28c76:	e00c      	b.n	28c92 <tx_notify+0x20>
   28c78:	f383 8811 	msr	BASEPRI, r3
   28c7c:	f3bf 8f6f 	isb	sy
		if (!tx) {
   28c80:	b1c8      	cbz	r0, 28cb6 <tx_notify+0x44>
		cb = tx->cb;
   28c82:	6845      	ldr	r5, [r0, #4]
		user_data = tx->user_data;
   28c84:	6886      	ldr	r6, [r0, #8]
		tx_free(tx);
   28c86:	f7f2 fe91 	bl	1b9ac <tx_free>
		cb(conn, user_data, 0);
   28c8a:	2200      	movs	r2, #0
   28c8c:	4631      	mov	r1, r6
   28c8e:	4620      	mov	r0, r4
   28c90:	47a8      	blx	r5
	__asm__ volatile(
   28c92:	f04f 0240 	mov.w	r2, #64	; 0x40
   28c96:	f3ef 8311 	mrs	r3, BASEPRI
   28c9a:	f382 8812 	msr	BASEPRI_MAX, r2
   28c9e:	f3bf 8f6f 	isb	sy
	return list->head;
   28ca2:	6a20      	ldr	r0, [r4, #32]
		if (!sys_slist_is_empty(&conn->tx_complete)) {
   28ca4:	2800      	cmp	r0, #0
   28ca6:	d0e7      	beq.n	28c78 <tx_notify+0x6>
	return node->next;
   28ca8:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   28caa:	6222      	str	r2, [r4, #32]
	return list->tail;
   28cac:	6a61      	ldr	r1, [r4, #36]	; 0x24
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   28cae:	4281      	cmp	r1, r0
   28cb0:	d1e2      	bne.n	28c78 <tx_notify+0x6>
	list->tail = node;
   28cb2:	6262      	str	r2, [r4, #36]	; 0x24
}
   28cb4:	e7e0      	b.n	28c78 <tx_notify+0x6>
}
   28cb6:	bd70      	pop	{r4, r5, r6, pc}

00028cb8 <tx_complete_work>:
{
   28cb8:	b508      	push	{r3, lr}
	tx_notify(conn);
   28cba:	3828      	subs	r0, #40	; 0x28
   28cbc:	f7ff ffd9 	bl	28c72 <tx_notify>
}
   28cc0:	bd08      	pop	{r3, pc}

00028cc2 <conn_tx_destroy>:
{
   28cc2:	b570      	push	{r4, r5, r6, lr}
   28cc4:	4604      	mov	r4, r0
   28cc6:	4608      	mov	r0, r1
	bt_conn_tx_cb_t cb = tx->cb;
   28cc8:	684d      	ldr	r5, [r1, #4]
	void *user_data = tx->user_data;
   28cca:	688e      	ldr	r6, [r1, #8]
	tx_free(tx);
   28ccc:	f7f2 fe6e 	bl	1b9ac <tx_free>
	cb(conn, user_data, -ESHUTDOWN);
   28cd0:	f06f 026d 	mvn.w	r2, #109	; 0x6d
   28cd4:	4631      	mov	r1, r6
   28cd6:	4620      	mov	r0, r4
   28cd8:	47a8      	blx	r5
}
   28cda:	bd70      	pop	{r4, r5, r6, pc}

00028cdc <atomic_test_and_clear_bit>:
{
   28cdc:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   28cde:	f001 021f 	and.w	r2, r1, #31
   28ce2:	2301      	movs	r3, #1
   28ce4:	4093      	lsls	r3, r2
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   28ce6:	0949      	lsrs	r1, r1, #5
   28ce8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   28cec:	43d9      	mvns	r1, r3
   28cee:	f3bf 8f5b 	dmb	ish
   28cf2:	e850 2f00 	ldrex	r2, [r0]
   28cf6:	ea02 0c01 	and.w	ip, r2, r1
   28cfa:	e840 ce00 	strex	lr, ip, [r0]
   28cfe:	f1be 0f00 	cmp.w	lr, #0
   28d02:	d1f6      	bne.n	28cf2 <atomic_test_and_clear_bit+0x16>
   28d04:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   28d08:	4213      	tst	r3, r2
}
   28d0a:	bf14      	ite	ne
   28d0c:	2001      	movne	r0, #1
   28d0e:	2000      	moveq	r0, #0
   28d10:	f85d fb04 	ldr.w	pc, [sp], #4

00028d14 <atomic_test_bit>:
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   28d14:	094b      	lsrs	r3, r1, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   28d16:	f3bf 8f5b 	dmb	ish
   28d1a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
   28d1e:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   28d22:	f001 011f 	and.w	r1, r1, #31
   28d26:	4108      	asrs	r0, r1
}
   28d28:	f000 0001 	and.w	r0, r0, #1
   28d2c:	4770      	bx	lr

00028d2e <send_acl>:
{
   28d2e:	b570      	push	{r4, r5, r6, lr}
   28d30:	4605      	mov	r5, r0
   28d32:	460c      	mov	r4, r1
	switch (flags) {
   28d34:	2a03      	cmp	r2, #3
   28d36:	d818      	bhi.n	28d6a <send_acl+0x3c>
   28d38:	e8df f002 	tbb	[pc, r2]
   28d3c:	15021502 	.word	0x15021502
   28d40:	2600      	movs	r6, #0
	return net_buf_simple_push(&buf->b, len);
   28d42:	2104      	movs	r1, #4
   28d44:	f104 000c 	add.w	r0, r4, #12
   28d48:	f002 f9bc 	bl	2b0c4 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   28d4c:	882b      	ldrh	r3, [r5, #0]
   28d4e:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
   28d52:	8003      	strh	r3, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   28d54:	8a23      	ldrh	r3, [r4, #16]
   28d56:	3b04      	subs	r3, #4
   28d58:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   28d5a:	2302      	movs	r3, #2
   28d5c:	7623      	strb	r3, [r4, #24]
	return bt_send(buf);
   28d5e:	4620      	mov	r0, r4
   28d60:	f7f1 fb22 	bl	1a3a8 <bt_send>
}
   28d64:	bd70      	pop	{r4, r5, r6, pc}
		flags = BT_ACL_CONT;
   28d66:	2601      	movs	r6, #1
   28d68:	e7eb      	b.n	28d42 <send_acl+0x14>
	switch (flags) {
   28d6a:	f06f 0015 	mvn.w	r0, #21
   28d6e:	e7f9      	b.n	28d64 <send_acl+0x36>

00028d70 <process_unack_tx>:
{
   28d70:	b510      	push	{r4, lr}
   28d72:	4604      	mov	r4, r0
   28d74:	e028      	b.n	28dc8 <process_unack_tx+0x58>
			conn->pending_no_cb--;
   28d76:	3a01      	subs	r2, #1
   28d78:	61e2      	str	r2, [r4, #28]
	__asm__ volatile(
   28d7a:	f383 8811 	msr	BASEPRI, r3
   28d7e:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   28d82:	4620      	mov	r0, r4
   28d84:	f7f2 fe36 	bl	1b9f4 <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   28d88:	f7fc fa22 	bl	251d0 <z_impl_k_sem_give>
			continue;
   28d8c:	e01c      	b.n	28dc8 <process_unack_tx+0x58>
   28d8e:	f383 8811 	msr	BASEPRI, r3
   28d92:	f3bf 8f6f 	isb	sy
		if (!node) {
   28d96:	b361      	cbz	r1, 28df2 <process_unack_tx+0x82>
	__asm__ volatile(
   28d98:	f04f 0240 	mov.w	r2, #64	; 0x40
   28d9c:	f3ef 8311 	mrs	r3, BASEPRI
   28da0:	f382 8812 	msr	BASEPRI_MAX, r2
   28da4:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   28da8:	68ca      	ldr	r2, [r1, #12]
   28daa:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   28dac:	2200      	movs	r2, #0
   28dae:	60ca      	str	r2, [r1, #12]
	__asm__ volatile(
   28db0:	f383 8811 	msr	BASEPRI, r3
   28db4:	f3bf 8f6f 	isb	sy
		conn_tx_destroy(conn, tx);
   28db8:	4620      	mov	r0, r4
   28dba:	f7ff ff82 	bl	28cc2 <conn_tx_destroy>
		k_sem_give(bt_conn_get_pkts(conn));
   28dbe:	4620      	mov	r0, r4
   28dc0:	f7f2 fe18 	bl	1b9f4 <bt_conn_get_pkts>
   28dc4:	f7fc fa04 	bl	251d0 <z_impl_k_sem_give>
	__asm__ volatile(
   28dc8:	f04f 0240 	mov.w	r2, #64	; 0x40
   28dcc:	f3ef 8311 	mrs	r3, BASEPRI
   28dd0:	f382 8812 	msr	BASEPRI_MAX, r2
   28dd4:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   28dd8:	69e2      	ldr	r2, [r4, #28]
   28dda:	2a00      	cmp	r2, #0
   28ddc:	d1cb      	bne.n	28d76 <process_unack_tx+0x6>
	return list->head;
   28dde:	6961      	ldr	r1, [r4, #20]
Z_GENLIST_GET(slist, snode)
   28de0:	2900      	cmp	r1, #0
   28de2:	d0d4      	beq.n	28d8e <process_unack_tx+0x1e>
	return node->next;
   28de4:	680a      	ldr	r2, [r1, #0]
	list->head = node;
   28de6:	6162      	str	r2, [r4, #20]
	return list->tail;
   28de8:	69a0      	ldr	r0, [r4, #24]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   28dea:	4281      	cmp	r1, r0
   28dec:	d1cf      	bne.n	28d8e <process_unack_tx+0x1e>
	list->tail = node;
   28dee:	61a2      	str	r2, [r4, #24]
}
   28df0:	e7cd      	b.n	28d8e <process_unack_tx+0x1e>
}
   28df2:	bd10      	pop	{r4, pc}

00028df4 <bt_conn_reset_rx_state>:
{
   28df4:	b510      	push	{r4, lr}
   28df6:	4604      	mov	r4, r0
	if (!conn->rx) {
   28df8:	6900      	ldr	r0, [r0, #16]
   28dfa:	b118      	cbz	r0, 28e04 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   28dfc:	f002 f901 	bl	2b002 <net_buf_unref>
	conn->rx = NULL;
   28e00:	2300      	movs	r3, #0
   28e02:	6123      	str	r3, [r4, #16]
}
   28e04:	bd10      	pop	{r4, pc}

00028e06 <conn_cleanup>:
{
   28e06:	b538      	push	{r3, r4, r5, lr}
   28e08:	4605      	mov	r5, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   28e0a:	2200      	movs	r2, #0
   28e0c:	2300      	movs	r3, #0
   28e0e:	f105 0038 	add.w	r0, r5, #56	; 0x38
   28e12:	f002 f8b6 	bl	2af82 <net_buf_get>
   28e16:	4603      	mov	r3, r0
   28e18:	b160      	cbz	r0, 28e34 <conn_cleanup+0x2e>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   28e1a:	699c      	ldr	r4, [r3, #24]
		tx_data(buf)->tx = NULL;
   28e1c:	2200      	movs	r2, #0
   28e1e:	619a      	str	r2, [r3, #24]
		net_buf_unref(buf);
   28e20:	4618      	mov	r0, r3
   28e22:	f002 f8ee 	bl	2b002 <net_buf_unref>
		if (tx) {
   28e26:	2c00      	cmp	r4, #0
   28e28:	d0ef      	beq.n	28e0a <conn_cleanup+0x4>
			conn_tx_destroy(conn, tx);
   28e2a:	4621      	mov	r1, r4
   28e2c:	4628      	mov	r0, r5
   28e2e:	f7ff ff48 	bl	28cc2 <conn_tx_destroy>
   28e32:	e7ea      	b.n	28e0a <conn_cleanup+0x4>
	bt_conn_reset_rx_state(conn);
   28e34:	4628      	mov	r0, r5
   28e36:	f7ff ffdd 	bl	28df4 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   28e3a:	2200      	movs	r2, #0
   28e3c:	2300      	movs	r3, #0
   28e3e:	f105 0058 	add.w	r0, r5, #88	; 0x58
   28e42:	f7fc fb95 	bl	25570 <k_work_reschedule>
}
   28e46:	bd38      	pop	{r3, r4, r5, pc}

00028e48 <conn_prepare_events>:
{
   28e48:	b538      	push	{r3, r4, r5, lr}
   28e4a:	f3bf 8f5b 	dmb	ish
   28e4e:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   28e52:	f3bf 8f5b 	dmb	ish
	if (!atomic_get(&conn->ref)) {
   28e56:	b1eb      	cbz	r3, 28e94 <conn_prepare_events+0x4c>
   28e58:	4604      	mov	r4, r0
   28e5a:	460d      	mov	r5, r1
	if (conn->state == BT_CONN_DISCONNECTED &&
   28e5c:	7a83      	ldrb	r3, [r0, #10]
   28e5e:	b16b      	cbz	r3, 28e7c <conn_prepare_events+0x34>
	if (conn->state != BT_CONN_CONNECTED) {
   28e60:	7aa3      	ldrb	r3, [r4, #10]
   28e62:	2b07      	cmp	r3, #7
   28e64:	d119      	bne.n	28e9a <conn_prepare_events+0x52>
	k_poll_event_init(&events[0],
   28e66:	f104 0338 	add.w	r3, r4, #56	; 0x38
   28e6a:	2200      	movs	r2, #0
   28e6c:	2104      	movs	r1, #4
   28e6e:	4628      	mov	r0, r5
   28e70:	f004 fdfb 	bl	2da6a <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   28e74:	2301      	movs	r3, #1
   28e76:	732b      	strb	r3, [r5, #12]
	return 0;
   28e78:	2000      	movs	r0, #0
}
   28e7a:	bd38      	pop	{r3, r4, r5, pc}
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
   28e7c:	2106      	movs	r1, #6
   28e7e:	3004      	adds	r0, #4
   28e80:	f7ff ff2c 	bl	28cdc <atomic_test_and_clear_bit>
	if (conn->state == BT_CONN_DISCONNECTED &&
   28e84:	2800      	cmp	r0, #0
   28e86:	d0eb      	beq.n	28e60 <conn_prepare_events+0x18>
		conn_cleanup(conn);
   28e88:	4620      	mov	r0, r4
   28e8a:	f7ff ffbc 	bl	28e06 <conn_cleanup>
		return -ENOTCONN;
   28e8e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   28e92:	e7f2      	b.n	28e7a <conn_prepare_events+0x32>
		return -ENOTCONN;
   28e94:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   28e98:	e7ef      	b.n	28e7a <conn_prepare_events+0x32>
		return -ENOTCONN;
   28e9a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   28e9e:	e7ec      	b.n	28e7a <conn_prepare_events+0x32>

00028ea0 <bt_conn_recv>:
{
   28ea0:	b570      	push	{r4, r5, r6, lr}
   28ea2:	4604      	mov	r4, r0
   28ea4:	460d      	mov	r5, r1
   28ea6:	4616      	mov	r6, r2
	tx_notify(conn);
   28ea8:	f7ff fee3 	bl	28c72 <tx_notify>
		bt_acl_recv(conn, buf, flags);
   28eac:	4632      	mov	r2, r6
   28eae:	4629      	mov	r1, r5
   28eb0:	4620      	mov	r0, r4
   28eb2:	f7f2 fe81 	bl	1bbb8 <bt_acl_recv>
}
   28eb6:	bd70      	pop	{r4, r5, r6, pc}

00028eb8 <bt_conn_ref>:
   28eb8:	f3bf 8f5b 	dmb	ish
   28ebc:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   28ec0:	f3bf 8f5b 	dmb	ish
		if (!old) {
   28ec4:	b1eb      	cbz	r3, 28f02 <bt_conn_ref+0x4a>
{
   28ec6:	b500      	push	{lr}
   28ec8:	e006      	b.n	28ed8 <bt_conn_ref+0x20>
   28eca:	f3bf 8f5b 	dmb	ish
   28ece:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   28ed2:	f3bf 8f5b 	dmb	ish
		if (!old) {
   28ed6:	b193      	cbz	r3, 28efe <bt_conn_ref+0x46>
   28ed8:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
	} while (!atomic_cas(&conn->ref, old, old + 1));
   28edc:	1c59      	adds	r1, r3, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   28ede:	f3bf 8f5b 	dmb	ish
   28ee2:	e852 cf00 	ldrex	ip, [r2]
   28ee6:	459c      	cmp	ip, r3
   28ee8:	d104      	bne.n	28ef4 <bt_conn_ref+0x3c>
   28eea:	e842 1e00 	strex	lr, r1, [r2]
   28eee:	f1be 0f00 	cmp.w	lr, #0
   28ef2:	d1f6      	bne.n	28ee2 <bt_conn_ref+0x2a>
   28ef4:	f3bf 8f5b 	dmb	ish
   28ef8:	d1e7      	bne.n	28eca <bt_conn_ref+0x12>
}
   28efa:	f85d fb04 	ldr.w	pc, [sp], #4
			return NULL;
   28efe:	2000      	movs	r0, #0
   28f00:	e7fb      	b.n	28efa <bt_conn_ref+0x42>
   28f02:	2000      	movs	r0, #0
}
   28f04:	4770      	bx	lr

00028f06 <bt_conn_unref>:
	old = atomic_dec(&conn->ref);
   28f06:	30b8      	adds	r0, #184	; 0xb8
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   28f08:	f3bf 8f5b 	dmb	ish
   28f0c:	e850 3f00 	ldrex	r3, [r0]
   28f10:	3b01      	subs	r3, #1
   28f12:	e840 3200 	strex	r2, r3, [r0]
   28f16:	2a00      	cmp	r2, #0
   28f18:	d1f8      	bne.n	28f0c <bt_conn_unref+0x6>
   28f1a:	f3bf 8f5b 	dmb	ish
}
   28f1e:	4770      	bx	lr

00028f20 <conn_lookup_handle>:
{
   28f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28f22:	4606      	mov	r6, r0
   28f24:	460d      	mov	r5, r1
   28f26:	4617      	mov	r7, r2
	for (i = 0; i < size; i++) {
   28f28:	2400      	movs	r4, #0
   28f2a:	e003      	b.n	28f34 <conn_lookup_handle+0x14>
			bt_conn_unref(conn);
   28f2c:	4660      	mov	r0, ip
   28f2e:	f7ff ffea 	bl	28f06 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   28f32:	3401      	adds	r4, #1
   28f34:	42ac      	cmp	r4, r5
   28f36:	d21c      	bcs.n	28f72 <conn_lookup_handle+0x52>
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   28f38:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   28f3c:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   28f40:	f7ff ffba 	bl	28eb8 <bt_conn_ref>
		if (!conn) {
   28f44:	4684      	mov	ip, r0
   28f46:	2800      	cmp	r0, #0
   28f48:	d0f3      	beq.n	28f32 <conn_lookup_handle+0x12>
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   28f4a:	7a83      	ldrb	r3, [r0, #10]
   28f4c:	2b01      	cmp	r3, #1
   28f4e:	d006      	beq.n	28f5e <conn_lookup_handle+0x3e>
   28f50:	b25a      	sxtb	r2, r3
   28f52:	2a00      	cmp	r2, #0
   28f54:	d0ea      	beq.n	28f2c <conn_lookup_handle+0xc>
   28f56:	3b07      	subs	r3, #7
   28f58:	b2db      	uxtb	r3, r3
   28f5a:	2b01      	cmp	r3, #1
   28f5c:	d8e6      	bhi.n	28f2c <conn_lookup_handle+0xc>
		if (conn->handle != handle) {
   28f5e:	f8bc 3000 	ldrh.w	r3, [ip]
   28f62:	42bb      	cmp	r3, r7
   28f64:	d101      	bne.n	28f6a <conn_lookup_handle+0x4a>
}
   28f66:	4660      	mov	r0, ip
   28f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			bt_conn_unref(conn);
   28f6a:	4660      	mov	r0, ip
   28f6c:	f7ff ffcb 	bl	28f06 <bt_conn_unref>
			continue;
   28f70:	e7df      	b.n	28f32 <conn_lookup_handle+0x12>
	return NULL;
   28f72:	f04f 0c00 	mov.w	ip, #0
   28f76:	e7f6      	b.n	28f66 <conn_lookup_handle+0x46>

00028f78 <bt_conn_connected>:
{
   28f78:	b510      	push	{r4, lr}
   28f7a:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   28f7c:	f7f3 fee8 	bl	1cd50 <bt_l2cap_connected>
	notify_connected(conn);
   28f80:	4620      	mov	r0, r4
   28f82:	f7f2 fcb3 	bl	1b8ec <notify_connected>
}
   28f86:	bd10      	pop	{r4, pc}

00028f88 <bt_conn_get_security>:
}
   28f88:	2001      	movs	r0, #1
   28f8a:	4770      	bx	lr

00028f8c <bt_conn_add_le>:
{
   28f8c:	b570      	push	{r4, r5, r6, lr}
   28f8e:	4606      	mov	r6, r0
   28f90:	460d      	mov	r5, r1
	struct bt_conn *conn = acl_conn_new();
   28f92:	f7f2 fe09 	bl	1bba8 <acl_conn_new>
	if (!conn) {
   28f96:	4604      	mov	r4, r0
   28f98:	b168      	cbz	r0, 28fb6 <bt_conn_add_le+0x2a>
	conn->id = id;
   28f9a:	7206      	strb	r6, [r0, #8]
	memcpy(dst, src, sizeof(*dst));
   28f9c:	2207      	movs	r2, #7
   28f9e:	4629      	mov	r1, r5
   28fa0:	3088      	adds	r0, #136	; 0x88
   28fa2:	f7ff fb6e 	bl	28682 <memcpy>
	conn->type = BT_CONN_TYPE_LE;
   28fa6:	2301      	movs	r3, #1
   28fa8:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   28faa:	2318      	movs	r3, #24
   28fac:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
   28fb0:	2328      	movs	r3, #40	; 0x28
   28fb2:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
}
   28fb6:	4620      	mov	r0, r4
   28fb8:	bd70      	pop	{r4, r5, r6, pc}

00028fba <bt_conn_is_peer_addr_le>:
{
   28fba:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   28fbc:	7a03      	ldrb	r3, [r0, #8]
   28fbe:	428b      	cmp	r3, r1
   28fc0:	d001      	beq.n	28fc6 <bt_conn_is_peer_addr_le+0xc>
		return false;
   28fc2:	2000      	movs	r0, #0
}
   28fc4:	bd38      	pop	{r3, r4, r5, pc}
   28fc6:	4604      	mov	r4, r0
   28fc8:	4615      	mov	r5, r2
	return memcmp(a, b, sizeof(*a));
   28fca:	2207      	movs	r2, #7
   28fcc:	f100 0188 	add.w	r1, r0, #136	; 0x88
   28fd0:	4628      	mov	r0, r5
   28fd2:	f7ff fb44 	bl	2865e <memcmp>
	if (bt_addr_le_eq(peer, &conn->le.dst)) {
   28fd6:	b1a8      	cbz	r0, 29004 <bt_conn_is_peer_addr_le+0x4a>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   28fd8:	78e3      	ldrb	r3, [r4, #3]
   28fda:	b14b      	cbz	r3, 28ff0 <bt_conn_is_peer_addr_le+0x36>
   28fdc:	2207      	movs	r2, #7
   28fde:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   28fe2:	4628      	mov	r0, r5
   28fe4:	f7ff fb3b 	bl	2865e <memcmp>
	return bt_addr_le_cmp(a, b) == 0;
   28fe8:	fab0 f080 	clz	r0, r0
   28fec:	0940      	lsrs	r0, r0, #5
	return bt_addr_le_eq(peer, &conn->le.init_addr);
   28fee:	e7e9      	b.n	28fc4 <bt_conn_is_peer_addr_le+0xa>
	return memcmp(a, b, sizeof(*a));
   28ff0:	2207      	movs	r2, #7
   28ff2:	f104 0196 	add.w	r1, r4, #150	; 0x96
   28ff6:	4628      	mov	r0, r5
   28ff8:	f7ff fb31 	bl	2865e <memcmp>
	return bt_addr_le_cmp(a, b) == 0;
   28ffc:	fab0 f080 	clz	r0, r0
   29000:	0940      	lsrs	r0, r0, #5
		return bt_addr_le_eq(peer, &conn->le.resp_addr);
   29002:	e7df      	b.n	28fc4 <bt_conn_is_peer_addr_le+0xa>
		return true;
   29004:	2001      	movs	r0, #1
   29006:	e7dd      	b.n	28fc4 <bt_conn_is_peer_addr_le+0xa>

00029008 <bt_conn_get_dst>:
}
   29008:	3088      	adds	r0, #136	; 0x88
   2900a:	4770      	bx	lr

0002900c <bt_conn_le_conn_update>:
{
   2900c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2900e:	4606      	mov	r6, r0
   29010:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   29012:	210e      	movs	r1, #14
   29014:	f242 0013 	movw	r0, #8211	; 0x2013
   29018:	f7f0 fa82 	bl	19520 <bt_hci_cmd_create>
	if (!buf) {
   2901c:	b1d0      	cbz	r0, 29054 <bt_conn_le_conn_update+0x48>
   2901e:	4607      	mov	r7, r0
	return net_buf_simple_add(&buf->b, len);
   29020:	210e      	movs	r1, #14
   29022:	300c      	adds	r0, #12
   29024:	f002 f834 	bl	2b090 <net_buf_simple_add>
   29028:	4604      	mov	r4, r0
	(void)memset(conn_update, 0, sizeof(*conn_update));
   2902a:	220e      	movs	r2, #14
   2902c:	2100      	movs	r1, #0
   2902e:	f7ff fb57 	bl	286e0 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   29032:	8833      	ldrh	r3, [r6, #0]
   29034:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   29036:	882b      	ldrh	r3, [r5, #0]
   29038:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   2903a:	886b      	ldrh	r3, [r5, #2]
   2903c:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   2903e:	88ab      	ldrh	r3, [r5, #4]
   29040:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   29042:	88eb      	ldrh	r3, [r5, #6]
   29044:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   29046:	2200      	movs	r2, #0
   29048:	4639      	mov	r1, r7
   2904a:	f242 0013 	movw	r0, #8211	; 0x2013
   2904e:	f7f0 faa5 	bl	1959c <bt_hci_cmd_send_sync>
}
   29052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   29054:	f06f 0068 	mvn.w	r0, #104	; 0x68
   29058:	e7fb      	b.n	29052 <bt_conn_le_conn_update+0x46>

0002905a <l2cap_connected>:
}
   2905a:	4770      	bx	lr

0002905c <l2cap_disconnected>:
}
   2905c:	4770      	bx	lr

0002905e <l2cap_chan_recv>:
{
   2905e:	b510      	push	{r4, lr}
   29060:	460c      	mov	r4, r1
	chan->ops->recv(chan, buf);
   29062:	6843      	ldr	r3, [r0, #4]
   29064:	695b      	ldr	r3, [r3, #20]
   29066:	4798      	blx	r3
	net_buf_unref(buf);
   29068:	4620      	mov	r0, r4
   2906a:	f001 ffca 	bl	2b002 <net_buf_unref>
}
   2906e:	bd10      	pop	{r4, pc}

00029070 <bt_l2cap_chan_del>:
{
   29070:	b538      	push	{r3, r4, r5, lr}
   29072:	4604      	mov	r4, r0
	const struct bt_l2cap_chan_ops *ops = chan->ops;
   29074:	6845      	ldr	r5, [r0, #4]
	if (!chan->conn) {
   29076:	6803      	ldr	r3, [r0, #0]
   29078:	b123      	cbz	r3, 29084 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   2907a:	686b      	ldr	r3, [r5, #4]
   2907c:	b103      	cbz	r3, 29080 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   2907e:	4798      	blx	r3
	chan->conn = NULL;
   29080:	2300      	movs	r3, #0
   29082:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   29084:	68e3      	ldr	r3, [r4, #12]
   29086:	b10b      	cbz	r3, 2908c <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   29088:	4620      	mov	r0, r4
   2908a:	4798      	blx	r3
	if (ops->released) {
   2908c:	6a2b      	ldr	r3, [r5, #32]
   2908e:	b10b      	cbz	r3, 29094 <bt_l2cap_chan_del+0x24>
		ops->released(chan);
   29090:	4620      	mov	r0, r4
   29092:	4798      	blx	r3
}
   29094:	bd38      	pop	{r3, r4, r5, pc}

00029096 <bt_l2cap_chan_add>:
{
   29096:	b410      	push	{r4}
	sys_slist_append(&conn->channels, &chan->node);
   29098:	f101 0308 	add.w	r3, r1, #8
	parent->next = child;
   2909c:	2400      	movs	r4, #0
   2909e:	608c      	str	r4, [r1, #8]
	return list->tail;
   290a0:	6d44      	ldr	r4, [r0, #84]	; 0x54
Z_GENLIST_APPEND(slist, snode)
   290a2:	b12c      	cbz	r4, 290b0 <bt_l2cap_chan_add+0x1a>
	parent->next = child;
   290a4:	6023      	str	r3, [r4, #0]
	list->tail = node;
   290a6:	6543      	str	r3, [r0, #84]	; 0x54
	chan->conn = conn;
   290a8:	6008      	str	r0, [r1, #0]
	chan->destroy = destroy;
   290aa:	60ca      	str	r2, [r1, #12]
}
   290ac:	bc10      	pop	{r4}
   290ae:	4770      	bx	lr
   290b0:	6543      	str	r3, [r0, #84]	; 0x54
	list->head = node;
   290b2:	6503      	str	r3, [r0, #80]	; 0x50
}
   290b4:	e7f8      	b.n	290a8 <bt_l2cap_chan_add+0x12>

000290b6 <bt_l2cap_disconnected>:
{
   290b6:	b510      	push	{r4, lr}
	return list->head;
   290b8:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   290ba:	b138      	cbz	r0, 290cc <bt_l2cap_disconnected+0x16>
   290bc:	3808      	subs	r0, #8
Z_GENLIST_PEEK_NEXT(slist, snode)
   290be:	f110 0408 	adds.w	r4, r0, #8
   290c2:	d008      	beq.n	290d6 <bt_l2cap_disconnected+0x20>
	return node->next;
   290c4:	6884      	ldr	r4, [r0, #8]
   290c6:	b134      	cbz	r4, 290d6 <bt_l2cap_disconnected+0x20>
   290c8:	3c08      	subs	r4, #8
   290ca:	e004      	b.n	290d6 <bt_l2cap_disconnected+0x20>
   290cc:	4604      	mov	r4, r0
   290ce:	e002      	b.n	290d6 <bt_l2cap_disconnected+0x20>
   290d0:	4623      	mov	r3, r4
   290d2:	4620      	mov	r0, r4
   290d4:	461c      	mov	r4, r3
   290d6:	b140      	cbz	r0, 290ea <bt_l2cap_disconnected+0x34>
		bt_l2cap_chan_del(chan);
   290d8:	f7ff ffca 	bl	29070 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   290dc:	2c00      	cmp	r4, #0
   290de:	d0f7      	beq.n	290d0 <bt_l2cap_disconnected+0x1a>
   290e0:	68a3      	ldr	r3, [r4, #8]
   290e2:	2b00      	cmp	r3, #0
   290e4:	d0f5      	beq.n	290d2 <bt_l2cap_disconnected+0x1c>
   290e6:	3b08      	subs	r3, #8
   290e8:	e7f3      	b.n	290d2 <bt_l2cap_disconnected+0x1c>
}
   290ea:	bd10      	pop	{r4, pc}

000290ec <bt_l2cap_create_pdu_timeout>:
{
   290ec:	b508      	push	{r3, lr}
	return bt_conn_create_pdu_timeout(pool,
   290ee:	3104      	adds	r1, #4
   290f0:	f7f3 f94c 	bl	1c38c <bt_conn_create_pdu_timeout>
}
   290f4:	bd08      	pop	{r3, pc}

000290f6 <bt_l2cap_send_cb>:
{
   290f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   290f8:	4605      	mov	r5, r0
   290fa:	460f      	mov	r7, r1
   290fc:	4614      	mov	r4, r2
   290fe:	461e      	mov	r6, r3
	return net_buf_simple_push(&buf->b, len);
   29100:	2104      	movs	r1, #4
   29102:	f102 000c 	add.w	r0, r2, #12
   29106:	f001 ffdd 	bl	2b0c4 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2910a:	8a23      	ldrh	r3, [r4, #16]
   2910c:	3b04      	subs	r3, #4
   2910e:	8003      	strh	r3, [r0, #0]
	hdr->cid = sys_cpu_to_le16(cid);
   29110:	8047      	strh	r7, [r0, #2]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   29112:	9b06      	ldr	r3, [sp, #24]
   29114:	4632      	mov	r2, r6
   29116:	4621      	mov	r1, r4
   29118:	4628      	mov	r0, r5
   2911a:	f7f2 fea7 	bl	1be6c <bt_conn_send_cb>
}
   2911e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00029120 <l2cap_send>:
{
   29120:	b510      	push	{r4, lr}
   29122:	b082      	sub	sp, #8
   29124:	4614      	mov	r4, r2
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   29126:	2300      	movs	r3, #0
   29128:	9300      	str	r3, [sp, #0]
   2912a:	f7ff ffe4 	bl	290f6 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   2912e:	b908      	cbnz	r0, 29134 <l2cap_send+0x14>
}
   29130:	b002      	add	sp, #8
   29132:	bd10      	pop	{r4, pc}
		net_buf_unref(buf);
   29134:	4620      	mov	r0, r4
   29136:	f001 ff64 	bl	2b002 <net_buf_unref>
}
   2913a:	e7f9      	b.n	29130 <l2cap_send+0x10>

0002913c <l2cap_send_reject>:
{
   2913c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   29140:	4606      	mov	r6, r0
   29142:	4690      	mov	r8, r2
   29144:	461c      	mov	r4, r3
   29146:	f89d 7020 	ldrb.w	r7, [sp, #32]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   2914a:	1cbb      	adds	r3, r7, #2
   2914c:	460a      	mov	r2, r1
   2914e:	2101      	movs	r1, #1
   29150:	2000      	movs	r0, #0
   29152:	f7f3 fe37 	bl	1cdc4 <l2cap_create_le_sig_pdu>
	if (!buf) {
   29156:	b198      	cbz	r0, 29180 <l2cap_send_reject+0x44>
   29158:	4605      	mov	r5, r0
	return net_buf_simple_add(&buf->b, len);
   2915a:	f100 090c 	add.w	r9, r0, #12
   2915e:	2102      	movs	r1, #2
   29160:	4648      	mov	r0, r9
   29162:	f001 ff95 	bl	2b090 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   29166:	f8a0 8000 	strh.w	r8, [r0]
	if (data) {
   2916a:	b124      	cbz	r4, 29176 <l2cap_send_reject+0x3a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   2916c:	463a      	mov	r2, r7
   2916e:	4621      	mov	r1, r4
   29170:	4648      	mov	r0, r9
   29172:	f001 ff93 	bl	2b09c <net_buf_simple_add_mem>
	l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
   29176:	462a      	mov	r2, r5
   29178:	2105      	movs	r1, #5
   2917a:	4630      	mov	r0, r6
   2917c:	f7ff ffd0 	bl	29120 <l2cap_send>
}
   29180:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00029184 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   29184:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   29186:	b110      	cbz	r0, 2918e <bt_l2cap_le_lookup_rx_cid+0xa>
   29188:	3808      	subs	r0, #8
   2918a:	e000      	b.n	2918e <bt_l2cap_le_lookup_rx_cid+0xa>
   2918c:	4618      	mov	r0, r3
   2918e:	b150      	cbz	r0, 291a6 <bt_l2cap_le_lookup_rx_cid+0x22>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   29190:	8a83      	ldrh	r3, [r0, #20]
   29192:	428b      	cmp	r3, r1
   29194:	d007      	beq.n	291a6 <bt_l2cap_le_lookup_rx_cid+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   29196:	f110 0308 	adds.w	r3, r0, #8
   2919a:	d0f7      	beq.n	2918c <bt_l2cap_le_lookup_rx_cid+0x8>
	return node->next;
   2919c:	6880      	ldr	r0, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2919e:	2800      	cmp	r0, #0
   291a0:	d0f5      	beq.n	2918e <bt_l2cap_le_lookup_rx_cid+0xa>
   291a2:	3808      	subs	r0, #8
   291a4:	e7f3      	b.n	2918e <bt_l2cap_le_lookup_rx_cid+0xa>
}
   291a6:	4770      	bx	lr

000291a8 <bt_l2cap_update_conn_param>:
{
   291a8:	b570      	push	{r4, r5, r6, lr}
   291aa:	b082      	sub	sp, #8
   291ac:	4605      	mov	r5, r0
   291ae:	460c      	mov	r4, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   291b0:	f7f3 fce2 	bl	1cb78 <get_ident>
   291b4:	4602      	mov	r2, r0
   291b6:	2308      	movs	r3, #8
   291b8:	2112      	movs	r1, #18
   291ba:	2000      	movs	r0, #0
   291bc:	f7f3 fe02 	bl	1cdc4 <l2cap_create_le_sig_pdu>
	if (!buf) {
   291c0:	b1e0      	cbz	r0, 291fc <bt_l2cap_update_conn_param+0x54>
   291c2:	4606      	mov	r6, r0
	return net_buf_simple_add(&buf->b, len);
   291c4:	2108      	movs	r1, #8
   291c6:	300c      	adds	r0, #12
   291c8:	f001 ff62 	bl	2b090 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   291cc:	8823      	ldrh	r3, [r4, #0]
   291ce:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   291d0:	8863      	ldrh	r3, [r4, #2]
   291d2:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   291d4:	88a3      	ldrh	r3, [r4, #4]
   291d6:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   291d8:	88e3      	ldrh	r3, [r4, #6]
   291da:	80c3      	strh	r3, [r0, #6]
   291dc:	2300      	movs	r3, #0
   291de:	9300      	str	r3, [sp, #0]
   291e0:	4632      	mov	r2, r6
   291e2:	2105      	movs	r1, #5
   291e4:	4628      	mov	r0, r5
   291e6:	f7ff ff86 	bl	290f6 <bt_l2cap_send_cb>
	if (err) {
   291ea:	4604      	mov	r4, r0
   291ec:	b910      	cbnz	r0, 291f4 <bt_l2cap_update_conn_param+0x4c>
}
   291ee:	4620      	mov	r0, r4
   291f0:	b002      	add	sp, #8
   291f2:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
   291f4:	4630      	mov	r0, r6
   291f6:	f001 ff04 	bl	2b002 <net_buf_unref>
		return err;
   291fa:	e7f8      	b.n	291ee <bt_l2cap_update_conn_param+0x46>
		return -ENOMEM;
   291fc:	f06f 040b 	mvn.w	r4, #11
   29200:	e7f5      	b.n	291ee <bt_l2cap_update_conn_param+0x46>

00029202 <bt_l2cap_init>:
		(void)memset(&l2cap_tx_meta_data_storage[i], 0,
					sizeof(l2cap_tx_meta_data_storage[i]));
		k_fifo_put(&free_l2cap_tx_meta_data, &l2cap_tx_meta_data_storage[i]);
	}
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}
   29202:	4770      	bx	lr

00029204 <sys_slist_remove>:
Z_GENLIST_REMOVE(slist, snode)
   29204:	460b      	mov	r3, r1
   29206:	b139      	cbz	r1, 29218 <sys_slist_remove+0x14>
	return node->next;
   29208:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
   2920a:	6019      	str	r1, [r3, #0]
	return list->tail;
   2920c:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   2920e:	428a      	cmp	r2, r1
   29210:	d009      	beq.n	29226 <sys_slist_remove+0x22>
	parent->next = child;
   29212:	2300      	movs	r3, #0
   29214:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   29216:	4770      	bx	lr
	return node->next;
   29218:	6813      	ldr	r3, [r2, #0]
	list->head = node;
   2921a:	6003      	str	r3, [r0, #0]
	return list->tail;
   2921c:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   2921e:	428a      	cmp	r2, r1
   29220:	d1f7      	bne.n	29212 <sys_slist_remove+0xe>
	list->tail = node;
   29222:	6043      	str	r3, [r0, #4]
}
   29224:	e7f5      	b.n	29212 <sys_slist_remove+0xe>
	list->tail = node;
   29226:	6043      	str	r3, [r0, #4]
}
   29228:	e7f3      	b.n	29212 <sys_slist_remove+0xe>

0002922a <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2922a:	b508      	push	{r3, lr}
   2922c:	460a      	mov	r2, r1
	return list->head;
   2922e:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   29230:	2100      	movs	r1, #0
   29232:	e001      	b.n	29238 <sys_slist_find_and_remove+0xe>
   29234:	4619      	mov	r1, r3
   29236:	681b      	ldr	r3, [r3, #0]
   29238:	b12b      	cbz	r3, 29246 <sys_slist_find_and_remove+0x1c>
   2923a:	4293      	cmp	r3, r2
   2923c:	d1fa      	bne.n	29234 <sys_slist_find_and_remove+0xa>
   2923e:	f7ff ffe1 	bl	29204 <sys_slist_remove>
   29242:	2001      	movs	r0, #1
   29244:	e000      	b.n	29248 <sys_slist_find_and_remove+0x1e>
   29246:	2000      	movs	r0, #0
   29248:	bd08      	pop	{r3, pc}

0002924a <get_first_req_matching_chan>:
{
   2924a:	4603      	mov	r3, r0
	return list->head;
   2924c:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   2924e:	b120      	cbz	r0, 2925a <get_first_req_matching_chan+0x10>
	return node->next;
   29250:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   29252:	601a      	str	r2, [r3, #0]
	return list->tail;
   29254:	6859      	ldr	r1, [r3, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   29256:	4288      	cmp	r0, r1
   29258:	d000      	beq.n	2925c <get_first_req_matching_chan+0x12>
}
   2925a:	4770      	bx	lr
	list->tail = node;
   2925c:	605a      	str	r2, [r3, #4]
		return ATT_REQ(node);
   2925e:	e7fc      	b.n	2925a <get_first_req_matching_chan+0x10>

00029260 <range_is_valid>:
	if (!start || !end) {
   29260:	b120      	cbz	r0, 2926c <range_is_valid+0xc>
   29262:	b119      	cbz	r1, 2926c <range_is_valid+0xc>
	if (start > end) {
   29264:	4288      	cmp	r0, r1
   29266:	d806      	bhi.n	29276 <range_is_valid+0x16>
	return true;
   29268:	2001      	movs	r0, #1
}
   2926a:	4770      	bx	lr
		if (err) {
   2926c:	b10a      	cbz	r2, 29272 <range_is_valid+0x12>
			*err = 0U;
   2926e:	2300      	movs	r3, #0
   29270:	8013      	strh	r3, [r2, #0]
		return false;
   29272:	2000      	movs	r0, #0
   29274:	4770      	bx	lr
		if (err) {
   29276:	b102      	cbz	r2, 2927a <range_is_valid+0x1a>
			*err = start;
   29278:	8010      	strh	r0, [r2, #0]
		return false;
   2927a:	2000      	movs	r0, #0
   2927c:	4770      	bx	lr

0002927e <err_to_att>:
	if (err < 0 && err >= -0xff) {
   2927e:	f110 0fff 	cmn.w	r0, #255	; 0xff
   29282:	d201      	bcs.n	29288 <err_to_att+0xa>
	return BT_ATT_ERR_UNLIKELY;
   29284:	200e      	movs	r0, #14
}
   29286:	4770      	bx	lr
		return -err;
   29288:	4240      	negs	r0, r0
   2928a:	b2c0      	uxtb	r0, r0
   2928c:	4770      	bx	lr

0002928e <attr_read_type_cb>:
{
   2928e:	b410      	push	{r4}
	if (!data->rsp->len) {
   29290:	68d4      	ldr	r4, [r2, #12]
   29292:	7823      	ldrb	r3, [r4, #0]
   29294:	b923      	cbnz	r3, 292a0 <attr_read_type_cb+0x12>
		data->rsp->len = read + sizeof(*data->item);
   29296:	3102      	adds	r1, #2
   29298:	7021      	strb	r1, [r4, #0]
	return true;
   2929a:	2001      	movs	r0, #1
}
   2929c:	bc10      	pop	{r4}
   2929e:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   292a0:	3102      	adds	r1, #2
   292a2:	428b      	cmp	r3, r1
   292a4:	d005      	beq.n	292b2 <attr_read_type_cb+0x24>
		frag->len -= sizeof(*data->item);
   292a6:	8a03      	ldrh	r3, [r0, #16]
   292a8:	3b02      	subs	r3, #2
   292aa:	8203      	strh	r3, [r0, #16]
		data->item = NULL;
   292ac:	2000      	movs	r0, #0
   292ae:	6110      	str	r0, [r2, #16]
		return false;
   292b0:	e7f4      	b.n	2929c <attr_read_type_cb+0xe>
	return true;
   292b2:	2001      	movs	r0, #1
   292b4:	e7f2      	b.n	2929c <attr_read_type_cb+0xe>

000292b6 <attr_read_group_cb>:
	if (!data->rsp->len) {
   292b6:	68d0      	ldr	r0, [r2, #12]
   292b8:	7803      	ldrb	r3, [r0, #0]
   292ba:	b91b      	cbnz	r3, 292c4 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   292bc:	3104      	adds	r1, #4
   292be:	7001      	strb	r1, [r0, #0]
	return true;
   292c0:	2001      	movs	r0, #1
   292c2:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   292c4:	3104      	adds	r1, #4
   292c6:	428b      	cmp	r3, r1
   292c8:	d006      	beq.n	292d8 <attr_read_group_cb+0x22>
		data->buf->len -= sizeof(*data->group);
   292ca:	6891      	ldr	r1, [r2, #8]
   292cc:	8a0b      	ldrh	r3, [r1, #16]
   292ce:	3b04      	subs	r3, #4
   292d0:	820b      	strh	r3, [r1, #16]
		data->group = NULL;
   292d2:	2000      	movs	r0, #0
   292d4:	6110      	str	r0, [r2, #16]
		return false;
   292d6:	4770      	bx	lr
	return true;
   292d8:	2001      	movs	r0, #1
}
   292da:	4770      	bx	lr

000292dc <att_prepare_write_req>:
}
   292dc:	2006      	movs	r0, #6
   292de:	4770      	bx	lr

000292e0 <att_exec_write_req>:
}
   292e0:	2006      	movs	r0, #6
   292e2:	4770      	bx	lr

000292e4 <att_chan_attach>:
{
   292e4:	b538      	push	{r3, r4, r5, lr}
   292e6:	4604      	mov	r4, r0
   292e8:	460d      	mov	r5, r1
	return list->head;
   292ea:	6a43      	ldr	r3, [r0, #36]	; 0x24
	if (sys_slist_is_empty(&att->chans)) {
   292ec:	b143      	cbz	r3, 29300 <att_chan_attach+0x1c>
	sys_slist_prepend(&att->chans, &chan->node);
   292ee:	f105 03e0 	add.w	r3, r5, #224	; 0xe0
   292f2:	6a62      	ldr	r2, [r4, #36]	; 0x24
	parent->next = child;
   292f4:	f8c5 20e0 	str.w	r2, [r5, #224]	; 0xe0
	list->head = node;
   292f8:	6263      	str	r3, [r4, #36]	; 0x24
	return list->tail;
   292fa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
   292fc:	b122      	cbz	r2, 29308 <att_chan_attach+0x24>
}
   292fe:	bd38      	pop	{r3, r4, r5, pc}
		k_fifo_init(&att->tx_queue);
   29300:	300c      	adds	r0, #12
	z_impl_k_queue_init(queue);
   29302:	f003 fdfd 	bl	2cf00 <z_impl_k_queue_init>
}
   29306:	e7f2      	b.n	292ee <att_chan_attach+0xa>
	list->tail = node;
   29308:	62a3      	str	r3, [r4, #40]	; 0x28
}
   2930a:	e7f8      	b.n	292fe <att_chan_attach+0x1a>

0002930c <atomic_test_bit>:
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2930c:	094b      	lsrs	r3, r1, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2930e:	f3bf 8f5b 	dmb	ish
   29312:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
   29316:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2931a:	f001 011f 	and.w	r1, r1, #31
   2931e:	4108      	asrs	r0, r1
}
   29320:	f000 0001 	and.w	r0, r0, #1
   29324:	4770      	bx	lr

00029326 <chan_unknown>:
{
   29326:	b508      	push	{r3, lr}
	tx_meta_data_free(user_data);
   29328:	4608      	mov	r0, r1
   2932a:	f7f4 f9bb 	bl	1d6a4 <tx_meta_data_free>
}
   2932e:	bd08      	pop	{r3, pc}

00029330 <chan_tx_complete>:
{
   29330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29334:	4605      	mov	r5, r0
   29336:	4608      	mov	r0, r1
   29338:	4614      	mov	r4, r2
	bt_gatt_complete_func_t func = data->func;
   2933a:	688e      	ldr	r6, [r1, #8]
	uint16_t attr_count = data->attr_count;
   2933c:	888f      	ldrh	r7, [r1, #4]
	void *ud = data->user_data;
   2933e:	f8d1 800c 	ldr.w	r8, [r1, #12]
	tx_meta_data_free(data);
   29342:	f7f4 f9af 	bl	1d6a4 <tx_meta_data_free>
	if (!err && func) {
   29346:	b94c      	cbnz	r4, 2935c <chan_tx_complete+0x2c>
   29348:	b146      	cbz	r6, 2935c <chan_tx_complete+0x2c>
		for (uint16_t i = 0; i < attr_count; i++) {
   2934a:	2400      	movs	r4, #0
   2934c:	e004      	b.n	29358 <chan_tx_complete+0x28>
			func(conn, ud);
   2934e:	4641      	mov	r1, r8
   29350:	4628      	mov	r0, r5
   29352:	47b0      	blx	r6
		for (uint16_t i = 0; i < attr_count; i++) {
   29354:	3401      	adds	r4, #1
   29356:	b2a4      	uxth	r4, r4
   29358:	42a7      	cmp	r7, r4
   2935a:	d8f8      	bhi.n	2934e <chan_tx_complete+0x1e>
}
   2935c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00029360 <bt_att_chan_send>:
{
   29360:	b508      	push	{r3, lr}
	return chan_send(chan, buf);
   29362:	f7f4 f9ad 	bl	1d6c0 <chan_send>
}
   29366:	bd08      	pop	{r3, pc}

00029368 <chan_req_send>:
{
   29368:	b570      	push	{r4, r5, r6, lr}
   2936a:	4605      	mov	r5, r0
   2936c:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2936e:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   29370:	68a3      	ldr	r3, [r4, #8]
	size_t bytes = 0;
   29372:	2200      	movs	r2, #0
	while (buf) {
   29374:	e003      	b.n	2937e <chan_req_send+0x16>
		bytes += buf->len;
   29376:	f8b3 c010 	ldrh.w	ip, [r3, #16]
   2937a:	4462      	add	r2, ip
		buf = buf->frags;
   2937c:	685b      	ldr	r3, [r3, #4]
	while (buf) {
   2937e:	2b00      	cmp	r3, #0
   29380:	d1f9      	bne.n	29376 <chan_req_send+0xe>
   29382:	4291      	cmp	r1, r2
   29384:	d30d      	bcc.n	293a2 <chan_req_send+0x3a>
	chan->req = req;
   29386:	f8c5 4094 	str.w	r4, [r5, #148]	; 0x94
	buf = req->buf;
   2938a:	68a6      	ldr	r6, [r4, #8]
	req->buf = NULL;
   2938c:	60a3      	str	r3, [r4, #8]
	err = bt_att_chan_send(chan, buf);
   2938e:	4631      	mov	r1, r6
   29390:	4628      	mov	r0, r5
   29392:	f7ff ffe5 	bl	29360 <bt_att_chan_send>
	if (err) {
   29396:	b118      	cbz	r0, 293a0 <chan_req_send+0x38>
		req->buf = buf;
   29398:	60a6      	str	r6, [r4, #8]
		chan->req = NULL;
   2939a:	2300      	movs	r3, #0
   2939c:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
}
   293a0:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   293a2:	f06f 0079 	mvn.w	r0, #121	; 0x79
   293a6:	e7fb      	b.n	293a0 <chan_req_send+0x38>

000293a8 <bt_att_chan_req_send>:
{
   293a8:	b508      	push	{r3, lr}
	return chan_req_send(chan, req);
   293aa:	f7ff ffdd 	bl	29368 <chan_req_send>
}
   293ae:	bd08      	pop	{r3, pc}

000293b0 <bt_att_status>:
{
   293b0:	b570      	push	{r4, r5, r6, lr}
   293b2:	4604      	mov	r4, r0
   293b4:	4608      	mov	r0, r1
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   293b6:	2100      	movs	r1, #0
   293b8:	f7ff ffa8 	bl	2930c <atomic_test_bit>
   293bc:	b130      	cbz	r0, 293cc <bt_att_status+0x1c>
   293be:	1f26      	subs	r6, r4, #4
	if (!chan->att) {
   293c0:	f854 3c04 	ldr.w	r3, [r4, #-4]
   293c4:	b113      	cbz	r3, 293cc <bt_att_status+0x1c>
	if (chan->req) {
   293c6:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   293ca:	b102      	cbz	r2, 293ce <bt_att_status+0x1e>
}
   293cc:	bd70      	pop	{r4, r5, r6, pc}
	return list->head;
   293ce:	685d      	ldr	r5, [r3, #4]
Z_GENLIST_GET(slist, snode)
   293d0:	2d00      	cmp	r5, #0
   293d2:	d0fb      	beq.n	293cc <bt_att_status+0x1c>
	return node->next;
   293d4:	682a      	ldr	r2, [r5, #0]
	list->head = node;
   293d6:	605a      	str	r2, [r3, #4]
	return list->tail;
   293d8:	6899      	ldr	r1, [r3, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   293da:	42a9      	cmp	r1, r5
   293dc:	d00f      	beq.n	293fe <bt_att_status+0x4e>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   293de:	4629      	mov	r1, r5
   293e0:	4630      	mov	r0, r6
   293e2:	f7ff ffe1 	bl	293a8 <bt_att_chan_req_send>
   293e6:	2800      	cmp	r0, #0
   293e8:	daf0      	bge.n	293cc <bt_att_status+0x1c>
	sys_slist_prepend(&chan->att->reqs, node);
   293ea:	f854 3c04 	ldr.w	r3, [r4, #-4]
	return list->head;
   293ee:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   293f0:	602a      	str	r2, [r5, #0]
	list->head = node;
   293f2:	605d      	str	r5, [r3, #4]
	return list->tail;
   293f4:	689a      	ldr	r2, [r3, #8]
Z_GENLIST_PREPEND(slist, snode)
   293f6:	2a00      	cmp	r2, #0
   293f8:	d1e8      	bne.n	293cc <bt_att_status+0x1c>
	list->tail = node;
   293fa:	609d      	str	r5, [r3, #8]
}
   293fc:	e7e6      	b.n	293cc <bt_att_status+0x1c>
	list->tail = node;
   293fe:	609a      	str	r2, [r3, #8]
	if (!node) {
   29400:	e7ed      	b.n	293de <bt_att_status+0x2e>

00029402 <att_req_send_process>:
{
   29402:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   29406:	4607      	mov	r7, r0
	return list->head;
   29408:	6a44      	ldr	r4, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2940a:	b3ac      	cbz	r4, 29478 <att_req_send_process+0x76>
   2940c:	3ce0      	subs	r4, #224	; 0xe0
Z_GENLIST_PEEK_NEXT(slist, snode)
   2940e:	f114 05e0 	adds.w	r5, r4, #224	; 0xe0
   29412:	d003      	beq.n	2941c <att_req_send_process+0x1a>
	return node->next;
   29414:	f8d4 50e0 	ldr.w	r5, [r4, #224]	; 0xe0
   29418:	b105      	cbz	r5, 2941c <att_req_send_process+0x1a>
   2941a:	3de0      	subs	r5, #224	; 0xe0
   2941c:	f04f 0800 	mov.w	r8, #0
   29420:	4646      	mov	r6, r8
   29422:	e02e      	b.n	29482 <att_req_send_process+0x80>
		if (!req && prev &&
   29424:	b196      	cbz	r6, 2944c <att_req_send_process+0x4a>
		req = get_first_req_matching_chan(&att->reqs, chan);
   29426:	4621      	mov	r1, r4
   29428:	1d38      	adds	r0, r7, #4
   2942a:	f7ff ff0e 	bl	2924a <get_first_req_matching_chan>
		if (!req) {
   2942e:	4606      	mov	r6, r0
   29430:	b300      	cbz	r0, 29474 <att_req_send_process+0x72>
		if (bt_att_chan_req_send(chan, req) >= 0) {
   29432:	4601      	mov	r1, r0
   29434:	4620      	mov	r0, r4
   29436:	f7ff ffb7 	bl	293a8 <bt_att_chan_req_send>
   2943a:	2800      	cmp	r0, #0
   2943c:	da2e      	bge.n	2949c <att_req_send_process+0x9a>
	return list->head;
   2943e:	687b      	ldr	r3, [r7, #4]
	parent->next = child;
   29440:	6033      	str	r3, [r6, #0]
	list->head = node;
   29442:	607e      	str	r6, [r7, #4]
	return list->tail;
   29444:	68bb      	ldr	r3, [r7, #8]
Z_GENLIST_PREPEND(slist, snode)
   29446:	b193      	cbz	r3, 2946e <att_req_send_process+0x6c>
		prev = chan;
   29448:	46a0      	mov	r8, r4
   2944a:	e01f      	b.n	2948c <att_req_send_process+0x8a>
		if (!req && prev &&
   2944c:	f1b8 0f00 	cmp.w	r8, #0
   29450:	d0e9      	beq.n	29426 <att_req_send_process+0x24>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   29452:	2103      	movs	r1, #3
   29454:	f104 0090 	add.w	r0, r4, #144	; 0x90
   29458:	f7ff ff58 	bl	2930c <atomic_test_bit>
   2945c:	4681      	mov	r9, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   2945e:	2103      	movs	r1, #3
   29460:	f108 0090 	add.w	r0, r8, #144	; 0x90
   29464:	f7ff ff52 	bl	2930c <atomic_test_bit>
		if (!req && prev &&
   29468:	4581      	cmp	r9, r0
   2946a:	d1dc      	bne.n	29426 <att_req_send_process+0x24>
   2946c:	e00e      	b.n	2948c <att_req_send_process+0x8a>
	list->tail = node;
   2946e:	60be      	str	r6, [r7, #8]
		prev = chan;
   29470:	46a0      	mov	r8, r4
}
   29472:	e00b      	b.n	2948c <att_req_send_process+0x8a>
   29474:	46a0      	mov	r8, r4
   29476:	e009      	b.n	2948c <att_req_send_process+0x8a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   29478:	4625      	mov	r5, r4
   2947a:	e7cf      	b.n	2941c <att_req_send_process+0x1a>
   2947c:	462b      	mov	r3, r5
   2947e:	462c      	mov	r4, r5
   29480:	461d      	mov	r5, r3
   29482:	b15c      	cbz	r4, 2949c <att_req_send_process+0x9a>
		if (chan->req) {
   29484:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   29488:	2b00      	cmp	r3, #0
   2948a:	d0cb      	beq.n	29424 <att_req_send_process+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2948c:	2d00      	cmp	r5, #0
   2948e:	d0f5      	beq.n	2947c <att_req_send_process+0x7a>
	return node->next;
   29490:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
   29494:	2b00      	cmp	r3, #0
   29496:	d0f2      	beq.n	2947e <att_req_send_process+0x7c>
   29498:	3be0      	subs	r3, #224	; 0xe0
   2949a:	e7f0      	b.n	2947e <att_req_send_process+0x7c>
}
   2949c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000294a0 <chan_req_sent>:
{
   294a0:	b510      	push	{r4, lr}
   294a2:	460c      	mov	r4, r1
	struct bt_att_chan *chan = data->att_chan;
   294a4:	6808      	ldr	r0, [r1, #0]
	if (chan->req) {
   294a6:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
   294aa:	b12b      	cbz	r3, 294b8 <chan_req_sent+0x18>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   294ac:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   294b0:	2300      	movs	r3, #0
   294b2:	30b0      	adds	r0, #176	; 0xb0
   294b4:	f7fc f85c 	bl	25570 <k_work_reschedule>
	tx_meta_data_free(user_data);
   294b8:	4620      	mov	r0, r4
   294ba:	f7f4 f8f3 	bl	1d6a4 <tx_meta_data_free>
}
   294be:	bd10      	pop	{r4, pc}

000294c0 <chan_cfm_sent>:
{
   294c0:	b508      	push	{r3, lr}
   294c2:	4608      	mov	r0, r1
	struct bt_att_chan *chan = data->att_chan;
   294c4:	680b      	ldr	r3, [r1, #0]
		atomic_clear_bit(chan->flags, ATT_PENDING_CFM);
   294c6:	3390      	adds	r3, #144	; 0x90
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   294c8:	f3bf 8f5b 	dmb	ish
   294cc:	e853 1f00 	ldrex	r1, [r3]
   294d0:	f021 0102 	bic.w	r1, r1, #2
   294d4:	e843 1200 	strex	r2, r1, [r3]
   294d8:	2a00      	cmp	r2, #0
   294da:	d1f7      	bne.n	294cc <chan_cfm_sent+0xc>
   294dc:	f3bf 8f5b 	dmb	ish
	tx_meta_data_free(data);
   294e0:	f7f4 f8e0 	bl	1d6a4 <tx_meta_data_free>
}
   294e4:	bd08      	pop	{r3, pc}

000294e6 <chan_rsp_sent>:
{
   294e6:	b508      	push	{r3, lr}
   294e8:	4608      	mov	r0, r1
	struct bt_att_chan *chan = data->att_chan;
   294ea:	680b      	ldr	r3, [r1, #0]
		atomic_clear_bit(chan->flags, ATT_PENDING_RSP);
   294ec:	3390      	adds	r3, #144	; 0x90
   294ee:	f3bf 8f5b 	dmb	ish
   294f2:	e853 1f00 	ldrex	r1, [r3]
   294f6:	f021 0101 	bic.w	r1, r1, #1
   294fa:	e843 1200 	strex	r2, r1, [r3]
   294fe:	2a00      	cmp	r2, #0
   29500:	d1f7      	bne.n	294f2 <chan_rsp_sent+0xc>
   29502:	f3bf 8f5b 	dmb	ish
	tx_meta_data_free(data);
   29506:	f7f4 f8cd 	bl	1d6a4 <tx_meta_data_free>
}
   2950a:	bd08      	pop	{r3, pc}

0002950c <get_first_buf_matching_chan>:
{
   2950c:	b508      	push	{r3, lr}
		return net_buf_get(fifo, K_NO_WAIT);
   2950e:	2200      	movs	r2, #0
   29510:	2300      	movs	r3, #0
   29512:	f001 fd36 	bl	2af82 <net_buf_get>
}
   29516:	bd08      	pop	{r3, pc}

00029518 <process_queue>:
{
   29518:	b570      	push	{r4, r5, r6, lr}
   2951a:	4604      	mov	r4, r0
   2951c:	460d      	mov	r5, r1
	buf = get_first_buf_matching_chan(queue, chan);
   2951e:	4601      	mov	r1, r0
   29520:	4628      	mov	r0, r5
   29522:	f7ff fff3 	bl	2950c <get_first_buf_matching_chan>
	if (buf) {
   29526:	b168      	cbz	r0, 29544 <process_queue+0x2c>
   29528:	4606      	mov	r6, r0
		err = bt_att_chan_send(chan, buf);
   2952a:	4601      	mov	r1, r0
   2952c:	4620      	mov	r0, r4
   2952e:	f7ff ff17 	bl	29360 <bt_att_chan_send>
		if (err) {
   29532:	4604      	mov	r4, r0
   29534:	b908      	cbnz	r0, 2953a <process_queue+0x22>
}
   29536:	4620      	mov	r0, r4
   29538:	bd70      	pop	{r4, r5, r6, pc}
			k_queue_prepend(&queue->_queue, buf);
   2953a:	4631      	mov	r1, r6
   2953c:	4628      	mov	r0, r5
   2953e:	f003 fcf7 	bl	2cf30 <k_queue_prepend>
			return err;
   29542:	e7f8      	b.n	29536 <process_queue+0x1e>
	return -ENOENT;
   29544:	f06f 0401 	mvn.w	r4, #1
   29548:	e7f5      	b.n	29536 <process_queue+0x1e>

0002954a <bt_att_sent>:
{
   2954a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2954c:	4604      	mov	r4, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   2954e:	1f06      	subs	r6, r0, #4
	struct bt_att *att = chan->att;
   29550:	f850 5c04 	ldr.w	r5, [r0, #-4]
	atomic_clear_bit(chan->flags, ATT_PENDING_SENT);
   29554:	f100 038c 	add.w	r3, r0, #140	; 0x8c
   29558:	f3bf 8f5b 	dmb	ish
   2955c:	e853 1f00 	ldrex	r1, [r3]
   29560:	f021 0110 	bic.w	r1, r1, #16
   29564:	e843 1200 	strex	r2, r1, [r3]
   29568:	2a00      	cmp	r2, #0
   2956a:	d1f7      	bne.n	2955c <bt_att_sent+0x12>
   2956c:	f3bf 8f5b 	dmb	ish
	if (!att) {
   29570:	b145      	cbz	r5, 29584 <bt_att_sent+0x3a>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   29572:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   29576:	b133      	cbz	r3, 29586 <bt_att_sent+0x3c>
	err = process_queue(chan, &chan->tx_queue);
   29578:	f104 0194 	add.w	r1, r4, #148	; 0x94
   2957c:	4630      	mov	r0, r6
   2957e:	f7ff ffcb 	bl	29518 <process_queue>
	if (!err) {
   29582:	b9c0      	cbnz	r0, 295b6 <bt_att_sent+0x6c>
}
   29584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return list->head;
   29586:	686f      	ldr	r7, [r5, #4]
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   29588:	2f00      	cmp	r7, #0
   2958a:	d0f5      	beq.n	29578 <bt_att_sent+0x2e>
	return node->next;
   2958c:	683b      	ldr	r3, [r7, #0]
	list->head = node;
   2958e:	606b      	str	r3, [r5, #4]
	return list->tail;
   29590:	68aa      	ldr	r2, [r5, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   29592:	42ba      	cmp	r2, r7
   29594:	d00d      	beq.n	295b2 <bt_att_sent+0x68>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   29596:	4639      	mov	r1, r7
   29598:	4630      	mov	r0, r6
   2959a:	f7ff fee5 	bl	29368 <chan_req_send>
   2959e:	2800      	cmp	r0, #0
   295a0:	daf0      	bge.n	29584 <bt_att_sent+0x3a>
	return list->head;
   295a2:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   295a4:	603b      	str	r3, [r7, #0]
	list->head = node;
   295a6:	606f      	str	r7, [r5, #4]
	return list->tail;
   295a8:	68ab      	ldr	r3, [r5, #8]
Z_GENLIST_PREPEND(slist, snode)
   295aa:	2b00      	cmp	r3, #0
   295ac:	d1e4      	bne.n	29578 <bt_att_sent+0x2e>
	list->tail = node;
   295ae:	60af      	str	r7, [r5, #8]
}
   295b0:	e7e2      	b.n	29578 <bt_att_sent+0x2e>
	list->tail = node;
   295b2:	60ab      	str	r3, [r5, #8]
}
   295b4:	e7ef      	b.n	29596 <bt_att_sent+0x4c>
	(void)process_queue(chan, &att->tx_queue);
   295b6:	f105 010c 	add.w	r1, r5, #12
   295ba:	4630      	mov	r0, r6
   295bc:	f7ff ffac 	bl	29518 <process_queue>
   295c0:	e7e0      	b.n	29584 <bt_att_sent+0x3a>

000295c2 <att_send_process>:
{
   295c2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   295c6:	4680      	mov	r8, r0
	return list->head;
   295c8:	6a44      	ldr	r4, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   295ca:	b374      	cbz	r4, 2962a <att_send_process+0x68>
   295cc:	3ce0      	subs	r4, #224	; 0xe0
Z_GENLIST_PEEK_NEXT(slist, snode)
   295ce:	f114 05e0 	adds.w	r5, r4, #224	; 0xe0
   295d2:	d003      	beq.n	295dc <att_send_process+0x1a>
	return node->next;
   295d4:	f8d4 50e0 	ldr.w	r5, [r4, #224]	; 0xe0
   295d8:	b105      	cbz	r5, 295dc <att_send_process+0x1a>
   295da:	3de0      	subs	r5, #224	; 0xe0
   295dc:	2600      	movs	r6, #0
   295de:	4637      	mov	r7, r6
   295e0:	e00e      	b.n	29600 <att_send_process+0x3e>
		err = process_queue(chan, &att->tx_queue);
   295e2:	f108 010c 	add.w	r1, r8, #12
   295e6:	4620      	mov	r0, r4
   295e8:	f7ff ff96 	bl	29518 <process_queue>
		if (!err) {
   295ec:	4606      	mov	r6, r0
   295ee:	b300      	cbz	r0, 29632 <att_send_process+0x70>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   295f0:	b1ed      	cbz	r5, 2962e <att_send_process+0x6c>
   295f2:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
   295f6:	b103      	cbz	r3, 295fa <att_send_process+0x38>
   295f8:	3be0      	subs	r3, #224	; 0xe0
   295fa:	4627      	mov	r7, r4
   295fc:	462c      	mov	r4, r5
   295fe:	461d      	mov	r5, r3
   29600:	b1bc      	cbz	r4, 29632 <att_send_process+0x70>
		if (err == -ENOENT && prev &&
   29602:	f116 0f02 	cmn.w	r6, #2
   29606:	d1ec      	bne.n	295e2 <att_send_process+0x20>
   29608:	2f00      	cmp	r7, #0
   2960a:	d0ea      	beq.n	295e2 <att_send_process+0x20>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   2960c:	2103      	movs	r1, #3
   2960e:	f104 0090 	add.w	r0, r4, #144	; 0x90
   29612:	f7ff fe7b 	bl	2930c <atomic_test_bit>
   29616:	4681      	mov	r9, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   29618:	2103      	movs	r1, #3
   2961a:	f107 0090 	add.w	r0, r7, #144	; 0x90
   2961e:	f7ff fe75 	bl	2930c <atomic_test_bit>
		if (err == -ENOENT && prev &&
   29622:	4581      	cmp	r9, r0
   29624:	d1dd      	bne.n	295e2 <att_send_process+0x20>
   29626:	463c      	mov	r4, r7
   29628:	e7e2      	b.n	295f0 <att_send_process+0x2e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2962a:	4625      	mov	r5, r4
   2962c:	e7d6      	b.n	295dc <att_send_process+0x1a>
   2962e:	462b      	mov	r3, r5
   29630:	e7e3      	b.n	295fa <att_send_process+0x38>
}
   29632:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00029636 <att_notify_mult>:
{
   29636:	b508      	push	{r3, lr}
	bt_gatt_mult_notification(chan->att->conn, buf->data, buf->len);
   29638:	6803      	ldr	r3, [r0, #0]
   2963a:	8a0a      	ldrh	r2, [r1, #16]
   2963c:	68c9      	ldr	r1, [r1, #12]
   2963e:	6818      	ldr	r0, [r3, #0]
   29640:	f7f6 fb8a 	bl	1fd58 <bt_gatt_mult_notification>
}
   29644:	2000      	movs	r0, #0
   29646:	bd08      	pop	{r3, pc}

00029648 <att_notify>:
{
   29648:	b538      	push	{r3, r4, r5, lr}
   2964a:	4605      	mov	r5, r0
   2964c:	460c      	mov	r4, r1
	return net_buf_simple_pull_le16(&buf->b);
   2964e:	f101 000c 	add.w	r0, r1, #12
   29652:	f001 fd57 	bl	2b104 <net_buf_simple_pull_le16>
   29656:	4601      	mov	r1, r0
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   29658:	682d      	ldr	r5, [r5, #0]
   2965a:	8a23      	ldrh	r3, [r4, #16]
   2965c:	68e2      	ldr	r2, [r4, #12]
   2965e:	6828      	ldr	r0, [r5, #0]
   29660:	f001 fae7 	bl	2ac32 <bt_gatt_notification>
}
   29664:	2000      	movs	r0, #0
   29666:	bd38      	pop	{r3, r4, r5, pc}

00029668 <bt_att_chan_send_rsp>:
{
   29668:	b538      	push	{r3, r4, r5, lr}
   2966a:	4604      	mov	r4, r0
   2966c:	460d      	mov	r5, r1
	err = chan_send(chan, buf);
   2966e:	f7f4 f827 	bl	1d6c0 <chan_send>
	if (err) {
   29672:	b900      	cbnz	r0, 29676 <bt_att_chan_send_rsp+0xe>
}
   29674:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_put(&chan->tx_queue, buf);
   29676:	4629      	mov	r1, r5
   29678:	f104 0098 	add.w	r0, r4, #152	; 0x98
   2967c:	f001 fcbd 	bl	2affa <net_buf_put>
}
   29680:	e7f8      	b.n	29674 <bt_att_chan_send_rsp+0xc>

00029682 <att_chan_mtu_updated>:
{
   29682:	b570      	push	{r4, r5, r6, lr}
	struct bt_att *att = updated_chan->att;
   29684:	6806      	ldr	r6, [r0, #0]
	return list->head;
   29686:	6a73      	ldr	r3, [r6, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   29688:	b153      	cbz	r3, 296a0 <att_chan_mtu_updated+0x1e>
   2968a:	3be0      	subs	r3, #224	; 0xe0
Z_GENLIST_PEEK_NEXT(slist, snode)
   2968c:	f113 04e0 	adds.w	r4, r3, #224	; 0xe0
   29690:	d003      	beq.n	2969a <att_chan_mtu_updated+0x18>
	return node->next;
   29692:	f8d3 40e0 	ldr.w	r4, [r3, #224]	; 0xe0
   29696:	b104      	cbz	r4, 2969a <att_chan_mtu_updated+0x18>
   29698:	3ce0      	subs	r4, #224	; 0xe0
   2969a:	2200      	movs	r2, #0
   2969c:	4611      	mov	r1, r2
   2969e:	e004      	b.n	296aa <att_chan_mtu_updated+0x28>
   296a0:	461c      	mov	r4, r3
   296a2:	e7fa      	b.n	2969a <att_chan_mtu_updated+0x18>
   296a4:	4625      	mov	r5, r4
   296a6:	4623      	mov	r3, r4
   296a8:	462c      	mov	r4, r5
   296aa:	b18b      	cbz	r3, 296d0 <att_chan_mtu_updated+0x4e>
		if (chan == updated_chan) {
   296ac:	4283      	cmp	r3, r0
   296ae:	d007      	beq.n	296c0 <att_chan_mtu_updated+0x3e>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   296b0:	8d5d      	ldrh	r5, [r3, #42]	; 0x2a
   296b2:	42a9      	cmp	r1, r5
   296b4:	bf38      	it	cc
   296b6:	4629      	movcc	r1, r5
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   296b8:	8b5b      	ldrh	r3, [r3, #26]
   296ba:	429a      	cmp	r2, r3
   296bc:	bf38      	it	cc
   296be:	461a      	movcc	r2, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   296c0:	2c00      	cmp	r4, #0
   296c2:	d0ef      	beq.n	296a4 <att_chan_mtu_updated+0x22>
   296c4:	f8d4 50e0 	ldr.w	r5, [r4, #224]	; 0xe0
   296c8:	2d00      	cmp	r5, #0
   296ca:	d0ec      	beq.n	296a6 <att_chan_mtu_updated+0x24>
   296cc:	3de0      	subs	r5, #224	; 0xe0
   296ce:	e7ea      	b.n	296a6 <att_chan_mtu_updated+0x24>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   296d0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
   296d2:	428b      	cmp	r3, r1
   296d4:	d802      	bhi.n	296dc <att_chan_mtu_updated+0x5a>
	    (updated_chan->chan.rx.mtu > max_rx)) {
   296d6:	8b44      	ldrh	r4, [r0, #26]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   296d8:	4294      	cmp	r4, r2
   296da:	d909      	bls.n	296f0 <att_chan_mtu_updated+0x6e>
		max_rx = MAX(max_rx, updated_chan->chan.rx.mtu);
   296dc:	8b40      	ldrh	r0, [r0, #26]
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   296de:	4282      	cmp	r2, r0
   296e0:	bf38      	it	cc
   296e2:	4602      	movcc	r2, r0
   296e4:	4299      	cmp	r1, r3
   296e6:	bf38      	it	cc
   296e8:	4619      	movcc	r1, r3
   296ea:	6830      	ldr	r0, [r6, #0]
   296ec:	f7f6 fc16 	bl	1ff1c <bt_gatt_att_max_mtu_changed>
}
   296f0:	bd70      	pop	{r4, r5, r6, pc}

000296f2 <write_cb>:
{
   296f2:	b5f0      	push	{r4, r5, r6, r7, lr}
   296f4:	b083      	sub	sp, #12
   296f6:	4606      	mov	r6, r0
   296f8:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   296fa:	f44f 7295 	mov.w	r2, #298	; 0x12a
   296fe:	4601      	mov	r1, r0
   29700:	6820      	ldr	r0, [r4, #0]
   29702:	f001 f90f 	bl	2a924 <bt_gatt_check_perm>
   29706:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   29708:	bb08      	cbnz	r0, 2974e <write_cb+0x5c>
   2970a:	4605      	mov	r5, r0
	if (!data->req) {
   2970c:	7a23      	ldrb	r3, [r4, #8]
   2970e:	b11b      	cbz	r3, 29718 <write_cb+0x26>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   29710:	2b18      	cmp	r3, #24
   29712:	d016      	beq.n	29742 <write_cb+0x50>
	uint8_t flags = 0U;
   29714:	4603      	mov	r3, r0
   29716:	e000      	b.n	2971a <write_cb+0x28>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   29718:	2302      	movs	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   2971a:	68b7      	ldr	r7, [r6, #8]
   2971c:	9301      	str	r3, [sp, #4]
   2971e:	8a63      	ldrh	r3, [r4, #18]
   29720:	9300      	str	r3, [sp, #0]
   29722:	8a23      	ldrh	r3, [r4, #16]
   29724:	68e2      	ldr	r2, [r4, #12]
   29726:	4631      	mov	r1, r6
   29728:	6820      	ldr	r0, [r4, #0]
   2972a:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   2972c:	2800      	cmp	r0, #0
   2972e:	db02      	blt.n	29736 <write_cb+0x44>
   29730:	8a23      	ldrh	r3, [r4, #16]
   29732:	4298      	cmp	r0, r3
   29734:	d007      	beq.n	29746 <write_cb+0x54>
		data->err = err_to_att(write);
   29736:	f7ff fda2 	bl	2927e <err_to_att>
   2973a:	7520      	strb	r0, [r4, #20]
}
   2973c:	4628      	mov	r0, r5
   2973e:	b003      	add	sp, #12
   29740:	bdf0      	pop	{r4, r5, r6, r7, pc}
		flags |= BT_GATT_WRITE_FLAG_EXECUTE;
   29742:	2304      	movs	r3, #4
   29744:	e7e9      	b.n	2971a <write_cb+0x28>
	data->err = 0U;
   29746:	2300      	movs	r3, #0
   29748:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   2974a:	2501      	movs	r5, #1
   2974c:	e7f6      	b.n	2973c <write_cb+0x4a>
		return BT_GATT_ITER_STOP;
   2974e:	2500      	movs	r5, #0
   29750:	e7f4      	b.n	2973c <write_cb+0x4a>

00029752 <att_chan_read>:
{
   29752:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29756:	b085      	sub	sp, #20
   29758:	4680      	mov	r8, r0
   2975a:	4689      	mov	r9, r1
   2975c:	9202      	str	r2, [sp, #8]
   2975e:	461d      	mov	r5, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   29760:	6843      	ldr	r3, [r0, #4]
   29762:	9303      	str	r3, [sp, #12]
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   29764:	8d40      	ldrh	r0, [r0, #42]	; 0x2a
	while (buf) {
   29766:	4613      	mov	r3, r2
	size_t bytes = 0;
   29768:	2200      	movs	r2, #0
	while (buf) {
   2976a:	e002      	b.n	29772 <att_chan_read+0x20>
		bytes += buf->len;
   2976c:	8a19      	ldrh	r1, [r3, #16]
   2976e:	440a      	add	r2, r1
		buf = buf->frags;
   29770:	685b      	ldr	r3, [r3, #4]
	while (buf) {
   29772:	2b00      	cmp	r3, #0
   29774:	d1fa      	bne.n	2976c <att_chan_read+0x1a>
   29776:	4290      	cmp	r0, r2
   29778:	d804      	bhi.n	29784 <att_chan_read+0x32>
		return 0;
   2977a:	2400      	movs	r4, #0
}
   2977c:	4620      	mov	r0, r4
   2977e:	b005      	add	sp, #20
   29780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(buf);
   29784:	9802      	ldr	r0, [sp, #8]
   29786:	f001 fc63 	bl	2b050 <net_buf_frag_last>
   2978a:	4607      	mov	r7, r0
	size_t len, total = 0;
   2978c:	f04f 0a00 	mov.w	sl, #0
   29790:	e082      	b.n	29898 <att_chan_read+0x146>
		bytes += buf->len;
   29792:	8a19      	ldrh	r1, [r3, #16]
   29794:	440a      	add	r2, r1
		buf = buf->frags;
   29796:	685b      	ldr	r3, [r3, #4]
	while (buf) {
   29798:	2b00      	cmp	r3, #0
   2979a:	d1fa      	bne.n	29792 <att_chan_read+0x40>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2979c:	1aa4      	subs	r4, r4, r2
	return net_buf_simple_tailroom(&buf->b);
   2979e:	f107 060c 	add.w	r6, r7, #12
   297a2:	4630      	mov	r0, r6
   297a4:	f001 fcba 	bl	2b11c <net_buf_simple_tailroom>
   297a8:	4284      	cmp	r4, r0
   297aa:	d326      	bcc.n	297fa <att_chan_read+0xa8>
   297ac:	4630      	mov	r0, r6
   297ae:	f001 fcb5 	bl	2b11c <net_buf_simple_tailroom>
   297b2:	4606      	mov	r6, r0
		if (!len) {
   297b4:	b36e      	cbz	r6, 29812 <att_chan_read+0xc0>
		read = attr->read(conn, attr, frag->data + frag->len, len,
   297b6:	f8d9 4004 	ldr.w	r4, [r9, #4]
   297ba:	68f9      	ldr	r1, [r7, #12]
   297bc:	8a3a      	ldrh	r2, [r7, #16]
   297be:	9500      	str	r5, [sp, #0]
   297c0:	b2b3      	uxth	r3, r6
   297c2:	440a      	add	r2, r1
   297c4:	4649      	mov	r1, r9
   297c6:	9803      	ldr	r0, [sp, #12]
   297c8:	47a0      	blx	r4
		if (read < 0) {
   297ca:	1e04      	subs	r4, r0, #0
   297cc:	db55      	blt.n	2987a <att_chan_read+0x128>
		if (cb && !cb(frag, read, user_data)) {
   297ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   297d0:	b12b      	cbz	r3, 297de <att_chan_read+0x8c>
   297d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   297d4:	4621      	mov	r1, r4
   297d6:	4638      	mov	r0, r7
   297d8:	4798      	blx	r3
   297da:	2800      	cmp	r0, #0
   297dc:	d061      	beq.n	298a2 <att_chan_read+0x150>
		net_buf_add(frag, read);
   297de:	46a3      	mov	fp, r4
	return net_buf_simple_add(&buf->b, len);
   297e0:	4621      	mov	r1, r4
   297e2:	f107 000c 	add.w	r0, r7, #12
   297e6:	f001 fc53 	bl	2b090 <net_buf_simple_add>
		total += read;
   297ea:	44a2      	add	sl, r4
		offset += read;
   297ec:	442c      	add	r4, r5
   297ee:	b2a5      	uxth	r5, r4
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   297f0:	f8b8 002a 	ldrh.w	r0, [r8, #42]	; 0x2a
   297f4:	9b02      	ldr	r3, [sp, #8]
	size_t bytes = 0;
   297f6:	2200      	movs	r2, #0
   297f8:	e048      	b.n	2988c <att_chan_read+0x13a>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   297fa:	f8b8 602a 	ldrh.w	r6, [r8, #42]	; 0x2a
	while (buf) {
   297fe:	9b02      	ldr	r3, [sp, #8]
	size_t bytes = 0;
   29800:	2200      	movs	r2, #0
	while (buf) {
   29802:	e002      	b.n	2980a <att_chan_read+0xb8>
		bytes += buf->len;
   29804:	8a19      	ldrh	r1, [r3, #16]
   29806:	440a      	add	r2, r1
		buf = buf->frags;
   29808:	685b      	ldr	r3, [r3, #4]
	while (buf) {
   2980a:	2b00      	cmp	r3, #0
   2980c:	d1fa      	bne.n	29804 <att_chan_read+0xb2>
   2980e:	1ab6      	subs	r6, r6, r2
   29810:	e7d0      	b.n	297b4 <att_chan_read+0x62>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   29812:	9b02      	ldr	r3, [sp, #8]
   29814:	7a98      	ldrb	r0, [r3, #10]
   29816:	f7f6 fc15 	bl	20044 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   2981a:	2200      	movs	r2, #0
   2981c:	2300      	movs	r3, #0
   2981e:	f001 fba9 	bl	2af74 <net_buf_alloc_fixed>
			if (!frag) {
   29822:	4607      	mov	r7, r0
   29824:	b150      	cbz	r0, 2983c <att_chan_read+0xea>
			net_buf_frag_add(buf, frag);
   29826:	4601      	mov	r1, r0
   29828:	f8dd b008 	ldr.w	fp, [sp, #8]
   2982c:	4658      	mov	r0, fp
   2982e:	f001 fc20 	bl	2b072 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   29832:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
	size_t bytes = 0;
   29836:	4632      	mov	r2, r6
	while (buf) {
   29838:	465b      	mov	r3, fp
   2983a:	e004      	b.n	29846 <att_chan_read+0xf4>
				return total;
   2983c:	4654      	mov	r4, sl
   2983e:	e79d      	b.n	2977c <att_chan_read+0x2a>
		bytes += buf->len;
   29840:	8a19      	ldrh	r1, [r3, #16]
   29842:	440a      	add	r2, r1
		buf = buf->frags;
   29844:	685b      	ldr	r3, [r3, #4]
	while (buf) {
   29846:	2b00      	cmp	r3, #0
   29848:	d1fa      	bne.n	29840 <att_chan_read+0xee>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2984a:	1aa4      	subs	r4, r4, r2
	return net_buf_simple_tailroom(&buf->b);
   2984c:	f107 0b0c 	add.w	fp, r7, #12
   29850:	4658      	mov	r0, fp
   29852:	f001 fc63 	bl	2b11c <net_buf_simple_tailroom>
   29856:	4284      	cmp	r4, r0
   29858:	d304      	bcc.n	29864 <att_chan_read+0x112>
   2985a:	4658      	mov	r0, fp
   2985c:	f001 fc5e 	bl	2b11c <net_buf_simple_tailroom>
   29860:	4606      	mov	r6, r0
   29862:	e7a8      	b.n	297b6 <att_chan_read+0x64>
   29864:	f8b8 102a 	ldrh.w	r1, [r8, #42]	; 0x2a
	while (buf) {
   29868:	9b02      	ldr	r3, [sp, #8]
   2986a:	e002      	b.n	29872 <att_chan_read+0x120>
		bytes += buf->len;
   2986c:	8a1a      	ldrh	r2, [r3, #16]
   2986e:	4416      	add	r6, r2
		buf = buf->frags;
   29870:	685b      	ldr	r3, [r3, #4]
	while (buf) {
   29872:	2b00      	cmp	r3, #0
   29874:	d1fa      	bne.n	2986c <att_chan_read+0x11a>
   29876:	1b8e      	subs	r6, r1, r6
   29878:	e79d      	b.n	297b6 <att_chan_read+0x64>
			if (total) {
   2987a:	f1ba 0f00 	cmp.w	sl, #0
   2987e:	f43f af7d 	beq.w	2977c <att_chan_read+0x2a>
				return total;
   29882:	4654      	mov	r4, sl
   29884:	e77a      	b.n	2977c <att_chan_read+0x2a>
		bytes += buf->len;
   29886:	8a19      	ldrh	r1, [r3, #16]
   29888:	440a      	add	r2, r1
		buf = buf->frags;
   2988a:	685b      	ldr	r3, [r3, #4]
	while (buf) {
   2988c:	2b00      	cmp	r3, #0
   2988e:	d1fa      	bne.n	29886 <att_chan_read+0x134>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   29890:	4290      	cmp	r0, r2
   29892:	d906      	bls.n	298a2 <att_chan_read+0x150>
   29894:	45b3      	cmp	fp, r6
   29896:	d104      	bne.n	298a2 <att_chan_read+0x150>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   29898:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   2989c:	9b02      	ldr	r3, [sp, #8]
	size_t bytes = 0;
   2989e:	2200      	movs	r2, #0
	while (buf) {
   298a0:	e77a      	b.n	29798 <att_chan_read+0x46>
	return total;
   298a2:	4654      	mov	r4, sl
   298a4:	e76a      	b.n	2977c <att_chan_read+0x2a>

000298a6 <read_vl_cb>:
{
   298a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   298aa:	b082      	sub	sp, #8
   298ac:	4606      	mov	r6, r0
   298ae:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   298b0:	6817      	ldr	r7, [r2, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   298b2:	6878      	ldr	r0, [r7, #4]
	data->err = 0x00;
   298b4:	2300      	movs	r3, #0
   298b6:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   298b8:	2295      	movs	r2, #149	; 0x95
   298ba:	4631      	mov	r1, r6
   298bc:	f001 f832 	bl	2a924 <bt_gatt_check_perm>
   298c0:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   298c2:	b9f0      	cbnz	r0, 29902 <read_vl_cb+0x5c>
   298c4:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu - data->buf->len < 2) {
   298c6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   298c8:	68a0      	ldr	r0, [r4, #8]
   298ca:	8a02      	ldrh	r2, [r0, #16]
   298cc:	1a9b      	subs	r3, r3, r2
   298ce:	2b01      	cmp	r3, #1
   298d0:	dd18      	ble.n	29904 <read_vl_cb+0x5e>
	return net_buf_simple_add(&buf->b, len);
   298d2:	2102      	movs	r1, #2
   298d4:	300c      	adds	r0, #12
   298d6:	f001 fbdb 	bl	2b090 <net_buf_simple_add>
   298da:	4680      	mov	r8, r0
	read = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   298dc:	2300      	movs	r3, #0
   298de:	9301      	str	r3, [sp, #4]
   298e0:	9300      	str	r3, [sp, #0]
   298e2:	88a3      	ldrh	r3, [r4, #4]
   298e4:	68a2      	ldr	r2, [r4, #8]
   298e6:	4631      	mov	r1, r6
   298e8:	4638      	mov	r0, r7
   298ea:	f7ff ff32 	bl	29752 <att_chan_read>
	if (read < 0) {
   298ee:	2800      	cmp	r0, #0
   298f0:	db03      	blt.n	298fa <read_vl_cb+0x54>
	rsp->len = read;
   298f2:	f8a8 0000 	strh.w	r0, [r8]
	return BT_GATT_ITER_CONTINUE;
   298f6:	2501      	movs	r5, #1
   298f8:	e004      	b.n	29904 <read_vl_cb+0x5e>
		data->err = err_to_att(read);
   298fa:	f7ff fcc0 	bl	2927e <err_to_att>
   298fe:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   29900:	e000      	b.n	29904 <read_vl_cb+0x5e>
		return BT_GATT_ITER_STOP;
   29902:	2500      	movs	r5, #0
}
   29904:	4628      	mov	r0, r5
   29906:	b002      	add	sp, #8
   29908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002990c <read_cb>:
{
   2990c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2990e:	b083      	sub	sp, #12
   29910:	4606      	mov	r6, r0
   29912:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   29914:	6817      	ldr	r7, [r2, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   29916:	6878      	ldr	r0, [r7, #4]
	data->err = 0x00;
   29918:	2300      	movs	r3, #0
   2991a:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2991c:	2295      	movs	r2, #149	; 0x95
   2991e:	4631      	mov	r1, r6
   29920:	f001 f800 	bl	2a924 <bt_gatt_check_perm>
   29924:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   29926:	b118      	cbz	r0, 29930 <read_cb+0x24>
		return BT_GATT_ITER_STOP;
   29928:	2500      	movs	r5, #0
}
   2992a:	4628      	mov	r0, r5
   2992c:	b003      	add	sp, #12
   2992e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29930:	4605      	mov	r5, r0
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   29932:	2300      	movs	r3, #0
   29934:	9301      	str	r3, [sp, #4]
   29936:	9300      	str	r3, [sp, #0]
   29938:	88a3      	ldrh	r3, [r4, #4]
   2993a:	68a2      	ldr	r2, [r4, #8]
   2993c:	4631      	mov	r1, r6
   2993e:	4638      	mov	r0, r7
   29940:	f7ff ff07 	bl	29752 <att_chan_read>
	if (ret < 0) {
   29944:	2800      	cmp	r0, #0
   29946:	db01      	blt.n	2994c <read_cb+0x40>
	return BT_GATT_ITER_CONTINUE;
   29948:	2501      	movs	r5, #1
   2994a:	e7ee      	b.n	2992a <read_cb+0x1e>
		data->err = err_to_att(ret);
   2994c:	f7ff fc97 	bl	2927e <err_to_att>
   29950:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   29952:	e7ea      	b.n	2992a <read_cb+0x1e>

00029954 <find_info_cb>:
{
   29954:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   29958:	4606      	mov	r6, r0
   2995a:	460f      	mov	r7, r1
   2995c:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   2995e:	f8d2 8000 	ldr.w	r8, [r2]
	if (!data->rsp) {
   29962:	6893      	ldr	r3, [r2, #8]
   29964:	b14b      	cbz	r3, 2997a <find_info_cb+0x26>
	switch (data->rsp->format) {
   29966:	68a3      	ldr	r3, [r4, #8]
   29968:	781d      	ldrb	r5, [r3, #0]
   2996a:	2d01      	cmp	r5, #1
   2996c:	d013      	beq.n	29996 <find_info_cb+0x42>
   2996e:	2d02      	cmp	r5, #2
   29970:	d02d      	beq.n	299ce <find_info_cb+0x7a>
   29972:	2500      	movs	r5, #0
}
   29974:	4628      	mov	r0, r5
   29976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   2997a:	6850      	ldr	r0, [r2, #4]
   2997c:	2101      	movs	r1, #1
   2997e:	300c      	adds	r0, #12
   29980:	f001 fb86 	bl	2b090 <net_buf_simple_add>
   29984:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   29986:	6833      	ldr	r3, [r6, #0]
   29988:	781b      	ldrb	r3, [r3, #0]
   2998a:	b913      	cbnz	r3, 29992 <find_info_cb+0x3e>
   2998c:	2301      	movs	r3, #1
   2998e:	7003      	strb	r3, [r0, #0]
   29990:	e7e9      	b.n	29966 <find_info_cb+0x12>
   29992:	2302      	movs	r3, #2
   29994:	e7fb      	b.n	2998e <find_info_cb+0x3a>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   29996:	6833      	ldr	r3, [r6, #0]
   29998:	f893 9000 	ldrb.w	r9, [r3]
   2999c:	f1b9 0f00 	cmp.w	r9, #0
   299a0:	d001      	beq.n	299a6 <find_info_cb+0x52>
			return BT_GATT_ITER_STOP;
   299a2:	2500      	movs	r5, #0
   299a4:	e7e6      	b.n	29974 <find_info_cb+0x20>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   299a6:	6860      	ldr	r0, [r4, #4]
   299a8:	2104      	movs	r1, #4
   299aa:	300c      	adds	r0, #12
   299ac:	f001 fb70 	bl	2b090 <net_buf_simple_add>
   299b0:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
   299b2:	8007      	strh	r7, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   299b4:	6832      	ldr	r2, [r6, #0]
   299b6:	68e3      	ldr	r3, [r4, #12]
   299b8:	8852      	ldrh	r2, [r2, #2]
   299ba:	805a      	strh	r2, [r3, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   299bc:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   299c0:	6862      	ldr	r2, [r4, #4]
   299c2:	8a12      	ldrh	r2, [r2, #16]
   299c4:	1a9b      	subs	r3, r3, r2
   299c6:	2b04      	cmp	r3, #4
   299c8:	d8d4      	bhi.n	29974 <find_info_cb+0x20>
	return BT_GATT_ITER_STOP;
   299ca:	464d      	mov	r5, r9
   299cc:	e7d2      	b.n	29974 <find_info_cb+0x20>
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   299ce:	6833      	ldr	r3, [r6, #0]
   299d0:	781b      	ldrb	r3, [r3, #0]
   299d2:	2b02      	cmp	r3, #2
   299d4:	d001      	beq.n	299da <find_info_cb+0x86>
			return BT_GATT_ITER_STOP;
   299d6:	2500      	movs	r5, #0
   299d8:	e7cc      	b.n	29974 <find_info_cb+0x20>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   299da:	6860      	ldr	r0, [r4, #4]
   299dc:	2112      	movs	r1, #18
   299de:	300c      	adds	r0, #12
   299e0:	f001 fb56 	bl	2b090 <net_buf_simple_add>
   299e4:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   299e6:	8007      	strh	r7, [r0, #0]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   299e8:	68e0      	ldr	r0, [r4, #12]
   299ea:	6831      	ldr	r1, [r6, #0]
   299ec:	2210      	movs	r2, #16
   299ee:	3101      	adds	r1, #1
   299f0:	3002      	adds	r0, #2
   299f2:	f7fe fe46 	bl	28682 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   299f6:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   299fa:	6862      	ldr	r2, [r4, #4]
   299fc:	8a12      	ldrh	r2, [r2, #16]
   299fe:	1a9b      	subs	r3, r3, r2
   29a00:	2b12      	cmp	r3, #18
   29a02:	d801      	bhi.n	29a08 <find_info_cb+0xb4>
	return BT_GATT_ITER_STOP;
   29a04:	2500      	movs	r5, #0
   29a06:	e7b5      	b.n	29974 <find_info_cb+0x20>
			return BT_GATT_ITER_CONTINUE;
   29a08:	2501      	movs	r5, #1
   29a0a:	e7b3      	b.n	29974 <find_info_cb+0x20>

00029a0c <atomic_test_and_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   29a0c:	f001 021f 	and.w	r2, r1, #31
   29a10:	2301      	movs	r3, #1
   29a12:	4093      	lsls	r3, r2
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   29a14:	0949      	lsrs	r1, r1, #5
   29a16:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   29a1a:	f3bf 8f5b 	dmb	ish
   29a1e:	e850 2f00 	ldrex	r2, [r0]
   29a22:	ea42 0103 	orr.w	r1, r2, r3
   29a26:	e840 1c00 	strex	ip, r1, [r0]
   29a2a:	f1bc 0f00 	cmp.w	ip, #0
   29a2e:	d1f6      	bne.n	29a1e <atomic_test_and_set_bit+0x12>
   29a30:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   29a34:	4213      	tst	r3, r2
}
   29a36:	bf14      	ite	ne
   29a38:	2001      	movne	r0, #1
   29a3a:	2000      	moveq	r0, #0
   29a3c:	4770      	bx	lr

00029a3e <att_sent>:
{
   29a3e:	b508      	push	{r3, lr}
	struct bt_att_chan *att_chan = data->att_chan;
   29a40:	680b      	ldr	r3, [r1, #0]
	struct bt_l2cap_chan *chan = &att_chan->chan.chan;
   29a42:	1d18      	adds	r0, r3, #4
	if (chan->ops->sent) {
   29a44:	689b      	ldr	r3, [r3, #8]
   29a46:	699b      	ldr	r3, [r3, #24]
   29a48:	b103      	cbz	r3, 29a4c <att_sent+0xe>
		chan->ops->sent(chan);
   29a4a:	4798      	blx	r3
}
   29a4c:	bd08      	pop	{r3, pc}

00029a4e <att_unknown>:
{
   29a4e:	b570      	push	{r4, r5, r6, lr}
   29a50:	4604      	mov	r4, r0
   29a52:	460d      	mov	r5, r1
	if (!err) {
   29a54:	4616      	mov	r6, r2
   29a56:	b12a      	cbz	r2, 29a64 <att_unknown+0x16>
	chan_unknown(conn, user_data, err);
   29a58:	4632      	mov	r2, r6
   29a5a:	4629      	mov	r1, r5
   29a5c:	4620      	mov	r0, r4
   29a5e:	f7ff fc62 	bl	29326 <chan_unknown>
}
   29a62:	bd70      	pop	{r4, r5, r6, pc}
		att_sent(conn, user_data);
   29a64:	f7ff ffeb 	bl	29a3e <att_sent>
   29a68:	e7f6      	b.n	29a58 <att_unknown+0xa>

00029a6a <att_tx_complete>:
{
   29a6a:	b570      	push	{r4, r5, r6, lr}
   29a6c:	4604      	mov	r4, r0
   29a6e:	460d      	mov	r5, r1
	if (!err) {
   29a70:	4616      	mov	r6, r2
   29a72:	b12a      	cbz	r2, 29a80 <att_tx_complete+0x16>
	chan_tx_complete(conn, user_data, err);
   29a74:	4632      	mov	r2, r6
   29a76:	4629      	mov	r1, r5
   29a78:	4620      	mov	r0, r4
   29a7a:	f7ff fc59 	bl	29330 <chan_tx_complete>
}
   29a7e:	bd70      	pop	{r4, r5, r6, pc}
		att_sent(conn, user_data);
   29a80:	f7ff ffdd 	bl	29a3e <att_sent>
   29a84:	e7f6      	b.n	29a74 <att_tx_complete+0xa>

00029a86 <att_req_sent>:
{
   29a86:	b570      	push	{r4, r5, r6, lr}
   29a88:	4604      	mov	r4, r0
   29a8a:	460d      	mov	r5, r1
	if (!err) {
   29a8c:	4616      	mov	r6, r2
   29a8e:	b12a      	cbz	r2, 29a9c <att_req_sent+0x16>
	chan_req_sent(conn, user_data, err);
   29a90:	4632      	mov	r2, r6
   29a92:	4629      	mov	r1, r5
   29a94:	4620      	mov	r0, r4
   29a96:	f7ff fd03 	bl	294a0 <chan_req_sent>
}
   29a9a:	bd70      	pop	{r4, r5, r6, pc}
		att_sent(conn, user_data);
   29a9c:	f7ff ffcf 	bl	29a3e <att_sent>
   29aa0:	e7f6      	b.n	29a90 <att_req_sent+0xa>

00029aa2 <att_cfm_sent>:
{
   29aa2:	b570      	push	{r4, r5, r6, lr}
   29aa4:	4604      	mov	r4, r0
   29aa6:	460d      	mov	r5, r1
	if (!err) {
   29aa8:	4616      	mov	r6, r2
   29aaa:	b12a      	cbz	r2, 29ab8 <att_cfm_sent+0x16>
	chan_cfm_sent(conn, user_data, err);
   29aac:	4632      	mov	r2, r6
   29aae:	4629      	mov	r1, r5
   29ab0:	4620      	mov	r0, r4
   29ab2:	f7ff fd05 	bl	294c0 <chan_cfm_sent>
}
   29ab6:	bd70      	pop	{r4, r5, r6, pc}
		att_sent(conn, user_data);
   29ab8:	f7ff ffc1 	bl	29a3e <att_sent>
   29abc:	e7f6      	b.n	29aac <att_cfm_sent+0xa>

00029abe <att_rsp_sent>:
{
   29abe:	b570      	push	{r4, r5, r6, lr}
   29ac0:	4604      	mov	r4, r0
   29ac2:	460d      	mov	r5, r1
	if (!err) {
   29ac4:	4616      	mov	r6, r2
   29ac6:	b12a      	cbz	r2, 29ad4 <att_rsp_sent+0x16>
	chan_rsp_sent(conn, user_data, err);
   29ac8:	4632      	mov	r2, r6
   29aca:	4629      	mov	r1, r5
   29acc:	4620      	mov	r0, r4
   29ace:	f7ff fd0a 	bl	294e6 <chan_rsp_sent>
}
   29ad2:	bd70      	pop	{r4, r5, r6, pc}
		att_sent(conn, user_data);
   29ad4:	f7ff ffb3 	bl	29a3e <att_sent>
   29ad8:	e7f6      	b.n	29ac8 <att_rsp_sent+0xa>

00029ada <att_indicate>:
{
   29ada:	b538      	push	{r3, r4, r5, lr}
   29adc:	4605      	mov	r5, r0
   29ade:	460c      	mov	r4, r1
	return net_buf_simple_pull_le16(&buf->b);
   29ae0:	f101 000c 	add.w	r0, r1, #12
   29ae4:	f001 fb0e 	bl	2b104 <net_buf_simple_pull_le16>
   29ae8:	4601      	mov	r1, r0
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   29aea:	8a23      	ldrh	r3, [r4, #16]
   29aec:	68e2      	ldr	r2, [r4, #12]
   29aee:	6828      	ldr	r0, [r5, #0]
   29af0:	6800      	ldr	r0, [r0, #0]
   29af2:	f001 f89e 	bl	2ac32 <bt_gatt_notification>
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_CONFIRM, 0);
   29af6:	2200      	movs	r2, #0
   29af8:	211e      	movs	r1, #30
   29afa:	4628      	mov	r0, r5
   29afc:	f7f4 f83e 	bl	1db7c <bt_att_chan_create_pdu>
	if (!buf) {
   29b00:	b118      	cbz	r0, 29b0a <att_indicate+0x30>
   29b02:	4601      	mov	r1, r0
	bt_att_chan_send_rsp(chan, buf);
   29b04:	4628      	mov	r0, r5
   29b06:	f7ff fdaf 	bl	29668 <bt_att_chan_send_rsp>
}
   29b0a:	2000      	movs	r0, #0
   29b0c:	bd38      	pop	{r3, r4, r5, pc}

00029b0e <send_err_rsp>:
	if (!req) {
   29b0e:	b901      	cbnz	r1, 29b12 <send_err_rsp+0x4>
   29b10:	4770      	bx	lr
{
   29b12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29b16:	4606      	mov	r6, r0
   29b18:	4615      	mov	r5, r2
   29b1a:	461c      	mov	r4, r3
   29b1c:	460f      	mov	r7, r1
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   29b1e:	2204      	movs	r2, #4
   29b20:	2101      	movs	r1, #1
   29b22:	f7f4 f82b 	bl	1db7c <bt_att_chan_create_pdu>
	if (!buf) {
   29b26:	4680      	mov	r8, r0
   29b28:	b158      	cbz	r0, 29b42 <send_err_rsp+0x34>
	return net_buf_simple_add(&buf->b, len);
   29b2a:	2104      	movs	r1, #4
   29b2c:	300c      	adds	r0, #12
   29b2e:	f001 faaf 	bl	2b090 <net_buf_simple_add>
	rsp->request = req;
   29b32:	7007      	strb	r7, [r0, #0]
	rsp->handle = sys_cpu_to_le16(handle);
   29b34:	f8a0 5001 	strh.w	r5, [r0, #1]
	rsp->error = err;
   29b38:	70c4      	strb	r4, [r0, #3]
	bt_att_chan_send_rsp(chan, buf);
   29b3a:	4641      	mov	r1, r8
   29b3c:	4630      	mov	r0, r6
   29b3e:	f7ff fd93 	bl	29668 <bt_att_chan_send_rsp>
}
   29b42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00029b46 <att_write_cmd>:
{
   29b46:	b530      	push	{r4, r5, lr}
   29b48:	b085      	sub	sp, #20
   29b4a:	4605      	mov	r5, r0
   29b4c:	460c      	mov	r4, r1
	return net_buf_simple_pull_le16(&buf->b);
   29b4e:	f101 000c 	add.w	r0, r1, #12
   29b52:	f001 fad7 	bl	2b104 <net_buf_simple_pull_le16>
   29b56:	4603      	mov	r3, r0
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   29b58:	68e2      	ldr	r2, [r4, #12]
   29b5a:	8a21      	ldrh	r1, [r4, #16]
   29b5c:	9102      	str	r1, [sp, #8]
   29b5e:	9201      	str	r2, [sp, #4]
   29b60:	2100      	movs	r1, #0
   29b62:	9100      	str	r1, [sp, #0]
   29b64:	460a      	mov	r2, r1
   29b66:	4628      	mov	r0, r5
   29b68:	f7f4 fa3c 	bl	1dfe4 <att_write_rsp>
}
   29b6c:	b005      	add	sp, #20
   29b6e:	bd30      	pop	{r4, r5, pc}

00029b70 <att_write_req>:
{
   29b70:	b530      	push	{r4, r5, lr}
   29b72:	b085      	sub	sp, #20
   29b74:	4605      	mov	r5, r0
   29b76:	460c      	mov	r4, r1
   29b78:	f101 000c 	add.w	r0, r1, #12
   29b7c:	f001 fac2 	bl	2b104 <net_buf_simple_pull_le16>
   29b80:	4603      	mov	r3, r0
			     handle, 0, buf->data, buf->len);
   29b82:	68e2      	ldr	r2, [r4, #12]
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   29b84:	8a21      	ldrh	r1, [r4, #16]
   29b86:	9102      	str	r1, [sp, #8]
   29b88:	9201      	str	r2, [sp, #4]
   29b8a:	2200      	movs	r2, #0
   29b8c:	9200      	str	r2, [sp, #0]
   29b8e:	2213      	movs	r2, #19
   29b90:	2112      	movs	r1, #18
   29b92:	4628      	mov	r0, r5
   29b94:	f7f4 fa26 	bl	1dfe4 <att_write_rsp>
}
   29b98:	b005      	add	sp, #20
   29b9a:	bd30      	pop	{r4, r5, pc}

00029b9c <att_read_group_req>:
{
   29b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   29b9e:	b089      	sub	sp, #36	; 0x24
   29ba0:	4605      	mov	r5, r0
   29ba2:	4608      	mov	r0, r1
	uint8_t uuid_len = buf->len - sizeof(*req);
   29ba4:	7c0c      	ldrb	r4, [r1, #16]
   29ba6:	3c04      	subs	r4, #4
   29ba8:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   29baa:	2c02      	cmp	r4, #2
   29bac:	d001      	beq.n	29bb2 <att_read_group_req+0x16>
   29bae:	2c10      	cmp	r4, #16
   29bb0:	d142      	bne.n	29c38 <att_read_group_req+0x9c>
	return net_buf_simple_pull_mem(&buf->b, len);
   29bb2:	2104      	movs	r1, #4
   29bb4:	300c      	adds	r0, #12
   29bb6:	f001 fa95 	bl	2b0e4 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   29bba:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   29bbc:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   29bbe:	4622      	mov	r2, r4
   29bc0:	1d01      	adds	r1, r0, #4
   29bc2:	a801      	add	r0, sp, #4
   29bc4:	f7fe fdfb 	bl	287be <bt_uuid_create>
   29bc8:	b3c8      	cbz	r0, 29c3e <att_read_group_req+0xa2>
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   29bca:	f10d 0216 	add.w	r2, sp, #22
   29bce:	4639      	mov	r1, r7
   29bd0:	4630      	mov	r0, r6
   29bd2:	f7ff fb45 	bl	29260 <range_is_valid>
   29bd6:	b1f0      	cbz	r0, 29c16 <att_read_group_req+0x7a>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   29bd8:	2300      	movs	r3, #0
   29bda:	f88d 3018 	strb.w	r3, [sp, #24]
   29bde:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   29be2:	f8ad 301a 	strh.w	r3, [sp, #26]
   29be6:	a906      	add	r1, sp, #24
   29be8:	a801      	add	r0, sp, #4
   29bea:	f7fe fdca 	bl	28782 <bt_uuid_cmp>
   29bee:	b158      	cbz	r0, 29c08 <att_read_group_req+0x6c>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   29bf0:	2300      	movs	r3, #0
   29bf2:	f88d 301c 	strb.w	r3, [sp, #28]
   29bf6:	f642 0301 	movw	r3, #10241	; 0x2801
   29bfa:	f8ad 301e 	strh.w	r3, [sp, #30]
   29bfe:	a907      	add	r1, sp, #28
   29c00:	a801      	add	r0, sp, #4
   29c02:	f7fe fdbe 	bl	28782 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   29c06:	b978      	cbnz	r0, 29c28 <att_read_group_req+0x8c>
	return att_read_group_rsp(chan, &u.uuid, start_handle, end_handle);
   29c08:	463b      	mov	r3, r7
   29c0a:	4632      	mov	r2, r6
   29c0c:	a901      	add	r1, sp, #4
   29c0e:	4628      	mov	r0, r5
   29c10:	f7f4 fabc 	bl	1e18c <att_read_group_rsp>
   29c14:	e011      	b.n	29c3a <att_read_group_req+0x9e>
		send_err_rsp(chan, BT_ATT_OP_READ_GROUP_REQ, err_handle,
   29c16:	2301      	movs	r3, #1
   29c18:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   29c1c:	2110      	movs	r1, #16
   29c1e:	4628      	mov	r0, r5
   29c20:	f7ff ff75 	bl	29b0e <send_err_rsp>
		return 0;
   29c24:	2000      	movs	r0, #0
   29c26:	e008      	b.n	29c3a <att_read_group_req+0x9e>
		send_err_rsp(chan, BT_ATT_OP_READ_GROUP_REQ, start_handle,
   29c28:	2310      	movs	r3, #16
   29c2a:	4632      	mov	r2, r6
   29c2c:	4619      	mov	r1, r3
   29c2e:	4628      	mov	r0, r5
   29c30:	f7ff ff6d 	bl	29b0e <send_err_rsp>
		return 0;
   29c34:	2000      	movs	r0, #0
   29c36:	e000      	b.n	29c3a <att_read_group_req+0x9e>
		return BT_ATT_ERR_INVALID_PDU;
   29c38:	2004      	movs	r0, #4
}
   29c3a:	b009      	add	sp, #36	; 0x24
   29c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_ATT_ERR_UNLIKELY;
   29c3e:	200e      	movs	r0, #14
   29c40:	e7fb      	b.n	29c3a <att_read_group_req+0x9e>

00029c42 <att_read_blob_req>:
{
   29c42:	b500      	push	{lr}
   29c44:	b083      	sub	sp, #12
	req = (void *)buf->data;
   29c46:	68ca      	ldr	r2, [r1, #12]
	handle = sys_le16_to_cpu(req->handle);
   29c48:	8813      	ldrh	r3, [r2, #0]
	offset = sys_le16_to_cpu(req->offset);
   29c4a:	8852      	ldrh	r2, [r2, #2]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   29c4c:	9200      	str	r2, [sp, #0]
   29c4e:	220d      	movs	r2, #13
   29c50:	210c      	movs	r1, #12
   29c52:	f7f4 fb8f 	bl	1e374 <att_read_rsp>
}
   29c56:	b003      	add	sp, #12
   29c58:	f85d fb04 	ldr.w	pc, [sp], #4

00029c5c <att_read_req>:
{
   29c5c:	b500      	push	{lr}
   29c5e:	b083      	sub	sp, #12
	req = (void *)buf->data;
   29c60:	68cb      	ldr	r3, [r1, #12]
	handle = sys_le16_to_cpu(req->handle);
   29c62:	881b      	ldrh	r3, [r3, #0]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   29c64:	2200      	movs	r2, #0
   29c66:	9200      	str	r2, [sp, #0]
   29c68:	220b      	movs	r2, #11
   29c6a:	210a      	movs	r1, #10
   29c6c:	f7f4 fb82 	bl	1e374 <att_read_rsp>
}
   29c70:	b003      	add	sp, #12
   29c72:	f85d fb04 	ldr.w	pc, [sp], #4

00029c76 <att_read_type_req>:
{
   29c76:	b5f0      	push	{r4, r5, r6, r7, lr}
   29c78:	b087      	sub	sp, #28
   29c7a:	4605      	mov	r5, r0
   29c7c:	4608      	mov	r0, r1
	uint8_t uuid_len = buf->len - sizeof(*req);
   29c7e:	7c0c      	ldrb	r4, [r1, #16]
   29c80:	3c04      	subs	r4, #4
   29c82:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   29c84:	2c02      	cmp	r4, #2
   29c86:	d001      	beq.n	29c8c <att_read_type_req+0x16>
   29c88:	2c10      	cmp	r4, #16
   29c8a:	d123      	bne.n	29cd4 <att_read_type_req+0x5e>
   29c8c:	2104      	movs	r1, #4
   29c8e:	300c      	adds	r0, #12
   29c90:	f001 fa28 	bl	2b0e4 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   29c94:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   29c96:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   29c98:	4622      	mov	r2, r4
   29c9a:	1d01      	adds	r1, r0, #4
   29c9c:	a801      	add	r0, sp, #4
   29c9e:	f7fe fd8e 	bl	287be <bt_uuid_create>
   29ca2:	b1c8      	cbz	r0, 29cd8 <att_read_type_req+0x62>
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   29ca4:	f10d 0216 	add.w	r2, sp, #22
   29ca8:	4639      	mov	r1, r7
   29caa:	4630      	mov	r0, r6
   29cac:	f7ff fad8 	bl	29260 <range_is_valid>
   29cb0:	b138      	cbz	r0, 29cc2 <att_read_type_req+0x4c>
	return att_read_type_rsp(chan, &u.uuid, start_handle, end_handle);
   29cb2:	463b      	mov	r3, r7
   29cb4:	4632      	mov	r2, r6
   29cb6:	a901      	add	r1, sp, #4
   29cb8:	4628      	mov	r0, r5
   29cba:	f7f4 fbb5 	bl	1e428 <att_read_type_rsp>
}
   29cbe:	b007      	add	sp, #28
   29cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		send_err_rsp(chan, BT_ATT_OP_READ_TYPE_REQ, err_handle,
   29cc2:	2301      	movs	r3, #1
   29cc4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   29cc8:	2108      	movs	r1, #8
   29cca:	4628      	mov	r0, r5
   29ccc:	f7ff ff1f 	bl	29b0e <send_err_rsp>
		return 0;
   29cd0:	2000      	movs	r0, #0
   29cd2:	e7f4      	b.n	29cbe <att_read_type_req+0x48>
		return BT_ATT_ERR_INVALID_PDU;
   29cd4:	2004      	movs	r0, #4
   29cd6:	e7f2      	b.n	29cbe <att_read_type_req+0x48>
		return BT_ATT_ERR_UNLIKELY;
   29cd8:	200e      	movs	r0, #14
   29cda:	e7f0      	b.n	29cbe <att_read_type_req+0x48>

00029cdc <att_find_type_req>:
{
   29cdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   29ce0:	b087      	sub	sp, #28
   29ce2:	4607      	mov	r7, r0
   29ce4:	460c      	mov	r4, r1
   29ce6:	2106      	movs	r1, #6
   29ce8:	f104 000c 	add.w	r0, r4, #12
   29cec:	f001 f9fa 	bl	2b0e4 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   29cf0:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   29cf2:	8846      	ldrh	r6, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   29cf4:	f8b0 8004 	ldrh.w	r8, [r0, #4]
	value = buf->data;
   29cf8:	f8d4 900c 	ldr.w	r9, [r4, #12]
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   29cfc:	f10d 020e 	add.w	r2, sp, #14
   29d00:	4631      	mov	r1, r6
   29d02:	4628      	mov	r0, r5
   29d04:	f7ff faac 	bl	29260 <range_is_valid>
   29d08:	b1d0      	cbz	r0, 29d40 <att_find_type_req+0x64>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   29d0a:	2300      	movs	r3, #0
   29d0c:	f88d 3010 	strb.w	r3, [sp, #16]
   29d10:	f8ad 8012 	strh.w	r8, [sp, #18]
   29d14:	f88d 3014 	strb.w	r3, [sp, #20]
   29d18:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   29d1c:	f8ad 3016 	strh.w	r3, [sp, #22]
   29d20:	a905      	add	r1, sp, #20
   29d22:	a804      	add	r0, sp, #16
   29d24:	f7fe fd2d 	bl	28782 <bt_uuid_cmp>
   29d28:	b998      	cbnz	r0, 29d52 <att_find_type_req+0x76>
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   29d2a:	7c23      	ldrb	r3, [r4, #16]
   29d2c:	9300      	str	r3, [sp, #0]
   29d2e:	464b      	mov	r3, r9
   29d30:	4632      	mov	r2, r6
   29d32:	4629      	mov	r1, r5
   29d34:	4638      	mov	r0, r7
   29d36:	f7f4 fbc1 	bl	1e4bc <att_find_type_rsp>
}
   29d3a:	b007      	add	sp, #28
   29d3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		send_err_rsp(chan, BT_ATT_OP_FIND_TYPE_REQ, err_handle,
   29d40:	2301      	movs	r3, #1
   29d42:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   29d46:	2106      	movs	r1, #6
   29d48:	4638      	mov	r0, r7
   29d4a:	f7ff fee0 	bl	29b0e <send_err_rsp>
		return 0;
   29d4e:	2000      	movs	r0, #0
   29d50:	e7f3      	b.n	29d3a <att_find_type_req+0x5e>
		send_err_rsp(chan, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
   29d52:	230a      	movs	r3, #10
   29d54:	462a      	mov	r2, r5
   29d56:	2106      	movs	r1, #6
   29d58:	4638      	mov	r0, r7
   29d5a:	f7ff fed8 	bl	29b0e <send_err_rsp>
		return 0;
   29d5e:	2000      	movs	r0, #0
   29d60:	e7eb      	b.n	29d3a <att_find_type_req+0x5e>

00029d62 <att_find_info_req>:
{
   29d62:	b570      	push	{r4, r5, r6, lr}
   29d64:	b082      	sub	sp, #8
   29d66:	4604      	mov	r4, r0
	req = (void *)buf->data;
   29d68:	68cb      	ldr	r3, [r1, #12]
	start_handle = sys_le16_to_cpu(req->start_handle);
   29d6a:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   29d6c:	885e      	ldrh	r6, [r3, #2]
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   29d6e:	f10d 0206 	add.w	r2, sp, #6
   29d72:	4631      	mov	r1, r6
   29d74:	4628      	mov	r0, r5
   29d76:	f7ff fa73 	bl	29260 <range_is_valid>
   29d7a:	b130      	cbz	r0, 29d8a <att_find_info_req+0x28>
	return att_find_info_rsp(chan, start_handle, end_handle);
   29d7c:	4632      	mov	r2, r6
   29d7e:	4629      	mov	r1, r5
   29d80:	4620      	mov	r0, r4
   29d82:	f7f4 fbe5 	bl	1e550 <att_find_info_rsp>
}
   29d86:	b002      	add	sp, #8
   29d88:	bd70      	pop	{r4, r5, r6, pc}
		send_err_rsp(chan, BT_ATT_OP_FIND_INFO_REQ, err_handle,
   29d8a:	2301      	movs	r3, #1
   29d8c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   29d90:	2104      	movs	r1, #4
   29d92:	4620      	mov	r0, r4
   29d94:	f7ff febb 	bl	29b0e <send_err_rsp>
		return 0;
   29d98:	2000      	movs	r0, #0
   29d9a:	e7f4      	b.n	29d86 <att_find_info_req+0x24>

00029d9c <att_mtu_req>:
{
   29d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29da0:	4604      	mov	r4, r0
   29da2:	460d      	mov	r5, r1
	struct bt_conn *conn = chan->att->conn;
   29da4:	f850 3b90 	ldr.w	r3, [r0], #144
   29da8:	681f      	ldr	r7, [r3, #0]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   29daa:	2103      	movs	r1, #3
   29dac:	f7ff faae 	bl	2930c <atomic_test_bit>
   29db0:	bb78      	cbnz	r0, 29e12 <att_mtu_req+0x76>
	req = (void *)buf->data;
   29db2:	68eb      	ldr	r3, [r5, #12]
	mtu_client = sys_le16_to_cpu(req->mtu);
   29db4:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   29db6:	2e16      	cmp	r6, #22
   29db8:	d92d      	bls.n	29e16 <att_mtu_req+0x7a>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   29dba:	2202      	movs	r2, #2
   29dbc:	2103      	movs	r1, #3
   29dbe:	4638      	mov	r0, r7
   29dc0:	f7f4 f980 	bl	1e0c4 <bt_att_create_pdu>
	if (!pdu) {
   29dc4:	4680      	mov	r8, r0
   29dc6:	b340      	cbz	r0, 29e1a <att_mtu_req+0x7e>
	return net_buf_simple_add(&buf->b, len);
   29dc8:	2102      	movs	r1, #2
   29dca:	300c      	adds	r0, #12
   29dcc:	f001 f960 	bl	2b090 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   29dd0:	2500      	movs	r5, #0
   29dd2:	f06f 0308 	mvn.w	r3, #8
   29dd6:	7003      	strb	r3, [r0, #0]
   29dd8:	7045      	strb	r5, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu);
   29dda:	4641      	mov	r1, r8
   29ddc:	4620      	mov	r0, r4
   29dde:	f7ff fc43 	bl	29668 <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   29de2:	2ef7      	cmp	r6, #247	; 0xf7
   29de4:	bf28      	it	cs
   29de6:	26f7      	movcs	r6, #247	; 0xf7
   29de8:	8366      	strh	r6, [r4, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   29dea:	8566      	strh	r6, [r4, #42]	; 0x2a
	atomic_set_bit(conn->flags, BT_CONN_ATT_MTU_EXCHANGED);
   29dec:	3704      	adds	r7, #4
   29dee:	f3bf 8f5b 	dmb	ish
   29df2:	e857 3f00 	ldrex	r3, [r7]
   29df6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   29dfa:	e847 3200 	strex	r2, r3, [r7]
   29dfe:	2a00      	cmp	r2, #0
   29e00:	d1f7      	bne.n	29df2 <att_mtu_req+0x56>
   29e02:	f3bf 8f5b 	dmb	ish
	att_chan_mtu_updated(chan);
   29e06:	4620      	mov	r0, r4
   29e08:	f7ff fc3b 	bl	29682 <att_chan_mtu_updated>
	return 0;
   29e0c:	4628      	mov	r0, r5
}
   29e0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   29e12:	2006      	movs	r0, #6
   29e14:	e7fb      	b.n	29e0e <att_mtu_req+0x72>
		return BT_ATT_ERR_INVALID_PDU;
   29e16:	2004      	movs	r0, #4
   29e18:	e7f9      	b.n	29e0e <att_mtu_req+0x72>
		return BT_ATT_ERR_UNLIKELY;
   29e1a:	200e      	movs	r0, #14
   29e1c:	e7f7      	b.n	29e0e <att_mtu_req+0x72>

00029e1e <att_handle_exec_write_rsp>:
{
   29e1e:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   29e20:	2300      	movs	r3, #0
   29e22:	8a0a      	ldrh	r2, [r1, #16]
   29e24:	68c9      	ldr	r1, [r1, #12]
   29e26:	f7f4 fc23 	bl	1e670 <att_handle_rsp>
}
   29e2a:	bd08      	pop	{r3, pc}

00029e2c <att_handle_prepare_write_rsp>:
{
   29e2c:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   29e2e:	2300      	movs	r3, #0
   29e30:	8a0a      	ldrh	r2, [r1, #16]
   29e32:	68c9      	ldr	r1, [r1, #12]
   29e34:	f7f4 fc1c 	bl	1e670 <att_handle_rsp>
}
   29e38:	bd08      	pop	{r3, pc}

00029e3a <att_handle_write_rsp>:
{
   29e3a:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   29e3c:	2300      	movs	r3, #0
   29e3e:	8a0a      	ldrh	r2, [r1, #16]
   29e40:	68c9      	ldr	r1, [r1, #12]
   29e42:	f7f4 fc15 	bl	1e670 <att_handle_rsp>
}
   29e46:	bd08      	pop	{r3, pc}

00029e48 <att_handle_read_group_rsp>:
{
   29e48:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   29e4a:	2300      	movs	r3, #0
   29e4c:	8a0a      	ldrh	r2, [r1, #16]
   29e4e:	68c9      	ldr	r1, [r1, #12]
   29e50:	f7f4 fc0e 	bl	1e670 <att_handle_rsp>
}
   29e54:	bd08      	pop	{r3, pc}

00029e56 <att_handle_read_mult_vl_rsp>:
{
   29e56:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   29e58:	2300      	movs	r3, #0
   29e5a:	8a0a      	ldrh	r2, [r1, #16]
   29e5c:	68c9      	ldr	r1, [r1, #12]
   29e5e:	f7f4 fc07 	bl	1e670 <att_handle_rsp>
}
   29e62:	bd08      	pop	{r3, pc}

00029e64 <att_handle_read_mult_rsp>:
{
   29e64:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   29e66:	2300      	movs	r3, #0
   29e68:	8a0a      	ldrh	r2, [r1, #16]
   29e6a:	68c9      	ldr	r1, [r1, #12]
   29e6c:	f7f4 fc00 	bl	1e670 <att_handle_rsp>
}
   29e70:	bd08      	pop	{r3, pc}

00029e72 <att_handle_read_blob_rsp>:
{
   29e72:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   29e74:	2300      	movs	r3, #0
   29e76:	8a0a      	ldrh	r2, [r1, #16]
   29e78:	68c9      	ldr	r1, [r1, #12]
   29e7a:	f7f4 fbf9 	bl	1e670 <att_handle_rsp>
}
   29e7e:	bd08      	pop	{r3, pc}

00029e80 <att_handle_read_rsp>:
{
   29e80:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   29e82:	2300      	movs	r3, #0
   29e84:	8a0a      	ldrh	r2, [r1, #16]
   29e86:	68c9      	ldr	r1, [r1, #12]
   29e88:	f7f4 fbf2 	bl	1e670 <att_handle_rsp>
}
   29e8c:	bd08      	pop	{r3, pc}

00029e8e <att_handle_read_type_rsp>:
{
   29e8e:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   29e90:	2300      	movs	r3, #0
   29e92:	8a0a      	ldrh	r2, [r1, #16]
   29e94:	68c9      	ldr	r1, [r1, #12]
   29e96:	f7f4 fbeb 	bl	1e670 <att_handle_rsp>
}
   29e9a:	bd08      	pop	{r3, pc}

00029e9c <att_handle_find_type_rsp>:
{
   29e9c:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   29e9e:	2300      	movs	r3, #0
   29ea0:	8a0a      	ldrh	r2, [r1, #16]
   29ea2:	68c9      	ldr	r1, [r1, #12]
   29ea4:	f7f4 fbe4 	bl	1e670 <att_handle_rsp>
}
   29ea8:	bd08      	pop	{r3, pc}

00029eaa <att_handle_find_info_rsp>:
{
   29eaa:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   29eac:	2300      	movs	r3, #0
   29eae:	8a0a      	ldrh	r2, [r1, #16]
   29eb0:	68c9      	ldr	r1, [r1, #12]
   29eb2:	f7f4 fbdd 	bl	1e670 <att_handle_rsp>
}
   29eb6:	bd08      	pop	{r3, pc}

00029eb8 <att_mtu_rsp>:
{
   29eb8:	b570      	push	{r4, r5, r6, lr}
   29eba:	4604      	mov	r4, r0
	rsp = (void *)buf->data;
   29ebc:	68ce      	ldr	r6, [r1, #12]
	mtu = sys_le16_to_cpu(rsp->mtu);
   29ebe:	8833      	ldrh	r3, [r6, #0]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   29ec0:	2b16      	cmp	r3, #22
   29ec2:	d90e      	bls.n	29ee2 <att_mtu_rsp+0x2a>
   29ec4:	460d      	mov	r5, r1
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   29ec6:	2bf7      	cmp	r3, #247	; 0xf7
   29ec8:	bf28      	it	cs
   29eca:	23f7      	movcs	r3, #247	; 0xf7
   29ecc:	8343      	strh	r3, [r0, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   29ece:	8543      	strh	r3, [r0, #42]	; 0x2a
	att_chan_mtu_updated(chan);
   29ed0:	f7ff fbd7 	bl	29682 <att_chan_mtu_updated>
	return att_handle_rsp(chan, rsp, buf->len, 0);
   29ed4:	2300      	movs	r3, #0
   29ed6:	8a2a      	ldrh	r2, [r5, #16]
   29ed8:	4631      	mov	r1, r6
   29eda:	4620      	mov	r0, r4
   29edc:	f7f4 fbc8 	bl	1e670 <att_handle_rsp>
}
   29ee0:	bd70      	pop	{r4, r5, r6, pc}
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   29ee2:	2304      	movs	r3, #4
   29ee4:	2200      	movs	r2, #0
   29ee6:	4611      	mov	r1, r2
   29ee8:	f7f4 fbc2 	bl	1e670 <att_handle_rsp>
   29eec:	e7f8      	b.n	29ee0 <att_mtu_rsp+0x28>

00029eee <att_confirm>:
{
   29eee:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   29ef0:	2300      	movs	r3, #0
   29ef2:	8a0a      	ldrh	r2, [r1, #16]
   29ef4:	68c9      	ldr	r1, [r1, #12]
   29ef6:	f7f4 fbbb 	bl	1e670 <att_handle_rsp>
}
   29efa:	bd08      	pop	{r3, pc}

00029efc <att_chan_detach>:
{
   29efc:	b538      	push	{r3, r4, r5, lr}
   29efe:	4605      	mov	r5, r0
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   29f00:	4601      	mov	r1, r0
   29f02:	f851 0be0 	ldr.w	r0, [r1], #224
   29f06:	3024      	adds	r0, #36	; 0x24
   29f08:	f7ff f98f 	bl	2922a <sys_slist_find_and_remove>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   29f0c:	e005      	b.n	29f1a <att_chan_detach+0x1e>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   29f0e:	69a0      	ldr	r0, [r4, #24]
   29f10:	f7f3 fbc8 	bl	1d6a4 <tx_meta_data_free>
		net_buf_unref(buf);
   29f14:	4620      	mov	r0, r4
   29f16:	f001 f874 	bl	2b002 <net_buf_unref>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   29f1a:	2200      	movs	r2, #0
   29f1c:	2300      	movs	r3, #0
   29f1e:	f105 0098 	add.w	r0, r5, #152	; 0x98
   29f22:	f001 f82e 	bl	2af82 <net_buf_get>
   29f26:	4604      	mov	r4, r0
   29f28:	2800      	cmp	r0, #0
   29f2a:	d1f0      	bne.n	29f0e <att_chan_detach+0x12>
	if (chan->req) {
   29f2c:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
   29f30:	b12b      	cbz	r3, 29f3e <att_chan_detach+0x42>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   29f32:	230e      	movs	r3, #14
   29f34:	2200      	movs	r2, #0
   29f36:	4611      	mov	r1, r2
   29f38:	4628      	mov	r0, r5
   29f3a:	f7f4 fb99 	bl	1e670 <att_handle_rsp>
	chan->att = NULL;
   29f3e:	2300      	movs	r3, #0
   29f40:	602b      	str	r3, [r5, #0]
}
   29f42:	bd38      	pop	{r3, r4, r5, pc}

00029f44 <bt_att_disconnected>:
{
   29f44:	b538      	push	{r3, r4, r5, lr}
   29f46:	4604      	mov	r4, r0
	struct bt_att *att = att_chan->att;
   29f48:	f850 5c04 	ldr.w	r5, [r0, #-4]
	if (!att_chan->att) {
   29f4c:	b125      	cbz	r5, 29f58 <bt_att_disconnected+0x14>
   29f4e:	3804      	subs	r0, #4
	att_chan_detach(att_chan);
   29f50:	f7ff ffd4 	bl	29efc <att_chan_detach>
	return list->head;
   29f54:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (!sys_slist_is_empty(&att->chans)) {
   29f56:	b103      	cbz	r3, 29f5a <bt_att_disconnected+0x16>
}
   29f58:	bd38      	pop	{r3, r4, r5, pc}
	att_reset(att);
   29f5a:	4628      	mov	r0, r5
   29f5c:	f7f4 fc08 	bl	1e770 <att_reset>
	bt_gatt_disconnected(le_chan->chan.conn);
   29f60:	6820      	ldr	r0, [r4, #0]
   29f62:	f7f5 fff7 	bl	1ff54 <bt_gatt_disconnected>
   29f66:	e7f7      	b.n	29f58 <bt_att_disconnected+0x14>

00029f68 <bt_att_send>:
{
   29f68:	b538      	push	{r3, r4, r5, lr}
   29f6a:	460c      	mov	r4, r1
	att = att_get(conn);
   29f6c:	f7f3 fa2e 	bl	1d3cc <att_get>
	if (!att) {
   29f70:	b148      	cbz	r0, 29f86 <bt_att_send+0x1e>
   29f72:	4605      	mov	r5, r0
	net_buf_put(&att->tx_queue, buf);
   29f74:	4621      	mov	r1, r4
   29f76:	300c      	adds	r0, #12
   29f78:	f001 f83f 	bl	2affa <net_buf_put>
	att_send_process(att);
   29f7c:	4628      	mov	r0, r5
   29f7e:	f7ff fb20 	bl	295c2 <att_send_process>
	return 0;
   29f82:	2000      	movs	r0, #0
}
   29f84:	bd38      	pop	{r3, r4, r5, pc}
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   29f86:	69a0      	ldr	r0, [r4, #24]
   29f88:	f7f3 fb8c 	bl	1d6a4 <tx_meta_data_free>
		net_buf_unref(buf);
   29f8c:	4620      	mov	r0, r4
   29f8e:	f001 f838 	bl	2b002 <net_buf_unref>
		return -ENOTCONN;
   29f92:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   29f96:	e7f5      	b.n	29f84 <bt_att_send+0x1c>

00029f98 <bt_att_req_send>:
{
   29f98:	b510      	push	{r4, lr}
   29f9a:	460c      	mov	r4, r1
	att = att_get(conn);
   29f9c:	f7f3 fa16 	bl	1d3cc <att_get>
	if (!att) {
   29fa0:	b170      	cbz	r0, 29fc0 <bt_att_req_send+0x28>
   29fa2:	4603      	mov	r3, r0
	parent->next = child;
   29fa4:	2200      	movs	r2, #0
   29fa6:	6022      	str	r2, [r4, #0]
	return list->tail;
   29fa8:	6882      	ldr	r2, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   29faa:	b132      	cbz	r2, 29fba <bt_att_req_send+0x22>
	parent->next = child;
   29fac:	6014      	str	r4, [r2, #0]
	list->tail = node;
   29fae:	6084      	str	r4, [r0, #8]
	att_req_send_process(att);
   29fb0:	4618      	mov	r0, r3
   29fb2:	f7ff fa26 	bl	29402 <att_req_send_process>
	return 0;
   29fb6:	2000      	movs	r0, #0
}
   29fb8:	bd10      	pop	{r4, pc}
   29fba:	6084      	str	r4, [r0, #8]
	list->head = node;
   29fbc:	6044      	str	r4, [r0, #4]
}
   29fbe:	e7f7      	b.n	29fb0 <bt_att_req_send+0x18>
		return -ENOTCONN;
   29fc0:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   29fc4:	e7f8      	b.n	29fb8 <bt_att_req_send+0x20>

00029fc6 <bt_att_req_cancel>:
	struct bt_att *att;
	struct bt_att_chan *chan, *tmp;

	LOG_DBG("req %p", req);

	if (!conn || !req) {
   29fc6:	b358      	cbz	r0, 2a020 <bt_att_req_cancel+0x5a>
{
   29fc8:	b570      	push	{r4, r5, r6, lr}
   29fca:	460d      	mov	r5, r1
	if (!conn || !req) {
   29fcc:	b339      	cbz	r1, 2a01e <bt_att_req_cancel+0x58>
		return;
	}

	att = att_get(conn);
   29fce:	f7f3 f9fd 	bl	1d3cc <att_get>
	if (!att) {
   29fd2:	4606      	mov	r6, r0
   29fd4:	b318      	cbz	r0, 2a01e <bt_att_req_cancel+0x58>
	return list->head;
   29fd6:	6a40      	ldr	r0, [r0, #36]	; 0x24
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   29fd8:	b140      	cbz	r0, 29fec <bt_att_req_cancel+0x26>
   29fda:	38e0      	subs	r0, #224	; 0xe0
Z_GENLIST_PEEK_NEXT(slist, snode)
   29fdc:	f110 04e0 	adds.w	r4, r0, #224	; 0xe0
   29fe0:	d009      	beq.n	29ff6 <bt_att_req_cancel+0x30>
	return node->next;
   29fe2:	f8d0 40e0 	ldr.w	r4, [r0, #224]	; 0xe0
   29fe6:	b134      	cbz	r4, 29ff6 <bt_att_req_cancel+0x30>
   29fe8:	3ce0      	subs	r4, #224	; 0xe0
   29fea:	e004      	b.n	29ff6 <bt_att_req_cancel+0x30>
   29fec:	4604      	mov	r4, r0
   29fee:	e002      	b.n	29ff6 <bt_att_req_cancel+0x30>
   29ff0:	4623      	mov	r3, r4
   29ff2:	4620      	mov	r0, r4
   29ff4:	461c      	mov	r4, r3
   29ff6:	b158      	cbz	r0, 2a010 <bt_att_req_cancel+0x4a>
		/* Check if request is outstanding */
		if (bt_att_chan_req_cancel(chan, req)) {
   29ff8:	4629      	mov	r1, r5
   29ffa:	f7f4 fc2d 	bl	1e858 <bt_att_chan_req_cancel>
   29ffe:	b970      	cbnz	r0, 2a01e <bt_att_req_cancel+0x58>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2a000:	2c00      	cmp	r4, #0
   2a002:	d0f5      	beq.n	29ff0 <bt_att_req_cancel+0x2a>
   2a004:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
   2a008:	2b00      	cmp	r3, #0
   2a00a:	d0f2      	beq.n	29ff2 <bt_att_req_cancel+0x2c>
   2a00c:	3be0      	subs	r3, #224	; 0xe0
   2a00e:	e7f0      	b.n	29ff2 <bt_att_req_cancel+0x2c>
			return;
		}
	}

	/* Remove request from the list */
	sys_slist_find_and_remove(&att->reqs, &req->node);
   2a010:	4629      	mov	r1, r5
   2a012:	1d30      	adds	r0, r6, #4
   2a014:	f7ff f909 	bl	2922a <sys_slist_find_and_remove>

	bt_att_req_free(req);
   2a018:	4628      	mov	r0, r5
   2a01a:	f7f4 fb11 	bl	1e640 <bt_att_req_free>
}
   2a01e:	bd70      	pop	{r4, r5, r6, pc}
   2a020:	4770      	bx	lr

0002a022 <bt_att_find_req_by_user_data>:

struct bt_att_req *bt_att_find_req_by_user_data(struct bt_conn *conn, const void *user_data)
{
   2a022:	b510      	push	{r4, lr}
   2a024:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan;
	struct bt_att_req *req;

	att = att_get(conn);
   2a026:	f7f3 f9d1 	bl	1d3cc <att_get>
	if (!att) {
   2a02a:	4601      	mov	r1, r0
   2a02c:	b308      	cbz	r0, 2a072 <bt_att_find_req_by_user_data+0x50>
	return list->head;
   2a02e:	6a43      	ldr	r3, [r0, #36]	; 0x24
		return NULL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   2a030:	b113      	cbz	r3, 2a038 <bt_att_find_req_by_user_data+0x16>
   2a032:	3be0      	subs	r3, #224	; 0xe0
   2a034:	e000      	b.n	2a038 <bt_att_find_req_by_user_data+0x16>
   2a036:	3be0      	subs	r3, #224	; 0xe0
   2a038:	b173      	cbz	r3, 2a058 <bt_att_find_req_by_user_data+0x36>
		if (chan->req->user_data == user_data) {
   2a03a:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
   2a03e:	68c2      	ldr	r2, [r0, #12]
   2a040:	42a2      	cmp	r2, r4
   2a042:	d016      	beq.n	2a072 <bt_att_find_req_by_user_data+0x50>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2a044:	f113 02e0 	adds.w	r2, r3, #224	; 0xe0
   2a048:	d004      	beq.n	2a054 <bt_att_find_req_by_user_data+0x32>
	return node->next;
   2a04a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   2a04e:	2b00      	cmp	r3, #0
   2a050:	d1f1      	bne.n	2a036 <bt_att_find_req_by_user_data+0x14>
   2a052:	e7f1      	b.n	2a038 <bt_att_find_req_by_user_data+0x16>
   2a054:	4613      	mov	r3, r2
   2a056:	e7ef      	b.n	2a038 <bt_att_find_req_by_user_data+0x16>
	return list->head;
   2a058:	6848      	ldr	r0, [r1, #4]
			return chan->req;
		}
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->reqs, req, node) {
   2a05a:	b150      	cbz	r0, 2a072 <bt_att_find_req_by_user_data+0x50>
		if (req->user_data == user_data) {
   2a05c:	68c3      	ldr	r3, [r0, #12]
   2a05e:	42a3      	cmp	r3, r4
   2a060:	d007      	beq.n	2a072 <bt_att_find_req_by_user_data+0x50>
	SYS_SLIST_FOR_EACH_CONTAINER(&att->reqs, req, node) {
   2a062:	4603      	mov	r3, r0
	return node->next;
   2a064:	6800      	ldr	r0, [r0, #0]
   2a066:	2800      	cmp	r0, #0
   2a068:	d0f7      	beq.n	2a05a <bt_att_find_req_by_user_data+0x38>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2a06a:	2b00      	cmp	r3, #0
   2a06c:	d1f5      	bne.n	2a05a <bt_att_find_req_by_user_data+0x38>
   2a06e:	4618      	mov	r0, r3
   2a070:	e7f3      	b.n	2a05a <bt_att_find_req_by_user_data+0x38>
			return req;
		}
	}

	return NULL;
}
   2a072:	bd10      	pop	{r4, pc}

0002a074 <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   2a074:	2001      	movs	r0, #1
   2a076:	4770      	bx	lr

0002a078 <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   2a078:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
   2a07a:	f7f3 f9a7 	bl	1d3cc <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   2a07e:	b1b8      	cbz	r0, 2a0b0 <bt_att_clear_out_of_sync_sent+0x38>
	return list->head;
   2a080:	6a43      	ldr	r3, [r0, #36]	; 0x24
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   2a082:	b103      	cbz	r3, 2a086 <bt_att_clear_out_of_sync_sent+0xe>
   2a084:	3be0      	subs	r3, #224	; 0xe0
   2a086:	b19b      	cbz	r3, 2a0b0 <bt_att_clear_out_of_sync_sent+0x38>
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
   2a088:	f103 0290 	add.w	r2, r3, #144	; 0x90
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2a08c:	f3bf 8f5b 	dmb	ish
   2a090:	e852 0f00 	ldrex	r0, [r2]
   2a094:	f020 0020 	bic.w	r0, r0, #32
   2a098:	e842 0100 	strex	r1, r0, [r2]
   2a09c:	2900      	cmp	r1, #0
   2a09e:	d1f7      	bne.n	2a090 <bt_att_clear_out_of_sync_sent+0x18>
   2a0a0:	f3bf 8f5b 	dmb	ish
	return node->next;
   2a0a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   2a0a8:	2b00      	cmp	r3, #0
   2a0aa:	d0ec      	beq.n	2a086 <bt_att_clear_out_of_sync_sent+0xe>
   2a0ac:	3be0      	subs	r3, #224	; 0xe0
   2a0ae:	e7ea      	b.n	2a086 <bt_att_clear_out_of_sync_sent+0xe>
	}
}
   2a0b0:	bd08      	pop	{r3, pc}

0002a0b2 <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   2a0b2:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   2a0b4:	2104      	movs	r1, #4
   2a0b6:	f7ff f865 	bl	29184 <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   2a0ba:	b120      	cbz	r0, 2a0c6 <bt_att_out_of_sync_sent_on_fixed+0x14>
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
   2a0bc:	2105      	movs	r1, #5
   2a0be:	308c      	adds	r0, #140	; 0x8c
   2a0c0:	f7ff f924 	bl	2930c <atomic_test_bit>
}
   2a0c4:	bd08      	pop	{r3, pc}
		return false;
   2a0c6:	2000      	movs	r0, #0
   2a0c8:	e7fc      	b.n	2a0c4 <bt_att_out_of_sync_sent_on_fixed+0x12>

0002a0ca <bt_att_set_tx_meta_data>:

void bt_att_set_tx_meta_data(struct net_buf *buf, bt_gatt_complete_func_t func, void *user_data,
			     enum bt_att_chan_opt chan_opt)
{
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   2a0ca:	6980      	ldr	r0, [r0, #24]

	data->func = func;
   2a0cc:	6081      	str	r1, [r0, #8]
	data->user_data = user_data;
   2a0ce:	60c2      	str	r2, [r0, #12]
	data->attr_count = 1;
   2a0d0:	2201      	movs	r2, #1
   2a0d2:	8082      	strh	r2, [r0, #4]
	data->chan_opt = chan_opt;
   2a0d4:	7403      	strb	r3, [r0, #16]
}
   2a0d6:	4770      	bx	lr

0002a0d8 <sys_slist_remove>:
Z_GENLIST_REMOVE(slist, snode)
   2a0d8:	460b      	mov	r3, r1
   2a0da:	b139      	cbz	r1, 2a0ec <sys_slist_remove+0x14>
	return node->next;
   2a0dc:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
   2a0de:	6019      	str	r1, [r3, #0]
	return list->tail;
   2a0e0:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   2a0e2:	428a      	cmp	r2, r1
   2a0e4:	d009      	beq.n	2a0fa <sys_slist_remove+0x22>
	parent->next = child;
   2a0e6:	2300      	movs	r3, #0
   2a0e8:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2a0ea:	4770      	bx	lr
	return node->next;
   2a0ec:	6813      	ldr	r3, [r2, #0]
	list->head = node;
   2a0ee:	6003      	str	r3, [r0, #0]
	return list->tail;
   2a0f0:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   2a0f2:	428a      	cmp	r2, r1
   2a0f4:	d1f7      	bne.n	2a0e6 <sys_slist_remove+0xe>
	list->tail = node;
   2a0f6:	6043      	str	r3, [r0, #4]
}
   2a0f8:	e7f5      	b.n	2a0e6 <sys_slist_remove+0xe>
	list->tail = node;
   2a0fa:	6043      	str	r3, [r0, #4]
}
   2a0fc:	e7f3      	b.n	2a0e6 <sys_slist_remove+0xe>

0002a0fe <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2a0fe:	b508      	push	{r3, lr}
   2a100:	460a      	mov	r2, r1
	return list->head;
   2a102:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2a104:	2100      	movs	r1, #0
   2a106:	e001      	b.n	2a10c <sys_slist_find_and_remove+0xe>
   2a108:	4619      	mov	r1, r3
   2a10a:	681b      	ldr	r3, [r3, #0]
   2a10c:	b12b      	cbz	r3, 2a11a <sys_slist_find_and_remove+0x1c>
   2a10e:	4293      	cmp	r3, r2
   2a110:	d1fa      	bne.n	2a108 <sys_slist_find_and_remove+0xa>
   2a112:	f7ff ffe1 	bl	2a0d8 <sys_slist_remove>
   2a116:	2001      	movs	r0, #1
   2a118:	e000      	b.n	2a11c <sys_slist_find_and_remove+0x1e>
   2a11a:	2000      	movs	r0, #0
   2a11c:	bd08      	pop	{r3, pc}

0002a11e <sys_mem_swap>:
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
   2a11e:	2300      	movs	r3, #0
   2a120:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   2a124:	d210      	bcs.n	2a148 <sys_mem_swap+0x2a>
{
   2a126:	b500      	push	{lr}
		uint8_t tmp = ((uint8_t *)buf)[i];
   2a128:	f810 c003 	ldrb.w	ip, [r0, r3]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   2a12c:	1aca      	subs	r2, r1, r3
   2a12e:	3a01      	subs	r2, #1
   2a130:	f810 e002 	ldrb.w	lr, [r0, r2]
   2a134:	f800 e003 	strb.w	lr, [r0, r3]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   2a138:	f800 c002 	strb.w	ip, [r0, r2]
	for (i = 0; i < (length/2); i++) {
   2a13c:	3301      	adds	r3, #1
   2a13e:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   2a142:	d3f1      	bcc.n	2a128 <sys_mem_swap+0xa>
	}
}
   2a144:	f85d fb04 	ldr.w	pc, [sp], #4
   2a148:	4770      	bx	lr

0002a14a <update_range>:
	if (new_start >= *start && new_end <= *end) {
   2a14a:	f8b0 c000 	ldrh.w	ip, [r0]
   2a14e:	4562      	cmp	r2, ip
   2a150:	d312      	bcc.n	2a178 <update_range+0x2e>
{
   2a152:	b500      	push	{lr}
	if (new_start >= *start && new_end <= *end) {
   2a154:	f8b1 e000 	ldrh.w	lr, [r1]
   2a158:	4573      	cmp	r3, lr
   2a15a:	d908      	bls.n	2a16e <update_range+0x24>
	if (*start > new_start) {
   2a15c:	4562      	cmp	r2, ip
   2a15e:	d200      	bcs.n	2a162 <update_range+0x18>
		*start = new_start;
   2a160:	8002      	strh	r2, [r0, #0]
	if (*end < new_end) {
   2a162:	880a      	ldrh	r2, [r1, #0]
   2a164:	4293      	cmp	r3, r2
   2a166:	d904      	bls.n	2a172 <update_range+0x28>
		*end = new_end;
   2a168:	800b      	strh	r3, [r1, #0]
	return true;
   2a16a:	2001      	movs	r0, #1
   2a16c:	e002      	b.n	2a174 <update_range+0x2a>
		return false;
   2a16e:	2000      	movs	r0, #0
   2a170:	e000      	b.n	2a174 <update_range+0x2a>
	return true;
   2a172:	2001      	movs	r0, #1
}
   2a174:	f85d fb04 	ldr.w	pc, [sp], #4
	if (*start > new_start) {
   2a178:	4562      	cmp	r2, ip
   2a17a:	d200      	bcs.n	2a17e <update_range+0x34>
		*start = new_start;
   2a17c:	8002      	strh	r2, [r0, #0]
	if (*end < new_end) {
   2a17e:	880a      	ldrh	r2, [r1, #0]
   2a180:	4293      	cmp	r3, r2
   2a182:	d902      	bls.n	2a18a <update_range+0x40>
		*end = new_end;
   2a184:	800b      	strh	r3, [r1, #0]
	return true;
   2a186:	2001      	movs	r0, #1
   2a188:	4770      	bx	lr
   2a18a:	2001      	movs	r0, #1
}
   2a18c:	4770      	bx	lr

0002a18e <cf_set_value>:
{
   2a18e:	b510      	push	{r4, lr}
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   2a190:	2300      	movs	r3, #0
   2a192:	e001      	b.n	2a198 <cf_set_value+0xa>
   2a194:	3301      	adds	r3, #1
   2a196:	b29b      	uxth	r3, r3
   2a198:	2b02      	cmp	r3, #2
   2a19a:	d819      	bhi.n	2a1d0 <cf_set_value+0x42>
   2a19c:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
   2a1a0:	ebb2 0fd3 	cmp.w	r2, r3, lsr #3
   2a1a4:	d912      	bls.n	2a1cc <cf_set_value+0x3e>
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   2a1a6:	eb00 040c 	add.w	r4, r0, ip
   2a1aa:	7a24      	ldrb	r4, [r4, #8]
   2a1ac:	f003 0e07 	and.w	lr, r3, #7
   2a1b0:	fa24 f40e 	lsr.w	r4, r4, lr
   2a1b4:	f014 0f01 	tst.w	r4, #1
   2a1b8:	d0ec      	beq.n	2a194 <cf_set_value+0x6>
		    !(value[i / 8] & BIT(i % 8))) {
   2a1ba:	f811 400c 	ldrb.w	r4, [r1, ip]
   2a1be:	fa24 f40e 	lsr.w	r4, r4, lr
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   2a1c2:	f014 0f01 	tst.w	r4, #1
   2a1c6:	d1e5      	bne.n	2a194 <cf_set_value+0x6>
			return false;
   2a1c8:	2000      	movs	r0, #0
   2a1ca:	e016      	b.n	2a1fa <cf_set_value+0x6c>
   2a1cc:	2300      	movs	r3, #0
   2a1ce:	e000      	b.n	2a1d2 <cf_set_value+0x44>
   2a1d0:	2300      	movs	r3, #0
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   2a1d2:	4293      	cmp	r3, r2
   2a1d4:	d210      	bcs.n	2a1f8 <cf_set_value+0x6a>
   2a1d6:	b96b      	cbnz	r3, 2a1f4 <cf_set_value+0x66>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   2a1d8:	18c4      	adds	r4, r0, r3
   2a1da:	f894 c008 	ldrb.w	ip, [r4, #8]
   2a1de:	f811 e003 	ldrb.w	lr, [r1, r3]
   2a1e2:	f00e 0e07 	and.w	lr, lr, #7
   2a1e6:	ea4c 0c0e 	orr.w	ip, ip, lr
   2a1ea:	f884 c008 	strb.w	ip, [r4, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   2a1ee:	3301      	adds	r3, #1
   2a1f0:	b29b      	uxth	r3, r3
   2a1f2:	e7ee      	b.n	2a1d2 <cf_set_value+0x44>
	return true;
   2a1f4:	2001      	movs	r0, #1
   2a1f6:	e000      	b.n	2a1fa <cf_set_value+0x6c>
   2a1f8:	2001      	movs	r0, #1
}
   2a1fa:	bd10      	pop	{r4, pc}

0002a1fc <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   2a1fc:	6010      	str	r0, [r2, #0]
}
   2a1fe:	2000      	movs	r0, #0
   2a200:	4770      	bx	lr

0002a202 <gatt_ccc_changed>:
{
   2a202:	b508      	push	{r3, lr}
   2a204:	468c      	mov	ip, r1
	uint16_t value = 0x0000;
   2a206:	2100      	movs	r1, #0
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   2a208:	460b      	mov	r3, r1
   2a20a:	e000      	b.n	2a20e <gatt_ccc_changed+0xc>
   2a20c:	3301      	adds	r3, #1
   2a20e:	2b07      	cmp	r3, #7
   2a210:	d808      	bhi.n	2a224 <gatt_ccc_changed+0x22>
		if (ccc->cfg[i].value > value) {
   2a212:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   2a216:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
   2a21a:	8912      	ldrh	r2, [r2, #8]
   2a21c:	428a      	cmp	r2, r1
   2a21e:	d9f5      	bls.n	2a20c <gatt_ccc_changed+0xa>
			value = ccc->cfg[i].value;
   2a220:	4611      	mov	r1, r2
   2a222:	e7f3      	b.n	2a20c <gatt_ccc_changed+0xa>
	if (value != ccc->value) {
   2a224:	f8bc 3050 	ldrh.w	r3, [ip, #80]	; 0x50
   2a228:	4299      	cmp	r1, r3
   2a22a:	d005      	beq.n	2a238 <gatt_ccc_changed+0x36>
		ccc->value = value;
   2a22c:	f8ac 1050 	strh.w	r1, [ip, #80]	; 0x50
		if (ccc->cfg_changed) {
   2a230:	f8dc 3054 	ldr.w	r3, [ip, #84]	; 0x54
   2a234:	b103      	cbz	r3, 2a238 <gatt_ccc_changed+0x36>
			ccc->cfg_changed(attr, value);
   2a236:	4798      	blx	r3
}
   2a238:	bd08      	pop	{r3, pc}

0002a23a <gatt_indicate_rsp>:
{
   2a23a:	b510      	push	{r4, lr}
   2a23c:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   2a23e:	68a3      	ldr	r3, [r4, #8]
   2a240:	b113      	cbz	r3, 2a248 <gatt_indicate_rsp+0xe>
   2a242:	460a      	mov	r2, r1
		params->func(conn, params, err);
   2a244:	4621      	mov	r1, r4
   2a246:	4798      	blx	r3
	params->_ref--;
   2a248:	7da3      	ldrb	r3, [r4, #22]
   2a24a:	3b01      	subs	r3, #1
   2a24c:	b2db      	uxtb	r3, r3
   2a24e:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   2a250:	68e2      	ldr	r2, [r4, #12]
   2a252:	b112      	cbz	r2, 2a25a <gatt_indicate_rsp+0x20>
   2a254:	b90b      	cbnz	r3, 2a25a <gatt_indicate_rsp+0x20>
		params->destroy(params);
   2a256:	4620      	mov	r0, r4
   2a258:	4790      	blx	r2
}
   2a25a:	bd10      	pop	{r4, pc}

0002a25c <match_uuid>:
	data->attr = attr;
   2a25c:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   2a25e:	8091      	strh	r1, [r2, #4]
}
   2a260:	2000      	movs	r0, #0
   2a262:	4770      	bx	lr

0002a264 <gatt_sub_is_empty>:
	return list->head;
   2a264:	6880      	ldr	r0, [r0, #8]
}
   2a266:	fab0 f080 	clz	r0, r0
   2a26a:	0940      	lsrs	r0, r0, #5
   2a26c:	4770      	bx	lr

0002a26e <check_subscribe_security_level>:
}
   2a26e:	2001      	movs	r0, #1
   2a270:	4770      	bx	lr

0002a272 <gatt_mtu_rsp>:
{
   2a272:	b508      	push	{r3, lr}
   2a274:	9a02      	ldr	r2, [sp, #8]
	params->func(conn, err, params);
   2a276:	6813      	ldr	r3, [r2, #0]
   2a278:	4798      	blx	r3
}
   2a27a:	bd08      	pop	{r3, pc}

0002a27c <gen_hash_m>:
{
   2a27c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a27e:	b089      	sub	sp, #36	; 0x24
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2a280:	6806      	ldr	r6, [r0, #0]
   2a282:	7835      	ldrb	r5, [r6, #0]
   2a284:	2d00      	cmp	r5, #0
   2a286:	d160      	bne.n	2a34a <gen_hash_m+0xce>
   2a288:	4607      	mov	r7, r0
   2a28a:	4614      	mov	r4, r2
	switch (u16->val) {
   2a28c:	8873      	ldrh	r3, [r6, #2]
   2a28e:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   2a292:	d019      	beq.n	2a2c8 <gen_hash_m+0x4c>
   2a294:	d913      	bls.n	2a2be <gen_hash_m+0x42>
   2a296:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   2a29a:	33ff      	adds	r3, #255	; 0xff
   2a29c:	b29b      	uxth	r3, r3
   2a29e:	2b04      	cmp	r3, #4
   2a2a0:	d859      	bhi.n	2a356 <gen_hash_m+0xda>
		value = sys_cpu_to_le16(handle);
   2a2a2:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2a2a6:	2202      	movs	r2, #2
   2a2a8:	f10d 010a 	add.w	r1, sp, #10
   2a2ac:	4620      	mov	r0, r4
   2a2ae:	f7fe f85c 	bl	2836a <tc_cmac_update>
   2a2b2:	2800      	cmp	r0, #0
   2a2b4:	d139      	bne.n	2a32a <gen_hash_m+0xae>
			state->err = -EINVAL;
   2a2b6:	f06f 0315 	mvn.w	r3, #21
   2a2ba:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   2a2bc:	e046      	b.n	2a34c <gen_hash_m+0xd0>
	switch (u16->val) {
   2a2be:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   2a2c2:	b29b      	uxth	r3, r3
   2a2c4:	2b03      	cmp	r3, #3
   2a2c6:	d844      	bhi.n	2a352 <gen_hash_m+0xd6>
		value = sys_cpu_to_le16(handle);
   2a2c8:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2a2cc:	2202      	movs	r2, #2
   2a2ce:	f10d 010a 	add.w	r1, sp, #10
   2a2d2:	4620      	mov	r0, r4
   2a2d4:	f7fe f849 	bl	2836a <tc_cmac_update>
   2a2d8:	b918      	cbnz	r0, 2a2e2 <gen_hash_m+0x66>
			state->err = -EINVAL;
   2a2da:	f06f 0315 	mvn.w	r3, #21
   2a2de:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   2a2e0:	e034      	b.n	2a34c <gen_hash_m+0xd0>
		value = sys_cpu_to_le16(u16->val);
   2a2e2:	8873      	ldrh	r3, [r6, #2]
   2a2e4:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2a2e8:	2202      	movs	r2, #2
   2a2ea:	f10d 010a 	add.w	r1, sp, #10
   2a2ee:	4620      	mov	r0, r4
   2a2f0:	f7fe f83b 	bl	2836a <tc_cmac_update>
   2a2f4:	b178      	cbz	r0, 2a316 <gen_hash_m+0x9a>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   2a2f6:	687e      	ldr	r6, [r7, #4]
   2a2f8:	2000      	movs	r0, #0
   2a2fa:	9000      	str	r0, [sp, #0]
   2a2fc:	2313      	movs	r3, #19
   2a2fe:	aa03      	add	r2, sp, #12
   2a300:	4639      	mov	r1, r7
   2a302:	47b0      	blx	r6
		if (len < 0) {
   2a304:	1e02      	subs	r2, r0, #0
   2a306:	db0a      	blt.n	2a31e <gen_hash_m+0xa2>
		if (tc_cmac_update(&state->state, data, len) ==
   2a308:	a903      	add	r1, sp, #12
   2a30a:	4620      	mov	r0, r4
   2a30c:	f7fe f82d 	bl	2836a <tc_cmac_update>
   2a310:	b138      	cbz	r0, 2a322 <gen_hash_m+0xa6>
	return BT_GATT_ITER_CONTINUE;
   2a312:	2501      	movs	r5, #1
   2a314:	e01a      	b.n	2a34c <gen_hash_m+0xd0>
			state->err = -EINVAL;
   2a316:	f06f 0315 	mvn.w	r3, #21
   2a31a:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   2a31c:	e016      	b.n	2a34c <gen_hash_m+0xd0>
			state->err = len;
   2a31e:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   2a320:	e014      	b.n	2a34c <gen_hash_m+0xd0>
			state->err = -EINVAL;
   2a322:	f06f 0315 	mvn.w	r3, #21
   2a326:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   2a328:	e010      	b.n	2a34c <gen_hash_m+0xd0>
		value = sys_cpu_to_le16(u16->val);
   2a32a:	8873      	ldrh	r3, [r6, #2]
   2a32c:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2a330:	2202      	movs	r2, #2
   2a332:	f10d 010a 	add.w	r1, sp, #10
   2a336:	4620      	mov	r0, r4
   2a338:	f7fe f817 	bl	2836a <tc_cmac_update>
   2a33c:	b108      	cbz	r0, 2a342 <gen_hash_m+0xc6>
	return BT_GATT_ITER_CONTINUE;
   2a33e:	2501      	movs	r5, #1
   2a340:	e004      	b.n	2a34c <gen_hash_m+0xd0>
			state->err = -EINVAL;
   2a342:	f06f 0315 	mvn.w	r3, #21
   2a346:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   2a348:	e000      	b.n	2a34c <gen_hash_m+0xd0>
		return BT_GATT_ITER_CONTINUE;
   2a34a:	2501      	movs	r5, #1
}
   2a34c:	4628      	mov	r0, r5
   2a34e:	b009      	add	sp, #36	; 0x24
   2a350:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   2a352:	2501      	movs	r5, #1
   2a354:	e7fa      	b.n	2a34c <gen_hash_m+0xd0>
   2a356:	2501      	movs	r5, #1
   2a358:	e7f8      	b.n	2a34c <gen_hash_m+0xd0>

0002a35a <atomic_test_bit>:
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2a35a:	094b      	lsrs	r3, r1, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2a35c:	f3bf 8f5b 	dmb	ish
   2a360:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
   2a364:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2a368:	f001 011f 	and.w	r1, r1, #31
   2a36c:	4108      	asrs	r0, r1
}
   2a36e:	f000 0001 	and.w	r0, r0, #1
   2a372:	4770      	bx	lr

0002a374 <atomic_test_and_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2a374:	f001 021f 	and.w	r2, r1, #31
   2a378:	2301      	movs	r3, #1
   2a37a:	4093      	lsls	r3, r2
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   2a37c:	0949      	lsrs	r1, r1, #5
   2a37e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2a382:	f3bf 8f5b 	dmb	ish
   2a386:	e850 2f00 	ldrex	r2, [r0]
   2a38a:	ea42 0103 	orr.w	r1, r2, r3
   2a38e:	e840 1c00 	strex	ip, r1, [r0]
   2a392:	f1bc 0f00 	cmp.w	ip, #0
   2a396:	d1f6      	bne.n	2a386 <atomic_test_and_set_bit+0x12>
   2a398:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   2a39c:	4213      	tst	r3, r2
}
   2a39e:	bf14      	ite	ne
   2a3a0:	2001      	movne	r0, #1
   2a3a2:	2000      	moveq	r0, #0
   2a3a4:	4770      	bx	lr

0002a3a6 <gatt_sub_add>:
{
   2a3a6:	b538      	push	{r3, r4, r5, lr}
   2a3a8:	4604      	mov	r4, r0
	sub = gatt_sub_find(conn);
   2a3aa:	f7f4 fb3b 	bl	1ea24 <gatt_sub_find>
	if (!sub) {
   2a3ae:	4605      	mov	r5, r0
   2a3b0:	b108      	cbz	r0, 2a3b6 <gatt_sub_add+0x10>
}
   2a3b2:	4628      	mov	r0, r5
   2a3b4:	bd38      	pop	{r3, r4, r5, pc}
		sub = gatt_sub_find(NULL);
   2a3b6:	f7f4 fb35 	bl	1ea24 <gatt_sub_find>
		if (sub) {
   2a3ba:	4605      	mov	r5, r0
   2a3bc:	2800      	cmp	r0, #0
   2a3be:	d0f8      	beq.n	2a3b2 <gatt_sub_add+0xc>
	memcpy(dst, src, sizeof(*dst));
   2a3c0:	2207      	movs	r2, #7
   2a3c2:	f104 0188 	add.w	r1, r4, #136	; 0x88
   2a3c6:	3001      	adds	r0, #1
   2a3c8:	f7fe f95b 	bl	28682 <memcpy>
			sub->id = conn->id;
   2a3cc:	7a23      	ldrb	r3, [r4, #8]
   2a3ce:	702b      	strb	r3, [r5, #0]
	return sub;
   2a3d0:	e7ef      	b.n	2a3b2 <gatt_sub_add+0xc>

0002a3d2 <gatt_sub_remove>:
{
   2a3d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a3d4:	460c      	mov	r4, r1
	if (params) {
   2a3d6:	b173      	cbz	r3, 2a3f6 <gatt_sub_remove+0x24>
   2a3d8:	4605      	mov	r5, r0
   2a3da:	4611      	mov	r1, r2
   2a3dc:	461e      	mov	r6, r3
		sys_slist_remove(&sub->list, prev, &params->node);
   2a3de:	f103 0218 	add.w	r2, r3, #24
   2a3e2:	f104 0008 	add.w	r0, r4, #8
   2a3e6:	f7ff fe77 	bl	2a0d8 <sys_slist_remove>
		params->notify(conn, params, NULL, 0);
   2a3ea:	6837      	ldr	r7, [r6, #0]
   2a3ec:	2300      	movs	r3, #0
   2a3ee:	461a      	mov	r2, r3
   2a3f0:	4631      	mov	r1, r6
   2a3f2:	4628      	mov	r0, r5
   2a3f4:	47b8      	blx	r7
	if (gatt_sub_is_empty(sub)) {
   2a3f6:	4620      	mov	r0, r4
   2a3f8:	f7ff ff34 	bl	2a264 <gatt_sub_is_empty>
   2a3fc:	b900      	cbnz	r0, 2a400 <gatt_sub_remove+0x2e>
}
   2a3fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gatt_sub_free(sub);
   2a400:	4620      	mov	r0, r4
   2a402:	f7f4 fcab 	bl	1ed5c <gatt_sub_free>
}
   2a406:	e7fa      	b.n	2a3fe <gatt_sub_remove+0x2c>

0002a408 <gatt_sub_update>:
	if (sub->peer.type == BT_ADDR_LE_PUBLIC) {
   2a408:	784a      	ldrb	r2, [r1, #1]
   2a40a:	b902      	cbnz	r2, 2a40e <gatt_sub_update+0x6>
   2a40c:	4770      	bx	lr
{
   2a40e:	b508      	push	{r3, lr}
   2a410:	460b      	mov	r3, r1
   2a412:	2207      	movs	r2, #7
   2a414:	f100 0188 	add.w	r1, r0, #136	; 0x88
   2a418:	1c58      	adds	r0, r3, #1
   2a41a:	f7fe f932 	bl	28682 <memcpy>
}
   2a41e:	bd08      	pop	{r3, pc}

0002a420 <remove_subscriptions>:
{
   2a420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a424:	4606      	mov	r6, r0
	sub = gatt_sub_find(conn);
   2a426:	f7f4 fafd 	bl	1ea24 <gatt_sub_find>
	if (!sub) {
   2a42a:	b3a0      	cbz	r0, 2a496 <remove_subscriptions+0x76>
   2a42c:	4607      	mov	r7, r0
   2a42e:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   2a430:	b36c      	cbz	r4, 2a48e <remove_subscriptions+0x6e>
   2a432:	3c18      	subs	r4, #24
Z_GENLIST_PEEK_NEXT(slist, snode)
   2a434:	f114 0518 	adds.w	r5, r4, #24
   2a438:	d002      	beq.n	2a440 <remove_subscriptions+0x20>
	return node->next;
   2a43a:	69a5      	ldr	r5, [r4, #24]
   2a43c:	b105      	cbz	r5, 2a440 <remove_subscriptions+0x20>
   2a43e:	3d18      	subs	r5, #24
   2a440:	f04f 0800 	mov.w	r8, #0
   2a444:	e00d      	b.n	2a462 <remove_subscriptions+0x42>
			params->value = 0U;
   2a446:	2300      	movs	r3, #0
   2a448:	8223      	strh	r3, [r4, #16]
			gatt_sub_remove(conn, sub, prev, params);
   2a44a:	4623      	mov	r3, r4
   2a44c:	4642      	mov	r2, r8
   2a44e:	4639      	mov	r1, r7
   2a450:	4630      	mov	r0, r6
   2a452:	f7ff ffbe 	bl	2a3d2 <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   2a456:	b1e5      	cbz	r5, 2a492 <remove_subscriptions+0x72>
   2a458:	69ab      	ldr	r3, [r5, #24]
   2a45a:	b103      	cbz	r3, 2a45e <remove_subscriptions+0x3e>
   2a45c:	3b18      	subs	r3, #24
   2a45e:	462c      	mov	r4, r5
   2a460:	461d      	mov	r5, r3
   2a462:	b1c4      	cbz	r4, 2a496 <remove_subscriptions+0x76>
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   2a464:	f106 0188 	add.w	r1, r6, #136	; 0x88
   2a468:	7a30      	ldrb	r0, [r6, #8]
   2a46a:	f7fe fb66 	bl	28b3a <bt_addr_le_is_bonded>
   2a46e:	2800      	cmp	r0, #0
   2a470:	d0e9      	beq.n	2a446 <remove_subscriptions+0x26>
		    (atomic_test_bit(params->flags,
   2a472:	2100      	movs	r1, #0
   2a474:	f104 0014 	add.w	r0, r4, #20
   2a478:	f7ff ff6f 	bl	2a35a <atomic_test_bit>
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   2a47c:	2800      	cmp	r0, #0
   2a47e:	d1e2      	bne.n	2a446 <remove_subscriptions+0x26>
			gatt_sub_update(conn, sub);
   2a480:	4639      	mov	r1, r7
   2a482:	4630      	mov	r0, r6
   2a484:	f7ff ffc0 	bl	2a408 <gatt_sub_update>
			prev = &params->node;
   2a488:	f104 0818 	add.w	r8, r4, #24
   2a48c:	e7e3      	b.n	2a456 <remove_subscriptions+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   2a48e:	4625      	mov	r5, r4
   2a490:	e7d6      	b.n	2a440 <remove_subscriptions+0x20>
   2a492:	462b      	mov	r3, r5
   2a494:	e7e3      	b.n	2a45e <remove_subscriptions+0x3e>
}
   2a496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002a49a <clear_sc_cfg>:
{
   2a49a:	b508      	push	{r3, lr}
	memset(cfg, 0, sizeof(*cfg));
   2a49c:	220c      	movs	r2, #12
   2a49e:	2100      	movs	r1, #0
   2a4a0:	f7fe f91e 	bl	286e0 <memset>
}
   2a4a4:	bd08      	pop	{r3, pc}

0002a4a6 <bt_gatt_clear_sc>:
{
   2a4a6:	b508      	push	{r3, lr}
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   2a4a8:	f7f4 fa70 	bl	1e98c <find_sc_cfg>
	if (!cfg) {
   2a4ac:	b108      	cbz	r0, 2a4b2 <bt_gatt_clear_sc+0xc>
	clear_sc_cfg(cfg);
   2a4ae:	f7ff fff4 	bl	2a49a <clear_sc_cfg>
}
   2a4b2:	2000      	movs	r0, #0
   2a4b4:	bd08      	pop	{r3, pc}

0002a4b6 <sc_ccc_cfg_write>:
{
   2a4b6:	b508      	push	{r3, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   2a4b8:	2a02      	cmp	r2, #2
   2a4ba:	d003      	beq.n	2a4c4 <sc_ccc_cfg_write+0xe>
		sc_clear(conn);
   2a4bc:	f7f4 fc58 	bl	1ed70 <sc_clear>
}
   2a4c0:	2002      	movs	r0, #2
   2a4c2:	bd08      	pop	{r3, pc}
		sc_save(conn->id, &conn->le.dst, 0, 0);
   2a4c4:	2300      	movs	r3, #0
   2a4c6:	461a      	mov	r2, r3
   2a4c8:	f100 0188 	add.w	r1, r0, #136	; 0x88
   2a4cc:	7a00      	ldrb	r0, [r0, #8]
   2a4ce:	f7f4 fb47 	bl	1eb60 <sc_save>
   2a4d2:	e7f5      	b.n	2a4c0 <sc_ccc_cfg_write+0xa>

0002a4d4 <sc_reset>:
{
   2a4d4:	b508      	push	{r3, lr}
	memset(&cfg->data, 0, sizeof(cfg->data));
   2a4d6:	2204      	movs	r2, #4
   2a4d8:	2100      	movs	r1, #0
   2a4da:	3008      	adds	r0, #8
   2a4dc:	f7fe f900 	bl	286e0 <memset>
}
   2a4e0:	bd08      	pop	{r3, pc}

0002a4e2 <sc_restore_rsp>:
{
   2a4e2:	b538      	push	{r3, r4, r5, lr}
   2a4e4:	4605      	mov	r5, r0
   2a4e6:	4614      	mov	r4, r2
	if (bt_att_fixed_chan_only(conn)) {
   2a4e8:	f7ff fdc4 	bl	2a074 <bt_att_fixed_chan_only>
   2a4ec:	b908      	cbnz	r0, 2a4f2 <sc_restore_rsp+0x10>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   2a4ee:	b1c4      	cbz	r4, 2a522 <sc_restore_rsp+0x40>
}
   2a4f0:	bd38      	pop	{r3, r4, r5, pc}
		cfg = find_cf_cfg(conn);
   2a4f2:	4628      	mov	r0, r5
   2a4f4:	f7f4 fa24 	bl	1e940 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   2a4f8:	4603      	mov	r3, r0
   2a4fa:	2800      	cmp	r0, #0
   2a4fc:	d0f7      	beq.n	2a4ee <sc_restore_rsp+0xc>
   2a4fe:	7a02      	ldrb	r2, [r0, #8]
   2a500:	f012 0f01 	tst.w	r2, #1
   2a504:	d0f3      	beq.n	2a4ee <sc_restore_rsp+0xc>
			atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   2a506:	330c      	adds	r3, #12
   2a508:	f3bf 8f5b 	dmb	ish
   2a50c:	e853 1f00 	ldrex	r1, [r3]
   2a510:	f041 0101 	orr.w	r1, r1, #1
   2a514:	e843 1200 	strex	r2, r1, [r3]
   2a518:	2a00      	cmp	r2, #0
   2a51a:	d1f7      	bne.n	2a50c <sc_restore_rsp+0x2a>
   2a51c:	f3bf 8f5b 	dmb	ish
			LOG_DBG("%s change-aware", bt_addr_le_str(&cfg->peer));
   2a520:	e7e5      	b.n	2a4ee <sc_restore_rsp+0xc>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   2a522:	f105 0188 	add.w	r1, r5, #136	; 0x88
   2a526:	7a28      	ldrb	r0, [r5, #8]
   2a528:	f7f4 fa30 	bl	1e98c <find_sc_cfg>
		if (sc_cfg) {
   2a52c:	2800      	cmp	r0, #0
   2a52e:	d0df      	beq.n	2a4f0 <sc_restore_rsp+0xe>
			sc_reset(sc_cfg);
   2a530:	f7ff ffd0 	bl	2a4d4 <sc_reset>
}
   2a534:	e7dc      	b.n	2a4f0 <sc_restore_rsp+0xe>

0002a536 <atomic_test_and_clear_bit>:
{
   2a536:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   2a538:	f001 021f 	and.w	r2, r1, #31
   2a53c:	2301      	movs	r3, #1
   2a53e:	4093      	lsls	r3, r2
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2a540:	0949      	lsrs	r1, r1, #5
   2a542:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   2a546:	43d9      	mvns	r1, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2a548:	f3bf 8f5b 	dmb	ish
   2a54c:	e850 2f00 	ldrex	r2, [r0]
   2a550:	ea02 0c01 	and.w	ip, r2, r1
   2a554:	e840 ce00 	strex	lr, ip, [r0]
   2a558:	f1be 0f00 	cmp.w	lr, #0
   2a55c:	d1f6      	bne.n	2a54c <atomic_test_and_clear_bit+0x16>
   2a55e:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   2a562:	4213      	tst	r3, r2
}
   2a564:	bf14      	ite	ne
   2a566:	2001      	movne	r0, #1
   2a568:	2000      	moveq	r0, #0
   2a56a:	f85d fb04 	ldr.w	pc, [sp], #4

0002a56e <gatt_foreach_iter>:
	if (handle > end_handle) {
   2a56e:	4299      	cmp	r1, r3
   2a570:	d822      	bhi.n	2a5b8 <gatt_foreach_iter+0x4a>
{
   2a572:	b538      	push	{r3, r4, r5, lr}
   2a574:	4605      	mov	r5, r0
   2a576:	460c      	mov	r4, r1
	if (handle < start_handle) {
   2a578:	4291      	cmp	r1, r2
   2a57a:	d31f      	bcc.n	2a5bc <gatt_foreach_iter+0x4e>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   2a57c:	9b04      	ldr	r3, [sp, #16]
   2a57e:	b123      	cbz	r3, 2a58a <gatt_foreach_iter+0x1c>
   2a580:	6801      	ldr	r1, [r0, #0]
   2a582:	4618      	mov	r0, r3
   2a584:	f7fe f8fd 	bl	28782 <bt_uuid_cmp>
   2a588:	b9d0      	cbnz	r0, 2a5c0 <gatt_foreach_iter+0x52>
	if (attr_data && attr_data != attr->user_data) {
   2a58a:	9b05      	ldr	r3, [sp, #20]
   2a58c:	b12b      	cbz	r3, 2a59a <gatt_foreach_iter+0x2c>
   2a58e:	68eb      	ldr	r3, [r5, #12]
   2a590:	9a05      	ldr	r2, [sp, #20]
   2a592:	4293      	cmp	r3, r2
   2a594:	d001      	beq.n	2a59a <gatt_foreach_iter+0x2c>
		return BT_GATT_ITER_CONTINUE;
   2a596:	2001      	movs	r0, #1
   2a598:	e011      	b.n	2a5be <gatt_foreach_iter+0x50>
	*num_matches -= 1;
   2a59a:	9b06      	ldr	r3, [sp, #24]
   2a59c:	881b      	ldrh	r3, [r3, #0]
   2a59e:	3b01      	subs	r3, #1
   2a5a0:	9a06      	ldr	r2, [sp, #24]
   2a5a2:	8013      	strh	r3, [r2, #0]
	result = func(attr, handle, user_data);
   2a5a4:	9a08      	ldr	r2, [sp, #32]
   2a5a6:	4621      	mov	r1, r4
   2a5a8:	4628      	mov	r0, r5
   2a5aa:	9b07      	ldr	r3, [sp, #28]
   2a5ac:	4798      	blx	r3
	if (!*num_matches) {
   2a5ae:	9b06      	ldr	r3, [sp, #24]
   2a5b0:	881b      	ldrh	r3, [r3, #0]
   2a5b2:	b923      	cbnz	r3, 2a5be <gatt_foreach_iter+0x50>
		return BT_GATT_ITER_STOP;
   2a5b4:	2000      	movs	r0, #0
   2a5b6:	e002      	b.n	2a5be <gatt_foreach_iter+0x50>
		return BT_GATT_ITER_STOP;
   2a5b8:	2000      	movs	r0, #0
}
   2a5ba:	4770      	bx	lr
		return BT_GATT_ITER_CONTINUE;
   2a5bc:	2001      	movs	r0, #1
}
   2a5be:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ITER_CONTINUE;
   2a5c0:	2001      	movs	r0, #1
   2a5c2:	e7fc      	b.n	2a5be <gatt_foreach_iter+0x50>

0002a5c4 <gatt_req_alloc>:
{
   2a5c4:	b538      	push	{r3, r4, r5, lr}
   2a5c6:	4605      	mov	r5, r0
   2a5c8:	460c      	mov	r4, r1
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   2a5ca:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   2a5ce:	2100      	movs	r1, #0
   2a5d0:	f7f4 f812 	bl	1e5f8 <bt_att_req_alloc>
	if (!req) {
   2a5d4:	4603      	mov	r3, r0
   2a5d6:	b108      	cbz	r0, 2a5dc <gatt_req_alloc+0x18>
	req->func = func;
   2a5d8:	6045      	str	r5, [r0, #4]
	req->user_data = params;
   2a5da:	60c4      	str	r4, [r0, #12]
}
   2a5dc:	4618      	mov	r0, r3
   2a5de:	bd38      	pop	{r3, r4, r5, pc}

0002a5e0 <gatt_req_send>:
{
   2a5e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2a5e4:	b083      	sub	sp, #12
   2a5e6:	4606      	mov	r6, r0
   2a5e8:	4608      	mov	r0, r1
   2a5ea:	4615      	mov	r5, r2
   2a5ec:	461c      	mov	r4, r3
   2a5ee:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   2a5f2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
	req = gatt_req_alloc(func, params, encode, op, len);
   2a5f4:	9700      	str	r7, [sp, #0]
   2a5f6:	4643      	mov	r3, r8
   2a5f8:	4622      	mov	r2, r4
   2a5fa:	4629      	mov	r1, r5
   2a5fc:	f7ff ffe2 	bl	2a5c4 <gatt_req_alloc>
	if (!req) {
   2a600:	b368      	cbz	r0, 2a65e <gatt_req_send+0x7e>
   2a602:	4681      	mov	r9, r0
	buf = bt_att_create_pdu(conn, op, len);
   2a604:	463a      	mov	r2, r7
   2a606:	4641      	mov	r1, r8
   2a608:	4630      	mov	r0, r6
   2a60a:	f7f3 fd5b 	bl	1e0c4 <bt_att_create_pdu>
	if (!buf) {
   2a60e:	4680      	mov	r8, r0
   2a610:	b1b8      	cbz	r0, 2a642 <gatt_req_send+0x62>
	bt_att_set_tx_meta_data(buf, NULL, NULL, chan_opt);
   2a612:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   2a616:	2200      	movs	r2, #0
   2a618:	4611      	mov	r1, r2
   2a61a:	f7ff fd56 	bl	2a0ca <bt_att_set_tx_meta_data>
	req->buf = buf;
   2a61e:	f8c9 8008 	str.w	r8, [r9, #8]
	err = encode(buf, len, params);
   2a622:	462a      	mov	r2, r5
   2a624:	4639      	mov	r1, r7
   2a626:	4640      	mov	r0, r8
   2a628:	47a0      	blx	r4
	if (err) {
   2a62a:	4604      	mov	r4, r0
   2a62c:	b978      	cbnz	r0, 2a64e <gatt_req_send+0x6e>
	err = bt_att_req_send(conn, req);
   2a62e:	4649      	mov	r1, r9
   2a630:	4630      	mov	r0, r6
   2a632:	f7ff fcb1 	bl	29f98 <bt_att_req_send>
	if (err) {
   2a636:	4604      	mov	r4, r0
   2a638:	b968      	cbnz	r0, 2a656 <gatt_req_send+0x76>
}
   2a63a:	4620      	mov	r0, r4
   2a63c:	b003      	add	sp, #12
   2a63e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bt_att_req_free(req);
   2a642:	4648      	mov	r0, r9
   2a644:	f7f3 fffc 	bl	1e640 <bt_att_req_free>
		return -ENOMEM;
   2a648:	f06f 040b 	mvn.w	r4, #11
   2a64c:	e7f5      	b.n	2a63a <gatt_req_send+0x5a>
		bt_att_req_free(req);
   2a64e:	4648      	mov	r0, r9
   2a650:	f7f3 fff6 	bl	1e640 <bt_att_req_free>
		return err;
   2a654:	e7f1      	b.n	2a63a <gatt_req_send+0x5a>
		bt_att_req_free(req);
   2a656:	4648      	mov	r0, r9
   2a658:	f7f3 fff2 	bl	1e640 <bt_att_req_free>
   2a65c:	e7ed      	b.n	2a63a <gatt_req_send+0x5a>
		return -ENOMEM;
   2a65e:	f06f 040b 	mvn.w	r4, #11
   2a662:	e7ea      	b.n	2a63a <gatt_req_send+0x5a>

0002a664 <add_subscriptions>:
{
   2a664:	b538      	push	{r3, r4, r5, lr}
   2a666:	4605      	mov	r5, r0
	sub = gatt_sub_find(conn);
   2a668:	f7f4 f9dc 	bl	1ea24 <gatt_sub_find>
	if (!sub) {
   2a66c:	b1d0      	cbz	r0, 2a6a4 <add_subscriptions+0x40>
	return list->head;
   2a66e:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
   2a670:	b124      	cbz	r4, 2a67c <add_subscriptions+0x18>
   2a672:	3c18      	subs	r4, #24
   2a674:	e002      	b.n	2a67c <add_subscriptions+0x18>
	return node->next;
   2a676:	69a4      	ldr	r4, [r4, #24]
   2a678:	b104      	cbz	r4, 2a67c <add_subscriptions+0x18>
   2a67a:	3c18      	subs	r4, #24
   2a67c:	b194      	cbz	r4, 2a6a4 <add_subscriptions+0x40>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
   2a67e:	f105 0188 	add.w	r1, r5, #136	; 0x88
   2a682:	7a28      	ldrb	r0, [r5, #8]
   2a684:	f7fe fa59 	bl	28b3a <bt_addr_le_is_bonded>
   2a688:	2800      	cmp	r0, #0
   2a68a:	d0f4      	beq.n	2a676 <add_subscriptions+0x12>
		    !atomic_test_bit(params->flags,
   2a68c:	2101      	movs	r1, #1
   2a68e:	f104 0014 	add.w	r0, r4, #20
   2a692:	f7ff fe62 	bl	2a35a <atomic_test_bit>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
   2a696:	2800      	cmp	r0, #0
   2a698:	d1ed      	bne.n	2a676 <add_subscriptions+0x12>
			gatt_write_ccc(conn, params);
   2a69a:	4621      	mov	r1, r4
   2a69c:	4628      	mov	r0, r5
   2a69e:	f7f4 fcdb 	bl	1f058 <gatt_write_ccc>
   2a6a2:	e7e8      	b.n	2a676 <add_subscriptions+0x12>
}
   2a6a4:	bd38      	pop	{r3, r4, r5, pc}

0002a6a6 <gatt_exchange_mtu_encode>:
{
   2a6a6:	b508      	push	{r3, lr}
   2a6a8:	2102      	movs	r1, #2
   2a6aa:	300c      	adds	r0, #12
   2a6ac:	f000 fcf0 	bl	2b090 <net_buf_simple_add>
   2a6b0:	4603      	mov	r3, r0
	req->mtu = sys_cpu_to_le16(mtu);
   2a6b2:	2000      	movs	r0, #0
   2a6b4:	f06f 0208 	mvn.w	r2, #8
   2a6b8:	701a      	strb	r2, [r3, #0]
   2a6ba:	7058      	strb	r0, [r3, #1]
}
   2a6bc:	bd08      	pop	{r3, pc}

0002a6be <gatt_write_ccc_buf>:
{
   2a6be:	b538      	push	{r3, r4, r5, lr}
   2a6c0:	4614      	mov	r4, r2
   2a6c2:	f100 050c 	add.w	r5, r0, #12
   2a6c6:	2102      	movs	r1, #2
   2a6c8:	4628      	mov	r0, r5
   2a6ca:	f000 fce1 	bl	2b090 <net_buf_simple_add>
	write_req->handle = sys_cpu_to_le16(params->ccc_handle);
   2a6ce:	89e3      	ldrh	r3, [r4, #14]
   2a6d0:	8003      	strh	r3, [r0, #0]
	net_buf_simple_add_le16(&buf->b, val);
   2a6d2:	8a21      	ldrh	r1, [r4, #16]
   2a6d4:	4628      	mov	r0, r5
   2a6d6:	f000 fcec 	bl	2b0b2 <net_buf_simple_add_le16>
	atomic_set_bit(params->flags, BT_GATT_SUBSCRIBE_FLAG_WRITE_PENDING);
   2a6da:	3414      	adds	r4, #20
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2a6dc:	f3bf 8f5b 	dmb	ish
   2a6e0:	e854 3f00 	ldrex	r3, [r4]
   2a6e4:	f043 0304 	orr.w	r3, r3, #4
   2a6e8:	e844 3200 	strex	r2, r3, [r4]
   2a6ec:	2a00      	cmp	r2, #0
   2a6ee:	d1f7      	bne.n	2a6e0 <gatt_write_ccc_buf+0x22>
   2a6f0:	f3bf 8f5b 	dmb	ish
}
   2a6f4:	2000      	movs	r0, #0
   2a6f6:	bd38      	pop	{r3, r4, r5, pc}

0002a6f8 <remove_cf_cfg>:
{
   2a6f8:	b570      	push	{r4, r5, r6, lr}
   2a6fa:	4604      	mov	r4, r0
	cfg = find_cf_cfg(conn);
   2a6fc:	f7f4 f920 	bl	1e940 <find_cf_cfg>
	if (!cfg) {
   2a700:	b150      	cbz	r0, 2a718 <remove_cf_cfg+0x20>
   2a702:	4606      	mov	r6, r0
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2a704:	f104 0588 	add.w	r5, r4, #136	; 0x88
   2a708:	4629      	mov	r1, r5
   2a70a:	7a20      	ldrb	r0, [r4, #8]
   2a70c:	f7fe fa15 	bl	28b3a <bt_addr_le_is_bonded>
   2a710:	b918      	cbnz	r0, 2a71a <remove_cf_cfg+0x22>
		clear_cf_cfg(cfg);
   2a712:	4630      	mov	r0, r6
   2a714:	f7f4 fcb4 	bl	1f080 <clear_cf_cfg>
}
   2a718:	bd70      	pop	{r4, r5, r6, pc}
   2a71a:	2207      	movs	r2, #7
   2a71c:	4629      	mov	r1, r5
   2a71e:	1c70      	adds	r0, r6, #1
   2a720:	f7fd ffaf 	bl	28682 <memcpy>
}
   2a724:	e7f8      	b.n	2a718 <remove_cf_cfg+0x20>

0002a726 <bt_gatt_attr_read>:
{
   2a726:	b510      	push	{r4, lr}
   2a728:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   2a72c:	f8bd 4010 	ldrh.w	r4, [sp, #16]
	if (offset > value_len) {
   2a730:	42a1      	cmp	r1, r4
   2a732:	d80c      	bhi.n	2a74e <bt_gatt_attr_read+0x28>
   2a734:	4610      	mov	r0, r2
	len = MIN(buf_len, value_len - offset);
   2a736:	1a64      	subs	r4, r4, r1
   2a738:	42a3      	cmp	r3, r4
   2a73a:	bfa8      	it	ge
   2a73c:	4623      	movge	r3, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   2a73e:	b29c      	uxth	r4, r3
   2a740:	4622      	mov	r2, r4
   2a742:	9b03      	ldr	r3, [sp, #12]
   2a744:	4419      	add	r1, r3
   2a746:	f7fd ff9c 	bl	28682 <memcpy>
}
   2a74a:	4620      	mov	r0, r4
   2a74c:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2a74e:	f06f 0406 	mvn.w	r4, #6
   2a752:	e7fa      	b.n	2a74a <bt_gatt_attr_read+0x24>

0002a754 <read_appearance>:
{
   2a754:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a756:	b087      	sub	sp, #28
   2a758:	4604      	mov	r4, r0
   2a75a:	460d      	mov	r5, r1
   2a75c:	4616      	mov	r6, r2
   2a75e:	461f      	mov	r7, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   2a760:	f7fe f9e9 	bl	28b36 <bt_get_appearance>
   2a764:	f8ad 0016 	strh.w	r0, [sp, #22]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   2a768:	2302      	movs	r3, #2
   2a76a:	9302      	str	r3, [sp, #8]
   2a76c:	f10d 0316 	add.w	r3, sp, #22
   2a770:	9301      	str	r3, [sp, #4]
   2a772:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   2a776:	9300      	str	r3, [sp, #0]
   2a778:	463b      	mov	r3, r7
   2a77a:	4632      	mov	r2, r6
   2a77c:	4629      	mov	r1, r5
   2a77e:	4620      	mov	r0, r4
   2a780:	f7ff ffd1 	bl	2a726 <bt_gatt_attr_read>
}
   2a784:	b007      	add	sp, #28
   2a786:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002a788 <read_name>:
{
   2a788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a78c:	b084      	sub	sp, #16
   2a78e:	4604      	mov	r4, r0
   2a790:	460d      	mov	r5, r1
   2a792:	4616      	mov	r6, r2
   2a794:	461f      	mov	r7, r3
	const char *name = bt_get_name();
   2a796:	f7f0 fa45 	bl	1ac24 <bt_get_name>
   2a79a:	4680      	mov	r8, r0
				 strlen(name));
   2a79c:	f7fd ff41 	bl	28622 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   2a7a0:	b280      	uxth	r0, r0
   2a7a2:	9002      	str	r0, [sp, #8]
   2a7a4:	f8cd 8004 	str.w	r8, [sp, #4]
   2a7a8:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   2a7ac:	9300      	str	r3, [sp, #0]
   2a7ae:	463b      	mov	r3, r7
   2a7b0:	4632      	mov	r2, r6
   2a7b2:	4629      	mov	r1, r5
   2a7b4:	4620      	mov	r0, r4
   2a7b6:	f7ff ffb6 	bl	2a726 <bt_gatt_attr_read>
}
   2a7ba:	b004      	add	sp, #16
   2a7bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002a7c0 <cf_read>:
{
   2a7c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a7c2:	b087      	sub	sp, #28
   2a7c4:	4604      	mov	r4, r0
   2a7c6:	460d      	mov	r5, r1
   2a7c8:	4616      	mov	r6, r2
   2a7ca:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   2a7cc:	2300      	movs	r3, #0
   2a7ce:	f88d 3014 	strb.w	r3, [sp, #20]
	cfg = find_cf_cfg(conn);
   2a7d2:	f7f4 f8b5 	bl	1e940 <find_cf_cfg>
	if (cfg) {
   2a7d6:	b128      	cbz	r0, 2a7e4 <cf_read+0x24>
   2a7d8:	4601      	mov	r1, r0
		memcpy(data, cfg->data, sizeof(data));
   2a7da:	2201      	movs	r2, #1
   2a7dc:	3108      	adds	r1, #8
   2a7de:	a805      	add	r0, sp, #20
   2a7e0:	f7fd ff4f 	bl	28682 <memcpy>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   2a7e4:	2301      	movs	r3, #1
   2a7e6:	9302      	str	r3, [sp, #8]
   2a7e8:	ab05      	add	r3, sp, #20
   2a7ea:	9301      	str	r3, [sp, #4]
   2a7ec:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   2a7f0:	9300      	str	r3, [sp, #0]
   2a7f2:	463b      	mov	r3, r7
   2a7f4:	4632      	mov	r2, r6
   2a7f6:	4629      	mov	r1, r5
   2a7f8:	4620      	mov	r0, r4
   2a7fa:	f7ff ff94 	bl	2a726 <bt_gatt_attr_read>
}
   2a7fe:	b007      	add	sp, #28
   2a800:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002a802 <bt_gatt_attr_read_service>:
{
   2a802:	b570      	push	{r4, r5, r6, lr}
   2a804:	b086      	sub	sp, #24
   2a806:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
	struct bt_uuid *uuid = attr->user_data;
   2a80a:	68cc      	ldr	r4, [r1, #12]
	if (uuid->type == BT_UUID_TYPE_16) {
   2a80c:	7826      	ldrb	r6, [r4, #0]
   2a80e:	b146      	cbz	r6, 2a822 <bt_gatt_attr_read_service+0x20>
				 BT_UUID_128(uuid)->val, 16);
   2a810:	3401      	adds	r4, #1
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   2a812:	2610      	movs	r6, #16
   2a814:	9602      	str	r6, [sp, #8]
   2a816:	9401      	str	r4, [sp, #4]
   2a818:	9500      	str	r5, [sp, #0]
   2a81a:	f7ff ff84 	bl	2a726 <bt_gatt_attr_read>
}
   2a81e:	b006      	add	sp, #24
   2a820:	bd70      	pop	{r4, r5, r6, pc}
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   2a822:	8864      	ldrh	r4, [r4, #2]
   2a824:	f8ad 4016 	strh.w	r4, [sp, #22]
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
   2a828:	2402      	movs	r4, #2
   2a82a:	9402      	str	r4, [sp, #8]
   2a82c:	f10d 0416 	add.w	r4, sp, #22
   2a830:	9401      	str	r4, [sp, #4]
   2a832:	9500      	str	r5, [sp, #0]
   2a834:	f7ff ff77 	bl	2a726 <bt_gatt_attr_read>
   2a838:	e7f1      	b.n	2a81e <bt_gatt_attr_read_service+0x1c>

0002a83a <bt_gatt_attr_read_ccc>:
{
   2a83a:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a83c:	b087      	sub	sp, #28
   2a83e:	4605      	mov	r5, r0
   2a840:	460c      	mov	r4, r1
   2a842:	4616      	mov	r6, r2
   2a844:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   2a846:	68c9      	ldr	r1, [r1, #12]
   2a848:	f7f4 f8c4 	bl	1e9d4 <find_ccc_cfg>
	if (cfg) {
   2a84c:	b190      	cbz	r0, 2a874 <bt_gatt_attr_read_ccc+0x3a>
		value = sys_cpu_to_le16(cfg->value);
   2a84e:	8903      	ldrh	r3, [r0, #8]
   2a850:	f8ad 3016 	strh.w	r3, [sp, #22]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   2a854:	2302      	movs	r3, #2
   2a856:	9302      	str	r3, [sp, #8]
   2a858:	f10d 0316 	add.w	r3, sp, #22
   2a85c:	9301      	str	r3, [sp, #4]
   2a85e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   2a862:	9300      	str	r3, [sp, #0]
   2a864:	463b      	mov	r3, r7
   2a866:	4632      	mov	r2, r6
   2a868:	4621      	mov	r1, r4
   2a86a:	4628      	mov	r0, r5
   2a86c:	f7ff ff5b 	bl	2a726 <bt_gatt_attr_read>
}
   2a870:	b007      	add	sp, #28
   2a872:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = 0x0000;
   2a874:	2300      	movs	r3, #0
   2a876:	f8ad 3016 	strh.w	r3, [sp, #22]
   2a87a:	e7eb      	b.n	2a854 <bt_gatt_attr_read_ccc+0x1a>

0002a87c <bt_gatt_attr_value_handle>:
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2a87c:	b1b8      	cbz	r0, 2a8ae <bt_gatt_attr_value_handle+0x32>
{
   2a87e:	b510      	push	{r4, lr}
   2a880:	b082      	sub	sp, #8
   2a882:	4604      	mov	r4, r0
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2a884:	2300      	movs	r3, #0
   2a886:	f88d 3004 	strb.w	r3, [sp, #4]
   2a88a:	f642 0303 	movw	r3, #10243	; 0x2803
   2a88e:	f8ad 3006 	strh.w	r3, [sp, #6]
   2a892:	a901      	add	r1, sp, #4
   2a894:	6800      	ldr	r0, [r0, #0]
   2a896:	f7fd ff74 	bl	28782 <bt_uuid_cmp>
   2a89a:	b950      	cbnz	r0, 2a8b2 <bt_gatt_attr_value_handle+0x36>
		struct bt_gatt_chrc *chrc = attr->user_data;
   2a89c:	68e3      	ldr	r3, [r4, #12]
		handle = chrc->value_handle;
   2a89e:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   2a8a0:	b940      	cbnz	r0, 2a8b4 <bt_gatt_attr_value_handle+0x38>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   2a8a2:	4620      	mov	r0, r4
   2a8a4:	f7f4 fc3c 	bl	1f120 <bt_gatt_attr_get_handle>
   2a8a8:	3001      	adds	r0, #1
   2a8aa:	b280      	uxth	r0, r0
   2a8ac:	e002      	b.n	2a8b4 <bt_gatt_attr_value_handle+0x38>
	uint16_t handle = 0;
   2a8ae:	2000      	movs	r0, #0
}
   2a8b0:	4770      	bx	lr
	uint16_t handle = 0;
   2a8b2:	2000      	movs	r0, #0
}
   2a8b4:	b002      	add	sp, #8
   2a8b6:	bd10      	pop	{r4, pc}

0002a8b8 <bt_gatt_attr_read_chrc>:
{
   2a8b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a8bc:	b08a      	sub	sp, #40	; 0x28
   2a8be:	4605      	mov	r5, r0
   2a8c0:	460c      	mov	r4, r1
   2a8c2:	4616      	mov	r6, r2
   2a8c4:	461f      	mov	r7, r3
	struct bt_gatt_chrc *chrc = attr->user_data;
   2a8c6:	f8d1 800c 	ldr.w	r8, [r1, #12]
	pdu.properties = chrc->properties;
   2a8ca:	f898 3006 	ldrb.w	r3, [r8, #6]
   2a8ce:	f88d 3014 	strb.w	r3, [sp, #20]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   2a8d2:	4608      	mov	r0, r1
   2a8d4:	f7ff ffd2 	bl	2a87c <bt_gatt_attr_value_handle>
   2a8d8:	f8ad 0015 	strh.w	r0, [sp, #21]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   2a8dc:	f8d8 1000 	ldr.w	r1, [r8]
   2a8e0:	780b      	ldrb	r3, [r1, #0]
   2a8e2:	b993      	cbnz	r3, 2a90a <bt_gatt_attr_read_chrc+0x52>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   2a8e4:	884b      	ldrh	r3, [r1, #2]
   2a8e6:	f8ad 3017 	strh.w	r3, [sp, #23]
		value_len += 2U;
   2a8ea:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   2a8ec:	9302      	str	r3, [sp, #8]
   2a8ee:	ab05      	add	r3, sp, #20
   2a8f0:	9301      	str	r3, [sp, #4]
   2a8f2:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   2a8f6:	9300      	str	r3, [sp, #0]
   2a8f8:	463b      	mov	r3, r7
   2a8fa:	4632      	mov	r2, r6
   2a8fc:	4621      	mov	r1, r4
   2a8fe:	4628      	mov	r0, r5
   2a900:	f7ff ff11 	bl	2a726 <bt_gatt_attr_read>
}
   2a904:	b00a      	add	sp, #40	; 0x28
   2a906:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   2a90a:	2210      	movs	r2, #16
   2a90c:	3101      	adds	r1, #1
   2a90e:	f10d 0017 	add.w	r0, sp, #23
   2a912:	f7fd feb6 	bl	28682 <memcpy>
		value_len += 16U;
   2a916:	2313      	movs	r3, #19
   2a918:	e7e8      	b.n	2a8ec <bt_gatt_attr_read_chrc+0x34>

0002a91a <db_hash_process>:
{
   2a91a:	b508      	push	{r3, lr}
	db_hash_gen(true);
   2a91c:	2001      	movs	r0, #1
   2a91e:	f7f4 fc7f 	bl	1f220 <db_hash_gen>
}
   2a922:	bd08      	pop	{r3, pc}

0002a924 <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   2a924:	f012 0f01 	tst.w	r2, #1
   2a928:	d005      	beq.n	2a936 <bt_gatt_check_perm+0x12>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2a92a:	8a4b      	ldrh	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   2a92c:	f013 0f95 	tst.w	r3, #149	; 0x95
   2a930:	d01e      	beq.n	2a970 <bt_gatt_check_perm+0x4c>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2a932:	684b      	ldr	r3, [r1, #4]
   2a934:	b1f3      	cbz	r3, 2a974 <bt_gatt_check_perm+0x50>
	if ((mask & BT_GATT_PERM_WRITE) &&
   2a936:	f012 0f02 	tst.w	r2, #2
   2a93a:	d005      	beq.n	2a948 <bt_gatt_check_perm+0x24>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   2a93c:	8a4b      	ldrh	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_WRITE) &&
   2a93e:	f413 7f95 	tst.w	r3, #298	; 0x12a
   2a942:	d019      	beq.n	2a978 <bt_gatt_check_perm+0x54>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   2a944:	688b      	ldr	r3, [r1, #8]
   2a946:	b1cb      	cbz	r3, 2a97c <bt_gatt_check_perm+0x58>
{
   2a948:	b510      	push	{r4, lr}
	mask &= attr->perm;
   2a94a:	8a4c      	ldrh	r4, [r1, #18]
   2a94c:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_LESC_MASK) {
   2a94e:	f414 7fc0 	tst.w	r4, #384	; 0x180
   2a952:	d115      	bne.n	2a980 <bt_gatt_check_perm+0x5c>
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   2a954:	f014 0f30 	tst.w	r4, #48	; 0x30
   2a958:	d104      	bne.n	2a964 <bt_gatt_check_perm+0x40>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   2a95a:	f014 0f0c 	tst.w	r4, #12
   2a95e:	d111      	bne.n	2a984 <bt_gatt_check_perm+0x60>
	return 0;
   2a960:	2000      	movs	r0, #0
}
   2a962:	bd10      	pop	{r4, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   2a964:	f7fe fb10 	bl	28f88 <bt_conn_get_security>
   2a968:	2802      	cmp	r0, #2
   2a96a:	d8f6      	bhi.n	2a95a <bt_gatt_check_perm+0x36>
			return BT_ATT_ERR_AUTHENTICATION;
   2a96c:	2005      	movs	r0, #5
   2a96e:	e7f8      	b.n	2a962 <bt_gatt_check_perm+0x3e>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   2a970:	2002      	movs	r0, #2
   2a972:	4770      	bx	lr
   2a974:	2002      	movs	r0, #2
   2a976:	4770      	bx	lr
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   2a978:	2003      	movs	r0, #3
   2a97a:	4770      	bx	lr
   2a97c:	2003      	movs	r0, #3
}
   2a97e:	4770      	bx	lr
			return BT_ATT_ERR_AUTHENTICATION;
   2a980:	2005      	movs	r0, #5
   2a982:	e7ee      	b.n	2a962 <bt_gatt_check_perm+0x3e>
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   2a984:	200f      	movs	r0, #15
   2a986:	e7ec      	b.n	2a962 <bt_gatt_check_perm+0x3e>

0002a988 <bt_gatt_is_subscribed>:
	if (conn->state != BT_CONN_CONNECTED) {
   2a988:	7a83      	ldrb	r3, [r0, #10]
   2a98a:	2b07      	cmp	r3, #7
   2a98c:	d001      	beq.n	2a992 <bt_gatt_is_subscribed+0xa>
		return false;
   2a98e:	2000      	movs	r0, #0
}
   2a990:	4770      	bx	lr
{
   2a992:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a994:	b089      	sub	sp, #36	; 0x24
   2a996:	4605      	mov	r5, r0
   2a998:	460c      	mov	r4, r1
   2a99a:	4616      	mov	r6, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   2a99c:	6808      	ldr	r0, [r1, #0]
   2a99e:	2300      	movs	r3, #0
   2a9a0:	f88d 3004 	strb.w	r3, [sp, #4]
   2a9a4:	f642 0303 	movw	r3, #10243	; 0x2803
   2a9a8:	f8ad 3006 	strh.w	r3, [sp, #6]
   2a9ac:	a901      	add	r1, sp, #4
   2a9ae:	f7fd fee8 	bl	28782 <bt_uuid_cmp>
   2a9b2:	b950      	cbnz	r0, 2a9ca <bt_gatt_is_subscribed+0x42>
		struct bt_gatt_chrc *chrc = attr->user_data;
   2a9b4:	68e3      	ldr	r3, [r4, #12]
		if (!(chrc->properties &
   2a9b6:	799b      	ldrb	r3, [r3, #6]
   2a9b8:	f013 0f30 	tst.w	r3, #48	; 0x30
   2a9bc:	d101      	bne.n	2a9c2 <bt_gatt_is_subscribed+0x3a>
}
   2a9be:	b009      	add	sp, #36	; 0x24
   2a9c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		attr = bt_gatt_attr_next(attr);
   2a9c2:	4620      	mov	r0, r4
   2a9c4:	f7f4 fd2e 	bl	1f424 <bt_gatt_attr_next>
   2a9c8:	4604      	mov	r4, r0
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   2a9ca:	6820      	ldr	r0, [r4, #0]
   2a9cc:	2300      	movs	r3, #0
   2a9ce:	f88d 3008 	strb.w	r3, [sp, #8]
   2a9d2:	f642 1302 	movw	r3, #10498	; 0x2902
   2a9d6:	f8ad 300a 	strh.w	r3, [sp, #10]
   2a9da:	a902      	add	r1, sp, #8
   2a9dc:	f7fd fed1 	bl	28782 <bt_uuid_cmp>
   2a9e0:	2800      	cmp	r0, #0
   2a9e2:	d136      	bne.n	2aa52 <bt_gatt_is_subscribed+0xca>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   2a9e4:	6820      	ldr	r0, [r4, #0]
   2a9e6:	2300      	movs	r3, #0
   2a9e8:	f88d 300c 	strb.w	r3, [sp, #12]
   2a9ec:	f642 1302 	movw	r3, #10498	; 0x2902
   2a9f0:	f8ad 300e 	strh.w	r3, [sp, #14]
   2a9f4:	a903      	add	r1, sp, #12
   2a9f6:	f7fd fec4 	bl	28782 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   2a9fa:	b378      	cbz	r0, 2aa5c <bt_gatt_is_subscribed+0xd4>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   2a9fc:	6820      	ldr	r0, [r4, #0]
   2a9fe:	2300      	movs	r3, #0
   2aa00:	f88d 3010 	strb.w	r3, [sp, #16]
   2aa04:	f642 0303 	movw	r3, #10243	; 0x2803
   2aa08:	f8ad 3012 	strh.w	r3, [sp, #18]
   2aa0c:	a904      	add	r1, sp, #16
   2aa0e:	f7fd feb8 	bl	28782 <bt_uuid_cmp>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   2aa12:	b318      	cbz	r0, 2aa5c <bt_gatt_is_subscribed+0xd4>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   2aa14:	6820      	ldr	r0, [r4, #0]
   2aa16:	2300      	movs	r3, #0
   2aa18:	f88d 3014 	strb.w	r3, [sp, #20]
   2aa1c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   2aa20:	f8ad 3016 	strh.w	r3, [sp, #22]
   2aa24:	a905      	add	r1, sp, #20
   2aa26:	f7fd feac 	bl	28782 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   2aa2a:	b1b8      	cbz	r0, 2aa5c <bt_gatt_is_subscribed+0xd4>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   2aa2c:	6820      	ldr	r0, [r4, #0]
   2aa2e:	2300      	movs	r3, #0
   2aa30:	f88d 3018 	strb.w	r3, [sp, #24]
   2aa34:	f642 0301 	movw	r3, #10241	; 0x2801
   2aa38:	f8ad 301a 	strh.w	r3, [sp, #26]
   2aa3c:	a906      	add	r1, sp, #24
   2aa3e:	f7fd fea0 	bl	28782 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   2aa42:	b158      	cbz	r0, 2aa5c <bt_gatt_is_subscribed+0xd4>
		attr = bt_gatt_attr_next(attr);
   2aa44:	4620      	mov	r0, r4
   2aa46:	f7f4 fced 	bl	1f424 <bt_gatt_attr_next>
		if (!attr) {
   2aa4a:	4604      	mov	r4, r0
   2aa4c:	2800      	cmp	r0, #0
   2aa4e:	d1c9      	bne.n	2a9e4 <bt_gatt_is_subscribed+0x5c>
   2aa50:	e7b5      	b.n	2a9be <bt_gatt_is_subscribed+0x36>
		attr = bt_gatt_attr_next(attr);
   2aa52:	4620      	mov	r0, r4
   2aa54:	f7f4 fce6 	bl	1f424 <bt_gatt_attr_next>
   2aa58:	4604      	mov	r4, r0
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   2aa5a:	e7c3      	b.n	2a9e4 <bt_gatt_is_subscribed+0x5c>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   2aa5c:	6820      	ldr	r0, [r4, #0]
   2aa5e:	2300      	movs	r3, #0
   2aa60:	f88d 301c 	strb.w	r3, [sp, #28]
   2aa64:	f642 1302 	movw	r3, #10498	; 0x2902
   2aa68:	f8ad 301e 	strh.w	r3, [sp, #30]
   2aa6c:	a907      	add	r1, sp, #28
   2aa6e:	f7fd fe88 	bl	28782 <bt_uuid_cmp>
   2aa72:	b910      	cbnz	r0, 2aa7a <bt_gatt_is_subscribed+0xf2>
	ccc = attr->user_data;
   2aa74:	68e7      	ldr	r7, [r4, #12]
	for (size_t i = 0; i < BT_GATT_CCC_MAX; i++) {
   2aa76:	2400      	movs	r4, #0
   2aa78:	e002      	b.n	2aa80 <bt_gatt_is_subscribed+0xf8>
		return false;
   2aa7a:	2000      	movs	r0, #0
   2aa7c:	e79f      	b.n	2a9be <bt_gatt_is_subscribed+0x36>
	for (size_t i = 0; i < BT_GATT_CCC_MAX; i++) {
   2aa7e:	3401      	adds	r4, #1
   2aa80:	2c07      	cmp	r4, #7
   2aa82:	d813      	bhi.n	2aaac <bt_gatt_is_subscribed+0x124>
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   2aa84:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   2aa88:	eb07 0243 	add.w	r2, r7, r3, lsl #1
   2aa8c:	3201      	adds	r2, #1
   2aa8e:	f817 1013 	ldrb.w	r1, [r7, r3, lsl #1]
   2aa92:	4628      	mov	r0, r5
   2aa94:	f7fe fa91 	bl	28fba <bt_conn_is_peer_addr_le>
   2aa98:	2800      	cmp	r0, #0
   2aa9a:	d0f0      	beq.n	2aa7e <bt_gatt_is_subscribed+0xf6>
		    (ccc_type & ccc->cfg[i].value)) {
   2aa9c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   2aaa0:	eb07 0343 	add.w	r3, r7, r3, lsl #1
   2aaa4:	891b      	ldrh	r3, [r3, #8]
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   2aaa6:	4233      	tst	r3, r6
   2aaa8:	d0e9      	beq.n	2aa7e <bt_gatt_is_subscribed+0xf6>
   2aaaa:	e788      	b.n	2a9be <bt_gatt_is_subscribed+0x36>
	return false;
   2aaac:	2000      	movs	r0, #0
   2aaae:	e786      	b.n	2a9be <bt_gatt_is_subscribed+0x36>

0002aab0 <bt_gatt_subscribe>:
{
   2aab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   2aab2:	7a83      	ldrb	r3, [r0, #10]
   2aab4:	2b07      	cmp	r3, #7
   2aab6:	d144      	bne.n	2ab42 <bt_gatt_subscribe+0x92>
   2aab8:	4605      	mov	r5, r0
   2aaba:	460c      	mov	r4, r1
	sub = gatt_sub_add(conn);
   2aabc:	f7ff fc73 	bl	2a3a6 <gatt_sub_add>
	if (!sub) {
   2aac0:	4606      	mov	r6, r0
   2aac2:	2800      	cmp	r0, #0
   2aac4:	d040      	beq.n	2ab48 <bt_gatt_subscribe+0x98>
	return list->head;
   2aac6:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   2aac8:	b103      	cbz	r3, 2aacc <bt_gatt_subscribe+0x1c>
   2aaca:	3b18      	subs	r3, #24
   2aacc:	2000      	movs	r0, #0
   2aace:	e011      	b.n	2aaf4 <bt_gatt_subscribe+0x44>
			gatt_sub_remove(conn, sub, NULL, NULL);
   2aad0:	2300      	movs	r3, #0
   2aad2:	461a      	mov	r2, r3
   2aad4:	4631      	mov	r1, r6
   2aad6:	4628      	mov	r0, r5
   2aad8:	f7ff fc7b 	bl	2a3d2 <gatt_sub_remove>
			return -EALREADY;
   2aadc:	f06f 0777 	mvn.w	r7, #119	; 0x77
}
   2aae0:	4638      	mov	r0, r7
   2aae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		    tmp->value >= params->value) {
   2aae4:	8a19      	ldrh	r1, [r3, #16]
   2aae6:	8a22      	ldrh	r2, [r4, #16]
		if (tmp->value_handle == params->value_handle &&
   2aae8:	4291      	cmp	r1, r2
   2aaea:	d300      	bcc.n	2aaee <bt_gatt_subscribe+0x3e>
			has_subscription = true;
   2aaec:	2001      	movs	r0, #1
	return node->next;
   2aaee:	699b      	ldr	r3, [r3, #24]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   2aaf0:	b103      	cbz	r3, 2aaf4 <bt_gatt_subscribe+0x44>
   2aaf2:	3b18      	subs	r3, #24
   2aaf4:	b153      	cbz	r3, 2ab0c <bt_gatt_subscribe+0x5c>
		if (tmp == params) {
   2aaf6:	42a3      	cmp	r3, r4
   2aaf8:	d0ea      	beq.n	2aad0 <bt_gatt_subscribe+0x20>
		if (tmp->value_handle == params->value_handle &&
   2aafa:	8999      	ldrh	r1, [r3, #12]
   2aafc:	89a2      	ldrh	r2, [r4, #12]
   2aafe:	4291      	cmp	r1, r2
   2ab00:	d0f0      	beq.n	2aae4 <bt_gatt_subscribe+0x34>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2ab02:	f113 0218 	adds.w	r2, r3, #24
   2ab06:	d1f2      	bne.n	2aaee <bt_gatt_subscribe+0x3e>
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   2ab08:	4613      	mov	r3, r2
   2ab0a:	e7f3      	b.n	2aaf4 <bt_gatt_subscribe+0x44>
	if (!has_subscription) {
   2ab0c:	b140      	cbz	r0, 2ab20 <bt_gatt_subscribe+0x70>
	sys_slist_prepend(&sub->list, &params->node);
   2ab0e:	f104 0318 	add.w	r3, r4, #24
	return list->head;
   2ab12:	68b2      	ldr	r2, [r6, #8]
	parent->next = child;
   2ab14:	61a2      	str	r2, [r4, #24]
	list->head = node;
   2ab16:	60b3      	str	r3, [r6, #8]
	return list->tail;
   2ab18:	68f2      	ldr	r2, [r6, #12]
Z_GENLIST_PREPEND(slist, snode)
   2ab1a:	b17a      	cbz	r2, 2ab3c <bt_gatt_subscribe+0x8c>
	return 0;
   2ab1c:	2700      	movs	r7, #0
   2ab1e:	e7df      	b.n	2aae0 <bt_gatt_subscribe+0x30>
		err = gatt_write_ccc(conn, params);
   2ab20:	4621      	mov	r1, r4
   2ab22:	4628      	mov	r0, r5
   2ab24:	f7f4 fa98 	bl	1f058 <gatt_write_ccc>
		if (err) {
   2ab28:	4607      	mov	r7, r0
   2ab2a:	2800      	cmp	r0, #0
   2ab2c:	d0ef      	beq.n	2ab0e <bt_gatt_subscribe+0x5e>
			gatt_sub_remove(conn, sub, NULL, NULL);
   2ab2e:	2300      	movs	r3, #0
   2ab30:	461a      	mov	r2, r3
   2ab32:	4631      	mov	r1, r6
   2ab34:	4628      	mov	r0, r5
   2ab36:	f7ff fc4c 	bl	2a3d2 <gatt_sub_remove>
			return err;
   2ab3a:	e7d1      	b.n	2aae0 <bt_gatt_subscribe+0x30>
	list->tail = node;
   2ab3c:	60f3      	str	r3, [r6, #12]
	return 0;
   2ab3e:	2700      	movs	r7, #0
}
   2ab40:	e7ce      	b.n	2aae0 <bt_gatt_subscribe+0x30>
		return -ENOTCONN;
   2ab42:	f06f 077f 	mvn.w	r7, #127	; 0x7f
   2ab46:	e7cb      	b.n	2aae0 <bt_gatt_subscribe+0x30>
		return -ENOMEM;
   2ab48:	f06f 070b 	mvn.w	r7, #11
   2ab4c:	e7c8      	b.n	2aae0 <bt_gatt_subscribe+0x30>

0002ab4e <bt_gatt_cancel>:
{
   2ab4e:	b570      	push	{r4, r5, r6, lr}
   2ab50:	b082      	sub	sp, #8
   2ab52:	4604      	mov	r4, r0
   2ab54:	460d      	mov	r5, r1
	k_sched_lock();
   2ab56:	f7fa fda5 	bl	256a4 <k_sched_lock>
	req = bt_att_find_req_by_user_data(conn, params);
   2ab5a:	4629      	mov	r1, r5
   2ab5c:	4620      	mov	r0, r4
   2ab5e:	f7ff fa60 	bl	2a022 <bt_att_find_req_by_user_data>
	if (req) {
   2ab62:	b178      	cbz	r0, 2ab84 <bt_gatt_cancel+0x36>
   2ab64:	4601      	mov	r1, r0
		func = req->func;
   2ab66:	6846      	ldr	r6, [r0, #4]
		bt_att_req_cancel(conn, req);
   2ab68:	4620      	mov	r0, r4
   2ab6a:	f7ff fa2c 	bl	29fc6 <bt_att_req_cancel>
	k_sched_unlock();
   2ab6e:	f7fa ff9b 	bl	25aa8 <k_sched_unlock>
	if (func) {
   2ab72:	b12e      	cbz	r6, 2ab80 <bt_gatt_cancel+0x32>
		func(conn, BT_ATT_ERR_UNLIKELY, NULL, 0, params);
   2ab74:	9500      	str	r5, [sp, #0]
   2ab76:	2300      	movs	r3, #0
   2ab78:	461a      	mov	r2, r3
   2ab7a:	210e      	movs	r1, #14
   2ab7c:	4620      	mov	r0, r4
   2ab7e:	47b0      	blx	r6
}
   2ab80:	b002      	add	sp, #8
   2ab82:	bd70      	pop	{r4, r5, r6, pc}
	k_sched_unlock();
   2ab84:	f7fa ff90 	bl	25aa8 <k_sched_unlock>
	if (func) {
   2ab88:	e7fa      	b.n	2ab80 <bt_gatt_cancel+0x32>

0002ab8a <bt_gatt_unsubscribe>:
{
   2ab8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   2ab8c:	7a83      	ldrb	r3, [r0, #10]
   2ab8e:	2b07      	cmp	r3, #7
   2ab90:	d144      	bne.n	2ac1c <bt_gatt_unsubscribe+0x92>
   2ab92:	4605      	mov	r5, r0
   2ab94:	460c      	mov	r4, r1
	sub = gatt_sub_find(conn);
   2ab96:	f7f3 ff45 	bl	1ea24 <gatt_sub_find>
	if (!sub) {
   2ab9a:	4607      	mov	r7, r0
   2ab9c:	2800      	cmp	r0, #0
   2ab9e:	d040      	beq.n	2ac22 <bt_gatt_unsubscribe+0x98>
	return list->head;
   2aba0:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   2aba2:	b103      	cbz	r3, 2aba6 <bt_gatt_unsubscribe+0x1c>
   2aba4:	3b18      	subs	r3, #24
			has_subscription = true;
   2aba6:	2000      	movs	r0, #0
   2aba8:	4606      	mov	r6, r0
   2abaa:	e003      	b.n	2abb4 <bt_gatt_unsubscribe+0x2a>
			found = true;
   2abac:	2001      	movs	r0, #1
	return node->next;
   2abae:	699b      	ldr	r3, [r3, #24]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   2abb0:	b103      	cbz	r3, 2abb4 <bt_gatt_unsubscribe+0x2a>
   2abb2:	3b18      	subs	r3, #24
   2abb4:	b13b      	cbz	r3, 2abc6 <bt_gatt_unsubscribe+0x3c>
		if (params == tmp) {
   2abb6:	42a3      	cmp	r3, r4
   2abb8:	d0f8      	beq.n	2abac <bt_gatt_unsubscribe+0x22>
		if (tmp->value_handle == params->value_handle) {
   2abba:	8999      	ldrh	r1, [r3, #12]
   2abbc:	89a2      	ldrh	r2, [r4, #12]
   2abbe:	4291      	cmp	r1, r2
   2abc0:	d1f5      	bne.n	2abae <bt_gatt_unsubscribe+0x24>
			has_subscription = true;
   2abc2:	2601      	movs	r6, #1
   2abc4:	e7f3      	b.n	2abae <bt_gatt_unsubscribe+0x24>
	if (!found) {
   2abc6:	b378      	cbz	r0, 2ac28 <bt_gatt_unsubscribe+0x9e>
	if (atomic_test_bit(params->flags, BT_GATT_SUBSCRIBE_FLAG_WRITE_PENDING)) {
   2abc8:	2102      	movs	r1, #2
   2abca:	f104 0014 	add.w	r0, r4, #20
   2abce:	f7ff fbc4 	bl	2a35a <atomic_test_bit>
   2abd2:	b9d0      	cbnz	r0, 2ac0a <bt_gatt_unsubscribe+0x80>
	if (!has_subscription) {
   2abd4:	b936      	cbnz	r6, 2abe4 <bt_gatt_unsubscribe+0x5a>
		params->value = 0x0000;
   2abd6:	2300      	movs	r3, #0
   2abd8:	8223      	strh	r3, [r4, #16]
		err = gatt_write_ccc(conn, params);
   2abda:	4621      	mov	r1, r4
   2abdc:	4628      	mov	r0, r5
   2abde:	f7f4 fa3b 	bl	1f058 <gatt_write_ccc>
		if (err) {
   2abe2:	b988      	cbnz	r0, 2ac08 <bt_gatt_unsubscribe+0x7e>
	sys_slist_find_and_remove(&sub->list, &params->node);
   2abe4:	f104 0118 	add.w	r1, r4, #24
   2abe8:	f107 0008 	add.w	r0, r7, #8
   2abec:	f7ff fa87 	bl	2a0fe <sys_slist_find_and_remove>
	if (gatt_sub_is_empty(sub)) {
   2abf0:	4638      	mov	r0, r7
   2abf2:	f7ff fb37 	bl	2a264 <gatt_sub_is_empty>
   2abf6:	b968      	cbnz	r0, 2ac14 <bt_gatt_unsubscribe+0x8a>
	if (has_subscription) {
   2abf8:	b1ce      	cbz	r6, 2ac2e <bt_gatt_unsubscribe+0xa4>
		params->notify(conn, params, NULL, 0);
   2abfa:	6826      	ldr	r6, [r4, #0]
   2abfc:	2300      	movs	r3, #0
   2abfe:	461a      	mov	r2, r3
   2ac00:	4621      	mov	r1, r4
   2ac02:	4628      	mov	r0, r5
   2ac04:	47b0      	blx	r6
	return 0;
   2ac06:	2000      	movs	r0, #0
}
   2ac08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		bt_gatt_cancel(conn, params);
   2ac0a:	4621      	mov	r1, r4
   2ac0c:	4628      	mov	r0, r5
   2ac0e:	f7ff ff9e 	bl	2ab4e <bt_gatt_cancel>
   2ac12:	e7df      	b.n	2abd4 <bt_gatt_unsubscribe+0x4a>
		gatt_sub_free(sub);
   2ac14:	4638      	mov	r0, r7
   2ac16:	f7f4 f8a1 	bl	1ed5c <gatt_sub_free>
   2ac1a:	e7ed      	b.n	2abf8 <bt_gatt_unsubscribe+0x6e>
		return -ENOTCONN;
   2ac1c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2ac20:	e7f2      	b.n	2ac08 <bt_gatt_unsubscribe+0x7e>
		return -EINVAL;
   2ac22:	f06f 0015 	mvn.w	r0, #21
   2ac26:	e7ef      	b.n	2ac08 <bt_gatt_unsubscribe+0x7e>
		return -EINVAL;
   2ac28:	f06f 0015 	mvn.w	r0, #21
   2ac2c:	e7ec      	b.n	2ac08 <bt_gatt_unsubscribe+0x7e>
	return 0;
   2ac2e:	2000      	movs	r0, #0
   2ac30:	e7ea      	b.n	2ac08 <bt_gatt_unsubscribe+0x7e>

0002ac32 <bt_gatt_notification>:
{
   2ac32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2ac36:	4680      	mov	r8, r0
   2ac38:	460f      	mov	r7, r1
   2ac3a:	4691      	mov	r9, r2
   2ac3c:	469a      	mov	sl, r3
	sub = gatt_sub_find(conn);
   2ac3e:	f7f3 fef1 	bl	1ea24 <gatt_sub_find>
	if (!sub) {
   2ac42:	b350      	cbz	r0, 2ac9a <bt_gatt_notification+0x68>
	return list->head;
   2ac44:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   2ac46:	b324      	cbz	r4, 2ac92 <bt_gatt_notification+0x60>
   2ac48:	3c18      	subs	r4, #24
Z_GENLIST_PEEK_NEXT(slist, snode)
   2ac4a:	f114 0518 	adds.w	r5, r4, #24
   2ac4e:	d009      	beq.n	2ac64 <bt_gatt_notification+0x32>
	return node->next;
   2ac50:	69a5      	ldr	r5, [r4, #24]
   2ac52:	b13d      	cbz	r5, 2ac64 <bt_gatt_notification+0x32>
   2ac54:	3d18      	subs	r5, #24
   2ac56:	e005      	b.n	2ac64 <bt_gatt_notification+0x32>
   2ac58:	b1ed      	cbz	r5, 2ac96 <bt_gatt_notification+0x64>
   2ac5a:	69ae      	ldr	r6, [r5, #24]
   2ac5c:	b106      	cbz	r6, 2ac60 <bt_gatt_notification+0x2e>
   2ac5e:	3e18      	subs	r6, #24
   2ac60:	462c      	mov	r4, r5
   2ac62:	4635      	mov	r5, r6
   2ac64:	b1cc      	cbz	r4, 2ac9a <bt_gatt_notification+0x68>
		if (handle != params->value_handle) {
   2ac66:	89a3      	ldrh	r3, [r4, #12]
   2ac68:	429f      	cmp	r7, r3
   2ac6a:	d1f5      	bne.n	2ac58 <bt_gatt_notification+0x26>
		if (check_subscribe_security_level(conn, params)) {
   2ac6c:	4621      	mov	r1, r4
   2ac6e:	4640      	mov	r0, r8
   2ac70:	f7ff fafd 	bl	2a26e <check_subscribe_security_level>
   2ac74:	2800      	cmp	r0, #0
   2ac76:	d0ef      	beq.n	2ac58 <bt_gatt_notification+0x26>
			if (params->notify(conn, params, data, length) ==
   2ac78:	6826      	ldr	r6, [r4, #0]
   2ac7a:	4653      	mov	r3, sl
   2ac7c:	464a      	mov	r2, r9
   2ac7e:	4621      	mov	r1, r4
   2ac80:	4640      	mov	r0, r8
   2ac82:	47b0      	blx	r6
   2ac84:	2800      	cmp	r0, #0
   2ac86:	d1e7      	bne.n	2ac58 <bt_gatt_notification+0x26>
				bt_gatt_unsubscribe(conn, params);
   2ac88:	4621      	mov	r1, r4
   2ac8a:	4640      	mov	r0, r8
   2ac8c:	f7ff ff7d 	bl	2ab8a <bt_gatt_unsubscribe>
   2ac90:	e7e2      	b.n	2ac58 <bt_gatt_notification+0x26>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   2ac92:	4625      	mov	r5, r4
   2ac94:	e7e6      	b.n	2ac64 <bt_gatt_notification+0x32>
   2ac96:	462e      	mov	r6, r5
   2ac98:	e7e2      	b.n	2ac60 <bt_gatt_notification+0x2e>
}
   2ac9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002ac9e <bt_gatt_change_aware>:
{
   2ac9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2aca0:	4607      	mov	r7, r0
   2aca2:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   2aca4:	f7f3 fe4c 	bl	1e940 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   2aca8:	2800      	cmp	r0, #0
   2acaa:	d050      	beq.n	2ad4e <bt_gatt_change_aware+0xb0>
   2acac:	7a02      	ldrb	r2, [r0, #8]
   2acae:	f012 0f01 	tst.w	r2, #1
   2acb2:	d102      	bne.n	2acba <bt_gatt_change_aware+0x1c>
		return true;
   2acb4:	2601      	movs	r6, #1
}
   2acb6:	4630      	mov	r0, r6
   2acb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   2acba:	f100 050c 	add.w	r5, r0, #12
   2acbe:	2100      	movs	r1, #0
   2acc0:	4628      	mov	r0, r5
   2acc2:	f7ff fb4a 	bl	2a35a <atomic_test_bit>
   2acc6:	4606      	mov	r6, r0
   2acc8:	2800      	cmp	r0, #0
   2acca:	d1f4      	bne.n	2acb6 <bt_gatt_change_aware+0x18>
	if (!req) {
   2accc:	b90c      	cbnz	r4, 2acd2 <bt_gatt_change_aware+0x34>
		return false;
   2acce:	4626      	mov	r6, r4
   2acd0:	e7f1      	b.n	2acb6 <bt_gatt_change_aware+0x18>
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   2acd2:	2101      	movs	r1, #1
   2acd4:	4628      	mov	r0, r5
   2acd6:	f7ff fc2e 	bl	2a536 <atomic_test_and_clear_bit>
   2acda:	4606      	mov	r6, r0
   2acdc:	bb38      	cbnz	r0, 2ad2e <bt_gatt_change_aware+0x90>
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   2acde:	4638      	mov	r0, r7
   2ace0:	f7ff f9c8 	bl	2a074 <bt_att_fixed_chan_only>
   2ace4:	4606      	mov	r6, r0
   2ace6:	2800      	cmp	r0, #0
   2ace8:	d0e5      	beq.n	2acb6 <bt_gatt_change_aware+0x18>
   2acea:	4638      	mov	r0, r7
   2acec:	f7ff f9e1 	bl	2a0b2 <bt_att_out_of_sync_sent_on_fixed>
   2acf0:	4606      	mov	r6, r0
   2acf2:	2800      	cmp	r0, #0
   2acf4:	d0df      	beq.n	2acb6 <bt_gatt_change_aware+0x18>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2acf6:	f3bf 8f5b 	dmb	ish
   2acfa:	e855 3f00 	ldrex	r3, [r5]
   2acfe:	f023 0302 	bic.w	r3, r3, #2
   2ad02:	e845 3200 	strex	r2, r3, [r5]
   2ad06:	2a00      	cmp	r2, #0
   2ad08:	d1f7      	bne.n	2acfa <bt_gatt_change_aware+0x5c>
   2ad0a:	f3bf 8f5b 	dmb	ish
		bt_att_clear_out_of_sync_sent(conn);
   2ad0e:	4638      	mov	r0, r7
   2ad10:	f7ff f9b2 	bl	2a078 <bt_att_clear_out_of_sync_sent>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2ad14:	f3bf 8f5b 	dmb	ish
   2ad18:	e855 3f00 	ldrex	r3, [r5]
   2ad1c:	f043 0301 	orr.w	r3, r3, #1
   2ad20:	e845 3200 	strex	r2, r3, [r5]
   2ad24:	2a00      	cmp	r2, #0
   2ad26:	d1f7      	bne.n	2ad18 <bt_gatt_change_aware+0x7a>
   2ad28:	f3bf 8f5b 	dmb	ish
		return true;
   2ad2c:	e7c3      	b.n	2acb6 <bt_gatt_change_aware+0x18>
		bt_att_clear_out_of_sync_sent(conn);
   2ad2e:	4638      	mov	r0, r7
   2ad30:	f7ff f9a2 	bl	2a078 <bt_att_clear_out_of_sync_sent>
   2ad34:	f3bf 8f5b 	dmb	ish
   2ad38:	e855 3f00 	ldrex	r3, [r5]
   2ad3c:	f043 0301 	orr.w	r3, r3, #1
   2ad40:	e845 3200 	strex	r2, r3, [r5]
   2ad44:	2a00      	cmp	r2, #0
   2ad46:	d1f7      	bne.n	2ad38 <bt_gatt_change_aware+0x9a>
   2ad48:	f3bf 8f5b 	dmb	ish
		return true;
   2ad4c:	e7b3      	b.n	2acb6 <bt_gatt_change_aware+0x18>
		return true;
   2ad4e:	2601      	movs	r6, #1
   2ad50:	e7b1      	b.n	2acb6 <bt_gatt_change_aware+0x18>

0002ad52 <bt_smp_recv>:
{
   2ad52:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ad54:	b083      	sub	sp, #12
	struct bt_conn *conn = chan->conn;
   2ad56:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   2ad58:	f04f 32ff 	mov.w	r2, #4294967295
   2ad5c:	f04f 33ff 	mov.w	r3, #4294967295
   2ad60:	2100      	movs	r1, #0
   2ad62:	4608      	mov	r0, r1
   2ad64:	f7fe f9c2 	bl	290ec <bt_l2cap_create_pdu_timeout>
   2ad68:	4604      	mov	r4, r0
	return net_buf_simple_add(&buf->b, len);
   2ad6a:	f100 060c 	add.w	r6, r0, #12
   2ad6e:	2101      	movs	r1, #1
   2ad70:	4630      	mov	r0, r6
   2ad72:	f000 f98d 	bl	2b090 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   2ad76:	2505      	movs	r5, #5
   2ad78:	7005      	strb	r5, [r0, #0]
   2ad7a:	2101      	movs	r1, #1
   2ad7c:	4630      	mov	r0, r6
   2ad7e:	f000 f987 	bl	2b090 <net_buf_simple_add>
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   2ad82:	7005      	strb	r5, [r0, #0]
   2ad84:	2300      	movs	r3, #0
   2ad86:	9300      	str	r3, [sp, #0]
   2ad88:	4622      	mov	r2, r4
   2ad8a:	2106      	movs	r1, #6
   2ad8c:	4638      	mov	r0, r7
   2ad8e:	f7fe f9b2 	bl	290f6 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf)) {
   2ad92:	b910      	cbnz	r0, 2ad9a <bt_smp_recv+0x48>
}
   2ad94:	2000      	movs	r0, #0
   2ad96:	b003      	add	sp, #12
   2ad98:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(buf);
   2ad9a:	4620      	mov	r0, r4
   2ad9c:	f000 f931 	bl	2b002 <net_buf_unref>
   2ada0:	e7f8      	b.n	2ad94 <bt_smp_recv+0x42>

0002ada2 <bt_smp_sign>:
}
   2ada2:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2ada6:	4770      	bx	lr

0002ada8 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   2ada8:	2000      	movs	r0, #0
   2adaa:	4770      	bx	lr

0002adac <pool_get_uninit>:
	return offset / struct_size;
}

static inline struct net_buf *pool_get_uninit(struct net_buf_pool *pool,
					      uint16_t uninit_count)
{
   2adac:	b538      	push	{r3, r4, r5, lr}
   2adae:	4604      	mov	r4, r0
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   2adb0:	7f03      	ldrb	r3, [r0, #28]
   2adb2:	331b      	adds	r3, #27
   2adb4:	f023 0303 	bic.w	r3, r3, #3
				__alignof__(struct net_buf));
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   2adb8:	8b02      	ldrh	r2, [r0, #24]
   2adba:	1a52      	subs	r2, r2, r1
	struct net_buf *buf;

	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   2adbc:	6a85      	ldr	r5, [r0, #40]	; 0x28
   2adbe:	fb03 5502 	mla	r5, r3, r2, r5

	buf->pool_id = pool_id(pool);
   2adc2:	f7f5 f933 	bl	2002c <pool_id>
   2adc6:	72a8      	strb	r0, [r5, #10]
	buf->user_data_size = pool->user_data_size;
   2adc8:	7f23      	ldrb	r3, [r4, #28]
   2adca:	72eb      	strb	r3, [r5, #11]

	return buf;
}
   2adcc:	4628      	mov	r0, r5
   2adce:	bd38      	pop	{r3, r4, r5, pc}

0002add0 <fixed_data_unref>:
}

static void fixed_data_unref(struct net_buf *buf, uint8_t *data)
{
	/* Nothing needed for fixed-size data pools */
}
   2add0:	4770      	bx	lr

0002add2 <data_alloc>:
};

#endif /* CONFIG_HEAP_MEM_POOL_SIZE > 0 */

static uint8_t *data_alloc(struct net_buf *buf, size_t *size, k_timeout_t timeout)
{
   2add2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2add6:	4604      	mov	r4, r0
   2add8:	460d      	mov	r5, r1
   2adda:	4617      	mov	r7, r2
   2addc:	461e      	mov	r6, r3
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   2adde:	7a80      	ldrb	r0, [r0, #10]
   2ade0:	f7f5 f930 	bl	20044 <net_buf_pool_get>

	return pool->alloc->cb->alloc(buf, size, timeout);
   2ade4:	6a43      	ldr	r3, [r0, #36]	; 0x24
   2ade6:	681b      	ldr	r3, [r3, #0]
   2ade8:	f8d3 8000 	ldr.w	r8, [r3]
   2adec:	463a      	mov	r2, r7
   2adee:	4633      	mov	r3, r6
   2adf0:	4629      	mov	r1, r5
   2adf2:	4620      	mov	r0, r4
   2adf4:	47c0      	blx	r8
}
   2adf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002adfa <net_buf_destroy>:
{
   2adfa:	b510      	push	{r4, lr}
   2adfc:	4604      	mov	r4, r0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   2adfe:	7a80      	ldrb	r0, [r0, #10]
   2ae00:	f7f5 f920 	bl	20044 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   2ae04:	4621      	mov	r1, r4
   2ae06:	f002 f893 	bl	2cf30 <k_queue_prepend>
}
   2ae0a:	bd10      	pop	{r4, pc}

0002ae0c <data_unref>:

	return pool->alloc->cb->ref(buf, data);
}

static void data_unref(struct net_buf *buf, uint8_t *data)
{
   2ae0c:	b538      	push	{r3, r4, r5, lr}
   2ae0e:	4604      	mov	r4, r0
   2ae10:	460d      	mov	r5, r1
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   2ae12:	7a80      	ldrb	r0, [r0, #10]
   2ae14:	f7f5 f916 	bl	20044 <net_buf_pool_get>

	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   2ae18:	7a63      	ldrb	r3, [r4, #9]
   2ae1a:	f013 0f01 	tst.w	r3, #1
   2ae1e:	d105      	bne.n	2ae2c <data_unref+0x20>
		return;
	}

	pool->alloc->cb->unref(buf, data);
   2ae20:	6a43      	ldr	r3, [r0, #36]	; 0x24
   2ae22:	681b      	ldr	r3, [r3, #0]
   2ae24:	689b      	ldr	r3, [r3, #8]
   2ae26:	4629      	mov	r1, r5
   2ae28:	4620      	mov	r0, r4
   2ae2a:	4798      	blx	r3
}
   2ae2c:	bd38      	pop	{r3, r4, r5, pc}

0002ae2e <net_buf_id>:
{
   2ae2e:	b510      	push	{r4, lr}
   2ae30:	4604      	mov	r4, r0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   2ae32:	7a80      	ldrb	r0, [r0, #10]
   2ae34:	f7f5 f906 	bl	20044 <net_buf_pool_get>
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   2ae38:	7f03      	ldrb	r3, [r0, #28]
   2ae3a:	331b      	adds	r3, #27
   2ae3c:	f023 0303 	bic.w	r3, r3, #3
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   2ae40:	6a82      	ldr	r2, [r0, #40]	; 0x28
   2ae42:	1aa4      	subs	r4, r4, r2
}
   2ae44:	fbb4 f0f3 	udiv	r0, r4, r3
   2ae48:	bd10      	pop	{r4, pc}

0002ae4a <fixed_data_alloc>:
{
   2ae4a:	b570      	push	{r4, r5, r6, lr}
   2ae4c:	4604      	mov	r4, r0
   2ae4e:	460d      	mov	r5, r1
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   2ae50:	7a80      	ldrb	r0, [r0, #10]
   2ae52:	f7f5 f8f7 	bl	20044 <net_buf_pool_get>
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2ae56:	6a43      	ldr	r3, [r0, #36]	; 0x24
   2ae58:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   2ae5a:	682a      	ldr	r2, [r5, #0]
   2ae5c:	6819      	ldr	r1, [r3, #0]
   2ae5e:	428a      	cmp	r2, r1
   2ae60:	bf28      	it	cs
   2ae62:	460a      	movcs	r2, r1
   2ae64:	602a      	str	r2, [r5, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   2ae66:	685d      	ldr	r5, [r3, #4]
   2ae68:	681e      	ldr	r6, [r3, #0]
   2ae6a:	4620      	mov	r0, r4
   2ae6c:	f7ff ffdf 	bl	2ae2e <net_buf_id>
}
   2ae70:	fb00 5006 	mla	r0, r0, r6, r5
   2ae74:	bd70      	pop	{r4, r5, r6, pc}

0002ae76 <net_buf_reset>:
	buf->len  = 0U;
   2ae76:	2300      	movs	r3, #0
   2ae78:	8203      	strh	r3, [r0, #16]
	buf->data = buf->__buf;
   2ae7a:	6943      	ldr	r3, [r0, #20]
   2ae7c:	60c3      	str	r3, [r0, #12]
}
   2ae7e:	4770      	bx	lr

0002ae80 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   2ae80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2ae84:	b082      	sub	sp, #8
   2ae86:	4605      	mov	r5, r0
   2ae88:	9101      	str	r1, [sp, #4]
   2ae8a:	4616      	mov	r6, r2
   2ae8c:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   2ae8e:	4610      	mov	r0, r2
   2ae90:	4619      	mov	r1, r3
   2ae92:	f002 fc0e 	bl	2d6b2 <sys_clock_timeout_end_calc>
   2ae96:	4681      	mov	r9, r0
   2ae98:	468a      	mov	sl, r1
   2ae9a:	f04f 0240 	mov.w	r2, #64	; 0x40
   2ae9e:	f3ef 8311 	mrs	r3, BASEPRI
   2aea2:	f382 8812 	msr	BASEPRI_MAX, r2
   2aea6:	f3bf 8f6f 	isb	sy
   2aeaa:	461a      	mov	r2, r3
   2aeac:	4698      	mov	r8, r3
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   2aeae:	8b6b      	ldrh	r3, [r5, #26]
   2aeb0:	b393      	cbz	r3, 2af18 <net_buf_alloc_len+0x98>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   2aeb2:	8b2a      	ldrh	r2, [r5, #24]
   2aeb4:	4293      	cmp	r3, r2
   2aeb6:	d20b      	bcs.n	2aed0 <net_buf_alloc_len+0x50>
	return z_impl_k_queue_get(queue, timeout);
   2aeb8:	2200      	movs	r2, #0
   2aeba:	2300      	movs	r3, #0
   2aebc:	4628      	mov	r0, r5
   2aebe:	f7fa f949 	bl	25154 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   2aec2:	4604      	mov	r4, r0
   2aec4:	b120      	cbz	r0, 2aed0 <net_buf_alloc_len+0x50>
	__asm__ volatile(
   2aec6:	f388 8811 	msr	BASEPRI, r8
   2aeca:	f3bf 8f6f 	isb	sy
				k_spin_unlock(&pool->lock, key);
				goto success;
   2aece:	e00a      	b.n	2aee6 <net_buf_alloc_len+0x66>
			}
		}

		uninit_count = pool->uninit_count--;
   2aed0:	8b69      	ldrh	r1, [r5, #26]
   2aed2:	1e4b      	subs	r3, r1, #1
   2aed4:	836b      	strh	r3, [r5, #26]
   2aed6:	f388 8811 	msr	BASEPRI, r8
   2aeda:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&pool->lock, key);

		buf = pool_get_uninit(pool, uninit_count);
   2aede:	4628      	mov	r0, r5
   2aee0:	f7ff ff64 	bl	2adac <pool_get_uninit>
   2aee4:	4604      	mov	r4, r0
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   2aee6:	9b01      	ldr	r3, [sp, #4]
   2aee8:	b3a3      	cbz	r3, 2af54 <net_buf_alloc_len+0xd4>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   2aeea:	ea56 0307 	orrs.w	r3, r6, r7
   2aeee:	d005      	beq.n	2aefc <net_buf_alloc_len+0x7c>
   2aef0:	f1b7 3fff 	cmp.w	r7, #4294967295
   2aef4:	bf08      	it	eq
   2aef6:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   2aefa:	d11a      	bne.n	2af32 <net_buf_alloc_len+0xb2>
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   2aefc:	4632      	mov	r2, r6
   2aefe:	463b      	mov	r3, r7
   2af00:	a901      	add	r1, sp, #4
   2af02:	4620      	mov	r0, r4
   2af04:	f7ff ff65 	bl	2add2 <data_alloc>
   2af08:	4605      	mov	r5, r0
   2af0a:	6160      	str	r0, [r4, #20]
		if (!buf->__buf) {
   2af0c:	bb20      	cbnz	r0, 2af58 <net_buf_alloc_len+0xd8>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
   2af0e:	4620      	mov	r0, r4
   2af10:	f7ff ff73 	bl	2adfa <net_buf_destroy>
			return NULL;
   2af14:	462c      	mov	r4, r5
   2af16:	e029      	b.n	2af6c <net_buf_alloc_len+0xec>
   2af18:	f382 8811 	msr	BASEPRI, r2
   2af1c:	f3bf 8f6f 	isb	sy
   2af20:	4632      	mov	r2, r6
   2af22:	463b      	mov	r3, r7
   2af24:	4628      	mov	r0, r5
   2af26:	f7fa f915 	bl	25154 <z_impl_k_queue_get>
	if (!buf) {
   2af2a:	4604      	mov	r4, r0
   2af2c:	2800      	cmp	r0, #0
   2af2e:	d1da      	bne.n	2aee6 <net_buf_alloc_len+0x66>
   2af30:	e01c      	b.n	2af6c <net_buf_alloc_len+0xec>
			int64_t remaining = end - sys_clock_tick_get();
   2af32:	f7fb f8a9 	bl	26088 <sys_clock_tick_get>
   2af36:	ebb9 0900 	subs.w	r9, r9, r0
   2af3a:	eb6a 0a01 	sbc.w	sl, sl, r1
			if (remaining <= 0) {
   2af3e:	f1b9 0f01 	cmp.w	r9, #1
   2af42:	f17a 0300 	sbcs.w	r3, sl, #0
   2af46:	db02      	blt.n	2af4e <net_buf_alloc_len+0xce>
				timeout = Z_TIMEOUT_TICKS(remaining);
   2af48:	464e      	mov	r6, r9
   2af4a:	4657      	mov	r7, sl
   2af4c:	e7d6      	b.n	2aefc <net_buf_alloc_len+0x7c>
				timeout = K_NO_WAIT;
   2af4e:	2600      	movs	r6, #0
   2af50:	4637      	mov	r7, r6
   2af52:	e7d3      	b.n	2aefc <net_buf_alloc_len+0x7c>

#if __ASSERT_ON
		NET_BUF_ASSERT(req_size <= size);
#endif
	} else {
		buf->__buf = NULL;
   2af54:	2300      	movs	r3, #0
   2af56:	6163      	str	r3, [r4, #20]
	}

	buf->ref   = 1U;
   2af58:	2301      	movs	r3, #1
   2af5a:	7223      	strb	r3, [r4, #8]
	buf->flags = 0U;
   2af5c:	2300      	movs	r3, #0
   2af5e:	7263      	strb	r3, [r4, #9]
	buf->frags = NULL;
   2af60:	6063      	str	r3, [r4, #4]
	buf->size  = size;
   2af62:	9b01      	ldr	r3, [sp, #4]
   2af64:	8263      	strh	r3, [r4, #18]
	net_buf_reset(buf);
   2af66:	4620      	mov	r0, r4
   2af68:	f7ff ff85 	bl	2ae76 <net_buf_reset>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   2af6c:	4620      	mov	r0, r4
   2af6e:	b002      	add	sp, #8
   2af70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002af74 <net_buf_alloc_fixed>:
				       line);
}
#else
struct net_buf *net_buf_alloc_fixed(struct net_buf_pool *pool,
				    k_timeout_t timeout)
{
   2af74:	b508      	push	{r3, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2af76:	6a41      	ldr	r1, [r0, #36]	; 0x24
   2af78:	6849      	ldr	r1, [r1, #4]

	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   2af7a:	6809      	ldr	r1, [r1, #0]
   2af7c:	f7ff ff80 	bl	2ae80 <net_buf_alloc_len>
}
   2af80:	bd08      	pop	{r3, pc}

0002af82 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
   2af82:	b508      	push	{r3, lr}
   2af84:	f7fa f8e6 	bl	25154 <z_impl_k_queue_get>
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	return buf;
}
   2af88:	bd08      	pop	{r3, pc}

0002af8a <net_buf_simple_init_with_data>:

void net_buf_simple_init_with_data(struct net_buf_simple *buf,
				   void *data, size_t size)
{
	buf->__buf = data;
   2af8a:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   2af8c:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   2af8e:	b292      	uxth	r2, r2
   2af90:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   2af92:	8082      	strh	r2, [r0, #4]
}
   2af94:	4770      	bx	lr

0002af96 <net_buf_simple_reserve>:
{
	__ASSERT_NO_MSG(buf);
	__ASSERT_NO_MSG(buf->len == 0U);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   2af96:	6883      	ldr	r3, [r0, #8]
   2af98:	440b      	add	r3, r1
   2af9a:	6003      	str	r3, [r0, #0]
}
   2af9c:	4770      	bx	lr

0002af9e <net_buf_slist_put>:
	__asm__ volatile(
   2af9e:	f04f 0240 	mov.w	r2, #64	; 0x40
   2afa2:	f3ef 8311 	mrs	r3, BASEPRI
   2afa6:	f382 8812 	msr	BASEPRI_MAX, r2
   2afaa:	f3bf 8f6f 	isb	sy
	parent->next = child;
   2afae:	2200      	movs	r2, #0
   2afb0:	600a      	str	r2, [r1, #0]
	return list->tail;
   2afb2:	6842      	ldr	r2, [r0, #4]
Z_GENLIST_APPEND(slist, snode)
   2afb4:	b132      	cbz	r2, 2afc4 <net_buf_slist_put+0x26>
	parent->next = child;
   2afb6:	6011      	str	r1, [r2, #0]
	list->tail = node;
   2afb8:	6041      	str	r1, [r0, #4]
	__asm__ volatile(
   2afba:	f383 8811 	msr	BASEPRI, r3
   2afbe:	f3bf 8f6f 	isb	sy
	__ASSERT_NO_MSG(buf);

	key = k_spin_lock(&net_buf_slist_lock);
	sys_slist_append(list, &buf->node);
	k_spin_unlock(&net_buf_slist_lock, key);
}
   2afc2:	4770      	bx	lr
   2afc4:	6041      	str	r1, [r0, #4]
	list->head = node;
   2afc6:	6001      	str	r1, [r0, #0]
}
   2afc8:	e7f7      	b.n	2afba <net_buf_slist_put+0x1c>

0002afca <net_buf_slist_get>:

struct net_buf *net_buf_slist_get(sys_slist_t *list)
{
   2afca:	4603      	mov	r3, r0
	__asm__ volatile(
   2afcc:	f04f 0140 	mov.w	r1, #64	; 0x40
   2afd0:	f3ef 8211 	mrs	r2, BASEPRI
   2afd4:	f381 8812 	msr	BASEPRI_MAX, r1
   2afd8:	f3bf 8f6f 	isb	sy
	return list->head;
   2afdc:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   2afde:	b128      	cbz	r0, 2afec <net_buf_slist_get+0x22>
	return node->next;
   2afe0:	6801      	ldr	r1, [r0, #0]
	list->head = node;
   2afe2:	6019      	str	r1, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2afe4:	f8d3 c004 	ldr.w	ip, [r3, #4]
   2afe8:	4560      	cmp	r0, ip
   2afea:	d004      	beq.n	2aff6 <net_buf_slist_get+0x2c>
	__asm__ volatile(
   2afec:	f382 8811 	msr	BASEPRI, r2
   2aff0:	f3bf 8f6f 	isb	sy
	buf = (void *)sys_slist_get(list);

	k_spin_unlock(&net_buf_slist_lock, key);

	return buf;
}
   2aff4:	4770      	bx	lr
	list->tail = node;
   2aff6:	6059      	str	r1, [r3, #4]
}
   2aff8:	e7f8      	b.n	2afec <net_buf_slist_get+0x22>

0002affa <net_buf_put>:

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   2affa:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(fifo);
	__ASSERT_NO_MSG(buf);

	k_fifo_put(fifo, buf);
   2affc:	f001 ff8c 	bl	2cf18 <k_queue_append>
}
   2b000:	bd08      	pop	{r3, pc}

0002b002 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   2b002:	b538      	push	{r3, r4, r5, lr}
   2b004:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf);

	while (buf) {
   2b006:	e00a      	b.n	2b01e <net_buf_unref+0x1c>
		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
		}

		buf->data = NULL;
   2b008:	2300      	movs	r3, #0
   2b00a:	60e3      	str	r3, [r4, #12]
		buf->frags = NULL;
   2b00c:	6063      	str	r3, [r4, #4]

		pool = net_buf_pool_get(buf->pool_id);
   2b00e:	7aa0      	ldrb	r0, [r4, #10]
   2b010:	f7f5 f818 	bl	20044 <net_buf_pool_get>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   2b014:	6a03      	ldr	r3, [r0, #32]
   2b016:	b193      	cbz	r3, 2b03e <net_buf_unref+0x3c>
			pool->destroy(buf);
   2b018:	4620      	mov	r0, r4
   2b01a:	4798      	blx	r3
{
   2b01c:	462c      	mov	r4, r5
	while (buf) {
   2b01e:	b194      	cbz	r4, 2b046 <net_buf_unref+0x44>
		struct net_buf *frags = buf->frags;
   2b020:	6865      	ldr	r5, [r4, #4]
		if (--buf->ref > 0) {
   2b022:	7a23      	ldrb	r3, [r4, #8]
   2b024:	3b01      	subs	r3, #1
   2b026:	b2db      	uxtb	r3, r3
   2b028:	7223      	strb	r3, [r4, #8]
   2b02a:	b963      	cbnz	r3, 2b046 <net_buf_unref+0x44>
		if (buf->__buf) {
   2b02c:	6961      	ldr	r1, [r4, #20]
   2b02e:	2900      	cmp	r1, #0
   2b030:	d0ea      	beq.n	2b008 <net_buf_unref+0x6>
			data_unref(buf, buf->__buf);
   2b032:	4620      	mov	r0, r4
   2b034:	f7ff feea 	bl	2ae0c <data_unref>
			buf->__buf = NULL;
   2b038:	2300      	movs	r3, #0
   2b03a:	6163      	str	r3, [r4, #20]
   2b03c:	e7e4      	b.n	2b008 <net_buf_unref+0x6>
		} else {
			net_buf_destroy(buf);
   2b03e:	4620      	mov	r0, r4
   2b040:	f7ff fedb 	bl	2adfa <net_buf_destroy>
   2b044:	e7ea      	b.n	2b01c <net_buf_unref+0x1a>
		}

		buf = frags;
	}
}
   2b046:	bd38      	pop	{r3, r4, r5, pc}

0002b048 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   2b048:	7a02      	ldrb	r2, [r0, #8]
   2b04a:	3201      	adds	r2, #1
   2b04c:	7202      	strb	r2, [r0, #8]
	return buf;
}
   2b04e:	4770      	bx	lr

0002b050 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   2b050:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   2b052:	4618      	mov	r0, r3
   2b054:	685b      	ldr	r3, [r3, #4]
   2b056:	2b00      	cmp	r3, #0
   2b058:	d1fb      	bne.n	2b052 <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   2b05a:	4770      	bx	lr

0002b05c <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   2b05c:	b570      	push	{r4, r5, r6, lr}
   2b05e:	4604      	mov	r4, r0
   2b060:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   2b062:	6846      	ldr	r6, [r0, #4]
   2b064:	b11e      	cbz	r6, 2b06e <net_buf_frag_insert+0x12>
		net_buf_frag_last(frag)->frags = parent->frags;
   2b066:	4608      	mov	r0, r1
   2b068:	f7ff fff2 	bl	2b050 <net_buf_frag_last>
   2b06c:	6046      	str	r6, [r0, #4]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   2b06e:	6065      	str	r5, [r4, #4]
}
   2b070:	bd70      	pop	{r4, r5, r6, pc}

0002b072 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   2b072:	b538      	push	{r3, r4, r5, lr}
   2b074:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(frag);

	if (!head) {
   2b076:	b138      	cbz	r0, 2b088 <net_buf_frag_add+0x16>
   2b078:	4604      	mov	r4, r0
		return net_buf_ref(frag);
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);
   2b07a:	f7ff ffe9 	bl	2b050 <net_buf_frag_last>
   2b07e:	4629      	mov	r1, r5
   2b080:	f7ff ffec 	bl	2b05c <net_buf_frag_insert>

	return head;
   2b084:	4620      	mov	r0, r4
}
   2b086:	bd38      	pop	{r3, r4, r5, pc}
		return net_buf_ref(frag);
   2b088:	4608      	mov	r0, r1
   2b08a:	f7ff ffdd 	bl	2b048 <net_buf_ref>
   2b08e:	e7fa      	b.n	2b086 <net_buf_frag_add+0x14>

0002b090 <net_buf_simple_add>:
	return buf->data + buf->len;
   2b090:	6802      	ldr	r2, [r0, #0]
   2b092:	8883      	ldrh	r3, [r0, #4]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   2b094:	4419      	add	r1, r3
   2b096:	8081      	strh	r1, [r0, #4]
	return tail;
}
   2b098:	18d0      	adds	r0, r2, r3
   2b09a:	4770      	bx	lr

0002b09c <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   2b09c:	b538      	push	{r3, r4, r5, lr}
   2b09e:	460d      	mov	r5, r1
   2b0a0:	4614      	mov	r4, r2
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   2b0a2:	4611      	mov	r1, r2
   2b0a4:	f7ff fff4 	bl	2b090 <net_buf_simple_add>
   2b0a8:	4622      	mov	r2, r4
   2b0aa:	4629      	mov	r1, r5
   2b0ac:	f7fd fae9 	bl	28682 <memcpy>
}
   2b0b0:	bd38      	pop	{r3, r4, r5, pc}

0002b0b2 <net_buf_simple_add_le16>:

	return u8;
}

void net_buf_simple_add_le16(struct net_buf_simple *buf, uint16_t val)
{
   2b0b2:	b510      	push	{r4, lr}
   2b0b4:	460c      	mov	r4, r1
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
   2b0b6:	2102      	movs	r1, #2
   2b0b8:	f7ff ffea 	bl	2b090 <net_buf_simple_add>
	dst[0] = val;
   2b0bc:	7004      	strb	r4, [r0, #0]
	dst[1] = val >> 8;
   2b0be:	0a24      	lsrs	r4, r4, #8
   2b0c0:	7044      	strb	r4, [r0, #1]
}
   2b0c2:	bd10      	pop	{r4, pc}

0002b0c4 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   2b0c4:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   2b0c6:	6800      	ldr	r0, [r0, #0]
   2b0c8:	1a40      	subs	r0, r0, r1
   2b0ca:	6018      	str	r0, [r3, #0]
	buf->len += len;
   2b0cc:	889a      	ldrh	r2, [r3, #4]
   2b0ce:	440a      	add	r2, r1
   2b0d0:	809a      	strh	r2, [r3, #4]
	return buf->data;
}
   2b0d2:	4770      	bx	lr

0002b0d4 <net_buf_simple_pull>:

	sys_put_be64(val, net_buf_simple_push(buf, sizeof(val)));
}

void *net_buf_simple_pull(struct net_buf_simple *buf, size_t len)
{
   2b0d4:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   2b0d6:	8882      	ldrh	r2, [r0, #4]
   2b0d8:	1a52      	subs	r2, r2, r1
   2b0da:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   2b0dc:	6800      	ldr	r0, [r0, #0]
   2b0de:	4408      	add	r0, r1
   2b0e0:	6018      	str	r0, [r3, #0]
}
   2b0e2:	4770      	bx	lr

0002b0e4 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   2b0e4:	4603      	mov	r3, r0
	void *data = buf->data;
   2b0e6:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   2b0e8:	889a      	ldrh	r2, [r3, #4]
   2b0ea:	1a52      	subs	r2, r2, r1
   2b0ec:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   2b0ee:	4401      	add	r1, r0
   2b0f0:	6019      	str	r1, [r3, #0]

	return data;
}
   2b0f2:	4770      	bx	lr

0002b0f4 <net_buf_simple_pull_u8>:

uint8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   2b0f4:	b510      	push	{r4, lr}
	uint8_t val;

	val = buf->data[0];
   2b0f6:	6803      	ldr	r3, [r0, #0]
   2b0f8:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   2b0fa:	2101      	movs	r1, #1
   2b0fc:	f7ff ffea 	bl	2b0d4 <net_buf_simple_pull>

	return val;
}
   2b100:	4620      	mov	r0, r4
   2b102:	bd10      	pop	{r4, pc}

0002b104 <net_buf_simple_pull_le16>:

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   2b104:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   2b106:	6803      	ldr	r3, [r0, #0]
   2b108:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   2b10a:	2102      	movs	r1, #2
   2b10c:	f7ff ffe2 	bl	2b0d4 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   2b110:	4620      	mov	r0, r4
   2b112:	bd10      	pop	{r4, pc}

0002b114 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   2b114:	6802      	ldr	r2, [r0, #0]
   2b116:	6880      	ldr	r0, [r0, #8]
}
   2b118:	1a10      	subs	r0, r2, r0
   2b11a:	4770      	bx	lr

0002b11c <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
   2b11c:	b538      	push	{r3, r4, r5, lr}
   2b11e:	4604      	mov	r4, r0
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   2b120:	88c5      	ldrh	r5, [r0, #6]
   2b122:	f7ff fff7 	bl	2b114 <net_buf_simple_headroom>
   2b126:	1a2d      	subs	r5, r5, r0
   2b128:	88a0      	ldrh	r0, [r4, #4]
}
   2b12a:	1a28      	subs	r0, r5, r0
   2b12c:	bd38      	pop	{r3, r4, r5, pc}

0002b12e <nrf_clock_is_running>:

NRF_STATIC_INLINE bool nrf_clock_is_running(NRF_CLOCK_Type const * p_reg,
                                            nrf_clock_domain_t     domain,
                                            void *                 p_clk_src)
{
    switch (domain)
   2b12e:	b119      	cbz	r1, 2b138 <nrf_clock_is_running+0xa>
   2b130:	2901      	cmp	r1, #1
   2b132:	d00e      	beq.n	2b152 <nrf_clock_is_running+0x24>
   2b134:	2000      	movs	r0, #0
   2b136:	4770      	bx	lr
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
            if (p_clk_src != NULL)
   2b138:	b122      	cbz	r2, 2b144 <nrf_clock_is_running+0x16>
            {
                (*(nrf_clock_lfclk_t *)p_clk_src) =
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   2b13a:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   2b13e:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   2b142:	6013      	str	r3, [r2, #0]
            }
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   2b144:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
   2b148:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   2b14c:	d10e      	bne.n	2b16c <nrf_clock_is_running+0x3e>
#endif
        default:
            NRFX_ASSERT(0);
            return false;
    }
    return false;
   2b14e:	2000      	movs	r0, #0
   2b150:	4770      	bx	lr
            if (p_clk_src != NULL)
   2b152:	b122      	cbz	r2, 2b15e <nrf_clock_is_running+0x30>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   2b154:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
   2b158:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   2b15c:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   2b15e:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
   2b162:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   2b166:	d103      	bne.n	2b170 <nrf_clock_is_running+0x42>
    return false;
   2b168:	2000      	movs	r0, #0
   2b16a:	4770      	bx	lr
                return true;
   2b16c:	2001      	movs	r0, #1
   2b16e:	4770      	bx	lr
                return true;
   2b170:	2001      	movs	r0, #1
}
   2b172:	4770      	bx	lr

0002b174 <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
   2b174:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   2b176:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   2b17a:	0089      	lsls	r1, r1, #2
   2b17c:	3138      	adds	r1, #56	; 0x38
}
   2b17e:	4408      	add	r0, r1
   2b180:	4770      	bx	lr

0002b182 <get_sub_config>:
	const struct nrf_clock_control_config *config =
   2b182:	6840      	ldr	r0, [r0, #4]
	return &config->subsys[type];
   2b184:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
   2b188:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   2b18c:	4770      	bx	lr

0002b18e <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
   2b18e:	6900      	ldr	r0, [r0, #16]
	return &data->mgr[type];
   2b190:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
}
   2b194:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   2b198:	4770      	bx	lr

0002b19a <get_status>:
{
   2b19a:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
   2b19c:	b2c9      	uxtb	r1, r1
   2b19e:	f7ff ffe9 	bl	2b174 <get_sub_data>
   2b1a2:	6880      	ldr	r0, [r0, #8]
}
   2b1a4:	f000 0007 	and.w	r0, r0, #7
   2b1a8:	bd08      	pop	{r3, pc}

0002b1aa <set_off_state>:
	__asm__ volatile(
   2b1aa:	f04f 0340 	mov.w	r3, #64	; 0x40
   2b1ae:	f3ef 8211 	mrs	r2, BASEPRI
   2b1b2:	f383 8812 	msr	BASEPRI_MAX, r3
   2b1b6:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2b1ba:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   2b1bc:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   2b1c0:	d001      	beq.n	2b1c6 <set_off_state+0x1c>
   2b1c2:	428b      	cmp	r3, r1
   2b1c4:	d107      	bne.n	2b1d6 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   2b1c6:	2301      	movs	r3, #1
   2b1c8:	6003      	str	r3, [r0, #0]
	int err = 0;
   2b1ca:	2000      	movs	r0, #0
	__asm__ volatile(
   2b1cc:	f382 8811 	msr	BASEPRI, r2
   2b1d0:	f3bf 8f6f 	isb	sy
}
   2b1d4:	4770      	bx	lr
		err = -EPERM;
   2b1d6:	f04f 30ff 	mov.w	r0, #4294967295
   2b1da:	e7f7      	b.n	2b1cc <set_off_state+0x22>

0002b1dc <set_starting_state>:
	__asm__ volatile(
   2b1dc:	f04f 0340 	mov.w	r3, #64	; 0x40
   2b1e0:	f3ef 8211 	mrs	r2, BASEPRI
   2b1e4:	f383 8812 	msr	BASEPRI_MAX, r3
   2b1e8:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2b1ec:	6803      	ldr	r3, [r0, #0]
   2b1ee:	f003 0cc0 	and.w	ip, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   2b1f2:	f003 0307 	and.w	r3, r3, #7
   2b1f6:	2b01      	cmp	r3, #1
   2b1f8:	d008      	beq.n	2b20c <set_starting_state+0x30>
	} else if (current_ctx != ctx) {
   2b1fa:	458c      	cmp	ip, r1
   2b1fc:	d009      	beq.n	2b212 <set_starting_state+0x36>
		err = -EPERM;
   2b1fe:	f04f 30ff 	mov.w	r0, #4294967295
	__asm__ volatile(
   2b202:	f382 8811 	msr	BASEPRI, r2
   2b206:	f3bf 8f6f 	isb	sy
}
   2b20a:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   2b20c:	6001      	str	r1, [r0, #0]
	int err = 0;
   2b20e:	2000      	movs	r0, #0
   2b210:	e7f7      	b.n	2b202 <set_starting_state+0x26>
		err = -EALREADY;
   2b212:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2b216:	e7f4      	b.n	2b202 <set_starting_state+0x26>

0002b218 <set_on_state>:
	__asm__ volatile(
   2b218:	f04f 0340 	mov.w	r3, #64	; 0x40
   2b21c:	f3ef 8211 	mrs	r2, BASEPRI
   2b220:	f383 8812 	msr	BASEPRI_MAX, r3
   2b224:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   2b228:	6803      	ldr	r3, [r0, #0]
   2b22a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2b22e:	f043 0302 	orr.w	r3, r3, #2
   2b232:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   2b234:	f382 8811 	msr	BASEPRI, r2
   2b238:	f3bf 8f6f 	isb	sy
}
   2b23c:	4770      	bx	lr

0002b23e <clkstarted_handle>:
{
   2b23e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b240:	4606      	mov	r6, r0
   2b242:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   2b244:	f7ff ff96 	bl	2b174 <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
   2b248:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
   2b24a:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
   2b24c:	2300      	movs	r3, #0
   2b24e:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
   2b252:	f7ff ffe1 	bl	2b218 <set_on_state>
	if (callback) {
   2b256:	b11d      	cbz	r5, 2b260 <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
   2b258:	463a      	mov	r2, r7
   2b25a:	4621      	mov	r1, r4
   2b25c:	4630      	mov	r0, r6
   2b25e:	47a8      	blx	r5
}
   2b260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002b262 <stop>:
{
   2b262:	b570      	push	{r4, r5, r6, lr}
   2b264:	4606      	mov	r6, r0
   2b266:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   2b268:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   2b26a:	4621      	mov	r1, r4
   2b26c:	f7ff ff82 	bl	2b174 <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
   2b270:	4629      	mov	r1, r5
   2b272:	3008      	adds	r0, #8
   2b274:	f7ff ff99 	bl	2b1aa <set_off_state>
	if (err < 0) {
   2b278:	2800      	cmp	r0, #0
   2b27a:	db06      	blt.n	2b28a <stop+0x28>
	get_sub_config(dev, type)->stop();
   2b27c:	4621      	mov	r1, r4
   2b27e:	4630      	mov	r0, r6
   2b280:	f7ff ff7f 	bl	2b182 <get_sub_config>
   2b284:	6843      	ldr	r3, [r0, #4]
   2b286:	4798      	blx	r3
	return 0;
   2b288:	2000      	movs	r0, #0
}
   2b28a:	bd70      	pop	{r4, r5, r6, pc}

0002b28c <api_stop>:
{
   2b28c:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
   2b28e:	2280      	movs	r2, #128	; 0x80
   2b290:	f7ff ffe7 	bl	2b262 <stop>
}
   2b294:	bd08      	pop	{r3, pc}

0002b296 <async_start>:
{
   2b296:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b29a:	4606      	mov	r6, r0
   2b29c:	4690      	mov	r8, r2
   2b29e:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   2b2a0:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   2b2a2:	4629      	mov	r1, r5
   2b2a4:	f7ff ff66 	bl	2b174 <get_sub_data>
   2b2a8:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
   2b2aa:	9906      	ldr	r1, [sp, #24]
   2b2ac:	3008      	adds	r0, #8
   2b2ae:	f7ff ff95 	bl	2b1dc <set_starting_state>
	if (err < 0) {
   2b2b2:	2800      	cmp	r0, #0
   2b2b4:	db09      	blt.n	2b2ca <async_start+0x34>
	subdata->cb = cb;
   2b2b6:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
   2b2ba:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
   2b2bc:	4629      	mov	r1, r5
   2b2be:	4630      	mov	r0, r6
   2b2c0:	f7ff ff5f 	bl	2b182 <get_sub_config>
   2b2c4:	6803      	ldr	r3, [r0, #0]
   2b2c6:	4798      	blx	r3
	return 0;
   2b2c8:	2000      	movs	r0, #0
}
   2b2ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002b2ce <api_start>:
{
   2b2ce:	b510      	push	{r4, lr}
   2b2d0:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
   2b2d2:	2480      	movs	r4, #128	; 0x80
   2b2d4:	9400      	str	r4, [sp, #0]
   2b2d6:	f7ff ffde 	bl	2b296 <async_start>
}
   2b2da:	b002      	add	sp, #8
   2b2dc:	bd10      	pop	{r4, pc}

0002b2de <onoff_started_callback>:
{
   2b2de:	b510      	push	{r4, lr}
   2b2e0:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
   2b2e2:	b2c9      	uxtb	r1, r1
   2b2e4:	f7ff ff53 	bl	2b18e <get_onoff_manager>
	notify(mgr, 0);
   2b2e8:	2100      	movs	r1, #0
   2b2ea:	47a0      	blx	r4
}
   2b2ec:	bd10      	pop	{r4, pc}

0002b2ee <hfclk_start>:
{
   2b2ee:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   2b2f0:	2001      	movs	r0, #1
   2b2f2:	f7f8 f9f1 	bl	236d8 <nrfx_clock_start>
}
   2b2f6:	bd08      	pop	{r3, pc}

0002b2f8 <lfclk_start>:
{
   2b2f8:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   2b2fa:	2000      	movs	r0, #0
   2b2fc:	f7f8 f9ec 	bl	236d8 <nrfx_clock_start>
}
   2b300:	bd08      	pop	{r3, pc}

0002b302 <hfclk_stop>:
{
   2b302:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   2b304:	2001      	movs	r0, #1
   2b306:	f001 fa9a 	bl	2c83e <nrfx_clock_stop>
}
   2b30a:	bd08      	pop	{r3, pc}

0002b30c <lfclk_stop>:
{
   2b30c:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   2b30e:	2000      	movs	r0, #0
   2b310:	f001 fa95 	bl	2c83e <nrfx_clock_stop>
}
   2b314:	bd08      	pop	{r3, pc}

0002b316 <k_msleep>:
{
   2b316:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   2b318:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   2b31c:	17c1      	asrs	r1, r0, #31
   2b31e:	03c9      	lsls	r1, r1, #15
   2b320:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   2b324:	03c0      	lsls	r0, r0, #15
   2b326:	f240 33e7 	movw	r3, #999	; 0x3e7
   2b32a:	18c0      	adds	r0, r0, r3
   2b32c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2b330:	f04f 0300 	mov.w	r3, #0
   2b334:	f141 0100 	adc.w	r1, r1, #0
   2b338:	f7d4 fee2 	bl	100 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   2b33c:	f7fa fca4 	bl	25c88 <z_impl_k_sleep>
}
   2b340:	bd08      	pop	{r3, pc}

0002b342 <blocking_start_callback>:
{
   2b342:	b508      	push	{r3, lr}
   2b344:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   2b346:	f7f9 ff43 	bl	251d0 <z_impl_k_sem_give>
}
   2b34a:	bd08      	pop	{r3, pc}

0002b34c <k_msleep>:
{
   2b34c:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   2b34e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   2b352:	17c1      	asrs	r1, r0, #31
   2b354:	03c9      	lsls	r1, r1, #15
   2b356:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   2b35a:	03c0      	lsls	r0, r0, #15
   2b35c:	f240 33e7 	movw	r3, #999	; 0x3e7
   2b360:	18c0      	adds	r0, r0, r3
   2b362:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2b366:	f04f 0300 	mov.w	r3, #0
   2b36a:	f141 0100 	adc.w	r1, r1, #0
   2b36e:	f7d4 fec7 	bl	100 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   2b372:	f7fa fc89 	bl	25c88 <z_impl_k_sleep>
}
   2b376:	bd08      	pop	{r3, pc}

0002b378 <wait>:
{
   2b378:	b508      	push	{r3, lr}
	if (!IS_ENABLED(CONFIG_MULTITHREADING) || k_is_in_isr()) {
   2b37a:	f001 fcd2 	bl	2cd22 <k_is_in_isr>
   2b37e:	b100      	cbz	r0, 2b382 <wait+0xa>
}
   2b380:	bd08      	pop	{r3, pc}
		k_msleep(CONFIG_RTT_TX_RETRY_DELAY_MS);
   2b382:	2002      	movs	r0, #2
   2b384:	f7ff ffe2 	bl	2b34c <k_msleep>
}
   2b388:	e7fa      	b.n	2b380 <wait+0x8>

0002b38a <sys_slist_remove>:
Z_GENLIST_REMOVE(slist, snode)
   2b38a:	460b      	mov	r3, r1
   2b38c:	b139      	cbz	r1, 2b39e <sys_slist_remove+0x14>
	return node->next;
   2b38e:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
   2b390:	6019      	str	r1, [r3, #0]
	return list->tail;
   2b392:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   2b394:	428a      	cmp	r2, r1
   2b396:	d009      	beq.n	2b3ac <sys_slist_remove+0x22>
	parent->next = child;
   2b398:	2300      	movs	r3, #0
   2b39a:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2b39c:	4770      	bx	lr
	return node->next;
   2b39e:	6813      	ldr	r3, [r2, #0]
	list->head = node;
   2b3a0:	6003      	str	r3, [r0, #0]
	return list->tail;
   2b3a2:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   2b3a4:	428a      	cmp	r2, r1
   2b3a6:	d1f7      	bne.n	2b398 <sys_slist_remove+0xe>
	list->tail = node;
   2b3a8:	6043      	str	r3, [r0, #4]
}
   2b3aa:	e7f5      	b.n	2b398 <sys_slist_remove+0xe>
	list->tail = node;
   2b3ac:	6043      	str	r3, [r0, #4]
}
   2b3ae:	e7f3      	b.n	2b398 <sys_slist_remove+0xe>

0002b3b0 <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2b3b0:	b508      	push	{r3, lr}
   2b3b2:	460a      	mov	r2, r1
	return list->head;
   2b3b4:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2b3b6:	2100      	movs	r1, #0
   2b3b8:	e001      	b.n	2b3be <sys_slist_find_and_remove+0xe>
   2b3ba:	4619      	mov	r1, r3
   2b3bc:	681b      	ldr	r3, [r3, #0]
   2b3be:	b12b      	cbz	r3, 2b3cc <sys_slist_find_and_remove+0x1c>
   2b3c0:	4293      	cmp	r3, r2
   2b3c2:	d1fa      	bne.n	2b3ba <sys_slist_find_and_remove+0xa>
   2b3c4:	f7ff ffe1 	bl	2b38a <sys_slist_remove>
   2b3c8:	2001      	movs	r0, #1
   2b3ca:	e000      	b.n	2b3ce <sys_slist_find_and_remove+0x1e>
   2b3cc:	2000      	movs	r0, #0
   2b3ce:	bd08      	pop	{r3, pc}

0002b3d0 <gpio_manage_callback>:
 * @return 0 on success, negative errno otherwise.
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
   2b3d0:	b570      	push	{r4, r5, r6, lr}
   2b3d2:	4604      	mov	r4, r0
   2b3d4:	460d      	mov	r5, r1
   2b3d6:	4616      	mov	r6, r2
	return list->head;
   2b3d8:	6803      	ldr	r3, [r0, #0]
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
   2b3da:	b133      	cbz	r3, 2b3ea <gpio_manage_callback+0x1a>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
   2b3dc:	f7ff ffe8 	bl	2b3b0 <sys_slist_find_and_remove>
   2b3e0:	b970      	cbnz	r0, 2b400 <gpio_manage_callback+0x30>
			if (!set) {
   2b3e2:	b91e      	cbnz	r6, 2b3ec <gpio_manage_callback+0x1c>
				return -EINVAL;
   2b3e4:	f06f 0015 	mvn.w	r0, #21
   2b3e8:	e006      	b.n	2b3f8 <gpio_manage_callback+0x28>
			}
		}
	} else if (!set) {
   2b3ea:	b132      	cbz	r2, 2b3fa <gpio_manage_callback+0x2a>
   2b3ec:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
   2b3ee:	602b      	str	r3, [r5, #0]
	list->head = node;
   2b3f0:	6025      	str	r5, [r4, #0]
	return list->tail;
   2b3f2:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   2b3f4:	b143      	cbz	r3, 2b408 <gpio_manage_callback+0x38>

	if (set) {
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   2b3f6:	2000      	movs	r0, #0
}
   2b3f8:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   2b3fa:	f06f 0015 	mvn.w	r0, #21
   2b3fe:	e7fb      	b.n	2b3f8 <gpio_manage_callback+0x28>
	if (set) {
   2b400:	2e00      	cmp	r6, #0
   2b402:	d1f3      	bne.n	2b3ec <gpio_manage_callback+0x1c>
	return 0;
   2b404:	2000      	movs	r0, #0
   2b406:	e7f7      	b.n	2b3f8 <gpio_manage_callback+0x28>
	list->tail = node;
   2b408:	6065      	str	r5, [r4, #4]
   2b40a:	2000      	movs	r0, #0
}
   2b40c:	e7f4      	b.n	2b3f8 <gpio_manage_callback+0x28>

0002b40e <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					const struct device *port,
					uint32_t pins)
{
   2b40e:	b570      	push	{r4, r5, r6, lr}
   2b410:	460e      	mov	r6, r1
   2b412:	4615      	mov	r5, r2
	return list->head;
   2b414:	6801      	ldr	r1, [r0, #0]
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   2b416:	b121      	cbz	r1, 2b422 <gpio_fire_callbacks+0x14>
	return node->next;
   2b418:	680c      	ldr	r4, [r1, #0]
   2b41a:	b13c      	cbz	r4, 2b42c <gpio_fire_callbacks+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2b41c:	b931      	cbnz	r1, 2b42c <gpio_fire_callbacks+0x1e>
   2b41e:	460c      	mov	r4, r1
   2b420:	e004      	b.n	2b42c <gpio_fire_callbacks+0x1e>
   2b422:	460c      	mov	r4, r1
   2b424:	e002      	b.n	2b42c <gpio_fire_callbacks+0x1e>
   2b426:	4623      	mov	r3, r4
   2b428:	4621      	mov	r1, r4
   2b42a:	461c      	mov	r4, r3
   2b42c:	b171      	cbz	r1, 2b44c <gpio_fire_callbacks+0x3e>
		if (cb->pin_mask & pins) {
   2b42e:	688a      	ldr	r2, [r1, #8]
   2b430:	402a      	ands	r2, r5
   2b432:	d002      	beq.n	2b43a <gpio_fire_callbacks+0x2c>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   2b434:	684b      	ldr	r3, [r1, #4]
   2b436:	4630      	mov	r0, r6
   2b438:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   2b43a:	2c00      	cmp	r4, #0
   2b43c:	d0f3      	beq.n	2b426 <gpio_fire_callbacks+0x18>
	return node->next;
   2b43e:	6823      	ldr	r3, [r4, #0]
   2b440:	2b00      	cmp	r3, #0
   2b442:	d0f1      	beq.n	2b428 <gpio_fire_callbacks+0x1a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2b444:	2c00      	cmp	r4, #0
   2b446:	d1ef      	bne.n	2b428 <gpio_fire_callbacks+0x1a>
   2b448:	4623      	mov	r3, r4
   2b44a:	e7ed      	b.n	2b428 <gpio_fire_callbacks+0x1a>
		}
	}
}
   2b44c:	bd70      	pop	{r4, r5, r6, pc}

0002b44e <get_drive>:
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   2b44e:	f020 00f9 	bic.w	r0, r0, #249	; 0xf9
   2b452:	0580      	lsls	r0, r0, #22
   2b454:	0d80      	lsrs	r0, r0, #22
   2b456:	f5b0 7f83 	cmp.w	r0, #262	; 0x106
   2b45a:	d033      	beq.n	2b4c4 <get_drive+0x76>
   2b45c:	d816      	bhi.n	2b48c <get_drive+0x3e>
   2b45e:	2806      	cmp	r0, #6
   2b460:	d02c      	beq.n	2b4bc <get_drive+0x6e>
   2b462:	d906      	bls.n	2b472 <get_drive+0x24>
   2b464:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   2b468:	d10d      	bne.n	2b486 <get_drive+0x38>
		*drive = NRF_GPIO_PIN_H0S1;
   2b46a:	2301      	movs	r3, #1
   2b46c:	700b      	strb	r3, [r1, #0]
	return 0;
   2b46e:	2000      	movs	r0, #0
		break;
   2b470:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   2b472:	b300      	cbz	r0, 2b4b6 <get_drive+0x68>
   2b474:	2802      	cmp	r0, #2
   2b476:	d103      	bne.n	2b480 <get_drive+0x32>
		*drive = NRF_GPIO_PIN_D0S1;
   2b478:	2304      	movs	r3, #4
   2b47a:	700b      	strb	r3, [r1, #0]
	return 0;
   2b47c:	2000      	movs	r0, #0
		break;
   2b47e:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   2b480:	f06f 0015 	mvn.w	r0, #21
   2b484:	4770      	bx	lr
   2b486:	f06f 0015 	mvn.w	r0, #21
   2b48a:	4770      	bx	lr
   2b48c:	f240 2302 	movw	r3, #514	; 0x202
   2b490:	4298      	cmp	r0, r3
   2b492:	d01b      	beq.n	2b4cc <get_drive+0x7e>
   2b494:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
   2b498:	d103      	bne.n	2b4a2 <get_drive+0x54>
		*drive = NRF_GPIO_PIN_H0H1;
   2b49a:	2303      	movs	r3, #3
   2b49c:	700b      	strb	r3, [r1, #0]
	return 0;
   2b49e:	2000      	movs	r0, #0
		break;
   2b4a0:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   2b4a2:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   2b4a6:	d103      	bne.n	2b4b0 <get_drive+0x62>
		*drive = NRF_GPIO_PIN_S0H1;
   2b4a8:	2302      	movs	r3, #2
   2b4aa:	700b      	strb	r3, [r1, #0]
	return 0;
   2b4ac:	2000      	movs	r0, #0
		break;
   2b4ae:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   2b4b0:	f06f 0015 	mvn.w	r0, #21
   2b4b4:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
   2b4b6:	2000      	movs	r0, #0
   2b4b8:	7008      	strb	r0, [r1, #0]
		break;
   2b4ba:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
   2b4bc:	2306      	movs	r3, #6
   2b4be:	700b      	strb	r3, [r1, #0]
	return 0;
   2b4c0:	2000      	movs	r0, #0
		break;
   2b4c2:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
   2b4c4:	2307      	movs	r3, #7
   2b4c6:	700b      	strb	r3, [r1, #0]
	return 0;
   2b4c8:	2000      	movs	r0, #0
		break;
   2b4ca:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_D0H1;
   2b4cc:	2305      	movs	r3, #5
   2b4ce:	700b      	strb	r3, [r1, #0]
	return 0;
   2b4d0:	2000      	movs	r0, #0
}
   2b4d2:	4770      	bx	lr

0002b4d4 <get_pull>:
	if (flags & GPIO_PULL_UP) {
   2b4d4:	f010 0f10 	tst.w	r0, #16
   2b4d8:	d104      	bne.n	2b4e4 <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
   2b4da:	f010 0f20 	tst.w	r0, #32
   2b4de:	d103      	bne.n	2b4e8 <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
   2b4e0:	2000      	movs	r0, #0
   2b4e2:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
   2b4e4:	2003      	movs	r0, #3
   2b4e6:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
   2b4e8:	2001      	movs	r0, #1
}
   2b4ea:	4770      	bx	lr

0002b4ec <gpio_nrfx_port_get_raw>:
	return port->config;
   2b4ec:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2b4ee:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   2b4f0:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   2b4f4:	600b      	str	r3, [r1, #0]
}
   2b4f6:	2000      	movs	r0, #0
   2b4f8:	4770      	bx	lr

0002b4fa <gpio_nrfx_port_set_masked_raw>:
	return port->config;
   2b4fa:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2b4fc:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
   2b4fe:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
   2b502:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   2b506:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   2b50a:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   2b50e:	2000      	movs	r0, #0
   2b510:	4770      	bx	lr

0002b512 <gpio_nrfx_port_set_bits_raw>:
	return port->config;
   2b512:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2b514:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   2b516:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
   2b51a:	2000      	movs	r0, #0
   2b51c:	4770      	bx	lr

0002b51e <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
   2b51e:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2b520:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   2b522:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   2b526:	2000      	movs	r0, #0
   2b528:	4770      	bx	lr

0002b52a <gpio_nrfx_port_toggle_bits>:
	return port->config;
   2b52a:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2b52c:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   2b52e:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
   2b532:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   2b536:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   2b538:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   2b53c:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   2b540:	2000      	movs	r0, #0
   2b542:	4770      	bx	lr

0002b544 <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
   2b544:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
   2b548:	d007      	beq.n	2b55a <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   2b54a:	f1b1 6fc0 	cmp.w	r1, #100663296	; 0x6000000
   2b54e:	d00d      	beq.n	2b56c <get_trigger+0x28>
   2b550:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
   2b554:	d008      	beq.n	2b568 <get_trigger+0x24>
   2b556:	2001      	movs	r0, #1
}
   2b558:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   2b55a:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
   2b55e:	d001      	beq.n	2b564 <get_trigger+0x20>
   2b560:	2005      	movs	r0, #5
   2b562:	4770      	bx	lr
   2b564:	2004      	movs	r0, #4
   2b566:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   2b568:	2002      	movs	r0, #2
   2b56a:	4770      	bx	lr
   2b56c:	2003      	movs	r0, #3
   2b56e:	4770      	bx	lr

0002b570 <gpio_nrfx_manage_callback>:
{
   2b570:	b508      	push	{r3, lr}
	return port->data;
   2b572:	6900      	ldr	r0, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   2b574:	3004      	adds	r0, #4
   2b576:	f7ff ff2b 	bl	2b3d0 <gpio_manage_callback>
}
   2b57a:	bd08      	pop	{r3, pc}

0002b57c <nrfx_gpio_handler>:
{
   2b57c:	b510      	push	{r4, lr}
    *p_pin = pin_number & 0x1F;
   2b57e:	f000 041f 	and.w	r4, r0, #31
	const struct device *port = get_dev(port_id);
   2b582:	0940      	lsrs	r0, r0, #5
   2b584:	f7f4 ff04 	bl	20390 <get_dev>
	if (port == NULL) {
   2b588:	b130      	cbz	r0, 2b598 <nrfx_gpio_handler+0x1c>
   2b58a:	4601      	mov	r1, r0
	return port->data;
   2b58c:	6900      	ldr	r0, [r0, #16]
	gpio_fire_callbacks(list, port, BIT(pin));
   2b58e:	2201      	movs	r2, #1
   2b590:	40a2      	lsls	r2, r4
   2b592:	3004      	adds	r0, #4
   2b594:	f7ff ff3b 	bl	2b40e <gpio_fire_callbacks>
}
   2b598:	bd10      	pop	{r4, pc}

0002b59a <z_impl_gpio_pin_configure>:
{
   2b59a:	b538      	push	{r3, r4, r5, lr}
   2b59c:	4613      	mov	r3, r2
	const struct gpio_driver_api *api =
   2b59e:	6885      	ldr	r5, [r0, #8]
	struct gpio_driver_data *data =
   2b5a0:	6904      	ldr	r4, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   2b5a2:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
   2b5a6:	d007      	beq.n	2b5b8 <z_impl_gpio_pin_configure+0x1e>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
   2b5a8:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
   2b5ac:	d004      	beq.n	2b5b8 <z_impl_gpio_pin_configure+0x1e>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   2b5ae:	f012 0f01 	tst.w	r2, #1
   2b5b2:	d001      	beq.n	2b5b8 <z_impl_gpio_pin_configure+0x1e>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   2b5b4:	f482 2340 	eor.w	r3, r2, #786432	; 0xc0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   2b5b8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   2b5bc:	f013 0f01 	tst.w	r3, #1
   2b5c0:	d00a      	beq.n	2b5d8 <z_impl_gpio_pin_configure+0x3e>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   2b5c2:	6823      	ldr	r3, [r4, #0]
   2b5c4:	f04f 0c01 	mov.w	ip, #1
   2b5c8:	fa0c fc01 	lsl.w	ip, ip, r1
   2b5cc:	ea43 030c 	orr.w	r3, r3, ip
   2b5d0:	6023      	str	r3, [r4, #0]
	return api->pin_configure(port, pin, flags);
   2b5d2:	682b      	ldr	r3, [r5, #0]
   2b5d4:	4798      	blx	r3
}
   2b5d6:	bd38      	pop	{r3, r4, r5, pc}
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   2b5d8:	6823      	ldr	r3, [r4, #0]
   2b5da:	f04f 0c01 	mov.w	ip, #1
   2b5de:	fa0c fc01 	lsl.w	ip, ip, r1
   2b5e2:	ea23 030c 	bic.w	r3, r3, ip
   2b5e6:	6023      	str	r3, [r4, #0]
   2b5e8:	e7f3      	b.n	2b5d2 <z_impl_gpio_pin_configure+0x38>

0002b5ea <gpio_pin_configure_dt>:
{
   2b5ea:	b508      	push	{r3, lr}
   2b5ec:	4603      	mov	r3, r0
   2b5ee:	468c      	mov	ip, r1
	return gpio_pin_configure(spec->port,
   2b5f0:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
   2b5f2:	7919      	ldrb	r1, [r3, #4]
				  spec->dt_flags | extra_flags);
   2b5f4:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
   2b5f6:	ea42 020c 	orr.w	r2, r2, ip
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
   2b5fa:	f7ff ffce 	bl	2b59a <z_impl_gpio_pin_configure>
}
   2b5fe:	bd08      	pop	{r3, pc}

0002b600 <gpio_pin_set_raw>:
{
   2b600:	b508      	push	{r3, lr}
	if (value != 0)	{
   2b602:	b132      	cbz	r2, 2b612 <gpio_pin_set_raw+0x12>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
   2b604:	2301      	movs	r3, #1
   2b606:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
   2b60a:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
   2b60c:	68db      	ldr	r3, [r3, #12]
   2b60e:	4798      	blx	r3
}
   2b610:	bd08      	pop	{r3, pc}
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
   2b612:	2301      	movs	r3, #1
   2b614:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
   2b618:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
   2b61a:	691b      	ldr	r3, [r3, #16]
   2b61c:	4798      	blx	r3
	return ret;
   2b61e:	e7f7      	b.n	2b610 <gpio_pin_set_raw+0x10>

0002b620 <gpio_pin_set>:
{
   2b620:	b510      	push	{r4, lr}
	const struct gpio_driver_data *const data =
   2b622:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   2b624:	681c      	ldr	r4, [r3, #0]
   2b626:	2301      	movs	r3, #1
   2b628:	408b      	lsls	r3, r1
   2b62a:	421c      	tst	r4, r3
   2b62c:	d002      	beq.n	2b634 <gpio_pin_set+0x14>
		value = (value != 0) ? 0 : 1;
   2b62e:	fab2 f282 	clz	r2, r2
   2b632:	0952      	lsrs	r2, r2, #5
	return gpio_pin_set_raw(port, pin, value);
   2b634:	f7ff ffe4 	bl	2b600 <gpio_pin_set_raw>
}
   2b638:	bd10      	pop	{r4, pc}

0002b63a <spi_context_get_next_buf>:
{
   2b63a:	b430      	push	{r4, r5}
	while (*count) {
   2b63c:	e004      	b.n	2b648 <spi_context_get_next_buf+0xe>
		++(*current);
   2b63e:	3408      	adds	r4, #8
   2b640:	6004      	str	r4, [r0, #0]
		--(*count);
   2b642:	680c      	ldr	r4, [r1, #0]
   2b644:	3c01      	subs	r4, #1
   2b646:	600c      	str	r4, [r1, #0]
	while (*count) {
   2b648:	680c      	ldr	r4, [r1, #0]
   2b64a:	b14c      	cbz	r4, 2b660 <spi_context_get_next_buf+0x26>
		if (((*current)->len / dfs) != 0) {
   2b64c:	6804      	ldr	r4, [r0, #0]
   2b64e:	6865      	ldr	r5, [r4, #4]
   2b650:	429d      	cmp	r5, r3
   2b652:	d3f4      	bcc.n	2b63e <spi_context_get_next_buf+0x4>
			*buf_len = (*current)->len / dfs;
   2b654:	fbb5 f5f3 	udiv	r5, r5, r3
   2b658:	6015      	str	r5, [r2, #0]
			return (*current)->buf;
   2b65a:	6803      	ldr	r3, [r0, #0]
   2b65c:	6818      	ldr	r0, [r3, #0]
   2b65e:	e001      	b.n	2b664 <spi_context_get_next_buf+0x2a>
	*buf_len = 0;
   2b660:	2000      	movs	r0, #0
   2b662:	6010      	str	r0, [r2, #0]
}
   2b664:	bc30      	pop	{r4, r5}
   2b666:	4770      	bx	lr

0002b668 <spi_context_buffers_setup>:
{
   2b668:	b570      	push	{r4, r5, r6, lr}
   2b66a:	4604      	mov	r4, r0
   2b66c:	4615      	mov	r5, r2
   2b66e:	461e      	mov	r6, r3
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   2b670:	460a      	mov	r2, r1
   2b672:	b309      	cbz	r1, 2b6b8 <spi_context_buffers_setup+0x50>
   2b674:	680b      	ldr	r3, [r1, #0]
   2b676:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   2b678:	b303      	cbz	r3, 2b6bc <spi_context_buffers_setup+0x54>
   2b67a:	6853      	ldr	r3, [r2, #4]
   2b67c:	64a3      	str	r3, [r4, #72]	; 0x48
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
   2b67e:	4633      	mov	r3, r6
   2b680:	f104 0258 	add.w	r2, r4, #88	; 0x58
   2b684:	f104 0148 	add.w	r1, r4, #72	; 0x48
   2b688:	f104 0044 	add.w	r0, r4, #68	; 0x44
   2b68c:	f7ff ffd5 	bl	2b63a <spi_context_get_next_buf>
	ctx->tx_buf = (const uint8_t *)
   2b690:	6560      	str	r0, [r4, #84]	; 0x54
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   2b692:	b1ad      	cbz	r5, 2b6c0 <spi_context_buffers_setup+0x58>
   2b694:	682b      	ldr	r3, [r5, #0]
   2b696:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   2b698:	b1a3      	cbz	r3, 2b6c4 <spi_context_buffers_setup+0x5c>
   2b69a:	686b      	ldr	r3, [r5, #4]
   2b69c:	6523      	str	r3, [r4, #80]	; 0x50
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
   2b69e:	4633      	mov	r3, r6
   2b6a0:	f104 0260 	add.w	r2, r4, #96	; 0x60
   2b6a4:	f104 0150 	add.w	r1, r4, #80	; 0x50
   2b6a8:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   2b6ac:	f7ff ffc5 	bl	2b63a <spi_context_get_next_buf>
	ctx->rx_buf = (uint8_t *)
   2b6b0:	65e0      	str	r0, [r4, #92]	; 0x5c
	ctx->sync_status = 0;
   2b6b2:	2300      	movs	r3, #0
   2b6b4:	6423      	str	r3, [r4, #64]	; 0x40
}
   2b6b6:	bd70      	pop	{r4, r5, r6, pc}
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   2b6b8:	460b      	mov	r3, r1
   2b6ba:	e7dc      	b.n	2b676 <spi_context_buffers_setup+0xe>
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   2b6bc:	2300      	movs	r3, #0
   2b6be:	e7dd      	b.n	2b67c <spi_context_buffers_setup+0x14>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   2b6c0:	462b      	mov	r3, r5
   2b6c2:	e7e8      	b.n	2b696 <spi_context_buffers_setup+0x2e>
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   2b6c4:	2300      	movs	r3, #0
   2b6c6:	e7e9      	b.n	2b69c <spi_context_buffers_setup+0x34>

0002b6c8 <_spi_context_cs_control>:
{
   2b6c8:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   2b6ca:	6803      	ldr	r3, [r0, #0]
   2b6cc:	b1a3      	cbz	r3, 2b6f8 <_spi_context_cs_control+0x30>
   2b6ce:	4604      	mov	r4, r0
   2b6d0:	689d      	ldr	r5, [r3, #8]
   2b6d2:	b18d      	cbz	r5, 2b6f8 <_spi_context_cs_control+0x30>
   2b6d4:	6828      	ldr	r0, [r5, #0]
   2b6d6:	b178      	cbz	r0, 2b6f8 <_spi_context_cs_control+0x30>
		if (on) {
   2b6d8:	b979      	cbnz	r1, 2b6fa <_spi_context_cs_control+0x32>
			if (!force_off &&
   2b6da:	b91a      	cbnz	r2, 2b6e4 <_spi_context_cs_control+0x1c>
			    ctx->config->operation & SPI_HOLD_ON_CS) {
   2b6dc:	889b      	ldrh	r3, [r3, #4]
			if (!force_off &&
   2b6de:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   2b6e2:	d109      	bne.n	2b6f8 <_spi_context_cs_control+0x30>
			k_busy_wait(ctx->config->cs->delay);
   2b6e4:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_busy_wait(usec_to_wait);
   2b6e6:	f001 ffde 	bl	2d6a6 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   2b6ea:	6823      	ldr	r3, [r4, #0]
   2b6ec:	689b      	ldr	r3, [r3, #8]
	return gpio_pin_set(spec->port, spec->pin, value);
   2b6ee:	2200      	movs	r2, #0
   2b6f0:	7919      	ldrb	r1, [r3, #4]
   2b6f2:	6818      	ldr	r0, [r3, #0]
   2b6f4:	f7ff ff94 	bl	2b620 <gpio_pin_set>
}
   2b6f8:	bd38      	pop	{r3, r4, r5, pc}
   2b6fa:	2201      	movs	r2, #1
   2b6fc:	7929      	ldrb	r1, [r5, #4]
   2b6fe:	f7ff ff8f 	bl	2b620 <gpio_pin_set>
			k_busy_wait(ctx->config->cs->delay);
   2b702:	6823      	ldr	r3, [r4, #0]
   2b704:	689b      	ldr	r3, [r3, #8]
   2b706:	6898      	ldr	r0, [r3, #8]
   2b708:	f001 ffcd 	bl	2d6a6 <z_impl_k_busy_wait>
}
   2b70c:	e7f4      	b.n	2b6f8 <_spi_context_cs_control+0x30>

0002b70e <spi_context_unlock_unconditionally>:
{
   2b70e:	b510      	push	{r4, lr}
   2b710:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   2b712:	2201      	movs	r2, #1
   2b714:	2100      	movs	r1, #0
   2b716:	f7ff ffd7 	bl	2b6c8 <_spi_context_cs_control>
	return sem->count;
   2b71a:	69a3      	ldr	r3, [r4, #24]
	if (!k_sem_count_get(&ctx->lock)) {
   2b71c:	b103      	cbz	r3, 2b720 <spi_context_unlock_unconditionally+0x12>
}
   2b71e:	bd10      	pop	{r4, pc}
		ctx->owner = NULL;
   2b720:	6063      	str	r3, [r4, #4]
		k_sem_give(&ctx->lock);
   2b722:	f104 0010 	add.w	r0, r4, #16
	z_impl_k_sem_give(sem);
   2b726:	f7f9 fd53 	bl	251d0 <z_impl_k_sem_give>
}
   2b72a:	e7f8      	b.n	2b71e <spi_context_unlock_unconditionally+0x10>

0002b72c <spi_nrfx_release>:
}
#endif /* CONFIG_SPI_ASYNC */

static int spi_nrfx_release(const struct device *dev,
			    const struct spi_config *spi_cfg)
{
   2b72c:	b508      	push	{r3, lr}
	struct spi_nrfx_data *dev_data = dev->data;
   2b72e:	6900      	ldr	r0, [r0, #16]
	return !!(ctx->config == config);
   2b730:	6803      	ldr	r3, [r0, #0]

	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   2b732:	428b      	cmp	r3, r1
   2b734:	d106      	bne.n	2b744 <spi_nrfx_release+0x18>
		return -EINVAL;
	}

	if (dev_data->busy) {
   2b736:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
   2b73a:	b933      	cbnz	r3, 2b74a <spi_nrfx_release+0x1e>
		return -EBUSY;
	}

	spi_context_unlock_unconditionally(&dev_data->ctx);
   2b73c:	f7ff ffe7 	bl	2b70e <spi_context_unlock_unconditionally>

	return 0;
   2b740:	2000      	movs	r0, #0
}
   2b742:	bd08      	pop	{r3, pc}
		return -EINVAL;
   2b744:	f06f 0015 	mvn.w	r0, #21
   2b748:	e7fb      	b.n	2b742 <spi_nrfx_release+0x16>
		return -EBUSY;
   2b74a:	f06f 000f 	mvn.w	r0, #15
   2b74e:	e7f8      	b.n	2b742 <spi_nrfx_release+0x16>

0002b750 <spi_context_release>:
{
   2b750:	b508      	push	{r3, lr}
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
   2b752:	6803      	ldr	r3, [r0, #0]
   2b754:	889b      	ldrh	r3, [r3, #4]
   2b756:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   2b75a:	d000      	beq.n	2b75e <spi_context_release+0xe>
}
   2b75c:	bd08      	pop	{r3, pc}
		ctx->owner = NULL;
   2b75e:	2300      	movs	r3, #0
   2b760:	6043      	str	r3, [r0, #4]
		k_sem_give(&ctx->lock);
   2b762:	3010      	adds	r0, #16
   2b764:	f7f9 fd34 	bl	251d0 <z_impl_k_sem_give>
}
   2b768:	e7f8      	b.n	2b75c <spi_context_release+0xc>

0002b76a <spi_context_lock>:
{
   2b76a:	b538      	push	{r3, r4, r5, lr}
   2b76c:	4604      	mov	r4, r0
   2b76e:	9d04      	ldr	r5, [sp, #16]
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   2b770:	88ab      	ldrh	r3, [r5, #4]
   2b772:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   2b776:	d004      	beq.n	2b782 <spi_context_lock+0x18>
   2b778:	6983      	ldr	r3, [r0, #24]
   2b77a:	b913      	cbnz	r3, 2b782 <spi_context_lock+0x18>
		(ctx->owner == spi_cfg)) {
   2b77c:	6843      	ldr	r3, [r0, #4]
		(k_sem_count_get(&ctx->lock) == 0) &&
   2b77e:	42ab      	cmp	r3, r5
   2b780:	d008      	beq.n	2b794 <spi_context_lock+0x2a>
	k_sem_take(&ctx->lock, K_FOREVER);
   2b782:	f104 0010 	add.w	r0, r4, #16
	return z_impl_k_sem_take(sem, timeout);
   2b786:	f04f 32ff 	mov.w	r2, #4294967295
   2b78a:	f04f 33ff 	mov.w	r3, #4294967295
   2b78e:	f7f9 fd47 	bl	25220 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
   2b792:	6065      	str	r5, [r4, #4]
}
   2b794:	bd38      	pop	{r3, r4, r5, pc}

0002b796 <transceive>:
{
   2b796:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b79a:	b082      	sub	sp, #8
   2b79c:	4604      	mov	r4, r0
   2b79e:	460d      	mov	r5, r1
   2b7a0:	4690      	mov	r8, r2
   2b7a2:	461f      	mov	r7, r3
	struct spi_nrfx_data *dev_data = dev->data;
   2b7a4:	6906      	ldr	r6, [r0, #16]
	spi_context_lock(&dev_data->ctx, asynchronous, cb, userdata, spi_cfg);
   2b7a6:	9100      	str	r1, [sp, #0]
   2b7a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2b7aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2b7ac:	f89d 1020 	ldrb.w	r1, [sp, #32]
   2b7b0:	4630      	mov	r0, r6
   2b7b2:	f7ff ffda 	bl	2b76a <spi_context_lock>
	error = configure(dev, spi_cfg);
   2b7b6:	4629      	mov	r1, r5
   2b7b8:	4620      	mov	r0, r4
   2b7ba:	f7f4 ff95 	bl	206e8 <configure>
	if (error == 0) {
   2b7be:	4605      	mov	r5, r0
   2b7c0:	b138      	cbz	r0, 2b7d2 <transceive+0x3c>
	spi_context_release(&dev_data->ctx, error);
   2b7c2:	4629      	mov	r1, r5
   2b7c4:	4630      	mov	r0, r6
   2b7c6:	f7ff ffc3 	bl	2b750 <spi_context_release>
}
   2b7ca:	4628      	mov	r0, r5
   2b7cc:	b002      	add	sp, #8
   2b7ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		dev_data->busy = true;
   2b7d2:	2501      	movs	r5, #1
   2b7d4:	f886 506c 	strb.w	r5, [r6, #108]	; 0x6c
		spi_context_buffers_setup(&dev_data->ctx, tx_bufs, rx_bufs, 1);
   2b7d8:	462b      	mov	r3, r5
   2b7da:	463a      	mov	r2, r7
   2b7dc:	4641      	mov	r1, r8
   2b7de:	4630      	mov	r0, r6
   2b7e0:	f7ff ff42 	bl	2b668 <spi_context_buffers_setup>
	_spi_context_cs_control(ctx, on, false);
   2b7e4:	2200      	movs	r2, #0
   2b7e6:	4629      	mov	r1, r5
   2b7e8:	4630      	mov	r0, r6
   2b7ea:	f7ff ff6d 	bl	2b6c8 <_spi_context_cs_control>
		transfer_next_chunk(dev);
   2b7ee:	4620      	mov	r0, r4
   2b7f0:	f7f5 f942 	bl	20a78 <transfer_next_chunk>
		error = spi_context_wait_for_completion(&dev_data->ctx);
   2b7f4:	4630      	mov	r0, r6
   2b7f6:	f7f4 ff17 	bl	20628 <spi_context_wait_for_completion>
   2b7fa:	4605      	mov	r5, r0
   2b7fc:	e7e1      	b.n	2b7c2 <transceive+0x2c>

0002b7fe <spi_nrfx_transceive>:
{
   2b7fe:	b510      	push	{r4, lr}
   2b800:	b084      	sub	sp, #16
	return transceive(dev, spi_cfg, tx_bufs, rx_bufs, false, NULL, NULL);
   2b802:	2400      	movs	r4, #0
   2b804:	9402      	str	r4, [sp, #8]
   2b806:	9401      	str	r4, [sp, #4]
   2b808:	9400      	str	r4, [sp, #0]
   2b80a:	f7ff ffc4 	bl	2b796 <transceive>
}
   2b80e:	b004      	add	sp, #16
   2b810:	bd10      	pop	{r4, pc}

0002b812 <irq_connect0>:
		      &spi_##idx##z_config,				       \
		      POST_KERNEL, CONFIG_SPI_INIT_PRIORITY,		       \
		      &spi_nrfx_driver_api)

#ifdef CONFIG_SPI_0_NRF_SPI
SPI_NRFX_SPI_DEFINE(0);
   2b812:	b508      	push	{r3, lr}
   2b814:	2200      	movs	r2, #0
   2b816:	2101      	movs	r1, #1
   2b818:	2003      	movs	r0, #3
   2b81a:	f7fc fe68 	bl	284ee <z_arm_irq_priority_set>
   2b81e:	bd08      	pop	{r3, pc}

0002b820 <pinctrl_apply_state>:
 * @retval -ENOENT If given state id does not exist.
 * @retval -errno Negative errno for other failures.
 */
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
				      uint8_t id)
{
   2b820:	b510      	push	{r4, lr}
   2b822:	b082      	sub	sp, #8
   2b824:	4604      	mov	r4, r0
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   2b826:	aa01      	add	r2, sp, #4
   2b828:	f000 fbee 	bl	2c008 <pinctrl_lookup_state>
	if (ret < 0) {
   2b82c:	2800      	cmp	r0, #0
   2b82e:	db05      	blt.n	2b83c <pinctrl_apply_state+0x1c>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   2b830:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   2b832:	6822      	ldr	r2, [r4, #0]
   2b834:	7919      	ldrb	r1, [r3, #4]
   2b836:	6818      	ldr	r0, [r3, #0]
   2b838:	f7f6 ff34 	bl	226a4 <pinctrl_configure_pins>
}
   2b83c:	b002      	add	sp, #8
   2b83e:	bd10      	pop	{r4, pc}

0002b840 <spi_nrfx_init>:
{
   2b840:	b538      	push	{r3, r4, r5, lr}
	const struct spi_nrfx_config *dev_config = dev->config;
   2b842:	6844      	ldr	r4, [r0, #4]
	struct spi_nrfx_data *dev_data = dev->data;
   2b844:	6905      	ldr	r5, [r0, #16]
	err = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   2b846:	2100      	movs	r1, #0
   2b848:	6a20      	ldr	r0, [r4, #32]
   2b84a:	f7ff ffe9 	bl	2b820 <pinctrl_apply_state>
	if (err < 0) {
   2b84e:	2800      	cmp	r0, #0
   2b850:	db0a      	blt.n	2b868 <spi_nrfx_init+0x28>
	dev_config->irq_connect();
   2b852:	69e3      	ldr	r3, [r4, #28]
   2b854:	4798      	blx	r3
	err = spi_context_cs_configure_all(&dev_data->ctx);
   2b856:	4628      	mov	r0, r5
   2b858:	f7f5 f9f8 	bl	20c4c <spi_context_cs_configure_all>
	if (err < 0) {
   2b85c:	2800      	cmp	r0, #0
   2b85e:	db03      	blt.n	2b868 <spi_nrfx_init+0x28>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   2b860:	4628      	mov	r0, r5
   2b862:	f7ff ff54 	bl	2b70e <spi_context_unlock_unconditionally>
	return 0;
   2b866:	2000      	movs	r0, #0
}
   2b868:	bd38      	pop	{r3, r4, r5, pc}

0002b86a <can_calc_timing_int>:
{
   2b86a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b86e:	b087      	sub	sp, #28
   2b870:	4692      	mov	sl, r2
   2b872:	461e      	mov	r6, r3
   2b874:	9f10      	ldr	r7, [sp, #64]	; 0x40
   2b876:	f8bd b044 	ldrh.w	fp, [sp, #68]	; 0x44
	uint32_t ts = max->prop_seg + max->phase_seg1 + max->phase_seg2 +
   2b87a:	885b      	ldrh	r3, [r3, #2]
   2b87c:	88b2      	ldrh	r2, [r6, #4]
   2b87e:	4413      	add	r3, r2
   2b880:	88f2      	ldrh	r2, [r6, #6]
   2b882:	4413      	add	r3, r2
	if (bitrate == 0 || sp >= 1000) {
   2b884:	2f00      	cmp	r7, #0
   2b886:	d045      	beq.n	2b914 <can_calc_timing_int+0xaa>
   2b888:	4605      	mov	r5, r0
   2b88a:	4688      	mov	r8, r1
   2b88c:	3301      	adds	r3, #1
   2b88e:	f5bb 7f7a 	cmp.w	fp, #1000	; 0x3e8
   2b892:	d242      	bcs.n	2b91a <can_calc_timing_int+0xb0>
	for (int prescaler = MAX(core_clock / (ts * bitrate), 1);
   2b894:	fb07 f303 	mul.w	r3, r7, r3
   2b898:	fbb0 f4f3 	udiv	r4, r0, r3
   2b89c:	2c01      	cmp	r4, #1
   2b89e:	bf38      	it	cc
   2b8a0:	2401      	movcc	r4, #1
	uint16_t sp_err_min = UINT16_MAX;
   2b8a2:	f64f 79ff 	movw	r9, #65535	; 0xffff
	for (int prescaler = MAX(core_clock / (ts * bitrate), 1);
   2b8a6:	e000      	b.n	2b8aa <can_calc_timing_int+0x40>
	     prescaler <= max->prescaler; ++prescaler) {
   2b8a8:	3401      	adds	r4, #1
   2b8aa:	8933      	ldrh	r3, [r6, #8]
   2b8ac:	42a3      	cmp	r3, r4
   2b8ae:	db26      	blt.n	2b8fe <can_calc_timing_int+0x94>
		if (core_clock % (prescaler * bitrate)) {
   2b8b0:	fb07 f004 	mul.w	r0, r7, r4
   2b8b4:	fbb5 f3f0 	udiv	r3, r5, r0
   2b8b8:	fb00 5313 	mls	r3, r0, r3, r5
   2b8bc:	2b00      	cmp	r3, #0
   2b8be:	d1f3      	bne.n	2b8a8 <can_calc_timing_int+0x3e>
		sp_err = update_sampling_pnt(ts, sp, &tmp_res,
   2b8c0:	f8cd a000 	str.w	sl, [sp]
   2b8c4:	4633      	mov	r3, r6
   2b8c6:	aa03      	add	r2, sp, #12
   2b8c8:	4659      	mov	r1, fp
   2b8ca:	fbb5 f0f0 	udiv	r0, r5, r0
   2b8ce:	f7f5 fa3d 	bl	20d4c <update_sampling_pnt>
		if (sp_err < 0) {
   2b8d2:	2800      	cmp	r0, #0
   2b8d4:	dbe8      	blt.n	2b8a8 <can_calc_timing_int+0x3e>
		if (sp_err < sp_err_min) {
   2b8d6:	4581      	cmp	r9, r0
   2b8d8:	dde6      	ble.n	2b8a8 <can_calc_timing_int+0x3e>
			sp_err_min = sp_err;
   2b8da:	fa1f f980 	uxth.w	r9, r0
			res->prop_seg = tmp_res.prop_seg;
   2b8de:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   2b8e2:	f8a8 3002 	strh.w	r3, [r8, #2]
			res->phase_seg1 = tmp_res.phase_seg1;
   2b8e6:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   2b8ea:	f8a8 3004 	strh.w	r3, [r8, #4]
			res->phase_seg2 = tmp_res.phase_seg2;
   2b8ee:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   2b8f2:	f8a8 3006 	strh.w	r3, [r8, #6]
			res->prescaler = (uint16_t)prescaler;
   2b8f6:	f8a8 4008 	strh.w	r4, [r8, #8]
			if (sp_err == 0) {
   2b8fa:	2800      	cmp	r0, #0
   2b8fc:	d1d4      	bne.n	2b8a8 <can_calc_timing_int+0x3e>
	if (sp_err_min) {
   2b8fe:	f1b9 0f00 	cmp.w	r9, #0
   2b902:	d003      	beq.n	2b90c <can_calc_timing_int+0xa2>
	return sp_err_min == UINT16_MAX ? -ENOTSUP : (int)sp_err_min;
   2b904:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2b908:	4599      	cmp	r9, r3
   2b90a:	d009      	beq.n	2b920 <can_calc_timing_int+0xb6>
   2b90c:	4648      	mov	r0, r9
}
   2b90e:	b007      	add	sp, #28
   2b910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EINVAL;
   2b914:	f06f 0015 	mvn.w	r0, #21
   2b918:	e7f9      	b.n	2b90e <can_calc_timing_int+0xa4>
   2b91a:	f06f 0015 	mvn.w	r0, #21
   2b91e:	e7f6      	b.n	2b90e <can_calc_timing_int+0xa4>
	return sp_err_min == UINT16_MAX ? -ENOTSUP : (int)sp_err_min;
   2b920:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2b924:	e7f3      	b.n	2b90e <can_calc_timing_int+0xa4>

0002b926 <can_tx_default_cb>:
{
   2b926:	b508      	push	{r3, lr}
   2b928:	4610      	mov	r0, r2
	ctx->status = error;
   2b92a:	6191      	str	r1, [r2, #24]
	z_impl_k_sem_give(sem);
   2b92c:	f7f9 fc50 	bl	251d0 <z_impl_k_sem_give>
}
   2b930:	bd08      	pop	{r3, pc}

0002b932 <can_calc_prescaler>:
}
#endif /* CONFIG_CAN_FD_MODE */

int can_calc_prescaler(const struct device *dev, struct can_timing *timing,
		       uint32_t bitrate)
{
   2b932:	b570      	push	{r4, r5, r6, lr}
   2b934:	b082      	sub	sp, #8
   2b936:	460e      	mov	r6, r1
   2b938:	4615      	mov	r5, r2
	uint32_t ts = timing->prop_seg + timing->phase_seg1 + timing->phase_seg2 +
   2b93a:	884c      	ldrh	r4, [r1, #2]
   2b93c:	888a      	ldrh	r2, [r1, #4]
   2b93e:	4414      	add	r4, r2
   2b940:	88ca      	ldrh	r2, [r1, #6]
   2b942:	4414      	add	r4, r2
	const struct can_driver_api *api = (const struct can_driver_api *)dev->api;
   2b944:	6883      	ldr	r3, [r0, #8]
	return api->get_core_clock(dev, rate);
   2b946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2b948:	a901      	add	r1, sp, #4
   2b94a:	4798      	blx	r3
		   CAN_SYNC_SEG;
	uint32_t core_clock;
	int ret;

	ret = can_get_core_clock(dev, &core_clock);
	if (ret != 0) {
   2b94c:	b968      	cbnz	r0, 2b96a <can_calc_prescaler+0x38>
   2b94e:	3401      	adds	r4, #1
		return ret;
	}

	timing->prescaler = core_clock / (bitrate * ts);
   2b950:	9801      	ldr	r0, [sp, #4]
   2b952:	fb05 f204 	mul.w	r2, r5, r4
   2b956:	fbb0 f2f2 	udiv	r2, r0, r2
   2b95a:	8132      	strh	r2, [r6, #8]

	return core_clock % (ts * timing->prescaler);
   2b95c:	b292      	uxth	r2, r2
   2b95e:	fb04 f202 	mul.w	r2, r4, r2
   2b962:	fbb0 f3f2 	udiv	r3, r0, r2
   2b966:	fb02 0013 	mls	r0, r2, r3, r0
}
   2b96a:	b002      	add	sp, #8
   2b96c:	bd70      	pop	{r4, r5, r6, pc}

0002b96e <z_impl_gpio_pin_interrupt_configure>:
{
   2b96e:	b538      	push	{r3, r4, r5, lr}
	const struct gpio_driver_api *api =
   2b970:	6883      	ldr	r3, [r0, #8]
	const struct gpio_driver_data *const data =
   2b972:	6904      	ldr	r4, [r0, #16]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   2b974:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
   2b978:	d006      	beq.n	2b988 <z_impl_gpio_pin_interrupt_configure+0x1a>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   2b97a:	6825      	ldr	r5, [r4, #0]
   2b97c:	2401      	movs	r4, #1
   2b97e:	408c      	lsls	r4, r1
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   2b980:	4225      	tst	r5, r4
   2b982:	d001      	beq.n	2b988 <z_impl_gpio_pin_interrupt_configure+0x1a>
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   2b984:	f082 62c0 	eor.w	r2, r2, #100663296	; 0x6000000
	return api->pin_interrupt_configure(port, pin, mode, trig);
   2b988:	699c      	ldr	r4, [r3, #24]
   2b98a:	f002 63c0 	and.w	r3, r2, #100663296	; 0x6000000
   2b98e:	f002 72b0 	and.w	r2, r2, #23068672	; 0x1600000
   2b992:	47a0      	blx	r4
}
   2b994:	bd38      	pop	{r3, r4, r5, pc}

0002b996 <z_impl_gpio_pin_configure>:
{
   2b996:	b538      	push	{r3, r4, r5, lr}
   2b998:	4613      	mov	r3, r2
	const struct gpio_driver_api *api =
   2b99a:	6885      	ldr	r5, [r0, #8]
	struct gpio_driver_data *data =
   2b99c:	6904      	ldr	r4, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   2b99e:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
   2b9a2:	d007      	beq.n	2b9b4 <z_impl_gpio_pin_configure+0x1e>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
   2b9a4:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
   2b9a8:	d004      	beq.n	2b9b4 <z_impl_gpio_pin_configure+0x1e>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   2b9aa:	f012 0f01 	tst.w	r2, #1
   2b9ae:	d001      	beq.n	2b9b4 <z_impl_gpio_pin_configure+0x1e>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   2b9b0:	f482 2340 	eor.w	r3, r2, #786432	; 0xc0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   2b9b4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   2b9b8:	f013 0f01 	tst.w	r3, #1
   2b9bc:	d00a      	beq.n	2b9d4 <z_impl_gpio_pin_configure+0x3e>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   2b9be:	6823      	ldr	r3, [r4, #0]
   2b9c0:	f04f 0c01 	mov.w	ip, #1
   2b9c4:	fa0c fc01 	lsl.w	ip, ip, r1
   2b9c8:	ea43 030c 	orr.w	r3, r3, ip
   2b9cc:	6023      	str	r3, [r4, #0]
	return api->pin_configure(port, pin, flags);
   2b9ce:	682b      	ldr	r3, [r5, #0]
   2b9d0:	4798      	blx	r3
}
   2b9d2:	bd38      	pop	{r3, r4, r5, pc}
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   2b9d4:	6823      	ldr	r3, [r4, #0]
   2b9d6:	f04f 0c01 	mov.w	ip, #1
   2b9da:	fa0c fc01 	lsl.w	ip, ip, r1
   2b9de:	ea23 030c 	bic.w	r3, r3, ip
   2b9e2:	6023      	str	r3, [r4, #0]
   2b9e4:	e7f3      	b.n	2b9ce <z_impl_gpio_pin_configure+0x38>

0002b9e6 <gpio_pin_configure_dt>:
{
   2b9e6:	b508      	push	{r3, lr}
   2b9e8:	4603      	mov	r3, r0
   2b9ea:	468c      	mov	ip, r1
	return gpio_pin_configure(spec->port,
   2b9ec:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
   2b9ee:	7919      	ldrb	r1, [r3, #4]
				  spec->dt_flags | extra_flags);
   2b9f0:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
   2b9f2:	ea42 020c 	orr.w	r2, r2, ip
   2b9f6:	f7ff ffce 	bl	2b996 <z_impl_gpio_pin_configure>
}
   2b9fa:	bd08      	pop	{r3, pc}

0002b9fc <gpio_port_get>:
{
   2b9fc:	b538      	push	{r3, r4, r5, lr}
   2b9fe:	460c      	mov	r4, r1
	const struct gpio_driver_data *const data =
   2ba00:	6905      	ldr	r5, [r0, #16]
	const struct gpio_driver_api *api =
   2ba02:	6883      	ldr	r3, [r0, #8]
	return api->port_get_raw(port, value);
   2ba04:	685b      	ldr	r3, [r3, #4]
   2ba06:	4798      	blx	r3
	if (ret == 0) {
   2ba08:	b918      	cbnz	r0, 2ba12 <gpio_port_get+0x16>
		*value ^= data->invert;
   2ba0a:	6823      	ldr	r3, [r4, #0]
   2ba0c:	682a      	ldr	r2, [r5, #0]
   2ba0e:	4053      	eors	r3, r2
   2ba10:	6023      	str	r3, [r4, #0]
}
   2ba12:	bd38      	pop	{r3, r4, r5, pc}

0002ba14 <gpio_pin_get>:
{
   2ba14:	b510      	push	{r4, lr}
   2ba16:	b082      	sub	sp, #8
   2ba18:	460c      	mov	r4, r1
	ret = gpio_port_get(port, &value);
   2ba1a:	a901      	add	r1, sp, #4
   2ba1c:	f7ff ffee 	bl	2b9fc <gpio_port_get>
	if (ret == 0) {
   2ba20:	b930      	cbnz	r0, 2ba30 <gpio_pin_get+0x1c>
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   2ba22:	2301      	movs	r3, #1
   2ba24:	40a3      	lsls	r3, r4
   2ba26:	9a01      	ldr	r2, [sp, #4]
   2ba28:	4213      	tst	r3, r2
   2ba2a:	bf14      	ite	ne
   2ba2c:	2001      	movne	r0, #1
   2ba2e:	2000      	moveq	r0, #0
}
   2ba30:	b002      	add	sp, #8
   2ba32:	bd10      	pop	{r4, pc}

0002ba34 <gpio_add_callback>:
 *
 * Note: enables to add as many callback as needed on the same port.
 */
static inline int gpio_add_callback(const struct device *port,
				    struct gpio_callback *callback)
{
   2ba34:	b508      	push	{r3, lr}
	const struct gpio_driver_api *api =
   2ba36:	6883      	ldr	r3, [r0, #8]
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   2ba38:	69db      	ldr	r3, [r3, #28]
   2ba3a:	b113      	cbz	r3, 2ba42 <gpio_add_callback+0xe>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   2ba3c:	2201      	movs	r2, #1
   2ba3e:	4798      	blx	r3
}
   2ba40:	bd08      	pop	{r3, pc}
		return -ENOTSUP;
   2ba42:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2ba46:	e7fb      	b.n	2ba40 <gpio_add_callback+0xc>

0002ba48 <spi_transceive_dt>:
 * @return a value from spi_transceive().
 */
static inline int spi_transceive_dt(const struct spi_dt_spec *spec,
				    const struct spi_buf_set *tx_bufs,
				    const struct spi_buf_set *rx_bufs)
{
   2ba48:	b510      	push	{r4, lr}
   2ba4a:	468c      	mov	ip, r1
   2ba4c:	4613      	mov	r3, r2
	return spi_transceive(spec->bus, &spec->config, tx_bufs, rx_bufs);
   2ba4e:	4601      	mov	r1, r0
   2ba50:	f851 0b04 	ldr.w	r0, [r1], #4
	const struct spi_driver_api *api =
   2ba54:	6882      	ldr	r2, [r0, #8]
	return api->transceive(dev, config, tx_bufs, rx_bufs);
   2ba56:	6814      	ldr	r4, [r2, #0]
   2ba58:	4662      	mov	r2, ip
   2ba5a:	47a0      	blx	r4
}
   2ba5c:	bd10      	pop	{r4, pc}

0002ba5e <spi_write_dt>:
 *
 * @return a value from spi_write().
 */
static inline int spi_write_dt(const struct spi_dt_spec *spec,
			       const struct spi_buf_set *tx_bufs)
{
   2ba5e:	b510      	push	{r4, lr}
   2ba60:	460a      	mov	r2, r1
	return spi_write(spec->bus, &spec->config, tx_bufs);
   2ba62:	4601      	mov	r1, r0
   2ba64:	f851 0b04 	ldr.w	r0, [r1], #4
	const struct spi_driver_api *api =
   2ba68:	6883      	ldr	r3, [r0, #8]
	return api->transceive(dev, config, tx_bufs, rx_bufs);
   2ba6a:	681c      	ldr	r4, [r3, #0]
   2ba6c:	2300      	movs	r3, #0
   2ba6e:	47a0      	blx	r4
}
   2ba70:	bd10      	pop	{r4, pc}

0002ba72 <can_utils_filter_match>:
 * @return true if the CAN filter matches the CAN frame, false otherwise
 */
static inline bool can_utils_filter_match(const struct can_frame *frame,
					  struct can_filter *filter)
{
	if (((frame->flags & CAN_FRAME_IDE) != 0) && ((filter->flags & CAN_FILTER_IDE) == 0)) {
   2ba72:	7943      	ldrb	r3, [r0, #5]
   2ba74:	f013 0f01 	tst.w	r3, #1
   2ba78:	d003      	beq.n	2ba82 <can_utils_filter_match+0x10>
   2ba7a:	79ca      	ldrb	r2, [r1, #7]
   2ba7c:	f012 0f20 	tst.w	r2, #32
   2ba80:	d016      	beq.n	2bab0 <can_utils_filter_match+0x3e>
		return false;
	}

	if (((frame->flags & CAN_FRAME_RTR) == 0) && (filter->flags & CAN_FILTER_DATA) == 0) {
   2ba82:	f013 0302 	ands.w	r3, r3, #2
   2ba86:	d102      	bne.n	2ba8e <can_utils_filter_match+0x1c>
   2ba88:	79ca      	ldrb	r2, [r1, #7]
   2ba8a:	2a7f      	cmp	r2, #127	; 0x7f
   2ba8c:	d912      	bls.n	2bab4 <can_utils_filter_match+0x42>
		return false;
	}

	if (((frame->flags & CAN_FRAME_RTR) != 0) && (filter->flags & CAN_FILTER_RTR) == 0) {
   2ba8e:	b11b      	cbz	r3, 2ba98 <can_utils_filter_match+0x26>
   2ba90:	79cb      	ldrb	r3, [r1, #7]
   2ba92:	f013 0f40 	tst.w	r3, #64	; 0x40
   2ba96:	d00f      	beq.n	2bab8 <can_utils_filter_match+0x46>
		return false;
	}

	if ((frame->id ^ filter->id) & filter->mask) {
   2ba98:	6803      	ldr	r3, [r0, #0]
   2ba9a:	f3c3 031c 	ubfx	r3, r3, #0, #29
   2ba9e:	680a      	ldr	r2, [r1, #0]
   2baa0:	f3c2 021c 	ubfx	r2, r2, #0, #29
   2baa4:	4053      	eors	r3, r2
   2baa6:	684a      	ldr	r2, [r1, #4]
   2baa8:	421a      	tst	r2, r3
   2baaa:	d107      	bne.n	2babc <can_utils_filter_match+0x4a>
		return false;
	}

	return true;
   2baac:	2001      	movs	r0, #1
   2baae:	4770      	bx	lr
		return false;
   2bab0:	2000      	movs	r0, #0
   2bab2:	4770      	bx	lr
		return false;
   2bab4:	2000      	movs	r0, #0
   2bab6:	4770      	bx	lr
		return false;
   2bab8:	2000      	movs	r0, #0
   2baba:	4770      	bx	lr
		return false;
   2babc:	2000      	movs	r0, #0
}
   2babe:	4770      	bx	lr

0002bac0 <mcp2515_cmd_soft_reset>:
{
   2bac0:	b500      	push	{lr}
   2bac2:	b087      	sub	sp, #28
	const struct mcp2515_config *dev_cfg = dev->config;
   2bac4:	6840      	ldr	r0, [r0, #4]
	uint8_t cmd_buf[] = { MCP2515_OPCODE_RESET };
   2bac6:	23c0      	movs	r3, #192	; 0xc0
   2bac8:	f88d 3014 	strb.w	r3, [sp, #20]
	const struct spi_buf tx_buf = {
   2bacc:	ab05      	add	r3, sp, #20
   2bace:	9303      	str	r3, [sp, #12]
   2bad0:	2301      	movs	r3, #1
   2bad2:	9304      	str	r3, [sp, #16]
	const struct spi_buf_set tx = {
   2bad4:	aa03      	add	r2, sp, #12
   2bad6:	9201      	str	r2, [sp, #4]
   2bad8:	9302      	str	r3, [sp, #8]
	return spi_write_dt(&dev_cfg->bus, &tx);
   2bada:	a901      	add	r1, sp, #4
   2badc:	f7ff ffbf 	bl	2ba5e <spi_write_dt>
}
   2bae0:	b007      	add	sp, #28
   2bae2:	f85d fb04 	ldr.w	pc, [sp], #4

0002bae6 <mcp2515_cmd_bit_modify>:
{
   2bae6:	b500      	push	{lr}
   2bae8:	b087      	sub	sp, #28
	const struct mcp2515_config *dev_cfg = dev->config;
   2baea:	6840      	ldr	r0, [r0, #4]
	uint8_t cmd_buf[] = { MCP2515_OPCODE_BIT_MODIFY, reg_addr, mask, data };
   2baec:	f04f 0c05 	mov.w	ip, #5
   2baf0:	f88d c014 	strb.w	ip, [sp, #20]
   2baf4:	f88d 1015 	strb.w	r1, [sp, #21]
   2baf8:	f88d 2016 	strb.w	r2, [sp, #22]
   2bafc:	f88d 3017 	strb.w	r3, [sp, #23]
	const struct spi_buf tx_buf = {
   2bb00:	ab05      	add	r3, sp, #20
   2bb02:	9303      	str	r3, [sp, #12]
   2bb04:	2304      	movs	r3, #4
   2bb06:	9304      	str	r3, [sp, #16]
	const struct spi_buf_set tx = {
   2bb08:	ab03      	add	r3, sp, #12
   2bb0a:	9301      	str	r3, [sp, #4]
   2bb0c:	2301      	movs	r3, #1
   2bb0e:	9302      	str	r3, [sp, #8]
	return spi_write_dt(&dev_cfg->bus, &tx);
   2bb10:	a901      	add	r1, sp, #4
   2bb12:	f7ff ffa4 	bl	2ba5e <spi_write_dt>
}
   2bb16:	b007      	add	sp, #28
   2bb18:	f85d fb04 	ldr.w	pc, [sp], #4

0002bb1c <mcp2515_cmd_write_reg>:
{
   2bb1c:	b510      	push	{r4, lr}
   2bb1e:	b088      	sub	sp, #32
	const struct mcp2515_config *dev_cfg = dev->config;
   2bb20:	6840      	ldr	r0, [r0, #4]
	uint8_t cmd_buf[] = { MCP2515_OPCODE_WRITE, reg_addr };
   2bb22:	2402      	movs	r4, #2
   2bb24:	f88d 401c 	strb.w	r4, [sp, #28]
   2bb28:	f88d 101d 	strb.w	r1, [sp, #29]
	struct spi_buf tx_buf[] = {
   2bb2c:	a907      	add	r1, sp, #28
   2bb2e:	9103      	str	r1, [sp, #12]
   2bb30:	9404      	str	r4, [sp, #16]
   2bb32:	9205      	str	r2, [sp, #20]
   2bb34:	9306      	str	r3, [sp, #24]
	const struct spi_buf_set tx = {
   2bb36:	ab03      	add	r3, sp, #12
   2bb38:	9301      	str	r3, [sp, #4]
   2bb3a:	9402      	str	r4, [sp, #8]
	return spi_write_dt(&dev_cfg->bus, &tx);
   2bb3c:	a901      	add	r1, sp, #4
   2bb3e:	f7ff ff8e 	bl	2ba5e <spi_write_dt>
}
   2bb42:	b008      	add	sp, #32
   2bb44:	bd10      	pop	{r4, pc}

0002bb46 <mcp2515_cmd_load_tx_buffer>:
{
   2bb46:	b500      	push	{lr}
   2bb48:	b089      	sub	sp, #36	; 0x24
	const struct mcp2515_config *dev_cfg = dev->config;
   2bb4a:	6840      	ldr	r0, [r0, #4]
	uint8_t cmd_buf[] = { MCP2515_OPCODE_LOAD_TX_BUFFER | abc };
   2bb4c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
   2bb50:	f88d 101c 	strb.w	r1, [sp, #28]
	struct spi_buf tx_buf[] = {
   2bb54:	a907      	add	r1, sp, #28
   2bb56:	9103      	str	r1, [sp, #12]
   2bb58:	2101      	movs	r1, #1
   2bb5a:	9104      	str	r1, [sp, #16]
   2bb5c:	9205      	str	r2, [sp, #20]
   2bb5e:	9306      	str	r3, [sp, #24]
	const struct spi_buf_set tx = {
   2bb60:	ab03      	add	r3, sp, #12
   2bb62:	9301      	str	r3, [sp, #4]
   2bb64:	2302      	movs	r3, #2
   2bb66:	9302      	str	r3, [sp, #8]
	return spi_write_dt(&dev_cfg->bus, &tx);
   2bb68:	a901      	add	r1, sp, #4
   2bb6a:	f7ff ff78 	bl	2ba5e <spi_write_dt>
}
   2bb6e:	b009      	add	sp, #36	; 0x24
   2bb70:	f85d fb04 	ldr.w	pc, [sp], #4

0002bb74 <mcp2515_cmd_rts>:
{
   2bb74:	b500      	push	{lr}
   2bb76:	b087      	sub	sp, #28
	const struct mcp2515_config *dev_cfg = dev->config;
   2bb78:	6840      	ldr	r0, [r0, #4]
	uint8_t cmd_buf[] = { MCP2515_OPCODE_RTS | nnn };
   2bb7a:	f061 017f 	orn	r1, r1, #127	; 0x7f
   2bb7e:	f88d 1014 	strb.w	r1, [sp, #20]
	struct spi_buf tx_buf[] = {
   2bb82:	ab05      	add	r3, sp, #20
   2bb84:	9303      	str	r3, [sp, #12]
   2bb86:	2301      	movs	r3, #1
   2bb88:	9304      	str	r3, [sp, #16]
	const struct spi_buf_set tx = {
   2bb8a:	aa03      	add	r2, sp, #12
   2bb8c:	9201      	str	r2, [sp, #4]
   2bb8e:	9302      	str	r3, [sp, #8]
	return spi_write_dt(&dev_cfg->bus, &tx);
   2bb90:	a901      	add	r1, sp, #4
   2bb92:	f7ff ff64 	bl	2ba5e <spi_write_dt>
}
   2bb96:	b007      	add	sp, #28
   2bb98:	f85d fb04 	ldr.w	pc, [sp], #4

0002bb9c <mcp2515_cmd_read_reg>:
{
   2bb9c:	b530      	push	{r4, r5, lr}
   2bb9e:	b08f      	sub	sp, #60	; 0x3c
	const struct mcp2515_config *dev_cfg = dev->config;
   2bba0:	6840      	ldr	r0, [r0, #4]
	uint8_t cmd_buf[] = { MCP2515_OPCODE_READ, reg_addr };
   2bba2:	2403      	movs	r4, #3
   2bba4:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
   2bba8:	f88d 1035 	strb.w	r1, [sp, #53]	; 0x35
	struct spi_buf tx_buf[] = {
   2bbac:	a90d      	add	r1, sp, #52	; 0x34
   2bbae:	9109      	str	r1, [sp, #36]	; 0x24
   2bbb0:	2102      	movs	r1, #2
   2bbb2:	910a      	str	r1, [sp, #40]	; 0x28
   2bbb4:	2400      	movs	r4, #0
   2bbb6:	940b      	str	r4, [sp, #44]	; 0x2c
   2bbb8:	930c      	str	r3, [sp, #48]	; 0x30
	const struct spi_buf_set tx = {
   2bbba:	ad09      	add	r5, sp, #36	; 0x24
   2bbbc:	9507      	str	r5, [sp, #28]
   2bbbe:	9108      	str	r1, [sp, #32]
	struct spi_buf rx_buf[] = {
   2bbc0:	9403      	str	r4, [sp, #12]
   2bbc2:	9104      	str	r1, [sp, #16]
   2bbc4:	9205      	str	r2, [sp, #20]
   2bbc6:	9306      	str	r3, [sp, #24]
	const struct spi_buf_set rx = {
   2bbc8:	ab03      	add	r3, sp, #12
   2bbca:	9301      	str	r3, [sp, #4]
   2bbcc:	9102      	str	r1, [sp, #8]
	return spi_transceive_dt(&dev_cfg->bus, &tx, &rx);
   2bbce:	aa01      	add	r2, sp, #4
   2bbd0:	a907      	add	r1, sp, #28
   2bbd2:	f7ff ff39 	bl	2ba48 <spi_transceive_dt>
}
   2bbd6:	b00f      	add	sp, #60	; 0x3c
   2bbd8:	bd30      	pop	{r4, r5, pc}

0002bbda <mcp2515_cmd_read_rx_buffer>:
{
   2bbda:	b530      	push	{r4, r5, lr}
   2bbdc:	b08f      	sub	sp, #60	; 0x3c
	const struct mcp2515_config *dev_cfg = dev->config;
   2bbde:	6840      	ldr	r0, [r0, #4]
	uint8_t cmd_buf[] = { MCP2515_OPCODE_READ_RX_BUFFER | (nm << 1) };
   2bbe0:	0049      	lsls	r1, r1, #1
   2bbe2:	f061 016f 	orn	r1, r1, #111	; 0x6f
   2bbe6:	f88d 1034 	strb.w	r1, [sp, #52]	; 0x34
	struct spi_buf tx_buf[] = {
   2bbea:	a90d      	add	r1, sp, #52	; 0x34
   2bbec:	9109      	str	r1, [sp, #36]	; 0x24
   2bbee:	2401      	movs	r4, #1
   2bbf0:	940a      	str	r4, [sp, #40]	; 0x28
   2bbf2:	2500      	movs	r5, #0
   2bbf4:	950b      	str	r5, [sp, #44]	; 0x2c
   2bbf6:	930c      	str	r3, [sp, #48]	; 0x30
	const struct spi_buf_set tx = {
   2bbf8:	a909      	add	r1, sp, #36	; 0x24
   2bbfa:	9107      	str	r1, [sp, #28]
   2bbfc:	2102      	movs	r1, #2
   2bbfe:	9108      	str	r1, [sp, #32]
	struct spi_buf rx_buf[] = {
   2bc00:	9503      	str	r5, [sp, #12]
   2bc02:	9404      	str	r4, [sp, #16]
   2bc04:	9205      	str	r2, [sp, #20]
   2bc06:	9306      	str	r3, [sp, #24]
	const struct spi_buf_set rx = {
   2bc08:	ab03      	add	r3, sp, #12
   2bc0a:	9301      	str	r3, [sp, #4]
   2bc0c:	9102      	str	r1, [sp, #8]
	return spi_transceive_dt(&dev_cfg->bus, &tx, &rx);
   2bc0e:	aa01      	add	r2, sp, #4
   2bc10:	a907      	add	r1, sp, #28
   2bc12:	f7ff ff19 	bl	2ba48 <spi_transceive_dt>
}
   2bc16:	b00f      	add	sp, #60	; 0x3c
   2bc18:	bd30      	pop	{r4, r5, pc}

0002bc1a <mcp2515_convert_canframe_to_mcp2515frame>:
	if ((source->flags & CAN_FRAME_IDE) != 0) {
   2bc1a:	7943      	ldrb	r3, [r0, #5]
   2bc1c:	f013 0f01 	tst.w	r3, #1
   2bc20:	d01f      	beq.n	2bc62 <mcp2515_convert_canframe_to_mcp2515frame+0x48>
		target[MCP2515_FRAME_OFFSET_SIDH] = source->id >> 21;
   2bc22:	6803      	ldr	r3, [r0, #0]
   2bc24:	f3c3 5347 	ubfx	r3, r3, #21, #8
   2bc28:	700b      	strb	r3, [r1, #0]
			(((source->id >> 18) & 0x07) << 5) | (BIT(3)) |
   2bc2a:	6802      	ldr	r2, [r0, #0]
   2bc2c:	f3c2 438a 	ubfx	r3, r2, #18, #11
   2bc30:	015b      	lsls	r3, r3, #5
   2bc32:	b2db      	uxtb	r3, r3
			((source->id >> 16) & 0x03);
   2bc34:	f3c2 4201 	ubfx	r2, r2, #16, #2
			(((source->id >> 18) & 0x07) << 5) | (BIT(3)) |
   2bc38:	4313      	orrs	r3, r2
   2bc3a:	f043 0308 	orr.w	r3, r3, #8
		target[MCP2515_FRAME_OFFSET_SIDL] =
   2bc3e:	704b      	strb	r3, [r1, #1]
		target[MCP2515_FRAME_OFFSET_EID8] = source->id >> 8;
   2bc40:	6803      	ldr	r3, [r0, #0]
   2bc42:	f3c3 2314 	ubfx	r3, r3, #8, #21
   2bc46:	708b      	strb	r3, [r1, #2]
		target[MCP2515_FRAME_OFFSET_EID0] = source->id;
   2bc48:	6803      	ldr	r3, [r0, #0]
   2bc4a:	70cb      	strb	r3, [r1, #3]
	rtr = (source->flags & CAN_FRAME_RTR) != 0 ? BIT(6) : 0;
   2bc4c:	7943      	ldrb	r3, [r0, #5]
   2bc4e:	015b      	lsls	r3, r3, #5
   2bc50:	f003 0340 	and.w	r3, r3, #64	; 0x40
	dlc = (source->dlc) & 0x0F;
   2bc54:	7902      	ldrb	r2, [r0, #4]
   2bc56:	f002 020f 	and.w	r2, r2, #15
	target[MCP2515_FRAME_OFFSET_DLC] = rtr | dlc;
   2bc5a:	4313      	orrs	r3, r2
   2bc5c:	710b      	strb	r3, [r1, #4]
	uint8_t data_idx = 0U;
   2bc5e:	2300      	movs	r3, #0
	for (; data_idx < CAN_MAX_DLC; data_idx++) {
   2bc60:	e010      	b.n	2bc84 <mcp2515_convert_canframe_to_mcp2515frame+0x6a>
		target[MCP2515_FRAME_OFFSET_SIDH] = source->id >> 3;
   2bc62:	6803      	ldr	r3, [r0, #0]
   2bc64:	f3c3 03d9 	ubfx	r3, r3, #3, #26
   2bc68:	700b      	strb	r3, [r1, #0]
			(source->id & 0x07) << 5;
   2bc6a:	6803      	ldr	r3, [r0, #0]
   2bc6c:	015b      	lsls	r3, r3, #5
		target[MCP2515_FRAME_OFFSET_SIDL] =
   2bc6e:	704b      	strb	r3, [r1, #1]
   2bc70:	e7ec      	b.n	2bc4c <mcp2515_convert_canframe_to_mcp2515frame+0x32>
		target[MCP2515_FRAME_OFFSET_D0 + data_idx] =
   2bc72:	1d5a      	adds	r2, r3, #5
			source->data[data_idx];
   2bc74:	eb00 0c03 	add.w	ip, r0, r3
   2bc78:	f89c c008 	ldrb.w	ip, [ip, #8]
		target[MCP2515_FRAME_OFFSET_D0 + data_idx] =
   2bc7c:	f801 c002 	strb.w	ip, [r1, r2]
	for (; data_idx < CAN_MAX_DLC; data_idx++) {
   2bc80:	3301      	adds	r3, #1
   2bc82:	b2db      	uxtb	r3, r3
   2bc84:	2b07      	cmp	r3, #7
   2bc86:	d9f4      	bls.n	2bc72 <mcp2515_convert_canframe_to_mcp2515frame+0x58>
}
   2bc88:	4770      	bx	lr

0002bc8a <mcp2515_get_core_clock>:
	const struct mcp2515_config *dev_cfg = dev->config;
   2bc8a:	6843      	ldr	r3, [r0, #4]
	*rate = dev_cfg->osc_freq / 2;
   2bc8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2bc8e:	085b      	lsrs	r3, r3, #1
   2bc90:	600b      	str	r3, [r1, #0]
}
   2bc92:	2000      	movs	r0, #0
   2bc94:	4770      	bx	lr

0002bc96 <mcp2515_get_max_filters>:
}
   2bc96:	2005      	movs	r0, #5
   2bc98:	4770      	bx	lr

0002bc9a <mcp2515_get_max_bitrate>:
	const struct mcp2515_config *dev_cfg = dev->config;
   2bc9a:	6843      	ldr	r3, [r0, #4]
	*max_bitrate = dev_cfg->max_bitrate;
   2bc9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   2bc9e:	600b      	str	r3, [r1, #0]
}
   2bca0:	2000      	movs	r0, #0
   2bca2:	4770      	bx	lr

0002bca4 <mcp2515_get_capabilities>:
	*cap = CAN_MODE_NORMAL | CAN_MODE_LISTENONLY | CAN_MODE_LOOPBACK;
   2bca4:	2303      	movs	r3, #3
   2bca6:	600b      	str	r3, [r1, #0]
}
   2bca8:	2000      	movs	r0, #0
   2bcaa:	4770      	bx	lr

0002bcac <mcp2515_set_state_change_callback>:
	struct mcp2515_data *dev_data = dev->data;
   2bcac:	6903      	ldr	r3, [r0, #16]
	dev_data->state_change_cb = cb;
   2bcae:	f8c3 115c 	str.w	r1, [r3, #348]	; 0x15c
	dev_data->state_change_cb_data = user_data;
   2bcb2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
}
   2bcb6:	4770      	bx	lr

0002bcb8 <mcp2515_remove_rx_filter>:
{
   2bcb8:	b570      	push	{r4, r5, r6, lr}
   2bcba:	460d      	mov	r5, r1
	struct mcp2515_data *dev_data = dev->data;
   2bcbc:	6904      	ldr	r4, [r0, #16]
	k_mutex_lock(&dev_data->mutex, K_FOREVER);
   2bcbe:	f504 76b2 	add.w	r6, r4, #356	; 0x164
	return z_impl_k_mutex_lock(mutex, timeout);
   2bcc2:	f04f 32ff 	mov.w	r2, #4294967295
   2bcc6:	f04f 33ff 	mov.w	r3, #4294967295
   2bcca:	4630      	mov	r0, r6
   2bccc:	f7f9 f980 	bl	24fd0 <z_impl_k_mutex_lock>
	dev_data->filter_usage &= ~BIT(filter_id);
   2bcd0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   2bcd4:	2201      	movs	r2, #1
   2bcd6:	fa02 f105 	lsl.w	r1, r2, r5
   2bcda:	ea23 0301 	bic.w	r3, r3, r1
   2bcde:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
	return z_impl_k_mutex_unlock(mutex);
   2bce2:	4630      	mov	r0, r6
   2bce4:	f7f9 f9f8 	bl	250d8 <z_impl_k_mutex_unlock>
}
   2bce8:	bd70      	pop	{r4, r5, r6, pc}

0002bcea <mcp2515_add_rx_filter>:
{
   2bcea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2bcee:	4688      	mov	r8, r1
   2bcf0:	4617      	mov	r7, r2
   2bcf2:	461e      	mov	r6, r3
	struct mcp2515_data *dev_data = dev->data;
   2bcf4:	6905      	ldr	r5, [r0, #16]
	k_mutex_lock(&dev_data->mutex, K_FOREVER);
   2bcf6:	f505 79b2 	add.w	r9, r5, #356	; 0x164
	return z_impl_k_mutex_lock(mutex, timeout);
   2bcfa:	f04f 32ff 	mov.w	r2, #4294967295
   2bcfe:	f04f 33ff 	mov.w	r3, #4294967295
   2bd02:	4648      	mov	r0, r9
   2bd04:	f7f9 f964 	bl	24fd0 <z_impl_k_mutex_lock>
	int filter_id = 0;
   2bd08:	2400      	movs	r4, #0
	while ((BIT(filter_id) & dev_data->filter_usage)
   2bd0a:	e000      	b.n	2bd0e <mcp2515_add_rx_filter+0x24>
		filter_id++;
   2bd0c:	3401      	adds	r4, #1
	while ((BIT(filter_id) & dev_data->filter_usage)
   2bd0e:	f8d5 0108 	ldr.w	r0, [r5, #264]	; 0x108
   2bd12:	fa20 f304 	lsr.w	r3, r0, r4
	       && (filter_id < CONFIG_CAN_MAX_FILTER)) {
   2bd16:	f013 0f01 	tst.w	r3, #1
   2bd1a:	d001      	beq.n	2bd20 <mcp2515_add_rx_filter+0x36>
   2bd1c:	2c04      	cmp	r4, #4
   2bd1e:	ddf5      	ble.n	2bd0c <mcp2515_add_rx_filter+0x22>
	if (filter_id < CONFIG_CAN_MAX_FILTER) {
   2bd20:	2c04      	cmp	r4, #4
   2bd22:	dc1d      	bgt.n	2bd60 <mcp2515_add_rx_filter+0x76>
		dev_data->filter_usage |= BIT(filter_id);
   2bd24:	2301      	movs	r3, #1
   2bd26:	40a3      	lsls	r3, r4
   2bd28:	4318      	orrs	r0, r3
   2bd2a:	f8c5 0108 	str.w	r0, [r5, #264]	; 0x108
		dev_data->filter[filter_id] = *filter;
   2bd2e:	f104 0326 	add.w	r3, r4, #38	; 0x26
   2bd32:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   2bd36:	3304      	adds	r3, #4
   2bd38:	e896 0003 	ldmia.w	r6, {r0, r1}
   2bd3c:	e883 0003 	stmia.w	r3, {r0, r1}
		dev_data->rx_cb[filter_id] = rx_cb;
   2bd40:	f104 0342 	add.w	r3, r4, #66	; 0x42
   2bd44:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   2bd48:	f8c3 8004 	str.w	r8, [r3, #4]
		dev_data->cb_arg[filter_id] = cb_arg;
   2bd4c:	f104 0348 	add.w	r3, r4, #72	; 0x48
   2bd50:	f845 7023 	str.w	r7, [r5, r3, lsl #2]
	return z_impl_k_mutex_unlock(mutex);
   2bd54:	4648      	mov	r0, r9
   2bd56:	f7f9 f9bf 	bl	250d8 <z_impl_k_mutex_unlock>
}
   2bd5a:	4620      	mov	r0, r4
   2bd5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		filter_id = -ENOSPC;
   2bd60:	f06f 041b 	mvn.w	r4, #27
   2bd64:	e7f6      	b.n	2bd54 <mcp2515_add_rx_filter+0x6a>

0002bd66 <mcp2515_rx_filter>:
{
   2bd66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2bd6a:	b084      	sub	sp, #16
   2bd6c:	4680      	mov	r8, r0
   2bd6e:	460d      	mov	r5, r1
	struct mcp2515_data *dev_data = dev->data;
   2bd70:	6906      	ldr	r6, [r0, #16]
	k_mutex_lock(&dev_data->mutex, K_FOREVER);
   2bd72:	f506 79b2 	add.w	r9, r6, #356	; 0x164
	return z_impl_k_mutex_lock(mutex, timeout);
   2bd76:	f04f 32ff 	mov.w	r2, #4294967295
   2bd7a:	f04f 33ff 	mov.w	r3, #4294967295
   2bd7e:	4648      	mov	r0, r9
   2bd80:	f7f9 f926 	bl	24fd0 <z_impl_k_mutex_lock>
	uint8_t filter_id = 0U;
   2bd84:	2400      	movs	r4, #0
	for (; filter_id < CONFIG_CAN_MAX_FILTER; filter_id++) {
   2bd86:	e001      	b.n	2bd8c <mcp2515_rx_filter+0x26>
   2bd88:	3401      	adds	r4, #1
   2bd8a:	b2e4      	uxtb	r4, r4
   2bd8c:	2c04      	cmp	r4, #4
   2bd8e:	d822      	bhi.n	2bdd6 <mcp2515_rx_filter+0x70>
		if (!(BIT(filter_id) & dev_data->filter_usage)) {
   2bd90:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
   2bd94:	4627      	mov	r7, r4
   2bd96:	40e3      	lsrs	r3, r4
   2bd98:	f013 0f01 	tst.w	r3, #1
   2bd9c:	d0f4      	beq.n	2bd88 <mcp2515_rx_filter+0x22>
		if (!can_utils_filter_match(frame,
   2bd9e:	f104 0126 	add.w	r1, r4, #38	; 0x26
   2bda2:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
   2bda6:	3104      	adds	r1, #4
   2bda8:	4628      	mov	r0, r5
   2bdaa:	f7ff fe62 	bl	2ba72 <can_utils_filter_match>
   2bdae:	2800      	cmp	r0, #0
   2bdb0:	d0ea      	beq.n	2bd88 <mcp2515_rx_filter+0x22>
		callback = dev_data->rx_cb[filter_id];
   2bdb2:	f104 0342 	add.w	r3, r4, #66	; 0x42
   2bdb6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   2bdba:	f8d3 a004 	ldr.w	sl, [r3, #4]
		tmp_frame = *frame;
   2bdbe:	46ec      	mov	ip, sp
   2bdc0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   2bdc4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		callback(dev, &tmp_frame, dev_data->cb_arg[filter_id]);
   2bdc8:	3748      	adds	r7, #72	; 0x48
   2bdca:	f856 2027 	ldr.w	r2, [r6, r7, lsl #2]
   2bdce:	4661      	mov	r1, ip
   2bdd0:	4640      	mov	r0, r8
   2bdd2:	47d0      	blx	sl
   2bdd4:	e7d8      	b.n	2bd88 <mcp2515_rx_filter+0x22>
	return z_impl_k_mutex_unlock(mutex);
   2bdd6:	4648      	mov	r0, r9
   2bdd8:	f7f9 f97e 	bl	250d8 <z_impl_k_mutex_unlock>
}
   2bddc:	b004      	add	sp, #16
   2bdde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002bde2 <mcp2515_tx_done>:
{
   2bde2:	b570      	push	{r4, r5, r6, lr}
   2bde4:	460d      	mov	r5, r1
	struct mcp2515_data *dev_data = dev->data;
   2bde6:	6904      	ldr	r4, [r0, #16]
	can_tx_callback_t callback = dev_data->tx_cb[tx_idx].cb;
   2bde8:	f101 031f 	add.w	r3, r1, #31
   2bdec:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
   2bdf0:	685b      	ldr	r3, [r3, #4]
	if (callback != NULL) {
   2bdf2:	b303      	cbz	r3, 2be36 <mcp2515_tx_done+0x54>
   2bdf4:	4611      	mov	r1, r2
		callback(dev, status, dev_data->tx_cb[tx_idx].cb_arg);
   2bdf6:	f105 061f 	add.w	r6, r5, #31
   2bdfa:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
   2bdfe:	68b2      	ldr	r2, [r6, #8]
   2be00:	4798      	blx	r3
		dev_data->tx_cb[tx_idx].cb = NULL;
   2be02:	2300      	movs	r3, #0
   2be04:	6073      	str	r3, [r6, #4]
		k_mutex_lock(&dev_data->mutex, K_FOREVER);
   2be06:	f504 76b2 	add.w	r6, r4, #356	; 0x164
	return z_impl_k_mutex_lock(mutex, timeout);
   2be0a:	f04f 32ff 	mov.w	r2, #4294967295
   2be0e:	f04f 33ff 	mov.w	r3, #4294967295
   2be12:	4630      	mov	r0, r6
   2be14:	f7f9 f8dc 	bl	24fd0 <z_impl_k_mutex_lock>
		dev_data->tx_busy_map &= ~BIT(tx_idx);
   2be18:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   2be1c:	2201      	movs	r2, #1
   2be1e:	40aa      	lsls	r2, r5
   2be20:	ea23 0302 	bic.w	r3, r3, r2
   2be24:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
	return z_impl_k_mutex_unlock(mutex);
   2be28:	4630      	mov	r0, r6
   2be2a:	f7f9 f955 	bl	250d8 <z_impl_k_mutex_unlock>
		k_sem_give(&dev_data->tx_sem);
   2be2e:	f104 00e4 	add.w	r0, r4, #228	; 0xe4
	z_impl_k_sem_give(sem);
   2be32:	f7f9 f9cd 	bl	251d0 <z_impl_k_sem_give>
}
   2be36:	bd70      	pop	{r4, r5, r6, pc}

0002be38 <mcp2515_int_gpio_callback>:
{
   2be38:	b508      	push	{r3, lr}
	k_sem_give(&dev_data->int_sem);
   2be3a:	f101 00cc 	add.w	r0, r1, #204	; 0xcc
   2be3e:	f7f9 f9c7 	bl	251d0 <z_impl_k_sem_give>
}
   2be42:	bd08      	pop	{r3, pc}

0002be44 <mcp2515_convert_mcp2515frame_to_canframe>:
{
   2be44:	b538      	push	{r3, r4, r5, lr}
   2be46:	4605      	mov	r5, r0
   2be48:	460c      	mov	r4, r1
	memset(target, 0, sizeof(*target));
   2be4a:	2210      	movs	r2, #16
   2be4c:	2100      	movs	r1, #0
   2be4e:	4620      	mov	r0, r4
   2be50:	f7fc fc46 	bl	286e0 <memset>
	if (source[MCP2515_FRAME_OFFSET_SIDL] & BIT(3)) {
   2be54:	786b      	ldrb	r3, [r5, #1]
   2be56:	f013 0f08 	tst.w	r3, #8
   2be5a:	d024      	beq.n	2bea6 <mcp2515_convert_mcp2515frame_to_canframe+0x62>
		target->flags |= CAN_FRAME_IDE;
   2be5c:	7963      	ldrb	r3, [r4, #5]
   2be5e:	f043 0301 	orr.w	r3, r3, #1
   2be62:	7163      	strb	r3, [r4, #5]
			(source[MCP2515_FRAME_OFFSET_SIDH] << 21) |
   2be64:	7829      	ldrb	r1, [r5, #0]
			((source[MCP2515_FRAME_OFFSET_SIDL] >> 5) << 18) |
   2be66:	786a      	ldrb	r2, [r5, #1]
   2be68:	0953      	lsrs	r3, r2, #5
   2be6a:	049b      	lsls	r3, r3, #18
			(source[MCP2515_FRAME_OFFSET_SIDH] << 21) |
   2be6c:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
			((source[MCP2515_FRAME_OFFSET_SIDL] & 0x03) << 16) |
   2be70:	0412      	lsls	r2, r2, #16
   2be72:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
			((source[MCP2515_FRAME_OFFSET_SIDL] >> 5) << 18) |
   2be76:	4313      	orrs	r3, r2
			(source[MCP2515_FRAME_OFFSET_EID8] << 8) |
   2be78:	78aa      	ldrb	r2, [r5, #2]
			((source[MCP2515_FRAME_OFFSET_SIDL] & 0x03) << 16) |
   2be7a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			source[MCP2515_FRAME_OFFSET_EID0];
   2be7e:	78ea      	ldrb	r2, [r5, #3]
			(source[MCP2515_FRAME_OFFSET_EID8] << 8) |
   2be80:	4313      	orrs	r3, r2
		target->id =
   2be82:	6822      	ldr	r2, [r4, #0]
   2be84:	f363 021c 	bfi	r2, r3, #0, #29
   2be88:	6022      	str	r2, [r4, #0]
	target->dlc = source[MCP2515_FRAME_OFFSET_DLC] & 0x0F;
   2be8a:	792b      	ldrb	r3, [r5, #4]
   2be8c:	f003 030f 	and.w	r3, r3, #15
   2be90:	7123      	strb	r3, [r4, #4]
	if ((source[MCP2515_FRAME_OFFSET_DLC] & BIT(6)) != 0) {
   2be92:	792b      	ldrb	r3, [r5, #4]
   2be94:	f013 0f40 	tst.w	r3, #64	; 0x40
   2be98:	d003      	beq.n	2bea2 <mcp2515_convert_mcp2515frame_to_canframe+0x5e>
		target->flags |= CAN_FRAME_RTR;
   2be9a:	7963      	ldrb	r3, [r4, #5]
   2be9c:	f043 0302 	orr.w	r3, r3, #2
   2bea0:	7163      	strb	r3, [r4, #5]
{
   2bea2:	2300      	movs	r3, #0
   2bea4:	e00e      	b.n	2bec4 <mcp2515_convert_mcp2515frame_to_canframe+0x80>
		target->id = (source[MCP2515_FRAME_OFFSET_SIDH] << 3) |
   2bea6:	782a      	ldrb	r2, [r5, #0]
				 (source[MCP2515_FRAME_OFFSET_SIDL] >> 5);
   2bea8:	095b      	lsrs	r3, r3, #5
		target->id = (source[MCP2515_FRAME_OFFSET_SIDH] << 3) |
   2beaa:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   2beae:	6822      	ldr	r2, [r4, #0]
   2beb0:	f363 021c 	bfi	r2, r3, #0, #29
   2beb4:	6022      	str	r2, [r4, #0]
   2beb6:	e7e8      	b.n	2be8a <mcp2515_convert_mcp2515frame_to_canframe+0x46>
		target->data[data_idx] = source[MCP2515_FRAME_OFFSET_D0 +
   2beb8:	1d5a      	adds	r2, r3, #5
   2beba:	5ca9      	ldrb	r1, [r5, r2]
   2bebc:	18e2      	adds	r2, r4, r3
   2bebe:	7211      	strb	r1, [r2, #8]
	for (; data_idx < CAN_MAX_DLC; data_idx++) {
   2bec0:	3301      	adds	r3, #1
   2bec2:	b2db      	uxtb	r3, r3
   2bec4:	2b07      	cmp	r3, #7
   2bec6:	d9f7      	bls.n	2beb8 <mcp2515_convert_mcp2515frame_to_canframe+0x74>
}
   2bec8:	bd38      	pop	{r3, r4, r5, pc}

0002beca <mcp2515_rx>:
{
   2beca:	b510      	push	{r4, lr}
   2becc:	b088      	sub	sp, #32
   2bece:	4604      	mov	r4, r0
	nm = 2 * rx_idx;
   2bed0:	0049      	lsls	r1, r1, #1
	mcp2515_cmd_read_rx_buffer(dev, nm, rx_frame, sizeof(rx_frame));
   2bed2:	230d      	movs	r3, #13
   2bed4:	466a      	mov	r2, sp
   2bed6:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
   2beda:	f7ff fe7e 	bl	2bbda <mcp2515_cmd_read_rx_buffer>
	mcp2515_convert_mcp2515frame_to_canframe(rx_frame, &frame);
   2bede:	a904      	add	r1, sp, #16
   2bee0:	4668      	mov	r0, sp
   2bee2:	f7ff ffaf 	bl	2be44 <mcp2515_convert_mcp2515frame_to_canframe>
	mcp2515_rx_filter(dev, &frame);
   2bee6:	a904      	add	r1, sp, #16
   2bee8:	4620      	mov	r0, r4
   2beea:	f7ff ff3c 	bl	2bd66 <mcp2515_rx_filter>
}
   2beee:	b008      	add	sp, #32
   2bef0:	bd10      	pop	{r4, pc}

0002bef2 <mcp2515_int_thread>:
{
   2bef2:	b538      	push	{r3, r4, r5, lr}
   2bef4:	4604      	mov	r4, r0
	struct mcp2515_data *dev_data = dev->data;
   2bef6:	6905      	ldr	r5, [r0, #16]
		k_sem_take(&dev_data->int_sem, K_FOREVER);
   2bef8:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
	return z_impl_k_sem_take(sem, timeout);
   2befc:	f04f 32ff 	mov.w	r2, #4294967295
   2bf00:	f04f 33ff 	mov.w	r3, #4294967295
   2bf04:	f7f9 f98c 	bl	25220 <z_impl_k_sem_take>
		mcp2515_handle_interrupts(dev);
   2bf08:	4620      	mov	r0, r4
   2bf0a:	f7f5 fb41 	bl	21590 <mcp2515_handle_interrupts>
	while (1) {
   2bf0e:	e7f3      	b.n	2bef8 <mcp2515_int_thread+0x6>

0002bf10 <spi_is_ready_dt>:
{
   2bf10:	b510      	push	{r4, lr}
   2bf12:	4604      	mov	r4, r0
	if (!device_is_ready(spec->bus)) {
   2bf14:	6800      	ldr	r0, [r0, #0]
   2bf16:	f000 fe18 	bl	2cb4a <z_device_is_ready>
   2bf1a:	b120      	cbz	r0, 2bf26 <spi_is_ready_dt+0x16>
	if (spec->config.cs &&
   2bf1c:	68e3      	ldr	r3, [r4, #12]
   2bf1e:	b113      	cbz	r3, 2bf26 <spi_is_ready_dt+0x16>
	    !device_is_ready(spec->config.cs->gpio.port)) {
   2bf20:	6818      	ldr	r0, [r3, #0]
   2bf22:	f000 fe12 	bl	2cb4a <z_device_is_ready>
}
   2bf26:	bd10      	pop	{r4, pc}

0002bf28 <rng_pool_put>:
	uint8_t first = rngp->first_read;
   2bf28:	7842      	ldrb	r2, [r0, #1]
	uint8_t last  = rngp->last;
   2bf2a:	7883      	ldrb	r3, [r0, #2]
	uint8_t mask  = rngp->mask;
   2bf2c:	f890 c003 	ldrb.w	ip, [r0, #3]
	if (((last - first) & mask) == mask) {
   2bf30:	1a9a      	subs	r2, r3, r2
   2bf32:	ea3c 0202 	bics.w	r2, ip, r2
   2bf36:	d007      	beq.n	2bf48 <rng_pool_put+0x20>
	rngp->buffer[last] = byte;
   2bf38:	18c2      	adds	r2, r0, r3
   2bf3a:	7151      	strb	r1, [r2, #5]
	rngp->last = (last + 1) & mask;
   2bf3c:	3301      	adds	r3, #1
   2bf3e:	ea03 030c 	and.w	r3, r3, ip
   2bf42:	7083      	strb	r3, [r0, #2]
	return 0;
   2bf44:	2000      	movs	r0, #0
   2bf46:	4770      	bx	lr
		return -ENOBUFS;
   2bf48:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   2bf4c:	4770      	bx	lr

0002bf4e <rng_pool_init>:
	rngp->first_alloc = 0U;
   2bf4e:	2300      	movs	r3, #0
   2bf50:	7003      	strb	r3, [r0, #0]
	rngp->first_read  = 0U;
   2bf52:	7043      	strb	r3, [r0, #1]
	rngp->last	  = 0U;
   2bf54:	7083      	strb	r3, [r0, #2]
	rngp->mask	  = size - 1;
   2bf56:	3901      	subs	r1, #1
   2bf58:	70c1      	strb	r1, [r0, #3]
	rngp->threshold	  = threshold;
   2bf5a:	7102      	strb	r2, [r0, #4]
}
   2bf5c:	4770      	bx	lr

0002bf5e <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   2bf5e:	2000      	movs	r0, #0
   2bf60:	4770      	bx	lr

0002bf62 <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   2bf62:	b538      	push	{r3, r4, r5, lr}
   2bf64:	460c      	mov	r4, r1
   2bf66:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   2bf68:	f7ee fe50 	bl	1ac0c <bt_is_ready>
   2bf6c:	b120      	cbz	r0, 2bf78 <entropy_bt_get_entropy+0x16>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   2bf6e:	4629      	mov	r1, r5
   2bf70:	4620      	mov	r0, r4
   2bf72:	f7ed ff23 	bl	19dbc <bt_hci_le_rand>
}
   2bf76:	bd38      	pop	{r3, r4, r5, pc}
		return -EAGAIN;
   2bf78:	f06f 000a 	mvn.w	r0, #10
   2bf7c:	e7fb      	b.n	2bf76 <entropy_bt_get_entropy+0x14>

0002bf7e <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   2bf7e:	4770      	bx	lr

0002bf80 <counter_sub>:
	return (a - b) & COUNTER_MAX;
   2bf80:	1a40      	subs	r0, r0, r1
}
   2bf82:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   2bf86:	4770      	bx	lr

0002bf88 <event_check>:
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   2bf88:	f100 0350 	add.w	r3, r0, #80	; 0x50
   2bf8c:	009b      	lsls	r3, r3, #2
   2bf8e:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2bf90:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2bf94:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   2bf98:	6818      	ldr	r0, [r3, #0]
}
   2bf9a:	3800      	subs	r0, #0
   2bf9c:	bf18      	it	ne
   2bf9e:	2001      	movne	r0, #1
   2bfa0:	4770      	bx	lr

0002bfa2 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   2bfa2:	f100 0350 	add.w	r3, r0, #80	; 0x50
   2bfa6:	009b      	lsls	r3, r3, #2
   2bfa8:	b29b      	uxth	r3, r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   2bfaa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2bfae:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   2bfb2:	2200      	movs	r2, #0
   2bfb4:	601a      	str	r2, [r3, #0]
   2bfb6:	681b      	ldr	r3, [r3, #0]
}
   2bfb8:	4770      	bx	lr

0002bfba <absolute_time_to_cc>:
}
   2bfba:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   2bfbe:	4770      	bx	lr

0002bfc0 <full_int_lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   2bfc0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   2bfc4:	b672      	cpsid	i
}
   2bfc6:	4770      	bx	lr

0002bfc8 <full_int_unlock>:
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   2bfc8:	f380 8810 	msr	PRIMASK, r0
}
   2bfcc:	4770      	bx	lr

0002bfce <compare_set>:
{
   2bfce:	b5f0      	push	{r4, r5, r6, r7, lr}
   2bfd0:	b083      	sub	sp, #12
   2bfd2:	4604      	mov	r4, r0
   2bfd4:	4617      	mov	r7, r2
   2bfd6:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
   2bfd8:	f7f6 f93e 	bl	22258 <compare_int_lock>
   2bfdc:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
   2bfde:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2bfe0:	9301      	str	r3, [sp, #4]
   2bfe2:	9b08      	ldr	r3, [sp, #32]
   2bfe4:	9300      	str	r3, [sp, #0]
   2bfe6:	463a      	mov	r2, r7
   2bfe8:	462b      	mov	r3, r5
   2bfea:	4620      	mov	r0, r4
   2bfec:	f7f6 fa02 	bl	223f4 <compare_set_nolocks>
   2bff0:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
   2bff2:	4631      	mov	r1, r6
   2bff4:	4620      	mov	r0, r4
   2bff6:	f7f6 f985 	bl	22304 <compare_int_unlock>
}
   2bffa:	4628      	mov	r0, r5
   2bffc:	b003      	add	sp, #12
   2bffe:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002c000 <sys_clock_cycle_get_32>:
{
   2c000:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   2c002:	f7f6 f9d7 	bl	223b4 <z_nrf_rtc_timer_read>
}
   2c006:	bd08      	pop	{r3, pc}

0002c008 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   2c008:	b500      	push	{lr}
	*state = &config->states[0];
   2c00a:	6843      	ldr	r3, [r0, #4]
   2c00c:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   2c00e:	e001      	b.n	2c014 <pinctrl_lookup_state+0xc>
		if (id == (*state)->id) {
			return 0;
		}

		(*state)++;
   2c010:	3308      	adds	r3, #8
   2c012:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   2c014:	6813      	ldr	r3, [r2, #0]
   2c016:	f890 c008 	ldrb.w	ip, [r0, #8]
   2c01a:	f8d0 e004 	ldr.w	lr, [r0, #4]
   2c01e:	eb0e 0ccc 	add.w	ip, lr, ip, lsl #3
   2c022:	4563      	cmp	r3, ip
   2c024:	d205      	bcs.n	2c032 <pinctrl_lookup_state+0x2a>
		if (id == (*state)->id) {
   2c026:	f893 c005 	ldrb.w	ip, [r3, #5]
   2c02a:	458c      	cmp	ip, r1
   2c02c:	d1f0      	bne.n	2c010 <pinctrl_lookup_state+0x8>
			return 0;
   2c02e:	2000      	movs	r0, #0
   2c030:	e001      	b.n	2c036 <pinctrl_lookup_state+0x2e>
	}

	return -ENOENT;
   2c032:	f06f 0001 	mvn.w	r0, #1
}
   2c036:	f85d fb04 	ldr.w	pc, [sp], #4

0002c03a <event_packet_is_discardable>:
	switch (hdr->evt) {
   2c03a:	7803      	ldrb	r3, [r0, #0]
   2c03c:	2b3e      	cmp	r3, #62	; 0x3e
   2c03e:	d003      	beq.n	2c048 <event_packet_is_discardable+0xe>
   2c040:	2bff      	cmp	r3, #255	; 0xff
   2c042:	d008      	beq.n	2c056 <event_packet_is_discardable+0x1c>
   2c044:	2000      	movs	r0, #0
   2c046:	4770      	bx	lr
		switch (me->subevent) {
   2c048:	7883      	ldrb	r3, [r0, #2]
   2c04a:	2b02      	cmp	r3, #2
   2c04c:	d001      	beq.n	2c052 <event_packet_is_discardable+0x18>
			return false;
   2c04e:	2000      	movs	r0, #0
   2c050:	4770      	bx	lr
			return true;
   2c052:	2001      	movs	r0, #1
   2c054:	4770      	bx	lr
		uint8_t subevent = hci_buf[2];
   2c056:	7883      	ldrb	r3, [r0, #2]
		switch (subevent) {
   2c058:	2b80      	cmp	r3, #128	; 0x80
   2c05a:	d001      	beq.n	2c060 <event_packet_is_discardable+0x26>
			return false;
   2c05c:	2000      	movs	r0, #0
}
   2c05e:	4770      	bx	lr
			return true;
   2c060:	2001      	movs	r0, #1
   2c062:	4770      	bx	lr

0002c064 <hci_driver_send>:
{
   2c064:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   2c066:	8a03      	ldrh	r3, [r0, #16]
   2c068:	b183      	cbz	r3, 2c08c <hci_driver_send+0x28>
   2c06a:	4604      	mov	r4, r0
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   2c06c:	7e03      	ldrb	r3, [r0, #24]
	switch (type) {
   2c06e:	b14b      	cbz	r3, 2c084 <hci_driver_send+0x20>
   2c070:	2b02      	cmp	r3, #2
   2c072:	d10e      	bne.n	2c092 <hci_driver_send+0x2e>
		err = acl_handle(buf);
   2c074:	f7f6 fd4e 	bl	22b14 <acl_handle>
   2c078:	4605      	mov	r5, r0
	if (!err) {
   2c07a:	b965      	cbnz	r5, 2c096 <hci_driver_send+0x32>
		net_buf_unref(buf);
   2c07c:	4620      	mov	r0, r4
   2c07e:	f7fe ffc0 	bl	2b002 <net_buf_unref>
   2c082:	e008      	b.n	2c096 <hci_driver_send+0x32>
		err = cmd_handle(buf);
   2c084:	f7f6 fd64 	bl	22b50 <cmd_handle>
   2c088:	4605      	mov	r5, r0
		break;
   2c08a:	e7f6      	b.n	2c07a <hci_driver_send+0x16>
		return -EINVAL;
   2c08c:	f06f 0515 	mvn.w	r5, #21
   2c090:	e001      	b.n	2c096 <hci_driver_send+0x32>
	switch (type) {
   2c092:	f06f 0515 	mvn.w	r5, #21
}
   2c096:	4628      	mov	r0, r5
   2c098:	bd38      	pop	{r3, r4, r5, pc}

0002c09a <hci_driver_close>:
{
   2c09a:	b510      	push	{r4, lr}
		hci_ecdh_uninit();
   2c09c:	f7f7 f9fe 	bl	2349c <hci_ecdh_uninit>
	err = MULTITHREADING_LOCK_ACQUIRE();
   2c0a0:	f04f 30ff 	mov.w	r0, #4294967295
   2c0a4:	f04f 31ff 	mov.w	r1, #4294967295
   2c0a8:	f7f6 fb62 	bl	22770 <multithreading_lock_acquire>
	if (err) {
   2c0ac:	4604      	mov	r4, r0
   2c0ae:	b108      	cbz	r0, 2c0b4 <hci_driver_close+0x1a>
}
   2c0b0:	4620      	mov	r0, r4
   2c0b2:	bd10      	pop	{r4, pc}
	err = sdc_disable();
   2c0b4:	f7d4 fc60 	bl	978 <sdc_disable>
	if (err) {
   2c0b8:	4604      	mov	r4, r0
   2c0ba:	b910      	cbnz	r0, 2c0c2 <hci_driver_close+0x28>
	MULTITHREADING_LOCK_RELEASE();
   2c0bc:	f7f6 fb62 	bl	22784 <multithreading_lock_release>
	return err;
   2c0c0:	e7f6      	b.n	2c0b0 <hci_driver_close+0x16>
		MULTITHREADING_LOCK_RELEASE();
   2c0c2:	f7f6 fb5f 	bl	22784 <multithreading_lock_release>
		return err;
   2c0c6:	e7f3      	b.n	2c0b0 <hci_driver_close+0x16>

0002c0c8 <configure_supported_features>:
{
   2c0c8:	b508      	push	{r3, lr}
			err = sdc_support_central();
   2c0ca:	f7d4 fd0d 	bl	ae8 <sdc_support_central>
			if (err) {
   2c0ce:	b948      	cbnz	r0, 2c0e4 <configure_supported_features+0x1c>
			err = sdc_support_dle_central();
   2c0d0:	f7d4 fd1c 	bl	b0c <sdc_support_dle_central>
			if (err) {
   2c0d4:	b948      	cbnz	r0, 2c0ea <configure_supported_features+0x22>
		err = sdc_support_le_2m_phy();
   2c0d6:	f7d4 fd29 	bl	b2c <sdc_support_le_2m_phy>
		if (err) {
   2c0da:	b948      	cbnz	r0, 2c0f0 <configure_supported_features+0x28>
			err = sdc_support_phy_update_central();
   2c0dc:	f7d4 fd36 	bl	b4c <sdc_support_phy_update_central>
			if (err) {
   2c0e0:	b948      	cbnz	r0, 2c0f6 <configure_supported_features+0x2e>
}
   2c0e2:	bd08      	pop	{r3, pc}
				return -ENOTSUP;
   2c0e4:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2c0e8:	e7fb      	b.n	2c0e2 <configure_supported_features+0x1a>
				return -ENOTSUP;
   2c0ea:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2c0ee:	e7f8      	b.n	2c0e2 <configure_supported_features+0x1a>
			return -ENOTSUP;
   2c0f0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2c0f4:	e7f5      	b.n	2c0e2 <configure_supported_features+0x1a>
				return -ENOTSUP;
   2c0f6:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2c0fa:	e7f2      	b.n	2c0e2 <configure_supported_features+0x1a>

0002c0fc <receive_work_handler>:
{
   2c0fc:	b508      	push	{r3, lr}
	hci_driver_receive_process();
   2c0fe:	f7f6 ff03 	bl	22f08 <hci_driver_receive_process>
}
   2c102:	bd08      	pop	{r3, pc}

0002c104 <encode_command_status>:
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   2c104:	230f      	movs	r3, #15
   2c106:	7003      	strb	r3, [r0, #0]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   2c108:	2304      	movs	r3, #4
   2c10a:	7043      	strb	r3, [r0, #1]
	evt_data->status = status_code;
   2c10c:	7082      	strb	r2, [r0, #2]
	evt_data->ncmd = 1;
   2c10e:	2301      	movs	r3, #1
   2c110:	70c3      	strb	r3, [r0, #3]
	evt_data->opcode = hci_opcode;
   2c112:	8081      	strh	r1, [r0, #4]
}
   2c114:	4770      	bx	lr

0002c116 <encode_command_complete_header>:
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   2c116:	f04f 0c0e 	mov.w	ip, #14
   2c11a:	f880 c000 	strb.w	ip, [r0]
	evt_hdr->len = param_length;
   2c11e:	7042      	strb	r2, [r0, #1]
	evt_data->ncmd = 1;
   2c120:	2201      	movs	r2, #1
   2c122:	7082      	strb	r2, [r0, #2]
	evt_data->opcode = hci_opcode;
   2c124:	f8a0 1003 	strh.w	r1, [r0, #3]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   2c128:	7143      	strb	r3, [r0, #5]
}
   2c12a:	4770      	bx	lr

0002c12c <le_read_supported_states>:
	*buf = states1;
   2c12c:	2370      	movs	r3, #112	; 0x70
   2c12e:	7003      	strb	r3, [r0, #0]
	*(buf + 4) = states2;
   2c130:	2340      	movs	r3, #64	; 0x40
   2c132:	7103      	strb	r3, [r0, #4]
}
   2c134:	4770      	bx	lr

0002c136 <status_param_cmd_put>:
}
   2c136:	2001      	movs	r0, #1
   2c138:	4770      	bx	lr

0002c13a <link_control_cmd_put>:
{
   2c13a:	b508      	push	{r3, lr}
	return ((uint16_t)src[1] << 8) | src[0];
   2c13c:	7842      	ldrb	r2, [r0, #1]
   2c13e:	f810 3b03 	ldrb.w	r3, [r0], #3
   2c142:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2c146:	b21b      	sxth	r3, r3
	switch (opcode)	{
   2c148:	f240 4206 	movw	r2, #1030	; 0x406
   2c14c:	4293      	cmp	r3, r2
   2c14e:	d005      	beq.n	2c15c <link_control_cmd_put+0x22>
   2c150:	f240 421d 	movw	r2, #1053	; 0x41d
   2c154:	4293      	cmp	r3, r2
   2c156:	d004      	beq.n	2c162 <link_control_cmd_put+0x28>
   2c158:	2001      	movs	r0, #1
}
   2c15a:	bd08      	pop	{r3, pc}
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   2c15c:	f7e1 f896 	bl	d28c <sdc_hci_cmd_lc_disconnect>
   2c160:	e7fb      	b.n	2c15a <link_control_cmd_put+0x20>
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   2c162:	f7e1 f895 	bl	d290 <sdc_hci_cmd_lc_read_remote_version_information>
   2c166:	e7f8      	b.n	2c15a <link_control_cmd_put+0x20>

0002c168 <controller_and_baseband_cmd_put>:
{
   2c168:	b508      	push	{r3, lr}
   2c16a:	4603      	mov	r3, r0
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   2c16c:	3003      	adds	r0, #3
   2c16e:	f893 c001 	ldrb.w	ip, [r3, #1]
   2c172:	781b      	ldrb	r3, [r3, #0]
   2c174:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
   2c178:	b21b      	sxth	r3, r3
	switch (opcode)	{
   2c17a:	f640 4c63 	movw	ip, #3171	; 0xc63
   2c17e:	4563      	cmp	r3, ip
   2c180:	d02c      	beq.n	2c1dc <controller_and_baseband_cmd_put+0x74>
   2c182:	f101 0106 	add.w	r1, r1, #6
   2c186:	dc16      	bgt.n	2c1b6 <controller_and_baseband_cmd_put+0x4e>
   2c188:	f640 4c03 	movw	ip, #3075	; 0xc03
   2c18c:	4563      	cmp	r3, ip
   2c18e:	d022      	beq.n	2c1d6 <controller_and_baseband_cmd_put+0x6e>
   2c190:	f640 4c2d 	movw	ip, #3117	; 0xc2d
   2c194:	4563      	cmp	r3, ip
   2c196:	d105      	bne.n	2c1a4 <controller_and_baseband_cmd_put+0x3c>
		*param_length_out += sizeof(sdc_hci_cmd_cb_read_transmit_power_level_return_t);
   2c198:	7813      	ldrb	r3, [r2, #0]
   2c19a:	3303      	adds	r3, #3
   2c19c:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   2c19e:	f7e0 ff3f 	bl	d020 <sdc_hci_cmd_cb_read_transmit_power_level>
   2c1a2:	e007      	b.n	2c1b4 <controller_and_baseband_cmd_put+0x4c>
	switch (opcode)	{
   2c1a4:	f640 4201 	movw	r2, #3073	; 0xc01
   2c1a8:	4293      	cmp	r3, r2
   2c1aa:	d102      	bne.n	2c1b2 <controller_and_baseband_cmd_put+0x4a>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   2c1ac:	f7e0 ff3a 	bl	d024 <sdc_hci_cmd_cb_set_event_mask>
   2c1b0:	e000      	b.n	2c1b4 <controller_and_baseband_cmd_put+0x4c>
	switch (opcode)	{
   2c1b2:	2001      	movs	r0, #1
}
   2c1b4:	bd08      	pop	{r3, pc}
	switch (opcode)	{
   2c1b6:	f640 4c7b 	movw	ip, #3195	; 0xc7b
   2c1ba:	4563      	cmp	r3, ip
   2c1bc:	d011      	beq.n	2c1e2 <controller_and_baseband_cmd_put+0x7a>
   2c1be:	f640 4c7c 	movw	ip, #3196	; 0xc7c
   2c1c2:	4563      	cmp	r3, ip
   2c1c4:	d105      	bne.n	2c1d2 <controller_and_baseband_cmd_put+0x6a>
		*param_length_out +=
   2c1c6:	7813      	ldrb	r3, [r2, #0]
   2c1c8:	3302      	adds	r3, #2
   2c1ca:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   2c1cc:	f7e0 ff34 	bl	d038 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
   2c1d0:	e7f0      	b.n	2c1b4 <controller_and_baseband_cmd_put+0x4c>
	switch (opcode)	{
   2c1d2:	2001      	movs	r0, #1
   2c1d4:	e7ee      	b.n	2c1b4 <controller_and_baseband_cmd_put+0x4c>
		return sdc_hci_cmd_cb_reset();
   2c1d6:	f7d4 fe0f 	bl	df8 <sdc_hci_cmd_cb_reset>
   2c1da:	e7eb      	b.n	2c1b4 <controller_and_baseband_cmd_put+0x4c>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   2c1dc:	f7e0 ff27 	bl	d02e <sdc_hci_cmd_cb_set_event_mask_page_2>
   2c1e0:	e7e8      	b.n	2c1b4 <controller_and_baseband_cmd_put+0x4c>
		*param_length_out +=
   2c1e2:	7813      	ldrb	r3, [r2, #0]
   2c1e4:	3304      	adds	r3, #4
   2c1e6:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   2c1e8:	f7e0 ff18 	bl	d01c <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
   2c1ec:	e7e2      	b.n	2c1b4 <controller_and_baseband_cmd_put+0x4c>

0002c1ee <supported_commands>:
{
   2c1ee:	b510      	push	{r4, lr}
   2c1f0:	4604      	mov	r4, r0
	memset(cmds, 0, sizeof(*cmds));
   2c1f2:	2230      	movs	r2, #48	; 0x30
   2c1f4:	2100      	movs	r1, #0
   2c1f6:	f7fc fa73 	bl	286e0 <memset>
	cmds->hci_disconnect = 1;
   2c1fa:	7823      	ldrb	r3, [r4, #0]
   2c1fc:	f043 0320 	orr.w	r3, r3, #32
   2c200:	7023      	strb	r3, [r4, #0]
	cmds->hci_read_remote_version_information = 1;
   2c202:	78a3      	ldrb	r3, [r4, #2]
   2c204:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2c208:	70a3      	strb	r3, [r4, #2]
	cmds->hci_set_event_mask = 1;
   2c20a:	7963      	ldrb	r3, [r4, #5]
   2c20c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2c210:	7163      	strb	r3, [r4, #5]
	cmds->hci_reset = 1;
   2c212:	b2db      	uxtb	r3, r3
   2c214:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2c218:	7163      	strb	r3, [r4, #5]
	cmds->hci_read_transmit_power_level = 1;
   2c21a:	7aa3      	ldrb	r3, [r4, #10]
   2c21c:	f043 0304 	orr.w	r3, r3, #4
   2c220:	72a3      	strb	r3, [r4, #10]
	cmds->hci_read_local_version_information = 1;
   2c222:	7ba3      	ldrb	r3, [r4, #14]
   2c224:	f043 0308 	orr.w	r3, r3, #8
   2c228:	73a3      	strb	r3, [r4, #14]
	cmds->hci_read_local_supported_features = 1;
   2c22a:	b2db      	uxtb	r3, r3
   2c22c:	f043 0320 	orr.w	r3, r3, #32
   2c230:	73a3      	strb	r3, [r4, #14]
	cmds->hci_read_bd_addr = 1;
   2c232:	7be3      	ldrb	r3, [r4, #15]
   2c234:	f043 0302 	orr.w	r3, r3, #2
   2c238:	73e3      	strb	r3, [r4, #15]
	cmds->hci_set_event_mask_page_2 = 1;
   2c23a:	7da3      	ldrb	r3, [r4, #22]
   2c23c:	f043 0304 	orr.w	r3, r3, #4
   2c240:	75a3      	strb	r3, [r4, #22]
	cmds->hci_le_set_event_mask = 1;
   2c242:	7e63      	ldrb	r3, [r4, #25]
   2c244:	f043 0301 	orr.w	r3, r3, #1
   2c248:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_read_buffer_size_v1 = 1;
   2c24a:	b2db      	uxtb	r3, r3
   2c24c:	f043 0302 	orr.w	r3, r3, #2
   2c250:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_read_local_supported_features = 1;
   2c252:	b2db      	uxtb	r3, r3
   2c254:	f043 0304 	orr.w	r3, r3, #4
   2c258:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_set_random_address = 1;
   2c25a:	b2db      	uxtb	r3, r3
   2c25c:	f043 0310 	orr.w	r3, r3, #16
   2c260:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_set_scan_parameters = 1;
   2c262:	7ea3      	ldrb	r3, [r4, #26]
   2c264:	f043 0304 	orr.w	r3, r3, #4
   2c268:	76a3      	strb	r3, [r4, #26]
	cmds->hci_le_set_scan_enable = 1;
   2c26a:	b2db      	uxtb	r3, r3
   2c26c:	f043 0308 	orr.w	r3, r3, #8
   2c270:	76a3      	strb	r3, [r4, #26]
	cmds->hci_le_create_connection = 1;
   2c272:	b2db      	uxtb	r3, r3
   2c274:	f043 0310 	orr.w	r3, r3, #16
   2c278:	76a3      	strb	r3, [r4, #26]
	cmds->hci_le_create_connection_cancel = 1;
   2c27a:	b2db      	uxtb	r3, r3
   2c27c:	f043 0320 	orr.w	r3, r3, #32
   2c280:	76a3      	strb	r3, [r4, #26]
	cmds->hci_le_read_filter_accept_list_size = 1;
   2c282:	b2db      	uxtb	r3, r3
   2c284:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2c288:	76a3      	strb	r3, [r4, #26]
	cmds->hci_le_clear_filter_accept_list = 1;
   2c28a:	b2db      	uxtb	r3, r3
   2c28c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2c290:	76a3      	strb	r3, [r4, #26]
	cmds->hci_le_add_device_to_filter_accept_list = 1;
   2c292:	7ee3      	ldrb	r3, [r4, #27]
   2c294:	f043 0301 	orr.w	r3, r3, #1
   2c298:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_remove_device_from_filter_accept_list = 1;
   2c29a:	b2db      	uxtb	r3, r3
   2c29c:	f043 0302 	orr.w	r3, r3, #2
   2c2a0:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_connection_update = 1;
   2c2a2:	b2db      	uxtb	r3, r3
   2c2a4:	f043 0304 	orr.w	r3, r3, #4
   2c2a8:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_set_host_channel_classification = 1;
   2c2aa:	b2db      	uxtb	r3, r3
   2c2ac:	f043 0308 	orr.w	r3, r3, #8
   2c2b0:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_read_channel_map = 1;
   2c2b2:	b2db      	uxtb	r3, r3
   2c2b4:	f043 0310 	orr.w	r3, r3, #16
   2c2b8:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_read_remote_features = 1;
   2c2ba:	b2db      	uxtb	r3, r3
   2c2bc:	f043 0320 	orr.w	r3, r3, #32
   2c2c0:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_encrypt = 1;
   2c2c2:	b2db      	uxtb	r3, r3
   2c2c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2c2c8:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_rand = 1;
   2c2ca:	b2db      	uxtb	r3, r3
   2c2cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2c2d0:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_enable_encryption = 1;
   2c2d2:	7f23      	ldrb	r3, [r4, #28]
   2c2d4:	f043 0301 	orr.w	r3, r3, #1
   2c2d8:	7723      	strb	r3, [r4, #28]
	cmds->hci_le_read_supported_states = 1;
   2c2da:	b2db      	uxtb	r3, r3
   2c2dc:	f043 0308 	orr.w	r3, r3, #8
   2c2e0:	7723      	strb	r3, [r4, #28]
	cmds->hci_le_receiver_test_v1 = 1;
   2c2e2:	b2db      	uxtb	r3, r3
   2c2e4:	f043 0310 	orr.w	r3, r3, #16
   2c2e8:	7723      	strb	r3, [r4, #28]
	cmds->hci_le_transmitter_test_v1 = 1;
   2c2ea:	b2db      	uxtb	r3, r3
   2c2ec:	f043 0320 	orr.w	r3, r3, #32
   2c2f0:	7723      	strb	r3, [r4, #28]
	cmds->hci_le_test_end = 1;
   2c2f2:	b2db      	uxtb	r3, r3
   2c2f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2c2f8:	7723      	strb	r3, [r4, #28]
	cmds->hci_read_authenticated_payload_timeout = 1;
   2c2fa:	f894 3020 	ldrb.w	r3, [r4, #32]
   2c2fe:	f043 0310 	orr.w	r3, r3, #16
   2c302:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_write_authenticated_payload_timeout = 1;
   2c306:	b2db      	uxtb	r3, r3
   2c308:	f043 0320 	orr.w	r3, r3, #32
   2c30c:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_data_length = 1;
   2c310:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   2c314:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2c318:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_read_suggested_default_data_length = 1;
   2c31c:	b2db      	uxtb	r3, r3
   2c31e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2c322:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_write_suggested_default_data_length = 1;
   2c326:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   2c32a:	f043 0301 	orr.w	r3, r3, #1
   2c32e:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_read_maximum_data_length = 1;
   2c332:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   2c336:	f043 0308 	orr.w	r3, r3, #8
   2c33a:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_le_read_phy = 1;
   2c33e:	b2db      	uxtb	r3, r3
   2c340:	f043 0310 	orr.w	r3, r3, #16
   2c344:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_le_set_default_phy = 1;
   2c348:	b2db      	uxtb	r3, r3
   2c34a:	f043 0320 	orr.w	r3, r3, #32
   2c34e:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_le_set_phy = 1;
   2c352:	b2db      	uxtb	r3, r3
   2c354:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2c358:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_le_receiver_test_v2 = 1;
   2c35c:	b2db      	uxtb	r3, r3
   2c35e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2c362:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_le_transmitter_test_v2 = 1;
   2c366:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   2c36a:	f043 0301 	orr.w	r3, r3, #1
   2c36e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	cmds->hci_le_read_transmit_power = 1;
   2c372:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   2c376:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2c37a:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	cmds->hci_le_read_local_p256_public_key = 1;
   2c37e:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   2c382:	f043 0302 	orr.w	r3, r3, #2
   2c386:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_generate_dhkey_v1 = 1;
   2c38a:	b2db      	uxtb	r3, r3
   2c38c:	f043 0304 	orr.w	r3, r3, #4
   2c390:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_generate_dhkey_v2 = 1;
   2c394:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   2c398:	f043 0304 	orr.w	r3, r3, #4
   2c39c:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
}
   2c3a0:	bd10      	pop	{r4, pc}

0002c3a2 <supported_features>:
{
   2c3a2:	b510      	push	{r4, lr}
   2c3a4:	4604      	mov	r4, r0
	memset(features, 0, sizeof(*features));
   2c3a6:	2208      	movs	r2, #8
   2c3a8:	2100      	movs	r1, #0
   2c3aa:	f7fc f999 	bl	286e0 <memset>
	features->bdedr_not_supported = 1;
   2c3ae:	7923      	ldrb	r3, [r4, #4]
   2c3b0:	f043 0320 	orr.w	r3, r3, #32
   2c3b4:	7123      	strb	r3, [r4, #4]
	features->le_supported = 1;
   2c3b6:	b2db      	uxtb	r3, r3
   2c3b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2c3bc:	7123      	strb	r3, [r4, #4]
}
   2c3be:	bd10      	pop	{r4, pc}

0002c3c0 <info_param_cmd_put>:
{
   2c3c0:	b508      	push	{r3, lr}
   2c3c2:	4603      	mov	r3, r0
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   2c3c4:	1d88      	adds	r0, r1, #6
   2c3c6:	f893 c001 	ldrb.w	ip, [r3, #1]
   2c3ca:	781b      	ldrb	r3, [r3, #0]
   2c3cc:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
   2c3d0:	b21b      	sxth	r3, r3
	switch (opcode)	{
   2c3d2:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
   2c3d6:	3b01      	subs	r3, #1
   2c3d8:	2b08      	cmp	r3, #8
   2c3da:	d820      	bhi.n	2c41e <info_param_cmd_put+0x5e>
   2c3dc:	e8df f003 	tbb	[pc, r3]
   2c3e0:	1f120b05 	.word	0x1f120b05
   2c3e4:	1f1f1f1f 	.word	0x1f1f1f1f
   2c3e8:	19          	.byte	0x19
   2c3e9:	00          	.byte	0x00
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   2c3ea:	7813      	ldrb	r3, [r2, #0]
   2c3ec:	3308      	adds	r3, #8
   2c3ee:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   2c3f0:	f7e0 ff13 	bl	d21a <sdc_hci_cmd_ip_read_local_version_information>
   2c3f4:	e014      	b.n	2c420 <info_param_cmd_put+0x60>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   2c3f6:	7813      	ldrb	r3, [r2, #0]
   2c3f8:	3340      	adds	r3, #64	; 0x40
   2c3fa:	7013      	strb	r3, [r2, #0]
		supported_commands((void *)event_out_params);
   2c3fc:	f7ff fef7 	bl	2c1ee <supported_commands>
		return 0;
   2c400:	2000      	movs	r0, #0
   2c402:	e00d      	b.n	2c420 <info_param_cmd_put+0x60>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   2c404:	7813      	ldrb	r3, [r2, #0]
   2c406:	3308      	adds	r3, #8
   2c408:	7013      	strb	r3, [r2, #0]
		supported_features((void *)event_out_params);
   2c40a:	f7ff ffca 	bl	2c3a2 <supported_features>
		return 0;
   2c40e:	2000      	movs	r0, #0
   2c410:	e006      	b.n	2c420 <info_param_cmd_put+0x60>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   2c412:	7813      	ldrb	r3, [r2, #0]
   2c414:	3306      	adds	r3, #6
   2c416:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   2c418:	f7e0 fefd 	bl	d216 <sdc_hci_cmd_ip_read_bd_addr>
   2c41c:	e000      	b.n	2c420 <info_param_cmd_put+0x60>
	switch (opcode)	{
   2c41e:	2001      	movs	r0, #1
}
   2c420:	bd08      	pop	{r3, pc}

0002c422 <le_supported_features>:
{
   2c422:	b510      	push	{r4, lr}
   2c424:	4604      	mov	r4, r0
	memset(features, 0, sizeof(*features));
   2c426:	2208      	movs	r2, #8
   2c428:	2100      	movs	r1, #0
   2c42a:	f7fc f959 	bl	286e0 <memset>
	features->params.le_encryption = 1;
   2c42e:	7823      	ldrb	r3, [r4, #0]
   2c430:	f043 0301 	orr.w	r3, r3, #1
   2c434:	7023      	strb	r3, [r4, #0]
	features->params.extended_reject_indication = 1;
   2c436:	b2db      	uxtb	r3, r3
   2c438:	f043 0304 	orr.w	r3, r3, #4
   2c43c:	7023      	strb	r3, [r4, #0]
	features->params.slave_initiated_features_exchange = 1;
   2c43e:	b2db      	uxtb	r3, r3
   2c440:	f043 0308 	orr.w	r3, r3, #8
   2c444:	7023      	strb	r3, [r4, #0]
	features->params.le_ping = 1;
   2c446:	b2db      	uxtb	r3, r3
   2c448:	f043 0310 	orr.w	r3, r3, #16
   2c44c:	7023      	strb	r3, [r4, #0]
	features->params.le_data_packet_length_extension = 1;
   2c44e:	b2db      	uxtb	r3, r3
   2c450:	f043 0320 	orr.w	r3, r3, #32
   2c454:	7023      	strb	r3, [r4, #0]
	features->params.extended_scanner_filter_policies = 1;
   2c456:	b2db      	uxtb	r3, r3
   2c458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2c45c:	7023      	strb	r3, [r4, #0]
	features->params.le_2m_phy = 1;
   2c45e:	7863      	ldrb	r3, [r4, #1]
   2c460:	f043 0301 	orr.w	r3, r3, #1
   2c464:	7063      	strb	r3, [r4, #1]
	features->params.channel_selection_algorithm_2 = 1;
   2c466:	b2db      	uxtb	r3, r3
   2c468:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2c46c:	7063      	strb	r3, [r4, #1]
}
   2c46e:	bd10      	pop	{r4, pc}

0002c470 <vs_zephyr_supported_commands>:
{
   2c470:	b510      	push	{r4, lr}
   2c472:	4604      	mov	r4, r0
	memset(cmds, 0, sizeof(*cmds));
   2c474:	2202      	movs	r2, #2
   2c476:	2100      	movs	r1, #0
   2c478:	f7fc f932 	bl	286e0 <memset>
	cmds->read_version_info = 1;
   2c47c:	7823      	ldrb	r3, [r4, #0]
   2c47e:	f043 0301 	orr.w	r3, r3, #1
   2c482:	7023      	strb	r3, [r4, #0]
	cmds->read_supported_commands = 1;
   2c484:	b2db      	uxtb	r3, r3
   2c486:	f043 0302 	orr.w	r3, r3, #2
   2c48a:	7023      	strb	r3, [r4, #0]
	cmds->write_bd_addr = 1;
   2c48c:	b2db      	uxtb	r3, r3
   2c48e:	f043 0320 	orr.w	r3, r3, #32
   2c492:	7023      	strb	r3, [r4, #0]
	cmds->read_static_addresses = 1;
   2c494:	7863      	ldrb	r3, [r4, #1]
   2c496:	f043 0301 	orr.w	r3, r3, #1
   2c49a:	7063      	strb	r3, [r4, #1]
	cmds->read_key_hierarchy_roots = 1;
   2c49c:	b2db      	uxtb	r3, r3
   2c49e:	f043 0302 	orr.w	r3, r3, #2
   2c4a2:	7063      	strb	r3, [r4, #1]
	cmds->read_chip_temperature = 1;
   2c4a4:	b2db      	uxtb	r3, r3
   2c4a6:	f043 0304 	orr.w	r3, r3, #4
   2c4aa:	7063      	strb	r3, [r4, #1]
}
   2c4ac:	bd10      	pop	{r4, pc}

0002c4ae <vs_supported_commands>:
{
   2c4ae:	b510      	push	{r4, lr}
   2c4b0:	4604      	mov	r4, r0
	memset(cmds, 0, sizeof(*cmds));
   2c4b2:	2202      	movs	r2, #2
   2c4b4:	2100      	movs	r1, #0
   2c4b6:	f7fc f913 	bl	286e0 <memset>
	cmds->read_supported_vs_commands = 1;
   2c4ba:	7823      	ldrb	r3, [r4, #0]
   2c4bc:	f043 0301 	orr.w	r3, r3, #1
   2c4c0:	7023      	strb	r3, [r4, #0]
	cmds->llpm_mode_set = 1;
   2c4c2:	b2db      	uxtb	r3, r3
   2c4c4:	f043 0302 	orr.w	r3, r3, #2
   2c4c8:	7023      	strb	r3, [r4, #0]
	cmds->conn_update = 1;
   2c4ca:	b2db      	uxtb	r3, r3
   2c4cc:	f043 0304 	orr.w	r3, r3, #4
   2c4d0:	7023      	strb	r3, [r4, #0]
	cmds->conn_event_extend = 1;
   2c4d2:	b2db      	uxtb	r3, r3
   2c4d4:	f043 0308 	orr.w	r3, r3, #8
   2c4d8:	7023      	strb	r3, [r4, #0]
	cmds->qos_conn_event_report_enable = 1;
   2c4da:	b2db      	uxtb	r3, r3
   2c4dc:	f043 0310 	orr.w	r3, r3, #16
   2c4e0:	7023      	strb	r3, [r4, #0]
	cmds->event_length_set = 1;
   2c4e2:	b2db      	uxtb	r3, r3
   2c4e4:	f043 0320 	orr.w	r3, r3, #32
   2c4e8:	7023      	strb	r3, [r4, #0]
}
   2c4ea:	bd10      	pop	{r4, pc}

0002c4ec <le_controller_cmd_put>:
{
   2c4ec:	b508      	push	{r3, lr}
   2c4ee:	4603      	mov	r3, r0
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   2c4f0:	3003      	adds	r0, #3
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   2c4f2:	3106      	adds	r1, #6
   2c4f4:	f893 c001 	ldrb.w	ip, [r3, #1]
   2c4f8:	781b      	ldrb	r3, [r3, #0]
   2c4fa:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
   2c4fe:	b21b      	sxth	r3, r3
	switch (opcode)	{
   2c500:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
   2c504:	3b01      	subs	r3, #1
   2c506:	2b5d      	cmp	r3, #93	; 0x5d
   2c508:	f200 80bc 	bhi.w	2c684 <le_controller_cmd_put+0x198>
   2c50c:	e8df f003 	tbb	[pc, r3]
   2c510:	ba39322f 	.word	0xba39322f
   2c514:	bababa41 	.word	0xbababa41
   2c518:	4744baba 	.word	0x4744baba
   2c51c:	57504d4a 	.word	0x57504d4a
   2c520:	63605d5a 	.word	0x63605d5a
   2c524:	756f6c66 	.word	0x756f6c66
   2c528:	7fbaba7c 	.word	0x7fbaba7c
   2c52c:	babababa 	.word	0xbabababa
   2c530:	948d87ba 	.word	0x948d87ba
   2c534:	baba9a97 	.word	0xbaba9a97
   2c538:	babababa 	.word	0xbabababa
   2c53c:	a7a0baba 	.word	0xa7a0baba
   2c540:	babab0ad 	.word	0xbabab0ad
   2c544:	babababa 	.word	0xbabababa
   2c548:	babababa 	.word	0xbabababa
   2c54c:	babababa 	.word	0xbabababa
   2c550:	babababa 	.word	0xbabababa
   2c554:	babababa 	.word	0xbabababa
   2c558:	bab3baba 	.word	0xbab3baba
   2c55c:	babababa 	.word	0xbabababa
   2c560:	babababa 	.word	0xbabababa
   2c564:	babababa 	.word	0xbabababa
   2c568:	babababa 	.word	0xbabababa
   2c56c:	9dba      	.short	0x9dba
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   2c56e:	f7e0 fe7c 	bl	d26a <sdc_hci_cmd_le_set_event_mask>
   2c572:	e088      	b.n	2c686 <le_controller_cmd_put+0x19a>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   2c574:	7813      	ldrb	r3, [r2, #0]
   2c576:	3303      	adds	r3, #3
   2c578:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   2c57a:	4608      	mov	r0, r1
   2c57c:	f7e0 fe5f 	bl	d23e <sdc_hci_cmd_le_read_buffer_size>
   2c580:	e081      	b.n	2c686 <le_controller_cmd_put+0x19a>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   2c582:	7813      	ldrb	r3, [r2, #0]
   2c584:	3308      	adds	r3, #8
   2c586:	7013      	strb	r3, [r2, #0]
		le_supported_features((void *)event_out_params);
   2c588:	4608      	mov	r0, r1
   2c58a:	f7ff ff4a 	bl	2c422 <le_supported_features>
		return 0;
   2c58e:	2000      	movs	r0, #0
   2c590:	e079      	b.n	2c686 <le_controller_cmd_put+0x19a>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   2c592:	f7e0 fe73 	bl	d27c <sdc_hci_cmd_le_set_random_address>
   2c596:	e076      	b.n	2c686 <le_controller_cmd_put+0x19a>
		return sdc_hci_cmd_le_set_scan_params((void *)cmd_params);
   2c598:	f7e0 fe74 	bl	d284 <sdc_hci_cmd_le_set_scan_params>
   2c59c:	e073      	b.n	2c686 <le_controller_cmd_put+0x19a>
		return sdc_hci_cmd_le_set_scan_enable((void *)cmd_params);
   2c59e:	f7e0 fe6f 	bl	d280 <sdc_hci_cmd_le_set_scan_enable>
   2c5a2:	e070      	b.n	2c686 <le_controller_cmd_put+0x19a>
		return sdc_hci_cmd_le_create_conn((void *)cmd_params);
   2c5a4:	f7e0 fe41 	bl	d22a <sdc_hci_cmd_le_create_conn>
   2c5a8:	e06d      	b.n	2c686 <le_controller_cmd_put+0x19a>
		return sdc_hci_cmd_le_create_conn_cancel();
   2c5aa:	f7e0 fe40 	bl	d22e <sdc_hci_cmd_le_create_conn_cancel>
   2c5ae:	e06a      	b.n	2c686 <le_controller_cmd_put+0x19a>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_filter_accept_list_size_return_t);
   2c5b0:	7813      	ldrb	r3, [r2, #0]
   2c5b2:	3301      	adds	r3, #1
   2c5b4:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   2c5b6:	4608      	mov	r0, r1
   2c5b8:	f7e0 fe45 	bl	d246 <sdc_hci_cmd_le_read_filter_accept_list_size>
   2c5bc:	e063      	b.n	2c686 <le_controller_cmd_put+0x19a>
		return sdc_hci_cmd_le_clear_filter_accept_list();
   2c5be:	f7e0 fe30 	bl	d222 <sdc_hci_cmd_le_clear_filter_accept_list>
   2c5c2:	e060      	b.n	2c686 <le_controller_cmd_put+0x19a>
		return sdc_hci_cmd_le_add_device_to_filter_accept_list((void *)cmd_params);
   2c5c4:	f7e0 fe2b 	bl	d21e <sdc_hci_cmd_le_add_device_to_filter_accept_list>
   2c5c8:	e05d      	b.n	2c686 <le_controller_cmd_put+0x19a>
		return sdc_hci_cmd_le_remove_device_from_filter_accept_list((void *)cmd_params);
   2c5ca:	f7e0 fe48 	bl	d25e <sdc_hci_cmd_le_remove_device_from_filter_accept_list>
   2c5ce:	e05a      	b.n	2c686 <le_controller_cmd_put+0x19a>
		return sdc_hci_cmd_le_conn_update((void *)cmd_params);
   2c5d0:	f7e0 fe29 	bl	d226 <sdc_hci_cmd_le_conn_update>
   2c5d4:	e057      	b.n	2c686 <le_controller_cmd_put+0x19a>
		return sdc_hci_cmd_le_set_host_channel_classification((void *)cmd_params);
   2c5d6:	f7e0 fe4d 	bl	d274 <sdc_hci_cmd_le_set_host_channel_classification>
   2c5da:	e054      	b.n	2c686 <le_controller_cmd_put+0x19a>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   2c5dc:	7813      	ldrb	r3, [r2, #0]
   2c5de:	3307      	adds	r3, #7
   2c5e0:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   2c5e2:	f7e0 fe2e 	bl	d242 <sdc_hci_cmd_le_read_channel_map>
   2c5e6:	e04e      	b.n	2c686 <le_controller_cmd_put+0x19a>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   2c5e8:	f7e0 fe33 	bl	d252 <sdc_hci_cmd_le_read_remote_features>
   2c5ec:	e04b      	b.n	2c686 <le_controller_cmd_put+0x19a>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   2c5ee:	7813      	ldrb	r3, [r2, #0]
   2c5f0:	3310      	adds	r3, #16
   2c5f2:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   2c5f4:	f7e0 fe1f 	bl	d236 <sdc_hci_cmd_le_encrypt>
   2c5f8:	e045      	b.n	2c686 <le_controller_cmd_put+0x19a>
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   2c5fa:	7813      	ldrb	r3, [r2, #0]
   2c5fc:	3308      	adds	r3, #8
   2c5fe:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   2c600:	4608      	mov	r0, r1
   2c602:	f7e0 fe1a 	bl	d23a <sdc_hci_cmd_le_rand>
   2c606:	e03e      	b.n	2c686 <le_controller_cmd_put+0x19a>
		return sdc_hci_cmd_le_enable_encryption((void *)cmd_params);
   2c608:	f7e0 fe13 	bl	d232 <sdc_hci_cmd_le_enable_encryption>
   2c60c:	e03b      	b.n	2c686 <le_controller_cmd_put+0x19a>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   2c60e:	7813      	ldrb	r3, [r2, #0]
   2c610:	3308      	adds	r3, #8
   2c612:	7013      	strb	r3, [r2, #0]
		le_read_supported_states((void *)event_out_params);
   2c614:	4608      	mov	r0, r1
   2c616:	f7ff fd89 	bl	2c12c <le_read_supported_states>
		return 0;
   2c61a:	2000      	movs	r0, #0
   2c61c:	e033      	b.n	2c686 <le_controller_cmd_put+0x19a>
		*param_length_out += sizeof(sdc_hci_cmd_le_set_data_length_return_t);
   2c61e:	7813      	ldrb	r3, [r2, #0]
   2c620:	3302      	adds	r3, #2
   2c622:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   2c624:	f7e0 fe1d 	bl	d262 <sdc_hci_cmd_le_set_data_length>
   2c628:	e02d      	b.n	2c686 <le_controller_cmd_put+0x19a>
		*param_length_out +=
   2c62a:	7813      	ldrb	r3, [r2, #0]
   2c62c:	3304      	adds	r3, #4
   2c62e:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   2c630:	4608      	mov	r0, r1
   2c632:	f7e0 fe10 	bl	d256 <sdc_hci_cmd_le_read_suggested_default_data_length>
   2c636:	e026      	b.n	2c686 <le_controller_cmd_put+0x19a>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   2c638:	f7e0 fe26 	bl	d288 <sdc_hci_cmd_le_write_suggested_default_data_length>
   2c63c:	e023      	b.n	2c686 <le_controller_cmd_put+0x19a>
		return hci_cmd_le_read_local_p256_public_key();
   2c63e:	f7f6 ff35 	bl	234ac <hci_cmd_le_read_local_p256_public_key>
   2c642:	e020      	b.n	2c686 <le_controller_cmd_put+0x19a>
		return hci_cmd_le_generate_dhkey((void *)cmd_params);
   2c644:	f000 f897 	bl	2c776 <hci_cmd_le_generate_dhkey>
   2c648:	e01d      	b.n	2c686 <le_controller_cmd_put+0x19a>
		return hci_cmd_le_generate_dhkey_v2((void *)cmd_params);
   2c64a:	f000 f899 	bl	2c780 <hci_cmd_le_generate_dhkey_v2>
   2c64e:	e01a      	b.n	2c686 <le_controller_cmd_put+0x19a>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   2c650:	7813      	ldrb	r3, [r2, #0]
   2c652:	3308      	adds	r3, #8
   2c654:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   2c656:	4608      	mov	r0, r1
   2c658:	f7e0 fdf7 	bl	d24a <sdc_hci_cmd_le_read_max_data_length>
   2c65c:	e013      	b.n	2c686 <le_controller_cmd_put+0x19a>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   2c65e:	7813      	ldrb	r3, [r2, #0]
   2c660:	3304      	adds	r3, #4
   2c662:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   2c664:	f7e0 fdf3 	bl	d24e <sdc_hci_cmd_le_read_phy>
   2c668:	e00d      	b.n	2c686 <le_controller_cmd_put+0x19a>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   2c66a:	f7e0 fdfc 	bl	d266 <sdc_hci_cmd_le_set_default_phy>
   2c66e:	e00a      	b.n	2c686 <le_controller_cmd_put+0x19a>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   2c670:	f7e0 fe02 	bl	d278 <sdc_hci_cmd_le_set_phy>
   2c674:	e007      	b.n	2c686 <le_controller_cmd_put+0x19a>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   2c676:	7813      	ldrb	r3, [r2, #0]
   2c678:	3302      	adds	r3, #2
   2c67a:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   2c67c:	4608      	mov	r0, r1
   2c67e:	f7e0 fdec 	bl	d25a <sdc_hci_cmd_le_read_transmit_power>
   2c682:	e000      	b.n	2c686 <le_controller_cmd_put+0x19a>
	switch (opcode)	{
   2c684:	2001      	movs	r0, #1
}
   2c686:	bd08      	pop	{r3, pc}

0002c688 <vs_cmd_put>:
{
   2c688:	b508      	push	{r3, lr}
   2c68a:	4603      	mov	r3, r0
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   2c68c:	3003      	adds	r0, #3
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   2c68e:	3106      	adds	r1, #6
   2c690:	f893 c001 	ldrb.w	ip, [r3, #1]
   2c694:	781b      	ldrb	r3, [r3, #0]
   2c696:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
	switch (opcode)	{
   2c69a:	f64f 4c0b 	movw	ip, #64523	; 0xfc0b
   2c69e:	4563      	cmp	r3, ip
   2c6a0:	d90f      	bls.n	2c6c2 <vs_cmd_put+0x3a>
   2c6a2:	f64f 5c05 	movw	ip, #64773	; 0xfd05
   2c6a6:	4563      	cmp	r3, ip
   2c6a8:	d863      	bhi.n	2c772 <vs_cmd_put+0xea>
   2c6aa:	f5b3 4f7d 	cmp.w	r3, #64768	; 0xfd00
   2c6ae:	d31a      	bcc.n	2c6e6 <vs_cmd_put+0x5e>
   2c6b0:	f5a3 437d 	sub.w	r3, r3, #64768	; 0xfd00
   2c6b4:	2b05      	cmp	r3, #5
   2c6b6:	d858      	bhi.n	2c76a <vs_cmd_put+0xe2>
   2c6b8:	e8df f003 	tbb	[pc, r3]
   2c6bc:	4e4b4840 	.word	0x4e4b4840
   2c6c0:	5451      	.short	0x5451
   2c6c2:	f5b3 4f7c 	cmp.w	r3, #64512	; 0xfc00
   2c6c6:	d801      	bhi.n	2c6cc <vs_cmd_put+0x44>
   2c6c8:	2001      	movs	r0, #1
}
   2c6ca:	bd08      	pop	{r3, pc}
	switch (opcode)	{
   2c6cc:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
   2c6d0:	3b01      	subs	r3, #1
   2c6d2:	2b0a      	cmp	r3, #10
   2c6d4:	d84b      	bhi.n	2c76e <vs_cmd_put+0xe6>
   2c6d6:	e8df f003 	tbb	[pc, r3]
   2c6da:	0f08      	.short	0x0f08
   2c6dc:	274a4a4a 	.word	0x274a4a4a
   2c6e0:	20174a4a 	.word	0x20174a4a
   2c6e4:	2a          	.byte	0x2a
   2c6e5:	00          	.byte	0x00
   2c6e6:	2001      	movs	r0, #1
   2c6e8:	e7ef      	b.n	2c6ca <vs_cmd_put+0x42>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   2c6ea:	7813      	ldrb	r3, [r2, #0]
   2c6ec:	330c      	adds	r3, #12
   2c6ee:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   2c6f0:	4608      	mov	r0, r1
   2c6f2:	f7d4 fb95 	bl	e20 <sdc_hci_cmd_vs_zephyr_read_version_info>
   2c6f6:	e7e8      	b.n	2c6ca <vs_cmd_put+0x42>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   2c6f8:	7813      	ldrb	r3, [r2, #0]
   2c6fa:	3340      	adds	r3, #64	; 0x40
   2c6fc:	7013      	strb	r3, [r2, #0]
		vs_zephyr_supported_commands((void *)event_out_params);
   2c6fe:	4608      	mov	r0, r1
   2c700:	f7ff feb6 	bl	2c470 <vs_zephyr_supported_commands>
		return 0;
   2c704:	2000      	movs	r0, #0
   2c706:	e7e0      	b.n	2c6ca <vs_cmd_put+0x42>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_static_addresses_return_t);
   2c708:	7813      	ldrb	r3, [r2, #0]
   2c70a:	1c58      	adds	r0, r3, #1
   2c70c:	7010      	strb	r0, [r2, #0]
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   2c70e:	3317      	adds	r3, #23
   2c710:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   2c712:	4608      	mov	r0, r1
   2c714:	f7e0 fd2e 	bl	d174 <sdc_hci_cmd_vs_zephyr_read_static_addresses>
   2c718:	e7d7      	b.n	2c6ca <vs_cmd_put+0x42>
		*param_length_out +=
   2c71a:	7813      	ldrb	r3, [r2, #0]
   2c71c:	3320      	adds	r3, #32
   2c71e:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   2c720:	4608      	mov	r0, r1
   2c722:	f7e0 fcda 	bl	d0da <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
   2c726:	e7d0      	b.n	2c6ca <vs_cmd_put+0x42>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   2c728:	f7e0 fd73 	bl	d212 <sdc_hci_cmd_vs_zephyr_write_bd_addr>
   2c72c:	e7cd      	b.n	2c6ca <vs_cmd_put+0x42>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_chip_temp_return_t);
   2c72e:	7813      	ldrb	r3, [r2, #0]
   2c730:	3301      	adds	r3, #1
   2c732:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_chip_temp((void *)event_out_params);
   2c734:	4608      	mov	r0, r1
   2c736:	f7e0 fcbc 	bl	d0b2 <sdc_hci_cmd_vs_zephyr_read_chip_temp>
   2c73a:	e7c6      	b.n	2c6ca <vs_cmd_put+0x42>
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   2c73c:	7813      	ldrb	r3, [r2, #0]
   2c73e:	3340      	adds	r3, #64	; 0x40
   2c740:	7013      	strb	r3, [r2, #0]
		vs_supported_commands((void *)event_out_params);
   2c742:	4608      	mov	r0, r1
   2c744:	f7ff feb3 	bl	2c4ae <vs_supported_commands>
		return 0;
   2c748:	2000      	movs	r0, #0
   2c74a:	e7be      	b.n	2c6ca <vs_cmd_put+0x42>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   2c74c:	f7e0 fcaa 	bl	d0a4 <sdc_hci_cmd_vs_llpm_mode_set>
   2c750:	e7bb      	b.n	2c6ca <vs_cmd_put+0x42>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   2c752:	f7e0 fc7b 	bl	d04c <sdc_hci_cmd_vs_conn_update>
   2c756:	e7b8      	b.n	2c6ca <vs_cmd_put+0x42>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   2c758:	f7e0 fc70 	bl	d03c <sdc_hci_cmd_vs_conn_event_extend>
   2c75c:	e7b5      	b.n	2c6ca <vs_cmd_put+0x42>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   2c75e:	f7e0 fca3 	bl	d0a8 <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   2c762:	e7b2      	b.n	2c6ca <vs_cmd_put+0x42>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   2c764:	f7e0 fc9c 	bl	d0a0 <sdc_hci_cmd_vs_event_length_set>
   2c768:	e7af      	b.n	2c6ca <vs_cmd_put+0x42>
	switch (opcode)	{
   2c76a:	2001      	movs	r0, #1
   2c76c:	e7ad      	b.n	2c6ca <vs_cmd_put+0x42>
   2c76e:	2001      	movs	r0, #1
   2c770:	e7ab      	b.n	2c6ca <vs_cmd_put+0x42>
   2c772:	2001      	movs	r0, #1
   2c774:	e7a9      	b.n	2c6ca <vs_cmd_put+0x42>

0002c776 <hci_cmd_le_generate_dhkey>:

uint8_t hci_cmd_le_generate_dhkey(struct bt_hci_cp_le_generate_dhkey *p_params)
{
   2c776:	b508      	push	{r3, lr}
	return cmd_le_generate_dhkey(p_params->key,
   2c778:	2100      	movs	r1, #0
   2c77a:	f7f6 feaf 	bl	234dc <cmd_le_generate_dhkey>
				     BT_HCI_LE_KEY_TYPE_GENERATED);
}
   2c77e:	bd08      	pop	{r3, pc}

0002c780 <hci_cmd_le_generate_dhkey_v2>:

uint8_t hci_cmd_le_generate_dhkey_v2(struct bt_hci_cp_le_generate_dhkey_v2 *p_params)
{
	if (p_params->key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
   2c780:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
   2c784:	2901      	cmp	r1, #1
   2c786:	d803      	bhi.n	2c790 <hci_cmd_le_generate_dhkey_v2+0x10>
{
   2c788:	b508      	push	{r3, lr}
		return BT_HCI_ERR_INVALID_PARAM;
	}

	return cmd_le_generate_dhkey(p_params->key, p_params->key_type);
   2c78a:	f7f6 fea7 	bl	234dc <cmd_le_generate_dhkey>
}
   2c78e:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_INVALID_PARAM;
   2c790:	2012      	movs	r0, #18
}
   2c792:	4770      	bx	lr

0002c794 <m_config_clock_source_get>:
}
   2c794:	2000      	movs	r0, #0
   2c796:	4770      	bx	lr

0002c798 <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   2c798:	4668      	mov	r0, sp
   2c79a:	f020 0107 	bic.w	r1, r0, #7
   2c79e:	468d      	mov	sp, r1
   2c7a0:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   2c7a2:	f7de fdfb 	bl	b39c <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   2c7a6:	f7ea fa67 	bl	16c78 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   2c7aa:	f7ea fb69 	bl	16e80 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   2c7ae:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2c7b2:	4685      	mov	sp, r0
   2c7b4:	4770      	bx	lr

0002c7b6 <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   2c7b6:	4668      	mov	r0, sp
   2c7b8:	f020 0107 	bic.w	r1, r0, #7
   2c7bc:	468d      	mov	sp, r1
   2c7be:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   2c7c0:	f7de fd62 	bl	b288 <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   2c7c4:	f7ea fa58 	bl	16c78 <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   2c7c8:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2c7cc:	4685      	mov	sp, r0
   2c7ce:	4770      	bx	lr

0002c7d0 <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   2c7d0:	4668      	mov	r0, sp
   2c7d2:	f020 0107 	bic.w	r1, r0, #7
   2c7d6:	468d      	mov	sp, r1
   2c7d8:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   2c7da:	f7dc fa97 	bl	8d0c <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   2c7de:	f7ea fa4b 	bl	16c78 <_arch_isr_direct_pm>
   2c7e2:	f7ea fb4d 	bl	16e80 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   2c7e6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2c7ea:	4685      	mov	sp, r0
   2c7ec:	4770      	bx	lr

0002c7ee <mpsl_lib_init_sys>:
{
   2c7ee:	b510      	push	{r4, lr}
	err = mpsl_lib_init_internal();
   2c7f0:	f7f6 feac 	bl	2354c <mpsl_lib_init_internal>
	if (err) {
   2c7f4:	4604      	mov	r4, r0
   2c7f6:	b108      	cbz	r0, 2c7fc <mpsl_lib_init_sys+0xe>
}
   2c7f8:	4620      	mov	r0, r4
   2c7fa:	bd10      	pop	{r4, pc}
	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   2c7fc:	2201      	movs	r2, #1
   2c7fe:	2100      	movs	r1, #0
   2c800:	2008      	movs	r0, #8
   2c802:	f7fb fe74 	bl	284ee <z_arm_irq_priority_set>
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   2c806:	2201      	movs	r2, #1
   2c808:	2100      	movs	r1, #0
   2c80a:	200b      	movs	r0, #11
   2c80c:	f7fb fe6f 	bl	284ee <z_arm_irq_priority_set>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   2c810:	2201      	movs	r2, #1
   2c812:	2100      	movs	r1, #0
   2c814:	4610      	mov	r0, r2
   2c816:	f7fb fe6a 	bl	284ee <z_arm_irq_priority_set>
	return 0;
   2c81a:	e7ed      	b.n	2c7f8 <mpsl_lib_init_sys+0xa>

0002c81c <mpsl_low_prio_work_handler>:
{
   2c81c:	b508      	push	{r3, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   2c81e:	f04f 30ff 	mov.w	r0, #4294967295
   2c822:	f04f 31ff 	mov.w	r1, #4294967295
   2c826:	f7f5 ffa3 	bl	22770 <multithreading_lock_acquire>
	mpsl_low_priority_process();
   2c82a:	f7e3 fe6c 	bl	10506 <mpsl_low_priority_process>
	MULTITHREADING_LOCK_RELEASE();
   2c82e:	f7f5 ffa9 	bl	22784 <multithreading_lock_release>
}
   2c832:	bd08      	pop	{r3, pc}

0002c834 <mpsl_fem_api_init>:

#include <mpsl_fem_init.h>
#include <zephyr/device.h>

static int mpsl_fem_api_init(const struct device *dev)
{
   2c834:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	mpsl_fem_init();
   2c836:	f7e4 f83f 	bl	108b8 <mpsl_fem_init>

	return 0;
}
   2c83a:	2000      	movs	r0, #0
   2c83c:	bd08      	pop	{r3, pc}

0002c83e <nrfx_clock_stop>:
	switch (domain) {
   2c83e:	2801      	cmp	r0, #1
   2c840:	d000      	beq.n	2c844 <nrfx_clock_stop+0x6>
   2c842:	4770      	bx	lr
{
   2c844:	b508      	push	{r3, lr}
		mpsl_clock_hfclk_release();
   2c846:	f7df fc3d 	bl	c0c4 <mpsl_clock_hfclk_release>
}
   2c84a:	bd08      	pop	{r3, pc}

0002c84c <nrfx_clock_enable>:
}
   2c84c:	4770      	bx	lr

0002c84e <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
   2c84e:	b508      	push	{r3, lr}
	MPSL_IRQ_CLOCK_Handler();
   2c850:	f7df fa42 	bl	bcd8 <MPSL_IRQ_CLOCK_Handler>
}
   2c854:	bd08      	pop	{r3, pc}

0002c856 <nrf52_errata_36>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2c856:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2c85a:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
                        return true;
                }
            }
        #endif
        #if defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)
            if (var1 == 0x0D)
   2c85e:	2b0d      	cmp	r3, #13
   2c860:	d001      	beq.n	2c866 <nrf52_errata_36+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   2c862:	2000      	movs	r0, #0
   2c864:	4770      	bx	lr
                        return true;
   2c866:	2001      	movs	r0, #1
    #endif
}
   2c868:	4770      	bx	lr

0002c86a <nrf52_errata_66>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2c86a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2c86e:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
                        return true;
                }
            }
        #endif
        #if defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)
            if (var1 == 0x0D)
   2c872:	2b0d      	cmp	r3, #13
   2c874:	d001      	beq.n	2c87a <nrf52_errata_66+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   2c876:	2000      	movs	r0, #0
   2c878:	4770      	bx	lr
                        return true;
   2c87a:	2001      	movs	r0, #1
    #endif
}
   2c87c:	4770      	bx	lr

0002c87e <nrf52_errata_136>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2c87e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2c882:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
                        return true;
                }
            }
        #endif
        #if defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)
            if (var1 == 0x0D)
   2c886:	2b0d      	cmp	r3, #13
   2c888:	d001      	beq.n	2c88e <nrf52_errata_136+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   2c88a:	2000      	movs	r0, #0
   2c88c:	4770      	bx	lr
                        return true;
   2c88e:	2001      	movs	r0, #1
    #endif
}
   2c890:	4770      	bx	lr

0002c892 <nrf52_configuration_249>:
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2c892:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2c896:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   2c89a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                        return true;
                }
            }
        #endif
        #if defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)
            if (var1 == 0x0D)
   2c89e:	2a0d      	cmp	r2, #13
   2c8a0:	d001      	beq.n	2c8a6 <nrf52_configuration_249+0x14>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   2c8a2:	2000      	movs	r0, #0
   2c8a4:	4770      	bx	lr
                switch(var2)
   2c8a6:	b10b      	cbz	r3, 2c8ac <nrf52_configuration_249+0x1a>
                        return true;
   2c8a8:	2001      	movs	r0, #1
    #endif
}
   2c8aa:	4770      	bx	lr
                switch(var2)
   2c8ac:	2000      	movs	r0, #0
   2c8ae:	4770      	bx	lr

0002c8b0 <nrf52_handle_approtect>:
        Otherwise, the fw branch state is loaded from UICR, emulating the legacy APPROTECT behavior.

         The same mechanism is implemented for SECURE APPROTECT, with the macros
         ENABLE_SECURE_APPROTECT and ENABLE_SECURE_APPROTECT_USER_HANDLING. */
static inline void nrf52_handle_approtect(void)
{
   2c8b0:	b508      	push	{r3, lr}
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   2c8b2:	f7ff ffee 	bl	2c892 <nrf52_configuration_249>
   2c8b6:	b138      	cbz	r0, 2c8c8 <nrf52_handle_approtect+0x18>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   2c8b8:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   2c8bc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   2c8c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2c8c4:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
            }
        #endif
    #endif
}
   2c8c8:	bd08      	pop	{r3, pc}

0002c8ca <nrfx_isr>:
#include <nrfx.h>
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
   2c8ca:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
   2c8cc:	4780      	blx	r0
}
   2c8ce:	bd08      	pop	{r3, pc}

0002c8d0 <nrf_gpiote_event_configure>:
{
   2c8d0:	b410      	push	{r4}
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   2c8d2:	f501 71a2 	add.w	r1, r1, #324	; 0x144
   2c8d6:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   2c8da:	f424 344f 	bic.w	r4, r4, #211968	; 0x33c00
   2c8de:	f424 7440 	bic.w	r4, r4, #768	; 0x300
   2c8e2:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2c8e6:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   2c8ea:	0212      	lsls	r2, r2, #8
   2c8ec:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
   2c8f0:	041b      	lsls	r3, r3, #16
   2c8f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2c8f6:	431a      	orrs	r2, r3
   2c8f8:	4314      	orrs	r4, r2
   2c8fa:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
   2c8fe:	bc10      	pop	{r4}
   2c900:	4770      	bx	lr

0002c902 <nrf_gpiote_task_configure>:
{
   2c902:	b410      	push	{r4}
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   2c904:	f501 71a2 	add.w	r1, r1, #324	; 0x144
   2c908:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   2c90c:	f424 1499 	bic.w	r4, r4, #1253376	; 0x132000
   2c910:	f424 54f8 	bic.w	r4, r4, #7936	; 0x1f00
   2c914:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2c918:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   2c91c:	0212      	lsls	r2, r2, #8
   2c91e:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   2c922:	041b      	lsls	r3, r3, #16
   2c924:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2c928:	431a      	orrs	r2, r3
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   2c92a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   2c92e:	051b      	lsls	r3, r3, #20
   2c930:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   2c934:	431a      	orrs	r2, r3
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2c936:	4314      	orrs	r4, r2
   2c938:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
   2c93c:	bc10      	pop	{r4}
   2c93e:	4770      	bx	lr

0002c940 <nrf_gpio_cfg_sense_set>:
{
   2c940:	b500      	push	{lr}
   2c942:	b085      	sub	sp, #20
   2c944:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   2c948:	f10d 030f 	add.w	r3, sp, #15
   2c94c:	9301      	str	r3, [sp, #4]
   2c94e:	2100      	movs	r1, #0
   2c950:	9100      	str	r1, [sp, #0]
   2c952:	460b      	mov	r3, r1
   2c954:	460a      	mov	r2, r1
   2c956:	f7f6 ffdd 	bl	23914 <nrf_gpio_reconfigure>
}
   2c95a:	b005      	add	sp, #20
   2c95c:	f85d fb04 	ldr.w	pc, [sp], #4

0002c960 <pin_is_task_output>:
{
   2c960:	b510      	push	{r4, lr}
   2c962:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   2c964:	f7f7 f874 	bl	23a50 <pin_is_output>
   2c968:	b128      	cbz	r0, 2c976 <pin_is_task_output+0x16>
   2c96a:	4620      	mov	r0, r4
   2c96c:	f7f7 f85a 	bl	23a24 <pin_in_use_by_te>
   2c970:	b118      	cbz	r0, 2c97a <pin_is_task_output+0x1a>
   2c972:	2001      	movs	r0, #1
   2c974:	e000      	b.n	2c978 <pin_is_task_output+0x18>
   2c976:	2000      	movs	r0, #0
}
   2c978:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   2c97a:	2000      	movs	r0, #0
   2c97c:	e7fc      	b.n	2c978 <pin_is_task_output+0x18>

0002c97e <pin_is_input>:
{
   2c97e:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
   2c980:	f7f7 f866 	bl	23a50 <pin_is_output>
   2c984:	f080 0001 	eor.w	r0, r0, #1
}
   2c988:	b2c0      	uxtb	r0, r0
   2c98a:	bd08      	pop	{r3, pc}

0002c98c <gpiote_polarity_to_trigger>:
}
   2c98c:	4770      	bx	lr

0002c98e <gpiote_trigger_to_polarity>:
}
   2c98e:	4770      	bx	lr

0002c990 <is_level>:
}
   2c990:	2803      	cmp	r0, #3
   2c992:	bf94      	ite	ls
   2c994:	2000      	movls	r0, #0
   2c996:	2001      	movhi	r0, #1
   2c998:	4770      	bx	lr

0002c99a <latch_pending_read_and_check>:
{
   2c99a:	b510      	push	{r4, lr}
   2c99c:	4604      	mov	r4, r0
    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);
   2c99e:	4602      	mov	r2, r0
   2c9a0:	2102      	movs	r1, #2
   2c9a2:	2000      	movs	r0, #0
   2c9a4:	f7f7 f812 	bl	239cc <nrf_gpio_latches_read_and_clear>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   2c9a8:	2300      	movs	r3, #0
   2c9aa:	2b01      	cmp	r3, #1
   2c9ac:	d804      	bhi.n	2c9b8 <latch_pending_read_and_check+0x1e>
        if (latch[port_idx])
   2c9ae:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   2c9b2:	b91a      	cbnz	r2, 2c9bc <latch_pending_read_and_check+0x22>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   2c9b4:	3301      	adds	r3, #1
   2c9b6:	e7f8      	b.n	2c9aa <latch_pending_read_and_check+0x10>
    return false;
   2c9b8:	2000      	movs	r0, #0
}
   2c9ba:	bd10      	pop	{r4, pc}
            return true;
   2c9bc:	2001      	movs	r0, #1
   2c9be:	e7fc      	b.n	2c9ba <latch_pending_read_and_check+0x20>

0002c9c0 <nrf_spi_configure>:
NRF_STATIC_INLINE void nrf_spi_configure(NRF_SPI_Type *      p_reg,
                                         nrf_spi_mode_t      spi_mode,
                                         nrf_spi_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPI_BIT_ORDER_MSB_FIRST ?
        SPI_CONFIG_ORDER_MsbFirst : SPI_CONFIG_ORDER_LsbFirst);
   2c9c0:	3a00      	subs	r2, #0
   2c9c2:	bf18      	it	ne
   2c9c4:	2201      	movne	r2, #1
    switch (spi_mode)
   2c9c6:	2902      	cmp	r1, #2
   2c9c8:	d009      	beq.n	2c9de <nrf_spi_configure+0x1e>
   2c9ca:	2903      	cmp	r1, #3
   2c9cc:	d00a      	beq.n	2c9e4 <nrf_spi_configure+0x24>
   2c9ce:	2901      	cmp	r1, #1
   2c9d0:	d002      	beq.n	2c9d8 <nrf_spi_configure+0x18>
    case NRF_SPI_MODE_3:
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Trailing   << SPI_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
   2c9d2:	f8c0 2554 	str.w	r2, [r0, #1364]	; 0x554
}
   2c9d6:	4770      	bx	lr
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
   2c9d8:	f042 0202 	orr.w	r2, r2, #2
        break;
   2c9dc:	e7f9      	b.n	2c9d2 <nrf_spi_configure+0x12>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   2c9de:	f042 0204 	orr.w	r2, r2, #4
        break;
   2c9e2:	e7f6      	b.n	2c9d2 <nrf_spi_configure+0x12>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   2c9e4:	f042 0206 	orr.w	r2, r2, #6
        break;
   2c9e8:	e7f3      	b.n	2c9d2 <nrf_spi_configure+0x12>

0002c9ea <transfer_byte>:
{
   2c9ea:	b430      	push	{r4, r5}
   2c9ec:	b082      	sub	sp, #8
    return p_reg->RXD;
   2c9ee:	f8d0 3518 	ldr.w	r3, [r0, #1304]	; 0x518
   2c9f2:	b2db      	uxtb	r3, r3
    volatile uint8_t rx_data = nrf_spi_rxd_get(p_spi);
   2c9f4:	f88d 3007 	strb.w	r3, [sp, #7]
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
   2c9f8:	6a0b      	ldr	r3, [r1, #32]
   2c9fa:	698a      	ldr	r2, [r1, #24]
   2c9fc:	4293      	cmp	r3, r2
   2c9fe:	d203      	bcs.n	2ca08 <transfer_byte+0x1e>
        p_cb->evt.xfer_desc.p_rx_buffer[p_cb->bytes_transferred] = rx_data;
   2ca00:	694a      	ldr	r2, [r1, #20]
   2ca02:	f89d 4007 	ldrb.w	r4, [sp, #7]
   2ca06:	54d4      	strb	r4, [r2, r3]
    ++p_cb->bytes_transferred;
   2ca08:	6a0b      	ldr	r3, [r1, #32]
   2ca0a:	1c5a      	adds	r2, r3, #1
   2ca0c:	620a      	str	r2, [r1, #32]
    size_t bytes_used = p_cb->bytes_transferred + 1;
   2ca0e:	3302      	adds	r3, #2
    if (p_cb->abort)
   2ca10:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
   2ca14:	b13c      	cbz	r4, 2ca26 <transfer_byte+0x3c>
        if (bytes_used < p_cb->evt.xfer_desc.tx_length)
   2ca16:	690c      	ldr	r4, [r1, #16]
   2ca18:	429c      	cmp	r4, r3
   2ca1a:	d900      	bls.n	2ca1e <transfer_byte+0x34>
            p_cb->evt.xfer_desc.tx_length = bytes_used;
   2ca1c:	610b      	str	r3, [r1, #16]
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   2ca1e:	698c      	ldr	r4, [r1, #24]
   2ca20:	429c      	cmp	r4, r3
   2ca22:	d900      	bls.n	2ca26 <transfer_byte+0x3c>
            p_cb->evt.xfer_desc.rx_length = bytes_used;
   2ca24:	618b      	str	r3, [r1, #24]
    if (bytes_used < p_cb->evt.xfer_desc.tx_length)
   2ca26:	690c      	ldr	r4, [r1, #16]
   2ca28:	429c      	cmp	r4, r3
   2ca2a:	d808      	bhi.n	2ca3e <transfer_byte+0x54>
    else if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   2ca2c:	698d      	ldr	r5, [r1, #24]
   2ca2e:	429d      	cmp	r5, r3
   2ca30:	d80d      	bhi.n	2ca4e <transfer_byte+0x64>
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
   2ca32:	42a2      	cmp	r2, r4
   2ca34:	d310      	bcc.n	2ca58 <transfer_byte+0x6e>
   2ca36:	42aa      	cmp	r2, r5
   2ca38:	d210      	bcs.n	2ca5c <transfer_byte+0x72>
   2ca3a:	2001      	movs	r0, #1
   2ca3c:	e004      	b.n	2ca48 <transfer_byte+0x5e>
        nrf_spi_txd_set(p_spi, p_cb->evt.xfer_desc.p_tx_buffer[bytes_used]);
   2ca3e:	68ca      	ldr	r2, [r1, #12]
   2ca40:	5cd3      	ldrb	r3, [r2, r3]
    p_reg->TXD = data;
   2ca42:	f8c0 351c 	str.w	r3, [r0, #1308]	; 0x51c
        return true;
   2ca46:	2001      	movs	r0, #1
}
   2ca48:	b002      	add	sp, #8
   2ca4a:	bc30      	pop	{r4, r5}
   2ca4c:	4770      	bx	lr
        nrf_spi_txd_set(p_spi, p_cb->orc);
   2ca4e:	7fcb      	ldrb	r3, [r1, #31]
   2ca50:	f8c0 351c 	str.w	r3, [r0, #1308]	; 0x51c
        return true;
   2ca54:	2001      	movs	r0, #1
   2ca56:	e7f7      	b.n	2ca48 <transfer_byte+0x5e>
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
   2ca58:	2001      	movs	r0, #1
   2ca5a:	e7f5      	b.n	2ca48 <transfer_byte+0x5e>
   2ca5c:	2000      	movs	r0, #0
   2ca5e:	e7f3      	b.n	2ca48 <transfer_byte+0x5e>

0002ca60 <irq_handler>:
{
   2ca60:	b510      	push	{r4, lr}
   2ca62:	460c      	mov	r4, r1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2ca64:	2200      	movs	r2, #0
   2ca66:	f8c0 2108 	str.w	r2, [r0, #264]	; 0x108
   2ca6a:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
    if (!transfer_byte(p_spi, p_cb))
   2ca6e:	f7ff ffbc 	bl	2c9ea <transfer_byte>
   2ca72:	b100      	cbz	r0, 2ca76 <irq_handler+0x16>
}
   2ca74:	bd10      	pop	{r4, pc}
        finish_transfer(p_cb);
   2ca76:	4620      	mov	r0, r4
   2ca78:	f7f7 fc52 	bl	24320 <finish_transfer>
}
   2ca7c:	e7fa      	b.n	2ca74 <irq_handler+0x14>

0002ca7e <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
   2ca7e:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
   2ca80:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
   2ca82:	4293      	cmp	r3, r2
   2ca84:	d804      	bhi.n	2ca90 <_GetAvailWriteSpace+0x12>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   2ca86:	6881      	ldr	r1, [r0, #8]
   2ca88:	1a8a      	subs	r2, r1, r2
   2ca8a:	4413      	add	r3, r2
   2ca8c:	1e58      	subs	r0, r3, #1
   2ca8e:	4770      	bx	lr
    r = RdOff - WrOff - 1u;
   2ca90:	1a98      	subs	r0, r3, r2
   2ca92:	3801      	subs	r0, #1
}
   2ca94:	4770      	bx	lr

0002ca96 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   2ca96:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2ca9a:	4604      	mov	r4, r0
   2ca9c:	4688      	mov	r8, r1
   2ca9e:	4616      	mov	r6, r2
  WrOff = pRing->WrOff;
   2caa0:	68c5      	ldr	r5, [r0, #12]
  Rem = pRing->SizeOfBuffer - WrOff;
   2caa2:	6887      	ldr	r7, [r0, #8]
   2caa4:	eba7 0905 	sub.w	r9, r7, r5
  if (Rem > NumBytes) {
   2caa8:	4591      	cmp	r9, r2
   2caaa:	d907      	bls.n	2cabc <_WriteNoCheck+0x26>
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   2caac:	6840      	ldr	r0, [r0, #4]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
   2caae:	4428      	add	r0, r5
   2cab0:	f7fb fde7 	bl	28682 <memcpy>
    pRing->WrOff = WrOff + NumBytes;
   2cab4:	4435      	add	r5, r6
   2cab6:	60e5      	str	r5, [r4, #12]
}
   2cab8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   2cabc:	6840      	ldr	r0, [r0, #4]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
   2cabe:	464a      	mov	r2, r9
   2cac0:	4428      	add	r0, r5
   2cac2:	f7fb fdde 	bl	28682 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
   2cac6:	1bed      	subs	r5, r5, r7
   2cac8:	4435      	add	r5, r6
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
   2caca:	462a      	mov	r2, r5
   2cacc:	eb08 0109 	add.w	r1, r8, r9
   2cad0:	6860      	ldr	r0, [r4, #4]
   2cad2:	f7fb fdd6 	bl	28682 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   2cad6:	60e5      	str	r5, [r4, #12]
}
   2cad8:	e7ee      	b.n	2cab8 <_WriteNoCheck+0x22>

0002cada <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   2cada:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2cade:	4606      	mov	r6, r0
   2cae0:	4688      	mov	r8, r1
   2cae2:	4617      	mov	r7, r2
  WrOff = pRing->WrOff;
   2cae4:	68c5      	ldr	r5, [r0, #12]
  NumBytesWritten = 0u;
   2cae6:	f04f 0900 	mov.w	r9, #0
   2caea:	e018      	b.n	2cb1e <_WriteBlocking+0x44>
      NumBytesToWrite = RdOff - WrOff - 1u;
   2caec:	1b5b      	subs	r3, r3, r5
   2caee:	1e5a      	subs	r2, r3, #1
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   2caf0:	68b3      	ldr	r3, [r6, #8]
   2caf2:	1b5c      	subs	r4, r3, r5
   2caf4:	4294      	cmp	r4, r2
   2caf6:	bf28      	it	cs
   2caf8:	4614      	movcs	r4, r2
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   2cafa:	42bc      	cmp	r4, r7
   2cafc:	bf28      	it	cs
   2cafe:	463c      	movcs	r4, r7
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   2cb00:	6870      	ldr	r0, [r6, #4]
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
   2cb02:	4622      	mov	r2, r4
   2cb04:	4641      	mov	r1, r8
   2cb06:	4428      	add	r0, r5
   2cb08:	f7fb fdbb 	bl	28682 <memcpy>
    NumBytesWritten += NumBytesToWrite;
   2cb0c:	44a1      	add	r9, r4
    pBuffer         += NumBytesToWrite;
   2cb0e:	44a0      	add	r8, r4
    NumBytes        -= NumBytesToWrite;
   2cb10:	1b3f      	subs	r7, r7, r4
    WrOff           += NumBytesToWrite;
   2cb12:	4425      	add	r5, r4
    if (WrOff == pRing->SizeOfBuffer) {
   2cb14:	68b3      	ldr	r3, [r6, #8]
   2cb16:	42ab      	cmp	r3, r5
   2cb18:	d009      	beq.n	2cb2e <_WriteBlocking+0x54>
    pRing->WrOff = WrOff;
   2cb1a:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
   2cb1c:	b14f      	cbz	r7, 2cb32 <_WriteBlocking+0x58>
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   2cb1e:	6933      	ldr	r3, [r6, #16]
    if (RdOff > WrOff) {
   2cb20:	429d      	cmp	r5, r3
   2cb22:	d3e3      	bcc.n	2caec <_WriteBlocking+0x12>
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   2cb24:	68b2      	ldr	r2, [r6, #8]
   2cb26:	1b5b      	subs	r3, r3, r5
   2cb28:	441a      	add	r2, r3
   2cb2a:	3a01      	subs	r2, #1
   2cb2c:	e7e0      	b.n	2caf0 <_WriteBlocking+0x16>
      WrOff = 0u;
   2cb2e:	2500      	movs	r5, #0
   2cb30:	e7f3      	b.n	2cb1a <_WriteBlocking+0x40>
}
   2cb32:	4648      	mov	r0, r9
   2cb34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002cb38 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
   2cb38:	b508      	push	{r3, lr}
  _DoInit();
   2cb3a:	f7f7 fd75 	bl	24628 <_DoInit>
}
   2cb3e:	bd08      	pop	{r3, pc}

0002cb40 <rtt_init>:
{
   2cb40:	b508      	push	{r3, lr}
	SEGGER_RTT_Init();
   2cb42:	f7ff fff9 	bl	2cb38 <SEGGER_RTT_Init>
}
   2cb46:	2000      	movs	r0, #0
   2cb48:	bd08      	pop	{r3, pc}

0002cb4a <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   2cb4a:	b160      	cbz	r0, 2cb66 <z_device_is_ready+0x1c>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   2cb4c:	68c3      	ldr	r3, [r0, #12]
   2cb4e:	785a      	ldrb	r2, [r3, #1]
   2cb50:	f012 0f01 	tst.w	r2, #1
   2cb54:	d003      	beq.n	2cb5e <z_device_is_ready+0x14>
   2cb56:	781b      	ldrb	r3, [r3, #0]
   2cb58:	b11b      	cbz	r3, 2cb62 <z_device_is_ready+0x18>
   2cb5a:	2000      	movs	r0, #0
   2cb5c:	4770      	bx	lr
   2cb5e:	2000      	movs	r0, #0
   2cb60:	4770      	bx	lr
   2cb62:	2001      	movs	r0, #1
   2cb64:	4770      	bx	lr
		return false;
   2cb66:	2000      	movs	r0, #0
}
   2cb68:	4770      	bx	lr

0002cb6a <z_early_memset>:
{
   2cb6a:	b508      	push	{r3, lr}
	(void) memset(dst, c, n);
   2cb6c:	f7fb fdb8 	bl	286e0 <memset>
}
   2cb70:	bd08      	pop	{r3, pc}

0002cb72 <z_early_memcpy>:
{
   2cb72:	b508      	push	{r3, lr}
	(void) memcpy(dst, src, n);
   2cb74:	f7fb fd85 	bl	28682 <memcpy>
}
   2cb78:	bd08      	pop	{r3, pc}

0002cb7a <k_heap_init>:
{
   2cb7a:	b510      	push	{r4, lr}
	sys_dlist_init(&w->waitq);
   2cb7c:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
   2cb80:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
   2cb82:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
   2cb84:	f7fa fa25 	bl	26fd2 <sys_heap_init>
}
   2cb88:	bd10      	pop	{r4, pc}

0002cb8a <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   2cb8a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2cb8e:	b085      	sub	sp, #20
   2cb90:	4607      	mov	r7, r0
   2cb92:	9103      	str	r1, [sp, #12]
   2cb94:	4692      	mov	sl, r2
   2cb96:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   2cb98:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2cb9a:	4628      	mov	r0, r5
   2cb9c:	4621      	mov	r1, r4
   2cb9e:	f000 fd88 	bl	2d6b2 <sys_clock_timeout_end_calc>
   2cba2:	4606      	mov	r6, r0
   2cba4:	4689      	mov	r9, r1
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   2cba6:	f1b4 3fff 	cmp.w	r4, #4294967295
   2cbaa:	bf08      	it	eq
   2cbac:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   2cbb0:	d00d      	beq.n	2cbce <k_heap_aligned_alloc+0x44>

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   2cbb2:	f107 0b14 	add.w	fp, r7, #20
	__asm__ volatile(
   2cbb6:	f04f 0340 	mov.w	r3, #64	; 0x40
   2cbba:	f3ef 8511 	mrs	r5, BASEPRI
   2cbbe:	f383 8812 	msr	BASEPRI_MAX, r3
   2cbc2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");

	bool blocked_alloc = false;
   2cbc6:	f04f 0800 	mov.w	r8, #0
	void *ret = NULL;
   2cbca:	4644      	mov	r4, r8

	while (ret == NULL) {
   2cbcc:	e014      	b.n	2cbf8 <k_heap_aligned_alloc+0x6e>
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   2cbce:	f04f 36ff 	mov.w	r6, #4294967295
   2cbd2:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
   2cbd6:	e7ec      	b.n	2cbb2 <k_heap_aligned_alloc+0x28>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2cbd8:	9000      	str	r0, [sp, #0]
   2cbda:	9101      	str	r1, [sp, #4]
   2cbdc:	f107 020c 	add.w	r2, r7, #12
   2cbe0:	4629      	mov	r1, r5
   2cbe2:	4658      	mov	r0, fp
   2cbe4:	f7f8 feac 	bl	25940 <z_pend_curr>
   2cbe8:	f04f 0340 	mov.w	r3, #64	; 0x40
   2cbec:	f3ef 8511 	mrs	r5, BASEPRI
   2cbf0:	f383 8812 	msr	BASEPRI_MAX, r3
   2cbf4:	f3bf 8f6f 	isb	sy
	while (ret == NULL) {
   2cbf8:	b9ac      	cbnz	r4, 2cc26 <k_heap_aligned_alloc+0x9c>
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   2cbfa:	4652      	mov	r2, sl
   2cbfc:	9903      	ldr	r1, [sp, #12]
   2cbfe:	4638      	mov	r0, r7
   2cc00:	f7fa f971 	bl	26ee6 <sys_heap_aligned_alloc>
   2cc04:	4604      	mov	r4, r0
		now = sys_clock_tick_get();
   2cc06:	f7f9 fa3f 	bl	26088 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   2cc0a:	b964      	cbnz	r4, 2cc26 <k_heap_aligned_alloc+0x9c>
		    (ret != NULL) || ((end - now) <= 0)) {
   2cc0c:	1a30      	subs	r0, r6, r0
   2cc0e:	eb69 0101 	sbc.w	r1, r9, r1
   2cc12:	2801      	cmp	r0, #1
   2cc14:	f171 0300 	sbcs.w	r3, r1, #0
   2cc18:	db05      	blt.n	2cc26 <k_heap_aligned_alloc+0x9c>
		if (!blocked_alloc) {
   2cc1a:	f1b8 0f00 	cmp.w	r8, #0
   2cc1e:	d1db      	bne.n	2cbd8 <k_heap_aligned_alloc+0x4e>
			blocked_alloc = true;
   2cc20:	f04f 0801 	mov.w	r8, #1
   2cc24:	e7d8      	b.n	2cbd8 <k_heap_aligned_alloc+0x4e>
	__asm__ volatile(
   2cc26:	f385 8811 	msr	BASEPRI, r5
   2cc2a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   2cc2e:	4620      	mov	r0, r4
   2cc30:	b005      	add	sp, #20
   2cc32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002cc36 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   2cc36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2cc38:	4604      	mov	r4, r0
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   2cc3a:	f100 0714 	add.w	r7, r0, #20
	__asm__ volatile(
   2cc3e:	f04f 0340 	mov.w	r3, #64	; 0x40
   2cc42:	f3ef 8511 	mrs	r5, BASEPRI
   2cc46:	f383 8812 	msr	BASEPRI_MAX, r3
   2cc4a:	f3bf 8f6f 	isb	sy

	sys_heap_free(&h->heap, mem);
   2cc4e:	f7fa f906 	bl	26e5e <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   2cc52:	f104 000c 	add.w	r0, r4, #12
   2cc56:	f000 fc65 	bl	2d524 <z_unpend_all>
   2cc5a:	b920      	cbnz	r0, 2cc66 <k_heap_free+0x30>
	__asm__ volatile(
   2cc5c:	f385 8811 	msr	BASEPRI, r5
   2cc60:	f3bf 8f6f 	isb	sy
		z_reschedule(&h->lock, key);
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   2cc64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		z_reschedule(&h->lock, key);
   2cc66:	4629      	mov	r1, r5
   2cc68:	4638      	mov	r0, r7
   2cc6a:	f7f8 fd05 	bl	25678 <z_reschedule>
   2cc6e:	e7f9      	b.n	2cc64 <k_heap_free+0x2e>

0002cc70 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2cc70:	68c2      	ldr	r2, [r0, #12]
   2cc72:	6903      	ldr	r3, [r0, #16]
   2cc74:	431a      	orrs	r2, r3
   2cc76:	f012 0203 	ands.w	r2, r2, #3
   2cc7a:	d10d      	bne.n	2cc98 <create_free_list+0x28>
	slab->free_list = NULL;
   2cc7c:	2100      	movs	r1, #0
   2cc7e:	6141      	str	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   2cc80:	e005      	b.n	2cc8e <create_free_list+0x1e>
		*(char **)p = slab->free_list;
   2cc82:	6941      	ldr	r1, [r0, #20]
   2cc84:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
   2cc86:	6143      	str	r3, [r0, #20]
		p += slab->block_size;
   2cc88:	68c1      	ldr	r1, [r0, #12]
   2cc8a:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   2cc8c:	3201      	adds	r2, #1
   2cc8e:	6881      	ldr	r1, [r0, #8]
   2cc90:	4291      	cmp	r1, r2
   2cc92:	d8f6      	bhi.n	2cc82 <create_free_list+0x12>
	return 0;
   2cc94:	2000      	movs	r0, #0
   2cc96:	4770      	bx	lr
		return -EINVAL;
   2cc98:	f06f 0015 	mvn.w	r0, #21
}
   2cc9c:	4770      	bx	lr

0002cc9e <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   2cc9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2cca2:	4604      	mov	r4, r0
   2cca4:	460d      	mov	r5, r1
	__asm__ volatile(
   2cca6:	f04f 0340 	mov.w	r3, #64	; 0x40
   2ccaa:	f3ef 8611 	mrs	r6, BASEPRI
   2ccae:	f383 8812 	msr	BASEPRI_MAX, r3
   2ccb2:	f3bf 8f6f 	isb	sy
   2ccb6:	4637      	mov	r7, r6
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   2ccb8:	6943      	ldr	r3, [r0, #20]
   2ccba:	b16b      	cbz	r3, 2ccd8 <k_mem_slab_free+0x3a>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
   2ccbc:	682b      	ldr	r3, [r5, #0]
   2ccbe:	6962      	ldr	r2, [r4, #20]
   2ccc0:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   2ccc2:	682b      	ldr	r3, [r5, #0]
   2ccc4:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   2ccc6:	69a3      	ldr	r3, [r4, #24]
   2ccc8:	3b01      	subs	r3, #1
   2ccca:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   2cccc:	f387 8811 	msr	BASEPRI, r7
   2ccd0:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   2ccd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2ccd8:	f100 0808 	add.w	r8, r0, #8
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   2ccdc:	f000 fc00 	bl	2d4e0 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   2cce0:	2800      	cmp	r0, #0
   2cce2:	d0eb      	beq.n	2ccbc <k_mem_slab_free+0x1e>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   2cce4:	682a      	ldr	r2, [r5, #0]
   2cce6:	2100      	movs	r1, #0
   2cce8:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   2ccec:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   2ccee:	f000 fb42 	bl	2d376 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   2ccf2:	4631      	mov	r1, r6
   2ccf4:	4640      	mov	r0, r8
   2ccf6:	f7f8 fcbf 	bl	25678 <z_reschedule>
			return;
   2ccfa:	e7eb      	b.n	2ccd4 <k_mem_slab_free+0x36>

0002ccfc <setup_thread_stack>:
{
   2ccfc:	b410      	push	{r4}
   2ccfe:	4603      	mov	r3, r0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   2cd00:	3207      	adds	r2, #7
   2cd02:	f022 0207 	bic.w	r2, r2, #7
   2cd06:	f102 0040 	add.w	r0, r2, #64	; 0x40

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   2cd0a:	f101 0440 	add.w	r4, r1, #64	; 0x40
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
   2cd0e:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
	new_thread->stack_info.size = stack_buf_size;
   2cd12:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	new_thread->stack_info.delta = delta;
   2cd16:	2200      	movs	r2, #0
   2cd18:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
   2cd1c:	4408      	add	r0, r1
   2cd1e:	bc10      	pop	{r4}
   2cd20:	4770      	bx	lr

0002cd22 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2cd22:	f3ef 8005 	mrs	r0, IPSR
}
   2cd26:	3800      	subs	r0, #0
   2cd28:	bf18      	it	ne
   2cd2a:	2001      	movne	r0, #1
   2cd2c:	4770      	bx	lr

0002cd2e <k_thread_name_get>:
}
   2cd2e:	3078      	adds	r0, #120	; 0x78
   2cd30:	4770      	bx	lr

0002cd32 <z_impl_k_thread_start>:
{
   2cd32:	b508      	push	{r3, lr}
	z_sched_start(thread);
   2cd34:	f7f8 fdca 	bl	258cc <z_sched_start>
}
   2cd38:	bd08      	pop	{r3, pc}

0002cd3a <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
   2cd3a:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
   2cd3c:	2400      	movs	r4, #0
   2cd3e:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
   2cd40:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   2cd42:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
   2cd44:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
   2cd46:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
   2cd48:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
   2cd4a:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
   2cd4c:	bc10      	pop	{r4}
   2cd4e:	4770      	bx	lr

0002cd50 <z_impl_k_thread_create>:
{
   2cd50:	b5f0      	push	{r4, r5, r6, r7, lr}
   2cd52:	b087      	sub	sp, #28
   2cd54:	4604      	mov	r4, r0
   2cd56:	9e12      	ldr	r6, [sp, #72]	; 0x48
   2cd58:	9d13      	ldr	r5, [sp, #76]	; 0x4c
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2cd5a:	2700      	movs	r7, #0
   2cd5c:	9705      	str	r7, [sp, #20]
   2cd5e:	9f10      	ldr	r7, [sp, #64]	; 0x40
   2cd60:	9704      	str	r7, [sp, #16]
   2cd62:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   2cd64:	9703      	str	r7, [sp, #12]
   2cd66:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   2cd68:	9702      	str	r7, [sp, #8]
   2cd6a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   2cd6c:	9701      	str	r7, [sp, #4]
   2cd6e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   2cd70:	9700      	str	r7, [sp, #0]
   2cd72:	f7f8 f861 	bl	24e38 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   2cd76:	f1b5 3fff 	cmp.w	r5, #4294967295
   2cd7a:	bf08      	it	eq
   2cd7c:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   2cd80:	d102      	bne.n	2cd88 <z_impl_k_thread_create+0x38>
}
   2cd82:	4620      	mov	r0, r4
   2cd84:	b007      	add	sp, #28
   2cd86:	bdf0      	pop	{r4, r5, r6, r7, pc}
		schedule_new_thread(new_thread, delay);
   2cd88:	4632      	mov	r2, r6
   2cd8a:	462b      	mov	r3, r5
   2cd8c:	4620      	mov	r0, r4
   2cd8e:	f7f8 f845 	bl	24e1c <schedule_new_thread>
   2cd92:	e7f6      	b.n	2cd82 <z_impl_k_thread_create+0x32>

0002cd94 <z_pm_save_idle_exit>:
{
   2cd94:	b508      	push	{r3, lr}
	pm_system_resume();
   2cd96:	f7e9 fc79 	bl	1668c <pm_system_resume>
	sys_clock_idle_exit();
   2cd9a:	f7ff f8f0 	bl	2bf7e <sys_clock_idle_exit>
}
   2cd9e:	bd08      	pop	{r3, pc}

0002cda0 <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
   2cda0:	4288      	cmp	r0, r1
   2cda2:	da00      	bge.n	2cda6 <new_prio_for_inheritance+0x6>
   2cda4:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   2cda6:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
   2cdaa:	db01      	blt.n	2cdb0 <new_prio_for_inheritance+0x10>
   2cdac:	4608      	mov	r0, r1
   2cdae:	4770      	bx	lr
   2cdb0:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
   2cdb4:	4770      	bx	lr

0002cdb6 <adjust_owner_prio>:
{
   2cdb6:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
   2cdb8:	6880      	ldr	r0, [r0, #8]
   2cdba:	f990 300e 	ldrsb.w	r3, [r0, #14]
   2cdbe:	428b      	cmp	r3, r1
   2cdc0:	d101      	bne.n	2cdc6 <adjust_owner_prio+0x10>
	return false;
   2cdc2:	2000      	movs	r0, #0
}
   2cdc4:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
   2cdc6:	f7f8 fdd7 	bl	25978 <z_set_prio>
   2cdca:	e7fb      	b.n	2cdc4 <adjust_owner_prio+0xe>

0002cdcc <z_impl_k_mutex_init>:
{
   2cdcc:	4603      	mov	r3, r0
	mutex->owner = NULL;
   2cdce:	2000      	movs	r0, #0
   2cdd0:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
   2cdd2:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
   2cdd4:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   2cdd6:	605b      	str	r3, [r3, #4]
}
   2cdd8:	4770      	bx	lr

0002cdda <sys_sflist_append>:
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2cdda:	680b      	ldr	r3, [r1, #0]
   2cddc:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   2cde0:	600b      	str	r3, [r1, #0]
	return list->tail;
   2cde2:	6842      	ldr	r2, [r0, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   2cde4:	b132      	cbz	r2, 2cdf4 <sys_sflist_append+0x1a>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2cde6:	6813      	ldr	r3, [r2, #0]
   2cde8:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   2cdec:	430b      	orrs	r3, r1
   2cdee:	6013      	str	r3, [r2, #0]
	list->tail = node;
   2cdf0:	6041      	str	r1, [r0, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   2cdf2:	4770      	bx	lr
	list->tail = node;
   2cdf4:	6041      	str	r1, [r0, #4]
	list->head = node;
   2cdf6:	6001      	str	r1, [r0, #0]
}
   2cdf8:	4770      	bx	lr

0002cdfa <sys_sflist_insert>:
Z_GENLIST_INSERT(sflist, sfnode)
   2cdfa:	b508      	push	{r3, lr}
   2cdfc:	b191      	cbz	r1, 2ce24 <sys_sflist_insert+0x2a>
   2cdfe:	468c      	mov	ip, r1
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2ce00:	680b      	ldr	r3, [r1, #0]
   2ce02:	f023 0103 	bic.w	r1, r3, #3
Z_GENLIST_INSERT(sflist, sfnode)
   2ce06:	2b03      	cmp	r3, #3
   2ce08:	d918      	bls.n	2ce3c <sys_sflist_insert+0x42>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2ce0a:	6813      	ldr	r3, [r2, #0]
   2ce0c:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   2ce10:	430b      	orrs	r3, r1
   2ce12:	6013      	str	r3, [r2, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2ce14:	f8dc 3000 	ldr.w	r3, [ip]
   2ce18:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   2ce1c:	4313      	orrs	r3, r2
   2ce1e:	f8cc 3000 	str.w	r3, [ip]
Z_GENLIST_INSERT(sflist, sfnode)
   2ce22:	bd08      	pop	{r3, pc}
	return list->head;
   2ce24:	6801      	ldr	r1, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2ce26:	6813      	ldr	r3, [r2, #0]
   2ce28:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   2ce2c:	430b      	orrs	r3, r1
   2ce2e:	6013      	str	r3, [r2, #0]
	list->head = node;
   2ce30:	6002      	str	r2, [r0, #0]
	return list->tail;
   2ce32:	6843      	ldr	r3, [r0, #4]
Z_GENLIST_PREPEND(sflist, sfnode)
   2ce34:	2b00      	cmp	r3, #0
   2ce36:	d1f4      	bne.n	2ce22 <sys_sflist_insert+0x28>
	list->tail = node;
   2ce38:	6042      	str	r2, [r0, #4]
}
   2ce3a:	e7f2      	b.n	2ce22 <sys_sflist_insert+0x28>
Z_GENLIST_INSERT(sflist, sfnode)
   2ce3c:	4611      	mov	r1, r2
   2ce3e:	f7ff ffcc 	bl	2cdda <sys_sflist_append>
   2ce42:	e7ee      	b.n	2ce22 <sys_sflist_insert+0x28>

0002ce44 <prepare_thread_to_run>:
{
   2ce44:	b508      	push	{r3, lr}
   2ce46:	2200      	movs	r2, #0
   2ce48:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
   2ce4c:	6141      	str	r1, [r0, #20]
	z_ready_thread(thread);
   2ce4e:	f000 fa92 	bl	2d376 <z_ready_thread>
}
   2ce52:	bd08      	pop	{r3, pc}

0002ce54 <queue_insert>:
{
   2ce54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2ce58:	4604      	mov	r4, r0
   2ce5a:	460e      	mov	r6, r1
   2ce5c:	4615      	mov	r5, r2
   2ce5e:	461f      	mov	r7, r3
   2ce60:	f89d 3020 	ldrb.w	r3, [sp, #32]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2ce64:	f100 0808 	add.w	r8, r0, #8
	__asm__ volatile(
   2ce68:	f04f 0240 	mov.w	r2, #64	; 0x40
   2ce6c:	f3ef 8911 	mrs	r9, BASEPRI
   2ce70:	f382 8812 	msr	BASEPRI_MAX, r2
   2ce74:	f3bf 8f6f 	isb	sy
   2ce78:	46ca      	mov	sl, r9
	if (is_append) {
   2ce7a:	b103      	cbz	r3, 2ce7e <queue_insert+0x2a>
	return list->tail;
   2ce7c:	6846      	ldr	r6, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   2ce7e:	4640      	mov	r0, r8
   2ce80:	f000 fb2e 	bl	2d4e0 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   2ce84:	b998      	cbnz	r0, 2ceae <queue_insert+0x5a>
	if (alloc) {
   2ce86:	b9df      	cbnz	r7, 2cec0 <queue_insert+0x6c>
	node->next_and_flags = flags;
   2ce88:	2300      	movs	r3, #0
   2ce8a:	602b      	str	r3, [r5, #0]
	sys_sflist_insert(&queue->data_q, prev, data);
   2ce8c:	462a      	mov	r2, r5
   2ce8e:	4631      	mov	r1, r6
   2ce90:	4620      	mov	r0, r4
   2ce92:	f7ff ffb2 	bl	2cdfa <sys_sflist_insert>
	z_handle_obj_poll_events(&queue->poll_events, state);
   2ce96:	2104      	movs	r1, #4
   2ce98:	f104 0010 	add.w	r0, r4, #16
   2ce9c:	f000 fdfd 	bl	2da9a <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   2cea0:	4649      	mov	r1, r9
   2cea2:	4640      	mov	r0, r8
   2cea4:	f7f8 fbe8 	bl	25678 <z_reschedule>
	return 0;
   2cea8:	2000      	movs	r0, #0
}
   2ceaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prepare_thread_to_run(first_pending_thread, data);
   2ceae:	4629      	mov	r1, r5
   2ceb0:	f7ff ffc8 	bl	2ce44 <prepare_thread_to_run>
		z_reschedule(&queue->lock, key);
   2ceb4:	4649      	mov	r1, r9
   2ceb6:	4640      	mov	r0, r8
   2ceb8:	f7f8 fbde 	bl	25678 <z_reschedule>
		return 0;
   2cebc:	2000      	movs	r0, #0
   2cebe:	e7f4      	b.n	2ceaa <queue_insert+0x56>
	return z_thread_aligned_alloc(0, size);
   2cec0:	2108      	movs	r1, #8
   2cec2:	2000      	movs	r0, #0
   2cec4:	f7f9 fa4e 	bl	26364 <z_thread_aligned_alloc>
		if (anode == NULL) {
   2cec8:	b120      	cbz	r0, 2ced4 <queue_insert+0x80>
		anode->data = data;
   2ceca:	6045      	str	r5, [r0, #4]
   2cecc:	2201      	movs	r2, #1
   2cece:	6002      	str	r2, [r0, #0]
		data = anode;
   2ced0:	4605      	mov	r5, r0
   2ced2:	e7db      	b.n	2ce8c <queue_insert+0x38>
	__asm__ volatile(
   2ced4:	f38a 8811 	msr	BASEPRI, sl
   2ced8:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   2cedc:	f06f 000b 	mvn.w	r0, #11
   2cee0:	e7e3      	b.n	2ceaa <queue_insert+0x56>

0002cee2 <z_queue_node_peek>:
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   2cee2:	b160      	cbz	r0, 2cefe <z_queue_node_peek+0x1c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2cee4:	6803      	ldr	r3, [r0, #0]
   2cee6:	f013 0f03 	tst.w	r3, #3
   2ceea:	d008      	beq.n	2cefe <z_queue_node_peek+0x1c>
{
   2ceec:	b510      	push	{r4, lr}
		ret = anode->data;
   2ceee:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   2cef0:	b909      	cbnz	r1, 2cef6 <z_queue_node_peek+0x14>
		ret = anode->data;
   2cef2:	4620      	mov	r0, r4
}
   2cef4:	bd10      	pop	{r4, pc}
			k_free(anode);
   2cef6:	f000 fe00 	bl	2dafa <k_free>
		ret = anode->data;
   2cefa:	4620      	mov	r0, r4
   2cefc:	e7fa      	b.n	2cef4 <z_queue_node_peek+0x12>
}
   2cefe:	4770      	bx	lr

0002cf00 <z_impl_k_queue_init>:
	list->head = NULL;
   2cf00:	2300      	movs	r3, #0
   2cf02:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
   2cf04:	6043      	str	r3, [r0, #4]
   2cf06:	f100 0308 	add.w	r3, r0, #8
	list->head = (sys_dnode_t *)list;
   2cf0a:	6083      	str	r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   2cf0c:	60c3      	str	r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   2cf0e:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
   2cf12:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   2cf14:	6143      	str	r3, [r0, #20]
}
   2cf16:	4770      	bx	lr

0002cf18 <k_queue_append>:
{
   2cf18:	b500      	push	{lr}
   2cf1a:	b083      	sub	sp, #12
   2cf1c:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   2cf1e:	2301      	movs	r3, #1
   2cf20:	9300      	str	r3, [sp, #0]
   2cf22:	2300      	movs	r3, #0
   2cf24:	4619      	mov	r1, r3
   2cf26:	f7ff ff95 	bl	2ce54 <queue_insert>
}
   2cf2a:	b003      	add	sp, #12
   2cf2c:	f85d fb04 	ldr.w	pc, [sp], #4

0002cf30 <k_queue_prepend>:
{
   2cf30:	b500      	push	{lr}
   2cf32:	b083      	sub	sp, #12
   2cf34:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   2cf36:	2100      	movs	r1, #0
   2cf38:	9100      	str	r1, [sp, #0]
   2cf3a:	460b      	mov	r3, r1
   2cf3c:	f7ff ff8a 	bl	2ce54 <queue_insert>
}
   2cf40:	b003      	add	sp, #12
   2cf42:	f85d fb04 	ldr.w	pc, [sp], #4

0002cf46 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   2cf46:	b15a      	cbz	r2, 2cf60 <z_impl_k_sem_init+0x1a>
   2cf48:	428a      	cmp	r2, r1
   2cf4a:	d30c      	bcc.n	2cf66 <z_impl_k_sem_init+0x20>
	sem->count = initial_count;
   2cf4c:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   2cf4e:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   2cf50:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   2cf52:	6040      	str	r0, [r0, #4]
	sys_dlist_init(&sem->poll_events);
   2cf54:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
   2cf58:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   2cf5a:	6143      	str	r3, [r0, #20]
	return 0;
   2cf5c:	2000      	movs	r0, #0
   2cf5e:	4770      	bx	lr
		return -EINVAL;
   2cf60:	f06f 0015 	mvn.w	r0, #21
   2cf64:	4770      	bx	lr
   2cf66:	f06f 0015 	mvn.w	r0, #21
}
   2cf6a:	4770      	bx	lr

0002cf6c <sys_slist_remove>:
Z_GENLIST_REMOVE(slist, snode)
   2cf6c:	460b      	mov	r3, r1
   2cf6e:	b139      	cbz	r1, 2cf80 <sys_slist_remove+0x14>
	return node->next;
   2cf70:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
   2cf72:	6019      	str	r1, [r3, #0]
	return list->tail;
   2cf74:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   2cf76:	428a      	cmp	r2, r1
   2cf78:	d009      	beq.n	2cf8e <sys_slist_remove+0x22>
	parent->next = child;
   2cf7a:	2300      	movs	r3, #0
   2cf7c:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2cf7e:	4770      	bx	lr
	return node->next;
   2cf80:	6813      	ldr	r3, [r2, #0]
	list->head = node;
   2cf82:	6003      	str	r3, [r0, #0]
	return list->tail;
   2cf84:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   2cf86:	428a      	cmp	r2, r1
   2cf88:	d1f7      	bne.n	2cf7a <sys_slist_remove+0xe>
	list->tail = node;
   2cf8a:	6043      	str	r3, [r0, #4]
}
   2cf8c:	e7f5      	b.n	2cf7a <sys_slist_remove+0xe>
	list->tail = node;
   2cf8e:	6043      	str	r3, [r0, #4]
}
   2cf90:	e7f3      	b.n	2cf7a <sys_slist_remove+0xe>

0002cf92 <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2cf92:	b508      	push	{r3, lr}
   2cf94:	460a      	mov	r2, r1
	return list->head;
   2cf96:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2cf98:	2100      	movs	r1, #0
   2cf9a:	e001      	b.n	2cfa0 <sys_slist_find_and_remove+0xe>
   2cf9c:	4619      	mov	r1, r3
   2cf9e:	681b      	ldr	r3, [r3, #0]
   2cfa0:	b12b      	cbz	r3, 2cfae <sys_slist_find_and_remove+0x1c>
   2cfa2:	4293      	cmp	r3, r2
   2cfa4:	d1fa      	bne.n	2cf9c <sys_slist_find_and_remove+0xa>
   2cfa6:	f7ff ffe1 	bl	2cf6c <sys_slist_remove>
   2cfaa:	2001      	movs	r0, #1
   2cfac:	e000      	b.n	2cfb0 <sys_slist_find_and_remove+0x1e>
   2cfae:	2000      	movs	r0, #0
   2cfb0:	bd08      	pop	{r3, pc}

0002cfb2 <queue_remove_locked>:
{
   2cfb2:	b508      	push	{r3, lr}
	return (*flagp & BIT(bit)) != 0U;
   2cfb4:	68cb      	ldr	r3, [r1, #12]
	*flagp &= ~BIT(bit);
   2cfb6:	f023 0204 	bic.w	r2, r3, #4
   2cfba:	60ca      	str	r2, [r1, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   2cfbc:	f013 0f04 	tst.w	r3, #4
   2cfc0:	d100      	bne.n	2cfc4 <queue_remove_locked+0x12>
}
   2cfc2:	bd08      	pop	{r3, pc}
		(void)sys_slist_find_and_remove(&queue->pending, &work->node);
   2cfc4:	30b8      	adds	r0, #184	; 0xb8
   2cfc6:	f7ff ffe4 	bl	2cf92 <sys_slist_find_and_remove>
}
   2cfca:	e7fa      	b.n	2cfc2 <queue_remove_locked+0x10>

0002cfcc <cancel_async_locked>:
{
   2cfcc:	b510      	push	{r4, lr}
   2cfce:	4604      	mov	r4, r0
	return (*flagp & BIT(bit)) != 0U;
   2cfd0:	68c3      	ldr	r3, [r0, #12]
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2cfd2:	f013 0f02 	tst.w	r3, #2
   2cfd6:	d009      	beq.n	2cfec <cancel_async_locked+0x20>
	return *flagp;
   2cfd8:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   2cfda:	f013 000f 	ands.w	r0, r3, #15
   2cfde:	d004      	beq.n	2cfea <cancel_async_locked+0x1e>
	*flagp |= BIT(bit);
   2cfe0:	f043 0202 	orr.w	r2, r3, #2
   2cfe4:	60e2      	str	r2, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   2cfe6:	f040 0002 	orr.w	r0, r0, #2
}
   2cfea:	bd10      	pop	{r4, pc}
		queue_remove_locked(work->queue, work);
   2cfec:	4601      	mov	r1, r0
   2cfee:	6880      	ldr	r0, [r0, #8]
   2cff0:	f7ff ffdf 	bl	2cfb2 <queue_remove_locked>
   2cff4:	e7f0      	b.n	2cfd8 <cancel_async_locked+0xc>

0002cff6 <notify_queue_locked>:
	if (queue != NULL) {
   2cff6:	b130      	cbz	r0, 2d006 <notify_queue_locked+0x10>
{
   2cff8:	b508      	push	{r3, lr}
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   2cffa:	2200      	movs	r2, #0
   2cffc:	4611      	mov	r1, r2
   2cffe:	30c0      	adds	r0, #192	; 0xc0
   2d000:	f000 faa4 	bl	2d54c <z_sched_wake>
}
   2d004:	bd08      	pop	{r3, pc}
	bool rv = false;
   2d006:	2000      	movs	r0, #0
}
   2d008:	4770      	bx	lr

0002d00a <submit_to_queue_locked>:
{
   2d00a:	b570      	push	{r4, r5, r6, lr}
   2d00c:	460d      	mov	r5, r1
	return (*flagp & BIT(bit)) != 0U;
   2d00e:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2d010:	f013 0f02 	tst.w	r3, #2
   2d014:	d122      	bne.n	2d05c <submit_to_queue_locked+0x52>
   2d016:	4604      	mov	r4, r0
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   2d018:	f013 0f04 	tst.w	r3, #4
   2d01c:	d123      	bne.n	2d066 <submit_to_queue_locked+0x5c>
		if (*queuep == NULL) {
   2d01e:	680b      	ldr	r3, [r1, #0]
   2d020:	b1ab      	cbz	r3, 2d04e <submit_to_queue_locked+0x44>
	return (*flagp & BIT(bit)) != 0U;
   2d022:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   2d024:	f013 0f01 	tst.w	r3, #1
   2d028:	d014      	beq.n	2d054 <submit_to_queue_locked+0x4a>
			*queuep = work->queue;
   2d02a:	68a3      	ldr	r3, [r4, #8]
   2d02c:	602b      	str	r3, [r5, #0]
			ret = 2;
   2d02e:	2602      	movs	r6, #2
		int rc = queue_submit_locked(*queuep, work);
   2d030:	4621      	mov	r1, r4
   2d032:	6828      	ldr	r0, [r5, #0]
   2d034:	f7f8 f936 	bl	252a4 <queue_submit_locked>
		if (rc < 0) {
   2d038:	2800      	cmp	r0, #0
   2d03a:	db11      	blt.n	2d060 <submit_to_queue_locked+0x56>
	*flagp |= BIT(bit);
   2d03c:	68e3      	ldr	r3, [r4, #12]
   2d03e:	f043 0304 	orr.w	r3, r3, #4
   2d042:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   2d044:	682b      	ldr	r3, [r5, #0]
   2d046:	60a3      	str	r3, [r4, #8]
	if (ret <= 0) {
   2d048:	b136      	cbz	r6, 2d058 <submit_to_queue_locked+0x4e>
   2d04a:	4630      	mov	r0, r6
	return ret;
   2d04c:	e00a      	b.n	2d064 <submit_to_queue_locked+0x5a>
			*queuep = work->queue;
   2d04e:	6883      	ldr	r3, [r0, #8]
   2d050:	600b      	str	r3, [r1, #0]
   2d052:	e7e6      	b.n	2d022 <submit_to_queue_locked+0x18>
		ret = 1;
   2d054:	2601      	movs	r6, #1
   2d056:	e7eb      	b.n	2d030 <submit_to_queue_locked+0x26>
   2d058:	4630      	mov	r0, r6
   2d05a:	e001      	b.n	2d060 <submit_to_queue_locked+0x56>
		ret = -EBUSY;
   2d05c:	f06f 000f 	mvn.w	r0, #15
		*queuep = NULL;
   2d060:	2300      	movs	r3, #0
   2d062:	602b      	str	r3, [r5, #0]
}
   2d064:	bd70      	pop	{r4, r5, r6, pc}
	int ret = 0;
   2d066:	2000      	movs	r0, #0
   2d068:	e7fa      	b.n	2d060 <submit_to_queue_locked+0x56>

0002d06a <work_timeout>:
{
   2d06a:	b510      	push	{r4, lr}
   2d06c:	b082      	sub	sp, #8
   2d06e:	4603      	mov	r3, r0
	__asm__ volatile(
   2d070:	f04f 0240 	mov.w	r2, #64	; 0x40
   2d074:	f3ef 8411 	mrs	r4, BASEPRI
   2d078:	f382 8812 	msr	BASEPRI_MAX, r2
   2d07c:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   2d080:	2200      	movs	r2, #0
   2d082:	9201      	str	r2, [sp, #4]
	return (*flagp & BIT(bit)) != 0U;
   2d084:	f850 2c04 	ldr.w	r2, [r0, #-4]
	*flagp &= ~BIT(bit);
   2d088:	f022 0108 	bic.w	r1, r2, #8
   2d08c:	f840 1c04 	str.w	r1, [r0, #-4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   2d090:	f012 0f08 	tst.w	r2, #8
   2d094:	d105      	bne.n	2d0a2 <work_timeout+0x38>
	__asm__ volatile(
   2d096:	f384 8811 	msr	BASEPRI, r4
   2d09a:	f3bf 8f6f 	isb	sy
}
   2d09e:	b002      	add	sp, #8
   2d0a0:	bd10      	pop	{r4, pc}
   2d0a2:	3810      	subs	r0, #16
		queue = dw->queue;
   2d0a4:	699b      	ldr	r3, [r3, #24]
   2d0a6:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   2d0a8:	a901      	add	r1, sp, #4
   2d0aa:	f7ff ffae 	bl	2d00a <submit_to_queue_locked>
   2d0ae:	e7f2      	b.n	2d096 <work_timeout+0x2c>

0002d0b0 <z_reschedule_unlocked>:
{
   2d0b0:	b508      	push	{r3, lr}
	__asm__ volatile(
   2d0b2:	f04f 0340 	mov.w	r3, #64	; 0x40
   2d0b6:	f3ef 8011 	mrs	r0, BASEPRI
   2d0ba:	f383 8812 	msr	BASEPRI_MAX, r3
   2d0be:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2d0c2:	f000 f906 	bl	2d2d2 <z_reschedule_irqlock>
}
   2d0c6:	bd08      	pop	{r3, pc}

0002d0c8 <cancel_sync_locked>:
{
   2d0c8:	b510      	push	{r4, lr}
   2d0ca:	4602      	mov	r2, r0
	return (*flagp & BIT(bit)) != 0U;
   2d0cc:	68c4      	ldr	r4, [r0, #12]
   2d0ce:	f014 0f02 	tst.w	r4, #2
   2d0d2:	f3c4 0440 	ubfx	r4, r4, #1, #1
	if (ret) {
   2d0d6:	d101      	bne.n	2d0dc <cancel_sync_locked+0x14>
}
   2d0d8:	4620      	mov	r0, r4
   2d0da:	bd10      	pop	{r4, pc}
   2d0dc:	4608      	mov	r0, r1
		init_work_cancel(canceller, work);
   2d0de:	4611      	mov	r1, r2
   2d0e0:	f7f8 f94e 	bl	25380 <init_work_cancel>
   2d0e4:	e7f8      	b.n	2d0d8 <cancel_sync_locked+0x10>

0002d0e6 <unschedule_locked>:
{
   2d0e6:	b508      	push	{r3, lr}
	return (*flagp & BIT(bit)) != 0U;
   2d0e8:	68c3      	ldr	r3, [r0, #12]
	*flagp &= ~BIT(bit);
   2d0ea:	f023 0208 	bic.w	r2, r3, #8
   2d0ee:	60c2      	str	r2, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   2d0f0:	f013 0f08 	tst.w	r3, #8
   2d0f4:	d101      	bne.n	2d0fa <unschedule_locked+0x14>
	bool ret = false;
   2d0f6:	2000      	movs	r0, #0
}
   2d0f8:	bd08      	pop	{r3, pc}
		z_abort_timeout(&dwork->timeout);
   2d0fa:	3010      	adds	r0, #16
   2d0fc:	f000 fa6b 	bl	2d5d6 <z_abort_timeout>
		ret = true;
   2d100:	2001      	movs	r0, #1
   2d102:	e7f9      	b.n	2d0f8 <unschedule_locked+0x12>

0002d104 <cancel_delayable_async_locked>:
{
   2d104:	b510      	push	{r4, lr}
   2d106:	4604      	mov	r4, r0
	(void)unschedule_locked(dwork);
   2d108:	f7ff ffed 	bl	2d0e6 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   2d10c:	4620      	mov	r0, r4
   2d10e:	f7ff ff5d 	bl	2cfcc <cancel_async_locked>
}
   2d112:	bd10      	pop	{r4, pc}

0002d114 <k_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   2d114:	2300      	movs	r3, #0
   2d116:	6003      	str	r3, [r0, #0]
   2d118:	6043      	str	r3, [r0, #4]
   2d11a:	6083      	str	r3, [r0, #8]
   2d11c:	60c3      	str	r3, [r0, #12]
   2d11e:	6041      	str	r1, [r0, #4]
}
   2d120:	4770      	bx	lr

0002d122 <z_work_submit_to_queue>:
{
   2d122:	b510      	push	{r4, lr}
   2d124:	b082      	sub	sp, #8
   2d126:	9001      	str	r0, [sp, #4]
   2d128:	4608      	mov	r0, r1
   2d12a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2d12e:	f3ef 8411 	mrs	r4, BASEPRI
   2d132:	f383 8812 	msr	BASEPRI_MAX, r3
   2d136:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   2d13a:	a901      	add	r1, sp, #4
   2d13c:	f7ff ff65 	bl	2d00a <submit_to_queue_locked>
	__asm__ volatile(
   2d140:	f384 8811 	msr	BASEPRI, r4
   2d144:	f3bf 8f6f 	isb	sy
}
   2d148:	b002      	add	sp, #8
   2d14a:	bd10      	pop	{r4, pc}

0002d14c <k_work_submit_to_queue>:
{
   2d14c:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   2d14e:	f7ff ffe8 	bl	2d122 <z_work_submit_to_queue>
	if (ret > 0) {
   2d152:	1e04      	subs	r4, r0, #0
   2d154:	dc01      	bgt.n	2d15a <k_work_submit_to_queue+0xe>
}
   2d156:	4620      	mov	r0, r4
   2d158:	bd10      	pop	{r4, pc}
		z_reschedule_unlocked();
   2d15a:	f7ff ffa9 	bl	2d0b0 <z_reschedule_unlocked>
	return ret;
   2d15e:	e7fa      	b.n	2d156 <k_work_submit_to_queue+0xa>

0002d160 <k_work_queue_init>:
{
   2d160:	b508      	push	{r3, lr}
	*queue = (struct k_work_q) {
   2d162:	22d8      	movs	r2, #216	; 0xd8
   2d164:	2100      	movs	r1, #0
   2d166:	f7fb fabb 	bl	286e0 <memset>
}
   2d16a:	bd08      	pop	{r3, pc}

0002d16c <k_work_init_delayable>:
{
   2d16c:	b538      	push	{r3, r4, r5, lr}
   2d16e:	4604      	mov	r4, r0
   2d170:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   2d172:	2230      	movs	r2, #48	; 0x30
   2d174:	2100      	movs	r1, #0
   2d176:	f7fb fab3 	bl	286e0 <memset>
   2d17a:	6065      	str	r5, [r4, #4]
   2d17c:	f44f 7380 	mov.w	r3, #256	; 0x100
   2d180:	60e3      	str	r3, [r4, #12]
}
   2d182:	bd38      	pop	{r3, r4, r5, pc}

0002d184 <k_work_delayable_busy_get>:
	__asm__ volatile(
   2d184:	f04f 0240 	mov.w	r2, #64	; 0x40
   2d188:	f3ef 8311 	mrs	r3, BASEPRI
   2d18c:	f382 8812 	msr	BASEPRI_MAX, r2
   2d190:	f3bf 8f6f 	isb	sy
	return *flagp;
   2d194:	68c0      	ldr	r0, [r0, #12]
	return flags_get(&dwork->work.flags) & K_WORK_MASK;
   2d196:	f000 000f 	and.w	r0, r0, #15
	__asm__ volatile(
   2d19a:	f383 8811 	msr	BASEPRI, r3
   2d19e:	f3bf 8f6f 	isb	sy
}
   2d1a2:	4770      	bx	lr

0002d1a4 <k_work_schedule_for_queue>:
{
   2d1a4:	b510      	push	{r4, lr}
   2d1a6:	b082      	sub	sp, #8
   2d1a8:	9001      	str	r0, [sp, #4]
	__asm__ volatile(
   2d1aa:	f04f 0040 	mov.w	r0, #64	; 0x40
   2d1ae:	f3ef 8411 	mrs	r4, BASEPRI
   2d1b2:	f380 8812 	msr	BASEPRI_MAX, r0
   2d1b6:	f3bf 8f6f 	isb	sy
	return *flagp;
   2d1ba:	68c8      	ldr	r0, [r1, #12]
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   2d1bc:	f010 0f0e 	tst.w	r0, #14
   2d1c0:	d006      	beq.n	2d1d0 <k_work_schedule_for_queue+0x2c>
	int ret = 0;
   2d1c2:	2000      	movs	r0, #0
	__asm__ volatile(
   2d1c4:	f384 8811 	msr	BASEPRI, r4
   2d1c8:	f3bf 8f6f 	isb	sy
}
   2d1cc:	b002      	add	sp, #8
   2d1ce:	bd10      	pop	{r4, pc}
		ret = schedule_for_queue_locked(&queue, dwork, delay);
   2d1d0:	a801      	add	r0, sp, #4
   2d1d2:	f7f8 f965 	bl	254a0 <schedule_for_queue_locked>
   2d1d6:	e7f5      	b.n	2d1c4 <k_work_schedule_for_queue+0x20>

0002d1d8 <k_work_reschedule_for_queue>:
{
   2d1d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   2d1da:	b083      	sub	sp, #12
   2d1dc:	9001      	str	r0, [sp, #4]
   2d1de:	460c      	mov	r4, r1
   2d1e0:	4616      	mov	r6, r2
   2d1e2:	461d      	mov	r5, r3
	__asm__ volatile(
   2d1e4:	f04f 0340 	mov.w	r3, #64	; 0x40
   2d1e8:	f3ef 8711 	mrs	r7, BASEPRI
   2d1ec:	f383 8812 	msr	BASEPRI_MAX, r3
   2d1f0:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   2d1f4:	4608      	mov	r0, r1
   2d1f6:	f7ff ff76 	bl	2d0e6 <unschedule_locked>
	ret = schedule_for_queue_locked(&queue, dwork, delay);
   2d1fa:	4632      	mov	r2, r6
   2d1fc:	462b      	mov	r3, r5
   2d1fe:	4621      	mov	r1, r4
   2d200:	a801      	add	r0, sp, #4
   2d202:	f7f8 f94d 	bl	254a0 <schedule_for_queue_locked>
	__asm__ volatile(
   2d206:	f387 8811 	msr	BASEPRI, r7
   2d20a:	f3bf 8f6f 	isb	sy
}
   2d20e:	b003      	add	sp, #12
   2d210:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002d212 <k_work_cancel_delayable>:

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   2d212:	b510      	push	{r4, lr}
	__asm__ volatile(
   2d214:	f04f 0340 	mov.w	r3, #64	; 0x40
   2d218:	f3ef 8411 	mrs	r4, BASEPRI
   2d21c:	f383 8812 	msr	BASEPRI_MAX, r3
   2d220:	f3bf 8f6f 	isb	sy
	__ASSERT_NO_MSG(dwork != NULL);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable, dwork);

	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = cancel_delayable_async_locked(dwork);
   2d224:	f7ff ff6e 	bl	2d104 <cancel_delayable_async_locked>
	__asm__ volatile(
   2d228:	f384 8811 	msr	BASEPRI, r4
   2d22c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   2d230:	bd10      	pop	{r4, pc}

0002d232 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   2d232:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d234:	460d      	mov	r5, r1
	__asm__ volatile(
   2d236:	f04f 0340 	mov.w	r3, #64	; 0x40
   2d23a:	f3ef 8611 	mrs	r6, BASEPRI
   2d23e:	f383 8812 	msr	BASEPRI_MAX, r3
   2d242:	f3bf 8f6f 	isb	sy
	return *flagp;
   2d246:	68c3      	ldr	r3, [r0, #12]
   2d248:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   2d24c:	2b00      	cmp	r3, #0
   2d24e:	bf14      	ite	ne
   2d250:	2701      	movne	r7, #1
   2d252:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   2d254:	d107      	bne.n	2d266 <k_work_cancel_delayable_sync+0x34>
	bool need_wait = false;
   2d256:	2000      	movs	r0, #0
	__asm__ volatile(
   2d258:	f386 8811 	msr	BASEPRI, r6
   2d25c:	f3bf 8f6f 	isb	sy
		need_wait = cancel_sync_locked(&dwork->work, canceller);
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   2d260:	b948      	cbnz	r0, 2d276 <k_work_cancel_delayable_sync+0x44>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   2d262:	4638      	mov	r0, r7
   2d264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2d266:	4604      	mov	r4, r0
		(void)cancel_delayable_async_locked(dwork);
   2d268:	f7ff ff4c 	bl	2d104 <cancel_delayable_async_locked>
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   2d26c:	4629      	mov	r1, r5
   2d26e:	4620      	mov	r0, r4
   2d270:	f7ff ff2a 	bl	2d0c8 <cancel_sync_locked>
   2d274:	e7f0      	b.n	2d258 <k_work_cancel_delayable_sync+0x26>
		k_sem_take(&canceller->sem, K_FOREVER);
   2d276:	f105 0008 	add.w	r0, r5, #8
   2d27a:	f04f 32ff 	mov.w	r2, #4294967295
   2d27e:	f04f 33ff 	mov.w	r3, #4294967295
   2d282:	f7f7 ffcd 	bl	25220 <z_impl_k_sem_take>
   2d286:	e7ec      	b.n	2d262 <k_work_cancel_delayable_sync+0x30>

0002d288 <thread_active_elsewhere>:
}
   2d288:	2000      	movs	r0, #0
   2d28a:	4770      	bx	lr

0002d28c <pended_on_thread>:
}
   2d28c:	6880      	ldr	r0, [r0, #8]
   2d28e:	4770      	bx	lr

0002d290 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   2d290:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   2d294:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   2d298:	4283      	cmp	r3, r0
   2d29a:	d001      	beq.n	2d2a0 <z_sched_prio_cmp+0x10>
		return b2 - b1;
   2d29c:	1ac0      	subs	r0, r0, r3
   2d29e:	4770      	bx	lr
	return 0;
   2d2a0:	2000      	movs	r0, #0
}
   2d2a2:	4770      	bx	lr

0002d2a4 <z_unpend_thread_no_timeout>:
{
   2d2a4:	b538      	push	{r3, r4, r5, lr}
   2d2a6:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
   2d2a8:	2300      	movs	r3, #0
	__asm__ volatile(
   2d2aa:	f04f 0240 	mov.w	r2, #64	; 0x40
   2d2ae:	f3ef 8411 	mrs	r4, BASEPRI
   2d2b2:	f382 8812 	msr	BASEPRI_MAX, r2
   2d2b6:	f3bf 8f6f 	isb	sy
   2d2ba:	e007      	b.n	2d2cc <z_unpend_thread_no_timeout+0x28>
		unpend_thread_no_timeout(thread);
   2d2bc:	4628      	mov	r0, r5
   2d2be:	f000 f82a 	bl	2d316 <unpend_thread_no_timeout>
	__asm__ volatile(
   2d2c2:	f384 8811 	msr	BASEPRI, r4
   2d2c6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   2d2ca:	2301      	movs	r3, #1
   2d2cc:	2b00      	cmp	r3, #0
   2d2ce:	d0f5      	beq.n	2d2bc <z_unpend_thread_no_timeout+0x18>
}
   2d2d0:	bd38      	pop	{r3, r4, r5, pc}

0002d2d2 <z_reschedule_irqlock>:
{
   2d2d2:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2d2d4:	4603      	mov	r3, r0
   2d2d6:	b928      	cbnz	r0, 2d2e4 <z_reschedule_irqlock+0x12>
   2d2d8:	f3ef 8205 	mrs	r2, IPSR
   2d2dc:	b912      	cbnz	r2, 2d2e4 <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
   2d2de:	f7e9 fcfb 	bl	16cd8 <arch_swap>
	return ret;
   2d2e2:	e003      	b.n	2d2ec <z_reschedule_irqlock+0x1a>
   2d2e4:	f383 8811 	msr	BASEPRI, r3
   2d2e8:	f3bf 8f6f 	isb	sy
}
   2d2ec:	bd08      	pop	{r3, pc}

0002d2ee <z_reschedule_unlocked>:
{
   2d2ee:	b508      	push	{r3, lr}
	__asm__ volatile(
   2d2f0:	f04f 0340 	mov.w	r3, #64	; 0x40
   2d2f4:	f3ef 8011 	mrs	r0, BASEPRI
   2d2f8:	f383 8812 	msr	BASEPRI_MAX, r3
   2d2fc:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2d300:	f7ff ffe7 	bl	2d2d2 <z_reschedule_irqlock>
}
   2d304:	bd08      	pop	{r3, pc}

0002d306 <z_priq_dumb_remove>:
	sys_dnode_t *const prev = node->prev;
   2d306:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
   2d308:	680b      	ldr	r3, [r1, #0]
	prev->next = next;
   2d30a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2d30c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2d30e:	2300      	movs	r3, #0
   2d310:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
   2d312:	604b      	str	r3, [r1, #4]
}
   2d314:	4770      	bx	lr

0002d316 <unpend_thread_no_timeout>:
{
   2d316:	b510      	push	{r4, lr}
   2d318:	4604      	mov	r4, r0
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   2d31a:	f7ff ffb7 	bl	2d28c <pended_on_thread>
   2d31e:	4621      	mov	r1, r4
   2d320:	f7ff fff1 	bl	2d306 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2d324:	7b63      	ldrb	r3, [r4, #13]
   2d326:	f023 0302 	bic.w	r3, r3, #2
   2d32a:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   2d32c:	2300      	movs	r3, #0
   2d32e:	60a3      	str	r3, [r4, #8]
}
   2d330:	bd10      	pop	{r4, pc}

0002d332 <z_unpend_thread>:
{
   2d332:	b538      	push	{r3, r4, r5, lr}
   2d334:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   2d336:	2300      	movs	r3, #0
   2d338:	f04f 0240 	mov.w	r2, #64	; 0x40
   2d33c:	f3ef 8511 	mrs	r5, BASEPRI
   2d340:	f382 8812 	msr	BASEPRI_MAX, r2
   2d344:	f3bf 8f6f 	isb	sy
   2d348:	e007      	b.n	2d35a <z_unpend_thread+0x28>
		unpend_thread_no_timeout(thread);
   2d34a:	4620      	mov	r0, r4
   2d34c:	f7ff ffe3 	bl	2d316 <unpend_thread_no_timeout>
	__asm__ volatile(
   2d350:	f385 8811 	msr	BASEPRI, r5
   2d354:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   2d358:	2301      	movs	r3, #1
   2d35a:	2b00      	cmp	r3, #0
   2d35c:	d0f5      	beq.n	2d34a <z_unpend_thread+0x18>
	return z_abort_timeout(&thread->base.timeout);
   2d35e:	f104 0018 	add.w	r0, r4, #24
   2d362:	f000 f938 	bl	2d5d6 <z_abort_timeout>
}
   2d366:	bd38      	pop	{r3, r4, r5, pc}

0002d368 <z_priq_dumb_best>:
{
   2d368:	4603      	mov	r3, r0
	return list->head == list;
   2d36a:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2d36c:	4283      	cmp	r3, r0
   2d36e:	d000      	beq.n	2d372 <z_priq_dumb_best+0xa>
}
   2d370:	4770      	bx	lr
	struct k_thread *thread = NULL;
   2d372:	2000      	movs	r0, #0
	return thread;
   2d374:	e7fc      	b.n	2d370 <z_priq_dumb_best+0x8>

0002d376 <z_ready_thread>:
{
   2d376:	b538      	push	{r3, r4, r5, lr}
   2d378:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   2d37a:	2300      	movs	r3, #0
	__asm__ volatile(
   2d37c:	f04f 0240 	mov.w	r2, #64	; 0x40
   2d380:	f3ef 8511 	mrs	r5, BASEPRI
   2d384:	f382 8812 	msr	BASEPRI_MAX, r2
   2d388:	f3bf 8f6f 	isb	sy
   2d38c:	e004      	b.n	2d398 <z_ready_thread+0x22>
	__asm__ volatile(
   2d38e:	f385 8811 	msr	BASEPRI, r5
   2d392:	f3bf 8f6f 	isb	sy
   2d396:	2301      	movs	r3, #1
   2d398:	b943      	cbnz	r3, 2d3ac <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
   2d39a:	4620      	mov	r0, r4
   2d39c:	f7ff ff74 	bl	2d288 <thread_active_elsewhere>
   2d3a0:	2800      	cmp	r0, #0
   2d3a2:	d1f4      	bne.n	2d38e <z_ready_thread+0x18>
			ready_thread(thread);
   2d3a4:	4620      	mov	r0, r4
   2d3a6:	f7f8 fa55 	bl	25854 <ready_thread>
   2d3aa:	e7f0      	b.n	2d38e <z_ready_thread+0x18>
}
   2d3ac:	bd38      	pop	{r3, r4, r5, pc}

0002d3ae <z_thread_timeout>:
{
   2d3ae:	b570      	push	{r4, r5, r6, lr}
   2d3b0:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   2d3b2:	f1a0 0618 	sub.w	r6, r0, #24
	LOCKED(&sched_spinlock) {
   2d3b6:	2300      	movs	r3, #0
	__asm__ volatile(
   2d3b8:	f04f 0240 	mov.w	r2, #64	; 0x40
   2d3bc:	f3ef 8511 	mrs	r5, BASEPRI
   2d3c0:	f382 8812 	msr	BASEPRI_MAX, r2
   2d3c4:	f3bf 8f6f 	isb	sy
   2d3c8:	e011      	b.n	2d3ee <z_thread_timeout+0x40>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2d3ca:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   2d3ce:	f023 0204 	bic.w	r2, r3, #4
   2d3d2:	f804 2c0b 	strb.w	r2, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   2d3d6:	f023 0314 	bic.w	r3, r3, #20
   2d3da:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
   2d3de:	4630      	mov	r0, r6
   2d3e0:	f7f8 fa38 	bl	25854 <ready_thread>
	__asm__ volatile(
   2d3e4:	f385 8811 	msr	BASEPRI, r5
   2d3e8:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   2d3ec:	2301      	movs	r3, #1
   2d3ee:	b963      	cbnz	r3, 2d40a <z_thread_timeout+0x5c>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
   2d3f0:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
   2d3f4:	f013 0f28 	tst.w	r3, #40	; 0x28
   2d3f8:	d1f4      	bne.n	2d3e4 <z_thread_timeout+0x36>
			if (thread->base.pended_on != NULL) {
   2d3fa:	f854 3c10 	ldr.w	r3, [r4, #-16]
   2d3fe:	2b00      	cmp	r3, #0
   2d400:	d0e3      	beq.n	2d3ca <z_thread_timeout+0x1c>
				unpend_thread_no_timeout(thread);
   2d402:	4630      	mov	r0, r6
   2d404:	f7ff ff87 	bl	2d316 <unpend_thread_no_timeout>
   2d408:	e7df      	b.n	2d3ca <z_thread_timeout+0x1c>
}
   2d40a:	bd70      	pop	{r4, r5, r6, pc}

0002d40c <unpend_all>:
{
   2d40c:	b538      	push	{r3, r4, r5, lr}
   2d40e:	4605      	mov	r5, r0
	return list->head == list;
   2d410:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2d412:	42a5      	cmp	r5, r4
   2d414:	d00e      	beq.n	2d434 <unpend_all+0x28>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2d416:	b16c      	cbz	r4, 2d434 <unpend_all+0x28>
		unpend_thread_no_timeout(thread);
   2d418:	4620      	mov	r0, r4
   2d41a:	f7ff ff7c 	bl	2d316 <unpend_thread_no_timeout>
   2d41e:	f104 0018 	add.w	r0, r4, #24
   2d422:	f000 f8d8 	bl	2d5d6 <z_abort_timeout>
   2d426:	2300      	movs	r3, #0
   2d428:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
		ready_thread(thread);
   2d42c:	4620      	mov	r0, r4
   2d42e:	f7f8 fa11 	bl	25854 <ready_thread>
   2d432:	e7ed      	b.n	2d410 <unpend_all+0x4>
}
   2d434:	bd38      	pop	{r3, r4, r5, pc}

0002d436 <add_to_waitq_locked>:
{
   2d436:	b570      	push	{r4, r5, r6, lr}
   2d438:	4605      	mov	r5, r0
   2d43a:	460e      	mov	r6, r1
	unready_thread(thread);
   2d43c:	f7f8 fa64 	bl	25908 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   2d440:	7b6b      	ldrb	r3, [r5, #13]
   2d442:	f043 0302 	orr.w	r3, r3, #2
   2d446:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
   2d448:	b1fe      	cbz	r6, 2d48a <add_to_waitq_locked+0x54>
		thread->base.pended_on = wait_q;
   2d44a:	60ae      	str	r6, [r5, #8]
	return list->head == list;
   2d44c:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2d44e:	42a6      	cmp	r6, r4
   2d450:	d108      	bne.n	2d464 <add_to_waitq_locked+0x2e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2d452:	2400      	movs	r4, #0
   2d454:	e006      	b.n	2d464 <add_to_waitq_locked+0x2e>
	sys_dnode_t *const prev = successor->prev;
   2d456:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   2d458:	606b      	str	r3, [r5, #4]
	node->next = successor;
   2d45a:	602c      	str	r4, [r5, #0]
	prev->next = node;
   2d45c:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   2d45e:	6065      	str	r5, [r4, #4]
}
   2d460:	e013      	b.n	2d48a <add_to_waitq_locked+0x54>
   2d462:	2400      	movs	r4, #0
   2d464:	b164      	cbz	r4, 2d480 <add_to_waitq_locked+0x4a>
		if (z_sched_prio_cmp(thread, t) > 0) {
   2d466:	4621      	mov	r1, r4
   2d468:	4628      	mov	r0, r5
   2d46a:	f7ff ff11 	bl	2d290 <z_sched_prio_cmp>
   2d46e:	2800      	cmp	r0, #0
   2d470:	dcf1      	bgt.n	2d456 <add_to_waitq_locked+0x20>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2d472:	2c00      	cmp	r4, #0
   2d474:	d0f6      	beq.n	2d464 <add_to_waitq_locked+0x2e>
	return (node == list->tail) ? NULL : node->next;
   2d476:	6873      	ldr	r3, [r6, #4]
   2d478:	429c      	cmp	r4, r3
   2d47a:	d0f2      	beq.n	2d462 <add_to_waitq_locked+0x2c>
   2d47c:	6824      	ldr	r4, [r4, #0]
   2d47e:	e7f1      	b.n	2d464 <add_to_waitq_locked+0x2e>
	sys_dnode_t *const tail = list->tail;
   2d480:	6873      	ldr	r3, [r6, #4]
	node->next = list;
   2d482:	602e      	str	r6, [r5, #0]
	node->prev = tail;
   2d484:	606b      	str	r3, [r5, #4]
	tail->next = node;
   2d486:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2d488:	6075      	str	r5, [r6, #4]
}
   2d48a:	bd70      	pop	{r4, r5, r6, pc}

0002d48c <pend_locked>:
{
   2d48c:	b570      	push	{r4, r5, r6, lr}
   2d48e:	4604      	mov	r4, r0
   2d490:	4616      	mov	r6, r2
   2d492:	461d      	mov	r5, r3
	add_to_waitq_locked(thread, wait_q);
   2d494:	f7ff ffcf 	bl	2d436 <add_to_waitq_locked>
	add_thread_timeout(thread, timeout);
   2d498:	4632      	mov	r2, r6
   2d49a:	462b      	mov	r3, r5
   2d49c:	4620      	mov	r0, r4
   2d49e:	f7f8 f88d 	bl	255bc <add_thread_timeout>
}
   2d4a2:	bd70      	pop	{r4, r5, r6, pc}

0002d4a4 <z_unpend1_no_timeout>:
{
   2d4a4:	b570      	push	{r4, r5, r6, lr}
   2d4a6:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
   2d4a8:	2300      	movs	r3, #0
	__asm__ volatile(
   2d4aa:	f04f 0240 	mov.w	r2, #64	; 0x40
   2d4ae:	f3ef 8511 	mrs	r5, BASEPRI
   2d4b2:	f382 8812 	msr	BASEPRI_MAX, r2
   2d4b6:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
   2d4ba:	461c      	mov	r4, r3
   2d4bc:	e004      	b.n	2d4c8 <z_unpend1_no_timeout+0x24>
	__asm__ volatile(
   2d4be:	f385 8811 	msr	BASEPRI, r5
   2d4c2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   2d4c6:	2301      	movs	r3, #1
   2d4c8:	b943      	cbnz	r3, 2d4dc <z_unpend1_no_timeout+0x38>
		thread = _priq_wait_best(&wait_q->waitq);
   2d4ca:	4630      	mov	r0, r6
   2d4cc:	f7ff ff4c 	bl	2d368 <z_priq_dumb_best>
		if (thread != NULL) {
   2d4d0:	4604      	mov	r4, r0
   2d4d2:	2800      	cmp	r0, #0
   2d4d4:	d0f3      	beq.n	2d4be <z_unpend1_no_timeout+0x1a>
			unpend_thread_no_timeout(thread);
   2d4d6:	f7ff ff1e 	bl	2d316 <unpend_thread_no_timeout>
   2d4da:	e7f0      	b.n	2d4be <z_unpend1_no_timeout+0x1a>
}
   2d4dc:	4620      	mov	r0, r4
   2d4de:	bd70      	pop	{r4, r5, r6, pc}

0002d4e0 <z_unpend_first_thread>:
{
   2d4e0:	b570      	push	{r4, r5, r6, lr}
   2d4e2:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
   2d4e4:	2300      	movs	r3, #0
	__asm__ volatile(
   2d4e6:	f04f 0240 	mov.w	r2, #64	; 0x40
   2d4ea:	f3ef 8511 	mrs	r5, BASEPRI
   2d4ee:	f382 8812 	msr	BASEPRI_MAX, r2
   2d4f2:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
   2d4f6:	461c      	mov	r4, r3
   2d4f8:	e004      	b.n	2d504 <z_unpend_first_thread+0x24>
	__asm__ volatile(
   2d4fa:	f385 8811 	msr	BASEPRI, r5
   2d4fe:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   2d502:	2301      	movs	r3, #1
   2d504:	b963      	cbnz	r3, 2d520 <z_unpend_first_thread+0x40>
		thread = _priq_wait_best(&wait_q->waitq);
   2d506:	4630      	mov	r0, r6
   2d508:	f7ff ff2e 	bl	2d368 <z_priq_dumb_best>
		if (thread != NULL) {
   2d50c:	4604      	mov	r4, r0
   2d50e:	2800      	cmp	r0, #0
   2d510:	d0f3      	beq.n	2d4fa <z_unpend_first_thread+0x1a>
			unpend_thread_no_timeout(thread);
   2d512:	f7ff ff00 	bl	2d316 <unpend_thread_no_timeout>
   2d516:	f104 0018 	add.w	r0, r4, #24
   2d51a:	f000 f85c 	bl	2d5d6 <z_abort_timeout>
   2d51e:	e7ec      	b.n	2d4fa <z_unpend_first_thread+0x1a>
}
   2d520:	4620      	mov	r0, r4
   2d522:	bd70      	pop	{r4, r5, r6, pc}

0002d524 <z_unpend_all>:
{
   2d524:	b538      	push	{r3, r4, r5, lr}
   2d526:	4605      	mov	r5, r0
	int need_sched = 0;
   2d528:	2000      	movs	r0, #0
	return list->head == list;
   2d52a:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2d52c:	42a5      	cmp	r5, r4
   2d52e:	d008      	beq.n	2d542 <z_unpend_all+0x1e>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2d530:	b13c      	cbz	r4, 2d542 <z_unpend_all+0x1e>
		z_unpend_thread(thread);
   2d532:	4620      	mov	r0, r4
   2d534:	f7ff fefd 	bl	2d332 <z_unpend_thread>
		z_ready_thread(thread);
   2d538:	4620      	mov	r0, r4
   2d53a:	f7ff ff1c 	bl	2d376 <z_ready_thread>
		need_sched = 1;
   2d53e:	2001      	movs	r0, #1
   2d540:	e7f3      	b.n	2d52a <z_unpend_all+0x6>
}
   2d542:	bd38      	pop	{r3, r4, r5, pc}

0002d544 <init_ready_q>:
	sys_dlist_init(&rq->runq);
   2d544:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
   2d546:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
   2d548:	6083      	str	r3, [r0, #8]
}
   2d54a:	4770      	bx	lr

0002d54c <z_sched_wake>:
{
   2d54c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2d550:	4606      	mov	r6, r0
   2d552:	4688      	mov	r8, r1
   2d554:	4617      	mov	r7, r2
	LOCKED(&sched_spinlock) {
   2d556:	2300      	movs	r3, #0
	__asm__ volatile(
   2d558:	f04f 0240 	mov.w	r2, #64	; 0x40
   2d55c:	f3ef 8511 	mrs	r5, BASEPRI
   2d560:	f382 8812 	msr	BASEPRI_MAX, r2
   2d564:	f3bf 8f6f 	isb	sy
	bool ret = false;
   2d568:	4699      	mov	r9, r3
   2d56a:	e004      	b.n	2d576 <z_sched_wake+0x2a>
	__asm__ volatile(
   2d56c:	f385 8811 	msr	BASEPRI, r5
   2d570:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   2d574:	2301      	movs	r3, #1
   2d576:	b9a3      	cbnz	r3, 2d5a2 <z_sched_wake+0x56>
		thread = _priq_wait_best(&wait_q->waitq);
   2d578:	4630      	mov	r0, r6
   2d57a:	f7ff fef5 	bl	2d368 <z_priq_dumb_best>
		if (thread != NULL) {
   2d57e:	4604      	mov	r4, r0
   2d580:	2800      	cmp	r0, #0
   2d582:	d0f3      	beq.n	2d56c <z_sched_wake+0x20>
   2d584:	f8c0 80b0 	str.w	r8, [r0, #176]	; 0xb0
	thread->base.swap_data = data;
   2d588:	6147      	str	r7, [r0, #20]
			unpend_thread_no_timeout(thread);
   2d58a:	f7ff fec4 	bl	2d316 <unpend_thread_no_timeout>
   2d58e:	f104 0018 	add.w	r0, r4, #24
   2d592:	f000 f820 	bl	2d5d6 <z_abort_timeout>
			ready_thread(thread);
   2d596:	4620      	mov	r0, r4
   2d598:	f7f8 f95c 	bl	25854 <ready_thread>
			ret = true;
   2d59c:	f04f 0901 	mov.w	r9, #1
   2d5a0:	e7e4      	b.n	2d56c <z_sched_wake+0x20>
}
   2d5a2:	4648      	mov	r0, r9
   2d5a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002d5a8 <remove_timeout>:
{
   2d5a8:	b510      	push	{r4, lr}
   2d5aa:	4604      	mov	r4, r0
	if (next(t) != NULL) {
   2d5ac:	f7f8 fc42 	bl	25e34 <next>
   2d5b0:	b148      	cbz	r0, 2d5c6 <remove_timeout+0x1e>
   2d5b2:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
   2d5b4:	6903      	ldr	r3, [r0, #16]
   2d5b6:	6941      	ldr	r1, [r0, #20]
   2d5b8:	6920      	ldr	r0, [r4, #16]
   2d5ba:	181b      	adds	r3, r3, r0
   2d5bc:	6960      	ldr	r0, [r4, #20]
   2d5be:	eb41 0100 	adc.w	r1, r1, r0
   2d5c2:	6113      	str	r3, [r2, #16]
   2d5c4:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
   2d5c6:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
   2d5c8:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
   2d5ca:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2d5cc:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2d5ce:	2300      	movs	r3, #0
   2d5d0:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
   2d5d2:	6063      	str	r3, [r4, #4]
}
   2d5d4:	bd10      	pop	{r4, pc}

0002d5d6 <z_abort_timeout>:
{
   2d5d6:	b570      	push	{r4, r5, r6, lr}
   2d5d8:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
   2d5da:	2300      	movs	r3, #0
	__asm__ volatile(
   2d5dc:	f04f 0240 	mov.w	r2, #64	; 0x40
   2d5e0:	f3ef 8611 	mrs	r6, BASEPRI
   2d5e4:	f382 8812 	msr	BASEPRI_MAX, r2
   2d5e8:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
   2d5ec:	f06f 0015 	mvn.w	r0, #21
   2d5f0:	e004      	b.n	2d5fc <z_abort_timeout+0x26>
	__asm__ volatile(
   2d5f2:	f386 8811 	msr	BASEPRI, r6
   2d5f6:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   2d5fa:	2301      	movs	r3, #1
   2d5fc:	461d      	mov	r5, r3
   2d5fe:	b93b      	cbnz	r3, 2d610 <z_abort_timeout+0x3a>
	return node->next != NULL;
   2d600:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
   2d602:	2b00      	cmp	r3, #0
   2d604:	d0f5      	beq.n	2d5f2 <z_abort_timeout+0x1c>
			remove_timeout(to);
   2d606:	4620      	mov	r0, r4
   2d608:	f7ff ffce 	bl	2d5a8 <remove_timeout>
			ret = 0;
   2d60c:	4628      	mov	r0, r5
   2d60e:	e7f0      	b.n	2d5f2 <z_abort_timeout+0x1c>
}
   2d610:	bd70      	pop	{r4, r5, r6, pc}

0002d612 <z_get_next_timeout_expiry>:
{
   2d612:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
   2d614:	2300      	movs	r3, #0
	__asm__ volatile(
   2d616:	f04f 0240 	mov.w	r2, #64	; 0x40
   2d61a:	f3ef 8411 	mrs	r4, BASEPRI
   2d61e:	f382 8812 	msr	BASEPRI_MAX, r2
   2d622:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
   2d626:	f04f 30ff 	mov.w	r0, #4294967295
   2d62a:	e006      	b.n	2d63a <z_get_next_timeout_expiry+0x28>
		ret = next_timeout();
   2d62c:	f7f8 fc1a 	bl	25e64 <next_timeout>
	__asm__ volatile(
   2d630:	f384 8811 	msr	BASEPRI, r4
   2d634:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   2d638:	2301      	movs	r3, #1
   2d63a:	2b00      	cmp	r3, #0
   2d63c:	d0f6      	beq.n	2d62c <z_get_next_timeout_expiry+0x1a>
}
   2d63e:	bd10      	pop	{r4, pc}

0002d640 <z_set_timeout_expiry>:
{
   2d640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d642:	4606      	mov	r6, r0
   2d644:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
   2d646:	2300      	movs	r3, #0
	__asm__ volatile(
   2d648:	f04f 0240 	mov.w	r2, #64	; 0x40
   2d64c:	f3ef 8511 	mrs	r5, BASEPRI
   2d650:	f382 8812 	msr	BASEPRI_MAX, r2
   2d654:	f3bf 8f6f 	isb	sy
   2d658:	e00a      	b.n	2d670 <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
   2d65a:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
   2d65c:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   2d660:	2801      	cmp	r0, #1
   2d662:	dd00      	ble.n	2d666 <z_set_timeout_expiry+0x26>
   2d664:	b97c      	cbnz	r4, 2d686 <z_set_timeout_expiry+0x46>
	__asm__ volatile(
   2d666:	f385 8811 	msr	BASEPRI, r5
   2d66a:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   2d66e:	2301      	movs	r3, #1
   2d670:	461c      	mov	r4, r3
   2d672:	b97b      	cbnz	r3, 2d694 <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
   2d674:	f7f8 fbf6 	bl	25e64 <next_timeout>
			      || (ticks <= next_to);
   2d678:	f1b0 3fff 	cmp.w	r0, #4294967295
   2d67c:	d0ed      	beq.n	2d65a <z_set_timeout_expiry+0x1a>
   2d67e:	42b0      	cmp	r0, r6
   2d680:	dbec      	blt.n	2d65c <z_set_timeout_expiry+0x1c>
   2d682:	2401      	movs	r4, #1
   2d684:	e7ea      	b.n	2d65c <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   2d686:	4639      	mov	r1, r7
   2d688:	42b0      	cmp	r0, r6
   2d68a:	bfa8      	it	ge
   2d68c:	4630      	movge	r0, r6
   2d68e:	f7f4 ffa3 	bl	225d8 <sys_clock_set_timeout>
   2d692:	e7e8      	b.n	2d666 <z_set_timeout_expiry+0x26>
}
   2d694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002d696 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   2d696:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   2d698:	f7f8 fcf6 	bl	26088 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   2d69c:	bd08      	pop	{r3, pc}

0002d69e <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
   2d69e:	b508      	push	{r3, lr}
	return sys_clock_tick_get();
   2d6a0:	f7f8 fcf2 	bl	26088 <sys_clock_tick_get>
}
   2d6a4:	bd08      	pop	{r3, pc}

0002d6a6 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   2d6a6:	b900      	cbnz	r0, 2d6aa <z_impl_k_busy_wait+0x4>
   2d6a8:	4770      	bx	lr
{
   2d6aa:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   2d6ac:	f7ea fddc 	bl	18268 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   2d6b0:	bd08      	pop	{r3, pc}

0002d6b2 <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
   2d6b2:	b538      	push	{r3, r4, r5, lr}
   2d6b4:	460c      	mov	r4, r1
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2d6b6:	f1b1 3fff 	cmp.w	r1, #4294967295
   2d6ba:	bf08      	it	eq
   2d6bc:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   2d6c0:	d020      	beq.n	2d704 <sys_clock_timeout_end_calc+0x52>
   2d6c2:	4605      	mov	r5, r0
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2d6c4:	ea51 0300 	orrs.w	r3, r1, r0
   2d6c8:	d009      	beq.n	2d6de <sys_clock_timeout_end_calc+0x2c>
		return sys_clock_tick_get();
	} else {

		dt = timeout.ticks;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   2d6ca:	f06f 0301 	mvn.w	r3, #1
   2d6ce:	1a18      	subs	r0, r3, r0
   2d6d0:	f04f 33ff 	mov.w	r3, #4294967295
   2d6d4:	eb63 0101 	sbc.w	r1, r3, r1
   2d6d8:	2900      	cmp	r1, #0
   2d6da:	db03      	blt.n	2d6e4 <sys_clock_timeout_end_calc+0x32>
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   2d6dc:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get();
   2d6de:	f7f8 fcd3 	bl	26088 <sys_clock_tick_get>
   2d6e2:	e7fb      	b.n	2d6dc <sys_clock_timeout_end_calc+0x2a>
		return sys_clock_tick_get() + MAX(1, dt);
   2d6e4:	f7f8 fcd0 	bl	26088 <sys_clock_tick_get>
   2d6e8:	4603      	mov	r3, r0
   2d6ea:	462a      	mov	r2, r5
   2d6ec:	46a4      	mov	ip, r4
   2d6ee:	2d01      	cmp	r5, #1
   2d6f0:	f174 0400 	sbcs.w	r4, r4, #0
   2d6f4:	da02      	bge.n	2d6fc <sys_clock_timeout_end_calc+0x4a>
   2d6f6:	2201      	movs	r2, #1
   2d6f8:	f04f 0c00 	mov.w	ip, #0
   2d6fc:	1898      	adds	r0, r3, r2
   2d6fe:	eb41 010c 	adc.w	r1, r1, ip
   2d702:	e7eb      	b.n	2d6dc <sys_clock_timeout_end_calc+0x2a>
		return UINT64_MAX;
   2d704:	f04f 30ff 	mov.w	r0, #4294967295
   2d708:	4601      	mov	r1, r0
   2d70a:	e7e7      	b.n	2d6dc <sys_clock_timeout_end_calc+0x2a>

0002d70c <z_reschedule_unlocked>:
{
   2d70c:	b508      	push	{r3, lr}
	__asm__ volatile(
   2d70e:	f04f 0340 	mov.w	r3, #64	; 0x40
   2d712:	f3ef 8011 	mrs	r0, BASEPRI
   2d716:	f383 8812 	msr	BASEPRI_MAX, r3
   2d71a:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2d71e:	f7ff fdd8 	bl	2d2d2 <z_reschedule_irqlock>
}
   2d722:	bd08      	pop	{r3, pc}

0002d724 <k_timer_init>:
	timer->expiry_fn = expiry_fn;
   2d724:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
   2d726:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0U;
   2d728:	2300      	movs	r3, #0
   2d72a:	6303      	str	r3, [r0, #48]	; 0x30
   2d72c:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
   2d730:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
   2d732:	61c2      	str	r2, [r0, #28]
	node->next = NULL;
   2d734:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   2d736:	6043      	str	r3, [r0, #4]
	timer->user_data = NULL;
   2d738:	6343      	str	r3, [r0, #52]	; 0x34
}
   2d73a:	4770      	bx	lr

0002d73c <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   2d73c:	b510      	push	{r4, lr}
   2d73e:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   2d740:	f7ff ff49 	bl	2d5d6 <z_abort_timeout>

	if (inactive) {
   2d744:	b960      	cbnz	r0, 2d760 <z_impl_k_timer_stop+0x24>
		return;
	}

	if (timer->stop_fn != NULL) {
   2d746:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2d748:	b10b      	cbz	r3, 2d74e <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   2d74a:	4620      	mov	r0, r4
   2d74c:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   2d74e:	f104 0018 	add.w	r0, r4, #24
   2d752:	f7ff fea7 	bl	2d4a4 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   2d756:	b118      	cbz	r0, 2d760 <z_impl_k_timer_stop+0x24>
			z_ready_thread(pending_thread);
   2d758:	f7ff fe0d 	bl	2d376 <z_ready_thread>
			z_reschedule_unlocked();
   2d75c:	f7ff ffd6 	bl	2d70c <z_reschedule_unlocked>
		}
	}
}
   2d760:	bd10      	pop	{r4, pc}

0002d762 <is_condition_met>:
	switch (event->type) {
   2d762:	7b43      	ldrb	r3, [r0, #13]
   2d764:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2d768:	3b01      	subs	r3, #1
   2d76a:	2b07      	cmp	r3, #7
   2d76c:	d826      	bhi.n	2d7bc <is_condition_met+0x5a>
   2d76e:	e8df f003 	tbb	[pc, r3]
   2d772:	0414      	.short	0x0414
   2d774:	25250d25 	.word	0x25250d25
   2d778:	1c25      	.short	0x1c25
		if (k_sem_count_get(event->sem) > 0U) {
   2d77a:	6903      	ldr	r3, [r0, #16]
   2d77c:	689b      	ldr	r3, [r3, #8]
   2d77e:	b90b      	cbnz	r3, 2d784 <is_condition_met+0x22>
	return false;
   2d780:	2000      	movs	r0, #0
   2d782:	4770      	bx	lr
			*state = K_POLL_STATE_SEM_AVAILABLE;
   2d784:	2302      	movs	r3, #2
   2d786:	600b      	str	r3, [r1, #0]
			return true;
   2d788:	2001      	movs	r0, #1
   2d78a:	4770      	bx	lr
		if (!k_queue_is_empty(event->queue)) {
   2d78c:	6903      	ldr	r3, [r0, #16]
	return list->head;
   2d78e:	681b      	ldr	r3, [r3, #0]
   2d790:	b1b3      	cbz	r3, 2d7c0 <is_condition_met+0x5e>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   2d792:	2304      	movs	r3, #4
   2d794:	600b      	str	r3, [r1, #0]
			return true;
   2d796:	2001      	movs	r0, #1
   2d798:	4770      	bx	lr
		if (event->signal->signaled != 0U) {
   2d79a:	6903      	ldr	r3, [r0, #16]
   2d79c:	689b      	ldr	r3, [r3, #8]
   2d79e:	b90b      	cbnz	r3, 2d7a4 <is_condition_met+0x42>
	return false;
   2d7a0:	2000      	movs	r0, #0
   2d7a2:	4770      	bx	lr
			*state = K_POLL_STATE_SIGNALED;
   2d7a4:	2001      	movs	r0, #1
   2d7a6:	6008      	str	r0, [r1, #0]
			return true;
   2d7a8:	4770      	bx	lr
		if (event->msgq->used_msgs > 0) {
   2d7aa:	6903      	ldr	r3, [r0, #16]
   2d7ac:	6a1b      	ldr	r3, [r3, #32]
   2d7ae:	b90b      	cbnz	r3, 2d7b4 <is_condition_met+0x52>
	return false;
   2d7b0:	2000      	movs	r0, #0
}
   2d7b2:	4770      	bx	lr
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   2d7b4:	2310      	movs	r3, #16
   2d7b6:	600b      	str	r3, [r1, #0]
			return true;
   2d7b8:	2001      	movs	r0, #1
   2d7ba:	4770      	bx	lr
	switch (event->type) {
   2d7bc:	2000      	movs	r0, #0
   2d7be:	4770      	bx	lr
	return false;
   2d7c0:	2000      	movs	r0, #0
   2d7c2:	4770      	bx	lr

0002d7c4 <poller_thread>:
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2d7c4:	b108      	cbz	r0, 2d7ca <poller_thread+0x6>
   2d7c6:	3860      	subs	r0, #96	; 0x60
   2d7c8:	4770      	bx	lr
}
   2d7ca:	4770      	bx	lr

0002d7cc <clear_event_registration>:
	event->poller = NULL;
   2d7cc:	2300      	movs	r3, #0
   2d7ce:	6083      	str	r3, [r0, #8]
	switch (event->type) {
   2d7d0:	7b43      	ldrb	r3, [r0, #13]
   2d7d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2d7d6:	2b08      	cmp	r3, #8
   2d7d8:	d80e      	bhi.n	2d7f8 <clear_event_registration+0x2c>
   2d7da:	f44f 728b 	mov.w	r2, #278	; 0x116
   2d7de:	fa22 f303 	lsr.w	r3, r2, r3
   2d7e2:	f013 0f01 	tst.w	r3, #1
   2d7e6:	d007      	beq.n	2d7f8 <clear_event_registration+0x2c>
	return node->next != NULL;
   2d7e8:	6803      	ldr	r3, [r0, #0]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   2d7ea:	b12b      	cbz	r3, 2d7f8 <clear_event_registration+0x2c>
	sys_dnode_t *const prev = node->prev;
   2d7ec:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
   2d7ee:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2d7f0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2d7f2:	2300      	movs	r3, #0
   2d7f4:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   2d7f6:	6043      	str	r3, [r0, #4]
}
   2d7f8:	4770      	bx	lr

0002d7fa <clear_event_registrations>:
{
   2d7fa:	b570      	push	{r4, r5, r6, lr}
   2d7fc:	4606      	mov	r6, r0
   2d7fe:	4614      	mov	r4, r2
	while (num_events--) {
   2d800:	e012      	b.n	2d828 <clear_event_registrations+0x2e>
		clear_event_registration(&events[num_events]);
   2d802:	eb05 0085 	add.w	r0, r5, r5, lsl #2
   2d806:	eb06 0080 	add.w	r0, r6, r0, lsl #2
   2d80a:	f7ff ffdf 	bl	2d7cc <clear_event_registration>
	__asm__ volatile(
   2d80e:	f384 8811 	msr	BASEPRI, r4
   2d812:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   2d816:	f04f 0340 	mov.w	r3, #64	; 0x40
   2d81a:	f3ef 8411 	mrs	r4, BASEPRI
   2d81e:	f383 8812 	msr	BASEPRI_MAX, r3
   2d822:	f3bf 8f6f 	isb	sy
	while (num_events--) {
   2d826:	4629      	mov	r1, r5
   2d828:	1e4d      	subs	r5, r1, #1
   2d82a:	2900      	cmp	r1, #0
   2d82c:	d1e9      	bne.n	2d802 <clear_event_registrations+0x8>
}
   2d82e:	bd70      	pop	{r4, r5, r6, pc}

0002d830 <add_event>:
{
   2d830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d834:	4605      	mov	r5, r0
   2d836:	460e      	mov	r6, r1
	return list->head == list;
   2d838:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2d83a:	4298      	cmp	r0, r3
   2d83c:	d015      	beq.n	2d86a <add_event+0x3a>
   2d83e:	4614      	mov	r4, r2
   2d840:	6843      	ldr	r3, [r0, #4]
	if ((pending == NULL) ||
   2d842:	b193      	cbz	r3, 2d86a <add_event+0x3a>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2d844:	6898      	ldr	r0, [r3, #8]
   2d846:	f7ff ffbd 	bl	2d7c4 <poller_thread>
   2d84a:	4680      	mov	r8, r0
   2d84c:	4620      	mov	r0, r4
   2d84e:	f7ff ffb9 	bl	2d7c4 <poller_thread>
   2d852:	4607      	mov	r7, r0
   2d854:	4601      	mov	r1, r0
   2d856:	4640      	mov	r0, r8
   2d858:	f7ff fd1a 	bl	2d290 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   2d85c:	2800      	cmp	r0, #0
   2d85e:	dc04      	bgt.n	2d86a <add_event+0x3a>
	return list->head == list;
   2d860:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2d862:	42a5      	cmp	r5, r4
   2d864:	d10f      	bne.n	2d886 <add_event+0x56>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2d866:	2400      	movs	r4, #0
   2d868:	e00d      	b.n	2d886 <add_event+0x56>
	sys_dnode_t *const tail = list->tail;
   2d86a:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   2d86c:	6035      	str	r5, [r6, #0]
	node->prev = tail;
   2d86e:	6073      	str	r3, [r6, #4]
	tail->next = node;
   2d870:	601e      	str	r6, [r3, #0]
	list->tail = node;
   2d872:	606e      	str	r6, [r5, #4]
}
   2d874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	sys_dnode_t *const prev = successor->prev;
   2d878:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   2d87a:	6073      	str	r3, [r6, #4]
	node->next = successor;
   2d87c:	6034      	str	r4, [r6, #0]
	prev->next = node;
   2d87e:	601e      	str	r6, [r3, #0]
	successor->prev = node;
   2d880:	6066      	str	r6, [r4, #4]
			return;
   2d882:	e7f7      	b.n	2d874 <add_event+0x44>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2d884:	2400      	movs	r4, #0
   2d886:	b19c      	cbz	r4, 2d8b0 <add_event+0x80>
		if (z_sched_prio_cmp(poller_thread(poller),
   2d888:	68a0      	ldr	r0, [r4, #8]
   2d88a:	f7ff ff9b 	bl	2d7c4 <poller_thread>
   2d88e:	4601      	mov	r1, r0
   2d890:	4638      	mov	r0, r7
   2d892:	f7ff fcfd 	bl	2d290 <z_sched_prio_cmp>
   2d896:	2800      	cmp	r0, #0
   2d898:	dcee      	bgt.n	2d878 <add_event+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2d89a:	4622      	mov	r2, r4
	return (node == list->tail) ? NULL : node->next;
   2d89c:	686b      	ldr	r3, [r5, #4]
   2d89e:	429c      	cmp	r4, r3
   2d8a0:	d0f0      	beq.n	2d884 <add_event+0x54>
   2d8a2:	6824      	ldr	r4, [r4, #0]
   2d8a4:	2c00      	cmp	r4, #0
   2d8a6:	d0ee      	beq.n	2d886 <add_event+0x56>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2d8a8:	2a00      	cmp	r2, #0
   2d8aa:	d1ec      	bne.n	2d886 <add_event+0x56>
   2d8ac:	4614      	mov	r4, r2
   2d8ae:	e7ea      	b.n	2d886 <add_event+0x56>
	sys_dnode_t *const tail = list->tail;
   2d8b0:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   2d8b2:	6035      	str	r5, [r6, #0]
	node->prev = tail;
   2d8b4:	6073      	str	r3, [r6, #4]
	tail->next = node;
   2d8b6:	601e      	str	r6, [r3, #0]
	list->tail = node;
   2d8b8:	606e      	str	r6, [r5, #4]
}
   2d8ba:	e7db      	b.n	2d874 <add_event+0x44>

0002d8bc <register_event>:
{
   2d8bc:	b538      	push	{r3, r4, r5, lr}
   2d8be:	4604      	mov	r4, r0
   2d8c0:	460d      	mov	r5, r1
	switch (event->type) {
   2d8c2:	7b43      	ldrb	r3, [r0, #13]
   2d8c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2d8c8:	3b01      	subs	r3, #1
   2d8ca:	2b07      	cmp	r3, #7
   2d8cc:	d80b      	bhi.n	2d8e6 <register_event+0x2a>
   2d8ce:	e8df f003 	tbb	[pc, r3]
   2d8d2:	0413      	.short	0x0413
   2d8d4:	0a0a0c0a 	.word	0x0a0a0c0a
   2d8d8:	190a      	.short	0x190a
		add_event(&event->sem->poll_events, event, poller);
   2d8da:	6900      	ldr	r0, [r0, #16]
   2d8dc:	460a      	mov	r2, r1
   2d8de:	4621      	mov	r1, r4
   2d8e0:	3010      	adds	r0, #16
   2d8e2:	f7ff ffa5 	bl	2d830 <add_event>
	event->poller = poller;
   2d8e6:	60a5      	str	r5, [r4, #8]
}
   2d8e8:	bd38      	pop	{r3, r4, r5, pc}
		add_event(&event->queue->poll_events, event, poller);
   2d8ea:	6900      	ldr	r0, [r0, #16]
   2d8ec:	460a      	mov	r2, r1
   2d8ee:	4621      	mov	r1, r4
   2d8f0:	3010      	adds	r0, #16
   2d8f2:	f7ff ff9d 	bl	2d830 <add_event>
		break;
   2d8f6:	e7f6      	b.n	2d8e6 <register_event+0x2a>
		add_event(&event->signal->poll_events, event, poller);
   2d8f8:	460a      	mov	r2, r1
   2d8fa:	4601      	mov	r1, r0
   2d8fc:	6900      	ldr	r0, [r0, #16]
   2d8fe:	f7ff ff97 	bl	2d830 <add_event>
		break;
   2d902:	e7f0      	b.n	2d8e6 <register_event+0x2a>
		add_event(&event->msgq->poll_events, event, poller);
   2d904:	6900      	ldr	r0, [r0, #16]
   2d906:	460a      	mov	r2, r1
   2d908:	4621      	mov	r1, r4
   2d90a:	3024      	adds	r0, #36	; 0x24
   2d90c:	f7ff ff90 	bl	2d830 <add_event>
		break;
   2d910:	e7e9      	b.n	2d8e6 <register_event+0x2a>

0002d912 <register_events>:
{
   2d912:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d916:	b083      	sub	sp, #12
   2d918:	4680      	mov	r8, r0
   2d91a:	460f      	mov	r7, r1
   2d91c:	4691      	mov	r9, r2
   2d91e:	469a      	mov	sl, r3
	for (int ii = 0; ii < num_events; ii++) {
   2d920:	2500      	movs	r5, #0
	int events_registered = 0;
   2d922:	46ab      	mov	fp, r5
	for (int ii = 0; ii < num_events; ii++) {
   2d924:	e00a      	b.n	2d93c <register_events+0x2a>
		} else if (!just_check && poller->is_polling) {
   2d926:	f1ba 0f00 	cmp.w	sl, #0
   2d92a:	d102      	bne.n	2d932 <register_events+0x20>
   2d92c:	f899 3000 	ldrb.w	r3, [r9]
   2d930:	bb2b      	cbnz	r3, 2d97e <register_events+0x6c>
	__asm__ volatile(
   2d932:	f386 8811 	msr	BASEPRI, r6
   2d936:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   2d93a:	3501      	adds	r5, #1
   2d93c:	42bd      	cmp	r5, r7
   2d93e:	da25      	bge.n	2d98c <register_events+0x7a>
	__asm__ volatile(
   2d940:	f04f 0340 	mov.w	r3, #64	; 0x40
   2d944:	f3ef 8611 	mrs	r6, BASEPRI
   2d948:	f383 8812 	msr	BASEPRI_MAX, r3
   2d94c:	f3bf 8f6f 	isb	sy
		if (is_condition_met(&events[ii], &state)) {
   2d950:	eb05 0485 	add.w	r4, r5, r5, lsl #2
   2d954:	eb08 0484 	add.w	r4, r8, r4, lsl #2
   2d958:	a901      	add	r1, sp, #4
   2d95a:	4620      	mov	r0, r4
   2d95c:	f7ff ff01 	bl	2d762 <is_condition_met>
   2d960:	2800      	cmp	r0, #0
   2d962:	d0e0      	beq.n	2d926 <register_events+0x14>
	event->poller = NULL;
   2d964:	2100      	movs	r1, #0
   2d966:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   2d968:	68e3      	ldr	r3, [r4, #12]
   2d96a:	f3c3 3286 	ubfx	r2, r3, #14, #7
   2d96e:	9801      	ldr	r0, [sp, #4]
   2d970:	4302      	orrs	r2, r0
   2d972:	f362 3394 	bfi	r3, r2, #14, #7
   2d976:	60e3      	str	r3, [r4, #12]
			poller->is_polling = false;
   2d978:	f889 1000 	strb.w	r1, [r9]
   2d97c:	e7d9      	b.n	2d932 <register_events+0x20>
			register_event(&events[ii], poller);
   2d97e:	4649      	mov	r1, r9
   2d980:	4620      	mov	r0, r4
   2d982:	f7ff ff9b 	bl	2d8bc <register_event>
			events_registered += 1;
   2d986:	f10b 0b01 	add.w	fp, fp, #1
   2d98a:	e7d2      	b.n	2d932 <register_events+0x20>
}
   2d98c:	4658      	mov	r0, fp
   2d98e:	b003      	add	sp, #12
   2d990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002d994 <signal_poller>:
{
   2d994:	b538      	push	{r3, r4, r5, lr}
   2d996:	460d      	mov	r5, r1
	struct k_thread *thread = poller_thread(event->poller);
   2d998:	6880      	ldr	r0, [r0, #8]
   2d99a:	f7ff ff13 	bl	2d7c4 <poller_thread>
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
   2d99e:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_pending(thread)) {
   2d9a0:	f013 0f02 	tst.w	r3, #2
   2d9a4:	d025      	beq.n	2d9f2 <signal_poller+0x5e>
   2d9a6:	4604      	mov	r4, r0
	return thread->base.timeout.dticks == _EXPIRED;
   2d9a8:	6a82      	ldr	r2, [r0, #40]	; 0x28
   2d9aa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	if (z_is_thread_timeout_expired(thread)) {
   2d9ac:	f1b3 3fff 	cmp.w	r3, #4294967295
   2d9b0:	bf08      	it	eq
   2d9b2:	f112 0f02 	cmneq.w	r2, #2
   2d9b6:	d01e      	beq.n	2d9f6 <signal_poller+0x62>
	z_unpend_thread(thread);
   2d9b8:	f7ff fcbb 	bl	2d332 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   2d9bc:	2d08      	cmp	r5, #8
   2d9be:	d00a      	beq.n	2d9d6 <signal_poller+0x42>
   2d9c0:	2300      	movs	r3, #0
   2d9c2:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	uint8_t state = thread->base.thread_state;
   2d9c6:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2d9c8:	f013 0f1f 	tst.w	r3, #31
   2d9cc:	d108      	bne.n	2d9e0 <signal_poller+0x4c>
	return node->next != NULL;
   2d9ce:	69a3      	ldr	r3, [r4, #24]
   2d9d0:	b123      	cbz	r3, 2d9dc <signal_poller+0x48>
   2d9d2:	2300      	movs	r3, #0
   2d9d4:	e005      	b.n	2d9e2 <signal_poller+0x4e>
   2d9d6:	f06f 0303 	mvn.w	r3, #3
   2d9da:	e7f2      	b.n	2d9c2 <signal_poller+0x2e>
   2d9dc:	2301      	movs	r3, #1
   2d9de:	e000      	b.n	2d9e2 <signal_poller+0x4e>
   2d9e0:	2300      	movs	r3, #0
	if (!z_is_thread_ready(thread)) {
   2d9e2:	b90b      	cbnz	r3, 2d9e8 <signal_poller+0x54>
		return 0;
   2d9e4:	2000      	movs	r0, #0
   2d9e6:	e005      	b.n	2d9f4 <signal_poller+0x60>
	z_ready_thread(thread);
   2d9e8:	4620      	mov	r0, r4
   2d9ea:	f7ff fcc4 	bl	2d376 <z_ready_thread>
	return 0;
   2d9ee:	2000      	movs	r0, #0
   2d9f0:	e000      	b.n	2d9f4 <signal_poller+0x60>
		return 0;
   2d9f2:	2000      	movs	r0, #0
}
   2d9f4:	bd38      	pop	{r3, r4, r5, pc}
		return -EAGAIN;
   2d9f6:	f06f 000a 	mvn.w	r0, #10
   2d9fa:	e7fb      	b.n	2d9f4 <signal_poller+0x60>

0002d9fc <signal_triggered_work>:

extern int z_work_submit_to_queue(struct k_work_q *queue,
			 struct k_work *work);

static int signal_triggered_work(struct k_poll_event *event, uint32_t status)
{
   2d9fc:	b570      	push	{r4, r5, r6, lr}
	struct z_poller *poller = event->poller;
   2d9fe:	6884      	ldr	r4, [r0, #8]
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   2da00:	7823      	ldrb	r3, [r4, #0]
   2da02:	b173      	cbz	r3, 2da22 <signal_triggered_work+0x26>
   2da04:	f854 5c04 	ldr.w	r5, [r4, #-4]
   2da08:	b15d      	cbz	r5, 2da22 <signal_triggered_work+0x26>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
   2da0a:	f1a4 0614 	sub.w	r6, r4, #20
   2da0e:	f104 0014 	add.w	r0, r4, #20
   2da12:	f7ff fde0 	bl	2d5d6 <z_abort_timeout>
		twork->poll_result = 0;
   2da16:	2300      	movs	r3, #0
   2da18:	62e3      	str	r3, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   2da1a:	4631      	mov	r1, r6
   2da1c:	4628      	mov	r0, r5
   2da1e:	f7ff fb80 	bl	2d122 <z_work_submit_to_queue>
	}

	return 0;
}
   2da22:	2000      	movs	r0, #0
   2da24:	bd70      	pop	{r4, r5, r6, pc}

0002da26 <signal_poll_event>:
{
   2da26:	b570      	push	{r4, r5, r6, lr}
   2da28:	4604      	mov	r4, r0
   2da2a:	460d      	mov	r5, r1
	struct z_poller *poller = event->poller;
   2da2c:	6886      	ldr	r6, [r0, #8]
	if (poller != NULL) {
   2da2e:	b1d6      	cbz	r6, 2da66 <signal_poll_event+0x40>
		if (poller->mode == MODE_POLL) {
   2da30:	7873      	ldrb	r3, [r6, #1]
   2da32:	2b01      	cmp	r3, #1
   2da34:	d00d      	beq.n	2da52 <signal_poll_event+0x2c>
		} else if (poller->mode == MODE_TRIGGERED) {
   2da36:	2b02      	cmp	r3, #2
   2da38:	d012      	beq.n	2da60 <signal_poll_event+0x3a>
		poller->is_polling = false;
   2da3a:	2000      	movs	r0, #0
   2da3c:	7030      	strb	r0, [r6, #0]
	event->poller = NULL;
   2da3e:	2300      	movs	r3, #0
   2da40:	60a3      	str	r3, [r4, #8]
	event->state |= state;
   2da42:	68e3      	ldr	r3, [r4, #12]
   2da44:	f3c3 3286 	ubfx	r2, r3, #14, #7
   2da48:	432a      	orrs	r2, r5
   2da4a:	f362 3394 	bfi	r3, r2, #14, #7
   2da4e:	60e3      	str	r3, [r4, #12]
}
   2da50:	bd70      	pop	{r4, r5, r6, pc}
			retcode = signal_poller(event, state);
   2da52:	f7ff ff9f 	bl	2d994 <signal_poller>
		poller->is_polling = false;
   2da56:	2300      	movs	r3, #0
   2da58:	7033      	strb	r3, [r6, #0]
		if (retcode < 0) {
   2da5a:	4298      	cmp	r0, r3
   2da5c:	daef      	bge.n	2da3e <signal_poll_event+0x18>
   2da5e:	e7f7      	b.n	2da50 <signal_poll_event+0x2a>
			retcode = signal_triggered_work(event, state);
   2da60:	f7ff ffcc 	bl	2d9fc <signal_triggered_work>
   2da64:	e7f7      	b.n	2da56 <signal_poll_event+0x30>
	int retcode = 0;
   2da66:	2000      	movs	r0, #0
   2da68:	e7e9      	b.n	2da3e <signal_poll_event+0x18>

0002da6a <k_poll_event_init>:
{
   2da6a:	b410      	push	{r4}
	event->poller = NULL;
   2da6c:	2400      	movs	r4, #0
   2da6e:	6084      	str	r4, [r0, #8]
	event->type = type;
   2da70:	f890 c00d 	ldrb.w	ip, [r0, #13]
   2da74:	f361 0c05 	bfi	ip, r1, #0, #6
   2da78:	f880 c00d 	strb.w	ip, [r0, #13]
	event->state = K_POLL_STATE_NOT_READY;
   2da7c:	68c1      	ldr	r1, [r0, #12]
   2da7e:	f364 3194 	bfi	r1, r4, #14, #7
   2da82:	60c1      	str	r1, [r0, #12]
	event->mode = mode;
   2da84:	7b81      	ldrb	r1, [r0, #14]
   2da86:	f362 1145 	bfi	r1, r2, #5, #1
   2da8a:	7381      	strb	r1, [r0, #14]
	event->unused = 0U;
   2da8c:	89c2      	ldrh	r2, [r0, #14]
   2da8e:	f364 128f 	bfi	r2, r4, #6, #10
   2da92:	81c2      	strh	r2, [r0, #14]
	event->obj = obj;
   2da94:	6103      	str	r3, [r0, #16]
}
   2da96:	bc10      	pop	{r4}
   2da98:	4770      	bx	lr

0002da9a <z_handle_obj_poll_events>:
{
   2da9a:	b508      	push	{r3, lr}
   2da9c:	4603      	mov	r3, r0
	return list->head == list;
   2da9e:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   2daa0:	4283      	cmp	r3, r0
   2daa2:	d008      	beq.n	2dab6 <z_handle_obj_poll_events+0x1c>
	sys_dnode_t *const prev = node->prev;
   2daa4:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
   2daa6:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
   2daa8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2daaa:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2daac:	2300      	movs	r3, #0
   2daae:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   2dab0:	6043      	str	r3, [r0, #4]
		(void) signal_poll_event(poll_event, state);
   2dab2:	f7ff ffb8 	bl	2da26 <signal_poll_event>
}
   2dab6:	bd08      	pop	{r3, pc}

0002dab8 <z_impl_k_poll_signal_init>:
	list->head = (sys_dnode_t *)list;
   2dab8:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   2daba:	6040      	str	r0, [r0, #4]
	sig->signaled = 0U;
   2dabc:	2300      	movs	r3, #0
   2dabe:	6083      	str	r3, [r0, #8]
}
   2dac0:	4770      	bx	lr

0002dac2 <z_impl_k_poll_signal_reset>:
	sig->signaled = 0U;
   2dac2:	2300      	movs	r3, #0
   2dac4:	6083      	str	r3, [r0, #8]
}
   2dac6:	4770      	bx	lr

0002dac8 <z_heap_aligned_alloc>:
{
   2dac8:	b5d0      	push	{r4, r6, r7, lr}
   2daca:	b082      	sub	sp, #8
   2dacc:	4604      	mov	r4, r0
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   2dace:	2300      	movs	r3, #0
   2dad0:	3204      	adds	r2, #4
   2dad2:	d20e      	bcs.n	2daf2 <z_heap_aligned_alloc+0x2a>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
   2dad4:	b97b      	cbnz	r3, 2daf6 <z_heap_aligned_alloc+0x2e>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   2dad6:	2600      	movs	r6, #0
   2dad8:	2700      	movs	r7, #0
   2dada:	e9cd 6700 	strd	r6, r7, [sp]
   2dade:	f041 0104 	orr.w	r1, r1, #4
   2dae2:	4620      	mov	r0, r4
   2dae4:	f7ff f851 	bl	2cb8a <k_heap_aligned_alloc>
	if (mem == NULL) {
   2dae8:	b108      	cbz	r0, 2daee <z_heap_aligned_alloc+0x26>
	*heap_ref = heap;
   2daea:	f840 4b04 	str.w	r4, [r0], #4
}
   2daee:	b002      	add	sp, #8
   2daf0:	bdd0      	pop	{r4, r6, r7, pc}
   2daf2:	2301      	movs	r3, #1
   2daf4:	e7ee      	b.n	2dad4 <z_heap_aligned_alloc+0xc>
		return NULL;
   2daf6:	2000      	movs	r0, #0
   2daf8:	e7f9      	b.n	2daee <z_heap_aligned_alloc+0x26>

0002dafa <k_free>:
	if (ptr != NULL) {
   2dafa:	b130      	cbz	r0, 2db0a <k_free+0x10>
{
   2dafc:	b508      	push	{r3, lr}
		k_heap_free(*heap_ref, ptr);
   2dafe:	1f01      	subs	r1, r0, #4
   2db00:	f850 0c04 	ldr.w	r0, [r0, #-4]
   2db04:	f7ff f897 	bl	2cc36 <k_heap_free>
}
   2db08:	bd08      	pop	{r3, pc}
   2db0a:	4770      	bx	lr

0002db0c <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   2db0c:	4770      	bx	lr
	...
